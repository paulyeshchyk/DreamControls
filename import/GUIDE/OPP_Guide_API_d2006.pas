{*******************************************************}
{                                                       }
{ Import unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

Unit OPP_Guide_API_d2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Variants,
  Classes,
  SysUtils,
  OPP_Guide_API;
function ConvertTOPPGuideAPIExecutionStateToVariant(var R : TOPPGuideAPIExecutionState) : OleVariant;
function ConvertVariantToTOPPGuideAPIExecutionState(const V : OleVariant) : TOPPGuideAPIExecutionState;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TOPPGuideAPIExecutionState__Wrapper = class(TDCRecordWrapper)
private
fR : TOPPGuideAPIExecutionState;
public
function GetRecordPtr : pointer; override;
published
procedure setstepIdentifier(const val : AnsiString);
function getstepIdentifier : AnsiString;
property stepIdentifier : AnsiString read getstepIdentifier write setstepIdentifier;
procedure setexecutionResult(const val : AnsiString);
function getexecutionResult : AnsiString;
property executionResult : AnsiString read getexecutionResult write setexecutionResult;
end;
function __TOPPGuideAPIExecutionState__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TOPPGuideAPIExecutionState__Wrapper.setstepIdentifier(const val : AnsiString);
begin
TOPPGuideAPIExecutionState(GetRecordPtr^).stepIdentifier := val;
end;
function __TOPPGuideAPIExecutionState__Wrapper.getstepIdentifier : AnsiString;
begin
result := TOPPGuideAPIExecutionState(GetRecordPtr^).stepIdentifier;
end;
procedure __TOPPGuideAPIExecutionState__Wrapper.setexecutionResult(const val : AnsiString);
begin
TOPPGuideAPIExecutionState(GetRecordPtr^).executionResult := val;
end;
function __TOPPGuideAPIExecutionState__Wrapper.getexecutionResult : AnsiString;
begin
result := TOPPGuideAPIExecutionState(GetRecordPtr^).executionResult;
end;
function _TOPPGuideAPIExecutionState_ : IDispatch;
begin
  result := __TOPPGuideAPIExecutionState__Wrapper.Create;
end;

type __TOPPGuideAPIExecutionState__Wrapper__ = class(__TOPPGuideAPIExecutionState__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TOPPGuideAPIExecutionState__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTOPPGuideAPIExecutionStateToVariant(var R : TOPPGuideAPIExecutionState) : OleVariant;
var
__rw : __TOPPGuideAPIExecutionState__Wrapper__;
begin
__rw := __TOPPGuideAPIExecutionState__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTOPPGuideAPIExecutionState(const V : OleVariant) : TOPPGuideAPIExecutionState;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TOPPGuideAPIExecutionState((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..5] of string = (
'rsvIdle'
,'rsvStarted'
,'rsvProgress'
,'rsvFinished'
,'rsvError'
,'1'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,rsvIdle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,rsvStarted));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,rsvProgress));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,rsvFinished));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,rsvError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,1));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
for i := 0 to 5 do
UnregisterConst(__ConstNames0[i], __RegisteredConstsList0[i]);
__RegisteredConstsList0.Free
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'TOPPGuideAPIExecutionState'
);

procedure __UnregisterProcs;
var i : integer;
begin
  for i := 0 to 0 do
    UnregisterProcedure(MethodNames[i] ,__RegisteredMethods[i]);
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TOPPGuideAPIExecutionState_)));
end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
