{ ******************************************************* }
{ }
{ Import unit generated by UNITIMPORTER program }
{ }
{ ******************************************************* }

Unit OPP_Guide_Executor_State_d2006;

interface

{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}

uses
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  OPP_Guide_Executor_RunState;
function ConvertTOPPGuideExecutorRunStateToVariant(var R: TOPPGuideExecutorRunState): OleVariant;
function ConvertVariantToTOPPGuideExecutorRunState(const V: OleVariant): TOPPGuideExecutorRunState;

implementation

{$IFDEF D3}
{$ELSE}

uses ole2;

type
  OleVariant = Variant;
{$ENDIF}

type
  __TOPPGuideExecutorRunState__Wrapper = class(TDCRecordWrapper)
  private
    fR: TOPPGuideExecutorRunState;
  public
    function GetRecordPtr: pointer; override;
  published
    procedure setstepIdentifier(const val: AnsiString);
    function getstepIdentifier: AnsiString;
    property stepIdentifier: AnsiString read getstepIdentifier write setstepIdentifier;
    procedure setexecutionResult(const val: AnsiString);
    function getexecutionResult: AnsiString;
    property executionResult: AnsiString read getexecutionResult write setexecutionResult;
  end;

function __TOPPGuideExecutorRunState__Wrapper.GetRecordPtr: pointer;
begin
  result := @fR;
end;

procedure __TOPPGuideExecutorRunState__Wrapper.setstepIdentifier(const val: AnsiString);
begin
  TOPPGuideExecutorRunState(GetRecordPtr^).stepIdentifier := val;
end;

function __TOPPGuideExecutorRunState__Wrapper.getstepIdentifier: AnsiString;
begin
  result := TOPPGuideExecutorRunState(GetRecordPtr^).stepIdentifier;
end;

procedure __TOPPGuideExecutorRunState__Wrapper.setexecutionResult(const val: AnsiString);
begin
  TOPPGuideExecutorRunState(GetRecordPtr^).executionResult := val;
end;

function __TOPPGuideExecutorRunState__Wrapper.getexecutionResult: AnsiString;
begin
  result := TOPPGuideExecutorRunState(GetRecordPtr^).executionResult;
end;

function _TOPPGuideExecutorRunState_: IDispatch;
begin
  result := __TOPPGuideExecutorRunState__Wrapper.Create;
end;

type
  __TOPPGuideExecutorRunState__Wrapper__ = class(__TOPPGuideExecutorRunState__Wrapper)
  private
    fRPtr: pointer;
    function GetRecordPtr: pointer; override;
  end;

function __TOPPGuideExecutorRunState__Wrapper__.GetRecordPtr: pointer;
begin
  result := fRPtr;
end;

function ConvertTOPPGuideExecutorRunStateToVariant(var R: TOPPGuideExecutorRunState): OleVariant;
var
  __rw: __TOPPGuideExecutorRunState__Wrapper__;
begin
  __rw := __TOPPGuideExecutorRunState__Wrapper__.Create;
  __rw.fRPtr := @R;
  result := IDispatch(__rw);
end;

function ConvertVariantToTOPPGuideExecutorRunState(const V: OleVariant): TOPPGuideExecutorRunState;
var
  _idisp: IDispatch;
begin
  _idisp := VarToInterface(V);
  if _idisp = nil then
    exit;
  result := TOPPGuideExecutorRunState((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

procedure __RegisterProps;
begin
end;

const
  __ConstNames0: array [0 .. 5] of string = ('rsvIdle', 'rsvStarted', 'rsvProgress', 'rsvFinished', 'rsvError', '1');

var
  __RegisteredConstsList0: TList;

procedure __RegisterConsts0;
begin
  __RegisteredConstsList0 := TList.Create;
  __RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0], rsvIdle));
  __RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1], rsvStarted));
  __RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2], rsvProgress));
  __RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3], rsvFinished));
  __RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4], rsvError));
  __RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5], 1));
end;

procedure __UnregisterConsts0;
var
  i: integer;
begin
  for i := 0 to 5 do
    UnregisterConst(__ConstNames0[i], __RegisteredConstsList0[i]);
  __RegisteredConstsList0.Free
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var
  __RegisteredMethods: TList;

const
  MethodNames: array [0 .. 0] of string = ('TOPPGuideExecutorRunState');

procedure __UnregisterProcs;
var
  i: integer;
begin
  for i := 0 to 0 do
    UnregisterProcedure(MethodNames[i], __RegisteredMethods[i]);
  __RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
  __RegisteredMethods.Add(RegisterRWProc(MethodNames[0], Addr(_TOPPGuideExecutorRunState_)));
end;

initialization

__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization

__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;

end.
