{*******************************************************}
{                                                       }
{ Import unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

Unit JSON_d2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  Windows,
  SysConst,
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Rtti,
  TypInfo,
  Types,
  system.json;
function ConvertTFormatSettingsToVariant(var R : TFormatSettings) : OleVariant;
function ConvertVariantToTFormatSettings(const V : OleVariant) : TFormatSettings;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TFormatSettings__Wrapper = class(TDCRecordWrapper)
private
fR : TFormatSettings;
public
function GetRecordPtr : pointer; override;
published
procedure setCurrencyFormat(const val : Byte);
function getCurrencyFormat : Byte;
property CurrencyFormat : Byte read getCurrencyFormat write setCurrencyFormat;
procedure setNegCurrFormat(const val : Byte);
function getNegCurrFormat : Byte;
property NegCurrFormat : Byte read getNegCurrFormat write setNegCurrFormat;
procedure setThousandSeparator(const val : Char);
function getThousandSeparator : Char;
property ThousandSeparator : Char read getThousandSeparator write setThousandSeparator;
procedure setDecimalSeparator(const val : Char);
function getDecimalSeparator : Char;
property DecimalSeparator : Char read getDecimalSeparator write setDecimalSeparator;
procedure setCurrencyDecimals(const val : Byte);
function getCurrencyDecimals : Byte;
property CurrencyDecimals : Byte read getCurrencyDecimals write setCurrencyDecimals;
procedure setDateSeparator(const val : Char);
function getDateSeparator : Char;
property DateSeparator : Char read getDateSeparator write setDateSeparator;
procedure setTimeSeparator(const val : Char);
function getTimeSeparator : Char;
property TimeSeparator : Char read getTimeSeparator write setTimeSeparator;
procedure setListSeparator(const val : Char);
function getListSeparator : Char;
property ListSeparator : Char read getListSeparator write setListSeparator;
procedure setCurrencyString(const val : AnsiString);
function getCurrencyString : AnsiString;
property CurrencyString : AnsiString read getCurrencyString write setCurrencyString;
procedure setShortDateFormat(const val : AnsiString);
function getShortDateFormat : AnsiString;
property ShortDateFormat : AnsiString read getShortDateFormat write setShortDateFormat;
procedure setLongDateFormat(const val : AnsiString);
function getLongDateFormat : AnsiString;
property LongDateFormat : AnsiString read getLongDateFormat write setLongDateFormat;
procedure setTimeAMString(const val : AnsiString);
function getTimeAMString : AnsiString;
property TimeAMString : AnsiString read getTimeAMString write setTimeAMString;
procedure setTimePMString(const val : AnsiString);
function getTimePMString : AnsiString;
property TimePMString : AnsiString read getTimePMString write setTimePMString;
procedure setShortTimeFormat(const val : AnsiString);
function getShortTimeFormat : AnsiString;
property ShortTimeFormat : AnsiString read getShortTimeFormat write setShortTimeFormat;
procedure setLongTimeFormat(const val : AnsiString);
function getLongTimeFormat : AnsiString;
property LongTimeFormat : AnsiString read getLongTimeFormat write setLongTimeFormat;
procedure setTwoDigitYearCenturyWindow(const val : Word);
function getTwoDigitYearCenturyWindow : Word;
property TwoDigitYearCenturyWindow : Word read getTwoDigitYearCenturyWindow write setTwoDigitYearCenturyWindow;
end;

type
TArray = array of Byte;
TToken = (Undefined, Name, ArrayIndex, Eof, Error);


type
_T0 = function : IDispatch of object;

_T1 = function (const Value : Double): string of object;

_T2 = function (const DotValue : string): Double of object;

_T3 = function (const DotValue : string;
var Value : Double): Boolean of object;

_T4 = procedure (const ErrorMessage : string) of object;

_T5 = function : Boolean of object;

_T6 = procedure (const Descendent : TJSONAncestor) of object;

_T7 = procedure (const Own : Boolean) of object;

_T8 = procedure  of object;

_T9 = function : string of object;

_T10 = function : Integer of object;

_T11 = function (const Data : TArray;
const Offset : Integer): Integer of object;

_T12 = _T9;

_T13 = function : TJSONAncestor of object;

_T14 = _T5;

_T15 = _T8;

_T16 = function (Index : Integer): TJSONValue of object;

_T17 = procedure (const Element : TJSONValue) of object;

_T18 = function (const Element : string): TJSONArray of object;

_T19 = procedure (const AList : TList) of object;

_T20 = function : TJSONArrayEnumerator of object;

_T21 = _T10;

_T22 = function (const Index : Integer): TJSONValue of object;

_T23 = procedure (const AArray : TJSONArray) of object;

_T24 = function : TJSONValue of object;

_T25 = _T5;

_T26 = procedure (AValue : Boolean) of object;

_T27 = _T10;

_T28 = procedure (const Data : TArray;
const Offset : Integer;
const Range : Integer) of object;

_T29 = function : Byte of object;

_T30 = _T29;

_T31 = _T5;

_T32 = function (const Size : Integer): Boolean of object;

_T33 = _T8;

_T34 = _T8;

_T35 = function (const Value : Byte): Integer of object;

_T36 = function (const jsonStr:String): TJSONValue of object;

_T37 = _T8;

_T38 = function : TJSONPairEnumerator of object;

_T39 = function (const Name : string): TJSONValue of object;

_T40 = function (const Pair : TJSONPair): TJSONObject of object;

_T401 = function (name, value:String): TJSONObject of object;

_T402 = function (name:String; value:TJsonValue): TJSONObject of object;

_T403 = function (name:String; value:real): TJSONObject of object;

_T404 = function (name:String; value:TDateTime): TJSONObject of object;

_T405 = function (name:String; value:Integer): TJSONObject of object;

_T41 = function (const PairName : string): TJSONPair of object;

_T42 = function (const Data : TArray;
const Pos : Integer;
UseBool : Boolean): Integer of object;

_T43 = _T19;

_T44 = _T10;

_T45 = function (const Index : Integer): TJSONPair of object;

_T46 = function (const Data : TArray;
const Offset : Integer;
const ACount : Integer): TJSONValue of object;

_T47 = _T8;

_T48 = _T19;

_T49 = function : TJSONPair of object;

_T50 = _T5;

_T51 = procedure (const APath : string) of object;

_T52 = function : TToken of object;

_T53 = function (const Digit : TInt15): Byte of object;

_T54 = _T8;

_T55 = procedure (const Ch : WideChar) of object;

_T56 = _T8;

_T57 = function (ATypeInfo : PTypeInfo;
out AValue : TValue): Boolean of object;

_T58 = function (const APath : string): TJSONValue of object;

_T59 = function (out AValue : TObject): Boolean of object;

_T60 = function (const APath : string): TObject of object;

function __TFormatSettings__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TFormatSettings__Wrapper.setCurrencyFormat(const val : Byte);
begin
TFormatSettings(GetRecordPtr^).CurrencyFormat := val;
end;
function __TFormatSettings__Wrapper.getCurrencyFormat : Byte;
begin
result := TFormatSettings(GetRecordPtr^).CurrencyFormat;
end;
procedure __TFormatSettings__Wrapper.setNegCurrFormat(const val : Byte);
begin
TFormatSettings(GetRecordPtr^).NegCurrFormat := val;
end;
function __TFormatSettings__Wrapper.getNegCurrFormat : Byte;
begin
result := TFormatSettings(GetRecordPtr^).NegCurrFormat;
end;
procedure __TFormatSettings__Wrapper.setThousandSeparator(const val : Char);
begin
TFormatSettings(GetRecordPtr^).ThousandSeparator := val;
end;
function __TFormatSettings__Wrapper.getThousandSeparator : Char;
begin
result := TFormatSettings(GetRecordPtr^).ThousandSeparator;
end;
procedure __TFormatSettings__Wrapper.setDecimalSeparator(const val : Char);
begin
TFormatSettings(GetRecordPtr^).DecimalSeparator := val;
end;
function __TFormatSettings__Wrapper.getDecimalSeparator : Char;
begin
result := TFormatSettings(GetRecordPtr^).DecimalSeparator;
end;
procedure __TFormatSettings__Wrapper.setCurrencyDecimals(const val : Byte);
begin
TFormatSettings(GetRecordPtr^).CurrencyDecimals := val;
end;
function __TFormatSettings__Wrapper.getCurrencyDecimals : Byte;
begin
result := TFormatSettings(GetRecordPtr^).CurrencyDecimals;
end;
procedure __TFormatSettings__Wrapper.setDateSeparator(const val : Char);
begin
TFormatSettings(GetRecordPtr^).DateSeparator := val;
end;
function __TFormatSettings__Wrapper.getDateSeparator : Char;
begin
result := TFormatSettings(GetRecordPtr^).DateSeparator;
end;
procedure __TFormatSettings__Wrapper.setTimeSeparator(const val : Char);
begin
TFormatSettings(GetRecordPtr^).TimeSeparator := val;
end;
function __TFormatSettings__Wrapper.getTimeSeparator : Char;
begin
result := TFormatSettings(GetRecordPtr^).TimeSeparator;
end;
procedure __TFormatSettings__Wrapper.setListSeparator(const val : Char);
begin
TFormatSettings(GetRecordPtr^).ListSeparator := val;
end;
function __TFormatSettings__Wrapper.getListSeparator : Char;
begin
result := TFormatSettings(GetRecordPtr^).ListSeparator;
end;
procedure __TFormatSettings__Wrapper.setCurrencyString(const val : AnsiString);
begin
TFormatSettings(GetRecordPtr^).CurrencyString := val;
end;
function __TFormatSettings__Wrapper.getCurrencyString : AnsiString;
begin
result := TFormatSettings(GetRecordPtr^).CurrencyString;
end;
procedure __TFormatSettings__Wrapper.setShortDateFormat(const val : AnsiString);
begin
TFormatSettings(GetRecordPtr^).ShortDateFormat := val;
end;
function __TFormatSettings__Wrapper.getShortDateFormat : AnsiString;
begin
result := TFormatSettings(GetRecordPtr^).ShortDateFormat;
end;
procedure __TFormatSettings__Wrapper.setLongDateFormat(const val : AnsiString);
begin
TFormatSettings(GetRecordPtr^).LongDateFormat := val;
end;
function __TFormatSettings__Wrapper.getLongDateFormat : AnsiString;
begin
result := TFormatSettings(GetRecordPtr^).LongDateFormat;
end;
procedure __TFormatSettings__Wrapper.setTimeAMString(const val : AnsiString);
begin
TFormatSettings(GetRecordPtr^).TimeAMString := val;
end;
function __TFormatSettings__Wrapper.getTimeAMString : AnsiString;
begin
result := TFormatSettings(GetRecordPtr^).TimeAMString;
end;
procedure __TFormatSettings__Wrapper.setTimePMString(const val : AnsiString);
begin
TFormatSettings(GetRecordPtr^).TimePMString := val;
end;
function __TFormatSettings__Wrapper.getTimePMString : AnsiString;
begin
result := TFormatSettings(GetRecordPtr^).TimePMString;
end;
procedure __TFormatSettings__Wrapper.setShortTimeFormat(const val : AnsiString);
begin
TFormatSettings(GetRecordPtr^).ShortTimeFormat := val;
end;
function __TFormatSettings__Wrapper.getShortTimeFormat : AnsiString;
begin
result := TFormatSettings(GetRecordPtr^).ShortTimeFormat;
end;
procedure __TFormatSettings__Wrapper.setLongTimeFormat(const val : AnsiString);
begin
TFormatSettings(GetRecordPtr^).LongTimeFormat := val;
end;
function __TFormatSettings__Wrapper.getLongTimeFormat : AnsiString;
begin
result := TFormatSettings(GetRecordPtr^).LongTimeFormat;
end;
procedure __TFormatSettings__Wrapper.setTwoDigitYearCenturyWindow(const val : Word);
begin
TFormatSettings(GetRecordPtr^).TwoDigitYearCenturyWindow := val;
end;
function __TFormatSettings__Wrapper.getTwoDigitYearCenturyWindow : Word;
begin
result := TFormatSettings(GetRecordPtr^).TwoDigitYearCenturyWindow;
end;
function ____GetJSONFormat__Wrapper: IDispatch;
var
__result : TFormatSettings;
__wrapper : __TFormatSettings__Wrapper;
begin
__result := GetJSONFormat;
__wrapper := __TFormatSettings__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

function __TJsonObject__AddString(__Instance : TJSONObject; name, value:String):TJSONObject;
begin
  result:=__Instance.AddPair(name, value);
end;

function __TJsonObject__AddInteger(__Instance : TJSONObject; name:String; value:Integer):TJSONObject;
var n:TJSONNumber;
begin
  n:=TJSONNumber.Create(value);
  result:=__Instance.AddPair(name, n);
end;

function __TJsonObject__AddReal(__Instance : TJSONObject; name:String; value:real):TJSONObject;
var n:TJSONNumber;
begin
  n:=TJSONNumber.Create(value);
  result:=__Instance.AddPair(name, n);
end;

function __TJsonObject__AddDateTime(__Instance : TJSONObject; name:String; value:TDateTime):TJSONObject;
var n:TJSONNumber;
begin
  n:=TJSONNumber.Create(value);
  result:=__Instance.AddPair(name, n);
end;

function __TJsonObject__AddJsonValue(__Instance : TJSONObject; name:String; value:TJsonValue):TJSONObject;
begin
  result:=__Instance.AddPair(name, value);
end;

function __TJSONObject__ParseJSONValue__Wrapper(__Instance : TJSONObject;jsonStr:String): TJSONValue;
begin
  result:=__Instance.ParseJSONValue(jsonStr);
//  pp:=TArray<Byte>(p1);
//  result := TJSONObject(__Instance).ParseJSONValue( pp,p2);
end;

function __TJSONObject__Parse__Wrapper(__Instance : TJSONObject;
const p0 : TArray;
const p1 : Integer;
p2 : Boolean): Integer;
begin
//result := TJSONObject(__Instance).Parse(p0,p1,p2);
end;

function __TJSONValue__GetValue__Wrapper(__Instance : TJSONValue;
const p0 : string): TObject;
begin
  result := TJSONValue(__Instance).GetValue<TObject>(p0);
end;

type __TFormatSettings__Wrapper__ = class(__TFormatSettings__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TFormatSettings__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTFormatSettingsToVariant(var R : TFormatSettings) : OleVariant;
var
__rw : __TFormatSettings__Wrapper__;
begin
__rw := __TFormatSettings__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTFormatSettings(const V : OleVariant) : TFormatSettings;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TFormatSettings((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTJSONAncestor__Null(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TJSONAncestor(Instance).Null;
end;

procedure __DC__SetTJSONAncestor__Owned(Instance : TObject; Params : PVariantArgList);
begin
TJSONAncestor(Instance).Owned:=OleVariant(Params^[0]);
end;

function __DC__GetTJSONArray__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TJSONArray(Instance).Count;
end;

function __DC__GetTJSONArray__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TJSONArray(Instance).Items[OleVariant(Params^[0])]);
end;

function __DC__GetTJSONArrayEnumerator__Current(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TJSONArrayEnumerator(Instance).Current);
end;

function __DC__GetTJSONBool__AsBoolean(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TJSONBool(Instance).AsBoolean;
end;

function __DC__GetTJSONByteReader__Offset(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TJSONByteReader(Instance).Offset;
end;

function __DC__GetTJSONNumber__AsDouble(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TJSONNumber(Instance).AsDouble;
end;

function __DC__GetTJSONNumber__AsInt(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TJSONNumber(Instance).AsInt;
end;

function __DC__GetTJSONObject__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TJSONObject(Instance).Count;
end;

function __DC__GetTJSONObject__Pairs(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TJSONObject(Instance).Pairs[OleVariant(Params^[0])]);
end;

function __DC__GetTJSONObject__Values(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TJSONObject(Instance).Values[OleVariant(Params^[0])]);
end;

function __DC__GetTJSONPair__JsonString(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TJSONPair(Instance).JsonString);
end;

procedure __DC__SetTJSONPair__JsonString(Instance : TObject; Params : PVariantArgList);
begin
TJSONPair(Instance).JsonString:=TJSONString(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTJSONPair__JsonValue(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TJSONPair(Instance).JsonValue);
end;

procedure __DC__SetTJSONPair__JsonValue(Instance : TObject; Params : PVariantArgList);
begin
TJSONPair(Instance).JsonValue:=TJSONValue(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTJSONPairEnumerator__Current(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TJSONPairEnumerator(Instance).Current);
end;

function __DC__GetTJSONPathParser__IsEof(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TJSONPathParser(Instance).IsEof;
end;

function __DC__GetTJSONPathParser__Token(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := Integer(TJSONPathParser(Instance).Token);
end;

function __DC__GetTJSONPathParser__TokenName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TJSONPathParser(Instance).TokenName;
end;

function __DC__GetTJSONPathParser__TokenArrayIndex(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TJSONPathParser(Instance).TokenArrayIndex;
end;

procedure __RegisterProps;
begin
RegisterProperty(TJSONAncestor,'Null',__DC__GetTJSONAncestor__Null,nil);
RegisterProperty(TJSONAncestor,'Owned',nil,__DC__SetTJSONAncestor__Owned);
RegisterProperty(TJSONArray,'Count',__DC__GetTJSONArray__Count,nil);
RegisterIndexedProperty(TJSONArray,'Items',1,False,__DC__GetTJSONArray__Items,nil);
RegisterProperty(TJSONArrayEnumerator,'Current',__DC__GetTJSONArrayEnumerator__Current,nil);
RegisterProperty(TJSONBool,'AsBoolean',__DC__GetTJSONBool__AsBoolean,nil);
RegisterProperty(TJSONByteReader,'Offset',__DC__GetTJSONByteReader__Offset,nil);
RegisterProperty(TJSONNumber,'AsDouble',__DC__GetTJSONNumber__AsDouble,nil);
RegisterProperty(TJSONNumber,'AsInt',__DC__GetTJSONNumber__AsInt,nil);
RegisterProperty(TJSONObject,'Count',__DC__GetTJSONObject__Count,nil);
RegisterIndexedProperty(TJSONObject,'Pairs',1,False,__DC__GetTJSONObject__Pairs,nil);
RegisterIndexedProperty(TJSONObject,'Values',1,False,__DC__GetTJSONObject__Values,nil);
RegisterProperty(TJSONPair,'JsonString',__DC__GetTJSONPair__JsonString,__DC__SetTJSONPair__JsonString);
RegisterProperty(TJSONPair,'JsonValue',__DC__GetTJSONPair__JsonValue,__DC__SetTJSONPair__JsonValue);
RegisterProperty(TJSONPairEnumerator,'Current',__DC__GetTJSONPairEnumerator__Current,nil);
RegisterProperty(TJSONPathParser,'IsEof',__DC__GetTJSONPathParser__IsEof,nil);
RegisterProperty(TJSONPathParser,'Token',__DC__GetTJSONPathParser__Token,nil);
RegisterProperty(TJSONPathParser,'TokenName',__DC__GetTJSONPathParser__TokenName,nil);
RegisterProperty(TJSONPathParser,'TokenArrayIndex',__DC__GetTJSONPathParser__TokenArrayIndex,nil);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..16] of TClass = (
EJSONException,
EJSONPathException,
TJSONAncestor,
TJSONArray,
TJSONArrayEnumerator,
TJSONBool,
TJSONByteReader,
TJSONFalse,
TJSONNull,
TJSONNumber,
TJSONObject,
TJSONPair,
TJSONPairEnumerator,
TJSONPathParser,
TJSONString,
TJSONTrue,
TJSONValue
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..3] of string = (
'GetJSONFormat'
,'FloatToJson'
,'JsonToFloat'
,'TryJsonToFloat'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[TypeInfo(IDispatch)],Addr(____GetJSONFormat__Wrapper),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(Double),TypeInfo(string)],Addr(FloatToJson),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T2),[
TypeInfo(string),TypeInfo(Double)],Addr(JsonToFloat),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T3),[
TypeInfo(string),
TypeInfo(Double),TypeInfo(Boolean)],Addr(TryJsonToFloat),cRegister);

RegisterProc(EJSONException,'Create',mtConstructor,TypeInfo(_T4),[
TypeInfo(string)],Addr(EJSONException.Create),cRegister);

RegRegisterMethod(TJSONAncestor,'IsNull',TypeInfo(_T5),[TypeInfo(Boolean)], pointer(0));

RegRegisterMethod(TJSONAncestor,'AddDescendant',TypeInfo(_T6),[
TypeInfo(TJSONAncestor)], pointer(4));

RegRegisterMethod(TJSONAncestor,'SetOwned',TypeInfo(_T7),[
TypeInfo(Boolean)], pointer(8));

RegisterProc(TJSONAncestor,'Create',mtConstructor,TypeInfo(_T8),NoParams,Addr(TJSONAncestor.Create),cRegister);

RegRegisterMethod(TJSONAncestor,'Value',TypeInfo(_T9),[TypeInfo(string)], pointer(12));

RegRegisterMethod(TJSONAncestor,'EstimatedByteSize',TypeInfo(_T10),[TypeInfo(Integer)], pointer(16));

RegRegisterMethod(TJSONAncestor,'ToBytes',TypeInfo(_T11),[
TypeInfo(TArray),
TypeInfo(Integer),TypeInfo(Integer)], pointer(20));

RegRegisterMethod(TJSONAncestor,'ToJSON',TypeInfo(_T12),[TypeInfo(string)],Addr(TJSONAncestor.ToJSON));

RegRegisterMethod(TJSONAncestor,'Clone',TypeInfo(_T13),[TypeInfo(TJSONAncestor)], pointer(24));

RegRegisterMethod(TJSONAncestor,'GetOwned',TypeInfo(_T14),[TypeInfo(Boolean)], pointer(28));

RegisterProc(TJSONArray,'Create',mtConstructor,TypeInfo(_T15),NoParams,Addr(TJSONArray.Create),cRegister);

RegRegisterMethod(TJSONArray,'Remove',TypeInfo(_T16),[
TypeInfo(Integer),TypeInfo(TJSONValue)],Addr(TJSONArray.Remove));

RegRegisterMethod(TJSONArray,'AddElement',TypeInfo(_T17),[
TypeInfo(TJSONValue)],Addr(TJSONArray.AddElement));

RegRegisterMethod(TJSONArray,'Add',TypeInfo(_T18),[
TypeInfo(string),TypeInfo(TJSONArray)],Addr(TJSONArray.Add));

RegRegisterMethod(TJSONArray,'SetElements',TypeInfo(_T19),[
TypeInfo(TList)],Addr(TJSONArray.SetElements));

RegRegisterMethod(TJSONArray,'GetEnumerator',TypeInfo(_T20),[TypeInfo(TJSONArrayEnumerator)],Addr(TJSONArray.GetEnumerator));

RegRegisterMethod(TJSONArray,'Size',TypeInfo(_T21),[TypeInfo(Integer)],Addr(TJSONArray.Size));

RegRegisterMethod(TJSONArray,'Get',TypeInfo(_T22),[
TypeInfo(Integer),TypeInfo(TJSONValue)],Addr(TJSONArray.Get));

RegisterProc(TJSONArrayEnumerator,'Create',mtConstructor,TypeInfo(_T23),[
TypeInfo(TJSONArray)],Addr(TJSONArrayEnumerator.Create),cRegister);

RegRegisterMethod(TJSONArrayEnumerator,'GetCurrent',TypeInfo(_T24),[TypeInfo(TJSONValue)],Addr(TJSONArrayEnumerator.GetCurrent));

RegRegisterMethod(TJSONArrayEnumerator,'MoveNext',TypeInfo(_T25),[TypeInfo(Boolean)],Addr(TJSONArrayEnumerator.MoveNext));

RegisterProc(TJSONBool,'Create',mtConstructor,TypeInfo(_T26),[
TypeInfo(Boolean)],Addr(TJSONBool.Create),cRegister);

RegRegisterMethod(TJSONByteReader,'GetOffset',TypeInfo(_T27),[TypeInfo(Integer)], pointer(0));

RegisterProc(TJSONByteReader,'Create',mtConstructor,TypeInfo(_T28),[
TypeInfo(TArray),
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TJSONByteReader.Create),cRegister);

RegRegisterMethod(TJSONByteReader,'ConsumeByte',TypeInfo(_T29),[TypeInfo(Byte)], pointer(4));

RegRegisterMethod(TJSONByteReader,'PeekByte',TypeInfo(_T30),[TypeInfo(Byte)], pointer(8));

RegRegisterMethod(TJSONByteReader,'Empty',TypeInfo(_T31),[TypeInfo(Boolean)], pointer(12));

RegRegisterMethod(TJSONByteReader,'HasMore',TypeInfo(_T32),[
TypeInfo(Integer),TypeInfo(Boolean)], pointer(16));

RegisterProc(TJSONFalse,'Create',mtConstructor,TypeInfo(_T33),NoParams,Addr(TJSONFalse.Create),cRegister);

RegisterProc(TJSONNumber,'Create',mtConstructor,TypeInfo(_T34),NoParams,Addr(TJSONNumber.Create),cRegister);

RegisterProc(TJSONObject,'HexToDecimal',mtClassMethod,TypeInfo(_T35),[
TypeInfo(Byte),TypeInfo(Integer)],Addr(TJSONObject.HexToDecimal),cRegister);

RegisterProc(TJSONObject,'ParseJSONValue',mtClassMethod, TypeInfo(_T36),[
TypeInfo(String), TypeInfo(TJSONValue)],Addr(__TJSONObject__ParseJSONValue__Wrapper),cRegister);

RegisterProc(TJSONObject,'Create',mtConstructor,TypeInfo(_T37),NoParams,Addr(TJSONObject.Create),cRegister);

RegRegisterMethod(TJSONObject,'GetEnumerator',TypeInfo(_T38),[TypeInfo(TJSONPairEnumerator)],Addr(TJSONObject.GetEnumerator));

RegRegisterMethod(TJSONObject,'GetValue',TypeInfo(_T39),[
TypeInfo(string),TypeInfo(TJSONValue)],Addr(TJSONObject.GetValue));

RegRegisterMethod(TJSONObject,'AddPair',TypeInfo(_T40),[
TypeInfo(TJSONPair),TypeInfo(TJSONObject)],Addr(TJSONObject.AddPair));

RegRegisterMethod(TJSONObject,'AddString',TypeInfo(_T401),[
TypeInfo(String), TypeInfo(String), TypeInfo(TJSONObject)],Addr(__TJsonObject__AddString));

RegRegisterMethod(TJSONObject,'AddJsonValue',TypeInfo(_T402),[
TypeInfo(String), TypeInfo(TJsonValue), TypeInfo(TJSONObject)],Addr(__TJsonObject__AddJsonValue));

RegRegisterMethod(TJSONObject,'AddInteger',TypeInfo(_T405),[
TypeInfo(String), TypeInfo(Integer), TypeInfo(TJSONObject)],Addr(__TJsonObject__AddInteger));

RegRegisterMethod(TJSONObject,'AddFloat',TypeInfo(_T403),[
TypeInfo(String), TypeInfo(real), TypeInfo(TJSONObject)],Addr(__TJsonObject__AddReal));

RegRegisterMethod(TJSONObject,'AddDateTime',TypeInfo(_T404),[
TypeInfo(String), TypeInfo(TDateTime), TypeInfo(TJSONObject)],Addr(__TJsonObject__AddDateTime));

RegRegisterMethod(TJSONObject,'RemovePair',TypeInfo(_T41),[
TypeInfo(string),TypeInfo(TJSONPair)],Addr(TJSONObject.RemovePair));

RegRegisterMethod(TJSONObject,'Parse',TypeInfo(_T42),[
TypeInfo(TArray),
TypeInfo(Integer),
TypeInfo(Boolean),TypeInfo(Integer)],Addr(__TJSONObject__Parse__Wrapper));

RegRegisterMethod(TJSONObject,'SetPairs',TypeInfo(_T43),[
TypeInfo(TList)],Addr(TJSONObject.SetPairs));

RegRegisterMethod(TJSONObject,'Size',TypeInfo(_T44),[TypeInfo(Integer)],Addr(TJSONObject.Size));

RegRegisterMethod(TJSONObject,'Get',TypeInfo(_T45),[
TypeInfo(Integer),TypeInfo(TJSONPair)],Addr(TJSONObject.Get));

RegisterProc(TJSONObject,'ParseJSONValueUTF8',mtClassMethod,TypeInfo(_T46),[
TypeInfo(TArray),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(TJSONValue)],Addr(TJSONObject.ParseJSONValueUTF8),cRegister);

RegisterProc(TJSONPair,'Create',mtConstructor,TypeInfo(_T47),NoParams,Addr(TJSONPair.Create),cRegister);

RegisterProc(TJSONPairEnumerator,'Create',mtConstructor,TypeInfo(_T48),[
TypeInfo(TList)],Addr(TJSONPairEnumerator.Create),cRegister);

RegRegisterMethod(TJSONPairEnumerator,'GetCurrent',TypeInfo(_T49),[TypeInfo(TJSONPair)],Addr(TJSONPairEnumerator.GetCurrent));

RegRegisterMethod(TJSONPairEnumerator,'MoveNext',TypeInfo(_T50),[TypeInfo(Boolean)],Addr(TJSONPairEnumerator.MoveNext));

RegisterProc(TJSONPathParser,'Create',mtConstructor,TypeInfo(_T51),[
TypeInfo(string)],Addr(TJSONPathParser.Create),cRegister);

RegRegisterMethod(TJSONPathParser,'NextToken',TypeInfo(_T52),[TypeInfo(TToken)],Addr(TJSONPathParser.NextToken));

RegisterProc(TJSONString,'Hex',mtClassMethod,TypeInfo(_T53),[
TypeInfo(TInt15),TypeInfo(Byte)],Addr(TJSONString.Hex),cRegister);

RegisterProc(TJSONString,'Create',mtConstructor,TypeInfo(_T54),NoParams,Addr(TJSONString.Create),cRegister);

RegRegisterMethod(TJSONString,'AddChar',TypeInfo(_T55),[
TypeInfo(WideChar)], pointer(8));

RegisterProc(TJSONTrue,'Create',mtConstructor,TypeInfo(_T56),NoParams,Addr(TJSONTrue.Create),cRegister);

RegRegisterMethod(TJSONValue,'AsTValue',TypeInfo(_T57),[
TypeInfo(PTypeInfo),
TypeInfo(TValue),TypeInfo(Boolean)], pointer(0));

RegRegisterMethod(TJSONValue,'FindValue',TypeInfo(_T58),[
TypeInfo(string),TypeInfo(TJSONValue)], pointer(4));

RegRegisterMethod(TJSONValue,'TryGetValue',TypeInfo(_T59),[
TypeInfo(TObject),TypeInfo(Boolean)],Addr(TJSONValue.TryGetValue));

RegRegisterMethod(TJSONValue,'GetValue',TypeInfo(_T60),[
TypeInfo(string),TypeInfo(TObject)],Addr(__TJSONValue__GetValue__Wrapper));

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
