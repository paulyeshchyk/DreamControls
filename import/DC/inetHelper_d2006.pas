{*******************************************************}
{                                                       }
{ Import unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

Unit inetHelper_d2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  sysUtils,
  classes,
  IdBaseComponent,
  IdCoder,
  IdCoder3to4,
  IdCoderMIME,
  IdComponent,
  IdTCPConnection,
  IdTCPClient,
  IdHTTP,
  IdIOHandler,
  IdIOHandlerSocket,
  IdIOHandlerStack,
  IdSSL,
  IdSSLOpenSSL,
  idGlobal,
  inetHelper;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = function (str : String): String of object;

_T1 = _T0;

_T2 = _T0;

_T3 = _T0;

_T4 = _T0;

_T5 = procedure  of object;

_T6 = function (name : String): String of object;

_T7 = procedure (name : String;
Value : String) of object;

_T8 = procedure (userName : String;
pwd : String) of object;

_T9 = procedure (name : String) of object;

_T10 = _T5;

_T11 = _T5;

_T12 = function : TRequest of object;

_T13 = function : TResponse of object;

_T14 = function (url : String): String of object;

_T15 = procedure (url : String;
stream : TStream) of object;

_T16 = function (url : String;
stream : TStream): String of object;

_T17 = _T16;

_T18 = _T14;

_T19 = _T5;

_T20 = _T5;

_T21 = function : TInetHeader of object;

_T22 = function : Integer of object;

_T23 = function : String of object;

function __DC__GetTInetHeader__size(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TInetHeader(Instance).size;
end;

function __DC__GetTInetHeader__name(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TInetHeader(Instance).name[OleVariant(Params^[0])];
end;

function __DC__GetTRequest__headers(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TRequest(Instance).headers);
end;

function __DC__GetTRequest__ContentType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TRequest(Instance).ContentType;
end;

procedure __DC__SetTRequest__ContentType(Instance : TObject; Params : PVariantArgList);
begin
TRequest(Instance).ContentType:=OleVariant(Params^[0]);
end;

function __DC__GetTRequest__host(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TRequest(Instance).host;
end;

procedure __DC__SetTRequest__host(Instance : TObject; Params : PVariantArgList);
begin
TRequest(Instance).host:=OleVariant(Params^[0]);
end;

function __DC__GetTRequest__url(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TRequest(Instance).url;
end;

procedure __DC__SetTRequest__url(Instance : TObject; Params : PVariantArgList);
begin
TRequest(Instance).url:=OleVariant(Params^[0]);
end;

function __DC__GetTResponse__ContentStream(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TResponse(Instance).ContentStream);
end;

procedure __RegisterProps;
begin
RegisterProperty(TInetHeader,'size',__DC__GetTInetHeader__size,nil);
RegisterIndexedProperty(TInetHeader,'name',1,False,__DC__GetTInetHeader__name,nil);
RegisterProperty(TRequest,'headers',__DC__GetTRequest__headers,nil);
RegisterProperty(TRequest,'ContentType',__DC__GetTRequest__ContentType,__DC__SetTRequest__ContentType);
RegisterProperty(TRequest,'host',__DC__GetTRequest__host,__DC__SetTRequest__host);
RegisterProperty(TRequest,'url',__DC__GetTRequest__url,__DC__SetTRequest__url);
RegisterProperty(TResponse,'ContentStream',__DC__GetTResponse__ContentStream,nil);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..3] of TClass = (
TInetHeader,
TInetHelper,
TRequest,
TResponse
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..4] of string = (
'encodeStringToBase64'
,'decodeStringFromBase64'
,'encodeStringToUtf8'
,'decodeStringFromUtf8'
,'decodeAnsiStringFromUtf8'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(String),TypeInfo(String)],Addr(encodeStringToBase64),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(String),TypeInfo(String)],Addr(decodeStringFromBase64),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T2),[
TypeInfo(String),TypeInfo(String)],Addr(encodeStringToUtf8),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T3),[
TypeInfo(String),TypeInfo(String)],Addr(decodeStringFromUtf8),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T4),[
TypeInfo(String),TypeInfo(String)],Addr(decodeAnsiStringFromUtf8),cRegister);

RegisterProc(TInetHeader,'create',mtConstructor,TypeInfo(_T5),NoParams,Addr(TInetHeader.create),cRegister);

RegRegisterMethod(TInetHeader,'Value',TypeInfo(_T6),[
TypeInfo(String),TypeInfo(String)],Addr(TInetHeader.Value));

RegRegisterMethod(TInetHeader,'addHeader',TypeInfo(_T7),[
TypeInfo(String),
TypeInfo(String)],Addr(TInetHeader.addHeader));

RegRegisterMethod(TInetHeader,'addBasicAuth',TypeInfo(_T8),[
TypeInfo(String),
TypeInfo(String)],Addr(TInetHeader.addBasicAuth));

RegRegisterMethod(TInetHeader,'removeHeader',TypeInfo(_T9),[
TypeInfo(String)],Addr(TInetHeader.removeHeader));

RegRegisterMethod(TInetHeader,'clear',TypeInfo(_T10),NoParams,Addr(TInetHeader.clear));

RegisterProc(TInetHelper,'create',mtConstructor,TypeInfo(_T11),NoParams,Addr(TInetHelper.create),cRegister);

RegRegisterMethod(TInetHelper,'request',TypeInfo(_T12),[TypeInfo(TRequest)],Addr(TInetHelper.request));

RegRegisterMethod(TInetHelper,'response',TypeInfo(_T13),[TypeInfo(TResponse)],Addr(TInetHelper.response));

RegRegisterMethod(TInetHelper,'doGet',TypeInfo(_T14),[
TypeInfo(String),TypeInfo(String)],Addr(TInetHelper.doGet));

RegRegisterMethod(TInetHelper,'doGetStream',TypeInfo(_T15),[
TypeInfo(String),
TypeInfo(TStream)],Addr(TInetHelper.doGetStream));

RegRegisterMethod(TInetHelper,'doPost',TypeInfo(_T16),[
TypeInfo(String),
TypeInfo(TStream),TypeInfo(String)],Addr(TInetHelper.doPost));

RegRegisterMethod(TInetHelper,'doPut',TypeInfo(_T17),[
TypeInfo(String),
TypeInfo(TStream),TypeInfo(String)],Addr(TInetHelper.doPut));

RegRegisterMethod(TInetHelper,'doDelete',TypeInfo(_T18),[
TypeInfo(String),TypeInfo(String)],Addr(TInetHelper.doDelete));

RegisterProc(TRequest,'create',mtConstructor,TypeInfo(_T19),NoParams,Addr(TRequest.create),cRegister);

RegisterProc(TResponse,'create',mtConstructor,TypeInfo(_T20),NoParams,Addr(TResponse.create),cRegister);

RegRegisterMethod(TResponse,'headers',TypeInfo(_T21),[TypeInfo(TInetHeader)],Addr(TResponse.headers));

RegRegisterMethod(TResponse,'responseCode',TypeInfo(_T22),[TypeInfo(Integer)],Addr(TResponse.responseCode));

RegRegisterMethod(TResponse,'responseStr',TypeInfo(_T23),[TypeInfo(String)],Addr(TResponse.responseStr));

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
