{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDAUTHENTICATION_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdHeaderList,
  IdGlobal,
  IdException,
  IdAuthentication;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
{_T0 = procedure (p0 : String;
p1 : TIdAuthenticationClass) of object;}

{_T1 = function (p0 : String): TIdAuthenticationClass of object;}

_T2 = function : TIdAuthWhatsNext of object;

_T3 = function : Integer of object;

_T4 = procedure (const p0 : String) of object;

_T5 = _T4;

_T6 = procedure  of object;

_T7 = _T6;

_T8 = function : String of object;

_T9 = function : Boolean of object;

_T10 = _T2;

function __DC__GetTIdAuthentication__AuthRetries(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdAuthentication(Instance).AuthRetries;
end;

function __DC__GetTIdAuthentication__AuthParams(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdAuthentication(Instance).AuthParams);
end;

procedure __DC__SetTIdAuthentication__AuthParams(Instance : TObject; Params : PVariantArgList);
begin
TIdAuthentication(Instance).AuthParams:=TIdHeaderList(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIdAuthentication__Params(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdAuthentication(Instance).Params);
end;

function __DC__GetTIdAuthentication__Username(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdAuthentication(Instance).Username;
end;

procedure __DC__SetTIdAuthentication__Username(Instance : TObject; Params : PVariantArgList);
begin
TIdAuthentication(Instance).Username:=OleVariant(Params^[0]);
end;

function __DC__GetTIdAuthentication__Password(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdAuthentication(Instance).Password;
end;

procedure __DC__SetTIdAuthentication__Password(Instance : TObject; Params : PVariantArgList);
begin
TIdAuthentication(Instance).Password:=OleVariant(Params^[0]);
end;

function __DC__GetTIdAuthentication__Steps(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdAuthentication(Instance).Steps;
end;

function __DC__GetTIdAuthentication__CurrentStep(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdAuthentication(Instance).CurrentStep;
end;

function __DC__GetTIdBasicAuthentication__Realm(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdBasicAuthentication(Instance).Realm;
end;

procedure __DC__SetTIdBasicAuthentication__Realm(Instance : TObject; Params : PVariantArgList);
begin
TIdBasicAuthentication(Instance).Realm:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TIdAuthentication,'AuthRetries',__DC__GetTIdAuthentication__AuthRetries,nil);
RegisterProperty(TIdAuthentication,'AuthParams',__DC__GetTIdAuthentication__AuthParams,__DC__SetTIdAuthentication__AuthParams);
RegisterProperty(TIdAuthentication,'Params',__DC__GetTIdAuthentication__Params,nil);
RegisterProperty(TIdAuthentication,'Username',__DC__GetTIdAuthentication__Username,__DC__SetTIdAuthentication__Username);
RegisterProperty(TIdAuthentication,'Password',__DC__GetTIdAuthentication__Password,__DC__SetTIdAuthentication__Password);
RegisterProperty(TIdAuthentication,'Steps',__DC__GetTIdAuthentication__Steps,nil);
RegisterProperty(TIdAuthentication,'CurrentStep',__DC__GetTIdAuthentication__CurrentStep,nil);
RegisterProperty(TIdBasicAuthentication,'Realm',__DC__GetTIdBasicAuthentication__Realm,__DC__SetTIdBasicAuthentication__Realm);
end;

const __ConstNames0 : array[0..6] of string = (
'asBasic'
,'asDigest'
,'asNTLM'
,'asUnknown'
,'wnAskTheProgram'
,'wnDoRequest'
,'wnFail'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,asBasic));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,asDigest));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,asNTLM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,asUnknown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,wnAskTheProgram));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,wnDoRequest));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,wnFail));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..2] of TClass = (
EIdAlreadyRegisteredAuthenticationMethod,
TIdAuthentication,
TIdBasicAuthentication
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TIdAuthentication,'DoNext',TypeInfo(_T2),[TypeInfo(TIdAuthWhatsNext)], pointer(12));
RegRegisterMethod(TIdAuthentication,'DoNext',TypeInfo(_T2),[TypeInfo(TIdAuthWhatsNext)],  getVMTProcAddr('TIdAuthentication','DoNext',12));


//RegRegisterMethod(TIdAuthentication,'GetSteps',TypeInfo(_T3),[TypeInfo(Integer)], pointer(16));
RegRegisterMethod(TIdAuthentication,'GetSteps',TypeInfo(_T3),[TypeInfo(Integer)],  getVMTProcAddr('TIdAuthentication','GetSteps',16));


//RegRegisterMethod(TIdAuthentication,'SetPassword',TypeInfo(_T4),[TypeInfo(String)], pointer(20));
RegRegisterMethod(TIdAuthentication,'SetPassword',TypeInfo(_T4),[TypeInfo(String)],  getVMTProcAddr('TIdAuthentication','SetPassword',20));


//RegRegisterMethod(TIdAuthentication,'SetUserName',TypeInfo(_T5),[TypeInfo(String)], pointer(24));
RegRegisterMethod(TIdAuthentication,'SetUserName',TypeInfo(_T5),[TypeInfo(String)],  getVMTProcAddr('TIdAuthentication','SetUserName',24));


RegisterProc(TIdAuthentication,'Create',mtConstructor,TypeInfo(_T6),NoParams, pointer(28),cRegister);

//RegRegisterMethod(TIdAuthentication,'Reset',TypeInfo(_T7),NoParams, pointer(32));
RegRegisterMethod(TIdAuthentication,'Reset',TypeInfo(_T7),NoParams,  getVMTProcAddr('TIdAuthentication','Reset',32));


//RegRegisterMethod(TIdAuthentication,'Authentication',TypeInfo(_T8),[TypeInfo(String)], pointer(36));
RegRegisterMethod(TIdAuthentication,'Authentication',TypeInfo(_T8),[TypeInfo(String)],  getVMTProcAddr('TIdAuthentication','Authentication',36));


//RegRegisterMethod(TIdAuthentication,'KeepAlive',TypeInfo(_T9),[TypeInfo(Boolean)], pointer(40));
RegRegisterMethod(TIdAuthentication,'KeepAlive',TypeInfo(_T9),[TypeInfo(Boolean)],  getVMTProcAddr('TIdAuthentication','KeepAlive',40));


RegRegisterMethod(TIdAuthentication,'Next',TypeInfo(_T10),[TypeInfo(TIdAuthWhatsNext)],Addr(TIdAuthentication.Next));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
{RegisterProc(nil,'RegisterAuthenticationMethod',mtProc,TypeInfo(_T0),[
TypeInfo(String),
TypeInfo(TIdAuthenticationClass)],Addr(RegisterAuthenticationMethod),cRegister)}

{RegisterProc(nil,'FindAuthClass',mtProc,TypeInfo(_T1),[
TypeInfo(String),TypeInfo(TIdAuthenticationClass)],Addr(FindAuthClass),cRegister)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
