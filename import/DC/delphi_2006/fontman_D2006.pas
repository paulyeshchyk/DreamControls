{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit fontman_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  FontMan;
function ConvertTFontInfoToVariant(var R : TFontInfo) : OleVariant;
function ConvertVariantToTFontInfo(const V : OleVariant) : TFontInfo;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TFontInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TFontInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setOverHang(const val : Integer);
function getOverHang : Integer;
property OverHang : Integer read getOverHang write setOverHang;
procedure setAscent(const val : Integer);
function getAscent : Integer;
property Ascent : Integer read getAscent write setAscent;
procedure setDescent(const val : Integer);
function getDescent : Integer;
property Descent : Integer read getDescent write setDescent;
procedure setAveCharWidth(const val : Integer);
function getAveCharWidth : Integer;
property AveCharWidth : Integer read getAveCharWidth write setAveCharWidth;
procedure setFontHeight(const val : Integer);
function getFontHeight : Integer;
property FontHeight : Integer read getFontHeight write setFontHeight;
end;
function __TFontInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TFontInfo__Wrapper.setOverHang(const val : Integer);
begin
TFontInfo(GetRecordPtr^).OverHang := val;
end;
function __TFontInfo__Wrapper.getOverHang : Integer;
begin
result := TFontInfo(GetRecordPtr^).OverHang;
end;
procedure __TFontInfo__Wrapper.setAscent(const val : Integer);
begin
TFontInfo(GetRecordPtr^).Ascent := val;
end;
function __TFontInfo__Wrapper.getAscent : Integer;
begin
result := TFontInfo(GetRecordPtr^).Ascent;
end;
procedure __TFontInfo__Wrapper.setDescent(const val : Integer);
begin
TFontInfo(GetRecordPtr^).Descent := val;
end;
function __TFontInfo__Wrapper.getDescent : Integer;
begin
result := TFontInfo(GetRecordPtr^).Descent;
end;
procedure __TFontInfo__Wrapper.setAveCharWidth(const val : Integer);
begin
TFontInfo(GetRecordPtr^).AveCharWidth := val;
end;
function __TFontInfo__Wrapper.getAveCharWidth : Integer;
begin
result := TFontInfo(GetRecordPtr^).AveCharWidth;
end;
procedure __TFontInfo__Wrapper.setFontHeight(const val : Integer);
begin
TFontInfo(GetRecordPtr^).FontHeight := val;
end;
function __TFontInfo__Wrapper.getFontHeight : Integer;
begin
result := TFontInfo(GetRecordPtr^).FontHeight;
end;
function _TFontInfo_ : IDispatch;
begin
  result := __TFontInfo__Wrapper.Create;
end;

type __TFontInfo__Wrapper__ = class(__TFontInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TFontInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTFontInfoToVariant(var R : TFontInfo) : OleVariant;
var
__rw : __TFontInfo__Wrapper__;
begin
__rw := __TFontInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTFontInfo(const V : OleVariant) : TFontInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TFontInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'TFontInfo'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TFontInfo_)));
end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'GetWidth',mtProc,TypeInfo(_T0),[
TypeInfo(_HFONT),
TypeInfoPChar,
TypeInfo(Integer),TypeInfo(Integer)],Addr(GetWidth),cRegister)}

{RegisterProc(nil,'GetWidthAndInfo',mtProc,TypeInfo(_T1),[
TypeInfo(_HFONT),
TypeInfoPChar,
TypeInfo(Integer),
TypeInfoPointer,
TypeInfoPointer,TypeInfo(Integer)],Addr(GetWidthAndInfo),cRegister)}

{RegisterProc(nil,'GetWidths',mtProc,TypeInfo(_T2),[
TypeInfo(_HFONT),
TypeInfoPChar,
TypeInfo(Integer),
TypeInfoPointer,TypeInfo(Integer)],Addr(GetWidths),cRegister)}

{RegisterProc(nil,'GetCharsInWidth',mtProc,TypeInfo(_T3),[
TypeInfo(_HFONT),
TypeInfoPChar,
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Boolean),
TypeInfo(Boolean),
TypeInfo(Integer),TypeInfo(Integer)],Addr(GetCharsInWidth),cRegister)}

{RegisterProc(nil,'GetFontInfo',mtProc,TypeInfo(_T4),[
TypeInfo(_HFONT),TypeInfoPointer],Addr(GetFontInfo),cRegister)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
