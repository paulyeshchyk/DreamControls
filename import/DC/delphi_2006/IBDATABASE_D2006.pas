{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IBDATABASE_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Classes,
  Windows,
  Messages,
  IBHeader,
  IBExternals,
  DB,
  IB,
  IBUtils,
  IBIntf,
  IBDatabase;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (p0 : TStrings;
var p1 : string;
var p2 : Short) of object;

_T1 = _T0;

_T2 = procedure  of object;

_T3 = _T2;

_T4 = _T2;

_T5 = _T2;

_T6 = _T2;

_T7 = _T2;

_T8 = function : PISC_DB_HANDLE of object;

_T9 = function : PISC_TR_HANDLE of object;

_T10 = procedure (p0 : TIBDatabase) of object;

_T11 = procedure (p0 : TIBTransaction) of object;

_T12 = procedure (p0 : TObject) of object;

_T13 = _T2;

_T14 = _T2;

{_T15 = procedure (p0 : IIBEventNotifier) of object;}

{_T16 = procedure (p0 : IIBEventNotifier) of object;}

_T17 = procedure (const p0 : Array of TDataSet) of object;

_T18 = _T2;

_T19 = _T2;

_T20 = _T2;

_T21 = _T2;

_T22 = _T2;

_T23 = _T2;

_T24 = procedure (const p0 : string;
p1 : TStrings) of object;

_T25 = procedure (p0 : TStrings;
p1 : Boolean) of object;

_T26 = function (p0 : string): Integer of object;

_T27 = function : Boolean of object;

_T28 = _T2;

_T29 = function (p0 : ISC_STATUS;
p1 : Boolean): ISC_STATUS of object;

_T30 = function (p0 : TIBTransaction): Integer of object;

_T31 = _T30;

_T32 = function : TIBTransaction of object;

_T33 = procedure (p0 : Integer) of object;

_T34 = _T2;

_T35 = procedure (p0 : TISC_DB_HANDLE) of object;

_T36 = function (p0 : string;
p1 : string): Boolean of object;

_T37 = _T36;

_T38 = _T36;

_T39 = _T2;

_T40 = _T2;

_T41 = _T36;

_T42 = _T36;

_T43 = _T36;

_T44 = _T29;

_T45 = _T2;

_T46 = _T2;

_T47 = _T2;

_T48 = _T2;

_T49 = _T2;

_T50 = _T2;

_T51 = procedure (p0 : string) of object;

_T52 = _T51;

_T53 = _T51;

_T54 = _T2;

_T55 = _T2;

_T56 = _T2;

_T57 = function (p0 : TIBDatabase): Integer of object;

_T58 = _T57;

_T59 = function : TIBDatabase of object;

_T60 = _T33;

_T61 = _T2;

_T62 = _T2;

procedure __TIBDatabase__GetTableNames__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
TIBDatabase(__Instance).GetTableNames(TStrings(VarToObject(OleVariant(pargs^[0]))));
end;
2:
begin
TIBDatabase(__Instance).GetTableNames(TStrings(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
end;
end
end;

function __DC__GetTIBBase__Database(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBBase(Instance).Database);
end;

procedure __DC__SetTIBBase__Database(Instance : TObject; Params : PVariantArgList);
begin
TIBBase(Instance).Database:=TIBDatabase(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIBBase__DBHandle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TIBBase(Instance).DBHandle);
end;

function __DC__GetTIBBase__Owner(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBBase(Instance).Owner);
end;

function __DC__GetTIBBase__TRHandle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TIBBase(Instance).TRHandle);
end;

function __DC__GetTIBBase__Transaction(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBBase(Instance).Transaction);
end;

procedure __DC__SetTIBBase__Transaction(Instance : TObject; Params : PVariantArgList);
begin
TIBBase(Instance).Transaction:=TIBTransaction(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIBDatabase__Handle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TIBDatabase(Instance).Handle);
end;

function __DC__GetTIBDatabase__IsReadOnly(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBDatabase(Instance).IsReadOnly;
end;

function __DC__GetTIBDatabase__DBParamByDPB(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBDatabase(Instance).DBParamByDPB[OleVariant(Params^[0])];
end;

procedure __DC__SetTIBDatabase__DBParamByDPB(Instance : TObject; Params : PVariantArgList);
begin
TIBDatabase(Instance).DBParamByDPB[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTIBDatabase__SQLObjectCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBDatabase(Instance).SQLObjectCount;
end;

function __DC__GetTIBDatabase__SQLObjects(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBDatabase(Instance).SQLObjects[OleVariant(Params^[0])]);
end;

function __DC__GetTIBDatabase__HandleIsShared(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBDatabase(Instance).HandleIsShared;
end;

function __DC__GetTIBDatabase__TransactionCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBDatabase(Instance).TransactionCount;
end;

function __DC__GetTIBDatabase__Transactions(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBDatabase(Instance).Transactions[OleVariant(Params^[0])]);
end;

function __DC__GetTIBDatabase__InternalTransaction(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBDatabase(Instance).InternalTransaction);
end;

function __DC__GetTIBTransaction__DatabaseCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBTransaction(Instance).DatabaseCount;
end;

function __DC__GetTIBTransaction__Databases(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBTransaction(Instance).Databases[OleVariant(Params^[0])]);
end;

function __DC__GetTIBTransaction__SQLObjectCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBTransaction(Instance).SQLObjectCount;
end;

function __DC__GetTIBTransaction__SQLObjects(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBTransaction(Instance).SQLObjects[OleVariant(Params^[0])]);
end;

function __DC__GetTIBTransaction__Handle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TIBTransaction(Instance).Handle);
end;

function __DC__GetTIBTransaction__HandleIsShared(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBTransaction(Instance).HandleIsShared;
end;

function __DC__GetTIBTransaction__InTransaction(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBTransaction(Instance).InTransaction;
end;

function __DC__GetTIBTransaction__TPB(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := String(TIBTransaction(Instance).TPB);
end;

function __DC__GetTIBTransaction__TPBLength(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBTransaction(Instance).TPBLength;
end;

function __DC__GetTIBTransaction__TransactionID(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBTransaction(Instance).TransactionID;
end;

procedure __RegisterProps;
begin
RegisterProperty(TIBBase,'Database',__DC__GetTIBBase__Database,__DC__SetTIBBase__Database);
RegisterProperty(TIBBase,'DBHandle',__DC__GetTIBBase__DBHandle,nil);
RegisterProperty(TIBBase,'Owner',__DC__GetTIBBase__Owner,nil);
RegisterProperty(TIBBase,'TRHandle',__DC__GetTIBBase__TRHandle,nil);
RegisterProperty(TIBBase,'Transaction',__DC__GetTIBBase__Transaction,__DC__SetTIBBase__Transaction);
RegisterProperty(TIBDatabase,'Handle',__DC__GetTIBDatabase__Handle,nil);
RegisterProperty(TIBDatabase,'IsReadOnly',__DC__GetTIBDatabase__IsReadOnly,nil);
RegisterIndexedProperty(TIBDatabase,'DBParamByDPB',1,False,__DC__GetTIBDatabase__DBParamByDPB,__DC__SetTIBDatabase__DBParamByDPB);
RegisterProperty(TIBDatabase,'SQLObjectCount',__DC__GetTIBDatabase__SQLObjectCount,nil);
RegisterIndexedProperty(TIBDatabase,'SQLObjects',1,False,__DC__GetTIBDatabase__SQLObjects,nil);
RegisterProperty(TIBDatabase,'HandleIsShared',__DC__GetTIBDatabase__HandleIsShared,nil);
RegisterProperty(TIBDatabase,'TransactionCount',__DC__GetTIBDatabase__TransactionCount,nil);
RegisterIndexedProperty(TIBDatabase,'Transactions',1,False,__DC__GetTIBDatabase__Transactions,nil);
RegisterProperty(TIBDatabase,'InternalTransaction',__DC__GetTIBDatabase__InternalTransaction,nil);
RegisterProperty(TIBTransaction,'DatabaseCount',__DC__GetTIBTransaction__DatabaseCount,nil);
RegisterIndexedProperty(TIBTransaction,'Databases',1,False,__DC__GetTIBTransaction__Databases,nil);
RegisterProperty(TIBTransaction,'SQLObjectCount',__DC__GetTIBTransaction__SQLObjectCount,nil);
RegisterIndexedProperty(TIBTransaction,'SQLObjects',1,False,__DC__GetTIBTransaction__SQLObjects,nil);
RegisterProperty(TIBTransaction,'Handle',__DC__GetTIBTransaction__Handle,nil);
RegisterProperty(TIBTransaction,'HandleIsShared',__DC__GetTIBTransaction__HandleIsShared,nil);
RegisterProperty(TIBTransaction,'InTransaction',__DC__GetTIBTransaction__InTransaction,nil);
RegisterProperty(TIBTransaction,'TPB',__DC__GetTIBTransaction__TPB,nil);
RegisterProperty(TIBTransaction,'TPBLength',__DC__GetTIBTransaction__TPBLength,nil);
RegisterProperty(TIBTransaction,'TransactionID',__DC__GetTIBTransaction__TransactionID,nil);
end;

const __ConstNames0 : array[0..10] of string = (
'DPBPrefix'
,'TPBPrefix'
,'TARollback'
,'TACommit'
,'TARollbackRetaining'
,'TACommitRetaining'
,'saNone'
,'saRollback'
,'saCommit'
,'saRollbackRetaining'
,'saCommitRetaining'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,DPBPrefix));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,TPBPrefix));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,TARollback));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,TACommit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,TARollbackRetaining));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,TACommitRetaining));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,saNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,saRollback));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,saCommit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,saRollbackRetaining));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,saCommitRetaining));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..3] of TClass = (
TIBBase,
TIBDatabase,
TIBSchema,
TIBTransaction
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..1] of string = (
'GenerateDPB'
,'GenerateTPB'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(TStrings),
TypeInfo(string),
TypeInfo(Short)],Addr(GenerateDPB),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(TStrings),
TypeInfo(string),
TypeInfo(Short)],Addr(GenerateTPB),cRegister);

//RegRegisterMethod(TIBBase,'DoBeforeDatabaseDisconnect',TypeInfo(_T2),NoParams, pointer(0));
RegRegisterMethod(TIBBase,'DoBeforeDatabaseDisconnect',TypeInfo(_T2),NoParams,  getVMTProcAddr('TIBBase','DoBeforeDatabaseDisconnect',0));


//RegRegisterMethod(TIBBase,'DoAfterDatabaseDisconnect',TypeInfo(_T3),NoParams, pointer(4));
RegRegisterMethod(TIBBase,'DoAfterDatabaseDisconnect',TypeInfo(_T3),NoParams,  getVMTProcAddr('TIBBase','DoAfterDatabaseDisconnect',4));


//RegRegisterMethod(TIBBase,'DoDatabaseFree',TypeInfo(_T4),NoParams, pointer(8));
RegRegisterMethod(TIBBase,'DoDatabaseFree',TypeInfo(_T4),NoParams,  getVMTProcAddr('TIBBase','DoDatabaseFree',8));


//RegRegisterMethod(TIBBase,'DoBeforeTransactionEnd',TypeInfo(_T5),NoParams, pointer(12));
RegRegisterMethod(TIBBase,'DoBeforeTransactionEnd',TypeInfo(_T5),NoParams,  getVMTProcAddr('TIBBase','DoBeforeTransactionEnd',12));


//RegRegisterMethod(TIBBase,'DoAfterTransactionEnd',TypeInfo(_T6),NoParams, pointer(16));
RegRegisterMethod(TIBBase,'DoAfterTransactionEnd',TypeInfo(_T6),NoParams,  getVMTProcAddr('TIBBase','DoAfterTransactionEnd',16));


//RegRegisterMethod(TIBBase,'DoTransactionFree',TypeInfo(_T7),NoParams, pointer(20));
RegRegisterMethod(TIBBase,'DoTransactionFree',TypeInfo(_T7),NoParams,  getVMTProcAddr('TIBBase','DoTransactionFree',20));


//RegRegisterMethod(TIBBase,'GetDBHandle',TypeInfo(_T8),[TypeInfoPointer], pointer(24));
RegRegisterMethod(TIBBase,'GetDBHandle',TypeInfo(_T8),[TypeInfoPointer],  getVMTProcAddr('TIBBase','GetDBHandle',24));


//RegRegisterMethod(TIBBase,'GetTRHandle',TypeInfo(_T9),[TypeInfoPointer], pointer(28));
RegRegisterMethod(TIBBase,'GetTRHandle',TypeInfo(_T9),[TypeInfoPointer],  getVMTProcAddr('TIBBase','GetTRHandle',28));


//RegRegisterMethod(TIBBase,'SetDatabase',TypeInfo(_T10),[TypeInfo(TIBDatabase)], pointer(32));
RegRegisterMethod(TIBBase,'SetDatabase',TypeInfo(_T10),[TypeInfo(TIBDatabase)],  getVMTProcAddr('TIBBase','SetDatabase',32));


//RegRegisterMethod(TIBBase,'SetTransaction',TypeInfo(_T11),[TypeInfo(TIBTransaction)], pointer(36));
RegRegisterMethod(TIBBase,'SetTransaction',TypeInfo(_T11),[TypeInfo(TIBTransaction)],  getVMTProcAddr('TIBBase','SetTransaction',36));


RegisterProc(TIBBase,'Create',mtConstructor,TypeInfo(_T12),[
TypeInfo(TObject)],Addr(TIBBase.Create),cRegister);

//RegRegisterMethod(TIBBase,'CheckDatabase',TypeInfo(_T13),NoParams, pointer(40));
RegRegisterMethod(TIBBase,'CheckDatabase',TypeInfo(_T13),NoParams,  getVMTProcAddr('TIBBase','CheckDatabase',40));


//RegRegisterMethod(TIBBase,'CheckTransaction',TypeInfo(_T14),NoParams, pointer(44));
RegRegisterMethod(TIBBase,'CheckTransaction',TypeInfo(_T14),NoParams,  getVMTProcAddr('TIBBase','CheckTransaction',44));


RegRegisterMethod(TIBDatabase,'ApplyUpdates',TypeInfo(_T17),[
ArrayInfo(TypeInfo(TDataSet))],Addr(TIBDatabase.ApplyUpdates));

RegRegisterMethod(TIBDatabase,'CloseDataSets',TypeInfo(_T18),NoParams,Addr(TIBDatabase.CloseDataSets));

RegRegisterMethod(TIBDatabase,'CheckActive',TypeInfo(_T19),NoParams,Addr(TIBDatabase.CheckActive));

RegRegisterMethod(TIBDatabase,'CheckInactive',TypeInfo(_T20),NoParams,Addr(TIBDatabase.CheckInactive));

RegRegisterMethod(TIBDatabase,'CreateDatabase',TypeInfo(_T21),NoParams,Addr(TIBDatabase.CreateDatabase));

RegRegisterMethod(TIBDatabase,'DropDatabase',TypeInfo(_T22),NoParams,Addr(TIBDatabase.DropDatabase));

RegRegisterMethod(TIBDatabase,'ForceClose',TypeInfo(_T23),NoParams,Addr(TIBDatabase.ForceClose));

RegRegisterMethod(TIBDatabase,'GetFieldNames',TypeInfo(_T24),[
TypeInfo(string),
TypeInfo(TStrings)],Addr(TIBDatabase.GetFieldNames));

RegisterProc(TIBDatabase,'GetTableNames',mtScriptMethod,TypeInfo(_T25),[
TypeInfo(TStrings),
TypeInfo(Boolean)],Addr(__TIBDatabase__GetTableNames__Wrapper),cRegister);

RegRegisterMethod(TIBDatabase,'IndexOfDBConst',TypeInfo(_T26),[
TypeInfo(string),TypeInfo(Integer)],Addr(TIBDatabase.IndexOfDBConst));

RegRegisterMethod(TIBDatabase,'TestConnected',TypeInfo(_T27),[TypeInfo(Boolean)],Addr(TIBDatabase.TestConnected));

RegRegisterMethod(TIBDatabase,'CheckDatabaseName',TypeInfo(_T28),NoParams,Addr(TIBDatabase.CheckDatabaseName));

RegRegisterMethod(TIBDatabase,'Call',TypeInfo(_T29),[
TypeInfo(ISC_STATUS),
TypeInfo(Boolean),TypeInfo(ISC_STATUS)],Addr(TIBDatabase.Call));

RegRegisterMethod(TIBDatabase,'AddTransaction',TypeInfo(_T30),[
TypeInfo(TIBTransaction),TypeInfo(Integer)],Addr(TIBDatabase.AddTransaction));

RegRegisterMethod(TIBDatabase,'FindTransaction',TypeInfo(_T31),[
TypeInfo(TIBTransaction),TypeInfo(Integer)],Addr(TIBDatabase.FindTransaction));

RegRegisterMethod(TIBDatabase,'FindDefaultTransaction',TypeInfo(_T32),[TypeInfo(TIBTransaction)],Addr(TIBDatabase.FindDefaultTransaction));

RegRegisterMethod(TIBDatabase,'RemoveTransaction',TypeInfo(_T33),[
TypeInfo(Integer)],Addr(TIBDatabase.RemoveTransaction));

RegRegisterMethod(TIBDatabase,'RemoveTransactions',TypeInfo(_T34),NoParams,Addr(TIBDatabase.RemoveTransactions));

RegRegisterMethod(TIBDatabase,'SetHandle',TypeInfo(_T35),[
TypeInfoPointer],Addr(TIBDatabase.SetHandle));

RegRegisterMethod(TIBDatabase,'Has_DEFAULT_VALUE',TypeInfo(_T36),[
TypeInfo(string),
TypeInfo(string),TypeInfo(Boolean)],Addr(TIBDatabase.Has_DEFAULT_VALUE));

RegRegisterMethod(TIBDatabase,'Has_COMPUTED_BLR',TypeInfo(_T37),[
TypeInfo(string),
TypeInfo(string),TypeInfo(Boolean)],Addr(TIBDatabase.Has_COMPUTED_BLR));

RegRegisterMethod(TIBDatabase,'In_Key',TypeInfo(_T38),[
TypeInfo(string),
TypeInfo(string),TypeInfo(Boolean)],Addr(TIBDatabase.In_Key));

RegRegisterMethod(TIBDatabase,'FlushSchema',TypeInfo(_T39),NoParams,Addr(TIBDatabase.FlushSchema));

//RegRegisterMethod(TIBSchema,'FreeNodes',TypeInfo(_T40),NoParams, pointer(0));
RegRegisterMethod(TIBSchema,'FreeNodes',TypeInfo(_T40),NoParams,  getVMTProcAddr('TIBSchema','FreeNodes',0));


//RegRegisterMethod(TIBSchema,'Has_DEFAULT_VALUE',TypeInfo(_T41),[TypeInfo(string),TypeInfo(string),TypeInfo(Boolean)], pointer(4));
RegRegisterMethod(TIBSchema,'Has_DEFAULT_VALUE',TypeInfo(_T41),[TypeInfo(string),TypeInfo(string),TypeInfo(Boolean)],  getVMTProcAddr('TIBSchema','Has_DEFAULT_VALUE',4));


//RegRegisterMethod(TIBSchema,'Has_COMPUTED_BLR',TypeInfo(_T42),[TypeInfo(string),TypeInfo(string),TypeInfo(Boolean)], pointer(8));
RegRegisterMethod(TIBSchema,'Has_COMPUTED_BLR',TypeInfo(_T42),[TypeInfo(string),TypeInfo(string),TypeInfo(Boolean)],  getVMTProcAddr('TIBSchema','Has_COMPUTED_BLR',8));


//RegRegisterMethod(TIBSchema,'In_Key',TypeInfo(_T43),[TypeInfo(string),TypeInfo(string),TypeInfo(Boolean)], pointer(12));
RegRegisterMethod(TIBSchema,'In_Key',TypeInfo(_T43),[TypeInfo(string),TypeInfo(string),TypeInfo(Boolean)],  getVMTProcAddr('TIBSchema','In_Key',12));


RegRegisterMethod(TIBTransaction,'Call',TypeInfo(_T44),[
TypeInfo(ISC_STATUS),
TypeInfo(Boolean),TypeInfo(ISC_STATUS)],Addr(TIBTransaction.Call));

RegRegisterMethod(TIBTransaction,'Commit',TypeInfo(_T45),NoParams,Addr(TIBTransaction.Commit));

RegRegisterMethod(TIBTransaction,'CommitRetaining',TypeInfo(_T46),NoParams,Addr(TIBTransaction.CommitRetaining));

RegRegisterMethod(TIBTransaction,'Rollback',TypeInfo(_T47),NoParams,Addr(TIBTransaction.Rollback));

RegRegisterMethod(TIBTransaction,'RollbackRetaining',TypeInfo(_T48),NoParams,Addr(TIBTransaction.RollbackRetaining));

RegRegisterMethod(TIBTransaction,'StartTransaction',TypeInfo(_T49),NoParams,Addr(TIBTransaction.StartTransaction));

RegRegisterMethod(TIBTransaction,'AutoStartTransaction',TypeInfo(_T50),NoParams,Addr(TIBTransaction.AutoStartTransaction));

RegRegisterMethod(TIBTransaction,'ReleaseSavepoint',TypeInfo(_T51),[
TypeInfo(string)],Addr(TIBTransaction.ReleaseSavepoint));

RegRegisterMethod(TIBTransaction,'RollbackSavepoint',TypeInfo(_T52),[
TypeInfo(string)],Addr(TIBTransaction.RollbackSavepoint));

RegRegisterMethod(TIBTransaction,'StartSavepoint',TypeInfo(_T53),[
TypeInfo(string)],Addr(TIBTransaction.StartSavepoint));

RegRegisterMethod(TIBTransaction,'CheckInTransaction',TypeInfo(_T54),NoParams,Addr(TIBTransaction.CheckInTransaction));

RegRegisterMethod(TIBTransaction,'CheckNotInTransaction',TypeInfo(_T55),NoParams,Addr(TIBTransaction.CheckNotInTransaction));

RegRegisterMethod(TIBTransaction,'CheckAutoStop',TypeInfo(_T56),NoParams,Addr(TIBTransaction.CheckAutoStop));

RegRegisterMethod(TIBTransaction,'AddDatabase',TypeInfo(_T57),[
TypeInfo(TIBDatabase),TypeInfo(Integer)],Addr(TIBTransaction.AddDatabase));

RegRegisterMethod(TIBTransaction,'FindDatabase',TypeInfo(_T58),[
TypeInfo(TIBDatabase),TypeInfo(Integer)],Addr(TIBTransaction.FindDatabase));

RegRegisterMethod(TIBTransaction,'FindDefaultDatabase',TypeInfo(_T59),[TypeInfo(TIBDatabase)],Addr(TIBTransaction.FindDefaultDatabase));

RegRegisterMethod(TIBTransaction,'RemoveDatabase',TypeInfo(_T60),[
TypeInfo(Integer)],Addr(TIBTransaction.RemoveDatabase));

RegRegisterMethod(TIBTransaction,'RemoveDatabases',TypeInfo(_T61),NoParams,Addr(TIBTransaction.RemoveDatabases));

RegRegisterMethod(TIBTransaction,'CheckDatabasesInList',TypeInfo(_T62),NoParams,Addr(TIBTransaction.CheckDatabasesInList));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegRegisterMethod(TIBDatabase,'AddEventNotifier',TypeInfo(_T15),[
TypeInfo(IIBEventNotifier)],Addr(TIBDatabase.AddEventNotifier))}

{RegRegisterMethod(TIBDatabase,'RemoveEventNotifier',TypeInfo(_T16),[
TypeInfo(IIBEventNotifier)],Addr(TIBDatabase.RemoveEventNotifier))}

RegisterEvent(TypeInfo(TIBDatabaseLoginEvent),[
TypeInfo(TIBDatabase),
TypeInfo(TStrings)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
