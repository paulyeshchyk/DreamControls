{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit dfm2html_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Controls,
  Classes,
  Forms,
  SysUtils,
  Graphics,
  TypInfo,
  dfm2html;
function ConvertTObjEventToVariant(var R : TObjEvent) : OleVariant;
function ConvertVariantToTObjEvent(const V : OleVariant) : TObjEvent;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TObjEvent__Wrapper = class(TDCRecordWrapper)
private
fR : TObjEvent;
public
function GetRecordPtr : pointer; override;
published
procedure setOwner(const val : TObject);
function getOwner : TObject;
property Owner : TObject read getOwner write setOwner;
end;
type
_T0 = procedure (p0 : TCustomForm;
p1 : TFileName;
p2 : TScriptType;
p3 : TStream) of object;

_T1 = function (p0 : TCustomForm;
p1 : TFileName;
p2 : TScriptType): string of object;

{_T2 = procedure (p0 : TControlClass;
p1 : THTMLControlClass) of object;}

{_T3 = procedure (p0 : TControlClass) of object;}

_T4 = procedure  of object;

_T5 = function (const p0 : TObject;
p1 : Pointer;
const p2 : string;
const p3 : string): Integer of object;

_T6 = function (const p0 : TObject): Integer of object;

_T7 = procedure (p0 : Integer) of object;

_T8 = _T4;

_T9 = procedure (p0 : THTMLEventKinds) of object;

_T10 = procedure (const p0 : TControl;
p1 : TScriptType) of object;

_T11 = _T4;

_T12 = procedure (p0 : TControl) of object;

_T13 = _T4;

_T14 = _T7;

_T15 = procedure (p0 : TStream) of object;

_T16 = function : string of object;

function __TObjEvent__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TObjEvent__Wrapper.setOwner(const val : TObject);
begin
TObjEvent(GetRecordPtr^).Owner := val;
end;
function __TObjEvent__Wrapper.getOwner : TObject;
begin
result := TObjEvent(GetRecordPtr^).Owner;
end;
function _TObjEvent_ : IDispatch;
begin
  result := __TObjEvent__Wrapper.Create;
end;

type __TObjEvent__Wrapper__ = class(__TObjEvent__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TObjEvent__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTObjEventToVariant(var R : TObjEvent) : OleVariant;
var
__rw : __TObjEvent__Wrapper__;
begin
__rw := __TObjEvent__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTObjEvent(const V : OleVariant) : TObjEvent;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TObjEvent((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTEventList__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TEventList(Instance).Count;
end;

function __DC__GetTEventList__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TObjEvent__Wrapper;
begin
__wrapper := __TObjEvent__Wrapper.Create;
__wrapper.fR := TEventList(Instance).Items[OleVariant(Params^[0])];
result := IUnknown(__wrapper) as IDispatch;
end;

function __DC__GetTEventManager__Events(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TEventManager(Instance).Events);
end;

function __DC__GetTEventManager__MemberEvents(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : THTMLEventKinds;
begin
tmp := TEventManager(Instance).MemberEvents;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTEventManager__MemberEvents(Instance : TObject; Params : PVariantArgList);
var
  tmp : THTMLEventKinds;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TEventManager(Instance).MemberEvents:=tmp;
end;

function __DC__GetTHTMLControl__Control(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(THTMLControl(Instance).Control);
end;

procedure __DC__SetTHTMLControl__Control(Instance : TObject; Params : PVariantArgList);
begin
THTMLControl(Instance).Control:=TControl(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTHTMLControl__UseColor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := THTMLControl(Instance).UseColor;
end;

procedure __DC__SetTHTMLControl__UseColor(Instance : TObject; Params : PVariantArgList);
begin
THTMLControl(Instance).UseColor:=OleVariant(Params^[0]);
end;

function __DC__GetTHTMLControl__Alignment(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := THTMLControl(Instance).Alignment;
end;

procedure __DC__SetTHTMLControl__Alignment(Instance : TObject; Params : PVariantArgList);
begin
THTMLControl(Instance).Alignment:=OleVariant(Params^[0]);
end;

function __DC__GetTHTMLControl__VAlignment(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := THTMLControl(Instance).VAlignment;
end;

procedure __DC__SetTHTMLControl__VAlignment(Instance : TObject; Params : PVariantArgList);
begin
THTMLControl(Instance).VAlignment:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TEventList,'Count',__DC__GetTEventList__Count,nil);
RegisterIndexedProperty(TEventList,'Items',1,True,__DC__GetTEventList__Items,nil);
RegisterProperty(TEventManager,'Events',__DC__GetTEventManager__Events,nil);
RegisterProperty(TEventManager,'MemberEvents',__DC__GetTEventManager__MemberEvents,__DC__SetTEventManager__MemberEvents);
RegisterProperty(THTMLControl,'Control',__DC__GetTHTMLControl__Control,__DC__SetTHTMLControl__Control);
RegisterProperty(THTMLControl,'UseColor',__DC__GetTHTMLControl__UseColor,__DC__SetTHTMLControl__UseColor);
RegisterProperty(THTMLControl,'Alignment',__DC__GetTHTMLControl__Alignment,__DC__SetTHTMLControl__Alignment);
RegisterProperty(THTMLControl,'VAlignment',__DC__GetTHTMLControl__VAlignment,__DC__SetTHTMLControl__VAlignment);
end;

const __ConstNames0 : array[0..24] of string = (
'sctJavaScript'
,'sctVBScript'
,'sctUnknown'
,'tvaTopJustify'
,'tvaMiddleJustify'
,'tvaBottomJustify'
,'ekOnLoad'
,'ekOnUnload'
,'ekOnClick'
,'ekOnDblClick'
,'ekOnMouseDown'
,'ekOnMouseUp'
,'ekOnMouseOver'
,'ekOnMouseMove'
,'ekOnMouseOut'
,'ekOnFocus'
,'ekOnBlur'
,'ekOnKeypress'
,'ekOnKeyDown'
,'ekOnKeyUp'
,'ekOnSubmit'
,'ekOnReset'
,'ekOnSelect'
,'ekOnChange'
,'ekUnknown'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,sctJavaScript));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,sctVBScript));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,sctUnknown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,tvaTopJustify));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,tvaMiddleJustify));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,tvaBottomJustify));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,ekOnLoad));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,ekOnUnload));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,ekOnClick));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,ekOnDblClick));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,ekOnMouseDown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,ekOnMouseUp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,ekOnMouseOver));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,ekOnMouseMove));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,ekOnMouseOut));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,ekOnFocus));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,ekOnBlur));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,ekOnKeypress));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,ekOnKeyDown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,ekOnKeyUp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,ekOnSubmit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,ekOnReset));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,ekOnSelect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,ekOnChange));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,ekUnknown));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..2] of TClass = (
TEventList,
TEventManager,
THTMLControl
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..2] of string = (
'TObjEvent'
,'Form2Html'
,'Form2HtmlStr'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TObjEvent_)));
RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T0),[
TypeInfo(TCustomForm),
TypeInfo(TFileName),
TypeInfo(TScriptType),
TypeInfo(TStream)],Addr(Form2Html),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T1),[
TypeInfo(TCustomForm),
TypeInfo(TFileName),
TypeInfo(TScriptType),TypeInfo(string)],Addr(Form2HtmlStr),cRegister);

RegisterProc(TEventList,'Create',mtConstructor,TypeInfo(_T4),NoParams,Addr(TEventList.Create),cRegister);

RegRegisterMethod(TEventList,'Add',TypeInfo(_T5),[
TypeInfo(TObject),
TypeInfoPointer,
TypeInfo(string),
TypeInfo(string),TypeInfo(Integer)],Addr(TEventList.Add));

RegRegisterMethod(TEventList,'Remove',TypeInfo(_T6),[
TypeInfo(TObject),TypeInfo(Integer)],Addr(TEventList.Remove));

RegRegisterMethod(TEventList,'Delete',TypeInfo(_T7),[
TypeInfo(Integer)],Addr(TEventList.Delete));

RegRegisterMethod(TEventList,'Clear',TypeInfo(_T8),NoParams,Addr(TEventList.Clear));

RegisterProc(TEventManager,'Create',mtConstructor,TypeInfo(_T9),[
TypeInfo(THTMLEventKinds)],Addr(TEventManager.Create),cRegister);

RegRegisterMethod(TEventManager,'FillEvents',TypeInfo(_T10),[
TypeInfo(TControl),
TypeInfo(TScriptType)],Addr(TEventManager.FillEvents));

RegRegisterMethod(TEventManager,'ClearEvents',TypeInfo(_T11),NoParams,Addr(TEventManager.ClearEvents));

//RegRegisterMethod(THTMLControl,'SetControl',TypeInfo(_T12),[TypeInfo(TControl)], pointer(0));
RegRegisterMethod(THTMLControl,'SetControl',TypeInfo(_T12),[TypeInfo(TControl)],  getVMTProcAddr('THTMLControl','SetControl',0));


//RegRegisterMethod(THTMLControl,'DoSetControl',TypeInfo(_T13),NoParams, pointer(4));
RegRegisterMethod(THTMLControl,'DoSetControl',TypeInfo(_T13),NoParams,  getVMTProcAddr('THTMLControl','DoSetControl',4));


RegisterProc(THTMLControl,'Create',mtConstructor,TypeInfo(_T14),[
TypeInfo(Integer)], pointer(8),cRegister);

RegRegisterMethod(THTMLControl,'WriteToStream',TypeInfo(_T15),[
TypeInfo(TStream)],Addr(THTMLControl.WriteToStream));

//RegRegisterMethod(THTMLControl,'GetTag',TypeInfo(_T16),[TypeInfo(string)], pointer(12));
RegRegisterMethod(THTMLControl,'GetTag',TypeInfo(_T16),[TypeInfo(string)],  getVMTProcAddr('THTMLControl','GetTag',12));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'RegisterControlClass',mtProc,TypeInfo(_T2),[
TypeInfo(TControlClass),
TypeInfo(THTMLControlClass)],Addr(RegisterControlClass),cRegister)}

{RegisterProc(nil,'UnRegisterControlClass',mtProc,TypeInfo(_T3),[
TypeInfo(TControlClass)],Addr(UnRegisterControlClass),cRegister)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
