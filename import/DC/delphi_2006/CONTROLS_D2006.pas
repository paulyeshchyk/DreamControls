{*******************************************************}
{                                                       }
{ Import unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

Unit Controls_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Messages,
  Types,
  Windows,
  MultiMon,
  Classes,
  SysUtils,
  Graphics,
  Menus,
  CommCtrl,
  Imm,
  ImgList,
  ActnList,
  Controls;
function ConvertTAlignInfoToVariant(var R : TAlignInfo) : OleVariant;
function ConvertVariantToTAlignInfo(const V : OleVariant) : TAlignInfo;
function ConvertTCMCancelModeToVariant(var R : TCMCancelMode) : OleVariant;
function ConvertVariantToTCMCancelMode(const V : OleVariant) : TCMCancelMode;
function ConvertTCMChangedToVariant(var R : TCMChanged) : OleVariant;
function ConvertVariantToTCMChanged(const V : OleVariant) : TCMChanged;
function ConvertTCMChildKeyToVariant(var R : TCMChildKey) : OleVariant;
function ConvertVariantToTCMChildKey(const V : OleVariant) : TCMChildKey;
function ConvertTCMControlChangeToVariant(var R : TCMControlChange) : OleVariant;
function ConvertVariantToTCMControlChange(const V : OleVariant) : TCMControlChange;
function ConvertTCMControlListChangeToVariant(var R : TCMControlListChange) : OleVariant;
function ConvertVariantToTCMControlListChange(const V : OleVariant) : TCMControlListChange;
function ConvertTCMControlListChangingToVariant(var R : TCMControlListChanging) : OleVariant;
function ConvertVariantToTCMControlListChanging(const V : OleVariant) : TCMControlListChanging;
function ConvertTCMCreatePopupToVariant(var R : TCMCreatePopup) : OleVariant;
function ConvertVariantToTCMCreatePopup(const V : OleVariant) : TCMCreatePopup;
function ConvertTCMDockClientToVariant(var R : TCMDockClient) : OleVariant;
function ConvertVariantToTCMDockClient(const V : OleVariant) : TCMDockClient;
function ConvertTCMDockNotificationToVariant(var R : TCMDockNotification) : OleVariant;
function ConvertVariantToTCMDockNotification(const V : OleVariant) : TCMDockNotification;
function ConvertTCMDragToVariant(var R : TCMDrag) : OleVariant;
function ConvertVariantToTCMDrag(const V : OleVariant) : TCMDrag;
function ConvertTCMFloatToVariant(var R : TCMFloat) : OleVariant;
function ConvertVariantToTCMFloat(const V : OleVariant) : TCMFloat;
function ConvertTCMFocusChangedToVariant(var R : TCMFocusChanged) : OleVariant;
function ConvertVariantToTCMFocusChanged(const V : OleVariant) : TCMFocusChanged;
function ConvertTCMMouseActivateToVariant(var R : TCMMouseActivate) : OleVariant;
function ConvertVariantToTCMMouseActivate(const V : OleVariant) : TCMMouseActivate;
function ConvertTCMMouseWheelToVariant(var R : TCMMouseWheel) : OleVariant;
function ConvertVariantToTCMMouseWheel(const V : OleVariant) : TCMMouseWheel;
function ConvertTCMPopupHWndDestroyToVariant(var R : TCMPopupHWndDestroy) : OleVariant;
function ConvertVariantToTCMPopupHWndDestroy(const V : OleVariant) : TCMPopupHWndDestroy;
function ConvertTCMUnDockClientToVariant(var R : TCMUnDockClient) : OleVariant;
function ConvertVariantToTCMUnDockClient(const V : OleVariant) : TCMUnDockClient;
function ConvertTControlListItemToVariant(var R : TControlListItem) : OleVariant;
function ConvertVariantToTControlListItem(const V : OleVariant) : TControlListItem;
function ConvertTCreateParamsToVariant(var R : TCreateParams) : OleVariant;
function ConvertVariantToTCreateParams(const V : OleVariant) : TCreateParams;
function ConvertTDockNotifyRecToVariant(var R : TDockNotifyRec) : OleVariant;
function ConvertVariantToTDockNotifyRec(const V : OleVariant) : TDockNotifyRec;
function ConvertTDragRecToVariant(var R : TDragRec) : OleVariant;
function ConvertVariantToTDragRec(const V : OleVariant) : TDragRec;
function ConvertTMouseActivateRecToVariant(var R : TMouseActivateRec) : OleVariant;
function ConvertVariantToTMouseActivateRec(const V : OleVariant) : TMouseActivateRec;
function ConvertTMsgToVariant(var R : TMsg) : OleVariant;
function ConvertVariantToTMsg(const V : OleVariant) : TMsg;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
function ConvertTPopupFormInfoToVariant(var R : TPopupFormInfo) : OleVariant;
function ConvertVariantToTPopupFormInfo(const V : OleVariant) : TPopupFormInfo;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TRect__Wrapper = class(TDCRecordWrapper)
private
fR : TRect;
public
function GetRecordPtr : pointer; override;
published
procedure setLeft(const val : Longint);
function getLeft : Longint;
property Left : Longint read getLeft write setLeft;
procedure setTop(const val : Longint);
function getTop : Longint;
property Top : Longint read getTop write setTop;
procedure setRight(const val : Longint);
function getRight : Longint;
property Right : Longint read getRight write setRight;
procedure setBottom(const val : Longint);
function getBottom : Longint;
property Bottom : Longint read getBottom write setBottom;
end;
type __TPoint__Wrapper = class(TDCRecordWrapper)
private
fR : TPoint;
public
function GetRecordPtr : pointer; override;
published
procedure setX(const val : Longint);
function getX : Longint;
property X : Longint read getX write setX;
procedure setY(const val : Longint);
function getY : Longint;
property Y : Longint read getY write setY;
end;
type __TAlignInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TAlignInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setAlignList(const val : TList);
function getAlignList : TList;
property AlignList : TList read getAlignList write setAlignList;
procedure setControlIndex(const val : Integer);
function getControlIndex : Integer;
property ControlIndex : Integer read getControlIndex write setControlIndex;
procedure setAlign(const val : TAlign);
function getAlign : TAlign;
property Align : TAlign read getAlign write setAlign;
procedure setScratch(const val : Integer);
function getScratch : Integer;
property Scratch : Integer read getScratch write setScratch;
end;
type __TCMCancelMode__Wrapper = class(TDCRecordWrapper)
private
fR : TCMCancelMode;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setUnused(const val : Integer);
function getUnused : Integer;
property Unused : Integer read getUnused write setUnused;
procedure setSender(const val : TControl);
function getSender : TControl;
property Sender : TControl read getSender write setSender;
procedure setResult(const val : Longint);
function getResult : Longint;
property Result : Longint read getResult write setResult;
end;
type __TCMChanged__Wrapper = class(TDCRecordWrapper)
private
fR : TCMChanged;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setUnused(const val : Longint);
function getUnused : Longint;
property Unused : Longint read getUnused write setUnused;
procedure setChild(const val : TControl);
function getChild : TControl;
property Child : TControl read getChild write setChild;
procedure setResult(const val : Longint);
function getResult : Longint;
property Result : Longint read getResult write setResult;
end;
type __TCMChildKey__Wrapper = class(TDCRecordWrapper)
private
fR : TCMChildKey;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setCharCode(const val : Word);
function getCharCode : Word;
property CharCode : Word read getCharCode write setCharCode;
procedure setUnused(const val : Word);
function getUnused : Word;
property Unused : Word read getUnused write setUnused;
procedure setSender(const val : TWinControl);
function getSender : TWinControl;
property Sender : TWinControl read getSender write setSender;
procedure setResult(const val : Longint);
function getResult : Longint;
property Result : Longint read getResult write setResult;
end;
type __TCMControlChange__Wrapper = class(TDCRecordWrapper)
private
fR : TCMControlChange;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setControl(const val : TControl);
function getControl : TControl;
property Control : TControl read getControl write setControl;
procedure setInserting(const val : LongBool);
function getInserting : LongBool;
property Inserting : LongBool read getInserting write setInserting;
procedure setResult(const val : Longint);
function getResult : Longint;
property Result : Longint read getResult write setResult;
end;
type __TCMControlListChange__Wrapper = class(TDCRecordWrapper)
private
fR : TCMControlListChange;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setControl(const val : TControl);
function getControl : TControl;
property Control : TControl read getControl write setControl;
procedure setInserting(const val : LongBool);
function getInserting : LongBool;
property Inserting : LongBool read getInserting write setInserting;
procedure setResult(const val : Longint);
function getResult : Longint;
property Result : Longint read getResult write setResult;
end;
type __TCMControlListChanging__Wrapper = class(TDCRecordWrapper)
private
fR : TCMControlListChanging;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setInserting(const val : LongBool);
function getInserting : LongBool;
property Inserting : LongBool read getInserting write setInserting;
procedure setResult(const val : Longint);
function getResult : Longint;
property Result : Longint read getResult write setResult;
end;
type __TCMCreatePopup__Wrapper = class(TDCRecordWrapper)
private
fR : TCMCreatePopup;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setPopupID(const val : Integer);
function getPopupID : Integer;
property PopupID : Integer read getPopupID write setPopupID;
procedure setResult(const val : Integer);
function getResult : Integer;
property Result : Integer read getResult write setResult;
end;
type __TCMDockClient__Wrapper = class(TDCRecordWrapper)
private
fR : TCMDockClient;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setDockSource(const val : TDragDockObject);
function getDockSource : TDragDockObject;
property DockSource : TDragDockObject read getDockSource write setDockSource;
procedure setResult(const val : Integer);
function getResult : Integer;
property Result : Integer read getResult write setResult;
end;
type __TCMDockNotification__Wrapper = class(TDCRecordWrapper)
private
fR : TCMDockNotification;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setClient(const val : TControl);
function getClient : TControl;
property Client : TControl read getClient write setClient;
procedure setResult(const val : Integer);
function getResult : Integer;
property Result : Integer read getResult write setResult;
end;
type __TCMDrag__Wrapper = class(TDCRecordWrapper)
private
fR : TCMDrag;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setDragMessage(const val : TDragMessage);
function getDragMessage : TDragMessage;
property DragMessage : TDragMessage read getDragMessage write setDragMessage;
procedure setReserved1(const val : Byte);
function getReserved1 : Byte;
property Reserved1 : Byte read getReserved1 write setReserved1;
procedure setReserved2(const val : Word);
function getReserved2 : Word;
property Reserved2 : Word read getReserved2 write setReserved2;
procedure setResult(const val : Longint);
function getResult : Longint;
property Result : Longint read getResult write setResult;
end;
type __TCMFloat__Wrapper = class(TDCRecordWrapper)
private
fR : TCMFloat;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setReserved(const val : Integer);
function getReserved : Integer;
property Reserved : Integer read getReserved write setReserved;
procedure setDockSource(const val : TDragDockObject);
function getDockSource : TDragDockObject;
property DockSource : TDragDockObject read getDockSource write setDockSource;
procedure setResult(const val : Integer);
function getResult : Integer;
property Result : Integer read getResult write setResult;
end;
type __TCMFocusChanged__Wrapper = class(TDCRecordWrapper)
private
fR : TCMFocusChanged;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setUnused(const val : Integer);
function getUnused : Integer;
property Unused : Integer read getUnused write setUnused;
procedure setSender(const val : TWinControl);
function getSender : TWinControl;
property Sender : TWinControl read getSender write setSender;
procedure setResult(const val : Longint);
function getResult : Longint;
property Result : Longint read getResult write setResult;
end;
type __TCMMouseActivate__Wrapper = class(TDCRecordWrapper)
private
fR : TCMMouseActivate;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setReserved(const val : Integer);
function getReserved : Integer;
property Reserved : Integer read getReserved write setReserved;
procedure setResult(const val : Integer);
function getResult : Integer;
property Result : Integer read getResult write setResult;
end;
type __TCMMouseWheel__Wrapper = class(TDCRecordWrapper)
private
fR : TCMMouseWheel;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setUnused(const val : Byte);
function getUnused : Byte;
property Unused : Byte read getUnused write setUnused;
procedure setWheelDelta(const val : SmallInt);
function getWheelDelta : SmallInt;
property WheelDelta : SmallInt read getWheelDelta write setWheelDelta;
procedure setXPos(const val : SmallInt);
function getXPos : SmallInt;
property XPos : SmallInt read getXPos write setXPos;
procedure setYPos(const val : SmallInt);
function getYPos : SmallInt;
property YPos : SmallInt read getYPos write setYPos;
procedure setResult(const val : Longint);
function getResult : Longint;
property Result : Longint read getResult write setResult;
end;
type __TCMPopupHWndDestroy__Wrapper = class(TDCRecordWrapper)
private
fR : TCMPopupHWndDestroy;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setResult(const val : Integer);
function getResult : Integer;
property Result : Integer read getResult write setResult;
end;
type __TCMUnDockClient__Wrapper = class(TDCRecordWrapper)
private
fR : TCMUnDockClient;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setNewTarget(const val : TControl);
function getNewTarget : TControl;
property NewTarget : TControl read getNewTarget write setNewTarget;
procedure setClient(const val : TControl);
function getClient : TControl;
property Client : TControl read getClient write setClient;
procedure setResult(const val : Integer);
function getResult : Integer;
property Result : Integer read getResult write setResult;
end;
type __TControlListItem__Wrapper = class(TDCRecordWrapper)
private
fR : TControlListItem;
public
function GetRecordPtr : pointer; override;
published
procedure setControl(const val : TControl);
function getControl : TControl;
property Control : TControl read getControl write setControl;
procedure setParent(const val : TWinControl);
function getParent : TWinControl;
property Parent : TWinControl read getParent write setParent;
end;
type __TCreateParams__Wrapper = class(TDCRecordWrapper)
private
fR : TCreateParams;
public
function GetRecordPtr : pointer; override;
published
procedure setStyle(const val : DWORD);
function getStyle : DWORD;
property Style : DWORD read getStyle write setStyle;
procedure setExStyle(const val : DWORD);
function getExStyle : DWORD;
property ExStyle : DWORD read getExStyle write setExStyle;
procedure setX(const val : Integer);
function getX : Integer;
property X : Integer read getX write setX;
procedure setY(const val : Integer);
function getY : Integer;
property Y : Integer read getY write setY;
procedure setWidth(const val : Integer);
function getWidth : Integer;
property Width : Integer read getWidth write setWidth;
procedure setHeight(const val : Integer);
function getHeight : Integer;
property Height : Integer read getHeight write setHeight;
end;
type __TDockNotifyRec__Wrapper = class(TDCRecordWrapper)
private
fR : TDockNotifyRec;
public
function GetRecordPtr : pointer; override;
published
procedure setClientMsg(const val : Cardinal);
function getClientMsg : Cardinal;
property ClientMsg : Cardinal read getClientMsg write setClientMsg;
procedure setMsgWParam(const val : Integer);
function getMsgWParam : Integer;
property MsgWParam : Integer read getMsgWParam write setMsgWParam;
procedure setMsgLParam(const val : Integer);
function getMsgLParam : Integer;
property MsgLParam : Integer read getMsgLParam write setMsgLParam;
end;
type __TDragRec__Wrapper = class(TDCRecordWrapper)
private
fR : TDragRec;
public
function GetRecordPtr : pointer; override;
published
procedure setSource(const val : TDragObject);
function getSource : TDragObject;
property Source : TDragObject read getSource write setSource;
procedure setDocking(const val : Boolean);
function getDocking : Boolean;
property Docking : Boolean read getDocking write setDocking;
end;
type __TMouseActivateRec__Wrapper = class(TDCRecordWrapper)
private
fR : TMouseActivateRec;
public
function GetRecordPtr : pointer; override;
published
procedure setHitTest(const val : Integer);
function getHitTest : Integer;
property HitTest : Integer read getHitTest write setHitTest;
procedure setButton(const val : TMouseButton);
function getButton : TMouseButton;
property Button : TMouseButton read getButton write setButton;
end;
type __TPopupFormInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TPopupFormInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setPopupID(const val : Integer);
function getPopupID : Integer;
property PopupID : Integer read getPopupID write setPopupID;
procedure setIsPopup(const val : Boolean);
function getIsPopup : Boolean;
property IsPopup : Boolean read getIsPopup write setIsPopup;
end;
type __TMsg__Wrapper = class(TDCRecordWrapper)
private
fR : TMsg;
public
function GetRecordPtr : pointer; override;
published
procedure setmessage(const val : UINT);
function getmessage : UINT;
property message : UINT read getmessage write setmessage;
procedure setWPARAM(const val : WPARAM);
function getWPARAM : WPARAM;
property WPARAM : WPARAM read getWPARAM write setWPARAM;
procedure setLPARAM(const val : LPARAM);
function getLPARAM : LPARAM;
property LPARAM : LPARAM read getLPARAM write setLPARAM;
procedure settime(const val : DWORD);
function gettime : DWORD;
property time : DWORD read gettime write settime;
end;
type __TControl__ = class(TControl);
type __TDockTree__ = class(TDockTree);
type __TDragDockObject__ = class(TDragDockObject);
type __TWinControl__ = class(TWinControl);
type
_T0 = function (const AModalResult : TModalResult): Boolean of object;

_T1 = _T0;

_T2 = _T0;

_T3 = _T0;

_T4 = function (const AModalResult : TModalResult): TModalResult of object;

_T5 = function (Sender : TObject): Boolean of object;

_T6 = function (Handle : HWND): Boolean of object;

_T7 = function (Handle : HWND): TWinControl of object;

_T8 = function (const Pos : IDispatch): TWinControl of object;

_T9 = function (const Pos : IDispatch;
AllowDisabled : Boolean): TControl of object;

_T10 = function : TControl of object;

_T11 = procedure (Control : TControl) of object;

_T12 = procedure  of object;

_T13 = function (Cursor : TCursor): string of object;

_T14 = function (const S : string): TCursor of object;

{_T15 = procedure (Proc : TGetStrProc) of object;}

_T16 = function (Cursor : Longint;
var Ident : string): Boolean of object;

_T17 = function (const Ident : string;
var Cursor : Longint): Boolean of object;

_T18 = function (const Hint : string): string of object;

_T19 = _T18;

_T20 = procedure (Control : TControl;
DC : HDC) of object;

_T21 = function (HWindow : HWND;
Message : Longint;
WParam : Longint;
LParam : Longint): Longint of object;

_T22 = procedure (var Alignment : TAlignment) of object;

_T23 = function (Msg : Cardinal;
WParam : Longint;
LParam : Longint): Longint of object;

_T24 = procedure (DC : HDC;
DX : Integer;
DY : Integer) of object;

_T25 = procedure (HWND : HWND;
Mode : TImeMode) of object;

_T26 = procedure (Name : TImeName) of object;

_T27 = function (HWND : HWND;
Enable : Boolean): Boolean of object;

_T28 = function (HWND : HWND): HIMC of object;

_T29 = function (HWND : HWND;
HIMC : HIMC): Boolean of object;

_T30 = function (HIMC : HIMC;
var Conversion : DWORD;
var Sentence : DWORD): Boolean of object;

_T31 = function (HIMC : HIMC;
Conversion : DWORD;
Sentence : DWORD): Boolean of object;

_T32 = function (HIMC : HIMC;
fOpen : Boolean): Boolean of object;

_T33 = function (HIMC : HIMC;
lpCompForm : PCOMPOSITIONFORM): Boolean of object;

{_T34 = function (HIMC : HIMC;
lpLogfont : PLOGFONTA): Boolean of object;}

_T35 = function (HIMC : HIMC;
dWord1 : DWORD;
lpBuf : Pointer;
dwBufLen : DWORD): Longint of object;

_T36 = function (hKl : hKl): Boolean of object;

_T37 = function (HIMC : HIMC;
dwAction : DWORD;
dwIndex : DWORD;
dwValue : DWORD): Boolean of object;

_T38 = procedure (Drop : Boolean) of object;

_T39 = procedure (Target : TObject;
X : Integer;
Y : Integer) of object;

_T40 = procedure (AControl : TControl) of object;

_T41 = procedure (Sender : TObject;
CheckDefaults : Boolean) of object;

_T42 = _T12;

_T43 = _T12;

_T44 = function (var NewWidth : Integer;
var NewHeight : Integer): Boolean of object;

_T45 = _T44;

_T46 = procedure (M : Integer;
D : Integer) of object;

_T47 = _T12;

_T48 = procedure (var MinWidth : Integer;
var MinHeight : Integer;
var MaxWidth : Integer;
var MaxHeight : Integer) of object;

_T49 = function (var Message : TMessage): Boolean of object;

_T50 = _T12;

_T51 = procedure (DragDockObject : TDragDockObject;
Erase : Boolean) of object;

_T52 = procedure (Source : TDragDockObject;
X : Integer;
Y : Integer) of object;

_T53 = procedure (const MousePos : IDispatch;
var Handled : Boolean) of object;

_T54 = _T39;

_T55 = procedure (NewDockSite : TWinControl;
const ARect : IDispatch) of object;

_T56 = procedure (var DragObject : TDragObject) of object;

_T57 = function (Shift : TShiftState;
WheelDelta : Integer;
const MousePos : IDispatch): Boolean of object;

_T58 = function (Shift : TShiftState;
const MousePos : IDispatch): Boolean of object;

_T59 = _T58;

_T60 = _T12;

_T61 = procedure (Source : TObject;
X : Integer;
Y : Integer;
State : TDragState;
var Accept : Boolean) of object;

_T62 = _T39;

_T63 = _T56;

_T64 = procedure (DragDockObject : TDragDockObject) of object;

_T65 = _T64;

_T66 = function : TBasicAction of object;

{_T67 = function : TControlActionLinkClass of object;}

_T68 = function : IDispatch of object;

_T69 = _T68;

_T70 = function (var WindowHandle : HWND): HDC of object;

_T71 = function (const MousePos : IDispatch): TAlign of object;

_T72 = function : TDragImageList of object;

_T73 = function : Boolean of object;

_T74 = _T73;

{_T75 = function : TWinControlClass of object;}

_T76 = function : HPALETTE of object;

_T77 = function : TPopupMenu of object;

_T78 = function (Button : TMouseButton;
Shift : TShiftState;
X : Integer;
Y : Integer;
HitTest : Integer): TMouseActivate of object;

_T79 = procedure (Button : TMouseButton;
Shift : TShiftState;
X : Integer;
Y : Integer) of object;

_T80 = procedure (Shift : TShiftState;
X : Integer;
Y : Integer) of object;

_T81 = _T79;

_T82 = _T64;

_T83 = function (Foreground : Boolean): Boolean of object;

_T84 = _T12;

_T85 = _T12;

_T86 = procedure (Value : Boolean) of object;

_T87 = procedure (Value : TDragMode) of object;

_T88 = _T86;

_T89 = procedure (AParent : TWinControl) of object;

_T90 = _T86;

_T91 = procedure (Value : TBiDiMode) of object;

_T92 = procedure (TopMost : Boolean) of object;

_T93 = _T12;

_T94 = procedure (var Message : TMessage) of object;

_T95 = procedure (Immediate : Boolean;
Threshold : Integer) of object;

_T96 = _T12;

_T97 = function (const Point : IDispatch): IDispatch of object;

_T98 = function (const Point : IDispatch;
AParent : TWinControl): IDispatch of object;

_T99 = _T55;

_T100 = _T73;

_T101 = procedure (Source : TObject;
X : Integer;
Y : Integer) of object;

_T102 = function (Flags : Longint): Longint of object;

_T103 = function : Longint of object;

_T104 = _T38;

_T105 = function : TAlignment of object;

{_T106 = function (Buffer : PChar;
BufSize : Integer): Integer of object;}

_T107 = function : Integer of object;

_T108 = _T12;

_T109 = _T12;

_T110 = _T12;

_T111 = _T94;

_T112 = _T73;

_T113 = function (NewDockSite : TWinControl;
DropControl : TControl;
ControlSide : TAlign): Boolean of object;

_T114 = function (const ScreenPos : IDispatch): Boolean of object;

_T115 = _T23;

_T116 = _T12;

_T117 = _T12;

_T118 = function (Control : TControl;
NewDockSite : TWinControl;
DropControl : TControl;
ControlSide : TAlign): Boolean of object;

_T119 = _T97;

_T120 = _T98;

_T121 = _T12;

_T122 = procedure (ALeft : Integer;
ATop : Integer;
AWidth : Integer;
AHeight : Integer) of object;

_T123 = _T86;

{_T124 = procedure (Buffer : PChar) of object;}

_T125 = _T12;

_T126 = _T12;

_T127 = _T73;

_T128 = _T73;

_T129 = _T73;

_T130 = _T73;

_T131 = _T73;

_T132 = _T73;

_T133 = function (var HintStr : string): Boolean of object;

_T134 = procedure (Value : TPopupMenu) of object;

_T135 = _T86;

_T136 = _T134;

_T137 = _T12;

_T138 = _T12;

_T139 = _T12;

_T140 = _T107;

_T141 = _T107;

_T142 = procedure (const Value : Integer) of object;

_T143 = procedure (Item : string;
AObject : TObject) of object;

_T144 = _T12;

_T145 = _T12;

_T146 = procedure (Destination : TCustomListControl) of object;

_T147 = _T12;

_T148 = _T146;

_T149 = _T12;

_T150 = _T107;

_T151 = _T86;

_T152 = _T73;

_T153 = function (AHandle : THandle;
AControl : TControl): Boolean of object;

_T154 = _T12;

_T155 = procedure (Control : TControl;
const ARect : IDispatch) of object;

_T156 = _T155;

_T157 = function (const MousePos : IDispatch;
out HTFlag : Integer): TControl of object;

_T158 = procedure (Control : TControl;
InsertAt : TAlign;
DropCtl : TControl) of object;

_T159 = procedure (Stream : TStream) of object;

_T160 = procedure (Button : TMouseButton;
Shift : TShiftState;
X : Integer;
Y : Integer;
var Handled : Boolean) of object;

_T161 = procedure (Shift : TShiftState;
X : Integer;
Y : Integer;
var Handled : Boolean) of object;

_T162 = _T160;

_T163 = procedure (Canvas : TCanvas;
Control : TControl;
const ARect : IDispatch) of object;

_T164 = procedure (Client : TControl;
DropCtl : TControl;
DropAlign : TAlign;
const DockRect : IDispatch) of object;

_T165 = function (const Orient : TDockOrientation): Integer of object;

_T166 = _T11;

_T167 = _T159;

_T168 = procedure (const CursorPos : IDispatch;
const CursorRect : IDispatch;
var HintStr : string) of object;

_T169 = procedure (Force : Boolean) of object;

_T170 = _T94;

_T171 = function (const Zone : TDockZone;
const MousePos : IDispatch;
var HTFlag : Integer): Boolean of object;

_T172 = procedure (DockSite : TWinControl) of object;

_T173 = procedure (DC : HDC) of object;

_T174 = procedure (Tree : TDockTree) of object;

_T175 = procedure (NewLimit : Integer) of object;

_T176 = function : TDockZone of object;

_T177 = _T176;

_T178 = _T176;

_T179 = _T12;

_T180 = _T12;

_T181 = _T12;

_T182 = procedure (const ARect : IDispatch) of object;

_T183 = _T12;

_T184 = _T12;

_T185 = _T107;

_T186 = _T73;

_T187 = function (Window : HWND;
X : Integer;
Y : Integer): Boolean of object;

_T188 = function (Window : HWND;
XPos : Integer;
YPos : Integer): Boolean of object;

_T189 = function (X : Integer;
Y : Integer): Boolean of object;

_T190 = _T12;

_T191 = _T73;

_T192 = _T12;

_T193 = function (Index : Integer;
HotSpotX : Integer;
HotSpotY : Integer): Boolean of object;

_T194 = _T12;

_T195 = procedure (Target : TObject;
X : Integer;
Y : Integer;
Accepted : Boolean) of object;

_T196 = function (Accepted : Boolean;
X : Integer;
Y : Integer): TCursor of object;

_T197 = _T72;

_T198 = procedure (var Msg : TMessage) of object;

_T199 = procedure (Source : TDragObject) of object;

_T200 = function : string of object;

_T201 = _T12;

_T202 = function : THandle of object;

_T203 = _T12;

_T204 = _T12;

_T205 = _T173;

_T206 = procedure (const Rect : IDispatch;
const AHint : string) of object;

_T207 = procedure (const Rect : IDispatch;
const AHint : string;
AData : Pointer) of object;

_T208 = function (MaxWidth : Integer;
const AHint : string;
AData : Pointer): IDispatch of object;

_T209 = function (const Msg : IDispatch): Boolean of object;

_T210 = _T73;

_T211 = _T12;

_T212 = _T12;

_T213 = function (Index : Integer): Integer of object;

_T214 = procedure (Margins : TMargins) of object;

_T215 = _T11;

_T216 = procedure (ALeft : Integer;
ATop : Integer;
AWidth : Integer;
AHeight : Integer;
Aligning : Boolean) of object;

_T217 = procedure (ALeft : Integer;
ATop : Integer;
ARight : Integer;
ABottom : Integer) of object;

_T218 = _T12;

_T219 = procedure (Setting : Integer) of object;

_T220 = function : TCustomPanningWindow of object;

_T221 = _T12;

_T222 = _T11;

_T223 = procedure (const Rect : IDispatch) of object;

_T224 = procedure (AControl : TControl;
const Rect : IDispatch) of object;

_T225 = _T12;

{_T226 = function : IDockManager of object;}

_T227 = _T12;

_T228 = procedure (const Params : IDispatch) of object;

_T229 = _T228;

_T230 = _T12;

_T231 = function (C1 : TControl;
C2 : TControl): Boolean of object;

_T232 = procedure (Control : TControl;
var NewLeft : Integer;
var NewTop : Integer;
var NewWidth : Integer;
var NewHeight : Integer;
const AlignRect : IDispatch;
const AlignInfo : IDispatch) of object;

_T233 = _T12;

_T234 = _T12;

_T235 = _T12;

_T236 = procedure (Client : TControl;
const ARect : IDispatch) of object;

_T237 = procedure (Source : TDragDockObject;
X : Integer;
Y : Integer;
State : TDragState;
var Accept : Boolean) of object;

_T238 = function (Client : TControl;
NewDockSite : TWinControl;
DropControl : TControl;
ControlSide : TAlign;
ReplacementClient : TControl): Boolean of object;

_T239 = _T237;

_T240 = _T12;

_T241 = _T12;

_T242 = _T12;

_T243 = procedure (Client : TControl) of object;

_T244 = function (NewTarget : TWinControl;
Client : TControl): Boolean of object;

_T245 = _T68;

_T246 = procedure (Client : TControl;
const InfluenceRect : IDispatch;
const MousePos : IDispatch;
var CanDock : Boolean) of object;

_T247 = function (const Client : TControl): Boolean of object;

_T248 = procedure (var Key : Word;
Shift : TShiftState) of object;

_T249 = _T248;

_T250 = procedure (var Key : Char) of object;

_T251 = _T173;

_T252 = procedure (const AControlName : string;
var AControl : TControl) of object;

_T253 = _T86;

_T254 = _T40;

_T255 = procedure (AControl : TControl;
const AOriginalParentSize : IDispatch) of object;

_T256 = procedure (ParentWindow : HWND) of object;

_T257 = function (ParentWindow : HWND): TWinControl of object;

_T258 = procedure (var Message) of object;

_T259 = _T73;

_T260 = function (Control : TControl): Boolean of object;

_T261 = function (const Pos : IDispatch;
AllowDisabled : Boolean;
AllowWinControls : Boolean;
AllLevels : Boolean): TControl of object;

_T262 = _T12;

_T263 = _T52;

_T264 = _T12;

_T265 = function (const ControlName : string): TControl of object;

_T266 = procedure (AllLevels : Boolean) of object;

_T267 = _T73;

_T268 = procedure (List : TList) of object;

_T269 = _T73;

_T270 = _T12;

_T271 = _T40;

_T272 = procedure (DC : HDC;
X : Integer;
Y : Integer) of object;

_T273 = _T209;

_T274 = _T40;

_T275 = _T12;

_T276 = _T46;
__T276 = procedure (NewPPI : Integer) of object;

_T277 = procedure (DeltaX : Integer;
DeltaY : Integer) of object;

_T278 = _T12;

_T279 = _T12;

function __TRect__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRect__Wrapper.setLeft(const val : Longint);
begin
TRect(GetRecordPtr^).Left := val;
end;
function __TRect__Wrapper.getLeft : Longint;
begin
result := TRect(GetRecordPtr^).Left;
end;
procedure __TRect__Wrapper.setTop(const val : Longint);
begin
TRect(GetRecordPtr^).Top := val;
end;
function __TRect__Wrapper.getTop : Longint;
begin
result := TRect(GetRecordPtr^).Top;
end;
procedure __TRect__Wrapper.setRight(const val : Longint);
begin
TRect(GetRecordPtr^).Right := val;
end;
function __TRect__Wrapper.getRight : Longint;
begin
result := TRect(GetRecordPtr^).Right;
end;
procedure __TRect__Wrapper.setBottom(const val : Longint);
begin
TRect(GetRecordPtr^).Bottom := val;
end;
function __TRect__Wrapper.getBottom : Longint;
begin
result := TRect(GetRecordPtr^).Bottom;
end;
function __TPoint__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPoint__Wrapper.setX(const val : Longint);
begin
TPoint(GetRecordPtr^).X := val;
end;
function __TPoint__Wrapper.getX : Longint;
begin
result := TPoint(GetRecordPtr^).X;
end;
procedure __TPoint__Wrapper.setY(const val : Longint);
begin
TPoint(GetRecordPtr^).Y := val;
end;
function __TPoint__Wrapper.getY : Longint;
begin
result := TPoint(GetRecordPtr^).Y;
end;
function __TAlignInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TAlignInfo__Wrapper.setAlignList(const val : TList);
begin
TAlignInfo(GetRecordPtr^).AlignList := val;
end;
function __TAlignInfo__Wrapper.getAlignList : TList;
begin
result := TAlignInfo(GetRecordPtr^).AlignList;
end;
procedure __TAlignInfo__Wrapper.setControlIndex(const val : Integer);
begin
TAlignInfo(GetRecordPtr^).ControlIndex := val;
end;
function __TAlignInfo__Wrapper.getControlIndex : Integer;
begin
result := TAlignInfo(GetRecordPtr^).ControlIndex;
end;
procedure __TAlignInfo__Wrapper.setAlign(const val : TAlign);
begin
TAlignInfo(GetRecordPtr^).Align := val;
end;
function __TAlignInfo__Wrapper.getAlign : TAlign;
begin
result := TAlignInfo(GetRecordPtr^).Align;
end;
procedure __TAlignInfo__Wrapper.setScratch(const val : Integer);
begin
TAlignInfo(GetRecordPtr^).Scratch := val;
end;
function __TAlignInfo__Wrapper.getScratch : Integer;
begin
result := TAlignInfo(GetRecordPtr^).Scratch;
end;
function __TCMCancelMode__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCMCancelMode__Wrapper.setMsg(const val : Cardinal);
begin
TCMCancelMode(GetRecordPtr^).Msg := val;
end;
function __TCMCancelMode__Wrapper.getMsg : Cardinal;
begin
result := TCMCancelMode(GetRecordPtr^).Msg;
end;
procedure __TCMCancelMode__Wrapper.setUnused(const val : Integer);
begin
TCMCancelMode(GetRecordPtr^).Unused := val;
end;
function __TCMCancelMode__Wrapper.getUnused : Integer;
begin
result := TCMCancelMode(GetRecordPtr^).Unused;
end;
procedure __TCMCancelMode__Wrapper.setSender(const val : TControl);
begin
TCMCancelMode(GetRecordPtr^).Sender := val;
end;
function __TCMCancelMode__Wrapper.getSender : TControl;
begin
result := TCMCancelMode(GetRecordPtr^).Sender;
end;
procedure __TCMCancelMode__Wrapper.setResult(const val : Longint);
begin
TCMCancelMode(GetRecordPtr^).Result := val;
end;
function __TCMCancelMode__Wrapper.getResult : Longint;
begin
result := TCMCancelMode(GetRecordPtr^).Result;
end;
function __TCMChanged__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCMChanged__Wrapper.setMsg(const val : Cardinal);
begin
TCMChanged(GetRecordPtr^).Msg := val;
end;
function __TCMChanged__Wrapper.getMsg : Cardinal;
begin
result := TCMChanged(GetRecordPtr^).Msg;
end;
procedure __TCMChanged__Wrapper.setUnused(const val : Longint);
begin
TCMChanged(GetRecordPtr^).Unused := val;
end;
function __TCMChanged__Wrapper.getUnused : Longint;
begin
result := TCMChanged(GetRecordPtr^).Unused;
end;
procedure __TCMChanged__Wrapper.setChild(const val : TControl);
begin
TCMChanged(GetRecordPtr^).Child := val;
end;
function __TCMChanged__Wrapper.getChild : TControl;
begin
result := TCMChanged(GetRecordPtr^).Child;
end;
procedure __TCMChanged__Wrapper.setResult(const val : Longint);
begin
TCMChanged(GetRecordPtr^).Result := val;
end;
function __TCMChanged__Wrapper.getResult : Longint;
begin
result := TCMChanged(GetRecordPtr^).Result;
end;
function __TCMChildKey__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCMChildKey__Wrapper.setMsg(const val : Cardinal);
begin
TCMChildKey(GetRecordPtr^).Msg := val;
end;
function __TCMChildKey__Wrapper.getMsg : Cardinal;
begin
result := TCMChildKey(GetRecordPtr^).Msg;
end;
procedure __TCMChildKey__Wrapper.setCharCode(const val : Word);
begin
TCMChildKey(GetRecordPtr^).CharCode := val;
end;
function __TCMChildKey__Wrapper.getCharCode : Word;
begin
result := TCMChildKey(GetRecordPtr^).CharCode;
end;
procedure __TCMChildKey__Wrapper.setUnused(const val : Word);
begin
//TCMChildKey(GetRecordPtr^).Unused := val;
end;
function __TCMChildKey__Wrapper.getUnused : Word;
begin
//result := TCMChildKey(GetRecordPtr^).Unused;
end;
procedure __TCMChildKey__Wrapper.setSender(const val : TWinControl);
begin
TCMChildKey(GetRecordPtr^).Sender := val;
end;
function __TCMChildKey__Wrapper.getSender : TWinControl;
begin
result := TCMChildKey(GetRecordPtr^).Sender;
end;
procedure __TCMChildKey__Wrapper.setResult(const val : Longint);
begin
TCMChildKey(GetRecordPtr^).Result := val;
end;
function __TCMChildKey__Wrapper.getResult : Longint;
begin
result := TCMChildKey(GetRecordPtr^).Result;
end;
function __TCMControlChange__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCMControlChange__Wrapper.setMsg(const val : Cardinal);
begin
TCMControlChange(GetRecordPtr^).Msg := val;
end;
function __TCMControlChange__Wrapper.getMsg : Cardinal;
begin
result := TCMControlChange(GetRecordPtr^).Msg;
end;
procedure __TCMControlChange__Wrapper.setControl(const val : TControl);
begin
TCMControlChange(GetRecordPtr^).Control := val;
end;
function __TCMControlChange__Wrapper.getControl : TControl;
begin
result := TCMControlChange(GetRecordPtr^).Control;
end;
procedure __TCMControlChange__Wrapper.setInserting(const val : LongBool);
begin
TCMControlChange(GetRecordPtr^).Inserting := val;
end;
function __TCMControlChange__Wrapper.getInserting : LongBool;
begin
result := TCMControlChange(GetRecordPtr^).Inserting;
end;
procedure __TCMControlChange__Wrapper.setResult(const val : Longint);
begin
TCMControlChange(GetRecordPtr^).Result := val;
end;
function __TCMControlChange__Wrapper.getResult : Longint;
begin
result := TCMControlChange(GetRecordPtr^).Result;
end;
function __TCMControlListChange__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCMControlListChange__Wrapper.setMsg(const val : Cardinal);
begin
TCMControlListChange(GetRecordPtr^).Msg := val;
end;
function __TCMControlListChange__Wrapper.getMsg : Cardinal;
begin
result := TCMControlListChange(GetRecordPtr^).Msg;
end;
procedure __TCMControlListChange__Wrapper.setControl(const val : TControl);
begin
TCMControlListChange(GetRecordPtr^).Control := val;
end;
function __TCMControlListChange__Wrapper.getControl : TControl;
begin
result := TCMControlListChange(GetRecordPtr^).Control;
end;
procedure __TCMControlListChange__Wrapper.setInserting(const val : LongBool);
begin
TCMControlListChange(GetRecordPtr^).Inserting := val;
end;
function __TCMControlListChange__Wrapper.getInserting : LongBool;
begin
result := TCMControlListChange(GetRecordPtr^).Inserting;
end;
procedure __TCMControlListChange__Wrapper.setResult(const val : Longint);
begin
TCMControlListChange(GetRecordPtr^).Result := val;
end;
function __TCMControlListChange__Wrapper.getResult : Longint;
begin
result := TCMControlListChange(GetRecordPtr^).Result;
end;
function __TCMControlListChanging__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCMControlListChanging__Wrapper.setMsg(const val : Cardinal);
begin
TCMControlListChanging(GetRecordPtr^).Msg := val;
end;
function __TCMControlListChanging__Wrapper.getMsg : Cardinal;
begin
result := TCMControlListChanging(GetRecordPtr^).Msg;
end;
procedure __TCMControlListChanging__Wrapper.setInserting(const val : LongBool);
begin
TCMControlListChanging(GetRecordPtr^).Inserting := val;
end;
function __TCMControlListChanging__Wrapper.getInserting : LongBool;
begin
result := TCMControlListChanging(GetRecordPtr^).Inserting;
end;
procedure __TCMControlListChanging__Wrapper.setResult(const val : Longint);
begin
TCMControlListChanging(GetRecordPtr^).Result := val;
end;
function __TCMControlListChanging__Wrapper.getResult : Longint;
begin
result := TCMControlListChanging(GetRecordPtr^).Result;
end;
function __TCMCreatePopup__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCMCreatePopup__Wrapper.setMsg(const val : Cardinal);
begin
TCMCreatePopup(GetRecordPtr^).Msg := val;
end;
function __TCMCreatePopup__Wrapper.getMsg : Cardinal;
begin
result := TCMCreatePopup(GetRecordPtr^).Msg;
end;
procedure __TCMCreatePopup__Wrapper.setPopupID(const val : Integer);
begin
TCMCreatePopup(GetRecordPtr^).PopupID := val;
end;
function __TCMCreatePopup__Wrapper.getPopupID : Integer;
begin
result := TCMCreatePopup(GetRecordPtr^).PopupID;
end;
procedure __TCMCreatePopup__Wrapper.setResult(const val : Integer);
begin
TCMCreatePopup(GetRecordPtr^).Result := val;
end;
function __TCMCreatePopup__Wrapper.getResult : Integer;
begin
result := TCMCreatePopup(GetRecordPtr^).Result;
end;
function __TCMDockClient__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCMDockClient__Wrapper.setMsg(const val : Cardinal);
begin
TCMDockClient(GetRecordPtr^).Msg := val;
end;
function __TCMDockClient__Wrapper.getMsg : Cardinal;
begin
result := TCMDockClient(GetRecordPtr^).Msg;
end;
procedure __TCMDockClient__Wrapper.setDockSource(const val : TDragDockObject);
begin
TCMDockClient(GetRecordPtr^).DockSource := val;
end;
function __TCMDockClient__Wrapper.getDockSource : TDragDockObject;
begin
result := TCMDockClient(GetRecordPtr^).DockSource;
end;
procedure __TCMDockClient__Wrapper.setResult(const val : Integer);
begin
TCMDockClient(GetRecordPtr^).Result := val;
end;
function __TCMDockClient__Wrapper.getResult : Integer;
begin
result := TCMDockClient(GetRecordPtr^).Result;
end;
function __TCMDockNotification__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCMDockNotification__Wrapper.setMsg(const val : Cardinal);
begin
TCMDockNotification(GetRecordPtr^).Msg := val;
end;
function __TCMDockNotification__Wrapper.getMsg : Cardinal;
begin
result := TCMDockNotification(GetRecordPtr^).Msg;
end;
procedure __TCMDockNotification__Wrapper.setClient(const val : TControl);
begin
TCMDockNotification(GetRecordPtr^).Client := val;
end;
function __TCMDockNotification__Wrapper.getClient : TControl;
begin
result := TCMDockNotification(GetRecordPtr^).Client;
end;
procedure __TCMDockNotification__Wrapper.setResult(const val : Integer);
begin
TCMDockNotification(GetRecordPtr^).Result := val;
end;
function __TCMDockNotification__Wrapper.getResult : Integer;
begin
result := TCMDockNotification(GetRecordPtr^).Result;
end;
function __TCMDrag__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCMDrag__Wrapper.setMsg(const val : Cardinal);
begin
TCMDrag(GetRecordPtr^).Msg := val;
end;
function __TCMDrag__Wrapper.getMsg : Cardinal;
begin
result := TCMDrag(GetRecordPtr^).Msg;
end;
procedure __TCMDrag__Wrapper.setDragMessage(const val : TDragMessage);
begin
TCMDrag(GetRecordPtr^).DragMessage := val;
end;
function __TCMDrag__Wrapper.getDragMessage : TDragMessage;
begin
result := TCMDrag(GetRecordPtr^).DragMessage;
end;
procedure __TCMDrag__Wrapper.setReserved1(const val : Byte);
begin
//TCMDrag(GetRecordPtr^).Reserved1 := val;
end;
function __TCMDrag__Wrapper.getReserved1 : Byte;
begin
//result := TCMDrag(GetRecordPtr^).Reserved1;
end;
procedure __TCMDrag__Wrapper.setReserved2(const val : Word);
begin
//TCMDrag(GetRecordPtr^).Reserved2 := val;
end;
function __TCMDrag__Wrapper.getReserved2 : Word;
begin
//result := TCMDrag(GetRecordPtr^).Reserved2;
end;
procedure __TCMDrag__Wrapper.setResult(const val : Longint);
begin
TCMDrag(GetRecordPtr^).Result := val;
end;
function __TCMDrag__Wrapper.getResult : Longint;
begin
result := TCMDrag(GetRecordPtr^).Result;
end;
function __TCMFloat__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCMFloat__Wrapper.setMsg(const val : Cardinal);
begin
TCMFloat(GetRecordPtr^).Msg := val;
end;
function __TCMFloat__Wrapper.getMsg : Cardinal;
begin
result := TCMFloat(GetRecordPtr^).Msg;
end;
procedure __TCMFloat__Wrapper.setReserved(const val : Integer);
begin
TCMFloat(GetRecordPtr^).Reserved := val;
end;
function __TCMFloat__Wrapper.getReserved : Integer;
begin
result := TCMFloat(GetRecordPtr^).Reserved;
end;
procedure __TCMFloat__Wrapper.setDockSource(const val : TDragDockObject);
begin
TCMFloat(GetRecordPtr^).DockSource := val;
end;
function __TCMFloat__Wrapper.getDockSource : TDragDockObject;
begin
result := TCMFloat(GetRecordPtr^).DockSource;
end;
procedure __TCMFloat__Wrapper.setResult(const val : Integer);
begin
TCMFloat(GetRecordPtr^).Result := val;
end;
function __TCMFloat__Wrapper.getResult : Integer;
begin
result := TCMFloat(GetRecordPtr^).Result;
end;
function __TCMFocusChanged__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCMFocusChanged__Wrapper.setMsg(const val : Cardinal);
begin
TCMFocusChanged(GetRecordPtr^).Msg := val;
end;
function __TCMFocusChanged__Wrapper.getMsg : Cardinal;
begin
result := TCMFocusChanged(GetRecordPtr^).Msg;
end;
procedure __TCMFocusChanged__Wrapper.setUnused(const val : Integer);
begin
TCMFocusChanged(GetRecordPtr^).Unused := val;
end;
function __TCMFocusChanged__Wrapper.getUnused : Integer;
begin
result := TCMFocusChanged(GetRecordPtr^).Unused;
end;
procedure __TCMFocusChanged__Wrapper.setSender(const val : TWinControl);
begin
TCMFocusChanged(GetRecordPtr^).Sender := val;
end;
function __TCMFocusChanged__Wrapper.getSender : TWinControl;
begin
result := TCMFocusChanged(GetRecordPtr^).Sender;
end;
procedure __TCMFocusChanged__Wrapper.setResult(const val : Longint);
begin
TCMFocusChanged(GetRecordPtr^).Result := val;
end;
function __TCMFocusChanged__Wrapper.getResult : Longint;
begin
result := TCMFocusChanged(GetRecordPtr^).Result;
end;
function __TCMMouseActivate__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCMMouseActivate__Wrapper.setMsg(const val : Cardinal);
begin
TCMMouseActivate(GetRecordPtr^).Msg := val;
end;
function __TCMMouseActivate__Wrapper.getMsg : Cardinal;
begin
result := TCMMouseActivate(GetRecordPtr^).Msg;
end;
procedure __TCMMouseActivate__Wrapper.setReserved(const val : Integer);
begin
TCMMouseActivate(GetRecordPtr^).Reserved := val;
end;
function __TCMMouseActivate__Wrapper.getReserved : Integer;
begin
result := TCMMouseActivate(GetRecordPtr^).Reserved;
end;
procedure __TCMMouseActivate__Wrapper.setResult(const val : Integer);
begin
TCMMouseActivate(GetRecordPtr^).Result := val;
end;
function __TCMMouseActivate__Wrapper.getResult : Integer;
begin
result := TCMMouseActivate(GetRecordPtr^).Result;
end;
function __TCMMouseWheel__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCMMouseWheel__Wrapper.setMsg(const val : Cardinal);
begin
TCMMouseWheel(GetRecordPtr^).Msg := val;
end;
function __TCMMouseWheel__Wrapper.getMsg : Cardinal;
begin
result := TCMMouseWheel(GetRecordPtr^).Msg;
end;
procedure __TCMMouseWheel__Wrapper.setUnused(const val : Byte);
begin
//TCMMouseWheel(GetRecordPtr^).Unused := val;
end;
function __TCMMouseWheel__Wrapper.getUnused : Byte;
begin
//result := TCMMouseWheel(GetRecordPtr^).Unused;
end;
procedure __TCMMouseWheel__Wrapper.setWheelDelta(const val : SmallInt);
begin
TCMMouseWheel(GetRecordPtr^).WheelDelta := val;
end;
function __TCMMouseWheel__Wrapper.getWheelDelta : SmallInt;
begin
result := TCMMouseWheel(GetRecordPtr^).WheelDelta;
end;
procedure __TCMMouseWheel__Wrapper.setXPos(const val : SmallInt);
begin
TCMMouseWheel(GetRecordPtr^).XPos := val;
end;
function __TCMMouseWheel__Wrapper.getXPos : SmallInt;
begin
result := TCMMouseWheel(GetRecordPtr^).XPos;
end;
procedure __TCMMouseWheel__Wrapper.setYPos(const val : SmallInt);
begin
TCMMouseWheel(GetRecordPtr^).YPos := val;
end;
function __TCMMouseWheel__Wrapper.getYPos : SmallInt;
begin
result := TCMMouseWheel(GetRecordPtr^).YPos;
end;
procedure __TCMMouseWheel__Wrapper.setResult(const val : Longint);
begin
TCMMouseWheel(GetRecordPtr^).Result := val;
end;
function __TCMMouseWheel__Wrapper.getResult : Longint;
begin
result := TCMMouseWheel(GetRecordPtr^).Result;
end;
function __TCMPopupHWndDestroy__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCMPopupHWndDestroy__Wrapper.setMsg(const val : Cardinal);
begin
TCMPopupHWndDestroy(GetRecordPtr^).Msg := val;
end;
function __TCMPopupHWndDestroy__Wrapper.getMsg : Cardinal;
begin
result := TCMPopupHWndDestroy(GetRecordPtr^).Msg;
end;
procedure __TCMPopupHWndDestroy__Wrapper.setResult(const val : Integer);
begin
TCMPopupHWndDestroy(GetRecordPtr^).Result := val;
end;
function __TCMPopupHWndDestroy__Wrapper.getResult : Integer;
begin
result := TCMPopupHWndDestroy(GetRecordPtr^).Result;
end;
function __TCMUnDockClient__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCMUnDockClient__Wrapper.setMsg(const val : Cardinal);
begin
TCMUnDockClient(GetRecordPtr^).Msg := val;
end;
function __TCMUnDockClient__Wrapper.getMsg : Cardinal;
begin
result := TCMUnDockClient(GetRecordPtr^).Msg;
end;
procedure __TCMUnDockClient__Wrapper.setNewTarget(const val : TControl);
begin
TCMUnDockClient(GetRecordPtr^).NewTarget := val;
end;
function __TCMUnDockClient__Wrapper.getNewTarget : TControl;
begin
result := TCMUnDockClient(GetRecordPtr^).NewTarget;
end;
procedure __TCMUnDockClient__Wrapper.setClient(const val : TControl);
begin
TCMUnDockClient(GetRecordPtr^).Client := val;
end;
function __TCMUnDockClient__Wrapper.getClient : TControl;
begin
result := TCMUnDockClient(GetRecordPtr^).Client;
end;
procedure __TCMUnDockClient__Wrapper.setResult(const val : Integer);
begin
TCMUnDockClient(GetRecordPtr^).Result := val;
end;
function __TCMUnDockClient__Wrapper.getResult : Integer;
begin
result := TCMUnDockClient(GetRecordPtr^).Result;
end;
function __TControlListItem__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TControlListItem__Wrapper.setControl(const val : TControl);
begin
TControlListItem(GetRecordPtr^).Control := val;
end;
function __TControlListItem__Wrapper.getControl : TControl;
begin
result := TControlListItem(GetRecordPtr^).Control;
end;
procedure __TControlListItem__Wrapper.setParent(const val : TWinControl);
begin
TControlListItem(GetRecordPtr^).Parent := val;
end;
function __TControlListItem__Wrapper.getParent : TWinControl;
begin
result := TControlListItem(GetRecordPtr^).Parent;
end;
function __TCreateParams__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCreateParams__Wrapper.setStyle(const val : DWORD);
begin
TCreateParams(GetRecordPtr^).Style := val;
end;
function __TCreateParams__Wrapper.getStyle : DWORD;
begin
result := TCreateParams(GetRecordPtr^).Style;
end;
procedure __TCreateParams__Wrapper.setExStyle(const val : DWORD);
begin
TCreateParams(GetRecordPtr^).ExStyle := val;
end;
function __TCreateParams__Wrapper.getExStyle : DWORD;
begin
result := TCreateParams(GetRecordPtr^).ExStyle;
end;
procedure __TCreateParams__Wrapper.setX(const val : Integer);
begin
TCreateParams(GetRecordPtr^).X := val;
end;
function __TCreateParams__Wrapper.getX : Integer;
begin
result := TCreateParams(GetRecordPtr^).X;
end;
procedure __TCreateParams__Wrapper.setY(const val : Integer);
begin
TCreateParams(GetRecordPtr^).Y := val;
end;
function __TCreateParams__Wrapper.getY : Integer;
begin
result := TCreateParams(GetRecordPtr^).Y;
end;
procedure __TCreateParams__Wrapper.setWidth(const val : Integer);
begin
TCreateParams(GetRecordPtr^).Width := val;
end;
function __TCreateParams__Wrapper.getWidth : Integer;
begin
result := TCreateParams(GetRecordPtr^).Width;
end;
procedure __TCreateParams__Wrapper.setHeight(const val : Integer);
begin
TCreateParams(GetRecordPtr^).Height := val;
end;
function __TCreateParams__Wrapper.getHeight : Integer;
begin
result := TCreateParams(GetRecordPtr^).Height;
end;
function __TDockNotifyRec__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDockNotifyRec__Wrapper.setClientMsg(const val : Cardinal);
begin
TDockNotifyRec(GetRecordPtr^).ClientMsg := val;
end;
function __TDockNotifyRec__Wrapper.getClientMsg : Cardinal;
begin
result := TDockNotifyRec(GetRecordPtr^).ClientMsg;
end;
procedure __TDockNotifyRec__Wrapper.setMsgWParam(const val : Integer);
begin
TDockNotifyRec(GetRecordPtr^).MsgWParam := val;
end;
function __TDockNotifyRec__Wrapper.getMsgWParam : Integer;
begin
result := TDockNotifyRec(GetRecordPtr^).MsgWParam;
end;
procedure __TDockNotifyRec__Wrapper.setMsgLParam(const val : Integer);
begin
TDockNotifyRec(GetRecordPtr^).MsgLParam := val;
end;
function __TDockNotifyRec__Wrapper.getMsgLParam : Integer;
begin
result := TDockNotifyRec(GetRecordPtr^).MsgLParam;
end;
function __TDragRec__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDragRec__Wrapper.setSource(const val : TDragObject);
begin
TDragRec(GetRecordPtr^).Source := val;
end;
function __TDragRec__Wrapper.getSource : TDragObject;
begin
result := TDragRec(GetRecordPtr^).Source;
end;
procedure __TDragRec__Wrapper.setDocking(const val : Boolean);
begin
TDragRec(GetRecordPtr^).Docking := val;
end;
function __TDragRec__Wrapper.getDocking : Boolean;
begin
result := TDragRec(GetRecordPtr^).Docking;
end;
function __TMouseActivateRec__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMouseActivateRec__Wrapper.setHitTest(const val : Integer);
begin
TMouseActivateRec(GetRecordPtr^).HitTest := val;
end;
function __TMouseActivateRec__Wrapper.getHitTest : Integer;
begin
result := TMouseActivateRec(GetRecordPtr^).HitTest;
end;
procedure __TMouseActivateRec__Wrapper.setButton(const val : TMouseButton);
begin
TMouseActivateRec(GetRecordPtr^).Button := val;
end;
function __TMouseActivateRec__Wrapper.getButton : TMouseButton;
begin
result := TMouseActivateRec(GetRecordPtr^).Button;
end;
function __TPopupFormInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPopupFormInfo__Wrapper.setPopupID(const val : Integer);
begin
TPopupFormInfo(GetRecordPtr^).PopupID := val;
end;
function __TPopupFormInfo__Wrapper.getPopupID : Integer;
begin
result := TPopupFormInfo(GetRecordPtr^).PopupID;
end;
procedure __TPopupFormInfo__Wrapper.setIsPopup(const val : Boolean);
begin
TPopupFormInfo(GetRecordPtr^).IsPopup := val;
end;
function __TPopupFormInfo__Wrapper.getIsPopup : Boolean;
begin
result := TPopupFormInfo(GetRecordPtr^).IsPopup;
end;
function _TAlignInfo_ : IDispatch;
begin
  result := __TAlignInfo__Wrapper.Create;
end;
function _TCMCancelMode_ : IDispatch;
begin
  result := __TCMCancelMode__Wrapper.Create;
end;
function _TCMChanged_ : IDispatch;
begin
  result := __TCMChanged__Wrapper.Create;
end;
function _TCMChildKey_ : IDispatch;
begin
  result := __TCMChildKey__Wrapper.Create;
end;
function _TCMControlChange_ : IDispatch;
begin
  result := __TCMControlChange__Wrapper.Create;
end;
function _TCMControlListChange_ : IDispatch;
begin
  result := __TCMControlListChange__Wrapper.Create;
end;
function _TCMControlListChanging_ : IDispatch;
begin
  result := __TCMControlListChanging__Wrapper.Create;
end;
function _TCMCreatePopup_ : IDispatch;
begin
  result := __TCMCreatePopup__Wrapper.Create;
end;
function _TCMDockClient_ : IDispatch;
begin
  result := __TCMDockClient__Wrapper.Create;
end;
function _TCMDockNotification_ : IDispatch;
begin
  result := __TCMDockNotification__Wrapper.Create;
end;
function _TCMDrag_ : IDispatch;
begin
  result := __TCMDrag__Wrapper.Create;
end;
function _TCMFloat_ : IDispatch;
begin
  result := __TCMFloat__Wrapper.Create;
end;
function _TCMFocusChanged_ : IDispatch;
begin
  result := __TCMFocusChanged__Wrapper.Create;
end;
function _TCMMouseActivate_ : IDispatch;
begin
  result := __TCMMouseActivate__Wrapper.Create;
end;
function _TCMMouseWheel_ : IDispatch;
begin
  result := __TCMMouseWheel__Wrapper.Create;
end;
function _TCMPopupHWndDestroy_ : IDispatch;
begin
  result := __TCMPopupHWndDestroy__Wrapper.Create;
end;
function _TCMUnDockClient_ : IDispatch;
begin
  result := __TCMUnDockClient__Wrapper.Create;
end;
function _TControlListItem_ : IDispatch;
begin
  result := __TControlListItem__Wrapper.Create;
end;
function _TCreateParams_ : IDispatch;
begin
  result := __TCreateParams__Wrapper.Create;
end;
function _TDockNotifyRec_ : IDispatch;
begin
  result := __TDockNotifyRec__Wrapper.Create;
end;
function _TDragRec_ : IDispatch;
begin
  result := __TDragRec__Wrapper.Create;
end;
function _TMouseActivateRec_ : IDispatch;
begin
  result := __TMouseActivateRec__Wrapper.Create;
end;
function _TPopupFormInfo_ : IDispatch;
begin
  result := __TPopupFormInfo__Wrapper.Create;
end;
function __TMsg__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMsg__Wrapper.setmessage(const val : UINT);
begin
TMsg(GetRecordPtr^).message := val;
end;
function __TMsg__Wrapper.getmessage : UINT;
begin
result := TMsg(GetRecordPtr^).message;
end;
procedure __TMsg__Wrapper.setWPARAM(const val : WPARAM);
begin
TMsg(GetRecordPtr^).WPARAM := val;
end;
function __TMsg__Wrapper.getWPARAM : WPARAM;
begin
result := TMsg(GetRecordPtr^).WPARAM;
end;
procedure __TMsg__Wrapper.setLPARAM(const val : LPARAM);
begin
TMsg(GetRecordPtr^).LPARAM := val;
end;
function __TMsg__Wrapper.getLPARAM : LPARAM;
begin
result := TMsg(GetRecordPtr^).LPARAM;
end;
procedure __TMsg__Wrapper.settime(const val : DWORD);
begin
TMsg(GetRecordPtr^).time := val;
end;
function __TMsg__Wrapper.gettime : DWORD;
begin
result := TMsg(GetRecordPtr^).time;
end;
function ____FindVCLWindow__Wrapper(const p0 : IDispatch): TWinControl;
var
__p0 : ^TPoint;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := FindVCLWindow(__p0^);
end;

function ____FindDragTarget__Wrapper(const p0 : IDispatch;
p1 : Boolean): TControl;
var
__p0 : ^TPoint;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := FindDragTarget(__p0^,p1);
end;

procedure __TControl__DoContextPopup__Wrapper(__Instance : TControl;
const p0 : IDispatch;
var p1 : Boolean);
var
__p0 : ^TPoint;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__TControl__(__Instance).DoContextPopup(__p0^,p1);
end;

procedure __TControl__DoDock__Wrapper(__Instance : TControl;
p0 : TWinControl;
const p1 : IDispatch);
var
__p1 : ^TRect;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
__TControl__(__Instance).DoDock(p0,__p1^);
end;

function __TControl__DoMouseWheel__Wrapper(__Instance : TControl;
p0 : TShiftState;
p1 : Integer;
const p2 : IDispatch): Boolean;
var
__p2 : ^TPoint;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := __TControl__(__Instance).DoMouseWheel(p0,p1,__p2^);
end;

function __TControl__DoMouseWheelDown__Wrapper(__Instance : TControl;
p0 : TShiftState;
const p1 : IDispatch): Boolean;
var
__p1 : ^TPoint;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := __TControl__(__Instance).DoMouseWheelDown(p0,__p1^);
end;

function __TControl__DoMouseWheelUp__Wrapper(__Instance : TControl;
p0 : TShiftState;
const p1 : IDispatch): Boolean;
var
__p1 : ^TPoint;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := __TControl__(__Instance).DoMouseWheelUp(p0,__p1^);
end;

function __TControl__GetClientOrigin__Wrapper(__Instance : TControl): IDispatch;
var
__result : TPoint;
__wrapper : __TPoint__Wrapper;
begin
__result := __TControl__(__Instance).GetClientOrigin;
__wrapper := __TPoint__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

function __TControl__GetClientRect__Wrapper(__Instance : TControl): IDispatch;
var
__result : TRect;
__wrapper : __TRect__Wrapper;
begin
__result := __TControl__(__Instance).GetClientRect;
__wrapper := __TRect__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

function __TControl__GetDockEdge__Wrapper(__Instance : TControl;
const p0 : IDispatch): TAlign;
var
__p0 : ^TPoint;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := __TControl__(__Instance).GetDockEdge(__p0^);
end;

procedure __TControl__BeginDrag__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
TControl(__Instance).BeginDrag(OleVariant(pargs^[0]));
end;
2:
begin
TControl(__Instance).BeginDrag(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function __TControl__ClientToScreen__Wrapper(__Instance : TControl;
const p0 : IDispatch): IDispatch;
var
__result : TPoint;
__wrapper : __TPoint__Wrapper;
__p0 : ^TPoint;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__result := TControl(__Instance).ClientToScreen(__p0^);
__wrapper := __TPoint__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

function __TControl__ClientToParent__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
var
__result : TPoint;
__wrapper : __TPoint__Wrapper;
__p0 : ^TPoint;
__i0 : IDispatch;
begin
__i0 := VarToInterface(OleVariant(pargs^[0]));
if __i0 = nil then exit;
__p0 := (__i0 as IDCRecordWrapper).GetRecordPtr;
case cArgs of
1:
begin
__result := TControl(__Instance).ClientToParent(__p0^);
__wrapper := __TPoint__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;
2:
begin
__result := TControl(__Instance).ClientToParent(__p0^,TWinControl(VarToObject(OleVariant(pargs^[0]))));
__wrapper := __TPoint__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;
end
end;

procedure __TControl__Dock__Wrapper(__Instance : TControl;
p0 : TWinControl;
const p1 : IDispatch);
var
__p1 : ^TRect;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
TControl(__Instance).Dock(p0,__p1^);
end;

function __TControl__ManualDock__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := TControl(__Instance).ManualDock(TWinControl(VarToObject(OleVariant(pargs^[0]))));
end;
2:
begin
result := TControl(__Instance).ManualDock(TWinControl(VarToObject(OleVariant(pargs^[1]))),TControl(VarToObject(OleVariant(pargs^[0]))));
end;
3:
begin
result := TControl(__Instance).ManualDock(TWinControl(VarToObject(OleVariant(pargs^[2]))),TControl(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
end;
end
end;

function __TControl__ManualFloat__Wrapper(__Instance : TControl;
const p0 : IDispatch): Boolean;
var
__p0 : ^TRect;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := TControl(__Instance).ManualFloat(__p0^);
end;

function __TControl__ScreenToClient__Wrapper(__Instance : TControl;
const p0 : IDispatch): IDispatch;
var
__result : TPoint;
__wrapper : __TPoint__Wrapper;
__p0 : ^TPoint;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__result := TControl(__Instance).ScreenToClient(__p0^);
__wrapper := __TPoint__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

function __TControl__ParentToClient__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
var
__result : TPoint;
__wrapper : __TPoint__Wrapper;
__p0 : ^TPoint;
__i0 : IDispatch;
begin
__i0 := VarToInterface(OleVariant(pargs^[0]));
if __i0 = nil then exit;
__p0 := (__i0 as IDCRecordWrapper).GetRecordPtr;
case cArgs of
1:
begin
__result := TControl(__Instance).ParentToClient(__p0^);
__wrapper := __TPoint__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;
2:
begin
__result := TControl(__Instance).ParentToClient(__p0^,TWinControl(VarToObject(OleVariant(pargs^[0]))));
__wrapper := __TPoint__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;
end
end;

procedure __TDockTree__AdjustDockRect__Wrapper(__Instance : TDockTree;
p0 : TControl;
const p1 : IDispatch);
var
__p1 : ^TRect;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
__TDockTree__(__Instance).AdjustDockRect(p0,__p1^);
end;

procedure __TDockTree__AdjustFrameRect__Wrapper(__Instance : TDockTree;
p0 : TControl;
const p1 : IDispatch);
var
__p1 : ^TRect;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
__TDockTree__(__Instance).AdjustFrameRect(p0,__p1^);
end;

function __TDockTree__HitTest__Wrapper(__Instance : TDockTree;
const p0 : IDispatch;
out p1 : Integer): TControl;
var
__p0 : ^TPoint;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := __TDockTree__(__Instance).HitTest(__p0^,p1);
end;

procedure __TDockTree__PaintDockFrame__Wrapper(__Instance : TDockTree;
p0 : TCanvas;
p1 : TControl;
const p2 : IDispatch);
var
__p2 : ^TRect;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
__TDockTree__(__Instance).PaintDockFrame(p0,p1,__p2^);
end;

procedure __TDockTree__PositionDockRect__Wrapper(__Instance : TDockTree;
p0 : TControl;
p1 : TControl;
p2 : TAlign;
const p3 : IDispatch);
var
__p3 : ^TRect;
__i3 : IDispatch;
begin
if p3 = nil then exit;
__p3 := (p3 as IDCRecordWrapper).GetRecordPtr;
__TDockTree__(__Instance).PositionDockRect(p0,p1,p2,__p3^);
end;

procedure __TDockTree__ShowHint__Wrapper(__Instance : TDockTree;
const p0 : IDispatch;
const p1 : IDispatch;
var p2 : string);
var
__p0 : ^TPoint;
__i0 : IDispatch;
__p1 : ^TRect;
__i1 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
__TDockTree__(__Instance).ShowHint(__p0^,__p1^,p2);
end;

function __TDockTree__ZoneCaptionHitTest__Wrapper(__Instance : TDockTree;
const p0 : TDockZone;
const p1 : IDispatch;
var p2 : Integer): Boolean;
var
__p1 : ^TPoint;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := __TDockTree__(__Instance).ZoneCaptionHitTest(p0,__p1^,p2);
end;

procedure __TDragDockObject__AdjustDockRect__Wrapper(__Instance : TDragDockObject;
const p0 : IDispatch);
var
__p0 : ^TRect;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__TDragDockObject__(__Instance).AdjustDockRect(__p0^);
end;

procedure __THintWindow__ActivateHint__Wrapper(__Instance : THintWindow;
const p0 : IDispatch;
const p1 : string);
var
__p0 : ^TRect;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
THintWindow(__Instance).ActivateHint(__p0^,p1);
end;

procedure __THintWindow__ActivateHintData__Wrapper(__Instance : THintWindow;
const p0 : IDispatch;
const p1 : string;
p2 : Pointer);
var
__p0 : ^TRect;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
THintWindow(__Instance).ActivateHintData(__p0^,p1,p2);
end;

function __THintWindow__CalcHintRect__Wrapper(__Instance : THintWindow;
p0 : Integer;
const p1 : string;
p2 : Pointer): IDispatch;
var
__result : TRect;
__wrapper : __TRect__Wrapper;
begin
__result := THintWindow(__Instance).CalcHintRect(p0,p1,p2);
__wrapper := __TRect__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

function __THintWindow__IsHintMsg__Wrapper(__Instance : THintWindow;
const p0 : IDispatch): Boolean;
var
__p0 : ^TMsg;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := THintWindow(__Instance).IsHintMsg(__p0^);
end;

procedure __TMargins__SetControlBounds__Wrapper(__Instance : TMargins;
p0 : Integer;
p1 : Integer;
p2 : Integer;
p3 : Integer;
p4 : Boolean);
begin
TMargins(__Instance).SetControlBounds(p0,p1,p2,p3,p4);
end;

procedure __TWinControl__AdjustClientRect__Wrapper(__Instance : TWinControl;
const p0 : IDispatch);
var
__p0 : ^TRect;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__TWinControl__(__Instance).AdjustClientRect(__p0^);
end;

procedure __TWinControl__AlignControls__Wrapper(__Instance : TWinControl;
p0 : TControl;
const p1 : IDispatch);
var
__p1 : ^TRect;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
__TWinControl__(__Instance).AlignControls(p0,__p1^);
end;

procedure __TWinControl__CreateParams__Wrapper(__Instance : TWinControl;
const p0 : IDispatch);
var
__p0 : ^TCreateParams;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__TWinControl__(__Instance).CreateParams(__p0^);
end;

procedure __TWinControl__CreateWindowHandle__Wrapper(__Instance : TWinControl;
const p0 : IDispatch);
var
__p0 : ^TCreateParams;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__TWinControl__(__Instance).CreateWindowHandle(__p0^);
end;

procedure __TWinControl__CustomAlignPosition__Wrapper(__Instance : TWinControl;
p0 : TControl;
var p1 : Integer;
var p2 : Integer;
var p3 : Integer;
var p4 : Integer;
const p5 : IDispatch;
const p6 : IDispatch);
var
__p5 : ^TRect;
__i5 : IDispatch;
__p6 : ^TAlignInfo;
__i6 : IDispatch;
begin
if p5 = nil then exit;
__p5 := (p5 as IDCRecordWrapper).GetRecordPtr;
if p6 = nil then exit;
__p6 := (p6 as IDCRecordWrapper).GetRecordPtr;
__TWinControl__(__Instance).CustomAlignPosition(p0,p1,p2,p3,p4,__p5^,__p6^);
end;

procedure __TWinControl__DoAddDockClient__Wrapper(__Instance : TWinControl;
p0 : TControl;
const p1 : IDispatch);
var
__p1 : ^TRect;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
__TWinControl__(__Instance).DoAddDockClient(p0,__p1^);
end;

function __TWinControl__GetControlExtents__Wrapper(__Instance : TWinControl): IDispatch;
var
__result : TRect;
__wrapper : __TRect__Wrapper;
begin
__result := __TWinControl__(__Instance).GetControlExtents;
__wrapper := __TRect__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

procedure __TWinControl__GetSiteInfo__Wrapper(__Instance : TWinControl;
p0 : TControl;
const p1 : IDispatch;
const p2 : IDispatch;
var p3 : Boolean);
var
__p1 : ^TRect;
__i1 : IDispatch;
__p2 : ^TPoint;
__i2 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
__TWinControl__(__Instance).GetSiteInfo(p0,__p1^,__p2^,p3);
end;

procedure __TWinControl__UpdateControlOriginalParentSize__Wrapper(__Instance : TWinControl;
p0 : TControl;
const p1 : IDispatch);
var
__p1 : ^TPoint;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
__TWinControl__(__Instance).UpdateControlOriginalParentSize(p0,__p1^);
end;

function __TWinControl__ControlAtPos__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
var
__p0 : ^TPoint;
__i0 : IDispatch;
begin
__i0 := VarToInterface(OleVariant(pargs^[0]));
if __i0 = nil then exit;
__p0 := (__i0 as IDCRecordWrapper).GetRecordPtr;
case cArgs of
2:
begin
result := VarFromObject(TWinControl(__Instance).ControlAtPos(__p0^,OleVariant(pargs^[0])));
end;
3:
begin
result := VarFromObject(TWinControl(__Instance).ControlAtPos(__p0^,OleVariant(pargs^[1]),OleVariant(pargs^[0])));
end;
4:
begin
result := VarFromObject(TWinControl(__Instance).ControlAtPos(__p0^,OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0])));
end;
end
end;

function __TWinControl__PreProcessMessage__Wrapper(__Instance : TWinControl;
const p0 : IDispatch): Boolean;
var
__p0 : ^TMsg;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := TWinControl(__Instance).PreProcessMessage(__p0^);
end;


type __TAlignInfo__Wrapper__ = class(__TAlignInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TAlignInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTAlignInfoToVariant(var R : TAlignInfo) : OleVariant;
var
__rw : __TAlignInfo__Wrapper__;
begin
__rw := __TAlignInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTAlignInfo(const V : OleVariant) : TAlignInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TAlignInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCMCancelMode__Wrapper__ = class(__TCMCancelMode__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCMCancelMode__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCMCancelModeToVariant(var R : TCMCancelMode) : OleVariant;
var
__rw : __TCMCancelMode__Wrapper__;
begin
__rw := __TCMCancelMode__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCMCancelMode(const V : OleVariant) : TCMCancelMode;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCMCancelMode((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCMChanged__Wrapper__ = class(__TCMChanged__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCMChanged__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCMChangedToVariant(var R : TCMChanged) : OleVariant;
var
__rw : __TCMChanged__Wrapper__;
begin
__rw := __TCMChanged__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCMChanged(const V : OleVariant) : TCMChanged;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCMChanged((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCMChildKey__Wrapper__ = class(__TCMChildKey__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCMChildKey__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCMChildKeyToVariant(var R : TCMChildKey) : OleVariant;
var
__rw : __TCMChildKey__Wrapper__;
begin
__rw := __TCMChildKey__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCMChildKey(const V : OleVariant) : TCMChildKey;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCMChildKey((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCMControlChange__Wrapper__ = class(__TCMControlChange__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCMControlChange__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCMControlChangeToVariant(var R : TCMControlChange) : OleVariant;
var
__rw : __TCMControlChange__Wrapper__;
begin
__rw := __TCMControlChange__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCMControlChange(const V : OleVariant) : TCMControlChange;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCMControlChange((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCMControlListChange__Wrapper__ = class(__TCMControlListChange__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCMControlListChange__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCMControlListChangeToVariant(var R : TCMControlListChange) : OleVariant;
var
__rw : __TCMControlListChange__Wrapper__;
begin
__rw := __TCMControlListChange__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCMControlListChange(const V : OleVariant) : TCMControlListChange;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCMControlListChange((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCMControlListChanging__Wrapper__ = class(__TCMControlListChanging__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCMControlListChanging__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCMControlListChangingToVariant(var R : TCMControlListChanging) : OleVariant;
var
__rw : __TCMControlListChanging__Wrapper__;
begin
__rw := __TCMControlListChanging__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCMControlListChanging(const V : OleVariant) : TCMControlListChanging;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCMControlListChanging((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCMCreatePopup__Wrapper__ = class(__TCMCreatePopup__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCMCreatePopup__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCMCreatePopupToVariant(var R : TCMCreatePopup) : OleVariant;
var
__rw : __TCMCreatePopup__Wrapper__;
begin
__rw := __TCMCreatePopup__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCMCreatePopup(const V : OleVariant) : TCMCreatePopup;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCMCreatePopup((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCMDockClient__Wrapper__ = class(__TCMDockClient__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCMDockClient__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCMDockClientToVariant(var R : TCMDockClient) : OleVariant;
var
__rw : __TCMDockClient__Wrapper__;
begin
__rw := __TCMDockClient__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCMDockClient(const V : OleVariant) : TCMDockClient;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCMDockClient((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCMDockNotification__Wrapper__ = class(__TCMDockNotification__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCMDockNotification__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCMDockNotificationToVariant(var R : TCMDockNotification) : OleVariant;
var
__rw : __TCMDockNotification__Wrapper__;
begin
__rw := __TCMDockNotification__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCMDockNotification(const V : OleVariant) : TCMDockNotification;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCMDockNotification((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCMDrag__Wrapper__ = class(__TCMDrag__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCMDrag__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCMDragToVariant(var R : TCMDrag) : OleVariant;
var
__rw : __TCMDrag__Wrapper__;
begin
__rw := __TCMDrag__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCMDrag(const V : OleVariant) : TCMDrag;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCMDrag((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCMFloat__Wrapper__ = class(__TCMFloat__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCMFloat__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCMFloatToVariant(var R : TCMFloat) : OleVariant;
var
__rw : __TCMFloat__Wrapper__;
begin
__rw := __TCMFloat__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCMFloat(const V : OleVariant) : TCMFloat;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCMFloat((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCMFocusChanged__Wrapper__ = class(__TCMFocusChanged__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCMFocusChanged__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCMFocusChangedToVariant(var R : TCMFocusChanged) : OleVariant;
var
__rw : __TCMFocusChanged__Wrapper__;
begin
__rw := __TCMFocusChanged__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCMFocusChanged(const V : OleVariant) : TCMFocusChanged;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCMFocusChanged((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCMMouseActivate__Wrapper__ = class(__TCMMouseActivate__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCMMouseActivate__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCMMouseActivateToVariant(var R : TCMMouseActivate) : OleVariant;
var
__rw : __TCMMouseActivate__Wrapper__;
begin
__rw := __TCMMouseActivate__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCMMouseActivate(const V : OleVariant) : TCMMouseActivate;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCMMouseActivate((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCMMouseWheel__Wrapper__ = class(__TCMMouseWheel__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCMMouseWheel__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCMMouseWheelToVariant(var R : TCMMouseWheel) : OleVariant;
var
__rw : __TCMMouseWheel__Wrapper__;
begin
__rw := __TCMMouseWheel__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCMMouseWheel(const V : OleVariant) : TCMMouseWheel;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCMMouseWheel((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCMPopupHWndDestroy__Wrapper__ = class(__TCMPopupHWndDestroy__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCMPopupHWndDestroy__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCMPopupHWndDestroyToVariant(var R : TCMPopupHWndDestroy) : OleVariant;
var
__rw : __TCMPopupHWndDestroy__Wrapper__;
begin
__rw := __TCMPopupHWndDestroy__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCMPopupHWndDestroy(const V : OleVariant) : TCMPopupHWndDestroy;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCMPopupHWndDestroy((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCMUnDockClient__Wrapper__ = class(__TCMUnDockClient__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCMUnDockClient__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCMUnDockClientToVariant(var R : TCMUnDockClient) : OleVariant;
var
__rw : __TCMUnDockClient__Wrapper__;
begin
__rw := __TCMUnDockClient__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCMUnDockClient(const V : OleVariant) : TCMUnDockClient;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCMUnDockClient((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TControlListItem__Wrapper__ = class(__TControlListItem__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TControlListItem__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTControlListItemToVariant(var R : TControlListItem) : OleVariant;
var
__rw : __TControlListItem__Wrapper__;
begin
__rw := __TControlListItem__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTControlListItem(const V : OleVariant) : TControlListItem;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TControlListItem((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCreateParams__Wrapper__ = class(__TCreateParams__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCreateParams__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCreateParamsToVariant(var R : TCreateParams) : OleVariant;
var
__rw : __TCreateParams__Wrapper__;
begin
__rw := __TCreateParams__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCreateParams(const V : OleVariant) : TCreateParams;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCreateParams((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDockNotifyRec__Wrapper__ = class(__TDockNotifyRec__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDockNotifyRec__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDockNotifyRecToVariant(var R : TDockNotifyRec) : OleVariant;
var
__rw : __TDockNotifyRec__Wrapper__;
begin
__rw := __TDockNotifyRec__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDockNotifyRec(const V : OleVariant) : TDockNotifyRec;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDockNotifyRec((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDragRec__Wrapper__ = class(__TDragRec__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDragRec__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDragRecToVariant(var R : TDragRec) : OleVariant;
var
__rw : __TDragRec__Wrapper__;
begin
__rw := __TDragRec__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDragRec(const V : OleVariant) : TDragRec;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDragRec((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMouseActivateRec__Wrapper__ = class(__TMouseActivateRec__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMouseActivateRec__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMouseActivateRecToVariant(var R : TMouseActivateRec) : OleVariant;
var
__rw : __TMouseActivateRec__Wrapper__;
begin
__rw := __TMouseActivateRec__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMouseActivateRec(const V : OleVariant) : TMouseActivateRec;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMouseActivateRec((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMsg__Wrapper__ = class(__TMsg__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMsg__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMsgToVariant(var R : TMsg) : OleVariant;
var
__rw : __TMsg__Wrapper__;
begin
__rw := __TMsg__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMsg(const V : OleVariant) : TMsg;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMsg((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPoint__Wrapper__ = class(__TPoint__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPoint__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
var
__rw : __TPoint__Wrapper__;
begin
__rw := __TPoint__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPoint((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPopupFormInfo__Wrapper__ = class(__TPopupFormInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPopupFormInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPopupFormInfoToVariant(var R : TPopupFormInfo) : OleVariant;
var
__rw : __TPopupFormInfo__Wrapper__;
begin
__rw := __TPopupFormInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPopupFormInfo(const V : OleVariant) : TPopupFormInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPopupFormInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRect__Wrapper__ = class(__TRect__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRect__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
var
__rw : __TRect__Wrapper__;
begin
__rw := __TRect__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRect((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTBaseDragControlObject__Control(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TBaseDragControlObject(Instance).Control);
end;

procedure __DC__SetTBaseDragControlObject__Control(Instance : TObject; Params : PVariantArgList);
begin
TBaseDragControlObject(Instance).Control:=TControl(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTControl__Enabled(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TControl(Instance).Enabled;
end;

procedure __DC__SetTControl__Enabled(Instance : TObject; Params : PVariantArgList);
begin
TControl(Instance).Enabled:=OleVariant(Params^[0]);
end;

function __DC__GetTControl__Action(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TControl(Instance).Action);
end;

procedure __DC__SetTControl__Action(Instance : TObject; Params : PVariantArgList);
begin
TControl(Instance).Action:=TBasicAction(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTControl__Align(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TControl(Instance).Align;
end;

procedure __DC__SetTControl__Align(Instance : TObject; Params : PVariantArgList);
begin
TControl(Instance).Align:=OleVariant(Params^[0]);
end;

function __DC__GetTControl__Anchors(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TAnchors;
begin
tmp := TControl(Instance).Anchors;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTControl__Anchors(Instance : TObject; Params : PVariantArgList);
var
  tmp : TAnchors;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TControl(Instance).Anchors:=tmp;
end;

function __DC__GetTControl__BiDiMode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TControl(Instance).BiDiMode;
end;

procedure __DC__SetTControl__BiDiMode(Instance : TObject; Params : PVariantArgList);
begin
TControl(Instance).BiDiMode:=OleVariant(Params^[0]);
end;

function __DC__GetTControl__BoundsRect(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TRect__Wrapper;
begin
__wrapper := __TRect__Wrapper.Create;
__wrapper.fR := TControl(Instance).BoundsRect;
result := IUnknown(__wrapper) as IDispatch;
end;

procedure __DC__SetTControl__BoundsRect(Instance : TObject; Params : PVariantArgList);
var
__idisp:IDispatch;
__iwrapper:IDCRecordWrapper;
begin
__idisp:=DCVarToInterface(OleVariant(Params^[0]));
if __idisp=nil then exit;
__idisp.QueryInterface(IDCRecordWrapper, __iwrapper);
TControl(Instance).BoundsRect:=TRect(__iwrapper.GetRecordPtr^);
end;

function __DC__GetTControl__ClientHeight(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TControl(Instance).ClientHeight;
end;

procedure __DC__SetTControl__ClientHeight(Instance : TObject; Params : PVariantArgList);
begin
TControl(Instance).ClientHeight:=OleVariant(Params^[0]);
end;

function __DC__GetTControl__ClientOrigin(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TPoint__Wrapper;
begin
__wrapper := __TPoint__Wrapper.Create;
__wrapper.fR := TControl(Instance).ClientOrigin;
result := IUnknown(__wrapper) as IDispatch;
end;

function __DC__GetTControl__ClientRect(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TRect__Wrapper;
begin
__wrapper := __TRect__Wrapper.Create;
__wrapper.fR := TControl(Instance).ClientRect;
result := IUnknown(__wrapper) as IDispatch;
end;

function __DC__GetTControl__ClientWidth(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TControl(Instance).ClientWidth;
end;

procedure __DC__SetTControl__ClientWidth(Instance : TObject; Params : PVariantArgList);
begin
TControl(Instance).ClientWidth:=OleVariant(Params^[0]);
end;

function __DC__GetTControl__Constraints(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TControl(Instance).Constraints);
end;

procedure __DC__SetTControl__Constraints(Instance : TObject; Params : PVariantArgList);
begin
TControl(Instance).Constraints:=TSizeConstraints(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTControl__ControlState(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TControlState;
begin
tmp := TControl(Instance).ControlState;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTControl__ControlState(Instance : TObject; Params : PVariantArgList);
var
  tmp : TControlState;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TControl(Instance).ControlState:=tmp;
end;

function __DC__GetTControl__ControlStyle(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TControlStyle;
begin
tmp := TControl(Instance).ControlStyle;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTControl__ControlStyle(Instance : TObject; Params : PVariantArgList);
var
  tmp : TControlStyle;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TControl(Instance).ControlStyle:=tmp;
end;

function __DC__GetTControl__DockOrientation(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TControl(Instance).DockOrientation;
end;

procedure __DC__SetTControl__DockOrientation(Instance : TObject; Params : PVariantArgList);
begin
TControl(Instance).DockOrientation:=OleVariant(Params^[0]);
end;

function __DC__GetTControl__ExplicitLeft(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TControl(Instance).ExplicitLeft;
end;

function __DC__GetTControl__ExplicitTop(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TControl(Instance).ExplicitTop;
end;

function __DC__GetTControl__ExplicitWidth(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TControl(Instance).ExplicitWidth;
end;

function __DC__GetTControl__ExplicitHeight(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TControl(Instance).ExplicitHeight;
end;

function __DC__GetTControl__Floating(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TControl(Instance).Floating;
end;

function __DC__GetTControl__HostDockSite(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TControl(Instance).HostDockSite);
end;

procedure __DC__SetTControl__HostDockSite(Instance : TObject; Params : PVariantArgList);
begin
TControl(Instance).HostDockSite:=TWinControl(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTControl__LRDockWidth(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TControl(Instance).LRDockWidth;
end;

procedure __DC__SetTControl__LRDockWidth(Instance : TObject; Params : PVariantArgList);
begin
TControl(Instance).LRDockWidth:=OleVariant(Params^[0]);
end;

function __DC__GetTControl__Parent(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TControl(Instance).Parent);
end;

procedure __DC__SetTControl__Parent(Instance : TObject; Params : PVariantArgList);
begin
TControl(Instance).Parent:=TWinControl(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTControl__ShowHint(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TControl(Instance).ShowHint;
end;

procedure __DC__SetTControl__ShowHint(Instance : TObject; Params : PVariantArgList);
begin
TControl(Instance).ShowHint:=OleVariant(Params^[0]);
end;

function __DC__GetTControl__TBDockHeight(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TControl(Instance).TBDockHeight;
end;

procedure __DC__SetTControl__TBDockHeight(Instance : TObject; Params : PVariantArgList);
begin
TControl(Instance).TBDockHeight:=OleVariant(Params^[0]);
end;

function __DC__GetTControl__UndockHeight(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TControl(Instance).UndockHeight;
end;

procedure __DC__SetTControl__UndockHeight(Instance : TObject; Params : PVariantArgList);
begin
TControl(Instance).UndockHeight:=OleVariant(Params^[0]);
end;

function __DC__GetTControl__UndockWidth(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TControl(Instance).UndockWidth;
end;

procedure __DC__SetTControl__UndockWidth(Instance : TObject; Params : PVariantArgList);
begin
TControl(Instance).UndockWidth:=OleVariant(Params^[0]);
end;

function __DC__GetTControl__Visible(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TControl(Instance).Visible;
end;

procedure __DC__SetTControl__Visible(Instance : TObject; Params : PVariantArgList);
begin
TControl(Instance).Visible:=OleVariant(Params^[0]);
end;

function __DC__GetTControlCanvas__Control(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TControlCanvas(Instance).Control);
end;

procedure __DC__SetTControlCanvas__Control(Instance : TObject; Params : PVariantArgList);
begin
TControlCanvas(Instance).Control:=TControl(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomControlAction__DropdownMenu(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomControlAction(Instance).DropdownMenu);
end;

procedure __DC__SetTCustomControlAction__DropdownMenu(Instance : TObject; Params : PVariantArgList);
begin
TCustomControlAction(Instance).DropdownMenu:=TPopupMenu(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomControlAction__EnableDropdown(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomControlAction(Instance).EnableDropdown;
end;

procedure __DC__SetTCustomControlAction__EnableDropdown(Instance : TObject; Params : PVariantArgList);
begin
TCustomControlAction(Instance).EnableDropdown:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomControlAction__PopupMenu(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomControlAction(Instance).PopupMenu);
end;

procedure __DC__SetTCustomControlAction__PopupMenu(Instance : TObject; Params : PVariantArgList);
begin
TCustomControlAction(Instance).PopupMenu:=TPopupMenu(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomListControl__ItemIndex(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomListControl(Instance).ItemIndex;
end;

procedure __DC__SetTCustomListControl__ItemIndex(Instance : TObject; Params : PVariantArgList);
begin
TCustomListControl(Instance).ItemIndex:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomMultiSelectListControl__MultiSelect(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomMultiSelectListControl(Instance).MultiSelect;
end;

procedure __DC__SetTCustomMultiSelectListControl__MultiSelect(Instance : TObject; Params : PVariantArgList);
begin
TCustomMultiSelectListControl(Instance).MultiSelect:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomMultiSelectListControl__SelCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomMultiSelectListControl(Instance).SelCount;
end;

function __DC__GetTCustomTransparentControl__InterceptMouse(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomTransparentControl(Instance).InterceptMouse;
end;

procedure __DC__SetTCustomTransparentControl__InterceptMouse(Instance : TObject; Params : PVariantArgList);
begin
TCustomTransparentControl(Instance).InterceptMouse:=OleVariant(Params^[0]);
end;

function __DC__GetTDockZone__ChildCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDockZone(Instance).ChildCount;
end;

function __DC__GetTDockZone__ChildControl(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDockZone(Instance).ChildControl);
end;

function __DC__GetTDockZone__LimitBegin(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDockZone(Instance).LimitBegin;
end;

function __DC__GetTDockZone__LimitSize(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDockZone(Instance).LimitSize;
end;

function __DC__GetTDockZone__Visible(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDockZone(Instance).Visible;
end;

function __DC__GetTDockZone__VisibleChildCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDockZone(Instance).VisibleChildCount;
end;

function __DC__GetTDockZone__ZoneLimit(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDockZone(Instance).ZoneLimit;
end;

procedure __DC__SetTDockZone__ZoneLimit(Instance : TObject; Params : PVariantArgList);
begin
TDockZone(Instance).ZoneLimit:=OleVariant(Params^[0]);
end;

function __DC__GetTDragDockObject__Brush(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDragDockObject(Instance).Brush);
end;

procedure __DC__SetTDragDockObject__Brush(Instance : TObject; Params : PVariantArgList);
begin
TDragDockObject(Instance).Brush:=TBrush(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDragDockObject__DockRect(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TRect__Wrapper;
begin
__wrapper := __TRect__Wrapper.Create;
__wrapper.fR := TDragDockObject(Instance).DockRect;
result := IUnknown(__wrapper) as IDispatch;
end;

procedure __DC__SetTDragDockObject__DockRect(Instance : TObject; Params : PVariantArgList);
var
__idisp:IDispatch;
__iwrapper:IDCRecordWrapper;
begin
__idisp:=DCVarToInterface(OleVariant(Params^[0]));
if __idisp=nil then exit;
__idisp.QueryInterface(IDCRecordWrapper, __iwrapper);
TDragDockObject(Instance).DockRect:=TRect(__iwrapper.GetRecordPtr^);
end;

function __DC__GetTDragDockObject__DropAlign(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDragDockObject(Instance).DropAlign;
end;

function __DC__GetTDragDockObject__DropOnControl(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDragDockObject(Instance).DropOnControl);
end;

function __DC__GetTDragDockObject__EraseDockRect(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TRect__Wrapper;
begin
__wrapper := __TRect__Wrapper.Create;
__wrapper.fR := TDragDockObject(Instance).EraseDockRect;
result := IUnknown(__wrapper) as IDispatch;
end;

procedure __DC__SetTDragDockObject__EraseDockRect(Instance : TObject; Params : PVariantArgList);
var
__idisp:IDispatch;
__iwrapper:IDCRecordWrapper;
begin
__idisp:=DCVarToInterface(OleVariant(Params^[0]));
if __idisp=nil then exit;
__idisp.QueryInterface(IDCRecordWrapper, __iwrapper);
TDragDockObject(Instance).EraseDockRect:=TRect(__iwrapper.GetRecordPtr^);
end;

function __DC__GetTDragDockObject__EraseWhenMoving(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDragDockObject(Instance).EraseWhenMoving;
end;

function __DC__GetTDragDockObject__Floating(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDragDockObject(Instance).Floating;
end;

procedure __DC__SetTDragDockObject__Floating(Instance : TObject; Params : PVariantArgList);
begin
TDragDockObject(Instance).Floating:=OleVariant(Params^[0]);
end;

function __DC__GetTDragDockObject__FrameWidth(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDragDockObject(Instance).FrameWidth;
end;

function __DC__GetTDragImageList__DragCursor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDragImageList(Instance).DragCursor;
end;

procedure __DC__SetTDragImageList__DragCursor(Instance : TObject; Params : PVariantArgList);
begin
TDragImageList(Instance).DragCursor:=OleVariant(Params^[0]);
end;

function __DC__GetTDragImageList__DragHotspot(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TPoint__Wrapper;
begin
__wrapper := __TPoint__Wrapper.Create;
__wrapper.fR := TDragImageList(Instance).DragHotspot;
result := IUnknown(__wrapper) as IDispatch;
end;

procedure __DC__SetTDragImageList__DragHotspot(Instance : TObject; Params : PVariantArgList);
var
__idisp:IDispatch;
__iwrapper:IDCRecordWrapper;
begin
__idisp:=DCVarToInterface(OleVariant(Params^[0]));
if __idisp=nil then exit;
__idisp.QueryInterface(IDCRecordWrapper, __iwrapper);
TDragImageList(Instance).DragHotspot:=TPoint(__iwrapper.GetRecordPtr^);
end;

function __DC__GetTDragImageList__Dragging(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDragImageList(Instance).Dragging;
end;

function __DC__GetTDragObject__AlwaysShowDragImages(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDragObject(Instance).AlwaysShowDragImages;
end;

procedure __DC__SetTDragObject__AlwaysShowDragImages(Instance : TObject; Params : PVariantArgList);
begin
TDragObject(Instance).AlwaysShowDragImages:=OleVariant(Params^[0]);
end;

function __DC__GetTDragObject__Cancelling(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDragObject(Instance).Cancelling;
end;

procedure __DC__SetTDragObject__Cancelling(Instance : TObject; Params : PVariantArgList);
begin
TDragObject(Instance).Cancelling:=OleVariant(Params^[0]);
end;

function __DC__GetTDragObject__DragHandle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDragObject(Instance).DragHandle;
end;

procedure __DC__SetTDragObject__DragHandle(Instance : TObject; Params : PVariantArgList);
begin
TDragObject(Instance).DragHandle:=OleVariant(Params^[0]);
end;

function __DC__GetTDragObject__DragPos(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TPoint__Wrapper;
begin
__wrapper := __TPoint__Wrapper.Create;
__wrapper.fR := TDragObject(Instance).DragPos;
result := IUnknown(__wrapper) as IDispatch;
end;

procedure __DC__SetTDragObject__DragPos(Instance : TObject; Params : PVariantArgList);
var
__idisp:IDispatch;
__iwrapper:IDCRecordWrapper;
begin
__idisp:=DCVarToInterface(OleVariant(Params^[0]));
if __idisp=nil then exit;
__idisp.QueryInterface(IDCRecordWrapper, __iwrapper);
TDragObject(Instance).DragPos:=TPoint(__iwrapper.GetRecordPtr^);
end;

function __DC__GetTDragObject__DragTargetPos(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TPoint__Wrapper;
begin
__wrapper := __TPoint__Wrapper.Create;
__wrapper.fR := TDragObject(Instance).DragTargetPos;
result := IUnknown(__wrapper) as IDispatch;
end;

procedure __DC__SetTDragObject__DragTargetPos(Instance : TObject; Params : PVariantArgList);
var
__idisp:IDispatch;
__iwrapper:IDCRecordWrapper;
begin
__idisp:=DCVarToInterface(OleVariant(Params^[0]));
if __idisp=nil then exit;
__idisp.QueryInterface(IDCRecordWrapper, __iwrapper);
TDragObject(Instance).DragTargetPos:=TPoint(__iwrapper.GetRecordPtr^);
end;

function __DC__GetTDragObject__DragTarget(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TDragObject(Instance).DragTarget);
end;

procedure __DC__SetTDragObject__DragTarget(Instance : TObject; Params : PVariantArgList);
begin
TDragObject(Instance).DragTarget:=VarToPointer(OleVariant(Params^[0]));
end;

function __DC__GetTDragObject__Dropped(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDragObject(Instance).Dropped;
end;

function __DC__GetTDragObject__MouseDeltaX(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDragObject(Instance).MouseDeltaX;
end;

function __DC__GetTDragObject__MouseDeltaY(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDragObject(Instance).MouseDeltaY;
end;

function __DC__GetTDragObject__RightClickCancels(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDragObject(Instance).RightClickCancels;
end;

procedure __DC__SetTDragObject__RightClickCancels(Instance : TObject; Params : PVariantArgList);
begin
TDragObject(Instance).RightClickCancels:=OleVariant(Params^[0]);
end;

function __DC__GetTHintWindow__BiDiMode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := THintWindow(Instance).BiDiMode;
end;

procedure __DC__SetTHintWindow__BiDiMode(Instance : TObject; Params : PVariantArgList);
begin
THintWindow(Instance).BiDiMode:=OleVariant(Params^[0]);
end;

function __DC__GetTHintWindow__Caption(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := THintWindow(Instance).Caption;
end;

procedure __DC__SetTHintWindow__Caption(Instance : TObject; Params : PVariantArgList);
begin
THintWindow(Instance).Caption:=OleVariant(Params^[0]);
end;

function __DC__GetTHintWindow__Color(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
//result := VarFromObject(THintWindow(Instance).Color);
end;

procedure __DC__SetTHintWindow__Color(Instance : TObject; Params : PVariantArgList);
begin
THintWindow(Instance).Color:=TColor(OleVariant(Params^[0]));
end;

function __DC__GetTHintWindow__Canvas(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(THintWindow(Instance).Canvas);
end;

function __DC__GetTHintWindow__Font(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(THintWindow(Instance).Font);
end;

procedure __DC__SetTHintWindow__Font(Instance : TObject; Params : PVariantArgList);
begin
THintWindow(Instance).Font:=TFont(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTMargins__ControlLeft(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMargins(Instance).ControlLeft;
end;

function __DC__GetTMargins__ControlTop(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMargins(Instance).ControlTop;
end;

function __DC__GetTMargins__ControlWidth(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMargins(Instance).ControlWidth;
end;

function __DC__GetTMargins__ControlHeight(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMargins(Instance).ControlHeight;
end;

function __DC__GetTMargins__ExplicitLeft(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMargins(Instance).ExplicitLeft;
end;

function __DC__GetTMargins__ExplicitTop(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMargins(Instance).ExplicitTop;
end;

function __DC__GetTMargins__ExplicitWidth(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMargins(Instance).ExplicitWidth;
end;

function __DC__GetTMargins__ExplicitHeight(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMargins(Instance).ExplicitHeight;
end;

function __DC__GetTMouse__Capture(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMouse(Instance).Capture;
end;

procedure __DC__SetTMouse__Capture(Instance : TObject; Params : PVariantArgList);
begin
TMouse(Instance).Capture:=OleVariant(Params^[0]);
end;

function __DC__GetTMouse__CursorPos(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TPoint__Wrapper;
begin
__wrapper := __TPoint__Wrapper.Create;
__wrapper.fR := TMouse(Instance).CursorPos;
result := IUnknown(__wrapper) as IDispatch;
 {
var
__wrapper : __TPoint__Wrapper;
begin
__wrapper := __TPoint__Wrapper.Create;
__wrapper.fR := TMouse(Instance).CursorPos;
result := IUnknown(__wrapper) as IDispatch;
}end;

procedure __DC__SetTMouse__CursorPos(Instance : TObject; Params : PVariantArgList);
var
__idisp:IDispatch;
__iwrapper:IDCRecordWrapper;
begin
__idisp:=DCVarToInterface(OleVariant(Params^[0]));
if __idisp=nil then exit;
__idisp.QueryInterface(IDCRecordWrapper, __iwrapper);
TMouse(Instance).CursorPos:=TPoint(__iwrapper.GetRecordPtr^);
end;

function __DC__GetTMouse__DragImmediate(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMouse(Instance).DragImmediate;
end;

procedure __DC__SetTMouse__DragImmediate(Instance : TObject; Params : PVariantArgList);
begin
TMouse(Instance).DragImmediate:=OleVariant(Params^[0]);
end;

function __DC__GetTMouse__DragThreshold(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMouse(Instance).DragThreshold;
end;

procedure __DC__SetTMouse__DragThreshold(Instance : TObject; Params : PVariantArgList);
begin
TMouse(Instance).DragThreshold:=OleVariant(Params^[0]);
end;

function __DC__GetTMouse__MousePresent(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMouse(Instance).MousePresent;
end;

function __DC__GetTMouse__IsDragging(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMouse(Instance).IsDragging;
end;

function __DC__GetTMouse__IsPanning(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMouse(Instance).IsPanning;
end;

function __DC__GetTMouse__PanningWindow(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TMouse(Instance).PanningWindow);
end;

procedure __DC__SetTMouse__PanningWindow(Instance : TObject; Params : PVariantArgList);
begin
TMouse(Instance).PanningWindow:=TCustomPanningWindow(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTMouse__RegWheelMessage(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMouse(Instance).RegWheelMessage;
end;

function __DC__GetTMouse__WheelPresent(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMouse(Instance).WheelPresent;
end;

function __DC__GetTMouse__WheelScrollLines(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMouse(Instance).WheelScrollLines;
end;

function __DC__GetTWinControl__DockClientCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWinControl(Instance).DockClientCount;
end;

function __DC__GetTWinControl__DockClients(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TWinControl(Instance).DockClients[OleVariant(Params^[0])]);
end;

function __DC__GetTWinControl__DockSite(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWinControl(Instance).DockSite;
end;

procedure __DC__SetTWinControl__DockSite(Instance : TObject; Params : PVariantArgList);
begin
TWinControl(Instance).DockSite:=OleVariant(Params^[0]);
end;

function __DC__GetTWinControl__DoubleBuffered(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWinControl(Instance).DoubleBuffered;
end;

procedure __DC__SetTWinControl__DoubleBuffered(Instance : TObject; Params : PVariantArgList);
begin
TWinControl(Instance).DoubleBuffered:=OleVariant(Params^[0]);
end;

function __DC__GetTWinControl__AlignDisabled(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWinControl(Instance).AlignDisabled;
end;

function __DC__GetTWinControl__MouseInClient(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWinControl(Instance).MouseInClient;
end;

function __DC__GetTWinControl__VisibleDockClientCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWinControl(Instance).VisibleDockClientCount;
end;

function __DC__GetTWinControl__Brush(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TWinControl(Instance).Brush);
end;

function __DC__GetTWinControl__Controls(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TWinControl(Instance).Controls[OleVariant(Params^[0])]);
end;

function __DC__GetTWinControl__ControlCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWinControl(Instance).ControlCount;
end;

function __DC__GetTWinControl__Handle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWinControl(Instance).Handle;
end;

function __DC__GetTWinControl__Padding(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TWinControl(Instance).Padding);
end;

procedure __DC__SetTWinControl__Padding(Instance : TObject; Params : PVariantArgList);
begin
TWinControl(Instance).Padding:=TPadding(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTWinControl__ParentWindow(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWinControl(Instance).ParentWindow;
end;

procedure __DC__SetTWinControl__ParentWindow(Instance : TObject; Params : PVariantArgList);
begin
TWinControl(Instance).ParentWindow:=OleVariant(Params^[0]);
end;

function __DC__GetTWinControl__Showing(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWinControl(Instance).Showing;
end;

function __DC__GetTWinControl__TabOrder(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWinControl(Instance).TabOrder;
end;

procedure __DC__SetTWinControl__TabOrder(Instance : TObject; Params : PVariantArgList);
begin
TWinControl(Instance).TabOrder:=OleVariant(Params^[0]);
end;

function __DC__GetTWinControl__TabStop(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWinControl(Instance).TabStop;
end;

procedure __DC__SetTWinControl__TabStop(Instance : TObject; Params : PVariantArgList);
begin
TWinControl(Instance).TabStop:=OleVariant(Params^[0]);
end;

function __DC__GetTWinControl__UseDockManager(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWinControl(Instance).UseDockManager;
end;

procedure __DC__SetTWinControl__UseDockManager(Instance : TObject; Params : PVariantArgList);
begin
TWinControl(Instance).UseDockManager:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TBaseDragControlObject,'Control',__DC__GetTBaseDragControlObject__Control,__DC__SetTBaseDragControlObject__Control);
RegisterProperty(TControl,'Enabled',__DC__GetTControl__Enabled,__DC__SetTControl__Enabled);
RegisterProperty(TControl,'Action',__DC__GetTControl__Action,__DC__SetTControl__Action);
RegisterProperty(TControl,'Align',__DC__GetTControl__Align,__DC__SetTControl__Align);
RegisterProperty(TControl,'Anchors',__DC__GetTControl__Anchors,__DC__SetTControl__Anchors);
RegisterProperty(TControl,'BiDiMode',__DC__GetTControl__BiDiMode,__DC__SetTControl__BiDiMode);
RegisterProperty(TControl,'BoundsRect',__DC__GetTControl__BoundsRect,__DC__SetTControl__BoundsRect);
RegisterProperty(TControl,'ClientHeight',__DC__GetTControl__ClientHeight,__DC__SetTControl__ClientHeight);
RegisterProperty(TControl,'ClientOrigin',__DC__GetTControl__ClientOrigin,nil);
RegisterProperty(TControl,'ClientRect',__DC__GetTControl__ClientRect,nil);
RegisterProperty(TControl,'ClientWidth',__DC__GetTControl__ClientWidth,__DC__SetTControl__ClientWidth);
RegisterProperty(TControl,'Constraints',__DC__GetTControl__Constraints,__DC__SetTControl__Constraints);
RegisterProperty(TControl,'ControlState',__DC__GetTControl__ControlState,__DC__SetTControl__ControlState);
RegisterProperty(TControl,'ControlStyle',__DC__GetTControl__ControlStyle,__DC__SetTControl__ControlStyle);
RegisterProperty(TControl,'DockOrientation',__DC__GetTControl__DockOrientation,__DC__SetTControl__DockOrientation);
RegisterProperty(TControl,'ExplicitLeft',__DC__GetTControl__ExplicitLeft,nil);
RegisterProperty(TControl,'ExplicitTop',__DC__GetTControl__ExplicitTop,nil);
RegisterProperty(TControl,'ExplicitWidth',__DC__GetTControl__ExplicitWidth,nil);
RegisterProperty(TControl,'ExplicitHeight',__DC__GetTControl__ExplicitHeight,nil);
RegisterProperty(TControl,'Floating',__DC__GetTControl__Floating,nil);
RegisterProperty(TControl,'HostDockSite',__DC__GetTControl__HostDockSite,__DC__SetTControl__HostDockSite);
RegisterProperty(TControl,'LRDockWidth',__DC__GetTControl__LRDockWidth,__DC__SetTControl__LRDockWidth);
RegisterProperty(TControl,'Parent',__DC__GetTControl__Parent,__DC__SetTControl__Parent);
RegisterProperty(TControl,'ShowHint',__DC__GetTControl__ShowHint,__DC__SetTControl__ShowHint);
RegisterProperty(TControl,'TBDockHeight',__DC__GetTControl__TBDockHeight,__DC__SetTControl__TBDockHeight);
RegisterProperty(TControl,'UndockHeight',__DC__GetTControl__UndockHeight,__DC__SetTControl__UndockHeight);
RegisterProperty(TControl,'UndockWidth',__DC__GetTControl__UndockWidth,__DC__SetTControl__UndockWidth);
RegisterProperty(TControl,'Visible',__DC__GetTControl__Visible,__DC__SetTControl__Visible);
RegisterProperty(TControlCanvas,'Control',__DC__GetTControlCanvas__Control,__DC__SetTControlCanvas__Control);
RegisterProperty(TCustomControlAction,'DropdownMenu',__DC__GetTCustomControlAction__DropdownMenu,__DC__SetTCustomControlAction__DropdownMenu);
RegisterProperty(TCustomControlAction,'EnableDropdown',__DC__GetTCustomControlAction__EnableDropdown,__DC__SetTCustomControlAction__EnableDropdown);
RegisterProperty(TCustomControlAction,'PopupMenu',__DC__GetTCustomControlAction__PopupMenu,__DC__SetTCustomControlAction__PopupMenu);
RegisterProperty(TCustomListControl,'ItemIndex',__DC__GetTCustomListControl__ItemIndex,__DC__SetTCustomListControl__ItemIndex);
RegisterProperty(TCustomMultiSelectListControl,'MultiSelect',__DC__GetTCustomMultiSelectListControl__MultiSelect,__DC__SetTCustomMultiSelectListControl__MultiSelect);
RegisterProperty(TCustomMultiSelectListControl,'SelCount',__DC__GetTCustomMultiSelectListControl__SelCount,nil);
RegisterProperty(TCustomTransparentControl,'InterceptMouse',__DC__GetTCustomTransparentControl__InterceptMouse,__DC__SetTCustomTransparentControl__InterceptMouse);
RegisterProperty(TDockZone,'ChildCount',__DC__GetTDockZone__ChildCount,nil);
RegisterProperty(TDockZone,'ChildControl',__DC__GetTDockZone__ChildControl,nil);
RegisterProperty(TDockZone,'LimitBegin',__DC__GetTDockZone__LimitBegin,nil);
RegisterProperty(TDockZone,'LimitSize',__DC__GetTDockZone__LimitSize,nil);
RegisterProperty(TDockZone,'Visible',__DC__GetTDockZone__Visible,nil);
RegisterProperty(TDockZone,'VisibleChildCount',__DC__GetTDockZone__VisibleChildCount,nil);
RegisterProperty(TDockZone,'ZoneLimit',__DC__GetTDockZone__ZoneLimit,__DC__SetTDockZone__ZoneLimit);
RegisterProperty(TDragDockObject,'Brush',__DC__GetTDragDockObject__Brush,__DC__SetTDragDockObject__Brush);
RegisterProperty(TDragDockObject,'DockRect',__DC__GetTDragDockObject__DockRect,__DC__SetTDragDockObject__DockRect);
RegisterProperty(TDragDockObject,'DropAlign',__DC__GetTDragDockObject__DropAlign,nil);
RegisterProperty(TDragDockObject,'DropOnControl',__DC__GetTDragDockObject__DropOnControl,nil);
RegisterProperty(TDragDockObject,'EraseDockRect',__DC__GetTDragDockObject__EraseDockRect,__DC__SetTDragDockObject__EraseDockRect);
RegisterProperty(TDragDockObject,'EraseWhenMoving',__DC__GetTDragDockObject__EraseWhenMoving,nil);
RegisterProperty(TDragDockObject,'Floating',__DC__GetTDragDockObject__Floating,__DC__SetTDragDockObject__Floating);
RegisterProperty(TDragDockObject,'FrameWidth',__DC__GetTDragDockObject__FrameWidth,nil);
RegisterProperty(TDragImageList,'DragCursor',__DC__GetTDragImageList__DragCursor,__DC__SetTDragImageList__DragCursor);
RegisterProperty(TDragImageList,'DragHotspot',__DC__GetTDragImageList__DragHotspot,__DC__SetTDragImageList__DragHotspot);
RegisterProperty(TDragImageList,'Dragging',__DC__GetTDragImageList__Dragging,nil);
RegisterProperty(TDragObject,'AlwaysShowDragImages',__DC__GetTDragObject__AlwaysShowDragImages,__DC__SetTDragObject__AlwaysShowDragImages);
RegisterProperty(TDragObject,'Cancelling',__DC__GetTDragObject__Cancelling,__DC__SetTDragObject__Cancelling);
RegisterProperty(TDragObject,'DragHandle',__DC__GetTDragObject__DragHandle,__DC__SetTDragObject__DragHandle);
RegisterProperty(TDragObject,'DragPos',__DC__GetTDragObject__DragPos,__DC__SetTDragObject__DragPos);
RegisterProperty(TDragObject,'DragTargetPos',__DC__GetTDragObject__DragTargetPos,__DC__SetTDragObject__DragTargetPos);
RegisterProperty(TDragObject,'DragTarget',__DC__GetTDragObject__DragTarget,__DC__SetTDragObject__DragTarget);
RegisterProperty(TDragObject,'Dropped',__DC__GetTDragObject__Dropped,nil);
RegisterProperty(TDragObject,'MouseDeltaX',__DC__GetTDragObject__MouseDeltaX,nil);
RegisterProperty(TDragObject,'MouseDeltaY',__DC__GetTDragObject__MouseDeltaY,nil);
RegisterProperty(TDragObject,'RightClickCancels',__DC__GetTDragObject__RightClickCancels,__DC__SetTDragObject__RightClickCancels);
RegisterProperty(THintWindow,'BiDiMode',__DC__GetTHintWindow__BiDiMode,__DC__SetTHintWindow__BiDiMode);
RegisterProperty(THintWindow,'Caption',__DC__GetTHintWindow__Caption,__DC__SetTHintWindow__Caption);
RegisterProperty(THintWindow,'Color',__DC__GetTHintWindow__Color,__DC__SetTHintWindow__Color);
RegisterProperty(THintWindow,'Canvas',__DC__GetTHintWindow__Canvas,nil);
RegisterProperty(THintWindow,'Font',__DC__GetTHintWindow__Font,__DC__SetTHintWindow__Font);
RegisterProperty(TMargins,'ControlLeft',__DC__GetTMargins__ControlLeft,nil);
RegisterProperty(TMargins,'ControlTop',__DC__GetTMargins__ControlTop,nil);
RegisterProperty(TMargins,'ControlWidth',__DC__GetTMargins__ControlWidth,nil);
RegisterProperty(TMargins,'ControlHeight',__DC__GetTMargins__ControlHeight,nil);
RegisterProperty(TMargins,'ExplicitLeft',__DC__GetTMargins__ExplicitLeft,nil);
RegisterProperty(TMargins,'ExplicitTop',__DC__GetTMargins__ExplicitTop,nil);
RegisterProperty(TMargins,'ExplicitWidth',__DC__GetTMargins__ExplicitWidth,nil);
RegisterProperty(TMargins,'ExplicitHeight',__DC__GetTMargins__ExplicitHeight,nil);
RegisterProperty(TMouse,'Capture',__DC__GetTMouse__Capture,__DC__SetTMouse__Capture);
RegisterProperty(TMouse,'CursorPos',__DC__GetTMouse__CursorPos,__DC__SetTMouse__CursorPos);
RegisterProperty(TMouse,'DragImmediate',__DC__GetTMouse__DragImmediate,__DC__SetTMouse__DragImmediate);
RegisterProperty(TMouse,'DragThreshold',__DC__GetTMouse__DragThreshold,__DC__SetTMouse__DragThreshold);
RegisterProperty(TMouse,'MousePresent',__DC__GetTMouse__MousePresent,nil);
RegisterProperty(TMouse,'IsDragging',__DC__GetTMouse__IsDragging,nil);
RegisterProperty(TMouse,'IsPanning',__DC__GetTMouse__IsPanning,nil);
RegisterProperty(TMouse,'PanningWindow',__DC__GetTMouse__PanningWindow,__DC__SetTMouse__PanningWindow);
RegisterProperty(TMouse,'RegWheelMessage',__DC__GetTMouse__RegWheelMessage,nil);
RegisterProperty(TMouse,'WheelPresent',__DC__GetTMouse__WheelPresent,nil);
RegisterProperty(TMouse,'WheelScrollLines',__DC__GetTMouse__WheelScrollLines,nil);
RegisterProperty(TWinControl,'DockClientCount',__DC__GetTWinControl__DockClientCount,nil);
RegisterIndexedProperty(TWinControl,'DockClients',1,False,__DC__GetTWinControl__DockClients,nil);
RegisterProperty(TWinControl,'DockSite',__DC__GetTWinControl__DockSite,__DC__SetTWinControl__DockSite);
RegisterProperty(TWinControl,'DoubleBuffered',__DC__GetTWinControl__DoubleBuffered,__DC__SetTWinControl__DoubleBuffered);
RegisterProperty(TWinControl,'AlignDisabled',__DC__GetTWinControl__AlignDisabled,nil);
RegisterProperty(TWinControl,'MouseInClient',__DC__GetTWinControl__MouseInClient,nil);
RegisterProperty(TWinControl,'VisibleDockClientCount',__DC__GetTWinControl__VisibleDockClientCount,nil);
RegisterProperty(TWinControl,'Brush',__DC__GetTWinControl__Brush,nil);
RegisterIndexedProperty(TWinControl,'Controls',1,False,__DC__GetTWinControl__Controls,nil);
RegisterProperty(TWinControl,'ControlCount',__DC__GetTWinControl__ControlCount,nil);
RegisterProperty(TWinControl,'Handle',__DC__GetTWinControl__Handle,nil);
RegisterProperty(TWinControl,'Padding',__DC__GetTWinControl__Padding,__DC__SetTWinControl__Padding);
RegisterProperty(TWinControl,'ParentWindow',__DC__GetTWinControl__ParentWindow,__DC__SetTWinControl__ParentWindow);
RegisterProperty(TWinControl,'Showing',__DC__GetTWinControl__Showing,nil);
RegisterProperty(TWinControl,'TabOrder',__DC__GetTWinControl__TabOrder,__DC__SetTWinControl__TabOrder);
RegisterProperty(TWinControl,'TabStop',__DC__GetTWinControl__TabStop,__DC__SetTWinControl__TabStop);
RegisterProperty(TWinControl,'UseDockManager',__DC__GetTWinControl__UseDockManager,__DC__SetTWinControl__UseDockManager);
end;

function __DC__GetControls__Mouse(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(Controls.Mouse);
end;

procedure __DC__SetControls__Mouse(Instance : TObject; Params : PVariantArgList);
begin
TObject(Controls.Mouse):=(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetControls__CreationControl(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(Controls.CreationControl);
end;

procedure __DC__SetControls__CreationControl(Instance : TObject; Params : PVariantArgList);
begin
TObject(Controls.CreationControl):=(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetControls__NewStyleControls(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := Controls.NewStyleControls;
end;

procedure __DC__SetControls__NewStyleControls(Instance : TObject; Params : PVariantArgList);
begin
Controls.NewStyleControls:=OleVariant(Params^[0]);
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('Mouse',__DC__GetControls__Mouse,__DC__SetControls__Mouse));
__RegisteredVars.Add(RegisterVar('CreationControl',__DC__GetControls__CreationControl,__DC__SetControls__CreationControl));
__RegisteredVars.Add(RegisterVar('NewStyleControls',__DC__GetControls__NewStyleControls,__DC__SetControls__NewStyleControls));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..236] of string = (
'CM_BASE'
,'CM_ACTIVATE'
,'CM_DEACTIVATE'
,'CM_GOTFOCUS'
,'CM_LOSTFOCUS'
,'CM_CANCELMODE'
,'CM_DIALOGKEY'
,'CM_DIALOGCHAR'
,'CM_FOCUSCHANGED'
,'CM_PARENTFONTCHANGED'
,'CM_PARENTCOLORCHANGED'
,'CM_HITTEST'
,'CM_VISIBLECHANGED'
,'CM_ENABLEDCHANGED'
,'CM_COLORCHANGED'
,'CM_FONTCHANGED'
,'CM_CURSORCHANGED'
,'CM_CTL3DCHANGED'
,'CM_PARENTCTL3DCHANGED'
,'CM_TEXTCHANGED'
,'CM_MOUSEENTER'
,'CM_MOUSELEAVE'
,'CM_MENUCHANGED'
,'CM_APPKEYDOWN'
,'CM_APPSYSCOMMAND'
,'CM_BUTTONPRESSED'
,'CM_SHOWINGCHANGED'
,'CM_ENTER'
,'CM_EXIT'
,'CM_DESIGNHITTEST'
,'CM_ICONCHANGED'
,'CM_WANTSPECIALKEY'
,'CM_INVOKEHELP'
,'CM_WINDOWHOOK'
,'CM_RELEASE'
,'CM_SHOWHINTCHANGED'
,'CM_PARENTSHOWHINTCHANGED'
,'CM_SYSCOLORCHANGE'
,'CM_WININICHANGE'
,'CM_FONTCHANGE'
,'CM_TIMECHANGE'
,'CM_TABSTOPCHANGED'
,'CM_UIACTIVATE'
,'CM_UIDEACTIVATE'
,'CM_DOCWINDOWACTIVATE'
,'CM_CONTROLLISTCHANGE'
,'CM_GETDATALINK'
,'CM_CHILDKEY'
,'CM_DRAG'
,'CM_HINTSHOW'
,'CM_DIALOGHANDLE'
,'CM_ISTOOLCONTROL'
,'CM_RECREATEWND'
,'CM_INVALIDATE'
,'CM_SYSFONTCHANGED'
,'CM_CONTROLCHANGE'
,'CM_CHANGED'
,'CM_DOCKCLIENT'
,'CM_UNDOCKCLIENT'
,'CM_FLOAT'
,'CM_BORDERCHANGED'
,'CM_BIDIMODECHANGED'
,'CM_PARENTBIDIMODECHANGED'
,'CM_ALLCHILDRENFLIPPED'
,'CM_ACTIONUPDATE'
,'CM_ACTIONEXECUTE'
,'CM_HINTSHOWPAUSE'
,'CM_DOCKNOTIFICATION'
,'CM_MOUSEWHEEL'
,'CM_ISSHORTCUT'
,'CM_INVALIDATEDOCKHOST'
,'CM_SETACTIVECONTROL'
,'CM_POPUPHWNDDESTROY'
,'CM_CREATEPOPUP'
,'CM_DESTROYHANDLE'
,'CM_MOUSEACTIVATE'
,'CM_CONTROLLISTCHANGING'
,'CN_BASE'
,'CN_CHARTOITEM'
,'CN_COMMAND'
,'CN_COMPAREITEM'
,'CN_CTLCOLORBTN'
,'CN_CTLCOLORDLG'
,'CN_CTLCOLOREDIT'
,'CN_CTLCOLORLISTBOX'
,'CN_CTLCOLORMSGBOX'
,'CN_CTLCOLORSCROLLBAR'
,'CN_CTLCOLORSTATIC'
,'CN_DELETEITEM'
,'CN_DRAWITEM'
,'CN_HSCROLL'
,'CN_MEASUREITEM'
,'CN_PARENTNOTIFY'
,'CN_VKEYTOITEM'
,'CN_VSCROLL'
,'CN_KEYDOWN'
,'CN_KEYUP'
,'CN_CHAR'
,'CN_SYSKEYDOWN'
,'CN_SYSCHAR'
,'CN_NOTIFY'
,'mrNone'
,'mrOk'
,'mrCancel'
,'mrAbort'
,'mrRetry'
,'mrIgnore'
,'mrYes'
,'mrNo'
,'mrAll'
,'mrNoToAll'
,'mrYesToAll'
,'crDefault'
,'crNone'
,'crArrow'
,'crCross'
,'crIBeam'
,'crSize'
,'crSizeNESW'
,'crSizeNS'
,'crSizeNWSE'
,'crSizeWE'
,'crUpArrow'
,'crHourGlass'
,'crDrag'
,'crNoDrop'
,'crHSplit'
,'crVSplit'
,'crMultiDrag'
,'crSQLWait'
,'crNo'
,'crAppStart'
,'crHelp'
,'crHandPoint'
,'crSizeAll'
,'dmDragEnter'
,'dmDragLeave'
,'dmDragMove'
,'dmDragDrop'
,'dmDragCancel'
,'dmFindTarget'
,'alNone'
,'alTop'
,'alBottom'
,'alLeft'
,'alRight'
,'alClient'
,'alCustom'
,'csLButtonDown'
,'csClicked'
,'csPalette'
,'csReadingState'
,'csAlignmentNeeded'
,'csFocusing'
,'csCreating'
,'csPaintCopy'
,'csCustomPaint'
,'csDestroyingHandle'
,'csDocking'
,'csDesignerHide'
,'csPanning'
,'csRecreating'
,'csAligning'
,'csAcceptsControls'
,'csCaptureMouse'
,'csDesignInteractive'
,'csClickEvents'
,'csFramed'
,'csSetCaption'
,'csOpaque'
,'csDoubleClicks'
,'csFixedWidth'
,'csFixedHeight'
,'csNoDesignVisible'
,'csReplicatable'
,'csNoStdEvents'
,'csDisplayDragImage'
,'csReflector'
,'csActionClient'
,'csMenuEvents'
,'csNeedsBorderPaint'
,'csParentBackground'
,'csPannable'
,'csAlignWithMargins'
,'mbLeft'
,'mbRight'
,'mbMiddle'
,'maDefault'
,'maActivate'
,'maActivateAndEat'
,'maNoActivate'
,'maNoActivateAndEat'
,'dmManual'
,'dmAutomatic'
,'dsDragEnter'
,'dsDragLeave'
,'dsDragMove'
,'dkDrag'
,'dkDock'
,'sfLeft'
,'sfTop'
,'sfWidth'
,'sfHeight'
,'sfFont'
,'sfDesignSize'
,'akLeft'
,'akTop'
,'akRight'
,'akBottom'
,'doNoOrient'
,'doHorizontal'
,'doVertical'
,'imDisable'
,'imClose'
,'imOpen'
,'imDontCare'
,'imSAlpha'
,'imAlpha'
,'imHira'
,'imSKata'
,'imKata'
,'imChinese'
,'imSHanguel'
,'imHanguel'
,'bvNone'
,'bvLowered'
,'bvRaised'
,'bvSpace'
,'beLeft'
,'beTop'
,'beRight'
,'beBottom'
,'bkNone'
,'bkTile'
,'bkSoft'
,'bkFlat'
,'CTL3D_ALL'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,CM_BASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,CM_ACTIVATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,CM_DEACTIVATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,CM_GOTFOCUS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,CM_LOSTFOCUS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,CM_CANCELMODE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,CM_DIALOGKEY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,CM_DIALOGCHAR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,CM_FOCUSCHANGED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,CM_PARENTFONTCHANGED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,CM_PARENTCOLORCHANGED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,CM_HITTEST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,CM_VISIBLECHANGED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,CM_ENABLEDCHANGED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,CM_COLORCHANGED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,CM_FONTCHANGED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,CM_CURSORCHANGED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,CM_CTL3DCHANGED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,CM_PARENTCTL3DCHANGED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,CM_TEXTCHANGED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,CM_MOUSEENTER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,CM_MOUSELEAVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,CM_MENUCHANGED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,CM_APPKEYDOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,CM_APPSYSCOMMAND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,CM_BUTTONPRESSED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,CM_SHOWINGCHANGED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,CM_ENTER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,CM_EXIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,CM_DESIGNHITTEST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,CM_ICONCHANGED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,CM_WANTSPECIALKEY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,CM_INVOKEHELP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,CM_WINDOWHOOK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,CM_RELEASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,CM_SHOWHINTCHANGED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,CM_PARENTSHOWHINTCHANGED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,CM_SYSCOLORCHANGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,CM_WININICHANGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,CM_FONTCHANGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,CM_TIMECHANGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,CM_TABSTOPCHANGED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,CM_UIACTIVATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,CM_UIDEACTIVATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,CM_DOCWINDOWACTIVATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,CM_CONTROLLISTCHANGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,CM_GETDATALINK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,CM_CHILDKEY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,CM_DRAG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,CM_HINTSHOW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,CM_DIALOGHANDLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,CM_ISTOOLCONTROL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,CM_RECREATEWND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,CM_INVALIDATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,CM_SYSFONTCHANGED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,CM_CONTROLCHANGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,CM_CHANGED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,CM_DOCKCLIENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,CM_UNDOCKCLIENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,CM_FLOAT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,CM_BORDERCHANGED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,CM_BIDIMODECHANGED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,CM_PARENTBIDIMODECHANGED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,CM_ALLCHILDRENFLIPPED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,CM_ACTIONUPDATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[65] ,CM_ACTIONEXECUTE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[66] ,CM_HINTSHOWPAUSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[67] ,CM_DOCKNOTIFICATION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[68] ,CM_MOUSEWHEEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[69] ,CM_ISSHORTCUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[70] ,CM_INVALIDATEDOCKHOST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[71] ,CM_SETACTIVECONTROL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[72] ,CM_POPUPHWNDDESTROY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[73] ,CM_CREATEPOPUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[74] ,CM_DESTROYHANDLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[75] ,CM_MOUSEACTIVATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[76] ,CM_CONTROLLISTCHANGING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[77] ,CN_BASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[78] ,CN_CHARTOITEM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[79] ,CN_COMMAND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[80] ,CN_COMPAREITEM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[81] ,CN_CTLCOLORBTN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[82] ,CN_CTLCOLORDLG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[83] ,CN_CTLCOLOREDIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[84] ,CN_CTLCOLORLISTBOX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[85] ,CN_CTLCOLORMSGBOX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[86] ,CN_CTLCOLORSCROLLBAR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[87] ,CN_CTLCOLORSTATIC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[88] ,CN_DELETEITEM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[89] ,CN_DRAWITEM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[90] ,CN_HSCROLL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[91] ,CN_MEASUREITEM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[92] ,CN_PARENTNOTIFY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[93] ,CN_VKEYTOITEM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[94] ,CN_VSCROLL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[95] ,CN_KEYDOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[96] ,CN_KEYUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[97] ,CN_CHAR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[98] ,CN_SYSKEYDOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[99] ,CN_SYSCHAR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[100] ,CN_NOTIFY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[101] ,mrNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[102] ,mrOk));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[103] ,mrCancel));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[104] ,mrAbort));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[105] ,mrRetry));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[106] ,mrIgnore));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[107] ,mrYes));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[108] ,mrNo));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[109] ,mrAll));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[110] ,mrNoToAll));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[111] ,mrYesToAll));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[112] ,crDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[113] ,crNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[114] ,crArrow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[115] ,crCross));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[116] ,crIBeam));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[117] ,crSize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[118] ,crSizeNESW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[119] ,crSizeNS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[120] ,crSizeNWSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[121] ,crSizeWE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[122] ,crUpArrow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[123] ,crHourGlass));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[124] ,crDrag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[125] ,crNoDrop));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[126] ,crHSplit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[127] ,crVSplit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[128] ,crMultiDrag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[129] ,crSQLWait));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[130] ,crNo));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[131] ,crAppStart));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[132] ,crHelp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[133] ,crHandPoint));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[134] ,crSizeAll));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[135] ,dmDragEnter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[136] ,dmDragLeave));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[137] ,dmDragMove));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[138] ,dmDragDrop));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[139] ,dmDragCancel));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[140] ,dmFindTarget));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[141] ,alNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[142] ,alTop));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[143] ,alBottom));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[144] ,alLeft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[145] ,alRight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[146] ,alClient));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[147] ,alCustom));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[148] ,csLButtonDown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[149] ,csClicked));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[150] ,csPalette));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[151] ,csReadingState));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[152] ,csAlignmentNeeded));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[153] ,csFocusing));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[154] ,csCreating));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[155] ,csPaintCopy));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[156] ,csCustomPaint));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[157] ,csDestroyingHandle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[158] ,csDocking));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[159] ,csDesignerHide));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[160] ,csPanning));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[161] ,csRecreating));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[162] ,csAligning));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[163] ,csAcceptsControls));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[164] ,csCaptureMouse));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[165] ,csDesignInteractive));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[166] ,csClickEvents));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[167] ,csFramed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[168] ,csSetCaption));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[169] ,csOpaque));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[170] ,csDoubleClicks));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[171] ,csFixedWidth));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[172] ,csFixedHeight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[173] ,csNoDesignVisible));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[174] ,csReplicatable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[175] ,csNoStdEvents));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[176] ,csDisplayDragImage));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[177] ,csReflector));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[178] ,csActionClient));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[179] ,csMenuEvents));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[180] ,csNeedsBorderPaint));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[181] ,csParentBackground));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[182] ,csPannable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[183] ,csAlignWithMargins));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[184] ,mbLeft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[185] ,mbRight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[186] ,mbMiddle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[187] ,maDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[188] ,maActivate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[189] ,maActivateAndEat));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[190] ,maNoActivate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[191] ,maNoActivateAndEat));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[192] ,dmManual));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[193] ,dmAutomatic));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[194] ,dsDragEnter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[195] ,dsDragLeave));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[196] ,dsDragMove));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[197] ,dkDrag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[198] ,dkDock));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[199] ,sfLeft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[200] ,sfTop));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[201] ,sfWidth));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[202] ,sfHeight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[203] ,sfFont));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[204] ,sfDesignSize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[205] ,akLeft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[206] ,akTop));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[207] ,akRight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[208] ,akBottom));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[209] ,doNoOrient));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[210] ,doHorizontal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[211] ,doVertical));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[212] ,imDisable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[213] ,imClose));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[214] ,imOpen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[215] ,imDontCare));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[216] ,imSAlpha));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[217] ,imAlpha));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[218] ,imHira));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[219] ,imSKata));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[220] ,imKata));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[221] ,imChinese));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[222] ,imSHanguel));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[223] ,imHanguel));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[224] ,bvNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[225] ,bvLowered));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[226] ,bvRaised));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[227] ,bvSpace));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[228] ,beLeft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[229] ,beTop));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[230] ,beRight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[231] ,beBottom));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[232] ,bkNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[233] ,bkTile));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[234] ,bkSoft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[235] ,bkFlat));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[236] ,CTL3D_ALL));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..28] of TClass = (
TBaseDragControlObject,

TControl,
TControlAction,
TControlActionLink,
TControlCanvas,
TCustomControl,
TCustomControlAction,
TCustomListControl,
TCustomMultiSelectListControl,
TCustomPanningWindow,
TCustomTransparentControl,
TDockTree,
TDockZone,
TDragControlObject,
TDragControlObjectEx,
TDragDockObject,
TDragDockObjectEx,
TDragImageList,
TDragObject,
TDragObjectEx,
TGraphicControl,
THintWindow,
TImageList,
TMargins,
TMouse,
TPadding,
TSizeConstraints,
TWinControl,
TWinControlActionLink
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;

function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..59] of string = (
'TAlignInfo'
,'TCMCancelMode'
,'TCMChanged'
,'TCMChildKey'
,'TCMControlChange'
,'TCMControlListChange'
,'TCMControlListChanging'
,'TCMCreatePopup'
,'TCMDockClient'
,'TCMDockNotification'
,'TCMDrag'
,'TCMFloat'
,'TCMFocusChanged'
,'TCMMouseActivate'
,'TCMMouseWheel'
,'TCMPopupHWndDestroy'
,'TCMUnDockClient'
,'TControlListItem'
,'TCreateParams'
,'TDockNotifyRec'
,'TDragRec'
,'TMouseActivateRec'
,'TPopupFormInfo'
,'IsPositiveResult'
,'IsNegativeResult'
,'IsAbortResult'
,'IsAnAllResult'
,'StripAllFromResult'
,'IsDragObject'
,'IsVCLControl'
,'FindControl'
,'FindVCLWindow'
,'FindDragTarget'
,'GetCaptureControl'
,'SetCaptureControl'
,'CancelDrag'
,'CursorToString'
,'StringToCursor'
,'CursorToIdent'
,'IdentToCursor'
,'GetShortHint'
,'GetLongHint'
,'PerformEraseBackground'
,'InitWndProc'
,'ChangeBiDiModeAlignment'
,'SendAppMessage'
,'MoveWindowOrg'
,'SetImeMode'
,'SetImeName'
,'Win32NLSEnableIME'
,'Imm32GetContext'
,'Imm32ReleaseContext'
,'Imm32GetConversionStatus'
,'Imm32SetConversionStatus'
,'Imm32SetOpenStatus'
,'Imm32SetCompositionWindow'
,'Imm32GetCompositionString'
,'Imm32IsIME'
,'Imm32NotifyIME'
,'DragDone'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TAlignInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_TCMCancelMode_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_TCMChanged_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(_TCMChildKey_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(_TCMControlChange_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[5],Addr(_TCMControlListChange_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[6],Addr(_TCMControlListChanging_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[7],Addr(_TCMCreatePopup_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[8],Addr(_TCMDockClient_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[9],Addr(_TCMDockNotification_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[10],Addr(_TCMDrag_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[11],Addr(_TCMFloat_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[12],Addr(_TCMFocusChanged_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[13],Addr(_TCMMouseActivate_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[14],Addr(_TCMMouseWheel_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[15],Addr(_TCMPopupHWndDestroy_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[16],Addr(_TCMUnDockClient_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[17],Addr(_TControlListItem_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[18],Addr(_TCreateParams_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[19],Addr(_TDockNotifyRec_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[20],Addr(_TDragRec_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[21],Addr(_TMouseActivateRec_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[22],Addr(_TPopupFormInfo_)));
RegisterProc(nil,MethodNames[23],mtProc,TypeInfo(_T0),[
TypeInfo(TModalResult),TypeInfo(Boolean)],Addr(IsPositiveResult),cRegister);

RegisterProc(nil,MethodNames[24],mtProc,TypeInfo(_T1),[
TypeInfo(TModalResult),TypeInfo(Boolean)],Addr(IsNegativeResult),cRegister);

RegisterProc(nil,MethodNames[25],mtProc,TypeInfo(_T2),[
TypeInfo(TModalResult),TypeInfo(Boolean)],Addr(IsAbortResult),cRegister);

RegisterProc(nil,MethodNames[26],mtProc,TypeInfo(_T3),[
TypeInfo(TModalResult),TypeInfo(Boolean)],Addr(IsAnAllResult),cRegister);

RegisterProc(nil,MethodNames[27],mtProc,TypeInfo(_T4),[
TypeInfo(TModalResult),TypeInfo(TModalResult)],Addr(StripAllFromResult),cRegister);

RegisterProc(nil,MethodNames[28],mtProc,TypeInfo(_T5),[
TypeInfo(TObject),TypeInfo(Boolean)],Addr(IsDragObject),cRegister);

RegisterProc(nil,MethodNames[29],mtProc,TypeInfo(_T6),[
TypeInfo(HWND),TypeInfo(Boolean)],Addr(IsVCLControl),cRegister);

RegisterProc(nil,MethodNames[30],mtProc,TypeInfo(_T7),[
TypeInfo(HWND),TypeInfo(TWinControl)],Addr(FindControl),cRegister);

RegisterProc(nil,MethodNames[31],mtProc,TypeInfo(_T8),[
TypeInfo(IDispatch),TypeInfo(TWinControl)],Addr(____FindVCLWindow__Wrapper),cRegister);

RegisterProc(nil,MethodNames[32],mtProc,TypeInfo(_T9),[
TypeInfo(IDispatch),
TypeInfo(Boolean),TypeInfo(TControl)],Addr(____FindDragTarget__Wrapper),cRegister);

RegisterProc(nil,MethodNames[33],mtProc,TypeInfo(_T10),[TypeInfo(TControl)],Addr(GetCaptureControl),cRegister);

RegisterProc(nil,MethodNames[34],mtProc,TypeInfo(_T11),[
TypeInfo(TControl)],Addr(SetCaptureControl),cRegister);

RegisterProc(nil,MethodNames[35],mtProc,TypeInfo(_T12),NoParams,Addr(CancelDrag),cRegister);

RegisterProc(nil,MethodNames[36],mtProc,TypeInfo(_T13),[
TypeInfo(TCursor),TypeInfo(string)],Addr(CursorToString),cRegister);

RegisterProc(nil,MethodNames[37],mtProc,TypeInfo(_T14),[
TypeInfo(string),TypeInfo(TCursor)],Addr(StringToCursor),cRegister);

RegisterProc(nil,MethodNames[38],mtProc,TypeInfo(_T16),[
TypeInfo(Longint),
TypeInfo(string),TypeInfo(Boolean)],Addr(CursorToIdent),cRegister);

RegisterProc(nil,MethodNames[39],mtProc,TypeInfo(_T17),[
TypeInfo(string),
TypeInfo(Longint),TypeInfo(Boolean)],Addr(IdentToCursor),cRegister);

RegisterProc(nil,MethodNames[40],mtProc,TypeInfo(_T18),[
TypeInfo(string),TypeInfo(string)],Addr(GetShortHint),cRegister);

RegisterProc(nil,MethodNames[41],mtProc,TypeInfo(_T19),[
TypeInfo(string),TypeInfo(string)],Addr(GetLongHint),cRegister);

RegisterProc(nil,MethodNames[42],mtProc,TypeInfo(_T20),[
TypeInfo(TControl),
TypeInfo(HDC)],Addr(PerformEraseBackground),cRegister);

RegisterProc(nil,MethodNames[43],mtProc,TypeInfo(_T21),[
TypeInfo(HWND),
TypeInfo(Longint),
TypeInfo(Longint),
TypeInfo(Longint),TypeInfo(Longint)],Addr(InitWndProc),cStdCall);

RegisterProc(nil,MethodNames[44],mtProc,TypeInfo(_T22),[
TypeInfo(TAlignment)],Addr(ChangeBiDiModeAlignment),cRegister);

RegisterProc(nil,MethodNames[45],mtProc,TypeInfo(_T23),[
TypeInfo(Cardinal),
TypeInfo(Longint),
TypeInfo(Longint),TypeInfo(Longint)],Addr(SendAppMessage),cRegister);

RegisterProc(nil,MethodNames[46],mtProc,TypeInfo(_T24),[
TypeInfo(HDC),
TypeInfo(Integer),
TypeInfo(Integer)],Addr(MoveWindowOrg),cRegister);

RegisterProc(nil,MethodNames[47],mtProc,TypeInfo(_T25),[
TypeInfo(HWND),
TypeInfo(TImeMode)],Addr(SetImeMode),cRegister);

RegisterProc(nil,MethodNames[48],mtProc,TypeInfo(_T26),[
TypeInfo(TImeName)],Addr(SetImeName),cRegister);

RegisterProc(nil,MethodNames[49],mtProc,TypeInfo(_T27),[
TypeInfo(HWND),
TypeInfo(Boolean),TypeInfo(Boolean)],Addr(Win32NLSEnableIME),cRegister);

RegisterProc(nil,MethodNames[50],mtProc,TypeInfo(_T28),[
TypeInfo(HWND),TypeInfo(HIMC)],Addr(Imm32GetContext),cRegister);

RegisterProc(nil,MethodNames[51],mtProc,TypeInfo(_T29),[
TypeInfo(HWND),
TypeInfo(HIMC),TypeInfo(Boolean)],Addr(Imm32ReleaseContext),cRegister);

RegisterProc(nil,MethodNames[52],mtProc,TypeInfo(_T30),[
TypeInfo(HIMC),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(Boolean)],Addr(Imm32GetConversionStatus),cRegister);

RegisterProc(nil,MethodNames[53],mtProc,TypeInfo(_T31),[
TypeInfo(HIMC),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(Boolean)],Addr(Imm32SetConversionStatus),cRegister);

RegisterProc(nil,MethodNames[54],mtProc,TypeInfo(_T32),[
TypeInfo(HIMC),
TypeInfo(Boolean),TypeInfo(Boolean)],Addr(Imm32SetOpenStatus),cRegister);

RegisterProc(nil,MethodNames[55],mtProc,TypeInfo(_T33),[
TypeInfo(HIMC),
TypeInfo(PCOMPOSITIONFORM),TypeInfo(Boolean)],Addr(Imm32SetCompositionWindow),cRegister);

RegisterProc(nil,MethodNames[56],mtProc,TypeInfo(_T35),[
TypeInfo(HIMC),
TypeInfo(DWORD),
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(Longint)],Addr(Imm32GetCompositionString),cRegister);

RegisterProc(nil,MethodNames[57],mtProc,TypeInfo(_T36),[
TypeInfo(hKl),TypeInfo(Boolean)],Addr(Imm32IsIME),cRegister);

RegisterProc(nil,MethodNames[58],mtProc,TypeInfo(_T37),[
TypeInfo(HIMC),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(Boolean)],Addr(Imm32NotifyIME),cRegister);

RegisterProc(nil,MethodNames[59],mtProc,TypeInfo(_T38),[
TypeInfo(Boolean)],Addr(DragDone),cRegister);

//RegRegisterMethod(TBaseDragControlObject,'EndDrag',TypeInfo(_T39),[TypeInfo(TObject),TypeInfo(Integer),TypeInfo(Integer)], pointer(36));
RegRegisterMethod(TBaseDragControlObject,'EndDrag',TypeInfo(_T39),[TypeInfo(TObject),TypeInfo(Integer),TypeInfo(Integer)], getVMTProcAddr('TBaseDragControlObject','EndDrag',36));


RegisterProc(TBaseDragControlObject,'Create',mtConstructor,TypeInfo(_T40),[
TypeInfo(TControl)], pointer(40),cRegister);

RegRegisterMethod(TControl,'ActionChange',TypeInfo(_T41),[
TypeInfo(TObject),
TypeInfo(Boolean)], pointer(MinVMTOffset - 0));

RegRegisterMethod(TControl,'AdjustSize',TypeInfo(_T42),NoParams, pointer(MinVMTOffset - 1));

RegRegisterMethod(TControl,'BeginAutoDrag',TypeInfo(_T43),NoParams, pointer(MinVMTOffset - 2));

//RegRegisterMethod(TControl,'CanResize',TypeInfo(_T44),[TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Boolean)], pointer(0));
RegRegisterMethod(TControl,'CanResize',TypeInfo(_T44),[TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Boolean)], getVMTProcAddr('TControl','CanResize',0));


//RegRegisterMethod(TControl,'CanAutoSize',TypeInfo(_T45),[TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Boolean)], pointer(4));
RegRegisterMethod(TControl,'CanAutoSize',TypeInfo(_T45),[TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Boolean)], getVMTProcAddr('TControl','CanAutoSize',4));


RegRegisterMethod(TControl,'ChangeScale',TypeInfo(_T46),[
TypeInfo(Integer),
TypeInfo(Integer)], pointer(MinVMTOffset - 3));

RegRegisterMethod(TControl,'Click',TypeInfo(_T47),NoParams, pointer(MinVMTOffset - 4));

//RegRegisterMethod(TControl,'ConstrainedResize',TypeInfo(_T48),[TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Integer)], pointer(8));
RegRegisterMethod(TControl,'ConstrainedResize',TypeInfo(_T48),[TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Integer)], getVMTProcAddr('TControl','ConstrainedResize',8));


RegRegisterMethod(TControl,'DesignWndProc',TypeInfo(_T49),[
TypeInfo(TMessage),TypeInfo(Boolean)], pointer(MinVMTOffset - 5));

RegRegisterMethod(TControl,'DblClick',TypeInfo(_T50),NoParams, pointer(MinVMTOffset - 6));

RegRegisterMethod(TControl,'DefaultDockImage',TypeInfo(_T51),[
TypeInfo(TDragDockObject),
TypeInfo(Boolean)], pointer(MinVMTOffset - 7));

RegRegisterMethod(TControl,'DockTrackNoTarget',TypeInfo(_T52),[
TypeInfo(TDragDockObject),
TypeInfo(Integer),
TypeInfo(Integer)], pointer(MinVMTOffset - 8));

RegRegisterMethod(TControl,'DoContextPopup',TypeInfo(_T53),[
TypeInfo(IDispatch),
TypeInfo(Boolean)], pointer(MinVMTOffset - 9));

RegRegisterMethod(TControl,'DoEndDock',TypeInfo(_T54),[
TypeInfo(TObject),
TypeInfo(Integer),
TypeInfo(Integer)], pointer(MinVMTOffset - 10));

RegRegisterMethod(TControl,'DoDock',TypeInfo(_T55),[
TypeInfo(TWinControl),
TypeInfo(IDispatch)], pointer(MinVMTOffset - 11));

RegRegisterMethod(TControl,'DoStartDock',TypeInfo(_T56),[
TypeInfo(TDragObject)], pointer(MinVMTOffset - 12));

RegRegisterMethod(TControl,'DoMouseWheel',TypeInfo(_T57),[
TypeInfo(TShiftState),
TypeInfo(Integer),
TypeInfo(IDispatch),TypeInfo(Boolean)], pointer(MinVMTOffset - 13));

RegRegisterMethod(TControl,'DoMouseWheelDown',TypeInfo(_T58),[
TypeInfo(TShiftState),
TypeInfo(IDispatch),TypeInfo(Boolean)], pointer(MinVMTOffset - 14));

RegRegisterMethod(TControl,'DoMouseWheelUp',TypeInfo(_T59),[
TypeInfo(TShiftState),
TypeInfo(IDispatch),TypeInfo(Boolean)], pointer(MinVMTOffset - 15));

RegRegisterMethod(TControl,'DragCanceled',TypeInfo(_T60),NoParams, pointer(MinVMTOffset - 16));

RegRegisterMethod(TControl,'DragOver',TypeInfo(_T61),[
TypeInfo(TObject),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(TDragState),
TypeInfo(Boolean)], pointer(MinVMTOffset - 17));

RegRegisterMethod(TControl,'DoEndDrag',TypeInfo(_T62),[
TypeInfo(TObject),
TypeInfo(Integer),
TypeInfo(Integer)], pointer(MinVMTOffset - 18));

RegRegisterMethod(TControl,'DoStartDrag',TypeInfo(_T63),[
TypeInfo(TDragObject)], pointer(MinVMTOffset - 19));

RegRegisterMethod(TControl,'DrawDragDockImage',TypeInfo(_T64),[
TypeInfo(TDragDockObject)], pointer(MinVMTOffset - 20));

RegRegisterMethod(TControl,'EraseDragDockImage',TypeInfo(_T65),[
TypeInfo(TDragDockObject)], pointer(MinVMTOffset - 21));

//RegRegisterMethod(TControl,'GetAction',TypeInfo(_T66),[TypeInfo(TBasicAction)], pointer(12));
RegRegisterMethod(TControl,'GetAction',TypeInfo(_T66),[TypeInfo(TBasicAction)], getVMTProcAddr('TControl','GetAction',12));


//RegRegisterMethod(TControl,'GetClientOrigin',TypeInfo(_T68),[TypeInfo(IDispatch)], pointer(16));
RegRegisterMethod(TControl,'GetClientOrigin',TypeInfo(_T68),[TypeInfo(IDispatch)], getVMTProcAddr('TControl','GetClientOrigin',16));


//RegRegisterMethod(TControl,'GetClientRect',TypeInfo(_T69),[TypeInfo(IDispatch)], pointer(20));
RegRegisterMethod(TControl,'GetClientRect',TypeInfo(_T69),[TypeInfo(IDispatch)], getVMTProcAddr('TControl','GetClientRect',20));


//RegRegisterMethod(TControl,'GetDeviceContext',TypeInfo(_T70),[TypeInfo(HWND),TypeInfo(HDC)], pointer(24));
RegRegisterMethod(TControl,'GetDeviceContext',TypeInfo(_T70),[TypeInfo(HWND),TypeInfo(HDC)], getVMTProcAddr('TControl','GetDeviceContext',24));


RegRegisterMethod(TControl,'GetDockEdge',TypeInfo(_T71),[
TypeInfo(IDispatch),TypeInfo(TAlign)], pointer(MinVMTOffset - 23));

//RegRegisterMethod(TControl,'GetDragImages',TypeInfo(_T72),[TypeInfo(TDragImageList)], pointer(28));
RegRegisterMethod(TControl,'GetDragImages',TypeInfo(_T72),[TypeInfo(TDragImageList)], getVMTProcAddr('TControl','GetDragImages',28));


//RegRegisterMethod(TControl,'GetEnabled',TypeInfo(_T73),[TypeInfo(Boolean)], pointer(32));
RegRegisterMethod(TControl,'GetEnabled',TypeInfo(_T73),[TypeInfo(Boolean)], getVMTProcAddr('TControl','GetEnabled',32));


//RegRegisterMethod(TControl,'GetFloating',TypeInfo(_T74),[TypeInfo(Boolean)], pointer(36));
RegRegisterMethod(TControl,'GetFloating',TypeInfo(_T74),[TypeInfo(Boolean)], getVMTProcAddr('TControl','GetFloating',36));


RegRegisterMethod(TControl,'GetPalette',TypeInfo(_T76),[TypeInfo(HPALETTE)], pointer(MinVMTOffset - 24));

RegRegisterMethod(TControl,'GetPopupMenu',TypeInfo(_T77),[TypeInfo(TPopupMenu)], pointer(MinVMTOffset - 25));

RegRegisterMethod(TControl,'MouseActivate',TypeInfo(_T78),[
TypeInfo(TMouseButton),
TypeInfo(TShiftState),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(TMouseActivate)], pointer(MinVMTOffset - 26));

RegRegisterMethod(TControl,'MouseDown',TypeInfo(_T79),[
TypeInfo(TMouseButton),
TypeInfo(TShiftState),
TypeInfo(Integer),
TypeInfo(Integer)], pointer(MinVMTOffset - 27));

RegRegisterMethod(TControl,'MouseMove',TypeInfo(_T80),[
TypeInfo(TShiftState),
TypeInfo(Integer),
TypeInfo(Integer)], pointer(MinVMTOffset - 28));

RegRegisterMethod(TControl,'MouseUp',TypeInfo(_T81),[
TypeInfo(TMouseButton),
TypeInfo(TShiftState),
TypeInfo(Integer),
TypeInfo(Integer)], pointer(MinVMTOffset - 29));

RegRegisterMethod(TControl,'PositionDockRect',TypeInfo(_T82),[
TypeInfo(TDragDockObject)], pointer(MinVMTOffset - 30));

RegRegisterMethod(TControl,'PaletteChanged',TypeInfo(_T83),[
TypeInfo(Boolean),TypeInfo(Boolean)], pointer(MinVMTOffset - 31));

//RegRegisterMethod(TControl,'RequestAlign',TypeInfo(_T84),NoParams, pointer(44));
RegRegisterMethod(TControl,'RequestAlign',TypeInfo(_T84),NoParams, getVMTProcAddr('TControl','RequestAlign',44));


RegRegisterMethod(TControl,'Resize',TypeInfo(_T85),NoParams, pointer(MinVMTOffset - 32));

//RegRegisterMethod(TControl,'SetAutoSize',TypeInfo(_T86),[TypeInfo(Boolean)], pointer(48));
RegRegisterMethod(TControl,'SetAutoSize',TypeInfo(_T86),[TypeInfo(Boolean)], getVMTProcAddr('TControl','SetAutoSize',48));


//RegRegisterMethod(TControl,'SetDragMode',TypeInfo(_T87),[TypeInfo(TDragMode)], pointer(52));
RegRegisterMethod(TControl,'SetDragMode',TypeInfo(_T87),[TypeInfo(TDragMode)], getVMTProcAddr('TControl','SetDragMode',52));


//RegRegisterMethod(TControl,'SetEnabled',TypeInfo(_T88),[TypeInfo(Boolean)], pointer(56));
RegRegisterMethod(TControl,'SetEnabled',TypeInfo(_T88),[TypeInfo(Boolean)], getVMTProcAddr('TControl','SetEnabled',56));


//RegRegisterMethod(TControl,'SetParent',TypeInfo(_T89),[TypeInfo(TWinControl)], pointer(60));
RegRegisterMethod(TControl,'SetParent',TypeInfo(_T89),[TypeInfo(TWinControl)], getVMTProcAddr('TControl','SetParent',60));


//RegRegisterMethod(TControl,'SetParentBiDiMode',TypeInfo(_T90),[TypeInfo(Boolean)], pointer(64));
RegRegisterMethod(TControl,'SetParentBiDiMode',TypeInfo(_T90),[TypeInfo(Boolean)], getVMTProcAddr('TControl','SetParentBiDiMode',64));


//RegRegisterMethod(TControl,'SetBiDiMode',TypeInfo(_T91),[TypeInfo(TBiDiMode)], pointer(68));
RegRegisterMethod(TControl,'SetBiDiMode',TypeInfo(_T91),[TypeInfo(TBiDiMode)], getVMTProcAddr('TControl','SetBiDiMode',68));


RegRegisterMethod(TControl,'SetZOrder',TypeInfo(_T92),[
TypeInfo(Boolean)], pointer(MinVMTOffset - 33));

RegRegisterMethod(TControl,'VisibleChanging',TypeInfo(_T93),NoParams, pointer(MinVMTOffset - 34));

//RegRegisterMethod(TControl,'WndProc',TypeInfo(_T94),[TypeInfo(TMessage)], pointer(72));
RegRegisterMethod(TControl,'WndProc',TypeInfo(_T94),[TypeInfo(TMessage)], getVMTProcAddr('TControl','WndProc',72));


RegisterProc(TControl,'BeginDrag',mtScriptMethod,TypeInfo(_T95),[
TypeInfo(Boolean),
TypeInfo(Integer)],Addr(__TControl__BeginDrag__Wrapper),cRegister);

RegRegisterMethod(TControl,'BringToFront',TypeInfo(_T96),NoParams,Addr(TControl.BringToFront));

RegRegisterMethod(TControl,'ClientToScreen',TypeInfo(_T97),[
TypeInfo(IDispatch),TypeInfo(IDispatch)],Addr(__TControl__ClientToScreen__Wrapper));

RegisterProc(TControl,'ClientToParent',mtScriptMethod,TypeInfo(_T98),[
TypeInfo(IDispatch),
TypeInfo(TWinControl),TypeInfo(IDispatch)],Addr(__TControl__ClientToParent__Wrapper),cRegister);

RegRegisterMethod(TControl,'Dock',TypeInfo(_T99),[
TypeInfo(TWinControl),
TypeInfo(IDispatch)], pointer(MinVMTOffset - 35));

RegRegisterMethod(TControl,'Dragging',TypeInfo(_T100),[TypeInfo(Boolean)],Addr(TControl.Dragging));

RegRegisterMethod(TControl,'DragDrop',TypeInfo(_T101),[
TypeInfo(TObject),
TypeInfo(Integer),
TypeInfo(Integer)], pointer(MinVMTOffset - 36));

RegRegisterMethod(TControl,'DrawTextBiDiModeFlags',TypeInfo(_T102),[
TypeInfo(Longint),TypeInfo(Longint)],Addr(TControl.DrawTextBiDiModeFlags));

RegRegisterMethod(TControl,'DrawTextBiDiModeFlagsReadingOnly',TypeInfo(_T103),[TypeInfo(Longint)],Addr(TControl.DrawTextBiDiModeFlagsReadingOnly));

RegRegisterMethod(TControl,'EndDrag',TypeInfo(_T104),[
TypeInfo(Boolean)],Addr(TControl.EndDrag));

RegRegisterMethod(TControl,'GetControlsAlignment',TypeInfo(_T105),[TypeInfo(TAlignment)], pointer(MinVMTOffset - 37));

RegRegisterMethod(TControl,'GetTextLen',TypeInfo(_T107),[TypeInfo(Integer)],Addr(TControl.GetTextLen));

RegRegisterMethod(TControl,'Hide',TypeInfo(_T108),NoParams,Addr(TControl.Hide));

//RegRegisterMethod(TControl,'InitiateAction',TypeInfo(_T109),NoParams, pointer(76));
RegRegisterMethod(TControl,'InitiateAction',TypeInfo(_T109),NoParams, getVMTProcAddr('TControl','InitiateAction',76));


//RegRegisterMethod(TControl,'Invalidate',TypeInfo(_T110),NoParams, pointer(80));
RegRegisterMethod(TControl,'Invalidate',TypeInfo(_T110),NoParams, getVMTProcAddr('TControl','Invalidate',80));


RegRegisterMethod(TControl,'MouseWheelHandler',TypeInfo(_T111),[
TypeInfo(TMessage)], pointer(MinVMTOffset - 38));

RegRegisterMethod(TControl,'IsRightToLeft',TypeInfo(_T112),[TypeInfo(Boolean)],Addr(TControl.IsRightToLeft));

RegisterProc(TControl,'ManualDock',mtScriptMethod,TypeInfo(_T113),[
TypeInfo(TWinControl),
TypeInfo(TControl),
TypeInfo(TAlign),TypeInfo(Boolean)],Addr(__TControl__ManualDock__Wrapper),cRegister);

RegRegisterMethod(TControl,'ManualFloat',TypeInfo(_T114),[
TypeInfo(IDispatch),TypeInfo(Boolean)],Addr(__TControl__ManualFloat__Wrapper));

RegRegisterMethod(TControl,'Perform',TypeInfo(_T115),[
TypeInfo(Cardinal),
TypeInfo(Longint),
TypeInfo(Longint),TypeInfo(Longint)],Addr(TControl.Perform));

RegRegisterMethod(TControl,'Refresh',TypeInfo(_T116),NoParams,Addr(TControl.Refresh));

//RegRegisterMethod(TControl,'Repaint',TypeInfo(_T117),NoParams, pointer(84));
RegRegisterMethod(TControl,'Repaint',TypeInfo(_T117),NoParams, getVMTProcAddr('TControl','Repaint',84));


RegRegisterMethod(TControl,'ReplaceDockedControl',TypeInfo(_T118),[
TypeInfo(TControl),
TypeInfo(TWinControl),
TypeInfo(TControl),
TypeInfo(TAlign),TypeInfo(Boolean)],Addr(TControl.ReplaceDockedControl));

RegRegisterMethod(TControl,'ScreenToClient',TypeInfo(_T119),[
TypeInfo(IDispatch),TypeInfo(IDispatch)],Addr(__TControl__ScreenToClient__Wrapper));

RegisterProc(TControl,'ParentToClient',mtScriptMethod,TypeInfo(_T120),[
TypeInfo(IDispatch),
TypeInfo(TWinControl),TypeInfo(IDispatch)],Addr(__TControl__ParentToClient__Wrapper),cRegister);

RegRegisterMethod(TControl,'SendToBack',TypeInfo(_T121),NoParams,Addr(TControl.SendToBack));

//RegRegisterMethod(TControl,'SetBounds',TypeInfo(_T122),[TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Integer)], pointer(88));
RegRegisterMethod(TControl,'SetBounds',TypeInfo(_T122),[TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Integer)], getVMTProcAddr('TControl','SetBounds',88));


RegRegisterMethod(TControl,'SetDesignVisible',TypeInfo(_T123),[
TypeInfo(Boolean)], pointer(MinVMTOffset - 39));

RegRegisterMethod(TControl,'Show',TypeInfo(_T125),NoParams,Addr(TControl.Show));

//RegRegisterMethod(TControl,'Update',TypeInfo(_T126),NoParams, pointer(92));
RegRegisterMethod(TControl,'Update',TypeInfo(_T126),NoParams, getVMTProcAddr('TControl','Update',92));


RegRegisterMethod(TControl,'UseRightToLeftAlignment',TypeInfo(_T127),[TypeInfo(Boolean)], pointer(MinVMTOffset - 40));

RegRegisterMethod(TControl,'UseRightToLeftReading',TypeInfo(_T128),[TypeInfo(Boolean)],Addr(TControl.UseRightToLeftReading));

RegRegisterMethod(TControl,'UseRightToLeftScrollBar',TypeInfo(_T129),[TypeInfo(Boolean)],Addr(TControl.UseRightToLeftScrollBar));

//RegRegisterMethod(TControlActionLink,'IsDropdownMenuLinked',TypeInfo(_T130),[TypeInfo(Boolean)], pointer(0));
RegRegisterMethod(TControlActionLink,'IsDropdownMenuLinked',TypeInfo(_T130),[TypeInfo(Boolean)], getVMTProcAddr('TControlActionLink','IsDropdownMenuLinked',0));


//RegRegisterMethod(TControlActionLink,'IsEnableDropdownLinked',TypeInfo(_T131),[TypeInfo(Boolean)], pointer(4));
RegRegisterMethod(TControlActionLink,'IsEnableDropdownLinked',TypeInfo(_T131),[TypeInfo(Boolean)], getVMTProcAddr('TControlActionLink','IsEnableDropdownLinked',4));


//RegRegisterMethod(TControlActionLink,'IsPopupMenuLinked',TypeInfo(_T132),[TypeInfo(Boolean)], pointer(8));
RegRegisterMethod(TControlActionLink,'IsPopupMenuLinked',TypeInfo(_T132),[TypeInfo(Boolean)], getVMTProcAddr('TControlActionLink','IsPopupMenuLinked',8));


//RegRegisterMethod(TControlActionLink,'DoShowHint',TypeInfo(_T133),[TypeInfo(string),TypeInfo(Boolean)], pointer(12));
RegRegisterMethod(TControlActionLink,'DoShowHint',TypeInfo(_T133),[TypeInfo(string),TypeInfo(Boolean)], getVMTProcAddr('TControlActionLink','DoShowHint',12));


//RegRegisterMethod(TControlActionLink,'SetDropdownMenu',TypeInfo(_T134),[TypeInfo(TPopupMenu)], pointer(16));
RegRegisterMethod(TControlActionLink,'SetDropdownMenu',TypeInfo(_T134),[TypeInfo(TPopupMenu)], getVMTProcAddr('TControlActionLink','SetDropdownMenu',16));


//RegRegisterMethod(TControlActionLink,'SetEnableDropdown',TypeInfo(_T135),[TypeInfo(Boolean)], pointer(20));
RegRegisterMethod(TControlActionLink,'SetEnableDropdown',TypeInfo(_T135),[TypeInfo(Boolean)], getVMTProcAddr('TControlActionLink','SetEnableDropdown',20));


//RegRegisterMethod(TControlActionLink,'SetPopupMenu',TypeInfo(_T136),[TypeInfo(TPopupMenu)], pointer(24));
RegRegisterMethod(TControlActionLink,'SetPopupMenu',TypeInfo(_T136),[TypeInfo(TPopupMenu)], getVMTProcAddr('TControlActionLink','SetPopupMenu',24));


RegRegisterMethod(TControlCanvas,'FreeHandle',TypeInfo(_T137),NoParams,Addr(TControlCanvas.FreeHandle));

RegRegisterMethod(TControlCanvas,'UpdateTextFlags',TypeInfo(_T138),NoParams,Addr(TControlCanvas.UpdateTextFlags));

//RegRegisterMethod(TCustomControl,'Paint',TypeInfo(_T139),NoParams, pointer(168));
RegRegisterMethod(TCustomControl,'Paint',TypeInfo(_T139),NoParams, getVMTProcAddr('TCustomControl','Paint',168));


//RegRegisterMethod(TCustomListControl,'GetCount',TypeInfo(_T140),[TypeInfo(Integer)], pointer(168));
RegRegisterMethod(TCustomListControl,'GetCount',TypeInfo(_T140),[TypeInfo(Integer)], getVMTProcAddr('TCustomListControl','GetCount',168));


//RegRegisterMethod(TCustomListControl,'GetItemIndex',TypeInfo(_T141),[TypeInfo(Integer)], pointer(172));
RegRegisterMethod(TCustomListControl,'GetItemIndex',TypeInfo(_T141),[TypeInfo(Integer)], getVMTProcAddr('TCustomListControl','GetItemIndex',172));


//RegRegisterMethod(TCustomListControl,'SetItemIndex',TypeInfo(_T142),[TypeInfo(Integer)], pointer(176));
RegRegisterMethod(TCustomListControl,'SetItemIndex',TypeInfo(_T142),[TypeInfo(Integer)], getVMTProcAddr('TCustomListControl','SetItemIndex',176));


//RegRegisterMethod(TCustomListControl,'AddItem',TypeInfo(_T143),[TypeInfo(string),TypeInfo(TObject)], pointer(180));
RegRegisterMethod(TCustomListControl,'AddItem',TypeInfo(_T143),[TypeInfo(string),TypeInfo(TObject)], getVMTProcAddr('TCustomListControl','AddItem',180));


//RegRegisterMethod(TCustomListControl,'Clear',TypeInfo(_T144),NoParams, pointer(184));
RegRegisterMethod(TCustomListControl,'Clear',TypeInfo(_T144),NoParams, getVMTProcAddr('TCustomListControl','Clear',184));


//RegRegisterMethod(TCustomListControl,'ClearSelection',TypeInfo(_T145),NoParams, pointer(188));
RegRegisterMethod(TCustomListControl,'ClearSelection',TypeInfo(_T145),NoParams, getVMTProcAddr('TCustomListControl','ClearSelection',188));


//RegRegisterMethod(TCustomListControl,'CopySelection',TypeInfo(_T146),[TypeInfo(TCustomListControl)], pointer(192));
RegRegisterMethod(TCustomListControl,'CopySelection',TypeInfo(_T146),[TypeInfo(TCustomListControl)], getVMTProcAddr('TCustomListControl','CopySelection',192));


//RegRegisterMethod(TCustomListControl,'DeleteSelected',TypeInfo(_T147),NoParams, pointer(196));
RegRegisterMethod(TCustomListControl,'DeleteSelected',TypeInfo(_T147),NoParams, getVMTProcAddr('TCustomListControl','DeleteSelected',196));


//RegRegisterMethod(TCustomListControl,'MoveSelection',TypeInfo(_T148),[TypeInfo(TCustomListControl)], pointer(200));
RegRegisterMethod(TCustomListControl,'MoveSelection',TypeInfo(_T148),[TypeInfo(TCustomListControl)], getVMTProcAddr('TCustomListControl','MoveSelection',200));


//RegRegisterMethod(TCustomListControl,'SelectAll',TypeInfo(_T149),NoParams, pointer(204));
RegRegisterMethod(TCustomListControl,'SelectAll',TypeInfo(_T149),NoParams, getVMTProcAddr('TCustomListControl','SelectAll',204));


//RegRegisterMethod(TCustomMultiSelectListControl,'GetSelCount',TypeInfo(_T150),[TypeInfo(Integer)], pointer(208));
RegRegisterMethod(TCustomMultiSelectListControl,'GetSelCount',TypeInfo(_T150),[TypeInfo(Integer)], getVMTProcAddr('TCustomMultiSelectListControl','GetSelCount',208));


//RegRegisterMethod(TCustomMultiSelectListControl,'SetMultiSelect',TypeInfo(_T151),[TypeInfo(Boolean)], pointer(212));
RegRegisterMethod(TCustomMultiSelectListControl,'SetMultiSelect',TypeInfo(_T151),[TypeInfo(Boolean)], getVMTProcAddr('TCustomMultiSelectListControl','SetMultiSelect',212));


//RegRegisterMethod(TCustomPanningWindow,'GetIsPanning',TypeInfo(_T152),[TypeInfo(Boolean)], pointer(172));
RegRegisterMethod(TCustomPanningWindow,'GetIsPanning',TypeInfo(_T152),[TypeInfo(Boolean)], getVMTProcAddr('TCustomPanningWindow','GetIsPanning',172));


//RegRegisterMethod(TCustomPanningWindow,'StartPanning',TypeInfo(_T153),[TypeInfo(THandle),TypeInfo(TControl),TypeInfo(Boolean)], pointer(176));
RegRegisterMethod(TCustomPanningWindow,'StartPanning',TypeInfo(_T153),[TypeInfo(THandle),TypeInfo(TControl),TypeInfo(Boolean)], getVMTProcAddr('TCustomPanningWindow','StartPanning',176));


//RegRegisterMethod(TCustomPanningWindow,'StopPanning',TypeInfo(_T154),NoParams, pointer(180));
RegRegisterMethod(TCustomPanningWindow,'StopPanning',TypeInfo(_T154),NoParams, getVMTProcAddr('TCustomPanningWindow','StopPanning',180));


//RegRegisterMethod(TDockTree,'AdjustDockRect',TypeInfo(_T155),[TypeInfo(TControl),TypeInfo(IDispatch)], pointer(0));
RegRegisterMethod(TDockTree,'AdjustDockRect',TypeInfo(_T155),[TypeInfo(TControl),TypeInfo(IDispatch)], getVMTProcAddr('TDockTree','AdjustDockRect',0));


//RegRegisterMethod(TDockTree,'AdjustFrameRect',TypeInfo(_T156),[TypeInfo(TControl),TypeInfo(IDispatch)], pointer(4));
RegRegisterMethod(TDockTree,'AdjustFrameRect',TypeInfo(_T156),[TypeInfo(TControl),TypeInfo(IDispatch)], getVMTProcAddr('TDockTree','AdjustFrameRect',4));


//RegRegisterMethod(TDockTree,'HitTest',TypeInfo(_T157),[TypeInfo(IDispatch),TypeInfo(Integer),TypeInfo(TControl)], pointer(8));
RegRegisterMethod(TDockTree,'HitTest',TypeInfo(_T157),[TypeInfo(IDispatch),TypeInfo(Integer),TypeInfo(TControl)], getVMTProcAddr('TDockTree','HitTest',8));


//RegRegisterMethod(TDockTree,'InsertControl',TypeInfo(_T158),[TypeInfo(TControl),TypeInfo(TAlign),TypeInfo(TControl)], pointer(12));
RegRegisterMethod(TDockTree,'InsertControl',TypeInfo(_T158),[TypeInfo(TControl),TypeInfo(TAlign),TypeInfo(TControl)], getVMTProcAddr('TDockTree','InsertControl',12));


//RegRegisterMethod(TDockTree,'LoadFromStream',TypeInfo(_T159),[TypeInfo(TStream)], pointer(16));
RegRegisterMethod(TDockTree,'LoadFromStream',TypeInfo(_T159),[TypeInfo(TStream)], getVMTProcAddr('TDockTree','LoadFromStream',16));


//RegRegisterMethod(TDockTree,'MouseDown',TypeInfo(_T160),[TypeInfo(TMouseButton),TypeInfo(TShiftState),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Boolean)], pointer(20));
RegRegisterMethod(TDockTree,'MouseDown',TypeInfo(_T160),[TypeInfo(TMouseButton),TypeInfo(TShiftState),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Boolean)], getVMTProcAddr('TDockTree','MouseDown',20));


//RegRegisterMethod(TDockTree,'MouseMove',TypeInfo(_T161),[TypeInfo(TShiftState),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Boolean)], pointer(24));
RegRegisterMethod(TDockTree,'MouseMove',TypeInfo(_T161),[TypeInfo(TShiftState),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Boolean)], getVMTProcAddr('TDockTree','MouseMove',24));


//RegRegisterMethod(TDockTree,'MouseUp',TypeInfo(_T162),[TypeInfo(TMouseButton),TypeInfo(TShiftState),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Boolean)], pointer(28));
RegRegisterMethod(TDockTree,'MouseUp',TypeInfo(_T162),[TypeInfo(TMouseButton),TypeInfo(TShiftState),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Boolean)], getVMTProcAddr('TDockTree','MouseUp',28));


//RegRegisterMethod(TDockTree,'PaintDockFrame',TypeInfo(_T163),[TypeInfo(TCanvas),TypeInfo(TControl),TypeInfo(IDispatch)], pointer(32));
RegRegisterMethod(TDockTree,'PaintDockFrame',TypeInfo(_T163),[TypeInfo(TCanvas),TypeInfo(TControl),TypeInfo(IDispatch)], getVMTProcAddr('TDockTree','PaintDockFrame',32));


//RegRegisterMethod(TDockTree,'PositionDockRect',TypeInfo(_T164),[TypeInfo(TControl),TypeInfo(TControl),TypeInfo(TAlign),TypeInfo(IDispatch)], pointer(36));
RegRegisterMethod(TDockTree,'PositionDockRect',TypeInfo(_T164),[TypeInfo(TControl),TypeInfo(TControl),TypeInfo(TAlign),TypeInfo(IDispatch)], getVMTProcAddr('TDockTree','PositionDockRect',36));


//RegRegisterMethod(TDockTree,'ReferenceFromOrient',TypeInfo(_T165),[TypeInfo(TDockOrientation),TypeInfo(Integer)], pointer(40));
RegRegisterMethod(TDockTree,'ReferenceFromOrient',TypeInfo(_T165),[TypeInfo(TDockOrientation),TypeInfo(Integer)], getVMTProcAddr('TDockTree','ReferenceFromOrient',40));


//RegRegisterMethod(TDockTree,'RemoveControl',TypeInfo(_T166),[TypeInfo(TControl)], pointer(44));
RegRegisterMethod(TDockTree,'RemoveControl',TypeInfo(_T166),[TypeInfo(TControl)], getVMTProcAddr('TDockTree','RemoveControl',44));


//RegRegisterMethod(TDockTree,'SaveToStream',TypeInfo(_T167),[TypeInfo(TStream)], pointer(48));
RegRegisterMethod(TDockTree,'SaveToStream',TypeInfo(_T167),[TypeInfo(TStream)], getVMTProcAddr('TDockTree','SaveToStream',48));


//RegRegisterMethod(TDockTree,'ShowHint',TypeInfo(_T168),[TypeInfo(IDispatch),TypeInfo(IDispatch),TypeInfo(string)], pointer(52));
RegRegisterMethod(TDockTree,'ShowHint',TypeInfo(_T168),[TypeInfo(IDispatch),TypeInfo(IDispatch),TypeInfo(string)], getVMTProcAddr('TDockTree','ShowHint',52));


//RegRegisterMethod(TDockTree,'ResetBounds',TypeInfo(_T169),[TypeInfo(Boolean)], pointer(56));
RegRegisterMethod(TDockTree,'ResetBounds',TypeInfo(_T169),[TypeInfo(Boolean)], getVMTProcAddr('TDockTree','ResetBounds',56));


//RegRegisterMethod(TDockTree,'WndProc',TypeInfo(_T170),[TypeInfo(TMessage)], pointer(60));
RegRegisterMethod(TDockTree,'WndProc',TypeInfo(_T170),[TypeInfo(TMessage)], getVMTProcAddr('TDockTree','WndProc',60));


//RegRegisterMethod(TDockTree,'ZoneCaptionHitTest',TypeInfo(_T171),[TypeInfo(TDockZone),TypeInfo(IDispatch),TypeInfo(Integer),TypeInfo(Boolean)], pointer(64));
RegRegisterMethod(TDockTree,'ZoneCaptionHitTest',TypeInfo(_T171),[TypeInfo(TDockZone),TypeInfo(IDispatch),TypeInfo(Integer),TypeInfo(Boolean)], getVMTProcAddr('TDockTree','ZoneCaptionHitTest',64));


RegisterProc(TDockTree,'Create',mtConstructor,TypeInfo(_T172),[
TypeInfo(TWinControl)], pointer(68),cRegister);

//RegRegisterMethod(TDockTree,'PaintSite',TypeInfo(_T173),[TypeInfo(HDC)], pointer(72));
RegRegisterMethod(TDockTree,'PaintSite',TypeInfo(_T173),[TypeInfo(HDC)], getVMTProcAddr('TDockTree','PaintSite',72));


RegisterProc(TDockZone,'Create',mtConstructor,TypeInfo(_T174),[
TypeInfo(TDockTree)],Addr(TDockZone.Create),cRegister);

RegRegisterMethod(TDockZone,'ExpandZoneLimit',TypeInfo(_T175),[
TypeInfo(Integer)],Addr(TDockZone.ExpandZoneLimit));

RegRegisterMethod(TDockZone,'FirstVisibleChild',TypeInfo(_T176),[TypeInfo(TDockZone)],Addr(TDockZone.FirstVisibleChild));

RegRegisterMethod(TDockZone,'NextVisible',TypeInfo(_T177),[TypeInfo(TDockZone)],Addr(TDockZone.NextVisible));

RegRegisterMethod(TDockZone,'PrevVisible',TypeInfo(_T178),[TypeInfo(TDockZone)],Addr(TDockZone.PrevVisible));

RegRegisterMethod(TDockZone,'ResetChildren',TypeInfo(_T179),NoParams,Addr(TDockZone.ResetChildren));

RegRegisterMethod(TDockZone,'ResetZoneLimits',TypeInfo(_T180),NoParams,Addr(TDockZone.ResetZoneLimits));

RegRegisterMethod(TDockZone,'Update',TypeInfo(_T181),NoParams,Addr(TDockZone.Update));

//RegRegisterMethod(TDragDockObject,'AdjustDockRect',TypeInfo(_T182),[TypeInfo(IDispatch)], pointer(44));
RegRegisterMethod(TDragDockObject,'AdjustDockRect',TypeInfo(_T182),[TypeInfo(IDispatch)], getVMTProcAddr('TDragDockObject','AdjustDockRect',44));


//RegRegisterMethod(TDragDockObject,'DrawDragDockImage',TypeInfo(_T183),NoParams, pointer(48));
RegRegisterMethod(TDragDockObject,'DrawDragDockImage',TypeInfo(_T183),NoParams, getVMTProcAddr('TDragDockObject','DrawDragDockImage',48));


//RegRegisterMethod(TDragDockObject,'EraseDragDockImage',TypeInfo(_T184),NoParams, pointer(52));
RegRegisterMethod(TDragDockObject,'EraseDragDockImage',TypeInfo(_T184),NoParams, getVMTProcAddr('TDragDockObject','EraseDragDockImage',52));


//RegRegisterMethod(TDragDockObject,'GetFrameWidth',TypeInfo(_T185),[TypeInfo(Integer)], pointer(56));
RegRegisterMethod(TDragDockObject,'GetFrameWidth',TypeInfo(_T185),[TypeInfo(Integer)], getVMTProcAddr('TDragDockObject','GetFrameWidth',56));


//RegRegisterMethod(TDragDockObject,'GetEraseWhenMoving',TypeInfo(_T186),[TypeInfo(Boolean)], pointer(60));
RegRegisterMethod(TDragDockObject,'GetEraseWhenMoving',TypeInfo(_T186),[TypeInfo(Boolean)], getVMTProcAddr('TDragDockObject','GetEraseWhenMoving',60));


RegRegisterMethod(TDragImageList,'BeginDrag',TypeInfo(_T187),[
TypeInfo(HWND),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Boolean)],Addr(TDragImageList.BeginDrag));

RegRegisterMethod(TDragImageList,'DragLock',TypeInfo(_T188),[
TypeInfo(HWND),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Boolean)],Addr(TDragImageList.DragLock));

RegRegisterMethod(TDragImageList,'DragMove',TypeInfo(_T189),[
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Boolean)],Addr(TDragImageList.DragMove));

RegRegisterMethod(TDragImageList,'DragUnlock',TypeInfo(_T190),NoParams,Addr(TDragImageList.DragUnlock));

RegRegisterMethod(TDragImageList,'EndDrag',TypeInfo(_T191),[TypeInfo(Boolean)],Addr(TDragImageList.EndDrag));

RegRegisterMethod(TDragImageList,'HideDragImage',TypeInfo(_T192),NoParams,Addr(TDragImageList.HideDragImage));

RegRegisterMethod(TDragImageList,'SetDragImage',TypeInfo(_T193),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Boolean)],Addr(TDragImageList.SetDragImage));

RegRegisterMethod(TDragImageList,'ShowDragImage',TypeInfo(_T194),NoParams,Addr(TDragImageList.ShowDragImage));

//RegRegisterMethod(TDragObject,'Finished',TypeInfo(_T195),[TypeInfo(TObject),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Boolean)], pointer(0));
RegRegisterMethod(TDragObject,'Finished',TypeInfo(_T195),[TypeInfo(TObject),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Boolean)], getVMTProcAddr('TDragObject','Finished',0));


//RegRegisterMethod(TDragObject,'GetDragCursor',TypeInfo(_T196),[TypeInfo(Boolean),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(TCursor)], pointer(4));
RegRegisterMethod(TDragObject,'GetDragCursor',TypeInfo(_T196),[TypeInfo(Boolean),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(TCursor)], getVMTProcAddr('TDragObject','GetDragCursor',4));


//RegRegisterMethod(TDragObject,'GetDragImages',TypeInfo(_T197),[TypeInfo(TDragImageList)], pointer(8));
RegRegisterMethod(TDragObject,'GetDragImages',TypeInfo(_T197),[TypeInfo(TDragImageList)], getVMTProcAddr('TDragObject','GetDragImages',8));


//RegRegisterMethod(TDragObject,'WndProc',TypeInfo(_T198),[TypeInfo(TMessage)], pointer(12));
RegRegisterMethod(TDragObject,'WndProc',TypeInfo(_T198),[TypeInfo(TMessage)], getVMTProcAddr('TDragObject','WndProc',12));


//RegRegisterMethod(TDragObject,'Assign',TypeInfo(_T199),[TypeInfo(TDragObject)], pointer(16));
RegRegisterMethod(TDragObject,'Assign',TypeInfo(_T199),[TypeInfo(TDragObject)], getVMTProcAddr('TDragObject','Assign',16));


//RegRegisterMethod(TDragObject,'GetName',TypeInfo(_T200),[TypeInfo(string)], pointer(20));
RegRegisterMethod(TDragObject,'GetName',TypeInfo(_T200),[TypeInfo(string)], getVMTProcAddr('TDragObject','GetName',20));


//RegRegisterMethod(TDragObject,'HideDragImage',TypeInfo(_T201),NoParams, pointer(24));
RegRegisterMethod(TDragObject,'HideDragImage',TypeInfo(_T201),NoParams, getVMTProcAddr('TDragObject','HideDragImage',24));


//RegRegisterMethod(TDragObject,'Instance',TypeInfo(_T202),[TypeInfo(THandle)], pointer(28));
RegRegisterMethod(TDragObject,'Instance',TypeInfo(_T202),[TypeInfo(THandle)], getVMTProcAddr('TDragObject','Instance',28));


//RegRegisterMethod(TDragObject,'ShowDragImage',TypeInfo(_T203),NoParams, pointer(32));
RegRegisterMethod(TDragObject,'ShowDragImage',TypeInfo(_T203),NoParams, getVMTProcAddr('TDragObject','ShowDragImage',32));


//RegRegisterMethod(TGraphicControl,'Paint',TypeInfo(_T204),NoParams, pointer(96));
RegRegisterMethod(TGraphicControl,'Paint',TypeInfo(_T204),NoParams, getVMTProcAddr('TGraphicControl','Paint',96));


//RegRegisterMethod(THintWindow,'NCPaint',TypeInfo(_T205),[TypeInfo(HDC)], pointer(172));
RegRegisterMethod(THintWindow,'NCPaint',TypeInfo(_T205),[TypeInfo(HDC)], getVMTProcAddr('THintWindow','NCPaint',172));


//RegRegisterMethod(THintWindow,'ActivateHint',TypeInfo(_T206),[TypeInfo(IDispatch),TypeInfo(string)], pointer(176));
RegRegisterMethod(THintWindow,'ActivateHint',TypeInfo(_T206),[TypeInfo(IDispatch),TypeInfo(string)], getVMTProcAddr('THintWindow','ActivateHint',176));


//RegRegisterMethod(THintWindow,'ActivateHintData',TypeInfo(_T207),[TypeInfo(IDispatch),TypeInfo(string),TypeInfoPointer], pointer(180));
RegRegisterMethod(THintWindow,'ActivateHintData',TypeInfo(_T207),[TypeInfo(IDispatch),TypeInfo(string),TypeInfoPointer], getVMTProcAddr('THintWindow','ActivateHintData',180));


//RegRegisterMethod(THintWindow,'CalcHintRect',TypeInfo(_T208),[TypeInfo(Integer),TypeInfo(string),TypeInfoPointer,TypeInfo(IDispatch)], pointer(184));
RegRegisterMethod(THintWindow,'CalcHintRect',TypeInfo(_T208),[TypeInfo(Integer),TypeInfo(string),TypeInfoPointer,TypeInfo(IDispatch)], getVMTProcAddr('THintWindow','CalcHintRect',184));


//RegRegisterMethod(THintWindow,'IsHintMsg',TypeInfo(_T209),[TypeInfo(IDispatch),TypeInfo(Boolean)], pointer(188));
RegRegisterMethod(THintWindow,'IsHintMsg',TypeInfo(_T209),[TypeInfo(IDispatch),TypeInfo(Boolean)], getVMTProcAddr('THintWindow','IsHintMsg',188));


//RegRegisterMethod(THintWindow,'ShouldHideHint',TypeInfo(_T210),[TypeInfo(Boolean)], pointer(192));
RegRegisterMethod(THintWindow,'ShouldHideHint',TypeInfo(_T210),[TypeInfo(Boolean)], getVMTProcAddr('THintWindow','ShouldHideHint',192));


RegRegisterMethod(THintWindow,'ReleaseHandle',TypeInfo(_T211),NoParams,Addr(THintWindow.ReleaseHandle));

//RegRegisterMethod(TMargins,'Change',TypeInfo(_T212),NoParams, pointer(12));
RegRegisterMethod(TMargins,'Change',TypeInfo(_T212),NoParams, getVMTProcAddr('TMargins','Change',12));


//RegRegisterMethod(TMargins,'GetControlBound',TypeInfo(_T213),[TypeInfo(Integer),TypeInfo(Integer)], pointer(16));
RegRegisterMethod(TMargins,'GetControlBound',TypeInfo(_T213),[TypeInfo(Integer),TypeInfo(Integer)], getVMTProcAddr('TMargins','GetControlBound',16));


RegisterProc(TMargins,'InitDefaults',mtClassMethod,TypeInfo(_T214),[
TypeInfo(TMargins)], pointer(20),cRegister);

RegisterProc(TMargins,'Create',mtConstructor,TypeInfo(_T215),[
TypeInfo(TControl)], pointer(24),cRegister);

RegRegisterMethod(TMargins,'SetControlBounds',TypeInfo(_T216),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Boolean)],Addr(__TMargins__SetControlBounds__Wrapper));

RegRegisterMethod(TMargins,'SetBounds',TypeInfo(_T217),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TMargins.SetBounds));

RegisterProc(TMouse,'Create',mtConstructor,TypeInfo(_T218),NoParams,Addr(TMouse.Create),cRegister);

RegRegisterMethod(TMouse,'SettingChanged',TypeInfo(_T219),[
TypeInfo(Integer)],Addr(TMouse.SettingChanged));

RegRegisterMethod(TMouse,'CreatePanningWindow',TypeInfo(_T220),[TypeInfo(TCustomPanningWindow)],Addr(TMouse.CreatePanningWindow));

//RegRegisterMethod(TSizeConstraints,'Change',TypeInfo(_T221),NoParams, pointer(12));
RegRegisterMethod(TSizeConstraints,'Change',TypeInfo(_T221),NoParams, getVMTProcAddr('TSizeConstraints','Change',12));


RegisterProc(TSizeConstraints,'Create',mtConstructor,TypeInfo(_T222),[
TypeInfo(TControl)], pointer(16),cRegister);

//RegRegisterMethod(TWinControl,'AdjustClientRect',TypeInfo(_T223),[TypeInfo(IDispatch)], pointer(96));
RegRegisterMethod(TWinControl,'AdjustClientRect',TypeInfo(_T223),[TypeInfo(IDispatch)], getVMTProcAddr('TWinControl','AdjustClientRect',96));


//RegRegisterMethod(TWinControl,'AlignControls',TypeInfo(_T224),[TypeInfo(TControl),TypeInfo(IDispatch)], pointer(100));
RegRegisterMethod(TWinControl,'AlignControls',TypeInfo(_T224),[TypeInfo(TControl),TypeInfo(IDispatch)], getVMTProcAddr('TWinControl','AlignControls',100));


RegRegisterMethod(TWinControl,'ControlsAligned',TypeInfo(_T225),NoParams, pointer(MinVMTOffset - 41));

//RegRegisterMethod(TWinControl,'CreateHandle',TypeInfo(_T227),NoParams, pointer(104));
RegRegisterMethod(TWinControl,'CreateHandle',TypeInfo(_T227),NoParams, getVMTProcAddr('TWinControl','CreateHandle',104));


//RegRegisterMethod(TWinControl,'CreateParams',TypeInfo(_T228),[TypeInfo(IDispatch)], pointer(108));
RegRegisterMethod(TWinControl,'CreateParams',TypeInfo(_T228),[TypeInfo(IDispatch)], getVMTProcAddr('TWinControl','CreateParams',108));


//RegRegisterMethod(TWinControl,'CreateWindowHandle',TypeInfo(_T229),[TypeInfo(IDispatch)], pointer(112));
RegRegisterMethod(TWinControl,'CreateWindowHandle',TypeInfo(_T229),[TypeInfo(IDispatch)], getVMTProcAddr('TWinControl','CreateWindowHandle',112));


//RegRegisterMethod(TWinControl,'CreateWnd',TypeInfo(_T230),NoParams, pointer(116));
RegRegisterMethod(TWinControl,'CreateWnd',TypeInfo(_T230),NoParams, getVMTProcAddr('TWinControl','CreateWnd',116));


//RegRegisterMethod(TWinControl,'CustomAlignInsertBefore',TypeInfo(_T231),[TypeInfo(TControl),TypeInfo(TControl),TypeInfo(Boolean)], pointer(120));
RegRegisterMethod(TWinControl,'CustomAlignInsertBefore',TypeInfo(_T231),[TypeInfo(TControl),TypeInfo(TControl),TypeInfo(Boolean)], getVMTProcAddr('TWinControl','CustomAlignInsertBefore',120));


//RegRegisterMethod(TWinControl,'CustomAlignPosition',TypeInfo(_T232),[TypeInfo(TControl),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(IDispatch),TypeInfo(IDispatch)], pointer(124));
RegRegisterMethod(TWinControl,'CustomAlignPosition',TypeInfo(_T232),[TypeInfo(TControl),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(IDispatch),TypeInfo(IDispatch)], getVMTProcAddr('TWinControl','CustomAlignPosition',124));


//RegRegisterMethod(TWinControl,'DestroyHandle',TypeInfo(_T233),NoParams, pointer(128));
RegRegisterMethod(TWinControl,'DestroyHandle',TypeInfo(_T233),NoParams, getVMTProcAddr('TWinControl','DestroyHandle',128));


//RegRegisterMethod(TWinControl,'DestroyWindowHandle',TypeInfo(_T234),NoParams, pointer(132));
RegRegisterMethod(TWinControl,'DestroyWindowHandle',TypeInfo(_T234),NoParams, getVMTProcAddr('TWinControl','DestroyWindowHandle',132));


//RegRegisterMethod(TWinControl,'DestroyWnd',TypeInfo(_T235),NoParams, pointer(136));
RegRegisterMethod(TWinControl,'DestroyWnd',TypeInfo(_T235),NoParams, getVMTProcAddr('TWinControl','DestroyWnd',136));


RegRegisterMethod(TWinControl,'DoAddDockClient',TypeInfo(_T236),[
TypeInfo(TControl),
TypeInfo(IDispatch)], pointer(MinVMTOffset - 43));

RegRegisterMethod(TWinControl,'DockOver',TypeInfo(_T237),[
TypeInfo(TDragDockObject),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(TDragState),
TypeInfo(Boolean)], pointer(MinVMTOffset - 44));

//RegRegisterMethod(TWinControl,'DockReplaceDockClient',TypeInfo(_T238),[TypeInfo(TControl),TypeInfo(TWinControl),TypeInfo(TControl),TypeInfo(TAlign),TypeInfo(TControl),TypeInfo(Boolean)], pointer(140));
RegRegisterMethod(TWinControl,'DockReplaceDockClient',TypeInfo(_T238),[TypeInfo(TControl),TypeInfo(TWinControl),TypeInfo(TControl),TypeInfo(TAlign),TypeInfo(TControl),TypeInfo(Boolean)], getVMTProcAddr('TWinControl','DockReplaceDockClient',140));


RegRegisterMethod(TWinControl,'DoDockOver',TypeInfo(_T239),[
TypeInfo(TDragDockObject),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(TDragState),
TypeInfo(Boolean)], pointer(MinVMTOffset - 45));

RegRegisterMethod(TWinControl,'DoEnter',TypeInfo(_T240),NoParams, pointer(MinVMTOffset - 46));

RegRegisterMethod(TWinControl,'DoExit',TypeInfo(_T241),NoParams, pointer(MinVMTOffset - 47));

RegRegisterMethod(TWinControl,'DoFlipChildren',TypeInfo(_T242),NoParams, pointer(MinVMTOffset - 48));

RegRegisterMethod(TWinControl,'DoRemoveDockClient',TypeInfo(_T243),[
TypeInfo(TControl)], pointer(MinVMTOffset - 49));

RegRegisterMethod(TWinControl,'DoUnDock',TypeInfo(_T244),[
TypeInfo(TWinControl),
TypeInfo(TControl),TypeInfo(Boolean)], pointer(MinVMTOffset - 50));

//RegRegisterMethod(TWinControl,'GetControlExtents',TypeInfo(_T245),[TypeInfo(IDispatch)], pointer(144));
RegRegisterMethod(TWinControl,'GetControlExtents',TypeInfo(_T245),[TypeInfo(IDispatch)], getVMTProcAddr('TWinControl','GetControlExtents',144));


RegRegisterMethod(TWinControl,'GetSiteInfo',TypeInfo(_T246),[
TypeInfo(TControl),
TypeInfo(IDispatch),
TypeInfo(IDispatch),
TypeInfo(Boolean)], pointer(MinVMTOffset - 51));

RegRegisterMethod(TWinControl,'IsQualifyingSite',TypeInfo(_T247),[
TypeInfo(TControl),TypeInfo(Boolean)], pointer(MinVMTOffset - 52));

RegRegisterMethod(TWinControl,'KeyDown',TypeInfo(_T248),[
TypeInfo(Word),
TypeInfo(TShiftState)], pointer(MinVMTOffset - 53));

RegRegisterMethod(TWinControl,'KeyUp',TypeInfo(_T249),[
TypeInfo(Word),
TypeInfo(TShiftState)], pointer(MinVMTOffset - 54));

RegRegisterMethod(TWinControl,'KeyPress',TypeInfo(_T250),[
TypeInfo(Char)], pointer(MinVMTOffset - 55));

//RegRegisterMethod(TWinControl,'PaintWindow',TypeInfo(_T251),[TypeInfo(HDC)], pointer(148));
RegRegisterMethod(TWinControl,'PaintWindow',TypeInfo(_T251),[TypeInfo(HDC)], getVMTProcAddr('TWinControl','PaintWindow',148));


RegRegisterMethod(TWinControl,'ReloadDockedControl',TypeInfo(_T252),[
TypeInfo(string),
TypeInfo(TControl)], pointer(MinVMTOffset - 56));

//RegRegisterMethod(TWinControl,'SetParentBackground',TypeInfo(_T253),[TypeInfo(Boolean)], pointer(152));
RegRegisterMethod(TWinControl,'SetParentBackground',TypeInfo(_T253),[TypeInfo(Boolean)], getVMTProcAddr('TWinControl','SetParentBackground',152));


//RegRegisterMethod(TWinControl,'ShowControl',TypeInfo(_T254),[TypeInfo(TControl)], pointer(156));
RegRegisterMethod(TWinControl,'ShowControl',TypeInfo(_T254),[TypeInfo(TControl)], getVMTProcAddr('TWinControl','ShowControl',156));


//RegRegisterMethod(TWinControl,'UpdateControlOriginalParentSize',TypeInfo(_T255),[TypeInfo(TControl),TypeInfo(IDispatch)], pointer(160));
RegRegisterMethod(TWinControl,'UpdateControlOriginalParentSize',TypeInfo(_T255),[TypeInfo(TControl),TypeInfo(IDispatch)], getVMTProcAddr('TWinControl','UpdateControlOriginalParentSize',160));


RegisterProc(TWinControl,'CreateParented',mtConstructor,TypeInfo(_T256),[
TypeInfo(HWND)],Addr(TWinControl.CreateParented),cRegister);

RegisterProc(TWinControl,'CreateParentedControl',mtClassMethod,TypeInfo(_T257),[
TypeInfo(HWND),TypeInfo(TWinControl)],Addr(TWinControl.CreateParentedControl),cRegister);

RegRegisterMethod(TWinControl,'Broadcast',TypeInfo(_T258),[
TypeInfoUntyped],Addr(TWinControl.Broadcast));

RegRegisterMethod(TWinControl,'CanFocus',TypeInfo(_T259),[TypeInfo(Boolean)], pointer(MinVMTOffset - 57));

RegRegisterMethod(TWinControl,'ContainsControl',TypeInfo(_T260),[
TypeInfo(TControl),TypeInfo(Boolean)],Addr(TWinControl.ContainsControl));

RegisterProc(TWinControl,'ControlAtPos',mtScriptMethod,TypeInfo(_T261),[
TypeInfo(IDispatch),
TypeInfo(Boolean),
TypeInfo(Boolean),
TypeInfo(Boolean),TypeInfo(TControl)],Addr(__TWinControl__ControlAtPos__Wrapper),cRegister);

RegRegisterMethod(TWinControl,'DisableAlign',TypeInfo(_T262),NoParams,Addr(TWinControl.DisableAlign));

RegRegisterMethod(TWinControl,'DockDrop',TypeInfo(_T263),[
TypeInfo(TDragDockObject),
TypeInfo(Integer),
TypeInfo(Integer)], pointer(MinVMTOffset - 58));

RegRegisterMethod(TWinControl,'EnableAlign',TypeInfo(_T264),NoParams,Addr(TWinControl.EnableAlign));

RegRegisterMethod(TWinControl,'FindChildControl',TypeInfo(_T265),[
TypeInfo(string),TypeInfo(TControl)],Addr(TWinControl.FindChildControl));

RegRegisterMethod(TWinControl,'FlipChildren',TypeInfo(_T266),[
TypeInfo(Boolean)], pointer(MinVMTOffset - 59));

RegRegisterMethod(TWinControl,'Focused',TypeInfo(_T267),[TypeInfo(Boolean)], pointer(MinVMTOffset - 60));

RegRegisterMethod(TWinControl,'GetTabOrderList',TypeInfo(_T268),[
TypeInfo(TList)], pointer(MinVMTOffset - 61));

RegRegisterMethod(TWinControl,'HandleAllocated',TypeInfo(_T269),[TypeInfo(Boolean)],Addr(TWinControl.HandleAllocated));

RegRegisterMethod(TWinControl,'HandleNeeded',TypeInfo(_T270),NoParams,Addr(TWinControl.HandleNeeded));

RegRegisterMethod(TWinControl,'InsertControl',TypeInfo(_T271),[
TypeInfo(TControl)],Addr(TWinControl.InsertControl));

RegRegisterMethod(TWinControl,'PaintTo',TypeInfo(_T272),[
TypeInfo(HDC),
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TWinControl.PaintTo));

RegRegisterMethod(TWinControl,'PreProcessMessage',TypeInfo(_T273),[
TypeInfo(IDispatch),TypeInfo(Boolean)], pointer(MinVMTOffset - 62));

RegRegisterMethod(TWinControl,'RemoveControl',TypeInfo(_T274),[
TypeInfo(TControl)],Addr(TWinControl.RemoveControl));

RegRegisterMethod(TWinControl,'Realign',TypeInfo(_T275),NoParams,Addr(TWinControl.Realign));

RegRegisterMethod(TWinControl,'ScaleBy',TypeInfo(_T276),[
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TWinControl.ScaleBy));

RegRegisterMethod(TWinControl,'ScaleForPPI',TypeInfo(__T276),[
TypeInfo(Integer)],Addr(TWinControl.ScaleForPPI));

RegRegisterMethod(TWinControl,'ScrollBy',TypeInfo(_T277),[
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TWinControl.ScrollBy));

//RegRegisterMethod(TWinControl,'SetFocus',TypeInfo(_T278),NoParams, pointer(164));
RegRegisterMethod(TWinControl,'SetFocus',TypeInfo(_T278),NoParams, getVMTProcAddr('TWinControl','SetFocus',164));


RegRegisterMethod(TWinControl,'UpdateControlState',TypeInfo(_T279),NoParams,Addr(TWinControl.UpdateControlState));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'GetCursorValues',mtProc,TypeInfo(_T15),[
TypeInfo(TGetStrProc)],Addr(GetCursorValues),cRegister)}

{RegisterProc(nil,'Imm32SetCompositionFont',mtProc,TypeInfo(_T34),[
TypeInfo(HIMC),
TypeInfoPointer,TypeInfo(Boolean)],Addr(Imm32SetCompositionFont),cRegister)}

{RegRegisterMethod(TControl,'GetActionLinkClass',TypeInfo(_T67),[TypeInfo(TControlActionLinkClass)], pointer(MinVMTOffset - 22))}

{RegRegisterMethod(TControl,'GetFloatingDockSiteClass',TypeInfo(_T75),[TypeInfo(TWinControlClass)], pointer(40))}

{RegRegisterMethod(TControl,'GetTextBuf',TypeInfo(_T106),[
TypeInfoPChar,
TypeInfo(Integer),TypeInfo(Integer)],Addr(TControl.GetTextBuf))}

{RegRegisterMethod(TControl,'SetTextBuf',TypeInfo(_T124),[
TypeInfoPChar],Addr(TControl.SetTextBuf))}

{RegRegisterMethod(TWinControl,'CreateDockManager',TypeInfo(_T226),[TypeInfo(IDockManager)], pointer(MinVMTOffset - 42))}

RegisterEvent(TypeInfo(TAlignInsertBeforeEvent),[
TypeInfo(TWinControl),
TypeInfo(TControl),
TypeInfo(TControl),TypeInfo(Boolean)]);

{RegisterEvent(TypeInfo(TAlignPositionEvent),[
TypeInfo(TWinControl),
TypeInfo(TControl),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(IDispatch),
TypeInfo(IDispatch)]);}

RegisterEvent(TypeInfo(TCanResizeEvent),[
TypeInfo(TObject),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TConstrainedResizeEvent),[
TypeInfo(TObject),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer)]);

{RegisterEvent(TypeInfo(TContextPopupEvent),[
TypeInfo(TObject),
TypeInfo(IDispatch),
TypeInfo(Boolean)]);}

RegisterEvent(TypeInfo(TDockDropEvent),[
TypeInfo(TObject),
TypeInfo(TDragDockObject),
TypeInfo(Integer),
TypeInfo(Integer)]);

RegisterEvent(TypeInfo(TDockOverEvent),[
TypeInfo(TObject),
TypeInfo(TDragDockObject),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(TDragState),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TDragDropEvent),[
TypeInfo(TObject),
TypeInfo(TObject),
TypeInfo(Integer),
TypeInfo(Integer)]);

RegisterEvent(TypeInfo(TDragOverEvent),[
TypeInfo(TObject),
TypeInfo(TObject),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(TDragState),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TEndDragEvent),[
TypeInfo(TObject),
TypeInfo(TObject),
TypeInfo(Integer),
TypeInfo(Integer)]);

RegisterEvent(TypeInfo(TForEachZoneProc),[
TypeInfo(TDockZone)]);

{RegisterEvent(TypeInfo(TGetSiteInfoEvent),[
TypeInfo(TObject),
TypeInfo(TControl),
TypeInfo(IDispatch),
TypeInfo(IDispatch),
TypeInfo(Boolean)]);}

RegisterEvent(TypeInfo(TKeyEvent),[
TypeInfo(TObject),
TypeInfo(Word),
TypeInfo(TShiftState)]);

RegisterEvent(TypeInfo(TKeyPressEvent),[
TypeInfo(TObject),
TypeInfo(Char)]);

RegisterEvent(TypeInfo(TMouseActivateEvent),[
TypeInfo(TObject),
TypeInfo(TMouseButton),
TypeInfo(TShiftState),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(TMouseActivate)]);

RegisterEvent(TypeInfo(TMouseEvent),[
TypeInfo(TObject),
TypeInfo(TMouseButton),
TypeInfo(TShiftState),
TypeInfo(Integer),
TypeInfo(Integer)]);

RegisterEvent(TypeInfo(TMouseMoveEvent),[
TypeInfo(TObject),
TypeInfo(TShiftState),
TypeInfo(Integer),
TypeInfo(Integer)]);

{RegisterEvent(TypeInfo(TMouseWheelEvent),[
TypeInfo(TObject),
TypeInfo(TShiftState),
TypeInfo(Integer),
TypeInfo(IDispatch),
TypeInfo(Boolean)]);}

{RegisterEvent(TypeInfo(TMouseWheelUpDownEvent),[
TypeInfo(TObject),
TypeInfo(TShiftState),
TypeInfo(IDispatch),
TypeInfo(Boolean)]);}

RegisterEvent(TypeInfo(TStartDockEvent),[
TypeInfo(TObject),
TypeInfo(TDragDockObject)]);

RegisterEvent(TypeInfo(TStartDragEvent),[
TypeInfo(TObject),
TypeInfo(TDragObject)]);

RegisterEvent(TypeInfo(TUnDockEvent),[
TypeInfo(TObject),
TypeInfo(TControl),
TypeInfo(TWinControl),
TypeInfo(Boolean)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
