{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDMAPPEDPORTTCP_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdGlobal,
  IdTCPConnection,
  IdTCPServer,
  IdAssignedNumbers,
  SysUtils,
  IdMappedPortTCP;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TIdMappedPortTCP__ = class(TIdMappedPortTCP);
type
_T0 = procedure (p0 : TIdMappedPortThread;
const p1 : String;
var p2 : String;
var p3 : String) of object;

_T1 = procedure (p0 : TIdMappedPortThread) of object;

_T2 = _T1;

_T3 = procedure (p0 : TIdMappedPortThread;
const p1 : Exception) of object;

_T4 = _T1;

_T5 = _T1;

_T6 = procedure  of object;

procedure __TIdMappedPortTCP__DoOutboundClientConnect__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
__TIdMappedPortTCP__(__Instance).DoOutboundClientConnect(TIdMappedPortThread(VarToObject(OleVariant(pargs^[0]))));
end;
2:
begin
__TIdMappedPortTCP__(__Instance).DoOutboundClientConnect(TIdMappedPortThread(VarToObject(OleVariant(pargs^[1]))),Exception(VarToObject(OleVariant(pargs^[0]))));
end;
end
end;

function __DC__GetTIdCustomMappedTelnet__AllowedConnectAttempts(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdCustomMappedTelnet(Instance).AllowedConnectAttempts;
end;

procedure __DC__SetTIdCustomMappedTelnet__AllowedConnectAttempts(Instance : TObject; Params : PVariantArgList);
begin
TIdCustomMappedTelnet(Instance).AllowedConnectAttempts:=OleVariant(Params^[0]);
end;

function __DC__GetTIdMappedPortThread__ConnectTimeOut(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMappedPortThread(Instance).ConnectTimeOut;
end;

procedure __DC__SetTIdMappedPortThread__ConnectTimeOut(Instance : TObject; Params : PVariantArgList);
begin
TIdMappedPortThread(Instance).ConnectTimeOut:=OleVariant(Params^[0]);
end;

function __DC__GetTIdMappedPortThread__NetData(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMappedPortThread(Instance).NetData;
end;

procedure __DC__SetTIdMappedPortThread__NetData(Instance : TObject; Params : PVariantArgList);
begin
TIdMappedPortThread(Instance).NetData:=OleVariant(Params^[0]);
end;

function __DC__GetTIdMappedPortThread__OutboundClient(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdMappedPortThread(Instance).OutboundClient);
end;

procedure __DC__SetTIdMappedPortThread__OutboundClient(Instance : TObject; Params : PVariantArgList);
begin
TIdMappedPortThread(Instance).OutboundClient:=TIdTCPConnection(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIdMappedPortThread__ReadList(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdMappedPortThread(Instance).ReadList);
end;

function __DC__GetTIdMappedTelnetThread__AllowedConnectAttempts(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMappedTelnetThread(Instance).AllowedConnectAttempts;
end;

procedure __RegisterProps;
begin
RegisterProperty(TIdCustomMappedTelnet,'AllowedConnectAttempts',__DC__GetTIdCustomMappedTelnet__AllowedConnectAttempts,__DC__SetTIdCustomMappedTelnet__AllowedConnectAttempts);
RegisterProperty(TIdMappedPortThread,'ConnectTimeOut',__DC__GetTIdMappedPortThread__ConnectTimeOut,__DC__SetTIdMappedPortThread__ConnectTimeOut);
RegisterProperty(TIdMappedPortThread,'NetData',__DC__GetTIdMappedPortThread__NetData,__DC__SetTIdMappedPortThread__NetData);
RegisterProperty(TIdMappedPortThread,'OutboundClient',__DC__GetTIdMappedPortThread__OutboundClient,__DC__SetTIdMappedPortThread__OutboundClient);
RegisterProperty(TIdMappedPortThread,'ReadList',__DC__GetTIdMappedPortThread__ReadList,nil);
RegisterProperty(TIdMappedTelnetThread,'AllowedConnectAttempts',__DC__GetTIdMappedTelnetThread__AllowedConnectAttempts,nil);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..6] of TClass = (
TIdCustomMappedTelnet,
TIdMappedPop3,
TIdMappedPop3Thread,
TIdMappedPortTCP,
TIdMappedPortThread,
TIdMappedTelnet,
TIdMappedTelnetThread
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TIdCustomMappedTelnet,'DoCheckHostPort',TypeInfo(_T0),[TypeInfo(TIdMappedPortThread),TypeInfo(String),TypeInfo(String),TypeInfo(String)], pointer(120));
RegRegisterMethod(TIdCustomMappedTelnet,'DoCheckHostPort',TypeInfo(_T0),[TypeInfo(TIdMappedPortThread),TypeInfo(String),TypeInfo(String),TypeInfo(String)],  getVMTProcAddr('TIdCustomMappedTelnet','DoCheckHostPort',120));


//RegRegisterMethod(TIdMappedPortTCP,'DoLocalClientConnect',TypeInfo(_T1),[TypeInfo(TIdMappedPortThread)], pointer(100));
RegRegisterMethod(TIdMappedPortTCP,'DoLocalClientConnect',TypeInfo(_T1),[TypeInfo(TIdMappedPortThread)],  getVMTProcAddr('TIdMappedPortTCP','DoLocalClientConnect',100));


//RegRegisterMethod(TIdMappedPortTCP,'DoLocalClientData',TypeInfo(_T2),[TypeInfo(TIdMappedPortThread)], pointer(104));
RegRegisterMethod(TIdMappedPortTCP,'DoLocalClientData',TypeInfo(_T2),[TypeInfo(TIdMappedPortThread)],  getVMTProcAddr('TIdMappedPortTCP','DoLocalClientData',104));


RegisterProc(TIdMappedPortTCP,'DoOutboundClientConnect',mtScriptMethod,TypeInfo(_T3),[
TypeInfo(TIdMappedPortThread),
TypeInfo(Exception)],Addr(__TIdMappedPortTCP__DoOutboundClientConnect__Wrapper),cRegister);

//RegRegisterMethod(TIdMappedPortTCP,'DoOutboundClientData',TypeInfo(_T4),[TypeInfo(TIdMappedPortThread)], pointer(112));
RegRegisterMethod(TIdMappedPortTCP,'DoOutboundClientData',TypeInfo(_T4),[TypeInfo(TIdMappedPortThread)],  getVMTProcAddr('TIdMappedPortTCP','DoOutboundClientData',112));


//RegRegisterMethod(TIdMappedPortTCP,'DoOutboundDisconnect',TypeInfo(_T5),[TypeInfo(TIdMappedPortThread)], pointer(116));
RegRegisterMethod(TIdMappedPortTCP,'DoOutboundDisconnect',TypeInfo(_T5),[TypeInfo(TIdMappedPortThread)],  getVMTProcAddr('TIdMappedPortTCP','DoOutboundDisconnect',116));


//RegRegisterMethod(TIdMappedPortThread,'OutboundConnect',TypeInfo(_T6),NoParams, pointer(60));
RegRegisterMethod(TIdMappedPortThread,'OutboundConnect',TypeInfo(_T6),NoParams,  getVMTProcAddr('TIdMappedPortThread','OutboundConnect',60));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
RegisterEvent(TypeInfo(TIdMappedPortOutboundConnectEvent),[
TypeInfo(TIdMappedPortThread),
TypeInfo(Exception)]);

RegisterEvent(TypeInfo(TIdMappedPortThreadEvent),[
TypeInfo(TIdMappedPortThread)]);

RegisterEvent(TypeInfo(TIdMappedTelnetCheckHostPort),[
TypeInfo(TIdMappedPortThread),
TypeInfo(String),
TypeInfo(String),
TypeInfo(String)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
