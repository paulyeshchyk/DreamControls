{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit SYSINIT_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (p0 : Boolean;
p1 : Boolean;
p2 : Longint;
p3 : Boolean) of object;

_T1 = procedure  of object;

procedure __RegisterProps;
begin
end;

function __DC__GetSysInit__ModuleIsLib(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysInit.ModuleIsLib;
end;

procedure __DC__SetSysInit__ModuleIsLib(Instance : TObject; Params : PVariantArgList);
begin
SysInit.ModuleIsLib:=OleVariant(Params^[0]);
end;

function __DC__GetSysInit__ModuleIsPackage(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysInit.ModuleIsPackage;
end;

procedure __DC__SetSysInit__ModuleIsPackage(Instance : TObject; Params : PVariantArgList);
begin
SysInit.ModuleIsPackage:=OleVariant(Params^[0]);
end;

function __DC__GetSysInit__ModuleIsCpp(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysInit.ModuleIsCpp;
end;

procedure __DC__SetSysInit__ModuleIsCpp(Instance : TObject; Params : PVariantArgList);
begin
SysInit.ModuleIsCpp:=OleVariant(Params^[0]);
end;

function __DC__GetSysInit__TlsIndex(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysInit.TlsIndex;
end;

procedure __DC__SetSysInit__TlsIndex(Instance : TObject; Params : PVariantArgList);
begin
SysInit.TlsIndex:=OleVariant(Params^[0]);
end;

function __DC__GetSysInit__TlsLast(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysInit.TlsLast;
end;

procedure __DC__SetSysInit__TlsLast(Instance : TObject; Params : PVariantArgList);
begin
SysInit.TlsLast:=OleVariant(Params^[0]);
end;

function __DC__GetSysInit__HInstance(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysInit.HInstance;
end;

procedure __DC__SetSysInit__HInstance(Instance : TObject; Params : PVariantArgList);
begin
SysInit.HInstance:=OleVariant(Params^[0]);
end;

function __DC__GetSysInit__DataMark(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysInit.DataMark;
end;

procedure __DC__SetSysInit__DataMark(Instance : TObject; Params : PVariantArgList);
begin
SysInit.DataMark:=OleVariant(Params^[0]);
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('ModuleIsLib',__DC__GetSysInit__ModuleIsLib,__DC__SetSysInit__ModuleIsLib));
__RegisteredVars.Add(RegisterVar('ModuleIsPackage',__DC__GetSysInit__ModuleIsPackage,__DC__SetSysInit__ModuleIsPackage));
__RegisteredVars.Add(RegisterVar('ModuleIsCpp',__DC__GetSysInit__ModuleIsCpp,__DC__SetSysInit__ModuleIsCpp));
__RegisteredVars.Add(RegisterVar('TlsIndex',__DC__GetSysInit__TlsIndex,__DC__SetSysInit__TlsIndex));
__RegisteredVars.Add(RegisterVar('TlsLast',__DC__GetSysInit__TlsLast,__DC__SetSysInit__TlsLast));
__RegisteredVars.Add(RegisterVar('HInstance',__DC__GetSysInit__HInstance,__DC__SetSysInit__HInstance));
__RegisteredVars.Add(RegisterVar('DataMark',__DC__GetSysInit__DataMark,__DC__SetSysInit__DataMark));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..0] of string = (
'PtrToNil'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,Integer(PtrToNil)));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..1] of string = (
'VclInit'
,'VclExit'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(Boolean),
TypeInfo(Boolean),
TypeInfo(Longint),
TypeInfo(Boolean)],Addr(VclInit),cCdecl);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),NoParams,Addr(VclExit),cCdecl);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
