{*******************************************************}
{                                                       }
{ Import unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

Unit Classes_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Messages,
  ActiveX,
  SysUtils,
  Variants,
  TypInfo,
  Classes;

    type
  TSynchronizeRecord = record
      FThread: TObject;
      FMethod: TThreadMethod;
      FProcedure: TThreadProcedure;
      FSynchronizeException: TObject;
    end;


function ConvertTIdentMapEntryToVariant(var R : TIdentMapEntry) : OleVariant;
function ConvertVariantToTIdentMapEntry(const V : OleVariant) : TIdentMapEntry;
function ConvertTStringItemToVariant(var R : TStringItem) : OleVariant;
function ConvertVariantToTStringItem(const V : OleVariant) : TStringItem;
function ConvertTSynchronizeRecordToVariant(var R : TSynchronizeRecord) : OleVariant;
function ConvertVariantToTSynchronizeRecord(const V : OleVariant) : TSynchronizeRecord;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TIdentMapEntry__Wrapper = class(TDCRecordWrapper)
private
fR : TIdentMapEntry;
public
function GetRecordPtr : pointer; override;
published
procedure setValue(const val : Integer);
function getValue : Integer;
property Value : Integer read getValue write setValue;
procedure setName(const val : AnsiString);
function getName : AnsiString;
property Name : AnsiString read getName write setName;
end;
type __TStringItem__Wrapper = class(TDCRecordWrapper)
private
fR : TStringItem;
public
function GetRecordPtr : pointer; override;
published
procedure setFString(const val : AnsiString);
function getFString : AnsiString;
property FString : AnsiString read getFString write setFString;
procedure setFObject(const val : TObject);
function getFObject : TObject;
property FObject : TObject read getFObject write setFObject;
end;
type __TSynchronizeRecord__Wrapper = class(TDCRecordWrapper)
private
fR : TSynchronizeRecord;
public
function GetRecordPtr : pointer; override;
published
procedure setFThread(const val : TObject);
function getFThread : TObject;
property FThread : TObject read getFThread write setFThread;
procedure setFProcedure(const val : TThreadProcedure);
function getFProcedure : TThreadProcedure;
property FProcedure : TThreadProcedure read getFProcedure write setFProcedure;
procedure setFSynchronizeException(const val : TObject);
function getFSynchronizeException : TObject;
property FSynchronizeException : TObject read getFSynchronizeException write setFSynchronizeException;
end;
type
_T0 = function (p0 : Integer; p1 : Integer): IDispatch of object;


_T1 = procedure  of object;

_T2 = _T1;

_T4 = function : TThread of object;

_T5 = function : Boolean of object;

_T6 = procedure (Force : Boolean) of object;

_T7 = function : TThreadPriority of object;

_T8 = procedure (Value : TThreadPriority) of object;

_T9 = procedure (Value : Boolean) of object;

_T10 = procedure (ErrCode : Integer) of object;

_T11 = _T1;

_T12 = _T1;

{_T13 = procedure (AMethod : TThreadMethod) of object;}

_T14 = function (const ThreadProc : TProc): TThread of object;

_T15 = _T1;

_T16 = _T1;

_T17 = _T1;

_T18 = _T1;

_T19 = function : LongWord of object;

_T20 = _T5;

_T21 = procedure (Value : Integer) of object;

{_T22 = procedure (AThread : TThread;
AMethod : TThreadMethod) of object;}

{_T23 = procedure (AThread : TThread;
AMethod : TThreadMethod) of object;}

{_T24 = procedure (AThread : TThread;
AMethod : TThreadMethod) of object;}

_T25 = procedure (AThreadName : AnsiString;
AThreadID : TThreadID) of object;

_T26 = procedure (Iterations : Integer) of object;

_T27 = procedure (Timeout : Integer) of object;

_T28 = _T1;

_T29 = function : TComponent of object;

_T30 = _T5;

_T31 = function (Index : Integer;
LocaleID : Integer;
var TypeInfo): HResult of object;

_T32 = function (const IID : TGUID;
Names : Pointer;
NameCount : Integer;
LocaleID : Integer;
DispIDs : Pointer): HResult of object;

_T33 = function (DispID : Integer;
const IID : TGUID;
LocaleID : Integer;
Flags : Word;
var Params : Word;
VarResult : Pointer;
ExcepInfo : Pointer;
ArgErr : Pointer): HResult of object;

_T34 = function (ExceptObject : TObject;
ExceptAddr : Pointer): HResult of object;

_T35 = _T1;

_T36 = _T1;

_T37 = procedure (AnObject : TPersistent;
Operation : TOperation) of object;

_T38 = function : IUnknown of object;

_T39 = function (AIndex : Integer): TComponent of object;

_T40 = function : Integer of object;

_T41 = _T40;

_T134 = procedure (AOwner : TComponent) of object;
_T42 = procedure (AComponent : TComponent) of object;

_T43 = procedure (Reader : TReader) of object;

_T44 = _T43;

_T45 = _T42;

_T46 = _T42;

_T47 = _T21;

_T48 = procedure (Enable : Boolean) of object;

_T49 = procedure (Writer : TWriter) of object;

_T50 = _T49;

_T51 = _T29;

_T52 = function (const AName : string;
var Index : Integer): TComponent of object;

_T53 = _T42;

_T54 = _T42;

_T55 = procedure (const NewName : TComponentName) of object;

_T56 = procedure (Proc : TGetChildProc;
Root : TComponent) of object;

_T57 = _T29;

_T58 = _T29;

_T59 = _T1;

_T60 = _T1;

_T61 = _T43;

_T62 = _T9;

_T63 = procedure (Value : Boolean;
SetChildren : Boolean) of object;

_T64 = _T9;

_T65 = _T9;

_T66 = _T55;

_T67 = procedure (Child : TComponent;
Order : Integer) of object;

_T68 = procedure (Value : TComponent) of object;

_T69 = _T1;

_T70 = _T1;

_T71 = procedure (Register : Boolean;
const ClassID : string;
const ProgID : string) of object;

_T72 = procedure (AComponent : TComponent;
const CurName : string;
const NewName : string) of object;

_T73 = _T42;

_T74 = _T42;

_T75 = _T49;

_T76 = _T1;

_T77 = function (const IID : TGUID;
var Obj): HResult of object;

_T78 = _T40;

_T79 = _T40;

_T80 = function (var Count : Integer): HResult of object;

_T81 = _T1;

_T82 = _T1;

_T83 = function (Action : TBasicAction): Boolean of object;

_T84 = function (const AName : string): TComponent of object;

_T85 = _T42;

_T86 = _T42;

_T87 = function : TComponentEnumerator of object;

_T88 = _T29;

_T89 = _T5;

_T90 = _T42;

_T91 = _T42;

_T92 = procedure (IsSubComponent : Boolean) of object;

_T93 = _T83;

_T94 = function (const I : IInterface): Boolean of object;

_T95 = function (const I : IInterface;
Operation : TOperation): Boolean of object;

_T96 = procedure (AClient : TObject) of object;

_T97 = _T1;

_T98 = _T5;

_T99 = procedure (Value : TBasicAction) of object;

{_T100 = procedure (Value : TNotifyEvent) of object;}

_T101 = _T5;

_T102 = procedure (const Value : TComponent) of object;

_T103 = function (Target : TObject): Boolean of object;

_T104 = procedure (Target : TObject) of object;

_T105 = _T104;

_T106 = procedure (Value : TBasicActionLink) of object;

_T107 = _T106;

_T108 = _T43;

_T109 = _T43;

_T110 = _T43;

_T111 = _T43;

_T112 = _T49;

_T113 = _T49;

_T114 = _T49;

_T115 = _T49;

_T116 = _T1;

_T117 = _T1;

_T118 = _T5;

_T119 = function (AX : Integer;
AY : Integer): TPoint of object;

_T120 = function (AX : SmallInt;
AY : SmallInt): TSmallPoint of object;

_T121 = function (const P1 : TPoint;
const P2 : TPoint): Boolean of object;

_T122 = function (X : Integer;
Y : Integer): Boolean of object;

_T123 = function (ALeft : Integer;
ATop : Integer;
ARight : Integer;
ABottom : Integer): TRect of object;

_T124 = function (ALeft : Integer;
ATop : Integer;
AWidth : Integer;
AHeight : Integer): TRect of object;

{_T125 = procedure (AClass : TPersistentClass) of object;}

{_T126 = procedure (AClasses : Array of TPersistentClass) of object;}

{_T127 = procedure (AClass : TPersistentClass;
const Alias : string) of object;}

{_T128 = procedure (AClass : TPersistentClass) of object;}

{_T129 = procedure (AClasses : Array of TPersistentClass) of object;}

_T130 = procedure (Module : HMODULE) of object;

{_T131 = function (const ClassName : string): TPersistentClass of object;}

{_T132 = function (const AClassName : string): TPersistentClass of object;}

{_T133 = procedure (AClass : TPersistentClass) of object;}

{_T134 = procedure (AClass : TPersistentClass;
AClassGroup : TPersistentClass) of object;}

{_T135 = function (AClass : TPersistentClass): TPersistentClass of object;}

{_T136 = function : TPersistentClass of object;}

{_T137 = function (AClass : TPersistentClass): TPersistentClass of object;}

{_T138 = procedure (const Page : string;
ComponentClasses : Array of TComponentClass) of object;}

{_T139 = procedure (const ComponentClasses : Array of TComponentClass) of object;}

{_T140 = procedure (const ComponentClasses : Array of TComponentClass;
AxRegType : TActiveXRegType) of object;}

{_T141 = procedure (AIntegerType : Pointer;
AIdentToInt : TIdentToInt;
AIntToIdent : TIntToIdent) of object;}

{_T142 = procedure (AIntegerType : Pointer;
AIdentToInt : TIdentToInt;
AIntToIdent : TIntToIdent) of object;}

{_T143 = procedure (AFindGlobalComponent : TFindGlobalComponent) of object;}

{_T144 = procedure (AFindGlobalComponent : TFindGlobalComponent) of object;}

_T145 = function (const Name : string): TComponent of object;

_T146 = function (const Name : string): Boolean of object;

_T147 = function (const Ident : string;
var Int : Longint;
const Map : IDispatch): Boolean of object;

_T148 = function (Int : Longint;
var Ident : string;
const Map : IDispatch): Boolean of object;

{_T149 = function (AIntegerType : Pointer): TIntToIdent of object;}

{_T150 = function (AIntegerType : Pointer): TIdentToInt of object;}

{_T151 = function (Instance : TComponent;
RootAncestor : TClass): Boolean of object;}

_T152 = function (const ResName : string;
Instance : TComponent): Boolean of object;

_T153 = function (const ResName : string;
Instance : TComponent): TComponent of object;

_T154 = function (HInstance : THandle;
const ResName : string): TComponent of object;

_T155 = function (const FileName : string;
Instance : TComponent): TComponent of object;

_T156 = procedure (const FileName : string;
Instance : TComponent) of object;

_T157 = _T1;

_T158 = procedure (Root : TComponent;
Names : TStrings) of object;

_T159 = procedure (Root : TComponent;
const ReferenceRootName : string;
Names : TStrings) of object;

_T160 = procedure (Root : TComponent;
const OldRootName : string;
const NewRootName : string) of object;

_T161 = procedure (Root : TComponent;
const RootName : string) of object;

_T162 = procedure (Instance : TPersistent) of object;

_T163 = function (Root : TComponent;
const NamePath : string): TComponent of object;

_T164 = _T1;

_T165 = _T1;

_T166 = _T1;

_T167 = function (C1 : TCollection;
C2 : TCollection;
Owner1 : TComponent;
Owner2 : TComponent): Boolean of object;

_T168 = function (ACollectionItem : TCollectionItem): TPersistent of object;

_T169 = procedure (Input : TStream;
Output : TStream) of object;

_T170 = _T169;

_T171 = _T169;

_T172 = _T169;

_T173 = function (Stream : TStream): TStreamOriginalFormat of object;

_T174 = function (ObjStream : TStream;
var AName : string): Boolean of object;

_T175 = procedure (ObjStream : TStream;
Output : TStream) of object;

_T176 = procedure (const AName : TBytes;
DataSize : Integer;
Output : TStream) of object;

_T177 = _T176;

{_T178 = function (Buffer : PAnsiChar;
BufPos : PAnsiChar): PAnsiChar of object;}

{_T179 = function (Separators : TSysCharSet;
WhiteSpace : TSysCharSet;
Content : PChar;
Strings : TStrings): Integer of object;}

{_T180 = procedure (Buffer : PAnsiChar;
Text : PWideChar;
BufSize : Integer) of object;}

{_T181 = function (Text : PWideChar;
Buffer : PAnsiChar;
BufSize : Integer): Integer of object;}

_T182 = function (Obj : TPersistent): IDesignerNotify of object;

{_T183 = function (Ancestor : TClass;
Descendent : TClass): Integer of object;}

_T184 = function (Timeout : Integer): Boolean of object;

{_T185 = function (AMethod : TWndMethod): Pointer of object;}

_T186 = procedure (ObjectInstance : Pointer) of object;

{_T187 = function (AMethod : TWndMethod): HWND of object;}

_T188 = procedure (Wnd : HWND) of object;

_T189 = function (Ancestor : TPersistent;
Root : TComponent;
RootAncestor : TComponent): Boolean of object;

_T191 = procedure (ResStringRec : PResStringRec;
const FileName : string) of object;

_T192 = function : TStream of object;

_T193 = _T40;

_T194 = procedure (Stream : TStream;
AEncoding : TEncoding) of object;

_T195 = _T1;

_T196 = _T40;

_T197 = _T40;

_T198 = _T5;

_T199 = function : Byte of object;

_T200 = function (Count : Integer): TBytes of object;

_T201 = function : Char of object;

_T202 = function (Count : Integer): TCharArray of object;

_T203 = function : Double of object;

_T204 = function : Shortint of object;

_T205 = _T204;

_T206 = _T40;

_T207 = _T40;

{_T208 = function : Int64 of object;}

_T209 = function : SmallInt of object;

_T210 = _T209;

_T211 = function : Single of object;

_T212 = function : string of object;

_T213 = function : Word of object;

_T214 = _T213;

_T215 = function : Cardinal of object;

_T216 = _T215;

_T217 = function : UInt64 of object;

_T218 = _T192;

_T219 = _T21;

_T220 = procedure (Stream : TStream) of object;

_T221 = _T1;

{_T222 = function (const Offset : Int64;
Origin : TSeekOrigin): Int64 of object;}

_T223 = procedure (Value : Byte) of object;

_T224 = _T40;

_T225 = procedure (const ABytes : TBytes) of object;

{_T226 = procedure (AClass : TPersistentClass;
AIncludeActiveGroups : Boolean) of object;}

{_T227 = function (const AClassName : string): TPersistentClass of object;}

{_T228 = procedure (Proc : TGetClass) of object;}

_T229 = procedure (var Item : TCollectionItem) of object;

_T230 = procedure (Item : TCollectionItem) of object;

_T231 = procedure (Item : TCollectionItem;
Action : TCollectionNotification) of object;

_T232 = _T40;

_T233 = function (Index : Integer): string of object;

_T234 = function (Index : Integer;
ItemIndex : Integer): string of object;

_T235 = _T230;

_T236 = _T230;

{_T237 = procedure (ItemClass : TCollectionItemClass) of object;}

_T238 = function : TPersistent of object;

_T239 = function : TCollectionItem of object;

_T240 = _T1;

_T241 = _T1;

_T242 = procedure (Index : Integer) of object;

_T243 = _T1;

_T244 = function (ID : Integer): TCollectionItem of object;

_T245 = function : TCollectionEnumerator of object;

_T246 = function (Index : Integer): TCollectionItem of object;

_T247 = procedure (ACollection : TCollection) of object;

_T248 = _T239;

_T249 = _T5;

_T250 = _T212;

_T251 = procedure (Value : TCollection) of object;

_T252 = _T21;

_T253 = procedure (const Value : string) of object;

_T254 = procedure (Collection : TCollection) of object;

_T255 = _T220;

_T256 = procedure (const FileName : string) of object;

_T257 = _T68;

_T258 = procedure (Stream : TStream;
BufSize : Integer) of object;

{_T259 = procedure (const Name : string;
ReadData : TReaderProc;
WriteData : TWriterProc;
HasData : Boolean) of object;}

{_T260 = procedure (const Name : string;
ReadData : TStreamProc;
WriteData : TStreamProc;
HasData : Boolean) of object;}

_T261 = _T1;

_T262 = procedure (const AFileName : string;
Mode : Word) of object;

_T263 = procedure (AHandle : Integer) of object;

_T264 = _T77;

_T265 = _T1;

_T266 = _T1;

_T267 = _T242;

_T268 = procedure (Index1 : Integer;
Index2 : Integer) of object;

_T269 = function : TInterfaceList of object;

_T270 = function : IInterface of object;

_T271 = function (const Item : IInterface): Integer of object;

_T272 = function (const Item : IInterface;
Direction : classes.Tlist.TDirection): Integer of object;

_T273 = _T271;

_T274 = procedure (Index : Integer;
const Item : IInterface) of object;

_T275 = _T270;

_T276 = _T271;

_T277 = _T272;

_T278 = _T1;

_T279 = _T1;

_T280 = function : TInterfaceListEnumerator of object;

_T281 = procedure (AInterfaceList : TInterfaceList) of object;

_T282 = _T270;

_T283 = _T5;

_T284 = _T1;

_T285 = procedure (Ptr : Pointer;
Action : TListNotification) of object;

_T286 = function (Item : Pointer): Integer of object;

_T287 = _T1;

_T288 = _T242;

_T289 = procedure (const Msg : string;
Data : Integer) of object;

_T290 = _T268;

_T291 = function : TList of object;

_T292 = function (Item : Pointer): Pointer of object;

_T293 = function (Item : Pointer;
Direction : classes.TList.TDirection): Pointer of object;

_T294 = function : Pointer of object;

_T295 = function : TListEnumerator of object;

_T296 = _T286;

_T297 = function (Item : Pointer;
Direction : classes.TList.TDirection): Integer of object;

_T298 = procedure (Index : Integer;
Item : Pointer) of object;

_T299 = _T294;

_T300 = procedure (CurIndex : Integer;
NewIndex : Integer) of object;

_T301 = _T286;

_T302 = _T297;

_T303 = _T1;

{_T304 = procedure (Compare : TListSortCompare) of object;}

_T305 = procedure (const Compare : TListSortCompareFunc) of object;

_T306 = procedure (ListA : TList;
AOperator : TListAssignOp;
ListB : TList) of object;

_T307 = procedure (AList : TList) of object;

_T308 = _T294;

_T309 = _T5;

_T310 = function (var NewCapacity : Longint): Pointer of object;

_T311 = _T1;

_T312 = _T220;

_T313 = _T256;

{_T314 = procedure (AOwner : TPersistent;
ItemClass : TCollectionItemClass) of object;}

{_T315 = procedure (Stream : TStream;
AOnError : TParserErrorEvent) of object;}

_T316 = procedure (T : Char) of object;

_T317 = procedure (const S : string) of object;

_T318 = procedure (const Ident : string) of object;

_T319 = procedure (const Ident : string;
const Args : Array of Const) of object;

_T320 = procedure (const Message : string) of object;

_T321 = _T220;

_T322 = _T201;

_T323 = function : Longint of object;

_T324 = _T212;

_T325 = function : Extended of object;

{_T326 = function : Int64 of object;}

_T327 = _T212;

_T328 = function : UnicodeString of object;

_T329 = function (const S : string): Boolean of object;

_T330 = procedure (Dest : TPersistent) of object;

_T331 = procedure (Filer : TFiler) of object;

_T332 = _T238;

_T333 = procedure (Source : TPersistent) of object;

_T334 = _T212;

_T335 = function (const Message : string): Boolean of object;

{_T336 = function (const Name : string;
ComponentClass : TPersistentClass): TComponent of object;}

_T337 = function (Root : TComponent;
const MethodName : string): TMethod of object;

_T338 = function (Root : TComponent;
const MethodName : string): Pointer of object;

_T339 = procedure (Component : TComponent;
var Name : string) of object;

_T340 = procedure (var Name : string) of object;

_T341 = _T1;

_T342 = procedure (Value : TValueType) of object;

_T343 = _T5;

_T344 = _T1;

_T345 = _T1;

_T346 = function : TValueType of object;

_T347 = procedure (var Buf;
Count : Longint) of object;

_T348 = _T5;

_T349 = _T201;

_T350 = function : WideChar of object;

_T351 = _T254;

_T352 = function (Component : TComponent): TComponent of object;

{_T353 = procedure (AOwner : TComponent;
AParent : TComponent;
Proc : TReadComponentsProc) of object;}

_T354 = _T325;

_T355 = _T211;

_T356 = _T203;

_T357 = function : Currency of object;

_T358 = function : TDateTime of object;

_T359 = _T212;

_T360 = _T323;

{_T361 = function : Int64 of object;}

_T362 = _T1;

_T363 = _T1;

_T364 = procedure (var Flags : TFilerFlags;
var AChildPos : Integer) of object;

_T365 = function (Root : TComponent): TComponent of object;

_T366 = _T1;

_T367 = _T212;

_T368 = _T212;

_T369 = function : WideString of object;

_T370 = _T346;

_T371 = function : Variant of object;

_T372 = _T49;

_T373 = _T1;

_T374 = procedure (AStorage : TPersistent;
AReference : TPersistent) of object;

_T375 = _T1;

_T376 = _T1;

{_T377 = procedure (Instance : THandle;
const ResName : string;
ResType : PChar) of object;}

{_T378 = procedure (Instance : THandle;
ResID : Integer;
ResType : PChar) of object;}

{_T379 = function : Int64 of object;}

_T380 = procedure (NewSize : Longint) of object;

_T381 = function (var Buffer;
Count : Longint): Longint of object;

_T382 = function (const Buffer;
Count : Longint): Longint of object;

_T383 = function (Offset : Longint;
Origin : Word): Longint of object;

_T384 = procedure (var Buffer;
Count : Longint) of object;

_T385 = procedure (const Buffer;
Count : Longint) of object;

{_T386 = function (Source : TStream;
Count : Int64): Int64 of object;}

_T387 = function (Instance : TComponent): TComponent of object;

_T388 = _T387;

_T389 = procedure (Instance : TComponent) of object;

_T390 = procedure (const ResName : string;
Instance : TComponent) of object;

_T391 = procedure (Instance : TComponent;
Ancestor : TComponent) of object;

_T392 = procedure (const ResName : string;
Instance : TComponent;
Ancestor : TComponent) of object;

_T393 = procedure (const ResName : string;
var FixupInfo : Integer) of object;

_T394 = procedure (FixupInfo : Integer) of object;

_T395 = _T1;

_T396 = procedure (Stream : TStream;
Ownership : TStreamOwnership) of object;

_T397 = function (pv : Pointer;
cb : Longint;
pcbRead : PLongint): HResult of object;

_T398 = function (pv : Pointer;
cb : Longint;
pcbWritten : PLongint): HResult of object;

_T399 = function (dlibMove : Largeint;
dwOrigin : Longint;
var libNewPosition : Largeint): HResult of object;

_T400 = function (libNewSize : Largeint): HResult of object;

_T401 = function (stm : IStream;
cb : Largeint;
var cbRead : Largeint;
var cbWritten : Largeint): HResult of object;

_T402 = function (grfCommitFlags : Longint): HResult of object;

_T403 = function : HResult of object;

_T404 = function (libOffset : Largeint;
cb : Largeint;
dwLockType : Longint): HResult of object;

_T405 = _T404;

{_T406 = function (out statstg : TStatStg;
grfStatFlag : Longint): HResult of object;}

_T407 = function (var stm : IStream): HResult of object;

_T408 = _T220;

_T409 = _T1;

_T410 = _T1;

_T411 = _T220;

_T412 = _T1;

_T413 = _T1;

_T414 = _T1;

_T415 = procedure (Index : Integer;
const S : string;
AObject : TObject) of object;

_T416 = _T1;

_T417 = function (const S : string;
var Index : Integer): Boolean of object;

_T418 = _T1;

{_T419 = procedure (Compare : TStringListSortCompare) of object;}

_T420 = procedure (S : string) of object;

_T421 = _T233;

_T422 = _T40;

_T423 = _T40;

_T424 = function (Index : Integer): TObject of object;

_T425 = _T212;

_T426 = procedure (Index : Integer;
const S : string) of object;

_T427 = procedure (Index : Integer;
AObject : TObject) of object;

_T428 = procedure (NewCapacity : Integer) of object;

_T429 = _T253;

_T430 = procedure (Updating : Boolean) of object;

_T431 = function (const S1 : string;
const S2 : string): Integer of object;

_T432 = _T1;

_T433 = function (const S : string): Integer of object;

_T434 = function (const S : string;
AObject : TObject): Integer of object;

_T435 = _T317;

_T436 = procedure (Strings : TStrings) of object;

_T437 = _T1;

_T438 = _T1;

_T439 = _T242;

_T440 = _T1;

_T441 = function (Strings : TStrings): Boolean of object;

_T442 = _T268;

_T443 = function : TStringsEnumerator of object;

_T444 = function : PChar of object;

_T445 = _T433;

_T446 = function (const Name : string): Integer of object;

_T447 = function (AObject : TObject): Integer of object;

_T448 = _T426;

_T449 = _T415;

_T450 = _T256;

_T451 = _T220;

_T452 = _T300;

_T453 = _T256;

_T454 = _T220;

_T455 = procedure (Text : PChar) of object;

_T456 = function :TArray<String>;// Array of object;

_T457 = _T456;

_T458 = procedure (AStrings : TStrings) of object;

_T459 = _T212;

_T460 = _T5;

_T461 = procedure (const AString : string) of object;

_T462 = function (Count : Longint): string of object;

_T463 = _T461;

_T464 = _T1;

_T465 = _T1;

_T466 = _T40;

_T467 = _T40;

_T468 = function (const Buffer : TCharArray;
Index : Integer;
Count : Integer): Integer of object;

_T469 = _T212;

_T470 = _T212;

_T471 = _T1;

_T472 = _T1;

_T473 = _T9;

_T474 = _T1;

_T475 = _T1;

_T476 = procedure (Item : Pointer) of object;

_T477 = _T1;

_T478 = _T291;

_T479 = _T476;

_T480 = procedure (Item : Pointer;
Direction : classes.TList.TDirection) of object;

_T481 = _T1;

_T482 = _T389;

_T483 = function (AMethod : TMethod): string of object;

_T484 = procedure (const Buf;
Count : Longint) of object;

_T485 = _T9;

_T486 = _T251;

_T487 = procedure (Component : TComponent) of object;

_T488 = procedure (Value : Char) of object;

_T489 = procedure (Value : WideChar) of object;

_T490 = procedure (Root : TComponent;
AAncestor : TComponent) of object;

_T491 = procedure (const Value : Extended) of object;

_T492 = procedure (const Value : Single) of object;

_T493 = procedure (const Value : Double) of object;

_T494 = procedure (const Value : Currency) of object;

_T495 = procedure (const Value : TDateTime) of object;

_T496 = _T318;

_T497 = procedure (Value : Longint) of object;

_T498 = _T1;

_T499 = _T1;

_T500 = _T162;

_T501 = procedure (Root : TComponent) of object;

_T502 = _T1;

_T503 = procedure (const Value : AnsiString) of object;

_T504 = _T253;

_T505 = procedure (const Value : UnicodeString) of object;

_T506 = _T505;

_T507 = procedure (const Value : Variant) of object;

function __TIdentMapEntry__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIdentMapEntry__Wrapper.setValue(const val : Integer);
begin
TIdentMapEntry(GetRecordPtr^).Value := val;
end;
function __TIdentMapEntry__Wrapper.getValue : Integer;
begin
result := TIdentMapEntry(GetRecordPtr^).Value;
end;
procedure __TIdentMapEntry__Wrapper.setName(const val : AnsiString);
begin
TIdentMapEntry(GetRecordPtr^).Name := val;
end;
function __TIdentMapEntry__Wrapper.getName : AnsiString;
begin
result := TIdentMapEntry(GetRecordPtr^).Name;
end;
function __TStringItem__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TStringItem__Wrapper.setFString(const val : AnsiString);
begin
TStringItem(GetRecordPtr^).FString := val;
end;
function __TStringItem__Wrapper.getFString : AnsiString;
begin
result := TStringItem(GetRecordPtr^).FString;
end;
procedure __TStringItem__Wrapper.setFObject(const val : TObject);
begin
TStringItem(GetRecordPtr^).FObject := val;
end;
function __TStringItem__Wrapper.getFObject : TObject;
begin
result := TStringItem(GetRecordPtr^).FObject;
end;
function __TSynchronizeRecord__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSynchronizeRecord__Wrapper.setFThread(const val : TObject);
begin
TSynchronizeRecord(GetRecordPtr^).FThread := val;
end;
function __TSynchronizeRecord__Wrapper.getFThread : TObject;
begin
result := TSynchronizeRecord(GetRecordPtr^).FThread;
end;
procedure __TSynchronizeRecord__Wrapper.setFProcedure(const val : TThreadProcedure);
begin
TSynchronizeRecord(GetRecordPtr^).FProcedure := val;
end;
function __TSynchronizeRecord__Wrapper.getFProcedure : TThreadProcedure;
begin
result := TSynchronizeRecord(GetRecordPtr^).FProcedure;
end;
procedure __TSynchronizeRecord__Wrapper.setFSynchronizeException(const val : TObject);
begin
TSynchronizeRecord(GetRecordPtr^).FSynchronizeException := val;
end;
function __TSynchronizeRecord__Wrapper.getFSynchronizeException : TObject;
begin
result := TSynchronizeRecord(GetRecordPtr^).FSynchronizeException;
end;
function _TIdentMapEntry_ : IDispatch;
begin
  result := __TIdentMapEntry__Wrapper.Create;
end;
function _TStringItem_ : IDispatch;
begin
  result := __TStringItem__Wrapper.Create;
end;
function _TSynchronizeRecord_ : IDispatch;
begin
  result := __TSynchronizeRecord__Wrapper.Create;
end;
procedure ____NameThreadForDebugging__Wrapper(cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
//NameThreadForDebugging(OleVariant(pargs^[0]));
end;
2:
begin
//NameThreadForDebugging(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure ____SetDesigning__Wrapper(cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
//SetDesigning(OleVariant(pargs^[0]));
end;
2:
begin
//SetDesigning(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function ____IdentToInt__Wrapper(const p0 : string;
var p1 : Longint;
const p2 : IDispatch): Boolean;
var
__p2 : ^TIdentMapEntry;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := IdentToInt(p0,p1,__p2^);
end;

function ____IntToIdent__Wrapper(p0 : Longint;
var p1 : string;
const p2 : IDispatch): Boolean;
var
__p2 : ^TIdentMapEntry;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := IntToIdent(p0,p1,__p2^);
end;

function ____CheckSynchronize__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
0:
begin
result := CheckSynchronize;
end;
1:
begin
result := CheckSynchronize(OleVariant(pargs^[0]));
end;
end
end;

procedure __TList__Assign__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
TList(__Instance).Assign(TList(VarToObject(OleVariant(pargs^[0]))));
end;
2:
begin
TList(__Instance).Assign(TList(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
end;
3:
begin
TList(__Instance).Assign(TList(VarToObject(OleVariant(pargs^[2]))),OleVariant(pargs^[1]),TList(VarToObject(OleVariant(pargs^[0]))));
end;
end
end;


type __TIdentMapEntry__Wrapper__ = class(__TIdentMapEntry__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIdentMapEntry__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIdentMapEntryToVariant(var R : TIdentMapEntry) : OleVariant;
var
__rw : __TIdentMapEntry__Wrapper__;
begin
__rw := __TIdentMapEntry__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIdentMapEntry(const V : OleVariant) : TIdentMapEntry;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIdentMapEntry((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TStringItem__Wrapper__ = class(__TStringItem__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TStringItem__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTStringItemToVariant(var R : TStringItem) : OleVariant;
var
__rw : __TStringItem__Wrapper__;
begin
__rw := __TStringItem__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTStringItem(const V : OleVariant) : TStringItem;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TStringItem((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSynchronizeRecord__Wrapper__ = class(__TSynchronizeRecord__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSynchronizeRecord__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSynchronizeRecordToVariant(var R : TSynchronizeRecord) : OleVariant;
var
__rw : __TSynchronizeRecord__Wrapper__;
begin
__rw := __TSynchronizeRecord__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSynchronizeRecord(const V : OleVariant) : TSynchronizeRecord;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSynchronizeRecord((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

function __DC__GetTComponent__Components(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TComponent(Instance).Components[OleVariant(Params^[0])]);
end;

function __DC__GetTComponent__ComponentCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TComponent(Instance).ComponentCount;
end;

function __DC__GetTComponent__ComponentIndex(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TComponent(Instance).ComponentIndex;
end;

procedure __DC__SetTComponent__ComponentIndex(Instance : TObject; Params : PVariantArgList);
begin
TComponent(Instance).ComponentIndex:=OleVariant(Params^[0]);
end;

function __DC__GetTComponent__ComponentState(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TComponentState;
begin
  tmp := TComponent(Instance).ComponentState;
  result := VarFromSet(tmp, sizeof(tmp));
end;

function __DC__GetTComponent__ComponentStyle(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TComponentStyle;
begin
  tmp := TComponent(Instance).ComponentStyle;
  result := VarFromSet(tmp, sizeof(tmp));
end;

function __DC__GetTComponent__DesignInfo(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
  result := VarFromObject(TComponent(Instance).DesignInfo);
end;

procedure __DC__SetTComponent__DesignInfo(Instance : TObject; Params : PVariantArgList);
begin
TComponent(Instance).DesignInfo:=TDesignInfo(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTComponent__Owner(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TComponent(Instance).Owner);
end;

function __DC__GetTComponent__VCLComObject(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TComponent(Instance).VCLComObject);
end;

procedure __DC__SetTComponent__VCLComObject(Instance : TObject; Params : PVariantArgList);
begin
TComponent(Instance).VCLComObject:=VarToPointer(OleVariant(Params^[0]));
end;

function __DC__GetTComponent__Observers(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TComponent(Instance).Observers);
end;


function __DC__GetTBinaryReader__BaseStream(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TBinaryReader(Instance).BaseStream);
end;

function __DC__GetTBinaryWriter__BaseStream(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TBinaryWriter(Instance).BaseStream);
end;

function __DC__GetTBinaryWriter__Null(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TBinaryWriter(Instance).Null);
end;

function __DC__GetTBits__Bits(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBits(Instance).Bits[OleVariant(Params^[0])];
end;

procedure __DC__SetTBits__Bits(Instance : TObject; Params : PVariantArgList);
begin
TBits(Instance).Bits[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTBits__Size(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBits(Instance).Size;
end;

procedure __DC__SetTBits__Size(Instance : TObject; Params : PVariantArgList);
begin
TBits(Instance).Size:=OleVariant(Params^[0]);
end;

function __DC__GetTBytesStream__Bytes(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBytesStream(Instance).Bytes;
end;

function __DC__GetTCollection__Capacity(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCollection(Instance).Capacity;
end;

procedure __DC__SetTCollection__Capacity(Instance : TObject; Params : PVariantArgList);
begin
TCollection(Instance).Capacity:=OleVariant(Params^[0]);
end;

function __DC__GetTCollection__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCollection(Instance).Count;
end;

function __DC__GetTCollection__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCollection(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __DC__SetTCollection__Items(Instance : TObject; Params : PVariantArgList);
begin
TCollection(Instance).Items[OleVariant(Params^[1])]:=TCollectionItem(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCollectionEnumerator__Current(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCollectionEnumerator(Instance).Current);
end;

function __DC__GetTCollectionItem__Collection(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCollectionItem(Instance).Collection);
end;

procedure __DC__SetTCollectionItem__Collection(Instance : TObject; Params : PVariantArgList);
begin
TCollectionItem(Instance).Collection:=TCollection(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCollectionItem__ID(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCollectionItem(Instance).ID;
end;

function __DC__GetTCollectionItem__Index(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCollectionItem(Instance).Index;
end;

procedure __DC__SetTCollectionItem__Index(Instance : TObject; Params : PVariantArgList);
begin
TCollectionItem(Instance).Index:=OleVariant(Params^[0]);
end;

function __DC__GetTCollectionItem__DisplayName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCollectionItem(Instance).DisplayName;
end;

procedure __DC__SetTCollectionItem__DisplayName(Instance : TObject; Params : PVariantArgList);
begin
TCollectionItem(Instance).DisplayName:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomMemoryStream__Memory(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TCustomMemoryStream(Instance).Memory);
end;

function __DC__GetTFiler__Root(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TFiler(Instance).Root);
end;

procedure __DC__SetTFiler__Root(Instance : TObject; Params : PVariantArgList);
begin
TFiler(Instance).Root:=TComponent(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTFiler__LookupRoot(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TFiler(Instance).LookupRoot);
end;

function __DC__GetTFiler__Ancestor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TFiler(Instance).Ancestor);
end;

procedure __DC__SetTFiler__Ancestor(Instance : TObject; Params : PVariantArgList);
begin
TFiler(Instance).Ancestor:=TPersistent(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTFiler__IgnoreChildren(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFiler(Instance).IgnoreChildren;
end;

procedure __DC__SetTFiler__IgnoreChildren(Instance : TObject; Params : PVariantArgList);
begin
TFiler(Instance).IgnoreChildren:=OleVariant(Params^[0]);
end;

function __DC__GetTFileStream__FileName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFileStream(Instance).FileName;
end;

function __DC__GetTHandleStream__Handle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := THandleStream(Instance).Handle;
end;

function __DC__GetTInterfaceList__Capacity(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TInterfaceList(Instance).Capacity;
end;

procedure __DC__SetTInterfaceList__Capacity(Instance : TObject; Params : PVariantArgList);
begin
TInterfaceList(Instance).Capacity:=OleVariant(Params^[0]);
end;

function __DC__GetTInterfaceList__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TInterfaceList(Instance).Count;
end;

procedure __DC__SetTInterfaceList__Count(Instance : TObject; Params : PVariantArgList);
begin
TInterfaceList(Instance).Count:=OleVariant(Params^[0]);
end;

function __DC__GetTInterfaceList__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TInterfaceList(Instance).Items[OleVariant(Params^[0])];
end;

procedure __DC__SetTInterfaceList__Items(Instance : TObject; Params : PVariantArgList);
begin
TInterfaceList(Instance).Items[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTInterfaceListEnumerator__Current(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TInterfaceListEnumerator(Instance).Current;
end;

function __DC__GetTList__Capacity(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TList(Instance).Capacity;
end;

procedure __DC__SetTList__Capacity(Instance : TObject; Params : PVariantArgList);
begin
TList(Instance).Capacity:=OleVariant(Params^[0]);
end;

function __DC__GetTList__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TList(Instance).Count;
end;

procedure __DC__SetTList__Count(Instance : TObject; Params : PVariantArgList);
begin
TList(Instance).Count:=OleVariant(Params^[0]);
end;

function __DC__GetTList__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TList(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __DC__SetTList__Items(Instance : TObject; Params : PVariantArgList);
begin
TList(Instance).Items[OleVariant(Params^[1])]:=VarToPointer(OleVariant(Params^[0]));
end;

function __DC__GetTListEnumerator__Current(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TListEnumerator(Instance).Current);
end;

function __DC__GetTParser__FloatType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TParser(Instance).FloatType;
end;

function __DC__GetTParser__SourceLine(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TParser(Instance).SourceLine;
end;

function __DC__GetTParser__LinePos(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TParser(Instance).LinePos;
end;

function __DC__GetTParser__Token(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TParser(Instance).Token;
end;

function __DC__GetTReader__Owner(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TReader(Instance).Owner);
end;

procedure __DC__SetTReader__Owner(Instance : TObject; Params : PVariantArgList);
begin
TReader(Instance).Owner:=TComponent(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTReader__Parent(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TReader(Instance).Parent);
end;

procedure __DC__SetTReader__Parent(Instance : TObject; Params : PVariantArgList);
begin
TReader(Instance).Parent:=TComponent(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTReader__Position(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TReader(Instance).Position;
end;

procedure __DC__SetTReader__Position(Instance : TObject; Params : PVariantArgList);
begin
TReader(Instance).Position:=OleVariant(Params^[0]);
end;

function __DC__GetStream__Position(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
  result := TStream(Instance).Position;
end;

function __DC__GetStream__Size(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
  result := TStream(Instance).Size;
end;

procedure __DC__SetStream__Position(Instance : TObject; Params : PVariantArgList);
begin
  TStream(Instance).Position:=OleVariant(Params^[0]);
end;


function __DC__GetTRecall__reference(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TRecall(Instance).reference);
end;

function __DC__GetTStreamAdapter__Stream(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TStreamAdapter(Instance).Stream);
end;

function __DC__GetTStreamAdapter__StreamOwnership(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TStreamAdapter(Instance).StreamOwnership;
end;

procedure __DC__SetTStreamAdapter__StreamOwnership(Instance : TObject; Params : PVariantArgList);
begin
TStreamAdapter(Instance).StreamOwnership:=OleVariant(Params^[0]);
end;

function __DC__GetTStreamReader__BaseStream(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TStreamReader(Instance).BaseStream);
end;

function __DC__GetTStreamReader__CurrentEncoding(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := varFromObject(TStreamReader(Instance).CurrentEncoding);
end;

function __DC__GetTStreamReader__EndOfStream(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TStreamReader(Instance).EndOfStream;
end;

function __DC__GetTStreamWriter__AutoFlush(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TStreamWriter(Instance).AutoFlush;
end;

procedure __DC__SetTStreamWriter__AutoFlush(Instance : TObject; Params : PVariantArgList);
begin
TStreamWriter(Instance).AutoFlush:=OleVariant(Params^[0]);
end;

function __DC__GetTStreamWriter__NewLine(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TStreamWriter(Instance).NewLine;
end;

procedure __DC__SetTStreamWriter__NewLine(Instance : TObject; Params : PVariantArgList);
begin
TStreamWriter(Instance).NewLine:=OleVariant(Params^[0]);
end;

function __DC__GetTStreamWriter__Encoding(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := varFromObject(TStreamWriter(Instance).Encoding);
end;

function __DC__GetTStreamWriter__BaseStream(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TStreamWriter(Instance).BaseStream);
end;

function __DC__GetTStringList__Duplicates(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TStringList(Instance).Duplicates;
end;

procedure __DC__SetTStringList__Duplicates(Instance : TObject; Params : PVariantArgList);
begin
TStringList(Instance).Duplicates:=OleVariant(Params^[0]);
end;

function __DC__GetTStringList__Sorted(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TStringList(Instance).Sorted;
end;

procedure __DC__SetTStringList__Sorted(Instance : TObject; Params : PVariantArgList);
begin
TStringList(Instance).Sorted:=OleVariant(Params^[0]);
end;

function __DC__GetTStringList__CaseSensitive(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TStringList(Instance).CaseSensitive;
end;

procedure __DC__SetTStringList__CaseSensitive(Instance : TObject; Params : PVariantArgList);
begin
TStringList(Instance).CaseSensitive:=OleVariant(Params^[0]);
end;

function __DC__GetTStringList__OwnsObjects(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TStringList(Instance).OwnsObjects;
end;

procedure __DC__SetTStringList__OwnsObjects(Instance : TObject; Params : PVariantArgList);
begin
TStringList(Instance).OwnsObjects:=OleVariant(Params^[0]);
end;

function __DC__GetTStrings__Capacity(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TStrings(Instance).Capacity;
end;

procedure __DC__SetTStrings__Capacity(Instance : TObject; Params : PVariantArgList);
begin
TStrings(Instance).Capacity:=OleVariant(Params^[0]);
end;

function __DC__GetTStrings__CommaText(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TStrings(Instance).CommaText;
end;

procedure __DC__SetTStrings__CommaText(Instance : TObject; Params : PVariantArgList);
begin
TStrings(Instance).CommaText:=OleVariant(Params^[0]);
end;

function __DC__GetTStrings__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TStrings(Instance).Count;
end;

function __DC__GetTStrings__DefaultEncoding(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TStrings(Instance).DefaultEncoding);
end;

procedure __DC__SetTStrings__DefaultEncoding(Instance : TObject; Params : PVariantArgList);
begin
TStrings(Instance).DefaultEncoding:=TEncoding(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTStrings__Delimiter(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TStrings(Instance).Delimiter;
end;

procedure __DC__SetTStrings__Delimiter(Instance : TObject; Params : PVariantArgList);
begin
TStrings(Instance).Delimiter:=VarToChar(OleVariant(Params^[0]));
end;

function __DC__GetTStrings__DelimitedText(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TStrings(Instance).DelimitedText;
end;

procedure __DC__SetTStrings__DelimitedText(Instance : TObject; Params : PVariantArgList);
begin
TStrings(Instance).DelimitedText:=OleVariant(Params^[0]);
end;

function __DC__GetTStrings__Encoding(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
  result := varFromObject(TStrings(Instance).Encoding);
end;

function __DC__GetTStrings__LineBreak(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TStrings(Instance).LineBreak;
end;

procedure __DC__SetTStrings__LineBreak(Instance : TObject; Params : PVariantArgList);
begin
TStrings(Instance).LineBreak:=OleVariant(Params^[0]);
end;

function __DC__GetTStrings__Names(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TStrings(Instance).Names[OleVariant(Params^[0])];
end;

function __DC__GetTStrings__Objects(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := varFromObject(TStrings(Instance).Objects[OleVariant(Params^[0])]);
end;

procedure __DC__SetTStrings__Objects(Instance : TObject; Params : PVariantArgList);
begin
  TStrings(Instance).Objects[OleVariant(Params^[1])]:=varToObject(OleVariant(Params^[0]));
end;

function __DC__GetTStrings__QuoteChar(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TStrings(Instance).QuoteChar;
end;

procedure __DC__SetTStrings__QuoteChar(Instance : TObject; Params : PVariantArgList);
begin
TStrings(Instance).QuoteChar:=VarToChar(OleVariant(Params^[0]));
end;

function __DC__GetTStrings__Values(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TStrings(Instance).Values[OleVariant(Params^[0])];
end;

procedure __DC__SetTStrings__Values(Instance : TObject; Params : PVariantArgList);
begin
TStrings(Instance).Values[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTStrings__ValueFromIndex(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TStrings(Instance).ValueFromIndex[OleVariant(Params^[0])];
end;

procedure __DC__SetTStrings__ValueFromIndex(Instance : TObject; Params : PVariantArgList);
begin
TStrings(Instance).ValueFromIndex[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTStrings__NameValueSeparator(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TStrings(Instance).NameValueSeparator;
end;

procedure __DC__SetTStrings__NameValueSeparator(Instance : TObject; Params : PVariantArgList);
begin
TStrings(Instance).NameValueSeparator:=VarToChar(OleVariant(Params^[0]));
end;

function __DC__GetTStrings__StrictDelimiter(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TStrings(Instance).StrictDelimiter;
end;

procedure __DC__SetTStrings__StrictDelimiter(Instance : TObject; Params : PVariantArgList);
begin
TStrings(Instance).StrictDelimiter:=OleVariant(Params^[0]);
end;

function __DC__GetTStrings__Strings(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TStrings(Instance).Strings[OleVariant(Params^[0])];
end;

procedure __DC__SetTStrings__Strings(Instance : TObject; Params : PVariantArgList);
begin
TStrings(Instance).Strings[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTStrings__Text(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TStrings(Instance).Text;
end;

procedure __DC__SetTStrings__Text(Instance : TObject; Params : PVariantArgList);
begin
TStrings(Instance).Text:=OleVariant(Params^[0]);
end;

function __DC__GetTStrings__WriteBOM(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TStrings(Instance).WriteBOM;
end;

procedure __DC__SetTStrings__WriteBOM(Instance : TObject; Params : PVariantArgList);
begin
TStrings(Instance).WriteBOM:=OleVariant(Params^[0]);
end;

function __DC__GetTStringsEnumerator__Current(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TStringsEnumerator(Instance).Current;
end;

function __DC__GetTStringStream__DataString(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TStringStream(Instance).DataString;
end;

function __DC__GetTThreadList__Duplicates(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TThreadList(Instance).Duplicates;
end;

procedure __DC__SetTThreadList__Duplicates(Instance : TObject; Params : PVariantArgList);
begin
TThreadList(Instance).Duplicates:=OleVariant(Params^[0]);
end;

function __DC__GetTWriter__Position(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWriter(Instance).Position;
end;

procedure __DC__SetTWriter__Position(Instance : TObject; Params : PVariantArgList);
begin
TWriter(Instance).Position:=OleVariant(Params^[0]);
end;

function __DC__GetTWriter__RootAncestor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TWriter(Instance).RootAncestor);
end;

procedure __DC__SetTWriter__RootAncestor(Instance : TObject; Params : PVariantArgList);
begin
TWriter(Instance).RootAncestor:=TComponent(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTWriter__UseQualifiedNames(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWriter(Instance).UseQualifiedNames;
end;

procedure __DC__SetTWriter__UseQualifiedNames(Instance : TObject; Params : PVariantArgList);
begin
TWriter(Instance).UseQualifiedNames:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TBinaryReader,'BaseStream',__DC__GetTBinaryReader__BaseStream,nil);
RegisterProperty(TBinaryWriter,'BaseStream',__DC__GetTBinaryWriter__BaseStream,nil);
RegisterProperty(TBinaryWriter,'Null',__DC__GetTBinaryWriter__Null,nil);
RegisterIndexedProperty(TBits,'Bits',1,True,__DC__GetTBits__Bits,__DC__SetTBits__Bits);
RegisterProperty(TBits,'Size',__DC__GetTBits__Size,__DC__SetTBits__Size);
RegisterProperty(TBytesStream,'Bytes',__DC__GetTBytesStream__Bytes,nil);
RegisterProperty(TCollection,'Capacity',__DC__GetTCollection__Capacity,__DC__SetTCollection__Capacity);
RegisterProperty(TCollection,'Count',__DC__GetTCollection__Count,nil);
RegisterIndexedProperty(TCollection,'Items',1,False,__DC__GetTCollection__Items,__DC__SetTCollection__Items);
RegisterProperty(TCollectionEnumerator,'Current',__DC__GetTCollectionEnumerator__Current,nil);
RegisterProperty(TCollectionItem,'Collection',__DC__GetTCollectionItem__Collection,__DC__SetTCollectionItem__Collection);
RegisterProperty(TCollectionItem,'ID',__DC__GetTCollectionItem__ID,nil);
RegisterProperty(TCollectionItem,'Index',__DC__GetTCollectionItem__Index,__DC__SetTCollectionItem__Index);
RegisterProperty(TCollectionItem,'DisplayName',__DC__GetTCollectionItem__DisplayName,__DC__SetTCollectionItem__DisplayName);
RegisterProperty(TCustomMemoryStream,'Memory',__DC__GetTCustomMemoryStream__Memory,nil);
RegisterProperty(TFiler,'Root',__DC__GetTFiler__Root,__DC__SetTFiler__Root);
RegisterProperty(TFiler,'LookupRoot',__DC__GetTFiler__LookupRoot,nil);
RegisterProperty(TFiler,'Ancestor',__DC__GetTFiler__Ancestor,__DC__SetTFiler__Ancestor);
RegisterProperty(TFiler,'IgnoreChildren',__DC__GetTFiler__IgnoreChildren,__DC__SetTFiler__IgnoreChildren);
RegisterProperty(TFileStream,'FileName',__DC__GetTFileStream__FileName,nil);
RegisterProperty(THandleStream,'Handle',__DC__GetTHandleStream__Handle,nil);
RegisterProperty(TInterfaceList,'Capacity',__DC__GetTInterfaceList__Capacity,__DC__SetTInterfaceList__Capacity);
RegisterProperty(TInterfaceList,'Count',__DC__GetTInterfaceList__Count,__DC__SetTInterfaceList__Count);
RegisterIndexedProperty(TInterfaceList,'Items',1,True,__DC__GetTInterfaceList__Items,__DC__SetTInterfaceList__Items);
RegisterProperty(TInterfaceListEnumerator,'Current',__DC__GetTInterfaceListEnumerator__Current,nil);
RegisterProperty(TList,'Capacity',__DC__GetTList__Capacity,__DC__SetTList__Capacity);
RegisterProperty(TList,'Count',__DC__GetTList__Count,__DC__SetTList__Count);
RegisterIndexedProperty(TList,'Items',1,True,__DC__GetTList__Items,__DC__SetTList__Items);
RegisterProperty(TListEnumerator,'Current',__DC__GetTListEnumerator__Current,nil);
RegisterProperty(TParser,'FloatType',__DC__GetTParser__FloatType,nil);
RegisterProperty(TParser,'SourceLine',__DC__GetTParser__SourceLine,nil);
RegisterProperty(TParser,'LinePos',__DC__GetTParser__LinePos,nil);
RegisterProperty(TParser,'Token',__DC__GetTParser__Token,nil);
RegisterProperty(TReader,'Owner',__DC__GetTReader__Owner,__DC__SetTReader__Owner);
RegisterProperty(TReader,'Parent',__DC__GetTReader__Parent,__DC__SetTReader__Parent);
RegisterProperty(TReader,'Position',__DC__GetTReader__Position,__DC__SetTReader__Position);
RegisterProperty(TRecall,'reference',__DC__GetTRecall__reference,nil);
RegisterProperty(TStreamAdapter,'Stream',__DC__GetTStreamAdapter__Stream,nil);
RegisterProperty(TStreamAdapter,'StreamOwnership',__DC__GetTStreamAdapter__StreamOwnership,__DC__SetTStreamAdapter__StreamOwnership);
RegisterProperty(TStreamReader,'BaseStream',__DC__GetTStreamReader__BaseStream,nil);
RegisterProperty(TStreamReader,'CurrentEncoding',__DC__GetTStreamReader__CurrentEncoding,nil);
RegisterProperty(TStreamReader,'EndOfStream',__DC__GetTStreamReader__EndOfStream,nil);
RegisterProperty(TStreamWriter,'AutoFlush',__DC__GetTStreamWriter__AutoFlush,__DC__SetTStreamWriter__AutoFlush);
RegisterProperty(TStreamWriter,'NewLine',__DC__GetTStreamWriter__NewLine,__DC__SetTStreamWriter__NewLine);
RegisterProperty(TStreamWriter,'Encoding',__DC__GetTStreamWriter__Encoding,nil);
RegisterProperty(TStreamWriter,'BaseStream',__DC__GetTStreamWriter__BaseStream,nil);
RegisterProperty(TStringList,'Duplicates',__DC__GetTStringList__Duplicates,__DC__SetTStringList__Duplicates);
RegisterProperty(TStringList,'Sorted',__DC__GetTStringList__Sorted,__DC__SetTStringList__Sorted);
RegisterProperty(TStringList,'CaseSensitive',__DC__GetTStringList__CaseSensitive,__DC__SetTStringList__CaseSensitive);
RegisterProperty(TStringList,'OwnsObjects',__DC__GetTStringList__OwnsObjects,__DC__SetTStringList__OwnsObjects);
RegisterProperty(TStrings,'Capacity',__DC__GetTStrings__Capacity,__DC__SetTStrings__Capacity);
RegisterProperty(TStrings,'CommaText',__DC__GetTStrings__CommaText,__DC__SetTStrings__CommaText);
RegisterProperty(TStrings,'Count',__DC__GetTStrings__Count,nil);
RegisterProperty(TStrings,'DefaultEncoding',__DC__GetTStrings__DefaultEncoding,__DC__SetTStrings__DefaultEncoding);
RegisterProperty(TStrings,'Delimiter',__DC__GetTStrings__Delimiter,__DC__SetTStrings__Delimiter);
RegisterProperty(TStrings,'DelimitedText',__DC__GetTStrings__DelimitedText,__DC__SetTStrings__DelimitedText);
RegisterProperty(TStrings,'Encoding',__DC__GetTStrings__Encoding,nil);
RegisterProperty(TStrings,'LineBreak',__DC__GetTStrings__LineBreak,__DC__SetTStrings__LineBreak);

RegisterIndexedProperty(TStrings,'Names',1,False,__DC__GetTStrings__Names,nil);

RegisterIndexedProperty(TStrings,'Objects',1,False,__DC__GetTStrings__Objects,__DC__SetTStrings__Objects);
RegisterProperty(TStrings,'QuoteChar',__DC__GetTStrings__QuoteChar,__DC__SetTStrings__QuoteChar);
RegisterIndexedProperty(TStrings,'Values',1,False,__DC__GetTStrings__Values,__DC__SetTStrings__Values);
RegisterIndexedProperty(TStrings,'ValueFromIndex',1,False,__DC__GetTStrings__ValueFromIndex,__DC__SetTStrings__ValueFromIndex);
RegisterProperty(TStrings,'NameValueSeparator',__DC__GetTStrings__NameValueSeparator,__DC__SetTStrings__NameValueSeparator);
RegisterProperty(TStrings,'StrictDelimiter',__DC__GetTStrings__StrictDelimiter,__DC__SetTStrings__StrictDelimiter);
RegisterIndexedProperty(TStrings,'Strings',1,True,__DC__GetTStrings__Strings,__DC__SetTStrings__Strings);
RegisterProperty(TStrings,'Text',__DC__GetTStrings__Text,__DC__SetTStrings__Text);
RegisterProperty(TStrings,'WriteBOM',__DC__GetTStrings__WriteBOM,__DC__SetTStrings__WriteBOM);
RegisterProperty(TStringsEnumerator,'Current',__DC__GetTStringsEnumerator__Current,nil);
RegisterProperty(TStringStream,'DataString',__DC__GetTStringStream__DataString,nil);
RegisterProperty(TThreadList,'Duplicates',__DC__GetTThreadList__Duplicates,__DC__SetTThreadList__Duplicates);
RegisterProperty(TWriter,'Position',__DC__GetTWriter__Position,__DC__SetTWriter__Position);
RegisterProperty(TWriter,'RootAncestor',__DC__GetTWriter__RootAncestor,__DC__SetTWriter__RootAncestor);
RegisterProperty(TWriter,'UseQualifiedNames',__DC__GetTWriter__UseQualifiedNames,__DC__SetTWriter__UseQualifiedNames);



  RegisterIndexedProperty(TComponent,'Components',1,False,__DC__GetTComponent__Components,nil);
  RegisterProperty(TComponent,'ComponentCount',__DC__GetTComponent__ComponentCount,nil);
  RegisterProperty(TComponent,'ComponentIndex',__DC__GetTComponent__ComponentIndex,__DC__SetTComponent__ComponentIndex);
  RegisterProperty(TComponent,'ComponentState',__DC__GetTComponent__ComponentState,nil);
  RegisterProperty(TComponent,'ComponentStyle',__DC__GetTComponent__ComponentStyle,nil);
  RegisterProperty(TComponent,'DesignInfo',__DC__GetTComponent__DesignInfo,__DC__SetTComponent__DesignInfo);
  RegisterProperty(TComponent,'Owner',__DC__GetTComponent__Owner,nil);
  RegisterProperty(TComponent,'VCLComObject',__DC__GetTComponent__VCLComObject,__DC__SetTComponent__VCLComObject);
  RegisterProperty(TComponent,'Observers',__DC__GetTComponent__Observers,nil);

  registerProperty(TStream, 'Position',__DC__GetStream__Position,__DC__SetStream__Position);
  registerProperty(TStream, 'Size',__DC__GetStream__size,nil);

end;

function __DC__GetClasses__FProcessorCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
//result := Classes.
end;

procedure __DC__SetClasses__FProcessorCount(Instance : TObject; Params : PVariantArgList);
begin
//Classes.FProcessorCount:=OleVariant(Params^[0]);
end;

function __DC__GetClasses__CurrentGroup(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := Classes.CurrentGroup;
end;

procedure __DC__SetClasses__CurrentGroup(Instance : TObject; Params : PVariantArgList);
begin
Classes.CurrentGroup:=OleVariant(Params^[0]);
end;

function __DC__GetClasses__GlobalNameSpace(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := Classes.GlobalNameSpace;
end;

procedure __DC__SetClasses__GlobalNameSpace(Instance : TObject; Params : PVariantArgList);
begin
//  Classes.GlobalNameSpace:=OleVariant(Params^[0]);
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('FProcessorCount',__DC__GetClasses__FProcessorCount,__DC__SetClasses__FProcessorCount));
__RegisteredVars.Add(RegisterVar('CurrentGroup',__DC__GetClasses__CurrentGroup,__DC__SetClasses__CurrentGroup));
__RegisteredVars.Add(RegisterVar('GlobalNameSpace',__DC__GetClasses__GlobalNameSpace,__DC__SetClasses__GlobalNameSpace));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..84] of string = (
'MaxListSize'
,'soFromBeginning'
,'soFromCurrent'
,'soFromEnd'
,'soBeginning'
,'soCurrent'
,'soEnd'
,'fmCreate'
,'toEOF'
,'toSymbol'
,'toString'
,'toInteger'
,'toFloat'
,'toWString'
,'scShift'
,'scCtrl'
,'scAlt'
,'scNone'
,'taLeftJustify'
,'taRightJustify'
,'taCenter'
,'bdLeftToRight'
,'bdRightToLeft'
,'bdRightToLeftNoAlign'
,'bdRightToLeftReadingOnly'
,'taAlignTop'
,'taAlignBottom'
,'taVerticalCenter'
,'ssShift'
,'ssAlt'
,'ssCtrl'
,'ssLeft'
,'ssRight'
,'ssMiddle'
,'ssDouble'
,'ssTouch'
,'ssPen'
,'htKeyword'
,'htContext'
,'dupIgnore'
,'dupAccept'
,'dupError'
,'FromBeginning'
,'FromEnd'
,'cnAdded'
,'cnExtracting'
,'cnDeleting'
,'sdDelimiter'
,'sdQuoteChar'
,'sdNameValueSeparator'
,'sdLineBreak'
,'sdStrictDelimiter'
,'soReference'
,'soOwned'
,'vaNull'
,'vaList'
,'vaInt8'
,'vaInt16'
,'vaInt32'
,'vaExtended'
,'vaString'
,'vaIdent'
,'vaFalse'
,'vaTrue'
,'vaBinary'
,'vaSet'
,'vaLString'
,'vaNil'
,'vaCollection'
,'vaSingle'
,'vaCurrency'
,'vaDate'
,'vaWString'
,'vaInt64'
,'vaUTF8String'
,'vaDouble'
,'ffInherited'
,'ffChildPos'
,'ffInline'
,'axrComponentOnly'
,'axrIncludeDescendants'
,'sofUnknown'
,'sofBinary'
,'sofText'
,'sofUTF8Text'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,MaxListSize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,soFromBeginning));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,soFromCurrent));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,soFromEnd));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,soBeginning));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,soCurrent));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,soEnd));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,fmCreate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,toEOF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,toSymbol));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,toString));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,toInteger));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,toFloat));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,toWString));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,scShift));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,scCtrl));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,scAlt));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,scNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,taLeftJustify));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,taRightJustify));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,taCenter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,bdLeftToRight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,bdRightToLeft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,bdRightToLeftNoAlign));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,bdRightToLeftReadingOnly));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,taAlignTop));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,taAlignBottom));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,taVerticalCenter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,ssShift));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,ssAlt));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,ssCtrl));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,ssLeft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,ssRight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,ssMiddle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,ssDouble));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,ssTouch));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,ssPen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,htKeyword));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,htContext));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,dupIgnore));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,dupAccept));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,dupError));
//__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,FromBeginning));
//__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,FromEnd));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,cnAdded));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,cnExtracting));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,cnDeleting));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,sdDelimiter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,sdQuoteChar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,sdNameValueSeparator));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,sdLineBreak));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,sdStrictDelimiter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,soReference));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,soOwned));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,vaNull));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,vaList));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,vaInt8));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,vaInt16));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,vaInt32));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,vaExtended));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,vaString));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,vaIdent));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,vaFalse));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,vaTrue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,vaBinary));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[65] ,vaSet));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[66] ,vaLString));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[67] ,vaNil));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[68] ,vaCollection));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[69] ,vaSingle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[70] ,vaCurrency));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[71] ,vaDate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[72] ,vaWString));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[73] ,vaInt64));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[74] ,vaUTF8String));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[75] ,vaDouble));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[76] ,ffInherited));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[77] ,ffChildPos));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[78] ,ffInline));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[79] ,axrComponentOnly));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[80] ,axrIncludeDescendants));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[81] ,sofUnknown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[82] ,sofBinary));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[83] ,sofText));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[84] ,sofUTF8Text));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..58] of TClass = (
EBitsError,
EClassNotFound,
EComponentError,
EFCreateError,
EFilerError,
EFileStreamError,
EFOpenError,
EInvalidImage,
EInvalidOperation,
EListError,
EMethodNotFound,
EOutOfResources,
EParserError,
EReadError,
EResNotFound,
EStreamError,
EStringListError,
EThread,
EThreadExternalException,
EWriteError,
TBinaryReader,
TBinaryWriter,
TBits,
TBytesStream,
TClassFinder,
TCollection,
TCollectionEnumerator,
TCollectionItem,
TComponent,
TCustomMemoryStream,
TFiler,
TFileStream,
THandleStream,
TInterfacedPersistent,
TInterfaceList,
TInterfaceListEnumerator,
TList,
TListEnumerator,
TMemoryStream,
TOwnedCollection,
TParser,
TPersistent,
TReader,
TRecall,
TResourceStream,
TStream,
TStreamAdapter,
TStreamReader,
TStreamWriter,
TStringList,
TStringReader,
TStrings,
TStringsEnumerator,
TStringStream,
TStringWriter,
TTextReader,
TTextWriter,
TThreadList,
TWriter
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  

procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..157] of string = (
'TIdentMapEntry'
,'TStringItem'
,'TSynchronizeRecord'
,'('
,';'
,'CallOnTerminate'
,'GetCurrentThread'
,'GetIsSingleProcessor'
,'InternalStart'
,'GetPriority'
,'SetPriority'
,'SetSuspended'
,'CheckThreadError'
,'DoTerminate'
,'Execute'
,'CreateAnonymousThread'
,'Resume'
,'Start'
,'Suspend'
,'Terminate'
,'WaitFor'
,'CheckTerminated'
,'SetReturnValue'
,'NameThreadForDebugging'
,'SpinWait'
,'Sleep'
,'Yield'
,'GetCurrent'
,'MoveNext'
,'GetTypeInfo'
,'GetIDsOfNames'
,'Invoke'
,'SafeCallException'
,'FreeOnRelease'
,'Modified'
,'Notification'
,'GetComObject'
,'GetComponent'
,'GetComponentCount'
,'GetComponentIndex'
,'Insert'
,'ReadLeft'
,'ReadTop'
,'Remove'
,'RemoveNotification'
,'SetComponentIndex'
,'SetReference'
,'WriteLeft'
,'WriteTop'
,'IntfGetComponent'
,'FindSortedComponent'
,'AddSortedComponent'
,'RemoveSortedComponent'
,'ChangeName'
,'GetChildren'
,'GetChildOwner'
,'GetChildParent'
,'Loaded'
,'PaletteCreated'
,'ReadState'
,'SetAncestor'
,'SetDesigning'
,'SetInline'
,'SetDesignInstance'
,'SetName'
,'SetChildOrder'
,'SetParentComponent'
,'Updating'
,'Updated'
,'UpdateRegistry'
,'ValidateRename'
,'ValidateContainer'
,'ValidateInsert'
,'WriteState'
,'RemoveFreeNotifications'
,'QueryInterface'
,'_AddRef'
,'_Release'
,'GetTypeInfoCount'
,'DestroyComponents'
,'Destroying'
,'ExecuteAction'
,'FindComponent'
,'FreeNotification'
,'RemoveFreeNotification'
,'GetEnumerator'
,'GetParentComponent'
,'HasParent'
,'InsertComponent'
,'RemoveComponent'
,'SetSubComponent'
,'UpdateAction'
,'IsImplementorOf'
,'ReferenceInterface'
,'AssignClient'
,'Change'
,'IsOnExecuteLinked'
,'SetAction'
,'Update'
,'SetActionComponent'
,'HandlesTarget'
,'UpdateTarget'
,'ExecuteTarget'
,'RegisterChanges'
,'UnRegisterChanges'
,'ReadHeight'
,'ReadHorizontalOffset'
,'ReadVerticalOffset'
,'ReadWidth'
,'WriteWidth'
,'WriteHorizontalOffset'
,'WriteVerticalOffset'
,'WriteHeight'
,'DoCreate'
,'DoDestroy'
,'HandleCreateException'
,'Point'
,'SmallPoint'
,'PointsEqual'
,'InvalidPoint'
,'Rect'
,'Bounds'
,'UnRegisterModuleClasses'
,'FindGlobalComponent'
,'IsUniqueGlobalComponentName'
,'IdentToInt'
,'IntToIdent'
,'InitComponentRes'
,'ReadComponentRes'
,'ReadComponentResEx'
,'ReadComponentResFile'
,'WriteComponentResFile'
,'GlobalFixupReferences'
,'GetFixupReferenceNames'
,'GetFixupInstanceNames'
,'RedirectFixupReferences'
,'RemoveFixupReferences'
,'RemoveFixups'
,'FindNestedComponent'
,'BeginGlobalLoading'
,'NotifyGlobalLoading'
,'EndGlobalLoading'
,'CollectionsEqual'
,'GetUltimateOwner'
,'ObjectBinaryToText'
,'ObjectTextToBinary'
,'ObjectResourceToText'
,'ObjectTextToResource'
,'TestStreamFormat'
,'GetResourceName'
,'WriteObjectResourceHeader'
,'Write16bitResourceHeader'
,'Write32bitResourceHeader'
,'FindRootDesigner'
,'CheckSynchronize'
,'FreeObjectInstance'
,'DeallocateHWnd'
,'AncestorIsValid'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TIdentMapEntry_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_TStringItem_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_TSynchronizeRecord_)));
//RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T2),NoParams,Addr(classes.CallOnTerminate),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T4),[TypeInfo(TThread)],Addr(GetCurrentThread),cRegister);

//RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T5),[TypeInfo(Boolean)],Addr(GetIsSingleProcessor),cRegister);

//RegisterProc(nil,MethodNames[8],mtProc,TypeInfo(_T6),[
//TypeInfo(Boolean)],Addr(InternalStart),cRegister);

//RegisterProc(nil,MethodNames[9],mtProc,TypeInfo(_T7),[TypeInfo(TThreadPriority)],Addr(GetPriority),cRegister);

//RegisterProc(nil,MethodNames[10],mtProc,TypeInfo(_T8),[
//TypeInfo(TThreadPriority)],Addr(SetPriority),cRegister);

//RegisterProc(nil,MethodNames[11],mtProc,TypeInfo(_T9),[
//TypeInfo(Boolean)],Addr(SetSuspended),cRegister);

//RegisterProc(nil,MethodNames[12],mtProc,TypeInfo(_T10),[
//TypeInfo(Integer)],Addr(CheckThreadError),cRegister);

RegisterProc(nil,MethodNames[13],mtProc,TypeInfo(_T11),NoParams, pointer(0),cRegister);

RegisterProc(nil,MethodNames[14],mtProc,TypeInfo(_T12),NoParams, pointer(0),cRegister);

//RegisterProc(nil,MethodNames[15],mtProc,TypeInfo(_T14),[
//TypeInfo(TProc),TypeInfo(TThread)],Addr(CreateAnonymousThread),cRegister);

RegisterProc(TTHread,MethodNames[16],mtProc,TypeInfo(_T15),NoParams,Addr(TThread.Resume),cRegister);

//RegisterProc(nil,MethodNames[17],mtProc,TypeInfo(_T16),NoParams,Addr(Start),cRegister);

//RegisterProc(nil,MethodNames[18],mtProc,TypeInfo(_T17),NoParams,Addr(Suspend),cRegister);

//RegisterProc(nil,MethodNames[19],mtProc,TypeInfo(_T18),NoParams,Addr(Terminate),cRegister);

//RegisterProc(nil,MethodNames[20],mtProc,TypeInfo(_T19),[TypeInfo(LongWord)],Addr(WaitFor),cRegister);

//RegisterProc(nil,MethodNames[21],mtProc,TypeInfo(_T20),[TypeInfo(Boolean)],Addr(CheckTerminated),cRegister);

//RegisterProc(nil,MethodNames[22],mtProc,TypeInfo(_T21),[
//TypeInfo(Integer)],Addr(SetReturnValue),cRegister);

RegisterProc(nil,MethodNames[23],mtScriptProc,TypeInfo(_T25),[
TypeInfo(AnsiString),
TypeInfo(TThreadID)],Addr(____NameThreadForDebugging__Wrapper),cRegister);

//RegisterProc(nil,MethodNames[24],mtProc,TypeInfo(_T26),[
//TypeInfo(Integer)],Addr(SpinWait),cRegister);

RegisterProc(nil,MethodNames[25],mtProc,TypeInfo(_T27),[
TypeInfo(Integer)],Addr(Sleep),cRegister);

RegisterProc(nil,MethodNames[26],mtProc,TypeInfo(_T28),NoParams,Addr(Yield),cRegister);

RegisterProc(TListEnumerator,MethodNames[27],mtProc,TypeInfo(_T29),[TypeInfo(TComponent)],Addr(TListEnumerator.GetCurrent),cRegister);

RegisterProc(TListEnumerator,MethodNames[28],mtProc,TypeInfo(_T30),[TypeInfo(Boolean)],Addr(TListEnumerator.MoveNext),cRegister);

//RegisterProc(TComponent,MethodNames[29],mtProc,TypeInfo(_T31),[
//TypeInfo(Integer),
//TypeInfo(Integer),
//TypeInfoUntyped,TypeInfo(HResult)],Addr(TComponent.GetTypeInfo),cStdCall);

//RegisterProc(TComponent,MethodNames[30],mtProc,TypeInfo(_T32),[
//TypeInfo(TGUID),
//TypeInfoPointer,
//TypeInfo(Integer),
//TypeInfo(Integer),
//TypeInfoPointer,TypeInfo(HResult)],Addr(TComponent.GetIDsOfNames),cStdCall);

RegisterProc(nil,MethodNames[31],mtProc,TypeInfo(_T33),[
TypeInfo(Integer),
TypeInfo(TGUID),
TypeInfo(Integer),
TypeInfo(Word),
TypeInfo(Word),
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,TypeInfo(HResult)],Addr(Invoke),cStdCall);

RegisterProc(TComponent,MethodNames[32],mtProc,TypeInfo(_T34),[
TypeInfo(TObject),
TypeInfoPointer,TypeInfo(HResult)],Addr(TComponent.SafeCallException),cRegister);

RegisterProc(TComponent,MethodNames[33],mtProc,TypeInfo(_T35),NoParams,Addr(TComponent.FreeOnRelease),cRegister);

//RegisterProc(TComponent,MethodNames[34],mtProc,TypeInfo(_T36),NoParams,Addr(TComponent.Modified),cRegister);

//RegisterProc(TComponent,MethodNames[35],mtProc,TypeInfo(_T37),[
//TypeInfo(TPersistent),
//TypeInfo(TOperation)],Addr(TComponent.Notification),cRegister);

//RegisterProc(TComponent,MethodNames[36],mtProc,TypeInfo(_T38),[TypeInfo(IUnknown)],Addr(TComponent.GetComObject),cRegister);

//RegisterProc(TComponent,MethodNames[37],mtProc,TypeInfo(_T39),[
//TypeInfo(Integer),TypeInfo(TComponent)],Addr(TComponent.GetComponent),cRegister);

//RegisterProc(TComponent,MethodNames[38],mtProc,TypeInfo(_T40),[TypeInfo(Integer)],Addr(TComponent.GetComponentCount),cRegister);

//RegisterProc(TComponent,MethodNames[39],mtProc,TypeInfo(_T41),[TypeInfo(Integer)],Addr(TComponent.GetComponentIndex),cRegister);

RegisterProc(tlist,MethodNames[40],mtProc,TypeInfo(_T42),[
TypeInfo(TComponent)],Addr(tlist.Insert),cRegister);


//RegisterProc(TComponent,'Create',mtConstructor,TypeInfo(_T134),[TypeInfo(TComponent)], pointer(44),cRegister);
RegisterProc(TComponent,'Create',mtConstructor,TypeInfo(_T134),[TypeInfo(TComponent)],  getVMTProcAddr('TComponent','Create',44),cRegister);




////RegRegisterMethod(TBinaryReader,'GetBaseStream',TypeInfo(_T192),[TypeInfo(TStream)], pointer(0));
RegRegisterMethod(TBinaryReader,'GetBaseStream',TypeInfo(_T192),[TypeInfo(TStream)],  getVMTProcAddr('TBinaryReader','GetBaseStream',0));



//RegisterProc(nil,MethodNames[41],mtProc,TypeInfo(_T43),[
//TypeInfo(TReader)],Addr(ReadLeft),cRegister);

{RegisterProc(TComponent,MethodNames[42],mtProc,TypeInfo(_T44),[
TypeInfo(TReader)],Addr(TComponent.ReadTop),cRegister);

RegisterProc(nil,MethodNames[43],mtProc,TypeInfo(_T45),[
TypeInfo(TComponent)],Addr(Remove),cRegister);

RegisterProc(nil,MethodNames[44],mtProc,TypeInfo(_T46),[
TypeInfo(TComponent)],Addr(RemoveNotification),cRegister);

RegisterProc(nil,MethodNames[45],mtProc,TypeInfo(_T47),[
TypeInfo(Integer)],Addr(SetComponentIndex),cRegister);

RegisterProc(nil,MethodNames[46],mtProc,TypeInfo(_T48),[
TypeInfo(Boolean)],Addr(SetReference),cRegister);

RegisterProc(nil,MethodNames[47],mtProc,TypeInfo(_T49),[
TypeInfo(TWriter)],Addr(WriteLeft),cRegister);

RegisterProc(nil,MethodNames[48],mtProc,TypeInfo(_T50),[
TypeInfo(TWriter)],Addr(WriteTop),cRegister);

RegisterProc(nil,MethodNames[49],mtProc,TypeInfo(_T51),[TypeInfo(TComponent)],Addr(IntfGetComponent),cRegister);

RegisterProc(nil,MethodNames[50],mtProc,TypeInfo(_T52),[
TypeInfo(string),
TypeInfo(Integer),TypeInfo(TComponent)],Addr(FindSortedComponent),cRegister);

RegisterProc(nil,MethodNames[51],mtProc,TypeInfo(_T53),[
TypeInfo(TComponent)],Addr(AddSortedComponent),cRegister);

RegisterProc(nil,MethodNames[52],mtProc,TypeInfo(_T54),[
TypeInfo(TComponent)],Addr(RemoveSortedComponent),cRegister);

RegisterProc(nil,MethodNames[53],mtProc,TypeInfo(_T55),[
TypeInfo(TComponentName)],Addr(ChangeName),cRegister);

RegisterProc(nil,MethodNames[54],mtProc,TypeInfo(_T56),[
TypeInfo(TGetChildProc),
TypeInfo(TComponent)], pointer(MinVMTOffset - 0),cRegister);

RegisterProc(nil,MethodNames[55],mtProc,TypeInfo(_T57),[TypeInfo(TComponent)], pointer(MinVMTOffset - 0),cRegister);

RegisterProc(nil,MethodNames[56],mtProc,TypeInfo(_T58),[TypeInfo(TComponent)], pointer(MinVMTOffset - 0),cRegister);

RegisterProc(nil,MethodNames[57],mtProc,TypeInfo(_T59),NoParams, pointer(0),cRegister);

RegisterProc(nil,MethodNames[58],mtProc,TypeInfo(_T60),NoParams, pointer(MinVMTOffset - 0),cRegister);

RegisterProc(nil,MethodNames[59],mtProc,TypeInfo(_T61),[
TypeInfo(TReader)], pointer(0),cRegister);

RegisterProc(nil,MethodNames[60],mtProc,TypeInfo(_T62),[
TypeInfo(Boolean)],Addr(SetAncestor),cRegister);

RegisterProc(nil,MethodNames[61],mtScriptProc,TypeInfo(_T63),[
TypeInfo(Boolean),
TypeInfo(Boolean)],Addr(____SetDesigning__Wrapper),cRegister);

RegisterProc(nil,MethodNames[62],mtProc,TypeInfo(_T64),[
TypeInfo(Boolean)],Addr(SetInline),cRegister);

RegisterProc(nil,MethodNames[63],mtProc,TypeInfo(_T65),[
TypeInfo(Boolean)],Addr(SetDesignInstance),cRegister);

RegisterProc(nil,MethodNames[64],mtProc,TypeInfo(_T66),[
TypeInfo(TComponentName)], pointer(0),cRegister);

RegisterProc(nil,MethodNames[65],mtProc,TypeInfo(_T67),[
TypeInfo(TComponent),
TypeInfo(Integer)], pointer(MinVMTOffset - 0),cRegister);

RegisterProc(nil,MethodNames[66],mtProc,TypeInfo(_T68),[
TypeInfo(TComponent)], pointer(MinVMTOffset - 0),cRegister);

RegisterProc(nil,MethodNames[67],mtProc,TypeInfo(_T69),NoParams, pointer(MinVMTOffset - 0),cRegister);

RegisterProc(nil,MethodNames[68],mtProc,TypeInfo(_T70),NoParams, pointer(MinVMTOffset - 0),cRegister);

RegisterProc(nil,MethodNames[69],mtProc,TypeInfo(_T71),[
TypeInfo(Boolean),
TypeInfo(string),
TypeInfo(string)], pointer(0),cRegister);

RegisterProc(nil,MethodNames[70],mtProc,TypeInfo(_T72),[
TypeInfo(TComponent),
TypeInfo(string),
TypeInfo(string)], pointer(0),cRegister);

RegisterProc(nil,MethodNames[71],mtProc,TypeInfo(_T73),[
TypeInfo(TComponent)], pointer(MinVMTOffset - 0),cRegister);

RegisterProc(nil,MethodNames[72],mtProc,TypeInfo(_T74),[
TypeInfo(TComponent)], pointer(MinVMTOffset - 0),cRegister);

RegisterProc(nil,MethodNames[73],mtProc,TypeInfo(_T75),[
TypeInfo(TWriter)], pointer(0),cRegister);

RegisterProc(nil,MethodNames[74],mtProc,TypeInfo(_T76),NoParams,Addr(RemoveFreeNotifications),cRegister);
                   }
RegisterProc(nil,MethodNames[75],mtProc,TypeInfo(_T77),[
TypeInfo(TGUID),
TypeInfoUntyped,TypeInfo(HResult)], pointer(0),cStdCall);

//RegisterProc(nil,MethodNames[76],mtProc,TypeInfo(_T78),[TypeInfo(Integer)],Addr(_AddRef),cStdCall);

//RegisterProc(nil,MethodNames[77],mtProc,TypeInfo(_T79),[TypeInfo(Integer)],Addr(_Release),cStdCall);

//RegisterProc(nil,MethodNames[78],mtProc,TypeInfo(_T80),[
//TypeInfo(Integer),TypeInfo(HResult)],Addr(GetTypeInfoCount),cStdCall);
//
//RegisterProc(nil,MethodNames[79],mtProc,TypeInfo(_T81),NoParams,Addr(DestroyComponents),cRegister);
//
//RegisterProc(nil,MethodNames[80],mtProc,TypeInfo(_T82),NoParams,Addr(Destroying),cRegister);

RegisterProc(nil,MethodNames[81],mtProc,TypeInfo(_T83),[
TypeInfo(TBasicAction),TypeInfo(Boolean)], pointer(MinVMTOffset - 0),cRegister);

//RegisterProc(nil,MethodNames[82],mtProc,TypeInfo(_T84),[
//TypeInfo(string),TypeInfo(TComponent)],Addr(FindComponent),cRegister);
//
//RegisterProc(nil,MethodNames[83],mtProc,TypeInfo(_T85),[
//TypeInfo(TComponent)],Addr(FreeNotification),cRegister);
//
//RegisterProc(nil,MethodNames[84],mtProc,TypeInfo(_T86),[
//TypeInfo(TComponent)],Addr(RemoveFreeNotification),cRegister);

//RegisterProc(nil,MethodNames[85],mtProc,TypeInfo(_T87),[TypeInfo(TComponentEnumerator)],Addr(GetEnumerator),cRegister);

RegisterProc(nil,MethodNames[86],mtProc,TypeInfo(_T88),[TypeInfo(TComponent)], pointer(MinVMTOffset - 0),cRegister);

RegisterProc(nil,MethodNames[87],mtProc,TypeInfo(_T89),[TypeInfo(Boolean)], pointer(MinVMTOffset - 0),cRegister);

//RegisterProc(nil,MethodNames[88],mtProc,TypeInfo(_T90),[
//TypeInfo(TComponent)],Addr(InsertComponent),cRegister);
//
//RegisterProc(nil,MethodNames[89],mtProc,TypeInfo(_T91),[
//TypeInfo(TComponent)],Addr(RemoveComponent),cRegister);
//
//RegisterProc(nil,MethodNames[90],mtProc,TypeInfo(_T92),[
//TypeInfo(Boolean)],Addr(SetSubComponent),cRegister);

RegisterProc(nil,MethodNames[91],mtProc,TypeInfo(_T93),[
TypeInfo(TBasicAction),TypeInfo(Boolean)], pointer(0),cRegister);
//
//RegisterProc(nil,MethodNames[92],mtProc,TypeInfo(_T94),[
//TypeInfo(IInterface),TypeInfo(Boolean)],Addr(IsImplementorOf),cRegister);
//
//RegisterProc(nil,MethodNames[93],mtProc,TypeInfo(_T95),[
//TypeInfo(IInterface),
//TypeInfo(TOperation),TypeInfo(Boolean)],Addr(ReferenceInterface),cRegister);

RegisterProc(nil,MethodNames[94],mtProc,TypeInfo(_T96),[
TypeInfo(TObject)], pointer(0),cRegister);

RegisterProc(nil,MethodNames[95],mtProc,TypeInfo(_T97),NoParams, pointer(0),cRegister);

RegisterProc(nil,MethodNames[96],mtProc,TypeInfo(_T98),[TypeInfo(Boolean)], pointer(0),cRegister);

RegisterProc(nil,MethodNames[97],mtProc,TypeInfo(_T99),[
TypeInfo(TBasicAction)], pointer(0),cRegister);

RegisterProc(nil,MethodNames[98],mtProc,TypeInfo(_T101),[TypeInfo(Boolean)], pointer(0),cRegister);

//RegisterProc(nil,MethodNames[99],mtProc,TypeInfo(_T102),[
//TypeInfo(TComponent)],Addr(SetActionComponent),cRegister);

RegisterProc(nil,MethodNames[100],mtProc,TypeInfo(_T103),[
TypeInfo(TObject),TypeInfo(Boolean)], pointer(0),cRegister);

RegisterProc(nil,MethodNames[101],mtProc,TypeInfo(_T104),[
TypeInfo(TObject)], pointer(0),cRegister);

RegisterProc(nil,MethodNames[102],mtProc,TypeInfo(_T105),[
TypeInfo(TObject)], pointer(0),cRegister);
{
RegisterProc(nil,MethodNames[103],mtProc,TypeInfo(_T106),[
TypeInfo(TBasicActionLink)],Addr(RegisterChanges),cRegister);

RegisterProc(nil,MethodNames[104],mtProc,TypeInfo(_T107),[
TypeInfo(TBasicActionLink)],Addr(UnRegisterChanges),cRegister);

RegisterProc(nil,MethodNames[105],mtProc,TypeInfo(_T108),[
TypeInfo(TReader)],Addr(ReadHeight),cRegister);

RegisterProc(nil,MethodNames[106],mtProc,TypeInfo(_T109),[
TypeInfo(TReader)],Addr(ReadHorizontalOffset),cRegister);

RegisterProc(nil,MethodNames[107],mtProc,TypeInfo(_T110),[
TypeInfo(TReader)],Addr(ReadVerticalOffset),cRegister);

RegisterProc(nil,MethodNames[108],mtProc,TypeInfo(_T111),[
TypeInfo(TReader)],Addr(ReadWidth),cRegister);

RegisterProc(nil,MethodNames[109],mtProc,TypeInfo(_T112),[
TypeInfo(TWriter)],Addr(WriteWidth),cRegister);

RegisterProc(nil,MethodNames[110],mtProc,TypeInfo(_T113),[
TypeInfo(TWriter)],Addr(WriteHorizontalOffset),cRegister);

RegisterProc(nil,MethodNames[111],mtProc,TypeInfo(_T114),[
TypeInfo(TWriter)],Addr(WriteVerticalOffset),cRegister);

RegisterProc(nil,MethodNames[112],mtProc,TypeInfo(_T115),[
TypeInfo(TWriter)],Addr(WriteHeight),cRegister);
                           }
RegisterProc(nil,MethodNames[113],mtProc,TypeInfo(_T116),NoParams, pointer(0),cRegister);

RegisterProc(nil,MethodNames[114],mtProc,TypeInfo(_T117),NoParams, pointer(0),cRegister);

RegisterProc(nil,MethodNames[115],mtProc,TypeInfo(_T118),[TypeInfo(Boolean)], pointer(MinVMTOffset - 0),cRegister);

RegisterProc(nil,MethodNames[116],mtProc,TypeInfo(_T119),[
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(TPoint)],Addr(Point),cRegister);

RegisterProc(nil,MethodNames[117],mtProc,TypeInfo(_T120),[
TypeInfo(SmallInt),
TypeInfo(SmallInt),TypeInfo(TSmallPoint)],Addr(SmallPoint),cRegister);

RegisterProc(nil,MethodNames[118],mtProc,TypeInfo(_T121),[
TypeInfo(TPoint),
TypeInfo(TPoint),TypeInfo(Boolean)],Addr(PointsEqual),cRegister);

RegisterProc(nil,MethodNames[119],mtProc,TypeInfo(_T122),[
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Boolean)],Addr(InvalidPoint),cRegister);

RegisterProc(nil,MethodNames[120],mtProc,TypeInfo(_T123),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(TRect)],Addr(Rect),cRegister);

RegisterProc(nil,MethodNames[121],mtProc,TypeInfo(_T124),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(TRect)],Addr(Bounds),cRegister);

RegisterProc(nil,MethodNames[122],mtProc,TypeInfo(_T130),[
TypeInfo(HMODULE)],Addr(UnRegisterModuleClasses),cRegister);

RegisterProc(nil,MethodNames[123],mtProc,TypeInfo(_T145),[
TypeInfo(string),TypeInfo(TComponent)],Addr(FindGlobalComponent),cRegister);

RegisterProc(nil,MethodNames[124],mtProc,TypeInfo(_T146),[
TypeInfo(string),TypeInfo(Boolean)],Addr(IsUniqueGlobalComponentName),cRegister);

RegisterProc(nil,MethodNames[125],mtProc,TypeInfo(_T147),[
TypeInfo(string),
TypeInfo(Longint),
ArrayInfo(TypeInfo(IDispatch)),TypeInfo(Boolean)],Addr(____IdentToInt__Wrapper),cRegister);

RegisterProc(nil,MethodNames[126],mtProc,TypeInfo(_T148),[
TypeInfo(Longint),
TypeInfo(string),
ArrayInfo(TypeInfo(IDispatch)),TypeInfo(Boolean)],Addr(____IntToIdent__Wrapper),cRegister);

RegisterProc(nil,MethodNames[127],mtProc,TypeInfo(_T152),[
TypeInfo(string),
TypeInfo(TComponent),TypeInfo(Boolean)],Addr(InitComponentRes),cRegister);

RegisterProc(nil,MethodNames[128],mtProc,TypeInfo(_T153),[
TypeInfo(string),
TypeInfo(TComponent),TypeInfo(TComponent)],Addr(ReadComponentRes),cRegister);

RegisterProc(nil,MethodNames[129],mtProc,TypeInfo(_T154),[
TypeInfo(THandle),
TypeInfo(string),TypeInfo(TComponent)],Addr(ReadComponentResEx),cRegister);

RegisterProc(nil,MethodNames[130],mtProc,TypeInfo(_T155),[
TypeInfo(string),
TypeInfo(TComponent),TypeInfo(TComponent)],Addr(ReadComponentResFile),cRegister);

RegisterProc(nil,MethodNames[131],mtProc,TypeInfo(_T156),[
TypeInfo(string),
TypeInfo(TComponent)],Addr(WriteComponentResFile),cRegister);

RegisterProc(nil,MethodNames[132],mtProc,TypeInfo(_T157),NoParams,Addr(GlobalFixupReferences),cRegister);

RegisterProc(nil,MethodNames[133],mtProc,TypeInfo(_T158),[
TypeInfo(TComponent),
TypeInfo(TStrings)],Addr(GetFixupReferenceNames),cRegister);

RegisterProc(nil,MethodNames[134],mtProc,TypeInfo(_T159),[
TypeInfo(TComponent),
TypeInfo(string),
TypeInfo(TStrings)],Addr(GetFixupInstanceNames),cRegister);

RegisterProc(nil,MethodNames[135],mtProc,TypeInfo(_T160),[
TypeInfo(TComponent),
TypeInfo(string),
TypeInfo(string)],Addr(RedirectFixupReferences),cRegister);

RegisterProc(nil,MethodNames[136],mtProc,TypeInfo(_T161),[
TypeInfo(TComponent),
TypeInfo(string)],Addr(RemoveFixupReferences),cRegister);

RegisterProc(nil,MethodNames[137],mtProc,TypeInfo(_T162),[
TypeInfo(TPersistent)],Addr(RemoveFixups),cRegister);

RegisterProc(nil,MethodNames[138],mtProc,TypeInfo(_T163),[
TypeInfo(TComponent),
TypeInfo(string),TypeInfo(TComponent)],Addr(FindNestedComponent),cRegister);

RegisterProc(nil,MethodNames[139],mtProc,TypeInfo(_T164),NoParams,Addr(BeginGlobalLoading),cRegister);

RegisterProc(nil,MethodNames[140],mtProc,TypeInfo(_T165),NoParams,Addr(NotifyGlobalLoading),cRegister);

RegisterProc(nil,MethodNames[141],mtProc,TypeInfo(_T166),NoParams,Addr(EndGlobalLoading),cRegister);

RegisterProc(nil,MethodNames[142],mtProc,TypeInfo(_T167),[
TypeInfo(TCollection),
TypeInfo(TCollection),
TypeInfo(TComponent),
TypeInfo(TComponent),TypeInfo(Boolean)],Addr(CollectionsEqual),cRegister);

RegisterProc(nil,MethodNames[143],mtProc,TypeInfo(_T168),[
TypeInfo(TCollectionItem),TypeInfo(TPersistent)],Addr(GetUltimateOwner),cRegister);

RegisterProc(nil,MethodNames[144],mtProc,TypeInfo(_T169),[
TypeInfo(TStream),
TypeInfo(TStream)],Addr(ObjectBinaryToText),cRegister);

RegisterProc(nil,MethodNames[145],mtProc,TypeInfo(_T170),[
TypeInfo(TStream),
TypeInfo(TStream)],Addr(ObjectTextToBinary),cRegister);

RegisterProc(nil,MethodNames[146],mtProc,TypeInfo(_T171),[
TypeInfo(TStream),
TypeInfo(TStream)],Addr(ObjectResourceToText),cRegister);

RegisterProc(nil,MethodNames[147],mtProc,TypeInfo(_T172),[
TypeInfo(TStream),
TypeInfo(TStream)],Addr(ObjectTextToResource),cRegister);

RegisterProc(nil,MethodNames[148],mtProc,TypeInfo(_T173),[
TypeInfo(TStream),TypeInfo(TStreamOriginalFormat)],Addr(TestStreamFormat),cRegister);

RegisterProc(nil,MethodNames[149],mtProc,TypeInfo(_T174),[
TypeInfo(TStream),
TypeInfo(string),TypeInfo(Boolean)],Addr(GetResourceName),cRegister);

RegisterProc(nil,MethodNames[150],mtProc,TypeInfo(_T175),[
TypeInfo(TStream),
TypeInfo(TStream)],Addr(WriteObjectResourceHeader),cRegister);

RegisterProc(nil,MethodNames[151],mtProc,TypeInfo(_T176),[
TypeInfo(TBytes),
TypeInfo(Integer),
TypeInfo(TStream)],Addr(Write16bitResourceHeader),cRegister);

RegisterProc(nil,MethodNames[152],mtProc,TypeInfo(_T177),[
TypeInfo(TBytes),
TypeInfo(Integer),
TypeInfo(TStream)],Addr(Write32bitResourceHeader),cRegister);

RegisterProc(nil,MethodNames[153],mtProc,TypeInfo(_T182),[
TypeInfo(TPersistent),TypeInfo(IDesignerNotify)],Addr(FindRootDesigner),cRegister);

RegisterProc(nil,MethodNames[154],mtScriptProc,TypeInfo(_T184),[
TypeInfo(Integer),TypeInfo(Boolean)],Addr(____CheckSynchronize__Wrapper),cRegister);

RegisterProc(nil,MethodNames[155],mtProc,TypeInfo(_T186),[
TypeInfoPointer],Addr(FreeObjectInstance),cRegister);

RegisterProc(nil,MethodNames[156],mtProc,TypeInfo(_T188),[
TypeInfo(HWND)],Addr(DeallocateHWnd),cRegister);

RegisterProc(nil,MethodNames[157],mtProc,TypeInfo(_T189),[
TypeInfo(TPersistent),
TypeInfo(TComponent),
TypeInfo(TComponent),TypeInfo(Boolean)],Addr(AncestorIsValid),cRegister);

RegisterProc(EFileStreamError,'Create',mtConstructor,TypeInfo(_T191),[
TypeInfo(PResStringRec),
TypeInfo(string)],Addr(EFileStreamError.Create),cRegister);

//RegRegisterMethod(TBinaryReader,'GetBaseStream',TypeInfo(_T192),[TypeInfo(TStream)], pointer(0));
RegRegisterMethod(TBinaryReader,'GetBaseStream',TypeInfo(_T192),[TypeInfo(TStream)],  getVMTProcAddr('TBinaryReader','GetBaseStream',0));



//RegRegisterMethod(TBinaryReader,'Read7BitEncodedInt',TypeInfo(_T193),[TypeInfo(Integer)], pointer(4));
RegRegisterMethod(TBinaryReader,'Read7BitEncodedInt',TypeInfo(_T193),[TypeInfo(Integer)],  getVMTProcAddr('TBinaryReader','Read7BitEncodedInt',4));



RegisterProc(TBinaryReader,'Create',mtConstructor,TypeInfo(_T194),[
TypeInfo(TStream),
TypeInfo(TEncoding)],Addr(TBinaryReader.Create),cRegister);

//RegRegisterMethod(TBinaryReader,'Close',TypeInfo(_T195),NoParams, pointer(8));
RegRegisterMethod(TBinaryReader,'Close',TypeInfo(_T195),NoParams,  getVMTProcAddr('TBinaryReader','Close',8));



//RegRegisterMethod(TBinaryReader,'PeekChar',TypeInfo(_T196),[TypeInfo(Integer)], pointer(12));
RegRegisterMethod(TBinaryReader,'PeekChar',TypeInfo(_T196),[TypeInfo(Integer)],  getVMTProcAddr('TBinaryReader','PeekChar',12));



//RegRegisterMethod(TBinaryReader,'Read',TypeInfo(_T197),[TypeInfo(Integer)], pointer(16));
RegRegisterMethod(TBinaryReader,'Read',TypeInfo(_T197),[TypeInfo(Integer)],  getVMTProcAddr('TBinaryReader','Read',16));



//RegRegisterMethod(TBinaryReader,'ReadBoolean',TypeInfo(_T198),[TypeInfo(Boolean)], pointer(28));
RegRegisterMethod(TBinaryReader,'ReadBoolean',TypeInfo(_T198),[TypeInfo(Boolean)],  getVMTProcAddr('TBinaryReader','ReadBoolean',28));



//RegRegisterMethod(TBinaryReader,'ReadByte',TypeInfo(_T199),[TypeInfo(Byte)], pointer(32));
RegRegisterMethod(TBinaryReader,'ReadByte',TypeInfo(_T199),[TypeInfo(Byte)],  getVMTProcAddr('TBinaryReader','ReadByte',32));



//RegRegisterMethod(TBinaryReader,'ReadBytes',TypeInfo(_T200),[TypeInfo(Integer),TypeInfo(TBytes)], pointer(36));
RegRegisterMethod(TBinaryReader,'ReadBytes',TypeInfo(_T200),[TypeInfo(Integer),TypeInfo(TBytes)],  getVMTProcAddr('TBinaryReader','ReadBytes',36));



//RegRegisterMethod(TBinaryReader,'ReadChar',TypeInfo(_T201),[TypeInfo(Char)], pointer(40));
RegRegisterMethod(TBinaryReader,'ReadChar',TypeInfo(_T201),[TypeInfo(Char)],  getVMTProcAddr('TBinaryReader','ReadChar',40));



//RegRegisterMethod(TBinaryReader,'ReadChars',TypeInfo(_T202),[TypeInfo(Integer),TypeInfo(TCharArray)], pointer(44));
RegRegisterMethod(TBinaryReader,'ReadChars',TypeInfo(_T202),[TypeInfo(Integer),TypeInfo(TCharArray)],  getVMTProcAddr('TBinaryReader','ReadChars',44));



//RegRegisterMethod(TBinaryReader,'ReadDouble',TypeInfo(_T203),[TypeInfo(Double)], pointer(48));
RegRegisterMethod(TBinaryReader,'ReadDouble',TypeInfo(_T203),[TypeInfo(Double)],  getVMTProcAddr('TBinaryReader','ReadDouble',48));



//RegRegisterMethod(TBinaryReader,'ReadShortInt',TypeInfo(_T204),[TypeInfo(Shortint)], pointer(52));
RegRegisterMethod(TBinaryReader,'ReadShortInt',TypeInfo(_T204),[TypeInfo(Shortint)],  getVMTProcAddr('TBinaryReader','ReadShortInt',52));



RegRegisterMethod(TBinaryReader,'ReadInt16',TypeInfo(_T205),[TypeInfo(Shortint)],Addr(TBinaryReader.ReadInt16));

//RegRegisterMethod(TBinaryReader,'ReadInteger',TypeInfo(_T206),[TypeInfo(Integer)], pointer(56));
RegRegisterMethod(TBinaryReader,'ReadInteger',TypeInfo(_T206),[TypeInfo(Integer)],  getVMTProcAddr('TBinaryReader','ReadInteger',56));



RegRegisterMethod(TBinaryReader,'ReadInt32',TypeInfo(_T207),[TypeInfo(Integer)],Addr(TBinaryReader.ReadInt32));

//RegRegisterMethod(TBinaryReader,'ReadSmallInt',TypeInfo(_T209),[TypeInfo(SmallInt)], pointer(64));
RegRegisterMethod(TBinaryReader,'ReadSmallInt',TypeInfo(_T209),[TypeInfo(SmallInt)],  getVMTProcAddr('TBinaryReader','ReadSmallInt',64));



RegRegisterMethod(TBinaryReader,'ReadSByte',TypeInfo(_T210),[TypeInfo(SmallInt)],Addr(TBinaryReader.ReadSByte));

//RegRegisterMethod(TBinaryReader,'ReadSingle',TypeInfo(_T211),[TypeInfo(Single)], pointer(68));
RegRegisterMethod(TBinaryReader,'ReadSingle',TypeInfo(_T211),[TypeInfo(Single)],  getVMTProcAddr('TBinaryReader','ReadSingle',68));



//RegRegisterMethod(TBinaryReader,'ReadString',TypeInfo(_T212),[TypeInfo(string)], pointer(72));
RegRegisterMethod(TBinaryReader,'ReadString',TypeInfo(_T212),[TypeInfo(string)],  getVMTProcAddr('TBinaryReader','ReadString',72));



//RegRegisterMethod(TBinaryReader,'ReadWord',TypeInfo(_T213),[TypeInfo(Word)], pointer(76));
RegRegisterMethod(TBinaryReader,'ReadWord',TypeInfo(_T213),[TypeInfo(Word)],  getVMTProcAddr('TBinaryReader','ReadWord',76));



RegRegisterMethod(TBinaryReader,'ReadUInt16',TypeInfo(_T214),[TypeInfo(Word)],Addr(TBinaryReader.ReadUInt16));

//RegRegisterMethod(TBinaryReader,'ReadCardinal',TypeInfo(_T215),[TypeInfo(Cardinal)], pointer(80));
RegRegisterMethod(TBinaryReader,'ReadCardinal',TypeInfo(_T215),[TypeInfo(Cardinal)],  getVMTProcAddr('TBinaryReader','ReadCardinal',80));



RegRegisterMethod(TBinaryReader,'ReadUInt32',TypeInfo(_T216),[TypeInfo(Cardinal)],Addr(TBinaryReader.ReadUInt32));

//RegRegisterMethod(TBinaryReader,'ReadUInt64',TypeInfo(_T217),[TypeInfo(UInt64)], pointer(84));
RegRegisterMethod(TBinaryReader,'ReadUInt64',TypeInfo(_T217),[TypeInfo(UInt64)],  getVMTProcAddr('TBinaryReader','ReadUInt64',84));



//RegRegisterMethod(TBinaryWriter,'GetBaseStream',TypeInfo(_T218),[TypeInfo(TStream)], pointer(0));
RegRegisterMethod(TBinaryWriter,'GetBaseStream',TypeInfo(_T218),[TypeInfo(TStream)],  getVMTProcAddr('TBinaryWriter','GetBaseStream',0));



//RegRegisterMethod(TBinaryWriter,'Write7BitEncodedInt',TypeInfo(_T219),[TypeInfo(Integer)], pointer(4));
RegRegisterMethod(TBinaryWriter,'Write7BitEncodedInt',TypeInfo(_T219),[TypeInfo(Integer)],  getVMTProcAddr('TBinaryWriter','Write7BitEncodedInt',4));



RegisterProc(TBinaryWriter,'Create',mtConstructor,TypeInfo(_T220),[
TypeInfo(TStream)],Addr(TBinaryWriter.Create),cRegister);

//RegRegisterMethod(TBinaryWriter,'Close',TypeInfo(_T221),NoParams, pointer(8));
RegRegisterMethod(TBinaryWriter,'Close',TypeInfo(_T221),NoParams,  getVMTProcAddr('TBinaryWriter','Close',8));



//RegRegisterMethod(TBinaryWriter,'Write',TypeInfo(_T223),[TypeInfo(Byte)], pointer(16));
RegRegisterMethod(TBinaryWriter,'Write',TypeInfo(_T223),[TypeInfo(Byte)],  getVMTProcAddr('TBinaryWriter','Write',16));



RegRegisterMethod(TBits,'OpenBit',TypeInfo(_T224),[TypeInfo(Integer)],Addr(TBits.OpenBit));

RegisterProc(TBytesStream,'Create',mtConstructor,TypeInfo(_T225),[
TypeInfo(TBytes)],Addr(TBytesStream.Create),cRegister);

//RegRegisterMethod(TCollection,'Added',TypeInfo(_T229),[TypeInfo(TCollectionItem)], pointer(12));
RegRegisterMethod(TCollection,'Added',TypeInfo(_T229),[TypeInfo(TCollectionItem)],  getVMTProcAddr('TCollection','Added',12));



//RegRegisterMethod(TCollection,'Deleting',TypeInfo(_T230),[TypeInfo(TCollectionItem)], pointer(16));
RegRegisterMethod(TCollection,'Deleting',TypeInfo(_T230),[TypeInfo(TCollectionItem)],  getVMTProcAddr('TCollection','Deleting',16));



//RegRegisterMethod(TCollection,'Notify',TypeInfo(_T231),[TypeInfo(TCollectionItem),TypeInfo(TCollectionNotification)], pointer(20));
RegRegisterMethod(TCollection,'Notify',TypeInfo(_T231),[TypeInfo(TCollectionItem),TypeInfo(TCollectionNotification)],  getVMTProcAddr('TCollection','Notify',20));



RegRegisterMethod(TCollection,'GetAttrCount',TypeInfo(_T232),[TypeInfo(Integer)], pointer(MinVMTOffset - 2));

RegRegisterMethod(TCollection,'GetAttr',TypeInfo(_T233),[
TypeInfo(Integer),TypeInfo(string)], pointer(MinVMTOffset - 3));

RegRegisterMethod(TCollection,'GetItemAttr',TypeInfo(_T234),[
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(string)], pointer(MinVMTOffset - 4));

//RegRegisterMethod(TCollection,'SetItemName',TypeInfo(_T235),[TypeInfo(TCollectionItem)], pointer(24));
RegRegisterMethod(TCollection,'SetItemName',TypeInfo(_T235),[TypeInfo(TCollectionItem)],  getVMTProcAddr('TCollection','SetItemName',24));



//RegRegisterMethod(TCollection,'Update',TypeInfo(_T236),[TypeInfo(TCollectionItem)], pointer(28));
RegRegisterMethod(TCollection,'Update',TypeInfo(_T236),[TypeInfo(TCollectionItem)],  getVMTProcAddr('TCollection','Update',28));



RegRegisterMethod(TCollection,'Owner',TypeInfo(_T238),[TypeInfo(TPersistent)],Addr(TCollection.Owner));

RegRegisterMethod(TCollection,'Add',TypeInfo(_T239),[TypeInfo(TCollectionItem)],Addr(TCollection.Add));

//RegRegisterMethod(TCollection,'BeginUpdate',TypeInfo(_T240),NoParams, pointer(32));
RegRegisterMethod(TCollection,'BeginUpdate',TypeInfo(_T240),NoParams,  getVMTProcAddr('TCollection','BeginUpdate',32));



RegRegisterMethod(TCollection,'Clear',TypeInfo(_T241),NoParams,Addr(TCollection.Clear));

RegRegisterMethod(TCollection,'Delete',TypeInfo(_T242),[
TypeInfo(Integer)],Addr(TCollection.Delete));

//RegRegisterMethod(TCollection,'EndUpdate',TypeInfo(_T243),NoParams, pointer(36));
RegRegisterMethod(TCollection,'EndUpdate',TypeInfo(_T243),NoParams,  getVMTProcAddr('TCollection','EndUpdate',36));



RegRegisterMethod(TCollection,'FindItemID',TypeInfo(_T244),[
TypeInfo(Integer),TypeInfo(TCollectionItem)],Addr(TCollection.FindItemID));

RegRegisterMethod(TCollection,'GetEnumerator',TypeInfo(_T245),[TypeInfo(TCollectionEnumerator)],Addr(TCollection.GetEnumerator));

RegRegisterMethod(TCollection,'Insert',TypeInfo(_T246),[
TypeInfo(Integer),TypeInfo(TCollectionItem)],Addr(TCollection.Insert));

RegisterProc(TCollectionEnumerator,'Create',mtConstructor,TypeInfo(_T247),[
TypeInfo(TCollection)],Addr(TCollectionEnumerator.Create),cRegister);

RegRegisterMethod(TCollectionEnumerator,'GetCurrent',TypeInfo(_T248),[TypeInfo(TCollectionItem)],Addr(TCollectionEnumerator.GetCurrent));

RegRegisterMethod(TCollectionEnumerator,'MoveNext',TypeInfo(_T249),[TypeInfo(Boolean)],Addr(TCollectionEnumerator.MoveNext));

//RegRegisterMethod(TCollectionItem,'GetDisplayName',TypeInfo(_T250),[TypeInfo(string)], pointer(12));
RegRegisterMethod(TCollectionItem,'GetDisplayName',TypeInfo(_T250),[TypeInfo(string)],  getVMTProcAddr('TCollectionItem','GetDisplayName',12));



//RegRegisterMethod(TCollectionItem,'SetCollection',TypeInfo(_T251),[TypeInfo(TCollection)], pointer(16));
RegRegisterMethod(TCollectionItem,'SetCollection',TypeInfo(_T251),[TypeInfo(TCollection)],  getVMTProcAddr('TCollectionItem','SetCollection',16));



//RegRegisterMethod(TCollectionItem,'SetIndex',TypeInfo(_T252),[TypeInfo(Integer)], pointer(20));
RegRegisterMethod(TCollectionItem,'SetIndex',TypeInfo(_T252),[TypeInfo(Integer)],  getVMTProcAddr('TCollectionItem','SetIndex',20));



//RegRegisterMethod(TCollectionItem,'SetDisplayName',TypeInfo(_T253),[TypeInfo(string)], pointer(24));
RegRegisterMethod(TCollectionItem,'SetDisplayName',TypeInfo(_T253),[TypeInfo(string)],  getVMTProcAddr('TCollectionItem','SetDisplayName',24));



RegisterProc(TCollectionItem,'Create',mtConstructor,TypeInfo(_T254),[
TypeInfo(TCollection)], pointer(28),cRegister);

RegRegisterMethod(TCustomMemoryStream,'SaveToStream',TypeInfo(_T255),[
TypeInfo(TStream)],Addr(TCustomMemoryStream.SaveToStream));

RegRegisterMethod(TCustomMemoryStream,'SaveToFile',TypeInfo(_T256),[
TypeInfo(string)],Addr(TCustomMemoryStream.SaveToFile));

//RegRegisterMethod(TFiler,'SetRoot',TypeInfo(_T257),[TypeInfo(TComponent)], pointer(0));
RegRegisterMethod(TFiler,'SetRoot',TypeInfo(_T257),[TypeInfo(TComponent)],  getVMTProcAddr('TFiler','SetRoot',0));



RegisterProc(TFiler,'Create',mtConstructor,TypeInfo(_T258),[
TypeInfo(TStream),
TypeInfo(Integer)],Addr(TFiler.Create),cRegister);

//RegRegisterMethod(TFiler,'FlushBuffer',TypeInfo(_T261),NoParams, pointer(12));
RegRegisterMethod(TFiler,'FlushBuffer',TypeInfo(_T261),NoParams,  getVMTProcAddr('TFiler','FlushBuffer',12));



RegisterProc(TFileStream,'Create',mtConstructor,TypeInfo(_T262),[
TypeInfo(string),
TypeInfo(Word)],Addr(TFileStream.Create),cRegister);

RegisterProc(THandleStream,'Create',mtConstructor,TypeInfo(_T263),[
TypeInfo(Integer)],Addr(THandleStream.Create),cRegister);

RegisterProc(TInterfacedPersistent,'QueryInterface',mtMethod,TypeInfo(_T264),[
TypeInfo(TGUID),
TypeInfoUntyped,TypeInfo(HResult)], pointer(12),cStdCall);

RegisterProc(TInterfaceList,'Create',mtConstructor,TypeInfo(_T265),NoParams,Addr(TInterfaceList.Create),cRegister);

RegRegisterMethod(TInterfaceList,'Clear',TypeInfo(_T266),NoParams,Addr(TInterfaceList.Clear));

RegRegisterMethod(TInterfaceList,'Delete',TypeInfo(_T267),[
TypeInfo(Integer)],Addr(TInterfaceList.Delete));

RegRegisterMethod(TInterfaceList,'Exchange',TypeInfo(_T268),[
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TInterfaceList.Exchange));

RegRegisterMethod(TInterfaceList,'Expand',TypeInfo(_T269),[TypeInfo(TInterfaceList)],Addr(TInterfaceList.Expand));

RegRegisterMethod(TInterfaceList,'First',TypeInfo(_T270),[TypeInfo(IInterface)],Addr(TInterfaceList.First));

RegRegisterMethod(TInterfaceList,'IndexOf',TypeInfo(_T271),[
TypeInfo(IInterface),TypeInfo(Integer)],Addr(TInterfaceList.IndexOf));

RegRegisterMethod(TInterfaceList,'IndexOfItem',TypeInfo(_T272),[
TypeInfo(IInterface),
TypeInfo(classes.TList.TDirection),TypeInfo(Integer)],Addr(TInterfaceList.IndexOfItem));

RegRegisterMethod(TInterfaceList,'Add',TypeInfo(_T273),[
TypeInfo(IInterface),TypeInfo(Integer)],Addr(TInterfaceList.Add));

RegRegisterMethod(TInterfaceList,'Insert',TypeInfo(_T274),[
TypeInfo(Integer),
TypeInfo(IInterface)],Addr(TInterfaceList.Insert));

RegRegisterMethod(TInterfaceList,'Last',TypeInfo(_T275),[TypeInfo(IInterface)],Addr(TInterfaceList.Last));

RegRegisterMethod(TInterfaceList,'Remove',TypeInfo(_T276),[
TypeInfo(IInterface),TypeInfo(Integer)],Addr(TInterfaceList.Remove));

RegRegisterMethod(TInterfaceList,'RemoveItem',TypeInfo(_T277),[
TypeInfo(IInterface),
TypeInfo(classes.TList.TDirection),TypeInfo(Integer)],Addr(TInterfaceList.RemoveItem));

RegRegisterMethod(TInterfaceList,'Lock',TypeInfo(_T278),NoParams,Addr(TInterfaceList.Lock));

RegRegisterMethod(TInterfaceList,'Unlock',TypeInfo(_T279),NoParams,Addr(TInterfaceList.Unlock));

RegRegisterMethod(TInterfaceList,'GetEnumerator',TypeInfo(_T280),[TypeInfo(TInterfaceListEnumerator)],Addr(TInterfaceList.GetEnumerator));

RegisterProc(TInterfaceListEnumerator,'Create',mtConstructor,TypeInfo(_T281),[
TypeInfo(TInterfaceList)],Addr(TInterfaceListEnumerator.Create),cRegister);

RegRegisterMethod(TInterfaceListEnumerator,'GetCurrent',TypeInfo(_T282),[TypeInfo(IInterface)],Addr(TInterfaceListEnumerator.GetCurrent));

RegRegisterMethod(TInterfaceListEnumerator,'MoveNext',TypeInfo(_T283),[TypeInfo(Boolean)],Addr(TInterfaceListEnumerator.MoveNext));

//RegRegisterMethod(TList,'Grow',TypeInfo(_T284),NoParams, pointer(0));
RegRegisterMethod(TList,'Grow',TypeInfo(_T284),NoParams,  getVMTProcAddr('TList','Grow',0));



//RegRegisterMethod(TList,'Notify',TypeInfo(_T285),[TypeInfoPointer,TypeInfo(TListNotification)], pointer(4));
RegRegisterMethod(TList,'Notify',TypeInfo(_T285),[TypeInfoPointer,TypeInfo(TListNotification)],  getVMTProcAddr('TList','Notify',4));



RegRegisterMethod(TList,'Add',TypeInfo(_T286),[
TypeInfoPointer,TypeInfo(Integer)],Addr(TList.Add));

//RegRegisterMethod(TList,'Clear',TypeInfo(_T287),NoParams, pointer(8));
RegRegisterMethod(TList,'Clear',TypeInfo(_T287),NoParams,  getVMTProcAddr('TList','Clear',8));



RegRegisterMethod(TList,'Delete',TypeInfo(_T288),[
TypeInfo(Integer)],Addr(TList.Delete));

RegisterProc(TList,'Error',mtClassMethod,TypeInfo(_T289),[
TypeInfo(string),
TypeInfo(Integer)], pointer(12),cRegister);

RegRegisterMethod(TList,'Exchange',TypeInfo(_T290),[
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TList.Exchange));

RegRegisterMethod(TList,'Expand',TypeInfo(_T291),[TypeInfo(TList)],Addr(TList.Expand));

RegRegisterMethod(TList,'Extract',TypeInfo(_T292),[
TypeInfoPointer,TypeInfoPointer],Addr(TList.Extract));

RegRegisterMethod(TList,'ExtractItem',TypeInfo(_T293),[
TypeInfoPointer,
TypeInfo(classes.TList.TDirection),TypeInfoPointer],Addr(TList.ExtractItem));

RegRegisterMethod(TList,'First',TypeInfo(_T294),[TypeInfoPointer],Addr(TList.First));

RegRegisterMethod(TList,'GetEnumerator',TypeInfo(_T295),[TypeInfo(TListEnumerator)],Addr(TList.GetEnumerator));

RegRegisterMethod(TList,'IndexOf',TypeInfo(_T296),[
TypeInfoPointer,TypeInfo(Integer)],Addr(TList.IndexOf));

RegRegisterMethod(TList,'IndexOfItem',TypeInfo(_T297),[
TypeInfoPointer,
TypeInfo(classes.TList.TDirection),TypeInfo(Integer)],Addr(TList.IndexOfItem));

RegRegisterMethod(TList,'Insert',TypeInfo(_T298),[
TypeInfo(Integer),
TypeInfoPointer],Addr(TList.Insert));

RegRegisterMethod(TList,'Last',TypeInfo(_T299),[TypeInfoPointer],Addr(TList.Last));

RegRegisterMethod(TList,'Move',TypeInfo(_T300),[
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TList.Move));

RegRegisterMethod(TList,'Remove',TypeInfo(_T301),[
TypeInfoPointer,TypeInfo(Integer)],Addr(TList.Remove));

RegRegisterMethod(TList,'RemoveItem',TypeInfo(_T302),[
TypeInfoPointer,
TypeInfo(classes.TList.TDirection),TypeInfo(Integer)],Addr(TList.RemoveItem));

RegRegisterMethod(TList,'Pack',TypeInfo(_T303),NoParams,Addr(TList.Pack));

RegRegisterMethod(TList,'SortList',TypeInfo(_T305),[
TypeInfo(TListSortCompareFunc)],Addr(TList.SortList));

RegisterProc(TList,'Assign',mtScriptMethod,TypeInfo(_T306),[
TypeInfo(TList),
TypeInfo(TListAssignOp),
TypeInfo(TList)],Addr(__TList__Assign__Wrapper),cRegister);

RegisterProc(TListEnumerator,'Create',mtConstructor,TypeInfo(_T307),[
TypeInfo(TList)],Addr(TListEnumerator.Create),cRegister);

RegRegisterMethod(TListEnumerator,'GetCurrent',TypeInfo(_T308),[TypeInfoPointer],Addr(TListEnumerator.GetCurrent));

RegRegisterMethod(TListEnumerator,'MoveNext',TypeInfo(_T309),[TypeInfo(Boolean)],Addr(TListEnumerator.MoveNext));

//RegRegisterMethod(TMemoryStream,'Realloc',TypeInfo(_T310),[TypeInfo(Longint),TypeInfoPointer], pointer(28));
RegRegisterMethod(TMemoryStream,'Realloc',TypeInfo(_T310),[TypeInfo(Longint),TypeInfoPointer],  getVMTProcAddr('TMemoryStream','Realloc',28));



RegRegisterMethod(TMemoryStream,'Clear',TypeInfo(_T311),NoParams,Addr(TMemoryStream.Clear));

RegRegisterMethod(TMemoryStream,'LoadFromStream',TypeInfo(_T312),[
TypeInfo(TStream)],Addr(TMemoryStream.LoadFromStream));

RegRegisterMethod(TMemoryStream,'LoadFromFile',TypeInfo(_T313),[
TypeInfo(string)],Addr(TMemoryStream.LoadFromFile));

RegRegisterMethod(TParser,'CheckToken',TypeInfo(_T316),[
TypeInfo(Char)],Addr(TParser.CheckToken));

RegRegisterMethod(TParser,'CheckTokenSymbol',TypeInfo(_T317),[
TypeInfo(string)],Addr(TParser.CheckTokenSymbol));

RegRegisterMethod(TParser,'Error',TypeInfo(_T318),[
TypeInfo(string)],Addr(TParser.Error));

RegRegisterMethod(TParser,'ErrorFmt',TypeInfo(_T319),[
TypeInfo(string),
TypeInfoArrayOfConst],Addr(TParser.ErrorFmt));

RegRegisterMethod(TParser,'ErrorStr',TypeInfo(_T320),[
TypeInfo(string)],Addr(TParser.ErrorStr));

RegRegisterMethod(TParser,'HexToBinary',TypeInfo(_T321),[
TypeInfo(TStream)],Addr(TParser.HexToBinary));

RegRegisterMethod(TParser,'NextToken',TypeInfo(_T322),[TypeInfo(Char)],Addr(TParser.NextToken));

RegRegisterMethod(TParser,'SourcePos',TypeInfo(_T323),[TypeInfo(Longint)],Addr(TParser.SourcePos));

RegRegisterMethod(TParser,'TokenComponentIdent',TypeInfo(_T324),[TypeInfo(string)],Addr(TParser.TokenComponentIdent));

RegRegisterMethod(TParser,'TokenFloat',TypeInfo(_T325),[TypeInfo(Extended)],Addr(TParser.TokenFloat));

RegRegisterMethod(TParser,'TokenString',TypeInfo(_T327),[TypeInfo(string)],Addr(TParser.TokenString));

RegRegisterMethod(TParser,'TokenWideString',TypeInfo(_T328),[TypeInfo(UnicodeString)],Addr(TParser.TokenWideString));

RegRegisterMethod(TParser,'TokenSymbolIs',TypeInfo(_T329),[
TypeInfo(string),TypeInfo(Boolean)],Addr(TParser.TokenSymbolIs));

//RegRegisterMethod(TPersistent,'AssignTo',TypeInfo(_T330),[TypeInfo(TPersistent)], pointer(0));
RegRegisterMethod(TPersistent,'AssignTo',TypeInfo(_T330),[TypeInfo(TPersistent)],  getVMTProcAddr('TPersistent','AssignTo',0));



//RegRegisterMethod(TPersistent,'DefineProperties',TypeInfo(_T331),[TypeInfo(TFiler)], pointer(4));
RegRegisterMethod(TPersistent,'DefineProperties',TypeInfo(_T331),[TypeInfo(TFiler)],  getVMTProcAddr('TPersistent','DefineProperties',4));



RegRegisterMethod(TPersistent,'GetOwner',TypeInfo(_T332),[TypeInfo(TPersistent)], pointer(MinVMTOffset - 0));

//RegRegisterMethod(TPersistent,'Assign',TypeInfo(_T333),[TypeInfo(TPersistent)], pointer(8));
RegRegisterMethod(TPersistent,'Assign',TypeInfo(_T333),[TypeInfo(TPersistent)],  getVMTProcAddr('TPersistent','Assign',8));



RegRegisterMethod(TPersistent,'GetNamePath',TypeInfo(_T334),[TypeInfo(string)], pointer(MinVMTOffset - 1));

//RegRegisterMethod(TReader,'Error',TypeInfo(_T335),[TypeInfo(string),TypeInfo(Boolean)], pointer(16));
RegRegisterMethod(TReader,'Error',TypeInfo(_T335),[TypeInfo(string),TypeInfo(Boolean)],  getVMTProcAddr('TReader','Error',16));



//RegRegisterMethod(TReader,'FindMethodInstance',TypeInfo(_T337),[TypeInfo(TComponent),TypeInfo(string),TypeInfo(TMethod)], pointer(24));
RegRegisterMethod(TReader,'FindMethodInstance',TypeInfo(_T337),[TypeInfo(TComponent),TypeInfo(string),TypeInfo(TMethod)],  getVMTProcAddr('TReader','FindMethodInstance',24));



//RegRegisterMethod(TReader,'FindMethod',TypeInfo(_T338),[TypeInfo(TComponent),TypeInfo(string),TypeInfoPointer], pointer(28));
RegRegisterMethod(TReader,'FindMethod',TypeInfo(_T338),[TypeInfo(TComponent),TypeInfo(string),TypeInfoPointer],  getVMTProcAddr('TReader','FindMethod',28));



//RegRegisterMethod(TReader,'SetName',TypeInfo(_T339),[TypeInfo(TComponent),TypeInfo(string)], pointer(32));
RegRegisterMethod(TReader,'SetName',TypeInfo(_T339),[TypeInfo(TComponent),TypeInfo(string)],  getVMTProcAddr('TReader','SetName',32));



//RegRegisterMethod(TReader,'ReferenceName',TypeInfo(_T340),[TypeInfo(string)], pointer(36));
RegRegisterMethod(TReader,'ReferenceName',TypeInfo(_T340),[TypeInfo(string)],  getVMTProcAddr('TReader','ReferenceName',36));



RegRegisterMethod(TReader,'BeginReferences',TypeInfo(_T341),NoParams,Addr(TReader.BeginReferences));

RegRegisterMethod(TReader,'CheckValue',TypeInfo(_T342),[
TypeInfo(TValueType)],Addr(TReader.CheckValue));

RegRegisterMethod(TReader,'EndOfList',TypeInfo(_T343),[TypeInfo(Boolean)],Addr(TReader.EndOfList));

RegRegisterMethod(TReader,'EndReferences',TypeInfo(_T344),NoParams,Addr(TReader.EndReferences));

RegRegisterMethod(TReader,'FixupReferences',TypeInfo(_T345),NoParams,Addr(TReader.FixupReferences));

RegRegisterMethod(TReader,'NextValue',TypeInfo(_T346),[TypeInfo(TValueType)],Addr(TReader.NextValue));

RegRegisterMethod(TReader,'Read',TypeInfo(_T347),[
TypeInfoUntyped,
TypeInfo(Longint)],Addr(TReader.Read));

RegRegisterMethod(TReader,'ReadBoolean',TypeInfo(_T348),[TypeInfo(Boolean)],Addr(TReader.ReadBoolean));

RegRegisterMethod(TReader,'ReadChar',TypeInfo(_T349),[TypeInfo(Char)],Addr(TReader.ReadChar));

RegRegisterMethod(TReader,'ReadWideChar',TypeInfo(_T350),[TypeInfo(WideChar)],Addr(TReader.ReadWideChar));

RegRegisterMethod(TReader,'ReadCollection',TypeInfo(_T351),[
TypeInfo(TCollection)],Addr(TReader.ReadCollection));

RegRegisterMethod(TReader,'ReadComponent',TypeInfo(_T352),[
TypeInfo(TComponent),TypeInfo(TComponent)],Addr(TReader.ReadComponent));

RegRegisterMethod(TReader,'ReadFloat',TypeInfo(_T354),[TypeInfo(Extended)],Addr(TReader.ReadFloat));

RegRegisterMethod(TReader,'ReadSingle',TypeInfo(_T355),[TypeInfo(Single)],Addr(TReader.ReadSingle));

RegRegisterMethod(TReader,'ReadDouble',TypeInfo(_T356),[TypeInfo(Double)],Addr(TReader.ReadDouble));

RegRegisterMethod(TReader,'ReadCurrency',TypeInfo(_T357),[TypeInfo(Currency)],Addr(TReader.ReadCurrency));

RegRegisterMethod(TReader,'ReadDate',TypeInfo(_T358),[TypeInfo(TDateTime)],Addr(TReader.ReadDate));

RegRegisterMethod(TReader,'ReadIdent',TypeInfo(_T359),[TypeInfo(string)],Addr(TReader.ReadIdent));

RegRegisterMethod(TReader,'ReadInteger',TypeInfo(_T360),[TypeInfo(Longint)],Addr(TReader.ReadInteger));

RegRegisterMethod(TReader,'ReadListBegin',TypeInfo(_T362),NoParams,Addr(TReader.ReadListBegin));

RegRegisterMethod(TReader,'ReadListEnd',TypeInfo(_T363),NoParams,Addr(TReader.ReadListEnd));

//RegRegisterMethod(TReader,'ReadPrefix',TypeInfo(_T364),[TypeInfo(TFilerFlags),TypeInfo(Integer)], pointer(40));
RegRegisterMethod(TReader,'ReadPrefix',TypeInfo(_T364),[TypeInfo(TFilerFlags),TypeInfo(Integer)],  getVMTProcAddr('TReader','ReadPrefix',40));



RegRegisterMethod(TReader,'ReadRootComponent',TypeInfo(_T365),[
TypeInfo(TComponent),TypeInfo(TComponent)],Addr(TReader.ReadRootComponent));

RegRegisterMethod(TReader,'ReadSignature',TypeInfo(_T366),NoParams,Addr(TReader.ReadSignature));

RegRegisterMethod(TReader,'ReadStr',TypeInfo(_T367),[TypeInfo(string)],Addr(TReader.ReadStr));

RegRegisterMethod(TReader,'ReadString',TypeInfo(_T368),[TypeInfo(string)],Addr(TReader.ReadString));

RegRegisterMethod(TReader,'ReadWideString',TypeInfo(_T369),[TypeInfo(WideString)],Addr(TReader.ReadWideString));

RegRegisterMethod(TReader,'ReadValue',TypeInfo(_T370),[TypeInfo(TValueType)],Addr(TReader.ReadValue));

RegRegisterMethod(TReader,'ReadVariant',TypeInfo(_T371),[TypeInfo(Variant)],Addr(TReader.ReadVariant));

RegRegisterMethod(TReader,'CopyValue',TypeInfo(_T372),[
TypeInfo(TWriter)],Addr(TReader.CopyValue));

RegRegisterMethod(TReader,'SkipValue',TypeInfo(_T373),NoParams,Addr(TReader.SkipValue));

RegisterProc(TRecall,'Create',mtConstructor,TypeInfo(_T374),[
TypeInfo(TPersistent),
TypeInfo(TPersistent)],Addr(TRecall.Create),cRegister);

RegRegisterMethod(TRecall,'Store',TypeInfo(_T375),NoParams,Addr(TRecall.Store));

RegRegisterMethod(TRecall,'Forget',TypeInfo(_T376),NoParams,Addr(TRecall.Forget));

//RegRegisterMethod(TStream,'SetSize',TypeInfo(_T380),[TypeInfo(Longint)], pointer(4));
RegRegisterMethod(TStream,'SetSize',TypeInfo(_T380),[TypeInfo(Longint)],  getVMTProcAddr('TStream','SetSize',4));



//RegRegisterMethod(TStream,'Read',TypeInfo(_T381),[TypeInfoUntyped,TypeInfo(Longint),TypeInfo(Longint)], pointer(12));
RegRegisterMethod(TStream,'Read',TypeInfo(_T381),[TypeInfoUntyped,TypeInfo(Longint),TypeInfo(Longint)],  getVMTProcAddr('TStream','Read',12));



//RegRegisterMethod(TStream,'Write',TypeInfo(_T382),[TypeInfoUntyped,TypeInfo(Longint),TypeInfo(Longint)], pointer(16));
RegRegisterMethod(TStream,'Write',TypeInfo(_T382),[TypeInfoUntyped,TypeInfo(Longint),TypeInfo(Longint)],  getVMTProcAddr('TStream','Write',16));



//RegRegisterMethod(TStream,'Seek',TypeInfo(_T383),[TypeInfo(Longint),TypeInfo(Word),TypeInfo(Longint)], pointer(20));
RegRegisterMethod(TStream,'Seek',TypeInfo(_T383),[TypeInfo(Longint),TypeInfo(Word),TypeInfo(Longint)],  getVMTProcAddr('TStream','Seek',20));



RegRegisterMethod(TStream,'ReadBuffer',TypeInfo(_T384),[
TypeInfoUntyped,
TypeInfo(Longint)],Addr(TStream.ReadBuffer));

RegRegisterMethod(TStream,'WriteBuffer',TypeInfo(_T385),[
TypeInfoUntyped,
TypeInfo(Longint)],Addr(TStream.WriteBuffer));

RegRegisterMethod(TStream,'ReadComponent',TypeInfo(_T387),[
TypeInfo(TComponent),TypeInfo(TComponent)],Addr(TStream.ReadComponent));

RegRegisterMethod(TStream,'ReadComponentRes',TypeInfo(_T388),[
TypeInfo(TComponent),TypeInfo(TComponent)],Addr(TStream.ReadComponentRes));

RegRegisterMethod(TStream,'WriteComponent',TypeInfo(_T389),[
TypeInfo(TComponent)],Addr(TStream.WriteComponent));

RegRegisterMethod(TStream,'WriteComponentRes',TypeInfo(_T390),[
TypeInfo(string),
TypeInfo(TComponent)],Addr(TStream.WriteComponentRes));

RegRegisterMethod(TStream,'WriteDescendent',TypeInfo(_T391),[
TypeInfo(TComponent),
TypeInfo(TComponent)],Addr(TStream.WriteDescendent));

RegRegisterMethod(TStream,'WriteDescendentRes',TypeInfo(_T392),[
TypeInfo(string),
TypeInfo(TComponent),
TypeInfo(TComponent)],Addr(TStream.WriteDescendentRes));

RegRegisterMethod(TStream,'WriteResourceHeader',TypeInfo(_T393),[
TypeInfo(string),
TypeInfo(Integer)],Addr(TStream.WriteResourceHeader));

RegRegisterMethod(TStream,'FixupResourceHeader',TypeInfo(_T394),[
TypeInfo(Integer)],Addr(TStream.FixupResourceHeader));

RegRegisterMethod(TStream,'ReadResHeader',TypeInfo(_T395),NoParams,Addr(TStream.ReadResHeader));

RegisterProc(TStreamAdapter,'Create',mtConstructor,TypeInfo(_T396),[
TypeInfo(TStream),
TypeInfo(TStreamOwnership)],Addr(TStreamAdapter.Create),cRegister);

RegisterProc(TStreamAdapter,'Read',mtMethod,TypeInfo(_T397),[
TypeInfoPointer,
TypeInfo(Longint),
TypeInfo(PLongint),TypeInfo(HResult)], pointer(0),cStdCall);

RegisterProc(TStreamAdapter,'Write',mtMethod,TypeInfo(_T398),[
TypeInfoPointer,
TypeInfo(Longint),
TypeInfo(PLongint),TypeInfo(HResult)], pointer(4),cStdCall);

RegisterProc(TStreamAdapter,'Seek',mtMethod,TypeInfo(_T399),[
TypeInfo(Largeint),
TypeInfo(Longint),
TypeInfo(Largeint),TypeInfo(HResult)], pointer(8),cStdCall);

RegisterProc(TStreamAdapter,'SetSize',mtMethod,TypeInfo(_T400),[
TypeInfo(Largeint),TypeInfo(HResult)], pointer(12),cStdCall);

RegisterProc(TStreamAdapter,'CopyTo',mtMethod,TypeInfo(_T401),[
TypeInfo(IStream),
TypeInfo(Largeint),
TypeInfo(Largeint),
TypeInfo(Largeint),TypeInfo(HResult)], pointer(16),cStdCall);

RegisterProc(TStreamAdapter,'Commit',mtMethod,TypeInfo(_T402),[
TypeInfo(Longint),TypeInfo(HResult)], pointer(20),cStdCall);

RegisterProc(TStreamAdapter,'Revert',mtMethod,TypeInfo(_T403),[TypeInfo(HResult)], pointer(24),cStdCall);

RegisterProc(TStreamAdapter,'LockRegion',mtMethod,TypeInfo(_T404),[
TypeInfo(Largeint),
TypeInfo(Largeint),
TypeInfo(Longint),TypeInfo(HResult)], pointer(28),cStdCall);

//RegisterProc(TStreamAdapter,'UnlockRegion',mtMethod,TypeInfo(_T405),[TypeInfo(Largeint),TypeInfo(Largeint),TypeInfo(Longint),TypeInfo(HResult)], pointer(32),cStdCall);
RegisterProc(TStreamAdapter,'UnlockRegion',mtMethod,TypeInfo(_T405),[TypeInfo(Largeint),TypeInfo(Largeint),TypeInfo(Longint),TypeInfo(HResult)],  getVMTProcAddr('TStreamAdapter','UnlockRegion',32),cStdCall);


RegisterProc(TStreamAdapter,'Clone',mtMethod,TypeInfo(_T407),[
TypeInfo(IStream),TypeInfo(HResult)], pointer(40),cStdCall);

RegisterProc(TStreamReader,'Create',mtConstructor,TypeInfo(_T408),[
TypeInfo(TStream)],Addr(TStreamReader.Create),cRegister);

RegRegisterMethod(TStreamReader,'DiscardBufferedData',TypeInfo(_T409),NoParams,Addr(TStreamReader.DiscardBufferedData));

RegRegisterMethod(TStreamReader,'OwnStream',TypeInfo(_T410),NoParams,Addr(TStreamReader.OwnStream));

RegisterProc(TStreamWriter,'Create',mtConstructor,TypeInfo(_T411),[
TypeInfo(TStream)],Addr(TStreamWriter.Create),cRegister);

RegRegisterMethod(TStreamWriter,'OwnStream',TypeInfo(_T412),NoParams,Addr(TStreamWriter.OwnStream));

//RegRegisterMethod(TStringList,'Changed',TypeInfo(_T413),NoParams, pointer(144));
RegRegisterMethod(TStringList,'Changed',TypeInfo(_T413),NoParams,  getVMTProcAddr('TStringList','Changed',144));



//RegRegisterMethod(TStringList,'Changing',TypeInfo(_T414),NoParams, pointer(148));
RegRegisterMethod(TStringList,'Changing',TypeInfo(_T414),NoParams,  getVMTProcAddr('TStringList','Changing',148));



//RegRegisterMethod(TStringList,'InsertItem',TypeInfo(_T415),[TypeInfo(Integer),TypeInfo(string),TypeInfo(TObject)], pointer(152));
RegRegisterMethod(TStringList,'InsertItem',TypeInfo(_T415),[TypeInfo(Integer),TypeInfo(string),TypeInfo(TObject)],  getVMTProcAddr('TStringList','InsertItem',152));



RegisterProc(TStringList,'Create',mtConstructor,TypeInfo(_T416),NoParams,Addr(TStringList.Create),cRegister);

//RegRegisterMethod(TStringList,'Find',TypeInfo(_T417),[TypeInfo(string),TypeInfo(Integer),TypeInfo(Boolean)], pointer(156));
RegRegisterMethod(TStringList,'Find',TypeInfo(_T417),[TypeInfo(string),TypeInfo(Integer),TypeInfo(Boolean)],  getVMTProcAddr('TStringList','Find',156));



//RegRegisterMethod(TStringList,'Sort',TypeInfo(_T418),NoParams, pointer(160));
RegRegisterMethod(TStringList,'Sort',TypeInfo(_T418),NoParams,  getVMTProcAddr('TStringList','Sort',160));



RegisterProc(TStringReader,'Create',mtConstructor,TypeInfo(_T420),[
TypeInfo(string)],Addr(TStringReader.Create),cRegister);

//RegRegisterMethod(TStrings,'Get',TypeInfo(_T421),[TypeInfo(Integer),TypeInfo(string)], pointer(12));
RegRegisterMethod(TStrings,'Get',TypeInfo(_T421),[TypeInfo(Integer),TypeInfo(string)],  getVMTProcAddr('TStrings','Get',12));



//RegRegisterMethod(TStrings,'GetCapacity',TypeInfo(_T422),[TypeInfo(Integer)], pointer(16));
RegRegisterMethod(TStrings,'GetCapacity',TypeInfo(_T422),[TypeInfo(Integer)],  getVMTProcAddr('TStrings','GetCapacity',16));



//RegRegisterMethod(TStrings,'GetCount',TypeInfo(_T423),[TypeInfo(Integer)], pointer(20));
RegRegisterMethod(TStrings,'GetCount',TypeInfo(_T423),[TypeInfo(Integer)],  getVMTProcAddr('TStrings','GetCount',20));



//RegRegisterMethod(TStrings,'GetObject',TypeInfo(_T424),[TypeInfo(Integer),TypeInfo(TObject)], pointer(24));
RegRegisterMethod(TStrings,'GetObject',TypeInfo(_T424),[TypeInfo(Integer),TypeInfo(TObject)],  getVMTProcAddr('TStrings','GetObject',24));



//RegRegisterMethod(TStrings,'GetTextStr',TypeInfo(_T425),[TypeInfo(string)], pointer(28));
RegRegisterMethod(TStrings,'GetTextStr',TypeInfo(_T425),[TypeInfo(string)],  getVMTProcAddr('TStrings','GetTextStr',28));



//RegRegisterMethod(TStrings,'Put',TypeInfo(_T426),[TypeInfo(Integer),TypeInfo(string)], pointer(32));
RegRegisterMethod(TStrings,'Put',TypeInfo(_T426),[TypeInfo(Integer),TypeInfo(string)],  getVMTProcAddr('TStrings','Put',32));



//RegRegisterMethod(TStrings,'PutObject',TypeInfo(_T427),[TypeInfo(Integer),TypeInfo(TObject)], pointer(36));
RegRegisterMethod(TStrings,'PutObject',TypeInfo(_T427),[TypeInfo(Integer),TypeInfo(TObject)],  getVMTProcAddr('TStrings','PutObject',36));



//RegRegisterMethod(TStrings,'SetCapacity',TypeInfo(_T428),[TypeInfo(Integer)], pointer(40));
RegRegisterMethod(TStrings,'SetCapacity',TypeInfo(_T428),[TypeInfo(Integer)],  getVMTProcAddr('TStrings','SetCapacity',40));



//RegRegisterMethod(TStrings,'SetTextStr',TypeInfo(_T429),[TypeInfo(string)], pointer(44));
RegRegisterMethod(TStrings,'SetTextStr',TypeInfo(_T429),[TypeInfo(string)],  getVMTProcAddr('TStrings','SetTextStr',44));



//RegRegisterMethod(TStrings,'SetUpdateState',TypeInfo(_T430),[TypeInfo(Boolean)], pointer(48));
RegRegisterMethod(TStrings,'SetUpdateState',TypeInfo(_T430),[TypeInfo(Boolean)],  getVMTProcAddr('TStrings','SetUpdateState',48));



//RegRegisterMethod(TStrings,'CompareStrings',TypeInfo(_T431),[TypeInfo(string),TypeInfo(string),TypeInfo(Integer)], pointer(52));
RegRegisterMethod(TStrings,'CompareStrings',TypeInfo(_T431),[TypeInfo(string),TypeInfo(string),TypeInfo(Integer)],  getVMTProcAddr('TStrings','CompareStrings',52));



RegisterProc(TStrings,'Create',mtConstructor,TypeInfo(_T432),NoParams,Addr(TStrings.Create),cRegister);

//RegRegisterMethod(TStrings,'Add',TypeInfo(_T433),[TypeInfo(string),TypeInfo(Integer)], pointer(56));
RegRegisterMethod(TStrings,'Add',TypeInfo(_T433),[TypeInfo(string),TypeInfo(Integer)],  getVMTProcAddr('TStrings','Add',56));



//RegRegisterMethod(TStrings,'AddObject',TypeInfo(_T434),[TypeInfo(string),TypeInfo(TObject),TypeInfo(Integer)], pointer(60));
RegRegisterMethod(TStrings,'AddObject',TypeInfo(_T434),[TypeInfo(string),TypeInfo(TObject),TypeInfo(Integer)],  getVMTProcAddr('TStrings','AddObject',60));



RegRegisterMethod(TStrings,'Append',TypeInfo(_T435),[
TypeInfo(string)],Addr(TStrings.Append));

//RegRegisterMethod(TStrings,'AddStrings',TypeInfo(_T436),[TypeInfo(TStrings)], pointer(64));
RegRegisterMethod(TStrings,'AddStrings',TypeInfo(_T436),[TypeInfo(TStrings)],  getVMTProcAddr('TStrings','AddStrings',64));



RegRegisterMethod(TStrings,'BeginUpdate',TypeInfo(_T437),NoParams,Addr(TStrings.BeginUpdate));

//RegRegisterMethod(TStrings,'Clear',TypeInfo(_T438),NoParams, pointer(68));
RegRegisterMethod(TStrings,'Clear',TypeInfo(_T438),NoParams,  getVMTProcAddr('TStrings','Clear',68));



//RegRegisterMethod(TStrings,'Delete',TypeInfo(_T439),[TypeInfo(Integer)], pointer(72));
RegRegisterMethod(TStrings,'Delete',TypeInfo(_T439),[TypeInfo(Integer)],  getVMTProcAddr('TStrings','Delete',72));



RegRegisterMethod(TStrings,'EndUpdate',TypeInfo(_T440),NoParams,Addr(TStrings.EndUpdate));

RegRegisterMethod(TStrings,'Equals',TypeInfo(_T441),[
TypeInfo(TStrings),TypeInfo(Boolean)],Addr(TStrings.Equals));

//RegRegisterMethod(TStrings,'Exchange',TypeInfo(_T442),[TypeInfo(Integer),TypeInfo(Integer)], pointer(76));
RegRegisterMethod(TStrings,'Exchange',TypeInfo(_T442),[TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TStrings','Exchange',76));



RegRegisterMethod(TStrings,'GetEnumerator',TypeInfo(_T443),[TypeInfo(TStringsEnumerator)],Addr(TStrings.GetEnumerator));

//RegRegisterMethod(TStrings,'GetText',TypeInfo(_T444),[TypeInfoPChar], pointer(80));
RegRegisterMethod(TStrings,'GetText',TypeInfo(_T444),[TypeInfoPChar],  getVMTProcAddr('TStrings','GetText',80));



//RegRegisterMethod(TStrings,'IndexOf',TypeInfo(_T445),[TypeInfo(string),TypeInfo(Integer)], pointer(84));
RegRegisterMethod(TStrings,'IndexOf',TypeInfo(_T445),[TypeInfo(string),TypeInfo(Integer)],  getVMTProcAddr('TStrings','IndexOf',84));



//RegRegisterMethod(TStrings,'IndexOfName',TypeInfo(_T446),[TypeInfo(string),TypeInfo(Integer)], pointer(88));
RegRegisterMethod(TStrings,'IndexOfName',TypeInfo(_T446),[TypeInfo(string),TypeInfo(Integer)],  getVMTProcAddr('TStrings','IndexOfName',88));



//RegRegisterMethod(TStrings,'IndexOfObject',TypeInfo(_T447),[TypeInfo(TObject),TypeInfo(Integer)], pointer(92));
RegRegisterMethod(TStrings,'IndexOfObject',TypeInfo(_T447),[TypeInfo(TObject),TypeInfo(Integer)],  getVMTProcAddr('TStrings','IndexOfObject',92));



//RegRegisterMethod(TStrings,'Insert',TypeInfo(_T448),[TypeInfo(Integer),TypeInfo(string)], pointer(96));
RegRegisterMethod(TStrings,'Insert',TypeInfo(_T448),[TypeInfo(Integer),TypeInfo(string)],  getVMTProcAddr('TStrings','Insert',96));



//RegRegisterMethod(TStrings,'InsertObject',TypeInfo(_T449),[TypeInfo(Integer),TypeInfo(string),TypeInfo(TObject)], pointer(100));
RegRegisterMethod(TStrings,'InsertObject',TypeInfo(_T449),[TypeInfo(Integer),TypeInfo(string),TypeInfo(TObject)],  getVMTProcAddr('TStrings','InsertObject',100));



//RegRegisterMethod(TStrings,'LoadFromFile',TypeInfo(_T450),[TypeInfo(string)], pointer(104));
RegRegisterMethod(TStrings,'LoadFromFile',TypeInfo(_T450),[TypeInfo(string)],  getVMTProcAddr('TStrings','LoadFromFile',104));



//RegRegisterMethod(TStrings,'LoadFromStream',TypeInfo(_T451),[TypeInfo(TStream)], pointer(112));
RegRegisterMethod(TStrings,'LoadFromStream',TypeInfo(_T451),[TypeInfo(TStream)],  getVMTProcAddr('TStrings','LoadFromStream',112));



//RegRegisterMethod(TStrings,'Move',TypeInfo(_T452),[TypeInfo(Integer),TypeInfo(Integer)], pointer(120));
RegRegisterMethod(TStrings,'Move',TypeInfo(_T452),[TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TStrings','Move',120));



//RegRegisterMethod(TStrings,'SaveToFile',TypeInfo(_T453),[TypeInfo(string)], pointer(124));
RegRegisterMethod(TStrings,'SaveToFile',TypeInfo(_T453),[TypeInfo(string)],  getVMTProcAddr('TStrings','SaveToFile',124));



//RegRegisterMethod(TStrings,'SaveToStream',TypeInfo(_T454),[TypeInfo(TStream)], pointer(132));
RegRegisterMethod(TStrings,'SaveToStream',TypeInfo(_T454),[TypeInfo(TStream)],  getVMTProcAddr('TStrings','SaveToStream',132));



RegRegisterMethod(TStrings,'ToStringArray',TypeInfo(_T456),[TypeInfo(TArray<String>)],Addr(TStrings.ToStringArray));

RegRegisterMethod(TStrings,'ToObjectArray',TypeInfo(_T457),[TypeInfo(TArray<String>)],Addr(TStrings.ToObjectArray));

RegisterProc(TStringsEnumerator,'Create',mtConstructor,TypeInfo(_T458),[
TypeInfo(TStrings)],Addr(TStringsEnumerator.Create),cRegister);

RegRegisterMethod(TStringsEnumerator,'GetCurrent',TypeInfo(_T459),[TypeInfo(string)],Addr(TStringsEnumerator.GetCurrent));

RegRegisterMethod(TStringsEnumerator,'MoveNext',TypeInfo(_T460),[TypeInfo(Boolean)],Addr(TStringsEnumerator.MoveNext));

RegisterProc(TStringStream,'Create',mtConstructor,TypeInfo(_T461),[
TypeInfo(string)],Addr(TStringStream.Create),cRegister);

RegRegisterMethod(TStringStream,'ReadString',TypeInfo(_T462),[
TypeInfo(Longint),TypeInfo(string)],Addr(TStringStream.ReadString));

RegRegisterMethod(TStringStream,'WriteString',TypeInfo(_T463),[
TypeInfo(string)],Addr(TStringStream.WriteString));

RegisterProc(TStringWriter,'Create',mtConstructor,TypeInfo(_T464),NoParams,Addr(TStringWriter.Create),cRegister);

//RegRegisterMethod(TTextReader,'Close',TypeInfo(_T465),NoParams, pointer(0));
RegRegisterMethod(TTextReader,'Close',TypeInfo(_T465),NoParams,  getVMTProcAddr('TTextReader','Close',0));



//RegRegisterMethod(TTextReader,'Peek',TypeInfo(_T466),[TypeInfo(Integer)], pointer(4));
RegRegisterMethod(TTextReader,'Peek',TypeInfo(_T466),[TypeInfo(Integer)],  getVMTProcAddr('TTextReader','Peek',4));



//RegRegisterMethod(TTextReader,'Read',TypeInfo(_T467),[TypeInfo(Integer)], pointer(8));
RegRegisterMethod(TTextReader,'Read',TypeInfo(_T467),[TypeInfo(Integer)],  getVMTProcAddr('TTextReader','Read',8));



//RegRegisterMethod(TTextReader,'ReadBlock',TypeInfo(_T468),[TypeInfo(TCharArray),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Integer)], pointer(16));
RegRegisterMethod(TTextReader,'ReadBlock',TypeInfo(_T468),[TypeInfo(TCharArray),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TTextReader','ReadBlock',16));



//RegRegisterMethod(TTextReader,'ReadLine',TypeInfo(_T469),[TypeInfo(string)], pointer(20));
RegRegisterMethod(TTextReader,'ReadLine',TypeInfo(_T469),[TypeInfo(string)],  getVMTProcAddr('TTextReader','ReadLine',20));



//RegRegisterMethod(TTextReader,'ReadToEnd',TypeInfo(_T470),[TypeInfo(string)], pointer(24));
RegRegisterMethod(TTextReader,'ReadToEnd',TypeInfo(_T470),[TypeInfo(string)],  getVMTProcAddr('TTextReader','ReadToEnd',24));



//RegRegisterMethod(TTextWriter,'Close',TypeInfo(_T471),NoParams, pointer(0));
RegRegisterMethod(TTextWriter,'Close',TypeInfo(_T471),NoParams,  getVMTProcAddr('TTextWriter','Close',0));



//RegRegisterMethod(TTextWriter,'Flush',TypeInfo(_T472),NoParams, pointer(4));
RegRegisterMethod(TTextWriter,'Flush',TypeInfo(_T472),NoParams,  getVMTProcAddr('TTextWriter','Flush',4));



//RegRegisterMethod(TTextWriter,'Write',TypeInfo(_T473),[TypeInfo(Boolean)], pointer(8));
RegRegisterMethod(TTextWriter,'Write',TypeInfo(_T473),[TypeInfo(Boolean)],  getVMTProcAddr('TTextWriter','Write',8));



//RegRegisterMethod(TTextWriter,'WriteLine',TypeInfo(_T474),NoParams, pointer(60));
RegRegisterMethod(TTextWriter,'WriteLine',TypeInfo(_T474),NoParams,  getVMTProcAddr('TTextWriter','WriteLine',60));



RegisterProc(TThreadList,'Create',mtConstructor,TypeInfo(_T475),NoParams,Addr(TThreadList.Create),cRegister);

RegRegisterMethod(TThreadList,'Add',TypeInfo(_T476),[
TypeInfoPointer],Addr(TThreadList.Add));

RegRegisterMethod(TThreadList,'Clear',TypeInfo(_T477),NoParams,Addr(TThreadList.Clear));

RegRegisterMethod(TThreadList,'LockList',TypeInfo(_T478),[TypeInfo(TList)],Addr(TThreadList.LockList));

RegRegisterMethod(TThreadList,'Remove',TypeInfo(_T479),[
TypeInfoPointer],Addr(TThreadList.Remove));

RegRegisterMethod(TThreadList,'RemoveItem',TypeInfo(_T480),[
TypeInfoPointer,
TypeInfo(classes.TList.TDirection)],Addr(TThreadList.RemoveItem));

RegRegisterMethod(TThreadList,'UnlockList',TypeInfo(_T481),NoParams,Addr(TThreadList.UnlockList));

//RegRegisterMethod(TWriter,'WriteData',TypeInfo(_T482),[TypeInfo(TComponent)], pointer(16));
RegRegisterMethod(TWriter,'WriteData',TypeInfo(_T482),[TypeInfo(TComponent)],  getVMTProcAddr('TWriter','WriteData',16));



//RegRegisterMethod(TWriter,'FindMethodName',TypeInfo(_T483),[TypeInfo(TMethod),TypeInfo(string)], pointer(20));
RegRegisterMethod(TWriter,'FindMethodName',TypeInfo(_T483),[TypeInfo(TMethod),TypeInfo(string)],  getVMTProcAddr('TWriter','FindMethodName',20));



RegRegisterMethod(TWriter,'Write',TypeInfo(_T484),[
TypeInfoUntyped,
TypeInfo(Longint)],Addr(TWriter.Write));

RegRegisterMethod(TWriter,'WriteBoolean',TypeInfo(_T485),[
TypeInfo(Boolean)],Addr(TWriter.WriteBoolean));

RegRegisterMethod(TWriter,'WriteCollection',TypeInfo(_T486),[
TypeInfo(TCollection)],Addr(TWriter.WriteCollection));

RegRegisterMethod(TWriter,'WriteComponent',TypeInfo(_T487),[
TypeInfo(TComponent)],Addr(TWriter.WriteComponent));

RegRegisterMethod(TWriter,'WriteChar',TypeInfo(_T488),[
TypeInfo(Char)],Addr(TWriter.WriteChar));

RegRegisterMethod(TWriter,'WriteWideChar',TypeInfo(_T489),[
TypeInfo(WideChar)],Addr(TWriter.WriteWideChar));

RegRegisterMethod(TWriter,'WriteDescendent',TypeInfo(_T490),[
TypeInfo(TComponent),
TypeInfo(TComponent)],Addr(TWriter.WriteDescendent));

RegRegisterMethod(TWriter,'WriteFloat',TypeInfo(_T491),[
TypeInfo(Extended)],Addr(TWriter.WriteFloat));

RegRegisterMethod(TWriter,'WriteSingle',TypeInfo(_T492),[
TypeInfo(Single)],Addr(TWriter.WriteSingle));

RegRegisterMethod(TWriter,'WriteDouble',TypeInfo(_T493),[
TypeInfo(Double)],Addr(TWriter.WriteDouble));

RegRegisterMethod(TWriter,'WriteCurrency',TypeInfo(_T494),[
TypeInfo(Currency)],Addr(TWriter.WriteCurrency));

RegRegisterMethod(TWriter,'WriteDate',TypeInfo(_T495),[
TypeInfo(TDateTime)],Addr(TWriter.WriteDate));

RegRegisterMethod(TWriter,'WriteIdent',TypeInfo(_T496),[
TypeInfo(string)],Addr(TWriter.WriteIdent));

RegRegisterMethod(TWriter,'WriteInteger',TypeInfo(_T497),[
TypeInfo(Longint)],Addr(TWriter.WriteInteger));

RegRegisterMethod(TWriter,'WriteListBegin',TypeInfo(_T498),NoParams,Addr(TWriter.WriteListBegin));

RegRegisterMethod(TWriter,'WriteListEnd',TypeInfo(_T499),NoParams,Addr(TWriter.WriteListEnd));

RegRegisterMethod(TWriter,'WriteProperties',TypeInfo(_T500),[
TypeInfo(TPersistent)],Addr(TWriter.WriteProperties));

RegRegisterMethod(TWriter,'WriteRootComponent',TypeInfo(_T501),[
TypeInfo(TComponent)],Addr(TWriter.WriteRootComponent));

RegRegisterMethod(TWriter,'WriteSignature',TypeInfo(_T502),NoParams,Addr(TWriter.WriteSignature));

RegRegisterMethod(TWriter,'WriteStr',TypeInfo(_T503),[
TypeInfo(AnsiString)],Addr(TWriter.WriteStr));

RegRegisterMethod(TWriter,'WriteUTF8Str',TypeInfo(_T504),[
TypeInfo(string)],Addr(TWriter.WriteUTF8Str));

RegRegisterMethod(TWriter,'WriteString',TypeInfo(_T505),[
TypeInfo(UnicodeString)],Addr(TWriter.WriteString));

RegRegisterMethod(TWriter,'WriteWideString',TypeInfo(_T506),[
TypeInfo(UnicodeString)],Addr(TWriter.WriteWideString));

RegRegisterMethod(TWriter,'WriteVariant',TypeInfo(_T507),[
TypeInfo(Variant)],Addr(TWriter.WriteVariant));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'Queue',mtProc,TypeInfo(_T13),[
TypeInfo(TThreadMethod)],Addr(Queue),cRegister)}

{RegisterProc(nil,'RemoveQueuedEvents',mtProc,TypeInfo(_T22),[
TypeInfo(TThread),
TypeInfo(TThreadMethod)],Addr(RemoveQueuedEvents),cRegister)}

{RegisterProc(nil,'StaticQueue',mtProc,TypeInfo(_T23),[
TypeInfo(TThread),
TypeInfo(TThreadMethod)],Addr(StaticQueue),cRegister)}

{RegisterProc(nil,'StaticSynchronize',mtProc,TypeInfo(_T24),[
TypeInfo(TThread),
TypeInfo(TThreadMethod)],Addr(StaticSynchronize),cRegister)}

{RegisterProc(nil,'SetOnExecute',mtProc,TypeInfo(_T100),[
TypeInfo(TNotifyEvent)], pointer(0),cRegister)}

{RegisterProc(nil,'RegisterClass',mtProc,TypeInfo(_T125),[
TypeInfo(TPersistentClass)],Addr(RegisterClass),cRegister)}

{RegisterProc(nil,'RegisterClasses',mtProc,TypeInfo(_T126),[
ArrayInfo(TypeInfo(TPersistentClass))],Addr(RegisterClasses),cRegister)}

{RegisterProc(nil,'RegisterClassAlias',mtProc,TypeInfo(_T127),[
TypeInfo(TPersistentClass),
TypeInfo(string)],Addr(RegisterClassAlias),cRegister)}

{RegisterProc(nil,'UnRegisterClass',mtProc,TypeInfo(_T128),[
TypeInfo(TPersistentClass)],Addr(UnRegisterClass),cRegister)}

{RegisterProc(nil,'UnRegisterClasses',mtProc,TypeInfo(_T129),[
ArrayInfo(TypeInfo(TPersistentClass))],Addr(UnRegisterClasses),cRegister)}

{RegisterProc(nil,'FindClass',mtProc,TypeInfo(_T131),[
TypeInfo(string),TypeInfo(TPersistentClass)],Addr(FindClass),cRegister)}

{RegisterProc(nil,'GetClass',mtProc,TypeInfo(_T132),[
TypeInfo(string),TypeInfo(TPersistentClass)],Addr(GetClass),cRegister)}

{RegisterProc(nil,'StartClassGroup',mtProc,TypeInfo(_T133),[
TypeInfo(TPersistentClass)],Addr(StartClassGroup),cRegister)}

{RegisterProc(nil,'GroupDescendentsWith',mtProc,TypeInfo(_T134),[
TypeInfo(TPersistentClass),
TypeInfo(TPersistentClass)],Addr(GroupDescendentsWith),cRegister)}

{RegisterProc(nil,'ActivateClassGroup',mtProc,TypeInfo(_T135),[
TypeInfo(TPersistentClass),TypeInfo(TPersistentClass)],Addr(ActivateClassGroup),cRegister)}

{RegisterProc(nil,'ActiveClassGroup',mtProc,TypeInfo(_T136),[TypeInfo(TPersistentClass)],Addr(ActiveClassGroup),cRegister)}

{RegisterProc(nil,'ClassGroupOf',mtProc,TypeInfo(_T137),[
TypeInfo(TPersistentClass),TypeInfo(TPersistentClass)],Addr(ClassGroupOf),cRegister)}

{RegisterProc(nil,'RegisterComponents',mtProc,TypeInfo(_T138),[
TypeInfo(string),
ArrayInfo(TypeInfo(TComponentClass))],Addr(RegisterComponents),cRegister)}

{RegisterProc(nil,'RegisterNoIcon',mtProc,TypeInfo(_T139),[
ArrayInfo(TypeInfo(TComponentClass))],Addr(RegisterNoIcon),cRegister)}

{RegisterProc(nil,'RegisterNonActiveX',mtProc,TypeInfo(_T140),[
ArrayInfo(TypeInfo(TComponentClass)),
TypeInfo(TActiveXRegType)],Addr(RegisterNonActiveX),cRegister)}

{RegisterProc(nil,'RegisterIntegerConsts',mtProc,TypeInfo(_T141),[
TypeInfoPointer,
TypeInfo(TIdentToInt),
TypeInfo(TIntToIdent)],Addr(RegisterIntegerConsts),cRegister)}

{RegisterProc(nil,'UnregisterIntegerConsts',mtProc,TypeInfo(_T142),[
TypeInfoPointer,
TypeInfo(TIdentToInt),
TypeInfo(TIntToIdent)],Addr(UnregisterIntegerConsts),cRegister)}

{RegisterProc(nil,'RegisterFindGlobalComponentProc',mtProc,TypeInfo(_T143),[
TypeInfo(TFindGlobalComponent)],Addr(RegisterFindGlobalComponentProc),cRegister)}

{RegisterProc(nil,'UnregisterFindGlobalComponentProc',mtProc,TypeInfo(_T144),[
TypeInfo(TFindGlobalComponent)],Addr(UnregisterFindGlobalComponentProc),cRegister)}

{RegisterProc(nil,'FindIntToIdent',mtProc,TypeInfo(_T149),[
TypeInfoPointer,TypeInfo(TIntToIdent)],Addr(FindIntToIdent),cRegister)}

{RegisterProc(nil,'FindIdentToInt',mtProc,TypeInfo(_T150),[
TypeInfoPointer,TypeInfo(TIdentToInt)],Addr(FindIdentToInt),cRegister)}

{RegisterProc(nil,'InitInheritedComponent',mtProc,TypeInfo(_T151),[
TypeInfo(TComponent),
TypeInfo(TClass),TypeInfo(Boolean)],Addr(InitInheritedComponent),cRegister)}

{RegisterProc(nil,'LineStart',mtProc,TypeInfo(_T178),[
TypeInfoPChar,
TypeInfoPChar,TypeInfoPChar],Addr(LineStart),cRegister)}

{RegisterProc(nil,'ExtractStrings',mtProc,TypeInfo(_T179),[
TypeInfo(TSysCharSet),
TypeInfo(TSysCharSet),
TypeInfoPChar,
TypeInfo(TStrings),TypeInfo(Integer)],Addr(ExtractStrings),cRegister)}

{RegisterProc(nil,'BinToHex',mtProc,TypeInfo(_T180),[
TypeInfoPChar,
TypeInfoPWideChar,
TypeInfo(Integer)],Addr(BinToHex),cRegister)}

{RegisterProc(nil,'HexToBin',mtProc,TypeInfo(_T181),[
TypeInfoPWideChar,
TypeInfoPChar,
TypeInfo(Integer),TypeInfo(Integer)],Addr(HexToBin),cRegister)}

{RegisterProc(nil,'CountGenerations',mtProc,TypeInfo(_T183),[
TypeInfo(TClass),
TypeInfo(TClass),TypeInfo(Integer)],Addr(CountGenerations),cRegister)}

{RegisterProc(nil,'MakeObjectInstance',mtProc,TypeInfo(_T185),[
TypeInfo(TWndMethod),TypeInfoPointer],Addr(MakeObjectInstance),cRegister)}

{RegisterProc(nil,'AllocateHWnd',mtProc,TypeInfo(_T187),[
TypeInfo(TWndMethod),TypeInfo(HWND)],Addr(AllocateHWnd),cRegister)}

{RegRegisterMethod(TBinaryReader,'ReadInt64',TypeInfo(_T208),[TypeInfo(Int64)], pointer(60))}

{RegRegisterMethod(TBinaryWriter,'Seek',TypeInfo(_T222),[
TypeInfo(Int64),
TypeInfo(TSeekOrigin),TypeInfo(Int64)], pointer(12))}

{RegisterProc(TClassFinder,'Create',mtConstructor,TypeInfo(_T226),[
TypeInfo(TPersistentClass),
TypeInfo(Boolean)],Addr(TClassFinder.Create),cRegister)}

{RegRegisterMethod(TClassFinder,'GetClass',TypeInfo(_T227),[
TypeInfo(string),TypeInfo(TPersistentClass)],Addr(TClassFinder.GetClass))}

{RegRegisterMethod(TClassFinder,'GetClasses',TypeInfo(_T228),[
TypeInfo(TGetClass)],Addr(TClassFinder.GetClasses))}

{RegisterProc(TCollection,'Create',mtConstructor,TypeInfo(_T237),[
TypeInfo(TCollectionItemClass)],Addr(TCollection.Create),cRegister)}

{RegRegisterMethod(TFiler,'DefineProperty',TypeInfo(_T259),[
TypeInfo(string),
TypeInfo(TReaderProc),
TypeInfo(TWriterProc),
TypeInfo(Boolean)], pointer(4))}

{RegRegisterMethod(TFiler,'DefineBinaryProperty',TypeInfo(_T260),[
TypeInfo(string),
TypeInfo(TStreamProc),
TypeInfo(TStreamProc),
TypeInfo(Boolean)], pointer(8))}

{RegRegisterMethod(TList,'Sort',TypeInfo(_T304),[
TypeInfo(TListSortCompare)],Addr(TList.Sort))}

{RegisterProc(TOwnedCollection,'Create',mtConstructor,TypeInfo(_T314),[
TypeInfo(TPersistent),
TypeInfo(TCollectionItemClass)],Addr(TOwnedCollection.Create),cRegister)}

{RegisterProc(TParser,'Create',mtConstructor,TypeInfo(_T315),[
TypeInfo(TStream),
TypeInfo(TParserErrorEvent)],Addr(TParser.Create),cRegister)}

{RegRegisterMethod(TParser,'TokenInt',TypeInfo(_T326),[TypeInfo(Int64)],Addr(TParser.TokenInt))}

{RegRegisterMethod(TReader,'FindAncestorComponent',TypeInfo(_T336),[
TypeInfo(string),
TypeInfo(TPersistentClass),TypeInfo(TComponent)], pointer(20))}

{RegRegisterMethod(TReader,'ReadComponents',TypeInfo(_T353),[
TypeInfo(TComponent),
TypeInfo(TComponent),
TypeInfo(TReadComponentsProc)],Addr(TReader.ReadComponents))}

{RegRegisterMethod(TReader,'ReadInt64',TypeInfo(_T361),[TypeInfo(Int64)],Addr(TReader.ReadInt64))}

{RegisterProc(TResourceStream,'Create',mtConstructor,TypeInfo(_T377),[
TypeInfo(THandle),
TypeInfo(string),
TypeInfoPChar],Addr(TResourceStream.Create),cRegister)}

{RegisterProc(TResourceStream,'CreateFromID',mtConstructor,TypeInfo(_T378),[
TypeInfo(THandle),
TypeInfo(Integer),
TypeInfoPChar],Addr(TResourceStream.CreateFromID),cRegister)}

{RegRegisterMethod(TStream,'GetSize',TypeInfo(_T379),[TypeInfo(Int64)], pointer(0))}

{RegRegisterMethod(TStream,'CopyFrom',TypeInfo(_T386),[
TypeInfo(TStream),
TypeInfo(Int64),TypeInfo(Int64)],Addr(TStream.CopyFrom))}

{RegisterProc(TStreamAdapter,'Stat',mtMethod,TypeInfo(_T406),[
TypeInfo(TStatStg),
TypeInfo(Longint),TypeInfo(HResult)], pointer(36),cStdCall)}

{RegRegisterMethod(TStringList,'CustomSort',TypeInfo(_T419),[
TypeInfo(TStringListSortCompare)], pointer(164))}

{RegRegisterMethod(TStrings,'SetText',TypeInfo(_T455),[
TypeInfoPChar], pointer(140))}

{RegisterEvent(TypeInfo(TAncestorNotFoundEvent),[
TypeInfo(TReader),
TypeInfo(string),
TypeInfo(TPersistentClass),
TypeInfo(TComponent)]);}

{RegisterEvent(TypeInfo(TCreateComponentEvent),[
TypeInfo(TReader),
TypeInfo(TComponentClass),
TypeInfo(TComponent)]);}

RegisterEvent(TypeInfo(TFindAncestorEvent),[
TypeInfo(TWriter),
TypeInfo(TComponent),
TypeInfo(string),
TypeInfo(TComponent),
TypeInfo(TComponent)]);

{RegisterEvent(TypeInfo(TFindComponentClassEvent),[
TypeInfo(TReader),
TypeInfo(string),
TypeInfo(TComponentClass)]);}

RegisterEvent(TypeInfo(TFindComponentInstanceEvent),[
TypeInfo(TReader),
TypeInfo(string),
TypeInfoPointer]);

RegisterEvent(TypeInfo(TFindMethodEvent),[
TypeInfo(TReader),
TypeInfo(string),
TypeInfoPointer,
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TFindMethodInstanceEvent),[
TypeInfo(TReader),
TypeInfo(string),
TypeInfo(TMethod),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TFindMethodNameEvent),[
TypeInfo(TWriter),
TypeInfo(TMethod),
TypeInfo(string)]);

{RegisterEvent(TypeInfo(TGetClass),[
TypeInfo(TPersistentClass)]);}

RegisterEvent(TypeInfo(TGetLookupInfoEvent),[
TypeInfo(TPersistent),
TypeInfo(TComponent),
TypeInfo(TComponent),
TypeInfo(TComponent)]);

RegisterEvent(TypeInfo(TGetModuleProc),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(string),
TypeInfo(string),
TypeInfo(TStrings)]);

RegisterEvent(TypeInfo(TGetStrProc),[
TypeInfo(string)]);

RegisterEvent(TypeInfo(TNotifyEvent),[
TypeInfo(TObject)]);

RegisterEvent(TypeInfo(TParserErrorEvent),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TReadComponentsProc),[
TypeInfo(TComponent)]);

RegisterEvent(TypeInfo(TReaderError),[
TypeInfo(TReader),
TypeInfo(string),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TReaderProc),[
TypeInfo(TReader)]);

RegisterEvent(TypeInfo(TReferenceNameEvent),[
TypeInfo(TReader),
TypeInfo(string)]);

RegisterEvent(TypeInfo(TSetNameEvent),[
TypeInfo(TReader),
TypeInfo(TComponent),
TypeInfo(string)]);

RegisterEvent(TypeInfo(TStreamProc),[
TypeInfo(TStream)]);

RegisterEvent(TypeInfo(TThreadMethod),NoParams);

RegisterEvent(TypeInfo(TWndMethod),[
TypeInfo(TMessage)]);

RegisterEvent(TypeInfo(TWriterProc),[
TypeInfo(TWriter)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
