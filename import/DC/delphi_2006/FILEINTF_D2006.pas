{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit FILEINTF_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  ActiveX,
  SysUtils,
  VirtIntf,
  FileIntf;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
{_T0 = function (const p0 : TFileName;
p1 : Integer): IStream of object;}

_T1 = function (const p0 : TFileName): Longint of object;

_T2 = function (const p0 : TFileName;
const p1 : TFileName): Boolean of object;

_T3 = function (const p0 : TFileName): Boolean of object;

_T4 = function : Boolean of object;

_T5 = _T3;

_T6 = _T3;

_T7 = function (const p0 : TFileName): TFileName of object;

_T8 = _T7;

_T9 = function : string of object;

procedure __RegisterProps;
begin
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..0] of TClass = (
TIVirtualFileSystem
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegisterProc(TIVirtualFileSystem,'FileAge',mtMethod,TypeInfo(_T1),[TypeInfo(TFileName),TypeInfo(Longint)], pointer(16),cStdCall);
RegisterProc(TIVirtualFileSystem,'FileAge',mtMethod,TypeInfo(_T1),[TypeInfo(TFileName),TypeInfo(Longint)],  getVMTProcAddr('TIVirtualFileSystem','FileAge',16),cStdCall);


//RegisterProc(TIVirtualFileSystem,'RenameFile',mtMethod,TypeInfo(_T2),[TypeInfo(TFileName),TypeInfo(TFileName),TypeInfo(Boolean)], pointer(20),cStdCall);
RegisterProc(TIVirtualFileSystem,'RenameFile',mtMethod,TypeInfo(_T2),[TypeInfo(TFileName),TypeInfo(TFileName),TypeInfo(Boolean)],  getVMTProcAddr('TIVirtualFileSystem','RenameFile',20),cStdCall);


//RegisterProc(TIVirtualFileSystem,'IsReadonly',mtMethod,TypeInfo(_T3),[TypeInfo(TFileName),TypeInfo(Boolean)], pointer(24),cStdCall);
RegisterProc(TIVirtualFileSystem,'IsReadonly',mtMethod,TypeInfo(_T3),[TypeInfo(TFileName),TypeInfo(Boolean)],  getVMTProcAddr('TIVirtualFileSystem','IsReadonly',24),cStdCall);


//RegisterProc(TIVirtualFileSystem,'IsFileBased',mtMethod,TypeInfo(_T4),[TypeInfo(Boolean)], pointer(28),cStdCall);
RegisterProc(TIVirtualFileSystem,'IsFileBased',mtMethod,TypeInfo(_T4),[TypeInfo(Boolean)],  getVMTProcAddr('TIVirtualFileSystem','IsFileBased',28),cStdCall);


//RegisterProc(TIVirtualFileSystem,'DeleteFile',mtMethod,TypeInfo(_T5),[TypeInfo(TFileName),TypeInfo(Boolean)], pointer(32),cStdCall);
RegisterProc(TIVirtualFileSystem,'DeleteFile',mtMethod,TypeInfo(_T5),[TypeInfo(TFileName),TypeInfo(Boolean)],  getVMTProcAddr('TIVirtualFileSystem','DeleteFile',32),cStdCall);


//RegisterProc(TIVirtualFileSystem,'FileExists',mtMethod,TypeInfo(_T6),[TypeInfo(TFileName),TypeInfo(Boolean)], pointer(36),cStdCall);
RegisterProc(TIVirtualFileSystem,'FileExists',mtMethod,TypeInfo(_T6),[TypeInfo(TFileName),TypeInfo(Boolean)],  getVMTProcAddr('TIVirtualFileSystem','FileExists',36),cStdCall);


//RegisterProc(TIVirtualFileSystem,'GetTempFileName',mtMethod,TypeInfo(_T7),[TypeInfo(TFileName),TypeInfo(TFileName)], pointer(40),cStdCall);
RegisterProc(TIVirtualFileSystem,'GetTempFileName',mtMethod,TypeInfo(_T7),[TypeInfo(TFileName),TypeInfo(TFileName)],  getVMTProcAddr('TIVirtualFileSystem','GetTempFileName',40),cStdCall);


//RegisterProc(TIVirtualFileSystem,'GetBackupFileName',mtMethod,TypeInfo(_T8),[TypeInfo(TFileName),TypeInfo(TFileName)], pointer(44),cStdCall);
RegisterProc(TIVirtualFileSystem,'GetBackupFileName',mtMethod,TypeInfo(_T8),[TypeInfo(TFileName),TypeInfo(TFileName)],  getVMTProcAddr('TIVirtualFileSystem','GetBackupFileName',44),cStdCall);


//RegisterProc(TIVirtualFileSystem,'GetIDString',mtMethod,TypeInfo(_T9),[TypeInfo(string)], pointer(48),cStdCall);
RegisterProc(TIVirtualFileSystem,'GetIDString',mtMethod,TypeInfo(_T9),[TypeInfo(string)],  getVMTProcAddr('TIVirtualFileSystem','GetIDString',48),cStdCall);


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
{RegisterProc(TIVirtualFileSystem,'GetFileStream',mtMethod,TypeInfo(_T0),[
TypeInfo(TFileName),
TypeInfo(Integer),TypeInfo(IStream)], pointer(12),cStdCall)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
