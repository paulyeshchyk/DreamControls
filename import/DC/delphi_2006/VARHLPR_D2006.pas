{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit VARHLPR_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  VarHlpr;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (var p0 : Variant) of object;

_T1 = procedure (var p0 : Variant;
p1 : Integer) of object;

_T2 = procedure (const p0 : Variant;
var p1 : Variant;
p2 : Integer) of object;

_T3 = procedure (const p0 : Variant;
var p1 : Variant) of object;

_T4 = _T3;

_T5 = _T3;

_T6 = _T3;

_T7 = _T3;

_T8 = _T3;

_T9 = _T3;

_T10 = _T3;

_T11 = _T3;

_T12 = _T3;

_T13 = _T3;

_T14 = function (const p0 : Variant;
const p1 : Variant): Variant of object;

_T15 = _T14;

_T16 = _T14;

_T17 = _T14;

_T18 = _T14;

_T19 = _T14;

_T20 = _T14;

_T21 = _T14;

_T22 = _T14;

_T23 = _T14;

_T24 = function (const p0 : Variant): Variant of object;

_T25 = _T24;

_T26 = function (const p0 : Variant;
p1 : Integer): Variant of object;

_T27 = procedure (var p0 : Variant;
const p1 : Variant;
p2 : Integer) of object;

procedure __RegisterProps;
begin
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..27] of string = (
'VariantClear'
,'VariantArrayRedim'
,'VariantCast'
,'VariantCpy'
,'VariantAdd'
,'VariantSub'
,'VariantMul'
,'VariantDiv'
,'VariantMod'
,'VariantAnd'
,'VariantOr'
,'VariantXor'
,'VariantShl'
,'VariantShr'
,'VariantAdd2'
,'VariantSub2'
,'VariantMul2'
,'VariantDiv2'
,'VariantMod2'
,'VariantAnd2'
,'VariantOr2'
,'VariantXor2'
,'VariantShl2'
,'VariantShr2'
,'VariantNot'
,'VariantNeg'
,'VariantGetElement'
,'VariantPutElement'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(Variant)],Addr(VariantClear),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(Variant),
TypeInfo(Integer)],Addr(VariantArrayRedim),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T2),[
TypeInfo(Variant),
TypeInfo(Variant),
TypeInfo(Integer)],Addr(VariantCast),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T3),[
TypeInfo(Variant),
TypeInfo(Variant)],Addr(VariantCpy),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T4),[
TypeInfo(Variant),
TypeInfo(Variant)],Addr(VariantAdd),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T5),[
TypeInfo(Variant),
TypeInfo(Variant)],Addr(VariantSub),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T6),[
TypeInfo(Variant),
TypeInfo(Variant)],Addr(VariantMul),cRegister);

RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T7),[
TypeInfo(Variant),
TypeInfo(Variant)],Addr(VariantDiv),cRegister);

RegisterProc(nil,MethodNames[8],mtProc,TypeInfo(_T8),[
TypeInfo(Variant),
TypeInfo(Variant)],Addr(VariantMod),cRegister);

RegisterProc(nil,MethodNames[9],mtProc,TypeInfo(_T9),[
TypeInfo(Variant),
TypeInfo(Variant)],Addr(VariantAnd),cRegister);

RegisterProc(nil,MethodNames[10],mtProc,TypeInfo(_T10),[
TypeInfo(Variant),
TypeInfo(Variant)],Addr(VariantOr),cRegister);

RegisterProc(nil,MethodNames[11],mtProc,TypeInfo(_T11),[
TypeInfo(Variant),
TypeInfo(Variant)],Addr(VariantXor),cRegister);

RegisterProc(nil,MethodNames[12],mtProc,TypeInfo(_T12),[
TypeInfo(Variant),
TypeInfo(Variant)],Addr(VariantShl),cRegister);

RegisterProc(nil,MethodNames[13],mtProc,TypeInfo(_T13),[
TypeInfo(Variant),
TypeInfo(Variant)],Addr(VariantShr),cRegister);

RegisterProc(nil,MethodNames[14],mtProc,TypeInfo(_T14),[
TypeInfo(Variant),
TypeInfo(Variant),TypeInfo(Variant)],Addr(VariantAdd2),cRegister);

RegisterProc(nil,MethodNames[15],mtProc,TypeInfo(_T15),[
TypeInfo(Variant),
TypeInfo(Variant),TypeInfo(Variant)],Addr(VariantSub2),cRegister);

RegisterProc(nil,MethodNames[16],mtProc,TypeInfo(_T16),[
TypeInfo(Variant),
TypeInfo(Variant),TypeInfo(Variant)],Addr(VariantMul2),cRegister);

RegisterProc(nil,MethodNames[17],mtProc,TypeInfo(_T17),[
TypeInfo(Variant),
TypeInfo(Variant),TypeInfo(Variant)],Addr(VariantDiv2),cRegister);

RegisterProc(nil,MethodNames[18],mtProc,TypeInfo(_T18),[
TypeInfo(Variant),
TypeInfo(Variant),TypeInfo(Variant)],Addr(VariantMod2),cRegister);

RegisterProc(nil,MethodNames[19],mtProc,TypeInfo(_T19),[
TypeInfo(Variant),
TypeInfo(Variant),TypeInfo(Variant)],Addr(VariantAnd2),cRegister);

RegisterProc(nil,MethodNames[20],mtProc,TypeInfo(_T20),[
TypeInfo(Variant),
TypeInfo(Variant),TypeInfo(Variant)],Addr(VariantOr2),cRegister);

RegisterProc(nil,MethodNames[21],mtProc,TypeInfo(_T21),[
TypeInfo(Variant),
TypeInfo(Variant),TypeInfo(Variant)],Addr(VariantXor2),cRegister);

RegisterProc(nil,MethodNames[22],mtProc,TypeInfo(_T22),[
TypeInfo(Variant),
TypeInfo(Variant),TypeInfo(Variant)],Addr(VariantShl2),cRegister);

RegisterProc(nil,MethodNames[23],mtProc,TypeInfo(_T23),[
TypeInfo(Variant),
TypeInfo(Variant),TypeInfo(Variant)],Addr(VariantShr2),cRegister);

RegisterProc(nil,MethodNames[24],mtProc,TypeInfo(_T24),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VariantNot),cRegister);

RegisterProc(nil,MethodNames[25],mtProc,TypeInfo(_T25),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VariantNeg),cRegister);

RegisterProc(nil,MethodNames[26],mtProc,TypeInfo(_T26),[
TypeInfo(Variant),
TypeInfo(Integer),TypeInfo(Variant)],Addr(VariantGetElement),cRegister);

RegisterProc(nil,MethodNames[27],mtProc,TypeInfo(_T27),[
TypeInfo(Variant),
TypeInfo(Variant),
TypeInfo(Integer)],Addr(VariantPutElement),cRegister);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
