{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit XMLDOC_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  ActiveX,
  Variants,
  SysUtils,
  Classes,
  xmldom,
  XMLIntf,
  XMLDoc;
function ConvertTNodeClassInfoToVariant(var R : TNodeClassInfo) : OleVariant;
function ConvertVariantToTNodeClassInfo(const V : OleVariant) : TNodeClassInfo;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TNodeClassInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TNodeClassInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setNodeName(const val : DOMString);
function getNodeName : DOMString;
property NodeName : DOMString read getNodeName write setNodeName;
procedure setNamespaceURI(const val : DOMString);
function getNamespaceURI : DOMString;
property NamespaceURI : DOMString read getNamespaceURI write setNamespaceURI;
end;
type __TXMLDocument__ = class(TXMLDocument);
type
_T1 = function (p0 : TStream): TXMLEncodingType of object;

_T2 = procedure (var p0 : DOMString;
const p1 : Array of string) of object;

_T3 = function (const p0 : string): WideString of object;

_T4 = function (const p0 : DOMString): DOMString of object;

{_T5 = function (const p0 : DOMString): IXMLDocument of object;}

{_T6 = function (const p0 : DOMString): IXMLDocument of object;}

_T8 = procedure (const p0 : string) of object;

_T9 = function : Boolean of object;

_T10 = procedure (const p0 : Boolean) of object;

_T11 = procedure  of object;

_T12 = _T11;

_T13 = _T11;

_T14 = _T11;

_T15 = _T11;

_T16 = _T11;

{_T17 = function (const p0 : IDOMNode): TXMLNodeClass of object;}

_T18 = _T11;

_T19 = _T10;

_T20 = procedure (const p0 : DOMString) of object;

{_T21 = function (const p0 : DOMString): IXMLNode of object;}

{_T22 = function (const p0 : DOMString;
const p1 : DOMString): IXMLNode of object;}

_T25 = _T9;

_T26 = _T20;

_T27 = procedure (const p0 : TStream;
p1 : TXMLEncodingType) of object;

_T28 = _T8;

_T29 = _T11;

_T31 = _T11;

_T32 = _T20;

_T33 = procedure (const p0 : TStream) of object;

_T34 = procedure (var p0 : DOMString) of object;

{_T35 = function (const p0 : IXMLNode): DOMString of object;}

{_T36 = function (const p0 : IDOMNode): IXMLNode of object;}

{_T37 = function (const p0 : IDOMNode): IXMLNode of object;}

_T38 = procedure (const p0 : TXMLNode) of object;

{_T39 = procedure (p0 : TNodeListOperation;
var p1 : IXMLNode;
const p2 : OleVariant;
p3 : Boolean) of object;}

{_T40 = function : IXMLNodeList of object;}

{_T41 = function : IXMLNodeList of object;}

_T42 = procedure (p0 : TNodeChange;
p1 : Boolean) of object;

{_T43 = procedure (const p0 : IXMLNodeList) of object;}

{_T44 = procedure (const p0 : IXMLNodeList) of object;}

{_T45 = procedure (const p0 : IDOMNode;
const p1 : TXMLNode;
const p2 : TXMLDocument) of object;}

_T46 = procedure (p0 : TXMLNode) of object;

{_T47 = function : IXMLNodeList of object;}

{_T48 = function (p0 : Integer): IXMLNode of object;}

{_T49 = procedure (p0 : TXMLNode;
const p1 : DOMString;
p2 : TNodeListNotification) of object;}

function __TNodeClassInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNodeClassInfo__Wrapper.setNodeName(const val : DOMString);
begin
TNodeClassInfo(GetRecordPtr^).NodeName := val;
end;
function __TNodeClassInfo__Wrapper.getNodeName : DOMString;
begin
result := TNodeClassInfo(GetRecordPtr^).NodeName;
end;
procedure __TNodeClassInfo__Wrapper.setNamespaceURI(const val : DOMString);
begin
TNodeClassInfo(GetRecordPtr^).NamespaceURI := val;
end;
function __TNodeClassInfo__Wrapper.getNamespaceURI : DOMString;
begin
result := TNodeClassInfo(GetRecordPtr^).NamespaceURI;
end;
function _TNodeClassInfo_ : IDispatch;
begin
  result := __TNodeClassInfo__Wrapper.Create;
end;
procedure __TXMLDocument__ReleaseDoc__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
0:
begin
__TXMLDocument__(__Instance).ReleaseDoc;
end;
1:
begin
__TXMLDocument__(__Instance).ReleaseDoc(OleVariant(pargs^[0]));
end;
end
end;

procedure __TXMLDocument__LoadFromFile__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
0:
begin
TXMLDocument(__Instance).LoadFromFile;
end;
1:
begin
TXMLDocument(__Instance).LoadFromFile(OleVariant(pargs^[0]));
end;
end
end;

procedure __TXMLDocument__LoadFromStream__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
TXMLDocument(__Instance).LoadFromStream(TStream(VarToObject(OleVariant(pargs^[0]))));
end;
2:
begin
TXMLDocument(__Instance).LoadFromStream(TStream(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
end;
end
end;

procedure __TXMLDocument__SaveToFile__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
0:
begin
TXMLDocument(__Instance).SaveToFile;
end;
1:
begin
TXMLDocument(__Instance).SaveToFile(OleVariant(pargs^[0]));
end;
end
end;


type __TNodeClassInfo__Wrapper__ = class(__TNodeClassInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNodeClassInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNodeClassInfoToVariant(var R : TNodeClassInfo) : OleVariant;
var
__rw : __TNodeClassInfo__Wrapper__;
begin
__rw := __TNodeClassInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNodeClassInfo(const V : OleVariant) : TNodeClassInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNodeClassInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTXMLDocument__AsyncLoadState(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXMLDocument(Instance).AsyncLoadState;
end;

function __DC__GetTXMLDocument__Encoding(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXMLDocument(Instance).Encoding;
end;

procedure __DC__SetTXMLDocument__Encoding(Instance : TObject; Params : PVariantArgList);
begin
TXMLDocument(Instance).Encoding:=OleVariant(Params^[0]);
end;

function __DC__GetTXMLDocument__Modified(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXMLDocument(Instance).Modified;
end;

function __DC__GetTXMLDocument__NSPrefixBase(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXMLDocument(Instance).NSPrefixBase;
end;

procedure __DC__SetTXMLDocument__NSPrefixBase(Instance : TObject; Params : PVariantArgList);
begin
TXMLDocument(Instance).NSPrefixBase:=OleVariant(Params^[0]);
end;

function __DC__GetTXMLDocument__SchemaRef(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXMLDocument(Instance).SchemaRef;
end;

function __DC__GetTXMLDocument__StandAlone(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXMLDocument(Instance).StandAlone;
end;

procedure __DC__SetTXMLDocument__StandAlone(Instance : TObject; Params : PVariantArgList);
begin
TXMLDocument(Instance).StandAlone:=OleVariant(Params^[0]);
end;

function __DC__GetTXMLDocument__Version(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXMLDocument(Instance).Version;
end;

procedure __DC__SetTXMLDocument__Version(Instance : TObject; Params : PVariantArgList);
begin
TXMLDocument(Instance).Version:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TXMLDocument,'AsyncLoadState',__DC__GetTXMLDocument__AsyncLoadState,nil);
RegisterProperty(TXMLDocument,'Encoding',__DC__GetTXMLDocument__Encoding,__DC__SetTXMLDocument__Encoding);
RegisterProperty(TXMLDocument,'Modified',__DC__GetTXMLDocument__Modified,nil);
RegisterProperty(TXMLDocument,'NSPrefixBase',__DC__GetTXMLDocument__NSPrefixBase,__DC__SetTXMLDocument__NSPrefixBase);
RegisterProperty(TXMLDocument,'SchemaRef',__DC__GetTXMLDocument__SchemaRef,nil);
RegisterProperty(TXMLDocument,'StandAlone',__DC__GetTXMLDocument__StandAlone,__DC__SetTXMLDocument__StandAlone);
RegisterProperty(TXMLDocument,'Version',__DC__GetTXMLDocument__Version,__DC__SetTXMLDocument__Version);
end;

function __DC__GetXMLDoc__UseXSDBooleanStrings(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := XMLDoc.UseXSDBooleanStrings;
end;

procedure __DC__SetXMLDoc__UseXSDBooleanStrings(Instance : TObject; Params : PVariantArgList);
begin
XMLDoc.UseXSDBooleanStrings:=OleVariant(Params^[0]);
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('UseXSDBooleanStrings',__DC__GetXMLDoc__UseXSDBooleanStrings,__DC__SetXMLDoc__UseXSDBooleanStrings));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..15] of string = (
'nlInsert'
,'nlRemove'
,'nlCreateNode'
,'ncUpdateValue'
,'ncInsertChild'
,'ncRemoveChild'
,'ncAddAttribute'
,'ncRemoveAttribute'
,'xpVersion'
,'xpEncoding'
,'xpStandalone'
,'xdsNone'
,'xdsXMLProperty'
,'xdsXMLData'
,'xdsFile'
,'xdsStream'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,nlInsert));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,nlRemove));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,nlCreateNode));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,ncUpdateValue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,ncInsertChild));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,ncRemoveChild));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,ncAddAttribute));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,ncRemoveAttribute));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,xpVersion));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,xpEncoding));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,xpStandalone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,xdsNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,xdsXMLProperty));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,xdsXMLData));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,xdsFile));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,xdsStream));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..3] of TClass = (
TXMLDocument,
TXMLNode,
TXMLNodeCollection,
TXMLNodeList
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..5] of string = (
'TNodeClassInfo'
,'DetectCharEncoding'
,'CheckEncoding'
,'XMLStringToWideString'
,'FormatXMLData'
,'XMLDocError'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TNodeClassInfo_)));
RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(TStream),TypeInfo(TXMLEncodingType)],Addr(DetectCharEncoding),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T2),[
TypeInfo(DOMString),
ArrayInfo(TypeInfo(string))],Addr(CheckEncoding),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T3),[
TypeInfo(string),TypeInfo(WideString)],Addr(XMLStringToWideString),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T4),[
TypeInfo(DOMString),TypeInfo(DOMString)],Addr(FormatXMLData),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T8),[
TypeInfo(string)],Addr(XMLDocError),cRegister);

RegRegisterMethod(TXMLDocument,'GetActive',TypeInfo(_T9),[TypeInfo(Boolean)], pointer(48));

RegRegisterMethod(TXMLDocument,'SetActive',TypeInfo(_T10),[
TypeInfo(Boolean)], pointer(52));

RegRegisterMethod(TXMLDocument,'CheckAutoSave',TypeInfo(_T11),NoParams, pointer(MinVMTOffset - 16));

RegRegisterMethod(TXMLDocument,'CheckDOM',TypeInfo(_T12),NoParams, pointer(MinVMTOffset - 17));

RegRegisterMethod(TXMLDocument,'DoAfterClose',TypeInfo(_T13),NoParams, pointer(MinVMTOffset - 18));

RegRegisterMethod(TXMLDocument,'DoAfterOpen',TypeInfo(_T14),NoParams, pointer(MinVMTOffset - 19));

RegRegisterMethod(TXMLDocument,'DoBeforeClose',TypeInfo(_T15),NoParams, pointer(MinVMTOffset - 20));

RegRegisterMethod(TXMLDocument,'DoBeforeOpen',TypeInfo(_T16),NoParams, pointer(MinVMTOffset - 21));

RegRegisterMethod(TXMLDocument,'LoadData',TypeInfo(_T18),NoParams, pointer(MinVMTOffset - 22));

RegisterProc(TXMLDocument,'ReleaseDoc',mtScriptMethod,TypeInfo(_T19),[
TypeInfo(Boolean)],Addr(__TXMLDocument__ReleaseDoc__Wrapper),cRegister);

RegisterProc(TXMLDocument,'Create',mtConstructor,TypeInfo(_T20),[
TypeInfo(DOMString)],Addr(TXMLDocument.Create),cRegister);

RegRegisterMethod(TXMLDocument,'IsEmptyDoc',TypeInfo(_T25),[TypeInfo(Boolean)],Addr(TXMLDocument.IsEmptyDoc));

RegisterProc(TXMLDocument,'LoadFromFile',mtScriptMethod,TypeInfo(_T26),[
TypeInfo(DOMString)],Addr(__TXMLDocument__LoadFromFile__Wrapper),cRegister);

RegisterProc(TXMLDocument,'LoadFromStream',mtScriptMethod,TypeInfo(_T27),[
TypeInfo(TStream),
TypeInfo(TXMLEncodingType)],Addr(__TXMLDocument__LoadFromStream__Wrapper),cRegister);

RegRegisterMethod(TXMLDocument,'LoadFromXML',TypeInfo(_T28),[
TypeInfo(string)],Addr(TXMLDocument.LoadFromXML));

RegRegisterMethod(TXMLDocument,'Refresh',TypeInfo(_T29),NoParams,Addr(TXMLDocument.Refresh));

RegRegisterMethod(TXMLDocument,'Resync',TypeInfo(_T31),NoParams,Addr(TXMLDocument.Resync));

RegisterProc(TXMLDocument,'SaveToFile',mtScriptMethod,TypeInfo(_T32),[
TypeInfo(DOMString)],Addr(__TXMLDocument__SaveToFile__Wrapper),cRegister);

RegRegisterMethod(TXMLDocument,'SaveToStream',TypeInfo(_T33),[
TypeInfo(TStream)],Addr(TXMLDocument.SaveToStream));

RegRegisterMethod(TXMLDocument,'SaveToXML',TypeInfo(_T34),[
TypeInfo(DOMString)],Addr(TXMLDocument.SaveToXML));

RegRegisterMethod(TXMLNode,'SetParentNode',TypeInfo(_T38),[
TypeInfo(TXMLNode)], pointer(8));

RegRegisterMethod(TXMLNode,'DoNodeChange',TypeInfo(_T42),[
TypeInfo(TNodeChange),
TypeInfo(Boolean)], pointer(16));

RegisterProc(TXMLNode,'CreateHosted',mtConstructor,TypeInfo(_T46),[
TypeInfo(TXMLNode)],Addr(TXMLNode.CreateHosted),cRegister);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'LoadXMLDocument',mtProc,TypeInfo(_T5),[
TypeInfo(DOMString),TypeInfo(IXMLDocument)],Addr(LoadXMLDocument),cRegister)}

{RegisterProc(nil,'LoadXMLData',mtProc,TypeInfo(_T6),[
TypeInfo(DOMString),TypeInfo(IXMLDocument)],Addr(LoadXMLData),cRegister)}

{RegRegisterMethod(TXMLDocument,'GetChildNodeClass',TypeInfo(_T17),[
TypeInfo(IDOMNode),TypeInfo(TXMLNodeClass)], pointer(56))}

{RegRegisterMethod(TXMLDocument,'AddChild',TypeInfo(_T21),[
TypeInfo(DOMString),TypeInfo(IXMLNode)],Addr(TXMLDocument.AddChild))}

{RegRegisterMethod(TXMLDocument,'CreateElement',TypeInfo(_T22),[
TypeInfo(DOMString),
TypeInfo(DOMString),TypeInfo(IXMLNode)],Addr(TXMLDocument.CreateElement))}

{RegRegisterMethod(TXMLDocument,'GeneratePrefix',TypeInfo(_T35),[
TypeInfo(IXMLNode),TypeInfo(DOMString)],Addr(TXMLDocument.GeneratePrefix))}

{RegRegisterMethod(TXMLNode,'CreateAttributeNode',TypeInfo(_T36),[
TypeInfo(IDOMNode),TypeInfo(IXMLNode)], pointer(0))}

{RegRegisterMethod(TXMLNode,'CreateChildNode',TypeInfo(_T37),[
TypeInfo(IDOMNode),TypeInfo(IXMLNode)], pointer(4))}

{RegRegisterMethod(TXMLNode,'ChildListNotify',TypeInfo(_T39),[
TypeInfo(TNodeListOperation),
TypeInfo(IXMLNode),
TypeInfo(OleVariant),
TypeInfo(Boolean)], pointer(12))}

{RegRegisterMethod(TXMLNode,'CreateAttributeList',TypeInfo(_T40),[TypeInfo(IXMLNodeList)], pointer(MinVMTOffset - 0))}

{RegRegisterMethod(TXMLNode,'CreateChildList',TypeInfo(_T41),[TypeInfo(IXMLNodeList)], pointer(MinVMTOffset - 1))}

{RegRegisterMethod(TXMLNode,'SetAttributeNodes',TypeInfo(_T43),[
TypeInfo(IXMLNodeList)], pointer(20))}

{RegRegisterMethod(TXMLNode,'SetChildNodes',TypeInfo(_T44),[
TypeInfo(IXMLNodeList)], pointer(24))}

{RegisterProc(TXMLNode,'Create',mtConstructor,TypeInfo(_T45),[
TypeInfo(IDOMNode),
TypeInfo(TXMLNode),
TypeInfo(TXMLDocument)],Addr(TXMLNode.Create),cRegister)}

{RegRegisterMethod(TXMLNodeCollection,'GetList',TypeInfo(_T47),[TypeInfo(IXMLNodeList)], pointer(28))}

{RegRegisterMethod(TXMLNodeCollection,'AddItem',TypeInfo(_T48),[
TypeInfo(Integer),TypeInfo(IXMLNode)], pointer(32))}

{RegisterProc(TXMLNodeList,'Create',mtConstructor,TypeInfo(_T49),[
TypeInfo(TXMLNode),
TypeInfo(DOMString),
TypeInfo(TNodeListNotification)],Addr(TXMLNodeList.Create),cRegister)}

{RegisterEvent(TypeInfo(TNodeChangeEvent),[
TypeInfo(IXMLNode),
TypeInfo(TNodeChange)]);}

{RegisterEvent(TypeInfo(TNodeListNotification),[
TypeInfo(TNodeListOperation),
TypeInfo(IXMLNode),
TypeInfo(OleVariant),
TypeInfo(Boolean)]);}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
