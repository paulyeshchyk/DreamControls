{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit SVRLOG_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  HTTPApp,
  Classes,
  SyncObjs,
  Messages,
  SvrConst,
  SvrLog;
function ConvertTRequestTimeToVariant(var R : TRequestTime) : OleVariant;
function ConvertVariantToTRequestTime(const V : OleVariant) : TRequestTime;
function ConvertTWmLogMessageToVariant(var R : TWmLogMessage) : OleVariant;
function ConvertVariantToTWmLogMessage(const V : OleVariant) : TWmLogMessage;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TRequestTime__Wrapper = class(TDCRecordWrapper)
private
fR : TRequestTime;
public
function GetRecordPtr : pointer; override;
published
procedure setThreadID(const val : Cardinal);
function getThreadID : Cardinal;
property ThreadID : Cardinal read getThreadID write setThreadID;
end;
type __TWmLogMessage__Wrapper = class(TDCRecordWrapper)
private
fR : TWmLogMessage;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setUnused0(const val : Integer);
function getUnused0 : Integer;
property Unused0 : Integer read getUnused0 write setUnused0;
procedure setUnused1(const val : Longint);
function getUnused1 : Longint;
property Unused1 : Longint read getUnused1 write setUnused1;
procedure setResult(const val : Longint);
function getResult : Longint;
property Result : Longint read getResult write setResult;
end;
type
_T0 = procedure (p0 : TTransactionLogEntry;
var p1 : Boolean) of object;

_T1 = procedure  of object;

_T2 = procedure (p0 : TThread;
p1 : TErrorEvent;
p2 : Integer;
const p3 : string) of object;

_T3 = procedure (p0 : TWebRequest;
const p1 : string) of object;

_T4 = procedure (p0 : TWebResponse;
const p1 : string) of object;

_T5 = procedure (p0 : TErrorEvent;
p1 : Integer;
const p2 : string) of object;

_T6 = _T3;

_T7 = procedure (const p0 : string) of object;

_T8 = function : string of object;

_T9 = function (p0 : TLogColumn): string of object;

_T10 = _T1;

function __TRequestTime__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRequestTime__Wrapper.setThreadID(const val : Cardinal);
begin
TRequestTime(GetRecordPtr^).ThreadID := val;
end;
function __TRequestTime__Wrapper.getThreadID : Cardinal;
begin
result := TRequestTime(GetRecordPtr^).ThreadID;
end;
function __TWmLogMessage__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWmLogMessage__Wrapper.setMsg(const val : Cardinal);
begin
TWmLogMessage(GetRecordPtr^).Msg := val;
end;
function __TWmLogMessage__Wrapper.getMsg : Cardinal;
begin
result := TWmLogMessage(GetRecordPtr^).Msg;
end;
procedure __TWmLogMessage__Wrapper.setUnused0(const val : Integer);
begin
TWmLogMessage(GetRecordPtr^).Unused0 := val;
end;
function __TWmLogMessage__Wrapper.getUnused0 : Integer;
begin
result := TWmLogMessage(GetRecordPtr^).Unused0;
end;
procedure __TWmLogMessage__Wrapper.setUnused1(const val : Longint);
begin
TWmLogMessage(GetRecordPtr^).Unused1 := val;
end;
function __TWmLogMessage__Wrapper.getUnused1 : Longint;
begin
result := TWmLogMessage(GetRecordPtr^).Unused1;
end;
procedure __TWmLogMessage__Wrapper.setResult(const val : Longint);
begin
TWmLogMessage(GetRecordPtr^).Result := val;
end;
function __TWmLogMessage__Wrapper.getResult : Longint;
begin
result := TWmLogMessage(GetRecordPtr^).Result;
end;
function _TRequestTime_ : IDispatch;
begin
  result := __TRequestTime__Wrapper.Create;
end;
function _TWmLogMessage_ : IDispatch;
begin
  result := __TWmLogMessage__Wrapper.Create;
end;

type __TRequestTime__Wrapper__ = class(__TRequestTime__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRequestTime__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRequestTimeToVariant(var R : TRequestTime) : OleVariant;
var
__rw : __TRequestTime__Wrapper__;
begin
__rw := __TRequestTime__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRequestTime(const V : OleVariant) : TRequestTime;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRequestTime((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWmLogMessage__Wrapper__ = class(__TWmLogMessage__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWmLogMessage__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWmLogMessageToVariant(var R : TWmLogMessage) : OleVariant;
var
__rw : __TWmLogMessage__Wrapper__;
begin
__rw := __TWmLogMessage__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWmLogMessage(const V : OleVariant) : TWmLogMessage;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWmLogMessage((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTCustomServerLog__RequestTime(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomServerLog(Instance).RequestTime[OleVariant(Params^[0])];
end;

procedure __DC__SetTCustomServerLog__RequestTime(Instance : TObject; Params : PVariantArgList);
begin
TCustomServerLog(Instance).RequestTime[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTErrorTransaction__ErrorType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TErrorTransaction(Instance).ErrorType);
end;

function __DC__GetTErrorTransaction__ErrorMsg(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TErrorTransaction(Instance).ErrorMsg;
end;

function __DC__GetTErrorTransaction__ErrorCode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TErrorTransaction(Instance).ErrorCode;
end;

function __DC__GetTTransactionLogEntry__LogString(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TTransactionLogEntry(Instance).LogString;
end;

function __DC__GetTTransactionLogEntry__ElapsedTime(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TTransactionLogEntry(Instance).ElapsedTime;
end;

function __DC__GetTTransactionLogEntry__Columns(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TTransactionLogEntry(Instance).Columns[OleVariant(Params^[0])];
end;

procedure __RegisterProps;
begin
RegisterIndexedProperty(TCustomServerLog,'RequestTime',1,False,__DC__GetTCustomServerLog__RequestTime,__DC__SetTCustomServerLog__RequestTime);
RegisterProperty(TErrorTransaction,'ErrorType',__DC__GetTErrorTransaction__ErrorType,nil);
RegisterProperty(TErrorTransaction,'ErrorMsg',__DC__GetTErrorTransaction__ErrorMsg,nil);
RegisterProperty(TErrorTransaction,'ErrorCode',__DC__GetTErrorTransaction__ErrorCode,nil);
RegisterProperty(TTransactionLogEntry,'LogString',__DC__GetTTransactionLogEntry__LogString,nil);
RegisterProperty(TTransactionLogEntry,'ElapsedTime',__DC__GetTTransactionLogEntry__ElapsedTime,nil);
RegisterIndexedProperty(TTransactionLogEntry,'Columns',1,False,__DC__GetTTransactionLogEntry__Columns,nil);
end;

const __ConstNames0 : array[0..9] of string = (
'WM_LOGMESSAGE'
,'lcEvent'
,'lcTime'
,'lcDate'
,'lcElapsed'
,'lcPath'
,'lcStatus'
,'lcContentLength'
,'lcContentType'
,'lcThreadID'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,WM_LOGMESSAGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,lcEvent));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,lcTime));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,lcDate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,lcElapsed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,lcPath));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,lcStatus));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,lcContentLength));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,lcContentType));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,lcThreadID));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..6] of TClass = (
TCustomServerLog,
TErrorEvent,
TErrorTransaction,
THTTPTransaction,
TRequestTransaction,
TResponseTransaction,
TTransactionLogEntry
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..1] of string = (
'TRequestTime'
,'TWmLogMessage'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TRequestTime_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_TWmLogMessage_)));
//RegRegisterMethod(TCustomServerLog,'DoOnLog',TypeInfo(_T0),[TypeInfo(TTransactionLogEntry),TypeInfo(Boolean)], pointer(0));
RegRegisterMethod(TCustomServerLog,'DoOnLog',TypeInfo(_T0),[TypeInfo(TTransactionLogEntry),TypeInfo(Boolean)],  getVMTProcAddr('TCustomServerLog','DoOnLog',0));


RegisterProc(TCustomServerLog,'Create',mtConstructor,TypeInfo(_T1),NoParams,Addr(TCustomServerLog.Create),cRegister);

RegRegisterMethod(TCustomServerLog,'LogError',TypeInfo(_T2),[
TypeInfo(TThread),
TypeInfo(TErrorEvent),
TypeInfo(Integer),
TypeInfo(string)],Addr(TCustomServerLog.LogError));

RegRegisterMethod(TCustomServerLog,'LogRequest',TypeInfo(_T3),[
TypeInfo(TWebRequest),
TypeInfo(string)],Addr(TCustomServerLog.LogRequest));

RegRegisterMethod(TCustomServerLog,'LogResponse',TypeInfo(_T4),[
TypeInfo(TWebResponse),
TypeInfo(string)],Addr(TCustomServerLog.LogResponse));

RegisterProc(TErrorTransaction,'Create',mtConstructor,TypeInfo(_T5),[
TypeInfo(TErrorEvent),
TypeInfo(Integer),
TypeInfo(string)],Addr(TErrorTransaction.Create),cRegister);

RegisterProc(TRequestTransaction,'Create',mtConstructor,TypeInfo(_T6),[
TypeInfo(TWebRequest),
TypeInfo(string)],Addr(TRequestTransaction.Create),cRegister);

RegisterProc(TResponseTransaction,'Create',mtConstructor,TypeInfo(_T7),[
TypeInfo(string)],Addr(TResponseTransaction.Create),cRegister);

//RegRegisterMethod(TTransactionLogEntry,'GetLogString',TypeInfo(_T8),[TypeInfo(string)], pointer(0));
RegRegisterMethod(TTransactionLogEntry,'GetLogString',TypeInfo(_T8),[TypeInfo(string)],  getVMTProcAddr('TTransactionLogEntry','GetLogString',0));


//RegRegisterMethod(TTransactionLogEntry,'GetColumn',TypeInfo(_T9),[TypeInfo(TLogColumn),TypeInfo(string)], pointer(4));
RegRegisterMethod(TTransactionLogEntry,'GetColumn',TypeInfo(_T9),[TypeInfo(TLogColumn),TypeInfo(string)],  getVMTProcAddr('TTransactionLogEntry','GetColumn',4));


RegisterProc(TTransactionLogEntry,'Create',mtConstructor,TypeInfo(_T10),NoParams,Addr(TTransactionLogEntry.Create),cRegister);

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
RegisterEvent(TypeInfo(THTTPLogEvent),[
TypeInfo(TObject),
TypeInfo(TTransactionLogEntry),
TypeInfo(Boolean)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
