{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit dcscriptdebug_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  windows,
  classes,
  sysutils,
  dcdreamlib,
  dcsystem,
  dcscript,
  dcdslib,
  dcscriptdebug;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure  of object;

_T1 = function (const p0 : string;
p1 : Integer): TBreakPointItem of object;

_T2 = procedure (const p0 : string;
p1 : Integer) of object;

_T3 = _T1;

{_T4 = procedure (p0 : TBreakPointChangesHandler) of object;}

{_T5 = procedure (p0 : TBreakPointChangesHandler) of object;}

_T6 = _T0;

_T7 = _T0;

_T8 = _T0;

_T9 = _T0;

_T10 = _T0;

_T11 = _T0;

_T12 = _T0;

_T13 = function (const p0 : string): OleVariant of object;

_T14 = function : Integer of object;

_T15 = function : TDCScripter of object;

_T16 = function : string of object;

_T17 = procedure (p0 : TDCScripter) of object;

_T18 = _T1;

_T19 = _T2;

_T20 = _T1;

_T21 = function (p0 : TDCScripter;
p1 : Integer): Boolean of object;

_T22 = _T17;

_T23 = _T0;

_T24 = procedure (p0 : TDebugObject) of object;

_T25 = _T0;

_T26 = procedure (p0 : Boolean) of object;

function __DC__GetTBreakPointItem__Condition(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBreakPointItem(Instance).Condition;
end;

procedure __DC__SetTBreakPointItem__Condition(Instance : TObject; Params : PVariantArgList);
begin
TBreakPointItem(Instance).Condition:=OleVariant(Params^[0]);
end;

function __DC__GetTBreakPointItem__Enabled(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBreakPointItem(Instance).Enabled;
end;

procedure __DC__SetTBreakPointItem__Enabled(Instance : TObject; Params : PVariantArgList);
begin
TBreakPointItem(Instance).Enabled:=OleVariant(Params^[0]);
end;

function __DC__GetTBreakPointItem__Line(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBreakPointItem(Instance).Line;
end;

procedure __DC__SetTBreakPointItem__Line(Instance : TObject; Params : PVariantArgList);
begin
TBreakPointItem(Instance).Line:=OleVariant(Params^[0]);
end;

function __DC__GetTBreakPointItem__PassCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBreakPointItem(Instance).PassCount;
end;

procedure __DC__SetTBreakPointItem__PassCount(Instance : TObject; Params : PVariantArgList);
begin
TBreakPointItem(Instance).PassCount:=OleVariant(Params^[0]);
end;

function __DC__GetTBreakPointItem__ScriptName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBreakPointItem(Instance).ScriptName;
end;

procedure __DC__SetTBreakPointItem__ScriptName(Instance : TObject; Params : PVariantArgList);
begin
TBreakPointItem(Instance).ScriptName:=OleVariant(Params^[0]);
end;

function __DC__GetTBreakPointList__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TBreakPointList(Instance).Items[OleVariant(Params^[0])]);
end;

function __DC__GetTDebugObject__MainScripter(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDebugObject(Instance).MainScripter);
end;

function __DC__GetTDebugObject__Paused(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDebugObject(Instance).Paused;
end;

function __DC__GetTDebugObject__Animate(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDebugObject(Instance).Animate;
end;

procedure __DC__SetTDebugObject__Animate(Instance : TObject; Params : PVariantArgList);
begin
TDebugObject(Instance).Animate:=OleVariant(Params^[0]);
end;

function __DC__GetTDebugObject__WatchItems(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDebugObject(Instance).WatchItems);
end;

function __DC__GetTDebugObject__BreakPoints(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDebugObject(Instance).BreakPoints);
end;

function __DC__GetTWatchItem__Value(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWatchItem(Instance).Value;
end;

function __DC__GetTWatchItem__Enabled(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWatchItem(Instance).Enabled;
end;

procedure __DC__SetTWatchItem__Enabled(Instance : TObject; Params : PVariantArgList);
begin
TWatchItem(Instance).Enabled:=OleVariant(Params^[0]);
end;

function __DC__GetTWatchItem__Expression(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWatchItem(Instance).Expression;
end;

procedure __DC__SetTWatchItem__Expression(Instance : TObject; Params : PVariantArgList);
begin
TWatchItem(Instance).Expression:=OleVariant(Params^[0]);
end;

function __DC__GetTWatchItems__DebugObject(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TWatchItems(Instance).DebugObject);
end;

function __DC__GetTWatchItems__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TWatchItems(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TBreakPointItem,'Condition',__DC__GetTBreakPointItem__Condition,__DC__SetTBreakPointItem__Condition);
RegisterProperty(TBreakPointItem,'Enabled',__DC__GetTBreakPointItem__Enabled,__DC__SetTBreakPointItem__Enabled);
RegisterProperty(TBreakPointItem,'Line',__DC__GetTBreakPointItem__Line,__DC__SetTBreakPointItem__Line);
RegisterProperty(TBreakPointItem,'PassCount',__DC__GetTBreakPointItem__PassCount,__DC__SetTBreakPointItem__PassCount);
RegisterProperty(TBreakPointItem,'ScriptName',__DC__GetTBreakPointItem__ScriptName,__DC__SetTBreakPointItem__ScriptName);
RegisterIndexedProperty(TBreakPointList,'Items',1,True,__DC__GetTBreakPointList__Items,nil);
RegisterProperty(TDebugObject,'MainScripter',__DC__GetTDebugObject__MainScripter,nil);
RegisterProperty(TDebugObject,'Paused',__DC__GetTDebugObject__Paused,nil);
RegisterProperty(TDebugObject,'Animate',__DC__GetTDebugObject__Animate,__DC__SetTDebugObject__Animate);
RegisterProperty(TDebugObject,'WatchItems',__DC__GetTDebugObject__WatchItems,nil);
RegisterProperty(TDebugObject,'BreakPoints',__DC__GetTDebugObject__BreakPoints,nil);
RegisterProperty(TWatchItem,'Value',__DC__GetTWatchItem__Value,nil);
RegisterProperty(TWatchItem,'Enabled',__DC__GetTWatchItem__Enabled,__DC__SetTWatchItem__Enabled);
RegisterProperty(TWatchItem,'Expression',__DC__GetTWatchItem__Expression,__DC__SetTWatchItem__Expression);
RegisterProperty(TWatchItems,'DebugObject',__DC__GetTWatchItems__DebugObject,nil);
RegisterIndexedProperty(TWatchItems,'Items',1,True,__DC__GetTWatchItems__Items,nil);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..5] of TClass = (
TBreakPointItem,
TBreakPointList,
TDebugObject,
TExtCollection,
TWatchItem,
TWatchItems
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegisterProc(TBreakPointList,'Create',mtConstructor,TypeInfo(_T0),NoParams,Addr(TBreakPointList.Create),cRegister);

RegRegisterMethod(TBreakPointList,'AddBreakPoint',TypeInfo(_T1),[
TypeInfo(string),
TypeInfo(Integer),TypeInfo(TBreakPointItem)],Addr(TBreakPointList.AddBreakPoint));

RegRegisterMethod(TBreakPointList,'RemoveBreakPoint',TypeInfo(_T2),[
TypeInfo(string),
TypeInfo(Integer)],Addr(TBreakPointList.RemoveBreakPoint));

RegRegisterMethod(TBreakPointList,'GetBreakPoint',TypeInfo(_T3),[
TypeInfo(string),
TypeInfo(Integer),TypeInfo(TBreakPointItem)],Addr(TBreakPointList.GetBreakPoint));

//RegRegisterMethod(TDebugObject,'Update',TypeInfo(_T6),NoParams, pointer(0));
RegRegisterMethod(TDebugObject,'Update',TypeInfo(_T6),NoParams,  getVMTProcAddr('TDebugObject','Update',0));


RegisterProc(TDebugObject,'Create',mtConstructor,TypeInfo(_T7),NoParams,Addr(TDebugObject.Create),cRegister);

RegRegisterMethod(TDebugObject,'TraceInto',TypeInfo(_T8),NoParams,Addr(TDebugObject.TraceInto));

RegRegisterMethod(TDebugObject,'StepOver',TypeInfo(_T9),NoParams,Addr(TDebugObject.StepOver));

RegRegisterMethod(TDebugObject,'Reset',TypeInfo(_T10),NoParams,Addr(TDebugObject.Reset));

RegRegisterMethod(TDebugObject,'Go',TypeInfo(_T11),NoParams,Addr(TDebugObject.Go));

RegRegisterMethod(TDebugObject,'Pause',TypeInfo(_T12),NoParams,Addr(TDebugObject.Pause));

RegRegisterMethod(TDebugObject,'Evaluate',TypeInfo(_T13),[
TypeInfo(string),TypeInfo(OleVariant)],Addr(TDebugObject.Evaluate));

RegRegisterMethod(TDebugObject,'GetCurrentLine',TypeInfo(_T14),[TypeInfo(Integer)],Addr(TDebugObject.GetCurrentLine));

RegRegisterMethod(TDebugObject,'GetCurrentScripter',TypeInfo(_T15),[TypeInfo(TDCScripter)],Addr(TDebugObject.GetCurrentScripter));

RegRegisterMethod(TDebugObject,'GetCurrentScriptName',TypeInfo(_T16),[TypeInfo(string)],Addr(TDebugObject.GetCurrentScriptName));

//RegRegisterMethod(TDebugObject,'LoadMainScript',TypeInfo(_T17),[TypeInfo(TDCScripter)], pointer(4));
RegRegisterMethod(TDebugObject,'LoadMainScript',TypeInfo(_T17),[TypeInfo(TDCScripter)],  getVMTProcAddr('TDebugObject','LoadMainScript',4));


RegRegisterMethod(TDebugObject,'AddBreakPoint',TypeInfo(_T18),[
TypeInfo(string),
TypeInfo(Integer),TypeInfo(TBreakPointItem)],Addr(TDebugObject.AddBreakPoint));

RegRegisterMethod(TDebugObject,'RemoveBreakPoint',TypeInfo(_T19),[
TypeInfo(string),
TypeInfo(Integer)],Addr(TDebugObject.RemoveBreakPoint));

RegRegisterMethod(TDebugObject,'GetBreakPoint',TypeInfo(_T20),[
TypeInfo(string),
TypeInfo(Integer),TypeInfo(TBreakPointItem)],Addr(TDebugObject.GetBreakPoint));

RegRegisterMethod(TDebugObject,'IsBreakPoint',TypeInfo(_T21),[
TypeInfo(TDCScripter),
TypeInfo(Integer),TypeInfo(Boolean)],Addr(TDebugObject.IsBreakPoint));

RegRegisterMethod(TDebugObject,'SetCurrentScripter',TypeInfo(_T22),[
TypeInfo(TDCScripter)],Addr(TDebugObject.SetCurrentScripter));

RegRegisterMethod(TWatchItem,'Recalc',TypeInfo(_T23),NoParams,Addr(TWatchItem.Recalc));

RegisterProc(TWatchItems,'Create',mtConstructor,TypeInfo(_T24),[
TypeInfo(TDebugObject)],Addr(TWatchItems.Create),cRegister);

RegRegisterMethod(TWatchItems,'Recalc',TypeInfo(_T25),NoParams,Addr(TWatchItems.Recalc));

RegRegisterMethod(TWatchItems,'SetEnableForAll',TypeInfo(_T26),[
TypeInfo(Boolean)],Addr(TWatchItems.SetEnableForAll));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
{RegRegisterMethod(TBreakPointList,'AddChangeNotification',TypeInfo(_T4),[
TypeInfo(TBreakPointChangesHandler)],Addr(TBreakPointList.AddChangeNotification))}

{RegRegisterMethod(TBreakPointList,'RemoveChangeNotification',TypeInfo(_T5),[
TypeInfo(TBreakPointChangesHandler)],Addr(TBreakPointList.RemoveChangeNotification))}

RegisterEvent(TypeInfo(TBreakPointChangesHandler),[
TypeInfo(TObject),
TypeInfo(TBreakPointItem)]);

RegisterEvent(TypeInfo(TCollectionUpdateEvent),[
TypeInfo(TObject),
TypeInfo(TCollectionItem)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
