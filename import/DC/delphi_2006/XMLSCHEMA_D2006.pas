{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit XMLSCHEMA_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Variants,
  Classes,
  xmldom,
  XMLDoc,
  XMLIntf,
  XMLSchema;
function ConvertTAppInfoClassInfoToVariant(var R : TAppInfoClassInfo) : OleVariant;
function ConvertVariantToTAppInfoClassInfo(const V : OleVariant) : TAppInfoClassInfo;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TAppInfoClassInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TAppInfoClassInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setPrefix(const val : DOMString);
function getPrefix : DOMString;
property Prefix : DOMString read getPrefix write setPrefix;
procedure setNamespaceURI(const val : DOMString);
function getNamespaceURI : DOMString;
property NamespaceURI : DOMString read getNamespaceURI write setNamespaceURI;
end;
type
{_T0 = function (p0 : IDOMDocument): IXMLSchemaDoc of object;}

{_T1 = function (const p0 : DOMString): IXMLSchemaDoc of object;}

{_T2 = function (const p0 : DOMString): IXMLSchemaDoc of object;}

{_T4 = function (const p0 : string): IXMLSchemaTranslator of object;}

{_T5 = function (const p0 : string): IXMLSchemaTranslator of object;}

{_T6 = procedure (const p0 : IXMLSchemaTranslatorFactory) of object;}

{_T7 = procedure (const p0 : IXMLSchemaTranslatorFactory) of object;}

_T9 = procedure (const p0 : string;
const p1 : Array of Const) of object;

_T10 = _T9;

{_T11 = function (p0 : TXMLSchemaItems;
const p1 : DOMString;
const p2 : DOMString): IXMLSchemaItem of object;}

{_T12 = function (const p0 : Integer): IXMLAttributeDef of object;}

{_T13 = function (const p0 : Integer): IXMLElementDef of object;}

_T14 = procedure  of object;

_T15 = _T14;

{_T16 = function : IXMLSchemaItems of object;}

{_T17 = procedure (const p0 : IXMLSchemaRefItem) of object;}

_T18 = function : DOMString of object;

_T19 = procedure (const p0 : DOMString) of object;

{_T20 = procedure (const p0 : WideString;
const p1 : IXMLSchemaDef) of object;}

_T21 = function (const p0 : WideString): Boolean of object;

_T22 = _T21;

{_T23 = procedure (p0 : TSchemaTranslatorClass;
p1 : TSchemaTranslatorClass;
const p2 : WideString;
const p3 : WideString) of object;}

_T24 = function (const p0 : string): Variant of object;

{_T26 = function : IXMLTypeDef of object;}

_T27 = function : Boolean of object;

_T28 = _T19;

function __TAppInfoClassInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TAppInfoClassInfo__Wrapper.setPrefix(const val : DOMString);
begin
TAppInfoClassInfo(GetRecordPtr^).Prefix := val;
end;
function __TAppInfoClassInfo__Wrapper.getPrefix : DOMString;
begin
result := TAppInfoClassInfo(GetRecordPtr^).Prefix;
end;
procedure __TAppInfoClassInfo__Wrapper.setNamespaceURI(const val : DOMString);
begin
TAppInfoClassInfo(GetRecordPtr^).NamespaceURI := val;
end;
function __TAppInfoClassInfo__Wrapper.getNamespaceURI : DOMString;
begin
result := TAppInfoClassInfo(GetRecordPtr^).NamespaceURI;
end;
function _TAppInfoClassInfo_ : IDispatch;
begin
  result := __TAppInfoClassInfo__Wrapper.Create;
end;

type __TAppInfoClassInfo__Wrapper__ = class(__TAppInfoClassInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TAppInfoClassInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTAppInfoClassInfoToVariant(var R : TAppInfoClassInfo) : OleVariant;
var
__rw : __TAppInfoClassInfo__Wrapper__;
begin
__rw := __TAppInfoClassInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTAppInfoClassInfo(const V : OleVariant) : TAppInfoClassInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TAppInfoClassInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTXMLSchemaDef__AttributeFormDefault(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXMLSchemaDef(Instance).AttributeFormDefault;
end;

procedure __DC__SetTXMLSchemaDef__AttributeFormDefault(Instance : TObject; Params : PVariantArgList);
begin
TXMLSchemaDef(Instance).AttributeFormDefault:=OleVariant(Params^[0]);
end;

function __DC__GetTXMLSchemaDef__ElementFormDefault(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXMLSchemaDef(Instance).ElementFormDefault;
end;

procedure __DC__SetTXMLSchemaDef__ElementFormDefault(Instance : TObject; Params : PVariantArgList);
begin
TXMLSchemaDef(Instance).ElementFormDefault:=OleVariant(Params^[0]);
end;

function __DC__GetTXMLSchemaDef__IsLegacyFormat(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXMLSchemaDef(Instance).IsLegacyFormat;
end;

function __DC__GetTXMLSchemaDef__TargetNamespace(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXMLSchemaDef(Instance).TargetNamespace;
end;

function __DC__GetTXMLSchemaDef__TargetNSPrefix(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXMLSchemaDef(Instance).TargetNSPrefix;
end;

function __DC__GetTXMLSchemaDef__Version(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXMLSchemaDef(Instance).Version;
end;

procedure __DC__SetTXMLSchemaDef__Version(Instance : TObject; Params : PVariantArgList);
begin
TXMLSchemaDef(Instance).Version:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TXMLSchemaDef,'AttributeFormDefault',__DC__GetTXMLSchemaDef__AttributeFormDefault,__DC__SetTXMLSchemaDef__AttributeFormDefault);
RegisterProperty(TXMLSchemaDef,'ElementFormDefault',__DC__GetTXMLSchemaDef__ElementFormDefault,__DC__SetTXMLSchemaDef__ElementFormDefault);
RegisterProperty(TXMLSchemaDef,'IsLegacyFormat',__DC__GetTXMLSchemaDef__IsLegacyFormat,nil);
RegisterProperty(TXMLSchemaDef,'TargetNamespace',__DC__GetTXMLSchemaDef__TargetNamespace,nil);
RegisterProperty(TXMLSchemaDef,'TargetNSPrefix',__DC__GetTXMLSchemaDef__TargetNSPrefix,nil);
RegisterProperty(TXMLSchemaDef,'Version',__DC__GetTXMLSchemaDef__Version,__DC__SetTXMLSchemaDef__Version);
end;

function __DC__GetXMLSchema__XMLSchemaURI(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := XMLSchema.XMLSchemaURI;
end;

procedure __DC__SetXMLSchema__XMLSchemaURI(Instance : TObject; Params : PVariantArgList);
begin
XMLSchema.XMLSchemaURI:=OleVariant(Params^[0]);
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('XMLSchemaURI',__DC__GetXMLSchema__XMLSchemaURI,__DC__SetXMLSchema__XMLSchemaURI));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..28] of string = (
'SXMLSchemaExt'
,'SXMLSchemaPrefix'
,'SXMLSchemaLocation'
,'SXMLNoNSSchemaLocation'
,'SXMLSchemaURI_1999'
,'SXMLSchemaInstURI_1999'
,'SXMLSchemaURI_2000_10'
,'SXMLSchemaInstURI_2000_10'
,'SXMLSchemaURI_2001'
,'SXMLSchemaInstURI'
,'fcQualified'
,'fcUnqualified'
,'ctAll'
,'ctChoice'
,'ctSequence'
,'cmALL'
,'cmChoice'
,'cmSequence'
,'cmGroupRef'
,'cmEmpty'
,'dmNone'
,'dmComplexExtension'
,'dmComplexRestriction'
,'dmSimpleExtension'
,'dmSimpleRestriction'
,'sdmNone'
,'sdmRestriction'
,'sdmList'
,'sdmUnion'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,SXMLSchemaExt));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,SXMLSchemaPrefix));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,SXMLSchemaLocation));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,SXMLNoNSSchemaLocation));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,SXMLSchemaURI_1999));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,SXMLSchemaInstURI_1999));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,SXMLSchemaURI_2000_10));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,SXMLSchemaInstURI_2000_10));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,SXMLSchemaURI_2001));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,SXMLSchemaInstURI));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,fcQualified));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,fcUnqualified));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,ctAll));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,ctChoice));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,ctSequence));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,cmALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,cmChoice));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,cmSequence));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,cmGroupRef));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,cmEmpty));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,dmNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,dmComplexExtension));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,dmComplexRestriction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,dmSimpleExtension));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,dmSimpleRestriction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,sdmNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,sdmRestriction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,sdmList));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,sdmUnion));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..49] of TClass = (
ESchemaError,
ESchemaParse,
ESchemaValidation,
TXMLAnnotation,
TXMLAnnotationCollection,
TXMLAnnotationItem,
TXMLAppInfoCollection,
TXMLAttributeDef,
TXMLAttributeDefList,
TXMLAttributeDefs,
TXMLAttributeGroup,
TXMLAttributeGroups,
TXMLBaseTypeIndicator,
TXMLBuiltInTypes,
TXMLComplexContent,
TXMLComplexTypeDef,
TXMLComplexTypeDefs,
TXMLDocumentationCollection,
TXMLElementCompositor,
TXMLElementCompositors,
TXMLElementDef,
TXMLElementDefList,
TXMLElementDefs,
TXMLElementGroup,
TXMLElementGroups,
TXMLEnumeration,
TXMLEnumerationCollection,
TXMLNotationDef,
TXMLNotationDefs,
TXMLSchemaDef,
TXMLSchemaDoc,
TXMLSchemaDocRef,
TXMLSchemaDocRefs,
TXMLSchemaImport,
TXMLSchemaImports,
TXMLSchemaInclude,
TXMLSchemaIncludes,
TXMLSchemaItem,
TXMLSchemaItems,
TXMLSchemaNode,
TXMLSchemaTranslator,
TXMLSchemaTranslatorFactory,
TXMLSimpleTypeContent,
TXMLSimpleTypeDef,
TXMLSimpleTypeDefs,
TXMLSimpleTypeList,
TXMLSimpleTypeRestriction,
TXMLSimpleTypeUnion,
TXMLTypeDef,
TXMLTypedSchemaItem
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..2] of string = (
'TAppInfoClassInfo'
,'SchemaValidationError'
,'SchemaParseError'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TAppInfoClassInfo_)));
RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T9),[
TypeInfo(string),
TypeInfoArrayOfConst],Addr(SchemaValidationError),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T10),[
TypeInfo(string),
TypeInfoArrayOfConst],Addr(SchemaParseError),cRegister);

RegRegisterMethod(TXMLSchemaDoc,'CheckSchemaVersion',TypeInfo(_T14),NoParams, pointer(60));

RegRegisterMethod(TXMLSchemaDoc,'PrepareNewSchema',TypeInfo(_T15),NoParams, pointer(64));

RegRegisterMethod(TXMLSchemaItem,'GetName',TypeInfo(_T18),[TypeInfo(DOMString)], pointer(36));

RegRegisterMethod(TXMLSchemaItem,'SetName',TypeInfo(_T19),[
TypeInfo(DOMString)], pointer(40));

RegRegisterMethod(TXMLSchemaTranslatorFactory,'CanExportFile',TypeInfo(_T21),[
TypeInfo(WideString),TypeInfo(Boolean)], pointer(0));

RegRegisterMethod(TXMLSchemaTranslatorFactory,'CanImportFile',TypeInfo(_T22),[
TypeInfo(WideString),TypeInfo(Boolean)], pointer(4));

RegRegisterMethod(TXMLTypeDef,'ReadFacet',TypeInfo(_T24),[
TypeInfo(string),TypeInfo(Variant)], pointer(44));

RegRegisterMethod(TXMLTypeDef,'IsComplex',TypeInfo(_T27),[TypeInfo(Boolean)], pointer(56));

RegRegisterMethod(TXMLTypeDef,'SetBaseTypeName',TypeInfo(_T28),[
TypeInfo(DOMString)], pointer(60));

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'GetXMLSchema',mtProc,TypeInfo(_T0),[
TypeInfo(IDOMDocument),TypeInfo(IXMLSchemaDoc)],Addr(GetXMLSchema),cRegister)}

{RegisterProc(nil,'LoadXMLSchema',mtProc,TypeInfo(_T1),[
TypeInfo(DOMString),TypeInfo(IXMLSchemaDoc)],Addr(LoadXMLSchema),cRegister)}

{RegisterProc(nil,'LoadXMLSchemaStr',mtProc,TypeInfo(_T2),[
TypeInfo(DOMString),TypeInfo(IXMLSchemaDoc)],Addr(LoadXMLSchemaStr),cRegister)}

{RegisterProc(nil,'FindSchemaExporter',mtProc,TypeInfo(_T4),[
TypeInfo(string),TypeInfo(IXMLSchemaTranslator)],Addr(FindSchemaExporter),cRegister)}

{RegisterProc(nil,'FindSchemaImporter',mtProc,TypeInfo(_T5),[
TypeInfo(string),TypeInfo(IXMLSchemaTranslator)],Addr(FindSchemaImporter),cRegister)}

{RegisterProc(nil,'RegisterSchemaTranslator',mtProc,TypeInfo(_T6),[
TypeInfo(IXMLSchemaTranslatorFactory)],Addr(RegisterSchemaTranslator),cRegister)}

{RegisterProc(nil,'UnRegisterSchemaTranslator',mtProc,TypeInfo(_T7),[
TypeInfo(IXMLSchemaTranslatorFactory)],Addr(UnRegisterSchemaTranslator),cRegister)}

{RegisterProc(nil,'FindItemNS',mtProc,TypeInfo(_T11),[
TypeInfo(TXMLSchemaItems),
TypeInfo(DOMString),
TypeInfo(DOMString),TypeInfo(IXMLSchemaItem)],Addr(FindItemNS),cRegister)}

{RegRegisterMethod(TXMLAttributeDefList,'GetAttributeDef',TypeInfo(_T12),[
TypeInfo(Integer),TypeInfo(IXMLAttributeDef)],Addr(TXMLAttributeDefList.GetAttributeDef))}

{RegRegisterMethod(TXMLElementDefList,'GetElementDef',TypeInfo(_T13),[
TypeInfo(Integer),TypeInfo(IXMLElementDef)],Addr(TXMLElementDefList.GetElementDef))}

{RegRegisterMethod(TXMLSchemaItem,'GlobalCollection',TypeInfo(_T16),[TypeInfo(IXMLSchemaItems)], pointer(28))}

{RegRegisterMethod(TXMLSchemaItem,'SetRefItem',TypeInfo(_T17),[
TypeInfo(IXMLSchemaRefItem)], pointer(32))}

{RegRegisterMethod(TXMLSchemaTranslator,'Translate',TypeInfo(_T20),[
TypeInfo(WideString),
TypeInfo(IXMLSchemaDef)], pointer(0))}

{RegisterProc(TXMLSchemaTranslatorFactory,'Create',mtConstructor,TypeInfo(_T23),[
TypeInfo(TSchemaTranslatorClass),
TypeInfo(TSchemaTranslatorClass),
TypeInfo(WideString),
TypeInfo(WideString)],Addr(TXMLSchemaTranslatorFactory.Create),cRegister)}

{RegRegisterMethod(TXMLTypeDef,'GetBaseType',TypeInfo(_T26),[TypeInfo(IXMLTypeDef)], pointer(52))}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
