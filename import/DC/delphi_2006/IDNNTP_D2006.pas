{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDNNTP_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdAssignedNumbers,
  IdException,
  IdGlobal,
  IdMessage,
  IdMessageClient,
  IdTCPServer,
  IdTCPConnection,
  IdNNTP;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (p0 : TStringList;
var p1 : TStringList) of object;

_T1 = function (p0 : TIdMessage): Boolean of object;

_T2 = _T1;

_T3 = _T1;

_T4 = procedure  of object;

_T5 = procedure (const p0 : TDateTime;
const p1 : Boolean;
const p2 : string) of object;

_T6 = procedure (const p0 : string;
const p1 : TDateTime;
const p2 : Boolean;
p3 : string) of object;

_T7 = procedure (var p0 : TStringList) of object;

_T8 = procedure (p0 : TStringList) of object;

_T9 = function : Boolean of object;

_T10 = _T9;

_T11 = procedure (p0 : string;
var p1 : Integer;
var p2 : string;
var p3 : string;
var p4 : TDateTime;
var p5 : string;
var p6 : string;
var p7 : Integer;
var p8 : Integer;
var p9 : string) of object;

_T12 = procedure (p0 : string;
var p1 : string;
var p2 : Integer;
var p3 : Integer;
var p4 : string) of object;

_T13 = procedure (p0 : TIdMessage) of object;

_T14 = function (const p0 : Integer): Boolean of object;

_T15 = procedure (const p0 : string) of object;

_T16 = function (const p0 : string;
p1 : TStream): string of object;

_T17 = procedure (const p0 : string;
const p1 : string;
p2 : TStrings) of object;

_T18 = procedure (const p0 : string;
p1 : TStrings) of object;

function __DC__GetTIdNNTP__ModeResult(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdNNTP(Instance).ModeResult;
end;

procedure __DC__SetTIdNNTP__ModeResult(Instance : TObject; Params : PVariantArgList);
begin
TIdNNTP(Instance).ModeResult:=OleVariant(Params^[0]);
end;

function __DC__GetTIdNNTP__MsgCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdNNTP(Instance).MsgCount;
end;

function __DC__GetTIdNNTP__MsgHigh(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdNNTP(Instance).MsgHigh;
end;

function __DC__GetTIdNNTP__MsgLow(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdNNTP(Instance).MsgLow;
end;

function __DC__GetTIdNNTP__Permission(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdNNTP(Instance).Permission;
end;

procedure __RegisterProps;
begin
RegisterProperty(TIdNNTP,'ModeResult',__DC__GetTIdNNTP__ModeResult,__DC__SetTIdNNTP__ModeResult);
RegisterProperty(TIdNNTP,'MsgCount',__DC__GetTIdNNTP__MsgCount,nil);
RegisterProperty(TIdNNTP,'MsgHigh',__DC__GetTIdNNTP__MsgHigh,nil);
RegisterProperty(TIdNNTP,'MsgLow',__DC__GetTIdNNTP__MsgLow,nil);
RegisterProperty(TIdNNTP,'Permission',__DC__GetTIdNNTP__Permission,nil);
end;

const __ConstNames0 : array[0..12] of string = (
'mtStream'
,'mtIHAVE'
,'mtReader'
,'crCanPost'
,'crNoPost'
,'crAuthRequired'
,'crTempUnavailable'
,'mrCanStream'
,'mrNoStream'
,'mrCanIHAVE'
,'mrNoIHAVE'
,'mrCanPost'
,'mrNoPost'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,mtStream));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,mtIHAVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,mtReader));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,crCanPost));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,crNoPost));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,crAuthRequired));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,crTempUnavailable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,mrCanStream));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,mrNoStream));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,mrCanIHAVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,mrNoIHAVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,mrCanPost));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,mrNoPost));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..6] of TClass = (
EIdNNTPConnectionRefused,
EIdNNTPException,
EIdNNTPNoOnNewGroupsList,
EIdNNTPNoOnNewNewsList,
EIdNNTPNoOnNewsgroupList,
EIdNNTPStringListNotInitialized,
TIdNNTP
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegRegisterMethod(TIdNNTP,'Check',TypeInfo(_T0),[
TypeInfo(TStringList),
TypeInfo(TStringList)],Addr(TIdNNTP.Check));

RegRegisterMethod(TIdNNTP,'GetArticle',TypeInfo(_T1),[
TypeInfo(TIdMessage),TypeInfo(Boolean)],Addr(TIdNNTP.GetArticle));

RegRegisterMethod(TIdNNTP,'GetBody',TypeInfo(_T2),[
TypeInfo(TIdMessage),TypeInfo(Boolean)],Addr(TIdNNTP.GetBody));

RegRegisterMethod(TIdNNTP,'GetHeader',TypeInfo(_T3),[
TypeInfo(TIdMessage),TypeInfo(Boolean)],Addr(TIdNNTP.GetHeader));

RegRegisterMethod(TIdNNTP,'GetNewsgroupList',TypeInfo(_T4),NoParams,Addr(TIdNNTP.GetNewsgroupList));

RegRegisterMethod(TIdNNTP,'GetNewGroupsList',TypeInfo(_T5),[
TypeInfo(TDateTime),
TypeInfo(Boolean),
TypeInfo(string)],Addr(TIdNNTP.GetNewGroupsList));

RegRegisterMethod(TIdNNTP,'GetNewNewsList',TypeInfo(_T6),[
TypeInfo(string),
TypeInfo(TDateTime),
TypeInfo(Boolean),
TypeInfo(string)],Addr(TIdNNTP.GetNewNewsList));

RegRegisterMethod(TIdNNTP,'GetOverviewFMT',TypeInfo(_T7),[
TypeInfo(TStringList)],Addr(TIdNNTP.GetOverviewFMT));

RegRegisterMethod(TIdNNTP,'IHAVE',TypeInfo(_T8),[
TypeInfo(TStringList)],Addr(TIdNNTP.IHAVE));

RegRegisterMethod(TIdNNTP,'Next',TypeInfo(_T9),[TypeInfo(Boolean)],Addr(TIdNNTP.Next));

RegRegisterMethod(TIdNNTP,'Previous',TypeInfo(_T10),[TypeInfo(Boolean)],Addr(TIdNNTP.Previous));

RegRegisterMethod(TIdNNTP,'ParseXOVER',TypeInfo(_T11),[
TypeInfo(string),
TypeInfo(Integer),
TypeInfo(string),
TypeInfo(string),
TypeInfo(TDateTime),
TypeInfo(string),
TypeInfo(string),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(string)],Addr(TIdNNTP.ParseXOVER));

RegRegisterMethod(TIdNNTP,'ParseNewsGroup',TypeInfo(_T12),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(string)],Addr(TIdNNTP.ParseNewsGroup));

RegRegisterMethod(TIdNNTP,'Post',TypeInfo(_T13),[
TypeInfo(TIdMessage)],Addr(TIdNNTP.Post));

RegRegisterMethod(TIdNNTP,'SelectArticle',TypeInfo(_T14),[
TypeInfo(Integer),TypeInfo(Boolean)],Addr(TIdNNTP.SelectArticle));

RegRegisterMethod(TIdNNTP,'SelectGroup',TypeInfo(_T15),[
TypeInfo(string)],Addr(TIdNNTP.SelectGroup));

RegRegisterMethod(TIdNNTP,'TakeThis',TypeInfo(_T16),[
TypeInfo(string),
TypeInfo(TStream),TypeInfo(string)],Addr(TIdNNTP.TakeThis));

RegRegisterMethod(TIdNNTP,'XHDR',TypeInfo(_T17),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(TStrings)],Addr(TIdNNTP.XHDR));

RegRegisterMethod(TIdNNTP,'XOVER',TypeInfo(_T18),[
TypeInfo(string),
TypeInfo(TStrings)],Addr(TIdNNTP.XOVER));

end;
initialization
_mreg_0;
RegisterEvent(TypeInfo(TEventNewNewsList),[
TypeInfo(string),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TEventNewsgroupList),[
TypeInfo(string),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(string),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TEventStreaming),[
TypeInfo(string),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TNewsTransportEvent),[
TypeInfo(TStringList)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
