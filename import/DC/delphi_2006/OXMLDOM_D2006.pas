{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit OXMLDOM_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  dcscript,
  dcsystem,
  dcdreamlib,
  ComObj,
  ActiveX,
  Windows,
  SysUtils,
  Classes,
  Variants,
  xmldom,
  xdom,
  oxmldom;
function ConvertTParseErrorInfoToVariant(var R : TParseErrorInfo) : OleVariant;
function ConvertVariantToTParseErrorInfo(const V : OleVariant) : TParseErrorInfo;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TParseErrorInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TParseErrorInfo;
public
function GetRecordPtr : pointer; override;
published
procedure seterrorCode(const val : Integer);
function geterrorCode : Integer;
property errorCode : Integer read geterrorCode write seterrorCode;
procedure seturl(const val : WideString);
function geturl : WideString;
property url : WideString read geturl write seturl;
procedure setreason(const val : WideString);
function getreason : WideString;
property reason : WideString read getreason write setreason;
procedure setsrcText(const val : WideString);
function getsrcText : WideString;
property srcText : WideString read getsrcText write setsrcText;
procedure setline(const val : Integer);
function getline : Integer;
property line : Integer read getline write setline;
procedure setlinePos(const val : Integer);
function getlinePos : Integer;
property linePos : Integer read getlinePos write setlinePos;
procedure setfilePos(const val : Integer);
function getfilePos : Integer;
property filePos : Integer read getfilePos write setfilePos;
end;
type
_T0 = procedure (p0 : TOXDOMImplementation;
p1 : TdomDocument;
p2 : Boolean) of object;

_T1 = procedure (p0 : TOXDOMDocumentType) of object;

_T2 = procedure  of object;

_T3 = procedure (var p0 : TdomDocument) of object;

_T4 = _T2;

_T5 = function (const p0 : TStream;
const p1 : TOXDOMDocument;
const p2 : IDispatch): WordBool of object;

_T6 = function (const p0 : DOMString;
const p1 : TdomDocument;
const p2 : IDispatch): WordBool of object;

_T7 = procedure (p0 : TXmlCustomProcessorAgent;
p1 : TXmlParserError) of object;

_T8 = procedure (p0 : TdomNamedNodeMap;
p1 : TOXDOMNode) of object;

{_T9 = function : IDOMNodeList of object;}

_T10 = function : WordBool of object;

_T11 = procedure (p0 : TdomNode;
p1 : TOXDOMDocument) of object;

_T12 = procedure (p0 : TdomNodeList;
p1 : TOXDOMNode) of object;

function __TParseErrorInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TParseErrorInfo__Wrapper.seterrorCode(const val : Integer);
begin
TParseErrorInfo(GetRecordPtr^).errorCode := val;
end;
function __TParseErrorInfo__Wrapper.geterrorCode : Integer;
begin
result := TParseErrorInfo(GetRecordPtr^).errorCode;
end;
procedure __TParseErrorInfo__Wrapper.seturl(const val : WideString);
begin
TParseErrorInfo(GetRecordPtr^).url := val;
end;
function __TParseErrorInfo__Wrapper.geturl : WideString;
begin
result := TParseErrorInfo(GetRecordPtr^).url;
end;
procedure __TParseErrorInfo__Wrapper.setreason(const val : WideString);
begin
TParseErrorInfo(GetRecordPtr^).reason := val;
end;
function __TParseErrorInfo__Wrapper.getreason : WideString;
begin
result := TParseErrorInfo(GetRecordPtr^).reason;
end;
procedure __TParseErrorInfo__Wrapper.setsrcText(const val : WideString);
begin
TParseErrorInfo(GetRecordPtr^).srcText := val;
end;
function __TParseErrorInfo__Wrapper.getsrcText : WideString;
begin
result := TParseErrorInfo(GetRecordPtr^).srcText;
end;
procedure __TParseErrorInfo__Wrapper.setline(const val : Integer);
begin
TParseErrorInfo(GetRecordPtr^).line := val;
end;
function __TParseErrorInfo__Wrapper.getline : Integer;
begin
result := TParseErrorInfo(GetRecordPtr^).line;
end;
procedure __TParseErrorInfo__Wrapper.setlinePos(const val : Integer);
begin
TParseErrorInfo(GetRecordPtr^).linePos := val;
end;
function __TParseErrorInfo__Wrapper.getlinePos : Integer;
begin
result := TParseErrorInfo(GetRecordPtr^).linePos;
end;
procedure __TParseErrorInfo__Wrapper.setfilePos(const val : Integer);
begin
TParseErrorInfo(GetRecordPtr^).filePos := val;
end;
function __TParseErrorInfo__Wrapper.getfilePos : Integer;
begin
result := TParseErrorInfo(GetRecordPtr^).filePos;
end;
function _TParseErrorInfo_ : IDispatch;
begin
  result := __TParseErrorInfo__Wrapper.Create;
end;
function __TOXDOMImplementation__loadFromStream__Wrapper(__Instance : TOXDOMImplementation;
const p0 : TStream;
const p1 : TOXDOMDocument;
const p2 : IDispatch): WordBool;
var
__p2 : ^TParseErrorInfo;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := TOXDOMImplementation(__Instance).loadFromStream(p0,p1,__p2^);
end;

function __TOXDOMImplementation__loadxml__Wrapper(__Instance : TOXDOMImplementation;
const p0 : DOMString;
const p1 : TdomDocument;
const p2 : IDispatch): WordBool;
var
__p2 : ^TParseErrorInfo;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := TOXDOMImplementation(__Instance).loadxml(p0,p1,__p2^);
end;


type __TParseErrorInfo__Wrapper__ = class(__TParseErrorInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TParseErrorInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTParseErrorInfoToVariant(var R : TParseErrorInfo) : OleVariant;
var
__rw : __TParseErrorInfo__Wrapper__;
begin
__rw := __TParseErrorInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTParseErrorInfo(const V : OleVariant) : TParseErrorInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TParseErrorInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTOXDOMAttr__Attribute(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TOXDOMAttr(Instance).Attribute);
end;

function __DC__GetTOXDOMCharacterData__CharacterData(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TOXDOMCharacterData(Instance).CharacterData);
end;

function __DC__GetTOXDOMDocument__Document(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TOXDOMDocument(Instance).Document);
end;

function __DC__GetTOXDOMDocument__PreserveWhitespace(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TOXDOMDocument(Instance).PreserveWhitespace;
end;

function __DC__GetTOXDOMDocumentType__DocumentType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TOXDOMDocumentType(Instance).DocumentType);
end;

function __DC__GetTOXDOMElement__Element(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TOXDOMElement(Instance).Element);
end;

function __DC__GetTOXDOMEntity__Entity(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TOXDOMEntity(Instance).Entity);
end;

function __DC__GetTOXDOMImplementation__DOMImpl(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TOXDOMImplementation(Instance).DOMImpl);
end;

function __DC__GetTOXDOMNamedNodeMap__NamedNodeMap(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TOXDOMNamedNodeMap(Instance).NamedNodeMap);
end;

function __DC__GetTOXDOMNode__Node(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TOXDOMNode(Instance).Node);
end;

function __DC__GetTOXDOMNode__OXDOMDocument(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TOXDOMNode(Instance).OXDOMDocument);
end;

function __DC__GetTOXDOMNodeList__NodeList(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TOXDOMNodeList(Instance).NodeList);
end;

function __DC__GetTOXDOMNotation__Notation(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TOXDOMNotation(Instance).Notation);
end;

function __DC__GetTOXDOMProcessingInstruction__ProcessingInstruction(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TOXDOMProcessingInstruction(Instance).ProcessingInstruction);
end;

procedure __RegisterProps;
begin
RegisterProperty(TOXDOMAttr,'Attribute',__DC__GetTOXDOMAttr__Attribute,nil);
RegisterProperty(TOXDOMCharacterData,'CharacterData',__DC__GetTOXDOMCharacterData__CharacterData,nil);
RegisterProperty(TOXDOMDocument,'Document',__DC__GetTOXDOMDocument__Document,nil);
RegisterProperty(TOXDOMDocument,'PreserveWhitespace',__DC__GetTOXDOMDocument__PreserveWhitespace,nil);
RegisterProperty(TOXDOMDocumentType,'DocumentType',__DC__GetTOXDOMDocumentType__DocumentType,nil);
RegisterProperty(TOXDOMElement,'Element',__DC__GetTOXDOMElement__Element,nil);
RegisterProperty(TOXDOMEntity,'Entity',__DC__GetTOXDOMEntity__Entity,nil);
RegisterProperty(TOXDOMImplementation,'DOMImpl',__DC__GetTOXDOMImplementation__DOMImpl,nil);
RegisterProperty(TOXDOMNamedNodeMap,'NamedNodeMap',__DC__GetTOXDOMNamedNodeMap__NamedNodeMap,nil);
RegisterProperty(TOXDOMNode,'Node',__DC__GetTOXDOMNode__Node,nil);
RegisterProperty(TOXDOMNode,'OXDOMDocument',__DC__GetTOXDOMNode__OXDOMDocument,nil);
RegisterProperty(TOXDOMNodeList,'NodeList',__DC__GetTOXDOMNodeList__NodeList,nil);
RegisterProperty(TOXDOMNotation,'Notation',__DC__GetTOXDOMNotation__Notation,nil);
RegisterProperty(TOXDOMProcessingInstruction,'ProcessingInstruction',__DC__GetTOXDOMProcessingInstruction__ProcessingInstruction,nil);
end;

function __DC__Getoxmldom__OpenXMLFactory(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(oxmldom.OpenXMLFactory);
end;

procedure __DC__Setoxmldom__OpenXMLFactory(Instance : TObject; Params : PVariantArgList);
begin
TObject(oxmldom.OpenXMLFactory):=(VarToObject(OleVariant(Params^[0])));
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('OpenXMLFactory',__DC__Getoxmldom__OpenXMLFactory,__DC__Setoxmldom__OpenXMLFactory));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..0] of string = (
'SOpenXML'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,SOpenXML));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..19] of TClass = (
TOXDOMAttr,
TOXDOMCDATASection,
TOXDOMCharacterData,
TOXDOMComment,
TOXDOMDocument,
TOXDOMDocumentFragment,
TOXDOMDocumentType,
TOXDOMDocumentTypeChildren,
TOXDOMElement,
TOXDOMEntity,
TOXDOMEntityReference,
TOXDOMImplementation,
TOXDOMImplementationFactory,
TOXDOMInterface,
TOXDOMNamedNodeMap,
TOXDOMNode,
TOXDOMNodeList,
TOXDOMNotation,
TOXDOMProcessingInstruction,
TOXDOMText
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'TParseErrorInfo'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TParseErrorInfo_)));
RegisterProc(TOXDOMDocument,'Create',mtConstructor,TypeInfo(_T0),[
TypeInfo(TOXDOMImplementation),
TypeInfo(TdomDocument),
TypeInfo(Boolean)],Addr(TOXDOMDocument.Create),cRegister);

RegisterProc(TOXDOMDocumentTypeChildren,'Create',mtConstructor,TypeInfo(_T1),[
TypeInfo(TOXDOMDocumentType)],Addr(TOXDOMDocumentTypeChildren.Create),cRegister);

RegisterProc(TOXDOMImplementation,'Create',mtConstructor,TypeInfo(_T2),NoParams,Addr(TOXDOMImplementation.Create),cRegister);

RegRegisterMethod(TOXDOMImplementation,'FreeDocument',TypeInfo(_T3),[
TypeInfo(TdomDocument)],Addr(TOXDOMImplementation.FreeDocument));

RegRegisterMethod(TOXDOMImplementation,'InitParserAgent',TypeInfo(_T4),NoParams,Addr(TOXDOMImplementation.InitParserAgent));

RegRegisterMethod(TOXDOMImplementation,'loadFromStream',TypeInfo(_T5),[
TypeInfo(TStream),
TypeInfo(TOXDOMDocument),
TypeInfo(IDispatch),TypeInfo(WordBool)],Addr(__TOXDOMImplementation__loadFromStream__Wrapper));

RegRegisterMethod(TOXDOMImplementation,'loadxml',TypeInfo(_T6),[
TypeInfo(DOMString),
TypeInfo(TdomDocument),
TypeInfo(IDispatch),TypeInfo(WordBool)],Addr(__TOXDOMImplementation__loadxml__Wrapper));

RegRegisterMethod(TOXDOMImplementation,'ParseErrorHandler',TypeInfo(_T7),[
TypeInfo(TXmlCustomProcessorAgent),
TypeInfo(TXmlParserError)],Addr(TOXDOMImplementation.ParseErrorHandler));

RegisterProc(TOXDOMNamedNodeMap,'Create',mtConstructor,TypeInfo(_T8),[
TypeInfo(TdomNamedNodeMap),
TypeInfo(TOXDOMNode)],Addr(TOXDOMNamedNodeMap.Create),cRegister);

//RegisterProc(TOXDOMNode,'hasChildNodes',mtMethod,TypeInfo(_T10),[TypeInfo(WordBool)], pointer(4),cSafeCall);
RegisterProc(TOXDOMNode,'hasChildNodes',mtMethod,TypeInfo(_T10),[TypeInfo(WordBool)],  getVMTProcAddr('TOXDOMNode','hasChildNodes',4),cSafeCall);


//RegisterProc(TOXDOMNode,'Create',mtConstructor,TypeInfo(_T11),[TypeInfo(TdomNode),TypeInfo(TOXDOMDocument)], pointer(8),cRegister);
RegisterProc(TOXDOMNode,'Create',mtConstructor,TypeInfo(_T11),[TypeInfo(TdomNode),TypeInfo(TOXDOMDocument)],  getVMTProcAddr('TOXDOMNode','Create',8),cRegister);


RegisterProc(TOXDOMNodeList,'Create',mtConstructor,TypeInfo(_T12),[
TypeInfo(TdomNodeList),
TypeInfo(TOXDOMNode)],Addr(TOXDOMNodeList.Create),cRegister);

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(TOXDOMNode,'get_childNodes',mtMethod,TypeInfo(_T9),[TypeInfo(IDOMNodeList)], pointer(0),cSafeCall)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
