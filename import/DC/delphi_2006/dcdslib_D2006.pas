{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit dcdslib_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  Windows,
  SysUtils,
  Classes,
  dcdreamLib,
  dcsystem,
  dcscript,
  dcDSLib;
function ConvertTRunToLineInfoToVariant(var R : TRunToLineInfo) : OleVariant;
function ConvertVariantToTRunToLineInfo(const V : OleVariant) : TRunToLineInfo;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TRunToLineInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TRunToLineInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setAtLine(const val : Integer);
function getAtLine : Integer;
property AtLine : Integer read getAtLine write setAtLine;
procedure setStop(const val : Boolean);
function getStop : Boolean;
property Stop : Boolean read getStop write setStop;
end;
type
_T0 = function (var p0 : string;
var p1 : Integer): TEvaluateSpecifier of object;

_T1 = function (const p0 : OleVariant;
const p1 : TEvaluateSpecifier;
const p2 : Integer;
p3 : TKindOfScript;
p4 : Boolean;
p5 : TScriptRunner): string of object;

_T2 = procedure (p0 : TKindOfScript;
var p1 : string;
var p2 : string) of object;

_T3 = procedure  of object;

_T4 = _T3;

_T5 = _T3;

_T6 = function : Boolean of object;

_T7 = procedure (p0 : Integer;
p1 : Integer) of object;

_T8 = function : string of object;

_T9 = function : TSimpleParser of object;

function __TRunToLineInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRunToLineInfo__Wrapper.setAtLine(const val : Integer);
begin
TRunToLineInfo(GetRecordPtr^).AtLine := val;
end;
function __TRunToLineInfo__Wrapper.getAtLine : Integer;
begin
result := TRunToLineInfo(GetRecordPtr^).AtLine;
end;
procedure __TRunToLineInfo__Wrapper.setStop(const val : Boolean);
begin
TRunToLineInfo(GetRecordPtr^).Stop := val;
end;
function __TRunToLineInfo__Wrapper.getStop : Boolean;
begin
result := TRunToLineInfo(GetRecordPtr^).Stop;
end;
function _TRunToLineInfo_ : IDispatch;
begin
  result := __TRunToLineInfo__Wrapper.Create;
end;
function ____ConvertVarToStr__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
5:
begin
result := ConvertVarToStr(OleVariant(pargs^[4]),OleVariant(pargs^[3]),OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
6:
begin
result := ConvertVarToStr(OleVariant(pargs^[5]),OleVariant(pargs^[4]),OleVariant(pargs^[3]),OleVariant(pargs^[2]),OleVariant(pargs^[1]),TScriptRunner(VarToObject(OleVariant(pargs^[0]))));
end;
end
end;


type __TRunToLineInfo__Wrapper__ = class(__TRunToLineInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRunToLineInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRunToLineInfoToVariant(var R : TRunToLineInfo) : OleVariant;
var
__rw : __TRunToLineInfo__Wrapper__;
begin
__rw := __TRunToLineInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRunToLineInfo(const V : OleVariant) : TRunToLineInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRunToLineInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTCustomStackItem__Line(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomStackItem(Instance).Line;
end;

function __DC__GetTCustomUnit__Text(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomUnit(Instance).Text;
end;

function __DC__GetTCustomUnit__Name(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomUnit(Instance).Name;
end;

function __DC__GetTCustomUnit__Parser(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomUnit(Instance).Parser);
end;

procedure __RegisterProps;
begin
RegisterProperty(TCustomStackItem,'Line',__DC__GetTCustomStackItem__Line,nil);
RegisterProperty(TCustomUnit,'Text',__DC__GetTCustomUnit__Text,nil);
RegisterProperty(TCustomUnit,'Name',__DC__GetTCustomUnit__Name,nil);
RegisterProperty(TCustomUnit,'Parser',__DC__GetTCustomUnit__Parser,nil);
end;

const __ConstNames0 : array[0..20] of string = (
'SEmptyScriptName'
,'SEBreakpointEnd'
,'SVarUnknown'
,'SVarNull'
,'SVarUnassigned'
,'SVarBoolFalse'
,'cMaxKnownScripts'
,'brtNone'
,'brtAbort'
,'brtContinue'
,'brtStepInto'
,'brtStepOver'
,'brtEvaluate'
,'evsNone'
,'evsHex'
,'evsFloating'
,'kscNone'
,'kscJavaScript'
,'kscVBScript'
,'kscDelphiScript'
,'kscUnknown'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,SEmptyScriptName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,SEBreakpointEnd));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,SVarUnknown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,SVarNull));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,SVarUnassigned));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,SVarBoolFalse));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,cMaxKnownScripts));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,brtNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,brtAbort));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,brtContinue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,brtStepInto));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,brtStepOver));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,brtEvaluate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,evsNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,evsHex));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,evsFloating));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,kscNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,kscJavaScript));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,kscVBScript));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,kscDelphiScript));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,kscUnknown));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..3] of TClass = (
TCrtlSection,
TCustomBreakPoint,
TCustomStackItem,
TCustomUnit
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..3] of string = (
'TRunToLineInfo'
,'ExpressionToSpecifier'
,'ConvertVarToStr'
,'GetPreffixes'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TRunToLineInfo_)));
RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T0),[
TypeInfo(string),
TypeInfo(Integer),TypeInfo(TEvaluateSpecifier)],Addr(ExpressionToSpecifier),cRegister);

RegisterProc(nil,MethodNames[2],mtScriptProc,TypeInfo(_T1),[
TypeInfo(OleVariant),
TypeInfo(TEvaluateSpecifier),
TypeInfo(Integer),
TypeInfo(TKindOfScript),
TypeInfo(Boolean),
TypeInfo(TScriptRunner),TypeInfo(string)],Addr(____ConvertVarToStr__Wrapper),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T2),[
TypeInfo(TKindOfScript),
TypeInfo(string),
TypeInfo(string)],Addr(GetPreffixes),cRegister);

RegisterProc(TCrtlSection,'Create',mtConstructor,TypeInfo(_T3),NoParams,Addr(TCrtlSection.Create),cRegister);

RegRegisterMethod(TCrtlSection,'Enter',TypeInfo(_T4),NoParams,Addr(TCrtlSection.Enter));

RegRegisterMethod(TCrtlSection,'Leave',TypeInfo(_T5),NoParams,Addr(TCrtlSection.Leave));

//RegRegisterMethod(TCustomBreakPoint,'CheckCondition',TypeInfo(_T6),[TypeInfo(Boolean)], pointer(32));
RegRegisterMethod(TCustomBreakPoint,'CheckCondition',TypeInfo(_T6),[TypeInfo(Boolean)],  getVMTProcAddr('TCustomBreakPoint','CheckCondition',32));


RegisterProc(TCustomStackItem,'Create',mtConstructor,TypeInfo(_T7),[
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TCustomStackItem.Create),cRegister);

//RegRegisterMethod(TCustomUnit,'GetText',TypeInfo(_T8),[TypeInfo(string)], pointer(0));
RegRegisterMethod(TCustomUnit,'GetText',TypeInfo(_T8),[TypeInfo(string)],  getVMTProcAddr('TCustomUnit','GetText',0));


//RegRegisterMethod(TCustomUnit,'GetParser',TypeInfo(_T9),[TypeInfo(TSimpleParser)], pointer(4));
RegRegisterMethod(TCustomUnit,'GetParser',TypeInfo(_T9),[TypeInfo(TSimpleParser)],  getVMTProcAddr('TCustomUnit','GetParser',4));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
