{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit DIALOGS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  ShlObj,
  Types,
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Messages,
  SysUtils,
  CommDlg,
  Printers,
  Classes,
  Graphics,
  Controls,
  Forms,
  StdCtrls,
  Dialogs;
function ConvertTMessageToVariant(var R : TMessage) : OleVariant;
function ConvertVariantToTMessage(const V : OleVariant) : TMessage;
function ConvertTPageSetupDlgToVariant(var R : TPageSetupDlg) : OleVariant;
function ConvertVariantToTPageSetupDlg(const V : OleVariant) : TPageSetupDlg;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TPoint__Wrapper = class(TDCRecordWrapper)
private
fR : TPoint;
public
function GetRecordPtr : pointer; override;
published
procedure setX(const val : Longint);
function getX : Longint;
property X : Longint read getX write setX;
procedure setY(const val : Longint);
function getY : Longint;
property Y : Longint read getY write setY;
end;
type __TPageSetupDlg__Wrapper = class(TDCRecordWrapper)
private
fR : TPageSetupDlg;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethDevMode(const val : HGLOBAL);
function gethDevMode : HGLOBAL;
property hDevMode : HGLOBAL read gethDevMode write sethDevMode;
procedure sethDevNames(const val : HGLOBAL);
function gethDevNames : HGLOBAL;
property hDevNames : HGLOBAL read gethDevNames write sethDevNames;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
procedure sethPageSetupTemplate(const val : HGLOBAL);
function gethPageSetupTemplate : HGLOBAL;
property hPageSetupTemplate : HGLOBAL read gethPageSetupTemplate write sethPageSetupTemplate;
end;
type __TMessage__Wrapper = class(TDCRecordWrapper)
private
fR : TMessage;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setWParam(const val : Longint);
function getWParam : Longint;
property WParam : Longint read getWParam write setWParam;
procedure setLParam(const val : Longint);
function getLParam : Longint;
property LParam : Longint read getLParam write setLParam;
procedure setResult(const val : Longint);
function getResult : Longint;
property Result : Longint read getResult write setResult;
procedure setWParamLo(const val : Word);
function getWParamLo : Word;
property WParamLo : Word read getWParamLo write setWParamLo;
procedure setWParamHi(const val : Word);
function getWParamHi : Word;
property WParamHi : Word read getWParamHi write setWParamHi;
procedure setLParamLo(const val : Word);
function getLParamLo : Word;
property LParamLo : Word read getLParamLo write setLParamLo;
procedure setLParamHi(const val : Word);
function getLParamHi : Word;
property LParamHi : Word read getLParamHi write setLParamHi;
procedure setResultLo(const val : Word);
function getResultLo : Word;
property ResultLo : Word read getResultLo write setResultLo;
procedure setResultHi(const val : Word);
function getResultHi : Word;
property ResultHi : Word read getResultHi write setResultHi;
end;
type __TRect__Wrapper = class(TDCRecordWrapper)
private
fR : TRect;
public
function GetRecordPtr : pointer; override;
published
procedure setLeft(const val : Longint);
function getLeft : Longint;
property Left : Longint read getLeft write setLeft;
procedure setTop(const val : Longint);
function getTop : Longint;
property Top : Longint read getTop write setTop;
procedure setRight(const val : Longint);
function getRight : Longint;
property Right : Longint read getRight write setRight;
procedure setBottom(const val : Longint);
function getBottom : Longint;
property Bottom : Longint read getBottom write setBottom;
end;
type __TCommonDialog__ = class(TCommonDialog);
type __TOpenDialog__ = class(TOpenDialog);
type
_T0 = function (const p0 : string;
p1 : TMsgDlgType;
p2 : TMsgDlgButtons): TForm of object;

_T1 = function (const p0 : string;
p1 : TMsgDlgType;
p2 : TMsgDlgButtons;
p3 : Longint): Integer of object;

_T2 = function (const p0 : string;
p1 : TMsgDlgType;
p2 : TMsgDlgButtons;
p3 : Longint;
p4 : Integer;
p5 : Integer): Integer of object;

_T3 = function (const p0 : string;
p1 : TMsgDlgType;
p2 : TMsgDlgButtons;
p3 : Longint;
p4 : Integer;
p5 : Integer;
const p6 : string): Integer of object;

_T4 = procedure (const p0 : string) of object;

_T5 = procedure (const p0 : string;
p1 : Array of Const) of object;

_T6 = procedure (const p0 : string;
p1 : Integer;
p2 : Integer) of object;

_T7 = function (const p0 : string;
const p1 : string;
const p2 : string): string of object;

_T8 = function (const p0 : string;
const p1 : string;
var p2 : string): Boolean of object;

_T10 = procedure  of object;

_T11 = _T10;

_T12 = procedure (const p0 : IDispatch) of object;

_T13 = function (const p0 : IDispatch): Boolean of object;

_T14 = function (p0 : Pointer;
var p1): Bool of object;

_T15 = function : Boolean of object;

_T16 = _T10;

_T17 = _T10;

_T18 = _T10;

_T19 = procedure (p0 : HWND) of object;

_T20 = _T15;

_T21 = _T10;

_T22 = _T10;

_T23 = _T10;

{_T24 = procedure (const p0 : TOFNotifyEx;
var p1 : Boolean) of object;}

_T25 = function : IDispatch of object;

_T26 = _T15;

function __TPoint__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPoint__Wrapper.setX(const val : Longint);
begin
TPoint(GetRecordPtr^).X := val;
end;
function __TPoint__Wrapper.getX : Longint;
begin
result := TPoint(GetRecordPtr^).X;
end;
procedure __TPoint__Wrapper.setY(const val : Longint);
begin
TPoint(GetRecordPtr^).Y := val;
end;
function __TPoint__Wrapper.getY : Longint;
begin
result := TPoint(GetRecordPtr^).Y;
end;
function __TPageSetupDlg__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPageSetupDlg__Wrapper.setlStructSize(const val : DWORD);
begin
TPageSetupDlg(GetRecordPtr^).lStructSize := val;
end;
function __TPageSetupDlg__Wrapper.getlStructSize : DWORD;
begin
result := TPageSetupDlg(GetRecordPtr^).lStructSize;
end;
procedure __TPageSetupDlg__Wrapper.sethDevMode(const val : HGLOBAL);
begin
TPageSetupDlg(GetRecordPtr^).hDevMode := val;
end;
function __TPageSetupDlg__Wrapper.gethDevMode : HGLOBAL;
begin
result := TPageSetupDlg(GetRecordPtr^).hDevMode;
end;
procedure __TPageSetupDlg__Wrapper.sethDevNames(const val : HGLOBAL);
begin
TPageSetupDlg(GetRecordPtr^).hDevNames := val;
end;
function __TPageSetupDlg__Wrapper.gethDevNames : HGLOBAL;
begin
result := TPageSetupDlg(GetRecordPtr^).hDevNames;
end;
procedure __TPageSetupDlg__Wrapper.setFlags(const val : DWORD);
begin
TPageSetupDlg(GetRecordPtr^).Flags := val;
end;
function __TPageSetupDlg__Wrapper.getFlags : DWORD;
begin
result := TPageSetupDlg(GetRecordPtr^).Flags;
end;
procedure __TPageSetupDlg__Wrapper.sethInstance(const val : HINST);
begin
TPageSetupDlg(GetRecordPtr^).hInstance := val;
end;
function __TPageSetupDlg__Wrapper.gethInstance : HINST;
begin
result := TPageSetupDlg(GetRecordPtr^).hInstance;
end;
procedure __TPageSetupDlg__Wrapper.setlCustData(const val : LPARAM);
begin
TPageSetupDlg(GetRecordPtr^).lCustData := val;
end;
function __TPageSetupDlg__Wrapper.getlCustData : LPARAM;
begin
result := TPageSetupDlg(GetRecordPtr^).lCustData;
end;
procedure __TPageSetupDlg__Wrapper.sethPageSetupTemplate(const val : HGLOBAL);
begin
TPageSetupDlg(GetRecordPtr^).hPageSetupTemplate := val;
end;
function __TPageSetupDlg__Wrapper.gethPageSetupTemplate : HGLOBAL;
begin
result := TPageSetupDlg(GetRecordPtr^).hPageSetupTemplate;
end;
function __TMessage__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMessage__Wrapper.setMsg(const val : Cardinal);
begin
TMessage(GetRecordPtr^).Msg := val;
end;
function __TMessage__Wrapper.getMsg : Cardinal;
begin
result := TMessage(GetRecordPtr^).Msg;
end;
procedure __TMessage__Wrapper.setWParam(const val : Longint);
begin
TMessage(GetRecordPtr^).WParam := val;
end;
function __TMessage__Wrapper.getWParam : Longint;
begin
result := TMessage(GetRecordPtr^).WParam;
end;
procedure __TMessage__Wrapper.setLParam(const val : Longint);
begin
TMessage(GetRecordPtr^).LParam := val;
end;
function __TMessage__Wrapper.getLParam : Longint;
begin
result := TMessage(GetRecordPtr^).LParam;
end;
procedure __TMessage__Wrapper.setResult(const val : Longint);
begin
TMessage(GetRecordPtr^).Result := val;
end;
function __TMessage__Wrapper.getResult : Longint;
begin
result := TMessage(GetRecordPtr^).Result;
end;
procedure __TMessage__Wrapper.setWParamLo(const val : Word);
begin
TMessage(GetRecordPtr^).WParamLo := val;
end;
function __TMessage__Wrapper.getWParamLo : Word;
begin
result := TMessage(GetRecordPtr^).WParamLo;
end;
procedure __TMessage__Wrapper.setWParamHi(const val : Word);
begin
TMessage(GetRecordPtr^).WParamHi := val;
end;
function __TMessage__Wrapper.getWParamHi : Word;
begin
result := TMessage(GetRecordPtr^).WParamHi;
end;
procedure __TMessage__Wrapper.setLParamLo(const val : Word);
begin
TMessage(GetRecordPtr^).LParamLo := val;
end;
function __TMessage__Wrapper.getLParamLo : Word;
begin
result := TMessage(GetRecordPtr^).LParamLo;
end;
procedure __TMessage__Wrapper.setLParamHi(const val : Word);
begin
TMessage(GetRecordPtr^).LParamHi := val;
end;
function __TMessage__Wrapper.getLParamHi : Word;
begin
result := TMessage(GetRecordPtr^).LParamHi;
end;
procedure __TMessage__Wrapper.setResultLo(const val : Word);
begin
TMessage(GetRecordPtr^).ResultLo := val;
end;
function __TMessage__Wrapper.getResultLo : Word;
begin
result := TMessage(GetRecordPtr^).ResultLo;
end;
procedure __TMessage__Wrapper.setResultHi(const val : Word);
begin
TMessage(GetRecordPtr^).ResultHi := val;
end;
function __TMessage__Wrapper.getResultHi : Word;
begin
result := TMessage(GetRecordPtr^).ResultHi;
end;
function __TRect__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRect__Wrapper.setLeft(const val : Longint);
begin
TRect(GetRecordPtr^).Left := val;
end;
function __TRect__Wrapper.getLeft : Longint;
begin
result := TRect(GetRecordPtr^).Left;
end;
procedure __TRect__Wrapper.setTop(const val : Longint);
begin
TRect(GetRecordPtr^).Top := val;
end;
function __TRect__Wrapper.getTop : Longint;
begin
result := TRect(GetRecordPtr^).Top;
end;
procedure __TRect__Wrapper.setRight(const val : Longint);
begin
TRect(GetRecordPtr^).Right := val;
end;
function __TRect__Wrapper.getRight : Longint;
begin
result := TRect(GetRecordPtr^).Right;
end;
procedure __TRect__Wrapper.setBottom(const val : Longint);
begin
TRect(GetRecordPtr^).Bottom := val;
end;
function __TRect__Wrapper.getBottom : Longint;
begin
result := TRect(GetRecordPtr^).Bottom;
end;
procedure __TCommonDialog__WndProc__Wrapper(__Instance : TCommonDialog;
const p0 : IDispatch);
var
__p0 : ^TMessage;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__TCommonDialog__(__Instance).WndProc(__p0^);
end;

function __TCommonDialog__MessageHook__Wrapper(__Instance : TCommonDialog;
const p0 : IDispatch): Boolean;
var
__p0 : ^TMessage;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := __TCommonDialog__(__Instance).MessageHook(__p0^);
end;

function __TOpenDialog__GetStaticRect__Wrapper(__Instance : TOpenDialog): IDispatch;
var
__result : TRect;
__wrapper : __TRect__Wrapper;
begin
__result := __TOpenDialog__(__Instance).GetStaticRect;
__wrapper := __TRect__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;


type __TMessage__Wrapper__ = class(__TMessage__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMessage__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMessageToVariant(var R : TMessage) : OleVariant;
var
__rw : __TMessage__Wrapper__;
begin
__rw := __TMessage__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMessage(const V : OleVariant) : TMessage;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMessage((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPageSetupDlg__Wrapper__ = class(__TPageSetupDlg__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPageSetupDlg__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPageSetupDlgToVariant(var R : TPageSetupDlg) : OleVariant;
var
__rw : __TPageSetupDlg__Wrapper__;
begin
__rw := __TPageSetupDlg__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPageSetupDlg(const V : OleVariant) : TPageSetupDlg;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPageSetupDlg((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPoint__Wrapper__ = class(__TPoint__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPoint__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
var
__rw : __TPoint__Wrapper__;
begin
__rw := __TPoint__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPoint((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRect__Wrapper__ = class(__TRect__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRect__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
var
__rw : __TRect__Wrapper__;
begin
__rw := __TRect__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRect((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTCommonDialog__Handle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCommonDialog(Instance).Handle;
end;

function __DC__GetTFindDialog__Left(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFindDialog(Instance).Left;
end;

procedure __DC__SetTFindDialog__Left(Instance : TObject; Params : PVariantArgList);
begin
TFindDialog(Instance).Left:=OleVariant(Params^[0]);
end;

function __DC__GetTFindDialog__Position(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TPoint__Wrapper;
begin
__wrapper := __TPoint__Wrapper.Create;
__wrapper.fR := TFindDialog(Instance).Position;
result := IUnknown(__wrapper) as IDispatch;
end;

procedure __DC__SetTFindDialog__Position(Instance : TObject; Params : PVariantArgList);
var
__idisp:IDispatch;
__iwrapper:IDCRecordWrapper;
begin
__idisp:=DCVarToInterface(OleVariant(Params^[0]));
if __idisp=nil then exit;
__idisp.QueryInterface(IDCRecordWrapper, __iwrapper);
TFindDialog(Instance).Position:=TPoint(__iwrapper.GetRecordPtr^);
end;

function __DC__GetTFindDialog__Top(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFindDialog(Instance).Top;
end;

procedure __DC__SetTFindDialog__Top(Instance : TObject; Params : PVariantArgList);
begin
TFindDialog(Instance).Top:=OleVariant(Params^[0]);
end;

function __DC__GetTOpenDialog__FileEditStyle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TOpenDialog(Instance).FileEditStyle;
end;

procedure __DC__SetTOpenDialog__FileEditStyle(Instance : TObject; Params : PVariantArgList);
begin
TOpenDialog(Instance).FileEditStyle:=OleVariant(Params^[0]);
end;

function __DC__GetTOpenDialog__Files(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TOpenDialog(Instance).Files);
end;

function __DC__GetTOpenDialog__HistoryList(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TOpenDialog(Instance).HistoryList);
end;

procedure __DC__SetTOpenDialog__HistoryList(Instance : TObject; Params : PVariantArgList);
begin
TOpenDialog(Instance).HistoryList:=TStrings(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTPageSetupDialog__PageSetupDlgRec(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TPageSetupDlg__Wrapper;
begin
__wrapper := __TPageSetupDlg__Wrapper.Create;
__wrapper.fR := TPageSetupDialog(Instance).PageSetupDlgRec;
result := IUnknown(__wrapper) as IDispatch;
end;

procedure __RegisterProps;
begin
RegisterProperty(TCommonDialog,'Handle',__DC__GetTCommonDialog__Handle,nil);
RegisterProperty(TFindDialog,'Left',__DC__GetTFindDialog__Left,__DC__SetTFindDialog__Left);
RegisterProperty(TFindDialog,'Position',__DC__GetTFindDialog__Position,__DC__SetTFindDialog__Position);
RegisterProperty(TFindDialog,'Top',__DC__GetTFindDialog__Top,__DC__SetTFindDialog__Top);
RegisterProperty(TOpenDialog,'FileEditStyle',__DC__GetTOpenDialog__FileEditStyle,__DC__SetTOpenDialog__FileEditStyle);
RegisterProperty(TOpenDialog,'Files',__DC__GetTOpenDialog__Files,nil);
RegisterProperty(TOpenDialog,'HistoryList',__DC__GetTOpenDialog__HistoryList,__DC__SetTOpenDialog__HistoryList);
RegisterProperty(TPageSetupDialog,'PageSetupDlgRec',__DC__GetTPageSetupDialog__PageSetupDlgRec,nil);
end;

function __DC__GetDialogs__ForceCurrentDirectory(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := Dialogs.ForceCurrentDirectory;
end;

procedure __DC__SetDialogs__ForceCurrentDirectory(Instance : TObject; Params : PVariantArgList);
begin
Dialogs.ForceCurrentDirectory:=OleVariant(Params^[0]);
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('ForceCurrentDirectory',__DC__GetDialogs__ForceCurrentDirectory,__DC__SetDialogs__ForceCurrentDirectory));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..111] of string = (
'MaxCustomColors'
,'ofReadOnly'
,'ofOverwritePrompt'
,'ofHideReadOnly'
,'ofNoChangeDir'
,'ofShowHelp'
,'ofNoValidate'
,'ofAllowMultiSelect'
,'ofExtensionDifferent'
,'ofPathMustExist'
,'ofFileMustExist'
,'ofCreatePrompt'
,'ofShareAware'
,'ofNoReadOnlyReturn'
,'ofNoTestFileCreate'
,'ofNoNetworkButton'
,'ofNoLongNames'
,'ofOldStyleDialog'
,'ofNoDereferenceLinks'
,'ofEnableIncludeNotify'
,'ofEnableSizing'
,'ofDontAddToRecent'
,'ofForceShowHidden'
,'ofExNoPlacesBar'
,'fsEdit'
,'fsComboBox'
,'cdFullOpen'
,'cdPreventFullOpen'
,'cdShowHelp'
,'cdSolidColor'
,'cdAnyColor'
,'fdAnsiOnly'
,'fdTrueTypeOnly'
,'fdEffects'
,'fdFixedPitchOnly'
,'fdForceFontExist'
,'fdNoFaceSel'
,'fdNoOEMFonts'
,'fdNoSimulations'
,'fdNoSizeSel'
,'fdNoStyleSel'
,'fdNoVectorFonts'
,'fdShowHelp'
,'fdWysiwyg'
,'fdLimitSize'
,'fdScalableOnly'
,'fdApplyButton'
,'fdScreen'
,'fdPrinter'
,'fdBoth'
,'prAllPages'
,'prSelection'
,'prPageNums'
,'poPrintToFile'
,'poPageNums'
,'poSelection'
,'poWarning'
,'poHelp'
,'poDisablePrintToFile'
,'psoDefaultMinMargins'
,'psoDisableMargins'
,'psoDisableOrientation'
,'psoDisablePagePainting'
,'psoDisablePaper'
,'psoDisablePrinter'
,'psoMargins'
,'psoMinMargins'
,'psoShowHelp'
,'psoWarning'
,'psoNoNetworkButton'
,'pkDotMatrix'
,'pkHPPCL'
,'ptEnvelope'
,'ptPaper'
,'pmDefault'
,'pmMillimeters'
,'pmInches'
,'frDown'
,'frFindNext'
,'frHideMatchCase'
,'frHideWholeWord'
,'frHideUpDown'
,'frMatchCase'
,'frDisableMatchCase'
,'frDisableUpDown'
,'frDisableWholeWord'
,'frReplace'
,'frReplaceAll'
,'frWholeWord'
,'frShowHelp'
,'mtWarning'
,'mtError'
,'mtInformation'
,'mtConfirmation'
,'mtCustom'
,'mbYes'
,'mbNo'
,'mbOK'
,'mbCancel'
,'mbAbort'
,'mbRetry'
,'mbIgnore'
,'mbAll'
,'mbNoToAll'
,'mbYesToAll'
,'mbHelp'
,'mbYesNo'
,'mbYesNoCancel'
,'mbYesAllNoAllCancel'
,'mbOKCancel'
,'mbAbortRetryIgnore'
,'mbAbortIgnore'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,MaxCustomColors));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,ofReadOnly));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,ofOverwritePrompt));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,ofHideReadOnly));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,ofNoChangeDir));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,ofShowHelp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,ofNoValidate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,ofAllowMultiSelect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,ofExtensionDifferent));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,ofPathMustExist));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,ofFileMustExist));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,ofCreatePrompt));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,ofShareAware));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,ofNoReadOnlyReturn));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,ofNoTestFileCreate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,ofNoNetworkButton));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,ofNoLongNames));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,ofOldStyleDialog));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,ofNoDereferenceLinks));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,ofEnableIncludeNotify));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,ofEnableSizing));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,ofDontAddToRecent));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,ofForceShowHidden));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,ofExNoPlacesBar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,fsEdit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,fsComboBox));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,cdFullOpen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,cdPreventFullOpen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,cdShowHelp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,cdSolidColor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,cdAnyColor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,fdAnsiOnly));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,fdTrueTypeOnly));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,fdEffects));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,fdFixedPitchOnly));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,fdForceFontExist));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,fdNoFaceSel));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,fdNoOEMFonts));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,fdNoSimulations));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,fdNoSizeSel));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,fdNoStyleSel));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,fdNoVectorFonts));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,fdShowHelp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,fdWysiwyg));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,fdLimitSize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,fdScalableOnly));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,fdApplyButton));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,fdScreen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,fdPrinter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,fdBoth));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,prAllPages));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,prSelection));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,prPageNums));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,poPrintToFile));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,poPageNums));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,poSelection));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,poWarning));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,poHelp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,poDisablePrintToFile));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,psoDefaultMinMargins));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,psoDisableMargins));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,psoDisableOrientation));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,psoDisablePagePainting));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,psoDisablePaper));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,psoDisablePrinter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[65] ,psoMargins));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[66] ,psoMinMargins));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[67] ,psoShowHelp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[68] ,psoWarning));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[69] ,psoNoNetworkButton));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[70] ,pkDotMatrix));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[71] ,pkHPPCL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[72] ,ptEnvelope));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[73] ,ptPaper));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[74] ,pmDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[75] ,pmMillimeters));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[76] ,pmInches));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[77] ,frDown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[78] ,frFindNext));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[79] ,frHideMatchCase));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[80] ,frHideWholeWord));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[81] ,frHideUpDown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[82] ,frMatchCase));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[83] ,frDisableMatchCase));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[84] ,frDisableUpDown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[85] ,frDisableWholeWord));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[86] ,frReplace));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[87] ,frReplaceAll));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[88] ,frWholeWord));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[89] ,frShowHelp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[90] ,mtWarning));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[91] ,mtError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[92] ,mtInformation));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[93] ,mtConfirmation));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[94] ,mtCustom));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[95] ,mbYes));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[96] ,mbNo));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[97] ,mbOK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[98] ,mbCancel));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[99] ,mbAbort));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[100] ,mbRetry));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[101] ,mbIgnore));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[102] ,mbAll));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[103] ,mbNoToAll));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[104] ,mbYesToAll));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[105] ,mbHelp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[106] ,VarFromSet(mbYesNo, sizeof(mbYesNo))));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[107] ,VarFromSet(mbYesNoCancel, sizeof(mbYesNoCancel))));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[108] ,VarFromSet(mbYesAllNoAllCancel, sizeof(mbYesAllNoAllCancel))));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[109] ,VarFromSet(mbOKCancel, sizeof(mbOKCancel))));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[110] ,VarFromSet(mbAbortRetryIgnore, sizeof(mbAbortRetryIgnore))));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[111] ,VarFromSet(mbAbortIgnore, sizeof(mbAbortIgnore))));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..9] of TClass = (
TColorDialog,
TCommonDialog,
TFindDialog,
TFontDialog,
TOpenDialog,
TPageSetupDialog,
TPrintDialog,
TPrinterSetupDialog,
TReplaceDialog,
TSaveDialog
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..8] of string = (
'CreateMessageDialog'
,'MessageDlg'
,'MessageDlgPos'
,'MessageDlgPosHelp'
,'ShowMessage'
,'ShowMessageFmt'
,'ShowMessagePos'
,'InputBox'
,'InputQuery'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(string),
TypeInfo(TMsgDlgType),
TypeInfo(TMsgDlgButtons),TypeInfo(TForm)],Addr(CreateMessageDialog),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(string),
TypeInfo(TMsgDlgType),
TypeInfo(TMsgDlgButtons),
TypeInfo(Longint),TypeInfo(Integer)],Addr(MessageDlg),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T2),[
TypeInfo(string),
TypeInfo(TMsgDlgType),
TypeInfo(TMsgDlgButtons),
TypeInfo(Longint),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Integer)],Addr(MessageDlgPos),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T3),[
TypeInfo(string),
TypeInfo(TMsgDlgType),
TypeInfo(TMsgDlgButtons),
TypeInfo(Longint),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(string),TypeInfo(Integer)],Addr(MessageDlgPosHelp),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T4),[
TypeInfo(string)],Addr(ShowMessage),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T5),[
TypeInfo(string),
TypeInfoArrayOfConst],Addr(ShowMessageFmt),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T6),[
TypeInfo(string),
TypeInfo(Integer),
TypeInfo(Integer)],Addr(ShowMessagePos),cRegister);

RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T7),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(string),TypeInfo(string)],Addr(InputBox),cRegister);

RegisterProc(nil,MethodNames[8],mtProc,TypeInfo(_T8),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(string),TypeInfo(Boolean)],Addr(InputQuery),cRegister);

RegRegisterMethod(TCommonDialog,'DoClose',TypeInfo(_T10),NoParams, pointer(MinVMTOffset - 16));

RegRegisterMethod(TCommonDialog,'DoShow',TypeInfo(_T11),NoParams, pointer(MinVMTOffset - 17));

//RegRegisterMethod(TCommonDialog,'WndProc',TypeInfo(_T12),[TypeInfo(IDispatch)], pointer(48));
RegRegisterMethod(TCommonDialog,'WndProc',TypeInfo(_T12),[TypeInfo(IDispatch)],  getVMTProcAddr('TCommonDialog','WndProc',48));


//RegRegisterMethod(TCommonDialog,'MessageHook',TypeInfo(_T13),[TypeInfo(IDispatch),TypeInfo(Boolean)], pointer(52));
RegRegisterMethod(TCommonDialog,'MessageHook',TypeInfo(_T13),[TypeInfo(IDispatch),TypeInfo(Boolean)],  getVMTProcAddr('TCommonDialog','MessageHook',52));


//RegRegisterMethod(TCommonDialog,'TaskModalDialog',TypeInfo(_T14),[TypeInfoPointer,TypeInfoUntyped,TypeInfo(Bool)], pointer(56));
RegRegisterMethod(TCommonDialog,'TaskModalDialog',TypeInfo(_T14),[TypeInfoPointer,TypeInfoUntyped,TypeInfo(Bool)],  getVMTProcAddr('TCommonDialog','TaskModalDialog',56));


//RegRegisterMethod(TCommonDialog,'Execute',TypeInfo(_T15),[TypeInfo(Boolean)], pointer(60));
RegRegisterMethod(TCommonDialog,'Execute',TypeInfo(_T15),[TypeInfo(Boolean)],  getVMTProcAddr('TCommonDialog','Execute',60));


RegRegisterMethod(TFindDialog,'Find',TypeInfo(_T16),NoParams, pointer(MinVMTOffset - 18));

RegRegisterMethod(TFindDialog,'Replace',TypeInfo(_T17),NoParams, pointer(MinVMTOffset - 19));

RegRegisterMethod(TFindDialog,'CloseDialog',TypeInfo(_T18),NoParams,Addr(TFindDialog.CloseDialog));

RegRegisterMethod(TFontDialog,'Apply',TypeInfo(_T19),[
TypeInfo(HWND)], pointer(MinVMTOffset - 18));

RegRegisterMethod(TOpenDialog,'DoCanClose',TypeInfo(_T20),[TypeInfo(Boolean)], pointer(MinVMTOffset - 18));

RegRegisterMethod(TOpenDialog,'DoSelectionChange',TypeInfo(_T21),NoParams, pointer(MinVMTOffset - 19));

RegRegisterMethod(TOpenDialog,'DoFolderChange',TypeInfo(_T22),NoParams, pointer(MinVMTOffset - 20));

RegRegisterMethod(TOpenDialog,'DoTypeChange',TypeInfo(_T23),NoParams, pointer(MinVMTOffset - 21));

//RegRegisterMethod(TOpenDialog,'GetStaticRect',TypeInfo(_T25),[TypeInfo(IDispatch)], pointer(68));
RegRegisterMethod(TOpenDialog,'GetStaticRect',TypeInfo(_T25),[TypeInfo(IDispatch)],  getVMTProcAddr('TOpenDialog','GetStaticRect',68));


RegRegisterMethod(TPageSetupDialog,'GetDefaults',TypeInfo(_T26),[TypeInfo(Boolean)],Addr(TPageSetupDialog.GetDefaults));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegRegisterMethod(TOpenDialog,'DoIncludeItem',TypeInfo(_T24),[
TypeInfo(TOFNotifyEx),
TypeInfo(Boolean)], pointer(MinVMTOffset - 22))}

RegisterEvent(TypeInfo(TFDApplyEvent),[
TypeInfo(TObject),
TypeInfo(HWND)]);

{RegisterEvent(TypeInfo(TIncludeItemEvent),[
TypeInfo(TOFNotifyEx),
TypeInfo(Boolean)]);}

RegisterEvent(TypeInfo(TPageSetupBeforePaintEvent),[
TypeInfo(TObject),
TypeInfo(SmallInt),
TypeInfo(TPrinterOrientation),
TypeInfo(TPageType),
TypeInfo(Boolean)]);

{RegisterEvent(TypeInfo(TPaintPageEvent),[
TypeInfo(TObject),
TypeInfo(TCanvas),
TypeInfo(IDispatch),
TypeInfo(Boolean)]);}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
