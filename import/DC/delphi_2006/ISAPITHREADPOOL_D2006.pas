{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit ISAPITHREADPOOL_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  Types,
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  ISAPI2,
  Windows,
  SyncObjs,
  ISAPIThreadPool;
function ConvertTEXTENSION_CONTROL_BLOCKToVariant(var R : TEXTENSION_CONTROL_BLOCK) : OleVariant;
function ConvertVariantToTEXTENSION_CONTROL_BLOCK(const V : OleVariant) : TEXTENSION_CONTROL_BLOCK;
function ConvertTHSE_VERSION_INFOToVariant(var R : THSE_VERSION_INFO) : OleVariant;
function ConvertVariantToTHSE_VERSION_INFO(const V : OleVariant) : THSE_VERSION_INFO;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __THSE_VERSION_INFO__Wrapper = class(TDCRecordWrapper)
private
fR : THSE_VERSION_INFO;
public
function GetRecordPtr : pointer; override;
published
procedure setdwExtensionVersion(const val : DWORD);
function getdwExtensionVersion : DWORD;
property dwExtensionVersion : DWORD read getdwExtensionVersion write setdwExtensionVersion;
end;
type __TEXTENSION_CONTROL_BLOCK__Wrapper = class(TDCRecordWrapper)
private
fR : TEXTENSION_CONTROL_BLOCK;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setdwVersion(const val : DWORD);
function getdwVersion : DWORD;
property dwVersion : DWORD read getdwVersion write setdwVersion;
procedure setConnID(const val : HCONN);
function getConnID : HCONN;
property ConnID : HCONN read getConnID write setConnID;
procedure setdwHttpStatusCode(const val : DWORD);
function getdwHttpStatusCode : DWORD;
property dwHttpStatusCode : DWORD read getdwHttpStatusCode write setdwHttpStatusCode;
procedure setcbTotalBytes(const val : DWORD);
function getcbTotalBytes : DWORD;
property cbTotalBytes : DWORD read getcbTotalBytes write setcbTotalBytes;
procedure setcbAvailable(const val : DWORD);
function getcbAvailable : DWORD;
property cbAvailable : DWORD read getcbAvailable write setcbAvailable;
end;
type
_T0 = function (const p0 : IDispatch): BOOL of object;

_T1 = function (const p0 : IDispatch): DWORD of object;

_T2 = function (p0 : DWORD): BOOL of object;

_T3 = procedure  of object;

_T4 = _T3;

_T5 = procedure (p0 : Boolean) of object;

function __THSE_VERSION_INFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __THSE_VERSION_INFO__Wrapper.setdwExtensionVersion(const val : DWORD);
begin
THSE_VERSION_INFO(GetRecordPtr^).dwExtensionVersion := val;
end;
function __THSE_VERSION_INFO__Wrapper.getdwExtensionVersion : DWORD;
begin
result := THSE_VERSION_INFO(GetRecordPtr^).dwExtensionVersion;
end;
function __TEXTENSION_CONTROL_BLOCK__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TEXTENSION_CONTROL_BLOCK__Wrapper.setcbSize(const val : DWORD);
begin
TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).cbSize := val;
end;
function __TEXTENSION_CONTROL_BLOCK__Wrapper.getcbSize : DWORD;
begin
result := TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).cbSize;
end;
procedure __TEXTENSION_CONTROL_BLOCK__Wrapper.setdwVersion(const val : DWORD);
begin
TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).dwVersion := val;
end;
function __TEXTENSION_CONTROL_BLOCK__Wrapper.getdwVersion : DWORD;
begin
result := TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).dwVersion;
end;
procedure __TEXTENSION_CONTROL_BLOCK__Wrapper.setConnID(const val : HCONN);
begin
TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).ConnID := val;
end;
function __TEXTENSION_CONTROL_BLOCK__Wrapper.getConnID : HCONN;
begin
result := TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).ConnID;
end;
procedure __TEXTENSION_CONTROL_BLOCK__Wrapper.setdwHttpStatusCode(const val : DWORD);
begin
TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).dwHttpStatusCode := val;
end;
function __TEXTENSION_CONTROL_BLOCK__Wrapper.getdwHttpStatusCode : DWORD;
begin
result := TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).dwHttpStatusCode;
end;
procedure __TEXTENSION_CONTROL_BLOCK__Wrapper.setcbTotalBytes(const val : DWORD);
begin
TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).cbTotalBytes := val;
end;
function __TEXTENSION_CONTROL_BLOCK__Wrapper.getcbTotalBytes : DWORD;
begin
result := TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).cbTotalBytes;
end;
procedure __TEXTENSION_CONTROL_BLOCK__Wrapper.setcbAvailable(const val : DWORD);
begin
TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).cbAvailable := val;
end;
function __TEXTENSION_CONTROL_BLOCK__Wrapper.getcbAvailable : DWORD;
begin
result := TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).cbAvailable;
end;
function ____GetExtensionVersion__Wrapper(const p0 : IDispatch): BOOL;
var
__p0 : ^THSE_VERSION_INFO;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := GetExtensionVersion(__p0^);
end;

function ____HttpExtensionProc__Wrapper(const p0 : IDispatch): DWORD;
var
__p0 : ^TEXTENSION_CONTROL_BLOCK;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := HttpExtensionProc(__p0^);
end;


type __TEXTENSION_CONTROL_BLOCK__Wrapper__ = class(__TEXTENSION_CONTROL_BLOCK__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TEXTENSION_CONTROL_BLOCK__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTEXTENSION_CONTROL_BLOCKToVariant(var R : TEXTENSION_CONTROL_BLOCK) : OleVariant;
var
__rw : __TEXTENSION_CONTROL_BLOCK__Wrapper__;
begin
__rw := __TEXTENSION_CONTROL_BLOCK__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTEXTENSION_CONTROL_BLOCK(const V : OleVariant) : TEXTENSION_CONTROL_BLOCK;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TEXTENSION_CONTROL_BLOCK((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __THSE_VERSION_INFO__Wrapper__ = class(__THSE_VERSION_INFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __THSE_VERSION_INFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTHSE_VERSION_INFOToVariant(var R : THSE_VERSION_INFO) : OleVariant;
var
__rw : __THSE_VERSION_INFO__Wrapper__;
begin
__rw := __THSE_VERSION_INFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTHSE_VERSION_INFO(const V : OleVariant) : THSE_VERSION_INFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := THSE_VERSION_INFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTISAPIThreadPool__InitCOM(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TISAPIThreadPool(Instance).InitCOM;
end;

procedure __DC__SetTISAPIThreadPool__InitCOM(Instance : TObject; Params : PVariantArgList);
begin
TISAPIThreadPool(Instance).InitCOM:=OleVariant(Params^[0]);
end;

function __DC__GetTISAPIThreadPool__Min(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TISAPIThreadPool(Instance).Min;
end;

procedure __DC__SetTISAPIThreadPool__Min(Instance : TObject; Params : PVariantArgList);
begin
TISAPIThreadPool(Instance).Min:=OleVariant(Params^[0]);
end;

function __DC__GetTISAPIThreadPool__Max(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TISAPIThreadPool(Instance).Max;
end;

procedure __DC__SetTISAPIThreadPool__Max(Instance : TObject; Params : PVariantArgList);
begin
TISAPIThreadPool(Instance).Max:=OleVariant(Params^[0]);
end;

function __DC__GetTISAPIThreadPool__ThreadCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TISAPIThreadPool(Instance).ThreadCount;
end;

procedure __RegisterProps;
begin
RegisterProperty(TISAPIThreadPool,'InitCOM',__DC__GetTISAPIThreadPool__InitCOM,__DC__SetTISAPIThreadPool__InitCOM);
RegisterProperty(TISAPIThreadPool,'Min',__DC__GetTISAPIThreadPool__Min,__DC__SetTISAPIThreadPool__Min);
RegisterProperty(TISAPIThreadPool,'Max',__DC__GetTISAPIThreadPool__Max,__DC__SetTISAPIThreadPool__Max);
RegisterProperty(TISAPIThreadPool,'ThreadCount',__DC__GetTISAPIThreadPool__ThreadCount,nil);
end;

function __DC__GetISAPIThreadPool__NumberOfThreads(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := ISAPIThreadPool.NumberOfThreads;
end;

procedure __DC__SetISAPIThreadPool__NumberOfThreads(Instance : TObject; Params : PVariantArgList);
begin
ISAPIThreadPool.NumberOfThreads:=OleVariant(Params^[0]);
end;

function __DC__GetISAPIThreadPool__ThreadPool(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(ISAPIThreadPool.ThreadPool);
end;

procedure __DC__SetISAPIThreadPool__ThreadPool(Instance : TObject; Params : PVariantArgList);
begin
TObject(ISAPIThreadPool.ThreadPool):=(VarToObject(OleVariant(Params^[0])));
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('NumberOfThreads',__DC__GetISAPIThreadPool__NumberOfThreads,__DC__SetISAPIThreadPool__NumberOfThreads));
__RegisteredVars.Add(RegisterVar('ThreadPool',__DC__GetISAPIThreadPool__ThreadPool,__DC__SetISAPIThreadPool__ThreadPool));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..0] of TClass = (
TISAPIThreadPool
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..2] of string = (
'GetExtensionVersion'
,'HttpExtensionProc'
,'TerminateExtension'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____GetExtensionVersion__Wrapper),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(IDispatch),TypeInfo(DWORD)],Addr(____HttpExtensionProc__Wrapper),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T2),[
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(TerminateExtension),cStdCall);

//RegRegisterMethod(TISAPIThreadPool,'Initialize',TypeInfo(_T3),NoParams, pointer(0));
RegRegisterMethod(TISAPIThreadPool,'Initialize',TypeInfo(_T3),NoParams,  getVMTProcAddr('TISAPIThreadPool','Initialize',0));


//RegRegisterMethod(TISAPIThreadPool,'ShutDown',TypeInfo(_T4),NoParams, pointer(4));
RegRegisterMethod(TISAPIThreadPool,'ShutDown',TypeInfo(_T4),NoParams,  getVMTProcAddr('TISAPIThreadPool','ShutDown',4));


RegisterProc(TISAPIThreadPool,'Create',mtConstructor,TypeInfo(_T5),[
TypeInfo(Boolean)], pointer(8),cRegister);

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
