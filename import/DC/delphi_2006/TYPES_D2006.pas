{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit TYPES_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Types;
function ConvertSIZEToVariant(var R : SIZE) : OleVariant;
function ConvertVariantToSIZE(const V : OleVariant) : SIZE;
function ConverttagPOINTToVariant(var R : tagPOINT) : OleVariant;
function ConvertVariantTotagPOINT(const V : OleVariant) : tagPOINT;
function ConverttagSIZEToVariant(var R : tagSIZE) : OleVariant;
function ConvertVariantTotagSIZE(const V : OleVariant) : tagSIZE;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
function ConvertTSizeToVariant(var R : TSize) : OleVariant;
function ConvertVariantToTSize(const V : OleVariant) : TSize;
function ConvertTSmallPointToVariant(var R : TSmallPoint) : OleVariant;
function ConvertVariantToTSmallPoint(const V : OleVariant) : TSmallPoint;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __SIZE__Wrapper = class(TDCRecordWrapper)
private
fR : SIZE;
public
function GetRecordPtr : pointer; override;
published
procedure setcx(const val : Longint);
function getcx : Longint;
property cx : Longint read getcx write setcx;
procedure setcy(const val : Longint);
function getcy : Longint;
property cy : Longint read getcy write setcy;
end;
type __tagPOINT__Wrapper = class(TDCRecordWrapper)
private
fR : tagPOINT;
public
function GetRecordPtr : pointer; override;
published
procedure setX(const val : Longint);
function getX : Longint;
property X : Longint read getX write setX;
procedure setY(const val : Longint);
function getY : Longint;
property Y : Longint read getY write setY;
end;
type __tagSIZE__Wrapper = class(TDCRecordWrapper)
private
fR : tagSIZE;
public
function GetRecordPtr : pointer; override;
published
procedure setcx(const val : Longint);
function getcx : Longint;
property cx : Longint read getcx write setcx;
procedure setcy(const val : Longint);
function getcy : Longint;
property cy : Longint read getcy write setcy;
end;
type __TPoint__Wrapper = class(TDCRecordWrapper)
private
fR : TPoint;
public
function GetRecordPtr : pointer; override;
published
procedure setX(const val : Longint);
function getX : Longint;
property X : Longint read getX write setX;
procedure setY(const val : Longint);
function getY : Longint;
property Y : Longint read getY write setY;
end;
type __TRect__Wrapper = class(TDCRecordWrapper)
private
fR : TRect;
public
function GetRecordPtr : pointer; override;
published
procedure setLeft(const val : Longint);
function getLeft : Longint;
property Left : Longint read getLeft write setLeft;
procedure setTop(const val : Longint);
function getTop : Longint;
property Top : Longint read getTop write setTop;
procedure setRight(const val : Longint);
function getRight : Longint;
property Right : Longint read getRight write setRight;
procedure setBottom(const val : Longint);
function getBottom : Longint;
property Bottom : Longint read getBottom write setBottom;
end;
type __TSize__Wrapper = class(TDCRecordWrapper)
private
fR : TSize;
public
function GetRecordPtr : pointer; override;
published
procedure setcx(const val : Longint);
function getcx : Longint;
property cx : Longint read getcx write setcx;
procedure setcy(const val : Longint);
function getcy : Longint;
property cy : Longint read getcy write setcy;
end;
type __TSmallPoint__Wrapper = class(TDCRecordWrapper)
private
fR : TSmallPoint;
public
function GetRecordPtr : pointer; override;
published
procedure setX(const val : SmallInt);
function getX : SmallInt;
property X : SmallInt read getX write setX;
procedure setY(const val : SmallInt);
function getY : SmallInt;
property Y : SmallInt read getY write setY;
end;
type
_T0 = function (const p0 : IDispatch;
const p1 : IDispatch): Boolean of object;

_T1 = function (p0 : Integer;
p1 : Integer;
p2 : Integer;
p3 : Integer): IDispatch of object;

_T2 = _T1;

_T3 = function (p0 : Integer;
p1 : Integer): IDispatch of object;

_T4 = _T3;

_T5 = _T0;

_T6 = function (const p0 : IDispatch;
const p1 : IDispatch;
const p2 : IDispatch): Boolean of object;

_T7 = _T6;

_T8 = function (const p0 : IDispatch): Boolean of object;

_T9 = function (const p0 : IDispatch;
p1 : Integer;
p2 : Integer): Boolean of object;

_T10 = function (const p0 : IDispatch): IDispatch of object;

function __SIZE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __SIZE__Wrapper.setcx(const val : Longint);
begin
SIZE(GetRecordPtr^).cx := val;
end;
function __SIZE__Wrapper.getcx : Longint;
begin
result := SIZE(GetRecordPtr^).cx;
end;
procedure __SIZE__Wrapper.setcy(const val : Longint);
begin
SIZE(GetRecordPtr^).cy := val;
end;
function __SIZE__Wrapper.getcy : Longint;
begin
result := SIZE(GetRecordPtr^).cy;
end;
function __tagPOINT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagPOINT__Wrapper.setX(const val : Longint);
begin
tagPOINT(GetRecordPtr^).X := val;
end;
function __tagPOINT__Wrapper.getX : Longint;
begin
result := tagPOINT(GetRecordPtr^).X;
end;
procedure __tagPOINT__Wrapper.setY(const val : Longint);
begin
tagPOINT(GetRecordPtr^).Y := val;
end;
function __tagPOINT__Wrapper.getY : Longint;
begin
result := tagPOINT(GetRecordPtr^).Y;
end;
function __tagSIZE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagSIZE__Wrapper.setcx(const val : Longint);
begin
tagSIZE(GetRecordPtr^).cx := val;
end;
function __tagSIZE__Wrapper.getcx : Longint;
begin
result := tagSIZE(GetRecordPtr^).cx;
end;
procedure __tagSIZE__Wrapper.setcy(const val : Longint);
begin
tagSIZE(GetRecordPtr^).cy := val;
end;
function __tagSIZE__Wrapper.getcy : Longint;
begin
result := tagSIZE(GetRecordPtr^).cy;
end;
function __TPoint__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPoint__Wrapper.setX(const val : Longint);
begin
TPoint(GetRecordPtr^).X := val;
end;
function __TPoint__Wrapper.getX : Longint;
begin
result := TPoint(GetRecordPtr^).X;
end;
procedure __TPoint__Wrapper.setY(const val : Longint);
begin
TPoint(GetRecordPtr^).Y := val;
end;
function __TPoint__Wrapper.getY : Longint;
begin
result := TPoint(GetRecordPtr^).Y;
end;
function __TRect__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRect__Wrapper.setLeft(const val : Longint);
begin
TRect(GetRecordPtr^).Left := val;
end;
function __TRect__Wrapper.getLeft : Longint;
begin
result := TRect(GetRecordPtr^).Left;
end;
procedure __TRect__Wrapper.setTop(const val : Longint);
begin
TRect(GetRecordPtr^).Top := val;
end;
function __TRect__Wrapper.getTop : Longint;
begin
result := TRect(GetRecordPtr^).Top;
end;
procedure __TRect__Wrapper.setRight(const val : Longint);
begin
TRect(GetRecordPtr^).Right := val;
end;
function __TRect__Wrapper.getRight : Longint;
begin
result := TRect(GetRecordPtr^).Right;
end;
procedure __TRect__Wrapper.setBottom(const val : Longint);
begin
TRect(GetRecordPtr^).Bottom := val;
end;
function __TRect__Wrapper.getBottom : Longint;
begin
result := TRect(GetRecordPtr^).Bottom;
end;
function __TSize__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSize__Wrapper.setcx(const val : Longint);
begin
TSize(GetRecordPtr^).cx := val;
end;
function __TSize__Wrapper.getcx : Longint;
begin
result := TSize(GetRecordPtr^).cx;
end;
procedure __TSize__Wrapper.setcy(const val : Longint);
begin
TSize(GetRecordPtr^).cy := val;
end;
function __TSize__Wrapper.getcy : Longint;
begin
result := TSize(GetRecordPtr^).cy;
end;
function __TSmallPoint__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSmallPoint__Wrapper.setX(const val : SmallInt);
begin
TSmallPoint(GetRecordPtr^).X := val;
end;
function __TSmallPoint__Wrapper.getX : SmallInt;
begin
result := TSmallPoint(GetRecordPtr^).X;
end;
procedure __TSmallPoint__Wrapper.setY(const val : SmallInt);
begin
TSmallPoint(GetRecordPtr^).Y := val;
end;
function __TSmallPoint__Wrapper.getY : SmallInt;
begin
result := TSmallPoint(GetRecordPtr^).Y;
end;
function _SIZE_ : IDispatch;
begin
  result := __SIZE__Wrapper.Create;
end;
function _tagPOINT_ : IDispatch;
begin
  result := __tagPOINT__Wrapper.Create;
end;
function _tagSIZE_ : IDispatch;
begin
  result := __tagSIZE__Wrapper.Create;
end;
function _TPoint_ : IDispatch;
begin
  result := __TPoint__Wrapper.Create;
end;
function _TRect_ : IDispatch;
begin
  result := __TRect__Wrapper.Create;
end;
function _TSize_ : IDispatch;
begin
  result := __TSize__Wrapper.Create;
end;
function _TSmallPoint_ : IDispatch;
begin
  result := __TSmallPoint__Wrapper.Create;
end;
function ____EqualRect__Wrapper(const p0 : IDispatch;
const p1 : IDispatch): Boolean;
var
__p0 : ^TRect;
__i0 : IDispatch;
__p1 : ^TRect;
__i1 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := EqualRect(__p0^,__p1^);
end;

function ____Rect__Wrapper(p0 : Integer;
p1 : Integer;
p2 : Integer;
p3 : Integer): IDispatch;
var
__result : TRect;
__wrapper : __TRect__Wrapper;
begin
__result := Rect(p0,p1,p2,p3);
__wrapper := __TRect__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

function ____Bounds__Wrapper(p0 : Integer;
p1 : Integer;
p2 : Integer;
p3 : Integer): IDispatch;
var
__result : TRect;
__wrapper : __TRect__Wrapper;
begin
__result := Bounds(p0,p1,p2,p3);
__wrapper := __TRect__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

function ____Point__Wrapper(p0 : Integer;
p1 : Integer): IDispatch;
var
__result : TPoint;
__wrapper : __TPoint__Wrapper;
begin
__result := Point(p0,p1);
__wrapper := __TPoint__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

function ____SmallPoint__Wrapper(p0 : Integer;
p1 : Integer): IDispatch;
var
__result : TSmallPoint;
__wrapper : __TSmallPoint__Wrapper;
begin
__result := SmallPoint(p0,p1);
__wrapper := __TSmallPoint__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

function ____PtInRect__Wrapper(const p0 : IDispatch;
const p1 : IDispatch): Boolean;
var
__p0 : ^TRect;
__i0 : IDispatch;
__p1 : ^TPoint;
__i1 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := PtInRect(__p0^,__p1^);
end;

function ____IntersectRect__Wrapper(const p0 : IDispatch;
const p1 : IDispatch;
const p2 : IDispatch): Boolean;
var
__p0 : ^TRect;
__i0 : IDispatch;
__p1 : ^TRect;
__i1 : IDispatch;
__p2 : ^TRect;
__i2 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := IntersectRect(__p0^,__p1^,__p2^);
end;

function ____UnionRect__Wrapper(const p0 : IDispatch;
const p1 : IDispatch;
const p2 : IDispatch): Boolean;
var
__p0 : ^TRect;
__i0 : IDispatch;
__p1 : ^TRect;
__i1 : IDispatch;
__p2 : ^TRect;
__i2 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := UnionRect(__p0^,__p1^,__p2^);
end;

function ____IsRectEmpty__Wrapper(const p0 : IDispatch): Boolean;
var
__p0 : ^TRect;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := IsRectEmpty(__p0^);
end;

function ____OffsetRect__Wrapper(const p0 : IDispatch;
p1 : Integer;
p2 : Integer): Boolean;
var
__p0 : ^TRect;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := OffsetRect(__p0^,p1,p2);
end;

function ____CenterPoint__Wrapper(const p0 : IDispatch): IDispatch;
var
__result : TPoint;
__wrapper : __TPoint__Wrapper;
__p0 : ^TRect;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__result := CenterPoint(__p0^);
__wrapper := __TPoint__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;


type __SIZE__Wrapper__ = class(__SIZE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SIZE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSIZEToVariant(var R : SIZE) : OleVariant;
var
__rw : __SIZE__Wrapper__;
begin
__rw := __SIZE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSIZE(const V : OleVariant) : SIZE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SIZE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagPOINT__Wrapper__ = class(__tagPOINT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagPOINT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagPOINTToVariant(var R : tagPOINT) : OleVariant;
var
__rw : __tagPOINT__Wrapper__;
begin
__rw := __tagPOINT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagPOINT(const V : OleVariant) : tagPOINT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagPOINT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagSIZE__Wrapper__ = class(__tagSIZE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagSIZE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagSIZEToVariant(var R : tagSIZE) : OleVariant;
var
__rw : __tagSIZE__Wrapper__;
begin
__rw := __tagSIZE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagSIZE(const V : OleVariant) : tagSIZE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagSIZE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPoint__Wrapper__ = class(__TPoint__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPoint__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
var
__rw : __TPoint__Wrapper__;
begin
__rw := __TPoint__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPoint((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRect__Wrapper__ = class(__TRect__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRect__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
var
__rw : __TRect__Wrapper__;
begin
__rw := __TRect__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRect((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSize__Wrapper__ = class(__TSize__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSize__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSizeToVariant(var R : TSize) : OleVariant;
var
__rw : __TSize__Wrapper__;
begin
__rw := __TSize__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSize(const V : OleVariant) : TSize;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSize((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSmallPoint__Wrapper__ = class(__TSmallPoint__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSmallPoint__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSmallPointToVariant(var R : TSmallPoint) : OleVariant;
var
__rw : __TSmallPoint__Wrapper__;
begin
__rw := __TSmallPoint__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSmallPoint(const V : OleVariant) : TSmallPoint;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSmallPoint((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..3] of string = (
'RT_RCDATA'
,'LessThanValue'
,'EqualsValue'
,'GreaterThanValue'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,Integer(RT_RCDATA)));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,LessThanValue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,EqualsValue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,GreaterThanValue));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..17] of string = (
'SIZE'
,'tagPOINT'
,'tagSIZE'
,'TPoint'
,'TRect'
,'TSize'
,'TSmallPoint'
,'EqualRect'
,'Rect'
,'Bounds'
,'Point'
,'SmallPoint'
,'PtInRect'
,'IntersectRect'
,'UnionRect'
,'IsRectEmpty'
,'OffsetRect'
,'CenterPoint'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_SIZE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_tagPOINT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_tagSIZE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(_TPoint_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(_TRect_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[5],Addr(_TSize_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[6],Addr(_TSmallPoint_)));
RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T0),[
TypeInfo(IDispatch),
TypeInfo(IDispatch),TypeInfo(Boolean)],Addr(____EqualRect__Wrapper),cRegister);

RegisterProc(nil,MethodNames[8],mtProc,TypeInfo(_T1),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(IDispatch)],Addr(____Rect__Wrapper),cRegister);

RegisterProc(nil,MethodNames[9],mtProc,TypeInfo(_T2),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(IDispatch)],Addr(____Bounds__Wrapper),cRegister);

RegisterProc(nil,MethodNames[10],mtProc,TypeInfo(_T3),[
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(IDispatch)],Addr(____Point__Wrapper),cRegister);

RegisterProc(nil,MethodNames[11],mtProc,TypeInfo(_T4),[
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(IDispatch)],Addr(____SmallPoint__Wrapper),cRegister);

RegisterProc(nil,MethodNames[12],mtProc,TypeInfo(_T5),[
TypeInfo(IDispatch),
TypeInfo(IDispatch),TypeInfo(Boolean)],Addr(____PtInRect__Wrapper),cRegister);

RegisterProc(nil,MethodNames[13],mtProc,TypeInfo(_T6),[
TypeInfo(IDispatch),
TypeInfo(IDispatch),
TypeInfo(IDispatch),TypeInfo(Boolean)],Addr(____IntersectRect__Wrapper),cRegister);

RegisterProc(nil,MethodNames[14],mtProc,TypeInfo(_T7),[
TypeInfo(IDispatch),
TypeInfo(IDispatch),
TypeInfo(IDispatch),TypeInfo(Boolean)],Addr(____UnionRect__Wrapper),cRegister);

RegisterProc(nil,MethodNames[15],mtProc,TypeInfo(_T8),[
TypeInfo(IDispatch),TypeInfo(Boolean)],Addr(____IsRectEmpty__Wrapper),cRegister);

RegisterProc(nil,MethodNames[16],mtProc,TypeInfo(_T9),[
TypeInfo(IDispatch),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Boolean)],Addr(____OffsetRect__Wrapper),cRegister);

RegisterProc(nil,MethodNames[17],mtProc,TypeInfo(_T10),[
TypeInfo(IDispatch),TypeInfo(IDispatch)],Addr(____CenterPoint__Wrapper),cRegister);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
