{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit DBCGRIDS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Windows,
  Messages,
  Classes,
  Controls,
  Forms,
  Graphics,
  Menus,
  DB,
  DBCGrids;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (p0 : Integer) of object;

_T1 = procedure (p0 : TDBCtrlGridKey) of object;

_T2 = procedure (p0 : TDBCtrlGrid) of object;

_T3 = _T2;

function __DC__GetTDBCtrlGrid__Canvas(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDBCtrlGrid(Instance).Canvas);
end;

function __DC__GetTDBCtrlGrid__EditMode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDBCtrlGrid(Instance).EditMode;
end;

procedure __DC__SetTDBCtrlGrid__EditMode(Instance : TObject; Params : PVariantArgList);
begin
TDBCtrlGrid(Instance).EditMode:=OleVariant(Params^[0]);
end;

function __DC__GetTDBCtrlGrid__PanelCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDBCtrlGrid(Instance).PanelCount;
end;

function __DC__GetTDBCtrlGrid__PanelIndex(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDBCtrlGrid(Instance).PanelIndex;
end;

procedure __DC__SetTDBCtrlGrid__PanelIndex(Instance : TObject; Params : PVariantArgList);
begin
TDBCtrlGrid(Instance).PanelIndex:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TDBCtrlGrid,'Canvas',__DC__GetTDBCtrlGrid__Canvas,nil);
RegisterProperty(TDBCtrlGrid,'EditMode',__DC__GetTDBCtrlGrid__EditMode,__DC__SetTDBCtrlGrid__EditMode);
RegisterProperty(TDBCtrlGrid,'PanelCount',__DC__GetTDBCtrlGrid__PanelCount,nil);
RegisterProperty(TDBCtrlGrid,'PanelIndex',__DC__GetTDBCtrlGrid__PanelIndex,__DC__SetTDBCtrlGrid__PanelIndex);
end;

const __ConstNames0 : array[0..21] of string = (
'goVertical'
,'goHorizontal'
,'gbNone'
,'gbRaised'
,'gkNull'
,'gkEditMode'
,'gkPriorTab'
,'gkNextTab'
,'gkLeft'
,'gkRight'
,'gkUp'
,'gkDown'
,'gkScrollUp'
,'gkScrollDown'
,'gkPageUp'
,'gkPageDown'
,'gkHome'
,'gkEnd'
,'gkInsert'
,'gkAppend'
,'gkDelete'
,'gkCancel'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,goVertical));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,goHorizontal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,gbNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,gbRaised));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,gkNull));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,gkEditMode));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,gkPriorTab));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,gkNextTab));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,gkLeft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,gkRight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,gkUp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,gkDown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,gkScrollUp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,gkScrollDown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,gkPageUp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,gkPageDown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,gkHome));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,gkEnd));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,gkInsert));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,gkAppend));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,gkDelete));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,gkCancel));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..2] of TClass = (
TDBCtrlGrid,
TDBCtrlGridLink,
TDBCtrlPanel
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TDBCtrlGrid,'PaintPanel',TypeInfo(_T0),[TypeInfo(Integer)], pointer(216));
RegRegisterMethod(TDBCtrlGrid,'PaintPanel',TypeInfo(_T0),[TypeInfo(Integer)],  getVMTProcAddr('TDBCtrlGrid','PaintPanel',216));


RegRegisterMethod(TDBCtrlGrid,'DoKey',TypeInfo(_T1),[
TypeInfo(TDBCtrlGridKey)],Addr(TDBCtrlGrid.DoKey));

RegisterProc(TDBCtrlGridLink,'Create',mtConstructor,TypeInfo(_T2),[
TypeInfo(TDBCtrlGrid)],Addr(TDBCtrlGridLink.Create),cRegister);

RegisterProc(TDBCtrlPanel,'CreateLinked',mtConstructor,TypeInfo(_T3),[
TypeInfo(TDBCtrlGrid)],Addr(TDBCtrlPanel.CreateLinked),cRegister);

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
RegisterEvent(TypeInfo(TPaintPanelEvent),[
TypeInfo(TDBCtrlGrid),
TypeInfo(Integer)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
