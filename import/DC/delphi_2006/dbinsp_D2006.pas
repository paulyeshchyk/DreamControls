{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit dbinsp_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  sysutils,
  Windows,
  messages,
  Classes,
  Controls,
  Forms,
  typinfo,
  dcdsgnstuff,
  dcpedit,
  stdctrls,
  db,
  dbctrls,
  oinspect,
  dcedit,
  dcdbctl,
  dbconsts,
  dialogs,
  glyphed,
  maskpr,
  dcstrled,
  dcgen,
  graphics,
  dcsystem,
  dcdreamlib,
  dcconsts,
  dbtables,
  Variants,
  dbinsp;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (p0 : TField) of object;

function __DC__GetTCustomDSInspector__ConfirmDelete(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomDSInspector(Instance).ConfirmDelete;
end;

procedure __DC__SetTCustomDSInspector__ConfirmDelete(Instance : TObject; Params : PVariantArgList);
begin
TCustomDSInspector(Instance).ConfirmDelete:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomDSInspector__DataSource(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomDSInspector(Instance).DataSource);
end;

procedure __DC__SetTCustomDSInspector__DataSource(Instance : TObject; Params : PVariantArgList);
begin
TCustomDSInspector(Instance).DataSource:=TDataSource(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomDSInspector__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomDSInspector(Instance).Items);
end;

procedure __DC__SetTCustomDSInspector__Items(Instance : TObject; Params : PVariantArgList);
begin
TCustomDSInspector(Instance).Items:=TDCInspectorItems(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomDSInspector__UseFieldNames(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomDSInspector(Instance).UseFieldNames;
end;

procedure __DC__SetTCustomDSInspector__UseFieldNames(Instance : TObject; Params : PVariantArgList);
begin
TCustomDSInspector(Instance).UseFieldNames:=OleVariant(Params^[0]);
end;

function __DC__GetTDCInspectorItems__Inspector(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDCInspectorItems(Instance).Inspector);
end;

function __DC__GetTDCInspectorItems__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDCInspectorItems(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __DC__SetTDCInspectorItems__Items(Instance : TObject; Params : PVariantArgList);
begin
TDCInspectorItems(Instance).Items[OleVariant(Params^[1])]:=TInspectorItem(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTFieldEditor__Field(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TFieldEditor(Instance).Field);
end;

function __DC__GetTInspectorItem__Field(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TInspectorItem(Instance).Field);
end;

procedure __DC__SetTInspectorItem__Field(Instance : TObject; Params : PVariantArgList);
begin
TInspectorItem(Instance).Field:=TField(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTInspectorItem__Inspector(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TInspectorItem(Instance).Inspector);
end;

procedure __RegisterProps;
begin
RegisterProperty(TCustomDSInspector,'ConfirmDelete',__DC__GetTCustomDSInspector__ConfirmDelete,__DC__SetTCustomDSInspector__ConfirmDelete);
RegisterProperty(TCustomDSInspector,'DataSource',__DC__GetTCustomDSInspector__DataSource,__DC__SetTCustomDSInspector__DataSource);
RegisterProperty(TCustomDSInspector,'Items',__DC__GetTCustomDSInspector__Items,__DC__SetTCustomDSInspector__Items);
RegisterProperty(TCustomDSInspector,'UseFieldNames',__DC__GetTCustomDSInspector__UseFieldNames,__DC__SetTCustomDSInspector__UseFieldNames);
RegisterProperty(TDCInspectorItems,'Inspector',__DC__GetTDCInspectorItems__Inspector,nil);
RegisterIndexedProperty(TDCInspectorItems,'Items',1,True,__DC__GetTDCInspectorItems__Items,__DC__SetTDCInspectorItems__Items);
RegisterProperty(TFieldEditor,'Field',__DC__GetTFieldEditor__Field,nil);
RegisterProperty(TInspectorItem,'Field',__DC__GetTInspectorItem__Field,__DC__SetTInspectorItem__Field);
RegisterProperty(TInspectorItem,'Inspector',__DC__GetTInspectorItem__Inspector,nil);
end;

const __ConstNames0 : array[0..2] of string = (
'ibsAuto'
,'ibsEllipsis'
,'ibsNone'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,ibsAuto));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,ibsEllipsis));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,ibsNone));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..5] of TClass = (
TCustomDSInspector,
TDataSetInspector,
TDataSetInspectorEdit,
TDCInspectorItems,
TFieldEditor,
TInspectorItem
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TInspectorItem,'SetField',TypeInfo(_T0),[TypeInfo(TField)], pointer(36));
RegRegisterMethod(TInspectorItem,'SetField',TypeInfo(_T0),[TypeInfo(TField)],  getVMTProcAddr('TInspectorItem','SetField',36));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
{RegisterEvent(TypeInfo(TGetEditorClassProc),[
TypeInfo(TDCDsgnProperty),
TypeInfo(TControlClass)]);}

{RegisterEvent(TypeInfo(TGetPopupClassProc),[
TypeInfo(TDCDsgnProperty),
TypeInfo(TWinControlClass)]);}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
