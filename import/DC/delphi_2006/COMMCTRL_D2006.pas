{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit COMMCTRL_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  Types,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Messages,
  Windows,
  ActiveX,
  CommCtrl;
function Convert_COLORMAPToVariant(var R : _COLORMAP) : OleVariant;
function ConvertVariantTo_COLORMAP(const V : OleVariant) : _COLORMAP;
function Convert_HD_HITTESTINFOToVariant(var R : _HD_HITTESTINFO) : OleVariant;
function ConvertVariantTo_HD_HITTESTINFO(const V : OleVariant) : _HD_HITTESTINFO;
function Convert_HD_ITEMToVariant(var R : _HD_ITEM) : OleVariant;
function ConvertVariantTo_HD_ITEM(const V : OleVariant) : _HD_ITEM;
function Convert_HD_ITEMAToVariant(var R : _HD_ITEMA) : OleVariant;
function ConvertVariantTo_HD_ITEMA(const V : OleVariant) : _HD_ITEMA;
function Convert_HD_ITEMWToVariant(var R : _HD_ITEMW) : OleVariant;
function ConvertVariantTo_HD_ITEMW(const V : OleVariant) : _HD_ITEMW;
function Convert_HD_LAYOUTToVariant(var R : _HD_LAYOUT) : OleVariant;
function ConvertVariantTo_HD_LAYOUT(const V : OleVariant) : _HD_LAYOUT;
function Convert_IMAGEINFOToVariant(var R : _IMAGEINFO) : OleVariant;
function ConvertVariantTo_IMAGEINFO(const V : OleVariant) : _IMAGEINFO;
function Convert_IMAGELISTDRAWPARAMSToVariant(var R : _IMAGELISTDRAWPARAMS) : OleVariant;
function ConvertVariantTo_IMAGELISTDRAWPARAMS(const V : OleVariant) : _IMAGELISTDRAWPARAMS;
function Convert_LV_COLUMNToVariant(var R : _LV_COLUMN) : OleVariant;
function ConvertVariantTo_LV_COLUMN(const V : OleVariant) : _LV_COLUMN;
function Convert_LV_COLUMNAToVariant(var R : _LV_COLUMNA) : OleVariant;
function ConvertVariantTo_LV_COLUMNA(const V : OleVariant) : _LV_COLUMNA;
function Convert_LV_COLUMNWToVariant(var R : _LV_COLUMNW) : OleVariant;
function ConvertVariantTo_LV_COLUMNW(const V : OleVariant) : _LV_COLUMNW;
function Convert_LV_DISPINFOToVariant(var R : _LV_DISPINFO) : OleVariant;
function ConvertVariantTo_LV_DISPINFO(const V : OleVariant) : _LV_DISPINFO;
function Convert_LV_DISPINFOWToVariant(var R : _LV_DISPINFOW) : OleVariant;
function ConvertVariantTo_LV_DISPINFOW(const V : OleVariant) : _LV_DISPINFOW;
function Convert_LV_FINDINFOToVariant(var R : _LV_FINDINFO) : OleVariant;
function ConvertVariantTo_LV_FINDINFO(const V : OleVariant) : _LV_FINDINFO;
function Convert_LV_FINDINFOAToVariant(var R : _LV_FINDINFOA) : OleVariant;
function ConvertVariantTo_LV_FINDINFOA(const V : OleVariant) : _LV_FINDINFOA;
function Convert_LV_FINDINFOWToVariant(var R : _LV_FINDINFOW) : OleVariant;
function ConvertVariantTo_LV_FINDINFOW(const V : OleVariant) : _LV_FINDINFOW;
function Convert_LV_HITTESTINFOToVariant(var R : _LV_HITTESTINFO) : OleVariant;
function ConvertVariantTo_LV_HITTESTINFO(const V : OleVariant) : _LV_HITTESTINFO;
function Convert_LV_ITEMToVariant(var R : _LV_ITEM) : OleVariant;
function ConvertVariantTo_LV_ITEM(const V : OleVariant) : _LV_ITEM;
function Convert_LV_ITEMAToVariant(var R : _LV_ITEMA) : OleVariant;
function ConvertVariantTo_LV_ITEMA(const V : OleVariant) : _LV_ITEMA;
function Convert_LV_ITEMWToVariant(var R : _LV_ITEMW) : OleVariant;
function ConvertVariantTo_LV_ITEMW(const V : OleVariant) : _LV_ITEMW;
function Convert_LV_KEYDOWNToVariant(var R : _LV_KEYDOWN) : OleVariant;
function ConvertVariantTo_LV_KEYDOWN(const V : OleVariant) : _LV_KEYDOWN;
function Convert_NM_LISTVIEWToVariant(var R : _NM_LISTVIEW) : OleVariant;
function ConvertVariantTo_NM_LISTVIEW(const V : OleVariant) : _NM_LISTVIEW;
function Convert_NM_TREEVIEWToVariant(var R : _NM_TREEVIEW) : OleVariant;
function ConvertVariantTo_NM_TREEVIEW(const V : OleVariant) : _NM_TREEVIEW;
function Convert_NM_TREEVIEWAToVariant(var R : _NM_TREEVIEWA) : OleVariant;
function ConvertVariantTo_NM_TREEVIEWA(const V : OleVariant) : _NM_TREEVIEWA;
function Convert_NM_TREEVIEWWToVariant(var R : _NM_TREEVIEWW) : OleVariant;
function ConvertVariantTo_NM_TREEVIEWW(const V : OleVariant) : _NM_TREEVIEWW;
function Convert_NM_UPDOWNToVariant(var R : _NM_UPDOWN) : OleVariant;
function ConvertVariantTo_NM_UPDOWN(const V : OleVariant) : _NM_UPDOWN;
function Convert_NMTBCUSTOMDRAWToVariant(var R : _NMTBCUSTOMDRAW) : OleVariant;
function ConvertVariantTo_NMTBCUSTOMDRAW(const V : OleVariant) : _NMTBCUSTOMDRAW;
function Convert_PROPSHEETHEADERToVariant(var R : _PROPSHEETHEADER) : OleVariant;
function ConvertVariantTo_PROPSHEETHEADER(const V : OleVariant) : _PROPSHEETHEADER;
function Convert_PROPSHEETHEADERAToVariant(var R : _PROPSHEETHEADERA) : OleVariant;
function ConvertVariantTo_PROPSHEETHEADERA(const V : OleVariant) : _PROPSHEETHEADERA;
function Convert_PROPSHEETHEADERWToVariant(var R : _PROPSHEETHEADERW) : OleVariant;
function ConvertVariantTo_PROPSHEETHEADERW(const V : OleVariant) : _PROPSHEETHEADERW;
function Convert_PROPSHEETPAGEToVariant(var R : _PROPSHEETPAGE) : OleVariant;
function ConvertVariantTo_PROPSHEETPAGE(const V : OleVariant) : _PROPSHEETPAGE;
function Convert_PROPSHEETPAGEAToVariant(var R : _PROPSHEETPAGEA) : OleVariant;
function ConvertVariantTo_PROPSHEETPAGEA(const V : OleVariant) : _PROPSHEETPAGEA;
function Convert_PROPSHEETPAGEWToVariant(var R : _PROPSHEETPAGEW) : OleVariant;
function ConvertVariantTo_PROPSHEETPAGEW(const V : OleVariant) : _PROPSHEETPAGEW;
function Convert_RB_HITTESTINFOToVariant(var R : _RB_HITTESTINFO) : OleVariant;
function ConvertVariantTo_RB_HITTESTINFO(const V : OleVariant) : _RB_HITTESTINFO;
function Convert_TBBUTTONToVariant(var R : _TBBUTTON) : OleVariant;
function ConvertVariantTo_TBBUTTON(const V : OleVariant) : _TBBUTTON;
function Convert_TC_HITTESTINFOToVariant(var R : _TC_HITTESTINFO) : OleVariant;
function ConvertVariantTo_TC_HITTESTINFO(const V : OleVariant) : _TC_HITTESTINFO;
function Convert_TC_ITEMToVariant(var R : _TC_ITEM) : OleVariant;
function ConvertVariantTo_TC_ITEM(const V : OleVariant) : _TC_ITEM;
function Convert_TC_ITEMAToVariant(var R : _TC_ITEMA) : OleVariant;
function ConvertVariantTo_TC_ITEMA(const V : OleVariant) : _TC_ITEMA;
function Convert_TC_ITEMHEADERToVariant(var R : _TC_ITEMHEADER) : OleVariant;
function ConvertVariantTo_TC_ITEMHEADER(const V : OleVariant) : _TC_ITEMHEADER;
function Convert_TC_ITEMHEADERAToVariant(var R : _TC_ITEMHEADERA) : OleVariant;
function ConvertVariantTo_TC_ITEMHEADERA(const V : OleVariant) : _TC_ITEMHEADERA;
function Convert_TC_ITEMHEADERWToVariant(var R : _TC_ITEMHEADERW) : OleVariant;
function ConvertVariantTo_TC_ITEMHEADERW(const V : OleVariant) : _TC_ITEMHEADERW;
function Convert_TC_ITEMWToVariant(var R : _TC_ITEMW) : OleVariant;
function ConvertVariantTo_TC_ITEMW(const V : OleVariant) : _TC_ITEMW;
function Convert_TC_KEYDOWNToVariant(var R : _TC_KEYDOWN) : OleVariant;
function ConvertVariantTo_TC_KEYDOWN(const V : OleVariant) : _TC_KEYDOWN;
function Convert_TREEITEMToVariant(var R : _TREEITEM) : OleVariant;
function ConvertVariantTo_TREEITEM(const V : OleVariant) : _TREEITEM;
function Convert_TT_HITTESTINFOToVariant(var R : _TT_HITTESTINFO) : OleVariant;
function ConvertVariantTo_TT_HITTESTINFO(const V : OleVariant) : _TT_HITTESTINFO;
function Convert_TT_HITTESTINFOAToVariant(var R : _TT_HITTESTINFOA) : OleVariant;
function ConvertVariantTo_TT_HITTESTINFOA(const V : OleVariant) : _TT_HITTESTINFOA;
function Convert_TT_HITTESTINFOWToVariant(var R : _TT_HITTESTINFOW) : OleVariant;
function ConvertVariantTo_TT_HITTESTINFOW(const V : OleVariant) : _TT_HITTESTINFOW;
function Convert_TV_DISPINFOToVariant(var R : _TV_DISPINFO) : OleVariant;
function ConvertVariantTo_TV_DISPINFO(const V : OleVariant) : _TV_DISPINFO;
function Convert_TV_DISPINFOAToVariant(var R : _TV_DISPINFOA) : OleVariant;
function ConvertVariantTo_TV_DISPINFOA(const V : OleVariant) : _TV_DISPINFOA;
function Convert_TV_DISPINFOWToVariant(var R : _TV_DISPINFOW) : OleVariant;
function ConvertVariantTo_TV_DISPINFOW(const V : OleVariant) : _TV_DISPINFOW;
function Convert_TV_HITTESTINFOToVariant(var R : _TV_HITTESTINFO) : OleVariant;
function ConvertVariantTo_TV_HITTESTINFO(const V : OleVariant) : _TV_HITTESTINFO;
function Convert_TV_INSERTSTRUCTToVariant(var R : _TV_INSERTSTRUCT) : OleVariant;
function ConvertVariantTo_TV_INSERTSTRUCT(const V : OleVariant) : _TV_INSERTSTRUCT;
function Convert_TV_INSERTSTRUCTAToVariant(var R : _TV_INSERTSTRUCTA) : OleVariant;
function ConvertVariantTo_TV_INSERTSTRUCTA(const V : OleVariant) : _TV_INSERTSTRUCTA;
function Convert_TV_INSERTSTRUCTWToVariant(var R : _TV_INSERTSTRUCTW) : OleVariant;
function ConvertVariantTo_TV_INSERTSTRUCTW(const V : OleVariant) : _TV_INSERTSTRUCTW;
function Convert_TV_ITEMToVariant(var R : _TV_ITEM) : OleVariant;
function ConvertVariantTo_TV_ITEM(const V : OleVariant) : _TV_ITEM;
function Convert_TV_ITEMAToVariant(var R : _TV_ITEMA) : OleVariant;
function ConvertVariantTo_TV_ITEMA(const V : OleVariant) : _TV_ITEMA;
function Convert_TV_ITEMWToVariant(var R : _TV_ITEMW) : OleVariant;
function ConvertVariantTo_TV_ITEMW(const V : OleVariant) : _TV_ITEMW;
function Convert_TV_KEYDOWNToVariant(var R : _TV_KEYDOWN) : OleVariant;
function ConvertVariantTo_TV_KEYDOWN(const V : OleVariant) : _TV_KEYDOWN;
function Convert_TV_SORTCBToVariant(var R : _TV_SORTCB) : OleVariant;
function ConvertVariantTo_TV_SORTCB(const V : OleVariant) : _TV_SORTCB;
function Convert_UDACCELToVariant(var R : _UDACCEL) : OleVariant;
function ConvertVariantTo_UDACCEL(const V : OleVariant) : _UDACCEL;
function ConvertCOLORMAPToVariant(var R : COLORMAP) : OleVariant;
function ConvertVariantToCOLORMAP(const V : OleVariant) : COLORMAP;
function ConvertDRAGLISTINFOToVariant(var R : DRAGLISTINFO) : OleVariant;
function ConvertVariantToDRAGLISTINFO(const V : OleVariant) : DRAGLISTINFO;
function ConvertHD_HITTESTINFOToVariant(var R : HD_HITTESTINFO) : OleVariant;
function ConvertVariantToHD_HITTESTINFO(const V : OleVariant) : HD_HITTESTINFO;
function ConvertHD_ITEMToVariant(var R : HD_ITEM) : OleVariant;
function ConvertVariantToHD_ITEM(const V : OleVariant) : HD_ITEM;
function ConvertHD_ITEMAToVariant(var R : HD_ITEMA) : OleVariant;
function ConvertVariantToHD_ITEMA(const V : OleVariant) : HD_ITEMA;
function ConvertHD_ITEMWToVariant(var R : HD_ITEMW) : OleVariant;
function ConvertVariantToHD_ITEMW(const V : OleVariant) : HD_ITEMW;
function ConvertHD_LAYOUTToVariant(var R : HD_LAYOUT) : OleVariant;
function ConvertVariantToHD_LAYOUT(const V : OleVariant) : HD_LAYOUT;
function ConvertHD_NOTIFYToVariant(var R : HD_NOTIFY) : OleVariant;
function ConvertVariantToHD_NOTIFY(const V : OleVariant) : HD_NOTIFY;
function ConvertHD_NOTIFYAToVariant(var R : HD_NOTIFYA) : OleVariant;
function ConvertVariantToHD_NOTIFYA(const V : OleVariant) : HD_NOTIFYA;
function ConvertHD_NOTIFYWToVariant(var R : HD_NOTIFYW) : OleVariant;
function ConvertVariantToHD_NOTIFYW(const V : OleVariant) : HD_NOTIFYW;
function ConvertIMAGEINFOToVariant(var R : IMAGEINFO) : OleVariant;
function ConvertVariantToIMAGEINFO(const V : OleVariant) : IMAGEINFO;
function ConvertLV_COLUMNToVariant(var R : LV_COLUMN) : OleVariant;
function ConvertVariantToLV_COLUMN(const V : OleVariant) : LV_COLUMN;
function ConvertLV_COLUMNAToVariant(var R : LV_COLUMNA) : OleVariant;
function ConvertVariantToLV_COLUMNA(const V : OleVariant) : LV_COLUMNA;
function ConvertLV_COLUMNWToVariant(var R : LV_COLUMNW) : OleVariant;
function ConvertVariantToLV_COLUMNW(const V : OleVariant) : LV_COLUMNW;
function ConvertLV_DISPINFOToVariant(var R : LV_DISPINFO) : OleVariant;
function ConvertVariantToLV_DISPINFO(const V : OleVariant) : LV_DISPINFO;
function ConvertLV_DISPINFOAToVariant(var R : LV_DISPINFOA) : OleVariant;
function ConvertVariantToLV_DISPINFOA(const V : OleVariant) : LV_DISPINFOA;
function ConvertLV_DISPINFOWToVariant(var R : LV_DISPINFOW) : OleVariant;
function ConvertVariantToLV_DISPINFOW(const V : OleVariant) : LV_DISPINFOW;
function ConvertLV_FINDINFOToVariant(var R : LV_FINDINFO) : OleVariant;
function ConvertVariantToLV_FINDINFO(const V : OleVariant) : LV_FINDINFO;
function ConvertLV_FINDINFOAToVariant(var R : LV_FINDINFOA) : OleVariant;
function ConvertVariantToLV_FINDINFOA(const V : OleVariant) : LV_FINDINFOA;
function ConvertLV_FINDINFOWToVariant(var R : LV_FINDINFOW) : OleVariant;
function ConvertVariantToLV_FINDINFOW(const V : OleVariant) : LV_FINDINFOW;
function ConvertLV_HITTESTINFOToVariant(var R : LV_HITTESTINFO) : OleVariant;
function ConvertVariantToLV_HITTESTINFO(const V : OleVariant) : LV_HITTESTINFO;
function ConvertLV_ITEMToVariant(var R : LV_ITEM) : OleVariant;
function ConvertVariantToLV_ITEM(const V : OleVariant) : LV_ITEM;
function ConvertLV_ITEMAToVariant(var R : LV_ITEMA) : OleVariant;
function ConvertVariantToLV_ITEMA(const V : OleVariant) : LV_ITEMA;
function ConvertLV_ITEMWToVariant(var R : LV_ITEMW) : OleVariant;
function ConvertVariantToLV_ITEMW(const V : OleVariant) : LV_ITEMW;
function ConvertLV_KEYDOWNToVariant(var R : LV_KEYDOWN) : OleVariant;
function ConvertVariantToLV_KEYDOWN(const V : OleVariant) : LV_KEYDOWN;
function ConvertMCHITTESTINFOToVariant(var R : MCHITTESTINFO) : OleVariant;
function ConvertVariantToMCHITTESTINFO(const V : OleVariant) : MCHITTESTINFO;
function ConvertNM_LISTVIEWToVariant(var R : NM_LISTVIEW) : OleVariant;
function ConvertVariantToNM_LISTVIEW(const V : OleVariant) : NM_LISTVIEW;
function ConvertNM_TREEVIEWToVariant(var R : NM_TREEVIEW) : OleVariant;
function ConvertVariantToNM_TREEVIEW(const V : OleVariant) : NM_TREEVIEW;
function ConvertNM_TREEVIEWAToVariant(var R : NM_TREEVIEWA) : OleVariant;
function ConvertVariantToNM_TREEVIEWA(const V : OleVariant) : NM_TREEVIEWA;
function ConvertNM_TREEVIEWWToVariant(var R : NM_TREEVIEWW) : OleVariant;
function ConvertVariantToNM_TREEVIEWW(const V : OleVariant) : NM_TREEVIEWW;
function ConvertNM_UPDOWNToVariant(var R : NM_UPDOWN) : OleVariant;
function ConvertVariantToNM_UPDOWN(const V : OleVariant) : NM_UPDOWN;
function ConvertNMCBEDRAGBEGINToVariant(var R : NMCBEDRAGBEGIN) : OleVariant;
function ConvertVariantToNMCBEDRAGBEGIN(const V : OleVariant) : NMCBEDRAGBEGIN;
function ConvertNMCBEDRAGBEGINAToVariant(var R : NMCBEDRAGBEGINA) : OleVariant;
function ConvertVariantToNMCBEDRAGBEGINA(const V : OleVariant) : NMCBEDRAGBEGINA;
function ConvertNMCBEDRAGBEGINWToVariant(var R : NMCBEDRAGBEGINW) : OleVariant;
function ConvertVariantToNMCBEDRAGBEGINW(const V : OleVariant) : NMCBEDRAGBEGINW;
function ConvertNMCBEENDEDITToVariant(var R : NMCBEENDEDIT) : OleVariant;
function ConvertVariantToNMCBEENDEDIT(const V : OleVariant) : NMCBEENDEDIT;
function ConvertNMCBEENDEDITAToVariant(var R : NMCBEENDEDITA) : OleVariant;
function ConvertVariantToNMCBEENDEDITA(const V : OleVariant) : NMCBEENDEDITA;
function ConvertNMCBEENDEDITWToVariant(var R : NMCBEENDEDITW) : OleVariant;
function ConvertVariantToNMCBEENDEDITW(const V : OleVariant) : NMCBEENDEDITW;
function ConvertNMCOMBOBOXEXToVariant(var R : NMCOMBOBOXEX) : OleVariant;
function ConvertVariantToNMCOMBOBOXEX(const V : OleVariant) : NMCOMBOBOXEX;
function ConvertNMCOMBOBOXEXAToVariant(var R : NMCOMBOBOXEXA) : OleVariant;
function ConvertVariantToNMCOMBOBOXEXA(const V : OleVariant) : NMCOMBOBOXEXA;
function ConvertNMCOMBOBOXEXWToVariant(var R : NMCOMBOBOXEXW) : OleVariant;
function ConvertVariantToNMCOMBOBOXEXW(const V : OleVariant) : NMCOMBOBOXEXW;
function ConvertNMPGCALCSIZEToVariant(var R : NMPGCALCSIZE) : OleVariant;
function ConvertVariantToNMPGCALCSIZE(const V : OleVariant) : NMPGCALCSIZE;
function ConvertNMPGSCROLLToVariant(var R : NMPGSCROLL) : OleVariant;
function ConvertVariantToNMPGSCROLL(const V : OleVariant) : NMPGSCROLL;
function ConvertNMSELECTToVariant(var R : NMSELECT) : OleVariant;
function ConvertVariantToNMSELECT(const V : OleVariant) : NMSELECT;
function ConvertNMTBDISPINFOToVariant(var R : NMTBDISPINFO) : OleVariant;
function ConvertVariantToNMTBDISPINFO(const V : OleVariant) : NMTBDISPINFO;
function ConvertNMTBDISPINFOAToVariant(var R : NMTBDISPINFOA) : OleVariant;
function ConvertVariantToNMTBDISPINFOA(const V : OleVariant) : NMTBDISPINFOA;
function ConvertNMTBDISPINFOWToVariant(var R : NMTBDISPINFOW) : OleVariant;
function ConvertVariantToNMTBDISPINFOW(const V : OleVariant) : NMTBDISPINFOW;
function ConvertPBRANGEToVariant(var R : PBRANGE) : OleVariant;
function ConvertVariantToPBRANGE(const V : OleVariant) : PBRANGE;
function ConvertPROPSHEETPAGEToVariant(var R : PROPSHEETPAGE) : OleVariant;
function ConvertVariantToPROPSHEETPAGE(const V : OleVariant) : PROPSHEETPAGE;
function ConvertPROPSHEETPAGEAToVariant(var R : PROPSHEETPAGEA) : OleVariant;
function ConvertVariantToPROPSHEETPAGEA(const V : OleVariant) : PROPSHEETPAGEA;
function ConvertPROPSHEETPAGEWToVariant(var R : PROPSHEETPAGEW) : OleVariant;
function ConvertVariantToPROPSHEETPAGEW(const V : OleVariant) : PROPSHEETPAGEW;
function ConverttagCOLORSCHEMEToVariant(var R : tagCOLORSCHEME) : OleVariant;
function ConvertVariantTotagCOLORSCHEME(const V : OleVariant) : tagCOLORSCHEME;
function ConverttagCOMBOBOXEXITEMToVariant(var R : tagCOMBOBOXEXITEM) : OleVariant;
function ConvertVariantTotagCOMBOBOXEXITEM(const V : OleVariant) : tagCOMBOBOXEXITEM;
function ConverttagCOMBOBOXEXITEMAToVariant(var R : tagCOMBOBOXEXITEMA) : OleVariant;
function ConvertVariantTotagCOMBOBOXEXITEMA(const V : OleVariant) : tagCOMBOBOXEXITEMA;
function ConverttagCOMBOBOXEXITEMWToVariant(var R : tagCOMBOBOXEXITEMW) : OleVariant;
function ConvertVariantTotagCOMBOBOXEXITEMW(const V : OleVariant) : tagCOMBOBOXEXITEMW;
function ConverttagDRAGLISTINFOToVariant(var R : tagDRAGLISTINFO) : OleVariant;
function ConvertVariantTotagDRAGLISTINFO(const V : OleVariant) : tagDRAGLISTINFO;
function ConverttagINITCOMMONCONTROLSEXToVariant(var R : tagINITCOMMONCONTROLSEX) : OleVariant;
function ConvertVariantTotagINITCOMMONCONTROLSEX(const V : OleVariant) : tagINITCOMMONCONTROLSEX;
function ConverttagLVBKIMAGEToVariant(var R : tagLVBKIMAGE) : OleVariant;
function ConvertVariantTotagLVBKIMAGE(const V : OleVariant) : tagLVBKIMAGE;
function ConverttagLVBKIMAGEAToVariant(var R : tagLVBKIMAGEA) : OleVariant;
function ConvertVariantTotagLVBKIMAGEA(const V : OleVariant) : tagLVBKIMAGEA;
function ConverttagLVBKIMAGEWToVariant(var R : tagLVBKIMAGEW) : OleVariant;
function ConvertVariantTotagLVBKIMAGEW(const V : OleVariant) : tagLVBKIMAGEW;
function ConverttagLVCOLUMNToVariant(var R : tagLVCOLUMN) : OleVariant;
function ConvertVariantTotagLVCOLUMN(const V : OleVariant) : tagLVCOLUMN;
function ConverttagLVCOLUMNAToVariant(var R : tagLVCOLUMNA) : OleVariant;
function ConvertVariantTotagLVCOLUMNA(const V : OleVariant) : tagLVCOLUMNA;
function ConverttagLVCOLUMNWToVariant(var R : tagLVCOLUMNW) : OleVariant;
function ConvertVariantTotagLVCOLUMNW(const V : OleVariant) : tagLVCOLUMNW;
function ConverttagLVDISPINFOToVariant(var R : tagLVDISPINFO) : OleVariant;
function ConvertVariantTotagLVDISPINFO(const V : OleVariant) : tagLVDISPINFO;
function ConverttagLVDISPINFOWToVariant(var R : tagLVDISPINFOW) : OleVariant;
function ConvertVariantTotagLVDISPINFOW(const V : OleVariant) : tagLVDISPINFOW;
function ConverttagLVFINDINFOToVariant(var R : tagLVFINDINFO) : OleVariant;
function ConvertVariantTotagLVFINDINFO(const V : OleVariant) : tagLVFINDINFO;
function ConverttagLVFINDINFOAToVariant(var R : tagLVFINDINFOA) : OleVariant;
function ConvertVariantTotagLVFINDINFOA(const V : OleVariant) : tagLVFINDINFOA;
function ConverttagLVFINDINFOWToVariant(var R : tagLVFINDINFOW) : OleVariant;
function ConvertVariantTotagLVFINDINFOW(const V : OleVariant) : tagLVFINDINFOW;
function ConverttagLVHITTESTINFOToVariant(var R : tagLVHITTESTINFO) : OleVariant;
function ConvertVariantTotagLVHITTESTINFO(const V : OleVariant) : tagLVHITTESTINFO;
function ConverttagLVITEMToVariant(var R : tagLVITEM) : OleVariant;
function ConvertVariantTotagLVITEM(const V : OleVariant) : tagLVITEM;
function ConverttagLVITEMAToVariant(var R : tagLVITEMA) : OleVariant;
function ConvertVariantTotagLVITEMA(const V : OleVariant) : tagLVITEMA;
function ConverttagLVITEMWToVariant(var R : tagLVITEMW) : OleVariant;
function ConvertVariantTotagLVITEMW(const V : OleVariant) : tagLVITEMW;
function ConverttagLVKEYDOWNToVariant(var R : tagLVKEYDOWN) : OleVariant;
function ConvertVariantTotagLVKEYDOWN(const V : OleVariant) : tagLVKEYDOWN;
function ConverttagNMCHARToVariant(var R : tagNMCHAR) : OleVariant;
function ConvertVariantTotagNMCHAR(const V : OleVariant) : tagNMCHAR;
function ConverttagNMCUSTOMDRAWINFOToVariant(var R : tagNMCUSTOMDRAWINFO) : OleVariant;
function ConvertVariantTotagNMCUSTOMDRAWINFO(const V : OleVariant) : tagNMCUSTOMDRAWINFO;
function ConverttagNMDATETIMECHANGEToVariant(var R : tagNMDATETIMECHANGE) : OleVariant;
function ConvertVariantTotagNMDATETIMECHANGE(const V : OleVariant) : tagNMDATETIMECHANGE;
function ConverttagNMDATETIMEFORMATToVariant(var R : tagNMDATETIMEFORMAT) : OleVariant;
function ConvertVariantTotagNMDATETIMEFORMAT(const V : OleVariant) : tagNMDATETIMEFORMAT;
function ConverttagNMDATETIMEFORMATAToVariant(var R : tagNMDATETIMEFORMATA) : OleVariant;
function ConvertVariantTotagNMDATETIMEFORMATA(const V : OleVariant) : tagNMDATETIMEFORMATA;
function ConverttagNMDATETIMEFORMATQUERYToVariant(var R : tagNMDATETIMEFORMATQUERY) : OleVariant;
function ConvertVariantTotagNMDATETIMEFORMATQUERY(const V : OleVariant) : tagNMDATETIMEFORMATQUERY;
function ConverttagNMDATETIMEFORMATQUERYAToVariant(var R : tagNMDATETIMEFORMATQUERYA) : OleVariant;
function ConvertVariantTotagNMDATETIMEFORMATQUERYA(const V : OleVariant) : tagNMDATETIMEFORMATQUERYA;
function ConverttagNMDATETIMEFORMATQUERYWToVariant(var R : tagNMDATETIMEFORMATQUERYW) : OleVariant;
function ConvertVariantTotagNMDATETIMEFORMATQUERYW(const V : OleVariant) : tagNMDATETIMEFORMATQUERYW;
function ConverttagNMDATETIMEFORMATWToVariant(var R : tagNMDATETIMEFORMATW) : OleVariant;
function ConvertVariantTotagNMDATETIMEFORMATW(const V : OleVariant) : tagNMDATETIMEFORMATW;
function ConverttagNMDATETIMESTRINGToVariant(var R : tagNMDATETIMESTRING) : OleVariant;
function ConvertVariantTotagNMDATETIMESTRING(const V : OleVariant) : tagNMDATETIMESTRING;
function ConverttagNMDATETIMESTRINGAToVariant(var R : tagNMDATETIMESTRINGA) : OleVariant;
function ConvertVariantTotagNMDATETIMESTRINGA(const V : OleVariant) : tagNMDATETIMESTRINGA;
function ConverttagNMDATETIMESTRINGWToVariant(var R : tagNMDATETIMESTRINGW) : OleVariant;
function ConvertVariantTotagNMDATETIMESTRINGW(const V : OleVariant) : tagNMDATETIMESTRINGW;
function ConverttagNMDATETIMEWMKEYDOWNToVariant(var R : tagNMDATETIMEWMKEYDOWN) : OleVariant;
function ConvertVariantTotagNMDATETIMEWMKEYDOWN(const V : OleVariant) : tagNMDATETIMEWMKEYDOWN;
function ConverttagNMDATETIMEWMKEYDOWNAToVariant(var R : tagNMDATETIMEWMKEYDOWNA) : OleVariant;
function ConvertVariantTotagNMDATETIMEWMKEYDOWNA(const V : OleVariant) : tagNMDATETIMEWMKEYDOWNA;
function ConverttagNMDATETIMEWMKEYDOWNWToVariant(var R : tagNMDATETIMEWMKEYDOWNW) : OleVariant;
function ConvertVariantTotagNMDATETIMEWMKEYDOWNW(const V : OleVariant) : tagNMDATETIMEWMKEYDOWNW;
function ConverttagNMDAYSTATEToVariant(var R : tagNMDAYSTATE) : OleVariant;
function ConvertVariantTotagNMDAYSTATE(const V : OleVariant) : tagNMDAYSTATE;
function ConverttagNMHDDISPINFOToVariant(var R : tagNMHDDISPINFO) : OleVariant;
function ConvertVariantTotagNMHDDISPINFO(const V : OleVariant) : tagNMHDDISPINFO;
function ConverttagNMHDDISPINFOAToVariant(var R : tagNMHDDISPINFOA) : OleVariant;
function ConvertVariantTotagNMHDDISPINFOA(const V : OleVariant) : tagNMHDDISPINFOA;
function ConverttagNMHDDISPINFOWToVariant(var R : tagNMHDDISPINFOW) : OleVariant;
function ConvertVariantTotagNMHDDISPINFOW(const V : OleVariant) : tagNMHDDISPINFOW;
function ConverttagNMHEADERToVariant(var R : tagNMHEADER) : OleVariant;
function ConvertVariantTotagNMHEADER(const V : OleVariant) : tagNMHEADER;
function ConverttagNMHEADERAToVariant(var R : tagNMHEADERA) : OleVariant;
function ConvertVariantTotagNMHEADERA(const V : OleVariant) : tagNMHEADERA;
function ConverttagNMHEADERWToVariant(var R : tagNMHEADERW) : OleVariant;
function ConvertVariantTotagNMHEADERW(const V : OleVariant) : tagNMHEADERW;
function ConverttagNMIPADDRESSToVariant(var R : tagNMIPADDRESS) : OleVariant;
function ConvertVariantTotagNMIPADDRESS(const V : OleVariant) : tagNMIPADDRESS;
function ConverttagNMITEMACTIVATEToVariant(var R : tagNMITEMACTIVATE) : OleVariant;
function ConvertVariantTotagNMITEMACTIVATE(const V : OleVariant) : tagNMITEMACTIVATE;
function ConverttagNMKEYToVariant(var R : tagNMKEY) : OleVariant;
function ConvertVariantTotagNMKEY(const V : OleVariant) : tagNMKEY;
function ConverttagNMLISTVIEWToVariant(var R : tagNMLISTVIEW) : OleVariant;
function ConvertVariantTotagNMLISTVIEW(const V : OleVariant) : tagNMLISTVIEW;
function ConverttagNMLVCACHEHINTToVariant(var R : tagNMLVCACHEHINT) : OleVariant;
function ConvertVariantTotagNMLVCACHEHINT(const V : OleVariant) : tagNMLVCACHEHINT;
function ConverttagNMLVCUSTOMDRAWToVariant(var R : tagNMLVCUSTOMDRAW) : OleVariant;
function ConvertVariantTotagNMLVCUSTOMDRAW(const V : OleVariant) : tagNMLVCUSTOMDRAW;
function ConverttagNMLVFINDITEMToVariant(var R : tagNMLVFINDITEM) : OleVariant;
function ConvertVariantTotagNMLVFINDITEM(const V : OleVariant) : tagNMLVFINDITEM;
function ConverttagNMLVFINDITEMAToVariant(var R : tagNMLVFINDITEMA) : OleVariant;
function ConvertVariantTotagNMLVFINDITEMA(const V : OleVariant) : tagNMLVFINDITEMA;
function ConverttagNMLVFINDITEMWToVariant(var R : tagNMLVFINDITEMW) : OleVariant;
function ConvertVariantTotagNMLVFINDITEMW(const V : OleVariant) : tagNMLVFINDITEMW;
function ConverttagNMLVGETINFOTIPToVariant(var R : tagNMLVGETINFOTIP) : OleVariant;
function ConvertVariantTotagNMLVGETINFOTIP(const V : OleVariant) : tagNMLVGETINFOTIP;
function ConverttagNMLVGETINFOTIPAToVariant(var R : tagNMLVGETINFOTIPA) : OleVariant;
function ConvertVariantTotagNMLVGETINFOTIPA(const V : OleVariant) : tagNMLVGETINFOTIPA;
function ConverttagNMLVGETINFOTIPWToVariant(var R : tagNMLVGETINFOTIPW) : OleVariant;
function ConvertVariantTotagNMLVGETINFOTIPW(const V : OleVariant) : tagNMLVGETINFOTIPW;
function ConverttagNMLVODSTATECHANGEToVariant(var R : tagNMLVODSTATECHANGE) : OleVariant;
function ConvertVariantTotagNMLVODSTATECHANGE(const V : OleVariant) : tagNMLVODSTATECHANGE;
function ConverttagNMMOUSEToVariant(var R : tagNMMOUSE) : OleVariant;
function ConvertVariantTotagNMMOUSE(const V : OleVariant) : tagNMMOUSE;
function ConverttagNMOBJECTNOTIFYToVariant(var R : tagNMOBJECTNOTIFY) : OleVariant;
function ConvertVariantTotagNMOBJECTNOTIFY(const V : OleVariant) : tagNMOBJECTNOTIFY;
function ConverttagNMRBAUTOSIZEToVariant(var R : tagNMRBAUTOSIZE) : OleVariant;
function ConvertVariantTotagNMRBAUTOSIZE(const V : OleVariant) : tagNMRBAUTOSIZE;
function ConverttagNMREBARToVariant(var R : tagNMREBAR) : OleVariant;
function ConvertVariantTotagNMREBAR(const V : OleVariant) : tagNMREBAR;
function ConverttagNMREBARCHILDSIZEToVariant(var R : tagNMREBARCHILDSIZE) : OleVariant;
function ConvertVariantTotagNMREBARCHILDSIZE(const V : OleVariant) : tagNMREBARCHILDSIZE;
function ConverttagNMSELCHANGEToVariant(var R : tagNMSELCHANGE) : OleVariant;
function ConvertVariantTotagNMSELCHANGE(const V : OleVariant) : tagNMSELCHANGE;
function ConverttagNMTBGETINFOTIPToVariant(var R : tagNMTBGETINFOTIP) : OleVariant;
function ConvertVariantTotagNMTBGETINFOTIP(const V : OleVariant) : tagNMTBGETINFOTIP;
function ConverttagNMTBGETINFOTIPAToVariant(var R : tagNMTBGETINFOTIPA) : OleVariant;
function ConvertVariantTotagNMTBGETINFOTIPA(const V : OleVariant) : tagNMTBGETINFOTIPA;
function ConverttagNMTBGETINFOTIPWToVariant(var R : tagNMTBGETINFOTIPW) : OleVariant;
function ConvertVariantTotagNMTBGETINFOTIPW(const V : OleVariant) : tagNMTBGETINFOTIPW;
function ConverttagNMTBHOTITEMToVariant(var R : tagNMTBHOTITEM) : OleVariant;
function ConvertVariantTotagNMTBHOTITEM(const V : OleVariant) : tagNMTBHOTITEM;
function ConverttagNMTOOLBARToVariant(var R : tagNMTOOLBAR) : OleVariant;
function ConvertVariantTotagNMTOOLBAR(const V : OleVariant) : tagNMTOOLBAR;
function ConverttagNMTOOLBARAToVariant(var R : tagNMTOOLBARA) : OleVariant;
function ConvertVariantTotagNMTOOLBARA(const V : OleVariant) : tagNMTOOLBARA;
function ConverttagNMTOOLBARWToVariant(var R : tagNMTOOLBARW) : OleVariant;
function ConvertVariantTotagNMTOOLBARW(const V : OleVariant) : tagNMTOOLBARW;
function ConverttagNMTREEVIEWToVariant(var R : tagNMTREEVIEW) : OleVariant;
function ConvertVariantTotagNMTREEVIEW(const V : OleVariant) : tagNMTREEVIEW;
function ConverttagNMTREEVIEWAToVariant(var R : tagNMTREEVIEWA) : OleVariant;
function ConvertVariantTotagNMTREEVIEWA(const V : OleVariant) : tagNMTREEVIEWA;
function ConverttagNMTREEVIEWWToVariant(var R : tagNMTREEVIEWW) : OleVariant;
function ConvertVariantTotagNMTREEVIEWW(const V : OleVariant) : tagNMTREEVIEWW;
function ConverttagNMTTCUSTOMDRAWToVariant(var R : tagNMTTCUSTOMDRAW) : OleVariant;
function ConvertVariantTotagNMTTCUSTOMDRAW(const V : OleVariant) : tagNMTTCUSTOMDRAW;
function ConverttagNMTTDISPINFOToVariant(var R : tagNMTTDISPINFO) : OleVariant;
function ConvertVariantTotagNMTTDISPINFO(const V : OleVariant) : tagNMTTDISPINFO;
function ConverttagNMTTDISPINFOAToVariant(var R : tagNMTTDISPINFOA) : OleVariant;
function ConvertVariantTotagNMTTDISPINFOA(const V : OleVariant) : tagNMTTDISPINFOA;
function ConverttagNMTTDISPINFOWToVariant(var R : tagNMTTDISPINFOW) : OleVariant;
function ConvertVariantTotagNMTTDISPINFOW(const V : OleVariant) : tagNMTTDISPINFOW;
function ConverttagNMTVCUSTOMDRAWToVariant(var R : tagNMTVCUSTOMDRAW) : OleVariant;
function ConvertVariantTotagNMTVCUSTOMDRAW(const V : OleVariant) : tagNMTVCUSTOMDRAW;
function ConverttagNMTVGETINFOTIPToVariant(var R : tagNMTVGETINFOTIP) : OleVariant;
function ConvertVariantTotagNMTVGETINFOTIP(const V : OleVariant) : tagNMTVGETINFOTIP;
function ConverttagNMTVGETINFOTIPAToVariant(var R : tagNMTVGETINFOTIPA) : OleVariant;
function ConvertVariantTotagNMTVGETINFOTIPA(const V : OleVariant) : tagNMTVGETINFOTIPA;
function ConverttagNMTVGETINFOTIPWToVariant(var R : tagNMTVGETINFOTIPW) : OleVariant;
function ConvertVariantTotagNMTVGETINFOTIPW(const V : OleVariant) : tagNMTVGETINFOTIPW;
function ConverttagREBARBANDINFOToVariant(var R : tagREBARBANDINFO) : OleVariant;
function ConvertVariantTotagREBARBANDINFO(const V : OleVariant) : tagREBARBANDINFO;
function ConverttagREBARBANDINFOAToVariant(var R : tagREBARBANDINFOA) : OleVariant;
function ConvertVariantTotagREBARBANDINFOA(const V : OleVariant) : tagREBARBANDINFOA;
function ConverttagREBARBANDINFOWToVariant(var R : tagREBARBANDINFOW) : OleVariant;
function ConvertVariantTotagREBARBANDINFOW(const V : OleVariant) : tagREBARBANDINFOW;
function ConverttagREBARINFOToVariant(var R : tagREBARINFO) : OleVariant;
function ConvertVariantTotagREBARINFO(const V : OleVariant) : tagREBARINFO;
function ConverttagTBADDBITMAPToVariant(var R : tagTBADDBITMAP) : OleVariant;
function ConvertVariantTotagTBADDBITMAP(const V : OleVariant) : tagTBADDBITMAP;
function ConverttagTBSAVEPARAMSToVariant(var R : tagTBSAVEPARAMS) : OleVariant;
function ConvertVariantTotagTBSAVEPARAMS(const V : OleVariant) : tagTBSAVEPARAMS;
function ConverttagTBSAVEPARAMSAToVariant(var R : tagTBSAVEPARAMSA) : OleVariant;
function ConvertVariantTotagTBSAVEPARAMSA(const V : OleVariant) : tagTBSAVEPARAMSA;
function ConverttagTBSAVEPARAMSWToVariant(var R : tagTBSAVEPARAMSW) : OleVariant;
function ConvertVariantTotagTBSAVEPARAMSW(const V : OleVariant) : tagTBSAVEPARAMSW;
function ConverttagTCHITTESTINFOToVariant(var R : tagTCHITTESTINFO) : OleVariant;
function ConvertVariantTotagTCHITTESTINFO(const V : OleVariant) : tagTCHITTESTINFO;
function ConverttagTCITEMToVariant(var R : tagTCITEM) : OleVariant;
function ConvertVariantTotagTCITEM(const V : OleVariant) : tagTCITEM;
function ConverttagTCITEMAToVariant(var R : tagTCITEMA) : OleVariant;
function ConvertVariantTotagTCITEMA(const V : OleVariant) : tagTCITEMA;
function ConverttagTCITEMHEADERToVariant(var R : tagTCITEMHEADER) : OleVariant;
function ConvertVariantTotagTCITEMHEADER(const V : OleVariant) : tagTCITEMHEADER;
function ConverttagTCITEMHEADERAToVariant(var R : tagTCITEMHEADERA) : OleVariant;
function ConvertVariantTotagTCITEMHEADERA(const V : OleVariant) : tagTCITEMHEADERA;
function ConverttagTCITEMHEADERWToVariant(var R : tagTCITEMHEADERW) : OleVariant;
function ConvertVariantTotagTCITEMHEADERW(const V : OleVariant) : tagTCITEMHEADERW;
function ConverttagTCITEMWToVariant(var R : tagTCITEMW) : OleVariant;
function ConvertVariantTotagTCITEMW(const V : OleVariant) : tagTCITEMW;
function ConverttagTCKEYDOWNToVariant(var R : tagTCKEYDOWN) : OleVariant;
function ConvertVariantTotagTCKEYDOWN(const V : OleVariant) : tagTCKEYDOWN;
function ConverttagTOOLINFOToVariant(var R : tagTOOLINFO) : OleVariant;
function ConvertVariantTotagTOOLINFO(const V : OleVariant) : tagTOOLINFO;
function ConverttagTOOLINFOAToVariant(var R : tagTOOLINFOA) : OleVariant;
function ConvertVariantTotagTOOLINFOA(const V : OleVariant) : tagTOOLINFOA;
function ConverttagTOOLINFOWToVariant(var R : tagTOOLINFOW) : OleVariant;
function ConvertVariantTotagTOOLINFOW(const V : OleVariant) : tagTOOLINFOW;
function ConverttagTOOLTIPTEXTToVariant(var R : tagTOOLTIPTEXT) : OleVariant;
function ConvertVariantTotagTOOLTIPTEXT(const V : OleVariant) : tagTOOLTIPTEXT;
function ConverttagTOOLTIPTEXTAToVariant(var R : tagTOOLTIPTEXTA) : OleVariant;
function ConvertVariantTotagTOOLTIPTEXTA(const V : OleVariant) : tagTOOLTIPTEXTA;
function ConverttagTOOLTIPTEXTWToVariant(var R : tagTOOLTIPTEXTW) : OleVariant;
function ConvertVariantTotagTOOLTIPTEXTW(const V : OleVariant) : tagTOOLTIPTEXTW;
function ConverttagTRACKMOUSEEVENTToVariant(var R : tagTRACKMOUSEEVENT) : OleVariant;
function ConvertVariantTotagTRACKMOUSEEVENT(const V : OleVariant) : tagTRACKMOUSEEVENT;
function ConverttagTVDISPINFOToVariant(var R : tagTVDISPINFO) : OleVariant;
function ConvertVariantTotagTVDISPINFO(const V : OleVariant) : tagTVDISPINFO;
function ConverttagTVDISPINFOAToVariant(var R : tagTVDISPINFOA) : OleVariant;
function ConvertVariantTotagTVDISPINFOA(const V : OleVariant) : tagTVDISPINFOA;
function ConverttagTVDISPINFOWToVariant(var R : tagTVDISPINFOW) : OleVariant;
function ConvertVariantTotagTVDISPINFOW(const V : OleVariant) : tagTVDISPINFOW;
function ConverttagTVHITTESTINFOToVariant(var R : tagTVHITTESTINFO) : OleVariant;
function ConvertVariantTotagTVHITTESTINFO(const V : OleVariant) : tagTVHITTESTINFO;
function ConverttagTVINSERTSTRUCTToVariant(var R : tagTVINSERTSTRUCT) : OleVariant;
function ConvertVariantTotagTVINSERTSTRUCT(const V : OleVariant) : tagTVINSERTSTRUCT;
function ConverttagTVINSERTSTRUCTAToVariant(var R : tagTVINSERTSTRUCTA) : OleVariant;
function ConvertVariantTotagTVINSERTSTRUCTA(const V : OleVariant) : tagTVINSERTSTRUCTA;
function ConverttagTVINSERTSTRUCTWToVariant(var R : tagTVINSERTSTRUCTW) : OleVariant;
function ConvertVariantTotagTVINSERTSTRUCTW(const V : OleVariant) : tagTVINSERTSTRUCTW;
function ConverttagTVITEMToVariant(var R : tagTVITEM) : OleVariant;
function ConvertVariantTotagTVITEM(const V : OleVariant) : tagTVITEM;
function ConverttagTVITEMAToVariant(var R : tagTVITEMA) : OleVariant;
function ConvertVariantTotagTVITEMA(const V : OleVariant) : tagTVITEMA;
function ConverttagTVITEMEXToVariant(var R : tagTVITEMEX) : OleVariant;
function ConvertVariantTotagTVITEMEX(const V : OleVariant) : tagTVITEMEX;
function ConverttagTVITEMEXAToVariant(var R : tagTVITEMEXA) : OleVariant;
function ConvertVariantTotagTVITEMEXA(const V : OleVariant) : tagTVITEMEXA;
function ConverttagTVITEMEXWToVariant(var R : tagTVITEMEXW) : OleVariant;
function ConvertVariantTotagTVITEMEXW(const V : OleVariant) : tagTVITEMEXW;
function ConverttagTVITEMWToVariant(var R : tagTVITEMW) : OleVariant;
function ConvertVariantTotagTVITEMW(const V : OleVariant) : tagTVITEMW;
function ConverttagTVKEYDOWNToVariant(var R : tagTVKEYDOWN) : OleVariant;
function ConvertVariantTotagTVKEYDOWN(const V : OleVariant) : tagTVKEYDOWN;
function ConverttagTVSORTCBToVariant(var R : tagTVSORTCB) : OleVariant;
function ConvertVariantTotagTVSORTCB(const V : OleVariant) : tagTVSORTCB;
function ConvertTBADDBITMAPToVariant(var R : TBADDBITMAP) : OleVariant;
function ConvertVariantToTBADDBITMAP(const V : OleVariant) : TBADDBITMAP;
function ConvertTBBUTTONINFOToVariant(var R : TBBUTTONINFO) : OleVariant;
function ConvertVariantToTBBUTTONINFO(const V : OleVariant) : TBBUTTONINFO;
function ConvertTBBUTTONINFOAToVariant(var R : TBBUTTONINFOA) : OleVariant;
function ConvertVariantToTBBUTTONINFOA(const V : OleVariant) : TBBUTTONINFOA;
function ConvertTBBUTTONINFOWToVariant(var R : TBBUTTONINFOW) : OleVariant;
function ConvertVariantToTBBUTTONINFOW(const V : OleVariant) : TBBUTTONINFOW;
function ConvertTBINSERTMARKToVariant(var R : TBINSERTMARK) : OleVariant;
function ConvertVariantToTBINSERTMARK(const V : OleVariant) : TBINSERTMARK;
function ConvertTBREPLACEBITMAPToVariant(var R : TBREPLACEBITMAP) : OleVariant;
function ConvertVariantToTBREPLACEBITMAP(const V : OleVariant) : TBREPLACEBITMAP;
function ConvertTBSAVEPARAMSToVariant(var R : TBSAVEPARAMS) : OleVariant;
function ConvertVariantToTBSAVEPARAMS(const V : OleVariant) : TBSAVEPARAMS;
function ConvertTBSAVEPARAMSAToVariant(var R : TBSAVEPARAMSA) : OleVariant;
function ConvertVariantToTBSAVEPARAMSA(const V : OleVariant) : TBSAVEPARAMSA;
function ConvertTBSAVEPARAMSWToVariant(var R : TBSAVEPARAMSW) : OleVariant;
function ConvertVariantToTBSAVEPARAMSW(const V : OleVariant) : TBSAVEPARAMSW;
function ConvertTC_HITTESTINFOToVariant(var R : TC_HITTESTINFO) : OleVariant;
function ConvertVariantToTC_HITTESTINFO(const V : OleVariant) : TC_HITTESTINFO;
function ConvertTC_ITEMToVariant(var R : TC_ITEM) : OleVariant;
function ConvertVariantToTC_ITEM(const V : OleVariant) : TC_ITEM;
function ConvertTC_ITEMAToVariant(var R : TC_ITEMA) : OleVariant;
function ConvertVariantToTC_ITEMA(const V : OleVariant) : TC_ITEMA;
function ConvertTC_ITEMHEADERToVariant(var R : TC_ITEMHEADER) : OleVariant;
function ConvertVariantToTC_ITEMHEADER(const V : OleVariant) : TC_ITEMHEADER;
function ConvertTC_ITEMHEADERAToVariant(var R : TC_ITEMHEADERA) : OleVariant;
function ConvertVariantToTC_ITEMHEADERA(const V : OleVariant) : TC_ITEMHEADERA;
function ConvertTC_ITEMHEADERWToVariant(var R : TC_ITEMHEADERW) : OleVariant;
function ConvertVariantToTC_ITEMHEADERW(const V : OleVariant) : TC_ITEMHEADERW;
function ConvertTC_ITEMWToVariant(var R : TC_ITEMW) : OleVariant;
function ConvertVariantToTC_ITEMW(const V : OleVariant) : TC_ITEMW;
function ConvertTC_KEYDOWNToVariant(var R : TC_KEYDOWN) : OleVariant;
function ConvertVariantToTC_KEYDOWN(const V : OleVariant) : TC_KEYDOWN;
function ConvertTColorMapToVariant(var R : TColorMap) : OleVariant;
function ConvertVariantToTColorMap(const V : OleVariant) : TColorMap;
function ConvertTColorSchemeToVariant(var R : TColorScheme) : OleVariant;
function ConvertVariantToTColorScheme(const V : OleVariant) : TColorScheme;
function ConvertTComboBoxExItemToVariant(var R : TComboBoxExItem) : OleVariant;
function ConvertVariantToTComboBoxExItem(const V : OleVariant) : TComboBoxExItem;
function ConvertTComboBoxExItemAToVariant(var R : TComboBoxExItemA) : OleVariant;
function ConvertVariantToTComboBoxExItemA(const V : OleVariant) : TComboBoxExItemA;
function ConvertTComboBoxExItemWToVariant(var R : TComboBoxExItemW) : OleVariant;
function ConvertVariantToTComboBoxExItemW(const V : OleVariant) : TComboBoxExItemW;
function ConvertTDragListInfoToVariant(var R : TDragListInfo) : OleVariant;
function ConvertVariantToTDragListInfo(const V : OleVariant) : TDragListInfo;
function ConvertTHDHitTestInfoToVariant(var R : THDHitTestInfo) : OleVariant;
function ConvertVariantToTHDHitTestInfo(const V : OleVariant) : THDHitTestInfo;
function ConvertTHDItemToVariant(var R : THDItem) : OleVariant;
function ConvertVariantToTHDItem(const V : OleVariant) : THDItem;
function ConvertTHDItemAToVariant(var R : THDItemA) : OleVariant;
function ConvertVariantToTHDItemA(const V : OleVariant) : THDItemA;
function ConvertTHDItemWToVariant(var R : THDItemW) : OleVariant;
function ConvertVariantToTHDItemW(const V : OleVariant) : THDItemW;
function ConvertTHDLayoutToVariant(var R : THDLayout) : OleVariant;
function ConvertVariantToTHDLayout(const V : OleVariant) : THDLayout;
function ConvertTHDNotifyToVariant(var R : THDNotify) : OleVariant;
function ConvertVariantToTHDNotify(const V : OleVariant) : THDNotify;
function ConvertTHDNotifyAToVariant(var R : THDNotifyA) : OleVariant;
function ConvertVariantToTHDNotifyA(const V : OleVariant) : THDNotifyA;
function ConvertTHDNotifyWToVariant(var R : THDNotifyW) : OleVariant;
function ConvertVariantToTHDNotifyW(const V : OleVariant) : THDNotifyW;
function ConvertTImageInfoToVariant(var R : TImageInfo) : OleVariant;
function ConvertVariantToTImageInfo(const V : OleVariant) : TImageInfo;
function ConvertTImageListDrawParamsToVariant(var R : TImageListDrawParams) : OleVariant;
function ConvertVariantToTImageListDrawParams(const V : OleVariant) : TImageListDrawParams;
function ConvertTInitCommonControlsExToVariant(var R : TInitCommonControlsEx) : OleVariant;
function ConvertVariantToTInitCommonControlsEx(const V : OleVariant) : TInitCommonControlsEx;
function ConvertTLVBKImageToVariant(var R : TLVBKImage) : OleVariant;
function ConvertVariantToTLVBKImage(const V : OleVariant) : TLVBKImage;
function ConvertTLVBKImageAToVariant(var R : TLVBKImageA) : OleVariant;
function ConvertVariantToTLVBKImageA(const V : OleVariant) : TLVBKImageA;
function ConvertTLVBKImageWToVariant(var R : TLVBKImageW) : OleVariant;
function ConvertVariantToTLVBKImageW(const V : OleVariant) : TLVBKImageW;
function ConvertTLVColumnToVariant(var R : TLVColumn) : OleVariant;
function ConvertVariantToTLVColumn(const V : OleVariant) : TLVColumn;
function ConvertTLVColumnAToVariant(var R : TLVColumnA) : OleVariant;
function ConvertVariantToTLVColumnA(const V : OleVariant) : TLVColumnA;
function ConvertTLVColumnWToVariant(var R : TLVColumnW) : OleVariant;
function ConvertVariantToTLVColumnW(const V : OleVariant) : TLVColumnW;
function ConvertTLVDispInfoToVariant(var R : TLVDispInfo) : OleVariant;
function ConvertVariantToTLVDispInfo(const V : OleVariant) : TLVDispInfo;
function ConvertTLVDispInfoAToVariant(var R : TLVDispInfoA) : OleVariant;
function ConvertVariantToTLVDispInfoA(const V : OleVariant) : TLVDispInfoA;
function ConvertTLVDispInfoWToVariant(var R : TLVDispInfoW) : OleVariant;
function ConvertVariantToTLVDispInfoW(const V : OleVariant) : TLVDispInfoW;
function ConvertTLVFindInfoToVariant(var R : TLVFindInfo) : OleVariant;
function ConvertVariantToTLVFindInfo(const V : OleVariant) : TLVFindInfo;
function ConvertTLVFindInfoAToVariant(var R : TLVFindInfoA) : OleVariant;
function ConvertVariantToTLVFindInfoA(const V : OleVariant) : TLVFindInfoA;
function ConvertTLVFindInfoWToVariant(var R : TLVFindInfoW) : OleVariant;
function ConvertVariantToTLVFindInfoW(const V : OleVariant) : TLVFindInfoW;
function ConvertTLVHitTestInfoToVariant(var R : TLVHitTestInfo) : OleVariant;
function ConvertVariantToTLVHitTestInfo(const V : OleVariant) : TLVHitTestInfo;
function ConvertTLVItemToVariant(var R : TLVItem) : OleVariant;
function ConvertVariantToTLVItem(const V : OleVariant) : TLVItem;
function ConvertTLVItemAToVariant(var R : TLVItemA) : OleVariant;
function ConvertVariantToTLVItemA(const V : OleVariant) : TLVItemA;
function ConvertTLVItemWToVariant(var R : TLVItemW) : OleVariant;
function ConvertVariantToTLVItemW(const V : OleVariant) : TLVItemW;
function ConvertTLVKeyDownToVariant(var R : TLVKeyDown) : OleVariant;
function ConvertVariantToTLVKeyDown(const V : OleVariant) : TLVKeyDown;
function ConvertTMCHitTestInfoToVariant(var R : TMCHitTestInfo) : OleVariant;
function ConvertVariantToTMCHitTestInfo(const V : OleVariant) : TMCHitTestInfo;
function ConvertTNMCacheHintToVariant(var R : TNMCacheHint) : OleVariant;
function ConvertVariantToTNMCacheHint(const V : OleVariant) : TNMCacheHint;
function ConvertTNMCBEDragBeginToVariant(var R : TNMCBEDragBegin) : OleVariant;
function ConvertVariantToTNMCBEDragBegin(const V : OleVariant) : TNMCBEDragBegin;
function ConvertTNMCBEDragBeginAToVariant(var R : TNMCBEDragBeginA) : OleVariant;
function ConvertVariantToTNMCBEDragBeginA(const V : OleVariant) : TNMCBEDragBeginA;
function ConvertTNMCBEDragBeginWToVariant(var R : TNMCBEDragBeginW) : OleVariant;
function ConvertVariantToTNMCBEDragBeginW(const V : OleVariant) : TNMCBEDragBeginW;
function ConvertTNMCBEEndEditToVariant(var R : TNMCBEEndEdit) : OleVariant;
function ConvertVariantToTNMCBEEndEdit(const V : OleVariant) : TNMCBEEndEdit;
function ConvertTNMCBEEndEditAToVariant(var R : TNMCBEEndEditA) : OleVariant;
function ConvertVariantToTNMCBEEndEditA(const V : OleVariant) : TNMCBEEndEditA;
function ConvertTNMCBEEndEditWToVariant(var R : TNMCBEEndEditW) : OleVariant;
function ConvertVariantToTNMCBEEndEditW(const V : OleVariant) : TNMCBEEndEditW;
function ConvertTNMCharToVariant(var R : TNMChar) : OleVariant;
function ConvertVariantToTNMChar(const V : OleVariant) : TNMChar;
function ConvertTNMClickToVariant(var R : TNMClick) : OleVariant;
function ConvertVariantToTNMClick(const V : OleVariant) : TNMClick;
function ConvertTNMComboBoxExToVariant(var R : TNMComboBoxEx) : OleVariant;
function ConvertVariantToTNMComboBoxEx(const V : OleVariant) : TNMComboBoxEx;
function ConvertTNMComboBoxExAToVariant(var R : TNMComboBoxExA) : OleVariant;
function ConvertVariantToTNMComboBoxExA(const V : OleVariant) : TNMComboBoxExA;
function ConvertTNMComboBoxExWToVariant(var R : TNMComboBoxExW) : OleVariant;
function ConvertVariantToTNMComboBoxExW(const V : OleVariant) : TNMComboBoxExW;
function ConvertTNMCustomDrawToVariant(var R : TNMCustomDraw) : OleVariant;
function ConvertVariantToTNMCustomDraw(const V : OleVariant) : TNMCustomDraw;
function ConvertTNMDateTimeChangeToVariant(var R : TNMDateTimeChange) : OleVariant;
function ConvertVariantToTNMDateTimeChange(const V : OleVariant) : TNMDateTimeChange;
function ConvertTNMDateTimeFormatToVariant(var R : TNMDateTimeFormat) : OleVariant;
function ConvertVariantToTNMDateTimeFormat(const V : OleVariant) : TNMDateTimeFormat;
function ConvertTNMDateTimeFormatAToVariant(var R : TNMDateTimeFormatA) : OleVariant;
function ConvertVariantToTNMDateTimeFormatA(const V : OleVariant) : TNMDateTimeFormatA;
function ConvertTNMDateTimeFormatQueryToVariant(var R : TNMDateTimeFormatQuery) : OleVariant;
function ConvertVariantToTNMDateTimeFormatQuery(const V : OleVariant) : TNMDateTimeFormatQuery;
function ConvertTNMDateTimeFormatQueryAToVariant(var R : TNMDateTimeFormatQueryA) : OleVariant;
function ConvertVariantToTNMDateTimeFormatQueryA(const V : OleVariant) : TNMDateTimeFormatQueryA;
function ConvertTNMDateTimeFormatQueryWToVariant(var R : TNMDateTimeFormatQueryW) : OleVariant;
function ConvertVariantToTNMDateTimeFormatQueryW(const V : OleVariant) : TNMDateTimeFormatQueryW;
function ConvertTNMDateTimeFormatWToVariant(var R : TNMDateTimeFormatW) : OleVariant;
function ConvertVariantToTNMDateTimeFormatW(const V : OleVariant) : TNMDateTimeFormatW;
function ConvertTNMDateTimeStringToVariant(var R : TNMDateTimeString) : OleVariant;
function ConvertVariantToTNMDateTimeString(const V : OleVariant) : TNMDateTimeString;
function ConvertTNMDateTimeStringAToVariant(var R : TNMDateTimeStringA) : OleVariant;
function ConvertVariantToTNMDateTimeStringA(const V : OleVariant) : TNMDateTimeStringA;
function ConvertTNMDateTimeStringWToVariant(var R : TNMDateTimeStringW) : OleVariant;
function ConvertVariantToTNMDateTimeStringW(const V : OleVariant) : TNMDateTimeStringW;
function ConvertTNMDateTimeWMKeyDownToVariant(var R : TNMDateTimeWMKeyDown) : OleVariant;
function ConvertVariantToTNMDateTimeWMKeyDown(const V : OleVariant) : TNMDateTimeWMKeyDown;
function ConvertTNMDateTimeWMKeyDownAToVariant(var R : TNMDateTimeWMKeyDownA) : OleVariant;
function ConvertVariantToTNMDateTimeWMKeyDownA(const V : OleVariant) : TNMDateTimeWMKeyDownA;
function ConvertTNMDateTimeWMKeyDownWToVariant(var R : TNMDateTimeWMKeyDownW) : OleVariant;
function ConvertVariantToTNMDateTimeWMKeyDownW(const V : OleVariant) : TNMDateTimeWMKeyDownW;
function ConvertTNMDayStateToVariant(var R : TNMDayState) : OleVariant;
function ConvertVariantToTNMDayState(const V : OleVariant) : TNMDayState;
function ConvertTNMFinditemToVariant(var R : TNMFinditem) : OleVariant;
function ConvertVariantToTNMFinditem(const V : OleVariant) : TNMFinditem;
function ConvertTNMFinditemAToVariant(var R : TNMFinditemA) : OleVariant;
function ConvertVariantToTNMFinditemA(const V : OleVariant) : TNMFinditemA;
function ConvertTNMFinditemWToVariant(var R : TNMFinditemW) : OleVariant;
function ConvertVariantToTNMFinditemW(const V : OleVariant) : TNMFinditemW;
function ConvertTNMHDispInfoToVariant(var R : TNMHDispInfo) : OleVariant;
function ConvertVariantToTNMHDispInfo(const V : OleVariant) : TNMHDispInfo;
function ConvertTNMHDispInfoAToVariant(var R : TNMHDispInfoA) : OleVariant;
function ConvertVariantToTNMHDispInfoA(const V : OleVariant) : TNMHDispInfoA;
function ConvertTNMHDispInfoWToVariant(var R : TNMHDispInfoW) : OleVariant;
function ConvertVariantToTNMHDispInfoW(const V : OleVariant) : TNMHDispInfoW;
function ConvertTNMIPAddressToVariant(var R : TNMIPAddress) : OleVariant;
function ConvertVariantToTNMIPAddress(const V : OleVariant) : TNMIPAddress;
function ConvertTNMItemActivateToVariant(var R : TNMItemActivate) : OleVariant;
function ConvertVariantToTNMItemActivate(const V : OleVariant) : TNMItemActivate;
function ConvertTNMKeyToVariant(var R : TNMKey) : OleVariant;
function ConvertVariantToTNMKey(const V : OleVariant) : TNMKey;
function ConvertTNMListViewToVariant(var R : TNMListView) : OleVariant;
function ConvertVariantToTNMListView(const V : OleVariant) : TNMListView;
function ConvertTNMLVCacheHintToVariant(var R : TNMLVCacheHint) : OleVariant;
function ConvertVariantToTNMLVCacheHint(const V : OleVariant) : TNMLVCacheHint;
function ConvertTNMLVCustomDrawToVariant(var R : TNMLVCustomDraw) : OleVariant;
function ConvertVariantToTNMLVCustomDraw(const V : OleVariant) : TNMLVCustomDraw;
function ConvertTNMLVFinditemToVariant(var R : TNMLVFinditem) : OleVariant;
function ConvertVariantToTNMLVFinditem(const V : OleVariant) : TNMLVFinditem;
function ConvertTNMLVFinditemAToVariant(var R : TNMLVFinditemA) : OleVariant;
function ConvertVariantToTNMLVFinditemA(const V : OleVariant) : TNMLVFinditemA;
function ConvertTNMLVFinditemWToVariant(var R : TNMLVFinditemW) : OleVariant;
function ConvertVariantToTNMLVFinditemW(const V : OleVariant) : TNMLVFinditemW;
function ConvertTNMLVGetInfoTipToVariant(var R : TNMLVGetInfoTip) : OleVariant;
function ConvertVariantToTNMLVGetInfoTip(const V : OleVariant) : TNMLVGetInfoTip;
function ConvertTNMLVGetInfoTipAToVariant(var R : TNMLVGetInfoTipA) : OleVariant;
function ConvertVariantToTNMLVGetInfoTipA(const V : OleVariant) : TNMLVGetInfoTipA;
function ConvertTNMLVGetInfoTipWToVariant(var R : TNMLVGetInfoTipW) : OleVariant;
function ConvertVariantToTNMLVGetInfoTipW(const V : OleVariant) : TNMLVGetInfoTipW;
function ConvertTNMLVODStateChangeToVariant(var R : TNMLVODStateChange) : OleVariant;
function ConvertVariantToTNMLVODStateChange(const V : OleVariant) : TNMLVODStateChange;
function ConvertTNMMouseToVariant(var R : TNMMouse) : OleVariant;
function ConvertVariantToTNMMouse(const V : OleVariant) : TNMMouse;
function ConvertTNMObjectNotifyToVariant(var R : TNMObjectNotify) : OleVariant;
function ConvertVariantToTNMObjectNotify(const V : OleVariant) : TNMObjectNotify;
function ConvertTNMPGCalcSizeToVariant(var R : TNMPGCalcSize) : OleVariant;
function ConvertVariantToTNMPGCalcSize(const V : OleVariant) : TNMPGCalcSize;
function ConvertTNMPGScrollToVariant(var R : TNMPGScroll) : OleVariant;
function ConvertVariantToTNMPGScroll(const V : OleVariant) : TNMPGScroll;
function ConvertTNMRBAutoSizeToVariant(var R : TNMRBAutoSize) : OleVariant;
function ConvertVariantToTNMRBAutoSize(const V : OleVariant) : TNMRBAutoSize;
function ConvertTNMReBarToVariant(var R : TNMReBar) : OleVariant;
function ConvertVariantToTNMReBar(const V : OleVariant) : TNMReBar;
function ConvertTNMReBarChildSizeToVariant(var R : TNMReBarChildSize) : OleVariant;
function ConvertVariantToTNMReBarChildSize(const V : OleVariant) : TNMReBarChildSize;
function ConvertTNMSelChangeToVariant(var R : TNMSelChange) : OleVariant;
function ConvertVariantToTNMSelChange(const V : OleVariant) : TNMSelChange;
function ConvertTNMSelectToVariant(var R : TNMSelect) : OleVariant;
function ConvertVariantToTNMSelect(const V : OleVariant) : TNMSelect;
function ConvertTNMTBCustomDrawToVariant(var R : TNMTBCustomDraw) : OleVariant;
function ConvertVariantToTNMTBCustomDraw(const V : OleVariant) : TNMTBCustomDraw;
function ConvertTNMTBDispInfoToVariant(var R : TNMTBDispInfo) : OleVariant;
function ConvertVariantToTNMTBDispInfo(const V : OleVariant) : TNMTBDispInfo;
function ConvertTNMTBDispInfoAToVariant(var R : TNMTBDispInfoA) : OleVariant;
function ConvertVariantToTNMTBDispInfoA(const V : OleVariant) : TNMTBDispInfoA;
function ConvertTNMTBDispInfoWToVariant(var R : TNMTBDispInfoW) : OleVariant;
function ConvertVariantToTNMTBDispInfoW(const V : OleVariant) : TNMTBDispInfoW;
function ConvertTNMTBGetInfoTipToVariant(var R : TNMTBGetInfoTip) : OleVariant;
function ConvertVariantToTNMTBGetInfoTip(const V : OleVariant) : TNMTBGetInfoTip;
function ConvertTNMTBGetInfoTipAToVariant(var R : TNMTBGetInfoTipA) : OleVariant;
function ConvertVariantToTNMTBGetInfoTipA(const V : OleVariant) : TNMTBGetInfoTipA;
function ConvertTNMTBGetInfoTipWToVariant(var R : TNMTBGetInfoTipW) : OleVariant;
function ConvertVariantToTNMTBGetInfoTipW(const V : OleVariant) : TNMTBGetInfoTipW;
function ConvertTNMTBHotItemToVariant(var R : TNMTBHotItem) : OleVariant;
function ConvertVariantToTNMTBHotItem(const V : OleVariant) : TNMTBHotItem;
function ConvertTNMToolBarToVariant(var R : TNMToolBar) : OleVariant;
function ConvertVariantToTNMToolBar(const V : OleVariant) : TNMToolBar;
function ConvertTNMToolBarAToVariant(var R : TNMToolBarA) : OleVariant;
function ConvertVariantToTNMToolBarA(const V : OleVariant) : TNMToolBarA;
function ConvertTNMToolBarWToVariant(var R : TNMToolBarW) : OleVariant;
function ConvertVariantToTNMToolBarW(const V : OleVariant) : TNMToolBarW;
function ConvertTNMTreeViewToVariant(var R : TNMTreeView) : OleVariant;
function ConvertVariantToTNMTreeView(const V : OleVariant) : TNMTreeView;
function ConvertTNMTreeViewAToVariant(var R : TNMTreeViewA) : OleVariant;
function ConvertVariantToTNMTreeViewA(const V : OleVariant) : TNMTreeViewA;
function ConvertTNMTreeViewWToVariant(var R : TNMTreeViewW) : OleVariant;
function ConvertVariantToTNMTreeViewW(const V : OleVariant) : TNMTreeViewW;
function ConvertTNMTTCustomDrawToVariant(var R : TNMTTCustomDraw) : OleVariant;
function ConvertVariantToTNMTTCustomDraw(const V : OleVariant) : TNMTTCustomDraw;
function ConvertTNMTTDispInfoToVariant(var R : TNMTTDispInfo) : OleVariant;
function ConvertVariantToTNMTTDispInfo(const V : OleVariant) : TNMTTDispInfo;
function ConvertTNMTTDispInfoAToVariant(var R : TNMTTDispInfoA) : OleVariant;
function ConvertVariantToTNMTTDispInfoA(const V : OleVariant) : TNMTTDispInfoA;
function ConvertTNMTTDispInfoWToVariant(var R : TNMTTDispInfoW) : OleVariant;
function ConvertVariantToTNMTTDispInfoW(const V : OleVariant) : TNMTTDispInfoW;
function ConvertTNMTVCustomDrawToVariant(var R : TNMTVCustomDraw) : OleVariant;
function ConvertVariantToTNMTVCustomDraw(const V : OleVariant) : TNMTVCustomDraw;
function ConvertTNMTVGetInfoTipToVariant(var R : TNMTVGetInfoTip) : OleVariant;
function ConvertVariantToTNMTVGetInfoTip(const V : OleVariant) : TNMTVGetInfoTip;
function ConvertTNMTVGetInfoTipAToVariant(var R : TNMTVGetInfoTipA) : OleVariant;
function ConvertVariantToTNMTVGetInfoTipA(const V : OleVariant) : TNMTVGetInfoTipA;
function ConvertTNMTVGetInfoTipWToVariant(var R : TNMTVGetInfoTipW) : OleVariant;
function ConvertVariantToTNMTVGetInfoTipW(const V : OleVariant) : TNMTVGetInfoTipW;
function ConvertTNMUpDownToVariant(var R : TNMUpDown) : OleVariant;
function ConvertVariantToTNMUpDown(const V : OleVariant) : TNMUpDown;
function ConvertTOOLINFOToVariant(var R : TOOLINFO) : OleVariant;
function ConvertVariantToTOOLINFO(const V : OleVariant) : TOOLINFO;
function ConvertTOOLINFOAToVariant(var R : TOOLINFOA) : OleVariant;
function ConvertVariantToTOOLINFOA(const V : OleVariant) : TOOLINFOA;
function ConvertTOOLINFOWToVariant(var R : TOOLINFOW) : OleVariant;
function ConvertVariantToTOOLINFOW(const V : OleVariant) : TOOLINFOW;
function ConvertTOOLTIPTEXTToVariant(var R : TOOLTIPTEXT) : OleVariant;
function ConvertVariantToTOOLTIPTEXT(const V : OleVariant) : TOOLTIPTEXT;
function ConvertTOOLTIPTEXTAToVariant(var R : TOOLTIPTEXTA) : OleVariant;
function ConvertVariantToTOOLTIPTEXTA(const V : OleVariant) : TOOLTIPTEXTA;
function ConvertTOOLTIPTEXTWToVariant(var R : TOOLTIPTEXTW) : OleVariant;
function ConvertVariantToTOOLTIPTEXTW(const V : OleVariant) : TOOLTIPTEXTW;
function ConvertTPBRangeToVariant(var R : TPBRange) : OleVariant;
function ConvertVariantToTPBRange(const V : OleVariant) : TPBRange;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
function ConvertTPropSheetHeaderToVariant(var R : TPropSheetHeader) : OleVariant;
function ConvertVariantToTPropSheetHeader(const V : OleVariant) : TPropSheetHeader;
function ConvertTPropSheetHeaderAToVariant(var R : TPropSheetHeaderA) : OleVariant;
function ConvertVariantToTPropSheetHeaderA(const V : OleVariant) : TPropSheetHeaderA;
function ConvertTPropSheetHeaderWToVariant(var R : TPropSheetHeaderW) : OleVariant;
function ConvertVariantToTPropSheetHeaderW(const V : OleVariant) : TPropSheetHeaderW;
function ConvertTPropSheetPageToVariant(var R : TPropSheetPage) : OleVariant;
function ConvertVariantToTPropSheetPage(const V : OleVariant) : TPropSheetPage;
function ConvertTPropSheetPageAToVariant(var R : TPropSheetPageA) : OleVariant;
function ConvertVariantToTPropSheetPageA(const V : OleVariant) : TPropSheetPageA;
function ConvertTPropSheetPageWToVariant(var R : TPropSheetPageW) : OleVariant;
function ConvertVariantToTPropSheetPageW(const V : OleVariant) : TPropSheetPageW;
function ConvertTRBHitTestInfoToVariant(var R : TRBHitTestInfo) : OleVariant;
function ConvertVariantToTRBHitTestInfo(const V : OleVariant) : TRBHitTestInfo;
function ConvertTReBarBandInfoToVariant(var R : TReBarBandInfo) : OleVariant;
function ConvertVariantToTReBarBandInfo(const V : OleVariant) : TReBarBandInfo;
function ConvertTReBarBandInfoAToVariant(var R : TReBarBandInfoA) : OleVariant;
function ConvertVariantToTReBarBandInfoA(const V : OleVariant) : TReBarBandInfoA;
function ConvertTReBarBandInfoWToVariant(var R : TReBarBandInfoW) : OleVariant;
function ConvertVariantToTReBarBandInfoW(const V : OleVariant) : TReBarBandInfoW;
function ConvertTReBarInfoToVariant(var R : TReBarInfo) : OleVariant;
function ConvertVariantToTReBarInfo(const V : OleVariant) : TReBarInfo;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
function ConvertTScrollInfoToVariant(var R : TScrollInfo) : OleVariant;
function ConvertVariantToTScrollInfo(const V : OleVariant) : TScrollInfo;
function ConvertTSystemTimeToVariant(var R : TSystemTime) : OleVariant;
function ConvertVariantToTSystemTime(const V : OleVariant) : TSystemTime;
function ConvertTTBAddBitmapToVariant(var R : TTBAddBitmap) : OleVariant;
function ConvertVariantToTTBAddBitmap(const V : OleVariant) : TTBAddBitmap;
function ConvertTTBButtonToVariant(var R : TTBButton) : OleVariant;
function ConvertVariantToTTBButton(const V : OleVariant) : TTBButton;
function ConvertTTBButtonInfoToVariant(var R : TTBButtonInfo) : OleVariant;
function ConvertVariantToTTBButtonInfo(const V : OleVariant) : TTBButtonInfo;
function ConvertTTBButtonInfoAToVariant(var R : TTBButtonInfoA) : OleVariant;
function ConvertVariantToTTBButtonInfoA(const V : OleVariant) : TTBButtonInfoA;
function ConvertTTBButtonInfoWToVariant(var R : TTBButtonInfoW) : OleVariant;
function ConvertVariantToTTBButtonInfoW(const V : OleVariant) : TTBButtonInfoW;
function ConvertTTBInsertMarkToVariant(var R : TTBInsertMark) : OleVariant;
function ConvertVariantToTTBInsertMark(const V : OleVariant) : TTBInsertMark;
function ConvertTTBReplaceBitmapToVariant(var R : TTBReplaceBitmap) : OleVariant;
function ConvertVariantToTTBReplaceBitmap(const V : OleVariant) : TTBReplaceBitmap;
function ConvertTTBSaveParamsToVariant(var R : TTBSaveParams) : OleVariant;
function ConvertVariantToTTBSaveParams(const V : OleVariant) : TTBSaveParams;
function ConvertTTBSaveParamsAToVariant(var R : TTBSaveParamsA) : OleVariant;
function ConvertVariantToTTBSaveParamsA(const V : OleVariant) : TTBSaveParamsA;
function ConvertTTBSaveParamsWToVariant(var R : TTBSaveParamsW) : OleVariant;
function ConvertVariantToTTBSaveParamsW(const V : OleVariant) : TTBSaveParamsW;
function ConvertTTCHitTestInfoToVariant(var R : TTCHitTestInfo) : OleVariant;
function ConvertVariantToTTCHitTestInfo(const V : OleVariant) : TTCHitTestInfo;
function ConvertTTCItemToVariant(var R : TTCItem) : OleVariant;
function ConvertVariantToTTCItem(const V : OleVariant) : TTCItem;
function ConvertTTCItemAToVariant(var R : TTCItemA) : OleVariant;
function ConvertVariantToTTCItemA(const V : OleVariant) : TTCItemA;
function ConvertTTCItemHeaderToVariant(var R : TTCItemHeader) : OleVariant;
function ConvertVariantToTTCItemHeader(const V : OleVariant) : TTCItemHeader;
function ConvertTTCItemHeaderAToVariant(var R : TTCItemHeaderA) : OleVariant;
function ConvertVariantToTTCItemHeaderA(const V : OleVariant) : TTCItemHeaderA;
function ConvertTTCItemHeaderWToVariant(var R : TTCItemHeaderW) : OleVariant;
function ConvertVariantToTTCItemHeaderW(const V : OleVariant) : TTCItemHeaderW;
function ConvertTTCItemWToVariant(var R : TTCItemW) : OleVariant;
function ConvertVariantToTTCItemW(const V : OleVariant) : TTCItemW;
function ConvertTTCKeyDownToVariant(var R : TTCKeyDown) : OleVariant;
function ConvertVariantToTTCKeyDown(const V : OleVariant) : TTCKeyDown;
function ConvertTTHITTESTINFOToVariant(var R : TTHITTESTINFO) : OleVariant;
function ConvertVariantToTTHITTESTINFO(const V : OleVariant) : TTHITTESTINFO;
function ConvertTTHITTESTINFOAToVariant(var R : TTHITTESTINFOA) : OleVariant;
function ConvertVariantToTTHITTESTINFOA(const V : OleVariant) : TTHITTESTINFOA;
function ConvertTTHITTESTINFOWToVariant(var R : TTHITTESTINFOW) : OleVariant;
function ConvertVariantToTTHITTESTINFOW(const V : OleVariant) : TTHITTESTINFOW;
function ConvertTToolInfoToVariant(var R : TToolInfo) : OleVariant;
function ConvertVariantToTToolInfo(const V : OleVariant) : TToolInfo;
function ConvertTToolInfoAToVariant(var R : TToolInfoA) : OleVariant;
function ConvertVariantToTToolInfoA(const V : OleVariant) : TToolInfoA;
function ConvertTToolInfoWToVariant(var R : TToolInfoW) : OleVariant;
function ConvertVariantToTToolInfoW(const V : OleVariant) : TToolInfoW;
function ConvertTToolTipTextToVariant(var R : TToolTipText) : OleVariant;
function ConvertVariantToTToolTipText(const V : OleVariant) : TToolTipText;
function ConvertTToolTipTextAToVariant(var R : TToolTipTextA) : OleVariant;
function ConvertVariantToTToolTipTextA(const V : OleVariant) : TToolTipTextA;
function ConvertTToolTipTextWToVariant(var R : TToolTipTextW) : OleVariant;
function ConvertVariantToTToolTipTextW(const V : OleVariant) : TToolTipTextW;
function ConvertTTrackMouseEventToVariant(var R : TTrackMouseEvent) : OleVariant;
function ConvertVariantToTTrackMouseEvent(const V : OleVariant) : TTrackMouseEvent;
function ConvertTTTHitTestInfoToVariant(var R : TTTHitTestInfo) : OleVariant;
function ConvertVariantToTTTHitTestInfo(const V : OleVariant) : TTTHitTestInfo;
function ConvertTTTHitTestInfoAToVariant(var R : TTTHitTestInfoA) : OleVariant;
function ConvertVariantToTTTHitTestInfoA(const V : OleVariant) : TTTHitTestInfoA;
function ConvertTTTHitTestInfoWToVariant(var R : TTTHitTestInfoW) : OleVariant;
function ConvertVariantToTTTHitTestInfoW(const V : OleVariant) : TTTHitTestInfoW;
function ConvertTTVDispInfoToVariant(var R : TTVDispInfo) : OleVariant;
function ConvertVariantToTTVDispInfo(const V : OleVariant) : TTVDispInfo;
function ConvertTTVDispInfoAToVariant(var R : TTVDispInfoA) : OleVariant;
function ConvertVariantToTTVDispInfoA(const V : OleVariant) : TTVDispInfoA;
function ConvertTTVDispInfoWToVariant(var R : TTVDispInfoW) : OleVariant;
function ConvertVariantToTTVDispInfoW(const V : OleVariant) : TTVDispInfoW;
function ConvertTTVHitTestInfoToVariant(var R : TTVHitTestInfo) : OleVariant;
function ConvertVariantToTTVHitTestInfo(const V : OleVariant) : TTVHitTestInfo;
function ConvertTTVInsertStructToVariant(var R : TTVInsertStruct) : OleVariant;
function ConvertVariantToTTVInsertStruct(const V : OleVariant) : TTVInsertStruct;
function ConvertTTVInsertStructAToVariant(var R : TTVInsertStructA) : OleVariant;
function ConvertVariantToTTVInsertStructA(const V : OleVariant) : TTVInsertStructA;
function ConvertTTVInsertStructWToVariant(var R : TTVInsertStructW) : OleVariant;
function ConvertVariantToTTVInsertStructW(const V : OleVariant) : TTVInsertStructW;
function ConvertTTVItemToVariant(var R : TTVItem) : OleVariant;
function ConvertVariantToTTVItem(const V : OleVariant) : TTVItem;
function ConvertTTVItemAToVariant(var R : TTVItemA) : OleVariant;
function ConvertVariantToTTVItemA(const V : OleVariant) : TTVItemA;
function ConvertTTVItemExToVariant(var R : TTVItemEx) : OleVariant;
function ConvertVariantToTTVItemEx(const V : OleVariant) : TTVItemEx;
function ConvertTTVItemExAToVariant(var R : TTVItemExA) : OleVariant;
function ConvertVariantToTTVItemExA(const V : OleVariant) : TTVItemExA;
function ConvertTTVItemExWToVariant(var R : TTVItemExW) : OleVariant;
function ConvertVariantToTTVItemExW(const V : OleVariant) : TTVItemExW;
function ConvertTTVItemWToVariant(var R : TTVItemW) : OleVariant;
function ConvertVariantToTTVItemW(const V : OleVariant) : TTVItemW;
function ConvertTTVKeyDownToVariant(var R : TTVKeyDown) : OleVariant;
function ConvertVariantToTTVKeyDown(const V : OleVariant) : TTVKeyDown;
function ConvertTTVSortCBToVariant(var R : TTVSortCB) : OleVariant;
function ConvertVariantToTTVSortCB(const V : OleVariant) : TTVSortCB;
function ConvertTUDAccelToVariant(var R : TUDAccel) : OleVariant;
function ConvertVariantToTUDAccel(const V : OleVariant) : TUDAccel;
function ConvertTV_DISPINFOToVariant(var R : TV_DISPINFO) : OleVariant;
function ConvertVariantToTV_DISPINFO(const V : OleVariant) : TV_DISPINFO;
function ConvertTV_DISPINFOAToVariant(var R : TV_DISPINFOA) : OleVariant;
function ConvertVariantToTV_DISPINFOA(const V : OleVariant) : TV_DISPINFOA;
function ConvertTV_DISPINFOWToVariant(var R : TV_DISPINFOW) : OleVariant;
function ConvertVariantToTV_DISPINFOW(const V : OleVariant) : TV_DISPINFOW;
function ConvertTV_HITTESTINFOToVariant(var R : TV_HITTESTINFO) : OleVariant;
function ConvertVariantToTV_HITTESTINFO(const V : OleVariant) : TV_HITTESTINFO;
function ConvertTV_INSERTSTRUCTToVariant(var R : TV_INSERTSTRUCT) : OleVariant;
function ConvertVariantToTV_INSERTSTRUCT(const V : OleVariant) : TV_INSERTSTRUCT;
function ConvertTV_INSERTSTRUCTAToVariant(var R : TV_INSERTSTRUCTA) : OleVariant;
function ConvertVariantToTV_INSERTSTRUCTA(const V : OleVariant) : TV_INSERTSTRUCTA;
function ConvertTV_INSERTSTRUCTWToVariant(var R : TV_INSERTSTRUCTW) : OleVariant;
function ConvertVariantToTV_INSERTSTRUCTW(const V : OleVariant) : TV_INSERTSTRUCTW;
function ConvertTV_ITEMToVariant(var R : TV_ITEM) : OleVariant;
function ConvertVariantToTV_ITEM(const V : OleVariant) : TV_ITEM;
function ConvertTV_ITEMAToVariant(var R : TV_ITEMA) : OleVariant;
function ConvertVariantToTV_ITEMA(const V : OleVariant) : TV_ITEMA;
function ConvertTV_ITEMWToVariant(var R : TV_ITEMW) : OleVariant;
function ConvertVariantToTV_ITEMW(const V : OleVariant) : TV_ITEMW;
function ConvertTV_KEYDOWNToVariant(var R : TV_KEYDOWN) : OleVariant;
function ConvertVariantToTV_KEYDOWN(const V : OleVariant) : TV_KEYDOWN;
function ConvertTV_SORTCBToVariant(var R : TV_SORTCB) : OleVariant;
function ConvertVariantToTV_SORTCB(const V : OleVariant) : TV_SORTCB;
function ConvertUDACCELToVariant(var R : UDACCEL) : OleVariant;
function ConvertVariantToUDACCEL(const V : OleVariant) : UDACCEL;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type ___COLORMAP__Wrapper = class(TDCRecordWrapper)
private
fR : _COLORMAP;
public
function GetRecordPtr : pointer; override;
published
procedure setcFrom(const val : TColorRef);
function getcFrom : TColorRef;
property cFrom : TColorRef read getcFrom write setcFrom;
procedure setcTo(const val : TColorRef);
function getcTo : TColorRef;
property cTo : TColorRef read getcTo write setcTo;
end;
type ___HD_HITTESTINFO__Wrapper = class(TDCRecordWrapper)
private
fR : _HD_HITTESTINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setFlags(const val : Cardinal);
function getFlags : Cardinal;
property Flags : Cardinal read getFlags write setFlags;
procedure setItem(const val : Integer);
function getItem : Integer;
property Item : Integer read getItem write setItem;
end;
type ___HD_ITEM__Wrapper = class(TDCRecordWrapper)
private
fR : _HD_ITEM;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : Cardinal);
function getMask : Cardinal;
property Mask : Cardinal read getMask write setMask;
procedure setcxy(const val : Integer);
function getcxy : Integer;
property cxy : Integer read getcxy write setcxy;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setfmt(const val : Integer);
function getfmt : Integer;
property fmt : Integer read getfmt write setfmt;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiOrder(const val : Integer);
function getiOrder : Integer;
property iOrder : Integer read getiOrder write setiOrder;
end;
type ___HD_ITEMA__Wrapper = class(TDCRecordWrapper)
private
fR : _HD_ITEMA;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : Cardinal);
function getMask : Cardinal;
property Mask : Cardinal read getMask write setMask;
procedure setcxy(const val : Integer);
function getcxy : Integer;
property cxy : Integer read getcxy write setcxy;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setfmt(const val : Integer);
function getfmt : Integer;
property fmt : Integer read getfmt write setfmt;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiOrder(const val : Integer);
function getiOrder : Integer;
property iOrder : Integer read getiOrder write setiOrder;
end;
type ___HD_ITEMW__Wrapper = class(TDCRecordWrapper)
private
fR : _HD_ITEMW;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : Cardinal);
function getMask : Cardinal;
property Mask : Cardinal read getMask write setMask;
procedure setcxy(const val : Integer);
function getcxy : Integer;
property cxy : Integer read getcxy write setcxy;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setfmt(const val : Integer);
function getfmt : Integer;
property fmt : Integer read getfmt write setfmt;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiOrder(const val : Integer);
function getiOrder : Integer;
property iOrder : Integer read getiOrder write setiOrder;
end;
type ___HD_LAYOUT__Wrapper = class(TDCRecordWrapper)
private
fR : _HD_LAYOUT;
public
function GetRecordPtr : pointer; override;
published
end;
type ___IMAGEINFO__Wrapper = class(TDCRecordWrapper)
private
fR : _IMAGEINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setUnused1(const val : Integer);
function getUnused1 : Integer;
property Unused1 : Integer read getUnused1 write setUnused1;
procedure setUnused2(const val : Integer);
function getUnused2 : Integer;
property Unused2 : Integer read getUnused2 write setUnused2;
end;
type ___IMAGELISTDRAWPARAMS__Wrapper = class(TDCRecordWrapper)
private
fR : _IMAGELISTDRAWPARAMS;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure sethiml(const val : HIMAGELIST);
function gethiml : HIMAGELIST;
property himl : HIMAGELIST read gethiml write sethiml;
procedure seti(const val : Integer);
function geti : Integer;
property i : Integer read geti write seti;
procedure setx(const val : Integer);
function getx : Integer;
property x : Integer read getx write setx;
procedure sety(const val : Integer);
function gety : Integer;
property y : Integer read gety write sety;
procedure setcx(const val : Integer);
function getcx : Integer;
property cx : Integer read getcx write setcx;
procedure setcy(const val : Integer);
function getcy : Integer;
property cy : Integer read getcy write setcy;
procedure setxBitmap(const val : Integer);
function getxBitmap : Integer;
property xBitmap : Integer read getxBitmap write setxBitmap;
procedure setyBitmap(const val : Integer);
function getyBitmap : Integer;
property yBitmap : Integer read getyBitmap write setyBitmap;
procedure setrgbBk(const val : COLORREF);
function getrgbBk : COLORREF;
property rgbBk : COLORREF read getrgbBk write setrgbBk;
procedure setrgbFg(const val : COLORREF);
function getrgbFg : COLORREF;
property rgbFg : COLORREF read getrgbFg write setrgbFg;
procedure setfStyle(const val : UINT);
function getfStyle : UINT;
property fStyle : UINT read getfStyle write setfStyle;
procedure setdwRop(const val : DWORD);
function getdwRop : DWORD;
property dwRop : DWORD read getdwRop write setdwRop;
end;
type ___LV_COLUMN__Wrapper = class(TDCRecordWrapper)
private
fR : _LV_COLUMN;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setfmt(const val : Integer);
function getfmt : Integer;
property fmt : Integer read getfmt write setfmt;
procedure setcx(const val : Integer);
function getcx : Integer;
property cx : Integer read getcx write setcx;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiOrder(const val : Integer);
function getiOrder : Integer;
property iOrder : Integer read getiOrder write setiOrder;
end;
type ___LV_COLUMNA__Wrapper = class(TDCRecordWrapper)
private
fR : _LV_COLUMNA;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setfmt(const val : Integer);
function getfmt : Integer;
property fmt : Integer read getfmt write setfmt;
procedure setcx(const val : Integer);
function getcx : Integer;
property cx : Integer read getcx write setcx;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiOrder(const val : Integer);
function getiOrder : Integer;
property iOrder : Integer read getiOrder write setiOrder;
end;
type ___LV_COLUMNW__Wrapper = class(TDCRecordWrapper)
private
fR : _LV_COLUMNW;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setfmt(const val : Integer);
function getfmt : Integer;
property fmt : Integer read getfmt write setfmt;
procedure setcx(const val : Integer);
function getcx : Integer;
property cx : Integer read getcx write setcx;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiOrder(const val : Integer);
function getiOrder : Integer;
property iOrder : Integer read getiOrder write setiOrder;
end;
type ___LV_DISPINFO__Wrapper = class(TDCRecordWrapper)
private
fR : _LV_DISPINFO;
public
function GetRecordPtr : pointer; override;
published
end;
type ___LV_DISPINFOW__Wrapper = class(TDCRecordWrapper)
private
fR : _LV_DISPINFOW;
public
function GetRecordPtr : pointer; override;
published
end;
type ___LV_FINDINFO__Wrapper = class(TDCRecordWrapper)
private
fR : _LV_FINDINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setvkDirection(const val : UINT);
function getvkDirection : UINT;
property vkDirection : UINT read getvkDirection write setvkDirection;
end;
type ___LV_FINDINFOA__Wrapper = class(TDCRecordWrapper)
private
fR : _LV_FINDINFOA;
public
function GetRecordPtr : pointer; override;
published
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setvkDirection(const val : UINT);
function getvkDirection : UINT;
property vkDirection : UINT read getvkDirection write setvkDirection;
end;
type ___LV_FINDINFOW__Wrapper = class(TDCRecordWrapper)
private
fR : _LV_FINDINFOW;
public
function GetRecordPtr : pointer; override;
published
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setvkDirection(const val : UINT);
function getvkDirection : UINT;
property vkDirection : UINT read getvkDirection write setvkDirection;
end;
type ___LV_HITTESTINFO__Wrapper = class(TDCRecordWrapper)
private
fR : _LV_HITTESTINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
end;
type ___LV_ITEM__Wrapper = class(TDCRecordWrapper)
private
fR : _LV_ITEM;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setstate(const val : UINT);
function getstate : UINT;
property state : UINT read getstate write setstate;
procedure setstateMask(const val : UINT);
function getstateMask : UINT;
property stateMask : UINT read getstateMask write setstateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setiIndent(const val : Integer);
function getiIndent : Integer;
property iIndent : Integer read getiIndent write setiIndent;
end;
type ___LV_ITEMA__Wrapper = class(TDCRecordWrapper)
private
fR : _LV_ITEMA;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setstate(const val : UINT);
function getstate : UINT;
property state : UINT read getstate write setstate;
procedure setstateMask(const val : UINT);
function getstateMask : UINT;
property stateMask : UINT read getstateMask write setstateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setiIndent(const val : Integer);
function getiIndent : Integer;
property iIndent : Integer read getiIndent write setiIndent;
end;
type ___LV_ITEMW__Wrapper = class(TDCRecordWrapper)
private
fR : _LV_ITEMW;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setstate(const val : UINT);
function getstate : UINT;
property state : UINT read getstate write setstate;
procedure setstateMask(const val : UINT);
function getstateMask : UINT;
property stateMask : UINT read getstateMask write setstateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setiIndent(const val : Integer);
function getiIndent : Integer;
property iIndent : Integer read getiIndent write setiIndent;
end;
type ___LV_KEYDOWN__Wrapper = class(TDCRecordWrapper)
private
fR : _LV_KEYDOWN;
public
function GetRecordPtr : pointer; override;
published
procedure setwVKey(const val : Word);
function getwVKey : Word;
property wVKey : Word read getwVKey write setwVKey;
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
end;
type ___NM_LISTVIEW__Wrapper = class(TDCRecordWrapper)
private
fR : _NM_LISTVIEW;
public
function GetRecordPtr : pointer; override;
published
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setuNewState(const val : UINT);
function getuNewState : UINT;
property uNewState : UINT read getuNewState write setuNewState;
procedure setuOldState(const val : UINT);
function getuOldState : UINT;
property uOldState : UINT read getuOldState write setuOldState;
procedure setuChanged(const val : UINT);
function getuChanged : UINT;
property uChanged : UINT read getuChanged write setuChanged;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type ___NM_TREEVIEW__Wrapper = class(TDCRecordWrapper)
private
fR : _NM_TREEVIEW;
public
function GetRecordPtr : pointer; override;
published
procedure setaction(const val : UINT);
function getaction : UINT;
property action : UINT read getaction write setaction;
end;
type ___NM_TREEVIEWA__Wrapper = class(TDCRecordWrapper)
private
fR : _NM_TREEVIEWA;
public
function GetRecordPtr : pointer; override;
published
procedure setaction(const val : UINT);
function getaction : UINT;
property action : UINT read getaction write setaction;
end;
type ___NM_TREEVIEWW__Wrapper = class(TDCRecordWrapper)
private
fR : _NM_TREEVIEWW;
public
function GetRecordPtr : pointer; override;
published
procedure setaction(const val : UINT);
function getaction : UINT;
property action : UINT read getaction write setaction;
end;
type ___NM_UPDOWN__Wrapper = class(TDCRecordWrapper)
private
fR : _NM_UPDOWN;
public
function GetRecordPtr : pointer; override;
published
procedure setiPos(const val : Integer);
function getiPos : Integer;
property iPos : Integer read getiPos write setiPos;
procedure setiDelta(const val : Integer);
function getiDelta : Integer;
property iDelta : Integer read getiDelta write setiDelta;
end;
type ___NMTBCUSTOMDRAW__Wrapper = class(TDCRecordWrapper)
private
fR : _NMTBCUSTOMDRAW;
public
function GetRecordPtr : pointer; override;
published
procedure setclrText(const val : COLORREF);
function getclrText : COLORREF;
property clrText : COLORREF read getclrText write setclrText;
procedure setclrMark(const val : COLORREF);
function getclrMark : COLORREF;
property clrMark : COLORREF read getclrMark write setclrMark;
procedure setclrTextHighlight(const val : COLORREF);
function getclrTextHighlight : COLORREF;
property clrTextHighlight : COLORREF read getclrTextHighlight write setclrTextHighlight;
procedure setclrBtnFace(const val : COLORREF);
function getclrBtnFace : COLORREF;
property clrBtnFace : COLORREF read getclrBtnFace write setclrBtnFace;
procedure setclrBtnHighlight(const val : COLORREF);
function getclrBtnHighlight : COLORREF;
property clrBtnHighlight : COLORREF read getclrBtnHighlight write setclrBtnHighlight;
procedure setclrHighlightHotTrack(const val : COLORREF);
function getclrHighlightHotTrack : COLORREF;
property clrHighlightHotTrack : COLORREF read getclrHighlightHotTrack write setclrHighlightHotTrack;
procedure setnStringBkMode(const val : Integer);
function getnStringBkMode : Integer;
property nStringBkMode : Integer read getnStringBkMode write setnStringBkMode;
procedure setnHLStringBkMode(const val : Integer);
function getnHLStringBkMode : Integer;
property nHLStringBkMode : Integer read getnHLStringBkMode write setnHLStringBkMode;
end;
type ___PROPSHEETHEADER__Wrapper = class(TDCRecordWrapper)
private
fR : _PROPSHEETHEADER;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : Longint);
function getdwSize : Longint;
property dwSize : Longint read getdwSize write setdwSize;
procedure setdwFlags(const val : Longint);
function getdwFlags : Longint;
property dwFlags : Longint read getdwFlags write setdwFlags;
procedure sethInstance(const val : THandle);
function gethInstance : THandle;
property hInstance : THandle read gethInstance write sethInstance;
procedure sethIcon(const val : THandle);
function gethIcon : THandle;
property hIcon : THandle read gethIcon write sethIcon;
procedure setnPages(const val : Integer);
function getnPages : Integer;
property nPages : Integer read getnPages write setnPages;
procedure setnStartPage(const val : Integer);
function getnStartPage : Integer;
property nStartPage : Integer read getnStartPage write setnStartPage;
end;
type ___PROPSHEETHEADERA__Wrapper = class(TDCRecordWrapper)
private
fR : _PROPSHEETHEADERA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : Longint);
function getdwSize : Longint;
property dwSize : Longint read getdwSize write setdwSize;
procedure setdwFlags(const val : Longint);
function getdwFlags : Longint;
property dwFlags : Longint read getdwFlags write setdwFlags;
procedure sethInstance(const val : THandle);
function gethInstance : THandle;
property hInstance : THandle read gethInstance write sethInstance;
procedure sethIcon(const val : THandle);
function gethIcon : THandle;
property hIcon : THandle read gethIcon write sethIcon;
procedure setnPages(const val : Integer);
function getnPages : Integer;
property nPages : Integer read getnPages write setnPages;
procedure setnStartPage(const val : Integer);
function getnStartPage : Integer;
property nStartPage : Integer read getnStartPage write setnStartPage;
end;
type ___PROPSHEETHEADERW__Wrapper = class(TDCRecordWrapper)
private
fR : _PROPSHEETHEADERW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : Longint);
function getdwSize : Longint;
property dwSize : Longint read getdwSize write setdwSize;
procedure setdwFlags(const val : Longint);
function getdwFlags : Longint;
property dwFlags : Longint read getdwFlags write setdwFlags;
procedure sethInstance(const val : THandle);
function gethInstance : THandle;
property hInstance : THandle read gethInstance write sethInstance;
procedure sethIcon(const val : THandle);
function gethIcon : THandle;
property hIcon : THandle read gethIcon write sethIcon;
procedure setnPages(const val : Integer);
function getnPages : Integer;
property nPages : Integer read getnPages write setnPages;
procedure setnStartPage(const val : Integer);
function getnStartPage : Integer;
property nStartPage : Integer read getnStartPage write setnStartPage;
end;
type ___PROPSHEETPAGE__Wrapper = class(TDCRecordWrapper)
private
fR : _PROPSHEETPAGE;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : Longint);
function getdwSize : Longint;
property dwSize : Longint read getdwSize write setdwSize;
procedure setdwFlags(const val : Longint);
function getdwFlags : Longint;
property dwFlags : Longint read getdwFlags write setdwFlags;
procedure sethInstance(const val : THandle);
function gethInstance : THandle;
property hInstance : THandle read gethInstance write sethInstance;
procedure sethIcon(const val : THandle);
function gethIcon : THandle;
property hIcon : THandle read gethIcon write sethIcon;
procedure setlParam(const val : Longint);
function getlParam : Longint;
property lParam : Longint read getlParam write setlParam;
end;
type ___PROPSHEETPAGEA__Wrapper = class(TDCRecordWrapper)
private
fR : _PROPSHEETPAGEA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : Longint);
function getdwSize : Longint;
property dwSize : Longint read getdwSize write setdwSize;
procedure setdwFlags(const val : Longint);
function getdwFlags : Longint;
property dwFlags : Longint read getdwFlags write setdwFlags;
procedure sethInstance(const val : THandle);
function gethInstance : THandle;
property hInstance : THandle read gethInstance write sethInstance;
procedure sethIcon(const val : THandle);
function gethIcon : THandle;
property hIcon : THandle read gethIcon write sethIcon;
procedure setlParam(const val : Longint);
function getlParam : Longint;
property lParam : Longint read getlParam write setlParam;
end;
type ___PROPSHEETPAGEW__Wrapper = class(TDCRecordWrapper)
private
fR : _PROPSHEETPAGEW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : Longint);
function getdwSize : Longint;
property dwSize : Longint read getdwSize write setdwSize;
procedure setdwFlags(const val : Longint);
function getdwFlags : Longint;
property dwFlags : Longint read getdwFlags write setdwFlags;
procedure sethInstance(const val : THandle);
function gethInstance : THandle;
property hInstance : THandle read gethInstance write sethInstance;
procedure sethIcon(const val : THandle);
function gethIcon : THandle;
property hIcon : THandle read gethIcon write sethIcon;
procedure setlParam(const val : Longint);
function getlParam : Longint;
property lParam : Longint read getlParam write setlParam;
end;
type ___RB_HITTESTINFO__Wrapper = class(TDCRecordWrapper)
private
fR : _RB_HITTESTINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
procedure setiBand(const val : Integer);
function getiBand : Integer;
property iBand : Integer read getiBand write setiBand;
end;
type ___TBBUTTON__Wrapper = class(TDCRecordWrapper)
private
fR : _TBBUTTON;
public
function GetRecordPtr : pointer; override;
published
procedure setiBitmap(const val : Integer);
function getiBitmap : Integer;
property iBitmap : Integer read getiBitmap write setiBitmap;
procedure setidCommand(const val : Integer);
function getidCommand : Integer;
property idCommand : Integer read getidCommand write setidCommand;
procedure setfsState(const val : Byte);
function getfsState : Byte;
property fsState : Byte read getfsState write setfsState;
procedure setfsStyle(const val : Byte);
function getfsStyle : Byte;
property fsStyle : Byte read getfsStyle write setfsStyle;
procedure setdwData(const val : Longint);
function getdwData : Longint;
property dwData : Longint read getdwData write setdwData;
procedure setiString(const val : Integer);
function getiString : Integer;
property iString : Integer read getiString write setiString;
end;
type ___TC_HITTESTINFO__Wrapper = class(TDCRecordWrapper)
private
fR : _TC_HITTESTINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
end;
type ___TC_ITEM__Wrapper = class(TDCRecordWrapper)
private
fR : _TC_ITEM;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setdwState(const val : UINT);
function getdwState : UINT;
property dwState : UINT read getdwState write setdwState;
procedure setdwStateMask(const val : UINT);
function getdwStateMask : UINT;
property dwStateMask : UINT read getdwStateMask write setdwStateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type ___TC_ITEMA__Wrapper = class(TDCRecordWrapper)
private
fR : _TC_ITEMA;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setdwState(const val : UINT);
function getdwState : UINT;
property dwState : UINT read getdwState write setdwState;
procedure setdwStateMask(const val : UINT);
function getdwStateMask : UINT;
property dwStateMask : UINT read getdwStateMask write setdwStateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type ___TC_ITEMHEADER__Wrapper = class(TDCRecordWrapper)
private
fR : _TC_ITEMHEADER;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setlpReserved1(const val : UINT);
function getlpReserved1 : UINT;
property lpReserved1 : UINT read getlpReserved1 write setlpReserved1;
procedure setlpReserved2(const val : UINT);
function getlpReserved2 : UINT;
property lpReserved2 : UINT read getlpReserved2 write setlpReserved2;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
end;
type ___TC_ITEMHEADERA__Wrapper = class(TDCRecordWrapper)
private
fR : _TC_ITEMHEADERA;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setlpReserved1(const val : UINT);
function getlpReserved1 : UINT;
property lpReserved1 : UINT read getlpReserved1 write setlpReserved1;
procedure setlpReserved2(const val : UINT);
function getlpReserved2 : UINT;
property lpReserved2 : UINT read getlpReserved2 write setlpReserved2;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
end;
type ___TC_ITEMHEADERW__Wrapper = class(TDCRecordWrapper)
private
fR : _TC_ITEMHEADERW;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setlpReserved1(const val : UINT);
function getlpReserved1 : UINT;
property lpReserved1 : UINT read getlpReserved1 write setlpReserved1;
procedure setlpReserved2(const val : UINT);
function getlpReserved2 : UINT;
property lpReserved2 : UINT read getlpReserved2 write setlpReserved2;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
end;
type ___TC_ITEMW__Wrapper = class(TDCRecordWrapper)
private
fR : _TC_ITEMW;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setdwState(const val : UINT);
function getdwState : UINT;
property dwState : UINT read getdwState write setdwState;
procedure setdwStateMask(const val : UINT);
function getdwStateMask : UINT;
property dwStateMask : UINT read getdwStateMask write setdwStateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type ___TC_KEYDOWN__Wrapper = class(TDCRecordWrapper)
private
fR : _TC_KEYDOWN;
public
function GetRecordPtr : pointer; override;
published
procedure setwVKey(const val : Word);
function getwVKey : Word;
property wVKey : Word read getwVKey write setwVKey;
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
end;
type ___TREEITEM__Wrapper = class(TDCRecordWrapper)
private
fR : _TREEITEM;
public
function GetRecordPtr : pointer; override;
published
end;
type ___TT_HITTESTINFO__Wrapper = class(TDCRecordWrapper)
private
fR : _TT_HITTESTINFO;
public
function GetRecordPtr : pointer; override;
published
end;
type ___TT_HITTESTINFOA__Wrapper = class(TDCRecordWrapper)
private
fR : _TT_HITTESTINFOA;
public
function GetRecordPtr : pointer; override;
published
end;
type ___TT_HITTESTINFOW__Wrapper = class(TDCRecordWrapper)
private
fR : _TT_HITTESTINFOW;
public
function GetRecordPtr : pointer; override;
published
end;
type ___TV_DISPINFO__Wrapper = class(TDCRecordWrapper)
private
fR : _TV_DISPINFO;
public
function GetRecordPtr : pointer; override;
published
end;
type ___TV_DISPINFOA__Wrapper = class(TDCRecordWrapper)
private
fR : _TV_DISPINFOA;
public
function GetRecordPtr : pointer; override;
published
end;
type ___TV_DISPINFOW__Wrapper = class(TDCRecordWrapper)
private
fR : _TV_DISPINFOW;
public
function GetRecordPtr : pointer; override;
published
end;
type ___TV_HITTESTINFO__Wrapper = class(TDCRecordWrapper)
private
fR : _TV_HITTESTINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
end;
type ___TV_INSERTSTRUCT__Wrapper = class(TDCRecordWrapper)
private
fR : _TV_INSERTSTRUCT;
public
function GetRecordPtr : pointer; override;
published
end;
type ___TV_INSERTSTRUCTA__Wrapper = class(TDCRecordWrapper)
private
fR : _TV_INSERTSTRUCTA;
public
function GetRecordPtr : pointer; override;
published
end;
type ___TV_INSERTSTRUCTW__Wrapper = class(TDCRecordWrapper)
private
fR : _TV_INSERTSTRUCTW;
public
function GetRecordPtr : pointer; override;
published
end;
type ___TV_ITEM__Wrapper = class(TDCRecordWrapper)
private
fR : _TV_ITEM;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setstate(const val : UINT);
function getstate : UINT;
property state : UINT read getstate write setstate;
procedure setstateMask(const val : UINT);
function getstateMask : UINT;
property stateMask : UINT read getstateMask write setstateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiSelectedImage(const val : Integer);
function getiSelectedImage : Integer;
property iSelectedImage : Integer read getiSelectedImage write setiSelectedImage;
procedure setcChildren(const val : Integer);
function getcChildren : Integer;
property cChildren : Integer read getcChildren write setcChildren;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type ___TV_ITEMA__Wrapper = class(TDCRecordWrapper)
private
fR : _TV_ITEMA;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setstate(const val : UINT);
function getstate : UINT;
property state : UINT read getstate write setstate;
procedure setstateMask(const val : UINT);
function getstateMask : UINT;
property stateMask : UINT read getstateMask write setstateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiSelectedImage(const val : Integer);
function getiSelectedImage : Integer;
property iSelectedImage : Integer read getiSelectedImage write setiSelectedImage;
procedure setcChildren(const val : Integer);
function getcChildren : Integer;
property cChildren : Integer read getcChildren write setcChildren;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type ___TV_ITEMW__Wrapper = class(TDCRecordWrapper)
private
fR : _TV_ITEMW;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setstate(const val : UINT);
function getstate : UINT;
property state : UINT read getstate write setstate;
procedure setstateMask(const val : UINT);
function getstateMask : UINT;
property stateMask : UINT read getstateMask write setstateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiSelectedImage(const val : Integer);
function getiSelectedImage : Integer;
property iSelectedImage : Integer read getiSelectedImage write setiSelectedImage;
procedure setcChildren(const val : Integer);
function getcChildren : Integer;
property cChildren : Integer read getcChildren write setcChildren;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type ___TV_KEYDOWN__Wrapper = class(TDCRecordWrapper)
private
fR : _TV_KEYDOWN;
public
function GetRecordPtr : pointer; override;
published
procedure setwVKey(const val : Word);
function getwVKey : Word;
property wVKey : Word read getwVKey write setwVKey;
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
end;
type ___TV_SORTCB__Wrapper = class(TDCRecordWrapper)
private
fR : _TV_SORTCB;
public
function GetRecordPtr : pointer; override;
published
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type ___UDACCEL__Wrapper = class(TDCRecordWrapper)
private
fR : _UDACCEL;
public
function GetRecordPtr : pointer; override;
published
procedure setnSec(const val : UINT);
function getnSec : UINT;
property nSec : UINT read getnSec write setnSec;
procedure setnInc(const val : UINT);
function getnInc : UINT;
property nInc : UINT read getnInc write setnInc;
end;
type __COLORMAP__Wrapper = class(TDCRecordWrapper)
private
fR : COLORMAP;
public
function GetRecordPtr : pointer; override;
published
procedure setcFrom(const val : TColorRef);
function getcFrom : TColorRef;
property cFrom : TColorRef read getcFrom write setcFrom;
procedure setcTo(const val : TColorRef);
function getcTo : TColorRef;
property cTo : TColorRef read getcTo write setcTo;
end;
type __DRAGLISTINFO__Wrapper = class(TDCRecordWrapper)
private
fR : DRAGLISTINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setuNotification(const val : UINT);
function getuNotification : UINT;
property uNotification : UINT read getuNotification write setuNotification;
end;
type __HD_HITTESTINFO__Wrapper = class(TDCRecordWrapper)
private
fR : HD_HITTESTINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setFlags(const val : Cardinal);
function getFlags : Cardinal;
property Flags : Cardinal read getFlags write setFlags;
procedure setItem(const val : Integer);
function getItem : Integer;
property Item : Integer read getItem write setItem;
end;
type __HD_ITEM__Wrapper = class(TDCRecordWrapper)
private
fR : HD_ITEM;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : Cardinal);
function getMask : Cardinal;
property Mask : Cardinal read getMask write setMask;
procedure setcxy(const val : Integer);
function getcxy : Integer;
property cxy : Integer read getcxy write setcxy;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setfmt(const val : Integer);
function getfmt : Integer;
property fmt : Integer read getfmt write setfmt;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiOrder(const val : Integer);
function getiOrder : Integer;
property iOrder : Integer read getiOrder write setiOrder;
end;
type __HD_ITEMA__Wrapper = class(TDCRecordWrapper)
private
fR : HD_ITEMA;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : Cardinal);
function getMask : Cardinal;
property Mask : Cardinal read getMask write setMask;
procedure setcxy(const val : Integer);
function getcxy : Integer;
property cxy : Integer read getcxy write setcxy;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setfmt(const val : Integer);
function getfmt : Integer;
property fmt : Integer read getfmt write setfmt;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiOrder(const val : Integer);
function getiOrder : Integer;
property iOrder : Integer read getiOrder write setiOrder;
end;
type __HD_ITEMW__Wrapper = class(TDCRecordWrapper)
private
fR : HD_ITEMW;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : Cardinal);
function getMask : Cardinal;
property Mask : Cardinal read getMask write setMask;
procedure setcxy(const val : Integer);
function getcxy : Integer;
property cxy : Integer read getcxy write setcxy;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setfmt(const val : Integer);
function getfmt : Integer;
property fmt : Integer read getfmt write setfmt;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiOrder(const val : Integer);
function getiOrder : Integer;
property iOrder : Integer read getiOrder write setiOrder;
end;
type __HD_LAYOUT__Wrapper = class(TDCRecordWrapper)
private
fR : HD_LAYOUT;
public
function GetRecordPtr : pointer; override;
published
end;
type __HD_NOTIFY__Wrapper = class(TDCRecordWrapper)
private
fR : HD_NOTIFY;
public
function GetRecordPtr : pointer; override;
published
procedure setItem(const val : Integer);
function getItem : Integer;
property Item : Integer read getItem write setItem;
procedure setButton(const val : Integer);
function getButton : Integer;
property Button : Integer read getButton write setButton;
end;
type __HD_NOTIFYA__Wrapper = class(TDCRecordWrapper)
private
fR : HD_NOTIFYA;
public
function GetRecordPtr : pointer; override;
published
procedure setItem(const val : Integer);
function getItem : Integer;
property Item : Integer read getItem write setItem;
procedure setButton(const val : Integer);
function getButton : Integer;
property Button : Integer read getButton write setButton;
end;
type __HD_NOTIFYW__Wrapper = class(TDCRecordWrapper)
private
fR : HD_NOTIFYW;
public
function GetRecordPtr : pointer; override;
published
procedure setItem(const val : Integer);
function getItem : Integer;
property Item : Integer read getItem write setItem;
procedure setButton(const val : Integer);
function getButton : Integer;
property Button : Integer read getButton write setButton;
end;
type __IMAGEINFO__Wrapper = class(TDCRecordWrapper)
private
fR : IMAGEINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setUnused1(const val : Integer);
function getUnused1 : Integer;
property Unused1 : Integer read getUnused1 write setUnused1;
procedure setUnused2(const val : Integer);
function getUnused2 : Integer;
property Unused2 : Integer read getUnused2 write setUnused2;
end;
type __LV_COLUMN__Wrapper = class(TDCRecordWrapper)
private
fR : LV_COLUMN;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setfmt(const val : Integer);
function getfmt : Integer;
property fmt : Integer read getfmt write setfmt;
procedure setcx(const val : Integer);
function getcx : Integer;
property cx : Integer read getcx write setcx;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiOrder(const val : Integer);
function getiOrder : Integer;
property iOrder : Integer read getiOrder write setiOrder;
end;
type __LV_COLUMNA__Wrapper = class(TDCRecordWrapper)
private
fR : LV_COLUMNA;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setfmt(const val : Integer);
function getfmt : Integer;
property fmt : Integer read getfmt write setfmt;
procedure setcx(const val : Integer);
function getcx : Integer;
property cx : Integer read getcx write setcx;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiOrder(const val : Integer);
function getiOrder : Integer;
property iOrder : Integer read getiOrder write setiOrder;
end;
type __LV_COLUMNW__Wrapper = class(TDCRecordWrapper)
private
fR : LV_COLUMNW;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setfmt(const val : Integer);
function getfmt : Integer;
property fmt : Integer read getfmt write setfmt;
procedure setcx(const val : Integer);
function getcx : Integer;
property cx : Integer read getcx write setcx;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiOrder(const val : Integer);
function getiOrder : Integer;
property iOrder : Integer read getiOrder write setiOrder;
end;
type __LV_DISPINFO__Wrapper = class(TDCRecordWrapper)
private
fR : LV_DISPINFO;
public
function GetRecordPtr : pointer; override;
published
end;
type __LV_DISPINFOA__Wrapper = class(TDCRecordWrapper)
private
fR : LV_DISPINFOA;
public
function GetRecordPtr : pointer; override;
published
end;
type __LV_DISPINFOW__Wrapper = class(TDCRecordWrapper)
private
fR : LV_DISPINFOW;
public
function GetRecordPtr : pointer; override;
published
end;
type __LV_FINDINFO__Wrapper = class(TDCRecordWrapper)
private
fR : LV_FINDINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setvkDirection(const val : UINT);
function getvkDirection : UINT;
property vkDirection : UINT read getvkDirection write setvkDirection;
end;
type __LV_FINDINFOA__Wrapper = class(TDCRecordWrapper)
private
fR : LV_FINDINFOA;
public
function GetRecordPtr : pointer; override;
published
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setvkDirection(const val : UINT);
function getvkDirection : UINT;
property vkDirection : UINT read getvkDirection write setvkDirection;
end;
type __LV_FINDINFOW__Wrapper = class(TDCRecordWrapper)
private
fR : LV_FINDINFOW;
public
function GetRecordPtr : pointer; override;
published
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setvkDirection(const val : UINT);
function getvkDirection : UINT;
property vkDirection : UINT read getvkDirection write setvkDirection;
end;
type __LV_HITTESTINFO__Wrapper = class(TDCRecordWrapper)
private
fR : LV_HITTESTINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
end;
type __LV_ITEM__Wrapper = class(TDCRecordWrapper)
private
fR : LV_ITEM;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setstate(const val : UINT);
function getstate : UINT;
property state : UINT read getstate write setstate;
procedure setstateMask(const val : UINT);
function getstateMask : UINT;
property stateMask : UINT read getstateMask write setstateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setiIndent(const val : Integer);
function getiIndent : Integer;
property iIndent : Integer read getiIndent write setiIndent;
end;
type __LV_ITEMA__Wrapper = class(TDCRecordWrapper)
private
fR : LV_ITEMA;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setstate(const val : UINT);
function getstate : UINT;
property state : UINT read getstate write setstate;
procedure setstateMask(const val : UINT);
function getstateMask : UINT;
property stateMask : UINT read getstateMask write setstateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setiIndent(const val : Integer);
function getiIndent : Integer;
property iIndent : Integer read getiIndent write setiIndent;
end;
type __LV_ITEMW__Wrapper = class(TDCRecordWrapper)
private
fR : LV_ITEMW;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setstate(const val : UINT);
function getstate : UINT;
property state : UINT read getstate write setstate;
procedure setstateMask(const val : UINT);
function getstateMask : UINT;
property stateMask : UINT read getstateMask write setstateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setiIndent(const val : Integer);
function getiIndent : Integer;
property iIndent : Integer read getiIndent write setiIndent;
end;
type __LV_KEYDOWN__Wrapper = class(TDCRecordWrapper)
private
fR : LV_KEYDOWN;
public
function GetRecordPtr : pointer; override;
published
procedure setwVKey(const val : Word);
function getwVKey : Word;
property wVKey : Word read getwVKey write setwVKey;
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
end;
type __MCHITTESTINFO__Wrapper = class(TDCRecordWrapper)
private
fR : MCHITTESTINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : UINT);
function getcbSize : UINT;
property cbSize : UINT read getcbSize write setcbSize;
procedure setuHit(const val : UINT);
function getuHit : UINT;
property uHit : UINT read getuHit write setuHit;
end;
type __NM_LISTVIEW__Wrapper = class(TDCRecordWrapper)
private
fR : NM_LISTVIEW;
public
function GetRecordPtr : pointer; override;
published
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setuNewState(const val : UINT);
function getuNewState : UINT;
property uNewState : UINT read getuNewState write setuNewState;
procedure setuOldState(const val : UINT);
function getuOldState : UINT;
property uOldState : UINT read getuOldState write setuOldState;
procedure setuChanged(const val : UINT);
function getuChanged : UINT;
property uChanged : UINT read getuChanged write setuChanged;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __NM_TREEVIEW__Wrapper = class(TDCRecordWrapper)
private
fR : NM_TREEVIEW;
public
function GetRecordPtr : pointer; override;
published
procedure setaction(const val : UINT);
function getaction : UINT;
property action : UINT read getaction write setaction;
end;
type __NM_TREEVIEWA__Wrapper = class(TDCRecordWrapper)
private
fR : NM_TREEVIEWA;
public
function GetRecordPtr : pointer; override;
published
procedure setaction(const val : UINT);
function getaction : UINT;
property action : UINT read getaction write setaction;
end;
type __NM_TREEVIEWW__Wrapper = class(TDCRecordWrapper)
private
fR : NM_TREEVIEWW;
public
function GetRecordPtr : pointer; override;
published
procedure setaction(const val : UINT);
function getaction : UINT;
property action : UINT read getaction write setaction;
end;
type __NM_UPDOWN__Wrapper = class(TDCRecordWrapper)
private
fR : NM_UPDOWN;
public
function GetRecordPtr : pointer; override;
published
procedure setiPos(const val : Integer);
function getiPos : Integer;
property iPos : Integer read getiPos write setiPos;
procedure setiDelta(const val : Integer);
function getiDelta : Integer;
property iDelta : Integer read getiDelta write setiDelta;
end;
type __NMCBEDRAGBEGIN__Wrapper = class(TDCRecordWrapper)
private
fR : NMCBEDRAGBEGIN;
public
function GetRecordPtr : pointer; override;
published
procedure setiItemid(const val : Integer);
function getiItemid : Integer;
property iItemid : Integer read getiItemid write setiItemid;
end;
type __NMCBEDRAGBEGINA__Wrapper = class(TDCRecordWrapper)
private
fR : NMCBEDRAGBEGINA;
public
function GetRecordPtr : pointer; override;
published
procedure setiItemid(const val : Integer);
function getiItemid : Integer;
property iItemid : Integer read getiItemid write setiItemid;
end;
type __NMCBEDRAGBEGINW__Wrapper = class(TDCRecordWrapper)
private
fR : NMCBEDRAGBEGINW;
public
function GetRecordPtr : pointer; override;
published
procedure setiItemid(const val : Integer);
function getiItemid : Integer;
property iItemid : Integer read getiItemid write setiItemid;
end;
type __NMCBEENDEDIT__Wrapper = class(TDCRecordWrapper)
private
fR : NMCBEENDEDIT;
public
function GetRecordPtr : pointer; override;
published
procedure setfChanged(const val : BOOL);
function getfChanged : BOOL;
property fChanged : BOOL read getfChanged write setfChanged;
procedure setiNewSelection(const val : Integer);
function getiNewSelection : Integer;
property iNewSelection : Integer read getiNewSelection write setiNewSelection;
procedure setiWhy(const val : Integer);
function getiWhy : Integer;
property iWhy : Integer read getiWhy write setiWhy;
end;
type __NMCBEENDEDITA__Wrapper = class(TDCRecordWrapper)
private
fR : NMCBEENDEDITA;
public
function GetRecordPtr : pointer; override;
published
procedure setfChanged(const val : BOOL);
function getfChanged : BOOL;
property fChanged : BOOL read getfChanged write setfChanged;
procedure setiNewSelection(const val : Integer);
function getiNewSelection : Integer;
property iNewSelection : Integer read getiNewSelection write setiNewSelection;
procedure setiWhy(const val : Integer);
function getiWhy : Integer;
property iWhy : Integer read getiWhy write setiWhy;
end;
type __NMCBEENDEDITW__Wrapper = class(TDCRecordWrapper)
private
fR : NMCBEENDEDITW;
public
function GetRecordPtr : pointer; override;
published
procedure setfChanged(const val : BOOL);
function getfChanged : BOOL;
property fChanged : BOOL read getfChanged write setfChanged;
procedure setiNewSelection(const val : Integer);
function getiNewSelection : Integer;
property iNewSelection : Integer read getiNewSelection write setiNewSelection;
procedure setiWhy(const val : Integer);
function getiWhy : Integer;
property iWhy : Integer read getiWhy write setiWhy;
end;
type __NMCOMBOBOXEX__Wrapper = class(TDCRecordWrapper)
private
fR : NMCOMBOBOXEX;
public
function GetRecordPtr : pointer; override;
published
end;
type __NMCOMBOBOXEXA__Wrapper = class(TDCRecordWrapper)
private
fR : NMCOMBOBOXEXA;
public
function GetRecordPtr : pointer; override;
published
end;
type __NMCOMBOBOXEXW__Wrapper = class(TDCRecordWrapper)
private
fR : NMCOMBOBOXEXW;
public
function GetRecordPtr : pointer; override;
published
end;
type __NMPGCALCSIZE__Wrapper = class(TDCRecordWrapper)
private
fR : NMPGCALCSIZE;
public
function GetRecordPtr : pointer; override;
published
procedure setdwFlag(const val : DWORD);
function getdwFlag : DWORD;
property dwFlag : DWORD read getdwFlag write setdwFlag;
procedure setiWidth(const val : Integer);
function getiWidth : Integer;
property iWidth : Integer read getiWidth write setiWidth;
procedure setiHeight(const val : Integer);
function getiHeight : Integer;
property iHeight : Integer read getiHeight write setiHeight;
end;
type __NMPGSCROLL__Wrapper = class(TDCRecordWrapper)
private
fR : NMPGSCROLL;
public
function GetRecordPtr : pointer; override;
published
procedure setfwKeys(const val : Word);
function getfwKeys : Word;
property fwKeys : Word read getfwKeys write setfwKeys;
procedure setiDir(const val : Integer);
function getiDir : Integer;
property iDir : Integer read getiDir write setiDir;
procedure setiXpos(const val : Integer);
function getiXpos : Integer;
property iXpos : Integer read getiXpos write setiXpos;
procedure setiYpos(const val : Integer);
function getiYpos : Integer;
property iYpos : Integer read getiYpos write setiYpos;
procedure setiScroll(const val : Integer);
function getiScroll : Integer;
property iScroll : Integer read getiScroll write setiScroll;
end;
type __NMSELECT__Wrapper = class(TDCRecordWrapper)
private
fR : NMSELECT;
public
function GetRecordPtr : pointer; override;
published
end;
type __NMTBDISPINFO__Wrapper = class(TDCRecordWrapper)
private
fR : NMTBDISPINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setdwMask(const val : DWORD);
function getdwMask : DWORD;
property dwMask : DWORD read getdwMask write setdwMask;
procedure setidCommand(const val : Integer);
function getidCommand : Integer;
property idCommand : Integer read getidCommand write setidCommand;
procedure setlParam(const val : DWORD);
function getlParam : DWORD;
property lParam : DWORD read getlParam write setlParam;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setcchText(const val : Integer);
function getcchText : Integer;
property cchText : Integer read getcchText write setcchText;
end;
type __NMTBDISPINFOA__Wrapper = class(TDCRecordWrapper)
private
fR : NMTBDISPINFOA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwMask(const val : DWORD);
function getdwMask : DWORD;
property dwMask : DWORD read getdwMask write setdwMask;
procedure setidCommand(const val : Integer);
function getidCommand : Integer;
property idCommand : Integer read getidCommand write setidCommand;
procedure setlParam(const val : DWORD);
function getlParam : DWORD;
property lParam : DWORD read getlParam write setlParam;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setcchText(const val : Integer);
function getcchText : Integer;
property cchText : Integer read getcchText write setcchText;
end;
type __NMTBDISPINFOW__Wrapper = class(TDCRecordWrapper)
private
fR : NMTBDISPINFOW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwMask(const val : DWORD);
function getdwMask : DWORD;
property dwMask : DWORD read getdwMask write setdwMask;
procedure setidCommand(const val : Integer);
function getidCommand : Integer;
property idCommand : Integer read getidCommand write setidCommand;
procedure setlParam(const val : DWORD);
function getlParam : DWORD;
property lParam : DWORD read getlParam write setlParam;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setcchText(const val : Integer);
function getcchText : Integer;
property cchText : Integer read getcchText write setcchText;
end;
type __PBRANGE__Wrapper = class(TDCRecordWrapper)
private
fR : PBRANGE;
public
function GetRecordPtr : pointer; override;
published
procedure setiLow(const val : Integer);
function getiLow : Integer;
property iLow : Integer read getiLow write setiLow;
procedure setiHigh(const val : Integer);
function getiHigh : Integer;
property iHigh : Integer read getiHigh write setiHigh;
end;
type __PROPSHEETPAGE__Wrapper = class(TDCRecordWrapper)
private
fR : PROPSHEETPAGE;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : Longint);
function getdwSize : Longint;
property dwSize : Longint read getdwSize write setdwSize;
procedure setdwFlags(const val : Longint);
function getdwFlags : Longint;
property dwFlags : Longint read getdwFlags write setdwFlags;
procedure sethInstance(const val : THandle);
function gethInstance : THandle;
property hInstance : THandle read gethInstance write sethInstance;
procedure sethIcon(const val : THandle);
function gethIcon : THandle;
property hIcon : THandle read gethIcon write sethIcon;
procedure setlParam(const val : Longint);
function getlParam : Longint;
property lParam : Longint read getlParam write setlParam;
end;
type __PROPSHEETPAGEA__Wrapper = class(TDCRecordWrapper)
private
fR : PROPSHEETPAGEA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : Longint);
function getdwSize : Longint;
property dwSize : Longint read getdwSize write setdwSize;
procedure setdwFlags(const val : Longint);
function getdwFlags : Longint;
property dwFlags : Longint read getdwFlags write setdwFlags;
procedure sethInstance(const val : THandle);
function gethInstance : THandle;
property hInstance : THandle read gethInstance write sethInstance;
procedure sethIcon(const val : THandle);
function gethIcon : THandle;
property hIcon : THandle read gethIcon write sethIcon;
procedure setlParam(const val : Longint);
function getlParam : Longint;
property lParam : Longint read getlParam write setlParam;
end;
type __PROPSHEETPAGEW__Wrapper = class(TDCRecordWrapper)
private
fR : PROPSHEETPAGEW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : Longint);
function getdwSize : Longint;
property dwSize : Longint read getdwSize write setdwSize;
procedure setdwFlags(const val : Longint);
function getdwFlags : Longint;
property dwFlags : Longint read getdwFlags write setdwFlags;
procedure sethInstance(const val : THandle);
function gethInstance : THandle;
property hInstance : THandle read gethInstance write sethInstance;
procedure sethIcon(const val : THandle);
function gethIcon : THandle;
property hIcon : THandle read gethIcon write sethIcon;
procedure setlParam(const val : Longint);
function getlParam : Longint;
property lParam : Longint read getlParam write setlParam;
end;
type __tagCOLORSCHEME__Wrapper = class(TDCRecordWrapper)
private
fR : tagCOLORSCHEME;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setclrBtnHighlight(const val : COLORREF);
function getclrBtnHighlight : COLORREF;
property clrBtnHighlight : COLORREF read getclrBtnHighlight write setclrBtnHighlight;
procedure setclrBtnShadow(const val : COLORREF);
function getclrBtnShadow : COLORREF;
property clrBtnShadow : COLORREF read getclrBtnShadow write setclrBtnShadow;
end;
type __tagCOMBOBOXEXITEM__Wrapper = class(TDCRecordWrapper)
private
fR : tagCOMBOBOXEXITEM;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiSelectedImage(const val : Integer);
function getiSelectedImage : Integer;
property iSelectedImage : Integer read getiSelectedImage write setiSelectedImage;
procedure setiOverlay(const val : Integer);
function getiOverlay : Integer;
property iOverlay : Integer read getiOverlay write setiOverlay;
procedure setiIndent(const val : Integer);
function getiIndent : Integer;
property iIndent : Integer read getiIndent write setiIndent;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagCOMBOBOXEXITEMA__Wrapper = class(TDCRecordWrapper)
private
fR : tagCOMBOBOXEXITEMA;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiSelectedImage(const val : Integer);
function getiSelectedImage : Integer;
property iSelectedImage : Integer read getiSelectedImage write setiSelectedImage;
procedure setiOverlay(const val : Integer);
function getiOverlay : Integer;
property iOverlay : Integer read getiOverlay write setiOverlay;
procedure setiIndent(const val : Integer);
function getiIndent : Integer;
property iIndent : Integer read getiIndent write setiIndent;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagCOMBOBOXEXITEMW__Wrapper = class(TDCRecordWrapper)
private
fR : tagCOMBOBOXEXITEMW;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiSelectedImage(const val : Integer);
function getiSelectedImage : Integer;
property iSelectedImage : Integer read getiSelectedImage write setiSelectedImage;
procedure setiOverlay(const val : Integer);
function getiOverlay : Integer;
property iOverlay : Integer read getiOverlay write setiOverlay;
procedure setiIndent(const val : Integer);
function getiIndent : Integer;
property iIndent : Integer read getiIndent write setiIndent;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagDRAGLISTINFO__Wrapper = class(TDCRecordWrapper)
private
fR : tagDRAGLISTINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setuNotification(const val : UINT);
function getuNotification : UINT;
property uNotification : UINT read getuNotification write setuNotification;
end;
type __tagINITCOMMONCONTROLSEX__Wrapper = class(TDCRecordWrapper)
private
fR : tagINITCOMMONCONTROLSEX;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setdwICC(const val : DWORD);
function getdwICC : DWORD;
property dwICC : DWORD read getdwICC write setdwICC;
end;
type __tagLVBKIMAGE__Wrapper = class(TDCRecordWrapper)
private
fR : tagLVBKIMAGE;
public
function GetRecordPtr : pointer; override;
published
procedure setulFlags(const val : ULONG);
function getulFlags : ULONG;
property ulFlags : ULONG read getulFlags write setulFlags;
procedure setcchImageMax(const val : UINT);
function getcchImageMax : UINT;
property cchImageMax : UINT read getcchImageMax write setcchImageMax;
procedure setxOffsetPercent(const val : Integer);
function getxOffsetPercent : Integer;
property xOffsetPercent : Integer read getxOffsetPercent write setxOffsetPercent;
procedure setyOffsetPercent(const val : Integer);
function getyOffsetPercent : Integer;
property yOffsetPercent : Integer read getyOffsetPercent write setyOffsetPercent;
end;
type __tagLVBKIMAGEA__Wrapper = class(TDCRecordWrapper)
private
fR : tagLVBKIMAGEA;
public
function GetRecordPtr : pointer; override;
published
procedure setulFlags(const val : ULONG);
function getulFlags : ULONG;
property ulFlags : ULONG read getulFlags write setulFlags;
procedure setcchImageMax(const val : UINT);
function getcchImageMax : UINT;
property cchImageMax : UINT read getcchImageMax write setcchImageMax;
procedure setxOffsetPercent(const val : Integer);
function getxOffsetPercent : Integer;
property xOffsetPercent : Integer read getxOffsetPercent write setxOffsetPercent;
procedure setyOffsetPercent(const val : Integer);
function getyOffsetPercent : Integer;
property yOffsetPercent : Integer read getyOffsetPercent write setyOffsetPercent;
end;
type __tagLVBKIMAGEW__Wrapper = class(TDCRecordWrapper)
private
fR : tagLVBKIMAGEW;
public
function GetRecordPtr : pointer; override;
published
procedure setulFlags(const val : ULONG);
function getulFlags : ULONG;
property ulFlags : ULONG read getulFlags write setulFlags;
procedure setcchImageMax(const val : UINT);
function getcchImageMax : UINT;
property cchImageMax : UINT read getcchImageMax write setcchImageMax;
procedure setxOffsetPercent(const val : Integer);
function getxOffsetPercent : Integer;
property xOffsetPercent : Integer read getxOffsetPercent write setxOffsetPercent;
procedure setyOffsetPercent(const val : Integer);
function getyOffsetPercent : Integer;
property yOffsetPercent : Integer read getyOffsetPercent write setyOffsetPercent;
end;
type __tagLVCOLUMN__Wrapper = class(TDCRecordWrapper)
private
fR : tagLVCOLUMN;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setfmt(const val : Integer);
function getfmt : Integer;
property fmt : Integer read getfmt write setfmt;
procedure setcx(const val : Integer);
function getcx : Integer;
property cx : Integer read getcx write setcx;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiOrder(const val : Integer);
function getiOrder : Integer;
property iOrder : Integer read getiOrder write setiOrder;
end;
type __tagLVCOLUMNA__Wrapper = class(TDCRecordWrapper)
private
fR : tagLVCOLUMNA;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setfmt(const val : Integer);
function getfmt : Integer;
property fmt : Integer read getfmt write setfmt;
procedure setcx(const val : Integer);
function getcx : Integer;
property cx : Integer read getcx write setcx;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiOrder(const val : Integer);
function getiOrder : Integer;
property iOrder : Integer read getiOrder write setiOrder;
end;
type __tagLVCOLUMNW__Wrapper = class(TDCRecordWrapper)
private
fR : tagLVCOLUMNW;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setfmt(const val : Integer);
function getfmt : Integer;
property fmt : Integer read getfmt write setfmt;
procedure setcx(const val : Integer);
function getcx : Integer;
property cx : Integer read getcx write setcx;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiOrder(const val : Integer);
function getiOrder : Integer;
property iOrder : Integer read getiOrder write setiOrder;
end;
type __tagLVDISPINFO__Wrapper = class(TDCRecordWrapper)
private
fR : tagLVDISPINFO;
public
function GetRecordPtr : pointer; override;
published
end;
type __tagLVDISPINFOW__Wrapper = class(TDCRecordWrapper)
private
fR : tagLVDISPINFOW;
public
function GetRecordPtr : pointer; override;
published
end;
type __tagLVFINDINFO__Wrapper = class(TDCRecordWrapper)
private
fR : tagLVFINDINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setvkDirection(const val : UINT);
function getvkDirection : UINT;
property vkDirection : UINT read getvkDirection write setvkDirection;
end;
type __tagLVFINDINFOA__Wrapper = class(TDCRecordWrapper)
private
fR : tagLVFINDINFOA;
public
function GetRecordPtr : pointer; override;
published
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setvkDirection(const val : UINT);
function getvkDirection : UINT;
property vkDirection : UINT read getvkDirection write setvkDirection;
end;
type __tagLVFINDINFOW__Wrapper = class(TDCRecordWrapper)
private
fR : tagLVFINDINFOW;
public
function GetRecordPtr : pointer; override;
published
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setvkDirection(const val : UINT);
function getvkDirection : UINT;
property vkDirection : UINT read getvkDirection write setvkDirection;
end;
type __tagLVHITTESTINFO__Wrapper = class(TDCRecordWrapper)
private
fR : tagLVHITTESTINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
end;
type __tagLVITEM__Wrapper = class(TDCRecordWrapper)
private
fR : tagLVITEM;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setstate(const val : UINT);
function getstate : UINT;
property state : UINT read getstate write setstate;
procedure setstateMask(const val : UINT);
function getstateMask : UINT;
property stateMask : UINT read getstateMask write setstateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setiIndent(const val : Integer);
function getiIndent : Integer;
property iIndent : Integer read getiIndent write setiIndent;
end;
type __tagLVITEMA__Wrapper = class(TDCRecordWrapper)
private
fR : tagLVITEMA;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setstate(const val : UINT);
function getstate : UINT;
property state : UINT read getstate write setstate;
procedure setstateMask(const val : UINT);
function getstateMask : UINT;
property stateMask : UINT read getstateMask write setstateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setiIndent(const val : Integer);
function getiIndent : Integer;
property iIndent : Integer read getiIndent write setiIndent;
end;
type __tagLVITEMW__Wrapper = class(TDCRecordWrapper)
private
fR : tagLVITEMW;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setstate(const val : UINT);
function getstate : UINT;
property state : UINT read getstate write setstate;
procedure setstateMask(const val : UINT);
function getstateMask : UINT;
property stateMask : UINT read getstateMask write setstateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setiIndent(const val : Integer);
function getiIndent : Integer;
property iIndent : Integer read getiIndent write setiIndent;
end;
type __tagLVKEYDOWN__Wrapper = class(TDCRecordWrapper)
private
fR : tagLVKEYDOWN;
public
function GetRecordPtr : pointer; override;
published
procedure setwVKey(const val : Word);
function getwVKey : Word;
property wVKey : Word read getwVKey write setwVKey;
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
end;
type __tagNMCHAR__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMCHAR;
public
function GetRecordPtr : pointer; override;
published
procedure setch(const val : UINT);
function getch : UINT;
property ch : UINT read getch write setch;
procedure setdwItemPrev(const val : DWORD);
function getdwItemPrev : DWORD;
property dwItemPrev : DWORD read getdwItemPrev write setdwItemPrev;
procedure setdwItemNext(const val : DWORD);
function getdwItemNext : DWORD;
property dwItemNext : DWORD read getdwItemNext write setdwItemNext;
end;
type __tagNMCUSTOMDRAWINFO__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMCUSTOMDRAWINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setdwDrawStage(const val : DWORD);
function getdwDrawStage : DWORD;
property dwDrawStage : DWORD read getdwDrawStage write setdwDrawStage;
procedure setdwItemSpec(const val : DWORD);
function getdwItemSpec : DWORD;
property dwItemSpec : DWORD read getdwItemSpec write setdwItemSpec;
procedure setuItemState(const val : UINT);
function getuItemState : UINT;
property uItemState : UINT read getuItemState write setuItemState;
procedure setlItemlParam(const val : lParam);
function getlItemlParam : lParam;
property lItemlParam : lParam read getlItemlParam write setlItemlParam;
end;
type __tagNMDATETIMECHANGE__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMDATETIMECHANGE;
public
function GetRecordPtr : pointer; override;
published
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type __tagNMDATETIMEFORMAT__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMDATETIMEFORMAT;
public
function GetRecordPtr : pointer; override;
published
end;
type __tagNMDATETIMEFORMATA__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMDATETIMEFORMATA;
public
function GetRecordPtr : pointer; override;
published
end;
type __tagNMDATETIMEFORMATQUERY__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMDATETIMEFORMATQUERY;
public
function GetRecordPtr : pointer; override;
published
end;
type __tagNMDATETIMEFORMATQUERYA__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMDATETIMEFORMATQUERYA;
public
function GetRecordPtr : pointer; override;
published
end;
type __tagNMDATETIMEFORMATQUERYW__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMDATETIMEFORMATQUERYW;
public
function GetRecordPtr : pointer; override;
published
end;
type __tagNMDATETIMEFORMATW__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMDATETIMEFORMATW;
public
function GetRecordPtr : pointer; override;
published
end;
type __tagNMDATETIMESTRING__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMDATETIMESTRING;
public
function GetRecordPtr : pointer; override;
published
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type __tagNMDATETIMESTRINGA__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMDATETIMESTRINGA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type __tagNMDATETIMESTRINGW__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMDATETIMESTRINGW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type __tagNMDATETIMEWMKEYDOWN__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMDATETIMEWMKEYDOWN;
public
function GetRecordPtr : pointer; override;
published
procedure setnVirtKey(const val : Integer);
function getnVirtKey : Integer;
property nVirtKey : Integer read getnVirtKey write setnVirtKey;
end;
type __tagNMDATETIMEWMKEYDOWNA__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMDATETIMEWMKEYDOWNA;
public
function GetRecordPtr : pointer; override;
published
procedure setnVirtKey(const val : Integer);
function getnVirtKey : Integer;
property nVirtKey : Integer read getnVirtKey write setnVirtKey;
end;
type __tagNMDATETIMEWMKEYDOWNW__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMDATETIMEWMKEYDOWNW;
public
function GetRecordPtr : pointer; override;
published
procedure setnVirtKey(const val : Integer);
function getnVirtKey : Integer;
property nVirtKey : Integer read getnVirtKey write setnVirtKey;
end;
type __tagNMDAYSTATE__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMDAYSTATE;
public
function GetRecordPtr : pointer; override;
published
procedure setcDayState(const val : Integer);
function getcDayState : Integer;
property cDayState : Integer read getcDayState write setcDayState;
end;
type __tagNMHDDISPINFO__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMHDDISPINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagNMHDDISPINFOA__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMHDDISPINFOA;
public
function GetRecordPtr : pointer; override;
published
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagNMHDDISPINFOW__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMHDDISPINFOW;
public
function GetRecordPtr : pointer; override;
published
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagNMHEADER__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMHEADER;
public
function GetRecordPtr : pointer; override;
published
procedure setItem(const val : Integer);
function getItem : Integer;
property Item : Integer read getItem write setItem;
procedure setButton(const val : Integer);
function getButton : Integer;
property Button : Integer read getButton write setButton;
end;
type __tagNMHEADERA__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMHEADERA;
public
function GetRecordPtr : pointer; override;
published
procedure setItem(const val : Integer);
function getItem : Integer;
property Item : Integer read getItem write setItem;
procedure setButton(const val : Integer);
function getButton : Integer;
property Button : Integer read getButton write setButton;
end;
type __tagNMHEADERW__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMHEADERW;
public
function GetRecordPtr : pointer; override;
published
procedure setItem(const val : Integer);
function getItem : Integer;
property Item : Integer read getItem write setItem;
procedure setButton(const val : Integer);
function getButton : Integer;
property Button : Integer read getButton write setButton;
end;
type __tagNMIPADDRESS__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMIPADDRESS;
public
function GetRecordPtr : pointer; override;
published
procedure setiField(const val : Integer);
function getiField : Integer;
property iField : Integer read getiField write setiField;
procedure setiValue(const val : Integer);
function getiValue : Integer;
property iValue : Integer read getiValue write setiValue;
end;
type __tagNMITEMACTIVATE__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMITEMACTIVATE;
public
function GetRecordPtr : pointer; override;
published
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setuNewState(const val : UINT);
function getuNewState : UINT;
property uNewState : UINT read getuNewState write setuNewState;
procedure setuOldState(const val : UINT);
function getuOldState : UINT;
property uOldState : UINT read getuOldState write setuOldState;
procedure setuChanged(const val : UINT);
function getuChanged : UINT;
property uChanged : UINT read getuChanged write setuChanged;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setuKeyFlags(const val : UINT);
function getuKeyFlags : UINT;
property uKeyFlags : UINT read getuKeyFlags write setuKeyFlags;
end;
type __tagNMKEY__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMKEY;
public
function GetRecordPtr : pointer; override;
published
procedure setnVKey(const val : UINT);
function getnVKey : UINT;
property nVKey : UINT read getnVKey write setnVKey;
procedure setuFlags(const val : UINT);
function getuFlags : UINT;
property uFlags : UINT read getuFlags write setuFlags;
end;
type __tagNMLISTVIEW__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMLISTVIEW;
public
function GetRecordPtr : pointer; override;
published
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setuNewState(const val : UINT);
function getuNewState : UINT;
property uNewState : UINT read getuNewState write setuNewState;
procedure setuOldState(const val : UINT);
function getuOldState : UINT;
property uOldState : UINT read getuOldState write setuOldState;
procedure setuChanged(const val : UINT);
function getuChanged : UINT;
property uChanged : UINT read getuChanged write setuChanged;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagNMLVCACHEHINT__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMLVCACHEHINT;
public
function GetRecordPtr : pointer; override;
published
procedure setiFrom(const val : Integer);
function getiFrom : Integer;
property iFrom : Integer read getiFrom write setiFrom;
procedure setiTo(const val : Integer);
function getiTo : Integer;
property iTo : Integer read getiTo write setiTo;
end;
type __tagNMLVCUSTOMDRAW__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMLVCUSTOMDRAW;
public
function GetRecordPtr : pointer; override;
published
procedure setclrText(const val : COLORREF);
function getclrText : COLORREF;
property clrText : COLORREF read getclrText write setclrText;
procedure setclrTextBk(const val : COLORREF);
function getclrTextBk : COLORREF;
property clrTextBk : COLORREF read getclrTextBk write setclrTextBk;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
end;
type __tagNMLVFINDITEM__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMLVFINDITEM;
public
function GetRecordPtr : pointer; override;
published
procedure setiStart(const val : Integer);
function getiStart : Integer;
property iStart : Integer read getiStart write setiStart;
end;
type __tagNMLVFINDITEMA__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMLVFINDITEMA;
public
function GetRecordPtr : pointer; override;
published
procedure setiStart(const val : Integer);
function getiStart : Integer;
property iStart : Integer read getiStart write setiStart;
end;
type __tagNMLVFINDITEMW__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMLVFINDITEMW;
public
function GetRecordPtr : pointer; override;
published
procedure setiStart(const val : Integer);
function getiStart : Integer;
property iStart : Integer read getiStart write setiStart;
end;
type __tagNMLVGETINFOTIP__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMLVGETINFOTIP;
public
function GetRecordPtr : pointer; override;
published
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagNMLVGETINFOTIPA__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMLVGETINFOTIPA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagNMLVGETINFOTIPW__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMLVGETINFOTIPW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagNMLVODSTATECHANGE__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMLVODSTATECHANGE;
public
function GetRecordPtr : pointer; override;
published
procedure setiFrom(const val : Integer);
function getiFrom : Integer;
property iFrom : Integer read getiFrom write setiFrom;
procedure setiTo(const val : Integer);
function getiTo : Integer;
property iTo : Integer read getiTo write setiTo;
procedure setuNewState(const val : UINT);
function getuNewState : UINT;
property uNewState : UINT read getuNewState write setuNewState;
procedure setuOldState(const val : UINT);
function getuOldState : UINT;
property uOldState : UINT read getuOldState write setuOldState;
end;
type __tagNMMOUSE__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMMOUSE;
public
function GetRecordPtr : pointer; override;
published
procedure setdwItemSpec(const val : DWORD);
function getdwItemSpec : DWORD;
property dwItemSpec : DWORD read getdwItemSpec write setdwItemSpec;
procedure setdwItemData(const val : DWORD);
function getdwItemData : DWORD;
property dwItemData : DWORD read getdwItemData write setdwItemData;
procedure setdwHitInfo(const val : DWORD);
function getdwHitInfo : DWORD;
property dwHitInfo : DWORD read getdwHitInfo write setdwHitInfo;
end;
type __tagNMOBJECTNOTIFY__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMOBJECTNOTIFY;
public
function GetRecordPtr : pointer; override;
published
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type __tagNMRBAUTOSIZE__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMRBAUTOSIZE;
public
function GetRecordPtr : pointer; override;
published
procedure setfChanged(const val : BOOL);
function getfChanged : BOOL;
property fChanged : BOOL read getfChanged write setfChanged;
end;
type __tagNMREBAR__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMREBAR;
public
function GetRecordPtr : pointer; override;
published
procedure setdwMask(const val : DWORD);
function getdwMask : DWORD;
property dwMask : DWORD read getdwMask write setdwMask;
procedure setuBand(const val : UINT);
function getuBand : UINT;
property uBand : UINT read getuBand write setuBand;
procedure setfStyle(const val : UINT);
function getfStyle : UINT;
property fStyle : UINT read getfStyle write setfStyle;
procedure setwID(const val : UINT);
function getwID : UINT;
property wID : UINT read getwID write setwID;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagNMREBARCHILDSIZE__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMREBARCHILDSIZE;
public
function GetRecordPtr : pointer; override;
published
procedure setuBand(const val : UINT);
function getuBand : UINT;
property uBand : UINT read getuBand write setuBand;
procedure setwID(const val : UINT);
function getwID : UINT;
property wID : UINT read getwID write setwID;
end;
type __tagNMSELCHANGE__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMSELCHANGE;
public
function GetRecordPtr : pointer; override;
published
end;
type __tagNMTBGETINFOTIP__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMTBGETINFOTIP;
public
function GetRecordPtr : pointer; override;
published
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagNMTBGETINFOTIPA__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMTBGETINFOTIPA;
public
function GetRecordPtr : pointer; override;
published
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagNMTBGETINFOTIPW__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMTBGETINFOTIPW;
public
function GetRecordPtr : pointer; override;
published
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagNMTBHOTITEM__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMTBHOTITEM;
public
function GetRecordPtr : pointer; override;
published
procedure setidOld(const val : Integer);
function getidOld : Integer;
property idOld : Integer read getidOld write setidOld;
procedure setidNew(const val : Integer);
function getidNew : Integer;
property idNew : Integer read getidNew write setidNew;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type __tagNMTOOLBAR__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMTOOLBAR;
public
function GetRecordPtr : pointer; override;
published
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setcchText(const val : Integer);
function getcchText : Integer;
property cchText : Integer read getcchText write setcchText;
end;
type __tagNMTOOLBARA__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMTOOLBARA;
public
function GetRecordPtr : pointer; override;
published
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setcchText(const val : Integer);
function getcchText : Integer;
property cchText : Integer read getcchText write setcchText;
end;
type __tagNMTOOLBARW__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMTOOLBARW;
public
function GetRecordPtr : pointer; override;
published
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setcchText(const val : Integer);
function getcchText : Integer;
property cchText : Integer read getcchText write setcchText;
end;
type __tagNMTREEVIEW__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMTREEVIEW;
public
function GetRecordPtr : pointer; override;
published
procedure setaction(const val : UINT);
function getaction : UINT;
property action : UINT read getaction write setaction;
end;
type __tagNMTREEVIEWA__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMTREEVIEWA;
public
function GetRecordPtr : pointer; override;
published
procedure setaction(const val : UINT);
function getaction : UINT;
property action : UINT read getaction write setaction;
end;
type __tagNMTREEVIEWW__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMTREEVIEWW;
public
function GetRecordPtr : pointer; override;
published
procedure setaction(const val : UINT);
function getaction : UINT;
property action : UINT read getaction write setaction;
end;
type __tagNMTTCUSTOMDRAW__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMTTCUSTOMDRAW;
public
function GetRecordPtr : pointer; override;
published
procedure setuDrawFlags(const val : UINT);
function getuDrawFlags : UINT;
property uDrawFlags : UINT read getuDrawFlags write setuDrawFlags;
end;
type __tagNMTTDISPINFO__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMTTDISPINFO;
public
function GetRecordPtr : pointer; override;
published
procedure sethInst(const val : hInst);
function gethInst : hInst;
property hInst : hInst read gethInst write sethInst;
procedure setuFlags(const val : UINT);
function getuFlags : UINT;
property uFlags : UINT read getuFlags write setuFlags;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagNMTTDISPINFOA__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMTTDISPINFOA;
public
function GetRecordPtr : pointer; override;
published
procedure sethInst(const val : hInst);
function gethInst : hInst;
property hInst : hInst read gethInst write sethInst;
procedure setuFlags(const val : UINT);
function getuFlags : UINT;
property uFlags : UINT read getuFlags write setuFlags;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagNMTTDISPINFOW__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMTTDISPINFOW;
public
function GetRecordPtr : pointer; override;
published
procedure sethInst(const val : hInst);
function gethInst : hInst;
property hInst : hInst read gethInst write sethInst;
procedure setuFlags(const val : UINT);
function getuFlags : UINT;
property uFlags : UINT read getuFlags write setuFlags;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagNMTVCUSTOMDRAW__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMTVCUSTOMDRAW;
public
function GetRecordPtr : pointer; override;
published
procedure setclrText(const val : COLORREF);
function getclrText : COLORREF;
property clrText : COLORREF read getclrText write setclrText;
procedure setclrTextBk(const val : COLORREF);
function getclrTextBk : COLORREF;
property clrTextBk : COLORREF read getclrTextBk write setclrTextBk;
procedure setiLevel(const val : Integer);
function getiLevel : Integer;
property iLevel : Integer read getiLevel write setiLevel;
end;
type __tagNMTVGETINFOTIP__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMTVGETINFOTIP;
public
function GetRecordPtr : pointer; override;
published
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagNMTVGETINFOTIPA__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMTVGETINFOTIPA;
public
function GetRecordPtr : pointer; override;
published
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagNMTVGETINFOTIPW__Wrapper = class(TDCRecordWrapper)
private
fR : tagNMTVGETINFOTIPW;
public
function GetRecordPtr : pointer; override;
published
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagREBARBANDINFO__Wrapper = class(TDCRecordWrapper)
private
fR : tagREBARBANDINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : UINT);
function getcbSize : UINT;
property cbSize : UINT read getcbSize write setcbSize;
procedure setfMask(const val : UINT);
function getfMask : UINT;
property fMask : UINT read getfMask write setfMask;
procedure setfStyle(const val : UINT);
function getfStyle : UINT;
property fStyle : UINT read getfStyle write setfStyle;
procedure setclrFore(const val : TColorRef);
function getclrFore : TColorRef;
property clrFore : TColorRef read getclrFore write setclrFore;
procedure setclrBack(const val : TColorRef);
function getclrBack : TColorRef;
property clrBack : TColorRef read getclrBack write setclrBack;
procedure setcch(const val : UINT);
function getcch : UINT;
property cch : UINT read getcch write setcch;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setcxMinChild(const val : UINT);
function getcxMinChild : UINT;
property cxMinChild : UINT read getcxMinChild write setcxMinChild;
procedure setcyMinChild(const val : UINT);
function getcyMinChild : UINT;
property cyMinChild : UINT read getcyMinChild write setcyMinChild;
procedure setcx(const val : UINT);
function getcx : UINT;
property cx : UINT read getcx write setcx;
procedure setwID(const val : UINT);
function getwID : UINT;
property wID : UINT read getwID write setwID;
procedure setcyChild(const val : UINT);
function getcyChild : UINT;
property cyChild : UINT read getcyChild write setcyChild;
procedure setcyMaxChild(const val : UINT);
function getcyMaxChild : UINT;
property cyMaxChild : UINT read getcyMaxChild write setcyMaxChild;
procedure setcyIntegral(const val : UINT);
function getcyIntegral : UINT;
property cyIntegral : UINT read getcyIntegral write setcyIntegral;
procedure setcxIdeal(const val : UINT);
function getcxIdeal : UINT;
property cxIdeal : UINT read getcxIdeal write setcxIdeal;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setcxHeader(const val : UINT);
function getcxHeader : UINT;
property cxHeader : UINT read getcxHeader write setcxHeader;
end;
type __tagREBARBANDINFOA__Wrapper = class(TDCRecordWrapper)
private
fR : tagREBARBANDINFOA;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : UINT);
function getcbSize : UINT;
property cbSize : UINT read getcbSize write setcbSize;
procedure setfMask(const val : UINT);
function getfMask : UINT;
property fMask : UINT read getfMask write setfMask;
procedure setfStyle(const val : UINT);
function getfStyle : UINT;
property fStyle : UINT read getfStyle write setfStyle;
procedure setclrFore(const val : TColorRef);
function getclrFore : TColorRef;
property clrFore : TColorRef read getclrFore write setclrFore;
procedure setclrBack(const val : TColorRef);
function getclrBack : TColorRef;
property clrBack : TColorRef read getclrBack write setclrBack;
procedure setcch(const val : UINT);
function getcch : UINT;
property cch : UINT read getcch write setcch;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setcxMinChild(const val : UINT);
function getcxMinChild : UINT;
property cxMinChild : UINT read getcxMinChild write setcxMinChild;
procedure setcyMinChild(const val : UINT);
function getcyMinChild : UINT;
property cyMinChild : UINT read getcyMinChild write setcyMinChild;
procedure setcx(const val : UINT);
function getcx : UINT;
property cx : UINT read getcx write setcx;
procedure setwID(const val : UINT);
function getwID : UINT;
property wID : UINT read getwID write setwID;
procedure setcyChild(const val : UINT);
function getcyChild : UINT;
property cyChild : UINT read getcyChild write setcyChild;
procedure setcyMaxChild(const val : UINT);
function getcyMaxChild : UINT;
property cyMaxChild : UINT read getcyMaxChild write setcyMaxChild;
procedure setcyIntegral(const val : UINT);
function getcyIntegral : UINT;
property cyIntegral : UINT read getcyIntegral write setcyIntegral;
procedure setcxIdeal(const val : UINT);
function getcxIdeal : UINT;
property cxIdeal : UINT read getcxIdeal write setcxIdeal;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setcxHeader(const val : UINT);
function getcxHeader : UINT;
property cxHeader : UINT read getcxHeader write setcxHeader;
end;
type __tagREBARBANDINFOW__Wrapper = class(TDCRecordWrapper)
private
fR : tagREBARBANDINFOW;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : UINT);
function getcbSize : UINT;
property cbSize : UINT read getcbSize write setcbSize;
procedure setfMask(const val : UINT);
function getfMask : UINT;
property fMask : UINT read getfMask write setfMask;
procedure setfStyle(const val : UINT);
function getfStyle : UINT;
property fStyle : UINT read getfStyle write setfStyle;
procedure setclrFore(const val : TColorRef);
function getclrFore : TColorRef;
property clrFore : TColorRef read getclrFore write setclrFore;
procedure setclrBack(const val : TColorRef);
function getclrBack : TColorRef;
property clrBack : TColorRef read getclrBack write setclrBack;
procedure setcch(const val : UINT);
function getcch : UINT;
property cch : UINT read getcch write setcch;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setcxMinChild(const val : UINT);
function getcxMinChild : UINT;
property cxMinChild : UINT read getcxMinChild write setcxMinChild;
procedure setcyMinChild(const val : UINT);
function getcyMinChild : UINT;
property cyMinChild : UINT read getcyMinChild write setcyMinChild;
procedure setcx(const val : UINT);
function getcx : UINT;
property cx : UINT read getcx write setcx;
procedure setwID(const val : UINT);
function getwID : UINT;
property wID : UINT read getwID write setwID;
procedure setcyChild(const val : UINT);
function getcyChild : UINT;
property cyChild : UINT read getcyChild write setcyChild;
procedure setcyMaxChild(const val : UINT);
function getcyMaxChild : UINT;
property cyMaxChild : UINT read getcyMaxChild write setcyMaxChild;
procedure setcyIntegral(const val : UINT);
function getcyIntegral : UINT;
property cyIntegral : UINT read getcyIntegral write setcyIntegral;
procedure setcxIdeal(const val : UINT);
function getcxIdeal : UINT;
property cxIdeal : UINT read getcxIdeal write setcxIdeal;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setcxHeader(const val : UINT);
function getcxHeader : UINT;
property cxHeader : UINT read getcxHeader write setcxHeader;
end;
type __tagREBARINFO__Wrapper = class(TDCRecordWrapper)
private
fR : tagREBARINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : UINT);
function getcbSize : UINT;
property cbSize : UINT read getcbSize write setcbSize;
procedure setfMask(const val : UINT);
function getfMask : UINT;
property fMask : UINT read getfMask write setfMask;
procedure sethiml(const val : HIMAGELIST);
function gethiml : HIMAGELIST;
property himl : HIMAGELIST read gethiml write sethiml;
end;
type __tagTBADDBITMAP__Wrapper = class(TDCRecordWrapper)
private
fR : tagTBADDBITMAP;
public
function GetRecordPtr : pointer; override;
published
procedure sethInst(const val : THandle);
function gethInst : THandle;
property hInst : THandle read gethInst write sethInst;
procedure setnID(const val : UINT);
function getnID : UINT;
property nID : UINT read getnID write setnID;
end;
type __tagTBSAVEPARAMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagTBSAVEPARAMS;
public
function GetRecordPtr : pointer; override;
published
procedure sethkr(const val : THandle);
function gethkr : THandle;
property hkr : THandle read gethkr write sethkr;
end;
type __tagTBSAVEPARAMSA__Wrapper = class(TDCRecordWrapper)
private
fR : tagTBSAVEPARAMSA;
public
function GetRecordPtr : pointer; override;
published
procedure sethkr(const val : THandle);
function gethkr : THandle;
property hkr : THandle read gethkr write sethkr;
end;
type __tagTBSAVEPARAMSW__Wrapper = class(TDCRecordWrapper)
private
fR : tagTBSAVEPARAMSW;
public
function GetRecordPtr : pointer; override;
published
procedure sethkr(const val : THandle);
function gethkr : THandle;
property hkr : THandle read gethkr write sethkr;
end;
type __tagTCHITTESTINFO__Wrapper = class(TDCRecordWrapper)
private
fR : tagTCHITTESTINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
end;
type __tagTCITEM__Wrapper = class(TDCRecordWrapper)
private
fR : tagTCITEM;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setdwState(const val : UINT);
function getdwState : UINT;
property dwState : UINT read getdwState write setdwState;
procedure setdwStateMask(const val : UINT);
function getdwStateMask : UINT;
property dwStateMask : UINT read getdwStateMask write setdwStateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagTCITEMA__Wrapper = class(TDCRecordWrapper)
private
fR : tagTCITEMA;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setdwState(const val : UINT);
function getdwState : UINT;
property dwState : UINT read getdwState write setdwState;
procedure setdwStateMask(const val : UINT);
function getdwStateMask : UINT;
property dwStateMask : UINT read getdwStateMask write setdwStateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagTCITEMHEADER__Wrapper = class(TDCRecordWrapper)
private
fR : tagTCITEMHEADER;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setlpReserved1(const val : UINT);
function getlpReserved1 : UINT;
property lpReserved1 : UINT read getlpReserved1 write setlpReserved1;
procedure setlpReserved2(const val : UINT);
function getlpReserved2 : UINT;
property lpReserved2 : UINT read getlpReserved2 write setlpReserved2;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
end;
type __tagTCITEMHEADERA__Wrapper = class(TDCRecordWrapper)
private
fR : tagTCITEMHEADERA;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setlpReserved1(const val : UINT);
function getlpReserved1 : UINT;
property lpReserved1 : UINT read getlpReserved1 write setlpReserved1;
procedure setlpReserved2(const val : UINT);
function getlpReserved2 : UINT;
property lpReserved2 : UINT read getlpReserved2 write setlpReserved2;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
end;
type __tagTCITEMHEADERW__Wrapper = class(TDCRecordWrapper)
private
fR : tagTCITEMHEADERW;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setlpReserved1(const val : UINT);
function getlpReserved1 : UINT;
property lpReserved1 : UINT read getlpReserved1 write setlpReserved1;
procedure setlpReserved2(const val : UINT);
function getlpReserved2 : UINT;
property lpReserved2 : UINT read getlpReserved2 write setlpReserved2;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
end;
type __tagTCITEMW__Wrapper = class(TDCRecordWrapper)
private
fR : tagTCITEMW;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setdwState(const val : UINT);
function getdwState : UINT;
property dwState : UINT read getdwState write setdwState;
procedure setdwStateMask(const val : UINT);
function getdwStateMask : UINT;
property dwStateMask : UINT read getdwStateMask write setdwStateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagTCKEYDOWN__Wrapper = class(TDCRecordWrapper)
private
fR : tagTCKEYDOWN;
public
function GetRecordPtr : pointer; override;
published
procedure setwVKey(const val : Word);
function getwVKey : Word;
property wVKey : Word read getwVKey write setwVKey;
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
end;
type __tagTOOLINFO__Wrapper = class(TDCRecordWrapper)
private
fR : tagTOOLINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : UINT);
function getcbSize : UINT;
property cbSize : UINT read getcbSize write setcbSize;
procedure setuFlags(const val : UINT);
function getuFlags : UINT;
property uFlags : UINT read getuFlags write setuFlags;
procedure setuId(const val : UINT);
function getuId : UINT;
property uId : UINT read getuId write setuId;
procedure sethInst(const val : THandle);
function gethInst : THandle;
property hInst : THandle read gethInst write sethInst;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagTOOLINFOA__Wrapper = class(TDCRecordWrapper)
private
fR : tagTOOLINFOA;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : UINT);
function getcbSize : UINT;
property cbSize : UINT read getcbSize write setcbSize;
procedure setuFlags(const val : UINT);
function getuFlags : UINT;
property uFlags : UINT read getuFlags write setuFlags;
procedure setuId(const val : UINT);
function getuId : UINT;
property uId : UINT read getuId write setuId;
procedure sethInst(const val : THandle);
function gethInst : THandle;
property hInst : THandle read gethInst write sethInst;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagTOOLINFOW__Wrapper = class(TDCRecordWrapper)
private
fR : tagTOOLINFOW;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : UINT);
function getcbSize : UINT;
property cbSize : UINT read getcbSize write setcbSize;
procedure setuFlags(const val : UINT);
function getuFlags : UINT;
property uFlags : UINT read getuFlags write setuFlags;
procedure setuId(const val : UINT);
function getuId : UINT;
property uId : UINT read getuId write setuId;
procedure sethInst(const val : THandle);
function gethInst : THandle;
property hInst : THandle read gethInst write sethInst;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagTOOLTIPTEXT__Wrapper = class(TDCRecordWrapper)
private
fR : tagTOOLTIPTEXT;
public
function GetRecordPtr : pointer; override;
published
procedure sethInst(const val : hInst);
function gethInst : hInst;
property hInst : hInst read gethInst write sethInst;
procedure setuFlags(const val : UINT);
function getuFlags : UINT;
property uFlags : UINT read getuFlags write setuFlags;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagTOOLTIPTEXTA__Wrapper = class(TDCRecordWrapper)
private
fR : tagTOOLTIPTEXTA;
public
function GetRecordPtr : pointer; override;
published
procedure sethInst(const val : hInst);
function gethInst : hInst;
property hInst : hInst read gethInst write sethInst;
procedure setuFlags(const val : UINT);
function getuFlags : UINT;
property uFlags : UINT read getuFlags write setuFlags;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagTOOLTIPTEXTW__Wrapper = class(TDCRecordWrapper)
private
fR : tagTOOLTIPTEXTW;
public
function GetRecordPtr : pointer; override;
published
procedure sethInst(const val : hInst);
function gethInst : hInst;
property hInst : hInst read gethInst write sethInst;
procedure setuFlags(const val : UINT);
function getuFlags : UINT;
property uFlags : UINT read getuFlags write setuFlags;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagTRACKMOUSEEVENT__Wrapper = class(TDCRecordWrapper)
private
fR : tagTRACKMOUSEEVENT;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setdwHoverTime(const val : DWORD);
function getdwHoverTime : DWORD;
property dwHoverTime : DWORD read getdwHoverTime write setdwHoverTime;
end;
type __tagTVDISPINFO__Wrapper = class(TDCRecordWrapper)
private
fR : tagTVDISPINFO;
public
function GetRecordPtr : pointer; override;
published
end;
type __tagTVDISPINFOA__Wrapper = class(TDCRecordWrapper)
private
fR : tagTVDISPINFOA;
public
function GetRecordPtr : pointer; override;
published
end;
type __tagTVDISPINFOW__Wrapper = class(TDCRecordWrapper)
private
fR : tagTVDISPINFOW;
public
function GetRecordPtr : pointer; override;
published
end;
type __tagTVHITTESTINFO__Wrapper = class(TDCRecordWrapper)
private
fR : tagTVHITTESTINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
end;
type __tagTVINSERTSTRUCT__Wrapper = class(TDCRecordWrapper)
private
fR : tagTVINSERTSTRUCT;
public
function GetRecordPtr : pointer; override;
published
end;
type __tagTVINSERTSTRUCTA__Wrapper = class(TDCRecordWrapper)
private
fR : tagTVINSERTSTRUCTA;
public
function GetRecordPtr : pointer; override;
published
end;
type __tagTVINSERTSTRUCTW__Wrapper = class(TDCRecordWrapper)
private
fR : tagTVINSERTSTRUCTW;
public
function GetRecordPtr : pointer; override;
published
end;
type __tagTVITEM__Wrapper = class(TDCRecordWrapper)
private
fR : tagTVITEM;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setstate(const val : UINT);
function getstate : UINT;
property state : UINT read getstate write setstate;
procedure setstateMask(const val : UINT);
function getstateMask : UINT;
property stateMask : UINT read getstateMask write setstateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiSelectedImage(const val : Integer);
function getiSelectedImage : Integer;
property iSelectedImage : Integer read getiSelectedImage write setiSelectedImage;
procedure setcChildren(const val : Integer);
function getcChildren : Integer;
property cChildren : Integer read getcChildren write setcChildren;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagTVITEMA__Wrapper = class(TDCRecordWrapper)
private
fR : tagTVITEMA;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setstate(const val : UINT);
function getstate : UINT;
property state : UINT read getstate write setstate;
procedure setstateMask(const val : UINT);
function getstateMask : UINT;
property stateMask : UINT read getstateMask write setstateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiSelectedImage(const val : Integer);
function getiSelectedImage : Integer;
property iSelectedImage : Integer read getiSelectedImage write setiSelectedImage;
procedure setcChildren(const val : Integer);
function getcChildren : Integer;
property cChildren : Integer read getcChildren write setcChildren;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagTVITEMEX__Wrapper = class(TDCRecordWrapper)
private
fR : tagTVITEMEX;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setstate(const val : UINT);
function getstate : UINT;
property state : UINT read getstate write setstate;
procedure setstateMask(const val : UINT);
function getstateMask : UINT;
property stateMask : UINT read getstateMask write setstateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiSelectedImage(const val : Integer);
function getiSelectedImage : Integer;
property iSelectedImage : Integer read getiSelectedImage write setiSelectedImage;
procedure setcChildren(const val : Integer);
function getcChildren : Integer;
property cChildren : Integer read getcChildren write setcChildren;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setiIntegral(const val : Integer);
function getiIntegral : Integer;
property iIntegral : Integer read getiIntegral write setiIntegral;
end;
type __tagTVITEMEXA__Wrapper = class(TDCRecordWrapper)
private
fR : tagTVITEMEXA;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setstate(const val : UINT);
function getstate : UINT;
property state : UINT read getstate write setstate;
procedure setstateMask(const val : UINT);
function getstateMask : UINT;
property stateMask : UINT read getstateMask write setstateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiSelectedImage(const val : Integer);
function getiSelectedImage : Integer;
property iSelectedImage : Integer read getiSelectedImage write setiSelectedImage;
procedure setcChildren(const val : Integer);
function getcChildren : Integer;
property cChildren : Integer read getcChildren write setcChildren;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setiIntegral(const val : Integer);
function getiIntegral : Integer;
property iIntegral : Integer read getiIntegral write setiIntegral;
end;
type __tagTVITEMEXW__Wrapper = class(TDCRecordWrapper)
private
fR : tagTVITEMEXW;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setstate(const val : UINT);
function getstate : UINT;
property state : UINT read getstate write setstate;
procedure setstateMask(const val : UINT);
function getstateMask : UINT;
property stateMask : UINT read getstateMask write setstateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiSelectedImage(const val : Integer);
function getiSelectedImage : Integer;
property iSelectedImage : Integer read getiSelectedImage write setiSelectedImage;
procedure setcChildren(const val : Integer);
function getcChildren : Integer;
property cChildren : Integer read getcChildren write setcChildren;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setiIntegral(const val : Integer);
function getiIntegral : Integer;
property iIntegral : Integer read getiIntegral write setiIntegral;
end;
type __tagTVITEMW__Wrapper = class(TDCRecordWrapper)
private
fR : tagTVITEMW;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setstate(const val : UINT);
function getstate : UINT;
property state : UINT read getstate write setstate;
procedure setstateMask(const val : UINT);
function getstateMask : UINT;
property stateMask : UINT read getstateMask write setstateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiSelectedImage(const val : Integer);
function getiSelectedImage : Integer;
property iSelectedImage : Integer read getiSelectedImage write setiSelectedImage;
procedure setcChildren(const val : Integer);
function getcChildren : Integer;
property cChildren : Integer read getcChildren write setcChildren;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagTVKEYDOWN__Wrapper = class(TDCRecordWrapper)
private
fR : tagTVKEYDOWN;
public
function GetRecordPtr : pointer; override;
published
procedure setwVKey(const val : Word);
function getwVKey : Word;
property wVKey : Word read getwVKey write setwVKey;
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
end;
type __tagTVSORTCB__Wrapper = class(TDCRecordWrapper)
private
fR : tagTVSORTCB;
public
function GetRecordPtr : pointer; override;
published
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TBADDBITMAP__Wrapper = class(TDCRecordWrapper)
private
fR : TBADDBITMAP;
public
function GetRecordPtr : pointer; override;
published
procedure sethInst(const val : THandle);
function gethInst : THandle;
property hInst : THandle read gethInst write sethInst;
procedure setnID(const val : UINT);
function getnID : UINT;
property nID : UINT read getnID write setnID;
end;
type __TBBUTTONINFO__Wrapper = class(TDCRecordWrapper)
private
fR : TBBUTTONINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : UINT);
function getcbSize : UINT;
property cbSize : UINT read getcbSize write setcbSize;
procedure setdwMask(const val : DWORD);
function getdwMask : DWORD;
property dwMask : DWORD read getdwMask write setdwMask;
procedure setidCommand(const val : Integer);
function getidCommand : Integer;
property idCommand : Integer read getidCommand write setidCommand;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setfsState(const val : Byte);
function getfsState : Byte;
property fsState : Byte read getfsState write setfsState;
procedure setfsStyle(const val : Byte);
function getfsStyle : Byte;
property fsStyle : Byte read getfsStyle write setfsStyle;
procedure setcx(const val : Word);
function getcx : Word;
property cx : Word read getcx write setcx;
procedure setlParam(const val : DWORD);
function getlParam : DWORD;
property lParam : DWORD read getlParam write setlParam;
procedure setcchText(const val : Integer);
function getcchText : Integer;
property cchText : Integer read getcchText write setcchText;
end;
type __TBBUTTONINFOA__Wrapper = class(TDCRecordWrapper)
private
fR : TBBUTTONINFOA;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : UINT);
function getcbSize : UINT;
property cbSize : UINT read getcbSize write setcbSize;
procedure setdwMask(const val : DWORD);
function getdwMask : DWORD;
property dwMask : DWORD read getdwMask write setdwMask;
procedure setidCommand(const val : Integer);
function getidCommand : Integer;
property idCommand : Integer read getidCommand write setidCommand;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setfsState(const val : Byte);
function getfsState : Byte;
property fsState : Byte read getfsState write setfsState;
procedure setfsStyle(const val : Byte);
function getfsStyle : Byte;
property fsStyle : Byte read getfsStyle write setfsStyle;
procedure setcx(const val : Word);
function getcx : Word;
property cx : Word read getcx write setcx;
procedure setlParam(const val : DWORD);
function getlParam : DWORD;
property lParam : DWORD read getlParam write setlParam;
procedure setcchText(const val : Integer);
function getcchText : Integer;
property cchText : Integer read getcchText write setcchText;
end;
type __TBBUTTONINFOW__Wrapper = class(TDCRecordWrapper)
private
fR : TBBUTTONINFOW;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : UINT);
function getcbSize : UINT;
property cbSize : UINT read getcbSize write setcbSize;
procedure setdwMask(const val : DWORD);
function getdwMask : DWORD;
property dwMask : DWORD read getdwMask write setdwMask;
procedure setidCommand(const val : Integer);
function getidCommand : Integer;
property idCommand : Integer read getidCommand write setidCommand;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setfsState(const val : Byte);
function getfsState : Byte;
property fsState : Byte read getfsState write setfsState;
procedure setfsStyle(const val : Byte);
function getfsStyle : Byte;
property fsStyle : Byte read getfsStyle write setfsStyle;
procedure setcx(const val : Word);
function getcx : Word;
property cx : Word read getcx write setcx;
procedure setlParam(const val : DWORD);
function getlParam : DWORD;
property lParam : DWORD read getlParam write setlParam;
procedure setcchText(const val : Integer);
function getcchText : Integer;
property cchText : Integer read getcchText write setcchText;
end;
type __TBINSERTMARK__Wrapper = class(TDCRecordWrapper)
private
fR : TBINSERTMARK;
public
function GetRecordPtr : pointer; override;
published
procedure setiButton(const val : Integer);
function getiButton : Integer;
property iButton : Integer read getiButton write setiButton;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type __TBREPLACEBITMAP__Wrapper = class(TDCRecordWrapper)
private
fR : TBREPLACEBITMAP;
public
function GetRecordPtr : pointer; override;
published
procedure sethInstOld(const val : THandle);
function gethInstOld : THandle;
property hInstOld : THandle read gethInstOld write sethInstOld;
procedure setnIDOld(const val : Cardinal);
function getnIDOld : Cardinal;
property nIDOld : Cardinal read getnIDOld write setnIDOld;
procedure sethInstNew(const val : THandle);
function gethInstNew : THandle;
property hInstNew : THandle read gethInstNew write sethInstNew;
procedure setnIDNew(const val : Cardinal);
function getnIDNew : Cardinal;
property nIDNew : Cardinal read getnIDNew write setnIDNew;
procedure setnButtons(const val : Integer);
function getnButtons : Integer;
property nButtons : Integer read getnButtons write setnButtons;
end;
type __TBSAVEPARAMS__Wrapper = class(TDCRecordWrapper)
private
fR : TBSAVEPARAMS;
public
function GetRecordPtr : pointer; override;
published
procedure sethkr(const val : THandle);
function gethkr : THandle;
property hkr : THandle read gethkr write sethkr;
end;
type __TBSAVEPARAMSA__Wrapper = class(TDCRecordWrapper)
private
fR : TBSAVEPARAMSA;
public
function GetRecordPtr : pointer; override;
published
procedure sethkr(const val : THandle);
function gethkr : THandle;
property hkr : THandle read gethkr write sethkr;
end;
type __TBSAVEPARAMSW__Wrapper = class(TDCRecordWrapper)
private
fR : TBSAVEPARAMSW;
public
function GetRecordPtr : pointer; override;
published
procedure sethkr(const val : THandle);
function gethkr : THandle;
property hkr : THandle read gethkr write sethkr;
end;
type __TC_HITTESTINFO__Wrapper = class(TDCRecordWrapper)
private
fR : TC_HITTESTINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
end;
type __TC_ITEM__Wrapper = class(TDCRecordWrapper)
private
fR : TC_ITEM;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setdwState(const val : UINT);
function getdwState : UINT;
property dwState : UINT read getdwState write setdwState;
procedure setdwStateMask(const val : UINT);
function getdwStateMask : UINT;
property dwStateMask : UINT read getdwStateMask write setdwStateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TC_ITEMA__Wrapper = class(TDCRecordWrapper)
private
fR : TC_ITEMA;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setdwState(const val : UINT);
function getdwState : UINT;
property dwState : UINT read getdwState write setdwState;
procedure setdwStateMask(const val : UINT);
function getdwStateMask : UINT;
property dwStateMask : UINT read getdwStateMask write setdwStateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TC_ITEMHEADER__Wrapper = class(TDCRecordWrapper)
private
fR : TC_ITEMHEADER;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setlpReserved1(const val : UINT);
function getlpReserved1 : UINT;
property lpReserved1 : UINT read getlpReserved1 write setlpReserved1;
procedure setlpReserved2(const val : UINT);
function getlpReserved2 : UINT;
property lpReserved2 : UINT read getlpReserved2 write setlpReserved2;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
end;
type __TC_ITEMHEADERA__Wrapper = class(TDCRecordWrapper)
private
fR : TC_ITEMHEADERA;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setlpReserved1(const val : UINT);
function getlpReserved1 : UINT;
property lpReserved1 : UINT read getlpReserved1 write setlpReserved1;
procedure setlpReserved2(const val : UINT);
function getlpReserved2 : UINT;
property lpReserved2 : UINT read getlpReserved2 write setlpReserved2;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
end;
type __TC_ITEMHEADERW__Wrapper = class(TDCRecordWrapper)
private
fR : TC_ITEMHEADERW;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setlpReserved1(const val : UINT);
function getlpReserved1 : UINT;
property lpReserved1 : UINT read getlpReserved1 write setlpReserved1;
procedure setlpReserved2(const val : UINT);
function getlpReserved2 : UINT;
property lpReserved2 : UINT read getlpReserved2 write setlpReserved2;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
end;
type __TC_ITEMW__Wrapper = class(TDCRecordWrapper)
private
fR : TC_ITEMW;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setdwState(const val : UINT);
function getdwState : UINT;
property dwState : UINT read getdwState write setdwState;
procedure setdwStateMask(const val : UINT);
function getdwStateMask : UINT;
property dwStateMask : UINT read getdwStateMask write setdwStateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TC_KEYDOWN__Wrapper = class(TDCRecordWrapper)
private
fR : TC_KEYDOWN;
public
function GetRecordPtr : pointer; override;
published
procedure setwVKey(const val : Word);
function getwVKey : Word;
property wVKey : Word read getwVKey write setwVKey;
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
end;
type __TColorMap__Wrapper = class(TDCRecordWrapper)
private
fR : TColorMap;
public
function GetRecordPtr : pointer; override;
published
procedure setcFrom(const val : TColorRef);
function getcFrom : TColorRef;
property cFrom : TColorRef read getcFrom write setcFrom;
procedure setcTo(const val : TColorRef);
function getcTo : TColorRef;
property cTo : TColorRef read getcTo write setcTo;
end;
type __TColorScheme__Wrapper = class(TDCRecordWrapper)
private
fR : TColorScheme;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setclrBtnHighlight(const val : COLORREF);
function getclrBtnHighlight : COLORREF;
property clrBtnHighlight : COLORREF read getclrBtnHighlight write setclrBtnHighlight;
procedure setclrBtnShadow(const val : COLORREF);
function getclrBtnShadow : COLORREF;
property clrBtnShadow : COLORREF read getclrBtnShadow write setclrBtnShadow;
end;
type __TComboBoxExItem__Wrapper = class(TDCRecordWrapper)
private
fR : TComboBoxExItem;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiSelectedImage(const val : Integer);
function getiSelectedImage : Integer;
property iSelectedImage : Integer read getiSelectedImage write setiSelectedImage;
procedure setiOverlay(const val : Integer);
function getiOverlay : Integer;
property iOverlay : Integer read getiOverlay write setiOverlay;
procedure setiIndent(const val : Integer);
function getiIndent : Integer;
property iIndent : Integer read getiIndent write setiIndent;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TComboBoxExItemA__Wrapper = class(TDCRecordWrapper)
private
fR : TComboBoxExItemA;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiSelectedImage(const val : Integer);
function getiSelectedImage : Integer;
property iSelectedImage : Integer read getiSelectedImage write setiSelectedImage;
procedure setiOverlay(const val : Integer);
function getiOverlay : Integer;
property iOverlay : Integer read getiOverlay write setiOverlay;
procedure setiIndent(const val : Integer);
function getiIndent : Integer;
property iIndent : Integer read getiIndent write setiIndent;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TComboBoxExItemW__Wrapper = class(TDCRecordWrapper)
private
fR : TComboBoxExItemW;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiSelectedImage(const val : Integer);
function getiSelectedImage : Integer;
property iSelectedImage : Integer read getiSelectedImage write setiSelectedImage;
procedure setiOverlay(const val : Integer);
function getiOverlay : Integer;
property iOverlay : Integer read getiOverlay write setiOverlay;
procedure setiIndent(const val : Integer);
function getiIndent : Integer;
property iIndent : Integer read getiIndent write setiIndent;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TDragListInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TDragListInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setuNotification(const val : UINT);
function getuNotification : UINT;
property uNotification : UINT read getuNotification write setuNotification;
end;
type __THDHitTestInfo__Wrapper = class(TDCRecordWrapper)
private
fR : THDHitTestInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setFlags(const val : Cardinal);
function getFlags : Cardinal;
property Flags : Cardinal read getFlags write setFlags;
procedure setItem(const val : Integer);
function getItem : Integer;
property Item : Integer read getItem write setItem;
end;
type __THDItem__Wrapper = class(TDCRecordWrapper)
private
fR : THDItem;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : Cardinal);
function getMask : Cardinal;
property Mask : Cardinal read getMask write setMask;
procedure setcxy(const val : Integer);
function getcxy : Integer;
property cxy : Integer read getcxy write setcxy;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setfmt(const val : Integer);
function getfmt : Integer;
property fmt : Integer read getfmt write setfmt;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiOrder(const val : Integer);
function getiOrder : Integer;
property iOrder : Integer read getiOrder write setiOrder;
end;
type __THDItemA__Wrapper = class(TDCRecordWrapper)
private
fR : THDItemA;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : Cardinal);
function getMask : Cardinal;
property Mask : Cardinal read getMask write setMask;
procedure setcxy(const val : Integer);
function getcxy : Integer;
property cxy : Integer read getcxy write setcxy;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setfmt(const val : Integer);
function getfmt : Integer;
property fmt : Integer read getfmt write setfmt;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiOrder(const val : Integer);
function getiOrder : Integer;
property iOrder : Integer read getiOrder write setiOrder;
end;
type __THDItemW__Wrapper = class(TDCRecordWrapper)
private
fR : THDItemW;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : Cardinal);
function getMask : Cardinal;
property Mask : Cardinal read getMask write setMask;
procedure setcxy(const val : Integer);
function getcxy : Integer;
property cxy : Integer read getcxy write setcxy;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setfmt(const val : Integer);
function getfmt : Integer;
property fmt : Integer read getfmt write setfmt;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiOrder(const val : Integer);
function getiOrder : Integer;
property iOrder : Integer read getiOrder write setiOrder;
end;
type __THDLayout__Wrapper = class(TDCRecordWrapper)
private
fR : THDLayout;
public
function GetRecordPtr : pointer; override;
published
end;
type __THDNotify__Wrapper = class(TDCRecordWrapper)
private
fR : THDNotify;
public
function GetRecordPtr : pointer; override;
published
procedure setItem(const val : Integer);
function getItem : Integer;
property Item : Integer read getItem write setItem;
procedure setButton(const val : Integer);
function getButton : Integer;
property Button : Integer read getButton write setButton;
end;
type __THDNotifyA__Wrapper = class(TDCRecordWrapper)
private
fR : THDNotifyA;
public
function GetRecordPtr : pointer; override;
published
procedure setItem(const val : Integer);
function getItem : Integer;
property Item : Integer read getItem write setItem;
procedure setButton(const val : Integer);
function getButton : Integer;
property Button : Integer read getButton write setButton;
end;
type __THDNotifyW__Wrapper = class(TDCRecordWrapper)
private
fR : THDNotifyW;
public
function GetRecordPtr : pointer; override;
published
procedure setItem(const val : Integer);
function getItem : Integer;
property Item : Integer read getItem write setItem;
procedure setButton(const val : Integer);
function getButton : Integer;
property Button : Integer read getButton write setButton;
end;
type __TImageInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TImageInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setUnused1(const val : Integer);
function getUnused1 : Integer;
property Unused1 : Integer read getUnused1 write setUnused1;
procedure setUnused2(const val : Integer);
function getUnused2 : Integer;
property Unused2 : Integer read getUnused2 write setUnused2;
end;
type __TImageListDrawParams__Wrapper = class(TDCRecordWrapper)
private
fR : TImageListDrawParams;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure sethiml(const val : HIMAGELIST);
function gethiml : HIMAGELIST;
property himl : HIMAGELIST read gethiml write sethiml;
procedure seti(const val : Integer);
function geti : Integer;
property i : Integer read geti write seti;
procedure setx(const val : Integer);
function getx : Integer;
property x : Integer read getx write setx;
procedure sety(const val : Integer);
function gety : Integer;
property y : Integer read gety write sety;
procedure setcx(const val : Integer);
function getcx : Integer;
property cx : Integer read getcx write setcx;
procedure setcy(const val : Integer);
function getcy : Integer;
property cy : Integer read getcy write setcy;
procedure setxBitmap(const val : Integer);
function getxBitmap : Integer;
property xBitmap : Integer read getxBitmap write setxBitmap;
procedure setyBitmap(const val : Integer);
function getyBitmap : Integer;
property yBitmap : Integer read getyBitmap write setyBitmap;
procedure setrgbBk(const val : COLORREF);
function getrgbBk : COLORREF;
property rgbBk : COLORREF read getrgbBk write setrgbBk;
procedure setrgbFg(const val : COLORREF);
function getrgbFg : COLORREF;
property rgbFg : COLORREF read getrgbFg write setrgbFg;
procedure setfStyle(const val : UINT);
function getfStyle : UINT;
property fStyle : UINT read getfStyle write setfStyle;
procedure setdwRop(const val : DWORD);
function getdwRop : DWORD;
property dwRop : DWORD read getdwRop write setdwRop;
end;
type __TInitCommonControlsEx__Wrapper = class(TDCRecordWrapper)
private
fR : TInitCommonControlsEx;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setdwICC(const val : DWORD);
function getdwICC : DWORD;
property dwICC : DWORD read getdwICC write setdwICC;
end;
type __TLVBKImage__Wrapper = class(TDCRecordWrapper)
private
fR : TLVBKImage;
public
function GetRecordPtr : pointer; override;
published
procedure setulFlags(const val : ULONG);
function getulFlags : ULONG;
property ulFlags : ULONG read getulFlags write setulFlags;
procedure setcchImageMax(const val : UINT);
function getcchImageMax : UINT;
property cchImageMax : UINT read getcchImageMax write setcchImageMax;
procedure setxOffsetPercent(const val : Integer);
function getxOffsetPercent : Integer;
property xOffsetPercent : Integer read getxOffsetPercent write setxOffsetPercent;
procedure setyOffsetPercent(const val : Integer);
function getyOffsetPercent : Integer;
property yOffsetPercent : Integer read getyOffsetPercent write setyOffsetPercent;
end;
type __TLVBKImageA__Wrapper = class(TDCRecordWrapper)
private
fR : TLVBKImageA;
public
function GetRecordPtr : pointer; override;
published
procedure setulFlags(const val : ULONG);
function getulFlags : ULONG;
property ulFlags : ULONG read getulFlags write setulFlags;
procedure setcchImageMax(const val : UINT);
function getcchImageMax : UINT;
property cchImageMax : UINT read getcchImageMax write setcchImageMax;
procedure setxOffsetPercent(const val : Integer);
function getxOffsetPercent : Integer;
property xOffsetPercent : Integer read getxOffsetPercent write setxOffsetPercent;
procedure setyOffsetPercent(const val : Integer);
function getyOffsetPercent : Integer;
property yOffsetPercent : Integer read getyOffsetPercent write setyOffsetPercent;
end;
type __TLVBKImageW__Wrapper = class(TDCRecordWrapper)
private
fR : TLVBKImageW;
public
function GetRecordPtr : pointer; override;
published
procedure setulFlags(const val : ULONG);
function getulFlags : ULONG;
property ulFlags : ULONG read getulFlags write setulFlags;
procedure setcchImageMax(const val : UINT);
function getcchImageMax : UINT;
property cchImageMax : UINT read getcchImageMax write setcchImageMax;
procedure setxOffsetPercent(const val : Integer);
function getxOffsetPercent : Integer;
property xOffsetPercent : Integer read getxOffsetPercent write setxOffsetPercent;
procedure setyOffsetPercent(const val : Integer);
function getyOffsetPercent : Integer;
property yOffsetPercent : Integer read getyOffsetPercent write setyOffsetPercent;
end;
type __TLVColumn__Wrapper = class(TDCRecordWrapper)
private
fR : TLVColumn;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setfmt(const val : Integer);
function getfmt : Integer;
property fmt : Integer read getfmt write setfmt;
procedure setcx(const val : Integer);
function getcx : Integer;
property cx : Integer read getcx write setcx;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiOrder(const val : Integer);
function getiOrder : Integer;
property iOrder : Integer read getiOrder write setiOrder;
end;
type __TLVColumnA__Wrapper = class(TDCRecordWrapper)
private
fR : TLVColumnA;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setfmt(const val : Integer);
function getfmt : Integer;
property fmt : Integer read getfmt write setfmt;
procedure setcx(const val : Integer);
function getcx : Integer;
property cx : Integer read getcx write setcx;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiOrder(const val : Integer);
function getiOrder : Integer;
property iOrder : Integer read getiOrder write setiOrder;
end;
type __TLVColumnW__Wrapper = class(TDCRecordWrapper)
private
fR : TLVColumnW;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setfmt(const val : Integer);
function getfmt : Integer;
property fmt : Integer read getfmt write setfmt;
procedure setcx(const val : Integer);
function getcx : Integer;
property cx : Integer read getcx write setcx;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiOrder(const val : Integer);
function getiOrder : Integer;
property iOrder : Integer read getiOrder write setiOrder;
end;
type __TLVDispInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TLVDispInfo;
public
function GetRecordPtr : pointer; override;
published
end;
type __TLVDispInfoA__Wrapper = class(TDCRecordWrapper)
private
fR : TLVDispInfoA;
public
function GetRecordPtr : pointer; override;
published
end;
type __TLVDispInfoW__Wrapper = class(TDCRecordWrapper)
private
fR : TLVDispInfoW;
public
function GetRecordPtr : pointer; override;
published
end;
type __TLVFindInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TLVFindInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setvkDirection(const val : UINT);
function getvkDirection : UINT;
property vkDirection : UINT read getvkDirection write setvkDirection;
end;
type __TLVFindInfoA__Wrapper = class(TDCRecordWrapper)
private
fR : TLVFindInfoA;
public
function GetRecordPtr : pointer; override;
published
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setvkDirection(const val : UINT);
function getvkDirection : UINT;
property vkDirection : UINT read getvkDirection write setvkDirection;
end;
type __TLVFindInfoW__Wrapper = class(TDCRecordWrapper)
private
fR : TLVFindInfoW;
public
function GetRecordPtr : pointer; override;
published
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setvkDirection(const val : UINT);
function getvkDirection : UINT;
property vkDirection : UINT read getvkDirection write setvkDirection;
end;
type __TLVHitTestInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TLVHitTestInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
end;
type __TLVItem__Wrapper = class(TDCRecordWrapper)
private
fR : TLVItem;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setstate(const val : UINT);
function getstate : UINT;
property state : UINT read getstate write setstate;
procedure setstateMask(const val : UINT);
function getstateMask : UINT;
property stateMask : UINT read getstateMask write setstateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setiIndent(const val : Integer);
function getiIndent : Integer;
property iIndent : Integer read getiIndent write setiIndent;
end;
type __TLVItemA__Wrapper = class(TDCRecordWrapper)
private
fR : TLVItemA;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setstate(const val : UINT);
function getstate : UINT;
property state : UINT read getstate write setstate;
procedure setstateMask(const val : UINT);
function getstateMask : UINT;
property stateMask : UINT read getstateMask write setstateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setiIndent(const val : Integer);
function getiIndent : Integer;
property iIndent : Integer read getiIndent write setiIndent;
end;
type __TLVItemW__Wrapper = class(TDCRecordWrapper)
private
fR : TLVItemW;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setstate(const val : UINT);
function getstate : UINT;
property state : UINT read getstate write setstate;
procedure setstateMask(const val : UINT);
function getstateMask : UINT;
property stateMask : UINT read getstateMask write setstateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setiIndent(const val : Integer);
function getiIndent : Integer;
property iIndent : Integer read getiIndent write setiIndent;
end;
type __TLVKeyDown__Wrapper = class(TDCRecordWrapper)
private
fR : TLVKeyDown;
public
function GetRecordPtr : pointer; override;
published
procedure setwVKey(const val : Word);
function getwVKey : Word;
property wVKey : Word read getwVKey write setwVKey;
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
end;
type __TMCHitTestInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TMCHitTestInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : UINT);
function getcbSize : UINT;
property cbSize : UINT read getcbSize write setcbSize;
procedure setuHit(const val : UINT);
function getuHit : UINT;
property uHit : UINT read getuHit write setuHit;
end;
type __TNMCacheHint__Wrapper = class(TDCRecordWrapper)
private
fR : TNMCacheHint;
public
function GetRecordPtr : pointer; override;
published
procedure setiFrom(const val : Integer);
function getiFrom : Integer;
property iFrom : Integer read getiFrom write setiFrom;
procedure setiTo(const val : Integer);
function getiTo : Integer;
property iTo : Integer read getiTo write setiTo;
end;
type __TNMCBEDragBegin__Wrapper = class(TDCRecordWrapper)
private
fR : TNMCBEDragBegin;
public
function GetRecordPtr : pointer; override;
published
procedure setiItemid(const val : Integer);
function getiItemid : Integer;
property iItemid : Integer read getiItemid write setiItemid;
end;
type __TNMCBEDragBeginA__Wrapper = class(TDCRecordWrapper)
private
fR : TNMCBEDragBeginA;
public
function GetRecordPtr : pointer; override;
published
procedure setiItemid(const val : Integer);
function getiItemid : Integer;
property iItemid : Integer read getiItemid write setiItemid;
end;
type __TNMCBEDragBeginW__Wrapper = class(TDCRecordWrapper)
private
fR : TNMCBEDragBeginW;
public
function GetRecordPtr : pointer; override;
published
procedure setiItemid(const val : Integer);
function getiItemid : Integer;
property iItemid : Integer read getiItemid write setiItemid;
end;
type __TNMCBEEndEdit__Wrapper = class(TDCRecordWrapper)
private
fR : TNMCBEEndEdit;
public
function GetRecordPtr : pointer; override;
published
procedure setfChanged(const val : BOOL);
function getfChanged : BOOL;
property fChanged : BOOL read getfChanged write setfChanged;
procedure setiNewSelection(const val : Integer);
function getiNewSelection : Integer;
property iNewSelection : Integer read getiNewSelection write setiNewSelection;
procedure setiWhy(const val : Integer);
function getiWhy : Integer;
property iWhy : Integer read getiWhy write setiWhy;
end;
type __TNMCBEEndEditA__Wrapper = class(TDCRecordWrapper)
private
fR : TNMCBEEndEditA;
public
function GetRecordPtr : pointer; override;
published
procedure setfChanged(const val : BOOL);
function getfChanged : BOOL;
property fChanged : BOOL read getfChanged write setfChanged;
procedure setiNewSelection(const val : Integer);
function getiNewSelection : Integer;
property iNewSelection : Integer read getiNewSelection write setiNewSelection;
procedure setiWhy(const val : Integer);
function getiWhy : Integer;
property iWhy : Integer read getiWhy write setiWhy;
end;
type __TNMCBEEndEditW__Wrapper = class(TDCRecordWrapper)
private
fR : TNMCBEEndEditW;
public
function GetRecordPtr : pointer; override;
published
procedure setfChanged(const val : BOOL);
function getfChanged : BOOL;
property fChanged : BOOL read getfChanged write setfChanged;
procedure setiNewSelection(const val : Integer);
function getiNewSelection : Integer;
property iNewSelection : Integer read getiNewSelection write setiNewSelection;
procedure setiWhy(const val : Integer);
function getiWhy : Integer;
property iWhy : Integer read getiWhy write setiWhy;
end;
type __TNMChar__Wrapper = class(TDCRecordWrapper)
private
fR : TNMChar;
public
function GetRecordPtr : pointer; override;
published
procedure setch(const val : UINT);
function getch : UINT;
property ch : UINT read getch write setch;
procedure setdwItemPrev(const val : DWORD);
function getdwItemPrev : DWORD;
property dwItemPrev : DWORD read getdwItemPrev write setdwItemPrev;
procedure setdwItemNext(const val : DWORD);
function getdwItemNext : DWORD;
property dwItemNext : DWORD read getdwItemNext write setdwItemNext;
end;
type __TNMClick__Wrapper = class(TDCRecordWrapper)
private
fR : TNMClick;
public
function GetRecordPtr : pointer; override;
published
procedure setdwItemSpec(const val : DWORD);
function getdwItemSpec : DWORD;
property dwItemSpec : DWORD read getdwItemSpec write setdwItemSpec;
procedure setdwItemData(const val : DWORD);
function getdwItemData : DWORD;
property dwItemData : DWORD read getdwItemData write setdwItemData;
procedure setdwHitInfo(const val : DWORD);
function getdwHitInfo : DWORD;
property dwHitInfo : DWORD read getdwHitInfo write setdwHitInfo;
end;
type __TNMComboBoxEx__Wrapper = class(TDCRecordWrapper)
private
fR : TNMComboBoxEx;
public
function GetRecordPtr : pointer; override;
published
end;
type __TNMComboBoxExA__Wrapper = class(TDCRecordWrapper)
private
fR : TNMComboBoxExA;
public
function GetRecordPtr : pointer; override;
published
end;
type __TNMComboBoxExW__Wrapper = class(TDCRecordWrapper)
private
fR : TNMComboBoxExW;
public
function GetRecordPtr : pointer; override;
published
end;
type __TNMCustomDraw__Wrapper = class(TDCRecordWrapper)
private
fR : TNMCustomDraw;
public
function GetRecordPtr : pointer; override;
published
procedure setdwDrawStage(const val : DWORD);
function getdwDrawStage : DWORD;
property dwDrawStage : DWORD read getdwDrawStage write setdwDrawStage;
procedure setdwItemSpec(const val : DWORD);
function getdwItemSpec : DWORD;
property dwItemSpec : DWORD read getdwItemSpec write setdwItemSpec;
procedure setuItemState(const val : UINT);
function getuItemState : UINT;
property uItemState : UINT read getuItemState write setuItemState;
procedure setlItemlParam(const val : lParam);
function getlItemlParam : lParam;
property lItemlParam : lParam read getlItemlParam write setlItemlParam;
end;
type __TNMDateTimeChange__Wrapper = class(TDCRecordWrapper)
private
fR : TNMDateTimeChange;
public
function GetRecordPtr : pointer; override;
published
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type __TNMDateTimeFormat__Wrapper = class(TDCRecordWrapper)
private
fR : TNMDateTimeFormat;
public
function GetRecordPtr : pointer; override;
published
end;
type __TNMDateTimeFormatA__Wrapper = class(TDCRecordWrapper)
private
fR : TNMDateTimeFormatA;
public
function GetRecordPtr : pointer; override;
published
end;
type __TNMDateTimeFormatQuery__Wrapper = class(TDCRecordWrapper)
private
fR : TNMDateTimeFormatQuery;
public
function GetRecordPtr : pointer; override;
published
end;
type __TNMDateTimeFormatQueryA__Wrapper = class(TDCRecordWrapper)
private
fR : TNMDateTimeFormatQueryA;
public
function GetRecordPtr : pointer; override;
published
end;
type __TNMDateTimeFormatQueryW__Wrapper = class(TDCRecordWrapper)
private
fR : TNMDateTimeFormatQueryW;
public
function GetRecordPtr : pointer; override;
published
end;
type __TNMDateTimeFormatW__Wrapper = class(TDCRecordWrapper)
private
fR : TNMDateTimeFormatW;
public
function GetRecordPtr : pointer; override;
published
end;
type __TNMDateTimeString__Wrapper = class(TDCRecordWrapper)
private
fR : TNMDateTimeString;
public
function GetRecordPtr : pointer; override;
published
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type __TNMDateTimeStringA__Wrapper = class(TDCRecordWrapper)
private
fR : TNMDateTimeStringA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type __TNMDateTimeStringW__Wrapper = class(TDCRecordWrapper)
private
fR : TNMDateTimeStringW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type __TNMDateTimeWMKeyDown__Wrapper = class(TDCRecordWrapper)
private
fR : TNMDateTimeWMKeyDown;
public
function GetRecordPtr : pointer; override;
published
procedure setnVirtKey(const val : Integer);
function getnVirtKey : Integer;
property nVirtKey : Integer read getnVirtKey write setnVirtKey;
end;
type __TNMDateTimeWMKeyDownA__Wrapper = class(TDCRecordWrapper)
private
fR : TNMDateTimeWMKeyDownA;
public
function GetRecordPtr : pointer; override;
published
procedure setnVirtKey(const val : Integer);
function getnVirtKey : Integer;
property nVirtKey : Integer read getnVirtKey write setnVirtKey;
end;
type __TNMDateTimeWMKeyDownW__Wrapper = class(TDCRecordWrapper)
private
fR : TNMDateTimeWMKeyDownW;
public
function GetRecordPtr : pointer; override;
published
procedure setnVirtKey(const val : Integer);
function getnVirtKey : Integer;
property nVirtKey : Integer read getnVirtKey write setnVirtKey;
end;
type __TNMDayState__Wrapper = class(TDCRecordWrapper)
private
fR : TNMDayState;
public
function GetRecordPtr : pointer; override;
published
procedure setcDayState(const val : Integer);
function getcDayState : Integer;
property cDayState : Integer read getcDayState write setcDayState;
end;
type __TNMFinditem__Wrapper = class(TDCRecordWrapper)
private
fR : TNMFinditem;
public
function GetRecordPtr : pointer; override;
published
procedure setiStart(const val : Integer);
function getiStart : Integer;
property iStart : Integer read getiStart write setiStart;
end;
type __TNMFinditemA__Wrapper = class(TDCRecordWrapper)
private
fR : TNMFinditemA;
public
function GetRecordPtr : pointer; override;
published
procedure setiStart(const val : Integer);
function getiStart : Integer;
property iStart : Integer read getiStart write setiStart;
end;
type __TNMFinditemW__Wrapper = class(TDCRecordWrapper)
private
fR : TNMFinditemW;
public
function GetRecordPtr : pointer; override;
published
procedure setiStart(const val : Integer);
function getiStart : Integer;
property iStart : Integer read getiStart write setiStart;
end;
type __TNMHDispInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TNMHDispInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TNMHDispInfoA__Wrapper = class(TDCRecordWrapper)
private
fR : TNMHDispInfoA;
public
function GetRecordPtr : pointer; override;
published
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TNMHDispInfoW__Wrapper = class(TDCRecordWrapper)
private
fR : TNMHDispInfoW;
public
function GetRecordPtr : pointer; override;
published
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TNMIPAddress__Wrapper = class(TDCRecordWrapper)
private
fR : TNMIPAddress;
public
function GetRecordPtr : pointer; override;
published
procedure setiField(const val : Integer);
function getiField : Integer;
property iField : Integer read getiField write setiField;
procedure setiValue(const val : Integer);
function getiValue : Integer;
property iValue : Integer read getiValue write setiValue;
end;
type __TNMItemActivate__Wrapper = class(TDCRecordWrapper)
private
fR : TNMItemActivate;
public
function GetRecordPtr : pointer; override;
published
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setuNewState(const val : UINT);
function getuNewState : UINT;
property uNewState : UINT read getuNewState write setuNewState;
procedure setuOldState(const val : UINT);
function getuOldState : UINT;
property uOldState : UINT read getuOldState write setuOldState;
procedure setuChanged(const val : UINT);
function getuChanged : UINT;
property uChanged : UINT read getuChanged write setuChanged;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setuKeyFlags(const val : UINT);
function getuKeyFlags : UINT;
property uKeyFlags : UINT read getuKeyFlags write setuKeyFlags;
end;
type __TNMKey__Wrapper = class(TDCRecordWrapper)
private
fR : TNMKey;
public
function GetRecordPtr : pointer; override;
published
procedure setnVKey(const val : UINT);
function getnVKey : UINT;
property nVKey : UINT read getnVKey write setnVKey;
procedure setuFlags(const val : UINT);
function getuFlags : UINT;
property uFlags : UINT read getuFlags write setuFlags;
end;
type __TNMListView__Wrapper = class(TDCRecordWrapper)
private
fR : TNMListView;
public
function GetRecordPtr : pointer; override;
published
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setuNewState(const val : UINT);
function getuNewState : UINT;
property uNewState : UINT read getuNewState write setuNewState;
procedure setuOldState(const val : UINT);
function getuOldState : UINT;
property uOldState : UINT read getuOldState write setuOldState;
procedure setuChanged(const val : UINT);
function getuChanged : UINT;
property uChanged : UINT read getuChanged write setuChanged;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TNMLVCacheHint__Wrapper = class(TDCRecordWrapper)
private
fR : TNMLVCacheHint;
public
function GetRecordPtr : pointer; override;
published
procedure setiFrom(const val : Integer);
function getiFrom : Integer;
property iFrom : Integer read getiFrom write setiFrom;
procedure setiTo(const val : Integer);
function getiTo : Integer;
property iTo : Integer read getiTo write setiTo;
end;
type __TNMLVCustomDraw__Wrapper = class(TDCRecordWrapper)
private
fR : TNMLVCustomDraw;
public
function GetRecordPtr : pointer; override;
published
procedure setclrText(const val : COLORREF);
function getclrText : COLORREF;
property clrText : COLORREF read getclrText write setclrText;
procedure setclrTextBk(const val : COLORREF);
function getclrTextBk : COLORREF;
property clrTextBk : COLORREF read getclrTextBk write setclrTextBk;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
end;
type __TNMLVFinditem__Wrapper = class(TDCRecordWrapper)
private
fR : TNMLVFinditem;
public
function GetRecordPtr : pointer; override;
published
procedure setiStart(const val : Integer);
function getiStart : Integer;
property iStart : Integer read getiStart write setiStart;
end;
type __TNMLVFinditemA__Wrapper = class(TDCRecordWrapper)
private
fR : TNMLVFinditemA;
public
function GetRecordPtr : pointer; override;
published
procedure setiStart(const val : Integer);
function getiStart : Integer;
property iStart : Integer read getiStart write setiStart;
end;
type __TNMLVFinditemW__Wrapper = class(TDCRecordWrapper)
private
fR : TNMLVFinditemW;
public
function GetRecordPtr : pointer; override;
published
procedure setiStart(const val : Integer);
function getiStart : Integer;
property iStart : Integer read getiStart write setiStart;
end;
type __TNMLVGetInfoTip__Wrapper = class(TDCRecordWrapper)
private
fR : TNMLVGetInfoTip;
public
function GetRecordPtr : pointer; override;
published
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TNMLVGetInfoTipA__Wrapper = class(TDCRecordWrapper)
private
fR : TNMLVGetInfoTipA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TNMLVGetInfoTipW__Wrapper = class(TDCRecordWrapper)
private
fR : TNMLVGetInfoTipW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setiSubItem(const val : Integer);
function getiSubItem : Integer;
property iSubItem : Integer read getiSubItem write setiSubItem;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TNMLVODStateChange__Wrapper = class(TDCRecordWrapper)
private
fR : TNMLVODStateChange;
public
function GetRecordPtr : pointer; override;
published
procedure setiFrom(const val : Integer);
function getiFrom : Integer;
property iFrom : Integer read getiFrom write setiFrom;
procedure setiTo(const val : Integer);
function getiTo : Integer;
property iTo : Integer read getiTo write setiTo;
procedure setuNewState(const val : UINT);
function getuNewState : UINT;
property uNewState : UINT read getuNewState write setuNewState;
procedure setuOldState(const val : UINT);
function getuOldState : UINT;
property uOldState : UINT read getuOldState write setuOldState;
end;
type __TNMMouse__Wrapper = class(TDCRecordWrapper)
private
fR : TNMMouse;
public
function GetRecordPtr : pointer; override;
published
procedure setdwItemSpec(const val : DWORD);
function getdwItemSpec : DWORD;
property dwItemSpec : DWORD read getdwItemSpec write setdwItemSpec;
procedure setdwItemData(const val : DWORD);
function getdwItemData : DWORD;
property dwItemData : DWORD read getdwItemData write setdwItemData;
procedure setdwHitInfo(const val : DWORD);
function getdwHitInfo : DWORD;
property dwHitInfo : DWORD read getdwHitInfo write setdwHitInfo;
end;
type __TNMObjectNotify__Wrapper = class(TDCRecordWrapper)
private
fR : TNMObjectNotify;
public
function GetRecordPtr : pointer; override;
published
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type __TNMPGCalcSize__Wrapper = class(TDCRecordWrapper)
private
fR : TNMPGCalcSize;
public
function GetRecordPtr : pointer; override;
published
procedure setdwFlag(const val : DWORD);
function getdwFlag : DWORD;
property dwFlag : DWORD read getdwFlag write setdwFlag;
procedure setiWidth(const val : Integer);
function getiWidth : Integer;
property iWidth : Integer read getiWidth write setiWidth;
procedure setiHeight(const val : Integer);
function getiHeight : Integer;
property iHeight : Integer read getiHeight write setiHeight;
end;
type __TNMPGScroll__Wrapper = class(TDCRecordWrapper)
private
fR : TNMPGScroll;
public
function GetRecordPtr : pointer; override;
published
procedure setfwKeys(const val : Word);
function getfwKeys : Word;
property fwKeys : Word read getfwKeys write setfwKeys;
procedure setiDir(const val : Integer);
function getiDir : Integer;
property iDir : Integer read getiDir write setiDir;
procedure setiXpos(const val : Integer);
function getiXpos : Integer;
property iXpos : Integer read getiXpos write setiXpos;
procedure setiYpos(const val : Integer);
function getiYpos : Integer;
property iYpos : Integer read getiYpos write setiYpos;
procedure setiScroll(const val : Integer);
function getiScroll : Integer;
property iScroll : Integer read getiScroll write setiScroll;
end;
type __TNMRBAutoSize__Wrapper = class(TDCRecordWrapper)
private
fR : TNMRBAutoSize;
public
function GetRecordPtr : pointer; override;
published
procedure setfChanged(const val : BOOL);
function getfChanged : BOOL;
property fChanged : BOOL read getfChanged write setfChanged;
end;
type __TNMReBar__Wrapper = class(TDCRecordWrapper)
private
fR : TNMReBar;
public
function GetRecordPtr : pointer; override;
published
procedure setdwMask(const val : DWORD);
function getdwMask : DWORD;
property dwMask : DWORD read getdwMask write setdwMask;
procedure setuBand(const val : UINT);
function getuBand : UINT;
property uBand : UINT read getuBand write setuBand;
procedure setfStyle(const val : UINT);
function getfStyle : UINT;
property fStyle : UINT read getfStyle write setfStyle;
procedure setwID(const val : UINT);
function getwID : UINT;
property wID : UINT read getwID write setwID;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TNMReBarChildSize__Wrapper = class(TDCRecordWrapper)
private
fR : TNMReBarChildSize;
public
function GetRecordPtr : pointer; override;
published
procedure setuBand(const val : UINT);
function getuBand : UINT;
property uBand : UINT read getuBand write setuBand;
procedure setwID(const val : UINT);
function getwID : UINT;
property wID : UINT read getwID write setwID;
end;
type __TNMSelChange__Wrapper = class(TDCRecordWrapper)
private
fR : TNMSelChange;
public
function GetRecordPtr : pointer; override;
published
end;
type __TNMSelect__Wrapper = class(TDCRecordWrapper)
private
fR : TNMSelect;
public
function GetRecordPtr : pointer; override;
published
end;
type __TNMTBCustomDraw__Wrapper = class(TDCRecordWrapper)
private
fR : TNMTBCustomDraw;
public
function GetRecordPtr : pointer; override;
published
procedure setclrText(const val : COLORREF);
function getclrText : COLORREF;
property clrText : COLORREF read getclrText write setclrText;
procedure setclrMark(const val : COLORREF);
function getclrMark : COLORREF;
property clrMark : COLORREF read getclrMark write setclrMark;
procedure setclrTextHighlight(const val : COLORREF);
function getclrTextHighlight : COLORREF;
property clrTextHighlight : COLORREF read getclrTextHighlight write setclrTextHighlight;
procedure setclrBtnFace(const val : COLORREF);
function getclrBtnFace : COLORREF;
property clrBtnFace : COLORREF read getclrBtnFace write setclrBtnFace;
procedure setclrBtnHighlight(const val : COLORREF);
function getclrBtnHighlight : COLORREF;
property clrBtnHighlight : COLORREF read getclrBtnHighlight write setclrBtnHighlight;
procedure setclrHighlightHotTrack(const val : COLORREF);
function getclrHighlightHotTrack : COLORREF;
property clrHighlightHotTrack : COLORREF read getclrHighlightHotTrack write setclrHighlightHotTrack;
procedure setnStringBkMode(const val : Integer);
function getnStringBkMode : Integer;
property nStringBkMode : Integer read getnStringBkMode write setnStringBkMode;
procedure setnHLStringBkMode(const val : Integer);
function getnHLStringBkMode : Integer;
property nHLStringBkMode : Integer read getnHLStringBkMode write setnHLStringBkMode;
end;
type __TNMTBDispInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TNMTBDispInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setdwMask(const val : DWORD);
function getdwMask : DWORD;
property dwMask : DWORD read getdwMask write setdwMask;
procedure setidCommand(const val : Integer);
function getidCommand : Integer;
property idCommand : Integer read getidCommand write setidCommand;
procedure setlParam(const val : DWORD);
function getlParam : DWORD;
property lParam : DWORD read getlParam write setlParam;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setcchText(const val : Integer);
function getcchText : Integer;
property cchText : Integer read getcchText write setcchText;
end;
type __TNMTBDispInfoA__Wrapper = class(TDCRecordWrapper)
private
fR : TNMTBDispInfoA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwMask(const val : DWORD);
function getdwMask : DWORD;
property dwMask : DWORD read getdwMask write setdwMask;
procedure setidCommand(const val : Integer);
function getidCommand : Integer;
property idCommand : Integer read getidCommand write setidCommand;
procedure setlParam(const val : DWORD);
function getlParam : DWORD;
property lParam : DWORD read getlParam write setlParam;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setcchText(const val : Integer);
function getcchText : Integer;
property cchText : Integer read getcchText write setcchText;
end;
type __TNMTBDispInfoW__Wrapper = class(TDCRecordWrapper)
private
fR : TNMTBDispInfoW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwMask(const val : DWORD);
function getdwMask : DWORD;
property dwMask : DWORD read getdwMask write setdwMask;
procedure setidCommand(const val : Integer);
function getidCommand : Integer;
property idCommand : Integer read getidCommand write setidCommand;
procedure setlParam(const val : DWORD);
function getlParam : DWORD;
property lParam : DWORD read getlParam write setlParam;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setcchText(const val : Integer);
function getcchText : Integer;
property cchText : Integer read getcchText write setcchText;
end;
type __TNMTBGetInfoTip__Wrapper = class(TDCRecordWrapper)
private
fR : TNMTBGetInfoTip;
public
function GetRecordPtr : pointer; override;
published
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TNMTBGetInfoTipA__Wrapper = class(TDCRecordWrapper)
private
fR : TNMTBGetInfoTipA;
public
function GetRecordPtr : pointer; override;
published
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TNMTBGetInfoTipW__Wrapper = class(TDCRecordWrapper)
private
fR : TNMTBGetInfoTipW;
public
function GetRecordPtr : pointer; override;
published
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TNMTBHotItem__Wrapper = class(TDCRecordWrapper)
private
fR : TNMTBHotItem;
public
function GetRecordPtr : pointer; override;
published
procedure setidOld(const val : Integer);
function getidOld : Integer;
property idOld : Integer read getidOld write setidOld;
procedure setidNew(const val : Integer);
function getidNew : Integer;
property idNew : Integer read getidNew write setidNew;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type __TNMToolBar__Wrapper = class(TDCRecordWrapper)
private
fR : TNMToolBar;
public
function GetRecordPtr : pointer; override;
published
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setcchText(const val : Integer);
function getcchText : Integer;
property cchText : Integer read getcchText write setcchText;
end;
type __TNMToolBarA__Wrapper = class(TDCRecordWrapper)
private
fR : TNMToolBarA;
public
function GetRecordPtr : pointer; override;
published
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setcchText(const val : Integer);
function getcchText : Integer;
property cchText : Integer read getcchText write setcchText;
end;
type __TNMToolBarW__Wrapper = class(TDCRecordWrapper)
private
fR : TNMToolBarW;
public
function GetRecordPtr : pointer; override;
published
procedure setiItem(const val : Integer);
function getiItem : Integer;
property iItem : Integer read getiItem write setiItem;
procedure setcchText(const val : Integer);
function getcchText : Integer;
property cchText : Integer read getcchText write setcchText;
end;
type __TNMTreeView__Wrapper = class(TDCRecordWrapper)
private
fR : TNMTreeView;
public
function GetRecordPtr : pointer; override;
published
procedure setaction(const val : UINT);
function getaction : UINT;
property action : UINT read getaction write setaction;
end;
type __TNMTreeViewA__Wrapper = class(TDCRecordWrapper)
private
fR : TNMTreeViewA;
public
function GetRecordPtr : pointer; override;
published
procedure setaction(const val : UINT);
function getaction : UINT;
property action : UINT read getaction write setaction;
end;
type __TNMTreeViewW__Wrapper = class(TDCRecordWrapper)
private
fR : TNMTreeViewW;
public
function GetRecordPtr : pointer; override;
published
procedure setaction(const val : UINT);
function getaction : UINT;
property action : UINT read getaction write setaction;
end;
type __TNMTTCustomDraw__Wrapper = class(TDCRecordWrapper)
private
fR : TNMTTCustomDraw;
public
function GetRecordPtr : pointer; override;
published
procedure setuDrawFlags(const val : UINT);
function getuDrawFlags : UINT;
property uDrawFlags : UINT read getuDrawFlags write setuDrawFlags;
end;
type __TNMTTDispInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TNMTTDispInfo;
public
function GetRecordPtr : pointer; override;
published
procedure sethInst(const val : hInst);
function gethInst : hInst;
property hInst : hInst read gethInst write sethInst;
procedure setuFlags(const val : UINT);
function getuFlags : UINT;
property uFlags : UINT read getuFlags write setuFlags;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TNMTTDispInfoA__Wrapper = class(TDCRecordWrapper)
private
fR : TNMTTDispInfoA;
public
function GetRecordPtr : pointer; override;
published
procedure sethInst(const val : hInst);
function gethInst : hInst;
property hInst : hInst read gethInst write sethInst;
procedure setuFlags(const val : UINT);
function getuFlags : UINT;
property uFlags : UINT read getuFlags write setuFlags;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TNMTTDispInfoW__Wrapper = class(TDCRecordWrapper)
private
fR : TNMTTDispInfoW;
public
function GetRecordPtr : pointer; override;
published
procedure sethInst(const val : hInst);
function gethInst : hInst;
property hInst : hInst read gethInst write sethInst;
procedure setuFlags(const val : UINT);
function getuFlags : UINT;
property uFlags : UINT read getuFlags write setuFlags;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TNMTVCustomDraw__Wrapper = class(TDCRecordWrapper)
private
fR : TNMTVCustomDraw;
public
function GetRecordPtr : pointer; override;
published
procedure setclrText(const val : COLORREF);
function getclrText : COLORREF;
property clrText : COLORREF read getclrText write setclrText;
procedure setclrTextBk(const val : COLORREF);
function getclrTextBk : COLORREF;
property clrTextBk : COLORREF read getclrTextBk write setclrTextBk;
procedure setiLevel(const val : Integer);
function getiLevel : Integer;
property iLevel : Integer read getiLevel write setiLevel;
end;
type __TNMTVGetInfoTip__Wrapper = class(TDCRecordWrapper)
private
fR : TNMTVGetInfoTip;
public
function GetRecordPtr : pointer; override;
published
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TNMTVGetInfoTipA__Wrapper = class(TDCRecordWrapper)
private
fR : TNMTVGetInfoTipA;
public
function GetRecordPtr : pointer; override;
published
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TNMTVGetInfoTipW__Wrapper = class(TDCRecordWrapper)
private
fR : TNMTVGetInfoTipW;
public
function GetRecordPtr : pointer; override;
published
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TNMUpDown__Wrapper = class(TDCRecordWrapper)
private
fR : TNMUpDown;
public
function GetRecordPtr : pointer; override;
published
procedure setiPos(const val : Integer);
function getiPos : Integer;
property iPos : Integer read getiPos write setiPos;
procedure setiDelta(const val : Integer);
function getiDelta : Integer;
property iDelta : Integer read getiDelta write setiDelta;
end;
type __TOOLINFO__Wrapper = class(TDCRecordWrapper)
private
fR : TOOLINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : UINT);
function getcbSize : UINT;
property cbSize : UINT read getcbSize write setcbSize;
procedure setuFlags(const val : UINT);
function getuFlags : UINT;
property uFlags : UINT read getuFlags write setuFlags;
procedure setuId(const val : UINT);
function getuId : UINT;
property uId : UINT read getuId write setuId;
procedure sethInst(const val : THandle);
function gethInst : THandle;
property hInst : THandle read gethInst write sethInst;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TOOLINFOA__Wrapper = class(TDCRecordWrapper)
private
fR : TOOLINFOA;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : UINT);
function getcbSize : UINT;
property cbSize : UINT read getcbSize write setcbSize;
procedure setuFlags(const val : UINT);
function getuFlags : UINT;
property uFlags : UINT read getuFlags write setuFlags;
procedure setuId(const val : UINT);
function getuId : UINT;
property uId : UINT read getuId write setuId;
procedure sethInst(const val : THandle);
function gethInst : THandle;
property hInst : THandle read gethInst write sethInst;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TOOLINFOW__Wrapper = class(TDCRecordWrapper)
private
fR : TOOLINFOW;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : UINT);
function getcbSize : UINT;
property cbSize : UINT read getcbSize write setcbSize;
procedure setuFlags(const val : UINT);
function getuFlags : UINT;
property uFlags : UINT read getuFlags write setuFlags;
procedure setuId(const val : UINT);
function getuId : UINT;
property uId : UINT read getuId write setuId;
procedure sethInst(const val : THandle);
function gethInst : THandle;
property hInst : THandle read gethInst write sethInst;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TOOLTIPTEXT__Wrapper = class(TDCRecordWrapper)
private
fR : TOOLTIPTEXT;
public
function GetRecordPtr : pointer; override;
published
procedure sethInst(const val : hInst);
function gethInst : hInst;
property hInst : hInst read gethInst write sethInst;
procedure setuFlags(const val : UINT);
function getuFlags : UINT;
property uFlags : UINT read getuFlags write setuFlags;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TOOLTIPTEXTA__Wrapper = class(TDCRecordWrapper)
private
fR : TOOLTIPTEXTA;
public
function GetRecordPtr : pointer; override;
published
procedure sethInst(const val : hInst);
function gethInst : hInst;
property hInst : hInst read gethInst write sethInst;
procedure setuFlags(const val : UINT);
function getuFlags : UINT;
property uFlags : UINT read getuFlags write setuFlags;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TOOLTIPTEXTW__Wrapper = class(TDCRecordWrapper)
private
fR : TOOLTIPTEXTW;
public
function GetRecordPtr : pointer; override;
published
procedure sethInst(const val : hInst);
function gethInst : hInst;
property hInst : hInst read gethInst write sethInst;
procedure setuFlags(const val : UINT);
function getuFlags : UINT;
property uFlags : UINT read getuFlags write setuFlags;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TPBRange__Wrapper = class(TDCRecordWrapper)
private
fR : TPBRange;
public
function GetRecordPtr : pointer; override;
published
procedure setiLow(const val : Integer);
function getiLow : Integer;
property iLow : Integer read getiLow write setiLow;
procedure setiHigh(const val : Integer);
function getiHigh : Integer;
property iHigh : Integer read getiHigh write setiHigh;
end;
type __TPropSheetHeader__Wrapper = class(TDCRecordWrapper)
private
fR : TPropSheetHeader;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : Longint);
function getdwSize : Longint;
property dwSize : Longint read getdwSize write setdwSize;
procedure setdwFlags(const val : Longint);
function getdwFlags : Longint;
property dwFlags : Longint read getdwFlags write setdwFlags;
procedure sethInstance(const val : THandle);
function gethInstance : THandle;
property hInstance : THandle read gethInstance write sethInstance;
procedure sethIcon(const val : THandle);
function gethIcon : THandle;
property hIcon : THandle read gethIcon write sethIcon;
procedure setnPages(const val : Integer);
function getnPages : Integer;
property nPages : Integer read getnPages write setnPages;
procedure setnStartPage(const val : Integer);
function getnStartPage : Integer;
property nStartPage : Integer read getnStartPage write setnStartPage;
end;
type __TPropSheetHeaderA__Wrapper = class(TDCRecordWrapper)
private
fR : TPropSheetHeaderA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : Longint);
function getdwSize : Longint;
property dwSize : Longint read getdwSize write setdwSize;
procedure setdwFlags(const val : Longint);
function getdwFlags : Longint;
property dwFlags : Longint read getdwFlags write setdwFlags;
procedure sethInstance(const val : THandle);
function gethInstance : THandle;
property hInstance : THandle read gethInstance write sethInstance;
procedure sethIcon(const val : THandle);
function gethIcon : THandle;
property hIcon : THandle read gethIcon write sethIcon;
procedure setnPages(const val : Integer);
function getnPages : Integer;
property nPages : Integer read getnPages write setnPages;
procedure setnStartPage(const val : Integer);
function getnStartPage : Integer;
property nStartPage : Integer read getnStartPage write setnStartPage;
end;
type __TPropSheetHeaderW__Wrapper = class(TDCRecordWrapper)
private
fR : TPropSheetHeaderW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : Longint);
function getdwSize : Longint;
property dwSize : Longint read getdwSize write setdwSize;
procedure setdwFlags(const val : Longint);
function getdwFlags : Longint;
property dwFlags : Longint read getdwFlags write setdwFlags;
procedure sethInstance(const val : THandle);
function gethInstance : THandle;
property hInstance : THandle read gethInstance write sethInstance;
procedure sethIcon(const val : THandle);
function gethIcon : THandle;
property hIcon : THandle read gethIcon write sethIcon;
procedure setnPages(const val : Integer);
function getnPages : Integer;
property nPages : Integer read getnPages write setnPages;
procedure setnStartPage(const val : Integer);
function getnStartPage : Integer;
property nStartPage : Integer read getnStartPage write setnStartPage;
end;
type __TPropSheetPage__Wrapper = class(TDCRecordWrapper)
private
fR : TPropSheetPage;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : Longint);
function getdwSize : Longint;
property dwSize : Longint read getdwSize write setdwSize;
procedure setdwFlags(const val : Longint);
function getdwFlags : Longint;
property dwFlags : Longint read getdwFlags write setdwFlags;
procedure sethInstance(const val : THandle);
function gethInstance : THandle;
property hInstance : THandle read gethInstance write sethInstance;
procedure sethIcon(const val : THandle);
function gethIcon : THandle;
property hIcon : THandle read gethIcon write sethIcon;
procedure setlParam(const val : Longint);
function getlParam : Longint;
property lParam : Longint read getlParam write setlParam;
end;
type __TPropSheetPageA__Wrapper = class(TDCRecordWrapper)
private
fR : TPropSheetPageA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : Longint);
function getdwSize : Longint;
property dwSize : Longint read getdwSize write setdwSize;
procedure setdwFlags(const val : Longint);
function getdwFlags : Longint;
property dwFlags : Longint read getdwFlags write setdwFlags;
procedure sethInstance(const val : THandle);
function gethInstance : THandle;
property hInstance : THandle read gethInstance write sethInstance;
procedure sethIcon(const val : THandle);
function gethIcon : THandle;
property hIcon : THandle read gethIcon write sethIcon;
procedure setlParam(const val : Longint);
function getlParam : Longint;
property lParam : Longint read getlParam write setlParam;
end;
type __TPropSheetPageW__Wrapper = class(TDCRecordWrapper)
private
fR : TPropSheetPageW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : Longint);
function getdwSize : Longint;
property dwSize : Longint read getdwSize write setdwSize;
procedure setdwFlags(const val : Longint);
function getdwFlags : Longint;
property dwFlags : Longint read getdwFlags write setdwFlags;
procedure sethInstance(const val : THandle);
function gethInstance : THandle;
property hInstance : THandle read gethInstance write sethInstance;
procedure sethIcon(const val : THandle);
function gethIcon : THandle;
property hIcon : THandle read gethIcon write sethIcon;
procedure setlParam(const val : Longint);
function getlParam : Longint;
property lParam : Longint read getlParam write setlParam;
end;
type __TRBHitTestInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TRBHitTestInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
procedure setiBand(const val : Integer);
function getiBand : Integer;
property iBand : Integer read getiBand write setiBand;
end;
type __TReBarBandInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TReBarBandInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : UINT);
function getcbSize : UINT;
property cbSize : UINT read getcbSize write setcbSize;
procedure setfMask(const val : UINT);
function getfMask : UINT;
property fMask : UINT read getfMask write setfMask;
procedure setfStyle(const val : UINT);
function getfStyle : UINT;
property fStyle : UINT read getfStyle write setfStyle;
procedure setclrFore(const val : TColorRef);
function getclrFore : TColorRef;
property clrFore : TColorRef read getclrFore write setclrFore;
procedure setclrBack(const val : TColorRef);
function getclrBack : TColorRef;
property clrBack : TColorRef read getclrBack write setclrBack;
procedure setcch(const val : UINT);
function getcch : UINT;
property cch : UINT read getcch write setcch;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setcxMinChild(const val : UINT);
function getcxMinChild : UINT;
property cxMinChild : UINT read getcxMinChild write setcxMinChild;
procedure setcyMinChild(const val : UINT);
function getcyMinChild : UINT;
property cyMinChild : UINT read getcyMinChild write setcyMinChild;
procedure setcx(const val : UINT);
function getcx : UINT;
property cx : UINT read getcx write setcx;
procedure setwID(const val : UINT);
function getwID : UINT;
property wID : UINT read getwID write setwID;
procedure setcyChild(const val : UINT);
function getcyChild : UINT;
property cyChild : UINT read getcyChild write setcyChild;
procedure setcyMaxChild(const val : UINT);
function getcyMaxChild : UINT;
property cyMaxChild : UINT read getcyMaxChild write setcyMaxChild;
procedure setcyIntegral(const val : UINT);
function getcyIntegral : UINT;
property cyIntegral : UINT read getcyIntegral write setcyIntegral;
procedure setcxIdeal(const val : UINT);
function getcxIdeal : UINT;
property cxIdeal : UINT read getcxIdeal write setcxIdeal;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setcxHeader(const val : UINT);
function getcxHeader : UINT;
property cxHeader : UINT read getcxHeader write setcxHeader;
end;
type __TReBarBandInfoA__Wrapper = class(TDCRecordWrapper)
private
fR : TReBarBandInfoA;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : UINT);
function getcbSize : UINT;
property cbSize : UINT read getcbSize write setcbSize;
procedure setfMask(const val : UINT);
function getfMask : UINT;
property fMask : UINT read getfMask write setfMask;
procedure setfStyle(const val : UINT);
function getfStyle : UINT;
property fStyle : UINT read getfStyle write setfStyle;
procedure setclrFore(const val : TColorRef);
function getclrFore : TColorRef;
property clrFore : TColorRef read getclrFore write setclrFore;
procedure setclrBack(const val : TColorRef);
function getclrBack : TColorRef;
property clrBack : TColorRef read getclrBack write setclrBack;
procedure setcch(const val : UINT);
function getcch : UINT;
property cch : UINT read getcch write setcch;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setcxMinChild(const val : UINT);
function getcxMinChild : UINT;
property cxMinChild : UINT read getcxMinChild write setcxMinChild;
procedure setcyMinChild(const val : UINT);
function getcyMinChild : UINT;
property cyMinChild : UINT read getcyMinChild write setcyMinChild;
procedure setcx(const val : UINT);
function getcx : UINT;
property cx : UINT read getcx write setcx;
procedure setwID(const val : UINT);
function getwID : UINT;
property wID : UINT read getwID write setwID;
procedure setcyChild(const val : UINT);
function getcyChild : UINT;
property cyChild : UINT read getcyChild write setcyChild;
procedure setcyMaxChild(const val : UINT);
function getcyMaxChild : UINT;
property cyMaxChild : UINT read getcyMaxChild write setcyMaxChild;
procedure setcyIntegral(const val : UINT);
function getcyIntegral : UINT;
property cyIntegral : UINT read getcyIntegral write setcyIntegral;
procedure setcxIdeal(const val : UINT);
function getcxIdeal : UINT;
property cxIdeal : UINT read getcxIdeal write setcxIdeal;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setcxHeader(const val : UINT);
function getcxHeader : UINT;
property cxHeader : UINT read getcxHeader write setcxHeader;
end;
type __TReBarBandInfoW__Wrapper = class(TDCRecordWrapper)
private
fR : TReBarBandInfoW;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : UINT);
function getcbSize : UINT;
property cbSize : UINT read getcbSize write setcbSize;
procedure setfMask(const val : UINT);
function getfMask : UINT;
property fMask : UINT read getfMask write setfMask;
procedure setfStyle(const val : UINT);
function getfStyle : UINT;
property fStyle : UINT read getfStyle write setfStyle;
procedure setclrFore(const val : TColorRef);
function getclrFore : TColorRef;
property clrFore : TColorRef read getclrFore write setclrFore;
procedure setclrBack(const val : TColorRef);
function getclrBack : TColorRef;
property clrBack : TColorRef read getclrBack write setclrBack;
procedure setcch(const val : UINT);
function getcch : UINT;
property cch : UINT read getcch write setcch;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setcxMinChild(const val : UINT);
function getcxMinChild : UINT;
property cxMinChild : UINT read getcxMinChild write setcxMinChild;
procedure setcyMinChild(const val : UINT);
function getcyMinChild : UINT;
property cyMinChild : UINT read getcyMinChild write setcyMinChild;
procedure setcx(const val : UINT);
function getcx : UINT;
property cx : UINT read getcx write setcx;
procedure setwID(const val : UINT);
function getwID : UINT;
property wID : UINT read getwID write setwID;
procedure setcyChild(const val : UINT);
function getcyChild : UINT;
property cyChild : UINT read getcyChild write setcyChild;
procedure setcyMaxChild(const val : UINT);
function getcyMaxChild : UINT;
property cyMaxChild : UINT read getcyMaxChild write setcyMaxChild;
procedure setcyIntegral(const val : UINT);
function getcyIntegral : UINT;
property cyIntegral : UINT read getcyIntegral write setcyIntegral;
procedure setcxIdeal(const val : UINT);
function getcxIdeal : UINT;
property cxIdeal : UINT read getcxIdeal write setcxIdeal;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setcxHeader(const val : UINT);
function getcxHeader : UINT;
property cxHeader : UINT read getcxHeader write setcxHeader;
end;
type __TReBarInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TReBarInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : UINT);
function getcbSize : UINT;
property cbSize : UINT read getcbSize write setcbSize;
procedure setfMask(const val : UINT);
function getfMask : UINT;
property fMask : UINT read getfMask write setfMask;
procedure sethiml(const val : HIMAGELIST);
function gethiml : HIMAGELIST;
property himl : HIMAGELIST read gethiml write sethiml;
end;
type __TTBAddBitmap__Wrapper = class(TDCRecordWrapper)
private
fR : TTBAddBitmap;
public
function GetRecordPtr : pointer; override;
published
procedure sethInst(const val : THandle);
function gethInst : THandle;
property hInst : THandle read gethInst write sethInst;
procedure setnID(const val : UINT);
function getnID : UINT;
property nID : UINT read getnID write setnID;
end;
type __TTBButton__Wrapper = class(TDCRecordWrapper)
private
fR : TTBButton;
public
function GetRecordPtr : pointer; override;
published
procedure setiBitmap(const val : Integer);
function getiBitmap : Integer;
property iBitmap : Integer read getiBitmap write setiBitmap;
procedure setidCommand(const val : Integer);
function getidCommand : Integer;
property idCommand : Integer read getidCommand write setidCommand;
procedure setfsState(const val : Byte);
function getfsState : Byte;
property fsState : Byte read getfsState write setfsState;
procedure setfsStyle(const val : Byte);
function getfsStyle : Byte;
property fsStyle : Byte read getfsStyle write setfsStyle;
procedure setdwData(const val : Longint);
function getdwData : Longint;
property dwData : Longint read getdwData write setdwData;
procedure setiString(const val : Integer);
function getiString : Integer;
property iString : Integer read getiString write setiString;
end;
type __TTBButtonInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TTBButtonInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : UINT);
function getcbSize : UINT;
property cbSize : UINT read getcbSize write setcbSize;
procedure setdwMask(const val : DWORD);
function getdwMask : DWORD;
property dwMask : DWORD read getdwMask write setdwMask;
procedure setidCommand(const val : Integer);
function getidCommand : Integer;
property idCommand : Integer read getidCommand write setidCommand;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setfsState(const val : Byte);
function getfsState : Byte;
property fsState : Byte read getfsState write setfsState;
procedure setfsStyle(const val : Byte);
function getfsStyle : Byte;
property fsStyle : Byte read getfsStyle write setfsStyle;
procedure setcx(const val : Word);
function getcx : Word;
property cx : Word read getcx write setcx;
procedure setlParam(const val : DWORD);
function getlParam : DWORD;
property lParam : DWORD read getlParam write setlParam;
procedure setcchText(const val : Integer);
function getcchText : Integer;
property cchText : Integer read getcchText write setcchText;
end;
type __TTBButtonInfoA__Wrapper = class(TDCRecordWrapper)
private
fR : TTBButtonInfoA;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : UINT);
function getcbSize : UINT;
property cbSize : UINT read getcbSize write setcbSize;
procedure setdwMask(const val : DWORD);
function getdwMask : DWORD;
property dwMask : DWORD read getdwMask write setdwMask;
procedure setidCommand(const val : Integer);
function getidCommand : Integer;
property idCommand : Integer read getidCommand write setidCommand;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setfsState(const val : Byte);
function getfsState : Byte;
property fsState : Byte read getfsState write setfsState;
procedure setfsStyle(const val : Byte);
function getfsStyle : Byte;
property fsStyle : Byte read getfsStyle write setfsStyle;
procedure setcx(const val : Word);
function getcx : Word;
property cx : Word read getcx write setcx;
procedure setlParam(const val : DWORD);
function getlParam : DWORD;
property lParam : DWORD read getlParam write setlParam;
procedure setcchText(const val : Integer);
function getcchText : Integer;
property cchText : Integer read getcchText write setcchText;
end;
type __TTBButtonInfoW__Wrapper = class(TDCRecordWrapper)
private
fR : TTBButtonInfoW;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : UINT);
function getcbSize : UINT;
property cbSize : UINT read getcbSize write setcbSize;
procedure setdwMask(const val : DWORD);
function getdwMask : DWORD;
property dwMask : DWORD read getdwMask write setdwMask;
procedure setidCommand(const val : Integer);
function getidCommand : Integer;
property idCommand : Integer read getidCommand write setidCommand;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setfsState(const val : Byte);
function getfsState : Byte;
property fsState : Byte read getfsState write setfsState;
procedure setfsStyle(const val : Byte);
function getfsStyle : Byte;
property fsStyle : Byte read getfsStyle write setfsStyle;
procedure setcx(const val : Word);
function getcx : Word;
property cx : Word read getcx write setcx;
procedure setlParam(const val : DWORD);
function getlParam : DWORD;
property lParam : DWORD read getlParam write setlParam;
procedure setcchText(const val : Integer);
function getcchText : Integer;
property cchText : Integer read getcchText write setcchText;
end;
type __TTBInsertMark__Wrapper = class(TDCRecordWrapper)
private
fR : TTBInsertMark;
public
function GetRecordPtr : pointer; override;
published
procedure setiButton(const val : Integer);
function getiButton : Integer;
property iButton : Integer read getiButton write setiButton;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type __TTBReplaceBitmap__Wrapper = class(TDCRecordWrapper)
private
fR : TTBReplaceBitmap;
public
function GetRecordPtr : pointer; override;
published
procedure sethInstOld(const val : THandle);
function gethInstOld : THandle;
property hInstOld : THandle read gethInstOld write sethInstOld;
procedure setnIDOld(const val : Cardinal);
function getnIDOld : Cardinal;
property nIDOld : Cardinal read getnIDOld write setnIDOld;
procedure sethInstNew(const val : THandle);
function gethInstNew : THandle;
property hInstNew : THandle read gethInstNew write sethInstNew;
procedure setnIDNew(const val : Cardinal);
function getnIDNew : Cardinal;
property nIDNew : Cardinal read getnIDNew write setnIDNew;
procedure setnButtons(const val : Integer);
function getnButtons : Integer;
property nButtons : Integer read getnButtons write setnButtons;
end;
type __TTBSaveParams__Wrapper = class(TDCRecordWrapper)
private
fR : TTBSaveParams;
public
function GetRecordPtr : pointer; override;
published
procedure sethkr(const val : THandle);
function gethkr : THandle;
property hkr : THandle read gethkr write sethkr;
end;
type __TTBSaveParamsA__Wrapper = class(TDCRecordWrapper)
private
fR : TTBSaveParamsA;
public
function GetRecordPtr : pointer; override;
published
procedure sethkr(const val : THandle);
function gethkr : THandle;
property hkr : THandle read gethkr write sethkr;
end;
type __TTBSaveParamsW__Wrapper = class(TDCRecordWrapper)
private
fR : TTBSaveParamsW;
public
function GetRecordPtr : pointer; override;
published
procedure sethkr(const val : THandle);
function gethkr : THandle;
property hkr : THandle read gethkr write sethkr;
end;
type __TTCHitTestInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TTCHitTestInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
end;
type __TTCItem__Wrapper = class(TDCRecordWrapper)
private
fR : TTCItem;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setdwState(const val : UINT);
function getdwState : UINT;
property dwState : UINT read getdwState write setdwState;
procedure setdwStateMask(const val : UINT);
function getdwStateMask : UINT;
property dwStateMask : UINT read getdwStateMask write setdwStateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TTCItemA__Wrapper = class(TDCRecordWrapper)
private
fR : TTCItemA;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setdwState(const val : UINT);
function getdwState : UINT;
property dwState : UINT read getdwState write setdwState;
procedure setdwStateMask(const val : UINT);
function getdwStateMask : UINT;
property dwStateMask : UINT read getdwStateMask write setdwStateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TTCItemHeader__Wrapper = class(TDCRecordWrapper)
private
fR : TTCItemHeader;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setlpReserved1(const val : UINT);
function getlpReserved1 : UINT;
property lpReserved1 : UINT read getlpReserved1 write setlpReserved1;
procedure setlpReserved2(const val : UINT);
function getlpReserved2 : UINT;
property lpReserved2 : UINT read getlpReserved2 write setlpReserved2;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
end;
type __TTCItemHeaderA__Wrapper = class(TDCRecordWrapper)
private
fR : TTCItemHeaderA;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setlpReserved1(const val : UINT);
function getlpReserved1 : UINT;
property lpReserved1 : UINT read getlpReserved1 write setlpReserved1;
procedure setlpReserved2(const val : UINT);
function getlpReserved2 : UINT;
property lpReserved2 : UINT read getlpReserved2 write setlpReserved2;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
end;
type __TTCItemHeaderW__Wrapper = class(TDCRecordWrapper)
private
fR : TTCItemHeaderW;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setlpReserved1(const val : UINT);
function getlpReserved1 : UINT;
property lpReserved1 : UINT read getlpReserved1 write setlpReserved1;
procedure setlpReserved2(const val : UINT);
function getlpReserved2 : UINT;
property lpReserved2 : UINT read getlpReserved2 write setlpReserved2;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
end;
type __TTCItemW__Wrapper = class(TDCRecordWrapper)
private
fR : TTCItemW;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setdwState(const val : UINT);
function getdwState : UINT;
property dwState : UINT read getdwState write setdwState;
procedure setdwStateMask(const val : UINT);
function getdwStateMask : UINT;
property dwStateMask : UINT read getdwStateMask write setdwStateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TTCKeyDown__Wrapper = class(TDCRecordWrapper)
private
fR : TTCKeyDown;
public
function GetRecordPtr : pointer; override;
published
procedure setwVKey(const val : Word);
function getwVKey : Word;
property wVKey : Word read getwVKey write setwVKey;
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
end;
type __TTHITTESTINFO__Wrapper = class(TDCRecordWrapper)
private
fR : TTHITTESTINFO;
public
function GetRecordPtr : pointer; override;
published
end;
type __TTHITTESTINFOA__Wrapper = class(TDCRecordWrapper)
private
fR : TTHITTESTINFOA;
public
function GetRecordPtr : pointer; override;
published
end;
type __TTHITTESTINFOW__Wrapper = class(TDCRecordWrapper)
private
fR : TTHITTESTINFOW;
public
function GetRecordPtr : pointer; override;
published
end;
type __TToolInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TToolInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : UINT);
function getcbSize : UINT;
property cbSize : UINT read getcbSize write setcbSize;
procedure setuFlags(const val : UINT);
function getuFlags : UINT;
property uFlags : UINT read getuFlags write setuFlags;
procedure setuId(const val : UINT);
function getuId : UINT;
property uId : UINT read getuId write setuId;
procedure sethInst(const val : THandle);
function gethInst : THandle;
property hInst : THandle read gethInst write sethInst;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TToolInfoA__Wrapper = class(TDCRecordWrapper)
private
fR : TToolInfoA;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : UINT);
function getcbSize : UINT;
property cbSize : UINT read getcbSize write setcbSize;
procedure setuFlags(const val : UINT);
function getuFlags : UINT;
property uFlags : UINT read getuFlags write setuFlags;
procedure setuId(const val : UINT);
function getuId : UINT;
property uId : UINT read getuId write setuId;
procedure sethInst(const val : THandle);
function gethInst : THandle;
property hInst : THandle read gethInst write sethInst;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TToolInfoW__Wrapper = class(TDCRecordWrapper)
private
fR : TToolInfoW;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : UINT);
function getcbSize : UINT;
property cbSize : UINT read getcbSize write setcbSize;
procedure setuFlags(const val : UINT);
function getuFlags : UINT;
property uFlags : UINT read getuFlags write setuFlags;
procedure setuId(const val : UINT);
function getuId : UINT;
property uId : UINT read getuId write setuId;
procedure sethInst(const val : THandle);
function gethInst : THandle;
property hInst : THandle read gethInst write sethInst;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TToolTipText__Wrapper = class(TDCRecordWrapper)
private
fR : TToolTipText;
public
function GetRecordPtr : pointer; override;
published
procedure sethInst(const val : hInst);
function gethInst : hInst;
property hInst : hInst read gethInst write sethInst;
procedure setuFlags(const val : UINT);
function getuFlags : UINT;
property uFlags : UINT read getuFlags write setuFlags;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TToolTipTextA__Wrapper = class(TDCRecordWrapper)
private
fR : TToolTipTextA;
public
function GetRecordPtr : pointer; override;
published
procedure sethInst(const val : hInst);
function gethInst : hInst;
property hInst : hInst read gethInst write sethInst;
procedure setuFlags(const val : UINT);
function getuFlags : UINT;
property uFlags : UINT read getuFlags write setuFlags;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TToolTipTextW__Wrapper = class(TDCRecordWrapper)
private
fR : TToolTipTextW;
public
function GetRecordPtr : pointer; override;
published
procedure sethInst(const val : hInst);
function gethInst : hInst;
property hInst : hInst read gethInst write sethInst;
procedure setuFlags(const val : UINT);
function getuFlags : UINT;
property uFlags : UINT read getuFlags write setuFlags;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TTrackMouseEvent__Wrapper = class(TDCRecordWrapper)
private
fR : TTrackMouseEvent;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setdwHoverTime(const val : DWORD);
function getdwHoverTime : DWORD;
property dwHoverTime : DWORD read getdwHoverTime write setdwHoverTime;
end;
type __TTTHitTestInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TTTHitTestInfo;
public
function GetRecordPtr : pointer; override;
published
end;
type __TTTHitTestInfoA__Wrapper = class(TDCRecordWrapper)
private
fR : TTTHitTestInfoA;
public
function GetRecordPtr : pointer; override;
published
end;
type __TTTHitTestInfoW__Wrapper = class(TDCRecordWrapper)
private
fR : TTTHitTestInfoW;
public
function GetRecordPtr : pointer; override;
published
end;
type __TTVDispInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TTVDispInfo;
public
function GetRecordPtr : pointer; override;
published
end;
type __TTVDispInfoA__Wrapper = class(TDCRecordWrapper)
private
fR : TTVDispInfoA;
public
function GetRecordPtr : pointer; override;
published
end;
type __TTVDispInfoW__Wrapper = class(TDCRecordWrapper)
private
fR : TTVDispInfoW;
public
function GetRecordPtr : pointer; override;
published
end;
type __TTVHitTestInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TTVHitTestInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
end;
type __TTVInsertStruct__Wrapper = class(TDCRecordWrapper)
private
fR : TTVInsertStruct;
public
function GetRecordPtr : pointer; override;
published
end;
type __TTVInsertStructA__Wrapper = class(TDCRecordWrapper)
private
fR : TTVInsertStructA;
public
function GetRecordPtr : pointer; override;
published
end;
type __TTVInsertStructW__Wrapper = class(TDCRecordWrapper)
private
fR : TTVInsertStructW;
public
function GetRecordPtr : pointer; override;
published
end;
type __TTVItem__Wrapper = class(TDCRecordWrapper)
private
fR : TTVItem;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setstate(const val : UINT);
function getstate : UINT;
property state : UINT read getstate write setstate;
procedure setstateMask(const val : UINT);
function getstateMask : UINT;
property stateMask : UINT read getstateMask write setstateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiSelectedImage(const val : Integer);
function getiSelectedImage : Integer;
property iSelectedImage : Integer read getiSelectedImage write setiSelectedImage;
procedure setcChildren(const val : Integer);
function getcChildren : Integer;
property cChildren : Integer read getcChildren write setcChildren;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TTVItemA__Wrapper = class(TDCRecordWrapper)
private
fR : TTVItemA;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setstate(const val : UINT);
function getstate : UINT;
property state : UINT read getstate write setstate;
procedure setstateMask(const val : UINT);
function getstateMask : UINT;
property stateMask : UINT read getstateMask write setstateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiSelectedImage(const val : Integer);
function getiSelectedImage : Integer;
property iSelectedImage : Integer read getiSelectedImage write setiSelectedImage;
procedure setcChildren(const val : Integer);
function getcChildren : Integer;
property cChildren : Integer read getcChildren write setcChildren;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TTVItemEx__Wrapper = class(TDCRecordWrapper)
private
fR : TTVItemEx;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setstate(const val : UINT);
function getstate : UINT;
property state : UINT read getstate write setstate;
procedure setstateMask(const val : UINT);
function getstateMask : UINT;
property stateMask : UINT read getstateMask write setstateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiSelectedImage(const val : Integer);
function getiSelectedImage : Integer;
property iSelectedImage : Integer read getiSelectedImage write setiSelectedImage;
procedure setcChildren(const val : Integer);
function getcChildren : Integer;
property cChildren : Integer read getcChildren write setcChildren;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setiIntegral(const val : Integer);
function getiIntegral : Integer;
property iIntegral : Integer read getiIntegral write setiIntegral;
end;
type __TTVItemExA__Wrapper = class(TDCRecordWrapper)
private
fR : TTVItemExA;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setstate(const val : UINT);
function getstate : UINT;
property state : UINT read getstate write setstate;
procedure setstateMask(const val : UINT);
function getstateMask : UINT;
property stateMask : UINT read getstateMask write setstateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiSelectedImage(const val : Integer);
function getiSelectedImage : Integer;
property iSelectedImage : Integer read getiSelectedImage write setiSelectedImage;
procedure setcChildren(const val : Integer);
function getcChildren : Integer;
property cChildren : Integer read getcChildren write setcChildren;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setiIntegral(const val : Integer);
function getiIntegral : Integer;
property iIntegral : Integer read getiIntegral write setiIntegral;
end;
type __TTVItemExW__Wrapper = class(TDCRecordWrapper)
private
fR : TTVItemExW;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setstate(const val : UINT);
function getstate : UINT;
property state : UINT read getstate write setstate;
procedure setstateMask(const val : UINT);
function getstateMask : UINT;
property stateMask : UINT read getstateMask write setstateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiSelectedImage(const val : Integer);
function getiSelectedImage : Integer;
property iSelectedImage : Integer read getiSelectedImage write setiSelectedImage;
procedure setcChildren(const val : Integer);
function getcChildren : Integer;
property cChildren : Integer read getcChildren write setcChildren;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
procedure setiIntegral(const val : Integer);
function getiIntegral : Integer;
property iIntegral : Integer read getiIntegral write setiIntegral;
end;
type __TTVItemW__Wrapper = class(TDCRecordWrapper)
private
fR : TTVItemW;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setstate(const val : UINT);
function getstate : UINT;
property state : UINT read getstate write setstate;
procedure setstateMask(const val : UINT);
function getstateMask : UINT;
property stateMask : UINT read getstateMask write setstateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiSelectedImage(const val : Integer);
function getiSelectedImage : Integer;
property iSelectedImage : Integer read getiSelectedImage write setiSelectedImage;
procedure setcChildren(const val : Integer);
function getcChildren : Integer;
property cChildren : Integer read getcChildren write setcChildren;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TTVKeyDown__Wrapper = class(TDCRecordWrapper)
private
fR : TTVKeyDown;
public
function GetRecordPtr : pointer; override;
published
procedure setwVKey(const val : Word);
function getwVKey : Word;
property wVKey : Word read getwVKey write setwVKey;
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
end;
type __TTVSortCB__Wrapper = class(TDCRecordWrapper)
private
fR : TTVSortCB;
public
function GetRecordPtr : pointer; override;
published
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TUDAccel__Wrapper = class(TDCRecordWrapper)
private
fR : TUDAccel;
public
function GetRecordPtr : pointer; override;
published
procedure setnSec(const val : UINT);
function getnSec : UINT;
property nSec : UINT read getnSec write setnSec;
procedure setnInc(const val : UINT);
function getnInc : UINT;
property nInc : UINT read getnInc write setnInc;
end;
type __TV_DISPINFO__Wrapper = class(TDCRecordWrapper)
private
fR : TV_DISPINFO;
public
function GetRecordPtr : pointer; override;
published
end;
type __TV_DISPINFOA__Wrapper = class(TDCRecordWrapper)
private
fR : TV_DISPINFOA;
public
function GetRecordPtr : pointer; override;
published
end;
type __TV_DISPINFOW__Wrapper = class(TDCRecordWrapper)
private
fR : TV_DISPINFOW;
public
function GetRecordPtr : pointer; override;
published
end;
type __TV_HITTESTINFO__Wrapper = class(TDCRecordWrapper)
private
fR : TV_HITTESTINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
end;
type __TV_INSERTSTRUCT__Wrapper = class(TDCRecordWrapper)
private
fR : TV_INSERTSTRUCT;
public
function GetRecordPtr : pointer; override;
published
end;
type __TV_INSERTSTRUCTA__Wrapper = class(TDCRecordWrapper)
private
fR : TV_INSERTSTRUCTA;
public
function GetRecordPtr : pointer; override;
published
end;
type __TV_INSERTSTRUCTW__Wrapper = class(TDCRecordWrapper)
private
fR : TV_INSERTSTRUCTW;
public
function GetRecordPtr : pointer; override;
published
end;
type __TV_ITEM__Wrapper = class(TDCRecordWrapper)
private
fR : TV_ITEM;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setstate(const val : UINT);
function getstate : UINT;
property state : UINT read getstate write setstate;
procedure setstateMask(const val : UINT);
function getstateMask : UINT;
property stateMask : UINT read getstateMask write setstateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiSelectedImage(const val : Integer);
function getiSelectedImage : Integer;
property iSelectedImage : Integer read getiSelectedImage write setiSelectedImage;
procedure setcChildren(const val : Integer);
function getcChildren : Integer;
property cChildren : Integer read getcChildren write setcChildren;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TV_ITEMA__Wrapper = class(TDCRecordWrapper)
private
fR : TV_ITEMA;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setstate(const val : UINT);
function getstate : UINT;
property state : UINT read getstate write setstate;
procedure setstateMask(const val : UINT);
function getstateMask : UINT;
property stateMask : UINT read getstateMask write setstateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiSelectedImage(const val : Integer);
function getiSelectedImage : Integer;
property iSelectedImage : Integer read getiSelectedImage write setiSelectedImage;
procedure setcChildren(const val : Integer);
function getcChildren : Integer;
property cChildren : Integer read getcChildren write setcChildren;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TV_ITEMW__Wrapper = class(TDCRecordWrapper)
private
fR : TV_ITEMW;
public
function GetRecordPtr : pointer; override;
published
procedure setMask(const val : UINT);
function getMask : UINT;
property Mask : UINT read getMask write setMask;
procedure setstate(const val : UINT);
function getstate : UINT;
property state : UINT read getstate write setstate;
procedure setstateMask(const val : UINT);
function getstateMask : UINT;
property stateMask : UINT read getstateMask write setstateMask;
procedure setcchTextMax(const val : Integer);
function getcchTextMax : Integer;
property cchTextMax : Integer read getcchTextMax write setcchTextMax;
procedure setiImage(const val : Integer);
function getiImage : Integer;
property iImage : Integer read getiImage write setiImage;
procedure setiSelectedImage(const val : Integer);
function getiSelectedImage : Integer;
property iSelectedImage : Integer read getiSelectedImage write setiSelectedImage;
procedure setcChildren(const val : Integer);
function getcChildren : Integer;
property cChildren : Integer read getcChildren write setcChildren;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TV_KEYDOWN__Wrapper = class(TDCRecordWrapper)
private
fR : TV_KEYDOWN;
public
function GetRecordPtr : pointer; override;
published
procedure setwVKey(const val : Word);
function getwVKey : Word;
property wVKey : Word read getwVKey write setwVKey;
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
end;
type __TV_SORTCB__Wrapper = class(TDCRecordWrapper)
private
fR : TV_SORTCB;
public
function GetRecordPtr : pointer; override;
published
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __UDACCEL__Wrapper = class(TDCRecordWrapper)
private
fR : UDACCEL;
public
function GetRecordPtr : pointer; override;
published
procedure setnSec(const val : UINT);
function getnSec : UINT;
property nSec : UINT read getnSec write setnSec;
procedure setnInc(const val : UINT);
function getnInc : UINT;
property nInc : UINT read getnInc write setnInc;
end;
type __TPoint__Wrapper = class(TDCRecordWrapper)
private
fR : TPoint;
public
function GetRecordPtr : pointer; override;
published
procedure setX(const val : Longint);
function getX : Longint;
property X : Longint read getX write setX;
procedure setY(const val : Longint);
function getY : Longint;
property Y : Longint read getY write setY;
end;
type __TRect__Wrapper = class(TDCRecordWrapper)
private
fR : TRect;
public
function GetRecordPtr : pointer; override;
published
procedure setLeft(const val : Longint);
function getLeft : Longint;
property Left : Longint read getLeft write setLeft;
procedure setTop(const val : Longint);
function getTop : Longint;
property Top : Longint read getTop write setTop;
procedure setRight(const val : Longint);
function getRight : Longint;
property Right : Longint read getRight write setRight;
procedure setBottom(const val : Longint);
function getBottom : Longint;
property Bottom : Longint read getBottom write setBottom;
end;
type __TSystemTime__Wrapper = class(TDCRecordWrapper)
private
fR : TSystemTime;
public
function GetRecordPtr : pointer; override;
published
procedure setwYear(const val : Word);
function getwYear : Word;
property wYear : Word read getwYear write setwYear;
procedure setwMonth(const val : Word);
function getwMonth : Word;
property wMonth : Word read getwMonth write setwMonth;
procedure setwDayOfWeek(const val : Word);
function getwDayOfWeek : Word;
property wDayOfWeek : Word read getwDayOfWeek write setwDayOfWeek;
procedure setwDay(const val : Word);
function getwDay : Word;
property wDay : Word read getwDay write setwDay;
procedure setwHour(const val : Word);
function getwHour : Word;
property wHour : Word read getwHour write setwHour;
procedure setwMinute(const val : Word);
function getwMinute : Word;
property wMinute : Word read getwMinute write setwMinute;
procedure setwSecond(const val : Word);
function getwSecond : Word;
property wSecond : Word read getwSecond write setwSecond;
procedure setwMilliseconds(const val : Word);
function getwMilliseconds : Word;
property wMilliseconds : Word read getwMilliseconds write setwMilliseconds;
end;
type __TScrollInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TScrollInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : UINT);
function getcbSize : UINT;
property cbSize : UINT read getcbSize write setcbSize;
procedure setfMask(const val : UINT);
function getfMask : UINT;
property fMask : UINT read getfMask write setfMask;
procedure setnMin(const val : Integer);
function getnMin : Integer;
property nMin : Integer read getnMin write setnMin;
procedure setnMax(const val : Integer);
function getnMax : Integer;
property nMax : Integer read getnMax write setnMax;
procedure setnPage(const val : UINT);
function getnPage : UINT;
property nPage : UINT read getnPage write setnPage;
procedure setnPos(const val : Integer);
function getnPos : Integer;
property nPos : Integer read getnPos write setnPos;
procedure setnTrackPos(const val : Integer);
function getnTrackPos : Integer;
property nTrackPos : Integer read getnTrackPos write setnTrackPos;
end;
type
_T0 = function (const p0 : IDispatch): HPropSheetPage of object;

_T1 = _T0;

_T2 = _T0;

_T3 = function (p0 : HPropSheetPage): BOOL of object;

_T4 = function (const p0 : IDispatch): Integer of object;

_T5 = _T4;

_T6 = _T4;

_T7 = procedure  of object;

_T8 = function (const p0 : IDispatch): BOOL of object;

_T9 = function (p0 : Integer;
p1 : Integer;
p2 : UINT;
p3 : Integer;
p4 : Integer): HIMAGELIST of object;

_T10 = function (p0 : HIMAGELIST): BOOL of object;

_T11 = function (p0 : HIMAGELIST): Integer of object;

_T12 = function (p0 : HIMAGELIST;
p1 : UINT): Integer of object;

_T13 = function (p0 : HIMAGELIST;
p1 : HBITMAP;
p2 : HBITMAP): Integer of object;

_T14 = function (p0 : HIMAGELIST;
p1 : Integer;
p2 : hIcon): Integer of object;

_T15 = function (p0 : HIMAGELIST;
p1 : TColorRef): TColorRef of object;

_T16 = function (p0 : HIMAGELIST): TColorRef of object;

_T17 = function (p0 : HIMAGELIST;
p1 : Integer;
p2 : Integer): BOOL of object;

_T18 = function (p0 : HIMAGELIST;
p1 : hIcon): Integer of object;

_T19 = function (p0 : Integer): Integer of object;

_T20 = function (p0 : HIMAGELIST;
p1 : Integer;
p2 : hdc;
p3 : Integer;
p4 : Integer;
p5 : UINT): BOOL of object;

_T21 = function (p0 : HIMAGELIST;
p1 : Integer;
p2 : HBITMAP;
p3 : HBITMAP): BOOL of object;

_T22 = function (p0 : HIMAGELIST;
p1 : HBITMAP;
p2 : TColorRef): Integer of object;

_T23 = function (p0 : HIMAGELIST;
p1 : Integer;
p2 : hdc;
p3 : Integer;
p4 : Integer;
p5 : Integer;
p6 : Integer;
p7 : TColorRef;
p8 : TColorRef;
p9 : Cardinal): BOOL of object;

{_T24 = function (p0 : PImageListDrawParams): Integer of object;}

_T25 = function (p0 : HIMAGELIST;
p1 : Integer): BOOL of object;

_T26 = function (p0 : HIMAGELIST;
p1 : Integer;
p2 : Cardinal): hIcon of object;

{_T27 = function (p0 : THandle;
p1 : PChar;
p2 : Integer;
p3 : Integer;
p4 : TColorRef;
p5 : Cardinal;
p6 : Cardinal): HIMAGELIST of object;}

{_T28 = function (p0 : THandle;
p1 : PAnsiChar;
p2 : Integer;
p3 : Integer;
p4 : TColorRef;
p5 : Cardinal;
p6 : Cardinal): HIMAGELIST of object;}

{_T29 = function (p0 : THandle;
p1 : PWideChar;
p2 : Integer;
p3 : Integer;
p4 : TColorRef;
p5 : Cardinal;
p6 : Cardinal): HIMAGELIST of object;}

_T30 = function (p0 : HIMAGELIST;
p1 : Integer;
p2 : HIMAGELIST;
p3 : Integer;
p4 : UINT): Integer of object;

_T31 = function (p0 : HIMAGELIST;
p1 : Integer;
p2 : Integer;
p3 : Integer): BOOL of object;

_T32 = function : BOOL of object;

_T33 = function (p0 : HWnd;
p1 : Integer;
p2 : Integer): BOOL of object;

_T34 = function (p0 : HWnd): BOOL of object;

_T35 = function (p0 : Integer;
p1 : Integer): BOOL of object;

_T36 = _T31;

_T37 = function (p0 : BOOL): BOOL of object;

{_T38 = function (p0 : PPoint;
p1 : PPoint): HIMAGELIST of object;}

_T39 = procedure (p0 : HIMAGELIST) of object;

_T40 = function (p0 : THandle;
p1 : HIMAGELIST;
p2 : Integer): hIcon of object;

{_T41 = function (p0 : THandle;
p1 : PChar;
p2 : Integer;
p3 : Integer;
p4 : TColorRef): HIMAGELIST of object;}

{_T42 = function (p0 : THandle;
p1 : PAnsiChar;
p2 : Integer;
p3 : Integer;
p4 : TColorRef): HIMAGELIST of object;}

{_T43 = function (p0 : THandle;
p1 : PWideChar;
p2 : Integer;
p3 : Integer;
p4 : TColorRef): HIMAGELIST of object;}

{_T44 = function (p0 : IStream): HIMAGELIST of object;}

{_T45 = function (p0 : HIMAGELIST;
p1 : IStream): BOOL of object;}

_T46 = function (p0 : HIMAGELIST;
var p1 : Integer;
var p2 : Integer): BOOL of object;

_T47 = _T17;

_T48 = function (p0 : HIMAGELIST;
p1 : Integer;
const p2 : IDispatch): BOOL of object;

_T49 = function (p0 : HIMAGELIST;
p1 : Integer;
p2 : HIMAGELIST;
p3 : Integer;
p4 : Integer;
p5 : Integer): HIMAGELIST of object;

_T50 = function (p0 : HIMAGELIST): HIMAGELIST of object;

_T51 = function (p0 : HWnd): Integer of object;

_T52 = function (p0 : HWnd;
p1 : Integer;
const p2 : IDispatch): Integer of object;

_T53 = _T52;

_T54 = _T52;

_T55 = function (p0 : HWnd;
p1 : Integer): BOOL of object;

_T56 = function (p0 : HWnd;
p1 : Integer;
const p2 : IDispatch): BOOL of object;

_T57 = _T56;

_T58 = _T56;

_T59 = _T56;

_T60 = _T56;

_T61 = _T56;

{_T62 = function (p0 : HWnd;
p1 : PHDLayout): BOOL of object;}

{_T63 = function (p0 : HWnd;
p1 : Integer;
p2 : PRect): Integer of object;}

_T64 = function (p0 : HWnd;
p1 : HIMAGELIST): HIMAGELIST of object;

_T65 = function (p0 : HWnd): HIMAGELIST of object;

_T66 = function (p0 : HWnd;
p1 : Integer): Integer of object;

_T67 = function (p0 : HWnd;
p1 : Integer): HIMAGELIST of object;

_T68 = function (p0 : HWnd;
p1 : Integer;
p2 : PInteger): Integer of object;

_T69 = _T68;

_T70 = function (p0 : HWnd;
p1 : BOOL;
p2 : DWORD): Integer of object;

_T71 = function (p0 : HWnd;
p1 : BOOL): Integer of object;

_T72 = _T51;

{_T73 = function (p0 : HWnd;
p1 : Longint;
p2 : UINT;
p3 : Integer;
p4 : THandle;
p5 : Cardinal;
p6 : PTBButton;
p7 : Integer;
p8 : Integer;
p9 : Integer;
p10 : Integer;
p11 : Integer;
p12 : UINT): HWnd of object;}

{_T74 = function (p0 : THandle;
p1 : Integer;
p2 : UINT;
p3 : PColorMap;
p4 : Integer): HBITMAP of object;}

{_T75 = procedure (p0 : hdc;
p1 : PRect;
p2 : PChar;
p3 : UINT) of object;}

{_T76 = procedure (p0 : hdc;
p1 : PRect;
p2 : PAnsiChar;
p3 : UINT) of object;}

{_T77 = procedure (p0 : hdc;
p1 : PRect;
p2 : PWideChar;
p3 : UINT) of object;}

{_T78 = function (p0 : Longint;
p1 : PChar;
p2 : HWnd;
p3 : UINT): HWnd of object;}

{_T79 = function (p0 : Longint;
p1 : PAnsiChar;
p2 : HWnd;
p3 : UINT): HWnd of object;}

{_T80 = function (p0 : Longint;
p1 : PWideChar;
p2 : HWnd;
p3 : UINT): HWnd of object;}

_T81 = procedure (p0 : UINT;
p1 : wParam;
p2 : lParam;
p3 : HMENU;
p4 : THandle;
p5 : HWnd;
p6 : PUINT) of object;

_T82 = function (p0 : HWnd;
p1 : UINT;
p2 : PINT): BOOL of object;

{_T83 = procedure (p0 : HWnd;
p1 : PRect;
p2 : PINT) of object;}

_T84 = procedure (p0 : HWnd) of object;

_T85 = procedure (p0 : HWnd;
p1 : HWnd;
p2 : Integer) of object;

_T86 = function (p0 : HWnd;
const p1 : IDispatch;
p2 : BOOL): Integer of object;

_T87 = function (p0 : Longint;
p1 : Integer;
p2 : Integer;
p3 : Integer;
p4 : Integer;
p5 : HWnd;
p6 : Integer;
p7 : THandle;
p8 : HWnd;
p9 : Integer;
p10 : Integer;
p11 : Integer): HWnd of object;

_T88 = _T71;

_T89 = _T34;

_T90 = function (p0 : HWnd): TColorRef of object;

_T91 = function (p0 : HWnd;
p1 : TColorRef): BOOL of object;

_T92 = _T67;

_T93 = function (p0 : HWnd;
p1 : HIMAGELIST;
p2 : Integer): HIMAGELIST of object;

_T94 = _T51;

_T95 = function (p0 : Longint): Longint of object;

_T96 = function (p0 : HWnd;
const p1 : IDispatch): BOOL of object;

_T97 = _T96;

_T98 = _T96;

_T99 = _T96;

_T100 = _T96;

_T101 = _T96;

_T102 = function (p0 : HWnd;
const p1 : IDispatch): Integer of object;

_T103 = _T102;

_T104 = _T102;

_T105 = _T55;

_T106 = _T34;

_T107 = function (p0 : HWnd): UINT of object;

_T108 = function (p0 : HWnd;
p1 : UINT): BOOL of object;

_T109 = function (p0 : HWnd;
p1 : Integer;
p2 : UINT): Integer of object;

_T110 = _T52;

_T111 = _T52;

_T112 = _T52;

_T113 = function (p0 : HWnd;
p1 : Integer;
const p2 : IDispatch;
p3 : Integer): BOOL of object;

_T114 = function (p0 : HWnd;
p1 : Integer;
p2 : Integer;
p3 : Integer): BOOL of object;

_T115 = _T56;

{_T116 = function (p0 : HWnd;
p1 : PChar): Integer of object;}

{_T117 = function (p0 : HWnd;
p1 : PAnsiChar): Integer of object;}

{_T118 = function (p0 : HWnd;
p1 : PWideChar): Integer of object;}

_T119 = _T102;

_T120 = function (p0 : HWnd;
p1 : Integer;
p2 : BOOL): BOOL of object;

_T121 = _T33;

_T122 = _T33;

_T123 = _T108;

_T124 = function (p0 : HWnd;
p1 : Integer): HWnd of object;

_T125 = _T124;

_T126 = _T124;

_T127 = function (p0 : HWnd): HWnd of object;

_T128 = _T56;

_T129 = _T56;

_T130 = _T56;

_T131 = _T56;

_T132 = _T56;

_T133 = _T56;

_T134 = _T52;

_T135 = _T52;

_T136 = _T52;

_T137 = _T55;

_T138 = _T66;

_T139 = _T33;

_T140 = _T127;

_T141 = function (p0 : HWnd;
p1 : Integer;
const p2 : IDispatch): HIMAGELIST of object;

_T142 = _T96;

_T143 = _T90;

_T144 = _T91;

_T145 = _T90;

_T146 = _T91;

_T147 = _T51;

_T148 = _T51;

_T149 = _T96;

_T150 = _T55;

_T151 = function (p0 : HWnd;
p1 : Integer;
p2 : UINT;
p3 : UINT): BOOL of object;

_T152 = function (p0 : HWnd;
p1 : Integer;
p2 : Integer): Integer of object;

_T153 = function (p0 : HWnd;
p1 : Integer): UINT of object;

_T154 = procedure (p0 : HWnd;
p1 : Integer;
p2 : Boolean) of object;

{_T155 = function (p0 : HWnd;
p1 : Integer;
p2 : Integer;
p3 : PChar;
p4 : Integer): Integer of object;}

{_T156 = function (p0 : HWnd;
p1 : Integer;
p2 : Integer;
p3 : PAnsiChar;
p4 : Integer): Integer of object;}

{_T157 = function (p0 : HWnd;
p1 : Integer;
p2 : Integer;
p3 : PWideChar;
p4 : Integer): Integer of object;}

{_T158 = function (p0 : HWnd;
p1 : Integer;
p2 : Integer;
p3 : PChar): BOOL of object;}

{_T159 = function (p0 : HWnd;
p1 : Integer;
p2 : Integer;
p3 : PAnsiChar): BOOL of object;}

{_T160 = function (p0 : HWnd;
p1 : Integer;
p2 : Integer;
p3 : PWideChar): BOOL of object;}

_T161 = procedure (p0 : HWnd;
p1 : Integer) of object;

_T162 = procedure (p0 : HWnd;
p1 : Integer;
p2 : DWORD) of object;

{_T163 = function (p0 : HWnd;
p1 : TLVCompare;
p2 : Longint): BOOL of object;}

_T164 = procedure (p0 : HWnd;
p1 : Integer;
p2 : Integer;
p3 : Integer) of object;

_T165 = _T107;

_T166 = function (p0 : HWnd;
p1 : Integer): Longint of object;

{_T167 = function (p0 : HWnd;
p1 : PChar): BOOL of object;}

{_T168 = function (p0 : HWnd;
p1 : PAnsiChar): BOOL of object;}

{_T169 = function (p0 : HWnd;
p1 : PWideChar): BOOL of object;}

_T170 = function (p0 : HWnd;
p1 : Word;
p2 : Word): DWORD of object;

_T171 = function (p0 : HWnd;
p1 : DWORD): BOOL of object;

_T172 = function (p0 : HWnd): DWORD of object;

{_T173 = function (p0 : HWnd;
p1 : Integer;
p2 : Integer;
p3 : DWORD;
p4 : PRect): BOOL of object;}

{_T174 = function (p0 : HWnd;
p1 : PLVHitTestInfo): Integer of object;}

_T175 = function (p0 : HWnd;
p1 : Integer;
p2 : PInteger): BOOL of object;

_T176 = _T175;

_T177 = _T66;

_T178 = _T51;

_T179 = function (p0 : HWnd;
p1 : HCURSOR): HCURSOR of object;

_T180 = function (p0 : HWnd): HCURSOR of object;

_T181 = function (p0 : HWnd;
p1 : Word;
p2 : Word;
p3 : Integer): DWORD of object;

{_T182 = function (p0 : HWnd;
p1 : Integer;
p2 : PRect): BOOL of object;}

_T183 = _T51;

_T184 = _T66;

{_T185 = function (p0 : HWnd;
p1 : Integer;
p2 : PRect): BOOL of object;}

_T186 = function (p0 : HWnd;
p1 : DWORD): DWORD of object;

_T187 = _T51;

_T188 = function (p0 : HWnd;
p1 : PInteger): Integer of object;

_T189 = function (p0 : HWnd;
p1 : HWnd): HWnd of object;

_T190 = _T127;

{_T191 = function (p0 : HWnd;
p1 : PLVBKImage): BOOL of object;}

{_T192 = function (p0 : HWnd;
p1 : PLVBKImageA): BOOL of object;}

{_T193 = function (p0 : HWnd;
p1 : PLVBKImageW): BOOL of object;}

{_T194 = function (p0 : HWnd;
p1 : PLVBKImage): BOOL of object;}

{_T195 = function (p0 : HWnd;
p1 : PLVBKImageA): BOOL of object;}

{_T196 = function (p0 : HWnd;
p1 : PLVBKImageW): BOOL of object;}

{_T200 = function (p0 : HWnd;
p1 : HTREEITEM): BOOL of object;}

_T201 = _T34;

{_T202 = function (p0 : HWnd;
p1 : HTREEITEM;
p2 : Integer): BOOL of object;}

_T204 = _T107;

_T205 = _T107;

_T206 = _T55;

_T207 = _T67;

_T208 = _T93;

{_T209 = function (p0 : HWnd;
p1 : HTREEITEM;
p2 : Integer): HTREEITEM of object;}

{_T210 = function (p0 : HWnd;
p1 : HTREEITEM): HTREEITEM of object;}

{_T211 = function (p0 : HWnd;
p1 : HTREEITEM): HTREEITEM of object;}

{_T212 = function (p0 : HWnd;
p1 : HTREEITEM): HTREEITEM of object;}

{_T213 = function (p0 : HWnd;
p1 : HTREEITEM): HTREEITEM of object;}

{_T214 = function (p0 : HWnd): HTREEITEM of object;}

{_T215 = function (p0 : HWnd;
p1 : HTREEITEM): HTREEITEM of object;}

{_T216 = function (p0 : HWnd;
p1 : HTREEITEM): HTREEITEM of object;}

{_T217 = function (p0 : HWnd): HTREEITEM of object;}

{_T218 = function (p0 : HWnd): HTREEITEM of object;}

{_T219 = function (p0 : HWnd): HTREEITEM of object;}

{_T220 = function (p0 : HWnd): HTREEITEM of object;}

{_T221 = function (p0 : HWnd;
p1 : HTREEITEM;
p2 : Integer): HTREEITEM of object;}

{_T222 = function (p0 : HWnd;
p1 : HTREEITEM): HTREEITEM of object;}

{_T223 = function (p0 : HWnd;
p1 : HTREEITEM): HTREEITEM of object;}

{_T224 = function (p0 : HWnd;
p1 : HTREEITEM): HTREEITEM of object;}

_T225 = _T96;

_T226 = _T96;

_T227 = _T96;

_T228 = _T96;

_T229 = _T96;

_T230 = _T96;

{_T231 = function (p0 : HWnd;
p1 : HTREEITEM): HWnd of object;}

{_T232 = function (p0 : HWnd;
p1 : HTREEITEM): HWnd of object;}

{_T233 = function (p0 : HWnd;
p1 : HTREEITEM): HWnd of object;}

_T234 = _T127;

_T235 = _T107;

{_T237 = function (p0 : HWnd;
p1 : HTREEITEM): HIMAGELIST of object;}

{_T238 = function (p0 : HWnd;
p1 : HTREEITEM;
p2 : Integer): BOOL of object;}

{_T239 = function (p0 : HWnd;
p1 : HTREEITEM): BOOL of object;}

_T240 = function (p0 : HWnd;
const p1 : IDispatch;
p2 : Integer): BOOL of object;

_T241 = function (p0 : HWnd;
p1 : BOOL): BOOL of object;

{_T242 = function (p0 : HWnd;
p1 : PChar): BOOL of object;}

{_T243 = function (p0 : HWnd;
p1 : PAnsiChar): BOOL of object;}

{_T244 = function (p0 : HWnd;
p1 : PWideChar): BOOL of object;}

_T245 = _T189;

_T246 = _T127;

_T247 = _T120;

_T248 = _T241;

_T249 = _T34;

_T250 = _T66;

_T251 = _T51;

_T252 = function (p0 : HWnd;
p1 : COLORREF): COLORREF of object;

_T253 = _T252;

_T254 = function (p0 : HWnd): COLORREF of object;

_T255 = _T254;

_T256 = function (p0 : HWnd;
p1 : UINT): UINT of object;

_T257 = _T107;

_T258 = _T252;

_T259 = _T254;

{_T260 = function (p0 : HWnd;
p1 : PTCHitTestInfo): Integer of object;}

_T261 = _T55;

{_T262 = function (p0 : HWnd;
p1 : BOOL;
p2 : PRect): Integer of object;}

_T263 = function (p0 : HWnd;
p1 : Integer;
p2 : Integer): DWORD of object;

_T264 = _T161;

_T265 = procedure (p0 : HWnd;
p1 : Integer;
p2 : Integer) of object;

_T266 = _T51;

_T267 = _T127;

_T268 = procedure (p0 : HWnd;
p1 : HWnd) of object;

_T269 = _T51;

_T270 = _T161;

_T271 = _T66;

_T272 = procedure (p0 : HWnd;
p1 : BOOL) of object;

_T273 = function (p0 : HWnd;
p1 : Integer;
p2 : WordBool): BOOL of object;

_T274 = _T186;

_T275 = _T172;

_T276 = _T241;

_T277 = _T34;

_T278 = _T56;

_T279 = function (p0 : HWnd;
p1 : HMENU;
p2 : DWORD;
p3 : hInst): HWnd of object;

{_T280 = function (p0 : HWnd;
p1 : PChar): BOOL of object;}

{_T281 = function (p0 : HWnd;
p1 : hInst;
p2 : PChar): BOOL of object;}

_T282 = function (p0 : HWnd;
p1 : Word;
p2 : Word;
p3 : UINT): BOOL of object;

_T283 = _T34;

_T284 = _T34;

_T285 = function (p0 : HWnd;
p1 : Word): BOOL of object;

_T286 = _T96;

_T287 = _T96;

_T288 = _T172;

_T289 = _T108;

{_T290 = function (p0 : HWnd;
p1 : PSystemTime): BOOL of object;}

{_T291 = function (p0 : HWnd;
p1 : PSystemTime): BOOL of object;}

{_T292 = function (p0 : HWnd;
p1 : DWORD;
p2 : PSystemTime): DWORD of object;}

_T293 = _T56;

_T294 = _T96;

_T295 = _T96;

_T296 = _T96;

_T297 = function (p0 : HWnd;
const p1 : IDispatch): DWORD of object;

_T298 = function (p0 : HWnd;
p1 : Integer;
p2 : TColorRef): TColorRef of object;

_T299 = function (p0 : HWnd;
p1 : Integer): TColorRef of object;

_T300 = _T66;

_T301 = _T51;

{_T302 = function (p0 : HWnd;
p1 : PSystemTime): DWORD of object;}

{_T303 = function (p0 : HWnd;
p1 : DWORD;
p2 : PSystemTime): BOOL of object;}

_T304 = _T51;

_T305 = _T66;

_T306 = _T172;

_T307 = _T241;

_T308 = _T34;

_T309 = _T297;

_T310 = function (p0 : HWnd;
p1 : DWORD;
const p2 : IDispatch): BOOL of object;

{_T311 = function (p0 : HWnd;
p1 : PSystemTime): DWORD of object;}

{_T312 = function (p0 : HWnd;
p1 : DWORD;
p2 : PSystemTime): BOOL of object;}

{_T313 = function (p0 : HWnd;
p1 : PChar): BOOL of object;}

{_T314 = function (p0 : HWnd;
p1 : PAnsiChar): BOOL of object;}

{_T315 = function (p0 : HWnd;
p1 : PWideChar): BOOL of object;}

_T316 = function (p0 : HWnd;
p1 : DWORD;
p2 : TColorRef): TColorRef of object;

_T317 = function (p0 : HWnd;
p1 : DWORD): TColorRef of object;

_T318 = _T127;

_T319 = procedure (p0 : HWnd;
p1 : hfont;
p2 : BOOL) of object;

_T320 = function (p0 : HWnd): hfont of object;

_T321 = function (p0 : Byte;
p1 : Byte): lParam of object;

_T322 = function (p0 : DWORD;
p1 : DWORD;
p2 : DWORD;
p3 : DWORD): lParam of object;

_T323 = function (p0 : DWORD): DWORD of object;

_T324 = _T323;

_T325 = _T323;

_T326 = _T323;

_T327 = _T268;

_T328 = _T84;

_T329 = _T272;

_T330 = _T252;

_T331 = _T254;

_T332 = _T66;

_T333 = _T51;

_T334 = _T66;

_T335 = _T51;

_T336 = _T66;

_T337 = _T51;

_T338 = function (p0 : HWnd;
p1 : Integer): DWORD of object;

_T339 = procedure (p0 : HWnd;
p1 : Pointer) of object;

{_T340 = function (p0 : PTrackMouseEvent): BOOL of object;}

_T341 = function (p0 : HWnd;
p1 : UINT;
p2 : UINT): BOOL of object;

_T342 = _T120;

_T343 = function (p0 : HWnd;
p1 : Integer;
var p2 : Integer;
var p3 : Integer): BOOL of object;

_T344 = _T56;

_T345 = _T66;

_T346 = _T175;

_T347 = function (p0 : HWnd;
p1 : Integer;
p2 : Integer;
p3 : BOOL): Integer of object;

_T348 = function (p0 : HWnd;
p1 : Integer;
const p2 : IDispatch;
p3 : BOOL): Integer of object;

_T349 = function (p0 : HWnd;
p1 : Integer;
p2 : Integer;
p3 : Integer;
p4 : BOOL): BOOL of object;

_T350 = function (p0 : HWnd;
p1 : Integer;
p2 : Integer;
p3 : BOOL): BOOL of object;

_T351 = _T34;

_T352 = _T84;

function ___COLORMAP__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___COLORMAP__Wrapper.setcFrom(const val : TColorRef);
begin
_COLORMAP(GetRecordPtr^).cFrom := val;
end;
function ___COLORMAP__Wrapper.getcFrom : TColorRef;
begin
result := _COLORMAP(GetRecordPtr^).cFrom;
end;
procedure ___COLORMAP__Wrapper.setcTo(const val : TColorRef);
begin
_COLORMAP(GetRecordPtr^).cTo := val;
end;
function ___COLORMAP__Wrapper.getcTo : TColorRef;
begin
result := _COLORMAP(GetRecordPtr^).cTo;
end;
function ___HD_HITTESTINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___HD_HITTESTINFO__Wrapper.setFlags(const val : Cardinal);
begin
_HD_HITTESTINFO(GetRecordPtr^).Flags := val;
end;
function ___HD_HITTESTINFO__Wrapper.getFlags : Cardinal;
begin
result := _HD_HITTESTINFO(GetRecordPtr^).Flags;
end;
procedure ___HD_HITTESTINFO__Wrapper.setItem(const val : Integer);
begin
_HD_HITTESTINFO(GetRecordPtr^).Item := val;
end;
function ___HD_HITTESTINFO__Wrapper.getItem : Integer;
begin
result := _HD_HITTESTINFO(GetRecordPtr^).Item;
end;
function ___HD_ITEM__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___HD_ITEM__Wrapper.setMask(const val : Cardinal);
begin
_HD_ITEM(GetRecordPtr^).Mask := val;
end;
function ___HD_ITEM__Wrapper.getMask : Cardinal;
begin
result := _HD_ITEM(GetRecordPtr^).Mask;
end;
procedure ___HD_ITEM__Wrapper.setcxy(const val : Integer);
begin
_HD_ITEM(GetRecordPtr^).cxy := val;
end;
function ___HD_ITEM__Wrapper.getcxy : Integer;
begin
result := _HD_ITEM(GetRecordPtr^).cxy;
end;
procedure ___HD_ITEM__Wrapper.setcchTextMax(const val : Integer);
begin
_HD_ITEM(GetRecordPtr^).cchTextMax := val;
end;
function ___HD_ITEM__Wrapper.getcchTextMax : Integer;
begin
result := _HD_ITEM(GetRecordPtr^).cchTextMax;
end;
procedure ___HD_ITEM__Wrapper.setfmt(const val : Integer);
begin
_HD_ITEM(GetRecordPtr^).fmt := val;
end;
function ___HD_ITEM__Wrapper.getfmt : Integer;
begin
result := _HD_ITEM(GetRecordPtr^).fmt;
end;
procedure ___HD_ITEM__Wrapper.setlParam(const val : lParam);
begin
_HD_ITEM(GetRecordPtr^).lParam := val;
end;
function ___HD_ITEM__Wrapper.getlParam : lParam;
begin
result := _HD_ITEM(GetRecordPtr^).lParam;
end;
procedure ___HD_ITEM__Wrapper.setiImage(const val : Integer);
begin
_HD_ITEM(GetRecordPtr^).iImage := val;
end;
function ___HD_ITEM__Wrapper.getiImage : Integer;
begin
result := _HD_ITEM(GetRecordPtr^).iImage;
end;
procedure ___HD_ITEM__Wrapper.setiOrder(const val : Integer);
begin
_HD_ITEM(GetRecordPtr^).iOrder := val;
end;
function ___HD_ITEM__Wrapper.getiOrder : Integer;
begin
result := _HD_ITEM(GetRecordPtr^).iOrder;
end;
function ___HD_ITEMA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___HD_ITEMA__Wrapper.setMask(const val : Cardinal);
begin
_HD_ITEMA(GetRecordPtr^).Mask := val;
end;
function ___HD_ITEMA__Wrapper.getMask : Cardinal;
begin
result := _HD_ITEMA(GetRecordPtr^).Mask;
end;
procedure ___HD_ITEMA__Wrapper.setcxy(const val : Integer);
begin
_HD_ITEMA(GetRecordPtr^).cxy := val;
end;
function ___HD_ITEMA__Wrapper.getcxy : Integer;
begin
result := _HD_ITEMA(GetRecordPtr^).cxy;
end;
procedure ___HD_ITEMA__Wrapper.setcchTextMax(const val : Integer);
begin
_HD_ITEMA(GetRecordPtr^).cchTextMax := val;
end;
function ___HD_ITEMA__Wrapper.getcchTextMax : Integer;
begin
result := _HD_ITEMA(GetRecordPtr^).cchTextMax;
end;
procedure ___HD_ITEMA__Wrapper.setfmt(const val : Integer);
begin
_HD_ITEMA(GetRecordPtr^).fmt := val;
end;
function ___HD_ITEMA__Wrapper.getfmt : Integer;
begin
result := _HD_ITEMA(GetRecordPtr^).fmt;
end;
procedure ___HD_ITEMA__Wrapper.setlParam(const val : lParam);
begin
_HD_ITEMA(GetRecordPtr^).lParam := val;
end;
function ___HD_ITEMA__Wrapper.getlParam : lParam;
begin
result := _HD_ITEMA(GetRecordPtr^).lParam;
end;
procedure ___HD_ITEMA__Wrapper.setiImage(const val : Integer);
begin
_HD_ITEMA(GetRecordPtr^).iImage := val;
end;
function ___HD_ITEMA__Wrapper.getiImage : Integer;
begin
result := _HD_ITEMA(GetRecordPtr^).iImage;
end;
procedure ___HD_ITEMA__Wrapper.setiOrder(const val : Integer);
begin
_HD_ITEMA(GetRecordPtr^).iOrder := val;
end;
function ___HD_ITEMA__Wrapper.getiOrder : Integer;
begin
result := _HD_ITEMA(GetRecordPtr^).iOrder;
end;
function ___HD_ITEMW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___HD_ITEMW__Wrapper.setMask(const val : Cardinal);
begin
_HD_ITEMW(GetRecordPtr^).Mask := val;
end;
function ___HD_ITEMW__Wrapper.getMask : Cardinal;
begin
result := _HD_ITEMW(GetRecordPtr^).Mask;
end;
procedure ___HD_ITEMW__Wrapper.setcxy(const val : Integer);
begin
_HD_ITEMW(GetRecordPtr^).cxy := val;
end;
function ___HD_ITEMW__Wrapper.getcxy : Integer;
begin
result := _HD_ITEMW(GetRecordPtr^).cxy;
end;
procedure ___HD_ITEMW__Wrapper.setcchTextMax(const val : Integer);
begin
_HD_ITEMW(GetRecordPtr^).cchTextMax := val;
end;
function ___HD_ITEMW__Wrapper.getcchTextMax : Integer;
begin
result := _HD_ITEMW(GetRecordPtr^).cchTextMax;
end;
procedure ___HD_ITEMW__Wrapper.setfmt(const val : Integer);
begin
_HD_ITEMW(GetRecordPtr^).fmt := val;
end;
function ___HD_ITEMW__Wrapper.getfmt : Integer;
begin
result := _HD_ITEMW(GetRecordPtr^).fmt;
end;
procedure ___HD_ITEMW__Wrapper.setlParam(const val : lParam);
begin
_HD_ITEMW(GetRecordPtr^).lParam := val;
end;
function ___HD_ITEMW__Wrapper.getlParam : lParam;
begin
result := _HD_ITEMW(GetRecordPtr^).lParam;
end;
procedure ___HD_ITEMW__Wrapper.setiImage(const val : Integer);
begin
_HD_ITEMW(GetRecordPtr^).iImage := val;
end;
function ___HD_ITEMW__Wrapper.getiImage : Integer;
begin
result := _HD_ITEMW(GetRecordPtr^).iImage;
end;
procedure ___HD_ITEMW__Wrapper.setiOrder(const val : Integer);
begin
_HD_ITEMW(GetRecordPtr^).iOrder := val;
end;
function ___HD_ITEMW__Wrapper.getiOrder : Integer;
begin
result := _HD_ITEMW(GetRecordPtr^).iOrder;
end;
function ___HD_LAYOUT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function ___IMAGEINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___IMAGEINFO__Wrapper.setUnused1(const val : Integer);
begin
_IMAGEINFO(GetRecordPtr^).Unused1 := val;
end;
function ___IMAGEINFO__Wrapper.getUnused1 : Integer;
begin
result := _IMAGEINFO(GetRecordPtr^).Unused1;
end;
procedure ___IMAGEINFO__Wrapper.setUnused2(const val : Integer);
begin
_IMAGEINFO(GetRecordPtr^).Unused2 := val;
end;
function ___IMAGEINFO__Wrapper.getUnused2 : Integer;
begin
result := _IMAGEINFO(GetRecordPtr^).Unused2;
end;
function ___IMAGELISTDRAWPARAMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___IMAGELISTDRAWPARAMS__Wrapper.setcbSize(const val : DWORD);
begin
_IMAGELISTDRAWPARAMS(GetRecordPtr^).cbSize := val;
end;
function ___IMAGELISTDRAWPARAMS__Wrapper.getcbSize : DWORD;
begin
result := _IMAGELISTDRAWPARAMS(GetRecordPtr^).cbSize;
end;
procedure ___IMAGELISTDRAWPARAMS__Wrapper.sethiml(const val : HIMAGELIST);
begin
_IMAGELISTDRAWPARAMS(GetRecordPtr^).himl := val;
end;
function ___IMAGELISTDRAWPARAMS__Wrapper.gethiml : HIMAGELIST;
begin
result := _IMAGELISTDRAWPARAMS(GetRecordPtr^).himl;
end;
procedure ___IMAGELISTDRAWPARAMS__Wrapper.seti(const val : Integer);
begin
_IMAGELISTDRAWPARAMS(GetRecordPtr^).i := val;
end;
function ___IMAGELISTDRAWPARAMS__Wrapper.geti : Integer;
begin
result := _IMAGELISTDRAWPARAMS(GetRecordPtr^).i;
end;
procedure ___IMAGELISTDRAWPARAMS__Wrapper.setx(const val : Integer);
begin
_IMAGELISTDRAWPARAMS(GetRecordPtr^).x := val;
end;
function ___IMAGELISTDRAWPARAMS__Wrapper.getx : Integer;
begin
result := _IMAGELISTDRAWPARAMS(GetRecordPtr^).x;
end;
procedure ___IMAGELISTDRAWPARAMS__Wrapper.sety(const val : Integer);
begin
_IMAGELISTDRAWPARAMS(GetRecordPtr^).y := val;
end;
function ___IMAGELISTDRAWPARAMS__Wrapper.gety : Integer;
begin
result := _IMAGELISTDRAWPARAMS(GetRecordPtr^).y;
end;
procedure ___IMAGELISTDRAWPARAMS__Wrapper.setcx(const val : Integer);
begin
_IMAGELISTDRAWPARAMS(GetRecordPtr^).cx := val;
end;
function ___IMAGELISTDRAWPARAMS__Wrapper.getcx : Integer;
begin
result := _IMAGELISTDRAWPARAMS(GetRecordPtr^).cx;
end;
procedure ___IMAGELISTDRAWPARAMS__Wrapper.setcy(const val : Integer);
begin
_IMAGELISTDRAWPARAMS(GetRecordPtr^).cy := val;
end;
function ___IMAGELISTDRAWPARAMS__Wrapper.getcy : Integer;
begin
result := _IMAGELISTDRAWPARAMS(GetRecordPtr^).cy;
end;
procedure ___IMAGELISTDRAWPARAMS__Wrapper.setxBitmap(const val : Integer);
begin
_IMAGELISTDRAWPARAMS(GetRecordPtr^).xBitmap := val;
end;
function ___IMAGELISTDRAWPARAMS__Wrapper.getxBitmap : Integer;
begin
result := _IMAGELISTDRAWPARAMS(GetRecordPtr^).xBitmap;
end;
procedure ___IMAGELISTDRAWPARAMS__Wrapper.setyBitmap(const val : Integer);
begin
_IMAGELISTDRAWPARAMS(GetRecordPtr^).yBitmap := val;
end;
function ___IMAGELISTDRAWPARAMS__Wrapper.getyBitmap : Integer;
begin
result := _IMAGELISTDRAWPARAMS(GetRecordPtr^).yBitmap;
end;
procedure ___IMAGELISTDRAWPARAMS__Wrapper.setrgbBk(const val : COLORREF);
begin
_IMAGELISTDRAWPARAMS(GetRecordPtr^).rgbBk := val;
end;
function ___IMAGELISTDRAWPARAMS__Wrapper.getrgbBk : COLORREF;
begin
result := _IMAGELISTDRAWPARAMS(GetRecordPtr^).rgbBk;
end;
procedure ___IMAGELISTDRAWPARAMS__Wrapper.setrgbFg(const val : COLORREF);
begin
_IMAGELISTDRAWPARAMS(GetRecordPtr^).rgbFg := val;
end;
function ___IMAGELISTDRAWPARAMS__Wrapper.getrgbFg : COLORREF;
begin
result := _IMAGELISTDRAWPARAMS(GetRecordPtr^).rgbFg;
end;
procedure ___IMAGELISTDRAWPARAMS__Wrapper.setfStyle(const val : UINT);
begin
_IMAGELISTDRAWPARAMS(GetRecordPtr^).fStyle := val;
end;
function ___IMAGELISTDRAWPARAMS__Wrapper.getfStyle : UINT;
begin
result := _IMAGELISTDRAWPARAMS(GetRecordPtr^).fStyle;
end;
procedure ___IMAGELISTDRAWPARAMS__Wrapper.setdwRop(const val : DWORD);
begin
_IMAGELISTDRAWPARAMS(GetRecordPtr^).dwRop := val;
end;
function ___IMAGELISTDRAWPARAMS__Wrapper.getdwRop : DWORD;
begin
result := _IMAGELISTDRAWPARAMS(GetRecordPtr^).dwRop;
end;
function ___LV_COLUMN__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___LV_COLUMN__Wrapper.setMask(const val : UINT);
begin
_LV_COLUMN(GetRecordPtr^).Mask := val;
end;
function ___LV_COLUMN__Wrapper.getMask : UINT;
begin
result := _LV_COLUMN(GetRecordPtr^).Mask;
end;
procedure ___LV_COLUMN__Wrapper.setfmt(const val : Integer);
begin
_LV_COLUMN(GetRecordPtr^).fmt := val;
end;
function ___LV_COLUMN__Wrapper.getfmt : Integer;
begin
result := _LV_COLUMN(GetRecordPtr^).fmt;
end;
procedure ___LV_COLUMN__Wrapper.setcx(const val : Integer);
begin
_LV_COLUMN(GetRecordPtr^).cx := val;
end;
function ___LV_COLUMN__Wrapper.getcx : Integer;
begin
result := _LV_COLUMN(GetRecordPtr^).cx;
end;
procedure ___LV_COLUMN__Wrapper.setcchTextMax(const val : Integer);
begin
_LV_COLUMN(GetRecordPtr^).cchTextMax := val;
end;
function ___LV_COLUMN__Wrapper.getcchTextMax : Integer;
begin
result := _LV_COLUMN(GetRecordPtr^).cchTextMax;
end;
procedure ___LV_COLUMN__Wrapper.setiSubItem(const val : Integer);
begin
_LV_COLUMN(GetRecordPtr^).iSubItem := val;
end;
function ___LV_COLUMN__Wrapper.getiSubItem : Integer;
begin
result := _LV_COLUMN(GetRecordPtr^).iSubItem;
end;
procedure ___LV_COLUMN__Wrapper.setiImage(const val : Integer);
begin
_LV_COLUMN(GetRecordPtr^).iImage := val;
end;
function ___LV_COLUMN__Wrapper.getiImage : Integer;
begin
result := _LV_COLUMN(GetRecordPtr^).iImage;
end;
procedure ___LV_COLUMN__Wrapper.setiOrder(const val : Integer);
begin
_LV_COLUMN(GetRecordPtr^).iOrder := val;
end;
function ___LV_COLUMN__Wrapper.getiOrder : Integer;
begin
result := _LV_COLUMN(GetRecordPtr^).iOrder;
end;
function ___LV_COLUMNA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___LV_COLUMNA__Wrapper.setMask(const val : UINT);
begin
_LV_COLUMNA(GetRecordPtr^).Mask := val;
end;
function ___LV_COLUMNA__Wrapper.getMask : UINT;
begin
result := _LV_COLUMNA(GetRecordPtr^).Mask;
end;
procedure ___LV_COLUMNA__Wrapper.setfmt(const val : Integer);
begin
_LV_COLUMNA(GetRecordPtr^).fmt := val;
end;
function ___LV_COLUMNA__Wrapper.getfmt : Integer;
begin
result := _LV_COLUMNA(GetRecordPtr^).fmt;
end;
procedure ___LV_COLUMNA__Wrapper.setcx(const val : Integer);
begin
_LV_COLUMNA(GetRecordPtr^).cx := val;
end;
function ___LV_COLUMNA__Wrapper.getcx : Integer;
begin
result := _LV_COLUMNA(GetRecordPtr^).cx;
end;
procedure ___LV_COLUMNA__Wrapper.setcchTextMax(const val : Integer);
begin
_LV_COLUMNA(GetRecordPtr^).cchTextMax := val;
end;
function ___LV_COLUMNA__Wrapper.getcchTextMax : Integer;
begin
result := _LV_COLUMNA(GetRecordPtr^).cchTextMax;
end;
procedure ___LV_COLUMNA__Wrapper.setiSubItem(const val : Integer);
begin
_LV_COLUMNA(GetRecordPtr^).iSubItem := val;
end;
function ___LV_COLUMNA__Wrapper.getiSubItem : Integer;
begin
result := _LV_COLUMNA(GetRecordPtr^).iSubItem;
end;
procedure ___LV_COLUMNA__Wrapper.setiImage(const val : Integer);
begin
_LV_COLUMNA(GetRecordPtr^).iImage := val;
end;
function ___LV_COLUMNA__Wrapper.getiImage : Integer;
begin
result := _LV_COLUMNA(GetRecordPtr^).iImage;
end;
procedure ___LV_COLUMNA__Wrapper.setiOrder(const val : Integer);
begin
_LV_COLUMNA(GetRecordPtr^).iOrder := val;
end;
function ___LV_COLUMNA__Wrapper.getiOrder : Integer;
begin
result := _LV_COLUMNA(GetRecordPtr^).iOrder;
end;
function ___LV_COLUMNW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___LV_COLUMNW__Wrapper.setMask(const val : UINT);
begin
_LV_COLUMNW(GetRecordPtr^).Mask := val;
end;
function ___LV_COLUMNW__Wrapper.getMask : UINT;
begin
result := _LV_COLUMNW(GetRecordPtr^).Mask;
end;
procedure ___LV_COLUMNW__Wrapper.setfmt(const val : Integer);
begin
_LV_COLUMNW(GetRecordPtr^).fmt := val;
end;
function ___LV_COLUMNW__Wrapper.getfmt : Integer;
begin
result := _LV_COLUMNW(GetRecordPtr^).fmt;
end;
procedure ___LV_COLUMNW__Wrapper.setcx(const val : Integer);
begin
_LV_COLUMNW(GetRecordPtr^).cx := val;
end;
function ___LV_COLUMNW__Wrapper.getcx : Integer;
begin
result := _LV_COLUMNW(GetRecordPtr^).cx;
end;
procedure ___LV_COLUMNW__Wrapper.setcchTextMax(const val : Integer);
begin
_LV_COLUMNW(GetRecordPtr^).cchTextMax := val;
end;
function ___LV_COLUMNW__Wrapper.getcchTextMax : Integer;
begin
result := _LV_COLUMNW(GetRecordPtr^).cchTextMax;
end;
procedure ___LV_COLUMNW__Wrapper.setiSubItem(const val : Integer);
begin
_LV_COLUMNW(GetRecordPtr^).iSubItem := val;
end;
function ___LV_COLUMNW__Wrapper.getiSubItem : Integer;
begin
result := _LV_COLUMNW(GetRecordPtr^).iSubItem;
end;
procedure ___LV_COLUMNW__Wrapper.setiImage(const val : Integer);
begin
_LV_COLUMNW(GetRecordPtr^).iImage := val;
end;
function ___LV_COLUMNW__Wrapper.getiImage : Integer;
begin
result := _LV_COLUMNW(GetRecordPtr^).iImage;
end;
procedure ___LV_COLUMNW__Wrapper.setiOrder(const val : Integer);
begin
_LV_COLUMNW(GetRecordPtr^).iOrder := val;
end;
function ___LV_COLUMNW__Wrapper.getiOrder : Integer;
begin
result := _LV_COLUMNW(GetRecordPtr^).iOrder;
end;
function ___LV_DISPINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function ___LV_DISPINFOW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function ___LV_FINDINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___LV_FINDINFO__Wrapper.setFlags(const val : UINT);
begin
_LV_FINDINFO(GetRecordPtr^).Flags := val;
end;
function ___LV_FINDINFO__Wrapper.getFlags : UINT;
begin
result := _LV_FINDINFO(GetRecordPtr^).Flags;
end;
procedure ___LV_FINDINFO__Wrapper.setlParam(const val : lParam);
begin
_LV_FINDINFO(GetRecordPtr^).lParam := val;
end;
function ___LV_FINDINFO__Wrapper.getlParam : lParam;
begin
result := _LV_FINDINFO(GetRecordPtr^).lParam;
end;
procedure ___LV_FINDINFO__Wrapper.setvkDirection(const val : UINT);
begin
_LV_FINDINFO(GetRecordPtr^).vkDirection := val;
end;
function ___LV_FINDINFO__Wrapper.getvkDirection : UINT;
begin
result := _LV_FINDINFO(GetRecordPtr^).vkDirection;
end;
function ___LV_FINDINFOA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___LV_FINDINFOA__Wrapper.setFlags(const val : UINT);
begin
_LV_FINDINFOA(GetRecordPtr^).Flags := val;
end;
function ___LV_FINDINFOA__Wrapper.getFlags : UINT;
begin
result := _LV_FINDINFOA(GetRecordPtr^).Flags;
end;
procedure ___LV_FINDINFOA__Wrapper.setlParam(const val : lParam);
begin
_LV_FINDINFOA(GetRecordPtr^).lParam := val;
end;
function ___LV_FINDINFOA__Wrapper.getlParam : lParam;
begin
result := _LV_FINDINFOA(GetRecordPtr^).lParam;
end;
procedure ___LV_FINDINFOA__Wrapper.setvkDirection(const val : UINT);
begin
_LV_FINDINFOA(GetRecordPtr^).vkDirection := val;
end;
function ___LV_FINDINFOA__Wrapper.getvkDirection : UINT;
begin
result := _LV_FINDINFOA(GetRecordPtr^).vkDirection;
end;
function ___LV_FINDINFOW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___LV_FINDINFOW__Wrapper.setFlags(const val : UINT);
begin
_LV_FINDINFOW(GetRecordPtr^).Flags := val;
end;
function ___LV_FINDINFOW__Wrapper.getFlags : UINT;
begin
result := _LV_FINDINFOW(GetRecordPtr^).Flags;
end;
procedure ___LV_FINDINFOW__Wrapper.setlParam(const val : lParam);
begin
_LV_FINDINFOW(GetRecordPtr^).lParam := val;
end;
function ___LV_FINDINFOW__Wrapper.getlParam : lParam;
begin
result := _LV_FINDINFOW(GetRecordPtr^).lParam;
end;
procedure ___LV_FINDINFOW__Wrapper.setvkDirection(const val : UINT);
begin
_LV_FINDINFOW(GetRecordPtr^).vkDirection := val;
end;
function ___LV_FINDINFOW__Wrapper.getvkDirection : UINT;
begin
result := _LV_FINDINFOW(GetRecordPtr^).vkDirection;
end;
function ___LV_HITTESTINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___LV_HITTESTINFO__Wrapper.setFlags(const val : UINT);
begin
_LV_HITTESTINFO(GetRecordPtr^).Flags := val;
end;
function ___LV_HITTESTINFO__Wrapper.getFlags : UINT;
begin
result := _LV_HITTESTINFO(GetRecordPtr^).Flags;
end;
procedure ___LV_HITTESTINFO__Wrapper.setiItem(const val : Integer);
begin
_LV_HITTESTINFO(GetRecordPtr^).iItem := val;
end;
function ___LV_HITTESTINFO__Wrapper.getiItem : Integer;
begin
result := _LV_HITTESTINFO(GetRecordPtr^).iItem;
end;
procedure ___LV_HITTESTINFO__Wrapper.setiSubItem(const val : Integer);
begin
_LV_HITTESTINFO(GetRecordPtr^).iSubItem := val;
end;
function ___LV_HITTESTINFO__Wrapper.getiSubItem : Integer;
begin
result := _LV_HITTESTINFO(GetRecordPtr^).iSubItem;
end;
function ___LV_ITEM__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___LV_ITEM__Wrapper.setMask(const val : UINT);
begin
_LV_ITEM(GetRecordPtr^).Mask := val;
end;
function ___LV_ITEM__Wrapper.getMask : UINT;
begin
result := _LV_ITEM(GetRecordPtr^).Mask;
end;
procedure ___LV_ITEM__Wrapper.setiItem(const val : Integer);
begin
_LV_ITEM(GetRecordPtr^).iItem := val;
end;
function ___LV_ITEM__Wrapper.getiItem : Integer;
begin
result := _LV_ITEM(GetRecordPtr^).iItem;
end;
procedure ___LV_ITEM__Wrapper.setiSubItem(const val : Integer);
begin
_LV_ITEM(GetRecordPtr^).iSubItem := val;
end;
function ___LV_ITEM__Wrapper.getiSubItem : Integer;
begin
result := _LV_ITEM(GetRecordPtr^).iSubItem;
end;
procedure ___LV_ITEM__Wrapper.setstate(const val : UINT);
begin
_LV_ITEM(GetRecordPtr^).state := val;
end;
function ___LV_ITEM__Wrapper.getstate : UINT;
begin
result := _LV_ITEM(GetRecordPtr^).state;
end;
procedure ___LV_ITEM__Wrapper.setstateMask(const val : UINT);
begin
_LV_ITEM(GetRecordPtr^).stateMask := val;
end;
function ___LV_ITEM__Wrapper.getstateMask : UINT;
begin
result := _LV_ITEM(GetRecordPtr^).stateMask;
end;
procedure ___LV_ITEM__Wrapper.setcchTextMax(const val : Integer);
begin
_LV_ITEM(GetRecordPtr^).cchTextMax := val;
end;
function ___LV_ITEM__Wrapper.getcchTextMax : Integer;
begin
result := _LV_ITEM(GetRecordPtr^).cchTextMax;
end;
procedure ___LV_ITEM__Wrapper.setiImage(const val : Integer);
begin
_LV_ITEM(GetRecordPtr^).iImage := val;
end;
function ___LV_ITEM__Wrapper.getiImage : Integer;
begin
result := _LV_ITEM(GetRecordPtr^).iImage;
end;
procedure ___LV_ITEM__Wrapper.setlParam(const val : lParam);
begin
_LV_ITEM(GetRecordPtr^).lParam := val;
end;
function ___LV_ITEM__Wrapper.getlParam : lParam;
begin
result := _LV_ITEM(GetRecordPtr^).lParam;
end;
procedure ___LV_ITEM__Wrapper.setiIndent(const val : Integer);
begin
_LV_ITEM(GetRecordPtr^).iIndent := val;
end;
function ___LV_ITEM__Wrapper.getiIndent : Integer;
begin
result := _LV_ITEM(GetRecordPtr^).iIndent;
end;
function ___LV_ITEMA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___LV_ITEMA__Wrapper.setMask(const val : UINT);
begin
_LV_ITEMA(GetRecordPtr^).Mask := val;
end;
function ___LV_ITEMA__Wrapper.getMask : UINT;
begin
result := _LV_ITEMA(GetRecordPtr^).Mask;
end;
procedure ___LV_ITEMA__Wrapper.setiItem(const val : Integer);
begin
_LV_ITEMA(GetRecordPtr^).iItem := val;
end;
function ___LV_ITEMA__Wrapper.getiItem : Integer;
begin
result := _LV_ITEMA(GetRecordPtr^).iItem;
end;
procedure ___LV_ITEMA__Wrapper.setiSubItem(const val : Integer);
begin
_LV_ITEMA(GetRecordPtr^).iSubItem := val;
end;
function ___LV_ITEMA__Wrapper.getiSubItem : Integer;
begin
result := _LV_ITEMA(GetRecordPtr^).iSubItem;
end;
procedure ___LV_ITEMA__Wrapper.setstate(const val : UINT);
begin
_LV_ITEMA(GetRecordPtr^).state := val;
end;
function ___LV_ITEMA__Wrapper.getstate : UINT;
begin
result := _LV_ITEMA(GetRecordPtr^).state;
end;
procedure ___LV_ITEMA__Wrapper.setstateMask(const val : UINT);
begin
_LV_ITEMA(GetRecordPtr^).stateMask := val;
end;
function ___LV_ITEMA__Wrapper.getstateMask : UINT;
begin
result := _LV_ITEMA(GetRecordPtr^).stateMask;
end;
procedure ___LV_ITEMA__Wrapper.setcchTextMax(const val : Integer);
begin
_LV_ITEMA(GetRecordPtr^).cchTextMax := val;
end;
function ___LV_ITEMA__Wrapper.getcchTextMax : Integer;
begin
result := _LV_ITEMA(GetRecordPtr^).cchTextMax;
end;
procedure ___LV_ITEMA__Wrapper.setiImage(const val : Integer);
begin
_LV_ITEMA(GetRecordPtr^).iImage := val;
end;
function ___LV_ITEMA__Wrapper.getiImage : Integer;
begin
result := _LV_ITEMA(GetRecordPtr^).iImage;
end;
procedure ___LV_ITEMA__Wrapper.setlParam(const val : lParam);
begin
_LV_ITEMA(GetRecordPtr^).lParam := val;
end;
function ___LV_ITEMA__Wrapper.getlParam : lParam;
begin
result := _LV_ITEMA(GetRecordPtr^).lParam;
end;
procedure ___LV_ITEMA__Wrapper.setiIndent(const val : Integer);
begin
_LV_ITEMA(GetRecordPtr^).iIndent := val;
end;
function ___LV_ITEMA__Wrapper.getiIndent : Integer;
begin
result := _LV_ITEMA(GetRecordPtr^).iIndent;
end;
function ___LV_ITEMW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___LV_ITEMW__Wrapper.setMask(const val : UINT);
begin
_LV_ITEMW(GetRecordPtr^).Mask := val;
end;
function ___LV_ITEMW__Wrapper.getMask : UINT;
begin
result := _LV_ITEMW(GetRecordPtr^).Mask;
end;
procedure ___LV_ITEMW__Wrapper.setiItem(const val : Integer);
begin
_LV_ITEMW(GetRecordPtr^).iItem := val;
end;
function ___LV_ITEMW__Wrapper.getiItem : Integer;
begin
result := _LV_ITEMW(GetRecordPtr^).iItem;
end;
procedure ___LV_ITEMW__Wrapper.setiSubItem(const val : Integer);
begin
_LV_ITEMW(GetRecordPtr^).iSubItem := val;
end;
function ___LV_ITEMW__Wrapper.getiSubItem : Integer;
begin
result := _LV_ITEMW(GetRecordPtr^).iSubItem;
end;
procedure ___LV_ITEMW__Wrapper.setstate(const val : UINT);
begin
_LV_ITEMW(GetRecordPtr^).state := val;
end;
function ___LV_ITEMW__Wrapper.getstate : UINT;
begin
result := _LV_ITEMW(GetRecordPtr^).state;
end;
procedure ___LV_ITEMW__Wrapper.setstateMask(const val : UINT);
begin
_LV_ITEMW(GetRecordPtr^).stateMask := val;
end;
function ___LV_ITEMW__Wrapper.getstateMask : UINT;
begin
result := _LV_ITEMW(GetRecordPtr^).stateMask;
end;
procedure ___LV_ITEMW__Wrapper.setcchTextMax(const val : Integer);
begin
_LV_ITEMW(GetRecordPtr^).cchTextMax := val;
end;
function ___LV_ITEMW__Wrapper.getcchTextMax : Integer;
begin
result := _LV_ITEMW(GetRecordPtr^).cchTextMax;
end;
procedure ___LV_ITEMW__Wrapper.setiImage(const val : Integer);
begin
_LV_ITEMW(GetRecordPtr^).iImage := val;
end;
function ___LV_ITEMW__Wrapper.getiImage : Integer;
begin
result := _LV_ITEMW(GetRecordPtr^).iImage;
end;
procedure ___LV_ITEMW__Wrapper.setlParam(const val : lParam);
begin
_LV_ITEMW(GetRecordPtr^).lParam := val;
end;
function ___LV_ITEMW__Wrapper.getlParam : lParam;
begin
result := _LV_ITEMW(GetRecordPtr^).lParam;
end;
procedure ___LV_ITEMW__Wrapper.setiIndent(const val : Integer);
begin
_LV_ITEMW(GetRecordPtr^).iIndent := val;
end;
function ___LV_ITEMW__Wrapper.getiIndent : Integer;
begin
result := _LV_ITEMW(GetRecordPtr^).iIndent;
end;
function ___LV_KEYDOWN__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___LV_KEYDOWN__Wrapper.setwVKey(const val : Word);
begin
_LV_KEYDOWN(GetRecordPtr^).wVKey := val;
end;
function ___LV_KEYDOWN__Wrapper.getwVKey : Word;
begin
result := _LV_KEYDOWN(GetRecordPtr^).wVKey;
end;
procedure ___LV_KEYDOWN__Wrapper.setFlags(const val : UINT);
begin
_LV_KEYDOWN(GetRecordPtr^).Flags := val;
end;
function ___LV_KEYDOWN__Wrapper.getFlags : UINT;
begin
result := _LV_KEYDOWN(GetRecordPtr^).Flags;
end;
function ___NM_LISTVIEW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___NM_LISTVIEW__Wrapper.setiItem(const val : Integer);
begin
_NM_LISTVIEW(GetRecordPtr^).iItem := val;
end;
function ___NM_LISTVIEW__Wrapper.getiItem : Integer;
begin
result := _NM_LISTVIEW(GetRecordPtr^).iItem;
end;
procedure ___NM_LISTVIEW__Wrapper.setiSubItem(const val : Integer);
begin
_NM_LISTVIEW(GetRecordPtr^).iSubItem := val;
end;
function ___NM_LISTVIEW__Wrapper.getiSubItem : Integer;
begin
result := _NM_LISTVIEW(GetRecordPtr^).iSubItem;
end;
procedure ___NM_LISTVIEW__Wrapper.setuNewState(const val : UINT);
begin
_NM_LISTVIEW(GetRecordPtr^).uNewState := val;
end;
function ___NM_LISTVIEW__Wrapper.getuNewState : UINT;
begin
result := _NM_LISTVIEW(GetRecordPtr^).uNewState;
end;
procedure ___NM_LISTVIEW__Wrapper.setuOldState(const val : UINT);
begin
_NM_LISTVIEW(GetRecordPtr^).uOldState := val;
end;
function ___NM_LISTVIEW__Wrapper.getuOldState : UINT;
begin
result := _NM_LISTVIEW(GetRecordPtr^).uOldState;
end;
procedure ___NM_LISTVIEW__Wrapper.setuChanged(const val : UINT);
begin
_NM_LISTVIEW(GetRecordPtr^).uChanged := val;
end;
function ___NM_LISTVIEW__Wrapper.getuChanged : UINT;
begin
result := _NM_LISTVIEW(GetRecordPtr^).uChanged;
end;
procedure ___NM_LISTVIEW__Wrapper.setlParam(const val : lParam);
begin
_NM_LISTVIEW(GetRecordPtr^).lParam := val;
end;
function ___NM_LISTVIEW__Wrapper.getlParam : lParam;
begin
result := _NM_LISTVIEW(GetRecordPtr^).lParam;
end;
function ___NM_TREEVIEW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___NM_TREEVIEW__Wrapper.setaction(const val : UINT);
begin
_NM_TREEVIEW(GetRecordPtr^).action := val;
end;
function ___NM_TREEVIEW__Wrapper.getaction : UINT;
begin
result := _NM_TREEVIEW(GetRecordPtr^).action;
end;
function ___NM_TREEVIEWA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___NM_TREEVIEWA__Wrapper.setaction(const val : UINT);
begin
_NM_TREEVIEWA(GetRecordPtr^).action := val;
end;
function ___NM_TREEVIEWA__Wrapper.getaction : UINT;
begin
result := _NM_TREEVIEWA(GetRecordPtr^).action;
end;
function ___NM_TREEVIEWW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___NM_TREEVIEWW__Wrapper.setaction(const val : UINT);
begin
_NM_TREEVIEWW(GetRecordPtr^).action := val;
end;
function ___NM_TREEVIEWW__Wrapper.getaction : UINT;
begin
result := _NM_TREEVIEWW(GetRecordPtr^).action;
end;
function ___NM_UPDOWN__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___NM_UPDOWN__Wrapper.setiPos(const val : Integer);
begin
_NM_UPDOWN(GetRecordPtr^).iPos := val;
end;
function ___NM_UPDOWN__Wrapper.getiPos : Integer;
begin
result := _NM_UPDOWN(GetRecordPtr^).iPos;
end;
procedure ___NM_UPDOWN__Wrapper.setiDelta(const val : Integer);
begin
_NM_UPDOWN(GetRecordPtr^).iDelta := val;
end;
function ___NM_UPDOWN__Wrapper.getiDelta : Integer;
begin
result := _NM_UPDOWN(GetRecordPtr^).iDelta;
end;
function ___NMTBCUSTOMDRAW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___NMTBCUSTOMDRAW__Wrapper.setclrText(const val : COLORREF);
begin
_NMTBCUSTOMDRAW(GetRecordPtr^).clrText := val;
end;
function ___NMTBCUSTOMDRAW__Wrapper.getclrText : COLORREF;
begin
result := _NMTBCUSTOMDRAW(GetRecordPtr^).clrText;
end;
procedure ___NMTBCUSTOMDRAW__Wrapper.setclrMark(const val : COLORREF);
begin
_NMTBCUSTOMDRAW(GetRecordPtr^).clrMark := val;
end;
function ___NMTBCUSTOMDRAW__Wrapper.getclrMark : COLORREF;
begin
result := _NMTBCUSTOMDRAW(GetRecordPtr^).clrMark;
end;
procedure ___NMTBCUSTOMDRAW__Wrapper.setclrTextHighlight(const val : COLORREF);
begin
_NMTBCUSTOMDRAW(GetRecordPtr^).clrTextHighlight := val;
end;
function ___NMTBCUSTOMDRAW__Wrapper.getclrTextHighlight : COLORREF;
begin
result := _NMTBCUSTOMDRAW(GetRecordPtr^).clrTextHighlight;
end;
procedure ___NMTBCUSTOMDRAW__Wrapper.setclrBtnFace(const val : COLORREF);
begin
_NMTBCUSTOMDRAW(GetRecordPtr^).clrBtnFace := val;
end;
function ___NMTBCUSTOMDRAW__Wrapper.getclrBtnFace : COLORREF;
begin
result := _NMTBCUSTOMDRAW(GetRecordPtr^).clrBtnFace;
end;
procedure ___NMTBCUSTOMDRAW__Wrapper.setclrBtnHighlight(const val : COLORREF);
begin
_NMTBCUSTOMDRAW(GetRecordPtr^).clrBtnHighlight := val;
end;
function ___NMTBCUSTOMDRAW__Wrapper.getclrBtnHighlight : COLORREF;
begin
result := _NMTBCUSTOMDRAW(GetRecordPtr^).clrBtnHighlight;
end;
procedure ___NMTBCUSTOMDRAW__Wrapper.setclrHighlightHotTrack(const val : COLORREF);
begin
_NMTBCUSTOMDRAW(GetRecordPtr^).clrHighlightHotTrack := val;
end;
function ___NMTBCUSTOMDRAW__Wrapper.getclrHighlightHotTrack : COLORREF;
begin
result := _NMTBCUSTOMDRAW(GetRecordPtr^).clrHighlightHotTrack;
end;
procedure ___NMTBCUSTOMDRAW__Wrapper.setnStringBkMode(const val : Integer);
begin
_NMTBCUSTOMDRAW(GetRecordPtr^).nStringBkMode := val;
end;
function ___NMTBCUSTOMDRAW__Wrapper.getnStringBkMode : Integer;
begin
result := _NMTBCUSTOMDRAW(GetRecordPtr^).nStringBkMode;
end;
procedure ___NMTBCUSTOMDRAW__Wrapper.setnHLStringBkMode(const val : Integer);
begin
_NMTBCUSTOMDRAW(GetRecordPtr^).nHLStringBkMode := val;
end;
function ___NMTBCUSTOMDRAW__Wrapper.getnHLStringBkMode : Integer;
begin
result := _NMTBCUSTOMDRAW(GetRecordPtr^).nHLStringBkMode;
end;
function ___PROPSHEETHEADER__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___PROPSHEETHEADER__Wrapper.setdwSize(const val : Longint);
begin
_PROPSHEETHEADER(GetRecordPtr^).dwSize := val;
end;
function ___PROPSHEETHEADER__Wrapper.getdwSize : Longint;
begin
result := _PROPSHEETHEADER(GetRecordPtr^).dwSize;
end;
procedure ___PROPSHEETHEADER__Wrapper.setdwFlags(const val : Longint);
begin
_PROPSHEETHEADER(GetRecordPtr^).dwFlags := val;
end;
function ___PROPSHEETHEADER__Wrapper.getdwFlags : Longint;
begin
result := _PROPSHEETHEADER(GetRecordPtr^).dwFlags;
end;
procedure ___PROPSHEETHEADER__Wrapper.sethInstance(const val : THandle);
begin
_PROPSHEETHEADER(GetRecordPtr^).hInstance := val;
end;
function ___PROPSHEETHEADER__Wrapper.gethInstance : THandle;
begin
result := _PROPSHEETHEADER(GetRecordPtr^).hInstance;
end;
procedure ___PROPSHEETHEADER__Wrapper.sethIcon(const val : THandle);
begin
_PROPSHEETHEADER(GetRecordPtr^).hIcon := val;
end;
function ___PROPSHEETHEADER__Wrapper.gethIcon : THandle;
begin
result := _PROPSHEETHEADER(GetRecordPtr^).hIcon;
end;
procedure ___PROPSHEETHEADER__Wrapper.setnPages(const val : Integer);
begin
_PROPSHEETHEADER(GetRecordPtr^).nPages := val;
end;
function ___PROPSHEETHEADER__Wrapper.getnPages : Integer;
begin
result := _PROPSHEETHEADER(GetRecordPtr^).nPages;
end;
procedure ___PROPSHEETHEADER__Wrapper.setnStartPage(const val : Integer);
begin
_PROPSHEETHEADER(GetRecordPtr^).nStartPage := val;
end;
function ___PROPSHEETHEADER__Wrapper.getnStartPage : Integer;
begin
result := _PROPSHEETHEADER(GetRecordPtr^).nStartPage;
end;
function ___PROPSHEETHEADERA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___PROPSHEETHEADERA__Wrapper.setdwSize(const val : Longint);
begin
_PROPSHEETHEADERA(GetRecordPtr^).dwSize := val;
end;
function ___PROPSHEETHEADERA__Wrapper.getdwSize : Longint;
begin
result := _PROPSHEETHEADERA(GetRecordPtr^).dwSize;
end;
procedure ___PROPSHEETHEADERA__Wrapper.setdwFlags(const val : Longint);
begin
_PROPSHEETHEADERA(GetRecordPtr^).dwFlags := val;
end;
function ___PROPSHEETHEADERA__Wrapper.getdwFlags : Longint;
begin
result := _PROPSHEETHEADERA(GetRecordPtr^).dwFlags;
end;
procedure ___PROPSHEETHEADERA__Wrapper.sethInstance(const val : THandle);
begin
_PROPSHEETHEADERA(GetRecordPtr^).hInstance := val;
end;
function ___PROPSHEETHEADERA__Wrapper.gethInstance : THandle;
begin
result := _PROPSHEETHEADERA(GetRecordPtr^).hInstance;
end;
procedure ___PROPSHEETHEADERA__Wrapper.sethIcon(const val : THandle);
begin
_PROPSHEETHEADERA(GetRecordPtr^).hIcon := val;
end;
function ___PROPSHEETHEADERA__Wrapper.gethIcon : THandle;
begin
result := _PROPSHEETHEADERA(GetRecordPtr^).hIcon;
end;
procedure ___PROPSHEETHEADERA__Wrapper.setnPages(const val : Integer);
begin
_PROPSHEETHEADERA(GetRecordPtr^).nPages := val;
end;
function ___PROPSHEETHEADERA__Wrapper.getnPages : Integer;
begin
result := _PROPSHEETHEADERA(GetRecordPtr^).nPages;
end;
procedure ___PROPSHEETHEADERA__Wrapper.setnStartPage(const val : Integer);
begin
_PROPSHEETHEADERA(GetRecordPtr^).nStartPage := val;
end;
function ___PROPSHEETHEADERA__Wrapper.getnStartPage : Integer;
begin
result := _PROPSHEETHEADERA(GetRecordPtr^).nStartPage;
end;
function ___PROPSHEETHEADERW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___PROPSHEETHEADERW__Wrapper.setdwSize(const val : Longint);
begin
_PROPSHEETHEADERW(GetRecordPtr^).dwSize := val;
end;
function ___PROPSHEETHEADERW__Wrapper.getdwSize : Longint;
begin
result := _PROPSHEETHEADERW(GetRecordPtr^).dwSize;
end;
procedure ___PROPSHEETHEADERW__Wrapper.setdwFlags(const val : Longint);
begin
_PROPSHEETHEADERW(GetRecordPtr^).dwFlags := val;
end;
function ___PROPSHEETHEADERW__Wrapper.getdwFlags : Longint;
begin
result := _PROPSHEETHEADERW(GetRecordPtr^).dwFlags;
end;
procedure ___PROPSHEETHEADERW__Wrapper.sethInstance(const val : THandle);
begin
_PROPSHEETHEADERW(GetRecordPtr^).hInstance := val;
end;
function ___PROPSHEETHEADERW__Wrapper.gethInstance : THandle;
begin
result := _PROPSHEETHEADERW(GetRecordPtr^).hInstance;
end;
procedure ___PROPSHEETHEADERW__Wrapper.sethIcon(const val : THandle);
begin
_PROPSHEETHEADERW(GetRecordPtr^).hIcon := val;
end;
function ___PROPSHEETHEADERW__Wrapper.gethIcon : THandle;
begin
result := _PROPSHEETHEADERW(GetRecordPtr^).hIcon;
end;
procedure ___PROPSHEETHEADERW__Wrapper.setnPages(const val : Integer);
begin
_PROPSHEETHEADERW(GetRecordPtr^).nPages := val;
end;
function ___PROPSHEETHEADERW__Wrapper.getnPages : Integer;
begin
result := _PROPSHEETHEADERW(GetRecordPtr^).nPages;
end;
procedure ___PROPSHEETHEADERW__Wrapper.setnStartPage(const val : Integer);
begin
_PROPSHEETHEADERW(GetRecordPtr^).nStartPage := val;
end;
function ___PROPSHEETHEADERW__Wrapper.getnStartPage : Integer;
begin
result := _PROPSHEETHEADERW(GetRecordPtr^).nStartPage;
end;
function ___PROPSHEETPAGE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___PROPSHEETPAGE__Wrapper.setdwSize(const val : Longint);
begin
_PROPSHEETPAGE(GetRecordPtr^).dwSize := val;
end;
function ___PROPSHEETPAGE__Wrapper.getdwSize : Longint;
begin
result := _PROPSHEETPAGE(GetRecordPtr^).dwSize;
end;
procedure ___PROPSHEETPAGE__Wrapper.setdwFlags(const val : Longint);
begin
_PROPSHEETPAGE(GetRecordPtr^).dwFlags := val;
end;
function ___PROPSHEETPAGE__Wrapper.getdwFlags : Longint;
begin
result := _PROPSHEETPAGE(GetRecordPtr^).dwFlags;
end;
procedure ___PROPSHEETPAGE__Wrapper.sethInstance(const val : THandle);
begin
_PROPSHEETPAGE(GetRecordPtr^).hInstance := val;
end;
function ___PROPSHEETPAGE__Wrapper.gethInstance : THandle;
begin
result := _PROPSHEETPAGE(GetRecordPtr^).hInstance;
end;
procedure ___PROPSHEETPAGE__Wrapper.sethIcon(const val : THandle);
begin
_PROPSHEETPAGE(GetRecordPtr^).hIcon := val;
end;
function ___PROPSHEETPAGE__Wrapper.gethIcon : THandle;
begin
result := _PROPSHEETPAGE(GetRecordPtr^).hIcon;
end;
procedure ___PROPSHEETPAGE__Wrapper.setlParam(const val : Longint);
begin
_PROPSHEETPAGE(GetRecordPtr^).lParam := val;
end;
function ___PROPSHEETPAGE__Wrapper.getlParam : Longint;
begin
result := _PROPSHEETPAGE(GetRecordPtr^).lParam;
end;
function ___PROPSHEETPAGEA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___PROPSHEETPAGEA__Wrapper.setdwSize(const val : Longint);
begin
_PROPSHEETPAGEA(GetRecordPtr^).dwSize := val;
end;
function ___PROPSHEETPAGEA__Wrapper.getdwSize : Longint;
begin
result := _PROPSHEETPAGEA(GetRecordPtr^).dwSize;
end;
procedure ___PROPSHEETPAGEA__Wrapper.setdwFlags(const val : Longint);
begin
_PROPSHEETPAGEA(GetRecordPtr^).dwFlags := val;
end;
function ___PROPSHEETPAGEA__Wrapper.getdwFlags : Longint;
begin
result := _PROPSHEETPAGEA(GetRecordPtr^).dwFlags;
end;
procedure ___PROPSHEETPAGEA__Wrapper.sethInstance(const val : THandle);
begin
_PROPSHEETPAGEA(GetRecordPtr^).hInstance := val;
end;
function ___PROPSHEETPAGEA__Wrapper.gethInstance : THandle;
begin
result := _PROPSHEETPAGEA(GetRecordPtr^).hInstance;
end;
procedure ___PROPSHEETPAGEA__Wrapper.sethIcon(const val : THandle);
begin
_PROPSHEETPAGEA(GetRecordPtr^).hIcon := val;
end;
function ___PROPSHEETPAGEA__Wrapper.gethIcon : THandle;
begin
result := _PROPSHEETPAGEA(GetRecordPtr^).hIcon;
end;
procedure ___PROPSHEETPAGEA__Wrapper.setlParam(const val : Longint);
begin
_PROPSHEETPAGEA(GetRecordPtr^).lParam := val;
end;
function ___PROPSHEETPAGEA__Wrapper.getlParam : Longint;
begin
result := _PROPSHEETPAGEA(GetRecordPtr^).lParam;
end;
function ___PROPSHEETPAGEW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___PROPSHEETPAGEW__Wrapper.setdwSize(const val : Longint);
begin
_PROPSHEETPAGEW(GetRecordPtr^).dwSize := val;
end;
function ___PROPSHEETPAGEW__Wrapper.getdwSize : Longint;
begin
result := _PROPSHEETPAGEW(GetRecordPtr^).dwSize;
end;
procedure ___PROPSHEETPAGEW__Wrapper.setdwFlags(const val : Longint);
begin
_PROPSHEETPAGEW(GetRecordPtr^).dwFlags := val;
end;
function ___PROPSHEETPAGEW__Wrapper.getdwFlags : Longint;
begin
result := _PROPSHEETPAGEW(GetRecordPtr^).dwFlags;
end;
procedure ___PROPSHEETPAGEW__Wrapper.sethInstance(const val : THandle);
begin
_PROPSHEETPAGEW(GetRecordPtr^).hInstance := val;
end;
function ___PROPSHEETPAGEW__Wrapper.gethInstance : THandle;
begin
result := _PROPSHEETPAGEW(GetRecordPtr^).hInstance;
end;
procedure ___PROPSHEETPAGEW__Wrapper.sethIcon(const val : THandle);
begin
_PROPSHEETPAGEW(GetRecordPtr^).hIcon := val;
end;
function ___PROPSHEETPAGEW__Wrapper.gethIcon : THandle;
begin
result := _PROPSHEETPAGEW(GetRecordPtr^).hIcon;
end;
procedure ___PROPSHEETPAGEW__Wrapper.setlParam(const val : Longint);
begin
_PROPSHEETPAGEW(GetRecordPtr^).lParam := val;
end;
function ___PROPSHEETPAGEW__Wrapper.getlParam : Longint;
begin
result := _PROPSHEETPAGEW(GetRecordPtr^).lParam;
end;
function ___RB_HITTESTINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___RB_HITTESTINFO__Wrapper.setFlags(const val : UINT);
begin
_RB_HITTESTINFO(GetRecordPtr^).Flags := val;
end;
function ___RB_HITTESTINFO__Wrapper.getFlags : UINT;
begin
result := _RB_HITTESTINFO(GetRecordPtr^).Flags;
end;
procedure ___RB_HITTESTINFO__Wrapper.setiBand(const val : Integer);
begin
_RB_HITTESTINFO(GetRecordPtr^).iBand := val;
end;
function ___RB_HITTESTINFO__Wrapper.getiBand : Integer;
begin
result := _RB_HITTESTINFO(GetRecordPtr^).iBand;
end;
function ___TBBUTTON__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___TBBUTTON__Wrapper.setiBitmap(const val : Integer);
begin
_TBBUTTON(GetRecordPtr^).iBitmap := val;
end;
function ___TBBUTTON__Wrapper.getiBitmap : Integer;
begin
result := _TBBUTTON(GetRecordPtr^).iBitmap;
end;
procedure ___TBBUTTON__Wrapper.setidCommand(const val : Integer);
begin
_TBBUTTON(GetRecordPtr^).idCommand := val;
end;
function ___TBBUTTON__Wrapper.getidCommand : Integer;
begin
result := _TBBUTTON(GetRecordPtr^).idCommand;
end;
procedure ___TBBUTTON__Wrapper.setfsState(const val : Byte);
begin
_TBBUTTON(GetRecordPtr^).fsState := val;
end;
function ___TBBUTTON__Wrapper.getfsState : Byte;
begin
result := _TBBUTTON(GetRecordPtr^).fsState;
end;
procedure ___TBBUTTON__Wrapper.setfsStyle(const val : Byte);
begin
_TBBUTTON(GetRecordPtr^).fsStyle := val;
end;
function ___TBBUTTON__Wrapper.getfsStyle : Byte;
begin
result := _TBBUTTON(GetRecordPtr^).fsStyle;
end;
procedure ___TBBUTTON__Wrapper.setdwData(const val : Longint);
begin
_TBBUTTON(GetRecordPtr^).dwData := val;
end;
function ___TBBUTTON__Wrapper.getdwData : Longint;
begin
result := _TBBUTTON(GetRecordPtr^).dwData;
end;
procedure ___TBBUTTON__Wrapper.setiString(const val : Integer);
begin
_TBBUTTON(GetRecordPtr^).iString := val;
end;
function ___TBBUTTON__Wrapper.getiString : Integer;
begin
result := _TBBUTTON(GetRecordPtr^).iString;
end;
function ___TC_HITTESTINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___TC_HITTESTINFO__Wrapper.setFlags(const val : UINT);
begin
_TC_HITTESTINFO(GetRecordPtr^).Flags := val;
end;
function ___TC_HITTESTINFO__Wrapper.getFlags : UINT;
begin
result := _TC_HITTESTINFO(GetRecordPtr^).Flags;
end;
function ___TC_ITEM__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___TC_ITEM__Wrapper.setMask(const val : UINT);
begin
_TC_ITEM(GetRecordPtr^).Mask := val;
end;
function ___TC_ITEM__Wrapper.getMask : UINT;
begin
result := _TC_ITEM(GetRecordPtr^).Mask;
end;
procedure ___TC_ITEM__Wrapper.setdwState(const val : UINT);
begin
_TC_ITEM(GetRecordPtr^).dwState := val;
end;
function ___TC_ITEM__Wrapper.getdwState : UINT;
begin
result := _TC_ITEM(GetRecordPtr^).dwState;
end;
procedure ___TC_ITEM__Wrapper.setdwStateMask(const val : UINT);
begin
_TC_ITEM(GetRecordPtr^).dwStateMask := val;
end;
function ___TC_ITEM__Wrapper.getdwStateMask : UINT;
begin
result := _TC_ITEM(GetRecordPtr^).dwStateMask;
end;
procedure ___TC_ITEM__Wrapper.setcchTextMax(const val : Integer);
begin
_TC_ITEM(GetRecordPtr^).cchTextMax := val;
end;
function ___TC_ITEM__Wrapper.getcchTextMax : Integer;
begin
result := _TC_ITEM(GetRecordPtr^).cchTextMax;
end;
procedure ___TC_ITEM__Wrapper.setiImage(const val : Integer);
begin
_TC_ITEM(GetRecordPtr^).iImage := val;
end;
function ___TC_ITEM__Wrapper.getiImage : Integer;
begin
result := _TC_ITEM(GetRecordPtr^).iImage;
end;
procedure ___TC_ITEM__Wrapper.setlParam(const val : lParam);
begin
_TC_ITEM(GetRecordPtr^).lParam := val;
end;
function ___TC_ITEM__Wrapper.getlParam : lParam;
begin
result := _TC_ITEM(GetRecordPtr^).lParam;
end;
function ___TC_ITEMA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___TC_ITEMA__Wrapper.setMask(const val : UINT);
begin
_TC_ITEMA(GetRecordPtr^).Mask := val;
end;
function ___TC_ITEMA__Wrapper.getMask : UINT;
begin
result := _TC_ITEMA(GetRecordPtr^).Mask;
end;
procedure ___TC_ITEMA__Wrapper.setdwState(const val : UINT);
begin
_TC_ITEMA(GetRecordPtr^).dwState := val;
end;
function ___TC_ITEMA__Wrapper.getdwState : UINT;
begin
result := _TC_ITEMA(GetRecordPtr^).dwState;
end;
procedure ___TC_ITEMA__Wrapper.setdwStateMask(const val : UINT);
begin
_TC_ITEMA(GetRecordPtr^).dwStateMask := val;
end;
function ___TC_ITEMA__Wrapper.getdwStateMask : UINT;
begin
result := _TC_ITEMA(GetRecordPtr^).dwStateMask;
end;
procedure ___TC_ITEMA__Wrapper.setcchTextMax(const val : Integer);
begin
_TC_ITEMA(GetRecordPtr^).cchTextMax := val;
end;
function ___TC_ITEMA__Wrapper.getcchTextMax : Integer;
begin
result := _TC_ITEMA(GetRecordPtr^).cchTextMax;
end;
procedure ___TC_ITEMA__Wrapper.setiImage(const val : Integer);
begin
_TC_ITEMA(GetRecordPtr^).iImage := val;
end;
function ___TC_ITEMA__Wrapper.getiImage : Integer;
begin
result := _TC_ITEMA(GetRecordPtr^).iImage;
end;
procedure ___TC_ITEMA__Wrapper.setlParam(const val : lParam);
begin
_TC_ITEMA(GetRecordPtr^).lParam := val;
end;
function ___TC_ITEMA__Wrapper.getlParam : lParam;
begin
result := _TC_ITEMA(GetRecordPtr^).lParam;
end;
function ___TC_ITEMHEADER__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___TC_ITEMHEADER__Wrapper.setMask(const val : UINT);
begin
_TC_ITEMHEADER(GetRecordPtr^).Mask := val;
end;
function ___TC_ITEMHEADER__Wrapper.getMask : UINT;
begin
result := _TC_ITEMHEADER(GetRecordPtr^).Mask;
end;
procedure ___TC_ITEMHEADER__Wrapper.setlpReserved1(const val : UINT);
begin
_TC_ITEMHEADER(GetRecordPtr^).lpReserved1 := val;
end;
function ___TC_ITEMHEADER__Wrapper.getlpReserved1 : UINT;
begin
result := _TC_ITEMHEADER(GetRecordPtr^).lpReserved1;
end;
procedure ___TC_ITEMHEADER__Wrapper.setlpReserved2(const val : UINT);
begin
_TC_ITEMHEADER(GetRecordPtr^).lpReserved2 := val;
end;
function ___TC_ITEMHEADER__Wrapper.getlpReserved2 : UINT;
begin
result := _TC_ITEMHEADER(GetRecordPtr^).lpReserved2;
end;
procedure ___TC_ITEMHEADER__Wrapper.setcchTextMax(const val : Integer);
begin
_TC_ITEMHEADER(GetRecordPtr^).cchTextMax := val;
end;
function ___TC_ITEMHEADER__Wrapper.getcchTextMax : Integer;
begin
result := _TC_ITEMHEADER(GetRecordPtr^).cchTextMax;
end;
procedure ___TC_ITEMHEADER__Wrapper.setiImage(const val : Integer);
begin
_TC_ITEMHEADER(GetRecordPtr^).iImage := val;
end;
function ___TC_ITEMHEADER__Wrapper.getiImage : Integer;
begin
result := _TC_ITEMHEADER(GetRecordPtr^).iImage;
end;
function ___TC_ITEMHEADERA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___TC_ITEMHEADERA__Wrapper.setMask(const val : UINT);
begin
_TC_ITEMHEADERA(GetRecordPtr^).Mask := val;
end;
function ___TC_ITEMHEADERA__Wrapper.getMask : UINT;
begin
result := _TC_ITEMHEADERA(GetRecordPtr^).Mask;
end;
procedure ___TC_ITEMHEADERA__Wrapper.setlpReserved1(const val : UINT);
begin
_TC_ITEMHEADERA(GetRecordPtr^).lpReserved1 := val;
end;
function ___TC_ITEMHEADERA__Wrapper.getlpReserved1 : UINT;
begin
result := _TC_ITEMHEADERA(GetRecordPtr^).lpReserved1;
end;
procedure ___TC_ITEMHEADERA__Wrapper.setlpReserved2(const val : UINT);
begin
_TC_ITEMHEADERA(GetRecordPtr^).lpReserved2 := val;
end;
function ___TC_ITEMHEADERA__Wrapper.getlpReserved2 : UINT;
begin
result := _TC_ITEMHEADERA(GetRecordPtr^).lpReserved2;
end;
procedure ___TC_ITEMHEADERA__Wrapper.setcchTextMax(const val : Integer);
begin
_TC_ITEMHEADERA(GetRecordPtr^).cchTextMax := val;
end;
function ___TC_ITEMHEADERA__Wrapper.getcchTextMax : Integer;
begin
result := _TC_ITEMHEADERA(GetRecordPtr^).cchTextMax;
end;
procedure ___TC_ITEMHEADERA__Wrapper.setiImage(const val : Integer);
begin
_TC_ITEMHEADERA(GetRecordPtr^).iImage := val;
end;
function ___TC_ITEMHEADERA__Wrapper.getiImage : Integer;
begin
result := _TC_ITEMHEADERA(GetRecordPtr^).iImage;
end;
function ___TC_ITEMHEADERW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___TC_ITEMHEADERW__Wrapper.setMask(const val : UINT);
begin
_TC_ITEMHEADERW(GetRecordPtr^).Mask := val;
end;
function ___TC_ITEMHEADERW__Wrapper.getMask : UINT;
begin
result := _TC_ITEMHEADERW(GetRecordPtr^).Mask;
end;
procedure ___TC_ITEMHEADERW__Wrapper.setlpReserved1(const val : UINT);
begin
_TC_ITEMHEADERW(GetRecordPtr^).lpReserved1 := val;
end;
function ___TC_ITEMHEADERW__Wrapper.getlpReserved1 : UINT;
begin
result := _TC_ITEMHEADERW(GetRecordPtr^).lpReserved1;
end;
procedure ___TC_ITEMHEADERW__Wrapper.setlpReserved2(const val : UINT);
begin
_TC_ITEMHEADERW(GetRecordPtr^).lpReserved2 := val;
end;
function ___TC_ITEMHEADERW__Wrapper.getlpReserved2 : UINT;
begin
result := _TC_ITEMHEADERW(GetRecordPtr^).lpReserved2;
end;
procedure ___TC_ITEMHEADERW__Wrapper.setcchTextMax(const val : Integer);
begin
_TC_ITEMHEADERW(GetRecordPtr^).cchTextMax := val;
end;
function ___TC_ITEMHEADERW__Wrapper.getcchTextMax : Integer;
begin
result := _TC_ITEMHEADERW(GetRecordPtr^).cchTextMax;
end;
procedure ___TC_ITEMHEADERW__Wrapper.setiImage(const val : Integer);
begin
_TC_ITEMHEADERW(GetRecordPtr^).iImage := val;
end;
function ___TC_ITEMHEADERW__Wrapper.getiImage : Integer;
begin
result := _TC_ITEMHEADERW(GetRecordPtr^).iImage;
end;
function ___TC_ITEMW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___TC_ITEMW__Wrapper.setMask(const val : UINT);
begin
_TC_ITEMW(GetRecordPtr^).Mask := val;
end;
function ___TC_ITEMW__Wrapper.getMask : UINT;
begin
result := _TC_ITEMW(GetRecordPtr^).Mask;
end;
procedure ___TC_ITEMW__Wrapper.setdwState(const val : UINT);
begin
_TC_ITEMW(GetRecordPtr^).dwState := val;
end;
function ___TC_ITEMW__Wrapper.getdwState : UINT;
begin
result := _TC_ITEMW(GetRecordPtr^).dwState;
end;
procedure ___TC_ITEMW__Wrapper.setdwStateMask(const val : UINT);
begin
_TC_ITEMW(GetRecordPtr^).dwStateMask := val;
end;
function ___TC_ITEMW__Wrapper.getdwStateMask : UINT;
begin
result := _TC_ITEMW(GetRecordPtr^).dwStateMask;
end;
procedure ___TC_ITEMW__Wrapper.setcchTextMax(const val : Integer);
begin
_TC_ITEMW(GetRecordPtr^).cchTextMax := val;
end;
function ___TC_ITEMW__Wrapper.getcchTextMax : Integer;
begin
result := _TC_ITEMW(GetRecordPtr^).cchTextMax;
end;
procedure ___TC_ITEMW__Wrapper.setiImage(const val : Integer);
begin
_TC_ITEMW(GetRecordPtr^).iImage := val;
end;
function ___TC_ITEMW__Wrapper.getiImage : Integer;
begin
result := _TC_ITEMW(GetRecordPtr^).iImage;
end;
procedure ___TC_ITEMW__Wrapper.setlParam(const val : lParam);
begin
_TC_ITEMW(GetRecordPtr^).lParam := val;
end;
function ___TC_ITEMW__Wrapper.getlParam : lParam;
begin
result := _TC_ITEMW(GetRecordPtr^).lParam;
end;
function ___TC_KEYDOWN__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___TC_KEYDOWN__Wrapper.setwVKey(const val : Word);
begin
_TC_KEYDOWN(GetRecordPtr^).wVKey := val;
end;
function ___TC_KEYDOWN__Wrapper.getwVKey : Word;
begin
result := _TC_KEYDOWN(GetRecordPtr^).wVKey;
end;
procedure ___TC_KEYDOWN__Wrapper.setFlags(const val : UINT);
begin
_TC_KEYDOWN(GetRecordPtr^).Flags := val;
end;
function ___TC_KEYDOWN__Wrapper.getFlags : UINT;
begin
result := _TC_KEYDOWN(GetRecordPtr^).Flags;
end;
function ___TREEITEM__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function ___TT_HITTESTINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function ___TT_HITTESTINFOA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function ___TT_HITTESTINFOW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function ___TV_DISPINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function ___TV_DISPINFOA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function ___TV_DISPINFOW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function ___TV_HITTESTINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___TV_HITTESTINFO__Wrapper.setFlags(const val : UINT);
begin
_TV_HITTESTINFO(GetRecordPtr^).Flags := val;
end;
function ___TV_HITTESTINFO__Wrapper.getFlags : UINT;
begin
result := _TV_HITTESTINFO(GetRecordPtr^).Flags;
end;
function ___TV_INSERTSTRUCT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function ___TV_INSERTSTRUCTA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function ___TV_INSERTSTRUCTW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function ___TV_ITEM__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___TV_ITEM__Wrapper.setMask(const val : UINT);
begin
_TV_ITEM(GetRecordPtr^).Mask := val;
end;
function ___TV_ITEM__Wrapper.getMask : UINT;
begin
result := _TV_ITEM(GetRecordPtr^).Mask;
end;
procedure ___TV_ITEM__Wrapper.setstate(const val : UINT);
begin
_TV_ITEM(GetRecordPtr^).state := val;
end;
function ___TV_ITEM__Wrapper.getstate : UINT;
begin
result := _TV_ITEM(GetRecordPtr^).state;
end;
procedure ___TV_ITEM__Wrapper.setstateMask(const val : UINT);
begin
_TV_ITEM(GetRecordPtr^).stateMask := val;
end;
function ___TV_ITEM__Wrapper.getstateMask : UINT;
begin
result := _TV_ITEM(GetRecordPtr^).stateMask;
end;
procedure ___TV_ITEM__Wrapper.setcchTextMax(const val : Integer);
begin
_TV_ITEM(GetRecordPtr^).cchTextMax := val;
end;
function ___TV_ITEM__Wrapper.getcchTextMax : Integer;
begin
result := _TV_ITEM(GetRecordPtr^).cchTextMax;
end;
procedure ___TV_ITEM__Wrapper.setiImage(const val : Integer);
begin
_TV_ITEM(GetRecordPtr^).iImage := val;
end;
function ___TV_ITEM__Wrapper.getiImage : Integer;
begin
result := _TV_ITEM(GetRecordPtr^).iImage;
end;
procedure ___TV_ITEM__Wrapper.setiSelectedImage(const val : Integer);
begin
_TV_ITEM(GetRecordPtr^).iSelectedImage := val;
end;
function ___TV_ITEM__Wrapper.getiSelectedImage : Integer;
begin
result := _TV_ITEM(GetRecordPtr^).iSelectedImage;
end;
procedure ___TV_ITEM__Wrapper.setcChildren(const val : Integer);
begin
_TV_ITEM(GetRecordPtr^).cChildren := val;
end;
function ___TV_ITEM__Wrapper.getcChildren : Integer;
begin
result := _TV_ITEM(GetRecordPtr^).cChildren;
end;
procedure ___TV_ITEM__Wrapper.setlParam(const val : lParam);
begin
_TV_ITEM(GetRecordPtr^).lParam := val;
end;
function ___TV_ITEM__Wrapper.getlParam : lParam;
begin
result := _TV_ITEM(GetRecordPtr^).lParam;
end;
function ___TV_ITEMA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___TV_ITEMA__Wrapper.setMask(const val : UINT);
begin
_TV_ITEMA(GetRecordPtr^).Mask := val;
end;
function ___TV_ITEMA__Wrapper.getMask : UINT;
begin
result := _TV_ITEMA(GetRecordPtr^).Mask;
end;
procedure ___TV_ITEMA__Wrapper.setstate(const val : UINT);
begin
_TV_ITEMA(GetRecordPtr^).state := val;
end;
function ___TV_ITEMA__Wrapper.getstate : UINT;
begin
result := _TV_ITEMA(GetRecordPtr^).state;
end;
procedure ___TV_ITEMA__Wrapper.setstateMask(const val : UINT);
begin
_TV_ITEMA(GetRecordPtr^).stateMask := val;
end;
function ___TV_ITEMA__Wrapper.getstateMask : UINT;
begin
result := _TV_ITEMA(GetRecordPtr^).stateMask;
end;
procedure ___TV_ITEMA__Wrapper.setcchTextMax(const val : Integer);
begin
_TV_ITEMA(GetRecordPtr^).cchTextMax := val;
end;
function ___TV_ITEMA__Wrapper.getcchTextMax : Integer;
begin
result := _TV_ITEMA(GetRecordPtr^).cchTextMax;
end;
procedure ___TV_ITEMA__Wrapper.setiImage(const val : Integer);
begin
_TV_ITEMA(GetRecordPtr^).iImage := val;
end;
function ___TV_ITEMA__Wrapper.getiImage : Integer;
begin
result := _TV_ITEMA(GetRecordPtr^).iImage;
end;
procedure ___TV_ITEMA__Wrapper.setiSelectedImage(const val : Integer);
begin
_TV_ITEMA(GetRecordPtr^).iSelectedImage := val;
end;
function ___TV_ITEMA__Wrapper.getiSelectedImage : Integer;
begin
result := _TV_ITEMA(GetRecordPtr^).iSelectedImage;
end;
procedure ___TV_ITEMA__Wrapper.setcChildren(const val : Integer);
begin
_TV_ITEMA(GetRecordPtr^).cChildren := val;
end;
function ___TV_ITEMA__Wrapper.getcChildren : Integer;
begin
result := _TV_ITEMA(GetRecordPtr^).cChildren;
end;
procedure ___TV_ITEMA__Wrapper.setlParam(const val : lParam);
begin
_TV_ITEMA(GetRecordPtr^).lParam := val;
end;
function ___TV_ITEMA__Wrapper.getlParam : lParam;
begin
result := _TV_ITEMA(GetRecordPtr^).lParam;
end;
function ___TV_ITEMW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___TV_ITEMW__Wrapper.setMask(const val : UINT);
begin
_TV_ITEMW(GetRecordPtr^).Mask := val;
end;
function ___TV_ITEMW__Wrapper.getMask : UINT;
begin
result := _TV_ITEMW(GetRecordPtr^).Mask;
end;
procedure ___TV_ITEMW__Wrapper.setstate(const val : UINT);
begin
_TV_ITEMW(GetRecordPtr^).state := val;
end;
function ___TV_ITEMW__Wrapper.getstate : UINT;
begin
result := _TV_ITEMW(GetRecordPtr^).state;
end;
procedure ___TV_ITEMW__Wrapper.setstateMask(const val : UINT);
begin
_TV_ITEMW(GetRecordPtr^).stateMask := val;
end;
function ___TV_ITEMW__Wrapper.getstateMask : UINT;
begin
result := _TV_ITEMW(GetRecordPtr^).stateMask;
end;
procedure ___TV_ITEMW__Wrapper.setcchTextMax(const val : Integer);
begin
_TV_ITEMW(GetRecordPtr^).cchTextMax := val;
end;
function ___TV_ITEMW__Wrapper.getcchTextMax : Integer;
begin
result := _TV_ITEMW(GetRecordPtr^).cchTextMax;
end;
procedure ___TV_ITEMW__Wrapper.setiImage(const val : Integer);
begin
_TV_ITEMW(GetRecordPtr^).iImage := val;
end;
function ___TV_ITEMW__Wrapper.getiImage : Integer;
begin
result := _TV_ITEMW(GetRecordPtr^).iImage;
end;
procedure ___TV_ITEMW__Wrapper.setiSelectedImage(const val : Integer);
begin
_TV_ITEMW(GetRecordPtr^).iSelectedImage := val;
end;
function ___TV_ITEMW__Wrapper.getiSelectedImage : Integer;
begin
result := _TV_ITEMW(GetRecordPtr^).iSelectedImage;
end;
procedure ___TV_ITEMW__Wrapper.setcChildren(const val : Integer);
begin
_TV_ITEMW(GetRecordPtr^).cChildren := val;
end;
function ___TV_ITEMW__Wrapper.getcChildren : Integer;
begin
result := _TV_ITEMW(GetRecordPtr^).cChildren;
end;
procedure ___TV_ITEMW__Wrapper.setlParam(const val : lParam);
begin
_TV_ITEMW(GetRecordPtr^).lParam := val;
end;
function ___TV_ITEMW__Wrapper.getlParam : lParam;
begin
result := _TV_ITEMW(GetRecordPtr^).lParam;
end;
function ___TV_KEYDOWN__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___TV_KEYDOWN__Wrapper.setwVKey(const val : Word);
begin
_TV_KEYDOWN(GetRecordPtr^).wVKey := val;
end;
function ___TV_KEYDOWN__Wrapper.getwVKey : Word;
begin
result := _TV_KEYDOWN(GetRecordPtr^).wVKey;
end;
procedure ___TV_KEYDOWN__Wrapper.setFlags(const val : UINT);
begin
_TV_KEYDOWN(GetRecordPtr^).Flags := val;
end;
function ___TV_KEYDOWN__Wrapper.getFlags : UINT;
begin
result := _TV_KEYDOWN(GetRecordPtr^).Flags;
end;
function ___TV_SORTCB__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___TV_SORTCB__Wrapper.setlParam(const val : lParam);
begin
_TV_SORTCB(GetRecordPtr^).lParam := val;
end;
function ___TV_SORTCB__Wrapper.getlParam : lParam;
begin
result := _TV_SORTCB(GetRecordPtr^).lParam;
end;
function ___UDACCEL__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___UDACCEL__Wrapper.setnSec(const val : UINT);
begin
_UDACCEL(GetRecordPtr^).nSec := val;
end;
function ___UDACCEL__Wrapper.getnSec : UINT;
begin
result := _UDACCEL(GetRecordPtr^).nSec;
end;
procedure ___UDACCEL__Wrapper.setnInc(const val : UINT);
begin
_UDACCEL(GetRecordPtr^).nInc := val;
end;
function ___UDACCEL__Wrapper.getnInc : UINT;
begin
result := _UDACCEL(GetRecordPtr^).nInc;
end;
function __COLORMAP__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __COLORMAP__Wrapper.setcFrom(const val : TColorRef);
begin
COLORMAP(GetRecordPtr^).cFrom := val;
end;
function __COLORMAP__Wrapper.getcFrom : TColorRef;
begin
result := COLORMAP(GetRecordPtr^).cFrom;
end;
procedure __COLORMAP__Wrapper.setcTo(const val : TColorRef);
begin
COLORMAP(GetRecordPtr^).cTo := val;
end;
function __COLORMAP__Wrapper.getcTo : TColorRef;
begin
result := COLORMAP(GetRecordPtr^).cTo;
end;
function __DRAGLISTINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __DRAGLISTINFO__Wrapper.setuNotification(const val : UINT);
begin
DRAGLISTINFO(GetRecordPtr^).uNotification := val;
end;
function __DRAGLISTINFO__Wrapper.getuNotification : UINT;
begin
result := DRAGLISTINFO(GetRecordPtr^).uNotification;
end;
function __HD_HITTESTINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __HD_HITTESTINFO__Wrapper.setFlags(const val : Cardinal);
begin
HD_HITTESTINFO(GetRecordPtr^).Flags := val;
end;
function __HD_HITTESTINFO__Wrapper.getFlags : Cardinal;
begin
result := HD_HITTESTINFO(GetRecordPtr^).Flags;
end;
procedure __HD_HITTESTINFO__Wrapper.setItem(const val : Integer);
begin
HD_HITTESTINFO(GetRecordPtr^).Item := val;
end;
function __HD_HITTESTINFO__Wrapper.getItem : Integer;
begin
result := HD_HITTESTINFO(GetRecordPtr^).Item;
end;
function __HD_ITEM__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __HD_ITEM__Wrapper.setMask(const val : Cardinal);
begin
HD_ITEM(GetRecordPtr^).Mask := val;
end;
function __HD_ITEM__Wrapper.getMask : Cardinal;
begin
result := HD_ITEM(GetRecordPtr^).Mask;
end;
procedure __HD_ITEM__Wrapper.setcxy(const val : Integer);
begin
HD_ITEM(GetRecordPtr^).cxy := val;
end;
function __HD_ITEM__Wrapper.getcxy : Integer;
begin
result := HD_ITEM(GetRecordPtr^).cxy;
end;
procedure __HD_ITEM__Wrapper.setcchTextMax(const val : Integer);
begin
HD_ITEM(GetRecordPtr^).cchTextMax := val;
end;
function __HD_ITEM__Wrapper.getcchTextMax : Integer;
begin
result := HD_ITEM(GetRecordPtr^).cchTextMax;
end;
procedure __HD_ITEM__Wrapper.setfmt(const val : Integer);
begin
HD_ITEM(GetRecordPtr^).fmt := val;
end;
function __HD_ITEM__Wrapper.getfmt : Integer;
begin
result := HD_ITEM(GetRecordPtr^).fmt;
end;
procedure __HD_ITEM__Wrapper.setlParam(const val : lParam);
begin
HD_ITEM(GetRecordPtr^).lParam := val;
end;
function __HD_ITEM__Wrapper.getlParam : lParam;
begin
result := HD_ITEM(GetRecordPtr^).lParam;
end;
procedure __HD_ITEM__Wrapper.setiImage(const val : Integer);
begin
HD_ITEM(GetRecordPtr^).iImage := val;
end;
function __HD_ITEM__Wrapper.getiImage : Integer;
begin
result := HD_ITEM(GetRecordPtr^).iImage;
end;
procedure __HD_ITEM__Wrapper.setiOrder(const val : Integer);
begin
HD_ITEM(GetRecordPtr^).iOrder := val;
end;
function __HD_ITEM__Wrapper.getiOrder : Integer;
begin
result := HD_ITEM(GetRecordPtr^).iOrder;
end;
function __HD_ITEMA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __HD_ITEMA__Wrapper.setMask(const val : Cardinal);
begin
HD_ITEMA(GetRecordPtr^).Mask := val;
end;
function __HD_ITEMA__Wrapper.getMask : Cardinal;
begin
result := HD_ITEMA(GetRecordPtr^).Mask;
end;
procedure __HD_ITEMA__Wrapper.setcxy(const val : Integer);
begin
HD_ITEMA(GetRecordPtr^).cxy := val;
end;
function __HD_ITEMA__Wrapper.getcxy : Integer;
begin
result := HD_ITEMA(GetRecordPtr^).cxy;
end;
procedure __HD_ITEMA__Wrapper.setcchTextMax(const val : Integer);
begin
HD_ITEMA(GetRecordPtr^).cchTextMax := val;
end;
function __HD_ITEMA__Wrapper.getcchTextMax : Integer;
begin
result := HD_ITEMA(GetRecordPtr^).cchTextMax;
end;
procedure __HD_ITEMA__Wrapper.setfmt(const val : Integer);
begin
HD_ITEMA(GetRecordPtr^).fmt := val;
end;
function __HD_ITEMA__Wrapper.getfmt : Integer;
begin
result := HD_ITEMA(GetRecordPtr^).fmt;
end;
procedure __HD_ITEMA__Wrapper.setlParam(const val : lParam);
begin
HD_ITEMA(GetRecordPtr^).lParam := val;
end;
function __HD_ITEMA__Wrapper.getlParam : lParam;
begin
result := HD_ITEMA(GetRecordPtr^).lParam;
end;
procedure __HD_ITEMA__Wrapper.setiImage(const val : Integer);
begin
HD_ITEMA(GetRecordPtr^).iImage := val;
end;
function __HD_ITEMA__Wrapper.getiImage : Integer;
begin
result := HD_ITEMA(GetRecordPtr^).iImage;
end;
procedure __HD_ITEMA__Wrapper.setiOrder(const val : Integer);
begin
HD_ITEMA(GetRecordPtr^).iOrder := val;
end;
function __HD_ITEMA__Wrapper.getiOrder : Integer;
begin
result := HD_ITEMA(GetRecordPtr^).iOrder;
end;
function __HD_ITEMW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __HD_ITEMW__Wrapper.setMask(const val : Cardinal);
begin
HD_ITEMW(GetRecordPtr^).Mask := val;
end;
function __HD_ITEMW__Wrapper.getMask : Cardinal;
begin
result := HD_ITEMW(GetRecordPtr^).Mask;
end;
procedure __HD_ITEMW__Wrapper.setcxy(const val : Integer);
begin
HD_ITEMW(GetRecordPtr^).cxy := val;
end;
function __HD_ITEMW__Wrapper.getcxy : Integer;
begin
result := HD_ITEMW(GetRecordPtr^).cxy;
end;
procedure __HD_ITEMW__Wrapper.setcchTextMax(const val : Integer);
begin
HD_ITEMW(GetRecordPtr^).cchTextMax := val;
end;
function __HD_ITEMW__Wrapper.getcchTextMax : Integer;
begin
result := HD_ITEMW(GetRecordPtr^).cchTextMax;
end;
procedure __HD_ITEMW__Wrapper.setfmt(const val : Integer);
begin
HD_ITEMW(GetRecordPtr^).fmt := val;
end;
function __HD_ITEMW__Wrapper.getfmt : Integer;
begin
result := HD_ITEMW(GetRecordPtr^).fmt;
end;
procedure __HD_ITEMW__Wrapper.setlParam(const val : lParam);
begin
HD_ITEMW(GetRecordPtr^).lParam := val;
end;
function __HD_ITEMW__Wrapper.getlParam : lParam;
begin
result := HD_ITEMW(GetRecordPtr^).lParam;
end;
procedure __HD_ITEMW__Wrapper.setiImage(const val : Integer);
begin
HD_ITEMW(GetRecordPtr^).iImage := val;
end;
function __HD_ITEMW__Wrapper.getiImage : Integer;
begin
result := HD_ITEMW(GetRecordPtr^).iImage;
end;
procedure __HD_ITEMW__Wrapper.setiOrder(const val : Integer);
begin
HD_ITEMW(GetRecordPtr^).iOrder := val;
end;
function __HD_ITEMW__Wrapper.getiOrder : Integer;
begin
result := HD_ITEMW(GetRecordPtr^).iOrder;
end;
function __HD_LAYOUT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __HD_NOTIFY__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __HD_NOTIFY__Wrapper.setItem(const val : Integer);
begin
HD_NOTIFY(GetRecordPtr^).Item := val;
end;
function __HD_NOTIFY__Wrapper.getItem : Integer;
begin
result := HD_NOTIFY(GetRecordPtr^).Item;
end;
procedure __HD_NOTIFY__Wrapper.setButton(const val : Integer);
begin
HD_NOTIFY(GetRecordPtr^).Button := val;
end;
function __HD_NOTIFY__Wrapper.getButton : Integer;
begin
result := HD_NOTIFY(GetRecordPtr^).Button;
end;
function __HD_NOTIFYA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __HD_NOTIFYA__Wrapper.setItem(const val : Integer);
begin
HD_NOTIFYA(GetRecordPtr^).Item := val;
end;
function __HD_NOTIFYA__Wrapper.getItem : Integer;
begin
result := HD_NOTIFYA(GetRecordPtr^).Item;
end;
procedure __HD_NOTIFYA__Wrapper.setButton(const val : Integer);
begin
HD_NOTIFYA(GetRecordPtr^).Button := val;
end;
function __HD_NOTIFYA__Wrapper.getButton : Integer;
begin
result := HD_NOTIFYA(GetRecordPtr^).Button;
end;
function __HD_NOTIFYW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __HD_NOTIFYW__Wrapper.setItem(const val : Integer);
begin
HD_NOTIFYW(GetRecordPtr^).Item := val;
end;
function __HD_NOTIFYW__Wrapper.getItem : Integer;
begin
result := HD_NOTIFYW(GetRecordPtr^).Item;
end;
procedure __HD_NOTIFYW__Wrapper.setButton(const val : Integer);
begin
HD_NOTIFYW(GetRecordPtr^).Button := val;
end;
function __HD_NOTIFYW__Wrapper.getButton : Integer;
begin
result := HD_NOTIFYW(GetRecordPtr^).Button;
end;
function __IMAGEINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __IMAGEINFO__Wrapper.setUnused1(const val : Integer);
begin
IMAGEINFO(GetRecordPtr^).Unused1 := val;
end;
function __IMAGEINFO__Wrapper.getUnused1 : Integer;
begin
result := IMAGEINFO(GetRecordPtr^).Unused1;
end;
procedure __IMAGEINFO__Wrapper.setUnused2(const val : Integer);
begin
IMAGEINFO(GetRecordPtr^).Unused2 := val;
end;
function __IMAGEINFO__Wrapper.getUnused2 : Integer;
begin
result := IMAGEINFO(GetRecordPtr^).Unused2;
end;
function __LV_COLUMN__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __LV_COLUMN__Wrapper.setMask(const val : UINT);
begin
LV_COLUMN(GetRecordPtr^).Mask := val;
end;
function __LV_COLUMN__Wrapper.getMask : UINT;
begin
result := LV_COLUMN(GetRecordPtr^).Mask;
end;
procedure __LV_COLUMN__Wrapper.setfmt(const val : Integer);
begin
LV_COLUMN(GetRecordPtr^).fmt := val;
end;
function __LV_COLUMN__Wrapper.getfmt : Integer;
begin
result := LV_COLUMN(GetRecordPtr^).fmt;
end;
procedure __LV_COLUMN__Wrapper.setcx(const val : Integer);
begin
LV_COLUMN(GetRecordPtr^).cx := val;
end;
function __LV_COLUMN__Wrapper.getcx : Integer;
begin
result := LV_COLUMN(GetRecordPtr^).cx;
end;
procedure __LV_COLUMN__Wrapper.setcchTextMax(const val : Integer);
begin
LV_COLUMN(GetRecordPtr^).cchTextMax := val;
end;
function __LV_COLUMN__Wrapper.getcchTextMax : Integer;
begin
result := LV_COLUMN(GetRecordPtr^).cchTextMax;
end;
procedure __LV_COLUMN__Wrapper.setiSubItem(const val : Integer);
begin
LV_COLUMN(GetRecordPtr^).iSubItem := val;
end;
function __LV_COLUMN__Wrapper.getiSubItem : Integer;
begin
result := LV_COLUMN(GetRecordPtr^).iSubItem;
end;
procedure __LV_COLUMN__Wrapper.setiImage(const val : Integer);
begin
LV_COLUMN(GetRecordPtr^).iImage := val;
end;
function __LV_COLUMN__Wrapper.getiImage : Integer;
begin
result := LV_COLUMN(GetRecordPtr^).iImage;
end;
procedure __LV_COLUMN__Wrapper.setiOrder(const val : Integer);
begin
LV_COLUMN(GetRecordPtr^).iOrder := val;
end;
function __LV_COLUMN__Wrapper.getiOrder : Integer;
begin
result := LV_COLUMN(GetRecordPtr^).iOrder;
end;
function __LV_COLUMNA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __LV_COLUMNA__Wrapper.setMask(const val : UINT);
begin
LV_COLUMNA(GetRecordPtr^).Mask := val;
end;
function __LV_COLUMNA__Wrapper.getMask : UINT;
begin
result := LV_COLUMNA(GetRecordPtr^).Mask;
end;
procedure __LV_COLUMNA__Wrapper.setfmt(const val : Integer);
begin
LV_COLUMNA(GetRecordPtr^).fmt := val;
end;
function __LV_COLUMNA__Wrapper.getfmt : Integer;
begin
result := LV_COLUMNA(GetRecordPtr^).fmt;
end;
procedure __LV_COLUMNA__Wrapper.setcx(const val : Integer);
begin
LV_COLUMNA(GetRecordPtr^).cx := val;
end;
function __LV_COLUMNA__Wrapper.getcx : Integer;
begin
result := LV_COLUMNA(GetRecordPtr^).cx;
end;
procedure __LV_COLUMNA__Wrapper.setcchTextMax(const val : Integer);
begin
LV_COLUMNA(GetRecordPtr^).cchTextMax := val;
end;
function __LV_COLUMNA__Wrapper.getcchTextMax : Integer;
begin
result := LV_COLUMNA(GetRecordPtr^).cchTextMax;
end;
procedure __LV_COLUMNA__Wrapper.setiSubItem(const val : Integer);
begin
LV_COLUMNA(GetRecordPtr^).iSubItem := val;
end;
function __LV_COLUMNA__Wrapper.getiSubItem : Integer;
begin
result := LV_COLUMNA(GetRecordPtr^).iSubItem;
end;
procedure __LV_COLUMNA__Wrapper.setiImage(const val : Integer);
begin
LV_COLUMNA(GetRecordPtr^).iImage := val;
end;
function __LV_COLUMNA__Wrapper.getiImage : Integer;
begin
result := LV_COLUMNA(GetRecordPtr^).iImage;
end;
procedure __LV_COLUMNA__Wrapper.setiOrder(const val : Integer);
begin
LV_COLUMNA(GetRecordPtr^).iOrder := val;
end;
function __LV_COLUMNA__Wrapper.getiOrder : Integer;
begin
result := LV_COLUMNA(GetRecordPtr^).iOrder;
end;
function __LV_COLUMNW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __LV_COLUMNW__Wrapper.setMask(const val : UINT);
begin
LV_COLUMNW(GetRecordPtr^).Mask := val;
end;
function __LV_COLUMNW__Wrapper.getMask : UINT;
begin
result := LV_COLUMNW(GetRecordPtr^).Mask;
end;
procedure __LV_COLUMNW__Wrapper.setfmt(const val : Integer);
begin
LV_COLUMNW(GetRecordPtr^).fmt := val;
end;
function __LV_COLUMNW__Wrapper.getfmt : Integer;
begin
result := LV_COLUMNW(GetRecordPtr^).fmt;
end;
procedure __LV_COLUMNW__Wrapper.setcx(const val : Integer);
begin
LV_COLUMNW(GetRecordPtr^).cx := val;
end;
function __LV_COLUMNW__Wrapper.getcx : Integer;
begin
result := LV_COLUMNW(GetRecordPtr^).cx;
end;
procedure __LV_COLUMNW__Wrapper.setcchTextMax(const val : Integer);
begin
LV_COLUMNW(GetRecordPtr^).cchTextMax := val;
end;
function __LV_COLUMNW__Wrapper.getcchTextMax : Integer;
begin
result := LV_COLUMNW(GetRecordPtr^).cchTextMax;
end;
procedure __LV_COLUMNW__Wrapper.setiSubItem(const val : Integer);
begin
LV_COLUMNW(GetRecordPtr^).iSubItem := val;
end;
function __LV_COLUMNW__Wrapper.getiSubItem : Integer;
begin
result := LV_COLUMNW(GetRecordPtr^).iSubItem;
end;
procedure __LV_COLUMNW__Wrapper.setiImage(const val : Integer);
begin
LV_COLUMNW(GetRecordPtr^).iImage := val;
end;
function __LV_COLUMNW__Wrapper.getiImage : Integer;
begin
result := LV_COLUMNW(GetRecordPtr^).iImage;
end;
procedure __LV_COLUMNW__Wrapper.setiOrder(const val : Integer);
begin
LV_COLUMNW(GetRecordPtr^).iOrder := val;
end;
function __LV_COLUMNW__Wrapper.getiOrder : Integer;
begin
result := LV_COLUMNW(GetRecordPtr^).iOrder;
end;
function __LV_DISPINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __LV_DISPINFOA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __LV_DISPINFOW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __LV_FINDINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __LV_FINDINFO__Wrapper.setFlags(const val : UINT);
begin
LV_FINDINFO(GetRecordPtr^).Flags := val;
end;
function __LV_FINDINFO__Wrapper.getFlags : UINT;
begin
result := LV_FINDINFO(GetRecordPtr^).Flags;
end;
procedure __LV_FINDINFO__Wrapper.setlParam(const val : lParam);
begin
LV_FINDINFO(GetRecordPtr^).lParam := val;
end;
function __LV_FINDINFO__Wrapper.getlParam : lParam;
begin
result := LV_FINDINFO(GetRecordPtr^).lParam;
end;
procedure __LV_FINDINFO__Wrapper.setvkDirection(const val : UINT);
begin
LV_FINDINFO(GetRecordPtr^).vkDirection := val;
end;
function __LV_FINDINFO__Wrapper.getvkDirection : UINT;
begin
result := LV_FINDINFO(GetRecordPtr^).vkDirection;
end;
function __LV_FINDINFOA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __LV_FINDINFOA__Wrapper.setFlags(const val : UINT);
begin
LV_FINDINFOA(GetRecordPtr^).Flags := val;
end;
function __LV_FINDINFOA__Wrapper.getFlags : UINT;
begin
result := LV_FINDINFOA(GetRecordPtr^).Flags;
end;
procedure __LV_FINDINFOA__Wrapper.setlParam(const val : lParam);
begin
LV_FINDINFOA(GetRecordPtr^).lParam := val;
end;
function __LV_FINDINFOA__Wrapper.getlParam : lParam;
begin
result := LV_FINDINFOA(GetRecordPtr^).lParam;
end;
procedure __LV_FINDINFOA__Wrapper.setvkDirection(const val : UINT);
begin
LV_FINDINFOA(GetRecordPtr^).vkDirection := val;
end;
function __LV_FINDINFOA__Wrapper.getvkDirection : UINT;
begin
result := LV_FINDINFOA(GetRecordPtr^).vkDirection;
end;
function __LV_FINDINFOW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __LV_FINDINFOW__Wrapper.setFlags(const val : UINT);
begin
LV_FINDINFOW(GetRecordPtr^).Flags := val;
end;
function __LV_FINDINFOW__Wrapper.getFlags : UINT;
begin
result := LV_FINDINFOW(GetRecordPtr^).Flags;
end;
procedure __LV_FINDINFOW__Wrapper.setlParam(const val : lParam);
begin
LV_FINDINFOW(GetRecordPtr^).lParam := val;
end;
function __LV_FINDINFOW__Wrapper.getlParam : lParam;
begin
result := LV_FINDINFOW(GetRecordPtr^).lParam;
end;
procedure __LV_FINDINFOW__Wrapper.setvkDirection(const val : UINT);
begin
LV_FINDINFOW(GetRecordPtr^).vkDirection := val;
end;
function __LV_FINDINFOW__Wrapper.getvkDirection : UINT;
begin
result := LV_FINDINFOW(GetRecordPtr^).vkDirection;
end;
function __LV_HITTESTINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __LV_HITTESTINFO__Wrapper.setFlags(const val : UINT);
begin
LV_HITTESTINFO(GetRecordPtr^).Flags := val;
end;
function __LV_HITTESTINFO__Wrapper.getFlags : UINT;
begin
result := LV_HITTESTINFO(GetRecordPtr^).Flags;
end;
procedure __LV_HITTESTINFO__Wrapper.setiItem(const val : Integer);
begin
LV_HITTESTINFO(GetRecordPtr^).iItem := val;
end;
function __LV_HITTESTINFO__Wrapper.getiItem : Integer;
begin
result := LV_HITTESTINFO(GetRecordPtr^).iItem;
end;
procedure __LV_HITTESTINFO__Wrapper.setiSubItem(const val : Integer);
begin
LV_HITTESTINFO(GetRecordPtr^).iSubItem := val;
end;
function __LV_HITTESTINFO__Wrapper.getiSubItem : Integer;
begin
result := LV_HITTESTINFO(GetRecordPtr^).iSubItem;
end;
function __LV_ITEM__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __LV_ITEM__Wrapper.setMask(const val : UINT);
begin
LV_ITEM(GetRecordPtr^).Mask := val;
end;
function __LV_ITEM__Wrapper.getMask : UINT;
begin
result := LV_ITEM(GetRecordPtr^).Mask;
end;
procedure __LV_ITEM__Wrapper.setiItem(const val : Integer);
begin
LV_ITEM(GetRecordPtr^).iItem := val;
end;
function __LV_ITEM__Wrapper.getiItem : Integer;
begin
result := LV_ITEM(GetRecordPtr^).iItem;
end;
procedure __LV_ITEM__Wrapper.setiSubItem(const val : Integer);
begin
LV_ITEM(GetRecordPtr^).iSubItem := val;
end;
function __LV_ITEM__Wrapper.getiSubItem : Integer;
begin
result := LV_ITEM(GetRecordPtr^).iSubItem;
end;
procedure __LV_ITEM__Wrapper.setstate(const val : UINT);
begin
LV_ITEM(GetRecordPtr^).state := val;
end;
function __LV_ITEM__Wrapper.getstate : UINT;
begin
result := LV_ITEM(GetRecordPtr^).state;
end;
procedure __LV_ITEM__Wrapper.setstateMask(const val : UINT);
begin
LV_ITEM(GetRecordPtr^).stateMask := val;
end;
function __LV_ITEM__Wrapper.getstateMask : UINT;
begin
result := LV_ITEM(GetRecordPtr^).stateMask;
end;
procedure __LV_ITEM__Wrapper.setcchTextMax(const val : Integer);
begin
LV_ITEM(GetRecordPtr^).cchTextMax := val;
end;
function __LV_ITEM__Wrapper.getcchTextMax : Integer;
begin
result := LV_ITEM(GetRecordPtr^).cchTextMax;
end;
procedure __LV_ITEM__Wrapper.setiImage(const val : Integer);
begin
LV_ITEM(GetRecordPtr^).iImage := val;
end;
function __LV_ITEM__Wrapper.getiImage : Integer;
begin
result := LV_ITEM(GetRecordPtr^).iImage;
end;
procedure __LV_ITEM__Wrapper.setlParam(const val : lParam);
begin
LV_ITEM(GetRecordPtr^).lParam := val;
end;
function __LV_ITEM__Wrapper.getlParam : lParam;
begin
result := LV_ITEM(GetRecordPtr^).lParam;
end;
procedure __LV_ITEM__Wrapper.setiIndent(const val : Integer);
begin
LV_ITEM(GetRecordPtr^).iIndent := val;
end;
function __LV_ITEM__Wrapper.getiIndent : Integer;
begin
result := LV_ITEM(GetRecordPtr^).iIndent;
end;
function __LV_ITEMA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __LV_ITEMA__Wrapper.setMask(const val : UINT);
begin
LV_ITEMA(GetRecordPtr^).Mask := val;
end;
function __LV_ITEMA__Wrapper.getMask : UINT;
begin
result := LV_ITEMA(GetRecordPtr^).Mask;
end;
procedure __LV_ITEMA__Wrapper.setiItem(const val : Integer);
begin
LV_ITEMA(GetRecordPtr^).iItem := val;
end;
function __LV_ITEMA__Wrapper.getiItem : Integer;
begin
result := LV_ITEMA(GetRecordPtr^).iItem;
end;
procedure __LV_ITEMA__Wrapper.setiSubItem(const val : Integer);
begin
LV_ITEMA(GetRecordPtr^).iSubItem := val;
end;
function __LV_ITEMA__Wrapper.getiSubItem : Integer;
begin
result := LV_ITEMA(GetRecordPtr^).iSubItem;
end;
procedure __LV_ITEMA__Wrapper.setstate(const val : UINT);
begin
LV_ITEMA(GetRecordPtr^).state := val;
end;
function __LV_ITEMA__Wrapper.getstate : UINT;
begin
result := LV_ITEMA(GetRecordPtr^).state;
end;
procedure __LV_ITEMA__Wrapper.setstateMask(const val : UINT);
begin
LV_ITEMA(GetRecordPtr^).stateMask := val;
end;
function __LV_ITEMA__Wrapper.getstateMask : UINT;
begin
result := LV_ITEMA(GetRecordPtr^).stateMask;
end;
procedure __LV_ITEMA__Wrapper.setcchTextMax(const val : Integer);
begin
LV_ITEMA(GetRecordPtr^).cchTextMax := val;
end;
function __LV_ITEMA__Wrapper.getcchTextMax : Integer;
begin
result := LV_ITEMA(GetRecordPtr^).cchTextMax;
end;
procedure __LV_ITEMA__Wrapper.setiImage(const val : Integer);
begin
LV_ITEMA(GetRecordPtr^).iImage := val;
end;
function __LV_ITEMA__Wrapper.getiImage : Integer;
begin
result := LV_ITEMA(GetRecordPtr^).iImage;
end;
procedure __LV_ITEMA__Wrapper.setlParam(const val : lParam);
begin
LV_ITEMA(GetRecordPtr^).lParam := val;
end;
function __LV_ITEMA__Wrapper.getlParam : lParam;
begin
result := LV_ITEMA(GetRecordPtr^).lParam;
end;
procedure __LV_ITEMA__Wrapper.setiIndent(const val : Integer);
begin
LV_ITEMA(GetRecordPtr^).iIndent := val;
end;
function __LV_ITEMA__Wrapper.getiIndent : Integer;
begin
result := LV_ITEMA(GetRecordPtr^).iIndent;
end;
function __LV_ITEMW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __LV_ITEMW__Wrapper.setMask(const val : UINT);
begin
LV_ITEMW(GetRecordPtr^).Mask := val;
end;
function __LV_ITEMW__Wrapper.getMask : UINT;
begin
result := LV_ITEMW(GetRecordPtr^).Mask;
end;
procedure __LV_ITEMW__Wrapper.setiItem(const val : Integer);
begin
LV_ITEMW(GetRecordPtr^).iItem := val;
end;
function __LV_ITEMW__Wrapper.getiItem : Integer;
begin
result := LV_ITEMW(GetRecordPtr^).iItem;
end;
procedure __LV_ITEMW__Wrapper.setiSubItem(const val : Integer);
begin
LV_ITEMW(GetRecordPtr^).iSubItem := val;
end;
function __LV_ITEMW__Wrapper.getiSubItem : Integer;
begin
result := LV_ITEMW(GetRecordPtr^).iSubItem;
end;
procedure __LV_ITEMW__Wrapper.setstate(const val : UINT);
begin
LV_ITEMW(GetRecordPtr^).state := val;
end;
function __LV_ITEMW__Wrapper.getstate : UINT;
begin
result := LV_ITEMW(GetRecordPtr^).state;
end;
procedure __LV_ITEMW__Wrapper.setstateMask(const val : UINT);
begin
LV_ITEMW(GetRecordPtr^).stateMask := val;
end;
function __LV_ITEMW__Wrapper.getstateMask : UINT;
begin
result := LV_ITEMW(GetRecordPtr^).stateMask;
end;
procedure __LV_ITEMW__Wrapper.setcchTextMax(const val : Integer);
begin
LV_ITEMW(GetRecordPtr^).cchTextMax := val;
end;
function __LV_ITEMW__Wrapper.getcchTextMax : Integer;
begin
result := LV_ITEMW(GetRecordPtr^).cchTextMax;
end;
procedure __LV_ITEMW__Wrapper.setiImage(const val : Integer);
begin
LV_ITEMW(GetRecordPtr^).iImage := val;
end;
function __LV_ITEMW__Wrapper.getiImage : Integer;
begin
result := LV_ITEMW(GetRecordPtr^).iImage;
end;
procedure __LV_ITEMW__Wrapper.setlParam(const val : lParam);
begin
LV_ITEMW(GetRecordPtr^).lParam := val;
end;
function __LV_ITEMW__Wrapper.getlParam : lParam;
begin
result := LV_ITEMW(GetRecordPtr^).lParam;
end;
procedure __LV_ITEMW__Wrapper.setiIndent(const val : Integer);
begin
LV_ITEMW(GetRecordPtr^).iIndent := val;
end;
function __LV_ITEMW__Wrapper.getiIndent : Integer;
begin
result := LV_ITEMW(GetRecordPtr^).iIndent;
end;
function __LV_KEYDOWN__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __LV_KEYDOWN__Wrapper.setwVKey(const val : Word);
begin
LV_KEYDOWN(GetRecordPtr^).wVKey := val;
end;
function __LV_KEYDOWN__Wrapper.getwVKey : Word;
begin
result := LV_KEYDOWN(GetRecordPtr^).wVKey;
end;
procedure __LV_KEYDOWN__Wrapper.setFlags(const val : UINT);
begin
LV_KEYDOWN(GetRecordPtr^).Flags := val;
end;
function __LV_KEYDOWN__Wrapper.getFlags : UINT;
begin
result := LV_KEYDOWN(GetRecordPtr^).Flags;
end;
function __MCHITTESTINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCHITTESTINFO__Wrapper.setcbSize(const val : UINT);
begin
MCHITTESTINFO(GetRecordPtr^).cbSize := val;
end;
function __MCHITTESTINFO__Wrapper.getcbSize : UINT;
begin
result := MCHITTESTINFO(GetRecordPtr^).cbSize;
end;
procedure __MCHITTESTINFO__Wrapper.setuHit(const val : UINT);
begin
MCHITTESTINFO(GetRecordPtr^).uHit := val;
end;
function __MCHITTESTINFO__Wrapper.getuHit : UINT;
begin
result := MCHITTESTINFO(GetRecordPtr^).uHit;
end;
function __NM_LISTVIEW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __NM_LISTVIEW__Wrapper.setiItem(const val : Integer);
begin
NM_LISTVIEW(GetRecordPtr^).iItem := val;
end;
function __NM_LISTVIEW__Wrapper.getiItem : Integer;
begin
result := NM_LISTVIEW(GetRecordPtr^).iItem;
end;
procedure __NM_LISTVIEW__Wrapper.setiSubItem(const val : Integer);
begin
NM_LISTVIEW(GetRecordPtr^).iSubItem := val;
end;
function __NM_LISTVIEW__Wrapper.getiSubItem : Integer;
begin
result := NM_LISTVIEW(GetRecordPtr^).iSubItem;
end;
procedure __NM_LISTVIEW__Wrapper.setuNewState(const val : UINT);
begin
NM_LISTVIEW(GetRecordPtr^).uNewState := val;
end;
function __NM_LISTVIEW__Wrapper.getuNewState : UINT;
begin
result := NM_LISTVIEW(GetRecordPtr^).uNewState;
end;
procedure __NM_LISTVIEW__Wrapper.setuOldState(const val : UINT);
begin
NM_LISTVIEW(GetRecordPtr^).uOldState := val;
end;
function __NM_LISTVIEW__Wrapper.getuOldState : UINT;
begin
result := NM_LISTVIEW(GetRecordPtr^).uOldState;
end;
procedure __NM_LISTVIEW__Wrapper.setuChanged(const val : UINT);
begin
NM_LISTVIEW(GetRecordPtr^).uChanged := val;
end;
function __NM_LISTVIEW__Wrapper.getuChanged : UINT;
begin
result := NM_LISTVIEW(GetRecordPtr^).uChanged;
end;
procedure __NM_LISTVIEW__Wrapper.setlParam(const val : lParam);
begin
NM_LISTVIEW(GetRecordPtr^).lParam := val;
end;
function __NM_LISTVIEW__Wrapper.getlParam : lParam;
begin
result := NM_LISTVIEW(GetRecordPtr^).lParam;
end;
function __NM_TREEVIEW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __NM_TREEVIEW__Wrapper.setaction(const val : UINT);
begin
NM_TREEVIEW(GetRecordPtr^).action := val;
end;
function __NM_TREEVIEW__Wrapper.getaction : UINT;
begin
result := NM_TREEVIEW(GetRecordPtr^).action;
end;
function __NM_TREEVIEWA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __NM_TREEVIEWA__Wrapper.setaction(const val : UINT);
begin
NM_TREEVIEWA(GetRecordPtr^).action := val;
end;
function __NM_TREEVIEWA__Wrapper.getaction : UINT;
begin
result := NM_TREEVIEWA(GetRecordPtr^).action;
end;
function __NM_TREEVIEWW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __NM_TREEVIEWW__Wrapper.setaction(const val : UINT);
begin
NM_TREEVIEWW(GetRecordPtr^).action := val;
end;
function __NM_TREEVIEWW__Wrapper.getaction : UINT;
begin
result := NM_TREEVIEWW(GetRecordPtr^).action;
end;
function __NM_UPDOWN__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __NM_UPDOWN__Wrapper.setiPos(const val : Integer);
begin
NM_UPDOWN(GetRecordPtr^).iPos := val;
end;
function __NM_UPDOWN__Wrapper.getiPos : Integer;
begin
result := NM_UPDOWN(GetRecordPtr^).iPos;
end;
procedure __NM_UPDOWN__Wrapper.setiDelta(const val : Integer);
begin
NM_UPDOWN(GetRecordPtr^).iDelta := val;
end;
function __NM_UPDOWN__Wrapper.getiDelta : Integer;
begin
result := NM_UPDOWN(GetRecordPtr^).iDelta;
end;
function __NMCBEDRAGBEGIN__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __NMCBEDRAGBEGIN__Wrapper.setiItemid(const val : Integer);
begin
NMCBEDRAGBEGIN(GetRecordPtr^).iItemid := val;
end;
function __NMCBEDRAGBEGIN__Wrapper.getiItemid : Integer;
begin
result := NMCBEDRAGBEGIN(GetRecordPtr^).iItemid;
end;
function __NMCBEDRAGBEGINA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __NMCBEDRAGBEGINA__Wrapper.setiItemid(const val : Integer);
begin
NMCBEDRAGBEGINA(GetRecordPtr^).iItemid := val;
end;
function __NMCBEDRAGBEGINA__Wrapper.getiItemid : Integer;
begin
result := NMCBEDRAGBEGINA(GetRecordPtr^).iItemid;
end;
function __NMCBEDRAGBEGINW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __NMCBEDRAGBEGINW__Wrapper.setiItemid(const val : Integer);
begin
NMCBEDRAGBEGINW(GetRecordPtr^).iItemid := val;
end;
function __NMCBEDRAGBEGINW__Wrapper.getiItemid : Integer;
begin
result := NMCBEDRAGBEGINW(GetRecordPtr^).iItemid;
end;
function __NMCBEENDEDIT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __NMCBEENDEDIT__Wrapper.setfChanged(const val : BOOL);
begin
NMCBEENDEDIT(GetRecordPtr^).fChanged := val;
end;
function __NMCBEENDEDIT__Wrapper.getfChanged : BOOL;
begin
result := NMCBEENDEDIT(GetRecordPtr^).fChanged;
end;
procedure __NMCBEENDEDIT__Wrapper.setiNewSelection(const val : Integer);
begin
NMCBEENDEDIT(GetRecordPtr^).iNewSelection := val;
end;
function __NMCBEENDEDIT__Wrapper.getiNewSelection : Integer;
begin
result := NMCBEENDEDIT(GetRecordPtr^).iNewSelection;
end;
procedure __NMCBEENDEDIT__Wrapper.setiWhy(const val : Integer);
begin
NMCBEENDEDIT(GetRecordPtr^).iWhy := val;
end;
function __NMCBEENDEDIT__Wrapper.getiWhy : Integer;
begin
result := NMCBEENDEDIT(GetRecordPtr^).iWhy;
end;
function __NMCBEENDEDITA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __NMCBEENDEDITA__Wrapper.setfChanged(const val : BOOL);
begin
NMCBEENDEDITA(GetRecordPtr^).fChanged := val;
end;
function __NMCBEENDEDITA__Wrapper.getfChanged : BOOL;
begin
result := NMCBEENDEDITA(GetRecordPtr^).fChanged;
end;
procedure __NMCBEENDEDITA__Wrapper.setiNewSelection(const val : Integer);
begin
NMCBEENDEDITA(GetRecordPtr^).iNewSelection := val;
end;
function __NMCBEENDEDITA__Wrapper.getiNewSelection : Integer;
begin
result := NMCBEENDEDITA(GetRecordPtr^).iNewSelection;
end;
procedure __NMCBEENDEDITA__Wrapper.setiWhy(const val : Integer);
begin
NMCBEENDEDITA(GetRecordPtr^).iWhy := val;
end;
function __NMCBEENDEDITA__Wrapper.getiWhy : Integer;
begin
result := NMCBEENDEDITA(GetRecordPtr^).iWhy;
end;
function __NMCBEENDEDITW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __NMCBEENDEDITW__Wrapper.setfChanged(const val : BOOL);
begin
NMCBEENDEDITW(GetRecordPtr^).fChanged := val;
end;
function __NMCBEENDEDITW__Wrapper.getfChanged : BOOL;
begin
result := NMCBEENDEDITW(GetRecordPtr^).fChanged;
end;
procedure __NMCBEENDEDITW__Wrapper.setiNewSelection(const val : Integer);
begin
NMCBEENDEDITW(GetRecordPtr^).iNewSelection := val;
end;
function __NMCBEENDEDITW__Wrapper.getiNewSelection : Integer;
begin
result := NMCBEENDEDITW(GetRecordPtr^).iNewSelection;
end;
procedure __NMCBEENDEDITW__Wrapper.setiWhy(const val : Integer);
begin
NMCBEENDEDITW(GetRecordPtr^).iWhy := val;
end;
function __NMCBEENDEDITW__Wrapper.getiWhy : Integer;
begin
result := NMCBEENDEDITW(GetRecordPtr^).iWhy;
end;
function __NMCOMBOBOXEX__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __NMCOMBOBOXEXA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __NMCOMBOBOXEXW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __NMPGCALCSIZE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __NMPGCALCSIZE__Wrapper.setdwFlag(const val : DWORD);
begin
NMPGCALCSIZE(GetRecordPtr^).dwFlag := val;
end;
function __NMPGCALCSIZE__Wrapper.getdwFlag : DWORD;
begin
result := NMPGCALCSIZE(GetRecordPtr^).dwFlag;
end;
procedure __NMPGCALCSIZE__Wrapper.setiWidth(const val : Integer);
begin
NMPGCALCSIZE(GetRecordPtr^).iWidth := val;
end;
function __NMPGCALCSIZE__Wrapper.getiWidth : Integer;
begin
result := NMPGCALCSIZE(GetRecordPtr^).iWidth;
end;
procedure __NMPGCALCSIZE__Wrapper.setiHeight(const val : Integer);
begin
NMPGCALCSIZE(GetRecordPtr^).iHeight := val;
end;
function __NMPGCALCSIZE__Wrapper.getiHeight : Integer;
begin
result := NMPGCALCSIZE(GetRecordPtr^).iHeight;
end;
function __NMPGSCROLL__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __NMPGSCROLL__Wrapper.setfwKeys(const val : Word);
begin
NMPGSCROLL(GetRecordPtr^).fwKeys := val;
end;
function __NMPGSCROLL__Wrapper.getfwKeys : Word;
begin
result := NMPGSCROLL(GetRecordPtr^).fwKeys;
end;
procedure __NMPGSCROLL__Wrapper.setiDir(const val : Integer);
begin
NMPGSCROLL(GetRecordPtr^).iDir := val;
end;
function __NMPGSCROLL__Wrapper.getiDir : Integer;
begin
result := NMPGSCROLL(GetRecordPtr^).iDir;
end;
procedure __NMPGSCROLL__Wrapper.setiXpos(const val : Integer);
begin
NMPGSCROLL(GetRecordPtr^).iXpos := val;
end;
function __NMPGSCROLL__Wrapper.getiXpos : Integer;
begin
result := NMPGSCROLL(GetRecordPtr^).iXpos;
end;
procedure __NMPGSCROLL__Wrapper.setiYpos(const val : Integer);
begin
NMPGSCROLL(GetRecordPtr^).iYpos := val;
end;
function __NMPGSCROLL__Wrapper.getiYpos : Integer;
begin
result := NMPGSCROLL(GetRecordPtr^).iYpos;
end;
procedure __NMPGSCROLL__Wrapper.setiScroll(const val : Integer);
begin
NMPGSCROLL(GetRecordPtr^).iScroll := val;
end;
function __NMPGSCROLL__Wrapper.getiScroll : Integer;
begin
result := NMPGSCROLL(GetRecordPtr^).iScroll;
end;
function __NMSELECT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __NMTBDISPINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __NMTBDISPINFO__Wrapper.setdwMask(const val : DWORD);
begin
NMTBDISPINFO(GetRecordPtr^).dwMask := val;
end;
function __NMTBDISPINFO__Wrapper.getdwMask : DWORD;
begin
result := NMTBDISPINFO(GetRecordPtr^).dwMask;
end;
procedure __NMTBDISPINFO__Wrapper.setidCommand(const val : Integer);
begin
NMTBDISPINFO(GetRecordPtr^).idCommand := val;
end;
function __NMTBDISPINFO__Wrapper.getidCommand : Integer;
begin
result := NMTBDISPINFO(GetRecordPtr^).idCommand;
end;
procedure __NMTBDISPINFO__Wrapper.setlParam(const val : DWORD);
begin
NMTBDISPINFO(GetRecordPtr^).lParam := val;
end;
function __NMTBDISPINFO__Wrapper.getlParam : DWORD;
begin
result := NMTBDISPINFO(GetRecordPtr^).lParam;
end;
procedure __NMTBDISPINFO__Wrapper.setiImage(const val : Integer);
begin
NMTBDISPINFO(GetRecordPtr^).iImage := val;
end;
function __NMTBDISPINFO__Wrapper.getiImage : Integer;
begin
result := NMTBDISPINFO(GetRecordPtr^).iImage;
end;
procedure __NMTBDISPINFO__Wrapper.setcchText(const val : Integer);
begin
NMTBDISPINFO(GetRecordPtr^).cchText := val;
end;
function __NMTBDISPINFO__Wrapper.getcchText : Integer;
begin
result := NMTBDISPINFO(GetRecordPtr^).cchText;
end;
function __NMTBDISPINFOA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __NMTBDISPINFOA__Wrapper.setdwMask(const val : DWORD);
begin
NMTBDISPINFOA(GetRecordPtr^).dwMask := val;
end;
function __NMTBDISPINFOA__Wrapper.getdwMask : DWORD;
begin
result := NMTBDISPINFOA(GetRecordPtr^).dwMask;
end;
procedure __NMTBDISPINFOA__Wrapper.setidCommand(const val : Integer);
begin
NMTBDISPINFOA(GetRecordPtr^).idCommand := val;
end;
function __NMTBDISPINFOA__Wrapper.getidCommand : Integer;
begin
result := NMTBDISPINFOA(GetRecordPtr^).idCommand;
end;
procedure __NMTBDISPINFOA__Wrapper.setlParam(const val : DWORD);
begin
NMTBDISPINFOA(GetRecordPtr^).lParam := val;
end;
function __NMTBDISPINFOA__Wrapper.getlParam : DWORD;
begin
result := NMTBDISPINFOA(GetRecordPtr^).lParam;
end;
procedure __NMTBDISPINFOA__Wrapper.setiImage(const val : Integer);
begin
NMTBDISPINFOA(GetRecordPtr^).iImage := val;
end;
function __NMTBDISPINFOA__Wrapper.getiImage : Integer;
begin
result := NMTBDISPINFOA(GetRecordPtr^).iImage;
end;
procedure __NMTBDISPINFOA__Wrapper.setcchText(const val : Integer);
begin
NMTBDISPINFOA(GetRecordPtr^).cchText := val;
end;
function __NMTBDISPINFOA__Wrapper.getcchText : Integer;
begin
result := NMTBDISPINFOA(GetRecordPtr^).cchText;
end;
function __NMTBDISPINFOW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __NMTBDISPINFOW__Wrapper.setdwMask(const val : DWORD);
begin
NMTBDISPINFOW(GetRecordPtr^).dwMask := val;
end;
function __NMTBDISPINFOW__Wrapper.getdwMask : DWORD;
begin
result := NMTBDISPINFOW(GetRecordPtr^).dwMask;
end;
procedure __NMTBDISPINFOW__Wrapper.setidCommand(const val : Integer);
begin
NMTBDISPINFOW(GetRecordPtr^).idCommand := val;
end;
function __NMTBDISPINFOW__Wrapper.getidCommand : Integer;
begin
result := NMTBDISPINFOW(GetRecordPtr^).idCommand;
end;
procedure __NMTBDISPINFOW__Wrapper.setlParam(const val : DWORD);
begin
NMTBDISPINFOW(GetRecordPtr^).lParam := val;
end;
function __NMTBDISPINFOW__Wrapper.getlParam : DWORD;
begin
result := NMTBDISPINFOW(GetRecordPtr^).lParam;
end;
procedure __NMTBDISPINFOW__Wrapper.setiImage(const val : Integer);
begin
NMTBDISPINFOW(GetRecordPtr^).iImage := val;
end;
function __NMTBDISPINFOW__Wrapper.getiImage : Integer;
begin
result := NMTBDISPINFOW(GetRecordPtr^).iImage;
end;
procedure __NMTBDISPINFOW__Wrapper.setcchText(const val : Integer);
begin
NMTBDISPINFOW(GetRecordPtr^).cchText := val;
end;
function __NMTBDISPINFOW__Wrapper.getcchText : Integer;
begin
result := NMTBDISPINFOW(GetRecordPtr^).cchText;
end;
function __PBRANGE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __PBRANGE__Wrapper.setiLow(const val : Integer);
begin
PBRANGE(GetRecordPtr^).iLow := val;
end;
function __PBRANGE__Wrapper.getiLow : Integer;
begin
result := PBRANGE(GetRecordPtr^).iLow;
end;
procedure __PBRANGE__Wrapper.setiHigh(const val : Integer);
begin
PBRANGE(GetRecordPtr^).iHigh := val;
end;
function __PBRANGE__Wrapper.getiHigh : Integer;
begin
result := PBRANGE(GetRecordPtr^).iHigh;
end;
function __PROPSHEETPAGE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __PROPSHEETPAGE__Wrapper.setdwSize(const val : Longint);
begin
PROPSHEETPAGE(GetRecordPtr^).dwSize := val;
end;
function __PROPSHEETPAGE__Wrapper.getdwSize : Longint;
begin
result := PROPSHEETPAGE(GetRecordPtr^).dwSize;
end;
procedure __PROPSHEETPAGE__Wrapper.setdwFlags(const val : Longint);
begin
PROPSHEETPAGE(GetRecordPtr^).dwFlags := val;
end;
function __PROPSHEETPAGE__Wrapper.getdwFlags : Longint;
begin
result := PROPSHEETPAGE(GetRecordPtr^).dwFlags;
end;
procedure __PROPSHEETPAGE__Wrapper.sethInstance(const val : THandle);
begin
PROPSHEETPAGE(GetRecordPtr^).hInstance := val;
end;
function __PROPSHEETPAGE__Wrapper.gethInstance : THandle;
begin
result := PROPSHEETPAGE(GetRecordPtr^).hInstance;
end;
procedure __PROPSHEETPAGE__Wrapper.sethIcon(const val : THandle);
begin
PROPSHEETPAGE(GetRecordPtr^).hIcon := val;
end;
function __PROPSHEETPAGE__Wrapper.gethIcon : THandle;
begin
result := PROPSHEETPAGE(GetRecordPtr^).hIcon;
end;
procedure __PROPSHEETPAGE__Wrapper.setlParam(const val : Longint);
begin
PROPSHEETPAGE(GetRecordPtr^).lParam := val;
end;
function __PROPSHEETPAGE__Wrapper.getlParam : Longint;
begin
result := PROPSHEETPAGE(GetRecordPtr^).lParam;
end;
function __PROPSHEETPAGEA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __PROPSHEETPAGEA__Wrapper.setdwSize(const val : Longint);
begin
PROPSHEETPAGEA(GetRecordPtr^).dwSize := val;
end;
function __PROPSHEETPAGEA__Wrapper.getdwSize : Longint;
begin
result := PROPSHEETPAGEA(GetRecordPtr^).dwSize;
end;
procedure __PROPSHEETPAGEA__Wrapper.setdwFlags(const val : Longint);
begin
PROPSHEETPAGEA(GetRecordPtr^).dwFlags := val;
end;
function __PROPSHEETPAGEA__Wrapper.getdwFlags : Longint;
begin
result := PROPSHEETPAGEA(GetRecordPtr^).dwFlags;
end;
procedure __PROPSHEETPAGEA__Wrapper.sethInstance(const val : THandle);
begin
PROPSHEETPAGEA(GetRecordPtr^).hInstance := val;
end;
function __PROPSHEETPAGEA__Wrapper.gethInstance : THandle;
begin
result := PROPSHEETPAGEA(GetRecordPtr^).hInstance;
end;
procedure __PROPSHEETPAGEA__Wrapper.sethIcon(const val : THandle);
begin
PROPSHEETPAGEA(GetRecordPtr^).hIcon := val;
end;
function __PROPSHEETPAGEA__Wrapper.gethIcon : THandle;
begin
result := PROPSHEETPAGEA(GetRecordPtr^).hIcon;
end;
procedure __PROPSHEETPAGEA__Wrapper.setlParam(const val : Longint);
begin
PROPSHEETPAGEA(GetRecordPtr^).lParam := val;
end;
function __PROPSHEETPAGEA__Wrapper.getlParam : Longint;
begin
result := PROPSHEETPAGEA(GetRecordPtr^).lParam;
end;
function __PROPSHEETPAGEW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __PROPSHEETPAGEW__Wrapper.setdwSize(const val : Longint);
begin
PROPSHEETPAGEW(GetRecordPtr^).dwSize := val;
end;
function __PROPSHEETPAGEW__Wrapper.getdwSize : Longint;
begin
result := PROPSHEETPAGEW(GetRecordPtr^).dwSize;
end;
procedure __PROPSHEETPAGEW__Wrapper.setdwFlags(const val : Longint);
begin
PROPSHEETPAGEW(GetRecordPtr^).dwFlags := val;
end;
function __PROPSHEETPAGEW__Wrapper.getdwFlags : Longint;
begin
result := PROPSHEETPAGEW(GetRecordPtr^).dwFlags;
end;
procedure __PROPSHEETPAGEW__Wrapper.sethInstance(const val : THandle);
begin
PROPSHEETPAGEW(GetRecordPtr^).hInstance := val;
end;
function __PROPSHEETPAGEW__Wrapper.gethInstance : THandle;
begin
result := PROPSHEETPAGEW(GetRecordPtr^).hInstance;
end;
procedure __PROPSHEETPAGEW__Wrapper.sethIcon(const val : THandle);
begin
PROPSHEETPAGEW(GetRecordPtr^).hIcon := val;
end;
function __PROPSHEETPAGEW__Wrapper.gethIcon : THandle;
begin
result := PROPSHEETPAGEW(GetRecordPtr^).hIcon;
end;
procedure __PROPSHEETPAGEW__Wrapper.setlParam(const val : Longint);
begin
PROPSHEETPAGEW(GetRecordPtr^).lParam := val;
end;
function __PROPSHEETPAGEW__Wrapper.getlParam : Longint;
begin
result := PROPSHEETPAGEW(GetRecordPtr^).lParam;
end;
function __tagCOLORSCHEME__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagCOLORSCHEME__Wrapper.setdwSize(const val : DWORD);
begin
tagCOLORSCHEME(GetRecordPtr^).dwSize := val;
end;
function __tagCOLORSCHEME__Wrapper.getdwSize : DWORD;
begin
result := tagCOLORSCHEME(GetRecordPtr^).dwSize;
end;
procedure __tagCOLORSCHEME__Wrapper.setclrBtnHighlight(const val : COLORREF);
begin
tagCOLORSCHEME(GetRecordPtr^).clrBtnHighlight := val;
end;
function __tagCOLORSCHEME__Wrapper.getclrBtnHighlight : COLORREF;
begin
result := tagCOLORSCHEME(GetRecordPtr^).clrBtnHighlight;
end;
procedure __tagCOLORSCHEME__Wrapper.setclrBtnShadow(const val : COLORREF);
begin
tagCOLORSCHEME(GetRecordPtr^).clrBtnShadow := val;
end;
function __tagCOLORSCHEME__Wrapper.getclrBtnShadow : COLORREF;
begin
result := tagCOLORSCHEME(GetRecordPtr^).clrBtnShadow;
end;
function __tagCOMBOBOXEXITEM__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagCOMBOBOXEXITEM__Wrapper.setMask(const val : UINT);
begin
tagCOMBOBOXEXITEM(GetRecordPtr^).Mask := val;
end;
function __tagCOMBOBOXEXITEM__Wrapper.getMask : UINT;
begin
result := tagCOMBOBOXEXITEM(GetRecordPtr^).Mask;
end;
procedure __tagCOMBOBOXEXITEM__Wrapper.setiItem(const val : Integer);
begin
tagCOMBOBOXEXITEM(GetRecordPtr^).iItem := val;
end;
function __tagCOMBOBOXEXITEM__Wrapper.getiItem : Integer;
begin
result := tagCOMBOBOXEXITEM(GetRecordPtr^).iItem;
end;
procedure __tagCOMBOBOXEXITEM__Wrapper.setcchTextMax(const val : Integer);
begin
tagCOMBOBOXEXITEM(GetRecordPtr^).cchTextMax := val;
end;
function __tagCOMBOBOXEXITEM__Wrapper.getcchTextMax : Integer;
begin
result := tagCOMBOBOXEXITEM(GetRecordPtr^).cchTextMax;
end;
procedure __tagCOMBOBOXEXITEM__Wrapper.setiImage(const val : Integer);
begin
tagCOMBOBOXEXITEM(GetRecordPtr^).iImage := val;
end;
function __tagCOMBOBOXEXITEM__Wrapper.getiImage : Integer;
begin
result := tagCOMBOBOXEXITEM(GetRecordPtr^).iImage;
end;
procedure __tagCOMBOBOXEXITEM__Wrapper.setiSelectedImage(const val : Integer);
begin
tagCOMBOBOXEXITEM(GetRecordPtr^).iSelectedImage := val;
end;
function __tagCOMBOBOXEXITEM__Wrapper.getiSelectedImage : Integer;
begin
result := tagCOMBOBOXEXITEM(GetRecordPtr^).iSelectedImage;
end;
procedure __tagCOMBOBOXEXITEM__Wrapper.setiOverlay(const val : Integer);
begin
tagCOMBOBOXEXITEM(GetRecordPtr^).iOverlay := val;
end;
function __tagCOMBOBOXEXITEM__Wrapper.getiOverlay : Integer;
begin
result := tagCOMBOBOXEXITEM(GetRecordPtr^).iOverlay;
end;
procedure __tagCOMBOBOXEXITEM__Wrapper.setiIndent(const val : Integer);
begin
tagCOMBOBOXEXITEM(GetRecordPtr^).iIndent := val;
end;
function __tagCOMBOBOXEXITEM__Wrapper.getiIndent : Integer;
begin
result := tagCOMBOBOXEXITEM(GetRecordPtr^).iIndent;
end;
procedure __tagCOMBOBOXEXITEM__Wrapper.setlParam(const val : lParam);
begin
tagCOMBOBOXEXITEM(GetRecordPtr^).lParam := val;
end;
function __tagCOMBOBOXEXITEM__Wrapper.getlParam : lParam;
begin
result := tagCOMBOBOXEXITEM(GetRecordPtr^).lParam;
end;
function __tagCOMBOBOXEXITEMA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagCOMBOBOXEXITEMA__Wrapper.setMask(const val : UINT);
begin
tagCOMBOBOXEXITEMA(GetRecordPtr^).Mask := val;
end;
function __tagCOMBOBOXEXITEMA__Wrapper.getMask : UINT;
begin
result := tagCOMBOBOXEXITEMA(GetRecordPtr^).Mask;
end;
procedure __tagCOMBOBOXEXITEMA__Wrapper.setiItem(const val : Integer);
begin
tagCOMBOBOXEXITEMA(GetRecordPtr^).iItem := val;
end;
function __tagCOMBOBOXEXITEMA__Wrapper.getiItem : Integer;
begin
result := tagCOMBOBOXEXITEMA(GetRecordPtr^).iItem;
end;
procedure __tagCOMBOBOXEXITEMA__Wrapper.setcchTextMax(const val : Integer);
begin
tagCOMBOBOXEXITEMA(GetRecordPtr^).cchTextMax := val;
end;
function __tagCOMBOBOXEXITEMA__Wrapper.getcchTextMax : Integer;
begin
result := tagCOMBOBOXEXITEMA(GetRecordPtr^).cchTextMax;
end;
procedure __tagCOMBOBOXEXITEMA__Wrapper.setiImage(const val : Integer);
begin
tagCOMBOBOXEXITEMA(GetRecordPtr^).iImage := val;
end;
function __tagCOMBOBOXEXITEMA__Wrapper.getiImage : Integer;
begin
result := tagCOMBOBOXEXITEMA(GetRecordPtr^).iImage;
end;
procedure __tagCOMBOBOXEXITEMA__Wrapper.setiSelectedImage(const val : Integer);
begin
tagCOMBOBOXEXITEMA(GetRecordPtr^).iSelectedImage := val;
end;
function __tagCOMBOBOXEXITEMA__Wrapper.getiSelectedImage : Integer;
begin
result := tagCOMBOBOXEXITEMA(GetRecordPtr^).iSelectedImage;
end;
procedure __tagCOMBOBOXEXITEMA__Wrapper.setiOverlay(const val : Integer);
begin
tagCOMBOBOXEXITEMA(GetRecordPtr^).iOverlay := val;
end;
function __tagCOMBOBOXEXITEMA__Wrapper.getiOverlay : Integer;
begin
result := tagCOMBOBOXEXITEMA(GetRecordPtr^).iOverlay;
end;
procedure __tagCOMBOBOXEXITEMA__Wrapper.setiIndent(const val : Integer);
begin
tagCOMBOBOXEXITEMA(GetRecordPtr^).iIndent := val;
end;
function __tagCOMBOBOXEXITEMA__Wrapper.getiIndent : Integer;
begin
result := tagCOMBOBOXEXITEMA(GetRecordPtr^).iIndent;
end;
procedure __tagCOMBOBOXEXITEMA__Wrapper.setlParam(const val : lParam);
begin
tagCOMBOBOXEXITEMA(GetRecordPtr^).lParam := val;
end;
function __tagCOMBOBOXEXITEMA__Wrapper.getlParam : lParam;
begin
result := tagCOMBOBOXEXITEMA(GetRecordPtr^).lParam;
end;
function __tagCOMBOBOXEXITEMW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagCOMBOBOXEXITEMW__Wrapper.setMask(const val : UINT);
begin
tagCOMBOBOXEXITEMW(GetRecordPtr^).Mask := val;
end;
function __tagCOMBOBOXEXITEMW__Wrapper.getMask : UINT;
begin
result := tagCOMBOBOXEXITEMW(GetRecordPtr^).Mask;
end;
procedure __tagCOMBOBOXEXITEMW__Wrapper.setiItem(const val : Integer);
begin
tagCOMBOBOXEXITEMW(GetRecordPtr^).iItem := val;
end;
function __tagCOMBOBOXEXITEMW__Wrapper.getiItem : Integer;
begin
result := tagCOMBOBOXEXITEMW(GetRecordPtr^).iItem;
end;
procedure __tagCOMBOBOXEXITEMW__Wrapper.setcchTextMax(const val : Integer);
begin
tagCOMBOBOXEXITEMW(GetRecordPtr^).cchTextMax := val;
end;
function __tagCOMBOBOXEXITEMW__Wrapper.getcchTextMax : Integer;
begin
result := tagCOMBOBOXEXITEMW(GetRecordPtr^).cchTextMax;
end;
procedure __tagCOMBOBOXEXITEMW__Wrapper.setiImage(const val : Integer);
begin
tagCOMBOBOXEXITEMW(GetRecordPtr^).iImage := val;
end;
function __tagCOMBOBOXEXITEMW__Wrapper.getiImage : Integer;
begin
result := tagCOMBOBOXEXITEMW(GetRecordPtr^).iImage;
end;
procedure __tagCOMBOBOXEXITEMW__Wrapper.setiSelectedImage(const val : Integer);
begin
tagCOMBOBOXEXITEMW(GetRecordPtr^).iSelectedImage := val;
end;
function __tagCOMBOBOXEXITEMW__Wrapper.getiSelectedImage : Integer;
begin
result := tagCOMBOBOXEXITEMW(GetRecordPtr^).iSelectedImage;
end;
procedure __tagCOMBOBOXEXITEMW__Wrapper.setiOverlay(const val : Integer);
begin
tagCOMBOBOXEXITEMW(GetRecordPtr^).iOverlay := val;
end;
function __tagCOMBOBOXEXITEMW__Wrapper.getiOverlay : Integer;
begin
result := tagCOMBOBOXEXITEMW(GetRecordPtr^).iOverlay;
end;
procedure __tagCOMBOBOXEXITEMW__Wrapper.setiIndent(const val : Integer);
begin
tagCOMBOBOXEXITEMW(GetRecordPtr^).iIndent := val;
end;
function __tagCOMBOBOXEXITEMW__Wrapper.getiIndent : Integer;
begin
result := tagCOMBOBOXEXITEMW(GetRecordPtr^).iIndent;
end;
procedure __tagCOMBOBOXEXITEMW__Wrapper.setlParam(const val : lParam);
begin
tagCOMBOBOXEXITEMW(GetRecordPtr^).lParam := val;
end;
function __tagCOMBOBOXEXITEMW__Wrapper.getlParam : lParam;
begin
result := tagCOMBOBOXEXITEMW(GetRecordPtr^).lParam;
end;
function __tagDRAGLISTINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagDRAGLISTINFO__Wrapper.setuNotification(const val : UINT);
begin
tagDRAGLISTINFO(GetRecordPtr^).uNotification := val;
end;
function __tagDRAGLISTINFO__Wrapper.getuNotification : UINT;
begin
result := tagDRAGLISTINFO(GetRecordPtr^).uNotification;
end;
function __tagINITCOMMONCONTROLSEX__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagINITCOMMONCONTROLSEX__Wrapper.setdwSize(const val : DWORD);
begin
tagINITCOMMONCONTROLSEX(GetRecordPtr^).dwSize := val;
end;
function __tagINITCOMMONCONTROLSEX__Wrapper.getdwSize : DWORD;
begin
result := tagINITCOMMONCONTROLSEX(GetRecordPtr^).dwSize;
end;
procedure __tagINITCOMMONCONTROLSEX__Wrapper.setdwICC(const val : DWORD);
begin
tagINITCOMMONCONTROLSEX(GetRecordPtr^).dwICC := val;
end;
function __tagINITCOMMONCONTROLSEX__Wrapper.getdwICC : DWORD;
begin
result := tagINITCOMMONCONTROLSEX(GetRecordPtr^).dwICC;
end;
function __tagLVBKIMAGE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagLVBKIMAGE__Wrapper.setulFlags(const val : ULONG);
begin
tagLVBKIMAGE(GetRecordPtr^).ulFlags := val;
end;
function __tagLVBKIMAGE__Wrapper.getulFlags : ULONG;
begin
result := tagLVBKIMAGE(GetRecordPtr^).ulFlags;
end;
procedure __tagLVBKIMAGE__Wrapper.setcchImageMax(const val : UINT);
begin
tagLVBKIMAGE(GetRecordPtr^).cchImageMax := val;
end;
function __tagLVBKIMAGE__Wrapper.getcchImageMax : UINT;
begin
result := tagLVBKIMAGE(GetRecordPtr^).cchImageMax;
end;
procedure __tagLVBKIMAGE__Wrapper.setxOffsetPercent(const val : Integer);
begin
tagLVBKIMAGE(GetRecordPtr^).xOffsetPercent := val;
end;
function __tagLVBKIMAGE__Wrapper.getxOffsetPercent : Integer;
begin
result := tagLVBKIMAGE(GetRecordPtr^).xOffsetPercent;
end;
procedure __tagLVBKIMAGE__Wrapper.setyOffsetPercent(const val : Integer);
begin
tagLVBKIMAGE(GetRecordPtr^).yOffsetPercent := val;
end;
function __tagLVBKIMAGE__Wrapper.getyOffsetPercent : Integer;
begin
result := tagLVBKIMAGE(GetRecordPtr^).yOffsetPercent;
end;
function __tagLVBKIMAGEA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagLVBKIMAGEA__Wrapper.setulFlags(const val : ULONG);
begin
tagLVBKIMAGEA(GetRecordPtr^).ulFlags := val;
end;
function __tagLVBKIMAGEA__Wrapper.getulFlags : ULONG;
begin
result := tagLVBKIMAGEA(GetRecordPtr^).ulFlags;
end;
procedure __tagLVBKIMAGEA__Wrapper.setcchImageMax(const val : UINT);
begin
tagLVBKIMAGEA(GetRecordPtr^).cchImageMax := val;
end;
function __tagLVBKIMAGEA__Wrapper.getcchImageMax : UINT;
begin
result := tagLVBKIMAGEA(GetRecordPtr^).cchImageMax;
end;
procedure __tagLVBKIMAGEA__Wrapper.setxOffsetPercent(const val : Integer);
begin
tagLVBKIMAGEA(GetRecordPtr^).xOffsetPercent := val;
end;
function __tagLVBKIMAGEA__Wrapper.getxOffsetPercent : Integer;
begin
result := tagLVBKIMAGEA(GetRecordPtr^).xOffsetPercent;
end;
procedure __tagLVBKIMAGEA__Wrapper.setyOffsetPercent(const val : Integer);
begin
tagLVBKIMAGEA(GetRecordPtr^).yOffsetPercent := val;
end;
function __tagLVBKIMAGEA__Wrapper.getyOffsetPercent : Integer;
begin
result := tagLVBKIMAGEA(GetRecordPtr^).yOffsetPercent;
end;
function __tagLVBKIMAGEW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagLVBKIMAGEW__Wrapper.setulFlags(const val : ULONG);
begin
tagLVBKIMAGEW(GetRecordPtr^).ulFlags := val;
end;
function __tagLVBKIMAGEW__Wrapper.getulFlags : ULONG;
begin
result := tagLVBKIMAGEW(GetRecordPtr^).ulFlags;
end;
procedure __tagLVBKIMAGEW__Wrapper.setcchImageMax(const val : UINT);
begin
tagLVBKIMAGEW(GetRecordPtr^).cchImageMax := val;
end;
function __tagLVBKIMAGEW__Wrapper.getcchImageMax : UINT;
begin
result := tagLVBKIMAGEW(GetRecordPtr^).cchImageMax;
end;
procedure __tagLVBKIMAGEW__Wrapper.setxOffsetPercent(const val : Integer);
begin
tagLVBKIMAGEW(GetRecordPtr^).xOffsetPercent := val;
end;
function __tagLVBKIMAGEW__Wrapper.getxOffsetPercent : Integer;
begin
result := tagLVBKIMAGEW(GetRecordPtr^).xOffsetPercent;
end;
procedure __tagLVBKIMAGEW__Wrapper.setyOffsetPercent(const val : Integer);
begin
tagLVBKIMAGEW(GetRecordPtr^).yOffsetPercent := val;
end;
function __tagLVBKIMAGEW__Wrapper.getyOffsetPercent : Integer;
begin
result := tagLVBKIMAGEW(GetRecordPtr^).yOffsetPercent;
end;
function __tagLVCOLUMN__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagLVCOLUMN__Wrapper.setMask(const val : UINT);
begin
tagLVCOLUMN(GetRecordPtr^).Mask := val;
end;
function __tagLVCOLUMN__Wrapper.getMask : UINT;
begin
result := tagLVCOLUMN(GetRecordPtr^).Mask;
end;
procedure __tagLVCOLUMN__Wrapper.setfmt(const val : Integer);
begin
tagLVCOLUMN(GetRecordPtr^).fmt := val;
end;
function __tagLVCOLUMN__Wrapper.getfmt : Integer;
begin
result := tagLVCOLUMN(GetRecordPtr^).fmt;
end;
procedure __tagLVCOLUMN__Wrapper.setcx(const val : Integer);
begin
tagLVCOLUMN(GetRecordPtr^).cx := val;
end;
function __tagLVCOLUMN__Wrapper.getcx : Integer;
begin
result := tagLVCOLUMN(GetRecordPtr^).cx;
end;
procedure __tagLVCOLUMN__Wrapper.setcchTextMax(const val : Integer);
begin
tagLVCOLUMN(GetRecordPtr^).cchTextMax := val;
end;
function __tagLVCOLUMN__Wrapper.getcchTextMax : Integer;
begin
result := tagLVCOLUMN(GetRecordPtr^).cchTextMax;
end;
procedure __tagLVCOLUMN__Wrapper.setiSubItem(const val : Integer);
begin
tagLVCOLUMN(GetRecordPtr^).iSubItem := val;
end;
function __tagLVCOLUMN__Wrapper.getiSubItem : Integer;
begin
result := tagLVCOLUMN(GetRecordPtr^).iSubItem;
end;
procedure __tagLVCOLUMN__Wrapper.setiImage(const val : Integer);
begin
tagLVCOLUMN(GetRecordPtr^).iImage := val;
end;
function __tagLVCOLUMN__Wrapper.getiImage : Integer;
begin
result := tagLVCOLUMN(GetRecordPtr^).iImage;
end;
procedure __tagLVCOLUMN__Wrapper.setiOrder(const val : Integer);
begin
tagLVCOLUMN(GetRecordPtr^).iOrder := val;
end;
function __tagLVCOLUMN__Wrapper.getiOrder : Integer;
begin
result := tagLVCOLUMN(GetRecordPtr^).iOrder;
end;
function __tagLVCOLUMNA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagLVCOLUMNA__Wrapper.setMask(const val : UINT);
begin
tagLVCOLUMNA(GetRecordPtr^).Mask := val;
end;
function __tagLVCOLUMNA__Wrapper.getMask : UINT;
begin
result := tagLVCOLUMNA(GetRecordPtr^).Mask;
end;
procedure __tagLVCOLUMNA__Wrapper.setfmt(const val : Integer);
begin
tagLVCOLUMNA(GetRecordPtr^).fmt := val;
end;
function __tagLVCOLUMNA__Wrapper.getfmt : Integer;
begin
result := tagLVCOLUMNA(GetRecordPtr^).fmt;
end;
procedure __tagLVCOLUMNA__Wrapper.setcx(const val : Integer);
begin
tagLVCOLUMNA(GetRecordPtr^).cx := val;
end;
function __tagLVCOLUMNA__Wrapper.getcx : Integer;
begin
result := tagLVCOLUMNA(GetRecordPtr^).cx;
end;
procedure __tagLVCOLUMNA__Wrapper.setcchTextMax(const val : Integer);
begin
tagLVCOLUMNA(GetRecordPtr^).cchTextMax := val;
end;
function __tagLVCOLUMNA__Wrapper.getcchTextMax : Integer;
begin
result := tagLVCOLUMNA(GetRecordPtr^).cchTextMax;
end;
procedure __tagLVCOLUMNA__Wrapper.setiSubItem(const val : Integer);
begin
tagLVCOLUMNA(GetRecordPtr^).iSubItem := val;
end;
function __tagLVCOLUMNA__Wrapper.getiSubItem : Integer;
begin
result := tagLVCOLUMNA(GetRecordPtr^).iSubItem;
end;
procedure __tagLVCOLUMNA__Wrapper.setiImage(const val : Integer);
begin
tagLVCOLUMNA(GetRecordPtr^).iImage := val;
end;
function __tagLVCOLUMNA__Wrapper.getiImage : Integer;
begin
result := tagLVCOLUMNA(GetRecordPtr^).iImage;
end;
procedure __tagLVCOLUMNA__Wrapper.setiOrder(const val : Integer);
begin
tagLVCOLUMNA(GetRecordPtr^).iOrder := val;
end;
function __tagLVCOLUMNA__Wrapper.getiOrder : Integer;
begin
result := tagLVCOLUMNA(GetRecordPtr^).iOrder;
end;
function __tagLVCOLUMNW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagLVCOLUMNW__Wrapper.setMask(const val : UINT);
begin
tagLVCOLUMNW(GetRecordPtr^).Mask := val;
end;
function __tagLVCOLUMNW__Wrapper.getMask : UINT;
begin
result := tagLVCOLUMNW(GetRecordPtr^).Mask;
end;
procedure __tagLVCOLUMNW__Wrapper.setfmt(const val : Integer);
begin
tagLVCOLUMNW(GetRecordPtr^).fmt := val;
end;
function __tagLVCOLUMNW__Wrapper.getfmt : Integer;
begin
result := tagLVCOLUMNW(GetRecordPtr^).fmt;
end;
procedure __tagLVCOLUMNW__Wrapper.setcx(const val : Integer);
begin
tagLVCOLUMNW(GetRecordPtr^).cx := val;
end;
function __tagLVCOLUMNW__Wrapper.getcx : Integer;
begin
result := tagLVCOLUMNW(GetRecordPtr^).cx;
end;
procedure __tagLVCOLUMNW__Wrapper.setcchTextMax(const val : Integer);
begin
tagLVCOLUMNW(GetRecordPtr^).cchTextMax := val;
end;
function __tagLVCOLUMNW__Wrapper.getcchTextMax : Integer;
begin
result := tagLVCOLUMNW(GetRecordPtr^).cchTextMax;
end;
procedure __tagLVCOLUMNW__Wrapper.setiSubItem(const val : Integer);
begin
tagLVCOLUMNW(GetRecordPtr^).iSubItem := val;
end;
function __tagLVCOLUMNW__Wrapper.getiSubItem : Integer;
begin
result := tagLVCOLUMNW(GetRecordPtr^).iSubItem;
end;
procedure __tagLVCOLUMNW__Wrapper.setiImage(const val : Integer);
begin
tagLVCOLUMNW(GetRecordPtr^).iImage := val;
end;
function __tagLVCOLUMNW__Wrapper.getiImage : Integer;
begin
result := tagLVCOLUMNW(GetRecordPtr^).iImage;
end;
procedure __tagLVCOLUMNW__Wrapper.setiOrder(const val : Integer);
begin
tagLVCOLUMNW(GetRecordPtr^).iOrder := val;
end;
function __tagLVCOLUMNW__Wrapper.getiOrder : Integer;
begin
result := tagLVCOLUMNW(GetRecordPtr^).iOrder;
end;
function __tagLVDISPINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __tagLVDISPINFOW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __tagLVFINDINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagLVFINDINFO__Wrapper.setFlags(const val : UINT);
begin
tagLVFINDINFO(GetRecordPtr^).Flags := val;
end;
function __tagLVFINDINFO__Wrapper.getFlags : UINT;
begin
result := tagLVFINDINFO(GetRecordPtr^).Flags;
end;
procedure __tagLVFINDINFO__Wrapper.setlParam(const val : lParam);
begin
tagLVFINDINFO(GetRecordPtr^).lParam := val;
end;
function __tagLVFINDINFO__Wrapper.getlParam : lParam;
begin
result := tagLVFINDINFO(GetRecordPtr^).lParam;
end;
procedure __tagLVFINDINFO__Wrapper.setvkDirection(const val : UINT);
begin
tagLVFINDINFO(GetRecordPtr^).vkDirection := val;
end;
function __tagLVFINDINFO__Wrapper.getvkDirection : UINT;
begin
result := tagLVFINDINFO(GetRecordPtr^).vkDirection;
end;
function __tagLVFINDINFOA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagLVFINDINFOA__Wrapper.setFlags(const val : UINT);
begin
tagLVFINDINFOA(GetRecordPtr^).Flags := val;
end;
function __tagLVFINDINFOA__Wrapper.getFlags : UINT;
begin
result := tagLVFINDINFOA(GetRecordPtr^).Flags;
end;
procedure __tagLVFINDINFOA__Wrapper.setlParam(const val : lParam);
begin
tagLVFINDINFOA(GetRecordPtr^).lParam := val;
end;
function __tagLVFINDINFOA__Wrapper.getlParam : lParam;
begin
result := tagLVFINDINFOA(GetRecordPtr^).lParam;
end;
procedure __tagLVFINDINFOA__Wrapper.setvkDirection(const val : UINT);
begin
tagLVFINDINFOA(GetRecordPtr^).vkDirection := val;
end;
function __tagLVFINDINFOA__Wrapper.getvkDirection : UINT;
begin
result := tagLVFINDINFOA(GetRecordPtr^).vkDirection;
end;
function __tagLVFINDINFOW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagLVFINDINFOW__Wrapper.setFlags(const val : UINT);
begin
tagLVFINDINFOW(GetRecordPtr^).Flags := val;
end;
function __tagLVFINDINFOW__Wrapper.getFlags : UINT;
begin
result := tagLVFINDINFOW(GetRecordPtr^).Flags;
end;
procedure __tagLVFINDINFOW__Wrapper.setlParam(const val : lParam);
begin
tagLVFINDINFOW(GetRecordPtr^).lParam := val;
end;
function __tagLVFINDINFOW__Wrapper.getlParam : lParam;
begin
result := tagLVFINDINFOW(GetRecordPtr^).lParam;
end;
procedure __tagLVFINDINFOW__Wrapper.setvkDirection(const val : UINT);
begin
tagLVFINDINFOW(GetRecordPtr^).vkDirection := val;
end;
function __tagLVFINDINFOW__Wrapper.getvkDirection : UINT;
begin
result := tagLVFINDINFOW(GetRecordPtr^).vkDirection;
end;
function __tagLVHITTESTINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagLVHITTESTINFO__Wrapper.setFlags(const val : UINT);
begin
tagLVHITTESTINFO(GetRecordPtr^).Flags := val;
end;
function __tagLVHITTESTINFO__Wrapper.getFlags : UINT;
begin
result := tagLVHITTESTINFO(GetRecordPtr^).Flags;
end;
procedure __tagLVHITTESTINFO__Wrapper.setiItem(const val : Integer);
begin
tagLVHITTESTINFO(GetRecordPtr^).iItem := val;
end;
function __tagLVHITTESTINFO__Wrapper.getiItem : Integer;
begin
result := tagLVHITTESTINFO(GetRecordPtr^).iItem;
end;
procedure __tagLVHITTESTINFO__Wrapper.setiSubItem(const val : Integer);
begin
tagLVHITTESTINFO(GetRecordPtr^).iSubItem := val;
end;
function __tagLVHITTESTINFO__Wrapper.getiSubItem : Integer;
begin
result := tagLVHITTESTINFO(GetRecordPtr^).iSubItem;
end;
function __tagLVITEM__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagLVITEM__Wrapper.setMask(const val : UINT);
begin
tagLVITEM(GetRecordPtr^).Mask := val;
end;
function __tagLVITEM__Wrapper.getMask : UINT;
begin
result := tagLVITEM(GetRecordPtr^).Mask;
end;
procedure __tagLVITEM__Wrapper.setiItem(const val : Integer);
begin
tagLVITEM(GetRecordPtr^).iItem := val;
end;
function __tagLVITEM__Wrapper.getiItem : Integer;
begin
result := tagLVITEM(GetRecordPtr^).iItem;
end;
procedure __tagLVITEM__Wrapper.setiSubItem(const val : Integer);
begin
tagLVITEM(GetRecordPtr^).iSubItem := val;
end;
function __tagLVITEM__Wrapper.getiSubItem : Integer;
begin
result := tagLVITEM(GetRecordPtr^).iSubItem;
end;
procedure __tagLVITEM__Wrapper.setstate(const val : UINT);
begin
tagLVITEM(GetRecordPtr^).state := val;
end;
function __tagLVITEM__Wrapper.getstate : UINT;
begin
result := tagLVITEM(GetRecordPtr^).state;
end;
procedure __tagLVITEM__Wrapper.setstateMask(const val : UINT);
begin
tagLVITEM(GetRecordPtr^).stateMask := val;
end;
function __tagLVITEM__Wrapper.getstateMask : UINT;
begin
result := tagLVITEM(GetRecordPtr^).stateMask;
end;
procedure __tagLVITEM__Wrapper.setcchTextMax(const val : Integer);
begin
tagLVITEM(GetRecordPtr^).cchTextMax := val;
end;
function __tagLVITEM__Wrapper.getcchTextMax : Integer;
begin
result := tagLVITEM(GetRecordPtr^).cchTextMax;
end;
procedure __tagLVITEM__Wrapper.setiImage(const val : Integer);
begin
tagLVITEM(GetRecordPtr^).iImage := val;
end;
function __tagLVITEM__Wrapper.getiImage : Integer;
begin
result := tagLVITEM(GetRecordPtr^).iImage;
end;
procedure __tagLVITEM__Wrapper.setlParam(const val : lParam);
begin
tagLVITEM(GetRecordPtr^).lParam := val;
end;
function __tagLVITEM__Wrapper.getlParam : lParam;
begin
result := tagLVITEM(GetRecordPtr^).lParam;
end;
procedure __tagLVITEM__Wrapper.setiIndent(const val : Integer);
begin
tagLVITEM(GetRecordPtr^).iIndent := val;
end;
function __tagLVITEM__Wrapper.getiIndent : Integer;
begin
result := tagLVITEM(GetRecordPtr^).iIndent;
end;
function __tagLVITEMA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagLVITEMA__Wrapper.setMask(const val : UINT);
begin
tagLVITEMA(GetRecordPtr^).Mask := val;
end;
function __tagLVITEMA__Wrapper.getMask : UINT;
begin
result := tagLVITEMA(GetRecordPtr^).Mask;
end;
procedure __tagLVITEMA__Wrapper.setiItem(const val : Integer);
begin
tagLVITEMA(GetRecordPtr^).iItem := val;
end;
function __tagLVITEMA__Wrapper.getiItem : Integer;
begin
result := tagLVITEMA(GetRecordPtr^).iItem;
end;
procedure __tagLVITEMA__Wrapper.setiSubItem(const val : Integer);
begin
tagLVITEMA(GetRecordPtr^).iSubItem := val;
end;
function __tagLVITEMA__Wrapper.getiSubItem : Integer;
begin
result := tagLVITEMA(GetRecordPtr^).iSubItem;
end;
procedure __tagLVITEMA__Wrapper.setstate(const val : UINT);
begin
tagLVITEMA(GetRecordPtr^).state := val;
end;
function __tagLVITEMA__Wrapper.getstate : UINT;
begin
result := tagLVITEMA(GetRecordPtr^).state;
end;
procedure __tagLVITEMA__Wrapper.setstateMask(const val : UINT);
begin
tagLVITEMA(GetRecordPtr^).stateMask := val;
end;
function __tagLVITEMA__Wrapper.getstateMask : UINT;
begin
result := tagLVITEMA(GetRecordPtr^).stateMask;
end;
procedure __tagLVITEMA__Wrapper.setcchTextMax(const val : Integer);
begin
tagLVITEMA(GetRecordPtr^).cchTextMax := val;
end;
function __tagLVITEMA__Wrapper.getcchTextMax : Integer;
begin
result := tagLVITEMA(GetRecordPtr^).cchTextMax;
end;
procedure __tagLVITEMA__Wrapper.setiImage(const val : Integer);
begin
tagLVITEMA(GetRecordPtr^).iImage := val;
end;
function __tagLVITEMA__Wrapper.getiImage : Integer;
begin
result := tagLVITEMA(GetRecordPtr^).iImage;
end;
procedure __tagLVITEMA__Wrapper.setlParam(const val : lParam);
begin
tagLVITEMA(GetRecordPtr^).lParam := val;
end;
function __tagLVITEMA__Wrapper.getlParam : lParam;
begin
result := tagLVITEMA(GetRecordPtr^).lParam;
end;
procedure __tagLVITEMA__Wrapper.setiIndent(const val : Integer);
begin
tagLVITEMA(GetRecordPtr^).iIndent := val;
end;
function __tagLVITEMA__Wrapper.getiIndent : Integer;
begin
result := tagLVITEMA(GetRecordPtr^).iIndent;
end;
function __tagLVITEMW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagLVITEMW__Wrapper.setMask(const val : UINT);
begin
tagLVITEMW(GetRecordPtr^).Mask := val;
end;
function __tagLVITEMW__Wrapper.getMask : UINT;
begin
result := tagLVITEMW(GetRecordPtr^).Mask;
end;
procedure __tagLVITEMW__Wrapper.setiItem(const val : Integer);
begin
tagLVITEMW(GetRecordPtr^).iItem := val;
end;
function __tagLVITEMW__Wrapper.getiItem : Integer;
begin
result := tagLVITEMW(GetRecordPtr^).iItem;
end;
procedure __tagLVITEMW__Wrapper.setiSubItem(const val : Integer);
begin
tagLVITEMW(GetRecordPtr^).iSubItem := val;
end;
function __tagLVITEMW__Wrapper.getiSubItem : Integer;
begin
result := tagLVITEMW(GetRecordPtr^).iSubItem;
end;
procedure __tagLVITEMW__Wrapper.setstate(const val : UINT);
begin
tagLVITEMW(GetRecordPtr^).state := val;
end;
function __tagLVITEMW__Wrapper.getstate : UINT;
begin
result := tagLVITEMW(GetRecordPtr^).state;
end;
procedure __tagLVITEMW__Wrapper.setstateMask(const val : UINT);
begin
tagLVITEMW(GetRecordPtr^).stateMask := val;
end;
function __tagLVITEMW__Wrapper.getstateMask : UINT;
begin
result := tagLVITEMW(GetRecordPtr^).stateMask;
end;
procedure __tagLVITEMW__Wrapper.setcchTextMax(const val : Integer);
begin
tagLVITEMW(GetRecordPtr^).cchTextMax := val;
end;
function __tagLVITEMW__Wrapper.getcchTextMax : Integer;
begin
result := tagLVITEMW(GetRecordPtr^).cchTextMax;
end;
procedure __tagLVITEMW__Wrapper.setiImage(const val : Integer);
begin
tagLVITEMW(GetRecordPtr^).iImage := val;
end;
function __tagLVITEMW__Wrapper.getiImage : Integer;
begin
result := tagLVITEMW(GetRecordPtr^).iImage;
end;
procedure __tagLVITEMW__Wrapper.setlParam(const val : lParam);
begin
tagLVITEMW(GetRecordPtr^).lParam := val;
end;
function __tagLVITEMW__Wrapper.getlParam : lParam;
begin
result := tagLVITEMW(GetRecordPtr^).lParam;
end;
procedure __tagLVITEMW__Wrapper.setiIndent(const val : Integer);
begin
tagLVITEMW(GetRecordPtr^).iIndent := val;
end;
function __tagLVITEMW__Wrapper.getiIndent : Integer;
begin
result := tagLVITEMW(GetRecordPtr^).iIndent;
end;
function __tagLVKEYDOWN__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagLVKEYDOWN__Wrapper.setwVKey(const val : Word);
begin
tagLVKEYDOWN(GetRecordPtr^).wVKey := val;
end;
function __tagLVKEYDOWN__Wrapper.getwVKey : Word;
begin
result := tagLVKEYDOWN(GetRecordPtr^).wVKey;
end;
procedure __tagLVKEYDOWN__Wrapper.setFlags(const val : UINT);
begin
tagLVKEYDOWN(GetRecordPtr^).Flags := val;
end;
function __tagLVKEYDOWN__Wrapper.getFlags : UINT;
begin
result := tagLVKEYDOWN(GetRecordPtr^).Flags;
end;
function __tagNMCHAR__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMCHAR__Wrapper.setch(const val : UINT);
begin
tagNMCHAR(GetRecordPtr^).ch := val;
end;
function __tagNMCHAR__Wrapper.getch : UINT;
begin
result := tagNMCHAR(GetRecordPtr^).ch;
end;
procedure __tagNMCHAR__Wrapper.setdwItemPrev(const val : DWORD);
begin
tagNMCHAR(GetRecordPtr^).dwItemPrev := val;
end;
function __tagNMCHAR__Wrapper.getdwItemPrev : DWORD;
begin
result := tagNMCHAR(GetRecordPtr^).dwItemPrev;
end;
procedure __tagNMCHAR__Wrapper.setdwItemNext(const val : DWORD);
begin
tagNMCHAR(GetRecordPtr^).dwItemNext := val;
end;
function __tagNMCHAR__Wrapper.getdwItemNext : DWORD;
begin
result := tagNMCHAR(GetRecordPtr^).dwItemNext;
end;
function __tagNMCUSTOMDRAWINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMCUSTOMDRAWINFO__Wrapper.setdwDrawStage(const val : DWORD);
begin
tagNMCUSTOMDRAWINFO(GetRecordPtr^).dwDrawStage := val;
end;
function __tagNMCUSTOMDRAWINFO__Wrapper.getdwDrawStage : DWORD;
begin
result := tagNMCUSTOMDRAWINFO(GetRecordPtr^).dwDrawStage;
end;
procedure __tagNMCUSTOMDRAWINFO__Wrapper.setdwItemSpec(const val : DWORD);
begin
tagNMCUSTOMDRAWINFO(GetRecordPtr^).dwItemSpec := val;
end;
function __tagNMCUSTOMDRAWINFO__Wrapper.getdwItemSpec : DWORD;
begin
result := tagNMCUSTOMDRAWINFO(GetRecordPtr^).dwItemSpec;
end;
procedure __tagNMCUSTOMDRAWINFO__Wrapper.setuItemState(const val : UINT);
begin
tagNMCUSTOMDRAWINFO(GetRecordPtr^).uItemState := val;
end;
function __tagNMCUSTOMDRAWINFO__Wrapper.getuItemState : UINT;
begin
result := tagNMCUSTOMDRAWINFO(GetRecordPtr^).uItemState;
end;
procedure __tagNMCUSTOMDRAWINFO__Wrapper.setlItemlParam(const val : lParam);
begin
tagNMCUSTOMDRAWINFO(GetRecordPtr^).lItemlParam := val;
end;
function __tagNMCUSTOMDRAWINFO__Wrapper.getlItemlParam : lParam;
begin
result := tagNMCUSTOMDRAWINFO(GetRecordPtr^).lItemlParam;
end;
function __tagNMDATETIMECHANGE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMDATETIMECHANGE__Wrapper.setdwFlags(const val : DWORD);
begin
tagNMDATETIMECHANGE(GetRecordPtr^).dwFlags := val;
end;
function __tagNMDATETIMECHANGE__Wrapper.getdwFlags : DWORD;
begin
result := tagNMDATETIMECHANGE(GetRecordPtr^).dwFlags;
end;
function __tagNMDATETIMEFORMAT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __tagNMDATETIMEFORMATA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __tagNMDATETIMEFORMATQUERY__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __tagNMDATETIMEFORMATQUERYA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __tagNMDATETIMEFORMATQUERYW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __tagNMDATETIMEFORMATW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __tagNMDATETIMESTRING__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMDATETIMESTRING__Wrapper.setdwFlags(const val : DWORD);
begin
tagNMDATETIMESTRING(GetRecordPtr^).dwFlags := val;
end;
function __tagNMDATETIMESTRING__Wrapper.getdwFlags : DWORD;
begin
result := tagNMDATETIMESTRING(GetRecordPtr^).dwFlags;
end;
function __tagNMDATETIMESTRINGA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMDATETIMESTRINGA__Wrapper.setdwFlags(const val : DWORD);
begin
tagNMDATETIMESTRINGA(GetRecordPtr^).dwFlags := val;
end;
function __tagNMDATETIMESTRINGA__Wrapper.getdwFlags : DWORD;
begin
result := tagNMDATETIMESTRINGA(GetRecordPtr^).dwFlags;
end;
function __tagNMDATETIMESTRINGW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMDATETIMESTRINGW__Wrapper.setdwFlags(const val : DWORD);
begin
tagNMDATETIMESTRINGW(GetRecordPtr^).dwFlags := val;
end;
function __tagNMDATETIMESTRINGW__Wrapper.getdwFlags : DWORD;
begin
result := tagNMDATETIMESTRINGW(GetRecordPtr^).dwFlags;
end;
function __tagNMDATETIMEWMKEYDOWN__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMDATETIMEWMKEYDOWN__Wrapper.setnVirtKey(const val : Integer);
begin
tagNMDATETIMEWMKEYDOWN(GetRecordPtr^).nVirtKey := val;
end;
function __tagNMDATETIMEWMKEYDOWN__Wrapper.getnVirtKey : Integer;
begin
result := tagNMDATETIMEWMKEYDOWN(GetRecordPtr^).nVirtKey;
end;
function __tagNMDATETIMEWMKEYDOWNA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMDATETIMEWMKEYDOWNA__Wrapper.setnVirtKey(const val : Integer);
begin
tagNMDATETIMEWMKEYDOWNA(GetRecordPtr^).nVirtKey := val;
end;
function __tagNMDATETIMEWMKEYDOWNA__Wrapper.getnVirtKey : Integer;
begin
result := tagNMDATETIMEWMKEYDOWNA(GetRecordPtr^).nVirtKey;
end;
function __tagNMDATETIMEWMKEYDOWNW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMDATETIMEWMKEYDOWNW__Wrapper.setnVirtKey(const val : Integer);
begin
tagNMDATETIMEWMKEYDOWNW(GetRecordPtr^).nVirtKey := val;
end;
function __tagNMDATETIMEWMKEYDOWNW__Wrapper.getnVirtKey : Integer;
begin
result := tagNMDATETIMEWMKEYDOWNW(GetRecordPtr^).nVirtKey;
end;
function __tagNMDAYSTATE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMDAYSTATE__Wrapper.setcDayState(const val : Integer);
begin
tagNMDAYSTATE(GetRecordPtr^).cDayState := val;
end;
function __tagNMDAYSTATE__Wrapper.getcDayState : Integer;
begin
result := tagNMDAYSTATE(GetRecordPtr^).cDayState;
end;
function __tagNMHDDISPINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMHDDISPINFO__Wrapper.setiItem(const val : Integer);
begin
tagNMHDDISPINFO(GetRecordPtr^).iItem := val;
end;
function __tagNMHDDISPINFO__Wrapper.getiItem : Integer;
begin
result := tagNMHDDISPINFO(GetRecordPtr^).iItem;
end;
procedure __tagNMHDDISPINFO__Wrapper.setMask(const val : UINT);
begin
tagNMHDDISPINFO(GetRecordPtr^).Mask := val;
end;
function __tagNMHDDISPINFO__Wrapper.getMask : UINT;
begin
result := tagNMHDDISPINFO(GetRecordPtr^).Mask;
end;
procedure __tagNMHDDISPINFO__Wrapper.setcchTextMax(const val : Integer);
begin
tagNMHDDISPINFO(GetRecordPtr^).cchTextMax := val;
end;
function __tagNMHDDISPINFO__Wrapper.getcchTextMax : Integer;
begin
result := tagNMHDDISPINFO(GetRecordPtr^).cchTextMax;
end;
procedure __tagNMHDDISPINFO__Wrapper.setiImage(const val : Integer);
begin
tagNMHDDISPINFO(GetRecordPtr^).iImage := val;
end;
function __tagNMHDDISPINFO__Wrapper.getiImage : Integer;
begin
result := tagNMHDDISPINFO(GetRecordPtr^).iImage;
end;
procedure __tagNMHDDISPINFO__Wrapper.setlParam(const val : lParam);
begin
tagNMHDDISPINFO(GetRecordPtr^).lParam := val;
end;
function __tagNMHDDISPINFO__Wrapper.getlParam : lParam;
begin
result := tagNMHDDISPINFO(GetRecordPtr^).lParam;
end;
function __tagNMHDDISPINFOA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMHDDISPINFOA__Wrapper.setiItem(const val : Integer);
begin
tagNMHDDISPINFOA(GetRecordPtr^).iItem := val;
end;
function __tagNMHDDISPINFOA__Wrapper.getiItem : Integer;
begin
result := tagNMHDDISPINFOA(GetRecordPtr^).iItem;
end;
procedure __tagNMHDDISPINFOA__Wrapper.setMask(const val : UINT);
begin
tagNMHDDISPINFOA(GetRecordPtr^).Mask := val;
end;
function __tagNMHDDISPINFOA__Wrapper.getMask : UINT;
begin
result := tagNMHDDISPINFOA(GetRecordPtr^).Mask;
end;
procedure __tagNMHDDISPINFOA__Wrapper.setcchTextMax(const val : Integer);
begin
tagNMHDDISPINFOA(GetRecordPtr^).cchTextMax := val;
end;
function __tagNMHDDISPINFOA__Wrapper.getcchTextMax : Integer;
begin
result := tagNMHDDISPINFOA(GetRecordPtr^).cchTextMax;
end;
procedure __tagNMHDDISPINFOA__Wrapper.setiImage(const val : Integer);
begin
tagNMHDDISPINFOA(GetRecordPtr^).iImage := val;
end;
function __tagNMHDDISPINFOA__Wrapper.getiImage : Integer;
begin
result := tagNMHDDISPINFOA(GetRecordPtr^).iImage;
end;
procedure __tagNMHDDISPINFOA__Wrapper.setlParam(const val : lParam);
begin
tagNMHDDISPINFOA(GetRecordPtr^).lParam := val;
end;
function __tagNMHDDISPINFOA__Wrapper.getlParam : lParam;
begin
result := tagNMHDDISPINFOA(GetRecordPtr^).lParam;
end;
function __tagNMHDDISPINFOW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMHDDISPINFOW__Wrapper.setiItem(const val : Integer);
begin
tagNMHDDISPINFOW(GetRecordPtr^).iItem := val;
end;
function __tagNMHDDISPINFOW__Wrapper.getiItem : Integer;
begin
result := tagNMHDDISPINFOW(GetRecordPtr^).iItem;
end;
procedure __tagNMHDDISPINFOW__Wrapper.setMask(const val : UINT);
begin
tagNMHDDISPINFOW(GetRecordPtr^).Mask := val;
end;
function __tagNMHDDISPINFOW__Wrapper.getMask : UINT;
begin
result := tagNMHDDISPINFOW(GetRecordPtr^).Mask;
end;
procedure __tagNMHDDISPINFOW__Wrapper.setcchTextMax(const val : Integer);
begin
tagNMHDDISPINFOW(GetRecordPtr^).cchTextMax := val;
end;
function __tagNMHDDISPINFOW__Wrapper.getcchTextMax : Integer;
begin
result := tagNMHDDISPINFOW(GetRecordPtr^).cchTextMax;
end;
procedure __tagNMHDDISPINFOW__Wrapper.setiImage(const val : Integer);
begin
tagNMHDDISPINFOW(GetRecordPtr^).iImage := val;
end;
function __tagNMHDDISPINFOW__Wrapper.getiImage : Integer;
begin
result := tagNMHDDISPINFOW(GetRecordPtr^).iImage;
end;
procedure __tagNMHDDISPINFOW__Wrapper.setlParam(const val : lParam);
begin
tagNMHDDISPINFOW(GetRecordPtr^).lParam := val;
end;
function __tagNMHDDISPINFOW__Wrapper.getlParam : lParam;
begin
result := tagNMHDDISPINFOW(GetRecordPtr^).lParam;
end;
function __tagNMHEADER__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMHEADER__Wrapper.setItem(const val : Integer);
begin
tagNMHEADER(GetRecordPtr^).Item := val;
end;
function __tagNMHEADER__Wrapper.getItem : Integer;
begin
result := tagNMHEADER(GetRecordPtr^).Item;
end;
procedure __tagNMHEADER__Wrapper.setButton(const val : Integer);
begin
tagNMHEADER(GetRecordPtr^).Button := val;
end;
function __tagNMHEADER__Wrapper.getButton : Integer;
begin
result := tagNMHEADER(GetRecordPtr^).Button;
end;
function __tagNMHEADERA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMHEADERA__Wrapper.setItem(const val : Integer);
begin
tagNMHEADERA(GetRecordPtr^).Item := val;
end;
function __tagNMHEADERA__Wrapper.getItem : Integer;
begin
result := tagNMHEADERA(GetRecordPtr^).Item;
end;
procedure __tagNMHEADERA__Wrapper.setButton(const val : Integer);
begin
tagNMHEADERA(GetRecordPtr^).Button := val;
end;
function __tagNMHEADERA__Wrapper.getButton : Integer;
begin
result := tagNMHEADERA(GetRecordPtr^).Button;
end;
function __tagNMHEADERW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMHEADERW__Wrapper.setItem(const val : Integer);
begin
tagNMHEADERW(GetRecordPtr^).Item := val;
end;
function __tagNMHEADERW__Wrapper.getItem : Integer;
begin
result := tagNMHEADERW(GetRecordPtr^).Item;
end;
procedure __tagNMHEADERW__Wrapper.setButton(const val : Integer);
begin
tagNMHEADERW(GetRecordPtr^).Button := val;
end;
function __tagNMHEADERW__Wrapper.getButton : Integer;
begin
result := tagNMHEADERW(GetRecordPtr^).Button;
end;
function __tagNMIPADDRESS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMIPADDRESS__Wrapper.setiField(const val : Integer);
begin
tagNMIPADDRESS(GetRecordPtr^).iField := val;
end;
function __tagNMIPADDRESS__Wrapper.getiField : Integer;
begin
result := tagNMIPADDRESS(GetRecordPtr^).iField;
end;
procedure __tagNMIPADDRESS__Wrapper.setiValue(const val : Integer);
begin
tagNMIPADDRESS(GetRecordPtr^).iValue := val;
end;
function __tagNMIPADDRESS__Wrapper.getiValue : Integer;
begin
result := tagNMIPADDRESS(GetRecordPtr^).iValue;
end;
function __tagNMITEMACTIVATE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMITEMACTIVATE__Wrapper.setiItem(const val : Integer);
begin
tagNMITEMACTIVATE(GetRecordPtr^).iItem := val;
end;
function __tagNMITEMACTIVATE__Wrapper.getiItem : Integer;
begin
result := tagNMITEMACTIVATE(GetRecordPtr^).iItem;
end;
procedure __tagNMITEMACTIVATE__Wrapper.setiSubItem(const val : Integer);
begin
tagNMITEMACTIVATE(GetRecordPtr^).iSubItem := val;
end;
function __tagNMITEMACTIVATE__Wrapper.getiSubItem : Integer;
begin
result := tagNMITEMACTIVATE(GetRecordPtr^).iSubItem;
end;
procedure __tagNMITEMACTIVATE__Wrapper.setuNewState(const val : UINT);
begin
tagNMITEMACTIVATE(GetRecordPtr^).uNewState := val;
end;
function __tagNMITEMACTIVATE__Wrapper.getuNewState : UINT;
begin
result := tagNMITEMACTIVATE(GetRecordPtr^).uNewState;
end;
procedure __tagNMITEMACTIVATE__Wrapper.setuOldState(const val : UINT);
begin
tagNMITEMACTIVATE(GetRecordPtr^).uOldState := val;
end;
function __tagNMITEMACTIVATE__Wrapper.getuOldState : UINT;
begin
result := tagNMITEMACTIVATE(GetRecordPtr^).uOldState;
end;
procedure __tagNMITEMACTIVATE__Wrapper.setuChanged(const val : UINT);
begin
tagNMITEMACTIVATE(GetRecordPtr^).uChanged := val;
end;
function __tagNMITEMACTIVATE__Wrapper.getuChanged : UINT;
begin
result := tagNMITEMACTIVATE(GetRecordPtr^).uChanged;
end;
procedure __tagNMITEMACTIVATE__Wrapper.setlParam(const val : lParam);
begin
tagNMITEMACTIVATE(GetRecordPtr^).lParam := val;
end;
function __tagNMITEMACTIVATE__Wrapper.getlParam : lParam;
begin
result := tagNMITEMACTIVATE(GetRecordPtr^).lParam;
end;
procedure __tagNMITEMACTIVATE__Wrapper.setuKeyFlags(const val : UINT);
begin
tagNMITEMACTIVATE(GetRecordPtr^).uKeyFlags := val;
end;
function __tagNMITEMACTIVATE__Wrapper.getuKeyFlags : UINT;
begin
result := tagNMITEMACTIVATE(GetRecordPtr^).uKeyFlags;
end;
function __tagNMKEY__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMKEY__Wrapper.setnVKey(const val : UINT);
begin
tagNMKEY(GetRecordPtr^).nVKey := val;
end;
function __tagNMKEY__Wrapper.getnVKey : UINT;
begin
result := tagNMKEY(GetRecordPtr^).nVKey;
end;
procedure __tagNMKEY__Wrapper.setuFlags(const val : UINT);
begin
tagNMKEY(GetRecordPtr^).uFlags := val;
end;
function __tagNMKEY__Wrapper.getuFlags : UINT;
begin
result := tagNMKEY(GetRecordPtr^).uFlags;
end;
function __tagNMLISTVIEW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMLISTVIEW__Wrapper.setiItem(const val : Integer);
begin
tagNMLISTVIEW(GetRecordPtr^).iItem := val;
end;
function __tagNMLISTVIEW__Wrapper.getiItem : Integer;
begin
result := tagNMLISTVIEW(GetRecordPtr^).iItem;
end;
procedure __tagNMLISTVIEW__Wrapper.setiSubItem(const val : Integer);
begin
tagNMLISTVIEW(GetRecordPtr^).iSubItem := val;
end;
function __tagNMLISTVIEW__Wrapper.getiSubItem : Integer;
begin
result := tagNMLISTVIEW(GetRecordPtr^).iSubItem;
end;
procedure __tagNMLISTVIEW__Wrapper.setuNewState(const val : UINT);
begin
tagNMLISTVIEW(GetRecordPtr^).uNewState := val;
end;
function __tagNMLISTVIEW__Wrapper.getuNewState : UINT;
begin
result := tagNMLISTVIEW(GetRecordPtr^).uNewState;
end;
procedure __tagNMLISTVIEW__Wrapper.setuOldState(const val : UINT);
begin
tagNMLISTVIEW(GetRecordPtr^).uOldState := val;
end;
function __tagNMLISTVIEW__Wrapper.getuOldState : UINT;
begin
result := tagNMLISTVIEW(GetRecordPtr^).uOldState;
end;
procedure __tagNMLISTVIEW__Wrapper.setuChanged(const val : UINT);
begin
tagNMLISTVIEW(GetRecordPtr^).uChanged := val;
end;
function __tagNMLISTVIEW__Wrapper.getuChanged : UINT;
begin
result := tagNMLISTVIEW(GetRecordPtr^).uChanged;
end;
procedure __tagNMLISTVIEW__Wrapper.setlParam(const val : lParam);
begin
tagNMLISTVIEW(GetRecordPtr^).lParam := val;
end;
function __tagNMLISTVIEW__Wrapper.getlParam : lParam;
begin
result := tagNMLISTVIEW(GetRecordPtr^).lParam;
end;
function __tagNMLVCACHEHINT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMLVCACHEHINT__Wrapper.setiFrom(const val : Integer);
begin
tagNMLVCACHEHINT(GetRecordPtr^).iFrom := val;
end;
function __tagNMLVCACHEHINT__Wrapper.getiFrom : Integer;
begin
result := tagNMLVCACHEHINT(GetRecordPtr^).iFrom;
end;
procedure __tagNMLVCACHEHINT__Wrapper.setiTo(const val : Integer);
begin
tagNMLVCACHEHINT(GetRecordPtr^).iTo := val;
end;
function __tagNMLVCACHEHINT__Wrapper.getiTo : Integer;
begin
result := tagNMLVCACHEHINT(GetRecordPtr^).iTo;
end;
function __tagNMLVCUSTOMDRAW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMLVCUSTOMDRAW__Wrapper.setclrText(const val : COLORREF);
begin
tagNMLVCUSTOMDRAW(GetRecordPtr^).clrText := val;
end;
function __tagNMLVCUSTOMDRAW__Wrapper.getclrText : COLORREF;
begin
result := tagNMLVCUSTOMDRAW(GetRecordPtr^).clrText;
end;
procedure __tagNMLVCUSTOMDRAW__Wrapper.setclrTextBk(const val : COLORREF);
begin
tagNMLVCUSTOMDRAW(GetRecordPtr^).clrTextBk := val;
end;
function __tagNMLVCUSTOMDRAW__Wrapper.getclrTextBk : COLORREF;
begin
result := tagNMLVCUSTOMDRAW(GetRecordPtr^).clrTextBk;
end;
procedure __tagNMLVCUSTOMDRAW__Wrapper.setiSubItem(const val : Integer);
begin
tagNMLVCUSTOMDRAW(GetRecordPtr^).iSubItem := val;
end;
function __tagNMLVCUSTOMDRAW__Wrapper.getiSubItem : Integer;
begin
result := tagNMLVCUSTOMDRAW(GetRecordPtr^).iSubItem;
end;
function __tagNMLVFINDITEM__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMLVFINDITEM__Wrapper.setiStart(const val : Integer);
begin
tagNMLVFINDITEM(GetRecordPtr^).iStart := val;
end;
function __tagNMLVFINDITEM__Wrapper.getiStart : Integer;
begin
result := tagNMLVFINDITEM(GetRecordPtr^).iStart;
end;
function __tagNMLVFINDITEMA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMLVFINDITEMA__Wrapper.setiStart(const val : Integer);
begin
tagNMLVFINDITEMA(GetRecordPtr^).iStart := val;
end;
function __tagNMLVFINDITEMA__Wrapper.getiStart : Integer;
begin
result := tagNMLVFINDITEMA(GetRecordPtr^).iStart;
end;
function __tagNMLVFINDITEMW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMLVFINDITEMW__Wrapper.setiStart(const val : Integer);
begin
tagNMLVFINDITEMW(GetRecordPtr^).iStart := val;
end;
function __tagNMLVFINDITEMW__Wrapper.getiStart : Integer;
begin
result := tagNMLVFINDITEMW(GetRecordPtr^).iStart;
end;
function __tagNMLVGETINFOTIP__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMLVGETINFOTIP__Wrapper.setdwFlags(const val : DWORD);
begin
tagNMLVGETINFOTIP(GetRecordPtr^).dwFlags := val;
end;
function __tagNMLVGETINFOTIP__Wrapper.getdwFlags : DWORD;
begin
result := tagNMLVGETINFOTIP(GetRecordPtr^).dwFlags;
end;
procedure __tagNMLVGETINFOTIP__Wrapper.setcchTextMax(const val : Integer);
begin
tagNMLVGETINFOTIP(GetRecordPtr^).cchTextMax := val;
end;
function __tagNMLVGETINFOTIP__Wrapper.getcchTextMax : Integer;
begin
result := tagNMLVGETINFOTIP(GetRecordPtr^).cchTextMax;
end;
procedure __tagNMLVGETINFOTIP__Wrapper.setiItem(const val : Integer);
begin
tagNMLVGETINFOTIP(GetRecordPtr^).iItem := val;
end;
function __tagNMLVGETINFOTIP__Wrapper.getiItem : Integer;
begin
result := tagNMLVGETINFOTIP(GetRecordPtr^).iItem;
end;
procedure __tagNMLVGETINFOTIP__Wrapper.setiSubItem(const val : Integer);
begin
tagNMLVGETINFOTIP(GetRecordPtr^).iSubItem := val;
end;
function __tagNMLVGETINFOTIP__Wrapper.getiSubItem : Integer;
begin
result := tagNMLVGETINFOTIP(GetRecordPtr^).iSubItem;
end;
procedure __tagNMLVGETINFOTIP__Wrapper.setlParam(const val : lParam);
begin
tagNMLVGETINFOTIP(GetRecordPtr^).lParam := val;
end;
function __tagNMLVGETINFOTIP__Wrapper.getlParam : lParam;
begin
result := tagNMLVGETINFOTIP(GetRecordPtr^).lParam;
end;
function __tagNMLVGETINFOTIPA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMLVGETINFOTIPA__Wrapper.setdwFlags(const val : DWORD);
begin
tagNMLVGETINFOTIPA(GetRecordPtr^).dwFlags := val;
end;
function __tagNMLVGETINFOTIPA__Wrapper.getdwFlags : DWORD;
begin
result := tagNMLVGETINFOTIPA(GetRecordPtr^).dwFlags;
end;
procedure __tagNMLVGETINFOTIPA__Wrapper.setcchTextMax(const val : Integer);
begin
tagNMLVGETINFOTIPA(GetRecordPtr^).cchTextMax := val;
end;
function __tagNMLVGETINFOTIPA__Wrapper.getcchTextMax : Integer;
begin
result := tagNMLVGETINFOTIPA(GetRecordPtr^).cchTextMax;
end;
procedure __tagNMLVGETINFOTIPA__Wrapper.setiItem(const val : Integer);
begin
tagNMLVGETINFOTIPA(GetRecordPtr^).iItem := val;
end;
function __tagNMLVGETINFOTIPA__Wrapper.getiItem : Integer;
begin
result := tagNMLVGETINFOTIPA(GetRecordPtr^).iItem;
end;
procedure __tagNMLVGETINFOTIPA__Wrapper.setiSubItem(const val : Integer);
begin
tagNMLVGETINFOTIPA(GetRecordPtr^).iSubItem := val;
end;
function __tagNMLVGETINFOTIPA__Wrapper.getiSubItem : Integer;
begin
result := tagNMLVGETINFOTIPA(GetRecordPtr^).iSubItem;
end;
procedure __tagNMLVGETINFOTIPA__Wrapper.setlParam(const val : lParam);
begin
tagNMLVGETINFOTIPA(GetRecordPtr^).lParam := val;
end;
function __tagNMLVGETINFOTIPA__Wrapper.getlParam : lParam;
begin
result := tagNMLVGETINFOTIPA(GetRecordPtr^).lParam;
end;
function __tagNMLVGETINFOTIPW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMLVGETINFOTIPW__Wrapper.setdwFlags(const val : DWORD);
begin
tagNMLVGETINFOTIPW(GetRecordPtr^).dwFlags := val;
end;
function __tagNMLVGETINFOTIPW__Wrapper.getdwFlags : DWORD;
begin
result := tagNMLVGETINFOTIPW(GetRecordPtr^).dwFlags;
end;
procedure __tagNMLVGETINFOTIPW__Wrapper.setcchTextMax(const val : Integer);
begin
tagNMLVGETINFOTIPW(GetRecordPtr^).cchTextMax := val;
end;
function __tagNMLVGETINFOTIPW__Wrapper.getcchTextMax : Integer;
begin
result := tagNMLVGETINFOTIPW(GetRecordPtr^).cchTextMax;
end;
procedure __tagNMLVGETINFOTIPW__Wrapper.setiItem(const val : Integer);
begin
tagNMLVGETINFOTIPW(GetRecordPtr^).iItem := val;
end;
function __tagNMLVGETINFOTIPW__Wrapper.getiItem : Integer;
begin
result := tagNMLVGETINFOTIPW(GetRecordPtr^).iItem;
end;
procedure __tagNMLVGETINFOTIPW__Wrapper.setiSubItem(const val : Integer);
begin
tagNMLVGETINFOTIPW(GetRecordPtr^).iSubItem := val;
end;
function __tagNMLVGETINFOTIPW__Wrapper.getiSubItem : Integer;
begin
result := tagNMLVGETINFOTIPW(GetRecordPtr^).iSubItem;
end;
procedure __tagNMLVGETINFOTIPW__Wrapper.setlParam(const val : lParam);
begin
tagNMLVGETINFOTIPW(GetRecordPtr^).lParam := val;
end;
function __tagNMLVGETINFOTIPW__Wrapper.getlParam : lParam;
begin
result := tagNMLVGETINFOTIPW(GetRecordPtr^).lParam;
end;
function __tagNMLVODSTATECHANGE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMLVODSTATECHANGE__Wrapper.setiFrom(const val : Integer);
begin
tagNMLVODSTATECHANGE(GetRecordPtr^).iFrom := val;
end;
function __tagNMLVODSTATECHANGE__Wrapper.getiFrom : Integer;
begin
result := tagNMLVODSTATECHANGE(GetRecordPtr^).iFrom;
end;
procedure __tagNMLVODSTATECHANGE__Wrapper.setiTo(const val : Integer);
begin
tagNMLVODSTATECHANGE(GetRecordPtr^).iTo := val;
end;
function __tagNMLVODSTATECHANGE__Wrapper.getiTo : Integer;
begin
result := tagNMLVODSTATECHANGE(GetRecordPtr^).iTo;
end;
procedure __tagNMLVODSTATECHANGE__Wrapper.setuNewState(const val : UINT);
begin
tagNMLVODSTATECHANGE(GetRecordPtr^).uNewState := val;
end;
function __tagNMLVODSTATECHANGE__Wrapper.getuNewState : UINT;
begin
result := tagNMLVODSTATECHANGE(GetRecordPtr^).uNewState;
end;
procedure __tagNMLVODSTATECHANGE__Wrapper.setuOldState(const val : UINT);
begin
tagNMLVODSTATECHANGE(GetRecordPtr^).uOldState := val;
end;
function __tagNMLVODSTATECHANGE__Wrapper.getuOldState : UINT;
begin
result := tagNMLVODSTATECHANGE(GetRecordPtr^).uOldState;
end;
function __tagNMMOUSE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMMOUSE__Wrapper.setdwItemSpec(const val : DWORD);
begin
tagNMMOUSE(GetRecordPtr^).dwItemSpec := val;
end;
function __tagNMMOUSE__Wrapper.getdwItemSpec : DWORD;
begin
result := tagNMMOUSE(GetRecordPtr^).dwItemSpec;
end;
procedure __tagNMMOUSE__Wrapper.setdwItemData(const val : DWORD);
begin
tagNMMOUSE(GetRecordPtr^).dwItemData := val;
end;
function __tagNMMOUSE__Wrapper.getdwItemData : DWORD;
begin
result := tagNMMOUSE(GetRecordPtr^).dwItemData;
end;
procedure __tagNMMOUSE__Wrapper.setdwHitInfo(const val : DWORD);
begin
tagNMMOUSE(GetRecordPtr^).dwHitInfo := val;
end;
function __tagNMMOUSE__Wrapper.getdwHitInfo : DWORD;
begin
result := tagNMMOUSE(GetRecordPtr^).dwHitInfo;
end;
function __tagNMOBJECTNOTIFY__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMOBJECTNOTIFY__Wrapper.setiItem(const val : Integer);
begin
tagNMOBJECTNOTIFY(GetRecordPtr^).iItem := val;
end;
function __tagNMOBJECTNOTIFY__Wrapper.getiItem : Integer;
begin
result := tagNMOBJECTNOTIFY(GetRecordPtr^).iItem;
end;
procedure __tagNMOBJECTNOTIFY__Wrapper.setdwFlags(const val : DWORD);
begin
tagNMOBJECTNOTIFY(GetRecordPtr^).dwFlags := val;
end;
function __tagNMOBJECTNOTIFY__Wrapper.getdwFlags : DWORD;
begin
result := tagNMOBJECTNOTIFY(GetRecordPtr^).dwFlags;
end;
function __tagNMRBAUTOSIZE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMRBAUTOSIZE__Wrapper.setfChanged(const val : BOOL);
begin
tagNMRBAUTOSIZE(GetRecordPtr^).fChanged := val;
end;
function __tagNMRBAUTOSIZE__Wrapper.getfChanged : BOOL;
begin
result := tagNMRBAUTOSIZE(GetRecordPtr^).fChanged;
end;
function __tagNMREBAR__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMREBAR__Wrapper.setdwMask(const val : DWORD);
begin
tagNMREBAR(GetRecordPtr^).dwMask := val;
end;
function __tagNMREBAR__Wrapper.getdwMask : DWORD;
begin
result := tagNMREBAR(GetRecordPtr^).dwMask;
end;
procedure __tagNMREBAR__Wrapper.setuBand(const val : UINT);
begin
tagNMREBAR(GetRecordPtr^).uBand := val;
end;
function __tagNMREBAR__Wrapper.getuBand : UINT;
begin
result := tagNMREBAR(GetRecordPtr^).uBand;
end;
procedure __tagNMREBAR__Wrapper.setfStyle(const val : UINT);
begin
tagNMREBAR(GetRecordPtr^).fStyle := val;
end;
function __tagNMREBAR__Wrapper.getfStyle : UINT;
begin
result := tagNMREBAR(GetRecordPtr^).fStyle;
end;
procedure __tagNMREBAR__Wrapper.setwID(const val : UINT);
begin
tagNMREBAR(GetRecordPtr^).wID := val;
end;
function __tagNMREBAR__Wrapper.getwID : UINT;
begin
result := tagNMREBAR(GetRecordPtr^).wID;
end;
procedure __tagNMREBAR__Wrapper.setlParam(const val : lParam);
begin
tagNMREBAR(GetRecordPtr^).lParam := val;
end;
function __tagNMREBAR__Wrapper.getlParam : lParam;
begin
result := tagNMREBAR(GetRecordPtr^).lParam;
end;
function __tagNMREBARCHILDSIZE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMREBARCHILDSIZE__Wrapper.setuBand(const val : UINT);
begin
tagNMREBARCHILDSIZE(GetRecordPtr^).uBand := val;
end;
function __tagNMREBARCHILDSIZE__Wrapper.getuBand : UINT;
begin
result := tagNMREBARCHILDSIZE(GetRecordPtr^).uBand;
end;
procedure __tagNMREBARCHILDSIZE__Wrapper.setwID(const val : UINT);
begin
tagNMREBARCHILDSIZE(GetRecordPtr^).wID := val;
end;
function __tagNMREBARCHILDSIZE__Wrapper.getwID : UINT;
begin
result := tagNMREBARCHILDSIZE(GetRecordPtr^).wID;
end;
function __tagNMSELCHANGE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __tagNMTBGETINFOTIP__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMTBGETINFOTIP__Wrapper.setcchTextMax(const val : Integer);
begin
tagNMTBGETINFOTIP(GetRecordPtr^).cchTextMax := val;
end;
function __tagNMTBGETINFOTIP__Wrapper.getcchTextMax : Integer;
begin
result := tagNMTBGETINFOTIP(GetRecordPtr^).cchTextMax;
end;
procedure __tagNMTBGETINFOTIP__Wrapper.setiItem(const val : Integer);
begin
tagNMTBGETINFOTIP(GetRecordPtr^).iItem := val;
end;
function __tagNMTBGETINFOTIP__Wrapper.getiItem : Integer;
begin
result := tagNMTBGETINFOTIP(GetRecordPtr^).iItem;
end;
procedure __tagNMTBGETINFOTIP__Wrapper.setlParam(const val : lParam);
begin
tagNMTBGETINFOTIP(GetRecordPtr^).lParam := val;
end;
function __tagNMTBGETINFOTIP__Wrapper.getlParam : lParam;
begin
result := tagNMTBGETINFOTIP(GetRecordPtr^).lParam;
end;
function __tagNMTBGETINFOTIPA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMTBGETINFOTIPA__Wrapper.setcchTextMax(const val : Integer);
begin
tagNMTBGETINFOTIPA(GetRecordPtr^).cchTextMax := val;
end;
function __tagNMTBGETINFOTIPA__Wrapper.getcchTextMax : Integer;
begin
result := tagNMTBGETINFOTIPA(GetRecordPtr^).cchTextMax;
end;
procedure __tagNMTBGETINFOTIPA__Wrapper.setiItem(const val : Integer);
begin
tagNMTBGETINFOTIPA(GetRecordPtr^).iItem := val;
end;
function __tagNMTBGETINFOTIPA__Wrapper.getiItem : Integer;
begin
result := tagNMTBGETINFOTIPA(GetRecordPtr^).iItem;
end;
procedure __tagNMTBGETINFOTIPA__Wrapper.setlParam(const val : lParam);
begin
tagNMTBGETINFOTIPA(GetRecordPtr^).lParam := val;
end;
function __tagNMTBGETINFOTIPA__Wrapper.getlParam : lParam;
begin
result := tagNMTBGETINFOTIPA(GetRecordPtr^).lParam;
end;
function __tagNMTBGETINFOTIPW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMTBGETINFOTIPW__Wrapper.setcchTextMax(const val : Integer);
begin
tagNMTBGETINFOTIPW(GetRecordPtr^).cchTextMax := val;
end;
function __tagNMTBGETINFOTIPW__Wrapper.getcchTextMax : Integer;
begin
result := tagNMTBGETINFOTIPW(GetRecordPtr^).cchTextMax;
end;
procedure __tagNMTBGETINFOTIPW__Wrapper.setiItem(const val : Integer);
begin
tagNMTBGETINFOTIPW(GetRecordPtr^).iItem := val;
end;
function __tagNMTBGETINFOTIPW__Wrapper.getiItem : Integer;
begin
result := tagNMTBGETINFOTIPW(GetRecordPtr^).iItem;
end;
procedure __tagNMTBGETINFOTIPW__Wrapper.setlParam(const val : lParam);
begin
tagNMTBGETINFOTIPW(GetRecordPtr^).lParam := val;
end;
function __tagNMTBGETINFOTIPW__Wrapper.getlParam : lParam;
begin
result := tagNMTBGETINFOTIPW(GetRecordPtr^).lParam;
end;
function __tagNMTBHOTITEM__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMTBHOTITEM__Wrapper.setidOld(const val : Integer);
begin
tagNMTBHOTITEM(GetRecordPtr^).idOld := val;
end;
function __tagNMTBHOTITEM__Wrapper.getidOld : Integer;
begin
result := tagNMTBHOTITEM(GetRecordPtr^).idOld;
end;
procedure __tagNMTBHOTITEM__Wrapper.setidNew(const val : Integer);
begin
tagNMTBHOTITEM(GetRecordPtr^).idNew := val;
end;
function __tagNMTBHOTITEM__Wrapper.getidNew : Integer;
begin
result := tagNMTBHOTITEM(GetRecordPtr^).idNew;
end;
procedure __tagNMTBHOTITEM__Wrapper.setdwFlags(const val : DWORD);
begin
tagNMTBHOTITEM(GetRecordPtr^).dwFlags := val;
end;
function __tagNMTBHOTITEM__Wrapper.getdwFlags : DWORD;
begin
result := tagNMTBHOTITEM(GetRecordPtr^).dwFlags;
end;
function __tagNMTOOLBAR__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMTOOLBAR__Wrapper.setiItem(const val : Integer);
begin
tagNMTOOLBAR(GetRecordPtr^).iItem := val;
end;
function __tagNMTOOLBAR__Wrapper.getiItem : Integer;
begin
result := tagNMTOOLBAR(GetRecordPtr^).iItem;
end;
procedure __tagNMTOOLBAR__Wrapper.setcchText(const val : Integer);
begin
tagNMTOOLBAR(GetRecordPtr^).cchText := val;
end;
function __tagNMTOOLBAR__Wrapper.getcchText : Integer;
begin
result := tagNMTOOLBAR(GetRecordPtr^).cchText;
end;
function __tagNMTOOLBARA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMTOOLBARA__Wrapper.setiItem(const val : Integer);
begin
tagNMTOOLBARA(GetRecordPtr^).iItem := val;
end;
function __tagNMTOOLBARA__Wrapper.getiItem : Integer;
begin
result := tagNMTOOLBARA(GetRecordPtr^).iItem;
end;
procedure __tagNMTOOLBARA__Wrapper.setcchText(const val : Integer);
begin
tagNMTOOLBARA(GetRecordPtr^).cchText := val;
end;
function __tagNMTOOLBARA__Wrapper.getcchText : Integer;
begin
result := tagNMTOOLBARA(GetRecordPtr^).cchText;
end;
function __tagNMTOOLBARW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMTOOLBARW__Wrapper.setiItem(const val : Integer);
begin
tagNMTOOLBARW(GetRecordPtr^).iItem := val;
end;
function __tagNMTOOLBARW__Wrapper.getiItem : Integer;
begin
result := tagNMTOOLBARW(GetRecordPtr^).iItem;
end;
procedure __tagNMTOOLBARW__Wrapper.setcchText(const val : Integer);
begin
tagNMTOOLBARW(GetRecordPtr^).cchText := val;
end;
function __tagNMTOOLBARW__Wrapper.getcchText : Integer;
begin
result := tagNMTOOLBARW(GetRecordPtr^).cchText;
end;
function __tagNMTREEVIEW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMTREEVIEW__Wrapper.setaction(const val : UINT);
begin
tagNMTREEVIEW(GetRecordPtr^).action := val;
end;
function __tagNMTREEVIEW__Wrapper.getaction : UINT;
begin
result := tagNMTREEVIEW(GetRecordPtr^).action;
end;
function __tagNMTREEVIEWA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMTREEVIEWA__Wrapper.setaction(const val : UINT);
begin
tagNMTREEVIEWA(GetRecordPtr^).action := val;
end;
function __tagNMTREEVIEWA__Wrapper.getaction : UINT;
begin
result := tagNMTREEVIEWA(GetRecordPtr^).action;
end;
function __tagNMTREEVIEWW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMTREEVIEWW__Wrapper.setaction(const val : UINT);
begin
tagNMTREEVIEWW(GetRecordPtr^).action := val;
end;
function __tagNMTREEVIEWW__Wrapper.getaction : UINT;
begin
result := tagNMTREEVIEWW(GetRecordPtr^).action;
end;
function __tagNMTTCUSTOMDRAW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMTTCUSTOMDRAW__Wrapper.setuDrawFlags(const val : UINT);
begin
tagNMTTCUSTOMDRAW(GetRecordPtr^).uDrawFlags := val;
end;
function __tagNMTTCUSTOMDRAW__Wrapper.getuDrawFlags : UINT;
begin
result := tagNMTTCUSTOMDRAW(GetRecordPtr^).uDrawFlags;
end;
function __tagNMTTDISPINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMTTDISPINFO__Wrapper.sethInst(const val : hInst);
begin
tagNMTTDISPINFO(GetRecordPtr^).hInst := val;
end;
function __tagNMTTDISPINFO__Wrapper.gethInst : hInst;
begin
result := tagNMTTDISPINFO(GetRecordPtr^).hInst;
end;
procedure __tagNMTTDISPINFO__Wrapper.setuFlags(const val : UINT);
begin
tagNMTTDISPINFO(GetRecordPtr^).uFlags := val;
end;
function __tagNMTTDISPINFO__Wrapper.getuFlags : UINT;
begin
result := tagNMTTDISPINFO(GetRecordPtr^).uFlags;
end;
procedure __tagNMTTDISPINFO__Wrapper.setlParam(const val : lParam);
begin
tagNMTTDISPINFO(GetRecordPtr^).lParam := val;
end;
function __tagNMTTDISPINFO__Wrapper.getlParam : lParam;
begin
result := tagNMTTDISPINFO(GetRecordPtr^).lParam;
end;
function __tagNMTTDISPINFOA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMTTDISPINFOA__Wrapper.sethInst(const val : hInst);
begin
tagNMTTDISPINFOA(GetRecordPtr^).hInst := val;
end;
function __tagNMTTDISPINFOA__Wrapper.gethInst : hInst;
begin
result := tagNMTTDISPINFOA(GetRecordPtr^).hInst;
end;
procedure __tagNMTTDISPINFOA__Wrapper.setuFlags(const val : UINT);
begin
tagNMTTDISPINFOA(GetRecordPtr^).uFlags := val;
end;
function __tagNMTTDISPINFOA__Wrapper.getuFlags : UINT;
begin
result := tagNMTTDISPINFOA(GetRecordPtr^).uFlags;
end;
procedure __tagNMTTDISPINFOA__Wrapper.setlParam(const val : lParam);
begin
tagNMTTDISPINFOA(GetRecordPtr^).lParam := val;
end;
function __tagNMTTDISPINFOA__Wrapper.getlParam : lParam;
begin
result := tagNMTTDISPINFOA(GetRecordPtr^).lParam;
end;
function __tagNMTTDISPINFOW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMTTDISPINFOW__Wrapper.sethInst(const val : hInst);
begin
tagNMTTDISPINFOW(GetRecordPtr^).hInst := val;
end;
function __tagNMTTDISPINFOW__Wrapper.gethInst : hInst;
begin
result := tagNMTTDISPINFOW(GetRecordPtr^).hInst;
end;
procedure __tagNMTTDISPINFOW__Wrapper.setuFlags(const val : UINT);
begin
tagNMTTDISPINFOW(GetRecordPtr^).uFlags := val;
end;
function __tagNMTTDISPINFOW__Wrapper.getuFlags : UINT;
begin
result := tagNMTTDISPINFOW(GetRecordPtr^).uFlags;
end;
procedure __tagNMTTDISPINFOW__Wrapper.setlParam(const val : lParam);
begin
tagNMTTDISPINFOW(GetRecordPtr^).lParam := val;
end;
function __tagNMTTDISPINFOW__Wrapper.getlParam : lParam;
begin
result := tagNMTTDISPINFOW(GetRecordPtr^).lParam;
end;
function __tagNMTVCUSTOMDRAW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMTVCUSTOMDRAW__Wrapper.setclrText(const val : COLORREF);
begin
tagNMTVCUSTOMDRAW(GetRecordPtr^).clrText := val;
end;
function __tagNMTVCUSTOMDRAW__Wrapper.getclrText : COLORREF;
begin
result := tagNMTVCUSTOMDRAW(GetRecordPtr^).clrText;
end;
procedure __tagNMTVCUSTOMDRAW__Wrapper.setclrTextBk(const val : COLORREF);
begin
tagNMTVCUSTOMDRAW(GetRecordPtr^).clrTextBk := val;
end;
function __tagNMTVCUSTOMDRAW__Wrapper.getclrTextBk : COLORREF;
begin
result := tagNMTVCUSTOMDRAW(GetRecordPtr^).clrTextBk;
end;
procedure __tagNMTVCUSTOMDRAW__Wrapper.setiLevel(const val : Integer);
begin
tagNMTVCUSTOMDRAW(GetRecordPtr^).iLevel := val;
end;
function __tagNMTVCUSTOMDRAW__Wrapper.getiLevel : Integer;
begin
result := tagNMTVCUSTOMDRAW(GetRecordPtr^).iLevel;
end;
function __tagNMTVGETINFOTIP__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMTVGETINFOTIP__Wrapper.setcchTextMax(const val : Integer);
begin
tagNMTVGETINFOTIP(GetRecordPtr^).cchTextMax := val;
end;
function __tagNMTVGETINFOTIP__Wrapper.getcchTextMax : Integer;
begin
result := tagNMTVGETINFOTIP(GetRecordPtr^).cchTextMax;
end;
procedure __tagNMTVGETINFOTIP__Wrapper.setlParam(const val : lParam);
begin
tagNMTVGETINFOTIP(GetRecordPtr^).lParam := val;
end;
function __tagNMTVGETINFOTIP__Wrapper.getlParam : lParam;
begin
result := tagNMTVGETINFOTIP(GetRecordPtr^).lParam;
end;
function __tagNMTVGETINFOTIPA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMTVGETINFOTIPA__Wrapper.setcchTextMax(const val : Integer);
begin
tagNMTVGETINFOTIPA(GetRecordPtr^).cchTextMax := val;
end;
function __tagNMTVGETINFOTIPA__Wrapper.getcchTextMax : Integer;
begin
result := tagNMTVGETINFOTIPA(GetRecordPtr^).cchTextMax;
end;
procedure __tagNMTVGETINFOTIPA__Wrapper.setlParam(const val : lParam);
begin
tagNMTVGETINFOTIPA(GetRecordPtr^).lParam := val;
end;
function __tagNMTVGETINFOTIPA__Wrapper.getlParam : lParam;
begin
result := tagNMTVGETINFOTIPA(GetRecordPtr^).lParam;
end;
function __tagNMTVGETINFOTIPW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagNMTVGETINFOTIPW__Wrapper.setcchTextMax(const val : Integer);
begin
tagNMTVGETINFOTIPW(GetRecordPtr^).cchTextMax := val;
end;
function __tagNMTVGETINFOTIPW__Wrapper.getcchTextMax : Integer;
begin
result := tagNMTVGETINFOTIPW(GetRecordPtr^).cchTextMax;
end;
procedure __tagNMTVGETINFOTIPW__Wrapper.setlParam(const val : lParam);
begin
tagNMTVGETINFOTIPW(GetRecordPtr^).lParam := val;
end;
function __tagNMTVGETINFOTIPW__Wrapper.getlParam : lParam;
begin
result := tagNMTVGETINFOTIPW(GetRecordPtr^).lParam;
end;
function __tagREBARBANDINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagREBARBANDINFO__Wrapper.setcbSize(const val : UINT);
begin
tagREBARBANDINFO(GetRecordPtr^).cbSize := val;
end;
function __tagREBARBANDINFO__Wrapper.getcbSize : UINT;
begin
result := tagREBARBANDINFO(GetRecordPtr^).cbSize;
end;
procedure __tagREBARBANDINFO__Wrapper.setfMask(const val : UINT);
begin
tagREBARBANDINFO(GetRecordPtr^).fMask := val;
end;
function __tagREBARBANDINFO__Wrapper.getfMask : UINT;
begin
result := tagREBARBANDINFO(GetRecordPtr^).fMask;
end;
procedure __tagREBARBANDINFO__Wrapper.setfStyle(const val : UINT);
begin
tagREBARBANDINFO(GetRecordPtr^).fStyle := val;
end;
function __tagREBARBANDINFO__Wrapper.getfStyle : UINT;
begin
result := tagREBARBANDINFO(GetRecordPtr^).fStyle;
end;
procedure __tagREBARBANDINFO__Wrapper.setclrFore(const val : TColorRef);
begin
tagREBARBANDINFO(GetRecordPtr^).clrFore := val;
end;
function __tagREBARBANDINFO__Wrapper.getclrFore : TColorRef;
begin
result := tagREBARBANDINFO(GetRecordPtr^).clrFore;
end;
procedure __tagREBARBANDINFO__Wrapper.setclrBack(const val : TColorRef);
begin
tagREBARBANDINFO(GetRecordPtr^).clrBack := val;
end;
function __tagREBARBANDINFO__Wrapper.getclrBack : TColorRef;
begin
result := tagREBARBANDINFO(GetRecordPtr^).clrBack;
end;
procedure __tagREBARBANDINFO__Wrapper.setcch(const val : UINT);
begin
tagREBARBANDINFO(GetRecordPtr^).cch := val;
end;
function __tagREBARBANDINFO__Wrapper.getcch : UINT;
begin
result := tagREBARBANDINFO(GetRecordPtr^).cch;
end;
procedure __tagREBARBANDINFO__Wrapper.setiImage(const val : Integer);
begin
tagREBARBANDINFO(GetRecordPtr^).iImage := val;
end;
function __tagREBARBANDINFO__Wrapper.getiImage : Integer;
begin
result := tagREBARBANDINFO(GetRecordPtr^).iImage;
end;
procedure __tagREBARBANDINFO__Wrapper.setcxMinChild(const val : UINT);
begin
tagREBARBANDINFO(GetRecordPtr^).cxMinChild := val;
end;
function __tagREBARBANDINFO__Wrapper.getcxMinChild : UINT;
begin
result := tagREBARBANDINFO(GetRecordPtr^).cxMinChild;
end;
procedure __tagREBARBANDINFO__Wrapper.setcyMinChild(const val : UINT);
begin
tagREBARBANDINFO(GetRecordPtr^).cyMinChild := val;
end;
function __tagREBARBANDINFO__Wrapper.getcyMinChild : UINT;
begin
result := tagREBARBANDINFO(GetRecordPtr^).cyMinChild;
end;
procedure __tagREBARBANDINFO__Wrapper.setcx(const val : UINT);
begin
tagREBARBANDINFO(GetRecordPtr^).cx := val;
end;
function __tagREBARBANDINFO__Wrapper.getcx : UINT;
begin
result := tagREBARBANDINFO(GetRecordPtr^).cx;
end;
procedure __tagREBARBANDINFO__Wrapper.setwID(const val : UINT);
begin
tagREBARBANDINFO(GetRecordPtr^).wID := val;
end;
function __tagREBARBANDINFO__Wrapper.getwID : UINT;
begin
result := tagREBARBANDINFO(GetRecordPtr^).wID;
end;
procedure __tagREBARBANDINFO__Wrapper.setcyChild(const val : UINT);
begin
tagREBARBANDINFO(GetRecordPtr^).cyChild := val;
end;
function __tagREBARBANDINFO__Wrapper.getcyChild : UINT;
begin
result := tagREBARBANDINFO(GetRecordPtr^).cyChild;
end;
procedure __tagREBARBANDINFO__Wrapper.setcyMaxChild(const val : UINT);
begin
tagREBARBANDINFO(GetRecordPtr^).cyMaxChild := val;
end;
function __tagREBARBANDINFO__Wrapper.getcyMaxChild : UINT;
begin
result := tagREBARBANDINFO(GetRecordPtr^).cyMaxChild;
end;
procedure __tagREBARBANDINFO__Wrapper.setcyIntegral(const val : UINT);
begin
tagREBARBANDINFO(GetRecordPtr^).cyIntegral := val;
end;
function __tagREBARBANDINFO__Wrapper.getcyIntegral : UINT;
begin
result := tagREBARBANDINFO(GetRecordPtr^).cyIntegral;
end;
procedure __tagREBARBANDINFO__Wrapper.setcxIdeal(const val : UINT);
begin
tagREBARBANDINFO(GetRecordPtr^).cxIdeal := val;
end;
function __tagREBARBANDINFO__Wrapper.getcxIdeal : UINT;
begin
result := tagREBARBANDINFO(GetRecordPtr^).cxIdeal;
end;
procedure __tagREBARBANDINFO__Wrapper.setlParam(const val : lParam);
begin
tagREBARBANDINFO(GetRecordPtr^).lParam := val;
end;
function __tagREBARBANDINFO__Wrapper.getlParam : lParam;
begin
result := tagREBARBANDINFO(GetRecordPtr^).lParam;
end;
procedure __tagREBARBANDINFO__Wrapper.setcxHeader(const val : UINT);
begin
tagREBARBANDINFO(GetRecordPtr^).cxHeader := val;
end;
function __tagREBARBANDINFO__Wrapper.getcxHeader : UINT;
begin
result := tagREBARBANDINFO(GetRecordPtr^).cxHeader;
end;
function __tagREBARBANDINFOA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagREBARBANDINFOA__Wrapper.setcbSize(const val : UINT);
begin
tagREBARBANDINFOA(GetRecordPtr^).cbSize := val;
end;
function __tagREBARBANDINFOA__Wrapper.getcbSize : UINT;
begin
result := tagREBARBANDINFOA(GetRecordPtr^).cbSize;
end;
procedure __tagREBARBANDINFOA__Wrapper.setfMask(const val : UINT);
begin
tagREBARBANDINFOA(GetRecordPtr^).fMask := val;
end;
function __tagREBARBANDINFOA__Wrapper.getfMask : UINT;
begin
result := tagREBARBANDINFOA(GetRecordPtr^).fMask;
end;
procedure __tagREBARBANDINFOA__Wrapper.setfStyle(const val : UINT);
begin
tagREBARBANDINFOA(GetRecordPtr^).fStyle := val;
end;
function __tagREBARBANDINFOA__Wrapper.getfStyle : UINT;
begin
result := tagREBARBANDINFOA(GetRecordPtr^).fStyle;
end;
procedure __tagREBARBANDINFOA__Wrapper.setclrFore(const val : TColorRef);
begin
tagREBARBANDINFOA(GetRecordPtr^).clrFore := val;
end;
function __tagREBARBANDINFOA__Wrapper.getclrFore : TColorRef;
begin
result := tagREBARBANDINFOA(GetRecordPtr^).clrFore;
end;
procedure __tagREBARBANDINFOA__Wrapper.setclrBack(const val : TColorRef);
begin
tagREBARBANDINFOA(GetRecordPtr^).clrBack := val;
end;
function __tagREBARBANDINFOA__Wrapper.getclrBack : TColorRef;
begin
result := tagREBARBANDINFOA(GetRecordPtr^).clrBack;
end;
procedure __tagREBARBANDINFOA__Wrapper.setcch(const val : UINT);
begin
tagREBARBANDINFOA(GetRecordPtr^).cch := val;
end;
function __tagREBARBANDINFOA__Wrapper.getcch : UINT;
begin
result := tagREBARBANDINFOA(GetRecordPtr^).cch;
end;
procedure __tagREBARBANDINFOA__Wrapper.setiImage(const val : Integer);
begin
tagREBARBANDINFOA(GetRecordPtr^).iImage := val;
end;
function __tagREBARBANDINFOA__Wrapper.getiImage : Integer;
begin
result := tagREBARBANDINFOA(GetRecordPtr^).iImage;
end;
procedure __tagREBARBANDINFOA__Wrapper.setcxMinChild(const val : UINT);
begin
tagREBARBANDINFOA(GetRecordPtr^).cxMinChild := val;
end;
function __tagREBARBANDINFOA__Wrapper.getcxMinChild : UINT;
begin
result := tagREBARBANDINFOA(GetRecordPtr^).cxMinChild;
end;
procedure __tagREBARBANDINFOA__Wrapper.setcyMinChild(const val : UINT);
begin
tagREBARBANDINFOA(GetRecordPtr^).cyMinChild := val;
end;
function __tagREBARBANDINFOA__Wrapper.getcyMinChild : UINT;
begin
result := tagREBARBANDINFOA(GetRecordPtr^).cyMinChild;
end;
procedure __tagREBARBANDINFOA__Wrapper.setcx(const val : UINT);
begin
tagREBARBANDINFOA(GetRecordPtr^).cx := val;
end;
function __tagREBARBANDINFOA__Wrapper.getcx : UINT;
begin
result := tagREBARBANDINFOA(GetRecordPtr^).cx;
end;
procedure __tagREBARBANDINFOA__Wrapper.setwID(const val : UINT);
begin
tagREBARBANDINFOA(GetRecordPtr^).wID := val;
end;
function __tagREBARBANDINFOA__Wrapper.getwID : UINT;
begin
result := tagREBARBANDINFOA(GetRecordPtr^).wID;
end;
procedure __tagREBARBANDINFOA__Wrapper.setcyChild(const val : UINT);
begin
tagREBARBANDINFOA(GetRecordPtr^).cyChild := val;
end;
function __tagREBARBANDINFOA__Wrapper.getcyChild : UINT;
begin
result := tagREBARBANDINFOA(GetRecordPtr^).cyChild;
end;
procedure __tagREBARBANDINFOA__Wrapper.setcyMaxChild(const val : UINT);
begin
tagREBARBANDINFOA(GetRecordPtr^).cyMaxChild := val;
end;
function __tagREBARBANDINFOA__Wrapper.getcyMaxChild : UINT;
begin
result := tagREBARBANDINFOA(GetRecordPtr^).cyMaxChild;
end;
procedure __tagREBARBANDINFOA__Wrapper.setcyIntegral(const val : UINT);
begin
tagREBARBANDINFOA(GetRecordPtr^).cyIntegral := val;
end;
function __tagREBARBANDINFOA__Wrapper.getcyIntegral : UINT;
begin
result := tagREBARBANDINFOA(GetRecordPtr^).cyIntegral;
end;
procedure __tagREBARBANDINFOA__Wrapper.setcxIdeal(const val : UINT);
begin
tagREBARBANDINFOA(GetRecordPtr^).cxIdeal := val;
end;
function __tagREBARBANDINFOA__Wrapper.getcxIdeal : UINT;
begin
result := tagREBARBANDINFOA(GetRecordPtr^).cxIdeal;
end;
procedure __tagREBARBANDINFOA__Wrapper.setlParam(const val : lParam);
begin
tagREBARBANDINFOA(GetRecordPtr^).lParam := val;
end;
function __tagREBARBANDINFOA__Wrapper.getlParam : lParam;
begin
result := tagREBARBANDINFOA(GetRecordPtr^).lParam;
end;
procedure __tagREBARBANDINFOA__Wrapper.setcxHeader(const val : UINT);
begin
tagREBARBANDINFOA(GetRecordPtr^).cxHeader := val;
end;
function __tagREBARBANDINFOA__Wrapper.getcxHeader : UINT;
begin
result := tagREBARBANDINFOA(GetRecordPtr^).cxHeader;
end;
function __tagREBARBANDINFOW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagREBARBANDINFOW__Wrapper.setcbSize(const val : UINT);
begin
tagREBARBANDINFOW(GetRecordPtr^).cbSize := val;
end;
function __tagREBARBANDINFOW__Wrapper.getcbSize : UINT;
begin
result := tagREBARBANDINFOW(GetRecordPtr^).cbSize;
end;
procedure __tagREBARBANDINFOW__Wrapper.setfMask(const val : UINT);
begin
tagREBARBANDINFOW(GetRecordPtr^).fMask := val;
end;
function __tagREBARBANDINFOW__Wrapper.getfMask : UINT;
begin
result := tagREBARBANDINFOW(GetRecordPtr^).fMask;
end;
procedure __tagREBARBANDINFOW__Wrapper.setfStyle(const val : UINT);
begin
tagREBARBANDINFOW(GetRecordPtr^).fStyle := val;
end;
function __tagREBARBANDINFOW__Wrapper.getfStyle : UINT;
begin
result := tagREBARBANDINFOW(GetRecordPtr^).fStyle;
end;
procedure __tagREBARBANDINFOW__Wrapper.setclrFore(const val : TColorRef);
begin
tagREBARBANDINFOW(GetRecordPtr^).clrFore := val;
end;
function __tagREBARBANDINFOW__Wrapper.getclrFore : TColorRef;
begin
result := tagREBARBANDINFOW(GetRecordPtr^).clrFore;
end;
procedure __tagREBARBANDINFOW__Wrapper.setclrBack(const val : TColorRef);
begin
tagREBARBANDINFOW(GetRecordPtr^).clrBack := val;
end;
function __tagREBARBANDINFOW__Wrapper.getclrBack : TColorRef;
begin
result := tagREBARBANDINFOW(GetRecordPtr^).clrBack;
end;
procedure __tagREBARBANDINFOW__Wrapper.setcch(const val : UINT);
begin
tagREBARBANDINFOW(GetRecordPtr^).cch := val;
end;
function __tagREBARBANDINFOW__Wrapper.getcch : UINT;
begin
result := tagREBARBANDINFOW(GetRecordPtr^).cch;
end;
procedure __tagREBARBANDINFOW__Wrapper.setiImage(const val : Integer);
begin
tagREBARBANDINFOW(GetRecordPtr^).iImage := val;
end;
function __tagREBARBANDINFOW__Wrapper.getiImage : Integer;
begin
result := tagREBARBANDINFOW(GetRecordPtr^).iImage;
end;
procedure __tagREBARBANDINFOW__Wrapper.setcxMinChild(const val : UINT);
begin
tagREBARBANDINFOW(GetRecordPtr^).cxMinChild := val;
end;
function __tagREBARBANDINFOW__Wrapper.getcxMinChild : UINT;
begin
result := tagREBARBANDINFOW(GetRecordPtr^).cxMinChild;
end;
procedure __tagREBARBANDINFOW__Wrapper.setcyMinChild(const val : UINT);
begin
tagREBARBANDINFOW(GetRecordPtr^).cyMinChild := val;
end;
function __tagREBARBANDINFOW__Wrapper.getcyMinChild : UINT;
begin
result := tagREBARBANDINFOW(GetRecordPtr^).cyMinChild;
end;
procedure __tagREBARBANDINFOW__Wrapper.setcx(const val : UINT);
begin
tagREBARBANDINFOW(GetRecordPtr^).cx := val;
end;
function __tagREBARBANDINFOW__Wrapper.getcx : UINT;
begin
result := tagREBARBANDINFOW(GetRecordPtr^).cx;
end;
procedure __tagREBARBANDINFOW__Wrapper.setwID(const val : UINT);
begin
tagREBARBANDINFOW(GetRecordPtr^).wID := val;
end;
function __tagREBARBANDINFOW__Wrapper.getwID : UINT;
begin
result := tagREBARBANDINFOW(GetRecordPtr^).wID;
end;
procedure __tagREBARBANDINFOW__Wrapper.setcyChild(const val : UINT);
begin
tagREBARBANDINFOW(GetRecordPtr^).cyChild := val;
end;
function __tagREBARBANDINFOW__Wrapper.getcyChild : UINT;
begin
result := tagREBARBANDINFOW(GetRecordPtr^).cyChild;
end;
procedure __tagREBARBANDINFOW__Wrapper.setcyMaxChild(const val : UINT);
begin
tagREBARBANDINFOW(GetRecordPtr^).cyMaxChild := val;
end;
function __tagREBARBANDINFOW__Wrapper.getcyMaxChild : UINT;
begin
result := tagREBARBANDINFOW(GetRecordPtr^).cyMaxChild;
end;
procedure __tagREBARBANDINFOW__Wrapper.setcyIntegral(const val : UINT);
begin
tagREBARBANDINFOW(GetRecordPtr^).cyIntegral := val;
end;
function __tagREBARBANDINFOW__Wrapper.getcyIntegral : UINT;
begin
result := tagREBARBANDINFOW(GetRecordPtr^).cyIntegral;
end;
procedure __tagREBARBANDINFOW__Wrapper.setcxIdeal(const val : UINT);
begin
tagREBARBANDINFOW(GetRecordPtr^).cxIdeal := val;
end;
function __tagREBARBANDINFOW__Wrapper.getcxIdeal : UINT;
begin
result := tagREBARBANDINFOW(GetRecordPtr^).cxIdeal;
end;
procedure __tagREBARBANDINFOW__Wrapper.setlParam(const val : lParam);
begin
tagREBARBANDINFOW(GetRecordPtr^).lParam := val;
end;
function __tagREBARBANDINFOW__Wrapper.getlParam : lParam;
begin
result := tagREBARBANDINFOW(GetRecordPtr^).lParam;
end;
procedure __tagREBARBANDINFOW__Wrapper.setcxHeader(const val : UINT);
begin
tagREBARBANDINFOW(GetRecordPtr^).cxHeader := val;
end;
function __tagREBARBANDINFOW__Wrapper.getcxHeader : UINT;
begin
result := tagREBARBANDINFOW(GetRecordPtr^).cxHeader;
end;
function __tagREBARINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagREBARINFO__Wrapper.setcbSize(const val : UINT);
begin
tagREBARINFO(GetRecordPtr^).cbSize := val;
end;
function __tagREBARINFO__Wrapper.getcbSize : UINT;
begin
result := tagREBARINFO(GetRecordPtr^).cbSize;
end;
procedure __tagREBARINFO__Wrapper.setfMask(const val : UINT);
begin
tagREBARINFO(GetRecordPtr^).fMask := val;
end;
function __tagREBARINFO__Wrapper.getfMask : UINT;
begin
result := tagREBARINFO(GetRecordPtr^).fMask;
end;
procedure __tagREBARINFO__Wrapper.sethiml(const val : HIMAGELIST);
begin
tagREBARINFO(GetRecordPtr^).himl := val;
end;
function __tagREBARINFO__Wrapper.gethiml : HIMAGELIST;
begin
result := tagREBARINFO(GetRecordPtr^).himl;
end;
function __tagTBADDBITMAP__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTBADDBITMAP__Wrapper.sethInst(const val : THandle);
begin
tagTBADDBITMAP(GetRecordPtr^).hInst := val;
end;
function __tagTBADDBITMAP__Wrapper.gethInst : THandle;
begin
result := tagTBADDBITMAP(GetRecordPtr^).hInst;
end;
procedure __tagTBADDBITMAP__Wrapper.setnID(const val : UINT);
begin
tagTBADDBITMAP(GetRecordPtr^).nID := val;
end;
function __tagTBADDBITMAP__Wrapper.getnID : UINT;
begin
result := tagTBADDBITMAP(GetRecordPtr^).nID;
end;
function __tagTBSAVEPARAMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTBSAVEPARAMS__Wrapper.sethkr(const val : THandle);
begin
tagTBSAVEPARAMS(GetRecordPtr^).hkr := val;
end;
function __tagTBSAVEPARAMS__Wrapper.gethkr : THandle;
begin
result := tagTBSAVEPARAMS(GetRecordPtr^).hkr;
end;
function __tagTBSAVEPARAMSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTBSAVEPARAMSA__Wrapper.sethkr(const val : THandle);
begin
tagTBSAVEPARAMSA(GetRecordPtr^).hkr := val;
end;
function __tagTBSAVEPARAMSA__Wrapper.gethkr : THandle;
begin
result := tagTBSAVEPARAMSA(GetRecordPtr^).hkr;
end;
function __tagTBSAVEPARAMSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTBSAVEPARAMSW__Wrapper.sethkr(const val : THandle);
begin
tagTBSAVEPARAMSW(GetRecordPtr^).hkr := val;
end;
function __tagTBSAVEPARAMSW__Wrapper.gethkr : THandle;
begin
result := tagTBSAVEPARAMSW(GetRecordPtr^).hkr;
end;
function __tagTCHITTESTINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTCHITTESTINFO__Wrapper.setFlags(const val : UINT);
begin
tagTCHITTESTINFO(GetRecordPtr^).Flags := val;
end;
function __tagTCHITTESTINFO__Wrapper.getFlags : UINT;
begin
result := tagTCHITTESTINFO(GetRecordPtr^).Flags;
end;
function __tagTCITEM__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTCITEM__Wrapper.setMask(const val : UINT);
begin
tagTCITEM(GetRecordPtr^).Mask := val;
end;
function __tagTCITEM__Wrapper.getMask : UINT;
begin
result := tagTCITEM(GetRecordPtr^).Mask;
end;
procedure __tagTCITEM__Wrapper.setdwState(const val : UINT);
begin
tagTCITEM(GetRecordPtr^).dwState := val;
end;
function __tagTCITEM__Wrapper.getdwState : UINT;
begin
result := tagTCITEM(GetRecordPtr^).dwState;
end;
procedure __tagTCITEM__Wrapper.setdwStateMask(const val : UINT);
begin
tagTCITEM(GetRecordPtr^).dwStateMask := val;
end;
function __tagTCITEM__Wrapper.getdwStateMask : UINT;
begin
result := tagTCITEM(GetRecordPtr^).dwStateMask;
end;
procedure __tagTCITEM__Wrapper.setcchTextMax(const val : Integer);
begin
tagTCITEM(GetRecordPtr^).cchTextMax := val;
end;
function __tagTCITEM__Wrapper.getcchTextMax : Integer;
begin
result := tagTCITEM(GetRecordPtr^).cchTextMax;
end;
procedure __tagTCITEM__Wrapper.setiImage(const val : Integer);
begin
tagTCITEM(GetRecordPtr^).iImage := val;
end;
function __tagTCITEM__Wrapper.getiImage : Integer;
begin
result := tagTCITEM(GetRecordPtr^).iImage;
end;
procedure __tagTCITEM__Wrapper.setlParam(const val : lParam);
begin
tagTCITEM(GetRecordPtr^).lParam := val;
end;
function __tagTCITEM__Wrapper.getlParam : lParam;
begin
result := tagTCITEM(GetRecordPtr^).lParam;
end;
function __tagTCITEMA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTCITEMA__Wrapper.setMask(const val : UINT);
begin
tagTCITEMA(GetRecordPtr^).Mask := val;
end;
function __tagTCITEMA__Wrapper.getMask : UINT;
begin
result := tagTCITEMA(GetRecordPtr^).Mask;
end;
procedure __tagTCITEMA__Wrapper.setdwState(const val : UINT);
begin
tagTCITEMA(GetRecordPtr^).dwState := val;
end;
function __tagTCITEMA__Wrapper.getdwState : UINT;
begin
result := tagTCITEMA(GetRecordPtr^).dwState;
end;
procedure __tagTCITEMA__Wrapper.setdwStateMask(const val : UINT);
begin
tagTCITEMA(GetRecordPtr^).dwStateMask := val;
end;
function __tagTCITEMA__Wrapper.getdwStateMask : UINT;
begin
result := tagTCITEMA(GetRecordPtr^).dwStateMask;
end;
procedure __tagTCITEMA__Wrapper.setcchTextMax(const val : Integer);
begin
tagTCITEMA(GetRecordPtr^).cchTextMax := val;
end;
function __tagTCITEMA__Wrapper.getcchTextMax : Integer;
begin
result := tagTCITEMA(GetRecordPtr^).cchTextMax;
end;
procedure __tagTCITEMA__Wrapper.setiImage(const val : Integer);
begin
tagTCITEMA(GetRecordPtr^).iImage := val;
end;
function __tagTCITEMA__Wrapper.getiImage : Integer;
begin
result := tagTCITEMA(GetRecordPtr^).iImage;
end;
procedure __tagTCITEMA__Wrapper.setlParam(const val : lParam);
begin
tagTCITEMA(GetRecordPtr^).lParam := val;
end;
function __tagTCITEMA__Wrapper.getlParam : lParam;
begin
result := tagTCITEMA(GetRecordPtr^).lParam;
end;
function __tagTCITEMHEADER__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTCITEMHEADER__Wrapper.setMask(const val : UINT);
begin
tagTCITEMHEADER(GetRecordPtr^).Mask := val;
end;
function __tagTCITEMHEADER__Wrapper.getMask : UINT;
begin
result := tagTCITEMHEADER(GetRecordPtr^).Mask;
end;
procedure __tagTCITEMHEADER__Wrapper.setlpReserved1(const val : UINT);
begin
tagTCITEMHEADER(GetRecordPtr^).lpReserved1 := val;
end;
function __tagTCITEMHEADER__Wrapper.getlpReserved1 : UINT;
begin
result := tagTCITEMHEADER(GetRecordPtr^).lpReserved1;
end;
procedure __tagTCITEMHEADER__Wrapper.setlpReserved2(const val : UINT);
begin
tagTCITEMHEADER(GetRecordPtr^).lpReserved2 := val;
end;
function __tagTCITEMHEADER__Wrapper.getlpReserved2 : UINT;
begin
result := tagTCITEMHEADER(GetRecordPtr^).lpReserved2;
end;
procedure __tagTCITEMHEADER__Wrapper.setcchTextMax(const val : Integer);
begin
tagTCITEMHEADER(GetRecordPtr^).cchTextMax := val;
end;
function __tagTCITEMHEADER__Wrapper.getcchTextMax : Integer;
begin
result := tagTCITEMHEADER(GetRecordPtr^).cchTextMax;
end;
procedure __tagTCITEMHEADER__Wrapper.setiImage(const val : Integer);
begin
tagTCITEMHEADER(GetRecordPtr^).iImage := val;
end;
function __tagTCITEMHEADER__Wrapper.getiImage : Integer;
begin
result := tagTCITEMHEADER(GetRecordPtr^).iImage;
end;
function __tagTCITEMHEADERA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTCITEMHEADERA__Wrapper.setMask(const val : UINT);
begin
tagTCITEMHEADERA(GetRecordPtr^).Mask := val;
end;
function __tagTCITEMHEADERA__Wrapper.getMask : UINT;
begin
result := tagTCITEMHEADERA(GetRecordPtr^).Mask;
end;
procedure __tagTCITEMHEADERA__Wrapper.setlpReserved1(const val : UINT);
begin
tagTCITEMHEADERA(GetRecordPtr^).lpReserved1 := val;
end;
function __tagTCITEMHEADERA__Wrapper.getlpReserved1 : UINT;
begin
result := tagTCITEMHEADERA(GetRecordPtr^).lpReserved1;
end;
procedure __tagTCITEMHEADERA__Wrapper.setlpReserved2(const val : UINT);
begin
tagTCITEMHEADERA(GetRecordPtr^).lpReserved2 := val;
end;
function __tagTCITEMHEADERA__Wrapper.getlpReserved2 : UINT;
begin
result := tagTCITEMHEADERA(GetRecordPtr^).lpReserved2;
end;
procedure __tagTCITEMHEADERA__Wrapper.setcchTextMax(const val : Integer);
begin
tagTCITEMHEADERA(GetRecordPtr^).cchTextMax := val;
end;
function __tagTCITEMHEADERA__Wrapper.getcchTextMax : Integer;
begin
result := tagTCITEMHEADERA(GetRecordPtr^).cchTextMax;
end;
procedure __tagTCITEMHEADERA__Wrapper.setiImage(const val : Integer);
begin
tagTCITEMHEADERA(GetRecordPtr^).iImage := val;
end;
function __tagTCITEMHEADERA__Wrapper.getiImage : Integer;
begin
result := tagTCITEMHEADERA(GetRecordPtr^).iImage;
end;
function __tagTCITEMHEADERW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTCITEMHEADERW__Wrapper.setMask(const val : UINT);
begin
tagTCITEMHEADERW(GetRecordPtr^).Mask := val;
end;
function __tagTCITEMHEADERW__Wrapper.getMask : UINT;
begin
result := tagTCITEMHEADERW(GetRecordPtr^).Mask;
end;
procedure __tagTCITEMHEADERW__Wrapper.setlpReserved1(const val : UINT);
begin
tagTCITEMHEADERW(GetRecordPtr^).lpReserved1 := val;
end;
function __tagTCITEMHEADERW__Wrapper.getlpReserved1 : UINT;
begin
result := tagTCITEMHEADERW(GetRecordPtr^).lpReserved1;
end;
procedure __tagTCITEMHEADERW__Wrapper.setlpReserved2(const val : UINT);
begin
tagTCITEMHEADERW(GetRecordPtr^).lpReserved2 := val;
end;
function __tagTCITEMHEADERW__Wrapper.getlpReserved2 : UINT;
begin
result := tagTCITEMHEADERW(GetRecordPtr^).lpReserved2;
end;
procedure __tagTCITEMHEADERW__Wrapper.setcchTextMax(const val : Integer);
begin
tagTCITEMHEADERW(GetRecordPtr^).cchTextMax := val;
end;
function __tagTCITEMHEADERW__Wrapper.getcchTextMax : Integer;
begin
result := tagTCITEMHEADERW(GetRecordPtr^).cchTextMax;
end;
procedure __tagTCITEMHEADERW__Wrapper.setiImage(const val : Integer);
begin
tagTCITEMHEADERW(GetRecordPtr^).iImage := val;
end;
function __tagTCITEMHEADERW__Wrapper.getiImage : Integer;
begin
result := tagTCITEMHEADERW(GetRecordPtr^).iImage;
end;
function __tagTCITEMW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTCITEMW__Wrapper.setMask(const val : UINT);
begin
tagTCITEMW(GetRecordPtr^).Mask := val;
end;
function __tagTCITEMW__Wrapper.getMask : UINT;
begin
result := tagTCITEMW(GetRecordPtr^).Mask;
end;
procedure __tagTCITEMW__Wrapper.setdwState(const val : UINT);
begin
tagTCITEMW(GetRecordPtr^).dwState := val;
end;
function __tagTCITEMW__Wrapper.getdwState : UINT;
begin
result := tagTCITEMW(GetRecordPtr^).dwState;
end;
procedure __tagTCITEMW__Wrapper.setdwStateMask(const val : UINT);
begin
tagTCITEMW(GetRecordPtr^).dwStateMask := val;
end;
function __tagTCITEMW__Wrapper.getdwStateMask : UINT;
begin
result := tagTCITEMW(GetRecordPtr^).dwStateMask;
end;
procedure __tagTCITEMW__Wrapper.setcchTextMax(const val : Integer);
begin
tagTCITEMW(GetRecordPtr^).cchTextMax := val;
end;
function __tagTCITEMW__Wrapper.getcchTextMax : Integer;
begin
result := tagTCITEMW(GetRecordPtr^).cchTextMax;
end;
procedure __tagTCITEMW__Wrapper.setiImage(const val : Integer);
begin
tagTCITEMW(GetRecordPtr^).iImage := val;
end;
function __tagTCITEMW__Wrapper.getiImage : Integer;
begin
result := tagTCITEMW(GetRecordPtr^).iImage;
end;
procedure __tagTCITEMW__Wrapper.setlParam(const val : lParam);
begin
tagTCITEMW(GetRecordPtr^).lParam := val;
end;
function __tagTCITEMW__Wrapper.getlParam : lParam;
begin
result := tagTCITEMW(GetRecordPtr^).lParam;
end;
function __tagTCKEYDOWN__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTCKEYDOWN__Wrapper.setwVKey(const val : Word);
begin
tagTCKEYDOWN(GetRecordPtr^).wVKey := val;
end;
function __tagTCKEYDOWN__Wrapper.getwVKey : Word;
begin
result := tagTCKEYDOWN(GetRecordPtr^).wVKey;
end;
procedure __tagTCKEYDOWN__Wrapper.setFlags(const val : UINT);
begin
tagTCKEYDOWN(GetRecordPtr^).Flags := val;
end;
function __tagTCKEYDOWN__Wrapper.getFlags : UINT;
begin
result := tagTCKEYDOWN(GetRecordPtr^).Flags;
end;
function __tagTOOLINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTOOLINFO__Wrapper.setcbSize(const val : UINT);
begin
tagTOOLINFO(GetRecordPtr^).cbSize := val;
end;
function __tagTOOLINFO__Wrapper.getcbSize : UINT;
begin
result := tagTOOLINFO(GetRecordPtr^).cbSize;
end;
procedure __tagTOOLINFO__Wrapper.setuFlags(const val : UINT);
begin
tagTOOLINFO(GetRecordPtr^).uFlags := val;
end;
function __tagTOOLINFO__Wrapper.getuFlags : UINT;
begin
result := tagTOOLINFO(GetRecordPtr^).uFlags;
end;
procedure __tagTOOLINFO__Wrapper.setuId(const val : UINT);
begin
tagTOOLINFO(GetRecordPtr^).uId := val;
end;
function __tagTOOLINFO__Wrapper.getuId : UINT;
begin
result := tagTOOLINFO(GetRecordPtr^).uId;
end;
procedure __tagTOOLINFO__Wrapper.sethInst(const val : THandle);
begin
tagTOOLINFO(GetRecordPtr^).hInst := val;
end;
function __tagTOOLINFO__Wrapper.gethInst : THandle;
begin
result := tagTOOLINFO(GetRecordPtr^).hInst;
end;
procedure __tagTOOLINFO__Wrapper.setlParam(const val : lParam);
begin
tagTOOLINFO(GetRecordPtr^).lParam := val;
end;
function __tagTOOLINFO__Wrapper.getlParam : lParam;
begin
result := tagTOOLINFO(GetRecordPtr^).lParam;
end;
function __tagTOOLINFOA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTOOLINFOA__Wrapper.setcbSize(const val : UINT);
begin
tagTOOLINFOA(GetRecordPtr^).cbSize := val;
end;
function __tagTOOLINFOA__Wrapper.getcbSize : UINT;
begin
result := tagTOOLINFOA(GetRecordPtr^).cbSize;
end;
procedure __tagTOOLINFOA__Wrapper.setuFlags(const val : UINT);
begin
tagTOOLINFOA(GetRecordPtr^).uFlags := val;
end;
function __tagTOOLINFOA__Wrapper.getuFlags : UINT;
begin
result := tagTOOLINFOA(GetRecordPtr^).uFlags;
end;
procedure __tagTOOLINFOA__Wrapper.setuId(const val : UINT);
begin
tagTOOLINFOA(GetRecordPtr^).uId := val;
end;
function __tagTOOLINFOA__Wrapper.getuId : UINT;
begin
result := tagTOOLINFOA(GetRecordPtr^).uId;
end;
procedure __tagTOOLINFOA__Wrapper.sethInst(const val : THandle);
begin
tagTOOLINFOA(GetRecordPtr^).hInst := val;
end;
function __tagTOOLINFOA__Wrapper.gethInst : THandle;
begin
result := tagTOOLINFOA(GetRecordPtr^).hInst;
end;
procedure __tagTOOLINFOA__Wrapper.setlParam(const val : lParam);
begin
tagTOOLINFOA(GetRecordPtr^).lParam := val;
end;
function __tagTOOLINFOA__Wrapper.getlParam : lParam;
begin
result := tagTOOLINFOA(GetRecordPtr^).lParam;
end;
function __tagTOOLINFOW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTOOLINFOW__Wrapper.setcbSize(const val : UINT);
begin
tagTOOLINFOW(GetRecordPtr^).cbSize := val;
end;
function __tagTOOLINFOW__Wrapper.getcbSize : UINT;
begin
result := tagTOOLINFOW(GetRecordPtr^).cbSize;
end;
procedure __tagTOOLINFOW__Wrapper.setuFlags(const val : UINT);
begin
tagTOOLINFOW(GetRecordPtr^).uFlags := val;
end;
function __tagTOOLINFOW__Wrapper.getuFlags : UINT;
begin
result := tagTOOLINFOW(GetRecordPtr^).uFlags;
end;
procedure __tagTOOLINFOW__Wrapper.setuId(const val : UINT);
begin
tagTOOLINFOW(GetRecordPtr^).uId := val;
end;
function __tagTOOLINFOW__Wrapper.getuId : UINT;
begin
result := tagTOOLINFOW(GetRecordPtr^).uId;
end;
procedure __tagTOOLINFOW__Wrapper.sethInst(const val : THandle);
begin
tagTOOLINFOW(GetRecordPtr^).hInst := val;
end;
function __tagTOOLINFOW__Wrapper.gethInst : THandle;
begin
result := tagTOOLINFOW(GetRecordPtr^).hInst;
end;
procedure __tagTOOLINFOW__Wrapper.setlParam(const val : lParam);
begin
tagTOOLINFOW(GetRecordPtr^).lParam := val;
end;
function __tagTOOLINFOW__Wrapper.getlParam : lParam;
begin
result := tagTOOLINFOW(GetRecordPtr^).lParam;
end;
function __tagTOOLTIPTEXT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTOOLTIPTEXT__Wrapper.sethInst(const val : hInst);
begin
tagTOOLTIPTEXT(GetRecordPtr^).hInst := val;
end;
function __tagTOOLTIPTEXT__Wrapper.gethInst : hInst;
begin
result := tagTOOLTIPTEXT(GetRecordPtr^).hInst;
end;
procedure __tagTOOLTIPTEXT__Wrapper.setuFlags(const val : UINT);
begin
tagTOOLTIPTEXT(GetRecordPtr^).uFlags := val;
end;
function __tagTOOLTIPTEXT__Wrapper.getuFlags : UINT;
begin
result := tagTOOLTIPTEXT(GetRecordPtr^).uFlags;
end;
procedure __tagTOOLTIPTEXT__Wrapper.setlParam(const val : lParam);
begin
tagTOOLTIPTEXT(GetRecordPtr^).lParam := val;
end;
function __tagTOOLTIPTEXT__Wrapper.getlParam : lParam;
begin
result := tagTOOLTIPTEXT(GetRecordPtr^).lParam;
end;
function __tagTOOLTIPTEXTA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTOOLTIPTEXTA__Wrapper.sethInst(const val : hInst);
begin
tagTOOLTIPTEXTA(GetRecordPtr^).hInst := val;
end;
function __tagTOOLTIPTEXTA__Wrapper.gethInst : hInst;
begin
result := tagTOOLTIPTEXTA(GetRecordPtr^).hInst;
end;
procedure __tagTOOLTIPTEXTA__Wrapper.setuFlags(const val : UINT);
begin
tagTOOLTIPTEXTA(GetRecordPtr^).uFlags := val;
end;
function __tagTOOLTIPTEXTA__Wrapper.getuFlags : UINT;
begin
result := tagTOOLTIPTEXTA(GetRecordPtr^).uFlags;
end;
procedure __tagTOOLTIPTEXTA__Wrapper.setlParam(const val : lParam);
begin
tagTOOLTIPTEXTA(GetRecordPtr^).lParam := val;
end;
function __tagTOOLTIPTEXTA__Wrapper.getlParam : lParam;
begin
result := tagTOOLTIPTEXTA(GetRecordPtr^).lParam;
end;
function __tagTOOLTIPTEXTW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTOOLTIPTEXTW__Wrapper.sethInst(const val : hInst);
begin
tagTOOLTIPTEXTW(GetRecordPtr^).hInst := val;
end;
function __tagTOOLTIPTEXTW__Wrapper.gethInst : hInst;
begin
result := tagTOOLTIPTEXTW(GetRecordPtr^).hInst;
end;
procedure __tagTOOLTIPTEXTW__Wrapper.setuFlags(const val : UINT);
begin
tagTOOLTIPTEXTW(GetRecordPtr^).uFlags := val;
end;
function __tagTOOLTIPTEXTW__Wrapper.getuFlags : UINT;
begin
result := tagTOOLTIPTEXTW(GetRecordPtr^).uFlags;
end;
procedure __tagTOOLTIPTEXTW__Wrapper.setlParam(const val : lParam);
begin
tagTOOLTIPTEXTW(GetRecordPtr^).lParam := val;
end;
function __tagTOOLTIPTEXTW__Wrapper.getlParam : lParam;
begin
result := tagTOOLTIPTEXTW(GetRecordPtr^).lParam;
end;
function __tagTRACKMOUSEEVENT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTRACKMOUSEEVENT__Wrapper.setcbSize(const val : DWORD);
begin
tagTRACKMOUSEEVENT(GetRecordPtr^).cbSize := val;
end;
function __tagTRACKMOUSEEVENT__Wrapper.getcbSize : DWORD;
begin
result := tagTRACKMOUSEEVENT(GetRecordPtr^).cbSize;
end;
procedure __tagTRACKMOUSEEVENT__Wrapper.setdwFlags(const val : DWORD);
begin
tagTRACKMOUSEEVENT(GetRecordPtr^).dwFlags := val;
end;
function __tagTRACKMOUSEEVENT__Wrapper.getdwFlags : DWORD;
begin
result := tagTRACKMOUSEEVENT(GetRecordPtr^).dwFlags;
end;
procedure __tagTRACKMOUSEEVENT__Wrapper.setdwHoverTime(const val : DWORD);
begin
tagTRACKMOUSEEVENT(GetRecordPtr^).dwHoverTime := val;
end;
function __tagTRACKMOUSEEVENT__Wrapper.getdwHoverTime : DWORD;
begin
result := tagTRACKMOUSEEVENT(GetRecordPtr^).dwHoverTime;
end;
function __tagTVDISPINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __tagTVDISPINFOA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __tagTVDISPINFOW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __tagTVHITTESTINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTVHITTESTINFO__Wrapper.setFlags(const val : UINT);
begin
tagTVHITTESTINFO(GetRecordPtr^).Flags := val;
end;
function __tagTVHITTESTINFO__Wrapper.getFlags : UINT;
begin
result := tagTVHITTESTINFO(GetRecordPtr^).Flags;
end;
function __tagTVINSERTSTRUCT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __tagTVINSERTSTRUCTA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __tagTVINSERTSTRUCTW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __tagTVITEM__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTVITEM__Wrapper.setMask(const val : UINT);
begin
tagTVITEM(GetRecordPtr^).Mask := val;
end;
function __tagTVITEM__Wrapper.getMask : UINT;
begin
result := tagTVITEM(GetRecordPtr^).Mask;
end;
procedure __tagTVITEM__Wrapper.setstate(const val : UINT);
begin
tagTVITEM(GetRecordPtr^).state := val;
end;
function __tagTVITEM__Wrapper.getstate : UINT;
begin
result := tagTVITEM(GetRecordPtr^).state;
end;
procedure __tagTVITEM__Wrapper.setstateMask(const val : UINT);
begin
tagTVITEM(GetRecordPtr^).stateMask := val;
end;
function __tagTVITEM__Wrapper.getstateMask : UINT;
begin
result := tagTVITEM(GetRecordPtr^).stateMask;
end;
procedure __tagTVITEM__Wrapper.setcchTextMax(const val : Integer);
begin
tagTVITEM(GetRecordPtr^).cchTextMax := val;
end;
function __tagTVITEM__Wrapper.getcchTextMax : Integer;
begin
result := tagTVITEM(GetRecordPtr^).cchTextMax;
end;
procedure __tagTVITEM__Wrapper.setiImage(const val : Integer);
begin
tagTVITEM(GetRecordPtr^).iImage := val;
end;
function __tagTVITEM__Wrapper.getiImage : Integer;
begin
result := tagTVITEM(GetRecordPtr^).iImage;
end;
procedure __tagTVITEM__Wrapper.setiSelectedImage(const val : Integer);
begin
tagTVITEM(GetRecordPtr^).iSelectedImage := val;
end;
function __tagTVITEM__Wrapper.getiSelectedImage : Integer;
begin
result := tagTVITEM(GetRecordPtr^).iSelectedImage;
end;
procedure __tagTVITEM__Wrapper.setcChildren(const val : Integer);
begin
tagTVITEM(GetRecordPtr^).cChildren := val;
end;
function __tagTVITEM__Wrapper.getcChildren : Integer;
begin
result := tagTVITEM(GetRecordPtr^).cChildren;
end;
procedure __tagTVITEM__Wrapper.setlParam(const val : lParam);
begin
tagTVITEM(GetRecordPtr^).lParam := val;
end;
function __tagTVITEM__Wrapper.getlParam : lParam;
begin
result := tagTVITEM(GetRecordPtr^).lParam;
end;
function __tagTVITEMA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTVITEMA__Wrapper.setMask(const val : UINT);
begin
tagTVITEMA(GetRecordPtr^).Mask := val;
end;
function __tagTVITEMA__Wrapper.getMask : UINT;
begin
result := tagTVITEMA(GetRecordPtr^).Mask;
end;
procedure __tagTVITEMA__Wrapper.setstate(const val : UINT);
begin
tagTVITEMA(GetRecordPtr^).state := val;
end;
function __tagTVITEMA__Wrapper.getstate : UINT;
begin
result := tagTVITEMA(GetRecordPtr^).state;
end;
procedure __tagTVITEMA__Wrapper.setstateMask(const val : UINT);
begin
tagTVITEMA(GetRecordPtr^).stateMask := val;
end;
function __tagTVITEMA__Wrapper.getstateMask : UINT;
begin
result := tagTVITEMA(GetRecordPtr^).stateMask;
end;
procedure __tagTVITEMA__Wrapper.setcchTextMax(const val : Integer);
begin
tagTVITEMA(GetRecordPtr^).cchTextMax := val;
end;
function __tagTVITEMA__Wrapper.getcchTextMax : Integer;
begin
result := tagTVITEMA(GetRecordPtr^).cchTextMax;
end;
procedure __tagTVITEMA__Wrapper.setiImage(const val : Integer);
begin
tagTVITEMA(GetRecordPtr^).iImage := val;
end;
function __tagTVITEMA__Wrapper.getiImage : Integer;
begin
result := tagTVITEMA(GetRecordPtr^).iImage;
end;
procedure __tagTVITEMA__Wrapper.setiSelectedImage(const val : Integer);
begin
tagTVITEMA(GetRecordPtr^).iSelectedImage := val;
end;
function __tagTVITEMA__Wrapper.getiSelectedImage : Integer;
begin
result := tagTVITEMA(GetRecordPtr^).iSelectedImage;
end;
procedure __tagTVITEMA__Wrapper.setcChildren(const val : Integer);
begin
tagTVITEMA(GetRecordPtr^).cChildren := val;
end;
function __tagTVITEMA__Wrapper.getcChildren : Integer;
begin
result := tagTVITEMA(GetRecordPtr^).cChildren;
end;
procedure __tagTVITEMA__Wrapper.setlParam(const val : lParam);
begin
tagTVITEMA(GetRecordPtr^).lParam := val;
end;
function __tagTVITEMA__Wrapper.getlParam : lParam;
begin
result := tagTVITEMA(GetRecordPtr^).lParam;
end;
function __tagTVITEMEX__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTVITEMEX__Wrapper.setMask(const val : UINT);
begin
tagTVITEMEX(GetRecordPtr^).Mask := val;
end;
function __tagTVITEMEX__Wrapper.getMask : UINT;
begin
result := tagTVITEMEX(GetRecordPtr^).Mask;
end;
procedure __tagTVITEMEX__Wrapper.setstate(const val : UINT);
begin
tagTVITEMEX(GetRecordPtr^).state := val;
end;
function __tagTVITEMEX__Wrapper.getstate : UINT;
begin
result := tagTVITEMEX(GetRecordPtr^).state;
end;
procedure __tagTVITEMEX__Wrapper.setstateMask(const val : UINT);
begin
tagTVITEMEX(GetRecordPtr^).stateMask := val;
end;
function __tagTVITEMEX__Wrapper.getstateMask : UINT;
begin
result := tagTVITEMEX(GetRecordPtr^).stateMask;
end;
procedure __tagTVITEMEX__Wrapper.setcchTextMax(const val : Integer);
begin
tagTVITEMEX(GetRecordPtr^).cchTextMax := val;
end;
function __tagTVITEMEX__Wrapper.getcchTextMax : Integer;
begin
result := tagTVITEMEX(GetRecordPtr^).cchTextMax;
end;
procedure __tagTVITEMEX__Wrapper.setiImage(const val : Integer);
begin
tagTVITEMEX(GetRecordPtr^).iImage := val;
end;
function __tagTVITEMEX__Wrapper.getiImage : Integer;
begin
result := tagTVITEMEX(GetRecordPtr^).iImage;
end;
procedure __tagTVITEMEX__Wrapper.setiSelectedImage(const val : Integer);
begin
tagTVITEMEX(GetRecordPtr^).iSelectedImage := val;
end;
function __tagTVITEMEX__Wrapper.getiSelectedImage : Integer;
begin
result := tagTVITEMEX(GetRecordPtr^).iSelectedImage;
end;
procedure __tagTVITEMEX__Wrapper.setcChildren(const val : Integer);
begin
tagTVITEMEX(GetRecordPtr^).cChildren := val;
end;
function __tagTVITEMEX__Wrapper.getcChildren : Integer;
begin
result := tagTVITEMEX(GetRecordPtr^).cChildren;
end;
procedure __tagTVITEMEX__Wrapper.setlParam(const val : lParam);
begin
tagTVITEMEX(GetRecordPtr^).lParam := val;
end;
function __tagTVITEMEX__Wrapper.getlParam : lParam;
begin
result := tagTVITEMEX(GetRecordPtr^).lParam;
end;
procedure __tagTVITEMEX__Wrapper.setiIntegral(const val : Integer);
begin
tagTVITEMEX(GetRecordPtr^).iIntegral := val;
end;
function __tagTVITEMEX__Wrapper.getiIntegral : Integer;
begin
result := tagTVITEMEX(GetRecordPtr^).iIntegral;
end;
function __tagTVITEMEXA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTVITEMEXA__Wrapper.setMask(const val : UINT);
begin
tagTVITEMEXA(GetRecordPtr^).Mask := val;
end;
function __tagTVITEMEXA__Wrapper.getMask : UINT;
begin
result := tagTVITEMEXA(GetRecordPtr^).Mask;
end;
procedure __tagTVITEMEXA__Wrapper.setstate(const val : UINT);
begin
tagTVITEMEXA(GetRecordPtr^).state := val;
end;
function __tagTVITEMEXA__Wrapper.getstate : UINT;
begin
result := tagTVITEMEXA(GetRecordPtr^).state;
end;
procedure __tagTVITEMEXA__Wrapper.setstateMask(const val : UINT);
begin
tagTVITEMEXA(GetRecordPtr^).stateMask := val;
end;
function __tagTVITEMEXA__Wrapper.getstateMask : UINT;
begin
result := tagTVITEMEXA(GetRecordPtr^).stateMask;
end;
procedure __tagTVITEMEXA__Wrapper.setcchTextMax(const val : Integer);
begin
tagTVITEMEXA(GetRecordPtr^).cchTextMax := val;
end;
function __tagTVITEMEXA__Wrapper.getcchTextMax : Integer;
begin
result := tagTVITEMEXA(GetRecordPtr^).cchTextMax;
end;
procedure __tagTVITEMEXA__Wrapper.setiImage(const val : Integer);
begin
tagTVITEMEXA(GetRecordPtr^).iImage := val;
end;
function __tagTVITEMEXA__Wrapper.getiImage : Integer;
begin
result := tagTVITEMEXA(GetRecordPtr^).iImage;
end;
procedure __tagTVITEMEXA__Wrapper.setiSelectedImage(const val : Integer);
begin
tagTVITEMEXA(GetRecordPtr^).iSelectedImage := val;
end;
function __tagTVITEMEXA__Wrapper.getiSelectedImage : Integer;
begin
result := tagTVITEMEXA(GetRecordPtr^).iSelectedImage;
end;
procedure __tagTVITEMEXA__Wrapper.setcChildren(const val : Integer);
begin
tagTVITEMEXA(GetRecordPtr^).cChildren := val;
end;
function __tagTVITEMEXA__Wrapper.getcChildren : Integer;
begin
result := tagTVITEMEXA(GetRecordPtr^).cChildren;
end;
procedure __tagTVITEMEXA__Wrapper.setlParam(const val : lParam);
begin
tagTVITEMEXA(GetRecordPtr^).lParam := val;
end;
function __tagTVITEMEXA__Wrapper.getlParam : lParam;
begin
result := tagTVITEMEXA(GetRecordPtr^).lParam;
end;
procedure __tagTVITEMEXA__Wrapper.setiIntegral(const val : Integer);
begin
tagTVITEMEXA(GetRecordPtr^).iIntegral := val;
end;
function __tagTVITEMEXA__Wrapper.getiIntegral : Integer;
begin
result := tagTVITEMEXA(GetRecordPtr^).iIntegral;
end;
function __tagTVITEMEXW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTVITEMEXW__Wrapper.setMask(const val : UINT);
begin
tagTVITEMEXW(GetRecordPtr^).Mask := val;
end;
function __tagTVITEMEXW__Wrapper.getMask : UINT;
begin
result := tagTVITEMEXW(GetRecordPtr^).Mask;
end;
procedure __tagTVITEMEXW__Wrapper.setstate(const val : UINT);
begin
tagTVITEMEXW(GetRecordPtr^).state := val;
end;
function __tagTVITEMEXW__Wrapper.getstate : UINT;
begin
result := tagTVITEMEXW(GetRecordPtr^).state;
end;
procedure __tagTVITEMEXW__Wrapper.setstateMask(const val : UINT);
begin
tagTVITEMEXW(GetRecordPtr^).stateMask := val;
end;
function __tagTVITEMEXW__Wrapper.getstateMask : UINT;
begin
result := tagTVITEMEXW(GetRecordPtr^).stateMask;
end;
procedure __tagTVITEMEXW__Wrapper.setcchTextMax(const val : Integer);
begin
tagTVITEMEXW(GetRecordPtr^).cchTextMax := val;
end;
function __tagTVITEMEXW__Wrapper.getcchTextMax : Integer;
begin
result := tagTVITEMEXW(GetRecordPtr^).cchTextMax;
end;
procedure __tagTVITEMEXW__Wrapper.setiImage(const val : Integer);
begin
tagTVITEMEXW(GetRecordPtr^).iImage := val;
end;
function __tagTVITEMEXW__Wrapper.getiImage : Integer;
begin
result := tagTVITEMEXW(GetRecordPtr^).iImage;
end;
procedure __tagTVITEMEXW__Wrapper.setiSelectedImage(const val : Integer);
begin
tagTVITEMEXW(GetRecordPtr^).iSelectedImage := val;
end;
function __tagTVITEMEXW__Wrapper.getiSelectedImage : Integer;
begin
result := tagTVITEMEXW(GetRecordPtr^).iSelectedImage;
end;
procedure __tagTVITEMEXW__Wrapper.setcChildren(const val : Integer);
begin
tagTVITEMEXW(GetRecordPtr^).cChildren := val;
end;
function __tagTVITEMEXW__Wrapper.getcChildren : Integer;
begin
result := tagTVITEMEXW(GetRecordPtr^).cChildren;
end;
procedure __tagTVITEMEXW__Wrapper.setlParam(const val : lParam);
begin
tagTVITEMEXW(GetRecordPtr^).lParam := val;
end;
function __tagTVITEMEXW__Wrapper.getlParam : lParam;
begin
result := tagTVITEMEXW(GetRecordPtr^).lParam;
end;
procedure __tagTVITEMEXW__Wrapper.setiIntegral(const val : Integer);
begin
tagTVITEMEXW(GetRecordPtr^).iIntegral := val;
end;
function __tagTVITEMEXW__Wrapper.getiIntegral : Integer;
begin
result := tagTVITEMEXW(GetRecordPtr^).iIntegral;
end;
function __tagTVITEMW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTVITEMW__Wrapper.setMask(const val : UINT);
begin
tagTVITEMW(GetRecordPtr^).Mask := val;
end;
function __tagTVITEMW__Wrapper.getMask : UINT;
begin
result := tagTVITEMW(GetRecordPtr^).Mask;
end;
procedure __tagTVITEMW__Wrapper.setstate(const val : UINT);
begin
tagTVITEMW(GetRecordPtr^).state := val;
end;
function __tagTVITEMW__Wrapper.getstate : UINT;
begin
result := tagTVITEMW(GetRecordPtr^).state;
end;
procedure __tagTVITEMW__Wrapper.setstateMask(const val : UINT);
begin
tagTVITEMW(GetRecordPtr^).stateMask := val;
end;
function __tagTVITEMW__Wrapper.getstateMask : UINT;
begin
result := tagTVITEMW(GetRecordPtr^).stateMask;
end;
procedure __tagTVITEMW__Wrapper.setcchTextMax(const val : Integer);
begin
tagTVITEMW(GetRecordPtr^).cchTextMax := val;
end;
function __tagTVITEMW__Wrapper.getcchTextMax : Integer;
begin
result := tagTVITEMW(GetRecordPtr^).cchTextMax;
end;
procedure __tagTVITEMW__Wrapper.setiImage(const val : Integer);
begin
tagTVITEMW(GetRecordPtr^).iImage := val;
end;
function __tagTVITEMW__Wrapper.getiImage : Integer;
begin
result := tagTVITEMW(GetRecordPtr^).iImage;
end;
procedure __tagTVITEMW__Wrapper.setiSelectedImage(const val : Integer);
begin
tagTVITEMW(GetRecordPtr^).iSelectedImage := val;
end;
function __tagTVITEMW__Wrapper.getiSelectedImage : Integer;
begin
result := tagTVITEMW(GetRecordPtr^).iSelectedImage;
end;
procedure __tagTVITEMW__Wrapper.setcChildren(const val : Integer);
begin
tagTVITEMW(GetRecordPtr^).cChildren := val;
end;
function __tagTVITEMW__Wrapper.getcChildren : Integer;
begin
result := tagTVITEMW(GetRecordPtr^).cChildren;
end;
procedure __tagTVITEMW__Wrapper.setlParam(const val : lParam);
begin
tagTVITEMW(GetRecordPtr^).lParam := val;
end;
function __tagTVITEMW__Wrapper.getlParam : lParam;
begin
result := tagTVITEMW(GetRecordPtr^).lParam;
end;
function __tagTVKEYDOWN__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTVKEYDOWN__Wrapper.setwVKey(const val : Word);
begin
tagTVKEYDOWN(GetRecordPtr^).wVKey := val;
end;
function __tagTVKEYDOWN__Wrapper.getwVKey : Word;
begin
result := tagTVKEYDOWN(GetRecordPtr^).wVKey;
end;
procedure __tagTVKEYDOWN__Wrapper.setFlags(const val : UINT);
begin
tagTVKEYDOWN(GetRecordPtr^).Flags := val;
end;
function __tagTVKEYDOWN__Wrapper.getFlags : UINT;
begin
result := tagTVKEYDOWN(GetRecordPtr^).Flags;
end;
function __tagTVSORTCB__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTVSORTCB__Wrapper.setlParam(const val : lParam);
begin
tagTVSORTCB(GetRecordPtr^).lParam := val;
end;
function __tagTVSORTCB__Wrapper.getlParam : lParam;
begin
result := tagTVSORTCB(GetRecordPtr^).lParam;
end;
function __TBADDBITMAP__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TBADDBITMAP__Wrapper.sethInst(const val : THandle);
begin
TBADDBITMAP(GetRecordPtr^).hInst := val;
end;
function __TBADDBITMAP__Wrapper.gethInst : THandle;
begin
result := TBADDBITMAP(GetRecordPtr^).hInst;
end;
procedure __TBADDBITMAP__Wrapper.setnID(const val : UINT);
begin
TBADDBITMAP(GetRecordPtr^).nID := val;
end;
function __TBADDBITMAP__Wrapper.getnID : UINT;
begin
result := TBADDBITMAP(GetRecordPtr^).nID;
end;
function __TBBUTTONINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TBBUTTONINFO__Wrapper.setcbSize(const val : UINT);
begin
TBBUTTONINFO(GetRecordPtr^).cbSize := val;
end;
function __TBBUTTONINFO__Wrapper.getcbSize : UINT;
begin
result := TBBUTTONINFO(GetRecordPtr^).cbSize;
end;
procedure __TBBUTTONINFO__Wrapper.setdwMask(const val : DWORD);
begin
TBBUTTONINFO(GetRecordPtr^).dwMask := val;
end;
function __TBBUTTONINFO__Wrapper.getdwMask : DWORD;
begin
result := TBBUTTONINFO(GetRecordPtr^).dwMask;
end;
procedure __TBBUTTONINFO__Wrapper.setidCommand(const val : Integer);
begin
TBBUTTONINFO(GetRecordPtr^).idCommand := val;
end;
function __TBBUTTONINFO__Wrapper.getidCommand : Integer;
begin
result := TBBUTTONINFO(GetRecordPtr^).idCommand;
end;
procedure __TBBUTTONINFO__Wrapper.setiImage(const val : Integer);
begin
TBBUTTONINFO(GetRecordPtr^).iImage := val;
end;
function __TBBUTTONINFO__Wrapper.getiImage : Integer;
begin
result := TBBUTTONINFO(GetRecordPtr^).iImage;
end;
procedure __TBBUTTONINFO__Wrapper.setfsState(const val : Byte);
begin
TBBUTTONINFO(GetRecordPtr^).fsState := val;
end;
function __TBBUTTONINFO__Wrapper.getfsState : Byte;
begin
result := TBBUTTONINFO(GetRecordPtr^).fsState;
end;
procedure __TBBUTTONINFO__Wrapper.setfsStyle(const val : Byte);
begin
TBBUTTONINFO(GetRecordPtr^).fsStyle := val;
end;
function __TBBUTTONINFO__Wrapper.getfsStyle : Byte;
begin
result := TBBUTTONINFO(GetRecordPtr^).fsStyle;
end;
procedure __TBBUTTONINFO__Wrapper.setcx(const val : Word);
begin
TBBUTTONINFO(GetRecordPtr^).cx := val;
end;
function __TBBUTTONINFO__Wrapper.getcx : Word;
begin
result := TBBUTTONINFO(GetRecordPtr^).cx;
end;
procedure __TBBUTTONINFO__Wrapper.setlParam(const val : DWORD);
begin
TBBUTTONINFO(GetRecordPtr^).lParam := val;
end;
function __TBBUTTONINFO__Wrapper.getlParam : DWORD;
begin
result := TBBUTTONINFO(GetRecordPtr^).lParam;
end;
procedure __TBBUTTONINFO__Wrapper.setcchText(const val : Integer);
begin
TBBUTTONINFO(GetRecordPtr^).cchText := val;
end;
function __TBBUTTONINFO__Wrapper.getcchText : Integer;
begin
result := TBBUTTONINFO(GetRecordPtr^).cchText;
end;
function __TBBUTTONINFOA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TBBUTTONINFOA__Wrapper.setcbSize(const val : UINT);
begin
TBBUTTONINFOA(GetRecordPtr^).cbSize := val;
end;
function __TBBUTTONINFOA__Wrapper.getcbSize : UINT;
begin
result := TBBUTTONINFOA(GetRecordPtr^).cbSize;
end;
procedure __TBBUTTONINFOA__Wrapper.setdwMask(const val : DWORD);
begin
TBBUTTONINFOA(GetRecordPtr^).dwMask := val;
end;
function __TBBUTTONINFOA__Wrapper.getdwMask : DWORD;
begin
result := TBBUTTONINFOA(GetRecordPtr^).dwMask;
end;
procedure __TBBUTTONINFOA__Wrapper.setidCommand(const val : Integer);
begin
TBBUTTONINFOA(GetRecordPtr^).idCommand := val;
end;
function __TBBUTTONINFOA__Wrapper.getidCommand : Integer;
begin
result := TBBUTTONINFOA(GetRecordPtr^).idCommand;
end;
procedure __TBBUTTONINFOA__Wrapper.setiImage(const val : Integer);
begin
TBBUTTONINFOA(GetRecordPtr^).iImage := val;
end;
function __TBBUTTONINFOA__Wrapper.getiImage : Integer;
begin
result := TBBUTTONINFOA(GetRecordPtr^).iImage;
end;
procedure __TBBUTTONINFOA__Wrapper.setfsState(const val : Byte);
begin
TBBUTTONINFOA(GetRecordPtr^).fsState := val;
end;
function __TBBUTTONINFOA__Wrapper.getfsState : Byte;
begin
result := TBBUTTONINFOA(GetRecordPtr^).fsState;
end;
procedure __TBBUTTONINFOA__Wrapper.setfsStyle(const val : Byte);
begin
TBBUTTONINFOA(GetRecordPtr^).fsStyle := val;
end;
function __TBBUTTONINFOA__Wrapper.getfsStyle : Byte;
begin
result := TBBUTTONINFOA(GetRecordPtr^).fsStyle;
end;
procedure __TBBUTTONINFOA__Wrapper.setcx(const val : Word);
begin
TBBUTTONINFOA(GetRecordPtr^).cx := val;
end;
function __TBBUTTONINFOA__Wrapper.getcx : Word;
begin
result := TBBUTTONINFOA(GetRecordPtr^).cx;
end;
procedure __TBBUTTONINFOA__Wrapper.setlParam(const val : DWORD);
begin
TBBUTTONINFOA(GetRecordPtr^).lParam := val;
end;
function __TBBUTTONINFOA__Wrapper.getlParam : DWORD;
begin
result := TBBUTTONINFOA(GetRecordPtr^).lParam;
end;
procedure __TBBUTTONINFOA__Wrapper.setcchText(const val : Integer);
begin
TBBUTTONINFOA(GetRecordPtr^).cchText := val;
end;
function __TBBUTTONINFOA__Wrapper.getcchText : Integer;
begin
result := TBBUTTONINFOA(GetRecordPtr^).cchText;
end;
function __TBBUTTONINFOW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TBBUTTONINFOW__Wrapper.setcbSize(const val : UINT);
begin
TBBUTTONINFOW(GetRecordPtr^).cbSize := val;
end;
function __TBBUTTONINFOW__Wrapper.getcbSize : UINT;
begin
result := TBBUTTONINFOW(GetRecordPtr^).cbSize;
end;
procedure __TBBUTTONINFOW__Wrapper.setdwMask(const val : DWORD);
begin
TBBUTTONINFOW(GetRecordPtr^).dwMask := val;
end;
function __TBBUTTONINFOW__Wrapper.getdwMask : DWORD;
begin
result := TBBUTTONINFOW(GetRecordPtr^).dwMask;
end;
procedure __TBBUTTONINFOW__Wrapper.setidCommand(const val : Integer);
begin
TBBUTTONINFOW(GetRecordPtr^).idCommand := val;
end;
function __TBBUTTONINFOW__Wrapper.getidCommand : Integer;
begin
result := TBBUTTONINFOW(GetRecordPtr^).idCommand;
end;
procedure __TBBUTTONINFOW__Wrapper.setiImage(const val : Integer);
begin
TBBUTTONINFOW(GetRecordPtr^).iImage := val;
end;
function __TBBUTTONINFOW__Wrapper.getiImage : Integer;
begin
result := TBBUTTONINFOW(GetRecordPtr^).iImage;
end;
procedure __TBBUTTONINFOW__Wrapper.setfsState(const val : Byte);
begin
TBBUTTONINFOW(GetRecordPtr^).fsState := val;
end;
function __TBBUTTONINFOW__Wrapper.getfsState : Byte;
begin
result := TBBUTTONINFOW(GetRecordPtr^).fsState;
end;
procedure __TBBUTTONINFOW__Wrapper.setfsStyle(const val : Byte);
begin
TBBUTTONINFOW(GetRecordPtr^).fsStyle := val;
end;
function __TBBUTTONINFOW__Wrapper.getfsStyle : Byte;
begin
result := TBBUTTONINFOW(GetRecordPtr^).fsStyle;
end;
procedure __TBBUTTONINFOW__Wrapper.setcx(const val : Word);
begin
TBBUTTONINFOW(GetRecordPtr^).cx := val;
end;
function __TBBUTTONINFOW__Wrapper.getcx : Word;
begin
result := TBBUTTONINFOW(GetRecordPtr^).cx;
end;
procedure __TBBUTTONINFOW__Wrapper.setlParam(const val : DWORD);
begin
TBBUTTONINFOW(GetRecordPtr^).lParam := val;
end;
function __TBBUTTONINFOW__Wrapper.getlParam : DWORD;
begin
result := TBBUTTONINFOW(GetRecordPtr^).lParam;
end;
procedure __TBBUTTONINFOW__Wrapper.setcchText(const val : Integer);
begin
TBBUTTONINFOW(GetRecordPtr^).cchText := val;
end;
function __TBBUTTONINFOW__Wrapper.getcchText : Integer;
begin
result := TBBUTTONINFOW(GetRecordPtr^).cchText;
end;
function __TBINSERTMARK__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TBINSERTMARK__Wrapper.setiButton(const val : Integer);
begin
TBINSERTMARK(GetRecordPtr^).iButton := val;
end;
function __TBINSERTMARK__Wrapper.getiButton : Integer;
begin
result := TBINSERTMARK(GetRecordPtr^).iButton;
end;
procedure __TBINSERTMARK__Wrapper.setdwFlags(const val : DWORD);
begin
TBINSERTMARK(GetRecordPtr^).dwFlags := val;
end;
function __TBINSERTMARK__Wrapper.getdwFlags : DWORD;
begin
result := TBINSERTMARK(GetRecordPtr^).dwFlags;
end;
function __TBREPLACEBITMAP__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TBREPLACEBITMAP__Wrapper.sethInstOld(const val : THandle);
begin
TBREPLACEBITMAP(GetRecordPtr^).hInstOld := val;
end;
function __TBREPLACEBITMAP__Wrapper.gethInstOld : THandle;
begin
result := TBREPLACEBITMAP(GetRecordPtr^).hInstOld;
end;
procedure __TBREPLACEBITMAP__Wrapper.setnIDOld(const val : Cardinal);
begin
TBREPLACEBITMAP(GetRecordPtr^).nIDOld := val;
end;
function __TBREPLACEBITMAP__Wrapper.getnIDOld : Cardinal;
begin
result := TBREPLACEBITMAP(GetRecordPtr^).nIDOld;
end;
procedure __TBREPLACEBITMAP__Wrapper.sethInstNew(const val : THandle);
begin
TBREPLACEBITMAP(GetRecordPtr^).hInstNew := val;
end;
function __TBREPLACEBITMAP__Wrapper.gethInstNew : THandle;
begin
result := TBREPLACEBITMAP(GetRecordPtr^).hInstNew;
end;
procedure __TBREPLACEBITMAP__Wrapper.setnIDNew(const val : Cardinal);
begin
TBREPLACEBITMAP(GetRecordPtr^).nIDNew := val;
end;
function __TBREPLACEBITMAP__Wrapper.getnIDNew : Cardinal;
begin
result := TBREPLACEBITMAP(GetRecordPtr^).nIDNew;
end;
procedure __TBREPLACEBITMAP__Wrapper.setnButtons(const val : Integer);
begin
TBREPLACEBITMAP(GetRecordPtr^).nButtons := val;
end;
function __TBREPLACEBITMAP__Wrapper.getnButtons : Integer;
begin
result := TBREPLACEBITMAP(GetRecordPtr^).nButtons;
end;
function __TBSAVEPARAMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TBSAVEPARAMS__Wrapper.sethkr(const val : THandle);
begin
TBSAVEPARAMS(GetRecordPtr^).hkr := val;
end;
function __TBSAVEPARAMS__Wrapper.gethkr : THandle;
begin
result := TBSAVEPARAMS(GetRecordPtr^).hkr;
end;
function __TBSAVEPARAMSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TBSAVEPARAMSA__Wrapper.sethkr(const val : THandle);
begin
TBSAVEPARAMSA(GetRecordPtr^).hkr := val;
end;
function __TBSAVEPARAMSA__Wrapper.gethkr : THandle;
begin
result := TBSAVEPARAMSA(GetRecordPtr^).hkr;
end;
function __TBSAVEPARAMSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TBSAVEPARAMSW__Wrapper.sethkr(const val : THandle);
begin
TBSAVEPARAMSW(GetRecordPtr^).hkr := val;
end;
function __TBSAVEPARAMSW__Wrapper.gethkr : THandle;
begin
result := TBSAVEPARAMSW(GetRecordPtr^).hkr;
end;
function __TC_HITTESTINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TC_HITTESTINFO__Wrapper.setFlags(const val : UINT);
begin
TC_HITTESTINFO(GetRecordPtr^).Flags := val;
end;
function __TC_HITTESTINFO__Wrapper.getFlags : UINT;
begin
result := TC_HITTESTINFO(GetRecordPtr^).Flags;
end;
function __TC_ITEM__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TC_ITEM__Wrapper.setMask(const val : UINT);
begin
TC_ITEM(GetRecordPtr^).Mask := val;
end;
function __TC_ITEM__Wrapper.getMask : UINT;
begin
result := TC_ITEM(GetRecordPtr^).Mask;
end;
procedure __TC_ITEM__Wrapper.setdwState(const val : UINT);
begin
TC_ITEM(GetRecordPtr^).dwState := val;
end;
function __TC_ITEM__Wrapper.getdwState : UINT;
begin
result := TC_ITEM(GetRecordPtr^).dwState;
end;
procedure __TC_ITEM__Wrapper.setdwStateMask(const val : UINT);
begin
TC_ITEM(GetRecordPtr^).dwStateMask := val;
end;
function __TC_ITEM__Wrapper.getdwStateMask : UINT;
begin
result := TC_ITEM(GetRecordPtr^).dwStateMask;
end;
procedure __TC_ITEM__Wrapper.setcchTextMax(const val : Integer);
begin
TC_ITEM(GetRecordPtr^).cchTextMax := val;
end;
function __TC_ITEM__Wrapper.getcchTextMax : Integer;
begin
result := TC_ITEM(GetRecordPtr^).cchTextMax;
end;
procedure __TC_ITEM__Wrapper.setiImage(const val : Integer);
begin
TC_ITEM(GetRecordPtr^).iImage := val;
end;
function __TC_ITEM__Wrapper.getiImage : Integer;
begin
result := TC_ITEM(GetRecordPtr^).iImage;
end;
procedure __TC_ITEM__Wrapper.setlParam(const val : lParam);
begin
TC_ITEM(GetRecordPtr^).lParam := val;
end;
function __TC_ITEM__Wrapper.getlParam : lParam;
begin
result := TC_ITEM(GetRecordPtr^).lParam;
end;
function __TC_ITEMA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TC_ITEMA__Wrapper.setMask(const val : UINT);
begin
TC_ITEMA(GetRecordPtr^).Mask := val;
end;
function __TC_ITEMA__Wrapper.getMask : UINT;
begin
result := TC_ITEMA(GetRecordPtr^).Mask;
end;
procedure __TC_ITEMA__Wrapper.setdwState(const val : UINT);
begin
TC_ITEMA(GetRecordPtr^).dwState := val;
end;
function __TC_ITEMA__Wrapper.getdwState : UINT;
begin
result := TC_ITEMA(GetRecordPtr^).dwState;
end;
procedure __TC_ITEMA__Wrapper.setdwStateMask(const val : UINT);
begin
TC_ITEMA(GetRecordPtr^).dwStateMask := val;
end;
function __TC_ITEMA__Wrapper.getdwStateMask : UINT;
begin
result := TC_ITEMA(GetRecordPtr^).dwStateMask;
end;
procedure __TC_ITEMA__Wrapper.setcchTextMax(const val : Integer);
begin
TC_ITEMA(GetRecordPtr^).cchTextMax := val;
end;
function __TC_ITEMA__Wrapper.getcchTextMax : Integer;
begin
result := TC_ITEMA(GetRecordPtr^).cchTextMax;
end;
procedure __TC_ITEMA__Wrapper.setiImage(const val : Integer);
begin
TC_ITEMA(GetRecordPtr^).iImage := val;
end;
function __TC_ITEMA__Wrapper.getiImage : Integer;
begin
result := TC_ITEMA(GetRecordPtr^).iImage;
end;
procedure __TC_ITEMA__Wrapper.setlParam(const val : lParam);
begin
TC_ITEMA(GetRecordPtr^).lParam := val;
end;
function __TC_ITEMA__Wrapper.getlParam : lParam;
begin
result := TC_ITEMA(GetRecordPtr^).lParam;
end;
function __TC_ITEMHEADER__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TC_ITEMHEADER__Wrapper.setMask(const val : UINT);
begin
TC_ITEMHEADER(GetRecordPtr^).Mask := val;
end;
function __TC_ITEMHEADER__Wrapper.getMask : UINT;
begin
result := TC_ITEMHEADER(GetRecordPtr^).Mask;
end;
procedure __TC_ITEMHEADER__Wrapper.setlpReserved1(const val : UINT);
begin
TC_ITEMHEADER(GetRecordPtr^).lpReserved1 := val;
end;
function __TC_ITEMHEADER__Wrapper.getlpReserved1 : UINT;
begin
result := TC_ITEMHEADER(GetRecordPtr^).lpReserved1;
end;
procedure __TC_ITEMHEADER__Wrapper.setlpReserved2(const val : UINT);
begin
TC_ITEMHEADER(GetRecordPtr^).lpReserved2 := val;
end;
function __TC_ITEMHEADER__Wrapper.getlpReserved2 : UINT;
begin
result := TC_ITEMHEADER(GetRecordPtr^).lpReserved2;
end;
procedure __TC_ITEMHEADER__Wrapper.setcchTextMax(const val : Integer);
begin
TC_ITEMHEADER(GetRecordPtr^).cchTextMax := val;
end;
function __TC_ITEMHEADER__Wrapper.getcchTextMax : Integer;
begin
result := TC_ITEMHEADER(GetRecordPtr^).cchTextMax;
end;
procedure __TC_ITEMHEADER__Wrapper.setiImage(const val : Integer);
begin
TC_ITEMHEADER(GetRecordPtr^).iImage := val;
end;
function __TC_ITEMHEADER__Wrapper.getiImage : Integer;
begin
result := TC_ITEMHEADER(GetRecordPtr^).iImage;
end;
function __TC_ITEMHEADERA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TC_ITEMHEADERA__Wrapper.setMask(const val : UINT);
begin
TC_ITEMHEADERA(GetRecordPtr^).Mask := val;
end;
function __TC_ITEMHEADERA__Wrapper.getMask : UINT;
begin
result := TC_ITEMHEADERA(GetRecordPtr^).Mask;
end;
procedure __TC_ITEMHEADERA__Wrapper.setlpReserved1(const val : UINT);
begin
TC_ITEMHEADERA(GetRecordPtr^).lpReserved1 := val;
end;
function __TC_ITEMHEADERA__Wrapper.getlpReserved1 : UINT;
begin
result := TC_ITEMHEADERA(GetRecordPtr^).lpReserved1;
end;
procedure __TC_ITEMHEADERA__Wrapper.setlpReserved2(const val : UINT);
begin
TC_ITEMHEADERA(GetRecordPtr^).lpReserved2 := val;
end;
function __TC_ITEMHEADERA__Wrapper.getlpReserved2 : UINT;
begin
result := TC_ITEMHEADERA(GetRecordPtr^).lpReserved2;
end;
procedure __TC_ITEMHEADERA__Wrapper.setcchTextMax(const val : Integer);
begin
TC_ITEMHEADERA(GetRecordPtr^).cchTextMax := val;
end;
function __TC_ITEMHEADERA__Wrapper.getcchTextMax : Integer;
begin
result := TC_ITEMHEADERA(GetRecordPtr^).cchTextMax;
end;
procedure __TC_ITEMHEADERA__Wrapper.setiImage(const val : Integer);
begin
TC_ITEMHEADERA(GetRecordPtr^).iImage := val;
end;
function __TC_ITEMHEADERA__Wrapper.getiImage : Integer;
begin
result := TC_ITEMHEADERA(GetRecordPtr^).iImage;
end;
function __TC_ITEMHEADERW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TC_ITEMHEADERW__Wrapper.setMask(const val : UINT);
begin
TC_ITEMHEADERW(GetRecordPtr^).Mask := val;
end;
function __TC_ITEMHEADERW__Wrapper.getMask : UINT;
begin
result := TC_ITEMHEADERW(GetRecordPtr^).Mask;
end;
procedure __TC_ITEMHEADERW__Wrapper.setlpReserved1(const val : UINT);
begin
TC_ITEMHEADERW(GetRecordPtr^).lpReserved1 := val;
end;
function __TC_ITEMHEADERW__Wrapper.getlpReserved1 : UINT;
begin
result := TC_ITEMHEADERW(GetRecordPtr^).lpReserved1;
end;
procedure __TC_ITEMHEADERW__Wrapper.setlpReserved2(const val : UINT);
begin
TC_ITEMHEADERW(GetRecordPtr^).lpReserved2 := val;
end;
function __TC_ITEMHEADERW__Wrapper.getlpReserved2 : UINT;
begin
result := TC_ITEMHEADERW(GetRecordPtr^).lpReserved2;
end;
procedure __TC_ITEMHEADERW__Wrapper.setcchTextMax(const val : Integer);
begin
TC_ITEMHEADERW(GetRecordPtr^).cchTextMax := val;
end;
function __TC_ITEMHEADERW__Wrapper.getcchTextMax : Integer;
begin
result := TC_ITEMHEADERW(GetRecordPtr^).cchTextMax;
end;
procedure __TC_ITEMHEADERW__Wrapper.setiImage(const val : Integer);
begin
TC_ITEMHEADERW(GetRecordPtr^).iImage := val;
end;
function __TC_ITEMHEADERW__Wrapper.getiImage : Integer;
begin
result := TC_ITEMHEADERW(GetRecordPtr^).iImage;
end;
function __TC_ITEMW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TC_ITEMW__Wrapper.setMask(const val : UINT);
begin
TC_ITEMW(GetRecordPtr^).Mask := val;
end;
function __TC_ITEMW__Wrapper.getMask : UINT;
begin
result := TC_ITEMW(GetRecordPtr^).Mask;
end;
procedure __TC_ITEMW__Wrapper.setdwState(const val : UINT);
begin
TC_ITEMW(GetRecordPtr^).dwState := val;
end;
function __TC_ITEMW__Wrapper.getdwState : UINT;
begin
result := TC_ITEMW(GetRecordPtr^).dwState;
end;
procedure __TC_ITEMW__Wrapper.setdwStateMask(const val : UINT);
begin
TC_ITEMW(GetRecordPtr^).dwStateMask := val;
end;
function __TC_ITEMW__Wrapper.getdwStateMask : UINT;
begin
result := TC_ITEMW(GetRecordPtr^).dwStateMask;
end;
procedure __TC_ITEMW__Wrapper.setcchTextMax(const val : Integer);
begin
TC_ITEMW(GetRecordPtr^).cchTextMax := val;
end;
function __TC_ITEMW__Wrapper.getcchTextMax : Integer;
begin
result := TC_ITEMW(GetRecordPtr^).cchTextMax;
end;
procedure __TC_ITEMW__Wrapper.setiImage(const val : Integer);
begin
TC_ITEMW(GetRecordPtr^).iImage := val;
end;
function __TC_ITEMW__Wrapper.getiImage : Integer;
begin
result := TC_ITEMW(GetRecordPtr^).iImage;
end;
procedure __TC_ITEMW__Wrapper.setlParam(const val : lParam);
begin
TC_ITEMW(GetRecordPtr^).lParam := val;
end;
function __TC_ITEMW__Wrapper.getlParam : lParam;
begin
result := TC_ITEMW(GetRecordPtr^).lParam;
end;
function __TC_KEYDOWN__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TC_KEYDOWN__Wrapper.setwVKey(const val : Word);
begin
TC_KEYDOWN(GetRecordPtr^).wVKey := val;
end;
function __TC_KEYDOWN__Wrapper.getwVKey : Word;
begin
result := TC_KEYDOWN(GetRecordPtr^).wVKey;
end;
procedure __TC_KEYDOWN__Wrapper.setFlags(const val : UINT);
begin
TC_KEYDOWN(GetRecordPtr^).Flags := val;
end;
function __TC_KEYDOWN__Wrapper.getFlags : UINT;
begin
result := TC_KEYDOWN(GetRecordPtr^).Flags;
end;
function __TColorMap__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TColorMap__Wrapper.setcFrom(const val : TColorRef);
begin
TColorMap(GetRecordPtr^).cFrom := val;
end;
function __TColorMap__Wrapper.getcFrom : TColorRef;
begin
result := TColorMap(GetRecordPtr^).cFrom;
end;
procedure __TColorMap__Wrapper.setcTo(const val : TColorRef);
begin
TColorMap(GetRecordPtr^).cTo := val;
end;
function __TColorMap__Wrapper.getcTo : TColorRef;
begin
result := TColorMap(GetRecordPtr^).cTo;
end;
function __TColorScheme__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TColorScheme__Wrapper.setdwSize(const val : DWORD);
begin
TColorScheme(GetRecordPtr^).dwSize := val;
end;
function __TColorScheme__Wrapper.getdwSize : DWORD;
begin
result := TColorScheme(GetRecordPtr^).dwSize;
end;
procedure __TColorScheme__Wrapper.setclrBtnHighlight(const val : COLORREF);
begin
TColorScheme(GetRecordPtr^).clrBtnHighlight := val;
end;
function __TColorScheme__Wrapper.getclrBtnHighlight : COLORREF;
begin
result := TColorScheme(GetRecordPtr^).clrBtnHighlight;
end;
procedure __TColorScheme__Wrapper.setclrBtnShadow(const val : COLORREF);
begin
TColorScheme(GetRecordPtr^).clrBtnShadow := val;
end;
function __TColorScheme__Wrapper.getclrBtnShadow : COLORREF;
begin
result := TColorScheme(GetRecordPtr^).clrBtnShadow;
end;
function __TComboBoxExItem__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TComboBoxExItem__Wrapper.setMask(const val : UINT);
begin
TComboBoxExItem(GetRecordPtr^).Mask := val;
end;
function __TComboBoxExItem__Wrapper.getMask : UINT;
begin
result := TComboBoxExItem(GetRecordPtr^).Mask;
end;
procedure __TComboBoxExItem__Wrapper.setiItem(const val : Integer);
begin
TComboBoxExItem(GetRecordPtr^).iItem := val;
end;
function __TComboBoxExItem__Wrapper.getiItem : Integer;
begin
result := TComboBoxExItem(GetRecordPtr^).iItem;
end;
procedure __TComboBoxExItem__Wrapper.setcchTextMax(const val : Integer);
begin
TComboBoxExItem(GetRecordPtr^).cchTextMax := val;
end;
function __TComboBoxExItem__Wrapper.getcchTextMax : Integer;
begin
result := TComboBoxExItem(GetRecordPtr^).cchTextMax;
end;
procedure __TComboBoxExItem__Wrapper.setiImage(const val : Integer);
begin
TComboBoxExItem(GetRecordPtr^).iImage := val;
end;
function __TComboBoxExItem__Wrapper.getiImage : Integer;
begin
result := TComboBoxExItem(GetRecordPtr^).iImage;
end;
procedure __TComboBoxExItem__Wrapper.setiSelectedImage(const val : Integer);
begin
TComboBoxExItem(GetRecordPtr^).iSelectedImage := val;
end;
function __TComboBoxExItem__Wrapper.getiSelectedImage : Integer;
begin
result := TComboBoxExItem(GetRecordPtr^).iSelectedImage;
end;
procedure __TComboBoxExItem__Wrapper.setiOverlay(const val : Integer);
begin
TComboBoxExItem(GetRecordPtr^).iOverlay := val;
end;
function __TComboBoxExItem__Wrapper.getiOverlay : Integer;
begin
result := TComboBoxExItem(GetRecordPtr^).iOverlay;
end;
procedure __TComboBoxExItem__Wrapper.setiIndent(const val : Integer);
begin
TComboBoxExItem(GetRecordPtr^).iIndent := val;
end;
function __TComboBoxExItem__Wrapper.getiIndent : Integer;
begin
result := TComboBoxExItem(GetRecordPtr^).iIndent;
end;
procedure __TComboBoxExItem__Wrapper.setlParam(const val : lParam);
begin
TComboBoxExItem(GetRecordPtr^).lParam := val;
end;
function __TComboBoxExItem__Wrapper.getlParam : lParam;
begin
result := TComboBoxExItem(GetRecordPtr^).lParam;
end;
function __TComboBoxExItemA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TComboBoxExItemA__Wrapper.setMask(const val : UINT);
begin
TComboBoxExItemA(GetRecordPtr^).Mask := val;
end;
function __TComboBoxExItemA__Wrapper.getMask : UINT;
begin
result := TComboBoxExItemA(GetRecordPtr^).Mask;
end;
procedure __TComboBoxExItemA__Wrapper.setiItem(const val : Integer);
begin
TComboBoxExItemA(GetRecordPtr^).iItem := val;
end;
function __TComboBoxExItemA__Wrapper.getiItem : Integer;
begin
result := TComboBoxExItemA(GetRecordPtr^).iItem;
end;
procedure __TComboBoxExItemA__Wrapper.setcchTextMax(const val : Integer);
begin
TComboBoxExItemA(GetRecordPtr^).cchTextMax := val;
end;
function __TComboBoxExItemA__Wrapper.getcchTextMax : Integer;
begin
result := TComboBoxExItemA(GetRecordPtr^).cchTextMax;
end;
procedure __TComboBoxExItemA__Wrapper.setiImage(const val : Integer);
begin
TComboBoxExItemA(GetRecordPtr^).iImage := val;
end;
function __TComboBoxExItemA__Wrapper.getiImage : Integer;
begin
result := TComboBoxExItemA(GetRecordPtr^).iImage;
end;
procedure __TComboBoxExItemA__Wrapper.setiSelectedImage(const val : Integer);
begin
TComboBoxExItemA(GetRecordPtr^).iSelectedImage := val;
end;
function __TComboBoxExItemA__Wrapper.getiSelectedImage : Integer;
begin
result := TComboBoxExItemA(GetRecordPtr^).iSelectedImage;
end;
procedure __TComboBoxExItemA__Wrapper.setiOverlay(const val : Integer);
begin
TComboBoxExItemA(GetRecordPtr^).iOverlay := val;
end;
function __TComboBoxExItemA__Wrapper.getiOverlay : Integer;
begin
result := TComboBoxExItemA(GetRecordPtr^).iOverlay;
end;
procedure __TComboBoxExItemA__Wrapper.setiIndent(const val : Integer);
begin
TComboBoxExItemA(GetRecordPtr^).iIndent := val;
end;
function __TComboBoxExItemA__Wrapper.getiIndent : Integer;
begin
result := TComboBoxExItemA(GetRecordPtr^).iIndent;
end;
procedure __TComboBoxExItemA__Wrapper.setlParam(const val : lParam);
begin
TComboBoxExItemA(GetRecordPtr^).lParam := val;
end;
function __TComboBoxExItemA__Wrapper.getlParam : lParam;
begin
result := TComboBoxExItemA(GetRecordPtr^).lParam;
end;
function __TComboBoxExItemW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TComboBoxExItemW__Wrapper.setMask(const val : UINT);
begin
TComboBoxExItemW(GetRecordPtr^).Mask := val;
end;
function __TComboBoxExItemW__Wrapper.getMask : UINT;
begin
result := TComboBoxExItemW(GetRecordPtr^).Mask;
end;
procedure __TComboBoxExItemW__Wrapper.setiItem(const val : Integer);
begin
TComboBoxExItemW(GetRecordPtr^).iItem := val;
end;
function __TComboBoxExItemW__Wrapper.getiItem : Integer;
begin
result := TComboBoxExItemW(GetRecordPtr^).iItem;
end;
procedure __TComboBoxExItemW__Wrapper.setcchTextMax(const val : Integer);
begin
TComboBoxExItemW(GetRecordPtr^).cchTextMax := val;
end;
function __TComboBoxExItemW__Wrapper.getcchTextMax : Integer;
begin
result := TComboBoxExItemW(GetRecordPtr^).cchTextMax;
end;
procedure __TComboBoxExItemW__Wrapper.setiImage(const val : Integer);
begin
TComboBoxExItemW(GetRecordPtr^).iImage := val;
end;
function __TComboBoxExItemW__Wrapper.getiImage : Integer;
begin
result := TComboBoxExItemW(GetRecordPtr^).iImage;
end;
procedure __TComboBoxExItemW__Wrapper.setiSelectedImage(const val : Integer);
begin
TComboBoxExItemW(GetRecordPtr^).iSelectedImage := val;
end;
function __TComboBoxExItemW__Wrapper.getiSelectedImage : Integer;
begin
result := TComboBoxExItemW(GetRecordPtr^).iSelectedImage;
end;
procedure __TComboBoxExItemW__Wrapper.setiOverlay(const val : Integer);
begin
TComboBoxExItemW(GetRecordPtr^).iOverlay := val;
end;
function __TComboBoxExItemW__Wrapper.getiOverlay : Integer;
begin
result := TComboBoxExItemW(GetRecordPtr^).iOverlay;
end;
procedure __TComboBoxExItemW__Wrapper.setiIndent(const val : Integer);
begin
TComboBoxExItemW(GetRecordPtr^).iIndent := val;
end;
function __TComboBoxExItemW__Wrapper.getiIndent : Integer;
begin
result := TComboBoxExItemW(GetRecordPtr^).iIndent;
end;
procedure __TComboBoxExItemW__Wrapper.setlParam(const val : lParam);
begin
TComboBoxExItemW(GetRecordPtr^).lParam := val;
end;
function __TComboBoxExItemW__Wrapper.getlParam : lParam;
begin
result := TComboBoxExItemW(GetRecordPtr^).lParam;
end;
function __TDragListInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDragListInfo__Wrapper.setuNotification(const val : UINT);
begin
TDragListInfo(GetRecordPtr^).uNotification := val;
end;
function __TDragListInfo__Wrapper.getuNotification : UINT;
begin
result := TDragListInfo(GetRecordPtr^).uNotification;
end;
function __THDHitTestInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __THDHitTestInfo__Wrapper.setFlags(const val : Cardinal);
begin
THDHitTestInfo(GetRecordPtr^).Flags := val;
end;
function __THDHitTestInfo__Wrapper.getFlags : Cardinal;
begin
result := THDHitTestInfo(GetRecordPtr^).Flags;
end;
procedure __THDHitTestInfo__Wrapper.setItem(const val : Integer);
begin
THDHitTestInfo(GetRecordPtr^).Item := val;
end;
function __THDHitTestInfo__Wrapper.getItem : Integer;
begin
result := THDHitTestInfo(GetRecordPtr^).Item;
end;
function __THDItem__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __THDItem__Wrapper.setMask(const val : Cardinal);
begin
THDItem(GetRecordPtr^).Mask := val;
end;
function __THDItem__Wrapper.getMask : Cardinal;
begin
result := THDItem(GetRecordPtr^).Mask;
end;
procedure __THDItem__Wrapper.setcxy(const val : Integer);
begin
THDItem(GetRecordPtr^).cxy := val;
end;
function __THDItem__Wrapper.getcxy : Integer;
begin
result := THDItem(GetRecordPtr^).cxy;
end;
procedure __THDItem__Wrapper.setcchTextMax(const val : Integer);
begin
THDItem(GetRecordPtr^).cchTextMax := val;
end;
function __THDItem__Wrapper.getcchTextMax : Integer;
begin
result := THDItem(GetRecordPtr^).cchTextMax;
end;
procedure __THDItem__Wrapper.setfmt(const val : Integer);
begin
THDItem(GetRecordPtr^).fmt := val;
end;
function __THDItem__Wrapper.getfmt : Integer;
begin
result := THDItem(GetRecordPtr^).fmt;
end;
procedure __THDItem__Wrapper.setlParam(const val : lParam);
begin
THDItem(GetRecordPtr^).lParam := val;
end;
function __THDItem__Wrapper.getlParam : lParam;
begin
result := THDItem(GetRecordPtr^).lParam;
end;
procedure __THDItem__Wrapper.setiImage(const val : Integer);
begin
THDItem(GetRecordPtr^).iImage := val;
end;
function __THDItem__Wrapper.getiImage : Integer;
begin
result := THDItem(GetRecordPtr^).iImage;
end;
procedure __THDItem__Wrapper.setiOrder(const val : Integer);
begin
THDItem(GetRecordPtr^).iOrder := val;
end;
function __THDItem__Wrapper.getiOrder : Integer;
begin
result := THDItem(GetRecordPtr^).iOrder;
end;
function __THDItemA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __THDItemA__Wrapper.setMask(const val : Cardinal);
begin
THDItemA(GetRecordPtr^).Mask := val;
end;
function __THDItemA__Wrapper.getMask : Cardinal;
begin
result := THDItemA(GetRecordPtr^).Mask;
end;
procedure __THDItemA__Wrapper.setcxy(const val : Integer);
begin
THDItemA(GetRecordPtr^).cxy := val;
end;
function __THDItemA__Wrapper.getcxy : Integer;
begin
result := THDItemA(GetRecordPtr^).cxy;
end;
procedure __THDItemA__Wrapper.setcchTextMax(const val : Integer);
begin
THDItemA(GetRecordPtr^).cchTextMax := val;
end;
function __THDItemA__Wrapper.getcchTextMax : Integer;
begin
result := THDItemA(GetRecordPtr^).cchTextMax;
end;
procedure __THDItemA__Wrapper.setfmt(const val : Integer);
begin
THDItemA(GetRecordPtr^).fmt := val;
end;
function __THDItemA__Wrapper.getfmt : Integer;
begin
result := THDItemA(GetRecordPtr^).fmt;
end;
procedure __THDItemA__Wrapper.setlParam(const val : lParam);
begin
THDItemA(GetRecordPtr^).lParam := val;
end;
function __THDItemA__Wrapper.getlParam : lParam;
begin
result := THDItemA(GetRecordPtr^).lParam;
end;
procedure __THDItemA__Wrapper.setiImage(const val : Integer);
begin
THDItemA(GetRecordPtr^).iImage := val;
end;
function __THDItemA__Wrapper.getiImage : Integer;
begin
result := THDItemA(GetRecordPtr^).iImage;
end;
procedure __THDItemA__Wrapper.setiOrder(const val : Integer);
begin
THDItemA(GetRecordPtr^).iOrder := val;
end;
function __THDItemA__Wrapper.getiOrder : Integer;
begin
result := THDItemA(GetRecordPtr^).iOrder;
end;
function __THDItemW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __THDItemW__Wrapper.setMask(const val : Cardinal);
begin
THDItemW(GetRecordPtr^).Mask := val;
end;
function __THDItemW__Wrapper.getMask : Cardinal;
begin
result := THDItemW(GetRecordPtr^).Mask;
end;
procedure __THDItemW__Wrapper.setcxy(const val : Integer);
begin
THDItemW(GetRecordPtr^).cxy := val;
end;
function __THDItemW__Wrapper.getcxy : Integer;
begin
result := THDItemW(GetRecordPtr^).cxy;
end;
procedure __THDItemW__Wrapper.setcchTextMax(const val : Integer);
begin
THDItemW(GetRecordPtr^).cchTextMax := val;
end;
function __THDItemW__Wrapper.getcchTextMax : Integer;
begin
result := THDItemW(GetRecordPtr^).cchTextMax;
end;
procedure __THDItemW__Wrapper.setfmt(const val : Integer);
begin
THDItemW(GetRecordPtr^).fmt := val;
end;
function __THDItemW__Wrapper.getfmt : Integer;
begin
result := THDItemW(GetRecordPtr^).fmt;
end;
procedure __THDItemW__Wrapper.setlParam(const val : lParam);
begin
THDItemW(GetRecordPtr^).lParam := val;
end;
function __THDItemW__Wrapper.getlParam : lParam;
begin
result := THDItemW(GetRecordPtr^).lParam;
end;
procedure __THDItemW__Wrapper.setiImage(const val : Integer);
begin
THDItemW(GetRecordPtr^).iImage := val;
end;
function __THDItemW__Wrapper.getiImage : Integer;
begin
result := THDItemW(GetRecordPtr^).iImage;
end;
procedure __THDItemW__Wrapper.setiOrder(const val : Integer);
begin
THDItemW(GetRecordPtr^).iOrder := val;
end;
function __THDItemW__Wrapper.getiOrder : Integer;
begin
result := THDItemW(GetRecordPtr^).iOrder;
end;
function __THDLayout__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __THDNotify__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __THDNotify__Wrapper.setItem(const val : Integer);
begin
THDNotify(GetRecordPtr^).Item := val;
end;
function __THDNotify__Wrapper.getItem : Integer;
begin
result := THDNotify(GetRecordPtr^).Item;
end;
procedure __THDNotify__Wrapper.setButton(const val : Integer);
begin
THDNotify(GetRecordPtr^).Button := val;
end;
function __THDNotify__Wrapper.getButton : Integer;
begin
result := THDNotify(GetRecordPtr^).Button;
end;
function __THDNotifyA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __THDNotifyA__Wrapper.setItem(const val : Integer);
begin
THDNotifyA(GetRecordPtr^).Item := val;
end;
function __THDNotifyA__Wrapper.getItem : Integer;
begin
result := THDNotifyA(GetRecordPtr^).Item;
end;
procedure __THDNotifyA__Wrapper.setButton(const val : Integer);
begin
THDNotifyA(GetRecordPtr^).Button := val;
end;
function __THDNotifyA__Wrapper.getButton : Integer;
begin
result := THDNotifyA(GetRecordPtr^).Button;
end;
function __THDNotifyW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __THDNotifyW__Wrapper.setItem(const val : Integer);
begin
THDNotifyW(GetRecordPtr^).Item := val;
end;
function __THDNotifyW__Wrapper.getItem : Integer;
begin
result := THDNotifyW(GetRecordPtr^).Item;
end;
procedure __THDNotifyW__Wrapper.setButton(const val : Integer);
begin
THDNotifyW(GetRecordPtr^).Button := val;
end;
function __THDNotifyW__Wrapper.getButton : Integer;
begin
result := THDNotifyW(GetRecordPtr^).Button;
end;
function __TImageInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TImageInfo__Wrapper.setUnused1(const val : Integer);
begin
TImageInfo(GetRecordPtr^).Unused1 := val;
end;
function __TImageInfo__Wrapper.getUnused1 : Integer;
begin
result := TImageInfo(GetRecordPtr^).Unused1;
end;
procedure __TImageInfo__Wrapper.setUnused2(const val : Integer);
begin
TImageInfo(GetRecordPtr^).Unused2 := val;
end;
function __TImageInfo__Wrapper.getUnused2 : Integer;
begin
result := TImageInfo(GetRecordPtr^).Unused2;
end;
function __TImageListDrawParams__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TImageListDrawParams__Wrapper.setcbSize(const val : DWORD);
begin
TImageListDrawParams(GetRecordPtr^).cbSize := val;
end;
function __TImageListDrawParams__Wrapper.getcbSize : DWORD;
begin
result := TImageListDrawParams(GetRecordPtr^).cbSize;
end;
procedure __TImageListDrawParams__Wrapper.sethiml(const val : HIMAGELIST);
begin
TImageListDrawParams(GetRecordPtr^).himl := val;
end;
function __TImageListDrawParams__Wrapper.gethiml : HIMAGELIST;
begin
result := TImageListDrawParams(GetRecordPtr^).himl;
end;
procedure __TImageListDrawParams__Wrapper.seti(const val : Integer);
begin
TImageListDrawParams(GetRecordPtr^).i := val;
end;
function __TImageListDrawParams__Wrapper.geti : Integer;
begin
result := TImageListDrawParams(GetRecordPtr^).i;
end;
procedure __TImageListDrawParams__Wrapper.setx(const val : Integer);
begin
TImageListDrawParams(GetRecordPtr^).x := val;
end;
function __TImageListDrawParams__Wrapper.getx : Integer;
begin
result := TImageListDrawParams(GetRecordPtr^).x;
end;
procedure __TImageListDrawParams__Wrapper.sety(const val : Integer);
begin
TImageListDrawParams(GetRecordPtr^).y := val;
end;
function __TImageListDrawParams__Wrapper.gety : Integer;
begin
result := TImageListDrawParams(GetRecordPtr^).y;
end;
procedure __TImageListDrawParams__Wrapper.setcx(const val : Integer);
begin
TImageListDrawParams(GetRecordPtr^).cx := val;
end;
function __TImageListDrawParams__Wrapper.getcx : Integer;
begin
result := TImageListDrawParams(GetRecordPtr^).cx;
end;
procedure __TImageListDrawParams__Wrapper.setcy(const val : Integer);
begin
TImageListDrawParams(GetRecordPtr^).cy := val;
end;
function __TImageListDrawParams__Wrapper.getcy : Integer;
begin
result := TImageListDrawParams(GetRecordPtr^).cy;
end;
procedure __TImageListDrawParams__Wrapper.setxBitmap(const val : Integer);
begin
TImageListDrawParams(GetRecordPtr^).xBitmap := val;
end;
function __TImageListDrawParams__Wrapper.getxBitmap : Integer;
begin
result := TImageListDrawParams(GetRecordPtr^).xBitmap;
end;
procedure __TImageListDrawParams__Wrapper.setyBitmap(const val : Integer);
begin
TImageListDrawParams(GetRecordPtr^).yBitmap := val;
end;
function __TImageListDrawParams__Wrapper.getyBitmap : Integer;
begin
result := TImageListDrawParams(GetRecordPtr^).yBitmap;
end;
procedure __TImageListDrawParams__Wrapper.setrgbBk(const val : COLORREF);
begin
TImageListDrawParams(GetRecordPtr^).rgbBk := val;
end;
function __TImageListDrawParams__Wrapper.getrgbBk : COLORREF;
begin
result := TImageListDrawParams(GetRecordPtr^).rgbBk;
end;
procedure __TImageListDrawParams__Wrapper.setrgbFg(const val : COLORREF);
begin
TImageListDrawParams(GetRecordPtr^).rgbFg := val;
end;
function __TImageListDrawParams__Wrapper.getrgbFg : COLORREF;
begin
result := TImageListDrawParams(GetRecordPtr^).rgbFg;
end;
procedure __TImageListDrawParams__Wrapper.setfStyle(const val : UINT);
begin
TImageListDrawParams(GetRecordPtr^).fStyle := val;
end;
function __TImageListDrawParams__Wrapper.getfStyle : UINT;
begin
result := TImageListDrawParams(GetRecordPtr^).fStyle;
end;
procedure __TImageListDrawParams__Wrapper.setdwRop(const val : DWORD);
begin
TImageListDrawParams(GetRecordPtr^).dwRop := val;
end;
function __TImageListDrawParams__Wrapper.getdwRop : DWORD;
begin
result := TImageListDrawParams(GetRecordPtr^).dwRop;
end;
function __TInitCommonControlsEx__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TInitCommonControlsEx__Wrapper.setdwSize(const val : DWORD);
begin
TInitCommonControlsEx(GetRecordPtr^).dwSize := val;
end;
function __TInitCommonControlsEx__Wrapper.getdwSize : DWORD;
begin
result := TInitCommonControlsEx(GetRecordPtr^).dwSize;
end;
procedure __TInitCommonControlsEx__Wrapper.setdwICC(const val : DWORD);
begin
TInitCommonControlsEx(GetRecordPtr^).dwICC := val;
end;
function __TInitCommonControlsEx__Wrapper.getdwICC : DWORD;
begin
result := TInitCommonControlsEx(GetRecordPtr^).dwICC;
end;
function __TLVBKImage__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TLVBKImage__Wrapper.setulFlags(const val : ULONG);
begin
TLVBKImage(GetRecordPtr^).ulFlags := val;
end;
function __TLVBKImage__Wrapper.getulFlags : ULONG;
begin
result := TLVBKImage(GetRecordPtr^).ulFlags;
end;
procedure __TLVBKImage__Wrapper.setcchImageMax(const val : UINT);
begin
TLVBKImage(GetRecordPtr^).cchImageMax := val;
end;
function __TLVBKImage__Wrapper.getcchImageMax : UINT;
begin
result := TLVBKImage(GetRecordPtr^).cchImageMax;
end;
procedure __TLVBKImage__Wrapper.setxOffsetPercent(const val : Integer);
begin
TLVBKImage(GetRecordPtr^).xOffsetPercent := val;
end;
function __TLVBKImage__Wrapper.getxOffsetPercent : Integer;
begin
result := TLVBKImage(GetRecordPtr^).xOffsetPercent;
end;
procedure __TLVBKImage__Wrapper.setyOffsetPercent(const val : Integer);
begin
TLVBKImage(GetRecordPtr^).yOffsetPercent := val;
end;
function __TLVBKImage__Wrapper.getyOffsetPercent : Integer;
begin
result := TLVBKImage(GetRecordPtr^).yOffsetPercent;
end;
function __TLVBKImageA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TLVBKImageA__Wrapper.setulFlags(const val : ULONG);
begin
TLVBKImageA(GetRecordPtr^).ulFlags := val;
end;
function __TLVBKImageA__Wrapper.getulFlags : ULONG;
begin
result := TLVBKImageA(GetRecordPtr^).ulFlags;
end;
procedure __TLVBKImageA__Wrapper.setcchImageMax(const val : UINT);
begin
TLVBKImageA(GetRecordPtr^).cchImageMax := val;
end;
function __TLVBKImageA__Wrapper.getcchImageMax : UINT;
begin
result := TLVBKImageA(GetRecordPtr^).cchImageMax;
end;
procedure __TLVBKImageA__Wrapper.setxOffsetPercent(const val : Integer);
begin
TLVBKImageA(GetRecordPtr^).xOffsetPercent := val;
end;
function __TLVBKImageA__Wrapper.getxOffsetPercent : Integer;
begin
result := TLVBKImageA(GetRecordPtr^).xOffsetPercent;
end;
procedure __TLVBKImageA__Wrapper.setyOffsetPercent(const val : Integer);
begin
TLVBKImageA(GetRecordPtr^).yOffsetPercent := val;
end;
function __TLVBKImageA__Wrapper.getyOffsetPercent : Integer;
begin
result := TLVBKImageA(GetRecordPtr^).yOffsetPercent;
end;
function __TLVBKImageW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TLVBKImageW__Wrapper.setulFlags(const val : ULONG);
begin
TLVBKImageW(GetRecordPtr^).ulFlags := val;
end;
function __TLVBKImageW__Wrapper.getulFlags : ULONG;
begin
result := TLVBKImageW(GetRecordPtr^).ulFlags;
end;
procedure __TLVBKImageW__Wrapper.setcchImageMax(const val : UINT);
begin
TLVBKImageW(GetRecordPtr^).cchImageMax := val;
end;
function __TLVBKImageW__Wrapper.getcchImageMax : UINT;
begin
result := TLVBKImageW(GetRecordPtr^).cchImageMax;
end;
procedure __TLVBKImageW__Wrapper.setxOffsetPercent(const val : Integer);
begin
TLVBKImageW(GetRecordPtr^).xOffsetPercent := val;
end;
function __TLVBKImageW__Wrapper.getxOffsetPercent : Integer;
begin
result := TLVBKImageW(GetRecordPtr^).xOffsetPercent;
end;
procedure __TLVBKImageW__Wrapper.setyOffsetPercent(const val : Integer);
begin
TLVBKImageW(GetRecordPtr^).yOffsetPercent := val;
end;
function __TLVBKImageW__Wrapper.getyOffsetPercent : Integer;
begin
result := TLVBKImageW(GetRecordPtr^).yOffsetPercent;
end;
function __TLVColumn__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TLVColumn__Wrapper.setMask(const val : UINT);
begin
TLVColumn(GetRecordPtr^).Mask := val;
end;
function __TLVColumn__Wrapper.getMask : UINT;
begin
result := TLVColumn(GetRecordPtr^).Mask;
end;
procedure __TLVColumn__Wrapper.setfmt(const val : Integer);
begin
TLVColumn(GetRecordPtr^).fmt := val;
end;
function __TLVColumn__Wrapper.getfmt : Integer;
begin
result := TLVColumn(GetRecordPtr^).fmt;
end;
procedure __TLVColumn__Wrapper.setcx(const val : Integer);
begin
TLVColumn(GetRecordPtr^).cx := val;
end;
function __TLVColumn__Wrapper.getcx : Integer;
begin
result := TLVColumn(GetRecordPtr^).cx;
end;
procedure __TLVColumn__Wrapper.setcchTextMax(const val : Integer);
begin
TLVColumn(GetRecordPtr^).cchTextMax := val;
end;
function __TLVColumn__Wrapper.getcchTextMax : Integer;
begin
result := TLVColumn(GetRecordPtr^).cchTextMax;
end;
procedure __TLVColumn__Wrapper.setiSubItem(const val : Integer);
begin
TLVColumn(GetRecordPtr^).iSubItem := val;
end;
function __TLVColumn__Wrapper.getiSubItem : Integer;
begin
result := TLVColumn(GetRecordPtr^).iSubItem;
end;
procedure __TLVColumn__Wrapper.setiImage(const val : Integer);
begin
TLVColumn(GetRecordPtr^).iImage := val;
end;
function __TLVColumn__Wrapper.getiImage : Integer;
begin
result := TLVColumn(GetRecordPtr^).iImage;
end;
procedure __TLVColumn__Wrapper.setiOrder(const val : Integer);
begin
TLVColumn(GetRecordPtr^).iOrder := val;
end;
function __TLVColumn__Wrapper.getiOrder : Integer;
begin
result := TLVColumn(GetRecordPtr^).iOrder;
end;
function __TLVColumnA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TLVColumnA__Wrapper.setMask(const val : UINT);
begin
TLVColumnA(GetRecordPtr^).Mask := val;
end;
function __TLVColumnA__Wrapper.getMask : UINT;
begin
result := TLVColumnA(GetRecordPtr^).Mask;
end;
procedure __TLVColumnA__Wrapper.setfmt(const val : Integer);
begin
TLVColumnA(GetRecordPtr^).fmt := val;
end;
function __TLVColumnA__Wrapper.getfmt : Integer;
begin
result := TLVColumnA(GetRecordPtr^).fmt;
end;
procedure __TLVColumnA__Wrapper.setcx(const val : Integer);
begin
TLVColumnA(GetRecordPtr^).cx := val;
end;
function __TLVColumnA__Wrapper.getcx : Integer;
begin
result := TLVColumnA(GetRecordPtr^).cx;
end;
procedure __TLVColumnA__Wrapper.setcchTextMax(const val : Integer);
begin
TLVColumnA(GetRecordPtr^).cchTextMax := val;
end;
function __TLVColumnA__Wrapper.getcchTextMax : Integer;
begin
result := TLVColumnA(GetRecordPtr^).cchTextMax;
end;
procedure __TLVColumnA__Wrapper.setiSubItem(const val : Integer);
begin
TLVColumnA(GetRecordPtr^).iSubItem := val;
end;
function __TLVColumnA__Wrapper.getiSubItem : Integer;
begin
result := TLVColumnA(GetRecordPtr^).iSubItem;
end;
procedure __TLVColumnA__Wrapper.setiImage(const val : Integer);
begin
TLVColumnA(GetRecordPtr^).iImage := val;
end;
function __TLVColumnA__Wrapper.getiImage : Integer;
begin
result := TLVColumnA(GetRecordPtr^).iImage;
end;
procedure __TLVColumnA__Wrapper.setiOrder(const val : Integer);
begin
TLVColumnA(GetRecordPtr^).iOrder := val;
end;
function __TLVColumnA__Wrapper.getiOrder : Integer;
begin
result := TLVColumnA(GetRecordPtr^).iOrder;
end;
function __TLVColumnW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TLVColumnW__Wrapper.setMask(const val : UINT);
begin
TLVColumnW(GetRecordPtr^).Mask := val;
end;
function __TLVColumnW__Wrapper.getMask : UINT;
begin
result := TLVColumnW(GetRecordPtr^).Mask;
end;
procedure __TLVColumnW__Wrapper.setfmt(const val : Integer);
begin
TLVColumnW(GetRecordPtr^).fmt := val;
end;
function __TLVColumnW__Wrapper.getfmt : Integer;
begin
result := TLVColumnW(GetRecordPtr^).fmt;
end;
procedure __TLVColumnW__Wrapper.setcx(const val : Integer);
begin
TLVColumnW(GetRecordPtr^).cx := val;
end;
function __TLVColumnW__Wrapper.getcx : Integer;
begin
result := TLVColumnW(GetRecordPtr^).cx;
end;
procedure __TLVColumnW__Wrapper.setcchTextMax(const val : Integer);
begin
TLVColumnW(GetRecordPtr^).cchTextMax := val;
end;
function __TLVColumnW__Wrapper.getcchTextMax : Integer;
begin
result := TLVColumnW(GetRecordPtr^).cchTextMax;
end;
procedure __TLVColumnW__Wrapper.setiSubItem(const val : Integer);
begin
TLVColumnW(GetRecordPtr^).iSubItem := val;
end;
function __TLVColumnW__Wrapper.getiSubItem : Integer;
begin
result := TLVColumnW(GetRecordPtr^).iSubItem;
end;
procedure __TLVColumnW__Wrapper.setiImage(const val : Integer);
begin
TLVColumnW(GetRecordPtr^).iImage := val;
end;
function __TLVColumnW__Wrapper.getiImage : Integer;
begin
result := TLVColumnW(GetRecordPtr^).iImage;
end;
procedure __TLVColumnW__Wrapper.setiOrder(const val : Integer);
begin
TLVColumnW(GetRecordPtr^).iOrder := val;
end;
function __TLVColumnW__Wrapper.getiOrder : Integer;
begin
result := TLVColumnW(GetRecordPtr^).iOrder;
end;
function __TLVDispInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TLVDispInfoA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TLVDispInfoW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TLVFindInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TLVFindInfo__Wrapper.setFlags(const val : UINT);
begin
TLVFindInfo(GetRecordPtr^).Flags := val;
end;
function __TLVFindInfo__Wrapper.getFlags : UINT;
begin
result := TLVFindInfo(GetRecordPtr^).Flags;
end;
procedure __TLVFindInfo__Wrapper.setlParam(const val : lParam);
begin
TLVFindInfo(GetRecordPtr^).lParam := val;
end;
function __TLVFindInfo__Wrapper.getlParam : lParam;
begin
result := TLVFindInfo(GetRecordPtr^).lParam;
end;
procedure __TLVFindInfo__Wrapper.setvkDirection(const val : UINT);
begin
TLVFindInfo(GetRecordPtr^).vkDirection := val;
end;
function __TLVFindInfo__Wrapper.getvkDirection : UINT;
begin
result := TLVFindInfo(GetRecordPtr^).vkDirection;
end;
function __TLVFindInfoA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TLVFindInfoA__Wrapper.setFlags(const val : UINT);
begin
TLVFindInfoA(GetRecordPtr^).Flags := val;
end;
function __TLVFindInfoA__Wrapper.getFlags : UINT;
begin
result := TLVFindInfoA(GetRecordPtr^).Flags;
end;
procedure __TLVFindInfoA__Wrapper.setlParam(const val : lParam);
begin
TLVFindInfoA(GetRecordPtr^).lParam := val;
end;
function __TLVFindInfoA__Wrapper.getlParam : lParam;
begin
result := TLVFindInfoA(GetRecordPtr^).lParam;
end;
procedure __TLVFindInfoA__Wrapper.setvkDirection(const val : UINT);
begin
TLVFindInfoA(GetRecordPtr^).vkDirection := val;
end;
function __TLVFindInfoA__Wrapper.getvkDirection : UINT;
begin
result := TLVFindInfoA(GetRecordPtr^).vkDirection;
end;
function __TLVFindInfoW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TLVFindInfoW__Wrapper.setFlags(const val : UINT);
begin
TLVFindInfoW(GetRecordPtr^).Flags := val;
end;
function __TLVFindInfoW__Wrapper.getFlags : UINT;
begin
result := TLVFindInfoW(GetRecordPtr^).Flags;
end;
procedure __TLVFindInfoW__Wrapper.setlParam(const val : lParam);
begin
TLVFindInfoW(GetRecordPtr^).lParam := val;
end;
function __TLVFindInfoW__Wrapper.getlParam : lParam;
begin
result := TLVFindInfoW(GetRecordPtr^).lParam;
end;
procedure __TLVFindInfoW__Wrapper.setvkDirection(const val : UINT);
begin
TLVFindInfoW(GetRecordPtr^).vkDirection := val;
end;
function __TLVFindInfoW__Wrapper.getvkDirection : UINT;
begin
result := TLVFindInfoW(GetRecordPtr^).vkDirection;
end;
function __TLVHitTestInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TLVHitTestInfo__Wrapper.setFlags(const val : UINT);
begin
TLVHitTestInfo(GetRecordPtr^).Flags := val;
end;
function __TLVHitTestInfo__Wrapper.getFlags : UINT;
begin
result := TLVHitTestInfo(GetRecordPtr^).Flags;
end;
procedure __TLVHitTestInfo__Wrapper.setiItem(const val : Integer);
begin
TLVHitTestInfo(GetRecordPtr^).iItem := val;
end;
function __TLVHitTestInfo__Wrapper.getiItem : Integer;
begin
result := TLVHitTestInfo(GetRecordPtr^).iItem;
end;
procedure __TLVHitTestInfo__Wrapper.setiSubItem(const val : Integer);
begin
TLVHitTestInfo(GetRecordPtr^).iSubItem := val;
end;
function __TLVHitTestInfo__Wrapper.getiSubItem : Integer;
begin
result := TLVHitTestInfo(GetRecordPtr^).iSubItem;
end;
function __TLVItem__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TLVItem__Wrapper.setMask(const val : UINT);
begin
TLVItem(GetRecordPtr^).Mask := val;
end;
function __TLVItem__Wrapper.getMask : UINT;
begin
result := TLVItem(GetRecordPtr^).Mask;
end;
procedure __TLVItem__Wrapper.setiItem(const val : Integer);
begin
TLVItem(GetRecordPtr^).iItem := val;
end;
function __TLVItem__Wrapper.getiItem : Integer;
begin
result := TLVItem(GetRecordPtr^).iItem;
end;
procedure __TLVItem__Wrapper.setiSubItem(const val : Integer);
begin
TLVItem(GetRecordPtr^).iSubItem := val;
end;
function __TLVItem__Wrapper.getiSubItem : Integer;
begin
result := TLVItem(GetRecordPtr^).iSubItem;
end;
procedure __TLVItem__Wrapper.setstate(const val : UINT);
begin
TLVItem(GetRecordPtr^).state := val;
end;
function __TLVItem__Wrapper.getstate : UINT;
begin
result := TLVItem(GetRecordPtr^).state;
end;
procedure __TLVItem__Wrapper.setstateMask(const val : UINT);
begin
TLVItem(GetRecordPtr^).stateMask := val;
end;
function __TLVItem__Wrapper.getstateMask : UINT;
begin
result := TLVItem(GetRecordPtr^).stateMask;
end;
procedure __TLVItem__Wrapper.setcchTextMax(const val : Integer);
begin
TLVItem(GetRecordPtr^).cchTextMax := val;
end;
function __TLVItem__Wrapper.getcchTextMax : Integer;
begin
result := TLVItem(GetRecordPtr^).cchTextMax;
end;
procedure __TLVItem__Wrapper.setiImage(const val : Integer);
begin
TLVItem(GetRecordPtr^).iImage := val;
end;
function __TLVItem__Wrapper.getiImage : Integer;
begin
result := TLVItem(GetRecordPtr^).iImage;
end;
procedure __TLVItem__Wrapper.setlParam(const val : lParam);
begin
TLVItem(GetRecordPtr^).lParam := val;
end;
function __TLVItem__Wrapper.getlParam : lParam;
begin
result := TLVItem(GetRecordPtr^).lParam;
end;
procedure __TLVItem__Wrapper.setiIndent(const val : Integer);
begin
TLVItem(GetRecordPtr^).iIndent := val;
end;
function __TLVItem__Wrapper.getiIndent : Integer;
begin
result := TLVItem(GetRecordPtr^).iIndent;
end;
function __TLVItemA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TLVItemA__Wrapper.setMask(const val : UINT);
begin
TLVItemA(GetRecordPtr^).Mask := val;
end;
function __TLVItemA__Wrapper.getMask : UINT;
begin
result := TLVItemA(GetRecordPtr^).Mask;
end;
procedure __TLVItemA__Wrapper.setiItem(const val : Integer);
begin
TLVItemA(GetRecordPtr^).iItem := val;
end;
function __TLVItemA__Wrapper.getiItem : Integer;
begin
result := TLVItemA(GetRecordPtr^).iItem;
end;
procedure __TLVItemA__Wrapper.setiSubItem(const val : Integer);
begin
TLVItemA(GetRecordPtr^).iSubItem := val;
end;
function __TLVItemA__Wrapper.getiSubItem : Integer;
begin
result := TLVItemA(GetRecordPtr^).iSubItem;
end;
procedure __TLVItemA__Wrapper.setstate(const val : UINT);
begin
TLVItemA(GetRecordPtr^).state := val;
end;
function __TLVItemA__Wrapper.getstate : UINT;
begin
result := TLVItemA(GetRecordPtr^).state;
end;
procedure __TLVItemA__Wrapper.setstateMask(const val : UINT);
begin
TLVItemA(GetRecordPtr^).stateMask := val;
end;
function __TLVItemA__Wrapper.getstateMask : UINT;
begin
result := TLVItemA(GetRecordPtr^).stateMask;
end;
procedure __TLVItemA__Wrapper.setcchTextMax(const val : Integer);
begin
TLVItemA(GetRecordPtr^).cchTextMax := val;
end;
function __TLVItemA__Wrapper.getcchTextMax : Integer;
begin
result := TLVItemA(GetRecordPtr^).cchTextMax;
end;
procedure __TLVItemA__Wrapper.setiImage(const val : Integer);
begin
TLVItemA(GetRecordPtr^).iImage := val;
end;
function __TLVItemA__Wrapper.getiImage : Integer;
begin
result := TLVItemA(GetRecordPtr^).iImage;
end;
procedure __TLVItemA__Wrapper.setlParam(const val : lParam);
begin
TLVItemA(GetRecordPtr^).lParam := val;
end;
function __TLVItemA__Wrapper.getlParam : lParam;
begin
result := TLVItemA(GetRecordPtr^).lParam;
end;
procedure __TLVItemA__Wrapper.setiIndent(const val : Integer);
begin
TLVItemA(GetRecordPtr^).iIndent := val;
end;
function __TLVItemA__Wrapper.getiIndent : Integer;
begin
result := TLVItemA(GetRecordPtr^).iIndent;
end;
function __TLVItemW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TLVItemW__Wrapper.setMask(const val : UINT);
begin
TLVItemW(GetRecordPtr^).Mask := val;
end;
function __TLVItemW__Wrapper.getMask : UINT;
begin
result := TLVItemW(GetRecordPtr^).Mask;
end;
procedure __TLVItemW__Wrapper.setiItem(const val : Integer);
begin
TLVItemW(GetRecordPtr^).iItem := val;
end;
function __TLVItemW__Wrapper.getiItem : Integer;
begin
result := TLVItemW(GetRecordPtr^).iItem;
end;
procedure __TLVItemW__Wrapper.setiSubItem(const val : Integer);
begin
TLVItemW(GetRecordPtr^).iSubItem := val;
end;
function __TLVItemW__Wrapper.getiSubItem : Integer;
begin
result := TLVItemW(GetRecordPtr^).iSubItem;
end;
procedure __TLVItemW__Wrapper.setstate(const val : UINT);
begin
TLVItemW(GetRecordPtr^).state := val;
end;
function __TLVItemW__Wrapper.getstate : UINT;
begin
result := TLVItemW(GetRecordPtr^).state;
end;
procedure __TLVItemW__Wrapper.setstateMask(const val : UINT);
begin
TLVItemW(GetRecordPtr^).stateMask := val;
end;
function __TLVItemW__Wrapper.getstateMask : UINT;
begin
result := TLVItemW(GetRecordPtr^).stateMask;
end;
procedure __TLVItemW__Wrapper.setcchTextMax(const val : Integer);
begin
TLVItemW(GetRecordPtr^).cchTextMax := val;
end;
function __TLVItemW__Wrapper.getcchTextMax : Integer;
begin
result := TLVItemW(GetRecordPtr^).cchTextMax;
end;
procedure __TLVItemW__Wrapper.setiImage(const val : Integer);
begin
TLVItemW(GetRecordPtr^).iImage := val;
end;
function __TLVItemW__Wrapper.getiImage : Integer;
begin
result := TLVItemW(GetRecordPtr^).iImage;
end;
procedure __TLVItemW__Wrapper.setlParam(const val : lParam);
begin
TLVItemW(GetRecordPtr^).lParam := val;
end;
function __TLVItemW__Wrapper.getlParam : lParam;
begin
result := TLVItemW(GetRecordPtr^).lParam;
end;
procedure __TLVItemW__Wrapper.setiIndent(const val : Integer);
begin
TLVItemW(GetRecordPtr^).iIndent := val;
end;
function __TLVItemW__Wrapper.getiIndent : Integer;
begin
result := TLVItemW(GetRecordPtr^).iIndent;
end;
function __TLVKeyDown__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TLVKeyDown__Wrapper.setwVKey(const val : Word);
begin
TLVKeyDown(GetRecordPtr^).wVKey := val;
end;
function __TLVKeyDown__Wrapper.getwVKey : Word;
begin
result := TLVKeyDown(GetRecordPtr^).wVKey;
end;
procedure __TLVKeyDown__Wrapper.setFlags(const val : UINT);
begin
TLVKeyDown(GetRecordPtr^).Flags := val;
end;
function __TLVKeyDown__Wrapper.getFlags : UINT;
begin
result := TLVKeyDown(GetRecordPtr^).Flags;
end;
function __TMCHitTestInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCHitTestInfo__Wrapper.setcbSize(const val : UINT);
begin
TMCHitTestInfo(GetRecordPtr^).cbSize := val;
end;
function __TMCHitTestInfo__Wrapper.getcbSize : UINT;
begin
result := TMCHitTestInfo(GetRecordPtr^).cbSize;
end;
procedure __TMCHitTestInfo__Wrapper.setuHit(const val : UINT);
begin
TMCHitTestInfo(GetRecordPtr^).uHit := val;
end;
function __TMCHitTestInfo__Wrapper.getuHit : UINT;
begin
result := TMCHitTestInfo(GetRecordPtr^).uHit;
end;
function __TNMCacheHint__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMCacheHint__Wrapper.setiFrom(const val : Integer);
begin
TNMCacheHint(GetRecordPtr^).iFrom := val;
end;
function __TNMCacheHint__Wrapper.getiFrom : Integer;
begin
result := TNMCacheHint(GetRecordPtr^).iFrom;
end;
procedure __TNMCacheHint__Wrapper.setiTo(const val : Integer);
begin
TNMCacheHint(GetRecordPtr^).iTo := val;
end;
function __TNMCacheHint__Wrapper.getiTo : Integer;
begin
result := TNMCacheHint(GetRecordPtr^).iTo;
end;
function __TNMCBEDragBegin__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMCBEDragBegin__Wrapper.setiItemid(const val : Integer);
begin
TNMCBEDragBegin(GetRecordPtr^).iItemid := val;
end;
function __TNMCBEDragBegin__Wrapper.getiItemid : Integer;
begin
result := TNMCBEDragBegin(GetRecordPtr^).iItemid;
end;
function __TNMCBEDragBeginA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMCBEDragBeginA__Wrapper.setiItemid(const val : Integer);
begin
TNMCBEDragBeginA(GetRecordPtr^).iItemid := val;
end;
function __TNMCBEDragBeginA__Wrapper.getiItemid : Integer;
begin
result := TNMCBEDragBeginA(GetRecordPtr^).iItemid;
end;
function __TNMCBEDragBeginW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMCBEDragBeginW__Wrapper.setiItemid(const val : Integer);
begin
TNMCBEDragBeginW(GetRecordPtr^).iItemid := val;
end;
function __TNMCBEDragBeginW__Wrapper.getiItemid : Integer;
begin
result := TNMCBEDragBeginW(GetRecordPtr^).iItemid;
end;
function __TNMCBEEndEdit__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMCBEEndEdit__Wrapper.setfChanged(const val : BOOL);
begin
TNMCBEEndEdit(GetRecordPtr^).fChanged := val;
end;
function __TNMCBEEndEdit__Wrapper.getfChanged : BOOL;
begin
result := TNMCBEEndEdit(GetRecordPtr^).fChanged;
end;
procedure __TNMCBEEndEdit__Wrapper.setiNewSelection(const val : Integer);
begin
TNMCBEEndEdit(GetRecordPtr^).iNewSelection := val;
end;
function __TNMCBEEndEdit__Wrapper.getiNewSelection : Integer;
begin
result := TNMCBEEndEdit(GetRecordPtr^).iNewSelection;
end;
procedure __TNMCBEEndEdit__Wrapper.setiWhy(const val : Integer);
begin
TNMCBEEndEdit(GetRecordPtr^).iWhy := val;
end;
function __TNMCBEEndEdit__Wrapper.getiWhy : Integer;
begin
result := TNMCBEEndEdit(GetRecordPtr^).iWhy;
end;
function __TNMCBEEndEditA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMCBEEndEditA__Wrapper.setfChanged(const val : BOOL);
begin
TNMCBEEndEditA(GetRecordPtr^).fChanged := val;
end;
function __TNMCBEEndEditA__Wrapper.getfChanged : BOOL;
begin
result := TNMCBEEndEditA(GetRecordPtr^).fChanged;
end;
procedure __TNMCBEEndEditA__Wrapper.setiNewSelection(const val : Integer);
begin
TNMCBEEndEditA(GetRecordPtr^).iNewSelection := val;
end;
function __TNMCBEEndEditA__Wrapper.getiNewSelection : Integer;
begin
result := TNMCBEEndEditA(GetRecordPtr^).iNewSelection;
end;
procedure __TNMCBEEndEditA__Wrapper.setiWhy(const val : Integer);
begin
TNMCBEEndEditA(GetRecordPtr^).iWhy := val;
end;
function __TNMCBEEndEditA__Wrapper.getiWhy : Integer;
begin
result := TNMCBEEndEditA(GetRecordPtr^).iWhy;
end;
function __TNMCBEEndEditW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMCBEEndEditW__Wrapper.setfChanged(const val : BOOL);
begin
TNMCBEEndEditW(GetRecordPtr^).fChanged := val;
end;
function __TNMCBEEndEditW__Wrapper.getfChanged : BOOL;
begin
result := TNMCBEEndEditW(GetRecordPtr^).fChanged;
end;
procedure __TNMCBEEndEditW__Wrapper.setiNewSelection(const val : Integer);
begin
TNMCBEEndEditW(GetRecordPtr^).iNewSelection := val;
end;
function __TNMCBEEndEditW__Wrapper.getiNewSelection : Integer;
begin
result := TNMCBEEndEditW(GetRecordPtr^).iNewSelection;
end;
procedure __TNMCBEEndEditW__Wrapper.setiWhy(const val : Integer);
begin
TNMCBEEndEditW(GetRecordPtr^).iWhy := val;
end;
function __TNMCBEEndEditW__Wrapper.getiWhy : Integer;
begin
result := TNMCBEEndEditW(GetRecordPtr^).iWhy;
end;
function __TNMChar__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMChar__Wrapper.setch(const val : UINT);
begin
TNMChar(GetRecordPtr^).ch := val;
end;
function __TNMChar__Wrapper.getch : UINT;
begin
result := TNMChar(GetRecordPtr^).ch;
end;
procedure __TNMChar__Wrapper.setdwItemPrev(const val : DWORD);
begin
TNMChar(GetRecordPtr^).dwItemPrev := val;
end;
function __TNMChar__Wrapper.getdwItemPrev : DWORD;
begin
result := TNMChar(GetRecordPtr^).dwItemPrev;
end;
procedure __TNMChar__Wrapper.setdwItemNext(const val : DWORD);
begin
TNMChar(GetRecordPtr^).dwItemNext := val;
end;
function __TNMChar__Wrapper.getdwItemNext : DWORD;
begin
result := TNMChar(GetRecordPtr^).dwItemNext;
end;
function __TNMClick__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMClick__Wrapper.setdwItemSpec(const val : DWORD);
begin
TNMClick(GetRecordPtr^).dwItemSpec := val;
end;
function __TNMClick__Wrapper.getdwItemSpec : DWORD;
begin
result := TNMClick(GetRecordPtr^).dwItemSpec;
end;
procedure __TNMClick__Wrapper.setdwItemData(const val : DWORD);
begin
TNMClick(GetRecordPtr^).dwItemData := val;
end;
function __TNMClick__Wrapper.getdwItemData : DWORD;
begin
result := TNMClick(GetRecordPtr^).dwItemData;
end;
procedure __TNMClick__Wrapper.setdwHitInfo(const val : DWORD);
begin
TNMClick(GetRecordPtr^).dwHitInfo := val;
end;
function __TNMClick__Wrapper.getdwHitInfo : DWORD;
begin
result := TNMClick(GetRecordPtr^).dwHitInfo;
end;
function __TNMComboBoxEx__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TNMComboBoxExA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TNMComboBoxExW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TNMCustomDraw__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMCustomDraw__Wrapper.setdwDrawStage(const val : DWORD);
begin
TNMCustomDraw(GetRecordPtr^).dwDrawStage := val;
end;
function __TNMCustomDraw__Wrapper.getdwDrawStage : DWORD;
begin
result := TNMCustomDraw(GetRecordPtr^).dwDrawStage;
end;
procedure __TNMCustomDraw__Wrapper.setdwItemSpec(const val : DWORD);
begin
TNMCustomDraw(GetRecordPtr^).dwItemSpec := val;
end;
function __TNMCustomDraw__Wrapper.getdwItemSpec : DWORD;
begin
result := TNMCustomDraw(GetRecordPtr^).dwItemSpec;
end;
procedure __TNMCustomDraw__Wrapper.setuItemState(const val : UINT);
begin
TNMCustomDraw(GetRecordPtr^).uItemState := val;
end;
function __TNMCustomDraw__Wrapper.getuItemState : UINT;
begin
result := TNMCustomDraw(GetRecordPtr^).uItemState;
end;
procedure __TNMCustomDraw__Wrapper.setlItemlParam(const val : lParam);
begin
TNMCustomDraw(GetRecordPtr^).lItemlParam := val;
end;
function __TNMCustomDraw__Wrapper.getlItemlParam : lParam;
begin
result := TNMCustomDraw(GetRecordPtr^).lItemlParam;
end;
function __TNMDateTimeChange__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMDateTimeChange__Wrapper.setdwFlags(const val : DWORD);
begin
TNMDateTimeChange(GetRecordPtr^).dwFlags := val;
end;
function __TNMDateTimeChange__Wrapper.getdwFlags : DWORD;
begin
result := TNMDateTimeChange(GetRecordPtr^).dwFlags;
end;
function __TNMDateTimeFormat__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TNMDateTimeFormatA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TNMDateTimeFormatQuery__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TNMDateTimeFormatQueryA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TNMDateTimeFormatQueryW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TNMDateTimeFormatW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TNMDateTimeString__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMDateTimeString__Wrapper.setdwFlags(const val : DWORD);
begin
TNMDateTimeString(GetRecordPtr^).dwFlags := val;
end;
function __TNMDateTimeString__Wrapper.getdwFlags : DWORD;
begin
result := TNMDateTimeString(GetRecordPtr^).dwFlags;
end;
function __TNMDateTimeStringA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMDateTimeStringA__Wrapper.setdwFlags(const val : DWORD);
begin
TNMDateTimeStringA(GetRecordPtr^).dwFlags := val;
end;
function __TNMDateTimeStringA__Wrapper.getdwFlags : DWORD;
begin
result := TNMDateTimeStringA(GetRecordPtr^).dwFlags;
end;
function __TNMDateTimeStringW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMDateTimeStringW__Wrapper.setdwFlags(const val : DWORD);
begin
TNMDateTimeStringW(GetRecordPtr^).dwFlags := val;
end;
function __TNMDateTimeStringW__Wrapper.getdwFlags : DWORD;
begin
result := TNMDateTimeStringW(GetRecordPtr^).dwFlags;
end;
function __TNMDateTimeWMKeyDown__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMDateTimeWMKeyDown__Wrapper.setnVirtKey(const val : Integer);
begin
TNMDateTimeWMKeyDown(GetRecordPtr^).nVirtKey := val;
end;
function __TNMDateTimeWMKeyDown__Wrapper.getnVirtKey : Integer;
begin
result := TNMDateTimeWMKeyDown(GetRecordPtr^).nVirtKey;
end;
function __TNMDateTimeWMKeyDownA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMDateTimeWMKeyDownA__Wrapper.setnVirtKey(const val : Integer);
begin
TNMDateTimeWMKeyDownA(GetRecordPtr^).nVirtKey := val;
end;
function __TNMDateTimeWMKeyDownA__Wrapper.getnVirtKey : Integer;
begin
result := TNMDateTimeWMKeyDownA(GetRecordPtr^).nVirtKey;
end;
function __TNMDateTimeWMKeyDownW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMDateTimeWMKeyDownW__Wrapper.setnVirtKey(const val : Integer);
begin
TNMDateTimeWMKeyDownW(GetRecordPtr^).nVirtKey := val;
end;
function __TNMDateTimeWMKeyDownW__Wrapper.getnVirtKey : Integer;
begin
result := TNMDateTimeWMKeyDownW(GetRecordPtr^).nVirtKey;
end;
function __TNMDayState__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMDayState__Wrapper.setcDayState(const val : Integer);
begin
TNMDayState(GetRecordPtr^).cDayState := val;
end;
function __TNMDayState__Wrapper.getcDayState : Integer;
begin
result := TNMDayState(GetRecordPtr^).cDayState;
end;
function __TNMFinditem__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMFinditem__Wrapper.setiStart(const val : Integer);
begin
TNMFinditem(GetRecordPtr^).iStart := val;
end;
function __TNMFinditem__Wrapper.getiStart : Integer;
begin
result := TNMFinditem(GetRecordPtr^).iStart;
end;
function __TNMFinditemA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMFinditemA__Wrapper.setiStart(const val : Integer);
begin
TNMFinditemA(GetRecordPtr^).iStart := val;
end;
function __TNMFinditemA__Wrapper.getiStart : Integer;
begin
result := TNMFinditemA(GetRecordPtr^).iStart;
end;
function __TNMFinditemW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMFinditemW__Wrapper.setiStart(const val : Integer);
begin
TNMFinditemW(GetRecordPtr^).iStart := val;
end;
function __TNMFinditemW__Wrapper.getiStart : Integer;
begin
result := TNMFinditemW(GetRecordPtr^).iStart;
end;
function __TNMHDispInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMHDispInfo__Wrapper.setiItem(const val : Integer);
begin
TNMHDispInfo(GetRecordPtr^).iItem := val;
end;
function __TNMHDispInfo__Wrapper.getiItem : Integer;
begin
result := TNMHDispInfo(GetRecordPtr^).iItem;
end;
procedure __TNMHDispInfo__Wrapper.setMask(const val : UINT);
begin
TNMHDispInfo(GetRecordPtr^).Mask := val;
end;
function __TNMHDispInfo__Wrapper.getMask : UINT;
begin
result := TNMHDispInfo(GetRecordPtr^).Mask;
end;
procedure __TNMHDispInfo__Wrapper.setcchTextMax(const val : Integer);
begin
TNMHDispInfo(GetRecordPtr^).cchTextMax := val;
end;
function __TNMHDispInfo__Wrapper.getcchTextMax : Integer;
begin
result := TNMHDispInfo(GetRecordPtr^).cchTextMax;
end;
procedure __TNMHDispInfo__Wrapper.setiImage(const val : Integer);
begin
TNMHDispInfo(GetRecordPtr^).iImage := val;
end;
function __TNMHDispInfo__Wrapper.getiImage : Integer;
begin
result := TNMHDispInfo(GetRecordPtr^).iImage;
end;
procedure __TNMHDispInfo__Wrapper.setlParam(const val : lParam);
begin
TNMHDispInfo(GetRecordPtr^).lParam := val;
end;
function __TNMHDispInfo__Wrapper.getlParam : lParam;
begin
result := TNMHDispInfo(GetRecordPtr^).lParam;
end;
function __TNMHDispInfoA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMHDispInfoA__Wrapper.setiItem(const val : Integer);
begin
TNMHDispInfoA(GetRecordPtr^).iItem := val;
end;
function __TNMHDispInfoA__Wrapper.getiItem : Integer;
begin
result := TNMHDispInfoA(GetRecordPtr^).iItem;
end;
procedure __TNMHDispInfoA__Wrapper.setMask(const val : UINT);
begin
TNMHDispInfoA(GetRecordPtr^).Mask := val;
end;
function __TNMHDispInfoA__Wrapper.getMask : UINT;
begin
result := TNMHDispInfoA(GetRecordPtr^).Mask;
end;
procedure __TNMHDispInfoA__Wrapper.setcchTextMax(const val : Integer);
begin
TNMHDispInfoA(GetRecordPtr^).cchTextMax := val;
end;
function __TNMHDispInfoA__Wrapper.getcchTextMax : Integer;
begin
result := TNMHDispInfoA(GetRecordPtr^).cchTextMax;
end;
procedure __TNMHDispInfoA__Wrapper.setiImage(const val : Integer);
begin
TNMHDispInfoA(GetRecordPtr^).iImage := val;
end;
function __TNMHDispInfoA__Wrapper.getiImage : Integer;
begin
result := TNMHDispInfoA(GetRecordPtr^).iImage;
end;
procedure __TNMHDispInfoA__Wrapper.setlParam(const val : lParam);
begin
TNMHDispInfoA(GetRecordPtr^).lParam := val;
end;
function __TNMHDispInfoA__Wrapper.getlParam : lParam;
begin
result := TNMHDispInfoA(GetRecordPtr^).lParam;
end;
function __TNMHDispInfoW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMHDispInfoW__Wrapper.setiItem(const val : Integer);
begin
TNMHDispInfoW(GetRecordPtr^).iItem := val;
end;
function __TNMHDispInfoW__Wrapper.getiItem : Integer;
begin
result := TNMHDispInfoW(GetRecordPtr^).iItem;
end;
procedure __TNMHDispInfoW__Wrapper.setMask(const val : UINT);
begin
TNMHDispInfoW(GetRecordPtr^).Mask := val;
end;
function __TNMHDispInfoW__Wrapper.getMask : UINT;
begin
result := TNMHDispInfoW(GetRecordPtr^).Mask;
end;
procedure __TNMHDispInfoW__Wrapper.setcchTextMax(const val : Integer);
begin
TNMHDispInfoW(GetRecordPtr^).cchTextMax := val;
end;
function __TNMHDispInfoW__Wrapper.getcchTextMax : Integer;
begin
result := TNMHDispInfoW(GetRecordPtr^).cchTextMax;
end;
procedure __TNMHDispInfoW__Wrapper.setiImage(const val : Integer);
begin
TNMHDispInfoW(GetRecordPtr^).iImage := val;
end;
function __TNMHDispInfoW__Wrapper.getiImage : Integer;
begin
result := TNMHDispInfoW(GetRecordPtr^).iImage;
end;
procedure __TNMHDispInfoW__Wrapper.setlParam(const val : lParam);
begin
TNMHDispInfoW(GetRecordPtr^).lParam := val;
end;
function __TNMHDispInfoW__Wrapper.getlParam : lParam;
begin
result := TNMHDispInfoW(GetRecordPtr^).lParam;
end;
function __TNMIPAddress__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMIPAddress__Wrapper.setiField(const val : Integer);
begin
TNMIPAddress(GetRecordPtr^).iField := val;
end;
function __TNMIPAddress__Wrapper.getiField : Integer;
begin
result := TNMIPAddress(GetRecordPtr^).iField;
end;
procedure __TNMIPAddress__Wrapper.setiValue(const val : Integer);
begin
TNMIPAddress(GetRecordPtr^).iValue := val;
end;
function __TNMIPAddress__Wrapper.getiValue : Integer;
begin
result := TNMIPAddress(GetRecordPtr^).iValue;
end;
function __TNMItemActivate__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMItemActivate__Wrapper.setiItem(const val : Integer);
begin
TNMItemActivate(GetRecordPtr^).iItem := val;
end;
function __TNMItemActivate__Wrapper.getiItem : Integer;
begin
result := TNMItemActivate(GetRecordPtr^).iItem;
end;
procedure __TNMItemActivate__Wrapper.setiSubItem(const val : Integer);
begin
TNMItemActivate(GetRecordPtr^).iSubItem := val;
end;
function __TNMItemActivate__Wrapper.getiSubItem : Integer;
begin
result := TNMItemActivate(GetRecordPtr^).iSubItem;
end;
procedure __TNMItemActivate__Wrapper.setuNewState(const val : UINT);
begin
TNMItemActivate(GetRecordPtr^).uNewState := val;
end;
function __TNMItemActivate__Wrapper.getuNewState : UINT;
begin
result := TNMItemActivate(GetRecordPtr^).uNewState;
end;
procedure __TNMItemActivate__Wrapper.setuOldState(const val : UINT);
begin
TNMItemActivate(GetRecordPtr^).uOldState := val;
end;
function __TNMItemActivate__Wrapper.getuOldState : UINT;
begin
result := TNMItemActivate(GetRecordPtr^).uOldState;
end;
procedure __TNMItemActivate__Wrapper.setuChanged(const val : UINT);
begin
TNMItemActivate(GetRecordPtr^).uChanged := val;
end;
function __TNMItemActivate__Wrapper.getuChanged : UINT;
begin
result := TNMItemActivate(GetRecordPtr^).uChanged;
end;
procedure __TNMItemActivate__Wrapper.setlParam(const val : lParam);
begin
TNMItemActivate(GetRecordPtr^).lParam := val;
end;
function __TNMItemActivate__Wrapper.getlParam : lParam;
begin
result := TNMItemActivate(GetRecordPtr^).lParam;
end;
procedure __TNMItemActivate__Wrapper.setuKeyFlags(const val : UINT);
begin
TNMItemActivate(GetRecordPtr^).uKeyFlags := val;
end;
function __TNMItemActivate__Wrapper.getuKeyFlags : UINT;
begin
result := TNMItemActivate(GetRecordPtr^).uKeyFlags;
end;
function __TNMKey__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMKey__Wrapper.setnVKey(const val : UINT);
begin
TNMKey(GetRecordPtr^).nVKey := val;
end;
function __TNMKey__Wrapper.getnVKey : UINT;
begin
result := TNMKey(GetRecordPtr^).nVKey;
end;
procedure __TNMKey__Wrapper.setuFlags(const val : UINT);
begin
TNMKey(GetRecordPtr^).uFlags := val;
end;
function __TNMKey__Wrapper.getuFlags : UINT;
begin
result := TNMKey(GetRecordPtr^).uFlags;
end;
function __TNMListView__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMListView__Wrapper.setiItem(const val : Integer);
begin
TNMListView(GetRecordPtr^).iItem := val;
end;
function __TNMListView__Wrapper.getiItem : Integer;
begin
result := TNMListView(GetRecordPtr^).iItem;
end;
procedure __TNMListView__Wrapper.setiSubItem(const val : Integer);
begin
TNMListView(GetRecordPtr^).iSubItem := val;
end;
function __TNMListView__Wrapper.getiSubItem : Integer;
begin
result := TNMListView(GetRecordPtr^).iSubItem;
end;
procedure __TNMListView__Wrapper.setuNewState(const val : UINT);
begin
TNMListView(GetRecordPtr^).uNewState := val;
end;
function __TNMListView__Wrapper.getuNewState : UINT;
begin
result := TNMListView(GetRecordPtr^).uNewState;
end;
procedure __TNMListView__Wrapper.setuOldState(const val : UINT);
begin
TNMListView(GetRecordPtr^).uOldState := val;
end;
function __TNMListView__Wrapper.getuOldState : UINT;
begin
result := TNMListView(GetRecordPtr^).uOldState;
end;
procedure __TNMListView__Wrapper.setuChanged(const val : UINT);
begin
TNMListView(GetRecordPtr^).uChanged := val;
end;
function __TNMListView__Wrapper.getuChanged : UINT;
begin
result := TNMListView(GetRecordPtr^).uChanged;
end;
procedure __TNMListView__Wrapper.setlParam(const val : lParam);
begin
TNMListView(GetRecordPtr^).lParam := val;
end;
function __TNMListView__Wrapper.getlParam : lParam;
begin
result := TNMListView(GetRecordPtr^).lParam;
end;
function __TNMLVCacheHint__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMLVCacheHint__Wrapper.setiFrom(const val : Integer);
begin
TNMLVCacheHint(GetRecordPtr^).iFrom := val;
end;
function __TNMLVCacheHint__Wrapper.getiFrom : Integer;
begin
result := TNMLVCacheHint(GetRecordPtr^).iFrom;
end;
procedure __TNMLVCacheHint__Wrapper.setiTo(const val : Integer);
begin
TNMLVCacheHint(GetRecordPtr^).iTo := val;
end;
function __TNMLVCacheHint__Wrapper.getiTo : Integer;
begin
result := TNMLVCacheHint(GetRecordPtr^).iTo;
end;
function __TNMLVCustomDraw__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMLVCustomDraw__Wrapper.setclrText(const val : COLORREF);
begin
TNMLVCustomDraw(GetRecordPtr^).clrText := val;
end;
function __TNMLVCustomDraw__Wrapper.getclrText : COLORREF;
begin
result := TNMLVCustomDraw(GetRecordPtr^).clrText;
end;
procedure __TNMLVCustomDraw__Wrapper.setclrTextBk(const val : COLORREF);
begin
TNMLVCustomDraw(GetRecordPtr^).clrTextBk := val;
end;
function __TNMLVCustomDraw__Wrapper.getclrTextBk : COLORREF;
begin
result := TNMLVCustomDraw(GetRecordPtr^).clrTextBk;
end;
procedure __TNMLVCustomDraw__Wrapper.setiSubItem(const val : Integer);
begin
TNMLVCustomDraw(GetRecordPtr^).iSubItem := val;
end;
function __TNMLVCustomDraw__Wrapper.getiSubItem : Integer;
begin
result := TNMLVCustomDraw(GetRecordPtr^).iSubItem;
end;
function __TNMLVFinditem__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMLVFinditem__Wrapper.setiStart(const val : Integer);
begin
TNMLVFinditem(GetRecordPtr^).iStart := val;
end;
function __TNMLVFinditem__Wrapper.getiStart : Integer;
begin
result := TNMLVFinditem(GetRecordPtr^).iStart;
end;
function __TNMLVFinditemA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMLVFinditemA__Wrapper.setiStart(const val : Integer);
begin
TNMLVFinditemA(GetRecordPtr^).iStart := val;
end;
function __TNMLVFinditemA__Wrapper.getiStart : Integer;
begin
result := TNMLVFinditemA(GetRecordPtr^).iStart;
end;
function __TNMLVFinditemW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMLVFinditemW__Wrapper.setiStart(const val : Integer);
begin
TNMLVFinditemW(GetRecordPtr^).iStart := val;
end;
function __TNMLVFinditemW__Wrapper.getiStart : Integer;
begin
result := TNMLVFinditemW(GetRecordPtr^).iStart;
end;
function __TNMLVGetInfoTip__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMLVGetInfoTip__Wrapper.setdwFlags(const val : DWORD);
begin
TNMLVGetInfoTip(GetRecordPtr^).dwFlags := val;
end;
function __TNMLVGetInfoTip__Wrapper.getdwFlags : DWORD;
begin
result := TNMLVGetInfoTip(GetRecordPtr^).dwFlags;
end;
procedure __TNMLVGetInfoTip__Wrapper.setcchTextMax(const val : Integer);
begin
TNMLVGetInfoTip(GetRecordPtr^).cchTextMax := val;
end;
function __TNMLVGetInfoTip__Wrapper.getcchTextMax : Integer;
begin
result := TNMLVGetInfoTip(GetRecordPtr^).cchTextMax;
end;
procedure __TNMLVGetInfoTip__Wrapper.setiItem(const val : Integer);
begin
TNMLVGetInfoTip(GetRecordPtr^).iItem := val;
end;
function __TNMLVGetInfoTip__Wrapper.getiItem : Integer;
begin
result := TNMLVGetInfoTip(GetRecordPtr^).iItem;
end;
procedure __TNMLVGetInfoTip__Wrapper.setiSubItem(const val : Integer);
begin
TNMLVGetInfoTip(GetRecordPtr^).iSubItem := val;
end;
function __TNMLVGetInfoTip__Wrapper.getiSubItem : Integer;
begin
result := TNMLVGetInfoTip(GetRecordPtr^).iSubItem;
end;
procedure __TNMLVGetInfoTip__Wrapper.setlParam(const val : lParam);
begin
TNMLVGetInfoTip(GetRecordPtr^).lParam := val;
end;
function __TNMLVGetInfoTip__Wrapper.getlParam : lParam;
begin
result := TNMLVGetInfoTip(GetRecordPtr^).lParam;
end;
function __TNMLVGetInfoTipA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMLVGetInfoTipA__Wrapper.setdwFlags(const val : DWORD);
begin
TNMLVGetInfoTipA(GetRecordPtr^).dwFlags := val;
end;
function __TNMLVGetInfoTipA__Wrapper.getdwFlags : DWORD;
begin
result := TNMLVGetInfoTipA(GetRecordPtr^).dwFlags;
end;
procedure __TNMLVGetInfoTipA__Wrapper.setcchTextMax(const val : Integer);
begin
TNMLVGetInfoTipA(GetRecordPtr^).cchTextMax := val;
end;
function __TNMLVGetInfoTipA__Wrapper.getcchTextMax : Integer;
begin
result := TNMLVGetInfoTipA(GetRecordPtr^).cchTextMax;
end;
procedure __TNMLVGetInfoTipA__Wrapper.setiItem(const val : Integer);
begin
TNMLVGetInfoTipA(GetRecordPtr^).iItem := val;
end;
function __TNMLVGetInfoTipA__Wrapper.getiItem : Integer;
begin
result := TNMLVGetInfoTipA(GetRecordPtr^).iItem;
end;
procedure __TNMLVGetInfoTipA__Wrapper.setiSubItem(const val : Integer);
begin
TNMLVGetInfoTipA(GetRecordPtr^).iSubItem := val;
end;
function __TNMLVGetInfoTipA__Wrapper.getiSubItem : Integer;
begin
result := TNMLVGetInfoTipA(GetRecordPtr^).iSubItem;
end;
procedure __TNMLVGetInfoTipA__Wrapper.setlParam(const val : lParam);
begin
TNMLVGetInfoTipA(GetRecordPtr^).lParam := val;
end;
function __TNMLVGetInfoTipA__Wrapper.getlParam : lParam;
begin
result := TNMLVGetInfoTipA(GetRecordPtr^).lParam;
end;
function __TNMLVGetInfoTipW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMLVGetInfoTipW__Wrapper.setdwFlags(const val : DWORD);
begin
TNMLVGetInfoTipW(GetRecordPtr^).dwFlags := val;
end;
function __TNMLVGetInfoTipW__Wrapper.getdwFlags : DWORD;
begin
result := TNMLVGetInfoTipW(GetRecordPtr^).dwFlags;
end;
procedure __TNMLVGetInfoTipW__Wrapper.setcchTextMax(const val : Integer);
begin
TNMLVGetInfoTipW(GetRecordPtr^).cchTextMax := val;
end;
function __TNMLVGetInfoTipW__Wrapper.getcchTextMax : Integer;
begin
result := TNMLVGetInfoTipW(GetRecordPtr^).cchTextMax;
end;
procedure __TNMLVGetInfoTipW__Wrapper.setiItem(const val : Integer);
begin
TNMLVGetInfoTipW(GetRecordPtr^).iItem := val;
end;
function __TNMLVGetInfoTipW__Wrapper.getiItem : Integer;
begin
result := TNMLVGetInfoTipW(GetRecordPtr^).iItem;
end;
procedure __TNMLVGetInfoTipW__Wrapper.setiSubItem(const val : Integer);
begin
TNMLVGetInfoTipW(GetRecordPtr^).iSubItem := val;
end;
function __TNMLVGetInfoTipW__Wrapper.getiSubItem : Integer;
begin
result := TNMLVGetInfoTipW(GetRecordPtr^).iSubItem;
end;
procedure __TNMLVGetInfoTipW__Wrapper.setlParam(const val : lParam);
begin
TNMLVGetInfoTipW(GetRecordPtr^).lParam := val;
end;
function __TNMLVGetInfoTipW__Wrapper.getlParam : lParam;
begin
result := TNMLVGetInfoTipW(GetRecordPtr^).lParam;
end;
function __TNMLVODStateChange__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMLVODStateChange__Wrapper.setiFrom(const val : Integer);
begin
TNMLVODStateChange(GetRecordPtr^).iFrom := val;
end;
function __TNMLVODStateChange__Wrapper.getiFrom : Integer;
begin
result := TNMLVODStateChange(GetRecordPtr^).iFrom;
end;
procedure __TNMLVODStateChange__Wrapper.setiTo(const val : Integer);
begin
TNMLVODStateChange(GetRecordPtr^).iTo := val;
end;
function __TNMLVODStateChange__Wrapper.getiTo : Integer;
begin
result := TNMLVODStateChange(GetRecordPtr^).iTo;
end;
procedure __TNMLVODStateChange__Wrapper.setuNewState(const val : UINT);
begin
TNMLVODStateChange(GetRecordPtr^).uNewState := val;
end;
function __TNMLVODStateChange__Wrapper.getuNewState : UINT;
begin
result := TNMLVODStateChange(GetRecordPtr^).uNewState;
end;
procedure __TNMLVODStateChange__Wrapper.setuOldState(const val : UINT);
begin
TNMLVODStateChange(GetRecordPtr^).uOldState := val;
end;
function __TNMLVODStateChange__Wrapper.getuOldState : UINT;
begin
result := TNMLVODStateChange(GetRecordPtr^).uOldState;
end;
function __TNMMouse__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMMouse__Wrapper.setdwItemSpec(const val : DWORD);
begin
TNMMouse(GetRecordPtr^).dwItemSpec := val;
end;
function __TNMMouse__Wrapper.getdwItemSpec : DWORD;
begin
result := TNMMouse(GetRecordPtr^).dwItemSpec;
end;
procedure __TNMMouse__Wrapper.setdwItemData(const val : DWORD);
begin
TNMMouse(GetRecordPtr^).dwItemData := val;
end;
function __TNMMouse__Wrapper.getdwItemData : DWORD;
begin
result := TNMMouse(GetRecordPtr^).dwItemData;
end;
procedure __TNMMouse__Wrapper.setdwHitInfo(const val : DWORD);
begin
TNMMouse(GetRecordPtr^).dwHitInfo := val;
end;
function __TNMMouse__Wrapper.getdwHitInfo : DWORD;
begin
result := TNMMouse(GetRecordPtr^).dwHitInfo;
end;
function __TNMObjectNotify__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMObjectNotify__Wrapper.setiItem(const val : Integer);
begin
TNMObjectNotify(GetRecordPtr^).iItem := val;
end;
function __TNMObjectNotify__Wrapper.getiItem : Integer;
begin
result := TNMObjectNotify(GetRecordPtr^).iItem;
end;
procedure __TNMObjectNotify__Wrapper.setdwFlags(const val : DWORD);
begin
TNMObjectNotify(GetRecordPtr^).dwFlags := val;
end;
function __TNMObjectNotify__Wrapper.getdwFlags : DWORD;
begin
result := TNMObjectNotify(GetRecordPtr^).dwFlags;
end;
function __TNMPGCalcSize__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMPGCalcSize__Wrapper.setdwFlag(const val : DWORD);
begin
TNMPGCalcSize(GetRecordPtr^).dwFlag := val;
end;
function __TNMPGCalcSize__Wrapper.getdwFlag : DWORD;
begin
result := TNMPGCalcSize(GetRecordPtr^).dwFlag;
end;
procedure __TNMPGCalcSize__Wrapper.setiWidth(const val : Integer);
begin
TNMPGCalcSize(GetRecordPtr^).iWidth := val;
end;
function __TNMPGCalcSize__Wrapper.getiWidth : Integer;
begin
result := TNMPGCalcSize(GetRecordPtr^).iWidth;
end;
procedure __TNMPGCalcSize__Wrapper.setiHeight(const val : Integer);
begin
TNMPGCalcSize(GetRecordPtr^).iHeight := val;
end;
function __TNMPGCalcSize__Wrapper.getiHeight : Integer;
begin
result := TNMPGCalcSize(GetRecordPtr^).iHeight;
end;
function __TNMPGScroll__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMPGScroll__Wrapper.setfwKeys(const val : Word);
begin
TNMPGScroll(GetRecordPtr^).fwKeys := val;
end;
function __TNMPGScroll__Wrapper.getfwKeys : Word;
begin
result := TNMPGScroll(GetRecordPtr^).fwKeys;
end;
procedure __TNMPGScroll__Wrapper.setiDir(const val : Integer);
begin
TNMPGScroll(GetRecordPtr^).iDir := val;
end;
function __TNMPGScroll__Wrapper.getiDir : Integer;
begin
result := TNMPGScroll(GetRecordPtr^).iDir;
end;
procedure __TNMPGScroll__Wrapper.setiXpos(const val : Integer);
begin
TNMPGScroll(GetRecordPtr^).iXpos := val;
end;
function __TNMPGScroll__Wrapper.getiXpos : Integer;
begin
result := TNMPGScroll(GetRecordPtr^).iXpos;
end;
procedure __TNMPGScroll__Wrapper.setiYpos(const val : Integer);
begin
TNMPGScroll(GetRecordPtr^).iYpos := val;
end;
function __TNMPGScroll__Wrapper.getiYpos : Integer;
begin
result := TNMPGScroll(GetRecordPtr^).iYpos;
end;
procedure __TNMPGScroll__Wrapper.setiScroll(const val : Integer);
begin
TNMPGScroll(GetRecordPtr^).iScroll := val;
end;
function __TNMPGScroll__Wrapper.getiScroll : Integer;
begin
result := TNMPGScroll(GetRecordPtr^).iScroll;
end;
function __TNMRBAutoSize__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMRBAutoSize__Wrapper.setfChanged(const val : BOOL);
begin
TNMRBAutoSize(GetRecordPtr^).fChanged := val;
end;
function __TNMRBAutoSize__Wrapper.getfChanged : BOOL;
begin
result := TNMRBAutoSize(GetRecordPtr^).fChanged;
end;
function __TNMReBar__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMReBar__Wrapper.setdwMask(const val : DWORD);
begin
TNMReBar(GetRecordPtr^).dwMask := val;
end;
function __TNMReBar__Wrapper.getdwMask : DWORD;
begin
result := TNMReBar(GetRecordPtr^).dwMask;
end;
procedure __TNMReBar__Wrapper.setuBand(const val : UINT);
begin
TNMReBar(GetRecordPtr^).uBand := val;
end;
function __TNMReBar__Wrapper.getuBand : UINT;
begin
result := TNMReBar(GetRecordPtr^).uBand;
end;
procedure __TNMReBar__Wrapper.setfStyle(const val : UINT);
begin
TNMReBar(GetRecordPtr^).fStyle := val;
end;
function __TNMReBar__Wrapper.getfStyle : UINT;
begin
result := TNMReBar(GetRecordPtr^).fStyle;
end;
procedure __TNMReBar__Wrapper.setwID(const val : UINT);
begin
TNMReBar(GetRecordPtr^).wID := val;
end;
function __TNMReBar__Wrapper.getwID : UINT;
begin
result := TNMReBar(GetRecordPtr^).wID;
end;
procedure __TNMReBar__Wrapper.setlParam(const val : lParam);
begin
TNMReBar(GetRecordPtr^).lParam := val;
end;
function __TNMReBar__Wrapper.getlParam : lParam;
begin
result := TNMReBar(GetRecordPtr^).lParam;
end;
function __TNMReBarChildSize__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMReBarChildSize__Wrapper.setuBand(const val : UINT);
begin
TNMReBarChildSize(GetRecordPtr^).uBand := val;
end;
function __TNMReBarChildSize__Wrapper.getuBand : UINT;
begin
result := TNMReBarChildSize(GetRecordPtr^).uBand;
end;
procedure __TNMReBarChildSize__Wrapper.setwID(const val : UINT);
begin
TNMReBarChildSize(GetRecordPtr^).wID := val;
end;
function __TNMReBarChildSize__Wrapper.getwID : UINT;
begin
result := TNMReBarChildSize(GetRecordPtr^).wID;
end;
function __TNMSelChange__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TNMSelect__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TNMTBCustomDraw__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMTBCustomDraw__Wrapper.setclrText(const val : COLORREF);
begin
TNMTBCustomDraw(GetRecordPtr^).clrText := val;
end;
function __TNMTBCustomDraw__Wrapper.getclrText : COLORREF;
begin
result := TNMTBCustomDraw(GetRecordPtr^).clrText;
end;
procedure __TNMTBCustomDraw__Wrapper.setclrMark(const val : COLORREF);
begin
TNMTBCustomDraw(GetRecordPtr^).clrMark := val;
end;
function __TNMTBCustomDraw__Wrapper.getclrMark : COLORREF;
begin
result := TNMTBCustomDraw(GetRecordPtr^).clrMark;
end;
procedure __TNMTBCustomDraw__Wrapper.setclrTextHighlight(const val : COLORREF);
begin
TNMTBCustomDraw(GetRecordPtr^).clrTextHighlight := val;
end;
function __TNMTBCustomDraw__Wrapper.getclrTextHighlight : COLORREF;
begin
result := TNMTBCustomDraw(GetRecordPtr^).clrTextHighlight;
end;
procedure __TNMTBCustomDraw__Wrapper.setclrBtnFace(const val : COLORREF);
begin
TNMTBCustomDraw(GetRecordPtr^).clrBtnFace := val;
end;
function __TNMTBCustomDraw__Wrapper.getclrBtnFace : COLORREF;
begin
result := TNMTBCustomDraw(GetRecordPtr^).clrBtnFace;
end;
procedure __TNMTBCustomDraw__Wrapper.setclrBtnHighlight(const val : COLORREF);
begin
TNMTBCustomDraw(GetRecordPtr^).clrBtnHighlight := val;
end;
function __TNMTBCustomDraw__Wrapper.getclrBtnHighlight : COLORREF;
begin
result := TNMTBCustomDraw(GetRecordPtr^).clrBtnHighlight;
end;
procedure __TNMTBCustomDraw__Wrapper.setclrHighlightHotTrack(const val : COLORREF);
begin
TNMTBCustomDraw(GetRecordPtr^).clrHighlightHotTrack := val;
end;
function __TNMTBCustomDraw__Wrapper.getclrHighlightHotTrack : COLORREF;
begin
result := TNMTBCustomDraw(GetRecordPtr^).clrHighlightHotTrack;
end;
procedure __TNMTBCustomDraw__Wrapper.setnStringBkMode(const val : Integer);
begin
TNMTBCustomDraw(GetRecordPtr^).nStringBkMode := val;
end;
function __TNMTBCustomDraw__Wrapper.getnStringBkMode : Integer;
begin
result := TNMTBCustomDraw(GetRecordPtr^).nStringBkMode;
end;
procedure __TNMTBCustomDraw__Wrapper.setnHLStringBkMode(const val : Integer);
begin
TNMTBCustomDraw(GetRecordPtr^).nHLStringBkMode := val;
end;
function __TNMTBCustomDraw__Wrapper.getnHLStringBkMode : Integer;
begin
result := TNMTBCustomDraw(GetRecordPtr^).nHLStringBkMode;
end;
function __TNMTBDispInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMTBDispInfo__Wrapper.setdwMask(const val : DWORD);
begin
TNMTBDispInfo(GetRecordPtr^).dwMask := val;
end;
function __TNMTBDispInfo__Wrapper.getdwMask : DWORD;
begin
result := TNMTBDispInfo(GetRecordPtr^).dwMask;
end;
procedure __TNMTBDispInfo__Wrapper.setidCommand(const val : Integer);
begin
TNMTBDispInfo(GetRecordPtr^).idCommand := val;
end;
function __TNMTBDispInfo__Wrapper.getidCommand : Integer;
begin
result := TNMTBDispInfo(GetRecordPtr^).idCommand;
end;
procedure __TNMTBDispInfo__Wrapper.setlParam(const val : DWORD);
begin
TNMTBDispInfo(GetRecordPtr^).lParam := val;
end;
function __TNMTBDispInfo__Wrapper.getlParam : DWORD;
begin
result := TNMTBDispInfo(GetRecordPtr^).lParam;
end;
procedure __TNMTBDispInfo__Wrapper.setiImage(const val : Integer);
begin
TNMTBDispInfo(GetRecordPtr^).iImage := val;
end;
function __TNMTBDispInfo__Wrapper.getiImage : Integer;
begin
result := TNMTBDispInfo(GetRecordPtr^).iImage;
end;
procedure __TNMTBDispInfo__Wrapper.setcchText(const val : Integer);
begin
TNMTBDispInfo(GetRecordPtr^).cchText := val;
end;
function __TNMTBDispInfo__Wrapper.getcchText : Integer;
begin
result := TNMTBDispInfo(GetRecordPtr^).cchText;
end;
function __TNMTBDispInfoA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMTBDispInfoA__Wrapper.setdwMask(const val : DWORD);
begin
TNMTBDispInfoA(GetRecordPtr^).dwMask := val;
end;
function __TNMTBDispInfoA__Wrapper.getdwMask : DWORD;
begin
result := TNMTBDispInfoA(GetRecordPtr^).dwMask;
end;
procedure __TNMTBDispInfoA__Wrapper.setidCommand(const val : Integer);
begin
TNMTBDispInfoA(GetRecordPtr^).idCommand := val;
end;
function __TNMTBDispInfoA__Wrapper.getidCommand : Integer;
begin
result := TNMTBDispInfoA(GetRecordPtr^).idCommand;
end;
procedure __TNMTBDispInfoA__Wrapper.setlParam(const val : DWORD);
begin
TNMTBDispInfoA(GetRecordPtr^).lParam := val;
end;
function __TNMTBDispInfoA__Wrapper.getlParam : DWORD;
begin
result := TNMTBDispInfoA(GetRecordPtr^).lParam;
end;
procedure __TNMTBDispInfoA__Wrapper.setiImage(const val : Integer);
begin
TNMTBDispInfoA(GetRecordPtr^).iImage := val;
end;
function __TNMTBDispInfoA__Wrapper.getiImage : Integer;
begin
result := TNMTBDispInfoA(GetRecordPtr^).iImage;
end;
procedure __TNMTBDispInfoA__Wrapper.setcchText(const val : Integer);
begin
TNMTBDispInfoA(GetRecordPtr^).cchText := val;
end;
function __TNMTBDispInfoA__Wrapper.getcchText : Integer;
begin
result := TNMTBDispInfoA(GetRecordPtr^).cchText;
end;
function __TNMTBDispInfoW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMTBDispInfoW__Wrapper.setdwMask(const val : DWORD);
begin
TNMTBDispInfoW(GetRecordPtr^).dwMask := val;
end;
function __TNMTBDispInfoW__Wrapper.getdwMask : DWORD;
begin
result := TNMTBDispInfoW(GetRecordPtr^).dwMask;
end;
procedure __TNMTBDispInfoW__Wrapper.setidCommand(const val : Integer);
begin
TNMTBDispInfoW(GetRecordPtr^).idCommand := val;
end;
function __TNMTBDispInfoW__Wrapper.getidCommand : Integer;
begin
result := TNMTBDispInfoW(GetRecordPtr^).idCommand;
end;
procedure __TNMTBDispInfoW__Wrapper.setlParam(const val : DWORD);
begin
TNMTBDispInfoW(GetRecordPtr^).lParam := val;
end;
function __TNMTBDispInfoW__Wrapper.getlParam : DWORD;
begin
result := TNMTBDispInfoW(GetRecordPtr^).lParam;
end;
procedure __TNMTBDispInfoW__Wrapper.setiImage(const val : Integer);
begin
TNMTBDispInfoW(GetRecordPtr^).iImage := val;
end;
function __TNMTBDispInfoW__Wrapper.getiImage : Integer;
begin
result := TNMTBDispInfoW(GetRecordPtr^).iImage;
end;
procedure __TNMTBDispInfoW__Wrapper.setcchText(const val : Integer);
begin
TNMTBDispInfoW(GetRecordPtr^).cchText := val;
end;
function __TNMTBDispInfoW__Wrapper.getcchText : Integer;
begin
result := TNMTBDispInfoW(GetRecordPtr^).cchText;
end;
function __TNMTBGetInfoTip__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMTBGetInfoTip__Wrapper.setcchTextMax(const val : Integer);
begin
TNMTBGetInfoTip(GetRecordPtr^).cchTextMax := val;
end;
function __TNMTBGetInfoTip__Wrapper.getcchTextMax : Integer;
begin
result := TNMTBGetInfoTip(GetRecordPtr^).cchTextMax;
end;
procedure __TNMTBGetInfoTip__Wrapper.setiItem(const val : Integer);
begin
TNMTBGetInfoTip(GetRecordPtr^).iItem := val;
end;
function __TNMTBGetInfoTip__Wrapper.getiItem : Integer;
begin
result := TNMTBGetInfoTip(GetRecordPtr^).iItem;
end;
procedure __TNMTBGetInfoTip__Wrapper.setlParam(const val : lParam);
begin
TNMTBGetInfoTip(GetRecordPtr^).lParam := val;
end;
function __TNMTBGetInfoTip__Wrapper.getlParam : lParam;
begin
result := TNMTBGetInfoTip(GetRecordPtr^).lParam;
end;
function __TNMTBGetInfoTipA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMTBGetInfoTipA__Wrapper.setcchTextMax(const val : Integer);
begin
TNMTBGetInfoTipA(GetRecordPtr^).cchTextMax := val;
end;
function __TNMTBGetInfoTipA__Wrapper.getcchTextMax : Integer;
begin
result := TNMTBGetInfoTipA(GetRecordPtr^).cchTextMax;
end;
procedure __TNMTBGetInfoTipA__Wrapper.setiItem(const val : Integer);
begin
TNMTBGetInfoTipA(GetRecordPtr^).iItem := val;
end;
function __TNMTBGetInfoTipA__Wrapper.getiItem : Integer;
begin
result := TNMTBGetInfoTipA(GetRecordPtr^).iItem;
end;
procedure __TNMTBGetInfoTipA__Wrapper.setlParam(const val : lParam);
begin
TNMTBGetInfoTipA(GetRecordPtr^).lParam := val;
end;
function __TNMTBGetInfoTipA__Wrapper.getlParam : lParam;
begin
result := TNMTBGetInfoTipA(GetRecordPtr^).lParam;
end;
function __TNMTBGetInfoTipW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMTBGetInfoTipW__Wrapper.setcchTextMax(const val : Integer);
begin
TNMTBGetInfoTipW(GetRecordPtr^).cchTextMax := val;
end;
function __TNMTBGetInfoTipW__Wrapper.getcchTextMax : Integer;
begin
result := TNMTBGetInfoTipW(GetRecordPtr^).cchTextMax;
end;
procedure __TNMTBGetInfoTipW__Wrapper.setiItem(const val : Integer);
begin
TNMTBGetInfoTipW(GetRecordPtr^).iItem := val;
end;
function __TNMTBGetInfoTipW__Wrapper.getiItem : Integer;
begin
result := TNMTBGetInfoTipW(GetRecordPtr^).iItem;
end;
procedure __TNMTBGetInfoTipW__Wrapper.setlParam(const val : lParam);
begin
TNMTBGetInfoTipW(GetRecordPtr^).lParam := val;
end;
function __TNMTBGetInfoTipW__Wrapper.getlParam : lParam;
begin
result := TNMTBGetInfoTipW(GetRecordPtr^).lParam;
end;
function __TNMTBHotItem__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMTBHotItem__Wrapper.setidOld(const val : Integer);
begin
TNMTBHotItem(GetRecordPtr^).idOld := val;
end;
function __TNMTBHotItem__Wrapper.getidOld : Integer;
begin
result := TNMTBHotItem(GetRecordPtr^).idOld;
end;
procedure __TNMTBHotItem__Wrapper.setidNew(const val : Integer);
begin
TNMTBHotItem(GetRecordPtr^).idNew := val;
end;
function __TNMTBHotItem__Wrapper.getidNew : Integer;
begin
result := TNMTBHotItem(GetRecordPtr^).idNew;
end;
procedure __TNMTBHotItem__Wrapper.setdwFlags(const val : DWORD);
begin
TNMTBHotItem(GetRecordPtr^).dwFlags := val;
end;
function __TNMTBHotItem__Wrapper.getdwFlags : DWORD;
begin
result := TNMTBHotItem(GetRecordPtr^).dwFlags;
end;
function __TNMToolBar__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMToolBar__Wrapper.setiItem(const val : Integer);
begin
TNMToolBar(GetRecordPtr^).iItem := val;
end;
function __TNMToolBar__Wrapper.getiItem : Integer;
begin
result := TNMToolBar(GetRecordPtr^).iItem;
end;
procedure __TNMToolBar__Wrapper.setcchText(const val : Integer);
begin
TNMToolBar(GetRecordPtr^).cchText := val;
end;
function __TNMToolBar__Wrapper.getcchText : Integer;
begin
result := TNMToolBar(GetRecordPtr^).cchText;
end;
function __TNMToolBarA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMToolBarA__Wrapper.setiItem(const val : Integer);
begin
TNMToolBarA(GetRecordPtr^).iItem := val;
end;
function __TNMToolBarA__Wrapper.getiItem : Integer;
begin
result := TNMToolBarA(GetRecordPtr^).iItem;
end;
procedure __TNMToolBarA__Wrapper.setcchText(const val : Integer);
begin
TNMToolBarA(GetRecordPtr^).cchText := val;
end;
function __TNMToolBarA__Wrapper.getcchText : Integer;
begin
result := TNMToolBarA(GetRecordPtr^).cchText;
end;
function __TNMToolBarW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMToolBarW__Wrapper.setiItem(const val : Integer);
begin
TNMToolBarW(GetRecordPtr^).iItem := val;
end;
function __TNMToolBarW__Wrapper.getiItem : Integer;
begin
result := TNMToolBarW(GetRecordPtr^).iItem;
end;
procedure __TNMToolBarW__Wrapper.setcchText(const val : Integer);
begin
TNMToolBarW(GetRecordPtr^).cchText := val;
end;
function __TNMToolBarW__Wrapper.getcchText : Integer;
begin
result := TNMToolBarW(GetRecordPtr^).cchText;
end;
function __TNMTreeView__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMTreeView__Wrapper.setaction(const val : UINT);
begin
TNMTreeView(GetRecordPtr^).action := val;
end;
function __TNMTreeView__Wrapper.getaction : UINT;
begin
result := TNMTreeView(GetRecordPtr^).action;
end;
function __TNMTreeViewA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMTreeViewA__Wrapper.setaction(const val : UINT);
begin
TNMTreeViewA(GetRecordPtr^).action := val;
end;
function __TNMTreeViewA__Wrapper.getaction : UINT;
begin
result := TNMTreeViewA(GetRecordPtr^).action;
end;
function __TNMTreeViewW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMTreeViewW__Wrapper.setaction(const val : UINT);
begin
TNMTreeViewW(GetRecordPtr^).action := val;
end;
function __TNMTreeViewW__Wrapper.getaction : UINT;
begin
result := TNMTreeViewW(GetRecordPtr^).action;
end;
function __TNMTTCustomDraw__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMTTCustomDraw__Wrapper.setuDrawFlags(const val : UINT);
begin
TNMTTCustomDraw(GetRecordPtr^).uDrawFlags := val;
end;
function __TNMTTCustomDraw__Wrapper.getuDrawFlags : UINT;
begin
result := TNMTTCustomDraw(GetRecordPtr^).uDrawFlags;
end;
function __TNMTTDispInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMTTDispInfo__Wrapper.sethInst(const val : hInst);
begin
TNMTTDispInfo(GetRecordPtr^).hInst := val;
end;
function __TNMTTDispInfo__Wrapper.gethInst : hInst;
begin
result := TNMTTDispInfo(GetRecordPtr^).hInst;
end;
procedure __TNMTTDispInfo__Wrapper.setuFlags(const val : UINT);
begin
TNMTTDispInfo(GetRecordPtr^).uFlags := val;
end;
function __TNMTTDispInfo__Wrapper.getuFlags : UINT;
begin
result := TNMTTDispInfo(GetRecordPtr^).uFlags;
end;
procedure __TNMTTDispInfo__Wrapper.setlParam(const val : lParam);
begin
TNMTTDispInfo(GetRecordPtr^).lParam := val;
end;
function __TNMTTDispInfo__Wrapper.getlParam : lParam;
begin
result := TNMTTDispInfo(GetRecordPtr^).lParam;
end;
function __TNMTTDispInfoA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMTTDispInfoA__Wrapper.sethInst(const val : hInst);
begin
TNMTTDispInfoA(GetRecordPtr^).hInst := val;
end;
function __TNMTTDispInfoA__Wrapper.gethInst : hInst;
begin
result := TNMTTDispInfoA(GetRecordPtr^).hInst;
end;
procedure __TNMTTDispInfoA__Wrapper.setuFlags(const val : UINT);
begin
TNMTTDispInfoA(GetRecordPtr^).uFlags := val;
end;
function __TNMTTDispInfoA__Wrapper.getuFlags : UINT;
begin
result := TNMTTDispInfoA(GetRecordPtr^).uFlags;
end;
procedure __TNMTTDispInfoA__Wrapper.setlParam(const val : lParam);
begin
TNMTTDispInfoA(GetRecordPtr^).lParam := val;
end;
function __TNMTTDispInfoA__Wrapper.getlParam : lParam;
begin
result := TNMTTDispInfoA(GetRecordPtr^).lParam;
end;
function __TNMTTDispInfoW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMTTDispInfoW__Wrapper.sethInst(const val : hInst);
begin
TNMTTDispInfoW(GetRecordPtr^).hInst := val;
end;
function __TNMTTDispInfoW__Wrapper.gethInst : hInst;
begin
result := TNMTTDispInfoW(GetRecordPtr^).hInst;
end;
procedure __TNMTTDispInfoW__Wrapper.setuFlags(const val : UINT);
begin
TNMTTDispInfoW(GetRecordPtr^).uFlags := val;
end;
function __TNMTTDispInfoW__Wrapper.getuFlags : UINT;
begin
result := TNMTTDispInfoW(GetRecordPtr^).uFlags;
end;
procedure __TNMTTDispInfoW__Wrapper.setlParam(const val : lParam);
begin
TNMTTDispInfoW(GetRecordPtr^).lParam := val;
end;
function __TNMTTDispInfoW__Wrapper.getlParam : lParam;
begin
result := TNMTTDispInfoW(GetRecordPtr^).lParam;
end;
function __TNMTVCustomDraw__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMTVCustomDraw__Wrapper.setclrText(const val : COLORREF);
begin
TNMTVCustomDraw(GetRecordPtr^).clrText := val;
end;
function __TNMTVCustomDraw__Wrapper.getclrText : COLORREF;
begin
result := TNMTVCustomDraw(GetRecordPtr^).clrText;
end;
procedure __TNMTVCustomDraw__Wrapper.setclrTextBk(const val : COLORREF);
begin
TNMTVCustomDraw(GetRecordPtr^).clrTextBk := val;
end;
function __TNMTVCustomDraw__Wrapper.getclrTextBk : COLORREF;
begin
result := TNMTVCustomDraw(GetRecordPtr^).clrTextBk;
end;
procedure __TNMTVCustomDraw__Wrapper.setiLevel(const val : Integer);
begin
TNMTVCustomDraw(GetRecordPtr^).iLevel := val;
end;
function __TNMTVCustomDraw__Wrapper.getiLevel : Integer;
begin
result := TNMTVCustomDraw(GetRecordPtr^).iLevel;
end;
function __TNMTVGetInfoTip__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMTVGetInfoTip__Wrapper.setcchTextMax(const val : Integer);
begin
TNMTVGetInfoTip(GetRecordPtr^).cchTextMax := val;
end;
function __TNMTVGetInfoTip__Wrapper.getcchTextMax : Integer;
begin
result := TNMTVGetInfoTip(GetRecordPtr^).cchTextMax;
end;
procedure __TNMTVGetInfoTip__Wrapper.setlParam(const val : lParam);
begin
TNMTVGetInfoTip(GetRecordPtr^).lParam := val;
end;
function __TNMTVGetInfoTip__Wrapper.getlParam : lParam;
begin
result := TNMTVGetInfoTip(GetRecordPtr^).lParam;
end;
function __TNMTVGetInfoTipA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMTVGetInfoTipA__Wrapper.setcchTextMax(const val : Integer);
begin
TNMTVGetInfoTipA(GetRecordPtr^).cchTextMax := val;
end;
function __TNMTVGetInfoTipA__Wrapper.getcchTextMax : Integer;
begin
result := TNMTVGetInfoTipA(GetRecordPtr^).cchTextMax;
end;
procedure __TNMTVGetInfoTipA__Wrapper.setlParam(const val : lParam);
begin
TNMTVGetInfoTipA(GetRecordPtr^).lParam := val;
end;
function __TNMTVGetInfoTipA__Wrapper.getlParam : lParam;
begin
result := TNMTVGetInfoTipA(GetRecordPtr^).lParam;
end;
function __TNMTVGetInfoTipW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMTVGetInfoTipW__Wrapper.setcchTextMax(const val : Integer);
begin
TNMTVGetInfoTipW(GetRecordPtr^).cchTextMax := val;
end;
function __TNMTVGetInfoTipW__Wrapper.getcchTextMax : Integer;
begin
result := TNMTVGetInfoTipW(GetRecordPtr^).cchTextMax;
end;
procedure __TNMTVGetInfoTipW__Wrapper.setlParam(const val : lParam);
begin
TNMTVGetInfoTipW(GetRecordPtr^).lParam := val;
end;
function __TNMTVGetInfoTipW__Wrapper.getlParam : lParam;
begin
result := TNMTVGetInfoTipW(GetRecordPtr^).lParam;
end;
function __TNMUpDown__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNMUpDown__Wrapper.setiPos(const val : Integer);
begin
TNMUpDown(GetRecordPtr^).iPos := val;
end;
function __TNMUpDown__Wrapper.getiPos : Integer;
begin
result := TNMUpDown(GetRecordPtr^).iPos;
end;
procedure __TNMUpDown__Wrapper.setiDelta(const val : Integer);
begin
TNMUpDown(GetRecordPtr^).iDelta := val;
end;
function __TNMUpDown__Wrapper.getiDelta : Integer;
begin
result := TNMUpDown(GetRecordPtr^).iDelta;
end;
function __TOOLINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TOOLINFO__Wrapper.setcbSize(const val : UINT);
begin
TOOLINFO(GetRecordPtr^).cbSize := val;
end;
function __TOOLINFO__Wrapper.getcbSize : UINT;
begin
result := TOOLINFO(GetRecordPtr^).cbSize;
end;
procedure __TOOLINFO__Wrapper.setuFlags(const val : UINT);
begin
TOOLINFO(GetRecordPtr^).uFlags := val;
end;
function __TOOLINFO__Wrapper.getuFlags : UINT;
begin
result := TOOLINFO(GetRecordPtr^).uFlags;
end;
procedure __TOOLINFO__Wrapper.setuId(const val : UINT);
begin
TOOLINFO(GetRecordPtr^).uId := val;
end;
function __TOOLINFO__Wrapper.getuId : UINT;
begin
result := TOOLINFO(GetRecordPtr^).uId;
end;
procedure __TOOLINFO__Wrapper.sethInst(const val : THandle);
begin
TOOLINFO(GetRecordPtr^).hInst := val;
end;
function __TOOLINFO__Wrapper.gethInst : THandle;
begin
result := TOOLINFO(GetRecordPtr^).hInst;
end;
procedure __TOOLINFO__Wrapper.setlParam(const val : lParam);
begin
TOOLINFO(GetRecordPtr^).lParam := val;
end;
function __TOOLINFO__Wrapper.getlParam : lParam;
begin
result := TOOLINFO(GetRecordPtr^).lParam;
end;
function __TOOLINFOA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TOOLINFOA__Wrapper.setcbSize(const val : UINT);
begin
TOOLINFOA(GetRecordPtr^).cbSize := val;
end;
function __TOOLINFOA__Wrapper.getcbSize : UINT;
begin
result := TOOLINFOA(GetRecordPtr^).cbSize;
end;
procedure __TOOLINFOA__Wrapper.setuFlags(const val : UINT);
begin
TOOLINFOA(GetRecordPtr^).uFlags := val;
end;
function __TOOLINFOA__Wrapper.getuFlags : UINT;
begin
result := TOOLINFOA(GetRecordPtr^).uFlags;
end;
procedure __TOOLINFOA__Wrapper.setuId(const val : UINT);
begin
TOOLINFOA(GetRecordPtr^).uId := val;
end;
function __TOOLINFOA__Wrapper.getuId : UINT;
begin
result := TOOLINFOA(GetRecordPtr^).uId;
end;
procedure __TOOLINFOA__Wrapper.sethInst(const val : THandle);
begin
TOOLINFOA(GetRecordPtr^).hInst := val;
end;
function __TOOLINFOA__Wrapper.gethInst : THandle;
begin
result := TOOLINFOA(GetRecordPtr^).hInst;
end;
procedure __TOOLINFOA__Wrapper.setlParam(const val : lParam);
begin
TOOLINFOA(GetRecordPtr^).lParam := val;
end;
function __TOOLINFOA__Wrapper.getlParam : lParam;
begin
result := TOOLINFOA(GetRecordPtr^).lParam;
end;
function __TOOLINFOW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TOOLINFOW__Wrapper.setcbSize(const val : UINT);
begin
TOOLINFOW(GetRecordPtr^).cbSize := val;
end;
function __TOOLINFOW__Wrapper.getcbSize : UINT;
begin
result := TOOLINFOW(GetRecordPtr^).cbSize;
end;
procedure __TOOLINFOW__Wrapper.setuFlags(const val : UINT);
begin
TOOLINFOW(GetRecordPtr^).uFlags := val;
end;
function __TOOLINFOW__Wrapper.getuFlags : UINT;
begin
result := TOOLINFOW(GetRecordPtr^).uFlags;
end;
procedure __TOOLINFOW__Wrapper.setuId(const val : UINT);
begin
TOOLINFOW(GetRecordPtr^).uId := val;
end;
function __TOOLINFOW__Wrapper.getuId : UINT;
begin
result := TOOLINFOW(GetRecordPtr^).uId;
end;
procedure __TOOLINFOW__Wrapper.sethInst(const val : THandle);
begin
TOOLINFOW(GetRecordPtr^).hInst := val;
end;
function __TOOLINFOW__Wrapper.gethInst : THandle;
begin
result := TOOLINFOW(GetRecordPtr^).hInst;
end;
procedure __TOOLINFOW__Wrapper.setlParam(const val : lParam);
begin
TOOLINFOW(GetRecordPtr^).lParam := val;
end;
function __TOOLINFOW__Wrapper.getlParam : lParam;
begin
result := TOOLINFOW(GetRecordPtr^).lParam;
end;
function __TOOLTIPTEXT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TOOLTIPTEXT__Wrapper.sethInst(const val : hInst);
begin
TOOLTIPTEXT(GetRecordPtr^).hInst := val;
end;
function __TOOLTIPTEXT__Wrapper.gethInst : hInst;
begin
result := TOOLTIPTEXT(GetRecordPtr^).hInst;
end;
procedure __TOOLTIPTEXT__Wrapper.setuFlags(const val : UINT);
begin
TOOLTIPTEXT(GetRecordPtr^).uFlags := val;
end;
function __TOOLTIPTEXT__Wrapper.getuFlags : UINT;
begin
result := TOOLTIPTEXT(GetRecordPtr^).uFlags;
end;
procedure __TOOLTIPTEXT__Wrapper.setlParam(const val : lParam);
begin
TOOLTIPTEXT(GetRecordPtr^).lParam := val;
end;
function __TOOLTIPTEXT__Wrapper.getlParam : lParam;
begin
result := TOOLTIPTEXT(GetRecordPtr^).lParam;
end;
function __TOOLTIPTEXTA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TOOLTIPTEXTA__Wrapper.sethInst(const val : hInst);
begin
TOOLTIPTEXTA(GetRecordPtr^).hInst := val;
end;
function __TOOLTIPTEXTA__Wrapper.gethInst : hInst;
begin
result := TOOLTIPTEXTA(GetRecordPtr^).hInst;
end;
procedure __TOOLTIPTEXTA__Wrapper.setuFlags(const val : UINT);
begin
TOOLTIPTEXTA(GetRecordPtr^).uFlags := val;
end;
function __TOOLTIPTEXTA__Wrapper.getuFlags : UINT;
begin
result := TOOLTIPTEXTA(GetRecordPtr^).uFlags;
end;
procedure __TOOLTIPTEXTA__Wrapper.setlParam(const val : lParam);
begin
TOOLTIPTEXTA(GetRecordPtr^).lParam := val;
end;
function __TOOLTIPTEXTA__Wrapper.getlParam : lParam;
begin
result := TOOLTIPTEXTA(GetRecordPtr^).lParam;
end;
function __TOOLTIPTEXTW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TOOLTIPTEXTW__Wrapper.sethInst(const val : hInst);
begin
TOOLTIPTEXTW(GetRecordPtr^).hInst := val;
end;
function __TOOLTIPTEXTW__Wrapper.gethInst : hInst;
begin
result := TOOLTIPTEXTW(GetRecordPtr^).hInst;
end;
procedure __TOOLTIPTEXTW__Wrapper.setuFlags(const val : UINT);
begin
TOOLTIPTEXTW(GetRecordPtr^).uFlags := val;
end;
function __TOOLTIPTEXTW__Wrapper.getuFlags : UINT;
begin
result := TOOLTIPTEXTW(GetRecordPtr^).uFlags;
end;
procedure __TOOLTIPTEXTW__Wrapper.setlParam(const val : lParam);
begin
TOOLTIPTEXTW(GetRecordPtr^).lParam := val;
end;
function __TOOLTIPTEXTW__Wrapper.getlParam : lParam;
begin
result := TOOLTIPTEXTW(GetRecordPtr^).lParam;
end;
function __TPBRange__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPBRange__Wrapper.setiLow(const val : Integer);
begin
TPBRange(GetRecordPtr^).iLow := val;
end;
function __TPBRange__Wrapper.getiLow : Integer;
begin
result := TPBRange(GetRecordPtr^).iLow;
end;
procedure __TPBRange__Wrapper.setiHigh(const val : Integer);
begin
TPBRange(GetRecordPtr^).iHigh := val;
end;
function __TPBRange__Wrapper.getiHigh : Integer;
begin
result := TPBRange(GetRecordPtr^).iHigh;
end;
function __TPropSheetHeader__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPropSheetHeader__Wrapper.setdwSize(const val : Longint);
begin
TPropSheetHeader(GetRecordPtr^).dwSize := val;
end;
function __TPropSheetHeader__Wrapper.getdwSize : Longint;
begin
result := TPropSheetHeader(GetRecordPtr^).dwSize;
end;
procedure __TPropSheetHeader__Wrapper.setdwFlags(const val : Longint);
begin
TPropSheetHeader(GetRecordPtr^).dwFlags := val;
end;
function __TPropSheetHeader__Wrapper.getdwFlags : Longint;
begin
result := TPropSheetHeader(GetRecordPtr^).dwFlags;
end;
procedure __TPropSheetHeader__Wrapper.sethInstance(const val : THandle);
begin
TPropSheetHeader(GetRecordPtr^).hInstance := val;
end;
function __TPropSheetHeader__Wrapper.gethInstance : THandle;
begin
result := TPropSheetHeader(GetRecordPtr^).hInstance;
end;
procedure __TPropSheetHeader__Wrapper.sethIcon(const val : THandle);
begin
TPropSheetHeader(GetRecordPtr^).hIcon := val;
end;
function __TPropSheetHeader__Wrapper.gethIcon : THandle;
begin
result := TPropSheetHeader(GetRecordPtr^).hIcon;
end;
procedure __TPropSheetHeader__Wrapper.setnPages(const val : Integer);
begin
TPropSheetHeader(GetRecordPtr^).nPages := val;
end;
function __TPropSheetHeader__Wrapper.getnPages : Integer;
begin
result := TPropSheetHeader(GetRecordPtr^).nPages;
end;
procedure __TPropSheetHeader__Wrapper.setnStartPage(const val : Integer);
begin
TPropSheetHeader(GetRecordPtr^).nStartPage := val;
end;
function __TPropSheetHeader__Wrapper.getnStartPage : Integer;
begin
result := TPropSheetHeader(GetRecordPtr^).nStartPage;
end;
function __TPropSheetHeaderA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPropSheetHeaderA__Wrapper.setdwSize(const val : Longint);
begin
TPropSheetHeaderA(GetRecordPtr^).dwSize := val;
end;
function __TPropSheetHeaderA__Wrapper.getdwSize : Longint;
begin
result := TPropSheetHeaderA(GetRecordPtr^).dwSize;
end;
procedure __TPropSheetHeaderA__Wrapper.setdwFlags(const val : Longint);
begin
TPropSheetHeaderA(GetRecordPtr^).dwFlags := val;
end;
function __TPropSheetHeaderA__Wrapper.getdwFlags : Longint;
begin
result := TPropSheetHeaderA(GetRecordPtr^).dwFlags;
end;
procedure __TPropSheetHeaderA__Wrapper.sethInstance(const val : THandle);
begin
TPropSheetHeaderA(GetRecordPtr^).hInstance := val;
end;
function __TPropSheetHeaderA__Wrapper.gethInstance : THandle;
begin
result := TPropSheetHeaderA(GetRecordPtr^).hInstance;
end;
procedure __TPropSheetHeaderA__Wrapper.sethIcon(const val : THandle);
begin
TPropSheetHeaderA(GetRecordPtr^).hIcon := val;
end;
function __TPropSheetHeaderA__Wrapper.gethIcon : THandle;
begin
result := TPropSheetHeaderA(GetRecordPtr^).hIcon;
end;
procedure __TPropSheetHeaderA__Wrapper.setnPages(const val : Integer);
begin
TPropSheetHeaderA(GetRecordPtr^).nPages := val;
end;
function __TPropSheetHeaderA__Wrapper.getnPages : Integer;
begin
result := TPropSheetHeaderA(GetRecordPtr^).nPages;
end;
procedure __TPropSheetHeaderA__Wrapper.setnStartPage(const val : Integer);
begin
TPropSheetHeaderA(GetRecordPtr^).nStartPage := val;
end;
function __TPropSheetHeaderA__Wrapper.getnStartPage : Integer;
begin
result := TPropSheetHeaderA(GetRecordPtr^).nStartPage;
end;
function __TPropSheetHeaderW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPropSheetHeaderW__Wrapper.setdwSize(const val : Longint);
begin
TPropSheetHeaderW(GetRecordPtr^).dwSize := val;
end;
function __TPropSheetHeaderW__Wrapper.getdwSize : Longint;
begin
result := TPropSheetHeaderW(GetRecordPtr^).dwSize;
end;
procedure __TPropSheetHeaderW__Wrapper.setdwFlags(const val : Longint);
begin
TPropSheetHeaderW(GetRecordPtr^).dwFlags := val;
end;
function __TPropSheetHeaderW__Wrapper.getdwFlags : Longint;
begin
result := TPropSheetHeaderW(GetRecordPtr^).dwFlags;
end;
procedure __TPropSheetHeaderW__Wrapper.sethInstance(const val : THandle);
begin
TPropSheetHeaderW(GetRecordPtr^).hInstance := val;
end;
function __TPropSheetHeaderW__Wrapper.gethInstance : THandle;
begin
result := TPropSheetHeaderW(GetRecordPtr^).hInstance;
end;
procedure __TPropSheetHeaderW__Wrapper.sethIcon(const val : THandle);
begin
TPropSheetHeaderW(GetRecordPtr^).hIcon := val;
end;
function __TPropSheetHeaderW__Wrapper.gethIcon : THandle;
begin
result := TPropSheetHeaderW(GetRecordPtr^).hIcon;
end;
procedure __TPropSheetHeaderW__Wrapper.setnPages(const val : Integer);
begin
TPropSheetHeaderW(GetRecordPtr^).nPages := val;
end;
function __TPropSheetHeaderW__Wrapper.getnPages : Integer;
begin
result := TPropSheetHeaderW(GetRecordPtr^).nPages;
end;
procedure __TPropSheetHeaderW__Wrapper.setnStartPage(const val : Integer);
begin
TPropSheetHeaderW(GetRecordPtr^).nStartPage := val;
end;
function __TPropSheetHeaderW__Wrapper.getnStartPage : Integer;
begin
result := TPropSheetHeaderW(GetRecordPtr^).nStartPage;
end;
function __TPropSheetPage__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPropSheetPage__Wrapper.setdwSize(const val : Longint);
begin
TPropSheetPage(GetRecordPtr^).dwSize := val;
end;
function __TPropSheetPage__Wrapper.getdwSize : Longint;
begin
result := TPropSheetPage(GetRecordPtr^).dwSize;
end;
procedure __TPropSheetPage__Wrapper.setdwFlags(const val : Longint);
begin
TPropSheetPage(GetRecordPtr^).dwFlags := val;
end;
function __TPropSheetPage__Wrapper.getdwFlags : Longint;
begin
result := TPropSheetPage(GetRecordPtr^).dwFlags;
end;
procedure __TPropSheetPage__Wrapper.sethInstance(const val : THandle);
begin
TPropSheetPage(GetRecordPtr^).hInstance := val;
end;
function __TPropSheetPage__Wrapper.gethInstance : THandle;
begin
result := TPropSheetPage(GetRecordPtr^).hInstance;
end;
procedure __TPropSheetPage__Wrapper.sethIcon(const val : THandle);
begin
TPropSheetPage(GetRecordPtr^).hIcon := val;
end;
function __TPropSheetPage__Wrapper.gethIcon : THandle;
begin
result := TPropSheetPage(GetRecordPtr^).hIcon;
end;
procedure __TPropSheetPage__Wrapper.setlParam(const val : Longint);
begin
TPropSheetPage(GetRecordPtr^).lParam := val;
end;
function __TPropSheetPage__Wrapper.getlParam : Longint;
begin
result := TPropSheetPage(GetRecordPtr^).lParam;
end;
function __TPropSheetPageA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPropSheetPageA__Wrapper.setdwSize(const val : Longint);
begin
TPropSheetPageA(GetRecordPtr^).dwSize := val;
end;
function __TPropSheetPageA__Wrapper.getdwSize : Longint;
begin
result := TPropSheetPageA(GetRecordPtr^).dwSize;
end;
procedure __TPropSheetPageA__Wrapper.setdwFlags(const val : Longint);
begin
TPropSheetPageA(GetRecordPtr^).dwFlags := val;
end;
function __TPropSheetPageA__Wrapper.getdwFlags : Longint;
begin
result := TPropSheetPageA(GetRecordPtr^).dwFlags;
end;
procedure __TPropSheetPageA__Wrapper.sethInstance(const val : THandle);
begin
TPropSheetPageA(GetRecordPtr^).hInstance := val;
end;
function __TPropSheetPageA__Wrapper.gethInstance : THandle;
begin
result := TPropSheetPageA(GetRecordPtr^).hInstance;
end;
procedure __TPropSheetPageA__Wrapper.sethIcon(const val : THandle);
begin
TPropSheetPageA(GetRecordPtr^).hIcon := val;
end;
function __TPropSheetPageA__Wrapper.gethIcon : THandle;
begin
result := TPropSheetPageA(GetRecordPtr^).hIcon;
end;
procedure __TPropSheetPageA__Wrapper.setlParam(const val : Longint);
begin
TPropSheetPageA(GetRecordPtr^).lParam := val;
end;
function __TPropSheetPageA__Wrapper.getlParam : Longint;
begin
result := TPropSheetPageA(GetRecordPtr^).lParam;
end;
function __TPropSheetPageW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPropSheetPageW__Wrapper.setdwSize(const val : Longint);
begin
TPropSheetPageW(GetRecordPtr^).dwSize := val;
end;
function __TPropSheetPageW__Wrapper.getdwSize : Longint;
begin
result := TPropSheetPageW(GetRecordPtr^).dwSize;
end;
procedure __TPropSheetPageW__Wrapper.setdwFlags(const val : Longint);
begin
TPropSheetPageW(GetRecordPtr^).dwFlags := val;
end;
function __TPropSheetPageW__Wrapper.getdwFlags : Longint;
begin
result := TPropSheetPageW(GetRecordPtr^).dwFlags;
end;
procedure __TPropSheetPageW__Wrapper.sethInstance(const val : THandle);
begin
TPropSheetPageW(GetRecordPtr^).hInstance := val;
end;
function __TPropSheetPageW__Wrapper.gethInstance : THandle;
begin
result := TPropSheetPageW(GetRecordPtr^).hInstance;
end;
procedure __TPropSheetPageW__Wrapper.sethIcon(const val : THandle);
begin
TPropSheetPageW(GetRecordPtr^).hIcon := val;
end;
function __TPropSheetPageW__Wrapper.gethIcon : THandle;
begin
result := TPropSheetPageW(GetRecordPtr^).hIcon;
end;
procedure __TPropSheetPageW__Wrapper.setlParam(const val : Longint);
begin
TPropSheetPageW(GetRecordPtr^).lParam := val;
end;
function __TPropSheetPageW__Wrapper.getlParam : Longint;
begin
result := TPropSheetPageW(GetRecordPtr^).lParam;
end;
function __TRBHitTestInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRBHitTestInfo__Wrapper.setFlags(const val : UINT);
begin
TRBHitTestInfo(GetRecordPtr^).Flags := val;
end;
function __TRBHitTestInfo__Wrapper.getFlags : UINT;
begin
result := TRBHitTestInfo(GetRecordPtr^).Flags;
end;
procedure __TRBHitTestInfo__Wrapper.setiBand(const val : Integer);
begin
TRBHitTestInfo(GetRecordPtr^).iBand := val;
end;
function __TRBHitTestInfo__Wrapper.getiBand : Integer;
begin
result := TRBHitTestInfo(GetRecordPtr^).iBand;
end;
function __TReBarBandInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TReBarBandInfo__Wrapper.setcbSize(const val : UINT);
begin
TReBarBandInfo(GetRecordPtr^).cbSize := val;
end;
function __TReBarBandInfo__Wrapper.getcbSize : UINT;
begin
result := TReBarBandInfo(GetRecordPtr^).cbSize;
end;
procedure __TReBarBandInfo__Wrapper.setfMask(const val : UINT);
begin
TReBarBandInfo(GetRecordPtr^).fMask := val;
end;
function __TReBarBandInfo__Wrapper.getfMask : UINT;
begin
result := TReBarBandInfo(GetRecordPtr^).fMask;
end;
procedure __TReBarBandInfo__Wrapper.setfStyle(const val : UINT);
begin
TReBarBandInfo(GetRecordPtr^).fStyle := val;
end;
function __TReBarBandInfo__Wrapper.getfStyle : UINT;
begin
result := TReBarBandInfo(GetRecordPtr^).fStyle;
end;
procedure __TReBarBandInfo__Wrapper.setclrFore(const val : TColorRef);
begin
TReBarBandInfo(GetRecordPtr^).clrFore := val;
end;
function __TReBarBandInfo__Wrapper.getclrFore : TColorRef;
begin
result := TReBarBandInfo(GetRecordPtr^).clrFore;
end;
procedure __TReBarBandInfo__Wrapper.setclrBack(const val : TColorRef);
begin
TReBarBandInfo(GetRecordPtr^).clrBack := val;
end;
function __TReBarBandInfo__Wrapper.getclrBack : TColorRef;
begin
result := TReBarBandInfo(GetRecordPtr^).clrBack;
end;
procedure __TReBarBandInfo__Wrapper.setcch(const val : UINT);
begin
TReBarBandInfo(GetRecordPtr^).cch := val;
end;
function __TReBarBandInfo__Wrapper.getcch : UINT;
begin
result := TReBarBandInfo(GetRecordPtr^).cch;
end;
procedure __TReBarBandInfo__Wrapper.setiImage(const val : Integer);
begin
TReBarBandInfo(GetRecordPtr^).iImage := val;
end;
function __TReBarBandInfo__Wrapper.getiImage : Integer;
begin
result := TReBarBandInfo(GetRecordPtr^).iImage;
end;
procedure __TReBarBandInfo__Wrapper.setcxMinChild(const val : UINT);
begin
TReBarBandInfo(GetRecordPtr^).cxMinChild := val;
end;
function __TReBarBandInfo__Wrapper.getcxMinChild : UINT;
begin
result := TReBarBandInfo(GetRecordPtr^).cxMinChild;
end;
procedure __TReBarBandInfo__Wrapper.setcyMinChild(const val : UINT);
begin
TReBarBandInfo(GetRecordPtr^).cyMinChild := val;
end;
function __TReBarBandInfo__Wrapper.getcyMinChild : UINT;
begin
result := TReBarBandInfo(GetRecordPtr^).cyMinChild;
end;
procedure __TReBarBandInfo__Wrapper.setcx(const val : UINT);
begin
TReBarBandInfo(GetRecordPtr^).cx := val;
end;
function __TReBarBandInfo__Wrapper.getcx : UINT;
begin
result := TReBarBandInfo(GetRecordPtr^).cx;
end;
procedure __TReBarBandInfo__Wrapper.setwID(const val : UINT);
begin
TReBarBandInfo(GetRecordPtr^).wID := val;
end;
function __TReBarBandInfo__Wrapper.getwID : UINT;
begin
result := TReBarBandInfo(GetRecordPtr^).wID;
end;
procedure __TReBarBandInfo__Wrapper.setcyChild(const val : UINT);
begin
TReBarBandInfo(GetRecordPtr^).cyChild := val;
end;
function __TReBarBandInfo__Wrapper.getcyChild : UINT;
begin
result := TReBarBandInfo(GetRecordPtr^).cyChild;
end;
procedure __TReBarBandInfo__Wrapper.setcyMaxChild(const val : UINT);
begin
TReBarBandInfo(GetRecordPtr^).cyMaxChild := val;
end;
function __TReBarBandInfo__Wrapper.getcyMaxChild : UINT;
begin
result := TReBarBandInfo(GetRecordPtr^).cyMaxChild;
end;
procedure __TReBarBandInfo__Wrapper.setcyIntegral(const val : UINT);
begin
TReBarBandInfo(GetRecordPtr^).cyIntegral := val;
end;
function __TReBarBandInfo__Wrapper.getcyIntegral : UINT;
begin
result := TReBarBandInfo(GetRecordPtr^).cyIntegral;
end;
procedure __TReBarBandInfo__Wrapper.setcxIdeal(const val : UINT);
begin
TReBarBandInfo(GetRecordPtr^).cxIdeal := val;
end;
function __TReBarBandInfo__Wrapper.getcxIdeal : UINT;
begin
result := TReBarBandInfo(GetRecordPtr^).cxIdeal;
end;
procedure __TReBarBandInfo__Wrapper.setlParam(const val : lParam);
begin
TReBarBandInfo(GetRecordPtr^).lParam := val;
end;
function __TReBarBandInfo__Wrapper.getlParam : lParam;
begin
result := TReBarBandInfo(GetRecordPtr^).lParam;
end;
procedure __TReBarBandInfo__Wrapper.setcxHeader(const val : UINT);
begin
TReBarBandInfo(GetRecordPtr^).cxHeader := val;
end;
function __TReBarBandInfo__Wrapper.getcxHeader : UINT;
begin
result := TReBarBandInfo(GetRecordPtr^).cxHeader;
end;
function __TReBarBandInfoA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TReBarBandInfoA__Wrapper.setcbSize(const val : UINT);
begin
TReBarBandInfoA(GetRecordPtr^).cbSize := val;
end;
function __TReBarBandInfoA__Wrapper.getcbSize : UINT;
begin
result := TReBarBandInfoA(GetRecordPtr^).cbSize;
end;
procedure __TReBarBandInfoA__Wrapper.setfMask(const val : UINT);
begin
TReBarBandInfoA(GetRecordPtr^).fMask := val;
end;
function __TReBarBandInfoA__Wrapper.getfMask : UINT;
begin
result := TReBarBandInfoA(GetRecordPtr^).fMask;
end;
procedure __TReBarBandInfoA__Wrapper.setfStyle(const val : UINT);
begin
TReBarBandInfoA(GetRecordPtr^).fStyle := val;
end;
function __TReBarBandInfoA__Wrapper.getfStyle : UINT;
begin
result := TReBarBandInfoA(GetRecordPtr^).fStyle;
end;
procedure __TReBarBandInfoA__Wrapper.setclrFore(const val : TColorRef);
begin
TReBarBandInfoA(GetRecordPtr^).clrFore := val;
end;
function __TReBarBandInfoA__Wrapper.getclrFore : TColorRef;
begin
result := TReBarBandInfoA(GetRecordPtr^).clrFore;
end;
procedure __TReBarBandInfoA__Wrapper.setclrBack(const val : TColorRef);
begin
TReBarBandInfoA(GetRecordPtr^).clrBack := val;
end;
function __TReBarBandInfoA__Wrapper.getclrBack : TColorRef;
begin
result := TReBarBandInfoA(GetRecordPtr^).clrBack;
end;
procedure __TReBarBandInfoA__Wrapper.setcch(const val : UINT);
begin
TReBarBandInfoA(GetRecordPtr^).cch := val;
end;
function __TReBarBandInfoA__Wrapper.getcch : UINT;
begin
result := TReBarBandInfoA(GetRecordPtr^).cch;
end;
procedure __TReBarBandInfoA__Wrapper.setiImage(const val : Integer);
begin
TReBarBandInfoA(GetRecordPtr^).iImage := val;
end;
function __TReBarBandInfoA__Wrapper.getiImage : Integer;
begin
result := TReBarBandInfoA(GetRecordPtr^).iImage;
end;
procedure __TReBarBandInfoA__Wrapper.setcxMinChild(const val : UINT);
begin
TReBarBandInfoA(GetRecordPtr^).cxMinChild := val;
end;
function __TReBarBandInfoA__Wrapper.getcxMinChild : UINT;
begin
result := TReBarBandInfoA(GetRecordPtr^).cxMinChild;
end;
procedure __TReBarBandInfoA__Wrapper.setcyMinChild(const val : UINT);
begin
TReBarBandInfoA(GetRecordPtr^).cyMinChild := val;
end;
function __TReBarBandInfoA__Wrapper.getcyMinChild : UINT;
begin
result := TReBarBandInfoA(GetRecordPtr^).cyMinChild;
end;
procedure __TReBarBandInfoA__Wrapper.setcx(const val : UINT);
begin
TReBarBandInfoA(GetRecordPtr^).cx := val;
end;
function __TReBarBandInfoA__Wrapper.getcx : UINT;
begin
result := TReBarBandInfoA(GetRecordPtr^).cx;
end;
procedure __TReBarBandInfoA__Wrapper.setwID(const val : UINT);
begin
TReBarBandInfoA(GetRecordPtr^).wID := val;
end;
function __TReBarBandInfoA__Wrapper.getwID : UINT;
begin
result := TReBarBandInfoA(GetRecordPtr^).wID;
end;
procedure __TReBarBandInfoA__Wrapper.setcyChild(const val : UINT);
begin
TReBarBandInfoA(GetRecordPtr^).cyChild := val;
end;
function __TReBarBandInfoA__Wrapper.getcyChild : UINT;
begin
result := TReBarBandInfoA(GetRecordPtr^).cyChild;
end;
procedure __TReBarBandInfoA__Wrapper.setcyMaxChild(const val : UINT);
begin
TReBarBandInfoA(GetRecordPtr^).cyMaxChild := val;
end;
function __TReBarBandInfoA__Wrapper.getcyMaxChild : UINT;
begin
result := TReBarBandInfoA(GetRecordPtr^).cyMaxChild;
end;
procedure __TReBarBandInfoA__Wrapper.setcyIntegral(const val : UINT);
begin
TReBarBandInfoA(GetRecordPtr^).cyIntegral := val;
end;
function __TReBarBandInfoA__Wrapper.getcyIntegral : UINT;
begin
result := TReBarBandInfoA(GetRecordPtr^).cyIntegral;
end;
procedure __TReBarBandInfoA__Wrapper.setcxIdeal(const val : UINT);
begin
TReBarBandInfoA(GetRecordPtr^).cxIdeal := val;
end;
function __TReBarBandInfoA__Wrapper.getcxIdeal : UINT;
begin
result := TReBarBandInfoA(GetRecordPtr^).cxIdeal;
end;
procedure __TReBarBandInfoA__Wrapper.setlParam(const val : lParam);
begin
TReBarBandInfoA(GetRecordPtr^).lParam := val;
end;
function __TReBarBandInfoA__Wrapper.getlParam : lParam;
begin
result := TReBarBandInfoA(GetRecordPtr^).lParam;
end;
procedure __TReBarBandInfoA__Wrapper.setcxHeader(const val : UINT);
begin
TReBarBandInfoA(GetRecordPtr^).cxHeader := val;
end;
function __TReBarBandInfoA__Wrapper.getcxHeader : UINT;
begin
result := TReBarBandInfoA(GetRecordPtr^).cxHeader;
end;
function __TReBarBandInfoW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TReBarBandInfoW__Wrapper.setcbSize(const val : UINT);
begin
TReBarBandInfoW(GetRecordPtr^).cbSize := val;
end;
function __TReBarBandInfoW__Wrapper.getcbSize : UINT;
begin
result := TReBarBandInfoW(GetRecordPtr^).cbSize;
end;
procedure __TReBarBandInfoW__Wrapper.setfMask(const val : UINT);
begin
TReBarBandInfoW(GetRecordPtr^).fMask := val;
end;
function __TReBarBandInfoW__Wrapper.getfMask : UINT;
begin
result := TReBarBandInfoW(GetRecordPtr^).fMask;
end;
procedure __TReBarBandInfoW__Wrapper.setfStyle(const val : UINT);
begin
TReBarBandInfoW(GetRecordPtr^).fStyle := val;
end;
function __TReBarBandInfoW__Wrapper.getfStyle : UINT;
begin
result := TReBarBandInfoW(GetRecordPtr^).fStyle;
end;
procedure __TReBarBandInfoW__Wrapper.setclrFore(const val : TColorRef);
begin
TReBarBandInfoW(GetRecordPtr^).clrFore := val;
end;
function __TReBarBandInfoW__Wrapper.getclrFore : TColorRef;
begin
result := TReBarBandInfoW(GetRecordPtr^).clrFore;
end;
procedure __TReBarBandInfoW__Wrapper.setclrBack(const val : TColorRef);
begin
TReBarBandInfoW(GetRecordPtr^).clrBack := val;
end;
function __TReBarBandInfoW__Wrapper.getclrBack : TColorRef;
begin
result := TReBarBandInfoW(GetRecordPtr^).clrBack;
end;
procedure __TReBarBandInfoW__Wrapper.setcch(const val : UINT);
begin
TReBarBandInfoW(GetRecordPtr^).cch := val;
end;
function __TReBarBandInfoW__Wrapper.getcch : UINT;
begin
result := TReBarBandInfoW(GetRecordPtr^).cch;
end;
procedure __TReBarBandInfoW__Wrapper.setiImage(const val : Integer);
begin
TReBarBandInfoW(GetRecordPtr^).iImage := val;
end;
function __TReBarBandInfoW__Wrapper.getiImage : Integer;
begin
result := TReBarBandInfoW(GetRecordPtr^).iImage;
end;
procedure __TReBarBandInfoW__Wrapper.setcxMinChild(const val : UINT);
begin
TReBarBandInfoW(GetRecordPtr^).cxMinChild := val;
end;
function __TReBarBandInfoW__Wrapper.getcxMinChild : UINT;
begin
result := TReBarBandInfoW(GetRecordPtr^).cxMinChild;
end;
procedure __TReBarBandInfoW__Wrapper.setcyMinChild(const val : UINT);
begin
TReBarBandInfoW(GetRecordPtr^).cyMinChild := val;
end;
function __TReBarBandInfoW__Wrapper.getcyMinChild : UINT;
begin
result := TReBarBandInfoW(GetRecordPtr^).cyMinChild;
end;
procedure __TReBarBandInfoW__Wrapper.setcx(const val : UINT);
begin
TReBarBandInfoW(GetRecordPtr^).cx := val;
end;
function __TReBarBandInfoW__Wrapper.getcx : UINT;
begin
result := TReBarBandInfoW(GetRecordPtr^).cx;
end;
procedure __TReBarBandInfoW__Wrapper.setwID(const val : UINT);
begin
TReBarBandInfoW(GetRecordPtr^).wID := val;
end;
function __TReBarBandInfoW__Wrapper.getwID : UINT;
begin
result := TReBarBandInfoW(GetRecordPtr^).wID;
end;
procedure __TReBarBandInfoW__Wrapper.setcyChild(const val : UINT);
begin
TReBarBandInfoW(GetRecordPtr^).cyChild := val;
end;
function __TReBarBandInfoW__Wrapper.getcyChild : UINT;
begin
result := TReBarBandInfoW(GetRecordPtr^).cyChild;
end;
procedure __TReBarBandInfoW__Wrapper.setcyMaxChild(const val : UINT);
begin
TReBarBandInfoW(GetRecordPtr^).cyMaxChild := val;
end;
function __TReBarBandInfoW__Wrapper.getcyMaxChild : UINT;
begin
result := TReBarBandInfoW(GetRecordPtr^).cyMaxChild;
end;
procedure __TReBarBandInfoW__Wrapper.setcyIntegral(const val : UINT);
begin
TReBarBandInfoW(GetRecordPtr^).cyIntegral := val;
end;
function __TReBarBandInfoW__Wrapper.getcyIntegral : UINT;
begin
result := TReBarBandInfoW(GetRecordPtr^).cyIntegral;
end;
procedure __TReBarBandInfoW__Wrapper.setcxIdeal(const val : UINT);
begin
TReBarBandInfoW(GetRecordPtr^).cxIdeal := val;
end;
function __TReBarBandInfoW__Wrapper.getcxIdeal : UINT;
begin
result := TReBarBandInfoW(GetRecordPtr^).cxIdeal;
end;
procedure __TReBarBandInfoW__Wrapper.setlParam(const val : lParam);
begin
TReBarBandInfoW(GetRecordPtr^).lParam := val;
end;
function __TReBarBandInfoW__Wrapper.getlParam : lParam;
begin
result := TReBarBandInfoW(GetRecordPtr^).lParam;
end;
procedure __TReBarBandInfoW__Wrapper.setcxHeader(const val : UINT);
begin
TReBarBandInfoW(GetRecordPtr^).cxHeader := val;
end;
function __TReBarBandInfoW__Wrapper.getcxHeader : UINT;
begin
result := TReBarBandInfoW(GetRecordPtr^).cxHeader;
end;
function __TReBarInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TReBarInfo__Wrapper.setcbSize(const val : UINT);
begin
TReBarInfo(GetRecordPtr^).cbSize := val;
end;
function __TReBarInfo__Wrapper.getcbSize : UINT;
begin
result := TReBarInfo(GetRecordPtr^).cbSize;
end;
procedure __TReBarInfo__Wrapper.setfMask(const val : UINT);
begin
TReBarInfo(GetRecordPtr^).fMask := val;
end;
function __TReBarInfo__Wrapper.getfMask : UINT;
begin
result := TReBarInfo(GetRecordPtr^).fMask;
end;
procedure __TReBarInfo__Wrapper.sethiml(const val : HIMAGELIST);
begin
TReBarInfo(GetRecordPtr^).himl := val;
end;
function __TReBarInfo__Wrapper.gethiml : HIMAGELIST;
begin
result := TReBarInfo(GetRecordPtr^).himl;
end;
function __TTBAddBitmap__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTBAddBitmap__Wrapper.sethInst(const val : THandle);
begin
TTBAddBitmap(GetRecordPtr^).hInst := val;
end;
function __TTBAddBitmap__Wrapper.gethInst : THandle;
begin
result := TTBAddBitmap(GetRecordPtr^).hInst;
end;
procedure __TTBAddBitmap__Wrapper.setnID(const val : UINT);
begin
TTBAddBitmap(GetRecordPtr^).nID := val;
end;
function __TTBAddBitmap__Wrapper.getnID : UINT;
begin
result := TTBAddBitmap(GetRecordPtr^).nID;
end;
function __TTBButton__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTBButton__Wrapper.setiBitmap(const val : Integer);
begin
TTBButton(GetRecordPtr^).iBitmap := val;
end;
function __TTBButton__Wrapper.getiBitmap : Integer;
begin
result := TTBButton(GetRecordPtr^).iBitmap;
end;
procedure __TTBButton__Wrapper.setidCommand(const val : Integer);
begin
TTBButton(GetRecordPtr^).idCommand := val;
end;
function __TTBButton__Wrapper.getidCommand : Integer;
begin
result := TTBButton(GetRecordPtr^).idCommand;
end;
procedure __TTBButton__Wrapper.setfsState(const val : Byte);
begin
TTBButton(GetRecordPtr^).fsState := val;
end;
function __TTBButton__Wrapper.getfsState : Byte;
begin
result := TTBButton(GetRecordPtr^).fsState;
end;
procedure __TTBButton__Wrapper.setfsStyle(const val : Byte);
begin
TTBButton(GetRecordPtr^).fsStyle := val;
end;
function __TTBButton__Wrapper.getfsStyle : Byte;
begin
result := TTBButton(GetRecordPtr^).fsStyle;
end;
procedure __TTBButton__Wrapper.setdwData(const val : Longint);
begin
TTBButton(GetRecordPtr^).dwData := val;
end;
function __TTBButton__Wrapper.getdwData : Longint;
begin
result := TTBButton(GetRecordPtr^).dwData;
end;
procedure __TTBButton__Wrapper.setiString(const val : Integer);
begin
TTBButton(GetRecordPtr^).iString := val;
end;
function __TTBButton__Wrapper.getiString : Integer;
begin
result := TTBButton(GetRecordPtr^).iString;
end;
function __TTBButtonInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTBButtonInfo__Wrapper.setcbSize(const val : UINT);
begin
TTBButtonInfo(GetRecordPtr^).cbSize := val;
end;
function __TTBButtonInfo__Wrapper.getcbSize : UINT;
begin
result := TTBButtonInfo(GetRecordPtr^).cbSize;
end;
procedure __TTBButtonInfo__Wrapper.setdwMask(const val : DWORD);
begin
TTBButtonInfo(GetRecordPtr^).dwMask := val;
end;
function __TTBButtonInfo__Wrapper.getdwMask : DWORD;
begin
result := TTBButtonInfo(GetRecordPtr^).dwMask;
end;
procedure __TTBButtonInfo__Wrapper.setidCommand(const val : Integer);
begin
TTBButtonInfo(GetRecordPtr^).idCommand := val;
end;
function __TTBButtonInfo__Wrapper.getidCommand : Integer;
begin
result := TTBButtonInfo(GetRecordPtr^).idCommand;
end;
procedure __TTBButtonInfo__Wrapper.setiImage(const val : Integer);
begin
TTBButtonInfo(GetRecordPtr^).iImage := val;
end;
function __TTBButtonInfo__Wrapper.getiImage : Integer;
begin
result := TTBButtonInfo(GetRecordPtr^).iImage;
end;
procedure __TTBButtonInfo__Wrapper.setfsState(const val : Byte);
begin
TTBButtonInfo(GetRecordPtr^).fsState := val;
end;
function __TTBButtonInfo__Wrapper.getfsState : Byte;
begin
result := TTBButtonInfo(GetRecordPtr^).fsState;
end;
procedure __TTBButtonInfo__Wrapper.setfsStyle(const val : Byte);
begin
TTBButtonInfo(GetRecordPtr^).fsStyle := val;
end;
function __TTBButtonInfo__Wrapper.getfsStyle : Byte;
begin
result := TTBButtonInfo(GetRecordPtr^).fsStyle;
end;
procedure __TTBButtonInfo__Wrapper.setcx(const val : Word);
begin
TTBButtonInfo(GetRecordPtr^).cx := val;
end;
function __TTBButtonInfo__Wrapper.getcx : Word;
begin
result := TTBButtonInfo(GetRecordPtr^).cx;
end;
procedure __TTBButtonInfo__Wrapper.setlParam(const val : DWORD);
begin
TTBButtonInfo(GetRecordPtr^).lParam := val;
end;
function __TTBButtonInfo__Wrapper.getlParam : DWORD;
begin
result := TTBButtonInfo(GetRecordPtr^).lParam;
end;
procedure __TTBButtonInfo__Wrapper.setcchText(const val : Integer);
begin
TTBButtonInfo(GetRecordPtr^).cchText := val;
end;
function __TTBButtonInfo__Wrapper.getcchText : Integer;
begin
result := TTBButtonInfo(GetRecordPtr^).cchText;
end;
function __TTBButtonInfoA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTBButtonInfoA__Wrapper.setcbSize(const val : UINT);
begin
TTBButtonInfoA(GetRecordPtr^).cbSize := val;
end;
function __TTBButtonInfoA__Wrapper.getcbSize : UINT;
begin
result := TTBButtonInfoA(GetRecordPtr^).cbSize;
end;
procedure __TTBButtonInfoA__Wrapper.setdwMask(const val : DWORD);
begin
TTBButtonInfoA(GetRecordPtr^).dwMask := val;
end;
function __TTBButtonInfoA__Wrapper.getdwMask : DWORD;
begin
result := TTBButtonInfoA(GetRecordPtr^).dwMask;
end;
procedure __TTBButtonInfoA__Wrapper.setidCommand(const val : Integer);
begin
TTBButtonInfoA(GetRecordPtr^).idCommand := val;
end;
function __TTBButtonInfoA__Wrapper.getidCommand : Integer;
begin
result := TTBButtonInfoA(GetRecordPtr^).idCommand;
end;
procedure __TTBButtonInfoA__Wrapper.setiImage(const val : Integer);
begin
TTBButtonInfoA(GetRecordPtr^).iImage := val;
end;
function __TTBButtonInfoA__Wrapper.getiImage : Integer;
begin
result := TTBButtonInfoA(GetRecordPtr^).iImage;
end;
procedure __TTBButtonInfoA__Wrapper.setfsState(const val : Byte);
begin
TTBButtonInfoA(GetRecordPtr^).fsState := val;
end;
function __TTBButtonInfoA__Wrapper.getfsState : Byte;
begin
result := TTBButtonInfoA(GetRecordPtr^).fsState;
end;
procedure __TTBButtonInfoA__Wrapper.setfsStyle(const val : Byte);
begin
TTBButtonInfoA(GetRecordPtr^).fsStyle := val;
end;
function __TTBButtonInfoA__Wrapper.getfsStyle : Byte;
begin
result := TTBButtonInfoA(GetRecordPtr^).fsStyle;
end;
procedure __TTBButtonInfoA__Wrapper.setcx(const val : Word);
begin
TTBButtonInfoA(GetRecordPtr^).cx := val;
end;
function __TTBButtonInfoA__Wrapper.getcx : Word;
begin
result := TTBButtonInfoA(GetRecordPtr^).cx;
end;
procedure __TTBButtonInfoA__Wrapper.setlParam(const val : DWORD);
begin
TTBButtonInfoA(GetRecordPtr^).lParam := val;
end;
function __TTBButtonInfoA__Wrapper.getlParam : DWORD;
begin
result := TTBButtonInfoA(GetRecordPtr^).lParam;
end;
procedure __TTBButtonInfoA__Wrapper.setcchText(const val : Integer);
begin
TTBButtonInfoA(GetRecordPtr^).cchText := val;
end;
function __TTBButtonInfoA__Wrapper.getcchText : Integer;
begin
result := TTBButtonInfoA(GetRecordPtr^).cchText;
end;
function __TTBButtonInfoW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTBButtonInfoW__Wrapper.setcbSize(const val : UINT);
begin
TTBButtonInfoW(GetRecordPtr^).cbSize := val;
end;
function __TTBButtonInfoW__Wrapper.getcbSize : UINT;
begin
result := TTBButtonInfoW(GetRecordPtr^).cbSize;
end;
procedure __TTBButtonInfoW__Wrapper.setdwMask(const val : DWORD);
begin
TTBButtonInfoW(GetRecordPtr^).dwMask := val;
end;
function __TTBButtonInfoW__Wrapper.getdwMask : DWORD;
begin
result := TTBButtonInfoW(GetRecordPtr^).dwMask;
end;
procedure __TTBButtonInfoW__Wrapper.setidCommand(const val : Integer);
begin
TTBButtonInfoW(GetRecordPtr^).idCommand := val;
end;
function __TTBButtonInfoW__Wrapper.getidCommand : Integer;
begin
result := TTBButtonInfoW(GetRecordPtr^).idCommand;
end;
procedure __TTBButtonInfoW__Wrapper.setiImage(const val : Integer);
begin
TTBButtonInfoW(GetRecordPtr^).iImage := val;
end;
function __TTBButtonInfoW__Wrapper.getiImage : Integer;
begin
result := TTBButtonInfoW(GetRecordPtr^).iImage;
end;
procedure __TTBButtonInfoW__Wrapper.setfsState(const val : Byte);
begin
TTBButtonInfoW(GetRecordPtr^).fsState := val;
end;
function __TTBButtonInfoW__Wrapper.getfsState : Byte;
begin
result := TTBButtonInfoW(GetRecordPtr^).fsState;
end;
procedure __TTBButtonInfoW__Wrapper.setfsStyle(const val : Byte);
begin
TTBButtonInfoW(GetRecordPtr^).fsStyle := val;
end;
function __TTBButtonInfoW__Wrapper.getfsStyle : Byte;
begin
result := TTBButtonInfoW(GetRecordPtr^).fsStyle;
end;
procedure __TTBButtonInfoW__Wrapper.setcx(const val : Word);
begin
TTBButtonInfoW(GetRecordPtr^).cx := val;
end;
function __TTBButtonInfoW__Wrapper.getcx : Word;
begin
result := TTBButtonInfoW(GetRecordPtr^).cx;
end;
procedure __TTBButtonInfoW__Wrapper.setlParam(const val : DWORD);
begin
TTBButtonInfoW(GetRecordPtr^).lParam := val;
end;
function __TTBButtonInfoW__Wrapper.getlParam : DWORD;
begin
result := TTBButtonInfoW(GetRecordPtr^).lParam;
end;
procedure __TTBButtonInfoW__Wrapper.setcchText(const val : Integer);
begin
TTBButtonInfoW(GetRecordPtr^).cchText := val;
end;
function __TTBButtonInfoW__Wrapper.getcchText : Integer;
begin
result := TTBButtonInfoW(GetRecordPtr^).cchText;
end;
function __TTBInsertMark__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTBInsertMark__Wrapper.setiButton(const val : Integer);
begin
TTBInsertMark(GetRecordPtr^).iButton := val;
end;
function __TTBInsertMark__Wrapper.getiButton : Integer;
begin
result := TTBInsertMark(GetRecordPtr^).iButton;
end;
procedure __TTBInsertMark__Wrapper.setdwFlags(const val : DWORD);
begin
TTBInsertMark(GetRecordPtr^).dwFlags := val;
end;
function __TTBInsertMark__Wrapper.getdwFlags : DWORD;
begin
result := TTBInsertMark(GetRecordPtr^).dwFlags;
end;
function __TTBReplaceBitmap__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTBReplaceBitmap__Wrapper.sethInstOld(const val : THandle);
begin
TTBReplaceBitmap(GetRecordPtr^).hInstOld := val;
end;
function __TTBReplaceBitmap__Wrapper.gethInstOld : THandle;
begin
result := TTBReplaceBitmap(GetRecordPtr^).hInstOld;
end;
procedure __TTBReplaceBitmap__Wrapper.setnIDOld(const val : Cardinal);
begin
TTBReplaceBitmap(GetRecordPtr^).nIDOld := val;
end;
function __TTBReplaceBitmap__Wrapper.getnIDOld : Cardinal;
begin
result := TTBReplaceBitmap(GetRecordPtr^).nIDOld;
end;
procedure __TTBReplaceBitmap__Wrapper.sethInstNew(const val : THandle);
begin
TTBReplaceBitmap(GetRecordPtr^).hInstNew := val;
end;
function __TTBReplaceBitmap__Wrapper.gethInstNew : THandle;
begin
result := TTBReplaceBitmap(GetRecordPtr^).hInstNew;
end;
procedure __TTBReplaceBitmap__Wrapper.setnIDNew(const val : Cardinal);
begin
TTBReplaceBitmap(GetRecordPtr^).nIDNew := val;
end;
function __TTBReplaceBitmap__Wrapper.getnIDNew : Cardinal;
begin
result := TTBReplaceBitmap(GetRecordPtr^).nIDNew;
end;
procedure __TTBReplaceBitmap__Wrapper.setnButtons(const val : Integer);
begin
TTBReplaceBitmap(GetRecordPtr^).nButtons := val;
end;
function __TTBReplaceBitmap__Wrapper.getnButtons : Integer;
begin
result := TTBReplaceBitmap(GetRecordPtr^).nButtons;
end;
function __TTBSaveParams__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTBSaveParams__Wrapper.sethkr(const val : THandle);
begin
TTBSaveParams(GetRecordPtr^).hkr := val;
end;
function __TTBSaveParams__Wrapper.gethkr : THandle;
begin
result := TTBSaveParams(GetRecordPtr^).hkr;
end;
function __TTBSaveParamsA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTBSaveParamsA__Wrapper.sethkr(const val : THandle);
begin
TTBSaveParamsA(GetRecordPtr^).hkr := val;
end;
function __TTBSaveParamsA__Wrapper.gethkr : THandle;
begin
result := TTBSaveParamsA(GetRecordPtr^).hkr;
end;
function __TTBSaveParamsW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTBSaveParamsW__Wrapper.sethkr(const val : THandle);
begin
TTBSaveParamsW(GetRecordPtr^).hkr := val;
end;
function __TTBSaveParamsW__Wrapper.gethkr : THandle;
begin
result := TTBSaveParamsW(GetRecordPtr^).hkr;
end;
function __TTCHitTestInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTCHitTestInfo__Wrapper.setFlags(const val : UINT);
begin
TTCHitTestInfo(GetRecordPtr^).Flags := val;
end;
function __TTCHitTestInfo__Wrapper.getFlags : UINT;
begin
result := TTCHitTestInfo(GetRecordPtr^).Flags;
end;
function __TTCItem__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTCItem__Wrapper.setMask(const val : UINT);
begin
TTCItem(GetRecordPtr^).Mask := val;
end;
function __TTCItem__Wrapper.getMask : UINT;
begin
result := TTCItem(GetRecordPtr^).Mask;
end;
procedure __TTCItem__Wrapper.setdwState(const val : UINT);
begin
TTCItem(GetRecordPtr^).dwState := val;
end;
function __TTCItem__Wrapper.getdwState : UINT;
begin
result := TTCItem(GetRecordPtr^).dwState;
end;
procedure __TTCItem__Wrapper.setdwStateMask(const val : UINT);
begin
TTCItem(GetRecordPtr^).dwStateMask := val;
end;
function __TTCItem__Wrapper.getdwStateMask : UINT;
begin
result := TTCItem(GetRecordPtr^).dwStateMask;
end;
procedure __TTCItem__Wrapper.setcchTextMax(const val : Integer);
begin
TTCItem(GetRecordPtr^).cchTextMax := val;
end;
function __TTCItem__Wrapper.getcchTextMax : Integer;
begin
result := TTCItem(GetRecordPtr^).cchTextMax;
end;
procedure __TTCItem__Wrapper.setiImage(const val : Integer);
begin
TTCItem(GetRecordPtr^).iImage := val;
end;
function __TTCItem__Wrapper.getiImage : Integer;
begin
result := TTCItem(GetRecordPtr^).iImage;
end;
procedure __TTCItem__Wrapper.setlParam(const val : lParam);
begin
TTCItem(GetRecordPtr^).lParam := val;
end;
function __TTCItem__Wrapper.getlParam : lParam;
begin
result := TTCItem(GetRecordPtr^).lParam;
end;
function __TTCItemA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTCItemA__Wrapper.setMask(const val : UINT);
begin
TTCItemA(GetRecordPtr^).Mask := val;
end;
function __TTCItemA__Wrapper.getMask : UINT;
begin
result := TTCItemA(GetRecordPtr^).Mask;
end;
procedure __TTCItemA__Wrapper.setdwState(const val : UINT);
begin
TTCItemA(GetRecordPtr^).dwState := val;
end;
function __TTCItemA__Wrapper.getdwState : UINT;
begin
result := TTCItemA(GetRecordPtr^).dwState;
end;
procedure __TTCItemA__Wrapper.setdwStateMask(const val : UINT);
begin
TTCItemA(GetRecordPtr^).dwStateMask := val;
end;
function __TTCItemA__Wrapper.getdwStateMask : UINT;
begin
result := TTCItemA(GetRecordPtr^).dwStateMask;
end;
procedure __TTCItemA__Wrapper.setcchTextMax(const val : Integer);
begin
TTCItemA(GetRecordPtr^).cchTextMax := val;
end;
function __TTCItemA__Wrapper.getcchTextMax : Integer;
begin
result := TTCItemA(GetRecordPtr^).cchTextMax;
end;
procedure __TTCItemA__Wrapper.setiImage(const val : Integer);
begin
TTCItemA(GetRecordPtr^).iImage := val;
end;
function __TTCItemA__Wrapper.getiImage : Integer;
begin
result := TTCItemA(GetRecordPtr^).iImage;
end;
procedure __TTCItemA__Wrapper.setlParam(const val : lParam);
begin
TTCItemA(GetRecordPtr^).lParam := val;
end;
function __TTCItemA__Wrapper.getlParam : lParam;
begin
result := TTCItemA(GetRecordPtr^).lParam;
end;
function __TTCItemHeader__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTCItemHeader__Wrapper.setMask(const val : UINT);
begin
TTCItemHeader(GetRecordPtr^).Mask := val;
end;
function __TTCItemHeader__Wrapper.getMask : UINT;
begin
result := TTCItemHeader(GetRecordPtr^).Mask;
end;
procedure __TTCItemHeader__Wrapper.setlpReserved1(const val : UINT);
begin
TTCItemHeader(GetRecordPtr^).lpReserved1 := val;
end;
function __TTCItemHeader__Wrapper.getlpReserved1 : UINT;
begin
result := TTCItemHeader(GetRecordPtr^).lpReserved1;
end;
procedure __TTCItemHeader__Wrapper.setlpReserved2(const val : UINT);
begin
TTCItemHeader(GetRecordPtr^).lpReserved2 := val;
end;
function __TTCItemHeader__Wrapper.getlpReserved2 : UINT;
begin
result := TTCItemHeader(GetRecordPtr^).lpReserved2;
end;
procedure __TTCItemHeader__Wrapper.setcchTextMax(const val : Integer);
begin
TTCItemHeader(GetRecordPtr^).cchTextMax := val;
end;
function __TTCItemHeader__Wrapper.getcchTextMax : Integer;
begin
result := TTCItemHeader(GetRecordPtr^).cchTextMax;
end;
procedure __TTCItemHeader__Wrapper.setiImage(const val : Integer);
begin
TTCItemHeader(GetRecordPtr^).iImage := val;
end;
function __TTCItemHeader__Wrapper.getiImage : Integer;
begin
result := TTCItemHeader(GetRecordPtr^).iImage;
end;
function __TTCItemHeaderA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTCItemHeaderA__Wrapper.setMask(const val : UINT);
begin
TTCItemHeaderA(GetRecordPtr^).Mask := val;
end;
function __TTCItemHeaderA__Wrapper.getMask : UINT;
begin
result := TTCItemHeaderA(GetRecordPtr^).Mask;
end;
procedure __TTCItemHeaderA__Wrapper.setlpReserved1(const val : UINT);
begin
TTCItemHeaderA(GetRecordPtr^).lpReserved1 := val;
end;
function __TTCItemHeaderA__Wrapper.getlpReserved1 : UINT;
begin
result := TTCItemHeaderA(GetRecordPtr^).lpReserved1;
end;
procedure __TTCItemHeaderA__Wrapper.setlpReserved2(const val : UINT);
begin
TTCItemHeaderA(GetRecordPtr^).lpReserved2 := val;
end;
function __TTCItemHeaderA__Wrapper.getlpReserved2 : UINT;
begin
result := TTCItemHeaderA(GetRecordPtr^).lpReserved2;
end;
procedure __TTCItemHeaderA__Wrapper.setcchTextMax(const val : Integer);
begin
TTCItemHeaderA(GetRecordPtr^).cchTextMax := val;
end;
function __TTCItemHeaderA__Wrapper.getcchTextMax : Integer;
begin
result := TTCItemHeaderA(GetRecordPtr^).cchTextMax;
end;
procedure __TTCItemHeaderA__Wrapper.setiImage(const val : Integer);
begin
TTCItemHeaderA(GetRecordPtr^).iImage := val;
end;
function __TTCItemHeaderA__Wrapper.getiImage : Integer;
begin
result := TTCItemHeaderA(GetRecordPtr^).iImage;
end;
function __TTCItemHeaderW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTCItemHeaderW__Wrapper.setMask(const val : UINT);
begin
TTCItemHeaderW(GetRecordPtr^).Mask := val;
end;
function __TTCItemHeaderW__Wrapper.getMask : UINT;
begin
result := TTCItemHeaderW(GetRecordPtr^).Mask;
end;
procedure __TTCItemHeaderW__Wrapper.setlpReserved1(const val : UINT);
begin
TTCItemHeaderW(GetRecordPtr^).lpReserved1 := val;
end;
function __TTCItemHeaderW__Wrapper.getlpReserved1 : UINT;
begin
result := TTCItemHeaderW(GetRecordPtr^).lpReserved1;
end;
procedure __TTCItemHeaderW__Wrapper.setlpReserved2(const val : UINT);
begin
TTCItemHeaderW(GetRecordPtr^).lpReserved2 := val;
end;
function __TTCItemHeaderW__Wrapper.getlpReserved2 : UINT;
begin
result := TTCItemHeaderW(GetRecordPtr^).lpReserved2;
end;
procedure __TTCItemHeaderW__Wrapper.setcchTextMax(const val : Integer);
begin
TTCItemHeaderW(GetRecordPtr^).cchTextMax := val;
end;
function __TTCItemHeaderW__Wrapper.getcchTextMax : Integer;
begin
result := TTCItemHeaderW(GetRecordPtr^).cchTextMax;
end;
procedure __TTCItemHeaderW__Wrapper.setiImage(const val : Integer);
begin
TTCItemHeaderW(GetRecordPtr^).iImage := val;
end;
function __TTCItemHeaderW__Wrapper.getiImage : Integer;
begin
result := TTCItemHeaderW(GetRecordPtr^).iImage;
end;
function __TTCItemW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTCItemW__Wrapper.setMask(const val : UINT);
begin
TTCItemW(GetRecordPtr^).Mask := val;
end;
function __TTCItemW__Wrapper.getMask : UINT;
begin
result := TTCItemW(GetRecordPtr^).Mask;
end;
procedure __TTCItemW__Wrapper.setdwState(const val : UINT);
begin
TTCItemW(GetRecordPtr^).dwState := val;
end;
function __TTCItemW__Wrapper.getdwState : UINT;
begin
result := TTCItemW(GetRecordPtr^).dwState;
end;
procedure __TTCItemW__Wrapper.setdwStateMask(const val : UINT);
begin
TTCItemW(GetRecordPtr^).dwStateMask := val;
end;
function __TTCItemW__Wrapper.getdwStateMask : UINT;
begin
result := TTCItemW(GetRecordPtr^).dwStateMask;
end;
procedure __TTCItemW__Wrapper.setcchTextMax(const val : Integer);
begin
TTCItemW(GetRecordPtr^).cchTextMax := val;
end;
function __TTCItemW__Wrapper.getcchTextMax : Integer;
begin
result := TTCItemW(GetRecordPtr^).cchTextMax;
end;
procedure __TTCItemW__Wrapper.setiImage(const val : Integer);
begin
TTCItemW(GetRecordPtr^).iImage := val;
end;
function __TTCItemW__Wrapper.getiImage : Integer;
begin
result := TTCItemW(GetRecordPtr^).iImage;
end;
procedure __TTCItemW__Wrapper.setlParam(const val : lParam);
begin
TTCItemW(GetRecordPtr^).lParam := val;
end;
function __TTCItemW__Wrapper.getlParam : lParam;
begin
result := TTCItemW(GetRecordPtr^).lParam;
end;
function __TTCKeyDown__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTCKeyDown__Wrapper.setwVKey(const val : Word);
begin
TTCKeyDown(GetRecordPtr^).wVKey := val;
end;
function __TTCKeyDown__Wrapper.getwVKey : Word;
begin
result := TTCKeyDown(GetRecordPtr^).wVKey;
end;
procedure __TTCKeyDown__Wrapper.setFlags(const val : UINT);
begin
TTCKeyDown(GetRecordPtr^).Flags := val;
end;
function __TTCKeyDown__Wrapper.getFlags : UINT;
begin
result := TTCKeyDown(GetRecordPtr^).Flags;
end;
function __TTHITTESTINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TTHITTESTINFOA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TTHITTESTINFOW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TToolInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TToolInfo__Wrapper.setcbSize(const val : UINT);
begin
TToolInfo(GetRecordPtr^).cbSize := val;
end;
function __TToolInfo__Wrapper.getcbSize : UINT;
begin
result := TToolInfo(GetRecordPtr^).cbSize;
end;
procedure __TToolInfo__Wrapper.setuFlags(const val : UINT);
begin
TToolInfo(GetRecordPtr^).uFlags := val;
end;
function __TToolInfo__Wrapper.getuFlags : UINT;
begin
result := TToolInfo(GetRecordPtr^).uFlags;
end;
procedure __TToolInfo__Wrapper.setuId(const val : UINT);
begin
TToolInfo(GetRecordPtr^).uId := val;
end;
function __TToolInfo__Wrapper.getuId : UINT;
begin
result := TToolInfo(GetRecordPtr^).uId;
end;
procedure __TToolInfo__Wrapper.sethInst(const val : THandle);
begin
TToolInfo(GetRecordPtr^).hInst := val;
end;
function __TToolInfo__Wrapper.gethInst : THandle;
begin
result := TToolInfo(GetRecordPtr^).hInst;
end;
procedure __TToolInfo__Wrapper.setlParam(const val : lParam);
begin
TToolInfo(GetRecordPtr^).lParam := val;
end;
function __TToolInfo__Wrapper.getlParam : lParam;
begin
result := TToolInfo(GetRecordPtr^).lParam;
end;
function __TToolInfoA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TToolInfoA__Wrapper.setcbSize(const val : UINT);
begin
TToolInfoA(GetRecordPtr^).cbSize := val;
end;
function __TToolInfoA__Wrapper.getcbSize : UINT;
begin
result := TToolInfoA(GetRecordPtr^).cbSize;
end;
procedure __TToolInfoA__Wrapper.setuFlags(const val : UINT);
begin
TToolInfoA(GetRecordPtr^).uFlags := val;
end;
function __TToolInfoA__Wrapper.getuFlags : UINT;
begin
result := TToolInfoA(GetRecordPtr^).uFlags;
end;
procedure __TToolInfoA__Wrapper.setuId(const val : UINT);
begin
TToolInfoA(GetRecordPtr^).uId := val;
end;
function __TToolInfoA__Wrapper.getuId : UINT;
begin
result := TToolInfoA(GetRecordPtr^).uId;
end;
procedure __TToolInfoA__Wrapper.sethInst(const val : THandle);
begin
TToolInfoA(GetRecordPtr^).hInst := val;
end;
function __TToolInfoA__Wrapper.gethInst : THandle;
begin
result := TToolInfoA(GetRecordPtr^).hInst;
end;
procedure __TToolInfoA__Wrapper.setlParam(const val : lParam);
begin
TToolInfoA(GetRecordPtr^).lParam := val;
end;
function __TToolInfoA__Wrapper.getlParam : lParam;
begin
result := TToolInfoA(GetRecordPtr^).lParam;
end;
function __TToolInfoW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TToolInfoW__Wrapper.setcbSize(const val : UINT);
begin
TToolInfoW(GetRecordPtr^).cbSize := val;
end;
function __TToolInfoW__Wrapper.getcbSize : UINT;
begin
result := TToolInfoW(GetRecordPtr^).cbSize;
end;
procedure __TToolInfoW__Wrapper.setuFlags(const val : UINT);
begin
TToolInfoW(GetRecordPtr^).uFlags := val;
end;
function __TToolInfoW__Wrapper.getuFlags : UINT;
begin
result := TToolInfoW(GetRecordPtr^).uFlags;
end;
procedure __TToolInfoW__Wrapper.setuId(const val : UINT);
begin
TToolInfoW(GetRecordPtr^).uId := val;
end;
function __TToolInfoW__Wrapper.getuId : UINT;
begin
result := TToolInfoW(GetRecordPtr^).uId;
end;
procedure __TToolInfoW__Wrapper.sethInst(const val : THandle);
begin
TToolInfoW(GetRecordPtr^).hInst := val;
end;
function __TToolInfoW__Wrapper.gethInst : THandle;
begin
result := TToolInfoW(GetRecordPtr^).hInst;
end;
procedure __TToolInfoW__Wrapper.setlParam(const val : lParam);
begin
TToolInfoW(GetRecordPtr^).lParam := val;
end;
function __TToolInfoW__Wrapper.getlParam : lParam;
begin
result := TToolInfoW(GetRecordPtr^).lParam;
end;
function __TToolTipText__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TToolTipText__Wrapper.sethInst(const val : hInst);
begin
TToolTipText(GetRecordPtr^).hInst := val;
end;
function __TToolTipText__Wrapper.gethInst : hInst;
begin
result := TToolTipText(GetRecordPtr^).hInst;
end;
procedure __TToolTipText__Wrapper.setuFlags(const val : UINT);
begin
TToolTipText(GetRecordPtr^).uFlags := val;
end;
function __TToolTipText__Wrapper.getuFlags : UINT;
begin
result := TToolTipText(GetRecordPtr^).uFlags;
end;
procedure __TToolTipText__Wrapper.setlParam(const val : lParam);
begin
TToolTipText(GetRecordPtr^).lParam := val;
end;
function __TToolTipText__Wrapper.getlParam : lParam;
begin
result := TToolTipText(GetRecordPtr^).lParam;
end;
function __TToolTipTextA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TToolTipTextA__Wrapper.sethInst(const val : hInst);
begin
TToolTipTextA(GetRecordPtr^).hInst := val;
end;
function __TToolTipTextA__Wrapper.gethInst : hInst;
begin
result := TToolTipTextA(GetRecordPtr^).hInst;
end;
procedure __TToolTipTextA__Wrapper.setuFlags(const val : UINT);
begin
TToolTipTextA(GetRecordPtr^).uFlags := val;
end;
function __TToolTipTextA__Wrapper.getuFlags : UINT;
begin
result := TToolTipTextA(GetRecordPtr^).uFlags;
end;
procedure __TToolTipTextA__Wrapper.setlParam(const val : lParam);
begin
TToolTipTextA(GetRecordPtr^).lParam := val;
end;
function __TToolTipTextA__Wrapper.getlParam : lParam;
begin
result := TToolTipTextA(GetRecordPtr^).lParam;
end;
function __TToolTipTextW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TToolTipTextW__Wrapper.sethInst(const val : hInst);
begin
TToolTipTextW(GetRecordPtr^).hInst := val;
end;
function __TToolTipTextW__Wrapper.gethInst : hInst;
begin
result := TToolTipTextW(GetRecordPtr^).hInst;
end;
procedure __TToolTipTextW__Wrapper.setuFlags(const val : UINT);
begin
TToolTipTextW(GetRecordPtr^).uFlags := val;
end;
function __TToolTipTextW__Wrapper.getuFlags : UINT;
begin
result := TToolTipTextW(GetRecordPtr^).uFlags;
end;
procedure __TToolTipTextW__Wrapper.setlParam(const val : lParam);
begin
TToolTipTextW(GetRecordPtr^).lParam := val;
end;
function __TToolTipTextW__Wrapper.getlParam : lParam;
begin
result := TToolTipTextW(GetRecordPtr^).lParam;
end;
function __TTrackMouseEvent__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTrackMouseEvent__Wrapper.setcbSize(const val : DWORD);
begin
TTrackMouseEvent(GetRecordPtr^).cbSize := val;
end;
function __TTrackMouseEvent__Wrapper.getcbSize : DWORD;
begin
result := TTrackMouseEvent(GetRecordPtr^).cbSize;
end;
procedure __TTrackMouseEvent__Wrapper.setdwFlags(const val : DWORD);
begin
TTrackMouseEvent(GetRecordPtr^).dwFlags := val;
end;
function __TTrackMouseEvent__Wrapper.getdwFlags : DWORD;
begin
result := TTrackMouseEvent(GetRecordPtr^).dwFlags;
end;
procedure __TTrackMouseEvent__Wrapper.setdwHoverTime(const val : DWORD);
begin
TTrackMouseEvent(GetRecordPtr^).dwHoverTime := val;
end;
function __TTrackMouseEvent__Wrapper.getdwHoverTime : DWORD;
begin
result := TTrackMouseEvent(GetRecordPtr^).dwHoverTime;
end;
function __TTTHitTestInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TTTHitTestInfoA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TTTHitTestInfoW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TTVDispInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TTVDispInfoA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TTVDispInfoW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TTVHitTestInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTVHitTestInfo__Wrapper.setFlags(const val : UINT);
begin
TTVHitTestInfo(GetRecordPtr^).Flags := val;
end;
function __TTVHitTestInfo__Wrapper.getFlags : UINT;
begin
result := TTVHitTestInfo(GetRecordPtr^).Flags;
end;
function __TTVInsertStruct__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TTVInsertStructA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TTVInsertStructW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TTVItem__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTVItem__Wrapper.setMask(const val : UINT);
begin
TTVItem(GetRecordPtr^).Mask := val;
end;
function __TTVItem__Wrapper.getMask : UINT;
begin
result := TTVItem(GetRecordPtr^).Mask;
end;
procedure __TTVItem__Wrapper.setstate(const val : UINT);
begin
TTVItem(GetRecordPtr^).state := val;
end;
function __TTVItem__Wrapper.getstate : UINT;
begin
result := TTVItem(GetRecordPtr^).state;
end;
procedure __TTVItem__Wrapper.setstateMask(const val : UINT);
begin
TTVItem(GetRecordPtr^).stateMask := val;
end;
function __TTVItem__Wrapper.getstateMask : UINT;
begin
result := TTVItem(GetRecordPtr^).stateMask;
end;
procedure __TTVItem__Wrapper.setcchTextMax(const val : Integer);
begin
TTVItem(GetRecordPtr^).cchTextMax := val;
end;
function __TTVItem__Wrapper.getcchTextMax : Integer;
begin
result := TTVItem(GetRecordPtr^).cchTextMax;
end;
procedure __TTVItem__Wrapper.setiImage(const val : Integer);
begin
TTVItem(GetRecordPtr^).iImage := val;
end;
function __TTVItem__Wrapper.getiImage : Integer;
begin
result := TTVItem(GetRecordPtr^).iImage;
end;
procedure __TTVItem__Wrapper.setiSelectedImage(const val : Integer);
begin
TTVItem(GetRecordPtr^).iSelectedImage := val;
end;
function __TTVItem__Wrapper.getiSelectedImage : Integer;
begin
result := TTVItem(GetRecordPtr^).iSelectedImage;
end;
procedure __TTVItem__Wrapper.setcChildren(const val : Integer);
begin
TTVItem(GetRecordPtr^).cChildren := val;
end;
function __TTVItem__Wrapper.getcChildren : Integer;
begin
result := TTVItem(GetRecordPtr^).cChildren;
end;
procedure __TTVItem__Wrapper.setlParam(const val : lParam);
begin
TTVItem(GetRecordPtr^).lParam := val;
end;
function __TTVItem__Wrapper.getlParam : lParam;
begin
result := TTVItem(GetRecordPtr^).lParam;
end;
function __TTVItemA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTVItemA__Wrapper.setMask(const val : UINT);
begin
TTVItemA(GetRecordPtr^).Mask := val;
end;
function __TTVItemA__Wrapper.getMask : UINT;
begin
result := TTVItemA(GetRecordPtr^).Mask;
end;
procedure __TTVItemA__Wrapper.setstate(const val : UINT);
begin
TTVItemA(GetRecordPtr^).state := val;
end;
function __TTVItemA__Wrapper.getstate : UINT;
begin
result := TTVItemA(GetRecordPtr^).state;
end;
procedure __TTVItemA__Wrapper.setstateMask(const val : UINT);
begin
TTVItemA(GetRecordPtr^).stateMask := val;
end;
function __TTVItemA__Wrapper.getstateMask : UINT;
begin
result := TTVItemA(GetRecordPtr^).stateMask;
end;
procedure __TTVItemA__Wrapper.setcchTextMax(const val : Integer);
begin
TTVItemA(GetRecordPtr^).cchTextMax := val;
end;
function __TTVItemA__Wrapper.getcchTextMax : Integer;
begin
result := TTVItemA(GetRecordPtr^).cchTextMax;
end;
procedure __TTVItemA__Wrapper.setiImage(const val : Integer);
begin
TTVItemA(GetRecordPtr^).iImage := val;
end;
function __TTVItemA__Wrapper.getiImage : Integer;
begin
result := TTVItemA(GetRecordPtr^).iImage;
end;
procedure __TTVItemA__Wrapper.setiSelectedImage(const val : Integer);
begin
TTVItemA(GetRecordPtr^).iSelectedImage := val;
end;
function __TTVItemA__Wrapper.getiSelectedImage : Integer;
begin
result := TTVItemA(GetRecordPtr^).iSelectedImage;
end;
procedure __TTVItemA__Wrapper.setcChildren(const val : Integer);
begin
TTVItemA(GetRecordPtr^).cChildren := val;
end;
function __TTVItemA__Wrapper.getcChildren : Integer;
begin
result := TTVItemA(GetRecordPtr^).cChildren;
end;
procedure __TTVItemA__Wrapper.setlParam(const val : lParam);
begin
TTVItemA(GetRecordPtr^).lParam := val;
end;
function __TTVItemA__Wrapper.getlParam : lParam;
begin
result := TTVItemA(GetRecordPtr^).lParam;
end;
function __TTVItemEx__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTVItemEx__Wrapper.setMask(const val : UINT);
begin
TTVItemEx(GetRecordPtr^).Mask := val;
end;
function __TTVItemEx__Wrapper.getMask : UINT;
begin
result := TTVItemEx(GetRecordPtr^).Mask;
end;
procedure __TTVItemEx__Wrapper.setstate(const val : UINT);
begin
TTVItemEx(GetRecordPtr^).state := val;
end;
function __TTVItemEx__Wrapper.getstate : UINT;
begin
result := TTVItemEx(GetRecordPtr^).state;
end;
procedure __TTVItemEx__Wrapper.setstateMask(const val : UINT);
begin
TTVItemEx(GetRecordPtr^).stateMask := val;
end;
function __TTVItemEx__Wrapper.getstateMask : UINT;
begin
result := TTVItemEx(GetRecordPtr^).stateMask;
end;
procedure __TTVItemEx__Wrapper.setcchTextMax(const val : Integer);
begin
TTVItemEx(GetRecordPtr^).cchTextMax := val;
end;
function __TTVItemEx__Wrapper.getcchTextMax : Integer;
begin
result := TTVItemEx(GetRecordPtr^).cchTextMax;
end;
procedure __TTVItemEx__Wrapper.setiImage(const val : Integer);
begin
TTVItemEx(GetRecordPtr^).iImage := val;
end;
function __TTVItemEx__Wrapper.getiImage : Integer;
begin
result := TTVItemEx(GetRecordPtr^).iImage;
end;
procedure __TTVItemEx__Wrapper.setiSelectedImage(const val : Integer);
begin
TTVItemEx(GetRecordPtr^).iSelectedImage := val;
end;
function __TTVItemEx__Wrapper.getiSelectedImage : Integer;
begin
result := TTVItemEx(GetRecordPtr^).iSelectedImage;
end;
procedure __TTVItemEx__Wrapper.setcChildren(const val : Integer);
begin
TTVItemEx(GetRecordPtr^).cChildren := val;
end;
function __TTVItemEx__Wrapper.getcChildren : Integer;
begin
result := TTVItemEx(GetRecordPtr^).cChildren;
end;
procedure __TTVItemEx__Wrapper.setlParam(const val : lParam);
begin
TTVItemEx(GetRecordPtr^).lParam := val;
end;
function __TTVItemEx__Wrapper.getlParam : lParam;
begin
result := TTVItemEx(GetRecordPtr^).lParam;
end;
procedure __TTVItemEx__Wrapper.setiIntegral(const val : Integer);
begin
TTVItemEx(GetRecordPtr^).iIntegral := val;
end;
function __TTVItemEx__Wrapper.getiIntegral : Integer;
begin
result := TTVItemEx(GetRecordPtr^).iIntegral;
end;
function __TTVItemExA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTVItemExA__Wrapper.setMask(const val : UINT);
begin
TTVItemExA(GetRecordPtr^).Mask := val;
end;
function __TTVItemExA__Wrapper.getMask : UINT;
begin
result := TTVItemExA(GetRecordPtr^).Mask;
end;
procedure __TTVItemExA__Wrapper.setstate(const val : UINT);
begin
TTVItemExA(GetRecordPtr^).state := val;
end;
function __TTVItemExA__Wrapper.getstate : UINT;
begin
result := TTVItemExA(GetRecordPtr^).state;
end;
procedure __TTVItemExA__Wrapper.setstateMask(const val : UINT);
begin
TTVItemExA(GetRecordPtr^).stateMask := val;
end;
function __TTVItemExA__Wrapper.getstateMask : UINT;
begin
result := TTVItemExA(GetRecordPtr^).stateMask;
end;
procedure __TTVItemExA__Wrapper.setcchTextMax(const val : Integer);
begin
TTVItemExA(GetRecordPtr^).cchTextMax := val;
end;
function __TTVItemExA__Wrapper.getcchTextMax : Integer;
begin
result := TTVItemExA(GetRecordPtr^).cchTextMax;
end;
procedure __TTVItemExA__Wrapper.setiImage(const val : Integer);
begin
TTVItemExA(GetRecordPtr^).iImage := val;
end;
function __TTVItemExA__Wrapper.getiImage : Integer;
begin
result := TTVItemExA(GetRecordPtr^).iImage;
end;
procedure __TTVItemExA__Wrapper.setiSelectedImage(const val : Integer);
begin
TTVItemExA(GetRecordPtr^).iSelectedImage := val;
end;
function __TTVItemExA__Wrapper.getiSelectedImage : Integer;
begin
result := TTVItemExA(GetRecordPtr^).iSelectedImage;
end;
procedure __TTVItemExA__Wrapper.setcChildren(const val : Integer);
begin
TTVItemExA(GetRecordPtr^).cChildren := val;
end;
function __TTVItemExA__Wrapper.getcChildren : Integer;
begin
result := TTVItemExA(GetRecordPtr^).cChildren;
end;
procedure __TTVItemExA__Wrapper.setlParam(const val : lParam);
begin
TTVItemExA(GetRecordPtr^).lParam := val;
end;
function __TTVItemExA__Wrapper.getlParam : lParam;
begin
result := TTVItemExA(GetRecordPtr^).lParam;
end;
procedure __TTVItemExA__Wrapper.setiIntegral(const val : Integer);
begin
TTVItemExA(GetRecordPtr^).iIntegral := val;
end;
function __TTVItemExA__Wrapper.getiIntegral : Integer;
begin
result := TTVItemExA(GetRecordPtr^).iIntegral;
end;
function __TTVItemExW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTVItemExW__Wrapper.setMask(const val : UINT);
begin
TTVItemExW(GetRecordPtr^).Mask := val;
end;
function __TTVItemExW__Wrapper.getMask : UINT;
begin
result := TTVItemExW(GetRecordPtr^).Mask;
end;
procedure __TTVItemExW__Wrapper.setstate(const val : UINT);
begin
TTVItemExW(GetRecordPtr^).state := val;
end;
function __TTVItemExW__Wrapper.getstate : UINT;
begin
result := TTVItemExW(GetRecordPtr^).state;
end;
procedure __TTVItemExW__Wrapper.setstateMask(const val : UINT);
begin
TTVItemExW(GetRecordPtr^).stateMask := val;
end;
function __TTVItemExW__Wrapper.getstateMask : UINT;
begin
result := TTVItemExW(GetRecordPtr^).stateMask;
end;
procedure __TTVItemExW__Wrapper.setcchTextMax(const val : Integer);
begin
TTVItemExW(GetRecordPtr^).cchTextMax := val;
end;
function __TTVItemExW__Wrapper.getcchTextMax : Integer;
begin
result := TTVItemExW(GetRecordPtr^).cchTextMax;
end;
procedure __TTVItemExW__Wrapper.setiImage(const val : Integer);
begin
TTVItemExW(GetRecordPtr^).iImage := val;
end;
function __TTVItemExW__Wrapper.getiImage : Integer;
begin
result := TTVItemExW(GetRecordPtr^).iImage;
end;
procedure __TTVItemExW__Wrapper.setiSelectedImage(const val : Integer);
begin
TTVItemExW(GetRecordPtr^).iSelectedImage := val;
end;
function __TTVItemExW__Wrapper.getiSelectedImage : Integer;
begin
result := TTVItemExW(GetRecordPtr^).iSelectedImage;
end;
procedure __TTVItemExW__Wrapper.setcChildren(const val : Integer);
begin
TTVItemExW(GetRecordPtr^).cChildren := val;
end;
function __TTVItemExW__Wrapper.getcChildren : Integer;
begin
result := TTVItemExW(GetRecordPtr^).cChildren;
end;
procedure __TTVItemExW__Wrapper.setlParam(const val : lParam);
begin
TTVItemExW(GetRecordPtr^).lParam := val;
end;
function __TTVItemExW__Wrapper.getlParam : lParam;
begin
result := TTVItemExW(GetRecordPtr^).lParam;
end;
procedure __TTVItemExW__Wrapper.setiIntegral(const val : Integer);
begin
TTVItemExW(GetRecordPtr^).iIntegral := val;
end;
function __TTVItemExW__Wrapper.getiIntegral : Integer;
begin
result := TTVItemExW(GetRecordPtr^).iIntegral;
end;
function __TTVItemW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTVItemW__Wrapper.setMask(const val : UINT);
begin
TTVItemW(GetRecordPtr^).Mask := val;
end;
function __TTVItemW__Wrapper.getMask : UINT;
begin
result := TTVItemW(GetRecordPtr^).Mask;
end;
procedure __TTVItemW__Wrapper.setstate(const val : UINT);
begin
TTVItemW(GetRecordPtr^).state := val;
end;
function __TTVItemW__Wrapper.getstate : UINT;
begin
result := TTVItemW(GetRecordPtr^).state;
end;
procedure __TTVItemW__Wrapper.setstateMask(const val : UINT);
begin
TTVItemW(GetRecordPtr^).stateMask := val;
end;
function __TTVItemW__Wrapper.getstateMask : UINT;
begin
result := TTVItemW(GetRecordPtr^).stateMask;
end;
procedure __TTVItemW__Wrapper.setcchTextMax(const val : Integer);
begin
TTVItemW(GetRecordPtr^).cchTextMax := val;
end;
function __TTVItemW__Wrapper.getcchTextMax : Integer;
begin
result := TTVItemW(GetRecordPtr^).cchTextMax;
end;
procedure __TTVItemW__Wrapper.setiImage(const val : Integer);
begin
TTVItemW(GetRecordPtr^).iImage := val;
end;
function __TTVItemW__Wrapper.getiImage : Integer;
begin
result := TTVItemW(GetRecordPtr^).iImage;
end;
procedure __TTVItemW__Wrapper.setiSelectedImage(const val : Integer);
begin
TTVItemW(GetRecordPtr^).iSelectedImage := val;
end;
function __TTVItemW__Wrapper.getiSelectedImage : Integer;
begin
result := TTVItemW(GetRecordPtr^).iSelectedImage;
end;
procedure __TTVItemW__Wrapper.setcChildren(const val : Integer);
begin
TTVItemW(GetRecordPtr^).cChildren := val;
end;
function __TTVItemW__Wrapper.getcChildren : Integer;
begin
result := TTVItemW(GetRecordPtr^).cChildren;
end;
procedure __TTVItemW__Wrapper.setlParam(const val : lParam);
begin
TTVItemW(GetRecordPtr^).lParam := val;
end;
function __TTVItemW__Wrapper.getlParam : lParam;
begin
result := TTVItemW(GetRecordPtr^).lParam;
end;
function __TTVKeyDown__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTVKeyDown__Wrapper.setwVKey(const val : Word);
begin
TTVKeyDown(GetRecordPtr^).wVKey := val;
end;
function __TTVKeyDown__Wrapper.getwVKey : Word;
begin
result := TTVKeyDown(GetRecordPtr^).wVKey;
end;
procedure __TTVKeyDown__Wrapper.setFlags(const val : UINT);
begin
TTVKeyDown(GetRecordPtr^).Flags := val;
end;
function __TTVKeyDown__Wrapper.getFlags : UINT;
begin
result := TTVKeyDown(GetRecordPtr^).Flags;
end;
function __TTVSortCB__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTVSortCB__Wrapper.setlParam(const val : lParam);
begin
TTVSortCB(GetRecordPtr^).lParam := val;
end;
function __TTVSortCB__Wrapper.getlParam : lParam;
begin
result := TTVSortCB(GetRecordPtr^).lParam;
end;
function __TUDAccel__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TUDAccel__Wrapper.setnSec(const val : UINT);
begin
TUDAccel(GetRecordPtr^).nSec := val;
end;
function __TUDAccel__Wrapper.getnSec : UINT;
begin
result := TUDAccel(GetRecordPtr^).nSec;
end;
procedure __TUDAccel__Wrapper.setnInc(const val : UINT);
begin
TUDAccel(GetRecordPtr^).nInc := val;
end;
function __TUDAccel__Wrapper.getnInc : UINT;
begin
result := TUDAccel(GetRecordPtr^).nInc;
end;
function __TV_DISPINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TV_DISPINFOA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TV_DISPINFOW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TV_HITTESTINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TV_HITTESTINFO__Wrapper.setFlags(const val : UINT);
begin
TV_HITTESTINFO(GetRecordPtr^).Flags := val;
end;
function __TV_HITTESTINFO__Wrapper.getFlags : UINT;
begin
result := TV_HITTESTINFO(GetRecordPtr^).Flags;
end;
function __TV_INSERTSTRUCT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TV_INSERTSTRUCTA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TV_INSERTSTRUCTW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TV_ITEM__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TV_ITEM__Wrapper.setMask(const val : UINT);
begin
TV_ITEM(GetRecordPtr^).Mask := val;
end;
function __TV_ITEM__Wrapper.getMask : UINT;
begin
result := TV_ITEM(GetRecordPtr^).Mask;
end;
procedure __TV_ITEM__Wrapper.setstate(const val : UINT);
begin
TV_ITEM(GetRecordPtr^).state := val;
end;
function __TV_ITEM__Wrapper.getstate : UINT;
begin
result := TV_ITEM(GetRecordPtr^).state;
end;
procedure __TV_ITEM__Wrapper.setstateMask(const val : UINT);
begin
TV_ITEM(GetRecordPtr^).stateMask := val;
end;
function __TV_ITEM__Wrapper.getstateMask : UINT;
begin
result := TV_ITEM(GetRecordPtr^).stateMask;
end;
procedure __TV_ITEM__Wrapper.setcchTextMax(const val : Integer);
begin
TV_ITEM(GetRecordPtr^).cchTextMax := val;
end;
function __TV_ITEM__Wrapper.getcchTextMax : Integer;
begin
result := TV_ITEM(GetRecordPtr^).cchTextMax;
end;
procedure __TV_ITEM__Wrapper.setiImage(const val : Integer);
begin
TV_ITEM(GetRecordPtr^).iImage := val;
end;
function __TV_ITEM__Wrapper.getiImage : Integer;
begin
result := TV_ITEM(GetRecordPtr^).iImage;
end;
procedure __TV_ITEM__Wrapper.setiSelectedImage(const val : Integer);
begin
TV_ITEM(GetRecordPtr^).iSelectedImage := val;
end;
function __TV_ITEM__Wrapper.getiSelectedImage : Integer;
begin
result := TV_ITEM(GetRecordPtr^).iSelectedImage;
end;
procedure __TV_ITEM__Wrapper.setcChildren(const val : Integer);
begin
TV_ITEM(GetRecordPtr^).cChildren := val;
end;
function __TV_ITEM__Wrapper.getcChildren : Integer;
begin
result := TV_ITEM(GetRecordPtr^).cChildren;
end;
procedure __TV_ITEM__Wrapper.setlParam(const val : lParam);
begin
TV_ITEM(GetRecordPtr^).lParam := val;
end;
function __TV_ITEM__Wrapper.getlParam : lParam;
begin
result := TV_ITEM(GetRecordPtr^).lParam;
end;
function __TV_ITEMA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TV_ITEMA__Wrapper.setMask(const val : UINT);
begin
TV_ITEMA(GetRecordPtr^).Mask := val;
end;
function __TV_ITEMA__Wrapper.getMask : UINT;
begin
result := TV_ITEMA(GetRecordPtr^).Mask;
end;
procedure __TV_ITEMA__Wrapper.setstate(const val : UINT);
begin
TV_ITEMA(GetRecordPtr^).state := val;
end;
function __TV_ITEMA__Wrapper.getstate : UINT;
begin
result := TV_ITEMA(GetRecordPtr^).state;
end;
procedure __TV_ITEMA__Wrapper.setstateMask(const val : UINT);
begin
TV_ITEMA(GetRecordPtr^).stateMask := val;
end;
function __TV_ITEMA__Wrapper.getstateMask : UINT;
begin
result := TV_ITEMA(GetRecordPtr^).stateMask;
end;
procedure __TV_ITEMA__Wrapper.setcchTextMax(const val : Integer);
begin
TV_ITEMA(GetRecordPtr^).cchTextMax := val;
end;
function __TV_ITEMA__Wrapper.getcchTextMax : Integer;
begin
result := TV_ITEMA(GetRecordPtr^).cchTextMax;
end;
procedure __TV_ITEMA__Wrapper.setiImage(const val : Integer);
begin
TV_ITEMA(GetRecordPtr^).iImage := val;
end;
function __TV_ITEMA__Wrapper.getiImage : Integer;
begin
result := TV_ITEMA(GetRecordPtr^).iImage;
end;
procedure __TV_ITEMA__Wrapper.setiSelectedImage(const val : Integer);
begin
TV_ITEMA(GetRecordPtr^).iSelectedImage := val;
end;
function __TV_ITEMA__Wrapper.getiSelectedImage : Integer;
begin
result := TV_ITEMA(GetRecordPtr^).iSelectedImage;
end;
procedure __TV_ITEMA__Wrapper.setcChildren(const val : Integer);
begin
TV_ITEMA(GetRecordPtr^).cChildren := val;
end;
function __TV_ITEMA__Wrapper.getcChildren : Integer;
begin
result := TV_ITEMA(GetRecordPtr^).cChildren;
end;
procedure __TV_ITEMA__Wrapper.setlParam(const val : lParam);
begin
TV_ITEMA(GetRecordPtr^).lParam := val;
end;
function __TV_ITEMA__Wrapper.getlParam : lParam;
begin
result := TV_ITEMA(GetRecordPtr^).lParam;
end;
function __TV_ITEMW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TV_ITEMW__Wrapper.setMask(const val : UINT);
begin
TV_ITEMW(GetRecordPtr^).Mask := val;
end;
function __TV_ITEMW__Wrapper.getMask : UINT;
begin
result := TV_ITEMW(GetRecordPtr^).Mask;
end;
procedure __TV_ITEMW__Wrapper.setstate(const val : UINT);
begin
TV_ITEMW(GetRecordPtr^).state := val;
end;
function __TV_ITEMW__Wrapper.getstate : UINT;
begin
result := TV_ITEMW(GetRecordPtr^).state;
end;
procedure __TV_ITEMW__Wrapper.setstateMask(const val : UINT);
begin
TV_ITEMW(GetRecordPtr^).stateMask := val;
end;
function __TV_ITEMW__Wrapper.getstateMask : UINT;
begin
result := TV_ITEMW(GetRecordPtr^).stateMask;
end;
procedure __TV_ITEMW__Wrapper.setcchTextMax(const val : Integer);
begin
TV_ITEMW(GetRecordPtr^).cchTextMax := val;
end;
function __TV_ITEMW__Wrapper.getcchTextMax : Integer;
begin
result := TV_ITEMW(GetRecordPtr^).cchTextMax;
end;
procedure __TV_ITEMW__Wrapper.setiImage(const val : Integer);
begin
TV_ITEMW(GetRecordPtr^).iImage := val;
end;
function __TV_ITEMW__Wrapper.getiImage : Integer;
begin
result := TV_ITEMW(GetRecordPtr^).iImage;
end;
procedure __TV_ITEMW__Wrapper.setiSelectedImage(const val : Integer);
begin
TV_ITEMW(GetRecordPtr^).iSelectedImage := val;
end;
function __TV_ITEMW__Wrapper.getiSelectedImage : Integer;
begin
result := TV_ITEMW(GetRecordPtr^).iSelectedImage;
end;
procedure __TV_ITEMW__Wrapper.setcChildren(const val : Integer);
begin
TV_ITEMW(GetRecordPtr^).cChildren := val;
end;
function __TV_ITEMW__Wrapper.getcChildren : Integer;
begin
result := TV_ITEMW(GetRecordPtr^).cChildren;
end;
procedure __TV_ITEMW__Wrapper.setlParam(const val : lParam);
begin
TV_ITEMW(GetRecordPtr^).lParam := val;
end;
function __TV_ITEMW__Wrapper.getlParam : lParam;
begin
result := TV_ITEMW(GetRecordPtr^).lParam;
end;
function __TV_KEYDOWN__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TV_KEYDOWN__Wrapper.setwVKey(const val : Word);
begin
TV_KEYDOWN(GetRecordPtr^).wVKey := val;
end;
function __TV_KEYDOWN__Wrapper.getwVKey : Word;
begin
result := TV_KEYDOWN(GetRecordPtr^).wVKey;
end;
procedure __TV_KEYDOWN__Wrapper.setFlags(const val : UINT);
begin
TV_KEYDOWN(GetRecordPtr^).Flags := val;
end;
function __TV_KEYDOWN__Wrapper.getFlags : UINT;
begin
result := TV_KEYDOWN(GetRecordPtr^).Flags;
end;
function __TV_SORTCB__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TV_SORTCB__Wrapper.setlParam(const val : lParam);
begin
TV_SORTCB(GetRecordPtr^).lParam := val;
end;
function __TV_SORTCB__Wrapper.getlParam : lParam;
begin
result := TV_SORTCB(GetRecordPtr^).lParam;
end;
function __UDACCEL__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __UDACCEL__Wrapper.setnSec(const val : UINT);
begin
UDACCEL(GetRecordPtr^).nSec := val;
end;
function __UDACCEL__Wrapper.getnSec : UINT;
begin
result := UDACCEL(GetRecordPtr^).nSec;
end;
procedure __UDACCEL__Wrapper.setnInc(const val : UINT);
begin
UDACCEL(GetRecordPtr^).nInc := val;
end;
function __UDACCEL__Wrapper.getnInc : UINT;
begin
result := UDACCEL(GetRecordPtr^).nInc;
end;
function __COLORMAP_ : IDispatch;
begin
  result := ___COLORMAP__Wrapper.Create;
end;
function __HD_HITTESTINFO_ : IDispatch;
begin
  result := ___HD_HITTESTINFO__Wrapper.Create;
end;
function __HD_ITEM_ : IDispatch;
begin
  result := ___HD_ITEM__Wrapper.Create;
end;
function __HD_ITEMA_ : IDispatch;
begin
  result := ___HD_ITEMA__Wrapper.Create;
end;
function __HD_ITEMW_ : IDispatch;
begin
  result := ___HD_ITEMW__Wrapper.Create;
end;
function __HD_LAYOUT_ : IDispatch;
begin
  result := ___HD_LAYOUT__Wrapper.Create;
end;
function __IMAGEINFO_ : IDispatch;
begin
  result := ___IMAGEINFO__Wrapper.Create;
end;
function __IMAGELISTDRAWPARAMS_ : IDispatch;
begin
  result := ___IMAGELISTDRAWPARAMS__Wrapper.Create;
end;
function __LV_COLUMN_ : IDispatch;
begin
  result := ___LV_COLUMN__Wrapper.Create;
end;
function __LV_COLUMNA_ : IDispatch;
begin
  result := ___LV_COLUMNA__Wrapper.Create;
end;
function __LV_COLUMNW_ : IDispatch;
begin
  result := ___LV_COLUMNW__Wrapper.Create;
end;
function __LV_DISPINFO_ : IDispatch;
begin
  result := ___LV_DISPINFO__Wrapper.Create;
end;
function __LV_DISPINFOW_ : IDispatch;
begin
  result := ___LV_DISPINFOW__Wrapper.Create;
end;
function __LV_FINDINFO_ : IDispatch;
begin
  result := ___LV_FINDINFO__Wrapper.Create;
end;
function __LV_FINDINFOA_ : IDispatch;
begin
  result := ___LV_FINDINFOA__Wrapper.Create;
end;
function __LV_FINDINFOW_ : IDispatch;
begin
  result := ___LV_FINDINFOW__Wrapper.Create;
end;
function __LV_HITTESTINFO_ : IDispatch;
begin
  result := ___LV_HITTESTINFO__Wrapper.Create;
end;
function __LV_ITEM_ : IDispatch;
begin
  result := ___LV_ITEM__Wrapper.Create;
end;
function __LV_ITEMA_ : IDispatch;
begin
  result := ___LV_ITEMA__Wrapper.Create;
end;
function __LV_ITEMW_ : IDispatch;
begin
  result := ___LV_ITEMW__Wrapper.Create;
end;
function __LV_KEYDOWN_ : IDispatch;
begin
  result := ___LV_KEYDOWN__Wrapper.Create;
end;
function __NM_LISTVIEW_ : IDispatch;
begin
  result := ___NM_LISTVIEW__Wrapper.Create;
end;
function __NM_TREEVIEW_ : IDispatch;
begin
  result := ___NM_TREEVIEW__Wrapper.Create;
end;
function __NM_TREEVIEWA_ : IDispatch;
begin
  result := ___NM_TREEVIEWA__Wrapper.Create;
end;
function __NM_TREEVIEWW_ : IDispatch;
begin
  result := ___NM_TREEVIEWW__Wrapper.Create;
end;
function __NM_UPDOWN_ : IDispatch;
begin
  result := ___NM_UPDOWN__Wrapper.Create;
end;
function __NMTBCUSTOMDRAW_ : IDispatch;
begin
  result := ___NMTBCUSTOMDRAW__Wrapper.Create;
end;
function __PROPSHEETHEADER_ : IDispatch;
begin
  result := ___PROPSHEETHEADER__Wrapper.Create;
end;
function __PROPSHEETHEADERA_ : IDispatch;
begin
  result := ___PROPSHEETHEADERA__Wrapper.Create;
end;
function __PROPSHEETHEADERW_ : IDispatch;
begin
  result := ___PROPSHEETHEADERW__Wrapper.Create;
end;
function __PROPSHEETPAGE_ : IDispatch;
begin
  result := ___PROPSHEETPAGE__Wrapper.Create;
end;
function __PROPSHEETPAGEA_ : IDispatch;
begin
  result := ___PROPSHEETPAGEA__Wrapper.Create;
end;
function __PROPSHEETPAGEW_ : IDispatch;
begin
  result := ___PROPSHEETPAGEW__Wrapper.Create;
end;
function __RB_HITTESTINFO_ : IDispatch;
begin
  result := ___RB_HITTESTINFO__Wrapper.Create;
end;
function __TBBUTTON_ : IDispatch;
begin
  result := ___TBBUTTON__Wrapper.Create;
end;
function __TC_HITTESTINFO_ : IDispatch;
begin
  result := ___TC_HITTESTINFO__Wrapper.Create;
end;
function __TC_ITEM_ : IDispatch;
begin
  result := ___TC_ITEM__Wrapper.Create;
end;
function __TC_ITEMA_ : IDispatch;
begin
  result := ___TC_ITEMA__Wrapper.Create;
end;
function __TC_ITEMHEADER_ : IDispatch;
begin
  result := ___TC_ITEMHEADER__Wrapper.Create;
end;
function __TC_ITEMHEADERA_ : IDispatch;
begin
  result := ___TC_ITEMHEADERA__Wrapper.Create;
end;
function __TC_ITEMHEADERW_ : IDispatch;
begin
  result := ___TC_ITEMHEADERW__Wrapper.Create;
end;
function __TC_ITEMW_ : IDispatch;
begin
  result := ___TC_ITEMW__Wrapper.Create;
end;
function __TC_KEYDOWN_ : IDispatch;
begin
  result := ___TC_KEYDOWN__Wrapper.Create;
end;
function __TREEITEM_ : IDispatch;
begin
  result := ___TREEITEM__Wrapper.Create;
end;
function __TT_HITTESTINFO_ : IDispatch;
begin
  result := ___TT_HITTESTINFO__Wrapper.Create;
end;
function __TT_HITTESTINFOA_ : IDispatch;
begin
  result := ___TT_HITTESTINFOA__Wrapper.Create;
end;
function __TT_HITTESTINFOW_ : IDispatch;
begin
  result := ___TT_HITTESTINFOW__Wrapper.Create;
end;
function __TV_DISPINFO_ : IDispatch;
begin
  result := ___TV_DISPINFO__Wrapper.Create;
end;
function __TV_DISPINFOA_ : IDispatch;
begin
  result := ___TV_DISPINFOA__Wrapper.Create;
end;
function __TV_DISPINFOW_ : IDispatch;
begin
  result := ___TV_DISPINFOW__Wrapper.Create;
end;
function __TV_HITTESTINFO_ : IDispatch;
begin
  result := ___TV_HITTESTINFO__Wrapper.Create;
end;
function __TV_INSERTSTRUCT_ : IDispatch;
begin
  result := ___TV_INSERTSTRUCT__Wrapper.Create;
end;
function __TV_INSERTSTRUCTA_ : IDispatch;
begin
  result := ___TV_INSERTSTRUCTA__Wrapper.Create;
end;
function __TV_INSERTSTRUCTW_ : IDispatch;
begin
  result := ___TV_INSERTSTRUCTW__Wrapper.Create;
end;
function __TV_ITEM_ : IDispatch;
begin
  result := ___TV_ITEM__Wrapper.Create;
end;
function __TV_ITEMA_ : IDispatch;
begin
  result := ___TV_ITEMA__Wrapper.Create;
end;
function __TV_ITEMW_ : IDispatch;
begin
  result := ___TV_ITEMW__Wrapper.Create;
end;
function __TV_KEYDOWN_ : IDispatch;
begin
  result := ___TV_KEYDOWN__Wrapper.Create;
end;
function __TV_SORTCB_ : IDispatch;
begin
  result := ___TV_SORTCB__Wrapper.Create;
end;
function __UDACCEL_ : IDispatch;
begin
  result := ___UDACCEL__Wrapper.Create;
end;
function _COLORMAP_ : IDispatch;
begin
  result := __COLORMAP__Wrapper.Create;
end;
function _DRAGLISTINFO_ : IDispatch;
begin
  result := __DRAGLISTINFO__Wrapper.Create;
end;
function _HD_HITTESTINFO_ : IDispatch;
begin
  result := __HD_HITTESTINFO__Wrapper.Create;
end;
function _HD_ITEM_ : IDispatch;
begin
  result := __HD_ITEM__Wrapper.Create;
end;
function _HD_ITEMA_ : IDispatch;
begin
  result := __HD_ITEMA__Wrapper.Create;
end;
function _HD_ITEMW_ : IDispatch;
begin
  result := __HD_ITEMW__Wrapper.Create;
end;
function _HD_LAYOUT_ : IDispatch;
begin
  result := __HD_LAYOUT__Wrapper.Create;
end;
function _HD_NOTIFY_ : IDispatch;
begin
  result := __HD_NOTIFY__Wrapper.Create;
end;
function _HD_NOTIFYA_ : IDispatch;
begin
  result := __HD_NOTIFYA__Wrapper.Create;
end;
function _HD_NOTIFYW_ : IDispatch;
begin
  result := __HD_NOTIFYW__Wrapper.Create;
end;
function _IMAGEINFO_ : IDispatch;
begin
  result := __IMAGEINFO__Wrapper.Create;
end;
function _LV_COLUMN_ : IDispatch;
begin
  result := __LV_COLUMN__Wrapper.Create;
end;
function _LV_COLUMNA_ : IDispatch;
begin
  result := __LV_COLUMNA__Wrapper.Create;
end;
function _LV_COLUMNW_ : IDispatch;
begin
  result := __LV_COLUMNW__Wrapper.Create;
end;
function _LV_DISPINFO_ : IDispatch;
begin
  result := __LV_DISPINFO__Wrapper.Create;
end;
function _LV_DISPINFOA_ : IDispatch;
begin
  result := __LV_DISPINFOA__Wrapper.Create;
end;
function _LV_DISPINFOW_ : IDispatch;
begin
  result := __LV_DISPINFOW__Wrapper.Create;
end;
function _LV_FINDINFO_ : IDispatch;
begin
  result := __LV_FINDINFO__Wrapper.Create;
end;
function _LV_FINDINFOA_ : IDispatch;
begin
  result := __LV_FINDINFOA__Wrapper.Create;
end;
function _LV_FINDINFOW_ : IDispatch;
begin
  result := __LV_FINDINFOW__Wrapper.Create;
end;
function _LV_HITTESTINFO_ : IDispatch;
begin
  result := __LV_HITTESTINFO__Wrapper.Create;
end;
function _LV_ITEM_ : IDispatch;
begin
  result := __LV_ITEM__Wrapper.Create;
end;
function _LV_ITEMA_ : IDispatch;
begin
  result := __LV_ITEMA__Wrapper.Create;
end;
function _LV_ITEMW_ : IDispatch;
begin
  result := __LV_ITEMW__Wrapper.Create;
end;
function _LV_KEYDOWN_ : IDispatch;
begin
  result := __LV_KEYDOWN__Wrapper.Create;
end;
function _MCHITTESTINFO_ : IDispatch;
begin
  result := __MCHITTESTINFO__Wrapper.Create;
end;
function _NM_LISTVIEW_ : IDispatch;
begin
  result := __NM_LISTVIEW__Wrapper.Create;
end;
function _NM_TREEVIEW_ : IDispatch;
begin
  result := __NM_TREEVIEW__Wrapper.Create;
end;
function _NM_TREEVIEWA_ : IDispatch;
begin
  result := __NM_TREEVIEWA__Wrapper.Create;
end;
function _NM_TREEVIEWW_ : IDispatch;
begin
  result := __NM_TREEVIEWW__Wrapper.Create;
end;
function _NM_UPDOWN_ : IDispatch;
begin
  result := __NM_UPDOWN__Wrapper.Create;
end;
function _NMCBEDRAGBEGIN_ : IDispatch;
begin
  result := __NMCBEDRAGBEGIN__Wrapper.Create;
end;
function _NMCBEDRAGBEGINA_ : IDispatch;
begin
  result := __NMCBEDRAGBEGINA__Wrapper.Create;
end;
function _NMCBEDRAGBEGINW_ : IDispatch;
begin
  result := __NMCBEDRAGBEGINW__Wrapper.Create;
end;
function _NMCBEENDEDIT_ : IDispatch;
begin
  result := __NMCBEENDEDIT__Wrapper.Create;
end;
function _NMCBEENDEDITA_ : IDispatch;
begin
  result := __NMCBEENDEDITA__Wrapper.Create;
end;
function _NMCBEENDEDITW_ : IDispatch;
begin
  result := __NMCBEENDEDITW__Wrapper.Create;
end;
function _NMCOMBOBOXEX_ : IDispatch;
begin
  result := __NMCOMBOBOXEX__Wrapper.Create;
end;
function _NMCOMBOBOXEXA_ : IDispatch;
begin
  result := __NMCOMBOBOXEXA__Wrapper.Create;
end;
function _NMCOMBOBOXEXW_ : IDispatch;
begin
  result := __NMCOMBOBOXEXW__Wrapper.Create;
end;
function _NMPGCALCSIZE_ : IDispatch;
begin
  result := __NMPGCALCSIZE__Wrapper.Create;
end;
function _NMPGSCROLL_ : IDispatch;
begin
  result := __NMPGSCROLL__Wrapper.Create;
end;
function _NMSELECT_ : IDispatch;
begin
  result := __NMSELECT__Wrapper.Create;
end;
function _NMTBDISPINFO_ : IDispatch;
begin
  result := __NMTBDISPINFO__Wrapper.Create;
end;
function _NMTBDISPINFOA_ : IDispatch;
begin
  result := __NMTBDISPINFOA__Wrapper.Create;
end;
function _NMTBDISPINFOW_ : IDispatch;
begin
  result := __NMTBDISPINFOW__Wrapper.Create;
end;
function _PBRANGE_ : IDispatch;
begin
  result := __PBRANGE__Wrapper.Create;
end;
function _PROPSHEETPAGE_ : IDispatch;
begin
  result := __PROPSHEETPAGE__Wrapper.Create;
end;
function _PROPSHEETPAGEA_ : IDispatch;
begin
  result := __PROPSHEETPAGEA__Wrapper.Create;
end;
function _PROPSHEETPAGEW_ : IDispatch;
begin
  result := __PROPSHEETPAGEW__Wrapper.Create;
end;
function _tagCOLORSCHEME_ : IDispatch;
begin
  result := __tagCOLORSCHEME__Wrapper.Create;
end;
function _tagCOMBOBOXEXITEM_ : IDispatch;
begin
  result := __tagCOMBOBOXEXITEM__Wrapper.Create;
end;
function _tagCOMBOBOXEXITEMA_ : IDispatch;
begin
  result := __tagCOMBOBOXEXITEMA__Wrapper.Create;
end;
function _tagCOMBOBOXEXITEMW_ : IDispatch;
begin
  result := __tagCOMBOBOXEXITEMW__Wrapper.Create;
end;
function _tagDRAGLISTINFO_ : IDispatch;
begin
  result := __tagDRAGLISTINFO__Wrapper.Create;
end;
function _tagINITCOMMONCONTROLSEX_ : IDispatch;
begin
  result := __tagINITCOMMONCONTROLSEX__Wrapper.Create;
end;
function _tagLVBKIMAGE_ : IDispatch;
begin
  result := __tagLVBKIMAGE__Wrapper.Create;
end;
function _tagLVBKIMAGEA_ : IDispatch;
begin
  result := __tagLVBKIMAGEA__Wrapper.Create;
end;
function _tagLVBKIMAGEW_ : IDispatch;
begin
  result := __tagLVBKIMAGEW__Wrapper.Create;
end;
function _tagLVCOLUMN_ : IDispatch;
begin
  result := __tagLVCOLUMN__Wrapper.Create;
end;
function _tagLVCOLUMNA_ : IDispatch;
begin
  result := __tagLVCOLUMNA__Wrapper.Create;
end;
function _tagLVCOLUMNW_ : IDispatch;
begin
  result := __tagLVCOLUMNW__Wrapper.Create;
end;
function _tagLVDISPINFO_ : IDispatch;
begin
  result := __tagLVDISPINFO__Wrapper.Create;
end;
function _tagLVDISPINFOW_ : IDispatch;
begin
  result := __tagLVDISPINFOW__Wrapper.Create;
end;
function _tagLVFINDINFO_ : IDispatch;
begin
  result := __tagLVFINDINFO__Wrapper.Create;
end;
function _tagLVFINDINFOA_ : IDispatch;
begin
  result := __tagLVFINDINFOA__Wrapper.Create;
end;
function _tagLVFINDINFOW_ : IDispatch;
begin
  result := __tagLVFINDINFOW__Wrapper.Create;
end;
function _tagLVHITTESTINFO_ : IDispatch;
begin
  result := __tagLVHITTESTINFO__Wrapper.Create;
end;
function _tagLVITEM_ : IDispatch;
begin
  result := __tagLVITEM__Wrapper.Create;
end;
function _tagLVITEMA_ : IDispatch;
begin
  result := __tagLVITEMA__Wrapper.Create;
end;
function _tagLVITEMW_ : IDispatch;
begin
  result := __tagLVITEMW__Wrapper.Create;
end;
function _tagLVKEYDOWN_ : IDispatch;
begin
  result := __tagLVKEYDOWN__Wrapper.Create;
end;
function _tagNMCHAR_ : IDispatch;
begin
  result := __tagNMCHAR__Wrapper.Create;
end;
function _tagNMCUSTOMDRAWINFO_ : IDispatch;
begin
  result := __tagNMCUSTOMDRAWINFO__Wrapper.Create;
end;
function _tagNMDATETIMECHANGE_ : IDispatch;
begin
  result := __tagNMDATETIMECHANGE__Wrapper.Create;
end;
function _tagNMDATETIMEFORMAT_ : IDispatch;
begin
  result := __tagNMDATETIMEFORMAT__Wrapper.Create;
end;
function _tagNMDATETIMEFORMATA_ : IDispatch;
begin
  result := __tagNMDATETIMEFORMATA__Wrapper.Create;
end;
function _tagNMDATETIMEFORMATQUERY_ : IDispatch;
begin
  result := __tagNMDATETIMEFORMATQUERY__Wrapper.Create;
end;
function _tagNMDATETIMEFORMATQUERYA_ : IDispatch;
begin
  result := __tagNMDATETIMEFORMATQUERYA__Wrapper.Create;
end;
function _tagNMDATETIMEFORMATQUERYW_ : IDispatch;
begin
  result := __tagNMDATETIMEFORMATQUERYW__Wrapper.Create;
end;
function _tagNMDATETIMEFORMATW_ : IDispatch;
begin
  result := __tagNMDATETIMEFORMATW__Wrapper.Create;
end;
function _tagNMDATETIMESTRING_ : IDispatch;
begin
  result := __tagNMDATETIMESTRING__Wrapper.Create;
end;
function _tagNMDATETIMESTRINGA_ : IDispatch;
begin
  result := __tagNMDATETIMESTRINGA__Wrapper.Create;
end;
function _tagNMDATETIMESTRINGW_ : IDispatch;
begin
  result := __tagNMDATETIMESTRINGW__Wrapper.Create;
end;
function _tagNMDATETIMEWMKEYDOWN_ : IDispatch;
begin
  result := __tagNMDATETIMEWMKEYDOWN__Wrapper.Create;
end;
function _tagNMDATETIMEWMKEYDOWNA_ : IDispatch;
begin
  result := __tagNMDATETIMEWMKEYDOWNA__Wrapper.Create;
end;
function _tagNMDATETIMEWMKEYDOWNW_ : IDispatch;
begin
  result := __tagNMDATETIMEWMKEYDOWNW__Wrapper.Create;
end;
function _tagNMDAYSTATE_ : IDispatch;
begin
  result := __tagNMDAYSTATE__Wrapper.Create;
end;
function _tagNMHDDISPINFO_ : IDispatch;
begin
  result := __tagNMHDDISPINFO__Wrapper.Create;
end;
function _tagNMHDDISPINFOA_ : IDispatch;
begin
  result := __tagNMHDDISPINFOA__Wrapper.Create;
end;
function _tagNMHDDISPINFOW_ : IDispatch;
begin
  result := __tagNMHDDISPINFOW__Wrapper.Create;
end;
function _tagNMHEADER_ : IDispatch;
begin
  result := __tagNMHEADER__Wrapper.Create;
end;
function _tagNMHEADERA_ : IDispatch;
begin
  result := __tagNMHEADERA__Wrapper.Create;
end;
function _tagNMHEADERW_ : IDispatch;
begin
  result := __tagNMHEADERW__Wrapper.Create;
end;
function _tagNMIPADDRESS_ : IDispatch;
begin
  result := __tagNMIPADDRESS__Wrapper.Create;
end;
function _tagNMITEMACTIVATE_ : IDispatch;
begin
  result := __tagNMITEMACTIVATE__Wrapper.Create;
end;
function _tagNMKEY_ : IDispatch;
begin
  result := __tagNMKEY__Wrapper.Create;
end;
function _tagNMLISTVIEW_ : IDispatch;
begin
  result := __tagNMLISTVIEW__Wrapper.Create;
end;
function _tagNMLVCACHEHINT_ : IDispatch;
begin
  result := __tagNMLVCACHEHINT__Wrapper.Create;
end;
function _tagNMLVCUSTOMDRAW_ : IDispatch;
begin
  result := __tagNMLVCUSTOMDRAW__Wrapper.Create;
end;
function _tagNMLVFINDITEM_ : IDispatch;
begin
  result := __tagNMLVFINDITEM__Wrapper.Create;
end;
function _tagNMLVFINDITEMA_ : IDispatch;
begin
  result := __tagNMLVFINDITEMA__Wrapper.Create;
end;
function _tagNMLVFINDITEMW_ : IDispatch;
begin
  result := __tagNMLVFINDITEMW__Wrapper.Create;
end;
function _tagNMLVGETINFOTIP_ : IDispatch;
begin
  result := __tagNMLVGETINFOTIP__Wrapper.Create;
end;
function _tagNMLVGETINFOTIPA_ : IDispatch;
begin
  result := __tagNMLVGETINFOTIPA__Wrapper.Create;
end;
function _tagNMLVGETINFOTIPW_ : IDispatch;
begin
  result := __tagNMLVGETINFOTIPW__Wrapper.Create;
end;
function _tagNMLVODSTATECHANGE_ : IDispatch;
begin
  result := __tagNMLVODSTATECHANGE__Wrapper.Create;
end;
function _tagNMMOUSE_ : IDispatch;
begin
  result := __tagNMMOUSE__Wrapper.Create;
end;
function _tagNMOBJECTNOTIFY_ : IDispatch;
begin
  result := __tagNMOBJECTNOTIFY__Wrapper.Create;
end;
function _tagNMRBAUTOSIZE_ : IDispatch;
begin
  result := __tagNMRBAUTOSIZE__Wrapper.Create;
end;
function _tagNMREBAR_ : IDispatch;
begin
  result := __tagNMREBAR__Wrapper.Create;
end;
function _tagNMREBARCHILDSIZE_ : IDispatch;
begin
  result := __tagNMREBARCHILDSIZE__Wrapper.Create;
end;
function _tagNMSELCHANGE_ : IDispatch;
begin
  result := __tagNMSELCHANGE__Wrapper.Create;
end;
function _tagNMTBGETINFOTIP_ : IDispatch;
begin
  result := __tagNMTBGETINFOTIP__Wrapper.Create;
end;
function _tagNMTBGETINFOTIPA_ : IDispatch;
begin
  result := __tagNMTBGETINFOTIPA__Wrapper.Create;
end;
function _tagNMTBGETINFOTIPW_ : IDispatch;
begin
  result := __tagNMTBGETINFOTIPW__Wrapper.Create;
end;
function _tagNMTBHOTITEM_ : IDispatch;
begin
  result := __tagNMTBHOTITEM__Wrapper.Create;
end;
function _tagNMTOOLBAR_ : IDispatch;
begin
  result := __tagNMTOOLBAR__Wrapper.Create;
end;
function _tagNMTOOLBARA_ : IDispatch;
begin
  result := __tagNMTOOLBARA__Wrapper.Create;
end;
function _tagNMTOOLBARW_ : IDispatch;
begin
  result := __tagNMTOOLBARW__Wrapper.Create;
end;
function _tagNMTREEVIEW_ : IDispatch;
begin
  result := __tagNMTREEVIEW__Wrapper.Create;
end;
function _tagNMTREEVIEWA_ : IDispatch;
begin
  result := __tagNMTREEVIEWA__Wrapper.Create;
end;
function _tagNMTREEVIEWW_ : IDispatch;
begin
  result := __tagNMTREEVIEWW__Wrapper.Create;
end;
function _tagNMTTCUSTOMDRAW_ : IDispatch;
begin
  result := __tagNMTTCUSTOMDRAW__Wrapper.Create;
end;
function _tagNMTTDISPINFO_ : IDispatch;
begin
  result := __tagNMTTDISPINFO__Wrapper.Create;
end;
function _tagNMTTDISPINFOA_ : IDispatch;
begin
  result := __tagNMTTDISPINFOA__Wrapper.Create;
end;
function _tagNMTTDISPINFOW_ : IDispatch;
begin
  result := __tagNMTTDISPINFOW__Wrapper.Create;
end;
function _tagNMTVCUSTOMDRAW_ : IDispatch;
begin
  result := __tagNMTVCUSTOMDRAW__Wrapper.Create;
end;
function _tagNMTVGETINFOTIP_ : IDispatch;
begin
  result := __tagNMTVGETINFOTIP__Wrapper.Create;
end;
function _tagNMTVGETINFOTIPA_ : IDispatch;
begin
  result := __tagNMTVGETINFOTIPA__Wrapper.Create;
end;
function _tagNMTVGETINFOTIPW_ : IDispatch;
begin
  result := __tagNMTVGETINFOTIPW__Wrapper.Create;
end;
function _tagREBARBANDINFO_ : IDispatch;
begin
  result := __tagREBARBANDINFO__Wrapper.Create;
end;
function _tagREBARBANDINFOA_ : IDispatch;
begin
  result := __tagREBARBANDINFOA__Wrapper.Create;
end;
function _tagREBARBANDINFOW_ : IDispatch;
begin
  result := __tagREBARBANDINFOW__Wrapper.Create;
end;
function _tagREBARINFO_ : IDispatch;
begin
  result := __tagREBARINFO__Wrapper.Create;
end;
function _tagTBADDBITMAP_ : IDispatch;
begin
  result := __tagTBADDBITMAP__Wrapper.Create;
end;
function _tagTBSAVEPARAMS_ : IDispatch;
begin
  result := __tagTBSAVEPARAMS__Wrapper.Create;
end;
function _tagTBSAVEPARAMSA_ : IDispatch;
begin
  result := __tagTBSAVEPARAMSA__Wrapper.Create;
end;
function _tagTBSAVEPARAMSW_ : IDispatch;
begin
  result := __tagTBSAVEPARAMSW__Wrapper.Create;
end;
function _tagTCHITTESTINFO_ : IDispatch;
begin
  result := __tagTCHITTESTINFO__Wrapper.Create;
end;
function _tagTCITEM_ : IDispatch;
begin
  result := __tagTCITEM__Wrapper.Create;
end;
function _tagTCITEMA_ : IDispatch;
begin
  result := __tagTCITEMA__Wrapper.Create;
end;
function _tagTCITEMHEADER_ : IDispatch;
begin
  result := __tagTCITEMHEADER__Wrapper.Create;
end;
function _tagTCITEMHEADERA_ : IDispatch;
begin
  result := __tagTCITEMHEADERA__Wrapper.Create;
end;
function _tagTCITEMHEADERW_ : IDispatch;
begin
  result := __tagTCITEMHEADERW__Wrapper.Create;
end;
function _tagTCITEMW_ : IDispatch;
begin
  result := __tagTCITEMW__Wrapper.Create;
end;
function _tagTCKEYDOWN_ : IDispatch;
begin
  result := __tagTCKEYDOWN__Wrapper.Create;
end;
function _tagTOOLINFO_ : IDispatch;
begin
  result := __tagTOOLINFO__Wrapper.Create;
end;
function _tagTOOLINFOA_ : IDispatch;
begin
  result := __tagTOOLINFOA__Wrapper.Create;
end;
function _tagTOOLINFOW_ : IDispatch;
begin
  result := __tagTOOLINFOW__Wrapper.Create;
end;
function _tagTOOLTIPTEXT_ : IDispatch;
begin
  result := __tagTOOLTIPTEXT__Wrapper.Create;
end;
function _tagTOOLTIPTEXTA_ : IDispatch;
begin
  result := __tagTOOLTIPTEXTA__Wrapper.Create;
end;
function _tagTOOLTIPTEXTW_ : IDispatch;
begin
  result := __tagTOOLTIPTEXTW__Wrapper.Create;
end;
function _tagTRACKMOUSEEVENT_ : IDispatch;
begin
  result := __tagTRACKMOUSEEVENT__Wrapper.Create;
end;
function _tagTVDISPINFO_ : IDispatch;
begin
  result := __tagTVDISPINFO__Wrapper.Create;
end;
function _tagTVDISPINFOA_ : IDispatch;
begin
  result := __tagTVDISPINFOA__Wrapper.Create;
end;
function _tagTVDISPINFOW_ : IDispatch;
begin
  result := __tagTVDISPINFOW__Wrapper.Create;
end;
function _tagTVHITTESTINFO_ : IDispatch;
begin
  result := __tagTVHITTESTINFO__Wrapper.Create;
end;
function _tagTVINSERTSTRUCT_ : IDispatch;
begin
  result := __tagTVINSERTSTRUCT__Wrapper.Create;
end;
function _tagTVINSERTSTRUCTA_ : IDispatch;
begin
  result := __tagTVINSERTSTRUCTA__Wrapper.Create;
end;
function _tagTVINSERTSTRUCTW_ : IDispatch;
begin
  result := __tagTVINSERTSTRUCTW__Wrapper.Create;
end;
function _tagTVITEM_ : IDispatch;
begin
  result := __tagTVITEM__Wrapper.Create;
end;
function _tagTVITEMA_ : IDispatch;
begin
  result := __tagTVITEMA__Wrapper.Create;
end;
function _tagTVITEMEX_ : IDispatch;
begin
  result := __tagTVITEMEX__Wrapper.Create;
end;
function _tagTVITEMEXA_ : IDispatch;
begin
  result := __tagTVITEMEXA__Wrapper.Create;
end;
function _tagTVITEMEXW_ : IDispatch;
begin
  result := __tagTVITEMEXW__Wrapper.Create;
end;
function _tagTVITEMW_ : IDispatch;
begin
  result := __tagTVITEMW__Wrapper.Create;
end;
function _tagTVKEYDOWN_ : IDispatch;
begin
  result := __tagTVKEYDOWN__Wrapper.Create;
end;
function _tagTVSORTCB_ : IDispatch;
begin
  result := __tagTVSORTCB__Wrapper.Create;
end;
function _TBADDBITMAP_ : IDispatch;
begin
  result := __TBADDBITMAP__Wrapper.Create;
end;
function _TBBUTTONINFO_ : IDispatch;
begin
  result := __TBBUTTONINFO__Wrapper.Create;
end;
function _TBBUTTONINFOA_ : IDispatch;
begin
  result := __TBBUTTONINFOA__Wrapper.Create;
end;
function _TBBUTTONINFOW_ : IDispatch;
begin
  result := __TBBUTTONINFOW__Wrapper.Create;
end;
function _TBINSERTMARK_ : IDispatch;
begin
  result := __TBINSERTMARK__Wrapper.Create;
end;
function _TBREPLACEBITMAP_ : IDispatch;
begin
  result := __TBREPLACEBITMAP__Wrapper.Create;
end;
function _TBSAVEPARAMS_ : IDispatch;
begin
  result := __TBSAVEPARAMS__Wrapper.Create;
end;
function _TBSAVEPARAMSA_ : IDispatch;
begin
  result := __TBSAVEPARAMSA__Wrapper.Create;
end;
function _TBSAVEPARAMSW_ : IDispatch;
begin
  result := __TBSAVEPARAMSW__Wrapper.Create;
end;
function _TC_HITTESTINFO_ : IDispatch;
begin
  result := __TC_HITTESTINFO__Wrapper.Create;
end;
function _TC_ITEM_ : IDispatch;
begin
  result := __TC_ITEM__Wrapper.Create;
end;
function _TC_ITEMA_ : IDispatch;
begin
  result := __TC_ITEMA__Wrapper.Create;
end;
function _TC_ITEMHEADER_ : IDispatch;
begin
  result := __TC_ITEMHEADER__Wrapper.Create;
end;
function _TC_ITEMHEADERA_ : IDispatch;
begin
  result := __TC_ITEMHEADERA__Wrapper.Create;
end;
function _TC_ITEMHEADERW_ : IDispatch;
begin
  result := __TC_ITEMHEADERW__Wrapper.Create;
end;
function _TC_ITEMW_ : IDispatch;
begin
  result := __TC_ITEMW__Wrapper.Create;
end;
function _TC_KEYDOWN_ : IDispatch;
begin
  result := __TC_KEYDOWN__Wrapper.Create;
end;
function _TColorMap_ : IDispatch;
begin
  result := __TColorMap__Wrapper.Create;
end;
function _TColorScheme_ : IDispatch;
begin
  result := __TColorScheme__Wrapper.Create;
end;
function _TComboBoxExItem_ : IDispatch;
begin
  result := __TComboBoxExItem__Wrapper.Create;
end;
function _TComboBoxExItemA_ : IDispatch;
begin
  result := __TComboBoxExItemA__Wrapper.Create;
end;
function _TComboBoxExItemW_ : IDispatch;
begin
  result := __TComboBoxExItemW__Wrapper.Create;
end;
function _TDragListInfo_ : IDispatch;
begin
  result := __TDragListInfo__Wrapper.Create;
end;
function _THDHitTestInfo_ : IDispatch;
begin
  result := __THDHitTestInfo__Wrapper.Create;
end;
function _THDItem_ : IDispatch;
begin
  result := __THDItem__Wrapper.Create;
end;
function _THDItemA_ : IDispatch;
begin
  result := __THDItemA__Wrapper.Create;
end;
function _THDItemW_ : IDispatch;
begin
  result := __THDItemW__Wrapper.Create;
end;
function _THDLayout_ : IDispatch;
begin
  result := __THDLayout__Wrapper.Create;
end;
function _THDNotify_ : IDispatch;
begin
  result := __THDNotify__Wrapper.Create;
end;
function _THDNotifyA_ : IDispatch;
begin
  result := __THDNotifyA__Wrapper.Create;
end;
function _THDNotifyW_ : IDispatch;
begin
  result := __THDNotifyW__Wrapper.Create;
end;
function _TImageInfo_ : IDispatch;
begin
  result := __TImageInfo__Wrapper.Create;
end;
function _TImageListDrawParams_ : IDispatch;
begin
  result := __TImageListDrawParams__Wrapper.Create;
end;
function _TInitCommonControlsEx_ : IDispatch;
begin
  result := __TInitCommonControlsEx__Wrapper.Create;
end;
function _TLVBKImage_ : IDispatch;
begin
  result := __TLVBKImage__Wrapper.Create;
end;
function _TLVBKImageA_ : IDispatch;
begin
  result := __TLVBKImageA__Wrapper.Create;
end;
function _TLVBKImageW_ : IDispatch;
begin
  result := __TLVBKImageW__Wrapper.Create;
end;
function _TLVColumn_ : IDispatch;
begin
  result := __TLVColumn__Wrapper.Create;
end;
function _TLVColumnA_ : IDispatch;
begin
  result := __TLVColumnA__Wrapper.Create;
end;
function _TLVColumnW_ : IDispatch;
begin
  result := __TLVColumnW__Wrapper.Create;
end;
function _TLVDispInfo_ : IDispatch;
begin
  result := __TLVDispInfo__Wrapper.Create;
end;
function _TLVDispInfoA_ : IDispatch;
begin
  result := __TLVDispInfoA__Wrapper.Create;
end;
function _TLVDispInfoW_ : IDispatch;
begin
  result := __TLVDispInfoW__Wrapper.Create;
end;
function _TLVFindInfo_ : IDispatch;
begin
  result := __TLVFindInfo__Wrapper.Create;
end;
function _TLVFindInfoA_ : IDispatch;
begin
  result := __TLVFindInfoA__Wrapper.Create;
end;
function _TLVFindInfoW_ : IDispatch;
begin
  result := __TLVFindInfoW__Wrapper.Create;
end;
function _TLVHitTestInfo_ : IDispatch;
begin
  result := __TLVHitTestInfo__Wrapper.Create;
end;
function _TLVItem_ : IDispatch;
begin
  result := __TLVItem__Wrapper.Create;
end;
function _TLVItemA_ : IDispatch;
begin
  result := __TLVItemA__Wrapper.Create;
end;
function _TLVItemW_ : IDispatch;
begin
  result := __TLVItemW__Wrapper.Create;
end;
function _TLVKeyDown_ : IDispatch;
begin
  result := __TLVKeyDown__Wrapper.Create;
end;
function _TMCHitTestInfo_ : IDispatch;
begin
  result := __TMCHitTestInfo__Wrapper.Create;
end;
function _TNMCacheHint_ : IDispatch;
begin
  result := __TNMCacheHint__Wrapper.Create;
end;
function _TNMCBEDragBegin_ : IDispatch;
begin
  result := __TNMCBEDragBegin__Wrapper.Create;
end;
function _TNMCBEDragBeginA_ : IDispatch;
begin
  result := __TNMCBEDragBeginA__Wrapper.Create;
end;
function _TNMCBEDragBeginW_ : IDispatch;
begin
  result := __TNMCBEDragBeginW__Wrapper.Create;
end;
function _TNMCBEEndEdit_ : IDispatch;
begin
  result := __TNMCBEEndEdit__Wrapper.Create;
end;
function _TNMCBEEndEditA_ : IDispatch;
begin
  result := __TNMCBEEndEditA__Wrapper.Create;
end;
function _TNMCBEEndEditW_ : IDispatch;
begin
  result := __TNMCBEEndEditW__Wrapper.Create;
end;
function _TNMChar_ : IDispatch;
begin
  result := __TNMChar__Wrapper.Create;
end;
function _TNMClick_ : IDispatch;
begin
  result := __TNMClick__Wrapper.Create;
end;
function _TNMComboBoxEx_ : IDispatch;
begin
  result := __TNMComboBoxEx__Wrapper.Create;
end;
function _TNMComboBoxExA_ : IDispatch;
begin
  result := __TNMComboBoxExA__Wrapper.Create;
end;
function _TNMComboBoxExW_ : IDispatch;
begin
  result := __TNMComboBoxExW__Wrapper.Create;
end;
function _TNMCustomDraw_ : IDispatch;
begin
  result := __TNMCustomDraw__Wrapper.Create;
end;
function _TNMDateTimeChange_ : IDispatch;
begin
  result := __TNMDateTimeChange__Wrapper.Create;
end;
function _TNMDateTimeFormat_ : IDispatch;
begin
  result := __TNMDateTimeFormat__Wrapper.Create;
end;
function _TNMDateTimeFormatA_ : IDispatch;
begin
  result := __TNMDateTimeFormatA__Wrapper.Create;
end;
function _TNMDateTimeFormatQuery_ : IDispatch;
begin
  result := __TNMDateTimeFormatQuery__Wrapper.Create;
end;
function _TNMDateTimeFormatQueryA_ : IDispatch;
begin
  result := __TNMDateTimeFormatQueryA__Wrapper.Create;
end;
function _TNMDateTimeFormatQueryW_ : IDispatch;
begin
  result := __TNMDateTimeFormatQueryW__Wrapper.Create;
end;
function _TNMDateTimeFormatW_ : IDispatch;
begin
  result := __TNMDateTimeFormatW__Wrapper.Create;
end;
function _TNMDateTimeString_ : IDispatch;
begin
  result := __TNMDateTimeString__Wrapper.Create;
end;
function _TNMDateTimeStringA_ : IDispatch;
begin
  result := __TNMDateTimeStringA__Wrapper.Create;
end;
function _TNMDateTimeStringW_ : IDispatch;
begin
  result := __TNMDateTimeStringW__Wrapper.Create;
end;
function _TNMDateTimeWMKeyDown_ : IDispatch;
begin
  result := __TNMDateTimeWMKeyDown__Wrapper.Create;
end;
function _TNMDateTimeWMKeyDownA_ : IDispatch;
begin
  result := __TNMDateTimeWMKeyDownA__Wrapper.Create;
end;
function _TNMDateTimeWMKeyDownW_ : IDispatch;
begin
  result := __TNMDateTimeWMKeyDownW__Wrapper.Create;
end;
function _TNMDayState_ : IDispatch;
begin
  result := __TNMDayState__Wrapper.Create;
end;
function _TNMFinditem_ : IDispatch;
begin
  result := __TNMFinditem__Wrapper.Create;
end;
function _TNMFinditemA_ : IDispatch;
begin
  result := __TNMFinditemA__Wrapper.Create;
end;
function _TNMFinditemW_ : IDispatch;
begin
  result := __TNMFinditemW__Wrapper.Create;
end;
function _TNMHDispInfo_ : IDispatch;
begin
  result := __TNMHDispInfo__Wrapper.Create;
end;
function _TNMHDispInfoA_ : IDispatch;
begin
  result := __TNMHDispInfoA__Wrapper.Create;
end;
function _TNMHDispInfoW_ : IDispatch;
begin
  result := __TNMHDispInfoW__Wrapper.Create;
end;
function _TNMIPAddress_ : IDispatch;
begin
  result := __TNMIPAddress__Wrapper.Create;
end;
function _TNMItemActivate_ : IDispatch;
begin
  result := __TNMItemActivate__Wrapper.Create;
end;
function _TNMKey_ : IDispatch;
begin
  result := __TNMKey__Wrapper.Create;
end;
function _TNMListView_ : IDispatch;
begin
  result := __TNMListView__Wrapper.Create;
end;
function _TNMLVCacheHint_ : IDispatch;
begin
  result := __TNMLVCacheHint__Wrapper.Create;
end;
function _TNMLVCustomDraw_ : IDispatch;
begin
  result := __TNMLVCustomDraw__Wrapper.Create;
end;
function _TNMLVFinditem_ : IDispatch;
begin
  result := __TNMLVFinditem__Wrapper.Create;
end;
function _TNMLVFinditemA_ : IDispatch;
begin
  result := __TNMLVFinditemA__Wrapper.Create;
end;
function _TNMLVFinditemW_ : IDispatch;
begin
  result := __TNMLVFinditemW__Wrapper.Create;
end;
function _TNMLVGetInfoTip_ : IDispatch;
begin
  result := __TNMLVGetInfoTip__Wrapper.Create;
end;
function _TNMLVGetInfoTipA_ : IDispatch;
begin
  result := __TNMLVGetInfoTipA__Wrapper.Create;
end;
function _TNMLVGetInfoTipW_ : IDispatch;
begin
  result := __TNMLVGetInfoTipW__Wrapper.Create;
end;
function _TNMLVODStateChange_ : IDispatch;
begin
  result := __TNMLVODStateChange__Wrapper.Create;
end;
function _TNMMouse_ : IDispatch;
begin
  result := __TNMMouse__Wrapper.Create;
end;
function _TNMObjectNotify_ : IDispatch;
begin
  result := __TNMObjectNotify__Wrapper.Create;
end;
function _TNMPGCalcSize_ : IDispatch;
begin
  result := __TNMPGCalcSize__Wrapper.Create;
end;
function _TNMPGScroll_ : IDispatch;
begin
  result := __TNMPGScroll__Wrapper.Create;
end;
function _TNMRBAutoSize_ : IDispatch;
begin
  result := __TNMRBAutoSize__Wrapper.Create;
end;
function _TNMReBar_ : IDispatch;
begin
  result := __TNMReBar__Wrapper.Create;
end;
function _TNMReBarChildSize_ : IDispatch;
begin
  result := __TNMReBarChildSize__Wrapper.Create;
end;
function _TNMSelChange_ : IDispatch;
begin
  result := __TNMSelChange__Wrapper.Create;
end;
function _TNMSelect_ : IDispatch;
begin
  result := __TNMSelect__Wrapper.Create;
end;
function _TNMTBCustomDraw_ : IDispatch;
begin
  result := __TNMTBCustomDraw__Wrapper.Create;
end;
function _TNMTBDispInfo_ : IDispatch;
begin
  result := __TNMTBDispInfo__Wrapper.Create;
end;
function _TNMTBDispInfoA_ : IDispatch;
begin
  result := __TNMTBDispInfoA__Wrapper.Create;
end;
function _TNMTBDispInfoW_ : IDispatch;
begin
  result := __TNMTBDispInfoW__Wrapper.Create;
end;
function _TNMTBGetInfoTip_ : IDispatch;
begin
  result := __TNMTBGetInfoTip__Wrapper.Create;
end;
function _TNMTBGetInfoTipA_ : IDispatch;
begin
  result := __TNMTBGetInfoTipA__Wrapper.Create;
end;
function _TNMTBGetInfoTipW_ : IDispatch;
begin
  result := __TNMTBGetInfoTipW__Wrapper.Create;
end;
function _TNMTBHotItem_ : IDispatch;
begin
  result := __TNMTBHotItem__Wrapper.Create;
end;
function _TNMToolBar_ : IDispatch;
begin
  result := __TNMToolBar__Wrapper.Create;
end;
function _TNMToolBarA_ : IDispatch;
begin
  result := __TNMToolBarA__Wrapper.Create;
end;
function _TNMToolBarW_ : IDispatch;
begin
  result := __TNMToolBarW__Wrapper.Create;
end;
function _TNMTreeView_ : IDispatch;
begin
  result := __TNMTreeView__Wrapper.Create;
end;
function _TNMTreeViewA_ : IDispatch;
begin
  result := __TNMTreeViewA__Wrapper.Create;
end;
function _TNMTreeViewW_ : IDispatch;
begin
  result := __TNMTreeViewW__Wrapper.Create;
end;
function _TNMTTCustomDraw_ : IDispatch;
begin
  result := __TNMTTCustomDraw__Wrapper.Create;
end;
function _TNMTTDispInfo_ : IDispatch;
begin
  result := __TNMTTDispInfo__Wrapper.Create;
end;
function _TNMTTDispInfoA_ : IDispatch;
begin
  result := __TNMTTDispInfoA__Wrapper.Create;
end;
function _TNMTTDispInfoW_ : IDispatch;
begin
  result := __TNMTTDispInfoW__Wrapper.Create;
end;
function _TNMTVCustomDraw_ : IDispatch;
begin
  result := __TNMTVCustomDraw__Wrapper.Create;
end;
function _TNMTVGetInfoTip_ : IDispatch;
begin
  result := __TNMTVGetInfoTip__Wrapper.Create;
end;
function _TNMTVGetInfoTipA_ : IDispatch;
begin
  result := __TNMTVGetInfoTipA__Wrapper.Create;
end;
function _TNMTVGetInfoTipW_ : IDispatch;
begin
  result := __TNMTVGetInfoTipW__Wrapper.Create;
end;
function _TNMUpDown_ : IDispatch;
begin
  result := __TNMUpDown__Wrapper.Create;
end;
function _TOOLINFO_ : IDispatch;
begin
  result := __TOOLINFO__Wrapper.Create;
end;
function _TOOLINFOA_ : IDispatch;
begin
  result := __TOOLINFOA__Wrapper.Create;
end;
function _TOOLINFOW_ : IDispatch;
begin
  result := __TOOLINFOW__Wrapper.Create;
end;
function _TOOLTIPTEXT_ : IDispatch;
begin
  result := __TOOLTIPTEXT__Wrapper.Create;
end;
function _TOOLTIPTEXTA_ : IDispatch;
begin
  result := __TOOLTIPTEXTA__Wrapper.Create;
end;
function _TOOLTIPTEXTW_ : IDispatch;
begin
  result := __TOOLTIPTEXTW__Wrapper.Create;
end;
function _TPBRange_ : IDispatch;
begin
  result := __TPBRange__Wrapper.Create;
end;
function _TPropSheetHeader_ : IDispatch;
begin
  result := __TPropSheetHeader__Wrapper.Create;
end;
function _TPropSheetHeaderA_ : IDispatch;
begin
  result := __TPropSheetHeaderA__Wrapper.Create;
end;
function _TPropSheetHeaderW_ : IDispatch;
begin
  result := __TPropSheetHeaderW__Wrapper.Create;
end;
function _TPropSheetPage_ : IDispatch;
begin
  result := __TPropSheetPage__Wrapper.Create;
end;
function _TPropSheetPageA_ : IDispatch;
begin
  result := __TPropSheetPageA__Wrapper.Create;
end;
function _TPropSheetPageW_ : IDispatch;
begin
  result := __TPropSheetPageW__Wrapper.Create;
end;
function _TRBHitTestInfo_ : IDispatch;
begin
  result := __TRBHitTestInfo__Wrapper.Create;
end;
function _TReBarBandInfo_ : IDispatch;
begin
  result := __TReBarBandInfo__Wrapper.Create;
end;
function _TReBarBandInfoA_ : IDispatch;
begin
  result := __TReBarBandInfoA__Wrapper.Create;
end;
function _TReBarBandInfoW_ : IDispatch;
begin
  result := __TReBarBandInfoW__Wrapper.Create;
end;
function _TReBarInfo_ : IDispatch;
begin
  result := __TReBarInfo__Wrapper.Create;
end;
function _TTBAddBitmap_ : IDispatch;
begin
  result := __TTBAddBitmap__Wrapper.Create;
end;
function _TTBButton_ : IDispatch;
begin
  result := __TTBButton__Wrapper.Create;
end;
function _TTBButtonInfo_ : IDispatch;
begin
  result := __TTBButtonInfo__Wrapper.Create;
end;
function _TTBButtonInfoA_ : IDispatch;
begin
  result := __TTBButtonInfoA__Wrapper.Create;
end;
function _TTBButtonInfoW_ : IDispatch;
begin
  result := __TTBButtonInfoW__Wrapper.Create;
end;
function _TTBInsertMark_ : IDispatch;
begin
  result := __TTBInsertMark__Wrapper.Create;
end;
function _TTBReplaceBitmap_ : IDispatch;
begin
  result := __TTBReplaceBitmap__Wrapper.Create;
end;
function _TTBSaveParams_ : IDispatch;
begin
  result := __TTBSaveParams__Wrapper.Create;
end;
function _TTBSaveParamsA_ : IDispatch;
begin
  result := __TTBSaveParamsA__Wrapper.Create;
end;
function _TTBSaveParamsW_ : IDispatch;
begin
  result := __TTBSaveParamsW__Wrapper.Create;
end;
function _TTCHitTestInfo_ : IDispatch;
begin
  result := __TTCHitTestInfo__Wrapper.Create;
end;
function _TTCItem_ : IDispatch;
begin
  result := __TTCItem__Wrapper.Create;
end;
function _TTCItemA_ : IDispatch;
begin
  result := __TTCItemA__Wrapper.Create;
end;
function _TTCItemHeader_ : IDispatch;
begin
  result := __TTCItemHeader__Wrapper.Create;
end;
function _TTCItemHeaderA_ : IDispatch;
begin
  result := __TTCItemHeaderA__Wrapper.Create;
end;
function _TTCItemHeaderW_ : IDispatch;
begin
  result := __TTCItemHeaderW__Wrapper.Create;
end;
function _TTCItemW_ : IDispatch;
begin
  result := __TTCItemW__Wrapper.Create;
end;
function _TTCKeyDown_ : IDispatch;
begin
  result := __TTCKeyDown__Wrapper.Create;
end;
function _TTHITTESTINFO_ : IDispatch;
begin
  result := __TTHITTESTINFO__Wrapper.Create;
end;
function _TTHITTESTINFOA_ : IDispatch;
begin
  result := __TTHITTESTINFOA__Wrapper.Create;
end;
function _TTHITTESTINFOW_ : IDispatch;
begin
  result := __TTHITTESTINFOW__Wrapper.Create;
end;
function _TToolInfo_ : IDispatch;
begin
  result := __TToolInfo__Wrapper.Create;
end;
function _TToolInfoA_ : IDispatch;
begin
  result := __TToolInfoA__Wrapper.Create;
end;
function _TToolInfoW_ : IDispatch;
begin
  result := __TToolInfoW__Wrapper.Create;
end;
function _TToolTipText_ : IDispatch;
begin
  result := __TToolTipText__Wrapper.Create;
end;
function _TToolTipTextA_ : IDispatch;
begin
  result := __TToolTipTextA__Wrapper.Create;
end;
function _TToolTipTextW_ : IDispatch;
begin
  result := __TToolTipTextW__Wrapper.Create;
end;
function _TTrackMouseEvent_ : IDispatch;
begin
  result := __TTrackMouseEvent__Wrapper.Create;
end;
function _TTTHitTestInfo_ : IDispatch;
begin
  result := __TTTHitTestInfo__Wrapper.Create;
end;
function _TTTHitTestInfoA_ : IDispatch;
begin
  result := __TTTHitTestInfoA__Wrapper.Create;
end;
function _TTTHitTestInfoW_ : IDispatch;
begin
  result := __TTTHitTestInfoW__Wrapper.Create;
end;
function _TTVDispInfo_ : IDispatch;
begin
  result := __TTVDispInfo__Wrapper.Create;
end;
function _TTVDispInfoA_ : IDispatch;
begin
  result := __TTVDispInfoA__Wrapper.Create;
end;
function _TTVDispInfoW_ : IDispatch;
begin
  result := __TTVDispInfoW__Wrapper.Create;
end;
function _TTVHitTestInfo_ : IDispatch;
begin
  result := __TTVHitTestInfo__Wrapper.Create;
end;
function _TTVInsertStruct_ : IDispatch;
begin
  result := __TTVInsertStruct__Wrapper.Create;
end;
function _TTVInsertStructA_ : IDispatch;
begin
  result := __TTVInsertStructA__Wrapper.Create;
end;
function _TTVInsertStructW_ : IDispatch;
begin
  result := __TTVInsertStructW__Wrapper.Create;
end;
function _TTVItem_ : IDispatch;
begin
  result := __TTVItem__Wrapper.Create;
end;
function _TTVItemA_ : IDispatch;
begin
  result := __TTVItemA__Wrapper.Create;
end;
function _TTVItemEx_ : IDispatch;
begin
  result := __TTVItemEx__Wrapper.Create;
end;
function _TTVItemExA_ : IDispatch;
begin
  result := __TTVItemExA__Wrapper.Create;
end;
function _TTVItemExW_ : IDispatch;
begin
  result := __TTVItemExW__Wrapper.Create;
end;
function _TTVItemW_ : IDispatch;
begin
  result := __TTVItemW__Wrapper.Create;
end;
function _TTVKeyDown_ : IDispatch;
begin
  result := __TTVKeyDown__Wrapper.Create;
end;
function _TTVSortCB_ : IDispatch;
begin
  result := __TTVSortCB__Wrapper.Create;
end;
function _TUDAccel_ : IDispatch;
begin
  result := __TUDAccel__Wrapper.Create;
end;
function _TV_DISPINFO_ : IDispatch;
begin
  result := __TV_DISPINFO__Wrapper.Create;
end;
function _TV_DISPINFOA_ : IDispatch;
begin
  result := __TV_DISPINFOA__Wrapper.Create;
end;
function _TV_DISPINFOW_ : IDispatch;
begin
  result := __TV_DISPINFOW__Wrapper.Create;
end;
function _TV_HITTESTINFO_ : IDispatch;
begin
  result := __TV_HITTESTINFO__Wrapper.Create;
end;
function _TV_INSERTSTRUCT_ : IDispatch;
begin
  result := __TV_INSERTSTRUCT__Wrapper.Create;
end;
function _TV_INSERTSTRUCTA_ : IDispatch;
begin
  result := __TV_INSERTSTRUCTA__Wrapper.Create;
end;
function _TV_INSERTSTRUCTW_ : IDispatch;
begin
  result := __TV_INSERTSTRUCTW__Wrapper.Create;
end;
function _TV_ITEM_ : IDispatch;
begin
  result := __TV_ITEM__Wrapper.Create;
end;
function _TV_ITEMA_ : IDispatch;
begin
  result := __TV_ITEMA__Wrapper.Create;
end;
function _TV_ITEMW_ : IDispatch;
begin
  result := __TV_ITEMW__Wrapper.Create;
end;
function _TV_KEYDOWN_ : IDispatch;
begin
  result := __TV_KEYDOWN__Wrapper.Create;
end;
function _TV_SORTCB_ : IDispatch;
begin
  result := __TV_SORTCB__Wrapper.Create;
end;
function _UDACCEL_ : IDispatch;
begin
  result := __UDACCEL__Wrapper.Create;
end;
function __TPoint__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPoint__Wrapper.setX(const val : Longint);
begin
TPoint(GetRecordPtr^).X := val;
end;
function __TPoint__Wrapper.getX : Longint;
begin
result := TPoint(GetRecordPtr^).X;
end;
procedure __TPoint__Wrapper.setY(const val : Longint);
begin
TPoint(GetRecordPtr^).Y := val;
end;
function __TPoint__Wrapper.getY : Longint;
begin
result := TPoint(GetRecordPtr^).Y;
end;
function __TRect__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRect__Wrapper.setLeft(const val : Longint);
begin
TRect(GetRecordPtr^).Left := val;
end;
function __TRect__Wrapper.getLeft : Longint;
begin
result := TRect(GetRecordPtr^).Left;
end;
procedure __TRect__Wrapper.setTop(const val : Longint);
begin
TRect(GetRecordPtr^).Top := val;
end;
function __TRect__Wrapper.getTop : Longint;
begin
result := TRect(GetRecordPtr^).Top;
end;
procedure __TRect__Wrapper.setRight(const val : Longint);
begin
TRect(GetRecordPtr^).Right := val;
end;
function __TRect__Wrapper.getRight : Longint;
begin
result := TRect(GetRecordPtr^).Right;
end;
procedure __TRect__Wrapper.setBottom(const val : Longint);
begin
TRect(GetRecordPtr^).Bottom := val;
end;
function __TRect__Wrapper.getBottom : Longint;
begin
result := TRect(GetRecordPtr^).Bottom;
end;
function __TSystemTime__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSystemTime__Wrapper.setwYear(const val : Word);
begin
TSystemTime(GetRecordPtr^).wYear := val;
end;
function __TSystemTime__Wrapper.getwYear : Word;
begin
result := TSystemTime(GetRecordPtr^).wYear;
end;
procedure __TSystemTime__Wrapper.setwMonth(const val : Word);
begin
TSystemTime(GetRecordPtr^).wMonth := val;
end;
function __TSystemTime__Wrapper.getwMonth : Word;
begin
result := TSystemTime(GetRecordPtr^).wMonth;
end;
procedure __TSystemTime__Wrapper.setwDayOfWeek(const val : Word);
begin
TSystemTime(GetRecordPtr^).wDayOfWeek := val;
end;
function __TSystemTime__Wrapper.getwDayOfWeek : Word;
begin
result := TSystemTime(GetRecordPtr^).wDayOfWeek;
end;
procedure __TSystemTime__Wrapper.setwDay(const val : Word);
begin
TSystemTime(GetRecordPtr^).wDay := val;
end;
function __TSystemTime__Wrapper.getwDay : Word;
begin
result := TSystemTime(GetRecordPtr^).wDay;
end;
procedure __TSystemTime__Wrapper.setwHour(const val : Word);
begin
TSystemTime(GetRecordPtr^).wHour := val;
end;
function __TSystemTime__Wrapper.getwHour : Word;
begin
result := TSystemTime(GetRecordPtr^).wHour;
end;
procedure __TSystemTime__Wrapper.setwMinute(const val : Word);
begin
TSystemTime(GetRecordPtr^).wMinute := val;
end;
function __TSystemTime__Wrapper.getwMinute : Word;
begin
result := TSystemTime(GetRecordPtr^).wMinute;
end;
procedure __TSystemTime__Wrapper.setwSecond(const val : Word);
begin
TSystemTime(GetRecordPtr^).wSecond := val;
end;
function __TSystemTime__Wrapper.getwSecond : Word;
begin
result := TSystemTime(GetRecordPtr^).wSecond;
end;
procedure __TSystemTime__Wrapper.setwMilliseconds(const val : Word);
begin
TSystemTime(GetRecordPtr^).wMilliseconds := val;
end;
function __TSystemTime__Wrapper.getwMilliseconds : Word;
begin
result := TSystemTime(GetRecordPtr^).wMilliseconds;
end;
function __TScrollInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TScrollInfo__Wrapper.setcbSize(const val : UINT);
begin
TScrollInfo(GetRecordPtr^).cbSize := val;
end;
function __TScrollInfo__Wrapper.getcbSize : UINT;
begin
result := TScrollInfo(GetRecordPtr^).cbSize;
end;
procedure __TScrollInfo__Wrapper.setfMask(const val : UINT);
begin
TScrollInfo(GetRecordPtr^).fMask := val;
end;
function __TScrollInfo__Wrapper.getfMask : UINT;
begin
result := TScrollInfo(GetRecordPtr^).fMask;
end;
procedure __TScrollInfo__Wrapper.setnMin(const val : Integer);
begin
TScrollInfo(GetRecordPtr^).nMin := val;
end;
function __TScrollInfo__Wrapper.getnMin : Integer;
begin
result := TScrollInfo(GetRecordPtr^).nMin;
end;
procedure __TScrollInfo__Wrapper.setnMax(const val : Integer);
begin
TScrollInfo(GetRecordPtr^).nMax := val;
end;
function __TScrollInfo__Wrapper.getnMax : Integer;
begin
result := TScrollInfo(GetRecordPtr^).nMax;
end;
procedure __TScrollInfo__Wrapper.setnPage(const val : UINT);
begin
TScrollInfo(GetRecordPtr^).nPage := val;
end;
function __TScrollInfo__Wrapper.getnPage : UINT;
begin
result := TScrollInfo(GetRecordPtr^).nPage;
end;
procedure __TScrollInfo__Wrapper.setnPos(const val : Integer);
begin
TScrollInfo(GetRecordPtr^).nPos := val;
end;
function __TScrollInfo__Wrapper.getnPos : Integer;
begin
result := TScrollInfo(GetRecordPtr^).nPos;
end;
procedure __TScrollInfo__Wrapper.setnTrackPos(const val : Integer);
begin
TScrollInfo(GetRecordPtr^).nTrackPos := val;
end;
function __TScrollInfo__Wrapper.getnTrackPos : Integer;
begin
result := TScrollInfo(GetRecordPtr^).nTrackPos;
end;
function ____CreatePropertySheetPage__Wrapper(const p0 : IDispatch): HPropSheetPage;
var
__p0 : ^TPropSheetPage;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := CreatePropertySheetPage(__p0^);
end;

function ____CreatePropertySheetPageA__Wrapper(const p0 : IDispatch): HPropSheetPage;
var
__p0 : ^TPropSheetPageA;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := CreatePropertySheetPageA(__p0^);
end;

function ____CreatePropertySheetPageW__Wrapper(const p0 : IDispatch): HPropSheetPage;
var
__p0 : ^TPropSheetPageW;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := CreatePropertySheetPageW(__p0^);
end;

function ____PropertySheet__Wrapper(const p0 : IDispatch): Integer;
var
__p0 : ^TPropSheetHeader;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := PropertySheet(__p0^);
end;

function ____PropertySheetA__Wrapper(const p0 : IDispatch): Integer;
var
__p0 : ^TPropSheetHeaderA;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := PropertySheetA(__p0^);
end;

function ____PropertySheetW__Wrapper(const p0 : IDispatch): Integer;
var
__p0 : ^TPropSheetHeaderW;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := PropertySheetW(__p0^);
end;

function ____InitCommonControlsEx__Wrapper(const p0 : IDispatch): BOOL;
var
__p0 : ^TInitCommonControlsEx;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := InitCommonControlsEx(__p0^);
end;

function ____ImageList_GetImageInfo__Wrapper(p0 : HIMAGELIST;
p1 : Integer;
const p2 : IDispatch): BOOL;
var
__p2 : ^TImageInfo;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := ImageList_GetImageInfo(p0,p1,__p2^);
end;

function ____Header_InsertItem__Wrapper(p0 : HWnd;
p1 : Integer;
const p2 : IDispatch): Integer;
var
__p2 : ^THDItem;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := Header_InsertItem(p0,p1,__p2^);
end;

function ____Header_InsertItemA__Wrapper(p0 : HWnd;
p1 : Integer;
const p2 : IDispatch): Integer;
var
__p2 : ^THDItemA;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := Header_InsertItemA(p0,p1,__p2^);
end;

function ____Header_InsertItemW__Wrapper(p0 : HWnd;
p1 : Integer;
const p2 : IDispatch): Integer;
var
__p2 : ^THDItemW;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := Header_InsertItemW(p0,p1,__p2^);
end;

function ____Header_GetItem__Wrapper(p0 : HWnd;
p1 : Integer;
const p2 : IDispatch): BOOL;
var
__p2 : ^THDItem;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := Header_GetItem(p0,p1,__p2^);
end;

function ____Header_GetItemA__Wrapper(p0 : HWnd;
p1 : Integer;
const p2 : IDispatch): BOOL;
var
__p2 : ^THDItemA;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := Header_GetItemA(p0,p1,__p2^);
end;

function ____Header_GetItemW__Wrapper(p0 : HWnd;
p1 : Integer;
const p2 : IDispatch): BOOL;
var
__p2 : ^THDItemW;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := Header_GetItemW(p0,p1,__p2^);
end;

function ____Header_SetItem__Wrapper(p0 : HWnd;
p1 : Integer;
const p2 : IDispatch): BOOL;
var
__p2 : ^THDItem;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := Header_SetItem(p0,p1,__p2^);
end;

function ____Header_SetItemA__Wrapper(p0 : HWnd;
p1 : Integer;
const p2 : IDispatch): BOOL;
var
__p2 : ^THDItemA;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := Header_SetItemA(p0,p1,__p2^);
end;

function ____Header_SetItemW__Wrapper(p0 : HWnd;
p1 : Integer;
const p2 : IDispatch): BOOL;
var
__p2 : ^THDItemW;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := Header_SetItemW(p0,p1,__p2^);
end;

function ____LBItemFromPt__Wrapper(p0 : HWnd;
const p1 : IDispatch;
p2 : BOOL): Integer;
var
__p1 : ^TPoint;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := LBItemFromPt(p0,__p1^,p2);
end;

function ____ListView_GetItem__Wrapper(p0 : HWnd;
const p1 : IDispatch): BOOL;
var
__p1 : ^TLVItem;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := ListView_GetItem(p0,__p1^);
end;

function ____ListView_GetItemA__Wrapper(p0 : HWnd;
const p1 : IDispatch): BOOL;
var
__p1 : ^TLVItemA;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := ListView_GetItemA(p0,__p1^);
end;

function ____ListView_GetItemW__Wrapper(p0 : HWnd;
const p1 : IDispatch): BOOL;
var
__p1 : ^TLVItemW;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := ListView_GetItemW(p0,__p1^);
end;

function ____ListView_SetItem__Wrapper(p0 : HWnd;
const p1 : IDispatch): BOOL;
var
__p1 : ^TLVItem;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := ListView_SetItem(p0,__p1^);
end;

function ____ListView_SetItemA__Wrapper(p0 : HWnd;
const p1 : IDispatch): BOOL;
var
__p1 : ^TLVItemA;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := ListView_SetItemA(p0,__p1^);
end;

function ____ListView_SetItemW__Wrapper(p0 : HWnd;
const p1 : IDispatch): BOOL;
var
__p1 : ^TLVItemW;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := ListView_SetItemW(p0,__p1^);
end;

function ____ListView_InsertItem__Wrapper(p0 : HWnd;
const p1 : IDispatch): Integer;
var
__p1 : ^TLVItem;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := ListView_InsertItem(p0,__p1^);
end;

function ____ListView_InsertItemA__Wrapper(p0 : HWnd;
const p1 : IDispatch): Integer;
var
__p1 : ^TLVItemA;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := ListView_InsertItemA(p0,__p1^);
end;

function ____ListView_InsertItemW__Wrapper(p0 : HWnd;
const p1 : IDispatch): Integer;
var
__p1 : ^TLVItemW;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := ListView_InsertItemW(p0,__p1^);
end;

function ____ListView_FindItem__Wrapper(p0 : HWnd;
p1 : Integer;
const p2 : IDispatch): Integer;
var
__p2 : ^TLVFindInfo;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := ListView_FindItem(p0,p1,__p2^);
end;

function ____ListView_FindItemA__Wrapper(p0 : HWnd;
p1 : Integer;
const p2 : IDispatch): Integer;
var
__p2 : ^TLVFindInfoA;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := ListView_FindItemA(p0,p1,__p2^);
end;

function ____ListView_FindItemW__Wrapper(p0 : HWnd;
p1 : Integer;
const p2 : IDispatch): Integer;
var
__p2 : ^TLVFindInfoW;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := ListView_FindItemW(p0,p1,__p2^);
end;

function ____ListView_GetItemRect__Wrapper(p0 : HWnd;
p1 : Integer;
const p2 : IDispatch;
p3 : Integer): BOOL;
var
__p2 : ^TRect;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := ListView_GetItemRect(p0,p1,__p2^,p3);
end;

function ____ListView_GetItemPosition__Wrapper(p0 : HWnd;
p1 : Integer;
const p2 : IDispatch): BOOL;
var
__p2 : ^TPoint;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := ListView_GetItemPosition(p0,p1,__p2^);
end;

function ____ListView_HitTest__Wrapper(p0 : HWnd;
const p1 : IDispatch): Integer;
var
__p1 : ^TLVHitTestInfo;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := ListView_HitTest(p0,__p1^);
end;

function ____ListView_GetColumn__Wrapper(p0 : HWnd;
p1 : Integer;
const p2 : IDispatch): BOOL;
var
__p2 : ^TLVColumn;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := ListView_GetColumn(p0,p1,__p2^);
end;

function ____ListView_GetColumnA__Wrapper(p0 : HWnd;
p1 : Integer;
const p2 : IDispatch): BOOL;
var
__p2 : ^TLVColumnA;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := ListView_GetColumnA(p0,p1,__p2^);
end;

function ____ListView_GetColumnW__Wrapper(p0 : HWnd;
p1 : Integer;
const p2 : IDispatch): BOOL;
var
__p2 : ^TLVColumnW;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := ListView_GetColumnW(p0,p1,__p2^);
end;

function ____ListView_SetColumn__Wrapper(p0 : HWnd;
p1 : Integer;
const p2 : IDispatch): BOOL;
var
__p2 : ^TLVColumn;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := ListView_SetColumn(p0,p1,__p2^);
end;

function ____ListView_SetColumnA__Wrapper(p0 : HWnd;
p1 : Integer;
const p2 : IDispatch): BOOL;
var
__p2 : ^TLVColumnA;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := ListView_SetColumnA(p0,p1,__p2^);
end;

function ____ListView_SetColumnW__Wrapper(p0 : HWnd;
p1 : Integer;
const p2 : IDispatch): BOOL;
var
__p2 : ^TLVColumnW;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := ListView_SetColumnW(p0,p1,__p2^);
end;

function ____ListView_InsertColumn__Wrapper(p0 : HWnd;
p1 : Integer;
const p2 : IDispatch): Integer;
var
__p2 : ^TLVColumn;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := ListView_InsertColumn(p0,p1,__p2^);
end;

function ____ListView_InsertColumnA__Wrapper(p0 : HWnd;
p1 : Integer;
const p2 : IDispatch): Integer;
var
__p2 : ^TLVColumnA;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := ListView_InsertColumnA(p0,p1,__p2^);
end;

function ____ListView_InsertColumnW__Wrapper(p0 : HWnd;
p1 : Integer;
const p2 : IDispatch): Integer;
var
__p2 : ^TLVColumnW;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := ListView_InsertColumnW(p0,p1,__p2^);
end;

function ____ListView_CreateDragImage__Wrapper(p0 : HWnd;
p1 : Integer;
const p2 : IDispatch): HIMAGELIST;
var
__p2 : ^TPoint;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := ListView_CreateDragImage(p0,p1,__p2^);
end;

function ____ListView_GetViewRect__Wrapper(p0 : HWnd;
const p1 : IDispatch): BOOL;
var
__p1 : ^TRect;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := ListView_GetViewRect(p0,__p1^);
end;

function ____ListView_GetOrigin__Wrapper(p0 : HWnd;
const p1 : IDispatch): BOOL;
var
__p1 : ^TPoint;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := ListView_GetOrigin(p0,__p1^);
end;

function ____TreeView_GetItem__Wrapper(p0 : HWnd;
const p1 : IDispatch): BOOL;
var
__p1 : ^TTVItem;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := TreeView_GetItem(p0,__p1^);
end;

function ____TreeView_GetItemA__Wrapper(p0 : HWnd;
const p1 : IDispatch): BOOL;
var
__p1 : ^TTVItemA;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := TreeView_GetItemA(p0,__p1^);
end;

function ____TreeView_GetItemW__Wrapper(p0 : HWnd;
const p1 : IDispatch): BOOL;
var
__p1 : ^TTVItemW;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := TreeView_GetItemW(p0,__p1^);
end;

function ____TreeView_SetItem__Wrapper(p0 : HWnd;
const p1 : IDispatch): BOOL;
var
__p1 : ^TTVItem;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := TreeView_SetItem(p0,__p1^);
end;

function ____TreeView_SetItemA__Wrapper(p0 : HWnd;
const p1 : IDispatch): BOOL;
var
__p1 : ^TTVItemA;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := TreeView_SetItemA(p0,__p1^);
end;

function ____TreeView_SetItemW__Wrapper(p0 : HWnd;
const p1 : IDispatch): BOOL;
var
__p1 : ^TTVItemW;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := TreeView_SetItemW(p0,__p1^);
end;

function ____TreeView_SortChildrenCB__Wrapper(p0 : HWnd;
const p1 : IDispatch;
p2 : Integer): BOOL;
var
__p1 : ^TTVSortCB;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := TreeView_SortChildrenCB(p0,__p1^,p2);
end;

function ____TabCtrl_GetItemRect__Wrapper(p0 : HWnd;
p1 : Integer;
const p2 : IDispatch): BOOL;
var
__p2 : ^TRect;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := TabCtrl_GetItemRect(p0,p1,__p2^);
end;

function ____MonthCal_GetCurSel__Wrapper(p0 : HWnd;
const p1 : IDispatch): BOOL;
var
__p1 : ^TSystemTime;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := MonthCal_GetCurSel(p0,__p1^);
end;

function ____MonthCal_SetCurSel__Wrapper(p0 : HWnd;
const p1 : IDispatch): BOOL;
var
__p1 : ^TSystemTime;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := MonthCal_SetCurSel(p0,__p1^);
end;

function ____MonthCal_SetDayState__Wrapper(p0 : HWnd;
p1 : Integer;
const p2 : IDispatch): BOOL;
var
__p2 : ^TNMDayState;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := MonthCal_SetDayState(p0,p1,__p2^);
end;

function ____MonthCal_GetMinReqRect__Wrapper(p0 : HWnd;
const p1 : IDispatch): BOOL;
var
__p1 : ^TRect;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := MonthCal_GetMinReqRect(p0,__p1^);
end;

function ____MonthCal_SetToday__Wrapper(p0 : HWnd;
const p1 : IDispatch): BOOL;
var
__p1 : ^TSystemTime;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := MonthCal_SetToday(p0,__p1^);
end;

function ____MonthCal_GetToday__Wrapper(p0 : HWnd;
const p1 : IDispatch): BOOL;
var
__p1 : ^TSystemTime;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := MonthCal_GetToday(p0,__p1^);
end;

function ____MonthCal_HitTest__Wrapper(p0 : HWnd;
const p1 : IDispatch): DWORD;
var
__p1 : ^TMCHitTestInfo;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := MonthCal_HitTest(p0,__p1^);
end;

function ____DateTime_GetSystemTime__Wrapper(p0 : HWnd;
const p1 : IDispatch): DWORD;
var
__p1 : ^TSystemTime;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := DateTime_GetSystemTime(p0,__p1^);
end;

function ____DateTime_SetSystemTime__Wrapper(p0 : HWnd;
p1 : DWORD;
const p2 : IDispatch): BOOL;
var
__p2 : ^TSystemTime;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := DateTime_SetSystemTime(p0,p1,__p2^);
end;

function ____FlatSB_GetScrollInfo__Wrapper(p0 : HWnd;
p1 : Integer;
const p2 : IDispatch): BOOL;
var
__p2 : ^TScrollInfo;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := FlatSB_GetScrollInfo(p0,p1,__p2^);
end;

function ____FlatSB_SetScrollInfo__Wrapper(p0 : HWnd;
p1 : Integer;
const p2 : IDispatch;
p3 : BOOL): Integer;
var
__p2 : ^TScrollInfo;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := FlatSB_SetScrollInfo(p0,p1,__p2^,p3);
end;


type ___COLORMAP__Wrapper__ = class(___COLORMAP__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___COLORMAP__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_COLORMAPToVariant(var R : _COLORMAP) : OleVariant;
var
__rw : ___COLORMAP__Wrapper__;
begin
__rw := ___COLORMAP__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_COLORMAP(const V : OleVariant) : _COLORMAP;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _COLORMAP((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___HD_HITTESTINFO__Wrapper__ = class(___HD_HITTESTINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___HD_HITTESTINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_HD_HITTESTINFOToVariant(var R : _HD_HITTESTINFO) : OleVariant;
var
__rw : ___HD_HITTESTINFO__Wrapper__;
begin
__rw := ___HD_HITTESTINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_HD_HITTESTINFO(const V : OleVariant) : _HD_HITTESTINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _HD_HITTESTINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___HD_ITEM__Wrapper__ = class(___HD_ITEM__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___HD_ITEM__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_HD_ITEMToVariant(var R : _HD_ITEM) : OleVariant;
var
__rw : ___HD_ITEM__Wrapper__;
begin
__rw := ___HD_ITEM__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_HD_ITEM(const V : OleVariant) : _HD_ITEM;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _HD_ITEM((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___HD_ITEMA__Wrapper__ = class(___HD_ITEMA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___HD_ITEMA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_HD_ITEMAToVariant(var R : _HD_ITEMA) : OleVariant;
var
__rw : ___HD_ITEMA__Wrapper__;
begin
__rw := ___HD_ITEMA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_HD_ITEMA(const V : OleVariant) : _HD_ITEMA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _HD_ITEMA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___HD_ITEMW__Wrapper__ = class(___HD_ITEMW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___HD_ITEMW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_HD_ITEMWToVariant(var R : _HD_ITEMW) : OleVariant;
var
__rw : ___HD_ITEMW__Wrapper__;
begin
__rw := ___HD_ITEMW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_HD_ITEMW(const V : OleVariant) : _HD_ITEMW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _HD_ITEMW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___HD_LAYOUT__Wrapper__ = class(___HD_LAYOUT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___HD_LAYOUT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_HD_LAYOUTToVariant(var R : _HD_LAYOUT) : OleVariant;
var
__rw : ___HD_LAYOUT__Wrapper__;
begin
__rw := ___HD_LAYOUT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_HD_LAYOUT(const V : OleVariant) : _HD_LAYOUT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _HD_LAYOUT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___IMAGEINFO__Wrapper__ = class(___IMAGEINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___IMAGEINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_IMAGEINFOToVariant(var R : _IMAGEINFO) : OleVariant;
var
__rw : ___IMAGEINFO__Wrapper__;
begin
__rw := ___IMAGEINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_IMAGEINFO(const V : OleVariant) : _IMAGEINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _IMAGEINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___IMAGELISTDRAWPARAMS__Wrapper__ = class(___IMAGELISTDRAWPARAMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___IMAGELISTDRAWPARAMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_IMAGELISTDRAWPARAMSToVariant(var R : _IMAGELISTDRAWPARAMS) : OleVariant;
var
__rw : ___IMAGELISTDRAWPARAMS__Wrapper__;
begin
__rw := ___IMAGELISTDRAWPARAMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_IMAGELISTDRAWPARAMS(const V : OleVariant) : _IMAGELISTDRAWPARAMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _IMAGELISTDRAWPARAMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___LV_COLUMN__Wrapper__ = class(___LV_COLUMN__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___LV_COLUMN__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_LV_COLUMNToVariant(var R : _LV_COLUMN) : OleVariant;
var
__rw : ___LV_COLUMN__Wrapper__;
begin
__rw := ___LV_COLUMN__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_LV_COLUMN(const V : OleVariant) : _LV_COLUMN;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _LV_COLUMN((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___LV_COLUMNA__Wrapper__ = class(___LV_COLUMNA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___LV_COLUMNA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_LV_COLUMNAToVariant(var R : _LV_COLUMNA) : OleVariant;
var
__rw : ___LV_COLUMNA__Wrapper__;
begin
__rw := ___LV_COLUMNA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_LV_COLUMNA(const V : OleVariant) : _LV_COLUMNA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _LV_COLUMNA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___LV_COLUMNW__Wrapper__ = class(___LV_COLUMNW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___LV_COLUMNW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_LV_COLUMNWToVariant(var R : _LV_COLUMNW) : OleVariant;
var
__rw : ___LV_COLUMNW__Wrapper__;
begin
__rw := ___LV_COLUMNW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_LV_COLUMNW(const V : OleVariant) : _LV_COLUMNW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _LV_COLUMNW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___LV_DISPINFO__Wrapper__ = class(___LV_DISPINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___LV_DISPINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_LV_DISPINFOToVariant(var R : _LV_DISPINFO) : OleVariant;
var
__rw : ___LV_DISPINFO__Wrapper__;
begin
__rw := ___LV_DISPINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_LV_DISPINFO(const V : OleVariant) : _LV_DISPINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _LV_DISPINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___LV_DISPINFOW__Wrapper__ = class(___LV_DISPINFOW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___LV_DISPINFOW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_LV_DISPINFOWToVariant(var R : _LV_DISPINFOW) : OleVariant;
var
__rw : ___LV_DISPINFOW__Wrapper__;
begin
__rw := ___LV_DISPINFOW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_LV_DISPINFOW(const V : OleVariant) : _LV_DISPINFOW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _LV_DISPINFOW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___LV_FINDINFO__Wrapper__ = class(___LV_FINDINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___LV_FINDINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_LV_FINDINFOToVariant(var R : _LV_FINDINFO) : OleVariant;
var
__rw : ___LV_FINDINFO__Wrapper__;
begin
__rw := ___LV_FINDINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_LV_FINDINFO(const V : OleVariant) : _LV_FINDINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _LV_FINDINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___LV_FINDINFOA__Wrapper__ = class(___LV_FINDINFOA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___LV_FINDINFOA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_LV_FINDINFOAToVariant(var R : _LV_FINDINFOA) : OleVariant;
var
__rw : ___LV_FINDINFOA__Wrapper__;
begin
__rw := ___LV_FINDINFOA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_LV_FINDINFOA(const V : OleVariant) : _LV_FINDINFOA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _LV_FINDINFOA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___LV_FINDINFOW__Wrapper__ = class(___LV_FINDINFOW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___LV_FINDINFOW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_LV_FINDINFOWToVariant(var R : _LV_FINDINFOW) : OleVariant;
var
__rw : ___LV_FINDINFOW__Wrapper__;
begin
__rw := ___LV_FINDINFOW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_LV_FINDINFOW(const V : OleVariant) : _LV_FINDINFOW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _LV_FINDINFOW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___LV_HITTESTINFO__Wrapper__ = class(___LV_HITTESTINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___LV_HITTESTINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_LV_HITTESTINFOToVariant(var R : _LV_HITTESTINFO) : OleVariant;
var
__rw : ___LV_HITTESTINFO__Wrapper__;
begin
__rw := ___LV_HITTESTINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_LV_HITTESTINFO(const V : OleVariant) : _LV_HITTESTINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _LV_HITTESTINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___LV_ITEM__Wrapper__ = class(___LV_ITEM__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___LV_ITEM__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_LV_ITEMToVariant(var R : _LV_ITEM) : OleVariant;
var
__rw : ___LV_ITEM__Wrapper__;
begin
__rw := ___LV_ITEM__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_LV_ITEM(const V : OleVariant) : _LV_ITEM;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _LV_ITEM((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___LV_ITEMA__Wrapper__ = class(___LV_ITEMA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___LV_ITEMA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_LV_ITEMAToVariant(var R : _LV_ITEMA) : OleVariant;
var
__rw : ___LV_ITEMA__Wrapper__;
begin
__rw := ___LV_ITEMA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_LV_ITEMA(const V : OleVariant) : _LV_ITEMA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _LV_ITEMA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___LV_ITEMW__Wrapper__ = class(___LV_ITEMW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___LV_ITEMW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_LV_ITEMWToVariant(var R : _LV_ITEMW) : OleVariant;
var
__rw : ___LV_ITEMW__Wrapper__;
begin
__rw := ___LV_ITEMW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_LV_ITEMW(const V : OleVariant) : _LV_ITEMW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _LV_ITEMW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___LV_KEYDOWN__Wrapper__ = class(___LV_KEYDOWN__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___LV_KEYDOWN__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_LV_KEYDOWNToVariant(var R : _LV_KEYDOWN) : OleVariant;
var
__rw : ___LV_KEYDOWN__Wrapper__;
begin
__rw := ___LV_KEYDOWN__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_LV_KEYDOWN(const V : OleVariant) : _LV_KEYDOWN;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _LV_KEYDOWN((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___NM_LISTVIEW__Wrapper__ = class(___NM_LISTVIEW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___NM_LISTVIEW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_NM_LISTVIEWToVariant(var R : _NM_LISTVIEW) : OleVariant;
var
__rw : ___NM_LISTVIEW__Wrapper__;
begin
__rw := ___NM_LISTVIEW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_NM_LISTVIEW(const V : OleVariant) : _NM_LISTVIEW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _NM_LISTVIEW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___NM_TREEVIEW__Wrapper__ = class(___NM_TREEVIEW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___NM_TREEVIEW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_NM_TREEVIEWToVariant(var R : _NM_TREEVIEW) : OleVariant;
var
__rw : ___NM_TREEVIEW__Wrapper__;
begin
__rw := ___NM_TREEVIEW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_NM_TREEVIEW(const V : OleVariant) : _NM_TREEVIEW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _NM_TREEVIEW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___NM_TREEVIEWA__Wrapper__ = class(___NM_TREEVIEWA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___NM_TREEVIEWA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_NM_TREEVIEWAToVariant(var R : _NM_TREEVIEWA) : OleVariant;
var
__rw : ___NM_TREEVIEWA__Wrapper__;
begin
__rw := ___NM_TREEVIEWA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_NM_TREEVIEWA(const V : OleVariant) : _NM_TREEVIEWA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _NM_TREEVIEWA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___NM_TREEVIEWW__Wrapper__ = class(___NM_TREEVIEWW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___NM_TREEVIEWW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_NM_TREEVIEWWToVariant(var R : _NM_TREEVIEWW) : OleVariant;
var
__rw : ___NM_TREEVIEWW__Wrapper__;
begin
__rw := ___NM_TREEVIEWW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_NM_TREEVIEWW(const V : OleVariant) : _NM_TREEVIEWW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _NM_TREEVIEWW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___NM_UPDOWN__Wrapper__ = class(___NM_UPDOWN__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___NM_UPDOWN__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_NM_UPDOWNToVariant(var R : _NM_UPDOWN) : OleVariant;
var
__rw : ___NM_UPDOWN__Wrapper__;
begin
__rw := ___NM_UPDOWN__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_NM_UPDOWN(const V : OleVariant) : _NM_UPDOWN;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _NM_UPDOWN((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___NMTBCUSTOMDRAW__Wrapper__ = class(___NMTBCUSTOMDRAW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___NMTBCUSTOMDRAW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_NMTBCUSTOMDRAWToVariant(var R : _NMTBCUSTOMDRAW) : OleVariant;
var
__rw : ___NMTBCUSTOMDRAW__Wrapper__;
begin
__rw := ___NMTBCUSTOMDRAW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_NMTBCUSTOMDRAW(const V : OleVariant) : _NMTBCUSTOMDRAW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _NMTBCUSTOMDRAW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___PROPSHEETHEADER__Wrapper__ = class(___PROPSHEETHEADER__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___PROPSHEETHEADER__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_PROPSHEETHEADERToVariant(var R : _PROPSHEETHEADER) : OleVariant;
var
__rw : ___PROPSHEETHEADER__Wrapper__;
begin
__rw := ___PROPSHEETHEADER__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_PROPSHEETHEADER(const V : OleVariant) : _PROPSHEETHEADER;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _PROPSHEETHEADER((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___PROPSHEETHEADERA__Wrapper__ = class(___PROPSHEETHEADERA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___PROPSHEETHEADERA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_PROPSHEETHEADERAToVariant(var R : _PROPSHEETHEADERA) : OleVariant;
var
__rw : ___PROPSHEETHEADERA__Wrapper__;
begin
__rw := ___PROPSHEETHEADERA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_PROPSHEETHEADERA(const V : OleVariant) : _PROPSHEETHEADERA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _PROPSHEETHEADERA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___PROPSHEETHEADERW__Wrapper__ = class(___PROPSHEETHEADERW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___PROPSHEETHEADERW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_PROPSHEETHEADERWToVariant(var R : _PROPSHEETHEADERW) : OleVariant;
var
__rw : ___PROPSHEETHEADERW__Wrapper__;
begin
__rw := ___PROPSHEETHEADERW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_PROPSHEETHEADERW(const V : OleVariant) : _PROPSHEETHEADERW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _PROPSHEETHEADERW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___PROPSHEETPAGE__Wrapper__ = class(___PROPSHEETPAGE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___PROPSHEETPAGE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_PROPSHEETPAGEToVariant(var R : _PROPSHEETPAGE) : OleVariant;
var
__rw : ___PROPSHEETPAGE__Wrapper__;
begin
__rw := ___PROPSHEETPAGE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_PROPSHEETPAGE(const V : OleVariant) : _PROPSHEETPAGE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _PROPSHEETPAGE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___PROPSHEETPAGEA__Wrapper__ = class(___PROPSHEETPAGEA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___PROPSHEETPAGEA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_PROPSHEETPAGEAToVariant(var R : _PROPSHEETPAGEA) : OleVariant;
var
__rw : ___PROPSHEETPAGEA__Wrapper__;
begin
__rw := ___PROPSHEETPAGEA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_PROPSHEETPAGEA(const V : OleVariant) : _PROPSHEETPAGEA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _PROPSHEETPAGEA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___PROPSHEETPAGEW__Wrapper__ = class(___PROPSHEETPAGEW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___PROPSHEETPAGEW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_PROPSHEETPAGEWToVariant(var R : _PROPSHEETPAGEW) : OleVariant;
var
__rw : ___PROPSHEETPAGEW__Wrapper__;
begin
__rw := ___PROPSHEETPAGEW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_PROPSHEETPAGEW(const V : OleVariant) : _PROPSHEETPAGEW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _PROPSHEETPAGEW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___RB_HITTESTINFO__Wrapper__ = class(___RB_HITTESTINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___RB_HITTESTINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_RB_HITTESTINFOToVariant(var R : _RB_HITTESTINFO) : OleVariant;
var
__rw : ___RB_HITTESTINFO__Wrapper__;
begin
__rw := ___RB_HITTESTINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_RB_HITTESTINFO(const V : OleVariant) : _RB_HITTESTINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _RB_HITTESTINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___TBBUTTON__Wrapper__ = class(___TBBUTTON__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___TBBUTTON__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_TBBUTTONToVariant(var R : _TBBUTTON) : OleVariant;
var
__rw : ___TBBUTTON__Wrapper__;
begin
__rw := ___TBBUTTON__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_TBBUTTON(const V : OleVariant) : _TBBUTTON;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _TBBUTTON((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___TC_HITTESTINFO__Wrapper__ = class(___TC_HITTESTINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___TC_HITTESTINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_TC_HITTESTINFOToVariant(var R : _TC_HITTESTINFO) : OleVariant;
var
__rw : ___TC_HITTESTINFO__Wrapper__;
begin
__rw := ___TC_HITTESTINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_TC_HITTESTINFO(const V : OleVariant) : _TC_HITTESTINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _TC_HITTESTINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___TC_ITEM__Wrapper__ = class(___TC_ITEM__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___TC_ITEM__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_TC_ITEMToVariant(var R : _TC_ITEM) : OleVariant;
var
__rw : ___TC_ITEM__Wrapper__;
begin
__rw := ___TC_ITEM__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_TC_ITEM(const V : OleVariant) : _TC_ITEM;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _TC_ITEM((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___TC_ITEMA__Wrapper__ = class(___TC_ITEMA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___TC_ITEMA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_TC_ITEMAToVariant(var R : _TC_ITEMA) : OleVariant;
var
__rw : ___TC_ITEMA__Wrapper__;
begin
__rw := ___TC_ITEMA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_TC_ITEMA(const V : OleVariant) : _TC_ITEMA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _TC_ITEMA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___TC_ITEMHEADER__Wrapper__ = class(___TC_ITEMHEADER__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___TC_ITEMHEADER__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_TC_ITEMHEADERToVariant(var R : _TC_ITEMHEADER) : OleVariant;
var
__rw : ___TC_ITEMHEADER__Wrapper__;
begin
__rw := ___TC_ITEMHEADER__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_TC_ITEMHEADER(const V : OleVariant) : _TC_ITEMHEADER;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _TC_ITEMHEADER((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___TC_ITEMHEADERA__Wrapper__ = class(___TC_ITEMHEADERA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___TC_ITEMHEADERA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_TC_ITEMHEADERAToVariant(var R : _TC_ITEMHEADERA) : OleVariant;
var
__rw : ___TC_ITEMHEADERA__Wrapper__;
begin
__rw := ___TC_ITEMHEADERA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_TC_ITEMHEADERA(const V : OleVariant) : _TC_ITEMHEADERA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _TC_ITEMHEADERA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___TC_ITEMHEADERW__Wrapper__ = class(___TC_ITEMHEADERW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___TC_ITEMHEADERW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_TC_ITEMHEADERWToVariant(var R : _TC_ITEMHEADERW) : OleVariant;
var
__rw : ___TC_ITEMHEADERW__Wrapper__;
begin
__rw := ___TC_ITEMHEADERW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_TC_ITEMHEADERW(const V : OleVariant) : _TC_ITEMHEADERW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _TC_ITEMHEADERW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___TC_ITEMW__Wrapper__ = class(___TC_ITEMW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___TC_ITEMW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_TC_ITEMWToVariant(var R : _TC_ITEMW) : OleVariant;
var
__rw : ___TC_ITEMW__Wrapper__;
begin
__rw := ___TC_ITEMW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_TC_ITEMW(const V : OleVariant) : _TC_ITEMW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _TC_ITEMW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___TC_KEYDOWN__Wrapper__ = class(___TC_KEYDOWN__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___TC_KEYDOWN__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_TC_KEYDOWNToVariant(var R : _TC_KEYDOWN) : OleVariant;
var
__rw : ___TC_KEYDOWN__Wrapper__;
begin
__rw := ___TC_KEYDOWN__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_TC_KEYDOWN(const V : OleVariant) : _TC_KEYDOWN;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _TC_KEYDOWN((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___TREEITEM__Wrapper__ = class(___TREEITEM__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___TREEITEM__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_TREEITEMToVariant(var R : _TREEITEM) : OleVariant;
var
__rw : ___TREEITEM__Wrapper__;
begin
__rw := ___TREEITEM__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_TREEITEM(const V : OleVariant) : _TREEITEM;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _TREEITEM((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___TT_HITTESTINFO__Wrapper__ = class(___TT_HITTESTINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___TT_HITTESTINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_TT_HITTESTINFOToVariant(var R : _TT_HITTESTINFO) : OleVariant;
var
__rw : ___TT_HITTESTINFO__Wrapper__;
begin
__rw := ___TT_HITTESTINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_TT_HITTESTINFO(const V : OleVariant) : _TT_HITTESTINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _TT_HITTESTINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___TT_HITTESTINFOA__Wrapper__ = class(___TT_HITTESTINFOA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___TT_HITTESTINFOA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_TT_HITTESTINFOAToVariant(var R : _TT_HITTESTINFOA) : OleVariant;
var
__rw : ___TT_HITTESTINFOA__Wrapper__;
begin
__rw := ___TT_HITTESTINFOA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_TT_HITTESTINFOA(const V : OleVariant) : _TT_HITTESTINFOA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _TT_HITTESTINFOA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___TT_HITTESTINFOW__Wrapper__ = class(___TT_HITTESTINFOW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___TT_HITTESTINFOW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_TT_HITTESTINFOWToVariant(var R : _TT_HITTESTINFOW) : OleVariant;
var
__rw : ___TT_HITTESTINFOW__Wrapper__;
begin
__rw := ___TT_HITTESTINFOW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_TT_HITTESTINFOW(const V : OleVariant) : _TT_HITTESTINFOW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _TT_HITTESTINFOW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___TV_DISPINFO__Wrapper__ = class(___TV_DISPINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___TV_DISPINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_TV_DISPINFOToVariant(var R : _TV_DISPINFO) : OleVariant;
var
__rw : ___TV_DISPINFO__Wrapper__;
begin
__rw := ___TV_DISPINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_TV_DISPINFO(const V : OleVariant) : _TV_DISPINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _TV_DISPINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___TV_DISPINFOA__Wrapper__ = class(___TV_DISPINFOA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___TV_DISPINFOA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_TV_DISPINFOAToVariant(var R : _TV_DISPINFOA) : OleVariant;
var
__rw : ___TV_DISPINFOA__Wrapper__;
begin
__rw := ___TV_DISPINFOA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_TV_DISPINFOA(const V : OleVariant) : _TV_DISPINFOA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _TV_DISPINFOA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___TV_DISPINFOW__Wrapper__ = class(___TV_DISPINFOW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___TV_DISPINFOW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_TV_DISPINFOWToVariant(var R : _TV_DISPINFOW) : OleVariant;
var
__rw : ___TV_DISPINFOW__Wrapper__;
begin
__rw := ___TV_DISPINFOW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_TV_DISPINFOW(const V : OleVariant) : _TV_DISPINFOW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _TV_DISPINFOW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___TV_HITTESTINFO__Wrapper__ = class(___TV_HITTESTINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___TV_HITTESTINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_TV_HITTESTINFOToVariant(var R : _TV_HITTESTINFO) : OleVariant;
var
__rw : ___TV_HITTESTINFO__Wrapper__;
begin
__rw := ___TV_HITTESTINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_TV_HITTESTINFO(const V : OleVariant) : _TV_HITTESTINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _TV_HITTESTINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___TV_INSERTSTRUCT__Wrapper__ = class(___TV_INSERTSTRUCT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___TV_INSERTSTRUCT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_TV_INSERTSTRUCTToVariant(var R : _TV_INSERTSTRUCT) : OleVariant;
var
__rw : ___TV_INSERTSTRUCT__Wrapper__;
begin
__rw := ___TV_INSERTSTRUCT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_TV_INSERTSTRUCT(const V : OleVariant) : _TV_INSERTSTRUCT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _TV_INSERTSTRUCT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___TV_INSERTSTRUCTA__Wrapper__ = class(___TV_INSERTSTRUCTA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___TV_INSERTSTRUCTA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_TV_INSERTSTRUCTAToVariant(var R : _TV_INSERTSTRUCTA) : OleVariant;
var
__rw : ___TV_INSERTSTRUCTA__Wrapper__;
begin
__rw := ___TV_INSERTSTRUCTA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_TV_INSERTSTRUCTA(const V : OleVariant) : _TV_INSERTSTRUCTA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _TV_INSERTSTRUCTA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___TV_INSERTSTRUCTW__Wrapper__ = class(___TV_INSERTSTRUCTW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___TV_INSERTSTRUCTW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_TV_INSERTSTRUCTWToVariant(var R : _TV_INSERTSTRUCTW) : OleVariant;
var
__rw : ___TV_INSERTSTRUCTW__Wrapper__;
begin
__rw := ___TV_INSERTSTRUCTW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_TV_INSERTSTRUCTW(const V : OleVariant) : _TV_INSERTSTRUCTW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _TV_INSERTSTRUCTW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___TV_ITEM__Wrapper__ = class(___TV_ITEM__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___TV_ITEM__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_TV_ITEMToVariant(var R : _TV_ITEM) : OleVariant;
var
__rw : ___TV_ITEM__Wrapper__;
begin
__rw := ___TV_ITEM__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_TV_ITEM(const V : OleVariant) : _TV_ITEM;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _TV_ITEM((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___TV_ITEMA__Wrapper__ = class(___TV_ITEMA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___TV_ITEMA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_TV_ITEMAToVariant(var R : _TV_ITEMA) : OleVariant;
var
__rw : ___TV_ITEMA__Wrapper__;
begin
__rw := ___TV_ITEMA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_TV_ITEMA(const V : OleVariant) : _TV_ITEMA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _TV_ITEMA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___TV_ITEMW__Wrapper__ = class(___TV_ITEMW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___TV_ITEMW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_TV_ITEMWToVariant(var R : _TV_ITEMW) : OleVariant;
var
__rw : ___TV_ITEMW__Wrapper__;
begin
__rw := ___TV_ITEMW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_TV_ITEMW(const V : OleVariant) : _TV_ITEMW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _TV_ITEMW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___TV_KEYDOWN__Wrapper__ = class(___TV_KEYDOWN__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___TV_KEYDOWN__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_TV_KEYDOWNToVariant(var R : _TV_KEYDOWN) : OleVariant;
var
__rw : ___TV_KEYDOWN__Wrapper__;
begin
__rw := ___TV_KEYDOWN__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_TV_KEYDOWN(const V : OleVariant) : _TV_KEYDOWN;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _TV_KEYDOWN((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___TV_SORTCB__Wrapper__ = class(___TV_SORTCB__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___TV_SORTCB__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_TV_SORTCBToVariant(var R : _TV_SORTCB) : OleVariant;
var
__rw : ___TV_SORTCB__Wrapper__;
begin
__rw := ___TV_SORTCB__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_TV_SORTCB(const V : OleVariant) : _TV_SORTCB;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _TV_SORTCB((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___UDACCEL__Wrapper__ = class(___UDACCEL__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___UDACCEL__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_UDACCELToVariant(var R : _UDACCEL) : OleVariant;
var
__rw : ___UDACCEL__Wrapper__;
begin
__rw := ___UDACCEL__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_UDACCEL(const V : OleVariant) : _UDACCEL;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _UDACCEL((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __COLORMAP__Wrapper__ = class(__COLORMAP__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __COLORMAP__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertCOLORMAPToVariant(var R : COLORMAP) : OleVariant;
var
__rw : __COLORMAP__Wrapper__;
begin
__rw := __COLORMAP__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToCOLORMAP(const V : OleVariant) : COLORMAP;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := COLORMAP((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DRAGLISTINFO__Wrapper__ = class(__DRAGLISTINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DRAGLISTINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDRAGLISTINFOToVariant(var R : DRAGLISTINFO) : OleVariant;
var
__rw : __DRAGLISTINFO__Wrapper__;
begin
__rw := __DRAGLISTINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDRAGLISTINFO(const V : OleVariant) : DRAGLISTINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DRAGLISTINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __HD_HITTESTINFO__Wrapper__ = class(__HD_HITTESTINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __HD_HITTESTINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertHD_HITTESTINFOToVariant(var R : HD_HITTESTINFO) : OleVariant;
var
__rw : __HD_HITTESTINFO__Wrapper__;
begin
__rw := __HD_HITTESTINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToHD_HITTESTINFO(const V : OleVariant) : HD_HITTESTINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := HD_HITTESTINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __HD_ITEM__Wrapper__ = class(__HD_ITEM__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __HD_ITEM__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertHD_ITEMToVariant(var R : HD_ITEM) : OleVariant;
var
__rw : __HD_ITEM__Wrapper__;
begin
__rw := __HD_ITEM__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToHD_ITEM(const V : OleVariant) : HD_ITEM;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := HD_ITEM((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __HD_ITEMA__Wrapper__ = class(__HD_ITEMA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __HD_ITEMA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertHD_ITEMAToVariant(var R : HD_ITEMA) : OleVariant;
var
__rw : __HD_ITEMA__Wrapper__;
begin
__rw := __HD_ITEMA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToHD_ITEMA(const V : OleVariant) : HD_ITEMA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := HD_ITEMA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __HD_ITEMW__Wrapper__ = class(__HD_ITEMW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __HD_ITEMW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertHD_ITEMWToVariant(var R : HD_ITEMW) : OleVariant;
var
__rw : __HD_ITEMW__Wrapper__;
begin
__rw := __HD_ITEMW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToHD_ITEMW(const V : OleVariant) : HD_ITEMW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := HD_ITEMW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __HD_LAYOUT__Wrapper__ = class(__HD_LAYOUT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __HD_LAYOUT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertHD_LAYOUTToVariant(var R : HD_LAYOUT) : OleVariant;
var
__rw : __HD_LAYOUT__Wrapper__;
begin
__rw := __HD_LAYOUT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToHD_LAYOUT(const V : OleVariant) : HD_LAYOUT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := HD_LAYOUT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __HD_NOTIFY__Wrapper__ = class(__HD_NOTIFY__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __HD_NOTIFY__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertHD_NOTIFYToVariant(var R : HD_NOTIFY) : OleVariant;
var
__rw : __HD_NOTIFY__Wrapper__;
begin
__rw := __HD_NOTIFY__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToHD_NOTIFY(const V : OleVariant) : HD_NOTIFY;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := HD_NOTIFY((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __HD_NOTIFYA__Wrapper__ = class(__HD_NOTIFYA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __HD_NOTIFYA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertHD_NOTIFYAToVariant(var R : HD_NOTIFYA) : OleVariant;
var
__rw : __HD_NOTIFYA__Wrapper__;
begin
__rw := __HD_NOTIFYA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToHD_NOTIFYA(const V : OleVariant) : HD_NOTIFYA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := HD_NOTIFYA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __HD_NOTIFYW__Wrapper__ = class(__HD_NOTIFYW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __HD_NOTIFYW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertHD_NOTIFYWToVariant(var R : HD_NOTIFYW) : OleVariant;
var
__rw : __HD_NOTIFYW__Wrapper__;
begin
__rw := __HD_NOTIFYW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToHD_NOTIFYW(const V : OleVariant) : HD_NOTIFYW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := HD_NOTIFYW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __IMAGEINFO__Wrapper__ = class(__IMAGEINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __IMAGEINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertIMAGEINFOToVariant(var R : IMAGEINFO) : OleVariant;
var
__rw : __IMAGEINFO__Wrapper__;
begin
__rw := __IMAGEINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToIMAGEINFO(const V : OleVariant) : IMAGEINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := IMAGEINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __LV_COLUMN__Wrapper__ = class(__LV_COLUMN__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __LV_COLUMN__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertLV_COLUMNToVariant(var R : LV_COLUMN) : OleVariant;
var
__rw : __LV_COLUMN__Wrapper__;
begin
__rw := __LV_COLUMN__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToLV_COLUMN(const V : OleVariant) : LV_COLUMN;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := LV_COLUMN((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __LV_COLUMNA__Wrapper__ = class(__LV_COLUMNA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __LV_COLUMNA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertLV_COLUMNAToVariant(var R : LV_COLUMNA) : OleVariant;
var
__rw : __LV_COLUMNA__Wrapper__;
begin
__rw := __LV_COLUMNA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToLV_COLUMNA(const V : OleVariant) : LV_COLUMNA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := LV_COLUMNA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __LV_COLUMNW__Wrapper__ = class(__LV_COLUMNW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __LV_COLUMNW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertLV_COLUMNWToVariant(var R : LV_COLUMNW) : OleVariant;
var
__rw : __LV_COLUMNW__Wrapper__;
begin
__rw := __LV_COLUMNW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToLV_COLUMNW(const V : OleVariant) : LV_COLUMNW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := LV_COLUMNW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __LV_DISPINFO__Wrapper__ = class(__LV_DISPINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __LV_DISPINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertLV_DISPINFOToVariant(var R : LV_DISPINFO) : OleVariant;
var
__rw : __LV_DISPINFO__Wrapper__;
begin
__rw := __LV_DISPINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToLV_DISPINFO(const V : OleVariant) : LV_DISPINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := LV_DISPINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __LV_DISPINFOA__Wrapper__ = class(__LV_DISPINFOA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __LV_DISPINFOA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertLV_DISPINFOAToVariant(var R : LV_DISPINFOA) : OleVariant;
var
__rw : __LV_DISPINFOA__Wrapper__;
begin
__rw := __LV_DISPINFOA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToLV_DISPINFOA(const V : OleVariant) : LV_DISPINFOA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := LV_DISPINFOA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __LV_DISPINFOW__Wrapper__ = class(__LV_DISPINFOW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __LV_DISPINFOW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertLV_DISPINFOWToVariant(var R : LV_DISPINFOW) : OleVariant;
var
__rw : __LV_DISPINFOW__Wrapper__;
begin
__rw := __LV_DISPINFOW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToLV_DISPINFOW(const V : OleVariant) : LV_DISPINFOW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := LV_DISPINFOW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __LV_FINDINFO__Wrapper__ = class(__LV_FINDINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __LV_FINDINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertLV_FINDINFOToVariant(var R : LV_FINDINFO) : OleVariant;
var
__rw : __LV_FINDINFO__Wrapper__;
begin
__rw := __LV_FINDINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToLV_FINDINFO(const V : OleVariant) : LV_FINDINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := LV_FINDINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __LV_FINDINFOA__Wrapper__ = class(__LV_FINDINFOA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __LV_FINDINFOA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertLV_FINDINFOAToVariant(var R : LV_FINDINFOA) : OleVariant;
var
__rw : __LV_FINDINFOA__Wrapper__;
begin
__rw := __LV_FINDINFOA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToLV_FINDINFOA(const V : OleVariant) : LV_FINDINFOA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := LV_FINDINFOA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __LV_FINDINFOW__Wrapper__ = class(__LV_FINDINFOW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __LV_FINDINFOW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertLV_FINDINFOWToVariant(var R : LV_FINDINFOW) : OleVariant;
var
__rw : __LV_FINDINFOW__Wrapper__;
begin
__rw := __LV_FINDINFOW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToLV_FINDINFOW(const V : OleVariant) : LV_FINDINFOW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := LV_FINDINFOW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __LV_HITTESTINFO__Wrapper__ = class(__LV_HITTESTINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __LV_HITTESTINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertLV_HITTESTINFOToVariant(var R : LV_HITTESTINFO) : OleVariant;
var
__rw : __LV_HITTESTINFO__Wrapper__;
begin
__rw := __LV_HITTESTINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToLV_HITTESTINFO(const V : OleVariant) : LV_HITTESTINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := LV_HITTESTINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __LV_ITEM__Wrapper__ = class(__LV_ITEM__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __LV_ITEM__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertLV_ITEMToVariant(var R : LV_ITEM) : OleVariant;
var
__rw : __LV_ITEM__Wrapper__;
begin
__rw := __LV_ITEM__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToLV_ITEM(const V : OleVariant) : LV_ITEM;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := LV_ITEM((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __LV_ITEMA__Wrapper__ = class(__LV_ITEMA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __LV_ITEMA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertLV_ITEMAToVariant(var R : LV_ITEMA) : OleVariant;
var
__rw : __LV_ITEMA__Wrapper__;
begin
__rw := __LV_ITEMA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToLV_ITEMA(const V : OleVariant) : LV_ITEMA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := LV_ITEMA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __LV_ITEMW__Wrapper__ = class(__LV_ITEMW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __LV_ITEMW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertLV_ITEMWToVariant(var R : LV_ITEMW) : OleVariant;
var
__rw : __LV_ITEMW__Wrapper__;
begin
__rw := __LV_ITEMW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToLV_ITEMW(const V : OleVariant) : LV_ITEMW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := LV_ITEMW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __LV_KEYDOWN__Wrapper__ = class(__LV_KEYDOWN__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __LV_KEYDOWN__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertLV_KEYDOWNToVariant(var R : LV_KEYDOWN) : OleVariant;
var
__rw : __LV_KEYDOWN__Wrapper__;
begin
__rw := __LV_KEYDOWN__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToLV_KEYDOWN(const V : OleVariant) : LV_KEYDOWN;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := LV_KEYDOWN((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCHITTESTINFO__Wrapper__ = class(__MCHITTESTINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCHITTESTINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCHITTESTINFOToVariant(var R : MCHITTESTINFO) : OleVariant;
var
__rw : __MCHITTESTINFO__Wrapper__;
begin
__rw := __MCHITTESTINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCHITTESTINFO(const V : OleVariant) : MCHITTESTINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCHITTESTINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __NM_LISTVIEW__Wrapper__ = class(__NM_LISTVIEW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __NM_LISTVIEW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertNM_LISTVIEWToVariant(var R : NM_LISTVIEW) : OleVariant;
var
__rw : __NM_LISTVIEW__Wrapper__;
begin
__rw := __NM_LISTVIEW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToNM_LISTVIEW(const V : OleVariant) : NM_LISTVIEW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := NM_LISTVIEW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __NM_TREEVIEW__Wrapper__ = class(__NM_TREEVIEW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __NM_TREEVIEW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertNM_TREEVIEWToVariant(var R : NM_TREEVIEW) : OleVariant;
var
__rw : __NM_TREEVIEW__Wrapper__;
begin
__rw := __NM_TREEVIEW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToNM_TREEVIEW(const V : OleVariant) : NM_TREEVIEW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := NM_TREEVIEW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __NM_TREEVIEWA__Wrapper__ = class(__NM_TREEVIEWA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __NM_TREEVIEWA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertNM_TREEVIEWAToVariant(var R : NM_TREEVIEWA) : OleVariant;
var
__rw : __NM_TREEVIEWA__Wrapper__;
begin
__rw := __NM_TREEVIEWA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToNM_TREEVIEWA(const V : OleVariant) : NM_TREEVIEWA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := NM_TREEVIEWA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __NM_TREEVIEWW__Wrapper__ = class(__NM_TREEVIEWW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __NM_TREEVIEWW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertNM_TREEVIEWWToVariant(var R : NM_TREEVIEWW) : OleVariant;
var
__rw : __NM_TREEVIEWW__Wrapper__;
begin
__rw := __NM_TREEVIEWW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToNM_TREEVIEWW(const V : OleVariant) : NM_TREEVIEWW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := NM_TREEVIEWW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __NM_UPDOWN__Wrapper__ = class(__NM_UPDOWN__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __NM_UPDOWN__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertNM_UPDOWNToVariant(var R : NM_UPDOWN) : OleVariant;
var
__rw : __NM_UPDOWN__Wrapper__;
begin
__rw := __NM_UPDOWN__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToNM_UPDOWN(const V : OleVariant) : NM_UPDOWN;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := NM_UPDOWN((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __NMCBEDRAGBEGIN__Wrapper__ = class(__NMCBEDRAGBEGIN__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __NMCBEDRAGBEGIN__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertNMCBEDRAGBEGINToVariant(var R : NMCBEDRAGBEGIN) : OleVariant;
var
__rw : __NMCBEDRAGBEGIN__Wrapper__;
begin
__rw := __NMCBEDRAGBEGIN__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToNMCBEDRAGBEGIN(const V : OleVariant) : NMCBEDRAGBEGIN;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := NMCBEDRAGBEGIN((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __NMCBEDRAGBEGINA__Wrapper__ = class(__NMCBEDRAGBEGINA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __NMCBEDRAGBEGINA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertNMCBEDRAGBEGINAToVariant(var R : NMCBEDRAGBEGINA) : OleVariant;
var
__rw : __NMCBEDRAGBEGINA__Wrapper__;
begin
__rw := __NMCBEDRAGBEGINA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToNMCBEDRAGBEGINA(const V : OleVariant) : NMCBEDRAGBEGINA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := NMCBEDRAGBEGINA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __NMCBEDRAGBEGINW__Wrapper__ = class(__NMCBEDRAGBEGINW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __NMCBEDRAGBEGINW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertNMCBEDRAGBEGINWToVariant(var R : NMCBEDRAGBEGINW) : OleVariant;
var
__rw : __NMCBEDRAGBEGINW__Wrapper__;
begin
__rw := __NMCBEDRAGBEGINW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToNMCBEDRAGBEGINW(const V : OleVariant) : NMCBEDRAGBEGINW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := NMCBEDRAGBEGINW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __NMCBEENDEDIT__Wrapper__ = class(__NMCBEENDEDIT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __NMCBEENDEDIT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertNMCBEENDEDITToVariant(var R : NMCBEENDEDIT) : OleVariant;
var
__rw : __NMCBEENDEDIT__Wrapper__;
begin
__rw := __NMCBEENDEDIT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToNMCBEENDEDIT(const V : OleVariant) : NMCBEENDEDIT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := NMCBEENDEDIT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __NMCBEENDEDITA__Wrapper__ = class(__NMCBEENDEDITA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __NMCBEENDEDITA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertNMCBEENDEDITAToVariant(var R : NMCBEENDEDITA) : OleVariant;
var
__rw : __NMCBEENDEDITA__Wrapper__;
begin
__rw := __NMCBEENDEDITA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToNMCBEENDEDITA(const V : OleVariant) : NMCBEENDEDITA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := NMCBEENDEDITA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __NMCBEENDEDITW__Wrapper__ = class(__NMCBEENDEDITW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __NMCBEENDEDITW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertNMCBEENDEDITWToVariant(var R : NMCBEENDEDITW) : OleVariant;
var
__rw : __NMCBEENDEDITW__Wrapper__;
begin
__rw := __NMCBEENDEDITW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToNMCBEENDEDITW(const V : OleVariant) : NMCBEENDEDITW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := NMCBEENDEDITW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __NMCOMBOBOXEX__Wrapper__ = class(__NMCOMBOBOXEX__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __NMCOMBOBOXEX__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertNMCOMBOBOXEXToVariant(var R : NMCOMBOBOXEX) : OleVariant;
var
__rw : __NMCOMBOBOXEX__Wrapper__;
begin
__rw := __NMCOMBOBOXEX__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToNMCOMBOBOXEX(const V : OleVariant) : NMCOMBOBOXEX;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := NMCOMBOBOXEX((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __NMCOMBOBOXEXA__Wrapper__ = class(__NMCOMBOBOXEXA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __NMCOMBOBOXEXA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertNMCOMBOBOXEXAToVariant(var R : NMCOMBOBOXEXA) : OleVariant;
var
__rw : __NMCOMBOBOXEXA__Wrapper__;
begin
__rw := __NMCOMBOBOXEXA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToNMCOMBOBOXEXA(const V : OleVariant) : NMCOMBOBOXEXA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := NMCOMBOBOXEXA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __NMCOMBOBOXEXW__Wrapper__ = class(__NMCOMBOBOXEXW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __NMCOMBOBOXEXW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertNMCOMBOBOXEXWToVariant(var R : NMCOMBOBOXEXW) : OleVariant;
var
__rw : __NMCOMBOBOXEXW__Wrapper__;
begin
__rw := __NMCOMBOBOXEXW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToNMCOMBOBOXEXW(const V : OleVariant) : NMCOMBOBOXEXW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := NMCOMBOBOXEXW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __NMPGCALCSIZE__Wrapper__ = class(__NMPGCALCSIZE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __NMPGCALCSIZE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertNMPGCALCSIZEToVariant(var R : NMPGCALCSIZE) : OleVariant;
var
__rw : __NMPGCALCSIZE__Wrapper__;
begin
__rw := __NMPGCALCSIZE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToNMPGCALCSIZE(const V : OleVariant) : NMPGCALCSIZE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := NMPGCALCSIZE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __NMPGSCROLL__Wrapper__ = class(__NMPGSCROLL__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __NMPGSCROLL__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertNMPGSCROLLToVariant(var R : NMPGSCROLL) : OleVariant;
var
__rw : __NMPGSCROLL__Wrapper__;
begin
__rw := __NMPGSCROLL__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToNMPGSCROLL(const V : OleVariant) : NMPGSCROLL;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := NMPGSCROLL((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __NMSELECT__Wrapper__ = class(__NMSELECT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __NMSELECT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertNMSELECTToVariant(var R : NMSELECT) : OleVariant;
var
__rw : __NMSELECT__Wrapper__;
begin
__rw := __NMSELECT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToNMSELECT(const V : OleVariant) : NMSELECT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := NMSELECT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __NMTBDISPINFO__Wrapper__ = class(__NMTBDISPINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __NMTBDISPINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertNMTBDISPINFOToVariant(var R : NMTBDISPINFO) : OleVariant;
var
__rw : __NMTBDISPINFO__Wrapper__;
begin
__rw := __NMTBDISPINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToNMTBDISPINFO(const V : OleVariant) : NMTBDISPINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := NMTBDISPINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __NMTBDISPINFOA__Wrapper__ = class(__NMTBDISPINFOA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __NMTBDISPINFOA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertNMTBDISPINFOAToVariant(var R : NMTBDISPINFOA) : OleVariant;
var
__rw : __NMTBDISPINFOA__Wrapper__;
begin
__rw := __NMTBDISPINFOA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToNMTBDISPINFOA(const V : OleVariant) : NMTBDISPINFOA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := NMTBDISPINFOA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __NMTBDISPINFOW__Wrapper__ = class(__NMTBDISPINFOW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __NMTBDISPINFOW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertNMTBDISPINFOWToVariant(var R : NMTBDISPINFOW) : OleVariant;
var
__rw : __NMTBDISPINFOW__Wrapper__;
begin
__rw := __NMTBDISPINFOW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToNMTBDISPINFOW(const V : OleVariant) : NMTBDISPINFOW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := NMTBDISPINFOW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __PBRANGE__Wrapper__ = class(__PBRANGE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __PBRANGE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertPBRANGEToVariant(var R : PBRANGE) : OleVariant;
var
__rw : __PBRANGE__Wrapper__;
begin
__rw := __PBRANGE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToPBRANGE(const V : OleVariant) : PBRANGE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := PBRANGE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __PROPSHEETPAGE__Wrapper__ = class(__PROPSHEETPAGE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __PROPSHEETPAGE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertPROPSHEETPAGEToVariant(var R : PROPSHEETPAGE) : OleVariant;
var
__rw : __PROPSHEETPAGE__Wrapper__;
begin
__rw := __PROPSHEETPAGE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToPROPSHEETPAGE(const V : OleVariant) : PROPSHEETPAGE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := PROPSHEETPAGE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __PROPSHEETPAGEA__Wrapper__ = class(__PROPSHEETPAGEA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __PROPSHEETPAGEA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertPROPSHEETPAGEAToVariant(var R : PROPSHEETPAGEA) : OleVariant;
var
__rw : __PROPSHEETPAGEA__Wrapper__;
begin
__rw := __PROPSHEETPAGEA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToPROPSHEETPAGEA(const V : OleVariant) : PROPSHEETPAGEA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := PROPSHEETPAGEA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __PROPSHEETPAGEW__Wrapper__ = class(__PROPSHEETPAGEW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __PROPSHEETPAGEW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertPROPSHEETPAGEWToVariant(var R : PROPSHEETPAGEW) : OleVariant;
var
__rw : __PROPSHEETPAGEW__Wrapper__;
begin
__rw := __PROPSHEETPAGEW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToPROPSHEETPAGEW(const V : OleVariant) : PROPSHEETPAGEW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := PROPSHEETPAGEW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagCOLORSCHEME__Wrapper__ = class(__tagCOLORSCHEME__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagCOLORSCHEME__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagCOLORSCHEMEToVariant(var R : tagCOLORSCHEME) : OleVariant;
var
__rw : __tagCOLORSCHEME__Wrapper__;
begin
__rw := __tagCOLORSCHEME__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagCOLORSCHEME(const V : OleVariant) : tagCOLORSCHEME;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagCOLORSCHEME((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagCOMBOBOXEXITEM__Wrapper__ = class(__tagCOMBOBOXEXITEM__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagCOMBOBOXEXITEM__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagCOMBOBOXEXITEMToVariant(var R : tagCOMBOBOXEXITEM) : OleVariant;
var
__rw : __tagCOMBOBOXEXITEM__Wrapper__;
begin
__rw := __tagCOMBOBOXEXITEM__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagCOMBOBOXEXITEM(const V : OleVariant) : tagCOMBOBOXEXITEM;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagCOMBOBOXEXITEM((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagCOMBOBOXEXITEMA__Wrapper__ = class(__tagCOMBOBOXEXITEMA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagCOMBOBOXEXITEMA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagCOMBOBOXEXITEMAToVariant(var R : tagCOMBOBOXEXITEMA) : OleVariant;
var
__rw : __tagCOMBOBOXEXITEMA__Wrapper__;
begin
__rw := __tagCOMBOBOXEXITEMA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagCOMBOBOXEXITEMA(const V : OleVariant) : tagCOMBOBOXEXITEMA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagCOMBOBOXEXITEMA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagCOMBOBOXEXITEMW__Wrapper__ = class(__tagCOMBOBOXEXITEMW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagCOMBOBOXEXITEMW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagCOMBOBOXEXITEMWToVariant(var R : tagCOMBOBOXEXITEMW) : OleVariant;
var
__rw : __tagCOMBOBOXEXITEMW__Wrapper__;
begin
__rw := __tagCOMBOBOXEXITEMW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagCOMBOBOXEXITEMW(const V : OleVariant) : tagCOMBOBOXEXITEMW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagCOMBOBOXEXITEMW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagDRAGLISTINFO__Wrapper__ = class(__tagDRAGLISTINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagDRAGLISTINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagDRAGLISTINFOToVariant(var R : tagDRAGLISTINFO) : OleVariant;
var
__rw : __tagDRAGLISTINFO__Wrapper__;
begin
__rw := __tagDRAGLISTINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagDRAGLISTINFO(const V : OleVariant) : tagDRAGLISTINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagDRAGLISTINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagINITCOMMONCONTROLSEX__Wrapper__ = class(__tagINITCOMMONCONTROLSEX__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagINITCOMMONCONTROLSEX__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagINITCOMMONCONTROLSEXToVariant(var R : tagINITCOMMONCONTROLSEX) : OleVariant;
var
__rw : __tagINITCOMMONCONTROLSEX__Wrapper__;
begin
__rw := __tagINITCOMMONCONTROLSEX__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagINITCOMMONCONTROLSEX(const V : OleVariant) : tagINITCOMMONCONTROLSEX;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagINITCOMMONCONTROLSEX((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagLVBKIMAGE__Wrapper__ = class(__tagLVBKIMAGE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagLVBKIMAGE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagLVBKIMAGEToVariant(var R : tagLVBKIMAGE) : OleVariant;
var
__rw : __tagLVBKIMAGE__Wrapper__;
begin
__rw := __tagLVBKIMAGE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagLVBKIMAGE(const V : OleVariant) : tagLVBKIMAGE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagLVBKIMAGE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagLVBKIMAGEA__Wrapper__ = class(__tagLVBKIMAGEA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagLVBKIMAGEA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagLVBKIMAGEAToVariant(var R : tagLVBKIMAGEA) : OleVariant;
var
__rw : __tagLVBKIMAGEA__Wrapper__;
begin
__rw := __tagLVBKIMAGEA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagLVBKIMAGEA(const V : OleVariant) : tagLVBKIMAGEA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagLVBKIMAGEA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagLVBKIMAGEW__Wrapper__ = class(__tagLVBKIMAGEW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagLVBKIMAGEW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagLVBKIMAGEWToVariant(var R : tagLVBKIMAGEW) : OleVariant;
var
__rw : __tagLVBKIMAGEW__Wrapper__;
begin
__rw := __tagLVBKIMAGEW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagLVBKIMAGEW(const V : OleVariant) : tagLVBKIMAGEW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagLVBKIMAGEW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagLVCOLUMN__Wrapper__ = class(__tagLVCOLUMN__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagLVCOLUMN__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagLVCOLUMNToVariant(var R : tagLVCOLUMN) : OleVariant;
var
__rw : __tagLVCOLUMN__Wrapper__;
begin
__rw := __tagLVCOLUMN__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagLVCOLUMN(const V : OleVariant) : tagLVCOLUMN;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagLVCOLUMN((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagLVCOLUMNA__Wrapper__ = class(__tagLVCOLUMNA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagLVCOLUMNA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagLVCOLUMNAToVariant(var R : tagLVCOLUMNA) : OleVariant;
var
__rw : __tagLVCOLUMNA__Wrapper__;
begin
__rw := __tagLVCOLUMNA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagLVCOLUMNA(const V : OleVariant) : tagLVCOLUMNA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagLVCOLUMNA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagLVCOLUMNW__Wrapper__ = class(__tagLVCOLUMNW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagLVCOLUMNW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagLVCOLUMNWToVariant(var R : tagLVCOLUMNW) : OleVariant;
var
__rw : __tagLVCOLUMNW__Wrapper__;
begin
__rw := __tagLVCOLUMNW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagLVCOLUMNW(const V : OleVariant) : tagLVCOLUMNW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagLVCOLUMNW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagLVDISPINFO__Wrapper__ = class(__tagLVDISPINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagLVDISPINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagLVDISPINFOToVariant(var R : tagLVDISPINFO) : OleVariant;
var
__rw : __tagLVDISPINFO__Wrapper__;
begin
__rw := __tagLVDISPINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagLVDISPINFO(const V : OleVariant) : tagLVDISPINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagLVDISPINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagLVDISPINFOW__Wrapper__ = class(__tagLVDISPINFOW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagLVDISPINFOW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagLVDISPINFOWToVariant(var R : tagLVDISPINFOW) : OleVariant;
var
__rw : __tagLVDISPINFOW__Wrapper__;
begin
__rw := __tagLVDISPINFOW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagLVDISPINFOW(const V : OleVariant) : tagLVDISPINFOW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagLVDISPINFOW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagLVFINDINFO__Wrapper__ = class(__tagLVFINDINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagLVFINDINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagLVFINDINFOToVariant(var R : tagLVFINDINFO) : OleVariant;
var
__rw : __tagLVFINDINFO__Wrapper__;
begin
__rw := __tagLVFINDINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagLVFINDINFO(const V : OleVariant) : tagLVFINDINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagLVFINDINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagLVFINDINFOA__Wrapper__ = class(__tagLVFINDINFOA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagLVFINDINFOA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagLVFINDINFOAToVariant(var R : tagLVFINDINFOA) : OleVariant;
var
__rw : __tagLVFINDINFOA__Wrapper__;
begin
__rw := __tagLVFINDINFOA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagLVFINDINFOA(const V : OleVariant) : tagLVFINDINFOA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagLVFINDINFOA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagLVFINDINFOW__Wrapper__ = class(__tagLVFINDINFOW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagLVFINDINFOW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagLVFINDINFOWToVariant(var R : tagLVFINDINFOW) : OleVariant;
var
__rw : __tagLVFINDINFOW__Wrapper__;
begin
__rw := __tagLVFINDINFOW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagLVFINDINFOW(const V : OleVariant) : tagLVFINDINFOW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagLVFINDINFOW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagLVHITTESTINFO__Wrapper__ = class(__tagLVHITTESTINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagLVHITTESTINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagLVHITTESTINFOToVariant(var R : tagLVHITTESTINFO) : OleVariant;
var
__rw : __tagLVHITTESTINFO__Wrapper__;
begin
__rw := __tagLVHITTESTINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagLVHITTESTINFO(const V : OleVariant) : tagLVHITTESTINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagLVHITTESTINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagLVITEM__Wrapper__ = class(__tagLVITEM__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagLVITEM__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagLVITEMToVariant(var R : tagLVITEM) : OleVariant;
var
__rw : __tagLVITEM__Wrapper__;
begin
__rw := __tagLVITEM__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagLVITEM(const V : OleVariant) : tagLVITEM;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagLVITEM((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagLVITEMA__Wrapper__ = class(__tagLVITEMA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagLVITEMA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagLVITEMAToVariant(var R : tagLVITEMA) : OleVariant;
var
__rw : __tagLVITEMA__Wrapper__;
begin
__rw := __tagLVITEMA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagLVITEMA(const V : OleVariant) : tagLVITEMA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagLVITEMA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagLVITEMW__Wrapper__ = class(__tagLVITEMW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagLVITEMW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagLVITEMWToVariant(var R : tagLVITEMW) : OleVariant;
var
__rw : __tagLVITEMW__Wrapper__;
begin
__rw := __tagLVITEMW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagLVITEMW(const V : OleVariant) : tagLVITEMW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagLVITEMW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagLVKEYDOWN__Wrapper__ = class(__tagLVKEYDOWN__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagLVKEYDOWN__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagLVKEYDOWNToVariant(var R : tagLVKEYDOWN) : OleVariant;
var
__rw : __tagLVKEYDOWN__Wrapper__;
begin
__rw := __tagLVKEYDOWN__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagLVKEYDOWN(const V : OleVariant) : tagLVKEYDOWN;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagLVKEYDOWN((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMCHAR__Wrapper__ = class(__tagNMCHAR__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMCHAR__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMCHARToVariant(var R : tagNMCHAR) : OleVariant;
var
__rw : __tagNMCHAR__Wrapper__;
begin
__rw := __tagNMCHAR__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMCHAR(const V : OleVariant) : tagNMCHAR;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMCHAR((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMCUSTOMDRAWINFO__Wrapper__ = class(__tagNMCUSTOMDRAWINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMCUSTOMDRAWINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMCUSTOMDRAWINFOToVariant(var R : tagNMCUSTOMDRAWINFO) : OleVariant;
var
__rw : __tagNMCUSTOMDRAWINFO__Wrapper__;
begin
__rw := __tagNMCUSTOMDRAWINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMCUSTOMDRAWINFO(const V : OleVariant) : tagNMCUSTOMDRAWINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMCUSTOMDRAWINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMDATETIMECHANGE__Wrapper__ = class(__tagNMDATETIMECHANGE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMDATETIMECHANGE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMDATETIMECHANGEToVariant(var R : tagNMDATETIMECHANGE) : OleVariant;
var
__rw : __tagNMDATETIMECHANGE__Wrapper__;
begin
__rw := __tagNMDATETIMECHANGE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMDATETIMECHANGE(const V : OleVariant) : tagNMDATETIMECHANGE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMDATETIMECHANGE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMDATETIMEFORMAT__Wrapper__ = class(__tagNMDATETIMEFORMAT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMDATETIMEFORMAT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMDATETIMEFORMATToVariant(var R : tagNMDATETIMEFORMAT) : OleVariant;
var
__rw : __tagNMDATETIMEFORMAT__Wrapper__;
begin
__rw := __tagNMDATETIMEFORMAT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMDATETIMEFORMAT(const V : OleVariant) : tagNMDATETIMEFORMAT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMDATETIMEFORMAT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMDATETIMEFORMATA__Wrapper__ = class(__tagNMDATETIMEFORMATA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMDATETIMEFORMATA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMDATETIMEFORMATAToVariant(var R : tagNMDATETIMEFORMATA) : OleVariant;
var
__rw : __tagNMDATETIMEFORMATA__Wrapper__;
begin
__rw := __tagNMDATETIMEFORMATA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMDATETIMEFORMATA(const V : OleVariant) : tagNMDATETIMEFORMATA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMDATETIMEFORMATA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMDATETIMEFORMATQUERY__Wrapper__ = class(__tagNMDATETIMEFORMATQUERY__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMDATETIMEFORMATQUERY__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMDATETIMEFORMATQUERYToVariant(var R : tagNMDATETIMEFORMATQUERY) : OleVariant;
var
__rw : __tagNMDATETIMEFORMATQUERY__Wrapper__;
begin
__rw := __tagNMDATETIMEFORMATQUERY__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMDATETIMEFORMATQUERY(const V : OleVariant) : tagNMDATETIMEFORMATQUERY;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMDATETIMEFORMATQUERY((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMDATETIMEFORMATQUERYA__Wrapper__ = class(__tagNMDATETIMEFORMATQUERYA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMDATETIMEFORMATQUERYA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMDATETIMEFORMATQUERYAToVariant(var R : tagNMDATETIMEFORMATQUERYA) : OleVariant;
var
__rw : __tagNMDATETIMEFORMATQUERYA__Wrapper__;
begin
__rw := __tagNMDATETIMEFORMATQUERYA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMDATETIMEFORMATQUERYA(const V : OleVariant) : tagNMDATETIMEFORMATQUERYA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMDATETIMEFORMATQUERYA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMDATETIMEFORMATQUERYW__Wrapper__ = class(__tagNMDATETIMEFORMATQUERYW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMDATETIMEFORMATQUERYW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMDATETIMEFORMATQUERYWToVariant(var R : tagNMDATETIMEFORMATQUERYW) : OleVariant;
var
__rw : __tagNMDATETIMEFORMATQUERYW__Wrapper__;
begin
__rw := __tagNMDATETIMEFORMATQUERYW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMDATETIMEFORMATQUERYW(const V : OleVariant) : tagNMDATETIMEFORMATQUERYW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMDATETIMEFORMATQUERYW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMDATETIMEFORMATW__Wrapper__ = class(__tagNMDATETIMEFORMATW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMDATETIMEFORMATW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMDATETIMEFORMATWToVariant(var R : tagNMDATETIMEFORMATW) : OleVariant;
var
__rw : __tagNMDATETIMEFORMATW__Wrapper__;
begin
__rw := __tagNMDATETIMEFORMATW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMDATETIMEFORMATW(const V : OleVariant) : tagNMDATETIMEFORMATW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMDATETIMEFORMATW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMDATETIMESTRING__Wrapper__ = class(__tagNMDATETIMESTRING__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMDATETIMESTRING__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMDATETIMESTRINGToVariant(var R : tagNMDATETIMESTRING) : OleVariant;
var
__rw : __tagNMDATETIMESTRING__Wrapper__;
begin
__rw := __tagNMDATETIMESTRING__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMDATETIMESTRING(const V : OleVariant) : tagNMDATETIMESTRING;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMDATETIMESTRING((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMDATETIMESTRINGA__Wrapper__ = class(__tagNMDATETIMESTRINGA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMDATETIMESTRINGA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMDATETIMESTRINGAToVariant(var R : tagNMDATETIMESTRINGA) : OleVariant;
var
__rw : __tagNMDATETIMESTRINGA__Wrapper__;
begin
__rw := __tagNMDATETIMESTRINGA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMDATETIMESTRINGA(const V : OleVariant) : tagNMDATETIMESTRINGA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMDATETIMESTRINGA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMDATETIMESTRINGW__Wrapper__ = class(__tagNMDATETIMESTRINGW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMDATETIMESTRINGW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMDATETIMESTRINGWToVariant(var R : tagNMDATETIMESTRINGW) : OleVariant;
var
__rw : __tagNMDATETIMESTRINGW__Wrapper__;
begin
__rw := __tagNMDATETIMESTRINGW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMDATETIMESTRINGW(const V : OleVariant) : tagNMDATETIMESTRINGW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMDATETIMESTRINGW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMDATETIMEWMKEYDOWN__Wrapper__ = class(__tagNMDATETIMEWMKEYDOWN__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMDATETIMEWMKEYDOWN__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMDATETIMEWMKEYDOWNToVariant(var R : tagNMDATETIMEWMKEYDOWN) : OleVariant;
var
__rw : __tagNMDATETIMEWMKEYDOWN__Wrapper__;
begin
__rw := __tagNMDATETIMEWMKEYDOWN__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMDATETIMEWMKEYDOWN(const V : OleVariant) : tagNMDATETIMEWMKEYDOWN;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMDATETIMEWMKEYDOWN((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMDATETIMEWMKEYDOWNA__Wrapper__ = class(__tagNMDATETIMEWMKEYDOWNA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMDATETIMEWMKEYDOWNA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMDATETIMEWMKEYDOWNAToVariant(var R : tagNMDATETIMEWMKEYDOWNA) : OleVariant;
var
__rw : __tagNMDATETIMEWMKEYDOWNA__Wrapper__;
begin
__rw := __tagNMDATETIMEWMKEYDOWNA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMDATETIMEWMKEYDOWNA(const V : OleVariant) : tagNMDATETIMEWMKEYDOWNA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMDATETIMEWMKEYDOWNA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMDATETIMEWMKEYDOWNW__Wrapper__ = class(__tagNMDATETIMEWMKEYDOWNW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMDATETIMEWMKEYDOWNW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMDATETIMEWMKEYDOWNWToVariant(var R : tagNMDATETIMEWMKEYDOWNW) : OleVariant;
var
__rw : __tagNMDATETIMEWMKEYDOWNW__Wrapper__;
begin
__rw := __tagNMDATETIMEWMKEYDOWNW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMDATETIMEWMKEYDOWNW(const V : OleVariant) : tagNMDATETIMEWMKEYDOWNW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMDATETIMEWMKEYDOWNW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMDAYSTATE__Wrapper__ = class(__tagNMDAYSTATE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMDAYSTATE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMDAYSTATEToVariant(var R : tagNMDAYSTATE) : OleVariant;
var
__rw : __tagNMDAYSTATE__Wrapper__;
begin
__rw := __tagNMDAYSTATE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMDAYSTATE(const V : OleVariant) : tagNMDAYSTATE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMDAYSTATE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMHDDISPINFO__Wrapper__ = class(__tagNMHDDISPINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMHDDISPINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMHDDISPINFOToVariant(var R : tagNMHDDISPINFO) : OleVariant;
var
__rw : __tagNMHDDISPINFO__Wrapper__;
begin
__rw := __tagNMHDDISPINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMHDDISPINFO(const V : OleVariant) : tagNMHDDISPINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMHDDISPINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMHDDISPINFOA__Wrapper__ = class(__tagNMHDDISPINFOA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMHDDISPINFOA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMHDDISPINFOAToVariant(var R : tagNMHDDISPINFOA) : OleVariant;
var
__rw : __tagNMHDDISPINFOA__Wrapper__;
begin
__rw := __tagNMHDDISPINFOA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMHDDISPINFOA(const V : OleVariant) : tagNMHDDISPINFOA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMHDDISPINFOA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMHDDISPINFOW__Wrapper__ = class(__tagNMHDDISPINFOW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMHDDISPINFOW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMHDDISPINFOWToVariant(var R : tagNMHDDISPINFOW) : OleVariant;
var
__rw : __tagNMHDDISPINFOW__Wrapper__;
begin
__rw := __tagNMHDDISPINFOW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMHDDISPINFOW(const V : OleVariant) : tagNMHDDISPINFOW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMHDDISPINFOW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMHEADER__Wrapper__ = class(__tagNMHEADER__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMHEADER__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMHEADERToVariant(var R : tagNMHEADER) : OleVariant;
var
__rw : __tagNMHEADER__Wrapper__;
begin
__rw := __tagNMHEADER__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMHEADER(const V : OleVariant) : tagNMHEADER;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMHEADER((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMHEADERA__Wrapper__ = class(__tagNMHEADERA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMHEADERA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMHEADERAToVariant(var R : tagNMHEADERA) : OleVariant;
var
__rw : __tagNMHEADERA__Wrapper__;
begin
__rw := __tagNMHEADERA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMHEADERA(const V : OleVariant) : tagNMHEADERA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMHEADERA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMHEADERW__Wrapper__ = class(__tagNMHEADERW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMHEADERW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMHEADERWToVariant(var R : tagNMHEADERW) : OleVariant;
var
__rw : __tagNMHEADERW__Wrapper__;
begin
__rw := __tagNMHEADERW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMHEADERW(const V : OleVariant) : tagNMHEADERW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMHEADERW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMIPADDRESS__Wrapper__ = class(__tagNMIPADDRESS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMIPADDRESS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMIPADDRESSToVariant(var R : tagNMIPADDRESS) : OleVariant;
var
__rw : __tagNMIPADDRESS__Wrapper__;
begin
__rw := __tagNMIPADDRESS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMIPADDRESS(const V : OleVariant) : tagNMIPADDRESS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMIPADDRESS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMITEMACTIVATE__Wrapper__ = class(__tagNMITEMACTIVATE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMITEMACTIVATE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMITEMACTIVATEToVariant(var R : tagNMITEMACTIVATE) : OleVariant;
var
__rw : __tagNMITEMACTIVATE__Wrapper__;
begin
__rw := __tagNMITEMACTIVATE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMITEMACTIVATE(const V : OleVariant) : tagNMITEMACTIVATE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMITEMACTIVATE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMKEY__Wrapper__ = class(__tagNMKEY__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMKEY__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMKEYToVariant(var R : tagNMKEY) : OleVariant;
var
__rw : __tagNMKEY__Wrapper__;
begin
__rw := __tagNMKEY__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMKEY(const V : OleVariant) : tagNMKEY;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMKEY((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMLISTVIEW__Wrapper__ = class(__tagNMLISTVIEW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMLISTVIEW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMLISTVIEWToVariant(var R : tagNMLISTVIEW) : OleVariant;
var
__rw : __tagNMLISTVIEW__Wrapper__;
begin
__rw := __tagNMLISTVIEW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMLISTVIEW(const V : OleVariant) : tagNMLISTVIEW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMLISTVIEW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMLVCACHEHINT__Wrapper__ = class(__tagNMLVCACHEHINT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMLVCACHEHINT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMLVCACHEHINTToVariant(var R : tagNMLVCACHEHINT) : OleVariant;
var
__rw : __tagNMLVCACHEHINT__Wrapper__;
begin
__rw := __tagNMLVCACHEHINT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMLVCACHEHINT(const V : OleVariant) : tagNMLVCACHEHINT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMLVCACHEHINT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMLVCUSTOMDRAW__Wrapper__ = class(__tagNMLVCUSTOMDRAW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMLVCUSTOMDRAW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMLVCUSTOMDRAWToVariant(var R : tagNMLVCUSTOMDRAW) : OleVariant;
var
__rw : __tagNMLVCUSTOMDRAW__Wrapper__;
begin
__rw := __tagNMLVCUSTOMDRAW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMLVCUSTOMDRAW(const V : OleVariant) : tagNMLVCUSTOMDRAW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMLVCUSTOMDRAW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMLVFINDITEM__Wrapper__ = class(__tagNMLVFINDITEM__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMLVFINDITEM__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMLVFINDITEMToVariant(var R : tagNMLVFINDITEM) : OleVariant;
var
__rw : __tagNMLVFINDITEM__Wrapper__;
begin
__rw := __tagNMLVFINDITEM__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMLVFINDITEM(const V : OleVariant) : tagNMLVFINDITEM;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMLVFINDITEM((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMLVFINDITEMA__Wrapper__ = class(__tagNMLVFINDITEMA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMLVFINDITEMA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMLVFINDITEMAToVariant(var R : tagNMLVFINDITEMA) : OleVariant;
var
__rw : __tagNMLVFINDITEMA__Wrapper__;
begin
__rw := __tagNMLVFINDITEMA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMLVFINDITEMA(const V : OleVariant) : tagNMLVFINDITEMA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMLVFINDITEMA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMLVFINDITEMW__Wrapper__ = class(__tagNMLVFINDITEMW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMLVFINDITEMW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMLVFINDITEMWToVariant(var R : tagNMLVFINDITEMW) : OleVariant;
var
__rw : __tagNMLVFINDITEMW__Wrapper__;
begin
__rw := __tagNMLVFINDITEMW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMLVFINDITEMW(const V : OleVariant) : tagNMLVFINDITEMW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMLVFINDITEMW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMLVGETINFOTIP__Wrapper__ = class(__tagNMLVGETINFOTIP__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMLVGETINFOTIP__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMLVGETINFOTIPToVariant(var R : tagNMLVGETINFOTIP) : OleVariant;
var
__rw : __tagNMLVGETINFOTIP__Wrapper__;
begin
__rw := __tagNMLVGETINFOTIP__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMLVGETINFOTIP(const V : OleVariant) : tagNMLVGETINFOTIP;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMLVGETINFOTIP((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMLVGETINFOTIPA__Wrapper__ = class(__tagNMLVGETINFOTIPA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMLVGETINFOTIPA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMLVGETINFOTIPAToVariant(var R : tagNMLVGETINFOTIPA) : OleVariant;
var
__rw : __tagNMLVGETINFOTIPA__Wrapper__;
begin
__rw := __tagNMLVGETINFOTIPA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMLVGETINFOTIPA(const V : OleVariant) : tagNMLVGETINFOTIPA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMLVGETINFOTIPA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMLVGETINFOTIPW__Wrapper__ = class(__tagNMLVGETINFOTIPW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMLVGETINFOTIPW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMLVGETINFOTIPWToVariant(var R : tagNMLVGETINFOTIPW) : OleVariant;
var
__rw : __tagNMLVGETINFOTIPW__Wrapper__;
begin
__rw := __tagNMLVGETINFOTIPW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMLVGETINFOTIPW(const V : OleVariant) : tagNMLVGETINFOTIPW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMLVGETINFOTIPW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMLVODSTATECHANGE__Wrapper__ = class(__tagNMLVODSTATECHANGE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMLVODSTATECHANGE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMLVODSTATECHANGEToVariant(var R : tagNMLVODSTATECHANGE) : OleVariant;
var
__rw : __tagNMLVODSTATECHANGE__Wrapper__;
begin
__rw := __tagNMLVODSTATECHANGE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMLVODSTATECHANGE(const V : OleVariant) : tagNMLVODSTATECHANGE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMLVODSTATECHANGE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMMOUSE__Wrapper__ = class(__tagNMMOUSE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMMOUSE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMMOUSEToVariant(var R : tagNMMOUSE) : OleVariant;
var
__rw : __tagNMMOUSE__Wrapper__;
begin
__rw := __tagNMMOUSE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMMOUSE(const V : OleVariant) : tagNMMOUSE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMMOUSE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMOBJECTNOTIFY__Wrapper__ = class(__tagNMOBJECTNOTIFY__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMOBJECTNOTIFY__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMOBJECTNOTIFYToVariant(var R : tagNMOBJECTNOTIFY) : OleVariant;
var
__rw : __tagNMOBJECTNOTIFY__Wrapper__;
begin
__rw := __tagNMOBJECTNOTIFY__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMOBJECTNOTIFY(const V : OleVariant) : tagNMOBJECTNOTIFY;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMOBJECTNOTIFY((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMRBAUTOSIZE__Wrapper__ = class(__tagNMRBAUTOSIZE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMRBAUTOSIZE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMRBAUTOSIZEToVariant(var R : tagNMRBAUTOSIZE) : OleVariant;
var
__rw : __tagNMRBAUTOSIZE__Wrapper__;
begin
__rw := __tagNMRBAUTOSIZE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMRBAUTOSIZE(const V : OleVariant) : tagNMRBAUTOSIZE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMRBAUTOSIZE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMREBAR__Wrapper__ = class(__tagNMREBAR__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMREBAR__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMREBARToVariant(var R : tagNMREBAR) : OleVariant;
var
__rw : __tagNMREBAR__Wrapper__;
begin
__rw := __tagNMREBAR__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMREBAR(const V : OleVariant) : tagNMREBAR;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMREBAR((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMREBARCHILDSIZE__Wrapper__ = class(__tagNMREBARCHILDSIZE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMREBARCHILDSIZE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMREBARCHILDSIZEToVariant(var R : tagNMREBARCHILDSIZE) : OleVariant;
var
__rw : __tagNMREBARCHILDSIZE__Wrapper__;
begin
__rw := __tagNMREBARCHILDSIZE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMREBARCHILDSIZE(const V : OleVariant) : tagNMREBARCHILDSIZE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMREBARCHILDSIZE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMSELCHANGE__Wrapper__ = class(__tagNMSELCHANGE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMSELCHANGE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMSELCHANGEToVariant(var R : tagNMSELCHANGE) : OleVariant;
var
__rw : __tagNMSELCHANGE__Wrapper__;
begin
__rw := __tagNMSELCHANGE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMSELCHANGE(const V : OleVariant) : tagNMSELCHANGE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMSELCHANGE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMTBGETINFOTIP__Wrapper__ = class(__tagNMTBGETINFOTIP__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMTBGETINFOTIP__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMTBGETINFOTIPToVariant(var R : tagNMTBGETINFOTIP) : OleVariant;
var
__rw : __tagNMTBGETINFOTIP__Wrapper__;
begin
__rw := __tagNMTBGETINFOTIP__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMTBGETINFOTIP(const V : OleVariant) : tagNMTBGETINFOTIP;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMTBGETINFOTIP((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMTBGETINFOTIPA__Wrapper__ = class(__tagNMTBGETINFOTIPA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMTBGETINFOTIPA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMTBGETINFOTIPAToVariant(var R : tagNMTBGETINFOTIPA) : OleVariant;
var
__rw : __tagNMTBGETINFOTIPA__Wrapper__;
begin
__rw := __tagNMTBGETINFOTIPA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMTBGETINFOTIPA(const V : OleVariant) : tagNMTBGETINFOTIPA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMTBGETINFOTIPA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMTBGETINFOTIPW__Wrapper__ = class(__tagNMTBGETINFOTIPW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMTBGETINFOTIPW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMTBGETINFOTIPWToVariant(var R : tagNMTBGETINFOTIPW) : OleVariant;
var
__rw : __tagNMTBGETINFOTIPW__Wrapper__;
begin
__rw := __tagNMTBGETINFOTIPW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMTBGETINFOTIPW(const V : OleVariant) : tagNMTBGETINFOTIPW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMTBGETINFOTIPW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMTBHOTITEM__Wrapper__ = class(__tagNMTBHOTITEM__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMTBHOTITEM__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMTBHOTITEMToVariant(var R : tagNMTBHOTITEM) : OleVariant;
var
__rw : __tagNMTBHOTITEM__Wrapper__;
begin
__rw := __tagNMTBHOTITEM__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMTBHOTITEM(const V : OleVariant) : tagNMTBHOTITEM;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMTBHOTITEM((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMTOOLBAR__Wrapper__ = class(__tagNMTOOLBAR__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMTOOLBAR__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMTOOLBARToVariant(var R : tagNMTOOLBAR) : OleVariant;
var
__rw : __tagNMTOOLBAR__Wrapper__;
begin
__rw := __tagNMTOOLBAR__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMTOOLBAR(const V : OleVariant) : tagNMTOOLBAR;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMTOOLBAR((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMTOOLBARA__Wrapper__ = class(__tagNMTOOLBARA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMTOOLBARA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMTOOLBARAToVariant(var R : tagNMTOOLBARA) : OleVariant;
var
__rw : __tagNMTOOLBARA__Wrapper__;
begin
__rw := __tagNMTOOLBARA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMTOOLBARA(const V : OleVariant) : tagNMTOOLBARA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMTOOLBARA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMTOOLBARW__Wrapper__ = class(__tagNMTOOLBARW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMTOOLBARW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMTOOLBARWToVariant(var R : tagNMTOOLBARW) : OleVariant;
var
__rw : __tagNMTOOLBARW__Wrapper__;
begin
__rw := __tagNMTOOLBARW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMTOOLBARW(const V : OleVariant) : tagNMTOOLBARW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMTOOLBARW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMTREEVIEW__Wrapper__ = class(__tagNMTREEVIEW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMTREEVIEW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMTREEVIEWToVariant(var R : tagNMTREEVIEW) : OleVariant;
var
__rw : __tagNMTREEVIEW__Wrapper__;
begin
__rw := __tagNMTREEVIEW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMTREEVIEW(const V : OleVariant) : tagNMTREEVIEW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMTREEVIEW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMTREEVIEWA__Wrapper__ = class(__tagNMTREEVIEWA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMTREEVIEWA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMTREEVIEWAToVariant(var R : tagNMTREEVIEWA) : OleVariant;
var
__rw : __tagNMTREEVIEWA__Wrapper__;
begin
__rw := __tagNMTREEVIEWA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMTREEVIEWA(const V : OleVariant) : tagNMTREEVIEWA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMTREEVIEWA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMTREEVIEWW__Wrapper__ = class(__tagNMTREEVIEWW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMTREEVIEWW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMTREEVIEWWToVariant(var R : tagNMTREEVIEWW) : OleVariant;
var
__rw : __tagNMTREEVIEWW__Wrapper__;
begin
__rw := __tagNMTREEVIEWW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMTREEVIEWW(const V : OleVariant) : tagNMTREEVIEWW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMTREEVIEWW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMTTCUSTOMDRAW__Wrapper__ = class(__tagNMTTCUSTOMDRAW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMTTCUSTOMDRAW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMTTCUSTOMDRAWToVariant(var R : tagNMTTCUSTOMDRAW) : OleVariant;
var
__rw : __tagNMTTCUSTOMDRAW__Wrapper__;
begin
__rw := __tagNMTTCUSTOMDRAW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMTTCUSTOMDRAW(const V : OleVariant) : tagNMTTCUSTOMDRAW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMTTCUSTOMDRAW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMTTDISPINFO__Wrapper__ = class(__tagNMTTDISPINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMTTDISPINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMTTDISPINFOToVariant(var R : tagNMTTDISPINFO) : OleVariant;
var
__rw : __tagNMTTDISPINFO__Wrapper__;
begin
__rw := __tagNMTTDISPINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMTTDISPINFO(const V : OleVariant) : tagNMTTDISPINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMTTDISPINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMTTDISPINFOA__Wrapper__ = class(__tagNMTTDISPINFOA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMTTDISPINFOA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMTTDISPINFOAToVariant(var R : tagNMTTDISPINFOA) : OleVariant;
var
__rw : __tagNMTTDISPINFOA__Wrapper__;
begin
__rw := __tagNMTTDISPINFOA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMTTDISPINFOA(const V : OleVariant) : tagNMTTDISPINFOA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMTTDISPINFOA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMTTDISPINFOW__Wrapper__ = class(__tagNMTTDISPINFOW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMTTDISPINFOW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMTTDISPINFOWToVariant(var R : tagNMTTDISPINFOW) : OleVariant;
var
__rw : __tagNMTTDISPINFOW__Wrapper__;
begin
__rw := __tagNMTTDISPINFOW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMTTDISPINFOW(const V : OleVariant) : tagNMTTDISPINFOW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMTTDISPINFOW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMTVCUSTOMDRAW__Wrapper__ = class(__tagNMTVCUSTOMDRAW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMTVCUSTOMDRAW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMTVCUSTOMDRAWToVariant(var R : tagNMTVCUSTOMDRAW) : OleVariant;
var
__rw : __tagNMTVCUSTOMDRAW__Wrapper__;
begin
__rw := __tagNMTVCUSTOMDRAW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMTVCUSTOMDRAW(const V : OleVariant) : tagNMTVCUSTOMDRAW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMTVCUSTOMDRAW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMTVGETINFOTIP__Wrapper__ = class(__tagNMTVGETINFOTIP__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMTVGETINFOTIP__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMTVGETINFOTIPToVariant(var R : tagNMTVGETINFOTIP) : OleVariant;
var
__rw : __tagNMTVGETINFOTIP__Wrapper__;
begin
__rw := __tagNMTVGETINFOTIP__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMTVGETINFOTIP(const V : OleVariant) : tagNMTVGETINFOTIP;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMTVGETINFOTIP((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMTVGETINFOTIPA__Wrapper__ = class(__tagNMTVGETINFOTIPA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMTVGETINFOTIPA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMTVGETINFOTIPAToVariant(var R : tagNMTVGETINFOTIPA) : OleVariant;
var
__rw : __tagNMTVGETINFOTIPA__Wrapper__;
begin
__rw := __tagNMTVGETINFOTIPA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMTVGETINFOTIPA(const V : OleVariant) : tagNMTVGETINFOTIPA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMTVGETINFOTIPA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagNMTVGETINFOTIPW__Wrapper__ = class(__tagNMTVGETINFOTIPW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagNMTVGETINFOTIPW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagNMTVGETINFOTIPWToVariant(var R : tagNMTVGETINFOTIPW) : OleVariant;
var
__rw : __tagNMTVGETINFOTIPW__Wrapper__;
begin
__rw := __tagNMTVGETINFOTIPW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagNMTVGETINFOTIPW(const V : OleVariant) : tagNMTVGETINFOTIPW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagNMTVGETINFOTIPW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagREBARBANDINFO__Wrapper__ = class(__tagREBARBANDINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagREBARBANDINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagREBARBANDINFOToVariant(var R : tagREBARBANDINFO) : OleVariant;
var
__rw : __tagREBARBANDINFO__Wrapper__;
begin
__rw := __tagREBARBANDINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagREBARBANDINFO(const V : OleVariant) : tagREBARBANDINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagREBARBANDINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagREBARBANDINFOA__Wrapper__ = class(__tagREBARBANDINFOA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagREBARBANDINFOA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagREBARBANDINFOAToVariant(var R : tagREBARBANDINFOA) : OleVariant;
var
__rw : __tagREBARBANDINFOA__Wrapper__;
begin
__rw := __tagREBARBANDINFOA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagREBARBANDINFOA(const V : OleVariant) : tagREBARBANDINFOA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagREBARBANDINFOA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagREBARBANDINFOW__Wrapper__ = class(__tagREBARBANDINFOW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagREBARBANDINFOW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagREBARBANDINFOWToVariant(var R : tagREBARBANDINFOW) : OleVariant;
var
__rw : __tagREBARBANDINFOW__Wrapper__;
begin
__rw := __tagREBARBANDINFOW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagREBARBANDINFOW(const V : OleVariant) : tagREBARBANDINFOW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagREBARBANDINFOW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagREBARINFO__Wrapper__ = class(__tagREBARINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagREBARINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagREBARINFOToVariant(var R : tagREBARINFO) : OleVariant;
var
__rw : __tagREBARINFO__Wrapper__;
begin
__rw := __tagREBARINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagREBARINFO(const V : OleVariant) : tagREBARINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagREBARINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTBADDBITMAP__Wrapper__ = class(__tagTBADDBITMAP__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTBADDBITMAP__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTBADDBITMAPToVariant(var R : tagTBADDBITMAP) : OleVariant;
var
__rw : __tagTBADDBITMAP__Wrapper__;
begin
__rw := __tagTBADDBITMAP__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTBADDBITMAP(const V : OleVariant) : tagTBADDBITMAP;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTBADDBITMAP((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTBSAVEPARAMS__Wrapper__ = class(__tagTBSAVEPARAMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTBSAVEPARAMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTBSAVEPARAMSToVariant(var R : tagTBSAVEPARAMS) : OleVariant;
var
__rw : __tagTBSAVEPARAMS__Wrapper__;
begin
__rw := __tagTBSAVEPARAMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTBSAVEPARAMS(const V : OleVariant) : tagTBSAVEPARAMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTBSAVEPARAMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTBSAVEPARAMSA__Wrapper__ = class(__tagTBSAVEPARAMSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTBSAVEPARAMSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTBSAVEPARAMSAToVariant(var R : tagTBSAVEPARAMSA) : OleVariant;
var
__rw : __tagTBSAVEPARAMSA__Wrapper__;
begin
__rw := __tagTBSAVEPARAMSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTBSAVEPARAMSA(const V : OleVariant) : tagTBSAVEPARAMSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTBSAVEPARAMSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTBSAVEPARAMSW__Wrapper__ = class(__tagTBSAVEPARAMSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTBSAVEPARAMSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTBSAVEPARAMSWToVariant(var R : tagTBSAVEPARAMSW) : OleVariant;
var
__rw : __tagTBSAVEPARAMSW__Wrapper__;
begin
__rw := __tagTBSAVEPARAMSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTBSAVEPARAMSW(const V : OleVariant) : tagTBSAVEPARAMSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTBSAVEPARAMSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTCHITTESTINFO__Wrapper__ = class(__tagTCHITTESTINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTCHITTESTINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTCHITTESTINFOToVariant(var R : tagTCHITTESTINFO) : OleVariant;
var
__rw : __tagTCHITTESTINFO__Wrapper__;
begin
__rw := __tagTCHITTESTINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTCHITTESTINFO(const V : OleVariant) : tagTCHITTESTINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTCHITTESTINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTCITEM__Wrapper__ = class(__tagTCITEM__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTCITEM__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTCITEMToVariant(var R : tagTCITEM) : OleVariant;
var
__rw : __tagTCITEM__Wrapper__;
begin
__rw := __tagTCITEM__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTCITEM(const V : OleVariant) : tagTCITEM;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTCITEM((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTCITEMA__Wrapper__ = class(__tagTCITEMA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTCITEMA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTCITEMAToVariant(var R : tagTCITEMA) : OleVariant;
var
__rw : __tagTCITEMA__Wrapper__;
begin
__rw := __tagTCITEMA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTCITEMA(const V : OleVariant) : tagTCITEMA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTCITEMA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTCITEMHEADER__Wrapper__ = class(__tagTCITEMHEADER__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTCITEMHEADER__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTCITEMHEADERToVariant(var R : tagTCITEMHEADER) : OleVariant;
var
__rw : __tagTCITEMHEADER__Wrapper__;
begin
__rw := __tagTCITEMHEADER__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTCITEMHEADER(const V : OleVariant) : tagTCITEMHEADER;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTCITEMHEADER((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTCITEMHEADERA__Wrapper__ = class(__tagTCITEMHEADERA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTCITEMHEADERA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTCITEMHEADERAToVariant(var R : tagTCITEMHEADERA) : OleVariant;
var
__rw : __tagTCITEMHEADERA__Wrapper__;
begin
__rw := __tagTCITEMHEADERA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTCITEMHEADERA(const V : OleVariant) : tagTCITEMHEADERA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTCITEMHEADERA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTCITEMHEADERW__Wrapper__ = class(__tagTCITEMHEADERW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTCITEMHEADERW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTCITEMHEADERWToVariant(var R : tagTCITEMHEADERW) : OleVariant;
var
__rw : __tagTCITEMHEADERW__Wrapper__;
begin
__rw := __tagTCITEMHEADERW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTCITEMHEADERW(const V : OleVariant) : tagTCITEMHEADERW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTCITEMHEADERW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTCITEMW__Wrapper__ = class(__tagTCITEMW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTCITEMW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTCITEMWToVariant(var R : tagTCITEMW) : OleVariant;
var
__rw : __tagTCITEMW__Wrapper__;
begin
__rw := __tagTCITEMW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTCITEMW(const V : OleVariant) : tagTCITEMW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTCITEMW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTCKEYDOWN__Wrapper__ = class(__tagTCKEYDOWN__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTCKEYDOWN__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTCKEYDOWNToVariant(var R : tagTCKEYDOWN) : OleVariant;
var
__rw : __tagTCKEYDOWN__Wrapper__;
begin
__rw := __tagTCKEYDOWN__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTCKEYDOWN(const V : OleVariant) : tagTCKEYDOWN;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTCKEYDOWN((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTOOLINFO__Wrapper__ = class(__tagTOOLINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTOOLINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTOOLINFOToVariant(var R : tagTOOLINFO) : OleVariant;
var
__rw : __tagTOOLINFO__Wrapper__;
begin
__rw := __tagTOOLINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTOOLINFO(const V : OleVariant) : tagTOOLINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTOOLINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTOOLINFOA__Wrapper__ = class(__tagTOOLINFOA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTOOLINFOA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTOOLINFOAToVariant(var R : tagTOOLINFOA) : OleVariant;
var
__rw : __tagTOOLINFOA__Wrapper__;
begin
__rw := __tagTOOLINFOA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTOOLINFOA(const V : OleVariant) : tagTOOLINFOA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTOOLINFOA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTOOLINFOW__Wrapper__ = class(__tagTOOLINFOW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTOOLINFOW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTOOLINFOWToVariant(var R : tagTOOLINFOW) : OleVariant;
var
__rw : __tagTOOLINFOW__Wrapper__;
begin
__rw := __tagTOOLINFOW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTOOLINFOW(const V : OleVariant) : tagTOOLINFOW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTOOLINFOW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTOOLTIPTEXT__Wrapper__ = class(__tagTOOLTIPTEXT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTOOLTIPTEXT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTOOLTIPTEXTToVariant(var R : tagTOOLTIPTEXT) : OleVariant;
var
__rw : __tagTOOLTIPTEXT__Wrapper__;
begin
__rw := __tagTOOLTIPTEXT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTOOLTIPTEXT(const V : OleVariant) : tagTOOLTIPTEXT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTOOLTIPTEXT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTOOLTIPTEXTA__Wrapper__ = class(__tagTOOLTIPTEXTA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTOOLTIPTEXTA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTOOLTIPTEXTAToVariant(var R : tagTOOLTIPTEXTA) : OleVariant;
var
__rw : __tagTOOLTIPTEXTA__Wrapper__;
begin
__rw := __tagTOOLTIPTEXTA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTOOLTIPTEXTA(const V : OleVariant) : tagTOOLTIPTEXTA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTOOLTIPTEXTA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTOOLTIPTEXTW__Wrapper__ = class(__tagTOOLTIPTEXTW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTOOLTIPTEXTW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTOOLTIPTEXTWToVariant(var R : tagTOOLTIPTEXTW) : OleVariant;
var
__rw : __tagTOOLTIPTEXTW__Wrapper__;
begin
__rw := __tagTOOLTIPTEXTW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTOOLTIPTEXTW(const V : OleVariant) : tagTOOLTIPTEXTW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTOOLTIPTEXTW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTRACKMOUSEEVENT__Wrapper__ = class(__tagTRACKMOUSEEVENT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTRACKMOUSEEVENT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTRACKMOUSEEVENTToVariant(var R : tagTRACKMOUSEEVENT) : OleVariant;
var
__rw : __tagTRACKMOUSEEVENT__Wrapper__;
begin
__rw := __tagTRACKMOUSEEVENT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTRACKMOUSEEVENT(const V : OleVariant) : tagTRACKMOUSEEVENT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTRACKMOUSEEVENT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTVDISPINFO__Wrapper__ = class(__tagTVDISPINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTVDISPINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTVDISPINFOToVariant(var R : tagTVDISPINFO) : OleVariant;
var
__rw : __tagTVDISPINFO__Wrapper__;
begin
__rw := __tagTVDISPINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTVDISPINFO(const V : OleVariant) : tagTVDISPINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTVDISPINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTVDISPINFOA__Wrapper__ = class(__tagTVDISPINFOA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTVDISPINFOA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTVDISPINFOAToVariant(var R : tagTVDISPINFOA) : OleVariant;
var
__rw : __tagTVDISPINFOA__Wrapper__;
begin
__rw := __tagTVDISPINFOA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTVDISPINFOA(const V : OleVariant) : tagTVDISPINFOA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTVDISPINFOA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTVDISPINFOW__Wrapper__ = class(__tagTVDISPINFOW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTVDISPINFOW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTVDISPINFOWToVariant(var R : tagTVDISPINFOW) : OleVariant;
var
__rw : __tagTVDISPINFOW__Wrapper__;
begin
__rw := __tagTVDISPINFOW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTVDISPINFOW(const V : OleVariant) : tagTVDISPINFOW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTVDISPINFOW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTVHITTESTINFO__Wrapper__ = class(__tagTVHITTESTINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTVHITTESTINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTVHITTESTINFOToVariant(var R : tagTVHITTESTINFO) : OleVariant;
var
__rw : __tagTVHITTESTINFO__Wrapper__;
begin
__rw := __tagTVHITTESTINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTVHITTESTINFO(const V : OleVariant) : tagTVHITTESTINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTVHITTESTINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTVINSERTSTRUCT__Wrapper__ = class(__tagTVINSERTSTRUCT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTVINSERTSTRUCT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTVINSERTSTRUCTToVariant(var R : tagTVINSERTSTRUCT) : OleVariant;
var
__rw : __tagTVINSERTSTRUCT__Wrapper__;
begin
__rw := __tagTVINSERTSTRUCT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTVINSERTSTRUCT(const V : OleVariant) : tagTVINSERTSTRUCT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTVINSERTSTRUCT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTVINSERTSTRUCTA__Wrapper__ = class(__tagTVINSERTSTRUCTA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTVINSERTSTRUCTA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTVINSERTSTRUCTAToVariant(var R : tagTVINSERTSTRUCTA) : OleVariant;
var
__rw : __tagTVINSERTSTRUCTA__Wrapper__;
begin
__rw := __tagTVINSERTSTRUCTA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTVINSERTSTRUCTA(const V : OleVariant) : tagTVINSERTSTRUCTA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTVINSERTSTRUCTA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTVINSERTSTRUCTW__Wrapper__ = class(__tagTVINSERTSTRUCTW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTVINSERTSTRUCTW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTVINSERTSTRUCTWToVariant(var R : tagTVINSERTSTRUCTW) : OleVariant;
var
__rw : __tagTVINSERTSTRUCTW__Wrapper__;
begin
__rw := __tagTVINSERTSTRUCTW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTVINSERTSTRUCTW(const V : OleVariant) : tagTVINSERTSTRUCTW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTVINSERTSTRUCTW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTVITEM__Wrapper__ = class(__tagTVITEM__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTVITEM__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTVITEMToVariant(var R : tagTVITEM) : OleVariant;
var
__rw : __tagTVITEM__Wrapper__;
begin
__rw := __tagTVITEM__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTVITEM(const V : OleVariant) : tagTVITEM;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTVITEM((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTVITEMA__Wrapper__ = class(__tagTVITEMA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTVITEMA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTVITEMAToVariant(var R : tagTVITEMA) : OleVariant;
var
__rw : __tagTVITEMA__Wrapper__;
begin
__rw := __tagTVITEMA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTVITEMA(const V : OleVariant) : tagTVITEMA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTVITEMA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTVITEMEX__Wrapper__ = class(__tagTVITEMEX__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTVITEMEX__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTVITEMEXToVariant(var R : tagTVITEMEX) : OleVariant;
var
__rw : __tagTVITEMEX__Wrapper__;
begin
__rw := __tagTVITEMEX__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTVITEMEX(const V : OleVariant) : tagTVITEMEX;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTVITEMEX((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTVITEMEXA__Wrapper__ = class(__tagTVITEMEXA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTVITEMEXA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTVITEMEXAToVariant(var R : tagTVITEMEXA) : OleVariant;
var
__rw : __tagTVITEMEXA__Wrapper__;
begin
__rw := __tagTVITEMEXA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTVITEMEXA(const V : OleVariant) : tagTVITEMEXA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTVITEMEXA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTVITEMEXW__Wrapper__ = class(__tagTVITEMEXW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTVITEMEXW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTVITEMEXWToVariant(var R : tagTVITEMEXW) : OleVariant;
var
__rw : __tagTVITEMEXW__Wrapper__;
begin
__rw := __tagTVITEMEXW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTVITEMEXW(const V : OleVariant) : tagTVITEMEXW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTVITEMEXW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTVITEMW__Wrapper__ = class(__tagTVITEMW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTVITEMW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTVITEMWToVariant(var R : tagTVITEMW) : OleVariant;
var
__rw : __tagTVITEMW__Wrapper__;
begin
__rw := __tagTVITEMW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTVITEMW(const V : OleVariant) : tagTVITEMW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTVITEMW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTVKEYDOWN__Wrapper__ = class(__tagTVKEYDOWN__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTVKEYDOWN__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTVKEYDOWNToVariant(var R : tagTVKEYDOWN) : OleVariant;
var
__rw : __tagTVKEYDOWN__Wrapper__;
begin
__rw := __tagTVKEYDOWN__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTVKEYDOWN(const V : OleVariant) : tagTVKEYDOWN;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTVKEYDOWN((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTVSORTCB__Wrapper__ = class(__tagTVSORTCB__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTVSORTCB__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTVSORTCBToVariant(var R : tagTVSORTCB) : OleVariant;
var
__rw : __tagTVSORTCB__Wrapper__;
begin
__rw := __tagTVSORTCB__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTVSORTCB(const V : OleVariant) : tagTVSORTCB;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTVSORTCB((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TBADDBITMAP__Wrapper__ = class(__TBADDBITMAP__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TBADDBITMAP__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTBADDBITMAPToVariant(var R : TBADDBITMAP) : OleVariant;
var
__rw : __TBADDBITMAP__Wrapper__;
begin
__rw := __TBADDBITMAP__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTBADDBITMAP(const V : OleVariant) : TBADDBITMAP;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TBADDBITMAP((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TBBUTTONINFO__Wrapper__ = class(__TBBUTTONINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TBBUTTONINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTBBUTTONINFOToVariant(var R : TBBUTTONINFO) : OleVariant;
var
__rw : __TBBUTTONINFO__Wrapper__;
begin
__rw := __TBBUTTONINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTBBUTTONINFO(const V : OleVariant) : TBBUTTONINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TBBUTTONINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TBBUTTONINFOA__Wrapper__ = class(__TBBUTTONINFOA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TBBUTTONINFOA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTBBUTTONINFOAToVariant(var R : TBBUTTONINFOA) : OleVariant;
var
__rw : __TBBUTTONINFOA__Wrapper__;
begin
__rw := __TBBUTTONINFOA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTBBUTTONINFOA(const V : OleVariant) : TBBUTTONINFOA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TBBUTTONINFOA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TBBUTTONINFOW__Wrapper__ = class(__TBBUTTONINFOW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TBBUTTONINFOW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTBBUTTONINFOWToVariant(var R : TBBUTTONINFOW) : OleVariant;
var
__rw : __TBBUTTONINFOW__Wrapper__;
begin
__rw := __TBBUTTONINFOW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTBBUTTONINFOW(const V : OleVariant) : TBBUTTONINFOW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TBBUTTONINFOW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TBINSERTMARK__Wrapper__ = class(__TBINSERTMARK__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TBINSERTMARK__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTBINSERTMARKToVariant(var R : TBINSERTMARK) : OleVariant;
var
__rw : __TBINSERTMARK__Wrapper__;
begin
__rw := __TBINSERTMARK__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTBINSERTMARK(const V : OleVariant) : TBINSERTMARK;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TBINSERTMARK((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TBREPLACEBITMAP__Wrapper__ = class(__TBREPLACEBITMAP__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TBREPLACEBITMAP__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTBREPLACEBITMAPToVariant(var R : TBREPLACEBITMAP) : OleVariant;
var
__rw : __TBREPLACEBITMAP__Wrapper__;
begin
__rw := __TBREPLACEBITMAP__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTBREPLACEBITMAP(const V : OleVariant) : TBREPLACEBITMAP;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TBREPLACEBITMAP((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TBSAVEPARAMS__Wrapper__ = class(__TBSAVEPARAMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TBSAVEPARAMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTBSAVEPARAMSToVariant(var R : TBSAVEPARAMS) : OleVariant;
var
__rw : __TBSAVEPARAMS__Wrapper__;
begin
__rw := __TBSAVEPARAMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTBSAVEPARAMS(const V : OleVariant) : TBSAVEPARAMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TBSAVEPARAMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TBSAVEPARAMSA__Wrapper__ = class(__TBSAVEPARAMSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TBSAVEPARAMSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTBSAVEPARAMSAToVariant(var R : TBSAVEPARAMSA) : OleVariant;
var
__rw : __TBSAVEPARAMSA__Wrapper__;
begin
__rw := __TBSAVEPARAMSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTBSAVEPARAMSA(const V : OleVariant) : TBSAVEPARAMSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TBSAVEPARAMSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TBSAVEPARAMSW__Wrapper__ = class(__TBSAVEPARAMSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TBSAVEPARAMSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTBSAVEPARAMSWToVariant(var R : TBSAVEPARAMSW) : OleVariant;
var
__rw : __TBSAVEPARAMSW__Wrapper__;
begin
__rw := __TBSAVEPARAMSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTBSAVEPARAMSW(const V : OleVariant) : TBSAVEPARAMSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TBSAVEPARAMSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TC_HITTESTINFO__Wrapper__ = class(__TC_HITTESTINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TC_HITTESTINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTC_HITTESTINFOToVariant(var R : TC_HITTESTINFO) : OleVariant;
var
__rw : __TC_HITTESTINFO__Wrapper__;
begin
__rw := __TC_HITTESTINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTC_HITTESTINFO(const V : OleVariant) : TC_HITTESTINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TC_HITTESTINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TC_ITEM__Wrapper__ = class(__TC_ITEM__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TC_ITEM__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTC_ITEMToVariant(var R : TC_ITEM) : OleVariant;
var
__rw : __TC_ITEM__Wrapper__;
begin
__rw := __TC_ITEM__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTC_ITEM(const V : OleVariant) : TC_ITEM;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TC_ITEM((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TC_ITEMA__Wrapper__ = class(__TC_ITEMA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TC_ITEMA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTC_ITEMAToVariant(var R : TC_ITEMA) : OleVariant;
var
__rw : __TC_ITEMA__Wrapper__;
begin
__rw := __TC_ITEMA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTC_ITEMA(const V : OleVariant) : TC_ITEMA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TC_ITEMA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TC_ITEMHEADER__Wrapper__ = class(__TC_ITEMHEADER__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TC_ITEMHEADER__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTC_ITEMHEADERToVariant(var R : TC_ITEMHEADER) : OleVariant;
var
__rw : __TC_ITEMHEADER__Wrapper__;
begin
__rw := __TC_ITEMHEADER__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTC_ITEMHEADER(const V : OleVariant) : TC_ITEMHEADER;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TC_ITEMHEADER((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TC_ITEMHEADERA__Wrapper__ = class(__TC_ITEMHEADERA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TC_ITEMHEADERA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTC_ITEMHEADERAToVariant(var R : TC_ITEMHEADERA) : OleVariant;
var
__rw : __TC_ITEMHEADERA__Wrapper__;
begin
__rw := __TC_ITEMHEADERA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTC_ITEMHEADERA(const V : OleVariant) : TC_ITEMHEADERA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TC_ITEMHEADERA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TC_ITEMHEADERW__Wrapper__ = class(__TC_ITEMHEADERW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TC_ITEMHEADERW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTC_ITEMHEADERWToVariant(var R : TC_ITEMHEADERW) : OleVariant;
var
__rw : __TC_ITEMHEADERW__Wrapper__;
begin
__rw := __TC_ITEMHEADERW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTC_ITEMHEADERW(const V : OleVariant) : TC_ITEMHEADERW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TC_ITEMHEADERW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TC_ITEMW__Wrapper__ = class(__TC_ITEMW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TC_ITEMW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTC_ITEMWToVariant(var R : TC_ITEMW) : OleVariant;
var
__rw : __TC_ITEMW__Wrapper__;
begin
__rw := __TC_ITEMW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTC_ITEMW(const V : OleVariant) : TC_ITEMW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TC_ITEMW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TC_KEYDOWN__Wrapper__ = class(__TC_KEYDOWN__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TC_KEYDOWN__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTC_KEYDOWNToVariant(var R : TC_KEYDOWN) : OleVariant;
var
__rw : __TC_KEYDOWN__Wrapper__;
begin
__rw := __TC_KEYDOWN__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTC_KEYDOWN(const V : OleVariant) : TC_KEYDOWN;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TC_KEYDOWN((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TColorMap__Wrapper__ = class(__TColorMap__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TColorMap__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTColorMapToVariant(var R : TColorMap) : OleVariant;
var
__rw : __TColorMap__Wrapper__;
begin
__rw := __TColorMap__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTColorMap(const V : OleVariant) : TColorMap;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TColorMap((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TColorScheme__Wrapper__ = class(__TColorScheme__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TColorScheme__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTColorSchemeToVariant(var R : TColorScheme) : OleVariant;
var
__rw : __TColorScheme__Wrapper__;
begin
__rw := __TColorScheme__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTColorScheme(const V : OleVariant) : TColorScheme;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TColorScheme((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TComboBoxExItem__Wrapper__ = class(__TComboBoxExItem__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TComboBoxExItem__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTComboBoxExItemToVariant(var R : TComboBoxExItem) : OleVariant;
var
__rw : __TComboBoxExItem__Wrapper__;
begin
__rw := __TComboBoxExItem__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTComboBoxExItem(const V : OleVariant) : TComboBoxExItem;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TComboBoxExItem((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TComboBoxExItemA__Wrapper__ = class(__TComboBoxExItemA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TComboBoxExItemA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTComboBoxExItemAToVariant(var R : TComboBoxExItemA) : OleVariant;
var
__rw : __TComboBoxExItemA__Wrapper__;
begin
__rw := __TComboBoxExItemA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTComboBoxExItemA(const V : OleVariant) : TComboBoxExItemA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TComboBoxExItemA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TComboBoxExItemW__Wrapper__ = class(__TComboBoxExItemW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TComboBoxExItemW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTComboBoxExItemWToVariant(var R : TComboBoxExItemW) : OleVariant;
var
__rw : __TComboBoxExItemW__Wrapper__;
begin
__rw := __TComboBoxExItemW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTComboBoxExItemW(const V : OleVariant) : TComboBoxExItemW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TComboBoxExItemW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDragListInfo__Wrapper__ = class(__TDragListInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDragListInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDragListInfoToVariant(var R : TDragListInfo) : OleVariant;
var
__rw : __TDragListInfo__Wrapper__;
begin
__rw := __TDragListInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDragListInfo(const V : OleVariant) : TDragListInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDragListInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __THDHitTestInfo__Wrapper__ = class(__THDHitTestInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __THDHitTestInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTHDHitTestInfoToVariant(var R : THDHitTestInfo) : OleVariant;
var
__rw : __THDHitTestInfo__Wrapper__;
begin
__rw := __THDHitTestInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTHDHitTestInfo(const V : OleVariant) : THDHitTestInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := THDHitTestInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __THDItem__Wrapper__ = class(__THDItem__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __THDItem__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTHDItemToVariant(var R : THDItem) : OleVariant;
var
__rw : __THDItem__Wrapper__;
begin
__rw := __THDItem__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTHDItem(const V : OleVariant) : THDItem;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := THDItem((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __THDItemA__Wrapper__ = class(__THDItemA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __THDItemA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTHDItemAToVariant(var R : THDItemA) : OleVariant;
var
__rw : __THDItemA__Wrapper__;
begin
__rw := __THDItemA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTHDItemA(const V : OleVariant) : THDItemA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := THDItemA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __THDItemW__Wrapper__ = class(__THDItemW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __THDItemW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTHDItemWToVariant(var R : THDItemW) : OleVariant;
var
__rw : __THDItemW__Wrapper__;
begin
__rw := __THDItemW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTHDItemW(const V : OleVariant) : THDItemW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := THDItemW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __THDLayout__Wrapper__ = class(__THDLayout__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __THDLayout__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTHDLayoutToVariant(var R : THDLayout) : OleVariant;
var
__rw : __THDLayout__Wrapper__;
begin
__rw := __THDLayout__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTHDLayout(const V : OleVariant) : THDLayout;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := THDLayout((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __THDNotify__Wrapper__ = class(__THDNotify__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __THDNotify__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTHDNotifyToVariant(var R : THDNotify) : OleVariant;
var
__rw : __THDNotify__Wrapper__;
begin
__rw := __THDNotify__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTHDNotify(const V : OleVariant) : THDNotify;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := THDNotify((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __THDNotifyA__Wrapper__ = class(__THDNotifyA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __THDNotifyA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTHDNotifyAToVariant(var R : THDNotifyA) : OleVariant;
var
__rw : __THDNotifyA__Wrapper__;
begin
__rw := __THDNotifyA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTHDNotifyA(const V : OleVariant) : THDNotifyA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := THDNotifyA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __THDNotifyW__Wrapper__ = class(__THDNotifyW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __THDNotifyW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTHDNotifyWToVariant(var R : THDNotifyW) : OleVariant;
var
__rw : __THDNotifyW__Wrapper__;
begin
__rw := __THDNotifyW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTHDNotifyW(const V : OleVariant) : THDNotifyW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := THDNotifyW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TImageInfo__Wrapper__ = class(__TImageInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TImageInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTImageInfoToVariant(var R : TImageInfo) : OleVariant;
var
__rw : __TImageInfo__Wrapper__;
begin
__rw := __TImageInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTImageInfo(const V : OleVariant) : TImageInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TImageInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TImageListDrawParams__Wrapper__ = class(__TImageListDrawParams__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TImageListDrawParams__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTImageListDrawParamsToVariant(var R : TImageListDrawParams) : OleVariant;
var
__rw : __TImageListDrawParams__Wrapper__;
begin
__rw := __TImageListDrawParams__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTImageListDrawParams(const V : OleVariant) : TImageListDrawParams;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TImageListDrawParams((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TInitCommonControlsEx__Wrapper__ = class(__TInitCommonControlsEx__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TInitCommonControlsEx__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTInitCommonControlsExToVariant(var R : TInitCommonControlsEx) : OleVariant;
var
__rw : __TInitCommonControlsEx__Wrapper__;
begin
__rw := __TInitCommonControlsEx__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTInitCommonControlsEx(const V : OleVariant) : TInitCommonControlsEx;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TInitCommonControlsEx((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TLVBKImage__Wrapper__ = class(__TLVBKImage__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TLVBKImage__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTLVBKImageToVariant(var R : TLVBKImage) : OleVariant;
var
__rw : __TLVBKImage__Wrapper__;
begin
__rw := __TLVBKImage__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTLVBKImage(const V : OleVariant) : TLVBKImage;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TLVBKImage((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TLVBKImageA__Wrapper__ = class(__TLVBKImageA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TLVBKImageA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTLVBKImageAToVariant(var R : TLVBKImageA) : OleVariant;
var
__rw : __TLVBKImageA__Wrapper__;
begin
__rw := __TLVBKImageA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTLVBKImageA(const V : OleVariant) : TLVBKImageA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TLVBKImageA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TLVBKImageW__Wrapper__ = class(__TLVBKImageW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TLVBKImageW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTLVBKImageWToVariant(var R : TLVBKImageW) : OleVariant;
var
__rw : __TLVBKImageW__Wrapper__;
begin
__rw := __TLVBKImageW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTLVBKImageW(const V : OleVariant) : TLVBKImageW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TLVBKImageW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TLVColumn__Wrapper__ = class(__TLVColumn__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TLVColumn__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTLVColumnToVariant(var R : TLVColumn) : OleVariant;
var
__rw : __TLVColumn__Wrapper__;
begin
__rw := __TLVColumn__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTLVColumn(const V : OleVariant) : TLVColumn;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TLVColumn((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TLVColumnA__Wrapper__ = class(__TLVColumnA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TLVColumnA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTLVColumnAToVariant(var R : TLVColumnA) : OleVariant;
var
__rw : __TLVColumnA__Wrapper__;
begin
__rw := __TLVColumnA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTLVColumnA(const V : OleVariant) : TLVColumnA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TLVColumnA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TLVColumnW__Wrapper__ = class(__TLVColumnW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TLVColumnW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTLVColumnWToVariant(var R : TLVColumnW) : OleVariant;
var
__rw : __TLVColumnW__Wrapper__;
begin
__rw := __TLVColumnW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTLVColumnW(const V : OleVariant) : TLVColumnW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TLVColumnW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TLVDispInfo__Wrapper__ = class(__TLVDispInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TLVDispInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTLVDispInfoToVariant(var R : TLVDispInfo) : OleVariant;
var
__rw : __TLVDispInfo__Wrapper__;
begin
__rw := __TLVDispInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTLVDispInfo(const V : OleVariant) : TLVDispInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TLVDispInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TLVDispInfoA__Wrapper__ = class(__TLVDispInfoA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TLVDispInfoA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTLVDispInfoAToVariant(var R : TLVDispInfoA) : OleVariant;
var
__rw : __TLVDispInfoA__Wrapper__;
begin
__rw := __TLVDispInfoA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTLVDispInfoA(const V : OleVariant) : TLVDispInfoA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TLVDispInfoA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TLVDispInfoW__Wrapper__ = class(__TLVDispInfoW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TLVDispInfoW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTLVDispInfoWToVariant(var R : TLVDispInfoW) : OleVariant;
var
__rw : __TLVDispInfoW__Wrapper__;
begin
__rw := __TLVDispInfoW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTLVDispInfoW(const V : OleVariant) : TLVDispInfoW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TLVDispInfoW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TLVFindInfo__Wrapper__ = class(__TLVFindInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TLVFindInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTLVFindInfoToVariant(var R : TLVFindInfo) : OleVariant;
var
__rw : __TLVFindInfo__Wrapper__;
begin
__rw := __TLVFindInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTLVFindInfo(const V : OleVariant) : TLVFindInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TLVFindInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TLVFindInfoA__Wrapper__ = class(__TLVFindInfoA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TLVFindInfoA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTLVFindInfoAToVariant(var R : TLVFindInfoA) : OleVariant;
var
__rw : __TLVFindInfoA__Wrapper__;
begin
__rw := __TLVFindInfoA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTLVFindInfoA(const V : OleVariant) : TLVFindInfoA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TLVFindInfoA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TLVFindInfoW__Wrapper__ = class(__TLVFindInfoW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TLVFindInfoW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTLVFindInfoWToVariant(var R : TLVFindInfoW) : OleVariant;
var
__rw : __TLVFindInfoW__Wrapper__;
begin
__rw := __TLVFindInfoW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTLVFindInfoW(const V : OleVariant) : TLVFindInfoW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TLVFindInfoW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TLVHitTestInfo__Wrapper__ = class(__TLVHitTestInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TLVHitTestInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTLVHitTestInfoToVariant(var R : TLVHitTestInfo) : OleVariant;
var
__rw : __TLVHitTestInfo__Wrapper__;
begin
__rw := __TLVHitTestInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTLVHitTestInfo(const V : OleVariant) : TLVHitTestInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TLVHitTestInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TLVItem__Wrapper__ = class(__TLVItem__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TLVItem__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTLVItemToVariant(var R : TLVItem) : OleVariant;
var
__rw : __TLVItem__Wrapper__;
begin
__rw := __TLVItem__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTLVItem(const V : OleVariant) : TLVItem;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TLVItem((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TLVItemA__Wrapper__ = class(__TLVItemA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TLVItemA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTLVItemAToVariant(var R : TLVItemA) : OleVariant;
var
__rw : __TLVItemA__Wrapper__;
begin
__rw := __TLVItemA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTLVItemA(const V : OleVariant) : TLVItemA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TLVItemA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TLVItemW__Wrapper__ = class(__TLVItemW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TLVItemW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTLVItemWToVariant(var R : TLVItemW) : OleVariant;
var
__rw : __TLVItemW__Wrapper__;
begin
__rw := __TLVItemW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTLVItemW(const V : OleVariant) : TLVItemW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TLVItemW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TLVKeyDown__Wrapper__ = class(__TLVKeyDown__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TLVKeyDown__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTLVKeyDownToVariant(var R : TLVKeyDown) : OleVariant;
var
__rw : __TLVKeyDown__Wrapper__;
begin
__rw := __TLVKeyDown__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTLVKeyDown(const V : OleVariant) : TLVKeyDown;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TLVKeyDown((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCHitTestInfo__Wrapper__ = class(__TMCHitTestInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCHitTestInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCHitTestInfoToVariant(var R : TMCHitTestInfo) : OleVariant;
var
__rw : __TMCHitTestInfo__Wrapper__;
begin
__rw := __TMCHitTestInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCHitTestInfo(const V : OleVariant) : TMCHitTestInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCHitTestInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMCacheHint__Wrapper__ = class(__TNMCacheHint__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMCacheHint__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMCacheHintToVariant(var R : TNMCacheHint) : OleVariant;
var
__rw : __TNMCacheHint__Wrapper__;
begin
__rw := __TNMCacheHint__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMCacheHint(const V : OleVariant) : TNMCacheHint;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMCacheHint((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMCBEDragBegin__Wrapper__ = class(__TNMCBEDragBegin__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMCBEDragBegin__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMCBEDragBeginToVariant(var R : TNMCBEDragBegin) : OleVariant;
var
__rw : __TNMCBEDragBegin__Wrapper__;
begin
__rw := __TNMCBEDragBegin__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMCBEDragBegin(const V : OleVariant) : TNMCBEDragBegin;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMCBEDragBegin((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMCBEDragBeginA__Wrapper__ = class(__TNMCBEDragBeginA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMCBEDragBeginA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMCBEDragBeginAToVariant(var R : TNMCBEDragBeginA) : OleVariant;
var
__rw : __TNMCBEDragBeginA__Wrapper__;
begin
__rw := __TNMCBEDragBeginA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMCBEDragBeginA(const V : OleVariant) : TNMCBEDragBeginA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMCBEDragBeginA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMCBEDragBeginW__Wrapper__ = class(__TNMCBEDragBeginW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMCBEDragBeginW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMCBEDragBeginWToVariant(var R : TNMCBEDragBeginW) : OleVariant;
var
__rw : __TNMCBEDragBeginW__Wrapper__;
begin
__rw := __TNMCBEDragBeginW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMCBEDragBeginW(const V : OleVariant) : TNMCBEDragBeginW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMCBEDragBeginW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMCBEEndEdit__Wrapper__ = class(__TNMCBEEndEdit__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMCBEEndEdit__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMCBEEndEditToVariant(var R : TNMCBEEndEdit) : OleVariant;
var
__rw : __TNMCBEEndEdit__Wrapper__;
begin
__rw := __TNMCBEEndEdit__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMCBEEndEdit(const V : OleVariant) : TNMCBEEndEdit;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMCBEEndEdit((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMCBEEndEditA__Wrapper__ = class(__TNMCBEEndEditA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMCBEEndEditA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMCBEEndEditAToVariant(var R : TNMCBEEndEditA) : OleVariant;
var
__rw : __TNMCBEEndEditA__Wrapper__;
begin
__rw := __TNMCBEEndEditA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMCBEEndEditA(const V : OleVariant) : TNMCBEEndEditA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMCBEEndEditA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMCBEEndEditW__Wrapper__ = class(__TNMCBEEndEditW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMCBEEndEditW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMCBEEndEditWToVariant(var R : TNMCBEEndEditW) : OleVariant;
var
__rw : __TNMCBEEndEditW__Wrapper__;
begin
__rw := __TNMCBEEndEditW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMCBEEndEditW(const V : OleVariant) : TNMCBEEndEditW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMCBEEndEditW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMChar__Wrapper__ = class(__TNMChar__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMChar__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMCharToVariant(var R : TNMChar) : OleVariant;
var
__rw : __TNMChar__Wrapper__;
begin
__rw := __TNMChar__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMChar(const V : OleVariant) : TNMChar;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMChar((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMClick__Wrapper__ = class(__TNMClick__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMClick__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMClickToVariant(var R : TNMClick) : OleVariant;
var
__rw : __TNMClick__Wrapper__;
begin
__rw := __TNMClick__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMClick(const V : OleVariant) : TNMClick;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMClick((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMComboBoxEx__Wrapper__ = class(__TNMComboBoxEx__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMComboBoxEx__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMComboBoxExToVariant(var R : TNMComboBoxEx) : OleVariant;
var
__rw : __TNMComboBoxEx__Wrapper__;
begin
__rw := __TNMComboBoxEx__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMComboBoxEx(const V : OleVariant) : TNMComboBoxEx;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMComboBoxEx((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMComboBoxExA__Wrapper__ = class(__TNMComboBoxExA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMComboBoxExA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMComboBoxExAToVariant(var R : TNMComboBoxExA) : OleVariant;
var
__rw : __TNMComboBoxExA__Wrapper__;
begin
__rw := __TNMComboBoxExA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMComboBoxExA(const V : OleVariant) : TNMComboBoxExA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMComboBoxExA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMComboBoxExW__Wrapper__ = class(__TNMComboBoxExW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMComboBoxExW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMComboBoxExWToVariant(var R : TNMComboBoxExW) : OleVariant;
var
__rw : __TNMComboBoxExW__Wrapper__;
begin
__rw := __TNMComboBoxExW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMComboBoxExW(const V : OleVariant) : TNMComboBoxExW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMComboBoxExW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMCustomDraw__Wrapper__ = class(__TNMCustomDraw__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMCustomDraw__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMCustomDrawToVariant(var R : TNMCustomDraw) : OleVariant;
var
__rw : __TNMCustomDraw__Wrapper__;
begin
__rw := __TNMCustomDraw__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMCustomDraw(const V : OleVariant) : TNMCustomDraw;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMCustomDraw((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMDateTimeChange__Wrapper__ = class(__TNMDateTimeChange__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMDateTimeChange__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMDateTimeChangeToVariant(var R : TNMDateTimeChange) : OleVariant;
var
__rw : __TNMDateTimeChange__Wrapper__;
begin
__rw := __TNMDateTimeChange__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMDateTimeChange(const V : OleVariant) : TNMDateTimeChange;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMDateTimeChange((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMDateTimeFormat__Wrapper__ = class(__TNMDateTimeFormat__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMDateTimeFormat__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMDateTimeFormatToVariant(var R : TNMDateTimeFormat) : OleVariant;
var
__rw : __TNMDateTimeFormat__Wrapper__;
begin
__rw := __TNMDateTimeFormat__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMDateTimeFormat(const V : OleVariant) : TNMDateTimeFormat;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMDateTimeFormat((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMDateTimeFormatA__Wrapper__ = class(__TNMDateTimeFormatA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMDateTimeFormatA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMDateTimeFormatAToVariant(var R : TNMDateTimeFormatA) : OleVariant;
var
__rw : __TNMDateTimeFormatA__Wrapper__;
begin
__rw := __TNMDateTimeFormatA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMDateTimeFormatA(const V : OleVariant) : TNMDateTimeFormatA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMDateTimeFormatA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMDateTimeFormatQuery__Wrapper__ = class(__TNMDateTimeFormatQuery__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMDateTimeFormatQuery__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMDateTimeFormatQueryToVariant(var R : TNMDateTimeFormatQuery) : OleVariant;
var
__rw : __TNMDateTimeFormatQuery__Wrapper__;
begin
__rw := __TNMDateTimeFormatQuery__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMDateTimeFormatQuery(const V : OleVariant) : TNMDateTimeFormatQuery;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMDateTimeFormatQuery((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMDateTimeFormatQueryA__Wrapper__ = class(__TNMDateTimeFormatQueryA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMDateTimeFormatQueryA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMDateTimeFormatQueryAToVariant(var R : TNMDateTimeFormatQueryA) : OleVariant;
var
__rw : __TNMDateTimeFormatQueryA__Wrapper__;
begin
__rw := __TNMDateTimeFormatQueryA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMDateTimeFormatQueryA(const V : OleVariant) : TNMDateTimeFormatQueryA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMDateTimeFormatQueryA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMDateTimeFormatQueryW__Wrapper__ = class(__TNMDateTimeFormatQueryW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMDateTimeFormatQueryW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMDateTimeFormatQueryWToVariant(var R : TNMDateTimeFormatQueryW) : OleVariant;
var
__rw : __TNMDateTimeFormatQueryW__Wrapper__;
begin
__rw := __TNMDateTimeFormatQueryW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMDateTimeFormatQueryW(const V : OleVariant) : TNMDateTimeFormatQueryW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMDateTimeFormatQueryW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMDateTimeFormatW__Wrapper__ = class(__TNMDateTimeFormatW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMDateTimeFormatW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMDateTimeFormatWToVariant(var R : TNMDateTimeFormatW) : OleVariant;
var
__rw : __TNMDateTimeFormatW__Wrapper__;
begin
__rw := __TNMDateTimeFormatW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMDateTimeFormatW(const V : OleVariant) : TNMDateTimeFormatW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMDateTimeFormatW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMDateTimeString__Wrapper__ = class(__TNMDateTimeString__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMDateTimeString__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMDateTimeStringToVariant(var R : TNMDateTimeString) : OleVariant;
var
__rw : __TNMDateTimeString__Wrapper__;
begin
__rw := __TNMDateTimeString__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMDateTimeString(const V : OleVariant) : TNMDateTimeString;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMDateTimeString((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMDateTimeStringA__Wrapper__ = class(__TNMDateTimeStringA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMDateTimeStringA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMDateTimeStringAToVariant(var R : TNMDateTimeStringA) : OleVariant;
var
__rw : __TNMDateTimeStringA__Wrapper__;
begin
__rw := __TNMDateTimeStringA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMDateTimeStringA(const V : OleVariant) : TNMDateTimeStringA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMDateTimeStringA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMDateTimeStringW__Wrapper__ = class(__TNMDateTimeStringW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMDateTimeStringW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMDateTimeStringWToVariant(var R : TNMDateTimeStringW) : OleVariant;
var
__rw : __TNMDateTimeStringW__Wrapper__;
begin
__rw := __TNMDateTimeStringW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMDateTimeStringW(const V : OleVariant) : TNMDateTimeStringW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMDateTimeStringW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMDateTimeWMKeyDown__Wrapper__ = class(__TNMDateTimeWMKeyDown__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMDateTimeWMKeyDown__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMDateTimeWMKeyDownToVariant(var R : TNMDateTimeWMKeyDown) : OleVariant;
var
__rw : __TNMDateTimeWMKeyDown__Wrapper__;
begin
__rw := __TNMDateTimeWMKeyDown__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMDateTimeWMKeyDown(const V : OleVariant) : TNMDateTimeWMKeyDown;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMDateTimeWMKeyDown((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMDateTimeWMKeyDownA__Wrapper__ = class(__TNMDateTimeWMKeyDownA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMDateTimeWMKeyDownA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMDateTimeWMKeyDownAToVariant(var R : TNMDateTimeWMKeyDownA) : OleVariant;
var
__rw : __TNMDateTimeWMKeyDownA__Wrapper__;
begin
__rw := __TNMDateTimeWMKeyDownA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMDateTimeWMKeyDownA(const V : OleVariant) : TNMDateTimeWMKeyDownA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMDateTimeWMKeyDownA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMDateTimeWMKeyDownW__Wrapper__ = class(__TNMDateTimeWMKeyDownW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMDateTimeWMKeyDownW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMDateTimeWMKeyDownWToVariant(var R : TNMDateTimeWMKeyDownW) : OleVariant;
var
__rw : __TNMDateTimeWMKeyDownW__Wrapper__;
begin
__rw := __TNMDateTimeWMKeyDownW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMDateTimeWMKeyDownW(const V : OleVariant) : TNMDateTimeWMKeyDownW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMDateTimeWMKeyDownW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMDayState__Wrapper__ = class(__TNMDayState__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMDayState__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMDayStateToVariant(var R : TNMDayState) : OleVariant;
var
__rw : __TNMDayState__Wrapper__;
begin
__rw := __TNMDayState__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMDayState(const V : OleVariant) : TNMDayState;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMDayState((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMFinditem__Wrapper__ = class(__TNMFinditem__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMFinditem__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMFinditemToVariant(var R : TNMFinditem) : OleVariant;
var
__rw : __TNMFinditem__Wrapper__;
begin
__rw := __TNMFinditem__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMFinditem(const V : OleVariant) : TNMFinditem;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMFinditem((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMFinditemA__Wrapper__ = class(__TNMFinditemA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMFinditemA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMFinditemAToVariant(var R : TNMFinditemA) : OleVariant;
var
__rw : __TNMFinditemA__Wrapper__;
begin
__rw := __TNMFinditemA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMFinditemA(const V : OleVariant) : TNMFinditemA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMFinditemA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMFinditemW__Wrapper__ = class(__TNMFinditemW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMFinditemW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMFinditemWToVariant(var R : TNMFinditemW) : OleVariant;
var
__rw : __TNMFinditemW__Wrapper__;
begin
__rw := __TNMFinditemW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMFinditemW(const V : OleVariant) : TNMFinditemW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMFinditemW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMHDispInfo__Wrapper__ = class(__TNMHDispInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMHDispInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMHDispInfoToVariant(var R : TNMHDispInfo) : OleVariant;
var
__rw : __TNMHDispInfo__Wrapper__;
begin
__rw := __TNMHDispInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMHDispInfo(const V : OleVariant) : TNMHDispInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMHDispInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMHDispInfoA__Wrapper__ = class(__TNMHDispInfoA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMHDispInfoA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMHDispInfoAToVariant(var R : TNMHDispInfoA) : OleVariant;
var
__rw : __TNMHDispInfoA__Wrapper__;
begin
__rw := __TNMHDispInfoA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMHDispInfoA(const V : OleVariant) : TNMHDispInfoA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMHDispInfoA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMHDispInfoW__Wrapper__ = class(__TNMHDispInfoW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMHDispInfoW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMHDispInfoWToVariant(var R : TNMHDispInfoW) : OleVariant;
var
__rw : __TNMHDispInfoW__Wrapper__;
begin
__rw := __TNMHDispInfoW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMHDispInfoW(const V : OleVariant) : TNMHDispInfoW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMHDispInfoW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMIPAddress__Wrapper__ = class(__TNMIPAddress__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMIPAddress__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMIPAddressToVariant(var R : TNMIPAddress) : OleVariant;
var
__rw : __TNMIPAddress__Wrapper__;
begin
__rw := __TNMIPAddress__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMIPAddress(const V : OleVariant) : TNMIPAddress;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMIPAddress((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMItemActivate__Wrapper__ = class(__TNMItemActivate__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMItemActivate__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMItemActivateToVariant(var R : TNMItemActivate) : OleVariant;
var
__rw : __TNMItemActivate__Wrapper__;
begin
__rw := __TNMItemActivate__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMItemActivate(const V : OleVariant) : TNMItemActivate;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMItemActivate((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMKey__Wrapper__ = class(__TNMKey__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMKey__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMKeyToVariant(var R : TNMKey) : OleVariant;
var
__rw : __TNMKey__Wrapper__;
begin
__rw := __TNMKey__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMKey(const V : OleVariant) : TNMKey;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMKey((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMListView__Wrapper__ = class(__TNMListView__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMListView__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMListViewToVariant(var R : TNMListView) : OleVariant;
var
__rw : __TNMListView__Wrapper__;
begin
__rw := __TNMListView__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMListView(const V : OleVariant) : TNMListView;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMListView((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMLVCacheHint__Wrapper__ = class(__TNMLVCacheHint__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMLVCacheHint__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMLVCacheHintToVariant(var R : TNMLVCacheHint) : OleVariant;
var
__rw : __TNMLVCacheHint__Wrapper__;
begin
__rw := __TNMLVCacheHint__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMLVCacheHint(const V : OleVariant) : TNMLVCacheHint;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMLVCacheHint((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMLVCustomDraw__Wrapper__ = class(__TNMLVCustomDraw__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMLVCustomDraw__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMLVCustomDrawToVariant(var R : TNMLVCustomDraw) : OleVariant;
var
__rw : __TNMLVCustomDraw__Wrapper__;
begin
__rw := __TNMLVCustomDraw__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMLVCustomDraw(const V : OleVariant) : TNMLVCustomDraw;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMLVCustomDraw((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMLVFinditem__Wrapper__ = class(__TNMLVFinditem__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMLVFinditem__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMLVFinditemToVariant(var R : TNMLVFinditem) : OleVariant;
var
__rw : __TNMLVFinditem__Wrapper__;
begin
__rw := __TNMLVFinditem__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMLVFinditem(const V : OleVariant) : TNMLVFinditem;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMLVFinditem((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMLVFinditemA__Wrapper__ = class(__TNMLVFinditemA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMLVFinditemA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMLVFinditemAToVariant(var R : TNMLVFinditemA) : OleVariant;
var
__rw : __TNMLVFinditemA__Wrapper__;
begin
__rw := __TNMLVFinditemA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMLVFinditemA(const V : OleVariant) : TNMLVFinditemA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMLVFinditemA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMLVFinditemW__Wrapper__ = class(__TNMLVFinditemW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMLVFinditemW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMLVFinditemWToVariant(var R : TNMLVFinditemW) : OleVariant;
var
__rw : __TNMLVFinditemW__Wrapper__;
begin
__rw := __TNMLVFinditemW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMLVFinditemW(const V : OleVariant) : TNMLVFinditemW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMLVFinditemW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMLVGetInfoTip__Wrapper__ = class(__TNMLVGetInfoTip__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMLVGetInfoTip__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMLVGetInfoTipToVariant(var R : TNMLVGetInfoTip) : OleVariant;
var
__rw : __TNMLVGetInfoTip__Wrapper__;
begin
__rw := __TNMLVGetInfoTip__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMLVGetInfoTip(const V : OleVariant) : TNMLVGetInfoTip;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMLVGetInfoTip((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMLVGetInfoTipA__Wrapper__ = class(__TNMLVGetInfoTipA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMLVGetInfoTipA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMLVGetInfoTipAToVariant(var R : TNMLVGetInfoTipA) : OleVariant;
var
__rw : __TNMLVGetInfoTipA__Wrapper__;
begin
__rw := __TNMLVGetInfoTipA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMLVGetInfoTipA(const V : OleVariant) : TNMLVGetInfoTipA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMLVGetInfoTipA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMLVGetInfoTipW__Wrapper__ = class(__TNMLVGetInfoTipW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMLVGetInfoTipW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMLVGetInfoTipWToVariant(var R : TNMLVGetInfoTipW) : OleVariant;
var
__rw : __TNMLVGetInfoTipW__Wrapper__;
begin
__rw := __TNMLVGetInfoTipW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMLVGetInfoTipW(const V : OleVariant) : TNMLVGetInfoTipW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMLVGetInfoTipW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMLVODStateChange__Wrapper__ = class(__TNMLVODStateChange__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMLVODStateChange__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMLVODStateChangeToVariant(var R : TNMLVODStateChange) : OleVariant;
var
__rw : __TNMLVODStateChange__Wrapper__;
begin
__rw := __TNMLVODStateChange__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMLVODStateChange(const V : OleVariant) : TNMLVODStateChange;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMLVODStateChange((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMMouse__Wrapper__ = class(__TNMMouse__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMMouse__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMMouseToVariant(var R : TNMMouse) : OleVariant;
var
__rw : __TNMMouse__Wrapper__;
begin
__rw := __TNMMouse__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMMouse(const V : OleVariant) : TNMMouse;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMMouse((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMObjectNotify__Wrapper__ = class(__TNMObjectNotify__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMObjectNotify__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMObjectNotifyToVariant(var R : TNMObjectNotify) : OleVariant;
var
__rw : __TNMObjectNotify__Wrapper__;
begin
__rw := __TNMObjectNotify__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMObjectNotify(const V : OleVariant) : TNMObjectNotify;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMObjectNotify((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMPGCalcSize__Wrapper__ = class(__TNMPGCalcSize__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMPGCalcSize__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMPGCalcSizeToVariant(var R : TNMPGCalcSize) : OleVariant;
var
__rw : __TNMPGCalcSize__Wrapper__;
begin
__rw := __TNMPGCalcSize__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMPGCalcSize(const V : OleVariant) : TNMPGCalcSize;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMPGCalcSize((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMPGScroll__Wrapper__ = class(__TNMPGScroll__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMPGScroll__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMPGScrollToVariant(var R : TNMPGScroll) : OleVariant;
var
__rw : __TNMPGScroll__Wrapper__;
begin
__rw := __TNMPGScroll__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMPGScroll(const V : OleVariant) : TNMPGScroll;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMPGScroll((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMRBAutoSize__Wrapper__ = class(__TNMRBAutoSize__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMRBAutoSize__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMRBAutoSizeToVariant(var R : TNMRBAutoSize) : OleVariant;
var
__rw : __TNMRBAutoSize__Wrapper__;
begin
__rw := __TNMRBAutoSize__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMRBAutoSize(const V : OleVariant) : TNMRBAutoSize;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMRBAutoSize((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMReBar__Wrapper__ = class(__TNMReBar__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMReBar__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMReBarToVariant(var R : TNMReBar) : OleVariant;
var
__rw : __TNMReBar__Wrapper__;
begin
__rw := __TNMReBar__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMReBar(const V : OleVariant) : TNMReBar;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMReBar((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMReBarChildSize__Wrapper__ = class(__TNMReBarChildSize__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMReBarChildSize__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMReBarChildSizeToVariant(var R : TNMReBarChildSize) : OleVariant;
var
__rw : __TNMReBarChildSize__Wrapper__;
begin
__rw := __TNMReBarChildSize__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMReBarChildSize(const V : OleVariant) : TNMReBarChildSize;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMReBarChildSize((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMSelChange__Wrapper__ = class(__TNMSelChange__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMSelChange__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMSelChangeToVariant(var R : TNMSelChange) : OleVariant;
var
__rw : __TNMSelChange__Wrapper__;
begin
__rw := __TNMSelChange__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMSelChange(const V : OleVariant) : TNMSelChange;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMSelChange((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMSelect__Wrapper__ = class(__TNMSelect__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMSelect__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMSelectToVariant(var R : TNMSelect) : OleVariant;
var
__rw : __TNMSelect__Wrapper__;
begin
__rw := __TNMSelect__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMSelect(const V : OleVariant) : TNMSelect;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMSelect((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMTBCustomDraw__Wrapper__ = class(__TNMTBCustomDraw__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMTBCustomDraw__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMTBCustomDrawToVariant(var R : TNMTBCustomDraw) : OleVariant;
var
__rw : __TNMTBCustomDraw__Wrapper__;
begin
__rw := __TNMTBCustomDraw__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMTBCustomDraw(const V : OleVariant) : TNMTBCustomDraw;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMTBCustomDraw((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMTBDispInfo__Wrapper__ = class(__TNMTBDispInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMTBDispInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMTBDispInfoToVariant(var R : TNMTBDispInfo) : OleVariant;
var
__rw : __TNMTBDispInfo__Wrapper__;
begin
__rw := __TNMTBDispInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMTBDispInfo(const V : OleVariant) : TNMTBDispInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMTBDispInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMTBDispInfoA__Wrapper__ = class(__TNMTBDispInfoA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMTBDispInfoA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMTBDispInfoAToVariant(var R : TNMTBDispInfoA) : OleVariant;
var
__rw : __TNMTBDispInfoA__Wrapper__;
begin
__rw := __TNMTBDispInfoA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMTBDispInfoA(const V : OleVariant) : TNMTBDispInfoA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMTBDispInfoA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMTBDispInfoW__Wrapper__ = class(__TNMTBDispInfoW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMTBDispInfoW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMTBDispInfoWToVariant(var R : TNMTBDispInfoW) : OleVariant;
var
__rw : __TNMTBDispInfoW__Wrapper__;
begin
__rw := __TNMTBDispInfoW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMTBDispInfoW(const V : OleVariant) : TNMTBDispInfoW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMTBDispInfoW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMTBGetInfoTip__Wrapper__ = class(__TNMTBGetInfoTip__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMTBGetInfoTip__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMTBGetInfoTipToVariant(var R : TNMTBGetInfoTip) : OleVariant;
var
__rw : __TNMTBGetInfoTip__Wrapper__;
begin
__rw := __TNMTBGetInfoTip__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMTBGetInfoTip(const V : OleVariant) : TNMTBGetInfoTip;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMTBGetInfoTip((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMTBGetInfoTipA__Wrapper__ = class(__TNMTBGetInfoTipA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMTBGetInfoTipA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMTBGetInfoTipAToVariant(var R : TNMTBGetInfoTipA) : OleVariant;
var
__rw : __TNMTBGetInfoTipA__Wrapper__;
begin
__rw := __TNMTBGetInfoTipA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMTBGetInfoTipA(const V : OleVariant) : TNMTBGetInfoTipA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMTBGetInfoTipA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMTBGetInfoTipW__Wrapper__ = class(__TNMTBGetInfoTipW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMTBGetInfoTipW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMTBGetInfoTipWToVariant(var R : TNMTBGetInfoTipW) : OleVariant;
var
__rw : __TNMTBGetInfoTipW__Wrapper__;
begin
__rw := __TNMTBGetInfoTipW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMTBGetInfoTipW(const V : OleVariant) : TNMTBGetInfoTipW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMTBGetInfoTipW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMTBHotItem__Wrapper__ = class(__TNMTBHotItem__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMTBHotItem__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMTBHotItemToVariant(var R : TNMTBHotItem) : OleVariant;
var
__rw : __TNMTBHotItem__Wrapper__;
begin
__rw := __TNMTBHotItem__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMTBHotItem(const V : OleVariant) : TNMTBHotItem;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMTBHotItem((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMToolBar__Wrapper__ = class(__TNMToolBar__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMToolBar__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMToolBarToVariant(var R : TNMToolBar) : OleVariant;
var
__rw : __TNMToolBar__Wrapper__;
begin
__rw := __TNMToolBar__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMToolBar(const V : OleVariant) : TNMToolBar;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMToolBar((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMToolBarA__Wrapper__ = class(__TNMToolBarA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMToolBarA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMToolBarAToVariant(var R : TNMToolBarA) : OleVariant;
var
__rw : __TNMToolBarA__Wrapper__;
begin
__rw := __TNMToolBarA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMToolBarA(const V : OleVariant) : TNMToolBarA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMToolBarA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMToolBarW__Wrapper__ = class(__TNMToolBarW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMToolBarW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMToolBarWToVariant(var R : TNMToolBarW) : OleVariant;
var
__rw : __TNMToolBarW__Wrapper__;
begin
__rw := __TNMToolBarW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMToolBarW(const V : OleVariant) : TNMToolBarW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMToolBarW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMTreeView__Wrapper__ = class(__TNMTreeView__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMTreeView__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMTreeViewToVariant(var R : TNMTreeView) : OleVariant;
var
__rw : __TNMTreeView__Wrapper__;
begin
__rw := __TNMTreeView__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMTreeView(const V : OleVariant) : TNMTreeView;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMTreeView((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMTreeViewA__Wrapper__ = class(__TNMTreeViewA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMTreeViewA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMTreeViewAToVariant(var R : TNMTreeViewA) : OleVariant;
var
__rw : __TNMTreeViewA__Wrapper__;
begin
__rw := __TNMTreeViewA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMTreeViewA(const V : OleVariant) : TNMTreeViewA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMTreeViewA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMTreeViewW__Wrapper__ = class(__TNMTreeViewW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMTreeViewW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMTreeViewWToVariant(var R : TNMTreeViewW) : OleVariant;
var
__rw : __TNMTreeViewW__Wrapper__;
begin
__rw := __TNMTreeViewW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMTreeViewW(const V : OleVariant) : TNMTreeViewW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMTreeViewW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMTTCustomDraw__Wrapper__ = class(__TNMTTCustomDraw__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMTTCustomDraw__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMTTCustomDrawToVariant(var R : TNMTTCustomDraw) : OleVariant;
var
__rw : __TNMTTCustomDraw__Wrapper__;
begin
__rw := __TNMTTCustomDraw__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMTTCustomDraw(const V : OleVariant) : TNMTTCustomDraw;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMTTCustomDraw((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMTTDispInfo__Wrapper__ = class(__TNMTTDispInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMTTDispInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMTTDispInfoToVariant(var R : TNMTTDispInfo) : OleVariant;
var
__rw : __TNMTTDispInfo__Wrapper__;
begin
__rw := __TNMTTDispInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMTTDispInfo(const V : OleVariant) : TNMTTDispInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMTTDispInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMTTDispInfoA__Wrapper__ = class(__TNMTTDispInfoA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMTTDispInfoA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMTTDispInfoAToVariant(var R : TNMTTDispInfoA) : OleVariant;
var
__rw : __TNMTTDispInfoA__Wrapper__;
begin
__rw := __TNMTTDispInfoA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMTTDispInfoA(const V : OleVariant) : TNMTTDispInfoA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMTTDispInfoA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMTTDispInfoW__Wrapper__ = class(__TNMTTDispInfoW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMTTDispInfoW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMTTDispInfoWToVariant(var R : TNMTTDispInfoW) : OleVariant;
var
__rw : __TNMTTDispInfoW__Wrapper__;
begin
__rw := __TNMTTDispInfoW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMTTDispInfoW(const V : OleVariant) : TNMTTDispInfoW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMTTDispInfoW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMTVCustomDraw__Wrapper__ = class(__TNMTVCustomDraw__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMTVCustomDraw__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMTVCustomDrawToVariant(var R : TNMTVCustomDraw) : OleVariant;
var
__rw : __TNMTVCustomDraw__Wrapper__;
begin
__rw := __TNMTVCustomDraw__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMTVCustomDraw(const V : OleVariant) : TNMTVCustomDraw;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMTVCustomDraw((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMTVGetInfoTip__Wrapper__ = class(__TNMTVGetInfoTip__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMTVGetInfoTip__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMTVGetInfoTipToVariant(var R : TNMTVGetInfoTip) : OleVariant;
var
__rw : __TNMTVGetInfoTip__Wrapper__;
begin
__rw := __TNMTVGetInfoTip__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMTVGetInfoTip(const V : OleVariant) : TNMTVGetInfoTip;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMTVGetInfoTip((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMTVGetInfoTipA__Wrapper__ = class(__TNMTVGetInfoTipA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMTVGetInfoTipA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMTVGetInfoTipAToVariant(var R : TNMTVGetInfoTipA) : OleVariant;
var
__rw : __TNMTVGetInfoTipA__Wrapper__;
begin
__rw := __TNMTVGetInfoTipA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMTVGetInfoTipA(const V : OleVariant) : TNMTVGetInfoTipA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMTVGetInfoTipA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMTVGetInfoTipW__Wrapper__ = class(__TNMTVGetInfoTipW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMTVGetInfoTipW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMTVGetInfoTipWToVariant(var R : TNMTVGetInfoTipW) : OleVariant;
var
__rw : __TNMTVGetInfoTipW__Wrapper__;
begin
__rw := __TNMTVGetInfoTipW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMTVGetInfoTipW(const V : OleVariant) : TNMTVGetInfoTipW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMTVGetInfoTipW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNMUpDown__Wrapper__ = class(__TNMUpDown__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNMUpDown__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNMUpDownToVariant(var R : TNMUpDown) : OleVariant;
var
__rw : __TNMUpDown__Wrapper__;
begin
__rw := __TNMUpDown__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNMUpDown(const V : OleVariant) : TNMUpDown;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNMUpDown((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TOOLINFO__Wrapper__ = class(__TOOLINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TOOLINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTOOLINFOToVariant(var R : TOOLINFO) : OleVariant;
var
__rw : __TOOLINFO__Wrapper__;
begin
__rw := __TOOLINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTOOLINFO(const V : OleVariant) : TOOLINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TOOLINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TOOLINFOA__Wrapper__ = class(__TOOLINFOA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TOOLINFOA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTOOLINFOAToVariant(var R : TOOLINFOA) : OleVariant;
var
__rw : __TOOLINFOA__Wrapper__;
begin
__rw := __TOOLINFOA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTOOLINFOA(const V : OleVariant) : TOOLINFOA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TOOLINFOA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TOOLINFOW__Wrapper__ = class(__TOOLINFOW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TOOLINFOW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTOOLINFOWToVariant(var R : TOOLINFOW) : OleVariant;
var
__rw : __TOOLINFOW__Wrapper__;
begin
__rw := __TOOLINFOW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTOOLINFOW(const V : OleVariant) : TOOLINFOW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TOOLINFOW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TOOLTIPTEXT__Wrapper__ = class(__TOOLTIPTEXT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TOOLTIPTEXT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTOOLTIPTEXTToVariant(var R : TOOLTIPTEXT) : OleVariant;
var
__rw : __TOOLTIPTEXT__Wrapper__;
begin
__rw := __TOOLTIPTEXT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTOOLTIPTEXT(const V : OleVariant) : TOOLTIPTEXT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TOOLTIPTEXT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TOOLTIPTEXTA__Wrapper__ = class(__TOOLTIPTEXTA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TOOLTIPTEXTA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTOOLTIPTEXTAToVariant(var R : TOOLTIPTEXTA) : OleVariant;
var
__rw : __TOOLTIPTEXTA__Wrapper__;
begin
__rw := __TOOLTIPTEXTA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTOOLTIPTEXTA(const V : OleVariant) : TOOLTIPTEXTA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TOOLTIPTEXTA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TOOLTIPTEXTW__Wrapper__ = class(__TOOLTIPTEXTW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TOOLTIPTEXTW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTOOLTIPTEXTWToVariant(var R : TOOLTIPTEXTW) : OleVariant;
var
__rw : __TOOLTIPTEXTW__Wrapper__;
begin
__rw := __TOOLTIPTEXTW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTOOLTIPTEXTW(const V : OleVariant) : TOOLTIPTEXTW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TOOLTIPTEXTW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPBRange__Wrapper__ = class(__TPBRange__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPBRange__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPBRangeToVariant(var R : TPBRange) : OleVariant;
var
__rw : __TPBRange__Wrapper__;
begin
__rw := __TPBRange__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPBRange(const V : OleVariant) : TPBRange;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPBRange((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPoint__Wrapper__ = class(__TPoint__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPoint__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
var
__rw : __TPoint__Wrapper__;
begin
__rw := __TPoint__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPoint((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPropSheetHeader__Wrapper__ = class(__TPropSheetHeader__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPropSheetHeader__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPropSheetHeaderToVariant(var R : TPropSheetHeader) : OleVariant;
var
__rw : __TPropSheetHeader__Wrapper__;
begin
__rw := __TPropSheetHeader__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPropSheetHeader(const V : OleVariant) : TPropSheetHeader;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPropSheetHeader((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPropSheetHeaderA__Wrapper__ = class(__TPropSheetHeaderA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPropSheetHeaderA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPropSheetHeaderAToVariant(var R : TPropSheetHeaderA) : OleVariant;
var
__rw : __TPropSheetHeaderA__Wrapper__;
begin
__rw := __TPropSheetHeaderA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPropSheetHeaderA(const V : OleVariant) : TPropSheetHeaderA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPropSheetHeaderA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPropSheetHeaderW__Wrapper__ = class(__TPropSheetHeaderW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPropSheetHeaderW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPropSheetHeaderWToVariant(var R : TPropSheetHeaderW) : OleVariant;
var
__rw : __TPropSheetHeaderW__Wrapper__;
begin
__rw := __TPropSheetHeaderW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPropSheetHeaderW(const V : OleVariant) : TPropSheetHeaderW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPropSheetHeaderW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPropSheetPage__Wrapper__ = class(__TPropSheetPage__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPropSheetPage__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPropSheetPageToVariant(var R : TPropSheetPage) : OleVariant;
var
__rw : __TPropSheetPage__Wrapper__;
begin
__rw := __TPropSheetPage__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPropSheetPage(const V : OleVariant) : TPropSheetPage;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPropSheetPage((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPropSheetPageA__Wrapper__ = class(__TPropSheetPageA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPropSheetPageA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPropSheetPageAToVariant(var R : TPropSheetPageA) : OleVariant;
var
__rw : __TPropSheetPageA__Wrapper__;
begin
__rw := __TPropSheetPageA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPropSheetPageA(const V : OleVariant) : TPropSheetPageA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPropSheetPageA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPropSheetPageW__Wrapper__ = class(__TPropSheetPageW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPropSheetPageW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPropSheetPageWToVariant(var R : TPropSheetPageW) : OleVariant;
var
__rw : __TPropSheetPageW__Wrapper__;
begin
__rw := __TPropSheetPageW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPropSheetPageW(const V : OleVariant) : TPropSheetPageW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPropSheetPageW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRBHitTestInfo__Wrapper__ = class(__TRBHitTestInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRBHitTestInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRBHitTestInfoToVariant(var R : TRBHitTestInfo) : OleVariant;
var
__rw : __TRBHitTestInfo__Wrapper__;
begin
__rw := __TRBHitTestInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRBHitTestInfo(const V : OleVariant) : TRBHitTestInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRBHitTestInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TReBarBandInfo__Wrapper__ = class(__TReBarBandInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TReBarBandInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTReBarBandInfoToVariant(var R : TReBarBandInfo) : OleVariant;
var
__rw : __TReBarBandInfo__Wrapper__;
begin
__rw := __TReBarBandInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTReBarBandInfo(const V : OleVariant) : TReBarBandInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TReBarBandInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TReBarBandInfoA__Wrapper__ = class(__TReBarBandInfoA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TReBarBandInfoA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTReBarBandInfoAToVariant(var R : TReBarBandInfoA) : OleVariant;
var
__rw : __TReBarBandInfoA__Wrapper__;
begin
__rw := __TReBarBandInfoA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTReBarBandInfoA(const V : OleVariant) : TReBarBandInfoA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TReBarBandInfoA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TReBarBandInfoW__Wrapper__ = class(__TReBarBandInfoW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TReBarBandInfoW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTReBarBandInfoWToVariant(var R : TReBarBandInfoW) : OleVariant;
var
__rw : __TReBarBandInfoW__Wrapper__;
begin
__rw := __TReBarBandInfoW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTReBarBandInfoW(const V : OleVariant) : TReBarBandInfoW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TReBarBandInfoW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TReBarInfo__Wrapper__ = class(__TReBarInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TReBarInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTReBarInfoToVariant(var R : TReBarInfo) : OleVariant;
var
__rw : __TReBarInfo__Wrapper__;
begin
__rw := __TReBarInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTReBarInfo(const V : OleVariant) : TReBarInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TReBarInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRect__Wrapper__ = class(__TRect__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRect__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
var
__rw : __TRect__Wrapper__;
begin
__rw := __TRect__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRect((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TScrollInfo__Wrapper__ = class(__TScrollInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TScrollInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTScrollInfoToVariant(var R : TScrollInfo) : OleVariant;
var
__rw : __TScrollInfo__Wrapper__;
begin
__rw := __TScrollInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTScrollInfo(const V : OleVariant) : TScrollInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TScrollInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSystemTime__Wrapper__ = class(__TSystemTime__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSystemTime__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSystemTimeToVariant(var R : TSystemTime) : OleVariant;
var
__rw : __TSystemTime__Wrapper__;
begin
__rw := __TSystemTime__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSystemTime(const V : OleVariant) : TSystemTime;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSystemTime((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTBAddBitmap__Wrapper__ = class(__TTBAddBitmap__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTBAddBitmap__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTBAddBitmapToVariant(var R : TTBAddBitmap) : OleVariant;
var
__rw : __TTBAddBitmap__Wrapper__;
begin
__rw := __TTBAddBitmap__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTBAddBitmap(const V : OleVariant) : TTBAddBitmap;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTBAddBitmap((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTBButton__Wrapper__ = class(__TTBButton__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTBButton__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTBButtonToVariant(var R : TTBButton) : OleVariant;
var
__rw : __TTBButton__Wrapper__;
begin
__rw := __TTBButton__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTBButton(const V : OleVariant) : TTBButton;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTBButton((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTBButtonInfo__Wrapper__ = class(__TTBButtonInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTBButtonInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTBButtonInfoToVariant(var R : TTBButtonInfo) : OleVariant;
var
__rw : __TTBButtonInfo__Wrapper__;
begin
__rw := __TTBButtonInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTBButtonInfo(const V : OleVariant) : TTBButtonInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTBButtonInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTBButtonInfoA__Wrapper__ = class(__TTBButtonInfoA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTBButtonInfoA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTBButtonInfoAToVariant(var R : TTBButtonInfoA) : OleVariant;
var
__rw : __TTBButtonInfoA__Wrapper__;
begin
__rw := __TTBButtonInfoA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTBButtonInfoA(const V : OleVariant) : TTBButtonInfoA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTBButtonInfoA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTBButtonInfoW__Wrapper__ = class(__TTBButtonInfoW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTBButtonInfoW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTBButtonInfoWToVariant(var R : TTBButtonInfoW) : OleVariant;
var
__rw : __TTBButtonInfoW__Wrapper__;
begin
__rw := __TTBButtonInfoW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTBButtonInfoW(const V : OleVariant) : TTBButtonInfoW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTBButtonInfoW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTBInsertMark__Wrapper__ = class(__TTBInsertMark__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTBInsertMark__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTBInsertMarkToVariant(var R : TTBInsertMark) : OleVariant;
var
__rw : __TTBInsertMark__Wrapper__;
begin
__rw := __TTBInsertMark__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTBInsertMark(const V : OleVariant) : TTBInsertMark;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTBInsertMark((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTBReplaceBitmap__Wrapper__ = class(__TTBReplaceBitmap__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTBReplaceBitmap__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTBReplaceBitmapToVariant(var R : TTBReplaceBitmap) : OleVariant;
var
__rw : __TTBReplaceBitmap__Wrapper__;
begin
__rw := __TTBReplaceBitmap__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTBReplaceBitmap(const V : OleVariant) : TTBReplaceBitmap;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTBReplaceBitmap((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTBSaveParams__Wrapper__ = class(__TTBSaveParams__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTBSaveParams__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTBSaveParamsToVariant(var R : TTBSaveParams) : OleVariant;
var
__rw : __TTBSaveParams__Wrapper__;
begin
__rw := __TTBSaveParams__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTBSaveParams(const V : OleVariant) : TTBSaveParams;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTBSaveParams((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTBSaveParamsA__Wrapper__ = class(__TTBSaveParamsA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTBSaveParamsA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTBSaveParamsAToVariant(var R : TTBSaveParamsA) : OleVariant;
var
__rw : __TTBSaveParamsA__Wrapper__;
begin
__rw := __TTBSaveParamsA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTBSaveParamsA(const V : OleVariant) : TTBSaveParamsA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTBSaveParamsA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTBSaveParamsW__Wrapper__ = class(__TTBSaveParamsW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTBSaveParamsW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTBSaveParamsWToVariant(var R : TTBSaveParamsW) : OleVariant;
var
__rw : __TTBSaveParamsW__Wrapper__;
begin
__rw := __TTBSaveParamsW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTBSaveParamsW(const V : OleVariant) : TTBSaveParamsW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTBSaveParamsW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTCHitTestInfo__Wrapper__ = class(__TTCHitTestInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTCHitTestInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTCHitTestInfoToVariant(var R : TTCHitTestInfo) : OleVariant;
var
__rw : __TTCHitTestInfo__Wrapper__;
begin
__rw := __TTCHitTestInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTCHitTestInfo(const V : OleVariant) : TTCHitTestInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTCHitTestInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTCItem__Wrapper__ = class(__TTCItem__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTCItem__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTCItemToVariant(var R : TTCItem) : OleVariant;
var
__rw : __TTCItem__Wrapper__;
begin
__rw := __TTCItem__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTCItem(const V : OleVariant) : TTCItem;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTCItem((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTCItemA__Wrapper__ = class(__TTCItemA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTCItemA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTCItemAToVariant(var R : TTCItemA) : OleVariant;
var
__rw : __TTCItemA__Wrapper__;
begin
__rw := __TTCItemA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTCItemA(const V : OleVariant) : TTCItemA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTCItemA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTCItemHeader__Wrapper__ = class(__TTCItemHeader__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTCItemHeader__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTCItemHeaderToVariant(var R : TTCItemHeader) : OleVariant;
var
__rw : __TTCItemHeader__Wrapper__;
begin
__rw := __TTCItemHeader__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTCItemHeader(const V : OleVariant) : TTCItemHeader;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTCItemHeader((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTCItemHeaderA__Wrapper__ = class(__TTCItemHeaderA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTCItemHeaderA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTCItemHeaderAToVariant(var R : TTCItemHeaderA) : OleVariant;
var
__rw : __TTCItemHeaderA__Wrapper__;
begin
__rw := __TTCItemHeaderA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTCItemHeaderA(const V : OleVariant) : TTCItemHeaderA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTCItemHeaderA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTCItemHeaderW__Wrapper__ = class(__TTCItemHeaderW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTCItemHeaderW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTCItemHeaderWToVariant(var R : TTCItemHeaderW) : OleVariant;
var
__rw : __TTCItemHeaderW__Wrapper__;
begin
__rw := __TTCItemHeaderW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTCItemHeaderW(const V : OleVariant) : TTCItemHeaderW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTCItemHeaderW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTCItemW__Wrapper__ = class(__TTCItemW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTCItemW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTCItemWToVariant(var R : TTCItemW) : OleVariant;
var
__rw : __TTCItemW__Wrapper__;
begin
__rw := __TTCItemW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTCItemW(const V : OleVariant) : TTCItemW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTCItemW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTCKeyDown__Wrapper__ = class(__TTCKeyDown__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTCKeyDown__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTCKeyDownToVariant(var R : TTCKeyDown) : OleVariant;
var
__rw : __TTCKeyDown__Wrapper__;
begin
__rw := __TTCKeyDown__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTCKeyDown(const V : OleVariant) : TTCKeyDown;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTCKeyDown((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTHITTESTINFO__Wrapper__ = class(__TTHITTESTINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTHITTESTINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTHITTESTINFOToVariant(var R : TTHITTESTINFO) : OleVariant;
var
__rw : __TTHITTESTINFO__Wrapper__;
begin
__rw := __TTHITTESTINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTHITTESTINFO(const V : OleVariant) : TTHITTESTINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTHITTESTINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTHITTESTINFOA__Wrapper__ = class(__TTHITTESTINFOA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTHITTESTINFOA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTHITTESTINFOAToVariant(var R : TTHITTESTINFOA) : OleVariant;
var
__rw : __TTHITTESTINFOA__Wrapper__;
begin
__rw := __TTHITTESTINFOA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTHITTESTINFOA(const V : OleVariant) : TTHITTESTINFOA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTHITTESTINFOA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTHITTESTINFOW__Wrapper__ = class(__TTHITTESTINFOW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTHITTESTINFOW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTHITTESTINFOWToVariant(var R : TTHITTESTINFOW) : OleVariant;
var
__rw : __TTHITTESTINFOW__Wrapper__;
begin
__rw := __TTHITTESTINFOW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTHITTESTINFOW(const V : OleVariant) : TTHITTESTINFOW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTHITTESTINFOW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TToolInfo__Wrapper__ = class(__TToolInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TToolInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTToolInfoToVariant(var R : TToolInfo) : OleVariant;
var
__rw : __TToolInfo__Wrapper__;
begin
__rw := __TToolInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTToolInfo(const V : OleVariant) : TToolInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TToolInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TToolInfoA__Wrapper__ = class(__TToolInfoA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TToolInfoA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTToolInfoAToVariant(var R : TToolInfoA) : OleVariant;
var
__rw : __TToolInfoA__Wrapper__;
begin
__rw := __TToolInfoA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTToolInfoA(const V : OleVariant) : TToolInfoA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TToolInfoA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TToolInfoW__Wrapper__ = class(__TToolInfoW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TToolInfoW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTToolInfoWToVariant(var R : TToolInfoW) : OleVariant;
var
__rw : __TToolInfoW__Wrapper__;
begin
__rw := __TToolInfoW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTToolInfoW(const V : OleVariant) : TToolInfoW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TToolInfoW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TToolTipText__Wrapper__ = class(__TToolTipText__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TToolTipText__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTToolTipTextToVariant(var R : TToolTipText) : OleVariant;
var
__rw : __TToolTipText__Wrapper__;
begin
__rw := __TToolTipText__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTToolTipText(const V : OleVariant) : TToolTipText;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TToolTipText((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TToolTipTextA__Wrapper__ = class(__TToolTipTextA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TToolTipTextA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTToolTipTextAToVariant(var R : TToolTipTextA) : OleVariant;
var
__rw : __TToolTipTextA__Wrapper__;
begin
__rw := __TToolTipTextA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTToolTipTextA(const V : OleVariant) : TToolTipTextA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TToolTipTextA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TToolTipTextW__Wrapper__ = class(__TToolTipTextW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TToolTipTextW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTToolTipTextWToVariant(var R : TToolTipTextW) : OleVariant;
var
__rw : __TToolTipTextW__Wrapper__;
begin
__rw := __TToolTipTextW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTToolTipTextW(const V : OleVariant) : TToolTipTextW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TToolTipTextW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTrackMouseEvent__Wrapper__ = class(__TTrackMouseEvent__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTrackMouseEvent__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTrackMouseEventToVariant(var R : TTrackMouseEvent) : OleVariant;
var
__rw : __TTrackMouseEvent__Wrapper__;
begin
__rw := __TTrackMouseEvent__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTrackMouseEvent(const V : OleVariant) : TTrackMouseEvent;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTrackMouseEvent((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTTHitTestInfo__Wrapper__ = class(__TTTHitTestInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTTHitTestInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTTHitTestInfoToVariant(var R : TTTHitTestInfo) : OleVariant;
var
__rw : __TTTHitTestInfo__Wrapper__;
begin
__rw := __TTTHitTestInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTTHitTestInfo(const V : OleVariant) : TTTHitTestInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTTHitTestInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTTHitTestInfoA__Wrapper__ = class(__TTTHitTestInfoA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTTHitTestInfoA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTTHitTestInfoAToVariant(var R : TTTHitTestInfoA) : OleVariant;
var
__rw : __TTTHitTestInfoA__Wrapper__;
begin
__rw := __TTTHitTestInfoA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTTHitTestInfoA(const V : OleVariant) : TTTHitTestInfoA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTTHitTestInfoA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTTHitTestInfoW__Wrapper__ = class(__TTTHitTestInfoW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTTHitTestInfoW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTTHitTestInfoWToVariant(var R : TTTHitTestInfoW) : OleVariant;
var
__rw : __TTTHitTestInfoW__Wrapper__;
begin
__rw := __TTTHitTestInfoW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTTHitTestInfoW(const V : OleVariant) : TTTHitTestInfoW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTTHitTestInfoW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTVDispInfo__Wrapper__ = class(__TTVDispInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTVDispInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTVDispInfoToVariant(var R : TTVDispInfo) : OleVariant;
var
__rw : __TTVDispInfo__Wrapper__;
begin
__rw := __TTVDispInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTVDispInfo(const V : OleVariant) : TTVDispInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTVDispInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTVDispInfoA__Wrapper__ = class(__TTVDispInfoA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTVDispInfoA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTVDispInfoAToVariant(var R : TTVDispInfoA) : OleVariant;
var
__rw : __TTVDispInfoA__Wrapper__;
begin
__rw := __TTVDispInfoA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTVDispInfoA(const V : OleVariant) : TTVDispInfoA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTVDispInfoA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTVDispInfoW__Wrapper__ = class(__TTVDispInfoW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTVDispInfoW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTVDispInfoWToVariant(var R : TTVDispInfoW) : OleVariant;
var
__rw : __TTVDispInfoW__Wrapper__;
begin
__rw := __TTVDispInfoW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTVDispInfoW(const V : OleVariant) : TTVDispInfoW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTVDispInfoW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTVHitTestInfo__Wrapper__ = class(__TTVHitTestInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTVHitTestInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTVHitTestInfoToVariant(var R : TTVHitTestInfo) : OleVariant;
var
__rw : __TTVHitTestInfo__Wrapper__;
begin
__rw := __TTVHitTestInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTVHitTestInfo(const V : OleVariant) : TTVHitTestInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTVHitTestInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTVInsertStruct__Wrapper__ = class(__TTVInsertStruct__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTVInsertStruct__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTVInsertStructToVariant(var R : TTVInsertStruct) : OleVariant;
var
__rw : __TTVInsertStruct__Wrapper__;
begin
__rw := __TTVInsertStruct__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTVInsertStruct(const V : OleVariant) : TTVInsertStruct;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTVInsertStruct((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTVInsertStructA__Wrapper__ = class(__TTVInsertStructA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTVInsertStructA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTVInsertStructAToVariant(var R : TTVInsertStructA) : OleVariant;
var
__rw : __TTVInsertStructA__Wrapper__;
begin
__rw := __TTVInsertStructA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTVInsertStructA(const V : OleVariant) : TTVInsertStructA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTVInsertStructA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTVInsertStructW__Wrapper__ = class(__TTVInsertStructW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTVInsertStructW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTVInsertStructWToVariant(var R : TTVInsertStructW) : OleVariant;
var
__rw : __TTVInsertStructW__Wrapper__;
begin
__rw := __TTVInsertStructW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTVInsertStructW(const V : OleVariant) : TTVInsertStructW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTVInsertStructW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTVItem__Wrapper__ = class(__TTVItem__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTVItem__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTVItemToVariant(var R : TTVItem) : OleVariant;
var
__rw : __TTVItem__Wrapper__;
begin
__rw := __TTVItem__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTVItem(const V : OleVariant) : TTVItem;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTVItem((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTVItemA__Wrapper__ = class(__TTVItemA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTVItemA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTVItemAToVariant(var R : TTVItemA) : OleVariant;
var
__rw : __TTVItemA__Wrapper__;
begin
__rw := __TTVItemA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTVItemA(const V : OleVariant) : TTVItemA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTVItemA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTVItemEx__Wrapper__ = class(__TTVItemEx__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTVItemEx__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTVItemExToVariant(var R : TTVItemEx) : OleVariant;
var
__rw : __TTVItemEx__Wrapper__;
begin
__rw := __TTVItemEx__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTVItemEx(const V : OleVariant) : TTVItemEx;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTVItemEx((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTVItemExA__Wrapper__ = class(__TTVItemExA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTVItemExA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTVItemExAToVariant(var R : TTVItemExA) : OleVariant;
var
__rw : __TTVItemExA__Wrapper__;
begin
__rw := __TTVItemExA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTVItemExA(const V : OleVariant) : TTVItemExA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTVItemExA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTVItemExW__Wrapper__ = class(__TTVItemExW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTVItemExW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTVItemExWToVariant(var R : TTVItemExW) : OleVariant;
var
__rw : __TTVItemExW__Wrapper__;
begin
__rw := __TTVItemExW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTVItemExW(const V : OleVariant) : TTVItemExW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTVItemExW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTVItemW__Wrapper__ = class(__TTVItemW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTVItemW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTVItemWToVariant(var R : TTVItemW) : OleVariant;
var
__rw : __TTVItemW__Wrapper__;
begin
__rw := __TTVItemW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTVItemW(const V : OleVariant) : TTVItemW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTVItemW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTVKeyDown__Wrapper__ = class(__TTVKeyDown__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTVKeyDown__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTVKeyDownToVariant(var R : TTVKeyDown) : OleVariant;
var
__rw : __TTVKeyDown__Wrapper__;
begin
__rw := __TTVKeyDown__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTVKeyDown(const V : OleVariant) : TTVKeyDown;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTVKeyDown((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTVSortCB__Wrapper__ = class(__TTVSortCB__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTVSortCB__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTVSortCBToVariant(var R : TTVSortCB) : OleVariant;
var
__rw : __TTVSortCB__Wrapper__;
begin
__rw := __TTVSortCB__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTVSortCB(const V : OleVariant) : TTVSortCB;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTVSortCB((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TUDAccel__Wrapper__ = class(__TUDAccel__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TUDAccel__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTUDAccelToVariant(var R : TUDAccel) : OleVariant;
var
__rw : __TUDAccel__Wrapper__;
begin
__rw := __TUDAccel__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTUDAccel(const V : OleVariant) : TUDAccel;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TUDAccel((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TV_DISPINFO__Wrapper__ = class(__TV_DISPINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TV_DISPINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTV_DISPINFOToVariant(var R : TV_DISPINFO) : OleVariant;
var
__rw : __TV_DISPINFO__Wrapper__;
begin
__rw := __TV_DISPINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTV_DISPINFO(const V : OleVariant) : TV_DISPINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TV_DISPINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TV_DISPINFOA__Wrapper__ = class(__TV_DISPINFOA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TV_DISPINFOA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTV_DISPINFOAToVariant(var R : TV_DISPINFOA) : OleVariant;
var
__rw : __TV_DISPINFOA__Wrapper__;
begin
__rw := __TV_DISPINFOA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTV_DISPINFOA(const V : OleVariant) : TV_DISPINFOA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TV_DISPINFOA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TV_DISPINFOW__Wrapper__ = class(__TV_DISPINFOW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TV_DISPINFOW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTV_DISPINFOWToVariant(var R : TV_DISPINFOW) : OleVariant;
var
__rw : __TV_DISPINFOW__Wrapper__;
begin
__rw := __TV_DISPINFOW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTV_DISPINFOW(const V : OleVariant) : TV_DISPINFOW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TV_DISPINFOW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TV_HITTESTINFO__Wrapper__ = class(__TV_HITTESTINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TV_HITTESTINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTV_HITTESTINFOToVariant(var R : TV_HITTESTINFO) : OleVariant;
var
__rw : __TV_HITTESTINFO__Wrapper__;
begin
__rw := __TV_HITTESTINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTV_HITTESTINFO(const V : OleVariant) : TV_HITTESTINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TV_HITTESTINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TV_INSERTSTRUCT__Wrapper__ = class(__TV_INSERTSTRUCT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TV_INSERTSTRUCT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTV_INSERTSTRUCTToVariant(var R : TV_INSERTSTRUCT) : OleVariant;
var
__rw : __TV_INSERTSTRUCT__Wrapper__;
begin
__rw := __TV_INSERTSTRUCT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTV_INSERTSTRUCT(const V : OleVariant) : TV_INSERTSTRUCT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TV_INSERTSTRUCT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TV_INSERTSTRUCTA__Wrapper__ = class(__TV_INSERTSTRUCTA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TV_INSERTSTRUCTA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTV_INSERTSTRUCTAToVariant(var R : TV_INSERTSTRUCTA) : OleVariant;
var
__rw : __TV_INSERTSTRUCTA__Wrapper__;
begin
__rw := __TV_INSERTSTRUCTA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTV_INSERTSTRUCTA(const V : OleVariant) : TV_INSERTSTRUCTA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TV_INSERTSTRUCTA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TV_INSERTSTRUCTW__Wrapper__ = class(__TV_INSERTSTRUCTW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TV_INSERTSTRUCTW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTV_INSERTSTRUCTWToVariant(var R : TV_INSERTSTRUCTW) : OleVariant;
var
__rw : __TV_INSERTSTRUCTW__Wrapper__;
begin
__rw := __TV_INSERTSTRUCTW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTV_INSERTSTRUCTW(const V : OleVariant) : TV_INSERTSTRUCTW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TV_INSERTSTRUCTW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TV_ITEM__Wrapper__ = class(__TV_ITEM__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TV_ITEM__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTV_ITEMToVariant(var R : TV_ITEM) : OleVariant;
var
__rw : __TV_ITEM__Wrapper__;
begin
__rw := __TV_ITEM__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTV_ITEM(const V : OleVariant) : TV_ITEM;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TV_ITEM((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TV_ITEMA__Wrapper__ = class(__TV_ITEMA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TV_ITEMA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTV_ITEMAToVariant(var R : TV_ITEMA) : OleVariant;
var
__rw : __TV_ITEMA__Wrapper__;
begin
__rw := __TV_ITEMA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTV_ITEMA(const V : OleVariant) : TV_ITEMA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TV_ITEMA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TV_ITEMW__Wrapper__ = class(__TV_ITEMW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TV_ITEMW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTV_ITEMWToVariant(var R : TV_ITEMW) : OleVariant;
var
__rw : __TV_ITEMW__Wrapper__;
begin
__rw := __TV_ITEMW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTV_ITEMW(const V : OleVariant) : TV_ITEMW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TV_ITEMW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TV_KEYDOWN__Wrapper__ = class(__TV_KEYDOWN__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TV_KEYDOWN__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTV_KEYDOWNToVariant(var R : TV_KEYDOWN) : OleVariant;
var
__rw : __TV_KEYDOWN__Wrapper__;
begin
__rw := __TV_KEYDOWN__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTV_KEYDOWN(const V : OleVariant) : TV_KEYDOWN;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TV_KEYDOWN((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TV_SORTCB__Wrapper__ = class(__TV_SORTCB__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TV_SORTCB__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTV_SORTCBToVariant(var R : TV_SORTCB) : OleVariant;
var
__rw : __TV_SORTCB__Wrapper__;
begin
__rw := __TV_SORTCB__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTV_SORTCB(const V : OleVariant) : TV_SORTCB;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TV_SORTCB((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __UDACCEL__Wrapper__ = class(__UDACCEL__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __UDACCEL__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertUDACCELToVariant(var R : UDACCEL) : OleVariant;
var
__rw : __UDACCEL__Wrapper__;
begin
__rw := __UDACCEL__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToUDACCEL(const V : OleVariant) : UDACCEL;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := UDACCEL((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..487] of string = (
'MAXPROPPAGES'
,'PSP_DEFAULT'
,'PSP_DLGINDIRECT'
,'PSP_USEHICON'
,'PSP_USEICONID'
,'PSP_USETITLE'
,'PSP_RTLREADING'
,'PSP_HASHELP'
,'PSP_USEREFPARENT'
,'PSP_USECALLBACK'
,'PSP_PREMATURE'
,'PSP_HIDEHEADER'
,'PSP_USEHEADERTITLE'
,'PSP_USEHEADERSUBTITLE'
,'PSPCB_RELEASE'
,'PSPCB_CREATE'
,'PSH_DEFAULT'
,'PSH_PROPTITLE'
,'PSH_USEHICON'
,'PSH_USEICONID'
,'PSH_PROPSHEETPAGE'
,'PSH_WIZARDHASFINISH'
,'PSH_MULTILINETABS'
,'PSH_WIZARD'
,'PSH_USEPSTARTPAGE'
,'PSH_NOAPPLYNOW'
,'PSH_USECALLBACK'
,'PSH_HASHELP'
,'PSH_MODELESS'
,'PSH_RTLREADING'
,'PSH_WIZARDCONTEXTHELP'
,'PSH_WIZARD97'
,'PSH_WATERMARK'
,'PSH_USEHBMWATERMARK'
,'PSH_USEHPLWATERMARK'
,'PSH_STRETCHWATERMARK'
,'PSH_HEADER'
,'PSH_USEHBMHEADER'
,'PSH_USEPAGELANG'
,'PSCB_INITIALIZED'
,'PSCB_PRECREATE'
,'PSN_FIRST'
,'PSN_LAST'
,'PSN_SETACTIVE'
,'PSN_KILLACTIVE'
,'PSN_APPLY'
,'PSN_RESET'
,'PSN_HELP'
,'PSN_WIZBACK'
,'PSN_WIZNEXT'
,'PSN_WIZFINISH'
,'PSN_QUERYCANCEL'
,'PSN_GETOBJECT'
,'PSNRET_NOERROR'
,'PSNRET_INVALID'
,'PSNRET_INVALID_NOCHANGEPAGE'
,'PSM_SETCURSEL'
,'PSM_REMOVEPAGE'
,'PSM_ADDPAGE'
,'PSM_CHANGED'
,'PSM_RESTARTWINDOWS'
,'PSM_REBOOTSYSTEM'
,'PSM_CANCELTOCLOSE'
,'PSM_QUERYSIBLINGS'
,'PSM_UNCHANGED'
,'PSM_APPLY'
,'PSM_SETTITLE'
,'PSM_SETTITLEW'
,'PSM_SETWIZBUTTONS'
,'PSM_PRESSBUTTON'
,'PSM_SETCURSELID'
,'PSM_SETFINISHTEXT'
,'PSM_SETFINISHTEXTW'
,'PSM_GETTABCONTROL'
,'PSM_ISDIALOGMESSAGE'
,'PSWIZB_BACK'
,'PSWIZB_NEXT'
,'PSWIZB_FINISH'
,'PSWIZB_DISABLEDFINISH'
,'PSBTN_BACK'
,'PSBTN_NEXT'
,'PSBTN_FINISH'
,'PSBTN_OK'
,'PSBTN_APPLYNOW'
,'PSBTN_CANCEL'
,'PSBTN_HELP'
,'PSBTN_MAX'
,'ID_PSRESTARTWINDOWS'
,'WIZ_CXDLG'
,'WIZ_CYDLG'
,'WIZ_CXBMP'
,'WIZ_BODYX'
,'WIZ_BODYCX'
,'PROP_SM_CXDLG'
,'PROP_SM_CYDLG'
,'PROP_MED_CXDLG'
,'PROP_MED_CYDLG'
,'PROP_LG_CXDLG'
,'PROP_LG_CYDLG'
,'ICC_LISTVIEW_CLASSES'
,'ICC_TREEVIEW_CLASSES'
,'ICC_BAR_CLASSES'
,'ICC_TAB_CLASSES'
,'ICC_UPDOWN_CLASS'
,'ICC_PROGRESS_CLASS'
,'ICC_HOTKEY_CLASS'
,'ICC_ANIMATE_CLASS'
,'ICC_WIN95_CLASSES'
,'ICC_DATE_CLASSES'
,'ICC_USEREX_CLASSES'
,'ICC_COOL_CLASSES'
,'ICC_INTERNET_CLASSES'
,'ICC_PAGESCROLLER_CLASS'
,'ICC_NATIVEFNTCTL_CLASS'
,'IMAGE_BITMAP'
,'ODT_HEADER'
,'ODT_TAB'
,'ODT_LISTVIEW'
,'LVM_FIRST'
,'TV_FIRST'
,'HDM_FIRST'
,'TCM_FIRST'
,'PGM_FIRST'
,'CCM_FIRST'
,'CCM_SETBKCOLOR'
,'CCM_SETCOLORSCHEME'
,'CCM_GETCOLORSCHEME'
,'CCM_GETDROPTARGET'
,'CCM_SETUNICODEFORMAT'
,'CCM_GETUNICODEFORMAT'
,'INFOTIPSIZE'
,'NM_FIRST'
,'NM_LAST'
,'LVN_FIRST'
,'LVN_LAST'
,'HDN_FIRST'
,'HDN_LAST'
,'TVN_FIRST'
,'TVN_LAST'
,'TTN_FIRST'
,'TTN_LAST'
,'TCN_FIRST'
,'TCN_LAST'
,'CDN_FIRST'
,'CDN_LAST'
,'TBN_FIRST'
,'TBN_LAST'
,'UDN_FIRST'
,'UDN_LAST'
,'MCN_FIRST'
,'MCN_LAST'
,'DTN_FIRST'
,'DTN_LAST'
,'CBEN_FIRST'
,'CBEN_LAST'
,'RBN_FIRST'
,'RBN_LAST'
,'IPN_FIRST'
,'IPN_LAST'
,'SBN_FIRST'
,'SBN_LAST'
,'PGN_FIRST'
,'PGN_LAST'
,'MSGF_COMMCTRL_BEGINDRAG'
,'MSGF_COMMCTRL_SIZEHEADER'
,'MSGF_COMMCTRL_DRAGSELECT'
,'MSGF_COMMCTRL_TOOLBARCUST'
,'NM_OUTOFMEMORY'
,'NM_CLICK'
,'NM_DBLCLK'
,'NM_RETURN'
,'NM_RCLICK'
,'NM_RDBLCLK'
,'NM_SETFOCUS'
,'NM_KILLFOCUS'
,'NM_CUSTOMDRAW'
,'NM_HOVER'
,'NM_NCHITTEST'
,'NM_KEYDOWN'
,'NM_RELEASEDCAPTURE'
,'NM_SETCURSOR'
,'NM_CHAR'
,'CDRF_DODEFAULT'
,'CDRF_NEWFONT'
,'CDRF_SKIPDEFAULT'
,'CDRF_NOTIFYPOSTPAINT'
,'CDRF_NOTIFYITEMDRAW'
,'CDRF_NOTIFYSUBITEMDRAW'
,'CDRF_NOTIFYPOSTERASE'
,'CDDS_PREPAINT'
,'CDDS_POSTPAINT'
,'CDDS_PREERASE'
,'CDDS_POSTERASE'
,'CDDS_ITEM'
,'CDDS_ITEMPREPAINT'
,'CDDS_ITEMPOSTPAINT'
,'CDDS_ITEMPREERASE'
,'CDDS_ITEMPOSTERASE'
,'CDDS_SUBITEM'
,'CDIS_SELECTED'
,'CDIS_GRAYED'
,'CDIS_DISABLED'
,'CDIS_CHECKED'
,'CDIS_FOCUS'
,'CDIS_DEFAULT'
,'CDIS_HOT'
,'CDIS_MARKED'
,'CDIS_INDETERMINATE'
,'CDIS_SHOWKEYBOARDCUES'
,'CLR_NONE'
,'CLR_DEFAULT'
,'ILC_MASK'
,'ILC_COLOR'
,'ILC_COLORDDB'
,'ILC_COLOR4'
,'ILC_COLOR8'
,'ILC_COLOR16'
,'ILC_COLOR24'
,'ILC_COLOR32'
,'ILC_PALETTE'
,'ILD_NORMAL'
,'ILD_TRANSPARENT'
,'ILD_MASK'
,'ILD_IMAGE'
,'ILD_ROP'
,'ILD_BLEND25'
,'ILD_BLEND50'
,'ILD_OVERLAYMASK'
,'CLR_HILIGHT'
,'ILCF_MOVE'
,'ILCF_SWAP'
,'WC_HEADER'
,'HDS_HORZ'
,'HDS_BUTTONS'
,'HDS_HOTTRACK'
,'HDS_HIDDEN'
,'HDS_DRAGDROP'
,'HDS_FULLDRAG'
,'HDI_WIDTH'
,'HDI_HEIGHT'
,'HDI_TEXT'
,'HDI_FORMAT'
,'HDI_LPARAM'
,'HDI_BITMAP'
,'HDI_IMAGE'
,'HDI_DI_SETITEM'
,'HDI_ORDER'
,'HDF_LEFT'
,'HDF_RIGHT'
,'HDF_CENTER'
,'HDF_JUSTIFYMASK'
,'HDF_RTLREADING'
,'HDF_OWNERDRAW'
,'HDF_STRING'
,'HDF_BITMAP'
,'HDF_BITMAP_ON_RIGHT'
,'HDF_IMAGE'
,'HDM_GETITEMCOUNT'
,'HDM_INSERTITEMW'
,'HDM_INSERTITEMA'
,'HDM_INSERTITEM'
,'HDM_DELETEITEM'
,'HDM_GETITEMW'
,'HDM_GETITEMA'
,'HDM_GETITEM'
,'HDM_SETITEMA'
,'HDM_SETITEMW'
,'HDM_SETITEM'
,'HDM_LAYOUT'
,'HHT_NOWHERE'
,'HHT_ONHEADER'
,'HHT_ONDIVIDER'
,'HHT_ONDIVOPEN'
,'HHT_ABOVE'
,'HHT_BELOW'
,'HHT_TORIGHT'
,'HHT_TOLEFT'
,'HDM_HITTEST'
,'HDM_GETITEMRECT'
,'HDM_SETIMAGELIST'
,'HDM_GETIMAGELIST'
,'HDM_ORDERTOINDEX'
,'HDM_CREATEDRAGIMAGE'
,'HDM_GETORDERARRAY'
,'HDM_SETORDERARRAY'
,'HDM_SETHOTDIVIDER'
,'HDM_SETUNICODEFORMAT'
,'HDM_GETUNICODEFORMAT'
,'HDN_ITEMCHANGINGA'
,'HDN_ITEMCHANGEDA'
,'HDN_ITEMCLICKA'
,'HDN_ITEMDBLCLICKA'
,'HDN_DIVIDERDBLCLICKA'
,'HDN_BEGINTRACKA'
,'HDN_ENDTRACKA'
,'HDN_TRACKA'
,'HDN_GETDISPINFOA'
,'HDN_BEGINDRAG'
,'HDN_ENDDRAG'
,'HDN_ITEMCHANGINGW'
,'HDN_ITEMCHANGEDW'
,'HDN_ITEMCLICKW'
,'HDN_ITEMDBLCLICKW'
,'HDN_DIVIDERDBLCLICKW'
,'HDN_BEGINTRACKW'
,'HDN_ENDTRACKW'
,'HDN_TRACKW'
,'HDN_GETDISPINFOW'
,'HDN_ITEMCHANGING'
,'HDN_ITEMCHANGED'
,'HDN_ITEMCLICK'
,'HDN_ITEMDBLCLICK'
,'HDN_DIVIDERDBLCLICK'
,'HDN_BEGINTRACK'
,'HDN_ENDTRACK'
,'HDN_TRACK'
,'HDN_GETDISPINFO'
,'CMB_MASKED'
,'TBSTATE_CHECKED'
,'TBSTATE_PRESSED'
,'TBSTATE_ENABLED'
,'TBSTATE_HIDDEN'
,'TBSTATE_INDETERMINATE'
,'TBSTATE_WRAP'
,'TBSTATE_ELLIPSES'
,'TBSTATE_MARKED'
,'TBSTYLE_BUTTON'
,'TBSTYLE_SEP'
,'TBSTYLE_CHECK'
,'TBSTYLE_GROUP'
,'TBSTYLE_DROPDOWN'
,'TBSTYLE_AUTOSIZE'
,'TBSTYLE_NOPREFIX'
,'TBSTYLE_TOOLTIPS'
,'TBSTYLE_WRAPABLE'
,'TBSTYLE_ALTDRAG'
,'TBSTYLE_FLAT'
,'TBSTYLE_LIST'
,'TBSTYLE_CUSTOMERASE'
,'TBSTYLE_REGISTERDROP'
,'TBSTYLE_TRANSPARENT'
,'TBSTYLE_EX_DRAWDDARROWS'
,'BTNS_SHOWTEXT'
,'BTNS_WHOLEDROPDOWN'
,'TBSTYLE_EX_MIXEDBUTTONS'
,'TBSTYLE_EX_HIDECLIPPEDBUTTONS'
,'TBSTYLE_EX_DOUBLEBUFFER'
,'TBCDRF_NOEDGES'
,'TBCDRF_HILITEHOTTRACK'
,'TBCDRF_NOOFFSET'
,'TBCDRF_NOMARK'
,'TBCDRF_NOETCHEDEFFECT'
,'TB_ENABLEBUTTON'
,'TB_CHECKBUTTON'
,'TB_PRESSBUTTON'
,'TB_HIDEBUTTON'
,'TB_INDETERMINATE'
,'TB_MARKBUTTON'
,'TB_ISBUTTONENABLED'
,'TB_ISBUTTONCHECKED'
,'TB_ISBUTTONPRESSED'
,'TB_ISBUTTONHIDDEN'
,'TB_ISBUTTONINDETERMINATE'
,'TB_ISBUTTONHIGHLIGHTED'
,'TB_SETSTATE'
,'TB_GETSTATE'
,'TB_ADDBITMAP'
,'HINST_COMMCTRL'
,'IDB_STD_SMALL_COLOR'
,'IDB_STD_LARGE_COLOR'
,'IDB_VIEW_SMALL_COLOR'
,'IDB_VIEW_LARGE_COLOR'
,'IDB_HIST_SMALL_COLOR'
,'IDB_HIST_LARGE_COLOR'
,'STD_CUT'
,'STD_COPY'
,'STD_PASTE'
,'STD_UNDO'
,'STD_REDOW'
,'STD_DELETE'
,'STD_FILENEW'
,'STD_FILEOPEN'
,'STD_FILESAVE'
,'STD_PRINTPRE'
,'STD_PROPERTIES'
,'STD_HELP'
,'STD_FIND'
,'STD_REPLACE'
,'STD_PRINT'
,'VIEW_LARGEICONS'
,'VIEW_SMALLICONS'
,'VIEW_LIST'
,'VIEW_DETAILS'
,'VIEW_SORTNAME'
,'VIEW_SORTSIZE'
,'VIEW_SORTDATE'
,'VIEW_SORTTYPE'
,'VIEW_PARENTFOLDER'
,'VIEW_NETCONNECT'
,'VIEW_NETDISCONNECT'
,'VIEW_NEWFOLDER'
,'VIEW_VIEWMENU'
,'HIST_BACK'
,'HIST_FORWARD'
,'HIST_FAVORITES'
,'HIST_ADDTOFAVORITES'
,'HIST_VIEWTREE'
,'TB_ADDBUTTONSA'
,'TB_INSERTBUTTONA'
,'TB_DELETEBUTTON'
,'TB_GETBUTTON'
,'TB_BUTTONCOUNT'
,'TB_COMMANDTOINDEX'
,'TB_SAVERESTOREA'
,'TB_ADDSTRINGA'
,'TB_GETBUTTONTEXTA'
,'TB_SAVERESTOREW'
,'TB_ADDSTRINGW'
,'TB_GETBUTTONTEXTW'
,'TB_CUSTOMIZE'
,'TB_GETITEMRECT'
,'TB_BUTTONSTRUCTSIZE'
,'TB_SETBUTTONSIZE'
,'TB_SETBITMAPSIZE'
,'TB_AUTOSIZE'
,'TB_GETTOOLTIPS'
,'TB_SETTOOLTIPS'
,'TB_SETPARENT'
,'TB_SETROWS'
,'TB_GETROWS'
,'TB_SETCMDID'
,'TB_CHANGEBITMAP'
,'TB_GETBITMAP'
,'TB_REPLACEBITMAP'
,'TB_SETINDENT'
,'TB_SETIMAGELIST'
,'TB_GETIMAGELIST'
,'TB_LOADIMAGES'
,'TB_GETRECT'
,'TB_SETHOTIMAGELIST'
,'TB_GETHOTIMAGELIST'
,'TB_SETDISABLEDIMAGELIST'
,'TB_GETDISABLEDIMAGELIST'
,'TB_SETSTYLE'
,'TB_GETSTYLE'
,'TB_GETBUTTONSIZE'
,'TB_SETBUTTONWIDTH'
,'TB_SETMAXTEXTROWS'
,'TB_GETTEXTROWS'
,'TB_GETOBJECT'
,'TB_GETHOTITEM'
,'TB_SETHOTITEM'
,'TB_SETANCHORHIGHLIGHT'
,'TB_GETANCHORHIGHLIGHT'
,'TB_MAPACCELERATORA'
,'TBIMHT_AFTER'
,'TBIMHT_BACKGROUND'
,'TB_GETINSERTMARK'
,'TB_SETINSERTMARK'
,'TB_INSERTMARKHITTEST'
,'TB_MOVEBUTTON'
,'TB_GETMAXSIZE'
,'TB_SETEXTENDEDSTYLE'
,'TB_GETEXTENDEDSTYLE'
,'TB_GETPADDING'
,'TB_SETPADDING'
,'TB_SETINSERTMARKCOLOR'
,'TB_GETINSERTMARKCOLOR'
,'TB_SETCOLORSCHEME'
,'TB_GETCOLORSCHEME'
,'TB_SETUNICODEFORMAT'
,'TB_GETUNICODEFORMAT'
,'TB_MAPACCELERATORW'
,'TBBF_LARGE'
,'TB_GETBITMAPFLAGS'
,'TBIF_IMAGE'
,'TBIF_TEXT'
,'TBIF_STATE'
,'TBIF_STYLE'
,'TBIF_LPARAM'
,'TBIF_COMMAND'
,'TBIF_SIZE'
,'TBIF_BYINDEX'
,'TB_GETBUTTONINFOW'
,'TB_SETBUTTONINFOW'
,'TB_GETBUTTONINFOA'
,'TB_SETBUTTONINFOA'
,'TB_INSERTBUTTONW'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,MAXPROPPAGES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,PSP_DEFAULT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,PSP_DLGINDIRECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,PSP_USEHICON));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,PSP_USEICONID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,PSP_USETITLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,PSP_RTLREADING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,PSP_HASHELP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,PSP_USEREFPARENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,PSP_USECALLBACK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,PSP_PREMATURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,PSP_HIDEHEADER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,PSP_USEHEADERTITLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,PSP_USEHEADERSUBTITLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,PSPCB_RELEASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,PSPCB_CREATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,PSH_DEFAULT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,PSH_PROPTITLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,PSH_USEHICON));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,PSH_USEICONID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,PSH_PROPSHEETPAGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,PSH_WIZARDHASFINISH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,PSH_MULTILINETABS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,PSH_WIZARD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,PSH_USEPSTARTPAGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,PSH_NOAPPLYNOW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,PSH_USECALLBACK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,PSH_HASHELP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,PSH_MODELESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,PSH_RTLREADING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,PSH_WIZARDCONTEXTHELP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,PSH_WIZARD97));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,PSH_WATERMARK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,PSH_USEHBMWATERMARK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,PSH_USEHPLWATERMARK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,PSH_STRETCHWATERMARK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,PSH_HEADER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,PSH_USEHBMHEADER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,PSH_USEPAGELANG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,PSCB_INITIALIZED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,PSCB_PRECREATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,PSN_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,PSN_LAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,PSN_SETACTIVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,PSN_KILLACTIVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,PSN_APPLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,PSN_RESET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,PSN_HELP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,PSN_WIZBACK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,PSN_WIZNEXT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,PSN_WIZFINISH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,PSN_QUERYCANCEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,PSN_GETOBJECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,PSNRET_NOERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,PSNRET_INVALID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,PSNRET_INVALID_NOCHANGEPAGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,PSM_SETCURSEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,PSM_REMOVEPAGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,PSM_ADDPAGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,PSM_CHANGED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,PSM_RESTARTWINDOWS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,PSM_REBOOTSYSTEM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,PSM_CANCELTOCLOSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,PSM_QUERYSIBLINGS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,PSM_UNCHANGED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[65] ,PSM_APPLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[66] ,PSM_SETTITLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[67] ,PSM_SETTITLEW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[68] ,PSM_SETWIZBUTTONS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[69] ,PSM_PRESSBUTTON));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[70] ,PSM_SETCURSELID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[71] ,PSM_SETFINISHTEXT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[72] ,PSM_SETFINISHTEXTW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[73] ,PSM_GETTABCONTROL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[74] ,PSM_ISDIALOGMESSAGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[75] ,PSWIZB_BACK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[76] ,PSWIZB_NEXT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[77] ,PSWIZB_FINISH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[78] ,PSWIZB_DISABLEDFINISH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[79] ,PSBTN_BACK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[80] ,PSBTN_NEXT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[81] ,PSBTN_FINISH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[82] ,PSBTN_OK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[83] ,PSBTN_APPLYNOW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[84] ,PSBTN_CANCEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[85] ,PSBTN_HELP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[86] ,PSBTN_MAX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[87] ,ID_PSRESTARTWINDOWS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[88] ,WIZ_CXDLG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[89] ,WIZ_CYDLG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[90] ,WIZ_CXBMP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[91] ,WIZ_BODYX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[92] ,WIZ_BODYCX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[93] ,PROP_SM_CXDLG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[94] ,PROP_SM_CYDLG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[95] ,PROP_MED_CXDLG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[96] ,PROP_MED_CYDLG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[97] ,PROP_LG_CXDLG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[98] ,PROP_LG_CYDLG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[99] ,ICC_LISTVIEW_CLASSES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[100] ,ICC_TREEVIEW_CLASSES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[101] ,ICC_BAR_CLASSES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[102] ,ICC_TAB_CLASSES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[103] ,ICC_UPDOWN_CLASS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[104] ,ICC_PROGRESS_CLASS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[105] ,ICC_HOTKEY_CLASS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[106] ,ICC_ANIMATE_CLASS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[107] ,ICC_WIN95_CLASSES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[108] ,ICC_DATE_CLASSES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[109] ,ICC_USEREX_CLASSES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[110] ,ICC_COOL_CLASSES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[111] ,ICC_INTERNET_CLASSES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[112] ,ICC_PAGESCROLLER_CLASS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[113] ,ICC_NATIVEFNTCTL_CLASS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[114] ,IMAGE_BITMAP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[115] ,ODT_HEADER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[116] ,ODT_TAB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[117] ,ODT_LISTVIEW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[118] ,LVM_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[119] ,TV_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[120] ,HDM_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[121] ,TCM_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[122] ,PGM_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[123] ,CCM_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[124] ,CCM_SETBKCOLOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[125] ,CCM_SETCOLORSCHEME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[126] ,CCM_GETCOLORSCHEME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[127] ,CCM_GETDROPTARGET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[128] ,CCM_SETUNICODEFORMAT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[129] ,CCM_GETUNICODEFORMAT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[130] ,INFOTIPSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[131] ,NM_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[132] ,NM_LAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[133] ,LVN_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[134] ,LVN_LAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[135] ,HDN_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[136] ,HDN_LAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[137] ,TVN_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[138] ,TVN_LAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[139] ,TTN_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[140] ,TTN_LAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[141] ,TCN_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[142] ,TCN_LAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[143] ,CDN_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[144] ,CDN_LAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[145] ,TBN_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[146] ,TBN_LAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[147] ,UDN_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[148] ,UDN_LAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[149] ,MCN_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[150] ,MCN_LAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[151] ,DTN_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[152] ,DTN_LAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[153] ,CBEN_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[154] ,CBEN_LAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[155] ,RBN_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[156] ,RBN_LAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[157] ,IPN_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[158] ,IPN_LAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[159] ,SBN_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[160] ,SBN_LAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[161] ,PGN_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[162] ,PGN_LAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[163] ,MSGF_COMMCTRL_BEGINDRAG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[164] ,MSGF_COMMCTRL_SIZEHEADER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[165] ,MSGF_COMMCTRL_DRAGSELECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[166] ,MSGF_COMMCTRL_TOOLBARCUST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[167] ,NM_OUTOFMEMORY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[168] ,NM_CLICK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[169] ,NM_DBLCLK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[170] ,NM_RETURN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[171] ,NM_RCLICK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[172] ,NM_RDBLCLK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[173] ,NM_SETFOCUS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[174] ,NM_KILLFOCUS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[175] ,NM_CUSTOMDRAW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[176] ,NM_HOVER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[177] ,NM_NCHITTEST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[178] ,NM_KEYDOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[179] ,NM_RELEASEDCAPTURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[180] ,NM_SETCURSOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[181] ,NM_CHAR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[182] ,CDRF_DODEFAULT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[183] ,CDRF_NEWFONT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[184] ,CDRF_SKIPDEFAULT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[185] ,CDRF_NOTIFYPOSTPAINT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[186] ,CDRF_NOTIFYITEMDRAW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[187] ,CDRF_NOTIFYSUBITEMDRAW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[188] ,CDRF_NOTIFYPOSTERASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[189] ,CDDS_PREPAINT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[190] ,CDDS_POSTPAINT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[191] ,CDDS_PREERASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[192] ,CDDS_POSTERASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[193] ,CDDS_ITEM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[194] ,CDDS_ITEMPREPAINT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[195] ,CDDS_ITEMPOSTPAINT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[196] ,CDDS_ITEMPREERASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[197] ,CDDS_ITEMPOSTERASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[198] ,CDDS_SUBITEM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[199] ,CDIS_SELECTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[200] ,CDIS_GRAYED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[201] ,CDIS_DISABLED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[202] ,CDIS_CHECKED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[203] ,CDIS_FOCUS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[204] ,CDIS_DEFAULT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[205] ,CDIS_HOT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[206] ,CDIS_MARKED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[207] ,CDIS_INDETERMINATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[208] ,CDIS_SHOWKEYBOARDCUES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[209] ,CLR_NONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[210] ,CLR_DEFAULT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[211] ,ILC_MASK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[212] ,ILC_COLOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[213] ,ILC_COLORDDB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[214] ,ILC_COLOR4));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[215] ,ILC_COLOR8));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[216] ,ILC_COLOR16));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[217] ,ILC_COLOR24));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[218] ,ILC_COLOR32));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[219] ,ILC_PALETTE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[220] ,ILD_NORMAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[221] ,ILD_TRANSPARENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[222] ,ILD_MASK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[223] ,ILD_IMAGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[224] ,ILD_ROP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[225] ,ILD_BLEND25));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[226] ,ILD_BLEND50));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[227] ,ILD_OVERLAYMASK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[228] ,CLR_HILIGHT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[229] ,ILCF_MOVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[230] ,ILCF_SWAP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[231] ,WC_HEADER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[232] ,HDS_HORZ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[233] ,HDS_BUTTONS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[234] ,HDS_HOTTRACK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[235] ,HDS_HIDDEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[236] ,HDS_DRAGDROP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[237] ,HDS_FULLDRAG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[238] ,HDI_WIDTH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[239] ,HDI_HEIGHT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[240] ,HDI_TEXT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[241] ,HDI_FORMAT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[242] ,HDI_LPARAM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[243] ,HDI_BITMAP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[244] ,HDI_IMAGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[245] ,HDI_DI_SETITEM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[246] ,HDI_ORDER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[247] ,HDF_LEFT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[248] ,HDF_RIGHT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[249] ,HDF_CENTER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[250] ,HDF_JUSTIFYMASK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[251] ,HDF_RTLREADING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[252] ,HDF_OWNERDRAW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[253] ,HDF_STRING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[254] ,HDF_BITMAP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[255] ,HDF_BITMAP_ON_RIGHT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[256] ,HDF_IMAGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[257] ,HDM_GETITEMCOUNT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[258] ,HDM_INSERTITEMW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[259] ,HDM_INSERTITEMA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[260] ,HDM_INSERTITEM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[261] ,HDM_DELETEITEM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[262] ,HDM_GETITEMW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[263] ,HDM_GETITEMA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[264] ,HDM_GETITEM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[265] ,HDM_SETITEMA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[266] ,HDM_SETITEMW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[267] ,HDM_SETITEM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[268] ,HDM_LAYOUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[269] ,HHT_NOWHERE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[270] ,HHT_ONHEADER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[271] ,HHT_ONDIVIDER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[272] ,HHT_ONDIVOPEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[273] ,HHT_ABOVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[274] ,HHT_BELOW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[275] ,HHT_TORIGHT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[276] ,HHT_TOLEFT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[277] ,HDM_HITTEST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[278] ,HDM_GETITEMRECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[279] ,HDM_SETIMAGELIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[280] ,HDM_GETIMAGELIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[281] ,HDM_ORDERTOINDEX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[282] ,HDM_CREATEDRAGIMAGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[283] ,HDM_GETORDERARRAY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[284] ,HDM_SETORDERARRAY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[285] ,HDM_SETHOTDIVIDER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[286] ,HDM_SETUNICODEFORMAT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[287] ,HDM_GETUNICODEFORMAT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[288] ,HDN_ITEMCHANGINGA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[289] ,HDN_ITEMCHANGEDA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[290] ,HDN_ITEMCLICKA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[291] ,HDN_ITEMDBLCLICKA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[292] ,HDN_DIVIDERDBLCLICKA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[293] ,HDN_BEGINTRACKA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[294] ,HDN_ENDTRACKA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[295] ,HDN_TRACKA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[296] ,HDN_GETDISPINFOA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[297] ,HDN_BEGINDRAG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[298] ,HDN_ENDDRAG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[299] ,HDN_ITEMCHANGINGW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[300] ,HDN_ITEMCHANGEDW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[301] ,HDN_ITEMCLICKW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[302] ,HDN_ITEMDBLCLICKW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[303] ,HDN_DIVIDERDBLCLICKW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[304] ,HDN_BEGINTRACKW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[305] ,HDN_ENDTRACKW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[306] ,HDN_TRACKW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[307] ,HDN_GETDISPINFOW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[308] ,HDN_ITEMCHANGING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[309] ,HDN_ITEMCHANGED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[310] ,HDN_ITEMCLICK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[311] ,HDN_ITEMDBLCLICK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[312] ,HDN_DIVIDERDBLCLICK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[313] ,HDN_BEGINTRACK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[314] ,HDN_ENDTRACK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[315] ,HDN_TRACK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[316] ,HDN_GETDISPINFO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[317] ,CMB_MASKED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[318] ,TBSTATE_CHECKED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[319] ,TBSTATE_PRESSED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[320] ,TBSTATE_ENABLED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[321] ,TBSTATE_HIDDEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[322] ,TBSTATE_INDETERMINATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[323] ,TBSTATE_WRAP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[324] ,TBSTATE_ELLIPSES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[325] ,TBSTATE_MARKED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[326] ,TBSTYLE_BUTTON));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[327] ,TBSTYLE_SEP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[328] ,TBSTYLE_CHECK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[329] ,TBSTYLE_GROUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[330] ,TBSTYLE_DROPDOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[331] ,TBSTYLE_AUTOSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[332] ,TBSTYLE_NOPREFIX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[333] ,TBSTYLE_TOOLTIPS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[334] ,TBSTYLE_WRAPABLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[335] ,TBSTYLE_ALTDRAG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[336] ,TBSTYLE_FLAT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[337] ,TBSTYLE_LIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[338] ,TBSTYLE_CUSTOMERASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[339] ,TBSTYLE_REGISTERDROP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[340] ,TBSTYLE_TRANSPARENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[341] ,TBSTYLE_EX_DRAWDDARROWS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[342] ,BTNS_SHOWTEXT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[343] ,BTNS_WHOLEDROPDOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[344] ,TBSTYLE_EX_MIXEDBUTTONS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[345] ,TBSTYLE_EX_HIDECLIPPEDBUTTONS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[346] ,TBSTYLE_EX_DOUBLEBUFFER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[347] ,TBCDRF_NOEDGES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[348] ,TBCDRF_HILITEHOTTRACK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[349] ,TBCDRF_NOOFFSET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[350] ,TBCDRF_NOMARK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[351] ,TBCDRF_NOETCHEDEFFECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[352] ,TB_ENABLEBUTTON));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[353] ,TB_CHECKBUTTON));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[354] ,TB_PRESSBUTTON));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[355] ,TB_HIDEBUTTON));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[356] ,TB_INDETERMINATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[357] ,TB_MARKBUTTON));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[358] ,TB_ISBUTTONENABLED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[359] ,TB_ISBUTTONCHECKED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[360] ,TB_ISBUTTONPRESSED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[361] ,TB_ISBUTTONHIDDEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[362] ,TB_ISBUTTONINDETERMINATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[363] ,TB_ISBUTTONHIGHLIGHTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[364] ,TB_SETSTATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[365] ,TB_GETSTATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[366] ,TB_ADDBITMAP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[367] ,HINST_COMMCTRL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[368] ,IDB_STD_SMALL_COLOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[369] ,IDB_STD_LARGE_COLOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[370] ,IDB_VIEW_SMALL_COLOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[371] ,IDB_VIEW_LARGE_COLOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[372] ,IDB_HIST_SMALL_COLOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[373] ,IDB_HIST_LARGE_COLOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[374] ,STD_CUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[375] ,STD_COPY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[376] ,STD_PASTE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[377] ,STD_UNDO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[378] ,STD_REDOW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[379] ,STD_DELETE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[380] ,STD_FILENEW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[381] ,STD_FILEOPEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[382] ,STD_FILESAVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[383] ,STD_PRINTPRE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[384] ,STD_PROPERTIES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[385] ,STD_HELP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[386] ,STD_FIND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[387] ,STD_REPLACE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[388] ,STD_PRINT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[389] ,VIEW_LARGEICONS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[390] ,VIEW_SMALLICONS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[391] ,VIEW_LIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[392] ,VIEW_DETAILS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[393] ,VIEW_SORTNAME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[394] ,VIEW_SORTSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[395] ,VIEW_SORTDATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[396] ,VIEW_SORTTYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[397] ,VIEW_PARENTFOLDER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[398] ,VIEW_NETCONNECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[399] ,VIEW_NETDISCONNECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[400] ,VIEW_NEWFOLDER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[401] ,VIEW_VIEWMENU));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[402] ,HIST_BACK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[403] ,HIST_FORWARD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[404] ,HIST_FAVORITES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[405] ,HIST_ADDTOFAVORITES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[406] ,HIST_VIEWTREE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[407] ,TB_ADDBUTTONSA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[408] ,TB_INSERTBUTTONA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[409] ,TB_DELETEBUTTON));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[410] ,TB_GETBUTTON));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[411] ,TB_BUTTONCOUNT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[412] ,TB_COMMANDTOINDEX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[413] ,TB_SAVERESTOREA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[414] ,TB_ADDSTRINGA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[415] ,TB_GETBUTTONTEXTA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[416] ,TB_SAVERESTOREW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[417] ,TB_ADDSTRINGW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[418] ,TB_GETBUTTONTEXTW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[419] ,TB_CUSTOMIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[420] ,TB_GETITEMRECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[421] ,TB_BUTTONSTRUCTSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[422] ,TB_SETBUTTONSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[423] ,TB_SETBITMAPSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[424] ,TB_AUTOSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[425] ,TB_GETTOOLTIPS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[426] ,TB_SETTOOLTIPS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[427] ,TB_SETPARENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[428] ,TB_SETROWS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[429] ,TB_GETROWS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[430] ,TB_SETCMDID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[431] ,TB_CHANGEBITMAP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[432] ,TB_GETBITMAP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[433] ,TB_REPLACEBITMAP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[434] ,TB_SETINDENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[435] ,TB_SETIMAGELIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[436] ,TB_GETIMAGELIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[437] ,TB_LOADIMAGES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[438] ,TB_GETRECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[439] ,TB_SETHOTIMAGELIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[440] ,TB_GETHOTIMAGELIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[441] ,TB_SETDISABLEDIMAGELIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[442] ,TB_GETDISABLEDIMAGELIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[443] ,TB_SETSTYLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[444] ,TB_GETSTYLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[445] ,TB_GETBUTTONSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[446] ,TB_SETBUTTONWIDTH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[447] ,TB_SETMAXTEXTROWS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[448] ,TB_GETTEXTROWS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[449] ,TB_GETOBJECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[450] ,TB_GETHOTITEM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[451] ,TB_SETHOTITEM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[452] ,TB_SETANCHORHIGHLIGHT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[453] ,TB_GETANCHORHIGHLIGHT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[454] ,TB_MAPACCELERATORA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[455] ,TBIMHT_AFTER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[456] ,TBIMHT_BACKGROUND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[457] ,TB_GETINSERTMARK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[458] ,TB_SETINSERTMARK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[459] ,TB_INSERTMARKHITTEST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[460] ,TB_MOVEBUTTON));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[461] ,TB_GETMAXSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[462] ,TB_SETEXTENDEDSTYLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[463] ,TB_GETEXTENDEDSTYLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[464] ,TB_GETPADDING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[465] ,TB_SETPADDING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[466] ,TB_SETINSERTMARKCOLOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[467] ,TB_GETINSERTMARKCOLOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[468] ,TB_SETCOLORSCHEME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[469] ,TB_GETCOLORSCHEME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[470] ,TB_SETUNICODEFORMAT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[471] ,TB_GETUNICODEFORMAT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[472] ,TB_MAPACCELERATORW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[473] ,TBBF_LARGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[474] ,TB_GETBITMAPFLAGS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[475] ,TBIF_IMAGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[476] ,TBIF_TEXT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[477] ,TBIF_STATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[478] ,TBIF_STYLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[479] ,TBIF_LPARAM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[480] ,TBIF_COMMAND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[481] ,TBIF_SIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[482] ,TBIF_BYINDEX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[483] ,TB_GETBUTTONINFOW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[484] ,TB_SETBUTTONINFOW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[485] ,TB_GETBUTTONINFOA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[486] ,TB_SETBUTTONINFOA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[487] ,TB_INSERTBUTTONW));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const __ConstNames1 : array[0..473] of string = (
'TB_ADDBUTTONSW'
,'TB_HITTEST'
,'TB_SETDRAWTEXTFLAGS'
,'TB_GETSTRING'
,'HICF_OTHER'
,'HICF_MOUSE'
,'HICF_ARROWKEYS'
,'HICF_ACCELERATOR'
,'HICF_DUPACCEL'
,'HICF_ENTERING'
,'HICF_LEAVING'
,'HICF_RESELECT'
,'TBNF_IMAGE'
,'TBNF_TEXT'
,'TBNF_DI_SETITEM'
,'TBDDRET_DEFAULT'
,'TBDDRET_NODEFAULT'
,'TBDDRET_TREATPRESSED'
,'REBARCLASSNAME'
,'RBIM_IMAGELIST'
,'RBS_TOOLTIPS'
,'RBS_VARHEIGHT'
,'RBS_BANDBORDERS'
,'RBS_FIXEDORDER'
,'RBS_REGISTERDROP'
,'RBS_AUTOSIZE'
,'RBS_VERTICALGRIPPER'
,'RBS_DBLCLKTOGGLE'
,'RBBS_BREAK'
,'RBBS_FIXEDSIZE'
,'RBBS_CHILDEDGE'
,'RBBS_HIDDEN'
,'RBBS_NOVERT'
,'RBBS_FIXEDBMP'
,'RBBS_VARIABLEHEIGHT'
,'RBBS_GRIPPERALWAYS'
,'RBBS_NOGRIPPER'
,'RBBIM_STYLE'
,'RBBIM_COLORS'
,'RBBIM_TEXT'
,'RBBIM_IMAGE'
,'RBBIM_CHILD'
,'RBBIM_CHILDSIZE'
,'RBBIM_SIZE'
,'RBBIM_BACKGROUND'
,'RBBIM_ID'
,'RBBIM_IDEALSIZE'
,'RBBIM_LPARAM'
,'RBBIM_HEADERSIZE'
,'RB_INSERTBANDA'
,'RB_DELETEBAND'
,'RB_GETBARINFO'
,'RB_SETBARINFO'
,'RB_GETBANDINFO_PRE_IE4'
,'RB_SETBANDINFOA'
,'RB_SETPARENT'
,'RB_HITTEST'
,'RB_GETRECT'
,'RB_INSERTBANDW'
,'RB_SETBANDINFOW'
,'RB_GETBANDCOUNT'
,'RB_GETROWCOUNT'
,'RB_GETROWHEIGHT'
,'RB_IDTOINDEX'
,'RB_GETTOOLTIPS'
,'RB_SETTOOLTIPS'
,'RB_SETBKCOLOR'
,'RB_GETBKCOLOR'
,'RB_SETTEXTCOLOR'
,'RB_GETTEXTCOLOR'
,'RB_SIZETORECT'
,'RB_BEGINDRAG'
,'RB_ENDDRAG'
,'RB_DRAGMOVE'
,'RB_GETBARHEIGHT'
,'RB_GETBANDINFOW'
,'RB_GETBANDINFOA'
,'RB_MINIMIZEBAND'
,'RB_MAXIMIZEBAND'
,'RB_GETDROPTARGET'
,'RB_GETBANDBORDERS'
,'RB_SHOWBAND'
,'RB_SETPALETTE'
,'RB_GETPALETTE'
,'RB_MOVEBAND'
,'RB_SETUNICODEFORMAT'
,'RB_GETUNICODEFORMAT'
,'RB_INSERTBAND'
,'RB_SETBANDINFO'
,'RB_GETBANDINFO'
,'RBN_HEIGHTCHANGE'
,'RBN_GETOBJECT'
,'RBN_LAYOUTCHANGED'
,'RBN_AUTOSIZE'
,'RBN_BEGINDRAG'
,'RBN_ENDDRAG'
,'RBN_DELETINGBAND'
,'RBN_DELETEDBAND'
,'RBN_CHILDSIZE'
,'RBNM_ID'
,'RBNM_STYLE'
,'RBNM_LPARAM'
,'RBHT_NOWHERE'
,'RBHT_CAPTION'
,'RBHT_CLIENT'
,'RBHT_GRABBER'
,'TOOLTIPS_CLASS'
,'TTS_ALWAYSTIP'
,'TTS_NOPREFIX'
,'TTF_IDISHWND'
,'TTF_CENTERTIP'
,'TTF_RTLREADING'
,'TTF_SUBCLASS'
,'TTF_TRACK'
,'TTF_ABSOLUTE'
,'TTF_TRANSPARENT'
,'TTF_DI_SETITEM'
,'TTDT_AUTOMATIC'
,'TTDT_RESHOW'
,'TTDT_AUTOPOP'
,'TTDT_INITIAL'
,'TTM_ACTIVATE'
,'TTM_SETDELAYTIME'
,'TTM_ADDTOOLA'
,'TTM_DELTOOLA'
,'TTM_NEWTOOLRECTA'
,'TTM_GETTOOLINFOA'
,'TTM_SETTOOLINFOA'
,'TTM_HITTESTA'
,'TTM_GETTEXTA'
,'TTM_UPDATETIPTEXTA'
,'TTM_ENUMTOOLSA'
,'TTM_GETCURRENTTOOLA'
,'TTM_ADDTOOLW'
,'TTM_DELTOOLW'
,'TTM_NEWTOOLRECTW'
,'TTM_GETTOOLINFOW'
,'TTM_SETTOOLINFOW'
,'TTM_HITTESTW'
,'TTM_GETTEXTW'
,'TTM_UPDATETIPTEXTW'
,'TTM_ENUMTOOLSW'
,'TTM_GETCURRENTTOOLW'
,'TTM_WINDOWFROMPOINT'
,'TTM_TRACKACTIVATE'
,'TTM_TRACKPOSITION'
,'TTM_SETTIPBKCOLOR'
,'TTM_SETTIPTEXTCOLOR'
,'TTM_GETDELAYTIME'
,'TTM_GETTIPBKCOLOR'
,'TTM_GETTIPTEXTCOLOR'
,'TTM_SETMAXTIPWIDTH'
,'TTM_GETMAXTIPWIDTH'
,'TTM_SETMARGIN'
,'TTM_GETMARGIN'
,'TTM_POP'
,'TTM_UPDATE'
,'TTM_RELAYEVENT'
,'TTM_GETTOOLCOUNT'
,'SBARS_SIZEGRIP'
,'STATUSCLASSNAME'
,'SB_SETTEXTA'
,'SB_GETTEXTA'
,'SB_GETTEXTLENGTHA'
,'SB_SETTIPTEXTA'
,'SB_GETTIPTEXTA'
,'SB_SETTEXTW'
,'SB_GETTEXTW'
,'SB_GETTEXTLENGTHW'
,'SB_SETTIPTEXTW'
,'SB_GETTIPTEXTW'
,'SB_SETTEXT'
,'SB_GETTEXT'
,'SB_GETTEXTLENGTH'
,'SB_SETTIPTEXT'
,'SB_GETTIPTEXT'
,'SB_SETPARTS'
,'SB_GETPARTS'
,'SB_GETBORDERS'
,'SB_SETMINHEIGHT'
,'SB_SIMPLE'
,'SB_GETRECT'
,'SB_ISSIMPLE'
,'SB_SETICON'
,'SB_GETICON'
,'SB_SETUNICODEFORMAT'
,'SB_GETUNICODEFORMAT'
,'SBT_OWNERDRAW'
,'SBT_NOBORDERS'
,'SBT_POPOUT'
,'SBT_RTLREADING'
,'SBT_TOOLTIPS'
,'SB_SETBKCOLOR'
,'SBN_SIMPLEMODECHANGE'
,'MINSYSCOMMAND'
,'TRACKBAR_CLASS'
,'TBS_AUTOTICKS'
,'TBS_VERT'
,'TBS_HORZ'
,'TBS_TOP'
,'TBS_BOTTOM'
,'TBS_LEFT'
,'TBS_RIGHT'
,'TBS_BOTH'
,'TBS_NOTICKS'
,'TBS_ENABLESELRANGE'
,'TBS_FIXEDLENGTH'
,'TBS_NOTHUMB'
,'TBS_TOOLTIPS'
,'TBM_GETPOS'
,'TBM_GETRANGEMIN'
,'TBM_GETRANGEMAX'
,'TBM_GETTIC'
,'TBM_SETTIC'
,'TBM_SETPOS'
,'TBM_SETRANGE'
,'TBM_SETRANGEMIN'
,'TBM_SETRANGEMAX'
,'TBM_CLEARTICS'
,'TBM_SETSEL'
,'TBM_SETSELSTART'
,'TBM_SETSELEND'
,'TBM_GETPTICS'
,'TBM_GETTICPOS'
,'TBM_GETNUMTICS'
,'TBM_GETSELSTART'
,'TBM_GETSELEND'
,'TBM_CLEARSEL'
,'TBM_SETTICFREQ'
,'TBM_SETPAGESIZE'
,'TBM_GETPAGESIZE'
,'TBM_SETLINESIZE'
,'TBM_GETLINESIZE'
,'TBM_GETTHUMBRECT'
,'TBM_GETCHANNELRECT'
,'TBM_SETTHUMBLENGTH'
,'TBM_GETTHUMBLENGTH'
,'TBM_SETTOOLTIPS'
,'TBM_GETTOOLTIPS'
,'TBM_SETTIPSIDE'
,'TBTS_TOP'
,'TBTS_LEFT'
,'TBTS_BOTTOM'
,'TBTS_RIGHT'
,'TBM_SETBUDDY'
,'TBM_GETBUDDY'
,'TBM_SETUNICODEFORMAT'
,'TBM_GETUNICODEFORMAT'
,'TB_LINEUP'
,'TB_LINEDOWN'
,'TB_PAGEUP'
,'TB_PAGEDOWN'
,'TB_THUMBPOSITION'
,'TB_THUMBTRACK'
,'TB_TOP'
,'TB_BOTTOM'
,'TB_ENDTRACK'
,'TBCD_TICS'
,'TBCD_THUMB'
,'TBCD_CHANNEL'
,'DL_BEGINDRAG'
,'DL_DRAGGING'
,'DL_DROPPED'
,'DL_CANCELDRAG'
,'DL_CURSORSET'
,'DL_STOPCURSOR'
,'DL_COPYCURSOR'
,'DL_MOVECURSOR'
,'DRAGLISTMSGSTRING'
,'UPDOWN_CLASS'
,'UD_MAXVAL'
,'UD_MINVAL'
,'UDS_WRAP'
,'UDS_SETBUDDYINT'
,'UDS_ALIGNRIGHT'
,'UDS_ALIGNLEFT'
,'UDS_AUTOBUDDY'
,'UDS_ARROWKEYS'
,'UDS_HORZ'
,'UDS_NOTHOUSANDS'
,'UDS_HOTTRACK'
,'UDM_SETRANGE'
,'UDM_GETRANGE'
,'UDM_SETPOS'
,'UDM_GETPOS'
,'UDM_SETBUDDY'
,'UDM_GETBUDDY'
,'UDM_SETACCEL'
,'UDM_GETACCEL'
,'UDM_SETBASE'
,'UDM_GETBASE'
,'UDM_SETRANGE32'
,'UDM_GETRANGE32'
,'UDM_SETUNICODEFORMAT'
,'UDM_GETUNICODEFORMAT'
,'UDN_DELTAPOS'
,'PROGRESS_CLASS'
,'PBS_SMOOTH'
,'PBS_VERTICAL'
,'PBM_SETRANGE'
,'PBM_SETPOS'
,'PBM_DELTAPOS'
,'PBM_SETSTEP'
,'PBM_STEPIT'
,'PBM_SETRANGE32'
,'PBM_GETRANGE'
,'PBM_GETPOS'
,'PBM_SETBARCOLOR'
,'PBM_SETBKCOLOR'
,'HOTKEYF_SHIFT'
,'HOTKEYF_CONTROL'
,'HOTKEYF_ALT'
,'HOTKEYF_EXT'
,'HKCOMB_NONE'
,'HKCOMB_S'
,'HKCOMB_C'
,'HKCOMB_A'
,'HKCOMB_SC'
,'HKCOMB_SA'
,'HKCOMB_CA'
,'HKCOMB_SCA'
,'HKM_SETHOTKEY'
,'HKM_GETHOTKEY'
,'HKM_SETRULES'
,'HOTKEYCLASS'
,'CCS_TOP'
,'CCS_NOMOVEY'
,'CCS_BOTTOM'
,'CCS_NORESIZE'
,'CCS_NOPARENTALIGN'
,'CCS_ADJUSTABLE'
,'CCS_NODIVIDER'
,'CCS_VERT'
,'CCS_LEFT'
,'CCS_RIGHT'
,'CCS_NOMOVEX'
,'WC_LISTVIEW'
,'LVS_ICON'
,'LVS_REPORT'
,'LVS_SMALLICON'
,'LVS_LIST'
,'LVS_TYPEMASK'
,'LVS_SINGLESEL'
,'LVS_SHOWSELALWAYS'
,'LVS_SORTASCENDING'
,'LVS_SORTDESCENDING'
,'LVS_SHAREIMAGELISTS'
,'LVS_NOLABELWRAP'
,'LVS_AUTOARRANGE'
,'LVS_EDITLABELS'
,'LVS_OWNERDATA'
,'LVS_NOSCROLL'
,'LVS_TYPESTYLEMASK'
,'LVS_ALIGNTOP'
,'LVS_ALIGNLEFT'
,'LVS_ALIGNMASK'
,'LVS_OWNERDRAWFIXED'
,'LVS_NOCOLUMNHEADER'
,'LVS_NOSORTHEADER'
,'LVS_EX_GRIDLINES'
,'LVS_EX_SUBITEMIMAGES'
,'LVS_EX_CHECKBOXES'
,'LVS_EX_TRACKSELECT'
,'LVS_EX_HEADERDRAGDROP'
,'LVS_EX_FULLROWSELECT'
,'LVS_EX_ONECLICKACTIVATE'
,'LVS_EX_TWOCLICKACTIVATE'
,'LVS_EX_FLATSB'
,'LVS_EX_REGIONAL'
,'LVS_EX_INFOTIP'
,'LVS_EX_UNDERLINEHOT'
,'LVS_EX_UNDERLINECOLD'
,'LVS_EX_MULTIWORKAREAS'
,'LVM_SETUNICODEFORMAT'
,'LVM_GETUNICODEFORMAT'
,'LVM_GETBKCOLOR'
,'LVM_SETBKCOLOR'
,'LVM_GETIMAGELIST'
,'LVSIL_NORMAL'
,'LVSIL_SMALL'
,'LVSIL_STATE'
,'LVM_SETIMAGELIST'
,'LVM_GETITEMCOUNT'
,'LVIF_TEXT'
,'LVIF_IMAGE'
,'LVIF_PARAM'
,'LVIF_STATE'
,'LVIF_INDENT'
,'LVIF_NORECOMPUTE'
,'LVIS_FOCUSED'
,'LVIS_SELECTED'
,'LVIS_CUT'
,'LVIS_DROPHILITED'
,'LVIS_ACTIVATING'
,'LVIS_OVERLAYMASK'
,'LVIS_STATEIMAGEMASK'
,'I_INDENTCALLBACK'
,'I_IMAGENONE'
,'I_COLUMNSCALLBACK'
,'LPSTR_TEXTCALLBACKA'
,'LPSTR_TEXTCALLBACKW'
,'LPSTR_TEXTCALLBACK'
,'I_IMAGECALLBACK'
,'LVM_GETITEMA'
,'LVM_SETITEMA'
,'LVM_INSERTITEMA'
,'LVM_GETITEMW'
,'LVM_SETITEMW'
,'LVM_INSERTITEMW'
,'LVM_GETITEM'
,'LVM_SETITEM'
,'LVM_INSERTITEM'
,'LVM_DELETEITEM'
,'LVM_DELETEALLITEMS'
,'LVM_GETCALLBACKMASK'
,'LVM_SETCALLBACKMASK'
,'LVNI_ALL'
,'LVNI_FOCUSED'
,'LVNI_SELECTED'
,'LVNI_CUT'
,'LVNI_DROPHILITED'
,'LVNI_ABOVE'
,'LVNI_BELOW'
,'LVNI_TOLEFT'
,'LVNI_TORIGHT'
,'LVM_GETNEXTITEM'
,'LVFI_PARAM'
,'LVFI_STRING'
,'LVFI_PARTIAL'
,'LVFI_WRAP'
,'LVFI_NEARESTXY'
,'LVM_FINDITEMA'
,'LVM_FINDITEMW'
,'LVM_FINDITEM'
,'LVIR_BOUNDS'
,'LVIR_ICON'
,'LVIR_LABEL'
,'LVIR_SELECTBOUNDS'
,'LVM_GETITEMRECT'
,'LVM_SETITEMPOSITION'
,'LVM_GETITEMPOSITION'
,'LVM_GETSTRINGWIDTHA'
,'LVM_GETSTRINGWIDTHW'
,'LVM_GETSTRINGWIDTH'
,'LVHT_NOWHERE'
,'LVHT_ONITEMICON'
,'LVHT_ONITEMLABEL'
,'LVHT_ONITEMSTATEICON'
,'LVHT_ONITEM'
,'LVHT_ABOVE'
,'LVHT_BELOW'
,'LVHT_TORIGHT'
,'LVHT_TOLEFT'
,'LVM_HITTEST'
,'LVM_ENSUREVISIBLE'
,'LVM_SCROLL'
,'LVM_REDRAWITEMS'
,'LVA_DEFAULT'
,'LVA_ALIGNLEFT'
,'LVA_ALIGNTOP'
,'LVA_ALIGNRIGHT'
,'LVA_ALIGNBOTTOM'
,'LVA_SNAPTOGRID'
,'LVA_SORTASCENDING'
,'LVA_SORTDESCENDING'
,'LVM_ARRANGE'
,'LVM_EDITLABELA'
,'LVM_EDITLABELW'
,'LVM_EDITLABEL'
,'LVM_GETEDITCONTROL'
,'LVCF_FMT'
,'LVCF_WIDTH'
,'LVCF_TEXT'
,'LVCF_SUBITEM'
);
var __RegisteredConstsList1 : TList;
procedure __RegisterConsts1;
begin
__RegisteredConstsList1 := TList.Create;
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[0] ,TB_ADDBUTTONSW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[1] ,TB_HITTEST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[2] ,TB_SETDRAWTEXTFLAGS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[3] ,TB_GETSTRING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[4] ,HICF_OTHER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[5] ,HICF_MOUSE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[6] ,HICF_ARROWKEYS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[7] ,HICF_ACCELERATOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[8] ,HICF_DUPACCEL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[9] ,HICF_ENTERING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[10] ,HICF_LEAVING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[11] ,HICF_RESELECT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[12] ,TBNF_IMAGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[13] ,TBNF_TEXT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[14] ,TBNF_DI_SETITEM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[15] ,TBDDRET_DEFAULT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[16] ,TBDDRET_NODEFAULT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[17] ,TBDDRET_TREATPRESSED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[18] ,REBARCLASSNAME));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[19] ,RBIM_IMAGELIST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[20] ,RBS_TOOLTIPS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[21] ,RBS_VARHEIGHT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[22] ,RBS_BANDBORDERS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[23] ,RBS_FIXEDORDER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[24] ,RBS_REGISTERDROP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[25] ,RBS_AUTOSIZE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[26] ,RBS_VERTICALGRIPPER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[27] ,RBS_DBLCLKTOGGLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[28] ,RBBS_BREAK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[29] ,RBBS_FIXEDSIZE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[30] ,RBBS_CHILDEDGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[31] ,RBBS_HIDDEN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[32] ,RBBS_NOVERT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[33] ,RBBS_FIXEDBMP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[34] ,RBBS_VARIABLEHEIGHT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[35] ,RBBS_GRIPPERALWAYS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[36] ,RBBS_NOGRIPPER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[37] ,RBBIM_STYLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[38] ,RBBIM_COLORS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[39] ,RBBIM_TEXT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[40] ,RBBIM_IMAGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[41] ,RBBIM_CHILD));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[42] ,RBBIM_CHILDSIZE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[43] ,RBBIM_SIZE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[44] ,RBBIM_BACKGROUND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[45] ,RBBIM_ID));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[46] ,RBBIM_IDEALSIZE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[47] ,RBBIM_LPARAM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[48] ,RBBIM_HEADERSIZE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[49] ,RB_INSERTBANDA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[50] ,RB_DELETEBAND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[51] ,RB_GETBARINFO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[52] ,RB_SETBARINFO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[53] ,RB_GETBANDINFO_PRE_IE4));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[54] ,RB_SETBANDINFOA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[55] ,RB_SETPARENT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[56] ,RB_HITTEST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[57] ,RB_GETRECT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[58] ,RB_INSERTBANDW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[59] ,RB_SETBANDINFOW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[60] ,RB_GETBANDCOUNT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[61] ,RB_GETROWCOUNT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[62] ,RB_GETROWHEIGHT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[63] ,RB_IDTOINDEX));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[64] ,RB_GETTOOLTIPS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[65] ,RB_SETTOOLTIPS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[66] ,RB_SETBKCOLOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[67] ,RB_GETBKCOLOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[68] ,RB_SETTEXTCOLOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[69] ,RB_GETTEXTCOLOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[70] ,RB_SIZETORECT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[71] ,RB_BEGINDRAG));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[72] ,RB_ENDDRAG));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[73] ,RB_DRAGMOVE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[74] ,RB_GETBARHEIGHT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[75] ,RB_GETBANDINFOW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[76] ,RB_GETBANDINFOA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[77] ,RB_MINIMIZEBAND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[78] ,RB_MAXIMIZEBAND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[79] ,RB_GETDROPTARGET));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[80] ,RB_GETBANDBORDERS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[81] ,RB_SHOWBAND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[82] ,RB_SETPALETTE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[83] ,RB_GETPALETTE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[84] ,RB_MOVEBAND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[85] ,RB_SETUNICODEFORMAT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[86] ,RB_GETUNICODEFORMAT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[87] ,RB_INSERTBAND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[88] ,RB_SETBANDINFO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[89] ,RB_GETBANDINFO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[90] ,RBN_HEIGHTCHANGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[91] ,RBN_GETOBJECT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[92] ,RBN_LAYOUTCHANGED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[93] ,RBN_AUTOSIZE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[94] ,RBN_BEGINDRAG));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[95] ,RBN_ENDDRAG));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[96] ,RBN_DELETINGBAND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[97] ,RBN_DELETEDBAND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[98] ,RBN_CHILDSIZE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[99] ,RBNM_ID));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[100] ,RBNM_STYLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[101] ,RBNM_LPARAM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[102] ,RBHT_NOWHERE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[103] ,RBHT_CAPTION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[104] ,RBHT_CLIENT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[105] ,RBHT_GRABBER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[106] ,TOOLTIPS_CLASS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[107] ,TTS_ALWAYSTIP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[108] ,TTS_NOPREFIX));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[109] ,TTF_IDISHWND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[110] ,TTF_CENTERTIP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[111] ,TTF_RTLREADING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[112] ,TTF_SUBCLASS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[113] ,TTF_TRACK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[114] ,TTF_ABSOLUTE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[115] ,TTF_TRANSPARENT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[116] ,TTF_DI_SETITEM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[117] ,TTDT_AUTOMATIC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[118] ,TTDT_RESHOW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[119] ,TTDT_AUTOPOP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[120] ,TTDT_INITIAL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[121] ,TTM_ACTIVATE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[122] ,TTM_SETDELAYTIME));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[123] ,TTM_ADDTOOLA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[124] ,TTM_DELTOOLA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[125] ,TTM_NEWTOOLRECTA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[126] ,TTM_GETTOOLINFOA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[127] ,TTM_SETTOOLINFOA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[128] ,TTM_HITTESTA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[129] ,TTM_GETTEXTA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[130] ,TTM_UPDATETIPTEXTA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[131] ,TTM_ENUMTOOLSA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[132] ,TTM_GETCURRENTTOOLA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[133] ,TTM_ADDTOOLW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[134] ,TTM_DELTOOLW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[135] ,TTM_NEWTOOLRECTW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[136] ,TTM_GETTOOLINFOW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[137] ,TTM_SETTOOLINFOW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[138] ,TTM_HITTESTW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[139] ,TTM_GETTEXTW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[140] ,TTM_UPDATETIPTEXTW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[141] ,TTM_ENUMTOOLSW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[142] ,TTM_GETCURRENTTOOLW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[143] ,TTM_WINDOWFROMPOINT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[144] ,TTM_TRACKACTIVATE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[145] ,TTM_TRACKPOSITION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[146] ,TTM_SETTIPBKCOLOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[147] ,TTM_SETTIPTEXTCOLOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[148] ,TTM_GETDELAYTIME));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[149] ,TTM_GETTIPBKCOLOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[150] ,TTM_GETTIPTEXTCOLOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[151] ,TTM_SETMAXTIPWIDTH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[152] ,TTM_GETMAXTIPWIDTH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[153] ,TTM_SETMARGIN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[154] ,TTM_GETMARGIN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[155] ,TTM_POP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[156] ,TTM_UPDATE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[157] ,TTM_RELAYEVENT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[158] ,TTM_GETTOOLCOUNT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[159] ,SBARS_SIZEGRIP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[160] ,STATUSCLASSNAME));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[161] ,SB_SETTEXTA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[162] ,SB_GETTEXTA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[163] ,SB_GETTEXTLENGTHA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[164] ,SB_SETTIPTEXTA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[165] ,SB_GETTIPTEXTA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[166] ,SB_SETTEXTW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[167] ,SB_GETTEXTW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[168] ,SB_GETTEXTLENGTHW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[169] ,SB_SETTIPTEXTW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[170] ,SB_GETTIPTEXTW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[171] ,SB_SETTEXT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[172] ,SB_GETTEXT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[173] ,SB_GETTEXTLENGTH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[174] ,SB_SETTIPTEXT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[175] ,SB_GETTIPTEXT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[176] ,SB_SETPARTS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[177] ,SB_GETPARTS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[178] ,SB_GETBORDERS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[179] ,SB_SETMINHEIGHT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[180] ,SB_SIMPLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[181] ,SB_GETRECT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[182] ,SB_ISSIMPLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[183] ,SB_SETICON));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[184] ,SB_GETICON));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[185] ,SB_SETUNICODEFORMAT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[186] ,SB_GETUNICODEFORMAT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[187] ,SBT_OWNERDRAW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[188] ,SBT_NOBORDERS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[189] ,SBT_POPOUT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[190] ,SBT_RTLREADING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[191] ,SBT_TOOLTIPS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[192] ,SB_SETBKCOLOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[193] ,SBN_SIMPLEMODECHANGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[194] ,MINSYSCOMMAND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[195] ,TRACKBAR_CLASS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[196] ,TBS_AUTOTICKS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[197] ,TBS_VERT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[198] ,TBS_HORZ));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[199] ,TBS_TOP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[200] ,TBS_BOTTOM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[201] ,TBS_LEFT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[202] ,TBS_RIGHT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[203] ,TBS_BOTH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[204] ,TBS_NOTICKS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[205] ,TBS_ENABLESELRANGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[206] ,TBS_FIXEDLENGTH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[207] ,TBS_NOTHUMB));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[208] ,TBS_TOOLTIPS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[209] ,TBM_GETPOS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[210] ,TBM_GETRANGEMIN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[211] ,TBM_GETRANGEMAX));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[212] ,TBM_GETTIC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[213] ,TBM_SETTIC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[214] ,TBM_SETPOS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[215] ,TBM_SETRANGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[216] ,TBM_SETRANGEMIN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[217] ,TBM_SETRANGEMAX));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[218] ,TBM_CLEARTICS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[219] ,TBM_SETSEL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[220] ,TBM_SETSELSTART));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[221] ,TBM_SETSELEND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[222] ,TBM_GETPTICS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[223] ,TBM_GETTICPOS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[224] ,TBM_GETNUMTICS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[225] ,TBM_GETSELSTART));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[226] ,TBM_GETSELEND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[227] ,TBM_CLEARSEL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[228] ,TBM_SETTICFREQ));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[229] ,TBM_SETPAGESIZE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[230] ,TBM_GETPAGESIZE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[231] ,TBM_SETLINESIZE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[232] ,TBM_GETLINESIZE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[233] ,TBM_GETTHUMBRECT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[234] ,TBM_GETCHANNELRECT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[235] ,TBM_SETTHUMBLENGTH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[236] ,TBM_GETTHUMBLENGTH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[237] ,TBM_SETTOOLTIPS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[238] ,TBM_GETTOOLTIPS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[239] ,TBM_SETTIPSIDE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[240] ,TBTS_TOP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[241] ,TBTS_LEFT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[242] ,TBTS_BOTTOM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[243] ,TBTS_RIGHT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[244] ,TBM_SETBUDDY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[245] ,TBM_GETBUDDY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[246] ,TBM_SETUNICODEFORMAT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[247] ,TBM_GETUNICODEFORMAT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[248] ,TB_LINEUP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[249] ,TB_LINEDOWN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[250] ,TB_PAGEUP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[251] ,TB_PAGEDOWN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[252] ,TB_THUMBPOSITION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[253] ,TB_THUMBTRACK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[254] ,TB_TOP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[255] ,TB_BOTTOM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[256] ,TB_ENDTRACK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[257] ,TBCD_TICS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[258] ,TBCD_THUMB));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[259] ,TBCD_CHANNEL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[260] ,DL_BEGINDRAG));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[261] ,DL_DRAGGING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[262] ,DL_DROPPED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[263] ,DL_CANCELDRAG));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[264] ,DL_CURSORSET));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[265] ,DL_STOPCURSOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[266] ,DL_COPYCURSOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[267] ,DL_MOVECURSOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[268] ,DRAGLISTMSGSTRING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[269] ,UPDOWN_CLASS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[270] ,UD_MAXVAL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[271] ,UD_MINVAL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[272] ,UDS_WRAP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[273] ,UDS_SETBUDDYINT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[274] ,UDS_ALIGNRIGHT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[275] ,UDS_ALIGNLEFT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[276] ,UDS_AUTOBUDDY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[277] ,UDS_ARROWKEYS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[278] ,UDS_HORZ));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[279] ,UDS_NOTHOUSANDS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[280] ,UDS_HOTTRACK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[281] ,UDM_SETRANGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[282] ,UDM_GETRANGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[283] ,UDM_SETPOS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[284] ,UDM_GETPOS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[285] ,UDM_SETBUDDY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[286] ,UDM_GETBUDDY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[287] ,UDM_SETACCEL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[288] ,UDM_GETACCEL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[289] ,UDM_SETBASE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[290] ,UDM_GETBASE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[291] ,UDM_SETRANGE32));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[292] ,UDM_GETRANGE32));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[293] ,UDM_SETUNICODEFORMAT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[294] ,UDM_GETUNICODEFORMAT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[295] ,UDN_DELTAPOS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[296] ,PROGRESS_CLASS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[297] ,PBS_SMOOTH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[298] ,PBS_VERTICAL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[299] ,PBM_SETRANGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[300] ,PBM_SETPOS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[301] ,PBM_DELTAPOS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[302] ,PBM_SETSTEP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[303] ,PBM_STEPIT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[304] ,PBM_SETRANGE32));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[305] ,PBM_GETRANGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[306] ,PBM_GETPOS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[307] ,PBM_SETBARCOLOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[308] ,PBM_SETBKCOLOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[309] ,HOTKEYF_SHIFT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[310] ,HOTKEYF_CONTROL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[311] ,HOTKEYF_ALT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[312] ,HOTKEYF_EXT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[313] ,HKCOMB_NONE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[314] ,HKCOMB_S));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[315] ,HKCOMB_C));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[316] ,HKCOMB_A));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[317] ,HKCOMB_SC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[318] ,HKCOMB_SA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[319] ,HKCOMB_CA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[320] ,HKCOMB_SCA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[321] ,HKM_SETHOTKEY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[322] ,HKM_GETHOTKEY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[323] ,HKM_SETRULES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[324] ,HOTKEYCLASS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[325] ,CCS_TOP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[326] ,CCS_NOMOVEY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[327] ,CCS_BOTTOM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[328] ,CCS_NORESIZE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[329] ,CCS_NOPARENTALIGN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[330] ,CCS_ADJUSTABLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[331] ,CCS_NODIVIDER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[332] ,CCS_VERT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[333] ,CCS_LEFT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[334] ,CCS_RIGHT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[335] ,CCS_NOMOVEX));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[336] ,WC_LISTVIEW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[337] ,LVS_ICON));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[338] ,LVS_REPORT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[339] ,LVS_SMALLICON));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[340] ,LVS_LIST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[341] ,LVS_TYPEMASK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[342] ,LVS_SINGLESEL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[343] ,LVS_SHOWSELALWAYS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[344] ,LVS_SORTASCENDING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[345] ,LVS_SORTDESCENDING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[346] ,LVS_SHAREIMAGELISTS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[347] ,LVS_NOLABELWRAP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[348] ,LVS_AUTOARRANGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[349] ,LVS_EDITLABELS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[350] ,LVS_OWNERDATA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[351] ,LVS_NOSCROLL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[352] ,LVS_TYPESTYLEMASK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[353] ,LVS_ALIGNTOP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[354] ,LVS_ALIGNLEFT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[355] ,LVS_ALIGNMASK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[356] ,LVS_OWNERDRAWFIXED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[357] ,LVS_NOCOLUMNHEADER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[358] ,LVS_NOSORTHEADER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[359] ,LVS_EX_GRIDLINES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[360] ,LVS_EX_SUBITEMIMAGES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[361] ,LVS_EX_CHECKBOXES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[362] ,LVS_EX_TRACKSELECT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[363] ,LVS_EX_HEADERDRAGDROP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[364] ,LVS_EX_FULLROWSELECT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[365] ,LVS_EX_ONECLICKACTIVATE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[366] ,LVS_EX_TWOCLICKACTIVATE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[367] ,LVS_EX_FLATSB));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[368] ,LVS_EX_REGIONAL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[369] ,LVS_EX_INFOTIP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[370] ,LVS_EX_UNDERLINEHOT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[371] ,LVS_EX_UNDERLINECOLD));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[372] ,LVS_EX_MULTIWORKAREAS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[373] ,LVM_SETUNICODEFORMAT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[374] ,LVM_GETUNICODEFORMAT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[375] ,LVM_GETBKCOLOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[376] ,LVM_SETBKCOLOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[377] ,LVM_GETIMAGELIST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[378] ,LVSIL_NORMAL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[379] ,LVSIL_SMALL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[380] ,LVSIL_STATE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[381] ,LVM_SETIMAGELIST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[382] ,LVM_GETITEMCOUNT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[383] ,LVIF_TEXT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[384] ,LVIF_IMAGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[385] ,LVIF_PARAM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[386] ,LVIF_STATE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[387] ,LVIF_INDENT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[388] ,LVIF_NORECOMPUTE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[389] ,LVIS_FOCUSED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[390] ,LVIS_SELECTED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[391] ,LVIS_CUT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[392] ,LVIS_DROPHILITED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[393] ,LVIS_ACTIVATING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[394] ,LVIS_OVERLAYMASK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[395] ,LVIS_STATEIMAGEMASK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[396] ,I_INDENTCALLBACK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[397] ,I_IMAGENONE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[398] ,I_COLUMNSCALLBACK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[399] ,Integer(LPSTR_TEXTCALLBACKA)));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[400] ,Integer(LPSTR_TEXTCALLBACKW)));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[401] ,Integer(LPSTR_TEXTCALLBACK)));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[402] ,I_IMAGECALLBACK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[403] ,LVM_GETITEMA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[404] ,LVM_SETITEMA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[405] ,LVM_INSERTITEMA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[406] ,LVM_GETITEMW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[407] ,LVM_SETITEMW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[408] ,LVM_INSERTITEMW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[409] ,LVM_GETITEM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[410] ,LVM_SETITEM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[411] ,LVM_INSERTITEM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[412] ,LVM_DELETEITEM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[413] ,LVM_DELETEALLITEMS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[414] ,LVM_GETCALLBACKMASK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[415] ,LVM_SETCALLBACKMASK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[416] ,LVNI_ALL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[417] ,LVNI_FOCUSED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[418] ,LVNI_SELECTED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[419] ,LVNI_CUT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[420] ,LVNI_DROPHILITED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[421] ,LVNI_ABOVE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[422] ,LVNI_BELOW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[423] ,LVNI_TOLEFT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[424] ,LVNI_TORIGHT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[425] ,LVM_GETNEXTITEM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[426] ,LVFI_PARAM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[427] ,LVFI_STRING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[428] ,LVFI_PARTIAL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[429] ,LVFI_WRAP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[430] ,LVFI_NEARESTXY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[431] ,LVM_FINDITEMA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[432] ,LVM_FINDITEMW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[433] ,LVM_FINDITEM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[434] ,LVIR_BOUNDS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[435] ,LVIR_ICON));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[436] ,LVIR_LABEL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[437] ,LVIR_SELECTBOUNDS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[438] ,LVM_GETITEMRECT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[439] ,LVM_SETITEMPOSITION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[440] ,LVM_GETITEMPOSITION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[441] ,LVM_GETSTRINGWIDTHA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[442] ,LVM_GETSTRINGWIDTHW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[443] ,LVM_GETSTRINGWIDTH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[444] ,LVHT_NOWHERE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[445] ,LVHT_ONITEMICON));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[446] ,LVHT_ONITEMLABEL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[447] ,LVHT_ONITEMSTATEICON));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[448] ,LVHT_ONITEM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[449] ,LVHT_ABOVE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[450] ,LVHT_BELOW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[451] ,LVHT_TORIGHT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[452] ,LVHT_TOLEFT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[453] ,LVM_HITTEST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[454] ,LVM_ENSUREVISIBLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[455] ,LVM_SCROLL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[456] ,LVM_REDRAWITEMS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[457] ,LVA_DEFAULT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[458] ,LVA_ALIGNLEFT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[459] ,LVA_ALIGNTOP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[460] ,LVA_ALIGNRIGHT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[461] ,LVA_ALIGNBOTTOM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[462] ,LVA_SNAPTOGRID));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[463] ,LVA_SORTASCENDING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[464] ,LVA_SORTDESCENDING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[465] ,LVM_ARRANGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[466] ,LVM_EDITLABELA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[467] ,LVM_EDITLABELW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[468] ,LVM_EDITLABEL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[469] ,LVM_GETEDITCONTROL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[470] ,LVCF_FMT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[471] ,LVCF_WIDTH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[472] ,LVCF_TEXT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[473] ,LVCF_SUBITEM));
end;

procedure __UnregisterConsts1;
var i : integer;
begin
__RegisteredConstsList1.Free
end;

const __ConstNames2 : array[0..384] of string = (
'LVCF_IMAGE'
,'LVCF_ORDER'
,'LVCFMT_LEFT'
,'LVCFMT_RIGHT'
,'LVCFMT_CENTER'
,'LVCFMT_JUSTIFYMASK'
,'LVCFMT_IMAGE'
,'LVCFMT_BITMAP_ON_RIGHT'
,'LVCFMT_COL_HAS_IMAGES'
,'LVM_GETCOLUMNA'
,'LVM_GETCOLUMNW'
,'LVM_GETCOLUMN'
,'LVM_SETCOLUMNA'
,'LVM_SETCOLUMNW'
,'LVM_SETCOLUMN'
,'LVM_INSERTCOLUMNA'
,'LVM_INSERTCOLUMNW'
,'LVM_INSERTCOLUMN'
,'LVM_DELETECOLUMN'
,'LVM_GETCOLUMNWIDTH'
,'LVSCW_AUTOSIZE'
,'LVSCW_AUTOSIZE_USEHEADER'
,'LVM_SETCOLUMNWIDTH'
,'LVM_GETHEADER'
,'LVM_CREATEDRAGIMAGE'
,'LVM_GETVIEWRECT'
,'LVM_GETTEXTCOLOR'
,'LVM_SETTEXTCOLOR'
,'LVM_GETTEXTBKCOLOR'
,'LVM_SETTEXTBKCOLOR'
,'LVM_GETTOPINDEX'
,'LVM_GETCOUNTPERPAGE'
,'LVM_GETORIGIN'
,'LVM_UPDATE'
,'LVM_SETITEMSTATE'
,'LVM_GETITEMSTATE'
,'LVM_GETITEMTEXTA'
,'LVM_GETITEMTEXTW'
,'LVM_GETITEMTEXT'
,'LVM_SETITEMTEXTA'
,'LVM_SETITEMTEXTW'
,'LVM_SETITEMTEXT'
,'LVSICF_NOINVALIDATEALL'
,'LVSICF_NOSCROLL'
,'LVM_SETITEMCOUNT'
,'LVM_SORTITEMS'
,'LVM_SETITEMPOSITION32'
,'LVM_GETSELECTEDCOUNT'
,'LVM_GETITEMSPACING'
,'LVM_GETISEARCHSTRINGA'
,'LVM_GETISEARCHSTRINGW'
,'LVM_GETISEARCHSTRING'
,'LVM_SETICONSPACING'
,'LVM_SETEXTENDEDLISTVIEWSTYLE'
,'LVM_GETEXTENDEDLISTVIEWSTYLE'
,'LVM_GETSUBITEMRECT'
,'LVM_SUBITEMHITTEST'
,'LVM_SETCOLUMNORDERARRAY'
,'LVM_GETCOLUMNORDERARRAY'
,'LVM_SETHOTITEM'
,'LVM_GETHOTITEM'
,'LVM_SETHOTCURSOR'
,'LVM_GETHOTCURSOR'
,'LVM_APPROXIMATEVIEWRECT'
,'LV_MAX_WORKAREAS'
,'LVM_SETWORKAREA'
,'LVM_GETSELECTIONMARK'
,'LVM_SETSELECTIONMARK'
,'LVM_GETWORKAREAS'
,'LVM_SETHOVERTIME'
,'LVM_GETHOVERTIME'
,'LVM_GETNUMBEROFWORKAREAS'
,'LVM_SETTOOLTIPS'
,'LVM_GETTOOLTIPS'
,'LVBKIF_SOURCE_NONE'
,'LVBKIF_SOURCE_HBITMAP'
,'LVBKIF_SOURCE_URL'
,'LVBKIF_SOURCE_MASK'
,'LVBKIF_STYLE_NORMAL'
,'LVBKIF_STYLE_TILE'
,'LVBKIF_STYLE_MASK'
,'LVM_SETBKIMAGEA'
,'LVM_SETBKIMAGEW'
,'LVM_GETBKIMAGEA'
,'LVM_GETBKIMAGEW'
,'LVM_SETBKIMAGE'
,'LVM_GETBKIMAGE'
,'LVKF_ALT'
,'LVKF_CONTROL'
,'LVKF_SHIFT'
,'LVN_ITEMCHANGING'
,'LVN_ITEMCHANGED'
,'LVN_INSERTITEM'
,'LVN_DELETEITEM'
,'LVN_DELETEALLITEMS'
,'LVN_COLUMNCLICK'
,'LVN_BEGINDRAG'
,'LVN_BEGINRDRAG'
,'LVN_ODCACHEHINT'
,'LVN_ODFINDITEMA'
,'LVN_ODFINDITEMW'
,'LVN_ITEMACTIVATE'
,'LVN_ODSTATECHANGED'
,'LVN_ODFINDITEM'
,'LVN_BEGINLABELEDITA'
,'LVN_ENDLABELEDITA'
,'LVN_BEGINLABELEDITW'
,'LVN_ENDLABELEDITW'
,'LVN_BEGINLABELEDIT'
,'LVN_ENDLABELEDIT'
,'LVN_HOTTRACK'
,'LVN_GETDISPINFOA'
,'LVN_SETDISPINFOA'
,'LVN_GETDISPINFOW'
,'LVN_SETDISPINFOW'
,'LVN_GETDISPINFO'
,'LVN_SETDISPINFO'
,'LVIF_DI_SETITEM'
,'LVN_KEYDOWN'
,'LVN_MARQUEEBEGIN'
,'LVGIT_UNFOLDED'
,'LVN_GETINFOTIPA'
,'LVN_GETINFOTIPW'
,'LVN_GETINFOTIP'
,'WC_TREEVIEW'
,'TVS_HASBUTTONS'
,'TVS_HASLINES'
,'TVS_LINESATROOT'
,'TVS_EDITLABELS'
,'TVS_DISABLEDRAGDROP'
,'TVS_SHOWSELALWAYS'
,'TVS_RTLREADING'
,'TVS_NOTOOLTIPS'
,'TVS_CHECKBOXES'
,'TVS_TRACKSELECT'
,'TVS_SINGLEEXPAND'
,'TVS_INFOTIP'
,'TVS_FULLROWSELECT'
,'TVS_NOSCROLL'
,'TVS_NONEVENHEIGHT'
,'TVIF_TEXT'
,'TVIF_IMAGE'
,'TVIF_PARAM'
,'TVIF_STATE'
,'TVIF_HANDLE'
,'TVIF_SELECTEDIMAGE'
,'TVIF_CHILDREN'
,'TVIF_INTEGRAL'
,'TVIS_FOCUSED'
,'TVIS_SELECTED'
,'TVIS_CUT'
,'TVIS_DROPHILITED'
,'TVIS_BOLD'
,'TVIS_EXPANDED'
,'TVIS_EXPANDEDONCE'
,'TVIS_EXPANDPARTIAL'
,'TVIS_OVERLAYMASK'
,'TVIS_STATEIMAGEMASK'
,'TVIS_USERMASK'
,'I_CHILDRENCALLBACK'
,'TVE_COLLAPSE'
,'TVE_EXPAND'
,'TVE_TOGGLE'
,'TVE_EXPANDPARTIAL'
,'TVE_COLLAPSERESET'
,'TVSIL_NORMAL'
,'TVSIL_STATE'
,'TVGN_ROOT'
,'TVGN_NEXT'
,'TVGN_PREVIOUS'
,'TVGN_PARENT'
,'TVGN_CHILD'
,'TVGN_FIRSTVISIBLE'
,'TVGN_NEXTVISIBLE'
,'TVGN_PREVIOUSVISIBLE'
,'TVGN_DROPHILITE'
,'TVGN_CARET'
,'TVGN_LASTVISIBLE'
,'TVHT_NOWHERE'
,'TVHT_ONITEMICON'
,'TVHT_ONITEMLABEL'
,'TVHT_ONITEMINDENT'
,'TVHT_ONITEMBUTTON'
,'TVHT_ONITEMRIGHT'
,'TVHT_ONITEMSTATEICON'
,'TVHT_ABOVE'
,'TVHT_BELOW'
,'TVHT_TORIGHT'
,'TVHT_TOLEFT'
,'TVM_SETUNICODEFORMAT'
,'TVM_GETUNICODEFORMAT'
,'TVC_UNKNOWN'
,'TVC_BYMOUSE'
,'TVC_BYKEYBOARD'
,'TVIF_DI_SETITEM'
,'TVCDRF_NOIMAGES'
,'WC_COMBOBOXEX'
,'CBEIF_TEXT'
,'CBEIF_IMAGE'
,'CBEIF_SELECTEDIMAGE'
,'CBEIF_OVERLAY'
,'CBEIF_INDENT'
,'CBEIF_LPARAM'
,'CBEIF_DI_SETITEM'
,'CBEM_INSERTITEMA'
,'CBEM_SETIMAGELIST'
,'CBEM_GETIMAGELIST'
,'CBEM_GETITEMA'
,'CBEM_SETITEMA'
,'CBEM_DELETEITEM'
,'CBEM_GETCOMBOCONTROL'
,'CBEM_GETEDITCONTROL'
,'CBEM_SETEXSTYLE'
,'CBEM_GETEXSTYLE'
,'CBEM_GETEXTENDEDSTYLE'
,'CBEM_HASEDITCHANGED'
,'CBEM_INSERTITEMW'
,'CBEM_SETITEMW'
,'CBEM_GETITEMW'
,'CBEM_SETEXTENDEDSTYLE'
,'CBEM_SETUNICODEFORMAT'
,'CBEM_GETUNICODEFORMAT'
,'CBEM_INSERTITEM'
,'CBEM_SETITEM'
,'CBEM_GETITEM'
,'CBES_EX_NOEDITIMAGE'
,'CBES_EX_NOEDITIMAGEINDENT'
,'CBES_EX_PATHWORDBREAKPROC'
,'CBES_EX_NOSIZELIMIT'
,'CBES_EX_CASESENSITIVE'
,'CBEN_GETDISPINFOA'
,'CBEN_INSERTITEM'
,'CBEN_DELETEITEM'
,'CBEN_BEGINEDIT'
,'CBEN_ENDEDITA'
,'CBEN_ENDEDITW'
,'CBEN_GETDISPINFOW'
,'CBEN_DRAGBEGINA'
,'CBEN_DRAGBEGINW'
,'CBEN_ENDEDIT'
,'CBEN_GETDISPINFO'
,'CBEN_DRAGBEGIN'
,'CBENF_KILLFOCUS'
,'CBENF_RETURN'
,'CBENF_ESCAPE'
,'CBENF_DROPDOWN'
,'CBEMAXSTRLEN'
,'WC_TABCONTROL'
,'TCS_SCROLLOPPOSITE'
,'TCS_BOTTOM'
,'TCS_RIGHT'
,'TCS_MULTISELECT'
,'TCS_FLATBUTTONS'
,'TCS_FORCEICONLEFT'
,'TCS_FORCELABELLEFT'
,'TCS_HOTTRACK'
,'TCS_VERTICAL'
,'TCS_TABS'
,'TCS_BUTTONS'
,'TCS_SINGLELINE'
,'TCS_MULTILINE'
,'TCS_RIGHTJUSTIFY'
,'TCS_FIXEDWIDTH'
,'TCS_RAGGEDRIGHT'
,'TCS_FOCUSONBUTTONDOWN'
,'TCS_OWNERDRAWFIXED'
,'TCS_TOOLTIPS'
,'TCS_FOCUSNEVER'
,'TCS_EX_FLATSEPARATORS'
,'TCS_EX_REGISTERDROP'
,'TCM_SETUNICODEFORMAT'
,'TCM_GETUNICODEFORMAT'
,'TCIF_TEXT'
,'TCIF_IMAGE'
,'TCIF_RTLREADING'
,'TCIF_PARAM'
,'TCIF_STATE'
,'TCIS_BUTTONPRESSED'
,'TCIS_HIGHLIGHTED'
,'TCHT_NOWHERE'
,'TCHT_ONITEMICON'
,'TCHT_ONITEMLABEL'
,'ANIMATE_CLASS'
,'ACS_CENTER'
,'ACS_TRANSPARENT'
,'ACS_AUTOPLAY'
,'ACS_TIMER'
,'ACM_OPENA'
,'ACM_OPENW'
,'ACM_OPEN'
,'ACM_PLAY'
,'ACM_STOP'
,'ACN_START'
,'ACN_STOP'
,'MONTHCAL_CLASS'
,'MCM_FIRST'
,'MCM_GETCURSEL'
,'MCM_SETCURSEL'
,'MCM_GETMAXSELCOUNT'
,'MCM_SETMAXSELCOUNT'
,'MCM_GETSELRANGE'
,'MCM_SETSELRANGE'
,'MCM_GETMONTHRANGE'
,'MCM_SETDAYSTATE'
,'MCM_GETMINREQRECT'
,'MCM_SETCOLOR'
,'MCM_GETCOLOR'
,'MCM_SETTODAY'
,'MCM_GETTODAY'
,'MCM_HITTEST'
,'MCM_SETFIRSTDAYOFWEEK'
,'MCM_GETFIRSTDAYOFWEEK'
,'MCM_GETRANGE'
,'MCM_SETRANGE'
,'MCM_GETMONTHDELTA'
,'MCM_SETMONTHDELTA'
,'MCM_GETMAXTODAYWIDTH'
,'MCM_SETUNICODEFORMAT'
,'MCM_GETUNICODEFORMAT'
,'MCHT_TITLE'
,'MCHT_CALENDAR'
,'MCHT_TODAYLINK'
,'MCHT_NEXT'
,'MCHT_PREV'
,'MCHT_NOWHERE'
,'MCHT_TITLEBK'
,'MCHT_TITLEMONTH'
,'MCHT_TITLEYEAR'
,'MCHT_TITLEBTNNEXT'
,'MCHT_TITLEBTNPREV'
,'MCHT_CALENDARBK'
,'MCHT_CALENDARDATE'
,'MCHT_CALENDARDATENEXT'
,'MCHT_CALENDARDATEPREV'
,'MCHT_CALENDARDAY'
,'MCHT_CALENDARWEEKNUM'
,'MCSC_BACKGROUND'
,'MCSC_TEXT'
,'MCSC_TITLEBK'
,'MCSC_TITLETEXT'
,'MCSC_MONTHBK'
,'MCSC_TRAILINGTEXT'
,'MCN_SELCHANGE'
,'MCN_GETDAYSTATE'
,'MCN_SELECT'
,'MCS_DAYSTATE'
,'MCS_MULTISELECT'
,'MCS_WEEKNUMBERS'
,'MCS_NOTODAY_PRE_IE4'
,'MCS_NOTODAYCIRCLE'
,'MCS_NOTODAY'
,'GMR_VISIBLE'
,'GMR_DAYSTATE'
,'DATETIMEPICK_CLASS'
,'DTM_FIRST'
,'DTM_GETSYSTEMTIME'
,'DTM_SETSYSTEMTIME'
,'DTM_GETRANGE'
,'DTM_SETRANGE'
,'DTM_SETFORMATA'
,'DTM_SETMCCOLOR'
,'DTM_GETMCCOLOR'
,'DTM_GETMONTHCAL'
,'DTM_SETMCFONT'
,'DTM_GETMCFONT'
,'DTM_SETFORMATW'
,'DTM_SETFORMAT'
,'DTS_UPDOWN'
,'DTS_SHOWNONE'
,'DTS_SHORTDATEFORMAT'
,'DTS_LONGDATEFORMAT'
,'DTS_TIMEFORMAT'
,'DTS_APPCANPARSE'
,'DTS_RIGHTALIGN'
,'DTN_DATETIMECHANGE'
,'DTN_USERSTRINGA'
,'DTN_USERSTRINGW'
,'DTN_WMKEYDOWNA'
,'DTN_WMKEYDOWNW'
,'DTN_FORMATA'
,'DTN_FORMATW'
,'DTN_FORMATQUERYA'
,'DTN_FORMATQUERYW'
,'DTN_DROPDOWN'
,'DTN_CLOSEUP'
);
var __RegisteredConstsList2 : TList;
procedure __RegisterConsts2;
begin
__RegisteredConstsList2 := TList.Create;
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[0] ,LVCF_IMAGE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[1] ,LVCF_ORDER));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[2] ,LVCFMT_LEFT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[3] ,LVCFMT_RIGHT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[4] ,LVCFMT_CENTER));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[5] ,LVCFMT_JUSTIFYMASK));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[6] ,LVCFMT_IMAGE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[7] ,LVCFMT_BITMAP_ON_RIGHT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[8] ,LVCFMT_COL_HAS_IMAGES));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[9] ,LVM_GETCOLUMNA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[10] ,LVM_GETCOLUMNW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[11] ,LVM_GETCOLUMN));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[12] ,LVM_SETCOLUMNA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[13] ,LVM_SETCOLUMNW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[14] ,LVM_SETCOLUMN));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[15] ,LVM_INSERTCOLUMNA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[16] ,LVM_INSERTCOLUMNW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[17] ,LVM_INSERTCOLUMN));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[18] ,LVM_DELETECOLUMN));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[19] ,LVM_GETCOLUMNWIDTH));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[20] ,LVSCW_AUTOSIZE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[21] ,LVSCW_AUTOSIZE_USEHEADER));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[22] ,LVM_SETCOLUMNWIDTH));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[23] ,LVM_GETHEADER));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[24] ,LVM_CREATEDRAGIMAGE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[25] ,LVM_GETVIEWRECT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[26] ,LVM_GETTEXTCOLOR));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[27] ,LVM_SETTEXTCOLOR));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[28] ,LVM_GETTEXTBKCOLOR));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[29] ,LVM_SETTEXTBKCOLOR));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[30] ,LVM_GETTOPINDEX));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[31] ,LVM_GETCOUNTPERPAGE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[32] ,LVM_GETORIGIN));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[33] ,LVM_UPDATE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[34] ,LVM_SETITEMSTATE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[35] ,LVM_GETITEMSTATE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[36] ,LVM_GETITEMTEXTA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[37] ,LVM_GETITEMTEXTW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[38] ,LVM_GETITEMTEXT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[39] ,LVM_SETITEMTEXTA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[40] ,LVM_SETITEMTEXTW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[41] ,LVM_SETITEMTEXT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[42] ,LVSICF_NOINVALIDATEALL));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[43] ,LVSICF_NOSCROLL));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[44] ,LVM_SETITEMCOUNT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[45] ,LVM_SORTITEMS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[46] ,LVM_SETITEMPOSITION32));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[47] ,LVM_GETSELECTEDCOUNT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[48] ,LVM_GETITEMSPACING));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[49] ,LVM_GETISEARCHSTRINGA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[50] ,LVM_GETISEARCHSTRINGW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[51] ,LVM_GETISEARCHSTRING));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[52] ,LVM_SETICONSPACING));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[53] ,LVM_SETEXTENDEDLISTVIEWSTYLE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[54] ,LVM_GETEXTENDEDLISTVIEWSTYLE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[55] ,LVM_GETSUBITEMRECT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[56] ,LVM_SUBITEMHITTEST));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[57] ,LVM_SETCOLUMNORDERARRAY));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[58] ,LVM_GETCOLUMNORDERARRAY));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[59] ,LVM_SETHOTITEM));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[60] ,LVM_GETHOTITEM));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[61] ,LVM_SETHOTCURSOR));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[62] ,LVM_GETHOTCURSOR));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[63] ,LVM_APPROXIMATEVIEWRECT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[64] ,LV_MAX_WORKAREAS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[65] ,LVM_SETWORKAREA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[66] ,LVM_GETSELECTIONMARK));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[67] ,LVM_SETSELECTIONMARK));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[68] ,LVM_GETWORKAREAS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[69] ,LVM_SETHOVERTIME));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[70] ,LVM_GETHOVERTIME));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[71] ,LVM_GETNUMBEROFWORKAREAS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[72] ,LVM_SETTOOLTIPS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[73] ,LVM_GETTOOLTIPS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[74] ,LVBKIF_SOURCE_NONE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[75] ,LVBKIF_SOURCE_HBITMAP));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[76] ,LVBKIF_SOURCE_URL));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[77] ,LVBKIF_SOURCE_MASK));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[78] ,LVBKIF_STYLE_NORMAL));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[79] ,LVBKIF_STYLE_TILE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[80] ,LVBKIF_STYLE_MASK));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[81] ,LVM_SETBKIMAGEA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[82] ,LVM_SETBKIMAGEW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[83] ,LVM_GETBKIMAGEA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[84] ,LVM_GETBKIMAGEW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[85] ,LVM_SETBKIMAGE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[86] ,LVM_GETBKIMAGE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[87] ,LVKF_ALT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[88] ,LVKF_CONTROL));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[89] ,LVKF_SHIFT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[90] ,LVN_ITEMCHANGING));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[91] ,LVN_ITEMCHANGED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[92] ,LVN_INSERTITEM));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[93] ,LVN_DELETEITEM));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[94] ,LVN_DELETEALLITEMS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[95] ,LVN_COLUMNCLICK));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[96] ,LVN_BEGINDRAG));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[97] ,LVN_BEGINRDRAG));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[98] ,LVN_ODCACHEHINT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[99] ,LVN_ODFINDITEMA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[100] ,LVN_ODFINDITEMW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[101] ,LVN_ITEMACTIVATE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[102] ,LVN_ODSTATECHANGED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[103] ,LVN_ODFINDITEM));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[104] ,LVN_BEGINLABELEDITA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[105] ,LVN_ENDLABELEDITA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[106] ,LVN_BEGINLABELEDITW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[107] ,LVN_ENDLABELEDITW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[108] ,LVN_BEGINLABELEDIT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[109] ,LVN_ENDLABELEDIT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[110] ,LVN_HOTTRACK));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[111] ,LVN_GETDISPINFOA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[112] ,LVN_SETDISPINFOA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[113] ,LVN_GETDISPINFOW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[114] ,LVN_SETDISPINFOW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[115] ,LVN_GETDISPINFO));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[116] ,LVN_SETDISPINFO));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[117] ,LVIF_DI_SETITEM));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[118] ,LVN_KEYDOWN));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[119] ,LVN_MARQUEEBEGIN));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[120] ,LVGIT_UNFOLDED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[121] ,LVN_GETINFOTIPA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[122] ,LVN_GETINFOTIPW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[123] ,LVN_GETINFOTIP));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[124] ,WC_TREEVIEW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[125] ,TVS_HASBUTTONS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[126] ,TVS_HASLINES));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[127] ,TVS_LINESATROOT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[128] ,TVS_EDITLABELS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[129] ,TVS_DISABLEDRAGDROP));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[130] ,TVS_SHOWSELALWAYS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[131] ,TVS_RTLREADING));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[132] ,TVS_NOTOOLTIPS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[133] ,TVS_CHECKBOXES));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[134] ,TVS_TRACKSELECT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[135] ,TVS_SINGLEEXPAND));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[136] ,TVS_INFOTIP));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[137] ,TVS_FULLROWSELECT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[138] ,TVS_NOSCROLL));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[139] ,TVS_NONEVENHEIGHT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[140] ,TVIF_TEXT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[141] ,TVIF_IMAGE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[142] ,TVIF_PARAM));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[143] ,TVIF_STATE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[144] ,TVIF_HANDLE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[145] ,TVIF_SELECTEDIMAGE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[146] ,TVIF_CHILDREN));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[147] ,TVIF_INTEGRAL));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[148] ,TVIS_FOCUSED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[149] ,TVIS_SELECTED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[150] ,TVIS_CUT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[151] ,TVIS_DROPHILITED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[152] ,TVIS_BOLD));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[153] ,TVIS_EXPANDED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[154] ,TVIS_EXPANDEDONCE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[155] ,TVIS_EXPANDPARTIAL));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[156] ,TVIS_OVERLAYMASK));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[157] ,TVIS_STATEIMAGEMASK));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[158] ,TVIS_USERMASK));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[159] ,I_CHILDRENCALLBACK));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[160] ,TVE_COLLAPSE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[161] ,TVE_EXPAND));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[162] ,TVE_TOGGLE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[163] ,TVE_EXPANDPARTIAL));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[164] ,TVE_COLLAPSERESET));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[165] ,TVSIL_NORMAL));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[166] ,TVSIL_STATE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[167] ,TVGN_ROOT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[168] ,TVGN_NEXT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[169] ,TVGN_PREVIOUS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[170] ,TVGN_PARENT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[171] ,TVGN_CHILD));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[172] ,TVGN_FIRSTVISIBLE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[173] ,TVGN_NEXTVISIBLE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[174] ,TVGN_PREVIOUSVISIBLE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[175] ,TVGN_DROPHILITE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[176] ,TVGN_CARET));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[177] ,TVGN_LASTVISIBLE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[178] ,TVHT_NOWHERE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[179] ,TVHT_ONITEMICON));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[180] ,TVHT_ONITEMLABEL));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[181] ,TVHT_ONITEMINDENT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[182] ,TVHT_ONITEMBUTTON));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[183] ,TVHT_ONITEMRIGHT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[184] ,TVHT_ONITEMSTATEICON));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[185] ,TVHT_ABOVE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[186] ,TVHT_BELOW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[187] ,TVHT_TORIGHT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[188] ,TVHT_TOLEFT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[189] ,TVM_SETUNICODEFORMAT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[190] ,TVM_GETUNICODEFORMAT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[191] ,TVC_UNKNOWN));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[192] ,TVC_BYMOUSE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[193] ,TVC_BYKEYBOARD));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[194] ,TVIF_DI_SETITEM));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[195] ,TVCDRF_NOIMAGES));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[196] ,WC_COMBOBOXEX));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[197] ,CBEIF_TEXT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[198] ,CBEIF_IMAGE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[199] ,CBEIF_SELECTEDIMAGE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[200] ,CBEIF_OVERLAY));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[201] ,CBEIF_INDENT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[202] ,CBEIF_LPARAM));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[203] ,CBEIF_DI_SETITEM));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[204] ,CBEM_INSERTITEMA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[205] ,CBEM_SETIMAGELIST));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[206] ,CBEM_GETIMAGELIST));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[207] ,CBEM_GETITEMA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[208] ,CBEM_SETITEMA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[209] ,CBEM_DELETEITEM));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[210] ,CBEM_GETCOMBOCONTROL));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[211] ,CBEM_GETEDITCONTROL));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[212] ,CBEM_SETEXSTYLE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[213] ,CBEM_GETEXSTYLE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[214] ,CBEM_GETEXTENDEDSTYLE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[215] ,CBEM_HASEDITCHANGED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[216] ,CBEM_INSERTITEMW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[217] ,CBEM_SETITEMW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[218] ,CBEM_GETITEMW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[219] ,CBEM_SETEXTENDEDSTYLE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[220] ,CBEM_SETUNICODEFORMAT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[221] ,CBEM_GETUNICODEFORMAT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[222] ,CBEM_INSERTITEM));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[223] ,CBEM_SETITEM));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[224] ,CBEM_GETITEM));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[225] ,CBES_EX_NOEDITIMAGE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[226] ,CBES_EX_NOEDITIMAGEINDENT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[227] ,CBES_EX_PATHWORDBREAKPROC));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[228] ,CBES_EX_NOSIZELIMIT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[229] ,CBES_EX_CASESENSITIVE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[230] ,CBEN_GETDISPINFOA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[231] ,CBEN_INSERTITEM));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[232] ,CBEN_DELETEITEM));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[233] ,CBEN_BEGINEDIT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[234] ,CBEN_ENDEDITA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[235] ,CBEN_ENDEDITW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[236] ,CBEN_GETDISPINFOW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[237] ,CBEN_DRAGBEGINA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[238] ,CBEN_DRAGBEGINW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[239] ,CBEN_ENDEDIT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[240] ,CBEN_GETDISPINFO));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[241] ,CBEN_DRAGBEGIN));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[242] ,CBENF_KILLFOCUS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[243] ,CBENF_RETURN));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[244] ,CBENF_ESCAPE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[245] ,CBENF_DROPDOWN));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[246] ,CBEMAXSTRLEN));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[247] ,WC_TABCONTROL));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[248] ,TCS_SCROLLOPPOSITE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[249] ,TCS_BOTTOM));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[250] ,TCS_RIGHT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[251] ,TCS_MULTISELECT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[252] ,TCS_FLATBUTTONS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[253] ,TCS_FORCEICONLEFT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[254] ,TCS_FORCELABELLEFT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[255] ,TCS_HOTTRACK));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[256] ,TCS_VERTICAL));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[257] ,TCS_TABS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[258] ,TCS_BUTTONS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[259] ,TCS_SINGLELINE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[260] ,TCS_MULTILINE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[261] ,TCS_RIGHTJUSTIFY));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[262] ,TCS_FIXEDWIDTH));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[263] ,TCS_RAGGEDRIGHT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[264] ,TCS_FOCUSONBUTTONDOWN));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[265] ,TCS_OWNERDRAWFIXED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[266] ,TCS_TOOLTIPS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[267] ,TCS_FOCUSNEVER));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[268] ,TCS_EX_FLATSEPARATORS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[269] ,TCS_EX_REGISTERDROP));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[270] ,TCM_SETUNICODEFORMAT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[271] ,TCM_GETUNICODEFORMAT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[272] ,TCIF_TEXT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[273] ,TCIF_IMAGE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[274] ,TCIF_RTLREADING));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[275] ,TCIF_PARAM));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[276] ,TCIF_STATE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[277] ,TCIS_BUTTONPRESSED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[278] ,TCIS_HIGHLIGHTED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[279] ,TCHT_NOWHERE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[280] ,TCHT_ONITEMICON));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[281] ,TCHT_ONITEMLABEL));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[282] ,ANIMATE_CLASS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[283] ,ACS_CENTER));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[284] ,ACS_TRANSPARENT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[285] ,ACS_AUTOPLAY));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[286] ,ACS_TIMER));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[287] ,ACM_OPENA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[288] ,ACM_OPENW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[289] ,ACM_OPEN));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[290] ,ACM_PLAY));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[291] ,ACM_STOP));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[292] ,ACN_START));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[293] ,ACN_STOP));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[294] ,MONTHCAL_CLASS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[295] ,MCM_FIRST));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[296] ,MCM_GETCURSEL));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[297] ,MCM_SETCURSEL));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[298] ,MCM_GETMAXSELCOUNT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[299] ,MCM_SETMAXSELCOUNT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[300] ,MCM_GETSELRANGE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[301] ,MCM_SETSELRANGE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[302] ,MCM_GETMONTHRANGE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[303] ,MCM_SETDAYSTATE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[304] ,MCM_GETMINREQRECT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[305] ,MCM_SETCOLOR));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[306] ,MCM_GETCOLOR));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[307] ,MCM_SETTODAY));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[308] ,MCM_GETTODAY));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[309] ,MCM_HITTEST));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[310] ,MCM_SETFIRSTDAYOFWEEK));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[311] ,MCM_GETFIRSTDAYOFWEEK));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[312] ,MCM_GETRANGE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[313] ,MCM_SETRANGE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[314] ,MCM_GETMONTHDELTA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[315] ,MCM_SETMONTHDELTA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[316] ,MCM_GETMAXTODAYWIDTH));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[317] ,MCM_SETUNICODEFORMAT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[318] ,MCM_GETUNICODEFORMAT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[319] ,MCHT_TITLE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[320] ,MCHT_CALENDAR));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[321] ,MCHT_TODAYLINK));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[322] ,MCHT_NEXT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[323] ,MCHT_PREV));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[324] ,MCHT_NOWHERE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[325] ,MCHT_TITLEBK));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[326] ,MCHT_TITLEMONTH));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[327] ,MCHT_TITLEYEAR));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[328] ,MCHT_TITLEBTNNEXT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[329] ,MCHT_TITLEBTNPREV));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[330] ,MCHT_CALENDARBK));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[331] ,MCHT_CALENDARDATE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[332] ,MCHT_CALENDARDATENEXT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[333] ,MCHT_CALENDARDATEPREV));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[334] ,MCHT_CALENDARDAY));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[335] ,MCHT_CALENDARWEEKNUM));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[336] ,MCSC_BACKGROUND));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[337] ,MCSC_TEXT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[338] ,MCSC_TITLEBK));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[339] ,MCSC_TITLETEXT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[340] ,MCSC_MONTHBK));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[341] ,MCSC_TRAILINGTEXT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[342] ,MCN_SELCHANGE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[343] ,MCN_GETDAYSTATE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[344] ,MCN_SELECT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[345] ,MCS_DAYSTATE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[346] ,MCS_MULTISELECT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[347] ,MCS_WEEKNUMBERS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[348] ,MCS_NOTODAY_PRE_IE4));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[349] ,MCS_NOTODAYCIRCLE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[350] ,MCS_NOTODAY));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[351] ,GMR_VISIBLE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[352] ,GMR_DAYSTATE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[353] ,DATETIMEPICK_CLASS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[354] ,DTM_FIRST));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[355] ,DTM_GETSYSTEMTIME));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[356] ,DTM_SETSYSTEMTIME));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[357] ,DTM_GETRANGE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[358] ,DTM_SETRANGE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[359] ,DTM_SETFORMATA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[360] ,DTM_SETMCCOLOR));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[361] ,DTM_GETMCCOLOR));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[362] ,DTM_GETMONTHCAL));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[363] ,DTM_SETMCFONT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[364] ,DTM_GETMCFONT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[365] ,DTM_SETFORMATW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[366] ,DTM_SETFORMAT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[367] ,DTS_UPDOWN));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[368] ,DTS_SHOWNONE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[369] ,DTS_SHORTDATEFORMAT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[370] ,DTS_LONGDATEFORMAT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[371] ,DTS_TIMEFORMAT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[372] ,DTS_APPCANPARSE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[373] ,DTS_RIGHTALIGN));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[374] ,DTN_DATETIMECHANGE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[375] ,DTN_USERSTRINGA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[376] ,DTN_USERSTRINGW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[377] ,DTN_WMKEYDOWNA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[378] ,DTN_WMKEYDOWNW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[379] ,DTN_FORMATA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[380] ,DTN_FORMATW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[381] ,DTN_FORMATQUERYA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[382] ,DTN_FORMATQUERYW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[383] ,DTN_DROPDOWN));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[384] ,DTN_CLOSEUP));
end;

procedure __UnregisterConsts2;
var i : integer;
begin
__RegisteredConstsList2.Free
end;

const __ConstNames3 : array[0..81] of string = (
'DTN_USERSTRING'
,'DTN_WMKEYDOWN'
,'DTN_FORMAT'
,'DTN_FORMATQUERY'
,'GDTR_MIN'
,'GDTR_MAX'
,'GDT_ERROR'
,'GDT_VALID'
,'GDT_NONE'
,'WC_IPADDRESS'
,'IPM_CLEARADDRESS'
,'IPM_SETADDRESS'
,'IPM_GETADDRESS'
,'IPM_SETRANGE'
,'IPM_SETFOCUS'
,'IPM_ISBLANK'
,'WC_PAGESCROLLER'
,'PGS_VERT'
,'PGS_HORZ'
,'PGS_AUTOSCROLL'
,'PGS_DRAGNDROP'
,'PGF_INVISIBLE'
,'PGF_NORMAL'
,'PGF_GRAYED'
,'PGF_DEPRESSED'
,'PGF_HOT'
,'PGB_TOPORLEFT'
,'PGB_BOTTOMORRIGHT'
,'PGM_SETCHILD'
,'PGM_RECALCSIZE'
,'PGM_FORWARDMOUSE'
,'PGM_SETBKCOLOR'
,'PGM_GETBKCOLOR'
,'PGM_SETBORDER'
,'PGM_GETBORDER'
,'PGM_SETPOS'
,'PGM_GETPOS'
,'PGM_SETBUTTONSIZE'
,'PGM_GETBUTTONSIZE'
,'PGM_GETBUTTONSTATE'
,'PGM_GETDROPTARGET'
,'PGN_SCROLL'
,'PGF_SCROLLUP'
,'PGF_SCROLLDOWN'
,'PGF_SCROLLLEFT'
,'PGF_SCROLLRIGHT'
,'PGK_SHIFT'
,'PGK_CONTROL'
,'PGK_MENU'
,'PGN_CALCSIZE'
,'PGF_CALCWIDTH'
,'PGF_CALCHEIGHT'
,'WC_NATIVEFONTCTL'
,'NFS_EDIT'
,'NFS_STATIC'
,'NFS_LISTCOMBO'
,'NFS_BUTTON'
,'NFS_ALL'
,'WM_MOUSEHOVER'
,'WM_MOUSELEAVE'
,'TME_HOVER'
,'TME_LEAVE'
,'TME_NONCLIENT'
,'TME_QUERY'
,'TME_CANCEL'
,'HOVER_DEFAULT'
,'WSB_PROP_CYVSCROLL'
,'WSB_PROP_CXHSCROLL'
,'WSB_PROP_CYHSCROLL'
,'WSB_PROP_CXVSCROLL'
,'WSB_PROP_CXHTHUMB'
,'WSB_PROP_CYVTHUMB'
,'WSB_PROP_VBKGCOLOR'
,'WSB_PROP_HBKGCOLOR'
,'WSB_PROP_VSTYLE'
,'WSB_PROP_HSTYLE'
,'WSB_PROP_WINSTYLE'
,'WSB_PROP_PALETTE'
,'WSB_PROP_MASK'
,'FSB_FLAT_MODE'
,'FSB_ENCARTA_MODE'
,'FSB_REGULAR_MODE'
);
var __RegisteredConstsList3 : TList;
procedure __RegisterConsts3;
begin
__RegisteredConstsList3 := TList.Create;
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[0] ,DTN_USERSTRING));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[1] ,DTN_WMKEYDOWN));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[2] ,DTN_FORMAT));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[3] ,DTN_FORMATQUERY));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[4] ,GDTR_MIN));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[5] ,GDTR_MAX));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[6] ,GDT_ERROR));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[7] ,GDT_VALID));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[8] ,GDT_NONE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[9] ,WC_IPADDRESS));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[10] ,IPM_CLEARADDRESS));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[11] ,IPM_SETADDRESS));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[12] ,IPM_GETADDRESS));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[13] ,IPM_SETRANGE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[14] ,IPM_SETFOCUS));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[15] ,IPM_ISBLANK));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[16] ,WC_PAGESCROLLER));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[17] ,PGS_VERT));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[18] ,PGS_HORZ));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[19] ,PGS_AUTOSCROLL));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[20] ,PGS_DRAGNDROP));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[21] ,PGF_INVISIBLE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[22] ,PGF_NORMAL));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[23] ,PGF_GRAYED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[24] ,PGF_DEPRESSED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[25] ,PGF_HOT));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[26] ,PGB_TOPORLEFT));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[27] ,PGB_BOTTOMORRIGHT));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[28] ,PGM_SETCHILD));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[29] ,PGM_RECALCSIZE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[30] ,PGM_FORWARDMOUSE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[31] ,PGM_SETBKCOLOR));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[32] ,PGM_GETBKCOLOR));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[33] ,PGM_SETBORDER));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[34] ,PGM_GETBORDER));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[35] ,PGM_SETPOS));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[36] ,PGM_GETPOS));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[37] ,PGM_SETBUTTONSIZE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[38] ,PGM_GETBUTTONSIZE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[39] ,PGM_GETBUTTONSTATE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[40] ,PGM_GETDROPTARGET));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[41] ,PGN_SCROLL));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[42] ,PGF_SCROLLUP));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[43] ,PGF_SCROLLDOWN));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[44] ,PGF_SCROLLLEFT));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[45] ,PGF_SCROLLRIGHT));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[46] ,PGK_SHIFT));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[47] ,PGK_CONTROL));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[48] ,PGK_MENU));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[49] ,PGN_CALCSIZE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[50] ,PGF_CALCWIDTH));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[51] ,PGF_CALCHEIGHT));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[52] ,WC_NATIVEFONTCTL));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[53] ,NFS_EDIT));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[54] ,NFS_STATIC));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[55] ,NFS_LISTCOMBO));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[56] ,NFS_BUTTON));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[57] ,NFS_ALL));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[58] ,WM_MOUSEHOVER));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[59] ,WM_MOUSELEAVE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[60] ,TME_HOVER));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[61] ,TME_LEAVE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[62] ,TME_NONCLIENT));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[63] ,TME_QUERY));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[64] ,TME_CANCEL));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[65] ,HOVER_DEFAULT));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[66] ,WSB_PROP_CYVSCROLL));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[67] ,WSB_PROP_CXHSCROLL));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[68] ,WSB_PROP_CYHSCROLL));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[69] ,WSB_PROP_CXVSCROLL));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[70] ,WSB_PROP_CXHTHUMB));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[71] ,WSB_PROP_CYVTHUMB));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[72] ,WSB_PROP_VBKGCOLOR));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[73] ,WSB_PROP_HBKGCOLOR));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[74] ,WSB_PROP_VSTYLE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[75] ,WSB_PROP_HSTYLE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[76] ,WSB_PROP_WINSTYLE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[77] ,WSB_PROP_PALETTE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[78] ,WSB_PROP_MASK));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[79] ,FSB_FLAT_MODE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[80] ,FSB_ENCARTA_MODE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[81] ,FSB_REGULAR_MODE));
end;

procedure __UnregisterConsts3;
var i : integer;
begin
__RegisteredConstsList3.Free
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..698] of string = (
'_COLORMAP'
,'_HD_HITTESTINFO'
,'_HD_ITEM'
,'_HD_ITEMA'
,'_HD_ITEMW'
,'_HD_LAYOUT'
,'_IMAGEINFO'
,'_IMAGELISTDRAWPARAMS'
,'_LV_COLUMN'
,'_LV_COLUMNA'
,'_LV_COLUMNW'
,'_LV_DISPINFO'
,'_LV_DISPINFOW'
,'_LV_FINDINFO'
,'_LV_FINDINFOA'
,'_LV_FINDINFOW'
,'_LV_HITTESTINFO'
,'_LV_ITEM'
,'_LV_ITEMA'
,'_LV_ITEMW'
,'_LV_KEYDOWN'
,'_NM_LISTVIEW'
,'_NM_TREEVIEW'
,'_NM_TREEVIEWA'
,'_NM_TREEVIEWW'
,'_NM_UPDOWN'
,'_NMTBCUSTOMDRAW'
,'_PROPSHEETHEADER'
,'_PROPSHEETHEADERA'
,'_PROPSHEETHEADERW'
,'_PROPSHEETPAGE'
,'_PROPSHEETPAGEA'
,'_PROPSHEETPAGEW'
,'_RB_HITTESTINFO'
,'_TBBUTTON'
,'_TC_HITTESTINFO'
,'_TC_ITEM'
,'_TC_ITEMA'
,'_TC_ITEMHEADER'
,'_TC_ITEMHEADERA'
,'_TC_ITEMHEADERW'
,'_TC_ITEMW'
,'_TC_KEYDOWN'
,'_TREEITEM'
,'_TT_HITTESTINFO'
,'_TT_HITTESTINFOA'
,'_TT_HITTESTINFOW'
,'_TV_DISPINFO'
,'_TV_DISPINFOA'
,'_TV_DISPINFOW'
,'_TV_HITTESTINFO'
,'_TV_INSERTSTRUCT'
,'_TV_INSERTSTRUCTA'
,'_TV_INSERTSTRUCTW'
,'_TV_ITEM'
,'_TV_ITEMA'
,'_TV_ITEMW'
,'_TV_KEYDOWN'
,'_TV_SORTCB'
,'_UDACCEL'
,'COLORMAP'
,'DRAGLISTINFO'
,'HD_HITTESTINFO'
,'HD_ITEM'
,'HD_ITEMA'
,'HD_ITEMW'
,'HD_LAYOUT'
,'HD_NOTIFY'
,'HD_NOTIFYA'
,'HD_NOTIFYW'
,'IMAGEINFO'
,'LV_COLUMN'
,'LV_COLUMNA'
,'LV_COLUMNW'
,'LV_DISPINFO'
,'LV_DISPINFOA'
,'LV_DISPINFOW'
,'LV_FINDINFO'
,'LV_FINDINFOA'
,'LV_FINDINFOW'
,'LV_HITTESTINFO'
,'LV_ITEM'
,'LV_ITEMA'
,'LV_ITEMW'
,'LV_KEYDOWN'
,'MCHITTESTINFO'
,'NM_LISTVIEW'
,'NM_TREEVIEW'
,'NM_TREEVIEWA'
,'NM_TREEVIEWW'
,'NM_UPDOWN'
,'NMCBEDRAGBEGIN'
,'NMCBEDRAGBEGINA'
,'NMCBEDRAGBEGINW'
,'NMCBEENDEDIT'
,'NMCBEENDEDITA'
,'NMCBEENDEDITW'
,'NMCOMBOBOXEX'
,'NMCOMBOBOXEXA'
,'NMCOMBOBOXEXW'
,'NMPGCALCSIZE'
,'NMPGSCROLL'
,'NMSELECT'
,'NMTBDISPINFO'
,'NMTBDISPINFOA'
,'NMTBDISPINFOW'
,'PBRANGE'
,'PROPSHEETPAGE'
,'PROPSHEETPAGEA'
,'PROPSHEETPAGEW'
,'tagCOLORSCHEME'
,'tagCOMBOBOXEXITEM'
,'tagCOMBOBOXEXITEMA'
,'tagCOMBOBOXEXITEMW'
,'tagDRAGLISTINFO'
,'tagINITCOMMONCONTROLSEX'
,'tagLVBKIMAGE'
,'tagLVBKIMAGEA'
,'tagLVBKIMAGEW'
,'tagLVCOLUMN'
,'tagLVCOLUMNA'
,'tagLVCOLUMNW'
,'tagLVDISPINFO'
,'tagLVDISPINFOW'
,'tagLVFINDINFO'
,'tagLVFINDINFOA'
,'tagLVFINDINFOW'
,'tagLVHITTESTINFO'
,'tagLVITEM'
,'tagLVITEMA'
,'tagLVITEMW'
,'tagLVKEYDOWN'
,'tagNMCHAR'
,'tagNMCUSTOMDRAWINFO'
,'tagNMDATETIMECHANGE'
,'tagNMDATETIMEFORMAT'
,'tagNMDATETIMEFORMATA'
,'tagNMDATETIMEFORMATQUERY'
,'tagNMDATETIMEFORMATQUERYA'
,'tagNMDATETIMEFORMATQUERYW'
,'tagNMDATETIMEFORMATW'
,'tagNMDATETIMESTRING'
,'tagNMDATETIMESTRINGA'
,'tagNMDATETIMESTRINGW'
,'tagNMDATETIMEWMKEYDOWN'
,'tagNMDATETIMEWMKEYDOWNA'
,'tagNMDATETIMEWMKEYDOWNW'
,'tagNMDAYSTATE'
,'tagNMHDDISPINFO'
,'tagNMHDDISPINFOA'
,'tagNMHDDISPINFOW'
,'tagNMHEADER'
,'tagNMHEADERA'
,'tagNMHEADERW'
,'tagNMIPADDRESS'
,'tagNMITEMACTIVATE'
,'tagNMKEY'
,'tagNMLISTVIEW'
,'tagNMLVCACHEHINT'
,'tagNMLVCUSTOMDRAW'
,'tagNMLVFINDITEM'
,'tagNMLVFINDITEMA'
,'tagNMLVFINDITEMW'
,'tagNMLVGETINFOTIP'
,'tagNMLVGETINFOTIPA'
,'tagNMLVGETINFOTIPW'
,'tagNMLVODSTATECHANGE'
,'tagNMMOUSE'
,'tagNMOBJECTNOTIFY'
,'tagNMRBAUTOSIZE'
,'tagNMREBAR'
,'tagNMREBARCHILDSIZE'
,'tagNMSELCHANGE'
,'tagNMTBGETINFOTIP'
,'tagNMTBGETINFOTIPA'
,'tagNMTBGETINFOTIPW'
,'tagNMTBHOTITEM'
,'tagNMTOOLBAR'
,'tagNMTOOLBARA'
,'tagNMTOOLBARW'
,'tagNMTREEVIEW'
,'tagNMTREEVIEWA'
,'tagNMTREEVIEWW'
,'tagNMTTCUSTOMDRAW'
,'tagNMTTDISPINFO'
,'tagNMTTDISPINFOA'
,'tagNMTTDISPINFOW'
,'tagNMTVCUSTOMDRAW'
,'tagNMTVGETINFOTIP'
,'tagNMTVGETINFOTIPA'
,'tagNMTVGETINFOTIPW'
,'tagREBARBANDINFO'
,'tagREBARBANDINFOA'
,'tagREBARBANDINFOW'
,'tagREBARINFO'
,'tagTBADDBITMAP'
,'tagTBSAVEPARAMS'
,'tagTBSAVEPARAMSA'
,'tagTBSAVEPARAMSW'
,'tagTCHITTESTINFO'
,'tagTCITEM'
,'tagTCITEMA'
,'tagTCITEMHEADER'
,'tagTCITEMHEADERA'
,'tagTCITEMHEADERW'
,'tagTCITEMW'
,'tagTCKEYDOWN'
,'tagTOOLINFO'
,'tagTOOLINFOA'
,'tagTOOLINFOW'
,'tagTOOLTIPTEXT'
,'tagTOOLTIPTEXTA'
,'tagTOOLTIPTEXTW'
,'tagTRACKMOUSEEVENT'
,'tagTVDISPINFO'
,'tagTVDISPINFOA'
,'tagTVDISPINFOW'
,'tagTVHITTESTINFO'
,'tagTVINSERTSTRUCT'
,'tagTVINSERTSTRUCTA'
,'tagTVINSERTSTRUCTW'
,'tagTVITEM'
,'tagTVITEMA'
,'tagTVITEMEX'
,'tagTVITEMEXA'
,'tagTVITEMEXW'
,'tagTVITEMW'
,'tagTVKEYDOWN'
,'tagTVSORTCB'
,'TBADDBITMAP'
,'TBBUTTONINFO'
,'TBBUTTONINFOA'
,'TBBUTTONINFOW'
,'TBINSERTMARK'
,'TBREPLACEBITMAP'
,'TBSAVEPARAMS'
,'TBSAVEPARAMSA'
,'TBSAVEPARAMSW'
,'TC_HITTESTINFO'
,'TC_ITEM'
,'TC_ITEMA'
,'TC_ITEMHEADER'
,'TC_ITEMHEADERA'
,'TC_ITEMHEADERW'
,'TC_ITEMW'
,'TC_KEYDOWN'
,'TColorMap'
,'TColorScheme'
,'TComboBoxExItem'
,'TComboBoxExItemA'
,'TComboBoxExItemW'
,'TDragListInfo'
,'THDHitTestInfo'
,'THDItem'
,'THDItemA'
,'THDItemW'
,'THDLayout'
,'THDNotify'
,'THDNotifyA'
,'THDNotifyW'
,'TImageInfo'
,'TImageListDrawParams'
,'TInitCommonControlsEx'
,'TLVBKImage'
,'TLVBKImageA'
,'TLVBKImageW'
,'TLVColumn'
,'TLVColumnA'
,'TLVColumnW'
,'TLVDispInfo'
,'TLVDispInfoA'
,'TLVDispInfoW'
,'TLVFindInfo'
,'TLVFindInfoA'
,'TLVFindInfoW'
,'TLVHitTestInfo'
,'TLVItem'
,'TLVItemA'
,'TLVItemW'
,'TLVKeyDown'
,'TMCHitTestInfo'
,'TNMCacheHint'
,'TNMCBEDragBegin'
,'TNMCBEDragBeginA'
,'TNMCBEDragBeginW'
,'TNMCBEEndEdit'
,'TNMCBEEndEditA'
,'TNMCBEEndEditW'
,'TNMChar'
,'TNMClick'
,'TNMComboBoxEx'
,'TNMComboBoxExA'
,'TNMComboBoxExW'
,'TNMCustomDraw'
,'TNMDateTimeChange'
,'TNMDateTimeFormat'
,'TNMDateTimeFormatA'
,'TNMDateTimeFormatQuery'
,'TNMDateTimeFormatQueryA'
,'TNMDateTimeFormatQueryW'
,'TNMDateTimeFormatW'
,'TNMDateTimeString'
,'TNMDateTimeStringA'
,'TNMDateTimeStringW'
,'TNMDateTimeWMKeyDown'
,'TNMDateTimeWMKeyDownA'
,'TNMDateTimeWMKeyDownW'
,'TNMDayState'
,'TNMFinditem'
,'TNMFinditemA'
,'TNMFinditemW'
,'TNMHDispInfo'
,'TNMHDispInfoA'
,'TNMHDispInfoW'
,'TNMIPAddress'
,'TNMItemActivate'
,'TNMKey'
,'TNMListView'
,'TNMLVCacheHint'
,'TNMLVCustomDraw'
,'TNMLVFinditem'
,'TNMLVFinditemA'
,'TNMLVFinditemW'
,'TNMLVGetInfoTip'
,'TNMLVGetInfoTipA'
,'TNMLVGetInfoTipW'
,'TNMLVODStateChange'
,'TNMMouse'
,'TNMObjectNotify'
,'TNMPGCalcSize'
,'TNMPGScroll'
,'TNMRBAutoSize'
,'TNMReBar'
,'TNMReBarChildSize'
,'TNMSelChange'
,'TNMSelect'
,'TNMTBCustomDraw'
,'TNMTBDispInfo'
,'TNMTBDispInfoA'
,'TNMTBDispInfoW'
,'TNMTBGetInfoTip'
,'TNMTBGetInfoTipA'
,'TNMTBGetInfoTipW'
,'TNMTBHotItem'
,'TNMToolBar'
,'TNMToolBarA'
,'TNMToolBarW'
,'TNMTreeView'
,'TNMTreeViewA'
,'TNMTreeViewW'
,'TNMTTCustomDraw'
,'TNMTTDispInfo'
,'TNMTTDispInfoA'
,'TNMTTDispInfoW'
,'TNMTVCustomDraw'
,'TNMTVGetInfoTip'
,'TNMTVGetInfoTipA'
,'TNMTVGetInfoTipW'
,'TNMUpDown'
,'TOOLINFO'
,'TOOLINFOA'
,'TOOLINFOW'
,'TOOLTIPTEXT'
,'TOOLTIPTEXTA'
,'TOOLTIPTEXTW'
,'TPBRange'
,'TPropSheetHeader'
,'TPropSheetHeaderA'
,'TPropSheetHeaderW'
,'TPropSheetPage'
,'TPropSheetPageA'
,'TPropSheetPageW'
,'TRBHitTestInfo'
,'TReBarBandInfo'
,'TReBarBandInfoA'
,'TReBarBandInfoW'
,'TReBarInfo'
,'TTBAddBitmap'
,'TTBButton'
,'TTBButtonInfo'
,'TTBButtonInfoA'
,'TTBButtonInfoW'
,'TTBInsertMark'
,'TTBReplaceBitmap'
,'TTBSaveParams'
,'TTBSaveParamsA'
,'TTBSaveParamsW'
,'TTCHitTestInfo'
,'TTCItem'
,'TTCItemA'
,'TTCItemHeader'
,'TTCItemHeaderA'
,'TTCItemHeaderW'
,'TTCItemW'
,'TTCKeyDown'
,'TTHITTESTINFO'
,'TTHITTESTINFOA'
,'TTHITTESTINFOW'
,'TToolInfo'
,'TToolInfoA'
,'TToolInfoW'
,'TToolTipText'
,'TToolTipTextA'
,'TToolTipTextW'
,'TTrackMouseEvent'
,'TTTHitTestInfo'
,'TTTHitTestInfoA'
,'TTTHitTestInfoW'
,'TTVDispInfo'
,'TTVDispInfoA'
,'TTVDispInfoW'
,'TTVHitTestInfo'
,'TTVInsertStruct'
,'TTVInsertStructA'
,'TTVInsertStructW'
,'TTVItem'
,'TTVItemA'
,'TTVItemEx'
,'TTVItemExA'
,'TTVItemExW'
,'TTVItemW'
,'TTVKeyDown'
,'TTVSortCB'
,'TUDAccel'
,'TV_DISPINFO'
,'TV_DISPINFOA'
,'TV_DISPINFOW'
,'TV_HITTESTINFO'
,'TV_INSERTSTRUCT'
,'TV_INSERTSTRUCTA'
,'TV_INSERTSTRUCTW'
,'TV_ITEM'
,'TV_ITEMA'
,'TV_ITEMW'
,'TV_KEYDOWN'
,'TV_SORTCB'
,'UDACCEL'
,'CreatePropertySheetPage'
,'CreatePropertySheetPageA'
,'CreatePropertySheetPageW'
,'DestroyPropertySheetPage'
,'PropertySheet'
,'PropertySheetA'
,'PropertySheetW'
,'InitCommonControls'
,'InitCommonControlsEx'
,'ImageList_Create'
,'ImageList_Destroy'
,'ImageList_GetImageCount'
,'ImageList_SetImageCount'
,'ImageList_Add'
,'ImageList_ReplaceIcon'
,'ImageList_SetBkColor'
,'ImageList_GetBkColor'
,'ImageList_SetOverlayImage'
,'ImageList_AddIcon'
,'IndexToOverlayMask'
,'ImageList_Draw'
,'ImageList_Replace'
,'ImageList_AddMasked'
,'ImageList_DrawEx'
,'ImageList_Remove'
,'ImageList_GetIcon'
,'ImageList_Copy'
,'ImageList_BeginDrag'
,'ImageList_EndDrag'
,'ImageList_DragEnter'
,'ImageList_DragLeave'
,'ImageList_DragMove'
,'ImageList_SetDragCursorImage'
,'ImageList_DragShowNolock'
,'ImageList_RemoveAll'
,'ImageList_ExtractIcon'
,'ImageList_GetIconSize'
,'ImageList_SetIconSize'
,'ImageList_GetImageInfo'
,'ImageList_Merge'
,'ImageList_Duplicate'
,'Header_GetItemCount'
,'Header_InsertItem'
,'Header_InsertItemA'
,'Header_InsertItemW'
,'Header_DeleteItem'
,'Header_GetItem'
,'Header_GetItemA'
,'Header_GetItemW'
,'Header_SetItem'
,'Header_SetItemA'
,'Header_SetItemW'
,'Header_SetImageList'
,'Header_GetImageList'
,'Header_OrderToIndex'
,'Header_CreateDragImage'
,'Header_GetOrderArray'
,'Header_SetOrderArray'
,'Header_SetHotDivider'
,'Header_SetUnicodeFormat'
,'Header_GetUnicodeFormat'
,'MenuHelp'
,'ShowHideMenuCtl'
,'MakeDragList'
,'DrawInsert'
,'LBItemFromPt'
,'CreateUpDownControl'
,'ListView_SetUnicodeFormat'
,'ListView_GetUnicodeFormat'
,'ListView_GetBkColor'
,'ListView_SetBkColor'
,'ListView_GetImageList'
,'ListView_SetImageList'
,'ListView_GetItemCount'
,'IndexToStateImageMask'
,'ListView_GetItem'
,'ListView_GetItemA'
,'ListView_GetItemW'
,'ListView_SetItem'
,'ListView_SetItemA'
,'ListView_SetItemW'
,'ListView_InsertItem'
,'ListView_InsertItemA'
,'ListView_InsertItemW'
,'ListView_DeleteItem'
,'ListView_DeleteAllItems'
,'ListView_GetCallbackMask'
,'ListView_SetCallbackMask'
,'ListView_GetNextItem'
,'ListView_FindItem'
,'ListView_FindItemA'
,'ListView_FindItemW'
,'ListView_GetItemRect'
,'ListView_SetItemPosition'
,'ListView_GetItemPosition'
,'ListView_HitTest'
,'ListView_EnsureVisible'
,'ListView_Scroll'
,'ListView_RedrawItems'
,'ListView_Arrange'
,'ListView_EditLabel'
,'ListView_EditLabelA'
,'ListView_EditLabelW'
,'ListView_GetEditControl'
,'ListView_GetColumn'
,'ListView_GetColumnA'
,'ListView_GetColumnW'
,'ListView_SetColumn'
,'ListView_SetColumnA'
,'ListView_SetColumnW'
,'ListView_InsertColumn'
,'ListView_InsertColumnA'
,'ListView_InsertColumnW'
,'ListView_DeleteColumn'
,'ListView_GetColumnWidth'
,'ListView_SetColumnWidth'
,'ListView_GetHeader'
,'ListView_CreateDragImage'
,'ListView_GetViewRect'
,'ListView_GetTextColor'
,'ListView_SetTextColor'
,'ListView_GetTextBkColor'
,'ListView_SetTextBkColor'
,'ListView_GetTopIndex'
,'ListView_GetCountPerPage'
,'ListView_GetOrigin'
,'ListView_Update'
,'ListView_SetItemState'
,'ListView_GetItemState'
,'ListView_GetCheckState'
,'ListView_SetCheckState'
,'ListView_SetItemCount'
,'ListView_SetItemCountEx'
,'ListView_SetItemPosition32'
,'ListView_GetSelectedCount'
,'ListView_GetItemSpacing'
,'ListView_SetIconSpacing'
,'ListView_SetExtendedListViewStyle'
,'ListView_GetExtendedListViewStyle'
,'ListView_SetColumnOrderArray'
,'ListView_GetColumnOrderArray'
,'ListView_SetHotItem'
,'ListView_GetHotItem'
,'ListView_SetHotCursor'
,'ListView_GetHotCursor'
,'ListView_ApproximateViewRect'
,'ListView_GetSelectionMark'
,'ListView_SetSelectionMark'
,'ListView_SetHoverTime'
,'ListView_GetHoverTime'
,'ListView_GetNumberOfWorkAreas'
,'ListView_SetToolTips'
,'ListView_GetToolTips'
,'TreeView_DeleteAllItems'
,'TreeView_GetCount'
,'TreeView_GetIndent'
,'TreeView_SetIndent'
,'TreeView_GetImageList'
,'TreeView_SetImageList'
,'TreeView_GetItem'
,'TreeView_GetItemA'
,'TreeView_GetItemW'
,'TreeView_SetItem'
,'TreeView_SetItemA'
,'TreeView_SetItemW'
,'TreeView_GetEditControl'
,'TreeView_GetVisibleCount'
,'TreeView_SortChildrenCB'
,'TreeView_EndEditLabelNow'
,'TreeView_SetToolTips'
,'TreeView_GetToolTips'
,'TreeView_SetInsertMark'
,'TreeView_SetUnicodeFormat'
,'TreeView_GetUnicodeFormat'
,'TreeView_SetItemHeight'
,'TreeView_GetItemHeight'
,'TreeView_SetBkColor'
,'TreeView_SetTextColor'
,'TreeView_GetBkColor'
,'TreeView_GetTextColor'
,'TreeView_SetScrollTime'
,'TreeView_GetScrollTime'
,'TreeView_SetInsertMarkColor'
,'TreeView_GetInsertMarkColor'
,'TabCtrl_SetItemExtra'
,'TabCtrl_SetItemSize'
,'TabCtrl_RemoveImage'
,'TabCtrl_SetPadding'
,'TabCtrl_GetRowCount'
,'TabCtrl_GetToolTips'
,'TabCtrl_SetToolTips'
,'TabCtrl_GetCurFocus'
,'TabCtrl_SetCurFocus'
,'TabCtrl_SetMinTabWidth'
,'TabCtrl_DeselectAll'
,'TabCtrl_HighlightItem'
,'TabCtrl_SetExtendedStyle'
,'TabCtrl_GetExtendedStyle'
,'TabCtrl_SetUnicodeFormat'
,'TabCtrl_GetUnicodeFormat'
,'TabCtrl_GetItemRect'
,'Animate_Create'
,'Animate_Play'
,'Animate_Stop'
,'Animate_Close'
,'Animate_Seek'
,'MonthCal_GetCurSel'
,'MonthCal_SetCurSel'
,'MonthCal_GetMaxSelCount'
,'MonthCal_SetMaxSelCount'
,'MonthCal_SetDayState'
,'MonthCal_GetMinReqRect'
,'MonthCal_SetToday'
,'MonthCal_GetToday'
,'MonthCal_HitTest'
,'MonthCal_SetColor'
,'MonthCal_GetColor'
,'MonthCal_SetFirstDayOfWeek'
,'MonthCal_GetFirstDayOfWeek'
,'MonthCal_GetMonthDelta'
,'MonthCal_SetMonthDelta'
,'MonthCal_GetMaxTodayWidth'
,'MonthCal_SetUnicodeFormat'
,'MonthCal_GetUnicodeFormat'
,'DateTime_GetSystemTime'
,'DateTime_SetSystemTime'
,'DateTime_SetMonthCalColor'
,'DateTime_GetMonthCalColor'
,'DateTime_GetMonthCal'
,'DateTime_SetMonthCalFont'
,'DateTime_GetMonthCalFont'
,'MAKEIPRANGE'
,'MAKEIPADDRESS'
,'FIRST_IPADDRESS'
,'SECOND_IPADDRESS'
,'THIRD_IPADDRESS'
,'FOURTH_IPADDRESS'
,'Pager_SetChild'
,'Pager_RecalcSize'
,'Pager_ForwardMouse'
,'Pager_SetBkColor'
,'Pager_GetBkColor'
,'Pager_SetBorder'
,'Pager_GetBorder'
,'Pager_SetPos'
,'Pager_GetPos'
,'Pager_SetButtonSize'
,'Pager_GetButtonSize'
,'Pager_GetButtonState'
,'Pager_GetDropTarget'
,'FlatSB_EnableScrollBar'
,'FlatSB_ShowScrollBar'
,'FlatSB_GetScrollRange'
,'FlatSB_GetScrollInfo'
,'FlatSB_GetScrollPos'
,'FlatSB_GetScrollProp'
,'FlatSB_SetScrollPos'
,'FlatSB_SetScrollInfo'
,'FlatSB_SetScrollRange'
,'FlatSB_SetScrollProp'
,'InitializeFlatSB'
,'UninitializeFlatSB'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(__COLORMAP_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(__HD_HITTESTINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(__HD_ITEM_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(__HD_ITEMA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(__HD_ITEMW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[5],Addr(__HD_LAYOUT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[6],Addr(__IMAGEINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[7],Addr(__IMAGELISTDRAWPARAMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[8],Addr(__LV_COLUMN_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[9],Addr(__LV_COLUMNA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[10],Addr(__LV_COLUMNW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[11],Addr(__LV_DISPINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[12],Addr(__LV_DISPINFOW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[13],Addr(__LV_FINDINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[14],Addr(__LV_FINDINFOA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[15],Addr(__LV_FINDINFOW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[16],Addr(__LV_HITTESTINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[17],Addr(__LV_ITEM_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[18],Addr(__LV_ITEMA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[19],Addr(__LV_ITEMW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[20],Addr(__LV_KEYDOWN_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[21],Addr(__NM_LISTVIEW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[22],Addr(__NM_TREEVIEW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[23],Addr(__NM_TREEVIEWA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[24],Addr(__NM_TREEVIEWW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[25],Addr(__NM_UPDOWN_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[26],Addr(__NMTBCUSTOMDRAW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[27],Addr(__PROPSHEETHEADER_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[28],Addr(__PROPSHEETHEADERA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[29],Addr(__PROPSHEETHEADERW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[30],Addr(__PROPSHEETPAGE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[31],Addr(__PROPSHEETPAGEA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[32],Addr(__PROPSHEETPAGEW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[33],Addr(__RB_HITTESTINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[34],Addr(__TBBUTTON_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[35],Addr(__TC_HITTESTINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[36],Addr(__TC_ITEM_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[37],Addr(__TC_ITEMA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[38],Addr(__TC_ITEMHEADER_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[39],Addr(__TC_ITEMHEADERA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[40],Addr(__TC_ITEMHEADERW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[41],Addr(__TC_ITEMW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[42],Addr(__TC_KEYDOWN_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[43],Addr(__TREEITEM_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[44],Addr(__TT_HITTESTINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[45],Addr(__TT_HITTESTINFOA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[46],Addr(__TT_HITTESTINFOW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[47],Addr(__TV_DISPINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[48],Addr(__TV_DISPINFOA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[49],Addr(__TV_DISPINFOW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[50],Addr(__TV_HITTESTINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[51],Addr(__TV_INSERTSTRUCT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[52],Addr(__TV_INSERTSTRUCTA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[53],Addr(__TV_INSERTSTRUCTW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[54],Addr(__TV_ITEM_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[55],Addr(__TV_ITEMA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[56],Addr(__TV_ITEMW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[57],Addr(__TV_KEYDOWN_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[58],Addr(__TV_SORTCB_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[59],Addr(__UDACCEL_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[60],Addr(_COLORMAP_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[61],Addr(_DRAGLISTINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[62],Addr(_HD_HITTESTINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[63],Addr(_HD_ITEM_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[64],Addr(_HD_ITEMA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[65],Addr(_HD_ITEMW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[66],Addr(_HD_LAYOUT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[67],Addr(_HD_NOTIFY_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[68],Addr(_HD_NOTIFYA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[69],Addr(_HD_NOTIFYW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[70],Addr(_IMAGEINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[71],Addr(_LV_COLUMN_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[72],Addr(_LV_COLUMNA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[73],Addr(_LV_COLUMNW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[74],Addr(_LV_DISPINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[75],Addr(_LV_DISPINFOA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[76],Addr(_LV_DISPINFOW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[77],Addr(_LV_FINDINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[78],Addr(_LV_FINDINFOA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[79],Addr(_LV_FINDINFOW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[80],Addr(_LV_HITTESTINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[81],Addr(_LV_ITEM_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[82],Addr(_LV_ITEMA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[83],Addr(_LV_ITEMW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[84],Addr(_LV_KEYDOWN_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[85],Addr(_MCHITTESTINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[86],Addr(_NM_LISTVIEW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[87],Addr(_NM_TREEVIEW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[88],Addr(_NM_TREEVIEWA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[89],Addr(_NM_TREEVIEWW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[90],Addr(_NM_UPDOWN_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[91],Addr(_NMCBEDRAGBEGIN_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[92],Addr(_NMCBEDRAGBEGINA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[93],Addr(_NMCBEDRAGBEGINW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[94],Addr(_NMCBEENDEDIT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[95],Addr(_NMCBEENDEDITA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[96],Addr(_NMCBEENDEDITW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[97],Addr(_NMCOMBOBOXEX_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[98],Addr(_NMCOMBOBOXEXA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[99],Addr(_NMCOMBOBOXEXW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[100],Addr(_NMPGCALCSIZE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[101],Addr(_NMPGSCROLL_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[102],Addr(_NMSELECT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[103],Addr(_NMTBDISPINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[104],Addr(_NMTBDISPINFOA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[105],Addr(_NMTBDISPINFOW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[106],Addr(_PBRANGE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[107],Addr(_PROPSHEETPAGE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[108],Addr(_PROPSHEETPAGEA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[109],Addr(_PROPSHEETPAGEW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[110],Addr(_tagCOLORSCHEME_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[111],Addr(_tagCOMBOBOXEXITEM_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[112],Addr(_tagCOMBOBOXEXITEMA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[113],Addr(_tagCOMBOBOXEXITEMW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[114],Addr(_tagDRAGLISTINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[115],Addr(_tagINITCOMMONCONTROLSEX_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[116],Addr(_tagLVBKIMAGE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[117],Addr(_tagLVBKIMAGEA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[118],Addr(_tagLVBKIMAGEW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[119],Addr(_tagLVCOLUMN_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[120],Addr(_tagLVCOLUMNA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[121],Addr(_tagLVCOLUMNW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[122],Addr(_tagLVDISPINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[123],Addr(_tagLVDISPINFOW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[124],Addr(_tagLVFINDINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[125],Addr(_tagLVFINDINFOA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[126],Addr(_tagLVFINDINFOW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[127],Addr(_tagLVHITTESTINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[128],Addr(_tagLVITEM_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[129],Addr(_tagLVITEMA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[130],Addr(_tagLVITEMW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[131],Addr(_tagLVKEYDOWN_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[132],Addr(_tagNMCHAR_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[133],Addr(_tagNMCUSTOMDRAWINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[134],Addr(_tagNMDATETIMECHANGE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[135],Addr(_tagNMDATETIMEFORMAT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[136],Addr(_tagNMDATETIMEFORMATA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[137],Addr(_tagNMDATETIMEFORMATQUERY_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[138],Addr(_tagNMDATETIMEFORMATQUERYA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[139],Addr(_tagNMDATETIMEFORMATQUERYW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[140],Addr(_tagNMDATETIMEFORMATW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[141],Addr(_tagNMDATETIMESTRING_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[142],Addr(_tagNMDATETIMESTRINGA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[143],Addr(_tagNMDATETIMESTRINGW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[144],Addr(_tagNMDATETIMEWMKEYDOWN_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[145],Addr(_tagNMDATETIMEWMKEYDOWNA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[146],Addr(_tagNMDATETIMEWMKEYDOWNW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[147],Addr(_tagNMDAYSTATE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[148],Addr(_tagNMHDDISPINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[149],Addr(_tagNMHDDISPINFOA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[150],Addr(_tagNMHDDISPINFOW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[151],Addr(_tagNMHEADER_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[152],Addr(_tagNMHEADERA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[153],Addr(_tagNMHEADERW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[154],Addr(_tagNMIPADDRESS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[155],Addr(_tagNMITEMACTIVATE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[156],Addr(_tagNMKEY_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[157],Addr(_tagNMLISTVIEW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[158],Addr(_tagNMLVCACHEHINT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[159],Addr(_tagNMLVCUSTOMDRAW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[160],Addr(_tagNMLVFINDITEM_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[161],Addr(_tagNMLVFINDITEMA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[162],Addr(_tagNMLVFINDITEMW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[163],Addr(_tagNMLVGETINFOTIP_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[164],Addr(_tagNMLVGETINFOTIPA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[165],Addr(_tagNMLVGETINFOTIPW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[166],Addr(_tagNMLVODSTATECHANGE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[167],Addr(_tagNMMOUSE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[168],Addr(_tagNMOBJECTNOTIFY_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[169],Addr(_tagNMRBAUTOSIZE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[170],Addr(_tagNMREBAR_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[171],Addr(_tagNMREBARCHILDSIZE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[172],Addr(_tagNMSELCHANGE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[173],Addr(_tagNMTBGETINFOTIP_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[174],Addr(_tagNMTBGETINFOTIPA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[175],Addr(_tagNMTBGETINFOTIPW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[176],Addr(_tagNMTBHOTITEM_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[177],Addr(_tagNMTOOLBAR_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[178],Addr(_tagNMTOOLBARA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[179],Addr(_tagNMTOOLBARW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[180],Addr(_tagNMTREEVIEW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[181],Addr(_tagNMTREEVIEWA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[182],Addr(_tagNMTREEVIEWW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[183],Addr(_tagNMTTCUSTOMDRAW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[184],Addr(_tagNMTTDISPINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[185],Addr(_tagNMTTDISPINFOA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[186],Addr(_tagNMTTDISPINFOW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[187],Addr(_tagNMTVCUSTOMDRAW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[188],Addr(_tagNMTVGETINFOTIP_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[189],Addr(_tagNMTVGETINFOTIPA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[190],Addr(_tagNMTVGETINFOTIPW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[191],Addr(_tagREBARBANDINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[192],Addr(_tagREBARBANDINFOA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[193],Addr(_tagREBARBANDINFOW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[194],Addr(_tagREBARINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[195],Addr(_tagTBADDBITMAP_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[196],Addr(_tagTBSAVEPARAMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[197],Addr(_tagTBSAVEPARAMSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[198],Addr(_tagTBSAVEPARAMSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[199],Addr(_tagTCHITTESTINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[200],Addr(_tagTCITEM_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[201],Addr(_tagTCITEMA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[202],Addr(_tagTCITEMHEADER_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[203],Addr(_tagTCITEMHEADERA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[204],Addr(_tagTCITEMHEADERW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[205],Addr(_tagTCITEMW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[206],Addr(_tagTCKEYDOWN_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[207],Addr(_tagTOOLINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[208],Addr(_tagTOOLINFOA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[209],Addr(_tagTOOLINFOW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[210],Addr(_tagTOOLTIPTEXT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[211],Addr(_tagTOOLTIPTEXTA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[212],Addr(_tagTOOLTIPTEXTW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[213],Addr(_tagTRACKMOUSEEVENT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[214],Addr(_tagTVDISPINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[215],Addr(_tagTVDISPINFOA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[216],Addr(_tagTVDISPINFOW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[217],Addr(_tagTVHITTESTINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[218],Addr(_tagTVINSERTSTRUCT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[219],Addr(_tagTVINSERTSTRUCTA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[220],Addr(_tagTVINSERTSTRUCTW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[221],Addr(_tagTVITEM_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[222],Addr(_tagTVITEMA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[223],Addr(_tagTVITEMEX_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[224],Addr(_tagTVITEMEXA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[225],Addr(_tagTVITEMEXW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[226],Addr(_tagTVITEMW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[227],Addr(_tagTVKEYDOWN_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[228],Addr(_tagTVSORTCB_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[229],Addr(_TBADDBITMAP_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[230],Addr(_TBBUTTONINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[231],Addr(_TBBUTTONINFOA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[232],Addr(_TBBUTTONINFOW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[233],Addr(_TBINSERTMARK_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[234],Addr(_TBREPLACEBITMAP_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[235],Addr(_TBSAVEPARAMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[236],Addr(_TBSAVEPARAMSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[237],Addr(_TBSAVEPARAMSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[238],Addr(_TC_HITTESTINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[239],Addr(_TC_ITEM_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[240],Addr(_TC_ITEMA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[241],Addr(_TC_ITEMHEADER_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[242],Addr(_TC_ITEMHEADERA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[243],Addr(_TC_ITEMHEADERW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[244],Addr(_TC_ITEMW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[245],Addr(_TC_KEYDOWN_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[246],Addr(_TColorMap_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[247],Addr(_TColorScheme_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[248],Addr(_TComboBoxExItem_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[249],Addr(_TComboBoxExItemA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[250],Addr(_TComboBoxExItemW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[251],Addr(_TDragListInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[252],Addr(_THDHitTestInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[253],Addr(_THDItem_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[254],Addr(_THDItemA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[255],Addr(_THDItemW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[256],Addr(_THDLayout_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[257],Addr(_THDNotify_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[258],Addr(_THDNotifyA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[259],Addr(_THDNotifyW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[260],Addr(_TImageInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[261],Addr(_TImageListDrawParams_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[262],Addr(_TInitCommonControlsEx_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[263],Addr(_TLVBKImage_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[264],Addr(_TLVBKImageA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[265],Addr(_TLVBKImageW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[266],Addr(_TLVColumn_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[267],Addr(_TLVColumnA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[268],Addr(_TLVColumnW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[269],Addr(_TLVDispInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[270],Addr(_TLVDispInfoA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[271],Addr(_TLVDispInfoW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[272],Addr(_TLVFindInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[273],Addr(_TLVFindInfoA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[274],Addr(_TLVFindInfoW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[275],Addr(_TLVHitTestInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[276],Addr(_TLVItem_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[277],Addr(_TLVItemA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[278],Addr(_TLVItemW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[279],Addr(_TLVKeyDown_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[280],Addr(_TMCHitTestInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[281],Addr(_TNMCacheHint_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[282],Addr(_TNMCBEDragBegin_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[283],Addr(_TNMCBEDragBeginA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[284],Addr(_TNMCBEDragBeginW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[285],Addr(_TNMCBEEndEdit_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[286],Addr(_TNMCBEEndEditA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[287],Addr(_TNMCBEEndEditW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[288],Addr(_TNMChar_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[289],Addr(_TNMClick_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[290],Addr(_TNMComboBoxEx_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[291],Addr(_TNMComboBoxExA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[292],Addr(_TNMComboBoxExW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[293],Addr(_TNMCustomDraw_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[294],Addr(_TNMDateTimeChange_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[295],Addr(_TNMDateTimeFormat_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[296],Addr(_TNMDateTimeFormatA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[297],Addr(_TNMDateTimeFormatQuery_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[298],Addr(_TNMDateTimeFormatQueryA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[299],Addr(_TNMDateTimeFormatQueryW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[300],Addr(_TNMDateTimeFormatW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[301],Addr(_TNMDateTimeString_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[302],Addr(_TNMDateTimeStringA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[303],Addr(_TNMDateTimeStringW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[304],Addr(_TNMDateTimeWMKeyDown_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[305],Addr(_TNMDateTimeWMKeyDownA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[306],Addr(_TNMDateTimeWMKeyDownW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[307],Addr(_TNMDayState_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[308],Addr(_TNMFinditem_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[309],Addr(_TNMFinditemA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[310],Addr(_TNMFinditemW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[311],Addr(_TNMHDispInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[312],Addr(_TNMHDispInfoA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[313],Addr(_TNMHDispInfoW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[314],Addr(_TNMIPAddress_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[315],Addr(_TNMItemActivate_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[316],Addr(_TNMKey_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[317],Addr(_TNMListView_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[318],Addr(_TNMLVCacheHint_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[319],Addr(_TNMLVCustomDraw_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[320],Addr(_TNMLVFinditem_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[321],Addr(_TNMLVFinditemA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[322],Addr(_TNMLVFinditemW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[323],Addr(_TNMLVGetInfoTip_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[324],Addr(_TNMLVGetInfoTipA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[325],Addr(_TNMLVGetInfoTipW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[326],Addr(_TNMLVODStateChange_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[327],Addr(_TNMMouse_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[328],Addr(_TNMObjectNotify_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[329],Addr(_TNMPGCalcSize_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[330],Addr(_TNMPGScroll_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[331],Addr(_TNMRBAutoSize_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[332],Addr(_TNMReBar_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[333],Addr(_TNMReBarChildSize_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[334],Addr(_TNMSelChange_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[335],Addr(_TNMSelect_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[336],Addr(_TNMTBCustomDraw_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[337],Addr(_TNMTBDispInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[338],Addr(_TNMTBDispInfoA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[339],Addr(_TNMTBDispInfoW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[340],Addr(_TNMTBGetInfoTip_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[341],Addr(_TNMTBGetInfoTipA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[342],Addr(_TNMTBGetInfoTipW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[343],Addr(_TNMTBHotItem_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[344],Addr(_TNMToolBar_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[345],Addr(_TNMToolBarA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[346],Addr(_TNMToolBarW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[347],Addr(_TNMTreeView_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[348],Addr(_TNMTreeViewA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[349],Addr(_TNMTreeViewW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[350],Addr(_TNMTTCustomDraw_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[351],Addr(_TNMTTDispInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[352],Addr(_TNMTTDispInfoA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[353],Addr(_TNMTTDispInfoW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[354],Addr(_TNMTVCustomDraw_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[355],Addr(_TNMTVGetInfoTip_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[356],Addr(_TNMTVGetInfoTipA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[357],Addr(_TNMTVGetInfoTipW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[358],Addr(_TNMUpDown_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[359],Addr(_TOOLINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[360],Addr(_TOOLINFOA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[361],Addr(_TOOLINFOW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[362],Addr(_TOOLTIPTEXT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[363],Addr(_TOOLTIPTEXTA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[364],Addr(_TOOLTIPTEXTW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[365],Addr(_TPBRange_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[366],Addr(_TPropSheetHeader_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[367],Addr(_TPropSheetHeaderA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[368],Addr(_TPropSheetHeaderW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[369],Addr(_TPropSheetPage_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[370],Addr(_TPropSheetPageA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[371],Addr(_TPropSheetPageW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[372],Addr(_TRBHitTestInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[373],Addr(_TReBarBandInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[374],Addr(_TReBarBandInfoA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[375],Addr(_TReBarBandInfoW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[376],Addr(_TReBarInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[377],Addr(_TTBAddBitmap_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[378],Addr(_TTBButton_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[379],Addr(_TTBButtonInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[380],Addr(_TTBButtonInfoA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[381],Addr(_TTBButtonInfoW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[382],Addr(_TTBInsertMark_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[383],Addr(_TTBReplaceBitmap_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[384],Addr(_TTBSaveParams_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[385],Addr(_TTBSaveParamsA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[386],Addr(_TTBSaveParamsW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[387],Addr(_TTCHitTestInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[388],Addr(_TTCItem_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[389],Addr(_TTCItemA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[390],Addr(_TTCItemHeader_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[391],Addr(_TTCItemHeaderA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[392],Addr(_TTCItemHeaderW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[393],Addr(_TTCItemW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[394],Addr(_TTCKeyDown_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[395],Addr(_TTHITTESTINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[396],Addr(_TTHITTESTINFOA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[397],Addr(_TTHITTESTINFOW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[398],Addr(_TToolInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[399],Addr(_TToolInfoA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[400],Addr(_TToolInfoW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[401],Addr(_TToolTipText_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[402],Addr(_TToolTipTextA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[403],Addr(_TToolTipTextW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[404],Addr(_TTrackMouseEvent_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[405],Addr(_TTTHitTestInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[406],Addr(_TTTHitTestInfoA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[407],Addr(_TTTHitTestInfoW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[408],Addr(_TTVDispInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[409],Addr(_TTVDispInfoA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[410],Addr(_TTVDispInfoW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[411],Addr(_TTVHitTestInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[412],Addr(_TTVInsertStruct_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[413],Addr(_TTVInsertStructA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[414],Addr(_TTVInsertStructW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[415],Addr(_TTVItem_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[416],Addr(_TTVItemA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[417],Addr(_TTVItemEx_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[418],Addr(_TTVItemExA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[419],Addr(_TTVItemExW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[420],Addr(_TTVItemW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[421],Addr(_TTVKeyDown_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[422],Addr(_TTVSortCB_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[423],Addr(_TUDAccel_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[424],Addr(_TV_DISPINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[425],Addr(_TV_DISPINFOA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[426],Addr(_TV_DISPINFOW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[427],Addr(_TV_HITTESTINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[428],Addr(_TV_INSERTSTRUCT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[429],Addr(_TV_INSERTSTRUCTA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[430],Addr(_TV_INSERTSTRUCTW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[431],Addr(_TV_ITEM_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[432],Addr(_TV_ITEMA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[433],Addr(_TV_ITEMW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[434],Addr(_TV_KEYDOWN_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[435],Addr(_TV_SORTCB_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[436],Addr(_UDACCEL_)));
RegisterProc(nil,MethodNames[437],mtProc,TypeInfo(_T0),[
TypeInfo(IDispatch),TypeInfoPointer],Addr(____CreatePropertySheetPage__Wrapper),cRegister);

RegisterProc(nil,MethodNames[438],mtProc,TypeInfo(_T1),[
TypeInfo(IDispatch),TypeInfoPointer],Addr(____CreatePropertySheetPageA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[439],mtProc,TypeInfo(_T2),[
TypeInfo(IDispatch),TypeInfoPointer],Addr(____CreatePropertySheetPageW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[440],mtProc,TypeInfo(_T3),[
TypeInfoPointer,TypeInfo(BOOL)],Addr(DestroyPropertySheetPage),cStdCall);

RegisterProc(nil,MethodNames[441],mtProc,TypeInfo(_T4),[
TypeInfo(IDispatch),TypeInfo(Integer)],Addr(____PropertySheet__Wrapper),cRegister);

RegisterProc(nil,MethodNames[442],mtProc,TypeInfo(_T5),[
TypeInfo(IDispatch),TypeInfo(Integer)],Addr(____PropertySheetA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[443],mtProc,TypeInfo(_T6),[
TypeInfo(IDispatch),TypeInfo(Integer)],Addr(____PropertySheetW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[444],mtProc,TypeInfo(_T7),NoParams,Addr(InitCommonControls),cStdCall);

RegisterProc(nil,MethodNames[445],mtProc,TypeInfo(_T8),[
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____InitCommonControlsEx__Wrapper),cRegister);

RegisterProc(nil,MethodNames[446],mtProc,TypeInfo(_T9),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(UINT),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(HIMAGELIST)],Addr(ImageList_Create),cStdCall);

RegisterProc(nil,MethodNames[447],mtProc,TypeInfo(_T10),[
TypeInfo(HIMAGELIST),TypeInfo(BOOL)],Addr(ImageList_Destroy),cStdCall);

RegisterProc(nil,MethodNames[448],mtProc,TypeInfo(_T11),[
TypeInfo(HIMAGELIST),TypeInfo(Integer)],Addr(ImageList_GetImageCount),cStdCall);

RegisterProc(nil,MethodNames[449],mtProc,TypeInfo(_T12),[
TypeInfo(HIMAGELIST),
TypeInfo(UINT),TypeInfo(Integer)],Addr(ImageList_SetImageCount),cStdCall);

RegisterProc(nil,MethodNames[450],mtProc,TypeInfo(_T13),[
TypeInfo(HIMAGELIST),
TypeInfo(HBITMAP),
TypeInfo(HBITMAP),TypeInfo(Integer)],Addr(ImageList_Add),cStdCall);

RegisterProc(nil,MethodNames[451],mtProc,TypeInfo(_T14),[
TypeInfo(HIMAGELIST),
TypeInfo(Integer),
TypeInfo(hIcon),TypeInfo(Integer)],Addr(ImageList_ReplaceIcon),cStdCall);

RegisterProc(nil,MethodNames[452],mtProc,TypeInfo(_T15),[
TypeInfo(HIMAGELIST),
TypeInfo(TColorRef),TypeInfo(TColorRef)],Addr(ImageList_SetBkColor),cStdCall);

RegisterProc(nil,MethodNames[453],mtProc,TypeInfo(_T16),[
TypeInfo(HIMAGELIST),TypeInfo(TColorRef)],Addr(ImageList_GetBkColor),cStdCall);

RegisterProc(nil,MethodNames[454],mtProc,TypeInfo(_T17),[
TypeInfo(HIMAGELIST),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(BOOL)],Addr(ImageList_SetOverlayImage),cStdCall);

RegisterProc(nil,MethodNames[455],mtProc,TypeInfo(_T18),[
TypeInfo(HIMAGELIST),
TypeInfo(hIcon),TypeInfo(Integer)],Addr(ImageList_AddIcon),cRegister);

RegisterProc(nil,MethodNames[456],mtProc,TypeInfo(_T19),[
TypeInfo(Integer),TypeInfo(Integer)],Addr(IndexToOverlayMask),cRegister);

RegisterProc(nil,MethodNames[457],mtProc,TypeInfo(_T20),[
TypeInfo(HIMAGELIST),
TypeInfo(Integer),
TypeInfo(hdc),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(UINT),TypeInfo(BOOL)],Addr(ImageList_Draw),cStdCall);

RegisterProc(nil,MethodNames[458],mtProc,TypeInfo(_T21),[
TypeInfo(HIMAGELIST),
TypeInfo(Integer),
TypeInfo(HBITMAP),
TypeInfo(HBITMAP),TypeInfo(BOOL)],Addr(ImageList_Replace),cStdCall);

RegisterProc(nil,MethodNames[459],mtProc,TypeInfo(_T22),[
TypeInfo(HIMAGELIST),
TypeInfo(HBITMAP),
TypeInfo(TColorRef),TypeInfo(Integer)],Addr(ImageList_AddMasked),cStdCall);

RegisterProc(nil,MethodNames[460],mtProc,TypeInfo(_T23),[
TypeInfo(HIMAGELIST),
TypeInfo(Integer),
TypeInfo(hdc),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(TColorRef),
TypeInfo(TColorRef),
TypeInfo(Cardinal),TypeInfo(BOOL)],Addr(ImageList_DrawEx),cStdCall);

RegisterProc(nil,MethodNames[461],mtProc,TypeInfo(_T25),[
TypeInfo(HIMAGELIST),
TypeInfo(Integer),TypeInfo(BOOL)],Addr(ImageList_Remove),cStdCall);

RegisterProc(nil,MethodNames[462],mtProc,TypeInfo(_T26),[
TypeInfo(HIMAGELIST),
TypeInfo(Integer),
TypeInfo(Cardinal),TypeInfo(hIcon)],Addr(ImageList_GetIcon),cStdCall);

RegisterProc(nil,MethodNames[463],mtProc,TypeInfo(_T30),[
TypeInfo(HIMAGELIST),
TypeInfo(Integer),
TypeInfo(HIMAGELIST),
TypeInfo(Integer),
TypeInfo(UINT),TypeInfo(Integer)],Addr(ImageList_Copy),cStdCall);

RegisterProc(nil,MethodNames[464],mtProc,TypeInfo(_T31),[
TypeInfo(HIMAGELIST),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(BOOL)],Addr(ImageList_BeginDrag),cStdCall);

RegisterProc(nil,MethodNames[465],mtProc,TypeInfo(_T32),[TypeInfo(BOOL)],Addr(ImageList_EndDrag),cStdCall);

RegisterProc(nil,MethodNames[466],mtProc,TypeInfo(_T33),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(BOOL)],Addr(ImageList_DragEnter),cStdCall);

RegisterProc(nil,MethodNames[467],mtProc,TypeInfo(_T34),[
TypeInfo(HWnd),TypeInfo(BOOL)],Addr(ImageList_DragLeave),cStdCall);

RegisterProc(nil,MethodNames[468],mtProc,TypeInfo(_T35),[
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(BOOL)],Addr(ImageList_DragMove),cStdCall);

RegisterProc(nil,MethodNames[469],mtProc,TypeInfo(_T36),[
TypeInfo(HIMAGELIST),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(BOOL)],Addr(ImageList_SetDragCursorImage),cStdCall);

RegisterProc(nil,MethodNames[470],mtProc,TypeInfo(_T37),[
TypeInfo(BOOL),TypeInfo(BOOL)],Addr(ImageList_DragShowNolock),cStdCall);

RegisterProc(nil,MethodNames[471],mtProc,TypeInfo(_T39),[
TypeInfo(HIMAGELIST)],Addr(ImageList_RemoveAll),cRegister);

RegisterProc(nil,MethodNames[472],mtProc,TypeInfo(_T40),[
TypeInfo(THandle),
TypeInfo(HIMAGELIST),
TypeInfo(Integer),TypeInfo(hIcon)],Addr(ImageList_ExtractIcon),cRegister);

RegisterProc(nil,MethodNames[473],mtProc,TypeInfo(_T46),[
TypeInfo(HIMAGELIST),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(BOOL)],Addr(ImageList_GetIconSize),cStdCall);

RegisterProc(nil,MethodNames[474],mtProc,TypeInfo(_T47),[
TypeInfo(HIMAGELIST),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(BOOL)],Addr(ImageList_SetIconSize),cStdCall);

RegisterProc(nil,MethodNames[475],mtProc,TypeInfo(_T48),[
TypeInfo(HIMAGELIST),
TypeInfo(Integer),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____ImageList_GetImageInfo__Wrapper),cRegister);

RegisterProc(nil,MethodNames[476],mtProc,TypeInfo(_T49),[
TypeInfo(HIMAGELIST),
TypeInfo(Integer),
TypeInfo(HIMAGELIST),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(HIMAGELIST)],Addr(ImageList_Merge),cStdCall);

RegisterProc(nil,MethodNames[477],mtProc,TypeInfo(_T50),[
TypeInfo(HIMAGELIST),TypeInfo(HIMAGELIST)],Addr(ImageList_Duplicate),cStdCall);

RegisterProc(nil,MethodNames[478],mtProc,TypeInfo(_T51),[
TypeInfo(HWnd),TypeInfo(Integer)],Addr(Header_GetItemCount),cRegister);

RegisterProc(nil,MethodNames[479],mtProc,TypeInfo(_T52),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(IDispatch),TypeInfo(Integer)],Addr(____Header_InsertItem__Wrapper),cRegister);

RegisterProc(nil,MethodNames[480],mtProc,TypeInfo(_T53),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(IDispatch),TypeInfo(Integer)],Addr(____Header_InsertItemA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[481],mtProc,TypeInfo(_T54),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(IDispatch),TypeInfo(Integer)],Addr(____Header_InsertItemW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[482],mtProc,TypeInfo(_T55),[
TypeInfo(HWnd),
TypeInfo(Integer),TypeInfo(BOOL)],Addr(Header_DeleteItem),cRegister);

RegisterProc(nil,MethodNames[483],mtProc,TypeInfo(_T56),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____Header_GetItem__Wrapper),cRegister);

RegisterProc(nil,MethodNames[484],mtProc,TypeInfo(_T57),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____Header_GetItemA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[485],mtProc,TypeInfo(_T58),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____Header_GetItemW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[486],mtProc,TypeInfo(_T59),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____Header_SetItem__Wrapper),cRegister);

RegisterProc(nil,MethodNames[487],mtProc,TypeInfo(_T60),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____Header_SetItemA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[488],mtProc,TypeInfo(_T61),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____Header_SetItemW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[489],mtProc,TypeInfo(_T64),[
TypeInfo(HWnd),
TypeInfo(HIMAGELIST),TypeInfo(HIMAGELIST)],Addr(Header_SetImageList),cRegister);

RegisterProc(nil,MethodNames[490],mtProc,TypeInfo(_T65),[
TypeInfo(HWnd),TypeInfo(HIMAGELIST)],Addr(Header_GetImageList),cRegister);

RegisterProc(nil,MethodNames[491],mtProc,TypeInfo(_T66),[
TypeInfo(HWnd),
TypeInfo(Integer),TypeInfo(Integer)],Addr(Header_OrderToIndex),cRegister);

RegisterProc(nil,MethodNames[492],mtProc,TypeInfo(_T67),[
TypeInfo(HWnd),
TypeInfo(Integer),TypeInfo(HIMAGELIST)],Addr(Header_CreateDragImage),cRegister);

RegisterProc(nil,MethodNames[493],mtProc,TypeInfo(_T68),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfoPointer,TypeInfo(Integer)],Addr(Header_GetOrderArray),cRegister);

RegisterProc(nil,MethodNames[494],mtProc,TypeInfo(_T69),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfoPointer,TypeInfo(Integer)],Addr(Header_SetOrderArray),cRegister);

RegisterProc(nil,MethodNames[495],mtProc,TypeInfo(_T70),[
TypeInfo(HWnd),
TypeInfo(BOOL),
TypeInfo(DWORD),TypeInfo(Integer)],Addr(Header_SetHotDivider),cRegister);

RegisterProc(nil,MethodNames[496],mtProc,TypeInfo(_T71),[
TypeInfo(HWnd),
TypeInfo(BOOL),TypeInfo(Integer)],Addr(Header_SetUnicodeFormat),cRegister);

RegisterProc(nil,MethodNames[497],mtProc,TypeInfo(_T72),[
TypeInfo(HWnd),TypeInfo(Integer)],Addr(Header_GetUnicodeFormat),cRegister);

RegisterProc(nil,MethodNames[498],mtProc,TypeInfo(_T81),[
TypeInfo(UINT),
TypeInfo(wParam),
TypeInfo(lParam),
TypeInfo(HMENU),
TypeInfo(THandle),
TypeInfo(HWnd),
TypeInfoPointer],Addr(MenuHelp),cStdCall);

RegisterProc(nil,MethodNames[499],mtProc,TypeInfo(_T82),[
TypeInfo(HWnd),
TypeInfo(UINT),
TypeInfoPointer,TypeInfo(BOOL)],Addr(ShowHideMenuCtl),cStdCall);

RegisterProc(nil,MethodNames[500],mtProc,TypeInfo(_T84),[
TypeInfo(HWnd)],Addr(MakeDragList),cStdCall);

RegisterProc(nil,MethodNames[501],mtProc,TypeInfo(_T85),[
TypeInfo(HWnd),
TypeInfo(HWnd),
TypeInfo(Integer)],Addr(DrawInsert),cStdCall);

RegisterProc(nil,MethodNames[502],mtProc,TypeInfo(_T86),[
TypeInfo(HWnd),
TypeInfo(IDispatch),
TypeInfo(BOOL),TypeInfo(Integer)],Addr(____LBItemFromPt__Wrapper),cRegister);

RegisterProc(nil,MethodNames[503],mtProc,TypeInfo(_T87),[
TypeInfo(Longint),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(THandle),
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(HWnd)],Addr(CreateUpDownControl),cStdCall);

RegisterProc(nil,MethodNames[504],mtProc,TypeInfo(_T88),[
TypeInfo(HWnd),
TypeInfo(BOOL),TypeInfo(Integer)],Addr(ListView_SetUnicodeFormat),cRegister);

RegisterProc(nil,MethodNames[505],mtProc,TypeInfo(_T89),[
TypeInfo(HWnd),TypeInfo(BOOL)],Addr(ListView_GetUnicodeFormat),cRegister);

RegisterProc(nil,MethodNames[506],mtProc,TypeInfo(_T90),[
TypeInfo(HWnd),TypeInfo(TColorRef)],Addr(ListView_GetBkColor),cRegister);

RegisterProc(nil,MethodNames[507],mtProc,TypeInfo(_T91),[
TypeInfo(HWnd),
TypeInfo(TColorRef),TypeInfo(BOOL)],Addr(ListView_SetBkColor),cRegister);

RegisterProc(nil,MethodNames[508],mtProc,TypeInfo(_T92),[
TypeInfo(HWnd),
TypeInfo(Integer),TypeInfo(HIMAGELIST)],Addr(ListView_GetImageList),cRegister);

RegisterProc(nil,MethodNames[509],mtProc,TypeInfo(_T93),[
TypeInfo(HWnd),
TypeInfo(HIMAGELIST),
TypeInfo(Integer),TypeInfo(HIMAGELIST)],Addr(ListView_SetImageList),cRegister);

RegisterProc(nil,MethodNames[510],mtProc,TypeInfo(_T94),[
TypeInfo(HWnd),TypeInfo(Integer)],Addr(ListView_GetItemCount),cRegister);

RegisterProc(nil,MethodNames[511],mtProc,TypeInfo(_T95),[
TypeInfo(Longint),TypeInfo(Longint)],Addr(IndexToStateImageMask),cRegister);

RegisterProc(nil,MethodNames[512],mtProc,TypeInfo(_T96),[
TypeInfo(HWnd),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____ListView_GetItem__Wrapper),cRegister);

RegisterProc(nil,MethodNames[513],mtProc,TypeInfo(_T97),[
TypeInfo(HWnd),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____ListView_GetItemA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[514],mtProc,TypeInfo(_T98),[
TypeInfo(HWnd),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____ListView_GetItemW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[515],mtProc,TypeInfo(_T99),[
TypeInfo(HWnd),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____ListView_SetItem__Wrapper),cRegister);

RegisterProc(nil,MethodNames[516],mtProc,TypeInfo(_T100),[
TypeInfo(HWnd),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____ListView_SetItemA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[517],mtProc,TypeInfo(_T101),[
TypeInfo(HWnd),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____ListView_SetItemW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[518],mtProc,TypeInfo(_T102),[
TypeInfo(HWnd),
TypeInfo(IDispatch),TypeInfo(Integer)],Addr(____ListView_InsertItem__Wrapper),cRegister);

RegisterProc(nil,MethodNames[519],mtProc,TypeInfo(_T103),[
TypeInfo(HWnd),
TypeInfo(IDispatch),TypeInfo(Integer)],Addr(____ListView_InsertItemA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[520],mtProc,TypeInfo(_T104),[
TypeInfo(HWnd),
TypeInfo(IDispatch),TypeInfo(Integer)],Addr(____ListView_InsertItemW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[521],mtProc,TypeInfo(_T105),[
TypeInfo(HWnd),
TypeInfo(Integer),TypeInfo(BOOL)],Addr(ListView_DeleteItem),cRegister);

RegisterProc(nil,MethodNames[522],mtProc,TypeInfo(_T106),[
TypeInfo(HWnd),TypeInfo(BOOL)],Addr(ListView_DeleteAllItems),cRegister);

RegisterProc(nil,MethodNames[523],mtProc,TypeInfo(_T107),[
TypeInfo(HWnd),TypeInfo(UINT)],Addr(ListView_GetCallbackMask),cRegister);

RegisterProc(nil,MethodNames[524],mtProc,TypeInfo(_T108),[
TypeInfo(HWnd),
TypeInfo(UINT),TypeInfo(BOOL)],Addr(ListView_SetCallbackMask),cRegister);

RegisterProc(nil,MethodNames[525],mtProc,TypeInfo(_T109),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(UINT),TypeInfo(Integer)],Addr(ListView_GetNextItem),cRegister);

RegisterProc(nil,MethodNames[526],mtProc,TypeInfo(_T110),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(IDispatch),TypeInfo(Integer)],Addr(____ListView_FindItem__Wrapper),cRegister);

RegisterProc(nil,MethodNames[527],mtProc,TypeInfo(_T111),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(IDispatch),TypeInfo(Integer)],Addr(____ListView_FindItemA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[528],mtProc,TypeInfo(_T112),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(IDispatch),TypeInfo(Integer)],Addr(____ListView_FindItemW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[529],mtProc,TypeInfo(_T113),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(IDispatch),
TypeInfo(Integer),TypeInfo(BOOL)],Addr(____ListView_GetItemRect__Wrapper),cRegister);

RegisterProc(nil,MethodNames[530],mtProc,TypeInfo(_T114),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(BOOL)],Addr(ListView_SetItemPosition),cRegister);

RegisterProc(nil,MethodNames[531],mtProc,TypeInfo(_T115),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____ListView_GetItemPosition__Wrapper),cRegister);

RegisterProc(nil,MethodNames[532],mtProc,TypeInfo(_T119),[
TypeInfo(HWnd),
TypeInfo(IDispatch),TypeInfo(Integer)],Addr(____ListView_HitTest__Wrapper),cRegister);

RegisterProc(nil,MethodNames[533],mtProc,TypeInfo(_T120),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(BOOL),TypeInfo(BOOL)],Addr(ListView_EnsureVisible),cRegister);

RegisterProc(nil,MethodNames[534],mtProc,TypeInfo(_T121),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(BOOL)],Addr(ListView_Scroll),cRegister);

RegisterProc(nil,MethodNames[535],mtProc,TypeInfo(_T122),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(BOOL)],Addr(ListView_RedrawItems),cRegister);

RegisterProc(nil,MethodNames[536],mtProc,TypeInfo(_T123),[
TypeInfo(HWnd),
TypeInfo(UINT),TypeInfo(BOOL)],Addr(ListView_Arrange),cRegister);

RegisterProc(nil,MethodNames[537],mtProc,TypeInfo(_T124),[
TypeInfo(HWnd),
TypeInfo(Integer),TypeInfo(HWnd)],Addr(ListView_EditLabel),cRegister);

RegisterProc(nil,MethodNames[538],mtProc,TypeInfo(_T125),[
TypeInfo(HWnd),
TypeInfo(Integer),TypeInfo(HWnd)],Addr(ListView_EditLabelA),cRegister);

RegisterProc(nil,MethodNames[539],mtProc,TypeInfo(_T126),[
TypeInfo(HWnd),
TypeInfo(Integer),TypeInfo(HWnd)],Addr(ListView_EditLabelW),cRegister);

RegisterProc(nil,MethodNames[540],mtProc,TypeInfo(_T127),[
TypeInfo(HWnd),TypeInfo(HWnd)],Addr(ListView_GetEditControl),cRegister);

RegisterProc(nil,MethodNames[541],mtProc,TypeInfo(_T128),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____ListView_GetColumn__Wrapper),cRegister);

RegisterProc(nil,MethodNames[542],mtProc,TypeInfo(_T129),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____ListView_GetColumnA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[543],mtProc,TypeInfo(_T130),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____ListView_GetColumnW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[544],mtProc,TypeInfo(_T131),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____ListView_SetColumn__Wrapper),cRegister);

RegisterProc(nil,MethodNames[545],mtProc,TypeInfo(_T132),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____ListView_SetColumnA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[546],mtProc,TypeInfo(_T133),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____ListView_SetColumnW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[547],mtProc,TypeInfo(_T134),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(IDispatch),TypeInfo(Integer)],Addr(____ListView_InsertColumn__Wrapper),cRegister);

RegisterProc(nil,MethodNames[548],mtProc,TypeInfo(_T135),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(IDispatch),TypeInfo(Integer)],Addr(____ListView_InsertColumnA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[549],mtProc,TypeInfo(_T136),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(IDispatch),TypeInfo(Integer)],Addr(____ListView_InsertColumnW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[550],mtProc,TypeInfo(_T137),[
TypeInfo(HWnd),
TypeInfo(Integer),TypeInfo(BOOL)],Addr(ListView_DeleteColumn),cRegister);

RegisterProc(nil,MethodNames[551],mtProc,TypeInfo(_T138),[
TypeInfo(HWnd),
TypeInfo(Integer),TypeInfo(Integer)],Addr(ListView_GetColumnWidth),cRegister);

RegisterProc(nil,MethodNames[552],mtProc,TypeInfo(_T139),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(BOOL)],Addr(ListView_SetColumnWidth),cRegister);

RegisterProc(nil,MethodNames[553],mtProc,TypeInfo(_T140),[
TypeInfo(HWnd),TypeInfo(HWnd)],Addr(ListView_GetHeader),cRegister);

RegisterProc(nil,MethodNames[554],mtProc,TypeInfo(_T141),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(IDispatch),TypeInfo(HIMAGELIST)],Addr(____ListView_CreateDragImage__Wrapper),cRegister);

RegisterProc(nil,MethodNames[555],mtProc,TypeInfo(_T142),[
TypeInfo(HWnd),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____ListView_GetViewRect__Wrapper),cRegister);

RegisterProc(nil,MethodNames[556],mtProc,TypeInfo(_T143),[
TypeInfo(HWnd),TypeInfo(TColorRef)],Addr(ListView_GetTextColor),cRegister);

RegisterProc(nil,MethodNames[557],mtProc,TypeInfo(_T144),[
TypeInfo(HWnd),
TypeInfo(TColorRef),TypeInfo(BOOL)],Addr(ListView_SetTextColor),cRegister);

RegisterProc(nil,MethodNames[558],mtProc,TypeInfo(_T145),[
TypeInfo(HWnd),TypeInfo(TColorRef)],Addr(ListView_GetTextBkColor),cRegister);

RegisterProc(nil,MethodNames[559],mtProc,TypeInfo(_T146),[
TypeInfo(HWnd),
TypeInfo(TColorRef),TypeInfo(BOOL)],Addr(ListView_SetTextBkColor),cRegister);

RegisterProc(nil,MethodNames[560],mtProc,TypeInfo(_T147),[
TypeInfo(HWnd),TypeInfo(Integer)],Addr(ListView_GetTopIndex),cRegister);

RegisterProc(nil,MethodNames[561],mtProc,TypeInfo(_T148),[
TypeInfo(HWnd),TypeInfo(Integer)],Addr(ListView_GetCountPerPage),cRegister);

RegisterProc(nil,MethodNames[562],mtProc,TypeInfo(_T149),[
TypeInfo(HWnd),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____ListView_GetOrigin__Wrapper),cRegister);

RegisterProc(nil,MethodNames[563],mtProc,TypeInfo(_T150),[
TypeInfo(HWnd),
TypeInfo(Integer),TypeInfo(BOOL)],Addr(ListView_Update),cRegister);

RegisterProc(nil,MethodNames[564],mtProc,TypeInfo(_T151),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(UINT),
TypeInfo(UINT),TypeInfo(BOOL)],Addr(ListView_SetItemState),cRegister);

RegisterProc(nil,MethodNames[565],mtProc,TypeInfo(_T152),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Integer)],Addr(ListView_GetItemState),cRegister);

RegisterProc(nil,MethodNames[566],mtProc,TypeInfo(_T153),[
TypeInfo(HWnd),
TypeInfo(Integer),TypeInfo(UINT)],Addr(ListView_GetCheckState),cRegister);

RegisterProc(nil,MethodNames[567],mtProc,TypeInfo(_T154),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(Boolean)],Addr(ListView_SetCheckState),cRegister);

RegisterProc(nil,MethodNames[568],mtProc,TypeInfo(_T161),[
TypeInfo(HWnd),
TypeInfo(Integer)],Addr(ListView_SetItemCount),cRegister);

RegisterProc(nil,MethodNames[569],mtProc,TypeInfo(_T162),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(DWORD)],Addr(ListView_SetItemCountEx),cRegister);

RegisterProc(nil,MethodNames[570],mtProc,TypeInfo(_T164),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer)],Addr(ListView_SetItemPosition32),cRegister);

RegisterProc(nil,MethodNames[571],mtProc,TypeInfo(_T165),[
TypeInfo(HWnd),TypeInfo(UINT)],Addr(ListView_GetSelectedCount),cRegister);

RegisterProc(nil,MethodNames[572],mtProc,TypeInfo(_T166),[
TypeInfo(HWnd),
TypeInfo(Integer),TypeInfo(Longint)],Addr(ListView_GetItemSpacing),cRegister);

RegisterProc(nil,MethodNames[573],mtProc,TypeInfo(_T170),[
TypeInfo(HWnd),
TypeInfo(Word),
TypeInfo(Word),TypeInfo(DWORD)],Addr(ListView_SetIconSpacing),cRegister);

RegisterProc(nil,MethodNames[574],mtProc,TypeInfo(_T171),[
TypeInfo(HWnd),
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(ListView_SetExtendedListViewStyle),cRegister);

RegisterProc(nil,MethodNames[575],mtProc,TypeInfo(_T172),[
TypeInfo(HWnd),TypeInfo(DWORD)],Addr(ListView_GetExtendedListViewStyle),cRegister);

RegisterProc(nil,MethodNames[576],mtProc,TypeInfo(_T175),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfoPointer,TypeInfo(BOOL)],Addr(ListView_SetColumnOrderArray),cRegister);

RegisterProc(nil,MethodNames[577],mtProc,TypeInfo(_T176),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfoPointer,TypeInfo(BOOL)],Addr(ListView_GetColumnOrderArray),cRegister);

RegisterProc(nil,MethodNames[578],mtProc,TypeInfo(_T177),[
TypeInfo(HWnd),
TypeInfo(Integer),TypeInfo(Integer)],Addr(ListView_SetHotItem),cRegister);

RegisterProc(nil,MethodNames[579],mtProc,TypeInfo(_T178),[
TypeInfo(HWnd),TypeInfo(Integer)],Addr(ListView_GetHotItem),cRegister);

RegisterProc(nil,MethodNames[580],mtProc,TypeInfo(_T179),[
TypeInfo(HWnd),
TypeInfo(HCURSOR),TypeInfo(HCURSOR)],Addr(ListView_SetHotCursor),cRegister);

RegisterProc(nil,MethodNames[581],mtProc,TypeInfo(_T180),[
TypeInfo(HWnd),TypeInfo(HCURSOR)],Addr(ListView_GetHotCursor),cRegister);

RegisterProc(nil,MethodNames[582],mtProc,TypeInfo(_T181),[
TypeInfo(HWnd),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Integer),TypeInfo(DWORD)],Addr(ListView_ApproximateViewRect),cRegister);

RegisterProc(nil,MethodNames[583],mtProc,TypeInfo(_T183),[
TypeInfo(HWnd),TypeInfo(Integer)],Addr(ListView_GetSelectionMark),cRegister);

RegisterProc(nil,MethodNames[584],mtProc,TypeInfo(_T184),[
TypeInfo(HWnd),
TypeInfo(Integer),TypeInfo(Integer)],Addr(ListView_SetSelectionMark),cRegister);

RegisterProc(nil,MethodNames[585],mtProc,TypeInfo(_T186),[
TypeInfo(HWnd),
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(ListView_SetHoverTime),cRegister);

RegisterProc(nil,MethodNames[586],mtProc,TypeInfo(_T187),[
TypeInfo(HWnd),TypeInfo(Integer)],Addr(ListView_GetHoverTime),cRegister);

RegisterProc(nil,MethodNames[587],mtProc,TypeInfo(_T188),[
TypeInfo(HWnd),
TypeInfoPointer,TypeInfo(Integer)],Addr(ListView_GetNumberOfWorkAreas),cRegister);

RegisterProc(nil,MethodNames[588],mtProc,TypeInfo(_T189),[
TypeInfo(HWnd),
TypeInfo(HWnd),TypeInfo(HWnd)],Addr(ListView_SetToolTips),cRegister);

RegisterProc(nil,MethodNames[589],mtProc,TypeInfo(_T190),[
TypeInfo(HWnd),TypeInfo(HWnd)],Addr(ListView_GetToolTips),cRegister);

RegisterProc(nil,MethodNames[590],mtProc,TypeInfo(_T201),[
TypeInfo(HWnd),TypeInfo(BOOL)],Addr(TreeView_DeleteAllItems),cRegister);

RegisterProc(nil,MethodNames[591],mtProc,TypeInfo(_T204),[
TypeInfo(HWnd),TypeInfo(UINT)],Addr(TreeView_GetCount),cRegister);

RegisterProc(nil,MethodNames[592],mtProc,TypeInfo(_T205),[
TypeInfo(HWnd),TypeInfo(UINT)],Addr(TreeView_GetIndent),cRegister);

RegisterProc(nil,MethodNames[593],mtProc,TypeInfo(_T206),[
TypeInfo(HWnd),
TypeInfo(Integer),TypeInfo(BOOL)],Addr(TreeView_SetIndent),cRegister);

RegisterProc(nil,MethodNames[594],mtProc,TypeInfo(_T207),[
TypeInfo(HWnd),
TypeInfo(Integer),TypeInfo(HIMAGELIST)],Addr(TreeView_GetImageList),cRegister);

RegisterProc(nil,MethodNames[595],mtProc,TypeInfo(_T208),[
TypeInfo(HWnd),
TypeInfo(HIMAGELIST),
TypeInfo(Integer),TypeInfo(HIMAGELIST)],Addr(TreeView_SetImageList),cRegister);

RegisterProc(nil,MethodNames[596],mtProc,TypeInfo(_T225),[
TypeInfo(HWnd),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____TreeView_GetItem__Wrapper),cRegister);

RegisterProc(nil,MethodNames[597],mtProc,TypeInfo(_T226),[
TypeInfo(HWnd),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____TreeView_GetItemA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[598],mtProc,TypeInfo(_T227),[
TypeInfo(HWnd),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____TreeView_GetItemW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[599],mtProc,TypeInfo(_T228),[
TypeInfo(HWnd),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____TreeView_SetItem__Wrapper),cRegister);

RegisterProc(nil,MethodNames[600],mtProc,TypeInfo(_T229),[
TypeInfo(HWnd),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____TreeView_SetItemA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[601],mtProc,TypeInfo(_T230),[
TypeInfo(HWnd),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____TreeView_SetItemW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[602],mtProc,TypeInfo(_T234),[
TypeInfo(HWnd),TypeInfo(HWnd)],Addr(TreeView_GetEditControl),cRegister);

RegisterProc(nil,MethodNames[603],mtProc,TypeInfo(_T235),[
TypeInfo(HWnd),TypeInfo(UINT)],Addr(TreeView_GetVisibleCount),cRegister);

RegisterProc(nil,MethodNames[604],mtProc,TypeInfo(_T240),[
TypeInfo(HWnd),
TypeInfo(IDispatch),
TypeInfo(Integer),TypeInfo(BOOL)],Addr(____TreeView_SortChildrenCB__Wrapper),cRegister);

RegisterProc(nil,MethodNames[605],mtProc,TypeInfo(_T241),[
TypeInfo(HWnd),
TypeInfo(BOOL),TypeInfo(BOOL)],Addr(TreeView_EndEditLabelNow),cRegister);

RegisterProc(nil,MethodNames[606],mtProc,TypeInfo(_T245),[
TypeInfo(HWnd),
TypeInfo(HWnd),TypeInfo(HWnd)],Addr(TreeView_SetToolTips),cRegister);

RegisterProc(nil,MethodNames[607],mtProc,TypeInfo(_T246),[
TypeInfo(HWnd),TypeInfo(HWnd)],Addr(TreeView_GetToolTips),cRegister);

RegisterProc(nil,MethodNames[608],mtProc,TypeInfo(_T247),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(BOOL),TypeInfo(BOOL)],Addr(TreeView_SetInsertMark),cRegister);

RegisterProc(nil,MethodNames[609],mtProc,TypeInfo(_T248),[
TypeInfo(HWnd),
TypeInfo(BOOL),TypeInfo(BOOL)],Addr(TreeView_SetUnicodeFormat),cRegister);

RegisterProc(nil,MethodNames[610],mtProc,TypeInfo(_T249),[
TypeInfo(HWnd),TypeInfo(BOOL)],Addr(TreeView_GetUnicodeFormat),cRegister);

RegisterProc(nil,MethodNames[611],mtProc,TypeInfo(_T250),[
TypeInfo(HWnd),
TypeInfo(Integer),TypeInfo(Integer)],Addr(TreeView_SetItemHeight),cRegister);

RegisterProc(nil,MethodNames[612],mtProc,TypeInfo(_T251),[
TypeInfo(HWnd),TypeInfo(Integer)],Addr(TreeView_GetItemHeight),cRegister);

RegisterProc(nil,MethodNames[613],mtProc,TypeInfo(_T252),[
TypeInfo(HWnd),
TypeInfo(COLORREF),TypeInfo(COLORREF)],Addr(TreeView_SetBkColor),cRegister);

RegisterProc(nil,MethodNames[614],mtProc,TypeInfo(_T253),[
TypeInfo(HWnd),
TypeInfo(COLORREF),TypeInfo(COLORREF)],Addr(TreeView_SetTextColor),cRegister);

RegisterProc(nil,MethodNames[615],mtProc,TypeInfo(_T254),[
TypeInfo(HWnd),TypeInfo(COLORREF)],Addr(TreeView_GetBkColor),cRegister);

RegisterProc(nil,MethodNames[616],mtProc,TypeInfo(_T255),[
TypeInfo(HWnd),TypeInfo(COLORREF)],Addr(TreeView_GetTextColor),cRegister);

RegisterProc(nil,MethodNames[617],mtProc,TypeInfo(_T256),[
TypeInfo(HWnd),
TypeInfo(UINT),TypeInfo(UINT)],Addr(TreeView_SetScrollTime),cRegister);

RegisterProc(nil,MethodNames[618],mtProc,TypeInfo(_T257),[
TypeInfo(HWnd),TypeInfo(UINT)],Addr(TreeView_GetScrollTime),cRegister);

RegisterProc(nil,MethodNames[619],mtProc,TypeInfo(_T258),[
TypeInfo(HWnd),
TypeInfo(COLORREF),TypeInfo(COLORREF)],Addr(TreeView_SetInsertMarkColor),cRegister);

RegisterProc(nil,MethodNames[620],mtProc,TypeInfo(_T259),[
TypeInfo(HWnd),TypeInfo(COLORREF)],Addr(TreeView_GetInsertMarkColor),cRegister);

RegisterProc(nil,MethodNames[621],mtProc,TypeInfo(_T261),[
TypeInfo(HWnd),
TypeInfo(Integer),TypeInfo(BOOL)],Addr(TabCtrl_SetItemExtra),cRegister);

RegisterProc(nil,MethodNames[622],mtProc,TypeInfo(_T263),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(DWORD)],Addr(TabCtrl_SetItemSize),cRegister);

RegisterProc(nil,MethodNames[623],mtProc,TypeInfo(_T264),[
TypeInfo(HWnd),
TypeInfo(Integer)],Addr(TabCtrl_RemoveImage),cRegister);

RegisterProc(nil,MethodNames[624],mtProc,TypeInfo(_T265),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TabCtrl_SetPadding),cRegister);

RegisterProc(nil,MethodNames[625],mtProc,TypeInfo(_T266),[
TypeInfo(HWnd),TypeInfo(Integer)],Addr(TabCtrl_GetRowCount),cRegister);

RegisterProc(nil,MethodNames[626],mtProc,TypeInfo(_T267),[
TypeInfo(HWnd),TypeInfo(HWnd)],Addr(TabCtrl_GetToolTips),cRegister);

RegisterProc(nil,MethodNames[627],mtProc,TypeInfo(_T268),[
TypeInfo(HWnd),
TypeInfo(HWnd)],Addr(TabCtrl_SetToolTips),cRegister);

RegisterProc(nil,MethodNames[628],mtProc,TypeInfo(_T269),[
TypeInfo(HWnd),TypeInfo(Integer)],Addr(TabCtrl_GetCurFocus),cRegister);

RegisterProc(nil,MethodNames[629],mtProc,TypeInfo(_T270),[
TypeInfo(HWnd),
TypeInfo(Integer)],Addr(TabCtrl_SetCurFocus),cRegister);

RegisterProc(nil,MethodNames[630],mtProc,TypeInfo(_T271),[
TypeInfo(HWnd),
TypeInfo(Integer),TypeInfo(Integer)],Addr(TabCtrl_SetMinTabWidth),cRegister);

RegisterProc(nil,MethodNames[631],mtProc,TypeInfo(_T272),[
TypeInfo(HWnd),
TypeInfo(BOOL)],Addr(TabCtrl_DeselectAll),cRegister);

RegisterProc(nil,MethodNames[632],mtProc,TypeInfo(_T273),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(WordBool),TypeInfo(BOOL)],Addr(TabCtrl_HighlightItem),cRegister);

RegisterProc(nil,MethodNames[633],mtProc,TypeInfo(_T274),[
TypeInfo(HWnd),
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(TabCtrl_SetExtendedStyle),cRegister);

RegisterProc(nil,MethodNames[634],mtProc,TypeInfo(_T275),[
TypeInfo(HWnd),TypeInfo(DWORD)],Addr(TabCtrl_GetExtendedStyle),cRegister);

RegisterProc(nil,MethodNames[635],mtProc,TypeInfo(_T276),[
TypeInfo(HWnd),
TypeInfo(BOOL),TypeInfo(BOOL)],Addr(TabCtrl_SetUnicodeFormat),cRegister);

RegisterProc(nil,MethodNames[636],mtProc,TypeInfo(_T277),[
TypeInfo(HWnd),TypeInfo(BOOL)],Addr(TabCtrl_GetUnicodeFormat),cRegister);

RegisterProc(nil,MethodNames[637],mtProc,TypeInfo(_T278),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____TabCtrl_GetItemRect__Wrapper),cRegister);

RegisterProc(nil,MethodNames[638],mtProc,TypeInfo(_T279),[
TypeInfo(HWnd),
TypeInfo(HMENU),
TypeInfo(DWORD),
TypeInfo(hInst),TypeInfo(HWnd)],Addr(Animate_Create),cRegister);

RegisterProc(nil,MethodNames[639],mtProc,TypeInfo(_T282),[
TypeInfo(HWnd),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(UINT),TypeInfo(BOOL)],Addr(Animate_Play),cRegister);

RegisterProc(nil,MethodNames[640],mtProc,TypeInfo(_T283),[
TypeInfo(HWnd),TypeInfo(BOOL)],Addr(Animate_Stop),cRegister);

RegisterProc(nil,MethodNames[641],mtProc,TypeInfo(_T284),[
TypeInfo(HWnd),TypeInfo(BOOL)],Addr(Animate_Close),cRegister);

RegisterProc(nil,MethodNames[642],mtProc,TypeInfo(_T285),[
TypeInfo(HWnd),
TypeInfo(Word),TypeInfo(BOOL)],Addr(Animate_Seek),cRegister);

RegisterProc(nil,MethodNames[643],mtProc,TypeInfo(_T286),[
TypeInfo(HWnd),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____MonthCal_GetCurSel__Wrapper),cRegister);

RegisterProc(nil,MethodNames[644],mtProc,TypeInfo(_T287),[
TypeInfo(HWnd),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____MonthCal_SetCurSel__Wrapper),cRegister);

RegisterProc(nil,MethodNames[645],mtProc,TypeInfo(_T288),[
TypeInfo(HWnd),TypeInfo(DWORD)],Addr(MonthCal_GetMaxSelCount),cRegister);

RegisterProc(nil,MethodNames[646],mtProc,TypeInfo(_T289),[
TypeInfo(HWnd),
TypeInfo(UINT),TypeInfo(BOOL)],Addr(MonthCal_SetMaxSelCount),cRegister);

RegisterProc(nil,MethodNames[647],mtProc,TypeInfo(_T293),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____MonthCal_SetDayState__Wrapper),cRegister);

RegisterProc(nil,MethodNames[648],mtProc,TypeInfo(_T294),[
TypeInfo(HWnd),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____MonthCal_GetMinReqRect__Wrapper),cRegister);

RegisterProc(nil,MethodNames[649],mtProc,TypeInfo(_T295),[
TypeInfo(HWnd),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____MonthCal_SetToday__Wrapper),cRegister);

RegisterProc(nil,MethodNames[650],mtProc,TypeInfo(_T296),[
TypeInfo(HWnd),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____MonthCal_GetToday__Wrapper),cRegister);

RegisterProc(nil,MethodNames[651],mtProc,TypeInfo(_T297),[
TypeInfo(HWnd),
TypeInfo(IDispatch),TypeInfo(DWORD)],Addr(____MonthCal_HitTest__Wrapper),cRegister);

RegisterProc(nil,MethodNames[652],mtProc,TypeInfo(_T298),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(TColorRef),TypeInfo(TColorRef)],Addr(MonthCal_SetColor),cRegister);

RegisterProc(nil,MethodNames[653],mtProc,TypeInfo(_T299),[
TypeInfo(HWnd),
TypeInfo(Integer),TypeInfo(TColorRef)],Addr(MonthCal_GetColor),cRegister);

RegisterProc(nil,MethodNames[654],mtProc,TypeInfo(_T300),[
TypeInfo(HWnd),
TypeInfo(Integer),TypeInfo(Integer)],Addr(MonthCal_SetFirstDayOfWeek),cRegister);

RegisterProc(nil,MethodNames[655],mtProc,TypeInfo(_T301),[
TypeInfo(HWnd),TypeInfo(Integer)],Addr(MonthCal_GetFirstDayOfWeek),cRegister);

RegisterProc(nil,MethodNames[656],mtProc,TypeInfo(_T304),[
TypeInfo(HWnd),TypeInfo(Integer)],Addr(MonthCal_GetMonthDelta),cRegister);

RegisterProc(nil,MethodNames[657],mtProc,TypeInfo(_T305),[
TypeInfo(HWnd),
TypeInfo(Integer),TypeInfo(Integer)],Addr(MonthCal_SetMonthDelta),cRegister);

RegisterProc(nil,MethodNames[658],mtProc,TypeInfo(_T306),[
TypeInfo(HWnd),TypeInfo(DWORD)],Addr(MonthCal_GetMaxTodayWidth),cRegister);

RegisterProc(nil,MethodNames[659],mtProc,TypeInfo(_T307),[
TypeInfo(HWnd),
TypeInfo(BOOL),TypeInfo(BOOL)],Addr(MonthCal_SetUnicodeFormat),cRegister);

RegisterProc(nil,MethodNames[660],mtProc,TypeInfo(_T308),[
TypeInfo(HWnd),TypeInfo(BOOL)],Addr(MonthCal_GetUnicodeFormat),cRegister);

RegisterProc(nil,MethodNames[661],mtProc,TypeInfo(_T309),[
TypeInfo(HWnd),
TypeInfo(IDispatch),TypeInfo(DWORD)],Addr(____DateTime_GetSystemTime__Wrapper),cRegister);

RegisterProc(nil,MethodNames[662],mtProc,TypeInfo(_T310),[
TypeInfo(HWnd),
TypeInfo(DWORD),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____DateTime_SetSystemTime__Wrapper),cRegister);

RegisterProc(nil,MethodNames[663],mtProc,TypeInfo(_T316),[
TypeInfo(HWnd),
TypeInfo(DWORD),
TypeInfo(TColorRef),TypeInfo(TColorRef)],Addr(DateTime_SetMonthCalColor),cRegister);

RegisterProc(nil,MethodNames[664],mtProc,TypeInfo(_T317),[
TypeInfo(HWnd),
TypeInfo(DWORD),TypeInfo(TColorRef)],Addr(DateTime_GetMonthCalColor),cRegister);

RegisterProc(nil,MethodNames[665],mtProc,TypeInfo(_T318),[
TypeInfo(HWnd),TypeInfo(HWnd)],Addr(DateTime_GetMonthCal),cRegister);

RegisterProc(nil,MethodNames[666],mtProc,TypeInfo(_T319),[
TypeInfo(HWnd),
TypeInfo(hfont),
TypeInfo(BOOL)],Addr(DateTime_SetMonthCalFont),cRegister);

RegisterProc(nil,MethodNames[667],mtProc,TypeInfo(_T320),[
TypeInfo(HWnd),TypeInfo(hfont)],Addr(DateTime_GetMonthCalFont),cRegister);

RegisterProc(nil,MethodNames[668],mtProc,TypeInfo(_T321),[
TypeInfo(Byte),
TypeInfo(Byte),TypeInfo(lParam)],Addr(MAKEIPRANGE),cRegister);

RegisterProc(nil,MethodNames[669],mtProc,TypeInfo(_T322),[
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(lParam)],Addr(MAKEIPADDRESS),cRegister);

RegisterProc(nil,MethodNames[670],mtProc,TypeInfo(_T323),[
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(FIRST_IPADDRESS),cRegister);

RegisterProc(nil,MethodNames[671],mtProc,TypeInfo(_T324),[
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(SECOND_IPADDRESS),cRegister);

RegisterProc(nil,MethodNames[672],mtProc,TypeInfo(_T325),[
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(THIRD_IPADDRESS),cRegister);

RegisterProc(nil,MethodNames[673],mtProc,TypeInfo(_T326),[
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(FOURTH_IPADDRESS),cRegister);

RegisterProc(nil,MethodNames[674],mtProc,TypeInfo(_T327),[
TypeInfo(HWnd),
TypeInfo(HWnd)],Addr(Pager_SetChild),cRegister);

RegisterProc(nil,MethodNames[675],mtProc,TypeInfo(_T328),[
TypeInfo(HWnd)],Addr(Pager_RecalcSize),cRegister);

RegisterProc(nil,MethodNames[676],mtProc,TypeInfo(_T329),[
TypeInfo(HWnd),
TypeInfo(BOOL)],Addr(Pager_ForwardMouse),cRegister);

RegisterProc(nil,MethodNames[677],mtProc,TypeInfo(_T330),[
TypeInfo(HWnd),
TypeInfo(COLORREF),TypeInfo(COLORREF)],Addr(Pager_SetBkColor),cRegister);

RegisterProc(nil,MethodNames[678],mtProc,TypeInfo(_T331),[
TypeInfo(HWnd),TypeInfo(COLORREF)],Addr(Pager_GetBkColor),cRegister);

RegisterProc(nil,MethodNames[679],mtProc,TypeInfo(_T332),[
TypeInfo(HWnd),
TypeInfo(Integer),TypeInfo(Integer)],Addr(Pager_SetBorder),cRegister);

RegisterProc(nil,MethodNames[680],mtProc,TypeInfo(_T333),[
TypeInfo(HWnd),TypeInfo(Integer)],Addr(Pager_GetBorder),cRegister);

RegisterProc(nil,MethodNames[681],mtProc,TypeInfo(_T334),[
TypeInfo(HWnd),
TypeInfo(Integer),TypeInfo(Integer)],Addr(Pager_SetPos),cRegister);

RegisterProc(nil,MethodNames[682],mtProc,TypeInfo(_T335),[
TypeInfo(HWnd),TypeInfo(Integer)],Addr(Pager_GetPos),cRegister);

RegisterProc(nil,MethodNames[683],mtProc,TypeInfo(_T336),[
TypeInfo(HWnd),
TypeInfo(Integer),TypeInfo(Integer)],Addr(Pager_SetButtonSize),cRegister);

RegisterProc(nil,MethodNames[684],mtProc,TypeInfo(_T337),[
TypeInfo(HWnd),TypeInfo(Integer)],Addr(Pager_GetButtonSize),cRegister);

RegisterProc(nil,MethodNames[685],mtProc,TypeInfo(_T338),[
TypeInfo(HWnd),
TypeInfo(Integer),TypeInfo(DWORD)],Addr(Pager_GetButtonState),cRegister);

RegisterProc(nil,MethodNames[686],mtProc,TypeInfo(_T339),[
TypeInfo(HWnd),
TypeInfoPointer],Addr(Pager_GetDropTarget),cRegister);

RegisterProc(nil,MethodNames[687],mtProc,TypeInfo(_T341),[
TypeInfo(HWnd),
TypeInfo(UINT),
TypeInfo(UINT),TypeInfo(BOOL)],Addr(FlatSB_EnableScrollBar),cStdCall);

RegisterProc(nil,MethodNames[688],mtProc,TypeInfo(_T342),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(BOOL),TypeInfo(BOOL)],Addr(FlatSB_ShowScrollBar),cStdCall);

RegisterProc(nil,MethodNames[689],mtProc,TypeInfo(_T343),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(BOOL)],Addr(FlatSB_GetScrollRange),cStdCall);

RegisterProc(nil,MethodNames[690],mtProc,TypeInfo(_T344),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____FlatSB_GetScrollInfo__Wrapper),cRegister);

RegisterProc(nil,MethodNames[691],mtProc,TypeInfo(_T345),[
TypeInfo(HWnd),
TypeInfo(Integer),TypeInfo(Integer)],Addr(FlatSB_GetScrollPos),cStdCall);

RegisterProc(nil,MethodNames[692],mtProc,TypeInfo(_T346),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfoPointer,TypeInfo(BOOL)],Addr(FlatSB_GetScrollProp),cStdCall);

RegisterProc(nil,MethodNames[693],mtProc,TypeInfo(_T347),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(BOOL),TypeInfo(Integer)],Addr(FlatSB_SetScrollPos),cStdCall);

RegisterProc(nil,MethodNames[694],mtProc,TypeInfo(_T348),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(IDispatch),
TypeInfo(BOOL),TypeInfo(Integer)],Addr(____FlatSB_SetScrollInfo__Wrapper),cRegister);

RegisterProc(nil,MethodNames[695],mtProc,TypeInfo(_T349),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(BOOL),TypeInfo(BOOL)],Addr(FlatSB_SetScrollRange),cStdCall);

RegisterProc(nil,MethodNames[696],mtProc,TypeInfo(_T350),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(BOOL),TypeInfo(BOOL)],Addr(FlatSB_SetScrollProp),cStdCall);

RegisterProc(nil,MethodNames[697],mtProc,TypeInfo(_T351),[
TypeInfo(HWnd),TypeInfo(BOOL)],Addr(InitializeFlatSB),cStdCall);

RegisterProc(nil,MethodNames[698],mtProc,TypeInfo(_T352),[
TypeInfo(HWnd)],Addr(UninitializeFlatSB),cStdCall);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'ImageList_DrawIndirect',mtProc,TypeInfo(_T24),[
TypeInfoPointer,TypeInfo(Integer)],Addr(ImageList_DrawIndirect),cStdCall)}

{RegisterProc(nil,'ImageList_LoadImage',mtProc,TypeInfo(_T27),[
TypeInfo(THandle),
TypeInfoPChar,
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(TColorRef),
TypeInfo(Cardinal),
TypeInfo(Cardinal),TypeInfo(HIMAGELIST)],Addr(ImageList_LoadImage),cStdCall)}

{RegisterProc(nil,'ImageList_LoadImageA',mtProc,TypeInfo(_T28),[
TypeInfo(THandle),
TypeInfoPChar,
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(TColorRef),
TypeInfo(Cardinal),
TypeInfo(Cardinal),TypeInfo(HIMAGELIST)],Addr(ImageList_LoadImageA),cStdCall)}

{RegisterProc(nil,'ImageList_LoadImageW',mtProc,TypeInfo(_T29),[
TypeInfo(THandle),
TypeInfoPWideChar,
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(TColorRef),
TypeInfo(Cardinal),
TypeInfo(Cardinal),TypeInfo(HIMAGELIST)],Addr(ImageList_LoadImageW),cStdCall)}

{RegisterProc(nil,'ImageList_GetDragImage',mtProc,TypeInfo(_T38),[
TypeInfoPointer,
TypeInfoPointer,TypeInfo(HIMAGELIST)],Addr(ImageList_GetDragImage),cStdCall)}

{RegisterProc(nil,'ImageList_LoadBitmap',mtProc,TypeInfo(_T41),[
TypeInfo(THandle),
TypeInfoPChar,
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(TColorRef),TypeInfo(HIMAGELIST)],Addr(ImageList_LoadBitmap),cRegister)}

{RegisterProc(nil,'ImageList_LoadBitmapA',mtProc,TypeInfo(_T42),[
TypeInfo(THandle),
TypeInfoPChar,
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(TColorRef),TypeInfo(HIMAGELIST)],Addr(ImageList_LoadBitmapA),cRegister)}

{RegisterProc(nil,'ImageList_LoadBitmapW',mtProc,TypeInfo(_T43),[
TypeInfo(THandle),
TypeInfoPWideChar,
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(TColorRef),TypeInfo(HIMAGELIST)],Addr(ImageList_LoadBitmapW),cRegister)}

{RegisterProc(nil,'ImageList_Read',mtProc,TypeInfo(_T44),[
TypeInfo(IStream),TypeInfo(HIMAGELIST)],Addr(ImageList_Read),cStdCall)}

{RegisterProc(nil,'ImageList_Write',mtProc,TypeInfo(_T45),[
TypeInfo(HIMAGELIST),
TypeInfo(IStream),TypeInfo(BOOL)],Addr(ImageList_Write),cStdCall)}

{RegisterProc(nil,'Header_Layout',mtProc,TypeInfo(_T62),[
TypeInfo(HWnd),
TypeInfoPointer,TypeInfo(BOOL)],Addr(Header_Layout),cRegister)}

{RegisterProc(nil,'Header_GetItemRect',mtProc,TypeInfo(_T63),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfoPointer,TypeInfo(Integer)],Addr(Header_GetItemRect),cRegister)}

{RegisterProc(nil,'CreateToolBarEx',mtProc,TypeInfo(_T73),[
TypeInfo(HWnd),
TypeInfo(Longint),
TypeInfo(UINT),
TypeInfo(Integer),
TypeInfo(THandle),
TypeInfo(Cardinal),
TypeInfoPointer,
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(UINT),TypeInfo(HWnd)],Addr(CreateToolBarEx),cStdCall)}

{RegisterProc(nil,'CreateMappedBitmap',mtProc,TypeInfo(_T74),[
TypeInfo(THandle),
TypeInfo(Integer),
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(Integer),TypeInfo(HBITMAP)],Addr(CreateMappedBitmap),cStdCall)}

{RegisterProc(nil,'DrawStatusText',mtProc,TypeInfo(_T75),[
TypeInfo(hdc),
TypeInfoPointer,
TypeInfoPChar,
TypeInfo(UINT)],Addr(DrawStatusText),cStdCall)}

{RegisterProc(nil,'DrawStatusTextA',mtProc,TypeInfo(_T76),[
TypeInfo(hdc),
TypeInfoPointer,
TypeInfoPChar,
TypeInfo(UINT)],Addr(DrawStatusTextA),cStdCall)}

{RegisterProc(nil,'DrawStatusTextW',mtProc,TypeInfo(_T77),[
TypeInfo(hdc),
TypeInfoPointer,
TypeInfoPWideChar,
TypeInfo(UINT)],Addr(DrawStatusTextW),cStdCall)}

{RegisterProc(nil,'CreateStatusWindow',mtProc,TypeInfo(_T78),[
TypeInfo(Longint),
TypeInfoPChar,
TypeInfo(HWnd),
TypeInfo(UINT),TypeInfo(HWnd)],Addr(CreateStatusWindow),cStdCall)}

{RegisterProc(nil,'CreateStatusWindowA',mtProc,TypeInfo(_T79),[
TypeInfo(Longint),
TypeInfoPChar,
TypeInfo(HWnd),
TypeInfo(UINT),TypeInfo(HWnd)],Addr(CreateStatusWindowA),cStdCall)}

{RegisterProc(nil,'CreateStatusWindowW',mtProc,TypeInfo(_T80),[
TypeInfo(Longint),
TypeInfoPWideChar,
TypeInfo(HWnd),
TypeInfo(UINT),TypeInfo(HWnd)],Addr(CreateStatusWindowW),cStdCall)}

{RegisterProc(nil,'GetEffectiveClientRect',mtProc,TypeInfo(_T83),[
TypeInfo(HWnd),
TypeInfoPointer,
TypeInfoPointer],Addr(GetEffectiveClientRect),cStdCall)}

{RegisterProc(nil,'ListView_GetStringWidth',mtProc,TypeInfo(_T116),[
TypeInfo(HWnd),
TypeInfoPChar,TypeInfo(Integer)],Addr(ListView_GetStringWidth),cRegister)}

{RegisterProc(nil,'ListView_GetStringWidthA',mtProc,TypeInfo(_T117),[
TypeInfo(HWnd),
TypeInfoPChar,TypeInfo(Integer)],Addr(ListView_GetStringWidthA),cRegister)}

{RegisterProc(nil,'ListView_GetStringWidthW',mtProc,TypeInfo(_T118),[
TypeInfo(HWnd),
TypeInfoPWideChar,TypeInfo(Integer)],Addr(ListView_GetStringWidthW),cRegister)}

{RegisterProc(nil,'ListView_GetItemText',mtProc,TypeInfo(_T155),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfoPChar,
TypeInfo(Integer),TypeInfo(Integer)],Addr(ListView_GetItemText),cRegister)}

{RegisterProc(nil,'ListView_GetItemTextA',mtProc,TypeInfo(_T156),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfoPChar,
TypeInfo(Integer),TypeInfo(Integer)],Addr(ListView_GetItemTextA),cRegister)}

{RegisterProc(nil,'ListView_GetItemTextW',mtProc,TypeInfo(_T157),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfoPWideChar,
TypeInfo(Integer),TypeInfo(Integer)],Addr(ListView_GetItemTextW),cRegister)}

{RegisterProc(nil,'ListView_SetItemText',mtProc,TypeInfo(_T158),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfoPChar,TypeInfo(BOOL)],Addr(ListView_SetItemText),cRegister)}

{RegisterProc(nil,'ListView_SetItemTextA',mtProc,TypeInfo(_T159),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfoPChar,TypeInfo(BOOL)],Addr(ListView_SetItemTextA),cRegister)}

{RegisterProc(nil,'ListView_SetItemTextW',mtProc,TypeInfo(_T160),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfoPWideChar,TypeInfo(BOOL)],Addr(ListView_SetItemTextW),cRegister)}

{RegisterProc(nil,'ListView_SortItems',mtProc,TypeInfo(_T163),[
TypeInfo(HWnd),
TypeInfo(TLVCompare),
TypeInfo(Longint),TypeInfo(BOOL)],Addr(ListView_SortItems),cRegister)}

{RegisterProc(nil,'ListView_GetISearchString',mtProc,TypeInfo(_T167),[
TypeInfo(HWnd),
TypeInfoPChar,TypeInfo(BOOL)],Addr(ListView_GetISearchString),cRegister)}

{RegisterProc(nil,'ListView_GetISearchStringA',mtProc,TypeInfo(_T168),[
TypeInfo(HWnd),
TypeInfoPChar,TypeInfo(BOOL)],Addr(ListView_GetISearchStringA),cRegister)}

{RegisterProc(nil,'ListView_GetISearchStringW',mtProc,TypeInfo(_T169),[
TypeInfo(HWnd),
TypeInfoPWideChar,TypeInfo(BOOL)],Addr(ListView_GetISearchStringW),cRegister)}

{RegisterProc(nil,'ListView_GetSubItemRect',mtProc,TypeInfo(_T173),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(DWORD),
TypeInfoPointer,TypeInfo(BOOL)],Addr(ListView_GetSubItemRect),cRegister)}

{RegisterProc(nil,'ListView_SubItemHitTest',mtProc,TypeInfo(_T174),[
TypeInfo(HWnd),
TypeInfoPointer,TypeInfo(Integer)],Addr(ListView_SubItemHitTest),cRegister)}

{RegisterProc(nil,'ListView_SetWorkAreas',mtProc,TypeInfo(_T182),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfoPointer,TypeInfo(BOOL)],Addr(ListView_SetWorkAreas),cRegister)}

{RegisterProc(nil,'ListView_GetWorkAreas',mtProc,TypeInfo(_T185),[
TypeInfo(HWnd),
TypeInfo(Integer),
TypeInfoPointer,TypeInfo(BOOL)],Addr(ListView_GetWorkAreas),cRegister)}

{RegisterProc(nil,'ListView_SetBkImage',mtProc,TypeInfo(_T191),[
TypeInfo(HWnd),
TypeInfoPointer,TypeInfo(BOOL)],Addr(ListView_SetBkImage),cRegister)}

{RegisterProc(nil,'ListView_SetBkImageA',mtProc,TypeInfo(_T192),[
TypeInfo(HWnd),
TypeInfoPointer,TypeInfo(BOOL)],Addr(ListView_SetBkImageA),cRegister)}

{RegisterProc(nil,'ListView_SetBkImageW',mtProc,TypeInfo(_T193),[
TypeInfo(HWnd),
TypeInfoPointer,TypeInfo(BOOL)],Addr(ListView_SetBkImageW),cRegister)}

{RegisterProc(nil,'ListView_GetBkImage',mtProc,TypeInfo(_T194),[
TypeInfo(HWnd),
TypeInfoPointer,TypeInfo(BOOL)],Addr(ListView_GetBkImage),cRegister)}

{RegisterProc(nil,'ListView_GetBkImageA',mtProc,TypeInfo(_T195),[
TypeInfo(HWnd),
TypeInfoPointer,TypeInfo(BOOL)],Addr(ListView_GetBkImageA),cRegister)}

{RegisterProc(nil,'ListView_GetBkImageW',mtProc,TypeInfo(_T196),[
TypeInfo(HWnd),
TypeInfoPointer,TypeInfo(BOOL)],Addr(ListView_GetBkImageW),cRegister)}

{RegisterProc(nil,'TreeView_DeleteItem',mtProc,TypeInfo(_T200),[
TypeInfo(HWnd),
TypeInfoPointer,TypeInfo(BOOL)],Addr(TreeView_DeleteItem),cRegister)}

{RegisterProc(nil,'TreeView_Expand',mtProc,TypeInfo(_T202),[
TypeInfo(HWnd),
TypeInfoPointer,
TypeInfo(Integer),TypeInfo(BOOL)],Addr(TreeView_Expand),cRegister)}

{RegisterProc(nil,'TreeView_GetNextItem',mtProc,TypeInfo(_T209),[
TypeInfo(HWnd),
TypeInfoPointer,
TypeInfo(Integer),TypeInfoPointer],Addr(TreeView_GetNextItem),cRegister)}

{RegisterProc(nil,'TreeView_GetChild',mtProc,TypeInfo(_T210),[
TypeInfo(HWnd),
TypeInfoPointer,TypeInfoPointer],Addr(TreeView_GetChild),cRegister)}

{RegisterProc(nil,'TreeView_GetNextSibling',mtProc,TypeInfo(_T211),[
TypeInfo(HWnd),
TypeInfoPointer,TypeInfoPointer],Addr(TreeView_GetNextSibling),cRegister)}

{RegisterProc(nil,'TreeView_GetPrevSibling',mtProc,TypeInfo(_T212),[
TypeInfo(HWnd),
TypeInfoPointer,TypeInfoPointer],Addr(TreeView_GetPrevSibling),cRegister)}

{RegisterProc(nil,'TreeView_GetParent',mtProc,TypeInfo(_T213),[
TypeInfo(HWnd),
TypeInfoPointer,TypeInfoPointer],Addr(TreeView_GetParent),cRegister)}

{RegisterProc(nil,'TreeView_GetFirstVisible',mtProc,TypeInfo(_T214),[
TypeInfo(HWnd),TypeInfoPointer],Addr(TreeView_GetFirstVisible),cRegister)}

{RegisterProc(nil,'TreeView_GetNextVisible',mtProc,TypeInfo(_T215),[
TypeInfo(HWnd),
TypeInfoPointer,TypeInfoPointer],Addr(TreeView_GetNextVisible),cRegister)}

{RegisterProc(nil,'TreeView_GetPrevVisible',mtProc,TypeInfo(_T216),[
TypeInfo(HWnd),
TypeInfoPointer,TypeInfoPointer],Addr(TreeView_GetPrevVisible),cRegister)}

{RegisterProc(nil,'TreeView_GetSelection',mtProc,TypeInfo(_T217),[
TypeInfo(HWnd),TypeInfoPointer],Addr(TreeView_GetSelection),cRegister)}

{RegisterProc(nil,'TreeView_GetDropHilite',mtProc,TypeInfo(_T218),[
TypeInfo(HWnd),TypeInfoPointer],Addr(TreeView_GetDropHilite),cRegister)}

{RegisterProc(nil,'TreeView_GetRoot',mtProc,TypeInfo(_T219),[
TypeInfo(HWnd),TypeInfoPointer],Addr(TreeView_GetRoot),cRegister)}

{RegisterProc(nil,'TreeView_GetLastVisible',mtProc,TypeInfo(_T220),[
TypeInfo(HWnd),TypeInfoPointer],Addr(TreeView_GetLastVisible),cRegister)}

{RegisterProc(nil,'TreeView_Select',mtProc,TypeInfo(_T221),[
TypeInfo(HWnd),
TypeInfoPointer,
TypeInfo(Integer),TypeInfoPointer],Addr(TreeView_Select),cRegister)}

{RegisterProc(nil,'TreeView_SelectItem',mtProc,TypeInfo(_T222),[
TypeInfo(HWnd),
TypeInfoPointer,TypeInfoPointer],Addr(TreeView_SelectItem),cRegister)}

{RegisterProc(nil,'TreeView_SelectDropTarget',mtProc,TypeInfo(_T223),[
TypeInfo(HWnd),
TypeInfoPointer,TypeInfoPointer],Addr(TreeView_SelectDropTarget),cRegister)}

{RegisterProc(nil,'TreeView_SelectSetFirstVisible',mtProc,TypeInfo(_T224),[
TypeInfo(HWnd),
TypeInfoPointer,TypeInfoPointer],Addr(TreeView_SelectSetFirstVisible),cRegister)}

{RegisterProc(nil,'TreeView_EditLabel',mtProc,TypeInfo(_T231),[
TypeInfo(HWnd),
TypeInfoPointer,TypeInfo(HWnd)],Addr(TreeView_EditLabel),cRegister)}

{RegisterProc(nil,'TreeView_EditLabelA',mtProc,TypeInfo(_T232),[
TypeInfo(HWnd),
TypeInfoPointer,TypeInfo(HWnd)],Addr(TreeView_EditLabelA),cRegister)}

{RegisterProc(nil,'TreeView_EditLabelW',mtProc,TypeInfo(_T233),[
TypeInfo(HWnd),
TypeInfoPointer,TypeInfo(HWnd)],Addr(TreeView_EditLabelW),cRegister)}

{RegisterProc(nil,'TreeView_CreateDragImage',mtProc,TypeInfo(_T237),[
TypeInfo(HWnd),
TypeInfoPointer,TypeInfo(HIMAGELIST)],Addr(TreeView_CreateDragImage),cRegister)}

{RegisterProc(nil,'TreeView_SortChildren',mtProc,TypeInfo(_T238),[
TypeInfo(HWnd),
TypeInfoPointer,
TypeInfo(Integer),TypeInfo(BOOL)],Addr(TreeView_SortChildren),cRegister)}

{RegisterProc(nil,'TreeView_EnsureVisible',mtProc,TypeInfo(_T239),[
TypeInfo(HWnd),
TypeInfoPointer,TypeInfo(BOOL)],Addr(TreeView_EnsureVisible),cRegister)}

{RegisterProc(nil,'TreeView_GetISearchString',mtProc,TypeInfo(_T242),[
TypeInfo(HWnd),
TypeInfoPChar,TypeInfo(BOOL)],Addr(TreeView_GetISearchString),cRegister)}

{RegisterProc(nil,'TreeView_GetISearchStringA',mtProc,TypeInfo(_T243),[
TypeInfo(HWnd),
TypeInfoPChar,TypeInfo(BOOL)],Addr(TreeView_GetISearchStringA),cRegister)}

{RegisterProc(nil,'TreeView_GetISearchStringW',mtProc,TypeInfo(_T244),[
TypeInfo(HWnd),
TypeInfoPWideChar,TypeInfo(BOOL)],Addr(TreeView_GetISearchStringW),cRegister)}

{RegisterProc(nil,'TabCtrl_HitTest',mtProc,TypeInfo(_T260),[
TypeInfo(HWnd),
TypeInfoPointer,TypeInfo(Integer)],Addr(TabCtrl_HitTest),cRegister)}

{RegisterProc(nil,'TabCtrl_AdjustRect',mtProc,TypeInfo(_T262),[
TypeInfo(HWnd),
TypeInfo(BOOL),
TypeInfoPointer,TypeInfo(Integer)],Addr(TabCtrl_AdjustRect),cRegister)}

{RegisterProc(nil,'Animate_Open',mtProc,TypeInfo(_T280),[
TypeInfo(HWnd),
TypeInfoPChar,TypeInfo(BOOL)],Addr(Animate_Open),cRegister)}

{RegisterProc(nil,'Animate_OpenEx',mtProc,TypeInfo(_T281),[
TypeInfo(HWnd),
TypeInfo(hInst),
TypeInfoPChar,TypeInfo(BOOL)],Addr(Animate_OpenEx),cRegister)}

{RegisterProc(nil,'MonthCal_GetSelRange',mtProc,TypeInfo(_T290),[
TypeInfo(HWnd),
TypeInfoPointer,TypeInfo(BOOL)],Addr(MonthCal_GetSelRange),cRegister)}

{RegisterProc(nil,'MonthCal_SetSelRange',mtProc,TypeInfo(_T291),[
TypeInfo(HWnd),
TypeInfoPointer,TypeInfo(BOOL)],Addr(MonthCal_SetSelRange),cRegister)}

{RegisterProc(nil,'MonthCal_GetMonthRange',mtProc,TypeInfo(_T292),[
TypeInfo(HWnd),
TypeInfo(DWORD),
TypeInfoPointer,TypeInfo(DWORD)],Addr(MonthCal_GetMonthRange),cRegister)}

{RegisterProc(nil,'MonthCal_GetRange',mtProc,TypeInfo(_T302),[
TypeInfo(HWnd),
TypeInfoPointer,TypeInfo(DWORD)],Addr(MonthCal_GetRange),cRegister)}

{RegisterProc(nil,'Monthcal_SetRange',mtProc,TypeInfo(_T303),[
TypeInfo(HWnd),
TypeInfo(DWORD),
TypeInfoPointer,TypeInfo(BOOL)],Addr(Monthcal_SetRange),cRegister)}

{RegisterProc(nil,'DateTime_GetRange',mtProc,TypeInfo(_T311),[
TypeInfo(HWnd),
TypeInfoPointer,TypeInfo(DWORD)],Addr(DateTime_GetRange),cRegister)}

{RegisterProc(nil,'DateTime_SetRange',mtProc,TypeInfo(_T312),[
TypeInfo(HWnd),
TypeInfo(DWORD),
TypeInfoPointer,TypeInfo(BOOL)],Addr(DateTime_SetRange),cRegister)}

{RegisterProc(nil,'DateTime_SetFormat',mtProc,TypeInfo(_T313),[
TypeInfo(HWnd),
TypeInfoPChar,TypeInfo(BOOL)],Addr(DateTime_SetFormat),cRegister)}

{RegisterProc(nil,'DateTime_SetFormatA',mtProc,TypeInfo(_T314),[
TypeInfo(HWnd),
TypeInfoPChar,TypeInfo(BOOL)],Addr(DateTime_SetFormatA),cRegister)}

{RegisterProc(nil,'DateTime_SetFormatW',mtProc,TypeInfo(_T315),[
TypeInfo(HWnd),
TypeInfoPWideChar,TypeInfo(BOOL)],Addr(DateTime_SetFormatW),cRegister)}

{RegisterProc(nil,'_TrackMouseEvent',mtProc,TypeInfo(_T340),[
TypeInfoPointer,TypeInfo(BOOL)],Addr(_TrackMouseEvent),cStdCall)}

__RegisterClasses;
__RegisterConsts0;
__RegisterConsts1;
__RegisterConsts2;
__RegisterConsts3;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterConsts1;
__UnregisterConsts2;
__UnregisterConsts3;
__UnregisterProcs;
end.
