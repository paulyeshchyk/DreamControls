{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDCOMPONENT_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdAntiFreezeBase,
  IdBaseComponent,
  IdGlobal,
  IdStack,
  IdResourceStrings,
  SysUtils,
  IdComponent;
function ConvertTWorkInfoToVariant(var R : TWorkInfo) : OleVariant;
function ConvertVariantToTWorkInfo(const V : OleVariant) : TWorkInfo;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TWorkInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TWorkInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setCurrent(const val : Integer);
function getCurrent : Integer;
property Current : Integer read getCurrent write setCurrent;
procedure setMax(const val : Integer);
function getMax : Integer;
property Max : Integer read getMax write setMax;
procedure setLevel(const val : Integer);
function getLevel : Integer;
property Level : Integer read getLevel write setLevel;
end;
type
_T0 = procedure (p0 : TWorkMode;
const p1 : Integer) of object;

_T1 = _T0;

_T2 = procedure (p0 : TWorkMode) of object;

function __TWorkInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWorkInfo__Wrapper.setCurrent(const val : Integer);
begin
TWorkInfo(GetRecordPtr^).Current := val;
end;
function __TWorkInfo__Wrapper.getCurrent : Integer;
begin
result := TWorkInfo(GetRecordPtr^).Current;
end;
procedure __TWorkInfo__Wrapper.setMax(const val : Integer);
begin
TWorkInfo(GetRecordPtr^).Max := val;
end;
function __TWorkInfo__Wrapper.getMax : Integer;
begin
result := TWorkInfo(GetRecordPtr^).Max;
end;
procedure __TWorkInfo__Wrapper.setLevel(const val : Integer);
begin
TWorkInfo(GetRecordPtr^).Level := val;
end;
function __TWorkInfo__Wrapper.getLevel : Integer;
begin
result := TWorkInfo(GetRecordPtr^).Level;
end;
function _TWorkInfo_ : IDispatch;
begin
  result := __TWorkInfo__Wrapper.Create;
end;
procedure __TIdComponent__BeginWork__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
TIdComponent(__Instance).BeginWork(OleVariant(pargs^[0]));
end;
2:
begin
TIdComponent(__Instance).BeginWork(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;


type __TWorkInfo__Wrapper__ = class(__TWorkInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWorkInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWorkInfoToVariant(var R : TWorkInfo) : OleVariant;
var
__rw : __TWorkInfo__Wrapper__;
begin
__rw := __TWorkInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWorkInfo(const V : OleVariant) : TWorkInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWorkInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTIdComponent__LocalName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdComponent(Instance).LocalName;
end;

procedure __RegisterProps;
begin
RegisterProperty(TIdComponent,'LocalName',__DC__GetTIdComponent__LocalName,nil);
end;

const __ConstNames0 : array[0..10] of string = (
'hsResolving'
,'hsConnecting'
,'hsConnected'
,'hsDisconnecting'
,'hsDisconnected'
,'hsStatusText'
,'ftpTransfer'
,'ftpReady'
,'ftpAborted'
,'wmRead'
,'wmWrite'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,hsResolving));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,hsConnecting));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,hsConnected));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,hsDisconnecting));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,hsDisconnected));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,hsStatusText));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,ftpTransfer));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,ftpReady));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,ftpAborted));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,wmRead));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,wmWrite));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..0] of TClass = (
TIdComponent
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'TWorkInfo'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TWorkInfo_)));
RegisterProc(TIdComponent,'BeginWork',mtScriptMethod,TypeInfo(_T0),[
TypeInfo(TWorkMode),
TypeInfo(Integer)],Addr(__TIdComponent__BeginWork__Wrapper),cRegister);

//RegRegisterMethod(TIdComponent,'DoWork',TypeInfo(_T1),[TypeInfo(TWorkMode),TypeInfo(Integer)], pointer(52));
RegRegisterMethod(TIdComponent,'DoWork',TypeInfo(_T1),[TypeInfo(TWorkMode),TypeInfo(Integer)],  getVMTProcAddr('TIdComponent','DoWork',52));


//RegRegisterMethod(TIdComponent,'EndWork',TypeInfo(_T2),[TypeInfo(TWorkMode)], pointer(56));
RegRegisterMethod(TIdComponent,'EndWork',TypeInfo(_T2),[TypeInfo(TWorkMode)],  getVMTProcAddr('TIdComponent','EndWork',56));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
RegisterEvent(TypeInfo(TIdStatusEvent),[
TypeInfo(TObject),
TypeInfo(TIdStatus),
TypeInfo(string)]);

RegisterEvent(TypeInfo(TWorkBeginEvent),[
TypeInfo(TObject),
TypeInfo(TWorkMode),
TypeInfo(Integer)]);

RegisterEvent(TypeInfo(TWorkEndEvent),[
TypeInfo(TObject),
TypeInfo(TWorkMode)]);

RegisterEvent(TypeInfo(TWorkEvent),[
TypeInfo(TObject),
TypeInfo(TWorkMode),
TypeInfo(Integer)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
