{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDRAWBASE_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdComponent,
  IdGlobal,
  IdSocketHandle,
  IdStackConsts,
  IdRawBase;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T1 = procedure (p0 : string) of object;

function __DC__GetTIdRawBase__TTL(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdRawBase(Instance).TTL;
end;

procedure __DC__SetTIdRawBase__TTL(Instance : TObject; Params : PVariantArgList);
begin
TIdRawBase(Instance).TTL:=OleVariant(Params^[0]);
end;

function __DC__GetTIdRawBase__Binding(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdRawBase(Instance).Binding);
end;

function __DC__GetTIdRawBase__ReceiveTimeout(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdRawBase(Instance).ReceiveTimeout;
end;

procedure __DC__SetTIdRawBase__ReceiveTimeout(Instance : TObject; Params : PVariantArgList);
begin
TIdRawBase(Instance).ReceiveTimeout:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TIdRawBase,'TTL',__DC__GetTIdRawBase__TTL,__DC__SetTIdRawBase__TTL);
RegisterProperty(TIdRawBase,'Binding',__DC__GetTIdRawBase__Binding,nil);
RegisterProperty(TIdRawBase,'ReceiveTimeout',__DC__GetTIdRawBase__ReceiveTimeout,__DC__SetTIdRawBase__ReceiveTimeout);
end;

const __ConstNames0 : array[0..3] of string = (
'Id_TIdRawBase_Port'
,'Id_TIdRawBase_BufferSize'
,'GReceiveTimeout'
,'GFTTL'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,Id_TIdRawBase_Port));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,Id_TIdRawBase_BufferSize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,GReceiveTimeout));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,GFTTL));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..0] of TClass = (
TIdRawBase
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegRegisterMethod(TIdRawBase,'Send',TypeInfo(_T1),[
TypeInfo(string)],Addr(TIdRawBase.Send));

end;
initialization
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
