{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDGLOBAL_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Classes,
  IdException,
  SyncObjs,
  SysUtils,
  IdGlobal;
function ConvertTIdCardinalBytesToVariant(var R : TIdCardinalBytes) : OleVariant;
function ConvertVariantToTIdCardinalBytes(const V : OleVariant) : TIdCardinalBytes;
function ConvertTMethodToVariant(var R : TMethod) : OleVariant;
function ConvertVariantToTMethod(const V : OleVariant) : TMethod;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TIdCardinalBytes__Wrapper = class(TDCRecordWrapper)
private
fR : TIdCardinalBytes;
public
function GetRecordPtr : pointer; override;
published
procedure setByte1(const val : Byte);
function getByte1 : Byte;
property Byte1 : Byte read getByte1 write setByte1;
procedure setByte2(const val : Byte);
function getByte2 : Byte;
property Byte2 : Byte read getByte2 write setByte2;
procedure setByte3(const val : Byte);
function getByte3 : Byte;
property Byte3 : Byte read getByte3 write setByte3;
procedure setByte4(const val : Byte);
function getByte4 : Byte;
property Byte4 : Byte read getByte4 write setByte4;
procedure setWhole(const val : Cardinal);
function getWhole : Cardinal;
property Whole : Cardinal read getWhole write setWhole;
end;
type __TMethod__Wrapper = class(TDCRecordWrapper)
private
fR : TMethod;
public
function GetRecordPtr : pointer; override;
published
end;
type
{_T0 = function (const p0 : string;
p1 : PChar;
p2 : Integer): Integer of object;}

_T1 = function (const p0 : AnsiString;
const p1 : AnsiString;
p2 : Cardinal): Cardinal of object;

_T2 = function (const p0 : string;
const p1 : string): Boolean of object;

_T3 = procedure (var p0) of object;

_T4 = function (const p0 : string): TDateTime of object;

_T5 = function (const p0 : string): string of object;

_T6 = function (p0 : string;
p1 : string;
p2 : TStrings): TStrings of object;

_T7 = procedure (p0 : TStrings;
const p1 : string) of object;

_T8 = _T2;

_T9 = function : TIdPID of object;

_T10 = function : THandle of object;

_T11 = function (p0 : TDateTime;
p1 : Boolean): string of object;

_T12 = function (const p0 : TDateTime): string of object;

_T13 = function (const p0 : TDateTime;
const p1 : Boolean): string of object;

_T14 = procedure (const p0 : string) of object;

_T15 = _T5;

_T16 = _T5;

{_T19 = function (const p0 : string): Int64 of object;}

_T20 = function (const p0 : TFileName): string of object;

_T21 = function : TIdCharSet of object;

_T22 = function (p0 : TThread): THandle of object;

_T23 = function : Cardinal of object;

_T24 = function (const p0 : Cardinal;
const p1 : Cardinal): Cardinal of object;

_T25 = function (p0 : string): TDateTime of object;

_T26 = _T25;

_T27 = function : TList of object;

_T28 = function (p0 : Boolean;
const p1 : Integer;
const p2 : Integer): Integer of object;

_T29 = _T5;

_T30 = function (p0 : Cardinal): string of object;

_T31 = function : string of object;

_T32 = function (var p0 : Integer): Integer of object;

_T33 = _T32;

_T34 = function (var p0 : Integer;
p1 : Integer): Integer of object;

_T35 = _T34;

_T36 = function (const p0 : string): Boolean of object;

_T37 = function (p0 : TThread): Boolean of object;

_T38 = _T36;

_T39 = _T36;

_T40 = _T36;

_T41 = function (p0 : Char): Boolean of object;

_T42 = _T36;

_T43 = _T36;

_T44 = function : Boolean of object;

_T45 = function (p0 : Integer;
p1 : Integer): Integer of object;

_T46 = function (p0 : Pointer;
p1 : Pointer): IDispatch of object;

_T47 = _T5;

_T48 = _T45;

_T49 = function : TDateTime of object;

_T50 = _T1;

_T51 = function (const p0 : string;
p1 : Array of string;
const p2 : Boolean): Integer of object;

_T52 = function (const p0 : string;
const p1 : string;
const p2 : string): string of object;

_T53 = function (const p0 : string;
p1 : Integer): string of object;

_T54 = function (p0 : LongWord;
p1 : Byte): LongWord of object;

_T55 = _T54;

_T56 = function (const p0 : string;
const p1 : string;
p2 : Integer): Integer of object;

_T57 = function (p0 : TDateTime): Boolean of object;

_T58 = procedure (p0 : TThread;
const p1 : TIdThreadPriority;
const p2 : Integer) of object;

_T59 = procedure (p0 : Cardinal) of object;

_T60 = function (const p0 : string): Cardinal of object;

_T61 = _T25;

_T62 = function (const p0 : string): Byte of object;

_T63 = _T62;

{_T64 = function (const p0 : string;
p1 : PChar;
p2 : Integer): Integer of object;}

_T65 = _T49;

_T66 = _T5;

_T67 = function : TIdWin32Type of object;

_T68 = procedure (const p0 : Boolean;
const p1 : Boolean) of object;

_T69 = function : TWaitResult of object;

_T70 = procedure  of object;

_T71 = _T70;

_T72 = procedure (const p0 : string;
const p1 : string) of object;

_T73 = _T5;

_T74 = _T5;

_T75 = procedure (p0 : TStrings;
const p1 : Char) of object;

_T76 = _T75;

_T77 = procedure (p0 : Boolean) of object;

_T78 = procedure (p0 : Pointer;
p1 : Longint) of object;

function __TIdCardinalBytes__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIdCardinalBytes__Wrapper.setByte1(const val : Byte);
begin
TIdCardinalBytes(GetRecordPtr^).Byte1 := val;
end;
function __TIdCardinalBytes__Wrapper.getByte1 : Byte;
begin
result := TIdCardinalBytes(GetRecordPtr^).Byte1;
end;
procedure __TIdCardinalBytes__Wrapper.setByte2(const val : Byte);
begin
TIdCardinalBytes(GetRecordPtr^).Byte2 := val;
end;
function __TIdCardinalBytes__Wrapper.getByte2 : Byte;
begin
result := TIdCardinalBytes(GetRecordPtr^).Byte2;
end;
procedure __TIdCardinalBytes__Wrapper.setByte3(const val : Byte);
begin
TIdCardinalBytes(GetRecordPtr^).Byte3 := val;
end;
function __TIdCardinalBytes__Wrapper.getByte3 : Byte;
begin
result := TIdCardinalBytes(GetRecordPtr^).Byte3;
end;
procedure __TIdCardinalBytes__Wrapper.setByte4(const val : Byte);
begin
TIdCardinalBytes(GetRecordPtr^).Byte4 := val;
end;
function __TIdCardinalBytes__Wrapper.getByte4 : Byte;
begin
result := TIdCardinalBytes(GetRecordPtr^).Byte4;
end;
procedure __TIdCardinalBytes__Wrapper.setWhole(const val : Cardinal);
begin
TIdCardinalBytes(GetRecordPtr^).Whole := val;
end;
function __TIdCardinalBytes__Wrapper.getWhole : Cardinal;
begin
result := TIdCardinalBytes(GetRecordPtr^).Whole;
end;
function _TIdCardinalBytes_ : IDispatch;
begin
  result := __TIdCardinalBytes__Wrapper.Create;
end;
function __TMethod__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function ____AnsiPosIdx__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
2:
begin
result := AnsiPosIdx(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
3:
begin
result := AnsiPosIdx(OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function ____DateTimeToInternetStr__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := DateTimeToInternetStr(OleVariant(pargs^[0]));
end;
2:
begin
result := DateTimeToInternetStr(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function ____MakeMethod__Wrapper(p0 : Pointer;
p1 : Pointer): IDispatch;
var
__result : TMethod;
__wrapper : __TMethod__Wrapper;
begin
__result := MakeMethod(p0,p1);
__wrapper := __TMethod__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

function ____MakeTempFilename__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
0:
begin
result := MakeTempFilename;
end;
1:
begin
result := MakeTempFilename(OleVariant(pargs^[0]));
end;
end
end;

function ____PosIdx__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
2:
begin
result := PosIdx(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
3:
begin
result := PosIdx(OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function ____PosInStrArray__Wrapper(const p0 : string;
p1 : Array of string;
const p2 : Boolean): Integer;
begin
result := PosInStrArray(p0,p1,p2);
end;

function ____ProcessPath__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
2:
begin
result := ProcessPath(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
3:
begin
result := ProcessPath(OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function ____RPos__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
2:
begin
result := RPos(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
3:
begin
result := RPos(OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure ____SetThreadPriority__Wrapper(cArgs : integer; pArgs : PArgList);
begin
case cArgs of
2:
begin
SetThreadPriority(TThread(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
end;
3:
begin
SetThreadPriority(TThread(VarToObject(OleVariant(pargs^[2]))),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure __TIdMimeTable__LoadFromStrings__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
TIdMimeTable(__Instance).LoadFromStrings(TStrings(VarToObject(OleVariant(pargs^[0]))));
end;
2:
begin
TIdMimeTable(__Instance).LoadFromStrings(TStrings(VarToObject(OleVariant(pargs^[1]))),VarToChar(OleVariant(pargs^[0])));
end;
end
end;

procedure __TIdMimeTable__SaveToStrings__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
TIdMimeTable(__Instance).SaveToStrings(TStrings(VarToObject(OleVariant(pargs^[0]))));
end;
2:
begin
TIdMimeTable(__Instance).SaveToStrings(TStrings(VarToObject(OleVariant(pargs^[1]))),VarToChar(OleVariant(pargs^[0])));
end;
end
end;


type __TIdCardinalBytes__Wrapper__ = class(__TIdCardinalBytes__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIdCardinalBytes__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIdCardinalBytesToVariant(var R : TIdCardinalBytes) : OleVariant;
var
__rw : __TIdCardinalBytes__Wrapper__;
begin
__rw := __TIdCardinalBytes__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIdCardinalBytes(const V : OleVariant) : TIdCardinalBytes;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIdCardinalBytes((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMethod__Wrapper__ = class(__TMethod__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMethod__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMethodToVariant(var R : TMethod) : OleVariant;
var
__rw : __TMethod__Wrapper__;
begin
__rw := __TMethod__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMethod(const V : OleVariant) : TMethod;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMethod((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..39] of string = (
'otUnknown'
,'otLinux'
,'otWindows'
,'IdTimeoutDefault'
,'IdTimeoutInfinite'
,'IdFetchDelimDefault'
,'IdFetchDeleteDefault'
,'IdFetchCaseSensitiveDefault'
,'gsIdVersion'
,'CHAR0'
,'BACKSPACE'
,'LF'
,'CR'
,'EOL'
,'TAB'
,'CHAR32'
,'sLineBreak'
,'LWS'
,'GPathDelim'
,'GOSType'
,'infinite'
,'maException'
,'maSplit'
,'rsOSDependent'
,'rsTrue'
,'rsFalse'
,'csGB2312'
,'csBig5'
,'csIso2022jp'
,'csEucKR'
,'csIso88591'
,'Win32s'
,'WindowsNT40'
,'Windows95'
,'Windows95OSR2'
,'Windows98'
,'Windows98SE'
,'Windows2000'
,'WindowsMe'
,'WindowsXP'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,otUnknown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,otLinux));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,otWindows));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,IdTimeoutDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,IdTimeoutInfinite));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,IdFetchDelimDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,IdFetchDeleteDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,IdFetchCaseSensitiveDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,gsIdVersion));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,CHAR0));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,BACKSPACE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,LF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,CR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,EOL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,TAB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,CHAR32));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,sLineBreak));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,VarFromSet(LWS, sizeof(LWS))));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,GPathDelim));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,GOSType));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,infinite));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,maException));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,maSplit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,rsOSDependent));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,rsTrue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,rsFalse));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,csGB2312));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,csBig5));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,csIso2022jp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,csEucKR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,csIso88591));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,Win32s));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,WindowsNT40));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,Windows95));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,Windows95OSR2));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,Windows98));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,Windows98SE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,Windows2000));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,WindowsMe));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,WindowsXP));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..5] of TClass = (
EIdCorruptServicesFile,
EIdExtensionAlreadyExists,
EIdFailedToRetreiveTimeZoneInfo,
TIdLocalEvent,
TIdMimeTable,
TIdReadMemoryStream
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..63] of string = (
'TIdCardinalBytes'
,'AnsiPosIdx'
,'AnsiSameText'
,'FreeAndNil'
,'GetFileCreationTime'
,'GetInternetFormattedFileTimeStamp'
,'BreakApart'
,'CommaSeparatedToStringList'
,'CopyFileTo'
,'CurrentProcessId'
,'GetCurrentThreadHandle'
,'DateTimeToGmtOffSetStr'
,'DateTimeGMTToHttpStr'
,'DateTimeToInternetStr'
,'DebugOutput'
,'DomainName'
,'EnsureMsgIDBrackets'
,'GetMIMETypeFromFile'
,'GetSystemLocale'
,'GetThreadHandle'
,'GetTickCount'
,'GetTickDiff'
,'GmtOffsetStrToDateTime'
,'GMTToLocalDateTime'
,'IdPorts'
,'iif'
,'IncludeTrailingSlash'
,'IntToBin'
,'IndyGetHostName'
,'IndyInterlockedIncrement'
,'IndyInterlockedDecrement'
,'IndyInterlockedExchange'
,'IndyInterlockedExchangeAdd'
,'IndyStrToBool'
,'IsCurrentThread'
,'IsDomain'
,'IsFQDN'
,'IsHostname'
,'IsNumeric'
,'IsTopDomain'
,'IsValidIP'
,'InMainThread'
,'Max'
,'MakeMethod'
,'MakeTempFilename'
,'Min'
,'OffsetFromUTC'
,'PosIdx'
,'PosInStrArray'
,'ProcessPath'
,'RightStr'
,'ROL'
,'ROR'
,'RPos'
,'SetLocalTime'
,'SetThreadPriority'
,'Sleep'
,'StrToCard'
,'StrInternetToDateTime'
,'StrToDay'
,'StrToMonth'
,'TimeZoneBias'
,'UpCaseFirst'
,'Win32Type'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TIdCardinalBytes_)));
RegisterProc(nil,MethodNames[1],mtScriptProc,TypeInfo(_T1),[
TypeInfo(AnsiString),
TypeInfo(AnsiString),
TypeInfo(Cardinal),TypeInfo(Cardinal)],Addr(____AnsiPosIdx__Wrapper),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T2),[
TypeInfo(string),
TypeInfo(string),TypeInfo(Boolean)],Addr(AnsiSameText),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T3),[
TypeInfoUntyped],Addr(FreeAndNil),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T4),[
TypeInfo(string),TypeInfo(TDateTime)],Addr(GetFileCreationTime),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T5),[
TypeInfo(string),TypeInfo(string)],Addr(GetInternetFormattedFileTimeStamp),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T6),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(TStrings),TypeInfo(TStrings)],Addr(BreakApart),cRegister);

RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T7),[
TypeInfo(TStrings),
TypeInfo(string)],Addr(CommaSeparatedToStringList),cRegister);

RegisterProc(nil,MethodNames[8],mtProc,TypeInfo(_T8),[
TypeInfo(string),
TypeInfo(string),TypeInfo(Boolean)],Addr(CopyFileTo),cRegister);

RegisterProc(nil,MethodNames[9],mtProc,TypeInfo(_T9),[TypeInfo(TIdPID)],Addr(CurrentProcessId),cRegister);

RegisterProc(nil,MethodNames[10],mtProc,TypeInfo(_T10),[TypeInfo(THandle)],Addr(GetCurrentThreadHandle),cRegister);

RegisterProc(nil,MethodNames[11],mtProc,TypeInfo(_T11),[
TypeInfo(TDateTime),
TypeInfo(Boolean),TypeInfo(string)],Addr(DateTimeToGmtOffSetStr),cRegister);

RegisterProc(nil,MethodNames[12],mtProc,TypeInfo(_T12),[
TypeInfo(TDateTime),TypeInfo(string)],Addr(DateTimeGMTToHttpStr),cRegister);

RegisterProc(nil,MethodNames[13],mtScriptProc,TypeInfo(_T13),[
TypeInfo(TDateTime),
TypeInfo(Boolean),TypeInfo(string)],Addr(____DateTimeToInternetStr__Wrapper),cRegister);

RegisterProc(nil,MethodNames[14],mtProc,TypeInfo(_T14),[
TypeInfo(string)],Addr(DebugOutput),cRegister);

RegisterProc(nil,MethodNames[15],mtProc,TypeInfo(_T15),[
TypeInfo(string),TypeInfo(string)],Addr(DomainName),cRegister);

RegisterProc(nil,MethodNames[16],mtProc,TypeInfo(_T16),[
TypeInfo(string),TypeInfo(string)],Addr(EnsureMsgIDBrackets),cRegister);

RegisterProc(nil,MethodNames[17],mtProc,TypeInfo(_T20),[
TypeInfo(TFileName),TypeInfo(string)],Addr(GetMIMETypeFromFile),cRegister);

RegisterProc(nil,MethodNames[18],mtProc,TypeInfo(_T21),[TypeInfo(TIdCharSet)],Addr(GetSystemLocale),cRegister);

RegisterProc(nil,MethodNames[19],mtProc,TypeInfo(_T22),[
TypeInfo(TThread),TypeInfo(THandle)],Addr(GetThreadHandle),cRegister);

RegisterProc(nil,MethodNames[20],mtProc,TypeInfo(_T23),[TypeInfo(Cardinal)],Addr(GetTickCount),cRegister);

RegisterProc(nil,MethodNames[21],mtProc,TypeInfo(_T24),[
TypeInfo(Cardinal),
TypeInfo(Cardinal),TypeInfo(Cardinal)],Addr(GetTickDiff),cRegister);

RegisterProc(nil,MethodNames[22],mtProc,TypeInfo(_T25),[
TypeInfo(string),TypeInfo(TDateTime)],Addr(GmtOffsetStrToDateTime),cRegister);

RegisterProc(nil,MethodNames[23],mtProc,TypeInfo(_T26),[
TypeInfo(string),TypeInfo(TDateTime)],Addr(GMTToLocalDateTime),cRegister);

RegisterProc(nil,MethodNames[24],mtProc,TypeInfo(_T27),[TypeInfo(TList)],Addr(IdPorts),cRegister);

RegisterProc(nil,MethodNames[25],mtProc,TypeInfo(_T28),[
TypeInfo(Boolean),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Integer)],Addr(iif),cRegister);

RegisterProc(nil,MethodNames[26],mtProc,TypeInfo(_T29),[
TypeInfo(string),TypeInfo(string)],Addr(IncludeTrailingSlash),cRegister);

RegisterProc(nil,MethodNames[27],mtProc,TypeInfo(_T30),[
TypeInfo(Cardinal),TypeInfo(string)],Addr(IntToBin),cRegister);

RegisterProc(nil,MethodNames[28],mtProc,TypeInfo(_T31),[TypeInfo(string)],Addr(IndyGetHostName),cRegister);

RegisterProc(nil,MethodNames[29],mtProc,TypeInfo(_T32),[
TypeInfo(Integer),TypeInfo(Integer)],Addr(IndyInterlockedIncrement),cRegister);

RegisterProc(nil,MethodNames[30],mtProc,TypeInfo(_T33),[
TypeInfo(Integer),TypeInfo(Integer)],Addr(IndyInterlockedDecrement),cRegister);

RegisterProc(nil,MethodNames[31],mtProc,TypeInfo(_T34),[
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Integer)],Addr(IndyInterlockedExchange),cRegister);

RegisterProc(nil,MethodNames[32],mtProc,TypeInfo(_T35),[
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Integer)],Addr(IndyInterlockedExchangeAdd),cRegister);

RegisterProc(nil,MethodNames[33],mtProc,TypeInfo(_T36),[
TypeInfo(string),TypeInfo(Boolean)],Addr(IndyStrToBool),cRegister);

RegisterProc(nil,MethodNames[34],mtProc,TypeInfo(_T37),[
TypeInfo(TThread),TypeInfo(Boolean)],Addr(IsCurrentThread),cRegister);

RegisterProc(nil,MethodNames[35],mtProc,TypeInfo(_T38),[
TypeInfo(string),TypeInfo(Boolean)],Addr(IsDomain),cRegister);

RegisterProc(nil,MethodNames[36],mtProc,TypeInfo(_T39),[
TypeInfo(string),TypeInfo(Boolean)],Addr(IsFQDN),cRegister);

RegisterProc(nil,MethodNames[37],mtProc,TypeInfo(_T40),[
TypeInfo(string),TypeInfo(Boolean)],Addr(IsHostname),cRegister);

RegisterProc(nil,MethodNames[38],mtProc,TypeInfo(_T41),[
TypeInfo(Char),TypeInfo(Boolean)],Addr(IsNumeric),cRegister);

RegisterProc(nil,MethodNames[39],mtProc,TypeInfo(_T42),[
TypeInfo(string),TypeInfo(Boolean)],Addr(IsTopDomain),cRegister);

RegisterProc(nil,MethodNames[40],mtProc,TypeInfo(_T43),[
TypeInfo(string),TypeInfo(Boolean)],Addr(IsValidIP),cRegister);

RegisterProc(nil,MethodNames[41],mtProc,TypeInfo(_T44),[TypeInfo(Boolean)],Addr(InMainThread),cRegister);

RegisterProc(nil,MethodNames[42],mtProc,TypeInfo(_T45),[
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Integer)],Addr(Max),cRegister);

RegisterProc(nil,MethodNames[43],mtProc,TypeInfo(_T46),[
TypeInfoPointer,
TypeInfoPointer,TypeInfo(IDispatch)],Addr(____MakeMethod__Wrapper),cRegister);

RegisterProc(nil,MethodNames[44],mtScriptProc,TypeInfo(_T47),[
TypeInfo(string),TypeInfo(string)],Addr(____MakeTempFilename__Wrapper),cRegister);

RegisterProc(nil,MethodNames[45],mtProc,TypeInfo(_T48),[
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Integer)],Addr(Min),cRegister);

RegisterProc(nil,MethodNames[46],mtProc,TypeInfo(_T49),[TypeInfo(TDateTime)],Addr(OffsetFromUTC),cRegister);

RegisterProc(nil,MethodNames[47],mtScriptProc,TypeInfo(_T50),[
TypeInfo(AnsiString),
TypeInfo(AnsiString),
TypeInfo(Cardinal),TypeInfo(Cardinal)],Addr(____PosIdx__Wrapper),cRegister);

RegisterProc(nil,MethodNames[48],mtProc,TypeInfo(_T51),[
TypeInfo(string),
ArrayInfo(TypeInfo(string)),
TypeInfo(Boolean),TypeInfo(Integer)],Addr(____PosInStrArray__Wrapper),cRegister);

RegisterProc(nil,MethodNames[49],mtScriptProc,TypeInfo(_T52),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(string),TypeInfo(string)],Addr(____ProcessPath__Wrapper),cRegister);

RegisterProc(nil,MethodNames[50],mtProc,TypeInfo(_T53),[
TypeInfo(string),
TypeInfo(Integer),TypeInfo(string)],Addr(RightStr),cRegister);

RegisterProc(nil,MethodNames[51],mtProc,TypeInfo(_T54),[
TypeInfo(LongWord),
TypeInfo(Byte),TypeInfo(LongWord)],Addr(ROL),cRegister);

RegisterProc(nil,MethodNames[52],mtProc,TypeInfo(_T55),[
TypeInfo(LongWord),
TypeInfo(Byte),TypeInfo(LongWord)],Addr(ROR),cRegister);

RegisterProc(nil,MethodNames[53],mtScriptProc,TypeInfo(_T56),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(Integer),TypeInfo(Integer)],Addr(____RPos__Wrapper),cRegister);

RegisterProc(nil,MethodNames[54],mtProc,TypeInfo(_T57),[
TypeInfo(TDateTime),TypeInfo(Boolean)],Addr(SetLocalTime),cRegister);

RegisterProc(nil,MethodNames[55],mtScriptProc,TypeInfo(_T58),[
TypeInfo(TThread),
TypeInfo(TIdThreadPriority),
TypeInfo(Integer)],Addr(____SetThreadPriority__Wrapper),cRegister);

RegisterProc(nil,MethodNames[56],mtProc,TypeInfo(_T59),[
TypeInfo(Cardinal)],Addr(Sleep),cRegister);

RegisterProc(nil,MethodNames[57],mtProc,TypeInfo(_T60),[
TypeInfo(string),TypeInfo(Cardinal)],Addr(StrToCard),cRegister);

RegisterProc(nil,MethodNames[58],mtProc,TypeInfo(_T61),[
TypeInfo(string),TypeInfo(TDateTime)],Addr(StrInternetToDateTime),cRegister);

RegisterProc(nil,MethodNames[59],mtProc,TypeInfo(_T62),[
TypeInfo(string),TypeInfo(Byte)],Addr(StrToDay),cRegister);

RegisterProc(nil,MethodNames[60],mtProc,TypeInfo(_T63),[
TypeInfo(string),TypeInfo(Byte)],Addr(StrToMonth),cRegister);

RegisterProc(nil,MethodNames[61],mtProc,TypeInfo(_T65),[TypeInfo(TDateTime)],Addr(TimeZoneBias),cRegister);

RegisterProc(nil,MethodNames[62],mtProc,TypeInfo(_T66),[
TypeInfo(string),TypeInfo(string)],Addr(UpCaseFirst),cRegister);

RegisterProc(nil,MethodNames[63],mtProc,TypeInfo(_T67),[TypeInfo(TIdWin32Type)],Addr(Win32Type),cRegister);

RegisterProc(TIdLocalEvent,'Create',mtConstructor,TypeInfo(_T68),[
TypeInfo(Boolean),
TypeInfo(Boolean)],Addr(TIdLocalEvent.Create),cRegister);

RegRegisterMethod(TIdLocalEvent,'WaitFor',TypeInfo(_T69),[TypeInfo(TWaitResult)],Addr(TIdLocalEvent.WaitFor));

//RegRegisterMethod(TIdMimeTable,'BuildDefaultCache',TypeInfo(_T70),NoParams, pointer(0));
RegRegisterMethod(TIdMimeTable,'BuildDefaultCache',TypeInfo(_T70),NoParams,  getVMTProcAddr('TIdMimeTable','BuildDefaultCache',0));


//RegRegisterMethod(TIdMimeTable,'BuildCache',TypeInfo(_T71),NoParams, pointer(4));
RegRegisterMethod(TIdMimeTable,'BuildCache',TypeInfo(_T71),NoParams,  getVMTProcAddr('TIdMimeTable','BuildCache',4));


RegRegisterMethod(TIdMimeTable,'AddMimeType',TypeInfo(_T72),[
TypeInfo(string),
TypeInfo(string)],Addr(TIdMimeTable.AddMimeType));

RegRegisterMethod(TIdMimeTable,'GetFileMIMEType',TypeInfo(_T73),[
TypeInfo(string),TypeInfo(string)],Addr(TIdMimeTable.GetFileMIMEType));

RegRegisterMethod(TIdMimeTable,'GetDefaultFileExt',TypeInfo(_T74),[
TypeInfo(string),TypeInfo(string)],Addr(TIdMimeTable.GetDefaultFileExt));

RegisterProc(TIdMimeTable,'LoadFromStrings',mtScriptMethod,TypeInfo(_T75),[
TypeInfo(TStrings),
TypeInfo(Char)],Addr(__TIdMimeTable__LoadFromStrings__Wrapper),cRegister);

RegisterProc(TIdMimeTable,'SaveToStrings',mtScriptMethod,TypeInfo(_T76),[
TypeInfo(TStrings),
TypeInfo(Char)],Addr(__TIdMimeTable__SaveToStrings__Wrapper),cRegister);

//RegisterProc(TIdMimeTable,'Create',mtConstructor,TypeInfo(_T77),[TypeInfo(Boolean)], pointer(8),cRegister);
RegisterProc(TIdMimeTable,'Create',mtConstructor,TypeInfo(_T77),[TypeInfo(Boolean)],  getVMTProcAddr('TIdMimeTable','Create',8),cRegister);


RegRegisterMethod(TIdReadMemoryStream,'SetPointer',TypeInfo(_T78),[
TypeInfoPointer,
TypeInfo(Longint)],Addr(TIdReadMemoryStream.SetPointer));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'AnsiMemoryPos',mtProc,TypeInfo(_T0),[
TypeInfo(string),
TypeInfoPChar,
TypeInfo(Integer),TypeInfo(Integer)],Addr(AnsiMemoryPos),cRegister)}

{RegisterProc(nil,'FileSizeByName',mtProc,TypeInfo(_T19),[
TypeInfo(string),TypeInfo(Int64)],Addr(FileSizeByName),cRegister)}

{RegisterProc(nil,'MemoryPos',mtProc,TypeInfo(_T64),[
TypeInfo(string),
TypeInfoPChar,
TypeInfo(Integer),TypeInfo(Integer)],Addr(MemoryPos),cRegister)}

RegisterEvent(TypeInfo(TIdReadLnFunction),[TypeInfo(string)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
