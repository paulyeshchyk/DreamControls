{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit OBJCOMAUTO_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  ObjAuto,
  ActiveX,
  TypInfo,
  ObjComAuto;
function ConvertTDispatchInfoToVariant(var R : TDispatchInfo) : OleVariant;
function ConvertVariantToTDispatchInfo(const V : OleVariant) : TDispatchInfo;
function ConvertTGUIDToVariant(var R : TGUID) : OleVariant;
function ConvertVariantToTGUID(const V : OleVariant) : TGUID;
function ConvertTMethodToVariant(var R : TMethod) : OleVariant;
function ConvertVariantToTMethod(const V : OleVariant) : TMethod;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TDispatchInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TDispatchInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setInstance(const val : TObject);
function getInstance : TObject;
property Instance : TObject read getInstance write setInstance;
procedure setIndex(const val : Integer);
function getIndex : Integer;
property Index : Integer read getIndex write setIndex;
end;
type __TMethod__Wrapper = class(TDCRecordWrapper)
private
fR : TMethod;
public
function GetRecordPtr : pointer; override;
published
end;
type __TGUID__Wrapper = class(TDCRecordWrapper)
private
fR : TGUID;
public
function GetRecordPtr : pointer; override;
published
procedure setD1(const val : LongWord);
function getD1 : LongWord;
property D1 : LongWord read getD1 write setD1;
procedure setD2(const val : Word);
function getD2 : Word;
property D2 : Word read getD2 write setD2;
procedure setD3(const val : Word);
function getD3 : Word;
property D3 : Word read getD3 write setD3;
end;
type
_T1 = procedure (const p0 : IDispatch) of object;

_T2 = function (p0 : TObject): TObjectDispatch of object;

{_T3 = function (const p0 : ShortString;
var p1 : TObject): PMethodInfoHeader of object;}

{_T4 = function (const p0 : string;
var p1 : TObject;
var p2 : Integer): PPropInfo of object;}

_T5 = function (const p0 : IDispatch;
p1 : Pointer;
p2 : Integer;
p3 : Integer;
p4 : Pointer): HRESULT of object;

_T6 = function (p0 : Integer;
p1 : Integer;
out p2): HRESULT of object;

_T7 = function (out p0 : Integer): HRESULT of object;

_T8 = function (p0 : Integer;
const p1 : IDispatch;
p2 : Integer;
p3 : Word;
var p4 : Word;
p5 : Pointer;
p6 : Pointer;
p7 : Pointer): HRESULT of object;

_T9 = procedure (p0 : TObject;
p1 : Boolean) of object;

function __TDispatchInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDispatchInfo__Wrapper.setInstance(const val : TObject);
begin
TDispatchInfo(GetRecordPtr^).Instance := val;
end;
function __TDispatchInfo__Wrapper.getInstance : TObject;
begin
result := TDispatchInfo(GetRecordPtr^).Instance;
end;
procedure __TDispatchInfo__Wrapper.setIndex(const val : Integer);
begin
TDispatchInfo(GetRecordPtr^).Index := val;
end;
function __TDispatchInfo__Wrapper.getIndex : Integer;
begin
result := TDispatchInfo(GetRecordPtr^).Index;
end;
function _TDispatchInfo_ : IDispatch;
begin
  result := __TDispatchInfo__Wrapper.Create;
end;
function __TMethod__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TGUID__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TGUID__Wrapper.setD1(const val : LongWord);
begin
TGUID(GetRecordPtr^).D1 := val;
end;
function __TGUID__Wrapper.getD1 : LongWord;
begin
result := TGUID(GetRecordPtr^).D1;
end;
procedure __TGUID__Wrapper.setD2(const val : Word);
begin
TGUID(GetRecordPtr^).D2 := val;
end;
function __TGUID__Wrapper.getD2 : Word;
begin
result := TGUID(GetRecordPtr^).D2;
end;
procedure __TGUID__Wrapper.setD3(const val : Word);
begin
TGUID(GetRecordPtr^).D3 := val;
end;
function __TGUID__Wrapper.getD3 : Word;
begin
result := TGUID(GetRecordPtr^).D3;
end;
procedure ____ReleaseMethodPointer__Wrapper(const p0 : IDispatch);
var
__p0 : ^TMethod;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
ReleaseMethodPointer(__p0^);
end;

function __TObjectDispatch__GetIDsOfNames__Wrapper(__Instance : TObjectDispatch;
const p0 : IDispatch;
p1 : Pointer;
p2 : Integer;
p3 : Integer;
p4 : Pointer): HRESULT;
var
__p0 : ^TGUID;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := TObjectDispatch(__Instance).GetIDsOfNames(__p0^,p1,p2,p3,p4);
end;

function __TObjectDispatch__Invoke__Wrapper(__Instance : TObjectDispatch;
p0 : Integer;
const p1 : IDispatch;
p2 : Integer;
p3 : Word;
var p4 : Word;
p5 : Pointer;
p6 : Pointer;
p7 : Pointer): HRESULT;
var
__p1 : ^TGUID;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := TObjectDispatch(__Instance).Invoke(p0,__p1^,p2,p3,p4,p5,p6,p7);
end;


type __TDispatchInfo__Wrapper__ = class(__TDispatchInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDispatchInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDispatchInfoToVariant(var R : TDispatchInfo) : OleVariant;
var
__rw : __TDispatchInfo__Wrapper__;
begin
__rw := __TDispatchInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDispatchInfo(const V : OleVariant) : TDispatchInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDispatchInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TGUID__Wrapper__ = class(__TGUID__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TGUID__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTGUIDToVariant(var R : TGUID) : OleVariant;
var
__rw : __TGUID__Wrapper__;
begin
__rw := __TGUID__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTGUID(const V : OleVariant) : TGUID;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TGUID((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMethod__Wrapper__ = class(__TMethod__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMethod__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMethodToVariant(var R : TMethod) : OleVariant;
var
__rw : __TMethod__Wrapper__;
begin
__rw := __TMethod__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMethod(const V : OleVariant) : TMethod;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMethod((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..2] of string = (
'dkMethod'
,'dkProperty'
,'dkSubComponent'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,dkMethod));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,dkProperty));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,dkSubComponent));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..0] of TClass = (
TObjectDispatch
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..1] of string = (
'TDispatchInfo'
,'ReleaseMethodPointer'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TDispatchInfo_)));
RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(IDispatch)],Addr(____ReleaseMethodPointer__Wrapper),cRegister);

//RegRegisterMethod(TObjectDispatch,'GetObjectDispatch',TypeInfo(_T2),[TypeInfo(TObject),TypeInfo(TObjectDispatch)], pointer(0));
RegRegisterMethod(TObjectDispatch,'GetObjectDispatch',TypeInfo(_T2),[TypeInfo(TObject),TypeInfo(TObjectDispatch)],  getVMTProcAddr('TObjectDispatch','GetObjectDispatch',0));


RegisterProc(TObjectDispatch,'GetIDsOfNames',mtMethod,TypeInfo(_T5),[
TypeInfo(IDispatch),
TypeInfoPointer,
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfoPointer,TypeInfo(HRESULT)], pointer(12),cRegister);

RegisterProc(TObjectDispatch,'GetTypeInfo',mtMethod,TypeInfo(_T6),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfoUntyped,TypeInfo(HRESULT)],Addr(TObjectDispatch.GetTypeInfo),cStdCall);

RegisterProc(TObjectDispatch,'GetTypeInfoCount',mtMethod,TypeInfo(_T7),[
TypeInfo(Integer),TypeInfo(HRESULT)],Addr(TObjectDispatch.GetTypeInfoCount),cStdCall);

//RegisterProc(TObjectDispatch,'Invoke',mtMethod,TypeInfo(_T8),[TypeInfo(Integer),TypeInfo(IDispatch),TypeInfo(Integer),TypeInfo(Word),TypeInfo(Word),TypeInfoPointer,TypeInfoPointer,TypeInfoPointer,TypeInfo(HRESULT)], pointer(16),cRegister);
RegisterProc(TObjectDispatch,'Invoke',mtMethod,TypeInfo(_T8),[TypeInfo(Integer),TypeInfo(IDispatch),TypeInfo(Integer),TypeInfo(Word),TypeInfo(Word),TypeInfoPointer,TypeInfoPointer,TypeInfoPointer,TypeInfo(HRESULT)],  getVMTProcAddr('TObjectDispatch','Invoke',16),cRegister);


RegisterProc(TObjectDispatch,'Create',mtConstructor,TypeInfo(_T9),[
TypeInfo(TObject),
TypeInfo(Boolean)],Addr(TObjectDispatch.Create),cRegister);

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegRegisterMethod(TObjectDispatch,'GetMethodInfo',TypeInfo(_T3),[
TypeInfo(ShortString),
TypeInfo(TObject),TypeInfoPointer], pointer(4))}

{RegRegisterMethod(TObjectDispatch,'GetPropInfo',TypeInfo(_T4),[
TypeInfo(string),
TypeInfo(TObject),
TypeInfo(Integer),TypeInfoPointer], pointer(8))}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
