{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit TLHELP32_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  Types,
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  TlHelp32;
function ConvertHEAPENTRY32ToVariant(var R : HEAPENTRY32) : OleVariant;
function ConvertVariantToHEAPENTRY32(const V : OleVariant) : HEAPENTRY32;
function ConvertHEAPLIST32ToVariant(var R : HEAPLIST32) : OleVariant;
function ConvertVariantToHEAPLIST32(const V : OleVariant) : HEAPLIST32;
function ConvertMODULEENTRY32ToVariant(var R : MODULEENTRY32) : OleVariant;
function ConvertVariantToMODULEENTRY32(const V : OleVariant) : MODULEENTRY32;
function ConvertMODULEENTRY32WToVariant(var R : MODULEENTRY32W) : OleVariant;
function ConvertVariantToMODULEENTRY32W(const V : OleVariant) : MODULEENTRY32W;
function ConvertPROCESSENTRY32ToVariant(var R : PROCESSENTRY32) : OleVariant;
function ConvertVariantToPROCESSENTRY32(const V : OleVariant) : PROCESSENTRY32;
function ConvertPROCESSENTRY32WToVariant(var R : PROCESSENTRY32W) : OleVariant;
function ConvertVariantToPROCESSENTRY32W(const V : OleVariant) : PROCESSENTRY32W;
function ConverttagHEAPENTRY32ToVariant(var R : tagHEAPENTRY32) : OleVariant;
function ConvertVariantTotagHEAPENTRY32(const V : OleVariant) : tagHEAPENTRY32;
function ConverttagHEAPLIST32ToVariant(var R : tagHEAPLIST32) : OleVariant;
function ConvertVariantTotagHEAPLIST32(const V : OleVariant) : tagHEAPLIST32;
function ConverttagMODULEENTRY32ToVariant(var R : tagMODULEENTRY32) : OleVariant;
function ConvertVariantTotagMODULEENTRY32(const V : OleVariant) : tagMODULEENTRY32;
function ConverttagMODULEENTRY32WToVariant(var R : tagMODULEENTRY32W) : OleVariant;
function ConvertVariantTotagMODULEENTRY32W(const V : OleVariant) : tagMODULEENTRY32W;
function ConverttagPROCESSENTRY32ToVariant(var R : tagPROCESSENTRY32) : OleVariant;
function ConvertVariantTotagPROCESSENTRY32(const V : OleVariant) : tagPROCESSENTRY32;
function ConverttagPROCESSENTRY32WToVariant(var R : tagPROCESSENTRY32W) : OleVariant;
function ConvertVariantTotagPROCESSENTRY32W(const V : OleVariant) : tagPROCESSENTRY32W;
function ConverttagTHREADENTRY32ToVariant(var R : tagTHREADENTRY32) : OleVariant;
function ConvertVariantTotagTHREADENTRY32(const V : OleVariant) : tagTHREADENTRY32;
function ConvertTHeapEntry32ToVariant(var R : THeapEntry32) : OleVariant;
function ConvertVariantToTHeapEntry32(const V : OleVariant) : THeapEntry32;
function ConvertTHeapList32ToVariant(var R : THeapList32) : OleVariant;
function ConvertVariantToTHeapList32(const V : OleVariant) : THeapList32;
function ConvertTHREADENTRY32ToVariant(var R : THREADENTRY32) : OleVariant;
function ConvertVariantToTHREADENTRY32(const V : OleVariant) : THREADENTRY32;
function ConvertTModuleEntry32ToVariant(var R : TModuleEntry32) : OleVariant;
function ConvertVariantToTModuleEntry32(const V : OleVariant) : TModuleEntry32;
function ConvertTModuleEntry32WToVariant(var R : TModuleEntry32W) : OleVariant;
function ConvertVariantToTModuleEntry32W(const V : OleVariant) : TModuleEntry32W;
function ConvertTProcessEntry32ToVariant(var R : TProcessEntry32) : OleVariant;
function ConvertVariantToTProcessEntry32(const V : OleVariant) : TProcessEntry32;
function ConvertTProcessEntry32WToVariant(var R : TProcessEntry32W) : OleVariant;
function ConvertVariantToTProcessEntry32W(const V : OleVariant) : TProcessEntry32W;
function ConvertTThreadEntry32ToVariant(var R : TThreadEntry32) : OleVariant;
function ConvertVariantToTThreadEntry32(const V : OleVariant) : TThreadEntry32;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __HEAPENTRY32__Wrapper = class(TDCRecordWrapper)
private
fR : HEAPENTRY32;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure sethHandle(const val : THandle);
function gethHandle : THandle;
property hHandle : THandle read gethHandle write sethHandle;
procedure setdwAddress(const val : DWORD);
function getdwAddress : DWORD;
property dwAddress : DWORD read getdwAddress write setdwAddress;
procedure setdwBlockSize(const val : DWORD);
function getdwBlockSize : DWORD;
property dwBlockSize : DWORD read getdwBlockSize write setdwBlockSize;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setdwLockCount(const val : DWORD);
function getdwLockCount : DWORD;
property dwLockCount : DWORD read getdwLockCount write setdwLockCount;
procedure setdwResvd(const val : DWORD);
function getdwResvd : DWORD;
property dwResvd : DWORD read getdwResvd write setdwResvd;
procedure setth32ProcessID(const val : DWORD);
function getth32ProcessID : DWORD;
property th32ProcessID : DWORD read getth32ProcessID write setth32ProcessID;
procedure setth32HeapID(const val : DWORD);
function getth32HeapID : DWORD;
property th32HeapID : DWORD read getth32HeapID write setth32HeapID;
end;
type __HEAPLIST32__Wrapper = class(TDCRecordWrapper)
private
fR : HEAPLIST32;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setth32ProcessID(const val : DWORD);
function getth32ProcessID : DWORD;
property th32ProcessID : DWORD read getth32ProcessID write setth32ProcessID;
procedure setth32HeapID(const val : DWORD);
function getth32HeapID : DWORD;
property th32HeapID : DWORD read getth32HeapID write setth32HeapID;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type __MODULEENTRY32__Wrapper = class(TDCRecordWrapper)
private
fR : MODULEENTRY32;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setth32ModuleID(const val : DWORD);
function getth32ModuleID : DWORD;
property th32ModuleID : DWORD read getth32ModuleID write setth32ModuleID;
procedure setth32ProcessID(const val : DWORD);
function getth32ProcessID : DWORD;
property th32ProcessID : DWORD read getth32ProcessID write setth32ProcessID;
procedure setGlblcntUsage(const val : DWORD);
function getGlblcntUsage : DWORD;
property GlblcntUsage : DWORD read getGlblcntUsage write setGlblcntUsage;
procedure setProccntUsage(const val : DWORD);
function getProccntUsage : DWORD;
property ProccntUsage : DWORD read getProccntUsage write setProccntUsage;
procedure setmodBaseSize(const val : DWORD);
function getmodBaseSize : DWORD;
property modBaseSize : DWORD read getmodBaseSize write setmodBaseSize;
procedure sethModule(const val : hModule);
function gethModule : hModule;
property hModule : hModule read gethModule write sethModule;
end;
type __MODULEENTRY32W__Wrapper = class(TDCRecordWrapper)
private
fR : MODULEENTRY32W;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setth32ModuleID(const val : DWORD);
function getth32ModuleID : DWORD;
property th32ModuleID : DWORD read getth32ModuleID write setth32ModuleID;
procedure setth32ProcessID(const val : DWORD);
function getth32ProcessID : DWORD;
property th32ProcessID : DWORD read getth32ProcessID write setth32ProcessID;
procedure setGlblcntUsage(const val : DWORD);
function getGlblcntUsage : DWORD;
property GlblcntUsage : DWORD read getGlblcntUsage write setGlblcntUsage;
procedure setProccntUsage(const val : DWORD);
function getProccntUsage : DWORD;
property ProccntUsage : DWORD read getProccntUsage write setProccntUsage;
procedure setmodBaseSize(const val : DWORD);
function getmodBaseSize : DWORD;
property modBaseSize : DWORD read getmodBaseSize write setmodBaseSize;
procedure sethModule(const val : hModule);
function gethModule : hModule;
property hModule : hModule read gethModule write sethModule;
end;
type __PROCESSENTRY32__Wrapper = class(TDCRecordWrapper)
private
fR : PROCESSENTRY32;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setcntUsage(const val : DWORD);
function getcntUsage : DWORD;
property cntUsage : DWORD read getcntUsage write setcntUsage;
procedure setth32ProcessID(const val : DWORD);
function getth32ProcessID : DWORD;
property th32ProcessID : DWORD read getth32ProcessID write setth32ProcessID;
procedure setth32DefaultHeapID(const val : DWORD);
function getth32DefaultHeapID : DWORD;
property th32DefaultHeapID : DWORD read getth32DefaultHeapID write setth32DefaultHeapID;
procedure setth32ModuleID(const val : DWORD);
function getth32ModuleID : DWORD;
property th32ModuleID : DWORD read getth32ModuleID write setth32ModuleID;
procedure setcntThreads(const val : DWORD);
function getcntThreads : DWORD;
property cntThreads : DWORD read getcntThreads write setcntThreads;
procedure setth32ParentProcessID(const val : DWORD);
function getth32ParentProcessID : DWORD;
property th32ParentProcessID : DWORD read getth32ParentProcessID write setth32ParentProcessID;
procedure setpcPriClassBase(const val : Longint);
function getpcPriClassBase : Longint;
property pcPriClassBase : Longint read getpcPriClassBase write setpcPriClassBase;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type __PROCESSENTRY32W__Wrapper = class(TDCRecordWrapper)
private
fR : PROCESSENTRY32W;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setcntUsage(const val : DWORD);
function getcntUsage : DWORD;
property cntUsage : DWORD read getcntUsage write setcntUsage;
procedure setth32ProcessID(const val : DWORD);
function getth32ProcessID : DWORD;
property th32ProcessID : DWORD read getth32ProcessID write setth32ProcessID;
procedure setth32DefaultHeapID(const val : DWORD);
function getth32DefaultHeapID : DWORD;
property th32DefaultHeapID : DWORD read getth32DefaultHeapID write setth32DefaultHeapID;
procedure setth32ModuleID(const val : DWORD);
function getth32ModuleID : DWORD;
property th32ModuleID : DWORD read getth32ModuleID write setth32ModuleID;
procedure setcntThreads(const val : DWORD);
function getcntThreads : DWORD;
property cntThreads : DWORD read getcntThreads write setcntThreads;
procedure setth32ParentProcessID(const val : DWORD);
function getth32ParentProcessID : DWORD;
property th32ParentProcessID : DWORD read getth32ParentProcessID write setth32ParentProcessID;
procedure setpcPriClassBase(const val : Longint);
function getpcPriClassBase : Longint;
property pcPriClassBase : Longint read getpcPriClassBase write setpcPriClassBase;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type __tagHEAPENTRY32__Wrapper = class(TDCRecordWrapper)
private
fR : tagHEAPENTRY32;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure sethHandle(const val : THandle);
function gethHandle : THandle;
property hHandle : THandle read gethHandle write sethHandle;
procedure setdwAddress(const val : DWORD);
function getdwAddress : DWORD;
property dwAddress : DWORD read getdwAddress write setdwAddress;
procedure setdwBlockSize(const val : DWORD);
function getdwBlockSize : DWORD;
property dwBlockSize : DWORD read getdwBlockSize write setdwBlockSize;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setdwLockCount(const val : DWORD);
function getdwLockCount : DWORD;
property dwLockCount : DWORD read getdwLockCount write setdwLockCount;
procedure setdwResvd(const val : DWORD);
function getdwResvd : DWORD;
property dwResvd : DWORD read getdwResvd write setdwResvd;
procedure setth32ProcessID(const val : DWORD);
function getth32ProcessID : DWORD;
property th32ProcessID : DWORD read getth32ProcessID write setth32ProcessID;
procedure setth32HeapID(const val : DWORD);
function getth32HeapID : DWORD;
property th32HeapID : DWORD read getth32HeapID write setth32HeapID;
end;
type __tagHEAPLIST32__Wrapper = class(TDCRecordWrapper)
private
fR : tagHEAPLIST32;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setth32ProcessID(const val : DWORD);
function getth32ProcessID : DWORD;
property th32ProcessID : DWORD read getth32ProcessID write setth32ProcessID;
procedure setth32HeapID(const val : DWORD);
function getth32HeapID : DWORD;
property th32HeapID : DWORD read getth32HeapID write setth32HeapID;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type __tagMODULEENTRY32__Wrapper = class(TDCRecordWrapper)
private
fR : tagMODULEENTRY32;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setth32ModuleID(const val : DWORD);
function getth32ModuleID : DWORD;
property th32ModuleID : DWORD read getth32ModuleID write setth32ModuleID;
procedure setth32ProcessID(const val : DWORD);
function getth32ProcessID : DWORD;
property th32ProcessID : DWORD read getth32ProcessID write setth32ProcessID;
procedure setGlblcntUsage(const val : DWORD);
function getGlblcntUsage : DWORD;
property GlblcntUsage : DWORD read getGlblcntUsage write setGlblcntUsage;
procedure setProccntUsage(const val : DWORD);
function getProccntUsage : DWORD;
property ProccntUsage : DWORD read getProccntUsage write setProccntUsage;
procedure setmodBaseSize(const val : DWORD);
function getmodBaseSize : DWORD;
property modBaseSize : DWORD read getmodBaseSize write setmodBaseSize;
procedure sethModule(const val : hModule);
function gethModule : hModule;
property hModule : hModule read gethModule write sethModule;
end;
type __tagMODULEENTRY32W__Wrapper = class(TDCRecordWrapper)
private
fR : tagMODULEENTRY32W;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setth32ModuleID(const val : DWORD);
function getth32ModuleID : DWORD;
property th32ModuleID : DWORD read getth32ModuleID write setth32ModuleID;
procedure setth32ProcessID(const val : DWORD);
function getth32ProcessID : DWORD;
property th32ProcessID : DWORD read getth32ProcessID write setth32ProcessID;
procedure setGlblcntUsage(const val : DWORD);
function getGlblcntUsage : DWORD;
property GlblcntUsage : DWORD read getGlblcntUsage write setGlblcntUsage;
procedure setProccntUsage(const val : DWORD);
function getProccntUsage : DWORD;
property ProccntUsage : DWORD read getProccntUsage write setProccntUsage;
procedure setmodBaseSize(const val : DWORD);
function getmodBaseSize : DWORD;
property modBaseSize : DWORD read getmodBaseSize write setmodBaseSize;
procedure sethModule(const val : hModule);
function gethModule : hModule;
property hModule : hModule read gethModule write sethModule;
end;
type __tagPROCESSENTRY32__Wrapper = class(TDCRecordWrapper)
private
fR : tagPROCESSENTRY32;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setcntUsage(const val : DWORD);
function getcntUsage : DWORD;
property cntUsage : DWORD read getcntUsage write setcntUsage;
procedure setth32ProcessID(const val : DWORD);
function getth32ProcessID : DWORD;
property th32ProcessID : DWORD read getth32ProcessID write setth32ProcessID;
procedure setth32DefaultHeapID(const val : DWORD);
function getth32DefaultHeapID : DWORD;
property th32DefaultHeapID : DWORD read getth32DefaultHeapID write setth32DefaultHeapID;
procedure setth32ModuleID(const val : DWORD);
function getth32ModuleID : DWORD;
property th32ModuleID : DWORD read getth32ModuleID write setth32ModuleID;
procedure setcntThreads(const val : DWORD);
function getcntThreads : DWORD;
property cntThreads : DWORD read getcntThreads write setcntThreads;
procedure setth32ParentProcessID(const val : DWORD);
function getth32ParentProcessID : DWORD;
property th32ParentProcessID : DWORD read getth32ParentProcessID write setth32ParentProcessID;
procedure setpcPriClassBase(const val : Longint);
function getpcPriClassBase : Longint;
property pcPriClassBase : Longint read getpcPriClassBase write setpcPriClassBase;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type __tagPROCESSENTRY32W__Wrapper = class(TDCRecordWrapper)
private
fR : tagPROCESSENTRY32W;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setcntUsage(const val : DWORD);
function getcntUsage : DWORD;
property cntUsage : DWORD read getcntUsage write setcntUsage;
procedure setth32ProcessID(const val : DWORD);
function getth32ProcessID : DWORD;
property th32ProcessID : DWORD read getth32ProcessID write setth32ProcessID;
procedure setth32DefaultHeapID(const val : DWORD);
function getth32DefaultHeapID : DWORD;
property th32DefaultHeapID : DWORD read getth32DefaultHeapID write setth32DefaultHeapID;
procedure setth32ModuleID(const val : DWORD);
function getth32ModuleID : DWORD;
property th32ModuleID : DWORD read getth32ModuleID write setth32ModuleID;
procedure setcntThreads(const val : DWORD);
function getcntThreads : DWORD;
property cntThreads : DWORD read getcntThreads write setcntThreads;
procedure setth32ParentProcessID(const val : DWORD);
function getth32ParentProcessID : DWORD;
property th32ParentProcessID : DWORD read getth32ParentProcessID write setth32ParentProcessID;
procedure setpcPriClassBase(const val : Longint);
function getpcPriClassBase : Longint;
property pcPriClassBase : Longint read getpcPriClassBase write setpcPriClassBase;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type __tagTHREADENTRY32__Wrapper = class(TDCRecordWrapper)
private
fR : tagTHREADENTRY32;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setcntUsage(const val : DWORD);
function getcntUsage : DWORD;
property cntUsage : DWORD read getcntUsage write setcntUsage;
procedure setth32ThreadID(const val : DWORD);
function getth32ThreadID : DWORD;
property th32ThreadID : DWORD read getth32ThreadID write setth32ThreadID;
procedure setth32OwnerProcessID(const val : DWORD);
function getth32OwnerProcessID : DWORD;
property th32OwnerProcessID : DWORD read getth32OwnerProcessID write setth32OwnerProcessID;
procedure settpBasePri(const val : Longint);
function gettpBasePri : Longint;
property tpBasePri : Longint read gettpBasePri write settpBasePri;
procedure settpDeltaPri(const val : Longint);
function gettpDeltaPri : Longint;
property tpDeltaPri : Longint read gettpDeltaPri write settpDeltaPri;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type __THeapEntry32__Wrapper = class(TDCRecordWrapper)
private
fR : THeapEntry32;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure sethHandle(const val : THandle);
function gethHandle : THandle;
property hHandle : THandle read gethHandle write sethHandle;
procedure setdwAddress(const val : DWORD);
function getdwAddress : DWORD;
property dwAddress : DWORD read getdwAddress write setdwAddress;
procedure setdwBlockSize(const val : DWORD);
function getdwBlockSize : DWORD;
property dwBlockSize : DWORD read getdwBlockSize write setdwBlockSize;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setdwLockCount(const val : DWORD);
function getdwLockCount : DWORD;
property dwLockCount : DWORD read getdwLockCount write setdwLockCount;
procedure setdwResvd(const val : DWORD);
function getdwResvd : DWORD;
property dwResvd : DWORD read getdwResvd write setdwResvd;
procedure setth32ProcessID(const val : DWORD);
function getth32ProcessID : DWORD;
property th32ProcessID : DWORD read getth32ProcessID write setth32ProcessID;
procedure setth32HeapID(const val : DWORD);
function getth32HeapID : DWORD;
property th32HeapID : DWORD read getth32HeapID write setth32HeapID;
end;
type __THeapList32__Wrapper = class(TDCRecordWrapper)
private
fR : THeapList32;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setth32ProcessID(const val : DWORD);
function getth32ProcessID : DWORD;
property th32ProcessID : DWORD read getth32ProcessID write setth32ProcessID;
procedure setth32HeapID(const val : DWORD);
function getth32HeapID : DWORD;
property th32HeapID : DWORD read getth32HeapID write setth32HeapID;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type __THREADENTRY32__Wrapper = class(TDCRecordWrapper)
private
fR : THREADENTRY32;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setcntUsage(const val : DWORD);
function getcntUsage : DWORD;
property cntUsage : DWORD read getcntUsage write setcntUsage;
procedure setth32ThreadID(const val : DWORD);
function getth32ThreadID : DWORD;
property th32ThreadID : DWORD read getth32ThreadID write setth32ThreadID;
procedure setth32OwnerProcessID(const val : DWORD);
function getth32OwnerProcessID : DWORD;
property th32OwnerProcessID : DWORD read getth32OwnerProcessID write setth32OwnerProcessID;
procedure settpBasePri(const val : Longint);
function gettpBasePri : Longint;
property tpBasePri : Longint read gettpBasePri write settpBasePri;
procedure settpDeltaPri(const val : Longint);
function gettpDeltaPri : Longint;
property tpDeltaPri : Longint read gettpDeltaPri write settpDeltaPri;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type __TModuleEntry32__Wrapper = class(TDCRecordWrapper)
private
fR : TModuleEntry32;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setth32ModuleID(const val : DWORD);
function getth32ModuleID : DWORD;
property th32ModuleID : DWORD read getth32ModuleID write setth32ModuleID;
procedure setth32ProcessID(const val : DWORD);
function getth32ProcessID : DWORD;
property th32ProcessID : DWORD read getth32ProcessID write setth32ProcessID;
procedure setGlblcntUsage(const val : DWORD);
function getGlblcntUsage : DWORD;
property GlblcntUsage : DWORD read getGlblcntUsage write setGlblcntUsage;
procedure setProccntUsage(const val : DWORD);
function getProccntUsage : DWORD;
property ProccntUsage : DWORD read getProccntUsage write setProccntUsage;
procedure setmodBaseSize(const val : DWORD);
function getmodBaseSize : DWORD;
property modBaseSize : DWORD read getmodBaseSize write setmodBaseSize;
procedure sethModule(const val : hModule);
function gethModule : hModule;
property hModule : hModule read gethModule write sethModule;
end;
type __TModuleEntry32W__Wrapper = class(TDCRecordWrapper)
private
fR : TModuleEntry32W;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setth32ModuleID(const val : DWORD);
function getth32ModuleID : DWORD;
property th32ModuleID : DWORD read getth32ModuleID write setth32ModuleID;
procedure setth32ProcessID(const val : DWORD);
function getth32ProcessID : DWORD;
property th32ProcessID : DWORD read getth32ProcessID write setth32ProcessID;
procedure setGlblcntUsage(const val : DWORD);
function getGlblcntUsage : DWORD;
property GlblcntUsage : DWORD read getGlblcntUsage write setGlblcntUsage;
procedure setProccntUsage(const val : DWORD);
function getProccntUsage : DWORD;
property ProccntUsage : DWORD read getProccntUsage write setProccntUsage;
procedure setmodBaseSize(const val : DWORD);
function getmodBaseSize : DWORD;
property modBaseSize : DWORD read getmodBaseSize write setmodBaseSize;
procedure sethModule(const val : hModule);
function gethModule : hModule;
property hModule : hModule read gethModule write sethModule;
end;
type __TProcessEntry32__Wrapper = class(TDCRecordWrapper)
private
fR : TProcessEntry32;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setcntUsage(const val : DWORD);
function getcntUsage : DWORD;
property cntUsage : DWORD read getcntUsage write setcntUsage;
procedure setth32ProcessID(const val : DWORD);
function getth32ProcessID : DWORD;
property th32ProcessID : DWORD read getth32ProcessID write setth32ProcessID;
procedure setth32DefaultHeapID(const val : DWORD);
function getth32DefaultHeapID : DWORD;
property th32DefaultHeapID : DWORD read getth32DefaultHeapID write setth32DefaultHeapID;
procedure setth32ModuleID(const val : DWORD);
function getth32ModuleID : DWORD;
property th32ModuleID : DWORD read getth32ModuleID write setth32ModuleID;
procedure setcntThreads(const val : DWORD);
function getcntThreads : DWORD;
property cntThreads : DWORD read getcntThreads write setcntThreads;
procedure setth32ParentProcessID(const val : DWORD);
function getth32ParentProcessID : DWORD;
property th32ParentProcessID : DWORD read getth32ParentProcessID write setth32ParentProcessID;
procedure setpcPriClassBase(const val : Longint);
function getpcPriClassBase : Longint;
property pcPriClassBase : Longint read getpcPriClassBase write setpcPriClassBase;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type __TProcessEntry32W__Wrapper = class(TDCRecordWrapper)
private
fR : TProcessEntry32W;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setcntUsage(const val : DWORD);
function getcntUsage : DWORD;
property cntUsage : DWORD read getcntUsage write setcntUsage;
procedure setth32ProcessID(const val : DWORD);
function getth32ProcessID : DWORD;
property th32ProcessID : DWORD read getth32ProcessID write setth32ProcessID;
procedure setth32DefaultHeapID(const val : DWORD);
function getth32DefaultHeapID : DWORD;
property th32DefaultHeapID : DWORD read getth32DefaultHeapID write setth32DefaultHeapID;
procedure setth32ModuleID(const val : DWORD);
function getth32ModuleID : DWORD;
property th32ModuleID : DWORD read getth32ModuleID write setth32ModuleID;
procedure setcntThreads(const val : DWORD);
function getcntThreads : DWORD;
property cntThreads : DWORD read getcntThreads write setcntThreads;
procedure setth32ParentProcessID(const val : DWORD);
function getth32ParentProcessID : DWORD;
property th32ParentProcessID : DWORD read getth32ParentProcessID write setth32ParentProcessID;
procedure setpcPriClassBase(const val : Longint);
function getpcPriClassBase : Longint;
property pcPriClassBase : Longint read getpcPriClassBase write setpcPriClassBase;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type __TThreadEntry32__Wrapper = class(TDCRecordWrapper)
private
fR : TThreadEntry32;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setcntUsage(const val : DWORD);
function getcntUsage : DWORD;
property cntUsage : DWORD read getcntUsage write setcntUsage;
procedure setth32ThreadID(const val : DWORD);
function getth32ThreadID : DWORD;
property th32ThreadID : DWORD read getth32ThreadID write setth32ThreadID;
procedure setth32OwnerProcessID(const val : DWORD);
function getth32OwnerProcessID : DWORD;
property th32OwnerProcessID : DWORD read getth32OwnerProcessID write setth32OwnerProcessID;
procedure settpBasePri(const val : Longint);
function gettpBasePri : Longint;
property tpBasePri : Longint read gettpBasePri write settpBasePri;
procedure settpDeltaPri(const val : Longint);
function gettpDeltaPri : Longint;
property tpDeltaPri : Longint read gettpDeltaPri write settpDeltaPri;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type
_T0 = function (p0 : DWORD;
p1 : DWORD): THandle of object;

_T1 = function (p0 : THandle;
const p1 : IDispatch): BOOL of object;

_T2 = _T1;

_T3 = function (const p0 : IDispatch;
p1 : DWORD;
p2 : DWORD): BOOL of object;

_T4 = function (const p0 : IDispatch): BOOL of object;

_T5 = function (p0 : DWORD;
p1 : Pointer;
var p2 : Pointer;
p3 : DWORD;
var p4 : DWORD): BOOL of object;

_T6 = _T1;

_T7 = _T1;

_T8 = _T1;

_T9 = _T1;

_T10 = _T1;

_T11 = _T1;

_T12 = _T1;

_T13 = _T1;

_T14 = _T1;

_T15 = _T1;

function __HEAPENTRY32__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __HEAPENTRY32__Wrapper.setdwSize(const val : DWORD);
begin
HEAPENTRY32(GetRecordPtr^).dwSize := val;
end;
function __HEAPENTRY32__Wrapper.getdwSize : DWORD;
begin
result := HEAPENTRY32(GetRecordPtr^).dwSize;
end;
procedure __HEAPENTRY32__Wrapper.sethHandle(const val : THandle);
begin
HEAPENTRY32(GetRecordPtr^).hHandle := val;
end;
function __HEAPENTRY32__Wrapper.gethHandle : THandle;
begin
result := HEAPENTRY32(GetRecordPtr^).hHandle;
end;
procedure __HEAPENTRY32__Wrapper.setdwAddress(const val : DWORD);
begin
HEAPENTRY32(GetRecordPtr^).dwAddress := val;
end;
function __HEAPENTRY32__Wrapper.getdwAddress : DWORD;
begin
result := HEAPENTRY32(GetRecordPtr^).dwAddress;
end;
procedure __HEAPENTRY32__Wrapper.setdwBlockSize(const val : DWORD);
begin
HEAPENTRY32(GetRecordPtr^).dwBlockSize := val;
end;
function __HEAPENTRY32__Wrapper.getdwBlockSize : DWORD;
begin
result := HEAPENTRY32(GetRecordPtr^).dwBlockSize;
end;
procedure __HEAPENTRY32__Wrapper.setdwFlags(const val : DWORD);
begin
HEAPENTRY32(GetRecordPtr^).dwFlags := val;
end;
function __HEAPENTRY32__Wrapper.getdwFlags : DWORD;
begin
result := HEAPENTRY32(GetRecordPtr^).dwFlags;
end;
procedure __HEAPENTRY32__Wrapper.setdwLockCount(const val : DWORD);
begin
HEAPENTRY32(GetRecordPtr^).dwLockCount := val;
end;
function __HEAPENTRY32__Wrapper.getdwLockCount : DWORD;
begin
result := HEAPENTRY32(GetRecordPtr^).dwLockCount;
end;
procedure __HEAPENTRY32__Wrapper.setdwResvd(const val : DWORD);
begin
HEAPENTRY32(GetRecordPtr^).dwResvd := val;
end;
function __HEAPENTRY32__Wrapper.getdwResvd : DWORD;
begin
result := HEAPENTRY32(GetRecordPtr^).dwResvd;
end;
procedure __HEAPENTRY32__Wrapper.setth32ProcessID(const val : DWORD);
begin
HEAPENTRY32(GetRecordPtr^).th32ProcessID := val;
end;
function __HEAPENTRY32__Wrapper.getth32ProcessID : DWORD;
begin
result := HEAPENTRY32(GetRecordPtr^).th32ProcessID;
end;
procedure __HEAPENTRY32__Wrapper.setth32HeapID(const val : DWORD);
begin
HEAPENTRY32(GetRecordPtr^).th32HeapID := val;
end;
function __HEAPENTRY32__Wrapper.getth32HeapID : DWORD;
begin
result := HEAPENTRY32(GetRecordPtr^).th32HeapID;
end;
function __HEAPLIST32__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __HEAPLIST32__Wrapper.setdwSize(const val : DWORD);
begin
HEAPLIST32(GetRecordPtr^).dwSize := val;
end;
function __HEAPLIST32__Wrapper.getdwSize : DWORD;
begin
result := HEAPLIST32(GetRecordPtr^).dwSize;
end;
procedure __HEAPLIST32__Wrapper.setth32ProcessID(const val : DWORD);
begin
HEAPLIST32(GetRecordPtr^).th32ProcessID := val;
end;
function __HEAPLIST32__Wrapper.getth32ProcessID : DWORD;
begin
result := HEAPLIST32(GetRecordPtr^).th32ProcessID;
end;
procedure __HEAPLIST32__Wrapper.setth32HeapID(const val : DWORD);
begin
HEAPLIST32(GetRecordPtr^).th32HeapID := val;
end;
function __HEAPLIST32__Wrapper.getth32HeapID : DWORD;
begin
result := HEAPLIST32(GetRecordPtr^).th32HeapID;
end;
procedure __HEAPLIST32__Wrapper.setdwFlags(const val : DWORD);
begin
HEAPLIST32(GetRecordPtr^).dwFlags := val;
end;
function __HEAPLIST32__Wrapper.getdwFlags : DWORD;
begin
result := HEAPLIST32(GetRecordPtr^).dwFlags;
end;
function __MODULEENTRY32__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MODULEENTRY32__Wrapper.setdwSize(const val : DWORD);
begin
MODULEENTRY32(GetRecordPtr^).dwSize := val;
end;
function __MODULEENTRY32__Wrapper.getdwSize : DWORD;
begin
result := MODULEENTRY32(GetRecordPtr^).dwSize;
end;
procedure __MODULEENTRY32__Wrapper.setth32ModuleID(const val : DWORD);
begin
MODULEENTRY32(GetRecordPtr^).th32ModuleID := val;
end;
function __MODULEENTRY32__Wrapper.getth32ModuleID : DWORD;
begin
result := MODULEENTRY32(GetRecordPtr^).th32ModuleID;
end;
procedure __MODULEENTRY32__Wrapper.setth32ProcessID(const val : DWORD);
begin
MODULEENTRY32(GetRecordPtr^).th32ProcessID := val;
end;
function __MODULEENTRY32__Wrapper.getth32ProcessID : DWORD;
begin
result := MODULEENTRY32(GetRecordPtr^).th32ProcessID;
end;
procedure __MODULEENTRY32__Wrapper.setGlblcntUsage(const val : DWORD);
begin
MODULEENTRY32(GetRecordPtr^).GlblcntUsage := val;
end;
function __MODULEENTRY32__Wrapper.getGlblcntUsage : DWORD;
begin
result := MODULEENTRY32(GetRecordPtr^).GlblcntUsage;
end;
procedure __MODULEENTRY32__Wrapper.setProccntUsage(const val : DWORD);
begin
MODULEENTRY32(GetRecordPtr^).ProccntUsage := val;
end;
function __MODULEENTRY32__Wrapper.getProccntUsage : DWORD;
begin
result := MODULEENTRY32(GetRecordPtr^).ProccntUsage;
end;
procedure __MODULEENTRY32__Wrapper.setmodBaseSize(const val : DWORD);
begin
MODULEENTRY32(GetRecordPtr^).modBaseSize := val;
end;
function __MODULEENTRY32__Wrapper.getmodBaseSize : DWORD;
begin
result := MODULEENTRY32(GetRecordPtr^).modBaseSize;
end;
procedure __MODULEENTRY32__Wrapper.sethModule(const val : hModule);
begin
MODULEENTRY32(GetRecordPtr^).hModule := val;
end;
function __MODULEENTRY32__Wrapper.gethModule : hModule;
begin
result := MODULEENTRY32(GetRecordPtr^).hModule;
end;
function __MODULEENTRY32W__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MODULEENTRY32W__Wrapper.setdwSize(const val : DWORD);
begin
MODULEENTRY32W(GetRecordPtr^).dwSize := val;
end;
function __MODULEENTRY32W__Wrapper.getdwSize : DWORD;
begin
result := MODULEENTRY32W(GetRecordPtr^).dwSize;
end;
procedure __MODULEENTRY32W__Wrapper.setth32ModuleID(const val : DWORD);
begin
MODULEENTRY32W(GetRecordPtr^).th32ModuleID := val;
end;
function __MODULEENTRY32W__Wrapper.getth32ModuleID : DWORD;
begin
result := MODULEENTRY32W(GetRecordPtr^).th32ModuleID;
end;
procedure __MODULEENTRY32W__Wrapper.setth32ProcessID(const val : DWORD);
begin
MODULEENTRY32W(GetRecordPtr^).th32ProcessID := val;
end;
function __MODULEENTRY32W__Wrapper.getth32ProcessID : DWORD;
begin
result := MODULEENTRY32W(GetRecordPtr^).th32ProcessID;
end;
procedure __MODULEENTRY32W__Wrapper.setGlblcntUsage(const val : DWORD);
begin
MODULEENTRY32W(GetRecordPtr^).GlblcntUsage := val;
end;
function __MODULEENTRY32W__Wrapper.getGlblcntUsage : DWORD;
begin
result := MODULEENTRY32W(GetRecordPtr^).GlblcntUsage;
end;
procedure __MODULEENTRY32W__Wrapper.setProccntUsage(const val : DWORD);
begin
MODULEENTRY32W(GetRecordPtr^).ProccntUsage := val;
end;
function __MODULEENTRY32W__Wrapper.getProccntUsage : DWORD;
begin
result := MODULEENTRY32W(GetRecordPtr^).ProccntUsage;
end;
procedure __MODULEENTRY32W__Wrapper.setmodBaseSize(const val : DWORD);
begin
MODULEENTRY32W(GetRecordPtr^).modBaseSize := val;
end;
function __MODULEENTRY32W__Wrapper.getmodBaseSize : DWORD;
begin
result := MODULEENTRY32W(GetRecordPtr^).modBaseSize;
end;
procedure __MODULEENTRY32W__Wrapper.sethModule(const val : hModule);
begin
MODULEENTRY32W(GetRecordPtr^).hModule := val;
end;
function __MODULEENTRY32W__Wrapper.gethModule : hModule;
begin
result := MODULEENTRY32W(GetRecordPtr^).hModule;
end;
function __PROCESSENTRY32__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __PROCESSENTRY32__Wrapper.setdwSize(const val : DWORD);
begin
PROCESSENTRY32(GetRecordPtr^).dwSize := val;
end;
function __PROCESSENTRY32__Wrapper.getdwSize : DWORD;
begin
result := PROCESSENTRY32(GetRecordPtr^).dwSize;
end;
procedure __PROCESSENTRY32__Wrapper.setcntUsage(const val : DWORD);
begin
PROCESSENTRY32(GetRecordPtr^).cntUsage := val;
end;
function __PROCESSENTRY32__Wrapper.getcntUsage : DWORD;
begin
result := PROCESSENTRY32(GetRecordPtr^).cntUsage;
end;
procedure __PROCESSENTRY32__Wrapper.setth32ProcessID(const val : DWORD);
begin
PROCESSENTRY32(GetRecordPtr^).th32ProcessID := val;
end;
function __PROCESSENTRY32__Wrapper.getth32ProcessID : DWORD;
begin
result := PROCESSENTRY32(GetRecordPtr^).th32ProcessID;
end;
procedure __PROCESSENTRY32__Wrapper.setth32DefaultHeapID(const val : DWORD);
begin
PROCESSENTRY32(GetRecordPtr^).th32DefaultHeapID := val;
end;
function __PROCESSENTRY32__Wrapper.getth32DefaultHeapID : DWORD;
begin
result := PROCESSENTRY32(GetRecordPtr^).th32DefaultHeapID;
end;
procedure __PROCESSENTRY32__Wrapper.setth32ModuleID(const val : DWORD);
begin
PROCESSENTRY32(GetRecordPtr^).th32ModuleID := val;
end;
function __PROCESSENTRY32__Wrapper.getth32ModuleID : DWORD;
begin
result := PROCESSENTRY32(GetRecordPtr^).th32ModuleID;
end;
procedure __PROCESSENTRY32__Wrapper.setcntThreads(const val : DWORD);
begin
PROCESSENTRY32(GetRecordPtr^).cntThreads := val;
end;
function __PROCESSENTRY32__Wrapper.getcntThreads : DWORD;
begin
result := PROCESSENTRY32(GetRecordPtr^).cntThreads;
end;
procedure __PROCESSENTRY32__Wrapper.setth32ParentProcessID(const val : DWORD);
begin
PROCESSENTRY32(GetRecordPtr^).th32ParentProcessID := val;
end;
function __PROCESSENTRY32__Wrapper.getth32ParentProcessID : DWORD;
begin
result := PROCESSENTRY32(GetRecordPtr^).th32ParentProcessID;
end;
procedure __PROCESSENTRY32__Wrapper.setpcPriClassBase(const val : Longint);
begin
PROCESSENTRY32(GetRecordPtr^).pcPriClassBase := val;
end;
function __PROCESSENTRY32__Wrapper.getpcPriClassBase : Longint;
begin
result := PROCESSENTRY32(GetRecordPtr^).pcPriClassBase;
end;
procedure __PROCESSENTRY32__Wrapper.setdwFlags(const val : DWORD);
begin
PROCESSENTRY32(GetRecordPtr^).dwFlags := val;
end;
function __PROCESSENTRY32__Wrapper.getdwFlags : DWORD;
begin
result := PROCESSENTRY32(GetRecordPtr^).dwFlags;
end;
function __PROCESSENTRY32W__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __PROCESSENTRY32W__Wrapper.setdwSize(const val : DWORD);
begin
PROCESSENTRY32W(GetRecordPtr^).dwSize := val;
end;
function __PROCESSENTRY32W__Wrapper.getdwSize : DWORD;
begin
result := PROCESSENTRY32W(GetRecordPtr^).dwSize;
end;
procedure __PROCESSENTRY32W__Wrapper.setcntUsage(const val : DWORD);
begin
PROCESSENTRY32W(GetRecordPtr^).cntUsage := val;
end;
function __PROCESSENTRY32W__Wrapper.getcntUsage : DWORD;
begin
result := PROCESSENTRY32W(GetRecordPtr^).cntUsage;
end;
procedure __PROCESSENTRY32W__Wrapper.setth32ProcessID(const val : DWORD);
begin
PROCESSENTRY32W(GetRecordPtr^).th32ProcessID := val;
end;
function __PROCESSENTRY32W__Wrapper.getth32ProcessID : DWORD;
begin
result := PROCESSENTRY32W(GetRecordPtr^).th32ProcessID;
end;
procedure __PROCESSENTRY32W__Wrapper.setth32DefaultHeapID(const val : DWORD);
begin
PROCESSENTRY32W(GetRecordPtr^).th32DefaultHeapID := val;
end;
function __PROCESSENTRY32W__Wrapper.getth32DefaultHeapID : DWORD;
begin
result := PROCESSENTRY32W(GetRecordPtr^).th32DefaultHeapID;
end;
procedure __PROCESSENTRY32W__Wrapper.setth32ModuleID(const val : DWORD);
begin
PROCESSENTRY32W(GetRecordPtr^).th32ModuleID := val;
end;
function __PROCESSENTRY32W__Wrapper.getth32ModuleID : DWORD;
begin
result := PROCESSENTRY32W(GetRecordPtr^).th32ModuleID;
end;
procedure __PROCESSENTRY32W__Wrapper.setcntThreads(const val : DWORD);
begin
PROCESSENTRY32W(GetRecordPtr^).cntThreads := val;
end;
function __PROCESSENTRY32W__Wrapper.getcntThreads : DWORD;
begin
result := PROCESSENTRY32W(GetRecordPtr^).cntThreads;
end;
procedure __PROCESSENTRY32W__Wrapper.setth32ParentProcessID(const val : DWORD);
begin
PROCESSENTRY32W(GetRecordPtr^).th32ParentProcessID := val;
end;
function __PROCESSENTRY32W__Wrapper.getth32ParentProcessID : DWORD;
begin
result := PROCESSENTRY32W(GetRecordPtr^).th32ParentProcessID;
end;
procedure __PROCESSENTRY32W__Wrapper.setpcPriClassBase(const val : Longint);
begin
PROCESSENTRY32W(GetRecordPtr^).pcPriClassBase := val;
end;
function __PROCESSENTRY32W__Wrapper.getpcPriClassBase : Longint;
begin
result := PROCESSENTRY32W(GetRecordPtr^).pcPriClassBase;
end;
procedure __PROCESSENTRY32W__Wrapper.setdwFlags(const val : DWORD);
begin
PROCESSENTRY32W(GetRecordPtr^).dwFlags := val;
end;
function __PROCESSENTRY32W__Wrapper.getdwFlags : DWORD;
begin
result := PROCESSENTRY32W(GetRecordPtr^).dwFlags;
end;
function __tagHEAPENTRY32__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagHEAPENTRY32__Wrapper.setdwSize(const val : DWORD);
begin
tagHEAPENTRY32(GetRecordPtr^).dwSize := val;
end;
function __tagHEAPENTRY32__Wrapper.getdwSize : DWORD;
begin
result := tagHEAPENTRY32(GetRecordPtr^).dwSize;
end;
procedure __tagHEAPENTRY32__Wrapper.sethHandle(const val : THandle);
begin
tagHEAPENTRY32(GetRecordPtr^).hHandle := val;
end;
function __tagHEAPENTRY32__Wrapper.gethHandle : THandle;
begin
result := tagHEAPENTRY32(GetRecordPtr^).hHandle;
end;
procedure __tagHEAPENTRY32__Wrapper.setdwAddress(const val : DWORD);
begin
tagHEAPENTRY32(GetRecordPtr^).dwAddress := val;
end;
function __tagHEAPENTRY32__Wrapper.getdwAddress : DWORD;
begin
result := tagHEAPENTRY32(GetRecordPtr^).dwAddress;
end;
procedure __tagHEAPENTRY32__Wrapper.setdwBlockSize(const val : DWORD);
begin
tagHEAPENTRY32(GetRecordPtr^).dwBlockSize := val;
end;
function __tagHEAPENTRY32__Wrapper.getdwBlockSize : DWORD;
begin
result := tagHEAPENTRY32(GetRecordPtr^).dwBlockSize;
end;
procedure __tagHEAPENTRY32__Wrapper.setdwFlags(const val : DWORD);
begin
tagHEAPENTRY32(GetRecordPtr^).dwFlags := val;
end;
function __tagHEAPENTRY32__Wrapper.getdwFlags : DWORD;
begin
result := tagHEAPENTRY32(GetRecordPtr^).dwFlags;
end;
procedure __tagHEAPENTRY32__Wrapper.setdwLockCount(const val : DWORD);
begin
tagHEAPENTRY32(GetRecordPtr^).dwLockCount := val;
end;
function __tagHEAPENTRY32__Wrapper.getdwLockCount : DWORD;
begin
result := tagHEAPENTRY32(GetRecordPtr^).dwLockCount;
end;
procedure __tagHEAPENTRY32__Wrapper.setdwResvd(const val : DWORD);
begin
tagHEAPENTRY32(GetRecordPtr^).dwResvd := val;
end;
function __tagHEAPENTRY32__Wrapper.getdwResvd : DWORD;
begin
result := tagHEAPENTRY32(GetRecordPtr^).dwResvd;
end;
procedure __tagHEAPENTRY32__Wrapper.setth32ProcessID(const val : DWORD);
begin
tagHEAPENTRY32(GetRecordPtr^).th32ProcessID := val;
end;
function __tagHEAPENTRY32__Wrapper.getth32ProcessID : DWORD;
begin
result := tagHEAPENTRY32(GetRecordPtr^).th32ProcessID;
end;
procedure __tagHEAPENTRY32__Wrapper.setth32HeapID(const val : DWORD);
begin
tagHEAPENTRY32(GetRecordPtr^).th32HeapID := val;
end;
function __tagHEAPENTRY32__Wrapper.getth32HeapID : DWORD;
begin
result := tagHEAPENTRY32(GetRecordPtr^).th32HeapID;
end;
function __tagHEAPLIST32__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagHEAPLIST32__Wrapper.setdwSize(const val : DWORD);
begin
tagHEAPLIST32(GetRecordPtr^).dwSize := val;
end;
function __tagHEAPLIST32__Wrapper.getdwSize : DWORD;
begin
result := tagHEAPLIST32(GetRecordPtr^).dwSize;
end;
procedure __tagHEAPLIST32__Wrapper.setth32ProcessID(const val : DWORD);
begin
tagHEAPLIST32(GetRecordPtr^).th32ProcessID := val;
end;
function __tagHEAPLIST32__Wrapper.getth32ProcessID : DWORD;
begin
result := tagHEAPLIST32(GetRecordPtr^).th32ProcessID;
end;
procedure __tagHEAPLIST32__Wrapper.setth32HeapID(const val : DWORD);
begin
tagHEAPLIST32(GetRecordPtr^).th32HeapID := val;
end;
function __tagHEAPLIST32__Wrapper.getth32HeapID : DWORD;
begin
result := tagHEAPLIST32(GetRecordPtr^).th32HeapID;
end;
procedure __tagHEAPLIST32__Wrapper.setdwFlags(const val : DWORD);
begin
tagHEAPLIST32(GetRecordPtr^).dwFlags := val;
end;
function __tagHEAPLIST32__Wrapper.getdwFlags : DWORD;
begin
result := tagHEAPLIST32(GetRecordPtr^).dwFlags;
end;
function __tagMODULEENTRY32__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMODULEENTRY32__Wrapper.setdwSize(const val : DWORD);
begin
tagMODULEENTRY32(GetRecordPtr^).dwSize := val;
end;
function __tagMODULEENTRY32__Wrapper.getdwSize : DWORD;
begin
result := tagMODULEENTRY32(GetRecordPtr^).dwSize;
end;
procedure __tagMODULEENTRY32__Wrapper.setth32ModuleID(const val : DWORD);
begin
tagMODULEENTRY32(GetRecordPtr^).th32ModuleID := val;
end;
function __tagMODULEENTRY32__Wrapper.getth32ModuleID : DWORD;
begin
result := tagMODULEENTRY32(GetRecordPtr^).th32ModuleID;
end;
procedure __tagMODULEENTRY32__Wrapper.setth32ProcessID(const val : DWORD);
begin
tagMODULEENTRY32(GetRecordPtr^).th32ProcessID := val;
end;
function __tagMODULEENTRY32__Wrapper.getth32ProcessID : DWORD;
begin
result := tagMODULEENTRY32(GetRecordPtr^).th32ProcessID;
end;
procedure __tagMODULEENTRY32__Wrapper.setGlblcntUsage(const val : DWORD);
begin
tagMODULEENTRY32(GetRecordPtr^).GlblcntUsage := val;
end;
function __tagMODULEENTRY32__Wrapper.getGlblcntUsage : DWORD;
begin
result := tagMODULEENTRY32(GetRecordPtr^).GlblcntUsage;
end;
procedure __tagMODULEENTRY32__Wrapper.setProccntUsage(const val : DWORD);
begin
tagMODULEENTRY32(GetRecordPtr^).ProccntUsage := val;
end;
function __tagMODULEENTRY32__Wrapper.getProccntUsage : DWORD;
begin
result := tagMODULEENTRY32(GetRecordPtr^).ProccntUsage;
end;
procedure __tagMODULEENTRY32__Wrapper.setmodBaseSize(const val : DWORD);
begin
tagMODULEENTRY32(GetRecordPtr^).modBaseSize := val;
end;
function __tagMODULEENTRY32__Wrapper.getmodBaseSize : DWORD;
begin
result := tagMODULEENTRY32(GetRecordPtr^).modBaseSize;
end;
procedure __tagMODULEENTRY32__Wrapper.sethModule(const val : hModule);
begin
tagMODULEENTRY32(GetRecordPtr^).hModule := val;
end;
function __tagMODULEENTRY32__Wrapper.gethModule : hModule;
begin
result := tagMODULEENTRY32(GetRecordPtr^).hModule;
end;
function __tagMODULEENTRY32W__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMODULEENTRY32W__Wrapper.setdwSize(const val : DWORD);
begin
tagMODULEENTRY32W(GetRecordPtr^).dwSize := val;
end;
function __tagMODULEENTRY32W__Wrapper.getdwSize : DWORD;
begin
result := tagMODULEENTRY32W(GetRecordPtr^).dwSize;
end;
procedure __tagMODULEENTRY32W__Wrapper.setth32ModuleID(const val : DWORD);
begin
tagMODULEENTRY32W(GetRecordPtr^).th32ModuleID := val;
end;
function __tagMODULEENTRY32W__Wrapper.getth32ModuleID : DWORD;
begin
result := tagMODULEENTRY32W(GetRecordPtr^).th32ModuleID;
end;
procedure __tagMODULEENTRY32W__Wrapper.setth32ProcessID(const val : DWORD);
begin
tagMODULEENTRY32W(GetRecordPtr^).th32ProcessID := val;
end;
function __tagMODULEENTRY32W__Wrapper.getth32ProcessID : DWORD;
begin
result := tagMODULEENTRY32W(GetRecordPtr^).th32ProcessID;
end;
procedure __tagMODULEENTRY32W__Wrapper.setGlblcntUsage(const val : DWORD);
begin
tagMODULEENTRY32W(GetRecordPtr^).GlblcntUsage := val;
end;
function __tagMODULEENTRY32W__Wrapper.getGlblcntUsage : DWORD;
begin
result := tagMODULEENTRY32W(GetRecordPtr^).GlblcntUsage;
end;
procedure __tagMODULEENTRY32W__Wrapper.setProccntUsage(const val : DWORD);
begin
tagMODULEENTRY32W(GetRecordPtr^).ProccntUsage := val;
end;
function __tagMODULEENTRY32W__Wrapper.getProccntUsage : DWORD;
begin
result := tagMODULEENTRY32W(GetRecordPtr^).ProccntUsage;
end;
procedure __tagMODULEENTRY32W__Wrapper.setmodBaseSize(const val : DWORD);
begin
tagMODULEENTRY32W(GetRecordPtr^).modBaseSize := val;
end;
function __tagMODULEENTRY32W__Wrapper.getmodBaseSize : DWORD;
begin
result := tagMODULEENTRY32W(GetRecordPtr^).modBaseSize;
end;
procedure __tagMODULEENTRY32W__Wrapper.sethModule(const val : hModule);
begin
tagMODULEENTRY32W(GetRecordPtr^).hModule := val;
end;
function __tagMODULEENTRY32W__Wrapper.gethModule : hModule;
begin
result := tagMODULEENTRY32W(GetRecordPtr^).hModule;
end;
function __tagPROCESSENTRY32__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagPROCESSENTRY32__Wrapper.setdwSize(const val : DWORD);
begin
tagPROCESSENTRY32(GetRecordPtr^).dwSize := val;
end;
function __tagPROCESSENTRY32__Wrapper.getdwSize : DWORD;
begin
result := tagPROCESSENTRY32(GetRecordPtr^).dwSize;
end;
procedure __tagPROCESSENTRY32__Wrapper.setcntUsage(const val : DWORD);
begin
tagPROCESSENTRY32(GetRecordPtr^).cntUsage := val;
end;
function __tagPROCESSENTRY32__Wrapper.getcntUsage : DWORD;
begin
result := tagPROCESSENTRY32(GetRecordPtr^).cntUsage;
end;
procedure __tagPROCESSENTRY32__Wrapper.setth32ProcessID(const val : DWORD);
begin
tagPROCESSENTRY32(GetRecordPtr^).th32ProcessID := val;
end;
function __tagPROCESSENTRY32__Wrapper.getth32ProcessID : DWORD;
begin
result := tagPROCESSENTRY32(GetRecordPtr^).th32ProcessID;
end;
procedure __tagPROCESSENTRY32__Wrapper.setth32DefaultHeapID(const val : DWORD);
begin
tagPROCESSENTRY32(GetRecordPtr^).th32DefaultHeapID := val;
end;
function __tagPROCESSENTRY32__Wrapper.getth32DefaultHeapID : DWORD;
begin
result := tagPROCESSENTRY32(GetRecordPtr^).th32DefaultHeapID;
end;
procedure __tagPROCESSENTRY32__Wrapper.setth32ModuleID(const val : DWORD);
begin
tagPROCESSENTRY32(GetRecordPtr^).th32ModuleID := val;
end;
function __tagPROCESSENTRY32__Wrapper.getth32ModuleID : DWORD;
begin
result := tagPROCESSENTRY32(GetRecordPtr^).th32ModuleID;
end;
procedure __tagPROCESSENTRY32__Wrapper.setcntThreads(const val : DWORD);
begin
tagPROCESSENTRY32(GetRecordPtr^).cntThreads := val;
end;
function __tagPROCESSENTRY32__Wrapper.getcntThreads : DWORD;
begin
result := tagPROCESSENTRY32(GetRecordPtr^).cntThreads;
end;
procedure __tagPROCESSENTRY32__Wrapper.setth32ParentProcessID(const val : DWORD);
begin
tagPROCESSENTRY32(GetRecordPtr^).th32ParentProcessID := val;
end;
function __tagPROCESSENTRY32__Wrapper.getth32ParentProcessID : DWORD;
begin
result := tagPROCESSENTRY32(GetRecordPtr^).th32ParentProcessID;
end;
procedure __tagPROCESSENTRY32__Wrapper.setpcPriClassBase(const val : Longint);
begin
tagPROCESSENTRY32(GetRecordPtr^).pcPriClassBase := val;
end;
function __tagPROCESSENTRY32__Wrapper.getpcPriClassBase : Longint;
begin
result := tagPROCESSENTRY32(GetRecordPtr^).pcPriClassBase;
end;
procedure __tagPROCESSENTRY32__Wrapper.setdwFlags(const val : DWORD);
begin
tagPROCESSENTRY32(GetRecordPtr^).dwFlags := val;
end;
function __tagPROCESSENTRY32__Wrapper.getdwFlags : DWORD;
begin
result := tagPROCESSENTRY32(GetRecordPtr^).dwFlags;
end;
function __tagPROCESSENTRY32W__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagPROCESSENTRY32W__Wrapper.setdwSize(const val : DWORD);
begin
tagPROCESSENTRY32W(GetRecordPtr^).dwSize := val;
end;
function __tagPROCESSENTRY32W__Wrapper.getdwSize : DWORD;
begin
result := tagPROCESSENTRY32W(GetRecordPtr^).dwSize;
end;
procedure __tagPROCESSENTRY32W__Wrapper.setcntUsage(const val : DWORD);
begin
tagPROCESSENTRY32W(GetRecordPtr^).cntUsage := val;
end;
function __tagPROCESSENTRY32W__Wrapper.getcntUsage : DWORD;
begin
result := tagPROCESSENTRY32W(GetRecordPtr^).cntUsage;
end;
procedure __tagPROCESSENTRY32W__Wrapper.setth32ProcessID(const val : DWORD);
begin
tagPROCESSENTRY32W(GetRecordPtr^).th32ProcessID := val;
end;
function __tagPROCESSENTRY32W__Wrapper.getth32ProcessID : DWORD;
begin
result := tagPROCESSENTRY32W(GetRecordPtr^).th32ProcessID;
end;
procedure __tagPROCESSENTRY32W__Wrapper.setth32DefaultHeapID(const val : DWORD);
begin
tagPROCESSENTRY32W(GetRecordPtr^).th32DefaultHeapID := val;
end;
function __tagPROCESSENTRY32W__Wrapper.getth32DefaultHeapID : DWORD;
begin
result := tagPROCESSENTRY32W(GetRecordPtr^).th32DefaultHeapID;
end;
procedure __tagPROCESSENTRY32W__Wrapper.setth32ModuleID(const val : DWORD);
begin
tagPROCESSENTRY32W(GetRecordPtr^).th32ModuleID := val;
end;
function __tagPROCESSENTRY32W__Wrapper.getth32ModuleID : DWORD;
begin
result := tagPROCESSENTRY32W(GetRecordPtr^).th32ModuleID;
end;
procedure __tagPROCESSENTRY32W__Wrapper.setcntThreads(const val : DWORD);
begin
tagPROCESSENTRY32W(GetRecordPtr^).cntThreads := val;
end;
function __tagPROCESSENTRY32W__Wrapper.getcntThreads : DWORD;
begin
result := tagPROCESSENTRY32W(GetRecordPtr^).cntThreads;
end;
procedure __tagPROCESSENTRY32W__Wrapper.setth32ParentProcessID(const val : DWORD);
begin
tagPROCESSENTRY32W(GetRecordPtr^).th32ParentProcessID := val;
end;
function __tagPROCESSENTRY32W__Wrapper.getth32ParentProcessID : DWORD;
begin
result := tagPROCESSENTRY32W(GetRecordPtr^).th32ParentProcessID;
end;
procedure __tagPROCESSENTRY32W__Wrapper.setpcPriClassBase(const val : Longint);
begin
tagPROCESSENTRY32W(GetRecordPtr^).pcPriClassBase := val;
end;
function __tagPROCESSENTRY32W__Wrapper.getpcPriClassBase : Longint;
begin
result := tagPROCESSENTRY32W(GetRecordPtr^).pcPriClassBase;
end;
procedure __tagPROCESSENTRY32W__Wrapper.setdwFlags(const val : DWORD);
begin
tagPROCESSENTRY32W(GetRecordPtr^).dwFlags := val;
end;
function __tagPROCESSENTRY32W__Wrapper.getdwFlags : DWORD;
begin
result := tagPROCESSENTRY32W(GetRecordPtr^).dwFlags;
end;
function __tagTHREADENTRY32__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTHREADENTRY32__Wrapper.setdwSize(const val : DWORD);
begin
tagTHREADENTRY32(GetRecordPtr^).dwSize := val;
end;
function __tagTHREADENTRY32__Wrapper.getdwSize : DWORD;
begin
result := tagTHREADENTRY32(GetRecordPtr^).dwSize;
end;
procedure __tagTHREADENTRY32__Wrapper.setcntUsage(const val : DWORD);
begin
tagTHREADENTRY32(GetRecordPtr^).cntUsage := val;
end;
function __tagTHREADENTRY32__Wrapper.getcntUsage : DWORD;
begin
result := tagTHREADENTRY32(GetRecordPtr^).cntUsage;
end;
procedure __tagTHREADENTRY32__Wrapper.setth32ThreadID(const val : DWORD);
begin
tagTHREADENTRY32(GetRecordPtr^).th32ThreadID := val;
end;
function __tagTHREADENTRY32__Wrapper.getth32ThreadID : DWORD;
begin
result := tagTHREADENTRY32(GetRecordPtr^).th32ThreadID;
end;
procedure __tagTHREADENTRY32__Wrapper.setth32OwnerProcessID(const val : DWORD);
begin
tagTHREADENTRY32(GetRecordPtr^).th32OwnerProcessID := val;
end;
function __tagTHREADENTRY32__Wrapper.getth32OwnerProcessID : DWORD;
begin
result := tagTHREADENTRY32(GetRecordPtr^).th32OwnerProcessID;
end;
procedure __tagTHREADENTRY32__Wrapper.settpBasePri(const val : Longint);
begin
tagTHREADENTRY32(GetRecordPtr^).tpBasePri := val;
end;
function __tagTHREADENTRY32__Wrapper.gettpBasePri : Longint;
begin
result := tagTHREADENTRY32(GetRecordPtr^).tpBasePri;
end;
procedure __tagTHREADENTRY32__Wrapper.settpDeltaPri(const val : Longint);
begin
tagTHREADENTRY32(GetRecordPtr^).tpDeltaPri := val;
end;
function __tagTHREADENTRY32__Wrapper.gettpDeltaPri : Longint;
begin
result := tagTHREADENTRY32(GetRecordPtr^).tpDeltaPri;
end;
procedure __tagTHREADENTRY32__Wrapper.setdwFlags(const val : DWORD);
begin
tagTHREADENTRY32(GetRecordPtr^).dwFlags := val;
end;
function __tagTHREADENTRY32__Wrapper.getdwFlags : DWORD;
begin
result := tagTHREADENTRY32(GetRecordPtr^).dwFlags;
end;
function __THeapEntry32__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __THeapEntry32__Wrapper.setdwSize(const val : DWORD);
begin
THeapEntry32(GetRecordPtr^).dwSize := val;
end;
function __THeapEntry32__Wrapper.getdwSize : DWORD;
begin
result := THeapEntry32(GetRecordPtr^).dwSize;
end;
procedure __THeapEntry32__Wrapper.sethHandle(const val : THandle);
begin
THeapEntry32(GetRecordPtr^).hHandle := val;
end;
function __THeapEntry32__Wrapper.gethHandle : THandle;
begin
result := THeapEntry32(GetRecordPtr^).hHandle;
end;
procedure __THeapEntry32__Wrapper.setdwAddress(const val : DWORD);
begin
THeapEntry32(GetRecordPtr^).dwAddress := val;
end;
function __THeapEntry32__Wrapper.getdwAddress : DWORD;
begin
result := THeapEntry32(GetRecordPtr^).dwAddress;
end;
procedure __THeapEntry32__Wrapper.setdwBlockSize(const val : DWORD);
begin
THeapEntry32(GetRecordPtr^).dwBlockSize := val;
end;
function __THeapEntry32__Wrapper.getdwBlockSize : DWORD;
begin
result := THeapEntry32(GetRecordPtr^).dwBlockSize;
end;
procedure __THeapEntry32__Wrapper.setdwFlags(const val : DWORD);
begin
THeapEntry32(GetRecordPtr^).dwFlags := val;
end;
function __THeapEntry32__Wrapper.getdwFlags : DWORD;
begin
result := THeapEntry32(GetRecordPtr^).dwFlags;
end;
procedure __THeapEntry32__Wrapper.setdwLockCount(const val : DWORD);
begin
THeapEntry32(GetRecordPtr^).dwLockCount := val;
end;
function __THeapEntry32__Wrapper.getdwLockCount : DWORD;
begin
result := THeapEntry32(GetRecordPtr^).dwLockCount;
end;
procedure __THeapEntry32__Wrapper.setdwResvd(const val : DWORD);
begin
THeapEntry32(GetRecordPtr^).dwResvd := val;
end;
function __THeapEntry32__Wrapper.getdwResvd : DWORD;
begin
result := THeapEntry32(GetRecordPtr^).dwResvd;
end;
procedure __THeapEntry32__Wrapper.setth32ProcessID(const val : DWORD);
begin
THeapEntry32(GetRecordPtr^).th32ProcessID := val;
end;
function __THeapEntry32__Wrapper.getth32ProcessID : DWORD;
begin
result := THeapEntry32(GetRecordPtr^).th32ProcessID;
end;
procedure __THeapEntry32__Wrapper.setth32HeapID(const val : DWORD);
begin
THeapEntry32(GetRecordPtr^).th32HeapID := val;
end;
function __THeapEntry32__Wrapper.getth32HeapID : DWORD;
begin
result := THeapEntry32(GetRecordPtr^).th32HeapID;
end;
function __THeapList32__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __THeapList32__Wrapper.setdwSize(const val : DWORD);
begin
THeapList32(GetRecordPtr^).dwSize := val;
end;
function __THeapList32__Wrapper.getdwSize : DWORD;
begin
result := THeapList32(GetRecordPtr^).dwSize;
end;
procedure __THeapList32__Wrapper.setth32ProcessID(const val : DWORD);
begin
THeapList32(GetRecordPtr^).th32ProcessID := val;
end;
function __THeapList32__Wrapper.getth32ProcessID : DWORD;
begin
result := THeapList32(GetRecordPtr^).th32ProcessID;
end;
procedure __THeapList32__Wrapper.setth32HeapID(const val : DWORD);
begin
THeapList32(GetRecordPtr^).th32HeapID := val;
end;
function __THeapList32__Wrapper.getth32HeapID : DWORD;
begin
result := THeapList32(GetRecordPtr^).th32HeapID;
end;
procedure __THeapList32__Wrapper.setdwFlags(const val : DWORD);
begin
THeapList32(GetRecordPtr^).dwFlags := val;
end;
function __THeapList32__Wrapper.getdwFlags : DWORD;
begin
result := THeapList32(GetRecordPtr^).dwFlags;
end;
function __THREADENTRY32__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __THREADENTRY32__Wrapper.setdwSize(const val : DWORD);
begin
THREADENTRY32(GetRecordPtr^).dwSize := val;
end;
function __THREADENTRY32__Wrapper.getdwSize : DWORD;
begin
result := THREADENTRY32(GetRecordPtr^).dwSize;
end;
procedure __THREADENTRY32__Wrapper.setcntUsage(const val : DWORD);
begin
THREADENTRY32(GetRecordPtr^).cntUsage := val;
end;
function __THREADENTRY32__Wrapper.getcntUsage : DWORD;
begin
result := THREADENTRY32(GetRecordPtr^).cntUsage;
end;
procedure __THREADENTRY32__Wrapper.setth32ThreadID(const val : DWORD);
begin
THREADENTRY32(GetRecordPtr^).th32ThreadID := val;
end;
function __THREADENTRY32__Wrapper.getth32ThreadID : DWORD;
begin
result := THREADENTRY32(GetRecordPtr^).th32ThreadID;
end;
procedure __THREADENTRY32__Wrapper.setth32OwnerProcessID(const val : DWORD);
begin
THREADENTRY32(GetRecordPtr^).th32OwnerProcessID := val;
end;
function __THREADENTRY32__Wrapper.getth32OwnerProcessID : DWORD;
begin
result := THREADENTRY32(GetRecordPtr^).th32OwnerProcessID;
end;
procedure __THREADENTRY32__Wrapper.settpBasePri(const val : Longint);
begin
THREADENTRY32(GetRecordPtr^).tpBasePri := val;
end;
function __THREADENTRY32__Wrapper.gettpBasePri : Longint;
begin
result := THREADENTRY32(GetRecordPtr^).tpBasePri;
end;
procedure __THREADENTRY32__Wrapper.settpDeltaPri(const val : Longint);
begin
THREADENTRY32(GetRecordPtr^).tpDeltaPri := val;
end;
function __THREADENTRY32__Wrapper.gettpDeltaPri : Longint;
begin
result := THREADENTRY32(GetRecordPtr^).tpDeltaPri;
end;
procedure __THREADENTRY32__Wrapper.setdwFlags(const val : DWORD);
begin
THREADENTRY32(GetRecordPtr^).dwFlags := val;
end;
function __THREADENTRY32__Wrapper.getdwFlags : DWORD;
begin
result := THREADENTRY32(GetRecordPtr^).dwFlags;
end;
function __TModuleEntry32__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TModuleEntry32__Wrapper.setdwSize(const val : DWORD);
begin
TModuleEntry32(GetRecordPtr^).dwSize := val;
end;
function __TModuleEntry32__Wrapper.getdwSize : DWORD;
begin
result := TModuleEntry32(GetRecordPtr^).dwSize;
end;
procedure __TModuleEntry32__Wrapper.setth32ModuleID(const val : DWORD);
begin
TModuleEntry32(GetRecordPtr^).th32ModuleID := val;
end;
function __TModuleEntry32__Wrapper.getth32ModuleID : DWORD;
begin
result := TModuleEntry32(GetRecordPtr^).th32ModuleID;
end;
procedure __TModuleEntry32__Wrapper.setth32ProcessID(const val : DWORD);
begin
TModuleEntry32(GetRecordPtr^).th32ProcessID := val;
end;
function __TModuleEntry32__Wrapper.getth32ProcessID : DWORD;
begin
result := TModuleEntry32(GetRecordPtr^).th32ProcessID;
end;
procedure __TModuleEntry32__Wrapper.setGlblcntUsage(const val : DWORD);
begin
TModuleEntry32(GetRecordPtr^).GlblcntUsage := val;
end;
function __TModuleEntry32__Wrapper.getGlblcntUsage : DWORD;
begin
result := TModuleEntry32(GetRecordPtr^).GlblcntUsage;
end;
procedure __TModuleEntry32__Wrapper.setProccntUsage(const val : DWORD);
begin
TModuleEntry32(GetRecordPtr^).ProccntUsage := val;
end;
function __TModuleEntry32__Wrapper.getProccntUsage : DWORD;
begin
result := TModuleEntry32(GetRecordPtr^).ProccntUsage;
end;
procedure __TModuleEntry32__Wrapper.setmodBaseSize(const val : DWORD);
begin
TModuleEntry32(GetRecordPtr^).modBaseSize := val;
end;
function __TModuleEntry32__Wrapper.getmodBaseSize : DWORD;
begin
result := TModuleEntry32(GetRecordPtr^).modBaseSize;
end;
procedure __TModuleEntry32__Wrapper.sethModule(const val : hModule);
begin
TModuleEntry32(GetRecordPtr^).hModule := val;
end;
function __TModuleEntry32__Wrapper.gethModule : hModule;
begin
result := TModuleEntry32(GetRecordPtr^).hModule;
end;
function __TModuleEntry32W__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TModuleEntry32W__Wrapper.setdwSize(const val : DWORD);
begin
TModuleEntry32W(GetRecordPtr^).dwSize := val;
end;
function __TModuleEntry32W__Wrapper.getdwSize : DWORD;
begin
result := TModuleEntry32W(GetRecordPtr^).dwSize;
end;
procedure __TModuleEntry32W__Wrapper.setth32ModuleID(const val : DWORD);
begin
TModuleEntry32W(GetRecordPtr^).th32ModuleID := val;
end;
function __TModuleEntry32W__Wrapper.getth32ModuleID : DWORD;
begin
result := TModuleEntry32W(GetRecordPtr^).th32ModuleID;
end;
procedure __TModuleEntry32W__Wrapper.setth32ProcessID(const val : DWORD);
begin
TModuleEntry32W(GetRecordPtr^).th32ProcessID := val;
end;
function __TModuleEntry32W__Wrapper.getth32ProcessID : DWORD;
begin
result := TModuleEntry32W(GetRecordPtr^).th32ProcessID;
end;
procedure __TModuleEntry32W__Wrapper.setGlblcntUsage(const val : DWORD);
begin
TModuleEntry32W(GetRecordPtr^).GlblcntUsage := val;
end;
function __TModuleEntry32W__Wrapper.getGlblcntUsage : DWORD;
begin
result := TModuleEntry32W(GetRecordPtr^).GlblcntUsage;
end;
procedure __TModuleEntry32W__Wrapper.setProccntUsage(const val : DWORD);
begin
TModuleEntry32W(GetRecordPtr^).ProccntUsage := val;
end;
function __TModuleEntry32W__Wrapper.getProccntUsage : DWORD;
begin
result := TModuleEntry32W(GetRecordPtr^).ProccntUsage;
end;
procedure __TModuleEntry32W__Wrapper.setmodBaseSize(const val : DWORD);
begin
TModuleEntry32W(GetRecordPtr^).modBaseSize := val;
end;
function __TModuleEntry32W__Wrapper.getmodBaseSize : DWORD;
begin
result := TModuleEntry32W(GetRecordPtr^).modBaseSize;
end;
procedure __TModuleEntry32W__Wrapper.sethModule(const val : hModule);
begin
TModuleEntry32W(GetRecordPtr^).hModule := val;
end;
function __TModuleEntry32W__Wrapper.gethModule : hModule;
begin
result := TModuleEntry32W(GetRecordPtr^).hModule;
end;
function __TProcessEntry32__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TProcessEntry32__Wrapper.setdwSize(const val : DWORD);
begin
TProcessEntry32(GetRecordPtr^).dwSize := val;
end;
function __TProcessEntry32__Wrapper.getdwSize : DWORD;
begin
result := TProcessEntry32(GetRecordPtr^).dwSize;
end;
procedure __TProcessEntry32__Wrapper.setcntUsage(const val : DWORD);
begin
TProcessEntry32(GetRecordPtr^).cntUsage := val;
end;
function __TProcessEntry32__Wrapper.getcntUsage : DWORD;
begin
result := TProcessEntry32(GetRecordPtr^).cntUsage;
end;
procedure __TProcessEntry32__Wrapper.setth32ProcessID(const val : DWORD);
begin
TProcessEntry32(GetRecordPtr^).th32ProcessID := val;
end;
function __TProcessEntry32__Wrapper.getth32ProcessID : DWORD;
begin
result := TProcessEntry32(GetRecordPtr^).th32ProcessID;
end;
procedure __TProcessEntry32__Wrapper.setth32DefaultHeapID(const val : DWORD);
begin
TProcessEntry32(GetRecordPtr^).th32DefaultHeapID := val;
end;
function __TProcessEntry32__Wrapper.getth32DefaultHeapID : DWORD;
begin
result := TProcessEntry32(GetRecordPtr^).th32DefaultHeapID;
end;
procedure __TProcessEntry32__Wrapper.setth32ModuleID(const val : DWORD);
begin
TProcessEntry32(GetRecordPtr^).th32ModuleID := val;
end;
function __TProcessEntry32__Wrapper.getth32ModuleID : DWORD;
begin
result := TProcessEntry32(GetRecordPtr^).th32ModuleID;
end;
procedure __TProcessEntry32__Wrapper.setcntThreads(const val : DWORD);
begin
TProcessEntry32(GetRecordPtr^).cntThreads := val;
end;
function __TProcessEntry32__Wrapper.getcntThreads : DWORD;
begin
result := TProcessEntry32(GetRecordPtr^).cntThreads;
end;
procedure __TProcessEntry32__Wrapper.setth32ParentProcessID(const val : DWORD);
begin
TProcessEntry32(GetRecordPtr^).th32ParentProcessID := val;
end;
function __TProcessEntry32__Wrapper.getth32ParentProcessID : DWORD;
begin
result := TProcessEntry32(GetRecordPtr^).th32ParentProcessID;
end;
procedure __TProcessEntry32__Wrapper.setpcPriClassBase(const val : Longint);
begin
TProcessEntry32(GetRecordPtr^).pcPriClassBase := val;
end;
function __TProcessEntry32__Wrapper.getpcPriClassBase : Longint;
begin
result := TProcessEntry32(GetRecordPtr^).pcPriClassBase;
end;
procedure __TProcessEntry32__Wrapper.setdwFlags(const val : DWORD);
begin
TProcessEntry32(GetRecordPtr^).dwFlags := val;
end;
function __TProcessEntry32__Wrapper.getdwFlags : DWORD;
begin
result := TProcessEntry32(GetRecordPtr^).dwFlags;
end;
function __TProcessEntry32W__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TProcessEntry32W__Wrapper.setdwSize(const val : DWORD);
begin
TProcessEntry32W(GetRecordPtr^).dwSize := val;
end;
function __TProcessEntry32W__Wrapper.getdwSize : DWORD;
begin
result := TProcessEntry32W(GetRecordPtr^).dwSize;
end;
procedure __TProcessEntry32W__Wrapper.setcntUsage(const val : DWORD);
begin
TProcessEntry32W(GetRecordPtr^).cntUsage := val;
end;
function __TProcessEntry32W__Wrapper.getcntUsage : DWORD;
begin
result := TProcessEntry32W(GetRecordPtr^).cntUsage;
end;
procedure __TProcessEntry32W__Wrapper.setth32ProcessID(const val : DWORD);
begin
TProcessEntry32W(GetRecordPtr^).th32ProcessID := val;
end;
function __TProcessEntry32W__Wrapper.getth32ProcessID : DWORD;
begin
result := TProcessEntry32W(GetRecordPtr^).th32ProcessID;
end;
procedure __TProcessEntry32W__Wrapper.setth32DefaultHeapID(const val : DWORD);
begin
TProcessEntry32W(GetRecordPtr^).th32DefaultHeapID := val;
end;
function __TProcessEntry32W__Wrapper.getth32DefaultHeapID : DWORD;
begin
result := TProcessEntry32W(GetRecordPtr^).th32DefaultHeapID;
end;
procedure __TProcessEntry32W__Wrapper.setth32ModuleID(const val : DWORD);
begin
TProcessEntry32W(GetRecordPtr^).th32ModuleID := val;
end;
function __TProcessEntry32W__Wrapper.getth32ModuleID : DWORD;
begin
result := TProcessEntry32W(GetRecordPtr^).th32ModuleID;
end;
procedure __TProcessEntry32W__Wrapper.setcntThreads(const val : DWORD);
begin
TProcessEntry32W(GetRecordPtr^).cntThreads := val;
end;
function __TProcessEntry32W__Wrapper.getcntThreads : DWORD;
begin
result := TProcessEntry32W(GetRecordPtr^).cntThreads;
end;
procedure __TProcessEntry32W__Wrapper.setth32ParentProcessID(const val : DWORD);
begin
TProcessEntry32W(GetRecordPtr^).th32ParentProcessID := val;
end;
function __TProcessEntry32W__Wrapper.getth32ParentProcessID : DWORD;
begin
result := TProcessEntry32W(GetRecordPtr^).th32ParentProcessID;
end;
procedure __TProcessEntry32W__Wrapper.setpcPriClassBase(const val : Longint);
begin
TProcessEntry32W(GetRecordPtr^).pcPriClassBase := val;
end;
function __TProcessEntry32W__Wrapper.getpcPriClassBase : Longint;
begin
result := TProcessEntry32W(GetRecordPtr^).pcPriClassBase;
end;
procedure __TProcessEntry32W__Wrapper.setdwFlags(const val : DWORD);
begin
TProcessEntry32W(GetRecordPtr^).dwFlags := val;
end;
function __TProcessEntry32W__Wrapper.getdwFlags : DWORD;
begin
result := TProcessEntry32W(GetRecordPtr^).dwFlags;
end;
function __TThreadEntry32__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TThreadEntry32__Wrapper.setdwSize(const val : DWORD);
begin
TThreadEntry32(GetRecordPtr^).dwSize := val;
end;
function __TThreadEntry32__Wrapper.getdwSize : DWORD;
begin
result := TThreadEntry32(GetRecordPtr^).dwSize;
end;
procedure __TThreadEntry32__Wrapper.setcntUsage(const val : DWORD);
begin
TThreadEntry32(GetRecordPtr^).cntUsage := val;
end;
function __TThreadEntry32__Wrapper.getcntUsage : DWORD;
begin
result := TThreadEntry32(GetRecordPtr^).cntUsage;
end;
procedure __TThreadEntry32__Wrapper.setth32ThreadID(const val : DWORD);
begin
TThreadEntry32(GetRecordPtr^).th32ThreadID := val;
end;
function __TThreadEntry32__Wrapper.getth32ThreadID : DWORD;
begin
result := TThreadEntry32(GetRecordPtr^).th32ThreadID;
end;
procedure __TThreadEntry32__Wrapper.setth32OwnerProcessID(const val : DWORD);
begin
TThreadEntry32(GetRecordPtr^).th32OwnerProcessID := val;
end;
function __TThreadEntry32__Wrapper.getth32OwnerProcessID : DWORD;
begin
result := TThreadEntry32(GetRecordPtr^).th32OwnerProcessID;
end;
procedure __TThreadEntry32__Wrapper.settpBasePri(const val : Longint);
begin
TThreadEntry32(GetRecordPtr^).tpBasePri := val;
end;
function __TThreadEntry32__Wrapper.gettpBasePri : Longint;
begin
result := TThreadEntry32(GetRecordPtr^).tpBasePri;
end;
procedure __TThreadEntry32__Wrapper.settpDeltaPri(const val : Longint);
begin
TThreadEntry32(GetRecordPtr^).tpDeltaPri := val;
end;
function __TThreadEntry32__Wrapper.gettpDeltaPri : Longint;
begin
result := TThreadEntry32(GetRecordPtr^).tpDeltaPri;
end;
procedure __TThreadEntry32__Wrapper.setdwFlags(const val : DWORD);
begin
TThreadEntry32(GetRecordPtr^).dwFlags := val;
end;
function __TThreadEntry32__Wrapper.getdwFlags : DWORD;
begin
result := TThreadEntry32(GetRecordPtr^).dwFlags;
end;
function _HEAPENTRY32_ : IDispatch;
begin
  result := __HEAPENTRY32__Wrapper.Create;
end;
function _HEAPLIST32_ : IDispatch;
begin
  result := __HEAPLIST32__Wrapper.Create;
end;
function _MODULEENTRY32_ : IDispatch;
begin
  result := __MODULEENTRY32__Wrapper.Create;
end;
function _MODULEENTRY32W_ : IDispatch;
begin
  result := __MODULEENTRY32W__Wrapper.Create;
end;
function _PROCESSENTRY32_ : IDispatch;
begin
  result := __PROCESSENTRY32__Wrapper.Create;
end;
function _PROCESSENTRY32W_ : IDispatch;
begin
  result := __PROCESSENTRY32W__Wrapper.Create;
end;
function _tagHEAPENTRY32_ : IDispatch;
begin
  result := __tagHEAPENTRY32__Wrapper.Create;
end;
function _tagHEAPLIST32_ : IDispatch;
begin
  result := __tagHEAPLIST32__Wrapper.Create;
end;
function _tagMODULEENTRY32_ : IDispatch;
begin
  result := __tagMODULEENTRY32__Wrapper.Create;
end;
function _tagMODULEENTRY32W_ : IDispatch;
begin
  result := __tagMODULEENTRY32W__Wrapper.Create;
end;
function _tagPROCESSENTRY32_ : IDispatch;
begin
  result := __tagPROCESSENTRY32__Wrapper.Create;
end;
function _tagPROCESSENTRY32W_ : IDispatch;
begin
  result := __tagPROCESSENTRY32W__Wrapper.Create;
end;
function _tagTHREADENTRY32_ : IDispatch;
begin
  result := __tagTHREADENTRY32__Wrapper.Create;
end;
function _THeapEntry32_ : IDispatch;
begin
  result := __THeapEntry32__Wrapper.Create;
end;
function _THeapList32_ : IDispatch;
begin
  result := __THeapList32__Wrapper.Create;
end;
function _THREADENTRY32_ : IDispatch;
begin
  result := __THREADENTRY32__Wrapper.Create;
end;
function _TModuleEntry32_ : IDispatch;
begin
  result := __TModuleEntry32__Wrapper.Create;
end;
function _TModuleEntry32W_ : IDispatch;
begin
  result := __TModuleEntry32W__Wrapper.Create;
end;
function _TProcessEntry32_ : IDispatch;
begin
  result := __TProcessEntry32__Wrapper.Create;
end;
function _TProcessEntry32W_ : IDispatch;
begin
  result := __TProcessEntry32W__Wrapper.Create;
end;
function _TThreadEntry32_ : IDispatch;
begin
  result := __TThreadEntry32__Wrapper.Create;
end;
function ____Heap32ListFirst__Wrapper(p0 : THandle;
const p1 : IDispatch): BOOL;
var
__p1 : ^THeapList32;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := Heap32ListFirst(p0,__p1^);
end;

function ____Heap32ListNext__Wrapper(p0 : THandle;
const p1 : IDispatch): BOOL;
var
__p1 : ^THeapList32;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := Heap32ListNext(p0,__p1^);
end;

function ____Heap32First__Wrapper(const p0 : IDispatch;
p1 : DWORD;
p2 : DWORD): BOOL;
var
__p0 : ^THeapEntry32;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := Heap32First(__p0^,p1,p2);
end;

function ____Heap32Next__Wrapper(const p0 : IDispatch): BOOL;
var
__p0 : ^THeapEntry32;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := Heap32Next(__p0^);
end;

function ____Process32FirstW__Wrapper(p0 : THandle;
const p1 : IDispatch): BOOL;
var
__p1 : ^TProcessEntry32W;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := Process32FirstW(p0,__p1^);
end;

function ____Process32NextW__Wrapper(p0 : THandle;
const p1 : IDispatch): BOOL;
var
__p1 : ^TProcessEntry32W;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := Process32NextW(p0,__p1^);
end;

function ____Process32First__Wrapper(p0 : THandle;
const p1 : IDispatch): BOOL;
var
__p1 : ^TProcessEntry32;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := Process32First(p0,__p1^);
end;

function ____Process32Next__Wrapper(p0 : THandle;
const p1 : IDispatch): BOOL;
var
__p1 : ^TProcessEntry32;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := Process32Next(p0,__p1^);
end;

function ____Thread32First__Wrapper(p0 : THandle;
const p1 : IDispatch): BOOL;
var
__p1 : ^TThreadEntry32;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := Thread32First(p0,__p1^);
end;

function ____Thread32Next__Wrapper(p0 : THandle;
const p1 : IDispatch): BOOL;
var
__p1 : ^TThreadEntry32;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := Thread32Next(p0,__p1^);
end;

function ____Module32First__Wrapper(p0 : THandle;
const p1 : IDispatch): BOOL;
var
__p1 : ^TModuleEntry32;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := Module32First(p0,__p1^);
end;

function ____Module32Next__Wrapper(p0 : THandle;
const p1 : IDispatch): BOOL;
var
__p1 : ^TModuleEntry32;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := Module32Next(p0,__p1^);
end;

function ____Module32FirstW__Wrapper(p0 : THandle;
const p1 : IDispatch): BOOL;
var
__p1 : ^TModuleEntry32W;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := Module32FirstW(p0,__p1^);
end;

function ____Module32NextW__Wrapper(p0 : THandle;
const p1 : IDispatch): BOOL;
var
__p1 : ^TModuleEntry32W;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := Module32NextW(p0,__p1^);
end;


type __HEAPENTRY32__Wrapper__ = class(__HEAPENTRY32__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __HEAPENTRY32__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertHEAPENTRY32ToVariant(var R : HEAPENTRY32) : OleVariant;
var
__rw : __HEAPENTRY32__Wrapper__;
begin
__rw := __HEAPENTRY32__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToHEAPENTRY32(const V : OleVariant) : HEAPENTRY32;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := HEAPENTRY32((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __HEAPLIST32__Wrapper__ = class(__HEAPLIST32__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __HEAPLIST32__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertHEAPLIST32ToVariant(var R : HEAPLIST32) : OleVariant;
var
__rw : __HEAPLIST32__Wrapper__;
begin
__rw := __HEAPLIST32__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToHEAPLIST32(const V : OleVariant) : HEAPLIST32;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := HEAPLIST32((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MODULEENTRY32__Wrapper__ = class(__MODULEENTRY32__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MODULEENTRY32__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMODULEENTRY32ToVariant(var R : MODULEENTRY32) : OleVariant;
var
__rw : __MODULEENTRY32__Wrapper__;
begin
__rw := __MODULEENTRY32__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMODULEENTRY32(const V : OleVariant) : MODULEENTRY32;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MODULEENTRY32((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MODULEENTRY32W__Wrapper__ = class(__MODULEENTRY32W__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MODULEENTRY32W__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMODULEENTRY32WToVariant(var R : MODULEENTRY32W) : OleVariant;
var
__rw : __MODULEENTRY32W__Wrapper__;
begin
__rw := __MODULEENTRY32W__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMODULEENTRY32W(const V : OleVariant) : MODULEENTRY32W;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MODULEENTRY32W((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __PROCESSENTRY32__Wrapper__ = class(__PROCESSENTRY32__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __PROCESSENTRY32__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertPROCESSENTRY32ToVariant(var R : PROCESSENTRY32) : OleVariant;
var
__rw : __PROCESSENTRY32__Wrapper__;
begin
__rw := __PROCESSENTRY32__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToPROCESSENTRY32(const V : OleVariant) : PROCESSENTRY32;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := PROCESSENTRY32((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __PROCESSENTRY32W__Wrapper__ = class(__PROCESSENTRY32W__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __PROCESSENTRY32W__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertPROCESSENTRY32WToVariant(var R : PROCESSENTRY32W) : OleVariant;
var
__rw : __PROCESSENTRY32W__Wrapper__;
begin
__rw := __PROCESSENTRY32W__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToPROCESSENTRY32W(const V : OleVariant) : PROCESSENTRY32W;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := PROCESSENTRY32W((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagHEAPENTRY32__Wrapper__ = class(__tagHEAPENTRY32__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagHEAPENTRY32__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagHEAPENTRY32ToVariant(var R : tagHEAPENTRY32) : OleVariant;
var
__rw : __tagHEAPENTRY32__Wrapper__;
begin
__rw := __tagHEAPENTRY32__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagHEAPENTRY32(const V : OleVariant) : tagHEAPENTRY32;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagHEAPENTRY32((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagHEAPLIST32__Wrapper__ = class(__tagHEAPLIST32__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagHEAPLIST32__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagHEAPLIST32ToVariant(var R : tagHEAPLIST32) : OleVariant;
var
__rw : __tagHEAPLIST32__Wrapper__;
begin
__rw := __tagHEAPLIST32__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagHEAPLIST32(const V : OleVariant) : tagHEAPLIST32;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagHEAPLIST32((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMODULEENTRY32__Wrapper__ = class(__tagMODULEENTRY32__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMODULEENTRY32__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMODULEENTRY32ToVariant(var R : tagMODULEENTRY32) : OleVariant;
var
__rw : __tagMODULEENTRY32__Wrapper__;
begin
__rw := __tagMODULEENTRY32__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMODULEENTRY32(const V : OleVariant) : tagMODULEENTRY32;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMODULEENTRY32((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMODULEENTRY32W__Wrapper__ = class(__tagMODULEENTRY32W__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMODULEENTRY32W__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMODULEENTRY32WToVariant(var R : tagMODULEENTRY32W) : OleVariant;
var
__rw : __tagMODULEENTRY32W__Wrapper__;
begin
__rw := __tagMODULEENTRY32W__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMODULEENTRY32W(const V : OleVariant) : tagMODULEENTRY32W;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMODULEENTRY32W((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagPROCESSENTRY32__Wrapper__ = class(__tagPROCESSENTRY32__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagPROCESSENTRY32__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagPROCESSENTRY32ToVariant(var R : tagPROCESSENTRY32) : OleVariant;
var
__rw : __tagPROCESSENTRY32__Wrapper__;
begin
__rw := __tagPROCESSENTRY32__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagPROCESSENTRY32(const V : OleVariant) : tagPROCESSENTRY32;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagPROCESSENTRY32((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagPROCESSENTRY32W__Wrapper__ = class(__tagPROCESSENTRY32W__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagPROCESSENTRY32W__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagPROCESSENTRY32WToVariant(var R : tagPROCESSENTRY32W) : OleVariant;
var
__rw : __tagPROCESSENTRY32W__Wrapper__;
begin
__rw := __tagPROCESSENTRY32W__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagPROCESSENTRY32W(const V : OleVariant) : tagPROCESSENTRY32W;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagPROCESSENTRY32W((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTHREADENTRY32__Wrapper__ = class(__tagTHREADENTRY32__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTHREADENTRY32__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTHREADENTRY32ToVariant(var R : tagTHREADENTRY32) : OleVariant;
var
__rw : __tagTHREADENTRY32__Wrapper__;
begin
__rw := __tagTHREADENTRY32__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTHREADENTRY32(const V : OleVariant) : tagTHREADENTRY32;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTHREADENTRY32((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __THeapEntry32__Wrapper__ = class(__THeapEntry32__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __THeapEntry32__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTHeapEntry32ToVariant(var R : THeapEntry32) : OleVariant;
var
__rw : __THeapEntry32__Wrapper__;
begin
__rw := __THeapEntry32__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTHeapEntry32(const V : OleVariant) : THeapEntry32;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := THeapEntry32((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __THeapList32__Wrapper__ = class(__THeapList32__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __THeapList32__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTHeapList32ToVariant(var R : THeapList32) : OleVariant;
var
__rw : __THeapList32__Wrapper__;
begin
__rw := __THeapList32__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTHeapList32(const V : OleVariant) : THeapList32;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := THeapList32((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __THREADENTRY32__Wrapper__ = class(__THREADENTRY32__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __THREADENTRY32__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTHREADENTRY32ToVariant(var R : THREADENTRY32) : OleVariant;
var
__rw : __THREADENTRY32__Wrapper__;
begin
__rw := __THREADENTRY32__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTHREADENTRY32(const V : OleVariant) : THREADENTRY32;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := THREADENTRY32((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TModuleEntry32__Wrapper__ = class(__TModuleEntry32__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TModuleEntry32__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTModuleEntry32ToVariant(var R : TModuleEntry32) : OleVariant;
var
__rw : __TModuleEntry32__Wrapper__;
begin
__rw := __TModuleEntry32__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTModuleEntry32(const V : OleVariant) : TModuleEntry32;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TModuleEntry32((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TModuleEntry32W__Wrapper__ = class(__TModuleEntry32W__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TModuleEntry32W__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTModuleEntry32WToVariant(var R : TModuleEntry32W) : OleVariant;
var
__rw : __TModuleEntry32W__Wrapper__;
begin
__rw := __TModuleEntry32W__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTModuleEntry32W(const V : OleVariant) : TModuleEntry32W;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TModuleEntry32W((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TProcessEntry32__Wrapper__ = class(__TProcessEntry32__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TProcessEntry32__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTProcessEntry32ToVariant(var R : TProcessEntry32) : OleVariant;
var
__rw : __TProcessEntry32__Wrapper__;
begin
__rw := __TProcessEntry32__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTProcessEntry32(const V : OleVariant) : TProcessEntry32;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TProcessEntry32((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TProcessEntry32W__Wrapper__ = class(__TProcessEntry32W__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TProcessEntry32W__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTProcessEntry32WToVariant(var R : TProcessEntry32W) : OleVariant;
var
__rw : __TProcessEntry32W__Wrapper__;
begin
__rw := __TProcessEntry32W__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTProcessEntry32W(const V : OleVariant) : TProcessEntry32W;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TProcessEntry32W((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TThreadEntry32__Wrapper__ = class(__TThreadEntry32__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TThreadEntry32__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTThreadEntry32ToVariant(var R : TThreadEntry32) : OleVariant;
var
__rw : __TThreadEntry32__Wrapper__;
begin
__rw := __TThreadEntry32__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTThreadEntry32(const V : OleVariant) : TThreadEntry32;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TThreadEntry32((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..10] of string = (
'MAX_MODULE_NAME32'
,'TH32CS_SNAPHEAPLIST'
,'TH32CS_SNAPPROCESS'
,'TH32CS_SNAPTHREAD'
,'TH32CS_SNAPMODULE'
,'TH32CS_INHERIT'
,'HF32_DEFAULT'
,'HF32_SHARED'
,'LF32_FIXED'
,'LF32_FREE'
,'LF32_MOVEABLE'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,MAX_MODULE_NAME32));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,TH32CS_SNAPHEAPLIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,TH32CS_SNAPPROCESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,TH32CS_SNAPTHREAD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,TH32CS_SNAPMODULE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,TH32CS_INHERIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,HF32_DEFAULT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,HF32_SHARED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,LF32_FIXED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,LF32_FREE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,LF32_MOVEABLE));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..36] of string = (
'HEAPENTRY32'
,'HEAPLIST32'
,'MODULEENTRY32'
,'MODULEENTRY32W'
,'PROCESSENTRY32'
,'PROCESSENTRY32W'
,'tagHEAPENTRY32'
,'tagHEAPLIST32'
,'tagMODULEENTRY32'
,'tagMODULEENTRY32W'
,'tagPROCESSENTRY32'
,'tagPROCESSENTRY32W'
,'tagTHREADENTRY32'
,'THeapEntry32'
,'THeapList32'
,'THREADENTRY32'
,'TModuleEntry32'
,'TModuleEntry32W'
,'TProcessEntry32'
,'TProcessEntry32W'
,'TThreadEntry32'
,'CreateToolhelp32Snapshot'
,'Heap32ListFirst'
,'Heap32ListNext'
,'Heap32First'
,'Heap32Next'
,'Toolhelp32ReadProcessMemory'
,'Process32FirstW'
,'Process32NextW'
,'Process32First'
,'Process32Next'
,'Thread32First'
,'Thread32Next'
,'Module32First'
,'Module32Next'
,'Module32FirstW'
,'Module32NextW'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_HEAPENTRY32_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_HEAPLIST32_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_MODULEENTRY32_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(_MODULEENTRY32W_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(_PROCESSENTRY32_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[5],Addr(_PROCESSENTRY32W_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[6],Addr(_tagHEAPENTRY32_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[7],Addr(_tagHEAPLIST32_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[8],Addr(_tagMODULEENTRY32_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[9],Addr(_tagMODULEENTRY32W_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[10],Addr(_tagPROCESSENTRY32_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[11],Addr(_tagPROCESSENTRY32W_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[12],Addr(_tagTHREADENTRY32_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[13],Addr(_THeapEntry32_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[14],Addr(_THeapList32_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[15],Addr(_THREADENTRY32_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[16],Addr(_TModuleEntry32_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[17],Addr(_TModuleEntry32W_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[18],Addr(_TProcessEntry32_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[19],Addr(_TProcessEntry32W_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[20],Addr(_TThreadEntry32_)));
RegisterProc(nil,MethodNames[21],mtProc,TypeInfo(_T0),[
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(THandle)],Addr(CreateToolhelp32Snapshot),cRegister);

RegisterProc(nil,MethodNames[22],mtProc,TypeInfo(_T1),[
TypeInfo(THandle),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____Heap32ListFirst__Wrapper),cRegister);

RegisterProc(nil,MethodNames[23],mtProc,TypeInfo(_T2),[
TypeInfo(THandle),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____Heap32ListNext__Wrapper),cRegister);

RegisterProc(nil,MethodNames[24],mtProc,TypeInfo(_T3),[
TypeInfo(IDispatch),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(____Heap32First__Wrapper),cRegister);

RegisterProc(nil,MethodNames[25],mtProc,TypeInfo(_T4),[
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____Heap32Next__Wrapper),cRegister);

RegisterProc(nil,MethodNames[26],mtProc,TypeInfo(_T5),[
TypeInfo(DWORD),
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(Toolhelp32ReadProcessMemory),cRegister);

RegisterProc(nil,MethodNames[27],mtProc,TypeInfo(_T6),[
TypeInfo(THandle),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____Process32FirstW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[28],mtProc,TypeInfo(_T7),[
TypeInfo(THandle),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____Process32NextW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[29],mtProc,TypeInfo(_T8),[
TypeInfo(THandle),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____Process32First__Wrapper),cRegister);

RegisterProc(nil,MethodNames[30],mtProc,TypeInfo(_T9),[
TypeInfo(THandle),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____Process32Next__Wrapper),cRegister);

RegisterProc(nil,MethodNames[31],mtProc,TypeInfo(_T10),[
TypeInfo(THandle),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____Thread32First__Wrapper),cRegister);

RegisterProc(nil,MethodNames[32],mtProc,TypeInfo(_T11),[
TypeInfo(THandle),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____Thread32Next__Wrapper),cRegister);

RegisterProc(nil,MethodNames[33],mtProc,TypeInfo(_T12),[
TypeInfo(THandle),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____Module32First__Wrapper),cRegister);

RegisterProc(nil,MethodNames[34],mtProc,TypeInfo(_T13),[
TypeInfo(THandle),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____Module32Next__Wrapper),cRegister);

RegisterProc(nil,MethodNames[35],mtProc,TypeInfo(_T14),[
TypeInfo(THandle),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____Module32FirstW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[36],mtProc,TypeInfo(_T15),[
TypeInfo(THandle),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____Module32NextW__Wrapper),cRegister);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
