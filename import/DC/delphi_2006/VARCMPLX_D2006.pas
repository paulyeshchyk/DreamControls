{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit VARCMPLX_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Variants,
  VarCmplx;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = function : Variant of object;

_T1 = function : TVarType of object;

_T2 = function (const p0 : Variant): Boolean of object;

_T3 = function (const p0 : Variant): Variant of object;

_T4 = _T3;

_T5 = function (const p0 : Variant): Double of object;

_T6 = _T5;

_T7 = _T5;

_T8 = _T3;

_T9 = _T3;

_T10 = _T3;

_T11 = _T3;

_T12 = _T3;

_T13 = _T3;

_T14 = _T3;

_T15 = function (const p0 : Variant;
const p1 : Double): Variant of object;

_T16 = _T3;

_T17 = _T3;

_T18 = function (const p0 : Variant;
const p1 : Variant): Variant of object;

_T19 = _T3;

_T20 = _T3;

_T21 = _T15;

_T22 = _T15;

_T23 = _T3;

_T24 = _T3;

_T25 = _T3;

_T26 = _T3;

_T27 = _T3;

_T28 = _T3;

_T29 = _T3;

_T30 = _T3;

_T31 = _T3;

_T32 = _T3;

_T33 = _T3;

_T34 = _T3;

_T35 = _T3;

_T36 = _T3;

_T37 = _T3;

_T38 = _T3;

_T39 = _T3;

_T40 = _T3;

_T41 = _T3;

_T42 = _T3;

_T43 = _T3;

_T44 = _T3;

_T45 = _T3;

_T46 = _T3;

_T48 = function (const p0 : Double;
const p1 : Double): Variant of object;

procedure __RegisterProps;
begin
end;

function __DC__GetVarCmplx__ComplexNumberSymbol(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarCmplx.ComplexNumberSymbol;
end;

procedure __DC__SetVarCmplx__ComplexNumberSymbol(Instance : TObject; Params : PVariantArgList);
begin
VarCmplx.ComplexNumberSymbol:=OleVariant(Params^[0]);
end;

function __DC__GetVarCmplx__ComplexNumberSymbolBeforeImaginary(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarCmplx.ComplexNumberSymbolBeforeImaginary;
end;

procedure __DC__SetVarCmplx__ComplexNumberSymbolBeforeImaginary(Instance : TObject; Params : PVariantArgList);
begin
VarCmplx.ComplexNumberSymbolBeforeImaginary:=OleVariant(Params^[0]);
end;

function __DC__GetVarCmplx__ComplexNumberDefuzzAtZero(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarCmplx.ComplexNumberDefuzzAtZero;
end;

procedure __DC__SetVarCmplx__ComplexNumberDefuzzAtZero(Instance : TObject; Params : PVariantArgList);
begin
VarCmplx.ComplexNumberDefuzzAtZero:=OleVariant(Params^[0]);
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('ComplexNumberSymbol',__DC__GetVarCmplx__ComplexNumberSymbol,__DC__SetVarCmplx__ComplexNumberSymbol));
__RegisteredVars.Add(RegisterVar('ComplexNumberSymbolBeforeImaginary',__DC__GetVarCmplx__ComplexNumberSymbolBeforeImaginary,__DC__SetVarCmplx__ComplexNumberSymbolBeforeImaginary));
__RegisteredVars.Add(RegisterVar('ComplexNumberDefuzzAtZero',__DC__GetVarCmplx__ComplexNumberDefuzzAtZero,__DC__SetVarCmplx__ComplexNumberDefuzzAtZero));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..47] of string = (
'VarComplexCreate'
,'VarComplex'
,'VarIsComplex'
,'VarAsComplex'
,'VarComplexSimplify'
,'VarComplexAbsSqr'
,'VarComplexAbs'
,'VarComplexAngle'
,'VarComplexSign'
,'VarComplexConjugate'
,'VarComplexInverse'
,'VarComplexExp'
,'VarComplexLn'
,'VarComplexLog2'
,'VarComplexLog10'
,'VarComplexLogN'
,'VarComplexSqr'
,'VarComplexSqrt'
,'VarComplexPower'
,'VarComplexTimesPosI'
,'VarComplexTimesNegI'
,'VarComplexTimesImaginary'
,'VarComplexTimesReal'
,'VarComplexCos'
,'VarComplexSin'
,'VarComplexTan'
,'VarComplexCot'
,'VarComplexSec'
,'VarComplexCsc'
,'VarComplexArcCos'
,'VarComplexArcSin'
,'VarComplexArcTan'
,'VarComplexArcCot'
,'VarComplexArcSec'
,'VarComplexArcCsc'
,'VarComplexCosH'
,'VarComplexSinH'
,'VarComplexTanH'
,'VarComplexCotH'
,'VarComplexSecH'
,'VarComplexCscH'
,'VarComplexArcCosH'
,'VarComplexArcSinH'
,'VarComplexArcTanH'
,'VarComplexArcCotH'
,'VarComplexArcSecH'
,'VarComplexArcCscH'
,'VarComplexFromPolar'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[TypeInfo(Variant)],Addr(VarComplexCreate),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[TypeInfo(TVarType)],Addr(VarComplex),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T2),[
TypeInfo(Variant),TypeInfo(Boolean)],Addr(VarIsComplex),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T3),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarAsComplex),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T4),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexSimplify),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T5),[
TypeInfo(Variant),TypeInfo(Double)],Addr(VarComplexAbsSqr),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T6),[
TypeInfo(Variant),TypeInfo(Double)],Addr(VarComplexAbs),cRegister);

RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T7),[
TypeInfo(Variant),TypeInfo(Double)],Addr(VarComplexAngle),cRegister);

RegisterProc(nil,MethodNames[8],mtProc,TypeInfo(_T8),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexSign),cRegister);

RegisterProc(nil,MethodNames[9],mtProc,TypeInfo(_T9),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexConjugate),cRegister);

RegisterProc(nil,MethodNames[10],mtProc,TypeInfo(_T10),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexInverse),cRegister);

RegisterProc(nil,MethodNames[11],mtProc,TypeInfo(_T11),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexExp),cRegister);

RegisterProc(nil,MethodNames[12],mtProc,TypeInfo(_T12),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexLn),cRegister);

RegisterProc(nil,MethodNames[13],mtProc,TypeInfo(_T13),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexLog2),cRegister);

RegisterProc(nil,MethodNames[14],mtProc,TypeInfo(_T14),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexLog10),cRegister);

RegisterProc(nil,MethodNames[15],mtProc,TypeInfo(_T15),[
TypeInfo(Variant),
TypeInfo(Double),TypeInfo(Variant)],Addr(VarComplexLogN),cRegister);

RegisterProc(nil,MethodNames[16],mtProc,TypeInfo(_T16),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexSqr),cRegister);

RegisterProc(nil,MethodNames[17],mtProc,TypeInfo(_T17),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexSqrt),cRegister);

RegisterProc(nil,MethodNames[18],mtProc,TypeInfo(_T18),[
TypeInfo(Variant),
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexPower),cRegister);

RegisterProc(nil,MethodNames[19],mtProc,TypeInfo(_T19),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexTimesPosI),cRegister);

RegisterProc(nil,MethodNames[20],mtProc,TypeInfo(_T20),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexTimesNegI),cRegister);

RegisterProc(nil,MethodNames[21],mtProc,TypeInfo(_T21),[
TypeInfo(Variant),
TypeInfo(Double),TypeInfo(Variant)],Addr(VarComplexTimesImaginary),cRegister);

RegisterProc(nil,MethodNames[22],mtProc,TypeInfo(_T22),[
TypeInfo(Variant),
TypeInfo(Double),TypeInfo(Variant)],Addr(VarComplexTimesReal),cRegister);

RegisterProc(nil,MethodNames[23],mtProc,TypeInfo(_T23),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexCos),cRegister);

RegisterProc(nil,MethodNames[24],mtProc,TypeInfo(_T24),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexSin),cRegister);

RegisterProc(nil,MethodNames[25],mtProc,TypeInfo(_T25),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexTan),cRegister);

RegisterProc(nil,MethodNames[26],mtProc,TypeInfo(_T26),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexCot),cRegister);

RegisterProc(nil,MethodNames[27],mtProc,TypeInfo(_T27),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexSec),cRegister);

RegisterProc(nil,MethodNames[28],mtProc,TypeInfo(_T28),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexCsc),cRegister);

RegisterProc(nil,MethodNames[29],mtProc,TypeInfo(_T29),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexArcCos),cRegister);

RegisterProc(nil,MethodNames[30],mtProc,TypeInfo(_T30),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexArcSin),cRegister);

RegisterProc(nil,MethodNames[31],mtProc,TypeInfo(_T31),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexArcTan),cRegister);

RegisterProc(nil,MethodNames[32],mtProc,TypeInfo(_T32),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexArcCot),cRegister);

RegisterProc(nil,MethodNames[33],mtProc,TypeInfo(_T33),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexArcSec),cRegister);

RegisterProc(nil,MethodNames[34],mtProc,TypeInfo(_T34),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexArcCsc),cRegister);

RegisterProc(nil,MethodNames[35],mtProc,TypeInfo(_T35),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexCosH),cRegister);

RegisterProc(nil,MethodNames[36],mtProc,TypeInfo(_T36),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexSinH),cRegister);

RegisterProc(nil,MethodNames[37],mtProc,TypeInfo(_T37),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexTanH),cRegister);

RegisterProc(nil,MethodNames[38],mtProc,TypeInfo(_T38),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexCotH),cRegister);

RegisterProc(nil,MethodNames[39],mtProc,TypeInfo(_T39),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexSecH),cRegister);

RegisterProc(nil,MethodNames[40],mtProc,TypeInfo(_T40),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexCscH),cRegister);

RegisterProc(nil,MethodNames[41],mtProc,TypeInfo(_T41),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexArcCosH),cRegister);

RegisterProc(nil,MethodNames[42],mtProc,TypeInfo(_T42),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexArcSinH),cRegister);

RegisterProc(nil,MethodNames[43],mtProc,TypeInfo(_T43),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexArcTanH),cRegister);

RegisterProc(nil,MethodNames[44],mtProc,TypeInfo(_T44),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexArcCotH),cRegister);

RegisterProc(nil,MethodNames[45],mtProc,TypeInfo(_T45),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexArcSecH),cRegister);

RegisterProc(nil,MethodNames[46],mtProc,TypeInfo(_T46),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarComplexArcCscH),cRegister);

RegisterProc(nil,MethodNames[47],mtProc,TypeInfo(_T48),[
TypeInfo(Double),
TypeInfo(Double),TypeInfo(Variant)],Addr(VarComplexFromPolar),cRegister);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
