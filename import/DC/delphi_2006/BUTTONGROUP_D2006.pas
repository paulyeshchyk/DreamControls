{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit BUTTONGROUP_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  Types,
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  SysUtils,
  Classes,
  Controls,
  ImgList,
  Forms,
  Messages,
  Graphics,
  StdCtrls,
  CategoryButtons,
  ButtonGroup;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TRect__Wrapper = class(TDCRecordWrapper)
private
fR : TRect;
public
function GetRecordPtr : pointer; override;
published
procedure setLeft(const val : Longint);
function getLeft : Longint;
property Left : Longint read getLeft write setLeft;
procedure setTop(const val : Longint);
function getTop : Longint;
property Top : Longint read getTop write setTop;
procedure setRight(const val : Longint);
function getRight : Longint;
property Right : Longint read getRight write setRight;
procedure setBottom(const val : Longint);
function getBottom : Longint;
property Bottom : Longint read getBottom write setBottom;
end;
type __TButtonGroup__ = class(TButtonGroup);
type
_T0 = function : TGrpButtonItem of object;

_T1 = procedure  of object;

_T2 = procedure (p0 : Integer;
p1 : TCanvas;
const p2 : IDispatch;
p3 : TButtonDrawState) of object;

_T3 = procedure (const p0 : Integer) of object;

{_T4 = function : TGrpButtonItemClass of object;}

{_T5 = function : TGrpButtonItemsClass of object;}

_T6 = function (const p0 : Integer): IDispatch of object;

_T7 = function (const p0 : Integer;
const p1 : Integer): Integer of object;

_T8 = _T1;

_T9 = _T3;

_T10 = _T3;

_T11 = _T7;

_T12 = procedure (const p0 : TButtonGroup) of object;

_T13 = _T0;

_T14 = function (p0 : TGrpButtonItem;
p1 : Integer): TGrpButtonItem of object;

_T15 = function (p0 : Integer): TGrpButtonItem of object;

function __TRect__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRect__Wrapper.setLeft(const val : Longint);
begin
TRect(GetRecordPtr^).Left := val;
end;
function __TRect__Wrapper.getLeft : Longint;
begin
result := TRect(GetRecordPtr^).Left;
end;
procedure __TRect__Wrapper.setTop(const val : Longint);
begin
TRect(GetRecordPtr^).Top := val;
end;
function __TRect__Wrapper.getTop : Longint;
begin
result := TRect(GetRecordPtr^).Top;
end;
procedure __TRect__Wrapper.setRight(const val : Longint);
begin
TRect(GetRecordPtr^).Right := val;
end;
function __TRect__Wrapper.getRight : Longint;
begin
result := TRect(GetRecordPtr^).Right;
end;
procedure __TRect__Wrapper.setBottom(const val : Longint);
begin
TRect(GetRecordPtr^).Bottom := val;
end;
function __TRect__Wrapper.getBottom : Longint;
begin
result := TRect(GetRecordPtr^).Bottom;
end;
procedure __TButtonGroup__DrawButton__Wrapper(__Instance : TButtonGroup;
p0 : Integer;
p1 : TCanvas;
const p2 : IDispatch;
p3 : TButtonDrawState);
var
__p2 : ^TRect;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
__TButtonGroup__(__Instance).DrawButton(p0,p1,__p2^,p3);
end;

function __TButtonGroup__GetButtonRect__Wrapper(__Instance : TButtonGroup;
const p0 : Integer): IDispatch;
var
__result : TRect;
__wrapper : __TRect__Wrapper;
begin
__result := TButtonGroup(__Instance).GetButtonRect(p0);
__wrapper := __TRect__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;


type __TRect__Wrapper__ = class(__TRect__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRect__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
var
__rw : __TRect__Wrapper__;
begin
__rw := __TRect__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRect((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTButtonGroup__DragIndex(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TButtonGroup(Instance).DragIndex;
end;

procedure __DC__SetTButtonGroup__DragIndex(Instance : TObject; Params : PVariantArgList);
begin
TButtonGroup(Instance).DragIndex:=OleVariant(Params^[0]);
end;

function __DC__GetTButtonGroup__DragImageList(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TButtonGroup(Instance).DragImageList);
end;

function __DC__GetTButtonGroup__Canvas(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TButtonGroup(Instance).Canvas);
end;

function __DC__GetTGrpButtonItem__Collection(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TGrpButtonItem(Instance).Collection);
end;

procedure __DC__SetTGrpButtonItem__Collection(Instance : TObject; Params : PVariantArgList);
begin
TGrpButtonItem(Instance).Collection:=TGrpButtonItems(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTGrpButtonItems__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TGrpButtonItems(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __DC__SetTGrpButtonItems__Items(Instance : TObject; Params : PVariantArgList);
begin
TGrpButtonItems(Instance).Items[OleVariant(Params^[1])]:=TGrpButtonItem(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTGrpButtonItems__ButtonGroup(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TGrpButtonItems(Instance).ButtonGroup);
end;

procedure __RegisterProps;
begin
RegisterProperty(TButtonGroup,'DragIndex',__DC__GetTButtonGroup__DragIndex,__DC__SetTButtonGroup__DragIndex);
RegisterProperty(TButtonGroup,'DragImageList',__DC__GetTButtonGroup__DragImageList,nil);
RegisterProperty(TButtonGroup,'Canvas',__DC__GetTButtonGroup__Canvas,nil);
RegisterProperty(TGrpButtonItem,'Collection',__DC__GetTGrpButtonItem__Collection,__DC__SetTGrpButtonItem__Collection);
RegisterIndexedProperty(TGrpButtonItems,'Items',1,True,__DC__GetTGrpButtonItems__Items,__DC__SetTGrpButtonItems__Items);
RegisterProperty(TGrpButtonItems,'ButtonGroup',__DC__GetTGrpButtonItems__ButtonGroup,nil);
end;

const __ConstNames0 : array[0..3] of string = (
'gboAllowReorder'
,'gboFullSize'
,'gboGroupStyle'
,'gboShowCaptions'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,gboAllowReorder));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,gboFullSize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,gboGroupStyle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,gboShowCaptions));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..2] of TClass = (
TButtonGroup,
TGrpButtonItem,
TGrpButtonItems
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TButtonGroup,'CreateButton',TypeInfo(_T0),[TypeInfo(TGrpButtonItem)], pointer(220));
RegRegisterMethod(TButtonGroup,'CreateButton',TypeInfo(_T0),[TypeInfo(TGrpButtonItem)],  getVMTProcAddr('TButtonGroup','CreateButton',220));


RegRegisterMethod(TButtonGroup,'DoHotButton',TypeInfo(_T1),NoParams, pointer(MinVMTOffset - 79));

//RegRegisterMethod(TButtonGroup,'DrawButton',TypeInfo(_T2),[TypeInfo(Integer),TypeInfo(TCanvas),TypeInfo(IDispatch),TypeInfo(TButtonDrawState)], pointer(224));
RegRegisterMethod(TButtonGroup,'DrawButton',TypeInfo(_T2),[TypeInfo(Integer),TypeInfo(TCanvas),TypeInfo(IDispatch),TypeInfo(TButtonDrawState)],  getVMTProcAddr('TButtonGroup','DrawButton',224));


//RegRegisterMethod(TButtonGroup,'DoItemClicked',TypeInfo(_T3),[TypeInfo(Integer)], pointer(228));
RegRegisterMethod(TButtonGroup,'DoItemClicked',TypeInfo(_T3),[TypeInfo(Integer)],  getVMTProcAddr('TButtonGroup','DoItemClicked',228));


RegRegisterMethod(TButtonGroup,'GetButtonRect',TypeInfo(_T6),[
TypeInfo(Integer),TypeInfo(IDispatch)],Addr(__TButtonGroup__GetButtonRect__Wrapper));

RegRegisterMethod(TButtonGroup,'IndexOfButtonAt',TypeInfo(_T7),[
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Integer)],Addr(TButtonGroup.IndexOfButtonAt));

RegRegisterMethod(TButtonGroup,'RemoveInsertionPoints',TypeInfo(_T8),NoParams,Addr(TButtonGroup.RemoveInsertionPoints));

RegRegisterMethod(TButtonGroup,'ScrollIntoView',TypeInfo(_T9),[
TypeInfo(Integer)],Addr(TButtonGroup.ScrollIntoView));

RegRegisterMethod(TButtonGroup,'SetInsertionPoints',TypeInfo(_T10),[
TypeInfo(Integer)],Addr(TButtonGroup.SetInsertionPoints));

RegRegisterMethod(TButtonGroup,'TargetIndexAt',TypeInfo(_T11),[
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Integer)],Addr(TButtonGroup.TargetIndexAt));

RegisterProc(TGrpButtonItems,'Create',mtConstructor,TypeInfo(_T12),[
TypeInfo(TButtonGroup)],Addr(TGrpButtonItems.Create),cRegister);

RegRegisterMethod(TGrpButtonItems,'Add',TypeInfo(_T13),[TypeInfo(TGrpButtonItem)],Addr(TGrpButtonItems.Add));

RegRegisterMethod(TGrpButtonItems,'AddItem',TypeInfo(_T14),[
TypeInfo(TGrpButtonItem),
TypeInfo(Integer),TypeInfo(TGrpButtonItem)],Addr(TGrpButtonItems.AddItem));

RegRegisterMethod(TGrpButtonItems,'Insert',TypeInfo(_T15),[
TypeInfo(Integer),TypeInfo(TGrpButtonItem)],Addr(TGrpButtonItems.Insert));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
{RegRegisterMethod(TButtonGroup,'GetButtonClass',TypeInfo(_T4),[TypeInfo(TGrpButtonItemClass)], pointer(232))}

{RegRegisterMethod(TButtonGroup,'GetButtonsClass',TypeInfo(_T5),[TypeInfo(TGrpButtonItemsClass)], pointer(236))}

{RegisterEvent(TypeInfo(TGrpButtonDrawEvent),[
TypeInfo(TObject),
TypeInfo(Integer),
TypeInfo(TCanvas),
TypeInfo(IDispatch),
TypeInfo(TButtonDrawState)]);}

{RegisterEvent(TypeInfo(TGrpButtonDrawIconEvent),[
TypeInfo(TObject),
TypeInfo(Integer),
TypeInfo(TCanvas),
TypeInfo(IDispatch),
TypeInfo(TButtonDrawState),
TypeInfo(Integer)]);}

RegisterEvent(TypeInfo(TGrpButtonEvent),[
TypeInfo(TObject),
TypeInfo(Integer)]);

RegisterEvent(TypeInfo(TGrpButtonReorderEvent),[
TypeInfo(TObject),
TypeInfo(Integer),
TypeInfo(Integer)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
