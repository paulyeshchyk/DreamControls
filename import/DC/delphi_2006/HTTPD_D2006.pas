{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit HTTPD_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  WinSock,
  HTTPD;
function ConvertBUFFToVariant(var R : BUFF) : OleVariant;
function ConvertVariantToBUFF(const V : OleVariant) : BUFF;
function Convertcmd_parmsToVariant(var R : cmd_parms) : OleVariant;
function ConvertVariantTocmd_parms(const V : OleVariant) : cmd_parms;
function Convertcommand_recToVariant(var R : command_rec) : OleVariant;
function ConvertVariantTocommand_rec(const V : OleVariant) : command_rec;
function Convertconfigfile_tToVariant(var R : configfile_t) : OleVariant;
function ConvertVariantToconfigfile_t(const V : OleVariant) : configfile_t;
function Convertconn_recToVariant(var R : conn_rec) : OleVariant;
function ConvertVariantToconn_rec(const V : OleVariant) : conn_rec;
function Converthandler_recToVariant(var R : handler_rec) : OleVariant;
function ConvertVariantTohandler_rec(const V : OleVariant) : handler_rec;
function Converthtaccess_resultToVariant(var R : htaccess_result) : OleVariant;
function ConvertVariantTohtaccess_result(const V : OleVariant) : htaccess_result;
function ConvertmoduleToVariant(var R : module) : OleVariant;
function ConvertVariantTomodule(const V : OleVariant) : module;
function Convertmodule_structToVariant(var R : module_struct) : OleVariant;
function ConvertVariantTomodule_struct(const V : OleVariant) : module_struct;
function Convertregex_tToVariant(var R : regex_t) : OleVariant;
function ConvertVariantToregex_t(const V : OleVariant) : regex_t;
function Convertrequest_recToVariant(var R : request_rec) : OleVariant;
function ConvertVariantTorequest_rec(const V : OleVariant) : request_rec;
function Convertserver_recToVariant(var R : server_rec) : OleVariant;
function ConvertVariantToserver_rec(const V : OleVariant) : server_rec;
function ConvertSPerDirToVariant(var R : SPerDir) : OleVariant;
function ConvertVariantToSPerDir(const V : OleVariant) : SPerDir;
function ConvertSPerServerToVariant(var R : SPerServer) : OleVariant;
function ConvertVariantToSPerServer(const V : OleVariant) : SPerServer;
function ConvertstatToVariant(var R : stat) : OleVariant;
function ConvertVariantTostat(const V : OleVariant) : stat;
function Converturi_componentsToVariant(var R : uri_components) : OleVariant;
function ConvertVariantTouri_components(const V : OleVariant) : uri_components;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __BUFF__Wrapper = class(TDCRecordWrapper)
private
fR : BUFF;
public
function GetRecordPtr : pointer; override;
published
end;
type __cmd_parms__Wrapper = class(TDCRecordWrapper)
private
fR : cmd_parms;
public
function GetRecordPtr : pointer; override;
published
procedure setoverride(const val : ap_int);
function getoverride : ap_int;
property override : ap_int read getoverride write setoverride;
procedure setlimited(const val : ap_int);
function getlimited : ap_int;
property limited : ap_int read getlimited write setlimited;
end;
type __command_rec__Wrapper = class(TDCRecordWrapper)
private
fR : command_rec;
public
function GetRecordPtr : pointer; override;
published
procedure setreq_override(const val : Integer);
function getreq_override : Integer;
property req_override : Integer read getreq_override write setreq_override;
procedure setargs_how(const val : cmd_how);
function getargs_how : cmd_how;
property args_how : cmd_how read getargs_how write setargs_how;
end;
type __configfile_t__Wrapper = class(TDCRecordWrapper)
private
fR : configfile_t;
public
function GetRecordPtr : pointer; override;
published
procedure setline_number(const val : ap_unsigned);
function getline_number : ap_unsigned;
property line_number : ap_unsigned read getline_number write setline_number;
end;
type __conn_rec__Wrapper = class(TDCRecordWrapper)
private
fR : conn_rec;
public
function GetRecordPtr : pointer; override;
published
procedure setchild_num(const val : Integer);
function getchild_num : Integer;
property child_num : Integer read getchild_num write setchild_num;
procedure setflags(const val : Integer);
function getflags : Integer;
property flags : Integer read getflags write setflags;
procedure setkeepalives(const val : Integer);
function getkeepalives : Integer;
property keepalives : Integer read getkeepalives write setkeepalives;
end;
type __handler_rec__Wrapper = class(TDCRecordWrapper)
private
fR : handler_rec;
public
function GetRecordPtr : pointer; override;
published
end;
type __htaccess_result__Wrapper = class(TDCRecordWrapper)
private
fR : htaccess_result;
public
function GetRecordPtr : pointer; override;
published
procedure setoverride(const val : ap_int);
function getoverride : ap_int;
property override : ap_int read getoverride write setoverride;
end;
type __module__Wrapper = class(TDCRecordWrapper)
private
fR : module;
public
function GetRecordPtr : pointer; override;
published
procedure setversion(const val : Integer);
function getversion : Integer;
property version : Integer read getversion write setversion;
procedure setminor_version(const val : Integer);
function getminor_version : Integer;
property minor_version : Integer read getminor_version write setminor_version;
procedure setmodule_index(const val : Integer);
function getmodule_index : Integer;
property module_index : Integer read getmodule_index write setmodule_index;
procedure setmagic(const val : Integer);
function getmagic : Integer;
property magic : Integer read getmagic write setmagic;
end;
type __module_struct__Wrapper = class(TDCRecordWrapper)
private
fR : module_struct;
public
function GetRecordPtr : pointer; override;
published
procedure setversion(const val : Integer);
function getversion : Integer;
property version : Integer read getversion write setversion;
procedure setminor_version(const val : Integer);
function getminor_version : Integer;
property minor_version : Integer read getminor_version write setminor_version;
procedure setmodule_index(const val : Integer);
function getmodule_index : Integer;
property module_index : Integer read getmodule_index write setmodule_index;
procedure setmagic(const val : Integer);
function getmagic : Integer;
property magic : Integer read getmagic write setmagic;
end;
type __regex_t__Wrapper = class(TDCRecordWrapper)
private
fR : regex_t;
public
function GetRecordPtr : pointer; override;
published
procedure setre_magic(const val : ap_int);
function getre_magic : ap_int;
property re_magic : ap_int read getre_magic write setre_magic;
procedure setre_nsub(const val : size_t);
function getre_nsub : size_t;
property re_nsub : size_t read getre_nsub write setre_nsub;
end;
type __request_rec__Wrapper = class(TDCRecordWrapper)
private
fR : request_rec;
public
function GetRecordPtr : pointer; override;
published
procedure setbackwards(const val : ap_int);
function getbackwards : ap_int;
property backwards : ap_int read getbackwards write setbackwards;
procedure setproxyreq(const val : ap_int);
function getproxyreq : ap_int;
property proxyreq : ap_int read getproxyreq write setproxyreq;
procedure setheader_only(const val : ap_int);
function getheader_only : ap_int;
property header_only : ap_int read getheader_only write setheader_only;
procedure setproto_num(const val : ap_int);
function getproto_num : ap_int;
property proto_num : ap_int read getproto_num write setproto_num;
procedure setrequest_time(const val : time_t);
function getrequest_time : time_t;
property request_time : time_t read getrequest_time write setrequest_time;
procedure setstatus(const val : ap_int);
function getstatus : ap_int;
property status : ap_int read getstatus write setstatus;
procedure setmethod_number(const val : ap_int);
function getmethod_number : ap_int;
property method_number : ap_int read getmethod_number write setmethod_number;
procedure setallowed(const val : ap_int);
function getallowed : ap_int;
property allowed : ap_int read getallowed write setallowed;
procedure setsent_bodyct(const val : ap_int);
function getsent_bodyct : ap_int;
property sent_bodyct : ap_int read getsent_bodyct write setsent_bodyct;
procedure setbytes_sent(const val : ap_long);
function getbytes_sent : ap_long;
property bytes_sent : ap_long read getbytes_sent write setbytes_sent;
procedure setmtime(const val : time_t);
function getmtime : time_t;
property mtime : time_t read getmtime write setmtime;
procedure setchunked(const val : ap_int);
function getchunked : ap_int;
property chunked : ap_int read getchunked write setchunked;
procedure setbyterange(const val : ap_int);
function getbyterange : ap_int;
property byterange : ap_int read getbyterange write setbyterange;
procedure setclength(const val : ap_long);
function getclength : ap_long;
property clength : ap_long read getclength write setclength;
procedure setremaining(const val : ap_long);
function getremaining : ap_long;
property remaining : ap_long read getremaining write setremaining;
procedure setread_length(const val : ap_long);
function getread_length : ap_long;
property read_length : ap_long read getread_length write setread_length;
procedure setread_body(const val : ap_int);
function getread_body : ap_int;
property read_body : ap_int read getread_body write setread_body;
procedure setread_chunked(const val : ap_int);
function getread_chunked : ap_int;
property read_chunked : ap_int read getread_chunked write setread_chunked;
procedure setexpecting_100(const val : ap_unsigned);
function getexpecting_100 : ap_unsigned;
property expecting_100 : ap_unsigned read getexpecting_100 write setexpecting_100;
procedure setno_cache(const val : ap_int);
function getno_cache : ap_int;
property no_cache : ap_int read getno_cache write setno_cache;
procedure setno_local_copy(const val : ap_int);
function getno_local_copy : ap_int;
property no_local_copy : ap_int read getno_local_copy write setno_local_copy;
end;
type __server_rec__Wrapper = class(TDCRecordWrapper)
private
fR : server_rec;
public
function GetRecordPtr : pointer; override;
published
procedure setdefn_line_number(const val : ap_unsigned);
function getdefn_line_number : ap_unsigned;
property defn_line_number : ap_unsigned read getdefn_line_number write setdefn_line_number;
procedure setport(const val : ap_unsignedshort);
function getport : ap_unsignedshort;
property port : ap_unsignedshort read getport write setport;
procedure setloglevel(const val : ap_int);
function getloglevel : ap_int;
property loglevel : ap_int read getloglevel write setloglevel;
procedure setis_virtual(const val : ap_int);
function getis_virtual : ap_int;
property is_virtual : ap_int read getis_virtual write setis_virtual;
procedure settimeout(const val : ap_int);
function gettimeout : ap_int;
property timeout : ap_int read gettimeout write settimeout;
procedure setkeep_alive_timeout(const val : ap_int);
function getkeep_alive_timeout : ap_int;
property keep_alive_timeout : ap_int read getkeep_alive_timeout write setkeep_alive_timeout;
procedure setkeep_alive_max(const val : ap_int);
function getkeep_alive_max : ap_int;
property keep_alive_max : ap_int read getkeep_alive_max write setkeep_alive_max;
procedure setkeep_alive(const val : ap_int);
function getkeep_alive : ap_int;
property keep_alive : ap_int read getkeep_alive write setkeep_alive;
procedure setsend_buffer_size(const val : ap_int);
function getsend_buffer_size : ap_int;
property send_buffer_size : ap_int read getsend_buffer_size write setsend_buffer_size;
procedure setpathlen(const val : ap_int);
function getpathlen : ap_int;
property pathlen : ap_int read getpathlen write setpathlen;
procedure setserver_uid(const val : uid_t);
function getserver_uid : uid_t;
property server_uid : uid_t read getserver_uid write setserver_uid;
procedure setserver_gid(const val : gid_t);
function getserver_gid : gid_t;
property server_gid : gid_t read getserver_gid write setserver_gid;
procedure setlimit_req_line(const val : ap_int);
function getlimit_req_line : ap_int;
property limit_req_line : ap_int read getlimit_req_line write setlimit_req_line;
procedure setlimit_req_fieldsize(const val : ap_int);
function getlimit_req_fieldsize : ap_int;
property limit_req_fieldsize : ap_int read getlimit_req_fieldsize write setlimit_req_fieldsize;
procedure setlimit_req_fields(const val : ap_int);
function getlimit_req_fields : ap_int;
property limit_req_fields : ap_int read getlimit_req_fields write setlimit_req_fields;
end;
type __SPerDir__Wrapper = class(TDCRecordWrapper)
private
fR : SPerDir;
public
function GetRecordPtr : pointer; override;
published
end;
type __SPerServer__Wrapper = class(TDCRecordWrapper)
private
fR : SPerServer;
public
function GetRecordPtr : pointer; override;
published
end;
type __stat__Wrapper = class(TDCRecordWrapper)
private
fR : stat;
public
function GetRecordPtr : pointer; override;
published
procedure setst_dev(const val : Word);
function getst_dev : Word;
property st_dev : Word read getst_dev write setst_dev;
procedure setst_ino(const val : Word);
function getst_ino : Word;
property st_ino : Word read getst_ino write setst_ino;
procedure setst_mode(const val : Word);
function getst_mode : Word;
property st_mode : Word read getst_mode write setst_mode;
procedure setst_nlink(const val : SmallInt);
function getst_nlink : SmallInt;
property st_nlink : SmallInt read getst_nlink write setst_nlink;
procedure setst_uid(const val : SmallInt);
function getst_uid : SmallInt;
property st_uid : SmallInt read getst_uid write setst_uid;
procedure setst_gid(const val : SmallInt);
function getst_gid : SmallInt;
property st_gid : SmallInt read getst_gid write setst_gid;
procedure setst_rdev(const val : Word);
function getst_rdev : Word;
property st_rdev : Word read getst_rdev write setst_rdev;
procedure setst_size(const val : Longint);
function getst_size : Longint;
property st_size : Longint read getst_size write setst_size;
procedure setst_atime(const val : Longint);
function getst_atime : Longint;
property st_atime : Longint read getst_atime write setst_atime;
procedure setst_mtime(const val : Longint);
function getst_mtime : Longint;
property st_mtime : Longint read getst_mtime write setst_mtime;
procedure setst_ctime(const val : Longint);
function getst_ctime : Longint;
property st_ctime : Longint read getst_ctime write setst_ctime;
end;
type __uri_components__Wrapper = class(TDCRecordWrapper)
private
fR : uri_components;
public
function GetRecordPtr : pointer; override;
published
procedure setport(const val : Word);
function getport : Word;
property port : Word read getport write setport;
procedure setis_initialized(const val : Cardinal);
function getis_initialized : Cardinal;
property is_initialized : Cardinal read getis_initialized write setis_initialized;
procedure setdns_looked_up(const val : Cardinal);
function getdns_looked_up : Cardinal;
property dns_looked_up : Cardinal read getdns_looked_up write setdns_looked_up;
procedure setdns_resolved(const val : Cardinal);
function getdns_resolved : Cardinal;
property dns_resolved : Cardinal read getdns_resolved write setdns_resolved;
end;
type
_T0 = function (p0 : ap_int): Boolean of object;

_T1 = _T0;

_T2 = _T0;

_T3 = _T0;

_T4 = _T0;

_T5 = _T0;

_T6 = function (p0 : Ppool): Ppool of object;

_T7 = procedure (p0 : Ppool) of object;

_T8 = _T7;

_T9 = function (p0 : Ppool): ap_long of object;

_T10 = function : ap_long of object;

_T11 = function (p0 : Ppool;
p1 : ap_int): ap_pvoid of object;

_T12 = _T11;

{_T13 = function (p0 : Ppool;
const p1 : ap_pchar): ap_pchar of object;}

{_T14 = function (p0 : Ppool;
const p1 : ap_pchar;
p2 : ap_int): ap_pchar of object;}

_T15 = function (p0 : Ppool;
p1 : ap_int;
p2 : ap_int): Parray_header of object;

_T16 = function (p0 : Parray_header): ap_pvoid of object;

_T17 = procedure (p0 : Parray_header;
const p1 : Parray_header) of object;

_T18 = function (p0 : Ppool;
const p1 : Parray_header): Parray_header of object;

_T19 = _T18;

_T20 = function (p0 : Ppool;
const p1 : Parray_header;
const p2 : Parray_header): Parray_header of object;

_T21 = function (p0 : Ppool;
p1 : ap_int): Ptable of object;

_T22 = function (p0 : Ppool;
const p1 : Ptable): Ptable of object;

_T23 = function (p0 : Ptable): Parray_header of object;

_T24 = function (p0 : Ptable): ap_int of object;

{_T25 = procedure (p0 : Ptable;
const p1 : PChar;
const p2 : PChar) of object;}

{_T26 = procedure (p0 : Ptable;
const p1 : PChar;
const p2 : PChar) of object;}

{_T27 = procedure (p0 : Ptable;
const p1 : PChar;
const p2 : PChar) of object;}

{_T28 = procedure (p0 : Ptable;
const p1 : PChar;
const p2 : PChar) of object;}

{_T29 = procedure (p0 : Ptable;
const p1 : PChar;
const p2 : PChar) of object;}

{_T30 = procedure (p0 : Ptable;
const p1 : PChar;
const p2 : PChar) of object;}

{_T31 = procedure (p0 : Ptable;
const p1 : PChar) of object;}

{_T32 = function (p0 : Ptable;
const p1 : PChar): ap_constpchar of object;}

_T34 = function (p0 : Ppool;
const p1 : Ptable;
const p2 : Ptable): Ptable of object;

_T35 = procedure (p0 : Ptable) of object;

{_T36 = procedure (p0 : Ppool;
p1 : ap_pvoid;
p2 : TCleanupFunc;
p3 : TCleanupFunc) of object;}

{_T37 = procedure (p0 : Ppool;
p1 : ap_pvoid;
p2 : TCleanupFunc) of object;}

_T38 = procedure  of object;

_T39 = procedure (p0 : Ppool;
p1 : ap_int) of object;

_T40 = _T39;

_T41 = _T39;

_T42 = _T39;

_T43 = procedure (p0 : Ppool;
p1 : ap_pFILE) of object;

{_T44 = procedure (p0 : Ppool;
p1 : ap_pvoid;
p2 : TCleanupFunc) of object;}

{_T45 = function (p0 : Ppool;
const p1 : ap_pchar;
p2 : ap_int;
p3 : ap_int): ap_int of object;}

_T46 = function (p0 : Ppool;
p1 : ap_int): ap_int of object;

{_T47 = function (p0 : Ppool;
const p1 : ap_pchar;
const p2 : ap_pchar): ap_pFILE of object;}

{_T48 = function (p0 : Ppool;
p1 : ap_int;
const p2 : ap_pchar): ap_pFILE of object;}

_T49 = function (p0 : Ppool;
p1 : ap_pFILE): ap_int of object;

_T50 = function (p0 : Ppool;
p1 : ap_int;
p2 : ap_int;
p3 : ap_int): ap_int of object;

_T51 = _T46;

{_T52 = function (p0 : Ppool;
const p1 : ap_pchar;
p2 : ap_int): Pregex_t of object;}

{_T53 = function (p0 : Ppool;
const p1 : ap_pchar;
const p2 : ap_pchar;
p3 : size_t;
p4 : Pregmatch_t): ap_pchar of object;}

{_T54 = procedure (p0 : Ppool;
p1 : Pregex_t) of object;}

{_T55 = function (const p0 : ap_pchar): ap_int of object;}

_T56 = procedure (p0 : Ppool;
p1 : ap_int;
p2 : kill_conditions) of object;

{_T57 = function (p0 : Ppool;
p1 : TSpawnFunc;
p2 : ap_pvoid;
p3 : kill_conditions;
p4 : ap_ppFILE;
p5 : ap_ppFILE;
p6 : ap_ppFILE): ap_int of object;}

{_T58 = function (p0 : Ppool;
p1 : TbSpawnFunc;
p2 : ap_pvoid;
p3 : kill_conditions;
p4 : PPBUFF;
p5 : PPBUFF;
p6 : PPBUFF): ap_int of object;}

{_T59 = function (p0 : Prequest_rec;
p1 : Pchild_info;
p2 : ap_pchar;
p3 : ap_ppchar;
p4 : ap_int): ap_int of object;}

{_T60 = function (const p0 : Pstat): ap_int of object;}

{_T61 = procedure (p0 : Prequest_rec) of object;}

{_T62 = procedure (p0 : Prequest_rec) of object;}

{_T63 = function (p0 : Prequest_rec;
p1 : ap_pFILE;
p2 : ap_pchar): ap_int of object;}

{_T64 = function (p0 : Prequest_rec;
p1 : PBUFF;
p2 : ap_pchar): ap_int of object;}

{_T65 = function (p0 : Prequest_rec;
p1 : ap_pFILE): ap_int of object;}

{_T66 = function (p0 : Ppool;
p1 : ap_pchar): PChar of object;}

_T67 = function (p0 : Ppool;
p1 : AP_PMD5_CTX): ap_pchar of object;

_T68 = function (p0 : Ppool;
p1 : ap_pFILE): ap_pchar of object;

_T69 = procedure (p0 : AP_PMD5_CTX) of object;

{_T70 = procedure (p0 : ap_pchar;
p1 : AP_PMD5_CTX) of object;}

{_T71 = procedure (p0 : AP_PMD5_CTX;
const p1 : ap_pchar;
p2 : ap_unsigned) of object;}

_T72 = function : ap_pchar of object;

{_T73 = function (p0 : Ppool;
p1 : time_t;
const p2 : ap_pchar;
p3 : ap_int): ap_pchar of object;}

_T74 = function (p0 : Ppool;
p1 : time_t): ap_pchar of object;

_T75 = function (var p0 : ap_long): Ptm of object;

_T76 = function (const p0 : Ptm): time_t of object;

{_T77 = function (const p0 : ap_pchar): time_t of object;}

{_T78 = procedure (p0 : ap_pchar) of object;}

{_T79 = procedure (p0 : ap_pchar) of object;}

{_T80 = function (p0 : Ppool;
const p1 : ap_pchar;
p2 : ap_int): ap_pchar of object;}

{_T81 = function (p0 : Ppool;
const p1 : ap_pchar): ap_pchar of object;}

{_T82 = function (p0 : ap_pchar;
const p1 : ap_pchar;
p2 : ap_int): ap_pchar of object;}

{_T83 = function (const p0 : ap_pchar): ap_int of object;}

{_T84 = procedure (const p0 : ap_pchar) of object;}

{_T85 = function (p0 : ap_pchar): ap_int of object;}

{_T86 = function (p0 : Ppool;
const p1 : ap_pchar;
p2 : ap_int;
p3 : Prequest_rec): ap_pchar of object;}

{_T87 = function (p0 : Ppool;
const p1 : ap_pchar;
const p2 : Prequest_rec): ap_pchar of object;}

{_T88 = function (p0 : Ppool;
const p1 : ap_pchar): ap_pchar of object;}

{_T89 = function (p0 : Ppool;
const p1 : ap_pchar;
p2 : ap_int): ap_pchar of object;}

{_T90 = function (const p0 : ap_pchar): ap_int of object;}

{_T91 = function (p0 : Ppool;
const p1 : ap_pchar;
const p2 : ap_pchar): ap_pchar of object;}

{_T92 = function (const p0 : ap_pchar): ap_int of object;}

{_T93 = function (p0 : Ppool;
p1 : ap_pchar): ap_pchar of object;}

{_T94 = function (p0 : Ppool;
const p1 : ap_pchar): ap_int of object;}

{_T95 = function (const p0 : ap_pchar;
p1 : ap_pshort): ap_unsignedlong of object;}

_T96 = function (p0 : Ppool): ap_constpchar of object;

{_T97 = function (p0 : Pconn_rec;
p1 : ap_pvoid;
p2 : ap_int): ap_constpchar of object;}

{_T98 = function (p0 : ap_pFILE;
p1 : Prequest_rec): ap_long of object;}

{_T99 = function (p0 : ap_pFILE;
p1 : Prequest_rec;
p2 : ap_long): ap_long of object;}

{_T100 = function (p0 : PBUFF;
p1 : Prequest_rec): ap_long of object;}

{_T101 = function (p0 : PBUFF;
p1 : Prequest_rec;
p2 : ap_long): ap_long of object;}

{_T102 = function (var p0;
p1 : ap_int;
p2 : Prequest_rec): ap_int of object;}

{_T103 = function (p0 : ap_int;
p1 : Prequest_rec): ap_int of object;}

{_T104 = function (const p0 : PChar;
p1 : Prequest_rec): ap_int of object;}

{_T105 = function (p0 : Prequest_rec): ap_int of object;}

{_T106 = function (p0 : Prequest_rec;
p1 : ap_int): ap_int of object;}

{_T107 = function (p0 : Prequest_rec): ap_int of object;}

{_T108 = function (p0 : Prequest_rec;
p1 : ap_pchar;
p2 : ap_int): ap_long of object;}

{_T109 = procedure (p0 : Prequest_rec) of object;}

{_T110 = procedure (p0 : size_t;
p1 : Prequest_rec) of object;}

{_T111 = function (const p0 : ap_pchar;
const p1 : Prequest_rec): Prequest_rec of object;}

{_T112 = function (const p0 : ap_pchar;
const p1 : Prequest_rec): Prequest_rec of object;}

{_T113 = function (p0 : Prequest_rec): ap_int of object;}

{_T114 = procedure (p0 : Prequest_rec) of object;}

{_T115 = procedure (const p0 : ap_pchar;
p1 : Prequest_rec) of object;}

{_T116 = procedure (const p0 : ap_pchar;
p1 : Prequest_rec) of object;}

{_T117 = procedure (p0 : ap_pchar;
p1 : Prequest_rec) of object;}

{_T118 = procedure (p0 : ap_pchar;
p1 : Prequest_rec) of object;}

{_T119 = procedure (p0 : ap_pchar;
p1 : Prequest_rec) of object;}

{_T120 = procedure (p0 : Prequest_rec) of object;}

{_T121 = procedure (p0 : Prequest_rec) of object;}

_T122 = _T38;

_T123 = _T38;

_T124 = _T38;

{_T125 = procedure (const p0 : PChar;
p1 : ap_int;
p2 : ap_int;
const p3 : Pserver_rec;
const p4 : PChar) of object;}

{_T126 = procedure (const p0 : PChar;
p1 : ap_int;
p2 : ap_int;
const p3 : Prequest_rec;
const p4 : PChar) of object;}

{_T127 = function (p0 : Ppool;
const p1 : ap_pchar;
p2 : Puri_components): ap_int of object;}

{_T128 = function (p0 : Ppool;
const p1 : ap_pchar;
p2 : Puri_components): ap_int of object;}

{_T129 = function (p0 : Ppool;
const p1 : Puri_components;
p2 : ap_unsigned): ap_pchar of object;}

{_T130 = function (p0 : Ppool;
const p1 : ap_pchar): Phostent of object;}

_T131 = function (p0 : Ppool;
const p1 : Phostent): Phostent of object;

{_T132 = procedure (p0 : Prequest_rec) of object;}

{_T133 = function (p0 : Prequest_rec): ap_unsignedshort of object;}

{_T134 = function (p0 : ap_int;
p1 : Prequest_rec): ap_int of object;}

{_T135 = function (const p0 : ap_pchar): ap_unsignedshort of object;}

{_T136 = function (p0 : Prequest_rec): ap_pchar of object;}

{_T137 = function (p0 : Prequest_rec): ap_pchar of object;}

{_T138 = function (p0 : Prequest_rec;
const p1 : ap_ppchar): ap_int of object;}

{_T139 = function (p0 : ap_pvoid;
p1 : Pmodule): ap_pvoid of object;}

{_T140 = function (p0 : Prequest_rec): ap_pchar of object;}

{_T141 = function (p0 : Prequest_rec): ap_pchar of object;}

{_T142 = function (p0 : Prequest_rec): ap_unsigned of object;}

{_T143 = function (p0 : Prequest_rec): ap_int of object;}

{_T144 = function (p0 : Ppool;
p1 : ap_constpchar): Pconfigfile_t of object;}

{_T145 = function (p0 : ap_pchar;
p1 : size_t;
p2 : Pconfigfile_t): Integer of object;}

{_T146 = function (p0 : Pconfigfile_t): Integer of object;}

{_T147 = function (p0 : Pconfigfile_t): Integer of object;}

{_T148 = function (p0 : Ppool;
p1 : ap_ppchar;
p2 : Char): ap_pchar of object;}

{_T149 = procedure (p0 : Prequest_rec) of object;}

{_T150 = procedure (p0 : Prequest_rec) of object;}

{_T151 = procedure (p0 : Prequest_rec) of object;}

function __BUFF__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __cmd_parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __cmd_parms__Wrapper.setoverride(const val : ap_int);
begin
cmd_parms(GetRecordPtr^).override := val;
end;
function __cmd_parms__Wrapper.getoverride : ap_int;
begin
result := cmd_parms(GetRecordPtr^).override;
end;
procedure __cmd_parms__Wrapper.setlimited(const val : ap_int);
begin
cmd_parms(GetRecordPtr^).limited := val;
end;
function __cmd_parms__Wrapper.getlimited : ap_int;
begin
result := cmd_parms(GetRecordPtr^).limited;
end;
function __command_rec__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __command_rec__Wrapper.setreq_override(const val : Integer);
begin
command_rec(GetRecordPtr^).req_override := val;
end;
function __command_rec__Wrapper.getreq_override : Integer;
begin
result := command_rec(GetRecordPtr^).req_override;
end;
procedure __command_rec__Wrapper.setargs_how(const val : cmd_how);
begin
command_rec(GetRecordPtr^).args_how := val;
end;
function __command_rec__Wrapper.getargs_how : cmd_how;
begin
result := command_rec(GetRecordPtr^).args_how;
end;
function __configfile_t__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __configfile_t__Wrapper.setline_number(const val : ap_unsigned);
begin
configfile_t(GetRecordPtr^).line_number := val;
end;
function __configfile_t__Wrapper.getline_number : ap_unsigned;
begin
result := configfile_t(GetRecordPtr^).line_number;
end;
function __conn_rec__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __conn_rec__Wrapper.setchild_num(const val : Integer);
begin
conn_rec(GetRecordPtr^).child_num := val;
end;
function __conn_rec__Wrapper.getchild_num : Integer;
begin
result := conn_rec(GetRecordPtr^).child_num;
end;
procedure __conn_rec__Wrapper.setflags(const val : Integer);
begin
conn_rec(GetRecordPtr^).flags := val;
end;
function __conn_rec__Wrapper.getflags : Integer;
begin
result := conn_rec(GetRecordPtr^).flags;
end;
procedure __conn_rec__Wrapper.setkeepalives(const val : Integer);
begin
conn_rec(GetRecordPtr^).keepalives := val;
end;
function __conn_rec__Wrapper.getkeepalives : Integer;
begin
result := conn_rec(GetRecordPtr^).keepalives;
end;
function __handler_rec__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __htaccess_result__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __htaccess_result__Wrapper.setoverride(const val : ap_int);
begin
htaccess_result(GetRecordPtr^).override := val;
end;
function __htaccess_result__Wrapper.getoverride : ap_int;
begin
result := htaccess_result(GetRecordPtr^).override;
end;
function __module__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __module__Wrapper.setversion(const val : Integer);
begin
module(GetRecordPtr^).version := val;
end;
function __module__Wrapper.getversion : Integer;
begin
result := module(GetRecordPtr^).version;
end;
procedure __module__Wrapper.setminor_version(const val : Integer);
begin
module(GetRecordPtr^).minor_version := val;
end;
function __module__Wrapper.getminor_version : Integer;
begin
result := module(GetRecordPtr^).minor_version;
end;
procedure __module__Wrapper.setmodule_index(const val : Integer);
begin
module(GetRecordPtr^).module_index := val;
end;
function __module__Wrapper.getmodule_index : Integer;
begin
result := module(GetRecordPtr^).module_index;
end;
procedure __module__Wrapper.setmagic(const val : Integer);
begin
module(GetRecordPtr^).magic := val;
end;
function __module__Wrapper.getmagic : Integer;
begin
result := module(GetRecordPtr^).magic;
end;
function __module_struct__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __module_struct__Wrapper.setversion(const val : Integer);
begin
module_struct(GetRecordPtr^).version := val;
end;
function __module_struct__Wrapper.getversion : Integer;
begin
result := module_struct(GetRecordPtr^).version;
end;
procedure __module_struct__Wrapper.setminor_version(const val : Integer);
begin
module_struct(GetRecordPtr^).minor_version := val;
end;
function __module_struct__Wrapper.getminor_version : Integer;
begin
result := module_struct(GetRecordPtr^).minor_version;
end;
procedure __module_struct__Wrapper.setmodule_index(const val : Integer);
begin
module_struct(GetRecordPtr^).module_index := val;
end;
function __module_struct__Wrapper.getmodule_index : Integer;
begin
result := module_struct(GetRecordPtr^).module_index;
end;
procedure __module_struct__Wrapper.setmagic(const val : Integer);
begin
module_struct(GetRecordPtr^).magic := val;
end;
function __module_struct__Wrapper.getmagic : Integer;
begin
result := module_struct(GetRecordPtr^).magic;
end;
function __regex_t__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __regex_t__Wrapper.setre_magic(const val : ap_int);
begin
regex_t(GetRecordPtr^).re_magic := val;
end;
function __regex_t__Wrapper.getre_magic : ap_int;
begin
result := regex_t(GetRecordPtr^).re_magic;
end;
procedure __regex_t__Wrapper.setre_nsub(const val : size_t);
begin
regex_t(GetRecordPtr^).re_nsub := val;
end;
function __regex_t__Wrapper.getre_nsub : size_t;
begin
result := regex_t(GetRecordPtr^).re_nsub;
end;
function __request_rec__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __request_rec__Wrapper.setbackwards(const val : ap_int);
begin
request_rec(GetRecordPtr^).backwards := val;
end;
function __request_rec__Wrapper.getbackwards : ap_int;
begin
result := request_rec(GetRecordPtr^).backwards;
end;
procedure __request_rec__Wrapper.setproxyreq(const val : ap_int);
begin
request_rec(GetRecordPtr^).proxyreq := val;
end;
function __request_rec__Wrapper.getproxyreq : ap_int;
begin
result := request_rec(GetRecordPtr^).proxyreq;
end;
procedure __request_rec__Wrapper.setheader_only(const val : ap_int);
begin
request_rec(GetRecordPtr^).header_only := val;
end;
function __request_rec__Wrapper.getheader_only : ap_int;
begin
result := request_rec(GetRecordPtr^).header_only;
end;
procedure __request_rec__Wrapper.setproto_num(const val : ap_int);
begin
request_rec(GetRecordPtr^).proto_num := val;
end;
function __request_rec__Wrapper.getproto_num : ap_int;
begin
result := request_rec(GetRecordPtr^).proto_num;
end;
procedure __request_rec__Wrapper.setrequest_time(const val : time_t);
begin
request_rec(GetRecordPtr^).request_time := val;
end;
function __request_rec__Wrapper.getrequest_time : time_t;
begin
result := request_rec(GetRecordPtr^).request_time;
end;
procedure __request_rec__Wrapper.setstatus(const val : ap_int);
begin
request_rec(GetRecordPtr^).status := val;
end;
function __request_rec__Wrapper.getstatus : ap_int;
begin
result := request_rec(GetRecordPtr^).status;
end;
procedure __request_rec__Wrapper.setmethod_number(const val : ap_int);
begin
request_rec(GetRecordPtr^).method_number := val;
end;
function __request_rec__Wrapper.getmethod_number : ap_int;
begin
result := request_rec(GetRecordPtr^).method_number;
end;
procedure __request_rec__Wrapper.setallowed(const val : ap_int);
begin
request_rec(GetRecordPtr^).allowed := val;
end;
function __request_rec__Wrapper.getallowed : ap_int;
begin
result := request_rec(GetRecordPtr^).allowed;
end;
procedure __request_rec__Wrapper.setsent_bodyct(const val : ap_int);
begin
request_rec(GetRecordPtr^).sent_bodyct := val;
end;
function __request_rec__Wrapper.getsent_bodyct : ap_int;
begin
result := request_rec(GetRecordPtr^).sent_bodyct;
end;
procedure __request_rec__Wrapper.setbytes_sent(const val : ap_long);
begin
request_rec(GetRecordPtr^).bytes_sent := val;
end;
function __request_rec__Wrapper.getbytes_sent : ap_long;
begin
result := request_rec(GetRecordPtr^).bytes_sent;
end;
procedure __request_rec__Wrapper.setmtime(const val : time_t);
begin
request_rec(GetRecordPtr^).mtime := val;
end;
function __request_rec__Wrapper.getmtime : time_t;
begin
result := request_rec(GetRecordPtr^).mtime;
end;
procedure __request_rec__Wrapper.setchunked(const val : ap_int);
begin
request_rec(GetRecordPtr^).chunked := val;
end;
function __request_rec__Wrapper.getchunked : ap_int;
begin
result := request_rec(GetRecordPtr^).chunked;
end;
procedure __request_rec__Wrapper.setbyterange(const val : ap_int);
begin
request_rec(GetRecordPtr^).byterange := val;
end;
function __request_rec__Wrapper.getbyterange : ap_int;
begin
result := request_rec(GetRecordPtr^).byterange;
end;
procedure __request_rec__Wrapper.setclength(const val : ap_long);
begin
request_rec(GetRecordPtr^).clength := val;
end;
function __request_rec__Wrapper.getclength : ap_long;
begin
result := request_rec(GetRecordPtr^).clength;
end;
procedure __request_rec__Wrapper.setremaining(const val : ap_long);
begin
request_rec(GetRecordPtr^).remaining := val;
end;
function __request_rec__Wrapper.getremaining : ap_long;
begin
result := request_rec(GetRecordPtr^).remaining;
end;
procedure __request_rec__Wrapper.setread_length(const val : ap_long);
begin
request_rec(GetRecordPtr^).read_length := val;
end;
function __request_rec__Wrapper.getread_length : ap_long;
begin
result := request_rec(GetRecordPtr^).read_length;
end;
procedure __request_rec__Wrapper.setread_body(const val : ap_int);
begin
request_rec(GetRecordPtr^).read_body := val;
end;
function __request_rec__Wrapper.getread_body : ap_int;
begin
result := request_rec(GetRecordPtr^).read_body;
end;
procedure __request_rec__Wrapper.setread_chunked(const val : ap_int);
begin
request_rec(GetRecordPtr^).read_chunked := val;
end;
function __request_rec__Wrapper.getread_chunked : ap_int;
begin
result := request_rec(GetRecordPtr^).read_chunked;
end;
procedure __request_rec__Wrapper.setexpecting_100(const val : ap_unsigned);
begin
request_rec(GetRecordPtr^).expecting_100 := val;
end;
function __request_rec__Wrapper.getexpecting_100 : ap_unsigned;
begin
result := request_rec(GetRecordPtr^).expecting_100;
end;
procedure __request_rec__Wrapper.setno_cache(const val : ap_int);
begin
request_rec(GetRecordPtr^).no_cache := val;
end;
function __request_rec__Wrapper.getno_cache : ap_int;
begin
result := request_rec(GetRecordPtr^).no_cache;
end;
procedure __request_rec__Wrapper.setno_local_copy(const val : ap_int);
begin
request_rec(GetRecordPtr^).no_local_copy := val;
end;
function __request_rec__Wrapper.getno_local_copy : ap_int;
begin
result := request_rec(GetRecordPtr^).no_local_copy;
end;
function __server_rec__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __server_rec__Wrapper.setdefn_line_number(const val : ap_unsigned);
begin
server_rec(GetRecordPtr^).defn_line_number := val;
end;
function __server_rec__Wrapper.getdefn_line_number : ap_unsigned;
begin
result := server_rec(GetRecordPtr^).defn_line_number;
end;
procedure __server_rec__Wrapper.setport(const val : ap_unsignedshort);
begin
server_rec(GetRecordPtr^).port := val;
end;
function __server_rec__Wrapper.getport : ap_unsignedshort;
begin
result := server_rec(GetRecordPtr^).port;
end;
procedure __server_rec__Wrapper.setloglevel(const val : ap_int);
begin
server_rec(GetRecordPtr^).loglevel := val;
end;
function __server_rec__Wrapper.getloglevel : ap_int;
begin
result := server_rec(GetRecordPtr^).loglevel;
end;
procedure __server_rec__Wrapper.setis_virtual(const val : ap_int);
begin
server_rec(GetRecordPtr^).is_virtual := val;
end;
function __server_rec__Wrapper.getis_virtual : ap_int;
begin
result := server_rec(GetRecordPtr^).is_virtual;
end;
procedure __server_rec__Wrapper.settimeout(const val : ap_int);
begin
server_rec(GetRecordPtr^).timeout := val;
end;
function __server_rec__Wrapper.gettimeout : ap_int;
begin
result := server_rec(GetRecordPtr^).timeout;
end;
procedure __server_rec__Wrapper.setkeep_alive_timeout(const val : ap_int);
begin
server_rec(GetRecordPtr^).keep_alive_timeout := val;
end;
function __server_rec__Wrapper.getkeep_alive_timeout : ap_int;
begin
result := server_rec(GetRecordPtr^).keep_alive_timeout;
end;
procedure __server_rec__Wrapper.setkeep_alive_max(const val : ap_int);
begin
server_rec(GetRecordPtr^).keep_alive_max := val;
end;
function __server_rec__Wrapper.getkeep_alive_max : ap_int;
begin
result := server_rec(GetRecordPtr^).keep_alive_max;
end;
procedure __server_rec__Wrapper.setkeep_alive(const val : ap_int);
begin
server_rec(GetRecordPtr^).keep_alive := val;
end;
function __server_rec__Wrapper.getkeep_alive : ap_int;
begin
result := server_rec(GetRecordPtr^).keep_alive;
end;
procedure __server_rec__Wrapper.setsend_buffer_size(const val : ap_int);
begin
server_rec(GetRecordPtr^).send_buffer_size := val;
end;
function __server_rec__Wrapper.getsend_buffer_size : ap_int;
begin
result := server_rec(GetRecordPtr^).send_buffer_size;
end;
procedure __server_rec__Wrapper.setpathlen(const val : ap_int);
begin
server_rec(GetRecordPtr^).pathlen := val;
end;
function __server_rec__Wrapper.getpathlen : ap_int;
begin
result := server_rec(GetRecordPtr^).pathlen;
end;
procedure __server_rec__Wrapper.setserver_uid(const val : uid_t);
begin
server_rec(GetRecordPtr^).server_uid := val;
end;
function __server_rec__Wrapper.getserver_uid : uid_t;
begin
result := server_rec(GetRecordPtr^).server_uid;
end;
procedure __server_rec__Wrapper.setserver_gid(const val : gid_t);
begin
server_rec(GetRecordPtr^).server_gid := val;
end;
function __server_rec__Wrapper.getserver_gid : gid_t;
begin
result := server_rec(GetRecordPtr^).server_gid;
end;
procedure __server_rec__Wrapper.setlimit_req_line(const val : ap_int);
begin
server_rec(GetRecordPtr^).limit_req_line := val;
end;
function __server_rec__Wrapper.getlimit_req_line : ap_int;
begin
result := server_rec(GetRecordPtr^).limit_req_line;
end;
procedure __server_rec__Wrapper.setlimit_req_fieldsize(const val : ap_int);
begin
server_rec(GetRecordPtr^).limit_req_fieldsize := val;
end;
function __server_rec__Wrapper.getlimit_req_fieldsize : ap_int;
begin
result := server_rec(GetRecordPtr^).limit_req_fieldsize;
end;
procedure __server_rec__Wrapper.setlimit_req_fields(const val : ap_int);
begin
server_rec(GetRecordPtr^).limit_req_fields := val;
end;
function __server_rec__Wrapper.getlimit_req_fields : ap_int;
begin
result := server_rec(GetRecordPtr^).limit_req_fields;
end;
function __SPerDir__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __SPerServer__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __stat__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __stat__Wrapper.setst_dev(const val : Word);
begin
stat(GetRecordPtr^).st_dev := val;
end;
function __stat__Wrapper.getst_dev : Word;
begin
result := stat(GetRecordPtr^).st_dev;
end;
procedure __stat__Wrapper.setst_ino(const val : Word);
begin
stat(GetRecordPtr^).st_ino := val;
end;
function __stat__Wrapper.getst_ino : Word;
begin
result := stat(GetRecordPtr^).st_ino;
end;
procedure __stat__Wrapper.setst_mode(const val : Word);
begin
stat(GetRecordPtr^).st_mode := val;
end;
function __stat__Wrapper.getst_mode : Word;
begin
result := stat(GetRecordPtr^).st_mode;
end;
procedure __stat__Wrapper.setst_nlink(const val : SmallInt);
begin
stat(GetRecordPtr^).st_nlink := val;
end;
function __stat__Wrapper.getst_nlink : SmallInt;
begin
result := stat(GetRecordPtr^).st_nlink;
end;
procedure __stat__Wrapper.setst_uid(const val : SmallInt);
begin
stat(GetRecordPtr^).st_uid := val;
end;
function __stat__Wrapper.getst_uid : SmallInt;
begin
result := stat(GetRecordPtr^).st_uid;
end;
procedure __stat__Wrapper.setst_gid(const val : SmallInt);
begin
stat(GetRecordPtr^).st_gid := val;
end;
function __stat__Wrapper.getst_gid : SmallInt;
begin
result := stat(GetRecordPtr^).st_gid;
end;
procedure __stat__Wrapper.setst_rdev(const val : Word);
begin
stat(GetRecordPtr^).st_rdev := val;
end;
function __stat__Wrapper.getst_rdev : Word;
begin
result := stat(GetRecordPtr^).st_rdev;
end;
procedure __stat__Wrapper.setst_size(const val : Longint);
begin
stat(GetRecordPtr^).st_size := val;
end;
function __stat__Wrapper.getst_size : Longint;
begin
result := stat(GetRecordPtr^).st_size;
end;
procedure __stat__Wrapper.setst_atime(const val : Longint);
begin
stat(GetRecordPtr^).st_atime := val;
end;
function __stat__Wrapper.getst_atime : Longint;
begin
result := stat(GetRecordPtr^).st_atime;
end;
procedure __stat__Wrapper.setst_mtime(const val : Longint);
begin
stat(GetRecordPtr^).st_mtime := val;
end;
function __stat__Wrapper.getst_mtime : Longint;
begin
result := stat(GetRecordPtr^).st_mtime;
end;
procedure __stat__Wrapper.setst_ctime(const val : Longint);
begin
stat(GetRecordPtr^).st_ctime := val;
end;
function __stat__Wrapper.getst_ctime : Longint;
begin
result := stat(GetRecordPtr^).st_ctime;
end;
function __uri_components__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __uri_components__Wrapper.setport(const val : Word);
begin
uri_components(GetRecordPtr^).port := val;
end;
function __uri_components__Wrapper.getport : Word;
begin
result := uri_components(GetRecordPtr^).port;
end;
procedure __uri_components__Wrapper.setis_initialized(const val : Cardinal);
begin
uri_components(GetRecordPtr^).is_initialized := val;
end;
function __uri_components__Wrapper.getis_initialized : Cardinal;
begin
result := uri_components(GetRecordPtr^).is_initialized;
end;
procedure __uri_components__Wrapper.setdns_looked_up(const val : Cardinal);
begin
uri_components(GetRecordPtr^).dns_looked_up := val;
end;
function __uri_components__Wrapper.getdns_looked_up : Cardinal;
begin
result := uri_components(GetRecordPtr^).dns_looked_up;
end;
procedure __uri_components__Wrapper.setdns_resolved(const val : Cardinal);
begin
uri_components(GetRecordPtr^).dns_resolved := val;
end;
function __uri_components__Wrapper.getdns_resolved : Cardinal;
begin
result := uri_components(GetRecordPtr^).dns_resolved;
end;
function _BUFF_ : IDispatch;
begin
  result := __BUFF__Wrapper.Create;
end;
function _cmd_parms_ : IDispatch;
begin
  result := __cmd_parms__Wrapper.Create;
end;
function _command_rec_ : IDispatch;
begin
  result := __command_rec__Wrapper.Create;
end;
function _configfile_t_ : IDispatch;
begin
  result := __configfile_t__Wrapper.Create;
end;
function _conn_rec_ : IDispatch;
begin
  result := __conn_rec__Wrapper.Create;
end;
function _handler_rec_ : IDispatch;
begin
  result := __handler_rec__Wrapper.Create;
end;
function _htaccess_result_ : IDispatch;
begin
  result := __htaccess_result__Wrapper.Create;
end;
function _module_ : IDispatch;
begin
  result := __module__Wrapper.Create;
end;
function _module_struct_ : IDispatch;
begin
  result := __module_struct__Wrapper.Create;
end;
function _regex_t_ : IDispatch;
begin
  result := __regex_t__Wrapper.Create;
end;
function _request_rec_ : IDispatch;
begin
  result := __request_rec__Wrapper.Create;
end;
function _server_rec_ : IDispatch;
begin
  result := __server_rec__Wrapper.Create;
end;
function _SPerDir_ : IDispatch;
begin
  result := __SPerDir__Wrapper.Create;
end;
function _SPerServer_ : IDispatch;
begin
  result := __SPerServer__Wrapper.Create;
end;
function _stat_ : IDispatch;
begin
  result := __stat__Wrapper.Create;
end;
function _uri_components_ : IDispatch;
begin
  result := __uri_components__Wrapper.Create;
end;

type __BUFF__Wrapper__ = class(__BUFF__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __BUFF__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertBUFFToVariant(var R : BUFF) : OleVariant;
var
__rw : __BUFF__Wrapper__;
begin
__rw := __BUFF__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToBUFF(const V : OleVariant) : BUFF;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := BUFF((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __cmd_parms__Wrapper__ = class(__cmd_parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __cmd_parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convertcmd_parmsToVariant(var R : cmd_parms) : OleVariant;
var
__rw : __cmd_parms__Wrapper__;
begin
__rw := __cmd_parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTocmd_parms(const V : OleVariant) : cmd_parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := cmd_parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __command_rec__Wrapper__ = class(__command_rec__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __command_rec__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convertcommand_recToVariant(var R : command_rec) : OleVariant;
var
__rw : __command_rec__Wrapper__;
begin
__rw := __command_rec__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTocommand_rec(const V : OleVariant) : command_rec;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := command_rec((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __configfile_t__Wrapper__ = class(__configfile_t__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __configfile_t__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convertconfigfile_tToVariant(var R : configfile_t) : OleVariant;
var
__rw : __configfile_t__Wrapper__;
begin
__rw := __configfile_t__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToconfigfile_t(const V : OleVariant) : configfile_t;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := configfile_t((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __conn_rec__Wrapper__ = class(__conn_rec__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __conn_rec__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convertconn_recToVariant(var R : conn_rec) : OleVariant;
var
__rw : __conn_rec__Wrapper__;
begin
__rw := __conn_rec__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToconn_rec(const V : OleVariant) : conn_rec;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := conn_rec((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __handler_rec__Wrapper__ = class(__handler_rec__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __handler_rec__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Converthandler_recToVariant(var R : handler_rec) : OleVariant;
var
__rw : __handler_rec__Wrapper__;
begin
__rw := __handler_rec__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTohandler_rec(const V : OleVariant) : handler_rec;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := handler_rec((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __htaccess_result__Wrapper__ = class(__htaccess_result__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __htaccess_result__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Converthtaccess_resultToVariant(var R : htaccess_result) : OleVariant;
var
__rw : __htaccess_result__Wrapper__;
begin
__rw := __htaccess_result__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTohtaccess_result(const V : OleVariant) : htaccess_result;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := htaccess_result((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __module__Wrapper__ = class(__module__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __module__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertmoduleToVariant(var R : module) : OleVariant;
var
__rw : __module__Wrapper__;
begin
__rw := __module__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTomodule(const V : OleVariant) : module;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := module((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __module_struct__Wrapper__ = class(__module_struct__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __module_struct__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convertmodule_structToVariant(var R : module_struct) : OleVariant;
var
__rw : __module_struct__Wrapper__;
begin
__rw := __module_struct__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTomodule_struct(const V : OleVariant) : module_struct;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := module_struct((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __regex_t__Wrapper__ = class(__regex_t__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __regex_t__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convertregex_tToVariant(var R : regex_t) : OleVariant;
var
__rw : __regex_t__Wrapper__;
begin
__rw := __regex_t__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToregex_t(const V : OleVariant) : regex_t;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := regex_t((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __request_rec__Wrapper__ = class(__request_rec__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __request_rec__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convertrequest_recToVariant(var R : request_rec) : OleVariant;
var
__rw : __request_rec__Wrapper__;
begin
__rw := __request_rec__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTorequest_rec(const V : OleVariant) : request_rec;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := request_rec((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __server_rec__Wrapper__ = class(__server_rec__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __server_rec__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convertserver_recToVariant(var R : server_rec) : OleVariant;
var
__rw : __server_rec__Wrapper__;
begin
__rw := __server_rec__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToserver_rec(const V : OleVariant) : server_rec;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := server_rec((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SPerDir__Wrapper__ = class(__SPerDir__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SPerDir__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSPerDirToVariant(var R : SPerDir) : OleVariant;
var
__rw : __SPerDir__Wrapper__;
begin
__rw := __SPerDir__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSPerDir(const V : OleVariant) : SPerDir;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SPerDir((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SPerServer__Wrapper__ = class(__SPerServer__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SPerServer__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSPerServerToVariant(var R : SPerServer) : OleVariant;
var
__rw : __SPerServer__Wrapper__;
begin
__rw := __SPerServer__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSPerServer(const V : OleVariant) : SPerServer;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SPerServer((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __stat__Wrapper__ = class(__stat__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __stat__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertstatToVariant(var R : stat) : OleVariant;
var
__rw : __stat__Wrapper__;
begin
__rw := __stat__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTostat(const V : OleVariant) : stat;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := stat((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __uri_components__Wrapper__ = class(__uri_components__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __uri_components__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Converturi_componentsToVariant(var R : uri_components) : OleVariant;
var
__rw : __uri_components__Wrapper__;
begin
__rw := __uri_components__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTouri_components(const V : OleVariant) : uri_components;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := uri_components((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..149] of string = (
'ApacheCore'
,'TARGET'
,'DYNAMIC_MODULE_LIMIT'
,'DEFAULT_ADMIN'
,'MODULE_MAGIC_COOKIE'
,'MODULE_MAGIC_NUMBER_MAJOR'
,'MODULE_MAGIC_NUMBER_MINOR'
,'MODULE_MAGIC_NUMBER'
,'APACHE_RELEASE'
,'SERVER_PROTOCOL'
,'AP_DECLINED'
,'AP_DONE'
,'AP_OK'
,'REQUEST_NO_BODY'
,'REQUEST_CHUNKED_ERROR'
,'REQUEST_CHUNKED_DECHUNK'
,'REQUEST_CHUNKED_PASS'
,'M_GET'
,'M_PUT'
,'M_POST'
,'M_DELETE'
,'M_CONNECT'
,'M_OPTIONS'
,'M_TRACE'
,'M_PATCH'
,'M_PROPFIND'
,'M_PROPPATCH'
,'M_MKCOL'
,'M_COPY'
,'M_MOVE'
,'M_LOCK'
,'M_UNLOCK'
,'M_INVALID'
,'METHODS'
,'REMOTE_HOST'
,'REMOTE_NAME'
,'REMOTE_NOLOOKUP'
,'REMOTE_DOUBLE_REV'
,'CGI_MAGIC_TYPE'
,'INCLUDES_MAGIC_TYPE'
,'INCLUDES_MAGIC_TYPE3'
,'MAP_FILE_MAGIC_TYPE'
,'ASIS_MAGIC_TYPE'
,'DIR_MAGIC_TYPE'
,'STATUS_MAGIC_TYPE'
,'RESPONSE_CODES'
,'HTTP_CONTINUE'
,'HTTP_SWITCHING_PROTOCOLS'
,'HTTP_PROCESSING'
,'HTTP_OK'
,'HTTP_CREATED'
,'HTTP_ACCEPTED'
,'HTTP_NON_AUTHORITATIVE'
,'HTTP_NO_CONTENT'
,'HTTP_RESET_CONTENT'
,'HTTP_PARTIAL_CONTENT'
,'HTTP_MULTI_STATUS'
,'HTTP_MULTIPLE_CHOICES'
,'HTTP_MOVED_PERMANENTLY'
,'HTTP_MOVED_TEMPORARILY'
,'HTTP_SEE_OTHER'
,'HTTP_NOT_MODIFIED'
,'HTTP_USE_PROXY'
,'HTTP_TEMPORARY_REDIRECT'
,'HTTP_BAD_REQUEST'
,'HTTP_UNAUTHORIZED'
,'HTTP_PAYMENT_REQUIRED'
,'HTTP_FORBIDDEN'
,'HTTP_NOT_FOUND'
,'HTTP_METHOD_NOT_ALLOWED'
,'HTTP_NOT_ACCEPTABLE'
,'HTTP_PROXY_AUTHENTICATION_REQUIRED'
,'HTTP_REQUEST_TIME_OUT'
,'HTTP_CONFLICT'
,'HTTP_GONE'
,'HTTP_LENGTH_REQUIRED'
,'HTTP_PRECONDITION_FAILED'
,'HTTP_REQUEST_ENTITY_TOO_LARGE'
,'HTTP_REQUEST_URI_TOO_LARGE'
,'HTTP_UNSUPPORTED_MEDIA_TYPE'
,'HTTP_RANGE_NOT_SATISFIABLE'
,'HTTP_EXPECTATION_FAILED'
,'HTTP_UNPROCESSABLE_ENTITY'
,'HTTP_LOCKED'
,'HTTP_FAILED_DEPENDENCY'
,'HTTP_INTERNAL_SERVER_ERROR'
,'HTTP_NOT_IMPLEMENTED'
,'HTTP_BAD_GATEWAY'
,'HTTP_SERVICE_UNAVAILABLE'
,'HTTP_GATEWAY_TIME_OUT'
,'HTTP_VERSION_NOT_SUPPORTED'
,'HTTP_VARIANT_ALSO_VARIES'
,'HTTP_INSUFFICIENT_STORAGE'
,'HTTP_NOT_EXTENDED'
,'DOCUMENT_FOLLOWS'
,'PARTIAL_CONTENT'
,'MULTIPLE_CHOICES'
,'MOVED'
,'REDIRECT'
,'USE_LOCAL_COPY'
,'BAD_REQUEST'
,'AUTH_REQUIRED'
,'FORBIDDEN'
,'NOT_FOUND'
,'METHOD_NOT_ALLOWED'
,'NOT_ACCEPTABLE'
,'LENGTH_REQUIRED'
,'PRECONDITION_FAILED'
,'SERVER_ERROR'
,'NOT_IMPLEMENTED'
,'BAD_GATEWAY'
,'VARIANT_ALSO_VARIES'
,'APLOG_EMERG'
,'APLOG_ALERT'
,'APLOG_CRIT'
,'APLOG_ERR'
,'APLOG_WARNING'
,'APLOG_NOTICE'
,'APLOG_INFO'
,'APLOG_DEBUG'
,'APLOG_LEVELMASK'
,'APLOG_NOERRNO'
,'APLOG_WIN32ERROR'
,'OR_NONE'
,'OR_LIMIT'
,'OR_OPTIONS'
,'OR_FILEINFO'
,'OR_AUTHCFG'
,'OR_INDEXES'
,'OR_UNSET'
,'ACCESS_CONF'
,'RSRC_CONF'
,'OR_ALL'
,'RAW_ARGS'
,'TAKE1'
,'TAKE2'
,'ITERATE'
,'ITERATE2'
,'FLAG'
,'NO_ARGS'
,'TAKE12'
,'TAKE3'
,'TAKE23'
,'TAKE123'
,'TAKE13'
,'kill_never'
,'kill_always'
,'kill_after_timeout'
,'just_wait'
,'kill_only_once'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,ApacheCore));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,TARGET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,DYNAMIC_MODULE_LIMIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,DEFAULT_ADMIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,MODULE_MAGIC_COOKIE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,MODULE_MAGIC_NUMBER_MAJOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,MODULE_MAGIC_NUMBER_MINOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,MODULE_MAGIC_NUMBER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,APACHE_RELEASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,SERVER_PROTOCOL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,AP_DECLINED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,AP_DONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,AP_OK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,REQUEST_NO_BODY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,REQUEST_CHUNKED_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,REQUEST_CHUNKED_DECHUNK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,REQUEST_CHUNKED_PASS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,M_GET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,M_PUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,M_POST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,M_DELETE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,M_CONNECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,M_OPTIONS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,M_TRACE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,M_PATCH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,M_PROPFIND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,M_PROPPATCH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,M_MKCOL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,M_COPY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,M_MOVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,M_LOCK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,M_UNLOCK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,M_INVALID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,METHODS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,REMOTE_HOST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,REMOTE_NAME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,REMOTE_NOLOOKUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,REMOTE_DOUBLE_REV));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,CGI_MAGIC_TYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,INCLUDES_MAGIC_TYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,INCLUDES_MAGIC_TYPE3));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,MAP_FILE_MAGIC_TYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,ASIS_MAGIC_TYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,DIR_MAGIC_TYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,STATUS_MAGIC_TYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,RESPONSE_CODES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,HTTP_CONTINUE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,HTTP_SWITCHING_PROTOCOLS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,HTTP_PROCESSING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,HTTP_OK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,HTTP_CREATED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,HTTP_ACCEPTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,HTTP_NON_AUTHORITATIVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,HTTP_NO_CONTENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,HTTP_RESET_CONTENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,HTTP_PARTIAL_CONTENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,HTTP_MULTI_STATUS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,HTTP_MULTIPLE_CHOICES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,HTTP_MOVED_PERMANENTLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,HTTP_MOVED_TEMPORARILY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,HTTP_SEE_OTHER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,HTTP_NOT_MODIFIED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,HTTP_USE_PROXY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,HTTP_TEMPORARY_REDIRECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,HTTP_BAD_REQUEST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[65] ,HTTP_UNAUTHORIZED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[66] ,HTTP_PAYMENT_REQUIRED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[67] ,HTTP_FORBIDDEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[68] ,HTTP_NOT_FOUND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[69] ,HTTP_METHOD_NOT_ALLOWED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[70] ,HTTP_NOT_ACCEPTABLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[71] ,HTTP_PROXY_AUTHENTICATION_REQUIRED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[72] ,HTTP_REQUEST_TIME_OUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[73] ,HTTP_CONFLICT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[74] ,HTTP_GONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[75] ,HTTP_LENGTH_REQUIRED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[76] ,HTTP_PRECONDITION_FAILED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[77] ,HTTP_REQUEST_ENTITY_TOO_LARGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[78] ,HTTP_REQUEST_URI_TOO_LARGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[79] ,HTTP_UNSUPPORTED_MEDIA_TYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[80] ,HTTP_RANGE_NOT_SATISFIABLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[81] ,HTTP_EXPECTATION_FAILED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[82] ,HTTP_UNPROCESSABLE_ENTITY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[83] ,HTTP_LOCKED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[84] ,HTTP_FAILED_DEPENDENCY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[85] ,HTTP_INTERNAL_SERVER_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[86] ,HTTP_NOT_IMPLEMENTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[87] ,HTTP_BAD_GATEWAY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[88] ,HTTP_SERVICE_UNAVAILABLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[89] ,HTTP_GATEWAY_TIME_OUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[90] ,HTTP_VERSION_NOT_SUPPORTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[91] ,HTTP_VARIANT_ALSO_VARIES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[92] ,HTTP_INSUFFICIENT_STORAGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[93] ,HTTP_NOT_EXTENDED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[94] ,DOCUMENT_FOLLOWS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[95] ,PARTIAL_CONTENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[96] ,MULTIPLE_CHOICES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[97] ,MOVED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[98] ,REDIRECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[99] ,USE_LOCAL_COPY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[100] ,BAD_REQUEST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[101] ,AUTH_REQUIRED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[102] ,FORBIDDEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[103] ,NOT_FOUND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[104] ,METHOD_NOT_ALLOWED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[105] ,NOT_ACCEPTABLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[106] ,LENGTH_REQUIRED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[107] ,PRECONDITION_FAILED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[108] ,SERVER_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[109] ,NOT_IMPLEMENTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[110] ,BAD_GATEWAY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[111] ,VARIANT_ALSO_VARIES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[112] ,APLOG_EMERG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[113] ,APLOG_ALERT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[114] ,APLOG_CRIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[115] ,APLOG_ERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[116] ,APLOG_WARNING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[117] ,APLOG_NOTICE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[118] ,APLOG_INFO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[119] ,APLOG_DEBUG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[120] ,APLOG_LEVELMASK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[121] ,APLOG_NOERRNO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[122] ,APLOG_WIN32ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[123] ,OR_NONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[124] ,OR_LIMIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[125] ,OR_OPTIONS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[126] ,OR_FILEINFO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[127] ,OR_AUTHCFG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[128] ,OR_INDEXES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[129] ,OR_UNSET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[130] ,ACCESS_CONF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[131] ,RSRC_CONF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[132] ,OR_ALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[133] ,RAW_ARGS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[134] ,TAKE1));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[135] ,TAKE2));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[136] ,ITERATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[137] ,ITERATE2));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[138] ,FLAG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[139] ,NO_ARGS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[140] ,TAKE12));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[141] ,TAKE3));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[142] ,TAKE23));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[143] ,TAKE123));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[144] ,TAKE13));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[145] ,kill_never));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[146] ,kill_always));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[147] ,kill_after_timeout));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[148] ,just_wait));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[149] ,kill_only_once));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..63] of string = (
'BUFF'
,'cmd_parms'
,'command_rec'
,'configfile_t'
,'conn_rec'
,'handler_rec'
,'htaccess_result'
,'module'
,'module_struct'
,'regex_t'
,'request_rec'
,'server_rec'
,'SPerDir'
,'SPerServer'
,'stat'
,'uri_components'
,'ap_is_HTTP_INFO'
,'ap_is_HTTP_SUCCESS'
,'ap_is_HTTP_REDIRECT'
,'ap_is_HTTP_ERROR'
,'ap_is_HTTP_CLIENT_ERROR'
,'ap_is_HTTP_SERVER_ERROR'
,'ap_make_sub_pool'
,'ap_clear_pool'
,'ap_destroy_pool'
,'ap_bytes_in_pool'
,'ap_bytes_in_free_blocks'
,'ap_palloc'
,'ap_pcalloc'
,'ap_make_array'
,'ap_push_array'
,'ap_array_cat'
,'ap_copy_array'
,'ap_copy_array_hdr'
,'ap_append_arrays'
,'ap_make_table'
,'ap_copy_table'
,'ap_table_elts'
,'ap_is_empty_table'
,'ap_overlay_tables'
,'ap_clear_table'
,'ap_cleanup_for_exec'
,'ap_note_cleanups_for_fd'
,'ap_kill_cleanups_for_fd'
,'ap_note_cleanups_for_socket'
,'ap_kill_cleanups_for_socket'
,'ap_note_cleanups_for_file'
,'ap_pclosef'
,'ap_pfclose'
,'ap_psocket'
,'ap_pclosesocket'
,'ap_note_subprocess'
,'ap_md5contextTo64'
,'ap_md5digest'
,'ap_MD5Init'
,'ap_get_time'
,'ap_gm_timestr_822'
,'ap_get_gmtoff'
,'ap_tm2sec'
,'ap_get_local_host'
,'ap_block_alarms'
,'ap_unblock_alarms'
,'ap_check_alarm'
,'ap_pduphostent'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_BUFF_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_cmd_parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_command_rec_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(_configfile_t_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(_conn_rec_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[5],Addr(_handler_rec_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[6],Addr(_htaccess_result_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[7],Addr(_module_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[8],Addr(_module_struct_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[9],Addr(_regex_t_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[10],Addr(_request_rec_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[11],Addr(_server_rec_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[12],Addr(_SPerDir_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[13],Addr(_SPerServer_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[14],Addr(_stat_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[15],Addr(_uri_components_)));
RegisterProc(nil,MethodNames[16],mtProc,TypeInfo(_T0),[
TypeInfo(ap_int),TypeInfo(Boolean)],Addr(ap_is_HTTP_INFO),cRegister);

RegisterProc(nil,MethodNames[17],mtProc,TypeInfo(_T1),[
TypeInfo(ap_int),TypeInfo(Boolean)],Addr(ap_is_HTTP_SUCCESS),cRegister);

RegisterProc(nil,MethodNames[18],mtProc,TypeInfo(_T2),[
TypeInfo(ap_int),TypeInfo(Boolean)],Addr(ap_is_HTTP_REDIRECT),cRegister);

RegisterProc(nil,MethodNames[19],mtProc,TypeInfo(_T3),[
TypeInfo(ap_int),TypeInfo(Boolean)],Addr(ap_is_HTTP_ERROR),cRegister);

RegisterProc(nil,MethodNames[20],mtProc,TypeInfo(_T4),[
TypeInfo(ap_int),TypeInfo(Boolean)],Addr(ap_is_HTTP_CLIENT_ERROR),cRegister);

RegisterProc(nil,MethodNames[21],mtProc,TypeInfo(_T5),[
TypeInfo(ap_int),TypeInfo(Boolean)],Addr(ap_is_HTTP_SERVER_ERROR),cRegister);

RegisterProc(nil,MethodNames[22],mtProc,TypeInfo(_T6),[
TypeInfoPointer,TypeInfoPointer],Addr(ap_make_sub_pool),cStdCall);

RegisterProc(nil,MethodNames[23],mtProc,TypeInfo(_T7),[
TypeInfoPointer],Addr(ap_clear_pool),cStdCall);

RegisterProc(nil,MethodNames[24],mtProc,TypeInfo(_T8),[
TypeInfoPointer],Addr(ap_destroy_pool),cStdCall);

RegisterProc(nil,MethodNames[25],mtProc,TypeInfo(_T9),[
TypeInfoPointer,TypeInfo(ap_long)],Addr(ap_bytes_in_pool),cStdCall);

RegisterProc(nil,MethodNames[26],mtProc,TypeInfo(_T10),[TypeInfo(ap_long)],Addr(ap_bytes_in_free_blocks),cStdCall);

RegisterProc(nil,MethodNames[27],mtProc,TypeInfo(_T11),[
TypeInfoPointer,
TypeInfo(ap_int),TypeInfoPointer],Addr(ap_palloc),cStdCall);

RegisterProc(nil,MethodNames[28],mtProc,TypeInfo(_T12),[
TypeInfoPointer,
TypeInfo(ap_int),TypeInfoPointer],Addr(ap_pcalloc),cStdCall);

RegisterProc(nil,MethodNames[29],mtProc,TypeInfo(_T15),[
TypeInfoPointer,
TypeInfo(ap_int),
TypeInfo(ap_int),TypeInfoPointer],Addr(ap_make_array),cStdCall);

RegisterProc(nil,MethodNames[30],mtProc,TypeInfo(_T16),[
TypeInfoPointer,TypeInfoPointer],Addr(ap_push_array),cStdCall);

RegisterProc(nil,MethodNames[31],mtProc,TypeInfo(_T17),[
TypeInfoPointer,
TypeInfoPointer],Addr(ap_array_cat),cStdCall);

RegisterProc(nil,MethodNames[32],mtProc,TypeInfo(_T18),[
TypeInfoPointer,
TypeInfoPointer,TypeInfoPointer],Addr(ap_copy_array),cStdCall);

RegisterProc(nil,MethodNames[33],mtProc,TypeInfo(_T19),[
TypeInfoPointer,
TypeInfoPointer,TypeInfoPointer],Addr(ap_copy_array_hdr),cStdCall);

RegisterProc(nil,MethodNames[34],mtProc,TypeInfo(_T20),[
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,TypeInfoPointer],Addr(ap_append_arrays),cStdCall);

RegisterProc(nil,MethodNames[35],mtProc,TypeInfo(_T21),[
TypeInfoPointer,
TypeInfo(ap_int),TypeInfoPointer],Addr(ap_make_table),cStdCall);

RegisterProc(nil,MethodNames[36],mtProc,TypeInfo(_T22),[
TypeInfoPointer,
TypeInfoPointer,TypeInfoPointer],Addr(ap_copy_table),cStdCall);

RegisterProc(nil,MethodNames[37],mtProc,TypeInfo(_T23),[
TypeInfoPointer,TypeInfoPointer],Addr(ap_table_elts),cStdCall);

RegisterProc(nil,MethodNames[38],mtProc,TypeInfo(_T24),[
TypeInfoPointer,TypeInfo(ap_int)],Addr(ap_is_empty_table),cStdCall);

RegisterProc(nil,MethodNames[39],mtProc,TypeInfo(_T34),[
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,TypeInfoPointer],Addr(ap_overlay_tables),cStdCall);

RegisterProc(nil,MethodNames[40],mtProc,TypeInfo(_T35),[
TypeInfoPointer],Addr(ap_clear_table),cStdCall);

RegisterProc(nil,MethodNames[41],mtProc,TypeInfo(_T38),NoParams,Addr(ap_cleanup_for_exec),cStdCall);

RegisterProc(nil,MethodNames[42],mtProc,TypeInfo(_T39),[
TypeInfoPointer,
TypeInfo(ap_int)],Addr(ap_note_cleanups_for_fd),cStdCall);

RegisterProc(nil,MethodNames[43],mtProc,TypeInfo(_T40),[
TypeInfoPointer,
TypeInfo(ap_int)],Addr(ap_kill_cleanups_for_fd),cStdCall);

RegisterProc(nil,MethodNames[44],mtProc,TypeInfo(_T41),[
TypeInfoPointer,
TypeInfo(ap_int)],Addr(ap_note_cleanups_for_socket),cStdCall);

RegisterProc(nil,MethodNames[45],mtProc,TypeInfo(_T42),[
TypeInfoPointer,
TypeInfo(ap_int)],Addr(ap_kill_cleanups_for_socket),cStdCall);

RegisterProc(nil,MethodNames[46],mtProc,TypeInfo(_T43),[
TypeInfoPointer,
TypeInfoPointer],Addr(ap_note_cleanups_for_file),cStdCall);

RegisterProc(nil,MethodNames[47],mtProc,TypeInfo(_T46),[
TypeInfoPointer,
TypeInfo(ap_int),TypeInfo(ap_int)],Addr(ap_pclosef),cStdCall);

RegisterProc(nil,MethodNames[48],mtProc,TypeInfo(_T49),[
TypeInfoPointer,
TypeInfoPointer,TypeInfo(ap_int)],Addr(ap_pfclose),cStdCall);

RegisterProc(nil,MethodNames[49],mtProc,TypeInfo(_T50),[
TypeInfoPointer,
TypeInfo(ap_int),
TypeInfo(ap_int),
TypeInfo(ap_int),TypeInfo(ap_int)],Addr(ap_psocket),cStdCall);

RegisterProc(nil,MethodNames[50],mtProc,TypeInfo(_T51),[
TypeInfoPointer,
TypeInfo(ap_int),TypeInfo(ap_int)],Addr(ap_pclosesocket),cStdCall);

RegisterProc(nil,MethodNames[51],mtProc,TypeInfo(_T56),[
TypeInfoPointer,
TypeInfo(ap_int),
TypeInfo(kill_conditions)],Addr(ap_note_subprocess),cStdCall);

RegisterProc(nil,MethodNames[52],mtProc,TypeInfo(_T67),[
TypeInfoPointer,
TypeInfoPointer,TypeInfoPChar],Addr(ap_md5contextTo64),cStdCall);

RegisterProc(nil,MethodNames[53],mtProc,TypeInfo(_T68),[
TypeInfoPointer,
TypeInfoPointer,TypeInfoPChar],Addr(ap_md5digest),cStdCall);

RegisterProc(nil,MethodNames[54],mtProc,TypeInfo(_T69),[
TypeInfoPointer],Addr(ap_MD5Init),cStdCall);

RegisterProc(nil,MethodNames[55],mtProc,TypeInfo(_T72),[TypeInfoPChar],Addr(ap_get_time),cStdCall);

RegisterProc(nil,MethodNames[56],mtProc,TypeInfo(_T74),[
TypeInfoPointer,
TypeInfo(time_t),TypeInfoPChar],Addr(ap_gm_timestr_822),cStdCall);

RegisterProc(nil,MethodNames[57],mtProc,TypeInfo(_T75),[
TypeInfo(ap_long),TypeInfoPointer],Addr(ap_get_gmtoff),cStdCall);

RegisterProc(nil,MethodNames[58],mtProc,TypeInfo(_T76),[
TypeInfoPointer,TypeInfo(time_t)],Addr(ap_tm2sec),cStdCall);

RegisterProc(nil,MethodNames[59],mtProc,TypeInfo(_T96),[
TypeInfoPointer,TypeInfoPChar],Addr(ap_get_local_host),cStdCall);

RegisterProc(nil,MethodNames[60],mtProc,TypeInfo(_T122),NoParams,Addr(ap_block_alarms),cStdCall);

RegisterProc(nil,MethodNames[61],mtProc,TypeInfo(_T123),NoParams,Addr(ap_unblock_alarms),cStdCall);

RegisterProc(nil,MethodNames[62],mtProc,TypeInfo(_T124),NoParams,Addr(ap_check_alarm),cStdCall);

RegisterProc(nil,MethodNames[63],mtProc,TypeInfo(_T131),[
TypeInfoPointer,
TypeInfoPointer,TypeInfoPointer],Addr(ap_pduphostent),cStdCall);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'ap_pstrdup',mtProc,TypeInfo(_T13),[
TypeInfoPointer,
TypeInfoPChar,TypeInfoPChar],Addr(ap_pstrdup),cStdCall)}

{RegisterProc(nil,'ap_pstrndup',mtProc,TypeInfo(_T14),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfo(ap_int),TypeInfoPChar],Addr(ap_pstrndup),cStdCall)}

{RegisterProc(nil,'ap_table_set',mtProc,TypeInfo(_T25),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfoPChar],Addr(ap_table_set),cStdCall)}

{RegisterProc(nil,'ap_table_setn',mtProc,TypeInfo(_T26),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfoPChar],Addr(ap_table_setn),cStdCall)}

{RegisterProc(nil,'ap_table_merge',mtProc,TypeInfo(_T27),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfoPChar],Addr(ap_table_merge),cStdCall)}

{RegisterProc(nil,'ap_table_mergen',mtProc,TypeInfo(_T28),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfoPChar],Addr(ap_table_mergen),cStdCall)}

{RegisterProc(nil,'ap_table_add',mtProc,TypeInfo(_T29),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfoPChar],Addr(ap_table_add),cStdCall)}

{RegisterProc(nil,'ap_table_addn',mtProc,TypeInfo(_T30),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfoPChar],Addr(ap_table_addn),cStdCall)}

{RegisterProc(nil,'ap_table_unset',mtProc,TypeInfo(_T31),[
TypeInfoPointer,
TypeInfoPChar],Addr(ap_table_unset),cStdCall)}

{RegisterProc(nil,'ap_table_get',mtProc,TypeInfo(_T32),[
TypeInfoPointer,
TypeInfoPChar,TypeInfoPChar],Addr(ap_table_get),cStdCall)}

{RegisterProc(nil,'ap_register_cleanup',mtProc,TypeInfo(_T36),[
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(TCleanupFunc),
TypeInfo(TCleanupFunc)],Addr(ap_register_cleanup),cStdCall)}

{RegisterProc(nil,'ap_kill_cleanup',mtProc,TypeInfo(_T37),[
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(TCleanupFunc)],Addr(ap_kill_cleanup),cStdCall)}

{RegisterProc(nil,'ap_run_cleanup',mtProc,TypeInfo(_T44),[
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(TCleanupFunc)],Addr(ap_run_cleanup),cStdCall)}

{RegisterProc(nil,'ap_popenf',mtProc,TypeInfo(_T45),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfo(ap_int),
TypeInfo(ap_int),TypeInfo(ap_int)],Addr(ap_popenf),cStdCall)}

{RegisterProc(nil,'ap_pfopen',mtProc,TypeInfo(_T47),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfoPChar,TypeInfoPointer],Addr(ap_pfopen),cStdCall)}

{RegisterProc(nil,'ap_pfdopen',mtProc,TypeInfo(_T48),[
TypeInfoPointer,
TypeInfo(ap_int),
TypeInfoPChar,TypeInfoPointer],Addr(ap_pfdopen),cStdCall)}

{RegisterProc(nil,'ap_pregcomp',mtProc,TypeInfo(_T52),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfo(ap_int),TypeInfoPointer],Addr(ap_pregcomp),cStdCall)}

{RegisterProc(nil,'ap_pregsub',mtProc,TypeInfo(_T53),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(size_t),
TypeInfoPointer,TypeInfoPChar],Addr(ap_pregsub),cStdCall)}

{RegisterProc(nil,'ap_pregfree',mtProc,TypeInfo(_T54),[
TypeInfoPointer,
TypeInfoPointer],Addr(ap_pregfree),cStdCall)}

{RegisterProc(nil,'ap_os_is_path_absolute',mtProc,TypeInfo(_T55),[
TypeInfoPChar,TypeInfo(ap_int)],Addr(ap_os_is_path_absolute),cStdCall)}

{RegisterProc(nil,'ap_spawn_child',mtProc,TypeInfo(_T57),[
TypeInfoPointer,
TypeInfo(TSpawnFunc),
TypeInfoPointer,
TypeInfo(kill_conditions),
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,TypeInfo(ap_int)],Addr(ap_spawn_child),cStdCall)}

{RegisterProc(nil,'ap_bspawn_child',mtProc,TypeInfo(_T58),[
TypeInfoPointer,
TypeInfo(TbSpawnFunc),
TypeInfoPointer,
TypeInfo(kill_conditions),
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,TypeInfo(ap_int)],Addr(ap_bspawn_child),cStdCall)}

{RegisterProc(nil,'ap_call_exec',mtProc,TypeInfo(_T59),[
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPChar,
TypeInfoPointer,
TypeInfo(ap_int),TypeInfo(ap_int)],Addr(ap_call_exec),cStdCall)}

{RegisterProc(nil,'ap_can_exec',mtProc,TypeInfo(_T60),[
TypeInfoPointer,TypeInfo(ap_int)],Addr(ap_can_exec),cStdCall)}

{RegisterProc(nil,'ap_add_cgi_vars',mtProc,TypeInfo(_T61),[
TypeInfoPointer],Addr(ap_add_cgi_vars),cStdCall)}

{RegisterProc(nil,'ap_add_common_vars',mtProc,TypeInfo(_T62),[
TypeInfoPointer],Addr(ap_add_common_vars),cStdCall)}

{RegisterProc(nil,'ap_scan_script_header_err',mtProc,TypeInfo(_T63),[
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPChar,TypeInfo(ap_int)],Addr(ap_scan_script_header_err),cStdCall)}

{RegisterProc(nil,'ap_scan_script_header_err_buff',mtProc,TypeInfo(_T64),[
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPChar,TypeInfo(ap_int)],Addr(ap_scan_script_header_err_buff),cStdCall)}

{RegisterProc(nil,'ap_scan_script_header',mtProc,TypeInfo(_T65),[
TypeInfoPointer,
TypeInfoPointer,TypeInfo(ap_int)],Addr(ap_scan_script_header),cStdCall)}

{RegisterProc(nil,'ap_md5',mtProc,TypeInfo(_T66),[
TypeInfoPointer,
TypeInfoPChar,TypeInfoPChar],Addr(ap_md5),cStdCall)}

{RegisterProc(nil,'ap_MD5Final',mtProc,TypeInfo(_T70),[
TypeInfoPChar,
TypeInfoPointer],Addr(ap_MD5Final),cStdCall)}

{RegisterProc(nil,'ap_MD5Update',mtProc,TypeInfo(_T71),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfo(ap_unsigned)],Addr(ap_MD5Update),cStdCall)}

{RegisterProc(nil,'ap_ht_time',mtProc,TypeInfo(_T73),[
TypeInfoPointer,
TypeInfo(time_t),
TypeInfoPChar,
TypeInfo(ap_int),TypeInfoPChar],Addr(ap_ht_time),cStdCall)}

{RegisterProc(nil,'ap_parseHTTPdate',mtProc,TypeInfo(_T77),[
TypeInfoPChar,TypeInfo(time_t)],Addr(ap_parseHTTPdate),cStdCall)}

{RegisterProc(nil,'ap_getparents',mtProc,TypeInfo(_T78),[
TypeInfoPChar],Addr(ap_getparents),cStdCall)}

{RegisterProc(nil,'ap_no2slash',mtProc,TypeInfo(_T79),[
TypeInfoPChar],Addr(ap_no2slash),cStdCall)}

{RegisterProc(nil,'ap_make_dirstr',mtProc,TypeInfo(_T80),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfo(ap_int),TypeInfoPChar],Addr(ap_make_dirstr),cStdCall)}

{RegisterProc(nil,'ap_make_dirstr_parent',mtProc,TypeInfo(_T81),[
TypeInfoPointer,
TypeInfoPChar,TypeInfoPChar],Addr(ap_make_dirstr_parent),cStdCall)}

{RegisterProc(nil,'ap_make_dirstr_prefix',mtProc,TypeInfo(_T82),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(ap_int),TypeInfoPChar],Addr(ap_make_dirstr_prefix),cStdCall)}

{RegisterProc(nil,'ap_count_dirs',mtProc,TypeInfo(_T83),[
TypeInfoPChar,TypeInfo(ap_int)],Addr(ap_count_dirs),cStdCall)}

{RegisterProc(nil,'ap_chdir_file',mtProc,TypeInfo(_T84),[
TypeInfoPChar],Addr(ap_chdir_file),cStdCall)}

{RegisterProc(nil,'ap_unescape_url',mtProc,TypeInfo(_T85),[
TypeInfoPChar,TypeInfo(ap_int)],Addr(ap_unescape_url),cStdCall)}

{RegisterProc(nil,'ap_construct_server',mtProc,TypeInfo(_T86),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfo(ap_int),
TypeInfoPointer,TypeInfoPChar],Addr(ap_construct_server),cStdCall)}

{RegisterProc(nil,'ap_construct_url',mtProc,TypeInfo(_T87),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfoPointer,TypeInfoPChar],Addr(ap_construct_url),cStdCall)}

{RegisterProc(nil,'ap_escape_path_segment',mtProc,TypeInfo(_T88),[
TypeInfoPointer,
TypeInfoPChar,TypeInfoPChar],Addr(ap_escape_path_segment),cStdCall)}

{RegisterProc(nil,'ap_os_escape_path',mtProc,TypeInfo(_T89),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfo(ap_int),TypeInfoPChar],Addr(ap_os_escape_path),cStdCall)}

{RegisterProc(nil,'ap_is_directory',mtProc,TypeInfo(_T90),[
TypeInfoPChar,TypeInfo(ap_int)],Addr(ap_is_directory),cStdCall)}

{RegisterProc(nil,'ap_make_full_path',mtProc,TypeInfo(_T91),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfoPChar,TypeInfoPChar],Addr(ap_make_full_path),cStdCall)}

{RegisterProc(nil,'ap_is_url',mtProc,TypeInfo(_T92),[
TypeInfoPChar,TypeInfo(ap_int)],Addr(ap_is_url),cStdCall)}

{RegisterProc(nil,'ap_server_root_relative',mtProc,TypeInfo(_T93),[
TypeInfoPointer,
TypeInfoPChar,TypeInfoPChar],Addr(ap_server_root_relative),cStdCall)}

{RegisterProc(nil,'ap_os_canonical_filename',mtProc,TypeInfo(_T94),[
TypeInfoPointer,
TypeInfoPChar,TypeInfo(ap_int)],Addr(ap_os_canonical_filename),cStdCall)}

{RegisterProc(nil,'ap_get_virthost_addr',mtProc,TypeInfo(_T95),[
TypeInfoPChar,
TypeInfoPointer,TypeInfo(ap_unsignedlong)],Addr(ap_get_virthost_addr),cStdCall)}

{RegisterProc(nil,'ap_get_remote_host',mtProc,TypeInfo(_T97),[
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(ap_int),TypeInfoPChar],Addr(ap_get_remote_host),cStdCall)}

{RegisterProc(nil,'ap_send_fd',mtProc,TypeInfo(_T98),[
TypeInfoPointer,
TypeInfoPointer,TypeInfo(ap_long)],Addr(ap_send_fd),cStdCall)}

{RegisterProc(nil,'ap_send_fd_length',mtProc,TypeInfo(_T99),[
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(ap_long),TypeInfo(ap_long)],Addr(ap_send_fd_length),cStdCall)}

{RegisterProc(nil,'ap_send_fb',mtProc,TypeInfo(_T100),[
TypeInfoPointer,
TypeInfoPointer,TypeInfo(ap_long)],Addr(ap_send_fb),cStdCall)}

{RegisterProc(nil,'ap_send_fb_length',mtProc,TypeInfo(_T101),[
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(ap_long),TypeInfo(ap_long)],Addr(ap_send_fb_length),cStdCall)}

{RegisterProc(nil,'ap_rwrite',mtProc,TypeInfo(_T102),[
TypeInfoUntyped,
TypeInfo(ap_int),
TypeInfoPointer,TypeInfo(ap_int)],Addr(ap_rwrite),cStdCall)}

{RegisterProc(nil,'ap_rputc',mtProc,TypeInfo(_T103),[
TypeInfo(ap_int),
TypeInfoPointer,TypeInfo(ap_int)],Addr(ap_rputc),cStdCall)}

{RegisterProc(nil,'ap_rputs',mtProc,TypeInfo(_T104),[
TypeInfoPChar,
TypeInfoPointer,TypeInfo(ap_int)],Addr(ap_rputs),cStdCall)}

{RegisterProc(nil,'ap_rflush',mtProc,TypeInfo(_T105),[
TypeInfoPointer,TypeInfo(ap_int)],Addr(ap_rflush),cStdCall)}

{RegisterProc(nil,'ap_setup_client_block',mtProc,TypeInfo(_T106),[
TypeInfoPointer,
TypeInfo(ap_int),TypeInfo(ap_int)],Addr(ap_setup_client_block),cStdCall)}

{RegisterProc(nil,'ap_should_client_block',mtProc,TypeInfo(_T107),[
TypeInfoPointer,TypeInfo(ap_int)],Addr(ap_should_client_block),cStdCall)}

{RegisterProc(nil,'ap_get_client_block',mtProc,TypeInfo(_T108),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfo(ap_int),TypeInfo(ap_long)],Addr(ap_get_client_block),cStdCall)}

{RegisterProc(nil,'ap_send_http_header',mtProc,TypeInfo(_T109),[
TypeInfoPointer],Addr(ap_send_http_header),cStdCall)}

{RegisterProc(nil,'ap_send_size',mtProc,TypeInfo(_T110),[
TypeInfo(size_t),
TypeInfoPointer],Addr(ap_send_size),cStdCall)}

{RegisterProc(nil,'ap_sub_req_lookup_uri',mtProc,TypeInfo(_T111),[
TypeInfoPChar,
TypeInfoPointer,TypeInfoPointer],Addr(ap_sub_req_lookup_uri),cStdCall)}

{RegisterProc(nil,'ap_sub_req_lookup_file',mtProc,TypeInfo(_T112),[
TypeInfoPChar,
TypeInfoPointer,TypeInfoPointer],Addr(ap_sub_req_lookup_file),cStdCall)}

{RegisterProc(nil,'ap_run_sub_req',mtProc,TypeInfo(_T113),[
TypeInfoPointer,TypeInfo(ap_int)],Addr(ap_run_sub_req),cStdCall)}

{RegisterProc(nil,'ap_destroy_sub_req',mtProc,TypeInfo(_T114),[
TypeInfoPointer],Addr(ap_destroy_sub_req),cStdCall)}

{RegisterProc(nil,'ap_internal_redirect',mtProc,TypeInfo(_T115),[
TypeInfoPChar,
TypeInfoPointer],Addr(ap_internal_redirect),cStdCall)}

{RegisterProc(nil,'ap_internal_redirect_handler',mtProc,TypeInfo(_T116),[
TypeInfoPChar,
TypeInfoPointer],Addr(ap_internal_redirect_handler),cStdCall)}

{RegisterProc(nil,'ap_hard_timeout',mtProc,TypeInfo(_T117),[
TypeInfoPChar,
TypeInfoPointer],Addr(ap_hard_timeout),cStdCall)}

{RegisterProc(nil,'ap_keepalive_timeout',mtProc,TypeInfo(_T118),[
TypeInfoPChar,
TypeInfoPointer],Addr(ap_keepalive_timeout),cStdCall)}

{RegisterProc(nil,'ap_soft_timeout',mtProc,TypeInfo(_T119),[
TypeInfoPChar,
TypeInfoPointer],Addr(ap_soft_timeout),cStdCall)}

{RegisterProc(nil,'ap_reset_timeout',mtProc,TypeInfo(_T120),[
TypeInfoPointer],Addr(ap_reset_timeout),cStdCall)}

{RegisterProc(nil,'ap_kill_timeout',mtProc,TypeInfo(_T121),[
TypeInfoPointer],Addr(ap_kill_timeout),cStdCall)}

{RegisterProc(nil,'ap_log_error',mtProc,TypeInfo(_T125),[
TypeInfoPChar,
TypeInfo(ap_int),
TypeInfo(ap_int),
TypeInfoPointer,
TypeInfoPChar],Addr(ap_log_error),cStdCall)}

{RegisterProc(nil,'ap_log_rerror',mtProc,TypeInfo(_T126),[
TypeInfoPChar,
TypeInfo(ap_int),
TypeInfo(ap_int),
TypeInfoPointer,
TypeInfoPChar],Addr(ap_log_rerror),cStdCall)}

{RegisterProc(nil,'ap_parse_uri_components',mtProc,TypeInfo(_T127),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfoPointer,TypeInfo(ap_int)],Addr(ap_parse_uri_components),cStdCall)}

{RegisterProc(nil,'ap_parse_hostinfo_components',mtProc,TypeInfo(_T128),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfoPointer,TypeInfo(ap_int)],Addr(ap_parse_hostinfo_components),cStdCall)}

{RegisterProc(nil,'ap_unparse_uri_components',mtProc,TypeInfo(_T129),[
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(ap_unsigned),TypeInfoPChar],Addr(ap_unparse_uri_components),cStdCall)}

{RegisterProc(nil,'ap_pgethostbyname',mtProc,TypeInfo(_T130),[
TypeInfoPointer,
TypeInfoPChar,TypeInfoPointer],Addr(ap_pgethostbyname),cStdCall)}

{RegisterProc(nil,'ap_child_terminate',mtProc,TypeInfo(_T132),[
TypeInfoPointer],Addr(ap_child_terminate),cStdCall)}

{RegisterProc(nil,'ap_default_port',mtProc,TypeInfo(_T133),[
TypeInfoPointer,TypeInfo(ap_unsignedshort)],Addr(ap_default_port),cStdCall)}

{RegisterProc(nil,'ap_is_default_port',mtProc,TypeInfo(_T134),[
TypeInfo(ap_int),
TypeInfoPointer,TypeInfo(ap_int)],Addr(ap_is_default_port),cStdCall)}

{RegisterProc(nil,'ap_default_port_for_scheme',mtProc,TypeInfo(_T135),[
TypeInfoPChar,TypeInfo(ap_unsignedshort)],Addr(ap_default_port_for_scheme),cStdCall)}

{RegisterProc(nil,'ap_http_method',mtProc,TypeInfo(_T136),[
TypeInfoPointer,TypeInfoPChar],Addr(ap_http_method),cStdCall)}

{RegisterProc(nil,'ap_default_type',mtProc,TypeInfo(_T137),[
TypeInfoPointer,TypeInfoPChar],Addr(ap_default_type),cStdCall)}

{RegisterProc(nil,'ap_get_basic_auth_pw',mtProc,TypeInfo(_T138),[
TypeInfoPointer,
TypeInfoPointer,TypeInfo(ap_int)],Addr(ap_get_basic_auth_pw),cStdCall)}

{RegisterProc(nil,'ap_get_module_config',mtProc,TypeInfo(_T139),[
TypeInfoPointer,
TypeInfoPointer,TypeInfoPointer],Addr(ap_get_module_config),cStdCall)}

{RegisterProc(nil,'ap_get_remote_logname',mtProc,TypeInfo(_T140),[
TypeInfoPointer,TypeInfoPChar],Addr(ap_get_remote_logname),cStdCall)}

{RegisterProc(nil,'ap_get_server_name',mtProc,TypeInfo(_T141),[
TypeInfoPointer,TypeInfoPChar],Addr(ap_get_server_name),cStdCall)}

{RegisterProc(nil,'ap_get_server_port',mtProc,TypeInfo(_T142),[
TypeInfoPointer,TypeInfo(ap_unsigned)],Addr(ap_get_server_port),cStdCall)}

{RegisterProc(nil,'ap_is_initial_req',mtProc,TypeInfo(_T143),[
TypeInfoPointer,TypeInfo(ap_int)],Addr(ap_is_initial_req),cStdCall)}

{RegisterProc(nil,'ap_pcfg_openfile',mtProc,TypeInfo(_T144),[
TypeInfoPointer,
TypeInfoPChar,TypeInfoPointer],Addr(ap_pcfg_openfile),cStdCall)}

{RegisterProc(nil,'ap_cfg_getline',mtProc,TypeInfo(_T145),[
TypeInfoPChar,
TypeInfo(size_t),
TypeInfoPointer,TypeInfo(Integer)],Addr(ap_cfg_getline),cStdCall)}

{RegisterProc(nil,'ap_cfg_getc',mtProc,TypeInfo(_T146),[
TypeInfoPointer,TypeInfo(Integer)],Addr(ap_cfg_getc),cStdCall)}

{RegisterProc(nil,'ap_cfg_closefile',mtProc,TypeInfo(_T147),[
TypeInfoPointer,TypeInfo(Integer)],Addr(ap_cfg_closefile),cStdCall)}

{RegisterProc(nil,'ap_getword',mtProc,TypeInfo(_T148),[
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(Char),TypeInfoPChar],Addr(ap_getword),cStdCall)}

{RegisterProc(nil,'ap_note_auth_failure',mtProc,TypeInfo(_T149),[
TypeInfoPointer],Addr(ap_note_auth_failure),cRegister)}

{RegisterProc(nil,'ap_note_basic_auth_failure',mtProc,TypeInfo(_T150),[
TypeInfoPointer],Addr(ap_note_basic_auth_failure),cRegister)}

{RegisterProc(nil,'ap_note_digest_auth_failure',mtProc,TypeInfo(_T151),[
TypeInfoPointer],Addr(ap_note_digest_auth_failure),cRegister)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
