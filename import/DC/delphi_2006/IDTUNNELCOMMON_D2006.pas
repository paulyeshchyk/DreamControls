{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDTUNNELCOMMON_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Classes,
  SyncObjs,
  IdException,
  IdHashCRC,
  IdStack,
  IdCoder,
  IdResourceStrings,
  IdTCPServer,
  IdTunnelCommon;
function ConvertTIdHeaderToVariant(var R : TIdHeader) : OleVariant;
function ConvertVariantToTIdHeader(const V : OleVariant) : TIdHeader;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TIdHeader__Wrapper = class(TDCRecordWrapper)
private
fR : TIdHeader;
public
function GetRecordPtr : pointer; override;
published
procedure setCRC16(const val : Word);
function getCRC16 : Word;
property CRC16 : Word read getCRC16 write setCRC16;
procedure setMsgType(const val : Word);
function getMsgType : Word;
property MsgType : Word read getMsgType write setMsgType;
procedure setMsgLen(const val : Word);
function getMsgLen : Word;
property MsgLen : Word read getMsgLen write setMsgLen;
procedure setUserId(const val : Word);
function getUserId : Word;
property UserId : Word read getUserId write setUserId;
procedure setPort(const val : Word);
function getPort : Word;
property Port : Word read getPort write setPort;
end;
type
_T0 = procedure (p0 : string) of object;

_T1 = _T0;

_T2 = procedure  of object;

_T3 = _T2;

_T5 = _T2;

function __TIdHeader__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIdHeader__Wrapper.setCRC16(const val : Word);
begin
TIdHeader(GetRecordPtr^).CRC16 := val;
end;
function __TIdHeader__Wrapper.getCRC16 : Word;
begin
result := TIdHeader(GetRecordPtr^).CRC16;
end;
procedure __TIdHeader__Wrapper.setMsgType(const val : Word);
begin
TIdHeader(GetRecordPtr^).MsgType := val;
end;
function __TIdHeader__Wrapper.getMsgType : Word;
begin
result := TIdHeader(GetRecordPtr^).MsgType;
end;
procedure __TIdHeader__Wrapper.setMsgLen(const val : Word);
begin
TIdHeader(GetRecordPtr^).MsgLen := val;
end;
function __TIdHeader__Wrapper.getMsgLen : Word;
begin
result := TIdHeader(GetRecordPtr^).MsgLen;
end;
procedure __TIdHeader__Wrapper.setUserId(const val : Word);
begin
TIdHeader(GetRecordPtr^).UserId := val;
end;
function __TIdHeader__Wrapper.getUserId : Word;
begin
result := TIdHeader(GetRecordPtr^).UserId;
end;
procedure __TIdHeader__Wrapper.setPort(const val : Word);
begin
TIdHeader(GetRecordPtr^).Port := val;
end;
function __TIdHeader__Wrapper.getPort : Word;
begin
result := TIdHeader(GetRecordPtr^).Port;
end;
function _TIdHeader_ : IDispatch;
begin
  result := __TIdHeader__Wrapper.Create;
end;

type __TIdHeader__Wrapper__ = class(__TIdHeader__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIdHeader__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIdHeaderToVariant(var R : TIdHeader) : OleVariant;
var
__rw : __TIdHeader__Wrapper__;
begin
__rw := __TIdHeader__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIdHeader(const V : OleVariant) : TIdHeader;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIdHeader((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTLogger__Active(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TLogger(Instance).Active;
end;

function __DC__GetTReceiver__Data(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TReceiver(Instance).Data;
end;

procedure __DC__SetTReceiver__Data(Instance : TObject; Params : PVariantArgList);
begin
TReceiver(Instance).Data:=OleVariant(Params^[0]);
end;

function __DC__GetTReceiver__NewMessage(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TReceiver(Instance).NewMessage;
end;

function __DC__GetTReceiver__CRCFailed(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TReceiver(Instance).CRCFailed;
end;

procedure __RegisterProps;
begin
RegisterProperty(TLogger,'Active',__DC__GetTLogger__Active,nil);
RegisterProperty(TReceiver,'Data',__DC__GetTReceiver__Data,__DC__SetTReceiver__Data);
RegisterProperty(TReceiver,'NewMessage',__DC__GetTReceiver__NewMessage,nil);
RegisterProperty(TReceiver,'CRCFailed',__DC__GetTReceiver__CRCFailed,nil);
end;

const __ConstNames0 : array[0..16] of string = (
'BUFFERLEN'
,'NumberOfConnectionsType'
,'NumberOfPacketsType'
,'CompressionRatioType'
,'CompressedBytesType'
,'BytesReadType'
,'BytesWriteType'
,'NumberOfClientsType'
,'NumberOfSlavesType'
,'NumberOfServicesType'
,'tmError'
,'tmData'
,'tmDisconnect'
,'tmConnect'
,'tmCustom'
,'soIncrease'
,'soDecrease'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,BUFFERLEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,NumberOfConnectionsType));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,NumberOfPacketsType));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,CompressionRatioType));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,CompressedBytesType));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,BytesReadType));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,BytesWriteType));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,NumberOfClientsType));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,NumberOfSlavesType));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,NumberOfServicesType));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,tmError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,tmData));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,tmDisconnect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,tmConnect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,tmCustom));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,soIncrease));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,soDecrease));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..12] of TClass = (
EIdTunnelConnectToMasterFailed,
EIdTunnelCRCFailed,
EIdTunnelCustomMessageInterpretationFailure,
EIdTunnelDontAllowConnections,
EIdTunnelException,
EIdTunnelInterpretationOfMessageFailed,
EIdTunnelMessageHandlingFailed,
EIdTunnelMessageTypeRecognitionError,
EIdTunnelTransformError,
EIdTunnelTransformErrorBeforeSend,
TLogger,
TReceiver,
TSender
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'TIdHeader'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TIdHeader_)));
RegRegisterMethod(TLogger,'LogEvent',TypeInfo(_T0),[
TypeInfo(string)],Addr(TLogger.LogEvent));

RegisterProc(TLogger,'Create',mtConstructor,TypeInfo(_T1),[
TypeInfo(string)],Addr(TLogger.Create),cRegister);

RegRegisterMethod(TReceiver,'ShiftData',TypeInfo(_T2),NoParams,Addr(TReceiver.ShiftData));

RegisterProc(TReceiver,'Create',mtConstructor,TypeInfo(_T3),NoParams,Addr(TReceiver.Create),cRegister);

RegisterProc(TSender,'Create',mtConstructor,TypeInfo(_T5),NoParams,Addr(TSender.Create),cRegister);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
RegisterEvent(TypeInfo(TSendMsgEvent),[
TypeInfo(TIdPeerThread),
TypeInfo(string)]);

RegisterEvent(TypeInfo(TSendMsgEventC),[
TypeInfo(string)]);

{RegisterEvent(TypeInfo(TSendTrnEvent),[
TypeInfo(TIdPeerThread),
TypeInfo(IDispatch),
TypeInfo(string)]);}

{RegisterEvent(TypeInfo(TSendTrnEventC),[
TypeInfo(IDispatch),
TypeInfo(string)]);}

RegisterEvent(TypeInfo(TTunnelEventC),[
TypeInfo(TReceiver)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
