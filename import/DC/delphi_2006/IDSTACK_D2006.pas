{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDSTACK_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdException,
  IdStackConsts,
  IdGlobal,
  IdStack;
function ConvertTIdInAddrToVariant(var R : TIdInAddr) : OleVariant;
function ConvertVariantToTIdInAddr(const V : OleVariant) : TIdInAddr;
function ConvertTIdSunBToVariant(var R : TIdSunB) : OleVariant;
function ConvertVariantToTIdSunB(const V : OleVariant) : TIdSunB;
function ConvertTIdSunWToVariant(var R : TIdSunW) : OleVariant;
function ConvertVariantToTIdSunW(const V : OleVariant) : TIdSunW;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TIdInAddr__Wrapper = class(TDCRecordWrapper)
private
fR : TIdInAddr;
public
function GetRecordPtr : pointer; override;
published
procedure setS_addr(const val : longword);
function getS_addr : longword;
property S_addr : longword read getS_addr write setS_addr;
end;
type __TIdSunB__Wrapper = class(TDCRecordWrapper)
private
fR : TIdSunB;
public
function GetRecordPtr : pointer; override;
published
procedure sets_b1(const val : Byte);
function gets_b1 : Byte;
property s_b1 : Byte read gets_b1 write sets_b1;
procedure sets_b2(const val : Byte);
function gets_b2 : Byte;
property s_b2 : Byte read gets_b2 write sets_b2;
procedure sets_b3(const val : Byte);
function gets_b3 : Byte;
property s_b3 : Byte read gets_b3 write sets_b3;
procedure sets_b4(const val : Byte);
function gets_b4 : Byte;
property s_b4 : Byte read gets_b4 write sets_b4;
end;
type __TIdSunW__Wrapper = class(TDCRecordWrapper)
private
fR : TIdSunW;
public
function GetRecordPtr : pointer; override;
published
procedure sets_w1(const val : Word);
function gets_w1 : Word;
property s_w1 : Word read gets_w1 write sets_w1;
procedure sets_w2(const val : Word);
function gets_w2 : Word;
property s_w2 : Word read gets_w2 write sets_w2;
end;
type
_T0 = function (p0 : Integer): TIdStackSocketHandle of object;

_T1 = procedure (p0 : TIdStackSocketHandle) of object;

_T2 = function : TIdSocketList of object;

_T3 = _T1;

_T4 = function : Integer of object;

_T5 = procedure  of object;

_T6 = function : string of object;

_T7 = function : TStrings of object;

_T8 = function (const p0 : Integer): Boolean of object;

_T9 = _T5;

_T10 = function : TIdStack of object;

_T11 = function (const p0 : Integer;
const p1 : Integer): TIdStackSocketHandle of object;

_T12 = function (const p0 : string;
p1 : PByte;
p2 : PByte;
p3 : PByte;
p4 : PByte;
p5 : PIdIPType;
p6 : PIdIPClass): Boolean of object;

_T13 = function (const p0 : string): TIdIPType of object;

_T14 = function (const p0 : string): TIdIPClass of object;

_T15 = function (const p0 : string): Boolean of object;

_T16 = function (const p0 : string;
const p1 : TIdIPType): Boolean of object;

_T17 = function (const p0 : string;
const p1 : TIdIPClass): Boolean of object;

_T18 = _T15;

_T19 = _T15;

_T20 = procedure (const p0 : Integer) of object;

_T21 = function (const p0 : string): string of object;

_T22 = function (p0 : TIdStackSocketHandle;
var p1 : string;
var p2 : Integer): TIdStackSocketHandle of object;

_T23 = function (p0 : TIdStackSocketHandle;
const p1 : Integer;
const p2 : string;
const p3 : Integer): Integer of object;

_T24 = function (p0 : TIdStackSocketHandle): Integer of object;

_T25 = function (const p0 : TIdStackSocketHandle;
const p1 : Integer;
const p2 : string;
const p3 : Integer): Integer of object;

_T26 = _T21;

_T27 = _T6;

_T28 = _T21;

_T29 = function (const p0 : string): Integer of object;

_T30 = function (const p0 : Integer): TStrings of object;

_T31 = function (p0 : Word): Word of object;

_T32 = function (p0 : TIdStackSocketHandle;
p1 : Integer): Integer of object;

_T33 = _T31;

_T34 = function (p0 : longword): longword of object;

_T35 = _T34;

_T36 = function (p0 : TIdStackSocketHandle;
var p1 : TIdStackSocketHandle;
const p2 : Integer;
const p3 : Integer): Integer of object;

_T37 = function (const p0 : TIdStackSocketHandle;
var p1 : TIdStackSocketHandle;
const p2 : Integer;
const p3 : Integer;
var p4 : string;
var p5 : Integer): Integer of object;

_T38 = function (p0 : TList;
p1 : TList;
p2 : TList;
p3 : Integer): Integer of object;

_T39 = _T36;

_T40 = function (p0 : TIdStackSocketHandle;
var p1 : TIdStackSocketHandle;
const p2 : Integer;
const p3 : Integer;
const p4 : string;
const p5 : Integer): Integer of object;

{_T41 = function (p0 : TIdStackSocketHandle;
p1 : Integer;
p2 : Integer;
p3 : PChar;
p4 : Integer): Integer of object;}

_T42 = function (p0 : Integer;
p1 : Integer;
p2 : Integer): TIdStackSocketHandle of object;

_T43 = _T32;

_T44 = function (const p0 : Integer): string of object;

_T45 = _T4;

_T46 = procedure (p0 : TIdStackSocketHandle;
var p1 : Integer;
var p2 : string;
var p3 : Integer) of object;

_T47 = _T46;

{_T48 = function (p0 : TIdStackSocketHandle;
p1 : Integer;
p2 : Integer;
p3 : PChar;
var p4 : Integer): Integer of object;}

_T49 = function (p0 : string): IDispatch of object;

_T50 = function (var p0): string of object;

_T51 = procedure (p0 : string;
var p1) of object;

function __TIdInAddr__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIdInAddr__Wrapper.setS_addr(const val : longword);
begin
TIdInAddr(GetRecordPtr^).S_addr := val;
end;
function __TIdInAddr__Wrapper.getS_addr : longword;
begin
result := TIdInAddr(GetRecordPtr^).S_addr;
end;
function __TIdSunB__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIdSunB__Wrapper.sets_b1(const val : Byte);
begin
TIdSunB(GetRecordPtr^).s_b1 := val;
end;
function __TIdSunB__Wrapper.gets_b1 : Byte;
begin
result := TIdSunB(GetRecordPtr^).s_b1;
end;
procedure __TIdSunB__Wrapper.sets_b2(const val : Byte);
begin
TIdSunB(GetRecordPtr^).s_b2 := val;
end;
function __TIdSunB__Wrapper.gets_b2 : Byte;
begin
result := TIdSunB(GetRecordPtr^).s_b2;
end;
procedure __TIdSunB__Wrapper.sets_b3(const val : Byte);
begin
TIdSunB(GetRecordPtr^).s_b3 := val;
end;
function __TIdSunB__Wrapper.gets_b3 : Byte;
begin
result := TIdSunB(GetRecordPtr^).s_b3;
end;
procedure __TIdSunB__Wrapper.sets_b4(const val : Byte);
begin
TIdSunB(GetRecordPtr^).s_b4 := val;
end;
function __TIdSunB__Wrapper.gets_b4 : Byte;
begin
result := TIdSunB(GetRecordPtr^).s_b4;
end;
function __TIdSunW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIdSunW__Wrapper.sets_w1(const val : Word);
begin
TIdSunW(GetRecordPtr^).s_w1 := val;
end;
function __TIdSunW__Wrapper.gets_w1 : Word;
begin
result := TIdSunW(GetRecordPtr^).s_w1;
end;
procedure __TIdSunW__Wrapper.sets_w2(const val : Word);
begin
TIdSunW(GetRecordPtr^).s_w2 := val;
end;
function __TIdSunW__Wrapper.gets_w2 : Word;
begin
result := TIdSunW(GetRecordPtr^).s_w2;
end;
function _TIdInAddr_ : IDispatch;
begin
  result := __TIdInAddr__Wrapper.Create;
end;
function _TIdSunB_ : IDispatch;
begin
  result := __TIdSunB__Wrapper.Create;
end;
function _TIdSunW_ : IDispatch;
begin
  result := __TIdSunW__Wrapper.Create;
end;
function __TIdStack__CheckForSocketError__Wrapper(__Instance : TIdStack;
const p0 : Integer): Boolean;
begin
result := TIdStack(__Instance).CheckForSocketError(p0);
end;

function __TIdStack__CreateSocketHandle__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := TIdStack(__Instance).CreateSocketHandle(OleVariant(pargs^[0]));
end;
2:
begin
result := TIdStack(__Instance).CreateSocketHandle(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function __TIdStack__GetIPInfo__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := TIdStack(__Instance).GetIPInfo(OleVariant(pargs^[0]));
end;
2:
begin
result := TIdStack(__Instance).GetIPInfo(OleVariant(pargs^[1]),VarToPointer(OleVariant(pargs^[0])));
end;
3:
begin
result := TIdStack(__Instance).GetIPInfo(OleVariant(pargs^[2]),VarToPointer(OleVariant(pargs^[1])),VarToPointer(OleVariant(pargs^[0])));
end;
4:
begin
result := TIdStack(__Instance).GetIPInfo(OleVariant(pargs^[3]),VarToPointer(OleVariant(pargs^[2])),VarToPointer(OleVariant(pargs^[1])),VarToPointer(OleVariant(pargs^[0])));
end;
5:
begin
result := TIdStack(__Instance).GetIPInfo(OleVariant(pargs^[4]),VarToPointer(OleVariant(pargs^[3])),VarToPointer(OleVariant(pargs^[2])),VarToPointer(OleVariant(pargs^[1])),VarToPointer(OleVariant(pargs^[0])));
end;
6:
begin
result := TIdStack(__Instance).GetIPInfo(OleVariant(pargs^[5]),VarToPointer(OleVariant(pargs^[4])),VarToPointer(OleVariant(pargs^[3])),VarToPointer(OleVariant(pargs^[2])),VarToPointer(OleVariant(pargs^[1])),VarToPointer(OleVariant(pargs^[0])));
end;
7:
begin
result := TIdStack(__Instance).GetIPInfo(OleVariant(pargs^[6]),VarToPointer(OleVariant(pargs^[5])),VarToPointer(OleVariant(pargs^[4])),VarToPointer(OleVariant(pargs^[3])),VarToPointer(OleVariant(pargs^[2])),VarToPointer(OleVariant(pargs^[1])),VarToPointer(OleVariant(pargs^[0])));
end;
end
end;

function __TIdStack__StringToTInAddr__Wrapper(__Instance : TIdStack;
p0 : string): IDispatch;
var
__result : TIdInAddr;
__wrapper : __TIdInAddr__Wrapper;
begin
__result := TIdStack(__Instance).StringToTInAddr(p0);
__wrapper := __TIdInAddr__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;


type __TIdInAddr__Wrapper__ = class(__TIdInAddr__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIdInAddr__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIdInAddrToVariant(var R : TIdInAddr) : OleVariant;
var
__rw : __TIdInAddr__Wrapper__;
begin
__rw := __TIdInAddr__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIdInAddr(const V : OleVariant) : TIdInAddr;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIdInAddr((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TIdSunB__Wrapper__ = class(__TIdSunB__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIdSunB__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIdSunBToVariant(var R : TIdSunB) : OleVariant;
var
__rw : __TIdSunB__Wrapper__;
begin
__rw := __TIdSunB__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIdSunB(const V : OleVariant) : TIdSunB;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIdSunB((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TIdSunW__Wrapper__ = class(__TIdSunW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIdSunW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIdSunWToVariant(var R : TIdSunW) : OleVariant;
var
__rw : __TIdSunW__Wrapper__;
begin
__rw := __TIdSunW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIdSunW(const V : OleVariant) : TIdSunW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIdSunW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTIdSocketList__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdSocketList(Instance).Items[OleVariant(Params^[0])];
end;

function __DC__GetTIdStack__LastError(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdStack(Instance).LastError;
end;

function __DC__GetTIdStack__LocalAddress(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdStack(Instance).LocalAddress;
end;

function __DC__GetTIdStack__LocalAddresses(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdStack(Instance).LocalAddresses);
end;

procedure __RegisterProps;
begin
RegisterIndexedProperty(TIdSocketList,'Items',1,True,__DC__GetTIdSocketList__Items,nil);
RegisterProperty(TIdStack,'LastError',__DC__GetTIdStack__LastError,nil);
RegisterProperty(TIdStack,'LocalAddress',__DC__GetTIdStack__LocalAddress,nil);
RegisterProperty(TIdStack,'LocalAddresses',__DC__GetTIdStack__LocalAddresses,nil);
end;

function __DC__GetIdStack__GStack(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(IdStack.GStack);
end;

procedure __DC__SetIdStack__GStack(Instance : TObject; Params : PVariantArgList);
begin
TObject(IdStack.GStack):=(VarToObject(OleVariant(Params^[0])));
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('GStack',__DC__GetIdStack__GStack,__DC__SetIdStack__GStack));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..8] of string = (
'Id_IPInvalid'
,'Id_IPDotted'
,'Id_IPNumeric'
,'Id_IPClassUnkn'
,'Id_IPClassA'
,'Id_IPClassB'
,'Id_IPClassC'
,'Id_IPClassD'
,'Id_IPClassE'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,Id_IPInvalid));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,Id_IPDotted));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,Id_IPNumeric));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,Id_IPClassUnkn));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,Id_IPClassA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,Id_IPClassB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,Id_IPClassC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,Id_IPClassD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,Id_IPClassE));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..5] of TClass = (
EIdInvalidIPAddress,
EIdStackError,
EIdStackInitializationFailed,
EIdStackSetSizeExceeded,
TIdSocketList,
TIdStack
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..2] of string = (
'TIdInAddr'
,'TIdSunB'
,'TIdSunW'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TIdInAddr_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_TIdSunB_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_TIdSunW_)));
//RegRegisterMethod(TIdSocketList,'GetItem',TypeInfo(_T0),[TypeInfo(Integer),TypeInfo(TIdStackSocketHandle)], pointer(0));
RegRegisterMethod(TIdSocketList,'GetItem',TypeInfo(_T0),[TypeInfo(Integer),TypeInfo(TIdStackSocketHandle)],  getVMTProcAddr('TIdSocketList','GetItem',0));


//RegRegisterMethod(TIdSocketList,'Add',TypeInfo(_T1),[TypeInfo(TIdStackSocketHandle)], pointer(4));
RegRegisterMethod(TIdSocketList,'Add',TypeInfo(_T1),[TypeInfo(TIdStackSocketHandle)],  getVMTProcAddr('TIdSocketList','Add',4));


RegisterProc(TIdSocketList,'CreateSocketList',mtClassMethod,TypeInfo(_T2),[TypeInfo(TIdSocketList)],Addr(TIdSocketList.CreateSocketList),cRegister);

//RegRegisterMethod(TIdSocketList,'Remove',TypeInfo(_T3),[TypeInfo(TIdStackSocketHandle)], pointer(8));
RegRegisterMethod(TIdSocketList,'Remove',TypeInfo(_T3),[TypeInfo(TIdStackSocketHandle)],  getVMTProcAddr('TIdSocketList','Remove',8));


//RegRegisterMethod(TIdSocketList,'Count',TypeInfo(_T4),[TypeInfo(Integer)], pointer(12));
RegRegisterMethod(TIdSocketList,'Count',TypeInfo(_T4),[TypeInfo(Integer)],  getVMTProcAddr('TIdSocketList','Count',12));


//RegRegisterMethod(TIdStack,'PopulateLocalAddresses',TypeInfo(_T5),NoParams, pointer(0));
RegRegisterMethod(TIdStack,'PopulateLocalAddresses',TypeInfo(_T5),NoParams,  getVMTProcAddr('TIdStack','PopulateLocalAddresses',0));


//RegRegisterMethod(TIdStack,'WSGetLocalAddress',TypeInfo(_T6),[TypeInfo(string)], pointer(4));
RegRegisterMethod(TIdStack,'WSGetLocalAddress',TypeInfo(_T6),[TypeInfo(string)],  getVMTProcAddr('TIdStack','WSGetLocalAddress',4));


//RegRegisterMethod(TIdStack,'WSGetLocalAddresses',TypeInfo(_T7),[TypeInfo(TStrings)], pointer(8));
RegRegisterMethod(TIdStack,'WSGetLocalAddresses',TypeInfo(_T7),[TypeInfo(TStrings)],  getVMTProcAddr('TIdStack','WSGetLocalAddresses',8));


RegRegisterMethod(TIdStack,'CheckForSocketError',TypeInfo(_T8),[
TypeInfo(Integer),TypeInfo(Boolean)],Addr(__TIdStack__CheckForSocketError__Wrapper));

//RegisterProc(TIdStack,'Create',mtConstructor,TypeInfo(_T9),NoParams, pointer(12),cRegister);
RegisterProc(TIdStack,'Create',mtConstructor,TypeInfo(_T9),NoParams,  getVMTProcAddr('TIdStack','Create',12),cRegister);


RegisterProc(TIdStack,'CreateStack',mtClassMethod,TypeInfo(_T10),[TypeInfo(TIdStack)],Addr(TIdStack.CreateStack),cRegister);

RegisterProc(TIdStack,'CreateSocketHandle',mtScriptMethod,TypeInfo(_T11),[
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(TIdStackSocketHandle)],Addr(__TIdStack__CreateSocketHandle__Wrapper),cRegister);

RegisterProc(TIdStack,'GetIPInfo',mtScriptMethod,TypeInfo(_T12),[
TypeInfo(string),
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,TypeInfo(Boolean)],Addr(__TIdStack__GetIPInfo__Wrapper),cRegister);

RegRegisterMethod(TIdStack,'GetIPType',TypeInfo(_T13),[
TypeInfo(string),TypeInfo(TIdIPType)],Addr(TIdStack.GetIPType));

RegRegisterMethod(TIdStack,'GetIPClass',TypeInfo(_T14),[
TypeInfo(string),TypeInfo(TIdIPClass)],Addr(TIdStack.GetIPClass));

RegRegisterMethod(TIdStack,'IsIP',TypeInfo(_T15),[
TypeInfo(string),TypeInfo(Boolean)],Addr(TIdStack.IsIP));

RegRegisterMethod(TIdStack,'IPIsType',TypeInfo(_T16),[
TypeInfo(string),
TypeInfo(TIdIPType),TypeInfo(Boolean)],Addr(TIdStack.IPIsType));

RegRegisterMethod(TIdStack,'IPIsClass',TypeInfo(_T17),[
TypeInfo(string),
TypeInfo(TIdIPClass),TypeInfo(Boolean)],Addr(TIdStack.IPIsClass));

RegRegisterMethod(TIdStack,'IsDottedIP',TypeInfo(_T18),[
TypeInfo(string),TypeInfo(Boolean)],Addr(TIdStack.IsDottedIP));

RegRegisterMethod(TIdStack,'IsNumericIP',TypeInfo(_T19),[
TypeInfo(string),TypeInfo(Boolean)],Addr(TIdStack.IsNumericIP));

RegRegisterMethod(TIdStack,'RaiseSocketError',TypeInfo(_T20),[
TypeInfo(Integer)],Addr(TIdStack.RaiseSocketError));

RegRegisterMethod(TIdStack,'ResolveHost',TypeInfo(_T21),[
TypeInfo(string),TypeInfo(string)],Addr(TIdStack.ResolveHost));

//RegRegisterMethod(TIdStack,'WSAccept',TypeInfo(_T22),[TypeInfo(TIdStackSocketHandle),TypeInfo(string),TypeInfo(Integer),TypeInfo(TIdStackSocketHandle)], pointer(16));
RegRegisterMethod(TIdStack,'WSAccept',TypeInfo(_T22),[TypeInfo(TIdStackSocketHandle),TypeInfo(string),TypeInfo(Integer),TypeInfo(TIdStackSocketHandle)],  getVMTProcAddr('TIdStack','WSAccept',16));


//RegRegisterMethod(TIdStack,'WSBind',TypeInfo(_T23),[TypeInfo(TIdStackSocketHandle),TypeInfo(Integer),TypeInfo(string),TypeInfo(Integer),TypeInfo(Integer)], pointer(20));
RegRegisterMethod(TIdStack,'WSBind',TypeInfo(_T23),[TypeInfo(TIdStackSocketHandle),TypeInfo(Integer),TypeInfo(string),TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TIdStack','WSBind',20));


//RegRegisterMethod(TIdStack,'WSCloseSocket',TypeInfo(_T24),[TypeInfo(TIdStackSocketHandle),TypeInfo(Integer)], pointer(24));
RegRegisterMethod(TIdStack,'WSCloseSocket',TypeInfo(_T24),[TypeInfo(TIdStackSocketHandle),TypeInfo(Integer)],  getVMTProcAddr('TIdStack','WSCloseSocket',24));


//RegRegisterMethod(TIdStack,'WSConnect',TypeInfo(_T25),[TypeInfo(TIdStackSocketHandle),TypeInfo(Integer),TypeInfo(string),TypeInfo(Integer),TypeInfo(Integer)], pointer(28));
RegRegisterMethod(TIdStack,'WSConnect',TypeInfo(_T25),[TypeInfo(TIdStackSocketHandle),TypeInfo(Integer),TypeInfo(string),TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TIdStack','WSConnect',28));


//RegRegisterMethod(TIdStack,'WSGetHostByName',TypeInfo(_T26),[TypeInfo(string),TypeInfo(string)], pointer(32));
RegRegisterMethod(TIdStack,'WSGetHostByName',TypeInfo(_T26),[TypeInfo(string),TypeInfo(string)],  getVMTProcAddr('TIdStack','WSGetHostByName',32));


//RegRegisterMethod(TIdStack,'WSGetHostName',TypeInfo(_T27),[TypeInfo(string)], pointer(36));
RegRegisterMethod(TIdStack,'WSGetHostName',TypeInfo(_T27),[TypeInfo(string)],  getVMTProcAddr('TIdStack','WSGetHostName',36));


//RegRegisterMethod(TIdStack,'WSGetHostByAddr',TypeInfo(_T28),[TypeInfo(string),TypeInfo(string)], pointer(40));
RegRegisterMethod(TIdStack,'WSGetHostByAddr',TypeInfo(_T28),[TypeInfo(string),TypeInfo(string)],  getVMTProcAddr('TIdStack','WSGetHostByAddr',40));


//RegRegisterMethod(TIdStack,'WSGetServByName',TypeInfo(_T29),[TypeInfo(string),TypeInfo(Integer)], pointer(44));
RegRegisterMethod(TIdStack,'WSGetServByName',TypeInfo(_T29),[TypeInfo(string),TypeInfo(Integer)],  getVMTProcAddr('TIdStack','WSGetServByName',44));


//RegRegisterMethod(TIdStack,'WSGetServByPort',TypeInfo(_T30),[TypeInfo(Integer),TypeInfo(TStrings)], pointer(48));
RegRegisterMethod(TIdStack,'WSGetServByPort',TypeInfo(_T30),[TypeInfo(Integer),TypeInfo(TStrings)],  getVMTProcAddr('TIdStack','WSGetServByPort',48));


//RegRegisterMethod(TIdStack,'WSHToNs',TypeInfo(_T31),[TypeInfo(Word),TypeInfo(Word)], pointer(52));
RegRegisterMethod(TIdStack,'WSHToNs',TypeInfo(_T31),[TypeInfo(Word),TypeInfo(Word)],  getVMTProcAddr('TIdStack','WSHToNs',52));


//RegRegisterMethod(TIdStack,'WSListen',TypeInfo(_T32),[TypeInfo(TIdStackSocketHandle),TypeInfo(Integer),TypeInfo(Integer)], pointer(56));
RegRegisterMethod(TIdStack,'WSListen',TypeInfo(_T32),[TypeInfo(TIdStackSocketHandle),TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TIdStack','WSListen',56));


//RegRegisterMethod(TIdStack,'WSNToHs',TypeInfo(_T33),[TypeInfo(Word),TypeInfo(Word)], pointer(60));
RegRegisterMethod(TIdStack,'WSNToHs',TypeInfo(_T33),[TypeInfo(Word),TypeInfo(Word)],  getVMTProcAddr('TIdStack','WSNToHs',60));


//RegRegisterMethod(TIdStack,'WSHToNL',TypeInfo(_T34),[TypeInfo(longword),TypeInfo(longword)], pointer(64));
RegRegisterMethod(TIdStack,'WSHToNL',TypeInfo(_T34),[TypeInfo(longword),TypeInfo(longword)],  getVMTProcAddr('TIdStack','WSHToNL',64));


//RegRegisterMethod(TIdStack,'WSNToHL',TypeInfo(_T35),[TypeInfo(longword),TypeInfo(longword)], pointer(68));
RegRegisterMethod(TIdStack,'WSNToHL',TypeInfo(_T35),[TypeInfo(longword),TypeInfo(longword)],  getVMTProcAddr('TIdStack','WSNToHL',68));


//RegRegisterMethod(TIdStack,'WSRecv',TypeInfo(_T36),[TypeInfo(TIdStackSocketHandle),TypeInfo(TIdStackSocketHandle),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Integer)], pointer(72));
RegRegisterMethod(TIdStack,'WSRecv',TypeInfo(_T36),[TypeInfo(TIdStackSocketHandle),TypeInfo(TIdStackSocketHandle),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TIdStack','WSRecv',72));


//RegRegisterMethod(TIdStack,'WSRecvFrom',TypeInfo(_T37),[TypeInfo(TIdStackSocketHandle),TypeInfo(TIdStackSocketHandle),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(string),TypeInfo(Integer),TypeInfo(Integer)], pointer(76));
RegRegisterMethod(TIdStack,'WSRecvFrom',TypeInfo(_T37),[TypeInfo(TIdStackSocketHandle),TypeInfo(TIdStackSocketHandle),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(string),TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TIdStack','WSRecvFrom',76));


//RegRegisterMethod(TIdStack,'WSSelect',TypeInfo(_T38),[TypeInfo(TList),TypeInfo(TList),TypeInfo(TList),TypeInfo(Integer),TypeInfo(Integer)], pointer(80));
RegRegisterMethod(TIdStack,'WSSelect',TypeInfo(_T38),[TypeInfo(TList),TypeInfo(TList),TypeInfo(TList),TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TIdStack','WSSelect',80));


//RegRegisterMethod(TIdStack,'WSSend',TypeInfo(_T39),[TypeInfo(TIdStackSocketHandle),TypeInfo(TIdStackSocketHandle),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Integer)], pointer(84));
RegRegisterMethod(TIdStack,'WSSend',TypeInfo(_T39),[TypeInfo(TIdStackSocketHandle),TypeInfo(TIdStackSocketHandle),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TIdStack','WSSend',84));


//RegRegisterMethod(TIdStack,'WSSendTo',TypeInfo(_T40),[TypeInfo(TIdStackSocketHandle),TypeInfo(TIdStackSocketHandle),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(string),TypeInfo(Integer),TypeInfo(Integer)], pointer(88));
RegRegisterMethod(TIdStack,'WSSendTo',TypeInfo(_T40),[TypeInfo(TIdStackSocketHandle),TypeInfo(TIdStackSocketHandle),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(string),TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TIdStack','WSSendTo',88));


//RegRegisterMethod(TIdStack,'WSSocket',TypeInfo(_T42),[TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(TIdStackSocketHandle)], pointer(96));
RegRegisterMethod(TIdStack,'WSSocket',TypeInfo(_T42),[TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(TIdStackSocketHandle)],  getVMTProcAddr('TIdStack','WSSocket',96));


//RegRegisterMethod(TIdStack,'WSShutdown',TypeInfo(_T43),[TypeInfo(TIdStackSocketHandle),TypeInfo(Integer),TypeInfo(Integer)], pointer(100));
RegRegisterMethod(TIdStack,'WSShutdown',TypeInfo(_T43),[TypeInfo(TIdStackSocketHandle),TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TIdStack','WSShutdown',100));


//RegRegisterMethod(TIdStack,'WSTranslateSocketErrorMsg',TypeInfo(_T44),[TypeInfo(Integer),TypeInfo(string)], pointer(104));
RegRegisterMethod(TIdStack,'WSTranslateSocketErrorMsg',TypeInfo(_T44),[TypeInfo(Integer),TypeInfo(string)],  getVMTProcAddr('TIdStack','WSTranslateSocketErrorMsg',104));


//RegRegisterMethod(TIdStack,'WSGetLastError',TypeInfo(_T45),[TypeInfo(Integer)], pointer(108));
RegRegisterMethod(TIdStack,'WSGetLastError',TypeInfo(_T45),[TypeInfo(Integer)],  getVMTProcAddr('TIdStack','WSGetLastError',108));


//RegRegisterMethod(TIdStack,'WSGetPeerName',TypeInfo(_T46),[TypeInfo(TIdStackSocketHandle),TypeInfo(Integer),TypeInfo(string),TypeInfo(Integer)], pointer(112));
RegRegisterMethod(TIdStack,'WSGetPeerName',TypeInfo(_T46),[TypeInfo(TIdStackSocketHandle),TypeInfo(Integer),TypeInfo(string),TypeInfo(Integer)],  getVMTProcAddr('TIdStack','WSGetPeerName',112));


//RegRegisterMethod(TIdStack,'WSGetSockName',TypeInfo(_T47),[TypeInfo(TIdStackSocketHandle),TypeInfo(Integer),TypeInfo(string),TypeInfo(Integer)], pointer(116));
RegRegisterMethod(TIdStack,'WSGetSockName',TypeInfo(_T47),[TypeInfo(TIdStackSocketHandle),TypeInfo(Integer),TypeInfo(string),TypeInfo(Integer)],  getVMTProcAddr('TIdStack','WSGetSockName',116));


RegRegisterMethod(TIdStack,'StringToTInAddr',TypeInfo(_T49),[
TypeInfo(string),TypeInfo(IDispatch)],Addr(__TIdStack__StringToTInAddr__Wrapper));

//RegRegisterMethod(TIdStack,'TInAddrToString',TypeInfo(_T50),[TypeInfoUntyped,TypeInfo(string)], pointer(124));
RegRegisterMethod(TIdStack,'TInAddrToString',TypeInfo(_T50),[TypeInfoUntyped,TypeInfo(string)],  getVMTProcAddr('TIdStack','TInAddrToString',124));


//RegRegisterMethod(TIdStack,'TranslateStringToTInAddr',TypeInfo(_T51),[TypeInfo(string),TypeInfoUntyped], pointer(128));
RegRegisterMethod(TIdStack,'TranslateStringToTInAddr',TypeInfo(_T51),[TypeInfo(string),TypeInfoUntyped],  getVMTProcAddr('TIdStack','TranslateStringToTInAddr',128));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegRegisterMethod(TIdStack,'WSSetSockOpt',TypeInfo(_T41),[
TypeInfo(TIdStackSocketHandle),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfoPChar,
TypeInfo(Integer),TypeInfo(Integer)], pointer(92))}

{RegRegisterMethod(TIdStack,'WSGetSockOpt',TypeInfo(_T48),[
TypeInfo(TIdStackSocketHandle),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfoPChar,
TypeInfo(Integer),TypeInfo(Integer)], pointer(120))}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
