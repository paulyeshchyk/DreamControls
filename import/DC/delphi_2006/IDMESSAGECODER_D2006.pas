{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDMESSAGECODER_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdComponent,
  IdGlobal,
  IdMessage,
  IdMessageCoder;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = function (p0 : TStream;
var p1 : Boolean): TIdMessageDecoder of object;

_T1 = procedure  of object;

_T2 = function : string of object;

_T3 = function (p0 : TIdMessage;
p1 : string): TIdMessageDecoder of object;

_T4 = _T1;

_T5 = function (const p0 : string): TIdMessageDecoderInfo of object;

_T6 = function (p0 : TIdMessage;
const p1 : string): TIdMessageDecoder of object;

_T7 = _T1;

_T8 = procedure (const p0 : string;
p1 : TIdMessageDecoderInfo) of object;

_T9 = procedure (const p0 : string;
p1 : TStream) of object;

_T10 = _T1;

_T11 = procedure (p0 : TIdMessage) of object;

_T12 = function (const p0 : string): TIdMessageEncoderInfo of object;

_T13 = _T1;

_T14 = procedure (const p0 : string;
p1 : TIdMessageEncoderInfo) of object;

function __DC__GetTIdMessageDecoder__Filename(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMessageDecoder(Instance).Filename;
end;

function __DC__GetTIdMessageDecoder__SourceStream(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdMessageDecoder(Instance).SourceStream);
end;

procedure __DC__SetTIdMessageDecoder__SourceStream(Instance : TObject; Params : PVariantArgList);
begin
TIdMessageDecoder(Instance).SourceStream:=TStream(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIdMessageDecoder__Headers(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdMessageDecoder(Instance).Headers);
end;

function __DC__GetTIdMessageDecoder__PartType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMessageDecoder(Instance).PartType;
end;

procedure __RegisterProps;
begin
RegisterProperty(TIdMessageDecoder,'Filename',__DC__GetTIdMessageDecoder__Filename,nil);
RegisterProperty(TIdMessageDecoder,'SourceStream',__DC__GetTIdMessageDecoder__SourceStream,__DC__SetTIdMessageDecoder__SourceStream);
RegisterProperty(TIdMessageDecoder,'Headers',__DC__GetTIdMessageDecoder__Headers,nil);
RegisterProperty(TIdMessageDecoder,'PartType',__DC__GetTIdMessageDecoder__PartType,nil);
end;

const __ConstNames0 : array[0..2] of string = (
'mcptUnknown'
,'mcptText'
,'mcptAttachment'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,mcptUnknown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,mcptText));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,mcptAttachment));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..5] of TClass = (
TIdMessageDecoder,
TIdMessageDecoderInfo,
TIdMessageDecoderList,
TIdMessageEncoder,
TIdMessageEncoderInfo,
TIdMessageEncoderList
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TIdMessageDecoder,'ReadBody',TypeInfo(_T0),[TypeInfo(TStream),TypeInfo(Boolean),TypeInfo(TIdMessageDecoder)], pointer(60));
RegRegisterMethod(TIdMessageDecoder,'ReadBody',TypeInfo(_T0),[TypeInfo(TStream),TypeInfo(Boolean),TypeInfo(TIdMessageDecoder)],  getVMTProcAddr('TIdMessageDecoder','ReadBody',60));


//RegRegisterMethod(TIdMessageDecoder,'ReadHeader',TypeInfo(_T1),NoParams, pointer(64));
RegRegisterMethod(TIdMessageDecoder,'ReadHeader',TypeInfo(_T1),NoParams,  getVMTProcAddr('TIdMessageDecoder','ReadHeader',64));


RegRegisterMethod(TIdMessageDecoder,'ReadLn',TypeInfo(_T2),[TypeInfo(string)],Addr(TIdMessageDecoder.ReadLn));

//RegRegisterMethod(TIdMessageDecoderInfo,'CheckForStart',TypeInfo(_T3),[TypeInfo(TIdMessage),TypeInfo(string),TypeInfo(TIdMessageDecoder)], pointer(0));
RegRegisterMethod(TIdMessageDecoderInfo,'CheckForStart',TypeInfo(_T3),[TypeInfo(TIdMessage),TypeInfo(string),TypeInfo(TIdMessageDecoder)],  getVMTProcAddr('TIdMessageDecoderInfo','CheckForStart',0));


RegisterProc(TIdMessageDecoderInfo,'Create',mtConstructor,TypeInfo(_T4),NoParams, pointer(4),cRegister);

RegisterProc(TIdMessageDecoderList,'ByName',mtClassMethod,TypeInfo(_T5),[
TypeInfo(string),TypeInfo(TIdMessageDecoderInfo)],Addr(TIdMessageDecoderList.ByName),cRegister);

RegisterProc(TIdMessageDecoderList,'CheckForStart',mtClassMethod,TypeInfo(_T6),[
TypeInfo(TIdMessage),
TypeInfo(string),TypeInfo(TIdMessageDecoder)],Addr(TIdMessageDecoderList.CheckForStart),cRegister);

RegisterProc(TIdMessageDecoderList,'Create',mtConstructor,TypeInfo(_T7),NoParams,Addr(TIdMessageDecoderList.Create),cRegister);

RegisterProc(TIdMessageDecoderList,'RegisterDecoder',mtClassMethod,TypeInfo(_T8),[
TypeInfo(string),
TypeInfo(TIdMessageDecoderInfo)],Addr(TIdMessageDecoderList.RegisterDecoder),cRegister);

RegRegisterMethod(TIdMessageEncoder,'Encode',TypeInfo(_T9),[
TypeInfo(string),
TypeInfo(TStream)],Addr(TIdMessageEncoder.Encode));

RegisterProc(TIdMessageEncoderInfo,'Create',mtConstructor,TypeInfo(_T10),NoParams, pointer(0),cRegister);

//RegRegisterMethod(TIdMessageEncoderInfo,'InitializeHeaders',TypeInfo(_T11),[TypeInfo(TIdMessage)], pointer(4));
RegRegisterMethod(TIdMessageEncoderInfo,'InitializeHeaders',TypeInfo(_T11),[TypeInfo(TIdMessage)],  getVMTProcAddr('TIdMessageEncoderInfo','InitializeHeaders',4));


RegisterProc(TIdMessageEncoderList,'ByName',mtClassMethod,TypeInfo(_T12),[
TypeInfo(string),TypeInfo(TIdMessageEncoderInfo)],Addr(TIdMessageEncoderList.ByName),cRegister);

RegisterProc(TIdMessageEncoderList,'Create',mtConstructor,TypeInfo(_T13),NoParams,Addr(TIdMessageEncoderList.Create),cRegister);

RegisterProc(TIdMessageEncoderList,'RegisterEncoder',mtClassMethod,TypeInfo(_T14),[
TypeInfo(string),
TypeInfo(TIdMessageEncoderInfo)],Addr(TIdMessageEncoderList.RegisterEncoder),cRegister);

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
