{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDHTTP_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdException,
  IdAssignedNumbers,
  IdHeaderList,
  IdHTTPHeaderInfo,
  IdSSLOpenSSL,
  IdTCPConnection,
  IdTCPClient,
  IdURI,
  IdCookie,
  IdCookieManager,
  IdAuthentication,
  IdAuthenticationManager,
  IdMultipartFormData,
  IdHTTP;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (const p0 : Integer;
const p1 : string;
const p2 : string) of object;

_T1 = function (p0 : TIdHTTPRequest;
p1 : TIdHTTPResponse): Boolean of object;

_T2 = _T1;

_T3 = function (var p0 : string;
var p1 : TIdHTTPMethod;
p2 : Integer): Boolean of object;

_T4 = procedure (const p0 : TIdHTTPMethod;
p1 : string;
const p2 : TStream;
const p3 : TStream) of object;

_T5 = procedure (p0 : string) of object;

_T6 = procedure (p0 : string;
const p1 : TStream) of object;

_T7 = _T6;

_T8 = _T5;

_T9 = function (p0 : string;
const p1 : TStrings): string of object;

_T10 = function (p0 : string;
const p1 : TStream): string of object;

_T11 = procedure (p0 : TIdCustomHTTP) of object;

_T12 = function : TIdHTTPWhatsNext of object;

_T13 = procedure (p0 : TIdURI) of object;

_T14 = procedure  of object;

_T15 = _T11;

_T16 = _T11;

function __DC__GetEIdHTTPProtocolException__ErrorMessage(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := EIdHTTPProtocolException(Instance).ErrorMessage;
end;

function __DC__GetTIdCustomHTTP__ResponseCode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdCustomHTTP(Instance).ResponseCode;
end;

function __DC__GetTIdCustomHTTP__ResponseText(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdCustomHTTP(Instance).ResponseText;
end;

function __DC__GetTIdCustomHTTP__Response(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdCustomHTTP(Instance).Response);
end;

function __DC__GetTIdCustomHTTP__URL(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdCustomHTTP(Instance).URL);
end;

function __DC__GetTIdCustomHTTP__AuthRetries(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdCustomHTTP(Instance).AuthRetries;
end;

procedure __DC__SetTIdCustomHTTP__AuthRetries(Instance : TObject; Params : PVariantArgList);
begin
TIdCustomHTTP(Instance).AuthRetries:=OleVariant(Params^[0]);
end;

function __DC__GetTIdCustomHTTP__AllowCookies(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdCustomHTTP(Instance).AllowCookies;
end;

procedure __DC__SetTIdCustomHTTP__AllowCookies(Instance : TObject; Params : PVariantArgList);
begin
TIdCustomHTTP(Instance).AllowCookies:=OleVariant(Params^[0]);
end;

function __DC__GetTIdCustomHTTP__HandleRedirects(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdCustomHTTP(Instance).HandleRedirects;
end;

procedure __DC__SetTIdCustomHTTP__HandleRedirects(Instance : TObject; Params : PVariantArgList);
begin
TIdCustomHTTP(Instance).HandleRedirects:=OleVariant(Params^[0]);
end;

function __DC__GetTIdCustomHTTP__ProtocolVersion(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdCustomHTTP(Instance).ProtocolVersion;
end;

procedure __DC__SetTIdCustomHTTP__ProtocolVersion(Instance : TObject; Params : PVariantArgList);
begin
TIdCustomHTTP(Instance).ProtocolVersion:=OleVariant(Params^[0]);
end;

function __DC__GetTIdCustomHTTP__RedirectMaximum(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdCustomHTTP(Instance).RedirectMaximum;
end;

procedure __DC__SetTIdCustomHTTP__RedirectMaximum(Instance : TObject; Params : PVariantArgList);
begin
TIdCustomHTTP(Instance).RedirectMaximum:=OleVariant(Params^[0]);
end;

function __DC__GetTIdCustomHTTP__ProxyParams(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdCustomHTTP(Instance).ProxyParams);
end;

procedure __DC__SetTIdCustomHTTP__ProxyParams(Instance : TObject; Params : PVariantArgList);
begin
TIdCustomHTTP(Instance).ProxyParams:=TIdProxyConnectionInfo(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIdCustomHTTP__Request(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdCustomHTTP(Instance).Request);
end;

procedure __DC__SetTIdCustomHTTP__Request(Instance : TObject; Params : PVariantArgList);
begin
TIdCustomHTTP(Instance).Request:=TIdHTTPRequest(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIdCustomHTTP__HTTPOptions(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TIdHTTPOptions;
begin
tmp := TIdCustomHTTP(Instance).HTTPOptions;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTIdCustomHTTP__HTTPOptions(Instance : TObject; Params : PVariantArgList);
var
  tmp : TIdHTTPOptions;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TIdCustomHTTP(Instance).HTTPOptions:=tmp;
end;

function __DC__GetTIdCustomHTTP__CookieManager(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdCustomHTTP(Instance).CookieManager);
end;

procedure __DC__SetTIdCustomHTTP__CookieManager(Instance : TObject; Params : PVariantArgList);
begin
TIdCustomHTTP(Instance).CookieManager:=TIdCookieManager(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIdCustomHTTP__AuthenticationManager(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdCustomHTTP(Instance).AuthenticationManager);
end;

procedure __DC__SetTIdCustomHTTP__AuthenticationManager(Instance : TObject; Params : PVariantArgList);
begin
TIdCustomHTTP(Instance).AuthenticationManager:=TIdAuthenticationManager(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIdCustomHTTP__ConnectTimeout(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdCustomHTTP(Instance).ConnectTimeout;
end;

procedure __DC__SetTIdCustomHTTP__ConnectTimeout(Instance : TObject; Params : PVariantArgList);
begin
TIdCustomHTTP(Instance).ConnectTimeout:=OleVariant(Params^[0]);
end;

function __DC__GetTIdHTTPProtocol__Request(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdHTTPProtocol(Instance).Request);
end;

function __DC__GetTIdHTTPProtocol__Response(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdHTTPProtocol(Instance).Response);
end;

function __DC__GetTIdHTTPRequest__URL(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHTTPRequest(Instance).URL;
end;

procedure __DC__SetTIdHTTPRequest__URL(Instance : TObject; Params : PVariantArgList);
begin
TIdHTTPRequest(Instance).URL:=OleVariant(Params^[0]);
end;

function __DC__GetTIdHTTPRequest__Method(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHTTPRequest(Instance).Method;
end;

procedure __DC__SetTIdHTTPRequest__Method(Instance : TObject; Params : PVariantArgList);
begin
TIdHTTPRequest(Instance).Method:=OleVariant(Params^[0]);
end;

function __DC__GetTIdHTTPRequest__Source(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdHTTPRequest(Instance).Source);
end;

procedure __DC__SetTIdHTTPRequest__Source(Instance : TObject; Params : PVariantArgList);
begin
TIdHTTPRequest(Instance).Source:=TStream(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIdHTTPRequest__UseProxy(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHTTPRequest(Instance).UseProxy;
end;

function __DC__GetTIdHTTPResponse__KeepAlive(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHTTPResponse(Instance).KeepAlive;
end;

procedure __DC__SetTIdHTTPResponse__KeepAlive(Instance : TObject; Params : PVariantArgList);
begin
TIdHTTPResponse(Instance).KeepAlive:=OleVariant(Params^[0]);
end;

function __DC__GetTIdHTTPResponse__ResponseText(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHTTPResponse(Instance).ResponseText;
end;

procedure __DC__SetTIdHTTPResponse__ResponseText(Instance : TObject; Params : PVariantArgList);
begin
TIdHTTPResponse(Instance).ResponseText:=OleVariant(Params^[0]);
end;

function __DC__GetTIdHTTPResponse__ResponseCode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHTTPResponse(Instance).ResponseCode;
end;

procedure __DC__SetTIdHTTPResponse__ResponseCode(Instance : TObject; Params : PVariantArgList);
begin
TIdHTTPResponse(Instance).ResponseCode:=OleVariant(Params^[0]);
end;

function __DC__GetTIdHTTPResponse__ResponseVersion(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHTTPResponse(Instance).ResponseVersion;
end;

procedure __DC__SetTIdHTTPResponse__ResponseVersion(Instance : TObject; Params : PVariantArgList);
begin
TIdHTTPResponse(Instance).ResponseVersion:=OleVariant(Params^[0]);
end;

function __DC__GetTIdHTTPResponse__ContentStream(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdHTTPResponse(Instance).ContentStream);
end;

procedure __DC__SetTIdHTTPResponse__ContentStream(Instance : TObject; Params : PVariantArgList);
begin
TIdHTTPResponse(Instance).ContentStream:=TStream(VarToObject(OleVariant(Params^[0])));
end;

procedure __RegisterProps;
begin
RegisterProperty(EIdHTTPProtocolException,'ErrorMessage',__DC__GetEIdHTTPProtocolException__ErrorMessage,nil);
RegisterProperty(TIdCustomHTTP,'ResponseCode',__DC__GetTIdCustomHTTP__ResponseCode,nil);
RegisterProperty(TIdCustomHTTP,'ResponseText',__DC__GetTIdCustomHTTP__ResponseText,nil);
RegisterProperty(TIdCustomHTTP,'Response',__DC__GetTIdCustomHTTP__Response,nil);
RegisterProperty(TIdCustomHTTP,'URL',__DC__GetTIdCustomHTTP__URL,nil);
RegisterProperty(TIdCustomHTTP,'AuthRetries',__DC__GetTIdCustomHTTP__AuthRetries,__DC__SetTIdCustomHTTP__AuthRetries);
RegisterProperty(TIdCustomHTTP,'AllowCookies',__DC__GetTIdCustomHTTP__AllowCookies,__DC__SetTIdCustomHTTP__AllowCookies);
RegisterProperty(TIdCustomHTTP,'HandleRedirects',__DC__GetTIdCustomHTTP__HandleRedirects,__DC__SetTIdCustomHTTP__HandleRedirects);
RegisterProperty(TIdCustomHTTP,'ProtocolVersion',__DC__GetTIdCustomHTTP__ProtocolVersion,__DC__SetTIdCustomHTTP__ProtocolVersion);
RegisterProperty(TIdCustomHTTP,'RedirectMaximum',__DC__GetTIdCustomHTTP__RedirectMaximum,__DC__SetTIdCustomHTTP__RedirectMaximum);
RegisterProperty(TIdCustomHTTP,'ProxyParams',__DC__GetTIdCustomHTTP__ProxyParams,__DC__SetTIdCustomHTTP__ProxyParams);
RegisterProperty(TIdCustomHTTP,'Request',__DC__GetTIdCustomHTTP__Request,__DC__SetTIdCustomHTTP__Request);
RegisterProperty(TIdCustomHTTP,'HTTPOptions',__DC__GetTIdCustomHTTP__HTTPOptions,__DC__SetTIdCustomHTTP__HTTPOptions);
RegisterProperty(TIdCustomHTTP,'CookieManager',__DC__GetTIdCustomHTTP__CookieManager,__DC__SetTIdCustomHTTP__CookieManager);
RegisterProperty(TIdCustomHTTP,'AuthenticationManager',__DC__GetTIdCustomHTTP__AuthenticationManager,__DC__SetTIdCustomHTTP__AuthenticationManager);
RegisterProperty(TIdCustomHTTP,'ConnectTimeout',__DC__GetTIdCustomHTTP__ConnectTimeout,__DC__SetTIdCustomHTTP__ConnectTimeout);
RegisterProperty(TIdHTTPProtocol,'Request',__DC__GetTIdHTTPProtocol__Request,nil);
RegisterProperty(TIdHTTPProtocol,'Response',__DC__GetTIdHTTPProtocol__Response,nil);
RegisterProperty(TIdHTTPRequest,'URL',__DC__GetTIdHTTPRequest__URL,__DC__SetTIdHTTPRequest__URL);
RegisterProperty(TIdHTTPRequest,'Method',__DC__GetTIdHTTPRequest__Method,__DC__SetTIdHTTPRequest__Method);
RegisterProperty(TIdHTTPRequest,'Source',__DC__GetTIdHTTPRequest__Source,__DC__SetTIdHTTPRequest__Source);
RegisterProperty(TIdHTTPRequest,'UseProxy',__DC__GetTIdHTTPRequest__UseProxy,nil);
RegisterProperty(TIdHTTPResponse,'KeepAlive',__DC__GetTIdHTTPResponse__KeepAlive,__DC__SetTIdHTTPResponse__KeepAlive);
RegisterProperty(TIdHTTPResponse,'ResponseText',__DC__GetTIdHTTPResponse__ResponseText,__DC__SetTIdHTTPResponse__ResponseText);
RegisterProperty(TIdHTTPResponse,'ResponseCode',__DC__GetTIdHTTPResponse__ResponseCode,__DC__SetTIdHTTPResponse__ResponseCode);
RegisterProperty(TIdHTTPResponse,'ResponseVersion',__DC__GetTIdHTTPResponse__ResponseVersion,__DC__SetTIdHTTPResponse__ResponseVersion);
RegisterProperty(TIdHTTPResponse,'ContentStream',__DC__GetTIdHTTPResponse__ContentStream,__DC__SetTIdHTTPResponse__ContentStream);
end;

const __ConstNames0 : array[0..24] of string = (
'hmHead'
,'hmGet'
,'hmPost'
,'hmOptions'
,'hmTrace'
,'hmPut'
,'hmDelete'
,'hmConnect'
,'wnGoToURL'
,'wnJustExit'
,'wnDontKnow'
,'wnReadAndGo'
,'wnAuthRequest'
,'ctNormal'
,'ctSSL'
,'ctProxy'
,'ctSSLProxy'
,'hoInProcessAuth'
,'hoKeepOrigProtocol'
,'hoForceEncodeParams'
,'pv1_0'
,'pv1_1'
,'Id_TIdHTTP_ProtocolVersion'
,'Id_TIdHTTP_RedirectMax'
,'Id_TIdHTTP_HandleRedirects'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,hmHead));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,hmGet));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,hmPost));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,hmOptions));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,hmTrace));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,hmPut));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,hmDelete));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,hmConnect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,wnGoToURL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,wnJustExit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,wnDontKnow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,wnReadAndGo));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,wnAuthRequest));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,ctNormal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,ctSSL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,ctProxy));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,ctSSLProxy));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,hoInProcessAuth));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,hoKeepOrigProtocol));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,hoForceEncodeParams));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,pv1_0));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,pv1_1));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,Id_TIdHTTP_ProtocolVersion));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,Id_TIdHTTP_RedirectMax));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,Id_TIdHTTP_HandleRedirects));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..6] of TClass = (
EIdHTTPProtocolException,
EIdUnknownProtocol,
TIdCustomHTTP,
TIdHTTP,
TIdHTTPProtocol,
TIdHTTPRequest,
TIdHTTPResponse
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegisterProc(EIdHTTPProtocolException,'CreateError',mtConstructor,TypeInfo(_T0),[TypeInfo(Integer),TypeInfo(string),TypeInfo(string)], pointer(4),cRegister);
RegisterProc(EIdHTTPProtocolException,'CreateError',mtConstructor,TypeInfo(_T0),[TypeInfo(Integer),TypeInfo(string),TypeInfo(string)],  getVMTProcAddr('EIdHTTPProtocolException','CreateError',4),cRegister);


//RegRegisterMethod(TIdCustomHTTP,'DoOnAuthorization',TypeInfo(_T1),[TypeInfo(TIdHTTPRequest),TypeInfo(TIdHTTPResponse),TypeInfo(Boolean)], pointer(156));
RegRegisterMethod(TIdCustomHTTP,'DoOnAuthorization',TypeInfo(_T1),[TypeInfo(TIdHTTPRequest),TypeInfo(TIdHTTPResponse),TypeInfo(Boolean)],  getVMTProcAddr('TIdCustomHTTP','DoOnAuthorization',156));


//RegRegisterMethod(TIdCustomHTTP,'DoOnProxyAuthorization',TypeInfo(_T2),[TypeInfo(TIdHTTPRequest),TypeInfo(TIdHTTPResponse),TypeInfo(Boolean)], pointer(160));
RegRegisterMethod(TIdCustomHTTP,'DoOnProxyAuthorization',TypeInfo(_T2),[TypeInfo(TIdHTTPRequest),TypeInfo(TIdHTTPResponse),TypeInfo(Boolean)],  getVMTProcAddr('TIdCustomHTTP','DoOnProxyAuthorization',160));


//RegRegisterMethod(TIdCustomHTTP,'DoOnRedirect',TypeInfo(_T3),[TypeInfo(string),TypeInfo(TIdHTTPMethod),TypeInfo(Integer),TypeInfo(Boolean)], pointer(164));
RegRegisterMethod(TIdCustomHTTP,'DoOnRedirect',TypeInfo(_T3),[TypeInfo(string),TypeInfo(TIdHTTPMethod),TypeInfo(Integer),TypeInfo(Boolean)],  getVMTProcAddr('TIdCustomHTTP','DoOnRedirect',164));


//RegRegisterMethod(TIdCustomHTTP,'DoRequest',TypeInfo(_T4),[TypeInfo(TIdHTTPMethod),TypeInfo(string),TypeInfo(TStream),TypeInfo(TStream)], pointer(168));
RegRegisterMethod(TIdCustomHTTP,'DoRequest',TypeInfo(_T4),[TypeInfo(TIdHTTPMethod),TypeInfo(string),TypeInfo(TStream),TypeInfo(TStream)],  getVMTProcAddr('TIdCustomHTTP','DoRequest',168));


RegRegisterMethod(TIdCustomHTTP,'Options',TypeInfo(_T5),[
TypeInfo(string)],Addr(TIdCustomHTTP.Options));

RegRegisterMethod(TIdCustomHTTP,'Get',TypeInfo(_T6),[
TypeInfo(string),
TypeInfo(TStream)],Addr(TIdCustomHTTP.Get));

RegRegisterMethod(TIdCustomHTTP,'Trace',TypeInfo(_T7),[
TypeInfo(string),
TypeInfo(TStream)],Addr(TIdCustomHTTP.Trace));

RegRegisterMethod(TIdCustomHTTP,'Head',TypeInfo(_T8),[
TypeInfo(string)],Addr(TIdCustomHTTP.Head));

RegRegisterMethod(TIdCustomHTTP,'Post',TypeInfo(_T9),[
TypeInfo(string),
TypeInfo(TStrings),TypeInfo(string)],Addr(TIdCustomHTTP.Post));

RegRegisterMethod(TIdCustomHTTP,'Put',TypeInfo(_T10),[
TypeInfo(string),
TypeInfo(TStream),TypeInfo(string)],Addr(TIdCustomHTTP.Put));

RegisterProc(TIdHTTPProtocol,'Create',mtConstructor,TypeInfo(_T11),[
TypeInfo(TIdCustomHTTP)],Addr(TIdHTTPProtocol.Create),cRegister);

RegRegisterMethod(TIdHTTPProtocol,'ProcessResponse',TypeInfo(_T12),[TypeInfo(TIdHTTPWhatsNext)],Addr(TIdHTTPProtocol.ProcessResponse));

RegRegisterMethod(TIdHTTPProtocol,'BuildAndSendRequest',TypeInfo(_T13),[
TypeInfo(TIdURI)],Addr(TIdHTTPProtocol.BuildAndSendRequest));

RegRegisterMethod(TIdHTTPProtocol,'RetrieveHeaders',TypeInfo(_T14),NoParams,Addr(TIdHTTPProtocol.RetrieveHeaders));

RegisterProc(TIdHTTPRequest,'Create',mtConstructor,TypeInfo(_T15),[
TypeInfo(TIdCustomHTTP)], pointer(28),cRegister);

RegisterProc(TIdHTTPResponse,'Create',mtConstructor,TypeInfo(_T16),[
TypeInfo(TIdCustomHTTP)], pointer(28),cRegister);

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
RegisterEvent(TypeInfo(TIdHTTPOnRedirectEvent),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(Integer),
TypeInfo(Boolean),
TypeInfo(TIdHTTPMethod)]);

RegisterEvent(TypeInfo(TIdOnAuthorization),[
TypeInfo(TObject),
TypeInfo(TIdAuthentication),
TypeInfo(Boolean)]);

{RegisterEvent(TypeInfo(TIdOnSelectAuthorization),[
TypeInfo(TObject),
TypeInfo(TIdAuthenticationClass),
TypeInfo(TIdHeaderList)]);}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
