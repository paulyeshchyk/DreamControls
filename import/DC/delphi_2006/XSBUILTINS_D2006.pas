{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit XSBUILTINS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  Variants,
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  InvokeRegistry,
  Classes,
  FMTBcd,
  Types,
  XmlIntf,
  XSBuiltIns;
function ConvertTBcdToVariant(var R : TBcd) : OleVariant;
function ConvertVariantToTBcd(const V : OleVariant) : TBcd;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TBcd__Wrapper = class(TDCRecordWrapper)
private
fR : TBcd;
public
function GetRecordPtr : pointer; override;
published
procedure setPrecision(const val : Byte);
function getPrecision : Byte;
property Precision : Byte read getPrecision write setPrecision;
procedure setSignSpecialPlaces(const val : Byte);
function getSignSpecialPlaces : Byte;
property SignSpecialPlaces : Byte read getSignSpecialPlaces write setSignSpecialPlaces;
end;
type
_T0 = function (p0 : TDateTime;
p1 : Boolean): WideString of object;

_T1 = function (const p0 : WideString;
p1 : Boolean): TDateTime of object;

_T2 = function (const p0 : TDateTime;
p1 : Boolean): TXSDateTime of object;

_T3 = function (p0 : string): string of object;

_T4 = function (p0 : Double): string of object;

_T5 = function (p0 : string): Double of object;

_T6 = procedure  of object;

_T7 = procedure (const p0 : Word) of object;

_T8 = _T7;

_T9 = procedure (const p0 : SmallInt) of object;

_T10 = _T7;

_T11 = _T7;

_T12 = _T9;

_T13 = _T7;

_T14 = _T7;

_T15 = procedure (const p0 : Integer) of object;

_T16 = function : TXSDate of object;

_T17 = function : TXSDateTime of object;

_T18 = function (const p0 : TXSDateTime;
const p1 : TXSDateTime): TXSDuration of object;

_T19 = function : TXSTime of object;

function __TBcd__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TBcd__Wrapper.setPrecision(const val : Byte);
begin
TBcd(GetRecordPtr^).Precision := val;
end;
function __TBcd__Wrapper.getPrecision : Byte;
begin
result := TBcd(GetRecordPtr^).Precision;
end;
procedure __TBcd__Wrapper.setSignSpecialPlaces(const val : Byte);
begin
TBcd(GetRecordPtr^).SignSpecialPlaces := val;
end;
function __TBcd__Wrapper.getSignSpecialPlaces : Byte;
begin
result := TBcd(GetRecordPtr^).SignSpecialPlaces;
end;
function ____DateTimeToXMLTime__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := DateTimeToXMLTime(OleVariant(pargs^[0]));
end;
2:
begin
result := DateTimeToXMLTime(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function ____XMLTimeToDateTime__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := XMLTimeToDateTime(OleVariant(pargs^[0]));
end;
2:
begin
result := XMLTimeToDateTime(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function ____DateTimeToXSDateTime__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := VarFromObject(DateTimeToXSDateTime(OleVariant(pargs^[0])));
end;
2:
begin
result := VarFromObject(DateTimeToXSDateTime(OleVariant(pargs^[1]),OleVariant(pargs^[0])));
end;
end
end;


type __TBcd__Wrapper__ = class(__TBcd__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TBcd__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTBcdToVariant(var R : TBcd) : OleVariant;
var
__rw : __TBcd__Wrapper__;
begin
__rw := __TBcd__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTBcd(const V : OleVariant) : TBcd;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TBcd((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTXSCustomDateTime__AsDateTime(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXSCustomDateTime(Instance).AsDateTime;
end;

procedure __DC__SetTXSCustomDateTime__AsDateTime(Instance : TObject; Params : PVariantArgList);
begin
TXSCustomDateTime(Instance).AsDateTime:=OleVariant(Params^[0]);
end;

function __DC__GetTXSCustomDateTime__AsUTCDateTime(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXSCustomDateTime(Instance).AsUTCDateTime;
end;

procedure __DC__SetTXSCustomDateTime__AsUTCDateTime(Instance : TObject; Params : PVariantArgList);
begin
TXSCustomDateTime(Instance).AsUTCDateTime:=OleVariant(Params^[0]);
end;

function __DC__GetTXSCustomDateTime__FractionalSeconds(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXSCustomDateTime(Instance).FractionalSeconds;
end;

procedure __DC__SetTXSCustomDateTime__FractionalSeconds(Instance : TObject; Params : PVariantArgList);
begin
TXSCustomDateTime(Instance).FractionalSeconds:=OleVariant(Params^[0]);
end;

function __DC__GetTXSCustomDateTime__Hour(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXSCustomDateTime(Instance).Hour;
end;

procedure __DC__SetTXSCustomDateTime__Hour(Instance : TObject; Params : PVariantArgList);
begin
TXSCustomDateTime(Instance).Hour:=OleVariant(Params^[0]);
end;

function __DC__GetTXSCustomDateTime__HourOffset(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXSCustomDateTime(Instance).HourOffset;
end;

procedure __DC__SetTXSCustomDateTime__HourOffset(Instance : TObject; Params : PVariantArgList);
begin
TXSCustomDateTime(Instance).HourOffset:=OleVariant(Params^[0]);
end;

function __DC__GetTXSCustomDateTime__Minute(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXSCustomDateTime(Instance).Minute;
end;

procedure __DC__SetTXSCustomDateTime__Minute(Instance : TObject; Params : PVariantArgList);
begin
TXSCustomDateTime(Instance).Minute:=OleVariant(Params^[0]);
end;

function __DC__GetTXSCustomDateTime__MinuteOffset(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXSCustomDateTime(Instance).MinuteOffset;
end;

procedure __DC__SetTXSCustomDateTime__MinuteOffset(Instance : TObject; Params : PVariantArgList);
begin
TXSCustomDateTime(Instance).MinuteOffset:=OleVariant(Params^[0]);
end;

function __DC__GetTXSCustomDateTime__Second(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXSCustomDateTime(Instance).Second;
end;

procedure __DC__SetTXSCustomDateTime__Second(Instance : TObject; Params : PVariantArgList);
begin
TXSCustomDateTime(Instance).Second:=OleVariant(Params^[0]);
end;

function __DC__GetTXSCustomDateTime__Month(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXSCustomDateTime(Instance).Month;
end;

procedure __DC__SetTXSCustomDateTime__Month(Instance : TObject; Params : PVariantArgList);
begin
TXSCustomDateTime(Instance).Month:=OleVariant(Params^[0]);
end;

function __DC__GetTXSCustomDateTime__Day(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXSCustomDateTime(Instance).Day;
end;

procedure __DC__SetTXSCustomDateTime__Day(Instance : TObject; Params : PVariantArgList);
begin
TXSCustomDateTime(Instance).Day:=OleVariant(Params^[0]);
end;

function __DC__GetTXSCustomDateTime__Year(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXSCustomDateTime(Instance).Year;
end;

procedure __DC__SetTXSCustomDateTime__Year(Instance : TObject; Params : PVariantArgList);
begin
TXSCustomDateTime(Instance).Year:=OleVariant(Params^[0]);
end;

function __DC__GetTXSCustomDateTime__UseZeroMilliseconds(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXSCustomDateTime(Instance).UseZeroMilliseconds;
end;

procedure __DC__SetTXSCustomDateTime__UseZeroMilliseconds(Instance : TObject; Params : PVariantArgList);
begin
TXSCustomDateTime(Instance).UseZeroMilliseconds:=OleVariant(Params^[0]);
end;

function __DC__GetTXSDate__Month(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXSDate(Instance).Month;
end;

procedure __DC__SetTXSDate__Month(Instance : TObject; Params : PVariantArgList);
begin
TXSDate(Instance).Month:=OleVariant(Params^[0]);
end;

function __DC__GetTXSDate__Day(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXSDate(Instance).Day;
end;

procedure __DC__SetTXSDate__Day(Instance : TObject; Params : PVariantArgList);
begin
TXSDate(Instance).Day:=OleVariant(Params^[0]);
end;

function __DC__GetTXSDate__Year(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXSDate(Instance).Year;
end;

procedure __DC__SetTXSDate__Year(Instance : TObject; Params : PVariantArgList);
begin
TXSDate(Instance).Year:=OleVariant(Params^[0]);
end;

function __DC__GetTXSDate__AsDate(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXSDate(Instance).AsDate;
end;

procedure __DC__SetTXSDate__AsDate(Instance : TObject; Params : PVariantArgList);
begin
TXSDate(Instance).AsDate:=OleVariant(Params^[0]);
end;

function __DC__GetTXSDateTime__Millisecond(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXSDateTime(Instance).Millisecond;
end;

procedure __DC__SetTXSDateTime__Millisecond(Instance : TObject; Params : PVariantArgList);
begin
TXSDateTime(Instance).Millisecond:=OleVariant(Params^[0]);
end;

function __DC__GetTXSDecimal__DecimalString(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXSDecimal(Instance).DecimalString;
end;

procedure __DC__SetTXSDecimal__DecimalString(Instance : TObject; Params : PVariantArgList);
begin
TXSDecimal(Instance).DecimalString:=OleVariant(Params^[0]);
end;

function __DC__GetTXSDecimal__AsBcd(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TBcd__Wrapper;
begin
__wrapper := __TBcd__Wrapper.Create;
__wrapper.fR := TXSDecimal(Instance).AsBcd;
result := IUnknown(__wrapper) as IDispatch;
end;

procedure __DC__SetTXSDecimal__AsBcd(Instance : TObject; Params : PVariantArgList);
var
__idisp:IDispatch;
__iwrapper:IDCRecordWrapper;
begin
__idisp:=DCVarToInterface(OleVariant(Params^[0]));
if __idisp=nil then exit;
__idisp.QueryInterface(IDCRecordWrapper, __iwrapper);
TXSDecimal(Instance).AsBcd:=TBcd(__iwrapper.GetRecordPtr^);
end;

function __DC__GetTXSDuration__DecimalSecond(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXSDuration(Instance).DecimalSecond;
end;

procedure __DC__SetTXSDuration__DecimalSecond(Instance : TObject; Params : PVariantArgList);
begin
TXSDuration(Instance).DecimalSecond:=OleVariant(Params^[0]);
end;

function __DC__GetTXSHexBinary__HexBinaryString(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXSHexBinary(Instance).HexBinaryString;
end;

procedure __DC__SetTXSHexBinary__HexBinaryString(Instance : TObject; Params : PVariantArgList);
begin
TXSHexBinary(Instance).HexBinaryString:=OleVariant(Params^[0]);
end;

function __DC__GetTXSTime__AsTime(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXSTime(Instance).AsTime;
end;

procedure __DC__SetTXSTime__AsTime(Instance : TObject; Params : PVariantArgList);
begin
TXSTime(Instance).AsTime:=OleVariant(Params^[0]);
end;

function __DC__GetTXSTime__FractionalSeconds(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXSTime(Instance).FractionalSeconds;
end;

procedure __DC__SetTXSTime__FractionalSeconds(Instance : TObject; Params : PVariantArgList);
begin
TXSTime(Instance).FractionalSeconds:=OleVariant(Params^[0]);
end;

function __DC__GetTXSTime__Hour(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXSTime(Instance).Hour;
end;

procedure __DC__SetTXSTime__Hour(Instance : TObject; Params : PVariantArgList);
begin
TXSTime(Instance).Hour:=OleVariant(Params^[0]);
end;

function __DC__GetTXSTime__HourOffset(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXSTime(Instance).HourOffset;
end;

procedure __DC__SetTXSTime__HourOffset(Instance : TObject; Params : PVariantArgList);
begin
TXSTime(Instance).HourOffset:=OleVariant(Params^[0]);
end;

function __DC__GetTXSTime__Millisecond(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXSTime(Instance).Millisecond;
end;

procedure __DC__SetTXSTime__Millisecond(Instance : TObject; Params : PVariantArgList);
begin
TXSTime(Instance).Millisecond:=OleVariant(Params^[0]);
end;

function __DC__GetTXSTime__Minute(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXSTime(Instance).Minute;
end;

procedure __DC__SetTXSTime__Minute(Instance : TObject; Params : PVariantArgList);
begin
TXSTime(Instance).Minute:=OleVariant(Params^[0]);
end;

function __DC__GetTXSTime__MinuteOffset(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXSTime(Instance).MinuteOffset;
end;

procedure __DC__SetTXSTime__MinuteOffset(Instance : TObject; Params : PVariantArgList);
begin
TXSTime(Instance).MinuteOffset:=OleVariant(Params^[0]);
end;

function __DC__GetTXSTime__Second(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXSTime(Instance).Second;
end;

procedure __DC__SetTXSTime__Second(Instance : TObject; Params : PVariantArgList);
begin
TXSTime(Instance).Second:=OleVariant(Params^[0]);
end;

function __DC__GetTXSTime__UseZeroMilliseconds(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXSTime(Instance).UseZeroMilliseconds;
end;

procedure __DC__SetTXSTime__UseZeroMilliseconds(Instance : TObject; Params : PVariantArgList);
begin
TXSTime(Instance).UseZeroMilliseconds:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TXSCustomDateTime,'AsDateTime',__DC__GetTXSCustomDateTime__AsDateTime,__DC__SetTXSCustomDateTime__AsDateTime);
RegisterProperty(TXSCustomDateTime,'AsUTCDateTime',__DC__GetTXSCustomDateTime__AsUTCDateTime,__DC__SetTXSCustomDateTime__AsUTCDateTime);
RegisterProperty(TXSCustomDateTime,'FractionalSeconds',__DC__GetTXSCustomDateTime__FractionalSeconds,__DC__SetTXSCustomDateTime__FractionalSeconds);
RegisterProperty(TXSCustomDateTime,'Hour',__DC__GetTXSCustomDateTime__Hour,__DC__SetTXSCustomDateTime__Hour);
RegisterProperty(TXSCustomDateTime,'HourOffset',__DC__GetTXSCustomDateTime__HourOffset,__DC__SetTXSCustomDateTime__HourOffset);
RegisterProperty(TXSCustomDateTime,'Minute',__DC__GetTXSCustomDateTime__Minute,__DC__SetTXSCustomDateTime__Minute);
RegisterProperty(TXSCustomDateTime,'MinuteOffset',__DC__GetTXSCustomDateTime__MinuteOffset,__DC__SetTXSCustomDateTime__MinuteOffset);
RegisterProperty(TXSCustomDateTime,'Second',__DC__GetTXSCustomDateTime__Second,__DC__SetTXSCustomDateTime__Second);
RegisterProperty(TXSCustomDateTime,'Month',__DC__GetTXSCustomDateTime__Month,__DC__SetTXSCustomDateTime__Month);
RegisterProperty(TXSCustomDateTime,'Day',__DC__GetTXSCustomDateTime__Day,__DC__SetTXSCustomDateTime__Day);
RegisterProperty(TXSCustomDateTime,'Year',__DC__GetTXSCustomDateTime__Year,__DC__SetTXSCustomDateTime__Year);
RegisterProperty(TXSCustomDateTime,'UseZeroMilliseconds',__DC__GetTXSCustomDateTime__UseZeroMilliseconds,__DC__SetTXSCustomDateTime__UseZeroMilliseconds);
RegisterProperty(TXSDate,'Month',__DC__GetTXSDate__Month,__DC__SetTXSDate__Month);
RegisterProperty(TXSDate,'Day',__DC__GetTXSDate__Day,__DC__SetTXSDate__Day);
RegisterProperty(TXSDate,'Year',__DC__GetTXSDate__Year,__DC__SetTXSDate__Year);
RegisterProperty(TXSDate,'AsDate',__DC__GetTXSDate__AsDate,__DC__SetTXSDate__AsDate);
RegisterProperty(TXSDateTime,'Millisecond',__DC__GetTXSDateTime__Millisecond,__DC__SetTXSDateTime__Millisecond);
RegisterProperty(TXSDecimal,'DecimalString',__DC__GetTXSDecimal__DecimalString,__DC__SetTXSDecimal__DecimalString);
RegisterProperty(TXSDecimal,'AsBcd',__DC__GetTXSDecimal__AsBcd,__DC__SetTXSDecimal__AsBcd);
RegisterProperty(TXSDuration,'DecimalSecond',__DC__GetTXSDuration__DecimalSecond,__DC__SetTXSDuration__DecimalSecond);
RegisterProperty(TXSHexBinary,'HexBinaryString',__DC__GetTXSHexBinary__HexBinaryString,__DC__SetTXSHexBinary__HexBinaryString);
RegisterProperty(TXSTime,'AsTime',__DC__GetTXSTime__AsTime,__DC__SetTXSTime__AsTime);
RegisterProperty(TXSTime,'FractionalSeconds',__DC__GetTXSTime__FractionalSeconds,__DC__SetTXSTime__FractionalSeconds);
RegisterProperty(TXSTime,'Hour',__DC__GetTXSTime__Hour,__DC__SetTXSTime__Hour);
RegisterProperty(TXSTime,'HourOffset',__DC__GetTXSTime__HourOffset,__DC__SetTXSTime__HourOffset);
RegisterProperty(TXSTime,'Millisecond',__DC__GetTXSTime__Millisecond,__DC__SetTXSTime__Millisecond);
RegisterProperty(TXSTime,'Minute',__DC__GetTXSTime__Minute,__DC__SetTXSTime__Minute);
RegisterProperty(TXSTime,'MinuteOffset',__DC__GetTXSTime__MinuteOffset,__DC__SetTXSTime__MinuteOffset);
RegisterProperty(TXSTime,'Second',__DC__GetTXSTime__Second,__DC__SetTXSTime__Second);
RegisterProperty(TXSTime,'UseZeroMilliseconds',__DC__GetTXSTime__UseZeroMilliseconds,__DC__SetTXSTime__UseZeroMilliseconds);
end;

const __ConstNames0 : array[0..27] of string = (
'SHexMarker'
,'XMLDateSeparator'
,'XMLHourOffsetMinusMarker'
,'XMLHourOffsetPlusMarker'
,'XMLTimeSeparator'
,'XMLMonthPos'
,'XMLDayPos'
,'XMLYearPos'
,'XMLMilSecPos'
,'XMLDefaultYearDigits'
,'XMLDurationStart'
,'XMLDurationYear'
,'XMLDurationMonth'
,'XMLDurationDay'
,'XMLDurationHour'
,'XMLDurationMinute'
,'XMLDurationSecond'
,'SNAN'
,'SSciNotationMarker'
,'SDecimal'
,'SNegative'
,'SPlus'
,'SLocalTimeMarker'
,'MaxMonth'
,'MinMonth'
,'MaxDay'
,'MinDay'
,'SoapDecimalSeparator'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,SHexMarker));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,XMLDateSeparator));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,XMLHourOffsetMinusMarker));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,XMLHourOffsetPlusMarker));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,XMLTimeSeparator));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,XMLMonthPos));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,XMLDayPos));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,XMLYearPos));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,XMLMilSecPos));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,XMLDefaultYearDigits));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,XMLDurationStart));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,XMLDurationYear));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,XMLDurationMonth));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,XMLDurationDay));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,XMLDurationHour));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,XMLDurationMinute));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,XMLDurationSecond));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,SNAN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,SSciNotationMarker));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,SDecimal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,SNegative));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,SPlus));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,SLocalTimeMarker));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,MaxMonth));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,MinMonth));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,MaxDay));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,MinDay));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,SoapDecimalSeparator));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..11] of TClass = (
EXSDateTimeException,
EXSDecimalException,
EXSHexBinaryException,
TXSCustomDateTime,
TXSDate,
TXSDateTime,
TXSDecimal,
TXSDuration,
TXSHexBinary,
TXSString,
TXSTime,
TXSTimeInstant
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..6] of string = (
'DateTimeToXMLTime'
,'XMLTimeToDateTime'
,'DateTimeToXSDateTime'
,'GetDataFromFile'
,'SoapFloatToStr'
,'SoapStrToFloat'
,'InitXSTypes'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtScriptProc,TypeInfo(_T0),[
TypeInfo(TDateTime),
TypeInfo(Boolean),TypeInfo(WideString)],Addr(____DateTimeToXMLTime__Wrapper),cRegister);

RegisterProc(nil,MethodNames[1],mtScriptProc,TypeInfo(_T1),[
TypeInfo(WideString),
TypeInfo(Boolean),TypeInfo(TDateTime)],Addr(____XMLTimeToDateTime__Wrapper),cRegister);

RegisterProc(nil,MethodNames[2],mtScriptProc,TypeInfo(_T2),[
TypeInfo(TDateTime),
TypeInfo(Boolean),TypeInfo(TXSDateTime)],Addr(____DateTimeToXSDateTime__Wrapper),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T3),[
TypeInfo(string),TypeInfo(string)],Addr(GetDataFromFile),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T4),[
TypeInfo(Double),TypeInfo(string)],Addr(SoapFloatToStr),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T5),[
TypeInfo(string),TypeInfo(Double)],Addr(SoapStrToFloat),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T6),NoParams,Addr(InitXSTypes),cRegister);

RegRegisterMethod(TXSCustomDateTime,'SetDay',TypeInfo(_T7),[
TypeInfo(Word)], pointer(20));

RegRegisterMethod(TXSCustomDateTime,'SetHour',TypeInfo(_T8),[
TypeInfo(Word)], pointer(24));

RegRegisterMethod(TXSCustomDateTime,'SetHourOffset',TypeInfo(_T9),[
TypeInfo(SmallInt)], pointer(28));

RegRegisterMethod(TXSCustomDateTime,'SetMillisecond',TypeInfo(_T10),[
TypeInfo(Word)], pointer(32));

RegRegisterMethod(TXSCustomDateTime,'SetMinute',TypeInfo(_T11),[
TypeInfo(Word)], pointer(36));

RegRegisterMethod(TXSCustomDateTime,'SetMinuteOffset',TypeInfo(_T12),[
TypeInfo(SmallInt)], pointer(40));

RegRegisterMethod(TXSCustomDateTime,'SetMonth',TypeInfo(_T13),[
TypeInfo(Word)], pointer(44));

RegRegisterMethod(TXSCustomDateTime,'SetSecond',TypeInfo(_T14),[
TypeInfo(Word)], pointer(48));

RegRegisterMethod(TXSCustomDateTime,'SetYear',TypeInfo(_T15),[
TypeInfo(Integer)], pointer(52));

RegRegisterMethod(TXSDate,'Clone',TypeInfo(_T16),[TypeInfo(TXSDate)],Addr(TXSDate.Clone));

RegRegisterMethod(TXSDateTime,'Clone',TypeInfo(_T17),[TypeInfo(TXSDateTime)],Addr(TXSDateTime.Clone));

RegRegisterMethod(TXSDateTime,'CompareDateTimeParam',TypeInfo(_T18),[
TypeInfo(TXSDateTime),
TypeInfo(TXSDateTime),TypeInfo(TXSDuration)],Addr(TXSDateTime.CompareDateTimeParam));

RegRegisterMethod(TXSTime,'Clone',TypeInfo(_T19),[TypeInfo(TXSTime)],Addr(TXSTime.Clone));

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
