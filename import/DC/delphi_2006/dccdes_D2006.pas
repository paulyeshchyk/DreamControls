{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit dccdes_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  Types,
  dcscript,
  dcsystem,
  classes,
  typinfo,
  dcparser,
  windows,
  activex,
  sysutils,
  dcconsts,
  dcdreamlib,
  dccdes;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TPoint__Wrapper = class(TDCRecordWrapper)
private
fR : TPoint;
public
function GetRecordPtr : pointer; override;
published
procedure setX(const val : Longint);
function getX : Longint;
property X : Longint read getX write setX;
procedure setY(const val : Longint);
function getY : Longint;
property Y : Longint read getY write setY;
end;
type __TStringsCodeDesigner__ = class(TStringsCodeDesigner);
type
_T0 = function (p0 : TComponent;
const p1 : string): string of object;

_T1 = procedure  of object;

_T2 = function (p0 : string): string of object;

_T3 = function : Boolean of object;

{_T4 = function (const p0 : string;
p1 : PTypeData;
p2 : Boolean): string of object;}

{_T5 = function (p0 : PTypeData): string of object;}

_T6 = function (const p0 : IDispatch): Boolean of object;

_T7 = function (const p0 : string;
const p1 : IDispatch): Boolean of object;

_T8 = _T7;

_T9 = function : string of object;

_T10 = _T3;

{_T11 = function (p0 : PTypeData): Boolean of object;}

_T12 = function (const p0 : IDispatch): IDispatch of object;

_T13 = _T9;

{_T14 = procedure (const p0 : string;
p1 : PTypeData;
p2 : TStrings) of object;}

_T15 = _T3;

_T16 = function : Integer of object;

_T17 = _T3;

_T18 = _T9;

_T19 = function (const p0 : string;
const p1 : string): Boolean of object;

function __TPoint__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPoint__Wrapper.setX(const val : Longint);
begin
TPoint(GetRecordPtr^).X := val;
end;
function __TPoint__Wrapper.getX : Longint;
begin
result := TPoint(GetRecordPtr^).X;
end;
procedure __TPoint__Wrapper.setY(const val : Longint);
begin
TPoint(GetRecordPtr^).Y := val;
end;
function __TPoint__Wrapper.getY : Longint;
begin
result := TPoint(GetRecordPtr^).Y;
end;
function __TStringsCodeDesigner__GetMethodEnd__Wrapper(__Instance : TStringsCodeDesigner;
const p0 : IDispatch): Boolean;
var
__p0 : ^TPoint;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := __TStringsCodeDesigner__(__Instance).GetMethodEnd(__p0^);
end;

function __TStringsCodeDesigner__FindMethod__Wrapper(__Instance : TStringsCodeDesigner;
const p0 : string;
const p1 : IDispatch): Boolean;
var
__p1 : ^TPoint;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := __TStringsCodeDesigner__(__Instance).FindMethod(p0,__p1^);
end;

function __TStringsCodeDesigner__FindMethodStart__Wrapper(__Instance : TStringsCodeDesigner;
const p0 : string;
const p1 : IDispatch): Boolean;
var
__p1 : ^TPoint;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := __TStringsCodeDesigner__(__Instance).FindMethodStart(p0,__p1^);
end;

function __TStringsCodeDesigner__GetMethodStart__Wrapper(__Instance : TStringsCodeDesigner;
const p0 : IDispatch): IDispatch;
var
__result : TPoint;
__wrapper : __TPoint__Wrapper;
__p0 : ^TPoint;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__result := __TStringsCodeDesigner__(__Instance).GetMethodStart(__p0^);
__wrapper := __TPoint__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;


type __TPoint__Wrapper__ = class(__TPoint__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPoint__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
var
__rw : __TPoint__Wrapper__;
begin
__rw := __TPoint__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPoint((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTStringsCodeDesigner__SyntaxParser(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TStringsCodeDesigner(Instance).SyntaxParser);
end;

procedure __RegisterProps;
begin
RegisterProperty(TStringsCodeDesigner,'SyntaxParser',__DC__GetTStringsCodeDesigner__SyntaxParser,nil);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..10] of TClass = (
TBasicCodeDesigner,
TDelphiCodeDesigner,
THTMLCodeDesigner,
TJsCodeDesigner,
TPerlCodeDesigner,
TPythonCodeDesigner,
TScriptCodeDesigner,
TSqlCodeDesigner,
TStringsCodeDesigner,
TUnitCodeDesigner,
TVbsCodeDesigner
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..2] of string = (
'GenerateCodeForComp'
,'Register'
,'BuildClassName'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(TComponent),
TypeInfo(string),TypeInfo(string)],Addr(GenerateCodeForComp),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),NoParams,Addr(Register),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T2),[
TypeInfo(string),TypeInfo(string)],Addr(BuildClassName),cRegister);

//RegRegisterMethod(TScriptCodeDesigner,'AlwaysUseBrackets',TypeInfo(_T3),[TypeInfo(Boolean)], pointer(196));
RegRegisterMethod(TScriptCodeDesigner,'AlwaysUseBrackets',TypeInfo(_T3),[TypeInfo(Boolean)],  getVMTProcAddr('TScriptCodeDesigner','AlwaysUseBrackets',196));


//RegRegisterMethod(TStringsCodeDesigner,'GetMethodEnd',TypeInfo(_T6),[TypeInfo(IDispatch),TypeInfo(Boolean)], pointer(140));
RegRegisterMethod(TStringsCodeDesigner,'GetMethodEnd',TypeInfo(_T6),[TypeInfo(IDispatch),TypeInfo(Boolean)],  getVMTProcAddr('TStringsCodeDesigner','GetMethodEnd',140));


//RegRegisterMethod(TStringsCodeDesigner,'FindMethod',TypeInfo(_T7),[TypeInfo(string),TypeInfo(IDispatch),TypeInfo(Boolean)], pointer(144));
RegRegisterMethod(TStringsCodeDesigner,'FindMethod',TypeInfo(_T7),[TypeInfo(string),TypeInfo(IDispatch),TypeInfo(Boolean)],  getVMTProcAddr('TStringsCodeDesigner','FindMethod',144));


//RegRegisterMethod(TStringsCodeDesigner,'FindMethodStart',TypeInfo(_T8),[TypeInfo(string),TypeInfo(IDispatch),TypeInfo(Boolean)], pointer(148));
RegRegisterMethod(TStringsCodeDesigner,'FindMethodStart',TypeInfo(_T8),[TypeInfo(string),TypeInfo(IDispatch),TypeInfo(Boolean)],  getVMTProcAddr('TStringsCodeDesigner','FindMethodStart',148));


//RegRegisterMethod(TStringsCodeDesigner,'ScanMethodName',TypeInfo(_T9),[TypeInfo(string)], pointer(152));
RegRegisterMethod(TStringsCodeDesigner,'ScanMethodName',TypeInfo(_T9),[TypeInfo(string)],  getVMTProcAddr('TStringsCodeDesigner','ScanMethodName',152));


//RegRegisterMethod(TStringsCodeDesigner,'IsMethodStart',TypeInfo(_T10),[TypeInfo(Boolean)], pointer(156));
RegRegisterMethod(TStringsCodeDesigner,'IsMethodStart',TypeInfo(_T10),[TypeInfo(Boolean)],  getVMTProcAddr('TStringsCodeDesigner','IsMethodStart',156));


//RegRegisterMethod(TStringsCodeDesigner,'GetMethodStart',TypeInfo(_T12),[TypeInfo(IDispatch),TypeInfo(IDispatch)], pointer(164));
RegRegisterMethod(TStringsCodeDesigner,'GetMethodStart',TypeInfo(_T12),[TypeInfo(IDispatch),TypeInfo(IDispatch)],  getVMTProcAddr('TStringsCodeDesigner','GetMethodStart',164));


//RegRegisterMethod(TStringsCodeDesigner,'GetComment',TypeInfo(_T13),[TypeInfo(string)], pointer(168));
RegRegisterMethod(TStringsCodeDesigner,'GetComment',TypeInfo(_T13),[TypeInfo(string)],  getVMTProcAddr('TStringsCodeDesigner','GetComment',168));


//RegRegisterMethod(TStringsCodeDesigner,'IsBlockBegin',TypeInfo(_T15),[TypeInfo(Boolean)], pointer(176));
RegRegisterMethod(TStringsCodeDesigner,'IsBlockBegin',TypeInfo(_T15),[TypeInfo(Boolean)],  getVMTProcAddr('TStringsCodeDesigner','IsBlockBegin',176));


//RegRegisterMethod(TStringsCodeDesigner,'IsBlockEnd',TypeInfo(_T16),[TypeInfo(Integer)], pointer(180));
RegRegisterMethod(TStringsCodeDesigner,'IsBlockEnd',TypeInfo(_T16),[TypeInfo(Integer)],  getVMTProcAddr('TStringsCodeDesigner','IsBlockEnd',180));


//RegRegisterMethod(TStringsCodeDesigner,'DoDeleteEmptyMethods',TypeInfo(_T17),[TypeInfo(Boolean)], pointer(184));
RegRegisterMethod(TStringsCodeDesigner,'DoDeleteEmptyMethods',TypeInfo(_T17),[TypeInfo(Boolean)],  getVMTProcAddr('TStringsCodeDesigner','DoDeleteEmptyMethods',184));


//RegRegisterMethod(TStringsCodeDesigner,'GetUseUnitString',TypeInfo(_T18),[TypeInfo(string)], pointer(188));
RegRegisterMethod(TStringsCodeDesigner,'GetUseUnitString',TypeInfo(_T18),[TypeInfo(string)],  getVMTProcAddr('TStringsCodeDesigner','GetUseUnitString',188));


//RegRegisterMethod(TStringsCodeDesigner,'IdentsEqual',TypeInfo(_T19),[TypeInfo(string),TypeInfo(string),TypeInfo(Boolean)], pointer(192));
RegRegisterMethod(TStringsCodeDesigner,'IdentsEqual',TypeInfo(_T19),[TypeInfo(string),TypeInfo(string),TypeInfo(Boolean)],  getVMTProcAddr('TStringsCodeDesigner','IdentsEqual',192));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegRegisterMethod(TScriptCodeDesigner,'CreateEventName',TypeInfo(_T4),[
TypeInfo(string),
TypeInfoPointer,
TypeInfo(Boolean),TypeInfo(string)], pointer(200))}

{RegRegisterMethod(TScriptCodeDesigner,'GetFuncName',TypeInfo(_T5),[
TypeInfoPointer,TypeInfo(string)], pointer(204))}

{RegRegisterMethod(TStringsCodeDesigner,'IsEqualDeclaration',TypeInfo(_T11),[
TypeInfoPointer,TypeInfo(Boolean)], pointer(160))}

{RegRegisterMethod(TStringsCodeDesigner,'GetMethodTemplate',TypeInfo(_T14),[
TypeInfo(string),
TypeInfoPointer,
TypeInfo(TStrings)], pointer(172))}

RegisterEvent(TypeInfo(TGetMethodCodeProc),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(TStrings)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
