{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit ACTNCTRLS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  Types,
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Messages,
  Classes,
  Controls,
  Graphics,
  ToolWin,
  ActnMan,
  Buttons,
  StdCtrls,
  ComCtrls,
  Contnrs,
  GraphUtil,
  ExtCtrls,
  ActnCtrls;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TRect__Wrapper = class(TDCRecordWrapper)
private
fR : TRect;
public
function GetRecordPtr : pointer; override;
published
procedure setLeft(const val : Longint);
function getLeft : Longint;
property Left : Longint read getLeft write setLeft;
procedure setTop(const val : Longint);
function getTop : Longint;
property Top : Longint read getTop write setTop;
procedure setRight(const val : Longint);
function getRight : Longint;
property Right : Longint read getRight write setRight;
procedure setBottom(const val : Longint);
function getBottom : Longint;
property Bottom : Longint read getBottom write setBottom;
end;
type __TCustomButtonControl__ = class(TCustomButtonControl);
type
_T0 = function : Integer of object;

_T1 = procedure (const p0 : Integer;
const p1 : Integer) of object;

{_T2 = function : TCustomActionBarClass of object;}

_T3 = procedure (const p0 : IDispatch;
p1 : Boolean) of object;

{_T4 = function : TCustomActionBarClass of object;}

_T5 = procedure  of object;

_T6 = _T5;

function __TRect__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRect__Wrapper.setLeft(const val : Longint);
begin
TRect(GetRecordPtr^).Left := val;
end;
function __TRect__Wrapper.getLeft : Longint;
begin
result := TRect(GetRecordPtr^).Left;
end;
procedure __TRect__Wrapper.setTop(const val : Longint);
begin
TRect(GetRecordPtr^).Top := val;
end;
function __TRect__Wrapper.getTop : Longint;
begin
result := TRect(GetRecordPtr^).Top;
end;
procedure __TRect__Wrapper.setRight(const val : Longint);
begin
TRect(GetRecordPtr^).Right := val;
end;
function __TRect__Wrapper.getRight : Longint;
begin
result := TRect(GetRecordPtr^).Right;
end;
procedure __TRect__Wrapper.setBottom(const val : Longint);
begin
TRect(GetRecordPtr^).Bottom := val;
end;
function __TRect__Wrapper.getBottom : Longint;
begin
result := TRect(GetRecordPtr^).Bottom;
end;
procedure __TCustomButtonControl__DrawFrame__Wrapper(__Instance : TCustomButtonControl;
const p0 : IDispatch;
p1 : Boolean);
var
__p0 : ^TRect;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__TCustomButtonControl__(__Instance).DrawFrame(__p0^,p1);
end;


type __TRect__Wrapper__ = class(__TRect__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRect__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
var
__rw : __TRect__Wrapper__;
begin
__rw := __TRect__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRect((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTActionToolBar__Canvas(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TActionToolBar(Instance).Canvas);
end;

function __DC__GetTCustomActionToolBar__HiddenCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionToolBar(Instance).HiddenCount;
end;

function __DC__GetTCustomButtonControl__AllowAllUp(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomButtonControl(Instance).AllowAllUp;
end;

procedure __DC__SetTCustomButtonControl__AllowAllUp(Instance : TObject; Params : PVariantArgList);
begin
TCustomButtonControl(Instance).AllowAllUp:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomButtonControl__Caption(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomButtonControl(Instance).Caption;
end;

procedure __DC__SetTCustomButtonControl__Caption(Instance : TObject; Params : PVariantArgList);
begin
TCustomButtonControl(Instance).Caption:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomButtonControl__Down(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomButtonControl(Instance).Down;
end;

procedure __DC__SetTCustomButtonControl__Down(Instance : TObject; Params : PVariantArgList);
begin
TCustomButtonControl(Instance).Down:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomButtonControl__Flat(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomButtonControl(Instance).Flat;
end;

procedure __DC__SetTCustomButtonControl__Flat(Instance : TObject; Params : PVariantArgList);
begin
TCustomButtonControl(Instance).Flat:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomButtonControl__ShowCaption(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomButtonControl(Instance).ShowCaption;
end;

function __DC__GetTCustomButtonControl__ShowShortCut(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomButtonControl(Instance).ShowShortCut;
end;

function __DC__GetTCustomButtonControl__State(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomButtonControl(Instance).State;
end;

procedure __DC__SetTCustomButtonControl__State(Instance : TObject; Params : PVariantArgList);
begin
TCustomButtonControl(Instance).State:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomButtonControl__TrackButton(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomButtonControl(Instance).TrackButton;
end;

procedure __DC__SetTCustomButtonControl__TrackButton(Instance : TObject; Params : PVariantArgList);
begin
TCustomButtonControl(Instance).TrackButton:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomComboControl__ComboBox(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomComboControl(Instance).ComboBox);
end;

function __DC__GetTCustomUtilityButton__AutoScroll(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomUtilityButton(Instance).AutoScroll;
end;

procedure __DC__SetTCustomUtilityButton__AutoScroll(Instance : TObject; Params : PVariantArgList);
begin
TCustomUtilityButton(Instance).AutoScroll:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomUtilityButton__ArrowSize(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomUtilityButton(Instance).ArrowSize;
end;

procedure __DC__SetTCustomUtilityButton__ArrowSize(Instance : TObject; Params : PVariantArgList);
begin
TCustomUtilityButton(Instance).ArrowSize:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomUtilityButton__ArrowType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomUtilityButton(Instance).ArrowType;
end;

procedure __DC__SetTCustomUtilityButton__ArrowType(Instance : TObject; Params : PVariantArgList);
begin
TCustomUtilityButton(Instance).ArrowType:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomUtilityButton__Color(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomUtilityButton(Instance).Color;
end;

procedure __DC__SetTCustomUtilityButton__Color(Instance : TObject; Params : PVariantArgList);
begin
TCustomUtilityButton(Instance).Color:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomUtilityButton__Direction(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomUtilityButton(Instance).Direction;
end;

procedure __DC__SetTCustomUtilityButton__Direction(Instance : TObject; Params : PVariantArgList);
begin
TCustomUtilityButton(Instance).Direction:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomUtilityButton__RepeatRate(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomUtilityButton(Instance).RepeatRate;
end;

procedure __DC__SetTCustomUtilityButton__RepeatRate(Instance : TObject; Params : PVariantArgList);
begin
TCustomUtilityButton(Instance).RepeatRate:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TActionToolBar,'Canvas',__DC__GetTActionToolBar__Canvas,nil);
RegisterProperty(TCustomActionToolBar,'HiddenCount',__DC__GetTCustomActionToolBar__HiddenCount,nil);
RegisterProperty(TCustomButtonControl,'AllowAllUp',__DC__GetTCustomButtonControl__AllowAllUp,__DC__SetTCustomButtonControl__AllowAllUp);
RegisterProperty(TCustomButtonControl,'Caption',__DC__GetTCustomButtonControl__Caption,__DC__SetTCustomButtonControl__Caption);
RegisterProperty(TCustomButtonControl,'Down',__DC__GetTCustomButtonControl__Down,__DC__SetTCustomButtonControl__Down);
RegisterProperty(TCustomButtonControl,'Flat',__DC__GetTCustomButtonControl__Flat,__DC__SetTCustomButtonControl__Flat);
RegisterProperty(TCustomButtonControl,'ShowCaption',__DC__GetTCustomButtonControl__ShowCaption,nil);
RegisterProperty(TCustomButtonControl,'ShowShortCut',__DC__GetTCustomButtonControl__ShowShortCut,nil);
RegisterProperty(TCustomButtonControl,'State',__DC__GetTCustomButtonControl__State,__DC__SetTCustomButtonControl__State);
RegisterProperty(TCustomButtonControl,'TrackButton',__DC__GetTCustomButtonControl__TrackButton,__DC__SetTCustomButtonControl__TrackButton);
RegisterProperty(TCustomComboControl,'ComboBox',__DC__GetTCustomComboControl__ComboBox,nil);
RegisterProperty(TCustomUtilityButton,'AutoScroll',__DC__GetTCustomUtilityButton__AutoScroll,__DC__SetTCustomUtilityButton__AutoScroll);
RegisterProperty(TCustomUtilityButton,'ArrowSize',__DC__GetTCustomUtilityButton__ArrowSize,__DC__SetTCustomUtilityButton__ArrowSize);
RegisterProperty(TCustomUtilityButton,'ArrowType',__DC__GetTCustomUtilityButton__ArrowType,__DC__SetTCustomUtilityButton__ArrowType);
RegisterProperty(TCustomUtilityButton,'Color',__DC__GetTCustomUtilityButton__Color,__DC__SetTCustomUtilityButton__Color);
RegisterProperty(TCustomUtilityButton,'Direction',__DC__GetTCustomUtilityButton__Direction,__DC__SetTCustomUtilityButton__Direction);
RegisterProperty(TCustomUtilityButton,'RepeatRate',__DC__GetTCustomUtilityButton__RepeatRate,__DC__SetTCustomUtilityButton__RepeatRate);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..8] of TClass = (
TActionToolBar,
TCustomActionCombo,
TCustomActionDockBar,
TCustomActionToolBar,
TCustomButtonControl,
TCustomComboControl,
TCustomDropDownButton,
TCustomToolScrollBtn,
TCustomUtilityButton
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TCustomActionDockBar,'CalcDockedWidth',TypeInfo(_T0),[TypeInfo(Integer)], pointer(348));
RegRegisterMethod(TCustomActionDockBar,'CalcDockedWidth',TypeInfo(_T0),[TypeInfo(Integer)],  getVMTProcAddr('TCustomActionDockBar','CalcDockedWidth',348));


//RegRegisterMethod(TCustomActionToolBar,'DrawSeparator',TypeInfo(_T1),[TypeInfo(Integer),TypeInfo(Integer)], pointer(352));
RegRegisterMethod(TCustomActionToolBar,'DrawSeparator',TypeInfo(_T1),[TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TCustomActionToolBar','DrawSeparator',352));


//RegRegisterMethod(TCustomButtonControl,'DrawFrame',TypeInfo(_T3),[TypeInfo(IDispatch),TypeInfo(Boolean)], pointer(232));
RegRegisterMethod(TCustomButtonControl,'DrawFrame',TypeInfo(_T3),[TypeInfo(IDispatch),TypeInfo(Boolean)],  getVMTProcAddr('TCustomButtonControl','DrawFrame',232));


//RegRegisterMethod(TCustomDropDownButton,'DropDownClick',TypeInfo(_T5),NoParams, pointer(240));
RegRegisterMethod(TCustomDropDownButton,'DropDownClick',TypeInfo(_T5),NoParams,  getVMTProcAddr('TCustomDropDownButton','DropDownClick',240));


//RegRegisterMethod(TCustomUtilityButton,'DrawArrows',TypeInfo(_T6),NoParams, pointer(236));
RegRegisterMethod(TCustomUtilityButton,'DrawArrows',TypeInfo(_T6),NoParams,  getVMTProcAddr('TCustomUtilityButton','DrawArrows',236));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
{RegRegisterMethod(TCustomActionToolBar,'GetPopupClass',TypeInfo(_T2),[TypeInfo(TCustomActionBarClass)], pointer(356))}

{RegRegisterMethod(TCustomDropDownButton,'GetPopupClass',TypeInfo(_T4),[TypeInfo(TCustomActionBarClass)], pointer(236))}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
