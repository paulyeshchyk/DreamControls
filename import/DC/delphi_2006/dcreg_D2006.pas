{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit dcreg_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  windows,
  dcconsts,
  dcdreamlib,
  dcvcllib,
  classes,
  dcdsgnstuff,
  dcrespic,
  dcsystem,
  dcStdCtl,
  DCGlobalImages,
  dcstdctlreg,
  dcgenreg,
  dcpaletreg,
  dcmenureg,
  rerrdlg,
  dcCommon,
  dccommonreg,
  dcButtonPanelReg,
  diffmakereg,
  formfillreg,
  aviplayreg,
  dcenvopt,
  dccbutreg,
  dcdtree,
  dsize,
  aligunit,
  dalign,
  dcfdesreg,
  dcddesreg,
  DCMenuDsgnUnit,
  dcfdopt,
  dcscdesreg,
  dcfdmemo,
  dcidedes,
  unitpars,
  dcscriptreg,
  import,
  dcpascal,
  dtreeEdreg,
  dctreeedreg,
  treemod,
  pstoredreg,
  dcTreeReg,
  dctsrcreg,
  dcactlstreg,
  dcimged,
  treeinspreg,
  glyphed,
  maskpr,
  MskText,
  oinspectreg,
  inspunit,
  dcstrled,
  dcinspopt,
  dcstring,
  dcmemoreg,
  replunit,
  searunit,
  dcSyntaxReg,
  dcmemopt,
  dcparser,
  dccdes,
  dcploadreg,
  dcappreg,
  dcEdit,
  dceditreg,
  histed,
  dcpedit,
  propcbreg,
  dcColorCombo,
  dcinpfrm,
  FltrEdReg,
  dcpmanreg,
  dcdbctl,
  dcdbctlreg,
  dcdbtreereg,
  dbinspreg,
  dcdbmemo,
  dcreg;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure  of object;

_T1 = procedure (const p0 : string;
const p1 : string) of object;

_T2 = _T1;

_T3 = procedure (p0 : TIMenuItemIntf) of object;

procedure __RegisterProps;
begin
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..0] of TClass = (
TDCExpert
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..1] of string = (
'Register'
,'RegisterExpertVerb'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),NoParams,Addr(Register),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(string),
TypeInfo(string)],Addr(RegisterExpertVerb),cRegister);

RegisterProc(TDCExpert,'Create',mtConstructor,TypeInfo(_T2),[
TypeInfo(string),
TypeInfo(string)],Addr(TDCExpert.Create),cRegister);

RegRegisterMethod(TDCExpert,'ExpertItemClick',TypeInfo(_T3),[
TypeInfo(TIMenuItemIntf)],Addr(TDCExpert.ExpertItemClick));

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
