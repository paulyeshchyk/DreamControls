{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit EXPTINTF_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  VirtIntf,
  ToolIntf,
  ExptIntf;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (p0 : TIExpert) of object;

_T1 = function : string of object;

_T2 = _T1;

_T3 = _T1;

_T4 = _T1;

_T5 = function : HICON of object;

_T6 = function : TExpertStyle of object;

_T7 = function : TExpertState of object;

_T8 = _T1;

_T9 = _T1;

_T10 = procedure  of object;

procedure __RegisterProps;
begin
end;

function __DC__GetExptIntf__ToolServices(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(ExptIntf.ToolServices);
end;

procedure __DC__SetExptIntf__ToolServices(Instance : TObject; Params : PVariantArgList);
begin
TObject(ExptIntf.ToolServices):=(VarToObject(OleVariant(Params^[0])));
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('ToolServices',__DC__GetExptIntf__ToolServices,__DC__SetExptIntf__ToolServices));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..7] of string = (
'isExperts'
,'ValidExpertVersion'
,'esStandard'
,'esForm'
,'esProject'
,'esAddIn'
,'esEnabled'
,'esChecked'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,isExperts));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,ValidExpertVersion));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,esStandard));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,esForm));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,esProject));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,esAddIn));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,esEnabled));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,esChecked));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..0] of TClass = (
TIExpert
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'RegisterLibraryExpert'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(TIExpert)],Addr(RegisterLibraryExpert),cRegister);

//RegisterProc(TIExpert,'GetName',mtMethod,TypeInfo(_T1),[TypeInfo(string)], pointer(12),cStdCall);
RegisterProc(TIExpert,'GetName',mtMethod,TypeInfo(_T1),[TypeInfo(string)],  getVMTProcAddr('TIExpert','GetName',12),cStdCall);


//RegisterProc(TIExpert,'GetAuthor',mtMethod,TypeInfo(_T2),[TypeInfo(string)], pointer(16),cStdCall);
RegisterProc(TIExpert,'GetAuthor',mtMethod,TypeInfo(_T2),[TypeInfo(string)],  getVMTProcAddr('TIExpert','GetAuthor',16),cStdCall);


//RegisterProc(TIExpert,'GetComment',mtMethod,TypeInfo(_T3),[TypeInfo(string)], pointer(20),cStdCall);
RegisterProc(TIExpert,'GetComment',mtMethod,TypeInfo(_T3),[TypeInfo(string)],  getVMTProcAddr('TIExpert','GetComment',20),cStdCall);


//RegisterProc(TIExpert,'GetPage',mtMethod,TypeInfo(_T4),[TypeInfo(string)], pointer(24),cStdCall);
RegisterProc(TIExpert,'GetPage',mtMethod,TypeInfo(_T4),[TypeInfo(string)],  getVMTProcAddr('TIExpert','GetPage',24),cStdCall);


//RegisterProc(TIExpert,'GetGlyph',mtMethod,TypeInfo(_T5),[TypeInfo(HICON)], pointer(28),cStdCall);
RegisterProc(TIExpert,'GetGlyph',mtMethod,TypeInfo(_T5),[TypeInfo(HICON)],  getVMTProcAddr('TIExpert','GetGlyph',28),cStdCall);


//RegisterProc(TIExpert,'GetStyle',mtMethod,TypeInfo(_T6),[TypeInfo(TExpertStyle)], pointer(32),cStdCall);
RegisterProc(TIExpert,'GetStyle',mtMethod,TypeInfo(_T6),[TypeInfo(TExpertStyle)],  getVMTProcAddr('TIExpert','GetStyle',32),cStdCall);


//RegisterProc(TIExpert,'GetState',mtMethod,TypeInfo(_T7),[TypeInfo(TExpertState)], pointer(36),cStdCall);
RegisterProc(TIExpert,'GetState',mtMethod,TypeInfo(_T7),[TypeInfo(TExpertState)],  getVMTProcAddr('TIExpert','GetState',36),cStdCall);


//RegisterProc(TIExpert,'GetIDString',mtMethod,TypeInfo(_T8),[TypeInfo(string)], pointer(40),cStdCall);
RegisterProc(TIExpert,'GetIDString',mtMethod,TypeInfo(_T8),[TypeInfo(string)],  getVMTProcAddr('TIExpert','GetIDString',40),cStdCall);


//RegisterProc(TIExpert,'GetMenuText',mtMethod,TypeInfo(_T9),[TypeInfo(string)], pointer(44),cStdCall);
RegisterProc(TIExpert,'GetMenuText',mtMethod,TypeInfo(_T9),[TypeInfo(string)],  getVMTProcAddr('TIExpert','GetMenuText',44),cStdCall);


//RegisterProc(TIExpert,'Execute',mtMethod,TypeInfo(_T10),NoParams, pointer(48),cStdCall);
RegisterProc(TIExpert,'Execute',mtMethod,TypeInfo(_T10),NoParams,  getVMTProcAddr('TIExpert','Execute',48),cStdCall);


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
