{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IBSCRIPT_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Classes,
  IBDatabase,
  IBCustomDataset,
  IBSQL,
  IBDatabaseInfo,
  IBScript;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (const p0 : string) of object;

_T1 = _T0;

_T2 = _T0;

_T3 = _T0;

_T4 = _T0;

_T5 = procedure  of object;

_T6 = _T0;

_T7 = function : Boolean of object;

_T8 = _T5;

_T9 = function (p0 : string): TIBXSQLVAR of object;

_T10 = _T5;

_T11 = _T5;

_T12 = _T5;

_T13 = _T5;

_T14 = procedure (p0 : TIBParseKind;
p1 : string) of object;

_T15 = procedure (p0 : string;
p1 : string) of object;

_T16 = _T5;

function __DC__GetTIBScript__Paused(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBScript(Instance).Paused;
end;

procedure __DC__SetTIBScript__Paused(Instance : TObject; Params : PVariantArgList);
begin
TIBScript(Instance).Paused:=OleVariant(Params^[0]);
end;

function __DC__GetTIBScript__Params(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBScript(Instance).Params);
end;

function __DC__GetTIBScript__Stats(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBScript(Instance).Stats);
end;

function __DC__GetTIBScript__CurrentTokens(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBScript(Instance).CurrentTokens);
end;

function __DC__GetTIBScript__Validating(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBScript(Instance).Validating;
end;

function __DC__GetTIBScriptStats__Database(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBScriptStats(Instance).Database);
end;

procedure __DC__SetTIBScriptStats__Database(Instance : TObject; Params : PVariantArgList);
begin
TIBScriptStats(Instance).Database:=TIBDatabase(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIBSQLParser__CurrentLine(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBSQLParser(Instance).CurrentLine;
end;

function __DC__GetTIBSQLParser__CurrentTokens(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBSQLParser(Instance).CurrentTokens);
end;

procedure __RegisterProps;
begin
RegisterProperty(TIBScript,'Paused',__DC__GetTIBScript__Paused,__DC__SetTIBScript__Paused);
RegisterProperty(TIBScript,'Params',__DC__GetTIBScript__Params,nil);
RegisterProperty(TIBScript,'Stats',__DC__GetTIBScript__Stats,nil);
RegisterProperty(TIBScript,'CurrentTokens',__DC__GetTIBScript__CurrentTokens,nil);
RegisterProperty(TIBScript,'Validating',__DC__GetTIBScript__Validating,nil);
RegisterProperty(TIBScriptStats,'Database',__DC__GetTIBScriptStats__Database,__DC__SetTIBScriptStats__Database);
RegisterProperty(TIBSQLParser,'CurrentLine',__DC__GetTIBSQLParser__CurrentLine,nil);
RegisterProperty(TIBSQLParser,'CurrentTokens',__DC__GetTIBSQLParser__CurrentTokens,nil);
end;

const __ConstNames0 : array[0..16] of string = (
'stmtDDL'
,'stmtDML'
,'stmtSET'
,'stmtCONNECT'
,'stmtDrop'
,'stmtCREATE'
,'stmtINPUT'
,'stmtUNK'
,'stmtEMPTY'
,'stmtTERM'
,'stmtERR'
,'stmtCOMMIT'
,'stmtROLLBACK'
,'stmtReconnect'
,'stmtRollbackSavePoint'
,'stmtReleaseSavePoint'
,'stmtStartSavepoint'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,stmtDDL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,stmtDML));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,stmtSET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,stmtCONNECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,stmtDrop));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,stmtCREATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,stmtINPUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,stmtUNK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,stmtEMPTY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,stmtTERM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,stmtERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,stmtCOMMIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,stmtROLLBACK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,stmtReconnect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,stmtRollbackSavePoint));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,stmtReleaseSavePoint));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,stmtStartSavepoint));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..2] of TClass = (
TIBScript,
TIBScriptStats,
TIBSQLParser
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TIBScript,'DoDML',TypeInfo(_T0),[TypeInfo(string)], pointer(48));
RegRegisterMethod(TIBScript,'DoDML',TypeInfo(_T0),[TypeInfo(string)],  getVMTProcAddr('TIBScript','DoDML',48));


//RegRegisterMethod(TIBScript,'DoDDL',TypeInfo(_T1),[TypeInfo(string)], pointer(52));
RegRegisterMethod(TIBScript,'DoDDL',TypeInfo(_T1),[TypeInfo(string)],  getVMTProcAddr('TIBScript','DoDDL',52));


//RegRegisterMethod(TIBScript,'DoSET',TypeInfo(_T2),[TypeInfo(string)], pointer(56));
RegRegisterMethod(TIBScript,'DoSET',TypeInfo(_T2),[TypeInfo(string)],  getVMTProcAddr('TIBScript','DoSET',56));


//RegRegisterMethod(TIBScript,'DoConnect',TypeInfo(_T3),[TypeInfo(string)], pointer(60));
RegRegisterMethod(TIBScript,'DoConnect',TypeInfo(_T3),[TypeInfo(string)],  getVMTProcAddr('TIBScript','DoConnect',60));


//RegRegisterMethod(TIBScript,'DoCreate',TypeInfo(_T4),[TypeInfo(string)], pointer(64));
RegRegisterMethod(TIBScript,'DoCreate',TypeInfo(_T4),[TypeInfo(string)],  getVMTProcAddr('TIBScript','DoCreate',64));


//RegRegisterMethod(TIBScript,'DoReconnect',TypeInfo(_T5),NoParams, pointer(68));
RegRegisterMethod(TIBScript,'DoReconnect',TypeInfo(_T5),NoParams,  getVMTProcAddr('TIBScript','DoReconnect',68));


//RegRegisterMethod(TIBScript,'DropDatabase',TypeInfo(_T6),[TypeInfo(string)], pointer(72));
RegRegisterMethod(TIBScript,'DropDatabase',TypeInfo(_T6),[TypeInfo(string)],  getVMTProcAddr('TIBScript','DropDatabase',72));


RegRegisterMethod(TIBScript,'ValidateScript',TypeInfo(_T7),[TypeInfo(Boolean)],Addr(TIBScript.ValidateScript));

RegRegisterMethod(TIBScript,'ExecuteScript',TypeInfo(_T8),NoParams,Addr(TIBScript.ExecuteScript));

RegRegisterMethod(TIBScript,'ParamByName',TypeInfo(_T9),[
TypeInfo(string),TypeInfo(TIBXSQLVAR)],Addr(TIBScript.ParamByName));

RegisterProc(TIBScriptStats,'Create',mtConstructor,TypeInfo(_T10),NoParams,Addr(TIBScriptStats.Create),cRegister);

RegRegisterMethod(TIBScriptStats,'Start',TypeInfo(_T11),NoParams,Addr(TIBScriptStats.Start));

RegRegisterMethod(TIBScriptStats,'Clear',TypeInfo(_T12),NoParams,Addr(TIBScriptStats.Clear));

RegRegisterMethod(TIBScriptStats,'Stop',TypeInfo(_T13),NoParams,Addr(TIBScriptStats.Stop));

//RegRegisterMethod(TIBSQLParser,'DoOnParse',TypeInfo(_T14),[TypeInfo(TIBParseKind),TypeInfo(string)], pointer(48));
RegRegisterMethod(TIBSQLParser,'DoOnParse',TypeInfo(_T14),[TypeInfo(TIBParseKind),TypeInfo(string)],  getVMTProcAddr('TIBSQLParser','DoOnParse',48));


//RegRegisterMethod(TIBSQLParser,'DoOnError',TypeInfo(_T15),[TypeInfo(string),TypeInfo(string)], pointer(52));
RegRegisterMethod(TIBSQLParser,'DoOnError',TypeInfo(_T15),[TypeInfo(string),TypeInfo(string)],  getVMTProcAddr('TIBSQLParser','DoOnError',52));


RegRegisterMethod(TIBSQLParser,'Parse',TypeInfo(_T16),NoParams,Addr(TIBSQLParser.Parse));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
RegisterEvent(TypeInfo(TIBScriptParamCheck),[
TypeInfo(TIBScript),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TIBSQLExecuteError),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(string),
TypeInfo(Integer),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TIBSQLParseError),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(string),
TypeInfo(Integer)]);

RegisterEvent(TypeInfo(TIBSQLParseStmt),[
TypeInfo(TObject),
TypeInfo(TIBParseKind),
TypeInfo(string)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
