{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit WSDLINTF_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Classes,
  XMLIntf,
  XMLDoc,
  WSDLIntf;
function ConvertTWStringToVariant(var R : TWString) : OleVariant;
function ConvertVariantToTWString(const V : OleVariant) : TWString;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TWString__Wrapper = class(TDCRecordWrapper)
private
fR : TWString;
public
function GetRecordPtr : pointer; override;
published
procedure setWString(const val : WideString);
function getWString : WideString;
property WString : WideString read getWString write setWString;
end;
type
_T0 = procedure  of object;

_T1 = function : Integer of object;

_T2 = _T0;

_T3 = function (const p0 : WideString): Integer of object;

_T4 = _T3;

_T5 = _T3;

_T6 = procedure (p0 : Integer;
const p1 : WideString) of object;

function __TWString__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWString__Wrapper.setWString(const val : WideString);
begin
TWString(GetRecordPtr^).WString := val;
end;
function __TWString__Wrapper.getWString : WideString;
begin
result := TWString(GetRecordPtr^).WString;
end;
function _TWString_ : IDispatch;
begin
  result := __TWString__Wrapper.Create;
end;

type __TWString__Wrapper__ = class(__TWString__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWString__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWStringToVariant(var R : TWString) : OleVariant;
var
__rw : __TWString__Wrapper__;
begin
__rw := __TWString__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWString(const V : OleVariant) : TWString;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWString((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTWideStrings__Strings(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWideStrings(Instance).Strings[OleVariant(Params^[0])];
end;

procedure __DC__SetTWideStrings__Strings(Instance : TObject; Params : PVariantArgList);
begin
TWideStrings(Instance).Strings[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterIndexedProperty(TWideStrings,'Strings',1,True,__DC__GetTWideStrings__Strings,__DC__SetTWideStrings__Strings);
end;

const __ConstNames0 : array[0..62] of string = (
'btUnknown'
,'btSoap'
,'btHttp'
,'btMime'
,'btDIME'
,'weServiceIntf'
,'weServiceImpl'
,'weMessage'
,'wePortType'
,'weBinding'
,'weService'
,'weTypes'
,'WeImport'
,'weOperation'
,'wePart'
,'SDefinitions'
,'SMessage'
,'SPart'
,'SType'
,'STypes'
,'SImport'
,'SPort'
,'SPortType'
,'SOperation'
,'SBinding'
,'SService'
,'SSchema'
,'SName'
,'STns'
,'SInput'
,'SOutput'
,'SInOut'
,'SRequest'
,'SResponse'
,'SReturn'
,'SElement'
,'SComplexType'
,'xsdns'
,'tns'
,'Wsdlns'
,'Soapns'
,'Httpns'
,'SAddress'
,'SBody'
,'SHeader'
,'SFault'
,'SVerb'
,'SStyle'
,'STransport'
,'SLocation'
,'SSoapAction'
,'SParts'
,'SUse'
,'SNameSpace'
,'SEncodingStyle'
,'SArrayOf'
,'SArray'
,'SArrayType'
,'SUnknown'
,'SDynArray'
,'SAnySimpleType'
,'SAnyType'
,'SNsPrefix'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,btUnknown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,btSoap));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,btHttp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,btMime));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,btDIME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,weServiceIntf));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,weServiceImpl));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,weMessage));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,wePortType));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,weBinding));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,weService));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,weTypes));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,WeImport));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,weOperation));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,wePart));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,SDefinitions));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,SMessage));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,SPart));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,SType));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,STypes));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,SImport));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,SPort));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,SPortType));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,SOperation));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,SBinding));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,SService));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,SSchema));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,SName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,STns));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,SInput));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,SOutput));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,SInOut));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,SRequest));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,SResponse));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,SReturn));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,SElement));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,SComplexType));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,xsdns));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,tns));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,Wsdlns));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,Soapns));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,Httpns));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,SAddress));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,SBody));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,SHeader));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,SFault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,SVerb));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,SStyle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,STransport));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,SLocation));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,SSoapAction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,SParts));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,SUse));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,SNameSpace));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,SEncodingStyle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,SArrayOf));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,SArray));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,SArrayType));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,SUnknown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,SDynArray));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,SAnySimpleType));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,SAnyType));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,SNsPrefix));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..0] of TClass = (
TWideStrings
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'TWString'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TWString_)));
RegisterProc(TWideStrings,'Create',mtConstructor,TypeInfo(_T0),NoParams,Addr(TWideStrings.Create),cRegister);

RegRegisterMethod(TWideStrings,'Count',TypeInfo(_T1),[TypeInfo(Integer)],Addr(TWideStrings.Count));

RegRegisterMethod(TWideStrings,'Clear',TypeInfo(_T2),NoParams,Addr(TWideStrings.Clear));

RegRegisterMethod(TWideStrings,'Add',TypeInfo(_T3),[
TypeInfo(WideString),TypeInfo(Integer)],Addr(TWideStrings.Add));

RegRegisterMethod(TWideStrings,'IndexOf',TypeInfo(_T4),[
TypeInfo(WideString),TypeInfo(Integer)],Addr(TWideStrings.IndexOf));

RegRegisterMethod(TWideStrings,'IndexOfIgnoreCase',TypeInfo(_T5),[
TypeInfo(WideString),TypeInfo(Integer)],Addr(TWideStrings.IndexOfIgnoreCase));

RegRegisterMethod(TWideStrings,'Insert',TypeInfo(_T6),[
TypeInfo(Integer),
TypeInfo(WideString)],Addr(TWideStrings.Insert));

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
