{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDSNTP_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdUDPClient,
  IdSNTP;
function ConvertTLrToVariant(var R : TLr) : OleVariant;
function ConvertVariantToTLr(const V : OleVariant) : TLr;
function ConvertTNTPGramToVariant(var R : TNTPGram) : OleVariant;
function ConvertVariantToTNTPGram(const V : OleVariant) : TNTPGram;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TLr__Wrapper = class(TDCRecordWrapper)
private
fR : TLr;
public
function GetRecordPtr : pointer; override;
published
procedure setL1(const val : Byte);
function getL1 : Byte;
property L1 : Byte read getL1 write setL1;
procedure setL2(const val : Byte);
function getL2 : Byte;
property L2 : Byte read getL2 write setL2;
procedure setL3(const val : Byte);
function getL3 : Byte;
property L3 : Byte read getL3 write setL3;
procedure setL4(const val : Byte);
function getL4 : Byte;
property L4 : Byte read getL4 write setL4;
end;
type __TNTPGram__Wrapper = class(TDCRecordWrapper)
private
fR : TNTPGram;
public
function GetRecordPtr : pointer; override;
published
procedure setHead1(const val : Byte);
function getHead1 : Byte;
property Head1 : Byte read getHead1 write setHead1;
procedure setHead2(const val : Byte);
function getHead2 : Byte;
property Head2 : Byte read getHead2 write setHead2;
procedure setHead3(const val : Byte);
function getHead3 : Byte;
property Head3 : Byte read getHead3 write setHead3;
procedure setHead4(const val : Byte);
function getHead4 : Byte;
property Head4 : Byte read getHead4 write setHead4;
procedure setRootDelay(const val : Longint);
function getRootDelay : Longint;
property RootDelay : Longint read getRootDelay write setRootDelay;
procedure setRootDispersion(const val : Longint);
function getRootDispersion : Longint;
property RootDispersion : Longint read getRootDispersion write setRootDispersion;
procedure setRefID(const val : Longint);
function getRefID : Longint;
property RefID : Longint read getRefID write setRefID;
procedure setRef1(const val : Longint);
function getRef1 : Longint;
property Ref1 : Longint read getRef1 write setRef1;
procedure setRef2(const val : Longint);
function getRef2 : Longint;
property Ref2 : Longint read getRef2 write setRef2;
procedure setOrg1(const val : Longint);
function getOrg1 : Longint;
property Org1 : Longint read getOrg1 write setOrg1;
procedure setOrg2(const val : Longint);
function getOrg2 : Longint;
property Org2 : Longint read getOrg2 write setOrg2;
procedure setRcv1(const val : Longint);
function getRcv1 : Longint;
property Rcv1 : Longint read getRcv1 write setRcv1;
procedure setRcv2(const val : Longint);
function getRcv2 : Longint;
property Rcv2 : Longint read getRcv2 write setRcv2;
procedure setXmit1(const val : Longint);
function getXmit1 : Longint;
property Xmit1 : Longint read getXmit1 write setXmit1;
procedure setXmit2(const val : Longint);
function getXmit2 : Longint;
property Xmit2 : Longint read getXmit2 write setXmit2;
end;
type
_T0 = function : Boolean of object;

function __TLr__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TLr__Wrapper.setL1(const val : Byte);
begin
TLr(GetRecordPtr^).L1 := val;
end;
function __TLr__Wrapper.getL1 : Byte;
begin
result := TLr(GetRecordPtr^).L1;
end;
procedure __TLr__Wrapper.setL2(const val : Byte);
begin
TLr(GetRecordPtr^).L2 := val;
end;
function __TLr__Wrapper.getL2 : Byte;
begin
result := TLr(GetRecordPtr^).L2;
end;
procedure __TLr__Wrapper.setL3(const val : Byte);
begin
TLr(GetRecordPtr^).L3 := val;
end;
function __TLr__Wrapper.getL3 : Byte;
begin
result := TLr(GetRecordPtr^).L3;
end;
procedure __TLr__Wrapper.setL4(const val : Byte);
begin
TLr(GetRecordPtr^).L4 := val;
end;
function __TLr__Wrapper.getL4 : Byte;
begin
result := TLr(GetRecordPtr^).L4;
end;
function __TNTPGram__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNTPGram__Wrapper.setHead1(const val : Byte);
begin
TNTPGram(GetRecordPtr^).Head1 := val;
end;
function __TNTPGram__Wrapper.getHead1 : Byte;
begin
result := TNTPGram(GetRecordPtr^).Head1;
end;
procedure __TNTPGram__Wrapper.setHead2(const val : Byte);
begin
TNTPGram(GetRecordPtr^).Head2 := val;
end;
function __TNTPGram__Wrapper.getHead2 : Byte;
begin
result := TNTPGram(GetRecordPtr^).Head2;
end;
procedure __TNTPGram__Wrapper.setHead3(const val : Byte);
begin
TNTPGram(GetRecordPtr^).Head3 := val;
end;
function __TNTPGram__Wrapper.getHead3 : Byte;
begin
result := TNTPGram(GetRecordPtr^).Head3;
end;
procedure __TNTPGram__Wrapper.setHead4(const val : Byte);
begin
TNTPGram(GetRecordPtr^).Head4 := val;
end;
function __TNTPGram__Wrapper.getHead4 : Byte;
begin
result := TNTPGram(GetRecordPtr^).Head4;
end;
procedure __TNTPGram__Wrapper.setRootDelay(const val : Longint);
begin
TNTPGram(GetRecordPtr^).RootDelay := val;
end;
function __TNTPGram__Wrapper.getRootDelay : Longint;
begin
result := TNTPGram(GetRecordPtr^).RootDelay;
end;
procedure __TNTPGram__Wrapper.setRootDispersion(const val : Longint);
begin
TNTPGram(GetRecordPtr^).RootDispersion := val;
end;
function __TNTPGram__Wrapper.getRootDispersion : Longint;
begin
result := TNTPGram(GetRecordPtr^).RootDispersion;
end;
procedure __TNTPGram__Wrapper.setRefID(const val : Longint);
begin
TNTPGram(GetRecordPtr^).RefID := val;
end;
function __TNTPGram__Wrapper.getRefID : Longint;
begin
result := TNTPGram(GetRecordPtr^).RefID;
end;
procedure __TNTPGram__Wrapper.setRef1(const val : Longint);
begin
TNTPGram(GetRecordPtr^).Ref1 := val;
end;
function __TNTPGram__Wrapper.getRef1 : Longint;
begin
result := TNTPGram(GetRecordPtr^).Ref1;
end;
procedure __TNTPGram__Wrapper.setRef2(const val : Longint);
begin
TNTPGram(GetRecordPtr^).Ref2 := val;
end;
function __TNTPGram__Wrapper.getRef2 : Longint;
begin
result := TNTPGram(GetRecordPtr^).Ref2;
end;
procedure __TNTPGram__Wrapper.setOrg1(const val : Longint);
begin
TNTPGram(GetRecordPtr^).Org1 := val;
end;
function __TNTPGram__Wrapper.getOrg1 : Longint;
begin
result := TNTPGram(GetRecordPtr^).Org1;
end;
procedure __TNTPGram__Wrapper.setOrg2(const val : Longint);
begin
TNTPGram(GetRecordPtr^).Org2 := val;
end;
function __TNTPGram__Wrapper.getOrg2 : Longint;
begin
result := TNTPGram(GetRecordPtr^).Org2;
end;
procedure __TNTPGram__Wrapper.setRcv1(const val : Longint);
begin
TNTPGram(GetRecordPtr^).Rcv1 := val;
end;
function __TNTPGram__Wrapper.getRcv1 : Longint;
begin
result := TNTPGram(GetRecordPtr^).Rcv1;
end;
procedure __TNTPGram__Wrapper.setRcv2(const val : Longint);
begin
TNTPGram(GetRecordPtr^).Rcv2 := val;
end;
function __TNTPGram__Wrapper.getRcv2 : Longint;
begin
result := TNTPGram(GetRecordPtr^).Rcv2;
end;
procedure __TNTPGram__Wrapper.setXmit1(const val : Longint);
begin
TNTPGram(GetRecordPtr^).Xmit1 := val;
end;
function __TNTPGram__Wrapper.getXmit1 : Longint;
begin
result := TNTPGram(GetRecordPtr^).Xmit1;
end;
procedure __TNTPGram__Wrapper.setXmit2(const val : Longint);
begin
TNTPGram(GetRecordPtr^).Xmit2 := val;
end;
function __TNTPGram__Wrapper.getXmit2 : Longint;
begin
result := TNTPGram(GetRecordPtr^).Xmit2;
end;
function _TLr_ : IDispatch;
begin
  result := __TLr__Wrapper.Create;
end;
function _TNTPGram_ : IDispatch;
begin
  result := __TNTPGram__Wrapper.Create;
end;

type __TLr__Wrapper__ = class(__TLr__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TLr__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTLrToVariant(var R : TLr) : OleVariant;
var
__rw : __TLr__Wrapper__;
begin
__rw := __TLr__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTLr(const V : OleVariant) : TLr;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TLr((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNTPGram__Wrapper__ = class(__TNTPGram__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNTPGram__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNTPGramToVariant(var R : TNTPGram) : OleVariant;
var
__rw : __TNTPGram__Wrapper__;
begin
__rw := __TNTPGram__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNTPGram(const V : OleVariant) : TNTPGram;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNTPGram((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTIdSNTP__AdjustmentTime(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdSNTP(Instance).AdjustmentTime;
end;

function __DC__GetTIdSNTP__DateTime(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdSNTP(Instance).DateTime;
end;

function __DC__GetTIdSNTP__RoundTripDelay(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdSNTP(Instance).RoundTripDelay;
end;

function __DC__GetTIdSNTP__CheckStratum(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdSNTP(Instance).CheckStratum;
end;

procedure __DC__SetTIdSNTP__CheckStratum(Instance : TObject; Params : PVariantArgList);
begin
TIdSNTP(Instance).CheckStratum:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TIdSNTP,'AdjustmentTime',__DC__GetTIdSNTP__AdjustmentTime,nil);
RegisterProperty(TIdSNTP,'DateTime',__DC__GetTIdSNTP__DateTime,nil);
RegisterProperty(TIdSNTP,'RoundTripDelay',__DC__GetTIdSNTP__RoundTripDelay,nil);
RegisterProperty(TIdSNTP,'CheckStratum',__DC__GetTIdSNTP__CheckStratum,__DC__SetTIdSNTP__CheckStratum);
end;

const __ConstNames0 : array[0..0] of string = (
'NTPMaxInt'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,NTPMaxInt));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..0] of TClass = (
TIdSNTP
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..1] of string = (
'TLr'
,'TNTPGram'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TLr_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_TNTPGram_)));
RegRegisterMethod(TIdSNTP,'SyncTime',TypeInfo(_T0),[TypeInfo(Boolean)],Addr(TIdSNTP.SyncTime));

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
