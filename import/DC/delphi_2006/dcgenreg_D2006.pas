{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit dcgenreg_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  Classes,
  Graphics,
  TypInfo,
  SysUtils,
  Dialogs,
  Consts,
  dcdsgnstuff,
  dcconsts,
  dcsystem,
  dcapi,
  dcgen,
  dccommon,
  dcdreamlib,
  dccdes,
  dcGenReg;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure  of object;

_T1 = function : string of object;

_T2 = function : TPersistent of object;

{_T3 = function : TClass of object;}

_T4 = _T1;

_T5 = _T1;

_T6 = _T2;

_T7 = function : TTypeKinds of object;

procedure __RegisterProps;
begin
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..8] of TClass = (
TAVIFileNameEdit,
TCollPropName,
TDCPropName,
TExtCompEditor,
TFileNameEdit,
TPropEditCompEditor,
TPropNameEditor,
TStringsPropName,
TVerbNamePropEdit
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'Register'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),NoParams,Addr(Register),cRegister);

//RegRegisterMethod(TDCPropName,'GetLinkName',TypeInfo(_T1),[TypeInfo(string)], pointer(60));
RegRegisterMethod(TDCPropName,'GetLinkName',TypeInfo(_T1),[TypeInfo(string)],  getVMTProcAddr('TDCPropName','GetLinkName',60));


//RegRegisterMethod(TDCPropName,'Component',TypeInfo(_T2),[TypeInfo(TPersistent)], pointer(64));
RegRegisterMethod(TDCPropName,'Component',TypeInfo(_T2),[TypeInfo(TPersistent)],  getVMTProcAddr('TDCPropName','Component',64));


//RegRegisterMethod(TFileNameEdit,'GetDefaultExtension',TypeInfo(_T4),[TypeInfo(string)], pointer(60));
RegRegisterMethod(TFileNameEdit,'GetDefaultExtension',TypeInfo(_T4),[TypeInfo(string)],  getVMTProcAddr('TFileNameEdit','GetDefaultExtension',60));


//RegRegisterMethod(TFileNameEdit,'GetFilter',TypeInfo(_T5),[TypeInfo(string)], pointer(64));
RegRegisterMethod(TFileNameEdit,'GetFilter',TypeInfo(_T5),[TypeInfo(string)],  getVMTProcAddr('TFileNameEdit','GetFilter',64));


//RegRegisterMethod(TPropNameEditor,'Component',TypeInfo(_T6),[TypeInfo(TPersistent)], pointer(60));
RegRegisterMethod(TPropNameEditor,'Component',TypeInfo(_T6),[TypeInfo(TPersistent)],  getVMTProcAddr('TPropNameEditor','Component',60));


//RegRegisterMethod(TPropNameEditor,'GetFilter',TypeInfo(_T7),[TypeInfo(TTypeKinds)], pointer(64));
RegRegisterMethod(TPropNameEditor,'GetFilter',TypeInfo(_T7),[TypeInfo(TTypeKinds)],  getVMTProcAddr('TPropNameEditor','GetFilter',64));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegRegisterMethod(TDCPropName,'GetClass',TypeInfo(_T3),[TypeInfo(TClass)], pointer(68))}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
