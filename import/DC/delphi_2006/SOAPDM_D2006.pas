{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit SOAPDM_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  ComObj,
  Variants,
  Classes,
  Midas,
  Provider,
  SysUtils,
  HTTPApp,
  SOAPMidas,
  Types,
  SOAPDm;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = function (const p0 : string): TCustomProvider of object;

_T1 = function (const p0 : WideString;
p1 : OleVariant;
p2 : Integer;
out p3 : Integer;
var p4 : OleVariant): OleVariant of object;

_T2 = function (const p0 : WideString;
p1 : Integer;
out p2 : Integer;
p3 : Integer;
const p4 : WideString;
var p5 : OleVariant;
var p6 : OleVariant): OleVariant of object;

_T3 = function (const p0 : WideString;
p1 : OleVariant): OleVariant of object;

{_T4 = function : TWideStringDynArray of object;}

_T5 = function (const p0 : WideString;
var p1 : OleVariant): OleVariant of object;

_T6 = function (const p0 : WideString;
p1 : OleVariant;
p2 : Integer;
var p3 : OleVariant): OleVariant of object;

_T7 = procedure (const p0 : WideString;
const p1 : WideString;
var p2 : OleVariant;
var p3 : OleVariant) of object;

_T8 = function : Integer of object;

_T9 = _T8;

_T10 = procedure  of object;

_T11 = _T10;

_T12 = procedure (p0 : TCustomProvider) of object;

_T13 = _T12;

function __DC__GetTSoapDataModule__Providers(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TSoapDataModule(Instance).Providers[OleVariant(Params^[0])]);
end;

function __DC__GetTSoapDataModule__ProviderCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSoapDataModule(Instance).ProviderCount;
end;

function __DC__GetTSoapDataModule__RefCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSoapDataModule(Instance).RefCount;
end;

procedure __RegisterProps;
begin
RegisterIndexedProperty(TSoapDataModule,'Providers',1,False,__DC__GetTSoapDataModule__Providers,nil);
RegisterProperty(TSoapDataModule,'ProviderCount',__DC__GetTSoapDataModule__ProviderCount,nil);
RegisterProperty(TSoapDataModule,'RefCount',__DC__GetTSoapDataModule__RefCount,nil);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..0] of TClass = (
TSoapDataModule
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TSoapDataModule,'GetProvider',TypeInfo(_T0),[TypeInfo(string),TypeInfo(TCustomProvider)], pointer(60));
RegRegisterMethod(TSoapDataModule,'GetProvider',TypeInfo(_T0),[TypeInfo(string),TypeInfo(TCustomProvider)],  getVMTProcAddr('TSoapDataModule','GetProvider',60));


RegisterProc(TSoapDataModule,'SAS_ApplyUpdates',mtMethod,TypeInfo(_T1),[
TypeInfo(WideString),
TypeInfo(OleVariant),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(OleVariant),TypeInfo(OleVariant)], pointer(64),cStdCall);

RegisterProc(TSoapDataModule,'SAS_GetRecords',mtMethod,TypeInfo(_T2),[
TypeInfo(WideString),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(WideString),
TypeInfo(OleVariant),
TypeInfo(OleVariant),TypeInfo(OleVariant)], pointer(68),cStdCall);

//RegisterProc(TSoapDataModule,'SAS_DataRequest',mtMethod,TypeInfo(_T3),[TypeInfo(WideString),TypeInfo(OleVariant),TypeInfo(OleVariant)], pointer(72),cStdCall);
RegisterProc(TSoapDataModule,'SAS_DataRequest',mtMethod,TypeInfo(_T3),[TypeInfo(WideString),TypeInfo(OleVariant),TypeInfo(OleVariant)],  getVMTProcAddr('TSoapDataModule','SAS_DataRequest',72),cStdCall);


RegisterProc(TSoapDataModule,'SAS_GetParams',mtMethod,TypeInfo(_T5),[
TypeInfo(WideString),
TypeInfo(OleVariant),TypeInfo(OleVariant)], pointer(80),cStdCall);

RegisterProc(TSoapDataModule,'SAS_RowRequest',mtMethod,TypeInfo(_T6),[
TypeInfo(WideString),
TypeInfo(OleVariant),
TypeInfo(Integer),
TypeInfo(OleVariant),TypeInfo(OleVariant)], pointer(84),cStdCall);

RegisterProc(TSoapDataModule,'SAS_Execute',mtMethod,TypeInfo(_T7),[
TypeInfo(WideString),
TypeInfo(WideString),
TypeInfo(OleVariant),
TypeInfo(OleVariant)], pointer(88),cStdCall);

RegisterProc(TSoapDataModule,'_AddRef',mtMethod,TypeInfo(_T8),[TypeInfo(Integer)],Addr(TSoapDataModule._AddRef),cStdCall);

RegisterProc(TSoapDataModule,'_Release',mtMethod,TypeInfo(_T9),[TypeInfo(Integer)],Addr(TSoapDataModule._Release),cStdCall);

//RegRegisterMethod(TSoapDataModule,'Lock',TypeInfo(_T10),NoParams, pointer(92));
RegRegisterMethod(TSoapDataModule,'Lock',TypeInfo(_T10),NoParams,  getVMTProcAddr('TSoapDataModule','Lock',92));


//RegRegisterMethod(TSoapDataModule,'Unlock',TypeInfo(_T11),NoParams, pointer(96));
RegRegisterMethod(TSoapDataModule,'Unlock',TypeInfo(_T11),NoParams,  getVMTProcAddr('TSoapDataModule','Unlock',96));


RegRegisterMethod(TSoapDataModule,'RegisterProvider',TypeInfo(_T12),[
TypeInfo(TCustomProvider)],Addr(TSoapDataModule.RegisterProvider));

RegRegisterMethod(TSoapDataModule,'UnRegisterProvider',TypeInfo(_T13),[
TypeInfo(TCustomProvider)],Addr(TSoapDataModule.UnRegisterProvider));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
{RegisterProc(TSoapDataModule,'SAS_GetProviderNames',mtMethod,TypeInfo(_T4),[TypeInfo(TWideStringDynArray)], pointer(76),cStdCall)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
