{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IBCUSTOMDATASET_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  Types,
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Classes,
  Variants,
  Windows,
  IBExternals,
  IB,
  IBHeader,
  IBDatabase,
  IBSQL,
  Db,
  IBUtils,
  IBBlob,
  IBIntf,
  IBCustomDataSet;
function ConvertTFieldDataToVariant(var R : TFieldData) : OleVariant;
function ConvertVariantToTFieldData(const V : OleVariant) : TFieldData;
function ConvertTIBDBKeyToVariant(var R : TIBDBKey) : OleVariant;
function ConvertVariantToTIBDBKey(const V : OleVariant) : TIBDBKey;
function ConvertTRecordDataToVariant(var R : TRecordData) : OleVariant;
function ConvertVariantToTRecordData(const V : OleVariant) : TRecordData;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TFieldData__Wrapper = class(TDCRecordWrapper)
private
fR : TFieldData;
public
function GetRecordPtr : pointer; override;
published
procedure setfdDataType(const val : Short);
function getfdDataType : Short;
property fdDataType : Short read getfdDataType write setfdDataType;
procedure setfdDataScale(const val : Short);
function getfdDataScale : Short;
property fdDataScale : Short read getfdDataScale write setfdDataScale;
procedure setfdNullable(const val : Boolean);
function getfdNullable : Boolean;
property fdNullable : Boolean read getfdNullable write setfdNullable;
procedure setfdIsNull(const val : Boolean);
function getfdIsNull : Boolean;
property fdIsNull : Boolean read getfdIsNull write setfdIsNull;
procedure setfdDataSize(const val : Short);
function getfdDataSize : Short;
property fdDataSize : Short read getfdDataSize write setfdDataSize;
procedure setfdDataLength(const val : Short);
function getfdDataLength : Short;
property fdDataLength : Short read getfdDataLength write setfdDataLength;
procedure setfdDataOfs(const val : Integer);
function getfdDataOfs : Integer;
property fdDataOfs : Integer read getfdDataOfs write setfdDataOfs;
end;
type __TIBDBKey__Wrapper = class(TDCRecordWrapper)
private
fR : TIBDBKey;
public
function GetRecordPtr : pointer; override;
published
end;
type __TRecordData__Wrapper = class(TDCRecordWrapper)
private
fR : TRecordData;
public
function GetRecordPtr : pointer; override;
published
procedure setrdBookmarkFlag(const val : TBookmarkFlag);
function getrdBookmarkFlag : TBookmarkFlag;
property rdBookmarkFlag : TBookmarkFlag read getrdBookmarkFlag write setrdBookmarkFlag;
procedure setrdFieldCount(const val : Short);
function getrdFieldCount : Short;
property rdFieldCount : Short read getrdFieldCount write setrdFieldCount;
procedure setrdRecordNumber(const val : Long);
function getrdRecordNumber : Long;
property rdRecordNumber : Long read getrdRecordNumber write setrdRecordNumber;
procedure setrdCachedUpdateStatus(const val : TCachedUpdateStatus);
function getrdCachedUpdateStatus : TCachedUpdateStatus;
property rdCachedUpdateStatus : TCachedUpdateStatus read getrdCachedUpdateStatus write setrdCachedUpdateStatus;
procedure setrdUpdateStatus(const val : TUpdateStatus);
function getrdUpdateStatus : TUpdateStatus;
property rdUpdateStatus : TUpdateStatus read getrdUpdateStatus write setrdUpdateStatus;
procedure setrdSavedOffset(const val : DWORD);
function getrdSavedOffset : DWORD;
property rdSavedOffset : DWORD read getrdSavedOffset write setrdSavedOffset;
end;
type
_T0 = procedure (p0 : TField;
p1 : Pointer) of object;

_T1 = procedure (p0 : TIBBatchInput) of object;

_T2 = procedure (p0 : TIBBatchOutput) of object;

_T3 = procedure  of object;

_T4 = _T3;

_T5 = _T3;

_T6 = _T3;

_T7 = _T3;

_T8 = _T3;

_T9 = _T3;

_T10 = function : TCachedUpdateStatus of object;

_T11 = _T3;

_T12 = _T3;

_T13 = function (const p0 : string;
const p1 : Variant;
p2 : TLocateOptions): Boolean of object;

_T14 = procedure (p0 : Boolean) of object;

_T15 = _T3;

_T16 = _T3;

_T17 = function : TIBXSQLDA of object;

_T18 = function : TIBSQLTypes of object;

_T19 = procedure (p0 : TIBOutputXML) of object;

_T20 = procedure (p0 : TIBCustomDataSet) of object;

_T21 = _T3;

_T22 = _T3;

_T23 = _T1;

_T24 = _T2;

_T25 = _T3;

_T26 = function (p0 : string): TIBXSQLVAR of object;

_T27 = function : TIBCustomDataSet of object;

_T28 = _T20;

_T29 = procedure (p0 : TUpdateKind) of object;

_T30 = function (p0 : TUpdateKind): TStrings of object;

_T31 = procedure (p0 : TField;
p1 : TIBBlobStream;
p2 : TBlobStreamMode) of object;

_T32 = _T20;

_T33 = function : string of object;

_T34 = _T3;

_T35 = function (var p0 : string): Boolean of object;

function __TFieldData__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TFieldData__Wrapper.setfdDataType(const val : Short);
begin
TFieldData(GetRecordPtr^).fdDataType := val;
end;
function __TFieldData__Wrapper.getfdDataType : Short;
begin
result := TFieldData(GetRecordPtr^).fdDataType;
end;
procedure __TFieldData__Wrapper.setfdDataScale(const val : Short);
begin
TFieldData(GetRecordPtr^).fdDataScale := val;
end;
function __TFieldData__Wrapper.getfdDataScale : Short;
begin
result := TFieldData(GetRecordPtr^).fdDataScale;
end;
procedure __TFieldData__Wrapper.setfdNullable(const val : Boolean);
begin
TFieldData(GetRecordPtr^).fdNullable := val;
end;
function __TFieldData__Wrapper.getfdNullable : Boolean;
begin
result := TFieldData(GetRecordPtr^).fdNullable;
end;
procedure __TFieldData__Wrapper.setfdIsNull(const val : Boolean);
begin
TFieldData(GetRecordPtr^).fdIsNull := val;
end;
function __TFieldData__Wrapper.getfdIsNull : Boolean;
begin
result := TFieldData(GetRecordPtr^).fdIsNull;
end;
procedure __TFieldData__Wrapper.setfdDataSize(const val : Short);
begin
TFieldData(GetRecordPtr^).fdDataSize := val;
end;
function __TFieldData__Wrapper.getfdDataSize : Short;
begin
result := TFieldData(GetRecordPtr^).fdDataSize;
end;
procedure __TFieldData__Wrapper.setfdDataLength(const val : Short);
begin
TFieldData(GetRecordPtr^).fdDataLength := val;
end;
function __TFieldData__Wrapper.getfdDataLength : Short;
begin
result := TFieldData(GetRecordPtr^).fdDataLength;
end;
procedure __TFieldData__Wrapper.setfdDataOfs(const val : Integer);
begin
TFieldData(GetRecordPtr^).fdDataOfs := val;
end;
function __TFieldData__Wrapper.getfdDataOfs : Integer;
begin
result := TFieldData(GetRecordPtr^).fdDataOfs;
end;
function __TIBDBKey__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TRecordData__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRecordData__Wrapper.setrdBookmarkFlag(const val : TBookmarkFlag);
begin
TRecordData(GetRecordPtr^).rdBookmarkFlag := val;
end;
function __TRecordData__Wrapper.getrdBookmarkFlag : TBookmarkFlag;
begin
result := TRecordData(GetRecordPtr^).rdBookmarkFlag;
end;
procedure __TRecordData__Wrapper.setrdFieldCount(const val : Short);
begin
TRecordData(GetRecordPtr^).rdFieldCount := val;
end;
function __TRecordData__Wrapper.getrdFieldCount : Short;
begin
result := TRecordData(GetRecordPtr^).rdFieldCount;
end;
procedure __TRecordData__Wrapper.setrdRecordNumber(const val : Long);
begin
TRecordData(GetRecordPtr^).rdRecordNumber := val;
end;
function __TRecordData__Wrapper.getrdRecordNumber : Long;
begin
result := TRecordData(GetRecordPtr^).rdRecordNumber;
end;
procedure __TRecordData__Wrapper.setrdCachedUpdateStatus(const val : TCachedUpdateStatus);
begin
TRecordData(GetRecordPtr^).rdCachedUpdateStatus := val;
end;
function __TRecordData__Wrapper.getrdCachedUpdateStatus : TCachedUpdateStatus;
begin
result := TRecordData(GetRecordPtr^).rdCachedUpdateStatus;
end;
procedure __TRecordData__Wrapper.setrdUpdateStatus(const val : TUpdateStatus);
begin
TRecordData(GetRecordPtr^).rdUpdateStatus := val;
end;
function __TRecordData__Wrapper.getrdUpdateStatus : TUpdateStatus;
begin
result := TRecordData(GetRecordPtr^).rdUpdateStatus;
end;
procedure __TRecordData__Wrapper.setrdSavedOffset(const val : DWORD);
begin
TRecordData(GetRecordPtr^).rdSavedOffset := val;
end;
function __TRecordData__Wrapper.getrdSavedOffset : DWORD;
begin
result := TRecordData(GetRecordPtr^).rdSavedOffset;
end;
function _TFieldData_ : IDispatch;
begin
  result := __TFieldData__Wrapper.Create;
end;
function _TIBDBKey_ : IDispatch;
begin
  result := __TIBDBKey__Wrapper.Create;
end;
function _TRecordData_ : IDispatch;
begin
  result := __TRecordData__Wrapper.Create;
end;

type __TFieldData__Wrapper__ = class(__TFieldData__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TFieldData__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTFieldDataToVariant(var R : TFieldData) : OleVariant;
var
__rw : __TFieldData__Wrapper__;
begin
__rw := __TFieldData__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTFieldData(const V : OleVariant) : TFieldData;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TFieldData((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TIBDBKey__Wrapper__ = class(__TIBDBKey__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIBDBKey__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIBDBKeyToVariant(var R : TIBDBKey) : OleVariant;
var
__rw : __TIBDBKey__Wrapper__;
begin
__rw := __TIBDBKey__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIBDBKey(const V : OleVariant) : TIBDBKey;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIBDBKey((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRecordData__Wrapper__ = class(__TRecordData__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRecordData__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRecordDataToVariant(var R : TRecordData) : OleVariant;
var
__rw : __TRecordData__Wrapper__;
begin
__rw := __TRecordData__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRecordData(const V : OleVariant) : TRecordData;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRecordData((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTIBCustomDataSet__DBHandle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TIBCustomDataSet(Instance).DBHandle);
end;

function __DC__GetTIBCustomDataSet__TRHandle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TIBCustomDataSet(Instance).TRHandle);
end;

function __DC__GetTIBCustomDataSet__UpdateObject(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBCustomDataSet(Instance).UpdateObject);
end;

procedure __DC__SetTIBCustomDataSet__UpdateObject(Instance : TObject; Params : PVariantArgList);
begin
TIBCustomDataSet(Instance).UpdateObject:=TIBDataSetUpdateObject(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIBCustomDataSet__UpdatesPending(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBCustomDataSet(Instance).UpdatesPending;
end;

function __DC__GetTIBCustomDataSet__UpdateRecordTypes(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TIBUpdateRecordTypes;
begin
tmp := TIBCustomDataSet(Instance).UpdateRecordTypes;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTIBCustomDataSet__UpdateRecordTypes(Instance : TObject; Params : PVariantArgList);
var
  tmp : TIBUpdateRecordTypes;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TIBCustomDataSet(Instance).UpdateRecordTypes:=tmp;
end;

function __DC__GetTIBCustomDataSet__RowsAffected(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBCustomDataSet(Instance).RowsAffected;
end;

function __DC__GetTIBCustomDataSet__Plan(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBCustomDataSet(Instance).Plan;
end;

function __DC__GetTIBDataSet__Params(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBDataSet(Instance).Params);
end;

function __DC__GetTIBDataSet__Prepared(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBDataSet(Instance).Prepared;
end;

function __DC__GetTIBDataSet__StatementType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBDataSet(Instance).StatementType;
end;

function __DC__GetTIBDataSet__SelectStmtHandle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TIBDataSet(Instance).SelectStmtHandle);
end;

function __DC__GetTIBDataSet__LiveMode(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TLiveModes;
begin
tmp := TIBDataSet(Instance).LiveMode;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __RegisterProps;
begin
RegisterProperty(TIBCustomDataSet,'DBHandle',__DC__GetTIBCustomDataSet__DBHandle,nil);
RegisterProperty(TIBCustomDataSet,'TRHandle',__DC__GetTIBCustomDataSet__TRHandle,nil);
RegisterProperty(TIBCustomDataSet,'UpdateObject',__DC__GetTIBCustomDataSet__UpdateObject,__DC__SetTIBCustomDataSet__UpdateObject);
RegisterProperty(TIBCustomDataSet,'UpdatesPending',__DC__GetTIBCustomDataSet__UpdatesPending,nil);
RegisterProperty(TIBCustomDataSet,'UpdateRecordTypes',__DC__GetTIBCustomDataSet__UpdateRecordTypes,__DC__SetTIBCustomDataSet__UpdateRecordTypes);
RegisterProperty(TIBCustomDataSet,'RowsAffected',__DC__GetTIBCustomDataSet__RowsAffected,nil);
RegisterProperty(TIBCustomDataSet,'Plan',__DC__GetTIBCustomDataSet__Plan,nil);
RegisterProperty(TIBDataSet,'Params',__DC__GetTIBDataSet__Params,nil);
RegisterProperty(TIBDataSet,'Prepared',__DC__GetTIBDataSet__Prepared,nil);
RegisterProperty(TIBDataSet,'StatementType',__DC__GetTIBDataSet__StatementType,nil);
RegisterProperty(TIBDataSet,'SelectStmtHandle',__DC__GetTIBDataSet__SelectStmtHandle,nil);
RegisterProperty(TIBDataSet,'LiveMode',__DC__GetTIBDataSet__LiveMode,nil);
end;

const __ConstNames0 : array[0..19] of string = (
'BufferCacheSize'
,'UniCache'
,'cusUnmodified'
,'cusModified'
,'cusInserted'
,'cusDeleted'
,'cusUninserted'
,'gamOnNewRecord'
,'gamOnPost'
,'gamOnServer'
,'uaFail'
,'uaAbort'
,'uaSkip'
,'uaRetry'
,'uaApply'
,'uaApplied'
,'lmInsert'
,'lmModify'
,'lmDelete'
,'lmRefresh'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,BufferCacheSize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,UniCache));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,cusUnmodified));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,cusModified));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,cusInserted));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,cusDeleted));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,cusUninserted));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,gamOnNewRecord));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,gamOnPost));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,gamOnServer));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,uaFail));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,uaAbort));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,uaSkip));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,uaRetry));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,uaApply));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,uaApplied));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,lmInsert));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,lmModify));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,lmDelete));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,lmRefresh));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..7] of TClass = (
TIBBCDField,
TIBCustomDataSet,
TIBDataLink,
TIBDataSet,
TIBDataSetUpdateObject,
TIBDSBlobStream,
TIBGeneratorField,
TIBStringField
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..2] of string = (
'TFieldData'
,'TIBDBKey'
,'TRecordData'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TFieldData_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_TIBDBKey_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_TRecordData_)));
//RegRegisterMethod(TIBCustomDataSet,'InternalSetFieldData',TypeInfo(_T0),[TypeInfo(TField),TypeInfoPointer], pointer(640));
RegRegisterMethod(TIBCustomDataSet,'InternalSetFieldData',TypeInfo(_T0),[TypeInfo(TField),TypeInfoPointer],  getVMTProcAddr('TIBCustomDataSet','InternalSetFieldData',640));


//RegRegisterMethod(TIBCustomDataSet,'InternalBatchInput',TypeInfo(_T1),[TypeInfo(TIBBatchInput)], pointer(644));
RegRegisterMethod(TIBCustomDataSet,'InternalBatchInput',TypeInfo(_T1),[TypeInfo(TIBBatchInput)],  getVMTProcAddr('TIBCustomDataSet','InternalBatchInput',644));


//RegRegisterMethod(TIBCustomDataSet,'InternalBatchOutput',TypeInfo(_T2),[TypeInfo(TIBBatchOutput)], pointer(648));
RegRegisterMethod(TIBCustomDataSet,'InternalBatchOutput',TypeInfo(_T2),[TypeInfo(TIBBatchOutput)],  getVMTProcAddr('TIBCustomDataSet','InternalBatchOutput',648));


//RegRegisterMethod(TIBCustomDataSet,'InternalPrepare',TypeInfo(_T3),NoParams, pointer(652));
RegRegisterMethod(TIBCustomDataSet,'InternalPrepare',TypeInfo(_T3),NoParams,  getVMTProcAddr('TIBCustomDataSet','InternalPrepare',652));


//RegRegisterMethod(TIBCustomDataSet,'InternalUnPrepare',TypeInfo(_T4),NoParams, pointer(656));
RegRegisterMethod(TIBCustomDataSet,'InternalUnPrepare',TypeInfo(_T4),NoParams,  getVMTProcAddr('TIBCustomDataSet','InternalUnPrepare',656));


//RegRegisterMethod(TIBCustomDataSet,'InternalExecQuery',TypeInfo(_T5),NoParams, pointer(660));
RegRegisterMethod(TIBCustomDataSet,'InternalExecQuery',TypeInfo(_T5),NoParams,  getVMTProcAddr('TIBCustomDataSet','InternalExecQuery',660));


//RegRegisterMethod(TIBCustomDataSet,'InternalRefreshRow',TypeInfo(_T6),NoParams, pointer(664));
RegRegisterMethod(TIBCustomDataSet,'InternalRefreshRow',TypeInfo(_T6),NoParams,  getVMTProcAddr('TIBCustomDataSet','InternalRefreshRow',664));


//RegRegisterMethod(TIBCustomDataSet,'InternalSetParamsFromCursor',TypeInfo(_T7),NoParams, pointer(668));
RegRegisterMethod(TIBCustomDataSet,'InternalSetParamsFromCursor',TypeInfo(_T7),NoParams,  getVMTProcAddr('TIBCustomDataSet','InternalSetParamsFromCursor',668));


//RegRegisterMethod(TIBCustomDataSet,'Disconnect',TypeInfo(_T8),NoParams, pointer(672));
RegRegisterMethod(TIBCustomDataSet,'Disconnect',TypeInfo(_T8),NoParams,  getVMTProcAddr('TIBCustomDataSet','Disconnect',672));


RegRegisterMethod(TIBCustomDataSet,'ApplyUpdates',TypeInfo(_T9),NoParams,Addr(TIBCustomDataSet.ApplyUpdates));

RegRegisterMethod(TIBCustomDataSet,'CachedUpdateStatus',TypeInfo(_T10),[TypeInfo(TCachedUpdateStatus)],Addr(TIBCustomDataSet.CachedUpdateStatus));

RegRegisterMethod(TIBCustomDataSet,'CancelUpdates',TypeInfo(_T11),NoParams,Addr(TIBCustomDataSet.CancelUpdates));

RegRegisterMethod(TIBCustomDataSet,'FetchAll',TypeInfo(_T12),NoParams,Addr(TIBCustomDataSet.FetchAll));

RegRegisterMethod(TIBCustomDataSet,'LocateNext',TypeInfo(_T13),[
TypeInfo(string),
TypeInfo(Variant),
TypeInfo(TLocateOptions),TypeInfo(Boolean)],Addr(TIBCustomDataSet.LocateNext));

RegRegisterMethod(TIBCustomDataSet,'RecordModified',TypeInfo(_T14),[
TypeInfo(Boolean)],Addr(TIBCustomDataSet.RecordModified));

RegRegisterMethod(TIBCustomDataSet,'RevertRecord',TypeInfo(_T15),NoParams,Addr(TIBCustomDataSet.RevertRecord));

RegRegisterMethod(TIBCustomDataSet,'Undelete',TypeInfo(_T16),NoParams,Addr(TIBCustomDataSet.Undelete));

RegRegisterMethod(TIBCustomDataSet,'Current',TypeInfo(_T17),[TypeInfo(TIBXSQLDA)],Addr(TIBCustomDataSet.Current));

RegRegisterMethod(TIBCustomDataSet,'SQLType',TypeInfo(_T18),[TypeInfo(TIBSQLTypes)],Addr(TIBCustomDataSet.SQLType));

RegRegisterMethod(TIBCustomDataSet,'OutputXML',TypeInfo(_T19),[
TypeInfo(TIBOutputXML)],Addr(TIBCustomDataSet.OutputXML));

RegisterProc(TIBDataLink,'Create',mtConstructor,TypeInfo(_T20),[
TypeInfo(TIBCustomDataSet)],Addr(TIBDataLink.Create),cRegister);

RegRegisterMethod(TIBDataSet,'Prepare',TypeInfo(_T21),NoParams,Addr(TIBDataSet.Prepare));

RegRegisterMethod(TIBDataSet,'UnPrepare',TypeInfo(_T22),NoParams,Addr(TIBDataSet.UnPrepare));

RegRegisterMethod(TIBDataSet,'BatchInput',TypeInfo(_T23),[
TypeInfo(TIBBatchInput)],Addr(TIBDataSet.BatchInput));

RegRegisterMethod(TIBDataSet,'BatchOutput',TypeInfo(_T24),[
TypeInfo(TIBBatchOutput)],Addr(TIBDataSet.BatchOutput));

RegRegisterMethod(TIBDataSet,'ExecSQL',TypeInfo(_T25),NoParams,Addr(TIBDataSet.ExecSQL));

RegRegisterMethod(TIBDataSet,'ParamByName',TypeInfo(_T26),[
TypeInfo(string),TypeInfo(TIBXSQLVAR)],Addr(TIBDataSet.ParamByName));

//RegRegisterMethod(TIBDataSetUpdateObject,'GetDataSet',TypeInfo(_T27),[TypeInfo(TIBCustomDataSet)], pointer(48));
RegRegisterMethod(TIBDataSetUpdateObject,'GetDataSet',TypeInfo(_T27),[TypeInfo(TIBCustomDataSet)],  getVMTProcAddr('TIBDataSetUpdateObject','GetDataSet',48));


//RegRegisterMethod(TIBDataSetUpdateObject,'SetDataSet',TypeInfo(_T28),[TypeInfo(TIBCustomDataSet)], pointer(52));
RegRegisterMethod(TIBDataSetUpdateObject,'SetDataSet',TypeInfo(_T28),[TypeInfo(TIBCustomDataSet)],  getVMTProcAddr('TIBDataSetUpdateObject','SetDataSet',52));


//RegRegisterMethod(TIBDataSetUpdateObject,'Apply',TypeInfo(_T29),[TypeInfo(TUpdateKind)], pointer(56));
RegRegisterMethod(TIBDataSetUpdateObject,'Apply',TypeInfo(_T29),[TypeInfo(TUpdateKind)],  getVMTProcAddr('TIBDataSetUpdateObject','Apply',56));


//RegRegisterMethod(TIBDataSetUpdateObject,'GetSQL',TypeInfo(_T30),[TypeInfo(TUpdateKind),TypeInfo(TStrings)], pointer(60));
RegRegisterMethod(TIBDataSetUpdateObject,'GetSQL',TypeInfo(_T30),[TypeInfo(TUpdateKind),TypeInfo(TStrings)],  getVMTProcAddr('TIBDataSetUpdateObject','GetSQL',60));


RegisterProc(TIBDSBlobStream,'Create',mtConstructor,TypeInfo(_T31),[
TypeInfo(TField),
TypeInfo(TIBBlobStream),
TypeInfo(TBlobStreamMode)],Addr(TIBDSBlobStream.Create),cRegister);

RegisterProc(TIBGeneratorField,'Create',mtConstructor,TypeInfo(_T32),[
TypeInfo(TIBCustomDataSet)],Addr(TIBGeneratorField.Create),cRegister);

RegRegisterMethod(TIBGeneratorField,'ValueName',TypeInfo(_T33),[TypeInfo(string)],Addr(TIBGeneratorField.ValueName));

RegRegisterMethod(TIBGeneratorField,'Apply',TypeInfo(_T34),NoParams,Addr(TIBGeneratorField.Apply));

RegRegisterMethod(TIBStringField,'GetValue',TypeInfo(_T35),[
TypeInfo(string),TypeInfo(Boolean)],Addr(TIBStringField.GetValue));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
RegisterEvent(TypeInfo(TIBUpdateErrorEvent),[
TypeInfo(TDataSet),
TypeInfo(EDatabaseError),
TypeInfo(TUpdateKind),
TypeInfo(TIBUpdateAction)]);

RegisterEvent(TypeInfo(TIBUpdateRecordEvent),[
TypeInfo(TDataSet),
TypeInfo(TUpdateKind),
TypeInfo(TIBUpdateAction)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
