{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit CONTNRS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Classes,
  Contnrs;
function ConvertTBucketToVariant(var R : TBucket) : OleVariant;
function ConvertVariantToTBucket(const V : OleVariant) : TBucket;
function ConvertTBucketItemToVariant(var R : TBucketItem) : OleVariant;
function ConvertVariantToTBucketItem(const V : OleVariant) : TBucketItem;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TBucket__Wrapper = class(TDCRecordWrapper)
private
fR : TBucket;
public
function GetRecordPtr : pointer; override;
published
procedure setCount(const val : Integer);
function getCount : Integer;
property Count : Integer read getCount write setCount;
end;
type __TBucketItem__Wrapper = class(TDCRecordWrapper)
private
fR : TBucketItem;
public
function GetRecordPtr : pointer; override;
published
end;
type
_T0 = procedure (const p0 : string;
const p1 : Array of Const) of object;

_T1 = procedure (p0 : TBucketListSizes) of object;

{_T2 = function (p0 : TClass): Integer of object;}

{_T3 = function (p0 : TClass): TClass of object;}

{_T4 = function (p0 : TClass): Integer of object;}

{_T5 = function (p0 : TClass): Integer of object;}

{_T6 = function : TClass of object;}

{_T7 = function : TClass of object;}

{_T8 = procedure (p0 : Integer;
p1 : TClass) of object;}

_T9 = function (p0 : TComponent): Integer of object;

_T10 = function (p0 : TComponent): TComponent of object;

_T11 = _T9;

_T12 = _T9;

_T13 = function : TComponent of object;

_T14 = _T13;

_T15 = procedure (p0 : Integer;
p1 : TComponent) of object;

_T16 = function (p0 : Pointer): Integer of object;

_T17 = function (p0 : Pointer;
out p1 : Integer;
out p2 : Integer): Boolean of object;

_T18 = function (p0 : Integer;
p1 : Pointer;
p2 : Pointer): Pointer of object;

_T19 = function (p0 : Integer;
p1 : Integer): Pointer of object;

_T20 = procedure  of object;

_T21 = function (p0 : Pointer;
p1 : Pointer): Pointer of object;

_T22 = function (p0 : Pointer): Pointer of object;

_T24 = procedure (p0 : TCustomBucketList) of object;

_T25 = function (p0 : Pointer): Boolean of object;

_T26 = function (p0 : Pointer;
out p1 : Pointer): Boolean of object;

_T27 = function (p0 : Integer;
p1 : Integer): Integer of object;

_T28 = function (p0 : Integer): Integer of object;

_T29 = function (p0 : TObject;
p1 : TObject): TObject of object;

_T30 = function (p0 : TObject): TObject of object;

_T31 = _T20;

_T32 = function (p0 : TObject): Integer of object;

_T33 = _T30;

_T34 = _T32;

_T35 = _T32;

_T37 = procedure (p0 : Integer;
p1 : TObject) of object;

_T38 = function : TObject of object;

_T39 = _T38;

_T40 = _T30;

_T41 = _T38;

_T42 = _T38;

_T43 = _T30;

_T44 = _T38;

_T45 = _T38;

_T46 = procedure (p0 : Pointer) of object;

_T47 = function : Pointer of object;

_T48 = _T47;

_T49 = _T20;

_T50 = function : Integer of object;

_T51 = function (p0 : Integer): Boolean of object;

_T52 = _T22;

_T53 = _T47;

_T54 = _T47;

function __TBucket__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TBucket__Wrapper.setCount(const val : Integer);
begin
TBucket(GetRecordPtr^).Count := val;
end;
function __TBucket__Wrapper.getCount : Integer;
begin
result := TBucket(GetRecordPtr^).Count;
end;
function __TBucketItem__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function _TBucket_ : IDispatch;
begin
  result := __TBucket__Wrapper.Create;
end;
function _TBucketItem_ : IDispatch;
begin
  result := __TBucketItem__Wrapper.Create;
end;

type __TBucket__Wrapper__ = class(__TBucket__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TBucket__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTBucketToVariant(var R : TBucket) : OleVariant;
var
__rw : __TBucket__Wrapper__;
begin
__rw := __TBucket__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTBucket(const V : OleVariant) : TBucket;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TBucket((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TBucketItem__Wrapper__ = class(__TBucketItem__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TBucketItem__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTBucketItemToVariant(var R : TBucketItem) : OleVariant;
var
__rw : __TBucketItem__Wrapper__;
begin
__rw := __TBucketItem__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTBucketItem(const V : OleVariant) : TBucketItem;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TBucketItem((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTComponentList__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TComponentList(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __DC__SetTComponentList__Items(Instance : TObject; Params : PVariantArgList);
begin
TComponentList(Instance).Items[OleVariant(Params^[1])]:=TComponent(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomBucketList__Data(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TCustomBucketList(Instance).Data[VarToPointer(OleVariant(Params^[0]))]);
end;

procedure __DC__SetTCustomBucketList__Data(Instance : TObject; Params : PVariantArgList);
begin
TCustomBucketList(Instance).Data[VarToPointer(OleVariant(Params^[1]))]:=VarToPointer(OleVariant(Params^[0]));
end;

function __DC__GetTIntegerBucketList__Data(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIntegerBucketList(Instance).Data[OleVariant(Params^[0])];
end;

procedure __DC__SetTIntegerBucketList__Data(Instance : TObject; Params : PVariantArgList);
begin
TIntegerBucketList(Instance).Data[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTObjectBucketList__Data(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TObjectBucketList(Instance).Data[TObject(VarToObject(OleVariant(Params^[0])))]);
end;

procedure __DC__SetTObjectBucketList__Data(Instance : TObject; Params : PVariantArgList);
begin
TObjectBucketList(Instance).Data[TObject(VarToObject(OleVariant(Params^[1])))]:=TObject(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTObjectList__OwnsObjects(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TObjectList(Instance).OwnsObjects;
end;

procedure __DC__SetTObjectList__OwnsObjects(Instance : TObject; Params : PVariantArgList);
begin
TObjectList(Instance).OwnsObjects:=OleVariant(Params^[0]);
end;

function __DC__GetTObjectList__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TObjectList(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __DC__SetTObjectList__Items(Instance : TObject; Params : PVariantArgList);
begin
TObjectList(Instance).Items[OleVariant(Params^[1])]:=TObject(VarToObject(OleVariant(Params^[0])));
end;

procedure __RegisterProps;
begin
RegisterIndexedProperty(TComponentList,'Items',1,True,__DC__GetTComponentList__Items,__DC__SetTComponentList__Items);
RegisterIndexedProperty(TCustomBucketList,'Data',1,True,__DC__GetTCustomBucketList__Data,__DC__SetTCustomBucketList__Data);
RegisterIndexedProperty(TIntegerBucketList,'Data',1,True,__DC__GetTIntegerBucketList__Data,__DC__SetTIntegerBucketList__Data);
RegisterIndexedProperty(TObjectBucketList,'Data',1,True,__DC__GetTObjectBucketList__Data,__DC__SetTObjectBucketList__Data);
RegisterProperty(TObjectList,'OwnsObjects',__DC__GetTObjectList__OwnsObjects,__DC__SetTObjectList__OwnsObjects);
RegisterIndexedProperty(TObjectList,'Items',1,True,__DC__GetTObjectList__Items,__DC__SetTObjectList__Items);
end;

const __ConstNames0 : array[0..7] of string = (
'bl2'
,'bl4'
,'bl8'
,'bl16'
,'bl32'
,'bl64'
,'bl128'
,'bl256'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,bl2));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,bl4));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,bl8));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,bl16));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,bl32));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,bl64));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,bl128));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,bl256));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..11] of TClass = (
TBucketList,
TClassList,
TComponentList,
TCustomBucketList,
TIntegerBucketList,
TObjectBucketList,
TObjectList,
TObjectQueue,
TObjectStack,
TOrderedList,
TQueue,
TStack
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..2] of string = (
'TBucket'
,'TBucketItem'
,'RaiseListError'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TBucket_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_TBucketItem_)));
RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T0),[
TypeInfo(string),
TypeInfoArrayOfConst],Addr(RaiseListError),cRegister);

RegisterProc(TBucketList,'Create',mtConstructor,TypeInfo(_T1),[
TypeInfo(TBucketListSizes)],Addr(TBucketList.Create),cRegister);

RegRegisterMethod(TComponentList,'Add',TypeInfo(_T9),[
TypeInfo(TComponent),TypeInfo(Integer)],Addr(TComponentList.Add));

RegRegisterMethod(TComponentList,'Extract',TypeInfo(_T10),[
TypeInfo(TComponent),TypeInfo(TComponent)],Addr(TComponentList.Extract));

RegRegisterMethod(TComponentList,'Remove',TypeInfo(_T11),[
TypeInfo(TComponent),TypeInfo(Integer)],Addr(TComponentList.Remove));

RegRegisterMethod(TComponentList,'IndexOf',TypeInfo(_T12),[
TypeInfo(TComponent),TypeInfo(Integer)],Addr(TComponentList.IndexOf));

RegRegisterMethod(TComponentList,'First',TypeInfo(_T13),[TypeInfo(TComponent)],Addr(TComponentList.First));

RegRegisterMethod(TComponentList,'Last',TypeInfo(_T14),[TypeInfo(TComponent)],Addr(TComponentList.Last));

RegRegisterMethod(TComponentList,'Insert',TypeInfo(_T15),[
TypeInfo(Integer),
TypeInfo(TComponent)],Addr(TComponentList.Insert));

//RegRegisterMethod(TCustomBucketList,'BucketFor',TypeInfo(_T16),[TypeInfoPointer,TypeInfo(Integer)], pointer(0));
RegRegisterMethod(TCustomBucketList,'BucketFor',TypeInfo(_T16),[TypeInfoPointer,TypeInfo(Integer)],  getVMTProcAddr('TCustomBucketList','BucketFor',0));


//RegRegisterMethod(TCustomBucketList,'FindItem',TypeInfo(_T17),[TypeInfoPointer,TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Boolean)], pointer(4));
RegRegisterMethod(TCustomBucketList,'FindItem',TypeInfo(_T17),[TypeInfoPointer,TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Boolean)],  getVMTProcAddr('TCustomBucketList','FindItem',4));


//RegRegisterMethod(TCustomBucketList,'AddItem',TypeInfo(_T18),[TypeInfo(Integer),TypeInfoPointer,TypeInfoPointer,TypeInfoPointer], pointer(8));
RegRegisterMethod(TCustomBucketList,'AddItem',TypeInfo(_T18),[TypeInfo(Integer),TypeInfoPointer,TypeInfoPointer,TypeInfoPointer],  getVMTProcAddr('TCustomBucketList','AddItem',8));


//RegRegisterMethod(TCustomBucketList,'DeleteItem',TypeInfo(_T19),[TypeInfo(Integer),TypeInfo(Integer),TypeInfoPointer], pointer(12));
RegRegisterMethod(TCustomBucketList,'DeleteItem',TypeInfo(_T19),[TypeInfo(Integer),TypeInfo(Integer),TypeInfoPointer],  getVMTProcAddr('TCustomBucketList','DeleteItem',12));


RegRegisterMethod(TCustomBucketList,'Clear',TypeInfo(_T20),NoParams,Addr(TCustomBucketList.Clear));

RegRegisterMethod(TCustomBucketList,'Add',TypeInfo(_T21),[
TypeInfoPointer,
TypeInfoPointer,TypeInfoPointer],Addr(TCustomBucketList.Add));

RegRegisterMethod(TCustomBucketList,'Remove',TypeInfo(_T22),[
TypeInfoPointer,TypeInfoPointer],Addr(TCustomBucketList.Remove));

RegRegisterMethod(TCustomBucketList,'Assign',TypeInfo(_T24),[
TypeInfo(TCustomBucketList)],Addr(TCustomBucketList.Assign));

RegRegisterMethod(TCustomBucketList,'Exists',TypeInfo(_T25),[
TypeInfoPointer,TypeInfo(Boolean)],Addr(TCustomBucketList.Exists));

RegRegisterMethod(TCustomBucketList,'Find',TypeInfo(_T26),[
TypeInfoPointer,
TypeInfoPointer,TypeInfo(Boolean)],Addr(TCustomBucketList.Find));

RegRegisterMethod(TIntegerBucketList,'Add',TypeInfo(_T27),[
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Integer)],Addr(TIntegerBucketList.Add));

RegRegisterMethod(TIntegerBucketList,'Remove',TypeInfo(_T28),[
TypeInfo(Integer),TypeInfo(Integer)],Addr(TIntegerBucketList.Remove));

RegRegisterMethod(TObjectBucketList,'Add',TypeInfo(_T29),[
TypeInfo(TObject),
TypeInfo(TObject),TypeInfo(TObject)],Addr(TObjectBucketList.Add));

RegRegisterMethod(TObjectBucketList,'Remove',TypeInfo(_T30),[
TypeInfo(TObject),TypeInfo(TObject)],Addr(TObjectBucketList.Remove));

RegisterProc(TObjectList,'Create',mtConstructor,TypeInfo(_T31),NoParams,Addr(TObjectList.Create),cRegister);

RegRegisterMethod(TObjectList,'Add',TypeInfo(_T32),[
TypeInfo(TObject),TypeInfo(Integer)],Addr(TObjectList.Add));

RegRegisterMethod(TObjectList,'Extract',TypeInfo(_T33),[
TypeInfo(TObject),TypeInfo(TObject)],Addr(TObjectList.Extract));

RegRegisterMethod(TObjectList,'Remove',TypeInfo(_T34),[
TypeInfo(TObject),TypeInfo(Integer)],Addr(TObjectList.Remove));

RegRegisterMethod(TObjectList,'IndexOf',TypeInfo(_T35),[
TypeInfo(TObject),TypeInfo(Integer)],Addr(TObjectList.IndexOf));

RegRegisterMethod(TObjectList,'Insert',TypeInfo(_T37),[
TypeInfo(Integer),
TypeInfo(TObject)],Addr(TObjectList.Insert));

RegRegisterMethod(TObjectList,'First',TypeInfo(_T38),[TypeInfo(TObject)],Addr(TObjectList.First));

RegRegisterMethod(TObjectList,'Last',TypeInfo(_T39),[TypeInfo(TObject)],Addr(TObjectList.Last));

RegRegisterMethod(TObjectQueue,'Push',TypeInfo(_T40),[
TypeInfo(TObject),TypeInfo(TObject)],Addr(TObjectQueue.Push));

RegRegisterMethod(TObjectQueue,'Pop',TypeInfo(_T41),[TypeInfo(TObject)],Addr(TObjectQueue.Pop));

RegRegisterMethod(TObjectQueue,'Peek',TypeInfo(_T42),[TypeInfo(TObject)],Addr(TObjectQueue.Peek));

RegRegisterMethod(TObjectStack,'Push',TypeInfo(_T43),[
TypeInfo(TObject),TypeInfo(TObject)],Addr(TObjectStack.Push));

RegRegisterMethod(TObjectStack,'Pop',TypeInfo(_T44),[TypeInfo(TObject)],Addr(TObjectStack.Pop));

RegRegisterMethod(TObjectStack,'Peek',TypeInfo(_T45),[TypeInfo(TObject)],Addr(TObjectStack.Peek));

//RegRegisterMethod(TOrderedList,'PushItem',TypeInfo(_T46),[TypeInfoPointer], pointer(0));
RegRegisterMethod(TOrderedList,'PushItem',TypeInfo(_T46),[TypeInfoPointer],  getVMTProcAddr('TOrderedList','PushItem',0));


//RegRegisterMethod(TOrderedList,'PopItem',TypeInfo(_T47),[TypeInfoPointer], pointer(4));
RegRegisterMethod(TOrderedList,'PopItem',TypeInfo(_T47),[TypeInfoPointer],  getVMTProcAddr('TOrderedList','PopItem',4));


//RegRegisterMethod(TOrderedList,'PeekItem',TypeInfo(_T48),[TypeInfoPointer], pointer(8));
RegRegisterMethod(TOrderedList,'PeekItem',TypeInfo(_T48),[TypeInfoPointer],  getVMTProcAddr('TOrderedList','PeekItem',8));


RegisterProc(TOrderedList,'Create',mtConstructor,TypeInfo(_T49),NoParams,Addr(TOrderedList.Create),cRegister);

RegRegisterMethod(TOrderedList,'Count',TypeInfo(_T50),[TypeInfo(Integer)],Addr(TOrderedList.Count));

RegRegisterMethod(TOrderedList,'AtLeast',TypeInfo(_T51),[
TypeInfo(Integer),TypeInfo(Boolean)],Addr(TOrderedList.AtLeast));

RegRegisterMethod(TOrderedList,'Push',TypeInfo(_T52),[
TypeInfoPointer,TypeInfoPointer],Addr(TOrderedList.Push));

RegRegisterMethod(TOrderedList,'Pop',TypeInfo(_T53),[TypeInfoPointer],Addr(TOrderedList.Pop));

RegRegisterMethod(TOrderedList,'Peek',TypeInfo(_T54),[TypeInfoPointer],Addr(TOrderedList.Peek));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegRegisterMethod(TClassList,'Add',TypeInfo(_T2),[
TypeInfo(TClass),TypeInfo(Integer)],Addr(TClassList.Add))}

{RegRegisterMethod(TClassList,'Extract',TypeInfo(_T3),[
TypeInfo(TClass),TypeInfo(TClass)],Addr(TClassList.Extract))}

{RegRegisterMethod(TClassList,'Remove',TypeInfo(_T4),[
TypeInfo(TClass),TypeInfo(Integer)],Addr(TClassList.Remove))}

{RegRegisterMethod(TClassList,'IndexOf',TypeInfo(_T5),[
TypeInfo(TClass),TypeInfo(Integer)],Addr(TClassList.IndexOf))}

{RegRegisterMethod(TClassList,'First',TypeInfo(_T6),[TypeInfo(TClass)],Addr(TClassList.First))}

{RegRegisterMethod(TClassList,'Last',TypeInfo(_T7),[TypeInfo(TClass)],Addr(TClassList.Last))}

{RegRegisterMethod(TClassList,'Insert',TypeInfo(_T8),[
TypeInfo(Integer),
TypeInfo(TClass)],Addr(TClassList.Insert))}

RegisterEvent(TypeInfo(TBucketEvent),[
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(Boolean)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
