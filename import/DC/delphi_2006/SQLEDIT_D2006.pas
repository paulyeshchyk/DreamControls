{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit SQLEDIT_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Messages,
  ActiveX,
  SysUtils,
  Forms,
  Classes,
  Controls,
  Graphics,
  StdCtrls,
  ExtCtrls,
  ActnList,
  SqlEdit;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T2 = function (p0 : string): Boolean of object;

{_T3 = procedure (p0 : TExecuteEvent) of object;}

_T4 = procedure (p0 : TObject) of object;

_T5 = _T4;

_T6 = procedure (p0 : TObject;
var p1 : Integer;
var p2 : Boolean) of object;

_T7 = _T6;

_T8 = _T4;

_T9 = _T4;

_T10 = _T4;

_T11 = _T4;

_T12 = _T4;

_T13 = _T4;

_T14 = _T4;

_T15 = _T4;

_T16 = function : Boolean of object;

_T17 = function : TWinControl of object;

procedure __RegisterProps;
begin
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..1] of TClass = (
TPopulateThread,
TSQLEditForm
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'DefaultReqQuoteChar'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T2),[
TypeInfo(string),TypeInfo(Boolean)],Addr(DefaultReqQuoteChar),cRegister);

RegRegisterMethod(TSQLEditForm,'FormShow',TypeInfo(_T4),[
TypeInfo(TObject)],Addr(TSQLEditForm.FormShow));

RegRegisterMethod(TSQLEditForm,'HelpButtonClick',TypeInfo(_T5),[
TypeInfo(TObject)],Addr(TSQLEditForm.HelpButtonClick));

RegRegisterMethod(TSQLEditForm,'TableFieldsSplitterCanResize',TypeInfo(_T6),[
TypeInfo(TObject),
TypeInfo(Integer),
TypeInfo(Boolean)],Addr(TSQLEditForm.TableFieldsSplitterCanResize));

RegRegisterMethod(TSQLEditForm,'MetaInfoSQLSplitterCanResize',TypeInfo(_T7),[
TypeInfo(TObject),
TypeInfo(Integer),
TypeInfo(Boolean)],Addr(TSQLEditForm.MetaInfoSQLSplitterCanResize));

RegRegisterMethod(TSQLEditForm,'MetaInfoSQLSplitterMoved',TypeInfo(_T8),[
TypeInfo(TObject)],Addr(TSQLEditForm.MetaInfoSQLSplitterMoved));

RegRegisterMethod(TSQLEditForm,'TableListClick',TypeInfo(_T9),[
TypeInfo(TObject)],Addr(TSQLEditForm.TableListClick));

RegRegisterMethod(TSQLEditForm,'AddTableButtonClick',TypeInfo(_T10),[
TypeInfo(TObject)],Addr(TSQLEditForm.AddTableButtonClick));

RegRegisterMethod(TSQLEditForm,'AddFieldButtonClick',TypeInfo(_T11),[
TypeInfo(TObject)],Addr(TSQLEditForm.AddFieldButtonClick));

RegRegisterMethod(TSQLEditForm,'SQLMemoExit',TypeInfo(_T12),[
TypeInfo(TObject)],Addr(TSQLEditForm.SQLMemoExit));

RegRegisterMethod(TSQLEditForm,'FormDestroy',TypeInfo(_T13),[
TypeInfo(TObject)],Addr(TSQLEditForm.FormDestroy));

RegRegisterMethod(TSQLEditForm,'SQLMemoEnter',TypeInfo(_T14),[
TypeInfo(TObject)],Addr(TSQLEditForm.SQLMemoEnter));

RegRegisterMethod(TSQLEditForm,'FormUpdateActionUpdate',TypeInfo(_T15),[
TypeInfo(TObject)],Addr(TSQLEditForm.FormUpdateActionUpdate));

//RegRegisterMethod(TSQLEditForm,'TerminatePopulateThread',TypeInfo(_T16),[TypeInfo(Boolean)], pointer(260));
RegRegisterMethod(TSQLEditForm,'TerminatePopulateThread',TypeInfo(_T16),[TypeInfo(Boolean)],  getVMTProcAddr('TSQLEditForm','TerminatePopulateThread',260));


//RegRegisterMethod(TSQLEditForm,'GetSQLMemoControl',TypeInfo(_T17),[TypeInfo(TWinControl)], pointer(264));
RegRegisterMethod(TSQLEditForm,'GetSQLMemoControl',TypeInfo(_T17),[TypeInfo(TWinControl)],  getVMTProcAddr('TSQLEditForm','GetSQLMemoControl',264));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(TPopulateThread,'Create',mtConstructor,TypeInfo(_T3),[
TypeInfo(TExecuteEvent)],Addr(TPopulateThread.Create),cRegister)}

RegisterEvent(TypeInfo(TExecuteEvent),NoParams);

RegisterEvent(TypeInfo(TGetFieldNamesForSchemaProc),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(TStrings)]);

RegisterEvent(TypeInfo(TGetFieldNamesProc),[
TypeInfo(string),
TypeInfo(TStrings)]);

RegisterEvent(TypeInfo(TGetTableNamesForSchemaProc),[
TypeInfo(TStrings),
TypeInfo(string),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TGetTableNamesProc),[
TypeInfo(TStrings),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TRequiresQuoteCharProc),[
TypeInfo(string),TypeInfo(Boolean)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
