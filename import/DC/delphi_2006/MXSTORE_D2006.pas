{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit MXSTORE_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Variants,
  Messages,
  SysUtils,
  Classes,
  Graphics,
  Controls,
  Forms,
  Dialogs,
  BDE,
  DB,
  DBCommon,
  DBTables,
  Mxarrays,
  Menus,
  MXPBAR,
  MXCOMMON,
  MXTABLES,
  Mxstore;
function ConvertTIndexInfoRecToVariant(var R : TIndexInfoRec) : OleVariant;
function ConvertVariantToTIndexInfoRec(const V : OleVariant) : TIndexInfoRec;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TIndexInfoRec__Wrapper = class(TDCRecordWrapper)
private
fR : TIndexInfoRec;
public
function GetRecordPtr : pointer; override;
published
procedure setSparseCnt(const val : Integer);
function getSparseCnt : Integer;
property SparseCnt : Integer read getSparseCnt write setSparseCnt;
procedure setSubTotalCnt(const val : Integer);
function getSubTotalCnt : Integer;
property SubTotalCnt : Integer read getSubTotalCnt write setSubTotalCnt;
procedure setAggOffset(const val : Integer);
function getAggOffset : Integer;
property AggOffset : Integer read getAggOffset write setAggOffset;
end;
type
_T0 = function (p0 : TSmallIntArray): Boolean of object;

_T1 = procedure (p0 : Cardinal;
p1 : TFieldType) of object;

_T2 = function : Integer of object;

_T3 = function (p0 : Variant): Variant of object;

_T4 = procedure (p0 : Integer) of object;

_T5 = procedure (p0 : Variant) of object;

_T6 = _T5;

_T7 = function (p0 : Variant): Boolean of object;

_T8 = procedure (var p0 : Variant) of object;

_T9 = _T3;

_T10 = function : Boolean of object;

{_T11 = procedure (p0 : TPersistent;
p1 : TCubeDimClass) of object;}

_T12 = procedure  of object;

_T13 = _T12;

_T14 = _T12;

_T15 = _T12;

_T16 = _T12;

_T17 = _T12;

_T18 = procedure (p0 : TCubeDims) of object;

_T19 = _T12;

_T20 = function (p0 : Integer): Boolean of object;

_T21 = _T20;

_T22 = _T12;

_T23 = procedure (p0 : TCubeDims;
p1 : Boolean) of object;

_T24 = _T2;

_T25 = function (p0 : Integer): string of object;

_T26 = function (p0 : Integer): Integer of object;

_T27 = function (p0 : Integer;
p1 : Integer): string of object;

_T28 = function (p0 : Integer;
p1 : Integer): Variant of object;

_T29 = _T25;

_T30 = function (p0 : TSmallIntArray): string of object;

_T31 = function (p0 : TSmallIntArray): Variant of object;

_T32 = _T12;

_T33 = _T2;

_T34 = _T12;

_T35 = _T12;

_T36 = function (p0 : TSmallIntArray;
p1 : TList): Integer of object;

_T37 = function (p0 : TSmallIntArray;
p1 : Boolean): Integer of object;

_T38 = _T20;

_T39 = _T20;

_T40 = function (p0 : Integer): TSummary of object;

_T41 = function (p0 : string): TSummary of object;

_T42 = _T40;

_T43 = function (p0 : string): TDimension of object;

_T44 = function (p0 : TDimension): Integer of object;

_T45 = function (p0 : TSummary): Integer of object;

_T46 = _T25;

_T47 = _T25;

_T48 = _T27;

_T49 = _T28;

_T50 = _T26;

_T51 = _T2;

_T52 = function (p0 : TSummary;
p1 : TSmallIntArray;
p2 : TSmallIntArray;
var p3 : Boolean): Boolean of object;

_T53 = _T0;

_T54 = function (p0 : TSummary;
p1 : TSmallIntArray): Boolean of object;

_T55 = _T30;

_T56 = _T31;

_T57 = procedure (const p0 : string) of object;

_T58 = function (p0 : TIntArray;
p1 : Integer;
p2 : Boolean;
p3 : TTwoDimArray): Integer of object;

_T59 = _T1;

_T60 = _T10;

_T61 = procedure (p0 : TDimFlags) of object;

_T62 = function (p0 : TDimFlags): Boolean of object;

_T63 = _T61;

_T64 = procedure (p0 : Boolean) of object;

_T65 = procedure (p0 : TDimension;
p1 : Boolean) of object;

_T66 = _T12;

_T67 = function (p0 : Variant): string of object;

_T68 = procedure (p0 : TFieldType) of object;

_T69 = procedure (p0 : string) of object;

_T70 = _T12;

_T71 = _T4;

_T72 = _T2;

{_T73 = function (p0 : PIndexInfoRec): Integer of object;}

_T74 = _T20;

_T75 = _T20;

_T76 = procedure (p0 : Integer;
p1 : Integer) of object;

_T77 = function : TIntArray of object;

_T78 = _T12;

_T79 = procedure (p0 : TCustomDataStore) of object;

_T80 = _T1;

_T81 = _T12;

_T82 = _T20;

_T83 = procedure (p0 : Integer;
p1 : Variant) of object;

_T84 = function (p0 : Boolean;
p1 : Boolean;
p2 : Integer): Integer of object;

_T85 = function (p0 : Variant): Integer of object;

_T86 = procedure (var p0 : TSmallIntArray;
p1 : Variant) of object;

function __TIndexInfoRec__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIndexInfoRec__Wrapper.setSparseCnt(const val : Integer);
begin
TIndexInfoRec(GetRecordPtr^).SparseCnt := val;
end;
function __TIndexInfoRec__Wrapper.getSparseCnt : Integer;
begin
result := TIndexInfoRec(GetRecordPtr^).SparseCnt;
end;
procedure __TIndexInfoRec__Wrapper.setSubTotalCnt(const val : Integer);
begin
TIndexInfoRec(GetRecordPtr^).SubTotalCnt := val;
end;
function __TIndexInfoRec__Wrapper.getSubTotalCnt : Integer;
begin
result := TIndexInfoRec(GetRecordPtr^).SubTotalCnt;
end;
procedure __TIndexInfoRec__Wrapper.setAggOffset(const val : Integer);
begin
TIndexInfoRec(GetRecordPtr^).AggOffset := val;
end;
function __TIndexInfoRec__Wrapper.getAggOffset : Integer;
begin
result := TIndexInfoRec(GetRecordPtr^).AggOffset;
end;
function _TIndexInfoRec_ : IDispatch;
begin
  result := __TIndexInfoRec__Wrapper.Create;
end;

type __TIndexInfoRec__Wrapper__ = class(__TIndexInfoRec__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIndexInfoRec__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIndexInfoRecToVariant(var R : TIndexInfoRec) : OleVariant;
var
__rw : __TIndexInfoRec__Wrapper__;
begin
__rw := __TIndexInfoRec__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIndexInfoRec(const V : OleVariant) : TIndexInfoRec;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIndexInfoRec((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTBuilderDim__GroupBreak(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBuilderDim(Instance).GroupBreak;
end;

procedure __DC__SetTBuilderDim__GroupBreak(Instance : TObject; Params : PVariantArgList);
begin
TBuilderDim(Instance).GroupBreak:=OleVariant(Params^[0]);
end;

function __DC__GetTBuilderDim__LastVal(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBuilderDim(Instance).LastVal;
end;

procedure __DC__SetTBuilderDim__LastVal(Instance : TObject; Params : PVariantArgList);
begin
TBuilderDim(Instance).LastVal:=OleVariant(Params^[0]);
end;

function __DC__GetTBuilderDim__SumCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBuilderDim(Instance).SumCount;
end;

function __DC__GetTCubeDim__BinFormat(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCubeDim(Instance).BinFormat;
end;

procedure __DC__SetTCubeDim__BinFormat(Instance : TObject; Params : PVariantArgList);
begin
TCubeDim(Instance).BinFormat:=OleVariant(Params^[0]);
end;

function __DC__GetTCubeDim__StartDate(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCubeDim(Instance).StartDate;
end;

procedure __DC__SetTCubeDim__StartDate(Instance : TObject; Params : PVariantArgList);
begin
TCubeDim(Instance).StartDate:=OleVariant(Params^[0]);
end;

function __DC__GetTCubeDim__Loaded(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCubeDim(Instance).Loaded;
end;

procedure __DC__SetTCubeDim__Loaded(Instance : TObject; Params : PVariantArgList);
begin
TCubeDim(Instance).Loaded:=OleVariant(Params^[0]);
end;

function __DC__GetTCubeDim__StartValue(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCubeDim(Instance).StartValue;
end;

procedure __DC__SetTCubeDim__StartValue(Instance : TObject; Params : PVariantArgList);
begin
TCubeDim(Instance).StartValue:=OleVariant(Params^[0]);
end;

function __DC__GetTCubeDim__BinData(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCubeDim(Instance).BinData);
end;

function __DC__GetTCubeDims__IsDirty(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCubeDims(Instance).IsDirty;
end;

function __DC__GetTCubeDims__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCubeDims(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __DC__SetTCubeDims__Items(Instance : TObject; Params : PVariantArgList);
begin
TCubeDims(Instance).Items[OleVariant(Params^[1])]:=TCubeDim(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomDataStore__DimensionMapCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomDataStore(Instance).DimensionMapCount;
end;

function __DC__GetTCustomDataStore__DimensionCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomDataStore(Instance).DimensionCount;
end;

function __DC__GetTCustomDataStore__SummaryCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomDataStore(Instance).SummaryCount;
end;

function __DC__GetTCustomDataStore__CurrentSummary(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomDataStore(Instance).CurrentSummary;
end;

procedure __DC__SetTCustomDataStore__CurrentSummary(Instance : TObject; Params : PVariantArgList);
begin
TCustomDataStore(Instance).CurrentSummary:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomDataStore__Capacity(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomDataStore(Instance).Capacity;
end;

procedure __DC__SetTCustomDataStore__Capacity(Instance : TObject; Params : PVariantArgList);
begin
TCustomDataStore(Instance).Capacity:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomDataStore__BinData(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomDataStore(Instance).BinData;
end;

procedure __DC__SetTCustomDataStore__BinData(Instance : TObject; Params : PVariantArgList);
begin
TCustomDataStore(Instance).BinData:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomDataStore__DataSet(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomDataStore(Instance).DataSet);
end;

procedure __DC__SetTCustomDataStore__DataSet(Instance : TObject; Params : PVariantArgList);
begin
TCustomDataStore(Instance).DataSet:=TDataSet(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomDataStore__DimensionMap(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomDataStore(Instance).DimensionMap);
end;

procedure __DC__SetTCustomDataStore__DimensionMap(Instance : TObject; Params : PVariantArgList);
begin
TCustomDataStore(Instance).DimensionMap:=TCubeDims(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomDataStore__ShowProgressDialog(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomDataStore(Instance).ShowProgressDialog;
end;

procedure __DC__SetTCustomDataStore__ShowProgressDialog(Instance : TObject; Params : PVariantArgList);
begin
TCustomDataStore(Instance).ShowProgressDialog:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomDataStore__MaxDimensions(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomDataStore(Instance).MaxDimensions;
end;

procedure __DC__SetTCustomDataStore__MaxDimensions(Instance : TObject; Params : PVariantArgList);
begin
TCustomDataStore(Instance).MaxDimensions:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomDataStore__MaxSummaries(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomDataStore(Instance).MaxSummaries;
end;

procedure __DC__SetTCustomDataStore__MaxSummaries(Instance : TObject; Params : PVariantArgList);
begin
TCustomDataStore(Instance).MaxSummaries:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomDataStore__MaxCells(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomDataStore(Instance).MaxCells;
end;

procedure __DC__SetTCustomDataStore__MaxCells(Instance : TObject; Params : PVariantArgList);
begin
TCustomDataStore(Instance).MaxCells:=OleVariant(Params^[0]);
end;

function __DC__GetTDataCache__PreCalculateTotals(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataCache(Instance).PreCalculateTotals;
end;

procedure __DC__SetTDataCache__PreCalculateTotals(Instance : TObject; Params : PVariantArgList);
begin
TDataCache(Instance).PreCalculateTotals:=OleVariant(Params^[0]);
end;

function __DC__GetTDataCache__CurrentSummary(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataCache(Instance).CurrentSummary;
end;

procedure __DC__SetTDataCache__CurrentSummary(Instance : TObject; Params : PVariantArgList);
begin
TDataCache(Instance).CurrentSummary:=OleVariant(Params^[0]);
end;

function __DC__GetTDataCache__DimensionCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataCache(Instance).DimensionCount;
end;

function __DC__GetTDataCache__SummaryCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataCache(Instance).SummaryCount;
end;

function __DC__GetTDataCache__Summaries(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDataCache(Instance).Summaries[OleVariant(Params^[0])]);
end;

function __DC__GetTDataCache__Dimensions(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDataCache(Instance).Dimensions[OleVariant(Params^[0])]);
end;

procedure __DC__SetTDataCache__Dimensions(Instance : TObject; Params : PVariantArgList);
begin
TDataCache(Instance).Dimensions[OleVariant(Params^[1])]:=TDimension(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDataCache__Active(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataCache(Instance).Active;
end;

procedure __DC__SetTDataCache__Active(Instance : TObject; Params : PVariantArgList);
begin
TDataCache(Instance).Active:=OleVariant(Params^[0]);
end;

function __DC__GetTDataCache__Sparsing(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataCache(Instance).Sparsing;
end;

procedure __DC__SetTDataCache__Sparsing(Instance : TObject; Params : PVariantArgList);
begin
TDataCache(Instance).Sparsing:=OleVariant(Params^[0]);
end;

function __DC__GetTDataCache__IndexCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataCache(Instance).IndexCount;
end;

function __DC__GetTDataCache__Success(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataCache(Instance).Success;
end;

procedure __DC__SetTDataCache__Success(Instance : TObject; Params : PVariantArgList);
begin
TDataCache(Instance).Success:=OleVariant(Params^[0]);
end;

function __DC__GetTDataCache__ErrorCode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataCache(Instance).ErrorCode;
end;

procedure __DC__SetTDataCache__ErrorCode(Instance : TObject; Params : PVariantArgList);
begin
TDataCache(Instance).ErrorCode:=OleVariant(Params^[0]);
end;

function __DC__GetTDataCache__HasIndex(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataCache(Instance).HasIndex;
end;

procedure __DC__SetTDataCache__HasIndex(Instance : TObject; Params : PVariantArgList);
begin
TDataCache(Instance).HasIndex:=OleVariant(Params^[0]);
end;

function __DC__GetTDimension__Range(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDimension(Instance).Range;
end;

procedure __DC__SetTDimension__Range(Instance : TObject; Params : PVariantArgList);
begin
TDimension(Instance).Range:=OleVariant(Params^[0]);
end;

procedure __DC__SetTDimension__Attributes(Instance : TObject; Params : PVariantArgList);
begin
TDimension(Instance).Attributes:=OleVariant(Params^[0]);
end;

function __DC__GetTDimension__DimensionName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDimension(Instance).DimensionName;
end;

procedure __DC__SetTDimension__DimensionName(Instance : TObject; Params : PVariantArgList);
begin
TDimension(Instance).DimensionName:=OleVariant(Params^[0]);
end;

function __DC__GetTDimension__FieldType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDimension(Instance).FieldType;
end;

procedure __DC__SetTDimension__FieldType(Instance : TObject; Params : PVariantArgList);
begin
TDimension(Instance).FieldType:=OleVariant(Params^[0]);
end;

function __DC__GetTDimension__Position(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDimension(Instance).Position;
end;

procedure __DC__SetTDimension__Position(Instance : TObject; Params : PVariantArgList);
begin
TDimension(Instance).Position:=OleVariant(Params^[0]);
end;

function __DC__GetTDimension__FieldDefinition(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDimension(Instance).FieldDefinition);
end;

function __DC__GetTDimension__FieldName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDimension(Instance).FieldName;
end;

procedure __DC__SetTDimension__FieldName(Instance : TObject; Params : PVariantArgList);
begin
TDimension(Instance).FieldName:=OleVariant(Params^[0]);
end;

function __DC__GetTFieldDefinition__Width(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFieldDefinition(Instance).Width;
end;

procedure __DC__SetTFieldDefinition__Width(Instance : TObject; Params : PVariantArgList);
begin
TFieldDefinition(Instance).Width:=OleVariant(Params^[0]);
end;

function __DC__GetTFieldDefinition__FormatString(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFieldDefinition(Instance).FormatString;
end;

procedure __DC__SetTFieldDefinition__FormatString(Instance : TObject; Params : PVariantArgList);
begin
TFieldDefinition(Instance).FormatString:=OleVariant(Params^[0]);
end;

function __DC__GetTFieldDefinition__FieldType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFieldDefinition(Instance).FieldType;
end;

procedure __DC__SetTFieldDefinition__FieldType(Instance : TObject; Params : PVariantArgList);
begin
TFieldDefinition(Instance).FieldType:=OleVariant(Params^[0]);
end;

function __DC__GetTFieldDefinition__Precision(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFieldDefinition(Instance).Precision;
end;

procedure __DC__SetTFieldDefinition__Precision(Instance : TObject; Params : PVariantArgList);
begin
TFieldDefinition(Instance).Precision:=OleVariant(Params^[0]);
end;

function __DC__GetTFieldDefinition__DisplayName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFieldDefinition(Instance).DisplayName;
end;

procedure __DC__SetTFieldDefinition__DisplayName(Instance : TObject; Params : PVariantArgList);
begin
TFieldDefinition(Instance).DisplayName:=OleVariant(Params^[0]);
end;

function __DC__GetTFieldDefinition__FieldNo(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFieldDefinition(Instance).FieldNo;
end;

procedure __DC__SetTFieldDefinition__FieldNo(Instance : TObject; Params : PVariantArgList);
begin
TFieldDefinition(Instance).FieldNo:=OleVariant(Params^[0]);
end;

function __DC__GetTIndexInfo__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIndexInfo(Instance).Count;
end;

function __DC__GetTIndexInfo__Capacity(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIndexInfo(Instance).Capacity;
end;

procedure __DC__SetTIndexInfo__Capacity(Instance : TObject; Params : PVariantArgList);
begin
TIndexInfo(Instance).Capacity:=OleVariant(Params^[0]);
end;

function __DC__GetTIndexInfo__AddAggs(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIndexInfo(Instance).AddAggs;
end;

procedure __DC__SetTIndexInfo__AddAggs(Instance : TObject; Params : PVariantArgList);
begin
TIndexInfo(Instance).AddAggs:=OleVariant(Params^[0]);
end;

function __DC__GetTSummary__Name(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSummary(Instance).Name;
end;

procedure __DC__SetTSummary__Name(Instance : TObject; Params : PVariantArgList);
begin
TSummary(Instance).Name:=OleVariant(Params^[0]);
end;

procedure __DC__SetTSummary__Attributes(Instance : TObject; Params : PVariantArgList);
begin
TSummary(Instance).Attributes:=OleVariant(Params^[0]);
end;

function __DC__GetTSummary__FieldType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSummary(Instance).FieldType;
end;

procedure __DC__SetTSummary__FieldType(Instance : TObject; Params : PVariantArgList);
begin
TSummary(Instance).FieldType:=OleVariant(Params^[0]);
end;

function __DC__GetTSummary__Position(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSummary(Instance).Position;
end;

procedure __DC__SetTSummary__Position(Instance : TObject; Params : PVariantArgList);
begin
TSummary(Instance).Position:=OleVariant(Params^[0]);
end;

function __DC__GetTSummary__FieldDefinition(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TSummary(Instance).FieldDefinition);
end;

function __DC__GetTSummary__FieldName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSummary(Instance).FieldName;
end;

procedure __DC__SetTSummary__FieldName(Instance : TObject; Params : PVariantArgList);
begin
TSummary(Instance).FieldName:=OleVariant(Params^[0]);
end;

function __DC__GetTSummary__CubeDimIndex(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSummary(Instance).CubeDimIndex;
end;

procedure __DC__SetTSummary__CubeDimIndex(Instance : TObject; Params : PVariantArgList);
begin
TSummary(Instance).CubeDimIndex:=OleVariant(Params^[0]);
end;

function __DC__GetTSummary__AggDefinition(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TSummary(Instance).AggDefinition);
end;

procedure __DC__SetTSummary__AggDefinition(Instance : TObject; Params : PVariantArgList);
begin
TSummary(Instance).AggDefinition:=TAggDefinition(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTSummary__IsDerived(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSummary(Instance).IsDerived;
end;

procedure __RegisterProps;
begin
RegisterProperty(TBuilderDim,'GroupBreak',__DC__GetTBuilderDim__GroupBreak,__DC__SetTBuilderDim__GroupBreak);
RegisterProperty(TBuilderDim,'LastVal',__DC__GetTBuilderDim__LastVal,__DC__SetTBuilderDim__LastVal);
RegisterProperty(TBuilderDim,'SumCount',__DC__GetTBuilderDim__SumCount,nil);
RegisterProperty(TCubeDim,'BinFormat',__DC__GetTCubeDim__BinFormat,__DC__SetTCubeDim__BinFormat);
RegisterProperty(TCubeDim,'StartDate',__DC__GetTCubeDim__StartDate,__DC__SetTCubeDim__StartDate);
RegisterProperty(TCubeDim,'Loaded',__DC__GetTCubeDim__Loaded,__DC__SetTCubeDim__Loaded);
RegisterProperty(TCubeDim,'StartValue',__DC__GetTCubeDim__StartValue,__DC__SetTCubeDim__StartValue);
RegisterProperty(TCubeDim,'BinData',__DC__GetTCubeDim__BinData,nil);
RegisterProperty(TCubeDims,'IsDirty',__DC__GetTCubeDims__IsDirty,nil);
RegisterIndexedProperty(TCubeDims,'Items',1,True,__DC__GetTCubeDims__Items,__DC__SetTCubeDims__Items);
RegisterProperty(TCustomDataStore,'DimensionMapCount',__DC__GetTCustomDataStore__DimensionMapCount,nil);
RegisterProperty(TCustomDataStore,'DimensionCount',__DC__GetTCustomDataStore__DimensionCount,nil);
RegisterProperty(TCustomDataStore,'SummaryCount',__DC__GetTCustomDataStore__SummaryCount,nil);
RegisterProperty(TCustomDataStore,'CurrentSummary',__DC__GetTCustomDataStore__CurrentSummary,__DC__SetTCustomDataStore__CurrentSummary);
RegisterProperty(TCustomDataStore,'Capacity',__DC__GetTCustomDataStore__Capacity,__DC__SetTCustomDataStore__Capacity);
RegisterProperty(TCustomDataStore,'BinData',__DC__GetTCustomDataStore__BinData,__DC__SetTCustomDataStore__BinData);
RegisterProperty(TCustomDataStore,'DataSet',__DC__GetTCustomDataStore__DataSet,__DC__SetTCustomDataStore__DataSet);
RegisterProperty(TCustomDataStore,'DimensionMap',__DC__GetTCustomDataStore__DimensionMap,__DC__SetTCustomDataStore__DimensionMap);
RegisterProperty(TCustomDataStore,'ShowProgressDialog',__DC__GetTCustomDataStore__ShowProgressDialog,__DC__SetTCustomDataStore__ShowProgressDialog);
RegisterProperty(TCustomDataStore,'MaxDimensions',__DC__GetTCustomDataStore__MaxDimensions,__DC__SetTCustomDataStore__MaxDimensions);
RegisterProperty(TCustomDataStore,'MaxSummaries',__DC__GetTCustomDataStore__MaxSummaries,__DC__SetTCustomDataStore__MaxSummaries);
RegisterProperty(TCustomDataStore,'MaxCells',__DC__GetTCustomDataStore__MaxCells,__DC__SetTCustomDataStore__MaxCells);
RegisterProperty(TDataCache,'PreCalculateTotals',__DC__GetTDataCache__PreCalculateTotals,__DC__SetTDataCache__PreCalculateTotals);
RegisterProperty(TDataCache,'CurrentSummary',__DC__GetTDataCache__CurrentSummary,__DC__SetTDataCache__CurrentSummary);
RegisterProperty(TDataCache,'DimensionCount',__DC__GetTDataCache__DimensionCount,nil);
RegisterProperty(TDataCache,'SummaryCount',__DC__GetTDataCache__SummaryCount,nil);
RegisterIndexedProperty(TDataCache,'Summaries',1,False,__DC__GetTDataCache__Summaries,nil);
RegisterIndexedProperty(TDataCache,'Dimensions',1,False,__DC__GetTDataCache__Dimensions,__DC__SetTDataCache__Dimensions);
RegisterProperty(TDataCache,'Active',__DC__GetTDataCache__Active,__DC__SetTDataCache__Active);
RegisterProperty(TDataCache,'Sparsing',__DC__GetTDataCache__Sparsing,__DC__SetTDataCache__Sparsing);
RegisterProperty(TDataCache,'IndexCount',__DC__GetTDataCache__IndexCount,nil);
RegisterProperty(TDataCache,'Success',__DC__GetTDataCache__Success,__DC__SetTDataCache__Success);
RegisterProperty(TDataCache,'ErrorCode',__DC__GetTDataCache__ErrorCode,__DC__SetTDataCache__ErrorCode);
RegisterProperty(TDataCache,'HasIndex',__DC__GetTDataCache__HasIndex,__DC__SetTDataCache__HasIndex);
RegisterProperty(TDimension,'Range',__DC__GetTDimension__Range,__DC__SetTDimension__Range);
RegisterProperty(TDimension,'Attributes',nil,__DC__SetTDimension__Attributes);
RegisterProperty(TDimension,'DimensionName',__DC__GetTDimension__DimensionName,__DC__SetTDimension__DimensionName);
RegisterProperty(TDimension,'FieldType',__DC__GetTDimension__FieldType,__DC__SetTDimension__FieldType);
RegisterProperty(TDimension,'Position',__DC__GetTDimension__Position,__DC__SetTDimension__Position);
RegisterProperty(TDimension,'FieldDefinition',__DC__GetTDimension__FieldDefinition,nil);
RegisterProperty(TDimension,'FieldName',__DC__GetTDimension__FieldName,__DC__SetTDimension__FieldName);
RegisterProperty(TFieldDefinition,'Width',__DC__GetTFieldDefinition__Width,__DC__SetTFieldDefinition__Width);
RegisterProperty(TFieldDefinition,'FormatString',__DC__GetTFieldDefinition__FormatString,__DC__SetTFieldDefinition__FormatString);
RegisterProperty(TFieldDefinition,'FieldType',__DC__GetTFieldDefinition__FieldType,__DC__SetTFieldDefinition__FieldType);
RegisterProperty(TFieldDefinition,'Precision',__DC__GetTFieldDefinition__Precision,__DC__SetTFieldDefinition__Precision);
RegisterProperty(TFieldDefinition,'DisplayName',__DC__GetTFieldDefinition__DisplayName,__DC__SetTFieldDefinition__DisplayName);
RegisterProperty(TFieldDefinition,'FieldNo',__DC__GetTFieldDefinition__FieldNo,__DC__SetTFieldDefinition__FieldNo);
RegisterProperty(TIndexInfo,'Count',__DC__GetTIndexInfo__Count,nil);
RegisterProperty(TIndexInfo,'Capacity',__DC__GetTIndexInfo__Capacity,__DC__SetTIndexInfo__Capacity);
RegisterProperty(TIndexInfo,'AddAggs',__DC__GetTIndexInfo__AddAggs,__DC__SetTIndexInfo__AddAggs);
RegisterProperty(TSummary,'Name',__DC__GetTSummary__Name,__DC__SetTSummary__Name);
RegisterProperty(TSummary,'Attributes',nil,__DC__SetTSummary__Attributes);
RegisterProperty(TSummary,'FieldType',__DC__GetTSummary__FieldType,__DC__SetTSummary__FieldType);
RegisterProperty(TSummary,'Position',__DC__GetTSummary__Position,__DC__SetTSummary__Position);
RegisterProperty(TSummary,'FieldDefinition',__DC__GetTSummary__FieldDefinition,nil);
RegisterProperty(TSummary,'FieldName',__DC__GetTSummary__FieldName,__DC__SetTSummary__FieldName);
RegisterProperty(TSummary,'CubeDimIndex',__DC__GetTSummary__CubeDimIndex,__DC__SetTSummary__CubeDimIndex);
RegisterProperty(TSummary,'AggDefinition',__DC__GetTSummary__AggDefinition,__DC__SetTSummary__AggDefinition);
RegisterProperty(TSummary,'IsDerived',__DC__GetTSummary__IsDerived,nil);
end;

const __ConstNames0 : array[0..44] of string = (
'SubTotal'
,'NonSparseAgg'
,'SparseUnknown'
,'SparseAgg'
,'SparseSum'
,'MaxBinDimensions'
,'LargeValueCount'
,'eaFail'
,'eaContinue'
,'dsNoData'
,'dsMetaData'
,'dsDimensionData'
,'dsAllData'
,'btHardRebuild'
,'btSoftRebuild'
,'btNoRebuild'
,'dcInactive'
,'dcBrowseMetaData'
,'dcBrowseMemberData'
,'dcBrowseAllData'
,'fxNone'
,'fxFloat'
,'fxCurrency'
,'fxDateTime'
,'fxTime'
,'fxDate'
,'fxString'
,'fxInteger'
,'fxBoolean'
,'idxNormal'
,'idxSparsed'
,'idxFiltered'
,'idxSubTotals'
,'idxDeleted'
,'csHasIndex'
,'csDirty'
,'csSuccess'
,'csShowProgress'
,'csRefreshing'
,'lsSparsing'
,'lsCursor'
,'lsShowProgress'
,'ctPreCalc'
,'ctRunning'
,'ctNone'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,SubTotal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,NonSparseAgg));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,SparseUnknown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,SparseAgg));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,SparseSum));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,MaxBinDimensions));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,LargeValueCount));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,eaFail));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,eaContinue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,dsNoData));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,dsMetaData));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,dsDimensionData));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,dsAllData));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,btHardRebuild));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,btSoftRebuild));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,btNoRebuild));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,dcInactive));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,dcBrowseMetaData));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,dcBrowseMemberData));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,dcBrowseAllData));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,fxNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,fxFloat));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,fxCurrency));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,fxDateTime));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,fxTime));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,fxDate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,fxString));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,fxInteger));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,fxBoolean));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,idxNormal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,idxSparsed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,idxFiltered));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,idxSubTotals));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,idxDeleted));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,csHasIndex));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,csDirty));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,csSuccess));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,csShowProgress));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,csRefreshing));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,lsSparsing));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,lsCursor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,lsShowProgress));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,ctPreCalc));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,ctRunning));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,ctNone));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..11] of TClass = (
ECacheError,
TAggDefinition,
TBuilderDim,
TCubeDim,
TCubeDims,
TCustomDataStore,
TDataCache,
TDimension,
TFieldDefinition,
TIndexInfo,
TMultiDimDataLink,
TSummary
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..1] of string = (
'TIndexInfoRec'
,'TestMatch'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TIndexInfoRec_)));
RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T0),[
TypeInfo(TSmallIntArray),TypeInfo(Boolean)],Addr(TestMatch),cRegister);

RegisterProc(TBuilderDim,'Create',mtConstructor,TypeInfo(_T1),[
TypeInfo(Cardinal),
TypeInfo(TFieldType)],Addr(TBuilderDim.Create),cRegister);

RegRegisterMethod(TBuilderDim,'GetSumCount',TypeInfo(_T2),[TypeInfo(Integer)],Addr(TBuilderDim.GetSumCount));

RegRegisterMethod(TBuilderDim,'GetSummary',TypeInfo(_T3),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(TBuilderDim.GetSummary));

RegRegisterMethod(TBuilderDim,'InitSummary',TypeInfo(_T4),[
TypeInfo(Integer)],Addr(TBuilderDim.InitSummary));

RegRegisterMethod(TBuilderDim,'Add',TypeInfo(_T5),[
TypeInfo(Variant)],Addr(TBuilderDim.Add));

RegRegisterMethod(TBuilderDim,'AddSummary',TypeInfo(_T6),[
TypeInfo(Variant)],Addr(TBuilderDim.AddSummary));

RegRegisterMethod(TBuilderDim,'MatchLastVal',TypeInfo(_T7),[
TypeInfo(Variant),TypeInfo(Boolean)],Addr(TBuilderDim.MatchLastVal));

//RegRegisterMethod(TCubeDim,'DoTransform',TypeInfo(_T8),[TypeInfo(Variant)], pointer(40));
RegRegisterMethod(TCubeDim,'DoTransform',TypeInfo(_T8),[TypeInfo(Variant)],  getVMTProcAddr('TCubeDim','DoTransform',40));


RegRegisterMethod(TCubeDim,'GetBinValues',TypeInfo(_T9),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(TCubeDim.GetBinValues));

RegRegisterMethod(TCubeDim,'IsBinData',TypeInfo(_T10),[TypeInfo(Boolean)],Addr(TCubeDim.IsBinData));

//RegRegisterMethod(TCustomDataStore,'ActiveChanged',TypeInfo(_T12),NoParams, pointer(48));
RegRegisterMethod(TCustomDataStore,'ActiveChanged',TypeInfo(_T12),NoParams,  getVMTProcAddr('TCustomDataStore','ActiveChanged',48));


//RegRegisterMethod(TCustomDataStore,'StateChanged',TypeInfo(_T13),NoParams, pointer(52));
RegRegisterMethod(TCustomDataStore,'StateChanged',TypeInfo(_T13),NoParams,  getVMTProcAddr('TCustomDataStore','StateChanged',52));


//RegRegisterMethod(TCustomDataStore,'DoBeforeOpen',TypeInfo(_T14),NoParams, pointer(56));
RegRegisterMethod(TCustomDataStore,'DoBeforeOpen',TypeInfo(_T14),NoParams,  getVMTProcAddr('TCustomDataStore','DoBeforeOpen',56));


//RegRegisterMethod(TCustomDataStore,'DoAfterOpen',TypeInfo(_T15),NoParams, pointer(60));
RegRegisterMethod(TCustomDataStore,'DoAfterOpen',TypeInfo(_T15),NoParams,  getVMTProcAddr('TCustomDataStore','DoAfterOpen',60));


//RegRegisterMethod(TCustomDataStore,'DoBeforeClose',TypeInfo(_T16),NoParams, pointer(64));
RegRegisterMethod(TCustomDataStore,'DoBeforeClose',TypeInfo(_T16),NoParams,  getVMTProcAddr('TCustomDataStore','DoBeforeClose',64));


//RegRegisterMethod(TCustomDataStore,'DoAfterClose',TypeInfo(_T17),NoParams, pointer(68));
RegRegisterMethod(TCustomDataStore,'DoAfterClose',TypeInfo(_T17),NoParams,  getVMTProcAddr('TCustomDataStore','DoAfterClose',68));


//RegRegisterMethod(TCustomDataStore,'DoOnRefresh',TypeInfo(_T18),[TypeInfo(TCubeDims)], pointer(72));
RegRegisterMethod(TCustomDataStore,'DoOnRefresh',TypeInfo(_T18),[TypeInfo(TCubeDims)],  getVMTProcAddr('TCustomDataStore','DoOnRefresh',72));


//RegRegisterMethod(TCustomDataStore,'LayoutChanged',TypeInfo(_T19),NoParams, pointer(76));
RegRegisterMethod(TCustomDataStore,'LayoutChanged',TypeInfo(_T19),NoParams,  getVMTProcAddr('TCustomDataStore','LayoutChanged',76));


//RegRegisterMethod(TCustomDataStore,'CanDimBeClosed',TypeInfo(_T20),[TypeInfo(Integer),TypeInfo(Boolean)], pointer(80));
RegRegisterMethod(TCustomDataStore,'CanDimBeClosed',TypeInfo(_T20),[TypeInfo(Integer),TypeInfo(Boolean)],  getVMTProcAddr('TCustomDataStore','CanDimBeClosed',80));


//RegRegisterMethod(TCustomDataStore,'CanSumBeClosed',TypeInfo(_T21),[TypeInfo(Integer),TypeInfo(Boolean)], pointer(84));
RegRegisterMethod(TCustomDataStore,'CanSumBeClosed',TypeInfo(_T21),[TypeInfo(Integer),TypeInfo(Boolean)],  getVMTProcAddr('TCustomDataStore','CanSumBeClosed',84));


RegRegisterMethod(TCustomDataStore,'CalcSubTotals',TypeInfo(_T22),NoParams,Addr(TCustomDataStore.CalcSubTotals));

RegRegisterMethod(TCustomDataStore,'Refresh',TypeInfo(_T23),[
TypeInfo(TCubeDims),
TypeInfo(Boolean)],Addr(TCustomDataStore.Refresh));

RegRegisterMethod(TCustomDataStore,'GetMemoryUsage',TypeInfo(_T24),[TypeInfo(Integer)],Addr(TCustomDataStore.GetMemoryUsage));

//RegRegisterMethod(TCustomDataStore,'GetDimensionName',TypeInfo(_T25),[TypeInfo(Integer),TypeInfo(string)], pointer(88));
RegRegisterMethod(TCustomDataStore,'GetDimensionName',TypeInfo(_T25),[TypeInfo(Integer),TypeInfo(string)],  getVMTProcAddr('TCustomDataStore','GetDimensionName',88));


//RegRegisterMethod(TCustomDataStore,'GetDimensionMemberCount',TypeInfo(_T26),[TypeInfo(Integer),TypeInfo(Integer)], pointer(92));
RegRegisterMethod(TCustomDataStore,'GetDimensionMemberCount',TypeInfo(_T26),[TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TCustomDataStore','GetDimensionMemberCount',92));


//RegRegisterMethod(TCustomDataStore,'GetMemberAsString',TypeInfo(_T27),[TypeInfo(Integer),TypeInfo(Integer),TypeInfo(string)], pointer(96));
RegRegisterMethod(TCustomDataStore,'GetMemberAsString',TypeInfo(_T27),[TypeInfo(Integer),TypeInfo(Integer),TypeInfo(string)],  getVMTProcAddr('TCustomDataStore','GetMemberAsString',96));


RegRegisterMethod(TCustomDataStore,'GetMemberAsVariant',TypeInfo(_T28),[
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Variant)],Addr(TCustomDataStore.GetMemberAsVariant));

//RegRegisterMethod(TCustomDataStore,'GetSummaryName',TypeInfo(_T29),[TypeInfo(Integer),TypeInfo(string)], pointer(100));
RegRegisterMethod(TCustomDataStore,'GetSummaryName',TypeInfo(_T29),[TypeInfo(Integer),TypeInfo(string)],  getVMTProcAddr('TCustomDataStore','GetSummaryName',100));


//RegRegisterMethod(TCustomDataStore,'GetSummaryAsString',TypeInfo(_T30),[TypeInfo(TSmallIntArray),TypeInfo(string)], pointer(104));
RegRegisterMethod(TCustomDataStore,'GetSummaryAsString',TypeInfo(_T30),[TypeInfo(TSmallIntArray),TypeInfo(string)],  getVMTProcAddr('TCustomDataStore','GetSummaryAsString',104));


//RegRegisterMethod(TCustomDataStore,'GetSummaryAsVariant',TypeInfo(_T31),[TypeInfo(TSmallIntArray),TypeInfo(Variant)], pointer(108));
RegRegisterMethod(TCustomDataStore,'GetSummaryAsVariant',TypeInfo(_T31),[TypeInfo(TSmallIntArray),TypeInfo(Variant)],  getVMTProcAddr('TCustomDataStore','GetSummaryAsVariant',108));


RegisterProc(TDataCache,'Create',mtConstructor,TypeInfo(_T32),NoParams,Addr(TDataCache.Create),cRegister);

RegRegisterMethod(TDataCache,'GetMemoryUsage',TypeInfo(_T33),[TypeInfo(Integer)],Addr(TDataCache.GetMemoryUsage));

RegRegisterMethod(TDataCache,'CalcSubTotals',TypeInfo(_T34),NoParams,Addr(TDataCache.CalcSubTotals));

RegRegisterMethod(TDataCache,'ClearIndexInfo',TypeInfo(_T35),NoParams,Addr(TDataCache.ClearIndexInfo));

RegRegisterMethod(TDataCache,'AddAggIndex',TypeInfo(_T36),[
TypeInfo(TSmallIntArray),
TypeInfo(TList),TypeInfo(Integer)],Addr(TDataCache.AddAggIndex));

RegRegisterMethod(TDataCache,'AddIndex',TypeInfo(_T37),[
TypeInfo(TSmallIntArray),
TypeInfo(Boolean),TypeInfo(Integer)],Addr(TDataCache.AddIndex));

RegRegisterMethod(TDataCache,'IsDimension',TypeInfo(_T38),[
TypeInfo(Integer),TypeInfo(Boolean)],Addr(TDataCache.IsDimension));

RegRegisterMethod(TDataCache,'IsSummary',TypeInfo(_T39),[
TypeInfo(Integer),TypeInfo(Boolean)],Addr(TDataCache.IsSummary));

RegRegisterMethod(TDataCache,'SummaryFromPosition',TypeInfo(_T40),[
TypeInfo(Integer),TypeInfo(TSummary)],Addr(TDataCache.SummaryFromPosition));

RegRegisterMethod(TDataCache,'SummaryFromFieldName',TypeInfo(_T41),[
TypeInfo(string),TypeInfo(TSummary)],Addr(TDataCache.SummaryFromFieldName));

RegRegisterMethod(TDataCache,'SummaryFromCubeDimIndex',TypeInfo(_T42),[
TypeInfo(Integer),TypeInfo(TSummary)],Addr(TDataCache.SummaryFromCubeDimIndex));

RegRegisterMethod(TDataCache,'DimensionFromFieldName',TypeInfo(_T43),[
TypeInfo(string),TypeInfo(TDimension)],Addr(TDataCache.DimensionFromFieldName));

RegRegisterMethod(TDataCache,'AppendDimension',TypeInfo(_T44),[
TypeInfo(TDimension),TypeInfo(Integer)],Addr(TDataCache.AppendDimension));

RegRegisterMethod(TDataCache,'AppendSummary',TypeInfo(_T45),[
TypeInfo(TSummary),TypeInfo(Integer)],Addr(TDataCache.AppendSummary));

RegRegisterMethod(TDataCache,'GetDimensionName',TypeInfo(_T46),[
TypeInfo(Integer),TypeInfo(string)],Addr(TDataCache.GetDimensionName));

RegRegisterMethod(TDataCache,'GetSummaryName',TypeInfo(_T47),[
TypeInfo(Integer),TypeInfo(string)],Addr(TDataCache.GetSummaryName));

RegRegisterMethod(TDataCache,'GetDimensionMember',TypeInfo(_T48),[
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(string)],Addr(TDataCache.GetDimensionMember));

RegRegisterMethod(TDataCache,'GetDimensionMemberAsVariant',TypeInfo(_T49),[
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Variant)],Addr(TDataCache.GetDimensionMemberAsVariant));

RegRegisterMethod(TDataCache,'GetDimensionMemberCount',TypeInfo(_T50),[
TypeInfo(Integer),TypeInfo(Integer)],Addr(TDataCache.GetDimensionMemberCount));

RegRegisterMethod(TDataCache,'GetIndexCount',TypeInfo(_T51),[TypeInfo(Integer)],Addr(TDataCache.GetIndexCount));

RegRegisterMethod(TDataCache,'IncSummaryIndex',TypeInfo(_T52),[
TypeInfo(TSummary),
TypeInfo(TSmallIntArray),
TypeInfo(TSmallIntArray),
TypeInfo(Boolean),TypeInfo(Boolean)],Addr(TDataCache.IncSummaryIndex));

RegRegisterMethod(TDataCache,'HasSubTotals',TypeInfo(_T53),[
TypeInfo(TSmallIntArray),TypeInfo(Boolean)],Addr(TDataCache.HasSubTotals));

RegRegisterMethod(TDataCache,'HasValidSubTotals',TypeInfo(_T54),[
TypeInfo(TSummary),
TypeInfo(TSmallIntArray),TypeInfo(Boolean)],Addr(TDataCache.HasValidSubTotals));

RegRegisterMethod(TDataCache,'GetSummaryAsString',TypeInfo(_T55),[
TypeInfo(TSmallIntArray),TypeInfo(string)],Addr(TDataCache.GetSummaryAsString));

RegRegisterMethod(TDataCache,'GetSummaryAsVariant',TypeInfo(_T56),[
TypeInfo(TSmallIntArray),TypeInfo(Variant)],Addr(TDataCache.GetSummaryAsVariant));

RegRegisterMethod(TDataCache,'CreateTable',TypeInfo(_T57),[
TypeInfo(string)],Addr(TDataCache.CreateTable));

RegRegisterMethod(TDataCache,'GetDomain',TypeInfo(_T58),[
TypeInfo(TIntArray),
TypeInfo(Integer),
TypeInfo(Boolean),
TypeInfo(TTwoDimArray),TypeInfo(Integer)],Addr(TDataCache.GetDomain));

RegisterProc(TDimension,'Create',mtConstructor,TypeInfo(_T59),[
TypeInfo(Cardinal),
TypeInfo(TFieldType)],Addr(TDimension.Create),cRegister);

RegRegisterMethod(TDimension,'IsString',TypeInfo(_T60),[TypeInfo(Boolean)],Addr(TDimension.IsString));

RegRegisterMethod(TDimension,'SetFlag',TypeInfo(_T61),[
TypeInfo(TDimFlags)],Addr(TDimension.SetFlag));

RegRegisterMethod(TDimension,'HasFlag',TypeInfo(_T62),[
TypeInfo(TDimFlags),TypeInfo(Boolean)],Addr(TDimension.HasFlag));

RegRegisterMethod(TDimension,'ClearFlag',TypeInfo(_T63),[
TypeInfo(TDimFlags)],Addr(TDimension.ClearFlag));

RegRegisterMethod(TDimension,'SetRangeCounting',TypeInfo(_T64),[
TypeInfo(Boolean)],Addr(TDimension.SetRangeCounting));

RegRegisterMethod(TDimension,'AssignSorted',TypeInfo(_T65),[
TypeInfo(TDimension),
TypeInfo(Boolean)],Addr(TDimension.AssignSorted));

RegisterProc(TFieldDefinition,'Create',mtConstructor,TypeInfo(_T66),NoParams,Addr(TFieldDefinition.Create),cRegister);

RegRegisterMethod(TFieldDefinition,'FormatVariantToStr',TypeInfo(_T67),[
TypeInfo(Variant),TypeInfo(string)],Addr(TFieldDefinition.FormatVariantToStr));

RegRegisterMethod(TFieldDefinition,'SetFieldType',TypeInfo(_T68),[
TypeInfo(TFieldType)],Addr(TFieldDefinition.SetFieldType));

RegRegisterMethod(TFieldDefinition,'SetName',TypeInfo(_T69),[
TypeInfo(string)],Addr(TFieldDefinition.SetName));

RegisterProc(TIndexInfo,'Create',mtConstructor,TypeInfo(_T70),NoParams,Addr(TIndexInfo.Create),cRegister);

RegRegisterMethod(TIndexInfo,'SetCapacity',TypeInfo(_T71),[
TypeInfo(Integer)],Addr(TIndexInfo.SetCapacity));

RegRegisterMethod(TIndexInfo,'GetCapacity',TypeInfo(_T72),[TypeInfo(Integer)],Addr(TIndexInfo.GetCapacity));

RegRegisterMethod(TIndexInfo,'IsSparse',TypeInfo(_T74),[
TypeInfo(Integer),TypeInfo(Boolean)],Addr(TIndexInfo.IsSparse));

RegRegisterMethod(TIndexInfo,'IsSparseAgg',TypeInfo(_T75),[
TypeInfo(Integer),TypeInfo(Boolean)],Addr(TIndexInfo.IsSparseAgg));

RegRegisterMethod(TIndexInfo,'AddOffset',TypeInfo(_T76),[
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TIndexInfo.AddOffset));

RegRegisterMethod(TIndexInfo,'LockIndex',TypeInfo(_T77),[TypeInfo(TIntArray)],Addr(TIndexInfo.LockIndex));

RegRegisterMethod(TIndexInfo,'UnlockIndex',TypeInfo(_T78),NoParams,Addr(TIndexInfo.UnlockIndex));

RegisterProc(TMultiDimDataLink,'Create',mtConstructor,TypeInfo(_T79),[
TypeInfo(TCustomDataStore)],Addr(TMultiDimDataLink.Create),cRegister);

RegisterProc(TSummary,'Create',mtConstructor,TypeInfo(_T80),[
TypeInfo(Cardinal),
TypeInfo(TFieldType)],Addr(TSummary.Create),cRegister);

RegRegisterMethod(TSummary,'ClearTotals',TypeInfo(_T81),NoParams,Addr(TSummary.ClearTotals));

RegRegisterMethod(TSummary,'IsSparse',TypeInfo(_T82),[
TypeInfo(Integer),TypeInfo(Boolean)],Addr(TSummary.IsSparse));

RegRegisterMethod(TSummary,'UpdateIndexInfo',TypeInfo(_T83),[
TypeInfo(Integer),
TypeInfo(Variant)],Addr(TSummary.UpdateIndexInfo));

RegRegisterMethod(TSummary,'AddIndexInfo',TypeInfo(_T84),[
TypeInfo(Boolean),
TypeInfo(Boolean),
TypeInfo(Integer),TypeInfo(Integer)],Addr(TSummary.AddIndexInfo));

RegRegisterMethod(TSummary,'AddSubTotal',TypeInfo(_T85),[
TypeInfo(Variant),TypeInfo(Integer)],Addr(TSummary.AddSubTotal));

RegRegisterMethod(TSummary,'AddSum',TypeInfo(_T86),[
TypeInfo(TSmallIntArray),
TypeInfo(Variant)],Addr(TSummary.AddSum));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(TCubeDims,'Create',mtConstructor,TypeInfo(_T11),[
TypeInfo(TPersistent),
TypeInfo(TCubeDimClass)],Addr(TCubeDims.Create),cRegister)}

{RegRegisterMethod(TIndexInfo,'Add',TypeInfo(_T73),[
TypeInfoPointer,TypeInfo(Integer)],Addr(TIndexInfo.Add))}

RegisterEvent(TypeInfo(TCapacityErrorEvent),[
TypeInfo(TErrorAction)]);

RegisterEvent(TypeInfo(TCubeDimTransformEvent),[
TypeInfo(Variant),
TypeInfo(TCubeDim)]);

RegisterEvent(TypeInfo(TCubeNotifyEvent),[
TypeInfo(TCustomDataStore)]);

RegisterEvent(TypeInfo(TCubeRefreshEvent),[
TypeInfo(TCustomDataStore),
TypeInfo(TCubeDims)]);

RegisterEvent(TypeInfo(TSumMethod),[
TypeInfo(TSmallIntArray),
TypeInfo(TSummary),
TypeInfo(Variant),TypeInfo(Boolean)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
