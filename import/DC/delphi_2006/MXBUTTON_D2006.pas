{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit MXBUTTON_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  Mxarrays,
  MXTABLES,
  MXQPARSE,
  MXQEDCOM,
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Variants,
  Messages,
  SysUtils,
  Classes,
  Graphics,
  Grids,
  Buttons,
  Controls,
  StdCtrls,
  Forms,
  Dialogs,
  BDE,
  DB,
  DBTables,
  Menus,
  ExtCtrls,
  Mxconsts,
  MXDB,
  Mxstore,
  MXCOMMON,
  MXBUTTON;
function ConvertTDimInfoToVariant(var R : TDimInfo) : OleVariant;
function ConvertVariantToTDimInfo(const V : OleVariant) : TDimInfo;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TDimInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TDimInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setiState(const val : TDimState);
function getiState : TDimState;
property iState : TDimState read getiState write setiState;
procedure setiValue(const val : Integer);
function getiValue : Integer;
property iValue : Integer read getiValue write setiValue;
procedure setiIndex(const val : Integer);
function getiIndex : Integer;
property iIndex : Integer read getiIndex write setiIndex;
procedure setiActiveIndex(const val : Integer);
function getiActiveIndex : Integer;
property iActiveIndex : Integer read getiActiveIndex write setiActiveIndex;
procedure setiGroup(const val : TDimGroup);
function getiGroup : TDimGroup;
property iGroup : TDimGroup read getiGroup write setiGroup;
end;
type
_T0 = procedure  of object;

_T1 = procedure (p0 : TPivotButtonType) of object;

_T2 = _T0;

_T3 = procedure (p0 : String) of object;

_T4 = procedure (const p0 : String;
p1 : TMenuProp;
p2 : Integer) of object;

_T5 = procedure (p0 : TWinControl;
p1 : Integer;
p2 : Integer) of object;

function __TDimInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDimInfo__Wrapper.setiState(const val : TDimState);
begin
TDimInfo(GetRecordPtr^).iState := val;
end;
function __TDimInfo__Wrapper.getiState : TDimState;
begin
result := TDimInfo(GetRecordPtr^).iState;
end;
procedure __TDimInfo__Wrapper.setiValue(const val : Integer);
begin
TDimInfo(GetRecordPtr^).iValue := val;
end;
function __TDimInfo__Wrapper.getiValue : Integer;
begin
result := TDimInfo(GetRecordPtr^).iValue;
end;
procedure __TDimInfo__Wrapper.setiIndex(const val : Integer);
begin
TDimInfo(GetRecordPtr^).iIndex := val;
end;
function __TDimInfo__Wrapper.getiIndex : Integer;
begin
result := TDimInfo(GetRecordPtr^).iIndex;
end;
procedure __TDimInfo__Wrapper.setiActiveIndex(const val : Integer);
begin
TDimInfo(GetRecordPtr^).iActiveIndex := val;
end;
function __TDimInfo__Wrapper.getiActiveIndex : Integer;
begin
result := TDimInfo(GetRecordPtr^).iActiveIndex;
end;
procedure __TDimInfo__Wrapper.setiGroup(const val : TDimGroup);
begin
TDimInfo(GetRecordPtr^).iGroup := val;
end;
function __TDimInfo__Wrapper.getiGroup : TDimGroup;
begin
result := TDimInfo(GetRecordPtr^).iGroup;
end;

type __TDimInfo__Wrapper__ = class(__TDimInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDimInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDimInfoToVariant(var R : TDimInfo) : OleVariant;
var
__rw : __TDimInfo__Wrapper__;
begin
__rw := __TDimInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDimInfo(const V : OleVariant) : TDimInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDimInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTPivotButton__DimInfo(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TDimInfo__Wrapper;
begin
__wrapper := __TDimInfo__Wrapper.Create;
__wrapper.fR := TPivotButton(Instance).DimInfo;
result := IUnknown(__wrapper) as IDispatch;
end;

procedure __RegisterProps;
begin
RegisterProperty(TPivotButton,'DimInfo',__DC__GetTPivotButton__DimInfo,nil);
end;

const __ConstNames0 : array[0..18] of string = (
'tmChecked'
,'tmRadio'
,'tmNone'
,'xmNone'
,'xmPushed'
,'xmDragging'
,'pbDimension'
,'pbTarget'
,'pbSummary'
,'pbInactive'
,'xtHorizontal'
,'xtVertical'
,'xtLeftTop'
,'xtCheck'
,'xtRadio'
,'xtSequential'
,'xtRows'
,'xtColumns'
,'xtSummaries'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,tmChecked));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,tmRadio));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,tmNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,xmNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,xmPushed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,xmDragging));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,pbDimension));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,pbTarget));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,pbSummary));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,pbInactive));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,xtHorizontal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,xtVertical));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,xtLeftTop));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,xtCheck));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,xtRadio));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,xtSequential));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,xtRows));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,xtColumns));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,xtSummaries));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..2] of TClass = (
TPivotButton,
TQuickMenu,
TQuickMenuItem
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegRegisterMethod(TPivotButton,'NewState',TypeInfo(_T0),NoParams,Addr(TPivotButton.NewState));

RegRegisterMethod(TPivotButton,'SetType',TypeInfo(_T1),[
TypeInfo(TPivotButtonType)],Addr(TPivotButton.SetType));

RegRegisterMethod(TQuickMenu,'Clear',TypeInfo(_T2),NoParams,Addr(TQuickMenu.Clear));

RegRegisterMethod(TQuickMenu,'SetTitle',TypeInfo(_T3),[
TypeInfo(String)],Addr(TQuickMenu.SetTitle));

RegRegisterMethod(TQuickMenu,'AddLine',TypeInfo(_T4),[
TypeInfo(String),
TypeInfo(TMenuProp),
TypeInfo(Integer)],Addr(TQuickMenu.AddLine));

RegRegisterMethod(TQuickMenu,'PopUpAtMe',TypeInfo(_T5),[
TypeInfo(TWinControl),
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TQuickMenu.PopUpAtMe));

end;
initialization
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
