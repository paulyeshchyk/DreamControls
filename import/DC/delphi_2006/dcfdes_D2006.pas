{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit dcfdes_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  Types,
  dcscript,
  dcfdeshook,
  dcsystem,
  Windows,
  Messages,
  SysUtils,
  Classes,
  Graphics,
  Controls,
  forms,
  dccompchanges,
  Dialogs,
  clipbrd,
  menus,
  dcdsgnstuff,
  dcapp,
  dcgen,
  dccommon,
  typinfo,
  dcconsts,
  dcdreamlib,
  dccontrols,
  ActiveX,
  dalign,
  dsize,
  aligunit,
  dcpalfrm,
  dcpalet,
  dcpalette,
  DCPLoad,
  dccbut,
  dchook,
  dcedit,
  dcinpfrm,
  treemod,
  olectrls,
  dcfdes;
function ConvertTGUIDToVariant(var R : TGUID) : OleVariant;
function ConvertVariantToTGUID(const V : OleVariant) : TGUID;
function ConvertTMessageToVariant(var R : TMessage) : OleVariant;
function ConvertVariantToTMessage(const V : OleVariant) : TMessage;
function ConvertTMethodToVariant(var R : TMethod) : OleVariant;
function ConvertVariantToTMethod(const V : OleVariant) : TMethod;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TPoint__Wrapper = class(TDCRecordWrapper)
private
fR : TPoint;
public
function GetRecordPtr : pointer; override;
published
procedure setX(const val : Longint);
function getX : Longint;
property X : Longint read getX write setX;
procedure setY(const val : Longint);
function getY : Longint;
property Y : Longint read getY write setY;
end;
type __TGUID__Wrapper = class(TDCRecordWrapper)
private
fR : TGUID;
public
function GetRecordPtr : pointer; override;
published
procedure setD1(const val : LongWord);
function getD1 : LongWord;
property D1 : LongWord read getD1 write setD1;
procedure setD2(const val : Word);
function getD2 : Word;
property D2 : Word read getD2 write setD2;
procedure setD3(const val : Word);
function getD3 : Word;
property D3 : Word read getD3 write setD3;
end;
type __TRect__Wrapper = class(TDCRecordWrapper)
private
fR : TRect;
public
function GetRecordPtr : pointer; override;
published
procedure setLeft(const val : Longint);
function getLeft : Longint;
property Left : Longint read getLeft write setLeft;
procedure setTop(const val : Longint);
function getTop : Longint;
property Top : Longint read getTop write setTop;
procedure setRight(const val : Longint);
function getRight : Longint;
property Right : Longint read getRight write setRight;
procedure setBottom(const val : Longint);
function getBottom : Longint;
property Bottom : Longint read getBottom write setBottom;
end;
type __TMessage__Wrapper = class(TDCRecordWrapper)
private
fR : TMessage;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setWParam(const val : Longint);
function getWParam : Longint;
property WParam : Longint read getWParam write setWParam;
procedure setLParam(const val : Longint);
function getLParam : Longint;
property LParam : Longint read getLParam write setLParam;
procedure setResult(const val : Longint);
function getResult : Longint;
property Result : Longint read getResult write setResult;
procedure setWParamLo(const val : Word);
function getWParamLo : Word;
property WParamLo : Word read getWParamLo write setWParamLo;
procedure setWParamHi(const val : Word);
function getWParamHi : Word;
property WParamHi : Word read getWParamHi write setWParamHi;
procedure setLParamLo(const val : Word);
function getLParamLo : Word;
property LParamLo : Word read getLParamLo write setLParamLo;
procedure setLParamHi(const val : Word);
function getLParamHi : Word;
property LParamHi : Word read getLParamHi write setLParamHi;
procedure setResultLo(const val : Word);
function getResultLo : Word;
property ResultLo : Word read getResultLo write setResultLo;
procedure setResultHi(const val : Word);
function getResultHi : Word;
property ResultHi : Word read getResultHi write setResultHi;
end;
type __TMethod__Wrapper = class(TDCRecordWrapper)
private
fR : TMethod;
public
function GetRecordPtr : pointer; override;
published
end;
type
_T0 = procedure (p0 : TDataModule;
p1 : TCustomForm) of object;

_T1 = procedure (p0 : TDataModule) of object;

_T2 = procedure (p0 : TList;
p1 : TAlignControls;
p2 : TAlignControls) of object;

_T3 = procedure (p0 : TList;
p1 : Integer;
p2 : Integer) of object;

_T4 = procedure (const p0 : IDispatch) of object;

_T5 = _T4;

_T6 = _T4;

_T7 = function (p0 : TWInControl): IDispatch of object;

_T8 = procedure  of object;

_T9 = procedure (p0 : TList;
p1 : TList) of object;

_T10 = procedure (p0 : TCustomForm;
const p1 : string) of object;

_T11 = procedure (var p0 : TVerbStates) of object;

{_T12 = function : IDCFormDesigner of object;}

_T13 = function : TDesignerOptions of object;

_T14 = function : TDCLiteDesignerOptions of object;

{_T15 = function (p0 : Array of string;
p1 : PTypeData): Boolean of object;}

_T16 = _T8;

_T17 = procedure (p0 : TComponent) of object;

_T18 = procedure (p0 : TWInControl) of object;

_T19 = _T8;

_T20 = procedure (p0 : Boolean) of object;

_T21 = _T8;

_T22 = _T8;

_T23 = function : TColor of object;

_T24 = procedure (p0 : TColor) of object;

_T25 = _T8;

_T26 = _T8;

_T27 = _T8;

_T28 = _T8;

_T29 = function (p0 : HWND): Boolean of object;

_T30 = _T8;

_T31 = _T8;

_T32 = _T8;

_T33 = procedure (p0 : TObject) of object;

_T34 = _T20;

_T35 = _T8;

_T36 = _T8;

_T37 = _T33;

{_T38 = function (const p0 : TFileName;
p1 : TComponentClass): TComponent of object;}

{_T39 = function (p0 : TStream;
p1 : TComponentClass): TComponent of object;}

_T40 = procedure (p0 : TComponent;
const p1 : TFileName) of object;

_T41 = procedure (p0 : TComponent;
p1 : TStream) of object;

_T42 = function (p0 : TComponent;
p1 : TStrings): string of object;

_T43 = procedure (const p0 : TFileName) of object;

_T44 = procedure (p0 : TStream) of object;

_T45 = procedure (p0 : TStrings) of object;

_T46 = _T41;

_T47 = _T41;

_T48 = function (p0 : TStream;
p1 : TComponent): TComponent of object;

_T49 = function (const p0 : TFileName;
p1 : TComponent): TComponent of object;

_T50 = _T40;

_T51 = _T40;

_T52 = _T17;

_T53 = _T17;

_T54 = function : Boolean of object;

_T55 = _T54;

_T56 = _T54;

_T57 = _T8;

_T58 = _T8;

_T59 = _T8;

_T60 = _T8;

_T61 = _T8;

_T62 = _T54;

_T63 = procedure (p0 : TMouseButton;
p1 : TShiftState;
p2 : Integer;
p3 : Integer) of object;

_T64 = _T63;

_T65 = procedure (p0 : TShiftState;
p1 : Integer;
p2 : Integer) of object;

_T66 = procedure (var p0 : Word;
p1 : TShiftState) of object;

{_T67 = procedure (p0 : TClass;
p1 : TBitmap) of object;}

_T68 = _T8;

_T69 = _T8;

_T70 = _T8;

_T71 = _T8;

_T72 = _T8;

_T73 = function (p0 : TComponent): Boolean of object;

_T74 = _T17;

_T75 = procedure (const p0 : string;
const p1 : string) of object;

_T76 = procedure (const p0 : string) of object;

_T77 = _T8;

_T78 = procedure (p0 : TPersistent;
p1 : TOperation) of object;

_T79 = procedure (p0 : TComponent;
const p1 : string;
const p2 : string) of object;

_T80 = function (p0 : TControl;
const p1 : IDispatch): Boolean of object;

_T81 = function (const p0 : IDispatch): string of object;

{_T82 = procedure (p0 : PTypeData;
p1 : TGetStrProc) of object;}

_T83 = function (const p0 : string): Boolean of object;

{_T84 = procedure (p0 : PTypeData;
p1 : TGetStrProc) of object;}

_T86 = function : TWInControl of object;

_T87 = _T54;

_T88 = procedure (p0 : TStream;
p1 : Boolean) of object;

_T89 = _T43;

_T90 = _T41;

_T91 = _T8;

_T92 = _T8;

_T93 = procedure (p0 : TPersistent) of object;

_T94 = _T8;

_T95 = _T8;

_T96 = _T8;

_T97 = _T8;

_T98 = _T17;

_T99 = _T8;

_T100 = procedure (p0 : string) of object;

_T101 = function (p0 : string): TComponent of object;

_T102 = procedure (p0 : TAlignControls;
p1 : TAlignControls) of object;

_T103 = procedure (p0 : Integer;
p1 : Integer) of object;

{_T104 = procedure (const p0 : IDesignerSelections) of object;}

_T105 = procedure (const p0 : Extended) of object;

_T106 = _T8;

_T107 = _T8;

_T108 = _T8;

_T109 = _T8;

_T110 = _T8;

_T111 = _T8;

_T112 = _T8;

_T113 = _T8;

_T114 = _T8;

_T115 = _T8;

_T116 = _T8;

_T117 = _T8;

_T118 = _T17;

_T119 = _T17;

_T120 = _T17;

_T121 = _T93;

{_T122 = procedure (p0 : TComponent;
p1 : PControlData) of object;}

_T123 = procedure (p0 : TComponent;
const p1 : IDispatch) of object;

_T124 = function (p0 : Integer): Integer of object;

_T125 = _T123;

{_T126 = procedure (p0 : TComponent;
p1 : PControlData) of object;}

_T127 = procedure (p0 : TDCOLEControl) of object;

_T128 = _T8;

_T129 = function : TStream of object;

function __TPoint__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPoint__Wrapper.setX(const val : Longint);
begin
TPoint(GetRecordPtr^).X := val;
end;
function __TPoint__Wrapper.getX : Longint;
begin
result := TPoint(GetRecordPtr^).X;
end;
procedure __TPoint__Wrapper.setY(const val : Longint);
begin
TPoint(GetRecordPtr^).Y := val;
end;
function __TPoint__Wrapper.getY : Longint;
begin
result := TPoint(GetRecordPtr^).Y;
end;
function __TGUID__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TGUID__Wrapper.setD1(const val : LongWord);
begin
TGUID(GetRecordPtr^).D1 := val;
end;
function __TGUID__Wrapper.getD1 : LongWord;
begin
result := TGUID(GetRecordPtr^).D1;
end;
procedure __TGUID__Wrapper.setD2(const val : Word);
begin
TGUID(GetRecordPtr^).D2 := val;
end;
function __TGUID__Wrapper.getD2 : Word;
begin
result := TGUID(GetRecordPtr^).D2;
end;
procedure __TGUID__Wrapper.setD3(const val : Word);
begin
TGUID(GetRecordPtr^).D3 := val;
end;
function __TGUID__Wrapper.getD3 : Word;
begin
result := TGUID(GetRecordPtr^).D3;
end;
function __TRect__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRect__Wrapper.setLeft(const val : Longint);
begin
TRect(GetRecordPtr^).Left := val;
end;
function __TRect__Wrapper.getLeft : Longint;
begin
result := TRect(GetRecordPtr^).Left;
end;
procedure __TRect__Wrapper.setTop(const val : Longint);
begin
TRect(GetRecordPtr^).Top := val;
end;
function __TRect__Wrapper.getTop : Longint;
begin
result := TRect(GetRecordPtr^).Top;
end;
procedure __TRect__Wrapper.setRight(const val : Longint);
begin
TRect(GetRecordPtr^).Right := val;
end;
function __TRect__Wrapper.getRight : Longint;
begin
result := TRect(GetRecordPtr^).Right;
end;
procedure __TRect__Wrapper.setBottom(const val : Longint);
begin
TRect(GetRecordPtr^).Bottom := val;
end;
function __TRect__Wrapper.getBottom : Longint;
begin
result := TRect(GetRecordPtr^).Bottom;
end;
function __TMessage__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMessage__Wrapper.setMsg(const val : Cardinal);
begin
TMessage(GetRecordPtr^).Msg := val;
end;
function __TMessage__Wrapper.getMsg : Cardinal;
begin
result := TMessage(GetRecordPtr^).Msg;
end;
procedure __TMessage__Wrapper.setWParam(const val : Longint);
begin
TMessage(GetRecordPtr^).WParam := val;
end;
function __TMessage__Wrapper.getWParam : Longint;
begin
result := TMessage(GetRecordPtr^).WParam;
end;
procedure __TMessage__Wrapper.setLParam(const val : Longint);
begin
TMessage(GetRecordPtr^).LParam := val;
end;
function __TMessage__Wrapper.getLParam : Longint;
begin
result := TMessage(GetRecordPtr^).LParam;
end;
procedure __TMessage__Wrapper.setResult(const val : Longint);
begin
TMessage(GetRecordPtr^).Result := val;
end;
function __TMessage__Wrapper.getResult : Longint;
begin
result := TMessage(GetRecordPtr^).Result;
end;
procedure __TMessage__Wrapper.setWParamLo(const val : Word);
begin
TMessage(GetRecordPtr^).WParamLo := val;
end;
function __TMessage__Wrapper.getWParamLo : Word;
begin
result := TMessage(GetRecordPtr^).WParamLo;
end;
procedure __TMessage__Wrapper.setWParamHi(const val : Word);
begin
TMessage(GetRecordPtr^).WParamHi := val;
end;
function __TMessage__Wrapper.getWParamHi : Word;
begin
result := TMessage(GetRecordPtr^).WParamHi;
end;
procedure __TMessage__Wrapper.setLParamLo(const val : Word);
begin
TMessage(GetRecordPtr^).LParamLo := val;
end;
function __TMessage__Wrapper.getLParamLo : Word;
begin
result := TMessage(GetRecordPtr^).LParamLo;
end;
procedure __TMessage__Wrapper.setLParamHi(const val : Word);
begin
TMessage(GetRecordPtr^).LParamHi := val;
end;
function __TMessage__Wrapper.getLParamHi : Word;
begin
result := TMessage(GetRecordPtr^).LParamHi;
end;
procedure __TMessage__Wrapper.setResultLo(const val : Word);
begin
TMessage(GetRecordPtr^).ResultLo := val;
end;
function __TMessage__Wrapper.getResultLo : Word;
begin
result := TMessage(GetRecordPtr^).ResultLo;
end;
procedure __TMessage__Wrapper.setResultHi(const val : Word);
begin
TMessage(GetRecordPtr^).ResultHi := val;
end;
function __TMessage__Wrapper.getResultHi : Word;
begin
result := TMessage(GetRecordPtr^).ResultHi;
end;
function __TMethod__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ____DrawSelection__Wrapper(const p0 : IDispatch);
var
__p0 : ^TRect;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
DrawSelection(__p0^);
end;

procedure ____SmartDrawSelection__Wrapper(const p0 : IDispatch);
var
__p0 : ^TRect;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
SmartDrawSelection(__p0^);
end;

procedure ____CheckRect__Wrapper(const p0 : IDispatch);
var
__p0 : ^TRect;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
CheckRect(__p0^);
end;

function ____SetClipping__Wrapper(p0 : TWInControl): IDispatch;
var
__result : TRect;
__wrapper : __TRect__Wrapper;
begin
__result := SetClipping(p0);
__wrapper := __TRect__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

function __TDCFormDesigner__IsDesignMsg__Wrapper(__Instance : TDCFormDesigner;
p0 : TControl;
const p1 : IDispatch): Boolean;
var
__p1 : ^TMessage;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := TDCFormDesigner(__Instance).IsDesignMsg(p0,__p1^);
end;

function __TDCFormDesigner__GetMethodName__Wrapper(__Instance : TDCFormDesigner;
const p0 : IDispatch): string;
var
__p0 : ^TMethod;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := TDCFormDesigner(__Instance).GetMethodName(__p0^);
end;

procedure __TDCOLEControl__CreateGUID__Wrapper(__Instance : TDCOLEControl;
p0 : TComponent;
const p1 : IDispatch);
var
__p1 : ^TGUID;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
TDCOLEControl(__Instance).CreateGUID(p0,__p1^);
end;

procedure __TDCOleControl___CreateGUID__Wrapper(__Instance : TDCOleControl_;
p0 : TComponent;
const p1 : IDispatch);
var
__p1 : ^TGUID;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
TDCOleControl_(__Instance).CreateGUID(p0,__p1^);
end;


type __TGUID__Wrapper__ = class(__TGUID__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TGUID__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTGUIDToVariant(var R : TGUID) : OleVariant;
var
__rw : __TGUID__Wrapper__;
begin
__rw := __TGUID__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTGUID(const V : OleVariant) : TGUID;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TGUID((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMessage__Wrapper__ = class(__TMessage__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMessage__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMessageToVariant(var R : TMessage) : OleVariant;
var
__rw : __TMessage__Wrapper__;
begin
__rw := __TMessage__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMessage(const V : OleVariant) : TMessage;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMessage((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMethod__Wrapper__ = class(__TMethod__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMethod__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMethodToVariant(var R : TMethod) : OleVariant;
var
__rw : __TMethod__Wrapper__;
begin
__rw := __TMethod__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMethod(const V : OleVariant) : TMethod;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMethod((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPoint__Wrapper__ = class(__TPoint__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPoint__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
var
__rw : __TPoint__Wrapper__;
begin
__rw := __TPoint__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPoint((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRect__Wrapper__ = class(__TRect__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRect__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
var
__rw : __TRect__Wrapper__;
begin
__rw := __TRect__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRect((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __DC__SetTComponentContainer__Caption(Instance : TObject; Params : PVariantArgList);
begin
TComponentContainer(Instance).Caption:=OleVariant(Params^[0]);
end;

function __DC__GetTComponentContainer__CaptionColor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TComponentContainer(Instance).CaptionColor;
end;

procedure __DC__SetTComponentContainer__CaptionColor(Instance : TObject; Params : PVariantArgList);
begin
TComponentContainer(Instance).CaptionColor:=OleVariant(Params^[0]);
end;

function __DC__GetTComponentContainer__Contained(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TComponentContainer(Instance).Contained);
end;

procedure __DC__SetTComponentContainer__Contained(Instance : TObject; Params : PVariantArgList);
begin
TComponentContainer(Instance).Contained:=TComponent(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTComponentContainer__Glyph(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TComponentContainer(Instance).Glyph);
end;

procedure __DC__SetTComponentContainer__Glyph(Instance : TObject; Params : PVariantArgList);
begin
TComponentContainer(Instance).Glyph:=TBitmap(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTComponentContainer__Handle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TComponentContainer(Instance).Handle;
end;

function __DC__GetTComponentContainer__left(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TComponentContainer(Instance).left;
end;

procedure __DC__SetTComponentContainer__left(Instance : TObject; Params : PVariantArgList);
begin
TComponentContainer(Instance).left:=OleVariant(Params^[0]);
end;

function __DC__GetTComponentContainer__top(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TComponentContainer(Instance).top;
end;

procedure __DC__SetTComponentContainer__top(Instance : TObject; Params : PVariantArgList);
begin
TComponentContainer(Instance).top:=OleVariant(Params^[0]);
end;

function __DC__GetTComponentContainer__Height(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TComponentContainer(Instance).Height;
end;

function __DC__GetTComponentContainer__Width(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TComponentContainer(Instance).Width;
end;

function __DC__GetTComponentContainer__Parent(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TComponentContainer(Instance).Parent);
end;

procedure __DC__SetTComponentContainer__Parent(Instance : TObject; Params : PVariantArgList);
begin
TComponentContainer(Instance).Parent:=TWInControl(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTComponentContainer__TopLeft(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TPoint__Wrapper;
begin
__wrapper := __TPoint__Wrapper.Create;
__wrapper.fR := TComponentContainer(Instance).TopLeft;
result := IUnknown(__wrapper) as IDispatch;
end;

procedure __DC__SetTComponentContainer__TopLeft(Instance : TObject; Params : PVariantArgList);
var
__idisp:IDispatch;
__iwrapper:IDCRecordWrapper;
begin
__idisp:=DCVarToInterface(OleVariant(Params^[0]));
if __idisp=nil then exit;
__idisp.QueryInterface(IDCRecordWrapper, __iwrapper);
TComponentContainer(Instance).TopLeft:=TPoint(__iwrapper.GetRecordPtr^);
end;

function __DC__GetTComponentContainer__ShowCaption(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TComponentContainer(Instance).ShowCaption;
end;

procedure __DC__SetTComponentContainer__ShowCaption(Instance : TObject; Params : PVariantArgList);
begin
TComponentContainer(Instance).ShowCaption:=OleVariant(Params^[0]);
end;

function __DC__GetTComponentContainerCaption__Text(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TComponentContainerCaption(Instance).Text;
end;

procedure __DC__SetTComponentContainerCaption__Text(Instance : TObject; Params : PVariantArgList);
begin
TComponentContainerCaption(Instance).Text:=OleVariant(Params^[0]);
end;

function __DC__GetTComponentContainerCaption__Color(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TComponentContainerCaption(Instance).Color;
end;

procedure __DC__SetTComponentContainerCaption__Color(Instance : TObject; Params : PVariantArgList);
begin
TComponentContainerCaption(Instance).Color:=OleVariant(Params^[0]);
end;

function __DC__GetTComponentContainerCaption__Handle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TComponentContainerCaption(Instance).Handle;
end;

function __DC__GetTComponentContainerCaption__Height(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TComponentContainerCaption(Instance).Height;
end;

function __DC__GetTComponentContainerCaption__Width(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TComponentContainerCaption(Instance).Width;
end;

function __DC__GetTComponentContainerSpeedButton__Canvas(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TComponentContainerSpeedButton(Instance).Canvas);
end;

function __DC__GetTControlHandles__ParentControl(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TControlHandles(Instance).ParentControl);
end;

procedure __DC__SetTControlHandles__ParentControl(Instance : TObject; Params : PVariantArgList);
begin
TControlHandles(Instance).ParentControl:=TControl(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTControlHandles__Active(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TControlHandles(Instance).Active;
end;

procedure __DC__SetTControlHandles__Active(Instance : TObject; Params : PVariantArgList);
begin
TControlHandles(Instance).Active:=OleVariant(Params^[0]);
end;

function __DC__GetTControlHandles__CanBeSized(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TControlHandles(Instance).CanBeSized;
end;

procedure __DC__SetTControlHandles__CanBeSized(Instance : TObject; Params : PVariantArgList);
begin
TControlHandles(Instance).CanBeSized:=OleVariant(Params^[0]);
end;

function __DC__GetTControlHandles__Visible(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TControlHandles(Instance).Visible;
end;

procedure __DC__SetTControlHandles__Visible(Instance : TObject; Params : PVariantArgList);
begin
TControlHandles(Instance).Visible:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomLiteDesigner__Active(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomLiteDesigner(Instance).Active;
end;

procedure __DC__SetTCustomLiteDesigner__Active(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).Active:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomLiteDesigner__AllowUndo(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomLiteDesigner(Instance).AllowUndo;
end;

procedure __DC__SetTCustomLiteDesigner__AllowUndo(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).AllowUndo:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomLiteDesigner__DataModuleWrapper(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomLiteDesigner(Instance).DataModuleWrapper);
end;

function __DC__GetTCustomLiteDesigner__Designer(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomLiteDesigner(Instance).Designer);
end;

function __DC__GetTCustomLiteDesigner__UseCaptionButton(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomLiteDesigner(Instance).UseCaptionButton;
end;

procedure __DC__SetTCustomLiteDesigner__UseCaptionButton(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).UseCaptionButton:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomLiteDesigner__CaptionGlyph(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomLiteDesigner(Instance).CaptionGlyph);
end;

procedure __DC__SetTCustomLiteDesigner__CaptionGlyph(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).CaptionGlyph:=TBitmap(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomLiteDesigner__Changes(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomLiteDesigner(Instance).Changes);
end;

function __DC__GetTCustomLiteDesigner__AllowedActions(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TAllowedActions;
begin
tmp := TCustomLiteDesigner(Instance).AllowedActions;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTCustomLiteDesigner__AllowedActions(Instance : TObject; Params : PVariantArgList);
var
  tmp : TAllowedActions;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TCustomLiteDesigner(Instance).AllowedActions:=tmp;
end;

function __DC__GetTCustomLiteDesigner__DesignedComponent(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomLiteDesigner(Instance).DesignedComponent);
end;

procedure __DC__SetTCustomLiteDesigner__DesignedComponent(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).DesignedComponent:=TComponent(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomLiteDesigner__HiddenProps(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomLiteDesigner(Instance).HiddenProps);
end;

procedure __DC__SetTCustomLiteDesigner__HiddenProps(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).HiddenProps:=TStrings(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomLiteDesigner__ReadOnly(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomLiteDesigner(Instance).ReadOnly;
end;

procedure __DC__SetTCustomLiteDesigner__ReadOnly(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).ReadOnly:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomLiteDesigner__ReadOnlyProps(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomLiteDesigner(Instance).ReadOnlyProps);
end;

procedure __DC__SetTCustomLiteDesigner__ReadOnlyProps(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).ReadOnlyProps:=TStrings(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomLiteDesigner__Options(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TFDoptions;
begin
tmp := TCustomLiteDesigner(Instance).Options;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTCustomLiteDesigner__Options(Instance : TObject; Params : PVariantArgList);
var
  tmp : TFDoptions;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TCustomLiteDesigner(Instance).Options:=tmp;
end;

function __DC__GetTCustomLiteDesigner__GridStepX(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomLiteDesigner(Instance).GridStepX;
end;

procedure __DC__SetTCustomLiteDesigner__GridStepX(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).GridStepX:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomLiteDesigner__GridStepY(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomLiteDesigner(Instance).GridStepY;
end;

procedure __DC__SetTCustomLiteDesigner__GridStepY(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).GridStepY:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomLiteDesigner__LockControls(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomLiteDesigner(Instance).LockControls;
end;

procedure __DC__SetTCustomLiteDesigner__LockControls(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).LockControls:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomLiteDesigner__LimitControl(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomLiteDesigner(Instance).LimitControl);
end;

procedure __DC__SetTCustomLiteDesigner__LimitControl(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).LimitControl:=TWInControl(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomLiteDesigner__LimitInfos(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomLiteDesigner(Instance).LimitInfos);
end;

procedure __DC__SetTCustomLiteDesigner__LimitInfos(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).LimitInfos:=TLimitInfos(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomLiteDesigner__PaletteOptions(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomLiteDesigner(Instance).PaletteOptions);
end;

procedure __DC__SetTCustomLiteDesigner__PaletteOptions(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).PaletteOptions:=TCompPaletteOptions(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomLiteDesigner__InspectorOptions(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomLiteDesigner(Instance).InspectorOptions);
end;

procedure __DC__SetTCustomLiteDesigner__InspectorOptions(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).InspectorOptions:=TInspOptions(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomLiteDesigner__PopupMenu(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomLiteDesigner(Instance).PopupMenu);
end;

procedure __DC__SetTCustomLiteDesigner__PopupMenu(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).PopupMenu:=TPopupMenu(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomLiteDesigner__ShowInspector(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomLiteDesigner(Instance).ShowInspector;
end;

procedure __DC__SetTCustomLiteDesigner__ShowInspector(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).ShowInspector:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomLiteDesigner__ShowComponents(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomLiteDesigner(Instance).ShowComponents;
end;

procedure __DC__SetTCustomLiteDesigner__ShowComponents(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).ShowComponents:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomLiteDesigner__ShowGrid(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomLiteDesigner(Instance).ShowGrid;
end;

procedure __DC__SetTCustomLiteDesigner__ShowGrid(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).ShowGrid:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomLiteDesigner__ShowCaptions(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomLiteDesigner(Instance).ShowCaptions;
end;

procedure __DC__SetTCustomLiteDesigner__ShowCaptions(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).ShowCaptions:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomLiteDesigner__ShowHints(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomLiteDesigner(Instance).ShowHints;
end;

procedure __DC__SetTCustomLiteDesigner__ShowHints(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).ShowHints:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomLiteDesigner__SnaptoGrid(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomLiteDesigner(Instance).SnaptoGrid;
end;

procedure __DC__SetTCustomLiteDesigner__SnaptoGrid(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).SnaptoGrid:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomLiteDesigner__NameIsReadOnly(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomLiteDesigner(Instance).NameIsReadOnly;
end;

procedure __DC__SetTCustomLiteDesigner__NameIsReadOnly(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).NameIsReadOnly:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomLiteDesigner__NeedRecreateWnd(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomLiteDesigner(Instance).NeedRecreateWnd;
end;

procedure __DC__SetTCustomLiteDesigner__NeedRecreateWnd(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).NeedRecreateWnd:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomLiteDesigner__CodeDesigner(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomLiteDesigner(Instance).CodeDesigner);
end;

procedure __DC__SetTCustomLiteDesigner__CodeDesigner(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).CodeDesigner:=TCodeDesigner(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomLiteDesigner__Scripter(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomLiteDesigner(Instance).Scripter);
end;

procedure __DC__SetTCustomLiteDesigner__Scripter(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).Scripter:=TDCSimpleScripter(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomLiteDesigner__StartHotKey(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomLiteDesigner(Instance).StartHotKey;
end;

procedure __DC__SetTCustomLiteDesigner__StartHotKey(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).StartHotKey:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomLiteDesigner__StopHotKey(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomLiteDesigner(Instance).StopHotKey;
end;

procedure __DC__SetTCustomLiteDesigner__StopHotKey(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).StopHotKey:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomLiteDesigner__ShowPalette(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomLiteDesigner(Instance).ShowPalette;
end;

procedure __DC__SetTCustomLiteDesigner__ShowPalette(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).ShowPalette:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomLiteDesigner__ShowSelf(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomLiteDesigner(Instance).ShowSelf;
end;

procedure __DC__SetTCustomLiteDesigner__ShowSelf(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).ShowSelf:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomLiteDesigner__ShowAlignPalette(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomLiteDesigner(Instance).ShowAlignPalette;
end;

procedure __DC__SetTCustomLiteDesigner__ShowAlignPalette(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).ShowAlignPalette:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomLiteDesigner__ToolsOnTop(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomLiteDesigner(Instance).ToolsOnTop;
end;

procedure __DC__SetTCustomLiteDesigner__ToolsOnTop(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).ToolsOnTop:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomLiteDesigner__UseDefaultMenu(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomLiteDesigner(Instance).UseDefaultMenu;
end;

procedure __DC__SetTCustomLiteDesigner__UseDefaultMenu(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).UseDefaultMenu:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomLiteDesigner__IsStored(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomLiteDesigner(Instance).IsStored;
end;

procedure __DC__SetTCustomLiteDesigner__IsStored(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).IsStored:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomLiteDesigner__UseAncestor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomLiteDesigner(Instance).UseAncestor;
end;

procedure __DC__SetTCustomLiteDesigner__UseAncestor(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).UseAncestor:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomLiteDesigner__GridColor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomLiteDesigner(Instance).GridColor;
end;

procedure __DC__SetTCustomLiteDesigner__GridColor(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).GridColor:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomLiteDesigner__UseGlobalOptions(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomLiteDesigner(Instance).UseGlobalOptions;
end;

procedure __DC__SetTCustomLiteDesigner__UseGlobalOptions(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).UseGlobalOptions:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomLiteDesigner__ChangesKey(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomLiteDesigner(Instance).ChangesKey;
end;

procedure __DC__SetTCustomLiteDesigner__ChangesKey(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).ChangesKey:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomLiteDesigner__StoreChanges(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomLiteDesigner(Instance).StoreChanges;
end;

procedure __DC__SetTCustomLiteDesigner__StoreChanges(Instance : TObject; Params : PVariantArgList);
begin
TCustomLiteDesigner(Instance).StoreChanges:=OleVariant(Params^[0]);
end;

function __DC__GetTDataModuleWrapper__DataModule(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDataModuleWrapper(Instance).DataModule);
end;

procedure __DC__SetTDataModuleWrapper__DataModule(Instance : TObject; Params : PVariantArgList);
begin
TDataModuleWrapper(Instance).DataModule:=TDataModule(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDCFormDesigner__ReadOnly(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCFormDesigner(Instance).ReadOnly;
end;

procedure __DC__SetTDCFormDesigner__ReadOnly(Instance : TObject; Params : PVariantArgList);
begin
TDCFormDesigner(Instance).ReadOnly:=OleVariant(Params^[0]);
end;

function __DC__GetTDCFormDesigner__WasChanged(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCFormDesigner(Instance).WasChanged;
end;

procedure __DC__SetTDCFormDesigner__WasChanged(Instance : TObject; Params : PVariantArgList);
begin
TDCFormDesigner(Instance).WasChanged:=OleVariant(Params^[0]);
end;

function __DC__GetTDCFormDesigner__Active(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCFormDesigner(Instance).Active;
end;

procedure __DC__SetTDCFormDesigner__Active(Instance : TObject; Params : PVariantArgList);
begin
TDCFormDesigner(Instance).Active:=OleVariant(Params^[0]);
end;

function __DC__GetTDCFormDesigner__Options(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TFDoptions;
begin
tmp := TDCFormDesigner(Instance).Options;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTDCFormDesigner__Options(Instance : TObject; Params : PVariantArgList);
var
  tmp : TFDoptions;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TDCFormDesigner(Instance).Options:=tmp;
end;

function __DC__GetTDCFormDesigner__RedoAvailable(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCFormDesigner(Instance).RedoAvailable;
end;

function __DC__GetTDCFormDesigner__SelectedComponents(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDCFormDesigner(Instance).SelectedComponents);
end;

procedure __DC__SetTDCFormDesigner__SelectedComponents(Instance : TObject; Params : PVariantArgList);
begin
TDCFormDesigner(Instance).SelectedComponents:=TList(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDCFormDesigner__UndoAvailable(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCFormDesigner(Instance).UndoAvailable;
end;

procedure __DC__SetTDCFormDesigner__UndoAvailable(Instance : TObject; Params : PVariantArgList);
begin
TDCFormDesigner(Instance).UndoAvailable:=OleVariant(Params^[0]);
end;

function __DC__GetTDCFormDesigner__CodeDesigner(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDCFormDesigner(Instance).CodeDesigner);
end;

procedure __DC__SetTDCFormDesigner__CodeDesigner(Instance : TObject; Params : PVariantArgList);
begin
TDCFormDesigner(Instance).CodeDesigner:=TCodeDesigner(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDCFormDesigner__GridStepX(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCFormDesigner(Instance).GridStepX;
end;

procedure __DC__SetTDCFormDesigner__GridStepX(Instance : TObject; Params : PVariantArgList);
begin
TDCFormDesigner(Instance).GridStepX:=OleVariant(Params^[0]);
end;

function __DC__GetTDCFormDesigner__GridStepY(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCFormDesigner(Instance).GridStepY;
end;

procedure __DC__SetTDCFormDesigner__GridStepY(Instance : TObject; Params : PVariantArgList);
begin
TDCFormDesigner(Instance).GridStepY:=OleVariant(Params^[0]);
end;

function __DC__GetTDCFormDesigner__HideOnClose(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCFormDesigner(Instance).HideOnClose;
end;

procedure __DC__SetTDCFormDesigner__HideOnClose(Instance : TObject; Params : PVariantArgList);
begin
TDCFormDesigner(Instance).HideOnClose:=OleVariant(Params^[0]);
end;

function __DC__GetTDCFormDesigner__LimitInfos(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDCFormDesigner(Instance).LimitInfos);
end;

procedure __DC__SetTDCFormDesigner__LimitInfos(Instance : TObject; Params : PVariantArgList);
begin
TDCFormDesigner(Instance).LimitInfos:=TLimitInfos(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDCFormDesigner__LockControls(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCFormDesigner(Instance).LockControls;
end;

procedure __DC__SetTDCFormDesigner__LockControls(Instance : TObject; Params : PVariantArgList);
begin
TDCFormDesigner(Instance).LockControls:=OleVariant(Params^[0]);
end;

function __DC__GetTDCFormDesigner__NameIsReadOnly(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCFormDesigner(Instance).NameIsReadOnly;
end;

procedure __DC__SetTDCFormDesigner__NameIsReadOnly(Instance : TObject; Params : PVariantArgList);
begin
TDCFormDesigner(Instance).NameIsReadOnly:=OleVariant(Params^[0]);
end;

function __DC__GetTDCFormDesigner__NeedRecreateWnd(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCFormDesigner(Instance).NeedRecreateWnd;
end;

procedure __DC__SetTDCFormDesigner__NeedRecreateWnd(Instance : TObject; Params : PVariantArgList);
begin
TDCFormDesigner(Instance).NeedRecreateWnd:=OleVariant(Params^[0]);
end;

function __DC__GetTDCFormDesigner__PopupMenu(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDCFormDesigner(Instance).PopupMenu);
end;

procedure __DC__SetTDCFormDesigner__PopupMenu(Instance : TObject; Params : PVariantArgList);
begin
TDCFormDesigner(Instance).PopupMenu:=TPopupMenu(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDCFormDesigner__ShowInspector(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCFormDesigner(Instance).ShowInspector;
end;

procedure __DC__SetTDCFormDesigner__ShowInspector(Instance : TObject; Params : PVariantArgList);
begin
TDCFormDesigner(Instance).ShowInspector:=OleVariant(Params^[0]);
end;

function __DC__GetTDCFormDesigner__CompFiler(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDCFormDesigner(Instance).CompFiler);
end;

function __DC__GetTDCFormDesigner__ShowGrid(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCFormDesigner(Instance).ShowGrid;
end;

procedure __DC__SetTDCFormDesigner__ShowGrid(Instance : TObject; Params : PVariantArgList);
begin
TDCFormDesigner(Instance).ShowGrid:=OleVariant(Params^[0]);
end;

function __DC__GetTDCFormDesigner__ShowCaptions(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCFormDesigner(Instance).ShowCaptions;
end;

procedure __DC__SetTDCFormDesigner__ShowCaptions(Instance : TObject; Params : PVariantArgList);
begin
TDCFormDesigner(Instance).ShowCaptions:=OleVariant(Params^[0]);
end;

function __DC__GetTDCFormDesigner__ShowComponents(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCFormDesigner(Instance).ShowComponents;
end;

procedure __DC__SetTDCFormDesigner__ShowComponents(Instance : TObject; Params : PVariantArgList);
begin
TDCFormDesigner(Instance).ShowComponents:=OleVariant(Params^[0]);
end;

function __DC__GetTDCFormDesigner__SnaptoGrid(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCFormDesigner(Instance).SnaptoGrid;
end;

procedure __DC__SetTDCFormDesigner__SnaptoGrid(Instance : TObject; Params : PVariantArgList);
begin
TDCFormDesigner(Instance).SnaptoGrid:=OleVariant(Params^[0]);
end;

function __DC__GetTDCFormDesigner__UndoLimit(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCFormDesigner(Instance).UndoLimit;
end;

procedure __DC__SetTDCFormDesigner__UndoLimit(Instance : TObject; Params : PVariantArgList);
begin
TDCFormDesigner(Instance).UndoLimit:=OleVariant(Params^[0]);
end;

function __DC__GetTDCFormDesigner__UseDefaultMenu(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCFormDesigner(Instance).UseDefaultMenu;
end;

procedure __DC__SetTDCFormDesigner__UseDefaultMenu(Instance : TObject; Params : PVariantArgList);
begin
TDCFormDesigner(Instance).UseDefaultMenu:=OleVariant(Params^[0]);
end;

function __DC__GetTDCFormDesigner__UseGlobalOptions(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCFormDesigner(Instance).UseGlobalOptions;
end;

procedure __DC__SetTDCFormDesigner__UseGlobalOptions(Instance : TObject; Params : PVariantArgList);
begin
TDCFormDesigner(Instance).UseGlobalOptions:=OleVariant(Params^[0]);
end;

function __DC__GetTDCFormDesigner__Scripter(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDCFormDesigner(Instance).Scripter);
end;

procedure __DC__SetTDCFormDesigner__Scripter(Instance : TObject; Params : PVariantArgList);
begin
TDCFormDesigner(Instance).Scripter:=TDCSimpleScripter(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDCFormDesigner__AllowedActions(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TAllowedActions;
begin
tmp := TDCFormDesigner(Instance).AllowedActions;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTDCFormDesigner__AllowedActions(Instance : TObject; Params : PVariantArgList);
var
  tmp : TAllowedActions;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TDCFormDesigner(Instance).AllowedActions:=tmp;
end;

function __DC__GetTDCFormDesigner__ReadOnlyProps(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDCFormDesigner(Instance).ReadOnlyProps);
end;

procedure __DC__SetTDCFormDesigner__ReadOnlyProps(Instance : TObject; Params : PVariantArgList);
begin
TDCFormDesigner(Instance).ReadOnlyProps:=TStrings(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDCFormDesigner__HiddenProps(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDCFormDesigner(Instance).HiddenProps);
end;

procedure __DC__SetTDCFormDesigner__HiddenProps(Instance : TObject; Params : PVariantArgList);
begin
TDCFormDesigner(Instance).HiddenProps:=TStrings(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDCFormDesigner__ShowHints(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCFormDesigner(Instance).ShowHints;
end;

procedure __DC__SetTDCFormDesigner__ShowHints(Instance : TObject; Params : PVariantArgList);
begin
TDCFormDesigner(Instance).ShowHints:=OleVariant(Params^[0]);
end;

function __DC__GetTDCFormDesigner__AllowUndo(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCFormDesigner(Instance).AllowUndo;
end;

procedure __DC__SetTDCFormDesigner__AllowUndo(Instance : TObject; Params : PVariantArgList);
begin
TDCFormDesigner(Instance).AllowUndo:=OleVariant(Params^[0]);
end;

function __DC__GetTDCFormDesigner__UseAncestor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCFormDesigner(Instance).UseAncestor;
end;

procedure __DC__SetTDCFormDesigner__UseAncestor(Instance : TObject; Params : PVariantArgList);
begin
TDCFormDesigner(Instance).UseAncestor:=OleVariant(Params^[0]);
end;

function __DC__GetTDCFormDesigner__GridColor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCFormDesigner(Instance).GridColor;
end;

procedure __DC__SetTDCFormDesigner__GridColor(Instance : TObject; Params : PVariantArgList);
begin
TDCFormDesigner(Instance).GridColor:=OleVariant(Params^[0]);
end;

function __DC__GetTDCLiteDesigner__AllowedActions(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TAllowedActions;
begin
tmp := TDCLiteDesigner(Instance).AllowedActions;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTDCLiteDesigner__AllowedActions(Instance : TObject; Params : PVariantArgList);
var
  tmp : TAllowedActions;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TDCLiteDesigner(Instance).AllowedActions:=tmp;
end;

function __DC__GetTDCLiteDesigner__AllowUndo(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCLiteDesigner(Instance).AllowUndo;
end;

procedure __DC__SetTDCLiteDesigner__AllowUndo(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).AllowUndo:=OleVariant(Params^[0]);
end;

function __DC__GetTDCLiteDesigner__DesignedComponent(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDCLiteDesigner(Instance).DesignedComponent);
end;

procedure __DC__SetTDCLiteDesigner__DesignedComponent(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).DesignedComponent:=TComponent(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDCLiteDesigner__HiddenProps(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDCLiteDesigner(Instance).HiddenProps);
end;

procedure __DC__SetTDCLiteDesigner__HiddenProps(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).HiddenProps:=TStrings(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDCLiteDesigner__ReadOnly(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCLiteDesigner(Instance).ReadOnly;
end;

procedure __DC__SetTDCLiteDesigner__ReadOnly(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).ReadOnly:=OleVariant(Params^[0]);
end;

function __DC__GetTDCLiteDesigner__ReadOnlyProps(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDCLiteDesigner(Instance).ReadOnlyProps);
end;

procedure __DC__SetTDCLiteDesigner__ReadOnlyProps(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).ReadOnlyProps:=TStrings(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDCLiteDesigner__Options(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TFDoptions;
begin
tmp := TDCLiteDesigner(Instance).Options;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTDCLiteDesigner__Options(Instance : TObject; Params : PVariantArgList);
var
  tmp : TFDoptions;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TDCLiteDesigner(Instance).Options:=tmp;
end;

function __DC__GetTDCLiteDesigner__GridStepX(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCLiteDesigner(Instance).GridStepX;
end;

procedure __DC__SetTDCLiteDesigner__GridStepX(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).GridStepX:=OleVariant(Params^[0]);
end;

function __DC__GetTDCLiteDesigner__GridStepY(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCLiteDesigner(Instance).GridStepY;
end;

procedure __DC__SetTDCLiteDesigner__GridStepY(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).GridStepY:=OleVariant(Params^[0]);
end;

function __DC__GetTDCLiteDesigner__LockControls(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCLiteDesigner(Instance).LockControls;
end;

procedure __DC__SetTDCLiteDesigner__LockControls(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).LockControls:=OleVariant(Params^[0]);
end;

function __DC__GetTDCLiteDesigner__LimitControl(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDCLiteDesigner(Instance).LimitControl);
end;

procedure __DC__SetTDCLiteDesigner__LimitControl(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).LimitControl:=TWInControl(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDCLiteDesigner__LimitInfos(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDCLiteDesigner(Instance).LimitInfos);
end;

procedure __DC__SetTDCLiteDesigner__LimitInfos(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).LimitInfos:=TLimitInfos(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDCLiteDesigner__PopupMenu(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDCLiteDesigner(Instance).PopupMenu);
end;

procedure __DC__SetTDCLiteDesigner__PopupMenu(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).PopupMenu:=TPopupMenu(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDCLiteDesigner__ShowInspector(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCLiteDesigner(Instance).ShowInspector;
end;

procedure __DC__SetTDCLiteDesigner__ShowInspector(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).ShowInspector:=OleVariant(Params^[0]);
end;

function __DC__GetTDCLiteDesigner__ShowComponents(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCLiteDesigner(Instance).ShowComponents;
end;

procedure __DC__SetTDCLiteDesigner__ShowComponents(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).ShowComponents:=OleVariant(Params^[0]);
end;

function __DC__GetTDCLiteDesigner__ShowGrid(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCLiteDesigner(Instance).ShowGrid;
end;

procedure __DC__SetTDCLiteDesigner__ShowGrid(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).ShowGrid:=OleVariant(Params^[0]);
end;

function __DC__GetTDCLiteDesigner__ShowCaptions(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCLiteDesigner(Instance).ShowCaptions;
end;

procedure __DC__SetTDCLiteDesigner__ShowCaptions(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).ShowCaptions:=OleVariant(Params^[0]);
end;

function __DC__GetTDCLiteDesigner__SnaptoGrid(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCLiteDesigner(Instance).SnaptoGrid;
end;

procedure __DC__SetTDCLiteDesigner__SnaptoGrid(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).SnaptoGrid:=OleVariant(Params^[0]);
end;

function __DC__GetTDCLiteDesigner__NameIsReadOnly(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCLiteDesigner(Instance).NameIsReadOnly;
end;

procedure __DC__SetTDCLiteDesigner__NameIsReadOnly(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).NameIsReadOnly:=OleVariant(Params^[0]);
end;

function __DC__GetTDCLiteDesigner__NeedRecreateWnd(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCLiteDesigner(Instance).NeedRecreateWnd;
end;

procedure __DC__SetTDCLiteDesigner__NeedRecreateWnd(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).NeedRecreateWnd:=OleVariant(Params^[0]);
end;

function __DC__GetTDCLiteDesigner__PaletteOptions(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDCLiteDesigner(Instance).PaletteOptions);
end;

procedure __DC__SetTDCLiteDesigner__PaletteOptions(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).PaletteOptions:=TCompPaletteOptions(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDCLiteDesigner__InspectorOptions(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDCLiteDesigner(Instance).InspectorOptions);
end;

procedure __DC__SetTDCLiteDesigner__InspectorOptions(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).InspectorOptions:=TInspOptions(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDCLiteDesigner__CodeDesigner(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDCLiteDesigner(Instance).CodeDesigner);
end;

procedure __DC__SetTDCLiteDesigner__CodeDesigner(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).CodeDesigner:=TCodeDesigner(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDCLiteDesigner__Scripter(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDCLiteDesigner(Instance).Scripter);
end;

procedure __DC__SetTDCLiteDesigner__Scripter(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).Scripter:=TDCSimpleScripter(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDCLiteDesigner__StartHotKey(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCLiteDesigner(Instance).StartHotKey;
end;

procedure __DC__SetTDCLiteDesigner__StartHotKey(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).StartHotKey:=OleVariant(Params^[0]);
end;

function __DC__GetTDCLiteDesigner__ShowHints(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCLiteDesigner(Instance).ShowHints;
end;

procedure __DC__SetTDCLiteDesigner__ShowHints(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).ShowHints:=OleVariant(Params^[0]);
end;

function __DC__GetTDCLiteDesigner__StopHotKey(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCLiteDesigner(Instance).StopHotKey;
end;

procedure __DC__SetTDCLiteDesigner__StopHotKey(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).StopHotKey:=OleVariant(Params^[0]);
end;

function __DC__GetTDCLiteDesigner__ShowPalette(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCLiteDesigner(Instance).ShowPalette;
end;

procedure __DC__SetTDCLiteDesigner__ShowPalette(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).ShowPalette:=OleVariant(Params^[0]);
end;

function __DC__GetTDCLiteDesigner__ShowSelf(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCLiteDesigner(Instance).ShowSelf;
end;

procedure __DC__SetTDCLiteDesigner__ShowSelf(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).ShowSelf:=OleVariant(Params^[0]);
end;

function __DC__GetTDCLiteDesigner__ShowAlignPalette(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCLiteDesigner(Instance).ShowAlignPalette;
end;

procedure __DC__SetTDCLiteDesigner__ShowAlignPalette(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).ShowAlignPalette:=OleVariant(Params^[0]);
end;

function __DC__GetTDCLiteDesigner__UseDefaultMenu(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCLiteDesigner(Instance).UseDefaultMenu;
end;

procedure __DC__SetTDCLiteDesigner__UseDefaultMenu(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).UseDefaultMenu:=OleVariant(Params^[0]);
end;

function __DC__GetTDCLiteDesigner__IsStored(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCLiteDesigner(Instance).IsStored;
end;

procedure __DC__SetTDCLiteDesigner__IsStored(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).IsStored:=OleVariant(Params^[0]);
end;

function __DC__GetTDCLiteDesigner__UseAncestor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCLiteDesigner(Instance).UseAncestor;
end;

procedure __DC__SetTDCLiteDesigner__UseAncestor(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).UseAncestor:=OleVariant(Params^[0]);
end;

function __DC__GetTDCLiteDesigner__GridColor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCLiteDesigner(Instance).GridColor;
end;

procedure __DC__SetTDCLiteDesigner__GridColor(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).GridColor:=OleVariant(Params^[0]);
end;

function __DC__GetTDCLiteDesigner__UseGlobalOptions(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCLiteDesigner(Instance).UseGlobalOptions;
end;

procedure __DC__SetTDCLiteDesigner__UseGlobalOptions(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).UseGlobalOptions:=OleVariant(Params^[0]);
end;

function __DC__GetTDCLiteDesigner__ChangesKey(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCLiteDesigner(Instance).ChangesKey;
end;

procedure __DC__SetTDCLiteDesigner__ChangesKey(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).ChangesKey:=OleVariant(Params^[0]);
end;

function __DC__GetTDCLiteDesigner__StoreChanges(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCLiteDesigner(Instance).StoreChanges;
end;

procedure __DC__SetTDCLiteDesigner__StoreChanges(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).StoreChanges:=OleVariant(Params^[0]);
end;

function __DC__GetTDCLiteDesigner__ToolsOnTop(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCLiteDesigner(Instance).ToolsOnTop;
end;

procedure __DC__SetTDCLiteDesigner__ToolsOnTop(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).ToolsOnTop:=OleVariant(Params^[0]);
end;

function __DC__GetTDCLiteDesigner__CaptionGlyph(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDCLiteDesigner(Instance).CaptionGlyph);
end;

procedure __DC__SetTDCLiteDesigner__CaptionGlyph(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).CaptionGlyph:=TBitmap(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDCLiteDesigner__UseCaptionButton(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCLiteDesigner(Instance).UseCaptionButton;
end;

procedure __DC__SetTDCLiteDesigner__UseCaptionButton(Instance : TObject; Params : PVariantArgList);
begin
TDCLiteDesigner(Instance).UseCaptionButton:=OleVariant(Params^[0]);
end;

function __DC__GetTDCOLEControl__OleControl(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDCOLEControl(Instance).OleControl);
end;

function __DC__GetTDCOLEControl__ControlGUID(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCOLEControl(Instance).ControlGUID;
end;

procedure __DC__SetTDCOLEControl__ControlGUID(Instance : TObject; Params : PVariantArgList);
begin
TDCOLEControl(Instance).ControlGUID:=OleVariant(Params^[0]);
end;

function __DC__GetTDCOLEControl__ControlClassID(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TGUID__Wrapper;
begin
__wrapper := __TGUID__Wrapper.Create;
__wrapper.fR := TDCOLEControl(Instance).ControlClassID;
result := IUnknown(__wrapper) as IDispatch;
end;

procedure __DC__SetTDCOLEControl__ControlClassID(Instance : TObject; Params : PVariantArgList);
var
__idisp:IDispatch;
__iwrapper:IDCRecordWrapper;
begin
__idisp:=DCVarToInterface(OleVariant(Params^[0]));
if __idisp=nil then exit;
__idisp.QueryInterface(IDCRecordWrapper, __iwrapper);
TDCOLEControl(Instance).ControlClassID:=TGUID(__iwrapper.GetRecordPtr^);
end;

function __DC__GetTLimitInfos__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TLimitInfos(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TComponentContainer,'Caption',nil,__DC__SetTComponentContainer__Caption);
RegisterProperty(TComponentContainer,'CaptionColor',__DC__GetTComponentContainer__CaptionColor,__DC__SetTComponentContainer__CaptionColor);
RegisterProperty(TComponentContainer,'Contained',__DC__GetTComponentContainer__Contained,__DC__SetTComponentContainer__Contained);
RegisterProperty(TComponentContainer,'Glyph',__DC__GetTComponentContainer__Glyph,__DC__SetTComponentContainer__Glyph);
RegisterProperty(TComponentContainer,'Handle',__DC__GetTComponentContainer__Handle,nil);
RegisterProperty(TComponentContainer,'left',__DC__GetTComponentContainer__left,__DC__SetTComponentContainer__left);
RegisterProperty(TComponentContainer,'top',__DC__GetTComponentContainer__top,__DC__SetTComponentContainer__top);
RegisterProperty(TComponentContainer,'Height',__DC__GetTComponentContainer__Height,nil);
RegisterProperty(TComponentContainer,'Width',__DC__GetTComponentContainer__Width,nil);
RegisterProperty(TComponentContainer,'Parent',__DC__GetTComponentContainer__Parent,__DC__SetTComponentContainer__Parent);
RegisterProperty(TComponentContainer,'TopLeft',__DC__GetTComponentContainer__TopLeft,__DC__SetTComponentContainer__TopLeft);
RegisterProperty(TComponentContainer,'ShowCaption',__DC__GetTComponentContainer__ShowCaption,__DC__SetTComponentContainer__ShowCaption);
RegisterProperty(TComponentContainerCaption,'Text',__DC__GetTComponentContainerCaption__Text,__DC__SetTComponentContainerCaption__Text);
RegisterProperty(TComponentContainerCaption,'Color',__DC__GetTComponentContainerCaption__Color,__DC__SetTComponentContainerCaption__Color);
RegisterProperty(TComponentContainerCaption,'Handle',__DC__GetTComponentContainerCaption__Handle,nil);
RegisterProperty(TComponentContainerCaption,'Height',__DC__GetTComponentContainerCaption__Height,nil);
RegisterProperty(TComponentContainerCaption,'Width',__DC__GetTComponentContainerCaption__Width,nil);
RegisterProperty(TComponentContainerSpeedButton,'Canvas',__DC__GetTComponentContainerSpeedButton__Canvas,nil);
RegisterProperty(TControlHandles,'ParentControl',__DC__GetTControlHandles__ParentControl,__DC__SetTControlHandles__ParentControl);
RegisterProperty(TControlHandles,'Active',__DC__GetTControlHandles__Active,__DC__SetTControlHandles__Active);
RegisterProperty(TControlHandles,'CanBeSized',__DC__GetTControlHandles__CanBeSized,__DC__SetTControlHandles__CanBeSized);
RegisterProperty(TControlHandles,'Visible',__DC__GetTControlHandles__Visible,__DC__SetTControlHandles__Visible);
RegisterProperty(TCustomLiteDesigner,'Active',__DC__GetTCustomLiteDesigner__Active,__DC__SetTCustomLiteDesigner__Active);
RegisterProperty(TCustomLiteDesigner,'AllowUndo',__DC__GetTCustomLiteDesigner__AllowUndo,__DC__SetTCustomLiteDesigner__AllowUndo);
RegisterProperty(TCustomLiteDesigner,'DataModuleWrapper',__DC__GetTCustomLiteDesigner__DataModuleWrapper,nil);
RegisterProperty(TCustomLiteDesigner,'Designer',__DC__GetTCustomLiteDesigner__Designer,nil);
RegisterProperty(TCustomLiteDesigner,'UseCaptionButton',__DC__GetTCustomLiteDesigner__UseCaptionButton,__DC__SetTCustomLiteDesigner__UseCaptionButton);
RegisterProperty(TCustomLiteDesigner,'CaptionGlyph',__DC__GetTCustomLiteDesigner__CaptionGlyph,__DC__SetTCustomLiteDesigner__CaptionGlyph);
RegisterProperty(TCustomLiteDesigner,'Changes',__DC__GetTCustomLiteDesigner__Changes,nil);
RegisterProperty(TCustomLiteDesigner,'AllowedActions',__DC__GetTCustomLiteDesigner__AllowedActions,__DC__SetTCustomLiteDesigner__AllowedActions);
RegisterProperty(TCustomLiteDesigner,'DesignedComponent',__DC__GetTCustomLiteDesigner__DesignedComponent,__DC__SetTCustomLiteDesigner__DesignedComponent);
RegisterProperty(TCustomLiteDesigner,'HiddenProps',__DC__GetTCustomLiteDesigner__HiddenProps,__DC__SetTCustomLiteDesigner__HiddenProps);
RegisterProperty(TCustomLiteDesigner,'ReadOnly',__DC__GetTCustomLiteDesigner__ReadOnly,__DC__SetTCustomLiteDesigner__ReadOnly);
RegisterProperty(TCustomLiteDesigner,'ReadOnlyProps',__DC__GetTCustomLiteDesigner__ReadOnlyProps,__DC__SetTCustomLiteDesigner__ReadOnlyProps);
RegisterProperty(TCustomLiteDesigner,'Options',__DC__GetTCustomLiteDesigner__Options,__DC__SetTCustomLiteDesigner__Options);
RegisterProperty(TCustomLiteDesigner,'GridStepX',__DC__GetTCustomLiteDesigner__GridStepX,__DC__SetTCustomLiteDesigner__GridStepX);
RegisterProperty(TCustomLiteDesigner,'GridStepY',__DC__GetTCustomLiteDesigner__GridStepY,__DC__SetTCustomLiteDesigner__GridStepY);
RegisterProperty(TCustomLiteDesigner,'LockControls',__DC__GetTCustomLiteDesigner__LockControls,__DC__SetTCustomLiteDesigner__LockControls);
RegisterProperty(TCustomLiteDesigner,'LimitControl',__DC__GetTCustomLiteDesigner__LimitControl,__DC__SetTCustomLiteDesigner__LimitControl);
RegisterProperty(TCustomLiteDesigner,'LimitInfos',__DC__GetTCustomLiteDesigner__LimitInfos,__DC__SetTCustomLiteDesigner__LimitInfos);
RegisterProperty(TCustomLiteDesigner,'PaletteOptions',__DC__GetTCustomLiteDesigner__PaletteOptions,__DC__SetTCustomLiteDesigner__PaletteOptions);
RegisterProperty(TCustomLiteDesigner,'InspectorOptions',__DC__GetTCustomLiteDesigner__InspectorOptions,__DC__SetTCustomLiteDesigner__InspectorOptions);
RegisterProperty(TCustomLiteDesigner,'PopupMenu',__DC__GetTCustomLiteDesigner__PopupMenu,__DC__SetTCustomLiteDesigner__PopupMenu);
RegisterProperty(TCustomLiteDesigner,'ShowInspector',__DC__GetTCustomLiteDesigner__ShowInspector,__DC__SetTCustomLiteDesigner__ShowInspector);
RegisterProperty(TCustomLiteDesigner,'ShowComponents',__DC__GetTCustomLiteDesigner__ShowComponents,__DC__SetTCustomLiteDesigner__ShowComponents);
RegisterProperty(TCustomLiteDesigner,'ShowGrid',__DC__GetTCustomLiteDesigner__ShowGrid,__DC__SetTCustomLiteDesigner__ShowGrid);
RegisterProperty(TCustomLiteDesigner,'ShowCaptions',__DC__GetTCustomLiteDesigner__ShowCaptions,__DC__SetTCustomLiteDesigner__ShowCaptions);
RegisterProperty(TCustomLiteDesigner,'ShowHints',__DC__GetTCustomLiteDesigner__ShowHints,__DC__SetTCustomLiteDesigner__ShowHints);
RegisterProperty(TCustomLiteDesigner,'SnaptoGrid',__DC__GetTCustomLiteDesigner__SnaptoGrid,__DC__SetTCustomLiteDesigner__SnaptoGrid);
RegisterProperty(TCustomLiteDesigner,'NameIsReadOnly',__DC__GetTCustomLiteDesigner__NameIsReadOnly,__DC__SetTCustomLiteDesigner__NameIsReadOnly);
RegisterProperty(TCustomLiteDesigner,'NeedRecreateWnd',__DC__GetTCustomLiteDesigner__NeedRecreateWnd,__DC__SetTCustomLiteDesigner__NeedRecreateWnd);
RegisterProperty(TCustomLiteDesigner,'CodeDesigner',__DC__GetTCustomLiteDesigner__CodeDesigner,__DC__SetTCustomLiteDesigner__CodeDesigner);
RegisterProperty(TCustomLiteDesigner,'Scripter',__DC__GetTCustomLiteDesigner__Scripter,__DC__SetTCustomLiteDesigner__Scripter);
RegisterProperty(TCustomLiteDesigner,'StartHotKey',__DC__GetTCustomLiteDesigner__StartHotKey,__DC__SetTCustomLiteDesigner__StartHotKey);
RegisterProperty(TCustomLiteDesigner,'StopHotKey',__DC__GetTCustomLiteDesigner__StopHotKey,__DC__SetTCustomLiteDesigner__StopHotKey);
RegisterProperty(TCustomLiteDesigner,'ShowPalette',__DC__GetTCustomLiteDesigner__ShowPalette,__DC__SetTCustomLiteDesigner__ShowPalette);
RegisterProperty(TCustomLiteDesigner,'ShowSelf',__DC__GetTCustomLiteDesigner__ShowSelf,__DC__SetTCustomLiteDesigner__ShowSelf);
RegisterProperty(TCustomLiteDesigner,'ShowAlignPalette',__DC__GetTCustomLiteDesigner__ShowAlignPalette,__DC__SetTCustomLiteDesigner__ShowAlignPalette);
RegisterProperty(TCustomLiteDesigner,'ToolsOnTop',__DC__GetTCustomLiteDesigner__ToolsOnTop,__DC__SetTCustomLiteDesigner__ToolsOnTop);
RegisterProperty(TCustomLiteDesigner,'UseDefaultMenu',__DC__GetTCustomLiteDesigner__UseDefaultMenu,__DC__SetTCustomLiteDesigner__UseDefaultMenu);
RegisterProperty(TCustomLiteDesigner,'IsStored',__DC__GetTCustomLiteDesigner__IsStored,__DC__SetTCustomLiteDesigner__IsStored);
RegisterProperty(TCustomLiteDesigner,'UseAncestor',__DC__GetTCustomLiteDesigner__UseAncestor,__DC__SetTCustomLiteDesigner__UseAncestor);
RegisterProperty(TCustomLiteDesigner,'GridColor',__DC__GetTCustomLiteDesigner__GridColor,__DC__SetTCustomLiteDesigner__GridColor);
RegisterProperty(TCustomLiteDesigner,'UseGlobalOptions',__DC__GetTCustomLiteDesigner__UseGlobalOptions,__DC__SetTCustomLiteDesigner__UseGlobalOptions);
RegisterProperty(TCustomLiteDesigner,'ChangesKey',__DC__GetTCustomLiteDesigner__ChangesKey,__DC__SetTCustomLiteDesigner__ChangesKey);
RegisterProperty(TCustomLiteDesigner,'StoreChanges',__DC__GetTCustomLiteDesigner__StoreChanges,__DC__SetTCustomLiteDesigner__StoreChanges);
RegisterProperty(TDataModuleWrapper,'DataModule',__DC__GetTDataModuleWrapper__DataModule,__DC__SetTDataModuleWrapper__DataModule);
RegisterProperty(TDCFormDesigner,'ReadOnly',__DC__GetTDCFormDesigner__ReadOnly,__DC__SetTDCFormDesigner__ReadOnly);
RegisterProperty(TDCFormDesigner,'WasChanged',__DC__GetTDCFormDesigner__WasChanged,__DC__SetTDCFormDesigner__WasChanged);
RegisterProperty(TDCFormDesigner,'Active',__DC__GetTDCFormDesigner__Active,__DC__SetTDCFormDesigner__Active);
RegisterProperty(TDCFormDesigner,'Options',__DC__GetTDCFormDesigner__Options,__DC__SetTDCFormDesigner__Options);
RegisterProperty(TDCFormDesigner,'RedoAvailable',__DC__GetTDCFormDesigner__RedoAvailable,nil);
RegisterProperty(TDCFormDesigner,'SelectedComponents',__DC__GetTDCFormDesigner__SelectedComponents,__DC__SetTDCFormDesigner__SelectedComponents);
RegisterProperty(TDCFormDesigner,'UndoAvailable',__DC__GetTDCFormDesigner__UndoAvailable,__DC__SetTDCFormDesigner__UndoAvailable);
RegisterProperty(TDCFormDesigner,'CodeDesigner',__DC__GetTDCFormDesigner__CodeDesigner,__DC__SetTDCFormDesigner__CodeDesigner);
RegisterProperty(TDCFormDesigner,'GridStepX',__DC__GetTDCFormDesigner__GridStepX,__DC__SetTDCFormDesigner__GridStepX);
RegisterProperty(TDCFormDesigner,'GridStepY',__DC__GetTDCFormDesigner__GridStepY,__DC__SetTDCFormDesigner__GridStepY);
RegisterProperty(TDCFormDesigner,'HideOnClose',__DC__GetTDCFormDesigner__HideOnClose,__DC__SetTDCFormDesigner__HideOnClose);
RegisterProperty(TDCFormDesigner,'LimitInfos',__DC__GetTDCFormDesigner__LimitInfos,__DC__SetTDCFormDesigner__LimitInfos);
RegisterProperty(TDCFormDesigner,'LockControls',__DC__GetTDCFormDesigner__LockControls,__DC__SetTDCFormDesigner__LockControls);
RegisterProperty(TDCFormDesigner,'NameIsReadOnly',__DC__GetTDCFormDesigner__NameIsReadOnly,__DC__SetTDCFormDesigner__NameIsReadOnly);
RegisterProperty(TDCFormDesigner,'NeedRecreateWnd',__DC__GetTDCFormDesigner__NeedRecreateWnd,__DC__SetTDCFormDesigner__NeedRecreateWnd);
RegisterProperty(TDCFormDesigner,'PopupMenu',__DC__GetTDCFormDesigner__PopupMenu,__DC__SetTDCFormDesigner__PopupMenu);
RegisterProperty(TDCFormDesigner,'ShowInspector',__DC__GetTDCFormDesigner__ShowInspector,__DC__SetTDCFormDesigner__ShowInspector);
RegisterProperty(TDCFormDesigner,'CompFiler',__DC__GetTDCFormDesigner__CompFiler,nil);
RegisterProperty(TDCFormDesigner,'ShowGrid',__DC__GetTDCFormDesigner__ShowGrid,__DC__SetTDCFormDesigner__ShowGrid);
RegisterProperty(TDCFormDesigner,'ShowCaptions',__DC__GetTDCFormDesigner__ShowCaptions,__DC__SetTDCFormDesigner__ShowCaptions);
RegisterProperty(TDCFormDesigner,'ShowComponents',__DC__GetTDCFormDesigner__ShowComponents,__DC__SetTDCFormDesigner__ShowComponents);
RegisterProperty(TDCFormDesigner,'SnaptoGrid',__DC__GetTDCFormDesigner__SnaptoGrid,__DC__SetTDCFormDesigner__SnaptoGrid);
RegisterProperty(TDCFormDesigner,'UndoLimit',__DC__GetTDCFormDesigner__UndoLimit,__DC__SetTDCFormDesigner__UndoLimit);
RegisterProperty(TDCFormDesigner,'UseDefaultMenu',__DC__GetTDCFormDesigner__UseDefaultMenu,__DC__SetTDCFormDesigner__UseDefaultMenu);
RegisterProperty(TDCFormDesigner,'UseGlobalOptions',__DC__GetTDCFormDesigner__UseGlobalOptions,__DC__SetTDCFormDesigner__UseGlobalOptions);
RegisterProperty(TDCFormDesigner,'Scripter',__DC__GetTDCFormDesigner__Scripter,__DC__SetTDCFormDesigner__Scripter);
RegisterProperty(TDCFormDesigner,'AllowedActions',__DC__GetTDCFormDesigner__AllowedActions,__DC__SetTDCFormDesigner__AllowedActions);
RegisterProperty(TDCFormDesigner,'ReadOnlyProps',__DC__GetTDCFormDesigner__ReadOnlyProps,__DC__SetTDCFormDesigner__ReadOnlyProps);
RegisterProperty(TDCFormDesigner,'HiddenProps',__DC__GetTDCFormDesigner__HiddenProps,__DC__SetTDCFormDesigner__HiddenProps);
RegisterProperty(TDCFormDesigner,'ShowHints',__DC__GetTDCFormDesigner__ShowHints,__DC__SetTDCFormDesigner__ShowHints);
RegisterProperty(TDCFormDesigner,'AllowUndo',__DC__GetTDCFormDesigner__AllowUndo,__DC__SetTDCFormDesigner__AllowUndo);
RegisterProperty(TDCFormDesigner,'UseAncestor',__DC__GetTDCFormDesigner__UseAncestor,__DC__SetTDCFormDesigner__UseAncestor);
RegisterProperty(TDCFormDesigner,'GridColor',__DC__GetTDCFormDesigner__GridColor,__DC__SetTDCFormDesigner__GridColor);
RegisterProperty(TDCLiteDesigner,'AllowedActions',__DC__GetTDCLiteDesigner__AllowedActions,__DC__SetTDCLiteDesigner__AllowedActions);
RegisterProperty(TDCLiteDesigner,'AllowUndo',__DC__GetTDCLiteDesigner__AllowUndo,__DC__SetTDCLiteDesigner__AllowUndo);
RegisterProperty(TDCLiteDesigner,'DesignedComponent',__DC__GetTDCLiteDesigner__DesignedComponent,__DC__SetTDCLiteDesigner__DesignedComponent);
RegisterProperty(TDCLiteDesigner,'HiddenProps',__DC__GetTDCLiteDesigner__HiddenProps,__DC__SetTDCLiteDesigner__HiddenProps);
RegisterProperty(TDCLiteDesigner,'ReadOnly',__DC__GetTDCLiteDesigner__ReadOnly,__DC__SetTDCLiteDesigner__ReadOnly);
RegisterProperty(TDCLiteDesigner,'ReadOnlyProps',__DC__GetTDCLiteDesigner__ReadOnlyProps,__DC__SetTDCLiteDesigner__ReadOnlyProps);
RegisterProperty(TDCLiteDesigner,'Options',__DC__GetTDCLiteDesigner__Options,__DC__SetTDCLiteDesigner__Options);
RegisterProperty(TDCLiteDesigner,'GridStepX',__DC__GetTDCLiteDesigner__GridStepX,__DC__SetTDCLiteDesigner__GridStepX);
RegisterProperty(TDCLiteDesigner,'GridStepY',__DC__GetTDCLiteDesigner__GridStepY,__DC__SetTDCLiteDesigner__GridStepY);
RegisterProperty(TDCLiteDesigner,'LockControls',__DC__GetTDCLiteDesigner__LockControls,__DC__SetTDCLiteDesigner__LockControls);
RegisterProperty(TDCLiteDesigner,'LimitControl',__DC__GetTDCLiteDesigner__LimitControl,__DC__SetTDCLiteDesigner__LimitControl);
RegisterProperty(TDCLiteDesigner,'LimitInfos',__DC__GetTDCLiteDesigner__LimitInfos,__DC__SetTDCLiteDesigner__LimitInfos);
RegisterProperty(TDCLiteDesigner,'PopupMenu',__DC__GetTDCLiteDesigner__PopupMenu,__DC__SetTDCLiteDesigner__PopupMenu);
RegisterProperty(TDCLiteDesigner,'ShowInspector',__DC__GetTDCLiteDesigner__ShowInspector,__DC__SetTDCLiteDesigner__ShowInspector);
RegisterProperty(TDCLiteDesigner,'ShowComponents',__DC__GetTDCLiteDesigner__ShowComponents,__DC__SetTDCLiteDesigner__ShowComponents);
RegisterProperty(TDCLiteDesigner,'ShowGrid',__DC__GetTDCLiteDesigner__ShowGrid,__DC__SetTDCLiteDesigner__ShowGrid);
RegisterProperty(TDCLiteDesigner,'ShowCaptions',__DC__GetTDCLiteDesigner__ShowCaptions,__DC__SetTDCLiteDesigner__ShowCaptions);
RegisterProperty(TDCLiteDesigner,'SnaptoGrid',__DC__GetTDCLiteDesigner__SnaptoGrid,__DC__SetTDCLiteDesigner__SnaptoGrid);
RegisterProperty(TDCLiteDesigner,'NameIsReadOnly',__DC__GetTDCLiteDesigner__NameIsReadOnly,__DC__SetTDCLiteDesigner__NameIsReadOnly);
RegisterProperty(TDCLiteDesigner,'NeedRecreateWnd',__DC__GetTDCLiteDesigner__NeedRecreateWnd,__DC__SetTDCLiteDesigner__NeedRecreateWnd);
RegisterProperty(TDCLiteDesigner,'PaletteOptions',__DC__GetTDCLiteDesigner__PaletteOptions,__DC__SetTDCLiteDesigner__PaletteOptions);
RegisterProperty(TDCLiteDesigner,'InspectorOptions',__DC__GetTDCLiteDesigner__InspectorOptions,__DC__SetTDCLiteDesigner__InspectorOptions);
RegisterProperty(TDCLiteDesigner,'CodeDesigner',__DC__GetTDCLiteDesigner__CodeDesigner,__DC__SetTDCLiteDesigner__CodeDesigner);
RegisterProperty(TDCLiteDesigner,'Scripter',__DC__GetTDCLiteDesigner__Scripter,__DC__SetTDCLiteDesigner__Scripter);
RegisterProperty(TDCLiteDesigner,'StartHotKey',__DC__GetTDCLiteDesigner__StartHotKey,__DC__SetTDCLiteDesigner__StartHotKey);
RegisterProperty(TDCLiteDesigner,'ShowHints',__DC__GetTDCLiteDesigner__ShowHints,__DC__SetTDCLiteDesigner__ShowHints);
RegisterProperty(TDCLiteDesigner,'StopHotKey',__DC__GetTDCLiteDesigner__StopHotKey,__DC__SetTDCLiteDesigner__StopHotKey);
RegisterProperty(TDCLiteDesigner,'ShowPalette',__DC__GetTDCLiteDesigner__ShowPalette,__DC__SetTDCLiteDesigner__ShowPalette);
RegisterProperty(TDCLiteDesigner,'ShowSelf',__DC__GetTDCLiteDesigner__ShowSelf,__DC__SetTDCLiteDesigner__ShowSelf);
RegisterProperty(TDCLiteDesigner,'ShowAlignPalette',__DC__GetTDCLiteDesigner__ShowAlignPalette,__DC__SetTDCLiteDesigner__ShowAlignPalette);
RegisterProperty(TDCLiteDesigner,'UseDefaultMenu',__DC__GetTDCLiteDesigner__UseDefaultMenu,__DC__SetTDCLiteDesigner__UseDefaultMenu);
RegisterProperty(TDCLiteDesigner,'IsStored',__DC__GetTDCLiteDesigner__IsStored,__DC__SetTDCLiteDesigner__IsStored);
RegisterProperty(TDCLiteDesigner,'UseAncestor',__DC__GetTDCLiteDesigner__UseAncestor,__DC__SetTDCLiteDesigner__UseAncestor);
RegisterProperty(TDCLiteDesigner,'GridColor',__DC__GetTDCLiteDesigner__GridColor,__DC__SetTDCLiteDesigner__GridColor);
RegisterProperty(TDCLiteDesigner,'UseGlobalOptions',__DC__GetTDCLiteDesigner__UseGlobalOptions,__DC__SetTDCLiteDesigner__UseGlobalOptions);
RegisterProperty(TDCLiteDesigner,'ChangesKey',__DC__GetTDCLiteDesigner__ChangesKey,__DC__SetTDCLiteDesigner__ChangesKey);
RegisterProperty(TDCLiteDesigner,'StoreChanges',__DC__GetTDCLiteDesigner__StoreChanges,__DC__SetTDCLiteDesigner__StoreChanges);
RegisterProperty(TDCLiteDesigner,'ToolsOnTop',__DC__GetTDCLiteDesigner__ToolsOnTop,__DC__SetTDCLiteDesigner__ToolsOnTop);
RegisterProperty(TDCLiteDesigner,'CaptionGlyph',__DC__GetTDCLiteDesigner__CaptionGlyph,__DC__SetTDCLiteDesigner__CaptionGlyph);
RegisterProperty(TDCLiteDesigner,'UseCaptionButton',__DC__GetTDCLiteDesigner__UseCaptionButton,__DC__SetTDCLiteDesigner__UseCaptionButton);
RegisterProperty(TDCOLEControl,'OleControl',__DC__GetTDCOLEControl__OleControl,nil);
RegisterProperty(TDCOLEControl,'ControlGUID',__DC__GetTDCOLEControl__ControlGUID,__DC__SetTDCOLEControl__ControlGUID);
RegisterProperty(TDCOLEControl,'ControlClassID',__DC__GetTDCOLEControl__ControlClassID,__DC__SetTDCOLEControl__ControlClassID);
RegisterIndexedProperty(TLimitInfos,'Items',1,True,__DC__GetTLimitInfos__Items,nil);
end;

function __DC__Getdcfdes__SaveDesignedFormsAsText(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := dcfdes.SaveDesignedFormsAsText;
end;

procedure __DC__Setdcfdes__SaveDesignedFormsAsText(Instance : TObject; Params : PVariantArgList);
begin
dcfdes.SaveDesignedFormsAsText:=OleVariant(Params^[0]);
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('SaveDesignedFormsAsText',__DC__Getdcfdes__SaveDesignedFormsAsText,__DC__Setdcfdes__SaveDesignedFormsAsText));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..30] of string = (
'CM_ALLLOADED'
,'HandleSize'
,'hpNone'
,'hpFirst'
,'hpTopLeft'
,'hpTop'
,'hpTopRight'
,'hpLeft'
,'hpRight'
,'hpBottomLeft'
,'hpBottom'
,'hpBottomRight'
,'hpLast'
,'smActive'
,'smInActive'
,'smGrayed'
,'smInvisible'
,'fdAllowDelete'
,'fdAllowInsert'
,'atSelect'
,'atDelete'
,'atInsertInto'
,'atMove'
,'atResize'
,'atShow'
,'atEdit'
,'dopChangePos'
,'dopDelete'
,'dopInsert'
,'ContainerSize'
,'AllActionsAllowed'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,CM_ALLLOADED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,HandleSize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,hpNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,hpFirst));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,hpTopLeft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,hpTop));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,hpTopRight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,hpLeft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,hpRight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,hpBottomLeft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,hpBottom));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,hpBottomRight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,hpLast));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,smActive));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,smInActive));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,smGrayed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,smInvisible));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,fdAllowDelete));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,fdAllowInsert));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,atSelect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,atDelete));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,atInsertInto));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,atMove));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,atResize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,atShow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,atEdit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,dopChangePos));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,dopDelete));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,dopInsert));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,ContainerSize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,VarFromSet(AllActionsAllowed, sizeof(AllActionsAllowed))));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..18] of TClass = (
TComponentContainer,
TComponentContainerCaption,
TComponentContainerSpeedButton,
TControlHandles,
TCustomLiteDesigner,
TDataModuleWrapper,
TDCChangesStore,
TDCFormDesigner,
TDCLiteDesigner,
TDCLiteDesignerOptions,
TDCOLEControl,
TDCOleControl_,
TDesignerOptions,
TEventInfo,
TInspOptions,
TLimitInfoItem,
TLimitInfos,
TOLEEventDispatch,
TUndoInfo
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..13] of string = (
'AddDataModuleWrapper'
,'RemoveDataModuleWrapper'
,'AlignControls'
,'SizeControls'
,'DrawSelection'
,'SmartDrawSelection'
,'CheckRect'
,'SetClipping'
,'RemoveClipping'
,'CopyControls'
,'CenterDesignedForm'
,'DesignerGetVerbState'
,'GlobalDesignerOptions'
,'GlobalDreamDesignerOptions'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(TDataModule),
TypeInfo(TCustomForm)],Addr(AddDataModuleWrapper),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(TDataModule)],Addr(RemoveDataModuleWrapper),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T2),[
TypeInfo(TList),
TypeInfo(TAlignControls),
TypeInfo(TAlignControls)],Addr(AlignControls),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T3),[
TypeInfo(TList),
TypeInfo(Integer),
TypeInfo(Integer)],Addr(SizeControls),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T4),[
TypeInfo(IDispatch)],Addr(____DrawSelection__Wrapper),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T5),[
TypeInfo(IDispatch)],Addr(____SmartDrawSelection__Wrapper),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T6),[
TypeInfo(IDispatch)],Addr(____CheckRect__Wrapper),cRegister);

RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T7),[
TypeInfo(TWInControl),TypeInfo(IDispatch)],Addr(____SetClipping__Wrapper),cRegister);

RegisterProc(nil,MethodNames[8],mtProc,TypeInfo(_T8),NoParams,Addr(RemoveClipping),cRegister);

RegisterProc(nil,MethodNames[9],mtProc,TypeInfo(_T9),[
TypeInfo(TList),
TypeInfo(TList)],Addr(CopyControls),cRegister);

RegisterProc(nil,MethodNames[10],mtProc,TypeInfo(_T10),[
TypeInfo(TCustomForm),
TypeInfo(string)],Addr(CenterDesignedForm),cRegister);

RegisterProc(nil,MethodNames[11],mtProc,TypeInfo(_T11),[
TypeInfo(TVerbStates)],Addr(DesignerGetVerbState),cRegister);

RegisterProc(nil,MethodNames[12],mtProc,TypeInfo(_T13),[TypeInfo(TDesignerOptions)],Addr(GlobalDesignerOptions),cRegister);

RegisterProc(nil,MethodNames[13],mtProc,TypeInfo(_T14),[TypeInfo(TDCLiteDesignerOptions)],Addr(GlobalDreamDesignerOptions),cRegister);

//RegRegisterMethod(TComponentContainer,'Paint',TypeInfo(_T16),NoParams, pointer(0));
RegRegisterMethod(TComponentContainer,'Paint',TypeInfo(_T16),NoParams,  getVMTProcAddr('TComponentContainer','Paint',0));


//RegRegisterMethod(TComponentContainer,'SetContained',TypeInfo(_T17),[TypeInfo(TComponent)], pointer(4));
RegRegisterMethod(TComponentContainer,'SetContained',TypeInfo(_T17),[TypeInfo(TComponent)],  getVMTProcAddr('TComponentContainer','SetContained',4));


//RegRegisterMethod(TComponentContainer,'SetParent',TypeInfo(_T18),[TypeInfo(TWInControl)], pointer(8));
RegRegisterMethod(TComponentContainer,'SetParent',TypeInfo(_T18),[TypeInfo(TWInControl)],  getVMTProcAddr('TComponentContainer','SetParent',8));


RegisterProc(TComponentContainer,'Create',mtConstructor,TypeInfo(_T19),NoParams,Addr(TComponentContainer.Create),cRegister);

RegRegisterMethod(TComponentContainer,'DrawHandles',TypeInfo(_T20),[
TypeInfo(Boolean)],Addr(TComponentContainer.DrawHandles));

RegRegisterMethod(TComponentContainer,'ShowHandles',TypeInfo(_T21),NoParams,Addr(TComponentContainer.ShowHandles));

RegRegisterMethod(TComponentContainer,'HideHandles',TypeInfo(_T22),NoParams,Addr(TComponentContainer.HideHandles));

RegRegisterMethod(TComponentContainer,'GetCaptionColor',TypeInfo(_T23),[TypeInfo(TColor)],Addr(TComponentContainer.GetCaptionColor));

RegRegisterMethod(TComponentContainer,'SetCaptionColor',TypeInfo(_T24),[
TypeInfo(TColor)],Addr(TComponentContainer.SetCaptionColor));

RegRegisterMethod(TComponentContainer,'Show',TypeInfo(_T25),NoParams,Addr(TComponentContainer.Show));

//RegRegisterMethod(TComponentContainerCaption,'Paint',TypeInfo(_T26),NoParams, pointer(0));
RegRegisterMethod(TComponentContainerCaption,'Paint',TypeInfo(_T26),NoParams,  getVMTProcAddr('TComponentContainerCaption','Paint',0));


RegisterProc(TComponentContainerCaption,'Create',mtConstructor,TypeInfo(_T27),NoParams,Addr(TComponentContainerCaption.Create),cRegister);

RegRegisterMethod(TControlHandles,'ResetPosition',TypeInfo(_T28),NoParams,Addr(TControlHandles.ResetPosition));

RegRegisterMethod(TControlHandles,'IsHandleWindow',TypeInfo(_T29),[
TypeInfo(HWND),TypeInfo(Boolean)],Addr(TControlHandles.IsHandleWindow));

RegRegisterMethod(TControlHandles,'Update',TypeInfo(_T30),NoParams,Addr(TControlHandles.Update));

RegRegisterMethod(TControlHandles,'Show',TypeInfo(_T31),NoParams,Addr(TControlHandles.Show));

RegRegisterMethod(TControlHandles,'FinishSizing',TypeInfo(_T32),NoParams,Addr(TControlHandles.FinishSizing));

//RegRegisterMethod(TCustomLiteDesigner,'SelectionChanged',TypeInfo(_T33),[TypeInfo(TObject)], pointer(48));
RegRegisterMethod(TCustomLiteDesigner,'SelectionChanged',TypeInfo(_T33),[TypeInfo(TObject)],  getVMTProcAddr('TCustomLiteDesigner','SelectionChanged',48));


//RegRegisterMethod(TCustomLiteDesigner,'SetActive',TypeInfo(_T34),[TypeInfo(Boolean)], pointer(52));
RegRegisterMethod(TCustomLiteDesigner,'SetActive',TypeInfo(_T34),[TypeInfo(Boolean)],  getVMTProcAddr('TCustomLiteDesigner','SetActive',52));


//RegRegisterMethod(TCustomLiteDesigner,'SaveChanges',TypeInfo(_T35),NoParams, pointer(56));
RegRegisterMethod(TCustomLiteDesigner,'SaveChanges',TypeInfo(_T35),NoParams,  getVMTProcAddr('TCustomLiteDesigner','SaveChanges',56));


//RegRegisterMethod(TCustomLiteDesigner,'LoadChanges',TypeInfo(_T36),NoParams, pointer(60));
RegRegisterMethod(TCustomLiteDesigner,'LoadChanges',TypeInfo(_T36),NoParams,  getVMTProcAddr('TCustomLiteDesigner','LoadChanges',60));


//RegRegisterMethod(TCustomLiteDesigner,'ActiveChanged',TypeInfo(_T37),[TypeInfo(TObject)], pointer(64));
RegRegisterMethod(TCustomLiteDesigner,'ActiveChanged',TypeInfo(_T37),[TypeInfo(TObject)],  getVMTProcAddr('TCustomLiteDesigner','ActiveChanged',64));


RegRegisterMethod(TCustomLiteDesigner,'LoadFromFile',TypeInfo(_T40),[
TypeInfo(TComponent),
TypeInfo(TFileName)],Addr(TCustomLiteDesigner.LoadFromFile));

RegRegisterMethod(TCustomLiteDesigner,'LoadFromStream',TypeInfo(_T41),[
TypeInfo(TComponent),
TypeInfo(TStream)],Addr(TCustomLiteDesigner.LoadFromStream));

RegRegisterMethod(TCustomLiteDesigner,'LoadFromStrings',TypeInfo(_T42),[
TypeInfo(TComponent),
TypeInfo(TStrings),TypeInfo(string)],Addr(TCustomLiteDesigner.LoadFromStrings));

RegRegisterMethod(TCustomLiteDesigner,'SaveToFile',TypeInfo(_T43),[
TypeInfo(TFileName)],Addr(TCustomLiteDesigner.SaveToFile));

RegRegisterMethod(TCustomLiteDesigner,'SaveToStream',TypeInfo(_T44),[
TypeInfo(TStream)],Addr(TCustomLiteDesigner.SaveToStream));

RegRegisterMethod(TCustomLiteDesigner,'SaveToStrings',TypeInfo(_T45),[
TypeInfo(TStrings)],Addr(TCustomLiteDesigner.SaveToStrings));

RegRegisterMethod(TCustomLiteDesigner,'SaveComponentToStream',TypeInfo(_T46),[
TypeInfo(TComponent),
TypeInfo(TStream)],Addr(TCustomLiteDesigner.SaveComponentToStream));

RegRegisterMethod(TCustomLiteDesigner,'LoadComponentFromStream',TypeInfo(_T47),[
TypeInfo(TComponent),
TypeInfo(TStream)],Addr(TCustomLiteDesigner.LoadComponentFromStream));

RegRegisterMethod(TCustomLiteDesigner,'CreateComponentFromStream',TypeInfo(_T48),[
TypeInfo(TStream),
TypeInfo(TComponent),TypeInfo(TComponent)],Addr(TCustomLiteDesigner.CreateComponentFromStream));

RegRegisterMethod(TCustomLiteDesigner,'CreateComponentFromFile',TypeInfo(_T49),[
TypeInfo(TFileName),
TypeInfo(TComponent),TypeInfo(TComponent)],Addr(TCustomLiteDesigner.CreateComponentFromFile));

RegRegisterMethod(TCustomLiteDesigner,'SaveComponentToFile',TypeInfo(_T50),[
TypeInfo(TComponent),
TypeInfo(TFileName)],Addr(TCustomLiteDesigner.SaveComponentToFile));

RegRegisterMethod(TCustomLiteDesigner,'LoadComponentFromFile',TypeInfo(_T51),[
TypeInfo(TComponent),
TypeInfo(TFileName)],Addr(TCustomLiteDesigner.LoadComponentFromFile));

RegRegisterMethod(TCustomLiteDesigner,'AddUsedModule',TypeInfo(_T52),[
TypeInfo(TComponent)],Addr(TCustomLiteDesigner.AddUsedModule));

RegRegisterMethod(TCustomLiteDesigner,'RemoveUsedModule',TypeInfo(_T53),[
TypeInfo(TComponent)],Addr(TCustomLiteDesigner.RemoveUsedModule));

RegRegisterMethod(TCustomLiteDesigner,'CanPaste',TypeInfo(_T54),[TypeInfo(Boolean)],Addr(TCustomLiteDesigner.CanPaste));

RegRegisterMethod(TCustomLiteDesigner,'CanCut',TypeInfo(_T55),[TypeInfo(Boolean)],Addr(TCustomLiteDesigner.CanCut));

RegRegisterMethod(TCustomLiteDesigner,'CanCopy',TypeInfo(_T56),[TypeInfo(Boolean)],Addr(TCustomLiteDesigner.CanCopy));

//RegRegisterMethod(TCustomLiteDesigner,'ClearChanges',TypeInfo(_T57),NoParams, pointer(68));
RegRegisterMethod(TCustomLiteDesigner,'ClearChanges',TypeInfo(_T57),NoParams,  getVMTProcAddr('TCustomLiteDesigner','ClearChanges',68));


RegRegisterMethod(TCustomLiteDesigner,'CancelChanges',TypeInfo(_T58),NoParams,Addr(TCustomLiteDesigner.CancelChanges));

RegRegisterMethod(TDataModuleWrapper,'UpdateScrollbars',TypeInfo(_T59),NoParams,Addr(TDataModuleWrapper.UpdateScrollbars));

//RegRegisterMethod(TDCChangesStore,'SaveChanges',TypeInfo(_T60),NoParams, pointer(48));
RegRegisterMethod(TDCChangesStore,'SaveChanges',TypeInfo(_T60),NoParams,  getVMTProcAddr('TDCChangesStore','SaveChanges',48));


//RegRegisterMethod(TDCChangesStore,'LoadChanges',TypeInfo(_T61),NoParams, pointer(52));
RegRegisterMethod(TDCChangesStore,'LoadChanges',TypeInfo(_T61),NoParams,  getVMTProcAddr('TDCChangesStore','LoadChanges',52));


//RegRegisterMethod(TDCFormDesigner,'AnswerMessage',TypeInfo(_T62),[TypeInfo(Boolean)], pointer(44));
RegRegisterMethod(TDCFormDesigner,'AnswerMessage',TypeInfo(_T62),[TypeInfo(Boolean)],  getVMTProcAddr('TDCFormDesigner','AnswerMessage',44));


//RegRegisterMethod(TDCFormDesigner,'MouseDown',TypeInfo(_T63),[TypeInfo(TMouseButton),TypeInfo(TShiftState),TypeInfo(Integer),TypeInfo(Integer)], pointer(48));
RegRegisterMethod(TDCFormDesigner,'MouseDown',TypeInfo(_T63),[TypeInfo(TMouseButton),TypeInfo(TShiftState),TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TDCFormDesigner','MouseDown',48));


//RegRegisterMethod(TDCFormDesigner,'MouseUp',TypeInfo(_T64),[TypeInfo(TMouseButton),TypeInfo(TShiftState),TypeInfo(Integer),TypeInfo(Integer)], pointer(52));
RegRegisterMethod(TDCFormDesigner,'MouseUp',TypeInfo(_T64),[TypeInfo(TMouseButton),TypeInfo(TShiftState),TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TDCFormDesigner','MouseUp',52));


//RegRegisterMethod(TDCFormDesigner,'MouseMove',TypeInfo(_T65),[TypeInfo(TShiftState),TypeInfo(Integer),TypeInfo(Integer)], pointer(56));
RegRegisterMethod(TDCFormDesigner,'MouseMove',TypeInfo(_T65),[TypeInfo(TShiftState),TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TDCFormDesigner','MouseMove',56));


//RegRegisterMethod(TDCFormDesigner,'KeyDown',TypeInfo(_T66),[TypeInfo(Word),TypeInfo(TShiftState)], pointer(60));
RegRegisterMethod(TDCFormDesigner,'KeyDown',TypeInfo(_T66),[TypeInfo(Word),TypeInfo(TShiftState)],  getVMTProcAddr('TDCFormDesigner','KeyDown',60));


//RegRegisterMethod(TDCFormDesigner,'CloseForm',TypeInfo(_T68),NoParams, pointer(68));
RegRegisterMethod(TDCFormDesigner,'CloseForm',TypeInfo(_T68),NoParams,  getVMTProcAddr('TDCFormDesigner','CloseForm',68));


//RegRegisterMethod(TDCFormDesigner,'BeginUpdate',TypeInfo(_T69),NoParams, pointer(72));
RegRegisterMethod(TDCFormDesigner,'BeginUpdate',TypeInfo(_T69),NoParams,  getVMTProcAddr('TDCFormDesigner','BeginUpdate',72));


//RegRegisterMethod(TDCFormDesigner,'EndUpdate',TypeInfo(_T70),NoParams, pointer(76));
RegRegisterMethod(TDCFormDesigner,'EndUpdate',TypeInfo(_T70),NoParams,  getVMTProcAddr('TDCFormDesigner','EndUpdate',76));


RegRegisterMethod(TDCFormDesigner,'BringContainersToFront',TypeInfo(_T71),NoParams,Addr(TDCFormDesigner.BringContainersToFront));

//RegRegisterMethod(TDCFormDesigner,'Activate',TypeInfo(_T72),NoParams, pointer(80));
RegRegisterMethod(TDCFormDesigner,'Activate',TypeInfo(_T72),NoParams,  getVMTProcAddr('TDCFormDesigner','Activate',80));


RegRegisterMethod(TDCFormDesigner,'IsComponentLinkable',TypeInfo(_T73),[
TypeInfo(TComponent),TypeInfo(Boolean)],Addr(TDCFormDesigner.IsComponentLinkable));

RegRegisterMethod(TDCFormDesigner,'MakeComponentLinkable',TypeInfo(_T74),[
TypeInfo(TComponent)],Addr(TDCFormDesigner.MakeComponentLinkable));

RegRegisterMethod(TDCFormDesigner,'RenameMethod',TypeInfo(_T75),[
TypeInfo(string),
TypeInfo(string)],Addr(TDCFormDesigner.RenameMethod));

RegRegisterMethod(TDCFormDesigner,'ShowMethod',TypeInfo(_T76),[
TypeInfo(string)],Addr(TDCFormDesigner.ShowMethod));

RegRegisterMethod(TDCFormDesigner,'Modified',TypeInfo(_T77),NoParams,Addr(TDCFormDesigner.Modified));

RegRegisterMethod(TDCFormDesigner,'Notification',TypeInfo(_T78),[
TypeInfo(TPersistent),
TypeInfo(TOperation)],Addr(TDCFormDesigner.Notification));

RegRegisterMethod(TDCFormDesigner,'ValidateRename',TypeInfo(_T79),[
TypeInfo(TComponent),
TypeInfo(string),
TypeInfo(string)],Addr(TDCFormDesigner.ValidateRename));

RegRegisterMethod(TDCFormDesigner,'IsDesignMsg',TypeInfo(_T80),[
TypeInfo(TControl),
TypeInfo(IDispatch),TypeInfo(Boolean)],Addr(__TDCFormDesigner__IsDesignMsg__Wrapper));

RegRegisterMethod(TDCFormDesigner,'GetMethodName',TypeInfo(_T81),[
TypeInfo(IDispatch),TypeInfo(string)],Addr(__TDCFormDesigner__GetMethodName__Wrapper));

RegRegisterMethod(TDCFormDesigner,'MethodExists',TypeInfo(_T83),[
TypeInfo(string),TypeInfo(Boolean)],Addr(TDCFormDesigner.MethodExists));

RegRegisterMethod(TDCFormDesigner,'GetTabOrderControl',TypeInfo(_T86),[TypeInfo(TWInControl)],Addr(TDCFormDesigner.GetTabOrderControl));

RegRegisterMethod(TDCFormDesigner,'DeleteEmptyEvents',TypeInfo(_T87),[TypeInfo(Boolean)],Addr(TDCFormDesigner.DeleteEmptyEvents));

RegRegisterMethod(TDCFormDesigner,'SaveFormToStream',TypeInfo(_T88),[
TypeInfo(TStream),
TypeInfo(Boolean)],Addr(TDCFormDesigner.SaveFormToStream));

RegRegisterMethod(TDCFormDesigner,'SaveFormToFile',TypeInfo(_T89),[
TypeInfo(TFileName)],Addr(TDCFormDesigner.SaveFormToFile));

RegRegisterMethod(TDCFormDesigner,'SaveComponentToStream',TypeInfo(_T90),[
TypeInfo(TComponent),
TypeInfo(TStream)],Addr(TDCFormDesigner.SaveComponentToStream));

//RegRegisterMethod(TDCFormDesigner,'BeforeSave',TypeInfo(_T91),NoParams, pointer(84));
RegRegisterMethod(TDCFormDesigner,'BeforeSave',TypeInfo(_T91),NoParams,  getVMTProcAddr('TDCFormDesigner','BeforeSave',84));


//RegRegisterMethod(TDCFormDesigner,'AfterSave',TypeInfo(_T92),NoParams, pointer(88));
RegRegisterMethod(TDCFormDesigner,'AfterSave',TypeInfo(_T92),NoParams,  getVMTProcAddr('TDCFormDesigner','AfterSave',88));


RegRegisterMethod(TDCFormDesigner,'SelectComponent',TypeInfo(_T93),[
TypeInfo(TPersistent)],Addr(TDCFormDesigner.SelectComponent));

RegisterProc(TDCFormDesigner,'Create',mtConstructor,TypeInfo(_T94),NoParams,Addr(TDCFormDesigner.Create),cRegister);

RegRegisterMethod(TDCFormDesigner,'PaintGrid',TypeInfo(_T95),NoParams,Addr(TDCFormDesigner.PaintGrid));

RegRegisterMethod(TDCFormDesigner,'ClearSelectedComponents',TypeInfo(_T96),NoParams,Addr(TDCFormDesigner.ClearSelectedComponents));

RegRegisterMethod(TDCFormDesigner,'DeleteSelectedComponents',TypeInfo(_T97),NoParams,Addr(TDCFormDesigner.DeleteSelectedComponents));

RegRegisterMethod(TDCFormDesigner,'FilterSelectedComponents',TypeInfo(_T98),[
TypeInfo(TComponent)],Addr(TDCFormDesigner.FilterSelectedComponents));

RegRegisterMethod(TDCFormDesigner,'FilterSelection',TypeInfo(_T99),NoParams,Addr(TDCFormDesigner.FilterSelection));

RegRegisterMethod(TDCFormDesigner,'InsertComponent',TypeInfo(_T100),[
TypeInfo(string)],Addr(TDCFormDesigner.InsertComponent));

RegRegisterMethod(TDCFormDesigner,'InstantInsertComponent',TypeInfo(_T101),[
TypeInfo(string),TypeInfo(TComponent)],Addr(TDCFormDesigner.InstantInsertComponent));

RegRegisterMethod(TDCFormDesigner,'AlignSelected',TypeInfo(_T102),[
TypeInfo(TAlignControls),
TypeInfo(TAlignControls)],Addr(TDCFormDesigner.AlignSelected));

RegRegisterMethod(TDCFormDesigner,'SizeSelected',TypeInfo(_T103),[
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TDCFormDesigner.SizeSelected));

RegRegisterMethod(TDCFormDesigner,'Scale',TypeInfo(_T105),[
TypeInfo(Extended)],Addr(TDCFormDesigner.Scale));

RegRegisterMethod(TDCFormDesigner,'SelectAll',TypeInfo(_T106),NoParams,Addr(TDCFormDesigner.SelectAll));

RegRegisterMethod(TDCFormDesigner,'AlignToGrid',TypeInfo(_T107),NoParams,Addr(TDCFormDesigner.AlignToGrid));

RegRegisterMethod(TDCFormDesigner,'BringToFront',TypeInfo(_T108),NoParams,Addr(TDCFormDesigner.BringToFront));

RegRegisterMethod(TDCFormDesigner,'SendToBack',TypeInfo(_T109),NoParams,Addr(TDCFormDesigner.SendToBack));

//RegRegisterMethod(TDCFormDesigner,'Undo',TypeInfo(_T110),NoParams, pointer(92));
RegRegisterMethod(TDCFormDesigner,'Undo',TypeInfo(_T110),NoParams,  getVMTProcAddr('TDCFormDesigner','Undo',92));


//RegRegisterMethod(TDCFormDesigner,'Redo',TypeInfo(_T111),NoParams, pointer(96));
RegRegisterMethod(TDCFormDesigner,'Redo',TypeInfo(_T111),NoParams,  getVMTProcAddr('TDCFormDesigner','Redo',96));


RegRegisterMethod(TDCFormDesigner,'UndoAll',TypeInfo(_T112),NoParams,Addr(TDCFormDesigner.UndoAll));

RegRegisterMethod(TDCFormDesigner,'ClipboardCut',TypeInfo(_T113),NoParams,Addr(TDCFormDesigner.ClipboardCut));

RegRegisterMethod(TDCFormDesigner,'ClipboardCopy',TypeInfo(_T114),NoParams,Addr(TDCFormDesigner.ClipboardCopy));

RegRegisterMethod(TDCFormDesigner,'ClipboardPaste',TypeInfo(_T115),NoParams,Addr(TDCFormDesigner.ClipboardPaste));

RegRegisterMethod(TDCFormDesigner,'ShowHandles',TypeInfo(_T116),NoParams,Addr(TDCFormDesigner.ShowHandles));

RegRegisterMethod(TDCFormDesigner,'HideHandles',TypeInfo(_T117),NoParams,Addr(TDCFormDesigner.HideHandles));

RegRegisterMethod(TDCFormDesigner,'AddUsedModule',TypeInfo(_T118),[
TypeInfo(TComponent)],Addr(TDCFormDesigner.AddUsedModule));

RegRegisterMethod(TDCFormDesigner,'RemoveUsedModule',TypeInfo(_T119),[
TypeInfo(TComponent)],Addr(TDCFormDesigner.RemoveUsedModule));

RegRegisterMethod(TDCFormDesigner,'AddSelectedComponent',TypeInfo(_T120),[
TypeInfo(TComponent)],Addr(TDCFormDesigner.AddSelectedComponent));

RegRegisterMethod(TDCFormDesigner,'DeselectComponent',TypeInfo(_T121),[
TypeInfo(TPersistent)],Addr(TDCFormDesigner.DeselectComponent));

RegisterProc(TDCOLEControl,'CreateGUID',mtConstructor,TypeInfo(_T123),[
TypeInfo(TComponent),
TypeInfo(IDispatch)],Addr(__TDCOLEControl__CreateGUID__Wrapper),cRegister);

RegRegisterMethod(TDCOLEControl,'FindEvent',TypeInfo(_T124),[
TypeInfo(Integer),TypeInfo(Integer)],Addr(TDCOLEControl.FindEvent));

RegisterProc(TDCOleControl_,'CreateGUID',mtConstructor,TypeInfo(_T125),[
TypeInfo(TComponent),
TypeInfo(IDispatch)],Addr(__TDCOleControl___CreateGUID__Wrapper),cRegister);

RegisterProc(TOLEEventDispatch,'Create',mtConstructor,TypeInfo(_T127),[
TypeInfo(TDCOLEControl)],Addr(TOLEEventDispatch.Create),cRegister);

RegisterProc(TUndoInfo,'Create',mtConstructor,TypeInfo(_T128),NoParams,Addr(TUndoInfo.Create),cRegister);

RegRegisterMethod(TUndoInfo,'CompContent',TypeInfo(_T129),[TypeInfo(TStream)],Addr(TUndoInfo.CompContent));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'GetActiveDesigner',mtProc,TypeInfo(_T12),[TypeInfo(IDCFormDesigner)],Addr(GetActiveDesigner),cRegister)}

{RegisterProc(nil,'ParametersListMatchTypeData',mtProc,TypeInfo(_T15),[
ArrayInfo(TypeInfo(string)),
TypeInfoPointer,TypeInfo(Boolean)],Addr(ParametersListMatchTypeData),cRegister)}

{RegRegisterMethod(TCustomLiteDesigner,'CreateFromFile',TypeInfo(_T38),[
TypeInfo(TFileName),
TypeInfo(TComponentClass),TypeInfo(TComponent)],Addr(TCustomLiteDesigner.CreateFromFile))}

{RegRegisterMethod(TCustomLiteDesigner,'CreateFromStream',TypeInfo(_T39),[
TypeInfo(TStream),
TypeInfo(TComponentClass),TypeInfo(TComponent)],Addr(TCustomLiteDesigner.CreateFromStream))}

{RegRegisterMethod(TDCFormDesigner,'GetComponentGlyph',TypeInfo(_T67),[
TypeInfo(TClass),
TypeInfo(TBitmap)], pointer(64))}

{RegRegisterMethod(TDCFormDesigner,'GetMethods',TypeInfo(_T82),[
TypeInfoPointer,
TypeInfo(TGetStrProc)],Addr(TDCFormDesigner.GetMethods))}

{RegRegisterMethod(TDCFormDesigner,'GetComponentNames',TypeInfo(_T84),[
TypeInfoPointer,
TypeInfo(TGetStrProc)],Addr(TDCFormDesigner.GetComponentNames))}

{RegRegisterMethod(TDCFormDesigner,'SetSelections',TypeInfo(_T104),[
TypeInfo(IDesignerSelections)],Addr(TDCFormDesigner.SetSelections))}

{RegisterProc(TDCOLEControl,'CreateControlData',mtConstructor,TypeInfo(_T122),[
TypeInfo(TComponent),
TypeInfoPointer],Addr(TDCOLEControl.CreateControlData),cRegister)}

{RegisterProc(TDCOleControl_,'CreateControlData',mtConstructor,TypeInfo(_T126),[
TypeInfo(TComponent),
TypeInfoPointer],Addr(TDCOleControl_.CreateControlData),cRegister)}

RegisterEvent(TypeInfo(TActionEvent),[
TypeInfo(TObject),
TypeInfo(TPersistent),
TypeInfo(TActionType),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TActiveChangingEvent),[
TypeInfo(TObject),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TAllowPopupEvent),[
TypeInfo(TObject),
TypeInfo(TShiftState),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TCHMouseDown),[
TypeInfo(TObject),
TypeInfo(TMouseButton),
TypeInfo(TShiftState),
TypeInfo(THandlePosition)]);

RegisterEvent(TypeInfo(TCNotifyProc),[
TypeInfo(TObject),
TypeInfo(TComponent)]);

RegisterEvent(TypeInfo(TDCDragDropEvent),[
TypeInfo(TObject),
TypeInfo(TObject),
TypeInfo(TObject),
TypeInfo(Integer),
TypeInfo(Integer)]);

RegisterEvent(TypeInfo(TDCDragOverEvent),[
TypeInfo(TObject),
TypeInfo(TObject),
TypeInfo(TObject),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(TDragState),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TEditPropertyProc),[
TypeInfo(TObject),
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TGetAncestorEvent),[
TypeInfo(TObject),
TypeInfo(TComponent)]);

{RegisterEvent(TypeInfo(TGetCompNamesEvent),[
TypeInfo(TObject),
TypeInfoPointer,
TypeInfo(TGetStrProc)]);}

{RegisterEvent(TypeInfo(TGetComponentGlyphProc),[
TypeInfo(TObject),
TypeInfo(TClass),
TypeInfo(TBitmap)]);}

{RegisterEvent(TypeInfo(TGetEventsListEvent),[
TypeInfo(TObject),
TypeInfoPointer,
TypeInfo(TStrings)]);}

RegisterEvent(TypeInfo(TOleControl_FocusChanged),[
TypeInfo(TObject),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TProcessMenuItemProc),[
TypeInfo(TObject),
TypeInfo(TMenuItem),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TShowPropertyProc),[
TypeInfo(TObject),
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TSizeChangedEvent),[
TypeInfo(TObject),
TypeInfo(TControl)]);

RegisterEvent(TypeInfo(TSizeChangeProc),[
TypeInfo(TObject),
TypeInfo(Integer),
TypeInfo(Integer)]);

RegisterEvent(TypeInfo(TStartSizeChangeProc),[
TypeInfo(TObject)]);

{RegisterEvent(TypeInfo(TValidateRectProc),[
TypeInfo(TObject),
TypeInfo(IDispatch)]);}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
