{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDCOMPRESSIONINTERCEPT_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdException,
  IdTCPClient,
  IdGlobal,
  IdTCPConnection,
  IdIntercept,
  IdCompressionIntercept;
function ConvertTZStreamRecToVariant(var R : TZStreamRec) : OleVariant;
function ConvertVariantToTZStreamRec(const V : OleVariant) : TZStreamRec;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TZStreamRec__Wrapper = class(TDCRecordWrapper)
private
fR : TZStreamRec;
public
function GetRecordPtr : pointer; override;
published
procedure setavail_in(const val : Integer);
function getavail_in : Integer;
property avail_in : Integer read getavail_in write setavail_in;
procedure settotal_in(const val : Integer);
function gettotal_in : Integer;
property total_in : Integer read gettotal_in write settotal_in;
procedure setavail_out(const val : Integer);
function getavail_out : Integer;
property avail_out : Integer read getavail_out write setavail_out;
procedure settotal_out(const val : Integer);
function gettotal_out : Integer;
property total_out : Integer read gettotal_out write settotal_out;
procedure setdata_type(const val : Integer);
function getdata_type : Integer;
property data_type : Integer read getdata_type write setdata_type;
procedure setadler(const val : Integer);
function getadler : Integer;
property adler : Integer read getadler write setadler;
procedure setreserved(const val : Integer);
function getreserved : Integer;
property reserved : Integer read getreserved write setreserved;
end;
function __TZStreamRec__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TZStreamRec__Wrapper.setavail_in(const val : Integer);
begin
TZStreamRec(GetRecordPtr^).avail_in := val;
end;
function __TZStreamRec__Wrapper.getavail_in : Integer;
begin
result := TZStreamRec(GetRecordPtr^).avail_in;
end;
procedure __TZStreamRec__Wrapper.settotal_in(const val : Integer);
begin
TZStreamRec(GetRecordPtr^).total_in := val;
end;
function __TZStreamRec__Wrapper.gettotal_in : Integer;
begin
result := TZStreamRec(GetRecordPtr^).total_in;
end;
procedure __TZStreamRec__Wrapper.setavail_out(const val : Integer);
begin
TZStreamRec(GetRecordPtr^).avail_out := val;
end;
function __TZStreamRec__Wrapper.getavail_out : Integer;
begin
result := TZStreamRec(GetRecordPtr^).avail_out;
end;
procedure __TZStreamRec__Wrapper.settotal_out(const val : Integer);
begin
TZStreamRec(GetRecordPtr^).total_out := val;
end;
function __TZStreamRec__Wrapper.gettotal_out : Integer;
begin
result := TZStreamRec(GetRecordPtr^).total_out;
end;
procedure __TZStreamRec__Wrapper.setdata_type(const val : Integer);
begin
TZStreamRec(GetRecordPtr^).data_type := val;
end;
function __TZStreamRec__Wrapper.getdata_type : Integer;
begin
result := TZStreamRec(GetRecordPtr^).data_type;
end;
procedure __TZStreamRec__Wrapper.setadler(const val : Integer);
begin
TZStreamRec(GetRecordPtr^).adler := val;
end;
function __TZStreamRec__Wrapper.getadler : Integer;
begin
result := TZStreamRec(GetRecordPtr^).adler;
end;
procedure __TZStreamRec__Wrapper.setreserved(const val : Integer);
begin
TZStreamRec(GetRecordPtr^).reserved := val;
end;
function __TZStreamRec__Wrapper.getreserved : Integer;
begin
result := TZStreamRec(GetRecordPtr^).reserved;
end;
function _TZStreamRec_ : IDispatch;
begin
  result := __TZStreamRec__Wrapper.Create;
end;

type __TZStreamRec__Wrapper__ = class(__TZStreamRec__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TZStreamRec__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTZStreamRecToVariant(var R : TZStreamRec) : OleVariant;
var
__rw : __TZStreamRec__Wrapper__;
begin
__rw := __TZStreamRec__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTZStreamRec(const V : OleVariant) : TZStreamRec;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TZStreamRec((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..6] of TClass = (
EIdCompressionError,
EIdCompressionException,
EIdCompressorInitFailure,
EIdDecompressionError,
EIdDecompressorInitFailure,
TIdCompressionIntercept,
TIdServerCompressionIntercept
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'TZStreamRec'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TZStreamRec_)));
end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
