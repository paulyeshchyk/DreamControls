{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit DESIGNEDITORS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  dcscript,
  dcsystem,
  dcdreamlib,
  Types,
  SysUtils,
  Classes,
  ActiveX,
  TypInfo,
  Variants,
  DesignMenus;
function ConvertTInstPropToVariant(var R : TInstProp) : OleVariant;
function ConvertVariantToTInstProp(const V : OleVariant) : TInstProp;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TInstProp__Wrapper = class(TDCRecordWrapper)
private
fR : TInstProp;
public
function GetRecordPtr : pointer; override;
published
procedure setInstance(const val : TPersistent);
function getInstance : TPersistent;
property Instance : TPersistent read getInstance write setInstance;
end;
type
{_T1 = function (p0 : TComponent;
const p1 : IDesigner): IComponentEditor of object;}

{_T2 = function (const p0 : IDesigner): ISelectionEditorList of object;}

{_T3 = function (p0 : TClass;
const p1 : string): Boolean of object;}

{_T4 = function (p0 : TClass;
p1 : TClass): Boolean of object;}

_T5 = function (const p0 : string): Boolean of object;

_T6 = function : Integer of object;

_T7 = procedure (p0 : Integer) of object;

{_T8 = procedure (p0 : TGroupChangeProc) of object;}

{_T9 = procedure (p0 : TGroupChangeProc) of object;}

{_T10 = function (const p0 : IDesigner;
p1 : TComponent;
p2 : TComponent): IComponentGuidelines of object;}

_T11 = procedure  of object;

_T12 = _T7;

_T13 = function : TComponent of object;

{_T14 = function : IDesigner of object;}

_T15 = function (p0 : Integer): string of object;

_T16 = _T6;

_T17 = function : Boolean of object;

_T18 = _T11;

{_T19 = procedure (p0 : Integer;
const p1 : IMenuItem) of object;}

_T20 = function (p0 : Integer): Integer of object;

_T21 = _T20;

_T22 = _T6;

_T23 = function (p0 : Integer): TDesignerGuideType of object;

_T24 = _T20;

_T25 = _T13;

_T26 = _T17;

{_T27 = function : IDesignerSelections of object;}

_T28 = _T7;

_T29 = function : TCustomModuleAttributes of object;

_T30 = _T15;

_T31 = _T6;

_T32 = _T11;

{_T33 = procedure (p0 : Integer;
const p1 : IMenuItem) of object;}

_T34 = procedure (p0 : TComponent) of object;

{_T35 = function (p0 : TComponentClass): Boolean of object;}

_T36 = _T17;

{_T37 = procedure (const p0 : IProperty;
var p1 : Boolean) of object;}

{_T38 = procedure (const p0 : IDropTarget) of object;}

_T39 = _T17;

_T40 = function : string of object;

_T41 = _T40;

_T42 = procedure (p0 : TPropertyEditor) of object;

_T43 = _T17;

_T44 = _T11;

_T45 = _T17;

_T46 = _T17;

_T47 = _T11;

_T48 = function : TPropertyAttributes of object;

_T49 = function (p0 : Integer): TPersistent of object;

_T50 = _T6;

_T51 = _T40;

{_T52 = procedure (p0 : TGetPropProc) of object;}

{_T53 = function : PPropInfo of object;}

{_T54 = function : PTypeInfo of object;}

_T55 = function : TTypeKind of object;

_T56 = _T40;

_T57 = function : WideString of object;

_T58 = _T40;

{_T59 = procedure (p0 : TGetStrProc) of object;}

_T60 = _T11;

_T61 = procedure (const p0 : string) of object;

_T62 = _T17;

{_T63 = procedure (p0 : Integer;
const p1 : IDesignerSelections) of object;}

_T64 = _T15;

_T65 = _T6;

{_T66 = procedure (p0 : TGetStrProc) of object;}

{_T67 = procedure (p0 : Integer;
const p1 : IMenuItem) of object;}

_T68 = _T57;

_T69 = procedure (const p0 : WideString) of object;

{_T70 = procedure (p0 : TGetWideStrProc) of object;}

function __TInstProp__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TInstProp__Wrapper.setInstance(const val : TPersistent);
begin
TInstProp(GetRecordPtr^).Instance := val;
end;
function __TInstProp__Wrapper.getInstance : TPersistent;
begin
result := TInstProp(GetRecordPtr^).Instance;
end;
function _TInstProp_ : IDispatch;
begin
  result := __TInstProp__Wrapper.Create;
end;

type __TInstProp__Wrapper__ = class(__TInstProp__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TInstProp__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTInstPropToVariant(var R : TInstProp) : OleVariant;
var
__rw : __TInstProp__Wrapper__;
begin
__rw := __TInstProp__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTInstProp(const V : OleVariant) : TInstProp;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TInstProp((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTComponentEditor__Component(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TComponentEditor(Instance).Component);
end;

function __DC__GetTCustomModule__Root(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomModule(Instance).Root);
end;

function __DC__GetTPropertyEditor__PrivateDirectory(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TPropertyEditor(Instance).PrivateDirectory;
end;

function __DC__GetTPropertyEditor__PropCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TPropertyEditor(Instance).PropCount;
end;

function __DC__GetTPropertyEditor__Value(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TPropertyEditor(Instance).Value;
end;

procedure __DC__SetTPropertyEditor__Value(Instance : TObject; Params : PVariantArgList);
begin
TPropertyEditor(Instance).Value:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TComponentEditor,'Component',__DC__GetTComponentEditor__Component,nil);
RegisterProperty(TCustomModule,'Root',__DC__GetTCustomModule__Root,nil);
RegisterProperty(TPropertyEditor,'PrivateDirectory',__DC__GetTPropertyEditor__PrivateDirectory,nil);
RegisterProperty(TPropertyEditor,'PropCount',__DC__GetTPropertyEditor__PropCount,nil);
RegisterProperty(TPropertyEditor,'Value',__DC__GetTPropertyEditor__Value,__DC__SetTPropertyEditor__Value);
end;

const __ConstNames0 : array[0..1] of string = (
'sClassNotApplicable'
,'sNotAvailable'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,sClassNotApplicable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,sNotAvailable));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..29] of TClass = (
TBoolProperty,
TCharProperty,
TClassProperty,
TComponentEditor,
TComponentGuidelines,
TComponentNameProperty,
TComponentProperty,
TCustomModule,
TDateProperty,
TDateTimeProperty,
TDefaultEditor,
TDesignerOleDropTarget,
TEditActionSelectionEditor,
TEnumProperty,
TFloatProperty,
TInt64Property,
TIntegerProperty,
TInterfaceProperty,
TMethodProperty,
TNestedProperty,
TOrdinalProperty,
TPropertyEditor,
TSelectionEditor,
TSetElementProperty,
TSetProperty,
TStringProperty,
TTimeProperty,
TVariantProperty,
TWideCharProperty,
TWideStringProperty
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..3] of string = (
'TInstProp'
,'PossibleStream'
,'NewEditorGroup'
,'FreeEditorGroup'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TInstProp_)));
RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T5),[
TypeInfo(string),TypeInfo(Boolean)],Addr(PossibleStream),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T6),[TypeInfo(Integer)],Addr(NewEditorGroup),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T7),[
TypeInfo(Integer)],Addr(FreeEditorGroup),cRegister);

//RegRegisterMethod(TComponentEditor,'Edit',TypeInfo(_T11),NoParams, pointer(4));
RegRegisterMethod(TComponentEditor,'Edit',TypeInfo(_T11),NoParams,  getVMTProcAddr('TComponentEditor','Edit',4));


//RegRegisterMethod(TComponentEditor,'ExecuteVerb',TypeInfo(_T12),[TypeInfo(Integer)], pointer(8));
RegRegisterMethod(TComponentEditor,'ExecuteVerb',TypeInfo(_T12),[TypeInfo(Integer)],  getVMTProcAddr('TComponentEditor','ExecuteVerb',8));


RegRegisterMethod(TComponentEditor,'GetComponent',TypeInfo(_T13),[TypeInfo(TComponent)],Addr(TComponentEditor.GetComponent));

//RegRegisterMethod(TComponentEditor,'GetVerb',TypeInfo(_T15),[TypeInfo(Integer),TypeInfo(string)], pointer(12));
RegRegisterMethod(TComponentEditor,'GetVerb',TypeInfo(_T15),[TypeInfo(Integer),TypeInfo(string)],  getVMTProcAddr('TComponentEditor','GetVerb',12));


//RegRegisterMethod(TComponentEditor,'GetVerbCount',TypeInfo(_T16),[TypeInfo(Integer)], pointer(16));
RegRegisterMethod(TComponentEditor,'GetVerbCount',TypeInfo(_T16),[TypeInfo(Integer)],  getVMTProcAddr('TComponentEditor','GetVerbCount',16));


RegRegisterMethod(TComponentEditor,'IsInInlined',TypeInfo(_T17),[TypeInfo(Boolean)],Addr(TComponentEditor.IsInInlined));

//RegRegisterMethod(TComponentEditor,'Copy',TypeInfo(_T18),NoParams, pointer(20));
RegRegisterMethod(TComponentEditor,'Copy',TypeInfo(_T18),NoParams,  getVMTProcAddr('TComponentEditor','Copy',20));


//RegRegisterMethod(TComponentGuidelines,'CalcHorzPos',TypeInfo(_T20),[TypeInfo(Integer),TypeInfo(Integer)], pointer(8));
RegRegisterMethod(TComponentGuidelines,'CalcHorzPos',TypeInfo(_T20),[TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TComponentGuidelines','CalcHorzPos',8));


//RegRegisterMethod(TComponentGuidelines,'CalcVertPos',TypeInfo(_T21),[TypeInfo(Integer),TypeInfo(Integer)], pointer(12));
RegRegisterMethod(TComponentGuidelines,'CalcVertPos',TypeInfo(_T21),[TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TComponentGuidelines','CalcVertPos',12));


//RegRegisterMethod(TComponentGuidelines,'GetCount',TypeInfo(_T22),[TypeInfo(Integer)], pointer(16));
RegRegisterMethod(TComponentGuidelines,'GetCount',TypeInfo(_T22),[TypeInfo(Integer)],  getVMTProcAddr('TComponentGuidelines','GetCount',16));


//RegRegisterMethod(TComponentGuidelines,'GetDesignerGuideType',TypeInfo(_T23),[TypeInfo(Integer),TypeInfo(TDesignerGuideType)], pointer(20));
RegRegisterMethod(TComponentGuidelines,'GetDesignerGuideType',TypeInfo(_T23),[TypeInfo(Integer),TypeInfo(TDesignerGuideType)],  getVMTProcAddr('TComponentGuidelines','GetDesignerGuideType',20));


//RegRegisterMethod(TComponentGuidelines,'GetDesignerGuideOffset',TypeInfo(_T24),[TypeInfo(Integer),TypeInfo(Integer)], pointer(24));
RegRegisterMethod(TComponentGuidelines,'GetDesignerGuideOffset',TypeInfo(_T24),[TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TComponentGuidelines','GetDesignerGuideOffset',24));


//RegRegisterMethod(TComponentProperty,'GetComponentReference',TypeInfo(_T25),[TypeInfo(TComponent)], pointer(72));
RegRegisterMethod(TComponentProperty,'GetComponentReference',TypeInfo(_T25),[TypeInfo(TComponent)],  getVMTProcAddr('TComponentProperty','GetComponentReference',72));


//RegRegisterMethod(TComponentProperty,'ShowReferenceProperty',TypeInfo(_T26),[TypeInfo(Boolean)], pointer(76));
RegRegisterMethod(TComponentProperty,'ShowReferenceProperty',TypeInfo(_T26),[TypeInfo(Boolean)],  getVMTProcAddr('TComponentProperty','ShowReferenceProperty',76));


//RegRegisterMethod(TCustomModule,'ExecuteVerb',TypeInfo(_T28),[TypeInfo(Integer)], pointer(8));
RegRegisterMethod(TCustomModule,'ExecuteVerb',TypeInfo(_T28),[TypeInfo(Integer)],  getVMTProcAddr('TCustomModule','ExecuteVerb',8));


//RegRegisterMethod(TCustomModule,'GetAttributes',TypeInfo(_T29),[TypeInfo(TCustomModuleAttributes)], pointer(12));
RegRegisterMethod(TCustomModule,'GetAttributes',TypeInfo(_T29),[TypeInfo(TCustomModuleAttributes)],  getVMTProcAddr('TCustomModule','GetAttributes',12));


//RegRegisterMethod(TCustomModule,'GetVerb',TypeInfo(_T30),[TypeInfo(Integer),TypeInfo(string)], pointer(16));
RegRegisterMethod(TCustomModule,'GetVerb',TypeInfo(_T30),[TypeInfo(Integer),TypeInfo(string)],  getVMTProcAddr('TCustomModule','GetVerb',16));


//RegRegisterMethod(TCustomModule,'GetVerbCount',TypeInfo(_T31),[TypeInfo(Integer)], pointer(20));
RegRegisterMethod(TCustomModule,'GetVerbCount',TypeInfo(_T31),[TypeInfo(Integer)],  getVMTProcAddr('TCustomModule','GetVerbCount',20));


//RegRegisterMethod(TCustomModule,'Saving',TypeInfo(_T32),NoParams, pointer(24));
RegRegisterMethod(TCustomModule,'Saving',TypeInfo(_T32),NoParams,  getVMTProcAddr('TCustomModule','Saving',24));


//RegRegisterMethod(TCustomModule,'ValidateComponent',TypeInfo(_T34),[TypeInfo(TComponent)], pointer(32));
RegRegisterMethod(TCustomModule,'ValidateComponent',TypeInfo(_T34),[TypeInfo(TComponent)],  getVMTProcAddr('TCustomModule','ValidateComponent',32));


//RegRegisterMethod(TCustomModule,'Nestable',TypeInfo(_T36),[TypeInfo(Boolean)], pointer(40));
RegRegisterMethod(TCustomModule,'Nestable',TypeInfo(_T36),[TypeInfo(Boolean)],  getVMTProcAddr('TCustomModule','Nestable',40));


//RegRegisterMethod(TMethodProperty,'AllNamed',TypeInfo(_T39),[TypeInfo(Boolean)], pointer(72));
RegRegisterMethod(TMethodProperty,'AllNamed',TypeInfo(_T39),[TypeInfo(Boolean)],  getVMTProcAddr('TMethodProperty','AllNamed',72));


//RegRegisterMethod(TMethodProperty,'GetFormMethodName',TypeInfo(_T40),[TypeInfo(string)], pointer(76));
RegRegisterMethod(TMethodProperty,'GetFormMethodName',TypeInfo(_T40),[TypeInfo(string)],  getVMTProcAddr('TMethodProperty','GetFormMethodName',76));


RegRegisterMethod(TMethodProperty,'GetTrimmedEventName',TypeInfo(_T41),[TypeInfo(string)],Addr(TMethodProperty.GetTrimmedEventName));

RegisterProc(TNestedProperty,'Create',mtConstructor,TypeInfo(_T42),[
TypeInfo(TPropertyEditor)],Addr(TNestedProperty.Create),cRegister);

//RegRegisterMethod(TPropertyEditor,'GetIsDefault',TypeInfo(_T43),[TypeInfo(Boolean)], pointer(12));
RegRegisterMethod(TPropertyEditor,'GetIsDefault',TypeInfo(_T43),[TypeInfo(Boolean)],  getVMTProcAddr('TPropertyEditor','GetIsDefault',12));


//RegRegisterMethod(TPropertyEditor,'Activate',TypeInfo(_T44),NoParams, pointer(16));
RegRegisterMethod(TPropertyEditor,'Activate',TypeInfo(_T44),NoParams,  getVMTProcAddr('TPropertyEditor','Activate',16));


//RegRegisterMethod(TPropertyEditor,'AllEqual',TypeInfo(_T45),[TypeInfo(Boolean)], pointer(20));
RegRegisterMethod(TPropertyEditor,'AllEqual',TypeInfo(_T45),[TypeInfo(Boolean)],  getVMTProcAddr('TPropertyEditor','AllEqual',20));


//RegRegisterMethod(TPropertyEditor,'AutoFill',TypeInfo(_T46),[TypeInfo(Boolean)], pointer(24));
RegRegisterMethod(TPropertyEditor,'AutoFill',TypeInfo(_T46),[TypeInfo(Boolean)],  getVMTProcAddr('TPropertyEditor','AutoFill',24));


//RegRegisterMethod(TPropertyEditor,'Edit',TypeInfo(_T47),NoParams, pointer(28));
RegRegisterMethod(TPropertyEditor,'Edit',TypeInfo(_T47),NoParams,  getVMTProcAddr('TPropertyEditor','Edit',28));


//RegRegisterMethod(TPropertyEditor,'GetAttributes',TypeInfo(_T48),[TypeInfo(TPropertyAttributes)], pointer(32));
RegRegisterMethod(TPropertyEditor,'GetAttributes',TypeInfo(_T48),[TypeInfo(TPropertyAttributes)],  getVMTProcAddr('TPropertyEditor','GetAttributes',32));


RegRegisterMethod(TPropertyEditor,'GetComponent',TypeInfo(_T49),[
TypeInfo(Integer),TypeInfo(TPersistent)],Addr(TPropertyEditor.GetComponent));

//RegRegisterMethod(TPropertyEditor,'GetEditLimit',TypeInfo(_T50),[TypeInfo(Integer)], pointer(36));
RegRegisterMethod(TPropertyEditor,'GetEditLimit',TypeInfo(_T50),[TypeInfo(Integer)],  getVMTProcAddr('TPropertyEditor','GetEditLimit',36));


//RegRegisterMethod(TPropertyEditor,'GetName',TypeInfo(_T51),[TypeInfo(string)], pointer(40));
RegRegisterMethod(TPropertyEditor,'GetName',TypeInfo(_T51),[TypeInfo(string)],  getVMTProcAddr('TPropertyEditor','GetName',40));


RegRegisterMethod(TPropertyEditor,'GetKind',TypeInfo(_T55),[TypeInfo(TTypeKind)],Addr(TPropertyEditor.GetKind));

//RegRegisterMethod(TPropertyEditor,'GetValue',TypeInfo(_T56),[TypeInfo(string)], pointer(52));
RegRegisterMethod(TPropertyEditor,'GetValue',TypeInfo(_T56),[TypeInfo(string)],  getVMTProcAddr('TPropertyEditor','GetValue',52));


//RegRegisterMethod(TPropertyEditor,'GetValueW',TypeInfo(_T57),[TypeInfo(WideString)], pointer(56));
RegRegisterMethod(TPropertyEditor,'GetValueW',TypeInfo(_T57),[TypeInfo(WideString)],  getVMTProcAddr('TPropertyEditor','GetValueW',56));


RegRegisterMethod(TPropertyEditor,'GetVisualValue',TypeInfo(_T58),[TypeInfo(string)],Addr(TPropertyEditor.GetVisualValue));

RegRegisterMethod(TPropertyEditor,'Revert',TypeInfo(_T60),NoParams,Addr(TPropertyEditor.Revert));

//RegRegisterMethod(TPropertyEditor,'SetValue',TypeInfo(_T61),[TypeInfo(string)], pointer(64));
RegRegisterMethod(TPropertyEditor,'SetValue',TypeInfo(_T61),[TypeInfo(string)],  getVMTProcAddr('TPropertyEditor','SetValue',64));


RegRegisterMethod(TPropertyEditor,'ValueAvailable',TypeInfo(_T62),[TypeInfo(Boolean)],Addr(TPropertyEditor.ValueAvailable));

//RegRegisterMethod(TSelectionEditor,'GetVerb',TypeInfo(_T64),[TypeInfo(Integer),TypeInfo(string)], pointer(8));
RegRegisterMethod(TSelectionEditor,'GetVerb',TypeInfo(_T64),[TypeInfo(Integer),TypeInfo(string)],  getVMTProcAddr('TSelectionEditor','GetVerb',8));


//RegRegisterMethod(TSelectionEditor,'GetVerbCount',TypeInfo(_T65),[TypeInfo(Integer)], pointer(12));
RegRegisterMethod(TSelectionEditor,'GetVerbCount',TypeInfo(_T65),[TypeInfo(Integer)],  getVMTProcAddr('TSelectionEditor','GetVerbCount',12));


RegRegisterMethod(TWideStringProperty,'GetNameW',TypeInfo(_T68),[TypeInfo(WideString)],Addr(TWideStringProperty.GetNameW));

//RegRegisterMethod(TWideStringProperty,'SetValue',TypeInfo(_T69),[TypeInfo(WideString)], pointer(72));
RegRegisterMethod(TWideStringProperty,'SetValue',TypeInfo(_T69),[TypeInfo(WideString)],  getVMTProcAddr('TWideStringProperty','SetValue',72));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'GetComponentEditor',mtProc,TypeInfo(_T1),[
TypeInfo(TComponent),
TypeInfo(IDesigner),TypeInfo(IComponentEditor)],Addr(GetComponentEditor),cRegister)}

{RegisterProc(nil,'GetSelectionEditors',mtProc,TypeInfo(_T2),[
TypeInfo(IDesigner),TypeInfo(ISelectionEditorList)],Addr(GetSelectionEditors),cRegister)}

{RegisterProc(nil,'ClassInheritsFrom',mtProc,TypeInfo(_T3),[
TypeInfo(TClass),
TypeInfo(string),TypeInfo(Boolean)],Addr(ClassInheritsFrom),cRegister)}

{RegisterProc(nil,'AncestorNameMatches',mtProc,TypeInfo(_T4),[
TypeInfo(TClass),
TypeInfo(TClass),TypeInfo(Boolean)],Addr(AncestorNameMatches),cRegister)}

{RegisterProc(nil,'NotifyGroupChange',mtProc,TypeInfo(_T8),[
TypeInfo(TGroupChangeProc)],Addr(NotifyGroupChange),cRegister)}

{RegisterProc(nil,'UnnotifyGroupChange',mtProc,TypeInfo(_T9),[
TypeInfo(TGroupChangeProc)],Addr(UnnotifyGroupChange),cRegister)}

{RegisterProc(nil,'GuidelinesFor',mtProc,TypeInfo(_T10),[
TypeInfo(IDesigner),
TypeInfo(TComponent),
TypeInfo(TComponent),TypeInfo(IComponentGuidelines)],Addr(GuidelinesFor),cRegister)}

{RegRegisterMethod(TComponentEditor,'GetDesigner',TypeInfo(_T14),[TypeInfo(IDesigner)],Addr(TComponentEditor.GetDesigner))}

{RegRegisterMethod(TComponentEditor,'PrepareItem',TypeInfo(_T19),[
TypeInfo(Integer),
TypeInfo(IMenuItem)], pointer(24))}

{RegRegisterMethod(TComponentProperty,'GetSelections',TypeInfo(_T27),[TypeInfo(IDesignerSelections)], pointer(80))}

{RegRegisterMethod(TCustomModule,'PrepareItem',TypeInfo(_T33),[
TypeInfo(Integer),
TypeInfo(IMenuItem)], pointer(28))}

{RegRegisterMethod(TCustomModule,'ValidateComponentClass',TypeInfo(_T35),[
TypeInfo(TComponentClass),TypeInfo(Boolean)], pointer(36))}

{RegRegisterMethod(TDefaultEditor,'EditProperty',TypeInfo(_T37),[
TypeInfo(IProperty),
TypeInfo(Boolean)], pointer(28))}

{RegisterProc(TDesignerOleDropTarget,'Create',mtConstructor,TypeInfo(_T38),[
TypeInfo(IDropTarget)],Addr(TDesignerOleDropTarget.Create),cRegister)}

{RegRegisterMethod(TPropertyEditor,'GetProperties',TypeInfo(_T52),[
TypeInfo(TGetPropProc)], pointer(44))}

{RegRegisterMethod(TPropertyEditor,'GetPropInfo',TypeInfo(_T53),[TypeInfoPointer], pointer(48))}

{RegRegisterMethod(TPropertyEditor,'GetPropType',TypeInfo(_T54),[TypeInfoPointer],Addr(TPropertyEditor.GetPropType))}

{RegRegisterMethod(TPropertyEditor,'GetValues',TypeInfo(_T59),[
TypeInfo(TGetStrProc)], pointer(60))}

{RegRegisterMethod(TSelectionEditor,'ExecuteVerb',TypeInfo(_T63),[
TypeInfo(Integer),
TypeInfo(IDesignerSelections)], pointer(4))}

{RegRegisterMethod(TSelectionEditor,'RequiresUnits',TypeInfo(_T66),[
TypeInfo(TGetStrProc)], pointer(16))}

{RegRegisterMethod(TSelectionEditor,'PrepareItem',TypeInfo(_T67),[
TypeInfo(Integer),
TypeInfo(IMenuItem)], pointer(20))}

{RegRegisterMethod(TWideStringProperty,'GetValues',TypeInfo(_T70),[
TypeInfo(TGetWideStrProc)], pointer(76))}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
