{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit XMLXFORM_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Variants,
  SysUtils,
  Classes,
  Provider,
  DB,
  DBClient,
  DSIntf,
  xmldom,
  xmlutil,
  Xmlxform;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
{_T0 = procedure (const p0 : string;
const p1 : IDOMNode;
var p2 : string;
const p3 : IDOMNode) of object;}

_T1 = function (const p0 : string;
const p1 : string): string of object;

_T2 = function (const p0 : string): string of object;

_T3 = function (const p0 : string;
const p1 : string;
p2 : Integer): Integer of object;

_T4 = procedure (const p0 : string;
const p1 : string) of object;

function __TXMLTransform__TransformXML__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := TXMLTransform(__Instance).TransformXML(OleVariant(pargs^[0]));
end;
2:
begin
result := TXMLTransform(__Instance).TransformXML(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function __DC__GetTXMLTransform__Data(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXMLTransform(Instance).Data;
end;

function __DC__GetTXMLTransform__SourceXmlFile(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXMLTransform(Instance).SourceXmlFile;
end;

procedure __DC__SetTXMLTransform__SourceXmlFile(Instance : TObject; Params : PVariantArgList);
begin
TXMLTransform(Instance).SourceXmlFile:=OleVariant(Params^[0]);
end;

function __DC__GetTXMLTransform__SourceXml(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXMLTransform(Instance).SourceXml;
end;

procedure __DC__SetTXMLTransform__SourceXml(Instance : TObject; Params : PVariantArgList);
begin
TXMLTransform(Instance).SourceXml:=OleVariant(Params^[0]);
end;

function __DC__GetTXMLTransform__ResultString(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXMLTransform(Instance).ResultString;
end;

procedure __RegisterProps;
begin
RegisterProperty(TXMLTransform,'Data',__DC__GetTXMLTransform__Data,nil);
RegisterProperty(TXMLTransform,'SourceXmlFile',__DC__GetTXMLTransform__SourceXmlFile,__DC__SetTXMLTransform__SourceXmlFile);
RegisterProperty(TXMLTransform,'SourceXml',__DC__GetTXMLTransform__SourceXml,__DC__SetTXMLTransform__SourceXml);
RegisterProperty(TXMLTransform,'ResultString',__DC__GetTXMLTransform__ResultString,nil);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..3] of TClass = (
TranslateException,
TXMLTransform,
TXMLTransformClient,
TXMLTransformProvider
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegisterProc(TXMLTransform,'TransformXML',mtScriptMethod,TypeInfo(_T1),[
TypeInfo(string),
TypeInfo(string),TypeInfo(string)],Addr(__TXMLTransform__TransformXML__Wrapper),cRegister);

RegRegisterMethod(TXMLTransformClient,'GetDataAsXml',TypeInfo(_T2),[
TypeInfo(string),TypeInfo(string)], pointer(48));

RegRegisterMethod(TXMLTransformClient,'ApplyUpdates',TypeInfo(_T3),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(Integer),TypeInfo(Integer)], pointer(52));

RegRegisterMethod(TXMLTransformClient,'SetParams',TypeInfo(_T4),[
TypeInfo(string),
TypeInfo(string)],Addr(TXMLTransformClient.SetParams));

end;
initialization
_mreg_0;
{RegRegisterMethod(TXMLTransform,'Translate',TypeInfo(_T0),[
TypeInfo(string),
TypeInfo(IDOMNode),
TypeInfo(string),
TypeInfo(IDOMNode)], pointer(MinVMTOffset - 16))}

{RegisterEvent(TypeInfo(TRowEvent),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(IDOMNode),
TypeInfo(IDOMNode)]);}

{RegisterEvent(TypeInfo(TTranslateEvent),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(IDOMNode),
TypeInfo(string),
TypeInfo(IDOMNode)]);}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
