{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDFTP_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdAssignedNumbers,
  IdException,
  IdRFCReply,
  IdSocketHandle,
  IdTCPConnection,
  IdTCPClient,
  IdThread,
  IdFTPList,
  IdFTPCommon,
  IdGlobal,
  IdFTP;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (p0 : TStream) of object;

_T1 = procedure  of object;

_T2 = procedure (p0 : String) of object;

_T3 = procedure (p0 : Integer) of object;

_T4 = procedure (const p0 : String) of object;

_T5 = _T1;

_T6 = procedure (p0 : Boolean;
const p1 : Integer) of object;

_T7 = _T4;

_T8 = procedure (p0 : TIdFTPDataStructure) of object;

_T9 = procedure (const p0 : String;
p1 : TStream;
p2 : Boolean) of object;

_T11 = _T1;

_T12 = procedure (p0 : TStrings;
const p1 : String;
const p2 : Boolean) of object;

_T13 = _T1;

_T14 = _T4;

_T15 = _T1;

_T16 = procedure (const p0 : TStream;
const p1 : String;
const p2 : Boolean) of object;

_T17 = _T1;

_T18 = function (const p0 : String): SmallInt of object;

_T19 = _T4;

_T20 = procedure (const p0 : String;
const p1 : String) of object;

_T21 = function : Boolean of object;

_T22 = function : String of object;

_T23 = _T4;

_T24 = function (const p0 : String): Integer of object;

_T25 = procedure (var p0 : TStringList) of object;

_T26 = _T2;

_T27 = procedure (p0 : TIdFTPTransferMode) of object;

_T28 = procedure (p0 : Cardinal) of object;

procedure __TIdFTP__Connect__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
0:
begin
TIdFTP(__Instance).Connect;
end;
1:
begin
TIdFTP(__Instance).Connect(OleVariant(pargs^[0]));
end;
2:
begin
TIdFTP(__Instance).Connect(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure __TIdFTP__Get__Wrapper(__Instance : TIdFTP;
const p0 : String;
p1 : TStream;
p2 : Boolean);
begin
TIdFTP(__Instance).Get(p0,p1,p2);
end;

procedure __TIdFTP__List__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
TIdFTP(__Instance).List(TStrings(VarToObject(OleVariant(pargs^[0]))));
end;
2:
begin
TIdFTP(__Instance).List(TStrings(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
end;
3:
begin
TIdFTP(__Instance).List(TStrings(VarToObject(OleVariant(pargs^[2]))),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure __TIdFTP__Put__Wrapper(__Instance : TIdFTP;
const p0 : TStream;
const p1 : String;
const p2 : Boolean);
begin
TIdFTP(__Instance).Put(p0,p1,p2);
end;

procedure __TIdFTP__ReInitialize__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
0:
begin
TIdFTP(__Instance).ReInitialize;
end;
1:
begin
TIdFTP(__Instance).ReInitialize(OleVariant(pargs^[0]));
end;
end
end;

function __DC__GetTIdFTP__CanResume(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdFTP(Instance).CanResume;
end;

function __DC__GetTIdFTP__DirectoryListing(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdFTP(Instance).DirectoryListing);
end;

function __DC__GetTIdFTP__LoginMsg(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdFTP(Instance).LoginMsg);
end;

function __DC__GetTIdFTP__SystemDesc(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdFTP(Instance).SystemDesc;
end;

function __DC__GetTIdFTP__ListResult(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdFTP(Instance).ListResult);
end;

procedure __RegisterProps;
begin
RegisterProperty(TIdFTP,'CanResume',__DC__GetTIdFTP__CanResume,nil);
RegisterProperty(TIdFTP,'DirectoryListing',__DC__GetTIdFTP__DirectoryListing,nil);
RegisterProperty(TIdFTP,'LoginMsg',__DC__GetTIdFTP__LoginMsg,nil);
RegisterProperty(TIdFTP,'SystemDesc',__DC__GetTIdFTP__SystemDesc,nil);
RegisterProperty(TIdFTP,'ListResult',__DC__GetTIdFTP__ListResult,nil);
end;

const __ConstNames0 : array[0..8] of string = (
'Id_TIdFTP_TransferType'
,'Id_TIdFTP_Passive'
,'fpcmNone'
,'fpcmUserSite'
,'fpcmSite'
,'fpcmOpen'
,'fpcmUserPass'
,'fpcmTransparent'
,'fpcmHttpProxyWithFtp'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,Id_TIdFTP_TransferType));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,Id_TIdFTP_Passive));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,fpcmNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,fpcmUserSite));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,fpcmSite));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,fpcmOpen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,fpcmUserPass));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,fpcmTransparent));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,fpcmHttpProxyWithFtp));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..2] of TClass = (
EIdFTPFileAlreadyExists,
TIdFTP,
TIdFtpProxySettings
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TIdFTP,'DoAfterGet',TypeInfo(_T0),[TypeInfo(TStream)], pointer(156));
RegRegisterMethod(TIdFTP,'DoAfterGet',TypeInfo(_T0),[TypeInfo(TStream)],  getVMTProcAddr('TIdFTP','DoAfterGet',156));


//RegRegisterMethod(TIdFTP,'Abort',TypeInfo(_T1),NoParams, pointer(160));
RegRegisterMethod(TIdFTP,'Abort',TypeInfo(_T1),NoParams,  getVMTProcAddr('TIdFTP','Abort',160));


RegRegisterMethod(TIdFTP,'Account',TypeInfo(_T2),[
TypeInfo(String)],Addr(TIdFTP.Account));

RegRegisterMethod(TIdFTP,'Allocate',TypeInfo(_T3),[
TypeInfo(Integer)],Addr(TIdFTP.Allocate));

RegRegisterMethod(TIdFTP,'ChangeDir',TypeInfo(_T4),[
TypeInfo(String)],Addr(TIdFTP.ChangeDir));

RegRegisterMethod(TIdFTP,'ChangeDirUp',TypeInfo(_T5),NoParams,Addr(TIdFTP.ChangeDirUp));

RegisterProc(TIdFTP,'Connect',mtScriptMethod,TypeInfo(_T6),[
TypeInfo(Boolean),
TypeInfo(Integer)],Addr(__TIdFTP__Connect__Wrapper),cRegister);

RegRegisterMethod(TIdFTP,'Delete',TypeInfo(_T7),[
TypeInfo(String)],Addr(TIdFTP.Delete));

RegRegisterMethod(TIdFTP,'FileStructure',TypeInfo(_T8),[
TypeInfo(TIdFTPDataStructure)],Addr(TIdFTP.FileStructure));

RegRegisterMethod(TIdFTP,'Get',TypeInfo(_T9),[
TypeInfo(String),
TypeInfo(TStream),
TypeInfo(Boolean)],Addr(__TIdFTP__Get__Wrapper));

//RegRegisterMethod(TIdFTP,'KillDataChannel',TypeInfo(_T11),NoParams, pointer(164));
RegRegisterMethod(TIdFTP,'KillDataChannel',TypeInfo(_T11),NoParams,  getVMTProcAddr('TIdFTP','KillDataChannel',164));


RegisterProc(TIdFTP,'List',mtScriptMethod,TypeInfo(_T12),[
TypeInfo(TStrings),
TypeInfo(String),
TypeInfo(Boolean)],Addr(__TIdFTP__List__Wrapper),cRegister);

RegRegisterMethod(TIdFTP,'Login',TypeInfo(_T13),NoParams,Addr(TIdFTP.Login));

RegRegisterMethod(TIdFTP,'MakeDir',TypeInfo(_T14),[
TypeInfo(String)],Addr(TIdFTP.MakeDir));

RegRegisterMethod(TIdFTP,'Noop',TypeInfo(_T15),NoParams,Addr(TIdFTP.Noop));

RegRegisterMethod(TIdFTP,'Put',TypeInfo(_T16),[
TypeInfo(TStream),
TypeInfo(String),
TypeInfo(Boolean)],Addr(__TIdFTP__Put__Wrapper));

RegRegisterMethod(TIdFTP,'Quit',TypeInfo(_T17),NoParams,Addr(TIdFTP.Quit));

RegRegisterMethod(TIdFTP,'Quote',TypeInfo(_T18),[
TypeInfo(String),TypeInfo(SmallInt)],Addr(TIdFTP.Quote));

RegRegisterMethod(TIdFTP,'RemoveDir',TypeInfo(_T19),[
TypeInfo(String)],Addr(TIdFTP.RemoveDir));

RegRegisterMethod(TIdFTP,'Rename',TypeInfo(_T20),[
TypeInfo(String),
TypeInfo(String)],Addr(TIdFTP.Rename));

RegRegisterMethod(TIdFTP,'ResumeSupported',TypeInfo(_T21),[TypeInfo(Boolean)],Addr(TIdFTP.ResumeSupported));

RegRegisterMethod(TIdFTP,'RetrieveCurrentDir',TypeInfo(_T22),[TypeInfo(String)],Addr(TIdFTP.RetrieveCurrentDir));

RegRegisterMethod(TIdFTP,'Site',TypeInfo(_T23),[
TypeInfo(String)],Addr(TIdFTP.Site));

RegRegisterMethod(TIdFTP,'Size',TypeInfo(_T24),[
TypeInfo(String),TypeInfo(Integer)],Addr(TIdFTP.Size));

RegRegisterMethod(TIdFTP,'Status',TypeInfo(_T25),[
TypeInfo(TStringList)],Addr(TIdFTP.Status));

RegRegisterMethod(TIdFTP,'StructureMount',TypeInfo(_T26),[
TypeInfo(String)],Addr(TIdFTP.StructureMount));

RegRegisterMethod(TIdFTP,'TransferMode',TypeInfo(_T27),[
TypeInfo(TIdFTPTransferMode)],Addr(TIdFTP.TransferMode));

RegisterProc(TIdFTP,'ReInitialize',mtScriptMethod,TypeInfo(_T28),[
TypeInfo(Cardinal)],Addr(__TIdFTP__ReInitialize__Wrapper),cRegister);

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
RegisterEvent(TypeInfo(TIdCheckListFormat),[
TypeInfo(TObject),
TypeInfo(String),
TypeInfo(TIdFTPListFormat)]);

RegisterEvent(TypeInfo(TIdCreateFTPList),[
TypeInfo(TObject),
TypeInfo(TIdFTPListItems)]);

RegisterEvent(TypeInfo(TIdFtpAfterGet),[
TypeInfo(TObject),
TypeInfo(TStream)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
