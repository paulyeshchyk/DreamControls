{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit dcpascal_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  forms,
  dcsystem,
  consts,
  dcscript,
  classes,
  sysutils,
  dcscriptdebug,
  sysconst,
  dcdscript,
  ActiveX,
  Windows,
  Variants,
  VarUtils,
  RTLConsts,
  typinfo,
  dcconsts,
  dcdreamlib,
  dcparser,
  dcpascal;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = function (const p0 : string): string of object;

{_T1 = function (const p0 : IDispatch;
const p1 : string;
p2 : Integer;
p3 : POleVariantArray;
var p4 : variant;
var p5 : string): Boolean of object;}

{_T2 = procedure (const p0 : Array of string;
const p1 : Array of PTypeInfo) of object;}

_T3 = procedure (const p0 : Array of string) of object;

_T4 = procedure (p0 : TStream) of object;

_T5 = function : Integer of object;

_T6 = procedure (p0 : Integer) of object;

_T7 = _T5;

_T8 = function (const p0 : string;
var p1 : variant): Boolean of object;

_T9 = procedure  of object;

_T10 = procedure (p0 : TIdentListItem) of object;

_T11 = function : Boolean of object;

function __DC__GetTDelphiRunner__DSProject(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDelphiRunner(Instance).DSProject);
end;

function __DC__GetTIdentListItem__Params(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdentListItem(Instance).Params[OleVariant(Params^[0])];
end;

procedure __DC__SetTIdentListItem__Params(Instance : TObject; Params : PVariantArgList);
begin
TIdentListItem(Instance).Params[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TDelphiRunner,'DSProject',__DC__GetTDelphiRunner__DSProject,nil);
RegisterIndexedProperty(TIdentListItem,'Params',1,False,__DC__GetTIdentListItem__Params,__DC__SetTIdentListItem__Params);
end;

const __ConstNames0 : array[0..27] of string = (
'SErrScriptNotParsed'
,'SErrConstantExpected'
,'SErrUnterminated'
,'SErrSymbol'
,'SErrObjectTypeExpected'
,'SErrUndeclaredIdentifier'
,'SErrEvaluate'
,'SErrDivByZero'
,'SErrParamsCount'
,'SErrProcedureResult'
,'SErrFunctionNeedsResult'
,'SErrLabelNotSet'
,'SExpression'
,'SErrLowBoundExceedsHighBound'
,'SErrDefValueIsVar'
,'SErrDefValueRequired'
,'SErrOrdinalTypeExpected'
,'SErrUnknownDirective'
,'SErrUnknownType'
,'SErrOutOfMem'
,'SErrTopLevelVar'
,'SErrUnexpectedEOF'
,'tivariable'
,'tiprocedure'
,'tifunction'
,'ptNormal'
,'ptVar'
,'ptConst'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,SErrScriptNotParsed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,SErrConstantExpected));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,SErrUnterminated));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,SErrSymbol));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,SErrObjectTypeExpected));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,SErrUndeclaredIdentifier));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,SErrEvaluate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,SErrDivByZero));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,SErrParamsCount));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,SErrProcedureResult));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,SErrFunctionNeedsResult));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,SErrLabelNotSet));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,SExpression));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,SErrLowBoundExceedsHighBound));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,SErrDefValueIsVar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,SErrDefValueRequired));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,SErrOrdinalTypeExpected));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,SErrUnknownDirective));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,SErrUnknownType));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,SErrOutOfMem));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,SErrTopLevelVar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,SErrUnexpectedEOF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,tivariable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,tiprocedure));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,tifunction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,ptNormal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,ptVar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,ptConst));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..1] of TClass = (
TDelphiRunner,
TIdentListItem
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..1] of string = (
'Evaluate'
,'DCUnregisterType'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(string),TypeInfo(string)],Addr(Evaluate),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T3),[
ArrayInfo(TypeInfo(string))],Addr(DCUnregisterType),cRegister);

RegRegisterMethod(TDelphiRunner,'GetProgramCodes',TypeInfo(_T4),[
TypeInfo(TStream)],Addr(TDelphiRunner.GetProgramCodes));

RegRegisterMethod(TDelphiRunner,'GetStackState',TypeInfo(_T5),[TypeInfo(Integer)],Addr(TDelphiRunner.GetStackState));

RegRegisterMethod(TDelphiRunner,'SetStackState',TypeInfo(_T6),[
TypeInfo(Integer)],Addr(TDelphiRunner.SetStackState));

RegRegisterMethod(TDelphiRunner,'GetExecutionLine',TypeInfo(_T7),[TypeInfo(Integer)],Addr(TDelphiRunner.GetExecutionLine));

RegRegisterMethod(TDelphiRunner,'FindConstant',TypeInfo(_T8),[
TypeInfo(string),
TypeInfo(variant),TypeInfo(Boolean)],Addr(TDelphiRunner.FindConstant));

RegisterProc(TIdentListItem,'Create',mtConstructor,TypeInfo(_T9),NoParams,Addr(TIdentListItem.Create),cRegister);

RegRegisterMethod(TIdentListItem,'Assign',TypeInfo(_T10),[
TypeInfo(TIdentListItem)],Addr(TIdentListItem.Assign));

RegRegisterMethod(TIdentListItem,'HasParams',TypeInfo(_T11),[TypeInfo(Boolean)],Addr(TIdentListItem.HasParams));

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'GetObjectProperty',mtProc,TypeInfo(_T1),[
TypeInfo(IDispatch),
TypeInfo(string),
TypeInfo(Integer),
TypeInfoPointer,
TypeInfo(variant),
TypeInfo(string),TypeInfo(Boolean)],Addr(GetObjectProperty),cRegister)}

{RegisterProc(nil,'DCRegisterType',mtProc,TypeInfo(_T2),[
ArrayInfo(TypeInfo(string)),
ArrayInfo(TypeInfoPointer)],Addr(DCRegisterType),cRegister)}

RegisterEvent(TypeInfo(TExecuteLineEvent),[
TypeInfo(TObject),
TypeInfo(Integer)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
