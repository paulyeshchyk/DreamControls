{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDSNMP_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  SysUtils,
  IdUDPBase,
  IdUDPClient,
  IdException,
  IdASN1Util,
  IdSNMP;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = function : Boolean of object;

_T1 = function (const p0 : string;
const p1 : string;
const p2 : string;
var p3 : string): Boolean of object;

_T2 = function (const p0 : string;
const p1 : string;
const p2 : string;
p3 : Integer;
p4 : Integer;
p5 : Integer;
p6 : TStringList;
p7 : TStringList): Integer of object;

_T3 = function (var p0 : string;
var p1 : string;
var p2 : string;
var p3 : Integer;
var p4 : Integer;
var p5 : Integer;
var p6 : Integer;
var p7 : TStringList;
var p8 : TStringList): Integer of object;

_T4 = function : Integer of object;

_T5 = _T4;

_T6 = procedure (p0 : TIdSNMP) of object;

_T7 = _T4;

_T8 = _T4;

_T9 = procedure (p0 : string) of object;

_T10 = function : string of object;

_T11 = procedure  of object;

_T12 = procedure (p0 : string;
p1 : string;
p2 : Integer) of object;

_T13 = procedure (p0 : Integer) of object;

_T14 = function (p0 : string): string of object;

procedure __TSNMPInfo__MIBAdd__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
2:
begin
TSNMPInfo(__Instance).MIBAdd(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
3:
begin
TSNMPInfo(__Instance).MIBAdd(OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function __DC__GetTSNMPInfo__Owner(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TSNMPInfo(Instance).Owner);
end;

function __DC__GetTSNMPInfo__Community(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSNMPInfo(Instance).Community;
end;

procedure __DC__SetTSNMPInfo__Community(Instance : TObject; Params : PVariantArgList);
begin
TSNMPInfo(Instance).Community:=OleVariant(Params^[0]);
end;

function __DC__GetTSNMPInfo__ValueCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSNMPInfo(Instance).ValueCount;
end;

function __DC__GetTSNMPInfo__Value(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSNMPInfo(Instance).Value[OleVariant(Params^[0])];
end;

function __DC__GetTSNMPInfo__ValueOID(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSNMPInfo(Instance).ValueOID[OleVariant(Params^[0])];
end;

function __DC__GetTSNMPInfo__valueType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSNMPInfo(Instance).valueType[OleVariant(Params^[0])];
end;

procedure __RegisterProps;
begin
RegisterProperty(TSNMPInfo,'Owner',__DC__GetTSNMPInfo__Owner,nil);
RegisterProperty(TSNMPInfo,'Community',__DC__GetTSNMPInfo__Community,__DC__SetTSNMPInfo__Community);
RegisterProperty(TSNMPInfo,'ValueCount',__DC__GetTSNMPInfo__ValueCount,nil);
RegisterIndexedProperty(TSNMPInfo,'Value',1,False,__DC__GetTSNMPInfo__Value,nil);
RegisterIndexedProperty(TSNMPInfo,'ValueOID',1,False,__DC__GetTSNMPInfo__ValueOID,nil);
RegisterIndexedProperty(TSNMPInfo,'valueType',1,False,__DC__GetTSNMPInfo__valueType,nil);
end;

const __ConstNames0 : array[0..10] of string = (
'PDUGetRequest'
,'PDUGetNextRequest'
,'PDUGetResponse'
,'PDUSetRequest'
,'PDUTrap'
,'ENoError'
,'ETooBig'
,'ENoSuchName'
,'EBadValue'
,'EReadOnly'
,'EGenErr'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,PDUGetRequest));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,PDUGetNextRequest));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,PDUGetResponse));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,PDUSetRequest));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,PDUTrap));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,ENoError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,ETooBig));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,ENoSuchName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,EBadValue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,EReadOnly));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,EGenErr));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..1] of TClass = (
TIdSNMP,
TSNMPInfo
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegRegisterMethod(TIdSNMP,'SendQuery',TypeInfo(_T0),[TypeInfo(Boolean)],Addr(TIdSNMP.SendQuery));

RegRegisterMethod(TIdSNMP,'QuickSend',TypeInfo(_T1),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(string),
TypeInfo(string),TypeInfo(Boolean)],Addr(TIdSNMP.QuickSend));

RegRegisterMethod(TIdSNMP,'QuickSendTrap',TypeInfo(_T2),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(string),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(TStringList),
TypeInfo(TStringList),TypeInfo(Integer)],Addr(TIdSNMP.QuickSendTrap));

RegRegisterMethod(TIdSNMP,'QuickReceiveTrap',TypeInfo(_T3),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(string),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(TStringList),
TypeInfo(TStringList),TypeInfo(Integer)],Addr(TIdSNMP.QuickReceiveTrap));

RegRegisterMethod(TIdSNMP,'SendTrap',TypeInfo(_T4),[TypeInfo(Integer)],Addr(TIdSNMP.SendTrap));

RegRegisterMethod(TIdSNMP,'ReceiveTrap',TypeInfo(_T5),[TypeInfo(Integer)],Addr(TIdSNMP.ReceiveTrap));

RegisterProc(TSNMPInfo,'Create',mtConstructor,TypeInfo(_T6),[
TypeInfo(TIdSNMP)],Addr(TSNMPInfo.Create),cRegister);

RegRegisterMethod(TSNMPInfo,'EncodeTrap',TypeInfo(_T7),[TypeInfo(Integer)],Addr(TSNMPInfo.EncodeTrap));

RegRegisterMethod(TSNMPInfo,'DecodeTrap',TypeInfo(_T8),[TypeInfo(Integer)],Addr(TSNMPInfo.DecodeTrap));

RegRegisterMethod(TSNMPInfo,'DecodeBuf',TypeInfo(_T9),[
TypeInfo(string)],Addr(TSNMPInfo.DecodeBuf));

RegRegisterMethod(TSNMPInfo,'EncodeBuf',TypeInfo(_T10),[TypeInfo(string)],Addr(TSNMPInfo.EncodeBuf));

RegRegisterMethod(TSNMPInfo,'Clear',TypeInfo(_T11),NoParams,Addr(TSNMPInfo.Clear));

RegisterProc(TSNMPInfo,'MIBAdd',mtScriptMethod,TypeInfo(_T12),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(Integer)],Addr(__TSNMPInfo__MIBAdd__Wrapper),cRegister);

RegRegisterMethod(TSNMPInfo,'MIBDelete',TypeInfo(_T13),[
TypeInfo(Integer)],Addr(TSNMPInfo.MIBDelete));

RegRegisterMethod(TSNMPInfo,'MIBGet',TypeInfo(_T14),[
TypeInfo(string),TypeInfo(string)],Addr(TSNMPInfo.MIBGet));

end;
initialization
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
