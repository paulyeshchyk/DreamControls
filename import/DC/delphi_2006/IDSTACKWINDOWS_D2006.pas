{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDSTACKWINDOWS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdStack,
  IdStackConsts,
  IdWinsock2,
  Windows,
  IdStackWindows;
function ConvertTIdLingerToVariant(var R : TIdLinger) : OleVariant;
function ConvertVariantToTIdLinger(const V : OleVariant) : TIdLinger;
function ConvertTLingerToVariant(var R : TLinger) : OleVariant;
function ConvertVariantToTLinger(const V : OleVariant) : TLinger;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TIdLinger__Wrapper = class(TDCRecordWrapper)
private
fR : TIdLinger;
public
function GetRecordPtr : pointer; override;
published
procedure setl_onoff(const val : Word);
function getl_onoff : Word;
property l_onoff : Word read getl_onoff write setl_onoff;
procedure setl_linger(const val : Word);
function getl_linger : Word;
property l_linger : Word read getl_linger write setl_linger;
end;
type __TLinger__Wrapper = class(TDCRecordWrapper)
private
fR : TLinger;
public
function GetRecordPtr : pointer; override;
published
procedure setl_onoff(const val : Word);
function getl_onoff : Word;
property l_onoff : Word read getl_onoff write setl_onoff;
procedure setl_linger(const val : Word);
function getl_linger : Word;
property l_linger : Word read getl_linger write setl_linger;
end;
function __TIdLinger__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIdLinger__Wrapper.setl_onoff(const val : Word);
begin
TIdLinger(GetRecordPtr^).l_onoff := val;
end;
function __TIdLinger__Wrapper.getl_onoff : Word;
begin
result := TIdLinger(GetRecordPtr^).l_onoff;
end;
procedure __TIdLinger__Wrapper.setl_linger(const val : Word);
begin
TIdLinger(GetRecordPtr^).l_linger := val;
end;
function __TIdLinger__Wrapper.getl_linger : Word;
begin
result := TIdLinger(GetRecordPtr^).l_linger;
end;
function __TLinger__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TLinger__Wrapper.setl_onoff(const val : Word);
begin
TLinger(GetRecordPtr^).l_onoff := val;
end;
function __TLinger__Wrapper.getl_onoff : Word;
begin
result := TLinger(GetRecordPtr^).l_onoff;
end;
procedure __TLinger__Wrapper.setl_linger(const val : Word);
begin
TLinger(GetRecordPtr^).l_linger := val;
end;
function __TLinger__Wrapper.getl_linger : Word;
begin
result := TLinger(GetRecordPtr^).l_linger;
end;
function _TIdLinger_ : IDispatch;
begin
  result := __TIdLinger__Wrapper.Create;
end;
function _TLinger_ : IDispatch;
begin
  result := __TLinger__Wrapper.Create;
end;

type __TIdLinger__Wrapper__ = class(__TIdLinger__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIdLinger__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIdLingerToVariant(var R : TIdLinger) : OleVariant;
var
__rw : __TIdLinger__Wrapper__;
begin
__rw := __TIdLinger__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIdLinger(const V : OleVariant) : TIdLinger;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIdLinger((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TLinger__Wrapper__ = class(__TLinger__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TLinger__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTLingerToVariant(var R : TLinger) : OleVariant;
var
__rw : __TLinger__Wrapper__;
begin
__rw := __TLinger__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTLinger(const V : OleVariant) : TLinger;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TLinger((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..1] of TClass = (
TIdSocketListWindows,
TIdStackWindows
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..1] of string = (
'TIdLinger'
,'TLinger'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TIdLinger_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_TLinger_)));
end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
