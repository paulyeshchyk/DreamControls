{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit dcrpc_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  SysUtils,
  Classes,
  sdMain,
  dcRPC;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = function (p0 : TMutex): TEvent of object;

_T1 = procedure  of object;

_T2 = _T1;

_T3 = _T1;

_T4 = _T1;

_T5 = _T1;

_T6 = procedure (p0 : Boolean) of object;

_T7 = procedure (p0 : THandle) of object;

_T8 = _T1;

_T9 = _T1;

_T10 = _T1;

_T11 = _T1;

_T12 = _T1;

_T13 = _T1;

_T14 = _T1;

_T15 = _T1;

_T16 = _T1;

_T17 = function : Boolean of object;

_T18 = function : Integer of object;

_T19 = function : String of object;

_T20 = procedure (const p0 : Boolean) of object;

_T21 = procedure (const p0 : Integer) of object;

_T22 = procedure (const p0 : String) of object;

_T23 = procedure (const p0 : String;
p1 : Boolean) of object;

_T24 = _T1;

_T25 = _T1;

_T26 = _T1;

_T27 = function (p0 : DWord): Boolean of object;

_T28 = procedure (p0 : TClientStub) of object;

_T29 = _T22;

_T30 = _T27;

_T31 = _T17;

_T32 = procedure (const p0 : String;
p1 : Integer) of object;

_T33 = _T27;

_T34 = _T17;

_T35 = _T32;

function __DC__GetTClientStub__InSynchronize(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TClientStub(Instance).InSynchronize;
end;

procedure __DC__SetTClientStub__InSynchronize(Instance : TObject; Params : PVariantArgList);
begin
TClientStub(Instance).InSynchronize:=OleVariant(Params^[0]);
end;

function __DC__GetTClientStub__IPCClient(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TClientStub(Instance).IPCClient);
end;

function __DC__GetTClientStub__CallType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TClientStub(Instance).CallType;
end;

procedure __DC__SetTClientStub__CallType(Instance : TObject; Params : PVariantArgList);
begin
TClientStub(Instance).CallType:=OleVariant(Params^[0]);
end;

function __DC__GetTClientStub__ClientCallEvent(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TClientStub(Instance).ClientCallEvent);
end;

procedure __DC__SetTClientStub__ClientCallEvent(Instance : TObject; Params : PVariantArgList);
begin
TClientStub(Instance).ClientCallEvent:=TEvent(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTClientStub__ClientRetEvent(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TClientStub(Instance).ClientRetEvent);
end;

procedure __DC__SetTClientStub__ClientRetEvent(Instance : TObject; Params : PVariantArgList);
begin
TClientStub(Instance).ClientRetEvent:=TEvent(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTClientStub__IsStubThread(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TClientStub(Instance).IsStubThread;
end;

function __DC__GetTClientStub__ServerCallEvent(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TClientStub(Instance).ServerCallEvent);
end;

procedure __DC__SetTClientStub__ServerCallEvent(Instance : TObject; Params : PVariantArgList);
begin
TClientStub(Instance).ServerCallEvent:=TEvent(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTClientStub__ServerRetEvent(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TClientStub(Instance).ServerRetEvent);
end;

procedure __DC__SetTClientStub__ServerRetEvent(Instance : TObject; Params : PVariantArgList);
begin
TClientStub(Instance).ServerRetEvent:=TEvent(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomIPCClient__DataInEvent(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomIPCClient(Instance).DataInEvent);
end;

procedure __DC__SetTCustomIPCClient__DataInEvent(Instance : TObject; Params : PVariantArgList);
begin
TCustomIPCClient(Instance).DataInEvent:=TEvent(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomIPCClient__DataOutEvent(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomIPCClient(Instance).DataOutEvent);
end;

procedure __DC__SetTCustomIPCClient__DataOutEvent(Instance : TObject; Params : PVariantArgList);
begin
TCustomIPCClient(Instance).DataOutEvent:=TEvent(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomIPCClient__Locked(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomIPCClient(Instance).Locked;
end;

function __DC__GetTCustomIPCClient__Mutex(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomIPCClient(Instance).Mutex);
end;

procedure __DC__SetTCustomIPCClient__Mutex(Instance : TObject; Params : PVariantArgList);
begin
TCustomIPCClient(Instance).Mutex:=TMutex(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomIPCClient__SharedMem(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomIPCClient(Instance).SharedMem);
end;

procedure __DC__SetTCustomIPCClient__SharedMem(Instance : TObject; Params : PVariantArgList);
begin
TCustomIPCClient(Instance).SharedMem:=TSharedMem(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomIPCClient__StartPos(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomIPCClient(Instance).StartPos;
end;

function __DC__GetTEvent__Name(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TEvent(Instance).Name;
end;

function __DC__GetTHandledObject__Handle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := THandledObject(Instance).Handle;
end;

function __DC__GetTSharedMem__Buffer(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TSharedMem(Instance).Buffer);
end;

function __DC__GetTSharedMem__Name(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSharedMem(Instance).Name;
end;

function __DC__GetTSharedMem__Size(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSharedMem(Instance).Size;
end;

procedure __RegisterProps;
begin
RegisterProperty(TClientStub,'InSynchronize',__DC__GetTClientStub__InSynchronize,__DC__SetTClientStub__InSynchronize);
RegisterProperty(TClientStub,'IPCClient',__DC__GetTClientStub__IPCClient,nil);
RegisterProperty(TClientStub,'CallType',__DC__GetTClientStub__CallType,__DC__SetTClientStub__CallType);
RegisterProperty(TClientStub,'ClientCallEvent',__DC__GetTClientStub__ClientCallEvent,__DC__SetTClientStub__ClientCallEvent);
RegisterProperty(TClientStub,'ClientRetEvent',__DC__GetTClientStub__ClientRetEvent,__DC__SetTClientStub__ClientRetEvent);
RegisterProperty(TClientStub,'IsStubThread',__DC__GetTClientStub__IsStubThread,nil);
RegisterProperty(TClientStub,'ServerCallEvent',__DC__GetTClientStub__ServerCallEvent,__DC__SetTClientStub__ServerCallEvent);
RegisterProperty(TClientStub,'ServerRetEvent',__DC__GetTClientStub__ServerRetEvent,__DC__SetTClientStub__ServerRetEvent);
RegisterProperty(TCustomIPCClient,'DataInEvent',__DC__GetTCustomIPCClient__DataInEvent,__DC__SetTCustomIPCClient__DataInEvent);
RegisterProperty(TCustomIPCClient,'DataOutEvent',__DC__GetTCustomIPCClient__DataOutEvent,__DC__SetTCustomIPCClient__DataOutEvent);
RegisterProperty(TCustomIPCClient,'Locked',__DC__GetTCustomIPCClient__Locked,nil);
RegisterProperty(TCustomIPCClient,'Mutex',__DC__GetTCustomIPCClient__Mutex,__DC__SetTCustomIPCClient__Mutex);
RegisterProperty(TCustomIPCClient,'SharedMem',__DC__GetTCustomIPCClient__SharedMem,__DC__SetTCustomIPCClient__SharedMem);
RegisterProperty(TCustomIPCClient,'StartPos',__DC__GetTCustomIPCClient__StartPos,nil);
RegisterProperty(TEvent,'Name',__DC__GetTEvent__Name,nil);
RegisterProperty(THandledObject,'Handle',__DC__GetTHandledObject__Handle,nil);
RegisterProperty(TSharedMem,'Buffer',__DC__GetTSharedMem__Buffer,nil);
RegisterProperty(TSharedMem,'Name',__DC__GetTSharedMem__Name,nil);
RegisterProperty(TSharedMem,'Size',__DC__GetTSharedMem__Size,nil);
end;

const __ConstNames0 : array[0..5] of string = (
'cmNone'
,'cmRead'
,'cmWrite'
,'ctNone'
,'ctCall'
,'ctRet'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,cmNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,cmRead));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,cmWrite));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,ctNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,ctCall));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,ctRet));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..7] of TClass = (
TClientStub,
TCustomIPCClient,
TEvent,
THandledObject,
TIPCClient,
TMutex,
TSemaphore,
TSharedMem
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'GenerateEvent'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(TMutex),TypeInfo(TEvent)],Addr(GenerateEvent),cRegister);

//RegRegisterMethod(TClientStub,'DoCall',TypeInfo(_T1),NoParams, pointer(8));
RegRegisterMethod(TClientStub,'DoCall',TypeInfo(_T1),NoParams,  getVMTProcAddr('TClientStub','DoCall',8));


//RegRegisterMethod(TClientStub,'DoIdle',TypeInfo(_T2),NoParams, pointer(12));
RegRegisterMethod(TClientStub,'DoIdle',TypeInfo(_T2),NoParams,  getVMTProcAddr('TClientStub','DoIdle',12));


//RegRegisterMethod(TClientStub,'DoProcess',TypeInfo(_T3),NoParams, pointer(16));
RegRegisterMethod(TClientStub,'DoProcess',TypeInfo(_T3),NoParams,  getVMTProcAddr('TClientStub','DoProcess',16));


//RegRegisterMethod(TClientStub,'InitEvents',TypeInfo(_T4),NoParams, pointer(20));
RegRegisterMethod(TClientStub,'InitEvents',TypeInfo(_T4),NoParams,  getVMTProcAddr('TClientStub','InitEvents',20));


//RegRegisterMethod(TClientStub,'InitIPC',TypeInfo(_T5),NoParams, pointer(24));
RegRegisterMethod(TClientStub,'InitIPC',TypeInfo(_T5),NoParams,  getVMTProcAddr('TClientStub','InitIPC',24));


RegisterProc(TClientStub,'Create',mtConstructor,TypeInfo(_T6),[
TypeInfo(Boolean)],Addr(TClientStub.Create),cRegister);

RegRegisterMethod(TClientStub,'ProcessGetMutex',TypeInfo(_T7),[
TypeInfo(THandle)],Addr(TClientStub.ProcessGetMutex));

RegRegisterMethod(TClientStub,'Return',TypeInfo(_T8),NoParams,Addr(TClientStub.Return));

RegRegisterMethod(TClientStub,'WaitReturn',TypeInfo(_T9),NoParams,Addr(TClientStub.WaitReturn));

//RegRegisterMethod(TCustomIPCClient,'Lock',TypeInfo(_T10),NoParams, pointer(28));
RegRegisterMethod(TCustomIPCClient,'Lock',TypeInfo(_T10),NoParams,  getVMTProcAddr('TCustomIPCClient','Lock',28));


//RegRegisterMethod(TCustomIPCClient,'DataOutSignal',TypeInfo(_T11),NoParams, pointer(32));
RegRegisterMethod(TCustomIPCClient,'DataOutSignal',TypeInfo(_T11),NoParams,  getVMTProcAddr('TCustomIPCClient','DataOutSignal',32));


//RegRegisterMethod(TCustomIPCClient,'BeginRead',TypeInfo(_T12),NoParams, pointer(36));
RegRegisterMethod(TCustomIPCClient,'BeginRead',TypeInfo(_T12),NoParams,  getVMTProcAddr('TCustomIPCClient','BeginRead',36));


//RegRegisterMethod(TCustomIPCClient,'BeginWrite',TypeInfo(_T13),NoParams, pointer(40));
RegRegisterMethod(TCustomIPCClient,'BeginWrite',TypeInfo(_T13),NoParams,  getVMTProcAddr('TCustomIPCClient','BeginWrite',40));


//RegRegisterMethod(TCustomIPCClient,'EndRead',TypeInfo(_T14),NoParams, pointer(44));
RegRegisterMethod(TCustomIPCClient,'EndRead',TypeInfo(_T14),NoParams,  getVMTProcAddr('TCustomIPCClient','EndRead',44));


//RegRegisterMethod(TCustomIPCClient,'EndWrite',TypeInfo(_T15),NoParams, pointer(48));
RegRegisterMethod(TCustomIPCClient,'EndWrite',TypeInfo(_T15),NoParams,  getVMTProcAddr('TCustomIPCClient','EndWrite',48));


RegRegisterMethod(TCustomIPCClient,'UnLock',TypeInfo(_T16),NoParams,Addr(TCustomIPCClient.UnLock));

RegRegisterMethod(TCustomIPCClient,'ReadBool',TypeInfo(_T17),[TypeInfo(Boolean)],Addr(TCustomIPCClient.ReadBool));

RegRegisterMethod(TCustomIPCClient,'ReadInt',TypeInfo(_T18),[TypeInfo(Integer)],Addr(TCustomIPCClient.ReadInt));

RegRegisterMethod(TCustomIPCClient,'ReadStr',TypeInfo(_T19),[TypeInfo(String)],Addr(TCustomIPCClient.ReadStr));

RegRegisterMethod(TCustomIPCClient,'WriteBool',TypeInfo(_T20),[
TypeInfo(Boolean)],Addr(TCustomIPCClient.WriteBool));

RegRegisterMethod(TCustomIPCClient,'WriteInt',TypeInfo(_T21),[
TypeInfo(Integer)],Addr(TCustomIPCClient.WriteInt));

RegRegisterMethod(TCustomIPCClient,'WriteStr',TypeInfo(_T22),[
TypeInfo(String)],Addr(TCustomIPCClient.WriteStr));

RegisterProc(TEvent,'Create',mtConstructor,TypeInfo(_T23),[
TypeInfo(String),
TypeInfo(Boolean)],Addr(TEvent.Create),cRegister);

RegRegisterMethod(TEvent,'Pulse',TypeInfo(_T24),NoParams,Addr(TEvent.Pulse));

RegRegisterMethod(TEvent,'Reset',TypeInfo(_T25),NoParams,Addr(TEvent.Reset));

RegRegisterMethod(TEvent,'Signal',TypeInfo(_T26),NoParams,Addr(TEvent.Signal));

RegRegisterMethod(TEvent,'Wait',TypeInfo(_T27),[
TypeInfo(DWord),TypeInfo(Boolean)],Addr(TEvent.Wait));

RegisterProc(TIPCClient,'Create',mtConstructor,TypeInfo(_T28),[
TypeInfo(TClientStub)],Addr(TIPCClient.Create),cRegister);

RegisterProc(TMutex,'Create',mtConstructor,TypeInfo(_T29),[
TypeInfo(String)],Addr(TMutex.Create),cRegister);

RegRegisterMethod(TMutex,'Get',TypeInfo(_T30),[
TypeInfo(DWord),TypeInfo(Boolean)],Addr(TMutex.Get));

RegRegisterMethod(TMutex,'Release',TypeInfo(_T31),[TypeInfo(Boolean)],Addr(TMutex.Release));

RegisterProc(TSemaphore,'Create',mtConstructor,TypeInfo(_T32),[
TypeInfo(String),
TypeInfo(Integer)],Addr(TSemaphore.Create),cRegister);

RegRegisterMethod(TSemaphore,'Get',TypeInfo(_T33),[
TypeInfo(DWord),TypeInfo(Boolean)],Addr(TSemaphore.Get));

RegRegisterMethod(TSemaphore,'Release',TypeInfo(_T34),[TypeInfo(Boolean)],Addr(TSemaphore.Release));

RegisterProc(TSharedMem,'Create',mtConstructor,TypeInfo(_T35),[
TypeInfo(String),
TypeInfo(Integer)],Addr(TSharedMem.Create),cRegister);

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
