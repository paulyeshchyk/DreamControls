{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDTCPCLIENT_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdStack,
  IdException,
  IdGlobal,
  IdTCPConnection,
  IdTCPClient;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (const p0 : string) of object;

_T1 = procedure (const p0 : Integer) of object;

_T2 = procedure  of object;

_T3 = _T1;

_T4 = function : string of object;

procedure __TIdTCPClient__Connect__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
0:
begin
TIdTCPClient(__Instance).Connect;
end;
1:
begin
TIdTCPClient(__Instance).Connect(OleVariant(pargs^[0]));
end;
end
end;

function __DC__GetTIdTCPClient__BoundPortMax(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdTCPClient(Instance).BoundPortMax;
end;

procedure __DC__SetTIdTCPClient__BoundPortMax(Instance : TObject; Params : PVariantArgList);
begin
TIdTCPClient(Instance).BoundPortMax:=OleVariant(Params^[0]);
end;

function __DC__GetTIdTCPClient__BoundPortMin(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdTCPClient(Instance).BoundPortMin;
end;

procedure __DC__SetTIdTCPClient__BoundPortMin(Instance : TObject; Params : PVariantArgList);
begin
TIdTCPClient(Instance).BoundPortMin:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TIdTCPClient,'BoundPortMax',__DC__GetTIdTCPClient__BoundPortMax,__DC__SetTIdTCPClient__BoundPortMax);
RegisterProperty(TIdTCPClient,'BoundPortMin',__DC__GetTIdTCPClient__BoundPortMin,__DC__SetTIdTCPClient__BoundPortMin);
end;

const __ConstNames0 : array[0..0] of string = (
'BoundPortDefault'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,BoundPortDefault));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..0] of TClass = (
TIdTCPClient
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TIdTCPClient,'SetHost',TypeInfo(_T0),[TypeInfo(string)], pointer(136));
RegRegisterMethod(TIdTCPClient,'SetHost',TypeInfo(_T0),[TypeInfo(string)],  getVMTProcAddr('TIdTCPClient','SetHost',136));


//RegRegisterMethod(TIdTCPClient,'SetPort',TypeInfo(_T1),[TypeInfo(Integer)], pointer(140));
RegRegisterMethod(TIdTCPClient,'SetPort',TypeInfo(_T1),[TypeInfo(Integer)],  getVMTProcAddr('TIdTCPClient','SetPort',140));


//RegRegisterMethod(TIdTCPClient,'DoOnConnected',TypeInfo(_T2),NoParams, pointer(144));
RegRegisterMethod(TIdTCPClient,'DoOnConnected',TypeInfo(_T2),NoParams,  getVMTProcAddr('TIdTCPClient','DoOnConnected',144));


RegisterProc(TIdTCPClient,'Connect',mtScriptMethod,TypeInfo(_T3),[
TypeInfo(Integer)],Addr(__TIdTCPClient__Connect__Wrapper),cRegister);

//RegRegisterMethod(TIdTCPClient,'ConnectAndGetAll',TypeInfo(_T4),[TypeInfo(string)], pointer(152));
RegRegisterMethod(TIdTCPClient,'ConnectAndGetAll',TypeInfo(_T4),[TypeInfo(string)],  getVMTProcAddr('TIdTCPClient','ConnectAndGetAll',152));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
