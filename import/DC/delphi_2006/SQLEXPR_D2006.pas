{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit SQLEXPR_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  SysUtils,
  Variants,
  Classes,
  DB,
  DBCommon,
  DBCommonTypes,
  DBXpress,
  SqlTimSt,
  WideStrings,
  SqlExpr;
function ConvertSPParamDescToVariant(var R : SPParamDesc) : OleVariant;
function ConvertVariantToSPParamDesc(const V : OleVariant) : SPParamDesc;
function ConvertSQLSPParamDescToVariant(var R : SQLSPParamDesc) : OleVariant;
function ConvertVariantToSQLSPParamDesc(const V : OleVariant) : SQLSPParamDesc;
function ConvertSQLTRACEDescToVariant(var R : SQLTRACEDesc) : OleVariant;
function ConvertVariantToSQLTRACEDesc(const V : OleVariant) : SQLTRACEDesc;
function ConvertSQLTRACEDesc25ToVariant(var R : SQLTRACEDesc25) : OleVariant;
function ConvertVariantToSQLTRACEDesc25(const V : OleVariant) : SQLTRACEDesc25;
function ConvertSQLTRACEDesc30ToVariant(var R : SQLTRACEDesc30) : OleVariant;
function ConvertVariantToSQLTRACEDesc30(const V : OleVariant) : SQLTRACEDesc30;
function ConvertTSQLSchemaInfoToVariant(var R : TSQLSchemaInfo) : OleVariant;
function ConvertVariantToTSQLSchemaInfo(const V : OleVariant) : TSQLSchemaInfo;
function ConvertTTransactionDescToVariant(var R : TTransactionDesc) : OleVariant;
function ConvertVariantToTTransactionDesc(const V : OleVariant) : TTransactionDesc;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __SPParamDesc__Wrapper = class(TDCRecordWrapper)
private
fR : SPParamDesc;
public
function GetRecordPtr : pointer; override;
published
procedure setiParamNum(const val : Word);
function getiParamNum : Word;
property iParamNum : Word read getiParamNum write setiParamNum;
procedure setszName(const val : WideString);
function getszName : WideString;
property szName : WideString read getszName write setszName;
procedure setiArgType(const val : TParamType);
function getiArgType : TParamType;
property iArgType : TParamType read getiArgType write setiArgType;
procedure setiDataType(const val : TFieldType);
function getiDataType : TFieldType;
property iDataType : TFieldType read getiDataType write setiDataType;
procedure setiUnits1(const val : SmallInt);
function getiUnits1 : SmallInt;
property iUnits1 : SmallInt read getiUnits1 write setiUnits1;
procedure setiUnits2(const val : SmallInt);
function getiUnits2 : SmallInt;
property iUnits2 : SmallInt read getiUnits2 write setiUnits2;
procedure setiLen(const val : LongWord);
function getiLen : LongWord;
property iLen : LongWord read getiLen write setiLen;
end;
type __SQLSPParamDesc__Wrapper = class(TDCRecordWrapper)
private
fR : SQLSPParamDesc;
public
function GetRecordPtr : pointer; override;
published
procedure setiParamNum(const val : Word);
function getiParamNum : Word;
property iParamNum : Word read getiParamNum write setiParamNum;
procedure setszName(const val : WideString);
function getszName : WideString;
property szName : WideString read getszName write setszName;
procedure setiArgType(const val : TParamType);
function getiArgType : TParamType;
property iArgType : TParamType read getiArgType write setiArgType;
procedure setiDataType(const val : TFieldType);
function getiDataType : TFieldType;
property iDataType : TFieldType read getiDataType write setiDataType;
procedure setiUnits1(const val : SmallInt);
function getiUnits1 : SmallInt;
property iUnits1 : SmallInt read getiUnits1 write setiUnits1;
procedure setiUnits2(const val : SmallInt);
function getiUnits2 : SmallInt;
property iUnits2 : SmallInt read getiUnits2 write setiUnits2;
procedure setiLen(const val : LongWord);
function getiLen : LongWord;
property iLen : LongWord read getiLen write setiLen;
end;
type __SQLTRACEDesc__Wrapper = class(TDCRecordWrapper)
private
fR : SQLTRACEDesc;
public
function GetRecordPtr : pointer; override;
published
procedure seteTraceCat(const val : TRACECat);
function geteTraceCat : TRACECat;
property eTraceCat : TRACECat read geteTraceCat write seteTraceCat;
procedure setClientData(const val : Integer);
function getClientData : Integer;
property ClientData : Integer read getClientData write setClientData;
procedure setuTotalMsgLen(const val : Word);
function getuTotalMsgLen : Word;
property uTotalMsgLen : Word read getuTotalMsgLen write setuTotalMsgLen;
end;
type __SQLTRACEDesc25__Wrapper = class(TDCRecordWrapper)
private
fR : SQLTRACEDesc25;
public
function GetRecordPtr : pointer; override;
published
procedure seteTraceCat(const val : TRACECat);
function geteTraceCat : TRACECat;
property eTraceCat : TRACECat read geteTraceCat write seteTraceCat;
procedure setClientData(const val : Integer);
function getClientData : Integer;
property ClientData : Integer read getClientData write setClientData;
procedure setuTotalMsgLen(const val : Word);
function getuTotalMsgLen : Word;
property uTotalMsgLen : Word read getuTotalMsgLen write setuTotalMsgLen;
end;
type __SQLTRACEDesc30__Wrapper = class(TDCRecordWrapper)
private
fR : SQLTRACEDesc30;
public
function GetRecordPtr : pointer; override;
published
procedure seteTraceCat(const val : TRACECat);
function geteTraceCat : TRACECat;
property eTraceCat : TRACECat read geteTraceCat write seteTraceCat;
procedure setClientData(const val : Integer);
function getClientData : Integer;
property ClientData : Integer read getClientData write setClientData;
procedure setuTotalMsgLen(const val : Word);
function getuTotalMsgLen : Word;
property uTotalMsgLen : Word read getuTotalMsgLen write setuTotalMsgLen;
end;
type __TSQLSchemaInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TSQLSchemaInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setFType(const val : TSchemaType);
function getFType : TSchemaType;
property FType : TSchemaType read getFType write setFType;
procedure setObjectName(const val : WideString);
function getObjectName : WideString;
property ObjectName : WideString read getObjectName write setObjectName;
procedure setPattern(const val : WideString);
function getPattern : WideString;
property Pattern : WideString read getPattern write setPattern;
procedure setPackageName(const val : WideString);
function getPackageName : WideString;
property PackageName : WideString read getPackageName write setPackageName;
end;
type __TTransactionDesc__Wrapper = class(TDCRecordWrapper)
private
fR : TTransactionDesc;
public
function GetRecordPtr : pointer; override;
published
procedure setTransactionID(const val : LongWord);
function getTransactionID : LongWord;
property TransactionID : LongWord read getTransactionID write setTransactionID;
procedure setGlobalID(const val : LongWord);
function getGlobalID : LongWord;
property GlobalID : LongWord read getGlobalID write setGlobalID;
procedure setIsolationLevel(const val : TTransIsolationLevel);
function getIsolationLevel : TTransIsolationLevel;
property IsolationLevel : TTransIsolationLevel read getIsolationLevel write setIsolationLevel;
procedure setCustomIsolation(const val : LongWord);
function getCustomIsolation : LongWord;
property CustomIsolation : LongWord read getCustomIsolation write setCustomIsolation;
end;
type __TCustomSQLDataSet__ = class(TCustomSQLDataSet);
type
_T0 = procedure (p0 : TParams;
p1 : TList) of object;

_T1 = procedure (var p0 : TList) of object;

_T2 = procedure (p0 : TStrings;
p1 : String;
p2 : Boolean) of object;

_T3 = procedure (p0 : TStrings;
p1 : Boolean) of object;

_T4 = function (p0 : Boolean): String of object;

_T5 = _T4;

_T6 = procedure (p0 : Pointer) of object;

_T7 = function : Integer of object;

_T8 = _T7;

_T9 = function : WideString of object;

_T10 = procedure (const p0 : TSQLConnection) of object;

_T11 = procedure (const p0 : TSQLCommandType) of object;

_T12 = function (p0 : Boolean): Integer of object;

_T13 = procedure  of object;

_T14 = procedure (const p0 : WideString) of object;

_T15 = function (p0 : TStrings): Integer of object;

_T16 = _T9;

_T17 = function (const p0 : String): TParam of object;

_T18 = _T13;

_T19 = procedure (p0 : TSchemaType;
p1 : WideString;
p2 : WideString;
p3 : WideString) of object;

_T20 = function : Word of object;

_T21 = _T9;

_T22 = _T20;

_T23 = _T20;

_T24 = function : SmallInt of object;

_T25 = _T24;

_T26 = _T20;

_T27 = function : LongWord of object;

_T28 = _T20;

_T29 = function : FLDVchk of object;

_T30 = function : FLDRights of object;

_T31 = function : WordBool of object;

_T32 = procedure (p0 : Word) of object;

_T33 = procedure (p0 : WideString) of object;

_T34 = _T32;

_T35 = _T32;

_T36 = procedure (p0 : SmallInt) of object;

_T37 = _T36;

_T38 = _T32;

_T39 = procedure (p0 : LongWord) of object;

_T40 = _T32;

_T41 = procedure (p0 : FLDVchk) of object;

_T42 = procedure (p0 : FLDRights) of object;

_T43 = procedure (p0 : WordBool) of object;

_T44 = function (p0 : TSQLCommandOption;
p1 : Integer): SQLResult of object;

_T45 = function (p0 : TSQLCommandOption;
const p1 : WideString): SQLResult of object;

_T46 = function (p0 : TSQLCommandOption;
p1 : Pointer;
p2 : SmallInt;
out p3 : SmallInt): SQLResult of object;

_T47 = function (p0 : TSQLCommandOption;
var p1 : WideString): SQLResult of object;

_T48 = function (p0 : Word;
p1 : Word;
p2 : TSTMTParamType;
p3 : Word;
p4 : Word;
p5 : Integer;
p6 : Integer;
p7 : LongWord;
p8 : Pointer;
p9 : Integer): SQLResult of object;

_T49 = function (p0 : Word;
p1 : Word;
p2 : Pointer;
p3 : Integer;
var p4 : Integer): SQLResult of object;

{_T50 = function (p0 : PWideChar;
p1 : Word): SQLResult of object;}

_T51 = function (var p0 : TISQLCursor): SQLResult of object;

{_T52 = function (p0 : PWideChar;
var p1 : TISQLCursor): SQLResult of object;}

_T53 = _T51;

_T54 = function (var p0 : LongWord): SQLResult of object;

_T55 = function : SQLResult of object;

{_T56 = function (p0 : PWideChar): SQLResult of object;}

_T57 = function (out p0 : SmallInt): SQLResult of object;

{_T58 = procedure (p0 : ISQLConnection) of object;}

_T59 = _T55;

_T60 = _T55;

_T61 = function (var p0 : TISQLCommand): SQLResult of object;

_T62 = function (var p0 : TISQLMetaData): SQLResult of object;

_T63 = function (p0 : TSQLConnectionOption;
p1 : Longint): SQLResult of object;

_T64 = function (p0 : TSQLConnectionOption;
const p1 : WideString): SQLResult of object;

_T65 = function (p0 : TSQLConnectionOption;
p1 : Pointer;
p2 : SmallInt;
out p3 : SmallInt): SQLResult of object;

_T66 = function (p0 : TSQLConnectionOption;
var p1 : WideString): SQLResult of object;

_T67 = function (p0 : LongWord): SQLResult of object;

_T68 = _T67;

_T69 = _T67;

{_T70 = function (p0 : PWideChar): SQLResult of object;}

_T71 = _T57;

{_T72 = function : TFLDDescRef of object;}

_T73 = function (p0 : TSQLCursorOption;
p1 : Longint): SQLResult of object;

_T74 = function (p0 : TSQLCursorOption;
const p1 : WideString): SQLResult of object;

_T75 = function (p0 : TSQLCursorOption;
p1 : Pointer;
p2 : SmallInt;
out p3 : SmallInt): SQLResult of object;

_T76 = function (p0 : TSQLCursorOption;
var p1 : WideString): SQLResult of object;

_T77 = function (const p0 : Word): WideString of object;

{_T78 = function (p0 : PWideChar): SQLResult of object;}

_T79 = _T57;

_T80 = function (var p0 : Word): SQLResult of object;

_T81 = function (p0 : Word;
var p1 : Word): SQLResult of object;

{_T82 = function (p0 : Word;
p1 : PWideChar): SQLResult of object;}

_T83 = function (p0 : Word;
var p1 : Word;
var p2 : Word): SQLResult of object;

_T84 = function (p0 : Word;
var p1 : LongWord): SQLResult of object;

_T85 = function (p0 : Word;
var p1 : SmallInt): SQLResult of object;

_T86 = _T85;

_T87 = function (p0 : Word;
var p1 : LongBool): SQLResult of object;

_T88 = _T87;

_T89 = _T87;

_T90 = _T87;

_T91 = _T87;

_T92 = _T55;

{_T93 = function (p0 : Word;
p1 : PChar;
var p2 : LongBool): SQLResult of object;}

{_T94 = function (p0 : Word;
p1 : PWideChar;
var p2 : LongBool): SQLResult of object;}

_T95 = function (p0 : Word;
p1 : Pointer;
var p2 : LongBool): SQLResult of object;

_T96 = _T95;

_T97 = _T95;

_T98 = _T95;

_T99 = _T95;

_T100 = _T95;

_T101 = _T95;

_T102 = _T95;

_T103 = _T95;

_T104 = function (p0 : Word;
var p1 : LongWord;
var p2 : LongBool): SQLResult of object;

_T105 = function (p0 : Word;
p1 : Pointer;
var p2 : LongBool;
p3 : LongWord): SQLResult of object;

_T106 = function (p0 : TSQLMetaDataOption;
p1 : Longint): SQLResult of object;

_T107 = function (p0 : TSQLMetaDataOption;
const p1 : WideString): SQLResult of object;

_T108 = function (p0 : TSQLMetaDataOption;
p1 : Pointer;
p2 : SmallInt;
out p3 : SmallInt): SQLResult of object;

_T109 = function (p0 : TSQLMetaDataOption;
var p1 : WideString): SQLResult of object;

_T110 = function (p0 : TSQLObjectType;
var p1 : TISQLCursor): SQLResult of object;

{_T111 = function (p0 : PWideChar;
p1 : LongWord;
var p2 : TISQLCursor): SQLResult of object;}

{_T112 = function (p0 : PWideChar;
p1 : LongWord;
var p2 : TISQLCursor): SQLResult of object;}

{_T113 = function (p0 : PWideChar;
p1 : PWideChar;
p2 : LongWord;
var p3 : TISQLCursor): SQLResult of object;}

{_T114 = function (p0 : PWideChar;
p1 : PWideChar;
var p2 : TISQLCursor): SQLResult of object;}

{_T115 = function (p0 : PWideChar;
p1 : LongWord;
var p2 : TISQLCursor): SQLResult of object;}

{_T116 = function (p0 : PWideChar): SQLResult of object;}

_T117 = _T57;

_T118 = procedure (p0 : TBlobField;
p1 : TBlobStreamMode) of object;

_T119 = _T13;

_T120 = _T13;

_T121 = _T13;

_T122 = function : TSQLConnection of object;

_T123 = _T13;

_T124 = procedure (const p0 : IDispatch) of object;

_T125 = function (const p0 : WideString;
p1 : TParams;
p2 : Pointer): Integer of object;

_T126 = function (const p0 : WideString): Integer of object;

_T127 = procedure (const p0 : String;
p1 : TStrings) of object;

_T128 = _T127;

_T129 = procedure (p0 : TStrings) of object;

_T130 = _T129;

_T131 = _T129;

_T132 = _T9;

_T133 = procedure (p0 : WideString;
p1 : TList) of object;

_T134 = _T3;

_T135 = _T33;

_T136 = _T124;

{_T137 = procedure (p0 : TSQLCallbackEvent;
p1 : Integer) of object;}

_T138 = _T124;

_T139 = _T9;

_T140 = procedure (p0 : TCustomSQLDataSet) of object;

{_T141 = procedure (p0 : pSQLTRACEDesc;
p1 : Boolean) of object;}

_T142 = procedure (p0 : String) of object;

_T143 = _T142;

_T144 = _T7;

_T145 = function : TCustomSQLDataSet of object;

_T146 = _T13;

_T147 = procedure (p0 : TWideStrings) of object;

function __SPParamDesc__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __SPParamDesc__Wrapper.setiParamNum(const val : Word);
begin
SPParamDesc(GetRecordPtr^).iParamNum := val;
end;
function __SPParamDesc__Wrapper.getiParamNum : Word;
begin
result := SPParamDesc(GetRecordPtr^).iParamNum;
end;
procedure __SPParamDesc__Wrapper.setszName(const val : WideString);
begin
SPParamDesc(GetRecordPtr^).szName := val;
end;
function __SPParamDesc__Wrapper.getszName : WideString;
begin
result := SPParamDesc(GetRecordPtr^).szName;
end;
procedure __SPParamDesc__Wrapper.setiArgType(const val : TParamType);
begin
SPParamDesc(GetRecordPtr^).iArgType := val;
end;
function __SPParamDesc__Wrapper.getiArgType : TParamType;
begin
result := SPParamDesc(GetRecordPtr^).iArgType;
end;
procedure __SPParamDesc__Wrapper.setiDataType(const val : TFieldType);
begin
SPParamDesc(GetRecordPtr^).iDataType := val;
end;
function __SPParamDesc__Wrapper.getiDataType : TFieldType;
begin
result := SPParamDesc(GetRecordPtr^).iDataType;
end;
procedure __SPParamDesc__Wrapper.setiUnits1(const val : SmallInt);
begin
SPParamDesc(GetRecordPtr^).iUnits1 := val;
end;
function __SPParamDesc__Wrapper.getiUnits1 : SmallInt;
begin
result := SPParamDesc(GetRecordPtr^).iUnits1;
end;
procedure __SPParamDesc__Wrapper.setiUnits2(const val : SmallInt);
begin
SPParamDesc(GetRecordPtr^).iUnits2 := val;
end;
function __SPParamDesc__Wrapper.getiUnits2 : SmallInt;
begin
result := SPParamDesc(GetRecordPtr^).iUnits2;
end;
procedure __SPParamDesc__Wrapper.setiLen(const val : LongWord);
begin
SPParamDesc(GetRecordPtr^).iLen := val;
end;
function __SPParamDesc__Wrapper.getiLen : LongWord;
begin
result := SPParamDesc(GetRecordPtr^).iLen;
end;
function __SQLSPParamDesc__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __SQLSPParamDesc__Wrapper.setiParamNum(const val : Word);
begin
SQLSPParamDesc(GetRecordPtr^).iParamNum := val;
end;
function __SQLSPParamDesc__Wrapper.getiParamNum : Word;
begin
result := SQLSPParamDesc(GetRecordPtr^).iParamNum;
end;
procedure __SQLSPParamDesc__Wrapper.setszName(const val : WideString);
begin
SQLSPParamDesc(GetRecordPtr^).szName := val;
end;
function __SQLSPParamDesc__Wrapper.getszName : WideString;
begin
result := SQLSPParamDesc(GetRecordPtr^).szName;
end;
procedure __SQLSPParamDesc__Wrapper.setiArgType(const val : TParamType);
begin
SQLSPParamDesc(GetRecordPtr^).iArgType := val;
end;
function __SQLSPParamDesc__Wrapper.getiArgType : TParamType;
begin
result := SQLSPParamDesc(GetRecordPtr^).iArgType;
end;
procedure __SQLSPParamDesc__Wrapper.setiDataType(const val : TFieldType);
begin
SQLSPParamDesc(GetRecordPtr^).iDataType := val;
end;
function __SQLSPParamDesc__Wrapper.getiDataType : TFieldType;
begin
result := SQLSPParamDesc(GetRecordPtr^).iDataType;
end;
procedure __SQLSPParamDesc__Wrapper.setiUnits1(const val : SmallInt);
begin
SQLSPParamDesc(GetRecordPtr^).iUnits1 := val;
end;
function __SQLSPParamDesc__Wrapper.getiUnits1 : SmallInt;
begin
result := SQLSPParamDesc(GetRecordPtr^).iUnits1;
end;
procedure __SQLSPParamDesc__Wrapper.setiUnits2(const val : SmallInt);
begin
SQLSPParamDesc(GetRecordPtr^).iUnits2 := val;
end;
function __SQLSPParamDesc__Wrapper.getiUnits2 : SmallInt;
begin
result := SQLSPParamDesc(GetRecordPtr^).iUnits2;
end;
procedure __SQLSPParamDesc__Wrapper.setiLen(const val : LongWord);
begin
SQLSPParamDesc(GetRecordPtr^).iLen := val;
end;
function __SQLSPParamDesc__Wrapper.getiLen : LongWord;
begin
result := SQLSPParamDesc(GetRecordPtr^).iLen;
end;
function __SQLTRACEDesc__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __SQLTRACEDesc__Wrapper.seteTraceCat(const val : TRACECat);
begin
SQLTRACEDesc(GetRecordPtr^).eTraceCat := val;
end;
function __SQLTRACEDesc__Wrapper.geteTraceCat : TRACECat;
begin
result := SQLTRACEDesc(GetRecordPtr^).eTraceCat;
end;
procedure __SQLTRACEDesc__Wrapper.setClientData(const val : Integer);
begin
SQLTRACEDesc(GetRecordPtr^).ClientData := val;
end;
function __SQLTRACEDesc__Wrapper.getClientData : Integer;
begin
result := SQLTRACEDesc(GetRecordPtr^).ClientData;
end;
procedure __SQLTRACEDesc__Wrapper.setuTotalMsgLen(const val : Word);
begin
SQLTRACEDesc(GetRecordPtr^).uTotalMsgLen := val;
end;
function __SQLTRACEDesc__Wrapper.getuTotalMsgLen : Word;
begin
result := SQLTRACEDesc(GetRecordPtr^).uTotalMsgLen;
end;
function __SQLTRACEDesc25__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __SQLTRACEDesc25__Wrapper.seteTraceCat(const val : TRACECat);
begin
SQLTRACEDesc25(GetRecordPtr^).eTraceCat := val;
end;
function __SQLTRACEDesc25__Wrapper.geteTraceCat : TRACECat;
begin
result := SQLTRACEDesc25(GetRecordPtr^).eTraceCat;
end;
procedure __SQLTRACEDesc25__Wrapper.setClientData(const val : Integer);
begin
SQLTRACEDesc25(GetRecordPtr^).ClientData := val;
end;
function __SQLTRACEDesc25__Wrapper.getClientData : Integer;
begin
result := SQLTRACEDesc25(GetRecordPtr^).ClientData;
end;
procedure __SQLTRACEDesc25__Wrapper.setuTotalMsgLen(const val : Word);
begin
SQLTRACEDesc25(GetRecordPtr^).uTotalMsgLen := val;
end;
function __SQLTRACEDesc25__Wrapper.getuTotalMsgLen : Word;
begin
result := SQLTRACEDesc25(GetRecordPtr^).uTotalMsgLen;
end;
function __SQLTRACEDesc30__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __SQLTRACEDesc30__Wrapper.seteTraceCat(const val : TRACECat);
begin
SQLTRACEDesc30(GetRecordPtr^).eTraceCat := val;
end;
function __SQLTRACEDesc30__Wrapper.geteTraceCat : TRACECat;
begin
result := SQLTRACEDesc30(GetRecordPtr^).eTraceCat;
end;
procedure __SQLTRACEDesc30__Wrapper.setClientData(const val : Integer);
begin
SQLTRACEDesc30(GetRecordPtr^).ClientData := val;
end;
function __SQLTRACEDesc30__Wrapper.getClientData : Integer;
begin
result := SQLTRACEDesc30(GetRecordPtr^).ClientData;
end;
procedure __SQLTRACEDesc30__Wrapper.setuTotalMsgLen(const val : Word);
begin
SQLTRACEDesc30(GetRecordPtr^).uTotalMsgLen := val;
end;
function __SQLTRACEDesc30__Wrapper.getuTotalMsgLen : Word;
begin
result := SQLTRACEDesc30(GetRecordPtr^).uTotalMsgLen;
end;
function __TSQLSchemaInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSQLSchemaInfo__Wrapper.setFType(const val : TSchemaType);
begin
TSQLSchemaInfo(GetRecordPtr^).FType := val;
end;
function __TSQLSchemaInfo__Wrapper.getFType : TSchemaType;
begin
result := TSQLSchemaInfo(GetRecordPtr^).FType;
end;
procedure __TSQLSchemaInfo__Wrapper.setObjectName(const val : WideString);
begin
TSQLSchemaInfo(GetRecordPtr^).ObjectName := val;
end;
function __TSQLSchemaInfo__Wrapper.getObjectName : WideString;
begin
result := TSQLSchemaInfo(GetRecordPtr^).ObjectName;
end;
procedure __TSQLSchemaInfo__Wrapper.setPattern(const val : WideString);
begin
TSQLSchemaInfo(GetRecordPtr^).Pattern := val;
end;
function __TSQLSchemaInfo__Wrapper.getPattern : WideString;
begin
result := TSQLSchemaInfo(GetRecordPtr^).Pattern;
end;
procedure __TSQLSchemaInfo__Wrapper.setPackageName(const val : WideString);
begin
TSQLSchemaInfo(GetRecordPtr^).PackageName := val;
end;
function __TSQLSchemaInfo__Wrapper.getPackageName : WideString;
begin
result := TSQLSchemaInfo(GetRecordPtr^).PackageName;
end;
function _SPParamDesc_ : IDispatch;
begin
  result := __SPParamDesc__Wrapper.Create;
end;
function _SQLSPParamDesc_ : IDispatch;
begin
  result := __SQLSPParamDesc__Wrapper.Create;
end;
function _SQLTRACEDesc_ : IDispatch;
begin
  result := __SQLTRACEDesc__Wrapper.Create;
end;
function _SQLTRACEDesc25_ : IDispatch;
begin
  result := __SQLTRACEDesc25__Wrapper.Create;
end;
function _SQLTRACEDesc30_ : IDispatch;
begin
  result := __SQLTRACEDesc30__Wrapper.Create;
end;
function _TSQLSchemaInfo_ : IDispatch;
begin
  result := __TSQLSchemaInfo__Wrapper.Create;
end;
function __TTransactionDesc__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTransactionDesc__Wrapper.setTransactionID(const val : LongWord);
begin
TTransactionDesc(GetRecordPtr^).TransactionID := val;
end;
function __TTransactionDesc__Wrapper.getTransactionID : LongWord;
begin
result := TTransactionDesc(GetRecordPtr^).TransactionID;
end;
procedure __TTransactionDesc__Wrapper.setGlobalID(const val : LongWord);
begin
TTransactionDesc(GetRecordPtr^).GlobalID := val;
end;
function __TTransactionDesc__Wrapper.getGlobalID : LongWord;
begin
result := TTransactionDesc(GetRecordPtr^).GlobalID;
end;
procedure __TTransactionDesc__Wrapper.setIsolationLevel(const val : TTransIsolationLevel);
begin
TTransactionDesc(GetRecordPtr^).IsolationLevel := val;
end;
function __TTransactionDesc__Wrapper.getIsolationLevel : TTransIsolationLevel;
begin
result := TTransactionDesc(GetRecordPtr^).IsolationLevel;
end;
procedure __TTransactionDesc__Wrapper.setCustomIsolation(const val : LongWord);
begin
TTransactionDesc(GetRecordPtr^).CustomIsolation := val;
end;
function __TTransactionDesc__Wrapper.getCustomIsolation : LongWord;
begin
result := TTransactionDesc(GetRecordPtr^).CustomIsolation;
end;
procedure ____GetConnectionNames__Wrapper(cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
GetConnectionNames(TStrings(VarToObject(OleVariant(pargs^[0]))));
end;
2:
begin
GetConnectionNames(TStrings(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
end;
3:
begin
GetConnectionNames(TStrings(VarToObject(OleVariant(pargs^[2]))),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure ____GetDriverNames__Wrapper(cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
GetDriverNames(TStrings(VarToObject(OleVariant(pargs^[0]))));
end;
2:
begin
GetDriverNames(TStrings(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
end;
end
end;

function ____GetDriverRegistryFile__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
0:
begin
result := GetDriverRegistryFile;
end;
1:
begin
result := GetDriverRegistryFile(OleVariant(pargs^[0]));
end;
end
end;

function ____GetConnectionRegistryFile__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
0:
begin
result := GetConnectionRegistryFile;
end;
1:
begin
result := GetConnectionRegistryFile(OleVariant(pargs^[0]));
end;
end
end;

function __TCustomSQLDataSet__ExecSQL__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
0:
begin
result := __TCustomSQLDataSet__(__Instance).ExecSQL;
end;
1:
begin
result := __TCustomSQLDataSet__(__Instance).ExecSQL(OleVariant(pargs^[0]));
end;
end
end;

procedure __TCustomSQLDataSet__SetSchemaInfo__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
3:
begin
TCustomSQLDataSet(__Instance).SetSchemaInfo(OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
4:
begin
TCustomSQLDataSet(__Instance).SetSchemaInfo(OleVariant(pargs^[3]),OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure __TSQLConnection__commit__Wrapper(__Instance : TSQLConnection;
const p0 : IDispatch);
var
__p0 : ^TTransactionDesc;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
TSQLConnection(__Instance).commit(__p0^);
end;

function __TSQLConnection__execute__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
2:
begin
result := TSQLConnection(__Instance).execute(OleVariant(pargs^[1]),TParams(VarToObject(OleVariant(pargs^[0]))));
end;
3:
begin
result := TSQLConnection(__Instance).execute(OleVariant(pargs^[2]),TParams(VarToObject(OleVariant(pargs^[1]))),VarToPointer(OleVariant(pargs^[0])));
end;
end
end;

procedure __TSQLConnection__GetTableNames__Wrapper(__Instance : TSQLConnection;
p0 : TStrings;
p1 : Boolean);
begin
TSQLConnection(__Instance).GetTableNames(p0,p1);
end;

procedure __TSQLConnection__LoadParamsFromIniFile__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
0:
begin
TSQLConnection(__Instance).LoadParamsFromIniFile;
end;
1:
begin
TSQLConnection(__Instance).LoadParamsFromIniFile(OleVariant(pargs^[0]));
end;
end
end;

procedure __TSQLConnection__rollback__Wrapper(__Instance : TSQLConnection;
const p0 : IDispatch);
var
__p0 : ^TTransactionDesc;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
TSQLConnection(__Instance).rollback(__p0^);
end;

procedure __TSQLConnection__StartTransaction__Wrapper(__Instance : TSQLConnection;
const p0 : IDispatch);
var
__p0 : ^TTransactionDesc;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
TSQLConnection(__Instance).StartTransaction(__p0^);
end;


type __SPParamDesc__Wrapper__ = class(__SPParamDesc__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SPParamDesc__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSPParamDescToVariant(var R : SPParamDesc) : OleVariant;
var
__rw : __SPParamDesc__Wrapper__;
begin
__rw := __SPParamDesc__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSPParamDesc(const V : OleVariant) : SPParamDesc;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SPParamDesc((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SQLSPParamDesc__Wrapper__ = class(__SQLSPParamDesc__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SQLSPParamDesc__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSQLSPParamDescToVariant(var R : SQLSPParamDesc) : OleVariant;
var
__rw : __SQLSPParamDesc__Wrapper__;
begin
__rw := __SQLSPParamDesc__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSQLSPParamDesc(const V : OleVariant) : SQLSPParamDesc;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SQLSPParamDesc((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SQLTRACEDesc__Wrapper__ = class(__SQLTRACEDesc__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SQLTRACEDesc__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSQLTRACEDescToVariant(var R : SQLTRACEDesc) : OleVariant;
var
__rw : __SQLTRACEDesc__Wrapper__;
begin
__rw := __SQLTRACEDesc__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSQLTRACEDesc(const V : OleVariant) : SQLTRACEDesc;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SQLTRACEDesc((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SQLTRACEDesc25__Wrapper__ = class(__SQLTRACEDesc25__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SQLTRACEDesc25__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSQLTRACEDesc25ToVariant(var R : SQLTRACEDesc25) : OleVariant;
var
__rw : __SQLTRACEDesc25__Wrapper__;
begin
__rw := __SQLTRACEDesc25__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSQLTRACEDesc25(const V : OleVariant) : SQLTRACEDesc25;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SQLTRACEDesc25((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SQLTRACEDesc30__Wrapper__ = class(__SQLTRACEDesc30__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SQLTRACEDesc30__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSQLTRACEDesc30ToVariant(var R : SQLTRACEDesc30) : OleVariant;
var
__rw : __SQLTRACEDesc30__Wrapper__;
begin
__rw := __SQLTRACEDesc30__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSQLTRACEDesc30(const V : OleVariant) : SQLTRACEDesc30;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SQLTRACEDesc30((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSQLSchemaInfo__Wrapper__ = class(__TSQLSchemaInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSQLSchemaInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSQLSchemaInfoToVariant(var R : TSQLSchemaInfo) : OleVariant;
var
__rw : __TSQLSchemaInfo__Wrapper__;
begin
__rw := __TSQLSchemaInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSQLSchemaInfo(const V : OleVariant) : TSQLSchemaInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSQLSchemaInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTransactionDesc__Wrapper__ = class(__TTransactionDesc__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTransactionDesc__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTransactionDescToVariant(var R : TTransactionDesc) : OleVariant;
var
__rw : __TTransactionDesc__Wrapper__;
begin
__rw := __TTransactionDesc__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTransactionDesc(const V : OleVariant) : TTransactionDesc;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTransactionDesc((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTCustomSQLDataSet__CommandText(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomSQLDataSet(Instance).CommandText;
end;

procedure __DC__SetTCustomSQLDataSet__CommandText(Instance : TObject; Params : PVariantArgList);
begin
TCustomSQLDataSet(Instance).CommandText:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomSQLDataSet__IndexDefs(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomSQLDataSet(Instance).IndexDefs);
end;

procedure __DC__SetTCustomSQLDataSet__IndexDefs(Instance : TObject; Params : PVariantArgList);
begin
TCustomSQLDataSet(Instance).IndexDefs:=TIndexDefs(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomSQLDataSet__Prepared(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomSQLDataSet(Instance).Prepared;
end;

procedure __DC__SetTCustomSQLDataSet__Prepared(Instance : TObject; Params : PVariantArgList);
begin
TCustomSQLDataSet(Instance).Prepared:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomSQLDataSet__DesignerData(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomSQLDataSet(Instance).DesignerData;
end;

procedure __DC__SetTCustomSQLDataSet__DesignerData(Instance : TObject; Params : PVariantArgList);
begin
TCustomSQLDataSet(Instance).DesignerData:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomSQLDataSet__RecordCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomSQLDataSet(Instance).RecordCount;
end;

function __DC__GetTCustomSQLDataSet__SQLConnection(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomSQLDataSet(Instance).SQLConnection);
end;

procedure __DC__SetTCustomSQLDataSet__SQLConnection(Instance : TObject; Params : PVariantArgList);
begin
TCustomSQLDataSet(Instance).SQLConnection:=TSQLConnection(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomSQLDataSet__TransactionLevel(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomSQLDataSet(Instance).TransactionLevel;
end;

procedure __DC__SetTCustomSQLDataSet__TransactionLevel(Instance : TObject; Params : PVariantArgList);
begin
TCustomSQLDataSet(Instance).TransactionLevel:=OleVariant(Params^[0]);
end;

function __DC__GetTFLDDesc__iFldNum(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFLDDesc(Instance).iFldNum;
end;

procedure __DC__SetTFLDDesc__iFldNum(Instance : TObject; Params : PVariantArgList);
begin
TFLDDesc(Instance).iFldNum:=OleVariant(Params^[0]);
end;

function __DC__GetTFLDDesc__szName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFLDDesc(Instance).szName;
end;

procedure __DC__SetTFLDDesc__szName(Instance : TObject; Params : PVariantArgList);
begin
TFLDDesc(Instance).szName:=OleVariant(Params^[0]);
end;

function __DC__GetTFLDDesc__iFldType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFLDDesc(Instance).iFldType;
end;

procedure __DC__SetTFLDDesc__iFldType(Instance : TObject; Params : PVariantArgList);
begin
TFLDDesc(Instance).iFldType:=OleVariant(Params^[0]);
end;

function __DC__GetTFLDDesc__iSubType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFLDDesc(Instance).iSubType;
end;

procedure __DC__SetTFLDDesc__iSubType(Instance : TObject; Params : PVariantArgList);
begin
TFLDDesc(Instance).iSubType:=OleVariant(Params^[0]);
end;

function __DC__GetTFLDDesc__iUnits1(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFLDDesc(Instance).iUnits1;
end;

procedure __DC__SetTFLDDesc__iUnits1(Instance : TObject; Params : PVariantArgList);
begin
TFLDDesc(Instance).iUnits1:=OleVariant(Params^[0]);
end;

function __DC__GetTFLDDesc__iUnits2(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFLDDesc(Instance).iUnits2;
end;

procedure __DC__SetTFLDDesc__iUnits2(Instance : TObject; Params : PVariantArgList);
begin
TFLDDesc(Instance).iUnits2:=OleVariant(Params^[0]);
end;

function __DC__GetTFLDDesc__iOffset(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFLDDesc(Instance).iOffset;
end;

procedure __DC__SetTFLDDesc__iOffset(Instance : TObject; Params : PVariantArgList);
begin
TFLDDesc(Instance).iOffset:=OleVariant(Params^[0]);
end;

function __DC__GetTFLDDesc__iLen(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFLDDesc(Instance).iLen;
end;

procedure __DC__SetTFLDDesc__iLen(Instance : TObject; Params : PVariantArgList);
begin
TFLDDesc(Instance).iLen:=OleVariant(Params^[0]);
end;

function __DC__GetTFLDDesc__iNullOffset(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFLDDesc(Instance).iNullOffset;
end;

procedure __DC__SetTFLDDesc__iNullOffset(Instance : TObject; Params : PVariantArgList);
begin
TFLDDesc(Instance).iNullOffset:=OleVariant(Params^[0]);
end;

function __DC__GetTFLDDesc__efldvVchk(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFLDDesc(Instance).efldvVchk;
end;

procedure __DC__SetTFLDDesc__efldvVchk(Instance : TObject; Params : PVariantArgList);
begin
TFLDDesc(Instance).efldvVchk:=OleVariant(Params^[0]);
end;

function __DC__GetTFLDDesc__efldrRights(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFLDDesc(Instance).efldrRights;
end;

procedure __DC__SetTFLDDesc__efldrRights(Instance : TObject; Params : PVariantArgList);
begin
TFLDDesc(Instance).efldrRights:=OleVariant(Params^[0]);
end;

function __DC__GetTFLDDesc__bCalcField(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFLDDesc(Instance).bCalcField;
end;

procedure __DC__SetTFLDDesc__bCalcField(Instance : TObject; Params : PVariantArgList);
begin
TFLDDesc(Instance).bCalcField:=OleVariant(Params^[0]);
end;

function __DC__GetTSQLConnection__ActiveStatements(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSQLConnection(Instance).ActiveStatements;
end;

function __DC__GetTSQLConnection__AutoClone(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSQLConnection(Instance).AutoClone;
end;

procedure __DC__SetTSQLConnection__AutoClone(Instance : TObject; Params : PVariantArgList);
begin
TSQLConnection(Instance).AutoClone:=OleVariant(Params^[0]);
end;

function __DC__GetTSQLConnection__ConnectionState(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSQLConnection(Instance).ConnectionState;
end;

procedure __DC__SetTSQLConnection__ConnectionState(Instance : TObject; Params : PVariantArgList);
begin
TSQLConnection(Instance).ConnectionState:=OleVariant(Params^[0]);
end;

function __DC__GetTSQLConnection__DataSets(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TSQLConnection(Instance).DataSets[OleVariant(Params^[0])]);
end;

function __DC__GetTSQLConnection__InTransaction(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSQLConnection(Instance).InTransaction;
end;

function __DC__GetTSQLConnection__LocaleCode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSQLConnection(Instance).LocaleCode;
end;

procedure __DC__SetTSQLConnection__LocaleCode(Instance : TObject; Params : PVariantArgList);
begin
TSQLConnection(Instance).LocaleCode:=OleVariant(Params^[0]);
end;

function __DC__GetTSQLConnection__MaxStmtsPerConn(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSQLConnection(Instance).MaxStmtsPerConn;
end;

function __DC__GetTSQLConnection__MetaData(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TSQLConnection(Instance).MetaData);
end;

function __DC__GetTSQLConnection__MultipleTransactionsSupported(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSQLConnection(Instance).MultipleTransactionsSupported;
end;

function __DC__GetTSQLConnection__ParamsLoaded(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSQLConnection(Instance).ParamsLoaded;
end;

procedure __DC__SetTSQLConnection__ParamsLoaded(Instance : TObject; Params : PVariantArgList);
begin
TSQLConnection(Instance).ParamsLoaded:=OleVariant(Params^[0]);
end;

function __DC__GetTSQLConnection__SQLConnection(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TSQLConnection(Instance).SQLConnection);
end;

procedure __DC__SetTSQLConnection__SQLConnection(Instance : TObject; Params : PVariantArgList);
begin
TSQLConnection(Instance).SQLConnection:=TISQLConnection(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTSQLConnection__SQLHourGlass(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSQLConnection(Instance).SQLHourGlass;
end;

procedure __DC__SetTSQLConnection__SQLHourGlass(Instance : TObject; Params : PVariantArgList);
begin
TSQLConnection(Instance).SQLHourGlass:=OleVariant(Params^[0]);
end;

function __DC__GetTSQLConnection__TransactionsSupported(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSQLConnection(Instance).TransactionsSupported;
end;

function __DC__GetTSQLMonitor__MaxTraceCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSQLMonitor(Instance).MaxTraceCount;
end;

procedure __DC__SetTSQLMonitor__MaxTraceCount(Instance : TObject; Params : PVariantArgList);
begin
TSQLMonitor(Instance).MaxTraceCount:=OleVariant(Params^[0]);
end;

function __DC__GetTSQLMonitor__TraceCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSQLMonitor(Instance).TraceCount;
end;

function __DC__GetTSQLQuery__RowsAffected(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSQLQuery(Instance).RowsAffected;
end;

function __DC__GetTSQLQuery__Text(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSQLQuery(Instance).Text;
end;

function __DC__GetTSQLTable__IndexFields(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TSQLTable(Instance).IndexFields[OleVariant(Params^[0])]);
end;

procedure __DC__SetTSQLTable__IndexFields(Instance : TObject; Params : PVariantArgList);
begin
TSQLTable(Instance).IndexFields[OleVariant(Params^[1])]:=TField(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTSQLTable__IndexFieldCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSQLTable(Instance).IndexFieldCount;
end;

procedure __RegisterProps;
begin
RegisterProperty(TCustomSQLDataSet,'CommandText',__DC__GetTCustomSQLDataSet__CommandText,__DC__SetTCustomSQLDataSet__CommandText);
RegisterProperty(TCustomSQLDataSet,'IndexDefs',__DC__GetTCustomSQLDataSet__IndexDefs,__DC__SetTCustomSQLDataSet__IndexDefs);
RegisterProperty(TCustomSQLDataSet,'Prepared',__DC__GetTCustomSQLDataSet__Prepared,__DC__SetTCustomSQLDataSet__Prepared);
RegisterProperty(TCustomSQLDataSet,'DesignerData',__DC__GetTCustomSQLDataSet__DesignerData,__DC__SetTCustomSQLDataSet__DesignerData);
RegisterProperty(TCustomSQLDataSet,'RecordCount',__DC__GetTCustomSQLDataSet__RecordCount,nil);
RegisterProperty(TCustomSQLDataSet,'SQLConnection',__DC__GetTCustomSQLDataSet__SQLConnection,__DC__SetTCustomSQLDataSet__SQLConnection);
RegisterProperty(TCustomSQLDataSet,'TransactionLevel',__DC__GetTCustomSQLDataSet__TransactionLevel,__DC__SetTCustomSQLDataSet__TransactionLevel);
RegisterProperty(TFLDDesc,'iFldNum',__DC__GetTFLDDesc__iFldNum,__DC__SetTFLDDesc__iFldNum);
RegisterProperty(TFLDDesc,'szName',__DC__GetTFLDDesc__szName,__DC__SetTFLDDesc__szName);
RegisterProperty(TFLDDesc,'iFldType',__DC__GetTFLDDesc__iFldType,__DC__SetTFLDDesc__iFldType);
RegisterProperty(TFLDDesc,'iSubType',__DC__GetTFLDDesc__iSubType,__DC__SetTFLDDesc__iSubType);
RegisterProperty(TFLDDesc,'iUnits1',__DC__GetTFLDDesc__iUnits1,__DC__SetTFLDDesc__iUnits1);
RegisterProperty(TFLDDesc,'iUnits2',__DC__GetTFLDDesc__iUnits2,__DC__SetTFLDDesc__iUnits2);
RegisterProperty(TFLDDesc,'iOffset',__DC__GetTFLDDesc__iOffset,__DC__SetTFLDDesc__iOffset);
RegisterProperty(TFLDDesc,'iLen',__DC__GetTFLDDesc__iLen,__DC__SetTFLDDesc__iLen);
RegisterProperty(TFLDDesc,'iNullOffset',__DC__GetTFLDDesc__iNullOffset,__DC__SetTFLDDesc__iNullOffset);
RegisterProperty(TFLDDesc,'efldvVchk',__DC__GetTFLDDesc__efldvVchk,__DC__SetTFLDDesc__efldvVchk);
RegisterProperty(TFLDDesc,'efldrRights',__DC__GetTFLDDesc__efldrRights,__DC__SetTFLDDesc__efldrRights);
RegisterProperty(TFLDDesc,'bCalcField',__DC__GetTFLDDesc__bCalcField,__DC__SetTFLDDesc__bCalcField);
RegisterProperty(TSQLConnection,'ActiveStatements',__DC__GetTSQLConnection__ActiveStatements,nil);
RegisterProperty(TSQLConnection,'AutoClone',__DC__GetTSQLConnection__AutoClone,__DC__SetTSQLConnection__AutoClone);
RegisterProperty(TSQLConnection,'ConnectionState',__DC__GetTSQLConnection__ConnectionState,__DC__SetTSQLConnection__ConnectionState);
RegisterIndexedProperty(TSQLConnection,'DataSets',1,False,__DC__GetTSQLConnection__DataSets,nil);
RegisterProperty(TSQLConnection,'InTransaction',__DC__GetTSQLConnection__InTransaction,nil);
RegisterProperty(TSQLConnection,'LocaleCode',__DC__GetTSQLConnection__LocaleCode,__DC__SetTSQLConnection__LocaleCode);
RegisterProperty(TSQLConnection,'MaxStmtsPerConn',__DC__GetTSQLConnection__MaxStmtsPerConn,nil);
RegisterProperty(TSQLConnection,'MetaData',__DC__GetTSQLConnection__MetaData,nil);
RegisterProperty(TSQLConnection,'MultipleTransactionsSupported',__DC__GetTSQLConnection__MultipleTransactionsSupported,nil);
RegisterProperty(TSQLConnection,'ParamsLoaded',__DC__GetTSQLConnection__ParamsLoaded,__DC__SetTSQLConnection__ParamsLoaded);
RegisterProperty(TSQLConnection,'SQLConnection',__DC__GetTSQLConnection__SQLConnection,__DC__SetTSQLConnection__SQLConnection);
RegisterProperty(TSQLConnection,'SQLHourGlass',__DC__GetTSQLConnection__SQLHourGlass,__DC__SetTSQLConnection__SQLHourGlass);
RegisterProperty(TSQLConnection,'TransactionsSupported',__DC__GetTSQLConnection__TransactionsSupported,nil);
RegisterProperty(TSQLMonitor,'MaxTraceCount',__DC__GetTSQLMonitor__MaxTraceCount,__DC__SetTSQLMonitor__MaxTraceCount);
RegisterProperty(TSQLMonitor,'TraceCount',__DC__GetTSQLMonitor__TraceCount,nil);
RegisterProperty(TSQLQuery,'RowsAffected',__DC__GetTSQLQuery__RowsAffected,nil);
RegisterProperty(TSQLQuery,'Text',__DC__GetTSQLQuery__Text,nil);
RegisterIndexedProperty(TSQLTable,'IndexFields',1,False,__DC__GetTSQLTable__IndexFields,__DC__SetTSQLTable__IndexFields);
RegisterProperty(TSQLTable,'IndexFieldCount',__DC__GetTSQLTable__IndexFieldCount,nil);
end;

const __ConstNames0 : array[0..41] of string = (
'SSelect'
,'SSelectStar'
,'SSelectStarFrom'
,'SSelectSpaces'
,'SWhere'
,'SAnd'
,'SOrderBy'
,'SParam'
,'DefaultCursor'
,'HourGlassCursor'
,'DefaultMaxBlobSize'
,'DefaultRowsetSize'
,'TErrorMessageSize'
,'exceptConnection'
,'exceptCommand'
,'exceptCursor'
,'exceptMetaData'
,'exceptUseLast'
,'eUserMonitor'
,'eUserDataSet'
,'eConnect'
,'eReconnect'
,'eDisconnect'
,'stNoSchema'
,'stTables'
,'stSysTables'
,'stProcedures'
,'stColumns'
,'stProcedureParams'
,'stIndexes'
,'stPackages'
,'stUserNames'
,'csStateClosed'
,'csStateOpen'
,'csStateConnecting'
,'csStateExecuting'
,'csStateFetching'
,'csStateDisconnecting'
,'tsSynonym'
,'tsSysTable'
,'tsTable'
,'tsView'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,SSelect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,SSelectStar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,SSelectStarFrom));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,SSelectSpaces));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,SWhere));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,SAnd));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,SOrderBy));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,SParam));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,DefaultCursor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,HourGlassCursor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,DefaultMaxBlobSize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,DefaultRowsetSize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,TErrorMessageSize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,exceptConnection));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,exceptCommand));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,exceptCursor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,exceptMetaData));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,exceptUseLast));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,eUserMonitor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,eUserDataSet));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,eConnect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,eReconnect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,eDisconnect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,stNoSchema));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,stTables));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,stSysTables));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,stProcedures));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,stColumns));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,stProcedureParams));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,stIndexes));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,stPackages));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,stUserNames));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,csStateClosed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,csStateOpen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,csStateConnecting));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,csStateExecuting));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,csStateFetching));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,csStateDisconnecting));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,tsSynonym));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,tsSysTable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,tsTable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,tsView));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..13] of TClass = (
TCustomSQLDataSet,
TFLDDesc,
TISQLCommand,
TISQLConnection,
TISQLCursor,
TISQLMetaData,
TSQLBlobStream,
TSQLConnection,
TSQLDataLink,
TSQLDataSet,
TSQLMonitor,
TSQLQuery,
TSQLStoredProc,
TSQLTable
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..12] of string = (
'SPParamDesc'
,'SQLSPParamDesc'
,'SQLTRACEDesc'
,'SQLTRACEDesc25'
,'SQLTRACEDesc30'
,'TSQLSchemaInfo'
,'LoadParamListItems'
,'FreeProcParams'
,'GetConnectionNames'
,'GetDriverNames'
,'GetDriverRegistryFile'
,'GetConnectionRegistryFile'
,'RegisterDbXpressLib'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_SPParamDesc_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_SQLSPParamDesc_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_SQLTRACEDesc_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(_SQLTRACEDesc25_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(_SQLTRACEDesc30_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[5],Addr(_TSQLSchemaInfo_)));
RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T0),[
TypeInfo(TParams),
TypeInfo(TList)],Addr(LoadParamListItems),cRegister);

RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T1),[
TypeInfo(TList)],Addr(FreeProcParams),cRegister);

RegisterProc(nil,MethodNames[8],mtScriptProc,TypeInfo(_T2),[
TypeInfo(TStrings),
TypeInfo(String),
TypeInfo(Boolean)],Addr(____GetConnectionNames__Wrapper),cRegister);

RegisterProc(nil,MethodNames[9],mtScriptProc,TypeInfo(_T3),[
TypeInfo(TStrings),
TypeInfo(Boolean)],Addr(____GetDriverNames__Wrapper),cRegister);

RegisterProc(nil,MethodNames[10],mtScriptProc,TypeInfo(_T4),[
TypeInfo(Boolean),TypeInfo(String)],Addr(____GetDriverRegistryFile__Wrapper),cRegister);

RegisterProc(nil,MethodNames[11],mtScriptProc,TypeInfo(_T5),[
TypeInfo(Boolean),TypeInfo(String)],Addr(____GetConnectionRegistryFile__Wrapper),cRegister);

RegisterProc(nil,MethodNames[12],mtProc,TypeInfo(_T6),[
TypeInfoPointer],Addr(RegisterDbXpressLib),cRegister);

//RegRegisterMethod(TCustomSQLDataSet,'GetObjectProcParamCount',TypeInfo(_T7),[TypeInfo(Integer)], pointer(640));
RegRegisterMethod(TCustomSQLDataSet,'GetObjectProcParamCount',TypeInfo(_T7),[TypeInfo(Integer)],  getVMTProcAddr('TCustomSQLDataSet','GetObjectProcParamCount',640));


//RegRegisterMethod(TCustomSQLDataSet,'GetParamCount',TypeInfo(_T8),[TypeInfo(Integer)], pointer(644));
RegRegisterMethod(TCustomSQLDataSet,'GetParamCount',TypeInfo(_T8),[TypeInfo(Integer)],  getVMTProcAddr('TCustomSQLDataSet','GetParamCount',644));


//RegRegisterMethod(TCustomSQLDataSet,'GetQueryFromType',TypeInfo(_T9),[TypeInfo(WideString)], pointer(648));
RegRegisterMethod(TCustomSQLDataSet,'GetQueryFromType',TypeInfo(_T9),[TypeInfo(WideString)],  getVMTProcAddr('TCustomSQLDataSet','GetQueryFromType',648));


//RegRegisterMethod(TCustomSQLDataSet,'SetConnection',TypeInfo(_T10),[TypeInfo(TSQLConnection)], pointer(652));
RegRegisterMethod(TCustomSQLDataSet,'SetConnection',TypeInfo(_T10),[TypeInfo(TSQLConnection)],  getVMTProcAddr('TCustomSQLDataSet','SetConnection',652));


//RegRegisterMethod(TCustomSQLDataSet,'SetCommandType',TypeInfo(_T11),[TypeInfo(TSQLCommandType)], pointer(656));
RegRegisterMethod(TCustomSQLDataSet,'SetCommandType',TypeInfo(_T11),[TypeInfo(TSQLCommandType)],  getVMTProcAddr('TCustomSQLDataSet','SetCommandType',656));


RegisterProc(TCustomSQLDataSet,'ExecSQL',mtScriptMethod,TypeInfo(_T12),[
TypeInfo(Boolean),TypeInfo(Integer)],Addr(__TCustomSQLDataSet__ExecSQL__Wrapper),cRegister);

//RegRegisterMethod(TCustomSQLDataSet,'OpenSchema',TypeInfo(_T13),NoParams, pointer(664));
RegRegisterMethod(TCustomSQLDataSet,'OpenSchema',TypeInfo(_T13),NoParams,  getVMTProcAddr('TCustomSQLDataSet','OpenSchema',664));


//RegRegisterMethod(TCustomSQLDataSet,'SetCommandText',TypeInfo(_T14),[TypeInfo(WideString)], pointer(668));
RegRegisterMethod(TCustomSQLDataSet,'SetCommandText',TypeInfo(_T14),[TypeInfo(WideString)],  getVMTProcAddr('TCustomSQLDataSet','SetCommandText',668));


RegRegisterMethod(TCustomSQLDataSet,'GetKeyFieldNames',TypeInfo(_T15),[
TypeInfo(TStrings),TypeInfo(Integer)],Addr(TCustomSQLDataSet.GetKeyFieldNames));

//RegRegisterMethod(TCustomSQLDataSet,'GetQuoteChar',TypeInfo(_T16),[TypeInfo(WideString)], pointer(672));
RegRegisterMethod(TCustomSQLDataSet,'GetQuoteChar',TypeInfo(_T16),[TypeInfo(WideString)],  getVMTProcAddr('TCustomSQLDataSet','GetQuoteChar',672));


RegRegisterMethod(TCustomSQLDataSet,'ParamByName',TypeInfo(_T17),[
TypeInfo(String),TypeInfo(TParam)],Addr(TCustomSQLDataSet.ParamByName));

//RegRegisterMethod(TCustomSQLDataSet,'PrepareStatement',TypeInfo(_T18),NoParams, pointer(676));
RegRegisterMethod(TCustomSQLDataSet,'PrepareStatement',TypeInfo(_T18),NoParams,  getVMTProcAddr('TCustomSQLDataSet','PrepareStatement',676));


RegisterProc(TCustomSQLDataSet,'SetSchemaInfo',mtScriptMethod,TypeInfo(_T19),[
TypeInfo(TSchemaType),
TypeInfo(WideString),
TypeInfo(WideString),
TypeInfo(WideString)],Addr(__TCustomSQLDataSet__SetSchemaInfo__Wrapper),cRegister);

//RegRegisterMethod(TFLDDesc,'GetiFldNum',TypeInfo(_T20),[TypeInfo(Word)], pointer(0));
RegRegisterMethod(TFLDDesc,'GetiFldNum',TypeInfo(_T20),[TypeInfo(Word)],  getVMTProcAddr('TFLDDesc','GetiFldNum',0));


//RegRegisterMethod(TFLDDesc,'GetszName',TypeInfo(_T21),[TypeInfo(WideString)], pointer(4));
RegRegisterMethod(TFLDDesc,'GetszName',TypeInfo(_T21),[TypeInfo(WideString)],  getVMTProcAddr('TFLDDesc','GetszName',4));


//RegRegisterMethod(TFLDDesc,'GetiFldType',TypeInfo(_T22),[TypeInfo(Word)], pointer(8));
RegRegisterMethod(TFLDDesc,'GetiFldType',TypeInfo(_T22),[TypeInfo(Word)],  getVMTProcAddr('TFLDDesc','GetiFldType',8));


//RegRegisterMethod(TFLDDesc,'GetiSubType',TypeInfo(_T23),[TypeInfo(Word)], pointer(12));
RegRegisterMethod(TFLDDesc,'GetiSubType',TypeInfo(_T23),[TypeInfo(Word)],  getVMTProcAddr('TFLDDesc','GetiSubType',12));


//RegRegisterMethod(TFLDDesc,'GetiUnits1',TypeInfo(_T24),[TypeInfo(SmallInt)], pointer(16));
RegRegisterMethod(TFLDDesc,'GetiUnits1',TypeInfo(_T24),[TypeInfo(SmallInt)],  getVMTProcAddr('TFLDDesc','GetiUnits1',16));


//RegRegisterMethod(TFLDDesc,'GetiUnits2',TypeInfo(_T25),[TypeInfo(SmallInt)], pointer(20));
RegRegisterMethod(TFLDDesc,'GetiUnits2',TypeInfo(_T25),[TypeInfo(SmallInt)],  getVMTProcAddr('TFLDDesc','GetiUnits2',20));


//RegRegisterMethod(TFLDDesc,'GetiOffset',TypeInfo(_T26),[TypeInfo(Word)], pointer(24));
RegRegisterMethod(TFLDDesc,'GetiOffset',TypeInfo(_T26),[TypeInfo(Word)],  getVMTProcAddr('TFLDDesc','GetiOffset',24));


//RegRegisterMethod(TFLDDesc,'GetiLen',TypeInfo(_T27),[TypeInfo(LongWord)], pointer(28));
RegRegisterMethod(TFLDDesc,'GetiLen',TypeInfo(_T27),[TypeInfo(LongWord)],  getVMTProcAddr('TFLDDesc','GetiLen',28));


//RegRegisterMethod(TFLDDesc,'GetiNullOffset',TypeInfo(_T28),[TypeInfo(Word)], pointer(32));
RegRegisterMethod(TFLDDesc,'GetiNullOffset',TypeInfo(_T28),[TypeInfo(Word)],  getVMTProcAddr('TFLDDesc','GetiNullOffset',32));


//RegRegisterMethod(TFLDDesc,'GetefldvVchk',TypeInfo(_T29),[TypeInfo(FLDVchk)], pointer(36));
RegRegisterMethod(TFLDDesc,'GetefldvVchk',TypeInfo(_T29),[TypeInfo(FLDVchk)],  getVMTProcAddr('TFLDDesc','GetefldvVchk',36));


//RegRegisterMethod(TFLDDesc,'GetefldrRights',TypeInfo(_T30),[TypeInfo(FLDRights)], pointer(40));
RegRegisterMethod(TFLDDesc,'GetefldrRights',TypeInfo(_T30),[TypeInfo(FLDRights)],  getVMTProcAddr('TFLDDesc','GetefldrRights',40));


//RegRegisterMethod(TFLDDesc,'GetbCalcField',TypeInfo(_T31),[TypeInfo(WordBool)], pointer(44));
RegRegisterMethod(TFLDDesc,'GetbCalcField',TypeInfo(_T31),[TypeInfo(WordBool)],  getVMTProcAddr('TFLDDesc','GetbCalcField',44));


//RegRegisterMethod(TFLDDesc,'SetiFldNum',TypeInfo(_T32),[TypeInfo(Word)], pointer(48));
RegRegisterMethod(TFLDDesc,'SetiFldNum',TypeInfo(_T32),[TypeInfo(Word)],  getVMTProcAddr('TFLDDesc','SetiFldNum',48));


//RegRegisterMethod(TFLDDesc,'SetszName',TypeInfo(_T33),[TypeInfo(WideString)], pointer(52));
RegRegisterMethod(TFLDDesc,'SetszName',TypeInfo(_T33),[TypeInfo(WideString)],  getVMTProcAddr('TFLDDesc','SetszName',52));


//RegRegisterMethod(TFLDDesc,'SetiFldType',TypeInfo(_T34),[TypeInfo(Word)], pointer(56));
RegRegisterMethod(TFLDDesc,'SetiFldType',TypeInfo(_T34),[TypeInfo(Word)],  getVMTProcAddr('TFLDDesc','SetiFldType',56));


//RegRegisterMethod(TFLDDesc,'SetiSubType',TypeInfo(_T35),[TypeInfo(Word)], pointer(60));
RegRegisterMethod(TFLDDesc,'SetiSubType',TypeInfo(_T35),[TypeInfo(Word)],  getVMTProcAddr('TFLDDesc','SetiSubType',60));


//RegRegisterMethod(TFLDDesc,'SetiUnits1',TypeInfo(_T36),[TypeInfo(SmallInt)], pointer(64));
RegRegisterMethod(TFLDDesc,'SetiUnits1',TypeInfo(_T36),[TypeInfo(SmallInt)],  getVMTProcAddr('TFLDDesc','SetiUnits1',64));


//RegRegisterMethod(TFLDDesc,'SetiUnits2',TypeInfo(_T37),[TypeInfo(SmallInt)], pointer(68));
RegRegisterMethod(TFLDDesc,'SetiUnits2',TypeInfo(_T37),[TypeInfo(SmallInt)],  getVMTProcAddr('TFLDDesc','SetiUnits2',68));


//RegRegisterMethod(TFLDDesc,'SetiOffset',TypeInfo(_T38),[TypeInfo(Word)], pointer(72));
RegRegisterMethod(TFLDDesc,'SetiOffset',TypeInfo(_T38),[TypeInfo(Word)],  getVMTProcAddr('TFLDDesc','SetiOffset',72));


//RegRegisterMethod(TFLDDesc,'SetiLen',TypeInfo(_T39),[TypeInfo(LongWord)], pointer(76));
RegRegisterMethod(TFLDDesc,'SetiLen',TypeInfo(_T39),[TypeInfo(LongWord)],  getVMTProcAddr('TFLDDesc','SetiLen',76));


//RegRegisterMethod(TFLDDesc,'SetiNullOffset',TypeInfo(_T40),[TypeInfo(Word)], pointer(80));
RegRegisterMethod(TFLDDesc,'SetiNullOffset',TypeInfo(_T40),[TypeInfo(Word)],  getVMTProcAddr('TFLDDesc','SetiNullOffset',80));


//RegRegisterMethod(TFLDDesc,'SetefldvVchk',TypeInfo(_T41),[TypeInfo(FLDVchk)], pointer(84));
RegRegisterMethod(TFLDDesc,'SetefldvVchk',TypeInfo(_T41),[TypeInfo(FLDVchk)],  getVMTProcAddr('TFLDDesc','SetefldvVchk',84));


//RegRegisterMethod(TFLDDesc,'SetefldrRights',TypeInfo(_T42),[TypeInfo(FLDRights)], pointer(88));
RegRegisterMethod(TFLDDesc,'SetefldrRights',TypeInfo(_T42),[TypeInfo(FLDRights)],  getVMTProcAddr('TFLDDesc','SetefldrRights',88));


//RegRegisterMethod(TFLDDesc,'SetbCalcField',TypeInfo(_T43),[TypeInfo(WordBool)], pointer(92));
RegRegisterMethod(TFLDDesc,'SetbCalcField',TypeInfo(_T43),[TypeInfo(WordBool)],  getVMTProcAddr('TFLDDesc','SetbCalcField',92));


//RegRegisterMethod(TISQLCommand,'SetOption',TypeInfo(_T44),[TypeInfo(TSQLCommandOption),TypeInfo(Integer),TypeInfo(SQLResult)], pointer(0));
RegRegisterMethod(TISQLCommand,'SetOption',TypeInfo(_T44),[TypeInfo(TSQLCommandOption),TypeInfo(Integer),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCommand','SetOption',0));


//RegRegisterMethod(TISQLCommand,'SetStringOption',TypeInfo(_T45),[TypeInfo(TSQLCommandOption),TypeInfo(WideString),TypeInfo(SQLResult)], pointer(4));
RegRegisterMethod(TISQLCommand,'SetStringOption',TypeInfo(_T45),[TypeInfo(TSQLCommandOption),TypeInfo(WideString),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCommand','SetStringOption',4));


//RegRegisterMethod(TISQLCommand,'GetOption',TypeInfo(_T46),[TypeInfo(TSQLCommandOption),TypeInfoPointer,TypeInfo(SmallInt),TypeInfo(SmallInt),TypeInfo(SQLResult)], pointer(8));
RegRegisterMethod(TISQLCommand,'GetOption',TypeInfo(_T46),[TypeInfo(TSQLCommandOption),TypeInfoPointer,TypeInfo(SmallInt),TypeInfo(SmallInt),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCommand','GetOption',8));


//RegRegisterMethod(TISQLCommand,'GetStringOption',TypeInfo(_T47),[TypeInfo(TSQLCommandOption),TypeInfo(WideString),TypeInfo(SQLResult)], pointer(12));
RegRegisterMethod(TISQLCommand,'GetStringOption',TypeInfo(_T47),[TypeInfo(TSQLCommandOption),TypeInfo(WideString),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCommand','GetStringOption',12));


//RegRegisterMethod(TISQLCommand,'setParameter',TypeInfo(_T48),[TypeInfo(Word),TypeInfo(Word),TypeInfo(TSTMTParamType),TypeInfo(Word),TypeInfo(Word),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(LongWord),TypeInfoPointer,TypeInfo(Integer),TypeInfo(SQLResult)], pointer(16));
RegRegisterMethod(TISQLCommand,'setParameter',TypeInfo(_T48),[TypeInfo(Word),TypeInfo(Word),TypeInfo(TSTMTParamType),TypeInfo(Word),TypeInfo(Word),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(LongWord),TypeInfoPointer,TypeInfo(Integer),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCommand','setParameter',16));


//RegRegisterMethod(TISQLCommand,'getParameter',TypeInfo(_T49),[TypeInfo(Word),TypeInfo(Word),TypeInfoPointer,TypeInfo(Integer),TypeInfo(Integer),TypeInfo(SQLResult)], pointer(20));
RegRegisterMethod(TISQLCommand,'getParameter',TypeInfo(_T49),[TypeInfo(Word),TypeInfo(Word),TypeInfoPointer,TypeInfo(Integer),TypeInfo(Integer),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCommand','getParameter',20));


//RegRegisterMethod(TISQLCommand,'execute',TypeInfo(_T51),[TypeInfo(TISQLCursor),TypeInfo(SQLResult)], pointer(28));
RegRegisterMethod(TISQLCommand,'execute',TypeInfo(_T51),[TypeInfo(TISQLCursor),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCommand','execute',28));


//RegRegisterMethod(TISQLCommand,'getNextCursor',TypeInfo(_T53),[TypeInfo(TISQLCursor),TypeInfo(SQLResult)], pointer(36));
RegRegisterMethod(TISQLCommand,'getNextCursor',TypeInfo(_T53),[TypeInfo(TISQLCursor),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCommand','getNextCursor',36));


//RegRegisterMethod(TISQLCommand,'getRowsAffected',TypeInfo(_T54),[TypeInfo(LongWord),TypeInfo(SQLResult)], pointer(40));
RegRegisterMethod(TISQLCommand,'getRowsAffected',TypeInfo(_T54),[TypeInfo(LongWord),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCommand','getRowsAffected',40));


//RegRegisterMethod(TISQLCommand,'close',TypeInfo(_T55),[TypeInfo(SQLResult)], pointer(44));
RegRegisterMethod(TISQLCommand,'close',TypeInfo(_T55),[TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCommand','close',44));


//RegRegisterMethod(TISQLCommand,'getErrorMessageLen',TypeInfo(_T57),[TypeInfo(SmallInt),TypeInfo(SQLResult)], pointer(52));
RegRegisterMethod(TISQLCommand,'getErrorMessageLen',TypeInfo(_T57),[TypeInfo(SmallInt),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCommand','getErrorMessageLen',52));


//RegRegisterMethod(TISQLConnection,'connect',TypeInfo(_T59),[TypeInfo(SQLResult)], pointer(4));
RegRegisterMethod(TISQLConnection,'connect',TypeInfo(_T59),[TypeInfo(SQLResult)],  getVMTProcAddr('TISQLConnection','connect',4));


//RegRegisterMethod(TISQLConnection,'disconnect',TypeInfo(_T60),[TypeInfo(SQLResult)], pointer(12));
RegRegisterMethod(TISQLConnection,'disconnect',TypeInfo(_T60),[TypeInfo(SQLResult)],  getVMTProcAddr('TISQLConnection','disconnect',12));


//RegRegisterMethod(TISQLConnection,'getSQLCommand',TypeInfo(_T61),[TypeInfo(TISQLCommand),TypeInfo(SQLResult)], pointer(16));
RegRegisterMethod(TISQLConnection,'getSQLCommand',TypeInfo(_T61),[TypeInfo(TISQLCommand),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLConnection','getSQLCommand',16));


//RegRegisterMethod(TISQLConnection,'getSQLMetaData',TypeInfo(_T62),[TypeInfo(TISQLMetaData),TypeInfo(SQLResult)], pointer(20));
RegRegisterMethod(TISQLConnection,'getSQLMetaData',TypeInfo(_T62),[TypeInfo(TISQLMetaData),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLConnection','getSQLMetaData',20));


//RegRegisterMethod(TISQLConnection,'SetOption',TypeInfo(_T63),[TypeInfo(TSQLConnectionOption),TypeInfo(Longint),TypeInfo(SQLResult)], pointer(24));
RegRegisterMethod(TISQLConnection,'SetOption',TypeInfo(_T63),[TypeInfo(TSQLConnectionOption),TypeInfo(Longint),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLConnection','SetOption',24));


//RegRegisterMethod(TISQLConnection,'SetStringOption',TypeInfo(_T64),[TypeInfo(TSQLConnectionOption),TypeInfo(WideString),TypeInfo(SQLResult)], pointer(28));
RegRegisterMethod(TISQLConnection,'SetStringOption',TypeInfo(_T64),[TypeInfo(TSQLConnectionOption),TypeInfo(WideString),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLConnection','SetStringOption',28));


//RegRegisterMethod(TISQLConnection,'GetOption',TypeInfo(_T65),[TypeInfo(TSQLConnectionOption),TypeInfoPointer,TypeInfo(SmallInt),TypeInfo(SmallInt),TypeInfo(SQLResult)], pointer(32));
RegRegisterMethod(TISQLConnection,'GetOption',TypeInfo(_T65),[TypeInfo(TSQLConnectionOption),TypeInfoPointer,TypeInfo(SmallInt),TypeInfo(SmallInt),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLConnection','GetOption',32));


//RegRegisterMethod(TISQLConnection,'GetStringOption',TypeInfo(_T66),[TypeInfo(TSQLConnectionOption),TypeInfo(WideString),TypeInfo(SQLResult)], pointer(36));
RegRegisterMethod(TISQLConnection,'GetStringOption',TypeInfo(_T66),[TypeInfo(TSQLConnectionOption),TypeInfo(WideString),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLConnection','GetStringOption',36));


//RegRegisterMethod(TISQLConnection,'beginTransaction',TypeInfo(_T67),[TypeInfo(LongWord),TypeInfo(SQLResult)], pointer(40));
RegRegisterMethod(TISQLConnection,'beginTransaction',TypeInfo(_T67),[TypeInfo(LongWord),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLConnection','beginTransaction',40));


//RegRegisterMethod(TISQLConnection,'commit',TypeInfo(_T68),[TypeInfo(LongWord),TypeInfo(SQLResult)], pointer(44));
RegRegisterMethod(TISQLConnection,'commit',TypeInfo(_T68),[TypeInfo(LongWord),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLConnection','commit',44));


//RegRegisterMethod(TISQLConnection,'rollback',TypeInfo(_T69),[TypeInfo(LongWord),TypeInfo(SQLResult)], pointer(48));
RegRegisterMethod(TISQLConnection,'rollback',TypeInfo(_T69),[TypeInfo(LongWord),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLConnection','rollback',48));


//RegRegisterMethod(TISQLConnection,'getErrorMessageLen',TypeInfo(_T71),[TypeInfo(SmallInt),TypeInfo(SQLResult)], pointer(56));
RegRegisterMethod(TISQLConnection,'getErrorMessageLen',TypeInfo(_T71),[TypeInfo(SmallInt),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLConnection','getErrorMessageLen',56));


//RegRegisterMethod(TISQLCursor,'SetOption',TypeInfo(_T73),[TypeInfo(TSQLCursorOption),TypeInfo(Longint),TypeInfo(SQLResult)], pointer(0));
RegRegisterMethod(TISQLCursor,'SetOption',TypeInfo(_T73),[TypeInfo(TSQLCursorOption),TypeInfo(Longint),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCursor','SetOption',0));


//RegRegisterMethod(TISQLCursor,'SetStringOption',TypeInfo(_T74),[TypeInfo(TSQLCursorOption),TypeInfo(WideString),TypeInfo(SQLResult)], pointer(4));
RegRegisterMethod(TISQLCursor,'SetStringOption',TypeInfo(_T74),[TypeInfo(TSQLCursorOption),TypeInfo(WideString),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCursor','SetStringOption',4));


//RegRegisterMethod(TISQLCursor,'GetOption',TypeInfo(_T75),[TypeInfo(TSQLCursorOption),TypeInfoPointer,TypeInfo(SmallInt),TypeInfo(SmallInt),TypeInfo(SQLResult)], pointer(8));
RegRegisterMethod(TISQLCursor,'GetOption',TypeInfo(_T75),[TypeInfo(TSQLCursorOption),TypeInfoPointer,TypeInfo(SmallInt),TypeInfo(SmallInt),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCursor','GetOption',8));


//RegRegisterMethod(TISQLCursor,'GetStringOption',TypeInfo(_T76),[TypeInfo(TSQLCursorOption),TypeInfo(WideString),TypeInfo(SQLResult)], pointer(12));
RegRegisterMethod(TISQLCursor,'GetStringOption',TypeInfo(_T76),[TypeInfo(TSQLCursorOption),TypeInfo(WideString),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCursor','GetStringOption',12));


//RegRegisterMethod(TISQLCursor,'getCurObjectTypeName',TypeInfo(_T77),[TypeInfo(Word),TypeInfo(WideString)], pointer(16));
RegRegisterMethod(TISQLCursor,'getCurObjectTypeName',TypeInfo(_T77),[TypeInfo(Word),TypeInfo(WideString)],  getVMTProcAddr('TISQLCursor','getCurObjectTypeName',16));


//RegRegisterMethod(TISQLCursor,'getErrorMessageLen',TypeInfo(_T79),[TypeInfo(SmallInt),TypeInfo(SQLResult)], pointer(24));
RegRegisterMethod(TISQLCursor,'getErrorMessageLen',TypeInfo(_T79),[TypeInfo(SmallInt),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCursor','getErrorMessageLen',24));


//RegRegisterMethod(TISQLCursor,'getColumnCount',TypeInfo(_T80),[TypeInfo(Word),TypeInfo(SQLResult)], pointer(32));
RegRegisterMethod(TISQLCursor,'getColumnCount',TypeInfo(_T80),[TypeInfo(Word),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCursor','getColumnCount',32));


//RegRegisterMethod(TISQLCursor,'getColumnNameLength',TypeInfo(_T81),[TypeInfo(Word),TypeInfo(Word),TypeInfo(SQLResult)], pointer(36));
RegRegisterMethod(TISQLCursor,'getColumnNameLength',TypeInfo(_T81),[TypeInfo(Word),TypeInfo(Word),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCursor','getColumnNameLength',36));


//RegRegisterMethod(TISQLCursor,'getColumnType',TypeInfo(_T83),[TypeInfo(Word),TypeInfo(Word),TypeInfo(Word),TypeInfo(SQLResult)], pointer(48));
RegRegisterMethod(TISQLCursor,'getColumnType',TypeInfo(_T83),[TypeInfo(Word),TypeInfo(Word),TypeInfo(Word),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCursor','getColumnType',48));


//RegRegisterMethod(TISQLCursor,'getColumnLength',TypeInfo(_T84),[TypeInfo(Word),TypeInfo(LongWord),TypeInfo(SQLResult)], pointer(52));
RegRegisterMethod(TISQLCursor,'getColumnLength',TypeInfo(_T84),[TypeInfo(Word),TypeInfo(LongWord),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCursor','getColumnLength',52));


//RegRegisterMethod(TISQLCursor,'getColumnPrecision',TypeInfo(_T85),[TypeInfo(Word),TypeInfo(SmallInt),TypeInfo(SQLResult)], pointer(56));
RegRegisterMethod(TISQLCursor,'getColumnPrecision',TypeInfo(_T85),[TypeInfo(Word),TypeInfo(SmallInt),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCursor','getColumnPrecision',56));


//RegRegisterMethod(TISQLCursor,'getColumnScale',TypeInfo(_T86),[TypeInfo(Word),TypeInfo(SmallInt),TypeInfo(SQLResult)], pointer(60));
RegRegisterMethod(TISQLCursor,'getColumnScale',TypeInfo(_T86),[TypeInfo(Word),TypeInfo(SmallInt),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCursor','getColumnScale',60));


//RegRegisterMethod(TISQLCursor,'isNullable',TypeInfo(_T87),[TypeInfo(Word),TypeInfo(LongBool),TypeInfo(SQLResult)], pointer(64));
RegRegisterMethod(TISQLCursor,'isNullable',TypeInfo(_T87),[TypeInfo(Word),TypeInfo(LongBool),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCursor','isNullable',64));


//RegRegisterMethod(TISQLCursor,'isAutoIncrement',TypeInfo(_T88),[TypeInfo(Word),TypeInfo(LongBool),TypeInfo(SQLResult)], pointer(68));
RegRegisterMethod(TISQLCursor,'isAutoIncrement',TypeInfo(_T88),[TypeInfo(Word),TypeInfo(LongBool),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCursor','isAutoIncrement',68));


//RegRegisterMethod(TISQLCursor,'isReadOnly',TypeInfo(_T89),[TypeInfo(Word),TypeInfo(LongBool),TypeInfo(SQLResult)], pointer(72));
RegRegisterMethod(TISQLCursor,'isReadOnly',TypeInfo(_T89),[TypeInfo(Word),TypeInfo(LongBool),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCursor','isReadOnly',72));


//RegRegisterMethod(TISQLCursor,'isSearchable',TypeInfo(_T90),[TypeInfo(Word),TypeInfo(LongBool),TypeInfo(SQLResult)], pointer(76));
RegRegisterMethod(TISQLCursor,'isSearchable',TypeInfo(_T90),[TypeInfo(Word),TypeInfo(LongBool),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCursor','isSearchable',76));


//RegRegisterMethod(TISQLCursor,'isBlobSizeExact',TypeInfo(_T91),[TypeInfo(Word),TypeInfo(LongBool),TypeInfo(SQLResult)], pointer(80));
RegRegisterMethod(TISQLCursor,'isBlobSizeExact',TypeInfo(_T91),[TypeInfo(Word),TypeInfo(LongBool),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCursor','isBlobSizeExact',80));


//RegRegisterMethod(TISQLCursor,'next',TypeInfo(_T92),[TypeInfo(SQLResult)], pointer(84));
RegRegisterMethod(TISQLCursor,'next',TypeInfo(_T92),[TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCursor','next',84));


//RegRegisterMethod(TISQLCursor,'getShort',TypeInfo(_T95),[TypeInfo(Word),TypeInfoPointer,TypeInfo(LongBool),TypeInfo(SQLResult)], pointer(96));
RegRegisterMethod(TISQLCursor,'getShort',TypeInfo(_T95),[TypeInfo(Word),TypeInfoPointer,TypeInfo(LongBool),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCursor','getShort',96));


//RegRegisterMethod(TISQLCursor,'getLong',TypeInfo(_T96),[TypeInfo(Word),TypeInfoPointer,TypeInfo(LongBool),TypeInfo(SQLResult)], pointer(100));
RegRegisterMethod(TISQLCursor,'getLong',TypeInfo(_T96),[TypeInfo(Word),TypeInfoPointer,TypeInfo(LongBool),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCursor','getLong',100));


//RegRegisterMethod(TISQLCursor,'getInt64',TypeInfo(_T97),[TypeInfo(Word),TypeInfoPointer,TypeInfo(LongBool),TypeInfo(SQLResult)], pointer(104));
RegRegisterMethod(TISQLCursor,'getInt64',TypeInfo(_T97),[TypeInfo(Word),TypeInfoPointer,TypeInfo(LongBool),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCursor','getInt64',104));


//RegRegisterMethod(TISQLCursor,'getDouble',TypeInfo(_T98),[TypeInfo(Word),TypeInfoPointer,TypeInfo(LongBool),TypeInfo(SQLResult)], pointer(108));
RegRegisterMethod(TISQLCursor,'getDouble',TypeInfo(_T98),[TypeInfo(Word),TypeInfoPointer,TypeInfo(LongBool),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCursor','getDouble',108));


//RegRegisterMethod(TISQLCursor,'getBcd',TypeInfo(_T99),[TypeInfo(Word),TypeInfoPointer,TypeInfo(LongBool),TypeInfo(SQLResult)], pointer(112));
RegRegisterMethod(TISQLCursor,'getBcd',TypeInfo(_T99),[TypeInfo(Word),TypeInfoPointer,TypeInfo(LongBool),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCursor','getBcd',112));


//RegRegisterMethod(TISQLCursor,'getTimeStamp',TypeInfo(_T100),[TypeInfo(Word),TypeInfoPointer,TypeInfo(LongBool),TypeInfo(SQLResult)], pointer(116));
RegRegisterMethod(TISQLCursor,'getTimeStamp',TypeInfo(_T100),[TypeInfo(Word),TypeInfoPointer,TypeInfo(LongBool),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCursor','getTimeStamp',116));


//RegRegisterMethod(TISQLCursor,'getTime',TypeInfo(_T101),[TypeInfo(Word),TypeInfoPointer,TypeInfo(LongBool),TypeInfo(SQLResult)], pointer(120));
RegRegisterMethod(TISQLCursor,'getTime',TypeInfo(_T101),[TypeInfo(Word),TypeInfoPointer,TypeInfo(LongBool),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCursor','getTime',120));


//RegRegisterMethod(TISQLCursor,'getDate',TypeInfo(_T102),[TypeInfo(Word),TypeInfoPointer,TypeInfo(LongBool),TypeInfo(SQLResult)], pointer(124));
RegRegisterMethod(TISQLCursor,'getDate',TypeInfo(_T102),[TypeInfo(Word),TypeInfoPointer,TypeInfo(LongBool),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCursor','getDate',124));


//RegRegisterMethod(TISQLCursor,'getBytes',TypeInfo(_T103),[TypeInfo(Word),TypeInfoPointer,TypeInfo(LongBool),TypeInfo(SQLResult)], pointer(128));
RegRegisterMethod(TISQLCursor,'getBytes',TypeInfo(_T103),[TypeInfo(Word),TypeInfoPointer,TypeInfo(LongBool),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCursor','getBytes',128));


//RegRegisterMethod(TISQLCursor,'getBlobSize',TypeInfo(_T104),[TypeInfo(Word),TypeInfo(LongWord),TypeInfo(LongBool),TypeInfo(SQLResult)], pointer(132));
RegRegisterMethod(TISQLCursor,'getBlobSize',TypeInfo(_T104),[TypeInfo(Word),TypeInfo(LongWord),TypeInfo(LongBool),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCursor','getBlobSize',132));


//RegRegisterMethod(TISQLCursor,'getBlob',TypeInfo(_T105),[TypeInfo(Word),TypeInfoPointer,TypeInfo(LongBool),TypeInfo(LongWord),TypeInfo(SQLResult)], pointer(136));
RegRegisterMethod(TISQLCursor,'getBlob',TypeInfo(_T105),[TypeInfo(Word),TypeInfoPointer,TypeInfo(LongBool),TypeInfo(LongWord),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLCursor','getBlob',136));


//RegRegisterMethod(TISQLMetaData,'SetOption',TypeInfo(_T106),[TypeInfo(TSQLMetaDataOption),TypeInfo(Longint),TypeInfo(SQLResult)], pointer(0));
RegRegisterMethod(TISQLMetaData,'SetOption',TypeInfo(_T106),[TypeInfo(TSQLMetaDataOption),TypeInfo(Longint),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLMetaData','SetOption',0));


//RegRegisterMethod(TISQLMetaData,'SetStringOption',TypeInfo(_T107),[TypeInfo(TSQLMetaDataOption),TypeInfo(WideString),TypeInfo(SQLResult)], pointer(4));
RegRegisterMethod(TISQLMetaData,'SetStringOption',TypeInfo(_T107),[TypeInfo(TSQLMetaDataOption),TypeInfo(WideString),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLMetaData','SetStringOption',4));


//RegRegisterMethod(TISQLMetaData,'GetOption',TypeInfo(_T108),[TypeInfo(TSQLMetaDataOption),TypeInfoPointer,TypeInfo(SmallInt),TypeInfo(SmallInt),TypeInfo(SQLResult)], pointer(8));
RegRegisterMethod(TISQLMetaData,'GetOption',TypeInfo(_T108),[TypeInfo(TSQLMetaDataOption),TypeInfoPointer,TypeInfo(SmallInt),TypeInfo(SmallInt),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLMetaData','GetOption',8));


//RegRegisterMethod(TISQLMetaData,'GetStringOption',TypeInfo(_T109),[TypeInfo(TSQLMetaDataOption),TypeInfo(WideString),TypeInfo(SQLResult)], pointer(12));
RegRegisterMethod(TISQLMetaData,'GetStringOption',TypeInfo(_T109),[TypeInfo(TSQLMetaDataOption),TypeInfo(WideString),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLMetaData','GetStringOption',12));


//RegRegisterMethod(TISQLMetaData,'getObjectList',TypeInfo(_T110),[TypeInfo(TSQLObjectType),TypeInfo(TISQLCursor),TypeInfo(SQLResult)], pointer(16));
RegRegisterMethod(TISQLMetaData,'getObjectList',TypeInfo(_T110),[TypeInfo(TSQLObjectType),TypeInfo(TISQLCursor),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLMetaData','getObjectList',16));


//RegRegisterMethod(TISQLMetaData,'getErrorMessageLen',TypeInfo(_T117),[TypeInfo(SmallInt),TypeInfo(SQLResult)], pointer(44));
RegRegisterMethod(TISQLMetaData,'getErrorMessageLen',TypeInfo(_T117),[TypeInfo(SmallInt),TypeInfo(SQLResult)],  getVMTProcAddr('TISQLMetaData','getErrorMessageLen',44));


RegisterProc(TSQLBlobStream,'Create',mtConstructor,TypeInfo(_T118),[
TypeInfo(TBlobField),
TypeInfo(TBlobStreamMode)],Addr(TSQLBlobStream.Create),cRegister);

RegRegisterMethod(TSQLBlobStream,'ReadBlobData',TypeInfo(_T119),NoParams,Addr(TSQLBlobStream.ReadBlobData));

//RegRegisterMethod(TSQLConnection,'CheckDisconnect',TypeInfo(_T120),NoParams, pointer(80));
RegRegisterMethod(TSQLConnection,'CheckDisconnect',TypeInfo(_T120),NoParams,  getVMTProcAddr('TSQLConnection','CheckDisconnect',80));


//RegRegisterMethod(TSQLConnection,'ConnectionOptions',TypeInfo(_T121),NoParams, pointer(84));
RegRegisterMethod(TSQLConnection,'ConnectionOptions',TypeInfo(_T121),NoParams,  getVMTProcAddr('TSQLConnection','ConnectionOptions',84));


RegRegisterMethod(TSQLConnection,'CloneConnection',TypeInfo(_T122),[TypeInfo(TSQLConnection)],Addr(TSQLConnection.CloneConnection));

RegRegisterMethod(TSQLConnection,'CloseDataSets',TypeInfo(_T123),NoParams,Addr(TSQLConnection.CloseDataSets));

RegRegisterMethod(TSQLConnection,'commit',TypeInfo(_T124),[
TypeInfo(IDispatch)],Addr(__TSQLConnection__commit__Wrapper));

RegisterProc(TSQLConnection,'execute',mtScriptMethod,TypeInfo(_T125),[
TypeInfo(WideString),
TypeInfo(TParams),
TypeInfoPointer,TypeInfo(Integer)],Addr(__TSQLConnection__execute__Wrapper),cRegister);

RegRegisterMethod(TSQLConnection,'ExecuteDirect',TypeInfo(_T126),[
TypeInfo(WideString),TypeInfo(Integer)],Addr(TSQLConnection.ExecuteDirect));

RegRegisterMethod(TSQLConnection,'GetFieldNames',TypeInfo(_T127),[
TypeInfo(String),
TypeInfo(TStrings)],Addr(TSQLConnection.GetFieldNames));

RegRegisterMethod(TSQLConnection,'GetIndexNames',TypeInfo(_T128),[
TypeInfo(String),
TypeInfo(TStrings)],Addr(TSQLConnection.GetIndexNames));

RegRegisterMethod(TSQLConnection,'GetProcedureNames',TypeInfo(_T129),[
TypeInfo(TStrings)],Addr(TSQLConnection.GetProcedureNames));

RegRegisterMethod(TSQLConnection,'GetPackageNames',TypeInfo(_T130),[
TypeInfo(TStrings)],Addr(TSQLConnection.GetPackageNames));

RegRegisterMethod(TSQLConnection,'GetSchemaNames',TypeInfo(_T131),[
TypeInfo(TStrings)],Addr(TSQLConnection.GetSchemaNames));

RegRegisterMethod(TSQLConnection,'GetDefaultSchemaName',TypeInfo(_T132),[TypeInfo(WideString)],Addr(TSQLConnection.GetDefaultSchemaName));

RegRegisterMethod(TSQLConnection,'getProcedureParams',TypeInfo(_T133),[
TypeInfo(WideString),
TypeInfo(TList)],Addr(TSQLConnection.getProcedureParams));

RegRegisterMethod(TSQLConnection,'GetTableNames',TypeInfo(_T134),[
TypeInfo(TStrings),
TypeInfo(Boolean)],Addr(__TSQLConnection__GetTableNames__Wrapper));

RegisterProc(TSQLConnection,'LoadParamsFromIniFile',mtScriptMethod,TypeInfo(_T135),[
TypeInfo(WideString)],Addr(__TSQLConnection__LoadParamsFromIniFile__Wrapper),cRegister);

RegRegisterMethod(TSQLConnection,'rollback',TypeInfo(_T136),[
TypeInfo(IDispatch)],Addr(__TSQLConnection__rollback__Wrapper));

RegRegisterMethod(TSQLConnection,'StartTransaction',TypeInfo(_T138),[
TypeInfo(IDispatch)],Addr(__TSQLConnection__StartTransaction__Wrapper));

RegRegisterMethod(TSQLConnection,'GetLoginUsername',TypeInfo(_T139),[TypeInfo(WideString)],Addr(TSQLConnection.GetLoginUsername));

RegisterProc(TSQLDataLink,'Create',mtConstructor,TypeInfo(_T140),[
TypeInfo(TCustomSQLDataSet)],Addr(TSQLDataLink.Create),cRegister);

RegRegisterMethod(TSQLMonitor,'LoadFromFile',TypeInfo(_T142),[
TypeInfo(String)],Addr(TSQLMonitor.LoadFromFile));

RegRegisterMethod(TSQLMonitor,'SaveToFile',TypeInfo(_T143),[
TypeInfo(String)],Addr(TSQLMonitor.SaveToFile));

//RegRegisterMethod(TSQLStoredProc,'ExecProc',TypeInfo(_T144),[TypeInfo(Integer)], pointer(680));
RegRegisterMethod(TSQLStoredProc,'ExecProc',TypeInfo(_T144),[TypeInfo(Integer)],  getVMTProcAddr('TSQLStoredProc','ExecProc',680));


RegRegisterMethod(TSQLStoredProc,'NextRecordSet',TypeInfo(_T145),[TypeInfo(TCustomSQLDataSet)],Addr(TSQLStoredProc.NextRecordSet));

RegRegisterMethod(TSQLTable,'DeleteRecords',TypeInfo(_T146),NoParams,Addr(TSQLTable.DeleteRecords));

RegRegisterMethod(TSQLTable,'GetIndexNames',TypeInfo(_T147),[
TypeInfo(TWideStrings)],Addr(TSQLTable.GetIndexNames));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegRegisterMethod(TISQLCommand,'prepare',TypeInfo(_T50),[
TypeInfoPWideChar,
TypeInfo(Word),TypeInfo(SQLResult)], pointer(24))}

{RegRegisterMethod(TISQLCommand,'executeImmediate',TypeInfo(_T52),[
TypeInfoPWideChar,
TypeInfo(TISQLCursor),TypeInfo(SQLResult)], pointer(32))}

{RegRegisterMethod(TISQLCommand,'getErrorMessage',TypeInfo(_T56),[
TypeInfoPWideChar,TypeInfo(SQLResult)], pointer(48))}

{RegisterProc(TISQLConnection,'Create',mtConstructor,TypeInfo(_T58),[
TypeInfo(ISQLConnection)], pointer(0),cRegister)}

{RegRegisterMethod(TISQLConnection,'getErrorMessage',TypeInfo(_T70),[
TypeInfoPWideChar,TypeInfo(SQLResult)], pointer(52))}

{RegRegisterMethod(TISQLConnection,'getFldDescClass',TypeInfo(_T72),[TypeInfo(TFLDDescRef)], pointer(64))}

{RegRegisterMethod(TISQLCursor,'getErrorMessage',TypeInfo(_T78),[
TypeInfoPWideChar,TypeInfo(SQLResult)], pointer(20))}

{RegRegisterMethod(TISQLCursor,'getColumnName',TypeInfo(_T82),[
TypeInfo(Word),
TypeInfoPWideChar,TypeInfo(SQLResult)], pointer(40))}

{RegRegisterMethod(TISQLCursor,'getString',TypeInfo(_T93),[
TypeInfo(Word),
TypeInfoPChar,
TypeInfo(LongBool),TypeInfo(SQLResult)], pointer(88))}

{RegRegisterMethod(TISQLCursor,'getWideString',TypeInfo(_T94),[
TypeInfo(Word),
TypeInfoPWideChar,
TypeInfo(LongBool),TypeInfo(SQLResult)], pointer(92))}

{RegRegisterMethod(TISQLMetaData,'getTables',TypeInfo(_T111),[
TypeInfoPWideChar,
TypeInfo(LongWord),
TypeInfo(TISQLCursor),TypeInfo(SQLResult)], pointer(20))}

{RegRegisterMethod(TISQLMetaData,'getProcedures',TypeInfo(_T112),[
TypeInfoPWideChar,
TypeInfo(LongWord),
TypeInfo(TISQLCursor),TypeInfo(SQLResult)], pointer(24))}

{RegRegisterMethod(TISQLMetaData,'getColumns',TypeInfo(_T113),[
TypeInfoPWideChar,
TypeInfoPWideChar,
TypeInfo(LongWord),
TypeInfo(TISQLCursor),TypeInfo(SQLResult)], pointer(28))}

{RegRegisterMethod(TISQLMetaData,'getProcedureParams',TypeInfo(_T114),[
TypeInfoPWideChar,
TypeInfoPWideChar,
TypeInfo(TISQLCursor),TypeInfo(SQLResult)], pointer(32))}

{RegRegisterMethod(TISQLMetaData,'getIndices',TypeInfo(_T115),[
TypeInfoPWideChar,
TypeInfo(LongWord),
TypeInfo(TISQLCursor),TypeInfo(SQLResult)], pointer(36))}

{RegRegisterMethod(TISQLMetaData,'getErrorMessage',TypeInfo(_T116),[
TypeInfoPWideChar,TypeInfo(SQLResult)], pointer(40))}

{RegRegisterMethod(TSQLConnection,'SetTraceCallbackEvent',TypeInfo(_T137),[
TypeInfo(TSQLCallbackEvent),
TypeInfo(Integer)],Addr(TSQLConnection.SetTraceCallbackEvent))}

{RegRegisterMethod(TSQLMonitor,'Trace',TypeInfo(_T141),[
TypeInfoPointer,
TypeInfo(Boolean)], pointer(48))}

RegisterEvent(TypeInfo(TConnectChangeEvent),[
TypeInfo(TObject),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TParseInsertSqlEvent),[
TypeInfo(TWideStrings),
TypeInfo(WideString),
TypeInfo(Boolean),
TypeInfo(WideString)]);

RegisterEvent(TypeInfo(TParseSqlEvent),[
TypeInfo(TWideStrings),
TypeInfo(WideString),
TypeInfo(WideString)]);

RegisterEvent(TypeInfo(TSQLConnectionLoginEvent),[
TypeInfo(TSQLConnection),
TypeInfo(TWideStrings)]);

{RegisterEvent(TypeInfo(TTraceEvent25),[
TypeInfo(TObject),
TypeInfoPointer,
TypeInfo(Boolean)]);}

{RegisterEvent(TypeInfo(TTraceEvent30),[
TypeInfo(TObject),
TypeInfoPointer,
TypeInfo(Boolean)]);}

{RegisterEvent(TypeInfo(TTraceLogEvent25),[
TypeInfo(TObject),
TypeInfoPointer]);}

{RegisterEvent(TypeInfo(TTraceLogEvent30),[
TypeInfo(TObject),
TypeInfoPointer]);}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
