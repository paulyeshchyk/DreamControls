{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit DATABKR_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Variants,
  ActiveX,
  Classes,
  Midas,
  Provider,
  SysUtils,
  DataBkr;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (const p0 : string;
p1 : Integer;
p2 : Integer;
p3 : Boolean) of object;

_T1 = procedure (const p0 : string) of object;

_T2 = _T1;

_T3 = _T1;

_T4 = _T1;

_T5 = _T1;

_T6 = procedure (p0 : TCustomProvider) of object;

_T7 = _T6;

_T8 = procedure  of object;

_T9 = _T8;

_T10 = function : OleVariant of object;

_T11 = function (const p0 : string): TCustomProvider of object;

_T12 = _T11;

_T13 = _T6;

_T14 = _T6;

_T15 = _T8;

_T16 = _T8;

procedure ____RegisterPooled__Wrapper(cArgs : integer; pArgs : PArgList);
begin
case cArgs of
3:
begin
RegisterPooled(OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
4:
begin
RegisterPooled(OleVariant(pargs^[3]),OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function __DC__GetTCRemoteDataModule__Providers(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCRemoteDataModule(Instance).Providers[OleVariant(Params^[0])]);
end;

function __DC__GetTCRemoteDataModule__ProviderCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCRemoteDataModule(Instance).ProviderCount;
end;

function __DC__GetTRemoteDataModule__Providers(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TRemoteDataModule(Instance).Providers[OleVariant(Params^[0])]);
end;

function __DC__GetTRemoteDataModule__ProviderCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TRemoteDataModule(Instance).ProviderCount;
end;

procedure __RegisterProps;
begin
RegisterIndexedProperty(TCRemoteDataModule,'Providers',1,False,__DC__GetTCRemoteDataModule__Providers,nil);
RegisterProperty(TCRemoteDataModule,'ProviderCount',__DC__GetTCRemoteDataModule__ProviderCount,nil);
RegisterIndexedProperty(TRemoteDataModule,'Providers',1,False,__DC__GetTRemoteDataModule__Providers,nil);
RegisterProperty(TRemoteDataModule,'ProviderCount',__DC__GetTRemoteDataModule__ProviderCount,nil);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..1] of TClass = (
TCRemoteDataModule,
TRemoteDataModule
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..5] of string = (
'RegisterPooled'
,'UnregisterPooled'
,'EnableSocketTransport'
,'DisableSocketTransport'
,'EnableWebTransport'
,'DisableWebTransport'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtScriptProc,TypeInfo(_T0),[
TypeInfo(string),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Boolean)],Addr(____RegisterPooled__Wrapper),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(string)],Addr(UnregisterPooled),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T2),[
TypeInfo(string)],Addr(EnableSocketTransport),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T3),[
TypeInfo(string)],Addr(DisableSocketTransport),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T4),[
TypeInfo(string)],Addr(EnableWebTransport),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T5),[
TypeInfo(string)],Addr(DisableWebTransport),cRegister);

//RegRegisterMethod(TCRemoteDataModule,'RegisterProvider',TypeInfo(_T6),[TypeInfo(TCustomProvider)], pointer(60));
RegRegisterMethod(TCRemoteDataModule,'RegisterProvider',TypeInfo(_T6),[TypeInfo(TCustomProvider)],  getVMTProcAddr('TCRemoteDataModule','RegisterProvider',60));


//RegRegisterMethod(TCRemoteDataModule,'UnRegisterProvider',TypeInfo(_T7),[TypeInfo(TCustomProvider)], pointer(64));
RegRegisterMethod(TCRemoteDataModule,'UnRegisterProvider',TypeInfo(_T7),[TypeInfo(TCustomProvider)],  getVMTProcAddr('TCRemoteDataModule','UnRegisterProvider',64));


//RegRegisterMethod(TCRemoteDataModule,'Lock',TypeInfo(_T8),NoParams, pointer(68));
RegRegisterMethod(TCRemoteDataModule,'Lock',TypeInfo(_T8),NoParams,  getVMTProcAddr('TCRemoteDataModule','Lock',68));


//RegRegisterMethod(TCRemoteDataModule,'Unlock',TypeInfo(_T9),NoParams, pointer(72));
RegRegisterMethod(TCRemoteDataModule,'Unlock',TypeInfo(_T9),NoParams,  getVMTProcAddr('TCRemoteDataModule','Unlock',72));


RegRegisterMethod(TCRemoteDataModule,'CRDMGetProviderNames',TypeInfo(_T10),[TypeInfo(OleVariant)],Addr(TCRemoteDataModule.CRDMGetProviderNames));

//RegRegisterMethod(TCRemoteDataModule,'GetProvider',TypeInfo(_T11),[TypeInfo(string),TypeInfo(TCustomProvider)], pointer(76));
RegRegisterMethod(TCRemoteDataModule,'GetProvider',TypeInfo(_T11),[TypeInfo(string),TypeInfo(TCustomProvider)],  getVMTProcAddr('TCRemoteDataModule','GetProvider',76));


//RegRegisterMethod(TRemoteDataModule,'GetProvider',TypeInfo(_T12),[TypeInfo(string),TypeInfo(TCustomProvider)], pointer(60));
RegRegisterMethod(TRemoteDataModule,'GetProvider',TypeInfo(_T12),[TypeInfo(string),TypeInfo(TCustomProvider)],  getVMTProcAddr('TRemoteDataModule','GetProvider',60));


//RegRegisterMethod(TRemoteDataModule,'RegisterProvider',TypeInfo(_T13),[TypeInfo(TCustomProvider)], pointer(64));
RegRegisterMethod(TRemoteDataModule,'RegisterProvider',TypeInfo(_T13),[TypeInfo(TCustomProvider)],  getVMTProcAddr('TRemoteDataModule','RegisterProvider',64));


//RegRegisterMethod(TRemoteDataModule,'UnRegisterProvider',TypeInfo(_T14),[TypeInfo(TCustomProvider)], pointer(68));
RegRegisterMethod(TRemoteDataModule,'UnRegisterProvider',TypeInfo(_T14),[TypeInfo(TCustomProvider)],  getVMTProcAddr('TRemoteDataModule','UnRegisterProvider',68));


//RegRegisterMethod(TRemoteDataModule,'Lock',TypeInfo(_T15),NoParams, pointer(72));
RegRegisterMethod(TRemoteDataModule,'Lock',TypeInfo(_T15),NoParams,  getVMTProcAddr('TRemoteDataModule','Lock',72));


//RegRegisterMethod(TRemoteDataModule,'Unlock',TypeInfo(_T16),NoParams, pointer(76));
RegRegisterMethod(TRemoteDataModule,'Unlock',TypeInfo(_T16),NoParams,  getVMTProcAddr('TRemoteDataModule','Unlock',76));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
