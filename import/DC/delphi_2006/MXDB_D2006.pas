{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit MXDB_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Variants,
  Windows,
  Messages,
  SysUtils,
  Classes,
  Graphics,
  Controls,
  Forms,
  Dialogs,
  Menus,
  BDE,
  DB,
  DBTables,
  Mxarrays,
  Mxstore,
  Mxconsts,
  MXCOMMON,
  MXTABLES,
  MXQPARSE,
  MXQEDCOM,
  MXDB;
function ConvertTDimInfoToVariant(var R : TDimInfo) : OleVariant;
function ConvertVariantToTDimInfo(const V : OleVariant) : TDimInfo;
function ConvertTDimRangeToVariant(var R : TDimRange) : OleVariant;
function ConvertVariantToTDimRange(const V : OleVariant) : TDimRange;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TDimInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TDimInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setiState(const val : TDimState);
function getiState : TDimState;
property iState : TDimState read getiState write setiState;
procedure setiValue(const val : Integer);
function getiValue : Integer;
property iValue : Integer read getiValue write setiValue;
procedure setiIndex(const val : Integer);
function getiIndex : Integer;
property iIndex : Integer read getiIndex write setiIndex;
procedure setiActiveIndex(const val : Integer);
function getiActiveIndex : Integer;
property iActiveIndex : Integer read getiActiveIndex write setiActiveIndex;
procedure setiGroup(const val : TDimGroup);
function getiGroup : TDimGroup;
property iGroup : TDimGroup read getiGroup write setiGroup;
end;
type __TDimRange__Wrapper = class(TDCRecordWrapper)
private
fR : TDimRange;
public
function GetRecordPtr : pointer; override;
published
procedure setFirst(const val : Integer);
function getFirst : Integer;
property First : Integer read getFirst write setFirst;
procedure setLast(const val : Integer);
function getLast : Integer;
property Last : Integer read getLast write setLast;
end;
type
_T0 = function (p0 : TSmallIntArray;
p1 : Boolean): string of object;

_T1 = function (p0 : TSmallIntArray;
p1 : string;
p2 : Boolean): string of object;

_T2 = procedure  of object;

_T3 = procedure (p0 : TDecisionDataEvent) of object;

_T4 = _T2;

_T5 = procedure (var p0 : TPivotState) of object;

_T6 = procedure (p0 : TPivotState) of object;

_T7 = _T2;

_T8 = _T3;

_T9 = function (p0 : Integer;
p1 : Integer): string of object;

_T10 = function (p0 : Integer;
p1 : Integer): Variant of object;

_T11 = function (p0 : Integer): string of object;

_T12 = function (p0 : Integer): Integer of object;

_T13 = _T11;

_T14 = procedure (p0 : Integer) of object;

_T15 = function (p0 : Integer;
p1 : Integer;
p2 : Integer;
p3 : Integer): Variant of object;

_T16 = function (p0 : Integer;
p1 : Integer;
var p2 : Integer): string of object;

_T17 = function (p0 : Integer;
p1 : Integer;
var p2 : Integer): Variant of object;

_T18 = function (p0 : TDimGroup;
p1 : Integer;
p2 : Integer;
var p3 : Boolean;
var p4 : Boolean): Integer of object;

_T19 = function (p0 : Integer;
p1 : Integer;
var p2 : TSmallIntArray): Boolean of object;

_T20 = function (p0 : TDimGroup;
p1 : Integer;
p2 : Integer): IDispatch of object;

_T21 = function (p0 : TDimGroup;
p1 : Integer;
p2 : Boolean): Integer of object;

_T22 = procedure (p0 : TDimGroup;
p1 : Integer;
p2 : Boolean) of object;

_T23 = _T22;

_T24 = _T22;

_T25 = _T22;

_T26 = procedure (p0 : TDimGroup;
p1 : Integer;
p2 : Integer;
p3 : Boolean) of object;

_T27 = procedure (p0 : TDimGroup;
p1 : TDimGroup;
p2 : Integer;
p3 : Integer;
p4 : Boolean) of object;

_T28 = _T27;

_T29 = function (p0 : TDimGroup;
p1 : Boolean): Integer of object;

_T30 = function (p0 : Integer): TDimGroup of object;

_T31 = function (p0 : Integer;
p1 : Boolean): Integer of object;

_T32 = function (p0 : Integer): TDimState of object;

_T33 = _T12;

_T34 = function (p0 : Integer): TRowState of object;

_T35 = _T14;

_T36 = procedure (p0 : TDimInfoArray) of object;

{_T37 = function (p0 : TDimGroup;
p1 : Integer;
p2 : Boolean): PDimInfo of object;}

_T38 = _T21;

_T39 = _T29;

_T40 = function (p0 : TDimGroup;
p1 : Boolean): TIArray of object;

_T41 = function (p0 : TDimInfoArray): Boolean of object;

_T42 = procedure (p0 : Integer;
p1 : Integer) of object;

_T43 = procedure (p0 : TIArray) of object;

_T44 = _T42;

_T45 = _T12;

_T46 = _T2;

function __TDimInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDimInfo__Wrapper.setiState(const val : TDimState);
begin
TDimInfo(GetRecordPtr^).iState := val;
end;
function __TDimInfo__Wrapper.getiState : TDimState;
begin
result := TDimInfo(GetRecordPtr^).iState;
end;
procedure __TDimInfo__Wrapper.setiValue(const val : Integer);
begin
TDimInfo(GetRecordPtr^).iValue := val;
end;
function __TDimInfo__Wrapper.getiValue : Integer;
begin
result := TDimInfo(GetRecordPtr^).iValue;
end;
procedure __TDimInfo__Wrapper.setiIndex(const val : Integer);
begin
TDimInfo(GetRecordPtr^).iIndex := val;
end;
function __TDimInfo__Wrapper.getiIndex : Integer;
begin
result := TDimInfo(GetRecordPtr^).iIndex;
end;
procedure __TDimInfo__Wrapper.setiActiveIndex(const val : Integer);
begin
TDimInfo(GetRecordPtr^).iActiveIndex := val;
end;
function __TDimInfo__Wrapper.getiActiveIndex : Integer;
begin
result := TDimInfo(GetRecordPtr^).iActiveIndex;
end;
procedure __TDimInfo__Wrapper.setiGroup(const val : TDimGroup);
begin
TDimInfo(GetRecordPtr^).iGroup := val;
end;
function __TDimInfo__Wrapper.getiGroup : TDimGroup;
begin
result := TDimInfo(GetRecordPtr^).iGroup;
end;
function __TDimRange__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDimRange__Wrapper.setFirst(const val : Integer);
begin
TDimRange(GetRecordPtr^).First := val;
end;
function __TDimRange__Wrapper.getFirst : Integer;
begin
result := TDimRange(GetRecordPtr^).First;
end;
procedure __TDimRange__Wrapper.setLast(const val : Integer);
begin
TDimRange(GetRecordPtr^).Last := val;
end;
function __TDimRange__Wrapper.getLast : Integer;
begin
result := TDimRange(GetRecordPtr^).Last;
end;
function _TDimInfo_ : IDispatch;
begin
  result := __TDimInfo__Wrapper.Create;
end;
function _TDimRange_ : IDispatch;
begin
  result := __TDimRange__Wrapper.Create;
end;
function __TDecisionSource__GetGroupExtent__Wrapper(__Instance : TDecisionSource;
p0 : TDimGroup;
p1 : Integer;
p2 : Integer): IDispatch;
var
__result : TDimRange;
__wrapper : __TDimRange__Wrapper;
begin
__result := TDecisionSource(__Instance).GetGroupExtent(p0,p1,p2);
__wrapper := __TDimRange__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;


type __TDimInfo__Wrapper__ = class(__TDimInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDimInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDimInfoToVariant(var R : TDimInfo) : OleVariant;
var
__rw : __TDimInfo__Wrapper__;
begin
__rw := __TDimInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDimInfo(const V : OleVariant) : TDimInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDimInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDimRange__Wrapper__ = class(__TDimRange__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDimRange__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDimRangeToVariant(var R : TDimRange) : OleVariant;
var
__rw : __TDimRange__Wrapper__;
begin
__rw := __TDimRange__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDimRange(const V : OleVariant) : TDimRange;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDimRange((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTDecisionCube__DesignState(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDecisionCube(Instance).DesignState;
end;

procedure __DC__SetTDecisionCube__DesignState(Instance : TObject; Params : PVariantArgList);
begin
TDecisionCube(Instance).DesignState:=OleVariant(Params^[0]);
end;

function __DC__GetTDecisionCube__Active(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDecisionCube(Instance).Active;
end;

procedure __DC__SetTDecisionCube__Active(Instance : TObject; Params : PVariantArgList);
begin
TDecisionCube(Instance).Active:=OleVariant(Params^[0]);
end;

function __DC__GetTDecisionDataLink__DecisionSource(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDecisionDataLink(Instance).DecisionSource);
end;

procedure __DC__SetTDecisionDataLink__DecisionSource(Instance : TObject; Params : PVariantArgList);
begin
TDecisionDataLink(Instance).DecisionSource:=TDecisionSource(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDecisionSource__Ready(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDecisionSource(Instance).Ready;
end;

function __DC__GetTDecisionSource__nDims(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDecisionSource(Instance).nDims;
end;

function __DC__GetTDecisionSource__nSums(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDecisionSource(Instance).nSums;
end;

function __DC__GetTDecisionSource__nRowDims(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDecisionSource(Instance).nRowDims;
end;

function __DC__GetTDecisionSource__nColDims(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDecisionSource(Instance).nColDims;
end;

function __DC__GetTDecisionSource__nOpenRowDims(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDecisionSource(Instance).nOpenRowDims;
end;

function __DC__GetTDecisionSource__nOpenColDims(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDecisionSource(Instance).nOpenColDims;
end;

function __DC__GetTDecisionSource__nDataRows(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDecisionSource(Instance).nDataRows;
end;

function __DC__GetTDecisionSource__nDataCols(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDecisionSource(Instance).nDataCols;
end;

function __DC__GetTDecisionSource__CurrentSum(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDecisionSource(Instance).CurrentSum;
end;

function __DC__GetTDimInfoArray__Limit(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDimInfoArray(Instance).Limit;
end;

function __DC__GetTIArray__AutoSize(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIArray(Instance).AutoSize;
end;

procedure __DC__SetTIArray__AutoSize(Instance : TObject; Params : PVariantArgList);
begin
TIArray(Instance).AutoSize:=OleVariant(Params^[0]);
end;

function __DC__GetTIArray__Limit(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIArray(Instance).Limit;
end;

function __DC__GetTIArray__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIArray(Instance).Items[OleVariant(Params^[0])];
end;

procedure __DC__SetTIArray__Items(Instance : TObject; Params : PVariantArgList);
begin
TIArray(Instance).Items[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TDecisionCube,'DesignState',__DC__GetTDecisionCube__DesignState,__DC__SetTDecisionCube__DesignState);
RegisterProperty(TDecisionCube,'Active',__DC__GetTDecisionCube__Active,__DC__SetTDecisionCube__Active);
RegisterProperty(TDecisionDataLink,'DecisionSource',__DC__GetTDecisionDataLink__DecisionSource,__DC__SetTDecisionDataLink__DecisionSource);
RegisterProperty(TDecisionSource,'Ready',__DC__GetTDecisionSource__Ready,nil);
RegisterProperty(TDecisionSource,'nDims',__DC__GetTDecisionSource__nDims,nil);
RegisterProperty(TDecisionSource,'nSums',__DC__GetTDecisionSource__nSums,nil);
RegisterProperty(TDecisionSource,'nRowDims',__DC__GetTDecisionSource__nRowDims,nil);
RegisterProperty(TDecisionSource,'nColDims',__DC__GetTDecisionSource__nColDims,nil);
RegisterProperty(TDecisionSource,'nOpenRowDims',__DC__GetTDecisionSource__nOpenRowDims,nil);
RegisterProperty(TDecisionSource,'nOpenColDims',__DC__GetTDecisionSource__nOpenColDims,nil);
RegisterProperty(TDecisionSource,'nDataRows',__DC__GetTDecisionSource__nDataRows,nil);
RegisterProperty(TDecisionSource,'nDataCols',__DC__GetTDecisionSource__nDataCols,nil);
RegisterProperty(TDecisionSource,'CurrentSum',__DC__GetTDecisionSource__CurrentSum,nil);
RegisterProperty(TDimInfoArray,'Limit',__DC__GetTDimInfoArray__Limit,nil);
RegisterProperty(TIArray,'AutoSize',__DC__GetTIArray__AutoSize,__DC__SetTIArray__AutoSize);
RegisterProperty(TIArray,'Limit',__DC__GetTIArray__Limit,nil);
RegisterIndexedProperty(TIArray,'Items',1,True,__DC__GetTIArray__Items,__DC__SetTIArray__Items);
end;

const __ConstNames0 : array[0..21] of string = (
'dgRow'
,'dgCol'
,'dgSum'
,'dgPage'
,'dgNone'
,'rcNextOpen'
,'rcPrevOpen'
,'rcNextClosed'
,'rcPrevClosed'
,'dmClosed'
,'dmOpen'
,'dmDrilled'
,'dmPaged'
,'dmNone'
,'xtCheck'
,'xtRadio'
,'xtRadioEx'
,'xeStateChanged'
,'xeSummaryChanged'
,'xePivot'
,'xeNewMetaData'
,'xeSourceChange'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,dgRow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,dgCol));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,dgSum));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,dgPage));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,dgNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,rcNextOpen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,rcPrevOpen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,rcNextClosed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,rcPrevClosed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,dmClosed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,dmOpen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,dmDrilled));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,dmPaged));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,dmNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,xtCheck));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,xtRadio));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,xtRadioEx));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,xeStateChanged));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,xeSummaryChanged));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,xePivot));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,xeNewMetaData));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,xeSourceChange));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..8] of TClass = (
EArrayError,
EDimIndexError,
TDecisionCube,
TDecisionDataLink,
TDecisionSource,
TDimInfoArray,
TIArray,
TPivotState,
TQADecisionSource
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..1] of string = (
'TDimInfo'
,'TDimRange'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TDimInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_TDimRange_)));
RegRegisterMethod(TDecisionCube,'GetSQL',TypeInfo(_T0),[
TypeInfo(TSmallIntArray),
TypeInfo(Boolean),TypeInfo(string)],Addr(TDecisionCube.GetSQL));

RegRegisterMethod(TDecisionCube,'GetDetailSQL',TypeInfo(_T1),[
TypeInfo(TSmallIntArray),
TypeInfo(string),
TypeInfo(Boolean),TypeInfo(string)],Addr(TDecisionCube.GetDetailSQL));

RegRegisterMethod(TDecisionCube,'ShowCubeDialog',TypeInfo(_T2),NoParams,Addr(TDecisionCube.ShowCubeDialog));

//RegRegisterMethod(TDecisionDataLink,'DecisionDataEvent',TypeInfo(_T3),[TypeInfo(TDecisionDataEvent)], pointer(12));
RegRegisterMethod(TDecisionDataLink,'DecisionDataEvent',TypeInfo(_T3),[TypeInfo(TDecisionDataEvent)],  getVMTProcAddr('TDecisionDataLink','DecisionDataEvent',12));


RegisterProc(TDecisionDataLink,'Create',mtConstructor,TypeInfo(_T4),NoParams,Addr(TDecisionDataLink.Create),cRegister);

//RegRegisterMethod(TDecisionSource,'FetchPivotState',TypeInfo(_T5),[TypeInfo(TPivotState)], pointer(48));
RegRegisterMethod(TDecisionSource,'FetchPivotState',TypeInfo(_T5),[TypeInfo(TPivotState)],  getVMTProcAddr('TDecisionSource','FetchPivotState',48));


//RegRegisterMethod(TDecisionSource,'StorePivotState',TypeInfo(_T6),[TypeInfo(TPivotState)], pointer(52));
RegRegisterMethod(TDecisionSource,'StorePivotState',TypeInfo(_T6),[TypeInfo(TPivotState)],  getVMTProcAddr('TDecisionSource','StorePivotState',52));


//RegRegisterMethod(TDecisionSource,'BeginChange',TypeInfo(_T7),NoParams, pointer(56));
RegRegisterMethod(TDecisionSource,'BeginChange',TypeInfo(_T7),NoParams,  getVMTProcAddr('TDecisionSource','BeginChange',56));


//RegRegisterMethod(TDecisionSource,'EndChange',TypeInfo(_T8),[TypeInfo(TDecisionDataEvent)], pointer(60));
RegRegisterMethod(TDecisionSource,'EndChange',TypeInfo(_T8),[TypeInfo(TDecisionDataEvent)],  getVMTProcAddr('TDecisionSource','EndChange',60));


RegRegisterMethod(TDecisionSource,'GetMemberAsString',TypeInfo(_T9),[
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(string)],Addr(TDecisionSource.GetMemberAsString));

RegRegisterMethod(TDecisionSource,'GetMemberAsVariant',TypeInfo(_T10),[
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Variant)],Addr(TDecisionSource.GetMemberAsVariant));

RegRegisterMethod(TDecisionSource,'GetDimensionName',TypeInfo(_T11),[
TypeInfo(Integer),TypeInfo(string)],Addr(TDecisionSource.GetDimensionName));

RegRegisterMethod(TDecisionSource,'GetDimensionMemberCount',TypeInfo(_T12),[
TypeInfo(Integer),TypeInfo(Integer)],Addr(TDecisionSource.GetDimensionMemberCount));

RegRegisterMethod(TDecisionSource,'GetSummaryName',TypeInfo(_T13),[
TypeInfo(Integer),TypeInfo(string)],Addr(TDecisionSource.GetSummaryName));

RegRegisterMethod(TDecisionSource,'SetCurrentSummary',TypeInfo(_T14),[
TypeInfo(Integer)],Addr(TDecisionSource.SetCurrentSummary));

RegRegisterMethod(TDecisionSource,'Get2DDataAsVariant',TypeInfo(_T15),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Variant)],Addr(TDecisionSource.Get2DDataAsVariant));

RegRegisterMethod(TDecisionSource,'GetDataAsString',TypeInfo(_T16),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(string)],Addr(TDecisionSource.GetDataAsString));

RegRegisterMethod(TDecisionSource,'GetDataAsVariant',TypeInfo(_T17),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Variant)],Addr(TDecisionSource.GetDataAsVariant));

RegRegisterMethod(TDecisionSource,'GetValueIndex',TypeInfo(_T18),[
TypeInfo(TDimGroup),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Boolean),
TypeInfo(Boolean),TypeInfo(Integer)],Addr(TDecisionSource.GetValueIndex));

RegRegisterMethod(TDecisionSource,'GetValueArray',TypeInfo(_T19),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(TSmallIntArray),TypeInfo(Boolean)],Addr(TDecisionSource.GetValueArray));

RegRegisterMethod(TDecisionSource,'GetGroupExtent',TypeInfo(_T20),[
TypeInfo(TDimGroup),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(IDispatch)],Addr(__TDecisionSource__GetGroupExtent__Wrapper));

RegRegisterMethod(TDecisionSource,'GetActiveDim',TypeInfo(_T21),[
TypeInfo(TDimGroup),
TypeInfo(Integer),
TypeInfo(Boolean),TypeInfo(Integer)],Addr(TDecisionSource.GetActiveDim));

RegRegisterMethod(TDecisionSource,'OpenDimIndexRight',TypeInfo(_T22),[
TypeInfo(TDimGroup),
TypeInfo(Integer),
TypeInfo(Boolean)],Addr(TDecisionSource.OpenDimIndexRight));

RegRegisterMethod(TDecisionSource,'CloseDimIndexRight',TypeInfo(_T23),[
TypeInfo(TDimGroup),
TypeInfo(Integer),
TypeInfo(Boolean)],Addr(TDecisionSource.CloseDimIndexRight));

RegRegisterMethod(TDecisionSource,'OpenDimIndexLeft',TypeInfo(_T24),[
TypeInfo(TDimGroup),
TypeInfo(Integer),
TypeInfo(Boolean)],Addr(TDecisionSource.OpenDimIndexLeft));

RegRegisterMethod(TDecisionSource,'ToggleDimIndex',TypeInfo(_T25),[
TypeInfo(TDimGroup),
TypeInfo(Integer),
TypeInfo(Boolean)],Addr(TDecisionSource.ToggleDimIndex));

RegRegisterMethod(TDecisionSource,'DrillDimIndex',TypeInfo(_T26),[
TypeInfo(TDimGroup),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Boolean)],Addr(TDecisionSource.DrillDimIndex));

RegRegisterMethod(TDecisionSource,'MoveDimIndexes',TypeInfo(_T27),[
TypeInfo(TDimGroup),
TypeInfo(TDimGroup),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Boolean)],Addr(TDecisionSource.MoveDimIndexes));

RegRegisterMethod(TDecisionSource,'SwapDimIndexes',TypeInfo(_T28),[
TypeInfo(TDimGroup),
TypeInfo(TDimGroup),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Boolean)],Addr(TDecisionSource.SwapDimIndexes));

RegRegisterMethod(TDecisionSource,'GetGroupCount',TypeInfo(_T29),[
TypeInfo(TDimGroup),
TypeInfo(Boolean),TypeInfo(Integer)],Addr(TDecisionSource.GetGroupCount));

RegRegisterMethod(TDecisionSource,'GetGroup',TypeInfo(_T30),[
TypeInfo(Integer),TypeInfo(TDimGroup)],Addr(TDecisionSource.GetGroup));

RegRegisterMethod(TDecisionSource,'GetIndex',TypeInfo(_T31),[
TypeInfo(Integer),
TypeInfo(Boolean),TypeInfo(Integer)],Addr(TDecisionSource.GetIndex));

RegRegisterMethod(TDecisionSource,'GetState',TypeInfo(_T32),[
TypeInfo(Integer),TypeInfo(TDimState)],Addr(TDecisionSource.GetState));

RegRegisterMethod(TDecisionSource,'GetValue',TypeInfo(_T33),[
TypeInfo(Integer),TypeInfo(Integer)],Addr(TDecisionSource.GetValue));

RegRegisterMethod(TDecisionSource,'GetRowState',TypeInfo(_T34),[
TypeInfo(Integer),TypeInfo(TRowState)],Addr(TDecisionSource.GetRowState));

RegisterProc(TDimInfoArray,'Create',mtConstructor,TypeInfo(_T35),[
TypeInfo(Integer)],Addr(TDimInfoArray.Create),cRegister);

RegRegisterMethod(TDimInfoArray,'Assign',TypeInfo(_T36),[
TypeInfo(TDimInfoArray)],Addr(TDimInfoArray.Assign));

RegRegisterMethod(TDimInfoArray,'GetGroupIndex',TypeInfo(_T38),[
TypeInfo(TDimGroup),
TypeInfo(Integer),
TypeInfo(Boolean),TypeInfo(Integer)],Addr(TDimInfoArray.GetGroupIndex));

RegRegisterMethod(TDimInfoArray,'GetGroupSize',TypeInfo(_T39),[
TypeInfo(TDimGroup),
TypeInfo(Boolean),TypeInfo(Integer)],Addr(TDimInfoArray.GetGroupSize));

RegRegisterMethod(TDimInfoArray,'GetGroupArray',TypeInfo(_T40),[
TypeInfo(TDimGroup),
TypeInfo(Boolean),TypeInfo(TIArray)],Addr(TDimInfoArray.GetGroupArray));

RegRegisterMethod(TDimInfoArray,'IsEqual',TypeInfo(_T41),[
TypeInfo(TDimInfoArray),TypeInfo(Boolean)],Addr(TDimInfoArray.IsEqual));

RegisterProc(TIArray,'Create',mtConstructor,TypeInfo(_T42),[
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TIArray.Create),cRegister);

RegRegisterMethod(TIArray,'Assign',TypeInfo(_T43),[
TypeInfo(TIArray)],Addr(TIArray.Assign));

RegRegisterMethod(TIArray,'InsertAt',TypeInfo(_T44),[
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TIArray.InsertAt));

RegRegisterMethod(TIArray,'RemoveItem',TypeInfo(_T45),[
TypeInfo(Integer),TypeInfo(Integer)],Addr(TIArray.RemoveItem));

RegisterProc(TPivotState,'Create',mtConstructor,TypeInfo(_T46),NoParams,Addr(TPivotState.Create),cRegister);

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegRegisterMethod(TDimInfoArray,'GetGroupItem',TypeInfo(_T37),[
TypeInfo(TDimGroup),
TypeInfo(Integer),
TypeInfo(Boolean),TypeInfoPointer],Addr(TDimInfoArray.GetGroupItem))}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
