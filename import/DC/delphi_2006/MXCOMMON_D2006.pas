{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit MXCOMMON_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Variants,
  Dialogs,
  Windows,
  Messages,
  SysUtils,
  Classes,
  Graphics,
  Controls,
  Forms,
  IniFiles,
  DB,
  DBTables,
  DBCommon,
  BDE,
  Mxarrays,
  Mxconsts,
  MXCOMMON;
function ConvertTTickInfoRecToVariant(var R : TTickInfoRec) : OleVariant;
function ConvertVariantToTTickInfoRec(const V : OleVariant) : TTickInfoRec;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TTickInfoRec__Wrapper = class(TDCRecordWrapper)
private
fR : TTickInfoRec;
public
function GetRecordPtr : pointer; override;
published
procedure setStartTicks(const val : Integer);
function getStartTicks : Integer;
property StartTicks : Integer read getStartTicks write setStartTicks;
procedure setEndTicks(const val : Integer);
function getEndTicks : Integer;
property EndTicks : Integer read getEndTicks write setEndTicks;
procedure setTotalTicks(const val : Integer);
function getTotalTicks : Integer;
property TotalTicks : Integer read getTotalTicks write setTotalTicks;
procedure setSName(const val : AnsiString);
function getSName : AnsiString;
property SName : AnsiString read getSName write setSName;
end;
type
_T0 = function (p0 : TFieldType): Integer of object;

_T1 = function (p0 : TDataSet;
p1 : TDimensionItems;
var p2 : Boolean): TQueryError of object;

_T2 = function (p0 : TDataSet;
p1 : TDimensionItems;
var p2 : Boolean;
var p3 : Boolean): TQueryError of object;

_T3 = function (p0 : TDimFlags;
p1 : string): string of object;

_T4 = function (p0 : TDimFlags;
p1 : TFieldType): Boolean of object;

_T5 = procedure (var p0 : string;
p1 : string) of object;

_T6 = function (var p0 : string): Boolean of object;

_T7 = procedure (p0 : TComponent) of object;

_T8 = function (p0 : Variant;
p1 : string): string of object;

_T9 = function (var p0 : Integer;
p1 : string): string of object;

_T10 = function (p0 : TDataSet): TDataBase of object;

_T11 = function : Boolean of object;

_T12 = procedure  of object;

_T13 = _T12;

_T14 = procedure (p0 : string;
const p1 : Array of Const) of object;

_T15 = function (p0 : string;
p1 : Variant): Integer of object;

_T16 = function (p0 : string): Integer of object;

_T17 = function : Integer of object;

_T18 = function (p0 : string;
p1 : Integer): Variant of object;

_T19 = function (p0 : string): Variant of object;

_T20 = function (p0 : Integer): string of object;

_T21 = _T17;

_T22 = function : TFieldType of object;

_T23 = _T17;

_T24 = function (p0 : string;
p1 : Integer): Integer of object;

_T25 = function (p0 : Integer;
p1 : Variant): Integer of object;

_T26 = function (p0 : Integer;
p1 : Integer): Variant of object;

_T27 = function (p0 : Integer): Integer of object;

_T28 = _T12;

_T29 = procedure (p0 : TCDNotifyType) of object;

_T30 = _T11;

_T31 = _T11;

{_T32 = procedure (p0 : TPersistent;
p1 : TDimensionItemClass) of object;}

_T33 = function : TDimensionItem of object;

_T34 = function (p0 : Integer;
p1 : TDimFlags): Integer of object;

_T35 = function (p0 : Integer;
var p1 : Integer;
var p2 : Integer): Boolean of object;

_T36 = function (p0 : string;
p1 : TDimFlags): Boolean of object;

_T37 = procedure (p0 : string) of object;

_T38 = procedure (p0 : Boolean) of object;

_T39 = _T12;

_T40 = _T37;

_T41 = procedure (p0 : string;
p1 : TIntArray) of object;

_T42 = procedure (p0 : string;
p1 : TSmallIntArray) of object;

function __TTickInfoRec__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTickInfoRec__Wrapper.setStartTicks(const val : Integer);
begin
TTickInfoRec(GetRecordPtr^).StartTicks := val;
end;
function __TTickInfoRec__Wrapper.getStartTicks : Integer;
begin
result := TTickInfoRec(GetRecordPtr^).StartTicks;
end;
procedure __TTickInfoRec__Wrapper.setEndTicks(const val : Integer);
begin
TTickInfoRec(GetRecordPtr^).EndTicks := val;
end;
function __TTickInfoRec__Wrapper.getEndTicks : Integer;
begin
result := TTickInfoRec(GetRecordPtr^).EndTicks;
end;
procedure __TTickInfoRec__Wrapper.setTotalTicks(const val : Integer);
begin
TTickInfoRec(GetRecordPtr^).TotalTicks := val;
end;
function __TTickInfoRec__Wrapper.getTotalTicks : Integer;
begin
result := TTickInfoRec(GetRecordPtr^).TotalTicks;
end;
procedure __TTickInfoRec__Wrapper.setSName(const val : AnsiString);
begin
TTickInfoRec(GetRecordPtr^).SName := val;
end;
function __TTickInfoRec__Wrapper.getSName : AnsiString;
begin
result := TTickInfoRec(GetRecordPtr^).SName;
end;
function _TTickInfoRec_ : IDispatch;
begin
  result := __TTickInfoRec__Wrapper.Create;
end;

type __TTickInfoRec__Wrapper__ = class(__TTickInfoRec__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTickInfoRec__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTickInfoRecToVariant(var R : TTickInfoRec) : OleVariant;
var
__rw : __TTickInfoRec__Wrapper__;
begin
__rw := __TTickInfoRec__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTickInfoRec(const V : OleVariant) : TTickInfoRec;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTickInfoRec((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTBinData__OtherBinName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBinData(Instance).OtherBinName;
end;

procedure __DC__SetTBinData__OtherBinName(Instance : TObject; Params : PVariantArgList);
begin
TBinData(Instance).OtherBinName:=OleVariant(Params^[0]);
end;

function __DC__GetTBinData__BinName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBinData(Instance).BinName[OleVariant(Params^[0])];
end;

function __DC__GetTBinData__BinCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBinData(Instance).BinCount;
end;

function __DC__GetTBinData__NameList(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TBinData(Instance).NameList);
end;

function __DC__GetTBinData__ValueList(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TBinData(Instance).ValueList);
end;

function __DC__GetTDimensionItems__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDimensionItems(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __DC__SetTDimensionItems__Items(Instance : TObject; Params : PVariantArgList);
begin
TDimensionItems(Instance).Items[OleVariant(Params^[1])]:=TDimensionItem(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDimensionItems__DimensionCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDimensionItems(Instance).DimensionCount;
end;

function __DC__GetTDimensionItems__SummaryCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDimensionItems(Instance).SummaryCount;
end;

function __DC__GetTDimensionItems__ActiveDimensionCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDimensionItems(Instance).ActiveDimensionCount;
end;

function __DC__GetTDimensionItems__ActiveSummaryCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDimensionItems(Instance).ActiveSummaryCount;
end;

function __DC__GetTTicks__NumberOfValues(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TTicks(Instance).NumberOfValues;
end;

procedure __DC__SetTTicks__NumberOfValues(Instance : TObject; Params : PVariantArgList);
begin
TTicks(Instance).NumberOfValues:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TBinData,'OtherBinName',__DC__GetTBinData__OtherBinName,__DC__SetTBinData__OtherBinName);
RegisterIndexedProperty(TBinData,'BinName',1,False,__DC__GetTBinData__BinName,nil);
RegisterProperty(TBinData,'BinCount',__DC__GetTBinData__BinCount,nil);
RegisterProperty(TBinData,'NameList',__DC__GetTBinData__NameList,nil);
RegisterProperty(TBinData,'ValueList',__DC__GetTBinData__ValueList,nil);
RegisterIndexedProperty(TDimensionItems,'Items',1,True,__DC__GetTDimensionItems__Items,__DC__SetTDimensionItems__Items);
RegisterProperty(TDimensionItems,'DimensionCount',__DC__GetTDimensionItems__DimensionCount,nil);
RegisterProperty(TDimensionItems,'SummaryCount',__DC__GetTDimensionItems__SummaryCount,nil);
RegisterProperty(TDimensionItems,'ActiveDimensionCount',__DC__GetTDimensionItems__ActiveDimensionCount,nil);
RegisterProperty(TDimensionItems,'ActiveSummaryCount',__DC__GetTDimensionItems__ActiveSummaryCount,nil);
RegisterProperty(TTicks,'NumberOfValues',__DC__GetTTicks__NumberOfValues,__DC__SetTTicks__NumberOfValues);
end;

const __ConstNames0 : array[0..24] of string = (
'tqeOK'
,'tqeNoDimensions'
,'tqeNoAggs'
,'tqeNotGrouped'
,'tqeNotInitialized'
,'tqeMapCorrupt'
,'tqeUnKnownDims'
,'binNone'
,'binYear'
,'binQuarter'
,'binMonth'
,'binSet'
,'binCustom'
,'diActive'
,'diAsNeeded'
,'diInactive'
,'dimDimension'
,'dimSum'
,'dimCount'
,'dimAverage'
,'dimMin'
,'dimMax'
,'dimGenericAgg'
,'dimUnknown'
,'tdChanged'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,tqeOK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,tqeNoDimensions));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,tqeNoAggs));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,tqeNotGrouped));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,tqeNotInitialized));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,tqeMapCorrupt));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,tqeUnKnownDims));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,binNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,binYear));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,binQuarter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,binMonth));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,binSet));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,binCustom));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,diActive));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,diAsNeeded));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,diInactive));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,dimDimension));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,dimSum));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,dimCount));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,dimAverage));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,dimMin));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,dimMax));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,dimGenericAgg));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,dimUnknown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,tdChanged));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..4] of TClass = (
EDimensionMapError,
TBinData,
TDimensionItem,
TDimensionItems,
TTicks
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..12] of string = (
'TTickInfoRec'
,'FieldTypeToVarType'
,'VerifyRTQuery'
,'BuildDataSetMap'
,'GetAggName'
,'IsAggValid'
,'AddToQuerySelect'
,'CheckIfEmptyQuery'
,'UpdateDesigner'
,'FormatVariant'
,'NextArg'
,'HookToDataBase'
,'IsBDEAvailable'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TTickInfoRec_)));
RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T0),[
TypeInfo(TFieldType),TypeInfo(Integer)],Addr(FieldTypeToVarType),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T1),[
TypeInfo(TDataSet),
TypeInfo(TDimensionItems),
TypeInfo(Boolean),TypeInfo(TQueryError)],Addr(VerifyRTQuery),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T2),[
TypeInfo(TDataSet),
TypeInfo(TDimensionItems),
TypeInfo(Boolean),
TypeInfo(Boolean),TypeInfo(TQueryError)],Addr(BuildDataSetMap),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T3),[
TypeInfo(TDimFlags),
TypeInfo(string),TypeInfo(string)],Addr(GetAggName),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T4),[
TypeInfo(TDimFlags),
TypeInfo(TFieldType),TypeInfo(Boolean)],Addr(IsAggValid),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T5),[
TypeInfo(string),
TypeInfo(string)],Addr(AddToQuerySelect),cRegister);

RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T6),[
TypeInfo(string),TypeInfo(Boolean)],Addr(CheckIfEmptyQuery),cRegister);

RegisterProc(nil,MethodNames[8],mtProc,TypeInfo(_T7),[
TypeInfo(TComponent)],Addr(UpdateDesigner),cRegister);

RegisterProc(nil,MethodNames[9],mtProc,TypeInfo(_T8),[
TypeInfo(Variant),
TypeInfo(string),TypeInfo(string)],Addr(FormatVariant),cRegister);

RegisterProc(nil,MethodNames[10],mtProc,TypeInfo(_T9),[
TypeInfo(Integer),
TypeInfo(string),TypeInfo(string)],Addr(NextArg),cRegister);

RegisterProc(nil,MethodNames[11],mtProc,TypeInfo(_T10),[
TypeInfo(TDataSet),TypeInfo(TDataBase)],Addr(HookToDataBase),cRegister);

RegisterProc(nil,MethodNames[12],mtProc,TypeInfo(_T11),[TypeInfo(Boolean)],Addr(IsBDEAvailable),cRegister);

RegisterProc(TBinData,'Create',mtConstructor,TypeInfo(_T12),NoParams,Addr(TBinData.Create),cRegister);

RegRegisterMethod(TBinData,'Clear',TypeInfo(_T13),NoParams,Addr(TBinData.Clear));

RegRegisterMethod(TBinData,'AddBinValues',TypeInfo(_T14),[
TypeInfo(string),
TypeInfoArrayOfConst],Addr(TBinData.AddBinValues));

RegRegisterMethod(TBinData,'AddBinValue',TypeInfo(_T15),[
TypeInfo(string),
TypeInfo(Variant),TypeInfo(Integer)],Addr(TBinData.AddBinValue));

RegRegisterMethod(TBinData,'BinValueCount',TypeInfo(_T16),[
TypeInfo(string),TypeInfo(Integer)],Addr(TBinData.BinValueCount));

RegRegisterMethod(TBinData,'GetAllBinValueCount',TypeInfo(_T17),[TypeInfo(Integer)],Addr(TBinData.GetAllBinValueCount));

RegRegisterMethod(TBinData,'GetBinValue',TypeInfo(_T18),[
TypeInfo(string),
TypeInfo(Integer),TypeInfo(Variant)],Addr(TBinData.GetBinValue));

RegRegisterMethod(TBinData,'GetBinValues',TypeInfo(_T19),[
TypeInfo(string),TypeInfo(Variant)],Addr(TBinData.GetBinValues));

RegRegisterMethod(TBinData,'GetBinName',TypeInfo(_T20),[
TypeInfo(Integer),TypeInfo(string)],Addr(TBinData.GetBinName));

RegRegisterMethod(TBinData,'GetBinCount',TypeInfo(_T21),[TypeInfo(Integer)],Addr(TBinData.GetBinCount));

RegRegisterMethod(TBinData,'GetBinNameDataType',TypeInfo(_T22),[TypeInfo(TFieldType)],Addr(TBinData.GetBinNameDataType));

RegRegisterMethod(TBinData,'GetMaxBinNameSize',TypeInfo(_T23),[TypeInfo(Integer)],Addr(TBinData.GetMaxBinNameSize));

RegRegisterMethod(TBinData,'AddBin',TypeInfo(_T24),[
TypeInfo(string),
TypeInfo(Integer),TypeInfo(Integer)],Addr(TBinData.AddBin));

RegRegisterMethod(TBinData,'AddIBinValue',TypeInfo(_T25),[
TypeInfo(Integer),
TypeInfo(Variant),TypeInfo(Integer)],Addr(TBinData.AddIBinValue));

RegRegisterMethod(TBinData,'GetIBinValue',TypeInfo(_T26),[
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Variant)],Addr(TBinData.GetIBinValue));

RegRegisterMethod(TBinData,'GetIBinValueCount',TypeInfo(_T27),[
TypeInfo(Integer),TypeInfo(Integer)],Addr(TBinData.GetIBinValueCount));

//RegRegisterMethod(TDimensionItem,'InitializeRange',TypeInfo(_T28),NoParams, pointer(32));
RegRegisterMethod(TDimensionItem,'InitializeRange',TypeInfo(_T28),NoParams,  getVMTProcAddr('TDimensionItem','InitializeRange',32));


//RegRegisterMethod(TDimensionItem,'NotifyCollection',TypeInfo(_T29),[TypeInfo(TCDNotifyType)], pointer(36));
RegRegisterMethod(TDimensionItem,'NotifyCollection',TypeInfo(_T29),[TypeInfo(TCDNotifyType)],  getVMTProcAddr('TDimensionItem','NotifyCollection',36));


RegRegisterMethod(TDimensionItem,'IsDimension',TypeInfo(_T30),[TypeInfo(Boolean)],Addr(TDimensionItem.IsDimension));

RegRegisterMethod(TDimensionItem,'IsSummary',TypeInfo(_T31),[TypeInfo(Boolean)],Addr(TDimensionItem.IsSummary));

RegRegisterMethod(TDimensionItems,'Add',TypeInfo(_T33),[TypeInfo(TDimensionItem)],Addr(TDimensionItems.Add));

RegRegisterMethod(TDimensionItems,'AddDerivedField',TypeInfo(_T34),[
TypeInfo(Integer),
TypeInfo(TDimFlags),TypeInfo(Integer)],Addr(TDimensionItems.AddDerivedField));

RegRegisterMethod(TDimensionItems,'AverageFieldCheck',TypeInfo(_T35),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Boolean)],Addr(TDimensionItems.AverageFieldCheck));

RegRegisterMethod(TDimensionItems,'AlreadyExists',TypeInfo(_T36),[
TypeInfo(string),
TypeInfo(TDimFlags),TypeInfo(Boolean)],Addr(TDimensionItems.AlreadyExists));

RegisterProc(TTicks,'Create',mtConstructor,TypeInfo(_T37),[
TypeInfo(string)],Addr(TTicks.Create),cRegister);

RegRegisterMethod(TTicks,'Dump',TypeInfo(_T38),[
TypeInfo(Boolean)],Addr(TTicks.Dump));

RegRegisterMethod(TTicks,'Clear',TypeInfo(_T39),NoParams,Addr(TTicks.Clear));

RegRegisterMethod(TTicks,'Ticks',TypeInfo(_T40),[
TypeInfo(string)],Addr(TTicks.Ticks));

RegRegisterMethod(TTicks,'TicksIntArray',TypeInfo(_T41),[
TypeInfo(string),
TypeInfo(TIntArray)],Addr(TTicks.TicksIntArray));

RegRegisterMethod(TTicks,'TicksSmallIntArray',TypeInfo(_T42),[
TypeInfo(string),
TypeInfo(TSmallIntArray)],Addr(TTicks.TicksSmallIntArray));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(TDimensionItems,'Create',mtConstructor,TypeInfo(_T32),[
TypeInfo(TPersistent),
TypeInfo(TDimensionItemClass)],Addr(TDimensionItems.Create),cRegister)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
