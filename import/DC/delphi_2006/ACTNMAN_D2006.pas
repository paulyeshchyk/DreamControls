{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit ACTNMAN_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  Types,
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Messages,
  SysUtils,
  Forms,
  Classes,
  Menus,
  ActnList,
  Graphics,
  ToolWin,
  ImgList,
  Controls,
  Buttons,
  OleAcc,
  ActnMan;
function ConvertTCMItemMsgToVariant(var R : TCMItemMsg) : OleVariant;
function ConvertVariantToTCMItemMsg(const V : OleVariant) : TCMItemMsg;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TRect__Wrapper = class(TDCRecordWrapper)
private
fR : TRect;
public
function GetRecordPtr : pointer; override;
published
procedure setLeft(const val : Longint);
function getLeft : Longint;
property Left : Longint read getLeft write setLeft;
procedure setTop(const val : Longint);
function getTop : Longint;
property Top : Longint read getTop write setTop;
procedure setRight(const val : Longint);
function getRight : Longint;
property Right : Longint read getRight write setRight;
procedure setBottom(const val : Longint);
function getBottom : Longint;
property Bottom : Longint read getBottom write setBottom;
end;
type __TCMItemMsg__Wrapper = class(TDCRecordWrapper)
private
fR : TCMItemMsg;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setUnused(const val : Integer);
function getUnused : Integer;
property Unused : Integer read getUnused write setUnused;
procedure setSender(const val : TCustomActionControl);
function getSender : TCustomActionControl;
property Sender : TCustomActionControl read getSender write setSender;
procedure setResult(const val : Longint);
function getResult : Longint;
property Result : Longint read getResult write setResult;
end;
type __TPoint__Wrapper = class(TDCRecordWrapper)
private
fR : TPoint;
public
function GetRecordPtr : pointer; override;
published
procedure setX(const val : Longint);
function getX : Longint;
property X : Longint read getX write setX;
procedure setY(const val : Longint);
function getY : Longint;
property Y : Longint read getY write setY;
end;
type __TCustomActionBar__ = class(TCustomActionBar);
type __TCustomActionControl__ = class(TCustomActionControl);
type
_T0 = procedure (p0 : TCustomActionBar) of object;

{_T1 = procedure (p0 : TPersistent;
p1 : TCollectionItemClass) of object;}

_T2 = function : TActionBarItem of object;

{_T3 = function (p0 : TCustomActionBar;
p1 : TActionClientItem): TCustomActionControlClass of object;}

{_T4 = function (p0 : TCustomActionBar): TCustomColorMapClass of object;}

_T5 = function : string of object;

_T6 = procedure  of object;

_T7 = procedure (const p0 : TChangesAllowedSet) of object;

_T8 = procedure (const p0 : TColor) of object;

_T9 = procedure (const p0 : Boolean) of object;

_T10 = function : Boolean of object;

_T11 = _T6;

_T12 = procedure (p0 : TObject;
p1 : Boolean) of object;

{_T13 = function : TActionClientLinkClass of object;}

_T14 = _T10;

_T15 = _T6;

_T16 = _T10;

_T17 = function (var p0 : string): Boolean of object;

{_T18 = procedure (p0 : TPersistent;
p1 : TCollectionItemClass) of object;}

_T19 = function : TActionClientItem of object;

_T20 = function : Integer of object;

{_T21 = procedure (p0 : TActionClientsCollection;
p1 : TActionProc) of object;}

_T22 = _T6;

_T23 = procedure (p0 : TContainedAction) of object;

_T24 = procedure (p0 : TCustomActionClass) of object;

_T25 = procedure (p0 : string) of object;

_T26 = _T6;

_T27 = _T6;

_T28 = function (p0 : TActionClientItem): TCustomActionControl of object;

_T29 = _T6;

{_T30 = function (p0 : TActionClientItem): TCustomActionControlClass of object;}

_T31 = procedure (var p0 : TCustomActionControl) of object;

_T32 = procedure (p0 : TCategoryDragObject;
const p1 : Integer;
const p2 : Integer) of object;

_T33 = procedure (p0 : TActionDragObject;
const p1 : Integer;
const p2 : Integer) of object;

_T34 = procedure (p0 : TActionItemDragObject;
const p1 : Integer;
const p2 : Integer) of object;

_T35 = _T19;

_T36 = function (p0 : TActionClientItem;
const p1 : Boolean): TActionClientItem of object;

_T37 = _T36;

_T38 = function (p0 : TBarEdge): Integer of object;

_T39 = _T20;

_T40 = _T20;

_T41 = _T10;

_T42 = function (const p0 : Integer): TCustomActionControl of object;

{_T43 = function : TCustomColorMapClass of object;}

{_T44 = function (p0 : TActionClientItem): TCustomActionControlClass of object;}

_T45 = _T20;

_T46 = _T6;

_T47 = _T6;

_T48 = _T6;

_T49 = procedure (const p0 : TActionClient) of object;

_T50 = _T9;

_T51 = procedure (const p0 : TCustomActionBarColorMap) of object;

_T52 = _T9;

_T53 = procedure (const p0 : TBarOrientation) of object;

_T54 = _T9;

_T55 = procedure (p0 : Integer) of object;

_T56 = _T19;

_T57 = _T19;

_T58 = _T19;

_T59 = _T6;

_T60 = function : TActionBarStyle of object;

_T61 = _T8;

_T62 = _T8;

_T63 = _T6;

_T64 = _T6;

_T65 = procedure (p0 : TObject;
p1 : Integer;
p2 : Integer) of object;

_T66 = _T10;

_T67 = _T10;

_T68 = procedure (const p0 : IDispatch) of object;

_T69 = _T68;

_T70 = _T68;

_T71 = _T68;

_T72 = procedure (const p0 : IDispatch;
var p1 : Cardinal;
p2 : string) of object;

_T73 = procedure (const p0 : IDispatch;
p1 : Cardinal;
p2 : string;
p3 : TColor;
p4 : TColor) of object;

_T74 = procedure (const p0 : Integer) of object;

_T75 = function : IDispatch of object;

_T76 = _T10;

_T77 = _T10;

_T78 = _T10;

_T79 = _T6;

_T80 = procedure (p0 : TActionClientItem) of object;

_T81 = procedure (const p0 : TButtonLayout) of object;

_T82 = procedure (p0 : Boolean) of object;

_T83 = _T6;

_T84 = _T6;

{_T85 = function : TActionBarsClass of object;}

{_T86 = function : TActionBarItemClass of object;}

{_T87 = function : TActionClientsClass of object;}

{_T88 = function : TActionClientItemClass of object;}

_T89 = function (p0 : TActionClientItem): Boolean of object;

_T90 = function (p0 : TCustomAction;
p1 : TActionClient;
p2 : Boolean): TActionClientItem of object;

_T91 = function (p0 : string;
p1 : TActionClient;
p2 : Boolean): TActionClientItem of object;

_T92 = function (p0 : TActionClientItem;
p1 : Boolean): TActionClientItem of object;

_T93 = procedure (p0 : Array of TCustomAction) of object;

_T94 = _T25;

_T95 = function (p0 : string): TActionClientItem of object;

_T96 = function (p0 : TCustomAction): TActionClientItem of object;

_T97 = procedure (const p0 : string) of object;

_T98 = procedure (p0 : TStream) of object;

_T99 = _T55;

_T100 = _T6;

_T101 = _T97;

_T102 = _T98;

function __TRect__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRect__Wrapper.setLeft(const val : Longint);
begin
TRect(GetRecordPtr^).Left := val;
end;
function __TRect__Wrapper.getLeft : Longint;
begin
result := TRect(GetRecordPtr^).Left;
end;
procedure __TRect__Wrapper.setTop(const val : Longint);
begin
TRect(GetRecordPtr^).Top := val;
end;
function __TRect__Wrapper.getTop : Longint;
begin
result := TRect(GetRecordPtr^).Top;
end;
procedure __TRect__Wrapper.setRight(const val : Longint);
begin
TRect(GetRecordPtr^).Right := val;
end;
function __TRect__Wrapper.getRight : Longint;
begin
result := TRect(GetRecordPtr^).Right;
end;
procedure __TRect__Wrapper.setBottom(const val : Longint);
begin
TRect(GetRecordPtr^).Bottom := val;
end;
function __TRect__Wrapper.getBottom : Longint;
begin
result := TRect(GetRecordPtr^).Bottom;
end;
function __TCMItemMsg__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCMItemMsg__Wrapper.setMsg(const val : Cardinal);
begin
TCMItemMsg(GetRecordPtr^).Msg := val;
end;
function __TCMItemMsg__Wrapper.getMsg : Cardinal;
begin
result := TCMItemMsg(GetRecordPtr^).Msg;
end;
procedure __TCMItemMsg__Wrapper.setUnused(const val : Integer);
begin
TCMItemMsg(GetRecordPtr^).Unused := val;
end;
function __TCMItemMsg__Wrapper.getUnused : Integer;
begin
result := TCMItemMsg(GetRecordPtr^).Unused;
end;
procedure __TCMItemMsg__Wrapper.setSender(const val : TCustomActionControl);
begin
TCMItemMsg(GetRecordPtr^).Sender := val;
end;
function __TCMItemMsg__Wrapper.getSender : TCustomActionControl;
begin
result := TCMItemMsg(GetRecordPtr^).Sender;
end;
procedure __TCMItemMsg__Wrapper.setResult(const val : Longint);
begin
TCMItemMsg(GetRecordPtr^).Result := val;
end;
function __TCMItemMsg__Wrapper.getResult : Longint;
begin
result := TCMItemMsg(GetRecordPtr^).Result;
end;
function _TCMItemMsg_ : IDispatch;
begin
  result := __TCMItemMsg__Wrapper.Create;
end;
function __TPoint__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPoint__Wrapper.setX(const val : Longint);
begin
TPoint(GetRecordPtr^).X := val;
end;
function __TPoint__Wrapper.getX : Longint;
begin
result := TPoint(GetRecordPtr^).X;
end;
procedure __TPoint__Wrapper.setY(const val : Longint);
begin
TPoint(GetRecordPtr^).Y := val;
end;
function __TPoint__Wrapper.getY : Longint;
begin
result := TPoint(GetRecordPtr^).Y;
end;
function __TCustomActionBar__FindNext__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := VarFromObject(__TCustomActionBar__(__Instance).FindNext(TActionClientItem(VarToObject(OleVariant(pargs^[0])))));
end;
2:
begin
result := VarFromObject(__TCustomActionBar__(__Instance).FindNext(TActionClientItem(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0])));
end;
end
end;

function __TCustomActionBar__FindPrevious__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := VarFromObject(__TCustomActionBar__(__Instance).FindPrevious(TActionClientItem(VarToObject(OleVariant(pargs^[0])))));
end;
2:
begin
result := VarFromObject(__TCustomActionBar__(__Instance).FindPrevious(TActionClientItem(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0])));
end;
end
end;

procedure __TCustomActionControl__DrawDesignFocus__Wrapper(__Instance : TCustomActionControl;
const p0 : IDispatch);
var
__p0 : ^TRect;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__TCustomActionControl__(__Instance).DrawDesignFocus(__p0^);
end;

procedure __TCustomActionControl__DrawGlyph__Wrapper(__Instance : TCustomActionControl;
const p0 : IDispatch);
var
__p0 : ^TPoint;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__TCustomActionControl__(__Instance).DrawGlyph(__p0^);
end;

procedure __TCustomActionControl__DrawLargeGlyph__Wrapper(__Instance : TCustomActionControl;
const p0 : IDispatch);
var
__p0 : ^TPoint;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__TCustomActionControl__(__Instance).DrawLargeGlyph(__p0^);
end;

procedure __TCustomActionControl__DrawBackground__Wrapper(__Instance : TCustomActionControl;
const p0 : IDispatch);
var
__p0 : ^TRect;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__TCustomActionControl__(__Instance).DrawBackground(__p0^);
end;

procedure __TCustomActionControl__DrawText__Wrapper(__Instance : TCustomActionControl;
const p0 : IDispatch;
var p1 : Cardinal;
p2 : string);
var
__p0 : ^TRect;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__TCustomActionControl__(__Instance).DrawText(__p0^,p1,p2);
end;

procedure __TCustomActionControl__DrawShadowedText__Wrapper(__Instance : TCustomActionControl;
const p0 : IDispatch;
p1 : Cardinal;
p2 : string;
p3 : TColor;
p4 : TColor);
var
__p0 : ^TRect;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__TCustomActionControl__(__Instance).DrawShadowedText(__p0^,p1,p2,p3,p4);
end;

function __TCustomActionControl__GetImageSize__Wrapper(__Instance : TCustomActionControl): IDispatch;
var
__result : TPoint;
__wrapper : __TPoint__Wrapper;
begin
__result := __TCustomActionControl__(__Instance).GetImageSize;
__wrapper := __TPoint__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

function __TCustomActionManager__AddAction__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
2:
begin
result := VarFromObject(TCustomActionManager(__Instance).AddAction(TCustomAction(VarToObject(OleVariant(pargs^[1]))),TActionClient(VarToObject(OleVariant(pargs^[0])))));
end;
3:
begin
result := VarFromObject(TCustomActionManager(__Instance).AddAction(TCustomAction(VarToObject(OleVariant(pargs^[2]))),TActionClient(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0])));
end;
end
end;

function __TCustomActionManager__AddCategory__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
2:
begin
result := VarFromObject(TCustomActionManager(__Instance).AddCategory(OleVariant(pargs^[1]),TActionClient(VarToObject(OleVariant(pargs^[0])))));
end;
3:
begin
result := VarFromObject(TCustomActionManager(__Instance).AddCategory(OleVariant(pargs^[2]),TActionClient(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0])));
end;
end
end;

function __TCustomActionManager__AddSeparator__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := VarFromObject(TCustomActionManager(__Instance).AddSeparator(TActionClientItem(VarToObject(OleVariant(pargs^[0])))));
end;
2:
begin
result := VarFromObject(TCustomActionManager(__Instance).AddSeparator(TActionClientItem(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0])));
end;
end
end;


type __TCMItemMsg__Wrapper__ = class(__TCMItemMsg__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCMItemMsg__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCMItemMsgToVariant(var R : TCMItemMsg) : OleVariant;
var
__rw : __TCMItemMsg__Wrapper__;
begin
__rw := __TCMItemMsg__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCMItemMsg(const V : OleVariant) : TCMItemMsg;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCMItemMsg((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPoint__Wrapper__ = class(__TPoint__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPoint__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
var
__rw : __TPoint__Wrapper__;
begin
__rw := __TPoint__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPoint((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRect__Wrapper__ = class(__TRect__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRect__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
var
__rw : __TRect__Wrapper__;
begin
__rw := __TRect__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRect((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTActionBars__ActionBars(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TActionBars(Instance).ActionBars[OleVariant(Params^[0])]);
end;

function __DC__GetTActionBarStyleList__Style(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TActionBarStyleList(Instance).Style[OleVariant(Params^[0])]);
end;

function __DC__GetTActionClient__ActionBar(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TActionClient(Instance).ActionBar);
end;

procedure __DC__SetTActionClient__ActionBar(Instance : TObject; Params : PVariantArgList);
begin
TActionClient(Instance).ActionBar:=TCustomActionBar(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTActionClient__ChildActionBar(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TActionClient(Instance).ChildActionBar);
end;

procedure __DC__SetTActionClient__ChildActionBar(Instance : TObject; Params : PVariantArgList);
begin
TActionClient(Instance).ChildActionBar:=TCustomActionBar(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTActionClient__HasItems(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TActionClient(Instance).HasItems;
end;

function __DC__GetTActionClient__OwningCollection(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TActionClient(Instance).OwningCollection);
end;

function __DC__GetTActionClientItem__ActionClients(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TActionClientItem(Instance).ActionClients);
end;

function __DC__GetTActionClientItem__ActionLink(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TActionClientItem(Instance).ActionLink);
end;

procedure __DC__SetTActionClientItem__ActionLink(Instance : TObject; Params : PVariantArgList);
begin
TActionClientItem(Instance).ActionLink:=TActionClientLink(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTActionClientItem__CheckUnused(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TActionClientItem(Instance).CheckUnused;
end;

procedure __DC__SetTActionClientItem__CheckUnused(Instance : TObject; Params : PVariantArgList);
begin
TActionClientItem(Instance).CheckUnused:=OleVariant(Params^[0]);
end;

function __DC__GetTActionClientItem__Control(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TActionClientItem(Instance).Control);
end;

procedure __DC__SetTActionClientItem__Control(Instance : TObject; Params : PVariantArgList);
begin
TActionClientItem(Instance).Control:=TCustomActionControl(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTActionClientItem__ParentItem(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TActionClientItem(Instance).ParentItem);
end;

function __DC__GetTActionClientItem__Separator(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TActionClientItem(Instance).Separator;
end;

function __DC__GetTActionClientItem__ShortCutText(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TActionClientItem(Instance).ShortCutText;
end;

function __DC__GetTActionClients__ActionClients(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TActionClients(Instance).ActionClients[OleVariant(Params^[0])]);
end;

procedure __DC__SetTActionClients__ActionClients(Instance : TObject; Params : PVariantArgList);
begin
TActionClients(Instance).ActionClients[OleVariant(Params^[1])]:=TActionClientItem(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTActionClients__ActionManager(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TActionClients(Instance).ActionManager);
end;

function __DC__GetTActionClientsCollection__ActionManager(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TActionClientsCollection(Instance).ActionManager);
end;

function __DC__GetTActionClientsCollection__AutoHotKeys(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TActionClientsCollection(Instance).AutoHotKeys;
end;

procedure __DC__SetTActionClientsCollection__AutoHotKeys(Instance : TObject; Params : PVariantArgList);
begin
TActionClientsCollection(Instance).AutoHotKeys:=OleVariant(Params^[0]);
end;

function __DC__GetTActionClientsCollection__Customizable(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TActionClientsCollection(Instance).Customizable;
end;

procedure __DC__SetTActionClientsCollection__Customizable(Instance : TObject; Params : PVariantArgList);
begin
TActionClientsCollection(Instance).Customizable:=OleVariant(Params^[0]);
end;

function __DC__GetTActionDragBaseClass__ActionManager(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TActionDragBaseClass(Instance).ActionManager);
end;

procedure __DC__SetTActionDragBaseClass__ActionManager(Instance : TObject; Params : PVariantArgList);
begin
TActionDragBaseClass(Instance).ActionManager:=TCustomActionManager(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTActionDragObject__ActionCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TActionDragObject(Instance).ActionCount;
end;

function __DC__GetTActionDragObject__Actions(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TActionDragObject(Instance).Actions[OleVariant(Params^[0])]);
end;

function __DC__GetTActionItemDragObject__ClientItem(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TActionItemDragObject(Instance).ClientItem);
end;

procedure __DC__SetTActionItemDragObject__ClientItem(Instance : TObject; Params : PVariantArgList);
begin
TActionItemDragObject(Instance).ClientItem:=TActionClientItem(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTActionListCollection__ActionManager(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TActionListCollection(Instance).ActionManager);
end;

function __DC__GetTActionListCollection__ListItems(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TActionListCollection(Instance).ListItems[OleVariant(Params^[0])]);
end;

procedure __DC__SetTActionListCollection__ListItems(Instance : TObject; Params : PVariantArgList);
begin
TActionListCollection(Instance).ListItems[OleVariant(Params^[1])]:=TActionListItem(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCategoryDragObject__Category(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCategoryDragObject(Instance).Category;
end;

function __DC__GetTCustomActionBar__ActionManager(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomActionBar(Instance).ActionManager);
end;

procedure __DC__SetTCustomActionBar__ActionManager(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBar(Instance).ActionManager:=TCustomActionManager(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomActionBar__ActionClient(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomActionBar(Instance).ActionClient);
end;

procedure __DC__SetTCustomActionBar__ActionClient(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBar(Instance).ActionClient:=TActionClient(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomActionBar__AllowHiding(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBar(Instance).AllowHiding;
end;

procedure __DC__SetTCustomActionBar__AllowHiding(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBar(Instance).AllowHiding:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBar__AutoSizing(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBar(Instance).AutoSizing;
end;

procedure __DC__SetTCustomActionBar__AutoSizing(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBar(Instance).AutoSizing:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBar__Caption(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBar(Instance).Caption;
end;

procedure __DC__SetTCustomActionBar__Caption(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBar(Instance).Caption:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBar__Canvas(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomActionBar(Instance).Canvas);
end;

function __DC__GetTCustomActionBar__Color(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBar(Instance).Color;
end;

procedure __DC__SetTCustomActionBar__Color(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBar(Instance).Color:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBar__ColorMap(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomActionBar(Instance).ColorMap);
end;

procedure __DC__SetTCustomActionBar__ColorMap(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBar(Instance).ColorMap:=TCustomActionBarColorMap(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomActionBar__ContextBar(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBar(Instance).ContextBar;
end;

procedure __DC__SetTCustomActionBar__ContextBar(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBar(Instance).ContextBar:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBar__Designable(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBar(Instance).Designable;
end;

procedure __DC__SetTCustomActionBar__Designable(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBar(Instance).Designable:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBar__Font(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomActionBar(Instance).Font);
end;

procedure __DC__SetTCustomActionBar__Font(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBar(Instance).Font:=TFont(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomActionBar__DesignMode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBar(Instance).DesignMode;
end;

procedure __DC__SetTCustomActionBar__DesignMode(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBar(Instance).DesignMode:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBar__HorzMargin(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBar(Instance).HorzMargin;
end;

procedure __DC__SetTCustomActionBar__HorzMargin(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBar(Instance).HorzMargin:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBar__HorzSeparator(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBar(Instance).HorzSeparator;
end;

procedure __DC__SetTCustomActionBar__HorzSeparator(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBar(Instance).HorzSeparator:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBar__Orientation(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBar(Instance).Orientation;
end;

procedure __DC__SetTCustomActionBar__Orientation(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBar(Instance).Orientation:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBar__PersistentHotKeys(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBar(Instance).PersistentHotKeys;
end;

procedure __DC__SetTCustomActionBar__PersistentHotKeys(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBar(Instance).PersistentHotKeys:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBar__ActionControls(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomActionBar(Instance).ActionControls[OleVariant(Params^[0])]);
end;

function __DC__GetTCustomActionBar__Spacing(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBar(Instance).Spacing;
end;

procedure __DC__SetTCustomActionBar__Spacing(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBar(Instance).Spacing:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBar__VertMargin(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBar(Instance).VertMargin;
end;

procedure __DC__SetTCustomActionBar__VertMargin(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBar(Instance).VertMargin:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBar__VertSeparator(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBar(Instance).VertSeparator;
end;

procedure __DC__SetTCustomActionBar__VertSeparator(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBar(Instance).VertSeparator:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBarColorMap__BtnFrameColor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBarColorMap(Instance).BtnFrameColor;
end;

procedure __DC__SetTCustomActionBarColorMap__BtnFrameColor(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBarColorMap(Instance).BtnFrameColor:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBarColorMap__BtnSelectedColor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBarColorMap(Instance).BtnSelectedColor;
end;

procedure __DC__SetTCustomActionBarColorMap__BtnSelectedColor(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBarColorMap(Instance).BtnSelectedColor:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBarColorMap__BtnSelectedFont(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBarColorMap(Instance).BtnSelectedFont;
end;

procedure __DC__SetTCustomActionBarColorMap__BtnSelectedFont(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBarColorMap(Instance).BtnSelectedFont:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBarColorMap__Color(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBarColorMap(Instance).Color;
end;

procedure __DC__SetTCustomActionBarColorMap__Color(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBarColorMap(Instance).Color:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBarColorMap__DesignFocus(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBarColorMap(Instance).DesignFocus;
end;

procedure __DC__SetTCustomActionBarColorMap__DesignFocus(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBarColorMap(Instance).DesignFocus:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBarColorMap__DisabledColor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBarColorMap(Instance).DisabledColor;
end;

procedure __DC__SetTCustomActionBarColorMap__DisabledColor(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBarColorMap(Instance).DisabledColor:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBarColorMap__DisabledFontColor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBarColorMap(Instance).DisabledFontColor;
end;

procedure __DC__SetTCustomActionBarColorMap__DisabledFontColor(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBarColorMap(Instance).DisabledFontColor:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBarColorMap__DisabledFontShadow(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBarColorMap(Instance).DisabledFontShadow;
end;

procedure __DC__SetTCustomActionBarColorMap__DisabledFontShadow(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBarColorMap(Instance).DisabledFontShadow:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBarColorMap__FontColor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBarColorMap(Instance).FontColor;
end;

procedure __DC__SetTCustomActionBarColorMap__FontColor(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBarColorMap(Instance).FontColor:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBarColorMap__FrameTopLeftInner(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBarColorMap(Instance).FrameTopLeftInner;
end;

procedure __DC__SetTCustomActionBarColorMap__FrameTopLeftInner(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBarColorMap(Instance).FrameTopLeftInner:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBarColorMap__FrameTopLeftOuter(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBarColorMap(Instance).FrameTopLeftOuter;
end;

procedure __DC__SetTCustomActionBarColorMap__FrameTopLeftOuter(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBarColorMap(Instance).FrameTopLeftOuter:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBarColorMap__FrameBottomRightInner(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBarColorMap(Instance).FrameBottomRightInner;
end;

procedure __DC__SetTCustomActionBarColorMap__FrameBottomRightInner(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBarColorMap(Instance).FrameBottomRightInner:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBarColorMap__FrameBottomRightOuter(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBarColorMap(Instance).FrameBottomRightOuter;
end;

procedure __DC__SetTCustomActionBarColorMap__FrameBottomRightOuter(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBarColorMap(Instance).FrameBottomRightOuter:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBarColorMap__HighlightColor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBarColorMap(Instance).HighlightColor;
end;

procedure __DC__SetTCustomActionBarColorMap__HighlightColor(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBarColorMap(Instance).HighlightColor:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBarColorMap__HotColor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBarColorMap(Instance).HotColor;
end;

procedure __DC__SetTCustomActionBarColorMap__HotColor(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBarColorMap(Instance).HotColor:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBarColorMap__HotFontColor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBarColorMap(Instance).HotFontColor;
end;

procedure __DC__SetTCustomActionBarColorMap__HotFontColor(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBarColorMap(Instance).HotFontColor:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBarColorMap__MenuColor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBarColorMap(Instance).MenuColor;
end;

procedure __DC__SetTCustomActionBarColorMap__MenuColor(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBarColorMap(Instance).MenuColor:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBarColorMap__SelectedColor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBarColorMap(Instance).SelectedColor;
end;

procedure __DC__SetTCustomActionBarColorMap__SelectedColor(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBarColorMap(Instance).SelectedColor:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBarColorMap__SelectedFontColor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBarColorMap(Instance).SelectedFontColor;
end;

procedure __DC__SetTCustomActionBarColorMap__SelectedFontColor(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBarColorMap(Instance).SelectedFontColor:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBarColorMap__ShadowColor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBarColorMap(Instance).ShadowColor;
end;

procedure __DC__SetTCustomActionBarColorMap__ShadowColor(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBarColorMap(Instance).ShadowColor:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionBarColorMap__UnusedColor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionBarColorMap(Instance).UnusedColor;
end;

procedure __DC__SetTCustomActionBarColorMap__UnusedColor(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionBarColorMap(Instance).UnusedColor:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionControl__ActionBar(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomActionControl(Instance).ActionBar);
end;

function __DC__GetTCustomActionControl__ActionClient(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomActionControl(Instance).ActionClient);
end;

procedure __DC__SetTCustomActionControl__ActionClient(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionControl(Instance).ActionClient:=TActionClientItem(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomActionControl__Caption(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionControl(Instance).Caption;
end;

procedure __DC__SetTCustomActionControl__Caption(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionControl(Instance).Caption:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionControl__DropPoint(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionControl(Instance).DropPoint;
end;

procedure __DC__SetTCustomActionControl__DropPoint(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionControl(Instance).DropPoint:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionControl__GlyphLayout(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionControl(Instance).GlyphLayout;
end;

procedure __DC__SetTCustomActionControl__GlyphLayout(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionControl(Instance).GlyphLayout:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionControl__Margins(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TRect__Wrapper;
begin
__wrapper := __TRect__Wrapper.Create;
__wrapper.fR := TCustomActionControl(Instance).Margins;
result := IUnknown(__wrapper) as IDispatch;
end;

procedure __DC__SetTCustomActionControl__Margins(Instance : TObject; Params : PVariantArgList);
var
__idisp:IDispatch;
__iwrapper:IDCRecordWrapper;
begin
__idisp:=DCVarToInterface(OleVariant(Params^[0]));
if __idisp=nil then exit;
__idisp.QueryInterface(IDCRecordWrapper, __iwrapper);
TCustomActionControl(Instance).Margins:=TRect(__iwrapper.GetRecordPtr^);
end;

function __DC__GetTCustomActionControl__Selected(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionControl(Instance).Selected;
end;

procedure __DC__SetTCustomActionControl__Selected(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionControl(Instance).Selected:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionControl__Separator(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionControl(Instance).Separator;
end;

function __DC__GetTCustomActionControl__ShowCaption(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionControl(Instance).ShowCaption;
end;

function __DC__GetTCustomActionControl__ShowShortCut(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionControl(Instance).ShowShortCut;
end;

function __DC__GetTCustomActionControl__SmallIcon(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionControl(Instance).SmallIcon;
end;

procedure __DC__SetTCustomActionControl__SmallIcon(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionControl(Instance).SmallIcon:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionControl__Spacing(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionControl(Instance).Spacing;
end;

procedure __DC__SetTCustomActionControl__Spacing(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionControl(Instance).Spacing:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionControl__TextBounds(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TRect__Wrapper;
begin
__wrapper := __TRect__Wrapper.Create;
__wrapper.fR := TCustomActionControl(Instance).TextBounds;
result := IUnknown(__wrapper) as IDispatch;
end;

procedure __DC__SetTCustomActionControl__TextBounds(Instance : TObject; Params : PVariantArgList);
var
__idisp:IDispatch;
__iwrapper:IDCRecordWrapper;
begin
__idisp:=DCVarToInterface(OleVariant(Params^[0]));
if __idisp=nil then exit;
__idisp.QueryInterface(IDCRecordWrapper, __iwrapper);
TCustomActionControl(Instance).TextBounds:=TRect(__iwrapper.GetRecordPtr^);
end;

function __DC__GetTCustomActionControl__Transparent(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionControl(Instance).Transparent;
end;

procedure __DC__SetTCustomActionControl__Transparent(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionControl(Instance).Transparent:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionManager__ActionBars(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomActionManager(Instance).ActionBars);
end;

procedure __DC__SetTCustomActionManager__ActionBars(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionManager(Instance).ActionBars:=TActionBars(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomActionManager__DefaultActionBars(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomActionManager(Instance).DefaultActionBars);
end;

function __DC__GetTCustomActionManager__LinkedActionLists(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomActionManager(Instance).LinkedActionLists);
end;

procedure __DC__SetTCustomActionManager__LinkedActionLists(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionManager(Instance).LinkedActionLists:=TActionListCollection(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomActionManager__Filename(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionManager(Instance).Filename;
end;

procedure __DC__SetTCustomActionManager__Filename(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionManager(Instance).Filename:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionManager__Images(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomActionManager(Instance).Images);
end;

procedure __DC__SetTCustomActionManager__Images(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionManager(Instance).Images:=TCustomImageList(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomActionManager__PrioritySchedule(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomActionManager(Instance).PrioritySchedule);
end;

procedure __DC__SetTCustomActionManager__PrioritySchedule(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionManager(Instance).PrioritySchedule:=TStringList(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomActionManager__Style(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomActionManager(Instance).Style);
end;

procedure __DC__SetTCustomActionManager__Style(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionManager(Instance).Style:=TActionBarStyle(VarToObject(OleVariant(Params^[0])));
end;

procedure __RegisterProps;
begin
RegisterIndexedProperty(TActionBars,'ActionBars',1,True,__DC__GetTActionBars__ActionBars,nil);
RegisterIndexedProperty(TActionBarStyleList,'Style',1,False,__DC__GetTActionBarStyleList__Style,nil);
RegisterProperty(TActionClient,'ActionBar',__DC__GetTActionClient__ActionBar,__DC__SetTActionClient__ActionBar);
RegisterProperty(TActionClient,'ChildActionBar',__DC__GetTActionClient__ChildActionBar,__DC__SetTActionClient__ChildActionBar);
RegisterProperty(TActionClient,'HasItems',__DC__GetTActionClient__HasItems,nil);
RegisterProperty(TActionClient,'OwningCollection',__DC__GetTActionClient__OwningCollection,nil);
RegisterProperty(TActionClientItem,'ActionClients',__DC__GetTActionClientItem__ActionClients,nil);
RegisterProperty(TActionClientItem,'ActionLink',__DC__GetTActionClientItem__ActionLink,__DC__SetTActionClientItem__ActionLink);
RegisterProperty(TActionClientItem,'CheckUnused',__DC__GetTActionClientItem__CheckUnused,__DC__SetTActionClientItem__CheckUnused);
RegisterProperty(TActionClientItem,'Control',__DC__GetTActionClientItem__Control,__DC__SetTActionClientItem__Control);
RegisterProperty(TActionClientItem,'ParentItem',__DC__GetTActionClientItem__ParentItem,nil);
RegisterProperty(TActionClientItem,'Separator',__DC__GetTActionClientItem__Separator,nil);
RegisterProperty(TActionClientItem,'ShortCutText',__DC__GetTActionClientItem__ShortCutText,nil);
RegisterIndexedProperty(TActionClients,'ActionClients',1,True,__DC__GetTActionClients__ActionClients,__DC__SetTActionClients__ActionClients);
RegisterProperty(TActionClients,'ActionManager',__DC__GetTActionClients__ActionManager,nil);
RegisterProperty(TActionClientsCollection,'ActionManager',__DC__GetTActionClientsCollection__ActionManager,nil);
RegisterProperty(TActionClientsCollection,'AutoHotKeys',__DC__GetTActionClientsCollection__AutoHotKeys,__DC__SetTActionClientsCollection__AutoHotKeys);
RegisterProperty(TActionClientsCollection,'Customizable',__DC__GetTActionClientsCollection__Customizable,__DC__SetTActionClientsCollection__Customizable);
RegisterProperty(TActionDragBaseClass,'ActionManager',__DC__GetTActionDragBaseClass__ActionManager,__DC__SetTActionDragBaseClass__ActionManager);
RegisterProperty(TActionDragObject,'ActionCount',__DC__GetTActionDragObject__ActionCount,nil);
RegisterIndexedProperty(TActionDragObject,'Actions',1,False,__DC__GetTActionDragObject__Actions,nil);
RegisterProperty(TActionItemDragObject,'ClientItem',__DC__GetTActionItemDragObject__ClientItem,__DC__SetTActionItemDragObject__ClientItem);
RegisterProperty(TActionListCollection,'ActionManager',__DC__GetTActionListCollection__ActionManager,nil);
RegisterIndexedProperty(TActionListCollection,'ListItems',1,True,__DC__GetTActionListCollection__ListItems,__DC__SetTActionListCollection__ListItems);
RegisterProperty(TCategoryDragObject,'Category',__DC__GetTCategoryDragObject__Category,nil);
RegisterProperty(TCustomActionBar,'ActionManager',__DC__GetTCustomActionBar__ActionManager,__DC__SetTCustomActionBar__ActionManager);
RegisterProperty(TCustomActionBar,'ActionClient',__DC__GetTCustomActionBar__ActionClient,__DC__SetTCustomActionBar__ActionClient);
RegisterProperty(TCustomActionBar,'AllowHiding',__DC__GetTCustomActionBar__AllowHiding,__DC__SetTCustomActionBar__AllowHiding);
RegisterProperty(TCustomActionBar,'AutoSizing',__DC__GetTCustomActionBar__AutoSizing,__DC__SetTCustomActionBar__AutoSizing);
RegisterProperty(TCustomActionBar,'Caption',__DC__GetTCustomActionBar__Caption,__DC__SetTCustomActionBar__Caption);
RegisterProperty(TCustomActionBar,'Canvas',__DC__GetTCustomActionBar__Canvas,nil);
RegisterProperty(TCustomActionBar,'Color',__DC__GetTCustomActionBar__Color,__DC__SetTCustomActionBar__Color);
RegisterProperty(TCustomActionBar,'ColorMap',__DC__GetTCustomActionBar__ColorMap,__DC__SetTCustomActionBar__ColorMap);
RegisterProperty(TCustomActionBar,'ContextBar',__DC__GetTCustomActionBar__ContextBar,__DC__SetTCustomActionBar__ContextBar);
RegisterProperty(TCustomActionBar,'Designable',__DC__GetTCustomActionBar__Designable,__DC__SetTCustomActionBar__Designable);
RegisterProperty(TCustomActionBar,'Font',__DC__GetTCustomActionBar__Font,__DC__SetTCustomActionBar__Font);
RegisterProperty(TCustomActionBar,'DesignMode',__DC__GetTCustomActionBar__DesignMode,__DC__SetTCustomActionBar__DesignMode);
RegisterProperty(TCustomActionBar,'HorzMargin',__DC__GetTCustomActionBar__HorzMargin,__DC__SetTCustomActionBar__HorzMargin);
RegisterProperty(TCustomActionBar,'HorzSeparator',__DC__GetTCustomActionBar__HorzSeparator,__DC__SetTCustomActionBar__HorzSeparator);
RegisterProperty(TCustomActionBar,'Orientation',__DC__GetTCustomActionBar__Orientation,__DC__SetTCustomActionBar__Orientation);
RegisterProperty(TCustomActionBar,'PersistentHotKeys',__DC__GetTCustomActionBar__PersistentHotKeys,__DC__SetTCustomActionBar__PersistentHotKeys);
RegisterIndexedProperty(TCustomActionBar,'ActionControls',1,False,__DC__GetTCustomActionBar__ActionControls,nil);
RegisterProperty(TCustomActionBar,'Spacing',__DC__GetTCustomActionBar__Spacing,__DC__SetTCustomActionBar__Spacing);
RegisterProperty(TCustomActionBar,'VertMargin',__DC__GetTCustomActionBar__VertMargin,__DC__SetTCustomActionBar__VertMargin);
RegisterProperty(TCustomActionBar,'VertSeparator',__DC__GetTCustomActionBar__VertSeparator,__DC__SetTCustomActionBar__VertSeparator);
RegisterProperty(TCustomActionBarColorMap,'BtnFrameColor',__DC__GetTCustomActionBarColorMap__BtnFrameColor,__DC__SetTCustomActionBarColorMap__BtnFrameColor);
RegisterProperty(TCustomActionBarColorMap,'BtnSelectedColor',__DC__GetTCustomActionBarColorMap__BtnSelectedColor,__DC__SetTCustomActionBarColorMap__BtnSelectedColor);
RegisterProperty(TCustomActionBarColorMap,'BtnSelectedFont',__DC__GetTCustomActionBarColorMap__BtnSelectedFont,__DC__SetTCustomActionBarColorMap__BtnSelectedFont);
RegisterProperty(TCustomActionBarColorMap,'Color',__DC__GetTCustomActionBarColorMap__Color,__DC__SetTCustomActionBarColorMap__Color);
RegisterProperty(TCustomActionBarColorMap,'DesignFocus',__DC__GetTCustomActionBarColorMap__DesignFocus,__DC__SetTCustomActionBarColorMap__DesignFocus);
RegisterProperty(TCustomActionBarColorMap,'DisabledColor',__DC__GetTCustomActionBarColorMap__DisabledColor,__DC__SetTCustomActionBarColorMap__DisabledColor);
RegisterProperty(TCustomActionBarColorMap,'DisabledFontColor',__DC__GetTCustomActionBarColorMap__DisabledFontColor,__DC__SetTCustomActionBarColorMap__DisabledFontColor);
RegisterProperty(TCustomActionBarColorMap,'DisabledFontShadow',__DC__GetTCustomActionBarColorMap__DisabledFontShadow,__DC__SetTCustomActionBarColorMap__DisabledFontShadow);
RegisterProperty(TCustomActionBarColorMap,'FontColor',__DC__GetTCustomActionBarColorMap__FontColor,__DC__SetTCustomActionBarColorMap__FontColor);
RegisterProperty(TCustomActionBarColorMap,'FrameTopLeftInner',__DC__GetTCustomActionBarColorMap__FrameTopLeftInner,__DC__SetTCustomActionBarColorMap__FrameTopLeftInner);
RegisterProperty(TCustomActionBarColorMap,'FrameTopLeftOuter',__DC__GetTCustomActionBarColorMap__FrameTopLeftOuter,__DC__SetTCustomActionBarColorMap__FrameTopLeftOuter);
RegisterProperty(TCustomActionBarColorMap,'FrameBottomRightInner',__DC__GetTCustomActionBarColorMap__FrameBottomRightInner,__DC__SetTCustomActionBarColorMap__FrameBottomRightInner);
RegisterProperty(TCustomActionBarColorMap,'FrameBottomRightOuter',__DC__GetTCustomActionBarColorMap__FrameBottomRightOuter,__DC__SetTCustomActionBarColorMap__FrameBottomRightOuter);
RegisterProperty(TCustomActionBarColorMap,'HighlightColor',__DC__GetTCustomActionBarColorMap__HighlightColor,__DC__SetTCustomActionBarColorMap__HighlightColor);
RegisterProperty(TCustomActionBarColorMap,'HotColor',__DC__GetTCustomActionBarColorMap__HotColor,__DC__SetTCustomActionBarColorMap__HotColor);
RegisterProperty(TCustomActionBarColorMap,'HotFontColor',__DC__GetTCustomActionBarColorMap__HotFontColor,__DC__SetTCustomActionBarColorMap__HotFontColor);
RegisterProperty(TCustomActionBarColorMap,'MenuColor',__DC__GetTCustomActionBarColorMap__MenuColor,__DC__SetTCustomActionBarColorMap__MenuColor);
RegisterProperty(TCustomActionBarColorMap,'SelectedColor',__DC__GetTCustomActionBarColorMap__SelectedColor,__DC__SetTCustomActionBarColorMap__SelectedColor);
RegisterProperty(TCustomActionBarColorMap,'SelectedFontColor',__DC__GetTCustomActionBarColorMap__SelectedFontColor,__DC__SetTCustomActionBarColorMap__SelectedFontColor);
RegisterProperty(TCustomActionBarColorMap,'ShadowColor',__DC__GetTCustomActionBarColorMap__ShadowColor,__DC__SetTCustomActionBarColorMap__ShadowColor);
RegisterProperty(TCustomActionBarColorMap,'UnusedColor',__DC__GetTCustomActionBarColorMap__UnusedColor,__DC__SetTCustomActionBarColorMap__UnusedColor);
RegisterProperty(TCustomActionControl,'ActionBar',__DC__GetTCustomActionControl__ActionBar,nil);
RegisterProperty(TCustomActionControl,'ActionClient',__DC__GetTCustomActionControl__ActionClient,__DC__SetTCustomActionControl__ActionClient);
RegisterProperty(TCustomActionControl,'Caption',__DC__GetTCustomActionControl__Caption,__DC__SetTCustomActionControl__Caption);
RegisterProperty(TCustomActionControl,'DropPoint',__DC__GetTCustomActionControl__DropPoint,__DC__SetTCustomActionControl__DropPoint);
RegisterProperty(TCustomActionControl,'GlyphLayout',__DC__GetTCustomActionControl__GlyphLayout,__DC__SetTCustomActionControl__GlyphLayout);
RegisterProperty(TCustomActionControl,'Margins',__DC__GetTCustomActionControl__Margins,__DC__SetTCustomActionControl__Margins);
RegisterProperty(TCustomActionControl,'Selected',__DC__GetTCustomActionControl__Selected,__DC__SetTCustomActionControl__Selected);
RegisterProperty(TCustomActionControl,'Separator',__DC__GetTCustomActionControl__Separator,nil);
RegisterProperty(TCustomActionControl,'ShowCaption',__DC__GetTCustomActionControl__ShowCaption,nil);
RegisterProperty(TCustomActionControl,'ShowShortCut',__DC__GetTCustomActionControl__ShowShortCut,nil);
RegisterProperty(TCustomActionControl,'SmallIcon',__DC__GetTCustomActionControl__SmallIcon,__DC__SetTCustomActionControl__SmallIcon);
RegisterProperty(TCustomActionControl,'Spacing',__DC__GetTCustomActionControl__Spacing,__DC__SetTCustomActionControl__Spacing);
RegisterProperty(TCustomActionControl,'TextBounds',__DC__GetTCustomActionControl__TextBounds,__DC__SetTCustomActionControl__TextBounds);
RegisterProperty(TCustomActionControl,'Transparent',__DC__GetTCustomActionControl__Transparent,__DC__SetTCustomActionControl__Transparent);
RegisterProperty(TCustomActionManager,'ActionBars',__DC__GetTCustomActionManager__ActionBars,__DC__SetTCustomActionManager__ActionBars);
RegisterProperty(TCustomActionManager,'DefaultActionBars',__DC__GetTCustomActionManager__DefaultActionBars,nil);
RegisterProperty(TCustomActionManager,'LinkedActionLists',__DC__GetTCustomActionManager__LinkedActionLists,__DC__SetTCustomActionManager__LinkedActionLists);
RegisterProperty(TCustomActionManager,'Filename',__DC__GetTCustomActionManager__Filename,__DC__SetTCustomActionManager__Filename);
RegisterProperty(TCustomActionManager,'Images',__DC__GetTCustomActionManager__Images,__DC__SetTCustomActionManager__Images);
RegisterProperty(TCustomActionManager,'PrioritySchedule',__DC__GetTCustomActionManager__PrioritySchedule,__DC__SetTCustomActionManager__PrioritySchedule);
RegisterProperty(TCustomActionManager,'Style',__DC__GetTCustomActionManager__Style,__DC__SetTCustomActionManager__Style);
end;

function __DC__GetActnMan__ActionBarStyles(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(ActnMan.ActionBarStyles);
end;

procedure __DC__SetActnMan__ActionBarStyles(Instance : TObject; Params : PVariantArgList);
begin
TObject(ActnMan.ActionBarStyles):=(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetActnMan__DefaultActnBarStyle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := ActnMan.DefaultActnBarStyle;
end;

procedure __DC__SetActnMan__DefaultActnBarStyle(Instance : TObject; Params : PVariantArgList);
begin
ActnMan.DefaultActnBarStyle:=OleVariant(Params^[0]);
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('ActionBarStyles',__DC__GetActnMan__ActionBarStyles,__DC__SetActnMan__ActionBarStyles));
__RegisteredVars.Add(RegisterVar('DefaultActnBarStyle',__DC__GetActnMan__DefaultActnBarStyle,__DC__SetActnMan__DefaultActnBarStyle));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..26] of string = (
'CM_ITEMSELECTED'
,'CM_ITEMCLICKED'
,'CM_ITEMKEYED'
,'CM_SCROLLCLICKED'
,'CM_RESETBAR'
,'CM_ENTERMENULOOP'
,'CM_ITEMDROPPOINT'
,'blNormal'
,'blStretch'
,'blTile'
,'blLeftBanner'
,'blRightBanner'
,'caModify'
,'caMove'
,'caDelete'
,'coNone'
,'coSelective'
,'coAll'
,'boLeftToRight'
,'boRightToLeft'
,'boTopToBottom'
,'boBottomToTop'
,'beLeft'
,'beRight'
,'beEither'
,'caAllChanges'
,'cDefaultSchedule'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,CM_ITEMSELECTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,CM_ITEMCLICKED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,CM_ITEMKEYED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,CM_SCROLLCLICKED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,CM_RESETBAR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,CM_ENTERMENULOOP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,CM_ITEMDROPPOINT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,blNormal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,blStretch));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,blTile));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,blLeftBanner));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,blRightBanner));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,caModify));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,caMove));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,caDelete));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,coNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,coSelective));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,coAll));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,boLeftToRight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,boRightToLeft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,boTopToBottom));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,boBottomToTop));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,beLeft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,beRight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,beEither));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,VarFromSet(caAllChanges, sizeof(caAllChanges))));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,cDefaultSchedule));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..21] of TClass = (
TActionBarItem,
TActionBars,
TActionBarStyle,
TActionBarStyleList,
TActionClient,
TActionClientItem,
TActionClientLink,
TActionClients,
TActionClientsCollection,
TActionDragBaseClass,
TActionDragObject,
TActionItemDragObject,
TActionListCollection,
TActionListItem,
TActionManager,
TCategoryDragObject,
TCustomActionBar,
TCustomActionBarColorMap,
TCustomActionClass,
TCustomActionControl,
TCustomActionManager,
TXToolDockForm
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..1] of string = (
'TCMItemMsg'
,'NotifyDesigner'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TCMItemMsg_)));
RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T0),[
TypeInfo(TCustomActionBar)],Addr(NotifyDesigner),cRegister);

RegRegisterMethod(TActionBars,'Add',TypeInfo(_T2),[TypeInfo(TActionBarItem)],Addr(TActionBars.Add));

//RegRegisterMethod(TActionBarStyle,'GetStyleName',TypeInfo(_T5),[TypeInfo(string)], pointer(8));
RegRegisterMethod(TActionBarStyle,'GetStyleName',TypeInfo(_T5),[TypeInfo(string)],  getVMTProcAddr('TActionBarStyle','GetStyleName',8));


//RegRegisterMethod(TActionClient,'ColorChanged',TypeInfo(_T6),NoParams, pointer(32));
RegRegisterMethod(TActionClient,'ColorChanged',TypeInfo(_T6),NoParams,  getVMTProcAddr('TActionClient','ColorChanged',32));


//RegRegisterMethod(TActionClient,'SetChangesAllowed',TypeInfo(_T7),[TypeInfo(TChangesAllowedSet)], pointer(36));
RegRegisterMethod(TActionClient,'SetChangesAllowed',TypeInfo(_T7),[TypeInfo(TChangesAllowedSet)],  getVMTProcAddr('TActionClient','SetChangesAllowed',36));


//RegRegisterMethod(TActionClient,'SetColor',TypeInfo(_T8),[TypeInfo(TColor)], pointer(40));
RegRegisterMethod(TActionClient,'SetColor',TypeInfo(_T8),[TypeInfo(TColor)],  getVMTProcAddr('TActionClient','SetColor',40));


//RegRegisterMethod(TActionClient,'SetVisible',TypeInfo(_T9),[TypeInfo(Boolean)], pointer(44));
RegRegisterMethod(TActionClient,'SetVisible',TypeInfo(_T9),[TypeInfo(Boolean)],  getVMTProcAddr('TActionClient','SetVisible',44));


RegRegisterMethod(TActionClient,'HasBackground',TypeInfo(_T10),[TypeInfo(Boolean)],Addr(TActionClient.HasBackground));

//RegRegisterMethod(TActionClient,'Refresh',TypeInfo(_T11),NoParams, pointer(48));
RegRegisterMethod(TActionClient,'Refresh',TypeInfo(_T11),NoParams,  getVMTProcAddr('TActionClient','Refresh',48));


RegRegisterMethod(TActionClientItem,'ActionChange',TypeInfo(_T12),[
TypeInfo(TObject),
TypeInfo(Boolean)], pointer(MinVMTOffset - 2));

RegRegisterMethod(TActionClientItem,'HasGlyph',TypeInfo(_T14),[TypeInfo(Boolean)],Addr(TActionClientItem.HasGlyph));

//RegRegisterMethod(TActionClientItem,'InitiateAction',TypeInfo(_T15),NoParams, pointer(52));
RegRegisterMethod(TActionClientItem,'InitiateAction',TypeInfo(_T15),NoParams,  getVMTProcAddr('TActionClientItem','InitiateAction',52));


RegRegisterMethod(TActionClientItem,'Unused',TypeInfo(_T16),[TypeInfo(Boolean)],Addr(TActionClientItem.Unused));

//RegRegisterMethod(TActionClientLink,'DoShowHint',TypeInfo(_T17),[TypeInfo(string),TypeInfo(Boolean)], pointer(120));
RegRegisterMethod(TActionClientLink,'DoShowHint',TypeInfo(_T17),[TypeInfo(string),TypeInfo(Boolean)],  getVMTProcAddr('TActionClientLink','DoShowHint',120));


RegRegisterMethod(TActionClients,'Add',TypeInfo(_T19),[TypeInfo(TActionClientItem)],Addr(TActionClients.Add));

RegRegisterMethod(TActionClients,'VisibleCount',TypeInfo(_T20),[TypeInfo(Integer)],Addr(TActionClients.VisibleCount));

RegisterProc(TActionDragObject,'Create',mtConstructor,TypeInfo(_T22),NoParams,Addr(TActionDragObject.Create),cRegister);

RegRegisterMethod(TActionDragObject,'AddAction',TypeInfo(_T23),[
TypeInfo(TContainedAction)],Addr(TActionDragObject.AddAction));

RegRegisterMethod(TActionDragObject,'AddActionClass',TypeInfo(_T24),[
TypeInfo(TCustomActionClass)],Addr(TActionDragObject.AddActionClass));

RegisterProc(TCategoryDragObject,'Create',mtConstructor,TypeInfo(_T25),[
TypeInfo(string)],Addr(TCategoryDragObject.Create),cRegister);

//RegRegisterMethod(TCustomActionBar,'AutoSizingChanged',TypeInfo(_T26),NoParams, pointer(220));
RegRegisterMethod(TCustomActionBar,'AutoSizingChanged',TypeInfo(_T26),NoParams,  getVMTProcAddr('TCustomActionBar','AutoSizingChanged',220));


//RegRegisterMethod(TCustomActionBar,'Clear',TypeInfo(_T27),NoParams, pointer(224));
RegRegisterMethod(TCustomActionBar,'Clear',TypeInfo(_T27),NoParams,  getVMTProcAddr('TCustomActionBar','Clear',224));


//RegRegisterMethod(TCustomActionBar,'CreateControl',TypeInfo(_T28),[TypeInfo(TActionClientItem),TypeInfo(TCustomActionControl)], pointer(228));
RegRegisterMethod(TCustomActionBar,'CreateControl',TypeInfo(_T28),[TypeInfo(TActionClientItem),TypeInfo(TCustomActionControl)],  getVMTProcAddr('TCustomActionBar','CreateControl',228));


//RegRegisterMethod(TCustomActionBar,'CreateControls',TypeInfo(_T29),NoParams, pointer(232));
RegRegisterMethod(TCustomActionBar,'CreateControls',TypeInfo(_T29),NoParams,  getVMTProcAddr('TCustomActionBar','CreateControls',232));


//RegRegisterMethod(TCustomActionBar,'DoControlCreated',TypeInfo(_T31),[TypeInfo(TCustomActionControl)], pointer(236));
RegRegisterMethod(TCustomActionBar,'DoControlCreated',TypeInfo(_T31),[TypeInfo(TCustomActionControl)],  getVMTProcAddr('TCustomActionBar','DoControlCreated',236));


//RegRegisterMethod(TCustomActionBar,'DoDropCategory',TypeInfo(_T32),[TypeInfo(TCategoryDragObject),TypeInfo(Integer),TypeInfo(Integer)], pointer(240));
RegRegisterMethod(TCustomActionBar,'DoDropCategory',TypeInfo(_T32),[TypeInfo(TCategoryDragObject),TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TCustomActionBar','DoDropCategory',240));


//RegRegisterMethod(TCustomActionBar,'DoDropActions',TypeInfo(_T33),[TypeInfo(TActionDragObject),TypeInfo(Integer),TypeInfo(Integer)], pointer(244));
RegRegisterMethod(TCustomActionBar,'DoDropActions',TypeInfo(_T33),[TypeInfo(TActionDragObject),TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TCustomActionBar','DoDropActions',244));


//RegRegisterMethod(TCustomActionBar,'DoDropItem',TypeInfo(_T34),[TypeInfo(TActionItemDragObject),TypeInfo(Integer),TypeInfo(Integer)], pointer(248));
RegRegisterMethod(TCustomActionBar,'DoDropItem',TypeInfo(_T34),[TypeInfo(TActionItemDragObject),TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TCustomActionBar','DoDropItem',248));


//RegRegisterMethod(TCustomActionBar,'FindLast',TypeInfo(_T35),[TypeInfo(TActionClientItem)], pointer(252));
RegRegisterMethod(TCustomActionBar,'FindLast',TypeInfo(_T35),[TypeInfo(TActionClientItem)],  getVMTProcAddr('TCustomActionBar','FindLast',252));


RegisterProc(TCustomActionBar,'FindNext',mtScriptMethod,TypeInfo(_T36),[
TypeInfo(TActionClientItem),
TypeInfo(Boolean),TypeInfo(TActionClientItem)],Addr(__TCustomActionBar__FindNext__Wrapper),cRegister);

RegisterProc(TCustomActionBar,'FindPrevious',mtScriptMethod,TypeInfo(_T37),[
TypeInfo(TActionClientItem),
TypeInfo(Boolean),TypeInfo(TActionClientItem)],Addr(__TCustomActionBar__FindPrevious__Wrapper),cRegister);

//RegRegisterMethod(TCustomActionBar,'GetBannerWidth',TypeInfo(_T38),[TypeInfo(TBarEdge),TypeInfo(Integer)], pointer(264));
RegRegisterMethod(TCustomActionBar,'GetBannerWidth',TypeInfo(_T38),[TypeInfo(TBarEdge),TypeInfo(Integer)],  getVMTProcAddr('TCustomActionBar','GetBannerWidth',264));


//RegRegisterMethod(TCustomActionBar,'GetBarHeight',TypeInfo(_T39),[TypeInfo(Integer)], pointer(268));
RegRegisterMethod(TCustomActionBar,'GetBarHeight',TypeInfo(_T39),[TypeInfo(Integer)],  getVMTProcAddr('TCustomActionBar','GetBarHeight',268));


//RegRegisterMethod(TCustomActionBar,'GetBarWidth',TypeInfo(_T40),[TypeInfo(Integer)], pointer(272));
RegRegisterMethod(TCustomActionBar,'GetBarWidth',TypeInfo(_T40),[TypeInfo(Integer)],  getVMTProcAddr('TCustomActionBar','GetBarWidth',272));


//RegRegisterMethod(TCustomActionBar,'GetDesignMode',TypeInfo(_T41),[TypeInfo(Boolean)], pointer(276));
RegRegisterMethod(TCustomActionBar,'GetDesignMode',TypeInfo(_T41),[TypeInfo(Boolean)],  getVMTProcAddr('TCustomActionBar','GetDesignMode',276));


//RegRegisterMethod(TCustomActionBar,'GetActionControl',TypeInfo(_T42),[TypeInfo(Integer),TypeInfo(TCustomActionControl)], pointer(280));
RegRegisterMethod(TCustomActionBar,'GetActionControl',TypeInfo(_T42),[TypeInfo(Integer),TypeInfo(TCustomActionControl)],  getVMTProcAddr('TCustomActionBar','GetActionControl',280));


//RegRegisterMethod(TCustomActionBar,'ItemCount',TypeInfo(_T45),[TypeInfo(Integer)], pointer(292));
RegRegisterMethod(TCustomActionBar,'ItemCount',TypeInfo(_T45),[TypeInfo(Integer)],  getVMTProcAddr('TCustomActionBar','ItemCount',292));


//RegRegisterMethod(TCustomActionBar,'DrawBackground',TypeInfo(_T46),NoParams, pointer(296));
RegRegisterMethod(TCustomActionBar,'DrawBackground',TypeInfo(_T46),NoParams,  getVMTProcAddr('TCustomActionBar','DrawBackground',296));


//RegRegisterMethod(TCustomActionBar,'Paint',TypeInfo(_T47),NoParams, pointer(300));
RegRegisterMethod(TCustomActionBar,'Paint',TypeInfo(_T47),NoParams,  getVMTProcAddr('TCustomActionBar','Paint',300));


//RegRegisterMethod(TCustomActionBar,'Reset',TypeInfo(_T48),NoParams, pointer(304));
RegRegisterMethod(TCustomActionBar,'Reset',TypeInfo(_T48),NoParams,  getVMTProcAddr('TCustomActionBar','Reset',304));


//RegRegisterMethod(TCustomActionBar,'SetActionClient',TypeInfo(_T49),[TypeInfo(TActionClient)], pointer(308));
RegRegisterMethod(TCustomActionBar,'SetActionClient',TypeInfo(_T49),[TypeInfo(TActionClient)],  getVMTProcAddr('TCustomActionBar','SetActionClient',308));


//RegRegisterMethod(TCustomActionBar,'SetAutoSizing',TypeInfo(_T50),[TypeInfo(Boolean)], pointer(312));
RegRegisterMethod(TCustomActionBar,'SetAutoSizing',TypeInfo(_T50),[TypeInfo(Boolean)],  getVMTProcAddr('TCustomActionBar','SetAutoSizing',312));


//RegRegisterMethod(TCustomActionBar,'SetColorMap',TypeInfo(_T51),[TypeInfo(TCustomActionBarColorMap)], pointer(316));
RegRegisterMethod(TCustomActionBar,'SetColorMap',TypeInfo(_T51),[TypeInfo(TCustomActionBarColorMap)],  getVMTProcAddr('TCustomActionBar','SetColorMap',316));


//RegRegisterMethod(TCustomActionBar,'SetDesignMode',TypeInfo(_T52),[TypeInfo(Boolean)], pointer(320));
RegRegisterMethod(TCustomActionBar,'SetDesignMode',TypeInfo(_T52),[TypeInfo(Boolean)],  getVMTProcAddr('TCustomActionBar','SetDesignMode',320));


//RegRegisterMethod(TCustomActionBar,'SetOrientation',TypeInfo(_T53),[TypeInfo(TBarOrientation)], pointer(324));
RegRegisterMethod(TCustomActionBar,'SetOrientation',TypeInfo(_T53),[TypeInfo(TBarOrientation)],  getVMTProcAddr('TCustomActionBar','SetOrientation',324));


//RegRegisterMethod(TCustomActionBar,'SetPersistentHotKeys',TypeInfo(_T54),[TypeInfo(Boolean)], pointer(328));
RegRegisterMethod(TCustomActionBar,'SetPersistentHotKeys',TypeInfo(_T54),[TypeInfo(Boolean)],  getVMTProcAddr('TCustomActionBar','SetPersistentHotKeys',328));


//RegRegisterMethod(TCustomActionBar,'SetSpacing',TypeInfo(_T55),[TypeInfo(Integer)], pointer(332));
RegRegisterMethod(TCustomActionBar,'SetSpacing',TypeInfo(_T55),[TypeInfo(Integer)],  getVMTProcAddr('TCustomActionBar','SetSpacing',332));


//RegRegisterMethod(TCustomActionBar,'FindFirst',TypeInfo(_T56),[TypeInfo(TActionClientItem)], pointer(336));
RegRegisterMethod(TCustomActionBar,'FindFirst',TypeInfo(_T56),[TypeInfo(TActionClientItem)],  getVMTProcAddr('TCustomActionBar','FindFirst',336));


RegRegisterMethod(TCustomActionBar,'FindFirstVisibleItem',TypeInfo(_T57),[TypeInfo(TActionClientItem)],Addr(TCustomActionBar.FindFirstVisibleItem));

RegRegisterMethod(TCustomActionBar,'FindLastVisibleItem',TypeInfo(_T58),[TypeInfo(TActionClientItem)],Addr(TCustomActionBar.FindLastVisibleItem));

//RegRegisterMethod(TCustomActionBar,'RecreateControls',TypeInfo(_T59),NoParams, pointer(340));
RegRegisterMethod(TCustomActionBar,'RecreateControls',TypeInfo(_T59),NoParams,  getVMTProcAddr('TCustomActionBar','RecreateControls',340));


//RegRegisterMethod(TCustomActionBar,'Style',TypeInfo(_T60),[TypeInfo(TActionBarStyle)], pointer(344));
RegRegisterMethod(TCustomActionBar,'Style',TypeInfo(_T60),[TypeInfo(TActionBarStyle)],  getVMTProcAddr('TCustomActionBar','Style',344));


//RegRegisterMethod(TCustomActionBarColorMap,'SetColor',TypeInfo(_T61),[TypeInfo(TColor)], pointer(48));
RegRegisterMethod(TCustomActionBarColorMap,'SetColor',TypeInfo(_T61),[TypeInfo(TColor)],  getVMTProcAddr('TCustomActionBarColorMap','SetColor',48));


//RegRegisterMethod(TCustomActionBarColorMap,'SetFontColor',TypeInfo(_T62),[TypeInfo(TColor)], pointer(52));
RegRegisterMethod(TCustomActionBarColorMap,'SetFontColor',TypeInfo(_T62),[TypeInfo(TColor)],  getVMTProcAddr('TCustomActionBarColorMap','SetFontColor',52));


//RegRegisterMethod(TCustomActionBarColorMap,'UpdateColors',TypeInfo(_T63),NoParams, pointer(56));
RegRegisterMethod(TCustomActionBarColorMap,'UpdateColors',TypeInfo(_T63),NoParams,  getVMTProcAddr('TCustomActionBarColorMap','UpdateColors',56));


//RegRegisterMethod(TCustomActionControl,'CalcLayout',TypeInfo(_T64),NoParams, pointer(148));
RegRegisterMethod(TCustomActionControl,'CalcLayout',TypeInfo(_T64),NoParams,  getVMTProcAddr('TCustomActionControl','CalcLayout',148));


//RegRegisterMethod(TCustomActionControl,'DoDragDrop',TypeInfo(_T65),[TypeInfo(TObject),TypeInfo(Integer),TypeInfo(Integer)], pointer(152));
RegRegisterMethod(TCustomActionControl,'DoDragDrop',TypeInfo(_T65),[TypeInfo(TObject),TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TCustomActionControl','DoDragDrop',152));


//RegRegisterMethod(TCustomActionControl,'GetShowCaption',TypeInfo(_T66),[TypeInfo(Boolean)], pointer(156));
RegRegisterMethod(TCustomActionControl,'GetShowCaption',TypeInfo(_T66),[TypeInfo(Boolean)],  getVMTProcAddr('TCustomActionControl','GetShowCaption',156));


//RegRegisterMethod(TCustomActionControl,'GetShowShortCut',TypeInfo(_T67),[TypeInfo(Boolean)], pointer(160));
RegRegisterMethod(TCustomActionControl,'GetShowShortCut',TypeInfo(_T67),[TypeInfo(Boolean)],  getVMTProcAddr('TCustomActionControl','GetShowShortCut',160));


//RegRegisterMethod(TCustomActionControl,'DrawDesignFocus',TypeInfo(_T68),[TypeInfo(IDispatch)], pointer(164));
RegRegisterMethod(TCustomActionControl,'DrawDesignFocus',TypeInfo(_T68),[TypeInfo(IDispatch)],  getVMTProcAddr('TCustomActionControl','DrawDesignFocus',164));


//RegRegisterMethod(TCustomActionControl,'DrawGlyph',TypeInfo(_T69),[TypeInfo(IDispatch)], pointer(168));
RegRegisterMethod(TCustomActionControl,'DrawGlyph',TypeInfo(_T69),[TypeInfo(IDispatch)],  getVMTProcAddr('TCustomActionControl','DrawGlyph',168));


//RegRegisterMethod(TCustomActionControl,'DrawLargeGlyph',TypeInfo(_T70),[TypeInfo(IDispatch)], pointer(172));
RegRegisterMethod(TCustomActionControl,'DrawLargeGlyph',TypeInfo(_T70),[TypeInfo(IDispatch)],  getVMTProcAddr('TCustomActionControl','DrawLargeGlyph',172));


//RegRegisterMethod(TCustomActionControl,'DrawBackground',TypeInfo(_T71),[TypeInfo(IDispatch)], pointer(176));
RegRegisterMethod(TCustomActionControl,'DrawBackground',TypeInfo(_T71),[TypeInfo(IDispatch)],  getVMTProcAddr('TCustomActionControl','DrawBackground',176));


//RegRegisterMethod(TCustomActionControl,'DrawText',TypeInfo(_T72),[TypeInfo(IDispatch),TypeInfo(Cardinal),TypeInfo(string)], pointer(180));
RegRegisterMethod(TCustomActionControl,'DrawText',TypeInfo(_T72),[TypeInfo(IDispatch),TypeInfo(Cardinal),TypeInfo(string)],  getVMTProcAddr('TCustomActionControl','DrawText',180));


//RegRegisterMethod(TCustomActionControl,'DrawShadowedText',TypeInfo(_T73),[TypeInfo(IDispatch),TypeInfo(Cardinal),TypeInfo(string),TypeInfo(TColor),TypeInfo(TColor)], pointer(184));
RegRegisterMethod(TCustomActionControl,'DrawShadowedText',TypeInfo(_T73),[TypeInfo(IDispatch),TypeInfo(Cardinal),TypeInfo(string),TypeInfo(TColor),TypeInfo(TColor)],  getVMTProcAddr('TCustomActionControl','DrawShadowedText',184));


//RegRegisterMethod(TCustomActionControl,'DrawSeparator',TypeInfo(_T74),[TypeInfo(Integer)], pointer(188));
RegRegisterMethod(TCustomActionControl,'DrawSeparator',TypeInfo(_T74),[TypeInfo(Integer)],  getVMTProcAddr('TCustomActionControl','DrawSeparator',188));


//RegRegisterMethod(TCustomActionControl,'GetImageSize',TypeInfo(_T75),[TypeInfo(IDispatch)], pointer(192));
RegRegisterMethod(TCustomActionControl,'GetImageSize',TypeInfo(_T75),[TypeInfo(IDispatch)],  getVMTProcAddr('TCustomActionControl','GetImageSize',192));


//RegRegisterMethod(TCustomActionControl,'IsChecked',TypeInfo(_T76),[TypeInfo(Boolean)], pointer(196));
RegRegisterMethod(TCustomActionControl,'IsChecked',TypeInfo(_T76),[TypeInfo(Boolean)],  getVMTProcAddr('TCustomActionControl','IsChecked',196));


//RegRegisterMethod(TCustomActionControl,'IsGrouped',TypeInfo(_T77),[TypeInfo(Boolean)], pointer(200));
RegRegisterMethod(TCustomActionControl,'IsGrouped',TypeInfo(_T77),[TypeInfo(Boolean)],  getVMTProcAddr('TCustomActionControl','IsGrouped',200));


//RegRegisterMethod(TCustomActionControl,'GetSeparator',TypeInfo(_T78),[TypeInfo(Boolean)], pointer(204));
RegRegisterMethod(TCustomActionControl,'GetSeparator',TypeInfo(_T78),[TypeInfo(Boolean)],  getVMTProcAddr('TCustomActionControl','GetSeparator',204));


//RegRegisterMethod(TCustomActionControl,'PositionChanged',TypeInfo(_T79),NoParams, pointer(208));
RegRegisterMethod(TCustomActionControl,'PositionChanged',TypeInfo(_T79),NoParams,  getVMTProcAddr('TCustomActionControl','PositionChanged',208));


//RegRegisterMethod(TCustomActionControl,'SetActionClient',TypeInfo(_T80),[TypeInfo(TActionClientItem)], pointer(212));
RegRegisterMethod(TCustomActionControl,'SetActionClient',TypeInfo(_T80),[TypeInfo(TActionClientItem)],  getVMTProcAddr('TCustomActionControl','SetActionClient',212));


//RegRegisterMethod(TCustomActionControl,'SetGlyphLayout',TypeInfo(_T81),[TypeInfo(TButtonLayout)], pointer(216));
RegRegisterMethod(TCustomActionControl,'SetGlyphLayout',TypeInfo(_T81),[TypeInfo(TButtonLayout)],  getVMTProcAddr('TCustomActionControl','SetGlyphLayout',216));


//RegRegisterMethod(TCustomActionControl,'SetSelected',TypeInfo(_T82),[TypeInfo(Boolean)], pointer(220));
RegRegisterMethod(TCustomActionControl,'SetSelected',TypeInfo(_T82),[TypeInfo(Boolean)],  getVMTProcAddr('TCustomActionControl','SetSelected',220));


//RegRegisterMethod(TCustomActionControl,'CalcBounds',TypeInfo(_T83),NoParams, pointer(224));
RegRegisterMethod(TCustomActionControl,'CalcBounds',TypeInfo(_T83),NoParams,  getVMTProcAddr('TCustomActionControl','CalcBounds',224));


//RegRegisterMethod(TCustomActionControl,'Keyed',TypeInfo(_T84),NoParams, pointer(228));
RegRegisterMethod(TCustomActionControl,'Keyed',TypeInfo(_T84),NoParams,  getVMTProcAddr('TCustomActionControl','Keyed',228));


//RegRegisterMethod(TCustomActionManager,'GetUsage',TypeInfo(_T89),[TypeInfo(TActionClientItem),TypeInfo(Boolean)], pointer(60));
RegRegisterMethod(TCustomActionManager,'GetUsage',TypeInfo(_T89),[TypeInfo(TActionClientItem),TypeInfo(Boolean)],  getVMTProcAddr('TCustomActionManager','GetUsage',60));


RegisterProc(TCustomActionManager,'AddAction',mtScriptMethod,TypeInfo(_T90),[
TypeInfo(TCustomAction),
TypeInfo(TActionClient),
TypeInfo(Boolean),TypeInfo(TActionClientItem)],Addr(__TCustomActionManager__AddAction__Wrapper),cRegister);

RegisterProc(TCustomActionManager,'AddCategory',mtScriptMethod,TypeInfo(_T91),[
TypeInfo(string),
TypeInfo(TActionClient),
TypeInfo(Boolean),TypeInfo(TActionClientItem)],Addr(__TCustomActionManager__AddCategory__Wrapper),cRegister);

RegisterProc(TCustomActionManager,'AddSeparator',mtScriptMethod,TypeInfo(_T92),[
TypeInfo(TActionClientItem),
TypeInfo(Boolean),TypeInfo(TActionClientItem)],Addr(__TCustomActionManager__AddSeparator__Wrapper),cRegister);

RegRegisterMethod(TCustomActionManager,'DeleteActionItems',TypeInfo(_T93),[
ArrayInfo(TypeInfo(TCustomAction))],Addr(TCustomActionManager.DeleteActionItems));

RegRegisterMethod(TCustomActionManager,'DeleteItem',TypeInfo(_T94),[
TypeInfo(string)],Addr(TCustomActionManager.DeleteItem));

RegRegisterMethod(TCustomActionManager,'FindItemByCaption',TypeInfo(_T95),[
TypeInfo(string),TypeInfo(TActionClientItem)],Addr(TCustomActionManager.FindItemByCaption));

RegRegisterMethod(TCustomActionManager,'FindItemByAction',TypeInfo(_T96),[
TypeInfo(TCustomAction),TypeInfo(TActionClientItem)],Addr(TCustomActionManager.FindItemByAction));

RegRegisterMethod(TCustomActionManager,'LoadFromFile',TypeInfo(_T97),[
TypeInfo(string)],Addr(TCustomActionManager.LoadFromFile));

RegRegisterMethod(TCustomActionManager,'LoadFromStream',TypeInfo(_T98),[
TypeInfo(TStream)],Addr(TCustomActionManager.LoadFromStream));

RegRegisterMethod(TCustomActionManager,'ResetActionBar',TypeInfo(_T99),[
TypeInfo(Integer)],Addr(TCustomActionManager.ResetActionBar));

RegRegisterMethod(TCustomActionManager,'ResetUsageData',TypeInfo(_T100),NoParams,Addr(TCustomActionManager.ResetUsageData));

RegRegisterMethod(TCustomActionManager,'SaveToFile',TypeInfo(_T101),[
TypeInfo(string)],Addr(TCustomActionManager.SaveToFile));

RegRegisterMethod(TCustomActionManager,'SaveToStream',TypeInfo(_T102),[
TypeInfo(TStream)],Addr(TCustomActionManager.SaveToStream));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(TActionBars,'Create',mtConstructor,TypeInfo(_T1),[
TypeInfo(TPersistent),
TypeInfo(TCollectionItemClass)],Addr(TActionBars.Create),cRegister)}

{RegRegisterMethod(TActionBarStyle,'GetControlClass',TypeInfo(_T3),[
TypeInfo(TCustomActionBar),
TypeInfo(TActionClientItem),TypeInfo(TCustomActionControlClass)], pointer(0))}

{RegRegisterMethod(TActionBarStyle,'GetColorMapClass',TypeInfo(_T4),[
TypeInfo(TCustomActionBar),TypeInfo(TCustomColorMapClass)], pointer(4))}

{RegRegisterMethod(TActionClientItem,'GetActionLinkClass',TypeInfo(_T13),[TypeInfo(TActionClientLinkClass)], pointer(MinVMTOffset - 3))}

{RegisterProc(TActionClients,'Create',mtConstructor,TypeInfo(_T18),[
TypeInfo(TPersistent),
TypeInfo(TCollectionItemClass)],Addr(TActionClients.Create),cRegister)}

{RegRegisterMethod(TActionClientsCollection,'IterateClients',TypeInfo(_T21),[
TypeInfo(TActionClientsCollection),
TypeInfo(TActionProc)],Addr(TActionClientsCollection.IterateClients))}

{RegRegisterMethod(TCustomActionBar,'DoGetControlClass',TypeInfo(_T30),[
TypeInfo(TActionClientItem),TypeInfo(TCustomActionControlClass)], pointer(MinVMTOffset - 79))}

{RegRegisterMethod(TCustomActionBar,'GetDefaultColorMapClass',TypeInfo(_T43),[TypeInfo(TCustomColorMapClass)], pointer(284))}

{RegRegisterMethod(TCustomActionBar,'GetControlClass',TypeInfo(_T44),[
TypeInfo(TActionClientItem),TypeInfo(TCustomActionControlClass)], pointer(288))}

{RegRegisterMethod(TCustomActionManager,'GetActionBarsClass',TypeInfo(_T85),[TypeInfo(TActionBarsClass)], pointer(MinVMTOffset - 16))}

{RegRegisterMethod(TCustomActionManager,'GetActionBarItemClass',TypeInfo(_T86),[TypeInfo(TActionBarItemClass)], pointer(MinVMTOffset - 17))}

{RegRegisterMethod(TCustomActionManager,'GetActionClientsClass',TypeInfo(_T87),[TypeInfo(TActionClientsClass)], pointer(MinVMTOffset - 18))}

{RegRegisterMethod(TCustomActionManager,'GetActionClientItemClass',TypeInfo(_T88),[TypeInfo(TActionClientItemClass)], pointer(MinVMTOffset - 19))}

RegisterEvent(TypeInfo(TActionProc),[
TypeInfo(TActionClient)]);

RegisterEvent(TypeInfo(TControlCreatedEvent),[
TypeInfo(TObject),
TypeInfo(TCustomActionControl)]);

{RegisterEvent(TypeInfo(TGetBarItemClassEvent),[
TypeInfo(TCustomActionManager),
TypeInfo(TActionBarItemClass)]);}

{RegisterEvent(TypeInfo(TGetBarsClassEvent),[
TypeInfo(TCustomActionManager),
TypeInfo(TActionBarsClass)]);}

{RegisterEvent(TypeInfo(TGetClientItemClassEvent),[
TypeInfo(TCustomActionManager),
TypeInfo(TActionClientItemClass)]);}

{RegisterEvent(TypeInfo(TGetClientsClassEvent),[
TypeInfo(TCustomActionManager),
TypeInfo(TActionClientsClass)]);}

{RegisterEvent(TypeInfo(TGetControlClassEvent),[
TypeInfo(TCustomActionBar),
TypeInfo(TActionClient),
TypeInfo(TCustomActionControlClass)]);}

RegisterEvent(TypeInfo(TStyleChanged),[
TypeInfo(TCustomActionManager)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
