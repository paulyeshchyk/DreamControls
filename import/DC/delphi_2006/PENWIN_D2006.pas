{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit PENWIN_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  Types,
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Messages,
  MMSystem,
  PenWin;
function ConvertABSTIMEToVariant(var R : ABSTIME) : OleVariant;
function ConvertVariantToABSTIME(const V : OleVariant) : ABSTIME;
function ConvertANIMATEINFOToVariant(var R : ANIMATEINFO) : OleVariant;
function ConvertVariantToANIMATEINFO(const V : OleVariant) : ANIMATEINFO;
function ConvertBOXEDITINFOToVariant(var R : BOXEDITINFO) : OleVariant;
function ConvertVariantToBOXEDITINFO(const V : OleVariant) : BOXEDITINFO;
function ConvertBOXLAYOUTToVariant(var R : BOXLAYOUT) : OleVariant;
function ConvertVariantToBOXLAYOUT(const V : OleVariant) : BOXLAYOUT;
function ConvertBOXRESULTSToVariant(var R : BOXRESULTS) : OleVariant;
function ConvertVariantToBOXRESULTS(const V : OleVariant) : BOXRESULTS;
function ConvertCALBSTRUCTToVariant(var R : CALBSTRUCT) : OleVariant;
function ConvertVariantToCALBSTRUCT(const V : OleVariant) : CALBSTRUCT;
function ConvertCTLINITBEDITToVariant(var R : CTLINITBEDIT) : OleVariant;
function ConvertVariantToCTLINITBEDIT(const V : OleVariant) : CTLINITBEDIT;
function ConvertCTLINITHEDITToVariant(var R : CTLINITHEDIT) : OleVariant;
function ConvertVariantToCTLINITHEDIT(const V : OleVariant) : CTLINITHEDIT;
function ConvertCTLINITIEDITToVariant(var R : CTLINITIEDIT) : OleVariant;
function ConvertVariantToCTLINITIEDIT(const V : OleVariant) : CTLINITIEDIT;
function ConvertGUIDEToVariant(var R : GUIDE) : OleVariant;
function ConvertVariantToGUIDE(const V : OleVariant) : GUIDE;
function ConvertIMECOLORSToVariant(var R : IMECOLORS) : OleVariant;
function ConvertVariantToIMECOLORS(const V : OleVariant) : IMECOLORS;
function ConvertINKINGINFOToVariant(var R : INKINGINFO) : OleVariant;
function ConvertVariantToINKINGINFO(const V : OleVariant) : INKINGINFO;
function ConvertINPPARAMSToVariant(var R : INPPARAMS) : OleVariant;
function ConvertVariantToINPPARAMS(const V : OleVariant) : INPPARAMS;
function ConvertINTERVALToVariant(var R : INTERVAL) : OleVariant;
function ConvertVariantToINTERVAL(const V : OleVariant) : INTERVAL;
function ConvertOEMPENINFOToVariant(var R : OEMPENINFO) : OleVariant;
function ConvertVariantToOEMPENINFO(const V : OleVariant) : OEMPENINFO;
function ConvertOEMPENPACKETToVariant(var R : OEMPENPACKET) : OleVariant;
function ConvertVariantToOEMPENPACKET(const V : OleVariant) : OEMPENPACKET;
function ConvertPCMINFOToVariant(var R : PCMINFO) : OleVariant;
function ConvertVariantToPCMINFO(const V : OleVariant) : PCMINFO;
function ConvertPDEVENTToVariant(var R : PDEVENT) : OleVariant;
function ConvertVariantToPDEVENT(const V : OleVariant) : PDEVENT;
function ConvertPENDATAHEADERToVariant(var R : PENDATAHEADER) : OleVariant;
function ConvertVariantToPENDATAHEADER(const V : OleVariant) : PENDATAHEADER;
function ConvertPENINFOToVariant(var R : PENINFO) : OleVariant;
function ConvertVariantToPENINFO(const V : OleVariant) : PENINFO;
function ConvertPENPACKETToVariant(var R : PENPACKET) : OleVariant;
function ConvertVariantToPENPACKET(const V : OleVariant) : PENPACKET;
function ConvertPENTIPToVariant(var R : PENTIP) : OleVariant;
function ConvertVariantToPENTIP(const V : OleVariant) : PENTIP;
function ConvertRCToVariant(var R : RC) : OleVariant;
function ConvertVariantToRC(const V : OleVariant) : RC;
function ConvertRCRESULTToVariant(var R : RCRESULT) : OleVariant;
function ConvertVariantToRCRESULT(const V : OleVariant) : RCRESULT;
function ConvertRECTOFSToVariant(var R : RECTOFS) : OleVariant;
function ConvertVariantToRECTOFS(const V : OleVariant) : RECTOFS;
function ConvertSKBINFOToVariant(var R : SKBINFO) : OleVariant;
function ConvertVariantToSKBINFO(const V : OleVariant) : SKBINFO;
function ConvertSTRKFMTToVariant(var R : STRKFMT) : OleVariant;
function ConvertVariantToSTRKFMT(const V : OleVariant) : STRKFMT;
function ConvertSTROKEINFOToVariant(var R : STROKEINFO) : OleVariant;
function ConvertVariantToSTROKEINFO(const V : OleVariant) : STROKEINFO;
function ConvertSYCToVariant(var R : SYC) : OleVariant;
function ConvertVariantToSYC(const V : OleVariant) : SYC;
function ConvertSYEToVariant(var R : SYE) : OleVariant;
function ConvertVariantToSYE(const V : OleVariant) : SYE;
function ConvertSYGToVariant(var R : SYG) : OleVariant;
function ConvertVariantToSYG(const V : OleVariant) : SYG;
function ConvertTAbsTimeToVariant(var R : TAbsTime) : OleVariant;
function ConvertVariantToTAbsTime(const V : OleVariant) : TAbsTime;
function ConverttagABSTIMEToVariant(var R : tagABSTIME) : OleVariant;
function ConvertVariantTotagABSTIME(const V : OleVariant) : tagABSTIME;
function ConverttagANIMATEINFOToVariant(var R : tagANIMATEINFO) : OleVariant;
function ConvertVariantTotagANIMATEINFO(const V : OleVariant) : tagANIMATEINFO;
function ConverttagBOXEDITINFOToVariant(var R : tagBOXEDITINFO) : OleVariant;
function ConvertVariantTotagBOXEDITINFO(const V : OleVariant) : tagBOXEDITINFO;
function ConverttagBOXLAYOUTToVariant(var R : tagBOXLAYOUT) : OleVariant;
function ConvertVariantTotagBOXLAYOUT(const V : OleVariant) : tagBOXLAYOUT;
function ConverttagBOXRESULTSToVariant(var R : tagBOXRESULTS) : OleVariant;
function ConvertVariantTotagBOXRESULTS(const V : OleVariant) : tagBOXRESULTS;
function ConverttagCALBSTRUCTToVariant(var R : tagCALBSTRUCT) : OleVariant;
function ConvertVariantTotagCALBSTRUCT(const V : OleVariant) : tagCALBSTRUCT;
function ConverttagCTLINITBEDITToVariant(var R : tagCTLINITBEDIT) : OleVariant;
function ConvertVariantTotagCTLINITBEDIT(const V : OleVariant) : tagCTLINITBEDIT;
function ConverttagCTLINITHEDITToVariant(var R : tagCTLINITHEDIT) : OleVariant;
function ConvertVariantTotagCTLINITHEDIT(const V : OleVariant) : tagCTLINITHEDIT;
function ConverttagCTLINITIEDITToVariant(var R : tagCTLINITIEDIT) : OleVariant;
function ConvertVariantTotagCTLINITIEDIT(const V : OleVariant) : tagCTLINITIEDIT;
function ConverttagGUIDEToVariant(var R : tagGUIDE) : OleVariant;
function ConvertVariantTotagGUIDE(const V : OleVariant) : tagGUIDE;
function ConverttagIMECOLORSToVariant(var R : tagIMECOLORS) : OleVariant;
function ConvertVariantTotagIMECOLORS(const V : OleVariant) : tagIMECOLORS;
function ConverttagINKINGINFOToVariant(var R : tagINKINGINFO) : OleVariant;
function ConvertVariantTotagINKINGINFO(const V : OleVariant) : tagINKINGINFO;
function ConverttagINPPARAMSToVariant(var R : tagINPPARAMS) : OleVariant;
function ConvertVariantTotagINPPARAMS(const V : OleVariant) : tagINPPARAMS;
function ConverttagINTERVALToVariant(var R : tagINTERVAL) : OleVariant;
function ConvertVariantTotagINTERVAL(const V : OleVariant) : tagINTERVAL;
function ConverttagOEMPENINFOToVariant(var R : tagOEMPENINFO) : OleVariant;
function ConvertVariantTotagOEMPENINFO(const V : OleVariant) : tagOEMPENINFO;
function ConverttagOEMPENPACKETToVariant(var R : tagOEMPENPACKET) : OleVariant;
function ConvertVariantTotagOEMPENPACKET(const V : OleVariant) : tagOEMPENPACKET;
function ConverttagPCMINFOToVariant(var R : tagPCMINFO) : OleVariant;
function ConvertVariantTotagPCMINFO(const V : OleVariant) : tagPCMINFO;
function ConverttagPDEVENTToVariant(var R : tagPDEVENT) : OleVariant;
function ConvertVariantTotagPDEVENT(const V : OleVariant) : tagPDEVENT;
function ConverttagPENDATAHEADERToVariant(var R : tagPENDATAHEADER) : OleVariant;
function ConvertVariantTotagPENDATAHEADER(const V : OleVariant) : tagPENDATAHEADER;
function ConverttagPENINFOToVariant(var R : tagPENINFO) : OleVariant;
function ConvertVariantTotagPENINFO(const V : OleVariant) : tagPENINFO;
function ConverttagPENPACKETToVariant(var R : tagPENPACKET) : OleVariant;
function ConvertVariantTotagPENPACKET(const V : OleVariant) : tagPENPACKET;
function ConverttagPENTIPToVariant(var R : tagPENTIP) : OleVariant;
function ConvertVariantTotagPENTIP(const V : OleVariant) : tagPENTIP;
function ConverttagRCToVariant(var R : tagRC) : OleVariant;
function ConvertVariantTotagRC(const V : OleVariant) : tagRC;
function ConverttagRCRESULTToVariant(var R : tagRCRESULT) : OleVariant;
function ConvertVariantTotagRCRESULT(const V : OleVariant) : tagRCRESULT;
function ConverttagRECTOFSToVariant(var R : tagRECTOFS) : OleVariant;
function ConvertVariantTotagRECTOFS(const V : OleVariant) : tagRECTOFS;
function ConverttagSKBINFOToVariant(var R : tagSKBINFO) : OleVariant;
function ConvertVariantTotagSKBINFO(const V : OleVariant) : tagSKBINFO;
function ConverttagSTRKFMTToVariant(var R : tagSTRKFMT) : OleVariant;
function ConvertVariantTotagSTRKFMT(const V : OleVariant) : tagSTRKFMT;
function ConverttagSTROKEINFOToVariant(var R : tagSTROKEINFO) : OleVariant;
function ConvertVariantTotagSTROKEINFO(const V : OleVariant) : tagSTROKEINFO;
function ConverttagSYCToVariant(var R : tagSYC) : OleVariant;
function ConvertVariantTotagSYC(const V : OleVariant) : tagSYC;
function ConverttagSYEToVariant(var R : tagSYE) : OleVariant;
function ConvertVariantTotagSYE(const V : OleVariant) : tagSYE;
function ConverttagSYGToVariant(var R : tagSYG) : OleVariant;
function ConvertVariantTotagSYG(const V : OleVariant) : tagSYG;
function ConverttagTARGETToVariant(var R : tagTARGET) : OleVariant;
function ConvertVariantTotagTARGET(const V : OleVariant) : tagTARGET;
function ConverttagTARGINFOToVariant(var R : tagTARGINFO) : OleVariant;
function ConvertVariantTotagTARGINFO(const V : OleVariant) : tagTARGINFO;
function ConvertTAnimateInfoToVariant(var R : TAnimateInfo) : OleVariant;
function ConvertVariantToTAnimateInfo(const V : OleVariant) : TAnimateInfo;
function ConvertTARGETToVariant(var R : TARGET) : OleVariant;
function ConvertVariantToTARGET(const V : OleVariant) : TARGET;
function ConvertTARGINFOToVariant(var R : TARGINFO) : OleVariant;
function ConvertVariantToTARGINFO(const V : OleVariant) : TARGINFO;
function ConvertTBoxEditInfoToVariant(var R : TBoxEditInfo) : OleVariant;
function ConvertVariantToTBoxEditInfo(const V : OleVariant) : TBoxEditInfo;
function ConvertTBoxLayoutToVariant(var R : TBoxLayout) : OleVariant;
function ConvertVariantToTBoxLayout(const V : OleVariant) : TBoxLayout;
function ConvertTBoxResultsToVariant(var R : TBoxResults) : OleVariant;
function ConvertVariantToTBoxResults(const V : OleVariant) : TBoxResults;
function ConvertTCalbStructToVariant(var R : TCalbStruct) : OleVariant;
function ConvertVariantToTCalbStruct(const V : OleVariant) : TCalbStruct;
function ConvertTCtlInitBEditToVariant(var R : TCtlInitBEdit) : OleVariant;
function ConvertVariantToTCtlInitBEdit(const V : OleVariant) : TCtlInitBEdit;
function ConvertTCtlInitHEditToVariant(var R : TCtlInitHEdit) : OleVariant;
function ConvertVariantToTCtlInitHEdit(const V : OleVariant) : TCtlInitHEdit;
function ConvertTCtlInitIEditToVariant(var R : TCtlInitIEdit) : OleVariant;
function ConvertVariantToTCtlInitIEdit(const V : OleVariant) : TCtlInitIEdit;
function ConvertTGuideToVariant(var R : TGuide) : OleVariant;
function ConvertVariantToTGuide(const V : OleVariant) : TGuide;
function ConvertTIMEColorsToVariant(var R : TIMEColors) : OleVariant;
function ConvertVariantToTIMEColors(const V : OleVariant) : TIMEColors;
function ConvertTInkingInfoToVariant(var R : TInkingInfo) : OleVariant;
function ConvertVariantToTInkingInfo(const V : OleVariant) : TInkingInfo;
function ConvertTInpParamsToVariant(var R : TInpParams) : OleVariant;
function ConvertVariantToTInpParams(const V : OleVariant) : TInpParams;
function ConvertTIntervalToVariant(var R : TInterval) : OleVariant;
function ConvertVariantToTInterval(const V : OleVariant) : TInterval;
function ConvertTOEMPenInfoToVariant(var R : TOEMPenInfo) : OleVariant;
function ConvertVariantToTOEMPenInfo(const V : OleVariant) : TOEMPenInfo;
function ConvertTOEMPenPacketToVariant(var R : TOEMPenPacket) : OleVariant;
function ConvertVariantToTOEMPenPacket(const V : OleVariant) : TOEMPenPacket;
function ConvertTPCMInfoToVariant(var R : TPCMInfo) : OleVariant;
function ConvertVariantToTPCMInfo(const V : OleVariant) : TPCMInfo;
function ConvertTPDEventToVariant(var R : TPDEvent) : OleVariant;
function ConvertVariantToTPDEvent(const V : OleVariant) : TPDEvent;
function ConvertTPenDataHeaderToVariant(var R : TPenDataHeader) : OleVariant;
function ConvertVariantToTPenDataHeader(const V : OleVariant) : TPenDataHeader;
function ConvertTPenInfoToVariant(var R : TPenInfo) : OleVariant;
function ConvertVariantToTPenInfo(const V : OleVariant) : TPenInfo;
function ConvertTPenPacketToVariant(var R : TPenPacket) : OleVariant;
function ConvertVariantToTPenPacket(const V : OleVariant) : TPenPacket;
function ConvertTPenTipToVariant(var R : TPenTip) : OleVariant;
function ConvertVariantToTPenTip(const V : OleVariant) : TPenTip;
function ConvertTRCToVariant(var R : TRC) : OleVariant;
function ConvertVariantToTRC(const V : OleVariant) : TRC;
function ConvertTRCResultToVariant(var R : TRCResult) : OleVariant;
function ConvertVariantToTRCResult(const V : OleVariant) : TRCResult;
function ConvertTRectOfsToVariant(var R : TRectOfs) : OleVariant;
function ConvertVariantToTRectOfs(const V : OleVariant) : TRectOfs;
function ConvertTSKBInfoToVariant(var R : TSKBInfo) : OleVariant;
function ConvertVariantToTSKBInfo(const V : OleVariant) : TSKBInfo;
function ConvertTStrkFmtToVariant(var R : TStrkFmt) : OleVariant;
function ConvertVariantToTStrkFmt(const V : OleVariant) : TStrkFmt;
function ConvertTStrokeInfoToVariant(var R : TStrokeInfo) : OleVariant;
function ConvertVariantToTStrokeInfo(const V : OleVariant) : TStrokeInfo;
function ConvertTSYCToVariant(var R : TSYC) : OleVariant;
function ConvertVariantToTSYC(const V : OleVariant) : TSYC;
function ConvertTSYEToVariant(var R : TSYE) : OleVariant;
function ConvertVariantToTSYE(const V : OleVariant) : TSYE;
function ConvertTSYGToVariant(var R : TSYG) : OleVariant;
function ConvertVariantToTSYG(const V : OleVariant) : TSYG;
function ConvertTTargetToVariant(var R : TTarget) : OleVariant;
function ConvertVariantToTTarget(const V : OleVariant) : TTarget;
function ConvertTTargInfoToVariant(var R : TTargInfo) : OleVariant;
function ConvertVariantToTTargInfo(const V : OleVariant) : TTargInfo;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __ABSTIME__Wrapper = class(TDCRecordWrapper)
private
fR : ABSTIME;
public
function GetRecordPtr : pointer; override;
published
procedure setsec(const val : DWORD);
function getsec : DWORD;
property sec : DWORD read getsec write setsec;
procedure setms(const val : UINT);
function getms : UINT;
property ms : UINT read getms write setms;
end;
type __ANIMATEINFO__Wrapper = class(TDCRecordWrapper)
private
fR : ANIMATEINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setuSpeedPct(const val : UINT);
function getuSpeedPct : UINT;
property uSpeedPct : UINT read getuSpeedPct write setuSpeedPct;
procedure setuPeriodCB(const val : UINT);
function getuPeriodCB : UINT;
property uPeriodCB : UINT read getuPeriodCB write setuPeriodCB;
procedure setfuFlags(const val : UINT);
function getfuFlags : UINT;
property fuFlags : UINT read getfuFlags write setfuFlags;
procedure setLPARAM(const val : LPARAM);
function getLPARAM : LPARAM;
property LPARAM : LPARAM read getLPARAM write setLPARAM;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
end;
type __BOXEDITINFO__Wrapper = class(TDCRecordWrapper)
private
fR : BOXEDITINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setcxBox(const val : Integer);
function getcxBox : Integer;
property cxBox : Integer read getcxBox write setcxBox;
procedure setcyBox(const val : Integer);
function getcyBox : Integer;
property cyBox : Integer read getcyBox write setcyBox;
procedure setcxBase(const val : Integer);
function getcxBase : Integer;
property cxBase : Integer read getcxBase write setcxBase;
procedure setcyBase(const val : Integer);
function getcyBase : Integer;
property cyBase : Integer read getcyBase write setcyBase;
procedure setcyMid(const val : Integer);
function getcyMid : Integer;
property cyMid : Integer read getcyMid write setcyMid;
procedure setwFlags(const val : UINT);
function getwFlags : UINT;
property wFlags : UINT read getwFlags write setwFlags;
procedure setwFontHeight(const val : UINT);
function getwFontHeight : UINT;
property wFontHeight : UINT read getwFontHeight write setwFontHeight;
end;
type __BOXLAYOUT__Wrapper = class(TDCRecordWrapper)
private
fR : BOXLAYOUT;
public
function GetRecordPtr : pointer; override;
published
procedure setcyCusp(const val : Integer);
function getcyCusp : Integer;
property cyCusp : Integer read getcyCusp write setcyCusp;
procedure setcyEndCusp(const val : Integer);
function getcyEndCusp : Integer;
property cyEndCusp : Integer read getcyEndCusp write setcyEndCusp;
procedure setstyle(const val : UINT);
function getstyle : UINT;
property style : UINT read getstyle write setstyle;
procedure setdwReserved1(const val : DWORD);
function getdwReserved1 : DWORD;
property dwReserved1 : DWORD read getdwReserved1 write setdwReserved1;
procedure setdwReserved2(const val : DWORD);
function getdwReserved2 : DWORD;
property dwReserved2 : DWORD read getdwReserved2 write setdwReserved2;
procedure setdwReserved3(const val : DWORD);
function getdwReserved3 : DWORD;
property dwReserved3 : DWORD read getdwReserved3 write setdwReserved3;
end;
type __BOXRESULTS__Wrapper = class(TDCRecordWrapper)
private
fR : BOXRESULTS;
public
function GetRecordPtr : pointer; override;
published
procedure setindxBox(const val : UINT);
function getindxBox : UINT;
property indxBox : UINT read getindxBox write setindxBox;
procedure sethinksetBox(const val : HINKSET);
function gethinksetBox : HINKSET;
property hinksetBox : HINKSET read gethinksetBox write sethinksetBox;
end;
type __CALBSTRUCT__Wrapper = class(TDCRecordWrapper)
private
fR : CALBSTRUCT;
public
function GetRecordPtr : pointer; override;
published
procedure setwOffsetX(const val : Integer);
function getwOffsetX : Integer;
property wOffsetX : Integer read getwOffsetX write setwOffsetX;
procedure setwOffsetY(const val : Integer);
function getwOffsetY : Integer;
property wOffsetY : Integer read getwOffsetY write setwOffsetY;
procedure setwDistinctWidth(const val : Integer);
function getwDistinctWidth : Integer;
property wDistinctWidth : Integer read getwDistinctWidth write setwDistinctWidth;
procedure setwDistinctHeight(const val : Integer);
function getwDistinctHeight : Integer;
property wDistinctHeight : Integer read getwDistinctHeight write setwDistinctHeight;
end;
type __CTLINITBEDIT__Wrapper = class(TDCRecordWrapper)
private
fR : CTLINITBEDIT;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setid(const val : Integer);
function getid : Integer;
property id : Integer read getid write setid;
procedure setwSizeCategory(const val : Word);
function getwSizeCategory : Word;
property wSizeCategory : Word read getwSizeCategory write setwSizeCategory;
procedure setwFlags(const val : Word);
function getwFlags : Word;
property wFlags : Word read getwFlags write setwFlags;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
end;
type __CTLINITHEDIT__Wrapper = class(TDCRecordWrapper)
private
fR : CTLINITHEDIT;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setid(const val : Integer);
function getid : Integer;
property id : Integer read getid write setid;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
end;
type __CTLINITIEDIT__Wrapper = class(TDCRecordWrapper)
private
fR : CTLINITIEDIT;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setid(const val : Integer);
function getid : Integer;
property id : Integer read getid write setid;
procedure setieb(const val : Word);
function getieb : Word;
property ieb : Word read getieb write setieb;
procedure setiedo(const val : Word);
function getiedo : Word;
property iedo : Word read getiedo write setiedo;
procedure setiei(const val : Word);
function getiei : Word;
property iei : Word read getiei write setiei;
procedure setien(const val : Word);
function getien : Word;
property ien : Word read getien write setien;
procedure setierec(const val : Word);
function getierec : Word;
property ierec : Word read getierec write setierec;
procedure seties(const val : Word);
function geties : Word;
property ies : Word read geties write seties;
procedure setiesec(const val : Word);
function getiesec : Word;
property iesec : Word read getiesec write setiesec;
procedure setpdts(const val : Word);
function getpdts : Word;
property pdts : Word read getpdts write setpdts;
procedure sethpndt(const val : HPENDATA);
function gethpndt : HPENDATA;
property hpndt : HPENDATA read gethpndt write sethpndt;
procedure setwVGrid(const val : Word);
function getwVGrid : Word;
property wVGrid : Word read getwVGrid write setwVGrid;
procedure setwHGrid(const val : Word);
function getwHGrid : Word;
property wHGrid : Word read getwHGrid write setwHGrid;
procedure setdwApp(const val : DWORD);
function getdwApp : DWORD;
property dwApp : DWORD read getdwApp write setdwApp;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
end;
type __GUIDE__Wrapper = class(TDCRecordWrapper)
private
fR : GUIDE;
public
function GetRecordPtr : pointer; override;
published
procedure setxOrigin(const val : Integer);
function getxOrigin : Integer;
property xOrigin : Integer read getxOrigin write setxOrigin;
procedure setyOrigin(const val : Integer);
function getyOrigin : Integer;
property yOrigin : Integer read getyOrigin write setyOrigin;
procedure setcxBox(const val : Integer);
function getcxBox : Integer;
property cxBox : Integer read getcxBox write setcxBox;
procedure setcyBox(const val : Integer);
function getcyBox : Integer;
property cyBox : Integer read getcyBox write setcyBox;
procedure setcxBase(const val : Integer);
function getcxBase : Integer;
property cxBase : Integer read getcxBase write setcxBase;
procedure setcyBase(const val : Integer);
function getcyBase : Integer;
property cyBase : Integer read getcyBase write setcyBase;
procedure setcHorzBox(const val : Integer);
function getcHorzBox : Integer;
property cHorzBox : Integer read getcHorzBox write setcHorzBox;
procedure setcVertBox(const val : Integer);
function getcVertBox : Integer;
property cVertBox : Integer read getcVertBox write setcVertBox;
procedure setcyMid(const val : Integer);
function getcyMid : Integer;
property cyMid : Integer read getcyMid write setcyMid;
end;
type __IMECOLORS__Wrapper = class(TDCRecordWrapper)
private
fR : IMECOLORS;
public
function GetRecordPtr : pointer; override;
published
procedure setcColors(const val : Integer);
function getcColors : Integer;
property cColors : Integer read getcColors write setcColors;
end;
type __INKINGINFO__Wrapper = class(TDCRecordWrapper)
private
fR : INKINGINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setwFlags(const val : UINT);
function getwFlags : UINT;
property wFlags : UINT read getwFlags write setwFlags;
end;
type __INPPARAMS__Wrapper = class(TDCRecordWrapper)
private
fR : INPPARAMS;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure sethpndt(const val : HPENDATA);
function gethpndt : HPENDATA;
property hpndt : HPENDATA read gethpndt write sethpndt;
end;
type __INTERVAL__Wrapper = class(TDCRecordWrapper)
private
fR : INTERVAL;
public
function GetRecordPtr : pointer; override;
published
end;
type __OEMPENINFO__Wrapper = class(TDCRecordWrapper)
private
fR : OEMPENINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setwPdt(const val : UINT);
function getwPdt : UINT;
property wPdt : UINT read getwPdt write setwPdt;
procedure setwValueMax(const val : UINT);
function getwValueMax : UINT;
property wValueMax : UINT read getwValueMax write setwValueMax;
procedure setwDistinct(const val : UINT);
function getwDistinct : UINT;
property wDistinct : UINT read getwDistinct write setwDistinct;
end;
type __OEMPENPACKET__Wrapper = class(TDCRecordWrapper)
private
fR : OEMPENPACKET;
public
function GetRecordPtr : pointer; override;
published
procedure setwTabletX(const val : UINT);
function getwTabletX : UINT;
property wTabletX : UINT read getwTabletX write setwTabletX;
procedure setwTabletY(const val : UINT);
function getwTabletY : UINT;
property wTabletY : UINT read getwTabletY write setwTabletY;
procedure setwPdk(const val : UINT);
function getwPdk : UINT;
property wPdk : UINT read getwPdk write setwPdk;
procedure setdwTime(const val : DWORD);
function getdwTime : DWORD;
property dwTime : DWORD read getdwTime write setdwTime;
end;
type __PCMINFO__Wrapper = class(TDCRecordWrapper)
private
fR : PCMINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setdwPcm(const val : DWORD);
function getdwPcm : DWORD;
property dwPcm : DWORD read getdwPcm write setdwPcm;
procedure setdwTimeout(const val : DWORD);
function getdwTimeout : DWORD;
property dwTimeout : DWORD read getdwTimeout write setdwTimeout;
end;
type __PDEVENT__Wrapper = class(TDCRecordWrapper)
private
fR : PDEVENT;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setwm(const val : UINT);
function getwm : UINT;
property wm : UINT read getwm write setwm;
procedure setwParam(const val : wParam);
function getwParam : wParam;
property wParam : wParam read getwParam write setwParam;
procedure setLPARAM(const val : LPARAM);
function getLPARAM : LPARAM;
property LPARAM : LPARAM read getLPARAM write setLPARAM;
procedure setfPen(const val : BOOL);
function getfPen : BOOL;
property fPen : BOOL read getfPen write setfPen;
procedure setlExInfo(const val : Longint);
function getlExInfo : Longint;
property lExInfo : Longint read getlExInfo write setlExInfo;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
end;
type __PENDATAHEADER__Wrapper = class(TDCRecordWrapper)
private
fR : PENDATAHEADER;
public
function GetRecordPtr : pointer; override;
published
procedure setwVersion(const val : UINT);
function getwVersion : UINT;
property wVersion : UINT read getwVersion write setwVersion;
procedure setcbSizeUsed(const val : UINT);
function getcbSizeUsed : UINT;
property cbSizeUsed : UINT read getcbSizeUsed write setcbSizeUsed;
procedure setcStrokes(const val : UINT);
function getcStrokes : UINT;
property cStrokes : UINT read getcStrokes write setcStrokes;
procedure setcPnt(const val : UINT);
function getcPnt : UINT;
property cPnt : UINT read getcPnt write setcPnt;
procedure setcPntStrokeMax(const val : UINT);
function getcPntStrokeMax : UINT;
property cPntStrokeMax : UINT read getcPntStrokeMax write setcPntStrokeMax;
procedure setwPndts(const val : UINT);
function getwPndts : UINT;
property wPndts : UINT read getwPndts write setwPndts;
procedure setnInkWidth(const val : Integer);
function getnInkWidth : Integer;
property nInkWidth : Integer read getnInkWidth write setnInkWidth;
procedure setrgbInk(const val : DWORD);
function getrgbInk : DWORD;
property rgbInk : DWORD read getrgbInk write setrgbInk;
end;
type __PENINFO__Wrapper = class(TDCRecordWrapper)
private
fR : PENINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setcxRawWidth(const val : UINT);
function getcxRawWidth : UINT;
property cxRawWidth : UINT read getcxRawWidth write setcxRawWidth;
procedure setcyRawHeight(const val : UINT);
function getcyRawHeight : UINT;
property cyRawHeight : UINT read getcyRawHeight write setcyRawHeight;
procedure setwDistinctWidth(const val : UINT);
function getwDistinctWidth : UINT;
property wDistinctWidth : UINT read getwDistinctWidth write setwDistinctWidth;
procedure setwDistinctHeight(const val : UINT);
function getwDistinctHeight : UINT;
property wDistinctHeight : UINT read getwDistinctHeight write setwDistinctHeight;
procedure setnSamplingRate(const val : Integer);
function getnSamplingRate : Integer;
property nSamplingRate : Integer read getnSamplingRate write setnSamplingRate;
procedure setnSamplingDist(const val : Integer);
function getnSamplingDist : Integer;
property nSamplingDist : Integer read getnSamplingDist write setnSamplingDist;
procedure setlPdc(const val : Longint);
function getlPdc : Longint;
property lPdc : Longint read getlPdc write setlPdc;
procedure setcPens(const val : Integer);
function getcPens : Integer;
property cPens : Integer read getcPens write setcPens;
procedure setcbOemData(const val : Integer);
function getcbOemData : Integer;
property cbOemData : Integer read getcbOemData write setcbOemData;
procedure setfuOEM(const val : UINT);
function getfuOEM : UINT;
property fuOEM : UINT read getfuOEM write setfuOEM;
end;
type __PENPACKET__Wrapper = class(TDCRecordWrapper)
private
fR : PENPACKET;
public
function GetRecordPtr : pointer; override;
published
procedure setwTabletX(const val : UINT);
function getwTabletX : UINT;
property wTabletX : UINT read getwTabletX write setwTabletX;
procedure setwTabletY(const val : UINT);
function getwTabletY : UINT;
property wTabletY : UINT read getwTabletY write setwTabletY;
procedure setwPdk(const val : UINT);
function getwPdk : UINT;
property wPdk : UINT read getwPdk write setwPdk;
end;
type __PENTIP__Wrapper = class(TDCRecordWrapper)
private
fR : PENTIP;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setbtype(const val : Byte);
function getbtype : Byte;
property btype : Byte read getbtype write setbtype;
procedure setbwidth(const val : Byte);
function getbwidth : Byte;
property bwidth : Byte read getbwidth write setbwidth;
procedure setbheight(const val : Byte);
function getbheight : Byte;
property bheight : Byte read getbheight write setbheight;
procedure setbOpacity(const val : Byte);
function getbOpacity : Byte;
property bOpacity : Byte read getbOpacity write setbOpacity;
procedure setrgb(const val : COLORREF);
function getrgb : COLORREF;
property rgb : COLORREF read getrgb write setrgb;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
end;
type __RC__Wrapper = class(TDCRecordWrapper)
private
fR : RC;
public
function GetRecordPtr : pointer; override;
published
procedure setHREC(const val : HREC);
function getHREC : HREC;
property HREC : HREC read getHREC write setHREC;
procedure setwEventRef(const val : UINT);
function getwEventRef : UINT;
property wEventRef : UINT read getwEventRef write setwEventRef;
procedure setwRcPreferences(const val : UINT);
function getwRcPreferences : UINT;
property wRcPreferences : UINT read getwRcPreferences write setwRcPreferences;
procedure setlRcOptions(const val : Longint);
function getlRcOptions : Longint;
property lRcOptions : Longint read getlRcOptions write setlRcOptions;
procedure setwCountry(const val : UINT);
function getwCountry : UINT;
property wCountry : UINT read getwCountry write setwCountry;
procedure setwIntlPreferences(const val : UINT);
function getwIntlPreferences : UINT;
property wIntlPreferences : UINT read getwIntlPreferences write setwIntlPreferences;
procedure setwTryDictionary(const val : UINT);
function getwTryDictionary : UINT;
property wTryDictionary : UINT read getwTryDictionary write setwTryDictionary;
procedure setclErrorLevel(const val : CL);
function getclErrorLevel : CL;
property clErrorLevel : CL read getclErrorLevel write setclErrorLevel;
procedure setALC(const val : ALC);
function getALC : ALC;
property ALC : ALC read getALC write setALC;
procedure setalcPriority(const val : ALC);
function getalcPriority : ALC;
property alcPriority : ALC read getalcPriority write setalcPriority;
procedure setwResultMode(const val : UINT);
function getwResultMode : UINT;
property wResultMode : UINT read getwResultMode write setwResultMode;
procedure setwTimeOut(const val : UINT);
function getwTimeOut : UINT;
property wTimeOut : UINT read getwTimeOut write setwTimeOut;
procedure setlPcm(const val : Longint);
function getlPcm : Longint;
property lPcm : Longint read getlPcm write setlPcm;
procedure setwRcOrient(const val : UINT);
function getwRcOrient : UINT;
property wRcOrient : UINT read getwRcOrient write setwRcOrient;
procedure setwRcDirect(const val : UINT);
function getwRcDirect : UINT;
property wRcDirect : UINT read getwRcDirect write setwRcDirect;
procedure setnInkWidth(const val : Integer);
function getnInkWidth : Integer;
property nInkWidth : Integer read getnInkWidth write setnInkWidth;
procedure setrgbInk(const val : COLORREF);
function getrgbInk : COLORREF;
property rgbInk : COLORREF read getrgbInk write setrgbInk;
procedure setdwAppParam(const val : DWORD);
function getdwAppParam : DWORD;
property dwAppParam : DWORD read getdwAppParam write setdwAppParam;
procedure setdwDictParam(const val : DWORD);
function getdwDictParam : DWORD;
property dwDictParam : DWORD read getdwDictParam write setdwDictParam;
procedure setdwRecognizer(const val : DWORD);
function getdwRecognizer : DWORD;
property dwRecognizer : DWORD read getdwRecognizer write setdwRecognizer;
end;
type __RCRESULT__Wrapper = class(TDCRecordWrapper)
private
fR : RCRESULT;
public
function GetRecordPtr : pointer; override;
published
procedure setwResultsType(const val : UINT);
function getwResultsType : UINT;
property wResultsType : UINT read getwResultsType write setwResultsType;
procedure setcSyv(const val : Integer);
function getcSyv : Integer;
property cSyv : Integer read getcSyv write setcSyv;
procedure sethSyv(const val : THandle);
function gethSyv : THandle;
property hSyv : THandle read gethSyv write sethSyv;
procedure setnBaseLine(const val : Integer);
function getnBaseLine : Integer;
property nBaseLine : Integer read getnBaseLine write setnBaseLine;
procedure setnMidLine(const val : Integer);
function getnMidLine : Integer;
property nMidLine : Integer read getnMidLine write setnMidLine;
procedure setHPENDATA(const val : HPENDATA);
function getHPENDATA : HPENDATA;
property HPENDATA : HPENDATA read getHPENDATA write setHPENDATA;
end;
type __RECTOFS__Wrapper = class(TDCRecordWrapper)
private
fR : RECTOFS;
public
function GetRecordPtr : pointer; override;
published
procedure setdLeft(const val : Integer);
function getdLeft : Integer;
property dLeft : Integer read getdLeft write setdLeft;
procedure setdTop(const val : Integer);
function getdTop : Integer;
property dTop : Integer read getdTop write setdTop;
procedure setdRight(const val : Integer);
function getdRight : Integer;
property dRight : Integer read getdRight write setdRight;
procedure setdBottom(const val : Integer);
function getdBottom : Integer;
property dBottom : Integer read getdBottom write setdBottom;
end;
type __SKBINFO__Wrapper = class(TDCRecordWrapper)
private
fR : SKBINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setnPad(const val : Word);
function getnPad : Word;
property nPad : Word read getnPad write setnPad;
procedure setfVisible(const val : BOOL);
function getfVisible : BOOL;
property fVisible : BOOL read getfVisible write setfVisible;
procedure setfMinimized(const val : BOOL);
function getfMinimized : BOOL;
property fMinimized : BOOL read getfMinimized write setfMinimized;
procedure setdwReserved(const val : Longint);
function getdwReserved : Longint;
property dwReserved : Longint read getdwReserved write setdwReserved;
end;
type __STRKFMT__Wrapper = class(TDCRecordWrapper)
private
fR : STRKFMT;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setiesf(const val : UINT);
function getiesf : UINT;
property iesf : UINT read getiesf write setiesf;
procedure setiStrk(const val : UINT);
function getiStrk : UINT;
property iStrk : UINT read getiStrk write setiStrk;
procedure setdwUser(const val : DWORD);
function getdwUser : DWORD;
property dwUser : DWORD read getdwUser write setdwUser;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
end;
type __STROKEINFO__Wrapper = class(TDCRecordWrapper)
private
fR : STROKEINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setcPnt(const val : UINT);
function getcPnt : UINT;
property cPnt : UINT read getcPnt write setcPnt;
procedure setcbPnts(const val : UINT);
function getcbPnts : UINT;
property cbPnts : UINT read getcbPnts write setcbPnts;
procedure setwPdk(const val : UINT);
function getwPdk : UINT;
property wPdk : UINT read getwPdk write setwPdk;
procedure setdwTick(const val : DWORD);
function getdwTick : DWORD;
property dwTick : DWORD read getdwTick write setdwTick;
end;
type __SYC__Wrapper = class(TDCRecordWrapper)
private
fR : SYC;
public
function GetRecordPtr : pointer; override;
published
procedure setwStrokeFirst(const val : UINT);
function getwStrokeFirst : UINT;
property wStrokeFirst : UINT read getwStrokeFirst write setwStrokeFirst;
procedure setwPntFirst(const val : UINT);
function getwPntFirst : UINT;
property wPntFirst : UINT read getwPntFirst write setwPntFirst;
procedure setwStrokeLast(const val : UINT);
function getwStrokeLast : UINT;
property wStrokeLast : UINT read getwStrokeLast write setwStrokeLast;
procedure setwPntLast(const val : UINT);
function getwPntLast : UINT;
property wPntLast : UINT read getwPntLast write setwPntLast;
procedure setfLastSyc(const val : BOOL);
function getfLastSyc : BOOL;
property fLastSyc : BOOL read getfLastSyc write setfLastSyc;
end;
type __SYE__Wrapper = class(TDCRecordWrapper)
private
fR : SYE;
public
function GetRecordPtr : pointer; override;
published
procedure setSYV(const val : SYV);
function getSYV : SYV;
property SYV : SYV read getSYV write setSYV;
procedure setlRecogVal(const val : Longint);
function getlRecogVal : Longint;
property lRecogVal : Longint read getlRecogVal write setlRecogVal;
procedure setCL(const val : CL);
function getCL : CL;
property CL : CL read getCL write setCL;
procedure setiSyc(const val : Integer);
function getiSyc : Integer;
property iSyc : Integer read getiSyc write setiSyc;
end;
type __SYG__Wrapper = class(TDCRecordWrapper)
private
fR : SYG;
public
function GetRecordPtr : pointer; override;
published
procedure setcHotSpot(const val : Integer);
function getcHotSpot : Integer;
property cHotSpot : Integer read getcHotSpot write setcHotSpot;
procedure setnFirstBox(const val : Integer);
function getnFirstBox : Integer;
property nFirstBox : Integer read getnFirstBox write setnFirstBox;
procedure setlRecogVal(const val : Longint);
function getlRecogVal : Longint;
property lRecogVal : Longint read getlRecogVal write setlRecogVal;
procedure setcSye(const val : Integer);
function getcSye : Integer;
property cSye : Integer read getcSye write setcSye;
procedure setcSyc(const val : Integer);
function getcSyc : Integer;
property cSyc : Integer read getcSyc write setcSyc;
end;
type __TAbsTime__Wrapper = class(TDCRecordWrapper)
private
fR : TAbsTime;
public
function GetRecordPtr : pointer; override;
published
procedure setsec(const val : DWORD);
function getsec : DWORD;
property sec : DWORD read getsec write setsec;
procedure setms(const val : UINT);
function getms : UINT;
property ms : UINT read getms write setms;
end;
type __tagABSTIME__Wrapper = class(TDCRecordWrapper)
private
fR : tagABSTIME;
public
function GetRecordPtr : pointer; override;
published
procedure setsec(const val : DWORD);
function getsec : DWORD;
property sec : DWORD read getsec write setsec;
procedure setms(const val : UINT);
function getms : UINT;
property ms : UINT read getms write setms;
end;
type __tagANIMATEINFO__Wrapper = class(TDCRecordWrapper)
private
fR : tagANIMATEINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setuSpeedPct(const val : UINT);
function getuSpeedPct : UINT;
property uSpeedPct : UINT read getuSpeedPct write setuSpeedPct;
procedure setuPeriodCB(const val : UINT);
function getuPeriodCB : UINT;
property uPeriodCB : UINT read getuPeriodCB write setuPeriodCB;
procedure setfuFlags(const val : UINT);
function getfuFlags : UINT;
property fuFlags : UINT read getfuFlags write setfuFlags;
procedure setLPARAM(const val : LPARAM);
function getLPARAM : LPARAM;
property LPARAM : LPARAM read getLPARAM write setLPARAM;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
end;
type __tagBOXEDITINFO__Wrapper = class(TDCRecordWrapper)
private
fR : tagBOXEDITINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setcxBox(const val : Integer);
function getcxBox : Integer;
property cxBox : Integer read getcxBox write setcxBox;
procedure setcyBox(const val : Integer);
function getcyBox : Integer;
property cyBox : Integer read getcyBox write setcyBox;
procedure setcxBase(const val : Integer);
function getcxBase : Integer;
property cxBase : Integer read getcxBase write setcxBase;
procedure setcyBase(const val : Integer);
function getcyBase : Integer;
property cyBase : Integer read getcyBase write setcyBase;
procedure setcyMid(const val : Integer);
function getcyMid : Integer;
property cyMid : Integer read getcyMid write setcyMid;
procedure setwFlags(const val : UINT);
function getwFlags : UINT;
property wFlags : UINT read getwFlags write setwFlags;
procedure setwFontHeight(const val : UINT);
function getwFontHeight : UINT;
property wFontHeight : UINT read getwFontHeight write setwFontHeight;
end;
type __tagBOXLAYOUT__Wrapper = class(TDCRecordWrapper)
private
fR : tagBOXLAYOUT;
public
function GetRecordPtr : pointer; override;
published
procedure setcyCusp(const val : Integer);
function getcyCusp : Integer;
property cyCusp : Integer read getcyCusp write setcyCusp;
procedure setcyEndCusp(const val : Integer);
function getcyEndCusp : Integer;
property cyEndCusp : Integer read getcyEndCusp write setcyEndCusp;
procedure setstyle(const val : UINT);
function getstyle : UINT;
property style : UINT read getstyle write setstyle;
procedure setdwReserved1(const val : DWORD);
function getdwReserved1 : DWORD;
property dwReserved1 : DWORD read getdwReserved1 write setdwReserved1;
procedure setdwReserved2(const val : DWORD);
function getdwReserved2 : DWORD;
property dwReserved2 : DWORD read getdwReserved2 write setdwReserved2;
procedure setdwReserved3(const val : DWORD);
function getdwReserved3 : DWORD;
property dwReserved3 : DWORD read getdwReserved3 write setdwReserved3;
end;
type __tagBOXRESULTS__Wrapper = class(TDCRecordWrapper)
private
fR : tagBOXRESULTS;
public
function GetRecordPtr : pointer; override;
published
procedure setindxBox(const val : UINT);
function getindxBox : UINT;
property indxBox : UINT read getindxBox write setindxBox;
procedure sethinksetBox(const val : HINKSET);
function gethinksetBox : HINKSET;
property hinksetBox : HINKSET read gethinksetBox write sethinksetBox;
end;
type __tagCALBSTRUCT__Wrapper = class(TDCRecordWrapper)
private
fR : tagCALBSTRUCT;
public
function GetRecordPtr : pointer; override;
published
procedure setwOffsetX(const val : Integer);
function getwOffsetX : Integer;
property wOffsetX : Integer read getwOffsetX write setwOffsetX;
procedure setwOffsetY(const val : Integer);
function getwOffsetY : Integer;
property wOffsetY : Integer read getwOffsetY write setwOffsetY;
procedure setwDistinctWidth(const val : Integer);
function getwDistinctWidth : Integer;
property wDistinctWidth : Integer read getwDistinctWidth write setwDistinctWidth;
procedure setwDistinctHeight(const val : Integer);
function getwDistinctHeight : Integer;
property wDistinctHeight : Integer read getwDistinctHeight write setwDistinctHeight;
end;
type __tagCTLINITBEDIT__Wrapper = class(TDCRecordWrapper)
private
fR : tagCTLINITBEDIT;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setid(const val : Integer);
function getid : Integer;
property id : Integer read getid write setid;
procedure setwSizeCategory(const val : Word);
function getwSizeCategory : Word;
property wSizeCategory : Word read getwSizeCategory write setwSizeCategory;
procedure setwFlags(const val : Word);
function getwFlags : Word;
property wFlags : Word read getwFlags write setwFlags;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
end;
type __tagCTLINITHEDIT__Wrapper = class(TDCRecordWrapper)
private
fR : tagCTLINITHEDIT;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setid(const val : Integer);
function getid : Integer;
property id : Integer read getid write setid;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
end;
type __tagCTLINITIEDIT__Wrapper = class(TDCRecordWrapper)
private
fR : tagCTLINITIEDIT;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setid(const val : Integer);
function getid : Integer;
property id : Integer read getid write setid;
procedure setieb(const val : Word);
function getieb : Word;
property ieb : Word read getieb write setieb;
procedure setiedo(const val : Word);
function getiedo : Word;
property iedo : Word read getiedo write setiedo;
procedure setiei(const val : Word);
function getiei : Word;
property iei : Word read getiei write setiei;
procedure setien(const val : Word);
function getien : Word;
property ien : Word read getien write setien;
procedure setierec(const val : Word);
function getierec : Word;
property ierec : Word read getierec write setierec;
procedure seties(const val : Word);
function geties : Word;
property ies : Word read geties write seties;
procedure setiesec(const val : Word);
function getiesec : Word;
property iesec : Word read getiesec write setiesec;
procedure setpdts(const val : Word);
function getpdts : Word;
property pdts : Word read getpdts write setpdts;
procedure sethpndt(const val : HPENDATA);
function gethpndt : HPENDATA;
property hpndt : HPENDATA read gethpndt write sethpndt;
procedure setwVGrid(const val : Word);
function getwVGrid : Word;
property wVGrid : Word read getwVGrid write setwVGrid;
procedure setwHGrid(const val : Word);
function getwHGrid : Word;
property wHGrid : Word read getwHGrid write setwHGrid;
procedure setdwApp(const val : DWORD);
function getdwApp : DWORD;
property dwApp : DWORD read getdwApp write setdwApp;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
end;
type __tagGUIDE__Wrapper = class(TDCRecordWrapper)
private
fR : tagGUIDE;
public
function GetRecordPtr : pointer; override;
published
procedure setxOrigin(const val : Integer);
function getxOrigin : Integer;
property xOrigin : Integer read getxOrigin write setxOrigin;
procedure setyOrigin(const val : Integer);
function getyOrigin : Integer;
property yOrigin : Integer read getyOrigin write setyOrigin;
procedure setcxBox(const val : Integer);
function getcxBox : Integer;
property cxBox : Integer read getcxBox write setcxBox;
procedure setcyBox(const val : Integer);
function getcyBox : Integer;
property cyBox : Integer read getcyBox write setcyBox;
procedure setcxBase(const val : Integer);
function getcxBase : Integer;
property cxBase : Integer read getcxBase write setcxBase;
procedure setcyBase(const val : Integer);
function getcyBase : Integer;
property cyBase : Integer read getcyBase write setcyBase;
procedure setcHorzBox(const val : Integer);
function getcHorzBox : Integer;
property cHorzBox : Integer read getcHorzBox write setcHorzBox;
procedure setcVertBox(const val : Integer);
function getcVertBox : Integer;
property cVertBox : Integer read getcVertBox write setcVertBox;
procedure setcyMid(const val : Integer);
function getcyMid : Integer;
property cyMid : Integer read getcyMid write setcyMid;
end;
type __tagIMECOLORS__Wrapper = class(TDCRecordWrapper)
private
fR : tagIMECOLORS;
public
function GetRecordPtr : pointer; override;
published
procedure setcColors(const val : Integer);
function getcColors : Integer;
property cColors : Integer read getcColors write setcColors;
end;
type __tagINKINGINFO__Wrapper = class(TDCRecordWrapper)
private
fR : tagINKINGINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setwFlags(const val : UINT);
function getwFlags : UINT;
property wFlags : UINT read getwFlags write setwFlags;
end;
type __tagINPPARAMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagINPPARAMS;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure sethpndt(const val : HPENDATA);
function gethpndt : HPENDATA;
property hpndt : HPENDATA read gethpndt write sethpndt;
end;
type __tagINTERVAL__Wrapper = class(TDCRecordWrapper)
private
fR : tagINTERVAL;
public
function GetRecordPtr : pointer; override;
published
end;
type __tagOEMPENINFO__Wrapper = class(TDCRecordWrapper)
private
fR : tagOEMPENINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setwPdt(const val : UINT);
function getwPdt : UINT;
property wPdt : UINT read getwPdt write setwPdt;
procedure setwValueMax(const val : UINT);
function getwValueMax : UINT;
property wValueMax : UINT read getwValueMax write setwValueMax;
procedure setwDistinct(const val : UINT);
function getwDistinct : UINT;
property wDistinct : UINT read getwDistinct write setwDistinct;
end;
type __tagOEMPENPACKET__Wrapper = class(TDCRecordWrapper)
private
fR : tagOEMPENPACKET;
public
function GetRecordPtr : pointer; override;
published
procedure setwTabletX(const val : UINT);
function getwTabletX : UINT;
property wTabletX : UINT read getwTabletX write setwTabletX;
procedure setwTabletY(const val : UINT);
function getwTabletY : UINT;
property wTabletY : UINT read getwTabletY write setwTabletY;
procedure setwPdk(const val : UINT);
function getwPdk : UINT;
property wPdk : UINT read getwPdk write setwPdk;
procedure setdwTime(const val : DWORD);
function getdwTime : DWORD;
property dwTime : DWORD read getdwTime write setdwTime;
end;
type __tagPCMINFO__Wrapper = class(TDCRecordWrapper)
private
fR : tagPCMINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setdwPcm(const val : DWORD);
function getdwPcm : DWORD;
property dwPcm : DWORD read getdwPcm write setdwPcm;
procedure setdwTimeout(const val : DWORD);
function getdwTimeout : DWORD;
property dwTimeout : DWORD read getdwTimeout write setdwTimeout;
end;
type __tagPDEVENT__Wrapper = class(TDCRecordWrapper)
private
fR : tagPDEVENT;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setwm(const val : UINT);
function getwm : UINT;
property wm : UINT read getwm write setwm;
procedure setwParam(const val : wParam);
function getwParam : wParam;
property wParam : wParam read getwParam write setwParam;
procedure setLPARAM(const val : LPARAM);
function getLPARAM : LPARAM;
property LPARAM : LPARAM read getLPARAM write setLPARAM;
procedure setfPen(const val : BOOL);
function getfPen : BOOL;
property fPen : BOOL read getfPen write setfPen;
procedure setlExInfo(const val : Longint);
function getlExInfo : Longint;
property lExInfo : Longint read getlExInfo write setlExInfo;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
end;
type __tagPENDATAHEADER__Wrapper = class(TDCRecordWrapper)
private
fR : tagPENDATAHEADER;
public
function GetRecordPtr : pointer; override;
published
procedure setwVersion(const val : UINT);
function getwVersion : UINT;
property wVersion : UINT read getwVersion write setwVersion;
procedure setcbSizeUsed(const val : UINT);
function getcbSizeUsed : UINT;
property cbSizeUsed : UINT read getcbSizeUsed write setcbSizeUsed;
procedure setcStrokes(const val : UINT);
function getcStrokes : UINT;
property cStrokes : UINT read getcStrokes write setcStrokes;
procedure setcPnt(const val : UINT);
function getcPnt : UINT;
property cPnt : UINT read getcPnt write setcPnt;
procedure setcPntStrokeMax(const val : UINT);
function getcPntStrokeMax : UINT;
property cPntStrokeMax : UINT read getcPntStrokeMax write setcPntStrokeMax;
procedure setwPndts(const val : UINT);
function getwPndts : UINT;
property wPndts : UINT read getwPndts write setwPndts;
procedure setnInkWidth(const val : Integer);
function getnInkWidth : Integer;
property nInkWidth : Integer read getnInkWidth write setnInkWidth;
procedure setrgbInk(const val : DWORD);
function getrgbInk : DWORD;
property rgbInk : DWORD read getrgbInk write setrgbInk;
end;
type __tagPENINFO__Wrapper = class(TDCRecordWrapper)
private
fR : tagPENINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setcxRawWidth(const val : UINT);
function getcxRawWidth : UINT;
property cxRawWidth : UINT read getcxRawWidth write setcxRawWidth;
procedure setcyRawHeight(const val : UINT);
function getcyRawHeight : UINT;
property cyRawHeight : UINT read getcyRawHeight write setcyRawHeight;
procedure setwDistinctWidth(const val : UINT);
function getwDistinctWidth : UINT;
property wDistinctWidth : UINT read getwDistinctWidth write setwDistinctWidth;
procedure setwDistinctHeight(const val : UINT);
function getwDistinctHeight : UINT;
property wDistinctHeight : UINT read getwDistinctHeight write setwDistinctHeight;
procedure setnSamplingRate(const val : Integer);
function getnSamplingRate : Integer;
property nSamplingRate : Integer read getnSamplingRate write setnSamplingRate;
procedure setnSamplingDist(const val : Integer);
function getnSamplingDist : Integer;
property nSamplingDist : Integer read getnSamplingDist write setnSamplingDist;
procedure setlPdc(const val : Longint);
function getlPdc : Longint;
property lPdc : Longint read getlPdc write setlPdc;
procedure setcPens(const val : Integer);
function getcPens : Integer;
property cPens : Integer read getcPens write setcPens;
procedure setcbOemData(const val : Integer);
function getcbOemData : Integer;
property cbOemData : Integer read getcbOemData write setcbOemData;
procedure setfuOEM(const val : UINT);
function getfuOEM : UINT;
property fuOEM : UINT read getfuOEM write setfuOEM;
end;
type __tagPENPACKET__Wrapper = class(TDCRecordWrapper)
private
fR : tagPENPACKET;
public
function GetRecordPtr : pointer; override;
published
procedure setwTabletX(const val : UINT);
function getwTabletX : UINT;
property wTabletX : UINT read getwTabletX write setwTabletX;
procedure setwTabletY(const val : UINT);
function getwTabletY : UINT;
property wTabletY : UINT read getwTabletY write setwTabletY;
procedure setwPdk(const val : UINT);
function getwPdk : UINT;
property wPdk : UINT read getwPdk write setwPdk;
end;
type __tagPENTIP__Wrapper = class(TDCRecordWrapper)
private
fR : tagPENTIP;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setbtype(const val : Byte);
function getbtype : Byte;
property btype : Byte read getbtype write setbtype;
procedure setbwidth(const val : Byte);
function getbwidth : Byte;
property bwidth : Byte read getbwidth write setbwidth;
procedure setbheight(const val : Byte);
function getbheight : Byte;
property bheight : Byte read getbheight write setbheight;
procedure setbOpacity(const val : Byte);
function getbOpacity : Byte;
property bOpacity : Byte read getbOpacity write setbOpacity;
procedure setrgb(const val : COLORREF);
function getrgb : COLORREF;
property rgb : COLORREF read getrgb write setrgb;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
end;
type __tagRC__Wrapper = class(TDCRecordWrapper)
private
fR : tagRC;
public
function GetRecordPtr : pointer; override;
published
procedure setHREC(const val : HREC);
function getHREC : HREC;
property HREC : HREC read getHREC write setHREC;
procedure setwEventRef(const val : UINT);
function getwEventRef : UINT;
property wEventRef : UINT read getwEventRef write setwEventRef;
procedure setwRcPreferences(const val : UINT);
function getwRcPreferences : UINT;
property wRcPreferences : UINT read getwRcPreferences write setwRcPreferences;
procedure setlRcOptions(const val : Longint);
function getlRcOptions : Longint;
property lRcOptions : Longint read getlRcOptions write setlRcOptions;
procedure setwCountry(const val : UINT);
function getwCountry : UINT;
property wCountry : UINT read getwCountry write setwCountry;
procedure setwIntlPreferences(const val : UINT);
function getwIntlPreferences : UINT;
property wIntlPreferences : UINT read getwIntlPreferences write setwIntlPreferences;
procedure setwTryDictionary(const val : UINT);
function getwTryDictionary : UINT;
property wTryDictionary : UINT read getwTryDictionary write setwTryDictionary;
procedure setclErrorLevel(const val : CL);
function getclErrorLevel : CL;
property clErrorLevel : CL read getclErrorLevel write setclErrorLevel;
procedure setALC(const val : ALC);
function getALC : ALC;
property ALC : ALC read getALC write setALC;
procedure setalcPriority(const val : ALC);
function getalcPriority : ALC;
property alcPriority : ALC read getalcPriority write setalcPriority;
procedure setwResultMode(const val : UINT);
function getwResultMode : UINT;
property wResultMode : UINT read getwResultMode write setwResultMode;
procedure setwTimeOut(const val : UINT);
function getwTimeOut : UINT;
property wTimeOut : UINT read getwTimeOut write setwTimeOut;
procedure setlPcm(const val : Longint);
function getlPcm : Longint;
property lPcm : Longint read getlPcm write setlPcm;
procedure setwRcOrient(const val : UINT);
function getwRcOrient : UINT;
property wRcOrient : UINT read getwRcOrient write setwRcOrient;
procedure setwRcDirect(const val : UINT);
function getwRcDirect : UINT;
property wRcDirect : UINT read getwRcDirect write setwRcDirect;
procedure setnInkWidth(const val : Integer);
function getnInkWidth : Integer;
property nInkWidth : Integer read getnInkWidth write setnInkWidth;
procedure setrgbInk(const val : COLORREF);
function getrgbInk : COLORREF;
property rgbInk : COLORREF read getrgbInk write setrgbInk;
procedure setdwAppParam(const val : DWORD);
function getdwAppParam : DWORD;
property dwAppParam : DWORD read getdwAppParam write setdwAppParam;
procedure setdwDictParam(const val : DWORD);
function getdwDictParam : DWORD;
property dwDictParam : DWORD read getdwDictParam write setdwDictParam;
procedure setdwRecognizer(const val : DWORD);
function getdwRecognizer : DWORD;
property dwRecognizer : DWORD read getdwRecognizer write setdwRecognizer;
end;
type __tagRCRESULT__Wrapper = class(TDCRecordWrapper)
private
fR : tagRCRESULT;
public
function GetRecordPtr : pointer; override;
published
procedure setwResultsType(const val : UINT);
function getwResultsType : UINT;
property wResultsType : UINT read getwResultsType write setwResultsType;
procedure setcSyv(const val : Integer);
function getcSyv : Integer;
property cSyv : Integer read getcSyv write setcSyv;
procedure sethSyv(const val : THandle);
function gethSyv : THandle;
property hSyv : THandle read gethSyv write sethSyv;
procedure setnBaseLine(const val : Integer);
function getnBaseLine : Integer;
property nBaseLine : Integer read getnBaseLine write setnBaseLine;
procedure setnMidLine(const val : Integer);
function getnMidLine : Integer;
property nMidLine : Integer read getnMidLine write setnMidLine;
procedure setHPENDATA(const val : HPENDATA);
function getHPENDATA : HPENDATA;
property HPENDATA : HPENDATA read getHPENDATA write setHPENDATA;
end;
type __tagRECTOFS__Wrapper = class(TDCRecordWrapper)
private
fR : tagRECTOFS;
public
function GetRecordPtr : pointer; override;
published
procedure setdLeft(const val : Integer);
function getdLeft : Integer;
property dLeft : Integer read getdLeft write setdLeft;
procedure setdTop(const val : Integer);
function getdTop : Integer;
property dTop : Integer read getdTop write setdTop;
procedure setdRight(const val : Integer);
function getdRight : Integer;
property dRight : Integer read getdRight write setdRight;
procedure setdBottom(const val : Integer);
function getdBottom : Integer;
property dBottom : Integer read getdBottom write setdBottom;
end;
type __tagSKBINFO__Wrapper = class(TDCRecordWrapper)
private
fR : tagSKBINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setnPad(const val : Word);
function getnPad : Word;
property nPad : Word read getnPad write setnPad;
procedure setfVisible(const val : BOOL);
function getfVisible : BOOL;
property fVisible : BOOL read getfVisible write setfVisible;
procedure setfMinimized(const val : BOOL);
function getfMinimized : BOOL;
property fMinimized : BOOL read getfMinimized write setfMinimized;
procedure setdwReserved(const val : Longint);
function getdwReserved : Longint;
property dwReserved : Longint read getdwReserved write setdwReserved;
end;
type __tagSTRKFMT__Wrapper = class(TDCRecordWrapper)
private
fR : tagSTRKFMT;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setiesf(const val : UINT);
function getiesf : UINT;
property iesf : UINT read getiesf write setiesf;
procedure setiStrk(const val : UINT);
function getiStrk : UINT;
property iStrk : UINT read getiStrk write setiStrk;
procedure setdwUser(const val : DWORD);
function getdwUser : DWORD;
property dwUser : DWORD read getdwUser write setdwUser;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
end;
type __tagSTROKEINFO__Wrapper = class(TDCRecordWrapper)
private
fR : tagSTROKEINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setcPnt(const val : UINT);
function getcPnt : UINT;
property cPnt : UINT read getcPnt write setcPnt;
procedure setcbPnts(const val : UINT);
function getcbPnts : UINT;
property cbPnts : UINT read getcbPnts write setcbPnts;
procedure setwPdk(const val : UINT);
function getwPdk : UINT;
property wPdk : UINT read getwPdk write setwPdk;
procedure setdwTick(const val : DWORD);
function getdwTick : DWORD;
property dwTick : DWORD read getdwTick write setdwTick;
end;
type __tagSYC__Wrapper = class(TDCRecordWrapper)
private
fR : tagSYC;
public
function GetRecordPtr : pointer; override;
published
procedure setwStrokeFirst(const val : UINT);
function getwStrokeFirst : UINT;
property wStrokeFirst : UINT read getwStrokeFirst write setwStrokeFirst;
procedure setwPntFirst(const val : UINT);
function getwPntFirst : UINT;
property wPntFirst : UINT read getwPntFirst write setwPntFirst;
procedure setwStrokeLast(const val : UINT);
function getwStrokeLast : UINT;
property wStrokeLast : UINT read getwStrokeLast write setwStrokeLast;
procedure setwPntLast(const val : UINT);
function getwPntLast : UINT;
property wPntLast : UINT read getwPntLast write setwPntLast;
procedure setfLastSyc(const val : BOOL);
function getfLastSyc : BOOL;
property fLastSyc : BOOL read getfLastSyc write setfLastSyc;
end;
type __tagSYE__Wrapper = class(TDCRecordWrapper)
private
fR : tagSYE;
public
function GetRecordPtr : pointer; override;
published
procedure setSYV(const val : SYV);
function getSYV : SYV;
property SYV : SYV read getSYV write setSYV;
procedure setlRecogVal(const val : Longint);
function getlRecogVal : Longint;
property lRecogVal : Longint read getlRecogVal write setlRecogVal;
procedure setCL(const val : CL);
function getCL : CL;
property CL : CL read getCL write setCL;
procedure setiSyc(const val : Integer);
function getiSyc : Integer;
property iSyc : Integer read getiSyc write setiSyc;
end;
type __tagSYG__Wrapper = class(TDCRecordWrapper)
private
fR : tagSYG;
public
function GetRecordPtr : pointer; override;
published
procedure setcHotSpot(const val : Integer);
function getcHotSpot : Integer;
property cHotSpot : Integer read getcHotSpot write setcHotSpot;
procedure setnFirstBox(const val : Integer);
function getnFirstBox : Integer;
property nFirstBox : Integer read getnFirstBox write setnFirstBox;
procedure setlRecogVal(const val : Longint);
function getlRecogVal : Longint;
property lRecogVal : Longint read getlRecogVal write setlRecogVal;
procedure setcSye(const val : Integer);
function getcSye : Integer;
property cSye : Integer read getcSye write setcSye;
procedure setcSyc(const val : Integer);
function getcSyc : Integer;
property cSyc : Integer read getcSyc write setcSyc;
end;
type __tagTARGET__Wrapper = class(TDCRecordWrapper)
private
fR : tagTARGET;
public
function GetRecordPtr : pointer; override;
published
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setidTarget(const val : DWORD);
function getidTarget : DWORD;
property idTarget : DWORD read getidTarget write setidTarget;
procedure sethtrgTarget(const val : HTRG);
function gethtrgTarget : HTRG;
property htrgTarget : HTRG read gethtrgTarget write sethtrgTarget;
procedure setdwData(const val : DWORD);
function getdwData : DWORD;
property dwData : DWORD read getdwData write setdwData;
end;
type __tagTARGINFO__Wrapper = class(TDCRecordWrapper)
private
fR : tagTARGINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure sethtrgOwner(const val : HTRG);
function gethtrgOwner : HTRG;
property htrgOwner : HTRG read gethtrgOwner write sethtrgOwner;
procedure setcTargets(const val : Word);
function getcTargets : Word;
property cTargets : Word read getcTargets write setcTargets;
procedure setiTargetLast(const val : Word);
function getiTargetLast : Word;
property iTargetLast : Word read getiTargetLast write setiTargetLast;
end;
type __TAnimateInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TAnimateInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setuSpeedPct(const val : UINT);
function getuSpeedPct : UINT;
property uSpeedPct : UINT read getuSpeedPct write setuSpeedPct;
procedure setuPeriodCB(const val : UINT);
function getuPeriodCB : UINT;
property uPeriodCB : UINT read getuPeriodCB write setuPeriodCB;
procedure setfuFlags(const val : UINT);
function getfuFlags : UINT;
property fuFlags : UINT read getfuFlags write setfuFlags;
procedure setLPARAM(const val : LPARAM);
function getLPARAM : LPARAM;
property LPARAM : LPARAM read getLPARAM write setLPARAM;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
end;
type __TARGET__Wrapper = class(TDCRecordWrapper)
private
fR : TARGET;
public
function GetRecordPtr : pointer; override;
published
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setidTarget(const val : DWORD);
function getidTarget : DWORD;
property idTarget : DWORD read getidTarget write setidTarget;
procedure sethtrgTarget(const val : HTRG);
function gethtrgTarget : HTRG;
property htrgTarget : HTRG read gethtrgTarget write sethtrgTarget;
procedure setdwData(const val : DWORD);
function getdwData : DWORD;
property dwData : DWORD read getdwData write setdwData;
end;
type __TARGINFO__Wrapper = class(TDCRecordWrapper)
private
fR : TARGINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure sethtrgOwner(const val : HTRG);
function gethtrgOwner : HTRG;
property htrgOwner : HTRG read gethtrgOwner write sethtrgOwner;
procedure setcTargets(const val : Word);
function getcTargets : Word;
property cTargets : Word read getcTargets write setcTargets;
procedure setiTargetLast(const val : Word);
function getiTargetLast : Word;
property iTargetLast : Word read getiTargetLast write setiTargetLast;
end;
type __TBoxEditInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TBoxEditInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setcxBox(const val : Integer);
function getcxBox : Integer;
property cxBox : Integer read getcxBox write setcxBox;
procedure setcyBox(const val : Integer);
function getcyBox : Integer;
property cyBox : Integer read getcyBox write setcyBox;
procedure setcxBase(const val : Integer);
function getcxBase : Integer;
property cxBase : Integer read getcxBase write setcxBase;
procedure setcyBase(const val : Integer);
function getcyBase : Integer;
property cyBase : Integer read getcyBase write setcyBase;
procedure setcyMid(const val : Integer);
function getcyMid : Integer;
property cyMid : Integer read getcyMid write setcyMid;
procedure setwFlags(const val : UINT);
function getwFlags : UINT;
property wFlags : UINT read getwFlags write setwFlags;
procedure setwFontHeight(const val : UINT);
function getwFontHeight : UINT;
property wFontHeight : UINT read getwFontHeight write setwFontHeight;
end;
type __TBoxLayout__Wrapper = class(TDCRecordWrapper)
private
fR : TBoxLayout;
public
function GetRecordPtr : pointer; override;
published
procedure setcyCusp(const val : Integer);
function getcyCusp : Integer;
property cyCusp : Integer read getcyCusp write setcyCusp;
procedure setcyEndCusp(const val : Integer);
function getcyEndCusp : Integer;
property cyEndCusp : Integer read getcyEndCusp write setcyEndCusp;
procedure setstyle(const val : UINT);
function getstyle : UINT;
property style : UINT read getstyle write setstyle;
procedure setdwReserved1(const val : DWORD);
function getdwReserved1 : DWORD;
property dwReserved1 : DWORD read getdwReserved1 write setdwReserved1;
procedure setdwReserved2(const val : DWORD);
function getdwReserved2 : DWORD;
property dwReserved2 : DWORD read getdwReserved2 write setdwReserved2;
procedure setdwReserved3(const val : DWORD);
function getdwReserved3 : DWORD;
property dwReserved3 : DWORD read getdwReserved3 write setdwReserved3;
end;
type __TBoxResults__Wrapper = class(TDCRecordWrapper)
private
fR : TBoxResults;
public
function GetRecordPtr : pointer; override;
published
procedure setindxBox(const val : UINT);
function getindxBox : UINT;
property indxBox : UINT read getindxBox write setindxBox;
procedure sethinksetBox(const val : HINKSET);
function gethinksetBox : HINKSET;
property hinksetBox : HINKSET read gethinksetBox write sethinksetBox;
end;
type __TCalbStruct__Wrapper = class(TDCRecordWrapper)
private
fR : TCalbStruct;
public
function GetRecordPtr : pointer; override;
published
procedure setwOffsetX(const val : Integer);
function getwOffsetX : Integer;
property wOffsetX : Integer read getwOffsetX write setwOffsetX;
procedure setwOffsetY(const val : Integer);
function getwOffsetY : Integer;
property wOffsetY : Integer read getwOffsetY write setwOffsetY;
procedure setwDistinctWidth(const val : Integer);
function getwDistinctWidth : Integer;
property wDistinctWidth : Integer read getwDistinctWidth write setwDistinctWidth;
procedure setwDistinctHeight(const val : Integer);
function getwDistinctHeight : Integer;
property wDistinctHeight : Integer read getwDistinctHeight write setwDistinctHeight;
end;
type __TCtlInitBEdit__Wrapper = class(TDCRecordWrapper)
private
fR : TCtlInitBEdit;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setid(const val : Integer);
function getid : Integer;
property id : Integer read getid write setid;
procedure setwSizeCategory(const val : Word);
function getwSizeCategory : Word;
property wSizeCategory : Word read getwSizeCategory write setwSizeCategory;
procedure setwFlags(const val : Word);
function getwFlags : Word;
property wFlags : Word read getwFlags write setwFlags;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
end;
type __TCtlInitHEdit__Wrapper = class(TDCRecordWrapper)
private
fR : TCtlInitHEdit;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setid(const val : Integer);
function getid : Integer;
property id : Integer read getid write setid;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
end;
type __TCtlInitIEdit__Wrapper = class(TDCRecordWrapper)
private
fR : TCtlInitIEdit;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setid(const val : Integer);
function getid : Integer;
property id : Integer read getid write setid;
procedure setieb(const val : Word);
function getieb : Word;
property ieb : Word read getieb write setieb;
procedure setiedo(const val : Word);
function getiedo : Word;
property iedo : Word read getiedo write setiedo;
procedure setiei(const val : Word);
function getiei : Word;
property iei : Word read getiei write setiei;
procedure setien(const val : Word);
function getien : Word;
property ien : Word read getien write setien;
procedure setierec(const val : Word);
function getierec : Word;
property ierec : Word read getierec write setierec;
procedure seties(const val : Word);
function geties : Word;
property ies : Word read geties write seties;
procedure setiesec(const val : Word);
function getiesec : Word;
property iesec : Word read getiesec write setiesec;
procedure setpdts(const val : Word);
function getpdts : Word;
property pdts : Word read getpdts write setpdts;
procedure sethpndt(const val : HPENDATA);
function gethpndt : HPENDATA;
property hpndt : HPENDATA read gethpndt write sethpndt;
procedure setwVGrid(const val : Word);
function getwVGrid : Word;
property wVGrid : Word read getwVGrid write setwVGrid;
procedure setwHGrid(const val : Word);
function getwHGrid : Word;
property wHGrid : Word read getwHGrid write setwHGrid;
procedure setdwApp(const val : DWORD);
function getdwApp : DWORD;
property dwApp : DWORD read getdwApp write setdwApp;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
end;
type __TGuide__Wrapper = class(TDCRecordWrapper)
private
fR : TGuide;
public
function GetRecordPtr : pointer; override;
published
procedure setxOrigin(const val : Integer);
function getxOrigin : Integer;
property xOrigin : Integer read getxOrigin write setxOrigin;
procedure setyOrigin(const val : Integer);
function getyOrigin : Integer;
property yOrigin : Integer read getyOrigin write setyOrigin;
procedure setcxBox(const val : Integer);
function getcxBox : Integer;
property cxBox : Integer read getcxBox write setcxBox;
procedure setcyBox(const val : Integer);
function getcyBox : Integer;
property cyBox : Integer read getcyBox write setcyBox;
procedure setcxBase(const val : Integer);
function getcxBase : Integer;
property cxBase : Integer read getcxBase write setcxBase;
procedure setcyBase(const val : Integer);
function getcyBase : Integer;
property cyBase : Integer read getcyBase write setcyBase;
procedure setcHorzBox(const val : Integer);
function getcHorzBox : Integer;
property cHorzBox : Integer read getcHorzBox write setcHorzBox;
procedure setcVertBox(const val : Integer);
function getcVertBox : Integer;
property cVertBox : Integer read getcVertBox write setcVertBox;
procedure setcyMid(const val : Integer);
function getcyMid : Integer;
property cyMid : Integer read getcyMid write setcyMid;
end;
type __TIMEColors__Wrapper = class(TDCRecordWrapper)
private
fR : TIMEColors;
public
function GetRecordPtr : pointer; override;
published
procedure setcColors(const val : Integer);
function getcColors : Integer;
property cColors : Integer read getcColors write setcColors;
end;
type __TInkingInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TInkingInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setwFlags(const val : UINT);
function getwFlags : UINT;
property wFlags : UINT read getwFlags write setwFlags;
end;
type __TInpParams__Wrapper = class(TDCRecordWrapper)
private
fR : TInpParams;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure sethpndt(const val : HPENDATA);
function gethpndt : HPENDATA;
property hpndt : HPENDATA read gethpndt write sethpndt;
end;
type __TInterval__Wrapper = class(TDCRecordWrapper)
private
fR : TInterval;
public
function GetRecordPtr : pointer; override;
published
end;
type __TOEMPenInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TOEMPenInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setwPdt(const val : UINT);
function getwPdt : UINT;
property wPdt : UINT read getwPdt write setwPdt;
procedure setwValueMax(const val : UINT);
function getwValueMax : UINT;
property wValueMax : UINT read getwValueMax write setwValueMax;
procedure setwDistinct(const val : UINT);
function getwDistinct : UINT;
property wDistinct : UINT read getwDistinct write setwDistinct;
end;
type __TOEMPenPacket__Wrapper = class(TDCRecordWrapper)
private
fR : TOEMPenPacket;
public
function GetRecordPtr : pointer; override;
published
procedure setwTabletX(const val : UINT);
function getwTabletX : UINT;
property wTabletX : UINT read getwTabletX write setwTabletX;
procedure setwTabletY(const val : UINT);
function getwTabletY : UINT;
property wTabletY : UINT read getwTabletY write setwTabletY;
procedure setwPdk(const val : UINT);
function getwPdk : UINT;
property wPdk : UINT read getwPdk write setwPdk;
procedure setdwTime(const val : DWORD);
function getdwTime : DWORD;
property dwTime : DWORD read getdwTime write setdwTime;
end;
type __TPCMInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TPCMInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setdwPcm(const val : DWORD);
function getdwPcm : DWORD;
property dwPcm : DWORD read getdwPcm write setdwPcm;
procedure setdwTimeout(const val : DWORD);
function getdwTimeout : DWORD;
property dwTimeout : DWORD read getdwTimeout write setdwTimeout;
end;
type __TPDEvent__Wrapper = class(TDCRecordWrapper)
private
fR : TPDEvent;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setwm(const val : UINT);
function getwm : UINT;
property wm : UINT read getwm write setwm;
procedure setwParam(const val : wParam);
function getwParam : wParam;
property wParam : wParam read getwParam write setwParam;
procedure setLPARAM(const val : LPARAM);
function getLPARAM : LPARAM;
property LPARAM : LPARAM read getLPARAM write setLPARAM;
procedure setfPen(const val : BOOL);
function getfPen : BOOL;
property fPen : BOOL read getfPen write setfPen;
procedure setlExInfo(const val : Longint);
function getlExInfo : Longint;
property lExInfo : Longint read getlExInfo write setlExInfo;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
end;
type __TPenDataHeader__Wrapper = class(TDCRecordWrapper)
private
fR : TPenDataHeader;
public
function GetRecordPtr : pointer; override;
published
procedure setwVersion(const val : UINT);
function getwVersion : UINT;
property wVersion : UINT read getwVersion write setwVersion;
procedure setcbSizeUsed(const val : UINT);
function getcbSizeUsed : UINT;
property cbSizeUsed : UINT read getcbSizeUsed write setcbSizeUsed;
procedure setcStrokes(const val : UINT);
function getcStrokes : UINT;
property cStrokes : UINT read getcStrokes write setcStrokes;
procedure setcPnt(const val : UINT);
function getcPnt : UINT;
property cPnt : UINT read getcPnt write setcPnt;
procedure setcPntStrokeMax(const val : UINT);
function getcPntStrokeMax : UINT;
property cPntStrokeMax : UINT read getcPntStrokeMax write setcPntStrokeMax;
procedure setwPndts(const val : UINT);
function getwPndts : UINT;
property wPndts : UINT read getwPndts write setwPndts;
procedure setnInkWidth(const val : Integer);
function getnInkWidth : Integer;
property nInkWidth : Integer read getnInkWidth write setnInkWidth;
procedure setrgbInk(const val : DWORD);
function getrgbInk : DWORD;
property rgbInk : DWORD read getrgbInk write setrgbInk;
end;
type __TPenInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TPenInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setcxRawWidth(const val : UINT);
function getcxRawWidth : UINT;
property cxRawWidth : UINT read getcxRawWidth write setcxRawWidth;
procedure setcyRawHeight(const val : UINT);
function getcyRawHeight : UINT;
property cyRawHeight : UINT read getcyRawHeight write setcyRawHeight;
procedure setwDistinctWidth(const val : UINT);
function getwDistinctWidth : UINT;
property wDistinctWidth : UINT read getwDistinctWidth write setwDistinctWidth;
procedure setwDistinctHeight(const val : UINT);
function getwDistinctHeight : UINT;
property wDistinctHeight : UINT read getwDistinctHeight write setwDistinctHeight;
procedure setnSamplingRate(const val : Integer);
function getnSamplingRate : Integer;
property nSamplingRate : Integer read getnSamplingRate write setnSamplingRate;
procedure setnSamplingDist(const val : Integer);
function getnSamplingDist : Integer;
property nSamplingDist : Integer read getnSamplingDist write setnSamplingDist;
procedure setlPdc(const val : Longint);
function getlPdc : Longint;
property lPdc : Longint read getlPdc write setlPdc;
procedure setcPens(const val : Integer);
function getcPens : Integer;
property cPens : Integer read getcPens write setcPens;
procedure setcbOemData(const val : Integer);
function getcbOemData : Integer;
property cbOemData : Integer read getcbOemData write setcbOemData;
procedure setfuOEM(const val : UINT);
function getfuOEM : UINT;
property fuOEM : UINT read getfuOEM write setfuOEM;
end;
type __TPenPacket__Wrapper = class(TDCRecordWrapper)
private
fR : TPenPacket;
public
function GetRecordPtr : pointer; override;
published
procedure setwTabletX(const val : UINT);
function getwTabletX : UINT;
property wTabletX : UINT read getwTabletX write setwTabletX;
procedure setwTabletY(const val : UINT);
function getwTabletY : UINT;
property wTabletY : UINT read getwTabletY write setwTabletY;
procedure setwPdk(const val : UINT);
function getwPdk : UINT;
property wPdk : UINT read getwPdk write setwPdk;
end;
type __TPenTip__Wrapper = class(TDCRecordWrapper)
private
fR : TPenTip;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setbtype(const val : Byte);
function getbtype : Byte;
property btype : Byte read getbtype write setbtype;
procedure setbwidth(const val : Byte);
function getbwidth : Byte;
property bwidth : Byte read getbwidth write setbwidth;
procedure setbheight(const val : Byte);
function getbheight : Byte;
property bheight : Byte read getbheight write setbheight;
procedure setbOpacity(const val : Byte);
function getbOpacity : Byte;
property bOpacity : Byte read getbOpacity write setbOpacity;
procedure setrgb(const val : COLORREF);
function getrgb : COLORREF;
property rgb : COLORREF read getrgb write setrgb;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
end;
type __TRC__Wrapper = class(TDCRecordWrapper)
private
fR : TRC;
public
function GetRecordPtr : pointer; override;
published
procedure setHREC(const val : HREC);
function getHREC : HREC;
property HREC : HREC read getHREC write setHREC;
procedure setwEventRef(const val : UINT);
function getwEventRef : UINT;
property wEventRef : UINT read getwEventRef write setwEventRef;
procedure setwRcPreferences(const val : UINT);
function getwRcPreferences : UINT;
property wRcPreferences : UINT read getwRcPreferences write setwRcPreferences;
procedure setlRcOptions(const val : Longint);
function getlRcOptions : Longint;
property lRcOptions : Longint read getlRcOptions write setlRcOptions;
procedure setwCountry(const val : UINT);
function getwCountry : UINT;
property wCountry : UINT read getwCountry write setwCountry;
procedure setwIntlPreferences(const val : UINT);
function getwIntlPreferences : UINT;
property wIntlPreferences : UINT read getwIntlPreferences write setwIntlPreferences;
procedure setwTryDictionary(const val : UINT);
function getwTryDictionary : UINT;
property wTryDictionary : UINT read getwTryDictionary write setwTryDictionary;
procedure setclErrorLevel(const val : CL);
function getclErrorLevel : CL;
property clErrorLevel : CL read getclErrorLevel write setclErrorLevel;
procedure setALC(const val : ALC);
function getALC : ALC;
property ALC : ALC read getALC write setALC;
procedure setalcPriority(const val : ALC);
function getalcPriority : ALC;
property alcPriority : ALC read getalcPriority write setalcPriority;
procedure setwResultMode(const val : UINT);
function getwResultMode : UINT;
property wResultMode : UINT read getwResultMode write setwResultMode;
procedure setwTimeOut(const val : UINT);
function getwTimeOut : UINT;
property wTimeOut : UINT read getwTimeOut write setwTimeOut;
procedure setlPcm(const val : Longint);
function getlPcm : Longint;
property lPcm : Longint read getlPcm write setlPcm;
procedure setwRcOrient(const val : UINT);
function getwRcOrient : UINT;
property wRcOrient : UINT read getwRcOrient write setwRcOrient;
procedure setwRcDirect(const val : UINT);
function getwRcDirect : UINT;
property wRcDirect : UINT read getwRcDirect write setwRcDirect;
procedure setnInkWidth(const val : Integer);
function getnInkWidth : Integer;
property nInkWidth : Integer read getnInkWidth write setnInkWidth;
procedure setrgbInk(const val : COLORREF);
function getrgbInk : COLORREF;
property rgbInk : COLORREF read getrgbInk write setrgbInk;
procedure setdwAppParam(const val : DWORD);
function getdwAppParam : DWORD;
property dwAppParam : DWORD read getdwAppParam write setdwAppParam;
procedure setdwDictParam(const val : DWORD);
function getdwDictParam : DWORD;
property dwDictParam : DWORD read getdwDictParam write setdwDictParam;
procedure setdwRecognizer(const val : DWORD);
function getdwRecognizer : DWORD;
property dwRecognizer : DWORD read getdwRecognizer write setdwRecognizer;
end;
type __TRCResult__Wrapper = class(TDCRecordWrapper)
private
fR : TRCResult;
public
function GetRecordPtr : pointer; override;
published
procedure setwResultsType(const val : UINT);
function getwResultsType : UINT;
property wResultsType : UINT read getwResultsType write setwResultsType;
procedure setcSyv(const val : Integer);
function getcSyv : Integer;
property cSyv : Integer read getcSyv write setcSyv;
procedure sethSyv(const val : THandle);
function gethSyv : THandle;
property hSyv : THandle read gethSyv write sethSyv;
procedure setnBaseLine(const val : Integer);
function getnBaseLine : Integer;
property nBaseLine : Integer read getnBaseLine write setnBaseLine;
procedure setnMidLine(const val : Integer);
function getnMidLine : Integer;
property nMidLine : Integer read getnMidLine write setnMidLine;
procedure setHPENDATA(const val : HPENDATA);
function getHPENDATA : HPENDATA;
property HPENDATA : HPENDATA read getHPENDATA write setHPENDATA;
end;
type __TRectOfs__Wrapper = class(TDCRecordWrapper)
private
fR : TRectOfs;
public
function GetRecordPtr : pointer; override;
published
procedure setdLeft(const val : Integer);
function getdLeft : Integer;
property dLeft : Integer read getdLeft write setdLeft;
procedure setdTop(const val : Integer);
function getdTop : Integer;
property dTop : Integer read getdTop write setdTop;
procedure setdRight(const val : Integer);
function getdRight : Integer;
property dRight : Integer read getdRight write setdRight;
procedure setdBottom(const val : Integer);
function getdBottom : Integer;
property dBottom : Integer read getdBottom write setdBottom;
end;
type __TSKBInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TSKBInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setnPad(const val : Word);
function getnPad : Word;
property nPad : Word read getnPad write setnPad;
procedure setfVisible(const val : BOOL);
function getfVisible : BOOL;
property fVisible : BOOL read getfVisible write setfVisible;
procedure setfMinimized(const val : BOOL);
function getfMinimized : BOOL;
property fMinimized : BOOL read getfMinimized write setfMinimized;
procedure setdwReserved(const val : Longint);
function getdwReserved : Longint;
property dwReserved : Longint read getdwReserved write setdwReserved;
end;
type __TStrkFmt__Wrapper = class(TDCRecordWrapper)
private
fR : TStrkFmt;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setiesf(const val : UINT);
function getiesf : UINT;
property iesf : UINT read getiesf write setiesf;
procedure setiStrk(const val : UINT);
function getiStrk : UINT;
property iStrk : UINT read getiStrk write setiStrk;
procedure setdwUser(const val : DWORD);
function getdwUser : DWORD;
property dwUser : DWORD read getdwUser write setdwUser;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
end;
type __TStrokeInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TStrokeInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setcPnt(const val : UINT);
function getcPnt : UINT;
property cPnt : UINT read getcPnt write setcPnt;
procedure setcbPnts(const val : UINT);
function getcbPnts : UINT;
property cbPnts : UINT read getcbPnts write setcbPnts;
procedure setwPdk(const val : UINT);
function getwPdk : UINT;
property wPdk : UINT read getwPdk write setwPdk;
procedure setdwTick(const val : DWORD);
function getdwTick : DWORD;
property dwTick : DWORD read getdwTick write setdwTick;
end;
type __TSYC__Wrapper = class(TDCRecordWrapper)
private
fR : TSYC;
public
function GetRecordPtr : pointer; override;
published
procedure setwStrokeFirst(const val : UINT);
function getwStrokeFirst : UINT;
property wStrokeFirst : UINT read getwStrokeFirst write setwStrokeFirst;
procedure setwPntFirst(const val : UINT);
function getwPntFirst : UINT;
property wPntFirst : UINT read getwPntFirst write setwPntFirst;
procedure setwStrokeLast(const val : UINT);
function getwStrokeLast : UINT;
property wStrokeLast : UINT read getwStrokeLast write setwStrokeLast;
procedure setwPntLast(const val : UINT);
function getwPntLast : UINT;
property wPntLast : UINT read getwPntLast write setwPntLast;
procedure setfLastSyc(const val : BOOL);
function getfLastSyc : BOOL;
property fLastSyc : BOOL read getfLastSyc write setfLastSyc;
end;
type __TSYE__Wrapper = class(TDCRecordWrapper)
private
fR : TSYE;
public
function GetRecordPtr : pointer; override;
published
procedure setSYV(const val : SYV);
function getSYV : SYV;
property SYV : SYV read getSYV write setSYV;
procedure setlRecogVal(const val : Longint);
function getlRecogVal : Longint;
property lRecogVal : Longint read getlRecogVal write setlRecogVal;
procedure setCL(const val : CL);
function getCL : CL;
property CL : CL read getCL write setCL;
procedure setiSyc(const val : Integer);
function getiSyc : Integer;
property iSyc : Integer read getiSyc write setiSyc;
end;
type __TSYG__Wrapper = class(TDCRecordWrapper)
private
fR : TSYG;
public
function GetRecordPtr : pointer; override;
published
procedure setcHotSpot(const val : Integer);
function getcHotSpot : Integer;
property cHotSpot : Integer read getcHotSpot write setcHotSpot;
procedure setnFirstBox(const val : Integer);
function getnFirstBox : Integer;
property nFirstBox : Integer read getnFirstBox write setnFirstBox;
procedure setlRecogVal(const val : Longint);
function getlRecogVal : Longint;
property lRecogVal : Longint read getlRecogVal write setlRecogVal;
procedure setcSye(const val : Integer);
function getcSye : Integer;
property cSye : Integer read getcSye write setcSye;
procedure setcSyc(const val : Integer);
function getcSyc : Integer;
property cSyc : Integer read getcSyc write setcSyc;
end;
type __TTarget__Wrapper = class(TDCRecordWrapper)
private
fR : TTarget;
public
function GetRecordPtr : pointer; override;
published
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setidTarget(const val : DWORD);
function getidTarget : DWORD;
property idTarget : DWORD read getidTarget write setidTarget;
procedure sethtrgTarget(const val : HTRG);
function gethtrgTarget : HTRG;
property htrgTarget : HTRG read gethtrgTarget write sethtrgTarget;
procedure setdwData(const val : DWORD);
function getdwData : DWORD;
property dwData : DWORD read getdwData write setdwData;
end;
type __TTargInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TTargInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure sethtrgOwner(const val : HTRG);
function gethtrgOwner : HTRG;
property htrgOwner : HTRG read gethtrgOwner write sethtrgOwner;
procedure setcTargets(const val : Word);
function getcTargets : Word;
property cTargets : Word read getcTargets write setcTargets;
procedure setiTargetLast(const val : Word);
function getiTargetLast : Word;
property iTargetLast : Word read getiTargetLast write setiTargetLast;
end;
type
_T0 = function (p0 : Integer): BOOL of object;

_T1 = function : Word of object;

{_T2 = function (p0 : PRC;
p1 : Word): PByte of object;}

_T3 = function (p0 : Word): Byte of object;

{_T4 = procedure (p0 : PRC;
p1 : Word) of object;}

{_T5 = procedure (p0 : PRC;
p1 : Word) of object;}

{_T6 = function (p0 : PRC;
p1 : Word): Boolean of object;}

{_T7 = function (p0 : hdc;
p1 : PRect;
p2 : THandle): Integer of object;}

_T8 = function (const p0 : IDispatch;
const p1 : IDispatch): Integer of object;

_T9 = function (const p0 : IDispatch;
const p1 : IDispatch): Boolean of object;

_T10 = _T9;

_T11 = _T9;

{_T13 = function (p0 : PInterval;
p1 : PInterval): Boolean of object;}

{_T14 = function (p0 : PInterval;
p1 : PInterval): Boolean of object;}

{_T15 = function (p0 : PInterval): Integer of object;}

_T16 = procedure (const p0 : IDispatch;
p1 : Integer;
p2 : Integer) of object;

_T17 = function (p0 : DWORD): Boolean of object;

_T18 = _T17;

_T19 = _T17;

_T20 = _T17;

_T21 = _T17;

_T22 = _T17;

_T23 = _T17;

_T24 = function (p0 : DWORD): Byte of object;

_T25 = function (p0 : DWORD): Word of object;

_T26 = function (p0 : Char): DWORD of object;

_T27 = _T26;

_T28 = _T17;

_T29 = _T17;

_T30 = _T17;

_T31 = function (p0 : DWORD;
p1 : DWORD): Word of object;

_T32 = _T31;

_T33 = function (p0 : DWORD;
p1 : DWORD): Integer of object;

_T34 = function (p0 : HTRG): hwnd of object;

_T35 = _T33;

_T36 = function (p0 : hwnd): HTRG of object;

{_T37 = function (p0 : HPENDATA;
p1 : PPoint;
p2 : Pointer;
p3 : PStrokeInfo): HPENDATA of object;}

_T38 = function (p0 : HPENDATA;
p1 : UINT;
p2 : DWORD): Integer of object;

{_T39 = function (p0 : PPenInfo;
p1 : UINT;
p2 : UINT;
p3 : UINT): HPENDATA of object;}

_T40 = function (p0 : HPENDATA;
p1 : UINT): HRGN of object;

_T41 = function (p0 : HPENDATA): BOOL of object;

{_T42 = function (p0 : hdc;
p1 : PRect;
p2 : HPENDATA;
p3 : UINT;
p4 : UINT;
p5 : UINT;
p6 : UINT;
p7 : TFNAnimateProc;
p8 : PAnimateInfo;
p9 : UINT): Integer of object;}

_T43 = function (p0 : HPENDATA;
p1 : UINT): HPENDATA of object;

{_T44 = function (p0 : HPENDATA;
p1 : UINT;
p2 : UINT;
p3 : UINT;
p4 : PPoint;
p5 : Pointer;
p6 : UINT): Integer of object;}

_T45 = function (p0 : HPENDATA;
p1 : UINT;
p2 : LPARAM;
p3 : PHPENDATA;
p4 : UINT): Integer of object;

_T46 = function (p0 : HPENDATA;
p1 : Pointer;
p2 : UINT): Integer of object;

{_T47 = function (p0 : HPENDATA;
p1 : PPenDataHeader;
p2 : PPenInfo;
p3 : DWORD): BOOL of object;}

{_T48 = function (p0 : HPENDATA;
p1 : UINT;
p2 : UINT;
p3 : UINT;
p4 : PPoint): BOOL of object;}

_T49 = function (p0 : HPENDATA;
p1 : UINT;
p2 : Pointer;
p3 : UINT): Integer of object;

_T50 = _T49;

{_T51 = function (p0 : HPENDATA;
p1 : PPoint;
p2 : UINT;
p3 : PUINT;
p4 : PUINT): Integer of object;}

_T52 = function (p0 : HPENDATA;
p1 : HPENDATA;
p2 : UINT): Integer of object;

{_T53 = function (p0 : HPENDATA;
p1 : UINT;
p2 : UINT;
p3 : UINT;
p4 : PPoint;
p5 : Pointer): Integer of object;}

{_T54 = function (p0 : HPENDATA;
p1 : UINT;
p2 : PPoint;
p3 : Pointer;
p4 : PStrokeInfo): Integer of object;}

_T55 = function (p0 : HPENDATA;
p1 : UINT): BOOL of object;

_T56 = function (p0 : HPENDATA;
p1 : Integer;
p2 : Integer): BOOL of object;

_T57 = function (p0 : PHPENDATA;
p1 : UINT;
p2 : PByte;
p3 : Longint;
p4 : PDWORD): Longint of object;

_T58 = function (p0 : HPENDATA;
p1 : PByte;
p2 : Longint;
p3 : PDWORD): Longint of object;

{_T59 = function (p0 : hdc;
p1 : HPENDATA;
p2 : PPoint;
p3 : PPoint;
p4 : Integer;
p5 : DWORD): BOOL of object;}

_T60 = function (p0 : HPENDATA;
p1 : UINT;
p2 : UINT): Integer of object;

{_T61 = function (p0 : HPENDATA;
p1 : PRect): BOOL of object;}

_T62 = function (p0 : HPENDATA;
p1 : UINT;
p2 : LPARAM;
p3 : UINT): Integer of object;

_T63 = _T62;

_T64 = function (p0 : HPENDATA;
p1 : DWORD;
p2 : DWORD): Integer of object;

_T65 = function (p0 : UINT): BOOL of object;

_T66 = function (p0 : UINT;
p1 : Longint): BOOL of object;

_T67 = function (p0 : HRC;
p1 : HPENDATA): Integer of object;

{_T68 = function (p0 : HRC;
p1 : PPoint;
p2 : Pointer;
p3 : UINT;
p4 : PStrokeInfo): Integer of object;}

{_T69 = function (p0 : HWL;
p1 : LPSTR;
p2 : UINT): Integer of object;}

_T70 = function (p0 : HREC;
p1 : UINT;
p2 : wParam;
p3 : LPARAM): Integer of object;

_T71 = function (p0 : HRC;
p1 : HREC): HRC of object;

{_T72 = function (p0 : HREC;
p1 : LPSTR;
p2 : UINT;
p3 : DWORD): HWL of object;}

_T73 = function (p0 : HRCRESULT;
p1 : UINT;
p2 : UINT): HINKSET of object;

_T74 = function (p0 : HRC): HPENDATA of object;

_T75 = function (p0 : HRC): Integer of object;

_T76 = function (p0 : HRCRESULT): Integer of object;

_T77 = function (p0 : HWL): Integer of object;

_T78 = function (p0 : HRC;
p1 : SYV;
p2 : BOOL): Integer of object;

_T79 = function (p0 : HRC;
p1 : BOOL): Integer of object;

_T80 = _T75;

_T81 = function (p0 : HRC;
p1 : PALC;
p2 : PByte): Integer of object;

_T82 = _T81;

_T83 = function (p0 : HRCRESULT;
p1 : UINT;
p2 : UINT;
p3 : PHRCRESULT;
p4 : UINT): Integer of object;

_T84 = function (p0 : HRCRESULT;
p1 : UINT;
p2 : UINT;
p3 : PUINT): Integer of object;

{_T85 = function (p0 : HRC;
p1 : UINT;
p2 : UINT;
p3 : UINT;
p4 : PBoxResults;
p5 : BOOL): Integer of object;}

{_T86 = function (p0 : HRC;
p1 : PGuide;
p2 : PUINT): Integer of object;}

{_T87 = function (p0 : HRCRESULT;
p1 : UINT;
p2 : PPoint;
p3 : UINT): Integer of object;}

_T88 = function (p0 : HRC): HREC of object;

{_T89 = function (p0 : HRC;
p1 : PUINT;
p2 : LPSTR;
p3 : PUINT;
p4 : PUINT): Integer of object;}

_T90 = _T75;

_T91 = function (p0 : HRC;
p1 : UINT;
p2 : PHRCRESULT;
p3 : UINT): Integer of object;

_T92 = _T76;

_T93 = function (p0 : HRCRESULT;
p1 : UINT;
p2 : PSYV;
p3 : UINT): Integer of object;

_T94 = function (p0 : HRC;
p1 : PHWL): Integer of object;

_T95 = _T75;

_T96 = function (p0 : HRC;
p1 : DWORD): Integer of object;

_T97 = function (p0 : HWL;
p1 : HFILE): Integer of object;

_T98 = function (p0 : HRC;
p1 : ALC;
p2 : PByte): Integer of object;

_T99 = _T98;

_T100 = function (p0 : HRC;
p1 : PALC;
p2 : UINT): Integer of object;

{_T101 = function (p0 : HRC;
p1 : PGuide;
p2 : UINT): Integer of object;}

{_T102 = function (p0 : HRC;
p1 : UINT;
p2 : LPCSTR;
p3 : UINT;
p4 : UINT): Integer of object;}

_T103 = function (p0 : HRC;
p1 : UINT): Integer of object;

{_T104 = function (p0 : HREC;
var p1 : TFNHRCResultHookProc): HRECHOOK of object;}

_T105 = _T103;

_T106 = function (p0 : HRC;
p1 : HWL): Integer of object;

_T107 = function (p0 : HREC;
p1 : PSYV;
p2 : UINT;
p3 : HPENDATA;
p4 : UINT): Integer of object;

_T108 = function (p0 : HREC;
p1 : HRECHOOK): Integer of object;

_T109 = _T97;

{_T110 = function (p0 : LPSTR): HREC of object;}

_T111 = function (p0 : HREC): Pointer of object;

{_T112 = function (p0 : HINKSET;
p1 : PInterval): BOOL of object;}

_T113 = function (p0 : UINT): HINKSET of object;

_T114 = function (p0 : HINKSET): BOOL of object;

{_T115 = function (p0 : HINKSET;
p1 : UINT;
p2 : PInterval): Integer of object;}

_T116 = function (p0 : HINKSET): Integer of object;

{_T117 = function (p0 : LPSTR;
p1 : Integer;
p2 : PSYV): Integer of object;}

{_T118 = function (p0 : PSYV;
p1 : Integer;
p2 : LPSTR;
p3 : PINT): BOOL of object;}

_T119 = function (p0 : hwnd;
p1 : UINT): Integer of object;

{_T120 = function (p0 : HPCM;
p1 : PPoint;
p2 : Pointer;
p3 : UINT;
p4 : UINT;
p5 : PStrokeInfo): Integer of object;}

{_T121 = function (p0 : HPCM;
p1 : UINT;
p2 : PPoint;
p3 : Pointer;
p4 : UINT): Integer of object;}

{_T122 = function (p0 : HPCM;
p1 : UINT;
p2 : PInkingInfo): Integer of object;}

{_T123 = function (p0 : hwnd;
p1 : UINT;
p2 : PPCMInfo;
p3 : PINT): HPCM of object;}

_T124 = function (p0 : HPCM): Integer of object;

_T125 = function (p0 : HPCM;
p1 : UINT;
p2 : Integer): Integer of object;

{_T126 = function (p0 : PPoint;
p1 : UINT;
p2 : PRect): Pointer of object;}

{_T127 = function (p0 : PPoint;
p1 : Integer): BOOL of object;}

_T128 = function : UINT of object;

_T129 = function (p0 : UINT;
p1 : UINT): Pointer of object;

_T130 = function (p0 : wParam;
p1 : LPARAM): Longint of object;

_T131 = _T128;

_T132 = _T130;

{_T133 = function (p0 : PPoint;
p1 : Integer): BOOL of object;}

{_T134 = function (p0 : hwnd;
p1 : LPSTR;
p2 : UINT;
p3 : Pointer;
p4 : DWORD;
p5 : DWORD): BOOL of object;}

{_T135 = function (p0 : PTargInfo;
p1 : PPoint;
p2 : DWORD;
p3 : UINT;
p4 : PStrokeInfo): Integer of object;}

{_T136 = function (p0 : hwnd;
p1 : hwnd;
p2 : LPSTR;
p3 : UINT;
p4 : PPoint): BOOL of object;}

function __ABSTIME__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ABSTIME__Wrapper.setsec(const val : DWORD);
begin
ABSTIME(GetRecordPtr^).sec := val;
end;
function __ABSTIME__Wrapper.getsec : DWORD;
begin
result := ABSTIME(GetRecordPtr^).sec;
end;
procedure __ABSTIME__Wrapper.setms(const val : UINT);
begin
ABSTIME(GetRecordPtr^).ms := val;
end;
function __ABSTIME__Wrapper.getms : UINT;
begin
result := ABSTIME(GetRecordPtr^).ms;
end;
function __ANIMATEINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ANIMATEINFO__Wrapper.setcbSize(const val : DWORD);
begin
ANIMATEINFO(GetRecordPtr^).cbSize := val;
end;
function __ANIMATEINFO__Wrapper.getcbSize : DWORD;
begin
result := ANIMATEINFO(GetRecordPtr^).cbSize;
end;
procedure __ANIMATEINFO__Wrapper.setuSpeedPct(const val : UINT);
begin
ANIMATEINFO(GetRecordPtr^).uSpeedPct := val;
end;
function __ANIMATEINFO__Wrapper.getuSpeedPct : UINT;
begin
result := ANIMATEINFO(GetRecordPtr^).uSpeedPct;
end;
procedure __ANIMATEINFO__Wrapper.setuPeriodCB(const val : UINT);
begin
ANIMATEINFO(GetRecordPtr^).uPeriodCB := val;
end;
function __ANIMATEINFO__Wrapper.getuPeriodCB : UINT;
begin
result := ANIMATEINFO(GetRecordPtr^).uPeriodCB;
end;
procedure __ANIMATEINFO__Wrapper.setfuFlags(const val : UINT);
begin
ANIMATEINFO(GetRecordPtr^).fuFlags := val;
end;
function __ANIMATEINFO__Wrapper.getfuFlags : UINT;
begin
result := ANIMATEINFO(GetRecordPtr^).fuFlags;
end;
procedure __ANIMATEINFO__Wrapper.setLPARAM(const val : LPARAM);
begin
ANIMATEINFO(GetRecordPtr^).LPARAM := val;
end;
function __ANIMATEINFO__Wrapper.getLPARAM : LPARAM;
begin
result := ANIMATEINFO(GetRecordPtr^).LPARAM;
end;
procedure __ANIMATEINFO__Wrapper.setdwReserved(const val : DWORD);
begin
ANIMATEINFO(GetRecordPtr^).dwReserved := val;
end;
function __ANIMATEINFO__Wrapper.getdwReserved : DWORD;
begin
result := ANIMATEINFO(GetRecordPtr^).dwReserved;
end;
function __BOXEDITINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __BOXEDITINFO__Wrapper.setcxBox(const val : Integer);
begin
BOXEDITINFO(GetRecordPtr^).cxBox := val;
end;
function __BOXEDITINFO__Wrapper.getcxBox : Integer;
begin
result := BOXEDITINFO(GetRecordPtr^).cxBox;
end;
procedure __BOXEDITINFO__Wrapper.setcyBox(const val : Integer);
begin
BOXEDITINFO(GetRecordPtr^).cyBox := val;
end;
function __BOXEDITINFO__Wrapper.getcyBox : Integer;
begin
result := BOXEDITINFO(GetRecordPtr^).cyBox;
end;
procedure __BOXEDITINFO__Wrapper.setcxBase(const val : Integer);
begin
BOXEDITINFO(GetRecordPtr^).cxBase := val;
end;
function __BOXEDITINFO__Wrapper.getcxBase : Integer;
begin
result := BOXEDITINFO(GetRecordPtr^).cxBase;
end;
procedure __BOXEDITINFO__Wrapper.setcyBase(const val : Integer);
begin
BOXEDITINFO(GetRecordPtr^).cyBase := val;
end;
function __BOXEDITINFO__Wrapper.getcyBase : Integer;
begin
result := BOXEDITINFO(GetRecordPtr^).cyBase;
end;
procedure __BOXEDITINFO__Wrapper.setcyMid(const val : Integer);
begin
BOXEDITINFO(GetRecordPtr^).cyMid := val;
end;
function __BOXEDITINFO__Wrapper.getcyMid : Integer;
begin
result := BOXEDITINFO(GetRecordPtr^).cyMid;
end;
procedure __BOXEDITINFO__Wrapper.setwFlags(const val : UINT);
begin
BOXEDITINFO(GetRecordPtr^).wFlags := val;
end;
function __BOXEDITINFO__Wrapper.getwFlags : UINT;
begin
result := BOXEDITINFO(GetRecordPtr^).wFlags;
end;
procedure __BOXEDITINFO__Wrapper.setwFontHeight(const val : UINT);
begin
BOXEDITINFO(GetRecordPtr^).wFontHeight := val;
end;
function __BOXEDITINFO__Wrapper.getwFontHeight : UINT;
begin
result := BOXEDITINFO(GetRecordPtr^).wFontHeight;
end;
function __BOXLAYOUT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __BOXLAYOUT__Wrapper.setcyCusp(const val : Integer);
begin
BOXLAYOUT(GetRecordPtr^).cyCusp := val;
end;
function __BOXLAYOUT__Wrapper.getcyCusp : Integer;
begin
result := BOXLAYOUT(GetRecordPtr^).cyCusp;
end;
procedure __BOXLAYOUT__Wrapper.setcyEndCusp(const val : Integer);
begin
BOXLAYOUT(GetRecordPtr^).cyEndCusp := val;
end;
function __BOXLAYOUT__Wrapper.getcyEndCusp : Integer;
begin
result := BOXLAYOUT(GetRecordPtr^).cyEndCusp;
end;
procedure __BOXLAYOUT__Wrapper.setstyle(const val : UINT);
begin
BOXLAYOUT(GetRecordPtr^).style := val;
end;
function __BOXLAYOUT__Wrapper.getstyle : UINT;
begin
result := BOXLAYOUT(GetRecordPtr^).style;
end;
procedure __BOXLAYOUT__Wrapper.setdwReserved1(const val : DWORD);
begin
BOXLAYOUT(GetRecordPtr^).dwReserved1 := val;
end;
function __BOXLAYOUT__Wrapper.getdwReserved1 : DWORD;
begin
result := BOXLAYOUT(GetRecordPtr^).dwReserved1;
end;
procedure __BOXLAYOUT__Wrapper.setdwReserved2(const val : DWORD);
begin
BOXLAYOUT(GetRecordPtr^).dwReserved2 := val;
end;
function __BOXLAYOUT__Wrapper.getdwReserved2 : DWORD;
begin
result := BOXLAYOUT(GetRecordPtr^).dwReserved2;
end;
procedure __BOXLAYOUT__Wrapper.setdwReserved3(const val : DWORD);
begin
BOXLAYOUT(GetRecordPtr^).dwReserved3 := val;
end;
function __BOXLAYOUT__Wrapper.getdwReserved3 : DWORD;
begin
result := BOXLAYOUT(GetRecordPtr^).dwReserved3;
end;
function __BOXRESULTS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __BOXRESULTS__Wrapper.setindxBox(const val : UINT);
begin
BOXRESULTS(GetRecordPtr^).indxBox := val;
end;
function __BOXRESULTS__Wrapper.getindxBox : UINT;
begin
result := BOXRESULTS(GetRecordPtr^).indxBox;
end;
procedure __BOXRESULTS__Wrapper.sethinksetBox(const val : HINKSET);
begin
BOXRESULTS(GetRecordPtr^).hinksetBox := val;
end;
function __BOXRESULTS__Wrapper.gethinksetBox : HINKSET;
begin
result := BOXRESULTS(GetRecordPtr^).hinksetBox;
end;
function __CALBSTRUCT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __CALBSTRUCT__Wrapper.setwOffsetX(const val : Integer);
begin
CALBSTRUCT(GetRecordPtr^).wOffsetX := val;
end;
function __CALBSTRUCT__Wrapper.getwOffsetX : Integer;
begin
result := CALBSTRUCT(GetRecordPtr^).wOffsetX;
end;
procedure __CALBSTRUCT__Wrapper.setwOffsetY(const val : Integer);
begin
CALBSTRUCT(GetRecordPtr^).wOffsetY := val;
end;
function __CALBSTRUCT__Wrapper.getwOffsetY : Integer;
begin
result := CALBSTRUCT(GetRecordPtr^).wOffsetY;
end;
procedure __CALBSTRUCT__Wrapper.setwDistinctWidth(const val : Integer);
begin
CALBSTRUCT(GetRecordPtr^).wDistinctWidth := val;
end;
function __CALBSTRUCT__Wrapper.getwDistinctWidth : Integer;
begin
result := CALBSTRUCT(GetRecordPtr^).wDistinctWidth;
end;
procedure __CALBSTRUCT__Wrapper.setwDistinctHeight(const val : Integer);
begin
CALBSTRUCT(GetRecordPtr^).wDistinctHeight := val;
end;
function __CALBSTRUCT__Wrapper.getwDistinctHeight : Integer;
begin
result := CALBSTRUCT(GetRecordPtr^).wDistinctHeight;
end;
function __CTLINITBEDIT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __CTLINITBEDIT__Wrapper.setcbSize(const val : DWORD);
begin
CTLINITBEDIT(GetRecordPtr^).cbSize := val;
end;
function __CTLINITBEDIT__Wrapper.getcbSize : DWORD;
begin
result := CTLINITBEDIT(GetRecordPtr^).cbSize;
end;
procedure __CTLINITBEDIT__Wrapper.setid(const val : Integer);
begin
CTLINITBEDIT(GetRecordPtr^).id := val;
end;
function __CTLINITBEDIT__Wrapper.getid : Integer;
begin
result := CTLINITBEDIT(GetRecordPtr^).id;
end;
procedure __CTLINITBEDIT__Wrapper.setwSizeCategory(const val : Word);
begin
CTLINITBEDIT(GetRecordPtr^).wSizeCategory := val;
end;
function __CTLINITBEDIT__Wrapper.getwSizeCategory : Word;
begin
result := CTLINITBEDIT(GetRecordPtr^).wSizeCategory;
end;
procedure __CTLINITBEDIT__Wrapper.setwFlags(const val : Word);
begin
CTLINITBEDIT(GetRecordPtr^).wFlags := val;
end;
function __CTLINITBEDIT__Wrapper.getwFlags : Word;
begin
result := CTLINITBEDIT(GetRecordPtr^).wFlags;
end;
procedure __CTLINITBEDIT__Wrapper.setdwReserved(const val : DWORD);
begin
CTLINITBEDIT(GetRecordPtr^).dwReserved := val;
end;
function __CTLINITBEDIT__Wrapper.getdwReserved : DWORD;
begin
result := CTLINITBEDIT(GetRecordPtr^).dwReserved;
end;
function __CTLINITHEDIT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __CTLINITHEDIT__Wrapper.setcbSize(const val : DWORD);
begin
CTLINITHEDIT(GetRecordPtr^).cbSize := val;
end;
function __CTLINITHEDIT__Wrapper.getcbSize : DWORD;
begin
result := CTLINITHEDIT(GetRecordPtr^).cbSize;
end;
procedure __CTLINITHEDIT__Wrapper.setid(const val : Integer);
begin
CTLINITHEDIT(GetRecordPtr^).id := val;
end;
function __CTLINITHEDIT__Wrapper.getid : Integer;
begin
result := CTLINITHEDIT(GetRecordPtr^).id;
end;
procedure __CTLINITHEDIT__Wrapper.setdwFlags(const val : DWORD);
begin
CTLINITHEDIT(GetRecordPtr^).dwFlags := val;
end;
function __CTLINITHEDIT__Wrapper.getdwFlags : DWORD;
begin
result := CTLINITHEDIT(GetRecordPtr^).dwFlags;
end;
procedure __CTLINITHEDIT__Wrapper.setdwReserved(const val : DWORD);
begin
CTLINITHEDIT(GetRecordPtr^).dwReserved := val;
end;
function __CTLINITHEDIT__Wrapper.getdwReserved : DWORD;
begin
result := CTLINITHEDIT(GetRecordPtr^).dwReserved;
end;
function __CTLINITIEDIT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __CTLINITIEDIT__Wrapper.setcbSize(const val : DWORD);
begin
CTLINITIEDIT(GetRecordPtr^).cbSize := val;
end;
function __CTLINITIEDIT__Wrapper.getcbSize : DWORD;
begin
result := CTLINITIEDIT(GetRecordPtr^).cbSize;
end;
procedure __CTLINITIEDIT__Wrapper.setid(const val : Integer);
begin
CTLINITIEDIT(GetRecordPtr^).id := val;
end;
function __CTLINITIEDIT__Wrapper.getid : Integer;
begin
result := CTLINITIEDIT(GetRecordPtr^).id;
end;
procedure __CTLINITIEDIT__Wrapper.setieb(const val : Word);
begin
CTLINITIEDIT(GetRecordPtr^).ieb := val;
end;
function __CTLINITIEDIT__Wrapper.getieb : Word;
begin
result := CTLINITIEDIT(GetRecordPtr^).ieb;
end;
procedure __CTLINITIEDIT__Wrapper.setiedo(const val : Word);
begin
CTLINITIEDIT(GetRecordPtr^).iedo := val;
end;
function __CTLINITIEDIT__Wrapper.getiedo : Word;
begin
result := CTLINITIEDIT(GetRecordPtr^).iedo;
end;
procedure __CTLINITIEDIT__Wrapper.setiei(const val : Word);
begin
CTLINITIEDIT(GetRecordPtr^).iei := val;
end;
function __CTLINITIEDIT__Wrapper.getiei : Word;
begin
result := CTLINITIEDIT(GetRecordPtr^).iei;
end;
procedure __CTLINITIEDIT__Wrapper.setien(const val : Word);
begin
CTLINITIEDIT(GetRecordPtr^).ien := val;
end;
function __CTLINITIEDIT__Wrapper.getien : Word;
begin
result := CTLINITIEDIT(GetRecordPtr^).ien;
end;
procedure __CTLINITIEDIT__Wrapper.setierec(const val : Word);
begin
CTLINITIEDIT(GetRecordPtr^).ierec := val;
end;
function __CTLINITIEDIT__Wrapper.getierec : Word;
begin
result := CTLINITIEDIT(GetRecordPtr^).ierec;
end;
procedure __CTLINITIEDIT__Wrapper.seties(const val : Word);
begin
CTLINITIEDIT(GetRecordPtr^).ies := val;
end;
function __CTLINITIEDIT__Wrapper.geties : Word;
begin
result := CTLINITIEDIT(GetRecordPtr^).ies;
end;
procedure __CTLINITIEDIT__Wrapper.setiesec(const val : Word);
begin
CTLINITIEDIT(GetRecordPtr^).iesec := val;
end;
function __CTLINITIEDIT__Wrapper.getiesec : Word;
begin
result := CTLINITIEDIT(GetRecordPtr^).iesec;
end;
procedure __CTLINITIEDIT__Wrapper.setpdts(const val : Word);
begin
CTLINITIEDIT(GetRecordPtr^).pdts := val;
end;
function __CTLINITIEDIT__Wrapper.getpdts : Word;
begin
result := CTLINITIEDIT(GetRecordPtr^).pdts;
end;
procedure __CTLINITIEDIT__Wrapper.sethpndt(const val : HPENDATA);
begin
CTLINITIEDIT(GetRecordPtr^).hpndt := val;
end;
function __CTLINITIEDIT__Wrapper.gethpndt : HPENDATA;
begin
result := CTLINITIEDIT(GetRecordPtr^).hpndt;
end;
procedure __CTLINITIEDIT__Wrapper.setwVGrid(const val : Word);
begin
CTLINITIEDIT(GetRecordPtr^).wVGrid := val;
end;
function __CTLINITIEDIT__Wrapper.getwVGrid : Word;
begin
result := CTLINITIEDIT(GetRecordPtr^).wVGrid;
end;
procedure __CTLINITIEDIT__Wrapper.setwHGrid(const val : Word);
begin
CTLINITIEDIT(GetRecordPtr^).wHGrid := val;
end;
function __CTLINITIEDIT__Wrapper.getwHGrid : Word;
begin
result := CTLINITIEDIT(GetRecordPtr^).wHGrid;
end;
procedure __CTLINITIEDIT__Wrapper.setdwApp(const val : DWORD);
begin
CTLINITIEDIT(GetRecordPtr^).dwApp := val;
end;
function __CTLINITIEDIT__Wrapper.getdwApp : DWORD;
begin
result := CTLINITIEDIT(GetRecordPtr^).dwApp;
end;
procedure __CTLINITIEDIT__Wrapper.setdwReserved(const val : DWORD);
begin
CTLINITIEDIT(GetRecordPtr^).dwReserved := val;
end;
function __CTLINITIEDIT__Wrapper.getdwReserved : DWORD;
begin
result := CTLINITIEDIT(GetRecordPtr^).dwReserved;
end;
function __GUIDE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __GUIDE__Wrapper.setxOrigin(const val : Integer);
begin
GUIDE(GetRecordPtr^).xOrigin := val;
end;
function __GUIDE__Wrapper.getxOrigin : Integer;
begin
result := GUIDE(GetRecordPtr^).xOrigin;
end;
procedure __GUIDE__Wrapper.setyOrigin(const val : Integer);
begin
GUIDE(GetRecordPtr^).yOrigin := val;
end;
function __GUIDE__Wrapper.getyOrigin : Integer;
begin
result := GUIDE(GetRecordPtr^).yOrigin;
end;
procedure __GUIDE__Wrapper.setcxBox(const val : Integer);
begin
GUIDE(GetRecordPtr^).cxBox := val;
end;
function __GUIDE__Wrapper.getcxBox : Integer;
begin
result := GUIDE(GetRecordPtr^).cxBox;
end;
procedure __GUIDE__Wrapper.setcyBox(const val : Integer);
begin
GUIDE(GetRecordPtr^).cyBox := val;
end;
function __GUIDE__Wrapper.getcyBox : Integer;
begin
result := GUIDE(GetRecordPtr^).cyBox;
end;
procedure __GUIDE__Wrapper.setcxBase(const val : Integer);
begin
GUIDE(GetRecordPtr^).cxBase := val;
end;
function __GUIDE__Wrapper.getcxBase : Integer;
begin
result := GUIDE(GetRecordPtr^).cxBase;
end;
procedure __GUIDE__Wrapper.setcyBase(const val : Integer);
begin
GUIDE(GetRecordPtr^).cyBase := val;
end;
function __GUIDE__Wrapper.getcyBase : Integer;
begin
result := GUIDE(GetRecordPtr^).cyBase;
end;
procedure __GUIDE__Wrapper.setcHorzBox(const val : Integer);
begin
GUIDE(GetRecordPtr^).cHorzBox := val;
end;
function __GUIDE__Wrapper.getcHorzBox : Integer;
begin
result := GUIDE(GetRecordPtr^).cHorzBox;
end;
procedure __GUIDE__Wrapper.setcVertBox(const val : Integer);
begin
GUIDE(GetRecordPtr^).cVertBox := val;
end;
function __GUIDE__Wrapper.getcVertBox : Integer;
begin
result := GUIDE(GetRecordPtr^).cVertBox;
end;
procedure __GUIDE__Wrapper.setcyMid(const val : Integer);
begin
GUIDE(GetRecordPtr^).cyMid := val;
end;
function __GUIDE__Wrapper.getcyMid : Integer;
begin
result := GUIDE(GetRecordPtr^).cyMid;
end;
function __IMECOLORS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __IMECOLORS__Wrapper.setcColors(const val : Integer);
begin
IMECOLORS(GetRecordPtr^).cColors := val;
end;
function __IMECOLORS__Wrapper.getcColors : Integer;
begin
result := IMECOLORS(GetRecordPtr^).cColors;
end;
function __INKINGINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __INKINGINFO__Wrapper.setcbSize(const val : DWORD);
begin
INKINGINFO(GetRecordPtr^).cbSize := val;
end;
function __INKINGINFO__Wrapper.getcbSize : DWORD;
begin
result := INKINGINFO(GetRecordPtr^).cbSize;
end;
procedure __INKINGINFO__Wrapper.setwFlags(const val : UINT);
begin
INKINGINFO(GetRecordPtr^).wFlags := val;
end;
function __INKINGINFO__Wrapper.getwFlags : UINT;
begin
result := INKINGINFO(GetRecordPtr^).wFlags;
end;
function __INPPARAMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __INPPARAMS__Wrapper.setcbSize(const val : DWORD);
begin
INPPARAMS(GetRecordPtr^).cbSize := val;
end;
function __INPPARAMS__Wrapper.getcbSize : DWORD;
begin
result := INPPARAMS(GetRecordPtr^).cbSize;
end;
procedure __INPPARAMS__Wrapper.setdwFlags(const val : DWORD);
begin
INPPARAMS(GetRecordPtr^).dwFlags := val;
end;
function __INPPARAMS__Wrapper.getdwFlags : DWORD;
begin
result := INPPARAMS(GetRecordPtr^).dwFlags;
end;
procedure __INPPARAMS__Wrapper.sethpndt(const val : HPENDATA);
begin
INPPARAMS(GetRecordPtr^).hpndt := val;
end;
function __INPPARAMS__Wrapper.gethpndt : HPENDATA;
begin
result := INPPARAMS(GetRecordPtr^).hpndt;
end;
function __INTERVAL__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __OEMPENINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __OEMPENINFO__Wrapper.setwPdt(const val : UINT);
begin
OEMPENINFO(GetRecordPtr^).wPdt := val;
end;
function __OEMPENINFO__Wrapper.getwPdt : UINT;
begin
result := OEMPENINFO(GetRecordPtr^).wPdt;
end;
procedure __OEMPENINFO__Wrapper.setwValueMax(const val : UINT);
begin
OEMPENINFO(GetRecordPtr^).wValueMax := val;
end;
function __OEMPENINFO__Wrapper.getwValueMax : UINT;
begin
result := OEMPENINFO(GetRecordPtr^).wValueMax;
end;
procedure __OEMPENINFO__Wrapper.setwDistinct(const val : UINT);
begin
OEMPENINFO(GetRecordPtr^).wDistinct := val;
end;
function __OEMPENINFO__Wrapper.getwDistinct : UINT;
begin
result := OEMPENINFO(GetRecordPtr^).wDistinct;
end;
function __OEMPENPACKET__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __OEMPENPACKET__Wrapper.setwTabletX(const val : UINT);
begin
OEMPENPACKET(GetRecordPtr^).wTabletX := val;
end;
function __OEMPENPACKET__Wrapper.getwTabletX : UINT;
begin
result := OEMPENPACKET(GetRecordPtr^).wTabletX;
end;
procedure __OEMPENPACKET__Wrapper.setwTabletY(const val : UINT);
begin
OEMPENPACKET(GetRecordPtr^).wTabletY := val;
end;
function __OEMPENPACKET__Wrapper.getwTabletY : UINT;
begin
result := OEMPENPACKET(GetRecordPtr^).wTabletY;
end;
procedure __OEMPENPACKET__Wrapper.setwPdk(const val : UINT);
begin
OEMPENPACKET(GetRecordPtr^).wPdk := val;
end;
function __OEMPENPACKET__Wrapper.getwPdk : UINT;
begin
result := OEMPENPACKET(GetRecordPtr^).wPdk;
end;
procedure __OEMPENPACKET__Wrapper.setdwTime(const val : DWORD);
begin
OEMPENPACKET(GetRecordPtr^).dwTime := val;
end;
function __OEMPENPACKET__Wrapper.getdwTime : DWORD;
begin
result := OEMPENPACKET(GetRecordPtr^).dwTime;
end;
function __PCMINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __PCMINFO__Wrapper.setcbSize(const val : DWORD);
begin
PCMINFO(GetRecordPtr^).cbSize := val;
end;
function __PCMINFO__Wrapper.getcbSize : DWORD;
begin
result := PCMINFO(GetRecordPtr^).cbSize;
end;
procedure __PCMINFO__Wrapper.setdwPcm(const val : DWORD);
begin
PCMINFO(GetRecordPtr^).dwPcm := val;
end;
function __PCMINFO__Wrapper.getdwPcm : DWORD;
begin
result := PCMINFO(GetRecordPtr^).dwPcm;
end;
procedure __PCMINFO__Wrapper.setdwTimeout(const val : DWORD);
begin
PCMINFO(GetRecordPtr^).dwTimeout := val;
end;
function __PCMINFO__Wrapper.getdwTimeout : DWORD;
begin
result := PCMINFO(GetRecordPtr^).dwTimeout;
end;
function __PDEVENT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __PDEVENT__Wrapper.setcbSize(const val : DWORD);
begin
PDEVENT(GetRecordPtr^).cbSize := val;
end;
function __PDEVENT__Wrapper.getcbSize : DWORD;
begin
result := PDEVENT(GetRecordPtr^).cbSize;
end;
procedure __PDEVENT__Wrapper.setwm(const val : UINT);
begin
PDEVENT(GetRecordPtr^).wm := val;
end;
function __PDEVENT__Wrapper.getwm : UINT;
begin
result := PDEVENT(GetRecordPtr^).wm;
end;
procedure __PDEVENT__Wrapper.setwParam(const val : wParam);
begin
PDEVENT(GetRecordPtr^).wParam := val;
end;
function __PDEVENT__Wrapper.getwParam : wParam;
begin
result := PDEVENT(GetRecordPtr^).wParam;
end;
procedure __PDEVENT__Wrapper.setLPARAM(const val : LPARAM);
begin
PDEVENT(GetRecordPtr^).LPARAM := val;
end;
function __PDEVENT__Wrapper.getLPARAM : LPARAM;
begin
result := PDEVENT(GetRecordPtr^).LPARAM;
end;
procedure __PDEVENT__Wrapper.setfPen(const val : BOOL);
begin
PDEVENT(GetRecordPtr^).fPen := val;
end;
function __PDEVENT__Wrapper.getfPen : BOOL;
begin
result := PDEVENT(GetRecordPtr^).fPen;
end;
procedure __PDEVENT__Wrapper.setlExInfo(const val : Longint);
begin
PDEVENT(GetRecordPtr^).lExInfo := val;
end;
function __PDEVENT__Wrapper.getlExInfo : Longint;
begin
result := PDEVENT(GetRecordPtr^).lExInfo;
end;
procedure __PDEVENT__Wrapper.setdwReserved(const val : DWORD);
begin
PDEVENT(GetRecordPtr^).dwReserved := val;
end;
function __PDEVENT__Wrapper.getdwReserved : DWORD;
begin
result := PDEVENT(GetRecordPtr^).dwReserved;
end;
function __PENDATAHEADER__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __PENDATAHEADER__Wrapper.setwVersion(const val : UINT);
begin
PENDATAHEADER(GetRecordPtr^).wVersion := val;
end;
function __PENDATAHEADER__Wrapper.getwVersion : UINT;
begin
result := PENDATAHEADER(GetRecordPtr^).wVersion;
end;
procedure __PENDATAHEADER__Wrapper.setcbSizeUsed(const val : UINT);
begin
PENDATAHEADER(GetRecordPtr^).cbSizeUsed := val;
end;
function __PENDATAHEADER__Wrapper.getcbSizeUsed : UINT;
begin
result := PENDATAHEADER(GetRecordPtr^).cbSizeUsed;
end;
procedure __PENDATAHEADER__Wrapper.setcStrokes(const val : UINT);
begin
PENDATAHEADER(GetRecordPtr^).cStrokes := val;
end;
function __PENDATAHEADER__Wrapper.getcStrokes : UINT;
begin
result := PENDATAHEADER(GetRecordPtr^).cStrokes;
end;
procedure __PENDATAHEADER__Wrapper.setcPnt(const val : UINT);
begin
PENDATAHEADER(GetRecordPtr^).cPnt := val;
end;
function __PENDATAHEADER__Wrapper.getcPnt : UINT;
begin
result := PENDATAHEADER(GetRecordPtr^).cPnt;
end;
procedure __PENDATAHEADER__Wrapper.setcPntStrokeMax(const val : UINT);
begin
PENDATAHEADER(GetRecordPtr^).cPntStrokeMax := val;
end;
function __PENDATAHEADER__Wrapper.getcPntStrokeMax : UINT;
begin
result := PENDATAHEADER(GetRecordPtr^).cPntStrokeMax;
end;
procedure __PENDATAHEADER__Wrapper.setwPndts(const val : UINT);
begin
PENDATAHEADER(GetRecordPtr^).wPndts := val;
end;
function __PENDATAHEADER__Wrapper.getwPndts : UINT;
begin
result := PENDATAHEADER(GetRecordPtr^).wPndts;
end;
procedure __PENDATAHEADER__Wrapper.setnInkWidth(const val : Integer);
begin
PENDATAHEADER(GetRecordPtr^).nInkWidth := val;
end;
function __PENDATAHEADER__Wrapper.getnInkWidth : Integer;
begin
result := PENDATAHEADER(GetRecordPtr^).nInkWidth;
end;
procedure __PENDATAHEADER__Wrapper.setrgbInk(const val : DWORD);
begin
PENDATAHEADER(GetRecordPtr^).rgbInk := val;
end;
function __PENDATAHEADER__Wrapper.getrgbInk : DWORD;
begin
result := PENDATAHEADER(GetRecordPtr^).rgbInk;
end;
function __PENINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __PENINFO__Wrapper.setcxRawWidth(const val : UINT);
begin
PENINFO(GetRecordPtr^).cxRawWidth := val;
end;
function __PENINFO__Wrapper.getcxRawWidth : UINT;
begin
result := PENINFO(GetRecordPtr^).cxRawWidth;
end;
procedure __PENINFO__Wrapper.setcyRawHeight(const val : UINT);
begin
PENINFO(GetRecordPtr^).cyRawHeight := val;
end;
function __PENINFO__Wrapper.getcyRawHeight : UINT;
begin
result := PENINFO(GetRecordPtr^).cyRawHeight;
end;
procedure __PENINFO__Wrapper.setwDistinctWidth(const val : UINT);
begin
PENINFO(GetRecordPtr^).wDistinctWidth := val;
end;
function __PENINFO__Wrapper.getwDistinctWidth : UINT;
begin
result := PENINFO(GetRecordPtr^).wDistinctWidth;
end;
procedure __PENINFO__Wrapper.setwDistinctHeight(const val : UINT);
begin
PENINFO(GetRecordPtr^).wDistinctHeight := val;
end;
function __PENINFO__Wrapper.getwDistinctHeight : UINT;
begin
result := PENINFO(GetRecordPtr^).wDistinctHeight;
end;
procedure __PENINFO__Wrapper.setnSamplingRate(const val : Integer);
begin
PENINFO(GetRecordPtr^).nSamplingRate := val;
end;
function __PENINFO__Wrapper.getnSamplingRate : Integer;
begin
result := PENINFO(GetRecordPtr^).nSamplingRate;
end;
procedure __PENINFO__Wrapper.setnSamplingDist(const val : Integer);
begin
PENINFO(GetRecordPtr^).nSamplingDist := val;
end;
function __PENINFO__Wrapper.getnSamplingDist : Integer;
begin
result := PENINFO(GetRecordPtr^).nSamplingDist;
end;
procedure __PENINFO__Wrapper.setlPdc(const val : Longint);
begin
PENINFO(GetRecordPtr^).lPdc := val;
end;
function __PENINFO__Wrapper.getlPdc : Longint;
begin
result := PENINFO(GetRecordPtr^).lPdc;
end;
procedure __PENINFO__Wrapper.setcPens(const val : Integer);
begin
PENINFO(GetRecordPtr^).cPens := val;
end;
function __PENINFO__Wrapper.getcPens : Integer;
begin
result := PENINFO(GetRecordPtr^).cPens;
end;
procedure __PENINFO__Wrapper.setcbOemData(const val : Integer);
begin
PENINFO(GetRecordPtr^).cbOemData := val;
end;
function __PENINFO__Wrapper.getcbOemData : Integer;
begin
result := PENINFO(GetRecordPtr^).cbOemData;
end;
procedure __PENINFO__Wrapper.setfuOEM(const val : UINT);
begin
PENINFO(GetRecordPtr^).fuOEM := val;
end;
function __PENINFO__Wrapper.getfuOEM : UINT;
begin
result := PENINFO(GetRecordPtr^).fuOEM;
end;
function __PENPACKET__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __PENPACKET__Wrapper.setwTabletX(const val : UINT);
begin
PENPACKET(GetRecordPtr^).wTabletX := val;
end;
function __PENPACKET__Wrapper.getwTabletX : UINT;
begin
result := PENPACKET(GetRecordPtr^).wTabletX;
end;
procedure __PENPACKET__Wrapper.setwTabletY(const val : UINT);
begin
PENPACKET(GetRecordPtr^).wTabletY := val;
end;
function __PENPACKET__Wrapper.getwTabletY : UINT;
begin
result := PENPACKET(GetRecordPtr^).wTabletY;
end;
procedure __PENPACKET__Wrapper.setwPdk(const val : UINT);
begin
PENPACKET(GetRecordPtr^).wPdk := val;
end;
function __PENPACKET__Wrapper.getwPdk : UINT;
begin
result := PENPACKET(GetRecordPtr^).wPdk;
end;
function __PENTIP__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __PENTIP__Wrapper.setcbSize(const val : DWORD);
begin
PENTIP(GetRecordPtr^).cbSize := val;
end;
function __PENTIP__Wrapper.getcbSize : DWORD;
begin
result := PENTIP(GetRecordPtr^).cbSize;
end;
procedure __PENTIP__Wrapper.setbtype(const val : Byte);
begin
PENTIP(GetRecordPtr^).btype := val;
end;
function __PENTIP__Wrapper.getbtype : Byte;
begin
result := PENTIP(GetRecordPtr^).btype;
end;
procedure __PENTIP__Wrapper.setbwidth(const val : Byte);
begin
PENTIP(GetRecordPtr^).bwidth := val;
end;
function __PENTIP__Wrapper.getbwidth : Byte;
begin
result := PENTIP(GetRecordPtr^).bwidth;
end;
procedure __PENTIP__Wrapper.setbheight(const val : Byte);
begin
PENTIP(GetRecordPtr^).bheight := val;
end;
function __PENTIP__Wrapper.getbheight : Byte;
begin
result := PENTIP(GetRecordPtr^).bheight;
end;
procedure __PENTIP__Wrapper.setbOpacity(const val : Byte);
begin
PENTIP(GetRecordPtr^).bOpacity := val;
end;
function __PENTIP__Wrapper.getbOpacity : Byte;
begin
result := PENTIP(GetRecordPtr^).bOpacity;
end;
procedure __PENTIP__Wrapper.setrgb(const val : COLORREF);
begin
PENTIP(GetRecordPtr^).rgb := val;
end;
function __PENTIP__Wrapper.getrgb : COLORREF;
begin
result := PENTIP(GetRecordPtr^).rgb;
end;
procedure __PENTIP__Wrapper.setdwFlags(const val : DWORD);
begin
PENTIP(GetRecordPtr^).dwFlags := val;
end;
function __PENTIP__Wrapper.getdwFlags : DWORD;
begin
result := PENTIP(GetRecordPtr^).dwFlags;
end;
procedure __PENTIP__Wrapper.setdwReserved(const val : DWORD);
begin
PENTIP(GetRecordPtr^).dwReserved := val;
end;
function __PENTIP__Wrapper.getdwReserved : DWORD;
begin
result := PENTIP(GetRecordPtr^).dwReserved;
end;
function __RC__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __RC__Wrapper.setHREC(const val : HREC);
begin
RC(GetRecordPtr^).HREC := val;
end;
function __RC__Wrapper.getHREC : HREC;
begin
result := RC(GetRecordPtr^).HREC;
end;
procedure __RC__Wrapper.setwEventRef(const val : UINT);
begin
RC(GetRecordPtr^).wEventRef := val;
end;
function __RC__Wrapper.getwEventRef : UINT;
begin
result := RC(GetRecordPtr^).wEventRef;
end;
procedure __RC__Wrapper.setwRcPreferences(const val : UINT);
begin
RC(GetRecordPtr^).wRcPreferences := val;
end;
function __RC__Wrapper.getwRcPreferences : UINT;
begin
result := RC(GetRecordPtr^).wRcPreferences;
end;
procedure __RC__Wrapper.setlRcOptions(const val : Longint);
begin
RC(GetRecordPtr^).lRcOptions := val;
end;
function __RC__Wrapper.getlRcOptions : Longint;
begin
result := RC(GetRecordPtr^).lRcOptions;
end;
procedure __RC__Wrapper.setwCountry(const val : UINT);
begin
RC(GetRecordPtr^).wCountry := val;
end;
function __RC__Wrapper.getwCountry : UINT;
begin
result := RC(GetRecordPtr^).wCountry;
end;
procedure __RC__Wrapper.setwIntlPreferences(const val : UINT);
begin
RC(GetRecordPtr^).wIntlPreferences := val;
end;
function __RC__Wrapper.getwIntlPreferences : UINT;
begin
result := RC(GetRecordPtr^).wIntlPreferences;
end;
procedure __RC__Wrapper.setwTryDictionary(const val : UINT);
begin
RC(GetRecordPtr^).wTryDictionary := val;
end;
function __RC__Wrapper.getwTryDictionary : UINT;
begin
result := RC(GetRecordPtr^).wTryDictionary;
end;
procedure __RC__Wrapper.setclErrorLevel(const val : CL);
begin
RC(GetRecordPtr^).clErrorLevel := val;
end;
function __RC__Wrapper.getclErrorLevel : CL;
begin
result := RC(GetRecordPtr^).clErrorLevel;
end;
procedure __RC__Wrapper.setALC(const val : ALC);
begin
RC(GetRecordPtr^).ALC := val;
end;
function __RC__Wrapper.getALC : ALC;
begin
result := RC(GetRecordPtr^).ALC;
end;
procedure __RC__Wrapper.setalcPriority(const val : ALC);
begin
RC(GetRecordPtr^).alcPriority := val;
end;
function __RC__Wrapper.getalcPriority : ALC;
begin
result := RC(GetRecordPtr^).alcPriority;
end;
procedure __RC__Wrapper.setwResultMode(const val : UINT);
begin
RC(GetRecordPtr^).wResultMode := val;
end;
function __RC__Wrapper.getwResultMode : UINT;
begin
result := RC(GetRecordPtr^).wResultMode;
end;
procedure __RC__Wrapper.setwTimeOut(const val : UINT);
begin
RC(GetRecordPtr^).wTimeOut := val;
end;
function __RC__Wrapper.getwTimeOut : UINT;
begin
result := RC(GetRecordPtr^).wTimeOut;
end;
procedure __RC__Wrapper.setlPcm(const val : Longint);
begin
RC(GetRecordPtr^).lPcm := val;
end;
function __RC__Wrapper.getlPcm : Longint;
begin
result := RC(GetRecordPtr^).lPcm;
end;
procedure __RC__Wrapper.setwRcOrient(const val : UINT);
begin
RC(GetRecordPtr^).wRcOrient := val;
end;
function __RC__Wrapper.getwRcOrient : UINT;
begin
result := RC(GetRecordPtr^).wRcOrient;
end;
procedure __RC__Wrapper.setwRcDirect(const val : UINT);
begin
RC(GetRecordPtr^).wRcDirect := val;
end;
function __RC__Wrapper.getwRcDirect : UINT;
begin
result := RC(GetRecordPtr^).wRcDirect;
end;
procedure __RC__Wrapper.setnInkWidth(const val : Integer);
begin
RC(GetRecordPtr^).nInkWidth := val;
end;
function __RC__Wrapper.getnInkWidth : Integer;
begin
result := RC(GetRecordPtr^).nInkWidth;
end;
procedure __RC__Wrapper.setrgbInk(const val : COLORREF);
begin
RC(GetRecordPtr^).rgbInk := val;
end;
function __RC__Wrapper.getrgbInk : COLORREF;
begin
result := RC(GetRecordPtr^).rgbInk;
end;
procedure __RC__Wrapper.setdwAppParam(const val : DWORD);
begin
RC(GetRecordPtr^).dwAppParam := val;
end;
function __RC__Wrapper.getdwAppParam : DWORD;
begin
result := RC(GetRecordPtr^).dwAppParam;
end;
procedure __RC__Wrapper.setdwDictParam(const val : DWORD);
begin
RC(GetRecordPtr^).dwDictParam := val;
end;
function __RC__Wrapper.getdwDictParam : DWORD;
begin
result := RC(GetRecordPtr^).dwDictParam;
end;
procedure __RC__Wrapper.setdwRecognizer(const val : DWORD);
begin
RC(GetRecordPtr^).dwRecognizer := val;
end;
function __RC__Wrapper.getdwRecognizer : DWORD;
begin
result := RC(GetRecordPtr^).dwRecognizer;
end;
function __RCRESULT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __RCRESULT__Wrapper.setwResultsType(const val : UINT);
begin
RCRESULT(GetRecordPtr^).wResultsType := val;
end;
function __RCRESULT__Wrapper.getwResultsType : UINT;
begin
result := RCRESULT(GetRecordPtr^).wResultsType;
end;
procedure __RCRESULT__Wrapper.setcSyv(const val : Integer);
begin
RCRESULT(GetRecordPtr^).cSyv := val;
end;
function __RCRESULT__Wrapper.getcSyv : Integer;
begin
result := RCRESULT(GetRecordPtr^).cSyv;
end;
procedure __RCRESULT__Wrapper.sethSyv(const val : THandle);
begin
RCRESULT(GetRecordPtr^).hSyv := val;
end;
function __RCRESULT__Wrapper.gethSyv : THandle;
begin
result := RCRESULT(GetRecordPtr^).hSyv;
end;
procedure __RCRESULT__Wrapper.setnBaseLine(const val : Integer);
begin
RCRESULT(GetRecordPtr^).nBaseLine := val;
end;
function __RCRESULT__Wrapper.getnBaseLine : Integer;
begin
result := RCRESULT(GetRecordPtr^).nBaseLine;
end;
procedure __RCRESULT__Wrapper.setnMidLine(const val : Integer);
begin
RCRESULT(GetRecordPtr^).nMidLine := val;
end;
function __RCRESULT__Wrapper.getnMidLine : Integer;
begin
result := RCRESULT(GetRecordPtr^).nMidLine;
end;
procedure __RCRESULT__Wrapper.setHPENDATA(const val : HPENDATA);
begin
RCRESULT(GetRecordPtr^).HPENDATA := val;
end;
function __RCRESULT__Wrapper.getHPENDATA : HPENDATA;
begin
result := RCRESULT(GetRecordPtr^).HPENDATA;
end;
function __RECTOFS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __RECTOFS__Wrapper.setdLeft(const val : Integer);
begin
RECTOFS(GetRecordPtr^).dLeft := val;
end;
function __RECTOFS__Wrapper.getdLeft : Integer;
begin
result := RECTOFS(GetRecordPtr^).dLeft;
end;
procedure __RECTOFS__Wrapper.setdTop(const val : Integer);
begin
RECTOFS(GetRecordPtr^).dTop := val;
end;
function __RECTOFS__Wrapper.getdTop : Integer;
begin
result := RECTOFS(GetRecordPtr^).dTop;
end;
procedure __RECTOFS__Wrapper.setdRight(const val : Integer);
begin
RECTOFS(GetRecordPtr^).dRight := val;
end;
function __RECTOFS__Wrapper.getdRight : Integer;
begin
result := RECTOFS(GetRecordPtr^).dRight;
end;
procedure __RECTOFS__Wrapper.setdBottom(const val : Integer);
begin
RECTOFS(GetRecordPtr^).dBottom := val;
end;
function __RECTOFS__Wrapper.getdBottom : Integer;
begin
result := RECTOFS(GetRecordPtr^).dBottom;
end;
function __SKBINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __SKBINFO__Wrapper.setnPad(const val : Word);
begin
SKBINFO(GetRecordPtr^).nPad := val;
end;
function __SKBINFO__Wrapper.getnPad : Word;
begin
result := SKBINFO(GetRecordPtr^).nPad;
end;
procedure __SKBINFO__Wrapper.setfVisible(const val : BOOL);
begin
SKBINFO(GetRecordPtr^).fVisible := val;
end;
function __SKBINFO__Wrapper.getfVisible : BOOL;
begin
result := SKBINFO(GetRecordPtr^).fVisible;
end;
procedure __SKBINFO__Wrapper.setfMinimized(const val : BOOL);
begin
SKBINFO(GetRecordPtr^).fMinimized := val;
end;
function __SKBINFO__Wrapper.getfMinimized : BOOL;
begin
result := SKBINFO(GetRecordPtr^).fMinimized;
end;
procedure __SKBINFO__Wrapper.setdwReserved(const val : Longint);
begin
SKBINFO(GetRecordPtr^).dwReserved := val;
end;
function __SKBINFO__Wrapper.getdwReserved : Longint;
begin
result := SKBINFO(GetRecordPtr^).dwReserved;
end;
function __STRKFMT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __STRKFMT__Wrapper.setcbSize(const val : DWORD);
begin
STRKFMT(GetRecordPtr^).cbSize := val;
end;
function __STRKFMT__Wrapper.getcbSize : DWORD;
begin
result := STRKFMT(GetRecordPtr^).cbSize;
end;
procedure __STRKFMT__Wrapper.setiesf(const val : UINT);
begin
STRKFMT(GetRecordPtr^).iesf := val;
end;
function __STRKFMT__Wrapper.getiesf : UINT;
begin
result := STRKFMT(GetRecordPtr^).iesf;
end;
procedure __STRKFMT__Wrapper.setiStrk(const val : UINT);
begin
STRKFMT(GetRecordPtr^).iStrk := val;
end;
function __STRKFMT__Wrapper.getiStrk : UINT;
begin
result := STRKFMT(GetRecordPtr^).iStrk;
end;
procedure __STRKFMT__Wrapper.setdwUser(const val : DWORD);
begin
STRKFMT(GetRecordPtr^).dwUser := val;
end;
function __STRKFMT__Wrapper.getdwUser : DWORD;
begin
result := STRKFMT(GetRecordPtr^).dwUser;
end;
procedure __STRKFMT__Wrapper.setdwReserved(const val : DWORD);
begin
STRKFMT(GetRecordPtr^).dwReserved := val;
end;
function __STRKFMT__Wrapper.getdwReserved : DWORD;
begin
result := STRKFMT(GetRecordPtr^).dwReserved;
end;
function __STROKEINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __STROKEINFO__Wrapper.setcPnt(const val : UINT);
begin
STROKEINFO(GetRecordPtr^).cPnt := val;
end;
function __STROKEINFO__Wrapper.getcPnt : UINT;
begin
result := STROKEINFO(GetRecordPtr^).cPnt;
end;
procedure __STROKEINFO__Wrapper.setcbPnts(const val : UINT);
begin
STROKEINFO(GetRecordPtr^).cbPnts := val;
end;
function __STROKEINFO__Wrapper.getcbPnts : UINT;
begin
result := STROKEINFO(GetRecordPtr^).cbPnts;
end;
procedure __STROKEINFO__Wrapper.setwPdk(const val : UINT);
begin
STROKEINFO(GetRecordPtr^).wPdk := val;
end;
function __STROKEINFO__Wrapper.getwPdk : UINT;
begin
result := STROKEINFO(GetRecordPtr^).wPdk;
end;
procedure __STROKEINFO__Wrapper.setdwTick(const val : DWORD);
begin
STROKEINFO(GetRecordPtr^).dwTick := val;
end;
function __STROKEINFO__Wrapper.getdwTick : DWORD;
begin
result := STROKEINFO(GetRecordPtr^).dwTick;
end;
function __SYC__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __SYC__Wrapper.setwStrokeFirst(const val : UINT);
begin
SYC(GetRecordPtr^).wStrokeFirst := val;
end;
function __SYC__Wrapper.getwStrokeFirst : UINT;
begin
result := SYC(GetRecordPtr^).wStrokeFirst;
end;
procedure __SYC__Wrapper.setwPntFirst(const val : UINT);
begin
SYC(GetRecordPtr^).wPntFirst := val;
end;
function __SYC__Wrapper.getwPntFirst : UINT;
begin
result := SYC(GetRecordPtr^).wPntFirst;
end;
procedure __SYC__Wrapper.setwStrokeLast(const val : UINT);
begin
SYC(GetRecordPtr^).wStrokeLast := val;
end;
function __SYC__Wrapper.getwStrokeLast : UINT;
begin
result := SYC(GetRecordPtr^).wStrokeLast;
end;
procedure __SYC__Wrapper.setwPntLast(const val : UINT);
begin
SYC(GetRecordPtr^).wPntLast := val;
end;
function __SYC__Wrapper.getwPntLast : UINT;
begin
result := SYC(GetRecordPtr^).wPntLast;
end;
procedure __SYC__Wrapper.setfLastSyc(const val : BOOL);
begin
SYC(GetRecordPtr^).fLastSyc := val;
end;
function __SYC__Wrapper.getfLastSyc : BOOL;
begin
result := SYC(GetRecordPtr^).fLastSyc;
end;
function __SYE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __SYE__Wrapper.setSYV(const val : SYV);
begin
SYE(GetRecordPtr^).SYV := val;
end;
function __SYE__Wrapper.getSYV : SYV;
begin
result := SYE(GetRecordPtr^).SYV;
end;
procedure __SYE__Wrapper.setlRecogVal(const val : Longint);
begin
SYE(GetRecordPtr^).lRecogVal := val;
end;
function __SYE__Wrapper.getlRecogVal : Longint;
begin
result := SYE(GetRecordPtr^).lRecogVal;
end;
procedure __SYE__Wrapper.setCL(const val : CL);
begin
SYE(GetRecordPtr^).CL := val;
end;
function __SYE__Wrapper.getCL : CL;
begin
result := SYE(GetRecordPtr^).CL;
end;
procedure __SYE__Wrapper.setiSyc(const val : Integer);
begin
SYE(GetRecordPtr^).iSyc := val;
end;
function __SYE__Wrapper.getiSyc : Integer;
begin
result := SYE(GetRecordPtr^).iSyc;
end;
function __SYG__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __SYG__Wrapper.setcHotSpot(const val : Integer);
begin
SYG(GetRecordPtr^).cHotSpot := val;
end;
function __SYG__Wrapper.getcHotSpot : Integer;
begin
result := SYG(GetRecordPtr^).cHotSpot;
end;
procedure __SYG__Wrapper.setnFirstBox(const val : Integer);
begin
SYG(GetRecordPtr^).nFirstBox := val;
end;
function __SYG__Wrapper.getnFirstBox : Integer;
begin
result := SYG(GetRecordPtr^).nFirstBox;
end;
procedure __SYG__Wrapper.setlRecogVal(const val : Longint);
begin
SYG(GetRecordPtr^).lRecogVal := val;
end;
function __SYG__Wrapper.getlRecogVal : Longint;
begin
result := SYG(GetRecordPtr^).lRecogVal;
end;
procedure __SYG__Wrapper.setcSye(const val : Integer);
begin
SYG(GetRecordPtr^).cSye := val;
end;
function __SYG__Wrapper.getcSye : Integer;
begin
result := SYG(GetRecordPtr^).cSye;
end;
procedure __SYG__Wrapper.setcSyc(const val : Integer);
begin
SYG(GetRecordPtr^).cSyc := val;
end;
function __SYG__Wrapper.getcSyc : Integer;
begin
result := SYG(GetRecordPtr^).cSyc;
end;
function __TAbsTime__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TAbsTime__Wrapper.setsec(const val : DWORD);
begin
TAbsTime(GetRecordPtr^).sec := val;
end;
function __TAbsTime__Wrapper.getsec : DWORD;
begin
result := TAbsTime(GetRecordPtr^).sec;
end;
procedure __TAbsTime__Wrapper.setms(const val : UINT);
begin
TAbsTime(GetRecordPtr^).ms := val;
end;
function __TAbsTime__Wrapper.getms : UINT;
begin
result := TAbsTime(GetRecordPtr^).ms;
end;
function __tagABSTIME__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagABSTIME__Wrapper.setsec(const val : DWORD);
begin
tagABSTIME(GetRecordPtr^).sec := val;
end;
function __tagABSTIME__Wrapper.getsec : DWORD;
begin
result := tagABSTIME(GetRecordPtr^).sec;
end;
procedure __tagABSTIME__Wrapper.setms(const val : UINT);
begin
tagABSTIME(GetRecordPtr^).ms := val;
end;
function __tagABSTIME__Wrapper.getms : UINT;
begin
result := tagABSTIME(GetRecordPtr^).ms;
end;
function __tagANIMATEINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagANIMATEINFO__Wrapper.setcbSize(const val : DWORD);
begin
tagANIMATEINFO(GetRecordPtr^).cbSize := val;
end;
function __tagANIMATEINFO__Wrapper.getcbSize : DWORD;
begin
result := tagANIMATEINFO(GetRecordPtr^).cbSize;
end;
procedure __tagANIMATEINFO__Wrapper.setuSpeedPct(const val : UINT);
begin
tagANIMATEINFO(GetRecordPtr^).uSpeedPct := val;
end;
function __tagANIMATEINFO__Wrapper.getuSpeedPct : UINT;
begin
result := tagANIMATEINFO(GetRecordPtr^).uSpeedPct;
end;
procedure __tagANIMATEINFO__Wrapper.setuPeriodCB(const val : UINT);
begin
tagANIMATEINFO(GetRecordPtr^).uPeriodCB := val;
end;
function __tagANIMATEINFO__Wrapper.getuPeriodCB : UINT;
begin
result := tagANIMATEINFO(GetRecordPtr^).uPeriodCB;
end;
procedure __tagANIMATEINFO__Wrapper.setfuFlags(const val : UINT);
begin
tagANIMATEINFO(GetRecordPtr^).fuFlags := val;
end;
function __tagANIMATEINFO__Wrapper.getfuFlags : UINT;
begin
result := tagANIMATEINFO(GetRecordPtr^).fuFlags;
end;
procedure __tagANIMATEINFO__Wrapper.setLPARAM(const val : LPARAM);
begin
tagANIMATEINFO(GetRecordPtr^).LPARAM := val;
end;
function __tagANIMATEINFO__Wrapper.getLPARAM : LPARAM;
begin
result := tagANIMATEINFO(GetRecordPtr^).LPARAM;
end;
procedure __tagANIMATEINFO__Wrapper.setdwReserved(const val : DWORD);
begin
tagANIMATEINFO(GetRecordPtr^).dwReserved := val;
end;
function __tagANIMATEINFO__Wrapper.getdwReserved : DWORD;
begin
result := tagANIMATEINFO(GetRecordPtr^).dwReserved;
end;
function __tagBOXEDITINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagBOXEDITINFO__Wrapper.setcxBox(const val : Integer);
begin
tagBOXEDITINFO(GetRecordPtr^).cxBox := val;
end;
function __tagBOXEDITINFO__Wrapper.getcxBox : Integer;
begin
result := tagBOXEDITINFO(GetRecordPtr^).cxBox;
end;
procedure __tagBOXEDITINFO__Wrapper.setcyBox(const val : Integer);
begin
tagBOXEDITINFO(GetRecordPtr^).cyBox := val;
end;
function __tagBOXEDITINFO__Wrapper.getcyBox : Integer;
begin
result := tagBOXEDITINFO(GetRecordPtr^).cyBox;
end;
procedure __tagBOXEDITINFO__Wrapper.setcxBase(const val : Integer);
begin
tagBOXEDITINFO(GetRecordPtr^).cxBase := val;
end;
function __tagBOXEDITINFO__Wrapper.getcxBase : Integer;
begin
result := tagBOXEDITINFO(GetRecordPtr^).cxBase;
end;
procedure __tagBOXEDITINFO__Wrapper.setcyBase(const val : Integer);
begin
tagBOXEDITINFO(GetRecordPtr^).cyBase := val;
end;
function __tagBOXEDITINFO__Wrapper.getcyBase : Integer;
begin
result := tagBOXEDITINFO(GetRecordPtr^).cyBase;
end;
procedure __tagBOXEDITINFO__Wrapper.setcyMid(const val : Integer);
begin
tagBOXEDITINFO(GetRecordPtr^).cyMid := val;
end;
function __tagBOXEDITINFO__Wrapper.getcyMid : Integer;
begin
result := tagBOXEDITINFO(GetRecordPtr^).cyMid;
end;
procedure __tagBOXEDITINFO__Wrapper.setwFlags(const val : UINT);
begin
tagBOXEDITINFO(GetRecordPtr^).wFlags := val;
end;
function __tagBOXEDITINFO__Wrapper.getwFlags : UINT;
begin
result := tagBOXEDITINFO(GetRecordPtr^).wFlags;
end;
procedure __tagBOXEDITINFO__Wrapper.setwFontHeight(const val : UINT);
begin
tagBOXEDITINFO(GetRecordPtr^).wFontHeight := val;
end;
function __tagBOXEDITINFO__Wrapper.getwFontHeight : UINT;
begin
result := tagBOXEDITINFO(GetRecordPtr^).wFontHeight;
end;
function __tagBOXLAYOUT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagBOXLAYOUT__Wrapper.setcyCusp(const val : Integer);
begin
tagBOXLAYOUT(GetRecordPtr^).cyCusp := val;
end;
function __tagBOXLAYOUT__Wrapper.getcyCusp : Integer;
begin
result := tagBOXLAYOUT(GetRecordPtr^).cyCusp;
end;
procedure __tagBOXLAYOUT__Wrapper.setcyEndCusp(const val : Integer);
begin
tagBOXLAYOUT(GetRecordPtr^).cyEndCusp := val;
end;
function __tagBOXLAYOUT__Wrapper.getcyEndCusp : Integer;
begin
result := tagBOXLAYOUT(GetRecordPtr^).cyEndCusp;
end;
procedure __tagBOXLAYOUT__Wrapper.setstyle(const val : UINT);
begin
tagBOXLAYOUT(GetRecordPtr^).style := val;
end;
function __tagBOXLAYOUT__Wrapper.getstyle : UINT;
begin
result := tagBOXLAYOUT(GetRecordPtr^).style;
end;
procedure __tagBOXLAYOUT__Wrapper.setdwReserved1(const val : DWORD);
begin
tagBOXLAYOUT(GetRecordPtr^).dwReserved1 := val;
end;
function __tagBOXLAYOUT__Wrapper.getdwReserved1 : DWORD;
begin
result := tagBOXLAYOUT(GetRecordPtr^).dwReserved1;
end;
procedure __tagBOXLAYOUT__Wrapper.setdwReserved2(const val : DWORD);
begin
tagBOXLAYOUT(GetRecordPtr^).dwReserved2 := val;
end;
function __tagBOXLAYOUT__Wrapper.getdwReserved2 : DWORD;
begin
result := tagBOXLAYOUT(GetRecordPtr^).dwReserved2;
end;
procedure __tagBOXLAYOUT__Wrapper.setdwReserved3(const val : DWORD);
begin
tagBOXLAYOUT(GetRecordPtr^).dwReserved3 := val;
end;
function __tagBOXLAYOUT__Wrapper.getdwReserved3 : DWORD;
begin
result := tagBOXLAYOUT(GetRecordPtr^).dwReserved3;
end;
function __tagBOXRESULTS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagBOXRESULTS__Wrapper.setindxBox(const val : UINT);
begin
tagBOXRESULTS(GetRecordPtr^).indxBox := val;
end;
function __tagBOXRESULTS__Wrapper.getindxBox : UINT;
begin
result := tagBOXRESULTS(GetRecordPtr^).indxBox;
end;
procedure __tagBOXRESULTS__Wrapper.sethinksetBox(const val : HINKSET);
begin
tagBOXRESULTS(GetRecordPtr^).hinksetBox := val;
end;
function __tagBOXRESULTS__Wrapper.gethinksetBox : HINKSET;
begin
result := tagBOXRESULTS(GetRecordPtr^).hinksetBox;
end;
function __tagCALBSTRUCT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagCALBSTRUCT__Wrapper.setwOffsetX(const val : Integer);
begin
tagCALBSTRUCT(GetRecordPtr^).wOffsetX := val;
end;
function __tagCALBSTRUCT__Wrapper.getwOffsetX : Integer;
begin
result := tagCALBSTRUCT(GetRecordPtr^).wOffsetX;
end;
procedure __tagCALBSTRUCT__Wrapper.setwOffsetY(const val : Integer);
begin
tagCALBSTRUCT(GetRecordPtr^).wOffsetY := val;
end;
function __tagCALBSTRUCT__Wrapper.getwOffsetY : Integer;
begin
result := tagCALBSTRUCT(GetRecordPtr^).wOffsetY;
end;
procedure __tagCALBSTRUCT__Wrapper.setwDistinctWidth(const val : Integer);
begin
tagCALBSTRUCT(GetRecordPtr^).wDistinctWidth := val;
end;
function __tagCALBSTRUCT__Wrapper.getwDistinctWidth : Integer;
begin
result := tagCALBSTRUCT(GetRecordPtr^).wDistinctWidth;
end;
procedure __tagCALBSTRUCT__Wrapper.setwDistinctHeight(const val : Integer);
begin
tagCALBSTRUCT(GetRecordPtr^).wDistinctHeight := val;
end;
function __tagCALBSTRUCT__Wrapper.getwDistinctHeight : Integer;
begin
result := tagCALBSTRUCT(GetRecordPtr^).wDistinctHeight;
end;
function __tagCTLINITBEDIT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagCTLINITBEDIT__Wrapper.setcbSize(const val : DWORD);
begin
tagCTLINITBEDIT(GetRecordPtr^).cbSize := val;
end;
function __tagCTLINITBEDIT__Wrapper.getcbSize : DWORD;
begin
result := tagCTLINITBEDIT(GetRecordPtr^).cbSize;
end;
procedure __tagCTLINITBEDIT__Wrapper.setid(const val : Integer);
begin
tagCTLINITBEDIT(GetRecordPtr^).id := val;
end;
function __tagCTLINITBEDIT__Wrapper.getid : Integer;
begin
result := tagCTLINITBEDIT(GetRecordPtr^).id;
end;
procedure __tagCTLINITBEDIT__Wrapper.setwSizeCategory(const val : Word);
begin
tagCTLINITBEDIT(GetRecordPtr^).wSizeCategory := val;
end;
function __tagCTLINITBEDIT__Wrapper.getwSizeCategory : Word;
begin
result := tagCTLINITBEDIT(GetRecordPtr^).wSizeCategory;
end;
procedure __tagCTLINITBEDIT__Wrapper.setwFlags(const val : Word);
begin
tagCTLINITBEDIT(GetRecordPtr^).wFlags := val;
end;
function __tagCTLINITBEDIT__Wrapper.getwFlags : Word;
begin
result := tagCTLINITBEDIT(GetRecordPtr^).wFlags;
end;
procedure __tagCTLINITBEDIT__Wrapper.setdwReserved(const val : DWORD);
begin
tagCTLINITBEDIT(GetRecordPtr^).dwReserved := val;
end;
function __tagCTLINITBEDIT__Wrapper.getdwReserved : DWORD;
begin
result := tagCTLINITBEDIT(GetRecordPtr^).dwReserved;
end;
function __tagCTLINITHEDIT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagCTLINITHEDIT__Wrapper.setcbSize(const val : DWORD);
begin
tagCTLINITHEDIT(GetRecordPtr^).cbSize := val;
end;
function __tagCTLINITHEDIT__Wrapper.getcbSize : DWORD;
begin
result := tagCTLINITHEDIT(GetRecordPtr^).cbSize;
end;
procedure __tagCTLINITHEDIT__Wrapper.setid(const val : Integer);
begin
tagCTLINITHEDIT(GetRecordPtr^).id := val;
end;
function __tagCTLINITHEDIT__Wrapper.getid : Integer;
begin
result := tagCTLINITHEDIT(GetRecordPtr^).id;
end;
procedure __tagCTLINITHEDIT__Wrapper.setdwFlags(const val : DWORD);
begin
tagCTLINITHEDIT(GetRecordPtr^).dwFlags := val;
end;
function __tagCTLINITHEDIT__Wrapper.getdwFlags : DWORD;
begin
result := tagCTLINITHEDIT(GetRecordPtr^).dwFlags;
end;
procedure __tagCTLINITHEDIT__Wrapper.setdwReserved(const val : DWORD);
begin
tagCTLINITHEDIT(GetRecordPtr^).dwReserved := val;
end;
function __tagCTLINITHEDIT__Wrapper.getdwReserved : DWORD;
begin
result := tagCTLINITHEDIT(GetRecordPtr^).dwReserved;
end;
function __tagCTLINITIEDIT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagCTLINITIEDIT__Wrapper.setcbSize(const val : DWORD);
begin
tagCTLINITIEDIT(GetRecordPtr^).cbSize := val;
end;
function __tagCTLINITIEDIT__Wrapper.getcbSize : DWORD;
begin
result := tagCTLINITIEDIT(GetRecordPtr^).cbSize;
end;
procedure __tagCTLINITIEDIT__Wrapper.setid(const val : Integer);
begin
tagCTLINITIEDIT(GetRecordPtr^).id := val;
end;
function __tagCTLINITIEDIT__Wrapper.getid : Integer;
begin
result := tagCTLINITIEDIT(GetRecordPtr^).id;
end;
procedure __tagCTLINITIEDIT__Wrapper.setieb(const val : Word);
begin
tagCTLINITIEDIT(GetRecordPtr^).ieb := val;
end;
function __tagCTLINITIEDIT__Wrapper.getieb : Word;
begin
result := tagCTLINITIEDIT(GetRecordPtr^).ieb;
end;
procedure __tagCTLINITIEDIT__Wrapper.setiedo(const val : Word);
begin
tagCTLINITIEDIT(GetRecordPtr^).iedo := val;
end;
function __tagCTLINITIEDIT__Wrapper.getiedo : Word;
begin
result := tagCTLINITIEDIT(GetRecordPtr^).iedo;
end;
procedure __tagCTLINITIEDIT__Wrapper.setiei(const val : Word);
begin
tagCTLINITIEDIT(GetRecordPtr^).iei := val;
end;
function __tagCTLINITIEDIT__Wrapper.getiei : Word;
begin
result := tagCTLINITIEDIT(GetRecordPtr^).iei;
end;
procedure __tagCTLINITIEDIT__Wrapper.setien(const val : Word);
begin
tagCTLINITIEDIT(GetRecordPtr^).ien := val;
end;
function __tagCTLINITIEDIT__Wrapper.getien : Word;
begin
result := tagCTLINITIEDIT(GetRecordPtr^).ien;
end;
procedure __tagCTLINITIEDIT__Wrapper.setierec(const val : Word);
begin
tagCTLINITIEDIT(GetRecordPtr^).ierec := val;
end;
function __tagCTLINITIEDIT__Wrapper.getierec : Word;
begin
result := tagCTLINITIEDIT(GetRecordPtr^).ierec;
end;
procedure __tagCTLINITIEDIT__Wrapper.seties(const val : Word);
begin
tagCTLINITIEDIT(GetRecordPtr^).ies := val;
end;
function __tagCTLINITIEDIT__Wrapper.geties : Word;
begin
result := tagCTLINITIEDIT(GetRecordPtr^).ies;
end;
procedure __tagCTLINITIEDIT__Wrapper.setiesec(const val : Word);
begin
tagCTLINITIEDIT(GetRecordPtr^).iesec := val;
end;
function __tagCTLINITIEDIT__Wrapper.getiesec : Word;
begin
result := tagCTLINITIEDIT(GetRecordPtr^).iesec;
end;
procedure __tagCTLINITIEDIT__Wrapper.setpdts(const val : Word);
begin
tagCTLINITIEDIT(GetRecordPtr^).pdts := val;
end;
function __tagCTLINITIEDIT__Wrapper.getpdts : Word;
begin
result := tagCTLINITIEDIT(GetRecordPtr^).pdts;
end;
procedure __tagCTLINITIEDIT__Wrapper.sethpndt(const val : HPENDATA);
begin
tagCTLINITIEDIT(GetRecordPtr^).hpndt := val;
end;
function __tagCTLINITIEDIT__Wrapper.gethpndt : HPENDATA;
begin
result := tagCTLINITIEDIT(GetRecordPtr^).hpndt;
end;
procedure __tagCTLINITIEDIT__Wrapper.setwVGrid(const val : Word);
begin
tagCTLINITIEDIT(GetRecordPtr^).wVGrid := val;
end;
function __tagCTLINITIEDIT__Wrapper.getwVGrid : Word;
begin
result := tagCTLINITIEDIT(GetRecordPtr^).wVGrid;
end;
procedure __tagCTLINITIEDIT__Wrapper.setwHGrid(const val : Word);
begin
tagCTLINITIEDIT(GetRecordPtr^).wHGrid := val;
end;
function __tagCTLINITIEDIT__Wrapper.getwHGrid : Word;
begin
result := tagCTLINITIEDIT(GetRecordPtr^).wHGrid;
end;
procedure __tagCTLINITIEDIT__Wrapper.setdwApp(const val : DWORD);
begin
tagCTLINITIEDIT(GetRecordPtr^).dwApp := val;
end;
function __tagCTLINITIEDIT__Wrapper.getdwApp : DWORD;
begin
result := tagCTLINITIEDIT(GetRecordPtr^).dwApp;
end;
procedure __tagCTLINITIEDIT__Wrapper.setdwReserved(const val : DWORD);
begin
tagCTLINITIEDIT(GetRecordPtr^).dwReserved := val;
end;
function __tagCTLINITIEDIT__Wrapper.getdwReserved : DWORD;
begin
result := tagCTLINITIEDIT(GetRecordPtr^).dwReserved;
end;
function __tagGUIDE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagGUIDE__Wrapper.setxOrigin(const val : Integer);
begin
tagGUIDE(GetRecordPtr^).xOrigin := val;
end;
function __tagGUIDE__Wrapper.getxOrigin : Integer;
begin
result := tagGUIDE(GetRecordPtr^).xOrigin;
end;
procedure __tagGUIDE__Wrapper.setyOrigin(const val : Integer);
begin
tagGUIDE(GetRecordPtr^).yOrigin := val;
end;
function __tagGUIDE__Wrapper.getyOrigin : Integer;
begin
result := tagGUIDE(GetRecordPtr^).yOrigin;
end;
procedure __tagGUIDE__Wrapper.setcxBox(const val : Integer);
begin
tagGUIDE(GetRecordPtr^).cxBox := val;
end;
function __tagGUIDE__Wrapper.getcxBox : Integer;
begin
result := tagGUIDE(GetRecordPtr^).cxBox;
end;
procedure __tagGUIDE__Wrapper.setcyBox(const val : Integer);
begin
tagGUIDE(GetRecordPtr^).cyBox := val;
end;
function __tagGUIDE__Wrapper.getcyBox : Integer;
begin
result := tagGUIDE(GetRecordPtr^).cyBox;
end;
procedure __tagGUIDE__Wrapper.setcxBase(const val : Integer);
begin
tagGUIDE(GetRecordPtr^).cxBase := val;
end;
function __tagGUIDE__Wrapper.getcxBase : Integer;
begin
result := tagGUIDE(GetRecordPtr^).cxBase;
end;
procedure __tagGUIDE__Wrapper.setcyBase(const val : Integer);
begin
tagGUIDE(GetRecordPtr^).cyBase := val;
end;
function __tagGUIDE__Wrapper.getcyBase : Integer;
begin
result := tagGUIDE(GetRecordPtr^).cyBase;
end;
procedure __tagGUIDE__Wrapper.setcHorzBox(const val : Integer);
begin
tagGUIDE(GetRecordPtr^).cHorzBox := val;
end;
function __tagGUIDE__Wrapper.getcHorzBox : Integer;
begin
result := tagGUIDE(GetRecordPtr^).cHorzBox;
end;
procedure __tagGUIDE__Wrapper.setcVertBox(const val : Integer);
begin
tagGUIDE(GetRecordPtr^).cVertBox := val;
end;
function __tagGUIDE__Wrapper.getcVertBox : Integer;
begin
result := tagGUIDE(GetRecordPtr^).cVertBox;
end;
procedure __tagGUIDE__Wrapper.setcyMid(const val : Integer);
begin
tagGUIDE(GetRecordPtr^).cyMid := val;
end;
function __tagGUIDE__Wrapper.getcyMid : Integer;
begin
result := tagGUIDE(GetRecordPtr^).cyMid;
end;
function __tagIMECOLORS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagIMECOLORS__Wrapper.setcColors(const val : Integer);
begin
tagIMECOLORS(GetRecordPtr^).cColors := val;
end;
function __tagIMECOLORS__Wrapper.getcColors : Integer;
begin
result := tagIMECOLORS(GetRecordPtr^).cColors;
end;
function __tagINKINGINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagINKINGINFO__Wrapper.setcbSize(const val : DWORD);
begin
tagINKINGINFO(GetRecordPtr^).cbSize := val;
end;
function __tagINKINGINFO__Wrapper.getcbSize : DWORD;
begin
result := tagINKINGINFO(GetRecordPtr^).cbSize;
end;
procedure __tagINKINGINFO__Wrapper.setwFlags(const val : UINT);
begin
tagINKINGINFO(GetRecordPtr^).wFlags := val;
end;
function __tagINKINGINFO__Wrapper.getwFlags : UINT;
begin
result := tagINKINGINFO(GetRecordPtr^).wFlags;
end;
function __tagINPPARAMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagINPPARAMS__Wrapper.setcbSize(const val : DWORD);
begin
tagINPPARAMS(GetRecordPtr^).cbSize := val;
end;
function __tagINPPARAMS__Wrapper.getcbSize : DWORD;
begin
result := tagINPPARAMS(GetRecordPtr^).cbSize;
end;
procedure __tagINPPARAMS__Wrapper.setdwFlags(const val : DWORD);
begin
tagINPPARAMS(GetRecordPtr^).dwFlags := val;
end;
function __tagINPPARAMS__Wrapper.getdwFlags : DWORD;
begin
result := tagINPPARAMS(GetRecordPtr^).dwFlags;
end;
procedure __tagINPPARAMS__Wrapper.sethpndt(const val : HPENDATA);
begin
tagINPPARAMS(GetRecordPtr^).hpndt := val;
end;
function __tagINPPARAMS__Wrapper.gethpndt : HPENDATA;
begin
result := tagINPPARAMS(GetRecordPtr^).hpndt;
end;
function __tagINTERVAL__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __tagOEMPENINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagOEMPENINFO__Wrapper.setwPdt(const val : UINT);
begin
tagOEMPENINFO(GetRecordPtr^).wPdt := val;
end;
function __tagOEMPENINFO__Wrapper.getwPdt : UINT;
begin
result := tagOEMPENINFO(GetRecordPtr^).wPdt;
end;
procedure __tagOEMPENINFO__Wrapper.setwValueMax(const val : UINT);
begin
tagOEMPENINFO(GetRecordPtr^).wValueMax := val;
end;
function __tagOEMPENINFO__Wrapper.getwValueMax : UINT;
begin
result := tagOEMPENINFO(GetRecordPtr^).wValueMax;
end;
procedure __tagOEMPENINFO__Wrapper.setwDistinct(const val : UINT);
begin
tagOEMPENINFO(GetRecordPtr^).wDistinct := val;
end;
function __tagOEMPENINFO__Wrapper.getwDistinct : UINT;
begin
result := tagOEMPENINFO(GetRecordPtr^).wDistinct;
end;
function __tagOEMPENPACKET__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagOEMPENPACKET__Wrapper.setwTabletX(const val : UINT);
begin
tagOEMPENPACKET(GetRecordPtr^).wTabletX := val;
end;
function __tagOEMPENPACKET__Wrapper.getwTabletX : UINT;
begin
result := tagOEMPENPACKET(GetRecordPtr^).wTabletX;
end;
procedure __tagOEMPENPACKET__Wrapper.setwTabletY(const val : UINT);
begin
tagOEMPENPACKET(GetRecordPtr^).wTabletY := val;
end;
function __tagOEMPENPACKET__Wrapper.getwTabletY : UINT;
begin
result := tagOEMPENPACKET(GetRecordPtr^).wTabletY;
end;
procedure __tagOEMPENPACKET__Wrapper.setwPdk(const val : UINT);
begin
tagOEMPENPACKET(GetRecordPtr^).wPdk := val;
end;
function __tagOEMPENPACKET__Wrapper.getwPdk : UINT;
begin
result := tagOEMPENPACKET(GetRecordPtr^).wPdk;
end;
procedure __tagOEMPENPACKET__Wrapper.setdwTime(const val : DWORD);
begin
tagOEMPENPACKET(GetRecordPtr^).dwTime := val;
end;
function __tagOEMPENPACKET__Wrapper.getdwTime : DWORD;
begin
result := tagOEMPENPACKET(GetRecordPtr^).dwTime;
end;
function __tagPCMINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagPCMINFO__Wrapper.setcbSize(const val : DWORD);
begin
tagPCMINFO(GetRecordPtr^).cbSize := val;
end;
function __tagPCMINFO__Wrapper.getcbSize : DWORD;
begin
result := tagPCMINFO(GetRecordPtr^).cbSize;
end;
procedure __tagPCMINFO__Wrapper.setdwPcm(const val : DWORD);
begin
tagPCMINFO(GetRecordPtr^).dwPcm := val;
end;
function __tagPCMINFO__Wrapper.getdwPcm : DWORD;
begin
result := tagPCMINFO(GetRecordPtr^).dwPcm;
end;
procedure __tagPCMINFO__Wrapper.setdwTimeout(const val : DWORD);
begin
tagPCMINFO(GetRecordPtr^).dwTimeout := val;
end;
function __tagPCMINFO__Wrapper.getdwTimeout : DWORD;
begin
result := tagPCMINFO(GetRecordPtr^).dwTimeout;
end;
function __tagPDEVENT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagPDEVENT__Wrapper.setcbSize(const val : DWORD);
begin
tagPDEVENT(GetRecordPtr^).cbSize := val;
end;
function __tagPDEVENT__Wrapper.getcbSize : DWORD;
begin
result := tagPDEVENT(GetRecordPtr^).cbSize;
end;
procedure __tagPDEVENT__Wrapper.setwm(const val : UINT);
begin
tagPDEVENT(GetRecordPtr^).wm := val;
end;
function __tagPDEVENT__Wrapper.getwm : UINT;
begin
result := tagPDEVENT(GetRecordPtr^).wm;
end;
procedure __tagPDEVENT__Wrapper.setwParam(const val : wParam);
begin
tagPDEVENT(GetRecordPtr^).wParam := val;
end;
function __tagPDEVENT__Wrapper.getwParam : wParam;
begin
result := tagPDEVENT(GetRecordPtr^).wParam;
end;
procedure __tagPDEVENT__Wrapper.setLPARAM(const val : LPARAM);
begin
tagPDEVENT(GetRecordPtr^).LPARAM := val;
end;
function __tagPDEVENT__Wrapper.getLPARAM : LPARAM;
begin
result := tagPDEVENT(GetRecordPtr^).LPARAM;
end;
procedure __tagPDEVENT__Wrapper.setfPen(const val : BOOL);
begin
tagPDEVENT(GetRecordPtr^).fPen := val;
end;
function __tagPDEVENT__Wrapper.getfPen : BOOL;
begin
result := tagPDEVENT(GetRecordPtr^).fPen;
end;
procedure __tagPDEVENT__Wrapper.setlExInfo(const val : Longint);
begin
tagPDEVENT(GetRecordPtr^).lExInfo := val;
end;
function __tagPDEVENT__Wrapper.getlExInfo : Longint;
begin
result := tagPDEVENT(GetRecordPtr^).lExInfo;
end;
procedure __tagPDEVENT__Wrapper.setdwReserved(const val : DWORD);
begin
tagPDEVENT(GetRecordPtr^).dwReserved := val;
end;
function __tagPDEVENT__Wrapper.getdwReserved : DWORD;
begin
result := tagPDEVENT(GetRecordPtr^).dwReserved;
end;
function __tagPENDATAHEADER__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagPENDATAHEADER__Wrapper.setwVersion(const val : UINT);
begin
tagPENDATAHEADER(GetRecordPtr^).wVersion := val;
end;
function __tagPENDATAHEADER__Wrapper.getwVersion : UINT;
begin
result := tagPENDATAHEADER(GetRecordPtr^).wVersion;
end;
procedure __tagPENDATAHEADER__Wrapper.setcbSizeUsed(const val : UINT);
begin
tagPENDATAHEADER(GetRecordPtr^).cbSizeUsed := val;
end;
function __tagPENDATAHEADER__Wrapper.getcbSizeUsed : UINT;
begin
result := tagPENDATAHEADER(GetRecordPtr^).cbSizeUsed;
end;
procedure __tagPENDATAHEADER__Wrapper.setcStrokes(const val : UINT);
begin
tagPENDATAHEADER(GetRecordPtr^).cStrokes := val;
end;
function __tagPENDATAHEADER__Wrapper.getcStrokes : UINT;
begin
result := tagPENDATAHEADER(GetRecordPtr^).cStrokes;
end;
procedure __tagPENDATAHEADER__Wrapper.setcPnt(const val : UINT);
begin
tagPENDATAHEADER(GetRecordPtr^).cPnt := val;
end;
function __tagPENDATAHEADER__Wrapper.getcPnt : UINT;
begin
result := tagPENDATAHEADER(GetRecordPtr^).cPnt;
end;
procedure __tagPENDATAHEADER__Wrapper.setcPntStrokeMax(const val : UINT);
begin
tagPENDATAHEADER(GetRecordPtr^).cPntStrokeMax := val;
end;
function __tagPENDATAHEADER__Wrapper.getcPntStrokeMax : UINT;
begin
result := tagPENDATAHEADER(GetRecordPtr^).cPntStrokeMax;
end;
procedure __tagPENDATAHEADER__Wrapper.setwPndts(const val : UINT);
begin
tagPENDATAHEADER(GetRecordPtr^).wPndts := val;
end;
function __tagPENDATAHEADER__Wrapper.getwPndts : UINT;
begin
result := tagPENDATAHEADER(GetRecordPtr^).wPndts;
end;
procedure __tagPENDATAHEADER__Wrapper.setnInkWidth(const val : Integer);
begin
tagPENDATAHEADER(GetRecordPtr^).nInkWidth := val;
end;
function __tagPENDATAHEADER__Wrapper.getnInkWidth : Integer;
begin
result := tagPENDATAHEADER(GetRecordPtr^).nInkWidth;
end;
procedure __tagPENDATAHEADER__Wrapper.setrgbInk(const val : DWORD);
begin
tagPENDATAHEADER(GetRecordPtr^).rgbInk := val;
end;
function __tagPENDATAHEADER__Wrapper.getrgbInk : DWORD;
begin
result := tagPENDATAHEADER(GetRecordPtr^).rgbInk;
end;
function __tagPENINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagPENINFO__Wrapper.setcxRawWidth(const val : UINT);
begin
tagPENINFO(GetRecordPtr^).cxRawWidth := val;
end;
function __tagPENINFO__Wrapper.getcxRawWidth : UINT;
begin
result := tagPENINFO(GetRecordPtr^).cxRawWidth;
end;
procedure __tagPENINFO__Wrapper.setcyRawHeight(const val : UINT);
begin
tagPENINFO(GetRecordPtr^).cyRawHeight := val;
end;
function __tagPENINFO__Wrapper.getcyRawHeight : UINT;
begin
result := tagPENINFO(GetRecordPtr^).cyRawHeight;
end;
procedure __tagPENINFO__Wrapper.setwDistinctWidth(const val : UINT);
begin
tagPENINFO(GetRecordPtr^).wDistinctWidth := val;
end;
function __tagPENINFO__Wrapper.getwDistinctWidth : UINT;
begin
result := tagPENINFO(GetRecordPtr^).wDistinctWidth;
end;
procedure __tagPENINFO__Wrapper.setwDistinctHeight(const val : UINT);
begin
tagPENINFO(GetRecordPtr^).wDistinctHeight := val;
end;
function __tagPENINFO__Wrapper.getwDistinctHeight : UINT;
begin
result := tagPENINFO(GetRecordPtr^).wDistinctHeight;
end;
procedure __tagPENINFO__Wrapper.setnSamplingRate(const val : Integer);
begin
tagPENINFO(GetRecordPtr^).nSamplingRate := val;
end;
function __tagPENINFO__Wrapper.getnSamplingRate : Integer;
begin
result := tagPENINFO(GetRecordPtr^).nSamplingRate;
end;
procedure __tagPENINFO__Wrapper.setnSamplingDist(const val : Integer);
begin
tagPENINFO(GetRecordPtr^).nSamplingDist := val;
end;
function __tagPENINFO__Wrapper.getnSamplingDist : Integer;
begin
result := tagPENINFO(GetRecordPtr^).nSamplingDist;
end;
procedure __tagPENINFO__Wrapper.setlPdc(const val : Longint);
begin
tagPENINFO(GetRecordPtr^).lPdc := val;
end;
function __tagPENINFO__Wrapper.getlPdc : Longint;
begin
result := tagPENINFO(GetRecordPtr^).lPdc;
end;
procedure __tagPENINFO__Wrapper.setcPens(const val : Integer);
begin
tagPENINFO(GetRecordPtr^).cPens := val;
end;
function __tagPENINFO__Wrapper.getcPens : Integer;
begin
result := tagPENINFO(GetRecordPtr^).cPens;
end;
procedure __tagPENINFO__Wrapper.setcbOemData(const val : Integer);
begin
tagPENINFO(GetRecordPtr^).cbOemData := val;
end;
function __tagPENINFO__Wrapper.getcbOemData : Integer;
begin
result := tagPENINFO(GetRecordPtr^).cbOemData;
end;
procedure __tagPENINFO__Wrapper.setfuOEM(const val : UINT);
begin
tagPENINFO(GetRecordPtr^).fuOEM := val;
end;
function __tagPENINFO__Wrapper.getfuOEM : UINT;
begin
result := tagPENINFO(GetRecordPtr^).fuOEM;
end;
function __tagPENPACKET__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagPENPACKET__Wrapper.setwTabletX(const val : UINT);
begin
tagPENPACKET(GetRecordPtr^).wTabletX := val;
end;
function __tagPENPACKET__Wrapper.getwTabletX : UINT;
begin
result := tagPENPACKET(GetRecordPtr^).wTabletX;
end;
procedure __tagPENPACKET__Wrapper.setwTabletY(const val : UINT);
begin
tagPENPACKET(GetRecordPtr^).wTabletY := val;
end;
function __tagPENPACKET__Wrapper.getwTabletY : UINT;
begin
result := tagPENPACKET(GetRecordPtr^).wTabletY;
end;
procedure __tagPENPACKET__Wrapper.setwPdk(const val : UINT);
begin
tagPENPACKET(GetRecordPtr^).wPdk := val;
end;
function __tagPENPACKET__Wrapper.getwPdk : UINT;
begin
result := tagPENPACKET(GetRecordPtr^).wPdk;
end;
function __tagPENTIP__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagPENTIP__Wrapper.setcbSize(const val : DWORD);
begin
tagPENTIP(GetRecordPtr^).cbSize := val;
end;
function __tagPENTIP__Wrapper.getcbSize : DWORD;
begin
result := tagPENTIP(GetRecordPtr^).cbSize;
end;
procedure __tagPENTIP__Wrapper.setbtype(const val : Byte);
begin
tagPENTIP(GetRecordPtr^).btype := val;
end;
function __tagPENTIP__Wrapper.getbtype : Byte;
begin
result := tagPENTIP(GetRecordPtr^).btype;
end;
procedure __tagPENTIP__Wrapper.setbwidth(const val : Byte);
begin
tagPENTIP(GetRecordPtr^).bwidth := val;
end;
function __tagPENTIP__Wrapper.getbwidth : Byte;
begin
result := tagPENTIP(GetRecordPtr^).bwidth;
end;
procedure __tagPENTIP__Wrapper.setbheight(const val : Byte);
begin
tagPENTIP(GetRecordPtr^).bheight := val;
end;
function __tagPENTIP__Wrapper.getbheight : Byte;
begin
result := tagPENTIP(GetRecordPtr^).bheight;
end;
procedure __tagPENTIP__Wrapper.setbOpacity(const val : Byte);
begin
tagPENTIP(GetRecordPtr^).bOpacity := val;
end;
function __tagPENTIP__Wrapper.getbOpacity : Byte;
begin
result := tagPENTIP(GetRecordPtr^).bOpacity;
end;
procedure __tagPENTIP__Wrapper.setrgb(const val : COLORREF);
begin
tagPENTIP(GetRecordPtr^).rgb := val;
end;
function __tagPENTIP__Wrapper.getrgb : COLORREF;
begin
result := tagPENTIP(GetRecordPtr^).rgb;
end;
procedure __tagPENTIP__Wrapper.setdwFlags(const val : DWORD);
begin
tagPENTIP(GetRecordPtr^).dwFlags := val;
end;
function __tagPENTIP__Wrapper.getdwFlags : DWORD;
begin
result := tagPENTIP(GetRecordPtr^).dwFlags;
end;
procedure __tagPENTIP__Wrapper.setdwReserved(const val : DWORD);
begin
tagPENTIP(GetRecordPtr^).dwReserved := val;
end;
function __tagPENTIP__Wrapper.getdwReserved : DWORD;
begin
result := tagPENTIP(GetRecordPtr^).dwReserved;
end;
function __tagRC__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagRC__Wrapper.setHREC(const val : HREC);
begin
tagRC(GetRecordPtr^).HREC := val;
end;
function __tagRC__Wrapper.getHREC : HREC;
begin
result := tagRC(GetRecordPtr^).HREC;
end;
procedure __tagRC__Wrapper.setwEventRef(const val : UINT);
begin
tagRC(GetRecordPtr^).wEventRef := val;
end;
function __tagRC__Wrapper.getwEventRef : UINT;
begin
result := tagRC(GetRecordPtr^).wEventRef;
end;
procedure __tagRC__Wrapper.setwRcPreferences(const val : UINT);
begin
tagRC(GetRecordPtr^).wRcPreferences := val;
end;
function __tagRC__Wrapper.getwRcPreferences : UINT;
begin
result := tagRC(GetRecordPtr^).wRcPreferences;
end;
procedure __tagRC__Wrapper.setlRcOptions(const val : Longint);
begin
tagRC(GetRecordPtr^).lRcOptions := val;
end;
function __tagRC__Wrapper.getlRcOptions : Longint;
begin
result := tagRC(GetRecordPtr^).lRcOptions;
end;
procedure __tagRC__Wrapper.setwCountry(const val : UINT);
begin
tagRC(GetRecordPtr^).wCountry := val;
end;
function __tagRC__Wrapper.getwCountry : UINT;
begin
result := tagRC(GetRecordPtr^).wCountry;
end;
procedure __tagRC__Wrapper.setwIntlPreferences(const val : UINT);
begin
tagRC(GetRecordPtr^).wIntlPreferences := val;
end;
function __tagRC__Wrapper.getwIntlPreferences : UINT;
begin
result := tagRC(GetRecordPtr^).wIntlPreferences;
end;
procedure __tagRC__Wrapper.setwTryDictionary(const val : UINT);
begin
tagRC(GetRecordPtr^).wTryDictionary := val;
end;
function __tagRC__Wrapper.getwTryDictionary : UINT;
begin
result := tagRC(GetRecordPtr^).wTryDictionary;
end;
procedure __tagRC__Wrapper.setclErrorLevel(const val : CL);
begin
tagRC(GetRecordPtr^).clErrorLevel := val;
end;
function __tagRC__Wrapper.getclErrorLevel : CL;
begin
result := tagRC(GetRecordPtr^).clErrorLevel;
end;
procedure __tagRC__Wrapper.setALC(const val : ALC);
begin
tagRC(GetRecordPtr^).ALC := val;
end;
function __tagRC__Wrapper.getALC : ALC;
begin
result := tagRC(GetRecordPtr^).ALC;
end;
procedure __tagRC__Wrapper.setalcPriority(const val : ALC);
begin
tagRC(GetRecordPtr^).alcPriority := val;
end;
function __tagRC__Wrapper.getalcPriority : ALC;
begin
result := tagRC(GetRecordPtr^).alcPriority;
end;
procedure __tagRC__Wrapper.setwResultMode(const val : UINT);
begin
tagRC(GetRecordPtr^).wResultMode := val;
end;
function __tagRC__Wrapper.getwResultMode : UINT;
begin
result := tagRC(GetRecordPtr^).wResultMode;
end;
procedure __tagRC__Wrapper.setwTimeOut(const val : UINT);
begin
tagRC(GetRecordPtr^).wTimeOut := val;
end;
function __tagRC__Wrapper.getwTimeOut : UINT;
begin
result := tagRC(GetRecordPtr^).wTimeOut;
end;
procedure __tagRC__Wrapper.setlPcm(const val : Longint);
begin
tagRC(GetRecordPtr^).lPcm := val;
end;
function __tagRC__Wrapper.getlPcm : Longint;
begin
result := tagRC(GetRecordPtr^).lPcm;
end;
procedure __tagRC__Wrapper.setwRcOrient(const val : UINT);
begin
tagRC(GetRecordPtr^).wRcOrient := val;
end;
function __tagRC__Wrapper.getwRcOrient : UINT;
begin
result := tagRC(GetRecordPtr^).wRcOrient;
end;
procedure __tagRC__Wrapper.setwRcDirect(const val : UINT);
begin
tagRC(GetRecordPtr^).wRcDirect := val;
end;
function __tagRC__Wrapper.getwRcDirect : UINT;
begin
result := tagRC(GetRecordPtr^).wRcDirect;
end;
procedure __tagRC__Wrapper.setnInkWidth(const val : Integer);
begin
tagRC(GetRecordPtr^).nInkWidth := val;
end;
function __tagRC__Wrapper.getnInkWidth : Integer;
begin
result := tagRC(GetRecordPtr^).nInkWidth;
end;
procedure __tagRC__Wrapper.setrgbInk(const val : COLORREF);
begin
tagRC(GetRecordPtr^).rgbInk := val;
end;
function __tagRC__Wrapper.getrgbInk : COLORREF;
begin
result := tagRC(GetRecordPtr^).rgbInk;
end;
procedure __tagRC__Wrapper.setdwAppParam(const val : DWORD);
begin
tagRC(GetRecordPtr^).dwAppParam := val;
end;
function __tagRC__Wrapper.getdwAppParam : DWORD;
begin
result := tagRC(GetRecordPtr^).dwAppParam;
end;
procedure __tagRC__Wrapper.setdwDictParam(const val : DWORD);
begin
tagRC(GetRecordPtr^).dwDictParam := val;
end;
function __tagRC__Wrapper.getdwDictParam : DWORD;
begin
result := tagRC(GetRecordPtr^).dwDictParam;
end;
procedure __tagRC__Wrapper.setdwRecognizer(const val : DWORD);
begin
tagRC(GetRecordPtr^).dwRecognizer := val;
end;
function __tagRC__Wrapper.getdwRecognizer : DWORD;
begin
result := tagRC(GetRecordPtr^).dwRecognizer;
end;
function __tagRCRESULT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagRCRESULT__Wrapper.setwResultsType(const val : UINT);
begin
tagRCRESULT(GetRecordPtr^).wResultsType := val;
end;
function __tagRCRESULT__Wrapper.getwResultsType : UINT;
begin
result := tagRCRESULT(GetRecordPtr^).wResultsType;
end;
procedure __tagRCRESULT__Wrapper.setcSyv(const val : Integer);
begin
tagRCRESULT(GetRecordPtr^).cSyv := val;
end;
function __tagRCRESULT__Wrapper.getcSyv : Integer;
begin
result := tagRCRESULT(GetRecordPtr^).cSyv;
end;
procedure __tagRCRESULT__Wrapper.sethSyv(const val : THandle);
begin
tagRCRESULT(GetRecordPtr^).hSyv := val;
end;
function __tagRCRESULT__Wrapper.gethSyv : THandle;
begin
result := tagRCRESULT(GetRecordPtr^).hSyv;
end;
procedure __tagRCRESULT__Wrapper.setnBaseLine(const val : Integer);
begin
tagRCRESULT(GetRecordPtr^).nBaseLine := val;
end;
function __tagRCRESULT__Wrapper.getnBaseLine : Integer;
begin
result := tagRCRESULT(GetRecordPtr^).nBaseLine;
end;
procedure __tagRCRESULT__Wrapper.setnMidLine(const val : Integer);
begin
tagRCRESULT(GetRecordPtr^).nMidLine := val;
end;
function __tagRCRESULT__Wrapper.getnMidLine : Integer;
begin
result := tagRCRESULT(GetRecordPtr^).nMidLine;
end;
procedure __tagRCRESULT__Wrapper.setHPENDATA(const val : HPENDATA);
begin
tagRCRESULT(GetRecordPtr^).HPENDATA := val;
end;
function __tagRCRESULT__Wrapper.getHPENDATA : HPENDATA;
begin
result := tagRCRESULT(GetRecordPtr^).HPENDATA;
end;
function __tagRECTOFS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagRECTOFS__Wrapper.setdLeft(const val : Integer);
begin
tagRECTOFS(GetRecordPtr^).dLeft := val;
end;
function __tagRECTOFS__Wrapper.getdLeft : Integer;
begin
result := tagRECTOFS(GetRecordPtr^).dLeft;
end;
procedure __tagRECTOFS__Wrapper.setdTop(const val : Integer);
begin
tagRECTOFS(GetRecordPtr^).dTop := val;
end;
function __tagRECTOFS__Wrapper.getdTop : Integer;
begin
result := tagRECTOFS(GetRecordPtr^).dTop;
end;
procedure __tagRECTOFS__Wrapper.setdRight(const val : Integer);
begin
tagRECTOFS(GetRecordPtr^).dRight := val;
end;
function __tagRECTOFS__Wrapper.getdRight : Integer;
begin
result := tagRECTOFS(GetRecordPtr^).dRight;
end;
procedure __tagRECTOFS__Wrapper.setdBottom(const val : Integer);
begin
tagRECTOFS(GetRecordPtr^).dBottom := val;
end;
function __tagRECTOFS__Wrapper.getdBottom : Integer;
begin
result := tagRECTOFS(GetRecordPtr^).dBottom;
end;
function __tagSKBINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagSKBINFO__Wrapper.setnPad(const val : Word);
begin
tagSKBINFO(GetRecordPtr^).nPad := val;
end;
function __tagSKBINFO__Wrapper.getnPad : Word;
begin
result := tagSKBINFO(GetRecordPtr^).nPad;
end;
procedure __tagSKBINFO__Wrapper.setfVisible(const val : BOOL);
begin
tagSKBINFO(GetRecordPtr^).fVisible := val;
end;
function __tagSKBINFO__Wrapper.getfVisible : BOOL;
begin
result := tagSKBINFO(GetRecordPtr^).fVisible;
end;
procedure __tagSKBINFO__Wrapper.setfMinimized(const val : BOOL);
begin
tagSKBINFO(GetRecordPtr^).fMinimized := val;
end;
function __tagSKBINFO__Wrapper.getfMinimized : BOOL;
begin
result := tagSKBINFO(GetRecordPtr^).fMinimized;
end;
procedure __tagSKBINFO__Wrapper.setdwReserved(const val : Longint);
begin
tagSKBINFO(GetRecordPtr^).dwReserved := val;
end;
function __tagSKBINFO__Wrapper.getdwReserved : Longint;
begin
result := tagSKBINFO(GetRecordPtr^).dwReserved;
end;
function __tagSTRKFMT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagSTRKFMT__Wrapper.setcbSize(const val : DWORD);
begin
tagSTRKFMT(GetRecordPtr^).cbSize := val;
end;
function __tagSTRKFMT__Wrapper.getcbSize : DWORD;
begin
result := tagSTRKFMT(GetRecordPtr^).cbSize;
end;
procedure __tagSTRKFMT__Wrapper.setiesf(const val : UINT);
begin
tagSTRKFMT(GetRecordPtr^).iesf := val;
end;
function __tagSTRKFMT__Wrapper.getiesf : UINT;
begin
result := tagSTRKFMT(GetRecordPtr^).iesf;
end;
procedure __tagSTRKFMT__Wrapper.setiStrk(const val : UINT);
begin
tagSTRKFMT(GetRecordPtr^).iStrk := val;
end;
function __tagSTRKFMT__Wrapper.getiStrk : UINT;
begin
result := tagSTRKFMT(GetRecordPtr^).iStrk;
end;
procedure __tagSTRKFMT__Wrapper.setdwUser(const val : DWORD);
begin
tagSTRKFMT(GetRecordPtr^).dwUser := val;
end;
function __tagSTRKFMT__Wrapper.getdwUser : DWORD;
begin
result := tagSTRKFMT(GetRecordPtr^).dwUser;
end;
procedure __tagSTRKFMT__Wrapper.setdwReserved(const val : DWORD);
begin
tagSTRKFMT(GetRecordPtr^).dwReserved := val;
end;
function __tagSTRKFMT__Wrapper.getdwReserved : DWORD;
begin
result := tagSTRKFMT(GetRecordPtr^).dwReserved;
end;
function __tagSTROKEINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagSTROKEINFO__Wrapper.setcPnt(const val : UINT);
begin
tagSTROKEINFO(GetRecordPtr^).cPnt := val;
end;
function __tagSTROKEINFO__Wrapper.getcPnt : UINT;
begin
result := tagSTROKEINFO(GetRecordPtr^).cPnt;
end;
procedure __tagSTROKEINFO__Wrapper.setcbPnts(const val : UINT);
begin
tagSTROKEINFO(GetRecordPtr^).cbPnts := val;
end;
function __tagSTROKEINFO__Wrapper.getcbPnts : UINT;
begin
result := tagSTROKEINFO(GetRecordPtr^).cbPnts;
end;
procedure __tagSTROKEINFO__Wrapper.setwPdk(const val : UINT);
begin
tagSTROKEINFO(GetRecordPtr^).wPdk := val;
end;
function __tagSTROKEINFO__Wrapper.getwPdk : UINT;
begin
result := tagSTROKEINFO(GetRecordPtr^).wPdk;
end;
procedure __tagSTROKEINFO__Wrapper.setdwTick(const val : DWORD);
begin
tagSTROKEINFO(GetRecordPtr^).dwTick := val;
end;
function __tagSTROKEINFO__Wrapper.getdwTick : DWORD;
begin
result := tagSTROKEINFO(GetRecordPtr^).dwTick;
end;
function __tagSYC__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagSYC__Wrapper.setwStrokeFirst(const val : UINT);
begin
tagSYC(GetRecordPtr^).wStrokeFirst := val;
end;
function __tagSYC__Wrapper.getwStrokeFirst : UINT;
begin
result := tagSYC(GetRecordPtr^).wStrokeFirst;
end;
procedure __tagSYC__Wrapper.setwPntFirst(const val : UINT);
begin
tagSYC(GetRecordPtr^).wPntFirst := val;
end;
function __tagSYC__Wrapper.getwPntFirst : UINT;
begin
result := tagSYC(GetRecordPtr^).wPntFirst;
end;
procedure __tagSYC__Wrapper.setwStrokeLast(const val : UINT);
begin
tagSYC(GetRecordPtr^).wStrokeLast := val;
end;
function __tagSYC__Wrapper.getwStrokeLast : UINT;
begin
result := tagSYC(GetRecordPtr^).wStrokeLast;
end;
procedure __tagSYC__Wrapper.setwPntLast(const val : UINT);
begin
tagSYC(GetRecordPtr^).wPntLast := val;
end;
function __tagSYC__Wrapper.getwPntLast : UINT;
begin
result := tagSYC(GetRecordPtr^).wPntLast;
end;
procedure __tagSYC__Wrapper.setfLastSyc(const val : BOOL);
begin
tagSYC(GetRecordPtr^).fLastSyc := val;
end;
function __tagSYC__Wrapper.getfLastSyc : BOOL;
begin
result := tagSYC(GetRecordPtr^).fLastSyc;
end;
function __tagSYE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagSYE__Wrapper.setSYV(const val : SYV);
begin
tagSYE(GetRecordPtr^).SYV := val;
end;
function __tagSYE__Wrapper.getSYV : SYV;
begin
result := tagSYE(GetRecordPtr^).SYV;
end;
procedure __tagSYE__Wrapper.setlRecogVal(const val : Longint);
begin
tagSYE(GetRecordPtr^).lRecogVal := val;
end;
function __tagSYE__Wrapper.getlRecogVal : Longint;
begin
result := tagSYE(GetRecordPtr^).lRecogVal;
end;
procedure __tagSYE__Wrapper.setCL(const val : CL);
begin
tagSYE(GetRecordPtr^).CL := val;
end;
function __tagSYE__Wrapper.getCL : CL;
begin
result := tagSYE(GetRecordPtr^).CL;
end;
procedure __tagSYE__Wrapper.setiSyc(const val : Integer);
begin
tagSYE(GetRecordPtr^).iSyc := val;
end;
function __tagSYE__Wrapper.getiSyc : Integer;
begin
result := tagSYE(GetRecordPtr^).iSyc;
end;
function __tagSYG__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagSYG__Wrapper.setcHotSpot(const val : Integer);
begin
tagSYG(GetRecordPtr^).cHotSpot := val;
end;
function __tagSYG__Wrapper.getcHotSpot : Integer;
begin
result := tagSYG(GetRecordPtr^).cHotSpot;
end;
procedure __tagSYG__Wrapper.setnFirstBox(const val : Integer);
begin
tagSYG(GetRecordPtr^).nFirstBox := val;
end;
function __tagSYG__Wrapper.getnFirstBox : Integer;
begin
result := tagSYG(GetRecordPtr^).nFirstBox;
end;
procedure __tagSYG__Wrapper.setlRecogVal(const val : Longint);
begin
tagSYG(GetRecordPtr^).lRecogVal := val;
end;
function __tagSYG__Wrapper.getlRecogVal : Longint;
begin
result := tagSYG(GetRecordPtr^).lRecogVal;
end;
procedure __tagSYG__Wrapper.setcSye(const val : Integer);
begin
tagSYG(GetRecordPtr^).cSye := val;
end;
function __tagSYG__Wrapper.getcSye : Integer;
begin
result := tagSYG(GetRecordPtr^).cSye;
end;
procedure __tagSYG__Wrapper.setcSyc(const val : Integer);
begin
tagSYG(GetRecordPtr^).cSyc := val;
end;
function __tagSYG__Wrapper.getcSyc : Integer;
begin
result := tagSYG(GetRecordPtr^).cSyc;
end;
function __tagTARGET__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTARGET__Wrapper.setdwFlags(const val : DWORD);
begin
tagTARGET(GetRecordPtr^).dwFlags := val;
end;
function __tagTARGET__Wrapper.getdwFlags : DWORD;
begin
result := tagTARGET(GetRecordPtr^).dwFlags;
end;
procedure __tagTARGET__Wrapper.setidTarget(const val : DWORD);
begin
tagTARGET(GetRecordPtr^).idTarget := val;
end;
function __tagTARGET__Wrapper.getidTarget : DWORD;
begin
result := tagTARGET(GetRecordPtr^).idTarget;
end;
procedure __tagTARGET__Wrapper.sethtrgTarget(const val : HTRG);
begin
tagTARGET(GetRecordPtr^).htrgTarget := val;
end;
function __tagTARGET__Wrapper.gethtrgTarget : HTRG;
begin
result := tagTARGET(GetRecordPtr^).htrgTarget;
end;
procedure __tagTARGET__Wrapper.setdwData(const val : DWORD);
begin
tagTARGET(GetRecordPtr^).dwData := val;
end;
function __tagTARGET__Wrapper.getdwData : DWORD;
begin
result := tagTARGET(GetRecordPtr^).dwData;
end;
function __tagTARGINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTARGINFO__Wrapper.setcbSize(const val : DWORD);
begin
tagTARGINFO(GetRecordPtr^).cbSize := val;
end;
function __tagTARGINFO__Wrapper.getcbSize : DWORD;
begin
result := tagTARGINFO(GetRecordPtr^).cbSize;
end;
procedure __tagTARGINFO__Wrapper.setdwFlags(const val : DWORD);
begin
tagTARGINFO(GetRecordPtr^).dwFlags := val;
end;
function __tagTARGINFO__Wrapper.getdwFlags : DWORD;
begin
result := tagTARGINFO(GetRecordPtr^).dwFlags;
end;
procedure __tagTARGINFO__Wrapper.sethtrgOwner(const val : HTRG);
begin
tagTARGINFO(GetRecordPtr^).htrgOwner := val;
end;
function __tagTARGINFO__Wrapper.gethtrgOwner : HTRG;
begin
result := tagTARGINFO(GetRecordPtr^).htrgOwner;
end;
procedure __tagTARGINFO__Wrapper.setcTargets(const val : Word);
begin
tagTARGINFO(GetRecordPtr^).cTargets := val;
end;
function __tagTARGINFO__Wrapper.getcTargets : Word;
begin
result := tagTARGINFO(GetRecordPtr^).cTargets;
end;
procedure __tagTARGINFO__Wrapper.setiTargetLast(const val : Word);
begin
tagTARGINFO(GetRecordPtr^).iTargetLast := val;
end;
function __tagTARGINFO__Wrapper.getiTargetLast : Word;
begin
result := tagTARGINFO(GetRecordPtr^).iTargetLast;
end;
function __TAnimateInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TAnimateInfo__Wrapper.setcbSize(const val : DWORD);
begin
TAnimateInfo(GetRecordPtr^).cbSize := val;
end;
function __TAnimateInfo__Wrapper.getcbSize : DWORD;
begin
result := TAnimateInfo(GetRecordPtr^).cbSize;
end;
procedure __TAnimateInfo__Wrapper.setuSpeedPct(const val : UINT);
begin
TAnimateInfo(GetRecordPtr^).uSpeedPct := val;
end;
function __TAnimateInfo__Wrapper.getuSpeedPct : UINT;
begin
result := TAnimateInfo(GetRecordPtr^).uSpeedPct;
end;
procedure __TAnimateInfo__Wrapper.setuPeriodCB(const val : UINT);
begin
TAnimateInfo(GetRecordPtr^).uPeriodCB := val;
end;
function __TAnimateInfo__Wrapper.getuPeriodCB : UINT;
begin
result := TAnimateInfo(GetRecordPtr^).uPeriodCB;
end;
procedure __TAnimateInfo__Wrapper.setfuFlags(const val : UINT);
begin
TAnimateInfo(GetRecordPtr^).fuFlags := val;
end;
function __TAnimateInfo__Wrapper.getfuFlags : UINT;
begin
result := TAnimateInfo(GetRecordPtr^).fuFlags;
end;
procedure __TAnimateInfo__Wrapper.setLPARAM(const val : LPARAM);
begin
TAnimateInfo(GetRecordPtr^).LPARAM := val;
end;
function __TAnimateInfo__Wrapper.getLPARAM : LPARAM;
begin
result := TAnimateInfo(GetRecordPtr^).LPARAM;
end;
procedure __TAnimateInfo__Wrapper.setdwReserved(const val : DWORD);
begin
TAnimateInfo(GetRecordPtr^).dwReserved := val;
end;
function __TAnimateInfo__Wrapper.getdwReserved : DWORD;
begin
result := TAnimateInfo(GetRecordPtr^).dwReserved;
end;
function __TARGET__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TARGET__Wrapper.setdwFlags(const val : DWORD);
begin
TARGET(GetRecordPtr^).dwFlags := val;
end;
function __TARGET__Wrapper.getdwFlags : DWORD;
begin
result := TARGET(GetRecordPtr^).dwFlags;
end;
procedure __TARGET__Wrapper.setidTarget(const val : DWORD);
begin
TARGET(GetRecordPtr^).idTarget := val;
end;
function __TARGET__Wrapper.getidTarget : DWORD;
begin
result := TARGET(GetRecordPtr^).idTarget;
end;
procedure __TARGET__Wrapper.sethtrgTarget(const val : HTRG);
begin
TARGET(GetRecordPtr^).htrgTarget := val;
end;
function __TARGET__Wrapper.gethtrgTarget : HTRG;
begin
result := TARGET(GetRecordPtr^).htrgTarget;
end;
procedure __TARGET__Wrapper.setdwData(const val : DWORD);
begin
TARGET(GetRecordPtr^).dwData := val;
end;
function __TARGET__Wrapper.getdwData : DWORD;
begin
result := TARGET(GetRecordPtr^).dwData;
end;
function __TARGINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TARGINFO__Wrapper.setcbSize(const val : DWORD);
begin
TARGINFO(GetRecordPtr^).cbSize := val;
end;
function __TARGINFO__Wrapper.getcbSize : DWORD;
begin
result := TARGINFO(GetRecordPtr^).cbSize;
end;
procedure __TARGINFO__Wrapper.setdwFlags(const val : DWORD);
begin
TARGINFO(GetRecordPtr^).dwFlags := val;
end;
function __TARGINFO__Wrapper.getdwFlags : DWORD;
begin
result := TARGINFO(GetRecordPtr^).dwFlags;
end;
procedure __TARGINFO__Wrapper.sethtrgOwner(const val : HTRG);
begin
TARGINFO(GetRecordPtr^).htrgOwner := val;
end;
function __TARGINFO__Wrapper.gethtrgOwner : HTRG;
begin
result := TARGINFO(GetRecordPtr^).htrgOwner;
end;
procedure __TARGINFO__Wrapper.setcTargets(const val : Word);
begin
TARGINFO(GetRecordPtr^).cTargets := val;
end;
function __TARGINFO__Wrapper.getcTargets : Word;
begin
result := TARGINFO(GetRecordPtr^).cTargets;
end;
procedure __TARGINFO__Wrapper.setiTargetLast(const val : Word);
begin
TARGINFO(GetRecordPtr^).iTargetLast := val;
end;
function __TARGINFO__Wrapper.getiTargetLast : Word;
begin
result := TARGINFO(GetRecordPtr^).iTargetLast;
end;
function __TBoxEditInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TBoxEditInfo__Wrapper.setcxBox(const val : Integer);
begin
TBoxEditInfo(GetRecordPtr^).cxBox := val;
end;
function __TBoxEditInfo__Wrapper.getcxBox : Integer;
begin
result := TBoxEditInfo(GetRecordPtr^).cxBox;
end;
procedure __TBoxEditInfo__Wrapper.setcyBox(const val : Integer);
begin
TBoxEditInfo(GetRecordPtr^).cyBox := val;
end;
function __TBoxEditInfo__Wrapper.getcyBox : Integer;
begin
result := TBoxEditInfo(GetRecordPtr^).cyBox;
end;
procedure __TBoxEditInfo__Wrapper.setcxBase(const val : Integer);
begin
TBoxEditInfo(GetRecordPtr^).cxBase := val;
end;
function __TBoxEditInfo__Wrapper.getcxBase : Integer;
begin
result := TBoxEditInfo(GetRecordPtr^).cxBase;
end;
procedure __TBoxEditInfo__Wrapper.setcyBase(const val : Integer);
begin
TBoxEditInfo(GetRecordPtr^).cyBase := val;
end;
function __TBoxEditInfo__Wrapper.getcyBase : Integer;
begin
result := TBoxEditInfo(GetRecordPtr^).cyBase;
end;
procedure __TBoxEditInfo__Wrapper.setcyMid(const val : Integer);
begin
TBoxEditInfo(GetRecordPtr^).cyMid := val;
end;
function __TBoxEditInfo__Wrapper.getcyMid : Integer;
begin
result := TBoxEditInfo(GetRecordPtr^).cyMid;
end;
procedure __TBoxEditInfo__Wrapper.setwFlags(const val : UINT);
begin
TBoxEditInfo(GetRecordPtr^).wFlags := val;
end;
function __TBoxEditInfo__Wrapper.getwFlags : UINT;
begin
result := TBoxEditInfo(GetRecordPtr^).wFlags;
end;
procedure __TBoxEditInfo__Wrapper.setwFontHeight(const val : UINT);
begin
TBoxEditInfo(GetRecordPtr^).wFontHeight := val;
end;
function __TBoxEditInfo__Wrapper.getwFontHeight : UINT;
begin
result := TBoxEditInfo(GetRecordPtr^).wFontHeight;
end;
function __TBoxLayout__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TBoxLayout__Wrapper.setcyCusp(const val : Integer);
begin
TBoxLayout(GetRecordPtr^).cyCusp := val;
end;
function __TBoxLayout__Wrapper.getcyCusp : Integer;
begin
result := TBoxLayout(GetRecordPtr^).cyCusp;
end;
procedure __TBoxLayout__Wrapper.setcyEndCusp(const val : Integer);
begin
TBoxLayout(GetRecordPtr^).cyEndCusp := val;
end;
function __TBoxLayout__Wrapper.getcyEndCusp : Integer;
begin
result := TBoxLayout(GetRecordPtr^).cyEndCusp;
end;
procedure __TBoxLayout__Wrapper.setstyle(const val : UINT);
begin
TBoxLayout(GetRecordPtr^).style := val;
end;
function __TBoxLayout__Wrapper.getstyle : UINT;
begin
result := TBoxLayout(GetRecordPtr^).style;
end;
procedure __TBoxLayout__Wrapper.setdwReserved1(const val : DWORD);
begin
TBoxLayout(GetRecordPtr^).dwReserved1 := val;
end;
function __TBoxLayout__Wrapper.getdwReserved1 : DWORD;
begin
result := TBoxLayout(GetRecordPtr^).dwReserved1;
end;
procedure __TBoxLayout__Wrapper.setdwReserved2(const val : DWORD);
begin
TBoxLayout(GetRecordPtr^).dwReserved2 := val;
end;
function __TBoxLayout__Wrapper.getdwReserved2 : DWORD;
begin
result := TBoxLayout(GetRecordPtr^).dwReserved2;
end;
procedure __TBoxLayout__Wrapper.setdwReserved3(const val : DWORD);
begin
TBoxLayout(GetRecordPtr^).dwReserved3 := val;
end;
function __TBoxLayout__Wrapper.getdwReserved3 : DWORD;
begin
result := TBoxLayout(GetRecordPtr^).dwReserved3;
end;
function __TBoxResults__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TBoxResults__Wrapper.setindxBox(const val : UINT);
begin
TBoxResults(GetRecordPtr^).indxBox := val;
end;
function __TBoxResults__Wrapper.getindxBox : UINT;
begin
result := TBoxResults(GetRecordPtr^).indxBox;
end;
procedure __TBoxResults__Wrapper.sethinksetBox(const val : HINKSET);
begin
TBoxResults(GetRecordPtr^).hinksetBox := val;
end;
function __TBoxResults__Wrapper.gethinksetBox : HINKSET;
begin
result := TBoxResults(GetRecordPtr^).hinksetBox;
end;
function __TCalbStruct__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCalbStruct__Wrapper.setwOffsetX(const val : Integer);
begin
TCalbStruct(GetRecordPtr^).wOffsetX := val;
end;
function __TCalbStruct__Wrapper.getwOffsetX : Integer;
begin
result := TCalbStruct(GetRecordPtr^).wOffsetX;
end;
procedure __TCalbStruct__Wrapper.setwOffsetY(const val : Integer);
begin
TCalbStruct(GetRecordPtr^).wOffsetY := val;
end;
function __TCalbStruct__Wrapper.getwOffsetY : Integer;
begin
result := TCalbStruct(GetRecordPtr^).wOffsetY;
end;
procedure __TCalbStruct__Wrapper.setwDistinctWidth(const val : Integer);
begin
TCalbStruct(GetRecordPtr^).wDistinctWidth := val;
end;
function __TCalbStruct__Wrapper.getwDistinctWidth : Integer;
begin
result := TCalbStruct(GetRecordPtr^).wDistinctWidth;
end;
procedure __TCalbStruct__Wrapper.setwDistinctHeight(const val : Integer);
begin
TCalbStruct(GetRecordPtr^).wDistinctHeight := val;
end;
function __TCalbStruct__Wrapper.getwDistinctHeight : Integer;
begin
result := TCalbStruct(GetRecordPtr^).wDistinctHeight;
end;
function __TCtlInitBEdit__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCtlInitBEdit__Wrapper.setcbSize(const val : DWORD);
begin
TCtlInitBEdit(GetRecordPtr^).cbSize := val;
end;
function __TCtlInitBEdit__Wrapper.getcbSize : DWORD;
begin
result := TCtlInitBEdit(GetRecordPtr^).cbSize;
end;
procedure __TCtlInitBEdit__Wrapper.setid(const val : Integer);
begin
TCtlInitBEdit(GetRecordPtr^).id := val;
end;
function __TCtlInitBEdit__Wrapper.getid : Integer;
begin
result := TCtlInitBEdit(GetRecordPtr^).id;
end;
procedure __TCtlInitBEdit__Wrapper.setwSizeCategory(const val : Word);
begin
TCtlInitBEdit(GetRecordPtr^).wSizeCategory := val;
end;
function __TCtlInitBEdit__Wrapper.getwSizeCategory : Word;
begin
result := TCtlInitBEdit(GetRecordPtr^).wSizeCategory;
end;
procedure __TCtlInitBEdit__Wrapper.setwFlags(const val : Word);
begin
TCtlInitBEdit(GetRecordPtr^).wFlags := val;
end;
function __TCtlInitBEdit__Wrapper.getwFlags : Word;
begin
result := TCtlInitBEdit(GetRecordPtr^).wFlags;
end;
procedure __TCtlInitBEdit__Wrapper.setdwReserved(const val : DWORD);
begin
TCtlInitBEdit(GetRecordPtr^).dwReserved := val;
end;
function __TCtlInitBEdit__Wrapper.getdwReserved : DWORD;
begin
result := TCtlInitBEdit(GetRecordPtr^).dwReserved;
end;
function __TCtlInitHEdit__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCtlInitHEdit__Wrapper.setcbSize(const val : DWORD);
begin
TCtlInitHEdit(GetRecordPtr^).cbSize := val;
end;
function __TCtlInitHEdit__Wrapper.getcbSize : DWORD;
begin
result := TCtlInitHEdit(GetRecordPtr^).cbSize;
end;
procedure __TCtlInitHEdit__Wrapper.setid(const val : Integer);
begin
TCtlInitHEdit(GetRecordPtr^).id := val;
end;
function __TCtlInitHEdit__Wrapper.getid : Integer;
begin
result := TCtlInitHEdit(GetRecordPtr^).id;
end;
procedure __TCtlInitHEdit__Wrapper.setdwFlags(const val : DWORD);
begin
TCtlInitHEdit(GetRecordPtr^).dwFlags := val;
end;
function __TCtlInitHEdit__Wrapper.getdwFlags : DWORD;
begin
result := TCtlInitHEdit(GetRecordPtr^).dwFlags;
end;
procedure __TCtlInitHEdit__Wrapper.setdwReserved(const val : DWORD);
begin
TCtlInitHEdit(GetRecordPtr^).dwReserved := val;
end;
function __TCtlInitHEdit__Wrapper.getdwReserved : DWORD;
begin
result := TCtlInitHEdit(GetRecordPtr^).dwReserved;
end;
function __TCtlInitIEdit__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCtlInitIEdit__Wrapper.setcbSize(const val : DWORD);
begin
TCtlInitIEdit(GetRecordPtr^).cbSize := val;
end;
function __TCtlInitIEdit__Wrapper.getcbSize : DWORD;
begin
result := TCtlInitIEdit(GetRecordPtr^).cbSize;
end;
procedure __TCtlInitIEdit__Wrapper.setid(const val : Integer);
begin
TCtlInitIEdit(GetRecordPtr^).id := val;
end;
function __TCtlInitIEdit__Wrapper.getid : Integer;
begin
result := TCtlInitIEdit(GetRecordPtr^).id;
end;
procedure __TCtlInitIEdit__Wrapper.setieb(const val : Word);
begin
TCtlInitIEdit(GetRecordPtr^).ieb := val;
end;
function __TCtlInitIEdit__Wrapper.getieb : Word;
begin
result := TCtlInitIEdit(GetRecordPtr^).ieb;
end;
procedure __TCtlInitIEdit__Wrapper.setiedo(const val : Word);
begin
TCtlInitIEdit(GetRecordPtr^).iedo := val;
end;
function __TCtlInitIEdit__Wrapper.getiedo : Word;
begin
result := TCtlInitIEdit(GetRecordPtr^).iedo;
end;
procedure __TCtlInitIEdit__Wrapper.setiei(const val : Word);
begin
TCtlInitIEdit(GetRecordPtr^).iei := val;
end;
function __TCtlInitIEdit__Wrapper.getiei : Word;
begin
result := TCtlInitIEdit(GetRecordPtr^).iei;
end;
procedure __TCtlInitIEdit__Wrapper.setien(const val : Word);
begin
TCtlInitIEdit(GetRecordPtr^).ien := val;
end;
function __TCtlInitIEdit__Wrapper.getien : Word;
begin
result := TCtlInitIEdit(GetRecordPtr^).ien;
end;
procedure __TCtlInitIEdit__Wrapper.setierec(const val : Word);
begin
TCtlInitIEdit(GetRecordPtr^).ierec := val;
end;
function __TCtlInitIEdit__Wrapper.getierec : Word;
begin
result := TCtlInitIEdit(GetRecordPtr^).ierec;
end;
procedure __TCtlInitIEdit__Wrapper.seties(const val : Word);
begin
TCtlInitIEdit(GetRecordPtr^).ies := val;
end;
function __TCtlInitIEdit__Wrapper.geties : Word;
begin
result := TCtlInitIEdit(GetRecordPtr^).ies;
end;
procedure __TCtlInitIEdit__Wrapper.setiesec(const val : Word);
begin
TCtlInitIEdit(GetRecordPtr^).iesec := val;
end;
function __TCtlInitIEdit__Wrapper.getiesec : Word;
begin
result := TCtlInitIEdit(GetRecordPtr^).iesec;
end;
procedure __TCtlInitIEdit__Wrapper.setpdts(const val : Word);
begin
TCtlInitIEdit(GetRecordPtr^).pdts := val;
end;
function __TCtlInitIEdit__Wrapper.getpdts : Word;
begin
result := TCtlInitIEdit(GetRecordPtr^).pdts;
end;
procedure __TCtlInitIEdit__Wrapper.sethpndt(const val : HPENDATA);
begin
TCtlInitIEdit(GetRecordPtr^).hpndt := val;
end;
function __TCtlInitIEdit__Wrapper.gethpndt : HPENDATA;
begin
result := TCtlInitIEdit(GetRecordPtr^).hpndt;
end;
procedure __TCtlInitIEdit__Wrapper.setwVGrid(const val : Word);
begin
TCtlInitIEdit(GetRecordPtr^).wVGrid := val;
end;
function __TCtlInitIEdit__Wrapper.getwVGrid : Word;
begin
result := TCtlInitIEdit(GetRecordPtr^).wVGrid;
end;
procedure __TCtlInitIEdit__Wrapper.setwHGrid(const val : Word);
begin
TCtlInitIEdit(GetRecordPtr^).wHGrid := val;
end;
function __TCtlInitIEdit__Wrapper.getwHGrid : Word;
begin
result := TCtlInitIEdit(GetRecordPtr^).wHGrid;
end;
procedure __TCtlInitIEdit__Wrapper.setdwApp(const val : DWORD);
begin
TCtlInitIEdit(GetRecordPtr^).dwApp := val;
end;
function __TCtlInitIEdit__Wrapper.getdwApp : DWORD;
begin
result := TCtlInitIEdit(GetRecordPtr^).dwApp;
end;
procedure __TCtlInitIEdit__Wrapper.setdwReserved(const val : DWORD);
begin
TCtlInitIEdit(GetRecordPtr^).dwReserved := val;
end;
function __TCtlInitIEdit__Wrapper.getdwReserved : DWORD;
begin
result := TCtlInitIEdit(GetRecordPtr^).dwReserved;
end;
function __TGuide__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TGuide__Wrapper.setxOrigin(const val : Integer);
begin
TGuide(GetRecordPtr^).xOrigin := val;
end;
function __TGuide__Wrapper.getxOrigin : Integer;
begin
result := TGuide(GetRecordPtr^).xOrigin;
end;
procedure __TGuide__Wrapper.setyOrigin(const val : Integer);
begin
TGuide(GetRecordPtr^).yOrigin := val;
end;
function __TGuide__Wrapper.getyOrigin : Integer;
begin
result := TGuide(GetRecordPtr^).yOrigin;
end;
procedure __TGuide__Wrapper.setcxBox(const val : Integer);
begin
TGuide(GetRecordPtr^).cxBox := val;
end;
function __TGuide__Wrapper.getcxBox : Integer;
begin
result := TGuide(GetRecordPtr^).cxBox;
end;
procedure __TGuide__Wrapper.setcyBox(const val : Integer);
begin
TGuide(GetRecordPtr^).cyBox := val;
end;
function __TGuide__Wrapper.getcyBox : Integer;
begin
result := TGuide(GetRecordPtr^).cyBox;
end;
procedure __TGuide__Wrapper.setcxBase(const val : Integer);
begin
TGuide(GetRecordPtr^).cxBase := val;
end;
function __TGuide__Wrapper.getcxBase : Integer;
begin
result := TGuide(GetRecordPtr^).cxBase;
end;
procedure __TGuide__Wrapper.setcyBase(const val : Integer);
begin
TGuide(GetRecordPtr^).cyBase := val;
end;
function __TGuide__Wrapper.getcyBase : Integer;
begin
result := TGuide(GetRecordPtr^).cyBase;
end;
procedure __TGuide__Wrapper.setcHorzBox(const val : Integer);
begin
TGuide(GetRecordPtr^).cHorzBox := val;
end;
function __TGuide__Wrapper.getcHorzBox : Integer;
begin
result := TGuide(GetRecordPtr^).cHorzBox;
end;
procedure __TGuide__Wrapper.setcVertBox(const val : Integer);
begin
TGuide(GetRecordPtr^).cVertBox := val;
end;
function __TGuide__Wrapper.getcVertBox : Integer;
begin
result := TGuide(GetRecordPtr^).cVertBox;
end;
procedure __TGuide__Wrapper.setcyMid(const val : Integer);
begin
TGuide(GetRecordPtr^).cyMid := val;
end;
function __TGuide__Wrapper.getcyMid : Integer;
begin
result := TGuide(GetRecordPtr^).cyMid;
end;
function __TIMEColors__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIMEColors__Wrapper.setcColors(const val : Integer);
begin
TIMEColors(GetRecordPtr^).cColors := val;
end;
function __TIMEColors__Wrapper.getcColors : Integer;
begin
result := TIMEColors(GetRecordPtr^).cColors;
end;
function __TInkingInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TInkingInfo__Wrapper.setcbSize(const val : DWORD);
begin
TInkingInfo(GetRecordPtr^).cbSize := val;
end;
function __TInkingInfo__Wrapper.getcbSize : DWORD;
begin
result := TInkingInfo(GetRecordPtr^).cbSize;
end;
procedure __TInkingInfo__Wrapper.setwFlags(const val : UINT);
begin
TInkingInfo(GetRecordPtr^).wFlags := val;
end;
function __TInkingInfo__Wrapper.getwFlags : UINT;
begin
result := TInkingInfo(GetRecordPtr^).wFlags;
end;
function __TInpParams__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TInpParams__Wrapper.setcbSize(const val : DWORD);
begin
TInpParams(GetRecordPtr^).cbSize := val;
end;
function __TInpParams__Wrapper.getcbSize : DWORD;
begin
result := TInpParams(GetRecordPtr^).cbSize;
end;
procedure __TInpParams__Wrapper.setdwFlags(const val : DWORD);
begin
TInpParams(GetRecordPtr^).dwFlags := val;
end;
function __TInpParams__Wrapper.getdwFlags : DWORD;
begin
result := TInpParams(GetRecordPtr^).dwFlags;
end;
procedure __TInpParams__Wrapper.sethpndt(const val : HPENDATA);
begin
TInpParams(GetRecordPtr^).hpndt := val;
end;
function __TInpParams__Wrapper.gethpndt : HPENDATA;
begin
result := TInpParams(GetRecordPtr^).hpndt;
end;
function __TInterval__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TOEMPenInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TOEMPenInfo__Wrapper.setwPdt(const val : UINT);
begin
TOEMPenInfo(GetRecordPtr^).wPdt := val;
end;
function __TOEMPenInfo__Wrapper.getwPdt : UINT;
begin
result := TOEMPenInfo(GetRecordPtr^).wPdt;
end;
procedure __TOEMPenInfo__Wrapper.setwValueMax(const val : UINT);
begin
TOEMPenInfo(GetRecordPtr^).wValueMax := val;
end;
function __TOEMPenInfo__Wrapper.getwValueMax : UINT;
begin
result := TOEMPenInfo(GetRecordPtr^).wValueMax;
end;
procedure __TOEMPenInfo__Wrapper.setwDistinct(const val : UINT);
begin
TOEMPenInfo(GetRecordPtr^).wDistinct := val;
end;
function __TOEMPenInfo__Wrapper.getwDistinct : UINT;
begin
result := TOEMPenInfo(GetRecordPtr^).wDistinct;
end;
function __TOEMPenPacket__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TOEMPenPacket__Wrapper.setwTabletX(const val : UINT);
begin
TOEMPenPacket(GetRecordPtr^).wTabletX := val;
end;
function __TOEMPenPacket__Wrapper.getwTabletX : UINT;
begin
result := TOEMPenPacket(GetRecordPtr^).wTabletX;
end;
procedure __TOEMPenPacket__Wrapper.setwTabletY(const val : UINT);
begin
TOEMPenPacket(GetRecordPtr^).wTabletY := val;
end;
function __TOEMPenPacket__Wrapper.getwTabletY : UINT;
begin
result := TOEMPenPacket(GetRecordPtr^).wTabletY;
end;
procedure __TOEMPenPacket__Wrapper.setwPdk(const val : UINT);
begin
TOEMPenPacket(GetRecordPtr^).wPdk := val;
end;
function __TOEMPenPacket__Wrapper.getwPdk : UINT;
begin
result := TOEMPenPacket(GetRecordPtr^).wPdk;
end;
procedure __TOEMPenPacket__Wrapper.setdwTime(const val : DWORD);
begin
TOEMPenPacket(GetRecordPtr^).dwTime := val;
end;
function __TOEMPenPacket__Wrapper.getdwTime : DWORD;
begin
result := TOEMPenPacket(GetRecordPtr^).dwTime;
end;
function __TPCMInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPCMInfo__Wrapper.setcbSize(const val : DWORD);
begin
TPCMInfo(GetRecordPtr^).cbSize := val;
end;
function __TPCMInfo__Wrapper.getcbSize : DWORD;
begin
result := TPCMInfo(GetRecordPtr^).cbSize;
end;
procedure __TPCMInfo__Wrapper.setdwPcm(const val : DWORD);
begin
TPCMInfo(GetRecordPtr^).dwPcm := val;
end;
function __TPCMInfo__Wrapper.getdwPcm : DWORD;
begin
result := TPCMInfo(GetRecordPtr^).dwPcm;
end;
procedure __TPCMInfo__Wrapper.setdwTimeout(const val : DWORD);
begin
TPCMInfo(GetRecordPtr^).dwTimeout := val;
end;
function __TPCMInfo__Wrapper.getdwTimeout : DWORD;
begin
result := TPCMInfo(GetRecordPtr^).dwTimeout;
end;
function __TPDEvent__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPDEvent__Wrapper.setcbSize(const val : DWORD);
begin
TPDEvent(GetRecordPtr^).cbSize := val;
end;
function __TPDEvent__Wrapper.getcbSize : DWORD;
begin
result := TPDEvent(GetRecordPtr^).cbSize;
end;
procedure __TPDEvent__Wrapper.setwm(const val : UINT);
begin
TPDEvent(GetRecordPtr^).wm := val;
end;
function __TPDEvent__Wrapper.getwm : UINT;
begin
result := TPDEvent(GetRecordPtr^).wm;
end;
procedure __TPDEvent__Wrapper.setwParam(const val : wParam);
begin
TPDEvent(GetRecordPtr^).wParam := val;
end;
function __TPDEvent__Wrapper.getwParam : wParam;
begin
result := TPDEvent(GetRecordPtr^).wParam;
end;
procedure __TPDEvent__Wrapper.setLPARAM(const val : LPARAM);
begin
TPDEvent(GetRecordPtr^).LPARAM := val;
end;
function __TPDEvent__Wrapper.getLPARAM : LPARAM;
begin
result := TPDEvent(GetRecordPtr^).LPARAM;
end;
procedure __TPDEvent__Wrapper.setfPen(const val : BOOL);
begin
TPDEvent(GetRecordPtr^).fPen := val;
end;
function __TPDEvent__Wrapper.getfPen : BOOL;
begin
result := TPDEvent(GetRecordPtr^).fPen;
end;
procedure __TPDEvent__Wrapper.setlExInfo(const val : Longint);
begin
TPDEvent(GetRecordPtr^).lExInfo := val;
end;
function __TPDEvent__Wrapper.getlExInfo : Longint;
begin
result := TPDEvent(GetRecordPtr^).lExInfo;
end;
procedure __TPDEvent__Wrapper.setdwReserved(const val : DWORD);
begin
TPDEvent(GetRecordPtr^).dwReserved := val;
end;
function __TPDEvent__Wrapper.getdwReserved : DWORD;
begin
result := TPDEvent(GetRecordPtr^).dwReserved;
end;
function __TPenDataHeader__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPenDataHeader__Wrapper.setwVersion(const val : UINT);
begin
TPenDataHeader(GetRecordPtr^).wVersion := val;
end;
function __TPenDataHeader__Wrapper.getwVersion : UINT;
begin
result := TPenDataHeader(GetRecordPtr^).wVersion;
end;
procedure __TPenDataHeader__Wrapper.setcbSizeUsed(const val : UINT);
begin
TPenDataHeader(GetRecordPtr^).cbSizeUsed := val;
end;
function __TPenDataHeader__Wrapper.getcbSizeUsed : UINT;
begin
result := TPenDataHeader(GetRecordPtr^).cbSizeUsed;
end;
procedure __TPenDataHeader__Wrapper.setcStrokes(const val : UINT);
begin
TPenDataHeader(GetRecordPtr^).cStrokes := val;
end;
function __TPenDataHeader__Wrapper.getcStrokes : UINT;
begin
result := TPenDataHeader(GetRecordPtr^).cStrokes;
end;
procedure __TPenDataHeader__Wrapper.setcPnt(const val : UINT);
begin
TPenDataHeader(GetRecordPtr^).cPnt := val;
end;
function __TPenDataHeader__Wrapper.getcPnt : UINT;
begin
result := TPenDataHeader(GetRecordPtr^).cPnt;
end;
procedure __TPenDataHeader__Wrapper.setcPntStrokeMax(const val : UINT);
begin
TPenDataHeader(GetRecordPtr^).cPntStrokeMax := val;
end;
function __TPenDataHeader__Wrapper.getcPntStrokeMax : UINT;
begin
result := TPenDataHeader(GetRecordPtr^).cPntStrokeMax;
end;
procedure __TPenDataHeader__Wrapper.setwPndts(const val : UINT);
begin
TPenDataHeader(GetRecordPtr^).wPndts := val;
end;
function __TPenDataHeader__Wrapper.getwPndts : UINT;
begin
result := TPenDataHeader(GetRecordPtr^).wPndts;
end;
procedure __TPenDataHeader__Wrapper.setnInkWidth(const val : Integer);
begin
TPenDataHeader(GetRecordPtr^).nInkWidth := val;
end;
function __TPenDataHeader__Wrapper.getnInkWidth : Integer;
begin
result := TPenDataHeader(GetRecordPtr^).nInkWidth;
end;
procedure __TPenDataHeader__Wrapper.setrgbInk(const val : DWORD);
begin
TPenDataHeader(GetRecordPtr^).rgbInk := val;
end;
function __TPenDataHeader__Wrapper.getrgbInk : DWORD;
begin
result := TPenDataHeader(GetRecordPtr^).rgbInk;
end;
function __TPenInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPenInfo__Wrapper.setcxRawWidth(const val : UINT);
begin
TPenInfo(GetRecordPtr^).cxRawWidth := val;
end;
function __TPenInfo__Wrapper.getcxRawWidth : UINT;
begin
result := TPenInfo(GetRecordPtr^).cxRawWidth;
end;
procedure __TPenInfo__Wrapper.setcyRawHeight(const val : UINT);
begin
TPenInfo(GetRecordPtr^).cyRawHeight := val;
end;
function __TPenInfo__Wrapper.getcyRawHeight : UINT;
begin
result := TPenInfo(GetRecordPtr^).cyRawHeight;
end;
procedure __TPenInfo__Wrapper.setwDistinctWidth(const val : UINT);
begin
TPenInfo(GetRecordPtr^).wDistinctWidth := val;
end;
function __TPenInfo__Wrapper.getwDistinctWidth : UINT;
begin
result := TPenInfo(GetRecordPtr^).wDistinctWidth;
end;
procedure __TPenInfo__Wrapper.setwDistinctHeight(const val : UINT);
begin
TPenInfo(GetRecordPtr^).wDistinctHeight := val;
end;
function __TPenInfo__Wrapper.getwDistinctHeight : UINT;
begin
result := TPenInfo(GetRecordPtr^).wDistinctHeight;
end;
procedure __TPenInfo__Wrapper.setnSamplingRate(const val : Integer);
begin
TPenInfo(GetRecordPtr^).nSamplingRate := val;
end;
function __TPenInfo__Wrapper.getnSamplingRate : Integer;
begin
result := TPenInfo(GetRecordPtr^).nSamplingRate;
end;
procedure __TPenInfo__Wrapper.setnSamplingDist(const val : Integer);
begin
TPenInfo(GetRecordPtr^).nSamplingDist := val;
end;
function __TPenInfo__Wrapper.getnSamplingDist : Integer;
begin
result := TPenInfo(GetRecordPtr^).nSamplingDist;
end;
procedure __TPenInfo__Wrapper.setlPdc(const val : Longint);
begin
TPenInfo(GetRecordPtr^).lPdc := val;
end;
function __TPenInfo__Wrapper.getlPdc : Longint;
begin
result := TPenInfo(GetRecordPtr^).lPdc;
end;
procedure __TPenInfo__Wrapper.setcPens(const val : Integer);
begin
TPenInfo(GetRecordPtr^).cPens := val;
end;
function __TPenInfo__Wrapper.getcPens : Integer;
begin
result := TPenInfo(GetRecordPtr^).cPens;
end;
procedure __TPenInfo__Wrapper.setcbOemData(const val : Integer);
begin
TPenInfo(GetRecordPtr^).cbOemData := val;
end;
function __TPenInfo__Wrapper.getcbOemData : Integer;
begin
result := TPenInfo(GetRecordPtr^).cbOemData;
end;
procedure __TPenInfo__Wrapper.setfuOEM(const val : UINT);
begin
TPenInfo(GetRecordPtr^).fuOEM := val;
end;
function __TPenInfo__Wrapper.getfuOEM : UINT;
begin
result := TPenInfo(GetRecordPtr^).fuOEM;
end;
function __TPenPacket__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPenPacket__Wrapper.setwTabletX(const val : UINT);
begin
TPenPacket(GetRecordPtr^).wTabletX := val;
end;
function __TPenPacket__Wrapper.getwTabletX : UINT;
begin
result := TPenPacket(GetRecordPtr^).wTabletX;
end;
procedure __TPenPacket__Wrapper.setwTabletY(const val : UINT);
begin
TPenPacket(GetRecordPtr^).wTabletY := val;
end;
function __TPenPacket__Wrapper.getwTabletY : UINT;
begin
result := TPenPacket(GetRecordPtr^).wTabletY;
end;
procedure __TPenPacket__Wrapper.setwPdk(const val : UINT);
begin
TPenPacket(GetRecordPtr^).wPdk := val;
end;
function __TPenPacket__Wrapper.getwPdk : UINT;
begin
result := TPenPacket(GetRecordPtr^).wPdk;
end;
function __TPenTip__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPenTip__Wrapper.setcbSize(const val : DWORD);
begin
TPenTip(GetRecordPtr^).cbSize := val;
end;
function __TPenTip__Wrapper.getcbSize : DWORD;
begin
result := TPenTip(GetRecordPtr^).cbSize;
end;
procedure __TPenTip__Wrapper.setbtype(const val : Byte);
begin
TPenTip(GetRecordPtr^).btype := val;
end;
function __TPenTip__Wrapper.getbtype : Byte;
begin
result := TPenTip(GetRecordPtr^).btype;
end;
procedure __TPenTip__Wrapper.setbwidth(const val : Byte);
begin
TPenTip(GetRecordPtr^).bwidth := val;
end;
function __TPenTip__Wrapper.getbwidth : Byte;
begin
result := TPenTip(GetRecordPtr^).bwidth;
end;
procedure __TPenTip__Wrapper.setbheight(const val : Byte);
begin
TPenTip(GetRecordPtr^).bheight := val;
end;
function __TPenTip__Wrapper.getbheight : Byte;
begin
result := TPenTip(GetRecordPtr^).bheight;
end;
procedure __TPenTip__Wrapper.setbOpacity(const val : Byte);
begin
TPenTip(GetRecordPtr^).bOpacity := val;
end;
function __TPenTip__Wrapper.getbOpacity : Byte;
begin
result := TPenTip(GetRecordPtr^).bOpacity;
end;
procedure __TPenTip__Wrapper.setrgb(const val : COLORREF);
begin
TPenTip(GetRecordPtr^).rgb := val;
end;
function __TPenTip__Wrapper.getrgb : COLORREF;
begin
result := TPenTip(GetRecordPtr^).rgb;
end;
procedure __TPenTip__Wrapper.setdwFlags(const val : DWORD);
begin
TPenTip(GetRecordPtr^).dwFlags := val;
end;
function __TPenTip__Wrapper.getdwFlags : DWORD;
begin
result := TPenTip(GetRecordPtr^).dwFlags;
end;
procedure __TPenTip__Wrapper.setdwReserved(const val : DWORD);
begin
TPenTip(GetRecordPtr^).dwReserved := val;
end;
function __TPenTip__Wrapper.getdwReserved : DWORD;
begin
result := TPenTip(GetRecordPtr^).dwReserved;
end;
function __TRC__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRC__Wrapper.setHREC(const val : HREC);
begin
TRC(GetRecordPtr^).HREC := val;
end;
function __TRC__Wrapper.getHREC : HREC;
begin
result := TRC(GetRecordPtr^).HREC;
end;
procedure __TRC__Wrapper.setwEventRef(const val : UINT);
begin
TRC(GetRecordPtr^).wEventRef := val;
end;
function __TRC__Wrapper.getwEventRef : UINT;
begin
result := TRC(GetRecordPtr^).wEventRef;
end;
procedure __TRC__Wrapper.setwRcPreferences(const val : UINT);
begin
TRC(GetRecordPtr^).wRcPreferences := val;
end;
function __TRC__Wrapper.getwRcPreferences : UINT;
begin
result := TRC(GetRecordPtr^).wRcPreferences;
end;
procedure __TRC__Wrapper.setlRcOptions(const val : Longint);
begin
TRC(GetRecordPtr^).lRcOptions := val;
end;
function __TRC__Wrapper.getlRcOptions : Longint;
begin
result := TRC(GetRecordPtr^).lRcOptions;
end;
procedure __TRC__Wrapper.setwCountry(const val : UINT);
begin
TRC(GetRecordPtr^).wCountry := val;
end;
function __TRC__Wrapper.getwCountry : UINT;
begin
result := TRC(GetRecordPtr^).wCountry;
end;
procedure __TRC__Wrapper.setwIntlPreferences(const val : UINT);
begin
TRC(GetRecordPtr^).wIntlPreferences := val;
end;
function __TRC__Wrapper.getwIntlPreferences : UINT;
begin
result := TRC(GetRecordPtr^).wIntlPreferences;
end;
procedure __TRC__Wrapper.setwTryDictionary(const val : UINT);
begin
TRC(GetRecordPtr^).wTryDictionary := val;
end;
function __TRC__Wrapper.getwTryDictionary : UINT;
begin
result := TRC(GetRecordPtr^).wTryDictionary;
end;
procedure __TRC__Wrapper.setclErrorLevel(const val : CL);
begin
TRC(GetRecordPtr^).clErrorLevel := val;
end;
function __TRC__Wrapper.getclErrorLevel : CL;
begin
result := TRC(GetRecordPtr^).clErrorLevel;
end;
procedure __TRC__Wrapper.setALC(const val : ALC);
begin
TRC(GetRecordPtr^).ALC := val;
end;
function __TRC__Wrapper.getALC : ALC;
begin
result := TRC(GetRecordPtr^).ALC;
end;
procedure __TRC__Wrapper.setalcPriority(const val : ALC);
begin
TRC(GetRecordPtr^).alcPriority := val;
end;
function __TRC__Wrapper.getalcPriority : ALC;
begin
result := TRC(GetRecordPtr^).alcPriority;
end;
procedure __TRC__Wrapper.setwResultMode(const val : UINT);
begin
TRC(GetRecordPtr^).wResultMode := val;
end;
function __TRC__Wrapper.getwResultMode : UINT;
begin
result := TRC(GetRecordPtr^).wResultMode;
end;
procedure __TRC__Wrapper.setwTimeOut(const val : UINT);
begin
TRC(GetRecordPtr^).wTimeOut := val;
end;
function __TRC__Wrapper.getwTimeOut : UINT;
begin
result := TRC(GetRecordPtr^).wTimeOut;
end;
procedure __TRC__Wrapper.setlPcm(const val : Longint);
begin
TRC(GetRecordPtr^).lPcm := val;
end;
function __TRC__Wrapper.getlPcm : Longint;
begin
result := TRC(GetRecordPtr^).lPcm;
end;
procedure __TRC__Wrapper.setwRcOrient(const val : UINT);
begin
TRC(GetRecordPtr^).wRcOrient := val;
end;
function __TRC__Wrapper.getwRcOrient : UINT;
begin
result := TRC(GetRecordPtr^).wRcOrient;
end;
procedure __TRC__Wrapper.setwRcDirect(const val : UINT);
begin
TRC(GetRecordPtr^).wRcDirect := val;
end;
function __TRC__Wrapper.getwRcDirect : UINT;
begin
result := TRC(GetRecordPtr^).wRcDirect;
end;
procedure __TRC__Wrapper.setnInkWidth(const val : Integer);
begin
TRC(GetRecordPtr^).nInkWidth := val;
end;
function __TRC__Wrapper.getnInkWidth : Integer;
begin
result := TRC(GetRecordPtr^).nInkWidth;
end;
procedure __TRC__Wrapper.setrgbInk(const val : COLORREF);
begin
TRC(GetRecordPtr^).rgbInk := val;
end;
function __TRC__Wrapper.getrgbInk : COLORREF;
begin
result := TRC(GetRecordPtr^).rgbInk;
end;
procedure __TRC__Wrapper.setdwAppParam(const val : DWORD);
begin
TRC(GetRecordPtr^).dwAppParam := val;
end;
function __TRC__Wrapper.getdwAppParam : DWORD;
begin
result := TRC(GetRecordPtr^).dwAppParam;
end;
procedure __TRC__Wrapper.setdwDictParam(const val : DWORD);
begin
TRC(GetRecordPtr^).dwDictParam := val;
end;
function __TRC__Wrapper.getdwDictParam : DWORD;
begin
result := TRC(GetRecordPtr^).dwDictParam;
end;
procedure __TRC__Wrapper.setdwRecognizer(const val : DWORD);
begin
TRC(GetRecordPtr^).dwRecognizer := val;
end;
function __TRC__Wrapper.getdwRecognizer : DWORD;
begin
result := TRC(GetRecordPtr^).dwRecognizer;
end;
function __TRCResult__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRCResult__Wrapper.setwResultsType(const val : UINT);
begin
TRCResult(GetRecordPtr^).wResultsType := val;
end;
function __TRCResult__Wrapper.getwResultsType : UINT;
begin
result := TRCResult(GetRecordPtr^).wResultsType;
end;
procedure __TRCResult__Wrapper.setcSyv(const val : Integer);
begin
TRCResult(GetRecordPtr^).cSyv := val;
end;
function __TRCResult__Wrapper.getcSyv : Integer;
begin
result := TRCResult(GetRecordPtr^).cSyv;
end;
procedure __TRCResult__Wrapper.sethSyv(const val : THandle);
begin
TRCResult(GetRecordPtr^).hSyv := val;
end;
function __TRCResult__Wrapper.gethSyv : THandle;
begin
result := TRCResult(GetRecordPtr^).hSyv;
end;
procedure __TRCResult__Wrapper.setnBaseLine(const val : Integer);
begin
TRCResult(GetRecordPtr^).nBaseLine := val;
end;
function __TRCResult__Wrapper.getnBaseLine : Integer;
begin
result := TRCResult(GetRecordPtr^).nBaseLine;
end;
procedure __TRCResult__Wrapper.setnMidLine(const val : Integer);
begin
TRCResult(GetRecordPtr^).nMidLine := val;
end;
function __TRCResult__Wrapper.getnMidLine : Integer;
begin
result := TRCResult(GetRecordPtr^).nMidLine;
end;
procedure __TRCResult__Wrapper.setHPENDATA(const val : HPENDATA);
begin
TRCResult(GetRecordPtr^).HPENDATA := val;
end;
function __TRCResult__Wrapper.getHPENDATA : HPENDATA;
begin
result := TRCResult(GetRecordPtr^).HPENDATA;
end;
function __TRectOfs__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRectOfs__Wrapper.setdLeft(const val : Integer);
begin
TRectOfs(GetRecordPtr^).dLeft := val;
end;
function __TRectOfs__Wrapper.getdLeft : Integer;
begin
result := TRectOfs(GetRecordPtr^).dLeft;
end;
procedure __TRectOfs__Wrapper.setdTop(const val : Integer);
begin
TRectOfs(GetRecordPtr^).dTop := val;
end;
function __TRectOfs__Wrapper.getdTop : Integer;
begin
result := TRectOfs(GetRecordPtr^).dTop;
end;
procedure __TRectOfs__Wrapper.setdRight(const val : Integer);
begin
TRectOfs(GetRecordPtr^).dRight := val;
end;
function __TRectOfs__Wrapper.getdRight : Integer;
begin
result := TRectOfs(GetRecordPtr^).dRight;
end;
procedure __TRectOfs__Wrapper.setdBottom(const val : Integer);
begin
TRectOfs(GetRecordPtr^).dBottom := val;
end;
function __TRectOfs__Wrapper.getdBottom : Integer;
begin
result := TRectOfs(GetRecordPtr^).dBottom;
end;
function __TSKBInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSKBInfo__Wrapper.setnPad(const val : Word);
begin
TSKBInfo(GetRecordPtr^).nPad := val;
end;
function __TSKBInfo__Wrapper.getnPad : Word;
begin
result := TSKBInfo(GetRecordPtr^).nPad;
end;
procedure __TSKBInfo__Wrapper.setfVisible(const val : BOOL);
begin
TSKBInfo(GetRecordPtr^).fVisible := val;
end;
function __TSKBInfo__Wrapper.getfVisible : BOOL;
begin
result := TSKBInfo(GetRecordPtr^).fVisible;
end;
procedure __TSKBInfo__Wrapper.setfMinimized(const val : BOOL);
begin
TSKBInfo(GetRecordPtr^).fMinimized := val;
end;
function __TSKBInfo__Wrapper.getfMinimized : BOOL;
begin
result := TSKBInfo(GetRecordPtr^).fMinimized;
end;
procedure __TSKBInfo__Wrapper.setdwReserved(const val : Longint);
begin
TSKBInfo(GetRecordPtr^).dwReserved := val;
end;
function __TSKBInfo__Wrapper.getdwReserved : Longint;
begin
result := TSKBInfo(GetRecordPtr^).dwReserved;
end;
function __TStrkFmt__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TStrkFmt__Wrapper.setcbSize(const val : DWORD);
begin
TStrkFmt(GetRecordPtr^).cbSize := val;
end;
function __TStrkFmt__Wrapper.getcbSize : DWORD;
begin
result := TStrkFmt(GetRecordPtr^).cbSize;
end;
procedure __TStrkFmt__Wrapper.setiesf(const val : UINT);
begin
TStrkFmt(GetRecordPtr^).iesf := val;
end;
function __TStrkFmt__Wrapper.getiesf : UINT;
begin
result := TStrkFmt(GetRecordPtr^).iesf;
end;
procedure __TStrkFmt__Wrapper.setiStrk(const val : UINT);
begin
TStrkFmt(GetRecordPtr^).iStrk := val;
end;
function __TStrkFmt__Wrapper.getiStrk : UINT;
begin
result := TStrkFmt(GetRecordPtr^).iStrk;
end;
procedure __TStrkFmt__Wrapper.setdwUser(const val : DWORD);
begin
TStrkFmt(GetRecordPtr^).dwUser := val;
end;
function __TStrkFmt__Wrapper.getdwUser : DWORD;
begin
result := TStrkFmt(GetRecordPtr^).dwUser;
end;
procedure __TStrkFmt__Wrapper.setdwReserved(const val : DWORD);
begin
TStrkFmt(GetRecordPtr^).dwReserved := val;
end;
function __TStrkFmt__Wrapper.getdwReserved : DWORD;
begin
result := TStrkFmt(GetRecordPtr^).dwReserved;
end;
function __TStrokeInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TStrokeInfo__Wrapper.setcPnt(const val : UINT);
begin
TStrokeInfo(GetRecordPtr^).cPnt := val;
end;
function __TStrokeInfo__Wrapper.getcPnt : UINT;
begin
result := TStrokeInfo(GetRecordPtr^).cPnt;
end;
procedure __TStrokeInfo__Wrapper.setcbPnts(const val : UINT);
begin
TStrokeInfo(GetRecordPtr^).cbPnts := val;
end;
function __TStrokeInfo__Wrapper.getcbPnts : UINT;
begin
result := TStrokeInfo(GetRecordPtr^).cbPnts;
end;
procedure __TStrokeInfo__Wrapper.setwPdk(const val : UINT);
begin
TStrokeInfo(GetRecordPtr^).wPdk := val;
end;
function __TStrokeInfo__Wrapper.getwPdk : UINT;
begin
result := TStrokeInfo(GetRecordPtr^).wPdk;
end;
procedure __TStrokeInfo__Wrapper.setdwTick(const val : DWORD);
begin
TStrokeInfo(GetRecordPtr^).dwTick := val;
end;
function __TStrokeInfo__Wrapper.getdwTick : DWORD;
begin
result := TStrokeInfo(GetRecordPtr^).dwTick;
end;
function __TSYC__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSYC__Wrapper.setwStrokeFirst(const val : UINT);
begin
TSYC(GetRecordPtr^).wStrokeFirst := val;
end;
function __TSYC__Wrapper.getwStrokeFirst : UINT;
begin
result := TSYC(GetRecordPtr^).wStrokeFirst;
end;
procedure __TSYC__Wrapper.setwPntFirst(const val : UINT);
begin
TSYC(GetRecordPtr^).wPntFirst := val;
end;
function __TSYC__Wrapper.getwPntFirst : UINT;
begin
result := TSYC(GetRecordPtr^).wPntFirst;
end;
procedure __TSYC__Wrapper.setwStrokeLast(const val : UINT);
begin
TSYC(GetRecordPtr^).wStrokeLast := val;
end;
function __TSYC__Wrapper.getwStrokeLast : UINT;
begin
result := TSYC(GetRecordPtr^).wStrokeLast;
end;
procedure __TSYC__Wrapper.setwPntLast(const val : UINT);
begin
TSYC(GetRecordPtr^).wPntLast := val;
end;
function __TSYC__Wrapper.getwPntLast : UINT;
begin
result := TSYC(GetRecordPtr^).wPntLast;
end;
procedure __TSYC__Wrapper.setfLastSyc(const val : BOOL);
begin
TSYC(GetRecordPtr^).fLastSyc := val;
end;
function __TSYC__Wrapper.getfLastSyc : BOOL;
begin
result := TSYC(GetRecordPtr^).fLastSyc;
end;
function __TSYE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSYE__Wrapper.setSYV(const val : SYV);
begin
TSYE(GetRecordPtr^).SYV := val;
end;
function __TSYE__Wrapper.getSYV : SYV;
begin
result := TSYE(GetRecordPtr^).SYV;
end;
procedure __TSYE__Wrapper.setlRecogVal(const val : Longint);
begin
TSYE(GetRecordPtr^).lRecogVal := val;
end;
function __TSYE__Wrapper.getlRecogVal : Longint;
begin
result := TSYE(GetRecordPtr^).lRecogVal;
end;
procedure __TSYE__Wrapper.setCL(const val : CL);
begin
TSYE(GetRecordPtr^).CL := val;
end;
function __TSYE__Wrapper.getCL : CL;
begin
result := TSYE(GetRecordPtr^).CL;
end;
procedure __TSYE__Wrapper.setiSyc(const val : Integer);
begin
TSYE(GetRecordPtr^).iSyc := val;
end;
function __TSYE__Wrapper.getiSyc : Integer;
begin
result := TSYE(GetRecordPtr^).iSyc;
end;
function __TSYG__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSYG__Wrapper.setcHotSpot(const val : Integer);
begin
TSYG(GetRecordPtr^).cHotSpot := val;
end;
function __TSYG__Wrapper.getcHotSpot : Integer;
begin
result := TSYG(GetRecordPtr^).cHotSpot;
end;
procedure __TSYG__Wrapper.setnFirstBox(const val : Integer);
begin
TSYG(GetRecordPtr^).nFirstBox := val;
end;
function __TSYG__Wrapper.getnFirstBox : Integer;
begin
result := TSYG(GetRecordPtr^).nFirstBox;
end;
procedure __TSYG__Wrapper.setlRecogVal(const val : Longint);
begin
TSYG(GetRecordPtr^).lRecogVal := val;
end;
function __TSYG__Wrapper.getlRecogVal : Longint;
begin
result := TSYG(GetRecordPtr^).lRecogVal;
end;
procedure __TSYG__Wrapper.setcSye(const val : Integer);
begin
TSYG(GetRecordPtr^).cSye := val;
end;
function __TSYG__Wrapper.getcSye : Integer;
begin
result := TSYG(GetRecordPtr^).cSye;
end;
procedure __TSYG__Wrapper.setcSyc(const val : Integer);
begin
TSYG(GetRecordPtr^).cSyc := val;
end;
function __TSYG__Wrapper.getcSyc : Integer;
begin
result := TSYG(GetRecordPtr^).cSyc;
end;
function __TTarget__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTarget__Wrapper.setdwFlags(const val : DWORD);
begin
TTarget(GetRecordPtr^).dwFlags := val;
end;
function __TTarget__Wrapper.getdwFlags : DWORD;
begin
result := TTarget(GetRecordPtr^).dwFlags;
end;
procedure __TTarget__Wrapper.setidTarget(const val : DWORD);
begin
TTarget(GetRecordPtr^).idTarget := val;
end;
function __TTarget__Wrapper.getidTarget : DWORD;
begin
result := TTarget(GetRecordPtr^).idTarget;
end;
procedure __TTarget__Wrapper.sethtrgTarget(const val : HTRG);
begin
TTarget(GetRecordPtr^).htrgTarget := val;
end;
function __TTarget__Wrapper.gethtrgTarget : HTRG;
begin
result := TTarget(GetRecordPtr^).htrgTarget;
end;
procedure __TTarget__Wrapper.setdwData(const val : DWORD);
begin
TTarget(GetRecordPtr^).dwData := val;
end;
function __TTarget__Wrapper.getdwData : DWORD;
begin
result := TTarget(GetRecordPtr^).dwData;
end;
function __TTargInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTargInfo__Wrapper.setcbSize(const val : DWORD);
begin
TTargInfo(GetRecordPtr^).cbSize := val;
end;
function __TTargInfo__Wrapper.getcbSize : DWORD;
begin
result := TTargInfo(GetRecordPtr^).cbSize;
end;
procedure __TTargInfo__Wrapper.setdwFlags(const val : DWORD);
begin
TTargInfo(GetRecordPtr^).dwFlags := val;
end;
function __TTargInfo__Wrapper.getdwFlags : DWORD;
begin
result := TTargInfo(GetRecordPtr^).dwFlags;
end;
procedure __TTargInfo__Wrapper.sethtrgOwner(const val : HTRG);
begin
TTargInfo(GetRecordPtr^).htrgOwner := val;
end;
function __TTargInfo__Wrapper.gethtrgOwner : HTRG;
begin
result := TTargInfo(GetRecordPtr^).htrgOwner;
end;
procedure __TTargInfo__Wrapper.setcTargets(const val : Word);
begin
TTargInfo(GetRecordPtr^).cTargets := val;
end;
function __TTargInfo__Wrapper.getcTargets : Word;
begin
result := TTargInfo(GetRecordPtr^).cTargets;
end;
procedure __TTargInfo__Wrapper.setiTargetLast(const val : Word);
begin
TTargInfo(GetRecordPtr^).iTargetLast := val;
end;
function __TTargInfo__Wrapper.getiTargetLast : Word;
begin
result := TTargInfo(GetRecordPtr^).iTargetLast;
end;
function _ABSTIME_ : IDispatch;
begin
  result := __ABSTIME__Wrapper.Create;
end;
function _ANIMATEINFO_ : IDispatch;
begin
  result := __ANIMATEINFO__Wrapper.Create;
end;
function _BOXEDITINFO_ : IDispatch;
begin
  result := __BOXEDITINFO__Wrapper.Create;
end;
function _BOXLAYOUT_ : IDispatch;
begin
  result := __BOXLAYOUT__Wrapper.Create;
end;
function _BOXRESULTS_ : IDispatch;
begin
  result := __BOXRESULTS__Wrapper.Create;
end;
function _CALBSTRUCT_ : IDispatch;
begin
  result := __CALBSTRUCT__Wrapper.Create;
end;
function _CTLINITBEDIT_ : IDispatch;
begin
  result := __CTLINITBEDIT__Wrapper.Create;
end;
function _CTLINITHEDIT_ : IDispatch;
begin
  result := __CTLINITHEDIT__Wrapper.Create;
end;
function _CTLINITIEDIT_ : IDispatch;
begin
  result := __CTLINITIEDIT__Wrapper.Create;
end;
function _GUIDE_ : IDispatch;
begin
  result := __GUIDE__Wrapper.Create;
end;
function _IMECOLORS_ : IDispatch;
begin
  result := __IMECOLORS__Wrapper.Create;
end;
function _INKINGINFO_ : IDispatch;
begin
  result := __INKINGINFO__Wrapper.Create;
end;
function _INPPARAMS_ : IDispatch;
begin
  result := __INPPARAMS__Wrapper.Create;
end;
function _INTERVAL_ : IDispatch;
begin
  result := __INTERVAL__Wrapper.Create;
end;
function _OEMPENINFO_ : IDispatch;
begin
  result := __OEMPENINFO__Wrapper.Create;
end;
function _OEMPENPACKET_ : IDispatch;
begin
  result := __OEMPENPACKET__Wrapper.Create;
end;
function _PCMINFO_ : IDispatch;
begin
  result := __PCMINFO__Wrapper.Create;
end;
function _PDEVENT_ : IDispatch;
begin
  result := __PDEVENT__Wrapper.Create;
end;
function _PENDATAHEADER_ : IDispatch;
begin
  result := __PENDATAHEADER__Wrapper.Create;
end;
function _PENINFO_ : IDispatch;
begin
  result := __PENINFO__Wrapper.Create;
end;
function _PENPACKET_ : IDispatch;
begin
  result := __PENPACKET__Wrapper.Create;
end;
function _PENTIP_ : IDispatch;
begin
  result := __PENTIP__Wrapper.Create;
end;
function _RC_ : IDispatch;
begin
  result := __RC__Wrapper.Create;
end;
function _RCRESULT_ : IDispatch;
begin
  result := __RCRESULT__Wrapper.Create;
end;
function _RECTOFS_ : IDispatch;
begin
  result := __RECTOFS__Wrapper.Create;
end;
function _SKBINFO_ : IDispatch;
begin
  result := __SKBINFO__Wrapper.Create;
end;
function _STRKFMT_ : IDispatch;
begin
  result := __STRKFMT__Wrapper.Create;
end;
function _STROKEINFO_ : IDispatch;
begin
  result := __STROKEINFO__Wrapper.Create;
end;
function _SYC_ : IDispatch;
begin
  result := __SYC__Wrapper.Create;
end;
function _SYE_ : IDispatch;
begin
  result := __SYE__Wrapper.Create;
end;
function _SYG_ : IDispatch;
begin
  result := __SYG__Wrapper.Create;
end;
function _TAbsTime_ : IDispatch;
begin
  result := __TAbsTime__Wrapper.Create;
end;
function _tagABSTIME_ : IDispatch;
begin
  result := __tagABSTIME__Wrapper.Create;
end;
function _tagANIMATEINFO_ : IDispatch;
begin
  result := __tagANIMATEINFO__Wrapper.Create;
end;
function _tagBOXEDITINFO_ : IDispatch;
begin
  result := __tagBOXEDITINFO__Wrapper.Create;
end;
function _tagBOXLAYOUT_ : IDispatch;
begin
  result := __tagBOXLAYOUT__Wrapper.Create;
end;
function _tagBOXRESULTS_ : IDispatch;
begin
  result := __tagBOXRESULTS__Wrapper.Create;
end;
function _tagCALBSTRUCT_ : IDispatch;
begin
  result := __tagCALBSTRUCT__Wrapper.Create;
end;
function _tagCTLINITBEDIT_ : IDispatch;
begin
  result := __tagCTLINITBEDIT__Wrapper.Create;
end;
function _tagCTLINITHEDIT_ : IDispatch;
begin
  result := __tagCTLINITHEDIT__Wrapper.Create;
end;
function _tagCTLINITIEDIT_ : IDispatch;
begin
  result := __tagCTLINITIEDIT__Wrapper.Create;
end;
function _tagGUIDE_ : IDispatch;
begin
  result := __tagGUIDE__Wrapper.Create;
end;
function _tagIMECOLORS_ : IDispatch;
begin
  result := __tagIMECOLORS__Wrapper.Create;
end;
function _tagINKINGINFO_ : IDispatch;
begin
  result := __tagINKINGINFO__Wrapper.Create;
end;
function _tagINPPARAMS_ : IDispatch;
begin
  result := __tagINPPARAMS__Wrapper.Create;
end;
function _tagINTERVAL_ : IDispatch;
begin
  result := __tagINTERVAL__Wrapper.Create;
end;
function _tagOEMPENINFO_ : IDispatch;
begin
  result := __tagOEMPENINFO__Wrapper.Create;
end;
function _tagOEMPENPACKET_ : IDispatch;
begin
  result := __tagOEMPENPACKET__Wrapper.Create;
end;
function _tagPCMINFO_ : IDispatch;
begin
  result := __tagPCMINFO__Wrapper.Create;
end;
function _tagPDEVENT_ : IDispatch;
begin
  result := __tagPDEVENT__Wrapper.Create;
end;
function _tagPENDATAHEADER_ : IDispatch;
begin
  result := __tagPENDATAHEADER__Wrapper.Create;
end;
function _tagPENINFO_ : IDispatch;
begin
  result := __tagPENINFO__Wrapper.Create;
end;
function _tagPENPACKET_ : IDispatch;
begin
  result := __tagPENPACKET__Wrapper.Create;
end;
function _tagPENTIP_ : IDispatch;
begin
  result := __tagPENTIP__Wrapper.Create;
end;
function _tagRC_ : IDispatch;
begin
  result := __tagRC__Wrapper.Create;
end;
function _tagRCRESULT_ : IDispatch;
begin
  result := __tagRCRESULT__Wrapper.Create;
end;
function _tagRECTOFS_ : IDispatch;
begin
  result := __tagRECTOFS__Wrapper.Create;
end;
function _tagSKBINFO_ : IDispatch;
begin
  result := __tagSKBINFO__Wrapper.Create;
end;
function _tagSTRKFMT_ : IDispatch;
begin
  result := __tagSTRKFMT__Wrapper.Create;
end;
function _tagSTROKEINFO_ : IDispatch;
begin
  result := __tagSTROKEINFO__Wrapper.Create;
end;
function _tagSYC_ : IDispatch;
begin
  result := __tagSYC__Wrapper.Create;
end;
function _tagSYE_ : IDispatch;
begin
  result := __tagSYE__Wrapper.Create;
end;
function _tagSYG_ : IDispatch;
begin
  result := __tagSYG__Wrapper.Create;
end;
function _tagTARGET_ : IDispatch;
begin
  result := __tagTARGET__Wrapper.Create;
end;
function _tagTARGINFO_ : IDispatch;
begin
  result := __tagTARGINFO__Wrapper.Create;
end;
function _TAnimateInfo_ : IDispatch;
begin
  result := __TAnimateInfo__Wrapper.Create;
end;
function _TARGET_ : IDispatch;
begin
  result := __TARGET__Wrapper.Create;
end;
function _TARGINFO_ : IDispatch;
begin
  result := __TARGINFO__Wrapper.Create;
end;
function _TBoxEditInfo_ : IDispatch;
begin
  result := __TBoxEditInfo__Wrapper.Create;
end;
function _TBoxLayout_ : IDispatch;
begin
  result := __TBoxLayout__Wrapper.Create;
end;
function _TBoxResults_ : IDispatch;
begin
  result := __TBoxResults__Wrapper.Create;
end;
function _TCalbStruct_ : IDispatch;
begin
  result := __TCalbStruct__Wrapper.Create;
end;
function _TCtlInitBEdit_ : IDispatch;
begin
  result := __TCtlInitBEdit__Wrapper.Create;
end;
function _TCtlInitHEdit_ : IDispatch;
begin
  result := __TCtlInitHEdit__Wrapper.Create;
end;
function _TCtlInitIEdit_ : IDispatch;
begin
  result := __TCtlInitIEdit__Wrapper.Create;
end;
function _TGuide_ : IDispatch;
begin
  result := __TGuide__Wrapper.Create;
end;
function _TIMEColors_ : IDispatch;
begin
  result := __TIMEColors__Wrapper.Create;
end;
function _TInkingInfo_ : IDispatch;
begin
  result := __TInkingInfo__Wrapper.Create;
end;
function _TInpParams_ : IDispatch;
begin
  result := __TInpParams__Wrapper.Create;
end;
function _TInterval_ : IDispatch;
begin
  result := __TInterval__Wrapper.Create;
end;
function _TOEMPenInfo_ : IDispatch;
begin
  result := __TOEMPenInfo__Wrapper.Create;
end;
function _TOEMPenPacket_ : IDispatch;
begin
  result := __TOEMPenPacket__Wrapper.Create;
end;
function _TPCMInfo_ : IDispatch;
begin
  result := __TPCMInfo__Wrapper.Create;
end;
function _TPDEvent_ : IDispatch;
begin
  result := __TPDEvent__Wrapper.Create;
end;
function _TPenDataHeader_ : IDispatch;
begin
  result := __TPenDataHeader__Wrapper.Create;
end;
function _TPenInfo_ : IDispatch;
begin
  result := __TPenInfo__Wrapper.Create;
end;
function _TPenPacket_ : IDispatch;
begin
  result := __TPenPacket__Wrapper.Create;
end;
function _TPenTip_ : IDispatch;
begin
  result := __TPenTip__Wrapper.Create;
end;
function _TRC_ : IDispatch;
begin
  result := __TRC__Wrapper.Create;
end;
function _TRCResult_ : IDispatch;
begin
  result := __TRCResult__Wrapper.Create;
end;
function _TRectOfs_ : IDispatch;
begin
  result := __TRectOfs__Wrapper.Create;
end;
function _TSKBInfo_ : IDispatch;
begin
  result := __TSKBInfo__Wrapper.Create;
end;
function _TStrkFmt_ : IDispatch;
begin
  result := __TStrkFmt__Wrapper.Create;
end;
function _TStrokeInfo_ : IDispatch;
begin
  result := __TStrokeInfo__Wrapper.Create;
end;
function _TSYC_ : IDispatch;
begin
  result := __TSYC__Wrapper.Create;
end;
function _TSYE_ : IDispatch;
begin
  result := __TSYE__Wrapper.Create;
end;
function _TSYG_ : IDispatch;
begin
  result := __TSYG__Wrapper.Create;
end;
function _TTarget_ : IDispatch;
begin
  result := __TTarget__Wrapper.Create;
end;
function _TTargInfo_ : IDispatch;
begin
  result := __TTargInfo__Wrapper.Create;
end;
function ____dwDiffAT__Wrapper(const p0 : IDispatch;
const p1 : IDispatch): Integer;
var
__p0 : ^TAbsTime;
__i0 : IDispatch;
__p1 : ^TAbsTime;
__i1 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := dwDiffAT(__p0^,__p1^);
end;

function ____FLTAbsTime__Wrapper(const p0 : IDispatch;
const p1 : IDispatch): Boolean;
var
__p0 : ^TAbsTime;
__i0 : IDispatch;
__p1 : ^TAbsTime;
__i1 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := FLTAbsTime(__p0^,__p1^);
end;

function ____FLTEAbsTime__Wrapper(const p0 : IDispatch;
const p1 : IDispatch): Boolean;
var
__p0 : ^TAbsTime;
__i0 : IDispatch;
__p1 : ^TAbsTime;
__i1 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := FLTEAbsTime(__p0^,__p1^);
end;

function ____FEQAbsTime__Wrapper(const p0 : IDispatch;
const p1 : IDispatch): Boolean;
var
__p0 : ^TAbsTime;
__i0 : IDispatch;
__p1 : ^TAbsTime;
__i1 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := FEQAbsTime(__p0^,__p1^);
end;

procedure ____MakeAbsTime__Wrapper(const p0 : IDispatch;
p1 : Integer;
p2 : Integer);
var
__p0 : ^TAbsTime;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
MakeAbsTime(__p0^,p1,p2);
end;


type __ABSTIME__Wrapper__ = class(__ABSTIME__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ABSTIME__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertABSTIMEToVariant(var R : ABSTIME) : OleVariant;
var
__rw : __ABSTIME__Wrapper__;
begin
__rw := __ABSTIME__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToABSTIME(const V : OleVariant) : ABSTIME;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ABSTIME((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ANIMATEINFO__Wrapper__ = class(__ANIMATEINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ANIMATEINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertANIMATEINFOToVariant(var R : ANIMATEINFO) : OleVariant;
var
__rw : __ANIMATEINFO__Wrapper__;
begin
__rw := __ANIMATEINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToANIMATEINFO(const V : OleVariant) : ANIMATEINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ANIMATEINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __BOXEDITINFO__Wrapper__ = class(__BOXEDITINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __BOXEDITINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertBOXEDITINFOToVariant(var R : BOXEDITINFO) : OleVariant;
var
__rw : __BOXEDITINFO__Wrapper__;
begin
__rw := __BOXEDITINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToBOXEDITINFO(const V : OleVariant) : BOXEDITINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := BOXEDITINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __BOXLAYOUT__Wrapper__ = class(__BOXLAYOUT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __BOXLAYOUT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertBOXLAYOUTToVariant(var R : BOXLAYOUT) : OleVariant;
var
__rw : __BOXLAYOUT__Wrapper__;
begin
__rw := __BOXLAYOUT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToBOXLAYOUT(const V : OleVariant) : BOXLAYOUT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := BOXLAYOUT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __BOXRESULTS__Wrapper__ = class(__BOXRESULTS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __BOXRESULTS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertBOXRESULTSToVariant(var R : BOXRESULTS) : OleVariant;
var
__rw : __BOXRESULTS__Wrapper__;
begin
__rw := __BOXRESULTS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToBOXRESULTS(const V : OleVariant) : BOXRESULTS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := BOXRESULTS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __CALBSTRUCT__Wrapper__ = class(__CALBSTRUCT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __CALBSTRUCT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertCALBSTRUCTToVariant(var R : CALBSTRUCT) : OleVariant;
var
__rw : __CALBSTRUCT__Wrapper__;
begin
__rw := __CALBSTRUCT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToCALBSTRUCT(const V : OleVariant) : CALBSTRUCT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := CALBSTRUCT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __CTLINITBEDIT__Wrapper__ = class(__CTLINITBEDIT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __CTLINITBEDIT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertCTLINITBEDITToVariant(var R : CTLINITBEDIT) : OleVariant;
var
__rw : __CTLINITBEDIT__Wrapper__;
begin
__rw := __CTLINITBEDIT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToCTLINITBEDIT(const V : OleVariant) : CTLINITBEDIT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := CTLINITBEDIT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __CTLINITHEDIT__Wrapper__ = class(__CTLINITHEDIT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __CTLINITHEDIT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertCTLINITHEDITToVariant(var R : CTLINITHEDIT) : OleVariant;
var
__rw : __CTLINITHEDIT__Wrapper__;
begin
__rw := __CTLINITHEDIT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToCTLINITHEDIT(const V : OleVariant) : CTLINITHEDIT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := CTLINITHEDIT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __CTLINITIEDIT__Wrapper__ = class(__CTLINITIEDIT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __CTLINITIEDIT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertCTLINITIEDITToVariant(var R : CTLINITIEDIT) : OleVariant;
var
__rw : __CTLINITIEDIT__Wrapper__;
begin
__rw := __CTLINITIEDIT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToCTLINITIEDIT(const V : OleVariant) : CTLINITIEDIT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := CTLINITIEDIT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __GUIDE__Wrapper__ = class(__GUIDE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __GUIDE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertGUIDEToVariant(var R : GUIDE) : OleVariant;
var
__rw : __GUIDE__Wrapper__;
begin
__rw := __GUIDE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToGUIDE(const V : OleVariant) : GUIDE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := GUIDE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __IMECOLORS__Wrapper__ = class(__IMECOLORS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __IMECOLORS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertIMECOLORSToVariant(var R : IMECOLORS) : OleVariant;
var
__rw : __IMECOLORS__Wrapper__;
begin
__rw := __IMECOLORS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToIMECOLORS(const V : OleVariant) : IMECOLORS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := IMECOLORS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __INKINGINFO__Wrapper__ = class(__INKINGINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __INKINGINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertINKINGINFOToVariant(var R : INKINGINFO) : OleVariant;
var
__rw : __INKINGINFO__Wrapper__;
begin
__rw := __INKINGINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToINKINGINFO(const V : OleVariant) : INKINGINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := INKINGINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __INPPARAMS__Wrapper__ = class(__INPPARAMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __INPPARAMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertINPPARAMSToVariant(var R : INPPARAMS) : OleVariant;
var
__rw : __INPPARAMS__Wrapper__;
begin
__rw := __INPPARAMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToINPPARAMS(const V : OleVariant) : INPPARAMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := INPPARAMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __INTERVAL__Wrapper__ = class(__INTERVAL__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __INTERVAL__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertINTERVALToVariant(var R : INTERVAL) : OleVariant;
var
__rw : __INTERVAL__Wrapper__;
begin
__rw := __INTERVAL__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToINTERVAL(const V : OleVariant) : INTERVAL;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := INTERVAL((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __OEMPENINFO__Wrapper__ = class(__OEMPENINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __OEMPENINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertOEMPENINFOToVariant(var R : OEMPENINFO) : OleVariant;
var
__rw : __OEMPENINFO__Wrapper__;
begin
__rw := __OEMPENINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToOEMPENINFO(const V : OleVariant) : OEMPENINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := OEMPENINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __OEMPENPACKET__Wrapper__ = class(__OEMPENPACKET__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __OEMPENPACKET__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertOEMPENPACKETToVariant(var R : OEMPENPACKET) : OleVariant;
var
__rw : __OEMPENPACKET__Wrapper__;
begin
__rw := __OEMPENPACKET__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToOEMPENPACKET(const V : OleVariant) : OEMPENPACKET;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := OEMPENPACKET((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __PCMINFO__Wrapper__ = class(__PCMINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __PCMINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertPCMINFOToVariant(var R : PCMINFO) : OleVariant;
var
__rw : __PCMINFO__Wrapper__;
begin
__rw := __PCMINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToPCMINFO(const V : OleVariant) : PCMINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := PCMINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __PDEVENT__Wrapper__ = class(__PDEVENT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __PDEVENT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertPDEVENTToVariant(var R : PDEVENT) : OleVariant;
var
__rw : __PDEVENT__Wrapper__;
begin
__rw := __PDEVENT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToPDEVENT(const V : OleVariant) : PDEVENT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := PDEVENT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __PENDATAHEADER__Wrapper__ = class(__PENDATAHEADER__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __PENDATAHEADER__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertPENDATAHEADERToVariant(var R : PENDATAHEADER) : OleVariant;
var
__rw : __PENDATAHEADER__Wrapper__;
begin
__rw := __PENDATAHEADER__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToPENDATAHEADER(const V : OleVariant) : PENDATAHEADER;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := PENDATAHEADER((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __PENINFO__Wrapper__ = class(__PENINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __PENINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertPENINFOToVariant(var R : PENINFO) : OleVariant;
var
__rw : __PENINFO__Wrapper__;
begin
__rw := __PENINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToPENINFO(const V : OleVariant) : PENINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := PENINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __PENPACKET__Wrapper__ = class(__PENPACKET__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __PENPACKET__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertPENPACKETToVariant(var R : PENPACKET) : OleVariant;
var
__rw : __PENPACKET__Wrapper__;
begin
__rw := __PENPACKET__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToPENPACKET(const V : OleVariant) : PENPACKET;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := PENPACKET((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __PENTIP__Wrapper__ = class(__PENTIP__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __PENTIP__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertPENTIPToVariant(var R : PENTIP) : OleVariant;
var
__rw : __PENTIP__Wrapper__;
begin
__rw := __PENTIP__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToPENTIP(const V : OleVariant) : PENTIP;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := PENTIP((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __RC__Wrapper__ = class(__RC__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __RC__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertRCToVariant(var R : RC) : OleVariant;
var
__rw : __RC__Wrapper__;
begin
__rw := __RC__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToRC(const V : OleVariant) : RC;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := RC((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __RCRESULT__Wrapper__ = class(__RCRESULT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __RCRESULT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertRCRESULTToVariant(var R : RCRESULT) : OleVariant;
var
__rw : __RCRESULT__Wrapper__;
begin
__rw := __RCRESULT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToRCRESULT(const V : OleVariant) : RCRESULT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := RCRESULT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __RECTOFS__Wrapper__ = class(__RECTOFS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __RECTOFS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertRECTOFSToVariant(var R : RECTOFS) : OleVariant;
var
__rw : __RECTOFS__Wrapper__;
begin
__rw := __RECTOFS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToRECTOFS(const V : OleVariant) : RECTOFS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := RECTOFS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SKBINFO__Wrapper__ = class(__SKBINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SKBINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSKBINFOToVariant(var R : SKBINFO) : OleVariant;
var
__rw : __SKBINFO__Wrapper__;
begin
__rw := __SKBINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSKBINFO(const V : OleVariant) : SKBINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SKBINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __STRKFMT__Wrapper__ = class(__STRKFMT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __STRKFMT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSTRKFMTToVariant(var R : STRKFMT) : OleVariant;
var
__rw : __STRKFMT__Wrapper__;
begin
__rw := __STRKFMT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSTRKFMT(const V : OleVariant) : STRKFMT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := STRKFMT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __STROKEINFO__Wrapper__ = class(__STROKEINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __STROKEINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSTROKEINFOToVariant(var R : STROKEINFO) : OleVariant;
var
__rw : __STROKEINFO__Wrapper__;
begin
__rw := __STROKEINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSTROKEINFO(const V : OleVariant) : STROKEINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := STROKEINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SYC__Wrapper__ = class(__SYC__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SYC__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSYCToVariant(var R : SYC) : OleVariant;
var
__rw : __SYC__Wrapper__;
begin
__rw := __SYC__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSYC(const V : OleVariant) : SYC;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SYC((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SYE__Wrapper__ = class(__SYE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SYE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSYEToVariant(var R : SYE) : OleVariant;
var
__rw : __SYE__Wrapper__;
begin
__rw := __SYE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSYE(const V : OleVariant) : SYE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SYE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SYG__Wrapper__ = class(__SYG__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SYG__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSYGToVariant(var R : SYG) : OleVariant;
var
__rw : __SYG__Wrapper__;
begin
__rw := __SYG__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSYG(const V : OleVariant) : SYG;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SYG((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TAbsTime__Wrapper__ = class(__TAbsTime__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TAbsTime__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTAbsTimeToVariant(var R : TAbsTime) : OleVariant;
var
__rw : __TAbsTime__Wrapper__;
begin
__rw := __TAbsTime__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTAbsTime(const V : OleVariant) : TAbsTime;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TAbsTime((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagABSTIME__Wrapper__ = class(__tagABSTIME__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagABSTIME__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagABSTIMEToVariant(var R : tagABSTIME) : OleVariant;
var
__rw : __tagABSTIME__Wrapper__;
begin
__rw := __tagABSTIME__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagABSTIME(const V : OleVariant) : tagABSTIME;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagABSTIME((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagANIMATEINFO__Wrapper__ = class(__tagANIMATEINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagANIMATEINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagANIMATEINFOToVariant(var R : tagANIMATEINFO) : OleVariant;
var
__rw : __tagANIMATEINFO__Wrapper__;
begin
__rw := __tagANIMATEINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagANIMATEINFO(const V : OleVariant) : tagANIMATEINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagANIMATEINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagBOXEDITINFO__Wrapper__ = class(__tagBOXEDITINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagBOXEDITINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagBOXEDITINFOToVariant(var R : tagBOXEDITINFO) : OleVariant;
var
__rw : __tagBOXEDITINFO__Wrapper__;
begin
__rw := __tagBOXEDITINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagBOXEDITINFO(const V : OleVariant) : tagBOXEDITINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagBOXEDITINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagBOXLAYOUT__Wrapper__ = class(__tagBOXLAYOUT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagBOXLAYOUT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagBOXLAYOUTToVariant(var R : tagBOXLAYOUT) : OleVariant;
var
__rw : __tagBOXLAYOUT__Wrapper__;
begin
__rw := __tagBOXLAYOUT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagBOXLAYOUT(const V : OleVariant) : tagBOXLAYOUT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagBOXLAYOUT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagBOXRESULTS__Wrapper__ = class(__tagBOXRESULTS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagBOXRESULTS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagBOXRESULTSToVariant(var R : tagBOXRESULTS) : OleVariant;
var
__rw : __tagBOXRESULTS__Wrapper__;
begin
__rw := __tagBOXRESULTS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagBOXRESULTS(const V : OleVariant) : tagBOXRESULTS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagBOXRESULTS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagCALBSTRUCT__Wrapper__ = class(__tagCALBSTRUCT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagCALBSTRUCT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagCALBSTRUCTToVariant(var R : tagCALBSTRUCT) : OleVariant;
var
__rw : __tagCALBSTRUCT__Wrapper__;
begin
__rw := __tagCALBSTRUCT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagCALBSTRUCT(const V : OleVariant) : tagCALBSTRUCT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagCALBSTRUCT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagCTLINITBEDIT__Wrapper__ = class(__tagCTLINITBEDIT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagCTLINITBEDIT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagCTLINITBEDITToVariant(var R : tagCTLINITBEDIT) : OleVariant;
var
__rw : __tagCTLINITBEDIT__Wrapper__;
begin
__rw := __tagCTLINITBEDIT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagCTLINITBEDIT(const V : OleVariant) : tagCTLINITBEDIT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagCTLINITBEDIT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagCTLINITHEDIT__Wrapper__ = class(__tagCTLINITHEDIT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagCTLINITHEDIT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagCTLINITHEDITToVariant(var R : tagCTLINITHEDIT) : OleVariant;
var
__rw : __tagCTLINITHEDIT__Wrapper__;
begin
__rw := __tagCTLINITHEDIT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagCTLINITHEDIT(const V : OleVariant) : tagCTLINITHEDIT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagCTLINITHEDIT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagCTLINITIEDIT__Wrapper__ = class(__tagCTLINITIEDIT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagCTLINITIEDIT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagCTLINITIEDITToVariant(var R : tagCTLINITIEDIT) : OleVariant;
var
__rw : __tagCTLINITIEDIT__Wrapper__;
begin
__rw := __tagCTLINITIEDIT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagCTLINITIEDIT(const V : OleVariant) : tagCTLINITIEDIT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagCTLINITIEDIT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagGUIDE__Wrapper__ = class(__tagGUIDE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagGUIDE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagGUIDEToVariant(var R : tagGUIDE) : OleVariant;
var
__rw : __tagGUIDE__Wrapper__;
begin
__rw := __tagGUIDE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagGUIDE(const V : OleVariant) : tagGUIDE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagGUIDE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagIMECOLORS__Wrapper__ = class(__tagIMECOLORS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagIMECOLORS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagIMECOLORSToVariant(var R : tagIMECOLORS) : OleVariant;
var
__rw : __tagIMECOLORS__Wrapper__;
begin
__rw := __tagIMECOLORS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagIMECOLORS(const V : OleVariant) : tagIMECOLORS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagIMECOLORS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagINKINGINFO__Wrapper__ = class(__tagINKINGINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagINKINGINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagINKINGINFOToVariant(var R : tagINKINGINFO) : OleVariant;
var
__rw : __tagINKINGINFO__Wrapper__;
begin
__rw := __tagINKINGINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagINKINGINFO(const V : OleVariant) : tagINKINGINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagINKINGINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagINPPARAMS__Wrapper__ = class(__tagINPPARAMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagINPPARAMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagINPPARAMSToVariant(var R : tagINPPARAMS) : OleVariant;
var
__rw : __tagINPPARAMS__Wrapper__;
begin
__rw := __tagINPPARAMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagINPPARAMS(const V : OleVariant) : tagINPPARAMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagINPPARAMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagINTERVAL__Wrapper__ = class(__tagINTERVAL__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagINTERVAL__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagINTERVALToVariant(var R : tagINTERVAL) : OleVariant;
var
__rw : __tagINTERVAL__Wrapper__;
begin
__rw := __tagINTERVAL__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagINTERVAL(const V : OleVariant) : tagINTERVAL;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagINTERVAL((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagOEMPENINFO__Wrapper__ = class(__tagOEMPENINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagOEMPENINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagOEMPENINFOToVariant(var R : tagOEMPENINFO) : OleVariant;
var
__rw : __tagOEMPENINFO__Wrapper__;
begin
__rw := __tagOEMPENINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagOEMPENINFO(const V : OleVariant) : tagOEMPENINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagOEMPENINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagOEMPENPACKET__Wrapper__ = class(__tagOEMPENPACKET__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagOEMPENPACKET__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagOEMPENPACKETToVariant(var R : tagOEMPENPACKET) : OleVariant;
var
__rw : __tagOEMPENPACKET__Wrapper__;
begin
__rw := __tagOEMPENPACKET__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagOEMPENPACKET(const V : OleVariant) : tagOEMPENPACKET;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagOEMPENPACKET((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagPCMINFO__Wrapper__ = class(__tagPCMINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagPCMINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagPCMINFOToVariant(var R : tagPCMINFO) : OleVariant;
var
__rw : __tagPCMINFO__Wrapper__;
begin
__rw := __tagPCMINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagPCMINFO(const V : OleVariant) : tagPCMINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagPCMINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagPDEVENT__Wrapper__ = class(__tagPDEVENT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagPDEVENT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagPDEVENTToVariant(var R : tagPDEVENT) : OleVariant;
var
__rw : __tagPDEVENT__Wrapper__;
begin
__rw := __tagPDEVENT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagPDEVENT(const V : OleVariant) : tagPDEVENT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagPDEVENT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagPENDATAHEADER__Wrapper__ = class(__tagPENDATAHEADER__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagPENDATAHEADER__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagPENDATAHEADERToVariant(var R : tagPENDATAHEADER) : OleVariant;
var
__rw : __tagPENDATAHEADER__Wrapper__;
begin
__rw := __tagPENDATAHEADER__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagPENDATAHEADER(const V : OleVariant) : tagPENDATAHEADER;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagPENDATAHEADER((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagPENINFO__Wrapper__ = class(__tagPENINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagPENINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagPENINFOToVariant(var R : tagPENINFO) : OleVariant;
var
__rw : __tagPENINFO__Wrapper__;
begin
__rw := __tagPENINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagPENINFO(const V : OleVariant) : tagPENINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagPENINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagPENPACKET__Wrapper__ = class(__tagPENPACKET__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagPENPACKET__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagPENPACKETToVariant(var R : tagPENPACKET) : OleVariant;
var
__rw : __tagPENPACKET__Wrapper__;
begin
__rw := __tagPENPACKET__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagPENPACKET(const V : OleVariant) : tagPENPACKET;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagPENPACKET((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagPENTIP__Wrapper__ = class(__tagPENTIP__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagPENTIP__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagPENTIPToVariant(var R : tagPENTIP) : OleVariant;
var
__rw : __tagPENTIP__Wrapper__;
begin
__rw := __tagPENTIP__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagPENTIP(const V : OleVariant) : tagPENTIP;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagPENTIP((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagRC__Wrapper__ = class(__tagRC__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagRC__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagRCToVariant(var R : tagRC) : OleVariant;
var
__rw : __tagRC__Wrapper__;
begin
__rw := __tagRC__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagRC(const V : OleVariant) : tagRC;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagRC((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagRCRESULT__Wrapper__ = class(__tagRCRESULT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagRCRESULT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagRCRESULTToVariant(var R : tagRCRESULT) : OleVariant;
var
__rw : __tagRCRESULT__Wrapper__;
begin
__rw := __tagRCRESULT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagRCRESULT(const V : OleVariant) : tagRCRESULT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagRCRESULT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagRECTOFS__Wrapper__ = class(__tagRECTOFS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagRECTOFS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagRECTOFSToVariant(var R : tagRECTOFS) : OleVariant;
var
__rw : __tagRECTOFS__Wrapper__;
begin
__rw := __tagRECTOFS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagRECTOFS(const V : OleVariant) : tagRECTOFS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagRECTOFS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagSKBINFO__Wrapper__ = class(__tagSKBINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagSKBINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagSKBINFOToVariant(var R : tagSKBINFO) : OleVariant;
var
__rw : __tagSKBINFO__Wrapper__;
begin
__rw := __tagSKBINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagSKBINFO(const V : OleVariant) : tagSKBINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagSKBINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagSTRKFMT__Wrapper__ = class(__tagSTRKFMT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagSTRKFMT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagSTRKFMTToVariant(var R : tagSTRKFMT) : OleVariant;
var
__rw : __tagSTRKFMT__Wrapper__;
begin
__rw := __tagSTRKFMT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagSTRKFMT(const V : OleVariant) : tagSTRKFMT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagSTRKFMT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagSTROKEINFO__Wrapper__ = class(__tagSTROKEINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagSTROKEINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagSTROKEINFOToVariant(var R : tagSTROKEINFO) : OleVariant;
var
__rw : __tagSTROKEINFO__Wrapper__;
begin
__rw := __tagSTROKEINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagSTROKEINFO(const V : OleVariant) : tagSTROKEINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagSTROKEINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagSYC__Wrapper__ = class(__tagSYC__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagSYC__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagSYCToVariant(var R : tagSYC) : OleVariant;
var
__rw : __tagSYC__Wrapper__;
begin
__rw := __tagSYC__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagSYC(const V : OleVariant) : tagSYC;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagSYC((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagSYE__Wrapper__ = class(__tagSYE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagSYE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagSYEToVariant(var R : tagSYE) : OleVariant;
var
__rw : __tagSYE__Wrapper__;
begin
__rw := __tagSYE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagSYE(const V : OleVariant) : tagSYE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagSYE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagSYG__Wrapper__ = class(__tagSYG__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagSYG__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagSYGToVariant(var R : tagSYG) : OleVariant;
var
__rw : __tagSYG__Wrapper__;
begin
__rw := __tagSYG__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagSYG(const V : OleVariant) : tagSYG;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagSYG((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTARGET__Wrapper__ = class(__tagTARGET__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTARGET__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTARGETToVariant(var R : tagTARGET) : OleVariant;
var
__rw : __tagTARGET__Wrapper__;
begin
__rw := __tagTARGET__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTARGET(const V : OleVariant) : tagTARGET;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTARGET((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTARGINFO__Wrapper__ = class(__tagTARGINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTARGINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTARGINFOToVariant(var R : tagTARGINFO) : OleVariant;
var
__rw : __tagTARGINFO__Wrapper__;
begin
__rw := __tagTARGINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTARGINFO(const V : OleVariant) : tagTARGINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTARGINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TAnimateInfo__Wrapper__ = class(__TAnimateInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TAnimateInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTAnimateInfoToVariant(var R : TAnimateInfo) : OleVariant;
var
__rw : __TAnimateInfo__Wrapper__;
begin
__rw := __TAnimateInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTAnimateInfo(const V : OleVariant) : TAnimateInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TAnimateInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TARGET__Wrapper__ = class(__TARGET__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TARGET__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTARGETToVariant(var R : TARGET) : OleVariant;
var
__rw : __TARGET__Wrapper__;
begin
__rw := __TARGET__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTARGET(const V : OleVariant) : TARGET;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TARGET((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TARGINFO__Wrapper__ = class(__TARGINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TARGINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTARGINFOToVariant(var R : TARGINFO) : OleVariant;
var
__rw : __TARGINFO__Wrapper__;
begin
__rw := __TARGINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTARGINFO(const V : OleVariant) : TARGINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TARGINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TBoxEditInfo__Wrapper__ = class(__TBoxEditInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TBoxEditInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTBoxEditInfoToVariant(var R : TBoxEditInfo) : OleVariant;
var
__rw : __TBoxEditInfo__Wrapper__;
begin
__rw := __TBoxEditInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTBoxEditInfo(const V : OleVariant) : TBoxEditInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TBoxEditInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TBoxLayout__Wrapper__ = class(__TBoxLayout__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TBoxLayout__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTBoxLayoutToVariant(var R : TBoxLayout) : OleVariant;
var
__rw : __TBoxLayout__Wrapper__;
begin
__rw := __TBoxLayout__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTBoxLayout(const V : OleVariant) : TBoxLayout;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TBoxLayout((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TBoxResults__Wrapper__ = class(__TBoxResults__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TBoxResults__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTBoxResultsToVariant(var R : TBoxResults) : OleVariant;
var
__rw : __TBoxResults__Wrapper__;
begin
__rw := __TBoxResults__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTBoxResults(const V : OleVariant) : TBoxResults;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TBoxResults((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCalbStruct__Wrapper__ = class(__TCalbStruct__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCalbStruct__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCalbStructToVariant(var R : TCalbStruct) : OleVariant;
var
__rw : __TCalbStruct__Wrapper__;
begin
__rw := __TCalbStruct__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCalbStruct(const V : OleVariant) : TCalbStruct;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCalbStruct((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCtlInitBEdit__Wrapper__ = class(__TCtlInitBEdit__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCtlInitBEdit__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCtlInitBEditToVariant(var R : TCtlInitBEdit) : OleVariant;
var
__rw : __TCtlInitBEdit__Wrapper__;
begin
__rw := __TCtlInitBEdit__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCtlInitBEdit(const V : OleVariant) : TCtlInitBEdit;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCtlInitBEdit((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCtlInitHEdit__Wrapper__ = class(__TCtlInitHEdit__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCtlInitHEdit__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCtlInitHEditToVariant(var R : TCtlInitHEdit) : OleVariant;
var
__rw : __TCtlInitHEdit__Wrapper__;
begin
__rw := __TCtlInitHEdit__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCtlInitHEdit(const V : OleVariant) : TCtlInitHEdit;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCtlInitHEdit((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCtlInitIEdit__Wrapper__ = class(__TCtlInitIEdit__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCtlInitIEdit__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCtlInitIEditToVariant(var R : TCtlInitIEdit) : OleVariant;
var
__rw : __TCtlInitIEdit__Wrapper__;
begin
__rw := __TCtlInitIEdit__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCtlInitIEdit(const V : OleVariant) : TCtlInitIEdit;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCtlInitIEdit((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TGuide__Wrapper__ = class(__TGuide__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TGuide__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTGuideToVariant(var R : TGuide) : OleVariant;
var
__rw : __TGuide__Wrapper__;
begin
__rw := __TGuide__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTGuide(const V : OleVariant) : TGuide;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TGuide((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TIMEColors__Wrapper__ = class(__TIMEColors__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIMEColors__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIMEColorsToVariant(var R : TIMEColors) : OleVariant;
var
__rw : __TIMEColors__Wrapper__;
begin
__rw := __TIMEColors__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIMEColors(const V : OleVariant) : TIMEColors;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIMEColors((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TInkingInfo__Wrapper__ = class(__TInkingInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TInkingInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTInkingInfoToVariant(var R : TInkingInfo) : OleVariant;
var
__rw : __TInkingInfo__Wrapper__;
begin
__rw := __TInkingInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTInkingInfo(const V : OleVariant) : TInkingInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TInkingInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TInpParams__Wrapper__ = class(__TInpParams__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TInpParams__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTInpParamsToVariant(var R : TInpParams) : OleVariant;
var
__rw : __TInpParams__Wrapper__;
begin
__rw := __TInpParams__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTInpParams(const V : OleVariant) : TInpParams;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TInpParams((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TInterval__Wrapper__ = class(__TInterval__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TInterval__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIntervalToVariant(var R : TInterval) : OleVariant;
var
__rw : __TInterval__Wrapper__;
begin
__rw := __TInterval__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTInterval(const V : OleVariant) : TInterval;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TInterval((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TOEMPenInfo__Wrapper__ = class(__TOEMPenInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TOEMPenInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTOEMPenInfoToVariant(var R : TOEMPenInfo) : OleVariant;
var
__rw : __TOEMPenInfo__Wrapper__;
begin
__rw := __TOEMPenInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTOEMPenInfo(const V : OleVariant) : TOEMPenInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TOEMPenInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TOEMPenPacket__Wrapper__ = class(__TOEMPenPacket__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TOEMPenPacket__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTOEMPenPacketToVariant(var R : TOEMPenPacket) : OleVariant;
var
__rw : __TOEMPenPacket__Wrapper__;
begin
__rw := __TOEMPenPacket__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTOEMPenPacket(const V : OleVariant) : TOEMPenPacket;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TOEMPenPacket((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPCMInfo__Wrapper__ = class(__TPCMInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPCMInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPCMInfoToVariant(var R : TPCMInfo) : OleVariant;
var
__rw : __TPCMInfo__Wrapper__;
begin
__rw := __TPCMInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPCMInfo(const V : OleVariant) : TPCMInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPCMInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPDEvent__Wrapper__ = class(__TPDEvent__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPDEvent__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPDEventToVariant(var R : TPDEvent) : OleVariant;
var
__rw : __TPDEvent__Wrapper__;
begin
__rw := __TPDEvent__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPDEvent(const V : OleVariant) : TPDEvent;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPDEvent((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPenDataHeader__Wrapper__ = class(__TPenDataHeader__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPenDataHeader__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPenDataHeaderToVariant(var R : TPenDataHeader) : OleVariant;
var
__rw : __TPenDataHeader__Wrapper__;
begin
__rw := __TPenDataHeader__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPenDataHeader(const V : OleVariant) : TPenDataHeader;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPenDataHeader((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPenInfo__Wrapper__ = class(__TPenInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPenInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPenInfoToVariant(var R : TPenInfo) : OleVariant;
var
__rw : __TPenInfo__Wrapper__;
begin
__rw := __TPenInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPenInfo(const V : OleVariant) : TPenInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPenInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPenPacket__Wrapper__ = class(__TPenPacket__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPenPacket__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPenPacketToVariant(var R : TPenPacket) : OleVariant;
var
__rw : __TPenPacket__Wrapper__;
begin
__rw := __TPenPacket__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPenPacket(const V : OleVariant) : TPenPacket;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPenPacket((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPenTip__Wrapper__ = class(__TPenTip__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPenTip__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPenTipToVariant(var R : TPenTip) : OleVariant;
var
__rw : __TPenTip__Wrapper__;
begin
__rw := __TPenTip__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPenTip(const V : OleVariant) : TPenTip;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPenTip((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRC__Wrapper__ = class(__TRC__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRC__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRCToVariant(var R : TRC) : OleVariant;
var
__rw : __TRC__Wrapper__;
begin
__rw := __TRC__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRC(const V : OleVariant) : TRC;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRC((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRCResult__Wrapper__ = class(__TRCResult__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRCResult__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRCResultToVariant(var R : TRCResult) : OleVariant;
var
__rw : __TRCResult__Wrapper__;
begin
__rw := __TRCResult__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRCResult(const V : OleVariant) : TRCResult;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRCResult((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRectOfs__Wrapper__ = class(__TRectOfs__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRectOfs__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRectOfsToVariant(var R : TRectOfs) : OleVariant;
var
__rw : __TRectOfs__Wrapper__;
begin
__rw := __TRectOfs__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRectOfs(const V : OleVariant) : TRectOfs;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRectOfs((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSKBInfo__Wrapper__ = class(__TSKBInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSKBInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSKBInfoToVariant(var R : TSKBInfo) : OleVariant;
var
__rw : __TSKBInfo__Wrapper__;
begin
__rw := __TSKBInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSKBInfo(const V : OleVariant) : TSKBInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSKBInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TStrkFmt__Wrapper__ = class(__TStrkFmt__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TStrkFmt__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTStrkFmtToVariant(var R : TStrkFmt) : OleVariant;
var
__rw : __TStrkFmt__Wrapper__;
begin
__rw := __TStrkFmt__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTStrkFmt(const V : OleVariant) : TStrkFmt;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TStrkFmt((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TStrokeInfo__Wrapper__ = class(__TStrokeInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TStrokeInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTStrokeInfoToVariant(var R : TStrokeInfo) : OleVariant;
var
__rw : __TStrokeInfo__Wrapper__;
begin
__rw := __TStrokeInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTStrokeInfo(const V : OleVariant) : TStrokeInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TStrokeInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSYC__Wrapper__ = class(__TSYC__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSYC__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSYCToVariant(var R : TSYC) : OleVariant;
var
__rw : __TSYC__Wrapper__;
begin
__rw := __TSYC__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSYC(const V : OleVariant) : TSYC;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSYC((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSYE__Wrapper__ = class(__TSYE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSYE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSYEToVariant(var R : TSYE) : OleVariant;
var
__rw : __TSYE__Wrapper__;
begin
__rw := __TSYE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSYE(const V : OleVariant) : TSYE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSYE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSYG__Wrapper__ = class(__TSYG__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSYG__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSYGToVariant(var R : TSYG) : OleVariant;
var
__rw : __TSYG__Wrapper__;
begin
__rw := __TSYG__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSYG(const V : OleVariant) : TSYG;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSYG((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTarget__Wrapper__ = class(__TTarget__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTarget__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTargetToVariant(var R : TTarget) : OleVariant;
var
__rw : __TTarget__Wrapper__;
begin
__rw := __TTarget__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTarget(const V : OleVariant) : TTarget;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTarget((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTargInfo__Wrapper__ = class(__TTargInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTargInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTargInfoToVariant(var R : TTargInfo) : OleVariant;
var
__rw : __TTargInfo__Wrapper__;
begin
__rw := __TTargInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTargInfo(const V : OleVariant) : TTargInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTargInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..508] of string = (
'ALC_DEFAULT'
,'ALC_LCALPHA'
,'ALC_UCALPHA'
,'ALC_NUMERIC'
,'ALC_PUNC'
,'ALC_MATH'
,'ALC_MONETARY'
,'ALC_OTHER'
,'ALC_ASCII'
,'ALC_WHITE'
,'ALC_NONPRINT'
,'ALC_DBCS'
,'ALC_JIS1'
,'ALC_GESTURE'
,'ALC_USEBITMAP'
,'ALC_HIRAGANA'
,'ALC_KATAKANA'
,'ALC_KANJI'
,'ALC_GLOBALPRIORITY'
,'ALC_OEM'
,'ALC_RESERVED'
,'ALC_NOPRIORITY'
,'ALC_ALPHA'
,'ALC_ALPHANUMERIC'
,'ALC_SYSMINIMUM'
,'ALC_ALL'
,'ALC_KANJISYSMINIMUM'
,'ALC_KANJIALL'
,'BXS_NONE'
,'BXS_RECT'
,'BXS_BOXCROSS'
,'BXS_MASK'
,'OBM_SKBBTNUP'
,'OBM_SKBBTNDOWN'
,'OBM_SKBBTNDISABLED'
,'OBM_ZENBTNUP'
,'OBM_ZENBTNDOWN'
,'OBM_ZENBTNDISABLED'
,'OBM_HANBTNUP'
,'OBM_HANBTNDOWN'
,'OBM_HANBTNDISABLED'
,'OBM_KKCBTNUP'
,'OBM_KKCBTNDOWN'
,'OBM_KKCBTNDISABLED'
,'OBM_SIPBTNUP'
,'OBM_SIPBTNDOWN'
,'OBM_SIPBTNDISABLED'
,'OBM_PTYBTNUP'
,'OBM_PTYBTNDOWN'
,'OBM_PTYBTNDISABLED'
,'IDC_PEN'
,'IDC_ALTSELECT'
,'SYV_NULL'
,'SYV_UNKNOWN'
,'SYV_EMPTY'
,'SYV_BEGINOR'
,'SYV_ENDOR'
,'SYV_OR'
,'SYV_SOFTNEWLINE'
,'SYV_SPACENULL'
,'SYV_SELECTFIRST'
,'SYV_LASSO'
,'SYV_SELECTLEFT'
,'SYV_SELECTRIGHT'
,'SYV_SELECTLAST'
,'SYV_CLEARCHAR'
,'SYV_HELP'
,'SYV_KKCONVERT'
,'SYV_CLEAR'
,'SYV_INSERT'
,'SYV_CONTEXT'
,'SYV_EXTENDSELECT'
,'SYV_UNDO'
,'SYV_COPY'
,'SYV_CUT'
,'SYV_PASTE'
,'SYV_CLEARWORD'
,'SYV_USER'
,'SYV_CORRECT'
,'SYV_BACKSPACE'
,'SYV_TAB'
,'SYV_RETURN'
,'SYV_SPACE'
,'SYV_APPGESTUREMASK'
,'SYV_CIRCLEUPA'
,'SYV_CIRCLEUPZ'
,'SYV_CIRCLELOA'
,'SYV_CIRCLELOZ'
,'SYV_SHAPELINE'
,'SYV_SHAPEELLIPSE'
,'SYV_SHAPERECT'
,'SYV_SHAPEMIN'
,'SYV_SHAPEMAX'
,'SYVHI_SPECIAL'
,'SYVHI_ANSI'
,'SYVHI_GESTURE'
,'SYVHI_KANJI'
,'SYVHI_SHAPE'
,'SYVHI_UNICODE'
,'SYVHI_VKEY'
,'IEM_UNDO'
,'IEM_CUT'
,'IEM_COPY'
,'IEM_PASTE'
,'IEM_CLEAR'
,'IEM_SELECTALL'
,'IEM_ERASE'
,'IEM_PROPERTIES'
,'IEM_LASSO'
,'IEM_RESIZE'
,'IEM_USER'
,'IES_BORDER'
,'IES_HSCROLL'
,'IES_VSCROLL'
,'IES_OWNERDRAW'
,'AI_CBSTROKE'
,'AI_SKIPUPSTROKES'
,'CMPD_COMPRESS'
,'CMPD_DECOMPRESS'
,'CPDR_BOX'
,'CPDR_LASSO'
,'CPD_DEFAULT'
,'CPD_USERBYTE'
,'CPD_USERWORD'
,'CPD_USERDWORD'
,'CPD_TIME'
,'DPD_HDCPEN'
,'DPD_DRAWSEL'
,'EPDP_REMOVE'
,'EPDS_SELECT'
,'EPDS_STROKEINDEX'
,'EPDS_USER'
,'EPDS_PENTIP'
,'EPDS_TIPCOLOR'
,'EPDS_TIPWIDTH'
,'EPDS_TIPNIB'
,'EPDS_INKSET'
,'EPDS_EQ'
,'EPDS_LT'
,'EPDS_GT'
,'EPDS_NOT'
,'EPDS_NE'
,'EPDS_GTE'
,'EPDS_LTE'
,'EPDS_REMOVE'
,'GPA_MAXLEN'
,'GPA_POINTS'
,'GPA_PDTS'
,'GPA_RATE'
,'GPA_RECTBOUND'
,'GPA_RECTBOUNDINK'
,'GPA_SIZE'
,'GPA_STROKES'
,'GPA_TIME'
,'GPA_USER'
,'GPA_VERSION'
,'GSA_PENTIP'
,'GSA_PENTIPCLASS'
,'GSA_USER'
,'GSA_USERCLASS'
,'GSA_TIME'
,'GSA_SIZE'
,'GSA_SELECT'
,'GSA_DOWN'
,'GSA_RECTBOUND'
,'GSA_PENTIPTABLE'
,'GSA_SIZETABLE'
,'GSA_USERTABLE'
,'IX_END'
,'PENTIP_NIBDEFAULT'
,'PENTIP_HEIGHTDEFAULT'
,'PENTIP_OPAQUE'
,'PENTIP_HILITE'
,'PENTIP_TRANSPARENT'
,'PDR_NOHIT'
,'PDR_HIT'
,'PDR_OK'
,'PDR_CANCEL'
,'PDR_ERROR'
,'PDR_PNDTERR'
,'PDR_VERSIONERR'
,'PDR_COMPRESSED'
,'PDR_STRKINDEXERR'
,'PDR_PNTINDEXERR'
,'PDR_MEMERR'
,'PDR_INKSETERR'
,'PDR_ABORT'
,'PDR_NA'
,'PDR_USERDATAERR'
,'PDR_SCALINGERR'
,'PDR_TIMESTAMPERR'
,'PDR_OEMDATAERR'
,'PDR_SCTERR'
,'PDTS_LOMETRIC'
,'PDTS_HIMETRIC'
,'PDTS_HIENGLISH'
,'PDTS_STANDARDSCALE'
,'PDTS_DISPLAY'
,'PDTS_ARBITRARY'
,'PDTS_SCALEMASK'
,'PDTT_DEFAULT'
,'PDTT_PENINFO'
,'PDTT_UPPOINTS'
,'PDTT_OEMDATA'
,'PDTT_COLLINEAR'
,'PDTT_COLINEAR'
,'PDTT_DECOMPRESS'
,'PDTT_COMPRESS'
,'PDTT_ALL'
,'PHW_NONE'
,'PHW_PRESSURE'
,'PHW_HEIGHT'
,'PHW_ANGLEXY'
,'PHW_ANGLEZ'
,'PHW_BARRELROTATION'
,'PHW_OEMSPECIFIC'
,'PHW_PDK'
,'PHW_ALL'
,'PDTS_COMPRESS2NDDERIV'
,'PDTS_COMPRESSMETHOD'
,'PDTS_NOPENINFO'
,'PDTS_NOUPPOINTS'
,'PDTS_NOOEMDATA'
,'PDTS_NOCOLLINEAR'
,'PDTS_NOCOLINEAR'
,'PDTS_NOTICK'
,'PDTS_NOUSER'
,'PDTS_NOEMPTYSTROKES'
,'PDTS_COMPRESSED'
,'SSA_PENTIP'
,'SSA_PENTIPCLASS'
,'SSA_USER'
,'SSA_USERCLASS'
,'SSA_TIME'
,'SSA_SELECT'
,'SSA_DOWN'
,'SSA_PENTIPTABLE'
,'SSA_USERTABLE'
,'TIP_ERASECOLOR'
,'TPD_RECALCSIZE'
,'TPD_USER'
,'TPD_TIME'
,'TPD_UPPOINTS'
,'TPD_COLLINEAR'
,'TPD_COLINEAR'
,'TPD_PENINFO'
,'TPD_PHW'
,'TPD_OEMDATA'
,'TPD_EMPTYSTROKES'
,'TPD_EVERYTHING'
,'cbDictPathMax'
,'DIRQ_QUERY'
,'DIRQ_DESCRIPTION'
,'DIRQ_CONFIGURE'
,'DIRQ_OPEN'
,'DIRQ_CLOSE'
,'DIRQ_SETWORDLISTS'
,'DIRQ_STRING'
,'DIRQ_SUGGEST'
,'DIRQ_ADD'
,'DIRQ_DELETE'
,'DIRQ_FLUSH'
,'DIRQ_RCCHANGE'
,'DIRQ_SYMBOLGRAPH'
,'DIRQ_INIT'
,'DIRQ_CLEANUP'
,'DIRQ_COPYRIGHT'
,'DIRQ_USER'
,'BITPENUP'
,'DRV_SetPenDriverEntryPoints'
,'DRV_SetEntryPoints'
,'DRV_RemovePenDriverEntryPoints'
,'DRV_RemoveEntryPoints'
,'DRV_SetPenSamplingRate'
,'DRV_SetPenSamplingDist'
,'DRV_GetName'
,'DRV_GetVersion'
,'DRV_GetPenInfo'
,'DRV_PenPlayStart'
,'DRV_PenPlayBack'
,'DRV_PenPlayStop'
,'DRV_GetCalibration'
,'DRV_SetCalibration'
,'DRV_Reserved1'
,'DRV_Reserved2'
,'DRV_Query'
,'DRV_GetPenSamplingRate'
,'DRV_Calibrate'
,'PLAY_VERSION_10_DATA'
,'PLAY_VERSION_20_DATA'
,'DRV_FAILURE'
,'DRV_SUCCESS'
,'DRV_BADPARAM1'
,'DRV_BADPARAM2'
,'DRV_BADSTRUCT'
,'PENREG_DEFAULT'
,'PENREG_WILLHANDLEMOUSE'
,'MAXOEMDATAWORDS'
,'RC_LDEFAULTFLAGS'
,'PCM_PENUP'
,'PCM_RANGE'
,'PCM_INVERT'
,'PCM_RECTEXCLUDE'
,'PCM_RECTBOUND'
,'PCM_TIMEOUT'
,'PCM_RGNBOUND'
,'PCM_RGNEXCLUDE'
,'PCM_DOPOLLING'
,'PCM_TAPNHOLD'
,'PCM_ADDDEFAULTS'
,'PDC_INTEGRATED'
,'PDC_PROXIMITY'
,'PDC_RANGE'
,'PDC_INVERT'
,'PDC_RELATIVE'
,'PDC_BARREL1'
,'PDC_BARREL2'
,'PDC_BARREL3'
,'PDK_NULL'
,'PDK_UP'
,'PDK_DOWN'
,'PDK_BARREL1'
,'PDK_BARREL2'
,'PDK_BARREL3'
,'PDK_SWITCHES'
,'PDK_UNUSED10'
,'PDK_UNUSED20'
,'PDK_INVERTED'
,'PDK_PENIDMASK'
,'PDK_UNUSED1000'
,'PDK_INKSTOPPED'
,'PDK_OUTOFRANGE'
,'PDK_DRIVER'
,'PDK_TIPMASK'
,'PDT_NULL'
,'PDT_PRESSURE'
,'PDT_HEIGHT'
,'PDT_ANGLEXY'
,'PDT_ANGLEZ'
,'PDT_BARRELROTATION'
,'PDT_OEMSPECIFIC'
,'PID_CURRENT'
,'GRH_ALL'
,'GRH_GESTURE'
,'GRH_NONGESTURE'
,'GST_SEL'
,'GST_CLIP'
,'GST_WHITE'
,'GST_KKCONVERT'
,'GST_EDIT'
,'GST_SYS'
,'GST_CIRCLELO'
,'GST_CIRCLEUP'
,'GST_CIRCLE'
,'GST_ALL'
,'HRCR_NORESULTS'
,'HRCR_COMPLETE'
,'HRCR_GESTURE'
,'HRCR_OK'
,'HRCR_INCOMPLETE'
,'HRCR_ERROR'
,'HRCR_MEMERR'
,'HRCR_INVALIDGUIDE'
,'HRCR_INVALIDPNDT'
,'HRCR_UNSUPPORTED'
,'HRCR_CONFLICT'
,'HRCR_HOOKED'
,'HWL_SYSTEM'
,'ISR_ERROR'
,'ISR_BADINKSET'
,'ISR_BADINDEX'
,'MAXHOTSPOT'
,'PH_MAX'
,'PH_DEFAULT'
,'PH_MIN'
,'RHH_STD'
,'RHH_BOX'
,'SCH_NONE'
,'SCH_ADVISE'
,'SCH_FORCE'
,'SCIM_INSERT'
,'SCIM_OVERWRITE'
,'SRH_HOOKALL'
,'SSH_RD'
,'SSH_RU'
,'SSH_LD'
,'SSH_LU'
,'SSH_DL'
,'SSH_DR'
,'SSH_UL'
,'SSH_UR'
,'SIH_ALLANSICHAR'
,'TH_QUERY'
,'TH_FORCE'
,'TH_SUGGEST'
,'TRAIN_NONE'
,'TRAIN_DEFAULT'
,'TRAIN_CUSTOM'
,'TRAIN_SAVE'
,'TRAIN_REVERT'
,'TRAIN_RESET'
,'WCR_RECOGNAME'
,'WCR_QUERY'
,'WCR_CONFIGDIALOG'
,'WCR_DEFAULT'
,'WCR_RCCHANGE'
,'WCR_VERSION'
,'WCR_TRAIN'
,'WCR_TRAINSAVE'
,'WCR_TRAINMAX'
,'WCR_TRAINDIRTY'
,'WCR_TRAINCUSTOM'
,'WCR_QUERYLANGUAGE'
,'WCR_USERCHANGE'
,'WCR_PWVERSION'
,'WCR_GETALCPRIORITY'
,'WCR_SETALCPRIORITY'
,'WCR_GETANSISTATE'
,'WCR_SETANSISTATE'
,'WCR_GETHAND'
,'WCR_SETHAND'
,'WCR_GETDIRECTION'
,'WCR_SETDIRECTION'
,'WCR_INITRECOGNIZER'
,'WCR_CLOSERECOGNIZER'
,'WCR_PRIVATE'
,'CRUC_NOTIFY'
,'CRUC_REMOVE'
,'WLT_STRING'
,'WLT_STRINGTABLE'
,'WLT_EMPTY'
,'WLT_WORDLIST'
,'IEB_DEFAULT'
,'IEB_BRUSH'
,'IEB_BIT_UL'
,'IEB_BIT_CENTER'
,'IEB_BIT_TILE'
,'IEB_BIT_STRETCH'
,'IEB_OWNERDRAW'
,'IEDO_NONE'
,'IEDO_FAST'
,'IEDO_SAVEUPSTROKES'
,'IEDO_RESERVED'
,'IEI_MOVE'
,'IEI_RESIZE'
,'IEI_CROP'
,'IEI_DISCARD'
,'IEI_RESERVED'
,'IEGI_ALL'
,'IEGI_SELECTION'
,'IEMODE_READY'
,'IEMODE_ERASE'
,'IEMODE_LASSO'
,'IEN_NULL'
,'IEN_PDEVENT'
,'IEN_PAINT'
,'IEN_FOCUS'
,'IEN_SCROLL'
,'IEN_EDIT'
,'IEN_PROPERTIES'
,'IEN_RESERVED'
,'IER_OK'
,'IER_NO'
,'IER_YES'
,'IER_ERROR'
,'IER_PARAMERR'
,'IER_OWNERDRAW'
,'IER_SECURITY'
,'IER_SELECTION'
,'IER_SCALE'
,'IER_MEMERR'
,'IER_NOCOMMAND'
,'IER_NOGESTURE'
,'IER_NOPDEVENT'
,'IER_NOTINPAINT'
,'IER_PENDATA'
,'IEREC_NONE'
,'IEREC_GESTURE'
,'IEREC_RESERVED'
,'IESEC_NOCOPY'
,'IESEC_NOCUT'
,'IESEC_NOPASTE'
,'IESEC_NOUNDO'
,'IESEC_NOINK'
,'IESEC_NOERASE'
,'IESEC_NOGET'
,'IESEC_NOSET'
,'IESEC_RESERVED'
,'IESF_ALL'
,'IESF_SELECTION'
,'IESF_STROKE'
,'IESF_TIPCOLOR'
,'IESF_TIPWIDTH'
,'IESI_REPLACE'
,'IESI_APPEND'
,'IN_PDEVENT'
,'IN_ERASEBKGND'
,'IN_PREPAINT'
,'IN_PAINT'
,'IN_POSTPAINT'
,'IN_MODECHANGED'
,'IN_CHANGE'
,'IN_UPDATE'
,'IN_SETFOCUS'
,'IN_KILLFOCUS'
,'IN_MEMERR'
,'IN_HSCROLL'
,'IN_VSCROLL'
,'IN_GESTURE'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,ALC_DEFAULT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,ALC_LCALPHA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,ALC_UCALPHA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,ALC_NUMERIC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,ALC_PUNC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,ALC_MATH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,ALC_MONETARY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,ALC_OTHER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,ALC_ASCII));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,ALC_WHITE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,ALC_NONPRINT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,ALC_DBCS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,ALC_JIS1));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,ALC_GESTURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,ALC_USEBITMAP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,ALC_HIRAGANA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,ALC_KATAKANA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,ALC_KANJI));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,ALC_GLOBALPRIORITY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,ALC_OEM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,ALC_RESERVED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,ALC_NOPRIORITY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,ALC_ALPHA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,ALC_ALPHANUMERIC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,ALC_SYSMINIMUM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,ALC_ALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,ALC_KANJISYSMINIMUM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,ALC_KANJIALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,BXS_NONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,BXS_RECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,BXS_BOXCROSS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,BXS_MASK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,OBM_SKBBTNUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,OBM_SKBBTNDOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,OBM_SKBBTNDISABLED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,OBM_ZENBTNUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,OBM_ZENBTNDOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,OBM_ZENBTNDISABLED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,OBM_HANBTNUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,OBM_HANBTNDOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,OBM_HANBTNDISABLED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,OBM_KKCBTNUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,OBM_KKCBTNDOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,OBM_KKCBTNDISABLED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,OBM_SIPBTNUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,OBM_SIPBTNDOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,OBM_SIPBTNDISABLED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,OBM_PTYBTNUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,OBM_PTYBTNDOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,OBM_PTYBTNDISABLED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,Integer(IDC_PEN)));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,Integer(IDC_ALTSELECT)));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,SYV_NULL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,SYV_UNKNOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,SYV_EMPTY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,SYV_BEGINOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,SYV_ENDOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,SYV_OR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,SYV_SOFTNEWLINE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,SYV_SPACENULL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,SYV_SELECTFIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,SYV_LASSO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,SYV_SELECTLEFT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,SYV_SELECTRIGHT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,SYV_SELECTLAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[65] ,SYV_CLEARCHAR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[66] ,SYV_HELP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[67] ,SYV_KKCONVERT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[68] ,SYV_CLEAR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[69] ,SYV_INSERT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[70] ,SYV_CONTEXT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[71] ,SYV_EXTENDSELECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[72] ,SYV_UNDO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[73] ,SYV_COPY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[74] ,SYV_CUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[75] ,SYV_PASTE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[76] ,SYV_CLEARWORD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[77] ,SYV_USER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[78] ,SYV_CORRECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[79] ,SYV_BACKSPACE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[80] ,SYV_TAB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[81] ,SYV_RETURN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[82] ,SYV_SPACE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[83] ,SYV_APPGESTUREMASK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[84] ,SYV_CIRCLEUPA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[85] ,SYV_CIRCLEUPZ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[86] ,SYV_CIRCLELOA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[87] ,SYV_CIRCLELOZ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[88] ,SYV_SHAPELINE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[89] ,SYV_SHAPEELLIPSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[90] ,SYV_SHAPERECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[91] ,SYV_SHAPEMIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[92] ,SYV_SHAPEMAX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[93] ,SYVHI_SPECIAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[94] ,SYVHI_ANSI));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[95] ,SYVHI_GESTURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[96] ,SYVHI_KANJI));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[97] ,SYVHI_SHAPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[98] ,SYVHI_UNICODE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[99] ,SYVHI_VKEY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[100] ,IEM_UNDO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[101] ,IEM_CUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[102] ,IEM_COPY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[103] ,IEM_PASTE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[104] ,IEM_CLEAR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[105] ,IEM_SELECTALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[106] ,IEM_ERASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[107] ,IEM_PROPERTIES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[108] ,IEM_LASSO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[109] ,IEM_RESIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[110] ,IEM_USER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[111] ,IES_BORDER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[112] ,IES_HSCROLL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[113] ,IES_VSCROLL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[114] ,IES_OWNERDRAW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[115] ,AI_CBSTROKE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[116] ,AI_SKIPUPSTROKES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[117] ,CMPD_COMPRESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[118] ,CMPD_DECOMPRESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[119] ,CPDR_BOX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[120] ,CPDR_LASSO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[121] ,CPD_DEFAULT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[122] ,CPD_USERBYTE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[123] ,CPD_USERWORD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[124] ,CPD_USERDWORD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[125] ,CPD_TIME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[126] ,DPD_HDCPEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[127] ,DPD_DRAWSEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[128] ,EPDP_REMOVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[129] ,EPDS_SELECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[130] ,EPDS_STROKEINDEX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[131] ,EPDS_USER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[132] ,EPDS_PENTIP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[133] ,EPDS_TIPCOLOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[134] ,EPDS_TIPWIDTH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[135] ,EPDS_TIPNIB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[136] ,EPDS_INKSET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[137] ,EPDS_EQ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[138] ,EPDS_LT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[139] ,EPDS_GT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[140] ,EPDS_NOT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[141] ,EPDS_NE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[142] ,EPDS_GTE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[143] ,EPDS_LTE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[144] ,EPDS_REMOVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[145] ,GPA_MAXLEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[146] ,GPA_POINTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[147] ,GPA_PDTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[148] ,GPA_RATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[149] ,GPA_RECTBOUND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[150] ,GPA_RECTBOUNDINK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[151] ,GPA_SIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[152] ,GPA_STROKES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[153] ,GPA_TIME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[154] ,GPA_USER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[155] ,GPA_VERSION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[156] ,GSA_PENTIP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[157] ,GSA_PENTIPCLASS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[158] ,GSA_USER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[159] ,GSA_USERCLASS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[160] ,GSA_TIME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[161] ,GSA_SIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[162] ,GSA_SELECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[163] ,GSA_DOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[164] ,GSA_RECTBOUND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[165] ,GSA_PENTIPTABLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[166] ,GSA_SIZETABLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[167] ,GSA_USERTABLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[168] ,IX_END));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[169] ,PENTIP_NIBDEFAULT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[170] ,PENTIP_HEIGHTDEFAULT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[171] ,PENTIP_OPAQUE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[172] ,PENTIP_HILITE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[173] ,PENTIP_TRANSPARENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[174] ,PDR_NOHIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[175] ,PDR_HIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[176] ,PDR_OK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[177] ,PDR_CANCEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[178] ,PDR_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[179] ,PDR_PNDTERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[180] ,PDR_VERSIONERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[181] ,PDR_COMPRESSED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[182] ,PDR_STRKINDEXERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[183] ,PDR_PNTINDEXERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[184] ,PDR_MEMERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[185] ,PDR_INKSETERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[186] ,PDR_ABORT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[187] ,PDR_NA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[188] ,PDR_USERDATAERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[189] ,PDR_SCALINGERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[190] ,PDR_TIMESTAMPERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[191] ,PDR_OEMDATAERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[192] ,PDR_SCTERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[193] ,PDTS_LOMETRIC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[194] ,PDTS_HIMETRIC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[195] ,PDTS_HIENGLISH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[196] ,PDTS_STANDARDSCALE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[197] ,PDTS_DISPLAY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[198] ,PDTS_ARBITRARY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[199] ,PDTS_SCALEMASK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[200] ,PDTT_DEFAULT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[201] ,PDTT_PENINFO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[202] ,PDTT_UPPOINTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[203] ,PDTT_OEMDATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[204] ,PDTT_COLLINEAR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[205] ,PDTT_COLINEAR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[206] ,PDTT_DECOMPRESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[207] ,PDTT_COMPRESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[208] ,PDTT_ALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[209] ,PHW_NONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[210] ,PHW_PRESSURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[211] ,PHW_HEIGHT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[212] ,PHW_ANGLEXY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[213] ,PHW_ANGLEZ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[214] ,PHW_BARRELROTATION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[215] ,PHW_OEMSPECIFIC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[216] ,PHW_PDK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[217] ,PHW_ALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[218] ,PDTS_COMPRESS2NDDERIV));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[219] ,PDTS_COMPRESSMETHOD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[220] ,PDTS_NOPENINFO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[221] ,PDTS_NOUPPOINTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[222] ,PDTS_NOOEMDATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[223] ,PDTS_NOCOLLINEAR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[224] ,PDTS_NOCOLINEAR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[225] ,PDTS_NOTICK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[226] ,PDTS_NOUSER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[227] ,PDTS_NOEMPTYSTROKES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[228] ,PDTS_COMPRESSED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[229] ,SSA_PENTIP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[230] ,SSA_PENTIPCLASS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[231] ,SSA_USER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[232] ,SSA_USERCLASS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[233] ,SSA_TIME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[234] ,SSA_SELECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[235] ,SSA_DOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[236] ,SSA_PENTIPTABLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[237] ,SSA_USERTABLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[238] ,TIP_ERASECOLOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[239] ,TPD_RECALCSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[240] ,TPD_USER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[241] ,TPD_TIME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[242] ,TPD_UPPOINTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[243] ,TPD_COLLINEAR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[244] ,TPD_COLINEAR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[245] ,TPD_PENINFO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[246] ,TPD_PHW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[247] ,TPD_OEMDATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[248] ,TPD_EMPTYSTROKES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[249] ,TPD_EVERYTHING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[250] ,cbDictPathMax));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[251] ,DIRQ_QUERY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[252] ,DIRQ_DESCRIPTION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[253] ,DIRQ_CONFIGURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[254] ,DIRQ_OPEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[255] ,DIRQ_CLOSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[256] ,DIRQ_SETWORDLISTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[257] ,DIRQ_STRING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[258] ,DIRQ_SUGGEST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[259] ,DIRQ_ADD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[260] ,DIRQ_DELETE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[261] ,DIRQ_FLUSH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[262] ,DIRQ_RCCHANGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[263] ,DIRQ_SYMBOLGRAPH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[264] ,DIRQ_INIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[265] ,DIRQ_CLEANUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[266] ,DIRQ_COPYRIGHT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[267] ,DIRQ_USER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[268] ,BITPENUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[269] ,DRV_SetPenDriverEntryPoints));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[270] ,DRV_SetEntryPoints));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[271] ,DRV_RemovePenDriverEntryPoints));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[272] ,DRV_RemoveEntryPoints));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[273] ,DRV_SetPenSamplingRate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[274] ,DRV_SetPenSamplingDist));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[275] ,DRV_GetName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[276] ,DRV_GetVersion));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[277] ,DRV_GetPenInfo));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[278] ,DRV_PenPlayStart));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[279] ,DRV_PenPlayBack));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[280] ,DRV_PenPlayStop));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[281] ,DRV_GetCalibration));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[282] ,DRV_SetCalibration));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[283] ,DRV_Reserved1));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[284] ,DRV_Reserved2));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[285] ,DRV_Query));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[286] ,DRV_GetPenSamplingRate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[287] ,DRV_Calibrate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[288] ,PLAY_VERSION_10_DATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[289] ,PLAY_VERSION_20_DATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[290] ,DRV_FAILURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[291] ,DRV_SUCCESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[292] ,DRV_BADPARAM1));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[293] ,DRV_BADPARAM2));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[294] ,DRV_BADSTRUCT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[295] ,PENREG_DEFAULT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[296] ,PENREG_WILLHANDLEMOUSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[297] ,MAXOEMDATAWORDS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[298] ,RC_LDEFAULTFLAGS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[299] ,PCM_PENUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[300] ,PCM_RANGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[301] ,PCM_INVERT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[302] ,PCM_RECTEXCLUDE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[303] ,PCM_RECTBOUND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[304] ,PCM_TIMEOUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[305] ,PCM_RGNBOUND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[306] ,PCM_RGNEXCLUDE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[307] ,PCM_DOPOLLING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[308] ,PCM_TAPNHOLD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[309] ,PCM_ADDDEFAULTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[310] ,PDC_INTEGRATED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[311] ,PDC_PROXIMITY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[312] ,PDC_RANGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[313] ,PDC_INVERT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[314] ,PDC_RELATIVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[315] ,PDC_BARREL1));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[316] ,PDC_BARREL2));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[317] ,PDC_BARREL3));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[318] ,PDK_NULL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[319] ,PDK_UP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[320] ,PDK_DOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[321] ,PDK_BARREL1));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[322] ,PDK_BARREL2));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[323] ,PDK_BARREL3));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[324] ,PDK_SWITCHES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[325] ,PDK_UNUSED10));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[326] ,PDK_UNUSED20));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[327] ,PDK_INVERTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[328] ,PDK_PENIDMASK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[329] ,PDK_UNUSED1000));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[330] ,PDK_INKSTOPPED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[331] ,PDK_OUTOFRANGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[332] ,PDK_DRIVER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[333] ,PDK_TIPMASK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[334] ,PDT_NULL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[335] ,PDT_PRESSURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[336] ,PDT_HEIGHT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[337] ,PDT_ANGLEXY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[338] ,PDT_ANGLEZ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[339] ,PDT_BARRELROTATION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[340] ,PDT_OEMSPECIFIC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[341] ,PID_CURRENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[342] ,GRH_ALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[343] ,GRH_GESTURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[344] ,GRH_NONGESTURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[345] ,GST_SEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[346] ,GST_CLIP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[347] ,GST_WHITE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[348] ,GST_KKCONVERT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[349] ,GST_EDIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[350] ,GST_SYS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[351] ,GST_CIRCLELO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[352] ,GST_CIRCLEUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[353] ,GST_CIRCLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[354] ,GST_ALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[355] ,HRCR_NORESULTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[356] ,HRCR_COMPLETE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[357] ,HRCR_GESTURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[358] ,HRCR_OK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[359] ,HRCR_INCOMPLETE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[360] ,HRCR_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[361] ,HRCR_MEMERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[362] ,HRCR_INVALIDGUIDE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[363] ,HRCR_INVALIDPNDT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[364] ,HRCR_UNSUPPORTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[365] ,HRCR_CONFLICT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[366] ,HRCR_HOOKED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[367] ,HWL_SYSTEM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[368] ,ISR_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[369] ,ISR_BADINKSET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[370] ,ISR_BADINDEX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[371] ,MAXHOTSPOT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[372] ,PH_MAX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[373] ,PH_DEFAULT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[374] ,PH_MIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[375] ,RHH_STD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[376] ,RHH_BOX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[377] ,SCH_NONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[378] ,SCH_ADVISE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[379] ,SCH_FORCE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[380] ,SCIM_INSERT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[381] ,SCIM_OVERWRITE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[382] ,SRH_HOOKALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[383] ,SSH_RD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[384] ,SSH_RU));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[385] ,SSH_LD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[386] ,SSH_LU));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[387] ,SSH_DL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[388] ,SSH_DR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[389] ,SSH_UL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[390] ,SSH_UR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[391] ,SIH_ALLANSICHAR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[392] ,TH_QUERY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[393] ,TH_FORCE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[394] ,TH_SUGGEST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[395] ,TRAIN_NONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[396] ,TRAIN_DEFAULT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[397] ,TRAIN_CUSTOM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[398] ,TRAIN_SAVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[399] ,TRAIN_REVERT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[400] ,TRAIN_RESET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[401] ,WCR_RECOGNAME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[402] ,WCR_QUERY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[403] ,WCR_CONFIGDIALOG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[404] ,WCR_DEFAULT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[405] ,WCR_RCCHANGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[406] ,WCR_VERSION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[407] ,WCR_TRAIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[408] ,WCR_TRAINSAVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[409] ,WCR_TRAINMAX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[410] ,WCR_TRAINDIRTY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[411] ,WCR_TRAINCUSTOM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[412] ,WCR_QUERYLANGUAGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[413] ,WCR_USERCHANGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[414] ,WCR_PWVERSION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[415] ,WCR_GETALCPRIORITY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[416] ,WCR_SETALCPRIORITY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[417] ,WCR_GETANSISTATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[418] ,WCR_SETANSISTATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[419] ,WCR_GETHAND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[420] ,WCR_SETHAND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[421] ,WCR_GETDIRECTION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[422] ,WCR_SETDIRECTION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[423] ,WCR_INITRECOGNIZER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[424] ,WCR_CLOSERECOGNIZER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[425] ,WCR_PRIVATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[426] ,CRUC_NOTIFY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[427] ,CRUC_REMOVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[428] ,WLT_STRING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[429] ,WLT_STRINGTABLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[430] ,WLT_EMPTY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[431] ,WLT_WORDLIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[432] ,IEB_DEFAULT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[433] ,IEB_BRUSH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[434] ,IEB_BIT_UL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[435] ,IEB_BIT_CENTER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[436] ,IEB_BIT_TILE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[437] ,IEB_BIT_STRETCH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[438] ,IEB_OWNERDRAW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[439] ,IEDO_NONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[440] ,IEDO_FAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[441] ,IEDO_SAVEUPSTROKES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[442] ,IEDO_RESERVED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[443] ,IEI_MOVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[444] ,IEI_RESIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[445] ,IEI_CROP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[446] ,IEI_DISCARD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[447] ,IEI_RESERVED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[448] ,IEGI_ALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[449] ,IEGI_SELECTION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[450] ,IEMODE_READY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[451] ,IEMODE_ERASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[452] ,IEMODE_LASSO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[453] ,IEN_NULL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[454] ,IEN_PDEVENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[455] ,IEN_PAINT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[456] ,IEN_FOCUS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[457] ,IEN_SCROLL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[458] ,IEN_EDIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[459] ,IEN_PROPERTIES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[460] ,IEN_RESERVED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[461] ,IER_OK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[462] ,IER_NO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[463] ,IER_YES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[464] ,IER_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[465] ,IER_PARAMERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[466] ,IER_OWNERDRAW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[467] ,IER_SECURITY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[468] ,IER_SELECTION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[469] ,IER_SCALE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[470] ,IER_MEMERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[471] ,IER_NOCOMMAND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[472] ,IER_NOGESTURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[473] ,IER_NOPDEVENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[474] ,IER_NOTINPAINT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[475] ,IER_PENDATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[476] ,IEREC_NONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[477] ,IEREC_GESTURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[478] ,IEREC_RESERVED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[479] ,IESEC_NOCOPY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[480] ,IESEC_NOCUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[481] ,IESEC_NOPASTE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[482] ,IESEC_NOUNDO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[483] ,IESEC_NOINK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[484] ,IESEC_NOERASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[485] ,IESEC_NOGET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[486] ,IESEC_NOSET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[487] ,IESEC_RESERVED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[488] ,IESF_ALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[489] ,IESF_SELECTION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[490] ,IESF_STROKE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[491] ,IESF_TIPCOLOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[492] ,IESF_TIPWIDTH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[493] ,IESI_REPLACE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[494] ,IESI_APPEND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[495] ,IN_PDEVENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[496] ,IN_ERASEBKGND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[497] ,IN_PREPAINT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[498] ,IN_PAINT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[499] ,IN_POSTPAINT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[500] ,IN_MODECHANGED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[501] ,IN_CHANGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[502] ,IN_UPDATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[503] ,IN_SETFOCUS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[504] ,IN_KILLFOCUS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[505] ,IN_MEMERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[506] ,IN_HSCROLL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[507] ,IN_VSCROLL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[508] ,IN_GESTURE));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const __ConstNames1 : array[0..316] of string = (
'IN_COMMAND'
,'IN_CLOSE'
,'IN_PROPERTIES'
,'LRET_DONE'
,'LRET_ABORT'
,'LRET_HRC'
,'LRET_HPENDATA'
,'LRET_PRIVATE'
,'PCMR_OK'
,'PCMR_ALREADYCOLLECTING'
,'PCMR_INVALIDCOLLECTION'
,'PCMR_EVENTLOCK'
,'PCMR_INVALID_PACKETID'
,'PCMR_TERMTIMEOUT'
,'PCMR_TERMRANGE'
,'PCMR_TERMPENUP'
,'PCMR_TERMEX'
,'PCMR_TERMBOUND'
,'PCMR_APPTERMINATED'
,'PCMR_TAP'
,'PCMR_SELECT'
,'PCMR_OVERFLOW'
,'PCMR_ERROR'
,'PCMR_DISPLAYERR'
,'PCMR_TERMINVERT'
,'PII_INKCLIPRECT'
,'PII_INKSTOPRECT'
,'PII_INKCLIPRGN'
,'PII_INKSTOPRGN'
,'PII_INKPENTIP'
,'PII_SAVEBACKGROUND'
,'PII_CLIPSTOP'
,'PIT_RGNBOUND'
,'PIT_RGNEXCLUDE'
,'PIT_TIMEOUT'
,'PIT_TAPNHOLD'
,'CL_NULL'
,'CL_MINIMUM'
,'CL_MAXIMUM'
,'cwRcReservedMax'
,'ENUM_MINIMUM'
,'ENUM_MAXIMUM'
,'HKP_SETHOOK'
,'HKP_UNHOOK'
,'HWR_RESULTS'
,'HWR_APPWIDE'
,'iSycNull'
,'LPDFNULL'
,'MAXDICTIONARIES'
,'wPntAll'
,'cbRcLanguageMax'
,'cbRcUserMax'
,'cbRcrgbfAlcMax'
,'RC_WDEFAULT'
,'RC_LDEFAULT'
,'RC_WDEFAULTFLAGS'
,'CWR_REPLACECR'
,'CWR_STRIPCR'
,'CWR_STRIPLF'
,'CWR_REPLACETAB'
,'CWR_STRIPTAB'
,'CWR_SINGLELINEEDIT'
,'CWR_INSERT'
,'CWR_TITLE'
,'CWR_KKCONVERT'
,'CWR_SIMPLE'
,'CWR_HEDIT'
,'CWR_KEYBOARD'
,'CWR_BOXES'
,'CWRK_DEFAULT'
,'CWRK_BASIC'
,'CWRK_FULL'
,'CWRK_NUMPAD'
,'CWRK_TELPAD'
,'GPMI_OK'
,'GPMI_INVALIDPMI'
,'INKWIDTH_MINIMUM'
,'INKWIDTH_MAXIMUM'
,'PMI_RCCHANGE'
,'PMI_BEDIT'
,'PMI_IMECOLOR'
,'PMI_CXTABLET'
,'PMI_CYTABLET'
,'PMI_PENTIP'
,'PMI_ENABLEFLAGS'
,'PMI_TIMEOUT'
,'PMI_TIMEOUTGEST'
,'PMI_TIMEOUTSEL'
,'PMI_SYSFLAGS'
,'PMI_INDEXFROMRGB'
,'PMI_RGBFROMINDEX'
,'PMI_SYSREC'
,'PMI_TICKREF'
,'PMI_SAVE'
,'PWE_AUTOWRITE'
,'PWE_ACTIONHANDLES'
,'PWE_INPUTCURSOR'
,'PWE_LENS'
,'PWF_RC1'
,'PWF_PEN'
,'PWF_INKDISPLAY'
,'PWF_RECOGNIZER'
,'PWF_BEDIT'
,'PWF_HEDIT'
,'PWF_IEDIT'
,'PWF_ENHANCED'
,'PWF_FULL'
,'RPA_DEFAULT'
,'RPA_HEDIT'
,'RPA_KANJIFIXEDBEDIT'
,'RPA_DBCSPRIORITY'
,'PMIR_OK'
,'PMIR_INDEX'
,'PMIR_VALUE'
,'PMIR_INVALIDBOXEDITINFO'
,'PMIR_INIERROR'
,'PMIR_ERROR'
,'PMIR_NA'
,'SPMI_OK'
,'SPMI_INVALIDBOXEDITINFO'
,'SPMI_INIERROR'
,'SPMI_INVALIDPMI'
,'RCD_DEFAULT'
,'RCD_LR'
,'RCD_RL'
,'RCD_TB'
,'RCD_BT'
,'RCIP_ALLANSICHAR'
,'RCIP_MASK'
,'RCO_NOPOINTEREVENT'
,'RCO_SAVEALLDATA'
,'RCO_SAVEHPENDATA'
,'RCO_NOFLASHUNKNOWN'
,'RCO_TABLETCOORD'
,'RCO_NOSPACEBREAK'
,'RCO_NOHIDECURSOR'
,'RCO_NOHOOK'
,'RCO_BOXED'
,'RCO_SUGGEST'
,'RCO_DISABLEGESMAP'
,'RCO_NOFLASHCURSOR'
,'RCO_BOXCROSS'
,'RCO_COLDRECOG'
,'RCO_SAVEBACKGROUND'
,'RCO_DODEFAULT'
,'RCOR_NORMAL'
,'RCOR_RIGHT'
,'RCOR_UPSIDEDOWN'
,'RCOR_LEFT'
,'RCP_LEFTHAND'
,'RCP_MAPCHAR'
,'RCRT_DEFAULT'
,'RCRT_UNIDENTIFIED'
,'RCRT_GESTURE'
,'RCRT_NOSYMBOLMATCH'
,'RCRT_PRIVATE'
,'RCRT_NORECOG'
,'RCRT_ALREADYPROCESSED'
,'RCRT_GESTURETRANSLATED'
,'RCRT_GESTURETOKEYS'
,'RRM_STROKE'
,'RRM_SYMBOL'
,'RRM_WORD'
,'RRM_NEWLINE'
,'RRM_COMPLETE'
,'TPT_CLOSEST'
,'TPT_INTERSECTINK'
,'TPT_TEXTUAL'
,'VWM_MOUSEMOVE'
,'VWM_MOUSELEFTDOWN'
,'VWM_MOUSELEFTUP'
,'VWM_MOUSERIGHTDOWN'
,'VWM_MOUSERIGHTUP'
,'WM_RCRESULT'
,'WM_HOOKRCRESULT'
,'WM_PENMISCINFO'
,'WM_GLOBALRCCHANGE'
,'WM_SKB'
,'WM_PENCTL'
,'WM_HEDITCTL'
,'HE_GETRC'
,'HE_SETRC'
,'HE_GETINFLATE'
,'HE_SETINFLATE'
,'HE_GETUNDERLINE'
,'HE_SETUNDERLINE'
,'HE_GETINKHANDLE'
,'HE_SETINKMODE'
,'HE_STOPINKMODE'
,'HE_GETRCRESULTCODE'
,'HE_DEFAULTFONT'
,'HE_CHARPOSITION'
,'HE_CHAROFFSET'
,'HE_GETBOXLAYOUT'
,'HE_SETBOXLAYOUT'
,'HE_GETRCRESULT'
,'HE_KKCONVERT'
,'HE_GETKKCONVERT'
,'HE_CANCELKKCONVERT'
,'HE_FIXKKCONVERT'
,'HE_GETKKSTATUS'
,'HE_KKNOCONVERT'
,'HE_SETIMEDEFAULT'
,'HE_GETIMEDEFAULT'
,'HE_ENABLEALTLIST'
,'HE_SHOWALTLIST'
,'HE_HIDEALTLIST'
,'HE_GETLENSTYPE'
,'HE_SETLENSTYPE'
,'HEKK_DEFAULT'
,'HEKK_CONVERT'
,'HEKK_CANDIDATE'
,'HEKK_DBCSCHAR'
,'HEKK_SBCSCHAR'
,'HEKK_HIRAGANA'
,'HEKK_KATAKANA'
,'HEKKR_PRECONVERT'
,'HEKKR_CONVERT'
,'HEKKR_TEMPCONFIRM'
,'HEP_NORECOG'
,'HEP_RECOG'
,'HEP_WAITFORTAP'
,'HN_ENDREC'
,'HN_DELAYEDRECOGFAIL'
,'HN_RESULT'
,'HN_RCRESULT'
,'HN_ENDKKCONVERT'
,'HN_BEGINDIALOG'
,'HN_ENDDIALOG'
,'IE_GETMODIFY'
,'IE_SETMODIFY'
,'IE_CANUNDO'
,'IE_UNDO'
,'IE_EMPTYUNDOBUFFER'
,'IE_MSGFIRST'
,'CIH_NOGDMSG'
,'CIH_NOACTIONHANDLE'
,'CIH_NOEDITTEXT'
,'CIH_NOFLASHCURSOR'
,'HEAL_DEFAULT'
,'BEI_FACESIZE'
,'BEIF_BOXCROSS'
,'BESC_DEFAULT'
,'BESC_ROMANFIXED'
,'BESC_KANJIFIXED'
,'BESC_USERDEFINED'
,'CIB_NOGDMSG'
,'CIB_NOACTIONHANDLE'
,'CIB_NOFLASHCURSOR'
,'CIB_NOWRITING'
,'BXD_CELLWIDTH'
,'BXD_CELLHEIGHT'
,'BXD_BASEHEIGHT'
,'BXD_BASEHORZ'
,'BXD_MIDFROMBASE'
,'BXD_CUSPHEIGHT'
,'BXD_ENDCUSPHEIGHT'
,'BXDK_CELLWIDTH'
,'BXDK_CELLHEIGHT'
,'BXDK_BASEHEIGHT'
,'BXDK_BASEHORZ'
,'BXDK_MIDFROMBASE'
,'BXDK_CUSPHEIGHT'
,'BXDK_ENDCUSPHEIGHT'
,'COLOR_BE_INPUT'
,'COLOR_BE_INPUT_TEXT'
,'COLOR_BE_CONVERT'
,'COLOR_BE_CONVERT_TEXT'
,'COLOR_BE_CONVERTED'
,'COLOR_BE_CONVERTED_TEXT'
,'COLOR_BE_UNCONVERT'
,'COLOR_BE_UNCONVERT_TEXT'
,'COLOR_BE_CURSOR'
,'COLOR_BE_CURSOR_TEXT'
,'COLOR_BE_PRECONVERT'
,'COLOR_BE_PRECONVERT_TEXT'
,'MAXIMECOLORS'
,'WM_PENMISC'
,'PMSC_BEDITCHANGE'
,'PMSC_PENUICHANGE'
,'PMSC_SUBINPCHANGE'
,'PMSC_KKCTLENABLE'
,'PMSC_GETPCMINFO'
,'PMSC_SETPCMINFO'
,'PMSC_GETINKINGINFO'
,'PMSC_SETINKINGINFO'
,'PMSC_GETHRC'
,'PMSC_SETHRC'
,'PMSC_GETSYMBOLCOUNT'
,'PMSC_GETSYMBOLS'
,'PMSC_SETSYMBOLS'
,'PMSC_LOADPW'
,'PMSC_INKSTOP'
,'PMSCL_UNLOADED'
,'PMSCL_LOADED'
,'PMSCL_UNLOADING'
,'WM_CTLINIT'
,'CTLINIT_HEDIT'
,'CTLINIT_BEDIT'
,'CTLINIT_IEDIT'
,'CTLINIT_MAX'
,'WM_PENEVENT'
,'PE_PENDOWN'
,'PE_PENUP'
,'PE_PENMOVE'
,'PE_TERMINATING'
,'PE_TERMINATED'
,'PE_BUFFERWARNING'
,'PE_BEGININPUT'
,'PE_SETTARGETS'
,'PE_BEGINDATA'
,'PE_MOREDATA'
,'PE_ENDDATA'
,'PE_GETPCMINFO'
,'PE_GETINKINGINFO'
,'PE_ENDINPUT'
,'PE_RESULT'
);
var __RegisteredConstsList1 : TList;
procedure __RegisterConsts1;
begin
__RegisteredConstsList1 := TList.Create;
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[0] ,IN_COMMAND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[1] ,IN_CLOSE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[2] ,IN_PROPERTIES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[3] ,LRET_DONE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[4] ,LRET_ABORT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[5] ,LRET_HRC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[6] ,LRET_HPENDATA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[7] ,LRET_PRIVATE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[8] ,PCMR_OK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[9] ,PCMR_ALREADYCOLLECTING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[10] ,PCMR_INVALIDCOLLECTION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[11] ,PCMR_EVENTLOCK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[12] ,PCMR_INVALID_PACKETID));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[13] ,PCMR_TERMTIMEOUT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[14] ,PCMR_TERMRANGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[15] ,PCMR_TERMPENUP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[16] ,PCMR_TERMEX));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[17] ,PCMR_TERMBOUND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[18] ,PCMR_APPTERMINATED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[19] ,PCMR_TAP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[20] ,PCMR_SELECT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[21] ,PCMR_OVERFLOW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[22] ,PCMR_ERROR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[23] ,PCMR_DISPLAYERR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[24] ,PCMR_TERMINVERT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[25] ,PII_INKCLIPRECT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[26] ,PII_INKSTOPRECT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[27] ,PII_INKCLIPRGN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[28] ,PII_INKSTOPRGN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[29] ,PII_INKPENTIP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[30] ,PII_SAVEBACKGROUND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[31] ,PII_CLIPSTOP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[32] ,PIT_RGNBOUND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[33] ,PIT_RGNEXCLUDE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[34] ,PIT_TIMEOUT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[35] ,PIT_TAPNHOLD));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[36] ,CL_NULL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[37] ,CL_MINIMUM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[38] ,CL_MAXIMUM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[39] ,cwRcReservedMax));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[40] ,ENUM_MINIMUM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[41] ,ENUM_MAXIMUM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[42] ,HKP_SETHOOK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[43] ,HKP_UNHOOK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[44] ,HWR_RESULTS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[45] ,HWR_APPWIDE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[46] ,iSycNull));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[47] ,LPDFNULL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[48] ,MAXDICTIONARIES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[49] ,wPntAll));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[50] ,cbRcLanguageMax));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[51] ,cbRcUserMax));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[52] ,cbRcrgbfAlcMax));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[53] ,RC_WDEFAULT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[54] ,RC_LDEFAULT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[55] ,RC_WDEFAULTFLAGS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[56] ,CWR_REPLACECR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[57] ,CWR_STRIPCR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[58] ,CWR_STRIPLF));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[59] ,CWR_REPLACETAB));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[60] ,CWR_STRIPTAB));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[61] ,CWR_SINGLELINEEDIT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[62] ,CWR_INSERT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[63] ,CWR_TITLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[64] ,CWR_KKCONVERT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[65] ,CWR_SIMPLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[66] ,CWR_HEDIT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[67] ,CWR_KEYBOARD));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[68] ,CWR_BOXES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[69] ,CWRK_DEFAULT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[70] ,CWRK_BASIC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[71] ,CWRK_FULL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[72] ,CWRK_NUMPAD));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[73] ,CWRK_TELPAD));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[74] ,GPMI_OK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[75] ,GPMI_INVALIDPMI));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[76] ,INKWIDTH_MINIMUM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[77] ,INKWIDTH_MAXIMUM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[78] ,PMI_RCCHANGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[79] ,PMI_BEDIT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[80] ,PMI_IMECOLOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[81] ,PMI_CXTABLET));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[82] ,PMI_CYTABLET));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[83] ,PMI_PENTIP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[84] ,PMI_ENABLEFLAGS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[85] ,PMI_TIMEOUT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[86] ,PMI_TIMEOUTGEST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[87] ,PMI_TIMEOUTSEL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[88] ,PMI_SYSFLAGS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[89] ,PMI_INDEXFROMRGB));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[90] ,PMI_RGBFROMINDEX));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[91] ,PMI_SYSREC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[92] ,PMI_TICKREF));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[93] ,PMI_SAVE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[94] ,PWE_AUTOWRITE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[95] ,PWE_ACTIONHANDLES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[96] ,PWE_INPUTCURSOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[97] ,PWE_LENS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[98] ,PWF_RC1));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[99] ,PWF_PEN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[100] ,PWF_INKDISPLAY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[101] ,PWF_RECOGNIZER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[102] ,PWF_BEDIT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[103] ,PWF_HEDIT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[104] ,PWF_IEDIT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[105] ,PWF_ENHANCED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[106] ,PWF_FULL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[107] ,RPA_DEFAULT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[108] ,RPA_HEDIT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[109] ,RPA_KANJIFIXEDBEDIT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[110] ,RPA_DBCSPRIORITY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[111] ,PMIR_OK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[112] ,PMIR_INDEX));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[113] ,PMIR_VALUE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[114] ,PMIR_INVALIDBOXEDITINFO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[115] ,PMIR_INIERROR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[116] ,PMIR_ERROR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[117] ,PMIR_NA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[118] ,SPMI_OK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[119] ,SPMI_INVALIDBOXEDITINFO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[120] ,SPMI_INIERROR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[121] ,SPMI_INVALIDPMI));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[122] ,RCD_DEFAULT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[123] ,RCD_LR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[124] ,RCD_RL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[125] ,RCD_TB));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[126] ,RCD_BT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[127] ,RCIP_ALLANSICHAR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[128] ,RCIP_MASK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[129] ,RCO_NOPOINTEREVENT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[130] ,RCO_SAVEALLDATA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[131] ,RCO_SAVEHPENDATA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[132] ,RCO_NOFLASHUNKNOWN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[133] ,RCO_TABLETCOORD));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[134] ,RCO_NOSPACEBREAK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[135] ,RCO_NOHIDECURSOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[136] ,RCO_NOHOOK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[137] ,RCO_BOXED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[138] ,RCO_SUGGEST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[139] ,RCO_DISABLEGESMAP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[140] ,RCO_NOFLASHCURSOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[141] ,RCO_BOXCROSS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[142] ,RCO_COLDRECOG));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[143] ,RCO_SAVEBACKGROUND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[144] ,RCO_DODEFAULT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[145] ,RCOR_NORMAL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[146] ,RCOR_RIGHT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[147] ,RCOR_UPSIDEDOWN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[148] ,RCOR_LEFT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[149] ,RCP_LEFTHAND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[150] ,RCP_MAPCHAR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[151] ,RCRT_DEFAULT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[152] ,RCRT_UNIDENTIFIED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[153] ,RCRT_GESTURE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[154] ,RCRT_NOSYMBOLMATCH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[155] ,RCRT_PRIVATE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[156] ,RCRT_NORECOG));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[157] ,RCRT_ALREADYPROCESSED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[158] ,RCRT_GESTURETRANSLATED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[159] ,RCRT_GESTURETOKEYS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[160] ,RRM_STROKE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[161] ,RRM_SYMBOL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[162] ,RRM_WORD));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[163] ,RRM_NEWLINE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[164] ,RRM_COMPLETE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[165] ,TPT_CLOSEST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[166] ,TPT_INTERSECTINK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[167] ,TPT_TEXTUAL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[168] ,VWM_MOUSEMOVE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[169] ,VWM_MOUSELEFTDOWN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[170] ,VWM_MOUSELEFTUP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[171] ,VWM_MOUSERIGHTDOWN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[172] ,VWM_MOUSERIGHTUP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[173] ,WM_RCRESULT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[174] ,WM_HOOKRCRESULT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[175] ,WM_PENMISCINFO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[176] ,WM_GLOBALRCCHANGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[177] ,WM_SKB));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[178] ,WM_PENCTL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[179] ,WM_HEDITCTL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[180] ,HE_GETRC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[181] ,HE_SETRC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[182] ,HE_GETINFLATE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[183] ,HE_SETINFLATE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[184] ,HE_GETUNDERLINE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[185] ,HE_SETUNDERLINE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[186] ,HE_GETINKHANDLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[187] ,HE_SETINKMODE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[188] ,HE_STOPINKMODE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[189] ,HE_GETRCRESULTCODE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[190] ,HE_DEFAULTFONT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[191] ,HE_CHARPOSITION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[192] ,HE_CHAROFFSET));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[193] ,HE_GETBOXLAYOUT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[194] ,HE_SETBOXLAYOUT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[195] ,HE_GETRCRESULT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[196] ,HE_KKCONVERT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[197] ,HE_GETKKCONVERT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[198] ,HE_CANCELKKCONVERT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[199] ,HE_FIXKKCONVERT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[200] ,HE_GETKKSTATUS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[201] ,HE_KKNOCONVERT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[202] ,HE_SETIMEDEFAULT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[203] ,HE_GETIMEDEFAULT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[204] ,HE_ENABLEALTLIST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[205] ,HE_SHOWALTLIST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[206] ,HE_HIDEALTLIST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[207] ,HE_GETLENSTYPE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[208] ,HE_SETLENSTYPE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[209] ,HEKK_DEFAULT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[210] ,HEKK_CONVERT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[211] ,HEKK_CANDIDATE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[212] ,HEKK_DBCSCHAR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[213] ,HEKK_SBCSCHAR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[214] ,HEKK_HIRAGANA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[215] ,HEKK_KATAKANA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[216] ,HEKKR_PRECONVERT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[217] ,HEKKR_CONVERT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[218] ,HEKKR_TEMPCONFIRM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[219] ,HEP_NORECOG));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[220] ,HEP_RECOG));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[221] ,HEP_WAITFORTAP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[222] ,HN_ENDREC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[223] ,HN_DELAYEDRECOGFAIL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[224] ,HN_RESULT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[225] ,HN_RCRESULT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[226] ,HN_ENDKKCONVERT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[227] ,HN_BEGINDIALOG));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[228] ,HN_ENDDIALOG));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[229] ,IE_GETMODIFY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[230] ,IE_SETMODIFY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[231] ,IE_CANUNDO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[232] ,IE_UNDO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[233] ,IE_EMPTYUNDOBUFFER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[234] ,IE_MSGFIRST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[235] ,CIH_NOGDMSG));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[236] ,CIH_NOACTIONHANDLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[237] ,CIH_NOEDITTEXT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[238] ,CIH_NOFLASHCURSOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[239] ,HEAL_DEFAULT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[240] ,BEI_FACESIZE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[241] ,BEIF_BOXCROSS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[242] ,BESC_DEFAULT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[243] ,BESC_ROMANFIXED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[244] ,BESC_KANJIFIXED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[245] ,BESC_USERDEFINED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[246] ,CIB_NOGDMSG));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[247] ,CIB_NOACTIONHANDLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[248] ,CIB_NOFLASHCURSOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[249] ,CIB_NOWRITING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[250] ,BXD_CELLWIDTH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[251] ,BXD_CELLHEIGHT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[252] ,BXD_BASEHEIGHT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[253] ,BXD_BASEHORZ));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[254] ,BXD_MIDFROMBASE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[255] ,BXD_CUSPHEIGHT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[256] ,BXD_ENDCUSPHEIGHT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[257] ,BXDK_CELLWIDTH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[258] ,BXDK_CELLHEIGHT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[259] ,BXDK_BASEHEIGHT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[260] ,BXDK_BASEHORZ));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[261] ,BXDK_MIDFROMBASE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[262] ,BXDK_CUSPHEIGHT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[263] ,BXDK_ENDCUSPHEIGHT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[264] ,COLOR_BE_INPUT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[265] ,COLOR_BE_INPUT_TEXT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[266] ,COLOR_BE_CONVERT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[267] ,COLOR_BE_CONVERT_TEXT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[268] ,COLOR_BE_CONVERTED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[269] ,COLOR_BE_CONVERTED_TEXT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[270] ,COLOR_BE_UNCONVERT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[271] ,COLOR_BE_UNCONVERT_TEXT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[272] ,COLOR_BE_CURSOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[273] ,COLOR_BE_CURSOR_TEXT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[274] ,COLOR_BE_PRECONVERT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[275] ,COLOR_BE_PRECONVERT_TEXT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[276] ,MAXIMECOLORS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[277] ,WM_PENMISC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[278] ,PMSC_BEDITCHANGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[279] ,PMSC_PENUICHANGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[280] ,PMSC_SUBINPCHANGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[281] ,PMSC_KKCTLENABLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[282] ,PMSC_GETPCMINFO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[283] ,PMSC_SETPCMINFO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[284] ,PMSC_GETINKINGINFO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[285] ,PMSC_SETINKINGINFO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[286] ,PMSC_GETHRC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[287] ,PMSC_SETHRC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[288] ,PMSC_GETSYMBOLCOUNT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[289] ,PMSC_GETSYMBOLS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[290] ,PMSC_SETSYMBOLS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[291] ,PMSC_LOADPW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[292] ,PMSC_INKSTOP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[293] ,PMSCL_UNLOADED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[294] ,PMSCL_LOADED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[295] ,PMSCL_UNLOADING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[296] ,WM_CTLINIT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[297] ,CTLINIT_HEDIT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[298] ,CTLINIT_BEDIT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[299] ,CTLINIT_IEDIT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[300] ,CTLINIT_MAX));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[301] ,WM_PENEVENT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[302] ,PE_PENDOWN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[303] ,PE_PENUP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[304] ,PE_PENMOVE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[305] ,PE_TERMINATING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[306] ,PE_TERMINATED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[307] ,PE_BUFFERWARNING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[308] ,PE_BEGININPUT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[309] ,PE_SETTARGETS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[310] ,PE_BEGINDATA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[311] ,PE_MOREDATA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[312] ,PE_ENDDATA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[313] ,PE_GETPCMINFO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[314] ,PE_GETINKINGINFO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[315] ,PE_ENDINPUT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[316] ,PE_RESULT));
end;

procedure __UnregisterConsts1;
var i : integer;
begin
__RegisteredConstsList1.Free
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..190] of string = (
'ABSTIME'
,'ANIMATEINFO'
,'BOXEDITINFO'
,'BOXLAYOUT'
,'BOXRESULTS'
,'CALBSTRUCT'
,'CTLINITBEDIT'
,'CTLINITHEDIT'
,'CTLINITIEDIT'
,'GUIDE'
,'IMECOLORS'
,'INKINGINFO'
,'INPPARAMS'
,'INTERVAL'
,'OEMPENINFO'
,'OEMPENPACKET'
,'PCMINFO'
,'PDEVENT'
,'PENDATAHEADER'
,'PENINFO'
,'PENPACKET'
,'PENTIP'
,'RC'
,'RCRESULT'
,'RECTOFS'
,'SKBINFO'
,'STRKFMT'
,'STROKEINFO'
,'SYC'
,'SYE'
,'SYG'
,'TAbsTime'
,'tagABSTIME'
,'tagANIMATEINFO'
,'tagBOXEDITINFO'
,'tagBOXLAYOUT'
,'tagBOXRESULTS'
,'tagCALBSTRUCT'
,'tagCTLINITBEDIT'
,'tagCTLINITHEDIT'
,'tagCTLINITIEDIT'
,'tagGUIDE'
,'tagIMECOLORS'
,'tagINKINGINFO'
,'tagINPPARAMS'
,'tagINTERVAL'
,'tagOEMPENINFO'
,'tagOEMPENPACKET'
,'tagPCMINFO'
,'tagPDEVENT'
,'tagPENDATAHEADER'
,'tagPENINFO'
,'tagPENPACKET'
,'tagPENTIP'
,'tagRC'
,'tagRCRESULT'
,'tagRECTOFS'
,'tagSKBINFO'
,'tagSTRKFMT'
,'tagSTROKEINFO'
,'tagSYC'
,'tagSYE'
,'tagSYG'
,'tagTARGET'
,'tagTARGINFO'
,'TAnimateInfo'
,'TARGET'
,'TARGINFO'
,'TBoxEditInfo'
,'TBoxLayout'
,'TBoxResults'
,'TCalbStruct'
,'TCtlInitBEdit'
,'TCtlInitHEdit'
,'TCtlInitIEdit'
,'TGuide'
,'TIMEColors'
,'TInkingInfo'
,'TInpParams'
,'TInterval'
,'TOEMPenInfo'
,'TOEMPenPacket'
,'TPCMInfo'
,'TPDEvent'
,'TPenDataHeader'
,'TPenInfo'
,'TPenPacket'
,'TPenTip'
,'TRC'
,'TRCResult'
,'TRectOfs'
,'TSKBInfo'
,'TStrkFmt'
,'TStrokeInfo'
,'TSYC'
,'TSYE'
,'TSYG'
,'TTarget'
,'TTargInfo'
,'FPenUpX'
,'GetWEventRef'
,'MpIbf'
,'dwDiffAT'
,'FLTAbsTime'
,'FLTEAbsTime'
,'FEQAbsTime'
,'MakeAbsTime'
,'FIsSpecial'
,'FIsAnsi'
,'FIsGesture'
,'FIsKanji'
,'FIsShape'
,'FIsUniCode'
,'FIsVKey'
,'ChSyvToAnsi'
,'WSyvToKanji'
,'SyvCharacterToSymbol'
,'SyvKanjiToSymbol'
,'FIsSelectGesture'
,'FIsStdGesture'
,'FIsAnsiGesture'
,'SubPenMsgFromWpLp'
,'EventRefFromWpLp'
,'TerminationFromWpLp'
,'HwndFromHtrg'
,'HpcmFromWpLp'
,'HtrgFromHwnd'
,'CompressPenData'
,'CreatePenDataRegion'
,'DestroyPenData'
,'DuplicatePenData'
,'ExtractPenDataStrokes'
,'GetPenDataAttributes'
,'GetStrokeAttributes'
,'GetStrokeTableAttributes'
,'InsertPenData'
,'MetricScalePenData'
,'OffsetPenData'
,'PenDataFromBuffer'
,'PenDataToBuffer'
,'RemovePenDataStrokes'
,'SetStrokeAttributes'
,'SetStrokeTableAttributes'
,'TrimPenData'
,'GetPenAsyncState'
,'IsPenEvent'
,'AddPenDataHRC'
,'ConfigHREC'
,'CreateCompatibleHRC'
,'CreateInksetHRCRESULT'
,'CreatePenDataHRC'
,'DestroyHRC'
,'DestroyHRCRESULT'
,'DestroyHWL'
,'EnableGestureSetHRC'
,'EnableSystemDictionaryHRC'
,'EndPenInputHRC'
,'GetAlphabetHRC'
,'GetAlphabetPriorityHRC'
,'GetAlternateWordsHRCRESULT'
,'GetBoxMappingHRCRESULT'
,'GetHRECFromHRC'
,'GetMaxResultsHRC'
,'GetResultsHRC'
,'GetSymbolCountHRCRESULT'
,'GetSymbolsHRCRESULT'
,'GetWordlistHRC'
,'GetWordlistCoercionHRC'
,'ProcessHRC'
,'ReadHWL'
,'SetAlphabetHRC'
,'SetAlphabetPriorityHRC'
,'SetBoxAlphabetHRC'
,'SetMaxResultsHRC'
,'SetWordlistCoercionHRC'
,'SetWordlistHRC'
,'TrainHREC'
,'UnhookResultsHookHREC'
,'WriteHWL'
,'UninstallRecognizer'
,'CreateInkset'
,'DestroyInkset'
,'GetInksetIntervalCount'
,'DoDefaultPenInput'
,'StopInking'
,'StopPenInput'
,'GetPenAppFlags'
,'SetPenAppFlags'
,'GetPenMiscInfo'
,'GetVersionPenWin'
,'SetPenMiscInfo'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_ABSTIME_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_ANIMATEINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_BOXEDITINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(_BOXLAYOUT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(_BOXRESULTS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[5],Addr(_CALBSTRUCT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[6],Addr(_CTLINITBEDIT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[7],Addr(_CTLINITHEDIT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[8],Addr(_CTLINITIEDIT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[9],Addr(_GUIDE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[10],Addr(_IMECOLORS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[11],Addr(_INKINGINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[12],Addr(_INPPARAMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[13],Addr(_INTERVAL_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[14],Addr(_OEMPENINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[15],Addr(_OEMPENPACKET_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[16],Addr(_PCMINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[17],Addr(_PDEVENT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[18],Addr(_PENDATAHEADER_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[19],Addr(_PENINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[20],Addr(_PENPACKET_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[21],Addr(_PENTIP_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[22],Addr(_RC_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[23],Addr(_RCRESULT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[24],Addr(_RECTOFS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[25],Addr(_SKBINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[26],Addr(_STRKFMT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[27],Addr(_STROKEINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[28],Addr(_SYC_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[29],Addr(_SYE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[30],Addr(_SYG_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[31],Addr(_TAbsTime_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[32],Addr(_tagABSTIME_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[33],Addr(_tagANIMATEINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[34],Addr(_tagBOXEDITINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[35],Addr(_tagBOXLAYOUT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[36],Addr(_tagBOXRESULTS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[37],Addr(_tagCALBSTRUCT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[38],Addr(_tagCTLINITBEDIT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[39],Addr(_tagCTLINITHEDIT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[40],Addr(_tagCTLINITIEDIT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[41],Addr(_tagGUIDE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[42],Addr(_tagIMECOLORS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[43],Addr(_tagINKINGINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[44],Addr(_tagINPPARAMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[45],Addr(_tagINTERVAL_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[46],Addr(_tagOEMPENINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[47],Addr(_tagOEMPENPACKET_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[48],Addr(_tagPCMINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[49],Addr(_tagPDEVENT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[50],Addr(_tagPENDATAHEADER_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[51],Addr(_tagPENINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[52],Addr(_tagPENPACKET_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[53],Addr(_tagPENTIP_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[54],Addr(_tagRC_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[55],Addr(_tagRCRESULT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[56],Addr(_tagRECTOFS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[57],Addr(_tagSKBINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[58],Addr(_tagSTRKFMT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[59],Addr(_tagSTROKEINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[60],Addr(_tagSYC_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[61],Addr(_tagSYE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[62],Addr(_tagSYG_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[63],Addr(_tagTARGET_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[64],Addr(_tagTARGINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[65],Addr(_TAnimateInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[66],Addr(_TARGET_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[67],Addr(_TARGINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[68],Addr(_TBoxEditInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[69],Addr(_TBoxLayout_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[70],Addr(_TBoxResults_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[71],Addr(_TCalbStruct_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[72],Addr(_TCtlInitBEdit_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[73],Addr(_TCtlInitHEdit_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[74],Addr(_TCtlInitIEdit_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[75],Addr(_TGuide_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[76],Addr(_TIMEColors_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[77],Addr(_TInkingInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[78],Addr(_TInpParams_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[79],Addr(_TInterval_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[80],Addr(_TOEMPenInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[81],Addr(_TOEMPenPacket_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[82],Addr(_TPCMInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[83],Addr(_TPDEvent_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[84],Addr(_TPenDataHeader_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[85],Addr(_TPenInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[86],Addr(_TPenPacket_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[87],Addr(_TPenTip_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[88],Addr(_TRC_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[89],Addr(_TRCResult_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[90],Addr(_TRectOfs_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[91],Addr(_TSKBInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[92],Addr(_TStrkFmt_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[93],Addr(_TStrokeInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[94],Addr(_TSYC_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[95],Addr(_TSYE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[96],Addr(_TSYG_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[97],Addr(_TTarget_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[98],Addr(_TTargInfo_)));
RegisterProc(nil,MethodNames[99],mtProc,TypeInfo(_T0),[
TypeInfo(Integer),TypeInfo(BOOL)],Addr(FPenUpX),cRegister);

RegisterProc(nil,MethodNames[100],mtProc,TypeInfo(_T1),[TypeInfo(Word)],Addr(GetWEventRef),cRegister);

RegisterProc(nil,MethodNames[101],mtProc,TypeInfo(_T3),[
TypeInfo(Word),TypeInfo(Byte)],Addr(MpIbf),cRegister);

RegisterProc(nil,MethodNames[102],mtProc,TypeInfo(_T8),[
TypeInfo(IDispatch),
TypeInfo(IDispatch),TypeInfo(Integer)],Addr(____dwDiffAT__Wrapper),cRegister);

RegisterProc(nil,MethodNames[103],mtProc,TypeInfo(_T9),[
TypeInfo(IDispatch),
TypeInfo(IDispatch),TypeInfo(Boolean)],Addr(____FLTAbsTime__Wrapper),cRegister);

RegisterProc(nil,MethodNames[104],mtProc,TypeInfo(_T10),[
TypeInfo(IDispatch),
TypeInfo(IDispatch),TypeInfo(Boolean)],Addr(____FLTEAbsTime__Wrapper),cRegister);

RegisterProc(nil,MethodNames[105],mtProc,TypeInfo(_T11),[
TypeInfo(IDispatch),
TypeInfo(IDispatch),TypeInfo(Boolean)],Addr(____FEQAbsTime__Wrapper),cRegister);

RegisterProc(nil,MethodNames[106],mtProc,TypeInfo(_T16),[
TypeInfo(IDispatch),
TypeInfo(Integer),
TypeInfo(Integer)],Addr(____MakeAbsTime__Wrapper),cRegister);

RegisterProc(nil,MethodNames[107],mtProc,TypeInfo(_T17),[
TypeInfo(DWORD),TypeInfo(Boolean)],Addr(FIsSpecial),cRegister);

RegisterProc(nil,MethodNames[108],mtProc,TypeInfo(_T18),[
TypeInfo(DWORD),TypeInfo(Boolean)],Addr(FIsAnsi),cRegister);

RegisterProc(nil,MethodNames[109],mtProc,TypeInfo(_T19),[
TypeInfo(DWORD),TypeInfo(Boolean)],Addr(FIsGesture),cRegister);

RegisterProc(nil,MethodNames[110],mtProc,TypeInfo(_T20),[
TypeInfo(DWORD),TypeInfo(Boolean)],Addr(FIsKanji),cRegister);

RegisterProc(nil,MethodNames[111],mtProc,TypeInfo(_T21),[
TypeInfo(DWORD),TypeInfo(Boolean)],Addr(FIsShape),cRegister);

RegisterProc(nil,MethodNames[112],mtProc,TypeInfo(_T22),[
TypeInfo(DWORD),TypeInfo(Boolean)],Addr(FIsUniCode),cRegister);

RegisterProc(nil,MethodNames[113],mtProc,TypeInfo(_T23),[
TypeInfo(DWORD),TypeInfo(Boolean)],Addr(FIsVKey),cRegister);

RegisterProc(nil,MethodNames[114],mtProc,TypeInfo(_T24),[
TypeInfo(DWORD),TypeInfo(Byte)],Addr(ChSyvToAnsi),cRegister);

RegisterProc(nil,MethodNames[115],mtProc,TypeInfo(_T25),[
TypeInfo(DWORD),TypeInfo(Word)],Addr(WSyvToKanji),cRegister);

RegisterProc(nil,MethodNames[116],mtProc,TypeInfo(_T26),[
TypeInfo(Char),TypeInfo(DWORD)],Addr(SyvCharacterToSymbol),cRegister);

RegisterProc(nil,MethodNames[117],mtProc,TypeInfo(_T27),[
TypeInfo(Char),TypeInfo(DWORD)],Addr(SyvKanjiToSymbol),cRegister);

RegisterProc(nil,MethodNames[118],mtProc,TypeInfo(_T28),[
TypeInfo(DWORD),TypeInfo(Boolean)],Addr(FIsSelectGesture),cRegister);

RegisterProc(nil,MethodNames[119],mtProc,TypeInfo(_T29),[
TypeInfo(DWORD),TypeInfo(Boolean)],Addr(FIsStdGesture),cRegister);

RegisterProc(nil,MethodNames[120],mtProc,TypeInfo(_T30),[
TypeInfo(DWORD),TypeInfo(Boolean)],Addr(FIsAnsiGesture),cRegister);

RegisterProc(nil,MethodNames[121],mtProc,TypeInfo(_T31),[
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(Word)],Addr(SubPenMsgFromWpLp),cRegister);

RegisterProc(nil,MethodNames[122],mtProc,TypeInfo(_T32),[
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(Word)],Addr(EventRefFromWpLp),cRegister);

RegisterProc(nil,MethodNames[123],mtProc,TypeInfo(_T33),[
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(Integer)],Addr(TerminationFromWpLp),cRegister);

RegisterProc(nil,MethodNames[124],mtProc,TypeInfo(_T34),[
TypeInfo(HTRG),TypeInfo(hwnd)],Addr(HwndFromHtrg),cRegister);

RegisterProc(nil,MethodNames[125],mtProc,TypeInfo(_T35),[
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(Integer)],Addr(HpcmFromWpLp),cRegister);

RegisterProc(nil,MethodNames[126],mtProc,TypeInfo(_T36),[
TypeInfo(hwnd),TypeInfo(HTRG)],Addr(HtrgFromHwnd),cRegister);

RegisterProc(nil,MethodNames[127],mtProc,TypeInfo(_T38),[
TypeInfo(HPENDATA),
TypeInfo(UINT),
TypeInfo(DWORD),TypeInfo(Integer)],Addr(CompressPenData),cStdCall);

RegisterProc(nil,MethodNames[128],mtProc,TypeInfo(_T40),[
TypeInfo(HPENDATA),
TypeInfo(UINT),TypeInfo(HRGN)],Addr(CreatePenDataRegion),cStdCall);

RegisterProc(nil,MethodNames[129],mtProc,TypeInfo(_T41),[
TypeInfo(HPENDATA),TypeInfo(BOOL)],Addr(DestroyPenData),cStdCall);

RegisterProc(nil,MethodNames[130],mtProc,TypeInfo(_T43),[
TypeInfo(HPENDATA),
TypeInfo(UINT),TypeInfo(HPENDATA)],Addr(DuplicatePenData),cStdCall);

RegisterProc(nil,MethodNames[131],mtProc,TypeInfo(_T45),[
TypeInfo(HPENDATA),
TypeInfo(UINT),
TypeInfo(LPARAM),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(Integer)],Addr(ExtractPenDataStrokes),cStdCall);

RegisterProc(nil,MethodNames[132],mtProc,TypeInfo(_T46),[
TypeInfo(HPENDATA),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(Integer)],Addr(GetPenDataAttributes),cStdCall);

RegisterProc(nil,MethodNames[133],mtProc,TypeInfo(_T49),[
TypeInfo(HPENDATA),
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(Integer)],Addr(GetStrokeAttributes),cStdCall);

RegisterProc(nil,MethodNames[134],mtProc,TypeInfo(_T50),[
TypeInfo(HPENDATA),
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(Integer)],Addr(GetStrokeTableAttributes),cStdCall);

RegisterProc(nil,MethodNames[135],mtProc,TypeInfo(_T52),[
TypeInfo(HPENDATA),
TypeInfo(HPENDATA),
TypeInfo(UINT),TypeInfo(Integer)],Addr(InsertPenData),cStdCall);

RegisterProc(nil,MethodNames[136],mtProc,TypeInfo(_T55),[
TypeInfo(HPENDATA),
TypeInfo(UINT),TypeInfo(BOOL)],Addr(MetricScalePenData),cStdCall);

RegisterProc(nil,MethodNames[137],mtProc,TypeInfo(_T56),[
TypeInfo(HPENDATA),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(BOOL)],Addr(OffsetPenData),cStdCall);

RegisterProc(nil,MethodNames[138],mtProc,TypeInfo(_T57),[
TypeInfoPointer,
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(Longint),
TypeInfoPointer,TypeInfo(Longint)],Addr(PenDataFromBuffer),cStdCall);

RegisterProc(nil,MethodNames[139],mtProc,TypeInfo(_T58),[
TypeInfo(HPENDATA),
TypeInfoPointer,
TypeInfo(Longint),
TypeInfoPointer,TypeInfo(Longint)],Addr(PenDataToBuffer),cStdCall);

RegisterProc(nil,MethodNames[140],mtProc,TypeInfo(_T60),[
TypeInfo(HPENDATA),
TypeInfo(UINT),
TypeInfo(UINT),TypeInfo(Integer)],Addr(RemovePenDataStrokes),cStdCall);

RegisterProc(nil,MethodNames[141],mtProc,TypeInfo(_T62),[
TypeInfo(HPENDATA),
TypeInfo(UINT),
TypeInfo(LPARAM),
TypeInfo(UINT),TypeInfo(Integer)],Addr(SetStrokeAttributes),cStdCall);

RegisterProc(nil,MethodNames[142],mtProc,TypeInfo(_T63),[
TypeInfo(HPENDATA),
TypeInfo(UINT),
TypeInfo(LPARAM),
TypeInfo(UINT),TypeInfo(Integer)],Addr(SetStrokeTableAttributes),cStdCall);

RegisterProc(nil,MethodNames[143],mtProc,TypeInfo(_T64),[
TypeInfo(HPENDATA),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(Integer)],Addr(TrimPenData),cStdCall);

RegisterProc(nil,MethodNames[144],mtProc,TypeInfo(_T65),[
TypeInfo(UINT),TypeInfo(BOOL)],Addr(GetPenAsyncState),cStdCall);

RegisterProc(nil,MethodNames[145],mtProc,TypeInfo(_T66),[
TypeInfo(UINT),
TypeInfo(Longint),TypeInfo(BOOL)],Addr(IsPenEvent),cStdCall);

RegisterProc(nil,MethodNames[146],mtProc,TypeInfo(_T67),[
TypeInfo(HRC),
TypeInfo(HPENDATA),TypeInfo(Integer)],Addr(AddPenDataHRC),cStdCall);

RegisterProc(nil,MethodNames[147],mtProc,TypeInfo(_T70),[
TypeInfo(HREC),
TypeInfo(UINT),
TypeInfo(wParam),
TypeInfo(LPARAM),TypeInfo(Integer)],Addr(ConfigHREC),cStdCall);

RegisterProc(nil,MethodNames[148],mtProc,TypeInfo(_T71),[
TypeInfo(HRC),
TypeInfo(HREC),TypeInfo(HRC)],Addr(CreateCompatibleHRC),cStdCall);

RegisterProc(nil,MethodNames[149],mtProc,TypeInfo(_T73),[
TypeInfo(HRCRESULT),
TypeInfo(UINT),
TypeInfo(UINT),TypeInfo(HINKSET)],Addr(CreateInksetHRCRESULT),cStdCall);

RegisterProc(nil,MethodNames[150],mtProc,TypeInfo(_T74),[
TypeInfo(HRC),TypeInfo(HPENDATA)],Addr(CreatePenDataHRC),cStdCall);

RegisterProc(nil,MethodNames[151],mtProc,TypeInfo(_T75),[
TypeInfo(HRC),TypeInfo(Integer)],Addr(DestroyHRC),cStdCall);

RegisterProc(nil,MethodNames[152],mtProc,TypeInfo(_T76),[
TypeInfo(HRCRESULT),TypeInfo(Integer)],Addr(DestroyHRCRESULT),cStdCall);

RegisterProc(nil,MethodNames[153],mtProc,TypeInfo(_T77),[
TypeInfo(HWL),TypeInfo(Integer)],Addr(DestroyHWL),cStdCall);

RegisterProc(nil,MethodNames[154],mtProc,TypeInfo(_T78),[
TypeInfo(HRC),
TypeInfo(SYV),
TypeInfo(BOOL),TypeInfo(Integer)],Addr(EnableGestureSetHRC),cStdCall);

RegisterProc(nil,MethodNames[155],mtProc,TypeInfo(_T79),[
TypeInfo(HRC),
TypeInfo(BOOL),TypeInfo(Integer)],Addr(EnableSystemDictionaryHRC),cStdCall);

RegisterProc(nil,MethodNames[156],mtProc,TypeInfo(_T80),[
TypeInfo(HRC),TypeInfo(Integer)],Addr(EndPenInputHRC),cStdCall);

RegisterProc(nil,MethodNames[157],mtProc,TypeInfo(_T81),[
TypeInfo(HRC),
TypeInfoPointer,
TypeInfoPointer,TypeInfo(Integer)],Addr(GetAlphabetHRC),cStdCall);

RegisterProc(nil,MethodNames[158],mtProc,TypeInfo(_T82),[
TypeInfo(HRC),
TypeInfoPointer,
TypeInfoPointer,TypeInfo(Integer)],Addr(GetAlphabetPriorityHRC),cStdCall);

RegisterProc(nil,MethodNames[159],mtProc,TypeInfo(_T83),[
TypeInfo(HRCRESULT),
TypeInfo(UINT),
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(Integer)],Addr(GetAlternateWordsHRCRESULT),cStdCall);

RegisterProc(nil,MethodNames[160],mtProc,TypeInfo(_T84),[
TypeInfo(HRCRESULT),
TypeInfo(UINT),
TypeInfo(UINT),
TypeInfoPointer,TypeInfo(Integer)],Addr(GetBoxMappingHRCRESULT),cStdCall);

RegisterProc(nil,MethodNames[161],mtProc,TypeInfo(_T88),[
TypeInfo(HRC),TypeInfo(HREC)],Addr(GetHRECFromHRC),cStdCall);

RegisterProc(nil,MethodNames[162],mtProc,TypeInfo(_T90),[
TypeInfo(HRC),TypeInfo(Integer)],Addr(GetMaxResultsHRC),cStdCall);

RegisterProc(nil,MethodNames[163],mtProc,TypeInfo(_T91),[
TypeInfo(HRC),
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(Integer)],Addr(GetResultsHRC),cStdCall);

RegisterProc(nil,MethodNames[164],mtProc,TypeInfo(_T92),[
TypeInfo(HRCRESULT),TypeInfo(Integer)],Addr(GetSymbolCountHRCRESULT),cStdCall);

RegisterProc(nil,MethodNames[165],mtProc,TypeInfo(_T93),[
TypeInfo(HRCRESULT),
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(Integer)],Addr(GetSymbolsHRCRESULT),cStdCall);

RegisterProc(nil,MethodNames[166],mtProc,TypeInfo(_T94),[
TypeInfo(HRC),
TypeInfoPointer,TypeInfo(Integer)],Addr(GetWordlistHRC),cStdCall);

RegisterProc(nil,MethodNames[167],mtProc,TypeInfo(_T95),[
TypeInfo(HRC),TypeInfo(Integer)],Addr(GetWordlistCoercionHRC),cStdCall);

RegisterProc(nil,MethodNames[168],mtProc,TypeInfo(_T96),[
TypeInfo(HRC),
TypeInfo(DWORD),TypeInfo(Integer)],Addr(ProcessHRC),cStdCall);

RegisterProc(nil,MethodNames[169],mtProc,TypeInfo(_T97),[
TypeInfo(HWL),
TypeInfo(HFILE),TypeInfo(Integer)],Addr(ReadHWL),cStdCall);

RegisterProc(nil,MethodNames[170],mtProc,TypeInfo(_T98),[
TypeInfo(HRC),
TypeInfo(ALC),
TypeInfoPointer,TypeInfo(Integer)],Addr(SetAlphabetHRC),cStdCall);

RegisterProc(nil,MethodNames[171],mtProc,TypeInfo(_T99),[
TypeInfo(HRC),
TypeInfo(ALC),
TypeInfoPointer,TypeInfo(Integer)],Addr(SetAlphabetPriorityHRC),cStdCall);

RegisterProc(nil,MethodNames[172],mtProc,TypeInfo(_T100),[
TypeInfo(HRC),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(Integer)],Addr(SetBoxAlphabetHRC),cStdCall);

RegisterProc(nil,MethodNames[173],mtProc,TypeInfo(_T103),[
TypeInfo(HRC),
TypeInfo(UINT),TypeInfo(Integer)],Addr(SetMaxResultsHRC),cStdCall);

RegisterProc(nil,MethodNames[174],mtProc,TypeInfo(_T105),[
TypeInfo(HRC),
TypeInfo(UINT),TypeInfo(Integer)],Addr(SetWordlistCoercionHRC),cStdCall);

RegisterProc(nil,MethodNames[175],mtProc,TypeInfo(_T106),[
TypeInfo(HRC),
TypeInfo(HWL),TypeInfo(Integer)],Addr(SetWordlistHRC),cStdCall);

RegisterProc(nil,MethodNames[176],mtProc,TypeInfo(_T107),[
TypeInfo(HREC),
TypeInfoPointer,
TypeInfo(UINT),
TypeInfo(HPENDATA),
TypeInfo(UINT),TypeInfo(Integer)],Addr(TrainHREC),cStdCall);

RegisterProc(nil,MethodNames[177],mtProc,TypeInfo(_T108),[
TypeInfo(HREC),
TypeInfo(HRECHOOK),TypeInfo(Integer)],Addr(UnhookResultsHookHREC),cStdCall);

RegisterProc(nil,MethodNames[178],mtProc,TypeInfo(_T109),[
TypeInfo(HWL),
TypeInfo(HFILE),TypeInfo(Integer)],Addr(WriteHWL),cStdCall);

RegisterProc(nil,MethodNames[179],mtProc,TypeInfo(_T111),[
TypeInfo(HREC),TypeInfoPointer],Addr(UninstallRecognizer),cStdCall);

RegisterProc(nil,MethodNames[180],mtProc,TypeInfo(_T113),[
TypeInfo(UINT),TypeInfo(HINKSET)],Addr(CreateInkset),cStdCall);

RegisterProc(nil,MethodNames[181],mtProc,TypeInfo(_T114),[
TypeInfo(HINKSET),TypeInfo(BOOL)],Addr(DestroyInkset),cStdCall);

RegisterProc(nil,MethodNames[182],mtProc,TypeInfo(_T116),[
TypeInfo(HINKSET),TypeInfo(Integer)],Addr(GetInksetIntervalCount),cStdCall);

RegisterProc(nil,MethodNames[183],mtProc,TypeInfo(_T119),[
TypeInfo(hwnd),
TypeInfo(UINT),TypeInfo(Integer)],Addr(DoDefaultPenInput),cStdCall);

RegisterProc(nil,MethodNames[184],mtProc,TypeInfo(_T124),[
TypeInfo(HPCM),TypeInfo(Integer)],Addr(StopInking),cStdCall);

RegisterProc(nil,MethodNames[185],mtProc,TypeInfo(_T125),[
TypeInfo(HPCM),
TypeInfo(UINT),
TypeInfo(Integer),TypeInfo(Integer)],Addr(StopPenInput),cStdCall);

RegisterProc(nil,MethodNames[186],mtProc,TypeInfo(_T128),[TypeInfo(UINT)],Addr(GetPenAppFlags),cStdCall);

RegisterProc(nil,MethodNames[187],mtProc,TypeInfo(_T129),[
TypeInfo(UINT),
TypeInfo(UINT),TypeInfoPointer],Addr(SetPenAppFlags),cStdCall);

RegisterProc(nil,MethodNames[188],mtProc,TypeInfo(_T130),[
TypeInfo(wParam),
TypeInfo(LPARAM),TypeInfo(Longint)],Addr(GetPenMiscInfo),cStdCall);

RegisterProc(nil,MethodNames[189],mtProc,TypeInfo(_T131),[TypeInfo(UINT)],Addr(GetVersionPenWin),cStdCall);

RegisterProc(nil,MethodNames[190],mtProc,TypeInfo(_T132),[
TypeInfo(wParam),
TypeInfo(LPARAM),TypeInfo(Longint)],Addr(SetPenMiscInfo),cStdCall);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'MpAlcB',mtProc,TypeInfo(_T2),[
TypeInfoPointer,
TypeInfo(Word),TypeInfoPointer],Addr(MpAlcB),cRegister)}

{RegisterProc(nil,'SetAlcBitAnsi',mtProc,TypeInfo(_T4),[
TypeInfoPointer,
TypeInfo(Word)],Addr(SetAlcBitAnsi),cRegister)}

{RegisterProc(nil,'ResetAlcBitAnsi',mtProc,TypeInfo(_T5),[
TypeInfoPointer,
TypeInfo(Word)],Addr(ResetAlcBitAnsi),cRegister)}

{RegisterProc(nil,'IsAlcBitAnsi',mtProc,TypeInfo(_T6),[
TypeInfoPointer,
TypeInfo(Word),TypeInfo(Boolean)],Addr(IsAlcBitAnsi),cRegister)}

{RegisterProc(nil,'DrawPenDataFmt',mtProc,TypeInfo(_T7),[
TypeInfo(hdc),
TypeInfoPointer,
TypeInfo(THandle),TypeInfo(Integer)],Addr(DrawPenDataFmt),cRegister)}

{RegisterProc(nil,'FIntervalInInterval',mtProc,TypeInfo(_T13),[
TypeInfoPointer,
TypeInfoPointer,TypeInfo(Boolean)],Addr(FIntervalInInterval),cRegister)}

{RegisterProc(nil,'FIntervalXInterval',mtProc,TypeInfo(_T14),[
TypeInfoPointer,
TypeInfoPointer,TypeInfo(Boolean)],Addr(FIntervalXInterval),cRegister)}

{RegisterProc(nil,'dwDurInterval',mtProc,TypeInfo(_T15),[
TypeInfoPointer,TypeInfo(Integer)],Addr(dwDurInterval),cRegister)}

{RegisterProc(nil,'AddPointsPenData',mtProc,TypeInfo(_T37),[
TypeInfo(HPENDATA),
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,TypeInfo(HPENDATA)],Addr(AddPointsPenData),cStdCall)}

{RegisterProc(nil,'CreatePenDataEx',mtProc,TypeInfo(_T39),[
TypeInfoPointer,
TypeInfo(UINT),
TypeInfo(UINT),
TypeInfo(UINT),TypeInfo(HPENDATA)],Addr(CreatePenDataEx),cStdCall)}

{RegisterProc(nil,'DrawPenDataEx',mtProc,TypeInfo(_T42),[
TypeInfo(hdc),
TypeInfoPointer,
TypeInfo(HPENDATA),
TypeInfo(UINT),
TypeInfo(UINT),
TypeInfo(UINT),
TypeInfo(UINT),
TypeInfo(TFNAnimateProc),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(Integer)],Addr(DrawPenDataEx),cStdCall)}

{RegisterProc(nil,'ExtractPenDataPoints',mtProc,TypeInfo(_T44),[
TypeInfo(HPENDATA),
TypeInfo(UINT),
TypeInfo(UINT),
TypeInfo(UINT),
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(Integer)],Addr(ExtractPenDataPoints),cStdCall)}

{RegisterProc(nil,'GetPenDataInfo',mtProc,TypeInfo(_T47),[
TypeInfo(HPENDATA),
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(GetPenDataInfo),cStdCall)}

{RegisterProc(nil,'GetPointsFromPenData',mtProc,TypeInfo(_T48),[
TypeInfo(HPENDATA),
TypeInfo(UINT),
TypeInfo(UINT),
TypeInfo(UINT),
TypeInfoPointer,TypeInfo(BOOL)],Addr(GetPointsFromPenData),cStdCall)}

{RegisterProc(nil,'HitTestPenData',mtProc,TypeInfo(_T51),[
TypeInfo(HPENDATA),
TypeInfoPointer,
TypeInfo(UINT),
TypeInfoPointer,
TypeInfoPointer,TypeInfo(Integer)],Addr(HitTestPenData),cStdCall)}

{RegisterProc(nil,'InsertPenDataPoints',mtProc,TypeInfo(_T53),[
TypeInfo(HPENDATA),
TypeInfo(UINT),
TypeInfo(UINT),
TypeInfo(UINT),
TypeInfoPointer,
TypeInfoPointer,TypeInfo(Integer)],Addr(InsertPenDataPoints),cStdCall)}

{RegisterProc(nil,'InsertPenDataStroke',mtProc,TypeInfo(_T54),[
TypeInfo(HPENDATA),
TypeInfo(UINT),
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,TypeInfo(Integer)],Addr(InsertPenDataStroke),cStdCall)}

{RegisterProc(nil,'RedisplayPenData',mtProc,TypeInfo(_T59),[
TypeInfo(hdc),
TypeInfo(HPENDATA),
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(Integer),
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(RedisplayPenData),cStdCall)}

{RegisterProc(nil,'ResizePenData',mtProc,TypeInfo(_T61),[
TypeInfo(HPENDATA),
TypeInfoPointer,TypeInfo(BOOL)],Addr(ResizePenData),cStdCall)}

{RegisterProc(nil,'AddPenInputHRC',mtProc,TypeInfo(_T68),[
TypeInfo(HRC),
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(UINT),
TypeInfoPointer,TypeInfo(Integer)],Addr(AddPenInputHRC),cStdCall)}

{RegisterProc(nil,'AddWordsHWL',mtProc,TypeInfo(_T69),[
TypeInfo(HWL),
TypeInfoPChar,
TypeInfo(UINT),TypeInfo(Integer)],Addr(AddWordsHWL),cStdCall)}

{RegisterProc(nil,'CreateHWL',mtProc,TypeInfo(_T72),[
TypeInfo(HREC),
TypeInfoPChar,
TypeInfo(UINT),
TypeInfo(DWORD),TypeInfo(HWL)],Addr(CreateHWL),cStdCall)}

{RegisterProc(nil,'GetBoxResultsHRC',mtProc,TypeInfo(_T85),[
TypeInfo(HRC),
TypeInfo(UINT),
TypeInfo(UINT),
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(BOOL),TypeInfo(Integer)],Addr(GetBoxResultsHRC),cStdCall)}

{RegisterProc(nil,'GetGuideHRC',mtProc,TypeInfo(_T86),[
TypeInfo(HRC),
TypeInfoPointer,
TypeInfoPointer,TypeInfo(Integer)],Addr(GetGuideHRC),cStdCall)}

{RegisterProc(nil,'GetHotspotsHRCRESULT',mtProc,TypeInfo(_T87),[
TypeInfo(HRCRESULT),
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(Integer)],Addr(GetHotspotsHRCRESULT),cStdCall)}

{RegisterProc(nil,'GetInternationalHRC',mtProc,TypeInfo(_T89),[
TypeInfo(HRC),
TypeInfoPointer,
TypeInfoPChar,
TypeInfoPointer,
TypeInfoPointer,TypeInfo(Integer)],Addr(GetInternationalHRC),cStdCall)}

{RegisterProc(nil,'SetGuideHRC',mtProc,TypeInfo(_T101),[
TypeInfo(HRC),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(Integer)],Addr(SetGuideHRC),cStdCall)}

{RegisterProc(nil,'SetInternationalHRC',mtProc,TypeInfo(_T102),[
TypeInfo(HRC),
TypeInfo(UINT),
TypeInfoPChar,
TypeInfo(UINT),
TypeInfo(UINT),TypeInfo(Integer)],Addr(SetInternationalHRC),cStdCall)}

{RegisterProc(nil,'SetResultsHookHREC',mtProc,TypeInfo(_T104),[
TypeInfo(HREC),
TypeInfo(TFNHRCResultHookProc),TypeInfo(HRECHOOK)],Addr(SetResultsHookHREC),cStdCall)}

{RegisterProc(nil,'InstallRecognizer',mtProc,TypeInfo(_T110),[
TypeInfoPChar,TypeInfo(HREC)],Addr(InstallRecognizer),cStdCall)}

{RegisterProc(nil,'AddInksetInterval',mtProc,TypeInfo(_T112),[
TypeInfo(HINKSET),
TypeInfoPointer,TypeInfo(BOOL)],Addr(AddInksetInterval),cStdCall)}

{RegisterProc(nil,'GetInksetInterval',mtProc,TypeInfo(_T115),[
TypeInfo(HINKSET),
TypeInfo(UINT),
TypeInfoPointer,TypeInfo(Integer)],Addr(GetInksetInterval),cStdCall)}

{RegisterProc(nil,'CharacterToSymbol',mtProc,TypeInfo(_T117),[
TypeInfoPChar,
TypeInfo(Integer),
TypeInfoPointer,TypeInfo(Integer)],Addr(CharacterToSymbol),cStdCall)}

{RegisterProc(nil,'SymbolToCharacter',mtProc,TypeInfo(_T118),[
TypeInfoPointer,
TypeInfo(Integer),
TypeInfoPChar,
TypeInfoPointer,TypeInfo(BOOL)],Addr(SymbolToCharacter),cStdCall)}

{RegisterProc(nil,'GetPenInput',mtProc,TypeInfo(_T120),[
TypeInfo(HPCM),
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(UINT),
TypeInfo(UINT),
TypeInfoPointer,TypeInfo(Integer)],Addr(GetPenInput),cStdCall)}

{RegisterProc(nil,'PeekPenInput',mtProc,TypeInfo(_T121),[
TypeInfo(HPCM),
TypeInfo(UINT),
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(Integer)],Addr(PeekPenInput),cStdCall)}

{RegisterProc(nil,'StartInking',mtProc,TypeInfo(_T122),[
TypeInfo(HPCM),
TypeInfo(UINT),
TypeInfoPointer,TypeInfo(Integer)],Addr(StartInking),cStdCall)}

{RegisterProc(nil,'StartPenInput',mtProc,TypeInfo(_T123),[
TypeInfo(hwnd),
TypeInfo(UINT),
TypeInfoPointer,
TypeInfoPointer,TypeInfo(HPCM)],Addr(StartPenInput),cStdCall)}

{RegisterProc(nil,'BoundingRectFromPoints',mtProc,TypeInfo(_T126),[
TypeInfoPointer,
TypeInfo(UINT),
TypeInfoPointer,TypeInfoPointer],Addr(BoundingRectFromPoints),cStdCall)}

{RegisterProc(nil,'DPtoTP',mtProc,TypeInfo(_T127),[
TypeInfoPointer,
TypeInfo(Integer),TypeInfo(BOOL)],Addr(DPtoTP),cStdCall)}

{RegisterProc(nil,'TPtoDP',mtProc,TypeInfo(_T133),[
TypeInfoPointer,
TypeInfo(Integer),TypeInfo(BOOL)],Addr(TPtoDP),cStdCall)}

{RegisterProc(nil,'CorrectWriting',mtProc,TypeInfo(_T134),[
TypeInfo(hwnd),
TypeInfoPChar,
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(CorrectWriting),cStdCall)}

{RegisterProc(nil,'TargetPoints',mtProc,TypeInfo(_T135),[
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(DWORD),
TypeInfo(UINT),
TypeInfoPointer,TypeInfo(Integer)],Addr(TargetPoints),cStdCall)}

{RegisterProc(nil,'KKConvert',mtProc,TypeInfo(_T136),[
TypeInfo(hwnd),
TypeInfo(hwnd),
TypeInfoPChar,
TypeInfo(UINT),
TypeInfoPointer,TypeInfo(BOOL)],Addr(KKConvert),cStdCall)}

__RegisterClasses;
__RegisterConsts0;
__RegisterConsts1;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterConsts1;
__UnregisterProcs;
end.
