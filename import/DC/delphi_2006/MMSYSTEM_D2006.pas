{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit MMSYSTEM_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  Types,
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  MMSystem;
function Convert_MMCKINFOToVariant(var R : _MMCKINFO) : OleVariant;
function ConvertVariantTo_MMCKINFO(const V : OleVariant) : _MMCKINFO;
function Convert_MMIOINFOToVariant(var R : _MMIOINFO) : OleVariant;
function ConvertVariantTo_MMIOINFO(const V : OleVariant) : _MMIOINFO;
function ConvertAUXCAPSToVariant(var R : AUXCAPS) : OleVariant;
function ConvertVariantToAUXCAPS(const V : OleVariant) : AUXCAPS;
function ConvertAUXCAPSAToVariant(var R : AUXCAPSA) : OleVariant;
function ConvertVariantToAUXCAPSA(const V : OleVariant) : AUXCAPSA;
function ConvertAUXCAPSWToVariant(var R : AUXCAPSW) : OleVariant;
function ConvertVariantToAUXCAPSW(const V : OleVariant) : AUXCAPSW;
function ConvertDRVCONFIGINFOToVariant(var R : DRVCONFIGINFO) : OleVariant;
function ConvertVariantToDRVCONFIGINFO(const V : OleVariant) : DRVCONFIGINFO;
function ConvertDRVCONFIGINFOEXToVariant(var R : DRVCONFIGINFOEX) : OleVariant;
function ConvertVariantToDRVCONFIGINFOEX(const V : OleVariant) : DRVCONFIGINFOEX;
function ConvertJOYCAPSToVariant(var R : JOYCAPS) : OleVariant;
function ConvertVariantToJOYCAPS(const V : OleVariant) : JOYCAPS;
function ConvertJOYCAPSAToVariant(var R : JOYCAPSA) : OleVariant;
function ConvertVariantToJOYCAPSA(const V : OleVariant) : JOYCAPSA;
function ConvertJOYCAPSWToVariant(var R : JOYCAPSW) : OleVariant;
function ConvertVariantToJOYCAPSW(const V : OleVariant) : JOYCAPSW;
function ConvertJOYINFOToVariant(var R : JOYINFO) : OleVariant;
function ConvertVariantToJOYINFO(const V : OleVariant) : JOYINFO;
function Convertjoyinfo_tagToVariant(var R : joyinfo_tag) : OleVariant;
function ConvertVariantTojoyinfo_tag(const V : OleVariant) : joyinfo_tag;
function ConvertJOYINFOEXToVariant(var R : JOYINFOEX) : OleVariant;
function ConvertVariantToJOYINFOEX(const V : OleVariant) : JOYINFOEX;
function Convertjoyinfoex_tagToVariant(var R : joyinfoex_tag) : OleVariant;
function ConvertVariantTojoyinfoex_tag(const V : OleVariant) : joyinfoex_tag;
function ConvertMCI_ANIM_OPEN_PARMSToVariant(var R : MCI_ANIM_OPEN_PARMS) : OleVariant;
function ConvertVariantToMCI_ANIM_OPEN_PARMS(const V : OleVariant) : MCI_ANIM_OPEN_PARMS;
function ConvertMCI_ANIM_OPEN_PARMSAToVariant(var R : MCI_ANIM_OPEN_PARMSA) : OleVariant;
function ConvertVariantToMCI_ANIM_OPEN_PARMSA(const V : OleVariant) : MCI_ANIM_OPEN_PARMSA;
function ConvertMCI_ANIM_OPEN_PARMSWToVariant(var R : MCI_ANIM_OPEN_PARMSW) : OleVariant;
function ConvertVariantToMCI_ANIM_OPEN_PARMSW(const V : OleVariant) : MCI_ANIM_OPEN_PARMSW;
function ConvertMCI_ANIM_PLAY_PARMSToVariant(var R : MCI_ANIM_PLAY_PARMS) : OleVariant;
function ConvertVariantToMCI_ANIM_PLAY_PARMS(const V : OleVariant) : MCI_ANIM_PLAY_PARMS;
function ConvertMCI_ANIM_RECT_PARMSToVariant(var R : MCI_ANIM_RECT_PARMS) : OleVariant;
function ConvertVariantToMCI_ANIM_RECT_PARMS(const V : OleVariant) : MCI_ANIM_RECT_PARMS;
function ConvertMCI_ANIM_STEP_PARMSToVariant(var R : MCI_ANIM_STEP_PARMS) : OleVariant;
function ConvertVariantToMCI_ANIM_STEP_PARMS(const V : OleVariant) : MCI_ANIM_STEP_PARMS;
function ConvertMCI_ANIM_UPDATE_PARMSToVariant(var R : MCI_ANIM_UPDATE_PARMS) : OleVariant;
function ConvertVariantToMCI_ANIM_UPDATE_PARMS(const V : OleVariant) : MCI_ANIM_UPDATE_PARMS;
function ConvertMCI_ANIM_WINDOW_PARMSToVariant(var R : MCI_ANIM_WINDOW_PARMS) : OleVariant;
function ConvertVariantToMCI_ANIM_WINDOW_PARMS(const V : OleVariant) : MCI_ANIM_WINDOW_PARMS;
function ConvertMCI_ANIM_WINDOW_PARMSAToVariant(var R : MCI_ANIM_WINDOW_PARMSA) : OleVariant;
function ConvertVariantToMCI_ANIM_WINDOW_PARMSA(const V : OleVariant) : MCI_ANIM_WINDOW_PARMSA;
function ConvertMCI_ANIM_WINDOW_PARMSWToVariant(var R : MCI_ANIM_WINDOW_PARMSW) : OleVariant;
function ConvertVariantToMCI_ANIM_WINDOW_PARMSW(const V : OleVariant) : MCI_ANIM_WINDOW_PARMSW;
function ConvertMCI_BREAK_PARMSToVariant(var R : MCI_BREAK_PARMS) : OleVariant;
function ConvertVariantToMCI_BREAK_PARMS(const V : OleVariant) : MCI_BREAK_PARMS;
function ConvertMCI_GENERIC_PARMSToVariant(var R : MCI_GENERIC_PARMS) : OleVariant;
function ConvertVariantToMCI_GENERIC_PARMS(const V : OleVariant) : MCI_GENERIC_PARMS;
function ConvertMCI_GETDEVCAPS_PARMSToVariant(var R : MCI_GETDEVCAPS_PARMS) : OleVariant;
function ConvertVariantToMCI_GETDEVCAPS_PARMS(const V : OleVariant) : MCI_GETDEVCAPS_PARMS;
function ConvertMCI_INFO_PARMSToVariant(var R : MCI_INFO_PARMS) : OleVariant;
function ConvertVariantToMCI_INFO_PARMS(const V : OleVariant) : MCI_INFO_PARMS;
function ConvertMCI_INFO_PARMSAToVariant(var R : MCI_INFO_PARMSA) : OleVariant;
function ConvertVariantToMCI_INFO_PARMSA(const V : OleVariant) : MCI_INFO_PARMSA;
function ConvertMCI_INFO_PARMSWToVariant(var R : MCI_INFO_PARMSW) : OleVariant;
function ConvertVariantToMCI_INFO_PARMSW(const V : OleVariant) : MCI_INFO_PARMSW;
function ConvertMCI_LOAD_PARMSToVariant(var R : MCI_LOAD_PARMS) : OleVariant;
function ConvertVariantToMCI_LOAD_PARMS(const V : OleVariant) : MCI_LOAD_PARMS;
function ConvertMCI_LOAD_PARMSAToVariant(var R : MCI_LOAD_PARMSA) : OleVariant;
function ConvertVariantToMCI_LOAD_PARMSA(const V : OleVariant) : MCI_LOAD_PARMSA;
function ConvertMCI_LOAD_PARMSWToVariant(var R : MCI_LOAD_PARMSW) : OleVariant;
function ConvertVariantToMCI_LOAD_PARMSW(const V : OleVariant) : MCI_LOAD_PARMSW;
function ConvertMCI_OPEN_PARMSToVariant(var R : MCI_OPEN_PARMS) : OleVariant;
function ConvertVariantToMCI_OPEN_PARMS(const V : OleVariant) : MCI_OPEN_PARMS;
function ConvertMCI_OPEN_PARMSAToVariant(var R : MCI_OPEN_PARMSA) : OleVariant;
function ConvertVariantToMCI_OPEN_PARMSA(const V : OleVariant) : MCI_OPEN_PARMSA;
function ConvertMCI_OPEN_PARMSWToVariant(var R : MCI_OPEN_PARMSW) : OleVariant;
function ConvertVariantToMCI_OPEN_PARMSW(const V : OleVariant) : MCI_OPEN_PARMSW;
function ConvertMCI_OVLY_LOAD_PARMSToVariant(var R : MCI_OVLY_LOAD_PARMS) : OleVariant;
function ConvertVariantToMCI_OVLY_LOAD_PARMS(const V : OleVariant) : MCI_OVLY_LOAD_PARMS;
function ConvertMCI_OVLY_LOAD_PARMSAToVariant(var R : MCI_OVLY_LOAD_PARMSA) : OleVariant;
function ConvertVariantToMCI_OVLY_LOAD_PARMSA(const V : OleVariant) : MCI_OVLY_LOAD_PARMSA;
function ConvertMCI_OVLY_LOAD_PARMSWToVariant(var R : MCI_OVLY_LOAD_PARMSW) : OleVariant;
function ConvertVariantToMCI_OVLY_LOAD_PARMSW(const V : OleVariant) : MCI_OVLY_LOAD_PARMSW;
function ConvertMCI_OVLY_OPEN_PARMSToVariant(var R : MCI_OVLY_OPEN_PARMS) : OleVariant;
function ConvertVariantToMCI_OVLY_OPEN_PARMS(const V : OleVariant) : MCI_OVLY_OPEN_PARMS;
function ConvertMCI_OVLY_OPEN_PARMSAToVariant(var R : MCI_OVLY_OPEN_PARMSA) : OleVariant;
function ConvertVariantToMCI_OVLY_OPEN_PARMSA(const V : OleVariant) : MCI_OVLY_OPEN_PARMSA;
function ConvertMCI_OVLY_OPEN_PARMSWToVariant(var R : MCI_OVLY_OPEN_PARMSW) : OleVariant;
function ConvertVariantToMCI_OVLY_OPEN_PARMSW(const V : OleVariant) : MCI_OVLY_OPEN_PARMSW;
function ConvertMCI_OVLY_RECT_PARMSToVariant(var R : MCI_OVLY_RECT_PARMS) : OleVariant;
function ConvertVariantToMCI_OVLY_RECT_PARMS(const V : OleVariant) : MCI_OVLY_RECT_PARMS;
function ConvertMCI_OVLY_SAVE_PARMSToVariant(var R : MCI_OVLY_SAVE_PARMS) : OleVariant;
function ConvertVariantToMCI_OVLY_SAVE_PARMS(const V : OleVariant) : MCI_OVLY_SAVE_PARMS;
function ConvertMCI_OVLY_SAVE_PARMSAToVariant(var R : MCI_OVLY_SAVE_PARMSA) : OleVariant;
function ConvertVariantToMCI_OVLY_SAVE_PARMSA(const V : OleVariant) : MCI_OVLY_SAVE_PARMSA;
function ConvertMCI_OVLY_SAVE_PARMSWToVariant(var R : MCI_OVLY_SAVE_PARMSW) : OleVariant;
function ConvertVariantToMCI_OVLY_SAVE_PARMSW(const V : OleVariant) : MCI_OVLY_SAVE_PARMSW;
function ConvertMCI_OVLY_WINDOW_PARMSToVariant(var R : MCI_OVLY_WINDOW_PARMS) : OleVariant;
function ConvertVariantToMCI_OVLY_WINDOW_PARMS(const V : OleVariant) : MCI_OVLY_WINDOW_PARMS;
function ConvertMCI_OVLY_WINDOW_PARMSAToVariant(var R : MCI_OVLY_WINDOW_PARMSA) : OleVariant;
function ConvertVariantToMCI_OVLY_WINDOW_PARMSA(const V : OleVariant) : MCI_OVLY_WINDOW_PARMSA;
function ConvertMCI_OVLY_WINDOW_PARMSWToVariant(var R : MCI_OVLY_WINDOW_PARMSW) : OleVariant;
function ConvertVariantToMCI_OVLY_WINDOW_PARMSW(const V : OleVariant) : MCI_OVLY_WINDOW_PARMSW;
function ConvertMCI_PLAY_PARMSToVariant(var R : MCI_PLAY_PARMS) : OleVariant;
function ConvertVariantToMCI_PLAY_PARMS(const V : OleVariant) : MCI_PLAY_PARMS;
function ConvertMCI_RECORD_PARMSToVariant(var R : MCI_RECORD_PARMS) : OleVariant;
function ConvertVariantToMCI_RECORD_PARMS(const V : OleVariant) : MCI_RECORD_PARMS;
function ConvertMCI_SAVE_PARMSToVariant(var R : MCI_SAVE_PARMS) : OleVariant;
function ConvertVariantToMCI_SAVE_PARMS(const V : OleVariant) : MCI_SAVE_PARMS;
function ConvertMCI_SAVE_PARMSAToVariant(var R : MCI_SAVE_PARMSA) : OleVariant;
function ConvertVariantToMCI_SAVE_PARMSA(const V : OleVariant) : MCI_SAVE_PARMSA;
function ConvertMCI_SAVE_PARMSWToVariant(var R : MCI_SAVE_PARMSW) : OleVariant;
function ConvertVariantToMCI_SAVE_PARMSW(const V : OleVariant) : MCI_SAVE_PARMSW;
function ConvertMCI_SEEK_PARMSToVariant(var R : MCI_SEEK_PARMS) : OleVariant;
function ConvertVariantToMCI_SEEK_PARMS(const V : OleVariant) : MCI_SEEK_PARMS;
function ConvertMCI_SEQ_SET_PARMSToVariant(var R : MCI_SEQ_SET_PARMS) : OleVariant;
function ConvertVariantToMCI_SEQ_SET_PARMS(const V : OleVariant) : MCI_SEQ_SET_PARMS;
function ConvertMCI_SET_PARMSToVariant(var R : MCI_SET_PARMS) : OleVariant;
function ConvertVariantToMCI_SET_PARMS(const V : OleVariant) : MCI_SET_PARMS;
function ConvertMCI_STATUS_PARMSToVariant(var R : MCI_STATUS_PARMS) : OleVariant;
function ConvertVariantToMCI_STATUS_PARMS(const V : OleVariant) : MCI_STATUS_PARMS;
function ConvertMCI_SYSINFO_PARMSToVariant(var R : MCI_SYSINFO_PARMS) : OleVariant;
function ConvertVariantToMCI_SYSINFO_PARMS(const V : OleVariant) : MCI_SYSINFO_PARMS;
function ConvertMCI_SYSINFO_PARMSAToVariant(var R : MCI_SYSINFO_PARMSA) : OleVariant;
function ConvertVariantToMCI_SYSINFO_PARMSA(const V : OleVariant) : MCI_SYSINFO_PARMSA;
function ConvertMCI_SYSINFO_PARMSWToVariant(var R : MCI_SYSINFO_PARMSW) : OleVariant;
function ConvertVariantToMCI_SYSINFO_PARMSW(const V : OleVariant) : MCI_SYSINFO_PARMSW;
function ConvertMCI_VD_ESCAPE_PARMSToVariant(var R : MCI_VD_ESCAPE_PARMS) : OleVariant;
function ConvertVariantToMCI_VD_ESCAPE_PARMS(const V : OleVariant) : MCI_VD_ESCAPE_PARMS;
function ConvertMCI_VD_ESCAPE_PARMSAToVariant(var R : MCI_VD_ESCAPE_PARMSA) : OleVariant;
function ConvertVariantToMCI_VD_ESCAPE_PARMSA(const V : OleVariant) : MCI_VD_ESCAPE_PARMSA;
function ConvertMCI_VD_ESCAPE_PARMSWToVariant(var R : MCI_VD_ESCAPE_PARMSW) : OleVariant;
function ConvertVariantToMCI_VD_ESCAPE_PARMSW(const V : OleVariant) : MCI_VD_ESCAPE_PARMSW;
function ConvertMCI_VD_PLAY_PARMSToVariant(var R : MCI_VD_PLAY_PARMS) : OleVariant;
function ConvertVariantToMCI_VD_PLAY_PARMS(const V : OleVariant) : MCI_VD_PLAY_PARMS;
function ConvertMCI_VD_STEP_PARMSToVariant(var R : MCI_VD_STEP_PARMS) : OleVariant;
function ConvertVariantToMCI_VD_STEP_PARMS(const V : OleVariant) : MCI_VD_STEP_PARMS;
function ConvertMCI_WAVE_DELETE_PARMSToVariant(var R : MCI_WAVE_DELETE_PARMS) : OleVariant;
function ConvertVariantToMCI_WAVE_DELETE_PARMS(const V : OleVariant) : MCI_WAVE_DELETE_PARMS;
function ConvertMCI_WAVE_OPEN_PARMSToVariant(var R : MCI_WAVE_OPEN_PARMS) : OleVariant;
function ConvertVariantToMCI_WAVE_OPEN_PARMS(const V : OleVariant) : MCI_WAVE_OPEN_PARMS;
function ConvertMCI_WAVE_OPEN_PARMSAToVariant(var R : MCI_WAVE_OPEN_PARMSA) : OleVariant;
function ConvertVariantToMCI_WAVE_OPEN_PARMSA(const V : OleVariant) : MCI_WAVE_OPEN_PARMSA;
function ConvertMCI_WAVE_OPEN_PARMSWToVariant(var R : MCI_WAVE_OPEN_PARMSW) : OleVariant;
function ConvertVariantToMCI_WAVE_OPEN_PARMSW(const V : OleVariant) : MCI_WAVE_OPEN_PARMSW;
function ConvertMCI_WAVE_SET_PARMSToVariant(var R : MCI_WAVE_SET_PARMS) : OleVariant;
function ConvertVariantToMCI_WAVE_SET_PARMS(const V : OleVariant) : MCI_WAVE_SET_PARMS;
function ConvertMIDIEVENTToVariant(var R : MIDIEVENT) : OleVariant;
function ConvertVariantToMIDIEVENT(const V : OleVariant) : MIDIEVENT;
function Convertmidievent_tagToVariant(var R : midievent_tag) : OleVariant;
function ConvertVariantTomidievent_tag(const V : OleVariant) : midievent_tag;
function ConvertMIDIHDRToVariant(var R : MIDIHDR) : OleVariant;
function ConvertVariantToMIDIHDR(const V : OleVariant) : MIDIHDR;
function Convertmidihdr_tagToVariant(var R : midihdr_tag) : OleVariant;
function ConvertVariantTomidihdr_tag(const V : OleVariant) : midihdr_tag;
function ConvertMIDIINCAPSToVariant(var R : MIDIINCAPS) : OleVariant;
function ConvertVariantToMIDIINCAPS(const V : OleVariant) : MIDIINCAPS;
function ConvertMIDIINCAPSAToVariant(var R : MIDIINCAPSA) : OleVariant;
function ConvertVariantToMIDIINCAPSA(const V : OleVariant) : MIDIINCAPSA;
function ConvertMIDIINCAPSWToVariant(var R : MIDIINCAPSW) : OleVariant;
function ConvertVariantToMIDIINCAPSW(const V : OleVariant) : MIDIINCAPSW;
function ConvertMIDIOUTCAPSToVariant(var R : MIDIOUTCAPS) : OleVariant;
function ConvertVariantToMIDIOUTCAPS(const V : OleVariant) : MIDIOUTCAPS;
function ConvertMIDIOUTCAPSAToVariant(var R : MIDIOUTCAPSA) : OleVariant;
function ConvertVariantToMIDIOUTCAPSA(const V : OleVariant) : MIDIOUTCAPSA;
function ConvertMIDIOUTCAPSWToVariant(var R : MIDIOUTCAPSW) : OleVariant;
function ConvertVariantToMIDIOUTCAPSW(const V : OleVariant) : MIDIOUTCAPSW;
function ConvertMIDIPROPTEMPOToVariant(var R : MIDIPROPTEMPO) : OleVariant;
function ConvertVariantToMIDIPROPTEMPO(const V : OleVariant) : MIDIPROPTEMPO;
function Convertmidiproptempo_tagToVariant(var R : midiproptempo_tag) : OleVariant;
function ConvertVariantTomidiproptempo_tag(const V : OleVariant) : midiproptempo_tag;
function ConvertMIDIPROPTIMEDIVToVariant(var R : MIDIPROPTIMEDIV) : OleVariant;
function ConvertVariantToMIDIPROPTIMEDIV(const V : OleVariant) : MIDIPROPTIMEDIV;
function Convertmidiproptimediv_tagToVariant(var R : midiproptimediv_tag) : OleVariant;
function ConvertVariantTomidiproptimediv_tag(const V : OleVariant) : midiproptimediv_tag;
function ConvertMIDISTRMBUFFVERToVariant(var R : MIDISTRMBUFFVER) : OleVariant;
function ConvertVariantToMIDISTRMBUFFVER(const V : OleVariant) : MIDISTRMBUFFVER;
function Convertmidistrmbuffver_tagToVariant(var R : midistrmbuffver_tag) : OleVariant;
function ConvertVariantTomidistrmbuffver_tag(const V : OleVariant) : midistrmbuffver_tag;
function ConvertMIXERCAPSToVariant(var R : MIXERCAPS) : OleVariant;
function ConvertVariantToMIXERCAPS(const V : OleVariant) : MIXERCAPS;
function ConvertMIXERCAPSAToVariant(var R : MIXERCAPSA) : OleVariant;
function ConvertVariantToMIXERCAPSA(const V : OleVariant) : MIXERCAPSA;
function ConvertMIXERCAPSWToVariant(var R : MIXERCAPSW) : OleVariant;
function ConvertVariantToMIXERCAPSW(const V : OleVariant) : MIXERCAPSW;
function ConvertMIXERCONTROLDETAILS_BOOLEANToVariant(var R : MIXERCONTROLDETAILS_BOOLEAN) : OleVariant;
function ConvertVariantToMIXERCONTROLDETAILS_BOOLEAN(const V : OleVariant) : MIXERCONTROLDETAILS_BOOLEAN;
function ConvertMIXERCONTROLDETAILS_LISTTEXTToVariant(var R : MIXERCONTROLDETAILS_LISTTEXT) : OleVariant;
function ConvertVariantToMIXERCONTROLDETAILS_LISTTEXT(const V : OleVariant) : MIXERCONTROLDETAILS_LISTTEXT;
function ConvertMIXERCONTROLDETAILS_LISTTEXTAToVariant(var R : MIXERCONTROLDETAILS_LISTTEXTA) : OleVariant;
function ConvertVariantToMIXERCONTROLDETAILS_LISTTEXTA(const V : OleVariant) : MIXERCONTROLDETAILS_LISTTEXTA;
function ConvertMIXERCONTROLDETAILS_LISTTEXTWToVariant(var R : MIXERCONTROLDETAILS_LISTTEXTW) : OleVariant;
function ConvertVariantToMIXERCONTROLDETAILS_LISTTEXTW(const V : OleVariant) : MIXERCONTROLDETAILS_LISTTEXTW;
function ConvertMIXERCONTROLDETAILS_SIGNEDToVariant(var R : MIXERCONTROLDETAILS_SIGNED) : OleVariant;
function ConvertVariantToMIXERCONTROLDETAILS_SIGNED(const V : OleVariant) : MIXERCONTROLDETAILS_SIGNED;
function ConvertMIXERCONTROLDETAILS_UNSIGNEDToVariant(var R : MIXERCONTROLDETAILS_UNSIGNED) : OleVariant;
function ConvertVariantToMIXERCONTROLDETAILS_UNSIGNED(const V : OleVariant) : MIXERCONTROLDETAILS_UNSIGNED;
function ConvertMIXERLINEToVariant(var R : MIXERLINE) : OleVariant;
function ConvertVariantToMIXERLINE(const V : OleVariant) : MIXERLINE;
function ConvertMIXERLINEAToVariant(var R : MIXERLINEA) : OleVariant;
function ConvertVariantToMIXERLINEA(const V : OleVariant) : MIXERLINEA;
function ConvertMIXERLINECONTROLSToVariant(var R : MIXERLINECONTROLS) : OleVariant;
function ConvertVariantToMIXERLINECONTROLS(const V : OleVariant) : MIXERLINECONTROLS;
function ConvertMIXERLINECONTROLSAToVariant(var R : MIXERLINECONTROLSA) : OleVariant;
function ConvertVariantToMIXERLINECONTROLSA(const V : OleVariant) : MIXERLINECONTROLSA;
function ConvertMIXERLINECONTROLSWToVariant(var R : MIXERLINECONTROLSW) : OleVariant;
function ConvertVariantToMIXERLINECONTROLSW(const V : OleVariant) : MIXERLINECONTROLSW;
function ConvertMIXERLINEWToVariant(var R : MIXERLINEW) : OleVariant;
function ConvertVariantToMIXERLINEW(const V : OleVariant) : MIXERLINEW;
function ConvertMMCKINFOToVariant(var R : MMCKINFO) : OleVariant;
function ConvertVariantToMMCKINFO(const V : OleVariant) : MMCKINFO;
function ConvertMMIOINFOToVariant(var R : MMIOINFO) : OleVariant;
function ConvertVariantToMMIOINFO(const V : OleVariant) : MMIOINFO;
function ConvertMMTIMEToVariant(var R : MMTIME) : OleVariant;
function ConvertVariantToMMTIME(const V : OleVariant) : MMTIME;
function Convertmmtime_tagToVariant(var R : mmtime_tag) : OleVariant;
function ConvertVariantTommtime_tag(const V : OleVariant) : mmtime_tag;
function ConvertPCMWAVEFORMATToVariant(var R : PCMWAVEFORMAT) : OleVariant;
function ConvertVariantToPCMWAVEFORMAT(const V : OleVariant) : PCMWAVEFORMAT;
function Convertpcmwaveformat_tagToVariant(var R : pcmwaveformat_tag) : OleVariant;
function ConvertVariantTopcmwaveformat_tag(const V : OleVariant) : pcmwaveformat_tag;
function ConverttagAUXCAPSToVariant(var R : tagAUXCAPS) : OleVariant;
function ConvertVariantTotagAUXCAPS(const V : OleVariant) : tagAUXCAPS;
function ConverttagAUXCAPSAToVariant(var R : tagAUXCAPSA) : OleVariant;
function ConvertVariantTotagAUXCAPSA(const V : OleVariant) : tagAUXCAPSA;
function ConverttagAUXCAPSWToVariant(var R : tagAUXCAPSW) : OleVariant;
function ConvertVariantTotagAUXCAPSW(const V : OleVariant) : tagAUXCAPSW;
function ConverttagDRVCONFIGINFOToVariant(var R : tagDRVCONFIGINFO) : OleVariant;
function ConvertVariantTotagDRVCONFIGINFO(const V : OleVariant) : tagDRVCONFIGINFO;
function ConverttagJOYCAPSToVariant(var R : tagJOYCAPS) : OleVariant;
function ConvertVariantTotagJOYCAPS(const V : OleVariant) : tagJOYCAPS;
function ConverttagJOYCAPSAToVariant(var R : tagJOYCAPSA) : OleVariant;
function ConvertVariantTotagJOYCAPSA(const V : OleVariant) : tagJOYCAPSA;
function ConverttagJOYCAPSWToVariant(var R : tagJOYCAPSW) : OleVariant;
function ConvertVariantTotagJOYCAPSW(const V : OleVariant) : tagJOYCAPSW;
function ConverttagMCI_ANIM_OPEN_PARMSToVariant(var R : tagMCI_ANIM_OPEN_PARMS) : OleVariant;
function ConvertVariantTotagMCI_ANIM_OPEN_PARMS(const V : OleVariant) : tagMCI_ANIM_OPEN_PARMS;
function ConverttagMCI_ANIM_OPEN_PARMSAToVariant(var R : tagMCI_ANIM_OPEN_PARMSA) : OleVariant;
function ConvertVariantTotagMCI_ANIM_OPEN_PARMSA(const V : OleVariant) : tagMCI_ANIM_OPEN_PARMSA;
function ConverttagMCI_ANIM_OPEN_PARMSWToVariant(var R : tagMCI_ANIM_OPEN_PARMSW) : OleVariant;
function ConvertVariantTotagMCI_ANIM_OPEN_PARMSW(const V : OleVariant) : tagMCI_ANIM_OPEN_PARMSW;
function ConverttagMCI_ANIM_PLAY_PARMSToVariant(var R : tagMCI_ANIM_PLAY_PARMS) : OleVariant;
function ConvertVariantTotagMCI_ANIM_PLAY_PARMS(const V : OleVariant) : tagMCI_ANIM_PLAY_PARMS;
function ConverttagMCI_ANIM_RECT_PARMSToVariant(var R : tagMCI_ANIM_RECT_PARMS) : OleVariant;
function ConvertVariantTotagMCI_ANIM_RECT_PARMS(const V : OleVariant) : tagMCI_ANIM_RECT_PARMS;
function ConverttagMCI_ANIM_STEP_PARMSToVariant(var R : tagMCI_ANIM_STEP_PARMS) : OleVariant;
function ConvertVariantTotagMCI_ANIM_STEP_PARMS(const V : OleVariant) : tagMCI_ANIM_STEP_PARMS;
function ConverttagMCI_ANIM_UPDATE_PARMSToVariant(var R : tagMCI_ANIM_UPDATE_PARMS) : OleVariant;
function ConvertVariantTotagMCI_ANIM_UPDATE_PARMS(const V : OleVariant) : tagMCI_ANIM_UPDATE_PARMS;
function ConverttagMCI_ANIM_WINDOW_PARMSToVariant(var R : tagMCI_ANIM_WINDOW_PARMS) : OleVariant;
function ConvertVariantTotagMCI_ANIM_WINDOW_PARMS(const V : OleVariant) : tagMCI_ANIM_WINDOW_PARMS;
function ConverttagMCI_ANIM_WINDOW_PARMSAToVariant(var R : tagMCI_ANIM_WINDOW_PARMSA) : OleVariant;
function ConvertVariantTotagMCI_ANIM_WINDOW_PARMSA(const V : OleVariant) : tagMCI_ANIM_WINDOW_PARMSA;
function ConverttagMCI_ANIM_WINDOW_PARMSWToVariant(var R : tagMCI_ANIM_WINDOW_PARMSW) : OleVariant;
function ConvertVariantTotagMCI_ANIM_WINDOW_PARMSW(const V : OleVariant) : tagMCI_ANIM_WINDOW_PARMSW;
function ConverttagMCI_BREAK_PARMSToVariant(var R : tagMCI_BREAK_PARMS) : OleVariant;
function ConvertVariantTotagMCI_BREAK_PARMS(const V : OleVariant) : tagMCI_BREAK_PARMS;
function ConverttagMCI_GENERIC_PARMSToVariant(var R : tagMCI_GENERIC_PARMS) : OleVariant;
function ConvertVariantTotagMCI_GENERIC_PARMS(const V : OleVariant) : tagMCI_GENERIC_PARMS;
function ConverttagMCI_GETDEVCAPS_PARMSToVariant(var R : tagMCI_GETDEVCAPS_PARMS) : OleVariant;
function ConvertVariantTotagMCI_GETDEVCAPS_PARMS(const V : OleVariant) : tagMCI_GETDEVCAPS_PARMS;
function ConverttagMCI_INFO_PARMSToVariant(var R : tagMCI_INFO_PARMS) : OleVariant;
function ConvertVariantTotagMCI_INFO_PARMS(const V : OleVariant) : tagMCI_INFO_PARMS;
function ConverttagMCI_INFO_PARMSAToVariant(var R : tagMCI_INFO_PARMSA) : OleVariant;
function ConvertVariantTotagMCI_INFO_PARMSA(const V : OleVariant) : tagMCI_INFO_PARMSA;
function ConverttagMCI_INFO_PARMSWToVariant(var R : tagMCI_INFO_PARMSW) : OleVariant;
function ConvertVariantTotagMCI_INFO_PARMSW(const V : OleVariant) : tagMCI_INFO_PARMSW;
function ConverttagMCI_LOAD_PARMSToVariant(var R : tagMCI_LOAD_PARMS) : OleVariant;
function ConvertVariantTotagMCI_LOAD_PARMS(const V : OleVariant) : tagMCI_LOAD_PARMS;
function ConverttagMCI_LOAD_PARMSAToVariant(var R : tagMCI_LOAD_PARMSA) : OleVariant;
function ConvertVariantTotagMCI_LOAD_PARMSA(const V : OleVariant) : tagMCI_LOAD_PARMSA;
function ConverttagMCI_LOAD_PARMSWToVariant(var R : tagMCI_LOAD_PARMSW) : OleVariant;
function ConvertVariantTotagMCI_LOAD_PARMSW(const V : OleVariant) : tagMCI_LOAD_PARMSW;
function ConverttagMCI_OPEN_PARMSToVariant(var R : tagMCI_OPEN_PARMS) : OleVariant;
function ConvertVariantTotagMCI_OPEN_PARMS(const V : OleVariant) : tagMCI_OPEN_PARMS;
function ConverttagMCI_OPEN_PARMSAToVariant(var R : tagMCI_OPEN_PARMSA) : OleVariant;
function ConvertVariantTotagMCI_OPEN_PARMSA(const V : OleVariant) : tagMCI_OPEN_PARMSA;
function ConverttagMCI_OPEN_PARMSWToVariant(var R : tagMCI_OPEN_PARMSW) : OleVariant;
function ConvertVariantTotagMCI_OPEN_PARMSW(const V : OleVariant) : tagMCI_OPEN_PARMSW;
function ConverttagMCI_OVLY_LOAD_PARMSToVariant(var R : tagMCI_OVLY_LOAD_PARMS) : OleVariant;
function ConvertVariantTotagMCI_OVLY_LOAD_PARMS(const V : OleVariant) : tagMCI_OVLY_LOAD_PARMS;
function ConverttagMCI_OVLY_LOAD_PARMSAToVariant(var R : tagMCI_OVLY_LOAD_PARMSA) : OleVariant;
function ConvertVariantTotagMCI_OVLY_LOAD_PARMSA(const V : OleVariant) : tagMCI_OVLY_LOAD_PARMSA;
function ConverttagMCI_OVLY_LOAD_PARMSWToVariant(var R : tagMCI_OVLY_LOAD_PARMSW) : OleVariant;
function ConvertVariantTotagMCI_OVLY_LOAD_PARMSW(const V : OleVariant) : tagMCI_OVLY_LOAD_PARMSW;
function ConverttagMCI_OVLY_OPEN_PARMSToVariant(var R : tagMCI_OVLY_OPEN_PARMS) : OleVariant;
function ConvertVariantTotagMCI_OVLY_OPEN_PARMS(const V : OleVariant) : tagMCI_OVLY_OPEN_PARMS;
function ConverttagMCI_OVLY_OPEN_PARMSAToVariant(var R : tagMCI_OVLY_OPEN_PARMSA) : OleVariant;
function ConvertVariantTotagMCI_OVLY_OPEN_PARMSA(const V : OleVariant) : tagMCI_OVLY_OPEN_PARMSA;
function ConverttagMCI_OVLY_OPEN_PARMSWToVariant(var R : tagMCI_OVLY_OPEN_PARMSW) : OleVariant;
function ConvertVariantTotagMCI_OVLY_OPEN_PARMSW(const V : OleVariant) : tagMCI_OVLY_OPEN_PARMSW;
function ConverttagMCI_OVLY_RECT_PARMSToVariant(var R : tagMCI_OVLY_RECT_PARMS) : OleVariant;
function ConvertVariantTotagMCI_OVLY_RECT_PARMS(const V : OleVariant) : tagMCI_OVLY_RECT_PARMS;
function ConverttagMCI_OVLY_SAVE_PARMSToVariant(var R : tagMCI_OVLY_SAVE_PARMS) : OleVariant;
function ConvertVariantTotagMCI_OVLY_SAVE_PARMS(const V : OleVariant) : tagMCI_OVLY_SAVE_PARMS;
function ConverttagMCI_OVLY_SAVE_PARMSAToVariant(var R : tagMCI_OVLY_SAVE_PARMSA) : OleVariant;
function ConvertVariantTotagMCI_OVLY_SAVE_PARMSA(const V : OleVariant) : tagMCI_OVLY_SAVE_PARMSA;
function ConverttagMCI_OVLY_SAVE_PARMSWToVariant(var R : tagMCI_OVLY_SAVE_PARMSW) : OleVariant;
function ConvertVariantTotagMCI_OVLY_SAVE_PARMSW(const V : OleVariant) : tagMCI_OVLY_SAVE_PARMSW;
function ConverttagMCI_OVLY_WINDOW_PARMSToVariant(var R : tagMCI_OVLY_WINDOW_PARMS) : OleVariant;
function ConvertVariantTotagMCI_OVLY_WINDOW_PARMS(const V : OleVariant) : tagMCI_OVLY_WINDOW_PARMS;
function ConverttagMCI_OVLY_WINDOW_PARMSAToVariant(var R : tagMCI_OVLY_WINDOW_PARMSA) : OleVariant;
function ConvertVariantTotagMCI_OVLY_WINDOW_PARMSA(const V : OleVariant) : tagMCI_OVLY_WINDOW_PARMSA;
function ConverttagMCI_OVLY_WINDOW_PARMSWToVariant(var R : tagMCI_OVLY_WINDOW_PARMSW) : OleVariant;
function ConvertVariantTotagMCI_OVLY_WINDOW_PARMSW(const V : OleVariant) : tagMCI_OVLY_WINDOW_PARMSW;
function ConverttagMCI_PLAY_PARMSToVariant(var R : tagMCI_PLAY_PARMS) : OleVariant;
function ConvertVariantTotagMCI_PLAY_PARMS(const V : OleVariant) : tagMCI_PLAY_PARMS;
function ConverttagMCI_RECORD_PARMSToVariant(var R : tagMCI_RECORD_PARMS) : OleVariant;
function ConvertVariantTotagMCI_RECORD_PARMS(const V : OleVariant) : tagMCI_RECORD_PARMS;
function ConverttagMCI_SEEK_PARMSToVariant(var R : tagMCI_SEEK_PARMS) : OleVariant;
function ConvertVariantTotagMCI_SEEK_PARMS(const V : OleVariant) : tagMCI_SEEK_PARMS;
function ConverttagMCI_SEQ_SET_PARMSToVariant(var R : tagMCI_SEQ_SET_PARMS) : OleVariant;
function ConvertVariantTotagMCI_SEQ_SET_PARMS(const V : OleVariant) : tagMCI_SEQ_SET_PARMS;
function ConverttagMCI_SET_PARMSToVariant(var R : tagMCI_SET_PARMS) : OleVariant;
function ConvertVariantTotagMCI_SET_PARMS(const V : OleVariant) : tagMCI_SET_PARMS;
function ConverttagMCI_STATUS_PARMSToVariant(var R : tagMCI_STATUS_PARMS) : OleVariant;
function ConvertVariantTotagMCI_STATUS_PARMS(const V : OleVariant) : tagMCI_STATUS_PARMS;
function ConverttagMCI_SYSINFO_PARMSToVariant(var R : tagMCI_SYSINFO_PARMS) : OleVariant;
function ConvertVariantTotagMCI_SYSINFO_PARMS(const V : OleVariant) : tagMCI_SYSINFO_PARMS;
function ConverttagMCI_SYSINFO_PARMSAToVariant(var R : tagMCI_SYSINFO_PARMSA) : OleVariant;
function ConvertVariantTotagMCI_SYSINFO_PARMSA(const V : OleVariant) : tagMCI_SYSINFO_PARMSA;
function ConverttagMCI_SYSINFO_PARMSWToVariant(var R : tagMCI_SYSINFO_PARMSW) : OleVariant;
function ConvertVariantTotagMCI_SYSINFO_PARMSW(const V : OleVariant) : tagMCI_SYSINFO_PARMSW;
function ConverttagMCI_VD_ESCAPE_PARMSToVariant(var R : tagMCI_VD_ESCAPE_PARMS) : OleVariant;
function ConvertVariantTotagMCI_VD_ESCAPE_PARMS(const V : OleVariant) : tagMCI_VD_ESCAPE_PARMS;
function ConverttagMCI_VD_ESCAPE_PARMSAToVariant(var R : tagMCI_VD_ESCAPE_PARMSA) : OleVariant;
function ConvertVariantTotagMCI_VD_ESCAPE_PARMSA(const V : OleVariant) : tagMCI_VD_ESCAPE_PARMSA;
function ConverttagMCI_VD_ESCAPE_PARMSWToVariant(var R : tagMCI_VD_ESCAPE_PARMSW) : OleVariant;
function ConvertVariantTotagMCI_VD_ESCAPE_PARMSW(const V : OleVariant) : tagMCI_VD_ESCAPE_PARMSW;
function ConverttagMCI_VD_PLAY_PARMSToVariant(var R : tagMCI_VD_PLAY_PARMS) : OleVariant;
function ConvertVariantTotagMCI_VD_PLAY_PARMS(const V : OleVariant) : tagMCI_VD_PLAY_PARMS;
function ConverttagMCI_VD_STEP_PARMSToVariant(var R : tagMCI_VD_STEP_PARMS) : OleVariant;
function ConvertVariantTotagMCI_VD_STEP_PARMS(const V : OleVariant) : tagMCI_VD_STEP_PARMS;
function ConverttagMCI_WAVE_DELETE_PARMSToVariant(var R : tagMCI_WAVE_DELETE_PARMS) : OleVariant;
function ConvertVariantTotagMCI_WAVE_DELETE_PARMS(const V : OleVariant) : tagMCI_WAVE_DELETE_PARMS;
function ConverttagMCI_WAVE_OPEN_PARMSToVariant(var R : tagMCI_WAVE_OPEN_PARMS) : OleVariant;
function ConvertVariantTotagMCI_WAVE_OPEN_PARMS(const V : OleVariant) : tagMCI_WAVE_OPEN_PARMS;
function ConverttagMCI_WAVE_OPEN_PARMSAToVariant(var R : tagMCI_WAVE_OPEN_PARMSA) : OleVariant;
function ConvertVariantTotagMCI_WAVE_OPEN_PARMSA(const V : OleVariant) : tagMCI_WAVE_OPEN_PARMSA;
function ConverttagMCI_WAVE_OPEN_PARMSWToVariant(var R : tagMCI_WAVE_OPEN_PARMSW) : OleVariant;
function ConvertVariantTotagMCI_WAVE_OPEN_PARMSW(const V : OleVariant) : tagMCI_WAVE_OPEN_PARMSW;
function ConverttagMCI_WAVE_SET_PARMSToVariant(var R : tagMCI_WAVE_SET_PARMS) : OleVariant;
function ConvertVariantTotagMCI_WAVE_SET_PARMS(const V : OleVariant) : tagMCI_WAVE_SET_PARMS;
function ConverttagMIDIINCAPSToVariant(var R : tagMIDIINCAPS) : OleVariant;
function ConvertVariantTotagMIDIINCAPS(const V : OleVariant) : tagMIDIINCAPS;
function ConverttagMIDIINCAPSAToVariant(var R : tagMIDIINCAPSA) : OleVariant;
function ConvertVariantTotagMIDIINCAPSA(const V : OleVariant) : tagMIDIINCAPSA;
function ConverttagMIDIINCAPSWToVariant(var R : tagMIDIINCAPSW) : OleVariant;
function ConvertVariantTotagMIDIINCAPSW(const V : OleVariant) : tagMIDIINCAPSW;
function ConverttagMIDIOUTCAPSToVariant(var R : tagMIDIOUTCAPS) : OleVariant;
function ConvertVariantTotagMIDIOUTCAPS(const V : OleVariant) : tagMIDIOUTCAPS;
function ConverttagMIDIOUTCAPSAToVariant(var R : tagMIDIOUTCAPSA) : OleVariant;
function ConvertVariantTotagMIDIOUTCAPSA(const V : OleVariant) : tagMIDIOUTCAPSA;
function ConverttagMIDIOUTCAPSWToVariant(var R : tagMIDIOUTCAPSW) : OleVariant;
function ConvertVariantTotagMIDIOUTCAPSW(const V : OleVariant) : tagMIDIOUTCAPSW;
function ConverttagMIXERCAPSToVariant(var R : tagMIXERCAPS) : OleVariant;
function ConvertVariantTotagMIXERCAPS(const V : OleVariant) : tagMIXERCAPS;
function ConverttagMIXERCAPSAToVariant(var R : tagMIXERCAPSA) : OleVariant;
function ConvertVariantTotagMIXERCAPSA(const V : OleVariant) : tagMIXERCAPSA;
function ConverttagMIXERCAPSWToVariant(var R : tagMIXERCAPSW) : OleVariant;
function ConvertVariantTotagMIXERCAPSW(const V : OleVariant) : tagMIXERCAPSW;
function ConverttagMIXERCONTROLDETAILS_LISTTEXTToVariant(var R : tagMIXERCONTROLDETAILS_LISTTEXT) : OleVariant;
function ConvertVariantTotagMIXERCONTROLDETAILS_LISTTEXT(const V : OleVariant) : tagMIXERCONTROLDETAILS_LISTTEXT;
function ConverttagMIXERCONTROLDETAILS_LISTTEXTAToVariant(var R : tagMIXERCONTROLDETAILS_LISTTEXTA) : OleVariant;
function ConvertVariantTotagMIXERCONTROLDETAILS_LISTTEXTA(const V : OleVariant) : tagMIXERCONTROLDETAILS_LISTTEXTA;
function ConverttagMIXERCONTROLDETAILS_LISTTEXTWToVariant(var R : tagMIXERCONTROLDETAILS_LISTTEXTW) : OleVariant;
function ConvertVariantTotagMIXERCONTROLDETAILS_LISTTEXTW(const V : OleVariant) : tagMIXERCONTROLDETAILS_LISTTEXTW;
function ConverttagMIXERLINEToVariant(var R : tagMIXERLINE) : OleVariant;
function ConvertVariantTotagMIXERLINE(const V : OleVariant) : tagMIXERLINE;
function ConverttagMIXERLINEAToVariant(var R : tagMIXERLINEA) : OleVariant;
function ConvertVariantTotagMIXERLINEA(const V : OleVariant) : tagMIXERLINEA;
function ConverttagMIXERLINECONTROLSToVariant(var R : tagMIXERLINECONTROLS) : OleVariant;
function ConvertVariantTotagMIXERLINECONTROLS(const V : OleVariant) : tagMIXERLINECONTROLS;
function ConverttagMIXERLINECONTROLSAToVariant(var R : tagMIXERLINECONTROLSA) : OleVariant;
function ConvertVariantTotagMIXERLINECONTROLSA(const V : OleVariant) : tagMIXERLINECONTROLSA;
function ConverttagMIXERLINECONTROLSWToVariant(var R : tagMIXERLINECONTROLSW) : OleVariant;
function ConvertVariantTotagMIXERLINECONTROLSW(const V : OleVariant) : tagMIXERLINECONTROLSW;
function ConverttagMIXERLINEWToVariant(var R : tagMIXERLINEW) : OleVariant;
function ConvertVariantTotagMIXERLINEW(const V : OleVariant) : tagMIXERLINEW;
function ConverttagWAVEINCAPSToVariant(var R : tagWAVEINCAPS) : OleVariant;
function ConvertVariantTotagWAVEINCAPS(const V : OleVariant) : tagWAVEINCAPS;
function ConverttagWAVEINCAPSAToVariant(var R : tagWAVEINCAPSA) : OleVariant;
function ConvertVariantTotagWAVEINCAPSA(const V : OleVariant) : tagWAVEINCAPSA;
function ConverttagWAVEINCAPSWToVariant(var R : tagWAVEINCAPSW) : OleVariant;
function ConvertVariantTotagWAVEINCAPSW(const V : OleVariant) : tagWAVEINCAPSW;
function ConverttagWAVEOUTCAPSToVariant(var R : tagWAVEOUTCAPS) : OleVariant;
function ConvertVariantTotagWAVEOUTCAPS(const V : OleVariant) : tagWAVEOUTCAPS;
function ConverttagWAVEOUTCAPSAToVariant(var R : tagWAVEOUTCAPSA) : OleVariant;
function ConvertVariantTotagWAVEOUTCAPSA(const V : OleVariant) : tagWAVEOUTCAPSA;
function ConverttagWAVEOUTCAPSWToVariant(var R : tagWAVEOUTCAPSW) : OleVariant;
function ConvertVariantTotagWAVEOUTCAPSW(const V : OleVariant) : tagWAVEOUTCAPSW;
function ConvertTAuxCapsToVariant(var R : TAuxCaps) : OleVariant;
function ConvertVariantToTAuxCaps(const V : OleVariant) : TAuxCaps;
function ConvertTAuxCapsAToVariant(var R : TAuxCapsA) : OleVariant;
function ConvertVariantToTAuxCapsA(const V : OleVariant) : TAuxCapsA;
function ConvertTAuxCapsWToVariant(var R : TAuxCapsW) : OleVariant;
function ConvertVariantToTAuxCapsW(const V : OleVariant) : TAuxCapsW;
function ConvertTDrvConfigInfoToVariant(var R : TDrvConfigInfo) : OleVariant;
function ConvertVariantToTDrvConfigInfo(const V : OleVariant) : TDrvConfigInfo;
function ConvertTDrvConfigInfoExToVariant(var R : TDrvConfigInfoEx) : OleVariant;
function ConvertVariantToTDrvConfigInfoEx(const V : OleVariant) : TDrvConfigInfoEx;
function ConvertTIMECAPSToVariant(var R : TIMECAPS) : OleVariant;
function ConvertVariantToTIMECAPS(const V : OleVariant) : TIMECAPS;
function Converttimecaps_tagToVariant(var R : timecaps_tag) : OleVariant;
function ConvertVariantTotimecaps_tag(const V : OleVariant) : timecaps_tag;
function ConvertTJoyCapsToVariant(var R : TJoyCaps) : OleVariant;
function ConvertVariantToTJoyCaps(const V : OleVariant) : TJoyCaps;
function ConvertTJoyCapsAToVariant(var R : TJoyCapsA) : OleVariant;
function ConvertVariantToTJoyCapsA(const V : OleVariant) : TJoyCapsA;
function ConvertTJoyCapsWToVariant(var R : TJoyCapsW) : OleVariant;
function ConvertVariantToTJoyCapsW(const V : OleVariant) : TJoyCapsW;
function ConvertTJoyInfoToVariant(var R : TJoyInfo) : OleVariant;
function ConvertVariantToTJoyInfo(const V : OleVariant) : TJoyInfo;
function ConvertTJoyInfoExToVariant(var R : TJoyInfoEx) : OleVariant;
function ConvertVariantToTJoyInfoEx(const V : OleVariant) : TJoyInfoEx;
function ConvertTMCI_Anim_Open_ParmsToVariant(var R : TMCI_Anim_Open_Parms) : OleVariant;
function ConvertVariantToTMCI_Anim_Open_Parms(const V : OleVariant) : TMCI_Anim_Open_Parms;
function ConvertTMCI_Anim_Open_ParmsAToVariant(var R : TMCI_Anim_Open_ParmsA) : OleVariant;
function ConvertVariantToTMCI_Anim_Open_ParmsA(const V : OleVariant) : TMCI_Anim_Open_ParmsA;
function ConvertTMCI_Anim_Open_ParmsWToVariant(var R : TMCI_Anim_Open_ParmsW) : OleVariant;
function ConvertVariantToTMCI_Anim_Open_ParmsW(const V : OleVariant) : TMCI_Anim_Open_ParmsW;
function ConvertTMCI_Anim_Play_ParmsToVariant(var R : TMCI_Anim_Play_Parms) : OleVariant;
function ConvertVariantToTMCI_Anim_Play_Parms(const V : OleVariant) : TMCI_Anim_Play_Parms;
function ConvertTMCI_Anim_Rect_ParmsToVariant(var R : TMCI_Anim_Rect_Parms) : OleVariant;
function ConvertVariantToTMCI_Anim_Rect_Parms(const V : OleVariant) : TMCI_Anim_Rect_Parms;
function ConvertTMCI_Anim_Step_ParmsToVariant(var R : TMCI_Anim_Step_Parms) : OleVariant;
function ConvertVariantToTMCI_Anim_Step_Parms(const V : OleVariant) : TMCI_Anim_Step_Parms;
function ConvertTMCI_Anim_Update_ParmsToVariant(var R : TMCI_Anim_Update_Parms) : OleVariant;
function ConvertVariantToTMCI_Anim_Update_Parms(const V : OleVariant) : TMCI_Anim_Update_Parms;
function ConvertTMCI_Anim_Window_ParmsToVariant(var R : TMCI_Anim_Window_Parms) : OleVariant;
function ConvertVariantToTMCI_Anim_Window_Parms(const V : OleVariant) : TMCI_Anim_Window_Parms;
function ConvertTMCI_Anim_Window_ParmsAToVariant(var R : TMCI_Anim_Window_ParmsA) : OleVariant;
function ConvertVariantToTMCI_Anim_Window_ParmsA(const V : OleVariant) : TMCI_Anim_Window_ParmsA;
function ConvertTMCI_Anim_Window_ParmsWToVariant(var R : TMCI_Anim_Window_ParmsW) : OleVariant;
function ConvertVariantToTMCI_Anim_Window_ParmsW(const V : OleVariant) : TMCI_Anim_Window_ParmsW;
function ConvertTMCI_BReak_ParmsToVariant(var R : TMCI_BReak_Parms) : OleVariant;
function ConvertVariantToTMCI_BReak_Parms(const V : OleVariant) : TMCI_BReak_Parms;
function ConvertTMCI_Generic_ParmsToVariant(var R : TMCI_Generic_Parms) : OleVariant;
function ConvertVariantToTMCI_Generic_Parms(const V : OleVariant) : TMCI_Generic_Parms;
function ConvertTMCI_GetDevCaps_ParmsToVariant(var R : TMCI_GetDevCaps_Parms) : OleVariant;
function ConvertVariantToTMCI_GetDevCaps_Parms(const V : OleVariant) : TMCI_GetDevCaps_Parms;
function ConvertTMCI_Info_ParmsToVariant(var R : TMCI_Info_Parms) : OleVariant;
function ConvertVariantToTMCI_Info_Parms(const V : OleVariant) : TMCI_Info_Parms;
function ConvertTMCI_Info_ParmsAToVariant(var R : TMCI_Info_ParmsA) : OleVariant;
function ConvertVariantToTMCI_Info_ParmsA(const V : OleVariant) : TMCI_Info_ParmsA;
function ConvertTMCI_Info_ParmsWToVariant(var R : TMCI_Info_ParmsW) : OleVariant;
function ConvertVariantToTMCI_Info_ParmsW(const V : OleVariant) : TMCI_Info_ParmsW;
function ConvertTMCI_Load_ParmsToVariant(var R : TMCI_Load_Parms) : OleVariant;
function ConvertVariantToTMCI_Load_Parms(const V : OleVariant) : TMCI_Load_Parms;
function ConvertTMCI_Load_ParmsAToVariant(var R : TMCI_Load_ParmsA) : OleVariant;
function ConvertVariantToTMCI_Load_ParmsA(const V : OleVariant) : TMCI_Load_ParmsA;
function ConvertTMCI_Load_ParmsWToVariant(var R : TMCI_Load_ParmsW) : OleVariant;
function ConvertVariantToTMCI_Load_ParmsW(const V : OleVariant) : TMCI_Load_ParmsW;
function ConvertTMCI_Open_ParmsToVariant(var R : TMCI_Open_Parms) : OleVariant;
function ConvertVariantToTMCI_Open_Parms(const V : OleVariant) : TMCI_Open_Parms;
function ConvertTMCI_Open_ParmsAToVariant(var R : TMCI_Open_ParmsA) : OleVariant;
function ConvertVariantToTMCI_Open_ParmsA(const V : OleVariant) : TMCI_Open_ParmsA;
function ConvertTMCI_Open_ParmsWToVariant(var R : TMCI_Open_ParmsW) : OleVariant;
function ConvertVariantToTMCI_Open_ParmsW(const V : OleVariant) : TMCI_Open_ParmsW;
function ConvertTMCI_Ovly_Load_ParmsToVariant(var R : TMCI_Ovly_Load_Parms) : OleVariant;
function ConvertVariantToTMCI_Ovly_Load_Parms(const V : OleVariant) : TMCI_Ovly_Load_Parms;
function ConvertTMCI_Ovly_Load_ParmsAToVariant(var R : TMCI_Ovly_Load_ParmsA) : OleVariant;
function ConvertVariantToTMCI_Ovly_Load_ParmsA(const V : OleVariant) : TMCI_Ovly_Load_ParmsA;
function ConvertTMCI_Ovly_Load_ParmsWToVariant(var R : TMCI_Ovly_Load_ParmsW) : OleVariant;
function ConvertVariantToTMCI_Ovly_Load_ParmsW(const V : OleVariant) : TMCI_Ovly_Load_ParmsW;
function ConvertTMCI_Ovly_Open_ParmsToVariant(var R : TMCI_Ovly_Open_Parms) : OleVariant;
function ConvertVariantToTMCI_Ovly_Open_Parms(const V : OleVariant) : TMCI_Ovly_Open_Parms;
function ConvertTMCI_Ovly_Open_ParmsAToVariant(var R : TMCI_Ovly_Open_ParmsA) : OleVariant;
function ConvertVariantToTMCI_Ovly_Open_ParmsA(const V : OleVariant) : TMCI_Ovly_Open_ParmsA;
function ConvertTMCI_Ovly_Open_ParmsWToVariant(var R : TMCI_Ovly_Open_ParmsW) : OleVariant;
function ConvertVariantToTMCI_Ovly_Open_ParmsW(const V : OleVariant) : TMCI_Ovly_Open_ParmsW;
function ConvertTMCI_Ovly_Rect_ParmsToVariant(var R : TMCI_Ovly_Rect_Parms) : OleVariant;
function ConvertVariantToTMCI_Ovly_Rect_Parms(const V : OleVariant) : TMCI_Ovly_Rect_Parms;
function ConvertTMCI_Ovly_Save_ParmsToVariant(var R : TMCI_Ovly_Save_Parms) : OleVariant;
function ConvertVariantToTMCI_Ovly_Save_Parms(const V : OleVariant) : TMCI_Ovly_Save_Parms;
function ConvertTMCI_Ovly_Save_ParmsAToVariant(var R : TMCI_Ovly_Save_ParmsA) : OleVariant;
function ConvertVariantToTMCI_Ovly_Save_ParmsA(const V : OleVariant) : TMCI_Ovly_Save_ParmsA;
function ConvertTMCI_Ovly_Save_ParmsWToVariant(var R : TMCI_Ovly_Save_ParmsW) : OleVariant;
function ConvertVariantToTMCI_Ovly_Save_ParmsW(const V : OleVariant) : TMCI_Ovly_Save_ParmsW;
function ConvertTMCI_Ovly_Window_ParmsToVariant(var R : TMCI_Ovly_Window_Parms) : OleVariant;
function ConvertVariantToTMCI_Ovly_Window_Parms(const V : OleVariant) : TMCI_Ovly_Window_Parms;
function ConvertTMCI_Ovly_Window_ParmsAToVariant(var R : TMCI_Ovly_Window_ParmsA) : OleVariant;
function ConvertVariantToTMCI_Ovly_Window_ParmsA(const V : OleVariant) : TMCI_Ovly_Window_ParmsA;
function ConvertTMCI_Ovly_Window_ParmsWToVariant(var R : TMCI_Ovly_Window_ParmsW) : OleVariant;
function ConvertVariantToTMCI_Ovly_Window_ParmsW(const V : OleVariant) : TMCI_Ovly_Window_ParmsW;
function ConvertTMCI_Play_ParmsToVariant(var R : TMCI_Play_Parms) : OleVariant;
function ConvertVariantToTMCI_Play_Parms(const V : OleVariant) : TMCI_Play_Parms;
function ConvertTMCI_Record_ParmsToVariant(var R : TMCI_Record_Parms) : OleVariant;
function ConvertVariantToTMCI_Record_Parms(const V : OleVariant) : TMCI_Record_Parms;
function ConvertTMCI_SaveParmsToVariant(var R : TMCI_SaveParms) : OleVariant;
function ConvertVariantToTMCI_SaveParms(const V : OleVariant) : TMCI_SaveParms;
function ConvertTMCI_SaveParmsAToVariant(var R : TMCI_SaveParmsA) : OleVariant;
function ConvertVariantToTMCI_SaveParmsA(const V : OleVariant) : TMCI_SaveParmsA;
function ConvertTMCI_SaveParmsWToVariant(var R : TMCI_SaveParmsW) : OleVariant;
function ConvertVariantToTMCI_SaveParmsW(const V : OleVariant) : TMCI_SaveParmsW;
function ConvertTMCI_Seek_ParmsToVariant(var R : TMCI_Seek_Parms) : OleVariant;
function ConvertVariantToTMCI_Seek_Parms(const V : OleVariant) : TMCI_Seek_Parms;
function ConvertTMCI_Seq_Set_ParmsToVariant(var R : TMCI_Seq_Set_Parms) : OleVariant;
function ConvertVariantToTMCI_Seq_Set_Parms(const V : OleVariant) : TMCI_Seq_Set_Parms;
function ConvertTMCI_Set_ParmsToVariant(var R : TMCI_Set_Parms) : OleVariant;
function ConvertVariantToTMCI_Set_Parms(const V : OleVariant) : TMCI_Set_Parms;
function ConvertTMCI_Sound_ParmsToVariant(var R : TMCI_Sound_Parms) : OleVariant;
function ConvertVariantToTMCI_Sound_Parms(const V : OleVariant) : TMCI_Sound_Parms;
function ConvertTMCI_Status_ParmsToVariant(var R : TMCI_Status_Parms) : OleVariant;
function ConvertVariantToTMCI_Status_Parms(const V : OleVariant) : TMCI_Status_Parms;
function ConvertTMCI_SysInfo_ParmsToVariant(var R : TMCI_SysInfo_Parms) : OleVariant;
function ConvertVariantToTMCI_SysInfo_Parms(const V : OleVariant) : TMCI_SysInfo_Parms;
function ConvertTMCI_SysInfo_ParmsAToVariant(var R : TMCI_SysInfo_ParmsA) : OleVariant;
function ConvertVariantToTMCI_SysInfo_ParmsA(const V : OleVariant) : TMCI_SysInfo_ParmsA;
function ConvertTMCI_SysInfo_ParmsWToVariant(var R : TMCI_SysInfo_ParmsW) : OleVariant;
function ConvertVariantToTMCI_SysInfo_ParmsW(const V : OleVariant) : TMCI_SysInfo_ParmsW;
function ConvertTMCI_VD_Escape_ParmsToVariant(var R : TMCI_VD_Escape_Parms) : OleVariant;
function ConvertVariantToTMCI_VD_Escape_Parms(const V : OleVariant) : TMCI_VD_Escape_Parms;
function ConvertTMCI_VD_Escape_ParmsAToVariant(var R : TMCI_VD_Escape_ParmsA) : OleVariant;
function ConvertVariantToTMCI_VD_Escape_ParmsA(const V : OleVariant) : TMCI_VD_Escape_ParmsA;
function ConvertTMCI_VD_Escape_ParmsWToVariant(var R : TMCI_VD_Escape_ParmsW) : OleVariant;
function ConvertVariantToTMCI_VD_Escape_ParmsW(const V : OleVariant) : TMCI_VD_Escape_ParmsW;
function ConvertTMCI_VD_Play_ParmsToVariant(var R : TMCI_VD_Play_Parms) : OleVariant;
function ConvertVariantToTMCI_VD_Play_Parms(const V : OleVariant) : TMCI_VD_Play_Parms;
function ConvertTMCI_VD_Step_ParmsToVariant(var R : TMCI_VD_Step_Parms) : OleVariant;
function ConvertVariantToTMCI_VD_Step_Parms(const V : OleVariant) : TMCI_VD_Step_Parms;
function ConvertTMCI_Wave_Delete_ParmsToVariant(var R : TMCI_Wave_Delete_Parms) : OleVariant;
function ConvertVariantToTMCI_Wave_Delete_Parms(const V : OleVariant) : TMCI_Wave_Delete_Parms;
function ConvertTMCI_Wave_Open_ParmsToVariant(var R : TMCI_Wave_Open_Parms) : OleVariant;
function ConvertVariantToTMCI_Wave_Open_Parms(const V : OleVariant) : TMCI_Wave_Open_Parms;
function ConvertTMCI_Wave_Open_ParmsAToVariant(var R : TMCI_Wave_Open_ParmsA) : OleVariant;
function ConvertVariantToTMCI_Wave_Open_ParmsA(const V : OleVariant) : TMCI_Wave_Open_ParmsA;
function ConvertTMCI_Wave_Open_ParmsWToVariant(var R : TMCI_Wave_Open_ParmsW) : OleVariant;
function ConvertVariantToTMCI_Wave_Open_ParmsW(const V : OleVariant) : TMCI_Wave_Open_ParmsW;
function ConvertTMCI_Wave_Set_ParmsToVariant(var R : TMCI_Wave_Set_Parms) : OleVariant;
function ConvertVariantToTMCI_Wave_Set_Parms(const V : OleVariant) : TMCI_Wave_Set_Parms;
function ConvertTMidiEventToVariant(var R : TMidiEvent) : OleVariant;
function ConvertVariantToTMidiEvent(const V : OleVariant) : TMidiEvent;
function ConvertTMidiHdrToVariant(var R : TMidiHdr) : OleVariant;
function ConvertVariantToTMidiHdr(const V : OleVariant) : TMidiHdr;
function ConvertTMidiInCapsToVariant(var R : TMidiInCaps) : OleVariant;
function ConvertVariantToTMidiInCaps(const V : OleVariant) : TMidiInCaps;
function ConvertTMidiInCapsAToVariant(var R : TMidiInCapsA) : OleVariant;
function ConvertVariantToTMidiInCapsA(const V : OleVariant) : TMidiInCapsA;
function ConvertTMidiInCapsWToVariant(var R : TMidiInCapsW) : OleVariant;
function ConvertVariantToTMidiInCapsW(const V : OleVariant) : TMidiInCapsW;
function ConvertTMidiOutCapsToVariant(var R : TMidiOutCaps) : OleVariant;
function ConvertVariantToTMidiOutCaps(const V : OleVariant) : TMidiOutCaps;
function ConvertTMidiOutCapsAToVariant(var R : TMidiOutCapsA) : OleVariant;
function ConvertVariantToTMidiOutCapsA(const V : OleVariant) : TMidiOutCapsA;
function ConvertTMidiOutCapsWToVariant(var R : TMidiOutCapsW) : OleVariant;
function ConvertVariantToTMidiOutCapsW(const V : OleVariant) : TMidiOutCapsW;
function ConvertTMidiPropTempoToVariant(var R : TMidiPropTempo) : OleVariant;
function ConvertVariantToTMidiPropTempo(const V : OleVariant) : TMidiPropTempo;
function ConvertTMidiPropTimeDivToVariant(var R : TMidiPropTimeDiv) : OleVariant;
function ConvertVariantToTMidiPropTimeDiv(const V : OleVariant) : TMidiPropTimeDiv;
function ConvertTMidiStrmBuffVerToVariant(var R : TMidiStrmBuffVer) : OleVariant;
function ConvertVariantToTMidiStrmBuffVer(const V : OleVariant) : TMidiStrmBuffVer;
function ConvertTMixerCapsToVariant(var R : TMixerCaps) : OleVariant;
function ConvertVariantToTMixerCaps(const V : OleVariant) : TMixerCaps;
function ConvertTMixerCapsAToVariant(var R : TMixerCapsA) : OleVariant;
function ConvertVariantToTMixerCapsA(const V : OleVariant) : TMixerCapsA;
function ConvertTMixerCapsWToVariant(var R : TMixerCapsW) : OleVariant;
function ConvertVariantToTMixerCapsW(const V : OleVariant) : TMixerCapsW;
function ConverttMIXERCONTROLDETAILSToVariant(var R : tMIXERCONTROLDETAILS) : OleVariant;
function ConvertVariantTotMIXERCONTROLDETAILS(const V : OleVariant) : tMIXERCONTROLDETAILS;
function ConverttMIXERCONTROLDETAILS_BOOLEANToVariant(var R : tMIXERCONTROLDETAILS_BOOLEAN) : OleVariant;
function ConvertVariantTotMIXERCONTROLDETAILS_BOOLEAN(const V : OleVariant) : tMIXERCONTROLDETAILS_BOOLEAN;
function ConverttMIXERCONTROLDETAILS_SIGNEDToVariant(var R : tMIXERCONTROLDETAILS_SIGNED) : OleVariant;
function ConvertVariantTotMIXERCONTROLDETAILS_SIGNED(const V : OleVariant) : tMIXERCONTROLDETAILS_SIGNED;
function ConverttMIXERCONTROLDETAILS_UNSIGNEDToVariant(var R : tMIXERCONTROLDETAILS_UNSIGNED) : OleVariant;
function ConvertVariantTotMIXERCONTROLDETAILS_UNSIGNED(const V : OleVariant) : tMIXERCONTROLDETAILS_UNSIGNED;
function ConvertTMixerControlDetailsBooleanToVariant(var R : TMixerControlDetailsBoolean) : OleVariant;
function ConvertVariantToTMixerControlDetailsBoolean(const V : OleVariant) : TMixerControlDetailsBoolean;
function ConvertTMixerControlDetailsListTextToVariant(var R : TMixerControlDetailsListText) : OleVariant;
function ConvertVariantToTMixerControlDetailsListText(const V : OleVariant) : TMixerControlDetailsListText;
function ConvertTMixerControlDetailsListTextAToVariant(var R : TMixerControlDetailsListTextA) : OleVariant;
function ConvertVariantToTMixerControlDetailsListTextA(const V : OleVariant) : TMixerControlDetailsListTextA;
function ConvertTMixerControlDetailsListTextWToVariant(var R : TMixerControlDetailsListTextW) : OleVariant;
function ConvertVariantToTMixerControlDetailsListTextW(const V : OleVariant) : TMixerControlDetailsListTextW;
function ConvertTMixerControlDetailsSignedToVariant(var R : TMixerControlDetailsSigned) : OleVariant;
function ConvertVariantToTMixerControlDetailsSigned(const V : OleVariant) : TMixerControlDetailsSigned;
function ConvertTMixerControlDetailsUnsignedToVariant(var R : TMixerControlDetailsUnsigned) : OleVariant;
function ConvertVariantToTMixerControlDetailsUnsigned(const V : OleVariant) : TMixerControlDetailsUnsigned;
function ConvertTMixerLineToVariant(var R : TMixerLine) : OleVariant;
function ConvertVariantToTMixerLine(const V : OleVariant) : TMixerLine;
function ConvertTMixerLineAToVariant(var R : TMixerLineA) : OleVariant;
function ConvertVariantToTMixerLineA(const V : OleVariant) : TMixerLineA;
function ConvertTMixerLineControlsToVariant(var R : TMixerLineControls) : OleVariant;
function ConvertVariantToTMixerLineControls(const V : OleVariant) : TMixerLineControls;
function ConvertTMixerLineControlsAToVariant(var R : TMixerLineControlsA) : OleVariant;
function ConvertVariantToTMixerLineControlsA(const V : OleVariant) : TMixerLineControlsA;
function ConvertTMixerLineControlsWToVariant(var R : TMixerLineControlsW) : OleVariant;
function ConvertVariantToTMixerLineControlsW(const V : OleVariant) : TMixerLineControlsW;
function ConvertTMixerLineWToVariant(var R : TMixerLineW) : OleVariant;
function ConvertVariantToTMixerLineW(const V : OleVariant) : TMixerLineW;
function ConvertTMMCKInfoToVariant(var R : TMMCKInfo) : OleVariant;
function ConvertVariantToTMMCKInfo(const V : OleVariant) : TMMCKInfo;
function ConvertTMMIOInfoToVariant(var R : TMMIOInfo) : OleVariant;
function ConvertVariantToTMMIOInfo(const V : OleVariant) : TMMIOInfo;
function ConvertTMMTimeToVariant(var R : TMMTime) : OleVariant;
function ConvertVariantToTMMTime(const V : OleVariant) : TMMTime;
function ConvertTPCMWaveFormatToVariant(var R : TPCMWaveFormat) : OleVariant;
function ConvertVariantToTPCMWaveFormat(const V : OleVariant) : TPCMWaveFormat;
function ConvertTTimeCapsToVariant(var R : TTimeCaps) : OleVariant;
function ConvertVariantToTTimeCaps(const V : OleVariant) : TTimeCaps;
function ConvertTWaveFormatToVariant(var R : TWaveFormat) : OleVariant;
function ConvertVariantToTWaveFormat(const V : OleVariant) : TWaveFormat;
function ConverttWAVEFORMATEXToVariant(var R : tWAVEFORMATEX) : OleVariant;
function ConvertVariantTotWAVEFORMATEX(const V : OleVariant) : tWAVEFORMATEX;
function ConvertTWaveHdrToVariant(var R : TWaveHdr) : OleVariant;
function ConvertVariantToTWaveHdr(const V : OleVariant) : TWaveHdr;
function ConvertTWaveInCapsToVariant(var R : TWaveInCaps) : OleVariant;
function ConvertVariantToTWaveInCaps(const V : OleVariant) : TWaveInCaps;
function ConvertTWaveInCapsAToVariant(var R : TWaveInCapsA) : OleVariant;
function ConvertVariantToTWaveInCapsA(const V : OleVariant) : TWaveInCapsA;
function ConvertTWaveInCapsWToVariant(var R : TWaveInCapsW) : OleVariant;
function ConvertVariantToTWaveInCapsW(const V : OleVariant) : TWaveInCapsW;
function ConvertTWaveOutCapsToVariant(var R : TWaveOutCaps) : OleVariant;
function ConvertVariantToTWaveOutCaps(const V : OleVariant) : TWaveOutCaps;
function ConvertTWaveOutCapsAToVariant(var R : TWaveOutCapsA) : OleVariant;
function ConvertVariantToTWaveOutCapsA(const V : OleVariant) : TWaveOutCapsA;
function ConvertTWaveOutCapsWToVariant(var R : TWaveOutCapsW) : OleVariant;
function ConvertVariantToTWaveOutCapsW(const V : OleVariant) : TWaveOutCapsW;
function ConvertWAVEFORMATToVariant(var R : WAVEFORMAT) : OleVariant;
function ConvertVariantToWAVEFORMAT(const V : OleVariant) : WAVEFORMAT;
function Convertwaveformat_tagToVariant(var R : waveformat_tag) : OleVariant;
function ConvertVariantTowaveformat_tag(const V : OleVariant) : waveformat_tag;
function ConvertWAVEHDRToVariant(var R : WAVEHDR) : OleVariant;
function ConvertVariantToWAVEHDR(const V : OleVariant) : WAVEHDR;
function Convertwavehdr_tagToVariant(var R : wavehdr_tag) : OleVariant;
function ConvertVariantTowavehdr_tag(const V : OleVariant) : wavehdr_tag;
function ConvertWAVEINCAPSToVariant(var R : WAVEINCAPS) : OleVariant;
function ConvertVariantToWAVEINCAPS(const V : OleVariant) : WAVEINCAPS;
function ConvertWAVEINCAPSAToVariant(var R : WAVEINCAPSA) : OleVariant;
function ConvertVariantToWAVEINCAPSA(const V : OleVariant) : WAVEINCAPSA;
function ConvertWAVEINCAPSWToVariant(var R : WAVEINCAPSW) : OleVariant;
function ConvertVariantToWAVEINCAPSW(const V : OleVariant) : WAVEINCAPSW;
function ConvertWAVEOUTCAPSToVariant(var R : WAVEOUTCAPS) : OleVariant;
function ConvertVariantToWAVEOUTCAPS(const V : OleVariant) : WAVEOUTCAPS;
function ConvertWAVEOUTCAPSAToVariant(var R : WAVEOUTCAPSA) : OleVariant;
function ConvertVariantToWAVEOUTCAPSA(const V : OleVariant) : WAVEOUTCAPSA;
function ConvertWAVEOUTCAPSWToVariant(var R : WAVEOUTCAPSW) : OleVariant;
function ConvertVariantToWAVEOUTCAPSW(const V : OleVariant) : WAVEOUTCAPSW;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type ___MMCKINFO__Wrapper = class(TDCRecordWrapper)
private
fR : _MMCKINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setckid(const val : FOURCC);
function getckid : FOURCC;
property ckid : FOURCC read getckid write setckid;
procedure setcksize(const val : DWORD);
function getcksize : DWORD;
property cksize : DWORD read getcksize write setcksize;
procedure setfccType(const val : FOURCC);
function getfccType : FOURCC;
property fccType : FOURCC read getfccType write setfccType;
procedure setdwDataOffset(const val : DWORD);
function getdwDataOffset : DWORD;
property dwDataOffset : DWORD read getdwDataOffset write setdwDataOffset;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type ___MMIOINFO__Wrapper = class(TDCRecordWrapper)
private
fR : _MMIOINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setfccIOProc(const val : FOURCC);
function getfccIOProc : FOURCC;
property fccIOProc : FOURCC read getfccIOProc write setfccIOProc;
procedure setwErrorRet(const val : UINT);
function getwErrorRet : UINT;
property wErrorRet : UINT read getwErrorRet write setwErrorRet;
procedure setcchBuffer(const val : Longint);
function getcchBuffer : Longint;
property cchBuffer : Longint read getcchBuffer write setcchBuffer;
procedure setlBufOffset(const val : Longint);
function getlBufOffset : Longint;
property lBufOffset : Longint read getlBufOffset write setlBufOffset;
procedure setlDiskOffset(const val : Longint);
function getlDiskOffset : Longint;
property lDiskOffset : Longint read getlDiskOffset write setlDiskOffset;
procedure setdwReserved1(const val : DWORD);
function getdwReserved1 : DWORD;
property dwReserved1 : DWORD read getdwReserved1 write setdwReserved1;
procedure setdwReserved2(const val : DWORD);
function getdwReserved2 : DWORD;
property dwReserved2 : DWORD read getdwReserved2 write setdwReserved2;
procedure setHMMIO(const val : HMMIO);
function getHMMIO : HMMIO;
property HMMIO : HMMIO read getHMMIO write setHMMIO;
end;
type __AUXCAPS__Wrapper = class(TDCRecordWrapper)
private
fR : AUXCAPS;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setwTechnology(const val : Word);
function getwTechnology : Word;
property wTechnology : Word read getwTechnology write setwTechnology;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __AUXCAPSA__Wrapper = class(TDCRecordWrapper)
private
fR : AUXCAPSA;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setwTechnology(const val : Word);
function getwTechnology : Word;
property wTechnology : Word read getwTechnology write setwTechnology;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __AUXCAPSW__Wrapper = class(TDCRecordWrapper)
private
fR : AUXCAPSW;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setwTechnology(const val : Word);
function getwTechnology : Word;
property wTechnology : Word read getwTechnology write setwTechnology;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __DRVCONFIGINFO__Wrapper = class(TDCRecordWrapper)
private
fR : DRVCONFIGINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setdwDCISize(const val : DWORD);
function getdwDCISize : DWORD;
property dwDCISize : DWORD read getdwDCISize write setdwDCISize;
end;
type __DRVCONFIGINFOEX__Wrapper = class(TDCRecordWrapper)
private
fR : DRVCONFIGINFOEX;
public
function GetRecordPtr : pointer; override;
published
procedure setdwDCISize(const val : DWORD);
function getdwDCISize : DWORD;
property dwDCISize : DWORD read getdwDCISize write setdwDCISize;
procedure setdnDevNode(const val : DWORD);
function getdnDevNode : DWORD;
property dnDevNode : DWORD read getdnDevNode write setdnDevNode;
end;
type __JOYCAPS__Wrapper = class(TDCRecordWrapper)
private
fR : JOYCAPS;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setwXmin(const val : UINT);
function getwXmin : UINT;
property wXmin : UINT read getwXmin write setwXmin;
procedure setwXmax(const val : UINT);
function getwXmax : UINT;
property wXmax : UINT read getwXmax write setwXmax;
procedure setwYmin(const val : UINT);
function getwYmin : UINT;
property wYmin : UINT read getwYmin write setwYmin;
procedure setwYmax(const val : UINT);
function getwYmax : UINT;
property wYmax : UINT read getwYmax write setwYmax;
procedure setwZmin(const val : UINT);
function getwZmin : UINT;
property wZmin : UINT read getwZmin write setwZmin;
procedure setwZmax(const val : UINT);
function getwZmax : UINT;
property wZmax : UINT read getwZmax write setwZmax;
procedure setwNumButtons(const val : UINT);
function getwNumButtons : UINT;
property wNumButtons : UINT read getwNumButtons write setwNumButtons;
procedure setwPeriodMin(const val : UINT);
function getwPeriodMin : UINT;
property wPeriodMin : UINT read getwPeriodMin write setwPeriodMin;
procedure setwPeriodMax(const val : UINT);
function getwPeriodMax : UINT;
property wPeriodMax : UINT read getwPeriodMax write setwPeriodMax;
procedure setwRmin(const val : UINT);
function getwRmin : UINT;
property wRmin : UINT read getwRmin write setwRmin;
procedure setwRmax(const val : UINT);
function getwRmax : UINT;
property wRmax : UINT read getwRmax write setwRmax;
procedure setwUmin(const val : UINT);
function getwUmin : UINT;
property wUmin : UINT read getwUmin write setwUmin;
procedure setwUmax(const val : UINT);
function getwUmax : UINT;
property wUmax : UINT read getwUmax write setwUmax;
procedure setwVmin(const val : UINT);
function getwVmin : UINT;
property wVmin : UINT read getwVmin write setwVmin;
procedure setwVmax(const val : UINT);
function getwVmax : UINT;
property wVmax : UINT read getwVmax write setwVmax;
procedure setwCaps(const val : UINT);
function getwCaps : UINT;
property wCaps : UINT read getwCaps write setwCaps;
procedure setwMaxAxes(const val : UINT);
function getwMaxAxes : UINT;
property wMaxAxes : UINT read getwMaxAxes write setwMaxAxes;
procedure setwNumAxes(const val : UINT);
function getwNumAxes : UINT;
property wNumAxes : UINT read getwNumAxes write setwNumAxes;
procedure setwMaxButtons(const val : UINT);
function getwMaxButtons : UINT;
property wMaxButtons : UINT read getwMaxButtons write setwMaxButtons;
end;
type __JOYCAPSA__Wrapper = class(TDCRecordWrapper)
private
fR : JOYCAPSA;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setwXmin(const val : UINT);
function getwXmin : UINT;
property wXmin : UINT read getwXmin write setwXmin;
procedure setwXmax(const val : UINT);
function getwXmax : UINT;
property wXmax : UINT read getwXmax write setwXmax;
procedure setwYmin(const val : UINT);
function getwYmin : UINT;
property wYmin : UINT read getwYmin write setwYmin;
procedure setwYmax(const val : UINT);
function getwYmax : UINT;
property wYmax : UINT read getwYmax write setwYmax;
procedure setwZmin(const val : UINT);
function getwZmin : UINT;
property wZmin : UINT read getwZmin write setwZmin;
procedure setwZmax(const val : UINT);
function getwZmax : UINT;
property wZmax : UINT read getwZmax write setwZmax;
procedure setwNumButtons(const val : UINT);
function getwNumButtons : UINT;
property wNumButtons : UINT read getwNumButtons write setwNumButtons;
procedure setwPeriodMin(const val : UINT);
function getwPeriodMin : UINT;
property wPeriodMin : UINT read getwPeriodMin write setwPeriodMin;
procedure setwPeriodMax(const val : UINT);
function getwPeriodMax : UINT;
property wPeriodMax : UINT read getwPeriodMax write setwPeriodMax;
procedure setwRmin(const val : UINT);
function getwRmin : UINT;
property wRmin : UINT read getwRmin write setwRmin;
procedure setwRmax(const val : UINT);
function getwRmax : UINT;
property wRmax : UINT read getwRmax write setwRmax;
procedure setwUmin(const val : UINT);
function getwUmin : UINT;
property wUmin : UINT read getwUmin write setwUmin;
procedure setwUmax(const val : UINT);
function getwUmax : UINT;
property wUmax : UINT read getwUmax write setwUmax;
procedure setwVmin(const val : UINT);
function getwVmin : UINT;
property wVmin : UINT read getwVmin write setwVmin;
procedure setwVmax(const val : UINT);
function getwVmax : UINT;
property wVmax : UINT read getwVmax write setwVmax;
procedure setwCaps(const val : UINT);
function getwCaps : UINT;
property wCaps : UINT read getwCaps write setwCaps;
procedure setwMaxAxes(const val : UINT);
function getwMaxAxes : UINT;
property wMaxAxes : UINT read getwMaxAxes write setwMaxAxes;
procedure setwNumAxes(const val : UINT);
function getwNumAxes : UINT;
property wNumAxes : UINT read getwNumAxes write setwNumAxes;
procedure setwMaxButtons(const val : UINT);
function getwMaxButtons : UINT;
property wMaxButtons : UINT read getwMaxButtons write setwMaxButtons;
end;
type __JOYCAPSW__Wrapper = class(TDCRecordWrapper)
private
fR : JOYCAPSW;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setwXmin(const val : UINT);
function getwXmin : UINT;
property wXmin : UINT read getwXmin write setwXmin;
procedure setwXmax(const val : UINT);
function getwXmax : UINT;
property wXmax : UINT read getwXmax write setwXmax;
procedure setwYmin(const val : UINT);
function getwYmin : UINT;
property wYmin : UINT read getwYmin write setwYmin;
procedure setwYmax(const val : UINT);
function getwYmax : UINT;
property wYmax : UINT read getwYmax write setwYmax;
procedure setwZmin(const val : UINT);
function getwZmin : UINT;
property wZmin : UINT read getwZmin write setwZmin;
procedure setwZmax(const val : UINT);
function getwZmax : UINT;
property wZmax : UINT read getwZmax write setwZmax;
procedure setwNumButtons(const val : UINT);
function getwNumButtons : UINT;
property wNumButtons : UINT read getwNumButtons write setwNumButtons;
procedure setwPeriodMin(const val : UINT);
function getwPeriodMin : UINT;
property wPeriodMin : UINT read getwPeriodMin write setwPeriodMin;
procedure setwPeriodMax(const val : UINT);
function getwPeriodMax : UINT;
property wPeriodMax : UINT read getwPeriodMax write setwPeriodMax;
procedure setwRmin(const val : UINT);
function getwRmin : UINT;
property wRmin : UINT read getwRmin write setwRmin;
procedure setwRmax(const val : UINT);
function getwRmax : UINT;
property wRmax : UINT read getwRmax write setwRmax;
procedure setwUmin(const val : UINT);
function getwUmin : UINT;
property wUmin : UINT read getwUmin write setwUmin;
procedure setwUmax(const val : UINT);
function getwUmax : UINT;
property wUmax : UINT read getwUmax write setwUmax;
procedure setwVmin(const val : UINT);
function getwVmin : UINT;
property wVmin : UINT read getwVmin write setwVmin;
procedure setwVmax(const val : UINT);
function getwVmax : UINT;
property wVmax : UINT read getwVmax write setwVmax;
procedure setwCaps(const val : UINT);
function getwCaps : UINT;
property wCaps : UINT read getwCaps write setwCaps;
procedure setwMaxAxes(const val : UINT);
function getwMaxAxes : UINT;
property wMaxAxes : UINT read getwMaxAxes write setwMaxAxes;
procedure setwNumAxes(const val : UINT);
function getwNumAxes : UINT;
property wNumAxes : UINT read getwNumAxes write setwNumAxes;
procedure setwMaxButtons(const val : UINT);
function getwMaxButtons : UINT;
property wMaxButtons : UINT read getwMaxButtons write setwMaxButtons;
end;
type __JOYINFO__Wrapper = class(TDCRecordWrapper)
private
fR : JOYINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setwXpos(const val : UINT);
function getwXpos : UINT;
property wXpos : UINT read getwXpos write setwXpos;
procedure setwYpos(const val : UINT);
function getwYpos : UINT;
property wYpos : UINT read getwYpos write setwYpos;
procedure setwZpos(const val : UINT);
function getwZpos : UINT;
property wZpos : UINT read getwZpos write setwZpos;
procedure setwButtons(const val : UINT);
function getwButtons : UINT;
property wButtons : UINT read getwButtons write setwButtons;
end;
type __joyinfo_tag__Wrapper = class(TDCRecordWrapper)
private
fR : joyinfo_tag;
public
function GetRecordPtr : pointer; override;
published
procedure setwXpos(const val : UINT);
function getwXpos : UINT;
property wXpos : UINT read getwXpos write setwXpos;
procedure setwYpos(const val : UINT);
function getwYpos : UINT;
property wYpos : UINT read getwYpos write setwYpos;
procedure setwZpos(const val : UINT);
function getwZpos : UINT;
property wZpos : UINT read getwZpos write setwZpos;
procedure setwButtons(const val : UINT);
function getwButtons : UINT;
property wButtons : UINT read getwButtons write setwButtons;
end;
type __JOYINFOEX__Wrapper = class(TDCRecordWrapper)
private
fR : JOYINFOEX;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setwXpos(const val : UINT);
function getwXpos : UINT;
property wXpos : UINT read getwXpos write setwXpos;
procedure setwYpos(const val : UINT);
function getwYpos : UINT;
property wYpos : UINT read getwYpos write setwYpos;
procedure setwZpos(const val : UINT);
function getwZpos : UINT;
property wZpos : UINT read getwZpos write setwZpos;
procedure setdwRpos(const val : DWORD);
function getdwRpos : DWORD;
property dwRpos : DWORD read getdwRpos write setdwRpos;
procedure setdwUpos(const val : DWORD);
function getdwUpos : DWORD;
property dwUpos : DWORD read getdwUpos write setdwUpos;
procedure setdwVpos(const val : DWORD);
function getdwVpos : DWORD;
property dwVpos : DWORD read getdwVpos write setdwVpos;
procedure setwButtons(const val : UINT);
function getwButtons : UINT;
property wButtons : UINT read getwButtons write setwButtons;
procedure setdwButtonNumber(const val : DWORD);
function getdwButtonNumber : DWORD;
property dwButtonNumber : DWORD read getdwButtonNumber write setdwButtonNumber;
procedure setdwPOV(const val : DWORD);
function getdwPOV : DWORD;
property dwPOV : DWORD read getdwPOV write setdwPOV;
procedure setdwReserved1(const val : DWORD);
function getdwReserved1 : DWORD;
property dwReserved1 : DWORD read getdwReserved1 write setdwReserved1;
procedure setdwReserved2(const val : DWORD);
function getdwReserved2 : DWORD;
property dwReserved2 : DWORD read getdwReserved2 write setdwReserved2;
end;
type __joyinfoex_tag__Wrapper = class(TDCRecordWrapper)
private
fR : joyinfoex_tag;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setwXpos(const val : UINT);
function getwXpos : UINT;
property wXpos : UINT read getwXpos write setwXpos;
procedure setwYpos(const val : UINT);
function getwYpos : UINT;
property wYpos : UINT read getwYpos write setwYpos;
procedure setwZpos(const val : UINT);
function getwZpos : UINT;
property wZpos : UINT read getwZpos write setwZpos;
procedure setdwRpos(const val : DWORD);
function getdwRpos : DWORD;
property dwRpos : DWORD read getdwRpos write setdwRpos;
procedure setdwUpos(const val : DWORD);
function getdwUpos : DWORD;
property dwUpos : DWORD read getdwUpos write setdwUpos;
procedure setdwVpos(const val : DWORD);
function getdwVpos : DWORD;
property dwVpos : DWORD read getdwVpos write setdwVpos;
procedure setwButtons(const val : UINT);
function getwButtons : UINT;
property wButtons : UINT read getwButtons write setwButtons;
procedure setdwButtonNumber(const val : DWORD);
function getdwButtonNumber : DWORD;
property dwButtonNumber : DWORD read getdwButtonNumber write setdwButtonNumber;
procedure setdwPOV(const val : DWORD);
function getdwPOV : DWORD;
property dwPOV : DWORD read getdwPOV write setdwPOV;
procedure setdwReserved1(const val : DWORD);
function getdwReserved1 : DWORD;
property dwReserved1 : DWORD read getdwReserved1 write setdwReserved1;
procedure setdwReserved2(const val : DWORD);
function getdwReserved2 : DWORD;
property dwReserved2 : DWORD read getdwReserved2 write setdwReserved2;
end;
type __MCI_ANIM_OPEN_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_ANIM_OPEN_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __MCI_ANIM_OPEN_PARMSA__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_ANIM_OPEN_PARMSA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __MCI_ANIM_OPEN_PARMSW__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_ANIM_OPEN_PARMSW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __MCI_ANIM_PLAY_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_ANIM_PLAY_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwFrom(const val : DWORD);
function getdwFrom : DWORD;
property dwFrom : DWORD read getdwFrom write setdwFrom;
procedure setdwTo(const val : DWORD);
function getdwTo : DWORD;
property dwTo : DWORD read getdwTo write setdwTo;
procedure setdwSpeed(const val : DWORD);
function getdwSpeed : DWORD;
property dwSpeed : DWORD read getdwSpeed write setdwSpeed;
end;
type __MCI_ANIM_RECT_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_ANIM_RECT_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __MCI_ANIM_STEP_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_ANIM_STEP_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwFrames(const val : DWORD);
function getdwFrames : DWORD;
property dwFrames : DWORD read getdwFrames write setdwFrames;
end;
type __MCI_ANIM_UPDATE_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_ANIM_UPDATE_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __MCI_ANIM_WINDOW_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_ANIM_WINDOW_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setnCmdShow(const val : UINT);
function getnCmdShow : UINT;
property nCmdShow : UINT read getnCmdShow write setnCmdShow;
end;
type __MCI_ANIM_WINDOW_PARMSA__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_ANIM_WINDOW_PARMSA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setnCmdShow(const val : UINT);
function getnCmdShow : UINT;
property nCmdShow : UINT read getnCmdShow write setnCmdShow;
end;
type __MCI_ANIM_WINDOW_PARMSW__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_ANIM_WINDOW_PARMSW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setnCmdShow(const val : UINT);
function getnCmdShow : UINT;
property nCmdShow : UINT read getnCmdShow write setnCmdShow;
end;
type __MCI_BREAK_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_BREAK_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setnVirtKey(const val : Integer);
function getnVirtKey : Integer;
property nVirtKey : Integer read getnVirtKey write setnVirtKey;
end;
type __MCI_GENERIC_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_GENERIC_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __MCI_GETDEVCAPS_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_GETDEVCAPS_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwReturn(const val : DWORD);
function getdwReturn : DWORD;
property dwReturn : DWORD read getdwReturn write setdwReturn;
procedure setdwItem(const val : DWORD);
function getdwItem : DWORD;
property dwItem : DWORD read getdwItem write setdwItem;
end;
type __MCI_INFO_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_INFO_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwRetSize(const val : DWORD);
function getdwRetSize : DWORD;
property dwRetSize : DWORD read getdwRetSize write setdwRetSize;
end;
type __MCI_INFO_PARMSA__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_INFO_PARMSA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwRetSize(const val : DWORD);
function getdwRetSize : DWORD;
property dwRetSize : DWORD read getdwRetSize write setdwRetSize;
end;
type __MCI_INFO_PARMSW__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_INFO_PARMSW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwRetSize(const val : DWORD);
function getdwRetSize : DWORD;
property dwRetSize : DWORD read getdwRetSize write setdwRetSize;
end;
type __MCI_LOAD_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_LOAD_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __MCI_LOAD_PARMSA__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_LOAD_PARMSA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __MCI_LOAD_PARMSW__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_LOAD_PARMSW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __MCI_OPEN_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_OPEN_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
end;
type __MCI_OPEN_PARMSA__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_OPEN_PARMSA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
end;
type __MCI_OPEN_PARMSW__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_OPEN_PARMSW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
end;
type __MCI_OVLY_LOAD_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_OVLY_LOAD_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __MCI_OVLY_LOAD_PARMSA__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_OVLY_LOAD_PARMSA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __MCI_OVLY_LOAD_PARMSW__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_OVLY_LOAD_PARMSW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __MCI_OVLY_OPEN_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_OVLY_OPEN_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __MCI_OVLY_OPEN_PARMSA__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_OVLY_OPEN_PARMSA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __MCI_OVLY_OPEN_PARMSW__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_OVLY_OPEN_PARMSW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __MCI_OVLY_RECT_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_OVLY_RECT_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __MCI_OVLY_SAVE_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_OVLY_SAVE_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __MCI_OVLY_SAVE_PARMSA__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_OVLY_SAVE_PARMSA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __MCI_OVLY_SAVE_PARMSW__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_OVLY_SAVE_PARMSW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __MCI_OVLY_WINDOW_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_OVLY_WINDOW_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setnCmdShow(const val : UINT);
function getnCmdShow : UINT;
property nCmdShow : UINT read getnCmdShow write setnCmdShow;
end;
type __MCI_OVLY_WINDOW_PARMSA__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_OVLY_WINDOW_PARMSA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setnCmdShow(const val : UINT);
function getnCmdShow : UINT;
property nCmdShow : UINT read getnCmdShow write setnCmdShow;
end;
type __MCI_OVLY_WINDOW_PARMSW__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_OVLY_WINDOW_PARMSW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setnCmdShow(const val : UINT);
function getnCmdShow : UINT;
property nCmdShow : UINT read getnCmdShow write setnCmdShow;
end;
type __MCI_PLAY_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_PLAY_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwFrom(const val : DWORD);
function getdwFrom : DWORD;
property dwFrom : DWORD read getdwFrom write setdwFrom;
procedure setdwTo(const val : DWORD);
function getdwTo : DWORD;
property dwTo : DWORD read getdwTo write setdwTo;
end;
type __MCI_RECORD_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_RECORD_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwFrom(const val : DWORD);
function getdwFrom : DWORD;
property dwFrom : DWORD read getdwFrom write setdwFrom;
procedure setdwTo(const val : DWORD);
function getdwTo : DWORD;
property dwTo : DWORD read getdwTo write setdwTo;
end;
type __MCI_SAVE_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_SAVE_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __MCI_SAVE_PARMSA__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_SAVE_PARMSA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __MCI_SAVE_PARMSW__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_SAVE_PARMSW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __MCI_SEEK_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_SEEK_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwTo(const val : DWORD);
function getdwTo : DWORD;
property dwTo : DWORD read getdwTo write setdwTo;
end;
type __MCI_SEQ_SET_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_SEQ_SET_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwTimeFormat(const val : DWORD);
function getdwTimeFormat : DWORD;
property dwTimeFormat : DWORD read getdwTimeFormat write setdwTimeFormat;
procedure setdwAudio(const val : DWORD);
function getdwAudio : DWORD;
property dwAudio : DWORD read getdwAudio write setdwAudio;
procedure setdwTempo(const val : DWORD);
function getdwTempo : DWORD;
property dwTempo : DWORD read getdwTempo write setdwTempo;
procedure setdwPort(const val : DWORD);
function getdwPort : DWORD;
property dwPort : DWORD read getdwPort write setdwPort;
procedure setdwSlave(const val : DWORD);
function getdwSlave : DWORD;
property dwSlave : DWORD read getdwSlave write setdwSlave;
procedure setdwMaster(const val : DWORD);
function getdwMaster : DWORD;
property dwMaster : DWORD read getdwMaster write setdwMaster;
procedure setdwOffset(const val : DWORD);
function getdwOffset : DWORD;
property dwOffset : DWORD read getdwOffset write setdwOffset;
end;
type __MCI_SET_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_SET_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwTimeFormat(const val : DWORD);
function getdwTimeFormat : DWORD;
property dwTimeFormat : DWORD read getdwTimeFormat write setdwTimeFormat;
procedure setdwAudio(const val : DWORD);
function getdwAudio : DWORD;
property dwAudio : DWORD read getdwAudio write setdwAudio;
end;
type __MCI_STATUS_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_STATUS_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwReturn(const val : DWORD);
function getdwReturn : DWORD;
property dwReturn : DWORD read getdwReturn write setdwReturn;
procedure setdwItem(const val : DWORD);
function getdwItem : DWORD;
property dwItem : DWORD read getdwItem write setdwItem;
procedure setdwTrack(const val : DWORD);
function getdwTrack : DWORD;
property dwTrack : DWORD read getdwTrack write setdwTrack;
end;
type __MCI_SYSINFO_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_SYSINFO_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwRetSize(const val : DWORD);
function getdwRetSize : DWORD;
property dwRetSize : DWORD read getdwRetSize write setdwRetSize;
procedure setdwNumber(const val : DWORD);
function getdwNumber : DWORD;
property dwNumber : DWORD read getdwNumber write setdwNumber;
procedure setwDeviceType(const val : UINT);
function getwDeviceType : UINT;
property wDeviceType : UINT read getwDeviceType write setwDeviceType;
end;
type __MCI_SYSINFO_PARMSA__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_SYSINFO_PARMSA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwRetSize(const val : DWORD);
function getdwRetSize : DWORD;
property dwRetSize : DWORD read getdwRetSize write setdwRetSize;
procedure setdwNumber(const val : DWORD);
function getdwNumber : DWORD;
property dwNumber : DWORD read getdwNumber write setdwNumber;
procedure setwDeviceType(const val : UINT);
function getwDeviceType : UINT;
property wDeviceType : UINT read getwDeviceType write setwDeviceType;
end;
type __MCI_SYSINFO_PARMSW__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_SYSINFO_PARMSW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwRetSize(const val : DWORD);
function getdwRetSize : DWORD;
property dwRetSize : DWORD read getdwRetSize write setdwRetSize;
procedure setdwNumber(const val : DWORD);
function getdwNumber : DWORD;
property dwNumber : DWORD read getdwNumber write setdwNumber;
procedure setwDeviceType(const val : UINT);
function getwDeviceType : UINT;
property wDeviceType : UINT read getwDeviceType write setwDeviceType;
end;
type __MCI_VD_ESCAPE_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_VD_ESCAPE_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __MCI_VD_ESCAPE_PARMSA__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_VD_ESCAPE_PARMSA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __MCI_VD_ESCAPE_PARMSW__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_VD_ESCAPE_PARMSW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __MCI_VD_PLAY_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_VD_PLAY_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwFrom(const val : DWORD);
function getdwFrom : DWORD;
property dwFrom : DWORD read getdwFrom write setdwFrom;
procedure setdwTo(const val : DWORD);
function getdwTo : DWORD;
property dwTo : DWORD read getdwTo write setdwTo;
procedure setdwSpeed(const val : DWORD);
function getdwSpeed : DWORD;
property dwSpeed : DWORD read getdwSpeed write setdwSpeed;
end;
type __MCI_VD_STEP_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_VD_STEP_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwFrames(const val : DWORD);
function getdwFrames : DWORD;
property dwFrames : DWORD read getdwFrames write setdwFrames;
end;
type __MCI_WAVE_DELETE_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_WAVE_DELETE_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwFrom(const val : DWORD);
function getdwFrom : DWORD;
property dwFrom : DWORD read getdwFrom write setdwFrom;
procedure setdwTo(const val : DWORD);
function getdwTo : DWORD;
property dwTo : DWORD read getdwTo write setdwTo;
end;
type __MCI_WAVE_OPEN_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_WAVE_OPEN_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
procedure setdwBufferSeconds(const val : DWORD);
function getdwBufferSeconds : DWORD;
property dwBufferSeconds : DWORD read getdwBufferSeconds write setdwBufferSeconds;
end;
type __MCI_WAVE_OPEN_PARMSA__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_WAVE_OPEN_PARMSA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
procedure setdwBufferSeconds(const val : DWORD);
function getdwBufferSeconds : DWORD;
property dwBufferSeconds : DWORD read getdwBufferSeconds write setdwBufferSeconds;
end;
type __MCI_WAVE_OPEN_PARMSW__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_WAVE_OPEN_PARMSW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
procedure setdwBufferSeconds(const val : DWORD);
function getdwBufferSeconds : DWORD;
property dwBufferSeconds : DWORD read getdwBufferSeconds write setdwBufferSeconds;
end;
type __MCI_WAVE_SET_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : MCI_WAVE_SET_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwTimeFormat(const val : DWORD);
function getdwTimeFormat : DWORD;
property dwTimeFormat : DWORD read getdwTimeFormat write setdwTimeFormat;
procedure setdwAudio(const val : DWORD);
function getdwAudio : DWORD;
property dwAudio : DWORD read getdwAudio write setdwAudio;
procedure setwInput(const val : UINT);
function getwInput : UINT;
property wInput : UINT read getwInput write setwInput;
procedure setwOutput(const val : UINT);
function getwOutput : UINT;
property wOutput : UINT read getwOutput write setwOutput;
procedure setwFormatTag(const val : Word);
function getwFormatTag : Word;
property wFormatTag : Word read getwFormatTag write setwFormatTag;
procedure setwReserved2(const val : Word);
function getwReserved2 : Word;
property wReserved2 : Word read getwReserved2 write setwReserved2;
procedure setnChannels(const val : Word);
function getnChannels : Word;
property nChannels : Word read getnChannels write setnChannels;
procedure setwReserved3(const val : Word);
function getwReserved3 : Word;
property wReserved3 : Word read getwReserved3 write setwReserved3;
procedure setnSamplesPerSec(const val : DWORD);
function getnSamplesPerSec : DWORD;
property nSamplesPerSec : DWORD read getnSamplesPerSec write setnSamplesPerSec;
procedure setnAvgBytesPerSec(const val : DWORD);
function getnAvgBytesPerSec : DWORD;
property nAvgBytesPerSec : DWORD read getnAvgBytesPerSec write setnAvgBytesPerSec;
procedure setnBlockAlign(const val : Word);
function getnBlockAlign : Word;
property nBlockAlign : Word read getnBlockAlign write setnBlockAlign;
procedure setwReserved4(const val : Word);
function getwReserved4 : Word;
property wReserved4 : Word read getwReserved4 write setwReserved4;
procedure setwBitsPerSample(const val : Word);
function getwBitsPerSample : Word;
property wBitsPerSample : Word read getwBitsPerSample write setwBitsPerSample;
procedure setwReserved5(const val : Word);
function getwReserved5 : Word;
property wReserved5 : Word read getwReserved5 write setwReserved5;
end;
type __MIDIEVENT__Wrapper = class(TDCRecordWrapper)
private
fR : MIDIEVENT;
public
function GetRecordPtr : pointer; override;
published
procedure setdwDeltaTime(const val : DWORD);
function getdwDeltaTime : DWORD;
property dwDeltaTime : DWORD read getdwDeltaTime write setdwDeltaTime;
procedure setdwStreamID(const val : DWORD);
function getdwStreamID : DWORD;
property dwStreamID : DWORD read getdwStreamID write setdwStreamID;
procedure setdwEvent(const val : DWORD);
function getdwEvent : DWORD;
property dwEvent : DWORD read getdwEvent write setdwEvent;
end;
type __midievent_tag__Wrapper = class(TDCRecordWrapper)
private
fR : midievent_tag;
public
function GetRecordPtr : pointer; override;
published
procedure setdwDeltaTime(const val : DWORD);
function getdwDeltaTime : DWORD;
property dwDeltaTime : DWORD read getdwDeltaTime write setdwDeltaTime;
procedure setdwStreamID(const val : DWORD);
function getdwStreamID : DWORD;
property dwStreamID : DWORD read getdwStreamID write setdwStreamID;
procedure setdwEvent(const val : DWORD);
function getdwEvent : DWORD;
property dwEvent : DWORD read getdwEvent write setdwEvent;
end;
type __MIDIHDR__Wrapper = class(TDCRecordWrapper)
private
fR : MIDIHDR;
public
function GetRecordPtr : pointer; override;
published
procedure setdwBufferLength(const val : DWORD);
function getdwBufferLength : DWORD;
property dwBufferLength : DWORD read getdwBufferLength write setdwBufferLength;
procedure setdwBytesRecorded(const val : DWORD);
function getdwBytesRecorded : DWORD;
property dwBytesRecorded : DWORD read getdwBytesRecorded write setdwBytesRecorded;
procedure setdwUser(const val : DWORD);
function getdwUser : DWORD;
property dwUser : DWORD read getdwUser write setdwUser;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setreserved(const val : DWORD);
function getreserved : DWORD;
property reserved : DWORD read getreserved write setreserved;
procedure setdwOffset(const val : DWORD);
function getdwOffset : DWORD;
property dwOffset : DWORD read getdwOffset write setdwOffset;
end;
type __midihdr_tag__Wrapper = class(TDCRecordWrapper)
private
fR : midihdr_tag;
public
function GetRecordPtr : pointer; override;
published
procedure setdwBufferLength(const val : DWORD);
function getdwBufferLength : DWORD;
property dwBufferLength : DWORD read getdwBufferLength write setdwBufferLength;
procedure setdwBytesRecorded(const val : DWORD);
function getdwBytesRecorded : DWORD;
property dwBytesRecorded : DWORD read getdwBytesRecorded write setdwBytesRecorded;
procedure setdwUser(const val : DWORD);
function getdwUser : DWORD;
property dwUser : DWORD read getdwUser write setdwUser;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setreserved(const val : DWORD);
function getreserved : DWORD;
property reserved : DWORD read getreserved write setreserved;
procedure setdwOffset(const val : DWORD);
function getdwOffset : DWORD;
property dwOffset : DWORD read getdwOffset write setdwOffset;
end;
type __MIDIINCAPS__Wrapper = class(TDCRecordWrapper)
private
fR : MIDIINCAPS;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __MIDIINCAPSA__Wrapper = class(TDCRecordWrapper)
private
fR : MIDIINCAPSA;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __MIDIINCAPSW__Wrapper = class(TDCRecordWrapper)
private
fR : MIDIINCAPSW;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __MIDIOUTCAPS__Wrapper = class(TDCRecordWrapper)
private
fR : MIDIOUTCAPS;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setwTechnology(const val : Word);
function getwTechnology : Word;
property wTechnology : Word read getwTechnology write setwTechnology;
procedure setwVoices(const val : Word);
function getwVoices : Word;
property wVoices : Word read getwVoices write setwVoices;
procedure setwNotes(const val : Word);
function getwNotes : Word;
property wNotes : Word read getwNotes write setwNotes;
procedure setwChannelMask(const val : Word);
function getwChannelMask : Word;
property wChannelMask : Word read getwChannelMask write setwChannelMask;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __MIDIOUTCAPSA__Wrapper = class(TDCRecordWrapper)
private
fR : MIDIOUTCAPSA;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setwTechnology(const val : Word);
function getwTechnology : Word;
property wTechnology : Word read getwTechnology write setwTechnology;
procedure setwVoices(const val : Word);
function getwVoices : Word;
property wVoices : Word read getwVoices write setwVoices;
procedure setwNotes(const val : Word);
function getwNotes : Word;
property wNotes : Word read getwNotes write setwNotes;
procedure setwChannelMask(const val : Word);
function getwChannelMask : Word;
property wChannelMask : Word read getwChannelMask write setwChannelMask;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __MIDIOUTCAPSW__Wrapper = class(TDCRecordWrapper)
private
fR : MIDIOUTCAPSW;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setwTechnology(const val : Word);
function getwTechnology : Word;
property wTechnology : Word read getwTechnology write setwTechnology;
procedure setwVoices(const val : Word);
function getwVoices : Word;
property wVoices : Word read getwVoices write setwVoices;
procedure setwNotes(const val : Word);
function getwNotes : Word;
property wNotes : Word read getwNotes write setwNotes;
procedure setwChannelMask(const val : Word);
function getwChannelMask : Word;
property wChannelMask : Word read getwChannelMask write setwChannelMask;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __MIDIPROPTEMPO__Wrapper = class(TDCRecordWrapper)
private
fR : MIDIPROPTEMPO;
public
function GetRecordPtr : pointer; override;
published
procedure setcbStruct(const val : DWORD);
function getcbStruct : DWORD;
property cbStruct : DWORD read getcbStruct write setcbStruct;
procedure setdwTempo(const val : DWORD);
function getdwTempo : DWORD;
property dwTempo : DWORD read getdwTempo write setdwTempo;
end;
type __midiproptempo_tag__Wrapper = class(TDCRecordWrapper)
private
fR : midiproptempo_tag;
public
function GetRecordPtr : pointer; override;
published
procedure setcbStruct(const val : DWORD);
function getcbStruct : DWORD;
property cbStruct : DWORD read getcbStruct write setcbStruct;
procedure setdwTempo(const val : DWORD);
function getdwTempo : DWORD;
property dwTempo : DWORD read getdwTempo write setdwTempo;
end;
type __MIDIPROPTIMEDIV__Wrapper = class(TDCRecordWrapper)
private
fR : MIDIPROPTIMEDIV;
public
function GetRecordPtr : pointer; override;
published
procedure setcbStruct(const val : DWORD);
function getcbStruct : DWORD;
property cbStruct : DWORD read getcbStruct write setcbStruct;
procedure setdwTimeDiv(const val : DWORD);
function getdwTimeDiv : DWORD;
property dwTimeDiv : DWORD read getdwTimeDiv write setdwTimeDiv;
end;
type __midiproptimediv_tag__Wrapper = class(TDCRecordWrapper)
private
fR : midiproptimediv_tag;
public
function GetRecordPtr : pointer; override;
published
procedure setcbStruct(const val : DWORD);
function getcbStruct : DWORD;
property cbStruct : DWORD read getcbStruct write setcbStruct;
procedure setdwTimeDiv(const val : DWORD);
function getdwTimeDiv : DWORD;
property dwTimeDiv : DWORD read getdwTimeDiv write setdwTimeDiv;
end;
type __MIDISTRMBUFFVER__Wrapper = class(TDCRecordWrapper)
private
fR : MIDISTRMBUFFVER;
public
function GetRecordPtr : pointer; override;
published
procedure setdwVersion(const val : DWORD);
function getdwVersion : DWORD;
property dwVersion : DWORD read getdwVersion write setdwVersion;
procedure setdwMid(const val : DWORD);
function getdwMid : DWORD;
property dwMid : DWORD read getdwMid write setdwMid;
procedure setdwOEMVersion(const val : DWORD);
function getdwOEMVersion : DWORD;
property dwOEMVersion : DWORD read getdwOEMVersion write setdwOEMVersion;
end;
type __midistrmbuffver_tag__Wrapper = class(TDCRecordWrapper)
private
fR : midistrmbuffver_tag;
public
function GetRecordPtr : pointer; override;
published
procedure setdwVersion(const val : DWORD);
function getdwVersion : DWORD;
property dwVersion : DWORD read getdwVersion write setdwVersion;
procedure setdwMid(const val : DWORD);
function getdwMid : DWORD;
property dwMid : DWORD read getdwMid write setdwMid;
procedure setdwOEMVersion(const val : DWORD);
function getdwOEMVersion : DWORD;
property dwOEMVersion : DWORD read getdwOEMVersion write setdwOEMVersion;
end;
type __MIXERCAPS__Wrapper = class(TDCRecordWrapper)
private
fR : MIXERCAPS;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setfdwSupport(const val : DWORD);
function getfdwSupport : DWORD;
property fdwSupport : DWORD read getfdwSupport write setfdwSupport;
procedure setcDestinations(const val : DWORD);
function getcDestinations : DWORD;
property cDestinations : DWORD read getcDestinations write setcDestinations;
end;
type __MIXERCAPSA__Wrapper = class(TDCRecordWrapper)
private
fR : MIXERCAPSA;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setfdwSupport(const val : DWORD);
function getfdwSupport : DWORD;
property fdwSupport : DWORD read getfdwSupport write setfdwSupport;
procedure setcDestinations(const val : DWORD);
function getcDestinations : DWORD;
property cDestinations : DWORD read getcDestinations write setcDestinations;
end;
type __MIXERCAPSW__Wrapper = class(TDCRecordWrapper)
private
fR : MIXERCAPSW;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setfdwSupport(const val : DWORD);
function getfdwSupport : DWORD;
property fdwSupport : DWORD read getfdwSupport write setfdwSupport;
procedure setcDestinations(const val : DWORD);
function getcDestinations : DWORD;
property cDestinations : DWORD read getcDestinations write setcDestinations;
end;
type __MIXERCONTROLDETAILS_BOOLEAN__Wrapper = class(TDCRecordWrapper)
private
fR : MIXERCONTROLDETAILS_BOOLEAN;
public
function GetRecordPtr : pointer; override;
published
procedure setfValue(const val : Longint);
function getfValue : Longint;
property fValue : Longint read getfValue write setfValue;
end;
type __MIXERCONTROLDETAILS_LISTTEXT__Wrapper = class(TDCRecordWrapper)
private
fR : MIXERCONTROLDETAILS_LISTTEXT;
public
function GetRecordPtr : pointer; override;
published
procedure setdwParam1(const val : DWORD);
function getdwParam1 : DWORD;
property dwParam1 : DWORD read getdwParam1 write setdwParam1;
procedure setdwParam2(const val : DWORD);
function getdwParam2 : DWORD;
property dwParam2 : DWORD read getdwParam2 write setdwParam2;
end;
type __MIXERCONTROLDETAILS_LISTTEXTA__Wrapper = class(TDCRecordWrapper)
private
fR : MIXERCONTROLDETAILS_LISTTEXTA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwParam1(const val : DWORD);
function getdwParam1 : DWORD;
property dwParam1 : DWORD read getdwParam1 write setdwParam1;
procedure setdwParam2(const val : DWORD);
function getdwParam2 : DWORD;
property dwParam2 : DWORD read getdwParam2 write setdwParam2;
end;
type __MIXERCONTROLDETAILS_LISTTEXTW__Wrapper = class(TDCRecordWrapper)
private
fR : MIXERCONTROLDETAILS_LISTTEXTW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwParam1(const val : DWORD);
function getdwParam1 : DWORD;
property dwParam1 : DWORD read getdwParam1 write setdwParam1;
procedure setdwParam2(const val : DWORD);
function getdwParam2 : DWORD;
property dwParam2 : DWORD read getdwParam2 write setdwParam2;
end;
type __MIXERCONTROLDETAILS_SIGNED__Wrapper = class(TDCRecordWrapper)
private
fR : MIXERCONTROLDETAILS_SIGNED;
public
function GetRecordPtr : pointer; override;
published
procedure setlValue(const val : Longint);
function getlValue : Longint;
property lValue : Longint read getlValue write setlValue;
end;
type __MIXERCONTROLDETAILS_UNSIGNED__Wrapper = class(TDCRecordWrapper)
private
fR : MIXERCONTROLDETAILS_UNSIGNED;
public
function GetRecordPtr : pointer; override;
published
procedure setdwValue(const val : DWORD);
function getdwValue : DWORD;
property dwValue : DWORD read getdwValue write setdwValue;
end;
type __MIXERLINE__Wrapper = class(TDCRecordWrapper)
private
fR : MIXERLINE;
public
function GetRecordPtr : pointer; override;
published
procedure setcbStruct(const val : DWORD);
function getcbStruct : DWORD;
property cbStruct : DWORD read getcbStruct write setcbStruct;
procedure setdwDestination(const val : DWORD);
function getdwDestination : DWORD;
property dwDestination : DWORD read getdwDestination write setdwDestination;
procedure setdwSource(const val : DWORD);
function getdwSource : DWORD;
property dwSource : DWORD read getdwSource write setdwSource;
procedure setdwLineID(const val : DWORD);
function getdwLineID : DWORD;
property dwLineID : DWORD read getdwLineID write setdwLineID;
procedure setfdwLine(const val : DWORD);
function getfdwLine : DWORD;
property fdwLine : DWORD read getfdwLine write setfdwLine;
procedure setdwUser(const val : DWORD);
function getdwUser : DWORD;
property dwUser : DWORD read getdwUser write setdwUser;
procedure setdwComponentType(const val : DWORD);
function getdwComponentType : DWORD;
property dwComponentType : DWORD read getdwComponentType write setdwComponentType;
procedure setcChannels(const val : DWORD);
function getcChannels : DWORD;
property cChannels : DWORD read getcChannels write setcChannels;
procedure setcConnections(const val : DWORD);
function getcConnections : DWORD;
property cConnections : DWORD read getcConnections write setcConnections;
procedure setcControls(const val : DWORD);
function getcControls : DWORD;
property cControls : DWORD read getcControls write setcControls;
end;
type __MIXERLINEA__Wrapper = class(TDCRecordWrapper)
private
fR : MIXERLINEA;
public
function GetRecordPtr : pointer; override;
published
procedure setcbStruct(const val : DWORD);
function getcbStruct : DWORD;
property cbStruct : DWORD read getcbStruct write setcbStruct;
procedure setdwDestination(const val : DWORD);
function getdwDestination : DWORD;
property dwDestination : DWORD read getdwDestination write setdwDestination;
procedure setdwSource(const val : DWORD);
function getdwSource : DWORD;
property dwSource : DWORD read getdwSource write setdwSource;
procedure setdwLineID(const val : DWORD);
function getdwLineID : DWORD;
property dwLineID : DWORD read getdwLineID write setdwLineID;
procedure setfdwLine(const val : DWORD);
function getfdwLine : DWORD;
property fdwLine : DWORD read getfdwLine write setfdwLine;
procedure setdwUser(const val : DWORD);
function getdwUser : DWORD;
property dwUser : DWORD read getdwUser write setdwUser;
procedure setdwComponentType(const val : DWORD);
function getdwComponentType : DWORD;
property dwComponentType : DWORD read getdwComponentType write setdwComponentType;
procedure setcChannels(const val : DWORD);
function getcChannels : DWORD;
property cChannels : DWORD read getcChannels write setcChannels;
procedure setcConnections(const val : DWORD);
function getcConnections : DWORD;
property cConnections : DWORD read getcConnections write setcConnections;
procedure setcControls(const val : DWORD);
function getcControls : DWORD;
property cControls : DWORD read getcControls write setcControls;
end;
type __MIXERLINECONTROLS__Wrapper = class(TDCRecordWrapper)
private
fR : MIXERLINECONTROLS;
public
function GetRecordPtr : pointer; override;
published
procedure setcbStruct(const val : DWORD);
function getcbStruct : DWORD;
property cbStruct : DWORD read getcbStruct write setcbStruct;
procedure setdwLineID(const val : DWORD);
function getdwLineID : DWORD;
property dwLineID : DWORD read getdwLineID write setdwLineID;
procedure setdwControlID(const val : DWORD);
function getdwControlID : DWORD;
property dwControlID : DWORD read getdwControlID write setdwControlID;
procedure setdwControlType(const val : DWORD);
function getdwControlType : DWORD;
property dwControlType : DWORD read getdwControlType write setdwControlType;
procedure setcControls(const val : DWORD);
function getcControls : DWORD;
property cControls : DWORD read getcControls write setcControls;
procedure setcbmxctrl(const val : DWORD);
function getcbmxctrl : DWORD;
property cbmxctrl : DWORD read getcbmxctrl write setcbmxctrl;
end;
type __MIXERLINECONTROLSA__Wrapper = class(TDCRecordWrapper)
private
fR : MIXERLINECONTROLSA;
public
function GetRecordPtr : pointer; override;
published
procedure setcbStruct(const val : DWORD);
function getcbStruct : DWORD;
property cbStruct : DWORD read getcbStruct write setcbStruct;
procedure setdwLineID(const val : DWORD);
function getdwLineID : DWORD;
property dwLineID : DWORD read getdwLineID write setdwLineID;
procedure setdwControlID(const val : DWORD);
function getdwControlID : DWORD;
property dwControlID : DWORD read getdwControlID write setdwControlID;
procedure setdwControlType(const val : DWORD);
function getdwControlType : DWORD;
property dwControlType : DWORD read getdwControlType write setdwControlType;
procedure setcControls(const val : DWORD);
function getcControls : DWORD;
property cControls : DWORD read getcControls write setcControls;
procedure setcbmxctrl(const val : DWORD);
function getcbmxctrl : DWORD;
property cbmxctrl : DWORD read getcbmxctrl write setcbmxctrl;
end;
type __MIXERLINECONTROLSW__Wrapper = class(TDCRecordWrapper)
private
fR : MIXERLINECONTROLSW;
public
function GetRecordPtr : pointer; override;
published
procedure setcbStruct(const val : DWORD);
function getcbStruct : DWORD;
property cbStruct : DWORD read getcbStruct write setcbStruct;
procedure setdwLineID(const val : DWORD);
function getdwLineID : DWORD;
property dwLineID : DWORD read getdwLineID write setdwLineID;
procedure setdwControlID(const val : DWORD);
function getdwControlID : DWORD;
property dwControlID : DWORD read getdwControlID write setdwControlID;
procedure setdwControlType(const val : DWORD);
function getdwControlType : DWORD;
property dwControlType : DWORD read getdwControlType write setdwControlType;
procedure setcControls(const val : DWORD);
function getcControls : DWORD;
property cControls : DWORD read getcControls write setcControls;
procedure setcbmxctrl(const val : DWORD);
function getcbmxctrl : DWORD;
property cbmxctrl : DWORD read getcbmxctrl write setcbmxctrl;
end;
type __MIXERLINEW__Wrapper = class(TDCRecordWrapper)
private
fR : MIXERLINEW;
public
function GetRecordPtr : pointer; override;
published
procedure setcbStruct(const val : DWORD);
function getcbStruct : DWORD;
property cbStruct : DWORD read getcbStruct write setcbStruct;
procedure setdwDestination(const val : DWORD);
function getdwDestination : DWORD;
property dwDestination : DWORD read getdwDestination write setdwDestination;
procedure setdwSource(const val : DWORD);
function getdwSource : DWORD;
property dwSource : DWORD read getdwSource write setdwSource;
procedure setdwLineID(const val : DWORD);
function getdwLineID : DWORD;
property dwLineID : DWORD read getdwLineID write setdwLineID;
procedure setfdwLine(const val : DWORD);
function getfdwLine : DWORD;
property fdwLine : DWORD read getfdwLine write setfdwLine;
procedure setdwUser(const val : DWORD);
function getdwUser : DWORD;
property dwUser : DWORD read getdwUser write setdwUser;
procedure setdwComponentType(const val : DWORD);
function getdwComponentType : DWORD;
property dwComponentType : DWORD read getdwComponentType write setdwComponentType;
procedure setcChannels(const val : DWORD);
function getcChannels : DWORD;
property cChannels : DWORD read getcChannels write setcChannels;
procedure setcConnections(const val : DWORD);
function getcConnections : DWORD;
property cConnections : DWORD read getcConnections write setcConnections;
procedure setcControls(const val : DWORD);
function getcControls : DWORD;
property cControls : DWORD read getcControls write setcControls;
end;
type __MMCKINFO__Wrapper = class(TDCRecordWrapper)
private
fR : MMCKINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setckid(const val : FOURCC);
function getckid : FOURCC;
property ckid : FOURCC read getckid write setckid;
procedure setcksize(const val : DWORD);
function getcksize : DWORD;
property cksize : DWORD read getcksize write setcksize;
procedure setfccType(const val : FOURCC);
function getfccType : FOURCC;
property fccType : FOURCC read getfccType write setfccType;
procedure setdwDataOffset(const val : DWORD);
function getdwDataOffset : DWORD;
property dwDataOffset : DWORD read getdwDataOffset write setdwDataOffset;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type __MMIOINFO__Wrapper = class(TDCRecordWrapper)
private
fR : MMIOINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setfccIOProc(const val : FOURCC);
function getfccIOProc : FOURCC;
property fccIOProc : FOURCC read getfccIOProc write setfccIOProc;
procedure setwErrorRet(const val : UINT);
function getwErrorRet : UINT;
property wErrorRet : UINT read getwErrorRet write setwErrorRet;
procedure setcchBuffer(const val : Longint);
function getcchBuffer : Longint;
property cchBuffer : Longint read getcchBuffer write setcchBuffer;
procedure setlBufOffset(const val : Longint);
function getlBufOffset : Longint;
property lBufOffset : Longint read getlBufOffset write setlBufOffset;
procedure setlDiskOffset(const val : Longint);
function getlDiskOffset : Longint;
property lDiskOffset : Longint read getlDiskOffset write setlDiskOffset;
procedure setdwReserved1(const val : DWORD);
function getdwReserved1 : DWORD;
property dwReserved1 : DWORD read getdwReserved1 write setdwReserved1;
procedure setdwReserved2(const val : DWORD);
function getdwReserved2 : DWORD;
property dwReserved2 : DWORD read getdwReserved2 write setdwReserved2;
procedure setHMMIO(const val : HMMIO);
function getHMMIO : HMMIO;
property HMMIO : HMMIO read getHMMIO write setHMMIO;
end;
type __MMTIME__Wrapper = class(TDCRecordWrapper)
private
fR : MMTIME;
public
function GetRecordPtr : pointer; override;
published
procedure setms(const val : DWORD);
function getms : DWORD;
property ms : DWORD read getms write setms;
procedure setsample(const val : DWORD);
function getsample : DWORD;
property sample : DWORD read getsample write setsample;
procedure setcb(const val : DWORD);
function getcb : DWORD;
property cb : DWORD read getcb write setcb;
procedure setticks(const val : DWORD);
function getticks : DWORD;
property ticks : DWORD read getticks write setticks;
procedure sethour(const val : Byte);
function gethour : Byte;
property hour : Byte read gethour write sethour;
procedure setmin(const val : Byte);
function getmin : Byte;
property min : Byte read getmin write setmin;
procedure setsec(const val : Byte);
function getsec : Byte;
property sec : Byte read getsec write setsec;
procedure setframe(const val : Byte);
function getframe : Byte;
property frame : Byte read getframe write setframe;
procedure setfps(const val : Byte);
function getfps : Byte;
property fps : Byte read getfps write setfps;
procedure setdummy(const val : Byte);
function getdummy : Byte;
property dummy : Byte read getdummy write setdummy;
procedure setsongptrpos(const val : DWORD);
function getsongptrpos : DWORD;
property songptrpos : DWORD read getsongptrpos write setsongptrpos;
end;
type __mmtime_tag__Wrapper = class(TDCRecordWrapper)
private
fR : mmtime_tag;
public
function GetRecordPtr : pointer; override;
published
procedure setms(const val : DWORD);
function getms : DWORD;
property ms : DWORD read getms write setms;
procedure setsample(const val : DWORD);
function getsample : DWORD;
property sample : DWORD read getsample write setsample;
procedure setcb(const val : DWORD);
function getcb : DWORD;
property cb : DWORD read getcb write setcb;
procedure setticks(const val : DWORD);
function getticks : DWORD;
property ticks : DWORD read getticks write setticks;
procedure sethour(const val : Byte);
function gethour : Byte;
property hour : Byte read gethour write sethour;
procedure setmin(const val : Byte);
function getmin : Byte;
property min : Byte read getmin write setmin;
procedure setsec(const val : Byte);
function getsec : Byte;
property sec : Byte read getsec write setsec;
procedure setframe(const val : Byte);
function getframe : Byte;
property frame : Byte read getframe write setframe;
procedure setfps(const val : Byte);
function getfps : Byte;
property fps : Byte read getfps write setfps;
procedure setdummy(const val : Byte);
function getdummy : Byte;
property dummy : Byte read getdummy write setdummy;
procedure setsongptrpos(const val : DWORD);
function getsongptrpos : DWORD;
property songptrpos : DWORD read getsongptrpos write setsongptrpos;
end;
type __PCMWAVEFORMAT__Wrapper = class(TDCRecordWrapper)
private
fR : PCMWAVEFORMAT;
public
function GetRecordPtr : pointer; override;
published
procedure setwBitsPerSample(const val : Word);
function getwBitsPerSample : Word;
property wBitsPerSample : Word read getwBitsPerSample write setwBitsPerSample;
end;
type __pcmwaveformat_tag__Wrapper = class(TDCRecordWrapper)
private
fR : pcmwaveformat_tag;
public
function GetRecordPtr : pointer; override;
published
procedure setwBitsPerSample(const val : Word);
function getwBitsPerSample : Word;
property wBitsPerSample : Word read getwBitsPerSample write setwBitsPerSample;
end;
type __tagAUXCAPS__Wrapper = class(TDCRecordWrapper)
private
fR : tagAUXCAPS;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setwTechnology(const val : Word);
function getwTechnology : Word;
property wTechnology : Word read getwTechnology write setwTechnology;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __tagAUXCAPSA__Wrapper = class(TDCRecordWrapper)
private
fR : tagAUXCAPSA;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setwTechnology(const val : Word);
function getwTechnology : Word;
property wTechnology : Word read getwTechnology write setwTechnology;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __tagAUXCAPSW__Wrapper = class(TDCRecordWrapper)
private
fR : tagAUXCAPSW;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setwTechnology(const val : Word);
function getwTechnology : Word;
property wTechnology : Word read getwTechnology write setwTechnology;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __tagDRVCONFIGINFO__Wrapper = class(TDCRecordWrapper)
private
fR : tagDRVCONFIGINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setdwDCISize(const val : DWORD);
function getdwDCISize : DWORD;
property dwDCISize : DWORD read getdwDCISize write setdwDCISize;
end;
type __tagJOYCAPS__Wrapper = class(TDCRecordWrapper)
private
fR : tagJOYCAPS;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setwXmin(const val : UINT);
function getwXmin : UINT;
property wXmin : UINT read getwXmin write setwXmin;
procedure setwXmax(const val : UINT);
function getwXmax : UINT;
property wXmax : UINT read getwXmax write setwXmax;
procedure setwYmin(const val : UINT);
function getwYmin : UINT;
property wYmin : UINT read getwYmin write setwYmin;
procedure setwYmax(const val : UINT);
function getwYmax : UINT;
property wYmax : UINT read getwYmax write setwYmax;
procedure setwZmin(const val : UINT);
function getwZmin : UINT;
property wZmin : UINT read getwZmin write setwZmin;
procedure setwZmax(const val : UINT);
function getwZmax : UINT;
property wZmax : UINT read getwZmax write setwZmax;
procedure setwNumButtons(const val : UINT);
function getwNumButtons : UINT;
property wNumButtons : UINT read getwNumButtons write setwNumButtons;
procedure setwPeriodMin(const val : UINT);
function getwPeriodMin : UINT;
property wPeriodMin : UINT read getwPeriodMin write setwPeriodMin;
procedure setwPeriodMax(const val : UINT);
function getwPeriodMax : UINT;
property wPeriodMax : UINT read getwPeriodMax write setwPeriodMax;
procedure setwRmin(const val : UINT);
function getwRmin : UINT;
property wRmin : UINT read getwRmin write setwRmin;
procedure setwRmax(const val : UINT);
function getwRmax : UINT;
property wRmax : UINT read getwRmax write setwRmax;
procedure setwUmin(const val : UINT);
function getwUmin : UINT;
property wUmin : UINT read getwUmin write setwUmin;
procedure setwUmax(const val : UINT);
function getwUmax : UINT;
property wUmax : UINT read getwUmax write setwUmax;
procedure setwVmin(const val : UINT);
function getwVmin : UINT;
property wVmin : UINT read getwVmin write setwVmin;
procedure setwVmax(const val : UINT);
function getwVmax : UINT;
property wVmax : UINT read getwVmax write setwVmax;
procedure setwCaps(const val : UINT);
function getwCaps : UINT;
property wCaps : UINT read getwCaps write setwCaps;
procedure setwMaxAxes(const val : UINT);
function getwMaxAxes : UINT;
property wMaxAxes : UINT read getwMaxAxes write setwMaxAxes;
procedure setwNumAxes(const val : UINT);
function getwNumAxes : UINT;
property wNumAxes : UINT read getwNumAxes write setwNumAxes;
procedure setwMaxButtons(const val : UINT);
function getwMaxButtons : UINT;
property wMaxButtons : UINT read getwMaxButtons write setwMaxButtons;
end;
type __tagJOYCAPSA__Wrapper = class(TDCRecordWrapper)
private
fR : tagJOYCAPSA;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setwXmin(const val : UINT);
function getwXmin : UINT;
property wXmin : UINT read getwXmin write setwXmin;
procedure setwXmax(const val : UINT);
function getwXmax : UINT;
property wXmax : UINT read getwXmax write setwXmax;
procedure setwYmin(const val : UINT);
function getwYmin : UINT;
property wYmin : UINT read getwYmin write setwYmin;
procedure setwYmax(const val : UINT);
function getwYmax : UINT;
property wYmax : UINT read getwYmax write setwYmax;
procedure setwZmin(const val : UINT);
function getwZmin : UINT;
property wZmin : UINT read getwZmin write setwZmin;
procedure setwZmax(const val : UINT);
function getwZmax : UINT;
property wZmax : UINT read getwZmax write setwZmax;
procedure setwNumButtons(const val : UINT);
function getwNumButtons : UINT;
property wNumButtons : UINT read getwNumButtons write setwNumButtons;
procedure setwPeriodMin(const val : UINT);
function getwPeriodMin : UINT;
property wPeriodMin : UINT read getwPeriodMin write setwPeriodMin;
procedure setwPeriodMax(const val : UINT);
function getwPeriodMax : UINT;
property wPeriodMax : UINT read getwPeriodMax write setwPeriodMax;
procedure setwRmin(const val : UINT);
function getwRmin : UINT;
property wRmin : UINT read getwRmin write setwRmin;
procedure setwRmax(const val : UINT);
function getwRmax : UINT;
property wRmax : UINT read getwRmax write setwRmax;
procedure setwUmin(const val : UINT);
function getwUmin : UINT;
property wUmin : UINT read getwUmin write setwUmin;
procedure setwUmax(const val : UINT);
function getwUmax : UINT;
property wUmax : UINT read getwUmax write setwUmax;
procedure setwVmin(const val : UINT);
function getwVmin : UINT;
property wVmin : UINT read getwVmin write setwVmin;
procedure setwVmax(const val : UINT);
function getwVmax : UINT;
property wVmax : UINT read getwVmax write setwVmax;
procedure setwCaps(const val : UINT);
function getwCaps : UINT;
property wCaps : UINT read getwCaps write setwCaps;
procedure setwMaxAxes(const val : UINT);
function getwMaxAxes : UINT;
property wMaxAxes : UINT read getwMaxAxes write setwMaxAxes;
procedure setwNumAxes(const val : UINT);
function getwNumAxes : UINT;
property wNumAxes : UINT read getwNumAxes write setwNumAxes;
procedure setwMaxButtons(const val : UINT);
function getwMaxButtons : UINT;
property wMaxButtons : UINT read getwMaxButtons write setwMaxButtons;
end;
type __tagJOYCAPSW__Wrapper = class(TDCRecordWrapper)
private
fR : tagJOYCAPSW;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setwXmin(const val : UINT);
function getwXmin : UINT;
property wXmin : UINT read getwXmin write setwXmin;
procedure setwXmax(const val : UINT);
function getwXmax : UINT;
property wXmax : UINT read getwXmax write setwXmax;
procedure setwYmin(const val : UINT);
function getwYmin : UINT;
property wYmin : UINT read getwYmin write setwYmin;
procedure setwYmax(const val : UINT);
function getwYmax : UINT;
property wYmax : UINT read getwYmax write setwYmax;
procedure setwZmin(const val : UINT);
function getwZmin : UINT;
property wZmin : UINT read getwZmin write setwZmin;
procedure setwZmax(const val : UINT);
function getwZmax : UINT;
property wZmax : UINT read getwZmax write setwZmax;
procedure setwNumButtons(const val : UINT);
function getwNumButtons : UINT;
property wNumButtons : UINT read getwNumButtons write setwNumButtons;
procedure setwPeriodMin(const val : UINT);
function getwPeriodMin : UINT;
property wPeriodMin : UINT read getwPeriodMin write setwPeriodMin;
procedure setwPeriodMax(const val : UINT);
function getwPeriodMax : UINT;
property wPeriodMax : UINT read getwPeriodMax write setwPeriodMax;
procedure setwRmin(const val : UINT);
function getwRmin : UINT;
property wRmin : UINT read getwRmin write setwRmin;
procedure setwRmax(const val : UINT);
function getwRmax : UINT;
property wRmax : UINT read getwRmax write setwRmax;
procedure setwUmin(const val : UINT);
function getwUmin : UINT;
property wUmin : UINT read getwUmin write setwUmin;
procedure setwUmax(const val : UINT);
function getwUmax : UINT;
property wUmax : UINT read getwUmax write setwUmax;
procedure setwVmin(const val : UINT);
function getwVmin : UINT;
property wVmin : UINT read getwVmin write setwVmin;
procedure setwVmax(const val : UINT);
function getwVmax : UINT;
property wVmax : UINT read getwVmax write setwVmax;
procedure setwCaps(const val : UINT);
function getwCaps : UINT;
property wCaps : UINT read getwCaps write setwCaps;
procedure setwMaxAxes(const val : UINT);
function getwMaxAxes : UINT;
property wMaxAxes : UINT read getwMaxAxes write setwMaxAxes;
procedure setwNumAxes(const val : UINT);
function getwNumAxes : UINT;
property wNumAxes : UINT read getwNumAxes write setwNumAxes;
procedure setwMaxButtons(const val : UINT);
function getwMaxButtons : UINT;
property wMaxButtons : UINT read getwMaxButtons write setwMaxButtons;
end;
type __tagMCI_ANIM_OPEN_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_ANIM_OPEN_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __tagMCI_ANIM_OPEN_PARMSA__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_ANIM_OPEN_PARMSA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __tagMCI_ANIM_OPEN_PARMSW__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_ANIM_OPEN_PARMSW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __tagMCI_ANIM_PLAY_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_ANIM_PLAY_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwFrom(const val : DWORD);
function getdwFrom : DWORD;
property dwFrom : DWORD read getdwFrom write setdwFrom;
procedure setdwTo(const val : DWORD);
function getdwTo : DWORD;
property dwTo : DWORD read getdwTo write setdwTo;
procedure setdwSpeed(const val : DWORD);
function getdwSpeed : DWORD;
property dwSpeed : DWORD read getdwSpeed write setdwSpeed;
end;
type __tagMCI_ANIM_RECT_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_ANIM_RECT_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __tagMCI_ANIM_STEP_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_ANIM_STEP_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwFrames(const val : DWORD);
function getdwFrames : DWORD;
property dwFrames : DWORD read getdwFrames write setdwFrames;
end;
type __tagMCI_ANIM_UPDATE_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_ANIM_UPDATE_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __tagMCI_ANIM_WINDOW_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_ANIM_WINDOW_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setnCmdShow(const val : UINT);
function getnCmdShow : UINT;
property nCmdShow : UINT read getnCmdShow write setnCmdShow;
end;
type __tagMCI_ANIM_WINDOW_PARMSA__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_ANIM_WINDOW_PARMSA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setnCmdShow(const val : UINT);
function getnCmdShow : UINT;
property nCmdShow : UINT read getnCmdShow write setnCmdShow;
end;
type __tagMCI_ANIM_WINDOW_PARMSW__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_ANIM_WINDOW_PARMSW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setnCmdShow(const val : UINT);
function getnCmdShow : UINT;
property nCmdShow : UINT read getnCmdShow write setnCmdShow;
end;
type __tagMCI_BREAK_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_BREAK_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setnVirtKey(const val : Integer);
function getnVirtKey : Integer;
property nVirtKey : Integer read getnVirtKey write setnVirtKey;
end;
type __tagMCI_GENERIC_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_GENERIC_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __tagMCI_GETDEVCAPS_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_GETDEVCAPS_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwReturn(const val : DWORD);
function getdwReturn : DWORD;
property dwReturn : DWORD read getdwReturn write setdwReturn;
procedure setdwItem(const val : DWORD);
function getdwItem : DWORD;
property dwItem : DWORD read getdwItem write setdwItem;
end;
type __tagMCI_INFO_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_INFO_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwRetSize(const val : DWORD);
function getdwRetSize : DWORD;
property dwRetSize : DWORD read getdwRetSize write setdwRetSize;
end;
type __tagMCI_INFO_PARMSA__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_INFO_PARMSA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwRetSize(const val : DWORD);
function getdwRetSize : DWORD;
property dwRetSize : DWORD read getdwRetSize write setdwRetSize;
end;
type __tagMCI_INFO_PARMSW__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_INFO_PARMSW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwRetSize(const val : DWORD);
function getdwRetSize : DWORD;
property dwRetSize : DWORD read getdwRetSize write setdwRetSize;
end;
type __tagMCI_LOAD_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_LOAD_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __tagMCI_LOAD_PARMSA__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_LOAD_PARMSA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __tagMCI_LOAD_PARMSW__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_LOAD_PARMSW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __tagMCI_OPEN_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_OPEN_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
end;
type __tagMCI_OPEN_PARMSA__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_OPEN_PARMSA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
end;
type __tagMCI_OPEN_PARMSW__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_OPEN_PARMSW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
end;
type __tagMCI_OVLY_LOAD_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_OVLY_LOAD_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __tagMCI_OVLY_LOAD_PARMSA__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_OVLY_LOAD_PARMSA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __tagMCI_OVLY_LOAD_PARMSW__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_OVLY_LOAD_PARMSW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __tagMCI_OVLY_OPEN_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_OVLY_OPEN_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __tagMCI_OVLY_OPEN_PARMSA__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_OVLY_OPEN_PARMSA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __tagMCI_OVLY_OPEN_PARMSW__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_OVLY_OPEN_PARMSW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __tagMCI_OVLY_RECT_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_OVLY_RECT_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __tagMCI_OVLY_SAVE_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_OVLY_SAVE_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __tagMCI_OVLY_SAVE_PARMSA__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_OVLY_SAVE_PARMSA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __tagMCI_OVLY_SAVE_PARMSW__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_OVLY_SAVE_PARMSW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __tagMCI_OVLY_WINDOW_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_OVLY_WINDOW_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setnCmdShow(const val : UINT);
function getnCmdShow : UINT;
property nCmdShow : UINT read getnCmdShow write setnCmdShow;
end;
type __tagMCI_OVLY_WINDOW_PARMSA__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_OVLY_WINDOW_PARMSA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setnCmdShow(const val : UINT);
function getnCmdShow : UINT;
property nCmdShow : UINT read getnCmdShow write setnCmdShow;
end;
type __tagMCI_OVLY_WINDOW_PARMSW__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_OVLY_WINDOW_PARMSW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setnCmdShow(const val : UINT);
function getnCmdShow : UINT;
property nCmdShow : UINT read getnCmdShow write setnCmdShow;
end;
type __tagMCI_PLAY_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_PLAY_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwFrom(const val : DWORD);
function getdwFrom : DWORD;
property dwFrom : DWORD read getdwFrom write setdwFrom;
procedure setdwTo(const val : DWORD);
function getdwTo : DWORD;
property dwTo : DWORD read getdwTo write setdwTo;
end;
type __tagMCI_RECORD_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_RECORD_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwFrom(const val : DWORD);
function getdwFrom : DWORD;
property dwFrom : DWORD read getdwFrom write setdwFrom;
procedure setdwTo(const val : DWORD);
function getdwTo : DWORD;
property dwTo : DWORD read getdwTo write setdwTo;
end;
type __tagMCI_SEEK_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_SEEK_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwTo(const val : DWORD);
function getdwTo : DWORD;
property dwTo : DWORD read getdwTo write setdwTo;
end;
type __tagMCI_SEQ_SET_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_SEQ_SET_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwTimeFormat(const val : DWORD);
function getdwTimeFormat : DWORD;
property dwTimeFormat : DWORD read getdwTimeFormat write setdwTimeFormat;
procedure setdwAudio(const val : DWORD);
function getdwAudio : DWORD;
property dwAudio : DWORD read getdwAudio write setdwAudio;
procedure setdwTempo(const val : DWORD);
function getdwTempo : DWORD;
property dwTempo : DWORD read getdwTempo write setdwTempo;
procedure setdwPort(const val : DWORD);
function getdwPort : DWORD;
property dwPort : DWORD read getdwPort write setdwPort;
procedure setdwSlave(const val : DWORD);
function getdwSlave : DWORD;
property dwSlave : DWORD read getdwSlave write setdwSlave;
procedure setdwMaster(const val : DWORD);
function getdwMaster : DWORD;
property dwMaster : DWORD read getdwMaster write setdwMaster;
procedure setdwOffset(const val : DWORD);
function getdwOffset : DWORD;
property dwOffset : DWORD read getdwOffset write setdwOffset;
end;
type __tagMCI_SET_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_SET_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwTimeFormat(const val : DWORD);
function getdwTimeFormat : DWORD;
property dwTimeFormat : DWORD read getdwTimeFormat write setdwTimeFormat;
procedure setdwAudio(const val : DWORD);
function getdwAudio : DWORD;
property dwAudio : DWORD read getdwAudio write setdwAudio;
end;
type __tagMCI_STATUS_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_STATUS_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwReturn(const val : DWORD);
function getdwReturn : DWORD;
property dwReturn : DWORD read getdwReturn write setdwReturn;
procedure setdwItem(const val : DWORD);
function getdwItem : DWORD;
property dwItem : DWORD read getdwItem write setdwItem;
procedure setdwTrack(const val : DWORD);
function getdwTrack : DWORD;
property dwTrack : DWORD read getdwTrack write setdwTrack;
end;
type __tagMCI_SYSINFO_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_SYSINFO_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwRetSize(const val : DWORD);
function getdwRetSize : DWORD;
property dwRetSize : DWORD read getdwRetSize write setdwRetSize;
procedure setdwNumber(const val : DWORD);
function getdwNumber : DWORD;
property dwNumber : DWORD read getdwNumber write setdwNumber;
procedure setwDeviceType(const val : UINT);
function getwDeviceType : UINT;
property wDeviceType : UINT read getwDeviceType write setwDeviceType;
end;
type __tagMCI_SYSINFO_PARMSA__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_SYSINFO_PARMSA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwRetSize(const val : DWORD);
function getdwRetSize : DWORD;
property dwRetSize : DWORD read getdwRetSize write setdwRetSize;
procedure setdwNumber(const val : DWORD);
function getdwNumber : DWORD;
property dwNumber : DWORD read getdwNumber write setdwNumber;
procedure setwDeviceType(const val : UINT);
function getwDeviceType : UINT;
property wDeviceType : UINT read getwDeviceType write setwDeviceType;
end;
type __tagMCI_SYSINFO_PARMSW__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_SYSINFO_PARMSW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwRetSize(const val : DWORD);
function getdwRetSize : DWORD;
property dwRetSize : DWORD read getdwRetSize write setdwRetSize;
procedure setdwNumber(const val : DWORD);
function getdwNumber : DWORD;
property dwNumber : DWORD read getdwNumber write setdwNumber;
procedure setwDeviceType(const val : UINT);
function getwDeviceType : UINT;
property wDeviceType : UINT read getwDeviceType write setwDeviceType;
end;
type __tagMCI_VD_ESCAPE_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_VD_ESCAPE_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __tagMCI_VD_ESCAPE_PARMSA__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_VD_ESCAPE_PARMSA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __tagMCI_VD_ESCAPE_PARMSW__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_VD_ESCAPE_PARMSW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __tagMCI_VD_PLAY_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_VD_PLAY_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwFrom(const val : DWORD);
function getdwFrom : DWORD;
property dwFrom : DWORD read getdwFrom write setdwFrom;
procedure setdwTo(const val : DWORD);
function getdwTo : DWORD;
property dwTo : DWORD read getdwTo write setdwTo;
procedure setdwSpeed(const val : DWORD);
function getdwSpeed : DWORD;
property dwSpeed : DWORD read getdwSpeed write setdwSpeed;
end;
type __tagMCI_VD_STEP_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_VD_STEP_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwFrames(const val : DWORD);
function getdwFrames : DWORD;
property dwFrames : DWORD read getdwFrames write setdwFrames;
end;
type __tagMCI_WAVE_DELETE_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_WAVE_DELETE_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwFrom(const val : DWORD);
function getdwFrom : DWORD;
property dwFrom : DWORD read getdwFrom write setdwFrom;
procedure setdwTo(const val : DWORD);
function getdwTo : DWORD;
property dwTo : DWORD read getdwTo write setdwTo;
end;
type __tagMCI_WAVE_OPEN_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_WAVE_OPEN_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
procedure setdwBufferSeconds(const val : DWORD);
function getdwBufferSeconds : DWORD;
property dwBufferSeconds : DWORD read getdwBufferSeconds write setdwBufferSeconds;
end;
type __tagMCI_WAVE_OPEN_PARMSA__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_WAVE_OPEN_PARMSA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
procedure setdwBufferSeconds(const val : DWORD);
function getdwBufferSeconds : DWORD;
property dwBufferSeconds : DWORD read getdwBufferSeconds write setdwBufferSeconds;
end;
type __tagMCI_WAVE_OPEN_PARMSW__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_WAVE_OPEN_PARMSW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
procedure setdwBufferSeconds(const val : DWORD);
function getdwBufferSeconds : DWORD;
property dwBufferSeconds : DWORD read getdwBufferSeconds write setdwBufferSeconds;
end;
type __tagMCI_WAVE_SET_PARMS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMCI_WAVE_SET_PARMS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwTimeFormat(const val : DWORD);
function getdwTimeFormat : DWORD;
property dwTimeFormat : DWORD read getdwTimeFormat write setdwTimeFormat;
procedure setdwAudio(const val : DWORD);
function getdwAudio : DWORD;
property dwAudio : DWORD read getdwAudio write setdwAudio;
procedure setwInput(const val : UINT);
function getwInput : UINT;
property wInput : UINT read getwInput write setwInput;
procedure setwOutput(const val : UINT);
function getwOutput : UINT;
property wOutput : UINT read getwOutput write setwOutput;
procedure setwFormatTag(const val : Word);
function getwFormatTag : Word;
property wFormatTag : Word read getwFormatTag write setwFormatTag;
procedure setwReserved2(const val : Word);
function getwReserved2 : Word;
property wReserved2 : Word read getwReserved2 write setwReserved2;
procedure setnChannels(const val : Word);
function getnChannels : Word;
property nChannels : Word read getnChannels write setnChannels;
procedure setwReserved3(const val : Word);
function getwReserved3 : Word;
property wReserved3 : Word read getwReserved3 write setwReserved3;
procedure setnSamplesPerSec(const val : DWORD);
function getnSamplesPerSec : DWORD;
property nSamplesPerSec : DWORD read getnSamplesPerSec write setnSamplesPerSec;
procedure setnAvgBytesPerSec(const val : DWORD);
function getnAvgBytesPerSec : DWORD;
property nAvgBytesPerSec : DWORD read getnAvgBytesPerSec write setnAvgBytesPerSec;
procedure setnBlockAlign(const val : Word);
function getnBlockAlign : Word;
property nBlockAlign : Word read getnBlockAlign write setnBlockAlign;
procedure setwReserved4(const val : Word);
function getwReserved4 : Word;
property wReserved4 : Word read getwReserved4 write setwReserved4;
procedure setwBitsPerSample(const val : Word);
function getwBitsPerSample : Word;
property wBitsPerSample : Word read getwBitsPerSample write setwBitsPerSample;
procedure setwReserved5(const val : Word);
function getwReserved5 : Word;
property wReserved5 : Word read getwReserved5 write setwReserved5;
end;
type __tagMIDIINCAPS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMIDIINCAPS;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __tagMIDIINCAPSA__Wrapper = class(TDCRecordWrapper)
private
fR : tagMIDIINCAPSA;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __tagMIDIINCAPSW__Wrapper = class(TDCRecordWrapper)
private
fR : tagMIDIINCAPSW;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __tagMIDIOUTCAPS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMIDIOUTCAPS;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setwTechnology(const val : Word);
function getwTechnology : Word;
property wTechnology : Word read getwTechnology write setwTechnology;
procedure setwVoices(const val : Word);
function getwVoices : Word;
property wVoices : Word read getwVoices write setwVoices;
procedure setwNotes(const val : Word);
function getwNotes : Word;
property wNotes : Word read getwNotes write setwNotes;
procedure setwChannelMask(const val : Word);
function getwChannelMask : Word;
property wChannelMask : Word read getwChannelMask write setwChannelMask;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __tagMIDIOUTCAPSA__Wrapper = class(TDCRecordWrapper)
private
fR : tagMIDIOUTCAPSA;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setwTechnology(const val : Word);
function getwTechnology : Word;
property wTechnology : Word read getwTechnology write setwTechnology;
procedure setwVoices(const val : Word);
function getwVoices : Word;
property wVoices : Word read getwVoices write setwVoices;
procedure setwNotes(const val : Word);
function getwNotes : Word;
property wNotes : Word read getwNotes write setwNotes;
procedure setwChannelMask(const val : Word);
function getwChannelMask : Word;
property wChannelMask : Word read getwChannelMask write setwChannelMask;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __tagMIDIOUTCAPSW__Wrapper = class(TDCRecordWrapper)
private
fR : tagMIDIOUTCAPSW;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setwTechnology(const val : Word);
function getwTechnology : Word;
property wTechnology : Word read getwTechnology write setwTechnology;
procedure setwVoices(const val : Word);
function getwVoices : Word;
property wVoices : Word read getwVoices write setwVoices;
procedure setwNotes(const val : Word);
function getwNotes : Word;
property wNotes : Word read getwNotes write setwNotes;
procedure setwChannelMask(const val : Word);
function getwChannelMask : Word;
property wChannelMask : Word read getwChannelMask write setwChannelMask;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __tagMIXERCAPS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMIXERCAPS;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setfdwSupport(const val : DWORD);
function getfdwSupport : DWORD;
property fdwSupport : DWORD read getfdwSupport write setfdwSupport;
procedure setcDestinations(const val : DWORD);
function getcDestinations : DWORD;
property cDestinations : DWORD read getcDestinations write setcDestinations;
end;
type __tagMIXERCAPSA__Wrapper = class(TDCRecordWrapper)
private
fR : tagMIXERCAPSA;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setfdwSupport(const val : DWORD);
function getfdwSupport : DWORD;
property fdwSupport : DWORD read getfdwSupport write setfdwSupport;
procedure setcDestinations(const val : DWORD);
function getcDestinations : DWORD;
property cDestinations : DWORD read getcDestinations write setcDestinations;
end;
type __tagMIXERCAPSW__Wrapper = class(TDCRecordWrapper)
private
fR : tagMIXERCAPSW;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setfdwSupport(const val : DWORD);
function getfdwSupport : DWORD;
property fdwSupport : DWORD read getfdwSupport write setfdwSupport;
procedure setcDestinations(const val : DWORD);
function getcDestinations : DWORD;
property cDestinations : DWORD read getcDestinations write setcDestinations;
end;
type __tagMIXERCONTROLDETAILS_LISTTEXT__Wrapper = class(TDCRecordWrapper)
private
fR : tagMIXERCONTROLDETAILS_LISTTEXT;
public
function GetRecordPtr : pointer; override;
published
procedure setdwParam1(const val : DWORD);
function getdwParam1 : DWORD;
property dwParam1 : DWORD read getdwParam1 write setdwParam1;
procedure setdwParam2(const val : DWORD);
function getdwParam2 : DWORD;
property dwParam2 : DWORD read getdwParam2 write setdwParam2;
end;
type __tagMIXERCONTROLDETAILS_LISTTEXTA__Wrapper = class(TDCRecordWrapper)
private
fR : tagMIXERCONTROLDETAILS_LISTTEXTA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwParam1(const val : DWORD);
function getdwParam1 : DWORD;
property dwParam1 : DWORD read getdwParam1 write setdwParam1;
procedure setdwParam2(const val : DWORD);
function getdwParam2 : DWORD;
property dwParam2 : DWORD read getdwParam2 write setdwParam2;
end;
type __tagMIXERCONTROLDETAILS_LISTTEXTW__Wrapper = class(TDCRecordWrapper)
private
fR : tagMIXERCONTROLDETAILS_LISTTEXTW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwParam1(const val : DWORD);
function getdwParam1 : DWORD;
property dwParam1 : DWORD read getdwParam1 write setdwParam1;
procedure setdwParam2(const val : DWORD);
function getdwParam2 : DWORD;
property dwParam2 : DWORD read getdwParam2 write setdwParam2;
end;
type __tagMIXERLINE__Wrapper = class(TDCRecordWrapper)
private
fR : tagMIXERLINE;
public
function GetRecordPtr : pointer; override;
published
procedure setcbStruct(const val : DWORD);
function getcbStruct : DWORD;
property cbStruct : DWORD read getcbStruct write setcbStruct;
procedure setdwDestination(const val : DWORD);
function getdwDestination : DWORD;
property dwDestination : DWORD read getdwDestination write setdwDestination;
procedure setdwSource(const val : DWORD);
function getdwSource : DWORD;
property dwSource : DWORD read getdwSource write setdwSource;
procedure setdwLineID(const val : DWORD);
function getdwLineID : DWORD;
property dwLineID : DWORD read getdwLineID write setdwLineID;
procedure setfdwLine(const val : DWORD);
function getfdwLine : DWORD;
property fdwLine : DWORD read getfdwLine write setfdwLine;
procedure setdwUser(const val : DWORD);
function getdwUser : DWORD;
property dwUser : DWORD read getdwUser write setdwUser;
procedure setdwComponentType(const val : DWORD);
function getdwComponentType : DWORD;
property dwComponentType : DWORD read getdwComponentType write setdwComponentType;
procedure setcChannels(const val : DWORD);
function getcChannels : DWORD;
property cChannels : DWORD read getcChannels write setcChannels;
procedure setcConnections(const val : DWORD);
function getcConnections : DWORD;
property cConnections : DWORD read getcConnections write setcConnections;
procedure setcControls(const val : DWORD);
function getcControls : DWORD;
property cControls : DWORD read getcControls write setcControls;
end;
type __tagMIXERLINEA__Wrapper = class(TDCRecordWrapper)
private
fR : tagMIXERLINEA;
public
function GetRecordPtr : pointer; override;
published
procedure setcbStruct(const val : DWORD);
function getcbStruct : DWORD;
property cbStruct : DWORD read getcbStruct write setcbStruct;
procedure setdwDestination(const val : DWORD);
function getdwDestination : DWORD;
property dwDestination : DWORD read getdwDestination write setdwDestination;
procedure setdwSource(const val : DWORD);
function getdwSource : DWORD;
property dwSource : DWORD read getdwSource write setdwSource;
procedure setdwLineID(const val : DWORD);
function getdwLineID : DWORD;
property dwLineID : DWORD read getdwLineID write setdwLineID;
procedure setfdwLine(const val : DWORD);
function getfdwLine : DWORD;
property fdwLine : DWORD read getfdwLine write setfdwLine;
procedure setdwUser(const val : DWORD);
function getdwUser : DWORD;
property dwUser : DWORD read getdwUser write setdwUser;
procedure setdwComponentType(const val : DWORD);
function getdwComponentType : DWORD;
property dwComponentType : DWORD read getdwComponentType write setdwComponentType;
procedure setcChannels(const val : DWORD);
function getcChannels : DWORD;
property cChannels : DWORD read getcChannels write setcChannels;
procedure setcConnections(const val : DWORD);
function getcConnections : DWORD;
property cConnections : DWORD read getcConnections write setcConnections;
procedure setcControls(const val : DWORD);
function getcControls : DWORD;
property cControls : DWORD read getcControls write setcControls;
end;
type __tagMIXERLINECONTROLS__Wrapper = class(TDCRecordWrapper)
private
fR : tagMIXERLINECONTROLS;
public
function GetRecordPtr : pointer; override;
published
procedure setcbStruct(const val : DWORD);
function getcbStruct : DWORD;
property cbStruct : DWORD read getcbStruct write setcbStruct;
procedure setdwLineID(const val : DWORD);
function getdwLineID : DWORD;
property dwLineID : DWORD read getdwLineID write setdwLineID;
procedure setdwControlID(const val : DWORD);
function getdwControlID : DWORD;
property dwControlID : DWORD read getdwControlID write setdwControlID;
procedure setdwControlType(const val : DWORD);
function getdwControlType : DWORD;
property dwControlType : DWORD read getdwControlType write setdwControlType;
procedure setcControls(const val : DWORD);
function getcControls : DWORD;
property cControls : DWORD read getcControls write setcControls;
procedure setcbmxctrl(const val : DWORD);
function getcbmxctrl : DWORD;
property cbmxctrl : DWORD read getcbmxctrl write setcbmxctrl;
end;
type __tagMIXERLINECONTROLSA__Wrapper = class(TDCRecordWrapper)
private
fR : tagMIXERLINECONTROLSA;
public
function GetRecordPtr : pointer; override;
published
procedure setcbStruct(const val : DWORD);
function getcbStruct : DWORD;
property cbStruct : DWORD read getcbStruct write setcbStruct;
procedure setdwLineID(const val : DWORD);
function getdwLineID : DWORD;
property dwLineID : DWORD read getdwLineID write setdwLineID;
procedure setdwControlID(const val : DWORD);
function getdwControlID : DWORD;
property dwControlID : DWORD read getdwControlID write setdwControlID;
procedure setdwControlType(const val : DWORD);
function getdwControlType : DWORD;
property dwControlType : DWORD read getdwControlType write setdwControlType;
procedure setcControls(const val : DWORD);
function getcControls : DWORD;
property cControls : DWORD read getcControls write setcControls;
procedure setcbmxctrl(const val : DWORD);
function getcbmxctrl : DWORD;
property cbmxctrl : DWORD read getcbmxctrl write setcbmxctrl;
end;
type __tagMIXERLINECONTROLSW__Wrapper = class(TDCRecordWrapper)
private
fR : tagMIXERLINECONTROLSW;
public
function GetRecordPtr : pointer; override;
published
procedure setcbStruct(const val : DWORD);
function getcbStruct : DWORD;
property cbStruct : DWORD read getcbStruct write setcbStruct;
procedure setdwLineID(const val : DWORD);
function getdwLineID : DWORD;
property dwLineID : DWORD read getdwLineID write setdwLineID;
procedure setdwControlID(const val : DWORD);
function getdwControlID : DWORD;
property dwControlID : DWORD read getdwControlID write setdwControlID;
procedure setdwControlType(const val : DWORD);
function getdwControlType : DWORD;
property dwControlType : DWORD read getdwControlType write setdwControlType;
procedure setcControls(const val : DWORD);
function getcControls : DWORD;
property cControls : DWORD read getcControls write setcControls;
procedure setcbmxctrl(const val : DWORD);
function getcbmxctrl : DWORD;
property cbmxctrl : DWORD read getcbmxctrl write setcbmxctrl;
end;
type __tagMIXERLINEW__Wrapper = class(TDCRecordWrapper)
private
fR : tagMIXERLINEW;
public
function GetRecordPtr : pointer; override;
published
procedure setcbStruct(const val : DWORD);
function getcbStruct : DWORD;
property cbStruct : DWORD read getcbStruct write setcbStruct;
procedure setdwDestination(const val : DWORD);
function getdwDestination : DWORD;
property dwDestination : DWORD read getdwDestination write setdwDestination;
procedure setdwSource(const val : DWORD);
function getdwSource : DWORD;
property dwSource : DWORD read getdwSource write setdwSource;
procedure setdwLineID(const val : DWORD);
function getdwLineID : DWORD;
property dwLineID : DWORD read getdwLineID write setdwLineID;
procedure setfdwLine(const val : DWORD);
function getfdwLine : DWORD;
property fdwLine : DWORD read getfdwLine write setfdwLine;
procedure setdwUser(const val : DWORD);
function getdwUser : DWORD;
property dwUser : DWORD read getdwUser write setdwUser;
procedure setdwComponentType(const val : DWORD);
function getdwComponentType : DWORD;
property dwComponentType : DWORD read getdwComponentType write setdwComponentType;
procedure setcChannels(const val : DWORD);
function getcChannels : DWORD;
property cChannels : DWORD read getcChannels write setcChannels;
procedure setcConnections(const val : DWORD);
function getcConnections : DWORD;
property cConnections : DWORD read getcConnections write setcConnections;
procedure setcControls(const val : DWORD);
function getcControls : DWORD;
property cControls : DWORD read getcControls write setcControls;
end;
type __tagWAVEINCAPS__Wrapper = class(TDCRecordWrapper)
private
fR : tagWAVEINCAPS;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setdwFormats(const val : DWORD);
function getdwFormats : DWORD;
property dwFormats : DWORD read getdwFormats write setdwFormats;
procedure setwChannels(const val : Word);
function getwChannels : Word;
property wChannels : Word read getwChannels write setwChannels;
procedure setwReserved1(const val : Word);
function getwReserved1 : Word;
property wReserved1 : Word read getwReserved1 write setwReserved1;
end;
type __tagWAVEINCAPSA__Wrapper = class(TDCRecordWrapper)
private
fR : tagWAVEINCAPSA;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setdwFormats(const val : DWORD);
function getdwFormats : DWORD;
property dwFormats : DWORD read getdwFormats write setdwFormats;
procedure setwChannels(const val : Word);
function getwChannels : Word;
property wChannels : Word read getwChannels write setwChannels;
procedure setwReserved1(const val : Word);
function getwReserved1 : Word;
property wReserved1 : Word read getwReserved1 write setwReserved1;
end;
type __tagWAVEINCAPSW__Wrapper = class(TDCRecordWrapper)
private
fR : tagWAVEINCAPSW;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setdwFormats(const val : DWORD);
function getdwFormats : DWORD;
property dwFormats : DWORD read getdwFormats write setdwFormats;
procedure setwChannels(const val : Word);
function getwChannels : Word;
property wChannels : Word read getwChannels write setwChannels;
procedure setwReserved1(const val : Word);
function getwReserved1 : Word;
property wReserved1 : Word read getwReserved1 write setwReserved1;
end;
type __tagWAVEOUTCAPS__Wrapper = class(TDCRecordWrapper)
private
fR : tagWAVEOUTCAPS;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setdwFormats(const val : DWORD);
function getdwFormats : DWORD;
property dwFormats : DWORD read getdwFormats write setdwFormats;
procedure setwChannels(const val : Word);
function getwChannels : Word;
property wChannels : Word read getwChannels write setwChannels;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __tagWAVEOUTCAPSA__Wrapper = class(TDCRecordWrapper)
private
fR : tagWAVEOUTCAPSA;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setdwFormats(const val : DWORD);
function getdwFormats : DWORD;
property dwFormats : DWORD read getdwFormats write setdwFormats;
procedure setwChannels(const val : Word);
function getwChannels : Word;
property wChannels : Word read getwChannels write setwChannels;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __tagWAVEOUTCAPSW__Wrapper = class(TDCRecordWrapper)
private
fR : tagWAVEOUTCAPSW;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setdwFormats(const val : DWORD);
function getdwFormats : DWORD;
property dwFormats : DWORD read getdwFormats write setdwFormats;
procedure setwChannels(const val : Word);
function getwChannels : Word;
property wChannels : Word read getwChannels write setwChannels;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __TAuxCaps__Wrapper = class(TDCRecordWrapper)
private
fR : TAuxCaps;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setwTechnology(const val : Word);
function getwTechnology : Word;
property wTechnology : Word read getwTechnology write setwTechnology;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __TAuxCapsA__Wrapper = class(TDCRecordWrapper)
private
fR : TAuxCapsA;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setwTechnology(const val : Word);
function getwTechnology : Word;
property wTechnology : Word read getwTechnology write setwTechnology;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __TAuxCapsW__Wrapper = class(TDCRecordWrapper)
private
fR : TAuxCapsW;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setwTechnology(const val : Word);
function getwTechnology : Word;
property wTechnology : Word read getwTechnology write setwTechnology;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __TDrvConfigInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TDrvConfigInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setdwDCISize(const val : DWORD);
function getdwDCISize : DWORD;
property dwDCISize : DWORD read getdwDCISize write setdwDCISize;
end;
type __TDrvConfigInfoEx__Wrapper = class(TDCRecordWrapper)
private
fR : TDrvConfigInfoEx;
public
function GetRecordPtr : pointer; override;
published
procedure setdwDCISize(const val : DWORD);
function getdwDCISize : DWORD;
property dwDCISize : DWORD read getdwDCISize write setdwDCISize;
procedure setdnDevNode(const val : DWORD);
function getdnDevNode : DWORD;
property dnDevNode : DWORD read getdnDevNode write setdnDevNode;
end;
type __TIMECAPS__Wrapper = class(TDCRecordWrapper)
private
fR : TIMECAPS;
public
function GetRecordPtr : pointer; override;
published
procedure setwPeriodMin(const val : UINT);
function getwPeriodMin : UINT;
property wPeriodMin : UINT read getwPeriodMin write setwPeriodMin;
procedure setwPeriodMax(const val : UINT);
function getwPeriodMax : UINT;
property wPeriodMax : UINT read getwPeriodMax write setwPeriodMax;
end;
type __timecaps_tag__Wrapper = class(TDCRecordWrapper)
private
fR : timecaps_tag;
public
function GetRecordPtr : pointer; override;
published
procedure setwPeriodMin(const val : UINT);
function getwPeriodMin : UINT;
property wPeriodMin : UINT read getwPeriodMin write setwPeriodMin;
procedure setwPeriodMax(const val : UINT);
function getwPeriodMax : UINT;
property wPeriodMax : UINT read getwPeriodMax write setwPeriodMax;
end;
type __TJoyCaps__Wrapper = class(TDCRecordWrapper)
private
fR : TJoyCaps;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setwXmin(const val : UINT);
function getwXmin : UINT;
property wXmin : UINT read getwXmin write setwXmin;
procedure setwXmax(const val : UINT);
function getwXmax : UINT;
property wXmax : UINT read getwXmax write setwXmax;
procedure setwYmin(const val : UINT);
function getwYmin : UINT;
property wYmin : UINT read getwYmin write setwYmin;
procedure setwYmax(const val : UINT);
function getwYmax : UINT;
property wYmax : UINT read getwYmax write setwYmax;
procedure setwZmin(const val : UINT);
function getwZmin : UINT;
property wZmin : UINT read getwZmin write setwZmin;
procedure setwZmax(const val : UINT);
function getwZmax : UINT;
property wZmax : UINT read getwZmax write setwZmax;
procedure setwNumButtons(const val : UINT);
function getwNumButtons : UINT;
property wNumButtons : UINT read getwNumButtons write setwNumButtons;
procedure setwPeriodMin(const val : UINT);
function getwPeriodMin : UINT;
property wPeriodMin : UINT read getwPeriodMin write setwPeriodMin;
procedure setwPeriodMax(const val : UINT);
function getwPeriodMax : UINT;
property wPeriodMax : UINT read getwPeriodMax write setwPeriodMax;
procedure setwRmin(const val : UINT);
function getwRmin : UINT;
property wRmin : UINT read getwRmin write setwRmin;
procedure setwRmax(const val : UINT);
function getwRmax : UINT;
property wRmax : UINT read getwRmax write setwRmax;
procedure setwUmin(const val : UINT);
function getwUmin : UINT;
property wUmin : UINT read getwUmin write setwUmin;
procedure setwUmax(const val : UINT);
function getwUmax : UINT;
property wUmax : UINT read getwUmax write setwUmax;
procedure setwVmin(const val : UINT);
function getwVmin : UINT;
property wVmin : UINT read getwVmin write setwVmin;
procedure setwVmax(const val : UINT);
function getwVmax : UINT;
property wVmax : UINT read getwVmax write setwVmax;
procedure setwCaps(const val : UINT);
function getwCaps : UINT;
property wCaps : UINT read getwCaps write setwCaps;
procedure setwMaxAxes(const val : UINT);
function getwMaxAxes : UINT;
property wMaxAxes : UINT read getwMaxAxes write setwMaxAxes;
procedure setwNumAxes(const val : UINT);
function getwNumAxes : UINT;
property wNumAxes : UINT read getwNumAxes write setwNumAxes;
procedure setwMaxButtons(const val : UINT);
function getwMaxButtons : UINT;
property wMaxButtons : UINT read getwMaxButtons write setwMaxButtons;
end;
type __TJoyCapsA__Wrapper = class(TDCRecordWrapper)
private
fR : TJoyCapsA;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setwXmin(const val : UINT);
function getwXmin : UINT;
property wXmin : UINT read getwXmin write setwXmin;
procedure setwXmax(const val : UINT);
function getwXmax : UINT;
property wXmax : UINT read getwXmax write setwXmax;
procedure setwYmin(const val : UINT);
function getwYmin : UINT;
property wYmin : UINT read getwYmin write setwYmin;
procedure setwYmax(const val : UINT);
function getwYmax : UINT;
property wYmax : UINT read getwYmax write setwYmax;
procedure setwZmin(const val : UINT);
function getwZmin : UINT;
property wZmin : UINT read getwZmin write setwZmin;
procedure setwZmax(const val : UINT);
function getwZmax : UINT;
property wZmax : UINT read getwZmax write setwZmax;
procedure setwNumButtons(const val : UINT);
function getwNumButtons : UINT;
property wNumButtons : UINT read getwNumButtons write setwNumButtons;
procedure setwPeriodMin(const val : UINT);
function getwPeriodMin : UINT;
property wPeriodMin : UINT read getwPeriodMin write setwPeriodMin;
procedure setwPeriodMax(const val : UINT);
function getwPeriodMax : UINT;
property wPeriodMax : UINT read getwPeriodMax write setwPeriodMax;
procedure setwRmin(const val : UINT);
function getwRmin : UINT;
property wRmin : UINT read getwRmin write setwRmin;
procedure setwRmax(const val : UINT);
function getwRmax : UINT;
property wRmax : UINT read getwRmax write setwRmax;
procedure setwUmin(const val : UINT);
function getwUmin : UINT;
property wUmin : UINT read getwUmin write setwUmin;
procedure setwUmax(const val : UINT);
function getwUmax : UINT;
property wUmax : UINT read getwUmax write setwUmax;
procedure setwVmin(const val : UINT);
function getwVmin : UINT;
property wVmin : UINT read getwVmin write setwVmin;
procedure setwVmax(const val : UINT);
function getwVmax : UINT;
property wVmax : UINT read getwVmax write setwVmax;
procedure setwCaps(const val : UINT);
function getwCaps : UINT;
property wCaps : UINT read getwCaps write setwCaps;
procedure setwMaxAxes(const val : UINT);
function getwMaxAxes : UINT;
property wMaxAxes : UINT read getwMaxAxes write setwMaxAxes;
procedure setwNumAxes(const val : UINT);
function getwNumAxes : UINT;
property wNumAxes : UINT read getwNumAxes write setwNumAxes;
procedure setwMaxButtons(const val : UINT);
function getwMaxButtons : UINT;
property wMaxButtons : UINT read getwMaxButtons write setwMaxButtons;
end;
type __TJoyCapsW__Wrapper = class(TDCRecordWrapper)
private
fR : TJoyCapsW;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setwXmin(const val : UINT);
function getwXmin : UINT;
property wXmin : UINT read getwXmin write setwXmin;
procedure setwXmax(const val : UINT);
function getwXmax : UINT;
property wXmax : UINT read getwXmax write setwXmax;
procedure setwYmin(const val : UINT);
function getwYmin : UINT;
property wYmin : UINT read getwYmin write setwYmin;
procedure setwYmax(const val : UINT);
function getwYmax : UINT;
property wYmax : UINT read getwYmax write setwYmax;
procedure setwZmin(const val : UINT);
function getwZmin : UINT;
property wZmin : UINT read getwZmin write setwZmin;
procedure setwZmax(const val : UINT);
function getwZmax : UINT;
property wZmax : UINT read getwZmax write setwZmax;
procedure setwNumButtons(const val : UINT);
function getwNumButtons : UINT;
property wNumButtons : UINT read getwNumButtons write setwNumButtons;
procedure setwPeriodMin(const val : UINT);
function getwPeriodMin : UINT;
property wPeriodMin : UINT read getwPeriodMin write setwPeriodMin;
procedure setwPeriodMax(const val : UINT);
function getwPeriodMax : UINT;
property wPeriodMax : UINT read getwPeriodMax write setwPeriodMax;
procedure setwRmin(const val : UINT);
function getwRmin : UINT;
property wRmin : UINT read getwRmin write setwRmin;
procedure setwRmax(const val : UINT);
function getwRmax : UINT;
property wRmax : UINT read getwRmax write setwRmax;
procedure setwUmin(const val : UINT);
function getwUmin : UINT;
property wUmin : UINT read getwUmin write setwUmin;
procedure setwUmax(const val : UINT);
function getwUmax : UINT;
property wUmax : UINT read getwUmax write setwUmax;
procedure setwVmin(const val : UINT);
function getwVmin : UINT;
property wVmin : UINT read getwVmin write setwVmin;
procedure setwVmax(const val : UINT);
function getwVmax : UINT;
property wVmax : UINT read getwVmax write setwVmax;
procedure setwCaps(const val : UINT);
function getwCaps : UINT;
property wCaps : UINT read getwCaps write setwCaps;
procedure setwMaxAxes(const val : UINT);
function getwMaxAxes : UINT;
property wMaxAxes : UINT read getwMaxAxes write setwMaxAxes;
procedure setwNumAxes(const val : UINT);
function getwNumAxes : UINT;
property wNumAxes : UINT read getwNumAxes write setwNumAxes;
procedure setwMaxButtons(const val : UINT);
function getwMaxButtons : UINT;
property wMaxButtons : UINT read getwMaxButtons write setwMaxButtons;
end;
type __TJoyInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TJoyInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setwXpos(const val : UINT);
function getwXpos : UINT;
property wXpos : UINT read getwXpos write setwXpos;
procedure setwYpos(const val : UINT);
function getwYpos : UINT;
property wYpos : UINT read getwYpos write setwYpos;
procedure setwZpos(const val : UINT);
function getwZpos : UINT;
property wZpos : UINT read getwZpos write setwZpos;
procedure setwButtons(const val : UINT);
function getwButtons : UINT;
property wButtons : UINT read getwButtons write setwButtons;
end;
type __TJoyInfoEx__Wrapper = class(TDCRecordWrapper)
private
fR : TJoyInfoEx;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setwXpos(const val : UINT);
function getwXpos : UINT;
property wXpos : UINT read getwXpos write setwXpos;
procedure setwYpos(const val : UINT);
function getwYpos : UINT;
property wYpos : UINT read getwYpos write setwYpos;
procedure setwZpos(const val : UINT);
function getwZpos : UINT;
property wZpos : UINT read getwZpos write setwZpos;
procedure setdwRpos(const val : DWORD);
function getdwRpos : DWORD;
property dwRpos : DWORD read getdwRpos write setdwRpos;
procedure setdwUpos(const val : DWORD);
function getdwUpos : DWORD;
property dwUpos : DWORD read getdwUpos write setdwUpos;
procedure setdwVpos(const val : DWORD);
function getdwVpos : DWORD;
property dwVpos : DWORD read getdwVpos write setdwVpos;
procedure setwButtons(const val : UINT);
function getwButtons : UINT;
property wButtons : UINT read getwButtons write setwButtons;
procedure setdwButtonNumber(const val : DWORD);
function getdwButtonNumber : DWORD;
property dwButtonNumber : DWORD read getdwButtonNumber write setdwButtonNumber;
procedure setdwPOV(const val : DWORD);
function getdwPOV : DWORD;
property dwPOV : DWORD read getdwPOV write setdwPOV;
procedure setdwReserved1(const val : DWORD);
function getdwReserved1 : DWORD;
property dwReserved1 : DWORD read getdwReserved1 write setdwReserved1;
procedure setdwReserved2(const val : DWORD);
function getdwReserved2 : DWORD;
property dwReserved2 : DWORD read getdwReserved2 write setdwReserved2;
end;
type __TMCI_Anim_Open_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Anim_Open_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __TMCI_Anim_Open_ParmsA__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Anim_Open_ParmsA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __TMCI_Anim_Open_ParmsW__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Anim_Open_ParmsW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __TMCI_Anim_Play_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Anim_Play_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwFrom(const val : DWORD);
function getdwFrom : DWORD;
property dwFrom : DWORD read getdwFrom write setdwFrom;
procedure setdwTo(const val : DWORD);
function getdwTo : DWORD;
property dwTo : DWORD read getdwTo write setdwTo;
procedure setdwSpeed(const val : DWORD);
function getdwSpeed : DWORD;
property dwSpeed : DWORD read getdwSpeed write setdwSpeed;
end;
type __TMCI_Anim_Rect_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Anim_Rect_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __TMCI_Anim_Step_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Anim_Step_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwFrames(const val : DWORD);
function getdwFrames : DWORD;
property dwFrames : DWORD read getdwFrames write setdwFrames;
end;
type __TMCI_Anim_Update_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Anim_Update_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __TMCI_Anim_Window_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Anim_Window_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setnCmdShow(const val : UINT);
function getnCmdShow : UINT;
property nCmdShow : UINT read getnCmdShow write setnCmdShow;
end;
type __TMCI_Anim_Window_ParmsA__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Anim_Window_ParmsA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setnCmdShow(const val : UINT);
function getnCmdShow : UINT;
property nCmdShow : UINT read getnCmdShow write setnCmdShow;
end;
type __TMCI_Anim_Window_ParmsW__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Anim_Window_ParmsW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setnCmdShow(const val : UINT);
function getnCmdShow : UINT;
property nCmdShow : UINT read getnCmdShow write setnCmdShow;
end;
type __TMCI_BReak_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_BReak_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setnVirtKey(const val : Integer);
function getnVirtKey : Integer;
property nVirtKey : Integer read getnVirtKey write setnVirtKey;
end;
type __TMCI_Generic_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Generic_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __TMCI_GetDevCaps_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_GetDevCaps_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwReturn(const val : DWORD);
function getdwReturn : DWORD;
property dwReturn : DWORD read getdwReturn write setdwReturn;
procedure setdwItem(const val : DWORD);
function getdwItem : DWORD;
property dwItem : DWORD read getdwItem write setdwItem;
end;
type __TMCI_Info_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Info_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwRetSize(const val : DWORD);
function getdwRetSize : DWORD;
property dwRetSize : DWORD read getdwRetSize write setdwRetSize;
end;
type __TMCI_Info_ParmsA__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Info_ParmsA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwRetSize(const val : DWORD);
function getdwRetSize : DWORD;
property dwRetSize : DWORD read getdwRetSize write setdwRetSize;
end;
type __TMCI_Info_ParmsW__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Info_ParmsW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwRetSize(const val : DWORD);
function getdwRetSize : DWORD;
property dwRetSize : DWORD read getdwRetSize write setdwRetSize;
end;
type __TMCI_Load_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Load_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __TMCI_Load_ParmsA__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Load_ParmsA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __TMCI_Load_ParmsW__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Load_ParmsW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __TMCI_Open_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Open_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
end;
type __TMCI_Open_ParmsA__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Open_ParmsA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
end;
type __TMCI_Open_ParmsW__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Open_ParmsW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
end;
type __TMCI_Ovly_Load_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Ovly_Load_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __TMCI_Ovly_Load_ParmsA__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Ovly_Load_ParmsA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __TMCI_Ovly_Load_ParmsW__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Ovly_Load_ParmsW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __TMCI_Ovly_Open_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Ovly_Open_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __TMCI_Ovly_Open_ParmsA__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Ovly_Open_ParmsA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __TMCI_Ovly_Open_ParmsW__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Ovly_Open_ParmsW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __TMCI_Ovly_Rect_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Ovly_Rect_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __TMCI_Ovly_Save_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Ovly_Save_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __TMCI_Ovly_Save_ParmsA__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Ovly_Save_ParmsA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __TMCI_Ovly_Save_ParmsW__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Ovly_Save_ParmsW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __TMCI_Ovly_Window_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Ovly_Window_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setnCmdShow(const val : UINT);
function getnCmdShow : UINT;
property nCmdShow : UINT read getnCmdShow write setnCmdShow;
end;
type __TMCI_Ovly_Window_ParmsA__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Ovly_Window_ParmsA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setnCmdShow(const val : UINT);
function getnCmdShow : UINT;
property nCmdShow : UINT read getnCmdShow write setnCmdShow;
end;
type __TMCI_Ovly_Window_ParmsW__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Ovly_Window_ParmsW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setnCmdShow(const val : UINT);
function getnCmdShow : UINT;
property nCmdShow : UINT read getnCmdShow write setnCmdShow;
end;
type __TMCI_Play_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Play_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwFrom(const val : DWORD);
function getdwFrom : DWORD;
property dwFrom : DWORD read getdwFrom write setdwFrom;
procedure setdwTo(const val : DWORD);
function getdwTo : DWORD;
property dwTo : DWORD read getdwTo write setdwTo;
end;
type __TMCI_Record_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Record_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwFrom(const val : DWORD);
function getdwFrom : DWORD;
property dwFrom : DWORD read getdwFrom write setdwFrom;
procedure setdwTo(const val : DWORD);
function getdwTo : DWORD;
property dwTo : DWORD read getdwTo write setdwTo;
end;
type __TMCI_SaveParms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_SaveParms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __TMCI_SaveParmsA__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_SaveParmsA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __TMCI_SaveParmsW__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_SaveParmsW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __TMCI_Seek_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Seek_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwTo(const val : DWORD);
function getdwTo : DWORD;
property dwTo : DWORD read getdwTo write setdwTo;
end;
type __TMCI_Seq_Set_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Seq_Set_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwTimeFormat(const val : DWORD);
function getdwTimeFormat : DWORD;
property dwTimeFormat : DWORD read getdwTimeFormat write setdwTimeFormat;
procedure setdwAudio(const val : DWORD);
function getdwAudio : DWORD;
property dwAudio : DWORD read getdwAudio write setdwAudio;
procedure setdwTempo(const val : DWORD);
function getdwTempo : DWORD;
property dwTempo : DWORD read getdwTempo write setdwTempo;
procedure setdwPort(const val : DWORD);
function getdwPort : DWORD;
property dwPort : DWORD read getdwPort write setdwPort;
procedure setdwSlave(const val : DWORD);
function getdwSlave : DWORD;
property dwSlave : DWORD read getdwSlave write setdwSlave;
procedure setdwMaster(const val : DWORD);
function getdwMaster : DWORD;
property dwMaster : DWORD read getdwMaster write setdwMaster;
procedure setdwOffset(const val : DWORD);
function getdwOffset : DWORD;
property dwOffset : DWORD read getdwOffset write setdwOffset;
end;
type __TMCI_Set_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Set_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwTimeFormat(const val : DWORD);
function getdwTimeFormat : DWORD;
property dwTimeFormat : DWORD read getdwTimeFormat write setdwTimeFormat;
procedure setdwAudio(const val : DWORD);
function getdwAudio : DWORD;
property dwAudio : DWORD read getdwAudio write setdwAudio;
end;
type __TMCI_Sound_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Sound_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : Longint);
function getdwCallback : Longint;
property dwCallback : Longint read getdwCallback write setdwCallback;
end;
type __TMCI_Status_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Status_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwReturn(const val : DWORD);
function getdwReturn : DWORD;
property dwReturn : DWORD read getdwReturn write setdwReturn;
procedure setdwItem(const val : DWORD);
function getdwItem : DWORD;
property dwItem : DWORD read getdwItem write setdwItem;
procedure setdwTrack(const val : DWORD);
function getdwTrack : DWORD;
property dwTrack : DWORD read getdwTrack write setdwTrack;
end;
type __TMCI_SysInfo_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_SysInfo_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwRetSize(const val : DWORD);
function getdwRetSize : DWORD;
property dwRetSize : DWORD read getdwRetSize write setdwRetSize;
procedure setdwNumber(const val : DWORD);
function getdwNumber : DWORD;
property dwNumber : DWORD read getdwNumber write setdwNumber;
procedure setwDeviceType(const val : UINT);
function getwDeviceType : UINT;
property wDeviceType : UINT read getwDeviceType write setwDeviceType;
end;
type __TMCI_SysInfo_ParmsA__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_SysInfo_ParmsA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwRetSize(const val : DWORD);
function getdwRetSize : DWORD;
property dwRetSize : DWORD read getdwRetSize write setdwRetSize;
procedure setdwNumber(const val : DWORD);
function getdwNumber : DWORD;
property dwNumber : DWORD read getdwNumber write setdwNumber;
procedure setwDeviceType(const val : UINT);
function getwDeviceType : UINT;
property wDeviceType : UINT read getwDeviceType write setwDeviceType;
end;
type __TMCI_SysInfo_ParmsW__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_SysInfo_ParmsW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwRetSize(const val : DWORD);
function getdwRetSize : DWORD;
property dwRetSize : DWORD read getdwRetSize write setdwRetSize;
procedure setdwNumber(const val : DWORD);
function getdwNumber : DWORD;
property dwNumber : DWORD read getdwNumber write setdwNumber;
procedure setwDeviceType(const val : UINT);
function getwDeviceType : UINT;
property wDeviceType : UINT read getwDeviceType write setwDeviceType;
end;
type __TMCI_VD_Escape_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_VD_Escape_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __TMCI_VD_Escape_ParmsA__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_VD_Escape_ParmsA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __TMCI_VD_Escape_ParmsW__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_VD_Escape_ParmsW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
end;
type __TMCI_VD_Play_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_VD_Play_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwFrom(const val : DWORD);
function getdwFrom : DWORD;
property dwFrom : DWORD read getdwFrom write setdwFrom;
procedure setdwTo(const val : DWORD);
function getdwTo : DWORD;
property dwTo : DWORD read getdwTo write setdwTo;
procedure setdwSpeed(const val : DWORD);
function getdwSpeed : DWORD;
property dwSpeed : DWORD read getdwSpeed write setdwSpeed;
end;
type __TMCI_VD_Step_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_VD_Step_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwFrames(const val : DWORD);
function getdwFrames : DWORD;
property dwFrames : DWORD read getdwFrames write setdwFrames;
end;
type __TMCI_Wave_Delete_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Wave_Delete_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwFrom(const val : DWORD);
function getdwFrom : DWORD;
property dwFrom : DWORD read getdwFrom write setdwFrom;
procedure setdwTo(const val : DWORD);
function getdwTo : DWORD;
property dwTo : DWORD read getdwTo write setdwTo;
end;
type __TMCI_Wave_Open_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Wave_Open_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
procedure setdwBufferSeconds(const val : DWORD);
function getdwBufferSeconds : DWORD;
property dwBufferSeconds : DWORD read getdwBufferSeconds write setdwBufferSeconds;
end;
type __TMCI_Wave_Open_ParmsA__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Wave_Open_ParmsA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
procedure setdwBufferSeconds(const val : DWORD);
function getdwBufferSeconds : DWORD;
property dwBufferSeconds : DWORD read getdwBufferSeconds write setdwBufferSeconds;
end;
type __TMCI_Wave_Open_ParmsW__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Wave_Open_ParmsW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setwDeviceID(const val : MCIDEVICEID);
function getwDeviceID : MCIDEVICEID;
property wDeviceID : MCIDEVICEID read getwDeviceID write setwDeviceID;
procedure setdwBufferSeconds(const val : DWORD);
function getdwBufferSeconds : DWORD;
property dwBufferSeconds : DWORD read getdwBufferSeconds write setdwBufferSeconds;
end;
type __TMCI_Wave_Set_Parms__Wrapper = class(TDCRecordWrapper)
private
fR : TMCI_Wave_Set_Parms;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCallback(const val : DWORD);
function getdwCallback : DWORD;
property dwCallback : DWORD read getdwCallback write setdwCallback;
procedure setdwTimeFormat(const val : DWORD);
function getdwTimeFormat : DWORD;
property dwTimeFormat : DWORD read getdwTimeFormat write setdwTimeFormat;
procedure setdwAudio(const val : DWORD);
function getdwAudio : DWORD;
property dwAudio : DWORD read getdwAudio write setdwAudio;
procedure setwInput(const val : UINT);
function getwInput : UINT;
property wInput : UINT read getwInput write setwInput;
procedure setwOutput(const val : UINT);
function getwOutput : UINT;
property wOutput : UINT read getwOutput write setwOutput;
procedure setwFormatTag(const val : Word);
function getwFormatTag : Word;
property wFormatTag : Word read getwFormatTag write setwFormatTag;
procedure setwReserved2(const val : Word);
function getwReserved2 : Word;
property wReserved2 : Word read getwReserved2 write setwReserved2;
procedure setnChannels(const val : Word);
function getnChannels : Word;
property nChannels : Word read getnChannels write setnChannels;
procedure setwReserved3(const val : Word);
function getwReserved3 : Word;
property wReserved3 : Word read getwReserved3 write setwReserved3;
procedure setnSamplesPerSec(const val : DWORD);
function getnSamplesPerSec : DWORD;
property nSamplesPerSec : DWORD read getnSamplesPerSec write setnSamplesPerSec;
procedure setnAvgBytesPerSec(const val : DWORD);
function getnAvgBytesPerSec : DWORD;
property nAvgBytesPerSec : DWORD read getnAvgBytesPerSec write setnAvgBytesPerSec;
procedure setnBlockAlign(const val : Word);
function getnBlockAlign : Word;
property nBlockAlign : Word read getnBlockAlign write setnBlockAlign;
procedure setwReserved4(const val : Word);
function getwReserved4 : Word;
property wReserved4 : Word read getwReserved4 write setwReserved4;
procedure setwBitsPerSample(const val : Word);
function getwBitsPerSample : Word;
property wBitsPerSample : Word read getwBitsPerSample write setwBitsPerSample;
procedure setwReserved5(const val : Word);
function getwReserved5 : Word;
property wReserved5 : Word read getwReserved5 write setwReserved5;
end;
type __TMidiEvent__Wrapper = class(TDCRecordWrapper)
private
fR : TMidiEvent;
public
function GetRecordPtr : pointer; override;
published
procedure setdwDeltaTime(const val : DWORD);
function getdwDeltaTime : DWORD;
property dwDeltaTime : DWORD read getdwDeltaTime write setdwDeltaTime;
procedure setdwStreamID(const val : DWORD);
function getdwStreamID : DWORD;
property dwStreamID : DWORD read getdwStreamID write setdwStreamID;
procedure setdwEvent(const val : DWORD);
function getdwEvent : DWORD;
property dwEvent : DWORD read getdwEvent write setdwEvent;
end;
type __TMidiHdr__Wrapper = class(TDCRecordWrapper)
private
fR : TMidiHdr;
public
function GetRecordPtr : pointer; override;
published
procedure setdwBufferLength(const val : DWORD);
function getdwBufferLength : DWORD;
property dwBufferLength : DWORD read getdwBufferLength write setdwBufferLength;
procedure setdwBytesRecorded(const val : DWORD);
function getdwBytesRecorded : DWORD;
property dwBytesRecorded : DWORD read getdwBytesRecorded write setdwBytesRecorded;
procedure setdwUser(const val : DWORD);
function getdwUser : DWORD;
property dwUser : DWORD read getdwUser write setdwUser;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setreserved(const val : DWORD);
function getreserved : DWORD;
property reserved : DWORD read getreserved write setreserved;
procedure setdwOffset(const val : DWORD);
function getdwOffset : DWORD;
property dwOffset : DWORD read getdwOffset write setdwOffset;
end;
type __TMidiInCaps__Wrapper = class(TDCRecordWrapper)
private
fR : TMidiInCaps;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __TMidiInCapsA__Wrapper = class(TDCRecordWrapper)
private
fR : TMidiInCapsA;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __TMidiInCapsW__Wrapper = class(TDCRecordWrapper)
private
fR : TMidiInCapsW;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __TMidiOutCaps__Wrapper = class(TDCRecordWrapper)
private
fR : TMidiOutCaps;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setwTechnology(const val : Word);
function getwTechnology : Word;
property wTechnology : Word read getwTechnology write setwTechnology;
procedure setwVoices(const val : Word);
function getwVoices : Word;
property wVoices : Word read getwVoices write setwVoices;
procedure setwNotes(const val : Word);
function getwNotes : Word;
property wNotes : Word read getwNotes write setwNotes;
procedure setwChannelMask(const val : Word);
function getwChannelMask : Word;
property wChannelMask : Word read getwChannelMask write setwChannelMask;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __TMidiOutCapsA__Wrapper = class(TDCRecordWrapper)
private
fR : TMidiOutCapsA;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setwTechnology(const val : Word);
function getwTechnology : Word;
property wTechnology : Word read getwTechnology write setwTechnology;
procedure setwVoices(const val : Word);
function getwVoices : Word;
property wVoices : Word read getwVoices write setwVoices;
procedure setwNotes(const val : Word);
function getwNotes : Word;
property wNotes : Word read getwNotes write setwNotes;
procedure setwChannelMask(const val : Word);
function getwChannelMask : Word;
property wChannelMask : Word read getwChannelMask write setwChannelMask;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __TMidiOutCapsW__Wrapper = class(TDCRecordWrapper)
private
fR : TMidiOutCapsW;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setwTechnology(const val : Word);
function getwTechnology : Word;
property wTechnology : Word read getwTechnology write setwTechnology;
procedure setwVoices(const val : Word);
function getwVoices : Word;
property wVoices : Word read getwVoices write setwVoices;
procedure setwNotes(const val : Word);
function getwNotes : Word;
property wNotes : Word read getwNotes write setwNotes;
procedure setwChannelMask(const val : Word);
function getwChannelMask : Word;
property wChannelMask : Word read getwChannelMask write setwChannelMask;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __TMidiPropTempo__Wrapper = class(TDCRecordWrapper)
private
fR : TMidiPropTempo;
public
function GetRecordPtr : pointer; override;
published
procedure setcbStruct(const val : DWORD);
function getcbStruct : DWORD;
property cbStruct : DWORD read getcbStruct write setcbStruct;
procedure setdwTempo(const val : DWORD);
function getdwTempo : DWORD;
property dwTempo : DWORD read getdwTempo write setdwTempo;
end;
type __TMidiPropTimeDiv__Wrapper = class(TDCRecordWrapper)
private
fR : TMidiPropTimeDiv;
public
function GetRecordPtr : pointer; override;
published
procedure setcbStruct(const val : DWORD);
function getcbStruct : DWORD;
property cbStruct : DWORD read getcbStruct write setcbStruct;
procedure setdwTimeDiv(const val : DWORD);
function getdwTimeDiv : DWORD;
property dwTimeDiv : DWORD read getdwTimeDiv write setdwTimeDiv;
end;
type __TMidiStrmBuffVer__Wrapper = class(TDCRecordWrapper)
private
fR : TMidiStrmBuffVer;
public
function GetRecordPtr : pointer; override;
published
procedure setdwVersion(const val : DWORD);
function getdwVersion : DWORD;
property dwVersion : DWORD read getdwVersion write setdwVersion;
procedure setdwMid(const val : DWORD);
function getdwMid : DWORD;
property dwMid : DWORD read getdwMid write setdwMid;
procedure setdwOEMVersion(const val : DWORD);
function getdwOEMVersion : DWORD;
property dwOEMVersion : DWORD read getdwOEMVersion write setdwOEMVersion;
end;
type __TMixerCaps__Wrapper = class(TDCRecordWrapper)
private
fR : TMixerCaps;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setfdwSupport(const val : DWORD);
function getfdwSupport : DWORD;
property fdwSupport : DWORD read getfdwSupport write setfdwSupport;
procedure setcDestinations(const val : DWORD);
function getcDestinations : DWORD;
property cDestinations : DWORD read getcDestinations write setcDestinations;
end;
type __TMixerCapsA__Wrapper = class(TDCRecordWrapper)
private
fR : TMixerCapsA;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setfdwSupport(const val : DWORD);
function getfdwSupport : DWORD;
property fdwSupport : DWORD read getfdwSupport write setfdwSupport;
procedure setcDestinations(const val : DWORD);
function getcDestinations : DWORD;
property cDestinations : DWORD read getcDestinations write setcDestinations;
end;
type __TMixerCapsW__Wrapper = class(TDCRecordWrapper)
private
fR : TMixerCapsW;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setfdwSupport(const val : DWORD);
function getfdwSupport : DWORD;
property fdwSupport : DWORD read getfdwSupport write setfdwSupport;
procedure setcDestinations(const val : DWORD);
function getcDestinations : DWORD;
property cDestinations : DWORD read getcDestinations write setcDestinations;
end;
type __tMIXERCONTROLDETAILS__Wrapper = class(TDCRecordWrapper)
private
fR : tMIXERCONTROLDETAILS;
public
function GetRecordPtr : pointer; override;
published
procedure setcbStruct(const val : DWORD);
function getcbStruct : DWORD;
property cbStruct : DWORD read getcbStruct write setcbStruct;
procedure setdwControlID(const val : DWORD);
function getdwControlID : DWORD;
property dwControlID : DWORD read getdwControlID write setdwControlID;
procedure setcChannels(const val : DWORD);
function getcChannels : DWORD;
property cChannels : DWORD read getcChannels write setcChannels;
procedure setcMultipleItems(const val : DWORD);
function getcMultipleItems : DWORD;
property cMultipleItems : DWORD read getcMultipleItems write setcMultipleItems;
procedure setcbDetails(const val : DWORD);
function getcbDetails : DWORD;
property cbDetails : DWORD read getcbDetails write setcbDetails;
end;
type __tMIXERCONTROLDETAILS_BOOLEAN__Wrapper = class(TDCRecordWrapper)
private
fR : tMIXERCONTROLDETAILS_BOOLEAN;
public
function GetRecordPtr : pointer; override;
published
procedure setfValue(const val : Longint);
function getfValue : Longint;
property fValue : Longint read getfValue write setfValue;
end;
type __tMIXERCONTROLDETAILS_SIGNED__Wrapper = class(TDCRecordWrapper)
private
fR : tMIXERCONTROLDETAILS_SIGNED;
public
function GetRecordPtr : pointer; override;
published
procedure setlValue(const val : Longint);
function getlValue : Longint;
property lValue : Longint read getlValue write setlValue;
end;
type __tMIXERCONTROLDETAILS_UNSIGNED__Wrapper = class(TDCRecordWrapper)
private
fR : tMIXERCONTROLDETAILS_UNSIGNED;
public
function GetRecordPtr : pointer; override;
published
procedure setdwValue(const val : DWORD);
function getdwValue : DWORD;
property dwValue : DWORD read getdwValue write setdwValue;
end;
type __TMixerControlDetailsBoolean__Wrapper = class(TDCRecordWrapper)
private
fR : TMixerControlDetailsBoolean;
public
function GetRecordPtr : pointer; override;
published
procedure setfValue(const val : Longint);
function getfValue : Longint;
property fValue : Longint read getfValue write setfValue;
end;
type __TMixerControlDetailsListText__Wrapper = class(TDCRecordWrapper)
private
fR : TMixerControlDetailsListText;
public
function GetRecordPtr : pointer; override;
published
procedure setdwParam1(const val : DWORD);
function getdwParam1 : DWORD;
property dwParam1 : DWORD read getdwParam1 write setdwParam1;
procedure setdwParam2(const val : DWORD);
function getdwParam2 : DWORD;
property dwParam2 : DWORD read getdwParam2 write setdwParam2;
end;
type __TMixerControlDetailsListTextA__Wrapper = class(TDCRecordWrapper)
private
fR : TMixerControlDetailsListTextA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwParam1(const val : DWORD);
function getdwParam1 : DWORD;
property dwParam1 : DWORD read getdwParam1 write setdwParam1;
procedure setdwParam2(const val : DWORD);
function getdwParam2 : DWORD;
property dwParam2 : DWORD read getdwParam2 write setdwParam2;
end;
type __TMixerControlDetailsListTextW__Wrapper = class(TDCRecordWrapper)
private
fR : TMixerControlDetailsListTextW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwParam1(const val : DWORD);
function getdwParam1 : DWORD;
property dwParam1 : DWORD read getdwParam1 write setdwParam1;
procedure setdwParam2(const val : DWORD);
function getdwParam2 : DWORD;
property dwParam2 : DWORD read getdwParam2 write setdwParam2;
end;
type __TMixerControlDetailsSigned__Wrapper = class(TDCRecordWrapper)
private
fR : TMixerControlDetailsSigned;
public
function GetRecordPtr : pointer; override;
published
procedure setlValue(const val : Longint);
function getlValue : Longint;
property lValue : Longint read getlValue write setlValue;
end;
type __TMixerControlDetailsUnsigned__Wrapper = class(TDCRecordWrapper)
private
fR : TMixerControlDetailsUnsigned;
public
function GetRecordPtr : pointer; override;
published
procedure setdwValue(const val : DWORD);
function getdwValue : DWORD;
property dwValue : DWORD read getdwValue write setdwValue;
end;
type __TMixerLine__Wrapper = class(TDCRecordWrapper)
private
fR : TMixerLine;
public
function GetRecordPtr : pointer; override;
published
procedure setcbStruct(const val : DWORD);
function getcbStruct : DWORD;
property cbStruct : DWORD read getcbStruct write setcbStruct;
procedure setdwDestination(const val : DWORD);
function getdwDestination : DWORD;
property dwDestination : DWORD read getdwDestination write setdwDestination;
procedure setdwSource(const val : DWORD);
function getdwSource : DWORD;
property dwSource : DWORD read getdwSource write setdwSource;
procedure setdwLineID(const val : DWORD);
function getdwLineID : DWORD;
property dwLineID : DWORD read getdwLineID write setdwLineID;
procedure setfdwLine(const val : DWORD);
function getfdwLine : DWORD;
property fdwLine : DWORD read getfdwLine write setfdwLine;
procedure setdwUser(const val : DWORD);
function getdwUser : DWORD;
property dwUser : DWORD read getdwUser write setdwUser;
procedure setdwComponentType(const val : DWORD);
function getdwComponentType : DWORD;
property dwComponentType : DWORD read getdwComponentType write setdwComponentType;
procedure setcChannels(const val : DWORD);
function getcChannels : DWORD;
property cChannels : DWORD read getcChannels write setcChannels;
procedure setcConnections(const val : DWORD);
function getcConnections : DWORD;
property cConnections : DWORD read getcConnections write setcConnections;
procedure setcControls(const val : DWORD);
function getcControls : DWORD;
property cControls : DWORD read getcControls write setcControls;
end;
type __TMixerLineA__Wrapper = class(TDCRecordWrapper)
private
fR : TMixerLineA;
public
function GetRecordPtr : pointer; override;
published
procedure setcbStruct(const val : DWORD);
function getcbStruct : DWORD;
property cbStruct : DWORD read getcbStruct write setcbStruct;
procedure setdwDestination(const val : DWORD);
function getdwDestination : DWORD;
property dwDestination : DWORD read getdwDestination write setdwDestination;
procedure setdwSource(const val : DWORD);
function getdwSource : DWORD;
property dwSource : DWORD read getdwSource write setdwSource;
procedure setdwLineID(const val : DWORD);
function getdwLineID : DWORD;
property dwLineID : DWORD read getdwLineID write setdwLineID;
procedure setfdwLine(const val : DWORD);
function getfdwLine : DWORD;
property fdwLine : DWORD read getfdwLine write setfdwLine;
procedure setdwUser(const val : DWORD);
function getdwUser : DWORD;
property dwUser : DWORD read getdwUser write setdwUser;
procedure setdwComponentType(const val : DWORD);
function getdwComponentType : DWORD;
property dwComponentType : DWORD read getdwComponentType write setdwComponentType;
procedure setcChannels(const val : DWORD);
function getcChannels : DWORD;
property cChannels : DWORD read getcChannels write setcChannels;
procedure setcConnections(const val : DWORD);
function getcConnections : DWORD;
property cConnections : DWORD read getcConnections write setcConnections;
procedure setcControls(const val : DWORD);
function getcControls : DWORD;
property cControls : DWORD read getcControls write setcControls;
end;
type __TMixerLineControls__Wrapper = class(TDCRecordWrapper)
private
fR : TMixerLineControls;
public
function GetRecordPtr : pointer; override;
published
procedure setcbStruct(const val : DWORD);
function getcbStruct : DWORD;
property cbStruct : DWORD read getcbStruct write setcbStruct;
procedure setdwLineID(const val : DWORD);
function getdwLineID : DWORD;
property dwLineID : DWORD read getdwLineID write setdwLineID;
procedure setdwControlID(const val : DWORD);
function getdwControlID : DWORD;
property dwControlID : DWORD read getdwControlID write setdwControlID;
procedure setdwControlType(const val : DWORD);
function getdwControlType : DWORD;
property dwControlType : DWORD read getdwControlType write setdwControlType;
procedure setcControls(const val : DWORD);
function getcControls : DWORD;
property cControls : DWORD read getcControls write setcControls;
procedure setcbmxctrl(const val : DWORD);
function getcbmxctrl : DWORD;
property cbmxctrl : DWORD read getcbmxctrl write setcbmxctrl;
end;
type __TMixerLineControlsA__Wrapper = class(TDCRecordWrapper)
private
fR : TMixerLineControlsA;
public
function GetRecordPtr : pointer; override;
published
procedure setcbStruct(const val : DWORD);
function getcbStruct : DWORD;
property cbStruct : DWORD read getcbStruct write setcbStruct;
procedure setdwLineID(const val : DWORD);
function getdwLineID : DWORD;
property dwLineID : DWORD read getdwLineID write setdwLineID;
procedure setdwControlID(const val : DWORD);
function getdwControlID : DWORD;
property dwControlID : DWORD read getdwControlID write setdwControlID;
procedure setdwControlType(const val : DWORD);
function getdwControlType : DWORD;
property dwControlType : DWORD read getdwControlType write setdwControlType;
procedure setcControls(const val : DWORD);
function getcControls : DWORD;
property cControls : DWORD read getcControls write setcControls;
procedure setcbmxctrl(const val : DWORD);
function getcbmxctrl : DWORD;
property cbmxctrl : DWORD read getcbmxctrl write setcbmxctrl;
end;
type __TMixerLineControlsW__Wrapper = class(TDCRecordWrapper)
private
fR : TMixerLineControlsW;
public
function GetRecordPtr : pointer; override;
published
procedure setcbStruct(const val : DWORD);
function getcbStruct : DWORD;
property cbStruct : DWORD read getcbStruct write setcbStruct;
procedure setdwLineID(const val : DWORD);
function getdwLineID : DWORD;
property dwLineID : DWORD read getdwLineID write setdwLineID;
procedure setdwControlID(const val : DWORD);
function getdwControlID : DWORD;
property dwControlID : DWORD read getdwControlID write setdwControlID;
procedure setdwControlType(const val : DWORD);
function getdwControlType : DWORD;
property dwControlType : DWORD read getdwControlType write setdwControlType;
procedure setcControls(const val : DWORD);
function getcControls : DWORD;
property cControls : DWORD read getcControls write setcControls;
procedure setcbmxctrl(const val : DWORD);
function getcbmxctrl : DWORD;
property cbmxctrl : DWORD read getcbmxctrl write setcbmxctrl;
end;
type __TMixerLineW__Wrapper = class(TDCRecordWrapper)
private
fR : TMixerLineW;
public
function GetRecordPtr : pointer; override;
published
procedure setcbStruct(const val : DWORD);
function getcbStruct : DWORD;
property cbStruct : DWORD read getcbStruct write setcbStruct;
procedure setdwDestination(const val : DWORD);
function getdwDestination : DWORD;
property dwDestination : DWORD read getdwDestination write setdwDestination;
procedure setdwSource(const val : DWORD);
function getdwSource : DWORD;
property dwSource : DWORD read getdwSource write setdwSource;
procedure setdwLineID(const val : DWORD);
function getdwLineID : DWORD;
property dwLineID : DWORD read getdwLineID write setdwLineID;
procedure setfdwLine(const val : DWORD);
function getfdwLine : DWORD;
property fdwLine : DWORD read getfdwLine write setfdwLine;
procedure setdwUser(const val : DWORD);
function getdwUser : DWORD;
property dwUser : DWORD read getdwUser write setdwUser;
procedure setdwComponentType(const val : DWORD);
function getdwComponentType : DWORD;
property dwComponentType : DWORD read getdwComponentType write setdwComponentType;
procedure setcChannels(const val : DWORD);
function getcChannels : DWORD;
property cChannels : DWORD read getcChannels write setcChannels;
procedure setcConnections(const val : DWORD);
function getcConnections : DWORD;
property cConnections : DWORD read getcConnections write setcConnections;
procedure setcControls(const val : DWORD);
function getcControls : DWORD;
property cControls : DWORD read getcControls write setcControls;
end;
type __TMMCKInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TMMCKInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setckid(const val : FOURCC);
function getckid : FOURCC;
property ckid : FOURCC read getckid write setckid;
procedure setcksize(const val : DWORD);
function getcksize : DWORD;
property cksize : DWORD read getcksize write setcksize;
procedure setfccType(const val : FOURCC);
function getfccType : FOURCC;
property fccType : FOURCC read getfccType write setfccType;
procedure setdwDataOffset(const val : DWORD);
function getdwDataOffset : DWORD;
property dwDataOffset : DWORD read getdwDataOffset write setdwDataOffset;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type __TMMIOInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TMMIOInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setfccIOProc(const val : FOURCC);
function getfccIOProc : FOURCC;
property fccIOProc : FOURCC read getfccIOProc write setfccIOProc;
procedure setwErrorRet(const val : UINT);
function getwErrorRet : UINT;
property wErrorRet : UINT read getwErrorRet write setwErrorRet;
procedure setcchBuffer(const val : Longint);
function getcchBuffer : Longint;
property cchBuffer : Longint read getcchBuffer write setcchBuffer;
procedure setlBufOffset(const val : Longint);
function getlBufOffset : Longint;
property lBufOffset : Longint read getlBufOffset write setlBufOffset;
procedure setlDiskOffset(const val : Longint);
function getlDiskOffset : Longint;
property lDiskOffset : Longint read getlDiskOffset write setlDiskOffset;
procedure setdwReserved1(const val : DWORD);
function getdwReserved1 : DWORD;
property dwReserved1 : DWORD read getdwReserved1 write setdwReserved1;
procedure setdwReserved2(const val : DWORD);
function getdwReserved2 : DWORD;
property dwReserved2 : DWORD read getdwReserved2 write setdwReserved2;
procedure setHMMIO(const val : HMMIO);
function getHMMIO : HMMIO;
property HMMIO : HMMIO read getHMMIO write setHMMIO;
end;
type __TMMTime__Wrapper = class(TDCRecordWrapper)
private
fR : TMMTime;
public
function GetRecordPtr : pointer; override;
published
procedure setms(const val : DWORD);
function getms : DWORD;
property ms : DWORD read getms write setms;
procedure setsample(const val : DWORD);
function getsample : DWORD;
property sample : DWORD read getsample write setsample;
procedure setcb(const val : DWORD);
function getcb : DWORD;
property cb : DWORD read getcb write setcb;
procedure setticks(const val : DWORD);
function getticks : DWORD;
property ticks : DWORD read getticks write setticks;
procedure sethour(const val : Byte);
function gethour : Byte;
property hour : Byte read gethour write sethour;
procedure setmin(const val : Byte);
function getmin : Byte;
property min : Byte read getmin write setmin;
procedure setsec(const val : Byte);
function getsec : Byte;
property sec : Byte read getsec write setsec;
procedure setframe(const val : Byte);
function getframe : Byte;
property frame : Byte read getframe write setframe;
procedure setfps(const val : Byte);
function getfps : Byte;
property fps : Byte read getfps write setfps;
procedure setdummy(const val : Byte);
function getdummy : Byte;
property dummy : Byte read getdummy write setdummy;
procedure setsongptrpos(const val : DWORD);
function getsongptrpos : DWORD;
property songptrpos : DWORD read getsongptrpos write setsongptrpos;
end;
type __TPCMWaveFormat__Wrapper = class(TDCRecordWrapper)
private
fR : TPCMWaveFormat;
public
function GetRecordPtr : pointer; override;
published
procedure setwBitsPerSample(const val : Word);
function getwBitsPerSample : Word;
property wBitsPerSample : Word read getwBitsPerSample write setwBitsPerSample;
end;
type __TTimeCaps__Wrapper = class(TDCRecordWrapper)
private
fR : TTimeCaps;
public
function GetRecordPtr : pointer; override;
published
procedure setwPeriodMin(const val : UINT);
function getwPeriodMin : UINT;
property wPeriodMin : UINT read getwPeriodMin write setwPeriodMin;
procedure setwPeriodMax(const val : UINT);
function getwPeriodMax : UINT;
property wPeriodMax : UINT read getwPeriodMax write setwPeriodMax;
end;
type __TWaveFormat__Wrapper = class(TDCRecordWrapper)
private
fR : TWaveFormat;
public
function GetRecordPtr : pointer; override;
published
procedure setwFormatTag(const val : Word);
function getwFormatTag : Word;
property wFormatTag : Word read getwFormatTag write setwFormatTag;
procedure setnChannels(const val : Word);
function getnChannels : Word;
property nChannels : Word read getnChannels write setnChannels;
procedure setnSamplesPerSec(const val : DWORD);
function getnSamplesPerSec : DWORD;
property nSamplesPerSec : DWORD read getnSamplesPerSec write setnSamplesPerSec;
procedure setnAvgBytesPerSec(const val : DWORD);
function getnAvgBytesPerSec : DWORD;
property nAvgBytesPerSec : DWORD read getnAvgBytesPerSec write setnAvgBytesPerSec;
procedure setnBlockAlign(const val : Word);
function getnBlockAlign : Word;
property nBlockAlign : Word read getnBlockAlign write setnBlockAlign;
end;
type __tWAVEFORMATEX__Wrapper = class(TDCRecordWrapper)
private
fR : tWAVEFORMATEX;
public
function GetRecordPtr : pointer; override;
published
procedure setwFormatTag(const val : Word);
function getwFormatTag : Word;
property wFormatTag : Word read getwFormatTag write setwFormatTag;
procedure setnChannels(const val : Word);
function getnChannels : Word;
property nChannels : Word read getnChannels write setnChannels;
procedure setnSamplesPerSec(const val : DWORD);
function getnSamplesPerSec : DWORD;
property nSamplesPerSec : DWORD read getnSamplesPerSec write setnSamplesPerSec;
procedure setnAvgBytesPerSec(const val : DWORD);
function getnAvgBytesPerSec : DWORD;
property nAvgBytesPerSec : DWORD read getnAvgBytesPerSec write setnAvgBytesPerSec;
procedure setnBlockAlign(const val : Word);
function getnBlockAlign : Word;
property nBlockAlign : Word read getnBlockAlign write setnBlockAlign;
procedure setwBitsPerSample(const val : Word);
function getwBitsPerSample : Word;
property wBitsPerSample : Word read getwBitsPerSample write setwBitsPerSample;
procedure setcbSize(const val : Word);
function getcbSize : Word;
property cbSize : Word read getcbSize write setcbSize;
end;
type __TWaveHdr__Wrapper = class(TDCRecordWrapper)
private
fR : TWaveHdr;
public
function GetRecordPtr : pointer; override;
published
procedure setdwBufferLength(const val : DWORD);
function getdwBufferLength : DWORD;
property dwBufferLength : DWORD read getdwBufferLength write setdwBufferLength;
procedure setdwBytesRecorded(const val : DWORD);
function getdwBytesRecorded : DWORD;
property dwBytesRecorded : DWORD read getdwBytesRecorded write setdwBytesRecorded;
procedure setdwUser(const val : DWORD);
function getdwUser : DWORD;
property dwUser : DWORD read getdwUser write setdwUser;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setdwLoops(const val : DWORD);
function getdwLoops : DWORD;
property dwLoops : DWORD read getdwLoops write setdwLoops;
procedure setreserved(const val : DWORD);
function getreserved : DWORD;
property reserved : DWORD read getreserved write setreserved;
end;
type __TWaveInCaps__Wrapper = class(TDCRecordWrapper)
private
fR : TWaveInCaps;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setdwFormats(const val : DWORD);
function getdwFormats : DWORD;
property dwFormats : DWORD read getdwFormats write setdwFormats;
procedure setwChannels(const val : Word);
function getwChannels : Word;
property wChannels : Word read getwChannels write setwChannels;
procedure setwReserved1(const val : Word);
function getwReserved1 : Word;
property wReserved1 : Word read getwReserved1 write setwReserved1;
end;
type __TWaveInCapsA__Wrapper = class(TDCRecordWrapper)
private
fR : TWaveInCapsA;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setdwFormats(const val : DWORD);
function getdwFormats : DWORD;
property dwFormats : DWORD read getdwFormats write setdwFormats;
procedure setwChannels(const val : Word);
function getwChannels : Word;
property wChannels : Word read getwChannels write setwChannels;
procedure setwReserved1(const val : Word);
function getwReserved1 : Word;
property wReserved1 : Word read getwReserved1 write setwReserved1;
end;
type __TWaveInCapsW__Wrapper = class(TDCRecordWrapper)
private
fR : TWaveInCapsW;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setdwFormats(const val : DWORD);
function getdwFormats : DWORD;
property dwFormats : DWORD read getdwFormats write setdwFormats;
procedure setwChannels(const val : Word);
function getwChannels : Word;
property wChannels : Word read getwChannels write setwChannels;
procedure setwReserved1(const val : Word);
function getwReserved1 : Word;
property wReserved1 : Word read getwReserved1 write setwReserved1;
end;
type __TWaveOutCaps__Wrapper = class(TDCRecordWrapper)
private
fR : TWaveOutCaps;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setdwFormats(const val : DWORD);
function getdwFormats : DWORD;
property dwFormats : DWORD read getdwFormats write setdwFormats;
procedure setwChannels(const val : Word);
function getwChannels : Word;
property wChannels : Word read getwChannels write setwChannels;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __TWaveOutCapsA__Wrapper = class(TDCRecordWrapper)
private
fR : TWaveOutCapsA;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setdwFormats(const val : DWORD);
function getdwFormats : DWORD;
property dwFormats : DWORD read getdwFormats write setdwFormats;
procedure setwChannels(const val : Word);
function getwChannels : Word;
property wChannels : Word read getwChannels write setwChannels;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __TWaveOutCapsW__Wrapper = class(TDCRecordWrapper)
private
fR : TWaveOutCapsW;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setdwFormats(const val : DWORD);
function getdwFormats : DWORD;
property dwFormats : DWORD read getdwFormats write setdwFormats;
procedure setwChannels(const val : Word);
function getwChannels : Word;
property wChannels : Word read getwChannels write setwChannels;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __WAVEFORMAT__Wrapper = class(TDCRecordWrapper)
private
fR : WAVEFORMAT;
public
function GetRecordPtr : pointer; override;
published
procedure setwFormatTag(const val : Word);
function getwFormatTag : Word;
property wFormatTag : Word read getwFormatTag write setwFormatTag;
procedure setnChannels(const val : Word);
function getnChannels : Word;
property nChannels : Word read getnChannels write setnChannels;
procedure setnSamplesPerSec(const val : DWORD);
function getnSamplesPerSec : DWORD;
property nSamplesPerSec : DWORD read getnSamplesPerSec write setnSamplesPerSec;
procedure setnAvgBytesPerSec(const val : DWORD);
function getnAvgBytesPerSec : DWORD;
property nAvgBytesPerSec : DWORD read getnAvgBytesPerSec write setnAvgBytesPerSec;
procedure setnBlockAlign(const val : Word);
function getnBlockAlign : Word;
property nBlockAlign : Word read getnBlockAlign write setnBlockAlign;
end;
type __waveformat_tag__Wrapper = class(TDCRecordWrapper)
private
fR : waveformat_tag;
public
function GetRecordPtr : pointer; override;
published
procedure setwFormatTag(const val : Word);
function getwFormatTag : Word;
property wFormatTag : Word read getwFormatTag write setwFormatTag;
procedure setnChannels(const val : Word);
function getnChannels : Word;
property nChannels : Word read getnChannels write setnChannels;
procedure setnSamplesPerSec(const val : DWORD);
function getnSamplesPerSec : DWORD;
property nSamplesPerSec : DWORD read getnSamplesPerSec write setnSamplesPerSec;
procedure setnAvgBytesPerSec(const val : DWORD);
function getnAvgBytesPerSec : DWORD;
property nAvgBytesPerSec : DWORD read getnAvgBytesPerSec write setnAvgBytesPerSec;
procedure setnBlockAlign(const val : Word);
function getnBlockAlign : Word;
property nBlockAlign : Word read getnBlockAlign write setnBlockAlign;
end;
type __WAVEHDR__Wrapper = class(TDCRecordWrapper)
private
fR : WAVEHDR;
public
function GetRecordPtr : pointer; override;
published
procedure setdwBufferLength(const val : DWORD);
function getdwBufferLength : DWORD;
property dwBufferLength : DWORD read getdwBufferLength write setdwBufferLength;
procedure setdwBytesRecorded(const val : DWORD);
function getdwBytesRecorded : DWORD;
property dwBytesRecorded : DWORD read getdwBytesRecorded write setdwBytesRecorded;
procedure setdwUser(const val : DWORD);
function getdwUser : DWORD;
property dwUser : DWORD read getdwUser write setdwUser;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setdwLoops(const val : DWORD);
function getdwLoops : DWORD;
property dwLoops : DWORD read getdwLoops write setdwLoops;
procedure setreserved(const val : DWORD);
function getreserved : DWORD;
property reserved : DWORD read getreserved write setreserved;
end;
type __wavehdr_tag__Wrapper = class(TDCRecordWrapper)
private
fR : wavehdr_tag;
public
function GetRecordPtr : pointer; override;
published
procedure setdwBufferLength(const val : DWORD);
function getdwBufferLength : DWORD;
property dwBufferLength : DWORD read getdwBufferLength write setdwBufferLength;
procedure setdwBytesRecorded(const val : DWORD);
function getdwBytesRecorded : DWORD;
property dwBytesRecorded : DWORD read getdwBytesRecorded write setdwBytesRecorded;
procedure setdwUser(const val : DWORD);
function getdwUser : DWORD;
property dwUser : DWORD read getdwUser write setdwUser;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setdwLoops(const val : DWORD);
function getdwLoops : DWORD;
property dwLoops : DWORD read getdwLoops write setdwLoops;
procedure setreserved(const val : DWORD);
function getreserved : DWORD;
property reserved : DWORD read getreserved write setreserved;
end;
type __WAVEINCAPS__Wrapper = class(TDCRecordWrapper)
private
fR : WAVEINCAPS;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setdwFormats(const val : DWORD);
function getdwFormats : DWORD;
property dwFormats : DWORD read getdwFormats write setdwFormats;
procedure setwChannels(const val : Word);
function getwChannels : Word;
property wChannels : Word read getwChannels write setwChannels;
procedure setwReserved1(const val : Word);
function getwReserved1 : Word;
property wReserved1 : Word read getwReserved1 write setwReserved1;
end;
type __WAVEINCAPSA__Wrapper = class(TDCRecordWrapper)
private
fR : WAVEINCAPSA;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setdwFormats(const val : DWORD);
function getdwFormats : DWORD;
property dwFormats : DWORD read getdwFormats write setdwFormats;
procedure setwChannels(const val : Word);
function getwChannels : Word;
property wChannels : Word read getwChannels write setwChannels;
procedure setwReserved1(const val : Word);
function getwReserved1 : Word;
property wReserved1 : Word read getwReserved1 write setwReserved1;
end;
type __WAVEINCAPSW__Wrapper = class(TDCRecordWrapper)
private
fR : WAVEINCAPSW;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setdwFormats(const val : DWORD);
function getdwFormats : DWORD;
property dwFormats : DWORD read getdwFormats write setdwFormats;
procedure setwChannels(const val : Word);
function getwChannels : Word;
property wChannels : Word read getwChannels write setwChannels;
procedure setwReserved1(const val : Word);
function getwReserved1 : Word;
property wReserved1 : Word read getwReserved1 write setwReserved1;
end;
type __WAVEOUTCAPS__Wrapper = class(TDCRecordWrapper)
private
fR : WAVEOUTCAPS;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setdwFormats(const val : DWORD);
function getdwFormats : DWORD;
property dwFormats : DWORD read getdwFormats write setdwFormats;
procedure setwChannels(const val : Word);
function getwChannels : Word;
property wChannels : Word read getwChannels write setwChannels;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __WAVEOUTCAPSA__Wrapper = class(TDCRecordWrapper)
private
fR : WAVEOUTCAPSA;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setdwFormats(const val : DWORD);
function getdwFormats : DWORD;
property dwFormats : DWORD read getdwFormats write setdwFormats;
procedure setwChannels(const val : Word);
function getwChannels : Word;
property wChannels : Word read getwChannels write setwChannels;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type __WAVEOUTCAPSW__Wrapper = class(TDCRecordWrapper)
private
fR : WAVEOUTCAPSW;
public
function GetRecordPtr : pointer; override;
published
procedure setwMid(const val : Word);
function getwMid : Word;
property wMid : Word read getwMid write setwMid;
procedure setwPid(const val : Word);
function getwPid : Word;
property wPid : Word read getwPid write setwPid;
procedure setvDriverVersion(const val : MMVERSION);
function getvDriverVersion : MMVERSION;
property vDriverVersion : MMVERSION read getvDriverVersion write setvDriverVersion;
procedure setdwFormats(const val : DWORD);
function getdwFormats : DWORD;
property dwFormats : DWORD read getdwFormats write setdwFormats;
procedure setwChannels(const val : Word);
function getwChannels : Word;
property wChannels : Word read getwChannels write setwChannels;
procedure setdwSupport(const val : DWORD);
function getdwSupport : DWORD;
property dwSupport : DWORD read getdwSupport write setdwSupport;
end;
type
_T0 = function (p0 : HDRVR;
p1 : Longint;
p2 : Longint): Longint of object;

{_T1 = function (p0 : PWideChar;
p1 : PWideChar;
p2 : Longint): HDRVR of object;}

_T2 = function (p0 : HDRVR;
p1 : UINT;
p2 : Longint;
p3 : Longint): Longint of object;

_T3 = function (p0 : HDRVR): HMODULE of object;

_T4 = _T3;

_T5 = function (p0 : DWORD;
p1 : HDRVR;
p2 : UINT;
p3 : LPARAM;
p4 : LPARAM): Longint of object;

_T6 = function : UINT of object;

{_T7 = function (p0 : PChar;
p1 : UINT): BOOL of object;}

{_T8 = function (p0 : PAnsiChar;
p1 : UINT): BOOL of object;}

{_T9 = function (p0 : PWideChar;
p1 : UINT): BOOL of object;}

{_T10 = function (p0 : PChar;
p1 : HMODULE;
p2 : DWORD): BOOL of object;}

{_T11 = function (p0 : PAnsiChar;
p1 : HMODULE;
p2 : DWORD): BOOL of object;}

{_T12 = function (p0 : PWideChar;
p1 : HMODULE;
p2 : DWORD): BOOL of object;}

_T13 = _T6;

{_T14 = function (p0 : UINT;
p1 : PWaveOutCaps;
p2 : UINT): MMRESULT of object;}

{_T15 = function (p0 : UINT;
p1 : PWaveOutCapsA;
p2 : UINT): MMRESULT of object;}

{_T16 = function (p0 : UINT;
p1 : PWaveOutCapsW;
p2 : UINT): MMRESULT of object;}

_T17 = function (p0 : HWAVEOUT;
p1 : PDWORD): MMRESULT of object;

_T18 = function (p0 : HWAVEOUT;
p1 : DWORD): MMRESULT of object;

{_T19 = function (p0 : MMRESULT;
p1 : PChar;
p2 : UINT): MMRESULT of object;}

{_T20 = function (p0 : MMRESULT;
p1 : PAnsiChar;
p2 : UINT): MMRESULT of object;}

{_T21 = function (p0 : MMRESULT;
p1 : PWideChar;
p2 : UINT): MMRESULT of object;}

{_T22 = function (p0 : PHWAVEOUT;
p1 : UINT;
p2 : PWaveFormatEx;
p3 : DWORD;
p4 : DWORD;
p5 : DWORD): MMRESULT of object;}

_T23 = function (p0 : HWAVEOUT): MMRESULT of object;

{_T24 = function (p0 : HWAVEOUT;
p1 : PWaveHdr;
p2 : UINT): MMRESULT of object;}

{_T25 = function (p0 : HWAVEOUT;
p1 : PWaveHdr;
p2 : UINT): MMRESULT of object;}

{_T26 = function (p0 : HWAVEOUT;
p1 : PWaveHdr;
p2 : UINT): MMRESULT of object;}

_T27 = _T23;

_T28 = _T23;

_T29 = _T23;

_T30 = _T23;

{_T31 = function (p0 : HWAVEOUT;
p1 : PMMTime;
p2 : UINT): MMRESULT of object;}

_T32 = _T17;

_T33 = _T18;

_T34 = _T17;

_T35 = _T18;

_T36 = function (p0 : HWAVEOUT;
p1 : PUINT): MMRESULT of object;

_T37 = function (p0 : HWAVEOUT;
p1 : UINT;
p2 : DWORD;
p3 : DWORD): Longint of object;

_T38 = _T6;

{_T39 = function (p0 : HWAVEOUT;
p1 : PWaveInCaps;
p2 : UINT): MMRESULT of object;}

{_T40 = function (p0 : HWAVEOUT;
p1 : PWaveInCapsA;
p2 : UINT): MMRESULT of object;}

{_T41 = function (p0 : HWAVEOUT;
p1 : PWaveInCapsW;
p2 : UINT): MMRESULT of object;}

{_T42 = function (p0 : MMRESULT;
p1 : PChar;
p2 : UINT): MMRESULT of object;}

{_T43 = function (p0 : MMRESULT;
p1 : PAnsiChar;
p2 : UINT): MMRESULT of object;}

{_T44 = function (p0 : MMRESULT;
p1 : PWideChar;
p2 : UINT): MMRESULT of object;}

{_T45 = function (p0 : PHWAVEIN;
p1 : UINT;
p2 : PWaveFormatEx;
p3 : DWORD;
p4 : DWORD;
p5 : DWORD): MMRESULT of object;}

_T46 = function (p0 : HWAVEIN): MMRESULT of object;

{_T47 = function (p0 : HWAVEIN;
p1 : PWaveHdr;
p2 : UINT): MMRESULT of object;}

{_T48 = function (p0 : HWAVEIN;
p1 : PWaveHdr;
p2 : UINT): MMRESULT of object;}

{_T49 = function (p0 : HWAVEIN;
p1 : PWaveHdr;
p2 : UINT): MMRESULT of object;}

_T50 = _T46;

_T51 = _T46;

_T52 = _T46;

{_T53 = function (p0 : HWAVEIN;
p1 : PMMTime;
p2 : UINT): MMRESULT of object;}

_T54 = function (p0 : HWAVEIN;
p1 : PUINT): MMRESULT of object;

_T55 = function (p0 : HWAVEIN;
p1 : UINT;
p2 : DWORD;
p3 : DWORD): MMRESULT of object;

_T56 = _T6;

_T57 = function (p0 : PHMIDISTRM;
p1 : PUINT;
p2 : DWORD;
p3 : DWORD;
p4 : DWORD;
p5 : DWORD): MMRESULT of object;

_T58 = function (p0 : HMIDISTRM): MMRESULT of object;

_T59 = function (p0 : HMIDISTRM;
p1 : PBYTE;
p2 : DWORD): MMRESULT of object;

{_T60 = function (p0 : HMIDISTRM;
p1 : PMMTime;
p2 : UINT): MMRESULT of object;}

{_T61 = function (p0 : HMIDISTRM;
p1 : PMidiHdr;
p2 : UINT): MMRESULT of object;}

_T62 = _T58;

_T63 = _T58;

_T64 = _T58;

_T65 = function (p0 : HMIDI;
p1 : HMIDIOUT;
p2 : Pointer): MMRESULT of object;

_T66 = _T65;

{_T67 = function (p0 : UINT;
p1 : PMidiOutCaps;
p2 : UINT): MMRESULT of object;}

{_T68 = function (p0 : UINT;
p1 : PMidiOutCapsA;
p2 : UINT): MMRESULT of object;}

{_T69 = function (p0 : UINT;
p1 : PMidiOutCapsW;
p2 : UINT): MMRESULT of object;}

_T70 = function (p0 : HMIDIOUT;
p1 : PDWORD): MMRESULT of object;

_T71 = function (p0 : HMIDIOUT;
p1 : DWORD): MMRESULT of object;

{_T72 = function (p0 : MMRESULT;
p1 : PChar;
p2 : UINT): MMRESULT of object;}

{_T73 = function (p0 : MMRESULT;
p1 : PAnsiChar;
p2 : UINT): MMRESULT of object;}

{_T74 = function (p0 : MMRESULT;
p1 : PWideChar;
p2 : UINT): MMRESULT of object;}

_T75 = function (p0 : PHMIDIOUT;
p1 : UINT;
p2 : DWORD;
p3 : DWORD;
p4 : DWORD): MMRESULT of object;

_T76 = function (p0 : HMIDIOUT): MMRESULT of object;

{_T77 = function (p0 : HMIDIOUT;
p1 : PMidiHdr;
p2 : UINT): MMRESULT of object;}

{_T78 = function (p0 : HMIDIOUT;
p1 : PMidiHdr;
p2 : UINT): MMRESULT of object;}

_T79 = _T71;

{_T80 = function (p0 : HMIDIOUT;
p1 : PMidiHdr;
p2 : UINT): MMRESULT of object;}

_T81 = _T76;

_T82 = function (p0 : HMIDIOUT;
p1 : UINT;
p2 : PWord;
p3 : UINT): MMRESULT of object;

_T83 = _T82;

_T84 = function (p0 : HMIDIOUT;
p1 : PUINT): MMRESULT of object;

_T85 = function (p0 : HMIDIOUT;
p1 : UINT;
p2 : DWORD;
p3 : DWORD): MMRESULT of object;

_T86 = _T6;

{_T87 = function (p0 : UINT;
p1 : PMidiInCaps;
p2 : UINT): MMRESULT of object;}

{_T88 = function (p0 : UINT;
p1 : PMidiInCapsA;
p2 : UINT): MMRESULT of object;}

{_T89 = function (p0 : UINT;
p1 : PMidiInCapsW;
p2 : UINT): MMRESULT of object;}

{_T90 = function (p0 : MMRESULT;
p1 : PChar;
p2 : UINT): MMRESULT of object;}

{_T91 = function (p0 : MMRESULT;
p1 : PAnsiChar;
p2 : UINT): MMRESULT of object;}

{_T92 = function (p0 : MMRESULT;
p1 : PWideChar;
p2 : UINT): MMRESULT of object;}

_T93 = function (p0 : PHMIDIIN;
p1 : UINT;
p2 : DWORD;
p3 : DWORD;
p4 : DWORD): MMRESULT of object;

_T94 = function (p0 : HMIDIIN): MMRESULT of object;

{_T95 = function (p0 : HMIDIIN;
p1 : PMidiHdr;
p2 : UINT): MMRESULT of object;}

{_T96 = function (p0 : HMIDIIN;
p1 : PMidiHdr;
p2 : UINT): MMRESULT of object;}

{_T97 = function (p0 : HMIDIIN;
p1 : PMidiHdr;
p2 : UINT): MMRESULT of object;}

_T98 = _T94;

_T99 = _T94;

_T100 = _T94;

_T101 = function (p0 : HMIDIIN;
p1 : PUINT): MMRESULT of object;

_T102 = function (p0 : HMIDIIN;
p1 : UINT;
p2 : DWORD;
p3 : DWORD): MMRESULT of object;

_T103 = _T6;

{_T104 = function (p0 : UINT;
p1 : PAuxCaps;
p2 : UINT): MMRESULT of object;}

{_T105 = function (p0 : UINT;
p1 : PAuxCapsA;
p2 : UINT): MMRESULT of object;}

{_T106 = function (p0 : UINT;
p1 : PAuxCapsW;
p2 : UINT): MMRESULT of object;}

_T107 = function (p0 : UINT;
p1 : DWORD): MMRESULT of object;

_T108 = function (p0 : UINT;
p1 : PDWORD): MMRESULT of object;

_T109 = function (p0 : UINT;
p1 : UINT;
p2 : DWORD;
p3 : DWORD): MMRESULT of object;

_T110 = _T6;

{_T111 = function (p0 : UINT;
p1 : PMixerCaps;
p2 : UINT): MMRESULT of object;}

{_T112 = function (p0 : UINT;
p1 : PMixerCapsA;
p2 : UINT): MMRESULT of object;}

{_T113 = function (p0 : UINT;
p1 : PMixerCapsW;
p2 : UINT): MMRESULT of object;}

_T114 = function (p0 : PHMIXER;
p1 : UINT;
p2 : DWORD;
p3 : DWORD;
p4 : DWORD): MMRESULT of object;

_T115 = function (p0 : HMIXER): MMRESULT of object;

_T116 = function (p0 : HMIXER;
p1 : UINT;
p2 : DWORD;
p3 : DWORD): DWORD of object;

{_T117 = function (p0 : HMIXEROBJ;
p1 : PMixerLine;
p2 : DWORD): MMRESULT of object;}

{_T118 = function (p0 : HMIXEROBJ;
p1 : PMixerLineA;
p2 : DWORD): MMRESULT of object;}

{_T119 = function (p0 : HMIXEROBJ;
p1 : PMixerLineW;
p2 : DWORD): MMRESULT of object;}

_T120 = function (p0 : HMIXEROBJ;
var p1 : UINT;
p2 : DWORD): MMRESULT of object;

{_T121 = function (p0 : HMIXEROBJ;
p1 : PMixerLineControls;
p2 : DWORD): MMRESULT of object;}

{_T122 = function (p0 : HMIXEROBJ;
p1 : PMixerLineControlsA;
p2 : DWORD): MMRESULT of object;}

{_T123 = function (p0 : HMIXEROBJ;
p1 : PMixerLineControlsW;
p2 : DWORD): MMRESULT of object;}

{_T124 = function (p0 : HMIXEROBJ;
p1 : PMixerControlDetails;
p2 : DWORD): MMRESULT of object;}

{_T125 = function (p0 : HMIXEROBJ;
p1 : PMixerControlDetails;
p2 : DWORD): MMRESULT of object;}

{_T126 = function (p0 : HMIXEROBJ;
p1 : PMixerControlDetails;
p2 : DWORD): MMRESULT of object;}

{_T127 = function (p0 : HMIXEROBJ;
p1 : PMixerControlDetails;
p2 : DWORD): MMRESULT of object;}

{_T128 = function (p0 : PMMTime;
p1 : Word): MMRESULT of object;}

_T129 = function : DWORD of object;

{_T130 = function (p0 : UINT;
p1 : UINT;
p2 : TFNTimeCallBack;
p3 : DWORD;
p4 : UINT): MMRESULT of object;}

_T131 = function (p0 : UINT): MMRESULT of object;

{_T132 = function (p0 : PTimeCaps;
p1 : UINT): MMRESULT of object;}

_T133 = _T131;

_T134 = _T131;

_T135 = _T6;

{_T136 = function (p0 : UINT;
p1 : PJoyCaps;
p2 : UINT): MMRESULT of object;}

{_T137 = function (p0 : UINT;
p1 : PJoyCapsA;
p2 : UINT): MMRESULT of object;}

{_T138 = function (p0 : UINT;
p1 : PJoyCapsW;
p2 : UINT): MMRESULT of object;}

{_T139 = function (p0 : UINT;
p1 : PJoyInfo): MMRESULT of object;}

{_T140 = function (p0 : UINT;
p1 : PJoyInfoEx): MMRESULT of object;}

_T141 = function (p0 : UINT;
p1 : PUINT): MMRESULT of object;

_T142 = _T131;

_T143 = function (p0 : HWND;
p1 : UINT;
p2 : UINT;
p3 : BOOL): MMRESULT of object;

_T144 = function (p0 : UINT;
p1 : UINT): MMRESULT of object;

{_T145 = function (p0 : PChar;
p1 : UINT): FOURCC of object;}

{_T146 = function (p0 : PAnsiChar;
p1 : UINT): FOURCC of object;}

{_T147 = function (p0 : PWideChar;
p1 : UINT): FOURCC of object;}

{_T148 = function (p0 : FOURCC;
p1 : TFNMMIOProc;
p2 : DWORD): TFNMMIOProc of object;}

{_T149 = function (p0 : FOURCC;
p1 : TFNMMIOProc;
p2 : DWORD): TFNMMIOProc of object;}

{_T150 = function (p0 : FOURCC;
p1 : TFNMMIOProc;
p2 : DWORD): TFNMMIOProc of object;}

{_T151 = function (p0 : PChar;
p1 : PMMIOInfo;
p2 : DWORD): HMMIO of object;}

{_T152 = function (p0 : PChar;
p1 : PMMIOInfo;
p2 : DWORD): HMMIO of object;}

{_T153 = function (p0 : PChar;
p1 : PMMIOInfo;
p2 : DWORD): HMMIO of object;}

{_T154 = function (p0 : PChar;
p1 : PChar;
p2 : PMMIOInfo;
p3 : DWORD): MMRESULT of object;}

{_T155 = function (p0 : PAnsiChar;
p1 : PAnsiChar;
p2 : PMMIOInfo;
p3 : DWORD): MMRESULT of object;}

{_T156 = function (p0 : PWideChar;
p1 : PWideChar;
p2 : PMMIOInfo;
p3 : DWORD): MMRESULT of object;}

_T157 = function (p0 : HMMIO;
p1 : UINT): MMRESULT of object;

{_T158 = function (p0 : HMMIO;
p1 : PChar;
p2 : Longint): Longint of object;}

{_T159 = function (p0 : HMMIO;
p1 : PChar;
p2 : Longint): Longint of object;}

_T160 = function (p0 : HMMIO;
p1 : Longint;
p2 : Integer): Longint of object;

{_T161 = function (p0 : HMMIO;
p1 : PMMIOInfo;
p2 : UINT): MMRESULT of object;}

{_T162 = function (p0 : HMMIO;
p1 : PMMIOInfo;
p2 : UINT): MMRESULT of object;}

{_T163 = function (p0 : HMMIO;
p1 : PChar;
p2 : Longint;
p3 : Word): MMRESULT of object;}

_T164 = _T157;

{_T165 = function (p0 : HMMIO;
p1 : PMMIOInfo;
p2 : UINT): MMRESULT of object;}

_T166 = function (p0 : HMMIO;
p1 : UINT;
p2 : DWORD;
p3 : DWORD): Longint of object;

{_T167 = function (p0 : HMMIO;
p1 : PMMCKInfo;
p2 : PMMCKInfo;
p3 : UINT): MMRESULT of object;}

{_T168 = function (p0 : HMMIO;
p1 : PMMCKInfo;
p2 : UINT): MMRESULT of object;}

{_T169 = function (p0 : HMMIO;
p1 : PMMCKInfo;
p2 : UINT): MMRESULT of object;}

_T170 = function (p0 : MCIDEVICEID;
p1 : UINT;
p2 : DWORD;
p3 : DWORD): MCIERROR of object;

_T171 = _T170;

_T172 = _T170;

{_T173 = function (p0 : PChar;
p1 : PChar;
p2 : UINT;
p3 : HWND): MCIERROR of object;}

{_T174 = function (p0 : PAnsiChar;
p1 : PAnsiChar;
p2 : UINT;
p3 : HWND): MCIERROR of object;}

{_T175 = function (p0 : PWideChar;
p1 : PWideChar;
p2 : UINT;
p3 : HWND): MCIERROR of object;}

{_T176 = function (p0 : PChar): MCIDEVICEID of object;}

{_T177 = function (p0 : PAnsiChar): MCIDEVICEID of object;}

{_T178 = function (p0 : PWideChar): MCIDEVICEID of object;}

{_T179 = function (p0 : DWORD;
p1 : PChar): MCIDEVICEID of object;}

{_T180 = function (p0 : DWORD;
p1 : PAnsiChar): MCIDEVICEID of object;}

{_T181 = function (p0 : DWORD;
p1 : PWideChar): MCIDEVICEID of object;}

{_T182 = function (p0 : MCIERROR;
p1 : PChar;
p2 : UINT): BOOL of object;}

{_T183 = function (p0 : MCIERROR;
p1 : PAnsiChar;
p2 : UINT): BOOL of object;}

{_T184 = function (p0 : MCIERROR;
p1 : PWideChar;
p2 : UINT): BOOL of object;}

{_T185 = function (p0 : MCIDEVICEID;
p1 : TFNYieldProc;
p2 : DWORD): BOOL of object;}

_T186 = function (p0 : MCIDEVICEID): hTask of object;

{_T187 = function (p0 : MCIDEVICEID;
p1 : PDWORD): TFNYieldProc of object;}

{_T188 = function (p0 : LPCSTR): BOOL of object;}

_T189 = function (p0 : Longint): Byte of object;

_T190 = _T189;

_T191 = _T189;

_T192 = function (p0 : Byte;
p1 : Byte;
p2 : Byte): Longint of object;

_T193 = _T189;

_T194 = _T189;

_T195 = _T189;

_T196 = _T189;

_T197 = function (p0 : Byte;
p1 : Byte;
p2 : Byte;
p3 : Byte): Longint of object;

_T198 = _T189;

_T199 = _T189;

_T200 = _T189;

_T201 = _T192;

_T202 = function (p0 : Integer): Longint of object;

function ___MMCKINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___MMCKINFO__Wrapper.setckid(const val : FOURCC);
begin
_MMCKINFO(GetRecordPtr^).ckid := val;
end;
function ___MMCKINFO__Wrapper.getckid : FOURCC;
begin
result := _MMCKINFO(GetRecordPtr^).ckid;
end;
procedure ___MMCKINFO__Wrapper.setcksize(const val : DWORD);
begin
_MMCKINFO(GetRecordPtr^).cksize := val;
end;
function ___MMCKINFO__Wrapper.getcksize : DWORD;
begin
result := _MMCKINFO(GetRecordPtr^).cksize;
end;
procedure ___MMCKINFO__Wrapper.setfccType(const val : FOURCC);
begin
_MMCKINFO(GetRecordPtr^).fccType := val;
end;
function ___MMCKINFO__Wrapper.getfccType : FOURCC;
begin
result := _MMCKINFO(GetRecordPtr^).fccType;
end;
procedure ___MMCKINFO__Wrapper.setdwDataOffset(const val : DWORD);
begin
_MMCKINFO(GetRecordPtr^).dwDataOffset := val;
end;
function ___MMCKINFO__Wrapper.getdwDataOffset : DWORD;
begin
result := _MMCKINFO(GetRecordPtr^).dwDataOffset;
end;
procedure ___MMCKINFO__Wrapper.setdwFlags(const val : DWORD);
begin
_MMCKINFO(GetRecordPtr^).dwFlags := val;
end;
function ___MMCKINFO__Wrapper.getdwFlags : DWORD;
begin
result := _MMCKINFO(GetRecordPtr^).dwFlags;
end;
function ___MMIOINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___MMIOINFO__Wrapper.setdwFlags(const val : DWORD);
begin
_MMIOINFO(GetRecordPtr^).dwFlags := val;
end;
function ___MMIOINFO__Wrapper.getdwFlags : DWORD;
begin
result := _MMIOINFO(GetRecordPtr^).dwFlags;
end;
procedure ___MMIOINFO__Wrapper.setfccIOProc(const val : FOURCC);
begin
_MMIOINFO(GetRecordPtr^).fccIOProc := val;
end;
function ___MMIOINFO__Wrapper.getfccIOProc : FOURCC;
begin
result := _MMIOINFO(GetRecordPtr^).fccIOProc;
end;
procedure ___MMIOINFO__Wrapper.setwErrorRet(const val : UINT);
begin
_MMIOINFO(GetRecordPtr^).wErrorRet := val;
end;
function ___MMIOINFO__Wrapper.getwErrorRet : UINT;
begin
result := _MMIOINFO(GetRecordPtr^).wErrorRet;
end;
procedure ___MMIOINFO__Wrapper.setcchBuffer(const val : Longint);
begin
_MMIOINFO(GetRecordPtr^).cchBuffer := val;
end;
function ___MMIOINFO__Wrapper.getcchBuffer : Longint;
begin
result := _MMIOINFO(GetRecordPtr^).cchBuffer;
end;
procedure ___MMIOINFO__Wrapper.setlBufOffset(const val : Longint);
begin
_MMIOINFO(GetRecordPtr^).lBufOffset := val;
end;
function ___MMIOINFO__Wrapper.getlBufOffset : Longint;
begin
result := _MMIOINFO(GetRecordPtr^).lBufOffset;
end;
procedure ___MMIOINFO__Wrapper.setlDiskOffset(const val : Longint);
begin
_MMIOINFO(GetRecordPtr^).lDiskOffset := val;
end;
function ___MMIOINFO__Wrapper.getlDiskOffset : Longint;
begin
result := _MMIOINFO(GetRecordPtr^).lDiskOffset;
end;
procedure ___MMIOINFO__Wrapper.setdwReserved1(const val : DWORD);
begin
_MMIOINFO(GetRecordPtr^).dwReserved1 := val;
end;
function ___MMIOINFO__Wrapper.getdwReserved1 : DWORD;
begin
result := _MMIOINFO(GetRecordPtr^).dwReserved1;
end;
procedure ___MMIOINFO__Wrapper.setdwReserved2(const val : DWORD);
begin
_MMIOINFO(GetRecordPtr^).dwReserved2 := val;
end;
function ___MMIOINFO__Wrapper.getdwReserved2 : DWORD;
begin
result := _MMIOINFO(GetRecordPtr^).dwReserved2;
end;
procedure ___MMIOINFO__Wrapper.setHMMIO(const val : HMMIO);
begin
_MMIOINFO(GetRecordPtr^).HMMIO := val;
end;
function ___MMIOINFO__Wrapper.getHMMIO : HMMIO;
begin
result := _MMIOINFO(GetRecordPtr^).HMMIO;
end;
function __AUXCAPS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __AUXCAPS__Wrapper.setwMid(const val : Word);
begin
AUXCAPS(GetRecordPtr^).wMid := val;
end;
function __AUXCAPS__Wrapper.getwMid : Word;
begin
result := AUXCAPS(GetRecordPtr^).wMid;
end;
procedure __AUXCAPS__Wrapper.setwPid(const val : Word);
begin
AUXCAPS(GetRecordPtr^).wPid := val;
end;
function __AUXCAPS__Wrapper.getwPid : Word;
begin
result := AUXCAPS(GetRecordPtr^).wPid;
end;
procedure __AUXCAPS__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
AUXCAPS(GetRecordPtr^).vDriverVersion := val;
end;
function __AUXCAPS__Wrapper.getvDriverVersion : MMVERSION;
begin
result := AUXCAPS(GetRecordPtr^).vDriverVersion;
end;
procedure __AUXCAPS__Wrapper.setwTechnology(const val : Word);
begin
AUXCAPS(GetRecordPtr^).wTechnology := val;
end;
function __AUXCAPS__Wrapper.getwTechnology : Word;
begin
result := AUXCAPS(GetRecordPtr^).wTechnology;
end;
procedure __AUXCAPS__Wrapper.setdwSupport(const val : DWORD);
begin
AUXCAPS(GetRecordPtr^).dwSupport := val;
end;
function __AUXCAPS__Wrapper.getdwSupport : DWORD;
begin
result := AUXCAPS(GetRecordPtr^).dwSupport;
end;
function __AUXCAPSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __AUXCAPSA__Wrapper.setwMid(const val : Word);
begin
AUXCAPSA(GetRecordPtr^).wMid := val;
end;
function __AUXCAPSA__Wrapper.getwMid : Word;
begin
result := AUXCAPSA(GetRecordPtr^).wMid;
end;
procedure __AUXCAPSA__Wrapper.setwPid(const val : Word);
begin
AUXCAPSA(GetRecordPtr^).wPid := val;
end;
function __AUXCAPSA__Wrapper.getwPid : Word;
begin
result := AUXCAPSA(GetRecordPtr^).wPid;
end;
procedure __AUXCAPSA__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
AUXCAPSA(GetRecordPtr^).vDriverVersion := val;
end;
function __AUXCAPSA__Wrapper.getvDriverVersion : MMVERSION;
begin
result := AUXCAPSA(GetRecordPtr^).vDriverVersion;
end;
procedure __AUXCAPSA__Wrapper.setwTechnology(const val : Word);
begin
AUXCAPSA(GetRecordPtr^).wTechnology := val;
end;
function __AUXCAPSA__Wrapper.getwTechnology : Word;
begin
result := AUXCAPSA(GetRecordPtr^).wTechnology;
end;
procedure __AUXCAPSA__Wrapper.setdwSupport(const val : DWORD);
begin
AUXCAPSA(GetRecordPtr^).dwSupport := val;
end;
function __AUXCAPSA__Wrapper.getdwSupport : DWORD;
begin
result := AUXCAPSA(GetRecordPtr^).dwSupport;
end;
function __AUXCAPSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __AUXCAPSW__Wrapper.setwMid(const val : Word);
begin
AUXCAPSW(GetRecordPtr^).wMid := val;
end;
function __AUXCAPSW__Wrapper.getwMid : Word;
begin
result := AUXCAPSW(GetRecordPtr^).wMid;
end;
procedure __AUXCAPSW__Wrapper.setwPid(const val : Word);
begin
AUXCAPSW(GetRecordPtr^).wPid := val;
end;
function __AUXCAPSW__Wrapper.getwPid : Word;
begin
result := AUXCAPSW(GetRecordPtr^).wPid;
end;
procedure __AUXCAPSW__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
AUXCAPSW(GetRecordPtr^).vDriverVersion := val;
end;
function __AUXCAPSW__Wrapper.getvDriverVersion : MMVERSION;
begin
result := AUXCAPSW(GetRecordPtr^).vDriverVersion;
end;
procedure __AUXCAPSW__Wrapper.setwTechnology(const val : Word);
begin
AUXCAPSW(GetRecordPtr^).wTechnology := val;
end;
function __AUXCAPSW__Wrapper.getwTechnology : Word;
begin
result := AUXCAPSW(GetRecordPtr^).wTechnology;
end;
procedure __AUXCAPSW__Wrapper.setdwSupport(const val : DWORD);
begin
AUXCAPSW(GetRecordPtr^).dwSupport := val;
end;
function __AUXCAPSW__Wrapper.getdwSupport : DWORD;
begin
result := AUXCAPSW(GetRecordPtr^).dwSupport;
end;
function __DRVCONFIGINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __DRVCONFIGINFO__Wrapper.setdwDCISize(const val : DWORD);
begin
DRVCONFIGINFO(GetRecordPtr^).dwDCISize := val;
end;
function __DRVCONFIGINFO__Wrapper.getdwDCISize : DWORD;
begin
result := DRVCONFIGINFO(GetRecordPtr^).dwDCISize;
end;
function __DRVCONFIGINFOEX__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __DRVCONFIGINFOEX__Wrapper.setdwDCISize(const val : DWORD);
begin
DRVCONFIGINFOEX(GetRecordPtr^).dwDCISize := val;
end;
function __DRVCONFIGINFOEX__Wrapper.getdwDCISize : DWORD;
begin
result := DRVCONFIGINFOEX(GetRecordPtr^).dwDCISize;
end;
procedure __DRVCONFIGINFOEX__Wrapper.setdnDevNode(const val : DWORD);
begin
DRVCONFIGINFOEX(GetRecordPtr^).dnDevNode := val;
end;
function __DRVCONFIGINFOEX__Wrapper.getdnDevNode : DWORD;
begin
result := DRVCONFIGINFOEX(GetRecordPtr^).dnDevNode;
end;
function __JOYCAPS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __JOYCAPS__Wrapper.setwMid(const val : Word);
begin
JOYCAPS(GetRecordPtr^).wMid := val;
end;
function __JOYCAPS__Wrapper.getwMid : Word;
begin
result := JOYCAPS(GetRecordPtr^).wMid;
end;
procedure __JOYCAPS__Wrapper.setwPid(const val : Word);
begin
JOYCAPS(GetRecordPtr^).wPid := val;
end;
function __JOYCAPS__Wrapper.getwPid : Word;
begin
result := JOYCAPS(GetRecordPtr^).wPid;
end;
procedure __JOYCAPS__Wrapper.setwXmin(const val : UINT);
begin
JOYCAPS(GetRecordPtr^).wXmin := val;
end;
function __JOYCAPS__Wrapper.getwXmin : UINT;
begin
result := JOYCAPS(GetRecordPtr^).wXmin;
end;
procedure __JOYCAPS__Wrapper.setwXmax(const val : UINT);
begin
JOYCAPS(GetRecordPtr^).wXmax := val;
end;
function __JOYCAPS__Wrapper.getwXmax : UINT;
begin
result := JOYCAPS(GetRecordPtr^).wXmax;
end;
procedure __JOYCAPS__Wrapper.setwYmin(const val : UINT);
begin
JOYCAPS(GetRecordPtr^).wYmin := val;
end;
function __JOYCAPS__Wrapper.getwYmin : UINT;
begin
result := JOYCAPS(GetRecordPtr^).wYmin;
end;
procedure __JOYCAPS__Wrapper.setwYmax(const val : UINT);
begin
JOYCAPS(GetRecordPtr^).wYmax := val;
end;
function __JOYCAPS__Wrapper.getwYmax : UINT;
begin
result := JOYCAPS(GetRecordPtr^).wYmax;
end;
procedure __JOYCAPS__Wrapper.setwZmin(const val : UINT);
begin
JOYCAPS(GetRecordPtr^).wZmin := val;
end;
function __JOYCAPS__Wrapper.getwZmin : UINT;
begin
result := JOYCAPS(GetRecordPtr^).wZmin;
end;
procedure __JOYCAPS__Wrapper.setwZmax(const val : UINT);
begin
JOYCAPS(GetRecordPtr^).wZmax := val;
end;
function __JOYCAPS__Wrapper.getwZmax : UINT;
begin
result := JOYCAPS(GetRecordPtr^).wZmax;
end;
procedure __JOYCAPS__Wrapper.setwNumButtons(const val : UINT);
begin
JOYCAPS(GetRecordPtr^).wNumButtons := val;
end;
function __JOYCAPS__Wrapper.getwNumButtons : UINT;
begin
result := JOYCAPS(GetRecordPtr^).wNumButtons;
end;
procedure __JOYCAPS__Wrapper.setwPeriodMin(const val : UINT);
begin
JOYCAPS(GetRecordPtr^).wPeriodMin := val;
end;
function __JOYCAPS__Wrapper.getwPeriodMin : UINT;
begin
result := JOYCAPS(GetRecordPtr^).wPeriodMin;
end;
procedure __JOYCAPS__Wrapper.setwPeriodMax(const val : UINT);
begin
JOYCAPS(GetRecordPtr^).wPeriodMax := val;
end;
function __JOYCAPS__Wrapper.getwPeriodMax : UINT;
begin
result := JOYCAPS(GetRecordPtr^).wPeriodMax;
end;
procedure __JOYCAPS__Wrapper.setwRmin(const val : UINT);
begin
JOYCAPS(GetRecordPtr^).wRmin := val;
end;
function __JOYCAPS__Wrapper.getwRmin : UINT;
begin
result := JOYCAPS(GetRecordPtr^).wRmin;
end;
procedure __JOYCAPS__Wrapper.setwRmax(const val : UINT);
begin
JOYCAPS(GetRecordPtr^).wRmax := val;
end;
function __JOYCAPS__Wrapper.getwRmax : UINT;
begin
result := JOYCAPS(GetRecordPtr^).wRmax;
end;
procedure __JOYCAPS__Wrapper.setwUmin(const val : UINT);
begin
JOYCAPS(GetRecordPtr^).wUmin := val;
end;
function __JOYCAPS__Wrapper.getwUmin : UINT;
begin
result := JOYCAPS(GetRecordPtr^).wUmin;
end;
procedure __JOYCAPS__Wrapper.setwUmax(const val : UINT);
begin
JOYCAPS(GetRecordPtr^).wUmax := val;
end;
function __JOYCAPS__Wrapper.getwUmax : UINT;
begin
result := JOYCAPS(GetRecordPtr^).wUmax;
end;
procedure __JOYCAPS__Wrapper.setwVmin(const val : UINT);
begin
JOYCAPS(GetRecordPtr^).wVmin := val;
end;
function __JOYCAPS__Wrapper.getwVmin : UINT;
begin
result := JOYCAPS(GetRecordPtr^).wVmin;
end;
procedure __JOYCAPS__Wrapper.setwVmax(const val : UINT);
begin
JOYCAPS(GetRecordPtr^).wVmax := val;
end;
function __JOYCAPS__Wrapper.getwVmax : UINT;
begin
result := JOYCAPS(GetRecordPtr^).wVmax;
end;
procedure __JOYCAPS__Wrapper.setwCaps(const val : UINT);
begin
JOYCAPS(GetRecordPtr^).wCaps := val;
end;
function __JOYCAPS__Wrapper.getwCaps : UINT;
begin
result := JOYCAPS(GetRecordPtr^).wCaps;
end;
procedure __JOYCAPS__Wrapper.setwMaxAxes(const val : UINT);
begin
JOYCAPS(GetRecordPtr^).wMaxAxes := val;
end;
function __JOYCAPS__Wrapper.getwMaxAxes : UINT;
begin
result := JOYCAPS(GetRecordPtr^).wMaxAxes;
end;
procedure __JOYCAPS__Wrapper.setwNumAxes(const val : UINT);
begin
JOYCAPS(GetRecordPtr^).wNumAxes := val;
end;
function __JOYCAPS__Wrapper.getwNumAxes : UINT;
begin
result := JOYCAPS(GetRecordPtr^).wNumAxes;
end;
procedure __JOYCAPS__Wrapper.setwMaxButtons(const val : UINT);
begin
JOYCAPS(GetRecordPtr^).wMaxButtons := val;
end;
function __JOYCAPS__Wrapper.getwMaxButtons : UINT;
begin
result := JOYCAPS(GetRecordPtr^).wMaxButtons;
end;
function __JOYCAPSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __JOYCAPSA__Wrapper.setwMid(const val : Word);
begin
JOYCAPSA(GetRecordPtr^).wMid := val;
end;
function __JOYCAPSA__Wrapper.getwMid : Word;
begin
result := JOYCAPSA(GetRecordPtr^).wMid;
end;
procedure __JOYCAPSA__Wrapper.setwPid(const val : Word);
begin
JOYCAPSA(GetRecordPtr^).wPid := val;
end;
function __JOYCAPSA__Wrapper.getwPid : Word;
begin
result := JOYCAPSA(GetRecordPtr^).wPid;
end;
procedure __JOYCAPSA__Wrapper.setwXmin(const val : UINT);
begin
JOYCAPSA(GetRecordPtr^).wXmin := val;
end;
function __JOYCAPSA__Wrapper.getwXmin : UINT;
begin
result := JOYCAPSA(GetRecordPtr^).wXmin;
end;
procedure __JOYCAPSA__Wrapper.setwXmax(const val : UINT);
begin
JOYCAPSA(GetRecordPtr^).wXmax := val;
end;
function __JOYCAPSA__Wrapper.getwXmax : UINT;
begin
result := JOYCAPSA(GetRecordPtr^).wXmax;
end;
procedure __JOYCAPSA__Wrapper.setwYmin(const val : UINT);
begin
JOYCAPSA(GetRecordPtr^).wYmin := val;
end;
function __JOYCAPSA__Wrapper.getwYmin : UINT;
begin
result := JOYCAPSA(GetRecordPtr^).wYmin;
end;
procedure __JOYCAPSA__Wrapper.setwYmax(const val : UINT);
begin
JOYCAPSA(GetRecordPtr^).wYmax := val;
end;
function __JOYCAPSA__Wrapper.getwYmax : UINT;
begin
result := JOYCAPSA(GetRecordPtr^).wYmax;
end;
procedure __JOYCAPSA__Wrapper.setwZmin(const val : UINT);
begin
JOYCAPSA(GetRecordPtr^).wZmin := val;
end;
function __JOYCAPSA__Wrapper.getwZmin : UINT;
begin
result := JOYCAPSA(GetRecordPtr^).wZmin;
end;
procedure __JOYCAPSA__Wrapper.setwZmax(const val : UINT);
begin
JOYCAPSA(GetRecordPtr^).wZmax := val;
end;
function __JOYCAPSA__Wrapper.getwZmax : UINT;
begin
result := JOYCAPSA(GetRecordPtr^).wZmax;
end;
procedure __JOYCAPSA__Wrapper.setwNumButtons(const val : UINT);
begin
JOYCAPSA(GetRecordPtr^).wNumButtons := val;
end;
function __JOYCAPSA__Wrapper.getwNumButtons : UINT;
begin
result := JOYCAPSA(GetRecordPtr^).wNumButtons;
end;
procedure __JOYCAPSA__Wrapper.setwPeriodMin(const val : UINT);
begin
JOYCAPSA(GetRecordPtr^).wPeriodMin := val;
end;
function __JOYCAPSA__Wrapper.getwPeriodMin : UINT;
begin
result := JOYCAPSA(GetRecordPtr^).wPeriodMin;
end;
procedure __JOYCAPSA__Wrapper.setwPeriodMax(const val : UINT);
begin
JOYCAPSA(GetRecordPtr^).wPeriodMax := val;
end;
function __JOYCAPSA__Wrapper.getwPeriodMax : UINT;
begin
result := JOYCAPSA(GetRecordPtr^).wPeriodMax;
end;
procedure __JOYCAPSA__Wrapper.setwRmin(const val : UINT);
begin
JOYCAPSA(GetRecordPtr^).wRmin := val;
end;
function __JOYCAPSA__Wrapper.getwRmin : UINT;
begin
result := JOYCAPSA(GetRecordPtr^).wRmin;
end;
procedure __JOYCAPSA__Wrapper.setwRmax(const val : UINT);
begin
JOYCAPSA(GetRecordPtr^).wRmax := val;
end;
function __JOYCAPSA__Wrapper.getwRmax : UINT;
begin
result := JOYCAPSA(GetRecordPtr^).wRmax;
end;
procedure __JOYCAPSA__Wrapper.setwUmin(const val : UINT);
begin
JOYCAPSA(GetRecordPtr^).wUmin := val;
end;
function __JOYCAPSA__Wrapper.getwUmin : UINT;
begin
result := JOYCAPSA(GetRecordPtr^).wUmin;
end;
procedure __JOYCAPSA__Wrapper.setwUmax(const val : UINT);
begin
JOYCAPSA(GetRecordPtr^).wUmax := val;
end;
function __JOYCAPSA__Wrapper.getwUmax : UINT;
begin
result := JOYCAPSA(GetRecordPtr^).wUmax;
end;
procedure __JOYCAPSA__Wrapper.setwVmin(const val : UINT);
begin
JOYCAPSA(GetRecordPtr^).wVmin := val;
end;
function __JOYCAPSA__Wrapper.getwVmin : UINT;
begin
result := JOYCAPSA(GetRecordPtr^).wVmin;
end;
procedure __JOYCAPSA__Wrapper.setwVmax(const val : UINT);
begin
JOYCAPSA(GetRecordPtr^).wVmax := val;
end;
function __JOYCAPSA__Wrapper.getwVmax : UINT;
begin
result := JOYCAPSA(GetRecordPtr^).wVmax;
end;
procedure __JOYCAPSA__Wrapper.setwCaps(const val : UINT);
begin
JOYCAPSA(GetRecordPtr^).wCaps := val;
end;
function __JOYCAPSA__Wrapper.getwCaps : UINT;
begin
result := JOYCAPSA(GetRecordPtr^).wCaps;
end;
procedure __JOYCAPSA__Wrapper.setwMaxAxes(const val : UINT);
begin
JOYCAPSA(GetRecordPtr^).wMaxAxes := val;
end;
function __JOYCAPSA__Wrapper.getwMaxAxes : UINT;
begin
result := JOYCAPSA(GetRecordPtr^).wMaxAxes;
end;
procedure __JOYCAPSA__Wrapper.setwNumAxes(const val : UINT);
begin
JOYCAPSA(GetRecordPtr^).wNumAxes := val;
end;
function __JOYCAPSA__Wrapper.getwNumAxes : UINT;
begin
result := JOYCAPSA(GetRecordPtr^).wNumAxes;
end;
procedure __JOYCAPSA__Wrapper.setwMaxButtons(const val : UINT);
begin
JOYCAPSA(GetRecordPtr^).wMaxButtons := val;
end;
function __JOYCAPSA__Wrapper.getwMaxButtons : UINT;
begin
result := JOYCAPSA(GetRecordPtr^).wMaxButtons;
end;
function __JOYCAPSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __JOYCAPSW__Wrapper.setwMid(const val : Word);
begin
JOYCAPSW(GetRecordPtr^).wMid := val;
end;
function __JOYCAPSW__Wrapper.getwMid : Word;
begin
result := JOYCAPSW(GetRecordPtr^).wMid;
end;
procedure __JOYCAPSW__Wrapper.setwPid(const val : Word);
begin
JOYCAPSW(GetRecordPtr^).wPid := val;
end;
function __JOYCAPSW__Wrapper.getwPid : Word;
begin
result := JOYCAPSW(GetRecordPtr^).wPid;
end;
procedure __JOYCAPSW__Wrapper.setwXmin(const val : UINT);
begin
JOYCAPSW(GetRecordPtr^).wXmin := val;
end;
function __JOYCAPSW__Wrapper.getwXmin : UINT;
begin
result := JOYCAPSW(GetRecordPtr^).wXmin;
end;
procedure __JOYCAPSW__Wrapper.setwXmax(const val : UINT);
begin
JOYCAPSW(GetRecordPtr^).wXmax := val;
end;
function __JOYCAPSW__Wrapper.getwXmax : UINT;
begin
result := JOYCAPSW(GetRecordPtr^).wXmax;
end;
procedure __JOYCAPSW__Wrapper.setwYmin(const val : UINT);
begin
JOYCAPSW(GetRecordPtr^).wYmin := val;
end;
function __JOYCAPSW__Wrapper.getwYmin : UINT;
begin
result := JOYCAPSW(GetRecordPtr^).wYmin;
end;
procedure __JOYCAPSW__Wrapper.setwYmax(const val : UINT);
begin
JOYCAPSW(GetRecordPtr^).wYmax := val;
end;
function __JOYCAPSW__Wrapper.getwYmax : UINT;
begin
result := JOYCAPSW(GetRecordPtr^).wYmax;
end;
procedure __JOYCAPSW__Wrapper.setwZmin(const val : UINT);
begin
JOYCAPSW(GetRecordPtr^).wZmin := val;
end;
function __JOYCAPSW__Wrapper.getwZmin : UINT;
begin
result := JOYCAPSW(GetRecordPtr^).wZmin;
end;
procedure __JOYCAPSW__Wrapper.setwZmax(const val : UINT);
begin
JOYCAPSW(GetRecordPtr^).wZmax := val;
end;
function __JOYCAPSW__Wrapper.getwZmax : UINT;
begin
result := JOYCAPSW(GetRecordPtr^).wZmax;
end;
procedure __JOYCAPSW__Wrapper.setwNumButtons(const val : UINT);
begin
JOYCAPSW(GetRecordPtr^).wNumButtons := val;
end;
function __JOYCAPSW__Wrapper.getwNumButtons : UINT;
begin
result := JOYCAPSW(GetRecordPtr^).wNumButtons;
end;
procedure __JOYCAPSW__Wrapper.setwPeriodMin(const val : UINT);
begin
JOYCAPSW(GetRecordPtr^).wPeriodMin := val;
end;
function __JOYCAPSW__Wrapper.getwPeriodMin : UINT;
begin
result := JOYCAPSW(GetRecordPtr^).wPeriodMin;
end;
procedure __JOYCAPSW__Wrapper.setwPeriodMax(const val : UINT);
begin
JOYCAPSW(GetRecordPtr^).wPeriodMax := val;
end;
function __JOYCAPSW__Wrapper.getwPeriodMax : UINT;
begin
result := JOYCAPSW(GetRecordPtr^).wPeriodMax;
end;
procedure __JOYCAPSW__Wrapper.setwRmin(const val : UINT);
begin
JOYCAPSW(GetRecordPtr^).wRmin := val;
end;
function __JOYCAPSW__Wrapper.getwRmin : UINT;
begin
result := JOYCAPSW(GetRecordPtr^).wRmin;
end;
procedure __JOYCAPSW__Wrapper.setwRmax(const val : UINT);
begin
JOYCAPSW(GetRecordPtr^).wRmax := val;
end;
function __JOYCAPSW__Wrapper.getwRmax : UINT;
begin
result := JOYCAPSW(GetRecordPtr^).wRmax;
end;
procedure __JOYCAPSW__Wrapper.setwUmin(const val : UINT);
begin
JOYCAPSW(GetRecordPtr^).wUmin := val;
end;
function __JOYCAPSW__Wrapper.getwUmin : UINT;
begin
result := JOYCAPSW(GetRecordPtr^).wUmin;
end;
procedure __JOYCAPSW__Wrapper.setwUmax(const val : UINT);
begin
JOYCAPSW(GetRecordPtr^).wUmax := val;
end;
function __JOYCAPSW__Wrapper.getwUmax : UINT;
begin
result := JOYCAPSW(GetRecordPtr^).wUmax;
end;
procedure __JOYCAPSW__Wrapper.setwVmin(const val : UINT);
begin
JOYCAPSW(GetRecordPtr^).wVmin := val;
end;
function __JOYCAPSW__Wrapper.getwVmin : UINT;
begin
result := JOYCAPSW(GetRecordPtr^).wVmin;
end;
procedure __JOYCAPSW__Wrapper.setwVmax(const val : UINT);
begin
JOYCAPSW(GetRecordPtr^).wVmax := val;
end;
function __JOYCAPSW__Wrapper.getwVmax : UINT;
begin
result := JOYCAPSW(GetRecordPtr^).wVmax;
end;
procedure __JOYCAPSW__Wrapper.setwCaps(const val : UINT);
begin
JOYCAPSW(GetRecordPtr^).wCaps := val;
end;
function __JOYCAPSW__Wrapper.getwCaps : UINT;
begin
result := JOYCAPSW(GetRecordPtr^).wCaps;
end;
procedure __JOYCAPSW__Wrapper.setwMaxAxes(const val : UINT);
begin
JOYCAPSW(GetRecordPtr^).wMaxAxes := val;
end;
function __JOYCAPSW__Wrapper.getwMaxAxes : UINT;
begin
result := JOYCAPSW(GetRecordPtr^).wMaxAxes;
end;
procedure __JOYCAPSW__Wrapper.setwNumAxes(const val : UINT);
begin
JOYCAPSW(GetRecordPtr^).wNumAxes := val;
end;
function __JOYCAPSW__Wrapper.getwNumAxes : UINT;
begin
result := JOYCAPSW(GetRecordPtr^).wNumAxes;
end;
procedure __JOYCAPSW__Wrapper.setwMaxButtons(const val : UINT);
begin
JOYCAPSW(GetRecordPtr^).wMaxButtons := val;
end;
function __JOYCAPSW__Wrapper.getwMaxButtons : UINT;
begin
result := JOYCAPSW(GetRecordPtr^).wMaxButtons;
end;
function __JOYINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __JOYINFO__Wrapper.setwXpos(const val : UINT);
begin
JOYINFO(GetRecordPtr^).wXpos := val;
end;
function __JOYINFO__Wrapper.getwXpos : UINT;
begin
result := JOYINFO(GetRecordPtr^).wXpos;
end;
procedure __JOYINFO__Wrapper.setwYpos(const val : UINT);
begin
JOYINFO(GetRecordPtr^).wYpos := val;
end;
function __JOYINFO__Wrapper.getwYpos : UINT;
begin
result := JOYINFO(GetRecordPtr^).wYpos;
end;
procedure __JOYINFO__Wrapper.setwZpos(const val : UINT);
begin
JOYINFO(GetRecordPtr^).wZpos := val;
end;
function __JOYINFO__Wrapper.getwZpos : UINT;
begin
result := JOYINFO(GetRecordPtr^).wZpos;
end;
procedure __JOYINFO__Wrapper.setwButtons(const val : UINT);
begin
JOYINFO(GetRecordPtr^).wButtons := val;
end;
function __JOYINFO__Wrapper.getwButtons : UINT;
begin
result := JOYINFO(GetRecordPtr^).wButtons;
end;
function __joyinfo_tag__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __joyinfo_tag__Wrapper.setwXpos(const val : UINT);
begin
joyinfo_tag(GetRecordPtr^).wXpos := val;
end;
function __joyinfo_tag__Wrapper.getwXpos : UINT;
begin
result := joyinfo_tag(GetRecordPtr^).wXpos;
end;
procedure __joyinfo_tag__Wrapper.setwYpos(const val : UINT);
begin
joyinfo_tag(GetRecordPtr^).wYpos := val;
end;
function __joyinfo_tag__Wrapper.getwYpos : UINT;
begin
result := joyinfo_tag(GetRecordPtr^).wYpos;
end;
procedure __joyinfo_tag__Wrapper.setwZpos(const val : UINT);
begin
joyinfo_tag(GetRecordPtr^).wZpos := val;
end;
function __joyinfo_tag__Wrapper.getwZpos : UINT;
begin
result := joyinfo_tag(GetRecordPtr^).wZpos;
end;
procedure __joyinfo_tag__Wrapper.setwButtons(const val : UINT);
begin
joyinfo_tag(GetRecordPtr^).wButtons := val;
end;
function __joyinfo_tag__Wrapper.getwButtons : UINT;
begin
result := joyinfo_tag(GetRecordPtr^).wButtons;
end;
function __JOYINFOEX__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __JOYINFOEX__Wrapper.setdwSize(const val : DWORD);
begin
JOYINFOEX(GetRecordPtr^).dwSize := val;
end;
function __JOYINFOEX__Wrapper.getdwSize : DWORD;
begin
result := JOYINFOEX(GetRecordPtr^).dwSize;
end;
procedure __JOYINFOEX__Wrapper.setdwFlags(const val : DWORD);
begin
JOYINFOEX(GetRecordPtr^).dwFlags := val;
end;
function __JOYINFOEX__Wrapper.getdwFlags : DWORD;
begin
result := JOYINFOEX(GetRecordPtr^).dwFlags;
end;
procedure __JOYINFOEX__Wrapper.setwXpos(const val : UINT);
begin
JOYINFOEX(GetRecordPtr^).wXpos := val;
end;
function __JOYINFOEX__Wrapper.getwXpos : UINT;
begin
result := JOYINFOEX(GetRecordPtr^).wXpos;
end;
procedure __JOYINFOEX__Wrapper.setwYpos(const val : UINT);
begin
JOYINFOEX(GetRecordPtr^).wYpos := val;
end;
function __JOYINFOEX__Wrapper.getwYpos : UINT;
begin
result := JOYINFOEX(GetRecordPtr^).wYpos;
end;
procedure __JOYINFOEX__Wrapper.setwZpos(const val : UINT);
begin
JOYINFOEX(GetRecordPtr^).wZpos := val;
end;
function __JOYINFOEX__Wrapper.getwZpos : UINT;
begin
result := JOYINFOEX(GetRecordPtr^).wZpos;
end;
procedure __JOYINFOEX__Wrapper.setdwRpos(const val : DWORD);
begin
JOYINFOEX(GetRecordPtr^).dwRpos := val;
end;
function __JOYINFOEX__Wrapper.getdwRpos : DWORD;
begin
result := JOYINFOEX(GetRecordPtr^).dwRpos;
end;
procedure __JOYINFOEX__Wrapper.setdwUpos(const val : DWORD);
begin
JOYINFOEX(GetRecordPtr^).dwUpos := val;
end;
function __JOYINFOEX__Wrapper.getdwUpos : DWORD;
begin
result := JOYINFOEX(GetRecordPtr^).dwUpos;
end;
procedure __JOYINFOEX__Wrapper.setdwVpos(const val : DWORD);
begin
JOYINFOEX(GetRecordPtr^).dwVpos := val;
end;
function __JOYINFOEX__Wrapper.getdwVpos : DWORD;
begin
result := JOYINFOEX(GetRecordPtr^).dwVpos;
end;
procedure __JOYINFOEX__Wrapper.setwButtons(const val : UINT);
begin
JOYINFOEX(GetRecordPtr^).wButtons := val;
end;
function __JOYINFOEX__Wrapper.getwButtons : UINT;
begin
result := JOYINFOEX(GetRecordPtr^).wButtons;
end;
procedure __JOYINFOEX__Wrapper.setdwButtonNumber(const val : DWORD);
begin
JOYINFOEX(GetRecordPtr^).dwButtonNumber := val;
end;
function __JOYINFOEX__Wrapper.getdwButtonNumber : DWORD;
begin
result := JOYINFOEX(GetRecordPtr^).dwButtonNumber;
end;
procedure __JOYINFOEX__Wrapper.setdwPOV(const val : DWORD);
begin
JOYINFOEX(GetRecordPtr^).dwPOV := val;
end;
function __JOYINFOEX__Wrapper.getdwPOV : DWORD;
begin
result := JOYINFOEX(GetRecordPtr^).dwPOV;
end;
procedure __JOYINFOEX__Wrapper.setdwReserved1(const val : DWORD);
begin
JOYINFOEX(GetRecordPtr^).dwReserved1 := val;
end;
function __JOYINFOEX__Wrapper.getdwReserved1 : DWORD;
begin
result := JOYINFOEX(GetRecordPtr^).dwReserved1;
end;
procedure __JOYINFOEX__Wrapper.setdwReserved2(const val : DWORD);
begin
JOYINFOEX(GetRecordPtr^).dwReserved2 := val;
end;
function __JOYINFOEX__Wrapper.getdwReserved2 : DWORD;
begin
result := JOYINFOEX(GetRecordPtr^).dwReserved2;
end;
function __joyinfoex_tag__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __joyinfoex_tag__Wrapper.setdwSize(const val : DWORD);
begin
joyinfoex_tag(GetRecordPtr^).dwSize := val;
end;
function __joyinfoex_tag__Wrapper.getdwSize : DWORD;
begin
result := joyinfoex_tag(GetRecordPtr^).dwSize;
end;
procedure __joyinfoex_tag__Wrapper.setdwFlags(const val : DWORD);
begin
joyinfoex_tag(GetRecordPtr^).dwFlags := val;
end;
function __joyinfoex_tag__Wrapper.getdwFlags : DWORD;
begin
result := joyinfoex_tag(GetRecordPtr^).dwFlags;
end;
procedure __joyinfoex_tag__Wrapper.setwXpos(const val : UINT);
begin
joyinfoex_tag(GetRecordPtr^).wXpos := val;
end;
function __joyinfoex_tag__Wrapper.getwXpos : UINT;
begin
result := joyinfoex_tag(GetRecordPtr^).wXpos;
end;
procedure __joyinfoex_tag__Wrapper.setwYpos(const val : UINT);
begin
joyinfoex_tag(GetRecordPtr^).wYpos := val;
end;
function __joyinfoex_tag__Wrapper.getwYpos : UINT;
begin
result := joyinfoex_tag(GetRecordPtr^).wYpos;
end;
procedure __joyinfoex_tag__Wrapper.setwZpos(const val : UINT);
begin
joyinfoex_tag(GetRecordPtr^).wZpos := val;
end;
function __joyinfoex_tag__Wrapper.getwZpos : UINT;
begin
result := joyinfoex_tag(GetRecordPtr^).wZpos;
end;
procedure __joyinfoex_tag__Wrapper.setdwRpos(const val : DWORD);
begin
joyinfoex_tag(GetRecordPtr^).dwRpos := val;
end;
function __joyinfoex_tag__Wrapper.getdwRpos : DWORD;
begin
result := joyinfoex_tag(GetRecordPtr^).dwRpos;
end;
procedure __joyinfoex_tag__Wrapper.setdwUpos(const val : DWORD);
begin
joyinfoex_tag(GetRecordPtr^).dwUpos := val;
end;
function __joyinfoex_tag__Wrapper.getdwUpos : DWORD;
begin
result := joyinfoex_tag(GetRecordPtr^).dwUpos;
end;
procedure __joyinfoex_tag__Wrapper.setdwVpos(const val : DWORD);
begin
joyinfoex_tag(GetRecordPtr^).dwVpos := val;
end;
function __joyinfoex_tag__Wrapper.getdwVpos : DWORD;
begin
result := joyinfoex_tag(GetRecordPtr^).dwVpos;
end;
procedure __joyinfoex_tag__Wrapper.setwButtons(const val : UINT);
begin
joyinfoex_tag(GetRecordPtr^).wButtons := val;
end;
function __joyinfoex_tag__Wrapper.getwButtons : UINT;
begin
result := joyinfoex_tag(GetRecordPtr^).wButtons;
end;
procedure __joyinfoex_tag__Wrapper.setdwButtonNumber(const val : DWORD);
begin
joyinfoex_tag(GetRecordPtr^).dwButtonNumber := val;
end;
function __joyinfoex_tag__Wrapper.getdwButtonNumber : DWORD;
begin
result := joyinfoex_tag(GetRecordPtr^).dwButtonNumber;
end;
procedure __joyinfoex_tag__Wrapper.setdwPOV(const val : DWORD);
begin
joyinfoex_tag(GetRecordPtr^).dwPOV := val;
end;
function __joyinfoex_tag__Wrapper.getdwPOV : DWORD;
begin
result := joyinfoex_tag(GetRecordPtr^).dwPOV;
end;
procedure __joyinfoex_tag__Wrapper.setdwReserved1(const val : DWORD);
begin
joyinfoex_tag(GetRecordPtr^).dwReserved1 := val;
end;
function __joyinfoex_tag__Wrapper.getdwReserved1 : DWORD;
begin
result := joyinfoex_tag(GetRecordPtr^).dwReserved1;
end;
procedure __joyinfoex_tag__Wrapper.setdwReserved2(const val : DWORD);
begin
joyinfoex_tag(GetRecordPtr^).dwReserved2 := val;
end;
function __joyinfoex_tag__Wrapper.getdwReserved2 : DWORD;
begin
result := joyinfoex_tag(GetRecordPtr^).dwReserved2;
end;
function __MCI_ANIM_OPEN_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_ANIM_OPEN_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_ANIM_OPEN_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_ANIM_OPEN_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_ANIM_OPEN_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __MCI_ANIM_OPEN_PARMS__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
MCI_ANIM_OPEN_PARMS(GetRecordPtr^).wDeviceID := val;
end;
function __MCI_ANIM_OPEN_PARMS__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := MCI_ANIM_OPEN_PARMS(GetRecordPtr^).wDeviceID;
end;
procedure __MCI_ANIM_OPEN_PARMS__Wrapper.setdwStyle(const val : DWORD);
begin
MCI_ANIM_OPEN_PARMS(GetRecordPtr^).dwStyle := val;
end;
function __MCI_ANIM_OPEN_PARMS__Wrapper.getdwStyle : DWORD;
begin
result := MCI_ANIM_OPEN_PARMS(GetRecordPtr^).dwStyle;
end;
function __MCI_ANIM_OPEN_PARMSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_ANIM_OPEN_PARMSA__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_ANIM_OPEN_PARMSA(GetRecordPtr^).dwCallback := val;
end;
function __MCI_ANIM_OPEN_PARMSA__Wrapper.getdwCallback : DWORD;
begin
result := MCI_ANIM_OPEN_PARMSA(GetRecordPtr^).dwCallback;
end;
procedure __MCI_ANIM_OPEN_PARMSA__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
MCI_ANIM_OPEN_PARMSA(GetRecordPtr^).wDeviceID := val;
end;
function __MCI_ANIM_OPEN_PARMSA__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := MCI_ANIM_OPEN_PARMSA(GetRecordPtr^).wDeviceID;
end;
procedure __MCI_ANIM_OPEN_PARMSA__Wrapper.setdwStyle(const val : DWORD);
begin
MCI_ANIM_OPEN_PARMSA(GetRecordPtr^).dwStyle := val;
end;
function __MCI_ANIM_OPEN_PARMSA__Wrapper.getdwStyle : DWORD;
begin
result := MCI_ANIM_OPEN_PARMSA(GetRecordPtr^).dwStyle;
end;
function __MCI_ANIM_OPEN_PARMSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_ANIM_OPEN_PARMSW__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_ANIM_OPEN_PARMSW(GetRecordPtr^).dwCallback := val;
end;
function __MCI_ANIM_OPEN_PARMSW__Wrapper.getdwCallback : DWORD;
begin
result := MCI_ANIM_OPEN_PARMSW(GetRecordPtr^).dwCallback;
end;
procedure __MCI_ANIM_OPEN_PARMSW__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
MCI_ANIM_OPEN_PARMSW(GetRecordPtr^).wDeviceID := val;
end;
function __MCI_ANIM_OPEN_PARMSW__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := MCI_ANIM_OPEN_PARMSW(GetRecordPtr^).wDeviceID;
end;
procedure __MCI_ANIM_OPEN_PARMSW__Wrapper.setdwStyle(const val : DWORD);
begin
MCI_ANIM_OPEN_PARMSW(GetRecordPtr^).dwStyle := val;
end;
function __MCI_ANIM_OPEN_PARMSW__Wrapper.getdwStyle : DWORD;
begin
result := MCI_ANIM_OPEN_PARMSW(GetRecordPtr^).dwStyle;
end;
function __MCI_ANIM_PLAY_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_ANIM_PLAY_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_ANIM_PLAY_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_ANIM_PLAY_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_ANIM_PLAY_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __MCI_ANIM_PLAY_PARMS__Wrapper.setdwFrom(const val : DWORD);
begin
MCI_ANIM_PLAY_PARMS(GetRecordPtr^).dwFrom := val;
end;
function __MCI_ANIM_PLAY_PARMS__Wrapper.getdwFrom : DWORD;
begin
result := MCI_ANIM_PLAY_PARMS(GetRecordPtr^).dwFrom;
end;
procedure __MCI_ANIM_PLAY_PARMS__Wrapper.setdwTo(const val : DWORD);
begin
MCI_ANIM_PLAY_PARMS(GetRecordPtr^).dwTo := val;
end;
function __MCI_ANIM_PLAY_PARMS__Wrapper.getdwTo : DWORD;
begin
result := MCI_ANIM_PLAY_PARMS(GetRecordPtr^).dwTo;
end;
procedure __MCI_ANIM_PLAY_PARMS__Wrapper.setdwSpeed(const val : DWORD);
begin
MCI_ANIM_PLAY_PARMS(GetRecordPtr^).dwSpeed := val;
end;
function __MCI_ANIM_PLAY_PARMS__Wrapper.getdwSpeed : DWORD;
begin
result := MCI_ANIM_PLAY_PARMS(GetRecordPtr^).dwSpeed;
end;
function __MCI_ANIM_RECT_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_ANIM_RECT_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_ANIM_RECT_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_ANIM_RECT_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_ANIM_RECT_PARMS(GetRecordPtr^).dwCallback;
end;
function __MCI_ANIM_STEP_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_ANIM_STEP_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_ANIM_STEP_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_ANIM_STEP_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_ANIM_STEP_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __MCI_ANIM_STEP_PARMS__Wrapper.setdwFrames(const val : DWORD);
begin
MCI_ANIM_STEP_PARMS(GetRecordPtr^).dwFrames := val;
end;
function __MCI_ANIM_STEP_PARMS__Wrapper.getdwFrames : DWORD;
begin
result := MCI_ANIM_STEP_PARMS(GetRecordPtr^).dwFrames;
end;
function __MCI_ANIM_UPDATE_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_ANIM_UPDATE_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_ANIM_UPDATE_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_ANIM_UPDATE_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_ANIM_UPDATE_PARMS(GetRecordPtr^).dwCallback;
end;
function __MCI_ANIM_WINDOW_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_ANIM_WINDOW_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_ANIM_WINDOW_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_ANIM_WINDOW_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_ANIM_WINDOW_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __MCI_ANIM_WINDOW_PARMS__Wrapper.setnCmdShow(const val : UINT);
begin
MCI_ANIM_WINDOW_PARMS(GetRecordPtr^).nCmdShow := val;
end;
function __MCI_ANIM_WINDOW_PARMS__Wrapper.getnCmdShow : UINT;
begin
result := MCI_ANIM_WINDOW_PARMS(GetRecordPtr^).nCmdShow;
end;
function __MCI_ANIM_WINDOW_PARMSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_ANIM_WINDOW_PARMSA__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_ANIM_WINDOW_PARMSA(GetRecordPtr^).dwCallback := val;
end;
function __MCI_ANIM_WINDOW_PARMSA__Wrapper.getdwCallback : DWORD;
begin
result := MCI_ANIM_WINDOW_PARMSA(GetRecordPtr^).dwCallback;
end;
procedure __MCI_ANIM_WINDOW_PARMSA__Wrapper.setnCmdShow(const val : UINT);
begin
MCI_ANIM_WINDOW_PARMSA(GetRecordPtr^).nCmdShow := val;
end;
function __MCI_ANIM_WINDOW_PARMSA__Wrapper.getnCmdShow : UINT;
begin
result := MCI_ANIM_WINDOW_PARMSA(GetRecordPtr^).nCmdShow;
end;
function __MCI_ANIM_WINDOW_PARMSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_ANIM_WINDOW_PARMSW__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_ANIM_WINDOW_PARMSW(GetRecordPtr^).dwCallback := val;
end;
function __MCI_ANIM_WINDOW_PARMSW__Wrapper.getdwCallback : DWORD;
begin
result := MCI_ANIM_WINDOW_PARMSW(GetRecordPtr^).dwCallback;
end;
procedure __MCI_ANIM_WINDOW_PARMSW__Wrapper.setnCmdShow(const val : UINT);
begin
MCI_ANIM_WINDOW_PARMSW(GetRecordPtr^).nCmdShow := val;
end;
function __MCI_ANIM_WINDOW_PARMSW__Wrapper.getnCmdShow : UINT;
begin
result := MCI_ANIM_WINDOW_PARMSW(GetRecordPtr^).nCmdShow;
end;
function __MCI_BREAK_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_BREAK_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_BREAK_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_BREAK_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_BREAK_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __MCI_BREAK_PARMS__Wrapper.setnVirtKey(const val : Integer);
begin
MCI_BREAK_PARMS(GetRecordPtr^).nVirtKey := val;
end;
function __MCI_BREAK_PARMS__Wrapper.getnVirtKey : Integer;
begin
result := MCI_BREAK_PARMS(GetRecordPtr^).nVirtKey;
end;
function __MCI_GENERIC_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_GENERIC_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_GENERIC_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_GENERIC_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_GENERIC_PARMS(GetRecordPtr^).dwCallback;
end;
function __MCI_GETDEVCAPS_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_GETDEVCAPS_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_GETDEVCAPS_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_GETDEVCAPS_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_GETDEVCAPS_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __MCI_GETDEVCAPS_PARMS__Wrapper.setdwReturn(const val : DWORD);
begin
MCI_GETDEVCAPS_PARMS(GetRecordPtr^).dwReturn := val;
end;
function __MCI_GETDEVCAPS_PARMS__Wrapper.getdwReturn : DWORD;
begin
result := MCI_GETDEVCAPS_PARMS(GetRecordPtr^).dwReturn;
end;
procedure __MCI_GETDEVCAPS_PARMS__Wrapper.setdwItem(const val : DWORD);
begin
MCI_GETDEVCAPS_PARMS(GetRecordPtr^).dwItem := val;
end;
function __MCI_GETDEVCAPS_PARMS__Wrapper.getdwItem : DWORD;
begin
result := MCI_GETDEVCAPS_PARMS(GetRecordPtr^).dwItem;
end;
function __MCI_INFO_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_INFO_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_INFO_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_INFO_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_INFO_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __MCI_INFO_PARMS__Wrapper.setdwRetSize(const val : DWORD);
begin
MCI_INFO_PARMS(GetRecordPtr^).dwRetSize := val;
end;
function __MCI_INFO_PARMS__Wrapper.getdwRetSize : DWORD;
begin
result := MCI_INFO_PARMS(GetRecordPtr^).dwRetSize;
end;
function __MCI_INFO_PARMSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_INFO_PARMSA__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_INFO_PARMSA(GetRecordPtr^).dwCallback := val;
end;
function __MCI_INFO_PARMSA__Wrapper.getdwCallback : DWORD;
begin
result := MCI_INFO_PARMSA(GetRecordPtr^).dwCallback;
end;
procedure __MCI_INFO_PARMSA__Wrapper.setdwRetSize(const val : DWORD);
begin
MCI_INFO_PARMSA(GetRecordPtr^).dwRetSize := val;
end;
function __MCI_INFO_PARMSA__Wrapper.getdwRetSize : DWORD;
begin
result := MCI_INFO_PARMSA(GetRecordPtr^).dwRetSize;
end;
function __MCI_INFO_PARMSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_INFO_PARMSW__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_INFO_PARMSW(GetRecordPtr^).dwCallback := val;
end;
function __MCI_INFO_PARMSW__Wrapper.getdwCallback : DWORD;
begin
result := MCI_INFO_PARMSW(GetRecordPtr^).dwCallback;
end;
procedure __MCI_INFO_PARMSW__Wrapper.setdwRetSize(const val : DWORD);
begin
MCI_INFO_PARMSW(GetRecordPtr^).dwRetSize := val;
end;
function __MCI_INFO_PARMSW__Wrapper.getdwRetSize : DWORD;
begin
result := MCI_INFO_PARMSW(GetRecordPtr^).dwRetSize;
end;
function __MCI_LOAD_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_LOAD_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_LOAD_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_LOAD_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_LOAD_PARMS(GetRecordPtr^).dwCallback;
end;
function __MCI_LOAD_PARMSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_LOAD_PARMSA__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_LOAD_PARMSA(GetRecordPtr^).dwCallback := val;
end;
function __MCI_LOAD_PARMSA__Wrapper.getdwCallback : DWORD;
begin
result := MCI_LOAD_PARMSA(GetRecordPtr^).dwCallback;
end;
function __MCI_LOAD_PARMSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_LOAD_PARMSW__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_LOAD_PARMSW(GetRecordPtr^).dwCallback := val;
end;
function __MCI_LOAD_PARMSW__Wrapper.getdwCallback : DWORD;
begin
result := MCI_LOAD_PARMSW(GetRecordPtr^).dwCallback;
end;
function __MCI_OPEN_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_OPEN_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_OPEN_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_OPEN_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_OPEN_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __MCI_OPEN_PARMS__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
MCI_OPEN_PARMS(GetRecordPtr^).wDeviceID := val;
end;
function __MCI_OPEN_PARMS__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := MCI_OPEN_PARMS(GetRecordPtr^).wDeviceID;
end;
function __MCI_OPEN_PARMSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_OPEN_PARMSA__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_OPEN_PARMSA(GetRecordPtr^).dwCallback := val;
end;
function __MCI_OPEN_PARMSA__Wrapper.getdwCallback : DWORD;
begin
result := MCI_OPEN_PARMSA(GetRecordPtr^).dwCallback;
end;
procedure __MCI_OPEN_PARMSA__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
MCI_OPEN_PARMSA(GetRecordPtr^).wDeviceID := val;
end;
function __MCI_OPEN_PARMSA__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := MCI_OPEN_PARMSA(GetRecordPtr^).wDeviceID;
end;
function __MCI_OPEN_PARMSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_OPEN_PARMSW__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_OPEN_PARMSW(GetRecordPtr^).dwCallback := val;
end;
function __MCI_OPEN_PARMSW__Wrapper.getdwCallback : DWORD;
begin
result := MCI_OPEN_PARMSW(GetRecordPtr^).dwCallback;
end;
procedure __MCI_OPEN_PARMSW__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
MCI_OPEN_PARMSW(GetRecordPtr^).wDeviceID := val;
end;
function __MCI_OPEN_PARMSW__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := MCI_OPEN_PARMSW(GetRecordPtr^).wDeviceID;
end;
function __MCI_OVLY_LOAD_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_OVLY_LOAD_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_OVLY_LOAD_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_OVLY_LOAD_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_OVLY_LOAD_PARMS(GetRecordPtr^).dwCallback;
end;
function __MCI_OVLY_LOAD_PARMSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_OVLY_LOAD_PARMSA__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_OVLY_LOAD_PARMSA(GetRecordPtr^).dwCallback := val;
end;
function __MCI_OVLY_LOAD_PARMSA__Wrapper.getdwCallback : DWORD;
begin
result := MCI_OVLY_LOAD_PARMSA(GetRecordPtr^).dwCallback;
end;
function __MCI_OVLY_LOAD_PARMSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_OVLY_LOAD_PARMSW__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_OVLY_LOAD_PARMSW(GetRecordPtr^).dwCallback := val;
end;
function __MCI_OVLY_LOAD_PARMSW__Wrapper.getdwCallback : DWORD;
begin
result := MCI_OVLY_LOAD_PARMSW(GetRecordPtr^).dwCallback;
end;
function __MCI_OVLY_OPEN_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_OVLY_OPEN_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_OVLY_OPEN_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_OVLY_OPEN_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_OVLY_OPEN_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __MCI_OVLY_OPEN_PARMS__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
MCI_OVLY_OPEN_PARMS(GetRecordPtr^).wDeviceID := val;
end;
function __MCI_OVLY_OPEN_PARMS__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := MCI_OVLY_OPEN_PARMS(GetRecordPtr^).wDeviceID;
end;
procedure __MCI_OVLY_OPEN_PARMS__Wrapper.setdwStyle(const val : DWORD);
begin
MCI_OVLY_OPEN_PARMS(GetRecordPtr^).dwStyle := val;
end;
function __MCI_OVLY_OPEN_PARMS__Wrapper.getdwStyle : DWORD;
begin
result := MCI_OVLY_OPEN_PARMS(GetRecordPtr^).dwStyle;
end;
function __MCI_OVLY_OPEN_PARMSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_OVLY_OPEN_PARMSA__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_OVLY_OPEN_PARMSA(GetRecordPtr^).dwCallback := val;
end;
function __MCI_OVLY_OPEN_PARMSA__Wrapper.getdwCallback : DWORD;
begin
result := MCI_OVLY_OPEN_PARMSA(GetRecordPtr^).dwCallback;
end;
procedure __MCI_OVLY_OPEN_PARMSA__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
MCI_OVLY_OPEN_PARMSA(GetRecordPtr^).wDeviceID := val;
end;
function __MCI_OVLY_OPEN_PARMSA__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := MCI_OVLY_OPEN_PARMSA(GetRecordPtr^).wDeviceID;
end;
procedure __MCI_OVLY_OPEN_PARMSA__Wrapper.setdwStyle(const val : DWORD);
begin
MCI_OVLY_OPEN_PARMSA(GetRecordPtr^).dwStyle := val;
end;
function __MCI_OVLY_OPEN_PARMSA__Wrapper.getdwStyle : DWORD;
begin
result := MCI_OVLY_OPEN_PARMSA(GetRecordPtr^).dwStyle;
end;
function __MCI_OVLY_OPEN_PARMSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_OVLY_OPEN_PARMSW__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_OVLY_OPEN_PARMSW(GetRecordPtr^).dwCallback := val;
end;
function __MCI_OVLY_OPEN_PARMSW__Wrapper.getdwCallback : DWORD;
begin
result := MCI_OVLY_OPEN_PARMSW(GetRecordPtr^).dwCallback;
end;
procedure __MCI_OVLY_OPEN_PARMSW__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
MCI_OVLY_OPEN_PARMSW(GetRecordPtr^).wDeviceID := val;
end;
function __MCI_OVLY_OPEN_PARMSW__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := MCI_OVLY_OPEN_PARMSW(GetRecordPtr^).wDeviceID;
end;
procedure __MCI_OVLY_OPEN_PARMSW__Wrapper.setdwStyle(const val : DWORD);
begin
MCI_OVLY_OPEN_PARMSW(GetRecordPtr^).dwStyle := val;
end;
function __MCI_OVLY_OPEN_PARMSW__Wrapper.getdwStyle : DWORD;
begin
result := MCI_OVLY_OPEN_PARMSW(GetRecordPtr^).dwStyle;
end;
function __MCI_OVLY_RECT_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_OVLY_RECT_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_OVLY_RECT_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_OVLY_RECT_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_OVLY_RECT_PARMS(GetRecordPtr^).dwCallback;
end;
function __MCI_OVLY_SAVE_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_OVLY_SAVE_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_OVLY_SAVE_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_OVLY_SAVE_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_OVLY_SAVE_PARMS(GetRecordPtr^).dwCallback;
end;
function __MCI_OVLY_SAVE_PARMSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_OVLY_SAVE_PARMSA__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_OVLY_SAVE_PARMSA(GetRecordPtr^).dwCallback := val;
end;
function __MCI_OVLY_SAVE_PARMSA__Wrapper.getdwCallback : DWORD;
begin
result := MCI_OVLY_SAVE_PARMSA(GetRecordPtr^).dwCallback;
end;
function __MCI_OVLY_SAVE_PARMSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_OVLY_SAVE_PARMSW__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_OVLY_SAVE_PARMSW(GetRecordPtr^).dwCallback := val;
end;
function __MCI_OVLY_SAVE_PARMSW__Wrapper.getdwCallback : DWORD;
begin
result := MCI_OVLY_SAVE_PARMSW(GetRecordPtr^).dwCallback;
end;
function __MCI_OVLY_WINDOW_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_OVLY_WINDOW_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_OVLY_WINDOW_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_OVLY_WINDOW_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_OVLY_WINDOW_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __MCI_OVLY_WINDOW_PARMS__Wrapper.setnCmdShow(const val : UINT);
begin
MCI_OVLY_WINDOW_PARMS(GetRecordPtr^).nCmdShow := val;
end;
function __MCI_OVLY_WINDOW_PARMS__Wrapper.getnCmdShow : UINT;
begin
result := MCI_OVLY_WINDOW_PARMS(GetRecordPtr^).nCmdShow;
end;
function __MCI_OVLY_WINDOW_PARMSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_OVLY_WINDOW_PARMSA__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_OVLY_WINDOW_PARMSA(GetRecordPtr^).dwCallback := val;
end;
function __MCI_OVLY_WINDOW_PARMSA__Wrapper.getdwCallback : DWORD;
begin
result := MCI_OVLY_WINDOW_PARMSA(GetRecordPtr^).dwCallback;
end;
procedure __MCI_OVLY_WINDOW_PARMSA__Wrapper.setnCmdShow(const val : UINT);
begin
MCI_OVLY_WINDOW_PARMSA(GetRecordPtr^).nCmdShow := val;
end;
function __MCI_OVLY_WINDOW_PARMSA__Wrapper.getnCmdShow : UINT;
begin
result := MCI_OVLY_WINDOW_PARMSA(GetRecordPtr^).nCmdShow;
end;
function __MCI_OVLY_WINDOW_PARMSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_OVLY_WINDOW_PARMSW__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_OVLY_WINDOW_PARMSW(GetRecordPtr^).dwCallback := val;
end;
function __MCI_OVLY_WINDOW_PARMSW__Wrapper.getdwCallback : DWORD;
begin
result := MCI_OVLY_WINDOW_PARMSW(GetRecordPtr^).dwCallback;
end;
procedure __MCI_OVLY_WINDOW_PARMSW__Wrapper.setnCmdShow(const val : UINT);
begin
MCI_OVLY_WINDOW_PARMSW(GetRecordPtr^).nCmdShow := val;
end;
function __MCI_OVLY_WINDOW_PARMSW__Wrapper.getnCmdShow : UINT;
begin
result := MCI_OVLY_WINDOW_PARMSW(GetRecordPtr^).nCmdShow;
end;
function __MCI_PLAY_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_PLAY_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_PLAY_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_PLAY_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_PLAY_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __MCI_PLAY_PARMS__Wrapper.setdwFrom(const val : DWORD);
begin
MCI_PLAY_PARMS(GetRecordPtr^).dwFrom := val;
end;
function __MCI_PLAY_PARMS__Wrapper.getdwFrom : DWORD;
begin
result := MCI_PLAY_PARMS(GetRecordPtr^).dwFrom;
end;
procedure __MCI_PLAY_PARMS__Wrapper.setdwTo(const val : DWORD);
begin
MCI_PLAY_PARMS(GetRecordPtr^).dwTo := val;
end;
function __MCI_PLAY_PARMS__Wrapper.getdwTo : DWORD;
begin
result := MCI_PLAY_PARMS(GetRecordPtr^).dwTo;
end;
function __MCI_RECORD_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_RECORD_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_RECORD_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_RECORD_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_RECORD_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __MCI_RECORD_PARMS__Wrapper.setdwFrom(const val : DWORD);
begin
MCI_RECORD_PARMS(GetRecordPtr^).dwFrom := val;
end;
function __MCI_RECORD_PARMS__Wrapper.getdwFrom : DWORD;
begin
result := MCI_RECORD_PARMS(GetRecordPtr^).dwFrom;
end;
procedure __MCI_RECORD_PARMS__Wrapper.setdwTo(const val : DWORD);
begin
MCI_RECORD_PARMS(GetRecordPtr^).dwTo := val;
end;
function __MCI_RECORD_PARMS__Wrapper.getdwTo : DWORD;
begin
result := MCI_RECORD_PARMS(GetRecordPtr^).dwTo;
end;
function __MCI_SAVE_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_SAVE_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_SAVE_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_SAVE_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_SAVE_PARMS(GetRecordPtr^).dwCallback;
end;
function __MCI_SAVE_PARMSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_SAVE_PARMSA__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_SAVE_PARMSA(GetRecordPtr^).dwCallback := val;
end;
function __MCI_SAVE_PARMSA__Wrapper.getdwCallback : DWORD;
begin
result := MCI_SAVE_PARMSA(GetRecordPtr^).dwCallback;
end;
function __MCI_SAVE_PARMSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_SAVE_PARMSW__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_SAVE_PARMSW(GetRecordPtr^).dwCallback := val;
end;
function __MCI_SAVE_PARMSW__Wrapper.getdwCallback : DWORD;
begin
result := MCI_SAVE_PARMSW(GetRecordPtr^).dwCallback;
end;
function __MCI_SEEK_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_SEEK_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_SEEK_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_SEEK_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_SEEK_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __MCI_SEEK_PARMS__Wrapper.setdwTo(const val : DWORD);
begin
MCI_SEEK_PARMS(GetRecordPtr^).dwTo := val;
end;
function __MCI_SEEK_PARMS__Wrapper.getdwTo : DWORD;
begin
result := MCI_SEEK_PARMS(GetRecordPtr^).dwTo;
end;
function __MCI_SEQ_SET_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_SEQ_SET_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_SEQ_SET_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_SEQ_SET_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_SEQ_SET_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __MCI_SEQ_SET_PARMS__Wrapper.setdwTimeFormat(const val : DWORD);
begin
MCI_SEQ_SET_PARMS(GetRecordPtr^).dwTimeFormat := val;
end;
function __MCI_SEQ_SET_PARMS__Wrapper.getdwTimeFormat : DWORD;
begin
result := MCI_SEQ_SET_PARMS(GetRecordPtr^).dwTimeFormat;
end;
procedure __MCI_SEQ_SET_PARMS__Wrapper.setdwAudio(const val : DWORD);
begin
MCI_SEQ_SET_PARMS(GetRecordPtr^).dwAudio := val;
end;
function __MCI_SEQ_SET_PARMS__Wrapper.getdwAudio : DWORD;
begin
result := MCI_SEQ_SET_PARMS(GetRecordPtr^).dwAudio;
end;
procedure __MCI_SEQ_SET_PARMS__Wrapper.setdwTempo(const val : DWORD);
begin
MCI_SEQ_SET_PARMS(GetRecordPtr^).dwTempo := val;
end;
function __MCI_SEQ_SET_PARMS__Wrapper.getdwTempo : DWORD;
begin
result := MCI_SEQ_SET_PARMS(GetRecordPtr^).dwTempo;
end;
procedure __MCI_SEQ_SET_PARMS__Wrapper.setdwPort(const val : DWORD);
begin
MCI_SEQ_SET_PARMS(GetRecordPtr^).dwPort := val;
end;
function __MCI_SEQ_SET_PARMS__Wrapper.getdwPort : DWORD;
begin
result := MCI_SEQ_SET_PARMS(GetRecordPtr^).dwPort;
end;
procedure __MCI_SEQ_SET_PARMS__Wrapper.setdwSlave(const val : DWORD);
begin
MCI_SEQ_SET_PARMS(GetRecordPtr^).dwSlave := val;
end;
function __MCI_SEQ_SET_PARMS__Wrapper.getdwSlave : DWORD;
begin
result := MCI_SEQ_SET_PARMS(GetRecordPtr^).dwSlave;
end;
procedure __MCI_SEQ_SET_PARMS__Wrapper.setdwMaster(const val : DWORD);
begin
MCI_SEQ_SET_PARMS(GetRecordPtr^).dwMaster := val;
end;
function __MCI_SEQ_SET_PARMS__Wrapper.getdwMaster : DWORD;
begin
result := MCI_SEQ_SET_PARMS(GetRecordPtr^).dwMaster;
end;
procedure __MCI_SEQ_SET_PARMS__Wrapper.setdwOffset(const val : DWORD);
begin
MCI_SEQ_SET_PARMS(GetRecordPtr^).dwOffset := val;
end;
function __MCI_SEQ_SET_PARMS__Wrapper.getdwOffset : DWORD;
begin
result := MCI_SEQ_SET_PARMS(GetRecordPtr^).dwOffset;
end;
function __MCI_SET_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_SET_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_SET_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_SET_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_SET_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __MCI_SET_PARMS__Wrapper.setdwTimeFormat(const val : DWORD);
begin
MCI_SET_PARMS(GetRecordPtr^).dwTimeFormat := val;
end;
function __MCI_SET_PARMS__Wrapper.getdwTimeFormat : DWORD;
begin
result := MCI_SET_PARMS(GetRecordPtr^).dwTimeFormat;
end;
procedure __MCI_SET_PARMS__Wrapper.setdwAudio(const val : DWORD);
begin
MCI_SET_PARMS(GetRecordPtr^).dwAudio := val;
end;
function __MCI_SET_PARMS__Wrapper.getdwAudio : DWORD;
begin
result := MCI_SET_PARMS(GetRecordPtr^).dwAudio;
end;
function __MCI_STATUS_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_STATUS_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_STATUS_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_STATUS_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_STATUS_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __MCI_STATUS_PARMS__Wrapper.setdwReturn(const val : DWORD);
begin
MCI_STATUS_PARMS(GetRecordPtr^).dwReturn := val;
end;
function __MCI_STATUS_PARMS__Wrapper.getdwReturn : DWORD;
begin
result := MCI_STATUS_PARMS(GetRecordPtr^).dwReturn;
end;
procedure __MCI_STATUS_PARMS__Wrapper.setdwItem(const val : DWORD);
begin
MCI_STATUS_PARMS(GetRecordPtr^).dwItem := val;
end;
function __MCI_STATUS_PARMS__Wrapper.getdwItem : DWORD;
begin
result := MCI_STATUS_PARMS(GetRecordPtr^).dwItem;
end;
procedure __MCI_STATUS_PARMS__Wrapper.setdwTrack(const val : DWORD);
begin
MCI_STATUS_PARMS(GetRecordPtr^).dwTrack := val;
end;
function __MCI_STATUS_PARMS__Wrapper.getdwTrack : DWORD;
begin
result := MCI_STATUS_PARMS(GetRecordPtr^).dwTrack;
end;
function __MCI_SYSINFO_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_SYSINFO_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_SYSINFO_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_SYSINFO_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_SYSINFO_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __MCI_SYSINFO_PARMS__Wrapper.setdwRetSize(const val : DWORD);
begin
MCI_SYSINFO_PARMS(GetRecordPtr^).dwRetSize := val;
end;
function __MCI_SYSINFO_PARMS__Wrapper.getdwRetSize : DWORD;
begin
result := MCI_SYSINFO_PARMS(GetRecordPtr^).dwRetSize;
end;
procedure __MCI_SYSINFO_PARMS__Wrapper.setdwNumber(const val : DWORD);
begin
MCI_SYSINFO_PARMS(GetRecordPtr^).dwNumber := val;
end;
function __MCI_SYSINFO_PARMS__Wrapper.getdwNumber : DWORD;
begin
result := MCI_SYSINFO_PARMS(GetRecordPtr^).dwNumber;
end;
procedure __MCI_SYSINFO_PARMS__Wrapper.setwDeviceType(const val : UINT);
begin
MCI_SYSINFO_PARMS(GetRecordPtr^).wDeviceType := val;
end;
function __MCI_SYSINFO_PARMS__Wrapper.getwDeviceType : UINT;
begin
result := MCI_SYSINFO_PARMS(GetRecordPtr^).wDeviceType;
end;
function __MCI_SYSINFO_PARMSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_SYSINFO_PARMSA__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_SYSINFO_PARMSA(GetRecordPtr^).dwCallback := val;
end;
function __MCI_SYSINFO_PARMSA__Wrapper.getdwCallback : DWORD;
begin
result := MCI_SYSINFO_PARMSA(GetRecordPtr^).dwCallback;
end;
procedure __MCI_SYSINFO_PARMSA__Wrapper.setdwRetSize(const val : DWORD);
begin
MCI_SYSINFO_PARMSA(GetRecordPtr^).dwRetSize := val;
end;
function __MCI_SYSINFO_PARMSA__Wrapper.getdwRetSize : DWORD;
begin
result := MCI_SYSINFO_PARMSA(GetRecordPtr^).dwRetSize;
end;
procedure __MCI_SYSINFO_PARMSA__Wrapper.setdwNumber(const val : DWORD);
begin
MCI_SYSINFO_PARMSA(GetRecordPtr^).dwNumber := val;
end;
function __MCI_SYSINFO_PARMSA__Wrapper.getdwNumber : DWORD;
begin
result := MCI_SYSINFO_PARMSA(GetRecordPtr^).dwNumber;
end;
procedure __MCI_SYSINFO_PARMSA__Wrapper.setwDeviceType(const val : UINT);
begin
MCI_SYSINFO_PARMSA(GetRecordPtr^).wDeviceType := val;
end;
function __MCI_SYSINFO_PARMSA__Wrapper.getwDeviceType : UINT;
begin
result := MCI_SYSINFO_PARMSA(GetRecordPtr^).wDeviceType;
end;
function __MCI_SYSINFO_PARMSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_SYSINFO_PARMSW__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_SYSINFO_PARMSW(GetRecordPtr^).dwCallback := val;
end;
function __MCI_SYSINFO_PARMSW__Wrapper.getdwCallback : DWORD;
begin
result := MCI_SYSINFO_PARMSW(GetRecordPtr^).dwCallback;
end;
procedure __MCI_SYSINFO_PARMSW__Wrapper.setdwRetSize(const val : DWORD);
begin
MCI_SYSINFO_PARMSW(GetRecordPtr^).dwRetSize := val;
end;
function __MCI_SYSINFO_PARMSW__Wrapper.getdwRetSize : DWORD;
begin
result := MCI_SYSINFO_PARMSW(GetRecordPtr^).dwRetSize;
end;
procedure __MCI_SYSINFO_PARMSW__Wrapper.setdwNumber(const val : DWORD);
begin
MCI_SYSINFO_PARMSW(GetRecordPtr^).dwNumber := val;
end;
function __MCI_SYSINFO_PARMSW__Wrapper.getdwNumber : DWORD;
begin
result := MCI_SYSINFO_PARMSW(GetRecordPtr^).dwNumber;
end;
procedure __MCI_SYSINFO_PARMSW__Wrapper.setwDeviceType(const val : UINT);
begin
MCI_SYSINFO_PARMSW(GetRecordPtr^).wDeviceType := val;
end;
function __MCI_SYSINFO_PARMSW__Wrapper.getwDeviceType : UINT;
begin
result := MCI_SYSINFO_PARMSW(GetRecordPtr^).wDeviceType;
end;
function __MCI_VD_ESCAPE_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_VD_ESCAPE_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_VD_ESCAPE_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_VD_ESCAPE_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_VD_ESCAPE_PARMS(GetRecordPtr^).dwCallback;
end;
function __MCI_VD_ESCAPE_PARMSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_VD_ESCAPE_PARMSA__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_VD_ESCAPE_PARMSA(GetRecordPtr^).dwCallback := val;
end;
function __MCI_VD_ESCAPE_PARMSA__Wrapper.getdwCallback : DWORD;
begin
result := MCI_VD_ESCAPE_PARMSA(GetRecordPtr^).dwCallback;
end;
function __MCI_VD_ESCAPE_PARMSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_VD_ESCAPE_PARMSW__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_VD_ESCAPE_PARMSW(GetRecordPtr^).dwCallback := val;
end;
function __MCI_VD_ESCAPE_PARMSW__Wrapper.getdwCallback : DWORD;
begin
result := MCI_VD_ESCAPE_PARMSW(GetRecordPtr^).dwCallback;
end;
function __MCI_VD_PLAY_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_VD_PLAY_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_VD_PLAY_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_VD_PLAY_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_VD_PLAY_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __MCI_VD_PLAY_PARMS__Wrapper.setdwFrom(const val : DWORD);
begin
MCI_VD_PLAY_PARMS(GetRecordPtr^).dwFrom := val;
end;
function __MCI_VD_PLAY_PARMS__Wrapper.getdwFrom : DWORD;
begin
result := MCI_VD_PLAY_PARMS(GetRecordPtr^).dwFrom;
end;
procedure __MCI_VD_PLAY_PARMS__Wrapper.setdwTo(const val : DWORD);
begin
MCI_VD_PLAY_PARMS(GetRecordPtr^).dwTo := val;
end;
function __MCI_VD_PLAY_PARMS__Wrapper.getdwTo : DWORD;
begin
result := MCI_VD_PLAY_PARMS(GetRecordPtr^).dwTo;
end;
procedure __MCI_VD_PLAY_PARMS__Wrapper.setdwSpeed(const val : DWORD);
begin
MCI_VD_PLAY_PARMS(GetRecordPtr^).dwSpeed := val;
end;
function __MCI_VD_PLAY_PARMS__Wrapper.getdwSpeed : DWORD;
begin
result := MCI_VD_PLAY_PARMS(GetRecordPtr^).dwSpeed;
end;
function __MCI_VD_STEP_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_VD_STEP_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_VD_STEP_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_VD_STEP_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_VD_STEP_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __MCI_VD_STEP_PARMS__Wrapper.setdwFrames(const val : DWORD);
begin
MCI_VD_STEP_PARMS(GetRecordPtr^).dwFrames := val;
end;
function __MCI_VD_STEP_PARMS__Wrapper.getdwFrames : DWORD;
begin
result := MCI_VD_STEP_PARMS(GetRecordPtr^).dwFrames;
end;
function __MCI_WAVE_DELETE_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_WAVE_DELETE_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_WAVE_DELETE_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_WAVE_DELETE_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_WAVE_DELETE_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __MCI_WAVE_DELETE_PARMS__Wrapper.setdwFrom(const val : DWORD);
begin
MCI_WAVE_DELETE_PARMS(GetRecordPtr^).dwFrom := val;
end;
function __MCI_WAVE_DELETE_PARMS__Wrapper.getdwFrom : DWORD;
begin
result := MCI_WAVE_DELETE_PARMS(GetRecordPtr^).dwFrom;
end;
procedure __MCI_WAVE_DELETE_PARMS__Wrapper.setdwTo(const val : DWORD);
begin
MCI_WAVE_DELETE_PARMS(GetRecordPtr^).dwTo := val;
end;
function __MCI_WAVE_DELETE_PARMS__Wrapper.getdwTo : DWORD;
begin
result := MCI_WAVE_DELETE_PARMS(GetRecordPtr^).dwTo;
end;
function __MCI_WAVE_OPEN_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_WAVE_OPEN_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_WAVE_OPEN_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_WAVE_OPEN_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_WAVE_OPEN_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __MCI_WAVE_OPEN_PARMS__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
MCI_WAVE_OPEN_PARMS(GetRecordPtr^).wDeviceID := val;
end;
function __MCI_WAVE_OPEN_PARMS__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := MCI_WAVE_OPEN_PARMS(GetRecordPtr^).wDeviceID;
end;
procedure __MCI_WAVE_OPEN_PARMS__Wrapper.setdwBufferSeconds(const val : DWORD);
begin
MCI_WAVE_OPEN_PARMS(GetRecordPtr^).dwBufferSeconds := val;
end;
function __MCI_WAVE_OPEN_PARMS__Wrapper.getdwBufferSeconds : DWORD;
begin
result := MCI_WAVE_OPEN_PARMS(GetRecordPtr^).dwBufferSeconds;
end;
function __MCI_WAVE_OPEN_PARMSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_WAVE_OPEN_PARMSA__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_WAVE_OPEN_PARMSA(GetRecordPtr^).dwCallback := val;
end;
function __MCI_WAVE_OPEN_PARMSA__Wrapper.getdwCallback : DWORD;
begin
result := MCI_WAVE_OPEN_PARMSA(GetRecordPtr^).dwCallback;
end;
procedure __MCI_WAVE_OPEN_PARMSA__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
MCI_WAVE_OPEN_PARMSA(GetRecordPtr^).wDeviceID := val;
end;
function __MCI_WAVE_OPEN_PARMSA__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := MCI_WAVE_OPEN_PARMSA(GetRecordPtr^).wDeviceID;
end;
procedure __MCI_WAVE_OPEN_PARMSA__Wrapper.setdwBufferSeconds(const val : DWORD);
begin
MCI_WAVE_OPEN_PARMSA(GetRecordPtr^).dwBufferSeconds := val;
end;
function __MCI_WAVE_OPEN_PARMSA__Wrapper.getdwBufferSeconds : DWORD;
begin
result := MCI_WAVE_OPEN_PARMSA(GetRecordPtr^).dwBufferSeconds;
end;
function __MCI_WAVE_OPEN_PARMSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_WAVE_OPEN_PARMSW__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_WAVE_OPEN_PARMSW(GetRecordPtr^).dwCallback := val;
end;
function __MCI_WAVE_OPEN_PARMSW__Wrapper.getdwCallback : DWORD;
begin
result := MCI_WAVE_OPEN_PARMSW(GetRecordPtr^).dwCallback;
end;
procedure __MCI_WAVE_OPEN_PARMSW__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
MCI_WAVE_OPEN_PARMSW(GetRecordPtr^).wDeviceID := val;
end;
function __MCI_WAVE_OPEN_PARMSW__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := MCI_WAVE_OPEN_PARMSW(GetRecordPtr^).wDeviceID;
end;
procedure __MCI_WAVE_OPEN_PARMSW__Wrapper.setdwBufferSeconds(const val : DWORD);
begin
MCI_WAVE_OPEN_PARMSW(GetRecordPtr^).dwBufferSeconds := val;
end;
function __MCI_WAVE_OPEN_PARMSW__Wrapper.getdwBufferSeconds : DWORD;
begin
result := MCI_WAVE_OPEN_PARMSW(GetRecordPtr^).dwBufferSeconds;
end;
function __MCI_WAVE_SET_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MCI_WAVE_SET_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
MCI_WAVE_SET_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __MCI_WAVE_SET_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := MCI_WAVE_SET_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __MCI_WAVE_SET_PARMS__Wrapper.setdwTimeFormat(const val : DWORD);
begin
MCI_WAVE_SET_PARMS(GetRecordPtr^).dwTimeFormat := val;
end;
function __MCI_WAVE_SET_PARMS__Wrapper.getdwTimeFormat : DWORD;
begin
result := MCI_WAVE_SET_PARMS(GetRecordPtr^).dwTimeFormat;
end;
procedure __MCI_WAVE_SET_PARMS__Wrapper.setdwAudio(const val : DWORD);
begin
MCI_WAVE_SET_PARMS(GetRecordPtr^).dwAudio := val;
end;
function __MCI_WAVE_SET_PARMS__Wrapper.getdwAudio : DWORD;
begin
result := MCI_WAVE_SET_PARMS(GetRecordPtr^).dwAudio;
end;
procedure __MCI_WAVE_SET_PARMS__Wrapper.setwInput(const val : UINT);
begin
MCI_WAVE_SET_PARMS(GetRecordPtr^).wInput := val;
end;
function __MCI_WAVE_SET_PARMS__Wrapper.getwInput : UINT;
begin
result := MCI_WAVE_SET_PARMS(GetRecordPtr^).wInput;
end;
procedure __MCI_WAVE_SET_PARMS__Wrapper.setwOutput(const val : UINT);
begin
MCI_WAVE_SET_PARMS(GetRecordPtr^).wOutput := val;
end;
function __MCI_WAVE_SET_PARMS__Wrapper.getwOutput : UINT;
begin
result := MCI_WAVE_SET_PARMS(GetRecordPtr^).wOutput;
end;
procedure __MCI_WAVE_SET_PARMS__Wrapper.setwFormatTag(const val : Word);
begin
MCI_WAVE_SET_PARMS(GetRecordPtr^).wFormatTag := val;
end;
function __MCI_WAVE_SET_PARMS__Wrapper.getwFormatTag : Word;
begin
result := MCI_WAVE_SET_PARMS(GetRecordPtr^).wFormatTag;
end;
procedure __MCI_WAVE_SET_PARMS__Wrapper.setwReserved2(const val : Word);
begin
MCI_WAVE_SET_PARMS(GetRecordPtr^).wReserved2 := val;
end;
function __MCI_WAVE_SET_PARMS__Wrapper.getwReserved2 : Word;
begin
result := MCI_WAVE_SET_PARMS(GetRecordPtr^).wReserved2;
end;
procedure __MCI_WAVE_SET_PARMS__Wrapper.setnChannels(const val : Word);
begin
MCI_WAVE_SET_PARMS(GetRecordPtr^).nChannels := val;
end;
function __MCI_WAVE_SET_PARMS__Wrapper.getnChannels : Word;
begin
result := MCI_WAVE_SET_PARMS(GetRecordPtr^).nChannels;
end;
procedure __MCI_WAVE_SET_PARMS__Wrapper.setwReserved3(const val : Word);
begin
MCI_WAVE_SET_PARMS(GetRecordPtr^).wReserved3 := val;
end;
function __MCI_WAVE_SET_PARMS__Wrapper.getwReserved3 : Word;
begin
result := MCI_WAVE_SET_PARMS(GetRecordPtr^).wReserved3;
end;
procedure __MCI_WAVE_SET_PARMS__Wrapper.setnSamplesPerSec(const val : DWORD);
begin
MCI_WAVE_SET_PARMS(GetRecordPtr^).nSamplesPerSec := val;
end;
function __MCI_WAVE_SET_PARMS__Wrapper.getnSamplesPerSec : DWORD;
begin
result := MCI_WAVE_SET_PARMS(GetRecordPtr^).nSamplesPerSec;
end;
procedure __MCI_WAVE_SET_PARMS__Wrapper.setnAvgBytesPerSec(const val : DWORD);
begin
MCI_WAVE_SET_PARMS(GetRecordPtr^).nAvgBytesPerSec := val;
end;
function __MCI_WAVE_SET_PARMS__Wrapper.getnAvgBytesPerSec : DWORD;
begin
result := MCI_WAVE_SET_PARMS(GetRecordPtr^).nAvgBytesPerSec;
end;
procedure __MCI_WAVE_SET_PARMS__Wrapper.setnBlockAlign(const val : Word);
begin
MCI_WAVE_SET_PARMS(GetRecordPtr^).nBlockAlign := val;
end;
function __MCI_WAVE_SET_PARMS__Wrapper.getnBlockAlign : Word;
begin
result := MCI_WAVE_SET_PARMS(GetRecordPtr^).nBlockAlign;
end;
procedure __MCI_WAVE_SET_PARMS__Wrapper.setwReserved4(const val : Word);
begin
MCI_WAVE_SET_PARMS(GetRecordPtr^).wReserved4 := val;
end;
function __MCI_WAVE_SET_PARMS__Wrapper.getwReserved4 : Word;
begin
result := MCI_WAVE_SET_PARMS(GetRecordPtr^).wReserved4;
end;
procedure __MCI_WAVE_SET_PARMS__Wrapper.setwBitsPerSample(const val : Word);
begin
MCI_WAVE_SET_PARMS(GetRecordPtr^).wBitsPerSample := val;
end;
function __MCI_WAVE_SET_PARMS__Wrapper.getwBitsPerSample : Word;
begin
result := MCI_WAVE_SET_PARMS(GetRecordPtr^).wBitsPerSample;
end;
procedure __MCI_WAVE_SET_PARMS__Wrapper.setwReserved5(const val : Word);
begin
MCI_WAVE_SET_PARMS(GetRecordPtr^).wReserved5 := val;
end;
function __MCI_WAVE_SET_PARMS__Wrapper.getwReserved5 : Word;
begin
result := MCI_WAVE_SET_PARMS(GetRecordPtr^).wReserved5;
end;
function __MIDIEVENT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MIDIEVENT__Wrapper.setdwDeltaTime(const val : DWORD);
begin
MIDIEVENT(GetRecordPtr^).dwDeltaTime := val;
end;
function __MIDIEVENT__Wrapper.getdwDeltaTime : DWORD;
begin
result := MIDIEVENT(GetRecordPtr^).dwDeltaTime;
end;
procedure __MIDIEVENT__Wrapper.setdwStreamID(const val : DWORD);
begin
MIDIEVENT(GetRecordPtr^).dwStreamID := val;
end;
function __MIDIEVENT__Wrapper.getdwStreamID : DWORD;
begin
result := MIDIEVENT(GetRecordPtr^).dwStreamID;
end;
procedure __MIDIEVENT__Wrapper.setdwEvent(const val : DWORD);
begin
MIDIEVENT(GetRecordPtr^).dwEvent := val;
end;
function __MIDIEVENT__Wrapper.getdwEvent : DWORD;
begin
result := MIDIEVENT(GetRecordPtr^).dwEvent;
end;
function __midievent_tag__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __midievent_tag__Wrapper.setdwDeltaTime(const val : DWORD);
begin
midievent_tag(GetRecordPtr^).dwDeltaTime := val;
end;
function __midievent_tag__Wrapper.getdwDeltaTime : DWORD;
begin
result := midievent_tag(GetRecordPtr^).dwDeltaTime;
end;
procedure __midievent_tag__Wrapper.setdwStreamID(const val : DWORD);
begin
midievent_tag(GetRecordPtr^).dwStreamID := val;
end;
function __midievent_tag__Wrapper.getdwStreamID : DWORD;
begin
result := midievent_tag(GetRecordPtr^).dwStreamID;
end;
procedure __midievent_tag__Wrapper.setdwEvent(const val : DWORD);
begin
midievent_tag(GetRecordPtr^).dwEvent := val;
end;
function __midievent_tag__Wrapper.getdwEvent : DWORD;
begin
result := midievent_tag(GetRecordPtr^).dwEvent;
end;
function __MIDIHDR__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MIDIHDR__Wrapper.setdwBufferLength(const val : DWORD);
begin
MIDIHDR(GetRecordPtr^).dwBufferLength := val;
end;
function __MIDIHDR__Wrapper.getdwBufferLength : DWORD;
begin
result := MIDIHDR(GetRecordPtr^).dwBufferLength;
end;
procedure __MIDIHDR__Wrapper.setdwBytesRecorded(const val : DWORD);
begin
MIDIHDR(GetRecordPtr^).dwBytesRecorded := val;
end;
function __MIDIHDR__Wrapper.getdwBytesRecorded : DWORD;
begin
result := MIDIHDR(GetRecordPtr^).dwBytesRecorded;
end;
procedure __MIDIHDR__Wrapper.setdwUser(const val : DWORD);
begin
MIDIHDR(GetRecordPtr^).dwUser := val;
end;
function __MIDIHDR__Wrapper.getdwUser : DWORD;
begin
result := MIDIHDR(GetRecordPtr^).dwUser;
end;
procedure __MIDIHDR__Wrapper.setdwFlags(const val : DWORD);
begin
MIDIHDR(GetRecordPtr^).dwFlags := val;
end;
function __MIDIHDR__Wrapper.getdwFlags : DWORD;
begin
result := MIDIHDR(GetRecordPtr^).dwFlags;
end;
procedure __MIDIHDR__Wrapper.setreserved(const val : DWORD);
begin
MIDIHDR(GetRecordPtr^).reserved := val;
end;
function __MIDIHDR__Wrapper.getreserved : DWORD;
begin
result := MIDIHDR(GetRecordPtr^).reserved;
end;
procedure __MIDIHDR__Wrapper.setdwOffset(const val : DWORD);
begin
MIDIHDR(GetRecordPtr^).dwOffset := val;
end;
function __MIDIHDR__Wrapper.getdwOffset : DWORD;
begin
result := MIDIHDR(GetRecordPtr^).dwOffset;
end;
function __midihdr_tag__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __midihdr_tag__Wrapper.setdwBufferLength(const val : DWORD);
begin
midihdr_tag(GetRecordPtr^).dwBufferLength := val;
end;
function __midihdr_tag__Wrapper.getdwBufferLength : DWORD;
begin
result := midihdr_tag(GetRecordPtr^).dwBufferLength;
end;
procedure __midihdr_tag__Wrapper.setdwBytesRecorded(const val : DWORD);
begin
midihdr_tag(GetRecordPtr^).dwBytesRecorded := val;
end;
function __midihdr_tag__Wrapper.getdwBytesRecorded : DWORD;
begin
result := midihdr_tag(GetRecordPtr^).dwBytesRecorded;
end;
procedure __midihdr_tag__Wrapper.setdwUser(const val : DWORD);
begin
midihdr_tag(GetRecordPtr^).dwUser := val;
end;
function __midihdr_tag__Wrapper.getdwUser : DWORD;
begin
result := midihdr_tag(GetRecordPtr^).dwUser;
end;
procedure __midihdr_tag__Wrapper.setdwFlags(const val : DWORD);
begin
midihdr_tag(GetRecordPtr^).dwFlags := val;
end;
function __midihdr_tag__Wrapper.getdwFlags : DWORD;
begin
result := midihdr_tag(GetRecordPtr^).dwFlags;
end;
procedure __midihdr_tag__Wrapper.setreserved(const val : DWORD);
begin
midihdr_tag(GetRecordPtr^).reserved := val;
end;
function __midihdr_tag__Wrapper.getreserved : DWORD;
begin
result := midihdr_tag(GetRecordPtr^).reserved;
end;
procedure __midihdr_tag__Wrapper.setdwOffset(const val : DWORD);
begin
midihdr_tag(GetRecordPtr^).dwOffset := val;
end;
function __midihdr_tag__Wrapper.getdwOffset : DWORD;
begin
result := midihdr_tag(GetRecordPtr^).dwOffset;
end;
function __MIDIINCAPS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MIDIINCAPS__Wrapper.setwMid(const val : Word);
begin
MIDIINCAPS(GetRecordPtr^).wMid := val;
end;
function __MIDIINCAPS__Wrapper.getwMid : Word;
begin
result := MIDIINCAPS(GetRecordPtr^).wMid;
end;
procedure __MIDIINCAPS__Wrapper.setwPid(const val : Word);
begin
MIDIINCAPS(GetRecordPtr^).wPid := val;
end;
function __MIDIINCAPS__Wrapper.getwPid : Word;
begin
result := MIDIINCAPS(GetRecordPtr^).wPid;
end;
procedure __MIDIINCAPS__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
MIDIINCAPS(GetRecordPtr^).vDriverVersion := val;
end;
function __MIDIINCAPS__Wrapper.getvDriverVersion : MMVERSION;
begin
result := MIDIINCAPS(GetRecordPtr^).vDriverVersion;
end;
procedure __MIDIINCAPS__Wrapper.setdwSupport(const val : DWORD);
begin
MIDIINCAPS(GetRecordPtr^).dwSupport := val;
end;
function __MIDIINCAPS__Wrapper.getdwSupport : DWORD;
begin
result := MIDIINCAPS(GetRecordPtr^).dwSupport;
end;
function __MIDIINCAPSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MIDIINCAPSA__Wrapper.setwMid(const val : Word);
begin
MIDIINCAPSA(GetRecordPtr^).wMid := val;
end;
function __MIDIINCAPSA__Wrapper.getwMid : Word;
begin
result := MIDIINCAPSA(GetRecordPtr^).wMid;
end;
procedure __MIDIINCAPSA__Wrapper.setwPid(const val : Word);
begin
MIDIINCAPSA(GetRecordPtr^).wPid := val;
end;
function __MIDIINCAPSA__Wrapper.getwPid : Word;
begin
result := MIDIINCAPSA(GetRecordPtr^).wPid;
end;
procedure __MIDIINCAPSA__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
MIDIINCAPSA(GetRecordPtr^).vDriverVersion := val;
end;
function __MIDIINCAPSA__Wrapper.getvDriverVersion : MMVERSION;
begin
result := MIDIINCAPSA(GetRecordPtr^).vDriverVersion;
end;
procedure __MIDIINCAPSA__Wrapper.setdwSupport(const val : DWORD);
begin
MIDIINCAPSA(GetRecordPtr^).dwSupport := val;
end;
function __MIDIINCAPSA__Wrapper.getdwSupport : DWORD;
begin
result := MIDIINCAPSA(GetRecordPtr^).dwSupport;
end;
function __MIDIINCAPSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MIDIINCAPSW__Wrapper.setwMid(const val : Word);
begin
MIDIINCAPSW(GetRecordPtr^).wMid := val;
end;
function __MIDIINCAPSW__Wrapper.getwMid : Word;
begin
result := MIDIINCAPSW(GetRecordPtr^).wMid;
end;
procedure __MIDIINCAPSW__Wrapper.setwPid(const val : Word);
begin
MIDIINCAPSW(GetRecordPtr^).wPid := val;
end;
function __MIDIINCAPSW__Wrapper.getwPid : Word;
begin
result := MIDIINCAPSW(GetRecordPtr^).wPid;
end;
procedure __MIDIINCAPSW__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
MIDIINCAPSW(GetRecordPtr^).vDriverVersion := val;
end;
function __MIDIINCAPSW__Wrapper.getvDriverVersion : MMVERSION;
begin
result := MIDIINCAPSW(GetRecordPtr^).vDriverVersion;
end;
procedure __MIDIINCAPSW__Wrapper.setdwSupport(const val : DWORD);
begin
MIDIINCAPSW(GetRecordPtr^).dwSupport := val;
end;
function __MIDIINCAPSW__Wrapper.getdwSupport : DWORD;
begin
result := MIDIINCAPSW(GetRecordPtr^).dwSupport;
end;
function __MIDIOUTCAPS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MIDIOUTCAPS__Wrapper.setwMid(const val : Word);
begin
MIDIOUTCAPS(GetRecordPtr^).wMid := val;
end;
function __MIDIOUTCAPS__Wrapper.getwMid : Word;
begin
result := MIDIOUTCAPS(GetRecordPtr^).wMid;
end;
procedure __MIDIOUTCAPS__Wrapper.setwPid(const val : Word);
begin
MIDIOUTCAPS(GetRecordPtr^).wPid := val;
end;
function __MIDIOUTCAPS__Wrapper.getwPid : Word;
begin
result := MIDIOUTCAPS(GetRecordPtr^).wPid;
end;
procedure __MIDIOUTCAPS__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
MIDIOUTCAPS(GetRecordPtr^).vDriverVersion := val;
end;
function __MIDIOUTCAPS__Wrapper.getvDriverVersion : MMVERSION;
begin
result := MIDIOUTCAPS(GetRecordPtr^).vDriverVersion;
end;
procedure __MIDIOUTCAPS__Wrapper.setwTechnology(const val : Word);
begin
MIDIOUTCAPS(GetRecordPtr^).wTechnology := val;
end;
function __MIDIOUTCAPS__Wrapper.getwTechnology : Word;
begin
result := MIDIOUTCAPS(GetRecordPtr^).wTechnology;
end;
procedure __MIDIOUTCAPS__Wrapper.setwVoices(const val : Word);
begin
MIDIOUTCAPS(GetRecordPtr^).wVoices := val;
end;
function __MIDIOUTCAPS__Wrapper.getwVoices : Word;
begin
result := MIDIOUTCAPS(GetRecordPtr^).wVoices;
end;
procedure __MIDIOUTCAPS__Wrapper.setwNotes(const val : Word);
begin
MIDIOUTCAPS(GetRecordPtr^).wNotes := val;
end;
function __MIDIOUTCAPS__Wrapper.getwNotes : Word;
begin
result := MIDIOUTCAPS(GetRecordPtr^).wNotes;
end;
procedure __MIDIOUTCAPS__Wrapper.setwChannelMask(const val : Word);
begin
MIDIOUTCAPS(GetRecordPtr^).wChannelMask := val;
end;
function __MIDIOUTCAPS__Wrapper.getwChannelMask : Word;
begin
result := MIDIOUTCAPS(GetRecordPtr^).wChannelMask;
end;
procedure __MIDIOUTCAPS__Wrapper.setdwSupport(const val : DWORD);
begin
MIDIOUTCAPS(GetRecordPtr^).dwSupport := val;
end;
function __MIDIOUTCAPS__Wrapper.getdwSupport : DWORD;
begin
result := MIDIOUTCAPS(GetRecordPtr^).dwSupport;
end;
function __MIDIOUTCAPSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MIDIOUTCAPSA__Wrapper.setwMid(const val : Word);
begin
MIDIOUTCAPSA(GetRecordPtr^).wMid := val;
end;
function __MIDIOUTCAPSA__Wrapper.getwMid : Word;
begin
result := MIDIOUTCAPSA(GetRecordPtr^).wMid;
end;
procedure __MIDIOUTCAPSA__Wrapper.setwPid(const val : Word);
begin
MIDIOUTCAPSA(GetRecordPtr^).wPid := val;
end;
function __MIDIOUTCAPSA__Wrapper.getwPid : Word;
begin
result := MIDIOUTCAPSA(GetRecordPtr^).wPid;
end;
procedure __MIDIOUTCAPSA__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
MIDIOUTCAPSA(GetRecordPtr^).vDriverVersion := val;
end;
function __MIDIOUTCAPSA__Wrapper.getvDriverVersion : MMVERSION;
begin
result := MIDIOUTCAPSA(GetRecordPtr^).vDriverVersion;
end;
procedure __MIDIOUTCAPSA__Wrapper.setwTechnology(const val : Word);
begin
MIDIOUTCAPSA(GetRecordPtr^).wTechnology := val;
end;
function __MIDIOUTCAPSA__Wrapper.getwTechnology : Word;
begin
result := MIDIOUTCAPSA(GetRecordPtr^).wTechnology;
end;
procedure __MIDIOUTCAPSA__Wrapper.setwVoices(const val : Word);
begin
MIDIOUTCAPSA(GetRecordPtr^).wVoices := val;
end;
function __MIDIOUTCAPSA__Wrapper.getwVoices : Word;
begin
result := MIDIOUTCAPSA(GetRecordPtr^).wVoices;
end;
procedure __MIDIOUTCAPSA__Wrapper.setwNotes(const val : Word);
begin
MIDIOUTCAPSA(GetRecordPtr^).wNotes := val;
end;
function __MIDIOUTCAPSA__Wrapper.getwNotes : Word;
begin
result := MIDIOUTCAPSA(GetRecordPtr^).wNotes;
end;
procedure __MIDIOUTCAPSA__Wrapper.setwChannelMask(const val : Word);
begin
MIDIOUTCAPSA(GetRecordPtr^).wChannelMask := val;
end;
function __MIDIOUTCAPSA__Wrapper.getwChannelMask : Word;
begin
result := MIDIOUTCAPSA(GetRecordPtr^).wChannelMask;
end;
procedure __MIDIOUTCAPSA__Wrapper.setdwSupport(const val : DWORD);
begin
MIDIOUTCAPSA(GetRecordPtr^).dwSupport := val;
end;
function __MIDIOUTCAPSA__Wrapper.getdwSupport : DWORD;
begin
result := MIDIOUTCAPSA(GetRecordPtr^).dwSupport;
end;
function __MIDIOUTCAPSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MIDIOUTCAPSW__Wrapper.setwMid(const val : Word);
begin
MIDIOUTCAPSW(GetRecordPtr^).wMid := val;
end;
function __MIDIOUTCAPSW__Wrapper.getwMid : Word;
begin
result := MIDIOUTCAPSW(GetRecordPtr^).wMid;
end;
procedure __MIDIOUTCAPSW__Wrapper.setwPid(const val : Word);
begin
MIDIOUTCAPSW(GetRecordPtr^).wPid := val;
end;
function __MIDIOUTCAPSW__Wrapper.getwPid : Word;
begin
result := MIDIOUTCAPSW(GetRecordPtr^).wPid;
end;
procedure __MIDIOUTCAPSW__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
MIDIOUTCAPSW(GetRecordPtr^).vDriverVersion := val;
end;
function __MIDIOUTCAPSW__Wrapper.getvDriverVersion : MMVERSION;
begin
result := MIDIOUTCAPSW(GetRecordPtr^).vDriverVersion;
end;
procedure __MIDIOUTCAPSW__Wrapper.setwTechnology(const val : Word);
begin
MIDIOUTCAPSW(GetRecordPtr^).wTechnology := val;
end;
function __MIDIOUTCAPSW__Wrapper.getwTechnology : Word;
begin
result := MIDIOUTCAPSW(GetRecordPtr^).wTechnology;
end;
procedure __MIDIOUTCAPSW__Wrapper.setwVoices(const val : Word);
begin
MIDIOUTCAPSW(GetRecordPtr^).wVoices := val;
end;
function __MIDIOUTCAPSW__Wrapper.getwVoices : Word;
begin
result := MIDIOUTCAPSW(GetRecordPtr^).wVoices;
end;
procedure __MIDIOUTCAPSW__Wrapper.setwNotes(const val : Word);
begin
MIDIOUTCAPSW(GetRecordPtr^).wNotes := val;
end;
function __MIDIOUTCAPSW__Wrapper.getwNotes : Word;
begin
result := MIDIOUTCAPSW(GetRecordPtr^).wNotes;
end;
procedure __MIDIOUTCAPSW__Wrapper.setwChannelMask(const val : Word);
begin
MIDIOUTCAPSW(GetRecordPtr^).wChannelMask := val;
end;
function __MIDIOUTCAPSW__Wrapper.getwChannelMask : Word;
begin
result := MIDIOUTCAPSW(GetRecordPtr^).wChannelMask;
end;
procedure __MIDIOUTCAPSW__Wrapper.setdwSupport(const val : DWORD);
begin
MIDIOUTCAPSW(GetRecordPtr^).dwSupport := val;
end;
function __MIDIOUTCAPSW__Wrapper.getdwSupport : DWORD;
begin
result := MIDIOUTCAPSW(GetRecordPtr^).dwSupport;
end;
function __MIDIPROPTEMPO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MIDIPROPTEMPO__Wrapper.setcbStruct(const val : DWORD);
begin
MIDIPROPTEMPO(GetRecordPtr^).cbStruct := val;
end;
function __MIDIPROPTEMPO__Wrapper.getcbStruct : DWORD;
begin
result := MIDIPROPTEMPO(GetRecordPtr^).cbStruct;
end;
procedure __MIDIPROPTEMPO__Wrapper.setdwTempo(const val : DWORD);
begin
MIDIPROPTEMPO(GetRecordPtr^).dwTempo := val;
end;
function __MIDIPROPTEMPO__Wrapper.getdwTempo : DWORD;
begin
result := MIDIPROPTEMPO(GetRecordPtr^).dwTempo;
end;
function __midiproptempo_tag__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __midiproptempo_tag__Wrapper.setcbStruct(const val : DWORD);
begin
midiproptempo_tag(GetRecordPtr^).cbStruct := val;
end;
function __midiproptempo_tag__Wrapper.getcbStruct : DWORD;
begin
result := midiproptempo_tag(GetRecordPtr^).cbStruct;
end;
procedure __midiproptempo_tag__Wrapper.setdwTempo(const val : DWORD);
begin
midiproptempo_tag(GetRecordPtr^).dwTempo := val;
end;
function __midiproptempo_tag__Wrapper.getdwTempo : DWORD;
begin
result := midiproptempo_tag(GetRecordPtr^).dwTempo;
end;
function __MIDIPROPTIMEDIV__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MIDIPROPTIMEDIV__Wrapper.setcbStruct(const val : DWORD);
begin
MIDIPROPTIMEDIV(GetRecordPtr^).cbStruct := val;
end;
function __MIDIPROPTIMEDIV__Wrapper.getcbStruct : DWORD;
begin
result := MIDIPROPTIMEDIV(GetRecordPtr^).cbStruct;
end;
procedure __MIDIPROPTIMEDIV__Wrapper.setdwTimeDiv(const val : DWORD);
begin
MIDIPROPTIMEDIV(GetRecordPtr^).dwTimeDiv := val;
end;
function __MIDIPROPTIMEDIV__Wrapper.getdwTimeDiv : DWORD;
begin
result := MIDIPROPTIMEDIV(GetRecordPtr^).dwTimeDiv;
end;
function __midiproptimediv_tag__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __midiproptimediv_tag__Wrapper.setcbStruct(const val : DWORD);
begin
midiproptimediv_tag(GetRecordPtr^).cbStruct := val;
end;
function __midiproptimediv_tag__Wrapper.getcbStruct : DWORD;
begin
result := midiproptimediv_tag(GetRecordPtr^).cbStruct;
end;
procedure __midiproptimediv_tag__Wrapper.setdwTimeDiv(const val : DWORD);
begin
midiproptimediv_tag(GetRecordPtr^).dwTimeDiv := val;
end;
function __midiproptimediv_tag__Wrapper.getdwTimeDiv : DWORD;
begin
result := midiproptimediv_tag(GetRecordPtr^).dwTimeDiv;
end;
function __MIDISTRMBUFFVER__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MIDISTRMBUFFVER__Wrapper.setdwVersion(const val : DWORD);
begin
MIDISTRMBUFFVER(GetRecordPtr^).dwVersion := val;
end;
function __MIDISTRMBUFFVER__Wrapper.getdwVersion : DWORD;
begin
result := MIDISTRMBUFFVER(GetRecordPtr^).dwVersion;
end;
procedure __MIDISTRMBUFFVER__Wrapper.setdwMid(const val : DWORD);
begin
MIDISTRMBUFFVER(GetRecordPtr^).dwMid := val;
end;
function __MIDISTRMBUFFVER__Wrapper.getdwMid : DWORD;
begin
result := MIDISTRMBUFFVER(GetRecordPtr^).dwMid;
end;
procedure __MIDISTRMBUFFVER__Wrapper.setdwOEMVersion(const val : DWORD);
begin
MIDISTRMBUFFVER(GetRecordPtr^).dwOEMVersion := val;
end;
function __MIDISTRMBUFFVER__Wrapper.getdwOEMVersion : DWORD;
begin
result := MIDISTRMBUFFVER(GetRecordPtr^).dwOEMVersion;
end;
function __midistrmbuffver_tag__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __midistrmbuffver_tag__Wrapper.setdwVersion(const val : DWORD);
begin
midistrmbuffver_tag(GetRecordPtr^).dwVersion := val;
end;
function __midistrmbuffver_tag__Wrapper.getdwVersion : DWORD;
begin
result := midistrmbuffver_tag(GetRecordPtr^).dwVersion;
end;
procedure __midistrmbuffver_tag__Wrapper.setdwMid(const val : DWORD);
begin
midistrmbuffver_tag(GetRecordPtr^).dwMid := val;
end;
function __midistrmbuffver_tag__Wrapper.getdwMid : DWORD;
begin
result := midistrmbuffver_tag(GetRecordPtr^).dwMid;
end;
procedure __midistrmbuffver_tag__Wrapper.setdwOEMVersion(const val : DWORD);
begin
midistrmbuffver_tag(GetRecordPtr^).dwOEMVersion := val;
end;
function __midistrmbuffver_tag__Wrapper.getdwOEMVersion : DWORD;
begin
result := midistrmbuffver_tag(GetRecordPtr^).dwOEMVersion;
end;
function __MIXERCAPS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MIXERCAPS__Wrapper.setwMid(const val : Word);
begin
MIXERCAPS(GetRecordPtr^).wMid := val;
end;
function __MIXERCAPS__Wrapper.getwMid : Word;
begin
result := MIXERCAPS(GetRecordPtr^).wMid;
end;
procedure __MIXERCAPS__Wrapper.setwPid(const val : Word);
begin
MIXERCAPS(GetRecordPtr^).wPid := val;
end;
function __MIXERCAPS__Wrapper.getwPid : Word;
begin
result := MIXERCAPS(GetRecordPtr^).wPid;
end;
procedure __MIXERCAPS__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
MIXERCAPS(GetRecordPtr^).vDriverVersion := val;
end;
function __MIXERCAPS__Wrapper.getvDriverVersion : MMVERSION;
begin
result := MIXERCAPS(GetRecordPtr^).vDriverVersion;
end;
procedure __MIXERCAPS__Wrapper.setfdwSupport(const val : DWORD);
begin
MIXERCAPS(GetRecordPtr^).fdwSupport := val;
end;
function __MIXERCAPS__Wrapper.getfdwSupport : DWORD;
begin
result := MIXERCAPS(GetRecordPtr^).fdwSupport;
end;
procedure __MIXERCAPS__Wrapper.setcDestinations(const val : DWORD);
begin
MIXERCAPS(GetRecordPtr^).cDestinations := val;
end;
function __MIXERCAPS__Wrapper.getcDestinations : DWORD;
begin
result := MIXERCAPS(GetRecordPtr^).cDestinations;
end;
function __MIXERCAPSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MIXERCAPSA__Wrapper.setwMid(const val : Word);
begin
MIXERCAPSA(GetRecordPtr^).wMid := val;
end;
function __MIXERCAPSA__Wrapper.getwMid : Word;
begin
result := MIXERCAPSA(GetRecordPtr^).wMid;
end;
procedure __MIXERCAPSA__Wrapper.setwPid(const val : Word);
begin
MIXERCAPSA(GetRecordPtr^).wPid := val;
end;
function __MIXERCAPSA__Wrapper.getwPid : Word;
begin
result := MIXERCAPSA(GetRecordPtr^).wPid;
end;
procedure __MIXERCAPSA__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
MIXERCAPSA(GetRecordPtr^).vDriverVersion := val;
end;
function __MIXERCAPSA__Wrapper.getvDriverVersion : MMVERSION;
begin
result := MIXERCAPSA(GetRecordPtr^).vDriverVersion;
end;
procedure __MIXERCAPSA__Wrapper.setfdwSupport(const val : DWORD);
begin
MIXERCAPSA(GetRecordPtr^).fdwSupport := val;
end;
function __MIXERCAPSA__Wrapper.getfdwSupport : DWORD;
begin
result := MIXERCAPSA(GetRecordPtr^).fdwSupport;
end;
procedure __MIXERCAPSA__Wrapper.setcDestinations(const val : DWORD);
begin
MIXERCAPSA(GetRecordPtr^).cDestinations := val;
end;
function __MIXERCAPSA__Wrapper.getcDestinations : DWORD;
begin
result := MIXERCAPSA(GetRecordPtr^).cDestinations;
end;
function __MIXERCAPSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MIXERCAPSW__Wrapper.setwMid(const val : Word);
begin
MIXERCAPSW(GetRecordPtr^).wMid := val;
end;
function __MIXERCAPSW__Wrapper.getwMid : Word;
begin
result := MIXERCAPSW(GetRecordPtr^).wMid;
end;
procedure __MIXERCAPSW__Wrapper.setwPid(const val : Word);
begin
MIXERCAPSW(GetRecordPtr^).wPid := val;
end;
function __MIXERCAPSW__Wrapper.getwPid : Word;
begin
result := MIXERCAPSW(GetRecordPtr^).wPid;
end;
procedure __MIXERCAPSW__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
MIXERCAPSW(GetRecordPtr^).vDriverVersion := val;
end;
function __MIXERCAPSW__Wrapper.getvDriverVersion : MMVERSION;
begin
result := MIXERCAPSW(GetRecordPtr^).vDriverVersion;
end;
procedure __MIXERCAPSW__Wrapper.setfdwSupport(const val : DWORD);
begin
MIXERCAPSW(GetRecordPtr^).fdwSupport := val;
end;
function __MIXERCAPSW__Wrapper.getfdwSupport : DWORD;
begin
result := MIXERCAPSW(GetRecordPtr^).fdwSupport;
end;
procedure __MIXERCAPSW__Wrapper.setcDestinations(const val : DWORD);
begin
MIXERCAPSW(GetRecordPtr^).cDestinations := val;
end;
function __MIXERCAPSW__Wrapper.getcDestinations : DWORD;
begin
result := MIXERCAPSW(GetRecordPtr^).cDestinations;
end;
function __MIXERCONTROLDETAILS_BOOLEAN__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MIXERCONTROLDETAILS_BOOLEAN__Wrapper.setfValue(const val : Longint);
begin
MIXERCONTROLDETAILS_BOOLEAN(GetRecordPtr^).fValue := val;
end;
function __MIXERCONTROLDETAILS_BOOLEAN__Wrapper.getfValue : Longint;
begin
result := MIXERCONTROLDETAILS_BOOLEAN(GetRecordPtr^).fValue;
end;
function __MIXERCONTROLDETAILS_LISTTEXT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MIXERCONTROLDETAILS_LISTTEXT__Wrapper.setdwParam1(const val : DWORD);
begin
MIXERCONTROLDETAILS_LISTTEXT(GetRecordPtr^).dwParam1 := val;
end;
function __MIXERCONTROLDETAILS_LISTTEXT__Wrapper.getdwParam1 : DWORD;
begin
result := MIXERCONTROLDETAILS_LISTTEXT(GetRecordPtr^).dwParam1;
end;
procedure __MIXERCONTROLDETAILS_LISTTEXT__Wrapper.setdwParam2(const val : DWORD);
begin
MIXERCONTROLDETAILS_LISTTEXT(GetRecordPtr^).dwParam2 := val;
end;
function __MIXERCONTROLDETAILS_LISTTEXT__Wrapper.getdwParam2 : DWORD;
begin
result := MIXERCONTROLDETAILS_LISTTEXT(GetRecordPtr^).dwParam2;
end;
function __MIXERCONTROLDETAILS_LISTTEXTA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MIXERCONTROLDETAILS_LISTTEXTA__Wrapper.setdwParam1(const val : DWORD);
begin
MIXERCONTROLDETAILS_LISTTEXTA(GetRecordPtr^).dwParam1 := val;
end;
function __MIXERCONTROLDETAILS_LISTTEXTA__Wrapper.getdwParam1 : DWORD;
begin
result := MIXERCONTROLDETAILS_LISTTEXTA(GetRecordPtr^).dwParam1;
end;
procedure __MIXERCONTROLDETAILS_LISTTEXTA__Wrapper.setdwParam2(const val : DWORD);
begin
MIXERCONTROLDETAILS_LISTTEXTA(GetRecordPtr^).dwParam2 := val;
end;
function __MIXERCONTROLDETAILS_LISTTEXTA__Wrapper.getdwParam2 : DWORD;
begin
result := MIXERCONTROLDETAILS_LISTTEXTA(GetRecordPtr^).dwParam2;
end;
function __MIXERCONTROLDETAILS_LISTTEXTW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MIXERCONTROLDETAILS_LISTTEXTW__Wrapper.setdwParam1(const val : DWORD);
begin
MIXERCONTROLDETAILS_LISTTEXTW(GetRecordPtr^).dwParam1 := val;
end;
function __MIXERCONTROLDETAILS_LISTTEXTW__Wrapper.getdwParam1 : DWORD;
begin
result := MIXERCONTROLDETAILS_LISTTEXTW(GetRecordPtr^).dwParam1;
end;
procedure __MIXERCONTROLDETAILS_LISTTEXTW__Wrapper.setdwParam2(const val : DWORD);
begin
MIXERCONTROLDETAILS_LISTTEXTW(GetRecordPtr^).dwParam2 := val;
end;
function __MIXERCONTROLDETAILS_LISTTEXTW__Wrapper.getdwParam2 : DWORD;
begin
result := MIXERCONTROLDETAILS_LISTTEXTW(GetRecordPtr^).dwParam2;
end;
function __MIXERCONTROLDETAILS_SIGNED__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MIXERCONTROLDETAILS_SIGNED__Wrapper.setlValue(const val : Longint);
begin
MIXERCONTROLDETAILS_SIGNED(GetRecordPtr^).lValue := val;
end;
function __MIXERCONTROLDETAILS_SIGNED__Wrapper.getlValue : Longint;
begin
result := MIXERCONTROLDETAILS_SIGNED(GetRecordPtr^).lValue;
end;
function __MIXERCONTROLDETAILS_UNSIGNED__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MIXERCONTROLDETAILS_UNSIGNED__Wrapper.setdwValue(const val : DWORD);
begin
MIXERCONTROLDETAILS_UNSIGNED(GetRecordPtr^).dwValue := val;
end;
function __MIXERCONTROLDETAILS_UNSIGNED__Wrapper.getdwValue : DWORD;
begin
result := MIXERCONTROLDETAILS_UNSIGNED(GetRecordPtr^).dwValue;
end;
function __MIXERLINE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MIXERLINE__Wrapper.setcbStruct(const val : DWORD);
begin
MIXERLINE(GetRecordPtr^).cbStruct := val;
end;
function __MIXERLINE__Wrapper.getcbStruct : DWORD;
begin
result := MIXERLINE(GetRecordPtr^).cbStruct;
end;
procedure __MIXERLINE__Wrapper.setdwDestination(const val : DWORD);
begin
MIXERLINE(GetRecordPtr^).dwDestination := val;
end;
function __MIXERLINE__Wrapper.getdwDestination : DWORD;
begin
result := MIXERLINE(GetRecordPtr^).dwDestination;
end;
procedure __MIXERLINE__Wrapper.setdwSource(const val : DWORD);
begin
MIXERLINE(GetRecordPtr^).dwSource := val;
end;
function __MIXERLINE__Wrapper.getdwSource : DWORD;
begin
result := MIXERLINE(GetRecordPtr^).dwSource;
end;
procedure __MIXERLINE__Wrapper.setdwLineID(const val : DWORD);
begin
MIXERLINE(GetRecordPtr^).dwLineID := val;
end;
function __MIXERLINE__Wrapper.getdwLineID : DWORD;
begin
result := MIXERLINE(GetRecordPtr^).dwLineID;
end;
procedure __MIXERLINE__Wrapper.setfdwLine(const val : DWORD);
begin
MIXERLINE(GetRecordPtr^).fdwLine := val;
end;
function __MIXERLINE__Wrapper.getfdwLine : DWORD;
begin
result := MIXERLINE(GetRecordPtr^).fdwLine;
end;
procedure __MIXERLINE__Wrapper.setdwUser(const val : DWORD);
begin
MIXERLINE(GetRecordPtr^).dwUser := val;
end;
function __MIXERLINE__Wrapper.getdwUser : DWORD;
begin
result := MIXERLINE(GetRecordPtr^).dwUser;
end;
procedure __MIXERLINE__Wrapper.setdwComponentType(const val : DWORD);
begin
MIXERLINE(GetRecordPtr^).dwComponentType := val;
end;
function __MIXERLINE__Wrapper.getdwComponentType : DWORD;
begin
result := MIXERLINE(GetRecordPtr^).dwComponentType;
end;
procedure __MIXERLINE__Wrapper.setcChannels(const val : DWORD);
begin
MIXERLINE(GetRecordPtr^).cChannels := val;
end;
function __MIXERLINE__Wrapper.getcChannels : DWORD;
begin
result := MIXERLINE(GetRecordPtr^).cChannels;
end;
procedure __MIXERLINE__Wrapper.setcConnections(const val : DWORD);
begin
MIXERLINE(GetRecordPtr^).cConnections := val;
end;
function __MIXERLINE__Wrapper.getcConnections : DWORD;
begin
result := MIXERLINE(GetRecordPtr^).cConnections;
end;
procedure __MIXERLINE__Wrapper.setcControls(const val : DWORD);
begin
MIXERLINE(GetRecordPtr^).cControls := val;
end;
function __MIXERLINE__Wrapper.getcControls : DWORD;
begin
result := MIXERLINE(GetRecordPtr^).cControls;
end;
function __MIXERLINEA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MIXERLINEA__Wrapper.setcbStruct(const val : DWORD);
begin
MIXERLINEA(GetRecordPtr^).cbStruct := val;
end;
function __MIXERLINEA__Wrapper.getcbStruct : DWORD;
begin
result := MIXERLINEA(GetRecordPtr^).cbStruct;
end;
procedure __MIXERLINEA__Wrapper.setdwDestination(const val : DWORD);
begin
MIXERLINEA(GetRecordPtr^).dwDestination := val;
end;
function __MIXERLINEA__Wrapper.getdwDestination : DWORD;
begin
result := MIXERLINEA(GetRecordPtr^).dwDestination;
end;
procedure __MIXERLINEA__Wrapper.setdwSource(const val : DWORD);
begin
MIXERLINEA(GetRecordPtr^).dwSource := val;
end;
function __MIXERLINEA__Wrapper.getdwSource : DWORD;
begin
result := MIXERLINEA(GetRecordPtr^).dwSource;
end;
procedure __MIXERLINEA__Wrapper.setdwLineID(const val : DWORD);
begin
MIXERLINEA(GetRecordPtr^).dwLineID := val;
end;
function __MIXERLINEA__Wrapper.getdwLineID : DWORD;
begin
result := MIXERLINEA(GetRecordPtr^).dwLineID;
end;
procedure __MIXERLINEA__Wrapper.setfdwLine(const val : DWORD);
begin
MIXERLINEA(GetRecordPtr^).fdwLine := val;
end;
function __MIXERLINEA__Wrapper.getfdwLine : DWORD;
begin
result := MIXERLINEA(GetRecordPtr^).fdwLine;
end;
procedure __MIXERLINEA__Wrapper.setdwUser(const val : DWORD);
begin
MIXERLINEA(GetRecordPtr^).dwUser := val;
end;
function __MIXERLINEA__Wrapper.getdwUser : DWORD;
begin
result := MIXERLINEA(GetRecordPtr^).dwUser;
end;
procedure __MIXERLINEA__Wrapper.setdwComponentType(const val : DWORD);
begin
MIXERLINEA(GetRecordPtr^).dwComponentType := val;
end;
function __MIXERLINEA__Wrapper.getdwComponentType : DWORD;
begin
result := MIXERLINEA(GetRecordPtr^).dwComponentType;
end;
procedure __MIXERLINEA__Wrapper.setcChannels(const val : DWORD);
begin
MIXERLINEA(GetRecordPtr^).cChannels := val;
end;
function __MIXERLINEA__Wrapper.getcChannels : DWORD;
begin
result := MIXERLINEA(GetRecordPtr^).cChannels;
end;
procedure __MIXERLINEA__Wrapper.setcConnections(const val : DWORD);
begin
MIXERLINEA(GetRecordPtr^).cConnections := val;
end;
function __MIXERLINEA__Wrapper.getcConnections : DWORD;
begin
result := MIXERLINEA(GetRecordPtr^).cConnections;
end;
procedure __MIXERLINEA__Wrapper.setcControls(const val : DWORD);
begin
MIXERLINEA(GetRecordPtr^).cControls := val;
end;
function __MIXERLINEA__Wrapper.getcControls : DWORD;
begin
result := MIXERLINEA(GetRecordPtr^).cControls;
end;
function __MIXERLINECONTROLS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MIXERLINECONTROLS__Wrapper.setcbStruct(const val : DWORD);
begin
MIXERLINECONTROLS(GetRecordPtr^).cbStruct := val;
end;
function __MIXERLINECONTROLS__Wrapper.getcbStruct : DWORD;
begin
result := MIXERLINECONTROLS(GetRecordPtr^).cbStruct;
end;
procedure __MIXERLINECONTROLS__Wrapper.setdwLineID(const val : DWORD);
begin
MIXERLINECONTROLS(GetRecordPtr^).dwLineID := val;
end;
function __MIXERLINECONTROLS__Wrapper.getdwLineID : DWORD;
begin
result := MIXERLINECONTROLS(GetRecordPtr^).dwLineID;
end;
procedure __MIXERLINECONTROLS__Wrapper.setdwControlID(const val : DWORD);
begin
MIXERLINECONTROLS(GetRecordPtr^).dwControlID := val;
end;
function __MIXERLINECONTROLS__Wrapper.getdwControlID : DWORD;
begin
result := MIXERLINECONTROLS(GetRecordPtr^).dwControlID;
end;
procedure __MIXERLINECONTROLS__Wrapper.setdwControlType(const val : DWORD);
begin
MIXERLINECONTROLS(GetRecordPtr^).dwControlType := val;
end;
function __MIXERLINECONTROLS__Wrapper.getdwControlType : DWORD;
begin
result := MIXERLINECONTROLS(GetRecordPtr^).dwControlType;
end;
procedure __MIXERLINECONTROLS__Wrapper.setcControls(const val : DWORD);
begin
MIXERLINECONTROLS(GetRecordPtr^).cControls := val;
end;
function __MIXERLINECONTROLS__Wrapper.getcControls : DWORD;
begin
result := MIXERLINECONTROLS(GetRecordPtr^).cControls;
end;
procedure __MIXERLINECONTROLS__Wrapper.setcbmxctrl(const val : DWORD);
begin
MIXERLINECONTROLS(GetRecordPtr^).cbmxctrl := val;
end;
function __MIXERLINECONTROLS__Wrapper.getcbmxctrl : DWORD;
begin
result := MIXERLINECONTROLS(GetRecordPtr^).cbmxctrl;
end;
function __MIXERLINECONTROLSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MIXERLINECONTROLSA__Wrapper.setcbStruct(const val : DWORD);
begin
MIXERLINECONTROLSA(GetRecordPtr^).cbStruct := val;
end;
function __MIXERLINECONTROLSA__Wrapper.getcbStruct : DWORD;
begin
result := MIXERLINECONTROLSA(GetRecordPtr^).cbStruct;
end;
procedure __MIXERLINECONTROLSA__Wrapper.setdwLineID(const val : DWORD);
begin
MIXERLINECONTROLSA(GetRecordPtr^).dwLineID := val;
end;
function __MIXERLINECONTROLSA__Wrapper.getdwLineID : DWORD;
begin
result := MIXERLINECONTROLSA(GetRecordPtr^).dwLineID;
end;
procedure __MIXERLINECONTROLSA__Wrapper.setdwControlID(const val : DWORD);
begin
MIXERLINECONTROLSA(GetRecordPtr^).dwControlID := val;
end;
function __MIXERLINECONTROLSA__Wrapper.getdwControlID : DWORD;
begin
result := MIXERLINECONTROLSA(GetRecordPtr^).dwControlID;
end;
procedure __MIXERLINECONTROLSA__Wrapper.setdwControlType(const val : DWORD);
begin
MIXERLINECONTROLSA(GetRecordPtr^).dwControlType := val;
end;
function __MIXERLINECONTROLSA__Wrapper.getdwControlType : DWORD;
begin
result := MIXERLINECONTROLSA(GetRecordPtr^).dwControlType;
end;
procedure __MIXERLINECONTROLSA__Wrapper.setcControls(const val : DWORD);
begin
MIXERLINECONTROLSA(GetRecordPtr^).cControls := val;
end;
function __MIXERLINECONTROLSA__Wrapper.getcControls : DWORD;
begin
result := MIXERLINECONTROLSA(GetRecordPtr^).cControls;
end;
procedure __MIXERLINECONTROLSA__Wrapper.setcbmxctrl(const val : DWORD);
begin
MIXERLINECONTROLSA(GetRecordPtr^).cbmxctrl := val;
end;
function __MIXERLINECONTROLSA__Wrapper.getcbmxctrl : DWORD;
begin
result := MIXERLINECONTROLSA(GetRecordPtr^).cbmxctrl;
end;
function __MIXERLINECONTROLSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MIXERLINECONTROLSW__Wrapper.setcbStruct(const val : DWORD);
begin
MIXERLINECONTROLSW(GetRecordPtr^).cbStruct := val;
end;
function __MIXERLINECONTROLSW__Wrapper.getcbStruct : DWORD;
begin
result := MIXERLINECONTROLSW(GetRecordPtr^).cbStruct;
end;
procedure __MIXERLINECONTROLSW__Wrapper.setdwLineID(const val : DWORD);
begin
MIXERLINECONTROLSW(GetRecordPtr^).dwLineID := val;
end;
function __MIXERLINECONTROLSW__Wrapper.getdwLineID : DWORD;
begin
result := MIXERLINECONTROLSW(GetRecordPtr^).dwLineID;
end;
procedure __MIXERLINECONTROLSW__Wrapper.setdwControlID(const val : DWORD);
begin
MIXERLINECONTROLSW(GetRecordPtr^).dwControlID := val;
end;
function __MIXERLINECONTROLSW__Wrapper.getdwControlID : DWORD;
begin
result := MIXERLINECONTROLSW(GetRecordPtr^).dwControlID;
end;
procedure __MIXERLINECONTROLSW__Wrapper.setdwControlType(const val : DWORD);
begin
MIXERLINECONTROLSW(GetRecordPtr^).dwControlType := val;
end;
function __MIXERLINECONTROLSW__Wrapper.getdwControlType : DWORD;
begin
result := MIXERLINECONTROLSW(GetRecordPtr^).dwControlType;
end;
procedure __MIXERLINECONTROLSW__Wrapper.setcControls(const val : DWORD);
begin
MIXERLINECONTROLSW(GetRecordPtr^).cControls := val;
end;
function __MIXERLINECONTROLSW__Wrapper.getcControls : DWORD;
begin
result := MIXERLINECONTROLSW(GetRecordPtr^).cControls;
end;
procedure __MIXERLINECONTROLSW__Wrapper.setcbmxctrl(const val : DWORD);
begin
MIXERLINECONTROLSW(GetRecordPtr^).cbmxctrl := val;
end;
function __MIXERLINECONTROLSW__Wrapper.getcbmxctrl : DWORD;
begin
result := MIXERLINECONTROLSW(GetRecordPtr^).cbmxctrl;
end;
function __MIXERLINEW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MIXERLINEW__Wrapper.setcbStruct(const val : DWORD);
begin
MIXERLINEW(GetRecordPtr^).cbStruct := val;
end;
function __MIXERLINEW__Wrapper.getcbStruct : DWORD;
begin
result := MIXERLINEW(GetRecordPtr^).cbStruct;
end;
procedure __MIXERLINEW__Wrapper.setdwDestination(const val : DWORD);
begin
MIXERLINEW(GetRecordPtr^).dwDestination := val;
end;
function __MIXERLINEW__Wrapper.getdwDestination : DWORD;
begin
result := MIXERLINEW(GetRecordPtr^).dwDestination;
end;
procedure __MIXERLINEW__Wrapper.setdwSource(const val : DWORD);
begin
MIXERLINEW(GetRecordPtr^).dwSource := val;
end;
function __MIXERLINEW__Wrapper.getdwSource : DWORD;
begin
result := MIXERLINEW(GetRecordPtr^).dwSource;
end;
procedure __MIXERLINEW__Wrapper.setdwLineID(const val : DWORD);
begin
MIXERLINEW(GetRecordPtr^).dwLineID := val;
end;
function __MIXERLINEW__Wrapper.getdwLineID : DWORD;
begin
result := MIXERLINEW(GetRecordPtr^).dwLineID;
end;
procedure __MIXERLINEW__Wrapper.setfdwLine(const val : DWORD);
begin
MIXERLINEW(GetRecordPtr^).fdwLine := val;
end;
function __MIXERLINEW__Wrapper.getfdwLine : DWORD;
begin
result := MIXERLINEW(GetRecordPtr^).fdwLine;
end;
procedure __MIXERLINEW__Wrapper.setdwUser(const val : DWORD);
begin
MIXERLINEW(GetRecordPtr^).dwUser := val;
end;
function __MIXERLINEW__Wrapper.getdwUser : DWORD;
begin
result := MIXERLINEW(GetRecordPtr^).dwUser;
end;
procedure __MIXERLINEW__Wrapper.setdwComponentType(const val : DWORD);
begin
MIXERLINEW(GetRecordPtr^).dwComponentType := val;
end;
function __MIXERLINEW__Wrapper.getdwComponentType : DWORD;
begin
result := MIXERLINEW(GetRecordPtr^).dwComponentType;
end;
procedure __MIXERLINEW__Wrapper.setcChannels(const val : DWORD);
begin
MIXERLINEW(GetRecordPtr^).cChannels := val;
end;
function __MIXERLINEW__Wrapper.getcChannels : DWORD;
begin
result := MIXERLINEW(GetRecordPtr^).cChannels;
end;
procedure __MIXERLINEW__Wrapper.setcConnections(const val : DWORD);
begin
MIXERLINEW(GetRecordPtr^).cConnections := val;
end;
function __MIXERLINEW__Wrapper.getcConnections : DWORD;
begin
result := MIXERLINEW(GetRecordPtr^).cConnections;
end;
procedure __MIXERLINEW__Wrapper.setcControls(const val : DWORD);
begin
MIXERLINEW(GetRecordPtr^).cControls := val;
end;
function __MIXERLINEW__Wrapper.getcControls : DWORD;
begin
result := MIXERLINEW(GetRecordPtr^).cControls;
end;
function __MMCKINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MMCKINFO__Wrapper.setckid(const val : FOURCC);
begin
MMCKINFO(GetRecordPtr^).ckid := val;
end;
function __MMCKINFO__Wrapper.getckid : FOURCC;
begin
result := MMCKINFO(GetRecordPtr^).ckid;
end;
procedure __MMCKINFO__Wrapper.setcksize(const val : DWORD);
begin
MMCKINFO(GetRecordPtr^).cksize := val;
end;
function __MMCKINFO__Wrapper.getcksize : DWORD;
begin
result := MMCKINFO(GetRecordPtr^).cksize;
end;
procedure __MMCKINFO__Wrapper.setfccType(const val : FOURCC);
begin
MMCKINFO(GetRecordPtr^).fccType := val;
end;
function __MMCKINFO__Wrapper.getfccType : FOURCC;
begin
result := MMCKINFO(GetRecordPtr^).fccType;
end;
procedure __MMCKINFO__Wrapper.setdwDataOffset(const val : DWORD);
begin
MMCKINFO(GetRecordPtr^).dwDataOffset := val;
end;
function __MMCKINFO__Wrapper.getdwDataOffset : DWORD;
begin
result := MMCKINFO(GetRecordPtr^).dwDataOffset;
end;
procedure __MMCKINFO__Wrapper.setdwFlags(const val : DWORD);
begin
MMCKINFO(GetRecordPtr^).dwFlags := val;
end;
function __MMCKINFO__Wrapper.getdwFlags : DWORD;
begin
result := MMCKINFO(GetRecordPtr^).dwFlags;
end;
function __MMIOINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MMIOINFO__Wrapper.setdwFlags(const val : DWORD);
begin
MMIOINFO(GetRecordPtr^).dwFlags := val;
end;
function __MMIOINFO__Wrapper.getdwFlags : DWORD;
begin
result := MMIOINFO(GetRecordPtr^).dwFlags;
end;
procedure __MMIOINFO__Wrapper.setfccIOProc(const val : FOURCC);
begin
MMIOINFO(GetRecordPtr^).fccIOProc := val;
end;
function __MMIOINFO__Wrapper.getfccIOProc : FOURCC;
begin
result := MMIOINFO(GetRecordPtr^).fccIOProc;
end;
procedure __MMIOINFO__Wrapper.setwErrorRet(const val : UINT);
begin
MMIOINFO(GetRecordPtr^).wErrorRet := val;
end;
function __MMIOINFO__Wrapper.getwErrorRet : UINT;
begin
result := MMIOINFO(GetRecordPtr^).wErrorRet;
end;
procedure __MMIOINFO__Wrapper.setcchBuffer(const val : Longint);
begin
MMIOINFO(GetRecordPtr^).cchBuffer := val;
end;
function __MMIOINFO__Wrapper.getcchBuffer : Longint;
begin
result := MMIOINFO(GetRecordPtr^).cchBuffer;
end;
procedure __MMIOINFO__Wrapper.setlBufOffset(const val : Longint);
begin
MMIOINFO(GetRecordPtr^).lBufOffset := val;
end;
function __MMIOINFO__Wrapper.getlBufOffset : Longint;
begin
result := MMIOINFO(GetRecordPtr^).lBufOffset;
end;
procedure __MMIOINFO__Wrapper.setlDiskOffset(const val : Longint);
begin
MMIOINFO(GetRecordPtr^).lDiskOffset := val;
end;
function __MMIOINFO__Wrapper.getlDiskOffset : Longint;
begin
result := MMIOINFO(GetRecordPtr^).lDiskOffset;
end;
procedure __MMIOINFO__Wrapper.setdwReserved1(const val : DWORD);
begin
MMIOINFO(GetRecordPtr^).dwReserved1 := val;
end;
function __MMIOINFO__Wrapper.getdwReserved1 : DWORD;
begin
result := MMIOINFO(GetRecordPtr^).dwReserved1;
end;
procedure __MMIOINFO__Wrapper.setdwReserved2(const val : DWORD);
begin
MMIOINFO(GetRecordPtr^).dwReserved2 := val;
end;
function __MMIOINFO__Wrapper.getdwReserved2 : DWORD;
begin
result := MMIOINFO(GetRecordPtr^).dwReserved2;
end;
procedure __MMIOINFO__Wrapper.setHMMIO(const val : HMMIO);
begin
MMIOINFO(GetRecordPtr^).HMMIO := val;
end;
function __MMIOINFO__Wrapper.getHMMIO : HMMIO;
begin
result := MMIOINFO(GetRecordPtr^).HMMIO;
end;
function __MMTIME__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MMTIME__Wrapper.setms(const val : DWORD);
begin
MMTIME(GetRecordPtr^).ms := val;
end;
function __MMTIME__Wrapper.getms : DWORD;
begin
result := MMTIME(GetRecordPtr^).ms;
end;
procedure __MMTIME__Wrapper.setsample(const val : DWORD);
begin
MMTIME(GetRecordPtr^).sample := val;
end;
function __MMTIME__Wrapper.getsample : DWORD;
begin
result := MMTIME(GetRecordPtr^).sample;
end;
procedure __MMTIME__Wrapper.setcb(const val : DWORD);
begin
MMTIME(GetRecordPtr^).cb := val;
end;
function __MMTIME__Wrapper.getcb : DWORD;
begin
result := MMTIME(GetRecordPtr^).cb;
end;
procedure __MMTIME__Wrapper.setticks(const val : DWORD);
begin
MMTIME(GetRecordPtr^).ticks := val;
end;
function __MMTIME__Wrapper.getticks : DWORD;
begin
result := MMTIME(GetRecordPtr^).ticks;
end;
procedure __MMTIME__Wrapper.sethour(const val : Byte);
begin
MMTIME(GetRecordPtr^).hour := val;
end;
function __MMTIME__Wrapper.gethour : Byte;
begin
result := MMTIME(GetRecordPtr^).hour;
end;
procedure __MMTIME__Wrapper.setmin(const val : Byte);
begin
MMTIME(GetRecordPtr^).min := val;
end;
function __MMTIME__Wrapper.getmin : Byte;
begin
result := MMTIME(GetRecordPtr^).min;
end;
procedure __MMTIME__Wrapper.setsec(const val : Byte);
begin
MMTIME(GetRecordPtr^).sec := val;
end;
function __MMTIME__Wrapper.getsec : Byte;
begin
result := MMTIME(GetRecordPtr^).sec;
end;
procedure __MMTIME__Wrapper.setframe(const val : Byte);
begin
MMTIME(GetRecordPtr^).frame := val;
end;
function __MMTIME__Wrapper.getframe : Byte;
begin
result := MMTIME(GetRecordPtr^).frame;
end;
procedure __MMTIME__Wrapper.setfps(const val : Byte);
begin
MMTIME(GetRecordPtr^).fps := val;
end;
function __MMTIME__Wrapper.getfps : Byte;
begin
result := MMTIME(GetRecordPtr^).fps;
end;
procedure __MMTIME__Wrapper.setdummy(const val : Byte);
begin
MMTIME(GetRecordPtr^).dummy := val;
end;
function __MMTIME__Wrapper.getdummy : Byte;
begin
result := MMTIME(GetRecordPtr^).dummy;
end;
procedure __MMTIME__Wrapper.setsongptrpos(const val : DWORD);
begin
MMTIME(GetRecordPtr^).songptrpos := val;
end;
function __MMTIME__Wrapper.getsongptrpos : DWORD;
begin
result := MMTIME(GetRecordPtr^).songptrpos;
end;
function __mmtime_tag__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __mmtime_tag__Wrapper.setms(const val : DWORD);
begin
mmtime_tag(GetRecordPtr^).ms := val;
end;
function __mmtime_tag__Wrapper.getms : DWORD;
begin
result := mmtime_tag(GetRecordPtr^).ms;
end;
procedure __mmtime_tag__Wrapper.setsample(const val : DWORD);
begin
mmtime_tag(GetRecordPtr^).sample := val;
end;
function __mmtime_tag__Wrapper.getsample : DWORD;
begin
result := mmtime_tag(GetRecordPtr^).sample;
end;
procedure __mmtime_tag__Wrapper.setcb(const val : DWORD);
begin
mmtime_tag(GetRecordPtr^).cb := val;
end;
function __mmtime_tag__Wrapper.getcb : DWORD;
begin
result := mmtime_tag(GetRecordPtr^).cb;
end;
procedure __mmtime_tag__Wrapper.setticks(const val : DWORD);
begin
mmtime_tag(GetRecordPtr^).ticks := val;
end;
function __mmtime_tag__Wrapper.getticks : DWORD;
begin
result := mmtime_tag(GetRecordPtr^).ticks;
end;
procedure __mmtime_tag__Wrapper.sethour(const val : Byte);
begin
mmtime_tag(GetRecordPtr^).hour := val;
end;
function __mmtime_tag__Wrapper.gethour : Byte;
begin
result := mmtime_tag(GetRecordPtr^).hour;
end;
procedure __mmtime_tag__Wrapper.setmin(const val : Byte);
begin
mmtime_tag(GetRecordPtr^).min := val;
end;
function __mmtime_tag__Wrapper.getmin : Byte;
begin
result := mmtime_tag(GetRecordPtr^).min;
end;
procedure __mmtime_tag__Wrapper.setsec(const val : Byte);
begin
mmtime_tag(GetRecordPtr^).sec := val;
end;
function __mmtime_tag__Wrapper.getsec : Byte;
begin
result := mmtime_tag(GetRecordPtr^).sec;
end;
procedure __mmtime_tag__Wrapper.setframe(const val : Byte);
begin
mmtime_tag(GetRecordPtr^).frame := val;
end;
function __mmtime_tag__Wrapper.getframe : Byte;
begin
result := mmtime_tag(GetRecordPtr^).frame;
end;
procedure __mmtime_tag__Wrapper.setfps(const val : Byte);
begin
mmtime_tag(GetRecordPtr^).fps := val;
end;
function __mmtime_tag__Wrapper.getfps : Byte;
begin
result := mmtime_tag(GetRecordPtr^).fps;
end;
procedure __mmtime_tag__Wrapper.setdummy(const val : Byte);
begin
mmtime_tag(GetRecordPtr^).dummy := val;
end;
function __mmtime_tag__Wrapper.getdummy : Byte;
begin
result := mmtime_tag(GetRecordPtr^).dummy;
end;
procedure __mmtime_tag__Wrapper.setsongptrpos(const val : DWORD);
begin
mmtime_tag(GetRecordPtr^).songptrpos := val;
end;
function __mmtime_tag__Wrapper.getsongptrpos : DWORD;
begin
result := mmtime_tag(GetRecordPtr^).songptrpos;
end;
function __PCMWAVEFORMAT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __PCMWAVEFORMAT__Wrapper.setwBitsPerSample(const val : Word);
begin
PCMWAVEFORMAT(GetRecordPtr^).wBitsPerSample := val;
end;
function __PCMWAVEFORMAT__Wrapper.getwBitsPerSample : Word;
begin
result := PCMWAVEFORMAT(GetRecordPtr^).wBitsPerSample;
end;
function __pcmwaveformat_tag__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __pcmwaveformat_tag__Wrapper.setwBitsPerSample(const val : Word);
begin
pcmwaveformat_tag(GetRecordPtr^).wBitsPerSample := val;
end;
function __pcmwaveformat_tag__Wrapper.getwBitsPerSample : Word;
begin
result := pcmwaveformat_tag(GetRecordPtr^).wBitsPerSample;
end;
function __tagAUXCAPS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagAUXCAPS__Wrapper.setwMid(const val : Word);
begin
tagAUXCAPS(GetRecordPtr^).wMid := val;
end;
function __tagAUXCAPS__Wrapper.getwMid : Word;
begin
result := tagAUXCAPS(GetRecordPtr^).wMid;
end;
procedure __tagAUXCAPS__Wrapper.setwPid(const val : Word);
begin
tagAUXCAPS(GetRecordPtr^).wPid := val;
end;
function __tagAUXCAPS__Wrapper.getwPid : Word;
begin
result := tagAUXCAPS(GetRecordPtr^).wPid;
end;
procedure __tagAUXCAPS__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
tagAUXCAPS(GetRecordPtr^).vDriverVersion := val;
end;
function __tagAUXCAPS__Wrapper.getvDriverVersion : MMVERSION;
begin
result := tagAUXCAPS(GetRecordPtr^).vDriverVersion;
end;
procedure __tagAUXCAPS__Wrapper.setwTechnology(const val : Word);
begin
tagAUXCAPS(GetRecordPtr^).wTechnology := val;
end;
function __tagAUXCAPS__Wrapper.getwTechnology : Word;
begin
result := tagAUXCAPS(GetRecordPtr^).wTechnology;
end;
procedure __tagAUXCAPS__Wrapper.setdwSupport(const val : DWORD);
begin
tagAUXCAPS(GetRecordPtr^).dwSupport := val;
end;
function __tagAUXCAPS__Wrapper.getdwSupport : DWORD;
begin
result := tagAUXCAPS(GetRecordPtr^).dwSupport;
end;
function __tagAUXCAPSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagAUXCAPSA__Wrapper.setwMid(const val : Word);
begin
tagAUXCAPSA(GetRecordPtr^).wMid := val;
end;
function __tagAUXCAPSA__Wrapper.getwMid : Word;
begin
result := tagAUXCAPSA(GetRecordPtr^).wMid;
end;
procedure __tagAUXCAPSA__Wrapper.setwPid(const val : Word);
begin
tagAUXCAPSA(GetRecordPtr^).wPid := val;
end;
function __tagAUXCAPSA__Wrapper.getwPid : Word;
begin
result := tagAUXCAPSA(GetRecordPtr^).wPid;
end;
procedure __tagAUXCAPSA__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
tagAUXCAPSA(GetRecordPtr^).vDriverVersion := val;
end;
function __tagAUXCAPSA__Wrapper.getvDriverVersion : MMVERSION;
begin
result := tagAUXCAPSA(GetRecordPtr^).vDriverVersion;
end;
procedure __tagAUXCAPSA__Wrapper.setwTechnology(const val : Word);
begin
tagAUXCAPSA(GetRecordPtr^).wTechnology := val;
end;
function __tagAUXCAPSA__Wrapper.getwTechnology : Word;
begin
result := tagAUXCAPSA(GetRecordPtr^).wTechnology;
end;
procedure __tagAUXCAPSA__Wrapper.setdwSupport(const val : DWORD);
begin
tagAUXCAPSA(GetRecordPtr^).dwSupport := val;
end;
function __tagAUXCAPSA__Wrapper.getdwSupport : DWORD;
begin
result := tagAUXCAPSA(GetRecordPtr^).dwSupport;
end;
function __tagAUXCAPSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagAUXCAPSW__Wrapper.setwMid(const val : Word);
begin
tagAUXCAPSW(GetRecordPtr^).wMid := val;
end;
function __tagAUXCAPSW__Wrapper.getwMid : Word;
begin
result := tagAUXCAPSW(GetRecordPtr^).wMid;
end;
procedure __tagAUXCAPSW__Wrapper.setwPid(const val : Word);
begin
tagAUXCAPSW(GetRecordPtr^).wPid := val;
end;
function __tagAUXCAPSW__Wrapper.getwPid : Word;
begin
result := tagAUXCAPSW(GetRecordPtr^).wPid;
end;
procedure __tagAUXCAPSW__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
tagAUXCAPSW(GetRecordPtr^).vDriverVersion := val;
end;
function __tagAUXCAPSW__Wrapper.getvDriverVersion : MMVERSION;
begin
result := tagAUXCAPSW(GetRecordPtr^).vDriverVersion;
end;
procedure __tagAUXCAPSW__Wrapper.setwTechnology(const val : Word);
begin
tagAUXCAPSW(GetRecordPtr^).wTechnology := val;
end;
function __tagAUXCAPSW__Wrapper.getwTechnology : Word;
begin
result := tagAUXCAPSW(GetRecordPtr^).wTechnology;
end;
procedure __tagAUXCAPSW__Wrapper.setdwSupport(const val : DWORD);
begin
tagAUXCAPSW(GetRecordPtr^).dwSupport := val;
end;
function __tagAUXCAPSW__Wrapper.getdwSupport : DWORD;
begin
result := tagAUXCAPSW(GetRecordPtr^).dwSupport;
end;
function __tagDRVCONFIGINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagDRVCONFIGINFO__Wrapper.setdwDCISize(const val : DWORD);
begin
tagDRVCONFIGINFO(GetRecordPtr^).dwDCISize := val;
end;
function __tagDRVCONFIGINFO__Wrapper.getdwDCISize : DWORD;
begin
result := tagDRVCONFIGINFO(GetRecordPtr^).dwDCISize;
end;
function __tagJOYCAPS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagJOYCAPS__Wrapper.setwMid(const val : Word);
begin
tagJOYCAPS(GetRecordPtr^).wMid := val;
end;
function __tagJOYCAPS__Wrapper.getwMid : Word;
begin
result := tagJOYCAPS(GetRecordPtr^).wMid;
end;
procedure __tagJOYCAPS__Wrapper.setwPid(const val : Word);
begin
tagJOYCAPS(GetRecordPtr^).wPid := val;
end;
function __tagJOYCAPS__Wrapper.getwPid : Word;
begin
result := tagJOYCAPS(GetRecordPtr^).wPid;
end;
procedure __tagJOYCAPS__Wrapper.setwXmin(const val : UINT);
begin
tagJOYCAPS(GetRecordPtr^).wXmin := val;
end;
function __tagJOYCAPS__Wrapper.getwXmin : UINT;
begin
result := tagJOYCAPS(GetRecordPtr^).wXmin;
end;
procedure __tagJOYCAPS__Wrapper.setwXmax(const val : UINT);
begin
tagJOYCAPS(GetRecordPtr^).wXmax := val;
end;
function __tagJOYCAPS__Wrapper.getwXmax : UINT;
begin
result := tagJOYCAPS(GetRecordPtr^).wXmax;
end;
procedure __tagJOYCAPS__Wrapper.setwYmin(const val : UINT);
begin
tagJOYCAPS(GetRecordPtr^).wYmin := val;
end;
function __tagJOYCAPS__Wrapper.getwYmin : UINT;
begin
result := tagJOYCAPS(GetRecordPtr^).wYmin;
end;
procedure __tagJOYCAPS__Wrapper.setwYmax(const val : UINT);
begin
tagJOYCAPS(GetRecordPtr^).wYmax := val;
end;
function __tagJOYCAPS__Wrapper.getwYmax : UINT;
begin
result := tagJOYCAPS(GetRecordPtr^).wYmax;
end;
procedure __tagJOYCAPS__Wrapper.setwZmin(const val : UINT);
begin
tagJOYCAPS(GetRecordPtr^).wZmin := val;
end;
function __tagJOYCAPS__Wrapper.getwZmin : UINT;
begin
result := tagJOYCAPS(GetRecordPtr^).wZmin;
end;
procedure __tagJOYCAPS__Wrapper.setwZmax(const val : UINT);
begin
tagJOYCAPS(GetRecordPtr^).wZmax := val;
end;
function __tagJOYCAPS__Wrapper.getwZmax : UINT;
begin
result := tagJOYCAPS(GetRecordPtr^).wZmax;
end;
procedure __tagJOYCAPS__Wrapper.setwNumButtons(const val : UINT);
begin
tagJOYCAPS(GetRecordPtr^).wNumButtons := val;
end;
function __tagJOYCAPS__Wrapper.getwNumButtons : UINT;
begin
result := tagJOYCAPS(GetRecordPtr^).wNumButtons;
end;
procedure __tagJOYCAPS__Wrapper.setwPeriodMin(const val : UINT);
begin
tagJOYCAPS(GetRecordPtr^).wPeriodMin := val;
end;
function __tagJOYCAPS__Wrapper.getwPeriodMin : UINT;
begin
result := tagJOYCAPS(GetRecordPtr^).wPeriodMin;
end;
procedure __tagJOYCAPS__Wrapper.setwPeriodMax(const val : UINT);
begin
tagJOYCAPS(GetRecordPtr^).wPeriodMax := val;
end;
function __tagJOYCAPS__Wrapper.getwPeriodMax : UINT;
begin
result := tagJOYCAPS(GetRecordPtr^).wPeriodMax;
end;
procedure __tagJOYCAPS__Wrapper.setwRmin(const val : UINT);
begin
tagJOYCAPS(GetRecordPtr^).wRmin := val;
end;
function __tagJOYCAPS__Wrapper.getwRmin : UINT;
begin
result := tagJOYCAPS(GetRecordPtr^).wRmin;
end;
procedure __tagJOYCAPS__Wrapper.setwRmax(const val : UINT);
begin
tagJOYCAPS(GetRecordPtr^).wRmax := val;
end;
function __tagJOYCAPS__Wrapper.getwRmax : UINT;
begin
result := tagJOYCAPS(GetRecordPtr^).wRmax;
end;
procedure __tagJOYCAPS__Wrapper.setwUmin(const val : UINT);
begin
tagJOYCAPS(GetRecordPtr^).wUmin := val;
end;
function __tagJOYCAPS__Wrapper.getwUmin : UINT;
begin
result := tagJOYCAPS(GetRecordPtr^).wUmin;
end;
procedure __tagJOYCAPS__Wrapper.setwUmax(const val : UINT);
begin
tagJOYCAPS(GetRecordPtr^).wUmax := val;
end;
function __tagJOYCAPS__Wrapper.getwUmax : UINT;
begin
result := tagJOYCAPS(GetRecordPtr^).wUmax;
end;
procedure __tagJOYCAPS__Wrapper.setwVmin(const val : UINT);
begin
tagJOYCAPS(GetRecordPtr^).wVmin := val;
end;
function __tagJOYCAPS__Wrapper.getwVmin : UINT;
begin
result := tagJOYCAPS(GetRecordPtr^).wVmin;
end;
procedure __tagJOYCAPS__Wrapper.setwVmax(const val : UINT);
begin
tagJOYCAPS(GetRecordPtr^).wVmax := val;
end;
function __tagJOYCAPS__Wrapper.getwVmax : UINT;
begin
result := tagJOYCAPS(GetRecordPtr^).wVmax;
end;
procedure __tagJOYCAPS__Wrapper.setwCaps(const val : UINT);
begin
tagJOYCAPS(GetRecordPtr^).wCaps := val;
end;
function __tagJOYCAPS__Wrapper.getwCaps : UINT;
begin
result := tagJOYCAPS(GetRecordPtr^).wCaps;
end;
procedure __tagJOYCAPS__Wrapper.setwMaxAxes(const val : UINT);
begin
tagJOYCAPS(GetRecordPtr^).wMaxAxes := val;
end;
function __tagJOYCAPS__Wrapper.getwMaxAxes : UINT;
begin
result := tagJOYCAPS(GetRecordPtr^).wMaxAxes;
end;
procedure __tagJOYCAPS__Wrapper.setwNumAxes(const val : UINT);
begin
tagJOYCAPS(GetRecordPtr^).wNumAxes := val;
end;
function __tagJOYCAPS__Wrapper.getwNumAxes : UINT;
begin
result := tagJOYCAPS(GetRecordPtr^).wNumAxes;
end;
procedure __tagJOYCAPS__Wrapper.setwMaxButtons(const val : UINT);
begin
tagJOYCAPS(GetRecordPtr^).wMaxButtons := val;
end;
function __tagJOYCAPS__Wrapper.getwMaxButtons : UINT;
begin
result := tagJOYCAPS(GetRecordPtr^).wMaxButtons;
end;
function __tagJOYCAPSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagJOYCAPSA__Wrapper.setwMid(const val : Word);
begin
tagJOYCAPSA(GetRecordPtr^).wMid := val;
end;
function __tagJOYCAPSA__Wrapper.getwMid : Word;
begin
result := tagJOYCAPSA(GetRecordPtr^).wMid;
end;
procedure __tagJOYCAPSA__Wrapper.setwPid(const val : Word);
begin
tagJOYCAPSA(GetRecordPtr^).wPid := val;
end;
function __tagJOYCAPSA__Wrapper.getwPid : Word;
begin
result := tagJOYCAPSA(GetRecordPtr^).wPid;
end;
procedure __tagJOYCAPSA__Wrapper.setwXmin(const val : UINT);
begin
tagJOYCAPSA(GetRecordPtr^).wXmin := val;
end;
function __tagJOYCAPSA__Wrapper.getwXmin : UINT;
begin
result := tagJOYCAPSA(GetRecordPtr^).wXmin;
end;
procedure __tagJOYCAPSA__Wrapper.setwXmax(const val : UINT);
begin
tagJOYCAPSA(GetRecordPtr^).wXmax := val;
end;
function __tagJOYCAPSA__Wrapper.getwXmax : UINT;
begin
result := tagJOYCAPSA(GetRecordPtr^).wXmax;
end;
procedure __tagJOYCAPSA__Wrapper.setwYmin(const val : UINT);
begin
tagJOYCAPSA(GetRecordPtr^).wYmin := val;
end;
function __tagJOYCAPSA__Wrapper.getwYmin : UINT;
begin
result := tagJOYCAPSA(GetRecordPtr^).wYmin;
end;
procedure __tagJOYCAPSA__Wrapper.setwYmax(const val : UINT);
begin
tagJOYCAPSA(GetRecordPtr^).wYmax := val;
end;
function __tagJOYCAPSA__Wrapper.getwYmax : UINT;
begin
result := tagJOYCAPSA(GetRecordPtr^).wYmax;
end;
procedure __tagJOYCAPSA__Wrapper.setwZmin(const val : UINT);
begin
tagJOYCAPSA(GetRecordPtr^).wZmin := val;
end;
function __tagJOYCAPSA__Wrapper.getwZmin : UINT;
begin
result := tagJOYCAPSA(GetRecordPtr^).wZmin;
end;
procedure __tagJOYCAPSA__Wrapper.setwZmax(const val : UINT);
begin
tagJOYCAPSA(GetRecordPtr^).wZmax := val;
end;
function __tagJOYCAPSA__Wrapper.getwZmax : UINT;
begin
result := tagJOYCAPSA(GetRecordPtr^).wZmax;
end;
procedure __tagJOYCAPSA__Wrapper.setwNumButtons(const val : UINT);
begin
tagJOYCAPSA(GetRecordPtr^).wNumButtons := val;
end;
function __tagJOYCAPSA__Wrapper.getwNumButtons : UINT;
begin
result := tagJOYCAPSA(GetRecordPtr^).wNumButtons;
end;
procedure __tagJOYCAPSA__Wrapper.setwPeriodMin(const val : UINT);
begin
tagJOYCAPSA(GetRecordPtr^).wPeriodMin := val;
end;
function __tagJOYCAPSA__Wrapper.getwPeriodMin : UINT;
begin
result := tagJOYCAPSA(GetRecordPtr^).wPeriodMin;
end;
procedure __tagJOYCAPSA__Wrapper.setwPeriodMax(const val : UINT);
begin
tagJOYCAPSA(GetRecordPtr^).wPeriodMax := val;
end;
function __tagJOYCAPSA__Wrapper.getwPeriodMax : UINT;
begin
result := tagJOYCAPSA(GetRecordPtr^).wPeriodMax;
end;
procedure __tagJOYCAPSA__Wrapper.setwRmin(const val : UINT);
begin
tagJOYCAPSA(GetRecordPtr^).wRmin := val;
end;
function __tagJOYCAPSA__Wrapper.getwRmin : UINT;
begin
result := tagJOYCAPSA(GetRecordPtr^).wRmin;
end;
procedure __tagJOYCAPSA__Wrapper.setwRmax(const val : UINT);
begin
tagJOYCAPSA(GetRecordPtr^).wRmax := val;
end;
function __tagJOYCAPSA__Wrapper.getwRmax : UINT;
begin
result := tagJOYCAPSA(GetRecordPtr^).wRmax;
end;
procedure __tagJOYCAPSA__Wrapper.setwUmin(const val : UINT);
begin
tagJOYCAPSA(GetRecordPtr^).wUmin := val;
end;
function __tagJOYCAPSA__Wrapper.getwUmin : UINT;
begin
result := tagJOYCAPSA(GetRecordPtr^).wUmin;
end;
procedure __tagJOYCAPSA__Wrapper.setwUmax(const val : UINT);
begin
tagJOYCAPSA(GetRecordPtr^).wUmax := val;
end;
function __tagJOYCAPSA__Wrapper.getwUmax : UINT;
begin
result := tagJOYCAPSA(GetRecordPtr^).wUmax;
end;
procedure __tagJOYCAPSA__Wrapper.setwVmin(const val : UINT);
begin
tagJOYCAPSA(GetRecordPtr^).wVmin := val;
end;
function __tagJOYCAPSA__Wrapper.getwVmin : UINT;
begin
result := tagJOYCAPSA(GetRecordPtr^).wVmin;
end;
procedure __tagJOYCAPSA__Wrapper.setwVmax(const val : UINT);
begin
tagJOYCAPSA(GetRecordPtr^).wVmax := val;
end;
function __tagJOYCAPSA__Wrapper.getwVmax : UINT;
begin
result := tagJOYCAPSA(GetRecordPtr^).wVmax;
end;
procedure __tagJOYCAPSA__Wrapper.setwCaps(const val : UINT);
begin
tagJOYCAPSA(GetRecordPtr^).wCaps := val;
end;
function __tagJOYCAPSA__Wrapper.getwCaps : UINT;
begin
result := tagJOYCAPSA(GetRecordPtr^).wCaps;
end;
procedure __tagJOYCAPSA__Wrapper.setwMaxAxes(const val : UINT);
begin
tagJOYCAPSA(GetRecordPtr^).wMaxAxes := val;
end;
function __tagJOYCAPSA__Wrapper.getwMaxAxes : UINT;
begin
result := tagJOYCAPSA(GetRecordPtr^).wMaxAxes;
end;
procedure __tagJOYCAPSA__Wrapper.setwNumAxes(const val : UINT);
begin
tagJOYCAPSA(GetRecordPtr^).wNumAxes := val;
end;
function __tagJOYCAPSA__Wrapper.getwNumAxes : UINT;
begin
result := tagJOYCAPSA(GetRecordPtr^).wNumAxes;
end;
procedure __tagJOYCAPSA__Wrapper.setwMaxButtons(const val : UINT);
begin
tagJOYCAPSA(GetRecordPtr^).wMaxButtons := val;
end;
function __tagJOYCAPSA__Wrapper.getwMaxButtons : UINT;
begin
result := tagJOYCAPSA(GetRecordPtr^).wMaxButtons;
end;
function __tagJOYCAPSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagJOYCAPSW__Wrapper.setwMid(const val : Word);
begin
tagJOYCAPSW(GetRecordPtr^).wMid := val;
end;
function __tagJOYCAPSW__Wrapper.getwMid : Word;
begin
result := tagJOYCAPSW(GetRecordPtr^).wMid;
end;
procedure __tagJOYCAPSW__Wrapper.setwPid(const val : Word);
begin
tagJOYCAPSW(GetRecordPtr^).wPid := val;
end;
function __tagJOYCAPSW__Wrapper.getwPid : Word;
begin
result := tagJOYCAPSW(GetRecordPtr^).wPid;
end;
procedure __tagJOYCAPSW__Wrapper.setwXmin(const val : UINT);
begin
tagJOYCAPSW(GetRecordPtr^).wXmin := val;
end;
function __tagJOYCAPSW__Wrapper.getwXmin : UINT;
begin
result := tagJOYCAPSW(GetRecordPtr^).wXmin;
end;
procedure __tagJOYCAPSW__Wrapper.setwXmax(const val : UINT);
begin
tagJOYCAPSW(GetRecordPtr^).wXmax := val;
end;
function __tagJOYCAPSW__Wrapper.getwXmax : UINT;
begin
result := tagJOYCAPSW(GetRecordPtr^).wXmax;
end;
procedure __tagJOYCAPSW__Wrapper.setwYmin(const val : UINT);
begin
tagJOYCAPSW(GetRecordPtr^).wYmin := val;
end;
function __tagJOYCAPSW__Wrapper.getwYmin : UINT;
begin
result := tagJOYCAPSW(GetRecordPtr^).wYmin;
end;
procedure __tagJOYCAPSW__Wrapper.setwYmax(const val : UINT);
begin
tagJOYCAPSW(GetRecordPtr^).wYmax := val;
end;
function __tagJOYCAPSW__Wrapper.getwYmax : UINT;
begin
result := tagJOYCAPSW(GetRecordPtr^).wYmax;
end;
procedure __tagJOYCAPSW__Wrapper.setwZmin(const val : UINT);
begin
tagJOYCAPSW(GetRecordPtr^).wZmin := val;
end;
function __tagJOYCAPSW__Wrapper.getwZmin : UINT;
begin
result := tagJOYCAPSW(GetRecordPtr^).wZmin;
end;
procedure __tagJOYCAPSW__Wrapper.setwZmax(const val : UINT);
begin
tagJOYCAPSW(GetRecordPtr^).wZmax := val;
end;
function __tagJOYCAPSW__Wrapper.getwZmax : UINT;
begin
result := tagJOYCAPSW(GetRecordPtr^).wZmax;
end;
procedure __tagJOYCAPSW__Wrapper.setwNumButtons(const val : UINT);
begin
tagJOYCAPSW(GetRecordPtr^).wNumButtons := val;
end;
function __tagJOYCAPSW__Wrapper.getwNumButtons : UINT;
begin
result := tagJOYCAPSW(GetRecordPtr^).wNumButtons;
end;
procedure __tagJOYCAPSW__Wrapper.setwPeriodMin(const val : UINT);
begin
tagJOYCAPSW(GetRecordPtr^).wPeriodMin := val;
end;
function __tagJOYCAPSW__Wrapper.getwPeriodMin : UINT;
begin
result := tagJOYCAPSW(GetRecordPtr^).wPeriodMin;
end;
procedure __tagJOYCAPSW__Wrapper.setwPeriodMax(const val : UINT);
begin
tagJOYCAPSW(GetRecordPtr^).wPeriodMax := val;
end;
function __tagJOYCAPSW__Wrapper.getwPeriodMax : UINT;
begin
result := tagJOYCAPSW(GetRecordPtr^).wPeriodMax;
end;
procedure __tagJOYCAPSW__Wrapper.setwRmin(const val : UINT);
begin
tagJOYCAPSW(GetRecordPtr^).wRmin := val;
end;
function __tagJOYCAPSW__Wrapper.getwRmin : UINT;
begin
result := tagJOYCAPSW(GetRecordPtr^).wRmin;
end;
procedure __tagJOYCAPSW__Wrapper.setwRmax(const val : UINT);
begin
tagJOYCAPSW(GetRecordPtr^).wRmax := val;
end;
function __tagJOYCAPSW__Wrapper.getwRmax : UINT;
begin
result := tagJOYCAPSW(GetRecordPtr^).wRmax;
end;
procedure __tagJOYCAPSW__Wrapper.setwUmin(const val : UINT);
begin
tagJOYCAPSW(GetRecordPtr^).wUmin := val;
end;
function __tagJOYCAPSW__Wrapper.getwUmin : UINT;
begin
result := tagJOYCAPSW(GetRecordPtr^).wUmin;
end;
procedure __tagJOYCAPSW__Wrapper.setwUmax(const val : UINT);
begin
tagJOYCAPSW(GetRecordPtr^).wUmax := val;
end;
function __tagJOYCAPSW__Wrapper.getwUmax : UINT;
begin
result := tagJOYCAPSW(GetRecordPtr^).wUmax;
end;
procedure __tagJOYCAPSW__Wrapper.setwVmin(const val : UINT);
begin
tagJOYCAPSW(GetRecordPtr^).wVmin := val;
end;
function __tagJOYCAPSW__Wrapper.getwVmin : UINT;
begin
result := tagJOYCAPSW(GetRecordPtr^).wVmin;
end;
procedure __tagJOYCAPSW__Wrapper.setwVmax(const val : UINT);
begin
tagJOYCAPSW(GetRecordPtr^).wVmax := val;
end;
function __tagJOYCAPSW__Wrapper.getwVmax : UINT;
begin
result := tagJOYCAPSW(GetRecordPtr^).wVmax;
end;
procedure __tagJOYCAPSW__Wrapper.setwCaps(const val : UINT);
begin
tagJOYCAPSW(GetRecordPtr^).wCaps := val;
end;
function __tagJOYCAPSW__Wrapper.getwCaps : UINT;
begin
result := tagJOYCAPSW(GetRecordPtr^).wCaps;
end;
procedure __tagJOYCAPSW__Wrapper.setwMaxAxes(const val : UINT);
begin
tagJOYCAPSW(GetRecordPtr^).wMaxAxes := val;
end;
function __tagJOYCAPSW__Wrapper.getwMaxAxes : UINT;
begin
result := tagJOYCAPSW(GetRecordPtr^).wMaxAxes;
end;
procedure __tagJOYCAPSW__Wrapper.setwNumAxes(const val : UINT);
begin
tagJOYCAPSW(GetRecordPtr^).wNumAxes := val;
end;
function __tagJOYCAPSW__Wrapper.getwNumAxes : UINT;
begin
result := tagJOYCAPSW(GetRecordPtr^).wNumAxes;
end;
procedure __tagJOYCAPSW__Wrapper.setwMaxButtons(const val : UINT);
begin
tagJOYCAPSW(GetRecordPtr^).wMaxButtons := val;
end;
function __tagJOYCAPSW__Wrapper.getwMaxButtons : UINT;
begin
result := tagJOYCAPSW(GetRecordPtr^).wMaxButtons;
end;
function __tagMCI_ANIM_OPEN_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_ANIM_OPEN_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_ANIM_OPEN_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_ANIM_OPEN_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_ANIM_OPEN_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_ANIM_OPEN_PARMS__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
tagMCI_ANIM_OPEN_PARMS(GetRecordPtr^).wDeviceID := val;
end;
function __tagMCI_ANIM_OPEN_PARMS__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := tagMCI_ANIM_OPEN_PARMS(GetRecordPtr^).wDeviceID;
end;
procedure __tagMCI_ANIM_OPEN_PARMS__Wrapper.setdwStyle(const val : DWORD);
begin
tagMCI_ANIM_OPEN_PARMS(GetRecordPtr^).dwStyle := val;
end;
function __tagMCI_ANIM_OPEN_PARMS__Wrapper.getdwStyle : DWORD;
begin
result := tagMCI_ANIM_OPEN_PARMS(GetRecordPtr^).dwStyle;
end;
function __tagMCI_ANIM_OPEN_PARMSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_ANIM_OPEN_PARMSA__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_ANIM_OPEN_PARMSA(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_ANIM_OPEN_PARMSA__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_ANIM_OPEN_PARMSA(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_ANIM_OPEN_PARMSA__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
tagMCI_ANIM_OPEN_PARMSA(GetRecordPtr^).wDeviceID := val;
end;
function __tagMCI_ANIM_OPEN_PARMSA__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := tagMCI_ANIM_OPEN_PARMSA(GetRecordPtr^).wDeviceID;
end;
procedure __tagMCI_ANIM_OPEN_PARMSA__Wrapper.setdwStyle(const val : DWORD);
begin
tagMCI_ANIM_OPEN_PARMSA(GetRecordPtr^).dwStyle := val;
end;
function __tagMCI_ANIM_OPEN_PARMSA__Wrapper.getdwStyle : DWORD;
begin
result := tagMCI_ANIM_OPEN_PARMSA(GetRecordPtr^).dwStyle;
end;
function __tagMCI_ANIM_OPEN_PARMSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_ANIM_OPEN_PARMSW__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_ANIM_OPEN_PARMSW(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_ANIM_OPEN_PARMSW__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_ANIM_OPEN_PARMSW(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_ANIM_OPEN_PARMSW__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
tagMCI_ANIM_OPEN_PARMSW(GetRecordPtr^).wDeviceID := val;
end;
function __tagMCI_ANIM_OPEN_PARMSW__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := tagMCI_ANIM_OPEN_PARMSW(GetRecordPtr^).wDeviceID;
end;
procedure __tagMCI_ANIM_OPEN_PARMSW__Wrapper.setdwStyle(const val : DWORD);
begin
tagMCI_ANIM_OPEN_PARMSW(GetRecordPtr^).dwStyle := val;
end;
function __tagMCI_ANIM_OPEN_PARMSW__Wrapper.getdwStyle : DWORD;
begin
result := tagMCI_ANIM_OPEN_PARMSW(GetRecordPtr^).dwStyle;
end;
function __tagMCI_ANIM_PLAY_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_ANIM_PLAY_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_ANIM_PLAY_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_ANIM_PLAY_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_ANIM_PLAY_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_ANIM_PLAY_PARMS__Wrapper.setdwFrom(const val : DWORD);
begin
tagMCI_ANIM_PLAY_PARMS(GetRecordPtr^).dwFrom := val;
end;
function __tagMCI_ANIM_PLAY_PARMS__Wrapper.getdwFrom : DWORD;
begin
result := tagMCI_ANIM_PLAY_PARMS(GetRecordPtr^).dwFrom;
end;
procedure __tagMCI_ANIM_PLAY_PARMS__Wrapper.setdwTo(const val : DWORD);
begin
tagMCI_ANIM_PLAY_PARMS(GetRecordPtr^).dwTo := val;
end;
function __tagMCI_ANIM_PLAY_PARMS__Wrapper.getdwTo : DWORD;
begin
result := tagMCI_ANIM_PLAY_PARMS(GetRecordPtr^).dwTo;
end;
procedure __tagMCI_ANIM_PLAY_PARMS__Wrapper.setdwSpeed(const val : DWORD);
begin
tagMCI_ANIM_PLAY_PARMS(GetRecordPtr^).dwSpeed := val;
end;
function __tagMCI_ANIM_PLAY_PARMS__Wrapper.getdwSpeed : DWORD;
begin
result := tagMCI_ANIM_PLAY_PARMS(GetRecordPtr^).dwSpeed;
end;
function __tagMCI_ANIM_RECT_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_ANIM_RECT_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_ANIM_RECT_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_ANIM_RECT_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_ANIM_RECT_PARMS(GetRecordPtr^).dwCallback;
end;
function __tagMCI_ANIM_STEP_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_ANIM_STEP_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_ANIM_STEP_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_ANIM_STEP_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_ANIM_STEP_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_ANIM_STEP_PARMS__Wrapper.setdwFrames(const val : DWORD);
begin
tagMCI_ANIM_STEP_PARMS(GetRecordPtr^).dwFrames := val;
end;
function __tagMCI_ANIM_STEP_PARMS__Wrapper.getdwFrames : DWORD;
begin
result := tagMCI_ANIM_STEP_PARMS(GetRecordPtr^).dwFrames;
end;
function __tagMCI_ANIM_UPDATE_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_ANIM_UPDATE_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_ANIM_UPDATE_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_ANIM_UPDATE_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_ANIM_UPDATE_PARMS(GetRecordPtr^).dwCallback;
end;
function __tagMCI_ANIM_WINDOW_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_ANIM_WINDOW_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_ANIM_WINDOW_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_ANIM_WINDOW_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_ANIM_WINDOW_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_ANIM_WINDOW_PARMS__Wrapper.setnCmdShow(const val : UINT);
begin
tagMCI_ANIM_WINDOW_PARMS(GetRecordPtr^).nCmdShow := val;
end;
function __tagMCI_ANIM_WINDOW_PARMS__Wrapper.getnCmdShow : UINT;
begin
result := tagMCI_ANIM_WINDOW_PARMS(GetRecordPtr^).nCmdShow;
end;
function __tagMCI_ANIM_WINDOW_PARMSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_ANIM_WINDOW_PARMSA__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_ANIM_WINDOW_PARMSA(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_ANIM_WINDOW_PARMSA__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_ANIM_WINDOW_PARMSA(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_ANIM_WINDOW_PARMSA__Wrapper.setnCmdShow(const val : UINT);
begin
tagMCI_ANIM_WINDOW_PARMSA(GetRecordPtr^).nCmdShow := val;
end;
function __tagMCI_ANIM_WINDOW_PARMSA__Wrapper.getnCmdShow : UINT;
begin
result := tagMCI_ANIM_WINDOW_PARMSA(GetRecordPtr^).nCmdShow;
end;
function __tagMCI_ANIM_WINDOW_PARMSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_ANIM_WINDOW_PARMSW__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_ANIM_WINDOW_PARMSW(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_ANIM_WINDOW_PARMSW__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_ANIM_WINDOW_PARMSW(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_ANIM_WINDOW_PARMSW__Wrapper.setnCmdShow(const val : UINT);
begin
tagMCI_ANIM_WINDOW_PARMSW(GetRecordPtr^).nCmdShow := val;
end;
function __tagMCI_ANIM_WINDOW_PARMSW__Wrapper.getnCmdShow : UINT;
begin
result := tagMCI_ANIM_WINDOW_PARMSW(GetRecordPtr^).nCmdShow;
end;
function __tagMCI_BREAK_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_BREAK_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_BREAK_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_BREAK_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_BREAK_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_BREAK_PARMS__Wrapper.setnVirtKey(const val : Integer);
begin
tagMCI_BREAK_PARMS(GetRecordPtr^).nVirtKey := val;
end;
function __tagMCI_BREAK_PARMS__Wrapper.getnVirtKey : Integer;
begin
result := tagMCI_BREAK_PARMS(GetRecordPtr^).nVirtKey;
end;
function __tagMCI_GENERIC_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_GENERIC_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_GENERIC_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_GENERIC_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_GENERIC_PARMS(GetRecordPtr^).dwCallback;
end;
function __tagMCI_GETDEVCAPS_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_GETDEVCAPS_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_GETDEVCAPS_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_GETDEVCAPS_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_GETDEVCAPS_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_GETDEVCAPS_PARMS__Wrapper.setdwReturn(const val : DWORD);
begin
tagMCI_GETDEVCAPS_PARMS(GetRecordPtr^).dwReturn := val;
end;
function __tagMCI_GETDEVCAPS_PARMS__Wrapper.getdwReturn : DWORD;
begin
result := tagMCI_GETDEVCAPS_PARMS(GetRecordPtr^).dwReturn;
end;
procedure __tagMCI_GETDEVCAPS_PARMS__Wrapper.setdwItem(const val : DWORD);
begin
tagMCI_GETDEVCAPS_PARMS(GetRecordPtr^).dwItem := val;
end;
function __tagMCI_GETDEVCAPS_PARMS__Wrapper.getdwItem : DWORD;
begin
result := tagMCI_GETDEVCAPS_PARMS(GetRecordPtr^).dwItem;
end;
function __tagMCI_INFO_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_INFO_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_INFO_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_INFO_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_INFO_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_INFO_PARMS__Wrapper.setdwRetSize(const val : DWORD);
begin
tagMCI_INFO_PARMS(GetRecordPtr^).dwRetSize := val;
end;
function __tagMCI_INFO_PARMS__Wrapper.getdwRetSize : DWORD;
begin
result := tagMCI_INFO_PARMS(GetRecordPtr^).dwRetSize;
end;
function __tagMCI_INFO_PARMSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_INFO_PARMSA__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_INFO_PARMSA(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_INFO_PARMSA__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_INFO_PARMSA(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_INFO_PARMSA__Wrapper.setdwRetSize(const val : DWORD);
begin
tagMCI_INFO_PARMSA(GetRecordPtr^).dwRetSize := val;
end;
function __tagMCI_INFO_PARMSA__Wrapper.getdwRetSize : DWORD;
begin
result := tagMCI_INFO_PARMSA(GetRecordPtr^).dwRetSize;
end;
function __tagMCI_INFO_PARMSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_INFO_PARMSW__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_INFO_PARMSW(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_INFO_PARMSW__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_INFO_PARMSW(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_INFO_PARMSW__Wrapper.setdwRetSize(const val : DWORD);
begin
tagMCI_INFO_PARMSW(GetRecordPtr^).dwRetSize := val;
end;
function __tagMCI_INFO_PARMSW__Wrapper.getdwRetSize : DWORD;
begin
result := tagMCI_INFO_PARMSW(GetRecordPtr^).dwRetSize;
end;
function __tagMCI_LOAD_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_LOAD_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_LOAD_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_LOAD_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_LOAD_PARMS(GetRecordPtr^).dwCallback;
end;
function __tagMCI_LOAD_PARMSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_LOAD_PARMSA__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_LOAD_PARMSA(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_LOAD_PARMSA__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_LOAD_PARMSA(GetRecordPtr^).dwCallback;
end;
function __tagMCI_LOAD_PARMSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_LOAD_PARMSW__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_LOAD_PARMSW(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_LOAD_PARMSW__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_LOAD_PARMSW(GetRecordPtr^).dwCallback;
end;
function __tagMCI_OPEN_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_OPEN_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_OPEN_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_OPEN_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_OPEN_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_OPEN_PARMS__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
tagMCI_OPEN_PARMS(GetRecordPtr^).wDeviceID := val;
end;
function __tagMCI_OPEN_PARMS__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := tagMCI_OPEN_PARMS(GetRecordPtr^).wDeviceID;
end;
function __tagMCI_OPEN_PARMSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_OPEN_PARMSA__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_OPEN_PARMSA(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_OPEN_PARMSA__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_OPEN_PARMSA(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_OPEN_PARMSA__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
tagMCI_OPEN_PARMSA(GetRecordPtr^).wDeviceID := val;
end;
function __tagMCI_OPEN_PARMSA__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := tagMCI_OPEN_PARMSA(GetRecordPtr^).wDeviceID;
end;
function __tagMCI_OPEN_PARMSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_OPEN_PARMSW__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_OPEN_PARMSW(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_OPEN_PARMSW__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_OPEN_PARMSW(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_OPEN_PARMSW__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
tagMCI_OPEN_PARMSW(GetRecordPtr^).wDeviceID := val;
end;
function __tagMCI_OPEN_PARMSW__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := tagMCI_OPEN_PARMSW(GetRecordPtr^).wDeviceID;
end;
function __tagMCI_OVLY_LOAD_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_OVLY_LOAD_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_OVLY_LOAD_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_OVLY_LOAD_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_OVLY_LOAD_PARMS(GetRecordPtr^).dwCallback;
end;
function __tagMCI_OVLY_LOAD_PARMSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_OVLY_LOAD_PARMSA__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_OVLY_LOAD_PARMSA(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_OVLY_LOAD_PARMSA__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_OVLY_LOAD_PARMSA(GetRecordPtr^).dwCallback;
end;
function __tagMCI_OVLY_LOAD_PARMSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_OVLY_LOAD_PARMSW__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_OVLY_LOAD_PARMSW(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_OVLY_LOAD_PARMSW__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_OVLY_LOAD_PARMSW(GetRecordPtr^).dwCallback;
end;
function __tagMCI_OVLY_OPEN_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_OVLY_OPEN_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_OVLY_OPEN_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_OVLY_OPEN_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_OVLY_OPEN_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_OVLY_OPEN_PARMS__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
tagMCI_OVLY_OPEN_PARMS(GetRecordPtr^).wDeviceID := val;
end;
function __tagMCI_OVLY_OPEN_PARMS__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := tagMCI_OVLY_OPEN_PARMS(GetRecordPtr^).wDeviceID;
end;
procedure __tagMCI_OVLY_OPEN_PARMS__Wrapper.setdwStyle(const val : DWORD);
begin
tagMCI_OVLY_OPEN_PARMS(GetRecordPtr^).dwStyle := val;
end;
function __tagMCI_OVLY_OPEN_PARMS__Wrapper.getdwStyle : DWORD;
begin
result := tagMCI_OVLY_OPEN_PARMS(GetRecordPtr^).dwStyle;
end;
function __tagMCI_OVLY_OPEN_PARMSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_OVLY_OPEN_PARMSA__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_OVLY_OPEN_PARMSA(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_OVLY_OPEN_PARMSA__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_OVLY_OPEN_PARMSA(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_OVLY_OPEN_PARMSA__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
tagMCI_OVLY_OPEN_PARMSA(GetRecordPtr^).wDeviceID := val;
end;
function __tagMCI_OVLY_OPEN_PARMSA__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := tagMCI_OVLY_OPEN_PARMSA(GetRecordPtr^).wDeviceID;
end;
procedure __tagMCI_OVLY_OPEN_PARMSA__Wrapper.setdwStyle(const val : DWORD);
begin
tagMCI_OVLY_OPEN_PARMSA(GetRecordPtr^).dwStyle := val;
end;
function __tagMCI_OVLY_OPEN_PARMSA__Wrapper.getdwStyle : DWORD;
begin
result := tagMCI_OVLY_OPEN_PARMSA(GetRecordPtr^).dwStyle;
end;
function __tagMCI_OVLY_OPEN_PARMSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_OVLY_OPEN_PARMSW__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_OVLY_OPEN_PARMSW(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_OVLY_OPEN_PARMSW__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_OVLY_OPEN_PARMSW(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_OVLY_OPEN_PARMSW__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
tagMCI_OVLY_OPEN_PARMSW(GetRecordPtr^).wDeviceID := val;
end;
function __tagMCI_OVLY_OPEN_PARMSW__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := tagMCI_OVLY_OPEN_PARMSW(GetRecordPtr^).wDeviceID;
end;
procedure __tagMCI_OVLY_OPEN_PARMSW__Wrapper.setdwStyle(const val : DWORD);
begin
tagMCI_OVLY_OPEN_PARMSW(GetRecordPtr^).dwStyle := val;
end;
function __tagMCI_OVLY_OPEN_PARMSW__Wrapper.getdwStyle : DWORD;
begin
result := tagMCI_OVLY_OPEN_PARMSW(GetRecordPtr^).dwStyle;
end;
function __tagMCI_OVLY_RECT_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_OVLY_RECT_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_OVLY_RECT_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_OVLY_RECT_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_OVLY_RECT_PARMS(GetRecordPtr^).dwCallback;
end;
function __tagMCI_OVLY_SAVE_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_OVLY_SAVE_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_OVLY_SAVE_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_OVLY_SAVE_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_OVLY_SAVE_PARMS(GetRecordPtr^).dwCallback;
end;
function __tagMCI_OVLY_SAVE_PARMSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_OVLY_SAVE_PARMSA__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_OVLY_SAVE_PARMSA(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_OVLY_SAVE_PARMSA__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_OVLY_SAVE_PARMSA(GetRecordPtr^).dwCallback;
end;
function __tagMCI_OVLY_SAVE_PARMSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_OVLY_SAVE_PARMSW__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_OVLY_SAVE_PARMSW(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_OVLY_SAVE_PARMSW__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_OVLY_SAVE_PARMSW(GetRecordPtr^).dwCallback;
end;
function __tagMCI_OVLY_WINDOW_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_OVLY_WINDOW_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_OVLY_WINDOW_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_OVLY_WINDOW_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_OVLY_WINDOW_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_OVLY_WINDOW_PARMS__Wrapper.setnCmdShow(const val : UINT);
begin
tagMCI_OVLY_WINDOW_PARMS(GetRecordPtr^).nCmdShow := val;
end;
function __tagMCI_OVLY_WINDOW_PARMS__Wrapper.getnCmdShow : UINT;
begin
result := tagMCI_OVLY_WINDOW_PARMS(GetRecordPtr^).nCmdShow;
end;
function __tagMCI_OVLY_WINDOW_PARMSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_OVLY_WINDOW_PARMSA__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_OVLY_WINDOW_PARMSA(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_OVLY_WINDOW_PARMSA__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_OVLY_WINDOW_PARMSA(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_OVLY_WINDOW_PARMSA__Wrapper.setnCmdShow(const val : UINT);
begin
tagMCI_OVLY_WINDOW_PARMSA(GetRecordPtr^).nCmdShow := val;
end;
function __tagMCI_OVLY_WINDOW_PARMSA__Wrapper.getnCmdShow : UINT;
begin
result := tagMCI_OVLY_WINDOW_PARMSA(GetRecordPtr^).nCmdShow;
end;
function __tagMCI_OVLY_WINDOW_PARMSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_OVLY_WINDOW_PARMSW__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_OVLY_WINDOW_PARMSW(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_OVLY_WINDOW_PARMSW__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_OVLY_WINDOW_PARMSW(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_OVLY_WINDOW_PARMSW__Wrapper.setnCmdShow(const val : UINT);
begin
tagMCI_OVLY_WINDOW_PARMSW(GetRecordPtr^).nCmdShow := val;
end;
function __tagMCI_OVLY_WINDOW_PARMSW__Wrapper.getnCmdShow : UINT;
begin
result := tagMCI_OVLY_WINDOW_PARMSW(GetRecordPtr^).nCmdShow;
end;
function __tagMCI_PLAY_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_PLAY_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_PLAY_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_PLAY_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_PLAY_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_PLAY_PARMS__Wrapper.setdwFrom(const val : DWORD);
begin
tagMCI_PLAY_PARMS(GetRecordPtr^).dwFrom := val;
end;
function __tagMCI_PLAY_PARMS__Wrapper.getdwFrom : DWORD;
begin
result := tagMCI_PLAY_PARMS(GetRecordPtr^).dwFrom;
end;
procedure __tagMCI_PLAY_PARMS__Wrapper.setdwTo(const val : DWORD);
begin
tagMCI_PLAY_PARMS(GetRecordPtr^).dwTo := val;
end;
function __tagMCI_PLAY_PARMS__Wrapper.getdwTo : DWORD;
begin
result := tagMCI_PLAY_PARMS(GetRecordPtr^).dwTo;
end;
function __tagMCI_RECORD_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_RECORD_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_RECORD_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_RECORD_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_RECORD_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_RECORD_PARMS__Wrapper.setdwFrom(const val : DWORD);
begin
tagMCI_RECORD_PARMS(GetRecordPtr^).dwFrom := val;
end;
function __tagMCI_RECORD_PARMS__Wrapper.getdwFrom : DWORD;
begin
result := tagMCI_RECORD_PARMS(GetRecordPtr^).dwFrom;
end;
procedure __tagMCI_RECORD_PARMS__Wrapper.setdwTo(const val : DWORD);
begin
tagMCI_RECORD_PARMS(GetRecordPtr^).dwTo := val;
end;
function __tagMCI_RECORD_PARMS__Wrapper.getdwTo : DWORD;
begin
result := tagMCI_RECORD_PARMS(GetRecordPtr^).dwTo;
end;
function __tagMCI_SEEK_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_SEEK_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_SEEK_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_SEEK_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_SEEK_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_SEEK_PARMS__Wrapper.setdwTo(const val : DWORD);
begin
tagMCI_SEEK_PARMS(GetRecordPtr^).dwTo := val;
end;
function __tagMCI_SEEK_PARMS__Wrapper.getdwTo : DWORD;
begin
result := tagMCI_SEEK_PARMS(GetRecordPtr^).dwTo;
end;
function __tagMCI_SEQ_SET_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_SEQ_SET_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_SEQ_SET_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_SEQ_SET_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_SEQ_SET_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_SEQ_SET_PARMS__Wrapper.setdwTimeFormat(const val : DWORD);
begin
tagMCI_SEQ_SET_PARMS(GetRecordPtr^).dwTimeFormat := val;
end;
function __tagMCI_SEQ_SET_PARMS__Wrapper.getdwTimeFormat : DWORD;
begin
result := tagMCI_SEQ_SET_PARMS(GetRecordPtr^).dwTimeFormat;
end;
procedure __tagMCI_SEQ_SET_PARMS__Wrapper.setdwAudio(const val : DWORD);
begin
tagMCI_SEQ_SET_PARMS(GetRecordPtr^).dwAudio := val;
end;
function __tagMCI_SEQ_SET_PARMS__Wrapper.getdwAudio : DWORD;
begin
result := tagMCI_SEQ_SET_PARMS(GetRecordPtr^).dwAudio;
end;
procedure __tagMCI_SEQ_SET_PARMS__Wrapper.setdwTempo(const val : DWORD);
begin
tagMCI_SEQ_SET_PARMS(GetRecordPtr^).dwTempo := val;
end;
function __tagMCI_SEQ_SET_PARMS__Wrapper.getdwTempo : DWORD;
begin
result := tagMCI_SEQ_SET_PARMS(GetRecordPtr^).dwTempo;
end;
procedure __tagMCI_SEQ_SET_PARMS__Wrapper.setdwPort(const val : DWORD);
begin
tagMCI_SEQ_SET_PARMS(GetRecordPtr^).dwPort := val;
end;
function __tagMCI_SEQ_SET_PARMS__Wrapper.getdwPort : DWORD;
begin
result := tagMCI_SEQ_SET_PARMS(GetRecordPtr^).dwPort;
end;
procedure __tagMCI_SEQ_SET_PARMS__Wrapper.setdwSlave(const val : DWORD);
begin
tagMCI_SEQ_SET_PARMS(GetRecordPtr^).dwSlave := val;
end;
function __tagMCI_SEQ_SET_PARMS__Wrapper.getdwSlave : DWORD;
begin
result := tagMCI_SEQ_SET_PARMS(GetRecordPtr^).dwSlave;
end;
procedure __tagMCI_SEQ_SET_PARMS__Wrapper.setdwMaster(const val : DWORD);
begin
tagMCI_SEQ_SET_PARMS(GetRecordPtr^).dwMaster := val;
end;
function __tagMCI_SEQ_SET_PARMS__Wrapper.getdwMaster : DWORD;
begin
result := tagMCI_SEQ_SET_PARMS(GetRecordPtr^).dwMaster;
end;
procedure __tagMCI_SEQ_SET_PARMS__Wrapper.setdwOffset(const val : DWORD);
begin
tagMCI_SEQ_SET_PARMS(GetRecordPtr^).dwOffset := val;
end;
function __tagMCI_SEQ_SET_PARMS__Wrapper.getdwOffset : DWORD;
begin
result := tagMCI_SEQ_SET_PARMS(GetRecordPtr^).dwOffset;
end;
function __tagMCI_SET_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_SET_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_SET_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_SET_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_SET_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_SET_PARMS__Wrapper.setdwTimeFormat(const val : DWORD);
begin
tagMCI_SET_PARMS(GetRecordPtr^).dwTimeFormat := val;
end;
function __tagMCI_SET_PARMS__Wrapper.getdwTimeFormat : DWORD;
begin
result := tagMCI_SET_PARMS(GetRecordPtr^).dwTimeFormat;
end;
procedure __tagMCI_SET_PARMS__Wrapper.setdwAudio(const val : DWORD);
begin
tagMCI_SET_PARMS(GetRecordPtr^).dwAudio := val;
end;
function __tagMCI_SET_PARMS__Wrapper.getdwAudio : DWORD;
begin
result := tagMCI_SET_PARMS(GetRecordPtr^).dwAudio;
end;
function __tagMCI_STATUS_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_STATUS_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_STATUS_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_STATUS_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_STATUS_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_STATUS_PARMS__Wrapper.setdwReturn(const val : DWORD);
begin
tagMCI_STATUS_PARMS(GetRecordPtr^).dwReturn := val;
end;
function __tagMCI_STATUS_PARMS__Wrapper.getdwReturn : DWORD;
begin
result := tagMCI_STATUS_PARMS(GetRecordPtr^).dwReturn;
end;
procedure __tagMCI_STATUS_PARMS__Wrapper.setdwItem(const val : DWORD);
begin
tagMCI_STATUS_PARMS(GetRecordPtr^).dwItem := val;
end;
function __tagMCI_STATUS_PARMS__Wrapper.getdwItem : DWORD;
begin
result := tagMCI_STATUS_PARMS(GetRecordPtr^).dwItem;
end;
procedure __tagMCI_STATUS_PARMS__Wrapper.setdwTrack(const val : DWORD);
begin
tagMCI_STATUS_PARMS(GetRecordPtr^).dwTrack := val;
end;
function __tagMCI_STATUS_PARMS__Wrapper.getdwTrack : DWORD;
begin
result := tagMCI_STATUS_PARMS(GetRecordPtr^).dwTrack;
end;
function __tagMCI_SYSINFO_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_SYSINFO_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_SYSINFO_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_SYSINFO_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_SYSINFO_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_SYSINFO_PARMS__Wrapper.setdwRetSize(const val : DWORD);
begin
tagMCI_SYSINFO_PARMS(GetRecordPtr^).dwRetSize := val;
end;
function __tagMCI_SYSINFO_PARMS__Wrapper.getdwRetSize : DWORD;
begin
result := tagMCI_SYSINFO_PARMS(GetRecordPtr^).dwRetSize;
end;
procedure __tagMCI_SYSINFO_PARMS__Wrapper.setdwNumber(const val : DWORD);
begin
tagMCI_SYSINFO_PARMS(GetRecordPtr^).dwNumber := val;
end;
function __tagMCI_SYSINFO_PARMS__Wrapper.getdwNumber : DWORD;
begin
result := tagMCI_SYSINFO_PARMS(GetRecordPtr^).dwNumber;
end;
procedure __tagMCI_SYSINFO_PARMS__Wrapper.setwDeviceType(const val : UINT);
begin
tagMCI_SYSINFO_PARMS(GetRecordPtr^).wDeviceType := val;
end;
function __tagMCI_SYSINFO_PARMS__Wrapper.getwDeviceType : UINT;
begin
result := tagMCI_SYSINFO_PARMS(GetRecordPtr^).wDeviceType;
end;
function __tagMCI_SYSINFO_PARMSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_SYSINFO_PARMSA__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_SYSINFO_PARMSA(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_SYSINFO_PARMSA__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_SYSINFO_PARMSA(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_SYSINFO_PARMSA__Wrapper.setdwRetSize(const val : DWORD);
begin
tagMCI_SYSINFO_PARMSA(GetRecordPtr^).dwRetSize := val;
end;
function __tagMCI_SYSINFO_PARMSA__Wrapper.getdwRetSize : DWORD;
begin
result := tagMCI_SYSINFO_PARMSA(GetRecordPtr^).dwRetSize;
end;
procedure __tagMCI_SYSINFO_PARMSA__Wrapper.setdwNumber(const val : DWORD);
begin
tagMCI_SYSINFO_PARMSA(GetRecordPtr^).dwNumber := val;
end;
function __tagMCI_SYSINFO_PARMSA__Wrapper.getdwNumber : DWORD;
begin
result := tagMCI_SYSINFO_PARMSA(GetRecordPtr^).dwNumber;
end;
procedure __tagMCI_SYSINFO_PARMSA__Wrapper.setwDeviceType(const val : UINT);
begin
tagMCI_SYSINFO_PARMSA(GetRecordPtr^).wDeviceType := val;
end;
function __tagMCI_SYSINFO_PARMSA__Wrapper.getwDeviceType : UINT;
begin
result := tagMCI_SYSINFO_PARMSA(GetRecordPtr^).wDeviceType;
end;
function __tagMCI_SYSINFO_PARMSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_SYSINFO_PARMSW__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_SYSINFO_PARMSW(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_SYSINFO_PARMSW__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_SYSINFO_PARMSW(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_SYSINFO_PARMSW__Wrapper.setdwRetSize(const val : DWORD);
begin
tagMCI_SYSINFO_PARMSW(GetRecordPtr^).dwRetSize := val;
end;
function __tagMCI_SYSINFO_PARMSW__Wrapper.getdwRetSize : DWORD;
begin
result := tagMCI_SYSINFO_PARMSW(GetRecordPtr^).dwRetSize;
end;
procedure __tagMCI_SYSINFO_PARMSW__Wrapper.setdwNumber(const val : DWORD);
begin
tagMCI_SYSINFO_PARMSW(GetRecordPtr^).dwNumber := val;
end;
function __tagMCI_SYSINFO_PARMSW__Wrapper.getdwNumber : DWORD;
begin
result := tagMCI_SYSINFO_PARMSW(GetRecordPtr^).dwNumber;
end;
procedure __tagMCI_SYSINFO_PARMSW__Wrapper.setwDeviceType(const val : UINT);
begin
tagMCI_SYSINFO_PARMSW(GetRecordPtr^).wDeviceType := val;
end;
function __tagMCI_SYSINFO_PARMSW__Wrapper.getwDeviceType : UINT;
begin
result := tagMCI_SYSINFO_PARMSW(GetRecordPtr^).wDeviceType;
end;
function __tagMCI_VD_ESCAPE_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_VD_ESCAPE_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_VD_ESCAPE_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_VD_ESCAPE_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_VD_ESCAPE_PARMS(GetRecordPtr^).dwCallback;
end;
function __tagMCI_VD_ESCAPE_PARMSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_VD_ESCAPE_PARMSA__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_VD_ESCAPE_PARMSA(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_VD_ESCAPE_PARMSA__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_VD_ESCAPE_PARMSA(GetRecordPtr^).dwCallback;
end;
function __tagMCI_VD_ESCAPE_PARMSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_VD_ESCAPE_PARMSW__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_VD_ESCAPE_PARMSW(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_VD_ESCAPE_PARMSW__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_VD_ESCAPE_PARMSW(GetRecordPtr^).dwCallback;
end;
function __tagMCI_VD_PLAY_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_VD_PLAY_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_VD_PLAY_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_VD_PLAY_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_VD_PLAY_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_VD_PLAY_PARMS__Wrapper.setdwFrom(const val : DWORD);
begin
tagMCI_VD_PLAY_PARMS(GetRecordPtr^).dwFrom := val;
end;
function __tagMCI_VD_PLAY_PARMS__Wrapper.getdwFrom : DWORD;
begin
result := tagMCI_VD_PLAY_PARMS(GetRecordPtr^).dwFrom;
end;
procedure __tagMCI_VD_PLAY_PARMS__Wrapper.setdwTo(const val : DWORD);
begin
tagMCI_VD_PLAY_PARMS(GetRecordPtr^).dwTo := val;
end;
function __tagMCI_VD_PLAY_PARMS__Wrapper.getdwTo : DWORD;
begin
result := tagMCI_VD_PLAY_PARMS(GetRecordPtr^).dwTo;
end;
procedure __tagMCI_VD_PLAY_PARMS__Wrapper.setdwSpeed(const val : DWORD);
begin
tagMCI_VD_PLAY_PARMS(GetRecordPtr^).dwSpeed := val;
end;
function __tagMCI_VD_PLAY_PARMS__Wrapper.getdwSpeed : DWORD;
begin
result := tagMCI_VD_PLAY_PARMS(GetRecordPtr^).dwSpeed;
end;
function __tagMCI_VD_STEP_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_VD_STEP_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_VD_STEP_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_VD_STEP_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_VD_STEP_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_VD_STEP_PARMS__Wrapper.setdwFrames(const val : DWORD);
begin
tagMCI_VD_STEP_PARMS(GetRecordPtr^).dwFrames := val;
end;
function __tagMCI_VD_STEP_PARMS__Wrapper.getdwFrames : DWORD;
begin
result := tagMCI_VD_STEP_PARMS(GetRecordPtr^).dwFrames;
end;
function __tagMCI_WAVE_DELETE_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_WAVE_DELETE_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_WAVE_DELETE_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_WAVE_DELETE_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_WAVE_DELETE_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_WAVE_DELETE_PARMS__Wrapper.setdwFrom(const val : DWORD);
begin
tagMCI_WAVE_DELETE_PARMS(GetRecordPtr^).dwFrom := val;
end;
function __tagMCI_WAVE_DELETE_PARMS__Wrapper.getdwFrom : DWORD;
begin
result := tagMCI_WAVE_DELETE_PARMS(GetRecordPtr^).dwFrom;
end;
procedure __tagMCI_WAVE_DELETE_PARMS__Wrapper.setdwTo(const val : DWORD);
begin
tagMCI_WAVE_DELETE_PARMS(GetRecordPtr^).dwTo := val;
end;
function __tagMCI_WAVE_DELETE_PARMS__Wrapper.getdwTo : DWORD;
begin
result := tagMCI_WAVE_DELETE_PARMS(GetRecordPtr^).dwTo;
end;
function __tagMCI_WAVE_OPEN_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_WAVE_OPEN_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_WAVE_OPEN_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_WAVE_OPEN_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_WAVE_OPEN_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_WAVE_OPEN_PARMS__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
tagMCI_WAVE_OPEN_PARMS(GetRecordPtr^).wDeviceID := val;
end;
function __tagMCI_WAVE_OPEN_PARMS__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := tagMCI_WAVE_OPEN_PARMS(GetRecordPtr^).wDeviceID;
end;
procedure __tagMCI_WAVE_OPEN_PARMS__Wrapper.setdwBufferSeconds(const val : DWORD);
begin
tagMCI_WAVE_OPEN_PARMS(GetRecordPtr^).dwBufferSeconds := val;
end;
function __tagMCI_WAVE_OPEN_PARMS__Wrapper.getdwBufferSeconds : DWORD;
begin
result := tagMCI_WAVE_OPEN_PARMS(GetRecordPtr^).dwBufferSeconds;
end;
function __tagMCI_WAVE_OPEN_PARMSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_WAVE_OPEN_PARMSA__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_WAVE_OPEN_PARMSA(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_WAVE_OPEN_PARMSA__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_WAVE_OPEN_PARMSA(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_WAVE_OPEN_PARMSA__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
tagMCI_WAVE_OPEN_PARMSA(GetRecordPtr^).wDeviceID := val;
end;
function __tagMCI_WAVE_OPEN_PARMSA__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := tagMCI_WAVE_OPEN_PARMSA(GetRecordPtr^).wDeviceID;
end;
procedure __tagMCI_WAVE_OPEN_PARMSA__Wrapper.setdwBufferSeconds(const val : DWORD);
begin
tagMCI_WAVE_OPEN_PARMSA(GetRecordPtr^).dwBufferSeconds := val;
end;
function __tagMCI_WAVE_OPEN_PARMSA__Wrapper.getdwBufferSeconds : DWORD;
begin
result := tagMCI_WAVE_OPEN_PARMSA(GetRecordPtr^).dwBufferSeconds;
end;
function __tagMCI_WAVE_OPEN_PARMSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_WAVE_OPEN_PARMSW__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_WAVE_OPEN_PARMSW(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_WAVE_OPEN_PARMSW__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_WAVE_OPEN_PARMSW(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_WAVE_OPEN_PARMSW__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
tagMCI_WAVE_OPEN_PARMSW(GetRecordPtr^).wDeviceID := val;
end;
function __tagMCI_WAVE_OPEN_PARMSW__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := tagMCI_WAVE_OPEN_PARMSW(GetRecordPtr^).wDeviceID;
end;
procedure __tagMCI_WAVE_OPEN_PARMSW__Wrapper.setdwBufferSeconds(const val : DWORD);
begin
tagMCI_WAVE_OPEN_PARMSW(GetRecordPtr^).dwBufferSeconds := val;
end;
function __tagMCI_WAVE_OPEN_PARMSW__Wrapper.getdwBufferSeconds : DWORD;
begin
result := tagMCI_WAVE_OPEN_PARMSW(GetRecordPtr^).dwBufferSeconds;
end;
function __tagMCI_WAVE_SET_PARMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMCI_WAVE_SET_PARMS__Wrapper.setdwCallback(const val : DWORD);
begin
tagMCI_WAVE_SET_PARMS(GetRecordPtr^).dwCallback := val;
end;
function __tagMCI_WAVE_SET_PARMS__Wrapper.getdwCallback : DWORD;
begin
result := tagMCI_WAVE_SET_PARMS(GetRecordPtr^).dwCallback;
end;
procedure __tagMCI_WAVE_SET_PARMS__Wrapper.setdwTimeFormat(const val : DWORD);
begin
tagMCI_WAVE_SET_PARMS(GetRecordPtr^).dwTimeFormat := val;
end;
function __tagMCI_WAVE_SET_PARMS__Wrapper.getdwTimeFormat : DWORD;
begin
result := tagMCI_WAVE_SET_PARMS(GetRecordPtr^).dwTimeFormat;
end;
procedure __tagMCI_WAVE_SET_PARMS__Wrapper.setdwAudio(const val : DWORD);
begin
tagMCI_WAVE_SET_PARMS(GetRecordPtr^).dwAudio := val;
end;
function __tagMCI_WAVE_SET_PARMS__Wrapper.getdwAudio : DWORD;
begin
result := tagMCI_WAVE_SET_PARMS(GetRecordPtr^).dwAudio;
end;
procedure __tagMCI_WAVE_SET_PARMS__Wrapper.setwInput(const val : UINT);
begin
tagMCI_WAVE_SET_PARMS(GetRecordPtr^).wInput := val;
end;
function __tagMCI_WAVE_SET_PARMS__Wrapper.getwInput : UINT;
begin
result := tagMCI_WAVE_SET_PARMS(GetRecordPtr^).wInput;
end;
procedure __tagMCI_WAVE_SET_PARMS__Wrapper.setwOutput(const val : UINT);
begin
tagMCI_WAVE_SET_PARMS(GetRecordPtr^).wOutput := val;
end;
function __tagMCI_WAVE_SET_PARMS__Wrapper.getwOutput : UINT;
begin
result := tagMCI_WAVE_SET_PARMS(GetRecordPtr^).wOutput;
end;
procedure __tagMCI_WAVE_SET_PARMS__Wrapper.setwFormatTag(const val : Word);
begin
tagMCI_WAVE_SET_PARMS(GetRecordPtr^).wFormatTag := val;
end;
function __tagMCI_WAVE_SET_PARMS__Wrapper.getwFormatTag : Word;
begin
result := tagMCI_WAVE_SET_PARMS(GetRecordPtr^).wFormatTag;
end;
procedure __tagMCI_WAVE_SET_PARMS__Wrapper.setwReserved2(const val : Word);
begin
tagMCI_WAVE_SET_PARMS(GetRecordPtr^).wReserved2 := val;
end;
function __tagMCI_WAVE_SET_PARMS__Wrapper.getwReserved2 : Word;
begin
result := tagMCI_WAVE_SET_PARMS(GetRecordPtr^).wReserved2;
end;
procedure __tagMCI_WAVE_SET_PARMS__Wrapper.setnChannels(const val : Word);
begin
tagMCI_WAVE_SET_PARMS(GetRecordPtr^).nChannels := val;
end;
function __tagMCI_WAVE_SET_PARMS__Wrapper.getnChannels : Word;
begin
result := tagMCI_WAVE_SET_PARMS(GetRecordPtr^).nChannels;
end;
procedure __tagMCI_WAVE_SET_PARMS__Wrapper.setwReserved3(const val : Word);
begin
tagMCI_WAVE_SET_PARMS(GetRecordPtr^).wReserved3 := val;
end;
function __tagMCI_WAVE_SET_PARMS__Wrapper.getwReserved3 : Word;
begin
result := tagMCI_WAVE_SET_PARMS(GetRecordPtr^).wReserved3;
end;
procedure __tagMCI_WAVE_SET_PARMS__Wrapper.setnSamplesPerSec(const val : DWORD);
begin
tagMCI_WAVE_SET_PARMS(GetRecordPtr^).nSamplesPerSec := val;
end;
function __tagMCI_WAVE_SET_PARMS__Wrapper.getnSamplesPerSec : DWORD;
begin
result := tagMCI_WAVE_SET_PARMS(GetRecordPtr^).nSamplesPerSec;
end;
procedure __tagMCI_WAVE_SET_PARMS__Wrapper.setnAvgBytesPerSec(const val : DWORD);
begin
tagMCI_WAVE_SET_PARMS(GetRecordPtr^).nAvgBytesPerSec := val;
end;
function __tagMCI_WAVE_SET_PARMS__Wrapper.getnAvgBytesPerSec : DWORD;
begin
result := tagMCI_WAVE_SET_PARMS(GetRecordPtr^).nAvgBytesPerSec;
end;
procedure __tagMCI_WAVE_SET_PARMS__Wrapper.setnBlockAlign(const val : Word);
begin
tagMCI_WAVE_SET_PARMS(GetRecordPtr^).nBlockAlign := val;
end;
function __tagMCI_WAVE_SET_PARMS__Wrapper.getnBlockAlign : Word;
begin
result := tagMCI_WAVE_SET_PARMS(GetRecordPtr^).nBlockAlign;
end;
procedure __tagMCI_WAVE_SET_PARMS__Wrapper.setwReserved4(const val : Word);
begin
tagMCI_WAVE_SET_PARMS(GetRecordPtr^).wReserved4 := val;
end;
function __tagMCI_WAVE_SET_PARMS__Wrapper.getwReserved4 : Word;
begin
result := tagMCI_WAVE_SET_PARMS(GetRecordPtr^).wReserved4;
end;
procedure __tagMCI_WAVE_SET_PARMS__Wrapper.setwBitsPerSample(const val : Word);
begin
tagMCI_WAVE_SET_PARMS(GetRecordPtr^).wBitsPerSample := val;
end;
function __tagMCI_WAVE_SET_PARMS__Wrapper.getwBitsPerSample : Word;
begin
result := tagMCI_WAVE_SET_PARMS(GetRecordPtr^).wBitsPerSample;
end;
procedure __tagMCI_WAVE_SET_PARMS__Wrapper.setwReserved5(const val : Word);
begin
tagMCI_WAVE_SET_PARMS(GetRecordPtr^).wReserved5 := val;
end;
function __tagMCI_WAVE_SET_PARMS__Wrapper.getwReserved5 : Word;
begin
result := tagMCI_WAVE_SET_PARMS(GetRecordPtr^).wReserved5;
end;
function __tagMIDIINCAPS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMIDIINCAPS__Wrapper.setwMid(const val : Word);
begin
tagMIDIINCAPS(GetRecordPtr^).wMid := val;
end;
function __tagMIDIINCAPS__Wrapper.getwMid : Word;
begin
result := tagMIDIINCAPS(GetRecordPtr^).wMid;
end;
procedure __tagMIDIINCAPS__Wrapper.setwPid(const val : Word);
begin
tagMIDIINCAPS(GetRecordPtr^).wPid := val;
end;
function __tagMIDIINCAPS__Wrapper.getwPid : Word;
begin
result := tagMIDIINCAPS(GetRecordPtr^).wPid;
end;
procedure __tagMIDIINCAPS__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
tagMIDIINCAPS(GetRecordPtr^).vDriverVersion := val;
end;
function __tagMIDIINCAPS__Wrapper.getvDriverVersion : MMVERSION;
begin
result := tagMIDIINCAPS(GetRecordPtr^).vDriverVersion;
end;
procedure __tagMIDIINCAPS__Wrapper.setdwSupport(const val : DWORD);
begin
tagMIDIINCAPS(GetRecordPtr^).dwSupport := val;
end;
function __tagMIDIINCAPS__Wrapper.getdwSupport : DWORD;
begin
result := tagMIDIINCAPS(GetRecordPtr^).dwSupport;
end;
function __tagMIDIINCAPSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMIDIINCAPSA__Wrapper.setwMid(const val : Word);
begin
tagMIDIINCAPSA(GetRecordPtr^).wMid := val;
end;
function __tagMIDIINCAPSA__Wrapper.getwMid : Word;
begin
result := tagMIDIINCAPSA(GetRecordPtr^).wMid;
end;
procedure __tagMIDIINCAPSA__Wrapper.setwPid(const val : Word);
begin
tagMIDIINCAPSA(GetRecordPtr^).wPid := val;
end;
function __tagMIDIINCAPSA__Wrapper.getwPid : Word;
begin
result := tagMIDIINCAPSA(GetRecordPtr^).wPid;
end;
procedure __tagMIDIINCAPSA__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
tagMIDIINCAPSA(GetRecordPtr^).vDriverVersion := val;
end;
function __tagMIDIINCAPSA__Wrapper.getvDriverVersion : MMVERSION;
begin
result := tagMIDIINCAPSA(GetRecordPtr^).vDriverVersion;
end;
procedure __tagMIDIINCAPSA__Wrapper.setdwSupport(const val : DWORD);
begin
tagMIDIINCAPSA(GetRecordPtr^).dwSupport := val;
end;
function __tagMIDIINCAPSA__Wrapper.getdwSupport : DWORD;
begin
result := tagMIDIINCAPSA(GetRecordPtr^).dwSupport;
end;
function __tagMIDIINCAPSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMIDIINCAPSW__Wrapper.setwMid(const val : Word);
begin
tagMIDIINCAPSW(GetRecordPtr^).wMid := val;
end;
function __tagMIDIINCAPSW__Wrapper.getwMid : Word;
begin
result := tagMIDIINCAPSW(GetRecordPtr^).wMid;
end;
procedure __tagMIDIINCAPSW__Wrapper.setwPid(const val : Word);
begin
tagMIDIINCAPSW(GetRecordPtr^).wPid := val;
end;
function __tagMIDIINCAPSW__Wrapper.getwPid : Word;
begin
result := tagMIDIINCAPSW(GetRecordPtr^).wPid;
end;
procedure __tagMIDIINCAPSW__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
tagMIDIINCAPSW(GetRecordPtr^).vDriverVersion := val;
end;
function __tagMIDIINCAPSW__Wrapper.getvDriverVersion : MMVERSION;
begin
result := tagMIDIINCAPSW(GetRecordPtr^).vDriverVersion;
end;
procedure __tagMIDIINCAPSW__Wrapper.setdwSupport(const val : DWORD);
begin
tagMIDIINCAPSW(GetRecordPtr^).dwSupport := val;
end;
function __tagMIDIINCAPSW__Wrapper.getdwSupport : DWORD;
begin
result := tagMIDIINCAPSW(GetRecordPtr^).dwSupport;
end;
function __tagMIDIOUTCAPS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMIDIOUTCAPS__Wrapper.setwMid(const val : Word);
begin
tagMIDIOUTCAPS(GetRecordPtr^).wMid := val;
end;
function __tagMIDIOUTCAPS__Wrapper.getwMid : Word;
begin
result := tagMIDIOUTCAPS(GetRecordPtr^).wMid;
end;
procedure __tagMIDIOUTCAPS__Wrapper.setwPid(const val : Word);
begin
tagMIDIOUTCAPS(GetRecordPtr^).wPid := val;
end;
function __tagMIDIOUTCAPS__Wrapper.getwPid : Word;
begin
result := tagMIDIOUTCAPS(GetRecordPtr^).wPid;
end;
procedure __tagMIDIOUTCAPS__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
tagMIDIOUTCAPS(GetRecordPtr^).vDriverVersion := val;
end;
function __tagMIDIOUTCAPS__Wrapper.getvDriverVersion : MMVERSION;
begin
result := tagMIDIOUTCAPS(GetRecordPtr^).vDriverVersion;
end;
procedure __tagMIDIOUTCAPS__Wrapper.setwTechnology(const val : Word);
begin
tagMIDIOUTCAPS(GetRecordPtr^).wTechnology := val;
end;
function __tagMIDIOUTCAPS__Wrapper.getwTechnology : Word;
begin
result := tagMIDIOUTCAPS(GetRecordPtr^).wTechnology;
end;
procedure __tagMIDIOUTCAPS__Wrapper.setwVoices(const val : Word);
begin
tagMIDIOUTCAPS(GetRecordPtr^).wVoices := val;
end;
function __tagMIDIOUTCAPS__Wrapper.getwVoices : Word;
begin
result := tagMIDIOUTCAPS(GetRecordPtr^).wVoices;
end;
procedure __tagMIDIOUTCAPS__Wrapper.setwNotes(const val : Word);
begin
tagMIDIOUTCAPS(GetRecordPtr^).wNotes := val;
end;
function __tagMIDIOUTCAPS__Wrapper.getwNotes : Word;
begin
result := tagMIDIOUTCAPS(GetRecordPtr^).wNotes;
end;
procedure __tagMIDIOUTCAPS__Wrapper.setwChannelMask(const val : Word);
begin
tagMIDIOUTCAPS(GetRecordPtr^).wChannelMask := val;
end;
function __tagMIDIOUTCAPS__Wrapper.getwChannelMask : Word;
begin
result := tagMIDIOUTCAPS(GetRecordPtr^).wChannelMask;
end;
procedure __tagMIDIOUTCAPS__Wrapper.setdwSupport(const val : DWORD);
begin
tagMIDIOUTCAPS(GetRecordPtr^).dwSupport := val;
end;
function __tagMIDIOUTCAPS__Wrapper.getdwSupport : DWORD;
begin
result := tagMIDIOUTCAPS(GetRecordPtr^).dwSupport;
end;
function __tagMIDIOUTCAPSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMIDIOUTCAPSA__Wrapper.setwMid(const val : Word);
begin
tagMIDIOUTCAPSA(GetRecordPtr^).wMid := val;
end;
function __tagMIDIOUTCAPSA__Wrapper.getwMid : Word;
begin
result := tagMIDIOUTCAPSA(GetRecordPtr^).wMid;
end;
procedure __tagMIDIOUTCAPSA__Wrapper.setwPid(const val : Word);
begin
tagMIDIOUTCAPSA(GetRecordPtr^).wPid := val;
end;
function __tagMIDIOUTCAPSA__Wrapper.getwPid : Word;
begin
result := tagMIDIOUTCAPSA(GetRecordPtr^).wPid;
end;
procedure __tagMIDIOUTCAPSA__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
tagMIDIOUTCAPSA(GetRecordPtr^).vDriverVersion := val;
end;
function __tagMIDIOUTCAPSA__Wrapper.getvDriverVersion : MMVERSION;
begin
result := tagMIDIOUTCAPSA(GetRecordPtr^).vDriverVersion;
end;
procedure __tagMIDIOUTCAPSA__Wrapper.setwTechnology(const val : Word);
begin
tagMIDIOUTCAPSA(GetRecordPtr^).wTechnology := val;
end;
function __tagMIDIOUTCAPSA__Wrapper.getwTechnology : Word;
begin
result := tagMIDIOUTCAPSA(GetRecordPtr^).wTechnology;
end;
procedure __tagMIDIOUTCAPSA__Wrapper.setwVoices(const val : Word);
begin
tagMIDIOUTCAPSA(GetRecordPtr^).wVoices := val;
end;
function __tagMIDIOUTCAPSA__Wrapper.getwVoices : Word;
begin
result := tagMIDIOUTCAPSA(GetRecordPtr^).wVoices;
end;
procedure __tagMIDIOUTCAPSA__Wrapper.setwNotes(const val : Word);
begin
tagMIDIOUTCAPSA(GetRecordPtr^).wNotes := val;
end;
function __tagMIDIOUTCAPSA__Wrapper.getwNotes : Word;
begin
result := tagMIDIOUTCAPSA(GetRecordPtr^).wNotes;
end;
procedure __tagMIDIOUTCAPSA__Wrapper.setwChannelMask(const val : Word);
begin
tagMIDIOUTCAPSA(GetRecordPtr^).wChannelMask := val;
end;
function __tagMIDIOUTCAPSA__Wrapper.getwChannelMask : Word;
begin
result := tagMIDIOUTCAPSA(GetRecordPtr^).wChannelMask;
end;
procedure __tagMIDIOUTCAPSA__Wrapper.setdwSupport(const val : DWORD);
begin
tagMIDIOUTCAPSA(GetRecordPtr^).dwSupport := val;
end;
function __tagMIDIOUTCAPSA__Wrapper.getdwSupport : DWORD;
begin
result := tagMIDIOUTCAPSA(GetRecordPtr^).dwSupport;
end;
function __tagMIDIOUTCAPSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMIDIOUTCAPSW__Wrapper.setwMid(const val : Word);
begin
tagMIDIOUTCAPSW(GetRecordPtr^).wMid := val;
end;
function __tagMIDIOUTCAPSW__Wrapper.getwMid : Word;
begin
result := tagMIDIOUTCAPSW(GetRecordPtr^).wMid;
end;
procedure __tagMIDIOUTCAPSW__Wrapper.setwPid(const val : Word);
begin
tagMIDIOUTCAPSW(GetRecordPtr^).wPid := val;
end;
function __tagMIDIOUTCAPSW__Wrapper.getwPid : Word;
begin
result := tagMIDIOUTCAPSW(GetRecordPtr^).wPid;
end;
procedure __tagMIDIOUTCAPSW__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
tagMIDIOUTCAPSW(GetRecordPtr^).vDriverVersion := val;
end;
function __tagMIDIOUTCAPSW__Wrapper.getvDriverVersion : MMVERSION;
begin
result := tagMIDIOUTCAPSW(GetRecordPtr^).vDriverVersion;
end;
procedure __tagMIDIOUTCAPSW__Wrapper.setwTechnology(const val : Word);
begin
tagMIDIOUTCAPSW(GetRecordPtr^).wTechnology := val;
end;
function __tagMIDIOUTCAPSW__Wrapper.getwTechnology : Word;
begin
result := tagMIDIOUTCAPSW(GetRecordPtr^).wTechnology;
end;
procedure __tagMIDIOUTCAPSW__Wrapper.setwVoices(const val : Word);
begin
tagMIDIOUTCAPSW(GetRecordPtr^).wVoices := val;
end;
function __tagMIDIOUTCAPSW__Wrapper.getwVoices : Word;
begin
result := tagMIDIOUTCAPSW(GetRecordPtr^).wVoices;
end;
procedure __tagMIDIOUTCAPSW__Wrapper.setwNotes(const val : Word);
begin
tagMIDIOUTCAPSW(GetRecordPtr^).wNotes := val;
end;
function __tagMIDIOUTCAPSW__Wrapper.getwNotes : Word;
begin
result := tagMIDIOUTCAPSW(GetRecordPtr^).wNotes;
end;
procedure __tagMIDIOUTCAPSW__Wrapper.setwChannelMask(const val : Word);
begin
tagMIDIOUTCAPSW(GetRecordPtr^).wChannelMask := val;
end;
function __tagMIDIOUTCAPSW__Wrapper.getwChannelMask : Word;
begin
result := tagMIDIOUTCAPSW(GetRecordPtr^).wChannelMask;
end;
procedure __tagMIDIOUTCAPSW__Wrapper.setdwSupport(const val : DWORD);
begin
tagMIDIOUTCAPSW(GetRecordPtr^).dwSupport := val;
end;
function __tagMIDIOUTCAPSW__Wrapper.getdwSupport : DWORD;
begin
result := tagMIDIOUTCAPSW(GetRecordPtr^).dwSupport;
end;
function __tagMIXERCAPS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMIXERCAPS__Wrapper.setwMid(const val : Word);
begin
tagMIXERCAPS(GetRecordPtr^).wMid := val;
end;
function __tagMIXERCAPS__Wrapper.getwMid : Word;
begin
result := tagMIXERCAPS(GetRecordPtr^).wMid;
end;
procedure __tagMIXERCAPS__Wrapper.setwPid(const val : Word);
begin
tagMIXERCAPS(GetRecordPtr^).wPid := val;
end;
function __tagMIXERCAPS__Wrapper.getwPid : Word;
begin
result := tagMIXERCAPS(GetRecordPtr^).wPid;
end;
procedure __tagMIXERCAPS__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
tagMIXERCAPS(GetRecordPtr^).vDriverVersion := val;
end;
function __tagMIXERCAPS__Wrapper.getvDriverVersion : MMVERSION;
begin
result := tagMIXERCAPS(GetRecordPtr^).vDriverVersion;
end;
procedure __tagMIXERCAPS__Wrapper.setfdwSupport(const val : DWORD);
begin
tagMIXERCAPS(GetRecordPtr^).fdwSupport := val;
end;
function __tagMIXERCAPS__Wrapper.getfdwSupport : DWORD;
begin
result := tagMIXERCAPS(GetRecordPtr^).fdwSupport;
end;
procedure __tagMIXERCAPS__Wrapper.setcDestinations(const val : DWORD);
begin
tagMIXERCAPS(GetRecordPtr^).cDestinations := val;
end;
function __tagMIXERCAPS__Wrapper.getcDestinations : DWORD;
begin
result := tagMIXERCAPS(GetRecordPtr^).cDestinations;
end;
function __tagMIXERCAPSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMIXERCAPSA__Wrapper.setwMid(const val : Word);
begin
tagMIXERCAPSA(GetRecordPtr^).wMid := val;
end;
function __tagMIXERCAPSA__Wrapper.getwMid : Word;
begin
result := tagMIXERCAPSA(GetRecordPtr^).wMid;
end;
procedure __tagMIXERCAPSA__Wrapper.setwPid(const val : Word);
begin
tagMIXERCAPSA(GetRecordPtr^).wPid := val;
end;
function __tagMIXERCAPSA__Wrapper.getwPid : Word;
begin
result := tagMIXERCAPSA(GetRecordPtr^).wPid;
end;
procedure __tagMIXERCAPSA__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
tagMIXERCAPSA(GetRecordPtr^).vDriverVersion := val;
end;
function __tagMIXERCAPSA__Wrapper.getvDriverVersion : MMVERSION;
begin
result := tagMIXERCAPSA(GetRecordPtr^).vDriverVersion;
end;
procedure __tagMIXERCAPSA__Wrapper.setfdwSupport(const val : DWORD);
begin
tagMIXERCAPSA(GetRecordPtr^).fdwSupport := val;
end;
function __tagMIXERCAPSA__Wrapper.getfdwSupport : DWORD;
begin
result := tagMIXERCAPSA(GetRecordPtr^).fdwSupport;
end;
procedure __tagMIXERCAPSA__Wrapper.setcDestinations(const val : DWORD);
begin
tagMIXERCAPSA(GetRecordPtr^).cDestinations := val;
end;
function __tagMIXERCAPSA__Wrapper.getcDestinations : DWORD;
begin
result := tagMIXERCAPSA(GetRecordPtr^).cDestinations;
end;
function __tagMIXERCAPSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMIXERCAPSW__Wrapper.setwMid(const val : Word);
begin
tagMIXERCAPSW(GetRecordPtr^).wMid := val;
end;
function __tagMIXERCAPSW__Wrapper.getwMid : Word;
begin
result := tagMIXERCAPSW(GetRecordPtr^).wMid;
end;
procedure __tagMIXERCAPSW__Wrapper.setwPid(const val : Word);
begin
tagMIXERCAPSW(GetRecordPtr^).wPid := val;
end;
function __tagMIXERCAPSW__Wrapper.getwPid : Word;
begin
result := tagMIXERCAPSW(GetRecordPtr^).wPid;
end;
procedure __tagMIXERCAPSW__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
tagMIXERCAPSW(GetRecordPtr^).vDriverVersion := val;
end;
function __tagMIXERCAPSW__Wrapper.getvDriverVersion : MMVERSION;
begin
result := tagMIXERCAPSW(GetRecordPtr^).vDriverVersion;
end;
procedure __tagMIXERCAPSW__Wrapper.setfdwSupport(const val : DWORD);
begin
tagMIXERCAPSW(GetRecordPtr^).fdwSupport := val;
end;
function __tagMIXERCAPSW__Wrapper.getfdwSupport : DWORD;
begin
result := tagMIXERCAPSW(GetRecordPtr^).fdwSupport;
end;
procedure __tagMIXERCAPSW__Wrapper.setcDestinations(const val : DWORD);
begin
tagMIXERCAPSW(GetRecordPtr^).cDestinations := val;
end;
function __tagMIXERCAPSW__Wrapper.getcDestinations : DWORD;
begin
result := tagMIXERCAPSW(GetRecordPtr^).cDestinations;
end;
function __tagMIXERCONTROLDETAILS_LISTTEXT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMIXERCONTROLDETAILS_LISTTEXT__Wrapper.setdwParam1(const val : DWORD);
begin
tagMIXERCONTROLDETAILS_LISTTEXT(GetRecordPtr^).dwParam1 := val;
end;
function __tagMIXERCONTROLDETAILS_LISTTEXT__Wrapper.getdwParam1 : DWORD;
begin
result := tagMIXERCONTROLDETAILS_LISTTEXT(GetRecordPtr^).dwParam1;
end;
procedure __tagMIXERCONTROLDETAILS_LISTTEXT__Wrapper.setdwParam2(const val : DWORD);
begin
tagMIXERCONTROLDETAILS_LISTTEXT(GetRecordPtr^).dwParam2 := val;
end;
function __tagMIXERCONTROLDETAILS_LISTTEXT__Wrapper.getdwParam2 : DWORD;
begin
result := tagMIXERCONTROLDETAILS_LISTTEXT(GetRecordPtr^).dwParam2;
end;
function __tagMIXERCONTROLDETAILS_LISTTEXTA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMIXERCONTROLDETAILS_LISTTEXTA__Wrapper.setdwParam1(const val : DWORD);
begin
tagMIXERCONTROLDETAILS_LISTTEXTA(GetRecordPtr^).dwParam1 := val;
end;
function __tagMIXERCONTROLDETAILS_LISTTEXTA__Wrapper.getdwParam1 : DWORD;
begin
result := tagMIXERCONTROLDETAILS_LISTTEXTA(GetRecordPtr^).dwParam1;
end;
procedure __tagMIXERCONTROLDETAILS_LISTTEXTA__Wrapper.setdwParam2(const val : DWORD);
begin
tagMIXERCONTROLDETAILS_LISTTEXTA(GetRecordPtr^).dwParam2 := val;
end;
function __tagMIXERCONTROLDETAILS_LISTTEXTA__Wrapper.getdwParam2 : DWORD;
begin
result := tagMIXERCONTROLDETAILS_LISTTEXTA(GetRecordPtr^).dwParam2;
end;
function __tagMIXERCONTROLDETAILS_LISTTEXTW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMIXERCONTROLDETAILS_LISTTEXTW__Wrapper.setdwParam1(const val : DWORD);
begin
tagMIXERCONTROLDETAILS_LISTTEXTW(GetRecordPtr^).dwParam1 := val;
end;
function __tagMIXERCONTROLDETAILS_LISTTEXTW__Wrapper.getdwParam1 : DWORD;
begin
result := tagMIXERCONTROLDETAILS_LISTTEXTW(GetRecordPtr^).dwParam1;
end;
procedure __tagMIXERCONTROLDETAILS_LISTTEXTW__Wrapper.setdwParam2(const val : DWORD);
begin
tagMIXERCONTROLDETAILS_LISTTEXTW(GetRecordPtr^).dwParam2 := val;
end;
function __tagMIXERCONTROLDETAILS_LISTTEXTW__Wrapper.getdwParam2 : DWORD;
begin
result := tagMIXERCONTROLDETAILS_LISTTEXTW(GetRecordPtr^).dwParam2;
end;
function __tagMIXERLINE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMIXERLINE__Wrapper.setcbStruct(const val : DWORD);
begin
tagMIXERLINE(GetRecordPtr^).cbStruct := val;
end;
function __tagMIXERLINE__Wrapper.getcbStruct : DWORD;
begin
result := tagMIXERLINE(GetRecordPtr^).cbStruct;
end;
procedure __tagMIXERLINE__Wrapper.setdwDestination(const val : DWORD);
begin
tagMIXERLINE(GetRecordPtr^).dwDestination := val;
end;
function __tagMIXERLINE__Wrapper.getdwDestination : DWORD;
begin
result := tagMIXERLINE(GetRecordPtr^).dwDestination;
end;
procedure __tagMIXERLINE__Wrapper.setdwSource(const val : DWORD);
begin
tagMIXERLINE(GetRecordPtr^).dwSource := val;
end;
function __tagMIXERLINE__Wrapper.getdwSource : DWORD;
begin
result := tagMIXERLINE(GetRecordPtr^).dwSource;
end;
procedure __tagMIXERLINE__Wrapper.setdwLineID(const val : DWORD);
begin
tagMIXERLINE(GetRecordPtr^).dwLineID := val;
end;
function __tagMIXERLINE__Wrapper.getdwLineID : DWORD;
begin
result := tagMIXERLINE(GetRecordPtr^).dwLineID;
end;
procedure __tagMIXERLINE__Wrapper.setfdwLine(const val : DWORD);
begin
tagMIXERLINE(GetRecordPtr^).fdwLine := val;
end;
function __tagMIXERLINE__Wrapper.getfdwLine : DWORD;
begin
result := tagMIXERLINE(GetRecordPtr^).fdwLine;
end;
procedure __tagMIXERLINE__Wrapper.setdwUser(const val : DWORD);
begin
tagMIXERLINE(GetRecordPtr^).dwUser := val;
end;
function __tagMIXERLINE__Wrapper.getdwUser : DWORD;
begin
result := tagMIXERLINE(GetRecordPtr^).dwUser;
end;
procedure __tagMIXERLINE__Wrapper.setdwComponentType(const val : DWORD);
begin
tagMIXERLINE(GetRecordPtr^).dwComponentType := val;
end;
function __tagMIXERLINE__Wrapper.getdwComponentType : DWORD;
begin
result := tagMIXERLINE(GetRecordPtr^).dwComponentType;
end;
procedure __tagMIXERLINE__Wrapper.setcChannels(const val : DWORD);
begin
tagMIXERLINE(GetRecordPtr^).cChannels := val;
end;
function __tagMIXERLINE__Wrapper.getcChannels : DWORD;
begin
result := tagMIXERLINE(GetRecordPtr^).cChannels;
end;
procedure __tagMIXERLINE__Wrapper.setcConnections(const val : DWORD);
begin
tagMIXERLINE(GetRecordPtr^).cConnections := val;
end;
function __tagMIXERLINE__Wrapper.getcConnections : DWORD;
begin
result := tagMIXERLINE(GetRecordPtr^).cConnections;
end;
procedure __tagMIXERLINE__Wrapper.setcControls(const val : DWORD);
begin
tagMIXERLINE(GetRecordPtr^).cControls := val;
end;
function __tagMIXERLINE__Wrapper.getcControls : DWORD;
begin
result := tagMIXERLINE(GetRecordPtr^).cControls;
end;
function __tagMIXERLINEA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMIXERLINEA__Wrapper.setcbStruct(const val : DWORD);
begin
tagMIXERLINEA(GetRecordPtr^).cbStruct := val;
end;
function __tagMIXERLINEA__Wrapper.getcbStruct : DWORD;
begin
result := tagMIXERLINEA(GetRecordPtr^).cbStruct;
end;
procedure __tagMIXERLINEA__Wrapper.setdwDestination(const val : DWORD);
begin
tagMIXERLINEA(GetRecordPtr^).dwDestination := val;
end;
function __tagMIXERLINEA__Wrapper.getdwDestination : DWORD;
begin
result := tagMIXERLINEA(GetRecordPtr^).dwDestination;
end;
procedure __tagMIXERLINEA__Wrapper.setdwSource(const val : DWORD);
begin
tagMIXERLINEA(GetRecordPtr^).dwSource := val;
end;
function __tagMIXERLINEA__Wrapper.getdwSource : DWORD;
begin
result := tagMIXERLINEA(GetRecordPtr^).dwSource;
end;
procedure __tagMIXERLINEA__Wrapper.setdwLineID(const val : DWORD);
begin
tagMIXERLINEA(GetRecordPtr^).dwLineID := val;
end;
function __tagMIXERLINEA__Wrapper.getdwLineID : DWORD;
begin
result := tagMIXERLINEA(GetRecordPtr^).dwLineID;
end;
procedure __tagMIXERLINEA__Wrapper.setfdwLine(const val : DWORD);
begin
tagMIXERLINEA(GetRecordPtr^).fdwLine := val;
end;
function __tagMIXERLINEA__Wrapper.getfdwLine : DWORD;
begin
result := tagMIXERLINEA(GetRecordPtr^).fdwLine;
end;
procedure __tagMIXERLINEA__Wrapper.setdwUser(const val : DWORD);
begin
tagMIXERLINEA(GetRecordPtr^).dwUser := val;
end;
function __tagMIXERLINEA__Wrapper.getdwUser : DWORD;
begin
result := tagMIXERLINEA(GetRecordPtr^).dwUser;
end;
procedure __tagMIXERLINEA__Wrapper.setdwComponentType(const val : DWORD);
begin
tagMIXERLINEA(GetRecordPtr^).dwComponentType := val;
end;
function __tagMIXERLINEA__Wrapper.getdwComponentType : DWORD;
begin
result := tagMIXERLINEA(GetRecordPtr^).dwComponentType;
end;
procedure __tagMIXERLINEA__Wrapper.setcChannels(const val : DWORD);
begin
tagMIXERLINEA(GetRecordPtr^).cChannels := val;
end;
function __tagMIXERLINEA__Wrapper.getcChannels : DWORD;
begin
result := tagMIXERLINEA(GetRecordPtr^).cChannels;
end;
procedure __tagMIXERLINEA__Wrapper.setcConnections(const val : DWORD);
begin
tagMIXERLINEA(GetRecordPtr^).cConnections := val;
end;
function __tagMIXERLINEA__Wrapper.getcConnections : DWORD;
begin
result := tagMIXERLINEA(GetRecordPtr^).cConnections;
end;
procedure __tagMIXERLINEA__Wrapper.setcControls(const val : DWORD);
begin
tagMIXERLINEA(GetRecordPtr^).cControls := val;
end;
function __tagMIXERLINEA__Wrapper.getcControls : DWORD;
begin
result := tagMIXERLINEA(GetRecordPtr^).cControls;
end;
function __tagMIXERLINECONTROLS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMIXERLINECONTROLS__Wrapper.setcbStruct(const val : DWORD);
begin
tagMIXERLINECONTROLS(GetRecordPtr^).cbStruct := val;
end;
function __tagMIXERLINECONTROLS__Wrapper.getcbStruct : DWORD;
begin
result := tagMIXERLINECONTROLS(GetRecordPtr^).cbStruct;
end;
procedure __tagMIXERLINECONTROLS__Wrapper.setdwLineID(const val : DWORD);
begin
tagMIXERLINECONTROLS(GetRecordPtr^).dwLineID := val;
end;
function __tagMIXERLINECONTROLS__Wrapper.getdwLineID : DWORD;
begin
result := tagMIXERLINECONTROLS(GetRecordPtr^).dwLineID;
end;
procedure __tagMIXERLINECONTROLS__Wrapper.setdwControlID(const val : DWORD);
begin
tagMIXERLINECONTROLS(GetRecordPtr^).dwControlID := val;
end;
function __tagMIXERLINECONTROLS__Wrapper.getdwControlID : DWORD;
begin
result := tagMIXERLINECONTROLS(GetRecordPtr^).dwControlID;
end;
procedure __tagMIXERLINECONTROLS__Wrapper.setdwControlType(const val : DWORD);
begin
tagMIXERLINECONTROLS(GetRecordPtr^).dwControlType := val;
end;
function __tagMIXERLINECONTROLS__Wrapper.getdwControlType : DWORD;
begin
result := tagMIXERLINECONTROLS(GetRecordPtr^).dwControlType;
end;
procedure __tagMIXERLINECONTROLS__Wrapper.setcControls(const val : DWORD);
begin
tagMIXERLINECONTROLS(GetRecordPtr^).cControls := val;
end;
function __tagMIXERLINECONTROLS__Wrapper.getcControls : DWORD;
begin
result := tagMIXERLINECONTROLS(GetRecordPtr^).cControls;
end;
procedure __tagMIXERLINECONTROLS__Wrapper.setcbmxctrl(const val : DWORD);
begin
tagMIXERLINECONTROLS(GetRecordPtr^).cbmxctrl := val;
end;
function __tagMIXERLINECONTROLS__Wrapper.getcbmxctrl : DWORD;
begin
result := tagMIXERLINECONTROLS(GetRecordPtr^).cbmxctrl;
end;
function __tagMIXERLINECONTROLSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMIXERLINECONTROLSA__Wrapper.setcbStruct(const val : DWORD);
begin
tagMIXERLINECONTROLSA(GetRecordPtr^).cbStruct := val;
end;
function __tagMIXERLINECONTROLSA__Wrapper.getcbStruct : DWORD;
begin
result := tagMIXERLINECONTROLSA(GetRecordPtr^).cbStruct;
end;
procedure __tagMIXERLINECONTROLSA__Wrapper.setdwLineID(const val : DWORD);
begin
tagMIXERLINECONTROLSA(GetRecordPtr^).dwLineID := val;
end;
function __tagMIXERLINECONTROLSA__Wrapper.getdwLineID : DWORD;
begin
result := tagMIXERLINECONTROLSA(GetRecordPtr^).dwLineID;
end;
procedure __tagMIXERLINECONTROLSA__Wrapper.setdwControlID(const val : DWORD);
begin
tagMIXERLINECONTROLSA(GetRecordPtr^).dwControlID := val;
end;
function __tagMIXERLINECONTROLSA__Wrapper.getdwControlID : DWORD;
begin
result := tagMIXERLINECONTROLSA(GetRecordPtr^).dwControlID;
end;
procedure __tagMIXERLINECONTROLSA__Wrapper.setdwControlType(const val : DWORD);
begin
tagMIXERLINECONTROLSA(GetRecordPtr^).dwControlType := val;
end;
function __tagMIXERLINECONTROLSA__Wrapper.getdwControlType : DWORD;
begin
result := tagMIXERLINECONTROLSA(GetRecordPtr^).dwControlType;
end;
procedure __tagMIXERLINECONTROLSA__Wrapper.setcControls(const val : DWORD);
begin
tagMIXERLINECONTROLSA(GetRecordPtr^).cControls := val;
end;
function __tagMIXERLINECONTROLSA__Wrapper.getcControls : DWORD;
begin
result := tagMIXERLINECONTROLSA(GetRecordPtr^).cControls;
end;
procedure __tagMIXERLINECONTROLSA__Wrapper.setcbmxctrl(const val : DWORD);
begin
tagMIXERLINECONTROLSA(GetRecordPtr^).cbmxctrl := val;
end;
function __tagMIXERLINECONTROLSA__Wrapper.getcbmxctrl : DWORD;
begin
result := tagMIXERLINECONTROLSA(GetRecordPtr^).cbmxctrl;
end;
function __tagMIXERLINECONTROLSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMIXERLINECONTROLSW__Wrapper.setcbStruct(const val : DWORD);
begin
tagMIXERLINECONTROLSW(GetRecordPtr^).cbStruct := val;
end;
function __tagMIXERLINECONTROLSW__Wrapper.getcbStruct : DWORD;
begin
result := tagMIXERLINECONTROLSW(GetRecordPtr^).cbStruct;
end;
procedure __tagMIXERLINECONTROLSW__Wrapper.setdwLineID(const val : DWORD);
begin
tagMIXERLINECONTROLSW(GetRecordPtr^).dwLineID := val;
end;
function __tagMIXERLINECONTROLSW__Wrapper.getdwLineID : DWORD;
begin
result := tagMIXERLINECONTROLSW(GetRecordPtr^).dwLineID;
end;
procedure __tagMIXERLINECONTROLSW__Wrapper.setdwControlID(const val : DWORD);
begin
tagMIXERLINECONTROLSW(GetRecordPtr^).dwControlID := val;
end;
function __tagMIXERLINECONTROLSW__Wrapper.getdwControlID : DWORD;
begin
result := tagMIXERLINECONTROLSW(GetRecordPtr^).dwControlID;
end;
procedure __tagMIXERLINECONTROLSW__Wrapper.setdwControlType(const val : DWORD);
begin
tagMIXERLINECONTROLSW(GetRecordPtr^).dwControlType := val;
end;
function __tagMIXERLINECONTROLSW__Wrapper.getdwControlType : DWORD;
begin
result := tagMIXERLINECONTROLSW(GetRecordPtr^).dwControlType;
end;
procedure __tagMIXERLINECONTROLSW__Wrapper.setcControls(const val : DWORD);
begin
tagMIXERLINECONTROLSW(GetRecordPtr^).cControls := val;
end;
function __tagMIXERLINECONTROLSW__Wrapper.getcControls : DWORD;
begin
result := tagMIXERLINECONTROLSW(GetRecordPtr^).cControls;
end;
procedure __tagMIXERLINECONTROLSW__Wrapper.setcbmxctrl(const val : DWORD);
begin
tagMIXERLINECONTROLSW(GetRecordPtr^).cbmxctrl := val;
end;
function __tagMIXERLINECONTROLSW__Wrapper.getcbmxctrl : DWORD;
begin
result := tagMIXERLINECONTROLSW(GetRecordPtr^).cbmxctrl;
end;
function __tagMIXERLINEW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMIXERLINEW__Wrapper.setcbStruct(const val : DWORD);
begin
tagMIXERLINEW(GetRecordPtr^).cbStruct := val;
end;
function __tagMIXERLINEW__Wrapper.getcbStruct : DWORD;
begin
result := tagMIXERLINEW(GetRecordPtr^).cbStruct;
end;
procedure __tagMIXERLINEW__Wrapper.setdwDestination(const val : DWORD);
begin
tagMIXERLINEW(GetRecordPtr^).dwDestination := val;
end;
function __tagMIXERLINEW__Wrapper.getdwDestination : DWORD;
begin
result := tagMIXERLINEW(GetRecordPtr^).dwDestination;
end;
procedure __tagMIXERLINEW__Wrapper.setdwSource(const val : DWORD);
begin
tagMIXERLINEW(GetRecordPtr^).dwSource := val;
end;
function __tagMIXERLINEW__Wrapper.getdwSource : DWORD;
begin
result := tagMIXERLINEW(GetRecordPtr^).dwSource;
end;
procedure __tagMIXERLINEW__Wrapper.setdwLineID(const val : DWORD);
begin
tagMIXERLINEW(GetRecordPtr^).dwLineID := val;
end;
function __tagMIXERLINEW__Wrapper.getdwLineID : DWORD;
begin
result := tagMIXERLINEW(GetRecordPtr^).dwLineID;
end;
procedure __tagMIXERLINEW__Wrapper.setfdwLine(const val : DWORD);
begin
tagMIXERLINEW(GetRecordPtr^).fdwLine := val;
end;
function __tagMIXERLINEW__Wrapper.getfdwLine : DWORD;
begin
result := tagMIXERLINEW(GetRecordPtr^).fdwLine;
end;
procedure __tagMIXERLINEW__Wrapper.setdwUser(const val : DWORD);
begin
tagMIXERLINEW(GetRecordPtr^).dwUser := val;
end;
function __tagMIXERLINEW__Wrapper.getdwUser : DWORD;
begin
result := tagMIXERLINEW(GetRecordPtr^).dwUser;
end;
procedure __tagMIXERLINEW__Wrapper.setdwComponentType(const val : DWORD);
begin
tagMIXERLINEW(GetRecordPtr^).dwComponentType := val;
end;
function __tagMIXERLINEW__Wrapper.getdwComponentType : DWORD;
begin
result := tagMIXERLINEW(GetRecordPtr^).dwComponentType;
end;
procedure __tagMIXERLINEW__Wrapper.setcChannels(const val : DWORD);
begin
tagMIXERLINEW(GetRecordPtr^).cChannels := val;
end;
function __tagMIXERLINEW__Wrapper.getcChannels : DWORD;
begin
result := tagMIXERLINEW(GetRecordPtr^).cChannels;
end;
procedure __tagMIXERLINEW__Wrapper.setcConnections(const val : DWORD);
begin
tagMIXERLINEW(GetRecordPtr^).cConnections := val;
end;
function __tagMIXERLINEW__Wrapper.getcConnections : DWORD;
begin
result := tagMIXERLINEW(GetRecordPtr^).cConnections;
end;
procedure __tagMIXERLINEW__Wrapper.setcControls(const val : DWORD);
begin
tagMIXERLINEW(GetRecordPtr^).cControls := val;
end;
function __tagMIXERLINEW__Wrapper.getcControls : DWORD;
begin
result := tagMIXERLINEW(GetRecordPtr^).cControls;
end;
function __tagWAVEINCAPS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagWAVEINCAPS__Wrapper.setwMid(const val : Word);
begin
tagWAVEINCAPS(GetRecordPtr^).wMid := val;
end;
function __tagWAVEINCAPS__Wrapper.getwMid : Word;
begin
result := tagWAVEINCAPS(GetRecordPtr^).wMid;
end;
procedure __tagWAVEINCAPS__Wrapper.setwPid(const val : Word);
begin
tagWAVEINCAPS(GetRecordPtr^).wPid := val;
end;
function __tagWAVEINCAPS__Wrapper.getwPid : Word;
begin
result := tagWAVEINCAPS(GetRecordPtr^).wPid;
end;
procedure __tagWAVEINCAPS__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
tagWAVEINCAPS(GetRecordPtr^).vDriverVersion := val;
end;
function __tagWAVEINCAPS__Wrapper.getvDriverVersion : MMVERSION;
begin
result := tagWAVEINCAPS(GetRecordPtr^).vDriverVersion;
end;
procedure __tagWAVEINCAPS__Wrapper.setdwFormats(const val : DWORD);
begin
tagWAVEINCAPS(GetRecordPtr^).dwFormats := val;
end;
function __tagWAVEINCAPS__Wrapper.getdwFormats : DWORD;
begin
result := tagWAVEINCAPS(GetRecordPtr^).dwFormats;
end;
procedure __tagWAVEINCAPS__Wrapper.setwChannels(const val : Word);
begin
tagWAVEINCAPS(GetRecordPtr^).wChannels := val;
end;
function __tagWAVEINCAPS__Wrapper.getwChannels : Word;
begin
result := tagWAVEINCAPS(GetRecordPtr^).wChannels;
end;
procedure __tagWAVEINCAPS__Wrapper.setwReserved1(const val : Word);
begin
tagWAVEINCAPS(GetRecordPtr^).wReserved1 := val;
end;
function __tagWAVEINCAPS__Wrapper.getwReserved1 : Word;
begin
result := tagWAVEINCAPS(GetRecordPtr^).wReserved1;
end;
function __tagWAVEINCAPSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagWAVEINCAPSA__Wrapper.setwMid(const val : Word);
begin
tagWAVEINCAPSA(GetRecordPtr^).wMid := val;
end;
function __tagWAVEINCAPSA__Wrapper.getwMid : Word;
begin
result := tagWAVEINCAPSA(GetRecordPtr^).wMid;
end;
procedure __tagWAVEINCAPSA__Wrapper.setwPid(const val : Word);
begin
tagWAVEINCAPSA(GetRecordPtr^).wPid := val;
end;
function __tagWAVEINCAPSA__Wrapper.getwPid : Word;
begin
result := tagWAVEINCAPSA(GetRecordPtr^).wPid;
end;
procedure __tagWAVEINCAPSA__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
tagWAVEINCAPSA(GetRecordPtr^).vDriverVersion := val;
end;
function __tagWAVEINCAPSA__Wrapper.getvDriverVersion : MMVERSION;
begin
result := tagWAVEINCAPSA(GetRecordPtr^).vDriverVersion;
end;
procedure __tagWAVEINCAPSA__Wrapper.setdwFormats(const val : DWORD);
begin
tagWAVEINCAPSA(GetRecordPtr^).dwFormats := val;
end;
function __tagWAVEINCAPSA__Wrapper.getdwFormats : DWORD;
begin
result := tagWAVEINCAPSA(GetRecordPtr^).dwFormats;
end;
procedure __tagWAVEINCAPSA__Wrapper.setwChannels(const val : Word);
begin
tagWAVEINCAPSA(GetRecordPtr^).wChannels := val;
end;
function __tagWAVEINCAPSA__Wrapper.getwChannels : Word;
begin
result := tagWAVEINCAPSA(GetRecordPtr^).wChannels;
end;
procedure __tagWAVEINCAPSA__Wrapper.setwReserved1(const val : Word);
begin
tagWAVEINCAPSA(GetRecordPtr^).wReserved1 := val;
end;
function __tagWAVEINCAPSA__Wrapper.getwReserved1 : Word;
begin
result := tagWAVEINCAPSA(GetRecordPtr^).wReserved1;
end;
function __tagWAVEINCAPSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagWAVEINCAPSW__Wrapper.setwMid(const val : Word);
begin
tagWAVEINCAPSW(GetRecordPtr^).wMid := val;
end;
function __tagWAVEINCAPSW__Wrapper.getwMid : Word;
begin
result := tagWAVEINCAPSW(GetRecordPtr^).wMid;
end;
procedure __tagWAVEINCAPSW__Wrapper.setwPid(const val : Word);
begin
tagWAVEINCAPSW(GetRecordPtr^).wPid := val;
end;
function __tagWAVEINCAPSW__Wrapper.getwPid : Word;
begin
result := tagWAVEINCAPSW(GetRecordPtr^).wPid;
end;
procedure __tagWAVEINCAPSW__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
tagWAVEINCAPSW(GetRecordPtr^).vDriverVersion := val;
end;
function __tagWAVEINCAPSW__Wrapper.getvDriverVersion : MMVERSION;
begin
result := tagWAVEINCAPSW(GetRecordPtr^).vDriverVersion;
end;
procedure __tagWAVEINCAPSW__Wrapper.setdwFormats(const val : DWORD);
begin
tagWAVEINCAPSW(GetRecordPtr^).dwFormats := val;
end;
function __tagWAVEINCAPSW__Wrapper.getdwFormats : DWORD;
begin
result := tagWAVEINCAPSW(GetRecordPtr^).dwFormats;
end;
procedure __tagWAVEINCAPSW__Wrapper.setwChannels(const val : Word);
begin
tagWAVEINCAPSW(GetRecordPtr^).wChannels := val;
end;
function __tagWAVEINCAPSW__Wrapper.getwChannels : Word;
begin
result := tagWAVEINCAPSW(GetRecordPtr^).wChannels;
end;
procedure __tagWAVEINCAPSW__Wrapper.setwReserved1(const val : Word);
begin
tagWAVEINCAPSW(GetRecordPtr^).wReserved1 := val;
end;
function __tagWAVEINCAPSW__Wrapper.getwReserved1 : Word;
begin
result := tagWAVEINCAPSW(GetRecordPtr^).wReserved1;
end;
function __tagWAVEOUTCAPS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagWAVEOUTCAPS__Wrapper.setwMid(const val : Word);
begin
tagWAVEOUTCAPS(GetRecordPtr^).wMid := val;
end;
function __tagWAVEOUTCAPS__Wrapper.getwMid : Word;
begin
result := tagWAVEOUTCAPS(GetRecordPtr^).wMid;
end;
procedure __tagWAVEOUTCAPS__Wrapper.setwPid(const val : Word);
begin
tagWAVEOUTCAPS(GetRecordPtr^).wPid := val;
end;
function __tagWAVEOUTCAPS__Wrapper.getwPid : Word;
begin
result := tagWAVEOUTCAPS(GetRecordPtr^).wPid;
end;
procedure __tagWAVEOUTCAPS__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
tagWAVEOUTCAPS(GetRecordPtr^).vDriverVersion := val;
end;
function __tagWAVEOUTCAPS__Wrapper.getvDriverVersion : MMVERSION;
begin
result := tagWAVEOUTCAPS(GetRecordPtr^).vDriverVersion;
end;
procedure __tagWAVEOUTCAPS__Wrapper.setdwFormats(const val : DWORD);
begin
tagWAVEOUTCAPS(GetRecordPtr^).dwFormats := val;
end;
function __tagWAVEOUTCAPS__Wrapper.getdwFormats : DWORD;
begin
result := tagWAVEOUTCAPS(GetRecordPtr^).dwFormats;
end;
procedure __tagWAVEOUTCAPS__Wrapper.setwChannels(const val : Word);
begin
tagWAVEOUTCAPS(GetRecordPtr^).wChannels := val;
end;
function __tagWAVEOUTCAPS__Wrapper.getwChannels : Word;
begin
result := tagWAVEOUTCAPS(GetRecordPtr^).wChannels;
end;
procedure __tagWAVEOUTCAPS__Wrapper.setdwSupport(const val : DWORD);
begin
tagWAVEOUTCAPS(GetRecordPtr^).dwSupport := val;
end;
function __tagWAVEOUTCAPS__Wrapper.getdwSupport : DWORD;
begin
result := tagWAVEOUTCAPS(GetRecordPtr^).dwSupport;
end;
function __tagWAVEOUTCAPSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagWAVEOUTCAPSA__Wrapper.setwMid(const val : Word);
begin
tagWAVEOUTCAPSA(GetRecordPtr^).wMid := val;
end;
function __tagWAVEOUTCAPSA__Wrapper.getwMid : Word;
begin
result := tagWAVEOUTCAPSA(GetRecordPtr^).wMid;
end;
procedure __tagWAVEOUTCAPSA__Wrapper.setwPid(const val : Word);
begin
tagWAVEOUTCAPSA(GetRecordPtr^).wPid := val;
end;
function __tagWAVEOUTCAPSA__Wrapper.getwPid : Word;
begin
result := tagWAVEOUTCAPSA(GetRecordPtr^).wPid;
end;
procedure __tagWAVEOUTCAPSA__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
tagWAVEOUTCAPSA(GetRecordPtr^).vDriverVersion := val;
end;
function __tagWAVEOUTCAPSA__Wrapper.getvDriverVersion : MMVERSION;
begin
result := tagWAVEOUTCAPSA(GetRecordPtr^).vDriverVersion;
end;
procedure __tagWAVEOUTCAPSA__Wrapper.setdwFormats(const val : DWORD);
begin
tagWAVEOUTCAPSA(GetRecordPtr^).dwFormats := val;
end;
function __tagWAVEOUTCAPSA__Wrapper.getdwFormats : DWORD;
begin
result := tagWAVEOUTCAPSA(GetRecordPtr^).dwFormats;
end;
procedure __tagWAVEOUTCAPSA__Wrapper.setwChannels(const val : Word);
begin
tagWAVEOUTCAPSA(GetRecordPtr^).wChannels := val;
end;
function __tagWAVEOUTCAPSA__Wrapper.getwChannels : Word;
begin
result := tagWAVEOUTCAPSA(GetRecordPtr^).wChannels;
end;
procedure __tagWAVEOUTCAPSA__Wrapper.setdwSupport(const val : DWORD);
begin
tagWAVEOUTCAPSA(GetRecordPtr^).dwSupport := val;
end;
function __tagWAVEOUTCAPSA__Wrapper.getdwSupport : DWORD;
begin
result := tagWAVEOUTCAPSA(GetRecordPtr^).dwSupport;
end;
function __tagWAVEOUTCAPSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagWAVEOUTCAPSW__Wrapper.setwMid(const val : Word);
begin
tagWAVEOUTCAPSW(GetRecordPtr^).wMid := val;
end;
function __tagWAVEOUTCAPSW__Wrapper.getwMid : Word;
begin
result := tagWAVEOUTCAPSW(GetRecordPtr^).wMid;
end;
procedure __tagWAVEOUTCAPSW__Wrapper.setwPid(const val : Word);
begin
tagWAVEOUTCAPSW(GetRecordPtr^).wPid := val;
end;
function __tagWAVEOUTCAPSW__Wrapper.getwPid : Word;
begin
result := tagWAVEOUTCAPSW(GetRecordPtr^).wPid;
end;
procedure __tagWAVEOUTCAPSW__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
tagWAVEOUTCAPSW(GetRecordPtr^).vDriverVersion := val;
end;
function __tagWAVEOUTCAPSW__Wrapper.getvDriverVersion : MMVERSION;
begin
result := tagWAVEOUTCAPSW(GetRecordPtr^).vDriverVersion;
end;
procedure __tagWAVEOUTCAPSW__Wrapper.setdwFormats(const val : DWORD);
begin
tagWAVEOUTCAPSW(GetRecordPtr^).dwFormats := val;
end;
function __tagWAVEOUTCAPSW__Wrapper.getdwFormats : DWORD;
begin
result := tagWAVEOUTCAPSW(GetRecordPtr^).dwFormats;
end;
procedure __tagWAVEOUTCAPSW__Wrapper.setwChannels(const val : Word);
begin
tagWAVEOUTCAPSW(GetRecordPtr^).wChannels := val;
end;
function __tagWAVEOUTCAPSW__Wrapper.getwChannels : Word;
begin
result := tagWAVEOUTCAPSW(GetRecordPtr^).wChannels;
end;
procedure __tagWAVEOUTCAPSW__Wrapper.setdwSupport(const val : DWORD);
begin
tagWAVEOUTCAPSW(GetRecordPtr^).dwSupport := val;
end;
function __tagWAVEOUTCAPSW__Wrapper.getdwSupport : DWORD;
begin
result := tagWAVEOUTCAPSW(GetRecordPtr^).dwSupport;
end;
function __TAuxCaps__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TAuxCaps__Wrapper.setwMid(const val : Word);
begin
TAuxCaps(GetRecordPtr^).wMid := val;
end;
function __TAuxCaps__Wrapper.getwMid : Word;
begin
result := TAuxCaps(GetRecordPtr^).wMid;
end;
procedure __TAuxCaps__Wrapper.setwPid(const val : Word);
begin
TAuxCaps(GetRecordPtr^).wPid := val;
end;
function __TAuxCaps__Wrapper.getwPid : Word;
begin
result := TAuxCaps(GetRecordPtr^).wPid;
end;
procedure __TAuxCaps__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
TAuxCaps(GetRecordPtr^).vDriverVersion := val;
end;
function __TAuxCaps__Wrapper.getvDriverVersion : MMVERSION;
begin
result := TAuxCaps(GetRecordPtr^).vDriverVersion;
end;
procedure __TAuxCaps__Wrapper.setwTechnology(const val : Word);
begin
TAuxCaps(GetRecordPtr^).wTechnology := val;
end;
function __TAuxCaps__Wrapper.getwTechnology : Word;
begin
result := TAuxCaps(GetRecordPtr^).wTechnology;
end;
procedure __TAuxCaps__Wrapper.setdwSupport(const val : DWORD);
begin
TAuxCaps(GetRecordPtr^).dwSupport := val;
end;
function __TAuxCaps__Wrapper.getdwSupport : DWORD;
begin
result := TAuxCaps(GetRecordPtr^).dwSupport;
end;
function __TAuxCapsA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TAuxCapsA__Wrapper.setwMid(const val : Word);
begin
TAuxCapsA(GetRecordPtr^).wMid := val;
end;
function __TAuxCapsA__Wrapper.getwMid : Word;
begin
result := TAuxCapsA(GetRecordPtr^).wMid;
end;
procedure __TAuxCapsA__Wrapper.setwPid(const val : Word);
begin
TAuxCapsA(GetRecordPtr^).wPid := val;
end;
function __TAuxCapsA__Wrapper.getwPid : Word;
begin
result := TAuxCapsA(GetRecordPtr^).wPid;
end;
procedure __TAuxCapsA__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
TAuxCapsA(GetRecordPtr^).vDriverVersion := val;
end;
function __TAuxCapsA__Wrapper.getvDriverVersion : MMVERSION;
begin
result := TAuxCapsA(GetRecordPtr^).vDriverVersion;
end;
procedure __TAuxCapsA__Wrapper.setwTechnology(const val : Word);
begin
TAuxCapsA(GetRecordPtr^).wTechnology := val;
end;
function __TAuxCapsA__Wrapper.getwTechnology : Word;
begin
result := TAuxCapsA(GetRecordPtr^).wTechnology;
end;
procedure __TAuxCapsA__Wrapper.setdwSupport(const val : DWORD);
begin
TAuxCapsA(GetRecordPtr^).dwSupport := val;
end;
function __TAuxCapsA__Wrapper.getdwSupport : DWORD;
begin
result := TAuxCapsA(GetRecordPtr^).dwSupport;
end;
function __TAuxCapsW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TAuxCapsW__Wrapper.setwMid(const val : Word);
begin
TAuxCapsW(GetRecordPtr^).wMid := val;
end;
function __TAuxCapsW__Wrapper.getwMid : Word;
begin
result := TAuxCapsW(GetRecordPtr^).wMid;
end;
procedure __TAuxCapsW__Wrapper.setwPid(const val : Word);
begin
TAuxCapsW(GetRecordPtr^).wPid := val;
end;
function __TAuxCapsW__Wrapper.getwPid : Word;
begin
result := TAuxCapsW(GetRecordPtr^).wPid;
end;
procedure __TAuxCapsW__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
TAuxCapsW(GetRecordPtr^).vDriverVersion := val;
end;
function __TAuxCapsW__Wrapper.getvDriverVersion : MMVERSION;
begin
result := TAuxCapsW(GetRecordPtr^).vDriverVersion;
end;
procedure __TAuxCapsW__Wrapper.setwTechnology(const val : Word);
begin
TAuxCapsW(GetRecordPtr^).wTechnology := val;
end;
function __TAuxCapsW__Wrapper.getwTechnology : Word;
begin
result := TAuxCapsW(GetRecordPtr^).wTechnology;
end;
procedure __TAuxCapsW__Wrapper.setdwSupport(const val : DWORD);
begin
TAuxCapsW(GetRecordPtr^).dwSupport := val;
end;
function __TAuxCapsW__Wrapper.getdwSupport : DWORD;
begin
result := TAuxCapsW(GetRecordPtr^).dwSupport;
end;
function __TDrvConfigInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDrvConfigInfo__Wrapper.setdwDCISize(const val : DWORD);
begin
TDrvConfigInfo(GetRecordPtr^).dwDCISize := val;
end;
function __TDrvConfigInfo__Wrapper.getdwDCISize : DWORD;
begin
result := TDrvConfigInfo(GetRecordPtr^).dwDCISize;
end;
function __TDrvConfigInfoEx__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDrvConfigInfoEx__Wrapper.setdwDCISize(const val : DWORD);
begin
TDrvConfigInfoEx(GetRecordPtr^).dwDCISize := val;
end;
function __TDrvConfigInfoEx__Wrapper.getdwDCISize : DWORD;
begin
result := TDrvConfigInfoEx(GetRecordPtr^).dwDCISize;
end;
procedure __TDrvConfigInfoEx__Wrapper.setdnDevNode(const val : DWORD);
begin
TDrvConfigInfoEx(GetRecordPtr^).dnDevNode := val;
end;
function __TDrvConfigInfoEx__Wrapper.getdnDevNode : DWORD;
begin
result := TDrvConfigInfoEx(GetRecordPtr^).dnDevNode;
end;
function __TIMECAPS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIMECAPS__Wrapper.setwPeriodMin(const val : UINT);
begin
TIMECAPS(GetRecordPtr^).wPeriodMin := val;
end;
function __TIMECAPS__Wrapper.getwPeriodMin : UINT;
begin
result := TIMECAPS(GetRecordPtr^).wPeriodMin;
end;
procedure __TIMECAPS__Wrapper.setwPeriodMax(const val : UINT);
begin
TIMECAPS(GetRecordPtr^).wPeriodMax := val;
end;
function __TIMECAPS__Wrapper.getwPeriodMax : UINT;
begin
result := TIMECAPS(GetRecordPtr^).wPeriodMax;
end;
function __timecaps_tag__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __timecaps_tag__Wrapper.setwPeriodMin(const val : UINT);
begin
timecaps_tag(GetRecordPtr^).wPeriodMin := val;
end;
function __timecaps_tag__Wrapper.getwPeriodMin : UINT;
begin
result := timecaps_tag(GetRecordPtr^).wPeriodMin;
end;
procedure __timecaps_tag__Wrapper.setwPeriodMax(const val : UINT);
begin
timecaps_tag(GetRecordPtr^).wPeriodMax := val;
end;
function __timecaps_tag__Wrapper.getwPeriodMax : UINT;
begin
result := timecaps_tag(GetRecordPtr^).wPeriodMax;
end;
function __TJoyCaps__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TJoyCaps__Wrapper.setwMid(const val : Word);
begin
TJoyCaps(GetRecordPtr^).wMid := val;
end;
function __TJoyCaps__Wrapper.getwMid : Word;
begin
result := TJoyCaps(GetRecordPtr^).wMid;
end;
procedure __TJoyCaps__Wrapper.setwPid(const val : Word);
begin
TJoyCaps(GetRecordPtr^).wPid := val;
end;
function __TJoyCaps__Wrapper.getwPid : Word;
begin
result := TJoyCaps(GetRecordPtr^).wPid;
end;
procedure __TJoyCaps__Wrapper.setwXmin(const val : UINT);
begin
TJoyCaps(GetRecordPtr^).wXmin := val;
end;
function __TJoyCaps__Wrapper.getwXmin : UINT;
begin
result := TJoyCaps(GetRecordPtr^).wXmin;
end;
procedure __TJoyCaps__Wrapper.setwXmax(const val : UINT);
begin
TJoyCaps(GetRecordPtr^).wXmax := val;
end;
function __TJoyCaps__Wrapper.getwXmax : UINT;
begin
result := TJoyCaps(GetRecordPtr^).wXmax;
end;
procedure __TJoyCaps__Wrapper.setwYmin(const val : UINT);
begin
TJoyCaps(GetRecordPtr^).wYmin := val;
end;
function __TJoyCaps__Wrapper.getwYmin : UINT;
begin
result := TJoyCaps(GetRecordPtr^).wYmin;
end;
procedure __TJoyCaps__Wrapper.setwYmax(const val : UINT);
begin
TJoyCaps(GetRecordPtr^).wYmax := val;
end;
function __TJoyCaps__Wrapper.getwYmax : UINT;
begin
result := TJoyCaps(GetRecordPtr^).wYmax;
end;
procedure __TJoyCaps__Wrapper.setwZmin(const val : UINT);
begin
TJoyCaps(GetRecordPtr^).wZmin := val;
end;
function __TJoyCaps__Wrapper.getwZmin : UINT;
begin
result := TJoyCaps(GetRecordPtr^).wZmin;
end;
procedure __TJoyCaps__Wrapper.setwZmax(const val : UINT);
begin
TJoyCaps(GetRecordPtr^).wZmax := val;
end;
function __TJoyCaps__Wrapper.getwZmax : UINT;
begin
result := TJoyCaps(GetRecordPtr^).wZmax;
end;
procedure __TJoyCaps__Wrapper.setwNumButtons(const val : UINT);
begin
TJoyCaps(GetRecordPtr^).wNumButtons := val;
end;
function __TJoyCaps__Wrapper.getwNumButtons : UINT;
begin
result := TJoyCaps(GetRecordPtr^).wNumButtons;
end;
procedure __TJoyCaps__Wrapper.setwPeriodMin(const val : UINT);
begin
TJoyCaps(GetRecordPtr^).wPeriodMin := val;
end;
function __TJoyCaps__Wrapper.getwPeriodMin : UINT;
begin
result := TJoyCaps(GetRecordPtr^).wPeriodMin;
end;
procedure __TJoyCaps__Wrapper.setwPeriodMax(const val : UINT);
begin
TJoyCaps(GetRecordPtr^).wPeriodMax := val;
end;
function __TJoyCaps__Wrapper.getwPeriodMax : UINT;
begin
result := TJoyCaps(GetRecordPtr^).wPeriodMax;
end;
procedure __TJoyCaps__Wrapper.setwRmin(const val : UINT);
begin
TJoyCaps(GetRecordPtr^).wRmin := val;
end;
function __TJoyCaps__Wrapper.getwRmin : UINT;
begin
result := TJoyCaps(GetRecordPtr^).wRmin;
end;
procedure __TJoyCaps__Wrapper.setwRmax(const val : UINT);
begin
TJoyCaps(GetRecordPtr^).wRmax := val;
end;
function __TJoyCaps__Wrapper.getwRmax : UINT;
begin
result := TJoyCaps(GetRecordPtr^).wRmax;
end;
procedure __TJoyCaps__Wrapper.setwUmin(const val : UINT);
begin
TJoyCaps(GetRecordPtr^).wUmin := val;
end;
function __TJoyCaps__Wrapper.getwUmin : UINT;
begin
result := TJoyCaps(GetRecordPtr^).wUmin;
end;
procedure __TJoyCaps__Wrapper.setwUmax(const val : UINT);
begin
TJoyCaps(GetRecordPtr^).wUmax := val;
end;
function __TJoyCaps__Wrapper.getwUmax : UINT;
begin
result := TJoyCaps(GetRecordPtr^).wUmax;
end;
procedure __TJoyCaps__Wrapper.setwVmin(const val : UINT);
begin
TJoyCaps(GetRecordPtr^).wVmin := val;
end;
function __TJoyCaps__Wrapper.getwVmin : UINT;
begin
result := TJoyCaps(GetRecordPtr^).wVmin;
end;
procedure __TJoyCaps__Wrapper.setwVmax(const val : UINT);
begin
TJoyCaps(GetRecordPtr^).wVmax := val;
end;
function __TJoyCaps__Wrapper.getwVmax : UINT;
begin
result := TJoyCaps(GetRecordPtr^).wVmax;
end;
procedure __TJoyCaps__Wrapper.setwCaps(const val : UINT);
begin
TJoyCaps(GetRecordPtr^).wCaps := val;
end;
function __TJoyCaps__Wrapper.getwCaps : UINT;
begin
result := TJoyCaps(GetRecordPtr^).wCaps;
end;
procedure __TJoyCaps__Wrapper.setwMaxAxes(const val : UINT);
begin
TJoyCaps(GetRecordPtr^).wMaxAxes := val;
end;
function __TJoyCaps__Wrapper.getwMaxAxes : UINT;
begin
result := TJoyCaps(GetRecordPtr^).wMaxAxes;
end;
procedure __TJoyCaps__Wrapper.setwNumAxes(const val : UINT);
begin
TJoyCaps(GetRecordPtr^).wNumAxes := val;
end;
function __TJoyCaps__Wrapper.getwNumAxes : UINT;
begin
result := TJoyCaps(GetRecordPtr^).wNumAxes;
end;
procedure __TJoyCaps__Wrapper.setwMaxButtons(const val : UINT);
begin
TJoyCaps(GetRecordPtr^).wMaxButtons := val;
end;
function __TJoyCaps__Wrapper.getwMaxButtons : UINT;
begin
result := TJoyCaps(GetRecordPtr^).wMaxButtons;
end;
function __TJoyCapsA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TJoyCapsA__Wrapper.setwMid(const val : Word);
begin
TJoyCapsA(GetRecordPtr^).wMid := val;
end;
function __TJoyCapsA__Wrapper.getwMid : Word;
begin
result := TJoyCapsA(GetRecordPtr^).wMid;
end;
procedure __TJoyCapsA__Wrapper.setwPid(const val : Word);
begin
TJoyCapsA(GetRecordPtr^).wPid := val;
end;
function __TJoyCapsA__Wrapper.getwPid : Word;
begin
result := TJoyCapsA(GetRecordPtr^).wPid;
end;
procedure __TJoyCapsA__Wrapper.setwXmin(const val : UINT);
begin
TJoyCapsA(GetRecordPtr^).wXmin := val;
end;
function __TJoyCapsA__Wrapper.getwXmin : UINT;
begin
result := TJoyCapsA(GetRecordPtr^).wXmin;
end;
procedure __TJoyCapsA__Wrapper.setwXmax(const val : UINT);
begin
TJoyCapsA(GetRecordPtr^).wXmax := val;
end;
function __TJoyCapsA__Wrapper.getwXmax : UINT;
begin
result := TJoyCapsA(GetRecordPtr^).wXmax;
end;
procedure __TJoyCapsA__Wrapper.setwYmin(const val : UINT);
begin
TJoyCapsA(GetRecordPtr^).wYmin := val;
end;
function __TJoyCapsA__Wrapper.getwYmin : UINT;
begin
result := TJoyCapsA(GetRecordPtr^).wYmin;
end;
procedure __TJoyCapsA__Wrapper.setwYmax(const val : UINT);
begin
TJoyCapsA(GetRecordPtr^).wYmax := val;
end;
function __TJoyCapsA__Wrapper.getwYmax : UINT;
begin
result := TJoyCapsA(GetRecordPtr^).wYmax;
end;
procedure __TJoyCapsA__Wrapper.setwZmin(const val : UINT);
begin
TJoyCapsA(GetRecordPtr^).wZmin := val;
end;
function __TJoyCapsA__Wrapper.getwZmin : UINT;
begin
result := TJoyCapsA(GetRecordPtr^).wZmin;
end;
procedure __TJoyCapsA__Wrapper.setwZmax(const val : UINT);
begin
TJoyCapsA(GetRecordPtr^).wZmax := val;
end;
function __TJoyCapsA__Wrapper.getwZmax : UINT;
begin
result := TJoyCapsA(GetRecordPtr^).wZmax;
end;
procedure __TJoyCapsA__Wrapper.setwNumButtons(const val : UINT);
begin
TJoyCapsA(GetRecordPtr^).wNumButtons := val;
end;
function __TJoyCapsA__Wrapper.getwNumButtons : UINT;
begin
result := TJoyCapsA(GetRecordPtr^).wNumButtons;
end;
procedure __TJoyCapsA__Wrapper.setwPeriodMin(const val : UINT);
begin
TJoyCapsA(GetRecordPtr^).wPeriodMin := val;
end;
function __TJoyCapsA__Wrapper.getwPeriodMin : UINT;
begin
result := TJoyCapsA(GetRecordPtr^).wPeriodMin;
end;
procedure __TJoyCapsA__Wrapper.setwPeriodMax(const val : UINT);
begin
TJoyCapsA(GetRecordPtr^).wPeriodMax := val;
end;
function __TJoyCapsA__Wrapper.getwPeriodMax : UINT;
begin
result := TJoyCapsA(GetRecordPtr^).wPeriodMax;
end;
procedure __TJoyCapsA__Wrapper.setwRmin(const val : UINT);
begin
TJoyCapsA(GetRecordPtr^).wRmin := val;
end;
function __TJoyCapsA__Wrapper.getwRmin : UINT;
begin
result := TJoyCapsA(GetRecordPtr^).wRmin;
end;
procedure __TJoyCapsA__Wrapper.setwRmax(const val : UINT);
begin
TJoyCapsA(GetRecordPtr^).wRmax := val;
end;
function __TJoyCapsA__Wrapper.getwRmax : UINT;
begin
result := TJoyCapsA(GetRecordPtr^).wRmax;
end;
procedure __TJoyCapsA__Wrapper.setwUmin(const val : UINT);
begin
TJoyCapsA(GetRecordPtr^).wUmin := val;
end;
function __TJoyCapsA__Wrapper.getwUmin : UINT;
begin
result := TJoyCapsA(GetRecordPtr^).wUmin;
end;
procedure __TJoyCapsA__Wrapper.setwUmax(const val : UINT);
begin
TJoyCapsA(GetRecordPtr^).wUmax := val;
end;
function __TJoyCapsA__Wrapper.getwUmax : UINT;
begin
result := TJoyCapsA(GetRecordPtr^).wUmax;
end;
procedure __TJoyCapsA__Wrapper.setwVmin(const val : UINT);
begin
TJoyCapsA(GetRecordPtr^).wVmin := val;
end;
function __TJoyCapsA__Wrapper.getwVmin : UINT;
begin
result := TJoyCapsA(GetRecordPtr^).wVmin;
end;
procedure __TJoyCapsA__Wrapper.setwVmax(const val : UINT);
begin
TJoyCapsA(GetRecordPtr^).wVmax := val;
end;
function __TJoyCapsA__Wrapper.getwVmax : UINT;
begin
result := TJoyCapsA(GetRecordPtr^).wVmax;
end;
procedure __TJoyCapsA__Wrapper.setwCaps(const val : UINT);
begin
TJoyCapsA(GetRecordPtr^).wCaps := val;
end;
function __TJoyCapsA__Wrapper.getwCaps : UINT;
begin
result := TJoyCapsA(GetRecordPtr^).wCaps;
end;
procedure __TJoyCapsA__Wrapper.setwMaxAxes(const val : UINT);
begin
TJoyCapsA(GetRecordPtr^).wMaxAxes := val;
end;
function __TJoyCapsA__Wrapper.getwMaxAxes : UINT;
begin
result := TJoyCapsA(GetRecordPtr^).wMaxAxes;
end;
procedure __TJoyCapsA__Wrapper.setwNumAxes(const val : UINT);
begin
TJoyCapsA(GetRecordPtr^).wNumAxes := val;
end;
function __TJoyCapsA__Wrapper.getwNumAxes : UINT;
begin
result := TJoyCapsA(GetRecordPtr^).wNumAxes;
end;
procedure __TJoyCapsA__Wrapper.setwMaxButtons(const val : UINT);
begin
TJoyCapsA(GetRecordPtr^).wMaxButtons := val;
end;
function __TJoyCapsA__Wrapper.getwMaxButtons : UINT;
begin
result := TJoyCapsA(GetRecordPtr^).wMaxButtons;
end;
function __TJoyCapsW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TJoyCapsW__Wrapper.setwMid(const val : Word);
begin
TJoyCapsW(GetRecordPtr^).wMid := val;
end;
function __TJoyCapsW__Wrapper.getwMid : Word;
begin
result := TJoyCapsW(GetRecordPtr^).wMid;
end;
procedure __TJoyCapsW__Wrapper.setwPid(const val : Word);
begin
TJoyCapsW(GetRecordPtr^).wPid := val;
end;
function __TJoyCapsW__Wrapper.getwPid : Word;
begin
result := TJoyCapsW(GetRecordPtr^).wPid;
end;
procedure __TJoyCapsW__Wrapper.setwXmin(const val : UINT);
begin
TJoyCapsW(GetRecordPtr^).wXmin := val;
end;
function __TJoyCapsW__Wrapper.getwXmin : UINT;
begin
result := TJoyCapsW(GetRecordPtr^).wXmin;
end;
procedure __TJoyCapsW__Wrapper.setwXmax(const val : UINT);
begin
TJoyCapsW(GetRecordPtr^).wXmax := val;
end;
function __TJoyCapsW__Wrapper.getwXmax : UINT;
begin
result := TJoyCapsW(GetRecordPtr^).wXmax;
end;
procedure __TJoyCapsW__Wrapper.setwYmin(const val : UINT);
begin
TJoyCapsW(GetRecordPtr^).wYmin := val;
end;
function __TJoyCapsW__Wrapper.getwYmin : UINT;
begin
result := TJoyCapsW(GetRecordPtr^).wYmin;
end;
procedure __TJoyCapsW__Wrapper.setwYmax(const val : UINT);
begin
TJoyCapsW(GetRecordPtr^).wYmax := val;
end;
function __TJoyCapsW__Wrapper.getwYmax : UINT;
begin
result := TJoyCapsW(GetRecordPtr^).wYmax;
end;
procedure __TJoyCapsW__Wrapper.setwZmin(const val : UINT);
begin
TJoyCapsW(GetRecordPtr^).wZmin := val;
end;
function __TJoyCapsW__Wrapper.getwZmin : UINT;
begin
result := TJoyCapsW(GetRecordPtr^).wZmin;
end;
procedure __TJoyCapsW__Wrapper.setwZmax(const val : UINT);
begin
TJoyCapsW(GetRecordPtr^).wZmax := val;
end;
function __TJoyCapsW__Wrapper.getwZmax : UINT;
begin
result := TJoyCapsW(GetRecordPtr^).wZmax;
end;
procedure __TJoyCapsW__Wrapper.setwNumButtons(const val : UINT);
begin
TJoyCapsW(GetRecordPtr^).wNumButtons := val;
end;
function __TJoyCapsW__Wrapper.getwNumButtons : UINT;
begin
result := TJoyCapsW(GetRecordPtr^).wNumButtons;
end;
procedure __TJoyCapsW__Wrapper.setwPeriodMin(const val : UINT);
begin
TJoyCapsW(GetRecordPtr^).wPeriodMin := val;
end;
function __TJoyCapsW__Wrapper.getwPeriodMin : UINT;
begin
result := TJoyCapsW(GetRecordPtr^).wPeriodMin;
end;
procedure __TJoyCapsW__Wrapper.setwPeriodMax(const val : UINT);
begin
TJoyCapsW(GetRecordPtr^).wPeriodMax := val;
end;
function __TJoyCapsW__Wrapper.getwPeriodMax : UINT;
begin
result := TJoyCapsW(GetRecordPtr^).wPeriodMax;
end;
procedure __TJoyCapsW__Wrapper.setwRmin(const val : UINT);
begin
TJoyCapsW(GetRecordPtr^).wRmin := val;
end;
function __TJoyCapsW__Wrapper.getwRmin : UINT;
begin
result := TJoyCapsW(GetRecordPtr^).wRmin;
end;
procedure __TJoyCapsW__Wrapper.setwRmax(const val : UINT);
begin
TJoyCapsW(GetRecordPtr^).wRmax := val;
end;
function __TJoyCapsW__Wrapper.getwRmax : UINT;
begin
result := TJoyCapsW(GetRecordPtr^).wRmax;
end;
procedure __TJoyCapsW__Wrapper.setwUmin(const val : UINT);
begin
TJoyCapsW(GetRecordPtr^).wUmin := val;
end;
function __TJoyCapsW__Wrapper.getwUmin : UINT;
begin
result := TJoyCapsW(GetRecordPtr^).wUmin;
end;
procedure __TJoyCapsW__Wrapper.setwUmax(const val : UINT);
begin
TJoyCapsW(GetRecordPtr^).wUmax := val;
end;
function __TJoyCapsW__Wrapper.getwUmax : UINT;
begin
result := TJoyCapsW(GetRecordPtr^).wUmax;
end;
procedure __TJoyCapsW__Wrapper.setwVmin(const val : UINT);
begin
TJoyCapsW(GetRecordPtr^).wVmin := val;
end;
function __TJoyCapsW__Wrapper.getwVmin : UINT;
begin
result := TJoyCapsW(GetRecordPtr^).wVmin;
end;
procedure __TJoyCapsW__Wrapper.setwVmax(const val : UINT);
begin
TJoyCapsW(GetRecordPtr^).wVmax := val;
end;
function __TJoyCapsW__Wrapper.getwVmax : UINT;
begin
result := TJoyCapsW(GetRecordPtr^).wVmax;
end;
procedure __TJoyCapsW__Wrapper.setwCaps(const val : UINT);
begin
TJoyCapsW(GetRecordPtr^).wCaps := val;
end;
function __TJoyCapsW__Wrapper.getwCaps : UINT;
begin
result := TJoyCapsW(GetRecordPtr^).wCaps;
end;
procedure __TJoyCapsW__Wrapper.setwMaxAxes(const val : UINT);
begin
TJoyCapsW(GetRecordPtr^).wMaxAxes := val;
end;
function __TJoyCapsW__Wrapper.getwMaxAxes : UINT;
begin
result := TJoyCapsW(GetRecordPtr^).wMaxAxes;
end;
procedure __TJoyCapsW__Wrapper.setwNumAxes(const val : UINT);
begin
TJoyCapsW(GetRecordPtr^).wNumAxes := val;
end;
function __TJoyCapsW__Wrapper.getwNumAxes : UINT;
begin
result := TJoyCapsW(GetRecordPtr^).wNumAxes;
end;
procedure __TJoyCapsW__Wrapper.setwMaxButtons(const val : UINT);
begin
TJoyCapsW(GetRecordPtr^).wMaxButtons := val;
end;
function __TJoyCapsW__Wrapper.getwMaxButtons : UINT;
begin
result := TJoyCapsW(GetRecordPtr^).wMaxButtons;
end;
function __TJoyInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TJoyInfo__Wrapper.setwXpos(const val : UINT);
begin
TJoyInfo(GetRecordPtr^).wXpos := val;
end;
function __TJoyInfo__Wrapper.getwXpos : UINT;
begin
result := TJoyInfo(GetRecordPtr^).wXpos;
end;
procedure __TJoyInfo__Wrapper.setwYpos(const val : UINT);
begin
TJoyInfo(GetRecordPtr^).wYpos := val;
end;
function __TJoyInfo__Wrapper.getwYpos : UINT;
begin
result := TJoyInfo(GetRecordPtr^).wYpos;
end;
procedure __TJoyInfo__Wrapper.setwZpos(const val : UINT);
begin
TJoyInfo(GetRecordPtr^).wZpos := val;
end;
function __TJoyInfo__Wrapper.getwZpos : UINT;
begin
result := TJoyInfo(GetRecordPtr^).wZpos;
end;
procedure __TJoyInfo__Wrapper.setwButtons(const val : UINT);
begin
TJoyInfo(GetRecordPtr^).wButtons := val;
end;
function __TJoyInfo__Wrapper.getwButtons : UINT;
begin
result := TJoyInfo(GetRecordPtr^).wButtons;
end;
function __TJoyInfoEx__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TJoyInfoEx__Wrapper.setdwSize(const val : DWORD);
begin
TJoyInfoEx(GetRecordPtr^).dwSize := val;
end;
function __TJoyInfoEx__Wrapper.getdwSize : DWORD;
begin
result := TJoyInfoEx(GetRecordPtr^).dwSize;
end;
procedure __TJoyInfoEx__Wrapper.setdwFlags(const val : DWORD);
begin
TJoyInfoEx(GetRecordPtr^).dwFlags := val;
end;
function __TJoyInfoEx__Wrapper.getdwFlags : DWORD;
begin
result := TJoyInfoEx(GetRecordPtr^).dwFlags;
end;
procedure __TJoyInfoEx__Wrapper.setwXpos(const val : UINT);
begin
TJoyInfoEx(GetRecordPtr^).wXpos := val;
end;
function __TJoyInfoEx__Wrapper.getwXpos : UINT;
begin
result := TJoyInfoEx(GetRecordPtr^).wXpos;
end;
procedure __TJoyInfoEx__Wrapper.setwYpos(const val : UINT);
begin
TJoyInfoEx(GetRecordPtr^).wYpos := val;
end;
function __TJoyInfoEx__Wrapper.getwYpos : UINT;
begin
result := TJoyInfoEx(GetRecordPtr^).wYpos;
end;
procedure __TJoyInfoEx__Wrapper.setwZpos(const val : UINT);
begin
TJoyInfoEx(GetRecordPtr^).wZpos := val;
end;
function __TJoyInfoEx__Wrapper.getwZpos : UINT;
begin
result := TJoyInfoEx(GetRecordPtr^).wZpos;
end;
procedure __TJoyInfoEx__Wrapper.setdwRpos(const val : DWORD);
begin
TJoyInfoEx(GetRecordPtr^).dwRpos := val;
end;
function __TJoyInfoEx__Wrapper.getdwRpos : DWORD;
begin
result := TJoyInfoEx(GetRecordPtr^).dwRpos;
end;
procedure __TJoyInfoEx__Wrapper.setdwUpos(const val : DWORD);
begin
TJoyInfoEx(GetRecordPtr^).dwUpos := val;
end;
function __TJoyInfoEx__Wrapper.getdwUpos : DWORD;
begin
result := TJoyInfoEx(GetRecordPtr^).dwUpos;
end;
procedure __TJoyInfoEx__Wrapper.setdwVpos(const val : DWORD);
begin
TJoyInfoEx(GetRecordPtr^).dwVpos := val;
end;
function __TJoyInfoEx__Wrapper.getdwVpos : DWORD;
begin
result := TJoyInfoEx(GetRecordPtr^).dwVpos;
end;
procedure __TJoyInfoEx__Wrapper.setwButtons(const val : UINT);
begin
TJoyInfoEx(GetRecordPtr^).wButtons := val;
end;
function __TJoyInfoEx__Wrapper.getwButtons : UINT;
begin
result := TJoyInfoEx(GetRecordPtr^).wButtons;
end;
procedure __TJoyInfoEx__Wrapper.setdwButtonNumber(const val : DWORD);
begin
TJoyInfoEx(GetRecordPtr^).dwButtonNumber := val;
end;
function __TJoyInfoEx__Wrapper.getdwButtonNumber : DWORD;
begin
result := TJoyInfoEx(GetRecordPtr^).dwButtonNumber;
end;
procedure __TJoyInfoEx__Wrapper.setdwPOV(const val : DWORD);
begin
TJoyInfoEx(GetRecordPtr^).dwPOV := val;
end;
function __TJoyInfoEx__Wrapper.getdwPOV : DWORD;
begin
result := TJoyInfoEx(GetRecordPtr^).dwPOV;
end;
procedure __TJoyInfoEx__Wrapper.setdwReserved1(const val : DWORD);
begin
TJoyInfoEx(GetRecordPtr^).dwReserved1 := val;
end;
function __TJoyInfoEx__Wrapper.getdwReserved1 : DWORD;
begin
result := TJoyInfoEx(GetRecordPtr^).dwReserved1;
end;
procedure __TJoyInfoEx__Wrapper.setdwReserved2(const val : DWORD);
begin
TJoyInfoEx(GetRecordPtr^).dwReserved2 := val;
end;
function __TJoyInfoEx__Wrapper.getdwReserved2 : DWORD;
begin
result := TJoyInfoEx(GetRecordPtr^).dwReserved2;
end;
function __TMCI_Anim_Open_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Anim_Open_Parms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Anim_Open_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Anim_Open_Parms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Anim_Open_Parms(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Anim_Open_Parms__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
TMCI_Anim_Open_Parms(GetRecordPtr^).wDeviceID := val;
end;
function __TMCI_Anim_Open_Parms__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := TMCI_Anim_Open_Parms(GetRecordPtr^).wDeviceID;
end;
procedure __TMCI_Anim_Open_Parms__Wrapper.setdwStyle(const val : DWORD);
begin
TMCI_Anim_Open_Parms(GetRecordPtr^).dwStyle := val;
end;
function __TMCI_Anim_Open_Parms__Wrapper.getdwStyle : DWORD;
begin
result := TMCI_Anim_Open_Parms(GetRecordPtr^).dwStyle;
end;
function __TMCI_Anim_Open_ParmsA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Anim_Open_ParmsA__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Anim_Open_ParmsA(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Anim_Open_ParmsA__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Anim_Open_ParmsA(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Anim_Open_ParmsA__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
TMCI_Anim_Open_ParmsA(GetRecordPtr^).wDeviceID := val;
end;
function __TMCI_Anim_Open_ParmsA__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := TMCI_Anim_Open_ParmsA(GetRecordPtr^).wDeviceID;
end;
procedure __TMCI_Anim_Open_ParmsA__Wrapper.setdwStyle(const val : DWORD);
begin
TMCI_Anim_Open_ParmsA(GetRecordPtr^).dwStyle := val;
end;
function __TMCI_Anim_Open_ParmsA__Wrapper.getdwStyle : DWORD;
begin
result := TMCI_Anim_Open_ParmsA(GetRecordPtr^).dwStyle;
end;
function __TMCI_Anim_Open_ParmsW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Anim_Open_ParmsW__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Anim_Open_ParmsW(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Anim_Open_ParmsW__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Anim_Open_ParmsW(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Anim_Open_ParmsW__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
TMCI_Anim_Open_ParmsW(GetRecordPtr^).wDeviceID := val;
end;
function __TMCI_Anim_Open_ParmsW__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := TMCI_Anim_Open_ParmsW(GetRecordPtr^).wDeviceID;
end;
procedure __TMCI_Anim_Open_ParmsW__Wrapper.setdwStyle(const val : DWORD);
begin
TMCI_Anim_Open_ParmsW(GetRecordPtr^).dwStyle := val;
end;
function __TMCI_Anim_Open_ParmsW__Wrapper.getdwStyle : DWORD;
begin
result := TMCI_Anim_Open_ParmsW(GetRecordPtr^).dwStyle;
end;
function __TMCI_Anim_Play_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Anim_Play_Parms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Anim_Play_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Anim_Play_Parms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Anim_Play_Parms(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Anim_Play_Parms__Wrapper.setdwFrom(const val : DWORD);
begin
TMCI_Anim_Play_Parms(GetRecordPtr^).dwFrom := val;
end;
function __TMCI_Anim_Play_Parms__Wrapper.getdwFrom : DWORD;
begin
result := TMCI_Anim_Play_Parms(GetRecordPtr^).dwFrom;
end;
procedure __TMCI_Anim_Play_Parms__Wrapper.setdwTo(const val : DWORD);
begin
TMCI_Anim_Play_Parms(GetRecordPtr^).dwTo := val;
end;
function __TMCI_Anim_Play_Parms__Wrapper.getdwTo : DWORD;
begin
result := TMCI_Anim_Play_Parms(GetRecordPtr^).dwTo;
end;
procedure __TMCI_Anim_Play_Parms__Wrapper.setdwSpeed(const val : DWORD);
begin
TMCI_Anim_Play_Parms(GetRecordPtr^).dwSpeed := val;
end;
function __TMCI_Anim_Play_Parms__Wrapper.getdwSpeed : DWORD;
begin
result := TMCI_Anim_Play_Parms(GetRecordPtr^).dwSpeed;
end;
function __TMCI_Anim_Rect_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Anim_Rect_Parms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Anim_Rect_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Anim_Rect_Parms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Anim_Rect_Parms(GetRecordPtr^).dwCallback;
end;
function __TMCI_Anim_Step_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Anim_Step_Parms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Anim_Step_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Anim_Step_Parms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Anim_Step_Parms(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Anim_Step_Parms__Wrapper.setdwFrames(const val : DWORD);
begin
TMCI_Anim_Step_Parms(GetRecordPtr^).dwFrames := val;
end;
function __TMCI_Anim_Step_Parms__Wrapper.getdwFrames : DWORD;
begin
result := TMCI_Anim_Step_Parms(GetRecordPtr^).dwFrames;
end;
function __TMCI_Anim_Update_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Anim_Update_Parms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Anim_Update_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Anim_Update_Parms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Anim_Update_Parms(GetRecordPtr^).dwCallback;
end;
function __TMCI_Anim_Window_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Anim_Window_Parms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Anim_Window_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Anim_Window_Parms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Anim_Window_Parms(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Anim_Window_Parms__Wrapper.setnCmdShow(const val : UINT);
begin
TMCI_Anim_Window_Parms(GetRecordPtr^).nCmdShow := val;
end;
function __TMCI_Anim_Window_Parms__Wrapper.getnCmdShow : UINT;
begin
result := TMCI_Anim_Window_Parms(GetRecordPtr^).nCmdShow;
end;
function __TMCI_Anim_Window_ParmsA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Anim_Window_ParmsA__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Anim_Window_ParmsA(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Anim_Window_ParmsA__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Anim_Window_ParmsA(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Anim_Window_ParmsA__Wrapper.setnCmdShow(const val : UINT);
begin
TMCI_Anim_Window_ParmsA(GetRecordPtr^).nCmdShow := val;
end;
function __TMCI_Anim_Window_ParmsA__Wrapper.getnCmdShow : UINT;
begin
result := TMCI_Anim_Window_ParmsA(GetRecordPtr^).nCmdShow;
end;
function __TMCI_Anim_Window_ParmsW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Anim_Window_ParmsW__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Anim_Window_ParmsW(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Anim_Window_ParmsW__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Anim_Window_ParmsW(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Anim_Window_ParmsW__Wrapper.setnCmdShow(const val : UINT);
begin
TMCI_Anim_Window_ParmsW(GetRecordPtr^).nCmdShow := val;
end;
function __TMCI_Anim_Window_ParmsW__Wrapper.getnCmdShow : UINT;
begin
result := TMCI_Anim_Window_ParmsW(GetRecordPtr^).nCmdShow;
end;
function __TMCI_BReak_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_BReak_Parms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_BReak_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_BReak_Parms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_BReak_Parms(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_BReak_Parms__Wrapper.setnVirtKey(const val : Integer);
begin
TMCI_BReak_Parms(GetRecordPtr^).nVirtKey := val;
end;
function __TMCI_BReak_Parms__Wrapper.getnVirtKey : Integer;
begin
result := TMCI_BReak_Parms(GetRecordPtr^).nVirtKey;
end;
function __TMCI_Generic_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Generic_Parms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Generic_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Generic_Parms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Generic_Parms(GetRecordPtr^).dwCallback;
end;
function __TMCI_GetDevCaps_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_GetDevCaps_Parms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_GetDevCaps_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_GetDevCaps_Parms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_GetDevCaps_Parms(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_GetDevCaps_Parms__Wrapper.setdwReturn(const val : DWORD);
begin
TMCI_GetDevCaps_Parms(GetRecordPtr^).dwReturn := val;
end;
function __TMCI_GetDevCaps_Parms__Wrapper.getdwReturn : DWORD;
begin
result := TMCI_GetDevCaps_Parms(GetRecordPtr^).dwReturn;
end;
procedure __TMCI_GetDevCaps_Parms__Wrapper.setdwItem(const val : DWORD);
begin
TMCI_GetDevCaps_Parms(GetRecordPtr^).dwItem := val;
end;
function __TMCI_GetDevCaps_Parms__Wrapper.getdwItem : DWORD;
begin
result := TMCI_GetDevCaps_Parms(GetRecordPtr^).dwItem;
end;
function __TMCI_Info_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Info_Parms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Info_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Info_Parms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Info_Parms(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Info_Parms__Wrapper.setdwRetSize(const val : DWORD);
begin
TMCI_Info_Parms(GetRecordPtr^).dwRetSize := val;
end;
function __TMCI_Info_Parms__Wrapper.getdwRetSize : DWORD;
begin
result := TMCI_Info_Parms(GetRecordPtr^).dwRetSize;
end;
function __TMCI_Info_ParmsA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Info_ParmsA__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Info_ParmsA(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Info_ParmsA__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Info_ParmsA(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Info_ParmsA__Wrapper.setdwRetSize(const val : DWORD);
begin
TMCI_Info_ParmsA(GetRecordPtr^).dwRetSize := val;
end;
function __TMCI_Info_ParmsA__Wrapper.getdwRetSize : DWORD;
begin
result := TMCI_Info_ParmsA(GetRecordPtr^).dwRetSize;
end;
function __TMCI_Info_ParmsW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Info_ParmsW__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Info_ParmsW(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Info_ParmsW__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Info_ParmsW(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Info_ParmsW__Wrapper.setdwRetSize(const val : DWORD);
begin
TMCI_Info_ParmsW(GetRecordPtr^).dwRetSize := val;
end;
function __TMCI_Info_ParmsW__Wrapper.getdwRetSize : DWORD;
begin
result := TMCI_Info_ParmsW(GetRecordPtr^).dwRetSize;
end;
function __TMCI_Load_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Load_Parms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Load_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Load_Parms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Load_Parms(GetRecordPtr^).dwCallback;
end;
function __TMCI_Load_ParmsA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Load_ParmsA__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Load_ParmsA(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Load_ParmsA__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Load_ParmsA(GetRecordPtr^).dwCallback;
end;
function __TMCI_Load_ParmsW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Load_ParmsW__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Load_ParmsW(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Load_ParmsW__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Load_ParmsW(GetRecordPtr^).dwCallback;
end;
function __TMCI_Open_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Open_Parms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Open_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Open_Parms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Open_Parms(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Open_Parms__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
TMCI_Open_Parms(GetRecordPtr^).wDeviceID := val;
end;
function __TMCI_Open_Parms__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := TMCI_Open_Parms(GetRecordPtr^).wDeviceID;
end;
function __TMCI_Open_ParmsA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Open_ParmsA__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Open_ParmsA(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Open_ParmsA__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Open_ParmsA(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Open_ParmsA__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
TMCI_Open_ParmsA(GetRecordPtr^).wDeviceID := val;
end;
function __TMCI_Open_ParmsA__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := TMCI_Open_ParmsA(GetRecordPtr^).wDeviceID;
end;
function __TMCI_Open_ParmsW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Open_ParmsW__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Open_ParmsW(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Open_ParmsW__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Open_ParmsW(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Open_ParmsW__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
TMCI_Open_ParmsW(GetRecordPtr^).wDeviceID := val;
end;
function __TMCI_Open_ParmsW__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := TMCI_Open_ParmsW(GetRecordPtr^).wDeviceID;
end;
function __TMCI_Ovly_Load_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Ovly_Load_Parms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Ovly_Load_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Ovly_Load_Parms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Ovly_Load_Parms(GetRecordPtr^).dwCallback;
end;
function __TMCI_Ovly_Load_ParmsA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Ovly_Load_ParmsA__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Ovly_Load_ParmsA(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Ovly_Load_ParmsA__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Ovly_Load_ParmsA(GetRecordPtr^).dwCallback;
end;
function __TMCI_Ovly_Load_ParmsW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Ovly_Load_ParmsW__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Ovly_Load_ParmsW(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Ovly_Load_ParmsW__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Ovly_Load_ParmsW(GetRecordPtr^).dwCallback;
end;
function __TMCI_Ovly_Open_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Ovly_Open_Parms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Ovly_Open_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Ovly_Open_Parms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Ovly_Open_Parms(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Ovly_Open_Parms__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
TMCI_Ovly_Open_Parms(GetRecordPtr^).wDeviceID := val;
end;
function __TMCI_Ovly_Open_Parms__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := TMCI_Ovly_Open_Parms(GetRecordPtr^).wDeviceID;
end;
procedure __TMCI_Ovly_Open_Parms__Wrapper.setdwStyle(const val : DWORD);
begin
TMCI_Ovly_Open_Parms(GetRecordPtr^).dwStyle := val;
end;
function __TMCI_Ovly_Open_Parms__Wrapper.getdwStyle : DWORD;
begin
result := TMCI_Ovly_Open_Parms(GetRecordPtr^).dwStyle;
end;
function __TMCI_Ovly_Open_ParmsA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Ovly_Open_ParmsA__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Ovly_Open_ParmsA(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Ovly_Open_ParmsA__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Ovly_Open_ParmsA(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Ovly_Open_ParmsA__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
TMCI_Ovly_Open_ParmsA(GetRecordPtr^).wDeviceID := val;
end;
function __TMCI_Ovly_Open_ParmsA__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := TMCI_Ovly_Open_ParmsA(GetRecordPtr^).wDeviceID;
end;
procedure __TMCI_Ovly_Open_ParmsA__Wrapper.setdwStyle(const val : DWORD);
begin
TMCI_Ovly_Open_ParmsA(GetRecordPtr^).dwStyle := val;
end;
function __TMCI_Ovly_Open_ParmsA__Wrapper.getdwStyle : DWORD;
begin
result := TMCI_Ovly_Open_ParmsA(GetRecordPtr^).dwStyle;
end;
function __TMCI_Ovly_Open_ParmsW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Ovly_Open_ParmsW__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Ovly_Open_ParmsW(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Ovly_Open_ParmsW__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Ovly_Open_ParmsW(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Ovly_Open_ParmsW__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
TMCI_Ovly_Open_ParmsW(GetRecordPtr^).wDeviceID := val;
end;
function __TMCI_Ovly_Open_ParmsW__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := TMCI_Ovly_Open_ParmsW(GetRecordPtr^).wDeviceID;
end;
procedure __TMCI_Ovly_Open_ParmsW__Wrapper.setdwStyle(const val : DWORD);
begin
TMCI_Ovly_Open_ParmsW(GetRecordPtr^).dwStyle := val;
end;
function __TMCI_Ovly_Open_ParmsW__Wrapper.getdwStyle : DWORD;
begin
result := TMCI_Ovly_Open_ParmsW(GetRecordPtr^).dwStyle;
end;
function __TMCI_Ovly_Rect_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Ovly_Rect_Parms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Ovly_Rect_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Ovly_Rect_Parms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Ovly_Rect_Parms(GetRecordPtr^).dwCallback;
end;
function __TMCI_Ovly_Save_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Ovly_Save_Parms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Ovly_Save_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Ovly_Save_Parms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Ovly_Save_Parms(GetRecordPtr^).dwCallback;
end;
function __TMCI_Ovly_Save_ParmsA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Ovly_Save_ParmsA__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Ovly_Save_ParmsA(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Ovly_Save_ParmsA__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Ovly_Save_ParmsA(GetRecordPtr^).dwCallback;
end;
function __TMCI_Ovly_Save_ParmsW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Ovly_Save_ParmsW__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Ovly_Save_ParmsW(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Ovly_Save_ParmsW__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Ovly_Save_ParmsW(GetRecordPtr^).dwCallback;
end;
function __TMCI_Ovly_Window_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Ovly_Window_Parms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Ovly_Window_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Ovly_Window_Parms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Ovly_Window_Parms(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Ovly_Window_Parms__Wrapper.setnCmdShow(const val : UINT);
begin
TMCI_Ovly_Window_Parms(GetRecordPtr^).nCmdShow := val;
end;
function __TMCI_Ovly_Window_Parms__Wrapper.getnCmdShow : UINT;
begin
result := TMCI_Ovly_Window_Parms(GetRecordPtr^).nCmdShow;
end;
function __TMCI_Ovly_Window_ParmsA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Ovly_Window_ParmsA__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Ovly_Window_ParmsA(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Ovly_Window_ParmsA__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Ovly_Window_ParmsA(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Ovly_Window_ParmsA__Wrapper.setnCmdShow(const val : UINT);
begin
TMCI_Ovly_Window_ParmsA(GetRecordPtr^).nCmdShow := val;
end;
function __TMCI_Ovly_Window_ParmsA__Wrapper.getnCmdShow : UINT;
begin
result := TMCI_Ovly_Window_ParmsA(GetRecordPtr^).nCmdShow;
end;
function __TMCI_Ovly_Window_ParmsW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Ovly_Window_ParmsW__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Ovly_Window_ParmsW(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Ovly_Window_ParmsW__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Ovly_Window_ParmsW(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Ovly_Window_ParmsW__Wrapper.setnCmdShow(const val : UINT);
begin
TMCI_Ovly_Window_ParmsW(GetRecordPtr^).nCmdShow := val;
end;
function __TMCI_Ovly_Window_ParmsW__Wrapper.getnCmdShow : UINT;
begin
result := TMCI_Ovly_Window_ParmsW(GetRecordPtr^).nCmdShow;
end;
function __TMCI_Play_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Play_Parms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Play_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Play_Parms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Play_Parms(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Play_Parms__Wrapper.setdwFrom(const val : DWORD);
begin
TMCI_Play_Parms(GetRecordPtr^).dwFrom := val;
end;
function __TMCI_Play_Parms__Wrapper.getdwFrom : DWORD;
begin
result := TMCI_Play_Parms(GetRecordPtr^).dwFrom;
end;
procedure __TMCI_Play_Parms__Wrapper.setdwTo(const val : DWORD);
begin
TMCI_Play_Parms(GetRecordPtr^).dwTo := val;
end;
function __TMCI_Play_Parms__Wrapper.getdwTo : DWORD;
begin
result := TMCI_Play_Parms(GetRecordPtr^).dwTo;
end;
function __TMCI_Record_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Record_Parms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Record_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Record_Parms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Record_Parms(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Record_Parms__Wrapper.setdwFrom(const val : DWORD);
begin
TMCI_Record_Parms(GetRecordPtr^).dwFrom := val;
end;
function __TMCI_Record_Parms__Wrapper.getdwFrom : DWORD;
begin
result := TMCI_Record_Parms(GetRecordPtr^).dwFrom;
end;
procedure __TMCI_Record_Parms__Wrapper.setdwTo(const val : DWORD);
begin
TMCI_Record_Parms(GetRecordPtr^).dwTo := val;
end;
function __TMCI_Record_Parms__Wrapper.getdwTo : DWORD;
begin
result := TMCI_Record_Parms(GetRecordPtr^).dwTo;
end;
function __TMCI_SaveParms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_SaveParms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_SaveParms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_SaveParms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_SaveParms(GetRecordPtr^).dwCallback;
end;
function __TMCI_SaveParmsA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_SaveParmsA__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_SaveParmsA(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_SaveParmsA__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_SaveParmsA(GetRecordPtr^).dwCallback;
end;
function __TMCI_SaveParmsW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_SaveParmsW__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_SaveParmsW(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_SaveParmsW__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_SaveParmsW(GetRecordPtr^).dwCallback;
end;
function __TMCI_Seek_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Seek_Parms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Seek_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Seek_Parms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Seek_Parms(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Seek_Parms__Wrapper.setdwTo(const val : DWORD);
begin
TMCI_Seek_Parms(GetRecordPtr^).dwTo := val;
end;
function __TMCI_Seek_Parms__Wrapper.getdwTo : DWORD;
begin
result := TMCI_Seek_Parms(GetRecordPtr^).dwTo;
end;
function __TMCI_Seq_Set_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Seq_Set_Parms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Seq_Set_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Seq_Set_Parms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Seq_Set_Parms(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Seq_Set_Parms__Wrapper.setdwTimeFormat(const val : DWORD);
begin
TMCI_Seq_Set_Parms(GetRecordPtr^).dwTimeFormat := val;
end;
function __TMCI_Seq_Set_Parms__Wrapper.getdwTimeFormat : DWORD;
begin
result := TMCI_Seq_Set_Parms(GetRecordPtr^).dwTimeFormat;
end;
procedure __TMCI_Seq_Set_Parms__Wrapper.setdwAudio(const val : DWORD);
begin
TMCI_Seq_Set_Parms(GetRecordPtr^).dwAudio := val;
end;
function __TMCI_Seq_Set_Parms__Wrapper.getdwAudio : DWORD;
begin
result := TMCI_Seq_Set_Parms(GetRecordPtr^).dwAudio;
end;
procedure __TMCI_Seq_Set_Parms__Wrapper.setdwTempo(const val : DWORD);
begin
TMCI_Seq_Set_Parms(GetRecordPtr^).dwTempo := val;
end;
function __TMCI_Seq_Set_Parms__Wrapper.getdwTempo : DWORD;
begin
result := TMCI_Seq_Set_Parms(GetRecordPtr^).dwTempo;
end;
procedure __TMCI_Seq_Set_Parms__Wrapper.setdwPort(const val : DWORD);
begin
TMCI_Seq_Set_Parms(GetRecordPtr^).dwPort := val;
end;
function __TMCI_Seq_Set_Parms__Wrapper.getdwPort : DWORD;
begin
result := TMCI_Seq_Set_Parms(GetRecordPtr^).dwPort;
end;
procedure __TMCI_Seq_Set_Parms__Wrapper.setdwSlave(const val : DWORD);
begin
TMCI_Seq_Set_Parms(GetRecordPtr^).dwSlave := val;
end;
function __TMCI_Seq_Set_Parms__Wrapper.getdwSlave : DWORD;
begin
result := TMCI_Seq_Set_Parms(GetRecordPtr^).dwSlave;
end;
procedure __TMCI_Seq_Set_Parms__Wrapper.setdwMaster(const val : DWORD);
begin
TMCI_Seq_Set_Parms(GetRecordPtr^).dwMaster := val;
end;
function __TMCI_Seq_Set_Parms__Wrapper.getdwMaster : DWORD;
begin
result := TMCI_Seq_Set_Parms(GetRecordPtr^).dwMaster;
end;
procedure __TMCI_Seq_Set_Parms__Wrapper.setdwOffset(const val : DWORD);
begin
TMCI_Seq_Set_Parms(GetRecordPtr^).dwOffset := val;
end;
function __TMCI_Seq_Set_Parms__Wrapper.getdwOffset : DWORD;
begin
result := TMCI_Seq_Set_Parms(GetRecordPtr^).dwOffset;
end;
function __TMCI_Set_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Set_Parms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Set_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Set_Parms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Set_Parms(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Set_Parms__Wrapper.setdwTimeFormat(const val : DWORD);
begin
TMCI_Set_Parms(GetRecordPtr^).dwTimeFormat := val;
end;
function __TMCI_Set_Parms__Wrapper.getdwTimeFormat : DWORD;
begin
result := TMCI_Set_Parms(GetRecordPtr^).dwTimeFormat;
end;
procedure __TMCI_Set_Parms__Wrapper.setdwAudio(const val : DWORD);
begin
TMCI_Set_Parms(GetRecordPtr^).dwAudio := val;
end;
function __TMCI_Set_Parms__Wrapper.getdwAudio : DWORD;
begin
result := TMCI_Set_Parms(GetRecordPtr^).dwAudio;
end;
function __TMCI_Sound_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Sound_Parms__Wrapper.setdwCallback(const val : Longint);
begin
TMCI_Sound_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Sound_Parms__Wrapper.getdwCallback : Longint;
begin
result := TMCI_Sound_Parms(GetRecordPtr^).dwCallback;
end;
function __TMCI_Status_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Status_Parms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Status_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Status_Parms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Status_Parms(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Status_Parms__Wrapper.setdwReturn(const val : DWORD);
begin
TMCI_Status_Parms(GetRecordPtr^).dwReturn := val;
end;
function __TMCI_Status_Parms__Wrapper.getdwReturn : DWORD;
begin
result := TMCI_Status_Parms(GetRecordPtr^).dwReturn;
end;
procedure __TMCI_Status_Parms__Wrapper.setdwItem(const val : DWORD);
begin
TMCI_Status_Parms(GetRecordPtr^).dwItem := val;
end;
function __TMCI_Status_Parms__Wrapper.getdwItem : DWORD;
begin
result := TMCI_Status_Parms(GetRecordPtr^).dwItem;
end;
procedure __TMCI_Status_Parms__Wrapper.setdwTrack(const val : DWORD);
begin
TMCI_Status_Parms(GetRecordPtr^).dwTrack := val;
end;
function __TMCI_Status_Parms__Wrapper.getdwTrack : DWORD;
begin
result := TMCI_Status_Parms(GetRecordPtr^).dwTrack;
end;
function __TMCI_SysInfo_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_SysInfo_Parms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_SysInfo_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_SysInfo_Parms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_SysInfo_Parms(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_SysInfo_Parms__Wrapper.setdwRetSize(const val : DWORD);
begin
TMCI_SysInfo_Parms(GetRecordPtr^).dwRetSize := val;
end;
function __TMCI_SysInfo_Parms__Wrapper.getdwRetSize : DWORD;
begin
result := TMCI_SysInfo_Parms(GetRecordPtr^).dwRetSize;
end;
procedure __TMCI_SysInfo_Parms__Wrapper.setdwNumber(const val : DWORD);
begin
TMCI_SysInfo_Parms(GetRecordPtr^).dwNumber := val;
end;
function __TMCI_SysInfo_Parms__Wrapper.getdwNumber : DWORD;
begin
result := TMCI_SysInfo_Parms(GetRecordPtr^).dwNumber;
end;
procedure __TMCI_SysInfo_Parms__Wrapper.setwDeviceType(const val : UINT);
begin
TMCI_SysInfo_Parms(GetRecordPtr^).wDeviceType := val;
end;
function __TMCI_SysInfo_Parms__Wrapper.getwDeviceType : UINT;
begin
result := TMCI_SysInfo_Parms(GetRecordPtr^).wDeviceType;
end;
function __TMCI_SysInfo_ParmsA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_SysInfo_ParmsA__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_SysInfo_ParmsA(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_SysInfo_ParmsA__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_SysInfo_ParmsA(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_SysInfo_ParmsA__Wrapper.setdwRetSize(const val : DWORD);
begin
TMCI_SysInfo_ParmsA(GetRecordPtr^).dwRetSize := val;
end;
function __TMCI_SysInfo_ParmsA__Wrapper.getdwRetSize : DWORD;
begin
result := TMCI_SysInfo_ParmsA(GetRecordPtr^).dwRetSize;
end;
procedure __TMCI_SysInfo_ParmsA__Wrapper.setdwNumber(const val : DWORD);
begin
TMCI_SysInfo_ParmsA(GetRecordPtr^).dwNumber := val;
end;
function __TMCI_SysInfo_ParmsA__Wrapper.getdwNumber : DWORD;
begin
result := TMCI_SysInfo_ParmsA(GetRecordPtr^).dwNumber;
end;
procedure __TMCI_SysInfo_ParmsA__Wrapper.setwDeviceType(const val : UINT);
begin
TMCI_SysInfo_ParmsA(GetRecordPtr^).wDeviceType := val;
end;
function __TMCI_SysInfo_ParmsA__Wrapper.getwDeviceType : UINT;
begin
result := TMCI_SysInfo_ParmsA(GetRecordPtr^).wDeviceType;
end;
function __TMCI_SysInfo_ParmsW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_SysInfo_ParmsW__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_SysInfo_ParmsW(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_SysInfo_ParmsW__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_SysInfo_ParmsW(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_SysInfo_ParmsW__Wrapper.setdwRetSize(const val : DWORD);
begin
TMCI_SysInfo_ParmsW(GetRecordPtr^).dwRetSize := val;
end;
function __TMCI_SysInfo_ParmsW__Wrapper.getdwRetSize : DWORD;
begin
result := TMCI_SysInfo_ParmsW(GetRecordPtr^).dwRetSize;
end;
procedure __TMCI_SysInfo_ParmsW__Wrapper.setdwNumber(const val : DWORD);
begin
TMCI_SysInfo_ParmsW(GetRecordPtr^).dwNumber := val;
end;
function __TMCI_SysInfo_ParmsW__Wrapper.getdwNumber : DWORD;
begin
result := TMCI_SysInfo_ParmsW(GetRecordPtr^).dwNumber;
end;
procedure __TMCI_SysInfo_ParmsW__Wrapper.setwDeviceType(const val : UINT);
begin
TMCI_SysInfo_ParmsW(GetRecordPtr^).wDeviceType := val;
end;
function __TMCI_SysInfo_ParmsW__Wrapper.getwDeviceType : UINT;
begin
result := TMCI_SysInfo_ParmsW(GetRecordPtr^).wDeviceType;
end;
function __TMCI_VD_Escape_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_VD_Escape_Parms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_VD_Escape_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_VD_Escape_Parms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_VD_Escape_Parms(GetRecordPtr^).dwCallback;
end;
function __TMCI_VD_Escape_ParmsA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_VD_Escape_ParmsA__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_VD_Escape_ParmsA(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_VD_Escape_ParmsA__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_VD_Escape_ParmsA(GetRecordPtr^).dwCallback;
end;
function __TMCI_VD_Escape_ParmsW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_VD_Escape_ParmsW__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_VD_Escape_ParmsW(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_VD_Escape_ParmsW__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_VD_Escape_ParmsW(GetRecordPtr^).dwCallback;
end;
function __TMCI_VD_Play_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_VD_Play_Parms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_VD_Play_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_VD_Play_Parms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_VD_Play_Parms(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_VD_Play_Parms__Wrapper.setdwFrom(const val : DWORD);
begin
TMCI_VD_Play_Parms(GetRecordPtr^).dwFrom := val;
end;
function __TMCI_VD_Play_Parms__Wrapper.getdwFrom : DWORD;
begin
result := TMCI_VD_Play_Parms(GetRecordPtr^).dwFrom;
end;
procedure __TMCI_VD_Play_Parms__Wrapper.setdwTo(const val : DWORD);
begin
TMCI_VD_Play_Parms(GetRecordPtr^).dwTo := val;
end;
function __TMCI_VD_Play_Parms__Wrapper.getdwTo : DWORD;
begin
result := TMCI_VD_Play_Parms(GetRecordPtr^).dwTo;
end;
procedure __TMCI_VD_Play_Parms__Wrapper.setdwSpeed(const val : DWORD);
begin
TMCI_VD_Play_Parms(GetRecordPtr^).dwSpeed := val;
end;
function __TMCI_VD_Play_Parms__Wrapper.getdwSpeed : DWORD;
begin
result := TMCI_VD_Play_Parms(GetRecordPtr^).dwSpeed;
end;
function __TMCI_VD_Step_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_VD_Step_Parms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_VD_Step_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_VD_Step_Parms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_VD_Step_Parms(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_VD_Step_Parms__Wrapper.setdwFrames(const val : DWORD);
begin
TMCI_VD_Step_Parms(GetRecordPtr^).dwFrames := val;
end;
function __TMCI_VD_Step_Parms__Wrapper.getdwFrames : DWORD;
begin
result := TMCI_VD_Step_Parms(GetRecordPtr^).dwFrames;
end;
function __TMCI_Wave_Delete_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Wave_Delete_Parms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Wave_Delete_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Wave_Delete_Parms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Wave_Delete_Parms(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Wave_Delete_Parms__Wrapper.setdwFrom(const val : DWORD);
begin
TMCI_Wave_Delete_Parms(GetRecordPtr^).dwFrom := val;
end;
function __TMCI_Wave_Delete_Parms__Wrapper.getdwFrom : DWORD;
begin
result := TMCI_Wave_Delete_Parms(GetRecordPtr^).dwFrom;
end;
procedure __TMCI_Wave_Delete_Parms__Wrapper.setdwTo(const val : DWORD);
begin
TMCI_Wave_Delete_Parms(GetRecordPtr^).dwTo := val;
end;
function __TMCI_Wave_Delete_Parms__Wrapper.getdwTo : DWORD;
begin
result := TMCI_Wave_Delete_Parms(GetRecordPtr^).dwTo;
end;
function __TMCI_Wave_Open_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Wave_Open_Parms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Wave_Open_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Wave_Open_Parms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Wave_Open_Parms(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Wave_Open_Parms__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
TMCI_Wave_Open_Parms(GetRecordPtr^).wDeviceID := val;
end;
function __TMCI_Wave_Open_Parms__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := TMCI_Wave_Open_Parms(GetRecordPtr^).wDeviceID;
end;
procedure __TMCI_Wave_Open_Parms__Wrapper.setdwBufferSeconds(const val : DWORD);
begin
TMCI_Wave_Open_Parms(GetRecordPtr^).dwBufferSeconds := val;
end;
function __TMCI_Wave_Open_Parms__Wrapper.getdwBufferSeconds : DWORD;
begin
result := TMCI_Wave_Open_Parms(GetRecordPtr^).dwBufferSeconds;
end;
function __TMCI_Wave_Open_ParmsA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Wave_Open_ParmsA__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Wave_Open_ParmsA(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Wave_Open_ParmsA__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Wave_Open_ParmsA(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Wave_Open_ParmsA__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
TMCI_Wave_Open_ParmsA(GetRecordPtr^).wDeviceID := val;
end;
function __TMCI_Wave_Open_ParmsA__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := TMCI_Wave_Open_ParmsA(GetRecordPtr^).wDeviceID;
end;
procedure __TMCI_Wave_Open_ParmsA__Wrapper.setdwBufferSeconds(const val : DWORD);
begin
TMCI_Wave_Open_ParmsA(GetRecordPtr^).dwBufferSeconds := val;
end;
function __TMCI_Wave_Open_ParmsA__Wrapper.getdwBufferSeconds : DWORD;
begin
result := TMCI_Wave_Open_ParmsA(GetRecordPtr^).dwBufferSeconds;
end;
function __TMCI_Wave_Open_ParmsW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Wave_Open_ParmsW__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Wave_Open_ParmsW(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Wave_Open_ParmsW__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Wave_Open_ParmsW(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Wave_Open_ParmsW__Wrapper.setwDeviceID(const val : MCIDEVICEID);
begin
TMCI_Wave_Open_ParmsW(GetRecordPtr^).wDeviceID := val;
end;
function __TMCI_Wave_Open_ParmsW__Wrapper.getwDeviceID : MCIDEVICEID;
begin
result := TMCI_Wave_Open_ParmsW(GetRecordPtr^).wDeviceID;
end;
procedure __TMCI_Wave_Open_ParmsW__Wrapper.setdwBufferSeconds(const val : DWORD);
begin
TMCI_Wave_Open_ParmsW(GetRecordPtr^).dwBufferSeconds := val;
end;
function __TMCI_Wave_Open_ParmsW__Wrapper.getdwBufferSeconds : DWORD;
begin
result := TMCI_Wave_Open_ParmsW(GetRecordPtr^).dwBufferSeconds;
end;
function __TMCI_Wave_Set_Parms__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMCI_Wave_Set_Parms__Wrapper.setdwCallback(const val : DWORD);
begin
TMCI_Wave_Set_Parms(GetRecordPtr^).dwCallback := val;
end;
function __TMCI_Wave_Set_Parms__Wrapper.getdwCallback : DWORD;
begin
result := TMCI_Wave_Set_Parms(GetRecordPtr^).dwCallback;
end;
procedure __TMCI_Wave_Set_Parms__Wrapper.setdwTimeFormat(const val : DWORD);
begin
TMCI_Wave_Set_Parms(GetRecordPtr^).dwTimeFormat := val;
end;
function __TMCI_Wave_Set_Parms__Wrapper.getdwTimeFormat : DWORD;
begin
result := TMCI_Wave_Set_Parms(GetRecordPtr^).dwTimeFormat;
end;
procedure __TMCI_Wave_Set_Parms__Wrapper.setdwAudio(const val : DWORD);
begin
TMCI_Wave_Set_Parms(GetRecordPtr^).dwAudio := val;
end;
function __TMCI_Wave_Set_Parms__Wrapper.getdwAudio : DWORD;
begin
result := TMCI_Wave_Set_Parms(GetRecordPtr^).dwAudio;
end;
procedure __TMCI_Wave_Set_Parms__Wrapper.setwInput(const val : UINT);
begin
TMCI_Wave_Set_Parms(GetRecordPtr^).wInput := val;
end;
function __TMCI_Wave_Set_Parms__Wrapper.getwInput : UINT;
begin
result := TMCI_Wave_Set_Parms(GetRecordPtr^).wInput;
end;
procedure __TMCI_Wave_Set_Parms__Wrapper.setwOutput(const val : UINT);
begin
TMCI_Wave_Set_Parms(GetRecordPtr^).wOutput := val;
end;
function __TMCI_Wave_Set_Parms__Wrapper.getwOutput : UINT;
begin
result := TMCI_Wave_Set_Parms(GetRecordPtr^).wOutput;
end;
procedure __TMCI_Wave_Set_Parms__Wrapper.setwFormatTag(const val : Word);
begin
TMCI_Wave_Set_Parms(GetRecordPtr^).wFormatTag := val;
end;
function __TMCI_Wave_Set_Parms__Wrapper.getwFormatTag : Word;
begin
result := TMCI_Wave_Set_Parms(GetRecordPtr^).wFormatTag;
end;
procedure __TMCI_Wave_Set_Parms__Wrapper.setwReserved2(const val : Word);
begin
TMCI_Wave_Set_Parms(GetRecordPtr^).wReserved2 := val;
end;
function __TMCI_Wave_Set_Parms__Wrapper.getwReserved2 : Word;
begin
result := TMCI_Wave_Set_Parms(GetRecordPtr^).wReserved2;
end;
procedure __TMCI_Wave_Set_Parms__Wrapper.setnChannels(const val : Word);
begin
TMCI_Wave_Set_Parms(GetRecordPtr^).nChannels := val;
end;
function __TMCI_Wave_Set_Parms__Wrapper.getnChannels : Word;
begin
result := TMCI_Wave_Set_Parms(GetRecordPtr^).nChannels;
end;
procedure __TMCI_Wave_Set_Parms__Wrapper.setwReserved3(const val : Word);
begin
TMCI_Wave_Set_Parms(GetRecordPtr^).wReserved3 := val;
end;
function __TMCI_Wave_Set_Parms__Wrapper.getwReserved3 : Word;
begin
result := TMCI_Wave_Set_Parms(GetRecordPtr^).wReserved3;
end;
procedure __TMCI_Wave_Set_Parms__Wrapper.setnSamplesPerSec(const val : DWORD);
begin
TMCI_Wave_Set_Parms(GetRecordPtr^).nSamplesPerSec := val;
end;
function __TMCI_Wave_Set_Parms__Wrapper.getnSamplesPerSec : DWORD;
begin
result := TMCI_Wave_Set_Parms(GetRecordPtr^).nSamplesPerSec;
end;
procedure __TMCI_Wave_Set_Parms__Wrapper.setnAvgBytesPerSec(const val : DWORD);
begin
TMCI_Wave_Set_Parms(GetRecordPtr^).nAvgBytesPerSec := val;
end;
function __TMCI_Wave_Set_Parms__Wrapper.getnAvgBytesPerSec : DWORD;
begin
result := TMCI_Wave_Set_Parms(GetRecordPtr^).nAvgBytesPerSec;
end;
procedure __TMCI_Wave_Set_Parms__Wrapper.setnBlockAlign(const val : Word);
begin
TMCI_Wave_Set_Parms(GetRecordPtr^).nBlockAlign := val;
end;
function __TMCI_Wave_Set_Parms__Wrapper.getnBlockAlign : Word;
begin
result := TMCI_Wave_Set_Parms(GetRecordPtr^).nBlockAlign;
end;
procedure __TMCI_Wave_Set_Parms__Wrapper.setwReserved4(const val : Word);
begin
TMCI_Wave_Set_Parms(GetRecordPtr^).wReserved4 := val;
end;
function __TMCI_Wave_Set_Parms__Wrapper.getwReserved4 : Word;
begin
result := TMCI_Wave_Set_Parms(GetRecordPtr^).wReserved4;
end;
procedure __TMCI_Wave_Set_Parms__Wrapper.setwBitsPerSample(const val : Word);
begin
TMCI_Wave_Set_Parms(GetRecordPtr^).wBitsPerSample := val;
end;
function __TMCI_Wave_Set_Parms__Wrapper.getwBitsPerSample : Word;
begin
result := TMCI_Wave_Set_Parms(GetRecordPtr^).wBitsPerSample;
end;
procedure __TMCI_Wave_Set_Parms__Wrapper.setwReserved5(const val : Word);
begin
TMCI_Wave_Set_Parms(GetRecordPtr^).wReserved5 := val;
end;
function __TMCI_Wave_Set_Parms__Wrapper.getwReserved5 : Word;
begin
result := TMCI_Wave_Set_Parms(GetRecordPtr^).wReserved5;
end;
function __TMidiEvent__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMidiEvent__Wrapper.setdwDeltaTime(const val : DWORD);
begin
TMidiEvent(GetRecordPtr^).dwDeltaTime := val;
end;
function __TMidiEvent__Wrapper.getdwDeltaTime : DWORD;
begin
result := TMidiEvent(GetRecordPtr^).dwDeltaTime;
end;
procedure __TMidiEvent__Wrapper.setdwStreamID(const val : DWORD);
begin
TMidiEvent(GetRecordPtr^).dwStreamID := val;
end;
function __TMidiEvent__Wrapper.getdwStreamID : DWORD;
begin
result := TMidiEvent(GetRecordPtr^).dwStreamID;
end;
procedure __TMidiEvent__Wrapper.setdwEvent(const val : DWORD);
begin
TMidiEvent(GetRecordPtr^).dwEvent := val;
end;
function __TMidiEvent__Wrapper.getdwEvent : DWORD;
begin
result := TMidiEvent(GetRecordPtr^).dwEvent;
end;
function __TMidiHdr__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMidiHdr__Wrapper.setdwBufferLength(const val : DWORD);
begin
TMidiHdr(GetRecordPtr^).dwBufferLength := val;
end;
function __TMidiHdr__Wrapper.getdwBufferLength : DWORD;
begin
result := TMidiHdr(GetRecordPtr^).dwBufferLength;
end;
procedure __TMidiHdr__Wrapper.setdwBytesRecorded(const val : DWORD);
begin
TMidiHdr(GetRecordPtr^).dwBytesRecorded := val;
end;
function __TMidiHdr__Wrapper.getdwBytesRecorded : DWORD;
begin
result := TMidiHdr(GetRecordPtr^).dwBytesRecorded;
end;
procedure __TMidiHdr__Wrapper.setdwUser(const val : DWORD);
begin
TMidiHdr(GetRecordPtr^).dwUser := val;
end;
function __TMidiHdr__Wrapper.getdwUser : DWORD;
begin
result := TMidiHdr(GetRecordPtr^).dwUser;
end;
procedure __TMidiHdr__Wrapper.setdwFlags(const val : DWORD);
begin
TMidiHdr(GetRecordPtr^).dwFlags := val;
end;
function __TMidiHdr__Wrapper.getdwFlags : DWORD;
begin
result := TMidiHdr(GetRecordPtr^).dwFlags;
end;
procedure __TMidiHdr__Wrapper.setreserved(const val : DWORD);
begin
TMidiHdr(GetRecordPtr^).reserved := val;
end;
function __TMidiHdr__Wrapper.getreserved : DWORD;
begin
result := TMidiHdr(GetRecordPtr^).reserved;
end;
procedure __TMidiHdr__Wrapper.setdwOffset(const val : DWORD);
begin
TMidiHdr(GetRecordPtr^).dwOffset := val;
end;
function __TMidiHdr__Wrapper.getdwOffset : DWORD;
begin
result := TMidiHdr(GetRecordPtr^).dwOffset;
end;
function __TMidiInCaps__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMidiInCaps__Wrapper.setwMid(const val : Word);
begin
TMidiInCaps(GetRecordPtr^).wMid := val;
end;
function __TMidiInCaps__Wrapper.getwMid : Word;
begin
result := TMidiInCaps(GetRecordPtr^).wMid;
end;
procedure __TMidiInCaps__Wrapper.setwPid(const val : Word);
begin
TMidiInCaps(GetRecordPtr^).wPid := val;
end;
function __TMidiInCaps__Wrapper.getwPid : Word;
begin
result := TMidiInCaps(GetRecordPtr^).wPid;
end;
procedure __TMidiInCaps__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
TMidiInCaps(GetRecordPtr^).vDriverVersion := val;
end;
function __TMidiInCaps__Wrapper.getvDriverVersion : MMVERSION;
begin
result := TMidiInCaps(GetRecordPtr^).vDriverVersion;
end;
procedure __TMidiInCaps__Wrapper.setdwSupport(const val : DWORD);
begin
TMidiInCaps(GetRecordPtr^).dwSupport := val;
end;
function __TMidiInCaps__Wrapper.getdwSupport : DWORD;
begin
result := TMidiInCaps(GetRecordPtr^).dwSupport;
end;
function __TMidiInCapsA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMidiInCapsA__Wrapper.setwMid(const val : Word);
begin
TMidiInCapsA(GetRecordPtr^).wMid := val;
end;
function __TMidiInCapsA__Wrapper.getwMid : Word;
begin
result := TMidiInCapsA(GetRecordPtr^).wMid;
end;
procedure __TMidiInCapsA__Wrapper.setwPid(const val : Word);
begin
TMidiInCapsA(GetRecordPtr^).wPid := val;
end;
function __TMidiInCapsA__Wrapper.getwPid : Word;
begin
result := TMidiInCapsA(GetRecordPtr^).wPid;
end;
procedure __TMidiInCapsA__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
TMidiInCapsA(GetRecordPtr^).vDriverVersion := val;
end;
function __TMidiInCapsA__Wrapper.getvDriverVersion : MMVERSION;
begin
result := TMidiInCapsA(GetRecordPtr^).vDriverVersion;
end;
procedure __TMidiInCapsA__Wrapper.setdwSupport(const val : DWORD);
begin
TMidiInCapsA(GetRecordPtr^).dwSupport := val;
end;
function __TMidiInCapsA__Wrapper.getdwSupport : DWORD;
begin
result := TMidiInCapsA(GetRecordPtr^).dwSupport;
end;
function __TMidiInCapsW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMidiInCapsW__Wrapper.setwMid(const val : Word);
begin
TMidiInCapsW(GetRecordPtr^).wMid := val;
end;
function __TMidiInCapsW__Wrapper.getwMid : Word;
begin
result := TMidiInCapsW(GetRecordPtr^).wMid;
end;
procedure __TMidiInCapsW__Wrapper.setwPid(const val : Word);
begin
TMidiInCapsW(GetRecordPtr^).wPid := val;
end;
function __TMidiInCapsW__Wrapper.getwPid : Word;
begin
result := TMidiInCapsW(GetRecordPtr^).wPid;
end;
procedure __TMidiInCapsW__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
TMidiInCapsW(GetRecordPtr^).vDriverVersion := val;
end;
function __TMidiInCapsW__Wrapper.getvDriverVersion : MMVERSION;
begin
result := TMidiInCapsW(GetRecordPtr^).vDriverVersion;
end;
procedure __TMidiInCapsW__Wrapper.setdwSupport(const val : DWORD);
begin
TMidiInCapsW(GetRecordPtr^).dwSupport := val;
end;
function __TMidiInCapsW__Wrapper.getdwSupport : DWORD;
begin
result := TMidiInCapsW(GetRecordPtr^).dwSupport;
end;
function __TMidiOutCaps__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMidiOutCaps__Wrapper.setwMid(const val : Word);
begin
TMidiOutCaps(GetRecordPtr^).wMid := val;
end;
function __TMidiOutCaps__Wrapper.getwMid : Word;
begin
result := TMidiOutCaps(GetRecordPtr^).wMid;
end;
procedure __TMidiOutCaps__Wrapper.setwPid(const val : Word);
begin
TMidiOutCaps(GetRecordPtr^).wPid := val;
end;
function __TMidiOutCaps__Wrapper.getwPid : Word;
begin
result := TMidiOutCaps(GetRecordPtr^).wPid;
end;
procedure __TMidiOutCaps__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
TMidiOutCaps(GetRecordPtr^).vDriverVersion := val;
end;
function __TMidiOutCaps__Wrapper.getvDriverVersion : MMVERSION;
begin
result := TMidiOutCaps(GetRecordPtr^).vDriverVersion;
end;
procedure __TMidiOutCaps__Wrapper.setwTechnology(const val : Word);
begin
TMidiOutCaps(GetRecordPtr^).wTechnology := val;
end;
function __TMidiOutCaps__Wrapper.getwTechnology : Word;
begin
result := TMidiOutCaps(GetRecordPtr^).wTechnology;
end;
procedure __TMidiOutCaps__Wrapper.setwVoices(const val : Word);
begin
TMidiOutCaps(GetRecordPtr^).wVoices := val;
end;
function __TMidiOutCaps__Wrapper.getwVoices : Word;
begin
result := TMidiOutCaps(GetRecordPtr^).wVoices;
end;
procedure __TMidiOutCaps__Wrapper.setwNotes(const val : Word);
begin
TMidiOutCaps(GetRecordPtr^).wNotes := val;
end;
function __TMidiOutCaps__Wrapper.getwNotes : Word;
begin
result := TMidiOutCaps(GetRecordPtr^).wNotes;
end;
procedure __TMidiOutCaps__Wrapper.setwChannelMask(const val : Word);
begin
TMidiOutCaps(GetRecordPtr^).wChannelMask := val;
end;
function __TMidiOutCaps__Wrapper.getwChannelMask : Word;
begin
result := TMidiOutCaps(GetRecordPtr^).wChannelMask;
end;
procedure __TMidiOutCaps__Wrapper.setdwSupport(const val : DWORD);
begin
TMidiOutCaps(GetRecordPtr^).dwSupport := val;
end;
function __TMidiOutCaps__Wrapper.getdwSupport : DWORD;
begin
result := TMidiOutCaps(GetRecordPtr^).dwSupport;
end;
function __TMidiOutCapsA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMidiOutCapsA__Wrapper.setwMid(const val : Word);
begin
TMidiOutCapsA(GetRecordPtr^).wMid := val;
end;
function __TMidiOutCapsA__Wrapper.getwMid : Word;
begin
result := TMidiOutCapsA(GetRecordPtr^).wMid;
end;
procedure __TMidiOutCapsA__Wrapper.setwPid(const val : Word);
begin
TMidiOutCapsA(GetRecordPtr^).wPid := val;
end;
function __TMidiOutCapsA__Wrapper.getwPid : Word;
begin
result := TMidiOutCapsA(GetRecordPtr^).wPid;
end;
procedure __TMidiOutCapsA__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
TMidiOutCapsA(GetRecordPtr^).vDriverVersion := val;
end;
function __TMidiOutCapsA__Wrapper.getvDriverVersion : MMVERSION;
begin
result := TMidiOutCapsA(GetRecordPtr^).vDriverVersion;
end;
procedure __TMidiOutCapsA__Wrapper.setwTechnology(const val : Word);
begin
TMidiOutCapsA(GetRecordPtr^).wTechnology := val;
end;
function __TMidiOutCapsA__Wrapper.getwTechnology : Word;
begin
result := TMidiOutCapsA(GetRecordPtr^).wTechnology;
end;
procedure __TMidiOutCapsA__Wrapper.setwVoices(const val : Word);
begin
TMidiOutCapsA(GetRecordPtr^).wVoices := val;
end;
function __TMidiOutCapsA__Wrapper.getwVoices : Word;
begin
result := TMidiOutCapsA(GetRecordPtr^).wVoices;
end;
procedure __TMidiOutCapsA__Wrapper.setwNotes(const val : Word);
begin
TMidiOutCapsA(GetRecordPtr^).wNotes := val;
end;
function __TMidiOutCapsA__Wrapper.getwNotes : Word;
begin
result := TMidiOutCapsA(GetRecordPtr^).wNotes;
end;
procedure __TMidiOutCapsA__Wrapper.setwChannelMask(const val : Word);
begin
TMidiOutCapsA(GetRecordPtr^).wChannelMask := val;
end;
function __TMidiOutCapsA__Wrapper.getwChannelMask : Word;
begin
result := TMidiOutCapsA(GetRecordPtr^).wChannelMask;
end;
procedure __TMidiOutCapsA__Wrapper.setdwSupport(const val : DWORD);
begin
TMidiOutCapsA(GetRecordPtr^).dwSupport := val;
end;
function __TMidiOutCapsA__Wrapper.getdwSupport : DWORD;
begin
result := TMidiOutCapsA(GetRecordPtr^).dwSupport;
end;
function __TMidiOutCapsW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMidiOutCapsW__Wrapper.setwMid(const val : Word);
begin
TMidiOutCapsW(GetRecordPtr^).wMid := val;
end;
function __TMidiOutCapsW__Wrapper.getwMid : Word;
begin
result := TMidiOutCapsW(GetRecordPtr^).wMid;
end;
procedure __TMidiOutCapsW__Wrapper.setwPid(const val : Word);
begin
TMidiOutCapsW(GetRecordPtr^).wPid := val;
end;
function __TMidiOutCapsW__Wrapper.getwPid : Word;
begin
result := TMidiOutCapsW(GetRecordPtr^).wPid;
end;
procedure __TMidiOutCapsW__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
TMidiOutCapsW(GetRecordPtr^).vDriverVersion := val;
end;
function __TMidiOutCapsW__Wrapper.getvDriverVersion : MMVERSION;
begin
result := TMidiOutCapsW(GetRecordPtr^).vDriverVersion;
end;
procedure __TMidiOutCapsW__Wrapper.setwTechnology(const val : Word);
begin
TMidiOutCapsW(GetRecordPtr^).wTechnology := val;
end;
function __TMidiOutCapsW__Wrapper.getwTechnology : Word;
begin
result := TMidiOutCapsW(GetRecordPtr^).wTechnology;
end;
procedure __TMidiOutCapsW__Wrapper.setwVoices(const val : Word);
begin
TMidiOutCapsW(GetRecordPtr^).wVoices := val;
end;
function __TMidiOutCapsW__Wrapper.getwVoices : Word;
begin
result := TMidiOutCapsW(GetRecordPtr^).wVoices;
end;
procedure __TMidiOutCapsW__Wrapper.setwNotes(const val : Word);
begin
TMidiOutCapsW(GetRecordPtr^).wNotes := val;
end;
function __TMidiOutCapsW__Wrapper.getwNotes : Word;
begin
result := TMidiOutCapsW(GetRecordPtr^).wNotes;
end;
procedure __TMidiOutCapsW__Wrapper.setwChannelMask(const val : Word);
begin
TMidiOutCapsW(GetRecordPtr^).wChannelMask := val;
end;
function __TMidiOutCapsW__Wrapper.getwChannelMask : Word;
begin
result := TMidiOutCapsW(GetRecordPtr^).wChannelMask;
end;
procedure __TMidiOutCapsW__Wrapper.setdwSupport(const val : DWORD);
begin
TMidiOutCapsW(GetRecordPtr^).dwSupport := val;
end;
function __TMidiOutCapsW__Wrapper.getdwSupport : DWORD;
begin
result := TMidiOutCapsW(GetRecordPtr^).dwSupport;
end;
function __TMidiPropTempo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMidiPropTempo__Wrapper.setcbStruct(const val : DWORD);
begin
TMidiPropTempo(GetRecordPtr^).cbStruct := val;
end;
function __TMidiPropTempo__Wrapper.getcbStruct : DWORD;
begin
result := TMidiPropTempo(GetRecordPtr^).cbStruct;
end;
procedure __TMidiPropTempo__Wrapper.setdwTempo(const val : DWORD);
begin
TMidiPropTempo(GetRecordPtr^).dwTempo := val;
end;
function __TMidiPropTempo__Wrapper.getdwTempo : DWORD;
begin
result := TMidiPropTempo(GetRecordPtr^).dwTempo;
end;
function __TMidiPropTimeDiv__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMidiPropTimeDiv__Wrapper.setcbStruct(const val : DWORD);
begin
TMidiPropTimeDiv(GetRecordPtr^).cbStruct := val;
end;
function __TMidiPropTimeDiv__Wrapper.getcbStruct : DWORD;
begin
result := TMidiPropTimeDiv(GetRecordPtr^).cbStruct;
end;
procedure __TMidiPropTimeDiv__Wrapper.setdwTimeDiv(const val : DWORD);
begin
TMidiPropTimeDiv(GetRecordPtr^).dwTimeDiv := val;
end;
function __TMidiPropTimeDiv__Wrapper.getdwTimeDiv : DWORD;
begin
result := TMidiPropTimeDiv(GetRecordPtr^).dwTimeDiv;
end;
function __TMidiStrmBuffVer__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMidiStrmBuffVer__Wrapper.setdwVersion(const val : DWORD);
begin
TMidiStrmBuffVer(GetRecordPtr^).dwVersion := val;
end;
function __TMidiStrmBuffVer__Wrapper.getdwVersion : DWORD;
begin
result := TMidiStrmBuffVer(GetRecordPtr^).dwVersion;
end;
procedure __TMidiStrmBuffVer__Wrapper.setdwMid(const val : DWORD);
begin
TMidiStrmBuffVer(GetRecordPtr^).dwMid := val;
end;
function __TMidiStrmBuffVer__Wrapper.getdwMid : DWORD;
begin
result := TMidiStrmBuffVer(GetRecordPtr^).dwMid;
end;
procedure __TMidiStrmBuffVer__Wrapper.setdwOEMVersion(const val : DWORD);
begin
TMidiStrmBuffVer(GetRecordPtr^).dwOEMVersion := val;
end;
function __TMidiStrmBuffVer__Wrapper.getdwOEMVersion : DWORD;
begin
result := TMidiStrmBuffVer(GetRecordPtr^).dwOEMVersion;
end;
function __TMixerCaps__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMixerCaps__Wrapper.setwMid(const val : Word);
begin
TMixerCaps(GetRecordPtr^).wMid := val;
end;
function __TMixerCaps__Wrapper.getwMid : Word;
begin
result := TMixerCaps(GetRecordPtr^).wMid;
end;
procedure __TMixerCaps__Wrapper.setwPid(const val : Word);
begin
TMixerCaps(GetRecordPtr^).wPid := val;
end;
function __TMixerCaps__Wrapper.getwPid : Word;
begin
result := TMixerCaps(GetRecordPtr^).wPid;
end;
procedure __TMixerCaps__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
TMixerCaps(GetRecordPtr^).vDriverVersion := val;
end;
function __TMixerCaps__Wrapper.getvDriverVersion : MMVERSION;
begin
result := TMixerCaps(GetRecordPtr^).vDriverVersion;
end;
procedure __TMixerCaps__Wrapper.setfdwSupport(const val : DWORD);
begin
TMixerCaps(GetRecordPtr^).fdwSupport := val;
end;
function __TMixerCaps__Wrapper.getfdwSupport : DWORD;
begin
result := TMixerCaps(GetRecordPtr^).fdwSupport;
end;
procedure __TMixerCaps__Wrapper.setcDestinations(const val : DWORD);
begin
TMixerCaps(GetRecordPtr^).cDestinations := val;
end;
function __TMixerCaps__Wrapper.getcDestinations : DWORD;
begin
result := TMixerCaps(GetRecordPtr^).cDestinations;
end;
function __TMixerCapsA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMixerCapsA__Wrapper.setwMid(const val : Word);
begin
TMixerCapsA(GetRecordPtr^).wMid := val;
end;
function __TMixerCapsA__Wrapper.getwMid : Word;
begin
result := TMixerCapsA(GetRecordPtr^).wMid;
end;
procedure __TMixerCapsA__Wrapper.setwPid(const val : Word);
begin
TMixerCapsA(GetRecordPtr^).wPid := val;
end;
function __TMixerCapsA__Wrapper.getwPid : Word;
begin
result := TMixerCapsA(GetRecordPtr^).wPid;
end;
procedure __TMixerCapsA__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
TMixerCapsA(GetRecordPtr^).vDriverVersion := val;
end;
function __TMixerCapsA__Wrapper.getvDriverVersion : MMVERSION;
begin
result := TMixerCapsA(GetRecordPtr^).vDriverVersion;
end;
procedure __TMixerCapsA__Wrapper.setfdwSupport(const val : DWORD);
begin
TMixerCapsA(GetRecordPtr^).fdwSupport := val;
end;
function __TMixerCapsA__Wrapper.getfdwSupport : DWORD;
begin
result := TMixerCapsA(GetRecordPtr^).fdwSupport;
end;
procedure __TMixerCapsA__Wrapper.setcDestinations(const val : DWORD);
begin
TMixerCapsA(GetRecordPtr^).cDestinations := val;
end;
function __TMixerCapsA__Wrapper.getcDestinations : DWORD;
begin
result := TMixerCapsA(GetRecordPtr^).cDestinations;
end;
function __TMixerCapsW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMixerCapsW__Wrapper.setwMid(const val : Word);
begin
TMixerCapsW(GetRecordPtr^).wMid := val;
end;
function __TMixerCapsW__Wrapper.getwMid : Word;
begin
result := TMixerCapsW(GetRecordPtr^).wMid;
end;
procedure __TMixerCapsW__Wrapper.setwPid(const val : Word);
begin
TMixerCapsW(GetRecordPtr^).wPid := val;
end;
function __TMixerCapsW__Wrapper.getwPid : Word;
begin
result := TMixerCapsW(GetRecordPtr^).wPid;
end;
procedure __TMixerCapsW__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
TMixerCapsW(GetRecordPtr^).vDriverVersion := val;
end;
function __TMixerCapsW__Wrapper.getvDriverVersion : MMVERSION;
begin
result := TMixerCapsW(GetRecordPtr^).vDriverVersion;
end;
procedure __TMixerCapsW__Wrapper.setfdwSupport(const val : DWORD);
begin
TMixerCapsW(GetRecordPtr^).fdwSupport := val;
end;
function __TMixerCapsW__Wrapper.getfdwSupport : DWORD;
begin
result := TMixerCapsW(GetRecordPtr^).fdwSupport;
end;
procedure __TMixerCapsW__Wrapper.setcDestinations(const val : DWORD);
begin
TMixerCapsW(GetRecordPtr^).cDestinations := val;
end;
function __TMixerCapsW__Wrapper.getcDestinations : DWORD;
begin
result := TMixerCapsW(GetRecordPtr^).cDestinations;
end;
function __tMIXERCONTROLDETAILS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tMIXERCONTROLDETAILS__Wrapper.setcbStruct(const val : DWORD);
begin
tMIXERCONTROLDETAILS(GetRecordPtr^).cbStruct := val;
end;
function __tMIXERCONTROLDETAILS__Wrapper.getcbStruct : DWORD;
begin
result := tMIXERCONTROLDETAILS(GetRecordPtr^).cbStruct;
end;
procedure __tMIXERCONTROLDETAILS__Wrapper.setdwControlID(const val : DWORD);
begin
tMIXERCONTROLDETAILS(GetRecordPtr^).dwControlID := val;
end;
function __tMIXERCONTROLDETAILS__Wrapper.getdwControlID : DWORD;
begin
result := tMIXERCONTROLDETAILS(GetRecordPtr^).dwControlID;
end;
procedure __tMIXERCONTROLDETAILS__Wrapper.setcChannels(const val : DWORD);
begin
tMIXERCONTROLDETAILS(GetRecordPtr^).cChannels := val;
end;
function __tMIXERCONTROLDETAILS__Wrapper.getcChannels : DWORD;
begin
result := tMIXERCONTROLDETAILS(GetRecordPtr^).cChannels;
end;
procedure __tMIXERCONTROLDETAILS__Wrapper.setcMultipleItems(const val : DWORD);
begin
tMIXERCONTROLDETAILS(GetRecordPtr^).cMultipleItems := val;
end;
function __tMIXERCONTROLDETAILS__Wrapper.getcMultipleItems : DWORD;
begin
result := tMIXERCONTROLDETAILS(GetRecordPtr^).cMultipleItems;
end;
procedure __tMIXERCONTROLDETAILS__Wrapper.setcbDetails(const val : DWORD);
begin
tMIXERCONTROLDETAILS(GetRecordPtr^).cbDetails := val;
end;
function __tMIXERCONTROLDETAILS__Wrapper.getcbDetails : DWORD;
begin
result := tMIXERCONTROLDETAILS(GetRecordPtr^).cbDetails;
end;
function __tMIXERCONTROLDETAILS_BOOLEAN__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tMIXERCONTROLDETAILS_BOOLEAN__Wrapper.setfValue(const val : Longint);
begin
tMIXERCONTROLDETAILS_BOOLEAN(GetRecordPtr^).fValue := val;
end;
function __tMIXERCONTROLDETAILS_BOOLEAN__Wrapper.getfValue : Longint;
begin
result := tMIXERCONTROLDETAILS_BOOLEAN(GetRecordPtr^).fValue;
end;
function __tMIXERCONTROLDETAILS_SIGNED__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tMIXERCONTROLDETAILS_SIGNED__Wrapper.setlValue(const val : Longint);
begin
tMIXERCONTROLDETAILS_SIGNED(GetRecordPtr^).lValue := val;
end;
function __tMIXERCONTROLDETAILS_SIGNED__Wrapper.getlValue : Longint;
begin
result := tMIXERCONTROLDETAILS_SIGNED(GetRecordPtr^).lValue;
end;
function __tMIXERCONTROLDETAILS_UNSIGNED__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tMIXERCONTROLDETAILS_UNSIGNED__Wrapper.setdwValue(const val : DWORD);
begin
tMIXERCONTROLDETAILS_UNSIGNED(GetRecordPtr^).dwValue := val;
end;
function __tMIXERCONTROLDETAILS_UNSIGNED__Wrapper.getdwValue : DWORD;
begin
result := tMIXERCONTROLDETAILS_UNSIGNED(GetRecordPtr^).dwValue;
end;
function __TMixerControlDetailsBoolean__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMixerControlDetailsBoolean__Wrapper.setfValue(const val : Longint);
begin
TMixerControlDetailsBoolean(GetRecordPtr^).fValue := val;
end;
function __TMixerControlDetailsBoolean__Wrapper.getfValue : Longint;
begin
result := TMixerControlDetailsBoolean(GetRecordPtr^).fValue;
end;
function __TMixerControlDetailsListText__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMixerControlDetailsListText__Wrapper.setdwParam1(const val : DWORD);
begin
TMixerControlDetailsListText(GetRecordPtr^).dwParam1 := val;
end;
function __TMixerControlDetailsListText__Wrapper.getdwParam1 : DWORD;
begin
result := TMixerControlDetailsListText(GetRecordPtr^).dwParam1;
end;
procedure __TMixerControlDetailsListText__Wrapper.setdwParam2(const val : DWORD);
begin
TMixerControlDetailsListText(GetRecordPtr^).dwParam2 := val;
end;
function __TMixerControlDetailsListText__Wrapper.getdwParam2 : DWORD;
begin
result := TMixerControlDetailsListText(GetRecordPtr^).dwParam2;
end;
function __TMixerControlDetailsListTextA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMixerControlDetailsListTextA__Wrapper.setdwParam1(const val : DWORD);
begin
TMixerControlDetailsListTextA(GetRecordPtr^).dwParam1 := val;
end;
function __TMixerControlDetailsListTextA__Wrapper.getdwParam1 : DWORD;
begin
result := TMixerControlDetailsListTextA(GetRecordPtr^).dwParam1;
end;
procedure __TMixerControlDetailsListTextA__Wrapper.setdwParam2(const val : DWORD);
begin
TMixerControlDetailsListTextA(GetRecordPtr^).dwParam2 := val;
end;
function __TMixerControlDetailsListTextA__Wrapper.getdwParam2 : DWORD;
begin
result := TMixerControlDetailsListTextA(GetRecordPtr^).dwParam2;
end;
function __TMixerControlDetailsListTextW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMixerControlDetailsListTextW__Wrapper.setdwParam1(const val : DWORD);
begin
TMixerControlDetailsListTextW(GetRecordPtr^).dwParam1 := val;
end;
function __TMixerControlDetailsListTextW__Wrapper.getdwParam1 : DWORD;
begin
result := TMixerControlDetailsListTextW(GetRecordPtr^).dwParam1;
end;
procedure __TMixerControlDetailsListTextW__Wrapper.setdwParam2(const val : DWORD);
begin
TMixerControlDetailsListTextW(GetRecordPtr^).dwParam2 := val;
end;
function __TMixerControlDetailsListTextW__Wrapper.getdwParam2 : DWORD;
begin
result := TMixerControlDetailsListTextW(GetRecordPtr^).dwParam2;
end;
function __TMixerControlDetailsSigned__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMixerControlDetailsSigned__Wrapper.setlValue(const val : Longint);
begin
TMixerControlDetailsSigned(GetRecordPtr^).lValue := val;
end;
function __TMixerControlDetailsSigned__Wrapper.getlValue : Longint;
begin
result := TMixerControlDetailsSigned(GetRecordPtr^).lValue;
end;
function __TMixerControlDetailsUnsigned__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMixerControlDetailsUnsigned__Wrapper.setdwValue(const val : DWORD);
begin
TMixerControlDetailsUnsigned(GetRecordPtr^).dwValue := val;
end;
function __TMixerControlDetailsUnsigned__Wrapper.getdwValue : DWORD;
begin
result := TMixerControlDetailsUnsigned(GetRecordPtr^).dwValue;
end;
function __TMixerLine__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMixerLine__Wrapper.setcbStruct(const val : DWORD);
begin
TMixerLine(GetRecordPtr^).cbStruct := val;
end;
function __TMixerLine__Wrapper.getcbStruct : DWORD;
begin
result := TMixerLine(GetRecordPtr^).cbStruct;
end;
procedure __TMixerLine__Wrapper.setdwDestination(const val : DWORD);
begin
TMixerLine(GetRecordPtr^).dwDestination := val;
end;
function __TMixerLine__Wrapper.getdwDestination : DWORD;
begin
result := TMixerLine(GetRecordPtr^).dwDestination;
end;
procedure __TMixerLine__Wrapper.setdwSource(const val : DWORD);
begin
TMixerLine(GetRecordPtr^).dwSource := val;
end;
function __TMixerLine__Wrapper.getdwSource : DWORD;
begin
result := TMixerLine(GetRecordPtr^).dwSource;
end;
procedure __TMixerLine__Wrapper.setdwLineID(const val : DWORD);
begin
TMixerLine(GetRecordPtr^).dwLineID := val;
end;
function __TMixerLine__Wrapper.getdwLineID : DWORD;
begin
result := TMixerLine(GetRecordPtr^).dwLineID;
end;
procedure __TMixerLine__Wrapper.setfdwLine(const val : DWORD);
begin
TMixerLine(GetRecordPtr^).fdwLine := val;
end;
function __TMixerLine__Wrapper.getfdwLine : DWORD;
begin
result := TMixerLine(GetRecordPtr^).fdwLine;
end;
procedure __TMixerLine__Wrapper.setdwUser(const val : DWORD);
begin
TMixerLine(GetRecordPtr^).dwUser := val;
end;
function __TMixerLine__Wrapper.getdwUser : DWORD;
begin
result := TMixerLine(GetRecordPtr^).dwUser;
end;
procedure __TMixerLine__Wrapper.setdwComponentType(const val : DWORD);
begin
TMixerLine(GetRecordPtr^).dwComponentType := val;
end;
function __TMixerLine__Wrapper.getdwComponentType : DWORD;
begin
result := TMixerLine(GetRecordPtr^).dwComponentType;
end;
procedure __TMixerLine__Wrapper.setcChannels(const val : DWORD);
begin
TMixerLine(GetRecordPtr^).cChannels := val;
end;
function __TMixerLine__Wrapper.getcChannels : DWORD;
begin
result := TMixerLine(GetRecordPtr^).cChannels;
end;
procedure __TMixerLine__Wrapper.setcConnections(const val : DWORD);
begin
TMixerLine(GetRecordPtr^).cConnections := val;
end;
function __TMixerLine__Wrapper.getcConnections : DWORD;
begin
result := TMixerLine(GetRecordPtr^).cConnections;
end;
procedure __TMixerLine__Wrapper.setcControls(const val : DWORD);
begin
TMixerLine(GetRecordPtr^).cControls := val;
end;
function __TMixerLine__Wrapper.getcControls : DWORD;
begin
result := TMixerLine(GetRecordPtr^).cControls;
end;
function __TMixerLineA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMixerLineA__Wrapper.setcbStruct(const val : DWORD);
begin
TMixerLineA(GetRecordPtr^).cbStruct := val;
end;
function __TMixerLineA__Wrapper.getcbStruct : DWORD;
begin
result := TMixerLineA(GetRecordPtr^).cbStruct;
end;
procedure __TMixerLineA__Wrapper.setdwDestination(const val : DWORD);
begin
TMixerLineA(GetRecordPtr^).dwDestination := val;
end;
function __TMixerLineA__Wrapper.getdwDestination : DWORD;
begin
result := TMixerLineA(GetRecordPtr^).dwDestination;
end;
procedure __TMixerLineA__Wrapper.setdwSource(const val : DWORD);
begin
TMixerLineA(GetRecordPtr^).dwSource := val;
end;
function __TMixerLineA__Wrapper.getdwSource : DWORD;
begin
result := TMixerLineA(GetRecordPtr^).dwSource;
end;
procedure __TMixerLineA__Wrapper.setdwLineID(const val : DWORD);
begin
TMixerLineA(GetRecordPtr^).dwLineID := val;
end;
function __TMixerLineA__Wrapper.getdwLineID : DWORD;
begin
result := TMixerLineA(GetRecordPtr^).dwLineID;
end;
procedure __TMixerLineA__Wrapper.setfdwLine(const val : DWORD);
begin
TMixerLineA(GetRecordPtr^).fdwLine := val;
end;
function __TMixerLineA__Wrapper.getfdwLine : DWORD;
begin
result := TMixerLineA(GetRecordPtr^).fdwLine;
end;
procedure __TMixerLineA__Wrapper.setdwUser(const val : DWORD);
begin
TMixerLineA(GetRecordPtr^).dwUser := val;
end;
function __TMixerLineA__Wrapper.getdwUser : DWORD;
begin
result := TMixerLineA(GetRecordPtr^).dwUser;
end;
procedure __TMixerLineA__Wrapper.setdwComponentType(const val : DWORD);
begin
TMixerLineA(GetRecordPtr^).dwComponentType := val;
end;
function __TMixerLineA__Wrapper.getdwComponentType : DWORD;
begin
result := TMixerLineA(GetRecordPtr^).dwComponentType;
end;
procedure __TMixerLineA__Wrapper.setcChannels(const val : DWORD);
begin
TMixerLineA(GetRecordPtr^).cChannels := val;
end;
function __TMixerLineA__Wrapper.getcChannels : DWORD;
begin
result := TMixerLineA(GetRecordPtr^).cChannels;
end;
procedure __TMixerLineA__Wrapper.setcConnections(const val : DWORD);
begin
TMixerLineA(GetRecordPtr^).cConnections := val;
end;
function __TMixerLineA__Wrapper.getcConnections : DWORD;
begin
result := TMixerLineA(GetRecordPtr^).cConnections;
end;
procedure __TMixerLineA__Wrapper.setcControls(const val : DWORD);
begin
TMixerLineA(GetRecordPtr^).cControls := val;
end;
function __TMixerLineA__Wrapper.getcControls : DWORD;
begin
result := TMixerLineA(GetRecordPtr^).cControls;
end;
function __TMixerLineControls__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMixerLineControls__Wrapper.setcbStruct(const val : DWORD);
begin
TMixerLineControls(GetRecordPtr^).cbStruct := val;
end;
function __TMixerLineControls__Wrapper.getcbStruct : DWORD;
begin
result := TMixerLineControls(GetRecordPtr^).cbStruct;
end;
procedure __TMixerLineControls__Wrapper.setdwLineID(const val : DWORD);
begin
TMixerLineControls(GetRecordPtr^).dwLineID := val;
end;
function __TMixerLineControls__Wrapper.getdwLineID : DWORD;
begin
result := TMixerLineControls(GetRecordPtr^).dwLineID;
end;
procedure __TMixerLineControls__Wrapper.setdwControlID(const val : DWORD);
begin
TMixerLineControls(GetRecordPtr^).dwControlID := val;
end;
function __TMixerLineControls__Wrapper.getdwControlID : DWORD;
begin
result := TMixerLineControls(GetRecordPtr^).dwControlID;
end;
procedure __TMixerLineControls__Wrapper.setdwControlType(const val : DWORD);
begin
TMixerLineControls(GetRecordPtr^).dwControlType := val;
end;
function __TMixerLineControls__Wrapper.getdwControlType : DWORD;
begin
result := TMixerLineControls(GetRecordPtr^).dwControlType;
end;
procedure __TMixerLineControls__Wrapper.setcControls(const val : DWORD);
begin
TMixerLineControls(GetRecordPtr^).cControls := val;
end;
function __TMixerLineControls__Wrapper.getcControls : DWORD;
begin
result := TMixerLineControls(GetRecordPtr^).cControls;
end;
procedure __TMixerLineControls__Wrapper.setcbmxctrl(const val : DWORD);
begin
TMixerLineControls(GetRecordPtr^).cbmxctrl := val;
end;
function __TMixerLineControls__Wrapper.getcbmxctrl : DWORD;
begin
result := TMixerLineControls(GetRecordPtr^).cbmxctrl;
end;
function __TMixerLineControlsA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMixerLineControlsA__Wrapper.setcbStruct(const val : DWORD);
begin
TMixerLineControlsA(GetRecordPtr^).cbStruct := val;
end;
function __TMixerLineControlsA__Wrapper.getcbStruct : DWORD;
begin
result := TMixerLineControlsA(GetRecordPtr^).cbStruct;
end;
procedure __TMixerLineControlsA__Wrapper.setdwLineID(const val : DWORD);
begin
TMixerLineControlsA(GetRecordPtr^).dwLineID := val;
end;
function __TMixerLineControlsA__Wrapper.getdwLineID : DWORD;
begin
result := TMixerLineControlsA(GetRecordPtr^).dwLineID;
end;
procedure __TMixerLineControlsA__Wrapper.setdwControlID(const val : DWORD);
begin
TMixerLineControlsA(GetRecordPtr^).dwControlID := val;
end;
function __TMixerLineControlsA__Wrapper.getdwControlID : DWORD;
begin
result := TMixerLineControlsA(GetRecordPtr^).dwControlID;
end;
procedure __TMixerLineControlsA__Wrapper.setdwControlType(const val : DWORD);
begin
TMixerLineControlsA(GetRecordPtr^).dwControlType := val;
end;
function __TMixerLineControlsA__Wrapper.getdwControlType : DWORD;
begin
result := TMixerLineControlsA(GetRecordPtr^).dwControlType;
end;
procedure __TMixerLineControlsA__Wrapper.setcControls(const val : DWORD);
begin
TMixerLineControlsA(GetRecordPtr^).cControls := val;
end;
function __TMixerLineControlsA__Wrapper.getcControls : DWORD;
begin
result := TMixerLineControlsA(GetRecordPtr^).cControls;
end;
procedure __TMixerLineControlsA__Wrapper.setcbmxctrl(const val : DWORD);
begin
TMixerLineControlsA(GetRecordPtr^).cbmxctrl := val;
end;
function __TMixerLineControlsA__Wrapper.getcbmxctrl : DWORD;
begin
result := TMixerLineControlsA(GetRecordPtr^).cbmxctrl;
end;
function __TMixerLineControlsW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMixerLineControlsW__Wrapper.setcbStruct(const val : DWORD);
begin
TMixerLineControlsW(GetRecordPtr^).cbStruct := val;
end;
function __TMixerLineControlsW__Wrapper.getcbStruct : DWORD;
begin
result := TMixerLineControlsW(GetRecordPtr^).cbStruct;
end;
procedure __TMixerLineControlsW__Wrapper.setdwLineID(const val : DWORD);
begin
TMixerLineControlsW(GetRecordPtr^).dwLineID := val;
end;
function __TMixerLineControlsW__Wrapper.getdwLineID : DWORD;
begin
result := TMixerLineControlsW(GetRecordPtr^).dwLineID;
end;
procedure __TMixerLineControlsW__Wrapper.setdwControlID(const val : DWORD);
begin
TMixerLineControlsW(GetRecordPtr^).dwControlID := val;
end;
function __TMixerLineControlsW__Wrapper.getdwControlID : DWORD;
begin
result := TMixerLineControlsW(GetRecordPtr^).dwControlID;
end;
procedure __TMixerLineControlsW__Wrapper.setdwControlType(const val : DWORD);
begin
TMixerLineControlsW(GetRecordPtr^).dwControlType := val;
end;
function __TMixerLineControlsW__Wrapper.getdwControlType : DWORD;
begin
result := TMixerLineControlsW(GetRecordPtr^).dwControlType;
end;
procedure __TMixerLineControlsW__Wrapper.setcControls(const val : DWORD);
begin
TMixerLineControlsW(GetRecordPtr^).cControls := val;
end;
function __TMixerLineControlsW__Wrapper.getcControls : DWORD;
begin
result := TMixerLineControlsW(GetRecordPtr^).cControls;
end;
procedure __TMixerLineControlsW__Wrapper.setcbmxctrl(const val : DWORD);
begin
TMixerLineControlsW(GetRecordPtr^).cbmxctrl := val;
end;
function __TMixerLineControlsW__Wrapper.getcbmxctrl : DWORD;
begin
result := TMixerLineControlsW(GetRecordPtr^).cbmxctrl;
end;
function __TMixerLineW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMixerLineW__Wrapper.setcbStruct(const val : DWORD);
begin
TMixerLineW(GetRecordPtr^).cbStruct := val;
end;
function __TMixerLineW__Wrapper.getcbStruct : DWORD;
begin
result := TMixerLineW(GetRecordPtr^).cbStruct;
end;
procedure __TMixerLineW__Wrapper.setdwDestination(const val : DWORD);
begin
TMixerLineW(GetRecordPtr^).dwDestination := val;
end;
function __TMixerLineW__Wrapper.getdwDestination : DWORD;
begin
result := TMixerLineW(GetRecordPtr^).dwDestination;
end;
procedure __TMixerLineW__Wrapper.setdwSource(const val : DWORD);
begin
TMixerLineW(GetRecordPtr^).dwSource := val;
end;
function __TMixerLineW__Wrapper.getdwSource : DWORD;
begin
result := TMixerLineW(GetRecordPtr^).dwSource;
end;
procedure __TMixerLineW__Wrapper.setdwLineID(const val : DWORD);
begin
TMixerLineW(GetRecordPtr^).dwLineID := val;
end;
function __TMixerLineW__Wrapper.getdwLineID : DWORD;
begin
result := TMixerLineW(GetRecordPtr^).dwLineID;
end;
procedure __TMixerLineW__Wrapper.setfdwLine(const val : DWORD);
begin
TMixerLineW(GetRecordPtr^).fdwLine := val;
end;
function __TMixerLineW__Wrapper.getfdwLine : DWORD;
begin
result := TMixerLineW(GetRecordPtr^).fdwLine;
end;
procedure __TMixerLineW__Wrapper.setdwUser(const val : DWORD);
begin
TMixerLineW(GetRecordPtr^).dwUser := val;
end;
function __TMixerLineW__Wrapper.getdwUser : DWORD;
begin
result := TMixerLineW(GetRecordPtr^).dwUser;
end;
procedure __TMixerLineW__Wrapper.setdwComponentType(const val : DWORD);
begin
TMixerLineW(GetRecordPtr^).dwComponentType := val;
end;
function __TMixerLineW__Wrapper.getdwComponentType : DWORD;
begin
result := TMixerLineW(GetRecordPtr^).dwComponentType;
end;
procedure __TMixerLineW__Wrapper.setcChannels(const val : DWORD);
begin
TMixerLineW(GetRecordPtr^).cChannels := val;
end;
function __TMixerLineW__Wrapper.getcChannels : DWORD;
begin
result := TMixerLineW(GetRecordPtr^).cChannels;
end;
procedure __TMixerLineW__Wrapper.setcConnections(const val : DWORD);
begin
TMixerLineW(GetRecordPtr^).cConnections := val;
end;
function __TMixerLineW__Wrapper.getcConnections : DWORD;
begin
result := TMixerLineW(GetRecordPtr^).cConnections;
end;
procedure __TMixerLineW__Wrapper.setcControls(const val : DWORD);
begin
TMixerLineW(GetRecordPtr^).cControls := val;
end;
function __TMixerLineW__Wrapper.getcControls : DWORD;
begin
result := TMixerLineW(GetRecordPtr^).cControls;
end;
function __TMMCKInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMMCKInfo__Wrapper.setckid(const val : FOURCC);
begin
TMMCKInfo(GetRecordPtr^).ckid := val;
end;
function __TMMCKInfo__Wrapper.getckid : FOURCC;
begin
result := TMMCKInfo(GetRecordPtr^).ckid;
end;
procedure __TMMCKInfo__Wrapper.setcksize(const val : DWORD);
begin
TMMCKInfo(GetRecordPtr^).cksize := val;
end;
function __TMMCKInfo__Wrapper.getcksize : DWORD;
begin
result := TMMCKInfo(GetRecordPtr^).cksize;
end;
procedure __TMMCKInfo__Wrapper.setfccType(const val : FOURCC);
begin
TMMCKInfo(GetRecordPtr^).fccType := val;
end;
function __TMMCKInfo__Wrapper.getfccType : FOURCC;
begin
result := TMMCKInfo(GetRecordPtr^).fccType;
end;
procedure __TMMCKInfo__Wrapper.setdwDataOffset(const val : DWORD);
begin
TMMCKInfo(GetRecordPtr^).dwDataOffset := val;
end;
function __TMMCKInfo__Wrapper.getdwDataOffset : DWORD;
begin
result := TMMCKInfo(GetRecordPtr^).dwDataOffset;
end;
procedure __TMMCKInfo__Wrapper.setdwFlags(const val : DWORD);
begin
TMMCKInfo(GetRecordPtr^).dwFlags := val;
end;
function __TMMCKInfo__Wrapper.getdwFlags : DWORD;
begin
result := TMMCKInfo(GetRecordPtr^).dwFlags;
end;
function __TMMIOInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMMIOInfo__Wrapper.setdwFlags(const val : DWORD);
begin
TMMIOInfo(GetRecordPtr^).dwFlags := val;
end;
function __TMMIOInfo__Wrapper.getdwFlags : DWORD;
begin
result := TMMIOInfo(GetRecordPtr^).dwFlags;
end;
procedure __TMMIOInfo__Wrapper.setfccIOProc(const val : FOURCC);
begin
TMMIOInfo(GetRecordPtr^).fccIOProc := val;
end;
function __TMMIOInfo__Wrapper.getfccIOProc : FOURCC;
begin
result := TMMIOInfo(GetRecordPtr^).fccIOProc;
end;
procedure __TMMIOInfo__Wrapper.setwErrorRet(const val : UINT);
begin
TMMIOInfo(GetRecordPtr^).wErrorRet := val;
end;
function __TMMIOInfo__Wrapper.getwErrorRet : UINT;
begin
result := TMMIOInfo(GetRecordPtr^).wErrorRet;
end;
procedure __TMMIOInfo__Wrapper.setcchBuffer(const val : Longint);
begin
TMMIOInfo(GetRecordPtr^).cchBuffer := val;
end;
function __TMMIOInfo__Wrapper.getcchBuffer : Longint;
begin
result := TMMIOInfo(GetRecordPtr^).cchBuffer;
end;
procedure __TMMIOInfo__Wrapper.setlBufOffset(const val : Longint);
begin
TMMIOInfo(GetRecordPtr^).lBufOffset := val;
end;
function __TMMIOInfo__Wrapper.getlBufOffset : Longint;
begin
result := TMMIOInfo(GetRecordPtr^).lBufOffset;
end;
procedure __TMMIOInfo__Wrapper.setlDiskOffset(const val : Longint);
begin
TMMIOInfo(GetRecordPtr^).lDiskOffset := val;
end;
function __TMMIOInfo__Wrapper.getlDiskOffset : Longint;
begin
result := TMMIOInfo(GetRecordPtr^).lDiskOffset;
end;
procedure __TMMIOInfo__Wrapper.setdwReserved1(const val : DWORD);
begin
TMMIOInfo(GetRecordPtr^).dwReserved1 := val;
end;
function __TMMIOInfo__Wrapper.getdwReserved1 : DWORD;
begin
result := TMMIOInfo(GetRecordPtr^).dwReserved1;
end;
procedure __TMMIOInfo__Wrapper.setdwReserved2(const val : DWORD);
begin
TMMIOInfo(GetRecordPtr^).dwReserved2 := val;
end;
function __TMMIOInfo__Wrapper.getdwReserved2 : DWORD;
begin
result := TMMIOInfo(GetRecordPtr^).dwReserved2;
end;
procedure __TMMIOInfo__Wrapper.setHMMIO(const val : HMMIO);
begin
TMMIOInfo(GetRecordPtr^).HMMIO := val;
end;
function __TMMIOInfo__Wrapper.getHMMIO : HMMIO;
begin
result := TMMIOInfo(GetRecordPtr^).HMMIO;
end;
function __TMMTime__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMMTime__Wrapper.setms(const val : DWORD);
begin
TMMTime(GetRecordPtr^).ms := val;
end;
function __TMMTime__Wrapper.getms : DWORD;
begin
result := TMMTime(GetRecordPtr^).ms;
end;
procedure __TMMTime__Wrapper.setsample(const val : DWORD);
begin
TMMTime(GetRecordPtr^).sample := val;
end;
function __TMMTime__Wrapper.getsample : DWORD;
begin
result := TMMTime(GetRecordPtr^).sample;
end;
procedure __TMMTime__Wrapper.setcb(const val : DWORD);
begin
TMMTime(GetRecordPtr^).cb := val;
end;
function __TMMTime__Wrapper.getcb : DWORD;
begin
result := TMMTime(GetRecordPtr^).cb;
end;
procedure __TMMTime__Wrapper.setticks(const val : DWORD);
begin
TMMTime(GetRecordPtr^).ticks := val;
end;
function __TMMTime__Wrapper.getticks : DWORD;
begin
result := TMMTime(GetRecordPtr^).ticks;
end;
procedure __TMMTime__Wrapper.sethour(const val : Byte);
begin
TMMTime(GetRecordPtr^).hour := val;
end;
function __TMMTime__Wrapper.gethour : Byte;
begin
result := TMMTime(GetRecordPtr^).hour;
end;
procedure __TMMTime__Wrapper.setmin(const val : Byte);
begin
TMMTime(GetRecordPtr^).min := val;
end;
function __TMMTime__Wrapper.getmin : Byte;
begin
result := TMMTime(GetRecordPtr^).min;
end;
procedure __TMMTime__Wrapper.setsec(const val : Byte);
begin
TMMTime(GetRecordPtr^).sec := val;
end;
function __TMMTime__Wrapper.getsec : Byte;
begin
result := TMMTime(GetRecordPtr^).sec;
end;
procedure __TMMTime__Wrapper.setframe(const val : Byte);
begin
TMMTime(GetRecordPtr^).frame := val;
end;
function __TMMTime__Wrapper.getframe : Byte;
begin
result := TMMTime(GetRecordPtr^).frame;
end;
procedure __TMMTime__Wrapper.setfps(const val : Byte);
begin
TMMTime(GetRecordPtr^).fps := val;
end;
function __TMMTime__Wrapper.getfps : Byte;
begin
result := TMMTime(GetRecordPtr^).fps;
end;
procedure __TMMTime__Wrapper.setdummy(const val : Byte);
begin
TMMTime(GetRecordPtr^).dummy := val;
end;
function __TMMTime__Wrapper.getdummy : Byte;
begin
result := TMMTime(GetRecordPtr^).dummy;
end;
procedure __TMMTime__Wrapper.setsongptrpos(const val : DWORD);
begin
TMMTime(GetRecordPtr^).songptrpos := val;
end;
function __TMMTime__Wrapper.getsongptrpos : DWORD;
begin
result := TMMTime(GetRecordPtr^).songptrpos;
end;
function __TPCMWaveFormat__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPCMWaveFormat__Wrapper.setwBitsPerSample(const val : Word);
begin
TPCMWaveFormat(GetRecordPtr^).wBitsPerSample := val;
end;
function __TPCMWaveFormat__Wrapper.getwBitsPerSample : Word;
begin
result := TPCMWaveFormat(GetRecordPtr^).wBitsPerSample;
end;
function __TTimeCaps__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTimeCaps__Wrapper.setwPeriodMin(const val : UINT);
begin
TTimeCaps(GetRecordPtr^).wPeriodMin := val;
end;
function __TTimeCaps__Wrapper.getwPeriodMin : UINT;
begin
result := TTimeCaps(GetRecordPtr^).wPeriodMin;
end;
procedure __TTimeCaps__Wrapper.setwPeriodMax(const val : UINT);
begin
TTimeCaps(GetRecordPtr^).wPeriodMax := val;
end;
function __TTimeCaps__Wrapper.getwPeriodMax : UINT;
begin
result := TTimeCaps(GetRecordPtr^).wPeriodMax;
end;
function __TWaveFormat__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWaveFormat__Wrapper.setwFormatTag(const val : Word);
begin
TWaveFormat(GetRecordPtr^).wFormatTag := val;
end;
function __TWaveFormat__Wrapper.getwFormatTag : Word;
begin
result := TWaveFormat(GetRecordPtr^).wFormatTag;
end;
procedure __TWaveFormat__Wrapper.setnChannels(const val : Word);
begin
TWaveFormat(GetRecordPtr^).nChannels := val;
end;
function __TWaveFormat__Wrapper.getnChannels : Word;
begin
result := TWaveFormat(GetRecordPtr^).nChannels;
end;
procedure __TWaveFormat__Wrapper.setnSamplesPerSec(const val : DWORD);
begin
TWaveFormat(GetRecordPtr^).nSamplesPerSec := val;
end;
function __TWaveFormat__Wrapper.getnSamplesPerSec : DWORD;
begin
result := TWaveFormat(GetRecordPtr^).nSamplesPerSec;
end;
procedure __TWaveFormat__Wrapper.setnAvgBytesPerSec(const val : DWORD);
begin
TWaveFormat(GetRecordPtr^).nAvgBytesPerSec := val;
end;
function __TWaveFormat__Wrapper.getnAvgBytesPerSec : DWORD;
begin
result := TWaveFormat(GetRecordPtr^).nAvgBytesPerSec;
end;
procedure __TWaveFormat__Wrapper.setnBlockAlign(const val : Word);
begin
TWaveFormat(GetRecordPtr^).nBlockAlign := val;
end;
function __TWaveFormat__Wrapper.getnBlockAlign : Word;
begin
result := TWaveFormat(GetRecordPtr^).nBlockAlign;
end;
function __tWAVEFORMATEX__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tWAVEFORMATEX__Wrapper.setwFormatTag(const val : Word);
begin
tWAVEFORMATEX(GetRecordPtr^).wFormatTag := val;
end;
function __tWAVEFORMATEX__Wrapper.getwFormatTag : Word;
begin
result := tWAVEFORMATEX(GetRecordPtr^).wFormatTag;
end;
procedure __tWAVEFORMATEX__Wrapper.setnChannels(const val : Word);
begin
tWAVEFORMATEX(GetRecordPtr^).nChannels := val;
end;
function __tWAVEFORMATEX__Wrapper.getnChannels : Word;
begin
result := tWAVEFORMATEX(GetRecordPtr^).nChannels;
end;
procedure __tWAVEFORMATEX__Wrapper.setnSamplesPerSec(const val : DWORD);
begin
tWAVEFORMATEX(GetRecordPtr^).nSamplesPerSec := val;
end;
function __tWAVEFORMATEX__Wrapper.getnSamplesPerSec : DWORD;
begin
result := tWAVEFORMATEX(GetRecordPtr^).nSamplesPerSec;
end;
procedure __tWAVEFORMATEX__Wrapper.setnAvgBytesPerSec(const val : DWORD);
begin
tWAVEFORMATEX(GetRecordPtr^).nAvgBytesPerSec := val;
end;
function __tWAVEFORMATEX__Wrapper.getnAvgBytesPerSec : DWORD;
begin
result := tWAVEFORMATEX(GetRecordPtr^).nAvgBytesPerSec;
end;
procedure __tWAVEFORMATEX__Wrapper.setnBlockAlign(const val : Word);
begin
tWAVEFORMATEX(GetRecordPtr^).nBlockAlign := val;
end;
function __tWAVEFORMATEX__Wrapper.getnBlockAlign : Word;
begin
result := tWAVEFORMATEX(GetRecordPtr^).nBlockAlign;
end;
procedure __tWAVEFORMATEX__Wrapper.setwBitsPerSample(const val : Word);
begin
tWAVEFORMATEX(GetRecordPtr^).wBitsPerSample := val;
end;
function __tWAVEFORMATEX__Wrapper.getwBitsPerSample : Word;
begin
result := tWAVEFORMATEX(GetRecordPtr^).wBitsPerSample;
end;
procedure __tWAVEFORMATEX__Wrapper.setcbSize(const val : Word);
begin
tWAVEFORMATEX(GetRecordPtr^).cbSize := val;
end;
function __tWAVEFORMATEX__Wrapper.getcbSize : Word;
begin
result := tWAVEFORMATEX(GetRecordPtr^).cbSize;
end;
function __TWaveHdr__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWaveHdr__Wrapper.setdwBufferLength(const val : DWORD);
begin
TWaveHdr(GetRecordPtr^).dwBufferLength := val;
end;
function __TWaveHdr__Wrapper.getdwBufferLength : DWORD;
begin
result := TWaveHdr(GetRecordPtr^).dwBufferLength;
end;
procedure __TWaveHdr__Wrapper.setdwBytesRecorded(const val : DWORD);
begin
TWaveHdr(GetRecordPtr^).dwBytesRecorded := val;
end;
function __TWaveHdr__Wrapper.getdwBytesRecorded : DWORD;
begin
result := TWaveHdr(GetRecordPtr^).dwBytesRecorded;
end;
procedure __TWaveHdr__Wrapper.setdwUser(const val : DWORD);
begin
TWaveHdr(GetRecordPtr^).dwUser := val;
end;
function __TWaveHdr__Wrapper.getdwUser : DWORD;
begin
result := TWaveHdr(GetRecordPtr^).dwUser;
end;
procedure __TWaveHdr__Wrapper.setdwFlags(const val : DWORD);
begin
TWaveHdr(GetRecordPtr^).dwFlags := val;
end;
function __TWaveHdr__Wrapper.getdwFlags : DWORD;
begin
result := TWaveHdr(GetRecordPtr^).dwFlags;
end;
procedure __TWaveHdr__Wrapper.setdwLoops(const val : DWORD);
begin
TWaveHdr(GetRecordPtr^).dwLoops := val;
end;
function __TWaveHdr__Wrapper.getdwLoops : DWORD;
begin
result := TWaveHdr(GetRecordPtr^).dwLoops;
end;
procedure __TWaveHdr__Wrapper.setreserved(const val : DWORD);
begin
TWaveHdr(GetRecordPtr^).reserved := val;
end;
function __TWaveHdr__Wrapper.getreserved : DWORD;
begin
result := TWaveHdr(GetRecordPtr^).reserved;
end;
function __TWaveInCaps__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWaveInCaps__Wrapper.setwMid(const val : Word);
begin
TWaveInCaps(GetRecordPtr^).wMid := val;
end;
function __TWaveInCaps__Wrapper.getwMid : Word;
begin
result := TWaveInCaps(GetRecordPtr^).wMid;
end;
procedure __TWaveInCaps__Wrapper.setwPid(const val : Word);
begin
TWaveInCaps(GetRecordPtr^).wPid := val;
end;
function __TWaveInCaps__Wrapper.getwPid : Word;
begin
result := TWaveInCaps(GetRecordPtr^).wPid;
end;
procedure __TWaveInCaps__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
TWaveInCaps(GetRecordPtr^).vDriverVersion := val;
end;
function __TWaveInCaps__Wrapper.getvDriverVersion : MMVERSION;
begin
result := TWaveInCaps(GetRecordPtr^).vDriverVersion;
end;
procedure __TWaveInCaps__Wrapper.setdwFormats(const val : DWORD);
begin
TWaveInCaps(GetRecordPtr^).dwFormats := val;
end;
function __TWaveInCaps__Wrapper.getdwFormats : DWORD;
begin
result := TWaveInCaps(GetRecordPtr^).dwFormats;
end;
procedure __TWaveInCaps__Wrapper.setwChannels(const val : Word);
begin
TWaveInCaps(GetRecordPtr^).wChannels := val;
end;
function __TWaveInCaps__Wrapper.getwChannels : Word;
begin
result := TWaveInCaps(GetRecordPtr^).wChannels;
end;
procedure __TWaveInCaps__Wrapper.setwReserved1(const val : Word);
begin
TWaveInCaps(GetRecordPtr^).wReserved1 := val;
end;
function __TWaveInCaps__Wrapper.getwReserved1 : Word;
begin
result := TWaveInCaps(GetRecordPtr^).wReserved1;
end;
function __TWaveInCapsA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWaveInCapsA__Wrapper.setwMid(const val : Word);
begin
TWaveInCapsA(GetRecordPtr^).wMid := val;
end;
function __TWaveInCapsA__Wrapper.getwMid : Word;
begin
result := TWaveInCapsA(GetRecordPtr^).wMid;
end;
procedure __TWaveInCapsA__Wrapper.setwPid(const val : Word);
begin
TWaveInCapsA(GetRecordPtr^).wPid := val;
end;
function __TWaveInCapsA__Wrapper.getwPid : Word;
begin
result := TWaveInCapsA(GetRecordPtr^).wPid;
end;
procedure __TWaveInCapsA__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
TWaveInCapsA(GetRecordPtr^).vDriverVersion := val;
end;
function __TWaveInCapsA__Wrapper.getvDriverVersion : MMVERSION;
begin
result := TWaveInCapsA(GetRecordPtr^).vDriverVersion;
end;
procedure __TWaveInCapsA__Wrapper.setdwFormats(const val : DWORD);
begin
TWaveInCapsA(GetRecordPtr^).dwFormats := val;
end;
function __TWaveInCapsA__Wrapper.getdwFormats : DWORD;
begin
result := TWaveInCapsA(GetRecordPtr^).dwFormats;
end;
procedure __TWaveInCapsA__Wrapper.setwChannels(const val : Word);
begin
TWaveInCapsA(GetRecordPtr^).wChannels := val;
end;
function __TWaveInCapsA__Wrapper.getwChannels : Word;
begin
result := TWaveInCapsA(GetRecordPtr^).wChannels;
end;
procedure __TWaveInCapsA__Wrapper.setwReserved1(const val : Word);
begin
TWaveInCapsA(GetRecordPtr^).wReserved1 := val;
end;
function __TWaveInCapsA__Wrapper.getwReserved1 : Word;
begin
result := TWaveInCapsA(GetRecordPtr^).wReserved1;
end;
function __TWaveInCapsW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWaveInCapsW__Wrapper.setwMid(const val : Word);
begin
TWaveInCapsW(GetRecordPtr^).wMid := val;
end;
function __TWaveInCapsW__Wrapper.getwMid : Word;
begin
result := TWaveInCapsW(GetRecordPtr^).wMid;
end;
procedure __TWaveInCapsW__Wrapper.setwPid(const val : Word);
begin
TWaveInCapsW(GetRecordPtr^).wPid := val;
end;
function __TWaveInCapsW__Wrapper.getwPid : Word;
begin
result := TWaveInCapsW(GetRecordPtr^).wPid;
end;
procedure __TWaveInCapsW__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
TWaveInCapsW(GetRecordPtr^).vDriverVersion := val;
end;
function __TWaveInCapsW__Wrapper.getvDriverVersion : MMVERSION;
begin
result := TWaveInCapsW(GetRecordPtr^).vDriverVersion;
end;
procedure __TWaveInCapsW__Wrapper.setdwFormats(const val : DWORD);
begin
TWaveInCapsW(GetRecordPtr^).dwFormats := val;
end;
function __TWaveInCapsW__Wrapper.getdwFormats : DWORD;
begin
result := TWaveInCapsW(GetRecordPtr^).dwFormats;
end;
procedure __TWaveInCapsW__Wrapper.setwChannels(const val : Word);
begin
TWaveInCapsW(GetRecordPtr^).wChannels := val;
end;
function __TWaveInCapsW__Wrapper.getwChannels : Word;
begin
result := TWaveInCapsW(GetRecordPtr^).wChannels;
end;
procedure __TWaveInCapsW__Wrapper.setwReserved1(const val : Word);
begin
TWaveInCapsW(GetRecordPtr^).wReserved1 := val;
end;
function __TWaveInCapsW__Wrapper.getwReserved1 : Word;
begin
result := TWaveInCapsW(GetRecordPtr^).wReserved1;
end;
function __TWaveOutCaps__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWaveOutCaps__Wrapper.setwMid(const val : Word);
begin
TWaveOutCaps(GetRecordPtr^).wMid := val;
end;
function __TWaveOutCaps__Wrapper.getwMid : Word;
begin
result := TWaveOutCaps(GetRecordPtr^).wMid;
end;
procedure __TWaveOutCaps__Wrapper.setwPid(const val : Word);
begin
TWaveOutCaps(GetRecordPtr^).wPid := val;
end;
function __TWaveOutCaps__Wrapper.getwPid : Word;
begin
result := TWaveOutCaps(GetRecordPtr^).wPid;
end;
procedure __TWaveOutCaps__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
TWaveOutCaps(GetRecordPtr^).vDriverVersion := val;
end;
function __TWaveOutCaps__Wrapper.getvDriverVersion : MMVERSION;
begin
result := TWaveOutCaps(GetRecordPtr^).vDriverVersion;
end;
procedure __TWaveOutCaps__Wrapper.setdwFormats(const val : DWORD);
begin
TWaveOutCaps(GetRecordPtr^).dwFormats := val;
end;
function __TWaveOutCaps__Wrapper.getdwFormats : DWORD;
begin
result := TWaveOutCaps(GetRecordPtr^).dwFormats;
end;
procedure __TWaveOutCaps__Wrapper.setwChannels(const val : Word);
begin
TWaveOutCaps(GetRecordPtr^).wChannels := val;
end;
function __TWaveOutCaps__Wrapper.getwChannels : Word;
begin
result := TWaveOutCaps(GetRecordPtr^).wChannels;
end;
procedure __TWaveOutCaps__Wrapper.setdwSupport(const val : DWORD);
begin
TWaveOutCaps(GetRecordPtr^).dwSupport := val;
end;
function __TWaveOutCaps__Wrapper.getdwSupport : DWORD;
begin
result := TWaveOutCaps(GetRecordPtr^).dwSupport;
end;
function __TWaveOutCapsA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWaveOutCapsA__Wrapper.setwMid(const val : Word);
begin
TWaveOutCapsA(GetRecordPtr^).wMid := val;
end;
function __TWaveOutCapsA__Wrapper.getwMid : Word;
begin
result := TWaveOutCapsA(GetRecordPtr^).wMid;
end;
procedure __TWaveOutCapsA__Wrapper.setwPid(const val : Word);
begin
TWaveOutCapsA(GetRecordPtr^).wPid := val;
end;
function __TWaveOutCapsA__Wrapper.getwPid : Word;
begin
result := TWaveOutCapsA(GetRecordPtr^).wPid;
end;
procedure __TWaveOutCapsA__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
TWaveOutCapsA(GetRecordPtr^).vDriverVersion := val;
end;
function __TWaveOutCapsA__Wrapper.getvDriverVersion : MMVERSION;
begin
result := TWaveOutCapsA(GetRecordPtr^).vDriverVersion;
end;
procedure __TWaveOutCapsA__Wrapper.setdwFormats(const val : DWORD);
begin
TWaveOutCapsA(GetRecordPtr^).dwFormats := val;
end;
function __TWaveOutCapsA__Wrapper.getdwFormats : DWORD;
begin
result := TWaveOutCapsA(GetRecordPtr^).dwFormats;
end;
procedure __TWaveOutCapsA__Wrapper.setwChannels(const val : Word);
begin
TWaveOutCapsA(GetRecordPtr^).wChannels := val;
end;
function __TWaveOutCapsA__Wrapper.getwChannels : Word;
begin
result := TWaveOutCapsA(GetRecordPtr^).wChannels;
end;
procedure __TWaveOutCapsA__Wrapper.setdwSupport(const val : DWORD);
begin
TWaveOutCapsA(GetRecordPtr^).dwSupport := val;
end;
function __TWaveOutCapsA__Wrapper.getdwSupport : DWORD;
begin
result := TWaveOutCapsA(GetRecordPtr^).dwSupport;
end;
function __TWaveOutCapsW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWaveOutCapsW__Wrapper.setwMid(const val : Word);
begin
TWaveOutCapsW(GetRecordPtr^).wMid := val;
end;
function __TWaveOutCapsW__Wrapper.getwMid : Word;
begin
result := TWaveOutCapsW(GetRecordPtr^).wMid;
end;
procedure __TWaveOutCapsW__Wrapper.setwPid(const val : Word);
begin
TWaveOutCapsW(GetRecordPtr^).wPid := val;
end;
function __TWaveOutCapsW__Wrapper.getwPid : Word;
begin
result := TWaveOutCapsW(GetRecordPtr^).wPid;
end;
procedure __TWaveOutCapsW__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
TWaveOutCapsW(GetRecordPtr^).vDriverVersion := val;
end;
function __TWaveOutCapsW__Wrapper.getvDriverVersion : MMVERSION;
begin
result := TWaveOutCapsW(GetRecordPtr^).vDriverVersion;
end;
procedure __TWaveOutCapsW__Wrapper.setdwFormats(const val : DWORD);
begin
TWaveOutCapsW(GetRecordPtr^).dwFormats := val;
end;
function __TWaveOutCapsW__Wrapper.getdwFormats : DWORD;
begin
result := TWaveOutCapsW(GetRecordPtr^).dwFormats;
end;
procedure __TWaveOutCapsW__Wrapper.setwChannels(const val : Word);
begin
TWaveOutCapsW(GetRecordPtr^).wChannels := val;
end;
function __TWaveOutCapsW__Wrapper.getwChannels : Word;
begin
result := TWaveOutCapsW(GetRecordPtr^).wChannels;
end;
procedure __TWaveOutCapsW__Wrapper.setdwSupport(const val : DWORD);
begin
TWaveOutCapsW(GetRecordPtr^).dwSupport := val;
end;
function __TWaveOutCapsW__Wrapper.getdwSupport : DWORD;
begin
result := TWaveOutCapsW(GetRecordPtr^).dwSupport;
end;
function __WAVEFORMAT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __WAVEFORMAT__Wrapper.setwFormatTag(const val : Word);
begin
WAVEFORMAT(GetRecordPtr^).wFormatTag := val;
end;
function __WAVEFORMAT__Wrapper.getwFormatTag : Word;
begin
result := WAVEFORMAT(GetRecordPtr^).wFormatTag;
end;
procedure __WAVEFORMAT__Wrapper.setnChannels(const val : Word);
begin
WAVEFORMAT(GetRecordPtr^).nChannels := val;
end;
function __WAVEFORMAT__Wrapper.getnChannels : Word;
begin
result := WAVEFORMAT(GetRecordPtr^).nChannels;
end;
procedure __WAVEFORMAT__Wrapper.setnSamplesPerSec(const val : DWORD);
begin
WAVEFORMAT(GetRecordPtr^).nSamplesPerSec := val;
end;
function __WAVEFORMAT__Wrapper.getnSamplesPerSec : DWORD;
begin
result := WAVEFORMAT(GetRecordPtr^).nSamplesPerSec;
end;
procedure __WAVEFORMAT__Wrapper.setnAvgBytesPerSec(const val : DWORD);
begin
WAVEFORMAT(GetRecordPtr^).nAvgBytesPerSec := val;
end;
function __WAVEFORMAT__Wrapper.getnAvgBytesPerSec : DWORD;
begin
result := WAVEFORMAT(GetRecordPtr^).nAvgBytesPerSec;
end;
procedure __WAVEFORMAT__Wrapper.setnBlockAlign(const val : Word);
begin
WAVEFORMAT(GetRecordPtr^).nBlockAlign := val;
end;
function __WAVEFORMAT__Wrapper.getnBlockAlign : Word;
begin
result := WAVEFORMAT(GetRecordPtr^).nBlockAlign;
end;
function __waveformat_tag__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __waveformat_tag__Wrapper.setwFormatTag(const val : Word);
begin
waveformat_tag(GetRecordPtr^).wFormatTag := val;
end;
function __waveformat_tag__Wrapper.getwFormatTag : Word;
begin
result := waveformat_tag(GetRecordPtr^).wFormatTag;
end;
procedure __waveformat_tag__Wrapper.setnChannels(const val : Word);
begin
waveformat_tag(GetRecordPtr^).nChannels := val;
end;
function __waveformat_tag__Wrapper.getnChannels : Word;
begin
result := waveformat_tag(GetRecordPtr^).nChannels;
end;
procedure __waveformat_tag__Wrapper.setnSamplesPerSec(const val : DWORD);
begin
waveformat_tag(GetRecordPtr^).nSamplesPerSec := val;
end;
function __waveformat_tag__Wrapper.getnSamplesPerSec : DWORD;
begin
result := waveformat_tag(GetRecordPtr^).nSamplesPerSec;
end;
procedure __waveformat_tag__Wrapper.setnAvgBytesPerSec(const val : DWORD);
begin
waveformat_tag(GetRecordPtr^).nAvgBytesPerSec := val;
end;
function __waveformat_tag__Wrapper.getnAvgBytesPerSec : DWORD;
begin
result := waveformat_tag(GetRecordPtr^).nAvgBytesPerSec;
end;
procedure __waveformat_tag__Wrapper.setnBlockAlign(const val : Word);
begin
waveformat_tag(GetRecordPtr^).nBlockAlign := val;
end;
function __waveformat_tag__Wrapper.getnBlockAlign : Word;
begin
result := waveformat_tag(GetRecordPtr^).nBlockAlign;
end;
function __WAVEHDR__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __WAVEHDR__Wrapper.setdwBufferLength(const val : DWORD);
begin
WAVEHDR(GetRecordPtr^).dwBufferLength := val;
end;
function __WAVEHDR__Wrapper.getdwBufferLength : DWORD;
begin
result := WAVEHDR(GetRecordPtr^).dwBufferLength;
end;
procedure __WAVEHDR__Wrapper.setdwBytesRecorded(const val : DWORD);
begin
WAVEHDR(GetRecordPtr^).dwBytesRecorded := val;
end;
function __WAVEHDR__Wrapper.getdwBytesRecorded : DWORD;
begin
result := WAVEHDR(GetRecordPtr^).dwBytesRecorded;
end;
procedure __WAVEHDR__Wrapper.setdwUser(const val : DWORD);
begin
WAVEHDR(GetRecordPtr^).dwUser := val;
end;
function __WAVEHDR__Wrapper.getdwUser : DWORD;
begin
result := WAVEHDR(GetRecordPtr^).dwUser;
end;
procedure __WAVEHDR__Wrapper.setdwFlags(const val : DWORD);
begin
WAVEHDR(GetRecordPtr^).dwFlags := val;
end;
function __WAVEHDR__Wrapper.getdwFlags : DWORD;
begin
result := WAVEHDR(GetRecordPtr^).dwFlags;
end;
procedure __WAVEHDR__Wrapper.setdwLoops(const val : DWORD);
begin
WAVEHDR(GetRecordPtr^).dwLoops := val;
end;
function __WAVEHDR__Wrapper.getdwLoops : DWORD;
begin
result := WAVEHDR(GetRecordPtr^).dwLoops;
end;
procedure __WAVEHDR__Wrapper.setreserved(const val : DWORD);
begin
WAVEHDR(GetRecordPtr^).reserved := val;
end;
function __WAVEHDR__Wrapper.getreserved : DWORD;
begin
result := WAVEHDR(GetRecordPtr^).reserved;
end;
function __wavehdr_tag__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __wavehdr_tag__Wrapper.setdwBufferLength(const val : DWORD);
begin
wavehdr_tag(GetRecordPtr^).dwBufferLength := val;
end;
function __wavehdr_tag__Wrapper.getdwBufferLength : DWORD;
begin
result := wavehdr_tag(GetRecordPtr^).dwBufferLength;
end;
procedure __wavehdr_tag__Wrapper.setdwBytesRecorded(const val : DWORD);
begin
wavehdr_tag(GetRecordPtr^).dwBytesRecorded := val;
end;
function __wavehdr_tag__Wrapper.getdwBytesRecorded : DWORD;
begin
result := wavehdr_tag(GetRecordPtr^).dwBytesRecorded;
end;
procedure __wavehdr_tag__Wrapper.setdwUser(const val : DWORD);
begin
wavehdr_tag(GetRecordPtr^).dwUser := val;
end;
function __wavehdr_tag__Wrapper.getdwUser : DWORD;
begin
result := wavehdr_tag(GetRecordPtr^).dwUser;
end;
procedure __wavehdr_tag__Wrapper.setdwFlags(const val : DWORD);
begin
wavehdr_tag(GetRecordPtr^).dwFlags := val;
end;
function __wavehdr_tag__Wrapper.getdwFlags : DWORD;
begin
result := wavehdr_tag(GetRecordPtr^).dwFlags;
end;
procedure __wavehdr_tag__Wrapper.setdwLoops(const val : DWORD);
begin
wavehdr_tag(GetRecordPtr^).dwLoops := val;
end;
function __wavehdr_tag__Wrapper.getdwLoops : DWORD;
begin
result := wavehdr_tag(GetRecordPtr^).dwLoops;
end;
procedure __wavehdr_tag__Wrapper.setreserved(const val : DWORD);
begin
wavehdr_tag(GetRecordPtr^).reserved := val;
end;
function __wavehdr_tag__Wrapper.getreserved : DWORD;
begin
result := wavehdr_tag(GetRecordPtr^).reserved;
end;
function __WAVEINCAPS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __WAVEINCAPS__Wrapper.setwMid(const val : Word);
begin
WAVEINCAPS(GetRecordPtr^).wMid := val;
end;
function __WAVEINCAPS__Wrapper.getwMid : Word;
begin
result := WAVEINCAPS(GetRecordPtr^).wMid;
end;
procedure __WAVEINCAPS__Wrapper.setwPid(const val : Word);
begin
WAVEINCAPS(GetRecordPtr^).wPid := val;
end;
function __WAVEINCAPS__Wrapper.getwPid : Word;
begin
result := WAVEINCAPS(GetRecordPtr^).wPid;
end;
procedure __WAVEINCAPS__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
WAVEINCAPS(GetRecordPtr^).vDriverVersion := val;
end;
function __WAVEINCAPS__Wrapper.getvDriverVersion : MMVERSION;
begin
result := WAVEINCAPS(GetRecordPtr^).vDriverVersion;
end;
procedure __WAVEINCAPS__Wrapper.setdwFormats(const val : DWORD);
begin
WAVEINCAPS(GetRecordPtr^).dwFormats := val;
end;
function __WAVEINCAPS__Wrapper.getdwFormats : DWORD;
begin
result := WAVEINCAPS(GetRecordPtr^).dwFormats;
end;
procedure __WAVEINCAPS__Wrapper.setwChannels(const val : Word);
begin
WAVEINCAPS(GetRecordPtr^).wChannels := val;
end;
function __WAVEINCAPS__Wrapper.getwChannels : Word;
begin
result := WAVEINCAPS(GetRecordPtr^).wChannels;
end;
procedure __WAVEINCAPS__Wrapper.setwReserved1(const val : Word);
begin
WAVEINCAPS(GetRecordPtr^).wReserved1 := val;
end;
function __WAVEINCAPS__Wrapper.getwReserved1 : Word;
begin
result := WAVEINCAPS(GetRecordPtr^).wReserved1;
end;
function __WAVEINCAPSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __WAVEINCAPSA__Wrapper.setwMid(const val : Word);
begin
WAVEINCAPSA(GetRecordPtr^).wMid := val;
end;
function __WAVEINCAPSA__Wrapper.getwMid : Word;
begin
result := WAVEINCAPSA(GetRecordPtr^).wMid;
end;
procedure __WAVEINCAPSA__Wrapper.setwPid(const val : Word);
begin
WAVEINCAPSA(GetRecordPtr^).wPid := val;
end;
function __WAVEINCAPSA__Wrapper.getwPid : Word;
begin
result := WAVEINCAPSA(GetRecordPtr^).wPid;
end;
procedure __WAVEINCAPSA__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
WAVEINCAPSA(GetRecordPtr^).vDriverVersion := val;
end;
function __WAVEINCAPSA__Wrapper.getvDriverVersion : MMVERSION;
begin
result := WAVEINCAPSA(GetRecordPtr^).vDriverVersion;
end;
procedure __WAVEINCAPSA__Wrapper.setdwFormats(const val : DWORD);
begin
WAVEINCAPSA(GetRecordPtr^).dwFormats := val;
end;
function __WAVEINCAPSA__Wrapper.getdwFormats : DWORD;
begin
result := WAVEINCAPSA(GetRecordPtr^).dwFormats;
end;
procedure __WAVEINCAPSA__Wrapper.setwChannels(const val : Word);
begin
WAVEINCAPSA(GetRecordPtr^).wChannels := val;
end;
function __WAVEINCAPSA__Wrapper.getwChannels : Word;
begin
result := WAVEINCAPSA(GetRecordPtr^).wChannels;
end;
procedure __WAVEINCAPSA__Wrapper.setwReserved1(const val : Word);
begin
WAVEINCAPSA(GetRecordPtr^).wReserved1 := val;
end;
function __WAVEINCAPSA__Wrapper.getwReserved1 : Word;
begin
result := WAVEINCAPSA(GetRecordPtr^).wReserved1;
end;
function __WAVEINCAPSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __WAVEINCAPSW__Wrapper.setwMid(const val : Word);
begin
WAVEINCAPSW(GetRecordPtr^).wMid := val;
end;
function __WAVEINCAPSW__Wrapper.getwMid : Word;
begin
result := WAVEINCAPSW(GetRecordPtr^).wMid;
end;
procedure __WAVEINCAPSW__Wrapper.setwPid(const val : Word);
begin
WAVEINCAPSW(GetRecordPtr^).wPid := val;
end;
function __WAVEINCAPSW__Wrapper.getwPid : Word;
begin
result := WAVEINCAPSW(GetRecordPtr^).wPid;
end;
procedure __WAVEINCAPSW__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
WAVEINCAPSW(GetRecordPtr^).vDriverVersion := val;
end;
function __WAVEINCAPSW__Wrapper.getvDriverVersion : MMVERSION;
begin
result := WAVEINCAPSW(GetRecordPtr^).vDriverVersion;
end;
procedure __WAVEINCAPSW__Wrapper.setdwFormats(const val : DWORD);
begin
WAVEINCAPSW(GetRecordPtr^).dwFormats := val;
end;
function __WAVEINCAPSW__Wrapper.getdwFormats : DWORD;
begin
result := WAVEINCAPSW(GetRecordPtr^).dwFormats;
end;
procedure __WAVEINCAPSW__Wrapper.setwChannels(const val : Word);
begin
WAVEINCAPSW(GetRecordPtr^).wChannels := val;
end;
function __WAVEINCAPSW__Wrapper.getwChannels : Word;
begin
result := WAVEINCAPSW(GetRecordPtr^).wChannels;
end;
procedure __WAVEINCAPSW__Wrapper.setwReserved1(const val : Word);
begin
WAVEINCAPSW(GetRecordPtr^).wReserved1 := val;
end;
function __WAVEINCAPSW__Wrapper.getwReserved1 : Word;
begin
result := WAVEINCAPSW(GetRecordPtr^).wReserved1;
end;
function __WAVEOUTCAPS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __WAVEOUTCAPS__Wrapper.setwMid(const val : Word);
begin
WAVEOUTCAPS(GetRecordPtr^).wMid := val;
end;
function __WAVEOUTCAPS__Wrapper.getwMid : Word;
begin
result := WAVEOUTCAPS(GetRecordPtr^).wMid;
end;
procedure __WAVEOUTCAPS__Wrapper.setwPid(const val : Word);
begin
WAVEOUTCAPS(GetRecordPtr^).wPid := val;
end;
function __WAVEOUTCAPS__Wrapper.getwPid : Word;
begin
result := WAVEOUTCAPS(GetRecordPtr^).wPid;
end;
procedure __WAVEOUTCAPS__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
WAVEOUTCAPS(GetRecordPtr^).vDriverVersion := val;
end;
function __WAVEOUTCAPS__Wrapper.getvDriverVersion : MMVERSION;
begin
result := WAVEOUTCAPS(GetRecordPtr^).vDriverVersion;
end;
procedure __WAVEOUTCAPS__Wrapper.setdwFormats(const val : DWORD);
begin
WAVEOUTCAPS(GetRecordPtr^).dwFormats := val;
end;
function __WAVEOUTCAPS__Wrapper.getdwFormats : DWORD;
begin
result := WAVEOUTCAPS(GetRecordPtr^).dwFormats;
end;
procedure __WAVEOUTCAPS__Wrapper.setwChannels(const val : Word);
begin
WAVEOUTCAPS(GetRecordPtr^).wChannels := val;
end;
function __WAVEOUTCAPS__Wrapper.getwChannels : Word;
begin
result := WAVEOUTCAPS(GetRecordPtr^).wChannels;
end;
procedure __WAVEOUTCAPS__Wrapper.setdwSupport(const val : DWORD);
begin
WAVEOUTCAPS(GetRecordPtr^).dwSupport := val;
end;
function __WAVEOUTCAPS__Wrapper.getdwSupport : DWORD;
begin
result := WAVEOUTCAPS(GetRecordPtr^).dwSupport;
end;
function __WAVEOUTCAPSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __WAVEOUTCAPSA__Wrapper.setwMid(const val : Word);
begin
WAVEOUTCAPSA(GetRecordPtr^).wMid := val;
end;
function __WAVEOUTCAPSA__Wrapper.getwMid : Word;
begin
result := WAVEOUTCAPSA(GetRecordPtr^).wMid;
end;
procedure __WAVEOUTCAPSA__Wrapper.setwPid(const val : Word);
begin
WAVEOUTCAPSA(GetRecordPtr^).wPid := val;
end;
function __WAVEOUTCAPSA__Wrapper.getwPid : Word;
begin
result := WAVEOUTCAPSA(GetRecordPtr^).wPid;
end;
procedure __WAVEOUTCAPSA__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
WAVEOUTCAPSA(GetRecordPtr^).vDriverVersion := val;
end;
function __WAVEOUTCAPSA__Wrapper.getvDriverVersion : MMVERSION;
begin
result := WAVEOUTCAPSA(GetRecordPtr^).vDriverVersion;
end;
procedure __WAVEOUTCAPSA__Wrapper.setdwFormats(const val : DWORD);
begin
WAVEOUTCAPSA(GetRecordPtr^).dwFormats := val;
end;
function __WAVEOUTCAPSA__Wrapper.getdwFormats : DWORD;
begin
result := WAVEOUTCAPSA(GetRecordPtr^).dwFormats;
end;
procedure __WAVEOUTCAPSA__Wrapper.setwChannels(const val : Word);
begin
WAVEOUTCAPSA(GetRecordPtr^).wChannels := val;
end;
function __WAVEOUTCAPSA__Wrapper.getwChannels : Word;
begin
result := WAVEOUTCAPSA(GetRecordPtr^).wChannels;
end;
procedure __WAVEOUTCAPSA__Wrapper.setdwSupport(const val : DWORD);
begin
WAVEOUTCAPSA(GetRecordPtr^).dwSupport := val;
end;
function __WAVEOUTCAPSA__Wrapper.getdwSupport : DWORD;
begin
result := WAVEOUTCAPSA(GetRecordPtr^).dwSupport;
end;
function __WAVEOUTCAPSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __WAVEOUTCAPSW__Wrapper.setwMid(const val : Word);
begin
WAVEOUTCAPSW(GetRecordPtr^).wMid := val;
end;
function __WAVEOUTCAPSW__Wrapper.getwMid : Word;
begin
result := WAVEOUTCAPSW(GetRecordPtr^).wMid;
end;
procedure __WAVEOUTCAPSW__Wrapper.setwPid(const val : Word);
begin
WAVEOUTCAPSW(GetRecordPtr^).wPid := val;
end;
function __WAVEOUTCAPSW__Wrapper.getwPid : Word;
begin
result := WAVEOUTCAPSW(GetRecordPtr^).wPid;
end;
procedure __WAVEOUTCAPSW__Wrapper.setvDriverVersion(const val : MMVERSION);
begin
WAVEOUTCAPSW(GetRecordPtr^).vDriverVersion := val;
end;
function __WAVEOUTCAPSW__Wrapper.getvDriverVersion : MMVERSION;
begin
result := WAVEOUTCAPSW(GetRecordPtr^).vDriverVersion;
end;
procedure __WAVEOUTCAPSW__Wrapper.setdwFormats(const val : DWORD);
begin
WAVEOUTCAPSW(GetRecordPtr^).dwFormats := val;
end;
function __WAVEOUTCAPSW__Wrapper.getdwFormats : DWORD;
begin
result := WAVEOUTCAPSW(GetRecordPtr^).dwFormats;
end;
procedure __WAVEOUTCAPSW__Wrapper.setwChannels(const val : Word);
begin
WAVEOUTCAPSW(GetRecordPtr^).wChannels := val;
end;
function __WAVEOUTCAPSW__Wrapper.getwChannels : Word;
begin
result := WAVEOUTCAPSW(GetRecordPtr^).wChannels;
end;
procedure __WAVEOUTCAPSW__Wrapper.setdwSupport(const val : DWORD);
begin
WAVEOUTCAPSW(GetRecordPtr^).dwSupport := val;
end;
function __WAVEOUTCAPSW__Wrapper.getdwSupport : DWORD;
begin
result := WAVEOUTCAPSW(GetRecordPtr^).dwSupport;
end;
function __MMCKINFO_ : IDispatch;
begin
  result := ___MMCKINFO__Wrapper.Create;
end;
function __MMIOINFO_ : IDispatch;
begin
  result := ___MMIOINFO__Wrapper.Create;
end;
function _AUXCAPS_ : IDispatch;
begin
  result := __AUXCAPS__Wrapper.Create;
end;
function _AUXCAPSA_ : IDispatch;
begin
  result := __AUXCAPSA__Wrapper.Create;
end;
function _AUXCAPSW_ : IDispatch;
begin
  result := __AUXCAPSW__Wrapper.Create;
end;
function _DRVCONFIGINFO_ : IDispatch;
begin
  result := __DRVCONFIGINFO__Wrapper.Create;
end;
function _DRVCONFIGINFOEX_ : IDispatch;
begin
  result := __DRVCONFIGINFOEX__Wrapper.Create;
end;
function _JOYCAPS_ : IDispatch;
begin
  result := __JOYCAPS__Wrapper.Create;
end;
function _JOYCAPSA_ : IDispatch;
begin
  result := __JOYCAPSA__Wrapper.Create;
end;
function _JOYCAPSW_ : IDispatch;
begin
  result := __JOYCAPSW__Wrapper.Create;
end;
function _JOYINFO_ : IDispatch;
begin
  result := __JOYINFO__Wrapper.Create;
end;
function _joyinfo_tag_ : IDispatch;
begin
  result := __joyinfo_tag__Wrapper.Create;
end;
function _JOYINFOEX_ : IDispatch;
begin
  result := __JOYINFOEX__Wrapper.Create;
end;
function _joyinfoex_tag_ : IDispatch;
begin
  result := __joyinfoex_tag__Wrapper.Create;
end;
function _MCI_ANIM_OPEN_PARMS_ : IDispatch;
begin
  result := __MCI_ANIM_OPEN_PARMS__Wrapper.Create;
end;
function _MCI_ANIM_OPEN_PARMSA_ : IDispatch;
begin
  result := __MCI_ANIM_OPEN_PARMSA__Wrapper.Create;
end;
function _MCI_ANIM_OPEN_PARMSW_ : IDispatch;
begin
  result := __MCI_ANIM_OPEN_PARMSW__Wrapper.Create;
end;
function _MCI_ANIM_PLAY_PARMS_ : IDispatch;
begin
  result := __MCI_ANIM_PLAY_PARMS__Wrapper.Create;
end;
function _MCI_ANIM_RECT_PARMS_ : IDispatch;
begin
  result := __MCI_ANIM_RECT_PARMS__Wrapper.Create;
end;
function _MCI_ANIM_STEP_PARMS_ : IDispatch;
begin
  result := __MCI_ANIM_STEP_PARMS__Wrapper.Create;
end;
function _MCI_ANIM_UPDATE_PARMS_ : IDispatch;
begin
  result := __MCI_ANIM_UPDATE_PARMS__Wrapper.Create;
end;
function _MCI_ANIM_WINDOW_PARMS_ : IDispatch;
begin
  result := __MCI_ANIM_WINDOW_PARMS__Wrapper.Create;
end;
function _MCI_ANIM_WINDOW_PARMSA_ : IDispatch;
begin
  result := __MCI_ANIM_WINDOW_PARMSA__Wrapper.Create;
end;
function _MCI_ANIM_WINDOW_PARMSW_ : IDispatch;
begin
  result := __MCI_ANIM_WINDOW_PARMSW__Wrapper.Create;
end;
function _MCI_BREAK_PARMS_ : IDispatch;
begin
  result := __MCI_BREAK_PARMS__Wrapper.Create;
end;
function _MCI_GENERIC_PARMS_ : IDispatch;
begin
  result := __MCI_GENERIC_PARMS__Wrapper.Create;
end;
function _MCI_GETDEVCAPS_PARMS_ : IDispatch;
begin
  result := __MCI_GETDEVCAPS_PARMS__Wrapper.Create;
end;
function _MCI_INFO_PARMS_ : IDispatch;
begin
  result := __MCI_INFO_PARMS__Wrapper.Create;
end;
function _MCI_INFO_PARMSA_ : IDispatch;
begin
  result := __MCI_INFO_PARMSA__Wrapper.Create;
end;
function _MCI_INFO_PARMSW_ : IDispatch;
begin
  result := __MCI_INFO_PARMSW__Wrapper.Create;
end;
function _MCI_LOAD_PARMS_ : IDispatch;
begin
  result := __MCI_LOAD_PARMS__Wrapper.Create;
end;
function _MCI_LOAD_PARMSA_ : IDispatch;
begin
  result := __MCI_LOAD_PARMSA__Wrapper.Create;
end;
function _MCI_LOAD_PARMSW_ : IDispatch;
begin
  result := __MCI_LOAD_PARMSW__Wrapper.Create;
end;
function _MCI_OPEN_PARMS_ : IDispatch;
begin
  result := __MCI_OPEN_PARMS__Wrapper.Create;
end;
function _MCI_OPEN_PARMSA_ : IDispatch;
begin
  result := __MCI_OPEN_PARMSA__Wrapper.Create;
end;
function _MCI_OPEN_PARMSW_ : IDispatch;
begin
  result := __MCI_OPEN_PARMSW__Wrapper.Create;
end;
function _MCI_OVLY_LOAD_PARMS_ : IDispatch;
begin
  result := __MCI_OVLY_LOAD_PARMS__Wrapper.Create;
end;
function _MCI_OVLY_LOAD_PARMSA_ : IDispatch;
begin
  result := __MCI_OVLY_LOAD_PARMSA__Wrapper.Create;
end;
function _MCI_OVLY_LOAD_PARMSW_ : IDispatch;
begin
  result := __MCI_OVLY_LOAD_PARMSW__Wrapper.Create;
end;
function _MCI_OVLY_OPEN_PARMS_ : IDispatch;
begin
  result := __MCI_OVLY_OPEN_PARMS__Wrapper.Create;
end;
function _MCI_OVLY_OPEN_PARMSA_ : IDispatch;
begin
  result := __MCI_OVLY_OPEN_PARMSA__Wrapper.Create;
end;
function _MCI_OVLY_OPEN_PARMSW_ : IDispatch;
begin
  result := __MCI_OVLY_OPEN_PARMSW__Wrapper.Create;
end;
function _MCI_OVLY_RECT_PARMS_ : IDispatch;
begin
  result := __MCI_OVLY_RECT_PARMS__Wrapper.Create;
end;
function _MCI_OVLY_SAVE_PARMS_ : IDispatch;
begin
  result := __MCI_OVLY_SAVE_PARMS__Wrapper.Create;
end;
function _MCI_OVLY_SAVE_PARMSA_ : IDispatch;
begin
  result := __MCI_OVLY_SAVE_PARMSA__Wrapper.Create;
end;
function _MCI_OVLY_SAVE_PARMSW_ : IDispatch;
begin
  result := __MCI_OVLY_SAVE_PARMSW__Wrapper.Create;
end;
function _MCI_OVLY_WINDOW_PARMS_ : IDispatch;
begin
  result := __MCI_OVLY_WINDOW_PARMS__Wrapper.Create;
end;
function _MCI_OVLY_WINDOW_PARMSA_ : IDispatch;
begin
  result := __MCI_OVLY_WINDOW_PARMSA__Wrapper.Create;
end;
function _MCI_OVLY_WINDOW_PARMSW_ : IDispatch;
begin
  result := __MCI_OVLY_WINDOW_PARMSW__Wrapper.Create;
end;
function _MCI_PLAY_PARMS_ : IDispatch;
begin
  result := __MCI_PLAY_PARMS__Wrapper.Create;
end;
function _MCI_RECORD_PARMS_ : IDispatch;
begin
  result := __MCI_RECORD_PARMS__Wrapper.Create;
end;
function _MCI_SAVE_PARMS_ : IDispatch;
begin
  result := __MCI_SAVE_PARMS__Wrapper.Create;
end;
function _MCI_SAVE_PARMSA_ : IDispatch;
begin
  result := __MCI_SAVE_PARMSA__Wrapper.Create;
end;
function _MCI_SAVE_PARMSW_ : IDispatch;
begin
  result := __MCI_SAVE_PARMSW__Wrapper.Create;
end;
function _MCI_SEEK_PARMS_ : IDispatch;
begin
  result := __MCI_SEEK_PARMS__Wrapper.Create;
end;
function _MCI_SEQ_SET_PARMS_ : IDispatch;
begin
  result := __MCI_SEQ_SET_PARMS__Wrapper.Create;
end;
function _MCI_SET_PARMS_ : IDispatch;
begin
  result := __MCI_SET_PARMS__Wrapper.Create;
end;
function _MCI_STATUS_PARMS_ : IDispatch;
begin
  result := __MCI_STATUS_PARMS__Wrapper.Create;
end;
function _MCI_SYSINFO_PARMS_ : IDispatch;
begin
  result := __MCI_SYSINFO_PARMS__Wrapper.Create;
end;
function _MCI_SYSINFO_PARMSA_ : IDispatch;
begin
  result := __MCI_SYSINFO_PARMSA__Wrapper.Create;
end;
function _MCI_SYSINFO_PARMSW_ : IDispatch;
begin
  result := __MCI_SYSINFO_PARMSW__Wrapper.Create;
end;
function _MCI_VD_ESCAPE_PARMS_ : IDispatch;
begin
  result := __MCI_VD_ESCAPE_PARMS__Wrapper.Create;
end;
function _MCI_VD_ESCAPE_PARMSA_ : IDispatch;
begin
  result := __MCI_VD_ESCAPE_PARMSA__Wrapper.Create;
end;
function _MCI_VD_ESCAPE_PARMSW_ : IDispatch;
begin
  result := __MCI_VD_ESCAPE_PARMSW__Wrapper.Create;
end;
function _MCI_VD_PLAY_PARMS_ : IDispatch;
begin
  result := __MCI_VD_PLAY_PARMS__Wrapper.Create;
end;
function _MCI_VD_STEP_PARMS_ : IDispatch;
begin
  result := __MCI_VD_STEP_PARMS__Wrapper.Create;
end;
function _MCI_WAVE_DELETE_PARMS_ : IDispatch;
begin
  result := __MCI_WAVE_DELETE_PARMS__Wrapper.Create;
end;
function _MCI_WAVE_OPEN_PARMS_ : IDispatch;
begin
  result := __MCI_WAVE_OPEN_PARMS__Wrapper.Create;
end;
function _MCI_WAVE_OPEN_PARMSA_ : IDispatch;
begin
  result := __MCI_WAVE_OPEN_PARMSA__Wrapper.Create;
end;
function _MCI_WAVE_OPEN_PARMSW_ : IDispatch;
begin
  result := __MCI_WAVE_OPEN_PARMSW__Wrapper.Create;
end;
function _MCI_WAVE_SET_PARMS_ : IDispatch;
begin
  result := __MCI_WAVE_SET_PARMS__Wrapper.Create;
end;
function _MIDIEVENT_ : IDispatch;
begin
  result := __MIDIEVENT__Wrapper.Create;
end;
function _midievent_tag_ : IDispatch;
begin
  result := __midievent_tag__Wrapper.Create;
end;
function _MIDIHDR_ : IDispatch;
begin
  result := __MIDIHDR__Wrapper.Create;
end;
function _midihdr_tag_ : IDispatch;
begin
  result := __midihdr_tag__Wrapper.Create;
end;
function _MIDIINCAPS_ : IDispatch;
begin
  result := __MIDIINCAPS__Wrapper.Create;
end;
function _MIDIINCAPSA_ : IDispatch;
begin
  result := __MIDIINCAPSA__Wrapper.Create;
end;
function _MIDIINCAPSW_ : IDispatch;
begin
  result := __MIDIINCAPSW__Wrapper.Create;
end;
function _MIDIOUTCAPS_ : IDispatch;
begin
  result := __MIDIOUTCAPS__Wrapper.Create;
end;
function _MIDIOUTCAPSA_ : IDispatch;
begin
  result := __MIDIOUTCAPSA__Wrapper.Create;
end;
function _MIDIOUTCAPSW_ : IDispatch;
begin
  result := __MIDIOUTCAPSW__Wrapper.Create;
end;
function _MIDIPROPTEMPO_ : IDispatch;
begin
  result := __MIDIPROPTEMPO__Wrapper.Create;
end;
function _midiproptempo_tag_ : IDispatch;
begin
  result := __midiproptempo_tag__Wrapper.Create;
end;
function _MIDIPROPTIMEDIV_ : IDispatch;
begin
  result := __MIDIPROPTIMEDIV__Wrapper.Create;
end;
function _midiproptimediv_tag_ : IDispatch;
begin
  result := __midiproptimediv_tag__Wrapper.Create;
end;
function _MIDISTRMBUFFVER_ : IDispatch;
begin
  result := __MIDISTRMBUFFVER__Wrapper.Create;
end;
function _midistrmbuffver_tag_ : IDispatch;
begin
  result := __midistrmbuffver_tag__Wrapper.Create;
end;
function _MIXERCAPS_ : IDispatch;
begin
  result := __MIXERCAPS__Wrapper.Create;
end;
function _MIXERCAPSA_ : IDispatch;
begin
  result := __MIXERCAPSA__Wrapper.Create;
end;
function _MIXERCAPSW_ : IDispatch;
begin
  result := __MIXERCAPSW__Wrapper.Create;
end;
function _MIXERCONTROLDETAILS_BOOLEAN_ : IDispatch;
begin
  result := __MIXERCONTROLDETAILS_BOOLEAN__Wrapper.Create;
end;
function _MIXERCONTROLDETAILS_LISTTEXT_ : IDispatch;
begin
  result := __MIXERCONTROLDETAILS_LISTTEXT__Wrapper.Create;
end;
function _MIXERCONTROLDETAILS_LISTTEXTA_ : IDispatch;
begin
  result := __MIXERCONTROLDETAILS_LISTTEXTA__Wrapper.Create;
end;
function _MIXERCONTROLDETAILS_LISTTEXTW_ : IDispatch;
begin
  result := __MIXERCONTROLDETAILS_LISTTEXTW__Wrapper.Create;
end;
function _MIXERCONTROLDETAILS_SIGNED_ : IDispatch;
begin
  result := __MIXERCONTROLDETAILS_SIGNED__Wrapper.Create;
end;
function _MIXERCONTROLDETAILS_UNSIGNED_ : IDispatch;
begin
  result := __MIXERCONTROLDETAILS_UNSIGNED__Wrapper.Create;
end;
function _MIXERLINE_ : IDispatch;
begin
  result := __MIXERLINE__Wrapper.Create;
end;
function _MIXERLINEA_ : IDispatch;
begin
  result := __MIXERLINEA__Wrapper.Create;
end;
function _MIXERLINECONTROLS_ : IDispatch;
begin
  result := __MIXERLINECONTROLS__Wrapper.Create;
end;
function _MIXERLINECONTROLSA_ : IDispatch;
begin
  result := __MIXERLINECONTROLSA__Wrapper.Create;
end;
function _MIXERLINECONTROLSW_ : IDispatch;
begin
  result := __MIXERLINECONTROLSW__Wrapper.Create;
end;
function _MIXERLINEW_ : IDispatch;
begin
  result := __MIXERLINEW__Wrapper.Create;
end;
function _MMCKINFO_ : IDispatch;
begin
  result := __MMCKINFO__Wrapper.Create;
end;
function _MMIOINFO_ : IDispatch;
begin
  result := __MMIOINFO__Wrapper.Create;
end;
function _MMTIME_ : IDispatch;
begin
  result := __MMTIME__Wrapper.Create;
end;
function _mmtime_tag_ : IDispatch;
begin
  result := __mmtime_tag__Wrapper.Create;
end;
function _PCMWAVEFORMAT_ : IDispatch;
begin
  result := __PCMWAVEFORMAT__Wrapper.Create;
end;
function _pcmwaveformat_tag_ : IDispatch;
begin
  result := __pcmwaveformat_tag__Wrapper.Create;
end;
function _tagAUXCAPS_ : IDispatch;
begin
  result := __tagAUXCAPS__Wrapper.Create;
end;
function _tagAUXCAPSA_ : IDispatch;
begin
  result := __tagAUXCAPSA__Wrapper.Create;
end;
function _tagAUXCAPSW_ : IDispatch;
begin
  result := __tagAUXCAPSW__Wrapper.Create;
end;
function _tagDRVCONFIGINFO_ : IDispatch;
begin
  result := __tagDRVCONFIGINFO__Wrapper.Create;
end;
function _tagJOYCAPS_ : IDispatch;
begin
  result := __tagJOYCAPS__Wrapper.Create;
end;
function _tagJOYCAPSA_ : IDispatch;
begin
  result := __tagJOYCAPSA__Wrapper.Create;
end;
function _tagJOYCAPSW_ : IDispatch;
begin
  result := __tagJOYCAPSW__Wrapper.Create;
end;
function _tagMCI_ANIM_OPEN_PARMS_ : IDispatch;
begin
  result := __tagMCI_ANIM_OPEN_PARMS__Wrapper.Create;
end;
function _tagMCI_ANIM_OPEN_PARMSA_ : IDispatch;
begin
  result := __tagMCI_ANIM_OPEN_PARMSA__Wrapper.Create;
end;
function _tagMCI_ANIM_OPEN_PARMSW_ : IDispatch;
begin
  result := __tagMCI_ANIM_OPEN_PARMSW__Wrapper.Create;
end;
function _tagMCI_ANIM_PLAY_PARMS_ : IDispatch;
begin
  result := __tagMCI_ANIM_PLAY_PARMS__Wrapper.Create;
end;
function _tagMCI_ANIM_RECT_PARMS_ : IDispatch;
begin
  result := __tagMCI_ANIM_RECT_PARMS__Wrapper.Create;
end;
function _tagMCI_ANIM_STEP_PARMS_ : IDispatch;
begin
  result := __tagMCI_ANIM_STEP_PARMS__Wrapper.Create;
end;
function _tagMCI_ANIM_UPDATE_PARMS_ : IDispatch;
begin
  result := __tagMCI_ANIM_UPDATE_PARMS__Wrapper.Create;
end;
function _tagMCI_ANIM_WINDOW_PARMS_ : IDispatch;
begin
  result := __tagMCI_ANIM_WINDOW_PARMS__Wrapper.Create;
end;
function _tagMCI_ANIM_WINDOW_PARMSA_ : IDispatch;
begin
  result := __tagMCI_ANIM_WINDOW_PARMSA__Wrapper.Create;
end;
function _tagMCI_ANIM_WINDOW_PARMSW_ : IDispatch;
begin
  result := __tagMCI_ANIM_WINDOW_PARMSW__Wrapper.Create;
end;
function _tagMCI_BREAK_PARMS_ : IDispatch;
begin
  result := __tagMCI_BREAK_PARMS__Wrapper.Create;
end;
function _tagMCI_GENERIC_PARMS_ : IDispatch;
begin
  result := __tagMCI_GENERIC_PARMS__Wrapper.Create;
end;
function _tagMCI_GETDEVCAPS_PARMS_ : IDispatch;
begin
  result := __tagMCI_GETDEVCAPS_PARMS__Wrapper.Create;
end;
function _tagMCI_INFO_PARMS_ : IDispatch;
begin
  result := __tagMCI_INFO_PARMS__Wrapper.Create;
end;
function _tagMCI_INFO_PARMSA_ : IDispatch;
begin
  result := __tagMCI_INFO_PARMSA__Wrapper.Create;
end;
function _tagMCI_INFO_PARMSW_ : IDispatch;
begin
  result := __tagMCI_INFO_PARMSW__Wrapper.Create;
end;
function _tagMCI_LOAD_PARMS_ : IDispatch;
begin
  result := __tagMCI_LOAD_PARMS__Wrapper.Create;
end;
function _tagMCI_LOAD_PARMSA_ : IDispatch;
begin
  result := __tagMCI_LOAD_PARMSA__Wrapper.Create;
end;
function _tagMCI_LOAD_PARMSW_ : IDispatch;
begin
  result := __tagMCI_LOAD_PARMSW__Wrapper.Create;
end;
function _tagMCI_OPEN_PARMS_ : IDispatch;
begin
  result := __tagMCI_OPEN_PARMS__Wrapper.Create;
end;
function _tagMCI_OPEN_PARMSA_ : IDispatch;
begin
  result := __tagMCI_OPEN_PARMSA__Wrapper.Create;
end;
function _tagMCI_OPEN_PARMSW_ : IDispatch;
begin
  result := __tagMCI_OPEN_PARMSW__Wrapper.Create;
end;
function _tagMCI_OVLY_LOAD_PARMS_ : IDispatch;
begin
  result := __tagMCI_OVLY_LOAD_PARMS__Wrapper.Create;
end;
function _tagMCI_OVLY_LOAD_PARMSA_ : IDispatch;
begin
  result := __tagMCI_OVLY_LOAD_PARMSA__Wrapper.Create;
end;
function _tagMCI_OVLY_LOAD_PARMSW_ : IDispatch;
begin
  result := __tagMCI_OVLY_LOAD_PARMSW__Wrapper.Create;
end;
function _tagMCI_OVLY_OPEN_PARMS_ : IDispatch;
begin
  result := __tagMCI_OVLY_OPEN_PARMS__Wrapper.Create;
end;
function _tagMCI_OVLY_OPEN_PARMSA_ : IDispatch;
begin
  result := __tagMCI_OVLY_OPEN_PARMSA__Wrapper.Create;
end;
function _tagMCI_OVLY_OPEN_PARMSW_ : IDispatch;
begin
  result := __tagMCI_OVLY_OPEN_PARMSW__Wrapper.Create;
end;
function _tagMCI_OVLY_RECT_PARMS_ : IDispatch;
begin
  result := __tagMCI_OVLY_RECT_PARMS__Wrapper.Create;
end;
function _tagMCI_OVLY_SAVE_PARMS_ : IDispatch;
begin
  result := __tagMCI_OVLY_SAVE_PARMS__Wrapper.Create;
end;
function _tagMCI_OVLY_SAVE_PARMSA_ : IDispatch;
begin
  result := __tagMCI_OVLY_SAVE_PARMSA__Wrapper.Create;
end;
function _tagMCI_OVLY_SAVE_PARMSW_ : IDispatch;
begin
  result := __tagMCI_OVLY_SAVE_PARMSW__Wrapper.Create;
end;
function _tagMCI_OVLY_WINDOW_PARMS_ : IDispatch;
begin
  result := __tagMCI_OVLY_WINDOW_PARMS__Wrapper.Create;
end;
function _tagMCI_OVLY_WINDOW_PARMSA_ : IDispatch;
begin
  result := __tagMCI_OVLY_WINDOW_PARMSA__Wrapper.Create;
end;
function _tagMCI_OVLY_WINDOW_PARMSW_ : IDispatch;
begin
  result := __tagMCI_OVLY_WINDOW_PARMSW__Wrapper.Create;
end;
function _tagMCI_PLAY_PARMS_ : IDispatch;
begin
  result := __tagMCI_PLAY_PARMS__Wrapper.Create;
end;
function _tagMCI_RECORD_PARMS_ : IDispatch;
begin
  result := __tagMCI_RECORD_PARMS__Wrapper.Create;
end;
function _tagMCI_SEEK_PARMS_ : IDispatch;
begin
  result := __tagMCI_SEEK_PARMS__Wrapper.Create;
end;
function _tagMCI_SEQ_SET_PARMS_ : IDispatch;
begin
  result := __tagMCI_SEQ_SET_PARMS__Wrapper.Create;
end;
function _tagMCI_SET_PARMS_ : IDispatch;
begin
  result := __tagMCI_SET_PARMS__Wrapper.Create;
end;
function _tagMCI_STATUS_PARMS_ : IDispatch;
begin
  result := __tagMCI_STATUS_PARMS__Wrapper.Create;
end;
function _tagMCI_SYSINFO_PARMS_ : IDispatch;
begin
  result := __tagMCI_SYSINFO_PARMS__Wrapper.Create;
end;
function _tagMCI_SYSINFO_PARMSA_ : IDispatch;
begin
  result := __tagMCI_SYSINFO_PARMSA__Wrapper.Create;
end;
function _tagMCI_SYSINFO_PARMSW_ : IDispatch;
begin
  result := __tagMCI_SYSINFO_PARMSW__Wrapper.Create;
end;
function _tagMCI_VD_ESCAPE_PARMS_ : IDispatch;
begin
  result := __tagMCI_VD_ESCAPE_PARMS__Wrapper.Create;
end;
function _tagMCI_VD_ESCAPE_PARMSA_ : IDispatch;
begin
  result := __tagMCI_VD_ESCAPE_PARMSA__Wrapper.Create;
end;
function _tagMCI_VD_ESCAPE_PARMSW_ : IDispatch;
begin
  result := __tagMCI_VD_ESCAPE_PARMSW__Wrapper.Create;
end;
function _tagMCI_VD_PLAY_PARMS_ : IDispatch;
begin
  result := __tagMCI_VD_PLAY_PARMS__Wrapper.Create;
end;
function _tagMCI_VD_STEP_PARMS_ : IDispatch;
begin
  result := __tagMCI_VD_STEP_PARMS__Wrapper.Create;
end;
function _tagMCI_WAVE_DELETE_PARMS_ : IDispatch;
begin
  result := __tagMCI_WAVE_DELETE_PARMS__Wrapper.Create;
end;
function _tagMCI_WAVE_OPEN_PARMS_ : IDispatch;
begin
  result := __tagMCI_WAVE_OPEN_PARMS__Wrapper.Create;
end;
function _tagMCI_WAVE_OPEN_PARMSA_ : IDispatch;
begin
  result := __tagMCI_WAVE_OPEN_PARMSA__Wrapper.Create;
end;
function _tagMCI_WAVE_OPEN_PARMSW_ : IDispatch;
begin
  result := __tagMCI_WAVE_OPEN_PARMSW__Wrapper.Create;
end;
function _tagMCI_WAVE_SET_PARMS_ : IDispatch;
begin
  result := __tagMCI_WAVE_SET_PARMS__Wrapper.Create;
end;
function _tagMIDIINCAPS_ : IDispatch;
begin
  result := __tagMIDIINCAPS__Wrapper.Create;
end;
function _tagMIDIINCAPSA_ : IDispatch;
begin
  result := __tagMIDIINCAPSA__Wrapper.Create;
end;
function _tagMIDIINCAPSW_ : IDispatch;
begin
  result := __tagMIDIINCAPSW__Wrapper.Create;
end;
function _tagMIDIOUTCAPS_ : IDispatch;
begin
  result := __tagMIDIOUTCAPS__Wrapper.Create;
end;
function _tagMIDIOUTCAPSA_ : IDispatch;
begin
  result := __tagMIDIOUTCAPSA__Wrapper.Create;
end;
function _tagMIDIOUTCAPSW_ : IDispatch;
begin
  result := __tagMIDIOUTCAPSW__Wrapper.Create;
end;
function _tagMIXERCAPS_ : IDispatch;
begin
  result := __tagMIXERCAPS__Wrapper.Create;
end;
function _tagMIXERCAPSA_ : IDispatch;
begin
  result := __tagMIXERCAPSA__Wrapper.Create;
end;
function _tagMIXERCAPSW_ : IDispatch;
begin
  result := __tagMIXERCAPSW__Wrapper.Create;
end;
function _tagMIXERCONTROLDETAILS_LISTTEXT_ : IDispatch;
begin
  result := __tagMIXERCONTROLDETAILS_LISTTEXT__Wrapper.Create;
end;
function _tagMIXERCONTROLDETAILS_LISTTEXTA_ : IDispatch;
begin
  result := __tagMIXERCONTROLDETAILS_LISTTEXTA__Wrapper.Create;
end;
function _tagMIXERCONTROLDETAILS_LISTTEXTW_ : IDispatch;
begin
  result := __tagMIXERCONTROLDETAILS_LISTTEXTW__Wrapper.Create;
end;
function _tagMIXERLINE_ : IDispatch;
begin
  result := __tagMIXERLINE__Wrapper.Create;
end;
function _tagMIXERLINEA_ : IDispatch;
begin
  result := __tagMIXERLINEA__Wrapper.Create;
end;
function _tagMIXERLINECONTROLS_ : IDispatch;
begin
  result := __tagMIXERLINECONTROLS__Wrapper.Create;
end;
function _tagMIXERLINECONTROLSA_ : IDispatch;
begin
  result := __tagMIXERLINECONTROLSA__Wrapper.Create;
end;
function _tagMIXERLINECONTROLSW_ : IDispatch;
begin
  result := __tagMIXERLINECONTROLSW__Wrapper.Create;
end;
function _tagMIXERLINEW_ : IDispatch;
begin
  result := __tagMIXERLINEW__Wrapper.Create;
end;
function _tagWAVEINCAPS_ : IDispatch;
begin
  result := __tagWAVEINCAPS__Wrapper.Create;
end;
function _tagWAVEINCAPSA_ : IDispatch;
begin
  result := __tagWAVEINCAPSA__Wrapper.Create;
end;
function _tagWAVEINCAPSW_ : IDispatch;
begin
  result := __tagWAVEINCAPSW__Wrapper.Create;
end;
function _tagWAVEOUTCAPS_ : IDispatch;
begin
  result := __tagWAVEOUTCAPS__Wrapper.Create;
end;
function _tagWAVEOUTCAPSA_ : IDispatch;
begin
  result := __tagWAVEOUTCAPSA__Wrapper.Create;
end;
function _tagWAVEOUTCAPSW_ : IDispatch;
begin
  result := __tagWAVEOUTCAPSW__Wrapper.Create;
end;
function _TAuxCaps_ : IDispatch;
begin
  result := __TAuxCaps__Wrapper.Create;
end;
function _TAuxCapsA_ : IDispatch;
begin
  result := __TAuxCapsA__Wrapper.Create;
end;
function _TAuxCapsW_ : IDispatch;
begin
  result := __TAuxCapsW__Wrapper.Create;
end;
function _TDrvConfigInfo_ : IDispatch;
begin
  result := __TDrvConfigInfo__Wrapper.Create;
end;
function _TDrvConfigInfoEx_ : IDispatch;
begin
  result := __TDrvConfigInfoEx__Wrapper.Create;
end;
function _TIMECAPS_ : IDispatch;
begin
  result := __TIMECAPS__Wrapper.Create;
end;
function _timecaps_tag_ : IDispatch;
begin
  result := __timecaps_tag__Wrapper.Create;
end;
function _TJoyCaps_ : IDispatch;
begin
  result := __TJoyCaps__Wrapper.Create;
end;
function _TJoyCapsA_ : IDispatch;
begin
  result := __TJoyCapsA__Wrapper.Create;
end;
function _TJoyCapsW_ : IDispatch;
begin
  result := __TJoyCapsW__Wrapper.Create;
end;
function _TJoyInfo_ : IDispatch;
begin
  result := __TJoyInfo__Wrapper.Create;
end;
function _TJoyInfoEx_ : IDispatch;
begin
  result := __TJoyInfoEx__Wrapper.Create;
end;
function _TMCI_Anim_Open_Parms_ : IDispatch;
begin
  result := __TMCI_Anim_Open_Parms__Wrapper.Create;
end;
function _TMCI_Anim_Open_ParmsA_ : IDispatch;
begin
  result := __TMCI_Anim_Open_ParmsA__Wrapper.Create;
end;
function _TMCI_Anim_Open_ParmsW_ : IDispatch;
begin
  result := __TMCI_Anim_Open_ParmsW__Wrapper.Create;
end;
function _TMCI_Anim_Play_Parms_ : IDispatch;
begin
  result := __TMCI_Anim_Play_Parms__Wrapper.Create;
end;
function _TMCI_Anim_Rect_Parms_ : IDispatch;
begin
  result := __TMCI_Anim_Rect_Parms__Wrapper.Create;
end;
function _TMCI_Anim_Step_Parms_ : IDispatch;
begin
  result := __TMCI_Anim_Step_Parms__Wrapper.Create;
end;
function _TMCI_Anim_Update_Parms_ : IDispatch;
begin
  result := __TMCI_Anim_Update_Parms__Wrapper.Create;
end;
function _TMCI_Anim_Window_Parms_ : IDispatch;
begin
  result := __TMCI_Anim_Window_Parms__Wrapper.Create;
end;
function _TMCI_Anim_Window_ParmsA_ : IDispatch;
begin
  result := __TMCI_Anim_Window_ParmsA__Wrapper.Create;
end;
function _TMCI_Anim_Window_ParmsW_ : IDispatch;
begin
  result := __TMCI_Anim_Window_ParmsW__Wrapper.Create;
end;
function _TMCI_BReak_Parms_ : IDispatch;
begin
  result := __TMCI_BReak_Parms__Wrapper.Create;
end;
function _TMCI_Generic_Parms_ : IDispatch;
begin
  result := __TMCI_Generic_Parms__Wrapper.Create;
end;
function _TMCI_GetDevCaps_Parms_ : IDispatch;
begin
  result := __TMCI_GetDevCaps_Parms__Wrapper.Create;
end;
function _TMCI_Info_Parms_ : IDispatch;
begin
  result := __TMCI_Info_Parms__Wrapper.Create;
end;
function _TMCI_Info_ParmsA_ : IDispatch;
begin
  result := __TMCI_Info_ParmsA__Wrapper.Create;
end;
function _TMCI_Info_ParmsW_ : IDispatch;
begin
  result := __TMCI_Info_ParmsW__Wrapper.Create;
end;
function _TMCI_Load_Parms_ : IDispatch;
begin
  result := __TMCI_Load_Parms__Wrapper.Create;
end;
function _TMCI_Load_ParmsA_ : IDispatch;
begin
  result := __TMCI_Load_ParmsA__Wrapper.Create;
end;
function _TMCI_Load_ParmsW_ : IDispatch;
begin
  result := __TMCI_Load_ParmsW__Wrapper.Create;
end;
function _TMCI_Open_Parms_ : IDispatch;
begin
  result := __TMCI_Open_Parms__Wrapper.Create;
end;
function _TMCI_Open_ParmsA_ : IDispatch;
begin
  result := __TMCI_Open_ParmsA__Wrapper.Create;
end;
function _TMCI_Open_ParmsW_ : IDispatch;
begin
  result := __TMCI_Open_ParmsW__Wrapper.Create;
end;
function _TMCI_Ovly_Load_Parms_ : IDispatch;
begin
  result := __TMCI_Ovly_Load_Parms__Wrapper.Create;
end;
function _TMCI_Ovly_Load_ParmsA_ : IDispatch;
begin
  result := __TMCI_Ovly_Load_ParmsA__Wrapper.Create;
end;
function _TMCI_Ovly_Load_ParmsW_ : IDispatch;
begin
  result := __TMCI_Ovly_Load_ParmsW__Wrapper.Create;
end;
function _TMCI_Ovly_Open_Parms_ : IDispatch;
begin
  result := __TMCI_Ovly_Open_Parms__Wrapper.Create;
end;
function _TMCI_Ovly_Open_ParmsA_ : IDispatch;
begin
  result := __TMCI_Ovly_Open_ParmsA__Wrapper.Create;
end;
function _TMCI_Ovly_Open_ParmsW_ : IDispatch;
begin
  result := __TMCI_Ovly_Open_ParmsW__Wrapper.Create;
end;
function _TMCI_Ovly_Rect_Parms_ : IDispatch;
begin
  result := __TMCI_Ovly_Rect_Parms__Wrapper.Create;
end;
function _TMCI_Ovly_Save_Parms_ : IDispatch;
begin
  result := __TMCI_Ovly_Save_Parms__Wrapper.Create;
end;
function _TMCI_Ovly_Save_ParmsA_ : IDispatch;
begin
  result := __TMCI_Ovly_Save_ParmsA__Wrapper.Create;
end;
function _TMCI_Ovly_Save_ParmsW_ : IDispatch;
begin
  result := __TMCI_Ovly_Save_ParmsW__Wrapper.Create;
end;
function _TMCI_Ovly_Window_Parms_ : IDispatch;
begin
  result := __TMCI_Ovly_Window_Parms__Wrapper.Create;
end;
function _TMCI_Ovly_Window_ParmsA_ : IDispatch;
begin
  result := __TMCI_Ovly_Window_ParmsA__Wrapper.Create;
end;
function _TMCI_Ovly_Window_ParmsW_ : IDispatch;
begin
  result := __TMCI_Ovly_Window_ParmsW__Wrapper.Create;
end;
function _TMCI_Play_Parms_ : IDispatch;
begin
  result := __TMCI_Play_Parms__Wrapper.Create;
end;
function _TMCI_Record_Parms_ : IDispatch;
begin
  result := __TMCI_Record_Parms__Wrapper.Create;
end;
function _TMCI_SaveParms_ : IDispatch;
begin
  result := __TMCI_SaveParms__Wrapper.Create;
end;
function _TMCI_SaveParmsA_ : IDispatch;
begin
  result := __TMCI_SaveParmsA__Wrapper.Create;
end;
function _TMCI_SaveParmsW_ : IDispatch;
begin
  result := __TMCI_SaveParmsW__Wrapper.Create;
end;
function _TMCI_Seek_Parms_ : IDispatch;
begin
  result := __TMCI_Seek_Parms__Wrapper.Create;
end;
function _TMCI_Seq_Set_Parms_ : IDispatch;
begin
  result := __TMCI_Seq_Set_Parms__Wrapper.Create;
end;
function _TMCI_Set_Parms_ : IDispatch;
begin
  result := __TMCI_Set_Parms__Wrapper.Create;
end;
function _TMCI_Sound_Parms_ : IDispatch;
begin
  result := __TMCI_Sound_Parms__Wrapper.Create;
end;
function _TMCI_Status_Parms_ : IDispatch;
begin
  result := __TMCI_Status_Parms__Wrapper.Create;
end;
function _TMCI_SysInfo_Parms_ : IDispatch;
begin
  result := __TMCI_SysInfo_Parms__Wrapper.Create;
end;
function _TMCI_SysInfo_ParmsA_ : IDispatch;
begin
  result := __TMCI_SysInfo_ParmsA__Wrapper.Create;
end;
function _TMCI_SysInfo_ParmsW_ : IDispatch;
begin
  result := __TMCI_SysInfo_ParmsW__Wrapper.Create;
end;
function _TMCI_VD_Escape_Parms_ : IDispatch;
begin
  result := __TMCI_VD_Escape_Parms__Wrapper.Create;
end;
function _TMCI_VD_Escape_ParmsA_ : IDispatch;
begin
  result := __TMCI_VD_Escape_ParmsA__Wrapper.Create;
end;
function _TMCI_VD_Escape_ParmsW_ : IDispatch;
begin
  result := __TMCI_VD_Escape_ParmsW__Wrapper.Create;
end;
function _TMCI_VD_Play_Parms_ : IDispatch;
begin
  result := __TMCI_VD_Play_Parms__Wrapper.Create;
end;
function _TMCI_VD_Step_Parms_ : IDispatch;
begin
  result := __TMCI_VD_Step_Parms__Wrapper.Create;
end;
function _TMCI_Wave_Delete_Parms_ : IDispatch;
begin
  result := __TMCI_Wave_Delete_Parms__Wrapper.Create;
end;
function _TMCI_Wave_Open_Parms_ : IDispatch;
begin
  result := __TMCI_Wave_Open_Parms__Wrapper.Create;
end;
function _TMCI_Wave_Open_ParmsA_ : IDispatch;
begin
  result := __TMCI_Wave_Open_ParmsA__Wrapper.Create;
end;
function _TMCI_Wave_Open_ParmsW_ : IDispatch;
begin
  result := __TMCI_Wave_Open_ParmsW__Wrapper.Create;
end;
function _TMCI_Wave_Set_Parms_ : IDispatch;
begin
  result := __TMCI_Wave_Set_Parms__Wrapper.Create;
end;
function _TMidiEvent_ : IDispatch;
begin
  result := __TMidiEvent__Wrapper.Create;
end;
function _TMidiHdr_ : IDispatch;
begin
  result := __TMidiHdr__Wrapper.Create;
end;
function _TMidiInCaps_ : IDispatch;
begin
  result := __TMidiInCaps__Wrapper.Create;
end;
function _TMidiInCapsA_ : IDispatch;
begin
  result := __TMidiInCapsA__Wrapper.Create;
end;
function _TMidiInCapsW_ : IDispatch;
begin
  result := __TMidiInCapsW__Wrapper.Create;
end;
function _TMidiOutCaps_ : IDispatch;
begin
  result := __TMidiOutCaps__Wrapper.Create;
end;
function _TMidiOutCapsA_ : IDispatch;
begin
  result := __TMidiOutCapsA__Wrapper.Create;
end;
function _TMidiOutCapsW_ : IDispatch;
begin
  result := __TMidiOutCapsW__Wrapper.Create;
end;
function _TMidiPropTempo_ : IDispatch;
begin
  result := __TMidiPropTempo__Wrapper.Create;
end;
function _TMidiPropTimeDiv_ : IDispatch;
begin
  result := __TMidiPropTimeDiv__Wrapper.Create;
end;
function _TMidiStrmBuffVer_ : IDispatch;
begin
  result := __TMidiStrmBuffVer__Wrapper.Create;
end;
function _TMixerCaps_ : IDispatch;
begin
  result := __TMixerCaps__Wrapper.Create;
end;
function _TMixerCapsA_ : IDispatch;
begin
  result := __TMixerCapsA__Wrapper.Create;
end;
function _TMixerCapsW_ : IDispatch;
begin
  result := __TMixerCapsW__Wrapper.Create;
end;
function _tMIXERCONTROLDETAILS_ : IDispatch;
begin
  result := __tMIXERCONTROLDETAILS__Wrapper.Create;
end;
function _tMIXERCONTROLDETAILS_BOOLEAN_ : IDispatch;
begin
  result := __tMIXERCONTROLDETAILS_BOOLEAN__Wrapper.Create;
end;
function _tMIXERCONTROLDETAILS_SIGNED_ : IDispatch;
begin
  result := __tMIXERCONTROLDETAILS_SIGNED__Wrapper.Create;
end;
function _tMIXERCONTROLDETAILS_UNSIGNED_ : IDispatch;
begin
  result := __tMIXERCONTROLDETAILS_UNSIGNED__Wrapper.Create;
end;
function _TMixerControlDetailsBoolean_ : IDispatch;
begin
  result := __TMixerControlDetailsBoolean__Wrapper.Create;
end;
function _TMixerControlDetailsListText_ : IDispatch;
begin
  result := __TMixerControlDetailsListText__Wrapper.Create;
end;
function _TMixerControlDetailsListTextA_ : IDispatch;
begin
  result := __TMixerControlDetailsListTextA__Wrapper.Create;
end;
function _TMixerControlDetailsListTextW_ : IDispatch;
begin
  result := __TMixerControlDetailsListTextW__Wrapper.Create;
end;
function _TMixerControlDetailsSigned_ : IDispatch;
begin
  result := __TMixerControlDetailsSigned__Wrapper.Create;
end;
function _TMixerControlDetailsUnsigned_ : IDispatch;
begin
  result := __TMixerControlDetailsUnsigned__Wrapper.Create;
end;
function _TMixerLine_ : IDispatch;
begin
  result := __TMixerLine__Wrapper.Create;
end;
function _TMixerLineA_ : IDispatch;
begin
  result := __TMixerLineA__Wrapper.Create;
end;
function _TMixerLineControls_ : IDispatch;
begin
  result := __TMixerLineControls__Wrapper.Create;
end;
function _TMixerLineControlsA_ : IDispatch;
begin
  result := __TMixerLineControlsA__Wrapper.Create;
end;
function _TMixerLineControlsW_ : IDispatch;
begin
  result := __TMixerLineControlsW__Wrapper.Create;
end;
function _TMixerLineW_ : IDispatch;
begin
  result := __TMixerLineW__Wrapper.Create;
end;
function _TMMCKInfo_ : IDispatch;
begin
  result := __TMMCKInfo__Wrapper.Create;
end;
function _TMMIOInfo_ : IDispatch;
begin
  result := __TMMIOInfo__Wrapper.Create;
end;
function _TMMTime_ : IDispatch;
begin
  result := __TMMTime__Wrapper.Create;
end;
function _TPCMWaveFormat_ : IDispatch;
begin
  result := __TPCMWaveFormat__Wrapper.Create;
end;
function _TTimeCaps_ : IDispatch;
begin
  result := __TTimeCaps__Wrapper.Create;
end;
function _TWaveFormat_ : IDispatch;
begin
  result := __TWaveFormat__Wrapper.Create;
end;
function _tWAVEFORMATEX_ : IDispatch;
begin
  result := __tWAVEFORMATEX__Wrapper.Create;
end;
function _TWaveHdr_ : IDispatch;
begin
  result := __TWaveHdr__Wrapper.Create;
end;
function _TWaveInCaps_ : IDispatch;
begin
  result := __TWaveInCaps__Wrapper.Create;
end;
function _TWaveInCapsA_ : IDispatch;
begin
  result := __TWaveInCapsA__Wrapper.Create;
end;
function _TWaveInCapsW_ : IDispatch;
begin
  result := __TWaveInCapsW__Wrapper.Create;
end;
function _TWaveOutCaps_ : IDispatch;
begin
  result := __TWaveOutCaps__Wrapper.Create;
end;
function _TWaveOutCapsA_ : IDispatch;
begin
  result := __TWaveOutCapsA__Wrapper.Create;
end;
function _TWaveOutCapsW_ : IDispatch;
begin
  result := __TWaveOutCapsW__Wrapper.Create;
end;
function _WAVEFORMAT_ : IDispatch;
begin
  result := __WAVEFORMAT__Wrapper.Create;
end;
function _waveformat_tag_ : IDispatch;
begin
  result := __waveformat_tag__Wrapper.Create;
end;
function _WAVEHDR_ : IDispatch;
begin
  result := __WAVEHDR__Wrapper.Create;
end;
function _wavehdr_tag_ : IDispatch;
begin
  result := __wavehdr_tag__Wrapper.Create;
end;
function _WAVEINCAPS_ : IDispatch;
begin
  result := __WAVEINCAPS__Wrapper.Create;
end;
function _WAVEINCAPSA_ : IDispatch;
begin
  result := __WAVEINCAPSA__Wrapper.Create;
end;
function _WAVEINCAPSW_ : IDispatch;
begin
  result := __WAVEINCAPSW__Wrapper.Create;
end;
function _WAVEOUTCAPS_ : IDispatch;
begin
  result := __WAVEOUTCAPS__Wrapper.Create;
end;
function _WAVEOUTCAPSA_ : IDispatch;
begin
  result := __WAVEOUTCAPSA__Wrapper.Create;
end;
function _WAVEOUTCAPSW_ : IDispatch;
begin
  result := __WAVEOUTCAPSW__Wrapper.Create;
end;

type ___MMCKINFO__Wrapper__ = class(___MMCKINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___MMCKINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_MMCKINFOToVariant(var R : _MMCKINFO) : OleVariant;
var
__rw : ___MMCKINFO__Wrapper__;
begin
__rw := ___MMCKINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_MMCKINFO(const V : OleVariant) : _MMCKINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _MMCKINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___MMIOINFO__Wrapper__ = class(___MMIOINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___MMIOINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_MMIOINFOToVariant(var R : _MMIOINFO) : OleVariant;
var
__rw : ___MMIOINFO__Wrapper__;
begin
__rw := ___MMIOINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_MMIOINFO(const V : OleVariant) : _MMIOINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _MMIOINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __AUXCAPS__Wrapper__ = class(__AUXCAPS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __AUXCAPS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertAUXCAPSToVariant(var R : AUXCAPS) : OleVariant;
var
__rw : __AUXCAPS__Wrapper__;
begin
__rw := __AUXCAPS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToAUXCAPS(const V : OleVariant) : AUXCAPS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := AUXCAPS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __AUXCAPSA__Wrapper__ = class(__AUXCAPSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __AUXCAPSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertAUXCAPSAToVariant(var R : AUXCAPSA) : OleVariant;
var
__rw : __AUXCAPSA__Wrapper__;
begin
__rw := __AUXCAPSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToAUXCAPSA(const V : OleVariant) : AUXCAPSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := AUXCAPSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __AUXCAPSW__Wrapper__ = class(__AUXCAPSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __AUXCAPSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertAUXCAPSWToVariant(var R : AUXCAPSW) : OleVariant;
var
__rw : __AUXCAPSW__Wrapper__;
begin
__rw := __AUXCAPSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToAUXCAPSW(const V : OleVariant) : AUXCAPSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := AUXCAPSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DRVCONFIGINFO__Wrapper__ = class(__DRVCONFIGINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DRVCONFIGINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDRVCONFIGINFOToVariant(var R : DRVCONFIGINFO) : OleVariant;
var
__rw : __DRVCONFIGINFO__Wrapper__;
begin
__rw := __DRVCONFIGINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDRVCONFIGINFO(const V : OleVariant) : DRVCONFIGINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DRVCONFIGINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DRVCONFIGINFOEX__Wrapper__ = class(__DRVCONFIGINFOEX__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DRVCONFIGINFOEX__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDRVCONFIGINFOEXToVariant(var R : DRVCONFIGINFOEX) : OleVariant;
var
__rw : __DRVCONFIGINFOEX__Wrapper__;
begin
__rw := __DRVCONFIGINFOEX__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDRVCONFIGINFOEX(const V : OleVariant) : DRVCONFIGINFOEX;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DRVCONFIGINFOEX((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __JOYCAPS__Wrapper__ = class(__JOYCAPS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __JOYCAPS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertJOYCAPSToVariant(var R : JOYCAPS) : OleVariant;
var
__rw : __JOYCAPS__Wrapper__;
begin
__rw := __JOYCAPS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToJOYCAPS(const V : OleVariant) : JOYCAPS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := JOYCAPS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __JOYCAPSA__Wrapper__ = class(__JOYCAPSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __JOYCAPSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertJOYCAPSAToVariant(var R : JOYCAPSA) : OleVariant;
var
__rw : __JOYCAPSA__Wrapper__;
begin
__rw := __JOYCAPSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToJOYCAPSA(const V : OleVariant) : JOYCAPSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := JOYCAPSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __JOYCAPSW__Wrapper__ = class(__JOYCAPSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __JOYCAPSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertJOYCAPSWToVariant(var R : JOYCAPSW) : OleVariant;
var
__rw : __JOYCAPSW__Wrapper__;
begin
__rw := __JOYCAPSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToJOYCAPSW(const V : OleVariant) : JOYCAPSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := JOYCAPSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __JOYINFO__Wrapper__ = class(__JOYINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __JOYINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertJOYINFOToVariant(var R : JOYINFO) : OleVariant;
var
__rw : __JOYINFO__Wrapper__;
begin
__rw := __JOYINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToJOYINFO(const V : OleVariant) : JOYINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := JOYINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __joyinfo_tag__Wrapper__ = class(__joyinfo_tag__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __joyinfo_tag__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convertjoyinfo_tagToVariant(var R : joyinfo_tag) : OleVariant;
var
__rw : __joyinfo_tag__Wrapper__;
begin
__rw := __joyinfo_tag__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTojoyinfo_tag(const V : OleVariant) : joyinfo_tag;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := joyinfo_tag((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __JOYINFOEX__Wrapper__ = class(__JOYINFOEX__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __JOYINFOEX__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertJOYINFOEXToVariant(var R : JOYINFOEX) : OleVariant;
var
__rw : __JOYINFOEX__Wrapper__;
begin
__rw := __JOYINFOEX__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToJOYINFOEX(const V : OleVariant) : JOYINFOEX;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := JOYINFOEX((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __joyinfoex_tag__Wrapper__ = class(__joyinfoex_tag__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __joyinfoex_tag__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convertjoyinfoex_tagToVariant(var R : joyinfoex_tag) : OleVariant;
var
__rw : __joyinfoex_tag__Wrapper__;
begin
__rw := __joyinfoex_tag__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTojoyinfoex_tag(const V : OleVariant) : joyinfoex_tag;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := joyinfoex_tag((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_ANIM_OPEN_PARMS__Wrapper__ = class(__MCI_ANIM_OPEN_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_ANIM_OPEN_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_ANIM_OPEN_PARMSToVariant(var R : MCI_ANIM_OPEN_PARMS) : OleVariant;
var
__rw : __MCI_ANIM_OPEN_PARMS__Wrapper__;
begin
__rw := __MCI_ANIM_OPEN_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_ANIM_OPEN_PARMS(const V : OleVariant) : MCI_ANIM_OPEN_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_ANIM_OPEN_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_ANIM_OPEN_PARMSA__Wrapper__ = class(__MCI_ANIM_OPEN_PARMSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_ANIM_OPEN_PARMSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_ANIM_OPEN_PARMSAToVariant(var R : MCI_ANIM_OPEN_PARMSA) : OleVariant;
var
__rw : __MCI_ANIM_OPEN_PARMSA__Wrapper__;
begin
__rw := __MCI_ANIM_OPEN_PARMSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_ANIM_OPEN_PARMSA(const V : OleVariant) : MCI_ANIM_OPEN_PARMSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_ANIM_OPEN_PARMSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_ANIM_OPEN_PARMSW__Wrapper__ = class(__MCI_ANIM_OPEN_PARMSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_ANIM_OPEN_PARMSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_ANIM_OPEN_PARMSWToVariant(var R : MCI_ANIM_OPEN_PARMSW) : OleVariant;
var
__rw : __MCI_ANIM_OPEN_PARMSW__Wrapper__;
begin
__rw := __MCI_ANIM_OPEN_PARMSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_ANIM_OPEN_PARMSW(const V : OleVariant) : MCI_ANIM_OPEN_PARMSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_ANIM_OPEN_PARMSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_ANIM_PLAY_PARMS__Wrapper__ = class(__MCI_ANIM_PLAY_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_ANIM_PLAY_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_ANIM_PLAY_PARMSToVariant(var R : MCI_ANIM_PLAY_PARMS) : OleVariant;
var
__rw : __MCI_ANIM_PLAY_PARMS__Wrapper__;
begin
__rw := __MCI_ANIM_PLAY_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_ANIM_PLAY_PARMS(const V : OleVariant) : MCI_ANIM_PLAY_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_ANIM_PLAY_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_ANIM_RECT_PARMS__Wrapper__ = class(__MCI_ANIM_RECT_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_ANIM_RECT_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_ANIM_RECT_PARMSToVariant(var R : MCI_ANIM_RECT_PARMS) : OleVariant;
var
__rw : __MCI_ANIM_RECT_PARMS__Wrapper__;
begin
__rw := __MCI_ANIM_RECT_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_ANIM_RECT_PARMS(const V : OleVariant) : MCI_ANIM_RECT_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_ANIM_RECT_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_ANIM_STEP_PARMS__Wrapper__ = class(__MCI_ANIM_STEP_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_ANIM_STEP_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_ANIM_STEP_PARMSToVariant(var R : MCI_ANIM_STEP_PARMS) : OleVariant;
var
__rw : __MCI_ANIM_STEP_PARMS__Wrapper__;
begin
__rw := __MCI_ANIM_STEP_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_ANIM_STEP_PARMS(const V : OleVariant) : MCI_ANIM_STEP_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_ANIM_STEP_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_ANIM_UPDATE_PARMS__Wrapper__ = class(__MCI_ANIM_UPDATE_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_ANIM_UPDATE_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_ANIM_UPDATE_PARMSToVariant(var R : MCI_ANIM_UPDATE_PARMS) : OleVariant;
var
__rw : __MCI_ANIM_UPDATE_PARMS__Wrapper__;
begin
__rw := __MCI_ANIM_UPDATE_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_ANIM_UPDATE_PARMS(const V : OleVariant) : MCI_ANIM_UPDATE_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_ANIM_UPDATE_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_ANIM_WINDOW_PARMS__Wrapper__ = class(__MCI_ANIM_WINDOW_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_ANIM_WINDOW_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_ANIM_WINDOW_PARMSToVariant(var R : MCI_ANIM_WINDOW_PARMS) : OleVariant;
var
__rw : __MCI_ANIM_WINDOW_PARMS__Wrapper__;
begin
__rw := __MCI_ANIM_WINDOW_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_ANIM_WINDOW_PARMS(const V : OleVariant) : MCI_ANIM_WINDOW_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_ANIM_WINDOW_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_ANIM_WINDOW_PARMSA__Wrapper__ = class(__MCI_ANIM_WINDOW_PARMSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_ANIM_WINDOW_PARMSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_ANIM_WINDOW_PARMSAToVariant(var R : MCI_ANIM_WINDOW_PARMSA) : OleVariant;
var
__rw : __MCI_ANIM_WINDOW_PARMSA__Wrapper__;
begin
__rw := __MCI_ANIM_WINDOW_PARMSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_ANIM_WINDOW_PARMSA(const V : OleVariant) : MCI_ANIM_WINDOW_PARMSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_ANIM_WINDOW_PARMSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_ANIM_WINDOW_PARMSW__Wrapper__ = class(__MCI_ANIM_WINDOW_PARMSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_ANIM_WINDOW_PARMSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_ANIM_WINDOW_PARMSWToVariant(var R : MCI_ANIM_WINDOW_PARMSW) : OleVariant;
var
__rw : __MCI_ANIM_WINDOW_PARMSW__Wrapper__;
begin
__rw := __MCI_ANIM_WINDOW_PARMSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_ANIM_WINDOW_PARMSW(const V : OleVariant) : MCI_ANIM_WINDOW_PARMSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_ANIM_WINDOW_PARMSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_BREAK_PARMS__Wrapper__ = class(__MCI_BREAK_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_BREAK_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_BREAK_PARMSToVariant(var R : MCI_BREAK_PARMS) : OleVariant;
var
__rw : __MCI_BREAK_PARMS__Wrapper__;
begin
__rw := __MCI_BREAK_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_BREAK_PARMS(const V : OleVariant) : MCI_BREAK_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_BREAK_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_GENERIC_PARMS__Wrapper__ = class(__MCI_GENERIC_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_GENERIC_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_GENERIC_PARMSToVariant(var R : MCI_GENERIC_PARMS) : OleVariant;
var
__rw : __MCI_GENERIC_PARMS__Wrapper__;
begin
__rw := __MCI_GENERIC_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_GENERIC_PARMS(const V : OleVariant) : MCI_GENERIC_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_GENERIC_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_GETDEVCAPS_PARMS__Wrapper__ = class(__MCI_GETDEVCAPS_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_GETDEVCAPS_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_GETDEVCAPS_PARMSToVariant(var R : MCI_GETDEVCAPS_PARMS) : OleVariant;
var
__rw : __MCI_GETDEVCAPS_PARMS__Wrapper__;
begin
__rw := __MCI_GETDEVCAPS_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_GETDEVCAPS_PARMS(const V : OleVariant) : MCI_GETDEVCAPS_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_GETDEVCAPS_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_INFO_PARMS__Wrapper__ = class(__MCI_INFO_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_INFO_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_INFO_PARMSToVariant(var R : MCI_INFO_PARMS) : OleVariant;
var
__rw : __MCI_INFO_PARMS__Wrapper__;
begin
__rw := __MCI_INFO_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_INFO_PARMS(const V : OleVariant) : MCI_INFO_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_INFO_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_INFO_PARMSA__Wrapper__ = class(__MCI_INFO_PARMSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_INFO_PARMSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_INFO_PARMSAToVariant(var R : MCI_INFO_PARMSA) : OleVariant;
var
__rw : __MCI_INFO_PARMSA__Wrapper__;
begin
__rw := __MCI_INFO_PARMSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_INFO_PARMSA(const V : OleVariant) : MCI_INFO_PARMSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_INFO_PARMSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_INFO_PARMSW__Wrapper__ = class(__MCI_INFO_PARMSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_INFO_PARMSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_INFO_PARMSWToVariant(var R : MCI_INFO_PARMSW) : OleVariant;
var
__rw : __MCI_INFO_PARMSW__Wrapper__;
begin
__rw := __MCI_INFO_PARMSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_INFO_PARMSW(const V : OleVariant) : MCI_INFO_PARMSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_INFO_PARMSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_LOAD_PARMS__Wrapper__ = class(__MCI_LOAD_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_LOAD_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_LOAD_PARMSToVariant(var R : MCI_LOAD_PARMS) : OleVariant;
var
__rw : __MCI_LOAD_PARMS__Wrapper__;
begin
__rw := __MCI_LOAD_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_LOAD_PARMS(const V : OleVariant) : MCI_LOAD_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_LOAD_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_LOAD_PARMSA__Wrapper__ = class(__MCI_LOAD_PARMSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_LOAD_PARMSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_LOAD_PARMSAToVariant(var R : MCI_LOAD_PARMSA) : OleVariant;
var
__rw : __MCI_LOAD_PARMSA__Wrapper__;
begin
__rw := __MCI_LOAD_PARMSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_LOAD_PARMSA(const V : OleVariant) : MCI_LOAD_PARMSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_LOAD_PARMSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_LOAD_PARMSW__Wrapper__ = class(__MCI_LOAD_PARMSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_LOAD_PARMSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_LOAD_PARMSWToVariant(var R : MCI_LOAD_PARMSW) : OleVariant;
var
__rw : __MCI_LOAD_PARMSW__Wrapper__;
begin
__rw := __MCI_LOAD_PARMSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_LOAD_PARMSW(const V : OleVariant) : MCI_LOAD_PARMSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_LOAD_PARMSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_OPEN_PARMS__Wrapper__ = class(__MCI_OPEN_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_OPEN_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_OPEN_PARMSToVariant(var R : MCI_OPEN_PARMS) : OleVariant;
var
__rw : __MCI_OPEN_PARMS__Wrapper__;
begin
__rw := __MCI_OPEN_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_OPEN_PARMS(const V : OleVariant) : MCI_OPEN_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_OPEN_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_OPEN_PARMSA__Wrapper__ = class(__MCI_OPEN_PARMSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_OPEN_PARMSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_OPEN_PARMSAToVariant(var R : MCI_OPEN_PARMSA) : OleVariant;
var
__rw : __MCI_OPEN_PARMSA__Wrapper__;
begin
__rw := __MCI_OPEN_PARMSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_OPEN_PARMSA(const V : OleVariant) : MCI_OPEN_PARMSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_OPEN_PARMSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_OPEN_PARMSW__Wrapper__ = class(__MCI_OPEN_PARMSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_OPEN_PARMSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_OPEN_PARMSWToVariant(var R : MCI_OPEN_PARMSW) : OleVariant;
var
__rw : __MCI_OPEN_PARMSW__Wrapper__;
begin
__rw := __MCI_OPEN_PARMSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_OPEN_PARMSW(const V : OleVariant) : MCI_OPEN_PARMSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_OPEN_PARMSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_OVLY_LOAD_PARMS__Wrapper__ = class(__MCI_OVLY_LOAD_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_OVLY_LOAD_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_OVLY_LOAD_PARMSToVariant(var R : MCI_OVLY_LOAD_PARMS) : OleVariant;
var
__rw : __MCI_OVLY_LOAD_PARMS__Wrapper__;
begin
__rw := __MCI_OVLY_LOAD_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_OVLY_LOAD_PARMS(const V : OleVariant) : MCI_OVLY_LOAD_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_OVLY_LOAD_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_OVLY_LOAD_PARMSA__Wrapper__ = class(__MCI_OVLY_LOAD_PARMSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_OVLY_LOAD_PARMSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_OVLY_LOAD_PARMSAToVariant(var R : MCI_OVLY_LOAD_PARMSA) : OleVariant;
var
__rw : __MCI_OVLY_LOAD_PARMSA__Wrapper__;
begin
__rw := __MCI_OVLY_LOAD_PARMSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_OVLY_LOAD_PARMSA(const V : OleVariant) : MCI_OVLY_LOAD_PARMSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_OVLY_LOAD_PARMSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_OVLY_LOAD_PARMSW__Wrapper__ = class(__MCI_OVLY_LOAD_PARMSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_OVLY_LOAD_PARMSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_OVLY_LOAD_PARMSWToVariant(var R : MCI_OVLY_LOAD_PARMSW) : OleVariant;
var
__rw : __MCI_OVLY_LOAD_PARMSW__Wrapper__;
begin
__rw := __MCI_OVLY_LOAD_PARMSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_OVLY_LOAD_PARMSW(const V : OleVariant) : MCI_OVLY_LOAD_PARMSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_OVLY_LOAD_PARMSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_OVLY_OPEN_PARMS__Wrapper__ = class(__MCI_OVLY_OPEN_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_OVLY_OPEN_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_OVLY_OPEN_PARMSToVariant(var R : MCI_OVLY_OPEN_PARMS) : OleVariant;
var
__rw : __MCI_OVLY_OPEN_PARMS__Wrapper__;
begin
__rw := __MCI_OVLY_OPEN_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_OVLY_OPEN_PARMS(const V : OleVariant) : MCI_OVLY_OPEN_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_OVLY_OPEN_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_OVLY_OPEN_PARMSA__Wrapper__ = class(__MCI_OVLY_OPEN_PARMSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_OVLY_OPEN_PARMSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_OVLY_OPEN_PARMSAToVariant(var R : MCI_OVLY_OPEN_PARMSA) : OleVariant;
var
__rw : __MCI_OVLY_OPEN_PARMSA__Wrapper__;
begin
__rw := __MCI_OVLY_OPEN_PARMSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_OVLY_OPEN_PARMSA(const V : OleVariant) : MCI_OVLY_OPEN_PARMSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_OVLY_OPEN_PARMSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_OVLY_OPEN_PARMSW__Wrapper__ = class(__MCI_OVLY_OPEN_PARMSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_OVLY_OPEN_PARMSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_OVLY_OPEN_PARMSWToVariant(var R : MCI_OVLY_OPEN_PARMSW) : OleVariant;
var
__rw : __MCI_OVLY_OPEN_PARMSW__Wrapper__;
begin
__rw := __MCI_OVLY_OPEN_PARMSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_OVLY_OPEN_PARMSW(const V : OleVariant) : MCI_OVLY_OPEN_PARMSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_OVLY_OPEN_PARMSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_OVLY_RECT_PARMS__Wrapper__ = class(__MCI_OVLY_RECT_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_OVLY_RECT_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_OVLY_RECT_PARMSToVariant(var R : MCI_OVLY_RECT_PARMS) : OleVariant;
var
__rw : __MCI_OVLY_RECT_PARMS__Wrapper__;
begin
__rw := __MCI_OVLY_RECT_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_OVLY_RECT_PARMS(const V : OleVariant) : MCI_OVLY_RECT_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_OVLY_RECT_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_OVLY_SAVE_PARMS__Wrapper__ = class(__MCI_OVLY_SAVE_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_OVLY_SAVE_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_OVLY_SAVE_PARMSToVariant(var R : MCI_OVLY_SAVE_PARMS) : OleVariant;
var
__rw : __MCI_OVLY_SAVE_PARMS__Wrapper__;
begin
__rw := __MCI_OVLY_SAVE_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_OVLY_SAVE_PARMS(const V : OleVariant) : MCI_OVLY_SAVE_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_OVLY_SAVE_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_OVLY_SAVE_PARMSA__Wrapper__ = class(__MCI_OVLY_SAVE_PARMSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_OVLY_SAVE_PARMSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_OVLY_SAVE_PARMSAToVariant(var R : MCI_OVLY_SAVE_PARMSA) : OleVariant;
var
__rw : __MCI_OVLY_SAVE_PARMSA__Wrapper__;
begin
__rw := __MCI_OVLY_SAVE_PARMSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_OVLY_SAVE_PARMSA(const V : OleVariant) : MCI_OVLY_SAVE_PARMSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_OVLY_SAVE_PARMSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_OVLY_SAVE_PARMSW__Wrapper__ = class(__MCI_OVLY_SAVE_PARMSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_OVLY_SAVE_PARMSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_OVLY_SAVE_PARMSWToVariant(var R : MCI_OVLY_SAVE_PARMSW) : OleVariant;
var
__rw : __MCI_OVLY_SAVE_PARMSW__Wrapper__;
begin
__rw := __MCI_OVLY_SAVE_PARMSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_OVLY_SAVE_PARMSW(const V : OleVariant) : MCI_OVLY_SAVE_PARMSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_OVLY_SAVE_PARMSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_OVLY_WINDOW_PARMS__Wrapper__ = class(__MCI_OVLY_WINDOW_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_OVLY_WINDOW_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_OVLY_WINDOW_PARMSToVariant(var R : MCI_OVLY_WINDOW_PARMS) : OleVariant;
var
__rw : __MCI_OVLY_WINDOW_PARMS__Wrapper__;
begin
__rw := __MCI_OVLY_WINDOW_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_OVLY_WINDOW_PARMS(const V : OleVariant) : MCI_OVLY_WINDOW_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_OVLY_WINDOW_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_OVLY_WINDOW_PARMSA__Wrapper__ = class(__MCI_OVLY_WINDOW_PARMSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_OVLY_WINDOW_PARMSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_OVLY_WINDOW_PARMSAToVariant(var R : MCI_OVLY_WINDOW_PARMSA) : OleVariant;
var
__rw : __MCI_OVLY_WINDOW_PARMSA__Wrapper__;
begin
__rw := __MCI_OVLY_WINDOW_PARMSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_OVLY_WINDOW_PARMSA(const V : OleVariant) : MCI_OVLY_WINDOW_PARMSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_OVLY_WINDOW_PARMSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_OVLY_WINDOW_PARMSW__Wrapper__ = class(__MCI_OVLY_WINDOW_PARMSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_OVLY_WINDOW_PARMSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_OVLY_WINDOW_PARMSWToVariant(var R : MCI_OVLY_WINDOW_PARMSW) : OleVariant;
var
__rw : __MCI_OVLY_WINDOW_PARMSW__Wrapper__;
begin
__rw := __MCI_OVLY_WINDOW_PARMSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_OVLY_WINDOW_PARMSW(const V : OleVariant) : MCI_OVLY_WINDOW_PARMSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_OVLY_WINDOW_PARMSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_PLAY_PARMS__Wrapper__ = class(__MCI_PLAY_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_PLAY_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_PLAY_PARMSToVariant(var R : MCI_PLAY_PARMS) : OleVariant;
var
__rw : __MCI_PLAY_PARMS__Wrapper__;
begin
__rw := __MCI_PLAY_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_PLAY_PARMS(const V : OleVariant) : MCI_PLAY_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_PLAY_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_RECORD_PARMS__Wrapper__ = class(__MCI_RECORD_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_RECORD_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_RECORD_PARMSToVariant(var R : MCI_RECORD_PARMS) : OleVariant;
var
__rw : __MCI_RECORD_PARMS__Wrapper__;
begin
__rw := __MCI_RECORD_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_RECORD_PARMS(const V : OleVariant) : MCI_RECORD_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_RECORD_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_SAVE_PARMS__Wrapper__ = class(__MCI_SAVE_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_SAVE_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_SAVE_PARMSToVariant(var R : MCI_SAVE_PARMS) : OleVariant;
var
__rw : __MCI_SAVE_PARMS__Wrapper__;
begin
__rw := __MCI_SAVE_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_SAVE_PARMS(const V : OleVariant) : MCI_SAVE_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_SAVE_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_SAVE_PARMSA__Wrapper__ = class(__MCI_SAVE_PARMSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_SAVE_PARMSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_SAVE_PARMSAToVariant(var R : MCI_SAVE_PARMSA) : OleVariant;
var
__rw : __MCI_SAVE_PARMSA__Wrapper__;
begin
__rw := __MCI_SAVE_PARMSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_SAVE_PARMSA(const V : OleVariant) : MCI_SAVE_PARMSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_SAVE_PARMSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_SAVE_PARMSW__Wrapper__ = class(__MCI_SAVE_PARMSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_SAVE_PARMSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_SAVE_PARMSWToVariant(var R : MCI_SAVE_PARMSW) : OleVariant;
var
__rw : __MCI_SAVE_PARMSW__Wrapper__;
begin
__rw := __MCI_SAVE_PARMSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_SAVE_PARMSW(const V : OleVariant) : MCI_SAVE_PARMSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_SAVE_PARMSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_SEEK_PARMS__Wrapper__ = class(__MCI_SEEK_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_SEEK_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_SEEK_PARMSToVariant(var R : MCI_SEEK_PARMS) : OleVariant;
var
__rw : __MCI_SEEK_PARMS__Wrapper__;
begin
__rw := __MCI_SEEK_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_SEEK_PARMS(const V : OleVariant) : MCI_SEEK_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_SEEK_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_SEQ_SET_PARMS__Wrapper__ = class(__MCI_SEQ_SET_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_SEQ_SET_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_SEQ_SET_PARMSToVariant(var R : MCI_SEQ_SET_PARMS) : OleVariant;
var
__rw : __MCI_SEQ_SET_PARMS__Wrapper__;
begin
__rw := __MCI_SEQ_SET_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_SEQ_SET_PARMS(const V : OleVariant) : MCI_SEQ_SET_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_SEQ_SET_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_SET_PARMS__Wrapper__ = class(__MCI_SET_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_SET_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_SET_PARMSToVariant(var R : MCI_SET_PARMS) : OleVariant;
var
__rw : __MCI_SET_PARMS__Wrapper__;
begin
__rw := __MCI_SET_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_SET_PARMS(const V : OleVariant) : MCI_SET_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_SET_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_STATUS_PARMS__Wrapper__ = class(__MCI_STATUS_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_STATUS_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_STATUS_PARMSToVariant(var R : MCI_STATUS_PARMS) : OleVariant;
var
__rw : __MCI_STATUS_PARMS__Wrapper__;
begin
__rw := __MCI_STATUS_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_STATUS_PARMS(const V : OleVariant) : MCI_STATUS_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_STATUS_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_SYSINFO_PARMS__Wrapper__ = class(__MCI_SYSINFO_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_SYSINFO_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_SYSINFO_PARMSToVariant(var R : MCI_SYSINFO_PARMS) : OleVariant;
var
__rw : __MCI_SYSINFO_PARMS__Wrapper__;
begin
__rw := __MCI_SYSINFO_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_SYSINFO_PARMS(const V : OleVariant) : MCI_SYSINFO_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_SYSINFO_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_SYSINFO_PARMSA__Wrapper__ = class(__MCI_SYSINFO_PARMSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_SYSINFO_PARMSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_SYSINFO_PARMSAToVariant(var R : MCI_SYSINFO_PARMSA) : OleVariant;
var
__rw : __MCI_SYSINFO_PARMSA__Wrapper__;
begin
__rw := __MCI_SYSINFO_PARMSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_SYSINFO_PARMSA(const V : OleVariant) : MCI_SYSINFO_PARMSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_SYSINFO_PARMSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_SYSINFO_PARMSW__Wrapper__ = class(__MCI_SYSINFO_PARMSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_SYSINFO_PARMSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_SYSINFO_PARMSWToVariant(var R : MCI_SYSINFO_PARMSW) : OleVariant;
var
__rw : __MCI_SYSINFO_PARMSW__Wrapper__;
begin
__rw := __MCI_SYSINFO_PARMSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_SYSINFO_PARMSW(const V : OleVariant) : MCI_SYSINFO_PARMSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_SYSINFO_PARMSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_VD_ESCAPE_PARMS__Wrapper__ = class(__MCI_VD_ESCAPE_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_VD_ESCAPE_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_VD_ESCAPE_PARMSToVariant(var R : MCI_VD_ESCAPE_PARMS) : OleVariant;
var
__rw : __MCI_VD_ESCAPE_PARMS__Wrapper__;
begin
__rw := __MCI_VD_ESCAPE_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_VD_ESCAPE_PARMS(const V : OleVariant) : MCI_VD_ESCAPE_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_VD_ESCAPE_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_VD_ESCAPE_PARMSA__Wrapper__ = class(__MCI_VD_ESCAPE_PARMSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_VD_ESCAPE_PARMSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_VD_ESCAPE_PARMSAToVariant(var R : MCI_VD_ESCAPE_PARMSA) : OleVariant;
var
__rw : __MCI_VD_ESCAPE_PARMSA__Wrapper__;
begin
__rw := __MCI_VD_ESCAPE_PARMSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_VD_ESCAPE_PARMSA(const V : OleVariant) : MCI_VD_ESCAPE_PARMSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_VD_ESCAPE_PARMSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_VD_ESCAPE_PARMSW__Wrapper__ = class(__MCI_VD_ESCAPE_PARMSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_VD_ESCAPE_PARMSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_VD_ESCAPE_PARMSWToVariant(var R : MCI_VD_ESCAPE_PARMSW) : OleVariant;
var
__rw : __MCI_VD_ESCAPE_PARMSW__Wrapper__;
begin
__rw := __MCI_VD_ESCAPE_PARMSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_VD_ESCAPE_PARMSW(const V : OleVariant) : MCI_VD_ESCAPE_PARMSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_VD_ESCAPE_PARMSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_VD_PLAY_PARMS__Wrapper__ = class(__MCI_VD_PLAY_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_VD_PLAY_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_VD_PLAY_PARMSToVariant(var R : MCI_VD_PLAY_PARMS) : OleVariant;
var
__rw : __MCI_VD_PLAY_PARMS__Wrapper__;
begin
__rw := __MCI_VD_PLAY_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_VD_PLAY_PARMS(const V : OleVariant) : MCI_VD_PLAY_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_VD_PLAY_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_VD_STEP_PARMS__Wrapper__ = class(__MCI_VD_STEP_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_VD_STEP_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_VD_STEP_PARMSToVariant(var R : MCI_VD_STEP_PARMS) : OleVariant;
var
__rw : __MCI_VD_STEP_PARMS__Wrapper__;
begin
__rw := __MCI_VD_STEP_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_VD_STEP_PARMS(const V : OleVariant) : MCI_VD_STEP_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_VD_STEP_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_WAVE_DELETE_PARMS__Wrapper__ = class(__MCI_WAVE_DELETE_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_WAVE_DELETE_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_WAVE_DELETE_PARMSToVariant(var R : MCI_WAVE_DELETE_PARMS) : OleVariant;
var
__rw : __MCI_WAVE_DELETE_PARMS__Wrapper__;
begin
__rw := __MCI_WAVE_DELETE_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_WAVE_DELETE_PARMS(const V : OleVariant) : MCI_WAVE_DELETE_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_WAVE_DELETE_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_WAVE_OPEN_PARMS__Wrapper__ = class(__MCI_WAVE_OPEN_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_WAVE_OPEN_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_WAVE_OPEN_PARMSToVariant(var R : MCI_WAVE_OPEN_PARMS) : OleVariant;
var
__rw : __MCI_WAVE_OPEN_PARMS__Wrapper__;
begin
__rw := __MCI_WAVE_OPEN_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_WAVE_OPEN_PARMS(const V : OleVariant) : MCI_WAVE_OPEN_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_WAVE_OPEN_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_WAVE_OPEN_PARMSA__Wrapper__ = class(__MCI_WAVE_OPEN_PARMSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_WAVE_OPEN_PARMSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_WAVE_OPEN_PARMSAToVariant(var R : MCI_WAVE_OPEN_PARMSA) : OleVariant;
var
__rw : __MCI_WAVE_OPEN_PARMSA__Wrapper__;
begin
__rw := __MCI_WAVE_OPEN_PARMSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_WAVE_OPEN_PARMSA(const V : OleVariant) : MCI_WAVE_OPEN_PARMSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_WAVE_OPEN_PARMSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_WAVE_OPEN_PARMSW__Wrapper__ = class(__MCI_WAVE_OPEN_PARMSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_WAVE_OPEN_PARMSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_WAVE_OPEN_PARMSWToVariant(var R : MCI_WAVE_OPEN_PARMSW) : OleVariant;
var
__rw : __MCI_WAVE_OPEN_PARMSW__Wrapper__;
begin
__rw := __MCI_WAVE_OPEN_PARMSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_WAVE_OPEN_PARMSW(const V : OleVariant) : MCI_WAVE_OPEN_PARMSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_WAVE_OPEN_PARMSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MCI_WAVE_SET_PARMS__Wrapper__ = class(__MCI_WAVE_SET_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MCI_WAVE_SET_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMCI_WAVE_SET_PARMSToVariant(var R : MCI_WAVE_SET_PARMS) : OleVariant;
var
__rw : __MCI_WAVE_SET_PARMS__Wrapper__;
begin
__rw := __MCI_WAVE_SET_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMCI_WAVE_SET_PARMS(const V : OleVariant) : MCI_WAVE_SET_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MCI_WAVE_SET_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MIDIEVENT__Wrapper__ = class(__MIDIEVENT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MIDIEVENT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMIDIEVENTToVariant(var R : MIDIEVENT) : OleVariant;
var
__rw : __MIDIEVENT__Wrapper__;
begin
__rw := __MIDIEVENT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMIDIEVENT(const V : OleVariant) : MIDIEVENT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MIDIEVENT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __midievent_tag__Wrapper__ = class(__midievent_tag__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __midievent_tag__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convertmidievent_tagToVariant(var R : midievent_tag) : OleVariant;
var
__rw : __midievent_tag__Wrapper__;
begin
__rw := __midievent_tag__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTomidievent_tag(const V : OleVariant) : midievent_tag;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := midievent_tag((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MIDIHDR__Wrapper__ = class(__MIDIHDR__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MIDIHDR__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMIDIHDRToVariant(var R : MIDIHDR) : OleVariant;
var
__rw : __MIDIHDR__Wrapper__;
begin
__rw := __MIDIHDR__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMIDIHDR(const V : OleVariant) : MIDIHDR;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MIDIHDR((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __midihdr_tag__Wrapper__ = class(__midihdr_tag__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __midihdr_tag__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convertmidihdr_tagToVariant(var R : midihdr_tag) : OleVariant;
var
__rw : __midihdr_tag__Wrapper__;
begin
__rw := __midihdr_tag__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTomidihdr_tag(const V : OleVariant) : midihdr_tag;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := midihdr_tag((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MIDIINCAPS__Wrapper__ = class(__MIDIINCAPS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MIDIINCAPS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMIDIINCAPSToVariant(var R : MIDIINCAPS) : OleVariant;
var
__rw : __MIDIINCAPS__Wrapper__;
begin
__rw := __MIDIINCAPS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMIDIINCAPS(const V : OleVariant) : MIDIINCAPS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MIDIINCAPS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MIDIINCAPSA__Wrapper__ = class(__MIDIINCAPSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MIDIINCAPSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMIDIINCAPSAToVariant(var R : MIDIINCAPSA) : OleVariant;
var
__rw : __MIDIINCAPSA__Wrapper__;
begin
__rw := __MIDIINCAPSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMIDIINCAPSA(const V : OleVariant) : MIDIINCAPSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MIDIINCAPSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MIDIINCAPSW__Wrapper__ = class(__MIDIINCAPSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MIDIINCAPSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMIDIINCAPSWToVariant(var R : MIDIINCAPSW) : OleVariant;
var
__rw : __MIDIINCAPSW__Wrapper__;
begin
__rw := __MIDIINCAPSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMIDIINCAPSW(const V : OleVariant) : MIDIINCAPSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MIDIINCAPSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MIDIOUTCAPS__Wrapper__ = class(__MIDIOUTCAPS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MIDIOUTCAPS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMIDIOUTCAPSToVariant(var R : MIDIOUTCAPS) : OleVariant;
var
__rw : __MIDIOUTCAPS__Wrapper__;
begin
__rw := __MIDIOUTCAPS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMIDIOUTCAPS(const V : OleVariant) : MIDIOUTCAPS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MIDIOUTCAPS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MIDIOUTCAPSA__Wrapper__ = class(__MIDIOUTCAPSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MIDIOUTCAPSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMIDIOUTCAPSAToVariant(var R : MIDIOUTCAPSA) : OleVariant;
var
__rw : __MIDIOUTCAPSA__Wrapper__;
begin
__rw := __MIDIOUTCAPSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMIDIOUTCAPSA(const V : OleVariant) : MIDIOUTCAPSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MIDIOUTCAPSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MIDIOUTCAPSW__Wrapper__ = class(__MIDIOUTCAPSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MIDIOUTCAPSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMIDIOUTCAPSWToVariant(var R : MIDIOUTCAPSW) : OleVariant;
var
__rw : __MIDIOUTCAPSW__Wrapper__;
begin
__rw := __MIDIOUTCAPSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMIDIOUTCAPSW(const V : OleVariant) : MIDIOUTCAPSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MIDIOUTCAPSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MIDIPROPTEMPO__Wrapper__ = class(__MIDIPROPTEMPO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MIDIPROPTEMPO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMIDIPROPTEMPOToVariant(var R : MIDIPROPTEMPO) : OleVariant;
var
__rw : __MIDIPROPTEMPO__Wrapper__;
begin
__rw := __MIDIPROPTEMPO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMIDIPROPTEMPO(const V : OleVariant) : MIDIPROPTEMPO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MIDIPROPTEMPO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __midiproptempo_tag__Wrapper__ = class(__midiproptempo_tag__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __midiproptempo_tag__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convertmidiproptempo_tagToVariant(var R : midiproptempo_tag) : OleVariant;
var
__rw : __midiproptempo_tag__Wrapper__;
begin
__rw := __midiproptempo_tag__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTomidiproptempo_tag(const V : OleVariant) : midiproptempo_tag;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := midiproptempo_tag((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MIDIPROPTIMEDIV__Wrapper__ = class(__MIDIPROPTIMEDIV__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MIDIPROPTIMEDIV__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMIDIPROPTIMEDIVToVariant(var R : MIDIPROPTIMEDIV) : OleVariant;
var
__rw : __MIDIPROPTIMEDIV__Wrapper__;
begin
__rw := __MIDIPROPTIMEDIV__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMIDIPROPTIMEDIV(const V : OleVariant) : MIDIPROPTIMEDIV;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MIDIPROPTIMEDIV((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __midiproptimediv_tag__Wrapper__ = class(__midiproptimediv_tag__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __midiproptimediv_tag__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convertmidiproptimediv_tagToVariant(var R : midiproptimediv_tag) : OleVariant;
var
__rw : __midiproptimediv_tag__Wrapper__;
begin
__rw := __midiproptimediv_tag__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTomidiproptimediv_tag(const V : OleVariant) : midiproptimediv_tag;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := midiproptimediv_tag((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MIDISTRMBUFFVER__Wrapper__ = class(__MIDISTRMBUFFVER__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MIDISTRMBUFFVER__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMIDISTRMBUFFVERToVariant(var R : MIDISTRMBUFFVER) : OleVariant;
var
__rw : __MIDISTRMBUFFVER__Wrapper__;
begin
__rw := __MIDISTRMBUFFVER__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMIDISTRMBUFFVER(const V : OleVariant) : MIDISTRMBUFFVER;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MIDISTRMBUFFVER((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __midistrmbuffver_tag__Wrapper__ = class(__midistrmbuffver_tag__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __midistrmbuffver_tag__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convertmidistrmbuffver_tagToVariant(var R : midistrmbuffver_tag) : OleVariant;
var
__rw : __midistrmbuffver_tag__Wrapper__;
begin
__rw := __midistrmbuffver_tag__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTomidistrmbuffver_tag(const V : OleVariant) : midistrmbuffver_tag;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := midistrmbuffver_tag((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MIXERCAPS__Wrapper__ = class(__MIXERCAPS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MIXERCAPS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMIXERCAPSToVariant(var R : MIXERCAPS) : OleVariant;
var
__rw : __MIXERCAPS__Wrapper__;
begin
__rw := __MIXERCAPS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMIXERCAPS(const V : OleVariant) : MIXERCAPS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MIXERCAPS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MIXERCAPSA__Wrapper__ = class(__MIXERCAPSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MIXERCAPSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMIXERCAPSAToVariant(var R : MIXERCAPSA) : OleVariant;
var
__rw : __MIXERCAPSA__Wrapper__;
begin
__rw := __MIXERCAPSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMIXERCAPSA(const V : OleVariant) : MIXERCAPSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MIXERCAPSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MIXERCAPSW__Wrapper__ = class(__MIXERCAPSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MIXERCAPSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMIXERCAPSWToVariant(var R : MIXERCAPSW) : OleVariant;
var
__rw : __MIXERCAPSW__Wrapper__;
begin
__rw := __MIXERCAPSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMIXERCAPSW(const V : OleVariant) : MIXERCAPSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MIXERCAPSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MIXERCONTROLDETAILS_BOOLEAN__Wrapper__ = class(__MIXERCONTROLDETAILS_BOOLEAN__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MIXERCONTROLDETAILS_BOOLEAN__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMIXERCONTROLDETAILS_BOOLEANToVariant(var R : MIXERCONTROLDETAILS_BOOLEAN) : OleVariant;
var
__rw : __MIXERCONTROLDETAILS_BOOLEAN__Wrapper__;
begin
__rw := __MIXERCONTROLDETAILS_BOOLEAN__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMIXERCONTROLDETAILS_BOOLEAN(const V : OleVariant) : MIXERCONTROLDETAILS_BOOLEAN;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MIXERCONTROLDETAILS_BOOLEAN((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MIXERCONTROLDETAILS_LISTTEXT__Wrapper__ = class(__MIXERCONTROLDETAILS_LISTTEXT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MIXERCONTROLDETAILS_LISTTEXT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMIXERCONTROLDETAILS_LISTTEXTToVariant(var R : MIXERCONTROLDETAILS_LISTTEXT) : OleVariant;
var
__rw : __MIXERCONTROLDETAILS_LISTTEXT__Wrapper__;
begin
__rw := __MIXERCONTROLDETAILS_LISTTEXT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMIXERCONTROLDETAILS_LISTTEXT(const V : OleVariant) : MIXERCONTROLDETAILS_LISTTEXT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MIXERCONTROLDETAILS_LISTTEXT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MIXERCONTROLDETAILS_LISTTEXTA__Wrapper__ = class(__MIXERCONTROLDETAILS_LISTTEXTA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MIXERCONTROLDETAILS_LISTTEXTA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMIXERCONTROLDETAILS_LISTTEXTAToVariant(var R : MIXERCONTROLDETAILS_LISTTEXTA) : OleVariant;
var
__rw : __MIXERCONTROLDETAILS_LISTTEXTA__Wrapper__;
begin
__rw := __MIXERCONTROLDETAILS_LISTTEXTA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMIXERCONTROLDETAILS_LISTTEXTA(const V : OleVariant) : MIXERCONTROLDETAILS_LISTTEXTA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MIXERCONTROLDETAILS_LISTTEXTA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MIXERCONTROLDETAILS_LISTTEXTW__Wrapper__ = class(__MIXERCONTROLDETAILS_LISTTEXTW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MIXERCONTROLDETAILS_LISTTEXTW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMIXERCONTROLDETAILS_LISTTEXTWToVariant(var R : MIXERCONTROLDETAILS_LISTTEXTW) : OleVariant;
var
__rw : __MIXERCONTROLDETAILS_LISTTEXTW__Wrapper__;
begin
__rw := __MIXERCONTROLDETAILS_LISTTEXTW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMIXERCONTROLDETAILS_LISTTEXTW(const V : OleVariant) : MIXERCONTROLDETAILS_LISTTEXTW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MIXERCONTROLDETAILS_LISTTEXTW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MIXERCONTROLDETAILS_SIGNED__Wrapper__ = class(__MIXERCONTROLDETAILS_SIGNED__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MIXERCONTROLDETAILS_SIGNED__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMIXERCONTROLDETAILS_SIGNEDToVariant(var R : MIXERCONTROLDETAILS_SIGNED) : OleVariant;
var
__rw : __MIXERCONTROLDETAILS_SIGNED__Wrapper__;
begin
__rw := __MIXERCONTROLDETAILS_SIGNED__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMIXERCONTROLDETAILS_SIGNED(const V : OleVariant) : MIXERCONTROLDETAILS_SIGNED;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MIXERCONTROLDETAILS_SIGNED((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MIXERCONTROLDETAILS_UNSIGNED__Wrapper__ = class(__MIXERCONTROLDETAILS_UNSIGNED__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MIXERCONTROLDETAILS_UNSIGNED__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMIXERCONTROLDETAILS_UNSIGNEDToVariant(var R : MIXERCONTROLDETAILS_UNSIGNED) : OleVariant;
var
__rw : __MIXERCONTROLDETAILS_UNSIGNED__Wrapper__;
begin
__rw := __MIXERCONTROLDETAILS_UNSIGNED__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMIXERCONTROLDETAILS_UNSIGNED(const V : OleVariant) : MIXERCONTROLDETAILS_UNSIGNED;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MIXERCONTROLDETAILS_UNSIGNED((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MIXERLINE__Wrapper__ = class(__MIXERLINE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MIXERLINE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMIXERLINEToVariant(var R : MIXERLINE) : OleVariant;
var
__rw : __MIXERLINE__Wrapper__;
begin
__rw := __MIXERLINE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMIXERLINE(const V : OleVariant) : MIXERLINE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MIXERLINE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MIXERLINEA__Wrapper__ = class(__MIXERLINEA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MIXERLINEA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMIXERLINEAToVariant(var R : MIXERLINEA) : OleVariant;
var
__rw : __MIXERLINEA__Wrapper__;
begin
__rw := __MIXERLINEA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMIXERLINEA(const V : OleVariant) : MIXERLINEA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MIXERLINEA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MIXERLINECONTROLS__Wrapper__ = class(__MIXERLINECONTROLS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MIXERLINECONTROLS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMIXERLINECONTROLSToVariant(var R : MIXERLINECONTROLS) : OleVariant;
var
__rw : __MIXERLINECONTROLS__Wrapper__;
begin
__rw := __MIXERLINECONTROLS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMIXERLINECONTROLS(const V : OleVariant) : MIXERLINECONTROLS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MIXERLINECONTROLS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MIXERLINECONTROLSA__Wrapper__ = class(__MIXERLINECONTROLSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MIXERLINECONTROLSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMIXERLINECONTROLSAToVariant(var R : MIXERLINECONTROLSA) : OleVariant;
var
__rw : __MIXERLINECONTROLSA__Wrapper__;
begin
__rw := __MIXERLINECONTROLSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMIXERLINECONTROLSA(const V : OleVariant) : MIXERLINECONTROLSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MIXERLINECONTROLSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MIXERLINECONTROLSW__Wrapper__ = class(__MIXERLINECONTROLSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MIXERLINECONTROLSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMIXERLINECONTROLSWToVariant(var R : MIXERLINECONTROLSW) : OleVariant;
var
__rw : __MIXERLINECONTROLSW__Wrapper__;
begin
__rw := __MIXERLINECONTROLSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMIXERLINECONTROLSW(const V : OleVariant) : MIXERLINECONTROLSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MIXERLINECONTROLSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MIXERLINEW__Wrapper__ = class(__MIXERLINEW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MIXERLINEW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMIXERLINEWToVariant(var R : MIXERLINEW) : OleVariant;
var
__rw : __MIXERLINEW__Wrapper__;
begin
__rw := __MIXERLINEW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMIXERLINEW(const V : OleVariant) : MIXERLINEW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MIXERLINEW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MMCKINFO__Wrapper__ = class(__MMCKINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MMCKINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMMCKINFOToVariant(var R : MMCKINFO) : OleVariant;
var
__rw : __MMCKINFO__Wrapper__;
begin
__rw := __MMCKINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMMCKINFO(const V : OleVariant) : MMCKINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MMCKINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MMIOINFO__Wrapper__ = class(__MMIOINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MMIOINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMMIOINFOToVariant(var R : MMIOINFO) : OleVariant;
var
__rw : __MMIOINFO__Wrapper__;
begin
__rw := __MMIOINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMMIOINFO(const V : OleVariant) : MMIOINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MMIOINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MMTIME__Wrapper__ = class(__MMTIME__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MMTIME__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMMTIMEToVariant(var R : MMTIME) : OleVariant;
var
__rw : __MMTIME__Wrapper__;
begin
__rw := __MMTIME__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMMTIME(const V : OleVariant) : MMTIME;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MMTIME((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __mmtime_tag__Wrapper__ = class(__mmtime_tag__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __mmtime_tag__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convertmmtime_tagToVariant(var R : mmtime_tag) : OleVariant;
var
__rw : __mmtime_tag__Wrapper__;
begin
__rw := __mmtime_tag__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTommtime_tag(const V : OleVariant) : mmtime_tag;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := mmtime_tag((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __PCMWAVEFORMAT__Wrapper__ = class(__PCMWAVEFORMAT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __PCMWAVEFORMAT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertPCMWAVEFORMATToVariant(var R : PCMWAVEFORMAT) : OleVariant;
var
__rw : __PCMWAVEFORMAT__Wrapper__;
begin
__rw := __PCMWAVEFORMAT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToPCMWAVEFORMAT(const V : OleVariant) : PCMWAVEFORMAT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := PCMWAVEFORMAT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __pcmwaveformat_tag__Wrapper__ = class(__pcmwaveformat_tag__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __pcmwaveformat_tag__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convertpcmwaveformat_tagToVariant(var R : pcmwaveformat_tag) : OleVariant;
var
__rw : __pcmwaveformat_tag__Wrapper__;
begin
__rw := __pcmwaveformat_tag__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTopcmwaveformat_tag(const V : OleVariant) : pcmwaveformat_tag;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := pcmwaveformat_tag((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagAUXCAPS__Wrapper__ = class(__tagAUXCAPS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagAUXCAPS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagAUXCAPSToVariant(var R : tagAUXCAPS) : OleVariant;
var
__rw : __tagAUXCAPS__Wrapper__;
begin
__rw := __tagAUXCAPS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagAUXCAPS(const V : OleVariant) : tagAUXCAPS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagAUXCAPS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagAUXCAPSA__Wrapper__ = class(__tagAUXCAPSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagAUXCAPSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagAUXCAPSAToVariant(var R : tagAUXCAPSA) : OleVariant;
var
__rw : __tagAUXCAPSA__Wrapper__;
begin
__rw := __tagAUXCAPSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagAUXCAPSA(const V : OleVariant) : tagAUXCAPSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagAUXCAPSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagAUXCAPSW__Wrapper__ = class(__tagAUXCAPSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagAUXCAPSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagAUXCAPSWToVariant(var R : tagAUXCAPSW) : OleVariant;
var
__rw : __tagAUXCAPSW__Wrapper__;
begin
__rw := __tagAUXCAPSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagAUXCAPSW(const V : OleVariant) : tagAUXCAPSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagAUXCAPSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagDRVCONFIGINFO__Wrapper__ = class(__tagDRVCONFIGINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagDRVCONFIGINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagDRVCONFIGINFOToVariant(var R : tagDRVCONFIGINFO) : OleVariant;
var
__rw : __tagDRVCONFIGINFO__Wrapper__;
begin
__rw := __tagDRVCONFIGINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagDRVCONFIGINFO(const V : OleVariant) : tagDRVCONFIGINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagDRVCONFIGINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagJOYCAPS__Wrapper__ = class(__tagJOYCAPS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagJOYCAPS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagJOYCAPSToVariant(var R : tagJOYCAPS) : OleVariant;
var
__rw : __tagJOYCAPS__Wrapper__;
begin
__rw := __tagJOYCAPS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagJOYCAPS(const V : OleVariant) : tagJOYCAPS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagJOYCAPS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagJOYCAPSA__Wrapper__ = class(__tagJOYCAPSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagJOYCAPSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagJOYCAPSAToVariant(var R : tagJOYCAPSA) : OleVariant;
var
__rw : __tagJOYCAPSA__Wrapper__;
begin
__rw := __tagJOYCAPSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagJOYCAPSA(const V : OleVariant) : tagJOYCAPSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagJOYCAPSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagJOYCAPSW__Wrapper__ = class(__tagJOYCAPSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagJOYCAPSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagJOYCAPSWToVariant(var R : tagJOYCAPSW) : OleVariant;
var
__rw : __tagJOYCAPSW__Wrapper__;
begin
__rw := __tagJOYCAPSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagJOYCAPSW(const V : OleVariant) : tagJOYCAPSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagJOYCAPSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_ANIM_OPEN_PARMS__Wrapper__ = class(__tagMCI_ANIM_OPEN_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_ANIM_OPEN_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_ANIM_OPEN_PARMSToVariant(var R : tagMCI_ANIM_OPEN_PARMS) : OleVariant;
var
__rw : __tagMCI_ANIM_OPEN_PARMS__Wrapper__;
begin
__rw := __tagMCI_ANIM_OPEN_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_ANIM_OPEN_PARMS(const V : OleVariant) : tagMCI_ANIM_OPEN_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_ANIM_OPEN_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_ANIM_OPEN_PARMSA__Wrapper__ = class(__tagMCI_ANIM_OPEN_PARMSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_ANIM_OPEN_PARMSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_ANIM_OPEN_PARMSAToVariant(var R : tagMCI_ANIM_OPEN_PARMSA) : OleVariant;
var
__rw : __tagMCI_ANIM_OPEN_PARMSA__Wrapper__;
begin
__rw := __tagMCI_ANIM_OPEN_PARMSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_ANIM_OPEN_PARMSA(const V : OleVariant) : tagMCI_ANIM_OPEN_PARMSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_ANIM_OPEN_PARMSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_ANIM_OPEN_PARMSW__Wrapper__ = class(__tagMCI_ANIM_OPEN_PARMSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_ANIM_OPEN_PARMSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_ANIM_OPEN_PARMSWToVariant(var R : tagMCI_ANIM_OPEN_PARMSW) : OleVariant;
var
__rw : __tagMCI_ANIM_OPEN_PARMSW__Wrapper__;
begin
__rw := __tagMCI_ANIM_OPEN_PARMSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_ANIM_OPEN_PARMSW(const V : OleVariant) : tagMCI_ANIM_OPEN_PARMSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_ANIM_OPEN_PARMSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_ANIM_PLAY_PARMS__Wrapper__ = class(__tagMCI_ANIM_PLAY_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_ANIM_PLAY_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_ANIM_PLAY_PARMSToVariant(var R : tagMCI_ANIM_PLAY_PARMS) : OleVariant;
var
__rw : __tagMCI_ANIM_PLAY_PARMS__Wrapper__;
begin
__rw := __tagMCI_ANIM_PLAY_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_ANIM_PLAY_PARMS(const V : OleVariant) : tagMCI_ANIM_PLAY_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_ANIM_PLAY_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_ANIM_RECT_PARMS__Wrapper__ = class(__tagMCI_ANIM_RECT_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_ANIM_RECT_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_ANIM_RECT_PARMSToVariant(var R : tagMCI_ANIM_RECT_PARMS) : OleVariant;
var
__rw : __tagMCI_ANIM_RECT_PARMS__Wrapper__;
begin
__rw := __tagMCI_ANIM_RECT_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_ANIM_RECT_PARMS(const V : OleVariant) : tagMCI_ANIM_RECT_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_ANIM_RECT_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_ANIM_STEP_PARMS__Wrapper__ = class(__tagMCI_ANIM_STEP_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_ANIM_STEP_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_ANIM_STEP_PARMSToVariant(var R : tagMCI_ANIM_STEP_PARMS) : OleVariant;
var
__rw : __tagMCI_ANIM_STEP_PARMS__Wrapper__;
begin
__rw := __tagMCI_ANIM_STEP_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_ANIM_STEP_PARMS(const V : OleVariant) : tagMCI_ANIM_STEP_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_ANIM_STEP_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_ANIM_UPDATE_PARMS__Wrapper__ = class(__tagMCI_ANIM_UPDATE_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_ANIM_UPDATE_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_ANIM_UPDATE_PARMSToVariant(var R : tagMCI_ANIM_UPDATE_PARMS) : OleVariant;
var
__rw : __tagMCI_ANIM_UPDATE_PARMS__Wrapper__;
begin
__rw := __tagMCI_ANIM_UPDATE_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_ANIM_UPDATE_PARMS(const V : OleVariant) : tagMCI_ANIM_UPDATE_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_ANIM_UPDATE_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_ANIM_WINDOW_PARMS__Wrapper__ = class(__tagMCI_ANIM_WINDOW_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_ANIM_WINDOW_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_ANIM_WINDOW_PARMSToVariant(var R : tagMCI_ANIM_WINDOW_PARMS) : OleVariant;
var
__rw : __tagMCI_ANIM_WINDOW_PARMS__Wrapper__;
begin
__rw := __tagMCI_ANIM_WINDOW_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_ANIM_WINDOW_PARMS(const V : OleVariant) : tagMCI_ANIM_WINDOW_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_ANIM_WINDOW_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_ANIM_WINDOW_PARMSA__Wrapper__ = class(__tagMCI_ANIM_WINDOW_PARMSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_ANIM_WINDOW_PARMSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_ANIM_WINDOW_PARMSAToVariant(var R : tagMCI_ANIM_WINDOW_PARMSA) : OleVariant;
var
__rw : __tagMCI_ANIM_WINDOW_PARMSA__Wrapper__;
begin
__rw := __tagMCI_ANIM_WINDOW_PARMSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_ANIM_WINDOW_PARMSA(const V : OleVariant) : tagMCI_ANIM_WINDOW_PARMSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_ANIM_WINDOW_PARMSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_ANIM_WINDOW_PARMSW__Wrapper__ = class(__tagMCI_ANIM_WINDOW_PARMSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_ANIM_WINDOW_PARMSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_ANIM_WINDOW_PARMSWToVariant(var R : tagMCI_ANIM_WINDOW_PARMSW) : OleVariant;
var
__rw : __tagMCI_ANIM_WINDOW_PARMSW__Wrapper__;
begin
__rw := __tagMCI_ANIM_WINDOW_PARMSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_ANIM_WINDOW_PARMSW(const V : OleVariant) : tagMCI_ANIM_WINDOW_PARMSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_ANIM_WINDOW_PARMSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_BREAK_PARMS__Wrapper__ = class(__tagMCI_BREAK_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_BREAK_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_BREAK_PARMSToVariant(var R : tagMCI_BREAK_PARMS) : OleVariant;
var
__rw : __tagMCI_BREAK_PARMS__Wrapper__;
begin
__rw := __tagMCI_BREAK_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_BREAK_PARMS(const V : OleVariant) : tagMCI_BREAK_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_BREAK_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_GENERIC_PARMS__Wrapper__ = class(__tagMCI_GENERIC_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_GENERIC_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_GENERIC_PARMSToVariant(var R : tagMCI_GENERIC_PARMS) : OleVariant;
var
__rw : __tagMCI_GENERIC_PARMS__Wrapper__;
begin
__rw := __tagMCI_GENERIC_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_GENERIC_PARMS(const V : OleVariant) : tagMCI_GENERIC_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_GENERIC_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_GETDEVCAPS_PARMS__Wrapper__ = class(__tagMCI_GETDEVCAPS_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_GETDEVCAPS_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_GETDEVCAPS_PARMSToVariant(var R : tagMCI_GETDEVCAPS_PARMS) : OleVariant;
var
__rw : __tagMCI_GETDEVCAPS_PARMS__Wrapper__;
begin
__rw := __tagMCI_GETDEVCAPS_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_GETDEVCAPS_PARMS(const V : OleVariant) : tagMCI_GETDEVCAPS_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_GETDEVCAPS_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_INFO_PARMS__Wrapper__ = class(__tagMCI_INFO_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_INFO_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_INFO_PARMSToVariant(var R : tagMCI_INFO_PARMS) : OleVariant;
var
__rw : __tagMCI_INFO_PARMS__Wrapper__;
begin
__rw := __tagMCI_INFO_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_INFO_PARMS(const V : OleVariant) : tagMCI_INFO_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_INFO_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_INFO_PARMSA__Wrapper__ = class(__tagMCI_INFO_PARMSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_INFO_PARMSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_INFO_PARMSAToVariant(var R : tagMCI_INFO_PARMSA) : OleVariant;
var
__rw : __tagMCI_INFO_PARMSA__Wrapper__;
begin
__rw := __tagMCI_INFO_PARMSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_INFO_PARMSA(const V : OleVariant) : tagMCI_INFO_PARMSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_INFO_PARMSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_INFO_PARMSW__Wrapper__ = class(__tagMCI_INFO_PARMSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_INFO_PARMSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_INFO_PARMSWToVariant(var R : tagMCI_INFO_PARMSW) : OleVariant;
var
__rw : __tagMCI_INFO_PARMSW__Wrapper__;
begin
__rw := __tagMCI_INFO_PARMSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_INFO_PARMSW(const V : OleVariant) : tagMCI_INFO_PARMSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_INFO_PARMSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_LOAD_PARMS__Wrapper__ = class(__tagMCI_LOAD_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_LOAD_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_LOAD_PARMSToVariant(var R : tagMCI_LOAD_PARMS) : OleVariant;
var
__rw : __tagMCI_LOAD_PARMS__Wrapper__;
begin
__rw := __tagMCI_LOAD_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_LOAD_PARMS(const V : OleVariant) : tagMCI_LOAD_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_LOAD_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_LOAD_PARMSA__Wrapper__ = class(__tagMCI_LOAD_PARMSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_LOAD_PARMSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_LOAD_PARMSAToVariant(var R : tagMCI_LOAD_PARMSA) : OleVariant;
var
__rw : __tagMCI_LOAD_PARMSA__Wrapper__;
begin
__rw := __tagMCI_LOAD_PARMSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_LOAD_PARMSA(const V : OleVariant) : tagMCI_LOAD_PARMSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_LOAD_PARMSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_LOAD_PARMSW__Wrapper__ = class(__tagMCI_LOAD_PARMSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_LOAD_PARMSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_LOAD_PARMSWToVariant(var R : tagMCI_LOAD_PARMSW) : OleVariant;
var
__rw : __tagMCI_LOAD_PARMSW__Wrapper__;
begin
__rw := __tagMCI_LOAD_PARMSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_LOAD_PARMSW(const V : OleVariant) : tagMCI_LOAD_PARMSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_LOAD_PARMSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_OPEN_PARMS__Wrapper__ = class(__tagMCI_OPEN_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_OPEN_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_OPEN_PARMSToVariant(var R : tagMCI_OPEN_PARMS) : OleVariant;
var
__rw : __tagMCI_OPEN_PARMS__Wrapper__;
begin
__rw := __tagMCI_OPEN_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_OPEN_PARMS(const V : OleVariant) : tagMCI_OPEN_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_OPEN_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_OPEN_PARMSA__Wrapper__ = class(__tagMCI_OPEN_PARMSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_OPEN_PARMSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_OPEN_PARMSAToVariant(var R : tagMCI_OPEN_PARMSA) : OleVariant;
var
__rw : __tagMCI_OPEN_PARMSA__Wrapper__;
begin
__rw := __tagMCI_OPEN_PARMSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_OPEN_PARMSA(const V : OleVariant) : tagMCI_OPEN_PARMSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_OPEN_PARMSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_OPEN_PARMSW__Wrapper__ = class(__tagMCI_OPEN_PARMSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_OPEN_PARMSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_OPEN_PARMSWToVariant(var R : tagMCI_OPEN_PARMSW) : OleVariant;
var
__rw : __tagMCI_OPEN_PARMSW__Wrapper__;
begin
__rw := __tagMCI_OPEN_PARMSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_OPEN_PARMSW(const V : OleVariant) : tagMCI_OPEN_PARMSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_OPEN_PARMSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_OVLY_LOAD_PARMS__Wrapper__ = class(__tagMCI_OVLY_LOAD_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_OVLY_LOAD_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_OVLY_LOAD_PARMSToVariant(var R : tagMCI_OVLY_LOAD_PARMS) : OleVariant;
var
__rw : __tagMCI_OVLY_LOAD_PARMS__Wrapper__;
begin
__rw := __tagMCI_OVLY_LOAD_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_OVLY_LOAD_PARMS(const V : OleVariant) : tagMCI_OVLY_LOAD_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_OVLY_LOAD_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_OVLY_LOAD_PARMSA__Wrapper__ = class(__tagMCI_OVLY_LOAD_PARMSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_OVLY_LOAD_PARMSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_OVLY_LOAD_PARMSAToVariant(var R : tagMCI_OVLY_LOAD_PARMSA) : OleVariant;
var
__rw : __tagMCI_OVLY_LOAD_PARMSA__Wrapper__;
begin
__rw := __tagMCI_OVLY_LOAD_PARMSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_OVLY_LOAD_PARMSA(const V : OleVariant) : tagMCI_OVLY_LOAD_PARMSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_OVLY_LOAD_PARMSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_OVLY_LOAD_PARMSW__Wrapper__ = class(__tagMCI_OVLY_LOAD_PARMSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_OVLY_LOAD_PARMSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_OVLY_LOAD_PARMSWToVariant(var R : tagMCI_OVLY_LOAD_PARMSW) : OleVariant;
var
__rw : __tagMCI_OVLY_LOAD_PARMSW__Wrapper__;
begin
__rw := __tagMCI_OVLY_LOAD_PARMSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_OVLY_LOAD_PARMSW(const V : OleVariant) : tagMCI_OVLY_LOAD_PARMSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_OVLY_LOAD_PARMSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_OVLY_OPEN_PARMS__Wrapper__ = class(__tagMCI_OVLY_OPEN_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_OVLY_OPEN_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_OVLY_OPEN_PARMSToVariant(var R : tagMCI_OVLY_OPEN_PARMS) : OleVariant;
var
__rw : __tagMCI_OVLY_OPEN_PARMS__Wrapper__;
begin
__rw := __tagMCI_OVLY_OPEN_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_OVLY_OPEN_PARMS(const V : OleVariant) : tagMCI_OVLY_OPEN_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_OVLY_OPEN_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_OVLY_OPEN_PARMSA__Wrapper__ = class(__tagMCI_OVLY_OPEN_PARMSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_OVLY_OPEN_PARMSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_OVLY_OPEN_PARMSAToVariant(var R : tagMCI_OVLY_OPEN_PARMSA) : OleVariant;
var
__rw : __tagMCI_OVLY_OPEN_PARMSA__Wrapper__;
begin
__rw := __tagMCI_OVLY_OPEN_PARMSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_OVLY_OPEN_PARMSA(const V : OleVariant) : tagMCI_OVLY_OPEN_PARMSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_OVLY_OPEN_PARMSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_OVLY_OPEN_PARMSW__Wrapper__ = class(__tagMCI_OVLY_OPEN_PARMSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_OVLY_OPEN_PARMSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_OVLY_OPEN_PARMSWToVariant(var R : tagMCI_OVLY_OPEN_PARMSW) : OleVariant;
var
__rw : __tagMCI_OVLY_OPEN_PARMSW__Wrapper__;
begin
__rw := __tagMCI_OVLY_OPEN_PARMSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_OVLY_OPEN_PARMSW(const V : OleVariant) : tagMCI_OVLY_OPEN_PARMSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_OVLY_OPEN_PARMSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_OVLY_RECT_PARMS__Wrapper__ = class(__tagMCI_OVLY_RECT_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_OVLY_RECT_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_OVLY_RECT_PARMSToVariant(var R : tagMCI_OVLY_RECT_PARMS) : OleVariant;
var
__rw : __tagMCI_OVLY_RECT_PARMS__Wrapper__;
begin
__rw := __tagMCI_OVLY_RECT_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_OVLY_RECT_PARMS(const V : OleVariant) : tagMCI_OVLY_RECT_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_OVLY_RECT_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_OVLY_SAVE_PARMS__Wrapper__ = class(__tagMCI_OVLY_SAVE_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_OVLY_SAVE_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_OVLY_SAVE_PARMSToVariant(var R : tagMCI_OVLY_SAVE_PARMS) : OleVariant;
var
__rw : __tagMCI_OVLY_SAVE_PARMS__Wrapper__;
begin
__rw := __tagMCI_OVLY_SAVE_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_OVLY_SAVE_PARMS(const V : OleVariant) : tagMCI_OVLY_SAVE_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_OVLY_SAVE_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_OVLY_SAVE_PARMSA__Wrapper__ = class(__tagMCI_OVLY_SAVE_PARMSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_OVLY_SAVE_PARMSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_OVLY_SAVE_PARMSAToVariant(var R : tagMCI_OVLY_SAVE_PARMSA) : OleVariant;
var
__rw : __tagMCI_OVLY_SAVE_PARMSA__Wrapper__;
begin
__rw := __tagMCI_OVLY_SAVE_PARMSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_OVLY_SAVE_PARMSA(const V : OleVariant) : tagMCI_OVLY_SAVE_PARMSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_OVLY_SAVE_PARMSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_OVLY_SAVE_PARMSW__Wrapper__ = class(__tagMCI_OVLY_SAVE_PARMSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_OVLY_SAVE_PARMSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_OVLY_SAVE_PARMSWToVariant(var R : tagMCI_OVLY_SAVE_PARMSW) : OleVariant;
var
__rw : __tagMCI_OVLY_SAVE_PARMSW__Wrapper__;
begin
__rw := __tagMCI_OVLY_SAVE_PARMSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_OVLY_SAVE_PARMSW(const V : OleVariant) : tagMCI_OVLY_SAVE_PARMSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_OVLY_SAVE_PARMSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_OVLY_WINDOW_PARMS__Wrapper__ = class(__tagMCI_OVLY_WINDOW_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_OVLY_WINDOW_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_OVLY_WINDOW_PARMSToVariant(var R : tagMCI_OVLY_WINDOW_PARMS) : OleVariant;
var
__rw : __tagMCI_OVLY_WINDOW_PARMS__Wrapper__;
begin
__rw := __tagMCI_OVLY_WINDOW_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_OVLY_WINDOW_PARMS(const V : OleVariant) : tagMCI_OVLY_WINDOW_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_OVLY_WINDOW_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_OVLY_WINDOW_PARMSA__Wrapper__ = class(__tagMCI_OVLY_WINDOW_PARMSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_OVLY_WINDOW_PARMSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_OVLY_WINDOW_PARMSAToVariant(var R : tagMCI_OVLY_WINDOW_PARMSA) : OleVariant;
var
__rw : __tagMCI_OVLY_WINDOW_PARMSA__Wrapper__;
begin
__rw := __tagMCI_OVLY_WINDOW_PARMSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_OVLY_WINDOW_PARMSA(const V : OleVariant) : tagMCI_OVLY_WINDOW_PARMSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_OVLY_WINDOW_PARMSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_OVLY_WINDOW_PARMSW__Wrapper__ = class(__tagMCI_OVLY_WINDOW_PARMSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_OVLY_WINDOW_PARMSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_OVLY_WINDOW_PARMSWToVariant(var R : tagMCI_OVLY_WINDOW_PARMSW) : OleVariant;
var
__rw : __tagMCI_OVLY_WINDOW_PARMSW__Wrapper__;
begin
__rw := __tagMCI_OVLY_WINDOW_PARMSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_OVLY_WINDOW_PARMSW(const V : OleVariant) : tagMCI_OVLY_WINDOW_PARMSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_OVLY_WINDOW_PARMSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_PLAY_PARMS__Wrapper__ = class(__tagMCI_PLAY_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_PLAY_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_PLAY_PARMSToVariant(var R : tagMCI_PLAY_PARMS) : OleVariant;
var
__rw : __tagMCI_PLAY_PARMS__Wrapper__;
begin
__rw := __tagMCI_PLAY_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_PLAY_PARMS(const V : OleVariant) : tagMCI_PLAY_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_PLAY_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_RECORD_PARMS__Wrapper__ = class(__tagMCI_RECORD_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_RECORD_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_RECORD_PARMSToVariant(var R : tagMCI_RECORD_PARMS) : OleVariant;
var
__rw : __tagMCI_RECORD_PARMS__Wrapper__;
begin
__rw := __tagMCI_RECORD_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_RECORD_PARMS(const V : OleVariant) : tagMCI_RECORD_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_RECORD_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_SEEK_PARMS__Wrapper__ = class(__tagMCI_SEEK_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_SEEK_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_SEEK_PARMSToVariant(var R : tagMCI_SEEK_PARMS) : OleVariant;
var
__rw : __tagMCI_SEEK_PARMS__Wrapper__;
begin
__rw := __tagMCI_SEEK_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_SEEK_PARMS(const V : OleVariant) : tagMCI_SEEK_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_SEEK_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_SEQ_SET_PARMS__Wrapper__ = class(__tagMCI_SEQ_SET_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_SEQ_SET_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_SEQ_SET_PARMSToVariant(var R : tagMCI_SEQ_SET_PARMS) : OleVariant;
var
__rw : __tagMCI_SEQ_SET_PARMS__Wrapper__;
begin
__rw := __tagMCI_SEQ_SET_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_SEQ_SET_PARMS(const V : OleVariant) : tagMCI_SEQ_SET_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_SEQ_SET_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_SET_PARMS__Wrapper__ = class(__tagMCI_SET_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_SET_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_SET_PARMSToVariant(var R : tagMCI_SET_PARMS) : OleVariant;
var
__rw : __tagMCI_SET_PARMS__Wrapper__;
begin
__rw := __tagMCI_SET_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_SET_PARMS(const V : OleVariant) : tagMCI_SET_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_SET_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_STATUS_PARMS__Wrapper__ = class(__tagMCI_STATUS_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_STATUS_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_STATUS_PARMSToVariant(var R : tagMCI_STATUS_PARMS) : OleVariant;
var
__rw : __tagMCI_STATUS_PARMS__Wrapper__;
begin
__rw := __tagMCI_STATUS_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_STATUS_PARMS(const V : OleVariant) : tagMCI_STATUS_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_STATUS_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_SYSINFO_PARMS__Wrapper__ = class(__tagMCI_SYSINFO_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_SYSINFO_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_SYSINFO_PARMSToVariant(var R : tagMCI_SYSINFO_PARMS) : OleVariant;
var
__rw : __tagMCI_SYSINFO_PARMS__Wrapper__;
begin
__rw := __tagMCI_SYSINFO_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_SYSINFO_PARMS(const V : OleVariant) : tagMCI_SYSINFO_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_SYSINFO_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_SYSINFO_PARMSA__Wrapper__ = class(__tagMCI_SYSINFO_PARMSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_SYSINFO_PARMSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_SYSINFO_PARMSAToVariant(var R : tagMCI_SYSINFO_PARMSA) : OleVariant;
var
__rw : __tagMCI_SYSINFO_PARMSA__Wrapper__;
begin
__rw := __tagMCI_SYSINFO_PARMSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_SYSINFO_PARMSA(const V : OleVariant) : tagMCI_SYSINFO_PARMSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_SYSINFO_PARMSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_SYSINFO_PARMSW__Wrapper__ = class(__tagMCI_SYSINFO_PARMSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_SYSINFO_PARMSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_SYSINFO_PARMSWToVariant(var R : tagMCI_SYSINFO_PARMSW) : OleVariant;
var
__rw : __tagMCI_SYSINFO_PARMSW__Wrapper__;
begin
__rw := __tagMCI_SYSINFO_PARMSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_SYSINFO_PARMSW(const V : OleVariant) : tagMCI_SYSINFO_PARMSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_SYSINFO_PARMSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_VD_ESCAPE_PARMS__Wrapper__ = class(__tagMCI_VD_ESCAPE_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_VD_ESCAPE_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_VD_ESCAPE_PARMSToVariant(var R : tagMCI_VD_ESCAPE_PARMS) : OleVariant;
var
__rw : __tagMCI_VD_ESCAPE_PARMS__Wrapper__;
begin
__rw := __tagMCI_VD_ESCAPE_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_VD_ESCAPE_PARMS(const V : OleVariant) : tagMCI_VD_ESCAPE_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_VD_ESCAPE_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_VD_ESCAPE_PARMSA__Wrapper__ = class(__tagMCI_VD_ESCAPE_PARMSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_VD_ESCAPE_PARMSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_VD_ESCAPE_PARMSAToVariant(var R : tagMCI_VD_ESCAPE_PARMSA) : OleVariant;
var
__rw : __tagMCI_VD_ESCAPE_PARMSA__Wrapper__;
begin
__rw := __tagMCI_VD_ESCAPE_PARMSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_VD_ESCAPE_PARMSA(const V : OleVariant) : tagMCI_VD_ESCAPE_PARMSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_VD_ESCAPE_PARMSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_VD_ESCAPE_PARMSW__Wrapper__ = class(__tagMCI_VD_ESCAPE_PARMSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_VD_ESCAPE_PARMSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_VD_ESCAPE_PARMSWToVariant(var R : tagMCI_VD_ESCAPE_PARMSW) : OleVariant;
var
__rw : __tagMCI_VD_ESCAPE_PARMSW__Wrapper__;
begin
__rw := __tagMCI_VD_ESCAPE_PARMSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_VD_ESCAPE_PARMSW(const V : OleVariant) : tagMCI_VD_ESCAPE_PARMSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_VD_ESCAPE_PARMSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_VD_PLAY_PARMS__Wrapper__ = class(__tagMCI_VD_PLAY_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_VD_PLAY_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_VD_PLAY_PARMSToVariant(var R : tagMCI_VD_PLAY_PARMS) : OleVariant;
var
__rw : __tagMCI_VD_PLAY_PARMS__Wrapper__;
begin
__rw := __tagMCI_VD_PLAY_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_VD_PLAY_PARMS(const V : OleVariant) : tagMCI_VD_PLAY_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_VD_PLAY_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_VD_STEP_PARMS__Wrapper__ = class(__tagMCI_VD_STEP_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_VD_STEP_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_VD_STEP_PARMSToVariant(var R : tagMCI_VD_STEP_PARMS) : OleVariant;
var
__rw : __tagMCI_VD_STEP_PARMS__Wrapper__;
begin
__rw := __tagMCI_VD_STEP_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_VD_STEP_PARMS(const V : OleVariant) : tagMCI_VD_STEP_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_VD_STEP_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_WAVE_DELETE_PARMS__Wrapper__ = class(__tagMCI_WAVE_DELETE_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_WAVE_DELETE_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_WAVE_DELETE_PARMSToVariant(var R : tagMCI_WAVE_DELETE_PARMS) : OleVariant;
var
__rw : __tagMCI_WAVE_DELETE_PARMS__Wrapper__;
begin
__rw := __tagMCI_WAVE_DELETE_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_WAVE_DELETE_PARMS(const V : OleVariant) : tagMCI_WAVE_DELETE_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_WAVE_DELETE_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_WAVE_OPEN_PARMS__Wrapper__ = class(__tagMCI_WAVE_OPEN_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_WAVE_OPEN_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_WAVE_OPEN_PARMSToVariant(var R : tagMCI_WAVE_OPEN_PARMS) : OleVariant;
var
__rw : __tagMCI_WAVE_OPEN_PARMS__Wrapper__;
begin
__rw := __tagMCI_WAVE_OPEN_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_WAVE_OPEN_PARMS(const V : OleVariant) : tagMCI_WAVE_OPEN_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_WAVE_OPEN_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_WAVE_OPEN_PARMSA__Wrapper__ = class(__tagMCI_WAVE_OPEN_PARMSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_WAVE_OPEN_PARMSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_WAVE_OPEN_PARMSAToVariant(var R : tagMCI_WAVE_OPEN_PARMSA) : OleVariant;
var
__rw : __tagMCI_WAVE_OPEN_PARMSA__Wrapper__;
begin
__rw := __tagMCI_WAVE_OPEN_PARMSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_WAVE_OPEN_PARMSA(const V : OleVariant) : tagMCI_WAVE_OPEN_PARMSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_WAVE_OPEN_PARMSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_WAVE_OPEN_PARMSW__Wrapper__ = class(__tagMCI_WAVE_OPEN_PARMSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_WAVE_OPEN_PARMSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_WAVE_OPEN_PARMSWToVariant(var R : tagMCI_WAVE_OPEN_PARMSW) : OleVariant;
var
__rw : __tagMCI_WAVE_OPEN_PARMSW__Wrapper__;
begin
__rw := __tagMCI_WAVE_OPEN_PARMSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_WAVE_OPEN_PARMSW(const V : OleVariant) : tagMCI_WAVE_OPEN_PARMSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_WAVE_OPEN_PARMSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMCI_WAVE_SET_PARMS__Wrapper__ = class(__tagMCI_WAVE_SET_PARMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMCI_WAVE_SET_PARMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMCI_WAVE_SET_PARMSToVariant(var R : tagMCI_WAVE_SET_PARMS) : OleVariant;
var
__rw : __tagMCI_WAVE_SET_PARMS__Wrapper__;
begin
__rw := __tagMCI_WAVE_SET_PARMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMCI_WAVE_SET_PARMS(const V : OleVariant) : tagMCI_WAVE_SET_PARMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMCI_WAVE_SET_PARMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMIDIINCAPS__Wrapper__ = class(__tagMIDIINCAPS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMIDIINCAPS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMIDIINCAPSToVariant(var R : tagMIDIINCAPS) : OleVariant;
var
__rw : __tagMIDIINCAPS__Wrapper__;
begin
__rw := __tagMIDIINCAPS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMIDIINCAPS(const V : OleVariant) : tagMIDIINCAPS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMIDIINCAPS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMIDIINCAPSA__Wrapper__ = class(__tagMIDIINCAPSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMIDIINCAPSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMIDIINCAPSAToVariant(var R : tagMIDIINCAPSA) : OleVariant;
var
__rw : __tagMIDIINCAPSA__Wrapper__;
begin
__rw := __tagMIDIINCAPSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMIDIINCAPSA(const V : OleVariant) : tagMIDIINCAPSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMIDIINCAPSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMIDIINCAPSW__Wrapper__ = class(__tagMIDIINCAPSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMIDIINCAPSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMIDIINCAPSWToVariant(var R : tagMIDIINCAPSW) : OleVariant;
var
__rw : __tagMIDIINCAPSW__Wrapper__;
begin
__rw := __tagMIDIINCAPSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMIDIINCAPSW(const V : OleVariant) : tagMIDIINCAPSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMIDIINCAPSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMIDIOUTCAPS__Wrapper__ = class(__tagMIDIOUTCAPS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMIDIOUTCAPS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMIDIOUTCAPSToVariant(var R : tagMIDIOUTCAPS) : OleVariant;
var
__rw : __tagMIDIOUTCAPS__Wrapper__;
begin
__rw := __tagMIDIOUTCAPS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMIDIOUTCAPS(const V : OleVariant) : tagMIDIOUTCAPS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMIDIOUTCAPS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMIDIOUTCAPSA__Wrapper__ = class(__tagMIDIOUTCAPSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMIDIOUTCAPSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMIDIOUTCAPSAToVariant(var R : tagMIDIOUTCAPSA) : OleVariant;
var
__rw : __tagMIDIOUTCAPSA__Wrapper__;
begin
__rw := __tagMIDIOUTCAPSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMIDIOUTCAPSA(const V : OleVariant) : tagMIDIOUTCAPSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMIDIOUTCAPSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMIDIOUTCAPSW__Wrapper__ = class(__tagMIDIOUTCAPSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMIDIOUTCAPSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMIDIOUTCAPSWToVariant(var R : tagMIDIOUTCAPSW) : OleVariant;
var
__rw : __tagMIDIOUTCAPSW__Wrapper__;
begin
__rw := __tagMIDIOUTCAPSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMIDIOUTCAPSW(const V : OleVariant) : tagMIDIOUTCAPSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMIDIOUTCAPSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMIXERCAPS__Wrapper__ = class(__tagMIXERCAPS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMIXERCAPS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMIXERCAPSToVariant(var R : tagMIXERCAPS) : OleVariant;
var
__rw : __tagMIXERCAPS__Wrapper__;
begin
__rw := __tagMIXERCAPS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMIXERCAPS(const V : OleVariant) : tagMIXERCAPS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMIXERCAPS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMIXERCAPSA__Wrapper__ = class(__tagMIXERCAPSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMIXERCAPSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMIXERCAPSAToVariant(var R : tagMIXERCAPSA) : OleVariant;
var
__rw : __tagMIXERCAPSA__Wrapper__;
begin
__rw := __tagMIXERCAPSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMIXERCAPSA(const V : OleVariant) : tagMIXERCAPSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMIXERCAPSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMIXERCAPSW__Wrapper__ = class(__tagMIXERCAPSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMIXERCAPSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMIXERCAPSWToVariant(var R : tagMIXERCAPSW) : OleVariant;
var
__rw : __tagMIXERCAPSW__Wrapper__;
begin
__rw := __tagMIXERCAPSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMIXERCAPSW(const V : OleVariant) : tagMIXERCAPSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMIXERCAPSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMIXERCONTROLDETAILS_LISTTEXT__Wrapper__ = class(__tagMIXERCONTROLDETAILS_LISTTEXT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMIXERCONTROLDETAILS_LISTTEXT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMIXERCONTROLDETAILS_LISTTEXTToVariant(var R : tagMIXERCONTROLDETAILS_LISTTEXT) : OleVariant;
var
__rw : __tagMIXERCONTROLDETAILS_LISTTEXT__Wrapper__;
begin
__rw := __tagMIXERCONTROLDETAILS_LISTTEXT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMIXERCONTROLDETAILS_LISTTEXT(const V : OleVariant) : tagMIXERCONTROLDETAILS_LISTTEXT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMIXERCONTROLDETAILS_LISTTEXT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMIXERCONTROLDETAILS_LISTTEXTA__Wrapper__ = class(__tagMIXERCONTROLDETAILS_LISTTEXTA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMIXERCONTROLDETAILS_LISTTEXTA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMIXERCONTROLDETAILS_LISTTEXTAToVariant(var R : tagMIXERCONTROLDETAILS_LISTTEXTA) : OleVariant;
var
__rw : __tagMIXERCONTROLDETAILS_LISTTEXTA__Wrapper__;
begin
__rw := __tagMIXERCONTROLDETAILS_LISTTEXTA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMIXERCONTROLDETAILS_LISTTEXTA(const V : OleVariant) : tagMIXERCONTROLDETAILS_LISTTEXTA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMIXERCONTROLDETAILS_LISTTEXTA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMIXERCONTROLDETAILS_LISTTEXTW__Wrapper__ = class(__tagMIXERCONTROLDETAILS_LISTTEXTW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMIXERCONTROLDETAILS_LISTTEXTW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMIXERCONTROLDETAILS_LISTTEXTWToVariant(var R : tagMIXERCONTROLDETAILS_LISTTEXTW) : OleVariant;
var
__rw : __tagMIXERCONTROLDETAILS_LISTTEXTW__Wrapper__;
begin
__rw := __tagMIXERCONTROLDETAILS_LISTTEXTW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMIXERCONTROLDETAILS_LISTTEXTW(const V : OleVariant) : tagMIXERCONTROLDETAILS_LISTTEXTW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMIXERCONTROLDETAILS_LISTTEXTW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMIXERLINE__Wrapper__ = class(__tagMIXERLINE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMIXERLINE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMIXERLINEToVariant(var R : tagMIXERLINE) : OleVariant;
var
__rw : __tagMIXERLINE__Wrapper__;
begin
__rw := __tagMIXERLINE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMIXERLINE(const V : OleVariant) : tagMIXERLINE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMIXERLINE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMIXERLINEA__Wrapper__ = class(__tagMIXERLINEA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMIXERLINEA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMIXERLINEAToVariant(var R : tagMIXERLINEA) : OleVariant;
var
__rw : __tagMIXERLINEA__Wrapper__;
begin
__rw := __tagMIXERLINEA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMIXERLINEA(const V : OleVariant) : tagMIXERLINEA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMIXERLINEA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMIXERLINECONTROLS__Wrapper__ = class(__tagMIXERLINECONTROLS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMIXERLINECONTROLS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMIXERLINECONTROLSToVariant(var R : tagMIXERLINECONTROLS) : OleVariant;
var
__rw : __tagMIXERLINECONTROLS__Wrapper__;
begin
__rw := __tagMIXERLINECONTROLS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMIXERLINECONTROLS(const V : OleVariant) : tagMIXERLINECONTROLS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMIXERLINECONTROLS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMIXERLINECONTROLSA__Wrapper__ = class(__tagMIXERLINECONTROLSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMIXERLINECONTROLSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMIXERLINECONTROLSAToVariant(var R : tagMIXERLINECONTROLSA) : OleVariant;
var
__rw : __tagMIXERLINECONTROLSA__Wrapper__;
begin
__rw := __tagMIXERLINECONTROLSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMIXERLINECONTROLSA(const V : OleVariant) : tagMIXERLINECONTROLSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMIXERLINECONTROLSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMIXERLINECONTROLSW__Wrapper__ = class(__tagMIXERLINECONTROLSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMIXERLINECONTROLSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMIXERLINECONTROLSWToVariant(var R : tagMIXERLINECONTROLSW) : OleVariant;
var
__rw : __tagMIXERLINECONTROLSW__Wrapper__;
begin
__rw := __tagMIXERLINECONTROLSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMIXERLINECONTROLSW(const V : OleVariant) : tagMIXERLINECONTROLSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMIXERLINECONTROLSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMIXERLINEW__Wrapper__ = class(__tagMIXERLINEW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMIXERLINEW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMIXERLINEWToVariant(var R : tagMIXERLINEW) : OleVariant;
var
__rw : __tagMIXERLINEW__Wrapper__;
begin
__rw := __tagMIXERLINEW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMIXERLINEW(const V : OleVariant) : tagMIXERLINEW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMIXERLINEW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagWAVEINCAPS__Wrapper__ = class(__tagWAVEINCAPS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagWAVEINCAPS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagWAVEINCAPSToVariant(var R : tagWAVEINCAPS) : OleVariant;
var
__rw : __tagWAVEINCAPS__Wrapper__;
begin
__rw := __tagWAVEINCAPS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagWAVEINCAPS(const V : OleVariant) : tagWAVEINCAPS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagWAVEINCAPS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagWAVEINCAPSA__Wrapper__ = class(__tagWAVEINCAPSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagWAVEINCAPSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagWAVEINCAPSAToVariant(var R : tagWAVEINCAPSA) : OleVariant;
var
__rw : __tagWAVEINCAPSA__Wrapper__;
begin
__rw := __tagWAVEINCAPSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagWAVEINCAPSA(const V : OleVariant) : tagWAVEINCAPSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagWAVEINCAPSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagWAVEINCAPSW__Wrapper__ = class(__tagWAVEINCAPSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagWAVEINCAPSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagWAVEINCAPSWToVariant(var R : tagWAVEINCAPSW) : OleVariant;
var
__rw : __tagWAVEINCAPSW__Wrapper__;
begin
__rw := __tagWAVEINCAPSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagWAVEINCAPSW(const V : OleVariant) : tagWAVEINCAPSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagWAVEINCAPSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagWAVEOUTCAPS__Wrapper__ = class(__tagWAVEOUTCAPS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagWAVEOUTCAPS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagWAVEOUTCAPSToVariant(var R : tagWAVEOUTCAPS) : OleVariant;
var
__rw : __tagWAVEOUTCAPS__Wrapper__;
begin
__rw := __tagWAVEOUTCAPS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagWAVEOUTCAPS(const V : OleVariant) : tagWAVEOUTCAPS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagWAVEOUTCAPS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagWAVEOUTCAPSA__Wrapper__ = class(__tagWAVEOUTCAPSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagWAVEOUTCAPSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagWAVEOUTCAPSAToVariant(var R : tagWAVEOUTCAPSA) : OleVariant;
var
__rw : __tagWAVEOUTCAPSA__Wrapper__;
begin
__rw := __tagWAVEOUTCAPSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagWAVEOUTCAPSA(const V : OleVariant) : tagWAVEOUTCAPSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagWAVEOUTCAPSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagWAVEOUTCAPSW__Wrapper__ = class(__tagWAVEOUTCAPSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagWAVEOUTCAPSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagWAVEOUTCAPSWToVariant(var R : tagWAVEOUTCAPSW) : OleVariant;
var
__rw : __tagWAVEOUTCAPSW__Wrapper__;
begin
__rw := __tagWAVEOUTCAPSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagWAVEOUTCAPSW(const V : OleVariant) : tagWAVEOUTCAPSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagWAVEOUTCAPSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TAuxCaps__Wrapper__ = class(__TAuxCaps__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TAuxCaps__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTAuxCapsToVariant(var R : TAuxCaps) : OleVariant;
var
__rw : __TAuxCaps__Wrapper__;
begin
__rw := __TAuxCaps__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTAuxCaps(const V : OleVariant) : TAuxCaps;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TAuxCaps((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TAuxCapsA__Wrapper__ = class(__TAuxCapsA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TAuxCapsA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTAuxCapsAToVariant(var R : TAuxCapsA) : OleVariant;
var
__rw : __TAuxCapsA__Wrapper__;
begin
__rw := __TAuxCapsA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTAuxCapsA(const V : OleVariant) : TAuxCapsA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TAuxCapsA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TAuxCapsW__Wrapper__ = class(__TAuxCapsW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TAuxCapsW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTAuxCapsWToVariant(var R : TAuxCapsW) : OleVariant;
var
__rw : __TAuxCapsW__Wrapper__;
begin
__rw := __TAuxCapsW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTAuxCapsW(const V : OleVariant) : TAuxCapsW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TAuxCapsW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDrvConfigInfo__Wrapper__ = class(__TDrvConfigInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDrvConfigInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDrvConfigInfoToVariant(var R : TDrvConfigInfo) : OleVariant;
var
__rw : __TDrvConfigInfo__Wrapper__;
begin
__rw := __TDrvConfigInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDrvConfigInfo(const V : OleVariant) : TDrvConfigInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDrvConfigInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDrvConfigInfoEx__Wrapper__ = class(__TDrvConfigInfoEx__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDrvConfigInfoEx__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDrvConfigInfoExToVariant(var R : TDrvConfigInfoEx) : OleVariant;
var
__rw : __TDrvConfigInfoEx__Wrapper__;
begin
__rw := __TDrvConfigInfoEx__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDrvConfigInfoEx(const V : OleVariant) : TDrvConfigInfoEx;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDrvConfigInfoEx((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TIMECAPS__Wrapper__ = class(__TIMECAPS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIMECAPS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIMECAPSToVariant(var R : TIMECAPS) : OleVariant;
var
__rw : __TIMECAPS__Wrapper__;
begin
__rw := __TIMECAPS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIMECAPS(const V : OleVariant) : TIMECAPS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIMECAPS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __timecaps_tag__Wrapper__ = class(__timecaps_tag__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __timecaps_tag__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Converttimecaps_tagToVariant(var R : timecaps_tag) : OleVariant;
var
__rw : __timecaps_tag__Wrapper__;
begin
__rw := __timecaps_tag__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotimecaps_tag(const V : OleVariant) : timecaps_tag;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := timecaps_tag((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TJoyCaps__Wrapper__ = class(__TJoyCaps__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TJoyCaps__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTJoyCapsToVariant(var R : TJoyCaps) : OleVariant;
var
__rw : __TJoyCaps__Wrapper__;
begin
__rw := __TJoyCaps__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTJoyCaps(const V : OleVariant) : TJoyCaps;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TJoyCaps((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TJoyCapsA__Wrapper__ = class(__TJoyCapsA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TJoyCapsA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTJoyCapsAToVariant(var R : TJoyCapsA) : OleVariant;
var
__rw : __TJoyCapsA__Wrapper__;
begin
__rw := __TJoyCapsA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTJoyCapsA(const V : OleVariant) : TJoyCapsA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TJoyCapsA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TJoyCapsW__Wrapper__ = class(__TJoyCapsW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TJoyCapsW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTJoyCapsWToVariant(var R : TJoyCapsW) : OleVariant;
var
__rw : __TJoyCapsW__Wrapper__;
begin
__rw := __TJoyCapsW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTJoyCapsW(const V : OleVariant) : TJoyCapsW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TJoyCapsW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TJoyInfo__Wrapper__ = class(__TJoyInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TJoyInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTJoyInfoToVariant(var R : TJoyInfo) : OleVariant;
var
__rw : __TJoyInfo__Wrapper__;
begin
__rw := __TJoyInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTJoyInfo(const V : OleVariant) : TJoyInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TJoyInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TJoyInfoEx__Wrapper__ = class(__TJoyInfoEx__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TJoyInfoEx__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTJoyInfoExToVariant(var R : TJoyInfoEx) : OleVariant;
var
__rw : __TJoyInfoEx__Wrapper__;
begin
__rw := __TJoyInfoEx__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTJoyInfoEx(const V : OleVariant) : TJoyInfoEx;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TJoyInfoEx((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Anim_Open_Parms__Wrapper__ = class(__TMCI_Anim_Open_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Anim_Open_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Anim_Open_ParmsToVariant(var R : TMCI_Anim_Open_Parms) : OleVariant;
var
__rw : __TMCI_Anim_Open_Parms__Wrapper__;
begin
__rw := __TMCI_Anim_Open_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Anim_Open_Parms(const V : OleVariant) : TMCI_Anim_Open_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Anim_Open_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Anim_Open_ParmsA__Wrapper__ = class(__TMCI_Anim_Open_ParmsA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Anim_Open_ParmsA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Anim_Open_ParmsAToVariant(var R : TMCI_Anim_Open_ParmsA) : OleVariant;
var
__rw : __TMCI_Anim_Open_ParmsA__Wrapper__;
begin
__rw := __TMCI_Anim_Open_ParmsA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Anim_Open_ParmsA(const V : OleVariant) : TMCI_Anim_Open_ParmsA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Anim_Open_ParmsA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Anim_Open_ParmsW__Wrapper__ = class(__TMCI_Anim_Open_ParmsW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Anim_Open_ParmsW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Anim_Open_ParmsWToVariant(var R : TMCI_Anim_Open_ParmsW) : OleVariant;
var
__rw : __TMCI_Anim_Open_ParmsW__Wrapper__;
begin
__rw := __TMCI_Anim_Open_ParmsW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Anim_Open_ParmsW(const V : OleVariant) : TMCI_Anim_Open_ParmsW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Anim_Open_ParmsW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Anim_Play_Parms__Wrapper__ = class(__TMCI_Anim_Play_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Anim_Play_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Anim_Play_ParmsToVariant(var R : TMCI_Anim_Play_Parms) : OleVariant;
var
__rw : __TMCI_Anim_Play_Parms__Wrapper__;
begin
__rw := __TMCI_Anim_Play_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Anim_Play_Parms(const V : OleVariant) : TMCI_Anim_Play_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Anim_Play_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Anim_Rect_Parms__Wrapper__ = class(__TMCI_Anim_Rect_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Anim_Rect_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Anim_Rect_ParmsToVariant(var R : TMCI_Anim_Rect_Parms) : OleVariant;
var
__rw : __TMCI_Anim_Rect_Parms__Wrapper__;
begin
__rw := __TMCI_Anim_Rect_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Anim_Rect_Parms(const V : OleVariant) : TMCI_Anim_Rect_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Anim_Rect_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Anim_Step_Parms__Wrapper__ = class(__TMCI_Anim_Step_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Anim_Step_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Anim_Step_ParmsToVariant(var R : TMCI_Anim_Step_Parms) : OleVariant;
var
__rw : __TMCI_Anim_Step_Parms__Wrapper__;
begin
__rw := __TMCI_Anim_Step_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Anim_Step_Parms(const V : OleVariant) : TMCI_Anim_Step_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Anim_Step_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Anim_Update_Parms__Wrapper__ = class(__TMCI_Anim_Update_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Anim_Update_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Anim_Update_ParmsToVariant(var R : TMCI_Anim_Update_Parms) : OleVariant;
var
__rw : __TMCI_Anim_Update_Parms__Wrapper__;
begin
__rw := __TMCI_Anim_Update_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Anim_Update_Parms(const V : OleVariant) : TMCI_Anim_Update_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Anim_Update_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Anim_Window_Parms__Wrapper__ = class(__TMCI_Anim_Window_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Anim_Window_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Anim_Window_ParmsToVariant(var R : TMCI_Anim_Window_Parms) : OleVariant;
var
__rw : __TMCI_Anim_Window_Parms__Wrapper__;
begin
__rw := __TMCI_Anim_Window_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Anim_Window_Parms(const V : OleVariant) : TMCI_Anim_Window_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Anim_Window_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Anim_Window_ParmsA__Wrapper__ = class(__TMCI_Anim_Window_ParmsA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Anim_Window_ParmsA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Anim_Window_ParmsAToVariant(var R : TMCI_Anim_Window_ParmsA) : OleVariant;
var
__rw : __TMCI_Anim_Window_ParmsA__Wrapper__;
begin
__rw := __TMCI_Anim_Window_ParmsA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Anim_Window_ParmsA(const V : OleVariant) : TMCI_Anim_Window_ParmsA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Anim_Window_ParmsA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Anim_Window_ParmsW__Wrapper__ = class(__TMCI_Anim_Window_ParmsW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Anim_Window_ParmsW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Anim_Window_ParmsWToVariant(var R : TMCI_Anim_Window_ParmsW) : OleVariant;
var
__rw : __TMCI_Anim_Window_ParmsW__Wrapper__;
begin
__rw := __TMCI_Anim_Window_ParmsW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Anim_Window_ParmsW(const V : OleVariant) : TMCI_Anim_Window_ParmsW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Anim_Window_ParmsW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_BReak_Parms__Wrapper__ = class(__TMCI_BReak_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_BReak_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_BReak_ParmsToVariant(var R : TMCI_BReak_Parms) : OleVariant;
var
__rw : __TMCI_BReak_Parms__Wrapper__;
begin
__rw := __TMCI_BReak_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_BReak_Parms(const V : OleVariant) : TMCI_BReak_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_BReak_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Generic_Parms__Wrapper__ = class(__TMCI_Generic_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Generic_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Generic_ParmsToVariant(var R : TMCI_Generic_Parms) : OleVariant;
var
__rw : __TMCI_Generic_Parms__Wrapper__;
begin
__rw := __TMCI_Generic_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Generic_Parms(const V : OleVariant) : TMCI_Generic_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Generic_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_GetDevCaps_Parms__Wrapper__ = class(__TMCI_GetDevCaps_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_GetDevCaps_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_GetDevCaps_ParmsToVariant(var R : TMCI_GetDevCaps_Parms) : OleVariant;
var
__rw : __TMCI_GetDevCaps_Parms__Wrapper__;
begin
__rw := __TMCI_GetDevCaps_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_GetDevCaps_Parms(const V : OleVariant) : TMCI_GetDevCaps_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_GetDevCaps_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Info_Parms__Wrapper__ = class(__TMCI_Info_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Info_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Info_ParmsToVariant(var R : TMCI_Info_Parms) : OleVariant;
var
__rw : __TMCI_Info_Parms__Wrapper__;
begin
__rw := __TMCI_Info_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Info_Parms(const V : OleVariant) : TMCI_Info_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Info_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Info_ParmsA__Wrapper__ = class(__TMCI_Info_ParmsA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Info_ParmsA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Info_ParmsAToVariant(var R : TMCI_Info_ParmsA) : OleVariant;
var
__rw : __TMCI_Info_ParmsA__Wrapper__;
begin
__rw := __TMCI_Info_ParmsA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Info_ParmsA(const V : OleVariant) : TMCI_Info_ParmsA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Info_ParmsA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Info_ParmsW__Wrapper__ = class(__TMCI_Info_ParmsW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Info_ParmsW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Info_ParmsWToVariant(var R : TMCI_Info_ParmsW) : OleVariant;
var
__rw : __TMCI_Info_ParmsW__Wrapper__;
begin
__rw := __TMCI_Info_ParmsW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Info_ParmsW(const V : OleVariant) : TMCI_Info_ParmsW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Info_ParmsW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Load_Parms__Wrapper__ = class(__TMCI_Load_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Load_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Load_ParmsToVariant(var R : TMCI_Load_Parms) : OleVariant;
var
__rw : __TMCI_Load_Parms__Wrapper__;
begin
__rw := __TMCI_Load_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Load_Parms(const V : OleVariant) : TMCI_Load_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Load_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Load_ParmsA__Wrapper__ = class(__TMCI_Load_ParmsA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Load_ParmsA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Load_ParmsAToVariant(var R : TMCI_Load_ParmsA) : OleVariant;
var
__rw : __TMCI_Load_ParmsA__Wrapper__;
begin
__rw := __TMCI_Load_ParmsA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Load_ParmsA(const V : OleVariant) : TMCI_Load_ParmsA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Load_ParmsA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Load_ParmsW__Wrapper__ = class(__TMCI_Load_ParmsW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Load_ParmsW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Load_ParmsWToVariant(var R : TMCI_Load_ParmsW) : OleVariant;
var
__rw : __TMCI_Load_ParmsW__Wrapper__;
begin
__rw := __TMCI_Load_ParmsW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Load_ParmsW(const V : OleVariant) : TMCI_Load_ParmsW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Load_ParmsW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Open_Parms__Wrapper__ = class(__TMCI_Open_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Open_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Open_ParmsToVariant(var R : TMCI_Open_Parms) : OleVariant;
var
__rw : __TMCI_Open_Parms__Wrapper__;
begin
__rw := __TMCI_Open_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Open_Parms(const V : OleVariant) : TMCI_Open_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Open_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Open_ParmsA__Wrapper__ = class(__TMCI_Open_ParmsA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Open_ParmsA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Open_ParmsAToVariant(var R : TMCI_Open_ParmsA) : OleVariant;
var
__rw : __TMCI_Open_ParmsA__Wrapper__;
begin
__rw := __TMCI_Open_ParmsA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Open_ParmsA(const V : OleVariant) : TMCI_Open_ParmsA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Open_ParmsA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Open_ParmsW__Wrapper__ = class(__TMCI_Open_ParmsW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Open_ParmsW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Open_ParmsWToVariant(var R : TMCI_Open_ParmsW) : OleVariant;
var
__rw : __TMCI_Open_ParmsW__Wrapper__;
begin
__rw := __TMCI_Open_ParmsW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Open_ParmsW(const V : OleVariant) : TMCI_Open_ParmsW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Open_ParmsW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Ovly_Load_Parms__Wrapper__ = class(__TMCI_Ovly_Load_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Ovly_Load_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Ovly_Load_ParmsToVariant(var R : TMCI_Ovly_Load_Parms) : OleVariant;
var
__rw : __TMCI_Ovly_Load_Parms__Wrapper__;
begin
__rw := __TMCI_Ovly_Load_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Ovly_Load_Parms(const V : OleVariant) : TMCI_Ovly_Load_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Ovly_Load_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Ovly_Load_ParmsA__Wrapper__ = class(__TMCI_Ovly_Load_ParmsA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Ovly_Load_ParmsA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Ovly_Load_ParmsAToVariant(var R : TMCI_Ovly_Load_ParmsA) : OleVariant;
var
__rw : __TMCI_Ovly_Load_ParmsA__Wrapper__;
begin
__rw := __TMCI_Ovly_Load_ParmsA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Ovly_Load_ParmsA(const V : OleVariant) : TMCI_Ovly_Load_ParmsA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Ovly_Load_ParmsA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Ovly_Load_ParmsW__Wrapper__ = class(__TMCI_Ovly_Load_ParmsW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Ovly_Load_ParmsW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Ovly_Load_ParmsWToVariant(var R : TMCI_Ovly_Load_ParmsW) : OleVariant;
var
__rw : __TMCI_Ovly_Load_ParmsW__Wrapper__;
begin
__rw := __TMCI_Ovly_Load_ParmsW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Ovly_Load_ParmsW(const V : OleVariant) : TMCI_Ovly_Load_ParmsW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Ovly_Load_ParmsW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Ovly_Open_Parms__Wrapper__ = class(__TMCI_Ovly_Open_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Ovly_Open_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Ovly_Open_ParmsToVariant(var R : TMCI_Ovly_Open_Parms) : OleVariant;
var
__rw : __TMCI_Ovly_Open_Parms__Wrapper__;
begin
__rw := __TMCI_Ovly_Open_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Ovly_Open_Parms(const V : OleVariant) : TMCI_Ovly_Open_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Ovly_Open_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Ovly_Open_ParmsA__Wrapper__ = class(__TMCI_Ovly_Open_ParmsA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Ovly_Open_ParmsA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Ovly_Open_ParmsAToVariant(var R : TMCI_Ovly_Open_ParmsA) : OleVariant;
var
__rw : __TMCI_Ovly_Open_ParmsA__Wrapper__;
begin
__rw := __TMCI_Ovly_Open_ParmsA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Ovly_Open_ParmsA(const V : OleVariant) : TMCI_Ovly_Open_ParmsA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Ovly_Open_ParmsA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Ovly_Open_ParmsW__Wrapper__ = class(__TMCI_Ovly_Open_ParmsW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Ovly_Open_ParmsW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Ovly_Open_ParmsWToVariant(var R : TMCI_Ovly_Open_ParmsW) : OleVariant;
var
__rw : __TMCI_Ovly_Open_ParmsW__Wrapper__;
begin
__rw := __TMCI_Ovly_Open_ParmsW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Ovly_Open_ParmsW(const V : OleVariant) : TMCI_Ovly_Open_ParmsW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Ovly_Open_ParmsW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Ovly_Rect_Parms__Wrapper__ = class(__TMCI_Ovly_Rect_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Ovly_Rect_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Ovly_Rect_ParmsToVariant(var R : TMCI_Ovly_Rect_Parms) : OleVariant;
var
__rw : __TMCI_Ovly_Rect_Parms__Wrapper__;
begin
__rw := __TMCI_Ovly_Rect_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Ovly_Rect_Parms(const V : OleVariant) : TMCI_Ovly_Rect_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Ovly_Rect_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Ovly_Save_Parms__Wrapper__ = class(__TMCI_Ovly_Save_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Ovly_Save_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Ovly_Save_ParmsToVariant(var R : TMCI_Ovly_Save_Parms) : OleVariant;
var
__rw : __TMCI_Ovly_Save_Parms__Wrapper__;
begin
__rw := __TMCI_Ovly_Save_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Ovly_Save_Parms(const V : OleVariant) : TMCI_Ovly_Save_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Ovly_Save_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Ovly_Save_ParmsA__Wrapper__ = class(__TMCI_Ovly_Save_ParmsA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Ovly_Save_ParmsA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Ovly_Save_ParmsAToVariant(var R : TMCI_Ovly_Save_ParmsA) : OleVariant;
var
__rw : __TMCI_Ovly_Save_ParmsA__Wrapper__;
begin
__rw := __TMCI_Ovly_Save_ParmsA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Ovly_Save_ParmsA(const V : OleVariant) : TMCI_Ovly_Save_ParmsA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Ovly_Save_ParmsA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Ovly_Save_ParmsW__Wrapper__ = class(__TMCI_Ovly_Save_ParmsW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Ovly_Save_ParmsW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Ovly_Save_ParmsWToVariant(var R : TMCI_Ovly_Save_ParmsW) : OleVariant;
var
__rw : __TMCI_Ovly_Save_ParmsW__Wrapper__;
begin
__rw := __TMCI_Ovly_Save_ParmsW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Ovly_Save_ParmsW(const V : OleVariant) : TMCI_Ovly_Save_ParmsW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Ovly_Save_ParmsW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Ovly_Window_Parms__Wrapper__ = class(__TMCI_Ovly_Window_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Ovly_Window_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Ovly_Window_ParmsToVariant(var R : TMCI_Ovly_Window_Parms) : OleVariant;
var
__rw : __TMCI_Ovly_Window_Parms__Wrapper__;
begin
__rw := __TMCI_Ovly_Window_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Ovly_Window_Parms(const V : OleVariant) : TMCI_Ovly_Window_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Ovly_Window_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Ovly_Window_ParmsA__Wrapper__ = class(__TMCI_Ovly_Window_ParmsA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Ovly_Window_ParmsA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Ovly_Window_ParmsAToVariant(var R : TMCI_Ovly_Window_ParmsA) : OleVariant;
var
__rw : __TMCI_Ovly_Window_ParmsA__Wrapper__;
begin
__rw := __TMCI_Ovly_Window_ParmsA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Ovly_Window_ParmsA(const V : OleVariant) : TMCI_Ovly_Window_ParmsA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Ovly_Window_ParmsA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Ovly_Window_ParmsW__Wrapper__ = class(__TMCI_Ovly_Window_ParmsW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Ovly_Window_ParmsW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Ovly_Window_ParmsWToVariant(var R : TMCI_Ovly_Window_ParmsW) : OleVariant;
var
__rw : __TMCI_Ovly_Window_ParmsW__Wrapper__;
begin
__rw := __TMCI_Ovly_Window_ParmsW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Ovly_Window_ParmsW(const V : OleVariant) : TMCI_Ovly_Window_ParmsW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Ovly_Window_ParmsW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Play_Parms__Wrapper__ = class(__TMCI_Play_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Play_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Play_ParmsToVariant(var R : TMCI_Play_Parms) : OleVariant;
var
__rw : __TMCI_Play_Parms__Wrapper__;
begin
__rw := __TMCI_Play_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Play_Parms(const V : OleVariant) : TMCI_Play_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Play_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Record_Parms__Wrapper__ = class(__TMCI_Record_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Record_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Record_ParmsToVariant(var R : TMCI_Record_Parms) : OleVariant;
var
__rw : __TMCI_Record_Parms__Wrapper__;
begin
__rw := __TMCI_Record_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Record_Parms(const V : OleVariant) : TMCI_Record_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Record_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_SaveParms__Wrapper__ = class(__TMCI_SaveParms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_SaveParms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_SaveParmsToVariant(var R : TMCI_SaveParms) : OleVariant;
var
__rw : __TMCI_SaveParms__Wrapper__;
begin
__rw := __TMCI_SaveParms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_SaveParms(const V : OleVariant) : TMCI_SaveParms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_SaveParms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_SaveParmsA__Wrapper__ = class(__TMCI_SaveParmsA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_SaveParmsA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_SaveParmsAToVariant(var R : TMCI_SaveParmsA) : OleVariant;
var
__rw : __TMCI_SaveParmsA__Wrapper__;
begin
__rw := __TMCI_SaveParmsA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_SaveParmsA(const V : OleVariant) : TMCI_SaveParmsA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_SaveParmsA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_SaveParmsW__Wrapper__ = class(__TMCI_SaveParmsW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_SaveParmsW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_SaveParmsWToVariant(var R : TMCI_SaveParmsW) : OleVariant;
var
__rw : __TMCI_SaveParmsW__Wrapper__;
begin
__rw := __TMCI_SaveParmsW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_SaveParmsW(const V : OleVariant) : TMCI_SaveParmsW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_SaveParmsW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Seek_Parms__Wrapper__ = class(__TMCI_Seek_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Seek_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Seek_ParmsToVariant(var R : TMCI_Seek_Parms) : OleVariant;
var
__rw : __TMCI_Seek_Parms__Wrapper__;
begin
__rw := __TMCI_Seek_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Seek_Parms(const V : OleVariant) : TMCI_Seek_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Seek_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Seq_Set_Parms__Wrapper__ = class(__TMCI_Seq_Set_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Seq_Set_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Seq_Set_ParmsToVariant(var R : TMCI_Seq_Set_Parms) : OleVariant;
var
__rw : __TMCI_Seq_Set_Parms__Wrapper__;
begin
__rw := __TMCI_Seq_Set_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Seq_Set_Parms(const V : OleVariant) : TMCI_Seq_Set_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Seq_Set_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Set_Parms__Wrapper__ = class(__TMCI_Set_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Set_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Set_ParmsToVariant(var R : TMCI_Set_Parms) : OleVariant;
var
__rw : __TMCI_Set_Parms__Wrapper__;
begin
__rw := __TMCI_Set_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Set_Parms(const V : OleVariant) : TMCI_Set_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Set_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Sound_Parms__Wrapper__ = class(__TMCI_Sound_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Sound_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Sound_ParmsToVariant(var R : TMCI_Sound_Parms) : OleVariant;
var
__rw : __TMCI_Sound_Parms__Wrapper__;
begin
__rw := __TMCI_Sound_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Sound_Parms(const V : OleVariant) : TMCI_Sound_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Sound_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Status_Parms__Wrapper__ = class(__TMCI_Status_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Status_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Status_ParmsToVariant(var R : TMCI_Status_Parms) : OleVariant;
var
__rw : __TMCI_Status_Parms__Wrapper__;
begin
__rw := __TMCI_Status_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Status_Parms(const V : OleVariant) : TMCI_Status_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Status_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_SysInfo_Parms__Wrapper__ = class(__TMCI_SysInfo_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_SysInfo_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_SysInfo_ParmsToVariant(var R : TMCI_SysInfo_Parms) : OleVariant;
var
__rw : __TMCI_SysInfo_Parms__Wrapper__;
begin
__rw := __TMCI_SysInfo_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_SysInfo_Parms(const V : OleVariant) : TMCI_SysInfo_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_SysInfo_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_SysInfo_ParmsA__Wrapper__ = class(__TMCI_SysInfo_ParmsA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_SysInfo_ParmsA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_SysInfo_ParmsAToVariant(var R : TMCI_SysInfo_ParmsA) : OleVariant;
var
__rw : __TMCI_SysInfo_ParmsA__Wrapper__;
begin
__rw := __TMCI_SysInfo_ParmsA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_SysInfo_ParmsA(const V : OleVariant) : TMCI_SysInfo_ParmsA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_SysInfo_ParmsA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_SysInfo_ParmsW__Wrapper__ = class(__TMCI_SysInfo_ParmsW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_SysInfo_ParmsW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_SysInfo_ParmsWToVariant(var R : TMCI_SysInfo_ParmsW) : OleVariant;
var
__rw : __TMCI_SysInfo_ParmsW__Wrapper__;
begin
__rw := __TMCI_SysInfo_ParmsW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_SysInfo_ParmsW(const V : OleVariant) : TMCI_SysInfo_ParmsW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_SysInfo_ParmsW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_VD_Escape_Parms__Wrapper__ = class(__TMCI_VD_Escape_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_VD_Escape_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_VD_Escape_ParmsToVariant(var R : TMCI_VD_Escape_Parms) : OleVariant;
var
__rw : __TMCI_VD_Escape_Parms__Wrapper__;
begin
__rw := __TMCI_VD_Escape_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_VD_Escape_Parms(const V : OleVariant) : TMCI_VD_Escape_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_VD_Escape_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_VD_Escape_ParmsA__Wrapper__ = class(__TMCI_VD_Escape_ParmsA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_VD_Escape_ParmsA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_VD_Escape_ParmsAToVariant(var R : TMCI_VD_Escape_ParmsA) : OleVariant;
var
__rw : __TMCI_VD_Escape_ParmsA__Wrapper__;
begin
__rw := __TMCI_VD_Escape_ParmsA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_VD_Escape_ParmsA(const V : OleVariant) : TMCI_VD_Escape_ParmsA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_VD_Escape_ParmsA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_VD_Escape_ParmsW__Wrapper__ = class(__TMCI_VD_Escape_ParmsW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_VD_Escape_ParmsW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_VD_Escape_ParmsWToVariant(var R : TMCI_VD_Escape_ParmsW) : OleVariant;
var
__rw : __TMCI_VD_Escape_ParmsW__Wrapper__;
begin
__rw := __TMCI_VD_Escape_ParmsW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_VD_Escape_ParmsW(const V : OleVariant) : TMCI_VD_Escape_ParmsW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_VD_Escape_ParmsW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_VD_Play_Parms__Wrapper__ = class(__TMCI_VD_Play_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_VD_Play_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_VD_Play_ParmsToVariant(var R : TMCI_VD_Play_Parms) : OleVariant;
var
__rw : __TMCI_VD_Play_Parms__Wrapper__;
begin
__rw := __TMCI_VD_Play_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_VD_Play_Parms(const V : OleVariant) : TMCI_VD_Play_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_VD_Play_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_VD_Step_Parms__Wrapper__ = class(__TMCI_VD_Step_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_VD_Step_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_VD_Step_ParmsToVariant(var R : TMCI_VD_Step_Parms) : OleVariant;
var
__rw : __TMCI_VD_Step_Parms__Wrapper__;
begin
__rw := __TMCI_VD_Step_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_VD_Step_Parms(const V : OleVariant) : TMCI_VD_Step_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_VD_Step_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Wave_Delete_Parms__Wrapper__ = class(__TMCI_Wave_Delete_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Wave_Delete_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Wave_Delete_ParmsToVariant(var R : TMCI_Wave_Delete_Parms) : OleVariant;
var
__rw : __TMCI_Wave_Delete_Parms__Wrapper__;
begin
__rw := __TMCI_Wave_Delete_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Wave_Delete_Parms(const V : OleVariant) : TMCI_Wave_Delete_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Wave_Delete_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Wave_Open_Parms__Wrapper__ = class(__TMCI_Wave_Open_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Wave_Open_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Wave_Open_ParmsToVariant(var R : TMCI_Wave_Open_Parms) : OleVariant;
var
__rw : __TMCI_Wave_Open_Parms__Wrapper__;
begin
__rw := __TMCI_Wave_Open_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Wave_Open_Parms(const V : OleVariant) : TMCI_Wave_Open_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Wave_Open_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Wave_Open_ParmsA__Wrapper__ = class(__TMCI_Wave_Open_ParmsA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Wave_Open_ParmsA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Wave_Open_ParmsAToVariant(var R : TMCI_Wave_Open_ParmsA) : OleVariant;
var
__rw : __TMCI_Wave_Open_ParmsA__Wrapper__;
begin
__rw := __TMCI_Wave_Open_ParmsA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Wave_Open_ParmsA(const V : OleVariant) : TMCI_Wave_Open_ParmsA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Wave_Open_ParmsA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Wave_Open_ParmsW__Wrapper__ = class(__TMCI_Wave_Open_ParmsW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Wave_Open_ParmsW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Wave_Open_ParmsWToVariant(var R : TMCI_Wave_Open_ParmsW) : OleVariant;
var
__rw : __TMCI_Wave_Open_ParmsW__Wrapper__;
begin
__rw := __TMCI_Wave_Open_ParmsW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Wave_Open_ParmsW(const V : OleVariant) : TMCI_Wave_Open_ParmsW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Wave_Open_ParmsW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMCI_Wave_Set_Parms__Wrapper__ = class(__TMCI_Wave_Set_Parms__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMCI_Wave_Set_Parms__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMCI_Wave_Set_ParmsToVariant(var R : TMCI_Wave_Set_Parms) : OleVariant;
var
__rw : __TMCI_Wave_Set_Parms__Wrapper__;
begin
__rw := __TMCI_Wave_Set_Parms__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMCI_Wave_Set_Parms(const V : OleVariant) : TMCI_Wave_Set_Parms;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMCI_Wave_Set_Parms((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMidiEvent__Wrapper__ = class(__TMidiEvent__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMidiEvent__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMidiEventToVariant(var R : TMidiEvent) : OleVariant;
var
__rw : __TMidiEvent__Wrapper__;
begin
__rw := __TMidiEvent__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMidiEvent(const V : OleVariant) : TMidiEvent;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMidiEvent((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMidiHdr__Wrapper__ = class(__TMidiHdr__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMidiHdr__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMidiHdrToVariant(var R : TMidiHdr) : OleVariant;
var
__rw : __TMidiHdr__Wrapper__;
begin
__rw := __TMidiHdr__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMidiHdr(const V : OleVariant) : TMidiHdr;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMidiHdr((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMidiInCaps__Wrapper__ = class(__TMidiInCaps__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMidiInCaps__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMidiInCapsToVariant(var R : TMidiInCaps) : OleVariant;
var
__rw : __TMidiInCaps__Wrapper__;
begin
__rw := __TMidiInCaps__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMidiInCaps(const V : OleVariant) : TMidiInCaps;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMidiInCaps((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMidiInCapsA__Wrapper__ = class(__TMidiInCapsA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMidiInCapsA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMidiInCapsAToVariant(var R : TMidiInCapsA) : OleVariant;
var
__rw : __TMidiInCapsA__Wrapper__;
begin
__rw := __TMidiInCapsA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMidiInCapsA(const V : OleVariant) : TMidiInCapsA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMidiInCapsA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMidiInCapsW__Wrapper__ = class(__TMidiInCapsW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMidiInCapsW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMidiInCapsWToVariant(var R : TMidiInCapsW) : OleVariant;
var
__rw : __TMidiInCapsW__Wrapper__;
begin
__rw := __TMidiInCapsW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMidiInCapsW(const V : OleVariant) : TMidiInCapsW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMidiInCapsW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMidiOutCaps__Wrapper__ = class(__TMidiOutCaps__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMidiOutCaps__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMidiOutCapsToVariant(var R : TMidiOutCaps) : OleVariant;
var
__rw : __TMidiOutCaps__Wrapper__;
begin
__rw := __TMidiOutCaps__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMidiOutCaps(const V : OleVariant) : TMidiOutCaps;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMidiOutCaps((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMidiOutCapsA__Wrapper__ = class(__TMidiOutCapsA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMidiOutCapsA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMidiOutCapsAToVariant(var R : TMidiOutCapsA) : OleVariant;
var
__rw : __TMidiOutCapsA__Wrapper__;
begin
__rw := __TMidiOutCapsA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMidiOutCapsA(const V : OleVariant) : TMidiOutCapsA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMidiOutCapsA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMidiOutCapsW__Wrapper__ = class(__TMidiOutCapsW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMidiOutCapsW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMidiOutCapsWToVariant(var R : TMidiOutCapsW) : OleVariant;
var
__rw : __TMidiOutCapsW__Wrapper__;
begin
__rw := __TMidiOutCapsW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMidiOutCapsW(const V : OleVariant) : TMidiOutCapsW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMidiOutCapsW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMidiPropTempo__Wrapper__ = class(__TMidiPropTempo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMidiPropTempo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMidiPropTempoToVariant(var R : TMidiPropTempo) : OleVariant;
var
__rw : __TMidiPropTempo__Wrapper__;
begin
__rw := __TMidiPropTempo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMidiPropTempo(const V : OleVariant) : TMidiPropTempo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMidiPropTempo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMidiPropTimeDiv__Wrapper__ = class(__TMidiPropTimeDiv__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMidiPropTimeDiv__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMidiPropTimeDivToVariant(var R : TMidiPropTimeDiv) : OleVariant;
var
__rw : __TMidiPropTimeDiv__Wrapper__;
begin
__rw := __TMidiPropTimeDiv__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMidiPropTimeDiv(const V : OleVariant) : TMidiPropTimeDiv;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMidiPropTimeDiv((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMidiStrmBuffVer__Wrapper__ = class(__TMidiStrmBuffVer__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMidiStrmBuffVer__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMidiStrmBuffVerToVariant(var R : TMidiStrmBuffVer) : OleVariant;
var
__rw : __TMidiStrmBuffVer__Wrapper__;
begin
__rw := __TMidiStrmBuffVer__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMidiStrmBuffVer(const V : OleVariant) : TMidiStrmBuffVer;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMidiStrmBuffVer((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMixerCaps__Wrapper__ = class(__TMixerCaps__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMixerCaps__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMixerCapsToVariant(var R : TMixerCaps) : OleVariant;
var
__rw : __TMixerCaps__Wrapper__;
begin
__rw := __TMixerCaps__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMixerCaps(const V : OleVariant) : TMixerCaps;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMixerCaps((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMixerCapsA__Wrapper__ = class(__TMixerCapsA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMixerCapsA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMixerCapsAToVariant(var R : TMixerCapsA) : OleVariant;
var
__rw : __TMixerCapsA__Wrapper__;
begin
__rw := __TMixerCapsA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMixerCapsA(const V : OleVariant) : TMixerCapsA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMixerCapsA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMixerCapsW__Wrapper__ = class(__TMixerCapsW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMixerCapsW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMixerCapsWToVariant(var R : TMixerCapsW) : OleVariant;
var
__rw : __TMixerCapsW__Wrapper__;
begin
__rw := __TMixerCapsW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMixerCapsW(const V : OleVariant) : TMixerCapsW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMixerCapsW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tMIXERCONTROLDETAILS__Wrapper__ = class(__tMIXERCONTROLDETAILS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tMIXERCONTROLDETAILS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttMIXERCONTROLDETAILSToVariant(var R : tMIXERCONTROLDETAILS) : OleVariant;
var
__rw : __tMIXERCONTROLDETAILS__Wrapper__;
begin
__rw := __tMIXERCONTROLDETAILS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotMIXERCONTROLDETAILS(const V : OleVariant) : tMIXERCONTROLDETAILS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tMIXERCONTROLDETAILS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tMIXERCONTROLDETAILS_BOOLEAN__Wrapper__ = class(__tMIXERCONTROLDETAILS_BOOLEAN__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tMIXERCONTROLDETAILS_BOOLEAN__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttMIXERCONTROLDETAILS_BOOLEANToVariant(var R : tMIXERCONTROLDETAILS_BOOLEAN) : OleVariant;
var
__rw : __tMIXERCONTROLDETAILS_BOOLEAN__Wrapper__;
begin
__rw := __tMIXERCONTROLDETAILS_BOOLEAN__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotMIXERCONTROLDETAILS_BOOLEAN(const V : OleVariant) : tMIXERCONTROLDETAILS_BOOLEAN;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tMIXERCONTROLDETAILS_BOOLEAN((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tMIXERCONTROLDETAILS_SIGNED__Wrapper__ = class(__tMIXERCONTROLDETAILS_SIGNED__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tMIXERCONTROLDETAILS_SIGNED__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttMIXERCONTROLDETAILS_SIGNEDToVariant(var R : tMIXERCONTROLDETAILS_SIGNED) : OleVariant;
var
__rw : __tMIXERCONTROLDETAILS_SIGNED__Wrapper__;
begin
__rw := __tMIXERCONTROLDETAILS_SIGNED__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotMIXERCONTROLDETAILS_SIGNED(const V : OleVariant) : tMIXERCONTROLDETAILS_SIGNED;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tMIXERCONTROLDETAILS_SIGNED((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tMIXERCONTROLDETAILS_UNSIGNED__Wrapper__ = class(__tMIXERCONTROLDETAILS_UNSIGNED__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tMIXERCONTROLDETAILS_UNSIGNED__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttMIXERCONTROLDETAILS_UNSIGNEDToVariant(var R : tMIXERCONTROLDETAILS_UNSIGNED) : OleVariant;
var
__rw : __tMIXERCONTROLDETAILS_UNSIGNED__Wrapper__;
begin
__rw := __tMIXERCONTROLDETAILS_UNSIGNED__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotMIXERCONTROLDETAILS_UNSIGNED(const V : OleVariant) : tMIXERCONTROLDETAILS_UNSIGNED;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tMIXERCONTROLDETAILS_UNSIGNED((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMixerControlDetailsBoolean__Wrapper__ = class(__TMixerControlDetailsBoolean__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMixerControlDetailsBoolean__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMixerControlDetailsBooleanToVariant(var R : TMixerControlDetailsBoolean) : OleVariant;
var
__rw : __TMixerControlDetailsBoolean__Wrapper__;
begin
__rw := __TMixerControlDetailsBoolean__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMixerControlDetailsBoolean(const V : OleVariant) : TMixerControlDetailsBoolean;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMixerControlDetailsBoolean((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMixerControlDetailsListText__Wrapper__ = class(__TMixerControlDetailsListText__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMixerControlDetailsListText__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMixerControlDetailsListTextToVariant(var R : TMixerControlDetailsListText) : OleVariant;
var
__rw : __TMixerControlDetailsListText__Wrapper__;
begin
__rw := __TMixerControlDetailsListText__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMixerControlDetailsListText(const V : OleVariant) : TMixerControlDetailsListText;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMixerControlDetailsListText((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMixerControlDetailsListTextA__Wrapper__ = class(__TMixerControlDetailsListTextA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMixerControlDetailsListTextA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMixerControlDetailsListTextAToVariant(var R : TMixerControlDetailsListTextA) : OleVariant;
var
__rw : __TMixerControlDetailsListTextA__Wrapper__;
begin
__rw := __TMixerControlDetailsListTextA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMixerControlDetailsListTextA(const V : OleVariant) : TMixerControlDetailsListTextA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMixerControlDetailsListTextA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMixerControlDetailsListTextW__Wrapper__ = class(__TMixerControlDetailsListTextW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMixerControlDetailsListTextW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMixerControlDetailsListTextWToVariant(var R : TMixerControlDetailsListTextW) : OleVariant;
var
__rw : __TMixerControlDetailsListTextW__Wrapper__;
begin
__rw := __TMixerControlDetailsListTextW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMixerControlDetailsListTextW(const V : OleVariant) : TMixerControlDetailsListTextW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMixerControlDetailsListTextW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMixerControlDetailsSigned__Wrapper__ = class(__TMixerControlDetailsSigned__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMixerControlDetailsSigned__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMixerControlDetailsSignedToVariant(var R : TMixerControlDetailsSigned) : OleVariant;
var
__rw : __TMixerControlDetailsSigned__Wrapper__;
begin
__rw := __TMixerControlDetailsSigned__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMixerControlDetailsSigned(const V : OleVariant) : TMixerControlDetailsSigned;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMixerControlDetailsSigned((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMixerControlDetailsUnsigned__Wrapper__ = class(__TMixerControlDetailsUnsigned__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMixerControlDetailsUnsigned__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMixerControlDetailsUnsignedToVariant(var R : TMixerControlDetailsUnsigned) : OleVariant;
var
__rw : __TMixerControlDetailsUnsigned__Wrapper__;
begin
__rw := __TMixerControlDetailsUnsigned__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMixerControlDetailsUnsigned(const V : OleVariant) : TMixerControlDetailsUnsigned;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMixerControlDetailsUnsigned((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMixerLine__Wrapper__ = class(__TMixerLine__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMixerLine__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMixerLineToVariant(var R : TMixerLine) : OleVariant;
var
__rw : __TMixerLine__Wrapper__;
begin
__rw := __TMixerLine__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMixerLine(const V : OleVariant) : TMixerLine;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMixerLine((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMixerLineA__Wrapper__ = class(__TMixerLineA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMixerLineA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMixerLineAToVariant(var R : TMixerLineA) : OleVariant;
var
__rw : __TMixerLineA__Wrapper__;
begin
__rw := __TMixerLineA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMixerLineA(const V : OleVariant) : TMixerLineA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMixerLineA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMixerLineControls__Wrapper__ = class(__TMixerLineControls__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMixerLineControls__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMixerLineControlsToVariant(var R : TMixerLineControls) : OleVariant;
var
__rw : __TMixerLineControls__Wrapper__;
begin
__rw := __TMixerLineControls__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMixerLineControls(const V : OleVariant) : TMixerLineControls;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMixerLineControls((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMixerLineControlsA__Wrapper__ = class(__TMixerLineControlsA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMixerLineControlsA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMixerLineControlsAToVariant(var R : TMixerLineControlsA) : OleVariant;
var
__rw : __TMixerLineControlsA__Wrapper__;
begin
__rw := __TMixerLineControlsA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMixerLineControlsA(const V : OleVariant) : TMixerLineControlsA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMixerLineControlsA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMixerLineControlsW__Wrapper__ = class(__TMixerLineControlsW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMixerLineControlsW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMixerLineControlsWToVariant(var R : TMixerLineControlsW) : OleVariant;
var
__rw : __TMixerLineControlsW__Wrapper__;
begin
__rw := __TMixerLineControlsW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMixerLineControlsW(const V : OleVariant) : TMixerLineControlsW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMixerLineControlsW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMixerLineW__Wrapper__ = class(__TMixerLineW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMixerLineW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMixerLineWToVariant(var R : TMixerLineW) : OleVariant;
var
__rw : __TMixerLineW__Wrapper__;
begin
__rw := __TMixerLineW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMixerLineW(const V : OleVariant) : TMixerLineW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMixerLineW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMMCKInfo__Wrapper__ = class(__TMMCKInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMMCKInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMMCKInfoToVariant(var R : TMMCKInfo) : OleVariant;
var
__rw : __TMMCKInfo__Wrapper__;
begin
__rw := __TMMCKInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMMCKInfo(const V : OleVariant) : TMMCKInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMMCKInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMMIOInfo__Wrapper__ = class(__TMMIOInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMMIOInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMMIOInfoToVariant(var R : TMMIOInfo) : OleVariant;
var
__rw : __TMMIOInfo__Wrapper__;
begin
__rw := __TMMIOInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMMIOInfo(const V : OleVariant) : TMMIOInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMMIOInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMMTime__Wrapper__ = class(__TMMTime__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMMTime__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMMTimeToVariant(var R : TMMTime) : OleVariant;
var
__rw : __TMMTime__Wrapper__;
begin
__rw := __TMMTime__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMMTime(const V : OleVariant) : TMMTime;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMMTime((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPCMWaveFormat__Wrapper__ = class(__TPCMWaveFormat__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPCMWaveFormat__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPCMWaveFormatToVariant(var R : TPCMWaveFormat) : OleVariant;
var
__rw : __TPCMWaveFormat__Wrapper__;
begin
__rw := __TPCMWaveFormat__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPCMWaveFormat(const V : OleVariant) : TPCMWaveFormat;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPCMWaveFormat((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTimeCaps__Wrapper__ = class(__TTimeCaps__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTimeCaps__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTimeCapsToVariant(var R : TTimeCaps) : OleVariant;
var
__rw : __TTimeCaps__Wrapper__;
begin
__rw := __TTimeCaps__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTimeCaps(const V : OleVariant) : TTimeCaps;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTimeCaps((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWaveFormat__Wrapper__ = class(__TWaveFormat__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWaveFormat__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWaveFormatToVariant(var R : TWaveFormat) : OleVariant;
var
__rw : __TWaveFormat__Wrapper__;
begin
__rw := __TWaveFormat__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWaveFormat(const V : OleVariant) : TWaveFormat;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWaveFormat((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tWAVEFORMATEX__Wrapper__ = class(__tWAVEFORMATEX__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tWAVEFORMATEX__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttWAVEFORMATEXToVariant(var R : tWAVEFORMATEX) : OleVariant;
var
__rw : __tWAVEFORMATEX__Wrapper__;
begin
__rw := __tWAVEFORMATEX__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotWAVEFORMATEX(const V : OleVariant) : tWAVEFORMATEX;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tWAVEFORMATEX((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWaveHdr__Wrapper__ = class(__TWaveHdr__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWaveHdr__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWaveHdrToVariant(var R : TWaveHdr) : OleVariant;
var
__rw : __TWaveHdr__Wrapper__;
begin
__rw := __TWaveHdr__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWaveHdr(const V : OleVariant) : TWaveHdr;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWaveHdr((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWaveInCaps__Wrapper__ = class(__TWaveInCaps__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWaveInCaps__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWaveInCapsToVariant(var R : TWaveInCaps) : OleVariant;
var
__rw : __TWaveInCaps__Wrapper__;
begin
__rw := __TWaveInCaps__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWaveInCaps(const V : OleVariant) : TWaveInCaps;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWaveInCaps((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWaveInCapsA__Wrapper__ = class(__TWaveInCapsA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWaveInCapsA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWaveInCapsAToVariant(var R : TWaveInCapsA) : OleVariant;
var
__rw : __TWaveInCapsA__Wrapper__;
begin
__rw := __TWaveInCapsA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWaveInCapsA(const V : OleVariant) : TWaveInCapsA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWaveInCapsA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWaveInCapsW__Wrapper__ = class(__TWaveInCapsW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWaveInCapsW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWaveInCapsWToVariant(var R : TWaveInCapsW) : OleVariant;
var
__rw : __TWaveInCapsW__Wrapper__;
begin
__rw := __TWaveInCapsW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWaveInCapsW(const V : OleVariant) : TWaveInCapsW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWaveInCapsW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWaveOutCaps__Wrapper__ = class(__TWaveOutCaps__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWaveOutCaps__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWaveOutCapsToVariant(var R : TWaveOutCaps) : OleVariant;
var
__rw : __TWaveOutCaps__Wrapper__;
begin
__rw := __TWaveOutCaps__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWaveOutCaps(const V : OleVariant) : TWaveOutCaps;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWaveOutCaps((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWaveOutCapsA__Wrapper__ = class(__TWaveOutCapsA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWaveOutCapsA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWaveOutCapsAToVariant(var R : TWaveOutCapsA) : OleVariant;
var
__rw : __TWaveOutCapsA__Wrapper__;
begin
__rw := __TWaveOutCapsA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWaveOutCapsA(const V : OleVariant) : TWaveOutCapsA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWaveOutCapsA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWaveOutCapsW__Wrapper__ = class(__TWaveOutCapsW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWaveOutCapsW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWaveOutCapsWToVariant(var R : TWaveOutCapsW) : OleVariant;
var
__rw : __TWaveOutCapsW__Wrapper__;
begin
__rw := __TWaveOutCapsW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWaveOutCapsW(const V : OleVariant) : TWaveOutCapsW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWaveOutCapsW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __WAVEFORMAT__Wrapper__ = class(__WAVEFORMAT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __WAVEFORMAT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertWAVEFORMATToVariant(var R : WAVEFORMAT) : OleVariant;
var
__rw : __WAVEFORMAT__Wrapper__;
begin
__rw := __WAVEFORMAT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToWAVEFORMAT(const V : OleVariant) : WAVEFORMAT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := WAVEFORMAT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __waveformat_tag__Wrapper__ = class(__waveformat_tag__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __waveformat_tag__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convertwaveformat_tagToVariant(var R : waveformat_tag) : OleVariant;
var
__rw : __waveformat_tag__Wrapper__;
begin
__rw := __waveformat_tag__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTowaveformat_tag(const V : OleVariant) : waveformat_tag;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := waveformat_tag((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __WAVEHDR__Wrapper__ = class(__WAVEHDR__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __WAVEHDR__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertWAVEHDRToVariant(var R : WAVEHDR) : OleVariant;
var
__rw : __WAVEHDR__Wrapper__;
begin
__rw := __WAVEHDR__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToWAVEHDR(const V : OleVariant) : WAVEHDR;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := WAVEHDR((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __wavehdr_tag__Wrapper__ = class(__wavehdr_tag__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __wavehdr_tag__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convertwavehdr_tagToVariant(var R : wavehdr_tag) : OleVariant;
var
__rw : __wavehdr_tag__Wrapper__;
begin
__rw := __wavehdr_tag__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTowavehdr_tag(const V : OleVariant) : wavehdr_tag;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := wavehdr_tag((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __WAVEINCAPS__Wrapper__ = class(__WAVEINCAPS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __WAVEINCAPS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertWAVEINCAPSToVariant(var R : WAVEINCAPS) : OleVariant;
var
__rw : __WAVEINCAPS__Wrapper__;
begin
__rw := __WAVEINCAPS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToWAVEINCAPS(const V : OleVariant) : WAVEINCAPS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := WAVEINCAPS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __WAVEINCAPSA__Wrapper__ = class(__WAVEINCAPSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __WAVEINCAPSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertWAVEINCAPSAToVariant(var R : WAVEINCAPSA) : OleVariant;
var
__rw : __WAVEINCAPSA__Wrapper__;
begin
__rw := __WAVEINCAPSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToWAVEINCAPSA(const V : OleVariant) : WAVEINCAPSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := WAVEINCAPSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __WAVEINCAPSW__Wrapper__ = class(__WAVEINCAPSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __WAVEINCAPSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertWAVEINCAPSWToVariant(var R : WAVEINCAPSW) : OleVariant;
var
__rw : __WAVEINCAPSW__Wrapper__;
begin
__rw := __WAVEINCAPSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToWAVEINCAPSW(const V : OleVariant) : WAVEINCAPSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := WAVEINCAPSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __WAVEOUTCAPS__Wrapper__ = class(__WAVEOUTCAPS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __WAVEOUTCAPS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertWAVEOUTCAPSToVariant(var R : WAVEOUTCAPS) : OleVariant;
var
__rw : __WAVEOUTCAPS__Wrapper__;
begin
__rw := __WAVEOUTCAPS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToWAVEOUTCAPS(const V : OleVariant) : WAVEOUTCAPS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := WAVEOUTCAPS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __WAVEOUTCAPSA__Wrapper__ = class(__WAVEOUTCAPSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __WAVEOUTCAPSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertWAVEOUTCAPSAToVariant(var R : WAVEOUTCAPSA) : OleVariant;
var
__rw : __WAVEOUTCAPSA__Wrapper__;
begin
__rw := __WAVEOUTCAPSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToWAVEOUTCAPSA(const V : OleVariant) : WAVEOUTCAPSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := WAVEOUTCAPSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __WAVEOUTCAPSW__Wrapper__ = class(__WAVEOUTCAPSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __WAVEOUTCAPSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertWAVEOUTCAPSWToVariant(var R : WAVEOUTCAPSW) : OleVariant;
var
__rw : __WAVEOUTCAPSW__Wrapper__;
begin
__rw := __WAVEOUTCAPSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToWAVEOUTCAPSW(const V : OleVariant) : WAVEOUTCAPSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := WAVEOUTCAPSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..508] of string = (
'MAXPNAMELEN'
,'MAXERRORLENGTH'
,'MAX_JOYSTICKOEMVXDNAME'
,'MM_MICROSOFT'
,'MM_MIDI_MAPPER'
,'MM_WAVE_MAPPER'
,'MM_SNDBLST_MIDIOUT'
,'MM_SNDBLST_MIDIIN'
,'MM_SNDBLST_SYNTH'
,'MM_SNDBLST_WAVEOUT'
,'MM_SNDBLST_WAVEIN'
,'MM_ADLIB'
,'MM_MPU401_MIDIOUT'
,'MM_MPU401_MIDIIN'
,'MM_PC_JOYSTICK'
,'TIME_MS'
,'TIME_SAMPLES'
,'TIME_BYTES'
,'TIME_SMPTE'
,'TIME_MIDI'
,'TIME_TICKS'
,'MM_JOY1MOVE'
,'MM_JOY2MOVE'
,'MM_JOY1ZMOVE'
,'MM_JOY2ZMOVE'
,'MM_JOY1BUTTONDOWN'
,'MM_JOY2BUTTONDOWN'
,'MM_JOY1BUTTONUP'
,'MM_JOY2BUTTONUP'
,'MM_MCINOTIFY'
,'MM_WOM_OPEN'
,'MM_WOM_CLOSE'
,'MM_WOM_DONE'
,'MM_WIM_OPEN'
,'MM_WIM_CLOSE'
,'MM_WIM_DATA'
,'MM_MIM_OPEN'
,'MM_MIM_CLOSE'
,'MM_MIM_DATA'
,'MM_MIM_LONGDATA'
,'MM_MIM_ERROR'
,'MM_MIM_LONGERROR'
,'MM_MOM_OPEN'
,'MM_MOM_CLOSE'
,'MM_MOM_DONE'
,'MM_DRVM_OPEN'
,'MM_DRVM_CLOSE'
,'MM_DRVM_DATA'
,'MM_DRVM_ERROR'
,'MM_STREAM_OPEN'
,'MM_STREAM_CLOSE'
,'MM_STREAM_DONE'
,'MM_STREAM_ERROR'
,'MM_MOM_POSITIONCB'
,'MM_MCISIGNAL'
,'MM_MIM_MOREDATA'
,'MM_MIXM_LINE_CHANGE'
,'MM_MIXM_CONTROL_CHANGE'
,'MMSYSERR_BASE'
,'WAVERR_BASE'
,'MIDIERR_BASE'
,'TIMERR_BASE'
,'JOYERR_BASE'
,'MCIERR_BASE'
,'MIXERR_BASE'
,'MCI_STRING_OFFSET'
,'MCI_VD_OFFSET'
,'MCI_CD_OFFSET'
,'MCI_WAVE_OFFSET'
,'MCI_SEQ_OFFSET'
,'MMSYSERR_NOERROR'
,'MMSYSERR_ERROR'
,'MMSYSERR_BADDEVICEID'
,'MMSYSERR_NOTENABLED'
,'MMSYSERR_ALLOCATED'
,'MMSYSERR_INVALHANDLE'
,'MMSYSERR_NODRIVER'
,'MMSYSERR_NOMEM'
,'MMSYSERR_NOTSUPPORTED'
,'MMSYSERR_BADERRNUM'
,'MMSYSERR_INVALFLAG'
,'MMSYSERR_INVALPARAM'
,'MMSYSERR_HANDLEBUSY'
,'MMSYSERR_INVALIDALIAS'
,'MMSYSERR_BADDB'
,'MMSYSERR_KEYNOTFOUND'
,'MMSYSERR_READERROR'
,'MMSYSERR_WRITEERROR'
,'MMSYSERR_DELETEERROR'
,'MMSYSERR_VALNOTFOUND'
,'MMSYSERR_NODRIVERCB'
,'MMSYSERR_LASTERROR'
,'DRV_LOAD'
,'DRV_ENABLE'
,'DRV_OPEN'
,'DRV_CLOSE'
,'DRV_DISABLE'
,'DRV_FREE'
,'DRV_CONFIGURE'
,'DRV_QUERYCONFIGURE'
,'DRV_INSTALL'
,'DRV_REMOVE'
,'DRV_EXITSESSION'
,'DRV_POWER'
,'DRV_RESERVED'
,'DRV_USER'
,'DRVCNF_CANCEL'
,'DRVCNF_OK'
,'DRVCNF_RESTART'
,'DRV_CANCEL'
,'DRV_OK'
,'DRV_RESTART'
,'DRV_MCI_FIRST'
,'DRV_MCI_LAST'
,'CALLBACK_TYPEMASK'
,'CALLBACK_NULL'
,'CALLBACK_WINDOW'
,'CALLBACK_TASK'
,'CALLBACK_FUNCTION'
,'CALLBACK_THREAD'
,'CALLBACK_EVENT'
,'SND_SYNC'
,'SND_ASYNC'
,'SND_NODEFAULT'
,'SND_MEMORY'
,'SND_LOOP'
,'SND_NOSTOP'
,'SND_NOWAIT'
,'SND_ALIAS'
,'SND_ALIAS_ID'
,'SND_FILENAME'
,'SND_RESOURCE'
,'SND_PURGE'
,'SND_APPLICATION'
,'SND_ALIAS_START'
,'SND_ALIAS_SYSTEMASTERISK'
,'SND_ALIAS_SYSTEMQUESTION'
,'SND_ALIAS_SYSTEMHAND'
,'SND_ALIAS_SYSTEMEXIT'
,'SND_ALIAS_SYSTEMSTART'
,'SND_ALIAS_SYSTEMWELCOME'
,'SND_ALIAS_SYSTEMEXCLAMATION'
,'SND_ALIAS_SYSTEMDEFAULT'
,'WAVERR_BADFORMAT'
,'WAVERR_STILLPLAYING'
,'WAVERR_UNPREPARED'
,'WAVERR_SYNC'
,'WAVERR_LASTERROR'
,'WOM_OPEN'
,'WOM_CLOSE'
,'WOM_DONE'
,'WIM_OPEN'
,'WIM_CLOSE'
,'WIM_DATA'
,'WAVE_MAPPER'
,'WAVE_FORMAT_QUERY'
,'WAVE_ALLOWSYNC'
,'WAVE_MAPPED'
,'WHDR_DONE'
,'WHDR_PREPARED'
,'WHDR_BEGINLOOP'
,'WHDR_ENDLOOP'
,'WHDR_INQUEUE'
,'WAVECAPS_PITCH'
,'WAVECAPS_PLAYBACKRATE'
,'WAVECAPS_VOLUME'
,'WAVECAPS_LRVOLUME'
,'WAVECAPS_SYNC'
,'WAVECAPS_SAMPLEACCURATE'
,'WAVECAPS_DIRECTSOUND'
,'WAVE_INVALIDFORMAT'
,'WAVE_FORMAT_1M08'
,'WAVE_FORMAT_1S08'
,'WAVE_FORMAT_1M16'
,'WAVE_FORMAT_1S16'
,'WAVE_FORMAT_2M08'
,'WAVE_FORMAT_2S08'
,'WAVE_FORMAT_2M16'
,'WAVE_FORMAT_2S16'
,'WAVE_FORMAT_4M08'
,'WAVE_FORMAT_4S08'
,'WAVE_FORMAT_4M16'
,'WAVE_FORMAT_4S16'
,'WAVE_FORMAT_PCM'
,'MIDIERR_UNPREPARED'
,'MIDIERR_STILLPLAYING'
,'MIDIERR_NOMAP'
,'MIDIERR_NOTREADY'
,'MIDIERR_NODEVICE'
,'MIDIERR_INVALIDSETUP'
,'MIDIERR_BADOPENMODE'
,'MIDIERR_DONT_CONTINUE'
,'MIDIERR_LASTERROR'
,'MIDIPATCHSIZE'
,'MIM_OPEN'
,'MIM_CLOSE'
,'MIM_DATA'
,'MIM_LONGDATA'
,'MIM_ERROR'
,'MIM_LONGERROR'
,'MOM_OPEN'
,'MOM_CLOSE'
,'MOM_DONE'
,'MIM_MOREDATA'
,'MOM_POSITIONCB'
,'MIDIMAPPER'
,'MIDI_MAPPER'
,'MIDI_IO_STATUS'
,'MIDI_CACHE_ALL'
,'MIDI_CACHE_BESTFIT'
,'MIDI_CACHE_QUERY'
,'MIDI_UNCACHE'
,'MOD_MIDIPORT'
,'MOD_SYNTH'
,'MOD_SQSYNTH'
,'MOD_FMSYNTH'
,'MOD_MAPPER'
,'MIDICAPS_VOLUME'
,'MIDICAPS_LRVOLUME'
,'MIDICAPS_CACHE'
,'MIDICAPS_STREAM'
,'MHDR_DONE'
,'MHDR_PREPARED'
,'MHDR_INQUEUE'
,'MHDR_ISSTRM'
,'MEVT_F_SHORT'
,'MEVT_F_LONG'
,'MEVT_F_CALLBACK'
,'MEVT_SHORTMSG'
,'MEVT_TEMPO'
,'MEVT_NOP'
,'MEVT_LONGMSG'
,'MEVT_COMMENT'
,'MEVT_VERSION'
,'MIDISTRM_ERROR'
,'MIDIPROP_SET'
,'MIDIPROP_GET'
,'MIDIPROP_TIMEDIV'
,'MIDIPROP_TEMPO'
,'AUX_MAPPER'
,'AUXCAPS_CDAUDIO'
,'AUXCAPS_AUXIN'
,'AUXCAPS_VOLUME'
,'AUXCAPS_LRVOLUME'
,'MIXER_SHORT_NAME_CHARS'
,'MIXER_LONG_NAME_CHARS'
,'MIXERR_INVALLINE'
,'MIXERR_INVALCONTROL'
,'MIXERR_INVALVALUE'
,'MIXERR_LASTERROR'
,'MIXER_OBJECTF_HANDLE'
,'MIXER_OBJECTF_MIXER'
,'MIXER_OBJECTF_HMIXER'
,'MIXER_OBJECTF_WAVEOUT'
,'MIXER_OBJECTF_HWAVEOUT'
,'MIXER_OBJECTF_WAVEIN'
,'MIXER_OBJECTF_HWAVEIN'
,'MIXER_OBJECTF_MIDIOUT'
,'MIXER_OBJECTF_HMIDIOUT'
,'MIXER_OBJECTF_MIDIIN'
,'MIXER_OBJECTF_HMIDIIN'
,'MIXER_OBJECTF_AUX'
,'MIXERLINE_LINEF_ACTIVE'
,'MIXERLINE_LINEF_DISCONNECTED'
,'MIXERLINE_LINEF_SOURCE'
,'MIXERLINE_COMPONENTTYPE_DST_FIRST'
,'MIXERLINE_COMPONENTTYPE_DST_UNDEFINED'
,'MIXERLINE_COMPONENTTYPE_DST_DIGITAL'
,'MIXERLINE_COMPONENTTYPE_DST_LINE'
,'MIXERLINE_COMPONENTTYPE_DST_MONITOR'
,'MIXERLINE_COMPONENTTYPE_DST_SPEAKERS'
,'MIXERLINE_COMPONENTTYPE_DST_HEADPHONES'
,'MIXERLINE_COMPONENTTYPE_DST_TELEPHONE'
,'MIXERLINE_COMPONENTTYPE_DST_WAVEIN'
,'MIXERLINE_COMPONENTTYPE_DST_VOICEIN'
,'MIXERLINE_COMPONENTTYPE_DST_LAST'
,'MIXERLINE_COMPONENTTYPE_SRC_FIRST'
,'MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED'
,'MIXERLINE_COMPONENTTYPE_SRC_DIGITAL'
,'MIXERLINE_COMPONENTTYPE_SRC_LINE'
,'MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE'
,'MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER'
,'MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC'
,'MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE'
,'MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER'
,'MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT'
,'MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY'
,'MIXERLINE_COMPONENTTYPE_SRC_ANALOG'
,'MIXERLINE_COMPONENTTYPE_SRC_LAST'
,'MIXERLINE_TARGETTYPE_UNDEFINED'
,'MIXERLINE_TARGETTYPE_WAVEOUT'
,'MIXERLINE_TARGETTYPE_WAVEIN'
,'MIXERLINE_TARGETTYPE_MIDIOUT'
,'MIXERLINE_TARGETTYPE_MIDIIN'
,'MIXERLINE_TARGETTYPE_AUX'
,'MIXER_GETLINEINFOF_DESTINATION'
,'MIXER_GETLINEINFOF_SOURCE'
,'MIXER_GETLINEINFOF_LINEID'
,'MIXER_GETLINEINFOF_COMPONENTTYPE'
,'MIXER_GETLINEINFOF_TARGETTYPE'
,'MIXER_GETLINEINFOF_QUERYMASK'
,'MIXERCONTROL_CONTROLF_UNIFORM'
,'MIXERCONTROL_CONTROLF_MULTIPLE'
,'MIXERCONTROL_CONTROLF_DISABLED'
,'MIXERCONTROL_CT_CLASS_MASK'
,'MIXERCONTROL_CT_CLASS_CUSTOM'
,'MIXERCONTROL_CT_CLASS_METER'
,'MIXERCONTROL_CT_CLASS_SWITCH'
,'MIXERCONTROL_CT_CLASS_NUMBER'
,'MIXERCONTROL_CT_CLASS_SLIDER'
,'MIXERCONTROL_CT_CLASS_FADER'
,'MIXERCONTROL_CT_CLASS_TIME'
,'MIXERCONTROL_CT_CLASS_LIST'
,'MIXERCONTROL_CT_SUBCLASS_MASK'
,'MIXERCONTROL_CT_SC_SWITCH_BOOLEAN'
,'MIXERCONTROL_CT_SC_SWITCH_BUTTON'
,'MIXERCONTROL_CT_SC_METER_POLLED'
,'MIXERCONTROL_CT_SC_TIME_MICROSECS'
,'MIXERCONTROL_CT_SC_TIME_MILLISECS'
,'MIXERCONTROL_CT_SC_LIST_SINGLE'
,'MIXERCONTROL_CT_SC_LIST_MULTIPLE'
,'MIXERCONTROL_CT_UNITS_MASK'
,'MIXERCONTROL_CT_UNITS_CUSTOM'
,'MIXERCONTROL_CT_UNITS_BOOLEAN'
,'MIXERCONTROL_CT_UNITS_SIGNED'
,'MIXERCONTROL_CT_UNITS_UNSIGNED'
,'MIXERCONTROL_CT_UNITS_DECIBELS'
,'MIXERCONTROL_CT_UNITS_PERCENT'
,'MIXERCONTROL_CONTROLTYPE_CUSTOM'
,'MIXERCONTROL_CONTROLTYPE_BOOLEANMETER'
,'MIXERCONTROL_CONTROLTYPE_SIGNEDMETER'
,'MIXERCONTROL_CONTROLTYPE_PEAKMETER'
,'MIXERCONTROL_CONTROLTYPE_UNSIGNEDMETER'
,'MIXERCONTROL_CONTROLTYPE_BOOLEAN'
,'MIXERCONTROL_CONTROLTYPE_ONOFF'
,'MIXERCONTROL_CONTROLTYPE_MUTE'
,'MIXERCONTROL_CONTROLTYPE_MONO'
,'MIXERCONTROL_CONTROLTYPE_LOUDNESS'
,'MIXERCONTROL_CONTROLTYPE_STEREOENH'
,'MIXERCONTROL_CONTROLTYPE_BUTTON'
,'MIXERCONTROL_CONTROLTYPE_DECIBELS'
,'MIXERCONTROL_CONTROLTYPE_SIGNED'
,'MIXERCONTROL_CONTROLTYPE_UNSIGNED'
,'MIXERCONTROL_CONTROLTYPE_PERCENT'
,'MIXERCONTROL_CONTROLTYPE_SLIDER'
,'MIXERCONTROL_CONTROLTYPE_PAN'
,'MIXERCONTROL_CONTROLTYPE_QSOUNDPAN'
,'MIXERCONTROL_CONTROLTYPE_FADER'
,'MIXERCONTROL_CONTROLTYPE_VOLUME'
,'MIXERCONTROL_CONTROLTYPE_BASS'
,'MIXERCONTROL_CONTROLTYPE_TREBLE'
,'MIXERCONTROL_CONTROLTYPE_EQUALIZER'
,'MIXERCONTROL_CONTROLTYPE_SINGLESELECT'
,'MIXERCONTROL_CONTROLTYPE_MUX'
,'MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT'
,'MIXERCONTROL_CONTROLTYPE_MIXER'
,'MIXERCONTROL_CONTROLTYPE_MICROTIME'
,'MIXERCONTROL_CONTROLTYPE_MILLITIME'
,'MIXER_GETLINECONTROLSF_ALL'
,'MIXER_GETLINECONTROLSF_ONEBYID'
,'MIXER_GETLINECONTROLSF_ONEBYTYPE'
,'MIXER_GETLINECONTROLSF_QUERYMASK'
,'MIXER_GETCONTROLDETAILSF_VALUE'
,'MIXER_GETCONTROLDETAILSF_LISTTEXT'
,'MIXER_GETCONTROLDETAILSF_QUERYMASK'
,'MIXER_SETCONTROLDETAILSF_VALUE'
,'MIXER_SETCONTROLDETAILSF_CUSTOM'
,'MIXER_SETCONTROLDETAILSF_QUERYMASK'
,'TIMERR_NOERROR'
,'TIME_ONESHOT'
,'TIME_PERIODIC'
,'TIME_CALLBACK_FUNCTION'
,'TIME_CALLBACK_EVENT_SET'
,'TIME_CALLBACK_EVENT_PULSE'
,'JOYERR_NOERROR'
,'JOYERR_PARMS'
,'JOYERR_NOCANDO'
,'JOYERR_UNPLUGGED'
,'JOY_BUTTON1'
,'JOY_BUTTON2'
,'JOY_BUTTON3'
,'JOY_BUTTON4'
,'JOY_BUTTON1CHG'
,'JOY_BUTTON2CHG'
,'JOY_BUTTON3CHG'
,'JOY_BUTTON4CHG'
,'JOY_BUTTON5'
,'JOY_BUTTON6'
,'JOY_BUTTON7'
,'JOY_BUTTON8'
,'JOY_BUTTON9'
,'JOY_BUTTON10'
,'JOY_BUTTON11'
,'JOY_BUTTON12'
,'JOY_BUTTON13'
,'JOY_BUTTON14'
,'JOY_BUTTON15'
,'JOY_BUTTON16'
,'JOY_BUTTON17'
,'JOY_BUTTON18'
,'JOY_BUTTON19'
,'JOY_BUTTON20'
,'JOY_BUTTON21'
,'JOY_BUTTON22'
,'JOY_BUTTON23'
,'JOY_BUTTON24'
,'JOY_BUTTON25'
,'JOY_BUTTON26'
,'JOY_BUTTON27'
,'JOY_BUTTON28'
,'JOY_BUTTON29'
,'JOY_BUTTON30'
,'JOY_BUTTON31'
,'JOY_BUTTON32'
,'JOY_POVCENTERED'
,'JOY_POVFORWARD'
,'JOY_POVRIGHT'
,'JOY_POVBACKWARD'
,'JOY_POVLEFT'
,'JOY_RETURNX'
,'JOY_RETURNY'
,'JOY_RETURNZ'
,'JOY_RETURNR'
,'JOY_RETURNU'
,'JOY_RETURNV'
,'JOY_RETURNPOV'
,'JOY_RETURNBUTTONS'
,'JOY_RETURNRAWDATA'
,'JOY_RETURNPOVCTS'
,'JOY_RETURNCENTERED'
,'JOY_USEDEADZONE'
,'JOY_RETURNALL'
,'JOY_CAL_READALWAYS'
,'JOY_CAL_READXYONLY'
,'JOY_CAL_READ3'
,'JOY_CAL_READ4'
,'JOY_CAL_READXONLY'
,'JOY_CAL_READYONLY'
,'JOY_CAL_READ5'
,'JOY_CAL_READ6'
,'JOY_CAL_READZONLY'
,'JOY_CAL_READRONLY'
,'JOY_CAL_READUONLY'
,'JOY_CAL_READVONLY'
,'JOYSTICKID1'
,'JOYSTICKID2'
,'JOYCAPS_HASZ'
,'JOYCAPS_HASR'
,'JOYCAPS_HASU'
,'JOYCAPS_HASV'
,'JOYCAPS_HASPOV'
,'JOYCAPS_POV4DIR'
,'JOYCAPS_POVCTS'
,'MMIOERR_BASE'
,'MMIOERR_FILENOTFOUND'
,'MMIOERR_OUTOFMEMORY'
,'MMIOERR_CANNOTOPEN'
,'MMIOERR_CANNOTCLOSE'
,'MMIOERR_CANNOTREAD'
,'MMIOERR_CANNOTWRITE'
,'MMIOERR_CANNOTSEEK'
,'MMIOERR_CANNOTEXPAND'
,'MMIOERR_CHUNKNOTFOUND'
,'MMIOERR_UNBUFFERED'
,'MMIOERR_PATHNOTFOUND'
,'MMIOERR_ACCESSDENIED'
,'MMIOERR_SHARINGVIOLATION'
,'MMIOERR_NETWORKERROR'
,'MMIOERR_TOOMANYOPENFILES'
,'MMIOERR_INVALIDFILE'
,'CFSEPCHAR'
,'MMIO_RWMODE'
,'MMIO_SHAREMODE'
,'MMIO_CREATE'
,'MMIO_PARSE'
,'MMIO_DELETE'
,'MMIO_EXIST'
,'MMIO_ALLOCBUF'
,'MMIO_GETTEMP'
,'MMIO_DIRTY'
,'MMIO_READ'
,'MMIO_WRITE'
,'MMIO_READWRITE'
,'MMIO_COMPAT'
,'MMIO_EXCLUSIVE'
,'MMIO_DENYWRITE'
,'MMIO_DENYREAD'
,'MMIO_DENYNONE'
,'MMIO_FHOPEN'
,'MMIO_EMPTYBUF'
,'MMIO_TOUPPER'
,'MMIO_INSTALLPROC'
,'MMIO_GLOBALPROC'
,'MMIO_REMOVEPROC'
,'MMIO_UNICODEPROC'
,'MMIO_FINDPROC'
,'MMIO_FINDCHUNK'
,'MMIO_FINDRIFF'
,'MMIO_FINDLIST'
,'MMIO_CREATERIFF'
,'MMIO_CREATELIST'
,'MMIOM_READ'
,'MMIOM_WRITE'
,'MMIOM_SEEK'
,'MMIOM_OPEN'
,'MMIOM_CLOSE'
,'MMIOM_WRITEFLUSH'
,'MMIOM_RENAME'
,'MMIOM_USER'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,MAXPNAMELEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,MAXERRORLENGTH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,MAX_JOYSTICKOEMVXDNAME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,MM_MICROSOFT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,MM_MIDI_MAPPER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,MM_WAVE_MAPPER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,MM_SNDBLST_MIDIOUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,MM_SNDBLST_MIDIIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,MM_SNDBLST_SYNTH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,MM_SNDBLST_WAVEOUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,MM_SNDBLST_WAVEIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,MM_ADLIB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,MM_MPU401_MIDIOUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,MM_MPU401_MIDIIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,MM_PC_JOYSTICK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,TIME_MS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,TIME_SAMPLES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,TIME_BYTES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,TIME_SMPTE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,TIME_MIDI));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,TIME_TICKS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,MM_JOY1MOVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,MM_JOY2MOVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,MM_JOY1ZMOVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,MM_JOY2ZMOVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,MM_JOY1BUTTONDOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,MM_JOY2BUTTONDOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,MM_JOY1BUTTONUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,MM_JOY2BUTTONUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,MM_MCINOTIFY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,MM_WOM_OPEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,MM_WOM_CLOSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,MM_WOM_DONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,MM_WIM_OPEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,MM_WIM_CLOSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,MM_WIM_DATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,MM_MIM_OPEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,MM_MIM_CLOSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,MM_MIM_DATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,MM_MIM_LONGDATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,MM_MIM_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,MM_MIM_LONGERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,MM_MOM_OPEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,MM_MOM_CLOSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,MM_MOM_DONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,MM_DRVM_OPEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,MM_DRVM_CLOSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,MM_DRVM_DATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,MM_DRVM_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,MM_STREAM_OPEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,MM_STREAM_CLOSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,MM_STREAM_DONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,MM_STREAM_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,MM_MOM_POSITIONCB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,MM_MCISIGNAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,MM_MIM_MOREDATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,MM_MIXM_LINE_CHANGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,MM_MIXM_CONTROL_CHANGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,MMSYSERR_BASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,WAVERR_BASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,MIDIERR_BASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,TIMERR_BASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,JOYERR_BASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,MCIERR_BASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,MIXERR_BASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[65] ,MCI_STRING_OFFSET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[66] ,MCI_VD_OFFSET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[67] ,MCI_CD_OFFSET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[68] ,MCI_WAVE_OFFSET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[69] ,MCI_SEQ_OFFSET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[70] ,MMSYSERR_NOERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[71] ,MMSYSERR_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[72] ,MMSYSERR_BADDEVICEID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[73] ,MMSYSERR_NOTENABLED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[74] ,MMSYSERR_ALLOCATED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[75] ,MMSYSERR_INVALHANDLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[76] ,MMSYSERR_NODRIVER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[77] ,MMSYSERR_NOMEM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[78] ,MMSYSERR_NOTSUPPORTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[79] ,MMSYSERR_BADERRNUM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[80] ,MMSYSERR_INVALFLAG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[81] ,MMSYSERR_INVALPARAM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[82] ,MMSYSERR_HANDLEBUSY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[83] ,MMSYSERR_INVALIDALIAS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[84] ,MMSYSERR_BADDB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[85] ,MMSYSERR_KEYNOTFOUND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[86] ,MMSYSERR_READERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[87] ,MMSYSERR_WRITEERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[88] ,MMSYSERR_DELETEERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[89] ,MMSYSERR_VALNOTFOUND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[90] ,MMSYSERR_NODRIVERCB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[91] ,MMSYSERR_LASTERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[92] ,DRV_LOAD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[93] ,DRV_ENABLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[94] ,DRV_OPEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[95] ,DRV_CLOSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[96] ,DRV_DISABLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[97] ,DRV_FREE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[98] ,DRV_CONFIGURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[99] ,DRV_QUERYCONFIGURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[100] ,DRV_INSTALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[101] ,DRV_REMOVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[102] ,DRV_EXITSESSION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[103] ,DRV_POWER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[104] ,DRV_RESERVED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[105] ,DRV_USER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[106] ,DRVCNF_CANCEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[107] ,DRVCNF_OK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[108] ,DRVCNF_RESTART));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[109] ,DRV_CANCEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[110] ,DRV_OK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[111] ,DRV_RESTART));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[112] ,DRV_MCI_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[113] ,DRV_MCI_LAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[114] ,CALLBACK_TYPEMASK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[115] ,CALLBACK_NULL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[116] ,CALLBACK_WINDOW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[117] ,CALLBACK_TASK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[118] ,CALLBACK_FUNCTION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[119] ,CALLBACK_THREAD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[120] ,CALLBACK_EVENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[121] ,SND_SYNC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[122] ,SND_ASYNC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[123] ,SND_NODEFAULT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[124] ,SND_MEMORY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[125] ,SND_LOOP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[126] ,SND_NOSTOP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[127] ,SND_NOWAIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[128] ,SND_ALIAS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[129] ,SND_ALIAS_ID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[130] ,SND_FILENAME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[131] ,SND_RESOURCE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[132] ,SND_PURGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[133] ,SND_APPLICATION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[134] ,SND_ALIAS_START));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[135] ,SND_ALIAS_SYSTEMASTERISK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[136] ,SND_ALIAS_SYSTEMQUESTION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[137] ,SND_ALIAS_SYSTEMHAND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[138] ,SND_ALIAS_SYSTEMEXIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[139] ,SND_ALIAS_SYSTEMSTART));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[140] ,SND_ALIAS_SYSTEMWELCOME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[141] ,SND_ALIAS_SYSTEMEXCLAMATION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[142] ,SND_ALIAS_SYSTEMDEFAULT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[143] ,WAVERR_BADFORMAT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[144] ,WAVERR_STILLPLAYING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[145] ,WAVERR_UNPREPARED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[146] ,WAVERR_SYNC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[147] ,WAVERR_LASTERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[148] ,WOM_OPEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[149] ,WOM_CLOSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[150] ,WOM_DONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[151] ,WIM_OPEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[152] ,WIM_CLOSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[153] ,WIM_DATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[154] ,WAVE_MAPPER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[155] ,WAVE_FORMAT_QUERY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[156] ,WAVE_ALLOWSYNC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[157] ,WAVE_MAPPED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[158] ,WHDR_DONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[159] ,WHDR_PREPARED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[160] ,WHDR_BEGINLOOP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[161] ,WHDR_ENDLOOP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[162] ,WHDR_INQUEUE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[163] ,WAVECAPS_PITCH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[164] ,WAVECAPS_PLAYBACKRATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[165] ,WAVECAPS_VOLUME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[166] ,WAVECAPS_LRVOLUME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[167] ,WAVECAPS_SYNC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[168] ,WAVECAPS_SAMPLEACCURATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[169] ,WAVECAPS_DIRECTSOUND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[170] ,WAVE_INVALIDFORMAT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[171] ,WAVE_FORMAT_1M08));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[172] ,WAVE_FORMAT_1S08));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[173] ,WAVE_FORMAT_1M16));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[174] ,WAVE_FORMAT_1S16));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[175] ,WAVE_FORMAT_2M08));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[176] ,WAVE_FORMAT_2S08));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[177] ,WAVE_FORMAT_2M16));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[178] ,WAVE_FORMAT_2S16));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[179] ,WAVE_FORMAT_4M08));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[180] ,WAVE_FORMAT_4S08));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[181] ,WAVE_FORMAT_4M16));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[182] ,WAVE_FORMAT_4S16));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[183] ,WAVE_FORMAT_PCM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[184] ,MIDIERR_UNPREPARED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[185] ,MIDIERR_STILLPLAYING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[186] ,MIDIERR_NOMAP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[187] ,MIDIERR_NOTREADY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[188] ,MIDIERR_NODEVICE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[189] ,MIDIERR_INVALIDSETUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[190] ,MIDIERR_BADOPENMODE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[191] ,MIDIERR_DONT_CONTINUE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[192] ,MIDIERR_LASTERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[193] ,MIDIPATCHSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[194] ,MIM_OPEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[195] ,MIM_CLOSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[196] ,MIM_DATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[197] ,MIM_LONGDATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[198] ,MIM_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[199] ,MIM_LONGERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[200] ,MOM_OPEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[201] ,MOM_CLOSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[202] ,MOM_DONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[203] ,MIM_MOREDATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[204] ,MOM_POSITIONCB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[205] ,MIDIMAPPER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[206] ,MIDI_MAPPER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[207] ,MIDI_IO_STATUS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[208] ,MIDI_CACHE_ALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[209] ,MIDI_CACHE_BESTFIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[210] ,MIDI_CACHE_QUERY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[211] ,MIDI_UNCACHE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[212] ,MOD_MIDIPORT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[213] ,MOD_SYNTH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[214] ,MOD_SQSYNTH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[215] ,MOD_FMSYNTH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[216] ,MOD_MAPPER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[217] ,MIDICAPS_VOLUME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[218] ,MIDICAPS_LRVOLUME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[219] ,MIDICAPS_CACHE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[220] ,MIDICAPS_STREAM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[221] ,MHDR_DONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[222] ,MHDR_PREPARED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[223] ,MHDR_INQUEUE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[224] ,MHDR_ISSTRM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[225] ,MEVT_F_SHORT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[226] ,MEVT_F_LONG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[227] ,MEVT_F_CALLBACK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[228] ,MEVT_SHORTMSG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[229] ,MEVT_TEMPO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[230] ,MEVT_NOP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[231] ,MEVT_LONGMSG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[232] ,MEVT_COMMENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[233] ,MEVT_VERSION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[234] ,MIDISTRM_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[235] ,MIDIPROP_SET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[236] ,MIDIPROP_GET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[237] ,MIDIPROP_TIMEDIV));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[238] ,MIDIPROP_TEMPO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[239] ,AUX_MAPPER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[240] ,AUXCAPS_CDAUDIO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[241] ,AUXCAPS_AUXIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[242] ,AUXCAPS_VOLUME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[243] ,AUXCAPS_LRVOLUME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[244] ,MIXER_SHORT_NAME_CHARS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[245] ,MIXER_LONG_NAME_CHARS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[246] ,MIXERR_INVALLINE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[247] ,MIXERR_INVALCONTROL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[248] ,MIXERR_INVALVALUE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[249] ,MIXERR_LASTERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[250] ,MIXER_OBJECTF_HANDLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[251] ,MIXER_OBJECTF_MIXER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[252] ,MIXER_OBJECTF_HMIXER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[253] ,MIXER_OBJECTF_WAVEOUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[254] ,MIXER_OBJECTF_HWAVEOUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[255] ,MIXER_OBJECTF_WAVEIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[256] ,MIXER_OBJECTF_HWAVEIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[257] ,MIXER_OBJECTF_MIDIOUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[258] ,MIXER_OBJECTF_HMIDIOUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[259] ,MIXER_OBJECTF_MIDIIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[260] ,MIXER_OBJECTF_HMIDIIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[261] ,MIXER_OBJECTF_AUX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[262] ,MIXERLINE_LINEF_ACTIVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[263] ,MIXERLINE_LINEF_DISCONNECTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[264] ,MIXERLINE_LINEF_SOURCE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[265] ,MIXERLINE_COMPONENTTYPE_DST_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[266] ,MIXERLINE_COMPONENTTYPE_DST_UNDEFINED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[267] ,MIXERLINE_COMPONENTTYPE_DST_DIGITAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[268] ,MIXERLINE_COMPONENTTYPE_DST_LINE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[269] ,MIXERLINE_COMPONENTTYPE_DST_MONITOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[270] ,MIXERLINE_COMPONENTTYPE_DST_SPEAKERS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[271] ,MIXERLINE_COMPONENTTYPE_DST_HEADPHONES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[272] ,MIXERLINE_COMPONENTTYPE_DST_TELEPHONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[273] ,MIXERLINE_COMPONENTTYPE_DST_WAVEIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[274] ,MIXERLINE_COMPONENTTYPE_DST_VOICEIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[275] ,MIXERLINE_COMPONENTTYPE_DST_LAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[276] ,MIXERLINE_COMPONENTTYPE_SRC_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[277] ,MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[278] ,MIXERLINE_COMPONENTTYPE_SRC_DIGITAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[279] ,MIXERLINE_COMPONENTTYPE_SRC_LINE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[280] ,MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[281] ,MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[282] ,MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[283] ,MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[284] ,MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[285] ,MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[286] ,MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[287] ,MIXERLINE_COMPONENTTYPE_SRC_ANALOG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[288] ,MIXERLINE_COMPONENTTYPE_SRC_LAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[289] ,MIXERLINE_TARGETTYPE_UNDEFINED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[290] ,MIXERLINE_TARGETTYPE_WAVEOUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[291] ,MIXERLINE_TARGETTYPE_WAVEIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[292] ,MIXERLINE_TARGETTYPE_MIDIOUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[293] ,MIXERLINE_TARGETTYPE_MIDIIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[294] ,MIXERLINE_TARGETTYPE_AUX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[295] ,MIXER_GETLINEINFOF_DESTINATION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[296] ,MIXER_GETLINEINFOF_SOURCE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[297] ,MIXER_GETLINEINFOF_LINEID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[298] ,MIXER_GETLINEINFOF_COMPONENTTYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[299] ,MIXER_GETLINEINFOF_TARGETTYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[300] ,MIXER_GETLINEINFOF_QUERYMASK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[301] ,MIXERCONTROL_CONTROLF_UNIFORM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[302] ,MIXERCONTROL_CONTROLF_MULTIPLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[303] ,MIXERCONTROL_CONTROLF_DISABLED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[304] ,MIXERCONTROL_CT_CLASS_MASK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[305] ,MIXERCONTROL_CT_CLASS_CUSTOM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[306] ,MIXERCONTROL_CT_CLASS_METER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[307] ,MIXERCONTROL_CT_CLASS_SWITCH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[308] ,MIXERCONTROL_CT_CLASS_NUMBER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[309] ,MIXERCONTROL_CT_CLASS_SLIDER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[310] ,MIXERCONTROL_CT_CLASS_FADER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[311] ,MIXERCONTROL_CT_CLASS_TIME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[312] ,MIXERCONTROL_CT_CLASS_LIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[313] ,MIXERCONTROL_CT_SUBCLASS_MASK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[314] ,MIXERCONTROL_CT_SC_SWITCH_BOOLEAN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[315] ,MIXERCONTROL_CT_SC_SWITCH_BUTTON));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[316] ,MIXERCONTROL_CT_SC_METER_POLLED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[317] ,MIXERCONTROL_CT_SC_TIME_MICROSECS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[318] ,MIXERCONTROL_CT_SC_TIME_MILLISECS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[319] ,MIXERCONTROL_CT_SC_LIST_SINGLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[320] ,MIXERCONTROL_CT_SC_LIST_MULTIPLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[321] ,MIXERCONTROL_CT_UNITS_MASK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[322] ,MIXERCONTROL_CT_UNITS_CUSTOM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[323] ,MIXERCONTROL_CT_UNITS_BOOLEAN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[324] ,MIXERCONTROL_CT_UNITS_SIGNED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[325] ,MIXERCONTROL_CT_UNITS_UNSIGNED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[326] ,MIXERCONTROL_CT_UNITS_DECIBELS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[327] ,MIXERCONTROL_CT_UNITS_PERCENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[328] ,MIXERCONTROL_CONTROLTYPE_CUSTOM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[329] ,MIXERCONTROL_CONTROLTYPE_BOOLEANMETER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[330] ,MIXERCONTROL_CONTROLTYPE_SIGNEDMETER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[331] ,MIXERCONTROL_CONTROLTYPE_PEAKMETER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[332] ,MIXERCONTROL_CONTROLTYPE_UNSIGNEDMETER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[333] ,MIXERCONTROL_CONTROLTYPE_BOOLEAN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[334] ,MIXERCONTROL_CONTROLTYPE_ONOFF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[335] ,MIXERCONTROL_CONTROLTYPE_MUTE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[336] ,MIXERCONTROL_CONTROLTYPE_MONO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[337] ,MIXERCONTROL_CONTROLTYPE_LOUDNESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[338] ,MIXERCONTROL_CONTROLTYPE_STEREOENH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[339] ,MIXERCONTROL_CONTROLTYPE_BUTTON));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[340] ,MIXERCONTROL_CONTROLTYPE_DECIBELS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[341] ,MIXERCONTROL_CONTROLTYPE_SIGNED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[342] ,MIXERCONTROL_CONTROLTYPE_UNSIGNED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[343] ,MIXERCONTROL_CONTROLTYPE_PERCENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[344] ,MIXERCONTROL_CONTROLTYPE_SLIDER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[345] ,MIXERCONTROL_CONTROLTYPE_PAN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[346] ,MIXERCONTROL_CONTROLTYPE_QSOUNDPAN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[347] ,MIXERCONTROL_CONTROLTYPE_FADER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[348] ,MIXERCONTROL_CONTROLTYPE_VOLUME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[349] ,MIXERCONTROL_CONTROLTYPE_BASS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[350] ,MIXERCONTROL_CONTROLTYPE_TREBLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[351] ,MIXERCONTROL_CONTROLTYPE_EQUALIZER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[352] ,MIXERCONTROL_CONTROLTYPE_SINGLESELECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[353] ,MIXERCONTROL_CONTROLTYPE_MUX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[354] ,MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[355] ,MIXERCONTROL_CONTROLTYPE_MIXER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[356] ,MIXERCONTROL_CONTROLTYPE_MICROTIME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[357] ,MIXERCONTROL_CONTROLTYPE_MILLITIME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[358] ,MIXER_GETLINECONTROLSF_ALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[359] ,MIXER_GETLINECONTROLSF_ONEBYID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[360] ,MIXER_GETLINECONTROLSF_ONEBYTYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[361] ,MIXER_GETLINECONTROLSF_QUERYMASK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[362] ,MIXER_GETCONTROLDETAILSF_VALUE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[363] ,MIXER_GETCONTROLDETAILSF_LISTTEXT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[364] ,MIXER_GETCONTROLDETAILSF_QUERYMASK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[365] ,MIXER_SETCONTROLDETAILSF_VALUE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[366] ,MIXER_SETCONTROLDETAILSF_CUSTOM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[367] ,MIXER_SETCONTROLDETAILSF_QUERYMASK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[368] ,TIMERR_NOERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[369] ,TIME_ONESHOT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[370] ,TIME_PERIODIC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[371] ,TIME_CALLBACK_FUNCTION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[372] ,TIME_CALLBACK_EVENT_SET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[373] ,TIME_CALLBACK_EVENT_PULSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[374] ,JOYERR_NOERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[375] ,JOYERR_PARMS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[376] ,JOYERR_NOCANDO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[377] ,JOYERR_UNPLUGGED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[378] ,JOY_BUTTON1));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[379] ,JOY_BUTTON2));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[380] ,JOY_BUTTON3));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[381] ,JOY_BUTTON4));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[382] ,JOY_BUTTON1CHG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[383] ,JOY_BUTTON2CHG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[384] ,JOY_BUTTON3CHG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[385] ,JOY_BUTTON4CHG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[386] ,JOY_BUTTON5));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[387] ,JOY_BUTTON6));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[388] ,JOY_BUTTON7));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[389] ,JOY_BUTTON8));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[390] ,JOY_BUTTON9));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[391] ,JOY_BUTTON10));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[392] ,JOY_BUTTON11));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[393] ,JOY_BUTTON12));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[394] ,JOY_BUTTON13));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[395] ,JOY_BUTTON14));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[396] ,JOY_BUTTON15));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[397] ,JOY_BUTTON16));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[398] ,JOY_BUTTON17));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[399] ,JOY_BUTTON18));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[400] ,JOY_BUTTON19));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[401] ,JOY_BUTTON20));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[402] ,JOY_BUTTON21));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[403] ,JOY_BUTTON22));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[404] ,JOY_BUTTON23));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[405] ,JOY_BUTTON24));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[406] ,JOY_BUTTON25));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[407] ,JOY_BUTTON26));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[408] ,JOY_BUTTON27));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[409] ,JOY_BUTTON28));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[410] ,JOY_BUTTON29));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[411] ,JOY_BUTTON30));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[412] ,JOY_BUTTON31));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[413] ,JOY_BUTTON32));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[414] ,JOY_POVCENTERED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[415] ,JOY_POVFORWARD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[416] ,JOY_POVRIGHT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[417] ,JOY_POVBACKWARD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[418] ,JOY_POVLEFT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[419] ,JOY_RETURNX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[420] ,JOY_RETURNY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[421] ,JOY_RETURNZ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[422] ,JOY_RETURNR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[423] ,JOY_RETURNU));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[424] ,JOY_RETURNV));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[425] ,JOY_RETURNPOV));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[426] ,JOY_RETURNBUTTONS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[427] ,JOY_RETURNRAWDATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[428] ,JOY_RETURNPOVCTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[429] ,JOY_RETURNCENTERED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[430] ,JOY_USEDEADZONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[431] ,JOY_RETURNALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[432] ,JOY_CAL_READALWAYS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[433] ,JOY_CAL_READXYONLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[434] ,JOY_CAL_READ3));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[435] ,JOY_CAL_READ4));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[436] ,JOY_CAL_READXONLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[437] ,JOY_CAL_READYONLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[438] ,JOY_CAL_READ5));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[439] ,JOY_CAL_READ6));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[440] ,JOY_CAL_READZONLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[441] ,JOY_CAL_READRONLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[442] ,JOY_CAL_READUONLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[443] ,JOY_CAL_READVONLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[444] ,JOYSTICKID1));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[445] ,JOYSTICKID2));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[446] ,JOYCAPS_HASZ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[447] ,JOYCAPS_HASR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[448] ,JOYCAPS_HASU));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[449] ,JOYCAPS_HASV));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[450] ,JOYCAPS_HASPOV));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[451] ,JOYCAPS_POV4DIR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[452] ,JOYCAPS_POVCTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[453] ,MMIOERR_BASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[454] ,MMIOERR_FILENOTFOUND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[455] ,MMIOERR_OUTOFMEMORY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[456] ,MMIOERR_CANNOTOPEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[457] ,MMIOERR_CANNOTCLOSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[458] ,MMIOERR_CANNOTREAD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[459] ,MMIOERR_CANNOTWRITE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[460] ,MMIOERR_CANNOTSEEK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[461] ,MMIOERR_CANNOTEXPAND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[462] ,MMIOERR_CHUNKNOTFOUND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[463] ,MMIOERR_UNBUFFERED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[464] ,MMIOERR_PATHNOTFOUND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[465] ,MMIOERR_ACCESSDENIED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[466] ,MMIOERR_SHARINGVIOLATION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[467] ,MMIOERR_NETWORKERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[468] ,MMIOERR_TOOMANYOPENFILES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[469] ,MMIOERR_INVALIDFILE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[470] ,CFSEPCHAR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[471] ,MMIO_RWMODE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[472] ,MMIO_SHAREMODE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[473] ,MMIO_CREATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[474] ,MMIO_PARSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[475] ,MMIO_DELETE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[476] ,MMIO_EXIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[477] ,MMIO_ALLOCBUF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[478] ,MMIO_GETTEMP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[479] ,MMIO_DIRTY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[480] ,MMIO_READ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[481] ,MMIO_WRITE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[482] ,MMIO_READWRITE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[483] ,MMIO_COMPAT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[484] ,MMIO_EXCLUSIVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[485] ,MMIO_DENYWRITE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[486] ,MMIO_DENYREAD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[487] ,MMIO_DENYNONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[488] ,MMIO_FHOPEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[489] ,MMIO_EMPTYBUF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[490] ,MMIO_TOUPPER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[491] ,MMIO_INSTALLPROC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[492] ,MMIO_GLOBALPROC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[493] ,MMIO_REMOVEPROC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[494] ,MMIO_UNICODEPROC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[495] ,MMIO_FINDPROC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[496] ,MMIO_FINDCHUNK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[497] ,MMIO_FINDRIFF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[498] ,MMIO_FINDLIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[499] ,MMIO_CREATERIFF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[500] ,MMIO_CREATELIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[501] ,MMIOM_READ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[502] ,MMIOM_WRITE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[503] ,MMIOM_SEEK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[504] ,MMIOM_OPEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[505] ,MMIOM_CLOSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[506] ,MMIOM_WRITEFLUSH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[507] ,MMIOM_RENAME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[508] ,MMIOM_USER));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const __ConstNames1 : array[0..356] of string = (
'FOURCC_RIFF'
,'FOURCC_LIST'
,'FOURCC_DOS'
,'FOURCC_MEM'
,'SEEK_SET'
,'SEEK_CUR'
,'SEEK_END'
,'MMIO_DEFAULTBUFFER'
,'MCIERR_INVALID_DEVICE_ID'
,'MCIERR_UNRECOGNIZED_KEYWORD'
,'MCIERR_UNRECOGNIZED_COMMAND'
,'MCIERR_HARDWARE'
,'MCIERR_INVALID_DEVICE_NAME'
,'MCIERR_OUT_OF_MEMORY'
,'MCIERR_DEVICE_OPEN'
,'MCIERR_CANNOT_LOAD_DRIVER'
,'MCIERR_MISSING_COMMAND_STRING'
,'MCIERR_PARAM_OVERFLOW'
,'MCIERR_MISSING_STRING_ARGUMENT'
,'MCIERR_BAD_INTEGER'
,'MCIERR_PARSER_INTERNAL'
,'MCIERR_DRIVER_INTERNAL'
,'MCIERR_MISSING_PARAMETER'
,'MCIERR_UNSUPPORTED_FUNCTION'
,'MCIERR_FILE_NOT_FOUND'
,'MCIERR_DEVICE_NOT_READY'
,'MCIERR_INTERNAL'
,'MCIERR_DRIVER'
,'MCIERR_CANNOT_USE_ALL'
,'MCIERR_MULTIPLE'
,'MCIERR_EXTENSION_NOT_FOUND'
,'MCIERR_OUTOFRANGE'
,'MCIERR_FLAGS_NOT_COMPATIBLE'
,'MCIERR_FILE_NOT_SAVED'
,'MCIERR_DEVICE_TYPE_REQUIRED'
,'MCIERR_DEVICE_LOCKED'
,'MCIERR_DUPLICATE_ALIAS'
,'MCIERR_BAD_CONSTANT'
,'MCIERR_MUST_USE_SHAREABLE'
,'MCIERR_MISSING_DEVICE_NAME'
,'MCIERR_BAD_TIME_FORMAT'
,'MCIERR_NO_CLOSING_QUOTE'
,'MCIERR_DUPLICATE_FLAGS'
,'MCIERR_INVALID_FILE'
,'MCIERR_NULL_PARAMETER_BLOCK'
,'MCIERR_UNNAMED_RESOURCE'
,'MCIERR_NEW_REQUIRES_ALIAS'
,'MCIERR_NOTIFY_ON_AUTO_OPEN'
,'MCIERR_NO_ELEMENT_ALLOWED'
,'MCIERR_NONAPPLICABLE_FUNCTION'
,'MCIERR_ILLEGAL_FOR_AUTO_OPEN'
,'MCIERR_FILENAME_REQUIRED'
,'MCIERR_EXTRA_CHARACTERS'
,'MCIERR_DEVICE_NOT_INSTALLED'
,'MCIERR_GET_CD'
,'MCIERR_SET_CD'
,'MCIERR_SET_DRIVE'
,'MCIERR_DEVICE_LENGTH'
,'MCIERR_DEVICE_ORD_LENGTH'
,'MCIERR_NO_INTEGER'
,'MCIERR_WAVE_OUTPUTSINUSE'
,'MCIERR_WAVE_SETOUTPUTINUSE'
,'MCIERR_WAVE_INPUTSINUSE'
,'MCIERR_WAVE_SETINPUTINUSE'
,'MCIERR_WAVE_OUTPUTUNSPECIFIED'
,'MCIERR_WAVE_INPUTUNSPECIFIED'
,'MCIERR_WAVE_OUTPUTSUNSUITABLE'
,'MCIERR_WAVE_SETOUTPUTUNSUITABLE'
,'MCIERR_WAVE_INPUTSUNSUITABLE'
,'MCIERR_WAVE_SETINPUTUNSUITABLE'
,'MCIERR_SEQ_DIV_INCOMPATIBLE'
,'MCIERR_SEQ_PORT_INUSE'
,'MCIERR_SEQ_PORT_NONEXISTENT'
,'MCIERR_SEQ_PORT_MAPNODEVICE'
,'MCIERR_SEQ_PORT_MISCERROR'
,'MCIERR_SEQ_TIMER'
,'MCIERR_SEQ_PORTUNSPECIFIED'
,'MCIERR_SEQ_NOMIDIPRESENT'
,'MCIERR_NO_WINDOW'
,'MCIERR_CREATEWINDOW'
,'MCIERR_FILE_READ'
,'MCIERR_FILE_WRITE'
,'MCIERR_NO_IDENTITY'
,'MCIERR_CUSTOM_DRIVER_BASE'
,'MCI_OPEN'
,'MCI_CLOSE'
,'MCI_ESCAPE'
,'MCI_PLAY'
,'MCI_SEEK'
,'MCI_STOP'
,'MCI_PAUSE'
,'MCI_INFO'
,'MCI_GETDEVCAPS'
,'MCI_SPIN'
,'MCI_SET'
,'MCI_STEP'
,'MCI_RECORD'
,'MCI_SYSINFO'
,'MCI_BREAK'
,'MCI_SOUND'
,'MCI_SAVE'
,'MCI_STATUS'
,'MCI_CUE'
,'MCI_REALIZE'
,'MCI_WINDOW'
,'MCI_PUT'
,'MCI_WHERE'
,'MCI_FREEZE'
,'MCI_UNFREEZE'
,'MCI_LOAD'
,'MCI_CUT'
,'MCI_COPY'
,'MCI_PASTE'
,'MCI_UPDATE'
,'MCI_RESUME'
,'MCI_DELETE'
,'MCI_USER_MESSAGES'
,'MCI_LAST'
,'MCI_ALL_DEVICE_ID'
,'MCI_DEVTYPE_VCR'
,'MCI_DEVTYPE_VIDEODISC'
,'MCI_DEVTYPE_OVERLAY'
,'MCI_DEVTYPE_CD_AUDIO'
,'MCI_DEVTYPE_DAT'
,'MCI_DEVTYPE_SCANNER'
,'MCI_DEVTYPE_ANIMATION'
,'MCI_DEVTYPE_DIGITAL_VIDEO'
,'MCI_DEVTYPE_OTHER'
,'MCI_DEVTYPE_WAVEFORM_AUDIO'
,'MCI_DEVTYPE_SEQUENCER'
,'MCI_DEVTYPE_FIRST'
,'MCI_DEVTYPE_LAST'
,'MCI_DEVTYPE_FIRST_USER'
,'MCI_MODE_NOT_READY'
,'MCI_MODE_STOP'
,'MCI_MODE_PLAY'
,'MCI_MODE_RECORD'
,'MCI_MODE_SEEK'
,'MCI_MODE_PAUSE'
,'MCI_MODE_OPEN'
,'MCI_FORMAT_MILLISECONDS'
,'MCI_FORMAT_HMS'
,'MCI_FORMAT_MSF'
,'MCI_FORMAT_FRAMES'
,'MCI_FORMAT_SMPTE_24'
,'MCI_FORMAT_SMPTE_25'
,'MCI_FORMAT_SMPTE_30'
,'MCI_FORMAT_SMPTE_30DROP'
,'MCI_FORMAT_BYTES'
,'MCI_FORMAT_SAMPLES'
,'MCI_FORMAT_TMSF'
,'MCI_NOTIFY_SUCCESSFUL'
,'MCI_NOTIFY_SUPERSEDED'
,'MCI_NOTIFY_ABORTED'
,'MCI_NOTIFY_FAILURE'
,'MCI_NOTIFY'
,'MCI_WAIT'
,'MCI_FROM'
,'MCI_TO'
,'MCI_TRACK'
,'MCI_OPEN_SHAREABLE'
,'MCI_OPEN_ELEMENT'
,'MCI_OPEN_ALIAS'
,'MCI_OPEN_ELEMENT_ID'
,'MCI_OPEN_TYPE_ID'
,'MCI_OPEN_TYPE'
,'MCI_SEEK_TO_START'
,'MCI_SEEK_TO_END'
,'MCI_STATUS_ITEM'
,'MCI_STATUS_START'
,'MCI_STATUS_LENGTH'
,'MCI_STATUS_POSITION'
,'MCI_STATUS_NUMBER_OF_TRACKS'
,'MCI_STATUS_MODE'
,'MCI_STATUS_MEDIA_PRESENT'
,'MCI_STATUS_TIME_FORMAT'
,'MCI_STATUS_READY'
,'MCI_STATUS_CURRENT_TRACK'
,'MCI_INFO_PRODUCT'
,'MCI_INFO_FILE'
,'MCI_INFO_MEDIA_UPC'
,'MCI_INFO_MEDIA_IDENTITY'
,'MCI_INFO_NAME'
,'MCI_INFO_COPYRIGHT'
,'MCI_GETDEVCAPS_ITEM'
,'MCI_GETDEVCAPS_CAN_RECORD'
,'MCI_GETDEVCAPS_HAS_AUDIO'
,'MCI_GETDEVCAPS_HAS_VIDEO'
,'MCI_GETDEVCAPS_DEVICE_TYPE'
,'MCI_GETDEVCAPS_USES_FILES'
,'MCI_GETDEVCAPS_COMPOUND_DEVICE'
,'MCI_GETDEVCAPS_CAN_EJECT'
,'MCI_GETDEVCAPS_CAN_PLAY'
,'MCI_GETDEVCAPS_CAN_SAVE'
,'MCI_SYSINFO_QUANTITY'
,'MCI_SYSINFO_OPEN'
,'MCI_SYSINFO_NAME'
,'MCI_SYSINFO_INSTALLNAME'
,'MCI_SET_DOOR_OPEN'
,'MCI_SET_DOOR_CLOSED'
,'MCI_SET_TIME_FORMAT'
,'MCI_SET_AUDIO'
,'MCI_SET_VIDEO'
,'MCI_SET_ON'
,'MCI_SET_OFF'
,'MCI_SET_AUDIO_ALL'
,'MCI_SET_AUDIO_LEFT'
,'MCI_SET_AUDIO_RIGHT'
,'MCI_BREAK_KEY'
,'MCI_BREAK_HWND'
,'MCI_BREAK_OFF'
,'MCI_RECORD_INSERT'
,'MCI_RECORD_OVERWRITE'
,'MCI_SOUND_NAME'
,'MCI_SAVE_FILE'
,'MCI_LOAD_FILE'
,'MCI_VD_MODE_PARK'
,'MCI_VD_MEDIA_CLV'
,'MCI_VD_MEDIA_CAV'
,'MCI_VD_MEDIA_OTHER'
,'MCI_VD_FORMAT_TRACK'
,'MCI_VD_PLAY_REVERSE'
,'MCI_VD_PLAY_FAST'
,'MCI_VD_PLAY_SPEED'
,'MCI_VD_PLAY_SCAN'
,'MCI_VD_PLAY_SLOW'
,'MCI_VD_SEEK_REVERSE'
,'MCI_VD_STATUS_SPEED'
,'MCI_VD_STATUS_FORWARD'
,'MCI_VD_STATUS_MEDIA_TYPE'
,'MCI_VD_STATUS_SIDE'
,'MCI_VD_STATUS_DISC_SIZE'
,'MCI_VD_GETDEVCAPS_CLV'
,'MCI_VD_GETDEVCAPS_CAV'
,'MCI_VD_SPIN_UP'
,'MCI_VD_SPIN_DOWN'
,'MCI_VD_GETDEVCAPS_CAN_REVERSE'
,'MCI_VD_GETDEVCAPS_FAST_RATE'
,'MCI_VD_GETDEVCAPS_SLOW_RATE'
,'MCI_VD_GETDEVCAPS_NORMAL_RATE'
,'MCI_VD_STEP_FRAMES'
,'MCI_VD_STEP_REVERSE'
,'MCI_VD_ESCAPE_STRING'
,'MCI_CDA_STATUS_TYPE_TRACK'
,'MCI_CDA_TRACK_AUDIO'
,'MCI_CDA_TRACK_OTHER'
,'MCI_WAVE_PCM'
,'MCI_WAVE_MAPPER'
,'MCI_WAVE_OPEN_BUFFER'
,'MCI_WAVE_SET_FORMATTAG'
,'MCI_WAVE_SET_CHANNELS'
,'MCI_WAVE_SET_SAMPLESPERSEC'
,'MCI_WAVE_SET_AVGBYTESPERSEC'
,'MCI_WAVE_SET_BLOCKALIGN'
,'MCI_WAVE_SET_BITSPERSAMPLE'
,'MCI_WAVE_INPUT'
,'MCI_WAVE_OUTPUT'
,'MCI_WAVE_STATUS_FORMATTAG'
,'MCI_WAVE_STATUS_CHANNELS'
,'MCI_WAVE_STATUS_SAMPLESPERSEC'
,'MCI_WAVE_STATUS_AVGBYTESPERSEC'
,'MCI_WAVE_STATUS_BLOCKALIGN'
,'MCI_WAVE_STATUS_BITSPERSAMPLE'
,'MCI_WAVE_STATUS_LEVEL'
,'MCI_WAVE_SET_ANYINPUT'
,'MCI_WAVE_SET_ANYOUTPUT'
,'MCI_WAVE_GETDEVCAPS_INPUTS'
,'MCI_WAVE_GETDEVCAPS_OUTPUTS'
,'MCI_SEQ_DIV_PPQN'
,'MCI_SEQ_DIV_SMPTE_24'
,'MCI_SEQ_DIV_SMPTE_25'
,'MCI_SEQ_DIV_SMPTE_30DROP'
,'MCI_SEQ_DIV_SMPTE_30'
,'MCI_SEQ_FORMAT_SONGPTR'
,'MCI_SEQ_FILE'
,'MCI_SEQ_MIDI'
,'MCI_SEQ_SMPTE'
,'MCI_SEQ_NONE'
,'MCI_SEQ_MAPPER'
,'MCI_SEQ_STATUS_TEMPO'
,'MCI_SEQ_STATUS_PORT'
,'MCI_SEQ_STATUS_SLAVE'
,'MCI_SEQ_STATUS_MASTER'
,'MCI_SEQ_STATUS_OFFSET'
,'MCI_SEQ_STATUS_DIVTYPE'
,'MCI_SEQ_STATUS_NAME'
,'MCI_SEQ_STATUS_COPYRIGHT'
,'MCI_SEQ_SET_TEMPO'
,'MCI_SEQ_SET_PORT'
,'MCI_SEQ_SET_SLAVE'
,'MCI_SEQ_SET_MASTER'
,'MCI_SEQ_SET_OFFSET'
,'MCI_ANIM_OPEN_WS'
,'MCI_ANIM_OPEN_PARENT'
,'MCI_ANIM_OPEN_NOSTATIC'
,'MCI_ANIM_PLAY_SPEED'
,'MCI_ANIM_PLAY_REVERSE'
,'MCI_ANIM_PLAY_FAST'
,'MCI_ANIM_PLAY_SLOW'
,'MCI_ANIM_PLAY_SCAN'
,'MCI_ANIM_STEP_REVERSE'
,'MCI_ANIM_STEP_FRAMES'
,'MCI_ANIM_STATUS_SPEED'
,'MCI_ANIM_STATUS_FORWARD'
,'MCI_ANIM_STATUS_HWND'
,'MCI_ANIM_STATUS_HPAL'
,'MCI_ANIM_STATUS_STRETCH'
,'MCI_ANIM_INFO_TEXT'
,'MCI_ANIM_GETDEVCAPS_CAN_REVERSE'
,'MCI_ANIM_GETDEVCAPS_FAST_RATE'
,'MCI_ANIM_GETDEVCAPS_SLOW_RATE'
,'MCI_ANIM_GETDEVCAPS_NORMAL_RATE'
,'MCI_ANIM_GETDEVCAPS_PALETTES'
,'MCI_ANIM_GETDEVCAPS_CAN_STRETCH'
,'MCI_ANIM_GETDEVCAPS_MAX_WINDOWS'
,'MCI_ANIM_REALIZE_NORM'
,'MCI_ANIM_REALIZE_BKGD'
,'MCI_ANIM_WINDOW_HWND'
,'MCI_ANIM_WINDOW_STATE'
,'MCI_ANIM_WINDOW_TEXT'
,'MCI_ANIM_WINDOW_ENABLE_STRETCH'
,'MCI_ANIM_WINDOW_DISABLE_STRETCH'
,'MCI_ANIM_WINDOW_DEFAULT'
,'MCI_ANIM_RECT'
,'MCI_ANIM_PUT_SOURCE'
,'MCI_ANIM_PUT_DESTINATION'
,'MCI_ANIM_WHERE_SOURCE'
,'MCI_ANIM_WHERE_DESTINATION'
,'MCI_ANIM_UPDATE_HDC'
,'MCI_OVLY_OPEN_WS'
,'MCI_OVLY_OPEN_PARENT'
,'MCI_OVLY_STATUS_HWND'
,'MCI_OVLY_STATUS_STRETCH'
,'MCI_OVLY_INFO_TEXT'
,'MCI_OVLY_GETDEVCAPS_CAN_STRETCH'
,'MCI_OVLY_GETDEVCAPS_CAN_FREEZE'
,'MCI_OVLY_GETDEVCAPS_MAX_WINDOWS'
,'MCI_OVLY_WINDOW_HWND'
,'MCI_OVLY_WINDOW_STATE'
,'MCI_OVLY_WINDOW_TEXT'
,'MCI_OVLY_WINDOW_ENABLE_STRETCH'
,'MCI_OVLY_WINDOW_DISABLE_STRETCH'
,'MCI_OVLY_WINDOW_DEFAULT'
,'MCI_OVLY_RECT'
,'MCI_OVLY_PUT_SOURCE'
,'MCI_OVLY_PUT_DESTINATION'
,'MCI_OVLY_PUT_FRAME'
,'MCI_OVLY_PUT_VIDEO'
,'MCI_OVLY_WHERE_SOURCE'
,'MCI_OVLY_WHERE_DESTINATION'
,'MCI_OVLY_WHERE_FRAME'
,'MCI_OVLY_WHERE_VIDEO'
,'NEWTRANSPARENT'
,'QUERYROPSUPPORT'
,'SELECTDIB'
,'SC_SCREENSAVE'
,'mmsyst'
);
var __RegisteredConstsList1 : TList;
procedure __RegisterConsts1;
begin
__RegisteredConstsList1 := TList.Create;
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[0] ,FOURCC_RIFF));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[1] ,FOURCC_LIST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[2] ,FOURCC_DOS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[3] ,FOURCC_MEM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[4] ,SEEK_SET));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[5] ,SEEK_CUR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[6] ,SEEK_END));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[7] ,MMIO_DEFAULTBUFFER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[8] ,MCIERR_INVALID_DEVICE_ID));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[9] ,MCIERR_UNRECOGNIZED_KEYWORD));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[10] ,MCIERR_UNRECOGNIZED_COMMAND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[11] ,MCIERR_HARDWARE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[12] ,MCIERR_INVALID_DEVICE_NAME));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[13] ,MCIERR_OUT_OF_MEMORY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[14] ,MCIERR_DEVICE_OPEN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[15] ,MCIERR_CANNOT_LOAD_DRIVER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[16] ,MCIERR_MISSING_COMMAND_STRING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[17] ,MCIERR_PARAM_OVERFLOW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[18] ,MCIERR_MISSING_STRING_ARGUMENT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[19] ,MCIERR_BAD_INTEGER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[20] ,MCIERR_PARSER_INTERNAL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[21] ,MCIERR_DRIVER_INTERNAL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[22] ,MCIERR_MISSING_PARAMETER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[23] ,MCIERR_UNSUPPORTED_FUNCTION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[24] ,MCIERR_FILE_NOT_FOUND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[25] ,MCIERR_DEVICE_NOT_READY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[26] ,MCIERR_INTERNAL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[27] ,MCIERR_DRIVER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[28] ,MCIERR_CANNOT_USE_ALL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[29] ,MCIERR_MULTIPLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[30] ,MCIERR_EXTENSION_NOT_FOUND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[31] ,MCIERR_OUTOFRANGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[32] ,MCIERR_FLAGS_NOT_COMPATIBLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[33] ,MCIERR_FILE_NOT_SAVED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[34] ,MCIERR_DEVICE_TYPE_REQUIRED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[35] ,MCIERR_DEVICE_LOCKED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[36] ,MCIERR_DUPLICATE_ALIAS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[37] ,MCIERR_BAD_CONSTANT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[38] ,MCIERR_MUST_USE_SHAREABLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[39] ,MCIERR_MISSING_DEVICE_NAME));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[40] ,MCIERR_BAD_TIME_FORMAT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[41] ,MCIERR_NO_CLOSING_QUOTE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[42] ,MCIERR_DUPLICATE_FLAGS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[43] ,MCIERR_INVALID_FILE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[44] ,MCIERR_NULL_PARAMETER_BLOCK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[45] ,MCIERR_UNNAMED_RESOURCE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[46] ,MCIERR_NEW_REQUIRES_ALIAS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[47] ,MCIERR_NOTIFY_ON_AUTO_OPEN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[48] ,MCIERR_NO_ELEMENT_ALLOWED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[49] ,MCIERR_NONAPPLICABLE_FUNCTION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[50] ,MCIERR_ILLEGAL_FOR_AUTO_OPEN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[51] ,MCIERR_FILENAME_REQUIRED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[52] ,MCIERR_EXTRA_CHARACTERS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[53] ,MCIERR_DEVICE_NOT_INSTALLED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[54] ,MCIERR_GET_CD));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[55] ,MCIERR_SET_CD));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[56] ,MCIERR_SET_DRIVE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[57] ,MCIERR_DEVICE_LENGTH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[58] ,MCIERR_DEVICE_ORD_LENGTH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[59] ,MCIERR_NO_INTEGER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[60] ,MCIERR_WAVE_OUTPUTSINUSE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[61] ,MCIERR_WAVE_SETOUTPUTINUSE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[62] ,MCIERR_WAVE_INPUTSINUSE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[63] ,MCIERR_WAVE_SETINPUTINUSE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[64] ,MCIERR_WAVE_OUTPUTUNSPECIFIED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[65] ,MCIERR_WAVE_INPUTUNSPECIFIED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[66] ,MCIERR_WAVE_OUTPUTSUNSUITABLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[67] ,MCIERR_WAVE_SETOUTPUTUNSUITABLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[68] ,MCIERR_WAVE_INPUTSUNSUITABLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[69] ,MCIERR_WAVE_SETINPUTUNSUITABLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[70] ,MCIERR_SEQ_DIV_INCOMPATIBLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[71] ,MCIERR_SEQ_PORT_INUSE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[72] ,MCIERR_SEQ_PORT_NONEXISTENT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[73] ,MCIERR_SEQ_PORT_MAPNODEVICE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[74] ,MCIERR_SEQ_PORT_MISCERROR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[75] ,MCIERR_SEQ_TIMER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[76] ,MCIERR_SEQ_PORTUNSPECIFIED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[77] ,MCIERR_SEQ_NOMIDIPRESENT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[78] ,MCIERR_NO_WINDOW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[79] ,MCIERR_CREATEWINDOW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[80] ,MCIERR_FILE_READ));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[81] ,MCIERR_FILE_WRITE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[82] ,MCIERR_NO_IDENTITY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[83] ,MCIERR_CUSTOM_DRIVER_BASE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[84] ,MCI_OPEN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[85] ,MCI_CLOSE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[86] ,MCI_ESCAPE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[87] ,MCI_PLAY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[88] ,MCI_SEEK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[89] ,MCI_STOP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[90] ,MCI_PAUSE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[91] ,MCI_INFO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[92] ,MCI_GETDEVCAPS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[93] ,MCI_SPIN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[94] ,MCI_SET));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[95] ,MCI_STEP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[96] ,MCI_RECORD));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[97] ,MCI_SYSINFO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[98] ,MCI_BREAK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[99] ,MCI_SOUND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[100] ,MCI_SAVE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[101] ,MCI_STATUS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[102] ,MCI_CUE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[103] ,MCI_REALIZE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[104] ,MCI_WINDOW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[105] ,MCI_PUT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[106] ,MCI_WHERE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[107] ,MCI_FREEZE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[108] ,MCI_UNFREEZE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[109] ,MCI_LOAD));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[110] ,MCI_CUT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[111] ,MCI_COPY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[112] ,MCI_PASTE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[113] ,MCI_UPDATE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[114] ,MCI_RESUME));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[115] ,MCI_DELETE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[116] ,MCI_USER_MESSAGES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[117] ,MCI_LAST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[118] ,MCI_ALL_DEVICE_ID));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[119] ,MCI_DEVTYPE_VCR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[120] ,MCI_DEVTYPE_VIDEODISC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[121] ,MCI_DEVTYPE_OVERLAY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[122] ,MCI_DEVTYPE_CD_AUDIO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[123] ,MCI_DEVTYPE_DAT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[124] ,MCI_DEVTYPE_SCANNER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[125] ,MCI_DEVTYPE_ANIMATION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[126] ,MCI_DEVTYPE_DIGITAL_VIDEO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[127] ,MCI_DEVTYPE_OTHER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[128] ,MCI_DEVTYPE_WAVEFORM_AUDIO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[129] ,MCI_DEVTYPE_SEQUENCER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[130] ,MCI_DEVTYPE_FIRST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[131] ,MCI_DEVTYPE_LAST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[132] ,MCI_DEVTYPE_FIRST_USER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[133] ,MCI_MODE_NOT_READY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[134] ,MCI_MODE_STOP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[135] ,MCI_MODE_PLAY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[136] ,MCI_MODE_RECORD));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[137] ,MCI_MODE_SEEK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[138] ,MCI_MODE_PAUSE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[139] ,MCI_MODE_OPEN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[140] ,MCI_FORMAT_MILLISECONDS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[141] ,MCI_FORMAT_HMS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[142] ,MCI_FORMAT_MSF));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[143] ,MCI_FORMAT_FRAMES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[144] ,MCI_FORMAT_SMPTE_24));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[145] ,MCI_FORMAT_SMPTE_25));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[146] ,MCI_FORMAT_SMPTE_30));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[147] ,MCI_FORMAT_SMPTE_30DROP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[148] ,MCI_FORMAT_BYTES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[149] ,MCI_FORMAT_SAMPLES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[150] ,MCI_FORMAT_TMSF));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[151] ,MCI_NOTIFY_SUCCESSFUL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[152] ,MCI_NOTIFY_SUPERSEDED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[153] ,MCI_NOTIFY_ABORTED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[154] ,MCI_NOTIFY_FAILURE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[155] ,MCI_NOTIFY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[156] ,MCI_WAIT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[157] ,MCI_FROM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[158] ,MCI_TO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[159] ,MCI_TRACK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[160] ,MCI_OPEN_SHAREABLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[161] ,MCI_OPEN_ELEMENT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[162] ,MCI_OPEN_ALIAS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[163] ,MCI_OPEN_ELEMENT_ID));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[164] ,MCI_OPEN_TYPE_ID));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[165] ,MCI_OPEN_TYPE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[166] ,MCI_SEEK_TO_START));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[167] ,MCI_SEEK_TO_END));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[168] ,MCI_STATUS_ITEM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[169] ,MCI_STATUS_START));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[170] ,MCI_STATUS_LENGTH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[171] ,MCI_STATUS_POSITION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[172] ,MCI_STATUS_NUMBER_OF_TRACKS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[173] ,MCI_STATUS_MODE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[174] ,MCI_STATUS_MEDIA_PRESENT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[175] ,MCI_STATUS_TIME_FORMAT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[176] ,MCI_STATUS_READY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[177] ,MCI_STATUS_CURRENT_TRACK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[178] ,MCI_INFO_PRODUCT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[179] ,MCI_INFO_FILE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[180] ,MCI_INFO_MEDIA_UPC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[181] ,MCI_INFO_MEDIA_IDENTITY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[182] ,MCI_INFO_NAME));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[183] ,MCI_INFO_COPYRIGHT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[184] ,MCI_GETDEVCAPS_ITEM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[185] ,MCI_GETDEVCAPS_CAN_RECORD));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[186] ,MCI_GETDEVCAPS_HAS_AUDIO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[187] ,MCI_GETDEVCAPS_HAS_VIDEO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[188] ,MCI_GETDEVCAPS_DEVICE_TYPE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[189] ,MCI_GETDEVCAPS_USES_FILES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[190] ,MCI_GETDEVCAPS_COMPOUND_DEVICE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[191] ,MCI_GETDEVCAPS_CAN_EJECT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[192] ,MCI_GETDEVCAPS_CAN_PLAY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[193] ,MCI_GETDEVCAPS_CAN_SAVE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[194] ,MCI_SYSINFO_QUANTITY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[195] ,MCI_SYSINFO_OPEN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[196] ,MCI_SYSINFO_NAME));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[197] ,MCI_SYSINFO_INSTALLNAME));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[198] ,MCI_SET_DOOR_OPEN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[199] ,MCI_SET_DOOR_CLOSED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[200] ,MCI_SET_TIME_FORMAT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[201] ,MCI_SET_AUDIO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[202] ,MCI_SET_VIDEO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[203] ,MCI_SET_ON));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[204] ,MCI_SET_OFF));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[205] ,MCI_SET_AUDIO_ALL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[206] ,MCI_SET_AUDIO_LEFT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[207] ,MCI_SET_AUDIO_RIGHT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[208] ,MCI_BREAK_KEY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[209] ,MCI_BREAK_HWND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[210] ,MCI_BREAK_OFF));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[211] ,MCI_RECORD_INSERT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[212] ,MCI_RECORD_OVERWRITE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[213] ,MCI_SOUND_NAME));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[214] ,MCI_SAVE_FILE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[215] ,MCI_LOAD_FILE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[216] ,MCI_VD_MODE_PARK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[217] ,MCI_VD_MEDIA_CLV));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[218] ,MCI_VD_MEDIA_CAV));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[219] ,MCI_VD_MEDIA_OTHER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[220] ,MCI_VD_FORMAT_TRACK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[221] ,MCI_VD_PLAY_REVERSE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[222] ,MCI_VD_PLAY_FAST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[223] ,MCI_VD_PLAY_SPEED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[224] ,MCI_VD_PLAY_SCAN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[225] ,MCI_VD_PLAY_SLOW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[226] ,MCI_VD_SEEK_REVERSE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[227] ,MCI_VD_STATUS_SPEED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[228] ,MCI_VD_STATUS_FORWARD));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[229] ,MCI_VD_STATUS_MEDIA_TYPE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[230] ,MCI_VD_STATUS_SIDE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[231] ,MCI_VD_STATUS_DISC_SIZE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[232] ,MCI_VD_GETDEVCAPS_CLV));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[233] ,MCI_VD_GETDEVCAPS_CAV));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[234] ,MCI_VD_SPIN_UP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[235] ,MCI_VD_SPIN_DOWN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[236] ,MCI_VD_GETDEVCAPS_CAN_REVERSE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[237] ,MCI_VD_GETDEVCAPS_FAST_RATE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[238] ,MCI_VD_GETDEVCAPS_SLOW_RATE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[239] ,MCI_VD_GETDEVCAPS_NORMAL_RATE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[240] ,MCI_VD_STEP_FRAMES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[241] ,MCI_VD_STEP_REVERSE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[242] ,MCI_VD_ESCAPE_STRING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[243] ,MCI_CDA_STATUS_TYPE_TRACK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[244] ,MCI_CDA_TRACK_AUDIO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[245] ,MCI_CDA_TRACK_OTHER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[246] ,MCI_WAVE_PCM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[247] ,MCI_WAVE_MAPPER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[248] ,MCI_WAVE_OPEN_BUFFER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[249] ,MCI_WAVE_SET_FORMATTAG));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[250] ,MCI_WAVE_SET_CHANNELS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[251] ,MCI_WAVE_SET_SAMPLESPERSEC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[252] ,MCI_WAVE_SET_AVGBYTESPERSEC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[253] ,MCI_WAVE_SET_BLOCKALIGN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[254] ,MCI_WAVE_SET_BITSPERSAMPLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[255] ,MCI_WAVE_INPUT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[256] ,MCI_WAVE_OUTPUT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[257] ,MCI_WAVE_STATUS_FORMATTAG));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[258] ,MCI_WAVE_STATUS_CHANNELS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[259] ,MCI_WAVE_STATUS_SAMPLESPERSEC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[260] ,MCI_WAVE_STATUS_AVGBYTESPERSEC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[261] ,MCI_WAVE_STATUS_BLOCKALIGN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[262] ,MCI_WAVE_STATUS_BITSPERSAMPLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[263] ,MCI_WAVE_STATUS_LEVEL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[264] ,MCI_WAVE_SET_ANYINPUT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[265] ,MCI_WAVE_SET_ANYOUTPUT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[266] ,MCI_WAVE_GETDEVCAPS_INPUTS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[267] ,MCI_WAVE_GETDEVCAPS_OUTPUTS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[268] ,MCI_SEQ_DIV_PPQN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[269] ,MCI_SEQ_DIV_SMPTE_24));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[270] ,MCI_SEQ_DIV_SMPTE_25));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[271] ,MCI_SEQ_DIV_SMPTE_30DROP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[272] ,MCI_SEQ_DIV_SMPTE_30));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[273] ,MCI_SEQ_FORMAT_SONGPTR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[274] ,MCI_SEQ_FILE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[275] ,MCI_SEQ_MIDI));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[276] ,MCI_SEQ_SMPTE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[277] ,MCI_SEQ_NONE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[278] ,MCI_SEQ_MAPPER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[279] ,MCI_SEQ_STATUS_TEMPO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[280] ,MCI_SEQ_STATUS_PORT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[281] ,MCI_SEQ_STATUS_SLAVE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[282] ,MCI_SEQ_STATUS_MASTER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[283] ,MCI_SEQ_STATUS_OFFSET));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[284] ,MCI_SEQ_STATUS_DIVTYPE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[285] ,MCI_SEQ_STATUS_NAME));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[286] ,MCI_SEQ_STATUS_COPYRIGHT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[287] ,MCI_SEQ_SET_TEMPO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[288] ,MCI_SEQ_SET_PORT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[289] ,MCI_SEQ_SET_SLAVE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[290] ,MCI_SEQ_SET_MASTER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[291] ,MCI_SEQ_SET_OFFSET));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[292] ,MCI_ANIM_OPEN_WS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[293] ,MCI_ANIM_OPEN_PARENT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[294] ,MCI_ANIM_OPEN_NOSTATIC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[295] ,MCI_ANIM_PLAY_SPEED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[296] ,MCI_ANIM_PLAY_REVERSE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[297] ,MCI_ANIM_PLAY_FAST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[298] ,MCI_ANIM_PLAY_SLOW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[299] ,MCI_ANIM_PLAY_SCAN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[300] ,MCI_ANIM_STEP_REVERSE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[301] ,MCI_ANIM_STEP_FRAMES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[302] ,MCI_ANIM_STATUS_SPEED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[303] ,MCI_ANIM_STATUS_FORWARD));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[304] ,MCI_ANIM_STATUS_HWND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[305] ,MCI_ANIM_STATUS_HPAL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[306] ,MCI_ANIM_STATUS_STRETCH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[307] ,MCI_ANIM_INFO_TEXT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[308] ,MCI_ANIM_GETDEVCAPS_CAN_REVERSE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[309] ,MCI_ANIM_GETDEVCAPS_FAST_RATE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[310] ,MCI_ANIM_GETDEVCAPS_SLOW_RATE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[311] ,MCI_ANIM_GETDEVCAPS_NORMAL_RATE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[312] ,MCI_ANIM_GETDEVCAPS_PALETTES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[313] ,MCI_ANIM_GETDEVCAPS_CAN_STRETCH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[314] ,MCI_ANIM_GETDEVCAPS_MAX_WINDOWS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[315] ,MCI_ANIM_REALIZE_NORM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[316] ,MCI_ANIM_REALIZE_BKGD));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[317] ,MCI_ANIM_WINDOW_HWND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[318] ,MCI_ANIM_WINDOW_STATE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[319] ,MCI_ANIM_WINDOW_TEXT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[320] ,MCI_ANIM_WINDOW_ENABLE_STRETCH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[321] ,MCI_ANIM_WINDOW_DISABLE_STRETCH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[322] ,MCI_ANIM_WINDOW_DEFAULT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[323] ,MCI_ANIM_RECT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[324] ,MCI_ANIM_PUT_SOURCE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[325] ,MCI_ANIM_PUT_DESTINATION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[326] ,MCI_ANIM_WHERE_SOURCE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[327] ,MCI_ANIM_WHERE_DESTINATION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[328] ,MCI_ANIM_UPDATE_HDC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[329] ,MCI_OVLY_OPEN_WS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[330] ,MCI_OVLY_OPEN_PARENT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[331] ,MCI_OVLY_STATUS_HWND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[332] ,MCI_OVLY_STATUS_STRETCH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[333] ,MCI_OVLY_INFO_TEXT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[334] ,MCI_OVLY_GETDEVCAPS_CAN_STRETCH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[335] ,MCI_OVLY_GETDEVCAPS_CAN_FREEZE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[336] ,MCI_OVLY_GETDEVCAPS_MAX_WINDOWS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[337] ,MCI_OVLY_WINDOW_HWND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[338] ,MCI_OVLY_WINDOW_STATE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[339] ,MCI_OVLY_WINDOW_TEXT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[340] ,MCI_OVLY_WINDOW_ENABLE_STRETCH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[341] ,MCI_OVLY_WINDOW_DISABLE_STRETCH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[342] ,MCI_OVLY_WINDOW_DEFAULT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[343] ,MCI_OVLY_RECT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[344] ,MCI_OVLY_PUT_SOURCE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[345] ,MCI_OVLY_PUT_DESTINATION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[346] ,MCI_OVLY_PUT_FRAME));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[347] ,MCI_OVLY_PUT_VIDEO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[348] ,MCI_OVLY_WHERE_SOURCE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[349] ,MCI_OVLY_WHERE_DESTINATION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[350] ,MCI_OVLY_WHERE_FRAME));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[351] ,MCI_OVLY_WHERE_VIDEO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[352] ,NEWTRANSPARENT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[353] ,QUERYROPSUPPORT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[354] ,SELECTDIB));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[355] ,SC_SCREENSAVE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[356] ,mmsyst));
end;

procedure __UnregisterConsts1;
var i : integer;
begin
__RegisteredConstsList1.Free
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..410] of string = (
'_MMCKINFO'
,'_MMIOINFO'
,'AUXCAPS'
,'AUXCAPSA'
,'AUXCAPSW'
,'DRVCONFIGINFO'
,'DRVCONFIGINFOEX'
,'JOYCAPS'
,'JOYCAPSA'
,'JOYCAPSW'
,'JOYINFO'
,'joyinfo_tag'
,'JOYINFOEX'
,'joyinfoex_tag'
,'MCI_ANIM_OPEN_PARMS'
,'MCI_ANIM_OPEN_PARMSA'
,'MCI_ANIM_OPEN_PARMSW'
,'MCI_ANIM_PLAY_PARMS'
,'MCI_ANIM_RECT_PARMS'
,'MCI_ANIM_STEP_PARMS'
,'MCI_ANIM_UPDATE_PARMS'
,'MCI_ANIM_WINDOW_PARMS'
,'MCI_ANIM_WINDOW_PARMSA'
,'MCI_ANIM_WINDOW_PARMSW'
,'MCI_BREAK_PARMS'
,'MCI_GENERIC_PARMS'
,'MCI_GETDEVCAPS_PARMS'
,'MCI_INFO_PARMS'
,'MCI_INFO_PARMSA'
,'MCI_INFO_PARMSW'
,'MCI_LOAD_PARMS'
,'MCI_LOAD_PARMSA'
,'MCI_LOAD_PARMSW'
,'MCI_OPEN_PARMS'
,'MCI_OPEN_PARMSA'
,'MCI_OPEN_PARMSW'
,'MCI_OVLY_LOAD_PARMS'
,'MCI_OVLY_LOAD_PARMSA'
,'MCI_OVLY_LOAD_PARMSW'
,'MCI_OVLY_OPEN_PARMS'
,'MCI_OVLY_OPEN_PARMSA'
,'MCI_OVLY_OPEN_PARMSW'
,'MCI_OVLY_RECT_PARMS'
,'MCI_OVLY_SAVE_PARMS'
,'MCI_OVLY_SAVE_PARMSA'
,'MCI_OVLY_SAVE_PARMSW'
,'MCI_OVLY_WINDOW_PARMS'
,'MCI_OVLY_WINDOW_PARMSA'
,'MCI_OVLY_WINDOW_PARMSW'
,'MCI_PLAY_PARMS'
,'MCI_RECORD_PARMS'
,'MCI_SAVE_PARMS'
,'MCI_SAVE_PARMSA'
,'MCI_SAVE_PARMSW'
,'MCI_SEEK_PARMS'
,'MCI_SEQ_SET_PARMS'
,'MCI_SET_PARMS'
,'MCI_STATUS_PARMS'
,'MCI_SYSINFO_PARMS'
,'MCI_SYSINFO_PARMSA'
,'MCI_SYSINFO_PARMSW'
,'MCI_VD_ESCAPE_PARMS'
,'MCI_VD_ESCAPE_PARMSA'
,'MCI_VD_ESCAPE_PARMSW'
,'MCI_VD_PLAY_PARMS'
,'MCI_VD_STEP_PARMS'
,'MCI_WAVE_DELETE_PARMS'
,'MCI_WAVE_OPEN_PARMS'
,'MCI_WAVE_OPEN_PARMSA'
,'MCI_WAVE_OPEN_PARMSW'
,'MCI_WAVE_SET_PARMS'
,'MIDIEVENT'
,'midievent_tag'
,'MIDIHDR'
,'midihdr_tag'
,'MIDIINCAPS'
,'MIDIINCAPSA'
,'MIDIINCAPSW'
,'MIDIOUTCAPS'
,'MIDIOUTCAPSA'
,'MIDIOUTCAPSW'
,'MIDIPROPTEMPO'
,'midiproptempo_tag'
,'MIDIPROPTIMEDIV'
,'midiproptimediv_tag'
,'MIDISTRMBUFFVER'
,'midistrmbuffver_tag'
,'MIXERCAPS'
,'MIXERCAPSA'
,'MIXERCAPSW'
,'MIXERCONTROLDETAILS_BOOLEAN'
,'MIXERCONTROLDETAILS_LISTTEXT'
,'MIXERCONTROLDETAILS_LISTTEXTA'
,'MIXERCONTROLDETAILS_LISTTEXTW'
,'MIXERCONTROLDETAILS_SIGNED'
,'MIXERCONTROLDETAILS_UNSIGNED'
,'MIXERLINE'
,'MIXERLINEA'
,'MIXERLINECONTROLS'
,'MIXERLINECONTROLSA'
,'MIXERLINECONTROLSW'
,'MIXERLINEW'
,'MMCKINFO'
,'MMIOINFO'
,'MMTIME'
,'mmtime_tag'
,'PCMWAVEFORMAT'
,'pcmwaveformat_tag'
,'tagAUXCAPS'
,'tagAUXCAPSA'
,'tagAUXCAPSW'
,'tagDRVCONFIGINFO'
,'tagJOYCAPS'
,'tagJOYCAPSA'
,'tagJOYCAPSW'
,'tagMCI_ANIM_OPEN_PARMS'
,'tagMCI_ANIM_OPEN_PARMSA'
,'tagMCI_ANIM_OPEN_PARMSW'
,'tagMCI_ANIM_PLAY_PARMS'
,'tagMCI_ANIM_RECT_PARMS'
,'tagMCI_ANIM_STEP_PARMS'
,'tagMCI_ANIM_UPDATE_PARMS'
,'tagMCI_ANIM_WINDOW_PARMS'
,'tagMCI_ANIM_WINDOW_PARMSA'
,'tagMCI_ANIM_WINDOW_PARMSW'
,'tagMCI_BREAK_PARMS'
,'tagMCI_GENERIC_PARMS'
,'tagMCI_GETDEVCAPS_PARMS'
,'tagMCI_INFO_PARMS'
,'tagMCI_INFO_PARMSA'
,'tagMCI_INFO_PARMSW'
,'tagMCI_LOAD_PARMS'
,'tagMCI_LOAD_PARMSA'
,'tagMCI_LOAD_PARMSW'
,'tagMCI_OPEN_PARMS'
,'tagMCI_OPEN_PARMSA'
,'tagMCI_OPEN_PARMSW'
,'tagMCI_OVLY_LOAD_PARMS'
,'tagMCI_OVLY_LOAD_PARMSA'
,'tagMCI_OVLY_LOAD_PARMSW'
,'tagMCI_OVLY_OPEN_PARMS'
,'tagMCI_OVLY_OPEN_PARMSA'
,'tagMCI_OVLY_OPEN_PARMSW'
,'tagMCI_OVLY_RECT_PARMS'
,'tagMCI_OVLY_SAVE_PARMS'
,'tagMCI_OVLY_SAVE_PARMSA'
,'tagMCI_OVLY_SAVE_PARMSW'
,'tagMCI_OVLY_WINDOW_PARMS'
,'tagMCI_OVLY_WINDOW_PARMSA'
,'tagMCI_OVLY_WINDOW_PARMSW'
,'tagMCI_PLAY_PARMS'
,'tagMCI_RECORD_PARMS'
,'tagMCI_SEEK_PARMS'
,'tagMCI_SEQ_SET_PARMS'
,'tagMCI_SET_PARMS'
,'tagMCI_STATUS_PARMS'
,'tagMCI_SYSINFO_PARMS'
,'tagMCI_SYSINFO_PARMSA'
,'tagMCI_SYSINFO_PARMSW'
,'tagMCI_VD_ESCAPE_PARMS'
,'tagMCI_VD_ESCAPE_PARMSA'
,'tagMCI_VD_ESCAPE_PARMSW'
,'tagMCI_VD_PLAY_PARMS'
,'tagMCI_VD_STEP_PARMS'
,'tagMCI_WAVE_DELETE_PARMS'
,'tagMCI_WAVE_OPEN_PARMS'
,'tagMCI_WAVE_OPEN_PARMSA'
,'tagMCI_WAVE_OPEN_PARMSW'
,'tagMCI_WAVE_SET_PARMS'
,'tagMIDIINCAPS'
,'tagMIDIINCAPSA'
,'tagMIDIINCAPSW'
,'tagMIDIOUTCAPS'
,'tagMIDIOUTCAPSA'
,'tagMIDIOUTCAPSW'
,'tagMIXERCAPS'
,'tagMIXERCAPSA'
,'tagMIXERCAPSW'
,'tagMIXERCONTROLDETAILS_LISTTEXT'
,'tagMIXERCONTROLDETAILS_LISTTEXTA'
,'tagMIXERCONTROLDETAILS_LISTTEXTW'
,'tagMIXERLINE'
,'tagMIXERLINEA'
,'tagMIXERLINECONTROLS'
,'tagMIXERLINECONTROLSA'
,'tagMIXERLINECONTROLSW'
,'tagMIXERLINEW'
,'tagWAVEINCAPS'
,'tagWAVEINCAPSA'
,'tagWAVEINCAPSW'
,'tagWAVEOUTCAPS'
,'tagWAVEOUTCAPSA'
,'tagWAVEOUTCAPSW'
,'TAuxCaps'
,'TAuxCapsA'
,'TAuxCapsW'
,'TDrvConfigInfo'
,'TDrvConfigInfoEx'
,'TIMECAPS'
,'timecaps_tag'
,'TJoyCaps'
,'TJoyCapsA'
,'TJoyCapsW'
,'TJoyInfo'
,'TJoyInfoEx'
,'TMCI_Anim_Open_Parms'
,'TMCI_Anim_Open_ParmsA'
,'TMCI_Anim_Open_ParmsW'
,'TMCI_Anim_Play_Parms'
,'TMCI_Anim_Rect_Parms'
,'TMCI_Anim_Step_Parms'
,'TMCI_Anim_Update_Parms'
,'TMCI_Anim_Window_Parms'
,'TMCI_Anim_Window_ParmsA'
,'TMCI_Anim_Window_ParmsW'
,'TMCI_BReak_Parms'
,'TMCI_Generic_Parms'
,'TMCI_GetDevCaps_Parms'
,'TMCI_Info_Parms'
,'TMCI_Info_ParmsA'
,'TMCI_Info_ParmsW'
,'TMCI_Load_Parms'
,'TMCI_Load_ParmsA'
,'TMCI_Load_ParmsW'
,'TMCI_Open_Parms'
,'TMCI_Open_ParmsA'
,'TMCI_Open_ParmsW'
,'TMCI_Ovly_Load_Parms'
,'TMCI_Ovly_Load_ParmsA'
,'TMCI_Ovly_Load_ParmsW'
,'TMCI_Ovly_Open_Parms'
,'TMCI_Ovly_Open_ParmsA'
,'TMCI_Ovly_Open_ParmsW'
,'TMCI_Ovly_Rect_Parms'
,'TMCI_Ovly_Save_Parms'
,'TMCI_Ovly_Save_ParmsA'
,'TMCI_Ovly_Save_ParmsW'
,'TMCI_Ovly_Window_Parms'
,'TMCI_Ovly_Window_ParmsA'
,'TMCI_Ovly_Window_ParmsW'
,'TMCI_Play_Parms'
,'TMCI_Record_Parms'
,'TMCI_SaveParms'
,'TMCI_SaveParmsA'
,'TMCI_SaveParmsW'
,'TMCI_Seek_Parms'
,'TMCI_Seq_Set_Parms'
,'TMCI_Set_Parms'
,'TMCI_Sound_Parms'
,'TMCI_Status_Parms'
,'TMCI_SysInfo_Parms'
,'TMCI_SysInfo_ParmsA'
,'TMCI_SysInfo_ParmsW'
,'TMCI_VD_Escape_Parms'
,'TMCI_VD_Escape_ParmsA'
,'TMCI_VD_Escape_ParmsW'
,'TMCI_VD_Play_Parms'
,'TMCI_VD_Step_Parms'
,'TMCI_Wave_Delete_Parms'
,'TMCI_Wave_Open_Parms'
,'TMCI_Wave_Open_ParmsA'
,'TMCI_Wave_Open_ParmsW'
,'TMCI_Wave_Set_Parms'
,'TMidiEvent'
,'TMidiHdr'
,'TMidiInCaps'
,'TMidiInCapsA'
,'TMidiInCapsW'
,'TMidiOutCaps'
,'TMidiOutCapsA'
,'TMidiOutCapsW'
,'TMidiPropTempo'
,'TMidiPropTimeDiv'
,'TMidiStrmBuffVer'
,'TMixerCaps'
,'TMixerCapsA'
,'TMixerCapsW'
,'tMIXERCONTROLDETAILS'
,'tMIXERCONTROLDETAILS_BOOLEAN'
,'tMIXERCONTROLDETAILS_SIGNED'
,'tMIXERCONTROLDETAILS_UNSIGNED'
,'TMixerControlDetailsBoolean'
,'TMixerControlDetailsListText'
,'TMixerControlDetailsListTextA'
,'TMixerControlDetailsListTextW'
,'TMixerControlDetailsSigned'
,'TMixerControlDetailsUnsigned'
,'TMixerLine'
,'TMixerLineA'
,'TMixerLineControls'
,'TMixerLineControlsA'
,'TMixerLineControlsW'
,'TMixerLineW'
,'TMMCKInfo'
,'TMMIOInfo'
,'TMMTime'
,'TPCMWaveFormat'
,'TTimeCaps'
,'TWaveFormat'
,'tWAVEFORMATEX'
,'TWaveHdr'
,'TWaveInCaps'
,'TWaveInCapsA'
,'TWaveInCapsW'
,'TWaveOutCaps'
,'TWaveOutCapsA'
,'TWaveOutCapsW'
,'WAVEFORMAT'
,'waveformat_tag'
,'WAVEHDR'
,'wavehdr_tag'
,'WAVEINCAPS'
,'WAVEINCAPSA'
,'WAVEINCAPSW'
,'WAVEOUTCAPS'
,'WAVEOUTCAPSA'
,'WAVEOUTCAPSW'
,'CloseDriver'
,'SendDriverMessage'
,'DrvGetModuleHandle'
,'GetDriverModuleHandle'
,'DefDriverProc'
,'mmsystemGetVersion'
,'waveOutGetNumDevs'
,'waveOutGetVolume'
,'waveOutSetVolume'
,'waveOutClose'
,'waveOutPause'
,'waveOutRestart'
,'waveOutReset'
,'waveOutBreakLoop'
,'waveOutGetPitch'
,'waveOutSetPitch'
,'waveOutGetPlaybackRate'
,'waveOutSetPlaybackRate'
,'waveOutGetID'
,'waveOutMessage'
,'waveInGetNumDevs'
,'waveInClose'
,'waveInStart'
,'waveInStop'
,'waveInReset'
,'waveInGetID'
,'waveInMessage'
,'midiOutGetNumDevs'
,'midiStreamOpen'
,'midiStreamClose'
,'midiStreamProperty'
,'midiStreamPause'
,'midiStreamRestart'
,'midiStreamStop'
,'midiConnect'
,'midiDisconnect'
,'midiOutGetVolume'
,'midiOutSetVolume'
,'midiOutOpen'
,'midiOutClose'
,'midiOutShortMsg'
,'midiOutReset'
,'midiOutCachePatches'
,'midiOutCacheDrumPatches'
,'midiOutGetID'
,'midiOutMessage'
,'midiInGetNumDevs'
,'midiInOpen'
,'midiInClose'
,'midiInStart'
,'midiInStop'
,'midiInReset'
,'midiInGetID'
,'midiInMessage'
,'auxGetNumDevs'
,'auxSetVolume'
,'auxGetVolume'
,'auxOutMessage'
,'mixerGetNumDevs'
,'mixerOpen'
,'mixerClose'
,'mixerMessage'
,'mixerGetID'
,'timeGetTime'
,'timeKillEvent'
,'timeBeginPeriod'
,'timeEndPeriod'
,'joyGetNumDevs'
,'joyGetThreshold'
,'joyReleaseCapture'
,'joySetCapture'
,'joySetThreshold'
,'mmioClose'
,'mmioSeek'
,'mmioFlush'
,'mmioSendMessage'
,'mciSendCommand'
,'mciSendCommandA'
,'mciSendCommandW'
,'mciGetCreatorTask'
,'mci_MSF_Minute'
,'mci_MSF_Second'
,'mci_MSF_Frame'
,'mci_Make_MSF'
,'mci_TMSF_Track'
,'mci_TMSF_Minute'
,'mci_TMSF_Second'
,'mci_TMSF_Frame'
,'mci_Make_TMSF'
,'mci_HMS_Hour'
,'mci_HMS_Minute'
,'mci_HMS_Second'
,'mci_Make_HMS'
,'DIBIndex'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(__MMCKINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(__MMIOINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_AUXCAPS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(_AUXCAPSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(_AUXCAPSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[5],Addr(_DRVCONFIGINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[6],Addr(_DRVCONFIGINFOEX_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[7],Addr(_JOYCAPS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[8],Addr(_JOYCAPSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[9],Addr(_JOYCAPSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[10],Addr(_JOYINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[11],Addr(_joyinfo_tag_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[12],Addr(_JOYINFOEX_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[13],Addr(_joyinfoex_tag_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[14],Addr(_MCI_ANIM_OPEN_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[15],Addr(_MCI_ANIM_OPEN_PARMSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[16],Addr(_MCI_ANIM_OPEN_PARMSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[17],Addr(_MCI_ANIM_PLAY_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[18],Addr(_MCI_ANIM_RECT_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[19],Addr(_MCI_ANIM_STEP_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[20],Addr(_MCI_ANIM_UPDATE_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[21],Addr(_MCI_ANIM_WINDOW_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[22],Addr(_MCI_ANIM_WINDOW_PARMSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[23],Addr(_MCI_ANIM_WINDOW_PARMSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[24],Addr(_MCI_BREAK_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[25],Addr(_MCI_GENERIC_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[26],Addr(_MCI_GETDEVCAPS_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[27],Addr(_MCI_INFO_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[28],Addr(_MCI_INFO_PARMSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[29],Addr(_MCI_INFO_PARMSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[30],Addr(_MCI_LOAD_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[31],Addr(_MCI_LOAD_PARMSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[32],Addr(_MCI_LOAD_PARMSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[33],Addr(_MCI_OPEN_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[34],Addr(_MCI_OPEN_PARMSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[35],Addr(_MCI_OPEN_PARMSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[36],Addr(_MCI_OVLY_LOAD_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[37],Addr(_MCI_OVLY_LOAD_PARMSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[38],Addr(_MCI_OVLY_LOAD_PARMSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[39],Addr(_MCI_OVLY_OPEN_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[40],Addr(_MCI_OVLY_OPEN_PARMSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[41],Addr(_MCI_OVLY_OPEN_PARMSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[42],Addr(_MCI_OVLY_RECT_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[43],Addr(_MCI_OVLY_SAVE_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[44],Addr(_MCI_OVLY_SAVE_PARMSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[45],Addr(_MCI_OVLY_SAVE_PARMSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[46],Addr(_MCI_OVLY_WINDOW_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[47],Addr(_MCI_OVLY_WINDOW_PARMSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[48],Addr(_MCI_OVLY_WINDOW_PARMSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[49],Addr(_MCI_PLAY_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[50],Addr(_MCI_RECORD_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[51],Addr(_MCI_SAVE_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[52],Addr(_MCI_SAVE_PARMSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[53],Addr(_MCI_SAVE_PARMSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[54],Addr(_MCI_SEEK_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[55],Addr(_MCI_SEQ_SET_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[56],Addr(_MCI_SET_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[57],Addr(_MCI_STATUS_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[58],Addr(_MCI_SYSINFO_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[59],Addr(_MCI_SYSINFO_PARMSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[60],Addr(_MCI_SYSINFO_PARMSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[61],Addr(_MCI_VD_ESCAPE_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[62],Addr(_MCI_VD_ESCAPE_PARMSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[63],Addr(_MCI_VD_ESCAPE_PARMSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[64],Addr(_MCI_VD_PLAY_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[65],Addr(_MCI_VD_STEP_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[66],Addr(_MCI_WAVE_DELETE_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[67],Addr(_MCI_WAVE_OPEN_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[68],Addr(_MCI_WAVE_OPEN_PARMSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[69],Addr(_MCI_WAVE_OPEN_PARMSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[70],Addr(_MCI_WAVE_SET_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[71],Addr(_MIDIEVENT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[72],Addr(_midievent_tag_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[73],Addr(_MIDIHDR_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[74],Addr(_midihdr_tag_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[75],Addr(_MIDIINCAPS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[76],Addr(_MIDIINCAPSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[77],Addr(_MIDIINCAPSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[78],Addr(_MIDIOUTCAPS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[79],Addr(_MIDIOUTCAPSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[80],Addr(_MIDIOUTCAPSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[81],Addr(_MIDIPROPTEMPO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[82],Addr(_midiproptempo_tag_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[83],Addr(_MIDIPROPTIMEDIV_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[84],Addr(_midiproptimediv_tag_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[85],Addr(_MIDISTRMBUFFVER_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[86],Addr(_midistrmbuffver_tag_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[87],Addr(_MIXERCAPS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[88],Addr(_MIXERCAPSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[89],Addr(_MIXERCAPSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[90],Addr(_MIXERCONTROLDETAILS_BOOLEAN_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[91],Addr(_MIXERCONTROLDETAILS_LISTTEXT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[92],Addr(_MIXERCONTROLDETAILS_LISTTEXTA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[93],Addr(_MIXERCONTROLDETAILS_LISTTEXTW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[94],Addr(_MIXERCONTROLDETAILS_SIGNED_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[95],Addr(_MIXERCONTROLDETAILS_UNSIGNED_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[96],Addr(_MIXERLINE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[97],Addr(_MIXERLINEA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[98],Addr(_MIXERLINECONTROLS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[99],Addr(_MIXERLINECONTROLSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[100],Addr(_MIXERLINECONTROLSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[101],Addr(_MIXERLINEW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[102],Addr(_MMCKINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[103],Addr(_MMIOINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[104],Addr(_MMTIME_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[105],Addr(_mmtime_tag_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[106],Addr(_PCMWAVEFORMAT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[107],Addr(_pcmwaveformat_tag_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[108],Addr(_tagAUXCAPS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[109],Addr(_tagAUXCAPSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[110],Addr(_tagAUXCAPSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[111],Addr(_tagDRVCONFIGINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[112],Addr(_tagJOYCAPS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[113],Addr(_tagJOYCAPSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[114],Addr(_tagJOYCAPSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[115],Addr(_tagMCI_ANIM_OPEN_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[116],Addr(_tagMCI_ANIM_OPEN_PARMSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[117],Addr(_tagMCI_ANIM_OPEN_PARMSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[118],Addr(_tagMCI_ANIM_PLAY_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[119],Addr(_tagMCI_ANIM_RECT_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[120],Addr(_tagMCI_ANIM_STEP_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[121],Addr(_tagMCI_ANIM_UPDATE_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[122],Addr(_tagMCI_ANIM_WINDOW_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[123],Addr(_tagMCI_ANIM_WINDOW_PARMSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[124],Addr(_tagMCI_ANIM_WINDOW_PARMSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[125],Addr(_tagMCI_BREAK_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[126],Addr(_tagMCI_GENERIC_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[127],Addr(_tagMCI_GETDEVCAPS_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[128],Addr(_tagMCI_INFO_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[129],Addr(_tagMCI_INFO_PARMSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[130],Addr(_tagMCI_INFO_PARMSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[131],Addr(_tagMCI_LOAD_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[132],Addr(_tagMCI_LOAD_PARMSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[133],Addr(_tagMCI_LOAD_PARMSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[134],Addr(_tagMCI_OPEN_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[135],Addr(_tagMCI_OPEN_PARMSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[136],Addr(_tagMCI_OPEN_PARMSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[137],Addr(_tagMCI_OVLY_LOAD_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[138],Addr(_tagMCI_OVLY_LOAD_PARMSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[139],Addr(_tagMCI_OVLY_LOAD_PARMSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[140],Addr(_tagMCI_OVLY_OPEN_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[141],Addr(_tagMCI_OVLY_OPEN_PARMSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[142],Addr(_tagMCI_OVLY_OPEN_PARMSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[143],Addr(_tagMCI_OVLY_RECT_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[144],Addr(_tagMCI_OVLY_SAVE_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[145],Addr(_tagMCI_OVLY_SAVE_PARMSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[146],Addr(_tagMCI_OVLY_SAVE_PARMSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[147],Addr(_tagMCI_OVLY_WINDOW_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[148],Addr(_tagMCI_OVLY_WINDOW_PARMSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[149],Addr(_tagMCI_OVLY_WINDOW_PARMSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[150],Addr(_tagMCI_PLAY_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[151],Addr(_tagMCI_RECORD_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[152],Addr(_tagMCI_SEEK_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[153],Addr(_tagMCI_SEQ_SET_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[154],Addr(_tagMCI_SET_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[155],Addr(_tagMCI_STATUS_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[156],Addr(_tagMCI_SYSINFO_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[157],Addr(_tagMCI_SYSINFO_PARMSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[158],Addr(_tagMCI_SYSINFO_PARMSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[159],Addr(_tagMCI_VD_ESCAPE_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[160],Addr(_tagMCI_VD_ESCAPE_PARMSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[161],Addr(_tagMCI_VD_ESCAPE_PARMSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[162],Addr(_tagMCI_VD_PLAY_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[163],Addr(_tagMCI_VD_STEP_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[164],Addr(_tagMCI_WAVE_DELETE_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[165],Addr(_tagMCI_WAVE_OPEN_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[166],Addr(_tagMCI_WAVE_OPEN_PARMSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[167],Addr(_tagMCI_WAVE_OPEN_PARMSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[168],Addr(_tagMCI_WAVE_SET_PARMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[169],Addr(_tagMIDIINCAPS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[170],Addr(_tagMIDIINCAPSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[171],Addr(_tagMIDIINCAPSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[172],Addr(_tagMIDIOUTCAPS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[173],Addr(_tagMIDIOUTCAPSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[174],Addr(_tagMIDIOUTCAPSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[175],Addr(_tagMIXERCAPS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[176],Addr(_tagMIXERCAPSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[177],Addr(_tagMIXERCAPSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[178],Addr(_tagMIXERCONTROLDETAILS_LISTTEXT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[179],Addr(_tagMIXERCONTROLDETAILS_LISTTEXTA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[180],Addr(_tagMIXERCONTROLDETAILS_LISTTEXTW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[181],Addr(_tagMIXERLINE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[182],Addr(_tagMIXERLINEA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[183],Addr(_tagMIXERLINECONTROLS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[184],Addr(_tagMIXERLINECONTROLSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[185],Addr(_tagMIXERLINECONTROLSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[186],Addr(_tagMIXERLINEW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[187],Addr(_tagWAVEINCAPS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[188],Addr(_tagWAVEINCAPSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[189],Addr(_tagWAVEINCAPSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[190],Addr(_tagWAVEOUTCAPS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[191],Addr(_tagWAVEOUTCAPSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[192],Addr(_tagWAVEOUTCAPSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[193],Addr(_TAuxCaps_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[194],Addr(_TAuxCapsA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[195],Addr(_TAuxCapsW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[196],Addr(_TDrvConfigInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[197],Addr(_TDrvConfigInfoEx_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[198],Addr(_TIMECAPS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[199],Addr(_timecaps_tag_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[200],Addr(_TJoyCaps_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[201],Addr(_TJoyCapsA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[202],Addr(_TJoyCapsW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[203],Addr(_TJoyInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[204],Addr(_TJoyInfoEx_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[205],Addr(_TMCI_Anim_Open_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[206],Addr(_TMCI_Anim_Open_ParmsA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[207],Addr(_TMCI_Anim_Open_ParmsW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[208],Addr(_TMCI_Anim_Play_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[209],Addr(_TMCI_Anim_Rect_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[210],Addr(_TMCI_Anim_Step_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[211],Addr(_TMCI_Anim_Update_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[212],Addr(_TMCI_Anim_Window_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[213],Addr(_TMCI_Anim_Window_ParmsA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[214],Addr(_TMCI_Anim_Window_ParmsW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[215],Addr(_TMCI_BReak_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[216],Addr(_TMCI_Generic_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[217],Addr(_TMCI_GetDevCaps_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[218],Addr(_TMCI_Info_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[219],Addr(_TMCI_Info_ParmsA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[220],Addr(_TMCI_Info_ParmsW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[221],Addr(_TMCI_Load_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[222],Addr(_TMCI_Load_ParmsA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[223],Addr(_TMCI_Load_ParmsW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[224],Addr(_TMCI_Open_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[225],Addr(_TMCI_Open_ParmsA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[226],Addr(_TMCI_Open_ParmsW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[227],Addr(_TMCI_Ovly_Load_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[228],Addr(_TMCI_Ovly_Load_ParmsA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[229],Addr(_TMCI_Ovly_Load_ParmsW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[230],Addr(_TMCI_Ovly_Open_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[231],Addr(_TMCI_Ovly_Open_ParmsA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[232],Addr(_TMCI_Ovly_Open_ParmsW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[233],Addr(_TMCI_Ovly_Rect_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[234],Addr(_TMCI_Ovly_Save_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[235],Addr(_TMCI_Ovly_Save_ParmsA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[236],Addr(_TMCI_Ovly_Save_ParmsW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[237],Addr(_TMCI_Ovly_Window_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[238],Addr(_TMCI_Ovly_Window_ParmsA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[239],Addr(_TMCI_Ovly_Window_ParmsW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[240],Addr(_TMCI_Play_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[241],Addr(_TMCI_Record_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[242],Addr(_TMCI_SaveParms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[243],Addr(_TMCI_SaveParmsA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[244],Addr(_TMCI_SaveParmsW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[245],Addr(_TMCI_Seek_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[246],Addr(_TMCI_Seq_Set_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[247],Addr(_TMCI_Set_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[248],Addr(_TMCI_Sound_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[249],Addr(_TMCI_Status_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[250],Addr(_TMCI_SysInfo_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[251],Addr(_TMCI_SysInfo_ParmsA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[252],Addr(_TMCI_SysInfo_ParmsW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[253],Addr(_TMCI_VD_Escape_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[254],Addr(_TMCI_VD_Escape_ParmsA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[255],Addr(_TMCI_VD_Escape_ParmsW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[256],Addr(_TMCI_VD_Play_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[257],Addr(_TMCI_VD_Step_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[258],Addr(_TMCI_Wave_Delete_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[259],Addr(_TMCI_Wave_Open_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[260],Addr(_TMCI_Wave_Open_ParmsA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[261],Addr(_TMCI_Wave_Open_ParmsW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[262],Addr(_TMCI_Wave_Set_Parms_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[263],Addr(_TMidiEvent_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[264],Addr(_TMidiHdr_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[265],Addr(_TMidiInCaps_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[266],Addr(_TMidiInCapsA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[267],Addr(_TMidiInCapsW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[268],Addr(_TMidiOutCaps_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[269],Addr(_TMidiOutCapsA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[270],Addr(_TMidiOutCapsW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[271],Addr(_TMidiPropTempo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[272],Addr(_TMidiPropTimeDiv_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[273],Addr(_TMidiStrmBuffVer_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[274],Addr(_TMixerCaps_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[275],Addr(_TMixerCapsA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[276],Addr(_TMixerCapsW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[277],Addr(_tMIXERCONTROLDETAILS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[278],Addr(_tMIXERCONTROLDETAILS_BOOLEAN_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[279],Addr(_tMIXERCONTROLDETAILS_SIGNED_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[280],Addr(_tMIXERCONTROLDETAILS_UNSIGNED_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[281],Addr(_TMixerControlDetailsBoolean_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[282],Addr(_TMixerControlDetailsListText_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[283],Addr(_TMixerControlDetailsListTextA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[284],Addr(_TMixerControlDetailsListTextW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[285],Addr(_TMixerControlDetailsSigned_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[286],Addr(_TMixerControlDetailsUnsigned_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[287],Addr(_TMixerLine_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[288],Addr(_TMixerLineA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[289],Addr(_TMixerLineControls_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[290],Addr(_TMixerLineControlsA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[291],Addr(_TMixerLineControlsW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[292],Addr(_TMixerLineW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[293],Addr(_TMMCKInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[294],Addr(_TMMIOInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[295],Addr(_TMMTime_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[296],Addr(_TPCMWaveFormat_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[297],Addr(_TTimeCaps_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[298],Addr(_TWaveFormat_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[299],Addr(_tWAVEFORMATEX_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[300],Addr(_TWaveHdr_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[301],Addr(_TWaveInCaps_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[302],Addr(_TWaveInCapsA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[303],Addr(_TWaveInCapsW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[304],Addr(_TWaveOutCaps_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[305],Addr(_TWaveOutCapsA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[306],Addr(_TWaveOutCapsW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[307],Addr(_WAVEFORMAT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[308],Addr(_waveformat_tag_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[309],Addr(_WAVEHDR_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[310],Addr(_wavehdr_tag_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[311],Addr(_WAVEINCAPS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[312],Addr(_WAVEINCAPSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[313],Addr(_WAVEINCAPSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[314],Addr(_WAVEOUTCAPS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[315],Addr(_WAVEOUTCAPSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[316],Addr(_WAVEOUTCAPSW_)));
RegisterProc(nil,MethodNames[317],mtProc,TypeInfo(_T0),[
TypeInfo(HDRVR),
TypeInfo(Longint),
TypeInfo(Longint),TypeInfo(Longint)],Addr(CloseDriver),cStdCall);

RegisterProc(nil,MethodNames[318],mtProc,TypeInfo(_T2),[
TypeInfo(HDRVR),
TypeInfo(UINT),
TypeInfo(Longint),
TypeInfo(Longint),TypeInfo(Longint)],Addr(SendDriverMessage),cStdCall);

RegisterProc(nil,MethodNames[319],mtProc,TypeInfo(_T3),[
TypeInfo(HDRVR),TypeInfo(HMODULE)],Addr(DrvGetModuleHandle),cStdCall);

RegisterProc(nil,MethodNames[320],mtProc,TypeInfo(_T4),[
TypeInfo(HDRVR),TypeInfo(HMODULE)],Addr(GetDriverModuleHandle),cStdCall);

RegisterProc(nil,MethodNames[321],mtProc,TypeInfo(_T5),[
TypeInfo(DWORD),
TypeInfo(HDRVR),
TypeInfo(UINT),
TypeInfo(LPARAM),
TypeInfo(LPARAM),TypeInfo(Longint)],Addr(DefDriverProc),cStdCall);

RegisterProc(nil,MethodNames[322],mtProc,TypeInfo(_T6),[TypeInfo(UINT)],Addr(mmsystemGetVersion),cStdCall);

RegisterProc(nil,MethodNames[323],mtProc,TypeInfo(_T13),[TypeInfo(UINT)],Addr(waveOutGetNumDevs),cStdCall);

RegisterProc(nil,MethodNames[324],mtProc,TypeInfo(_T17),[
TypeInfo(HWAVEOUT),
TypeInfoPointer,TypeInfo(MMRESULT)],Addr(waveOutGetVolume),cStdCall);

RegisterProc(nil,MethodNames[325],mtProc,TypeInfo(_T18),[
TypeInfo(HWAVEOUT),
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(waveOutSetVolume),cStdCall);

RegisterProc(nil,MethodNames[326],mtProc,TypeInfo(_T23),[
TypeInfo(HWAVEOUT),TypeInfo(MMRESULT)],Addr(waveOutClose),cStdCall);

RegisterProc(nil,MethodNames[327],mtProc,TypeInfo(_T27),[
TypeInfo(HWAVEOUT),TypeInfo(MMRESULT)],Addr(waveOutPause),cStdCall);

RegisterProc(nil,MethodNames[328],mtProc,TypeInfo(_T28),[
TypeInfo(HWAVEOUT),TypeInfo(MMRESULT)],Addr(waveOutRestart),cStdCall);

RegisterProc(nil,MethodNames[329],mtProc,TypeInfo(_T29),[
TypeInfo(HWAVEOUT),TypeInfo(MMRESULT)],Addr(waveOutReset),cStdCall);

RegisterProc(nil,MethodNames[330],mtProc,TypeInfo(_T30),[
TypeInfo(HWAVEOUT),TypeInfo(MMRESULT)],Addr(waveOutBreakLoop),cStdCall);

RegisterProc(nil,MethodNames[331],mtProc,TypeInfo(_T32),[
TypeInfo(HWAVEOUT),
TypeInfoPointer,TypeInfo(MMRESULT)],Addr(waveOutGetPitch),cStdCall);

RegisterProc(nil,MethodNames[332],mtProc,TypeInfo(_T33),[
TypeInfo(HWAVEOUT),
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(waveOutSetPitch),cStdCall);

RegisterProc(nil,MethodNames[333],mtProc,TypeInfo(_T34),[
TypeInfo(HWAVEOUT),
TypeInfoPointer,TypeInfo(MMRESULT)],Addr(waveOutGetPlaybackRate),cStdCall);

RegisterProc(nil,MethodNames[334],mtProc,TypeInfo(_T35),[
TypeInfo(HWAVEOUT),
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(waveOutSetPlaybackRate),cStdCall);

RegisterProc(nil,MethodNames[335],mtProc,TypeInfo(_T36),[
TypeInfo(HWAVEOUT),
TypeInfoPointer,TypeInfo(MMRESULT)],Addr(waveOutGetID),cStdCall);

RegisterProc(nil,MethodNames[336],mtProc,TypeInfo(_T37),[
TypeInfo(HWAVEOUT),
TypeInfo(UINT),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(Longint)],Addr(waveOutMessage),cStdCall);

RegisterProc(nil,MethodNames[337],mtProc,TypeInfo(_T38),[TypeInfo(UINT)],Addr(waveInGetNumDevs),cStdCall);

RegisterProc(nil,MethodNames[338],mtProc,TypeInfo(_T46),[
TypeInfo(HWAVEIN),TypeInfo(MMRESULT)],Addr(waveInClose),cStdCall);

RegisterProc(nil,MethodNames[339],mtProc,TypeInfo(_T50),[
TypeInfo(HWAVEIN),TypeInfo(MMRESULT)],Addr(waveInStart),cStdCall);

RegisterProc(nil,MethodNames[340],mtProc,TypeInfo(_T51),[
TypeInfo(HWAVEIN),TypeInfo(MMRESULT)],Addr(waveInStop),cStdCall);

RegisterProc(nil,MethodNames[341],mtProc,TypeInfo(_T52),[
TypeInfo(HWAVEIN),TypeInfo(MMRESULT)],Addr(waveInReset),cStdCall);

RegisterProc(nil,MethodNames[342],mtProc,TypeInfo(_T54),[
TypeInfo(HWAVEIN),
TypeInfoPointer,TypeInfo(MMRESULT)],Addr(waveInGetID),cStdCall);

RegisterProc(nil,MethodNames[343],mtProc,TypeInfo(_T55),[
TypeInfo(HWAVEIN),
TypeInfo(UINT),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(waveInMessage),cStdCall);

RegisterProc(nil,MethodNames[344],mtProc,TypeInfo(_T56),[TypeInfo(UINT)],Addr(midiOutGetNumDevs),cStdCall);

RegisterProc(nil,MethodNames[345],mtProc,TypeInfo(_T57),[
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(midiStreamOpen),cStdCall);

RegisterProc(nil,MethodNames[346],mtProc,TypeInfo(_T58),[
TypeInfo(HMIDISTRM),TypeInfo(MMRESULT)],Addr(midiStreamClose),cStdCall);

RegisterProc(nil,MethodNames[347],mtProc,TypeInfo(_T59),[
TypeInfo(HMIDISTRM),
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(midiStreamProperty),cStdCall);

RegisterProc(nil,MethodNames[348],mtProc,TypeInfo(_T62),[
TypeInfo(HMIDISTRM),TypeInfo(MMRESULT)],Addr(midiStreamPause),cStdCall);

RegisterProc(nil,MethodNames[349],mtProc,TypeInfo(_T63),[
TypeInfo(HMIDISTRM),TypeInfo(MMRESULT)],Addr(midiStreamRestart),cStdCall);

RegisterProc(nil,MethodNames[350],mtProc,TypeInfo(_T64),[
TypeInfo(HMIDISTRM),TypeInfo(MMRESULT)],Addr(midiStreamStop),cStdCall);

RegisterProc(nil,MethodNames[351],mtProc,TypeInfo(_T65),[
TypeInfo(HMIDI),
TypeInfo(HMIDIOUT),
TypeInfoPointer,TypeInfo(MMRESULT)],Addr(midiConnect),cStdCall);

RegisterProc(nil,MethodNames[352],mtProc,TypeInfo(_T66),[
TypeInfo(HMIDI),
TypeInfo(HMIDIOUT),
TypeInfoPointer,TypeInfo(MMRESULT)],Addr(midiDisconnect),cStdCall);

RegisterProc(nil,MethodNames[353],mtProc,TypeInfo(_T70),[
TypeInfo(HMIDIOUT),
TypeInfoPointer,TypeInfo(MMRESULT)],Addr(midiOutGetVolume),cStdCall);

RegisterProc(nil,MethodNames[354],mtProc,TypeInfo(_T71),[
TypeInfo(HMIDIOUT),
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(midiOutSetVolume),cStdCall);

RegisterProc(nil,MethodNames[355],mtProc,TypeInfo(_T75),[
TypeInfoPointer,
TypeInfo(UINT),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(midiOutOpen),cStdCall);

RegisterProc(nil,MethodNames[356],mtProc,TypeInfo(_T76),[
TypeInfo(HMIDIOUT),TypeInfo(MMRESULT)],Addr(midiOutClose),cStdCall);

RegisterProc(nil,MethodNames[357],mtProc,TypeInfo(_T79),[
TypeInfo(HMIDIOUT),
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(midiOutShortMsg),cStdCall);

RegisterProc(nil,MethodNames[358],mtProc,TypeInfo(_T81),[
TypeInfo(HMIDIOUT),TypeInfo(MMRESULT)],Addr(midiOutReset),cStdCall);

RegisterProc(nil,MethodNames[359],mtProc,TypeInfo(_T82),[
TypeInfo(HMIDIOUT),
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(midiOutCachePatches),cStdCall);

RegisterProc(nil,MethodNames[360],mtProc,TypeInfo(_T83),[
TypeInfo(HMIDIOUT),
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(midiOutCacheDrumPatches),cStdCall);

RegisterProc(nil,MethodNames[361],mtProc,TypeInfo(_T84),[
TypeInfo(HMIDIOUT),
TypeInfoPointer,TypeInfo(MMRESULT)],Addr(midiOutGetID),cStdCall);

RegisterProc(nil,MethodNames[362],mtProc,TypeInfo(_T85),[
TypeInfo(HMIDIOUT),
TypeInfo(UINT),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(midiOutMessage),cStdCall);

RegisterProc(nil,MethodNames[363],mtProc,TypeInfo(_T86),[TypeInfo(UINT)],Addr(midiInGetNumDevs),cStdCall);

RegisterProc(nil,MethodNames[364],mtProc,TypeInfo(_T93),[
TypeInfoPointer,
TypeInfo(UINT),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(midiInOpen),cStdCall);

RegisterProc(nil,MethodNames[365],mtProc,TypeInfo(_T94),[
TypeInfo(HMIDIIN),TypeInfo(MMRESULT)],Addr(midiInClose),cStdCall);

RegisterProc(nil,MethodNames[366],mtProc,TypeInfo(_T98),[
TypeInfo(HMIDIIN),TypeInfo(MMRESULT)],Addr(midiInStart),cStdCall);

RegisterProc(nil,MethodNames[367],mtProc,TypeInfo(_T99),[
TypeInfo(HMIDIIN),TypeInfo(MMRESULT)],Addr(midiInStop),cStdCall);

RegisterProc(nil,MethodNames[368],mtProc,TypeInfo(_T100),[
TypeInfo(HMIDIIN),TypeInfo(MMRESULT)],Addr(midiInReset),cStdCall);

RegisterProc(nil,MethodNames[369],mtProc,TypeInfo(_T101),[
TypeInfo(HMIDIIN),
TypeInfoPointer,TypeInfo(MMRESULT)],Addr(midiInGetID),cStdCall);

RegisterProc(nil,MethodNames[370],mtProc,TypeInfo(_T102),[
TypeInfo(HMIDIIN),
TypeInfo(UINT),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(midiInMessage),cStdCall);

RegisterProc(nil,MethodNames[371],mtProc,TypeInfo(_T103),[TypeInfo(UINT)],Addr(auxGetNumDevs),cStdCall);

RegisterProc(nil,MethodNames[372],mtProc,TypeInfo(_T107),[
TypeInfo(UINT),
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(auxSetVolume),cStdCall);

RegisterProc(nil,MethodNames[373],mtProc,TypeInfo(_T108),[
TypeInfo(UINT),
TypeInfoPointer,TypeInfo(MMRESULT)],Addr(auxGetVolume),cStdCall);

RegisterProc(nil,MethodNames[374],mtProc,TypeInfo(_T109),[
TypeInfo(UINT),
TypeInfo(UINT),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(auxOutMessage),cStdCall);

RegisterProc(nil,MethodNames[375],mtProc,TypeInfo(_T110),[TypeInfo(UINT)],Addr(mixerGetNumDevs),cStdCall);

RegisterProc(nil,MethodNames[376],mtProc,TypeInfo(_T114),[
TypeInfoPointer,
TypeInfo(UINT),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(mixerOpen),cStdCall);

RegisterProc(nil,MethodNames[377],mtProc,TypeInfo(_T115),[
TypeInfo(HMIXER),TypeInfo(MMRESULT)],Addr(mixerClose),cStdCall);

RegisterProc(nil,MethodNames[378],mtProc,TypeInfo(_T116),[
TypeInfo(HMIXER),
TypeInfo(UINT),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(mixerMessage),cStdCall);

RegisterProc(nil,MethodNames[379],mtProc,TypeInfo(_T120),[
TypeInfo(HMIXEROBJ),
TypeInfo(UINT),
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(mixerGetID),cStdCall);

RegisterProc(nil,MethodNames[380],mtProc,TypeInfo(_T129),[TypeInfo(DWORD)],Addr(timeGetTime),cStdCall);

RegisterProc(nil,MethodNames[381],mtProc,TypeInfo(_T131),[
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(timeKillEvent),cStdCall);

RegisterProc(nil,MethodNames[382],mtProc,TypeInfo(_T133),[
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(timeBeginPeriod),cStdCall);

RegisterProc(nil,MethodNames[383],mtProc,TypeInfo(_T134),[
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(timeEndPeriod),cStdCall);

RegisterProc(nil,MethodNames[384],mtProc,TypeInfo(_T135),[TypeInfo(UINT)],Addr(joyGetNumDevs),cStdCall);

RegisterProc(nil,MethodNames[385],mtProc,TypeInfo(_T141),[
TypeInfo(UINT),
TypeInfoPointer,TypeInfo(MMRESULT)],Addr(joyGetThreshold),cStdCall);

RegisterProc(nil,MethodNames[386],mtProc,TypeInfo(_T142),[
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(joyReleaseCapture),cStdCall);

RegisterProc(nil,MethodNames[387],mtProc,TypeInfo(_T143),[
TypeInfo(HWND),
TypeInfo(UINT),
TypeInfo(UINT),
TypeInfo(BOOL),TypeInfo(MMRESULT)],Addr(joySetCapture),cStdCall);

RegisterProc(nil,MethodNames[388],mtProc,TypeInfo(_T144),[
TypeInfo(UINT),
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(joySetThreshold),cStdCall);

RegisterProc(nil,MethodNames[389],mtProc,TypeInfo(_T157),[
TypeInfo(HMMIO),
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(mmioClose),cStdCall);

RegisterProc(nil,MethodNames[390],mtProc,TypeInfo(_T160),[
TypeInfo(HMMIO),
TypeInfo(Longint),
TypeInfo(Integer),TypeInfo(Longint)],Addr(mmioSeek),cStdCall);

RegisterProc(nil,MethodNames[391],mtProc,TypeInfo(_T164),[
TypeInfo(HMMIO),
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(mmioFlush),cStdCall);

RegisterProc(nil,MethodNames[392],mtProc,TypeInfo(_T166),[
TypeInfo(HMMIO),
TypeInfo(UINT),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(Longint)],Addr(mmioSendMessage),cStdCall);

RegisterProc(nil,MethodNames[393],mtProc,TypeInfo(_T170),[
TypeInfo(MCIDEVICEID),
TypeInfo(UINT),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(MCIERROR)],Addr(mciSendCommand),cStdCall);

RegisterProc(nil,MethodNames[394],mtProc,TypeInfo(_T171),[
TypeInfo(MCIDEVICEID),
TypeInfo(UINT),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(MCIERROR)],Addr(mciSendCommandA),cStdCall);

RegisterProc(nil,MethodNames[395],mtProc,TypeInfo(_T172),[
TypeInfo(MCIDEVICEID),
TypeInfo(UINT),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(MCIERROR)],Addr(mciSendCommandW),cStdCall);

RegisterProc(nil,MethodNames[396],mtProc,TypeInfo(_T186),[
TypeInfo(MCIDEVICEID),TypeInfo(hTask)],Addr(mciGetCreatorTask),cStdCall);

RegisterProc(nil,MethodNames[397],mtProc,TypeInfo(_T189),[
TypeInfo(Longint),TypeInfo(Byte)],Addr(mci_MSF_Minute),cRegister);

RegisterProc(nil,MethodNames[398],mtProc,TypeInfo(_T190),[
TypeInfo(Longint),TypeInfo(Byte)],Addr(mci_MSF_Second),cRegister);

RegisterProc(nil,MethodNames[399],mtProc,TypeInfo(_T191),[
TypeInfo(Longint),TypeInfo(Byte)],Addr(mci_MSF_Frame),cRegister);

RegisterProc(nil,MethodNames[400],mtProc,TypeInfo(_T192),[
TypeInfo(Byte),
TypeInfo(Byte),
TypeInfo(Byte),TypeInfo(Longint)],Addr(mci_Make_MSF),cRegister);

RegisterProc(nil,MethodNames[401],mtProc,TypeInfo(_T193),[
TypeInfo(Longint),TypeInfo(Byte)],Addr(mci_TMSF_Track),cRegister);

RegisterProc(nil,MethodNames[402],mtProc,TypeInfo(_T194),[
TypeInfo(Longint),TypeInfo(Byte)],Addr(mci_TMSF_Minute),cRegister);

RegisterProc(nil,MethodNames[403],mtProc,TypeInfo(_T195),[
TypeInfo(Longint),TypeInfo(Byte)],Addr(mci_TMSF_Second),cRegister);

RegisterProc(nil,MethodNames[404],mtProc,TypeInfo(_T196),[
TypeInfo(Longint),TypeInfo(Byte)],Addr(mci_TMSF_Frame),cRegister);

RegisterProc(nil,MethodNames[405],mtProc,TypeInfo(_T197),[
TypeInfo(Byte),
TypeInfo(Byte),
TypeInfo(Byte),
TypeInfo(Byte),TypeInfo(Longint)],Addr(mci_Make_TMSF),cRegister);

RegisterProc(nil,MethodNames[406],mtProc,TypeInfo(_T198),[
TypeInfo(Longint),TypeInfo(Byte)],Addr(mci_HMS_Hour),cRegister);

RegisterProc(nil,MethodNames[407],mtProc,TypeInfo(_T199),[
TypeInfo(Longint),TypeInfo(Byte)],Addr(mci_HMS_Minute),cRegister);

RegisterProc(nil,MethodNames[408],mtProc,TypeInfo(_T200),[
TypeInfo(Longint),TypeInfo(Byte)],Addr(mci_HMS_Second),cRegister);

RegisterProc(nil,MethodNames[409],mtProc,TypeInfo(_T201),[
TypeInfo(Byte),
TypeInfo(Byte),
TypeInfo(Byte),TypeInfo(Longint)],Addr(mci_Make_HMS),cRegister);

RegisterProc(nil,MethodNames[410],mtProc,TypeInfo(_T202),[
TypeInfo(Integer),TypeInfo(Longint)],Addr(DIBIndex),cRegister);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'OpenDriver',mtProc,TypeInfo(_T1),[
TypeInfoPWideChar,
TypeInfoPWideChar,
TypeInfo(Longint),TypeInfo(HDRVR)],Addr(OpenDriver),cStdCall)}

{RegisterProc(nil,'sndPlaySound',mtProc,TypeInfo(_T7),[
TypeInfoPChar,
TypeInfo(UINT),TypeInfo(BOOL)],Addr(sndPlaySound),cStdCall)}

{RegisterProc(nil,'sndPlaySoundA',mtProc,TypeInfo(_T8),[
TypeInfoPChar,
TypeInfo(UINT),TypeInfo(BOOL)],Addr(sndPlaySoundA),cStdCall)}

{RegisterProc(nil,'sndPlaySoundW',mtProc,TypeInfo(_T9),[
TypeInfoPWideChar,
TypeInfo(UINT),TypeInfo(BOOL)],Addr(sndPlaySoundW),cStdCall)}

{RegisterProc(nil,'PlaySound',mtProc,TypeInfo(_T10),[
TypeInfoPChar,
TypeInfo(HMODULE),
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(PlaySound),cStdCall)}

{RegisterProc(nil,'PlaySoundA',mtProc,TypeInfo(_T11),[
TypeInfoPChar,
TypeInfo(HMODULE),
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(PlaySoundA),cStdCall)}

{RegisterProc(nil,'PlaySoundW',mtProc,TypeInfo(_T12),[
TypeInfoPWideChar,
TypeInfo(HMODULE),
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(PlaySoundW),cStdCall)}

{RegisterProc(nil,'waveOutGetDevCaps',mtProc,TypeInfo(_T14),[
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(waveOutGetDevCaps),cStdCall)}

{RegisterProc(nil,'waveOutGetDevCapsA',mtProc,TypeInfo(_T15),[
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(waveOutGetDevCapsA),cStdCall)}

{RegisterProc(nil,'waveOutGetDevCapsW',mtProc,TypeInfo(_T16),[
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(waveOutGetDevCapsW),cStdCall)}

{RegisterProc(nil,'waveOutGetErrorText',mtProc,TypeInfo(_T19),[
TypeInfo(MMRESULT),
TypeInfoPChar,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(waveOutGetErrorText),cStdCall)}

{RegisterProc(nil,'waveOutGetErrorTextA',mtProc,TypeInfo(_T20),[
TypeInfo(MMRESULT),
TypeInfoPChar,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(waveOutGetErrorTextA),cStdCall)}

{RegisterProc(nil,'waveOutGetErrorTextW',mtProc,TypeInfo(_T21),[
TypeInfo(MMRESULT),
TypeInfoPWideChar,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(waveOutGetErrorTextW),cStdCall)}

{RegisterProc(nil,'waveOutOpen',mtProc,TypeInfo(_T22),[
TypeInfoPointer,
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(waveOutOpen),cStdCall)}

{RegisterProc(nil,'waveOutPrepareHeader',mtProc,TypeInfo(_T24),[
TypeInfo(HWAVEOUT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(waveOutPrepareHeader),cStdCall)}

{RegisterProc(nil,'waveOutUnprepareHeader',mtProc,TypeInfo(_T25),[
TypeInfo(HWAVEOUT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(waveOutUnprepareHeader),cStdCall)}

{RegisterProc(nil,'waveOutWrite',mtProc,TypeInfo(_T26),[
TypeInfo(HWAVEOUT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(waveOutWrite),cStdCall)}

{RegisterProc(nil,'waveOutGetPosition',mtProc,TypeInfo(_T31),[
TypeInfo(HWAVEOUT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(waveOutGetPosition),cStdCall)}

{RegisterProc(nil,'waveInGetDevCaps',mtProc,TypeInfo(_T39),[
TypeInfo(HWAVEOUT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(waveInGetDevCaps),cStdCall)}

{RegisterProc(nil,'waveInGetDevCapsA',mtProc,TypeInfo(_T40),[
TypeInfo(HWAVEOUT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(waveInGetDevCapsA),cStdCall)}

{RegisterProc(nil,'waveInGetDevCapsW',mtProc,TypeInfo(_T41),[
TypeInfo(HWAVEOUT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(waveInGetDevCapsW),cStdCall)}

{RegisterProc(nil,'waveInGetErrorText',mtProc,TypeInfo(_T42),[
TypeInfo(MMRESULT),
TypeInfoPChar,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(waveInGetErrorText),cStdCall)}

{RegisterProc(nil,'waveInGetErrorTextA',mtProc,TypeInfo(_T43),[
TypeInfo(MMRESULT),
TypeInfoPChar,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(waveInGetErrorTextA),cStdCall)}

{RegisterProc(nil,'waveInGetErrorTextW',mtProc,TypeInfo(_T44),[
TypeInfo(MMRESULT),
TypeInfoPWideChar,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(waveInGetErrorTextW),cStdCall)}

{RegisterProc(nil,'waveInOpen',mtProc,TypeInfo(_T45),[
TypeInfoPointer,
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(waveInOpen),cStdCall)}

{RegisterProc(nil,'waveInPrepareHeader',mtProc,TypeInfo(_T47),[
TypeInfo(HWAVEIN),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(waveInPrepareHeader),cStdCall)}

{RegisterProc(nil,'waveInUnprepareHeader',mtProc,TypeInfo(_T48),[
TypeInfo(HWAVEIN),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(waveInUnprepareHeader),cStdCall)}

{RegisterProc(nil,'waveInAddBuffer',mtProc,TypeInfo(_T49),[
TypeInfo(HWAVEIN),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(waveInAddBuffer),cStdCall)}

{RegisterProc(nil,'waveInGetPosition',mtProc,TypeInfo(_T53),[
TypeInfo(HWAVEIN),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(waveInGetPosition),cStdCall)}

{RegisterProc(nil,'midiStreamPosition',mtProc,TypeInfo(_T60),[
TypeInfo(HMIDISTRM),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(midiStreamPosition),cStdCall)}

{RegisterProc(nil,'midiStreamOut',mtProc,TypeInfo(_T61),[
TypeInfo(HMIDISTRM),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(midiStreamOut),cStdCall)}

{RegisterProc(nil,'midiOutGetDevCaps',mtProc,TypeInfo(_T67),[
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(midiOutGetDevCaps),cStdCall)}

{RegisterProc(nil,'midiOutGetDevCapsA',mtProc,TypeInfo(_T68),[
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(midiOutGetDevCapsA),cStdCall)}

{RegisterProc(nil,'midiOutGetDevCapsW',mtProc,TypeInfo(_T69),[
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(midiOutGetDevCapsW),cStdCall)}

{RegisterProc(nil,'midiOutGetErrorText',mtProc,TypeInfo(_T72),[
TypeInfo(MMRESULT),
TypeInfoPChar,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(midiOutGetErrorText),cStdCall)}

{RegisterProc(nil,'midiOutGetErrorTextA',mtProc,TypeInfo(_T73),[
TypeInfo(MMRESULT),
TypeInfoPChar,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(midiOutGetErrorTextA),cStdCall)}

{RegisterProc(nil,'midiOutGetErrorTextW',mtProc,TypeInfo(_T74),[
TypeInfo(MMRESULT),
TypeInfoPWideChar,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(midiOutGetErrorTextW),cStdCall)}

{RegisterProc(nil,'midiOutPrepareHeader',mtProc,TypeInfo(_T77),[
TypeInfo(HMIDIOUT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(midiOutPrepareHeader),cStdCall)}

{RegisterProc(nil,'midiOutUnprepareHeader',mtProc,TypeInfo(_T78),[
TypeInfo(HMIDIOUT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(midiOutUnprepareHeader),cStdCall)}

{RegisterProc(nil,'midiOutLongMsg',mtProc,TypeInfo(_T80),[
TypeInfo(HMIDIOUT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(midiOutLongMsg),cStdCall)}

{RegisterProc(nil,'midiInGetDevCaps',mtProc,TypeInfo(_T87),[
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(midiInGetDevCaps),cStdCall)}

{RegisterProc(nil,'midiInGetDevCapsA',mtProc,TypeInfo(_T88),[
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(midiInGetDevCapsA),cStdCall)}

{RegisterProc(nil,'midiInGetDevCapsW',mtProc,TypeInfo(_T89),[
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(midiInGetDevCapsW),cStdCall)}

{RegisterProc(nil,'midiInGetErrorText',mtProc,TypeInfo(_T90),[
TypeInfo(MMRESULT),
TypeInfoPChar,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(midiInGetErrorText),cStdCall)}

{RegisterProc(nil,'midiInGetErrorTextA',mtProc,TypeInfo(_T91),[
TypeInfo(MMRESULT),
TypeInfoPChar,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(midiInGetErrorTextA),cStdCall)}

{RegisterProc(nil,'midiInGetErrorTextW',mtProc,TypeInfo(_T92),[
TypeInfo(MMRESULT),
TypeInfoPWideChar,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(midiInGetErrorTextW),cStdCall)}

{RegisterProc(nil,'midiInPrepareHeader',mtProc,TypeInfo(_T95),[
TypeInfo(HMIDIIN),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(midiInPrepareHeader),cStdCall)}

{RegisterProc(nil,'midiInUnprepareHeader',mtProc,TypeInfo(_T96),[
TypeInfo(HMIDIIN),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(midiInUnprepareHeader),cStdCall)}

{RegisterProc(nil,'midiInAddBuffer',mtProc,TypeInfo(_T97),[
TypeInfo(HMIDIIN),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(midiInAddBuffer),cStdCall)}

{RegisterProc(nil,'auxGetDevCaps',mtProc,TypeInfo(_T104),[
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(auxGetDevCaps),cStdCall)}

{RegisterProc(nil,'auxGetDevCapsA',mtProc,TypeInfo(_T105),[
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(auxGetDevCapsA),cStdCall)}

{RegisterProc(nil,'auxGetDevCapsW',mtProc,TypeInfo(_T106),[
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(auxGetDevCapsW),cStdCall)}

{RegisterProc(nil,'mixerGetDevCaps',mtProc,TypeInfo(_T111),[
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(mixerGetDevCaps),cStdCall)}

{RegisterProc(nil,'mixerGetDevCapsA',mtProc,TypeInfo(_T112),[
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(mixerGetDevCapsA),cStdCall)}

{RegisterProc(nil,'mixerGetDevCapsW',mtProc,TypeInfo(_T113),[
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(mixerGetDevCapsW),cStdCall)}

{RegisterProc(nil,'mixerGetLineInfo',mtProc,TypeInfo(_T117),[
TypeInfo(HMIXEROBJ),
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(mixerGetLineInfo),cStdCall)}

{RegisterProc(nil,'mixerGetLineInfoA',mtProc,TypeInfo(_T118),[
TypeInfo(HMIXEROBJ),
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(mixerGetLineInfoA),cStdCall)}

{RegisterProc(nil,'mixerGetLineInfoW',mtProc,TypeInfo(_T119),[
TypeInfo(HMIXEROBJ),
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(mixerGetLineInfoW),cStdCall)}

{RegisterProc(nil,'mixerGetLineControls',mtProc,TypeInfo(_T121),[
TypeInfo(HMIXEROBJ),
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(mixerGetLineControls),cStdCall)}

{RegisterProc(nil,'mixerGetLineControlsA',mtProc,TypeInfo(_T122),[
TypeInfo(HMIXEROBJ),
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(mixerGetLineControlsA),cStdCall)}

{RegisterProc(nil,'mixerGetLineControlsW',mtProc,TypeInfo(_T123),[
TypeInfo(HMIXEROBJ),
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(mixerGetLineControlsW),cStdCall)}

{RegisterProc(nil,'mixerGetControlDetails',mtProc,TypeInfo(_T124),[
TypeInfo(HMIXEROBJ),
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(mixerGetControlDetails),cStdCall)}

{RegisterProc(nil,'mixerGetControlDetailsA',mtProc,TypeInfo(_T125),[
TypeInfo(HMIXEROBJ),
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(mixerGetControlDetailsA),cStdCall)}

{RegisterProc(nil,'mixerGetControlDetailsW',mtProc,TypeInfo(_T126),[
TypeInfo(HMIXEROBJ),
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(mixerGetControlDetailsW),cStdCall)}

{RegisterProc(nil,'mixerSetControlDetails',mtProc,TypeInfo(_T127),[
TypeInfo(HMIXEROBJ),
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(mixerSetControlDetails),cStdCall)}

{RegisterProc(nil,'timeGetSystemTime',mtProc,TypeInfo(_T128),[
TypeInfoPointer,
TypeInfo(Word),TypeInfo(MMRESULT)],Addr(timeGetSystemTime),cStdCall)}

{RegisterProc(nil,'timeSetEvent',mtProc,TypeInfo(_T130),[
TypeInfo(UINT),
TypeInfo(UINT),
TypeInfo(TFNTimeCallBack),
TypeInfo(DWORD),
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(timeSetEvent),cStdCall)}

{RegisterProc(nil,'timeGetDevCaps',mtProc,TypeInfo(_T132),[
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(timeGetDevCaps),cStdCall)}

{RegisterProc(nil,'joyGetDevCaps',mtProc,TypeInfo(_T136),[
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(joyGetDevCaps),cStdCall)}

{RegisterProc(nil,'joyGetDevCapsA',mtProc,TypeInfo(_T137),[
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(joyGetDevCapsA),cStdCall)}

{RegisterProc(nil,'joyGetDevCapsW',mtProc,TypeInfo(_T138),[
TypeInfo(UINT),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(joyGetDevCapsW),cStdCall)}

{RegisterProc(nil,'joyGetPos',mtProc,TypeInfo(_T139),[
TypeInfo(UINT),
TypeInfoPointer,TypeInfo(MMRESULT)],Addr(joyGetPos),cStdCall)}

{RegisterProc(nil,'joyGetPosEx',mtProc,TypeInfo(_T140),[
TypeInfo(UINT),
TypeInfoPointer,TypeInfo(MMRESULT)],Addr(joyGetPosEx),cStdCall)}

{RegisterProc(nil,'mmioStringToFOURCC',mtProc,TypeInfo(_T145),[
TypeInfoPChar,
TypeInfo(UINT),TypeInfo(FOURCC)],Addr(mmioStringToFOURCC),cStdCall)}

{RegisterProc(nil,'mmioStringToFOURCCA',mtProc,TypeInfo(_T146),[
TypeInfoPChar,
TypeInfo(UINT),TypeInfo(FOURCC)],Addr(mmioStringToFOURCCA),cStdCall)}

{RegisterProc(nil,'mmioStringToFOURCCW',mtProc,TypeInfo(_T147),[
TypeInfoPWideChar,
TypeInfo(UINT),TypeInfo(FOURCC)],Addr(mmioStringToFOURCCW),cStdCall)}

{RegisterProc(nil,'mmioInstallIOProc',mtProc,TypeInfo(_T148),[
TypeInfo(FOURCC),
TypeInfo(TFNMMIOProc),
TypeInfo(DWORD),TypeInfo(TFNMMIOProc)],Addr(mmioInstallIOProc),cStdCall)}

{RegisterProc(nil,'mmioInstallIOProcA',mtProc,TypeInfo(_T149),[
TypeInfo(FOURCC),
TypeInfo(TFNMMIOProc),
TypeInfo(DWORD),TypeInfo(TFNMMIOProc)],Addr(mmioInstallIOProcA),cStdCall)}

{RegisterProc(nil,'mmioInstallIOProcW',mtProc,TypeInfo(_T150),[
TypeInfo(FOURCC),
TypeInfo(TFNMMIOProc),
TypeInfo(DWORD),TypeInfo(TFNMMIOProc)],Addr(mmioInstallIOProcW),cStdCall)}

{RegisterProc(nil,'mmioOpen',mtProc,TypeInfo(_T151),[
TypeInfoPChar,
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(HMMIO)],Addr(mmioOpen),cStdCall)}

{RegisterProc(nil,'mmioOpenA',mtProc,TypeInfo(_T152),[
TypeInfoPChar,
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(HMMIO)],Addr(mmioOpenA),cStdCall)}

{RegisterProc(nil,'mmioOpenW',mtProc,TypeInfo(_T153),[
TypeInfoPChar,
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(HMMIO)],Addr(mmioOpenW),cStdCall)}

{RegisterProc(nil,'mmioRename',mtProc,TypeInfo(_T154),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(mmioRename),cStdCall)}

{RegisterProc(nil,'mmioRenameA',mtProc,TypeInfo(_T155),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(mmioRenameA),cStdCall)}

{RegisterProc(nil,'mmioRenameW',mtProc,TypeInfo(_T156),[
TypeInfoPWideChar,
TypeInfoPWideChar,
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(MMRESULT)],Addr(mmioRenameW),cStdCall)}

{RegisterProc(nil,'mmioRead',mtProc,TypeInfo(_T158),[
TypeInfo(HMMIO),
TypeInfoPChar,
TypeInfo(Longint),TypeInfo(Longint)],Addr(mmioRead),cStdCall)}

{RegisterProc(nil,'mmioWrite',mtProc,TypeInfo(_T159),[
TypeInfo(HMMIO),
TypeInfoPChar,
TypeInfo(Longint),TypeInfo(Longint)],Addr(mmioWrite),cStdCall)}

{RegisterProc(nil,'mmioGetInfo',mtProc,TypeInfo(_T161),[
TypeInfo(HMMIO),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(mmioGetInfo),cStdCall)}

{RegisterProc(nil,'mmioSetInfo',mtProc,TypeInfo(_T162),[
TypeInfo(HMMIO),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(mmioSetInfo),cStdCall)}

{RegisterProc(nil,'mmioSetBuffer',mtProc,TypeInfo(_T163),[
TypeInfo(HMMIO),
TypeInfoPChar,
TypeInfo(Longint),
TypeInfo(Word),TypeInfo(MMRESULT)],Addr(mmioSetBuffer),cStdCall)}

{RegisterProc(nil,'mmioAdvance',mtProc,TypeInfo(_T165),[
TypeInfo(HMMIO),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(mmioAdvance),cStdCall)}

{RegisterProc(nil,'mmioDescend',mtProc,TypeInfo(_T167),[
TypeInfo(HMMIO),
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(mmioDescend),cStdCall)}

{RegisterProc(nil,'mmioAscend',mtProc,TypeInfo(_T168),[
TypeInfo(HMMIO),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(mmioAscend),cStdCall)}

{RegisterProc(nil,'mmioCreateChunk',mtProc,TypeInfo(_T169),[
TypeInfo(HMMIO),
TypeInfoPointer,
TypeInfo(UINT),TypeInfo(MMRESULT)],Addr(mmioCreateChunk),cStdCall)}

{RegisterProc(nil,'mciSendString',mtProc,TypeInfo(_T173),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(UINT),
TypeInfo(HWND),TypeInfo(MCIERROR)],Addr(mciSendString),cStdCall)}

{RegisterProc(nil,'mciSendStringA',mtProc,TypeInfo(_T174),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(UINT),
TypeInfo(HWND),TypeInfo(MCIERROR)],Addr(mciSendStringA),cStdCall)}

{RegisterProc(nil,'mciSendStringW',mtProc,TypeInfo(_T175),[
TypeInfoPWideChar,
TypeInfoPWideChar,
TypeInfo(UINT),
TypeInfo(HWND),TypeInfo(MCIERROR)],Addr(mciSendStringW),cStdCall)}

{RegisterProc(nil,'mciGetDeviceID',mtProc,TypeInfo(_T176),[
TypeInfoPChar,TypeInfo(MCIDEVICEID)],Addr(mciGetDeviceID),cStdCall)}

{RegisterProc(nil,'mciGetDeviceIDA',mtProc,TypeInfo(_T177),[
TypeInfoPChar,TypeInfo(MCIDEVICEID)],Addr(mciGetDeviceIDA),cStdCall)}

{RegisterProc(nil,'mciGetDeviceIDW',mtProc,TypeInfo(_T178),[
TypeInfoPWideChar,TypeInfo(MCIDEVICEID)],Addr(mciGetDeviceIDW),cStdCall)}

{RegisterProc(nil,'mciGetDeviceIDFromElementID',mtProc,TypeInfo(_T179),[
TypeInfo(DWORD),
TypeInfoPChar,TypeInfo(MCIDEVICEID)],Addr(mciGetDeviceIDFromElementID),cStdCall)}

{RegisterProc(nil,'mciGetDeviceIDFromElementIDA',mtProc,TypeInfo(_T180),[
TypeInfo(DWORD),
TypeInfoPChar,TypeInfo(MCIDEVICEID)],Addr(mciGetDeviceIDFromElementIDA),cStdCall)}

{RegisterProc(nil,'mciGetDeviceIDFromElementIDW',mtProc,TypeInfo(_T181),[
TypeInfo(DWORD),
TypeInfoPWideChar,TypeInfo(MCIDEVICEID)],Addr(mciGetDeviceIDFromElementIDW),cStdCall)}

{RegisterProc(nil,'mciGetErrorString',mtProc,TypeInfo(_T182),[
TypeInfo(MCIERROR),
TypeInfoPChar,
TypeInfo(UINT),TypeInfo(BOOL)],Addr(mciGetErrorString),cStdCall)}

{RegisterProc(nil,'mciGetErrorStringA',mtProc,TypeInfo(_T183),[
TypeInfo(MCIERROR),
TypeInfoPChar,
TypeInfo(UINT),TypeInfo(BOOL)],Addr(mciGetErrorStringA),cStdCall)}

{RegisterProc(nil,'mciGetErrorStringW',mtProc,TypeInfo(_T184),[
TypeInfo(MCIERROR),
TypeInfoPWideChar,
TypeInfo(UINT),TypeInfo(BOOL)],Addr(mciGetErrorStringW),cStdCall)}

{RegisterProc(nil,'mciSetYieldProc',mtProc,TypeInfo(_T185),[
TypeInfo(MCIDEVICEID),
TypeInfo(TFNYieldProc),
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(mciSetYieldProc),cStdCall)}

{RegisterProc(nil,'mciGetYieldProc',mtProc,TypeInfo(_T187),[
TypeInfo(MCIDEVICEID),
TypeInfoPointer,TypeInfo(TFNYieldProc)],Addr(mciGetYieldProc),cStdCall)}

{RegisterProc(nil,'mciExecute',mtProc,TypeInfo(_T188),[
TypeInfoPChar,TypeInfo(BOOL)],Addr(mciExecute),cStdCall)}

__RegisterClasses;
__RegisterConsts0;
__RegisterConsts1;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterConsts1;
__UnregisterProcs;
end.
