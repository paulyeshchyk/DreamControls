{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit WEBCONTNRS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  SysUtils,
  WebContnrs;
function ConvertTNamedVariantItemToVariant(var R : TNamedVariantItem) : OleVariant;
function ConvertVariantToTNamedVariantItem(const V : OleVariant) : TNamedVariantItem;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TNamedVariantItem__Wrapper = class(TDCRecordWrapper)
private
fR : TNamedVariantItem;
public
function GetRecordPtr : pointer; override;
published
procedure setFString(const val : AnsiString);
function getFString : AnsiString;
property FString : AnsiString read getFString write setFString;
procedure setFVariant(const val : Variant);
function getFVariant : Variant;
property FVariant : Variant read getFVariant write setFVariant;
end;
type
_T0 = function (p0 : Integer;
out p1 : string;
out p2 : Variant): Boolean of object;

_T1 = function : Integer of object;

_T2 = _T1;

_T3 = procedure (p0 : Integer;
const p1 : string;
const p2 : Variant) of object;

_T4 = procedure (p0 : Integer) of object;

_T5 = procedure (p0 : Boolean) of object;

_T6 = function (const p0 : string;
const p1 : string): Integer of object;

_T7 = function (const p0 : string;
const p1 : Variant): Integer of object;

_T8 = procedure (const p0 : string;
const p1 : Variant) of object;

_T9 = procedure  of object;

_T10 = _T9;

_T11 = _T4;

_T12 = _T9;

_T13 = function (p0 : TAbstractNamedVariants): Boolean of object;

_T14 = procedure (p0 : Integer;
p1 : Integer) of object;

_T15 = function (const p0 : string): Integer of object;

_T16 = _T3;

_T17 = _T14;

function __TNamedVariantItem__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNamedVariantItem__Wrapper.setFString(const val : AnsiString);
begin
TNamedVariantItem(GetRecordPtr^).FString := val;
end;
function __TNamedVariantItem__Wrapper.getFString : AnsiString;
begin
result := TNamedVariantItem(GetRecordPtr^).FString;
end;
procedure __TNamedVariantItem__Wrapper.setFVariant(const val : Variant);
begin
TNamedVariantItem(GetRecordPtr^).FVariant := val;
end;
function __TNamedVariantItem__Wrapper.getFVariant : Variant;
begin
result := TNamedVariantItem(GetRecordPtr^).FVariant;
end;
function _TNamedVariantItem_ : IDispatch;
begin
  result := __TNamedVariantItem__Wrapper.Create;
end;

type __TNamedVariantItem__Wrapper__ = class(__TNamedVariantItem__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNamedVariantItem__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNamedVariantItemToVariant(var R : TNamedVariantItem) : OleVariant;
var
__rw : __TNamedVariantItem__Wrapper__;
begin
__rw := __TNamedVariantItem__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNamedVariantItem(const V : OleVariant) : TNamedVariantItem;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNamedVariantItem((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTAbstractNamedVariants__Capacity(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TAbstractNamedVariants(Instance).Capacity;
end;

procedure __DC__SetTAbstractNamedVariants__Capacity(Instance : TObject; Params : PVariantArgList);
begin
TAbstractNamedVariants(Instance).Capacity:=OleVariant(Params^[0]);
end;

function __DC__GetTAbstractNamedVariants__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TAbstractNamedVariants(Instance).Count;
end;

function __DC__GetTAbstractNamedVariants__Names(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TAbstractNamedVariants(Instance).Names[OleVariant(Params^[0])];
end;

function __DC__GetTAbstractNamedVariants__Values(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TAbstractNamedVariants(Instance).Values[OleVariant(Params^[0])];
end;

procedure __DC__SetTAbstractNamedVariants__Values(Instance : TObject; Params : PVariantArgList);
begin
TAbstractNamedVariants(Instance).Values[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTAbstractNamedVariants__Variants(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TAbstractNamedVariants(Instance).Variants[OleVariant(Params^[0])];
end;

procedure __DC__SetTAbstractNamedVariants__Variants(Instance : TObject; Params : PVariantArgList);
begin
TAbstractNamedVariants(Instance).Variants[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TAbstractNamedVariants,'Capacity',__DC__GetTAbstractNamedVariants__Capacity,__DC__SetTAbstractNamedVariants__Capacity);
RegisterProperty(TAbstractNamedVariants,'Count',__DC__GetTAbstractNamedVariants__Count,nil);
RegisterIndexedProperty(TAbstractNamedVariants,'Names',1,False,__DC__GetTAbstractNamedVariants__Names,nil);
RegisterIndexedProperty(TAbstractNamedVariants,'Values',1,False,__DC__GetTAbstractNamedVariants__Values,__DC__SetTAbstractNamedVariants__Values);
RegisterIndexedProperty(TAbstractNamedVariants,'Variants',1,False,__DC__GetTAbstractNamedVariants__Variants,__DC__SetTAbstractNamedVariants__Variants);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..2] of TClass = (
ENamedVariantsError,
TAbstractNamedVariants,
TNamedVariantsList
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'TNamedVariantItem'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TNamedVariantItem_)));
//RegRegisterMethod(TAbstractNamedVariants,'Get',TypeInfo(_T0),[TypeInfo(Integer),TypeInfo(string),TypeInfo(Variant),TypeInfo(Boolean)], pointer(12));
RegRegisterMethod(TAbstractNamedVariants,'Get',TypeInfo(_T0),[TypeInfo(Integer),TypeInfo(string),TypeInfo(Variant),TypeInfo(Boolean)],  getVMTProcAddr('TAbstractNamedVariants','Get',12));


//RegRegisterMethod(TAbstractNamedVariants,'GetCapacity',TypeInfo(_T1),[TypeInfo(Integer)], pointer(16));
RegRegisterMethod(TAbstractNamedVariants,'GetCapacity',TypeInfo(_T1),[TypeInfo(Integer)],  getVMTProcAddr('TAbstractNamedVariants','GetCapacity',16));


//RegRegisterMethod(TAbstractNamedVariants,'GetCount',TypeInfo(_T2),[TypeInfo(Integer)], pointer(20));
RegRegisterMethod(TAbstractNamedVariants,'GetCount',TypeInfo(_T2),[TypeInfo(Integer)],  getVMTProcAddr('TAbstractNamedVariants','GetCount',20));


//RegRegisterMethod(TAbstractNamedVariants,'Put',TypeInfo(_T3),[TypeInfo(Integer),TypeInfo(string),TypeInfo(Variant)], pointer(24));
RegRegisterMethod(TAbstractNamedVariants,'Put',TypeInfo(_T3),[TypeInfo(Integer),TypeInfo(string),TypeInfo(Variant)],  getVMTProcAddr('TAbstractNamedVariants','Put',24));


//RegRegisterMethod(TAbstractNamedVariants,'SetCapacity',TypeInfo(_T4),[TypeInfo(Integer)], pointer(28));
RegRegisterMethod(TAbstractNamedVariants,'SetCapacity',TypeInfo(_T4),[TypeInfo(Integer)],  getVMTProcAddr('TAbstractNamedVariants','SetCapacity',28));


//RegRegisterMethod(TAbstractNamedVariants,'SetUpdateState',TypeInfo(_T5),[TypeInfo(Boolean)], pointer(32));
RegRegisterMethod(TAbstractNamedVariants,'SetUpdateState',TypeInfo(_T5),[TypeInfo(Boolean)],  getVMTProcAddr('TAbstractNamedVariants','SetUpdateState',32));


//RegRegisterMethod(TAbstractNamedVariants,'CompareStrings',TypeInfo(_T6),[TypeInfo(string),TypeInfo(string),TypeInfo(Integer)], pointer(36));
RegRegisterMethod(TAbstractNamedVariants,'CompareStrings',TypeInfo(_T6),[TypeInfo(string),TypeInfo(string),TypeInfo(Integer)],  getVMTProcAddr('TAbstractNamedVariants','CompareStrings',36));


//RegRegisterMethod(TAbstractNamedVariants,'Add',TypeInfo(_T7),[TypeInfo(string),TypeInfo(Variant),TypeInfo(Integer)], pointer(40));
RegRegisterMethod(TAbstractNamedVariants,'Add',TypeInfo(_T7),[TypeInfo(string),TypeInfo(Variant),TypeInfo(Integer)],  getVMTProcAddr('TAbstractNamedVariants','Add',40));


RegRegisterMethod(TAbstractNamedVariants,'Append',TypeInfo(_T8),[
TypeInfo(string),
TypeInfo(Variant)],Addr(TAbstractNamedVariants.Append));

RegRegisterMethod(TAbstractNamedVariants,'BeginUpdate',TypeInfo(_T9),NoParams,Addr(TAbstractNamedVariants.BeginUpdate));

//RegRegisterMethod(TAbstractNamedVariants,'Clear',TypeInfo(_T10),NoParams, pointer(44));
RegRegisterMethod(TAbstractNamedVariants,'Clear',TypeInfo(_T10),NoParams,  getVMTProcAddr('TAbstractNamedVariants','Clear',44));


//RegRegisterMethod(TAbstractNamedVariants,'Delete',TypeInfo(_T11),[TypeInfo(Integer)], pointer(48));
RegRegisterMethod(TAbstractNamedVariants,'Delete',TypeInfo(_T11),[TypeInfo(Integer)],  getVMTProcAddr('TAbstractNamedVariants','Delete',48));


RegRegisterMethod(TAbstractNamedVariants,'EndUpdate',TypeInfo(_T12),NoParams,Addr(TAbstractNamedVariants.EndUpdate));

RegRegisterMethod(TAbstractNamedVariants,'Equals',TypeInfo(_T13),[
TypeInfo(TAbstractNamedVariants),TypeInfo(Boolean)],Addr(TAbstractNamedVariants.Equals));

//RegRegisterMethod(TAbstractNamedVariants,'Exchange',TypeInfo(_T14),[TypeInfo(Integer),TypeInfo(Integer)], pointer(52));
RegRegisterMethod(TAbstractNamedVariants,'Exchange',TypeInfo(_T14),[TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TAbstractNamedVariants','Exchange',52));


//RegRegisterMethod(TAbstractNamedVariants,'IndexOfName',TypeInfo(_T15),[TypeInfo(string),TypeInfo(Integer)], pointer(56));
RegRegisterMethod(TAbstractNamedVariants,'IndexOfName',TypeInfo(_T15),[TypeInfo(string),TypeInfo(Integer)],  getVMTProcAddr('TAbstractNamedVariants','IndexOfName',56));


//RegRegisterMethod(TAbstractNamedVariants,'Insert',TypeInfo(_T16),[TypeInfo(Integer),TypeInfo(string),TypeInfo(Variant)], pointer(60));
RegRegisterMethod(TAbstractNamedVariants,'Insert',TypeInfo(_T16),[TypeInfo(Integer),TypeInfo(string),TypeInfo(Variant)],  getVMTProcAddr('TAbstractNamedVariants','Insert',60));


//RegRegisterMethod(TAbstractNamedVariants,'Move',TypeInfo(_T17),[TypeInfo(Integer),TypeInfo(Integer)], pointer(64));
RegRegisterMethod(TAbstractNamedVariants,'Move',TypeInfo(_T17),[TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TAbstractNamedVariants','Move',64));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
