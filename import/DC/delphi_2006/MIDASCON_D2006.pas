{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit MIDASCON_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti,
  sysUtils,
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  TDMConnect,
  TDSConnect,
  TDMidasCon;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (p0 : TConnectType) of object;

_T1 = procedure (p0 : Boolean) of object;

procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..2] of string = (
'ctDCOM'
,'ctSockets'
,'ctOLEnterprise'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,ctDCOM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,ctSockets));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,ctOLEnterprise));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..1] of TClass = (
TMidasConnection,
TRemoteServer
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TMidasConnection,'SetConnectType',TypeInfo(_T0),[TypeInfo(TConnectType)], pointer(100));
RegRegisterMethod(TMidasConnection,'SetConnectType',TypeInfo(_T0),[TypeInfo(TConnectType)],  getVMTProcAddr('TMidasConnection','SetConnectType',100));


//RegRegisterMethod(TMidasConnection,'SetUseBroker',TypeInfo(_T1),[TypeInfo(Boolean)], pointer(104));
RegRegisterMethod(TMidasConnection,'SetUseBroker',TypeInfo(_T1),[TypeInfo(Boolean)],  getVMTProcAddr('TMidasConnection','SetUseBroker',104));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
