{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit PSAPI_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  Types,
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  PsAPI;
function Convert_MODULEINFOToVariant(var R : _MODULEINFO) : OleVariant;
function ConvertVariantTo_MODULEINFO(const V : OleVariant) : _MODULEINFO;
function Convert_PROCESS_MEMORY_COUNTERSToVariant(var R : _PROCESS_MEMORY_COUNTERS) : OleVariant;
function ConvertVariantTo_PROCESS_MEMORY_COUNTERS(const V : OleVariant) : _PROCESS_MEMORY_COUNTERS;
function Convert_PSAPI_WS_WATCH_INFORMATIONToVariant(var R : _PSAPI_WS_WATCH_INFORMATION) : OleVariant;
function ConvertVariantTo_PSAPI_WS_WATCH_INFORMATION(const V : OleVariant) : _PSAPI_WS_WATCH_INFORMATION;
function ConvertMODULEINFOToVariant(var R : MODULEINFO) : OleVariant;
function ConvertVariantToMODULEINFO(const V : OleVariant) : MODULEINFO;
function ConvertPROCESS_MEMORY_COUNTERSToVariant(var R : PROCESS_MEMORY_COUNTERS) : OleVariant;
function ConvertVariantToPROCESS_MEMORY_COUNTERS(const V : OleVariant) : PROCESS_MEMORY_COUNTERS;
function ConvertPSAPI_WS_WATCH_INFORMATIONToVariant(var R : PSAPI_WS_WATCH_INFORMATION) : OleVariant;
function ConvertVariantToPSAPI_WS_WATCH_INFORMATION(const V : OleVariant) : PSAPI_WS_WATCH_INFORMATION;
function ConvertTModuleInfoToVariant(var R : TModuleInfo) : OleVariant;
function ConvertVariantToTModuleInfo(const V : OleVariant) : TModuleInfo;
function ConvertTProcessMemoryCountersToVariant(var R : TProcessMemoryCounters) : OleVariant;
function ConvertVariantToTProcessMemoryCounters(const V : OleVariant) : TProcessMemoryCounters;
function ConvertTPSAPIWsWatchInformationToVariant(var R : TPSAPIWsWatchInformation) : OleVariant;
function ConvertVariantToTPSAPIWsWatchInformation(const V : OleVariant) : TPSAPIWsWatchInformation;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type ___MODULEINFO__Wrapper = class(TDCRecordWrapper)
private
fR : _MODULEINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setSizeOfImage(const val : DWORD);
function getSizeOfImage : DWORD;
property SizeOfImage : DWORD read getSizeOfImage write setSizeOfImage;
end;
type ___PROCESS_MEMORY_COUNTERS__Wrapper = class(TDCRecordWrapper)
private
fR : _PROCESS_MEMORY_COUNTERS;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : DWORD);
function getcb : DWORD;
property cb : DWORD read getcb write setcb;
procedure setPageFaultCount(const val : DWORD);
function getPageFaultCount : DWORD;
property PageFaultCount : DWORD read getPageFaultCount write setPageFaultCount;
procedure setPeakWorkingSetSize(const val : DWORD);
function getPeakWorkingSetSize : DWORD;
property PeakWorkingSetSize : DWORD read getPeakWorkingSetSize write setPeakWorkingSetSize;
procedure setWorkingSetSize(const val : DWORD);
function getWorkingSetSize : DWORD;
property WorkingSetSize : DWORD read getWorkingSetSize write setWorkingSetSize;
procedure setQuotaPeakPagedPoolUsage(const val : DWORD);
function getQuotaPeakPagedPoolUsage : DWORD;
property QuotaPeakPagedPoolUsage : DWORD read getQuotaPeakPagedPoolUsage write setQuotaPeakPagedPoolUsage;
procedure setQuotaPagedPoolUsage(const val : DWORD);
function getQuotaPagedPoolUsage : DWORD;
property QuotaPagedPoolUsage : DWORD read getQuotaPagedPoolUsage write setQuotaPagedPoolUsage;
procedure setQuotaPeakNonPagedPoolUsage(const val : DWORD);
function getQuotaPeakNonPagedPoolUsage : DWORD;
property QuotaPeakNonPagedPoolUsage : DWORD read getQuotaPeakNonPagedPoolUsage write setQuotaPeakNonPagedPoolUsage;
procedure setQuotaNonPagedPoolUsage(const val : DWORD);
function getQuotaNonPagedPoolUsage : DWORD;
property QuotaNonPagedPoolUsage : DWORD read getQuotaNonPagedPoolUsage write setQuotaNonPagedPoolUsage;
procedure setPagefileUsage(const val : DWORD);
function getPagefileUsage : DWORD;
property PagefileUsage : DWORD read getPagefileUsage write setPagefileUsage;
procedure setPeakPagefileUsage(const val : DWORD);
function getPeakPagefileUsage : DWORD;
property PeakPagefileUsage : DWORD read getPeakPagefileUsage write setPeakPagefileUsage;
end;
type ___PSAPI_WS_WATCH_INFORMATION__Wrapper = class(TDCRecordWrapper)
private
fR : _PSAPI_WS_WATCH_INFORMATION;
public
function GetRecordPtr : pointer; override;
published
end;
type __MODULEINFO__Wrapper = class(TDCRecordWrapper)
private
fR : MODULEINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setSizeOfImage(const val : DWORD);
function getSizeOfImage : DWORD;
property SizeOfImage : DWORD read getSizeOfImage write setSizeOfImage;
end;
type __PROCESS_MEMORY_COUNTERS__Wrapper = class(TDCRecordWrapper)
private
fR : PROCESS_MEMORY_COUNTERS;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : DWORD);
function getcb : DWORD;
property cb : DWORD read getcb write setcb;
procedure setPageFaultCount(const val : DWORD);
function getPageFaultCount : DWORD;
property PageFaultCount : DWORD read getPageFaultCount write setPageFaultCount;
procedure setPeakWorkingSetSize(const val : DWORD);
function getPeakWorkingSetSize : DWORD;
property PeakWorkingSetSize : DWORD read getPeakWorkingSetSize write setPeakWorkingSetSize;
procedure setWorkingSetSize(const val : DWORD);
function getWorkingSetSize : DWORD;
property WorkingSetSize : DWORD read getWorkingSetSize write setWorkingSetSize;
procedure setQuotaPeakPagedPoolUsage(const val : DWORD);
function getQuotaPeakPagedPoolUsage : DWORD;
property QuotaPeakPagedPoolUsage : DWORD read getQuotaPeakPagedPoolUsage write setQuotaPeakPagedPoolUsage;
procedure setQuotaPagedPoolUsage(const val : DWORD);
function getQuotaPagedPoolUsage : DWORD;
property QuotaPagedPoolUsage : DWORD read getQuotaPagedPoolUsage write setQuotaPagedPoolUsage;
procedure setQuotaPeakNonPagedPoolUsage(const val : DWORD);
function getQuotaPeakNonPagedPoolUsage : DWORD;
property QuotaPeakNonPagedPoolUsage : DWORD read getQuotaPeakNonPagedPoolUsage write setQuotaPeakNonPagedPoolUsage;
procedure setQuotaNonPagedPoolUsage(const val : DWORD);
function getQuotaNonPagedPoolUsage : DWORD;
property QuotaNonPagedPoolUsage : DWORD read getQuotaNonPagedPoolUsage write setQuotaNonPagedPoolUsage;
procedure setPagefileUsage(const val : DWORD);
function getPagefileUsage : DWORD;
property PagefileUsage : DWORD read getPagefileUsage write setPagefileUsage;
procedure setPeakPagefileUsage(const val : DWORD);
function getPeakPagefileUsage : DWORD;
property PeakPagefileUsage : DWORD read getPeakPagefileUsage write setPeakPagefileUsage;
end;
type __PSAPI_WS_WATCH_INFORMATION__Wrapper = class(TDCRecordWrapper)
private
fR : PSAPI_WS_WATCH_INFORMATION;
public
function GetRecordPtr : pointer; override;
published
end;
type __TModuleInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TModuleInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setSizeOfImage(const val : DWORD);
function getSizeOfImage : DWORD;
property SizeOfImage : DWORD read getSizeOfImage write setSizeOfImage;
end;
type __TProcessMemoryCounters__Wrapper = class(TDCRecordWrapper)
private
fR : TProcessMemoryCounters;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : DWORD);
function getcb : DWORD;
property cb : DWORD read getcb write setcb;
procedure setPageFaultCount(const val : DWORD);
function getPageFaultCount : DWORD;
property PageFaultCount : DWORD read getPageFaultCount write setPageFaultCount;
procedure setPeakWorkingSetSize(const val : DWORD);
function getPeakWorkingSetSize : DWORD;
property PeakWorkingSetSize : DWORD read getPeakWorkingSetSize write setPeakWorkingSetSize;
procedure setWorkingSetSize(const val : DWORD);
function getWorkingSetSize : DWORD;
property WorkingSetSize : DWORD read getWorkingSetSize write setWorkingSetSize;
procedure setQuotaPeakPagedPoolUsage(const val : DWORD);
function getQuotaPeakPagedPoolUsage : DWORD;
property QuotaPeakPagedPoolUsage : DWORD read getQuotaPeakPagedPoolUsage write setQuotaPeakPagedPoolUsage;
procedure setQuotaPagedPoolUsage(const val : DWORD);
function getQuotaPagedPoolUsage : DWORD;
property QuotaPagedPoolUsage : DWORD read getQuotaPagedPoolUsage write setQuotaPagedPoolUsage;
procedure setQuotaPeakNonPagedPoolUsage(const val : DWORD);
function getQuotaPeakNonPagedPoolUsage : DWORD;
property QuotaPeakNonPagedPoolUsage : DWORD read getQuotaPeakNonPagedPoolUsage write setQuotaPeakNonPagedPoolUsage;
procedure setQuotaNonPagedPoolUsage(const val : DWORD);
function getQuotaNonPagedPoolUsage : DWORD;
property QuotaNonPagedPoolUsage : DWORD read getQuotaNonPagedPoolUsage write setQuotaNonPagedPoolUsage;
procedure setPagefileUsage(const val : DWORD);
function getPagefileUsage : DWORD;
property PagefileUsage : DWORD read getPagefileUsage write setPagefileUsage;
procedure setPeakPagefileUsage(const val : DWORD);
function getPeakPagefileUsage : DWORD;
property PeakPagefileUsage : DWORD read getPeakPagefileUsage write setPeakPagefileUsage;
end;
type __TPSAPIWsWatchInformation__Wrapper = class(TDCRecordWrapper)
private
fR : TPSAPIWsWatchInformation;
public
function GetRecordPtr : pointer; override;
published
end;
type
_T0 = function (p0 : LPDWORD;
p1 : DWORD;
var p2 : DWORD): BOOL of object;

_T1 = function (p0 : THandle;
p1 : LPDWORD;
p2 : DWORD;
var p3 : DWORD): BOOL of object;

{_T2 = function (p0 : THandle;
p1 : hModule;
p2 : PChar;
p3 : DWORD): DWORD of object;}

{_T3 = function (p0 : THandle;
p1 : hModule;
p2 : PAnsiChar;
p3 : DWORD): DWORD of object;}

{_T4 = function (p0 : THandle;
p1 : hModule;
p2 : PWideChar;
p3 : DWORD): DWORD of object;}

{_T5 = function (p0 : THandle;
p1 : hModule;
p2 : PChar;
p3 : DWORD): DWORD of object;}

{_T6 = function (p0 : THandle;
p1 : hModule;
p2 : PAnsiChar;
p3 : DWORD): DWORD of object;}

{_T7 = function (p0 : THandle;
p1 : hModule;
p2 : PWideChar;
p3 : DWORD): DWORD of object;}

{_T8 = function (p0 : THandle;
p1 : hModule;
p2 : LPMODULEINFO;
p3 : DWORD): BOOL of object;}

_T9 = function (p0 : THandle): BOOL of object;

_T10 = function (p0 : THandle;
p1 : Pointer;
p2 : DWORD): BOOL of object;

_T11 = _T9;

{_T12 = function (p0 : THandle;
p1 : Pointer;
p2 : PChar;
p3 : DWORD): DWORD of object;}

{_T13 = function (p0 : THandle;
p1 : Pointer;
p2 : PAnsiChar;
p3 : DWORD): DWORD of object;}

{_T14 = function (p0 : THandle;
p1 : Pointer;
p2 : PWideChar;
p3 : DWORD): DWORD of object;}

{_T15 = function (p0 : Pointer;
p1 : PChar;
p2 : DWORD): DWORD of object;}

{_T16 = function (p0 : Pointer;
p1 : PAnsiChar;
p2 : DWORD): DWORD of object;}

{_T17 = function (p0 : Pointer;
p1 : PWideChar;
p2 : DWORD): DWORD of object;}

{_T18 = function (p0 : Pointer;
p1 : PChar;
p2 : DWORD): DWORD of object;}

{_T19 = function (p0 : Pointer;
p1 : PAnsiChar;
p2 : DWORD): DWORD of object;}

{_T20 = function (p0 : Pointer;
p1 : PWideChar;
p2 : DWORD): DWORD of object;}

_T21 = function (p0 : PPointer;
p1 : DWORD;
var p2 : DWORD): BOOL of object;

{_T22 = function (p0 : THandle;
p1 : PPROCESS_MEMORY_COUNTERS;
p2 : DWORD): BOOL of object;}

function ___MODULEINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___MODULEINFO__Wrapper.setSizeOfImage(const val : DWORD);
begin
_MODULEINFO(GetRecordPtr^).SizeOfImage := val;
end;
function ___MODULEINFO__Wrapper.getSizeOfImage : DWORD;
begin
result := _MODULEINFO(GetRecordPtr^).SizeOfImage;
end;
function ___PROCESS_MEMORY_COUNTERS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___PROCESS_MEMORY_COUNTERS__Wrapper.setcb(const val : DWORD);
begin
_PROCESS_MEMORY_COUNTERS(GetRecordPtr^).cb := val;
end;
function ___PROCESS_MEMORY_COUNTERS__Wrapper.getcb : DWORD;
begin
result := _PROCESS_MEMORY_COUNTERS(GetRecordPtr^).cb;
end;
procedure ___PROCESS_MEMORY_COUNTERS__Wrapper.setPageFaultCount(const val : DWORD);
begin
_PROCESS_MEMORY_COUNTERS(GetRecordPtr^).PageFaultCount := val;
end;
function ___PROCESS_MEMORY_COUNTERS__Wrapper.getPageFaultCount : DWORD;
begin
result := _PROCESS_MEMORY_COUNTERS(GetRecordPtr^).PageFaultCount;
end;
procedure ___PROCESS_MEMORY_COUNTERS__Wrapper.setPeakWorkingSetSize(const val : DWORD);
begin
_PROCESS_MEMORY_COUNTERS(GetRecordPtr^).PeakWorkingSetSize := val;
end;
function ___PROCESS_MEMORY_COUNTERS__Wrapper.getPeakWorkingSetSize : DWORD;
begin
result := _PROCESS_MEMORY_COUNTERS(GetRecordPtr^).PeakWorkingSetSize;
end;
procedure ___PROCESS_MEMORY_COUNTERS__Wrapper.setWorkingSetSize(const val : DWORD);
begin
_PROCESS_MEMORY_COUNTERS(GetRecordPtr^).WorkingSetSize := val;
end;
function ___PROCESS_MEMORY_COUNTERS__Wrapper.getWorkingSetSize : DWORD;
begin
result := _PROCESS_MEMORY_COUNTERS(GetRecordPtr^).WorkingSetSize;
end;
procedure ___PROCESS_MEMORY_COUNTERS__Wrapper.setQuotaPeakPagedPoolUsage(const val : DWORD);
begin
_PROCESS_MEMORY_COUNTERS(GetRecordPtr^).QuotaPeakPagedPoolUsage := val;
end;
function ___PROCESS_MEMORY_COUNTERS__Wrapper.getQuotaPeakPagedPoolUsage : DWORD;
begin
result := _PROCESS_MEMORY_COUNTERS(GetRecordPtr^).QuotaPeakPagedPoolUsage;
end;
procedure ___PROCESS_MEMORY_COUNTERS__Wrapper.setQuotaPagedPoolUsage(const val : DWORD);
begin
_PROCESS_MEMORY_COUNTERS(GetRecordPtr^).QuotaPagedPoolUsage := val;
end;
function ___PROCESS_MEMORY_COUNTERS__Wrapper.getQuotaPagedPoolUsage : DWORD;
begin
result := _PROCESS_MEMORY_COUNTERS(GetRecordPtr^).QuotaPagedPoolUsage;
end;
procedure ___PROCESS_MEMORY_COUNTERS__Wrapper.setQuotaPeakNonPagedPoolUsage(const val : DWORD);
begin
_PROCESS_MEMORY_COUNTERS(GetRecordPtr^).QuotaPeakNonPagedPoolUsage := val;
end;
function ___PROCESS_MEMORY_COUNTERS__Wrapper.getQuotaPeakNonPagedPoolUsage : DWORD;
begin
result := _PROCESS_MEMORY_COUNTERS(GetRecordPtr^).QuotaPeakNonPagedPoolUsage;
end;
procedure ___PROCESS_MEMORY_COUNTERS__Wrapper.setQuotaNonPagedPoolUsage(const val : DWORD);
begin
_PROCESS_MEMORY_COUNTERS(GetRecordPtr^).QuotaNonPagedPoolUsage := val;
end;
function ___PROCESS_MEMORY_COUNTERS__Wrapper.getQuotaNonPagedPoolUsage : DWORD;
begin
result := _PROCESS_MEMORY_COUNTERS(GetRecordPtr^).QuotaNonPagedPoolUsage;
end;
procedure ___PROCESS_MEMORY_COUNTERS__Wrapper.setPagefileUsage(const val : DWORD);
begin
_PROCESS_MEMORY_COUNTERS(GetRecordPtr^).PagefileUsage := val;
end;
function ___PROCESS_MEMORY_COUNTERS__Wrapper.getPagefileUsage : DWORD;
begin
result := _PROCESS_MEMORY_COUNTERS(GetRecordPtr^).PagefileUsage;
end;
procedure ___PROCESS_MEMORY_COUNTERS__Wrapper.setPeakPagefileUsage(const val : DWORD);
begin
_PROCESS_MEMORY_COUNTERS(GetRecordPtr^).PeakPagefileUsage := val;
end;
function ___PROCESS_MEMORY_COUNTERS__Wrapper.getPeakPagefileUsage : DWORD;
begin
result := _PROCESS_MEMORY_COUNTERS(GetRecordPtr^).PeakPagefileUsage;
end;
function ___PSAPI_WS_WATCH_INFORMATION__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __MODULEINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MODULEINFO__Wrapper.setSizeOfImage(const val : DWORD);
begin
MODULEINFO(GetRecordPtr^).SizeOfImage := val;
end;
function __MODULEINFO__Wrapper.getSizeOfImage : DWORD;
begin
result := MODULEINFO(GetRecordPtr^).SizeOfImage;
end;
function __PROCESS_MEMORY_COUNTERS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __PROCESS_MEMORY_COUNTERS__Wrapper.setcb(const val : DWORD);
begin
PROCESS_MEMORY_COUNTERS(GetRecordPtr^).cb := val;
end;
function __PROCESS_MEMORY_COUNTERS__Wrapper.getcb : DWORD;
begin
result := PROCESS_MEMORY_COUNTERS(GetRecordPtr^).cb;
end;
procedure __PROCESS_MEMORY_COUNTERS__Wrapper.setPageFaultCount(const val : DWORD);
begin
PROCESS_MEMORY_COUNTERS(GetRecordPtr^).PageFaultCount := val;
end;
function __PROCESS_MEMORY_COUNTERS__Wrapper.getPageFaultCount : DWORD;
begin
result := PROCESS_MEMORY_COUNTERS(GetRecordPtr^).PageFaultCount;
end;
procedure __PROCESS_MEMORY_COUNTERS__Wrapper.setPeakWorkingSetSize(const val : DWORD);
begin
PROCESS_MEMORY_COUNTERS(GetRecordPtr^).PeakWorkingSetSize := val;
end;
function __PROCESS_MEMORY_COUNTERS__Wrapper.getPeakWorkingSetSize : DWORD;
begin
result := PROCESS_MEMORY_COUNTERS(GetRecordPtr^).PeakWorkingSetSize;
end;
procedure __PROCESS_MEMORY_COUNTERS__Wrapper.setWorkingSetSize(const val : DWORD);
begin
PROCESS_MEMORY_COUNTERS(GetRecordPtr^).WorkingSetSize := val;
end;
function __PROCESS_MEMORY_COUNTERS__Wrapper.getWorkingSetSize : DWORD;
begin
result := PROCESS_MEMORY_COUNTERS(GetRecordPtr^).WorkingSetSize;
end;
procedure __PROCESS_MEMORY_COUNTERS__Wrapper.setQuotaPeakPagedPoolUsage(const val : DWORD);
begin
PROCESS_MEMORY_COUNTERS(GetRecordPtr^).QuotaPeakPagedPoolUsage := val;
end;
function __PROCESS_MEMORY_COUNTERS__Wrapper.getQuotaPeakPagedPoolUsage : DWORD;
begin
result := PROCESS_MEMORY_COUNTERS(GetRecordPtr^).QuotaPeakPagedPoolUsage;
end;
procedure __PROCESS_MEMORY_COUNTERS__Wrapper.setQuotaPagedPoolUsage(const val : DWORD);
begin
PROCESS_MEMORY_COUNTERS(GetRecordPtr^).QuotaPagedPoolUsage := val;
end;
function __PROCESS_MEMORY_COUNTERS__Wrapper.getQuotaPagedPoolUsage : DWORD;
begin
result := PROCESS_MEMORY_COUNTERS(GetRecordPtr^).QuotaPagedPoolUsage;
end;
procedure __PROCESS_MEMORY_COUNTERS__Wrapper.setQuotaPeakNonPagedPoolUsage(const val : DWORD);
begin
PROCESS_MEMORY_COUNTERS(GetRecordPtr^).QuotaPeakNonPagedPoolUsage := val;
end;
function __PROCESS_MEMORY_COUNTERS__Wrapper.getQuotaPeakNonPagedPoolUsage : DWORD;
begin
result := PROCESS_MEMORY_COUNTERS(GetRecordPtr^).QuotaPeakNonPagedPoolUsage;
end;
procedure __PROCESS_MEMORY_COUNTERS__Wrapper.setQuotaNonPagedPoolUsage(const val : DWORD);
begin
PROCESS_MEMORY_COUNTERS(GetRecordPtr^).QuotaNonPagedPoolUsage := val;
end;
function __PROCESS_MEMORY_COUNTERS__Wrapper.getQuotaNonPagedPoolUsage : DWORD;
begin
result := PROCESS_MEMORY_COUNTERS(GetRecordPtr^).QuotaNonPagedPoolUsage;
end;
procedure __PROCESS_MEMORY_COUNTERS__Wrapper.setPagefileUsage(const val : DWORD);
begin
PROCESS_MEMORY_COUNTERS(GetRecordPtr^).PagefileUsage := val;
end;
function __PROCESS_MEMORY_COUNTERS__Wrapper.getPagefileUsage : DWORD;
begin
result := PROCESS_MEMORY_COUNTERS(GetRecordPtr^).PagefileUsage;
end;
procedure __PROCESS_MEMORY_COUNTERS__Wrapper.setPeakPagefileUsage(const val : DWORD);
begin
PROCESS_MEMORY_COUNTERS(GetRecordPtr^).PeakPagefileUsage := val;
end;
function __PROCESS_MEMORY_COUNTERS__Wrapper.getPeakPagefileUsage : DWORD;
begin
result := PROCESS_MEMORY_COUNTERS(GetRecordPtr^).PeakPagefileUsage;
end;
function __PSAPI_WS_WATCH_INFORMATION__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TModuleInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TModuleInfo__Wrapper.setSizeOfImage(const val : DWORD);
begin
TModuleInfo(GetRecordPtr^).SizeOfImage := val;
end;
function __TModuleInfo__Wrapper.getSizeOfImage : DWORD;
begin
result := TModuleInfo(GetRecordPtr^).SizeOfImage;
end;
function __TProcessMemoryCounters__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TProcessMemoryCounters__Wrapper.setcb(const val : DWORD);
begin
TProcessMemoryCounters(GetRecordPtr^).cb := val;
end;
function __TProcessMemoryCounters__Wrapper.getcb : DWORD;
begin
result := TProcessMemoryCounters(GetRecordPtr^).cb;
end;
procedure __TProcessMemoryCounters__Wrapper.setPageFaultCount(const val : DWORD);
begin
TProcessMemoryCounters(GetRecordPtr^).PageFaultCount := val;
end;
function __TProcessMemoryCounters__Wrapper.getPageFaultCount : DWORD;
begin
result := TProcessMemoryCounters(GetRecordPtr^).PageFaultCount;
end;
procedure __TProcessMemoryCounters__Wrapper.setPeakWorkingSetSize(const val : DWORD);
begin
TProcessMemoryCounters(GetRecordPtr^).PeakWorkingSetSize := val;
end;
function __TProcessMemoryCounters__Wrapper.getPeakWorkingSetSize : DWORD;
begin
result := TProcessMemoryCounters(GetRecordPtr^).PeakWorkingSetSize;
end;
procedure __TProcessMemoryCounters__Wrapper.setWorkingSetSize(const val : DWORD);
begin
TProcessMemoryCounters(GetRecordPtr^).WorkingSetSize := val;
end;
function __TProcessMemoryCounters__Wrapper.getWorkingSetSize : DWORD;
begin
result := TProcessMemoryCounters(GetRecordPtr^).WorkingSetSize;
end;
procedure __TProcessMemoryCounters__Wrapper.setQuotaPeakPagedPoolUsage(const val : DWORD);
begin
TProcessMemoryCounters(GetRecordPtr^).QuotaPeakPagedPoolUsage := val;
end;
function __TProcessMemoryCounters__Wrapper.getQuotaPeakPagedPoolUsage : DWORD;
begin
result := TProcessMemoryCounters(GetRecordPtr^).QuotaPeakPagedPoolUsage;
end;
procedure __TProcessMemoryCounters__Wrapper.setQuotaPagedPoolUsage(const val : DWORD);
begin
TProcessMemoryCounters(GetRecordPtr^).QuotaPagedPoolUsage := val;
end;
function __TProcessMemoryCounters__Wrapper.getQuotaPagedPoolUsage : DWORD;
begin
result := TProcessMemoryCounters(GetRecordPtr^).QuotaPagedPoolUsage;
end;
procedure __TProcessMemoryCounters__Wrapper.setQuotaPeakNonPagedPoolUsage(const val : DWORD);
begin
TProcessMemoryCounters(GetRecordPtr^).QuotaPeakNonPagedPoolUsage := val;
end;
function __TProcessMemoryCounters__Wrapper.getQuotaPeakNonPagedPoolUsage : DWORD;
begin
result := TProcessMemoryCounters(GetRecordPtr^).QuotaPeakNonPagedPoolUsage;
end;
procedure __TProcessMemoryCounters__Wrapper.setQuotaNonPagedPoolUsage(const val : DWORD);
begin
TProcessMemoryCounters(GetRecordPtr^).QuotaNonPagedPoolUsage := val;
end;
function __TProcessMemoryCounters__Wrapper.getQuotaNonPagedPoolUsage : DWORD;
begin
result := TProcessMemoryCounters(GetRecordPtr^).QuotaNonPagedPoolUsage;
end;
procedure __TProcessMemoryCounters__Wrapper.setPagefileUsage(const val : DWORD);
begin
TProcessMemoryCounters(GetRecordPtr^).PagefileUsage := val;
end;
function __TProcessMemoryCounters__Wrapper.getPagefileUsage : DWORD;
begin
result := TProcessMemoryCounters(GetRecordPtr^).PagefileUsage;
end;
procedure __TProcessMemoryCounters__Wrapper.setPeakPagefileUsage(const val : DWORD);
begin
TProcessMemoryCounters(GetRecordPtr^).PeakPagefileUsage := val;
end;
function __TProcessMemoryCounters__Wrapper.getPeakPagefileUsage : DWORD;
begin
result := TProcessMemoryCounters(GetRecordPtr^).PeakPagefileUsage;
end;
function __TPSAPIWsWatchInformation__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __MODULEINFO_ : IDispatch;
begin
  result := ___MODULEINFO__Wrapper.Create;
end;
function __PROCESS_MEMORY_COUNTERS_ : IDispatch;
begin
  result := ___PROCESS_MEMORY_COUNTERS__Wrapper.Create;
end;
function __PSAPI_WS_WATCH_INFORMATION_ : IDispatch;
begin
  result := ___PSAPI_WS_WATCH_INFORMATION__Wrapper.Create;
end;
function _MODULEINFO_ : IDispatch;
begin
  result := __MODULEINFO__Wrapper.Create;
end;
function _PROCESS_MEMORY_COUNTERS_ : IDispatch;
begin
  result := __PROCESS_MEMORY_COUNTERS__Wrapper.Create;
end;
function _PSAPI_WS_WATCH_INFORMATION_ : IDispatch;
begin
  result := __PSAPI_WS_WATCH_INFORMATION__Wrapper.Create;
end;
function _TModuleInfo_ : IDispatch;
begin
  result := __TModuleInfo__Wrapper.Create;
end;
function _TProcessMemoryCounters_ : IDispatch;
begin
  result := __TProcessMemoryCounters__Wrapper.Create;
end;
function _TPSAPIWsWatchInformation_ : IDispatch;
begin
  result := __TPSAPIWsWatchInformation__Wrapper.Create;
end;

type ___MODULEINFO__Wrapper__ = class(___MODULEINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___MODULEINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_MODULEINFOToVariant(var R : _MODULEINFO) : OleVariant;
var
__rw : ___MODULEINFO__Wrapper__;
begin
__rw := ___MODULEINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_MODULEINFO(const V : OleVariant) : _MODULEINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _MODULEINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___PROCESS_MEMORY_COUNTERS__Wrapper__ = class(___PROCESS_MEMORY_COUNTERS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___PROCESS_MEMORY_COUNTERS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_PROCESS_MEMORY_COUNTERSToVariant(var R : _PROCESS_MEMORY_COUNTERS) : OleVariant;
var
__rw : ___PROCESS_MEMORY_COUNTERS__Wrapper__;
begin
__rw := ___PROCESS_MEMORY_COUNTERS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_PROCESS_MEMORY_COUNTERS(const V : OleVariant) : _PROCESS_MEMORY_COUNTERS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _PROCESS_MEMORY_COUNTERS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___PSAPI_WS_WATCH_INFORMATION__Wrapper__ = class(___PSAPI_WS_WATCH_INFORMATION__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___PSAPI_WS_WATCH_INFORMATION__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_PSAPI_WS_WATCH_INFORMATIONToVariant(var R : _PSAPI_WS_WATCH_INFORMATION) : OleVariant;
var
__rw : ___PSAPI_WS_WATCH_INFORMATION__Wrapper__;
begin
__rw := ___PSAPI_WS_WATCH_INFORMATION__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_PSAPI_WS_WATCH_INFORMATION(const V : OleVariant) : _PSAPI_WS_WATCH_INFORMATION;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _PSAPI_WS_WATCH_INFORMATION((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MODULEINFO__Wrapper__ = class(__MODULEINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MODULEINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMODULEINFOToVariant(var R : MODULEINFO) : OleVariant;
var
__rw : __MODULEINFO__Wrapper__;
begin
__rw := __MODULEINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMODULEINFO(const V : OleVariant) : MODULEINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MODULEINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __PROCESS_MEMORY_COUNTERS__Wrapper__ = class(__PROCESS_MEMORY_COUNTERS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __PROCESS_MEMORY_COUNTERS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertPROCESS_MEMORY_COUNTERSToVariant(var R : PROCESS_MEMORY_COUNTERS) : OleVariant;
var
__rw : __PROCESS_MEMORY_COUNTERS__Wrapper__;
begin
__rw := __PROCESS_MEMORY_COUNTERS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToPROCESS_MEMORY_COUNTERS(const V : OleVariant) : PROCESS_MEMORY_COUNTERS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := PROCESS_MEMORY_COUNTERS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __PSAPI_WS_WATCH_INFORMATION__Wrapper__ = class(__PSAPI_WS_WATCH_INFORMATION__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __PSAPI_WS_WATCH_INFORMATION__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertPSAPI_WS_WATCH_INFORMATIONToVariant(var R : PSAPI_WS_WATCH_INFORMATION) : OleVariant;
var
__rw : __PSAPI_WS_WATCH_INFORMATION__Wrapper__;
begin
__rw := __PSAPI_WS_WATCH_INFORMATION__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToPSAPI_WS_WATCH_INFORMATION(const V : OleVariant) : PSAPI_WS_WATCH_INFORMATION;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := PSAPI_WS_WATCH_INFORMATION((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TModuleInfo__Wrapper__ = class(__TModuleInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TModuleInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTModuleInfoToVariant(var R : TModuleInfo) : OleVariant;
var
__rw : __TModuleInfo__Wrapper__;
begin
__rw := __TModuleInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTModuleInfo(const V : OleVariant) : TModuleInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TModuleInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TProcessMemoryCounters__Wrapper__ = class(__TProcessMemoryCounters__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TProcessMemoryCounters__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTProcessMemoryCountersToVariant(var R : TProcessMemoryCounters) : OleVariant;
var
__rw : __TProcessMemoryCounters__Wrapper__;
begin
__rw := __TProcessMemoryCounters__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTProcessMemoryCounters(const V : OleVariant) : TProcessMemoryCounters;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TProcessMemoryCounters((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPSAPIWsWatchInformation__Wrapper__ = class(__TPSAPIWsWatchInformation__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPSAPIWsWatchInformation__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPSAPIWsWatchInformationToVariant(var R : TPSAPIWsWatchInformation) : OleVariant;
var
__rw : __TPSAPIWsWatchInformation__Wrapper__;
begin
__rw := __TPSAPIWsWatchInformation__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPSAPIWsWatchInformation(const V : OleVariant) : TPSAPIWsWatchInformation;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPSAPIWsWatchInformation((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..14] of string = (
'_MODULEINFO'
,'_PROCESS_MEMORY_COUNTERS'
,'_PSAPI_WS_WATCH_INFORMATION'
,'MODULEINFO'
,'PROCESS_MEMORY_COUNTERS'
,'PSAPI_WS_WATCH_INFORMATION'
,'TModuleInfo'
,'TProcessMemoryCounters'
,'TPSAPIWsWatchInformation'
,'EnumProcesses'
,'EnumProcessModules'
,'EmptyWorkingSet'
,'QueryWorkingSet'
,'InitializeProcessForWsWatch'
,'EnumDeviceDrivers'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(__MODULEINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(__PROCESS_MEMORY_COUNTERS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(__PSAPI_WS_WATCH_INFORMATION_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(_MODULEINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(_PROCESS_MEMORY_COUNTERS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[5],Addr(_PSAPI_WS_WATCH_INFORMATION_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[6],Addr(_TModuleInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[7],Addr(_TProcessMemoryCounters_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[8],Addr(_TPSAPIWsWatchInformation_)));
RegisterProc(nil,MethodNames[9],mtProc,TypeInfo(_T0),[
TypeInfoPointer,
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(EnumProcesses),cRegister);

RegisterProc(nil,MethodNames[10],mtProc,TypeInfo(_T1),[
TypeInfo(THandle),
TypeInfoPointer,
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(EnumProcessModules),cRegister);

RegisterProc(nil,MethodNames[11],mtProc,TypeInfo(_T9),[
TypeInfo(THandle),TypeInfo(BOOL)],Addr(EmptyWorkingSet),cRegister);

RegisterProc(nil,MethodNames[12],mtProc,TypeInfo(_T10),[
TypeInfo(THandle),
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(QueryWorkingSet),cRegister);

RegisterProc(nil,MethodNames[13],mtProc,TypeInfo(_T11),[
TypeInfo(THandle),TypeInfo(BOOL)],Addr(InitializeProcessForWsWatch),cRegister);

RegisterProc(nil,MethodNames[14],mtProc,TypeInfo(_T21),[
TypeInfoPointer,
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(EnumDeviceDrivers),cRegister);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'GetModuleBaseName',mtProc,TypeInfo(_T2),[
TypeInfo(THandle),
TypeInfo(hModule),
TypeInfoPChar,
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(GetModuleBaseName),cRegister)}

{RegisterProc(nil,'GetModuleBaseNameA',mtProc,TypeInfo(_T3),[
TypeInfo(THandle),
TypeInfo(hModule),
TypeInfoPChar,
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(GetModuleBaseNameA),cRegister)}

{RegisterProc(nil,'GetModuleBaseNameW',mtProc,TypeInfo(_T4),[
TypeInfo(THandle),
TypeInfo(hModule),
TypeInfoPWideChar,
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(GetModuleBaseNameW),cRegister)}

{RegisterProc(nil,'GetModuleFileNameEx',mtProc,TypeInfo(_T5),[
TypeInfo(THandle),
TypeInfo(hModule),
TypeInfoPChar,
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(GetModuleFileNameEx),cRegister)}

{RegisterProc(nil,'GetModuleFileNameExA',mtProc,TypeInfo(_T6),[
TypeInfo(THandle),
TypeInfo(hModule),
TypeInfoPChar,
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(GetModuleFileNameExA),cRegister)}

{RegisterProc(nil,'GetModuleFileNameExW',mtProc,TypeInfo(_T7),[
TypeInfo(THandle),
TypeInfo(hModule),
TypeInfoPWideChar,
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(GetModuleFileNameExW),cRegister)}

{RegisterProc(nil,'GetModuleInformation',mtProc,TypeInfo(_T8),[
TypeInfo(THandle),
TypeInfo(hModule),
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(GetModuleInformation),cRegister)}

{RegisterProc(nil,'GetMappedFileName',mtProc,TypeInfo(_T12),[
TypeInfo(THandle),
TypeInfoPointer,
TypeInfoPChar,
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(GetMappedFileName),cRegister)}

{RegisterProc(nil,'GetMappedFileNameA',mtProc,TypeInfo(_T13),[
TypeInfo(THandle),
TypeInfoPointer,
TypeInfoPChar,
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(GetMappedFileNameA),cRegister)}

{RegisterProc(nil,'GetMappedFileNameW',mtProc,TypeInfo(_T14),[
TypeInfo(THandle),
TypeInfoPointer,
TypeInfoPWideChar,
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(GetMappedFileNameW),cRegister)}

{RegisterProc(nil,'GetDeviceDriverBaseName',mtProc,TypeInfo(_T15),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(GetDeviceDriverBaseName),cRegister)}

{RegisterProc(nil,'GetDeviceDriverBaseNameA',mtProc,TypeInfo(_T16),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(GetDeviceDriverBaseNameA),cRegister)}

{RegisterProc(nil,'GetDeviceDriverBaseNameW',mtProc,TypeInfo(_T17),[
TypeInfoPointer,
TypeInfoPWideChar,
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(GetDeviceDriverBaseNameW),cRegister)}

{RegisterProc(nil,'GetDeviceDriverFileName',mtProc,TypeInfo(_T18),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(GetDeviceDriverFileName),cRegister)}

{RegisterProc(nil,'GetDeviceDriverFileNameA',mtProc,TypeInfo(_T19),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(GetDeviceDriverFileNameA),cRegister)}

{RegisterProc(nil,'GetDeviceDriverFileNameW',mtProc,TypeInfo(_T20),[
TypeInfoPointer,
TypeInfoPWideChar,
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(GetDeviceDriverFileNameW),cRegister)}

{RegisterProc(nil,'GetProcessMemoryInfo',mtProc,TypeInfo(_T22),[
TypeInfo(THandle),
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(GetProcessMemoryInfo),cRegister)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
