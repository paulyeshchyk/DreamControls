{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDTHREAD_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdException,
  IdGlobal,
  SysUtils,
  SyncObjs,
  IdThread;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
{_T0 = procedure (p0 : TThreadMethod) of object;}

_T1 = procedure  of object;

_T2 = _T1;

_T3 = _T1;

_T4 = _T1;

_T5 = _T1;

_T6 = procedure (p0 : Exception) of object;

_T7 = _T1;

_T8 = _T1;

_T9 = procedure (p0 : Boolean) of object;

_T10 = _T1;

_T11 = _T1;

_T12 = _T1;

_T13 = _T1;

function __DC__GetTIdBaseThread__ReturnValue(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdBaseThread(Instance).ReturnValue;
end;

procedure __DC__SetTIdBaseThread__ReturnValue(Instance : TObject; Params : PVariantArgList);
begin
TIdBaseThread(Instance).ReturnValue:=OleVariant(Params^[0]);
end;

function __DC__GetTIdBaseThread__Terminated(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdBaseThread(Instance).Terminated;
end;

function __DC__GetTIdThread__Data(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdThread(Instance).Data);
end;

procedure __DC__SetTIdThread__Data(Instance : TObject; Params : PVariantArgList);
begin
TIdThread(Instance).Data:=TObject(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIdThread__StopMode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdThread(Instance).StopMode;
end;

procedure __DC__SetTIdThread__StopMode(Instance : TObject; Params : PVariantArgList);
begin
TIdThread(Instance).StopMode:=OleVariant(Params^[0]);
end;

function __DC__GetTIdThread__Stopped(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdThread(Instance).Stopped;
end;

function __DC__GetTIdThread__TerminatingException(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdThread(Instance).TerminatingException;
end;

procedure __RegisterProps;
begin
RegisterProperty(TIdBaseThread,'ReturnValue',__DC__GetTIdBaseThread__ReturnValue,__DC__SetTIdBaseThread__ReturnValue);
RegisterProperty(TIdBaseThread,'Terminated',__DC__GetTIdBaseThread__Terminated,nil);
RegisterProperty(TIdThread,'Data',__DC__GetTIdThread__Data,__DC__SetTIdThread__Data);
RegisterProperty(TIdThread,'StopMode',__DC__GetTIdThread__StopMode,__DC__SetTIdThread__StopMode);
RegisterProperty(TIdThread,'Stopped',__DC__GetTIdThread__Stopped,nil);
RegisterProperty(TIdThread,'TerminatingException',__DC__GetTIdThread__TerminatingException,nil);
end;

const __ConstNames0 : array[0..1] of string = (
'smTerminate'
,'smSuspend'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,smTerminate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,smSuspend));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..3] of TClass = (
EIdThreadException,
EIdThreadTerminateAndWaitFor,
TIdBaseThread,
TIdThread
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TIdThread,'AfterRun',TypeInfo(_T1),NoParams, pointer(8));
RegRegisterMethod(TIdThread,'AfterRun',TypeInfo(_T1),NoParams,  getVMTProcAddr('TIdThread','AfterRun',8));


//RegRegisterMethod(TIdThread,'AfterExecute',TypeInfo(_T2),NoParams, pointer(12));
RegRegisterMethod(TIdThread,'AfterExecute',TypeInfo(_T2),NoParams,  getVMTProcAddr('TIdThread','AfterExecute',12));


//RegRegisterMethod(TIdThread,'BeforeExecute',TypeInfo(_T3),NoParams, pointer(16));
RegRegisterMethod(TIdThread,'BeforeExecute',TypeInfo(_T3),NoParams,  getVMTProcAddr('TIdThread','BeforeExecute',16));


//RegRegisterMethod(TIdThread,'BeforeRun',TypeInfo(_T4),NoParams, pointer(20));
RegRegisterMethod(TIdThread,'BeforeRun',TypeInfo(_T4),NoParams,  getVMTProcAddr('TIdThread','BeforeRun',20));


//RegRegisterMethod(TIdThread,'Cleanup',TypeInfo(_T5),NoParams, pointer(24));
RegRegisterMethod(TIdThread,'Cleanup',TypeInfo(_T5),NoParams,  getVMTProcAddr('TIdThread','Cleanup',24));


//RegRegisterMethod(TIdThread,'DoException',TypeInfo(_T6),[TypeInfo(Exception)], pointer(28));
RegRegisterMethod(TIdThread,'DoException',TypeInfo(_T6),[TypeInfo(Exception)],  getVMTProcAddr('TIdThread','DoException',28));


//RegRegisterMethod(TIdThread,'DoStopped',TypeInfo(_T7),NoParams, pointer(32));
RegRegisterMethod(TIdThread,'DoStopped',TypeInfo(_T7),NoParams,  getVMTProcAddr('TIdThread','DoStopped',32));


//RegRegisterMethod(TIdThread,'Run',TypeInfo(_T8),NoParams, pointer(36));
RegRegisterMethod(TIdThread,'Run',TypeInfo(_T8),NoParams,  getVMTProcAddr('TIdThread','Run',36));


RegisterProc(TIdThread,'Create',mtConstructor,TypeInfo(_T9),[
TypeInfo(Boolean)], pointer(40),cRegister);

//RegRegisterMethod(TIdThread,'Start',TypeInfo(_T10),NoParams, pointer(44));
RegRegisterMethod(TIdThread,'Start',TypeInfo(_T10),NoParams,  getVMTProcAddr('TIdThread','Start',44));


//RegRegisterMethod(TIdThread,'Stop',TypeInfo(_T11),NoParams, pointer(48));
RegRegisterMethod(TIdThread,'Stop',TypeInfo(_T11),NoParams,  getVMTProcAddr('TIdThread','Stop',48));


//RegRegisterMethod(TIdThread,'Terminate',TypeInfo(_T12),NoParams, pointer(52));
RegRegisterMethod(TIdThread,'Terminate',TypeInfo(_T12),NoParams,  getVMTProcAddr('TIdThread','Terminate',52));


//RegRegisterMethod(TIdThread,'TerminateAndWaitFor',TypeInfo(_T13),NoParams, pointer(56));
RegRegisterMethod(TIdThread,'TerminateAndWaitFor',TypeInfo(_T13),NoParams,  getVMTProcAddr('TIdThread','TerminateAndWaitFor',56));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
{RegRegisterMethod(TIdBaseThread,'Synchronize',TypeInfo(_T0),[
TypeInfo(TThreadMethod)],Addr(TIdBaseThread.Synchronize))}

RegisterEvent(TypeInfo(TIdExceptionThreadEvent),[
TypeInfo(TIdThread),
TypeInfo(Exception)]);

RegisterEvent(TypeInfo(TIdNotifyThreadEvent),[
TypeInfo(TIdThread)]);

RegisterEvent(TypeInfo(TIdSynchronizeThreadEvent),[
TypeInfo(TIdThread),
TypeInfoPointer]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
