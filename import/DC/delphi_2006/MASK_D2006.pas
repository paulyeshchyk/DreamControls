{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit MASK_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  SysUtils,
  Classes,
  StdCtrls,
  Controls,
  Messages,
  Forms,
  Graphics,
  Menus,
  MaskUtils,
  Mask;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = function : Boolean of object;

_T1 = procedure  of object;

_T2 = function (const p0 : string;
var p1 : Integer): Boolean of object;

_T3 = _T1;

_T4 = _T1;

_T5 = function : Integer of object;

function __DC__GetTCustomMaskEdit__IsMasked(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomMaskEdit(Instance).IsMasked;
end;

function __DC__GetTCustomMaskEdit__EditText(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomMaskEdit(Instance).EditText;
end;

procedure __DC__SetTCustomMaskEdit__EditText(Instance : TObject; Params : PVariantArgList);
begin
TCustomMaskEdit(Instance).EditText:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomMaskEdit__Text(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomMaskEdit(Instance).Text;
end;

procedure __DC__SetTCustomMaskEdit__Text(Instance : TObject; Params : PVariantArgList);
begin
TCustomMaskEdit(Instance).Text:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TCustomMaskEdit,'IsMasked',__DC__GetTCustomMaskEdit__IsMasked,nil);
RegisterProperty(TCustomMaskEdit,'EditText',__DC__GetTCustomMaskEdit__EditText,__DC__SetTCustomMaskEdit__EditText);
RegisterProperty(TCustomMaskEdit,'Text',__DC__GetTCustomMaskEdit__Text,__DC__SetTCustomMaskEdit__Text);
end;

const __ConstNames0 : array[0..2] of string = (
'msMasked'
,'msReEnter'
,'msDBSetText'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,msMasked));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,msReEnter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,msDBSetText));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..2] of TClass = (
EDBEditError,
TCustomMaskEdit,
TMaskEdit
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TCustomMaskEdit,'EditCanModify',TypeInfo(_T0),[TypeInfo(Boolean)], pointer(248));
RegRegisterMethod(TCustomMaskEdit,'EditCanModify',TypeInfo(_T0),[TypeInfo(Boolean)],  getVMTProcAddr('TCustomMaskEdit','EditCanModify',248));


//RegRegisterMethod(TCustomMaskEdit,'Reset',TypeInfo(_T1),NoParams, pointer(252));
RegRegisterMethod(TCustomMaskEdit,'Reset',TypeInfo(_T1),NoParams,  getVMTProcAddr('TCustomMaskEdit','Reset',252));


//RegRegisterMethod(TCustomMaskEdit,'Validate',TypeInfo(_T2),[TypeInfo(string),TypeInfo(Integer),TypeInfo(Boolean)], pointer(256));
RegRegisterMethod(TCustomMaskEdit,'Validate',TypeInfo(_T2),[TypeInfo(string),TypeInfo(Integer),TypeInfo(Boolean)],  getVMTProcAddr('TCustomMaskEdit','Validate',256));


//RegRegisterMethod(TCustomMaskEdit,'ValidateError',TypeInfo(_T3),NoParams, pointer(260));
RegRegisterMethod(TCustomMaskEdit,'ValidateError',TypeInfo(_T3),NoParams,  getVMTProcAddr('TCustomMaskEdit','ValidateError',260));


//RegRegisterMethod(TCustomMaskEdit,'ValidateEdit',TypeInfo(_T4),NoParams, pointer(264));
RegRegisterMethod(TCustomMaskEdit,'ValidateEdit',TypeInfo(_T4),NoParams,  getVMTProcAddr('TCustomMaskEdit','ValidateEdit',264));


RegRegisterMethod(TCustomMaskEdit,'GetTextLen',TypeInfo(_T5),[TypeInfo(Integer)],Addr(TCustomMaskEdit.GetTextLen));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
