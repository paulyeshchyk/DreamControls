{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit WEBSERVEXP_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Classes,
  IntfInfo,
  TypInfo,
  XMLIntf,
  XMLDoc,
  xmldom,
  XmlSchema,
  WSDLIntf,
  WSDLBind,
  XMLSchemaTags,
  WebServExp;
function ConvertTIntfMethEntryToVariant(var R : TIntfMethEntry) : OleVariant;
function ConvertVariantToTIntfMethEntry(const V : OleVariant) : TIntfMethEntry;
function ConvertTSchemaTypeToVariant(var R : TSchemaType) : OleVariant;
function ConvertVariantToTSchemaType(const V : OleVariant) : TSchemaType;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TSchemaType__Wrapper = class(TDCRecordWrapper)
private
fR : TSchemaType;
public
function GetRecordPtr : pointer; override;
published
procedure setTypeName(const val : WideString);
function getTypeName : WideString;
property TypeName : WideString read getTypeName write setTypeName;
procedure setNameSpace(const val : WideString);
function getNameSpace : WideString;
property NameSpace : WideString read getNameSpace write setNameSpace;
procedure setNSPrefix(const val : WideString);
function getNSPrefix : WideString;
property NSPrefix : WideString read getNSPrefix write setNSPrefix;
procedure setXSGenerated(const val : Boolean);
function getXSGenerated : Boolean;
property XSGenerated : Boolean read getXSGenerated write setXSGenerated;
end;
type __TIntfMethEntry__Wrapper = class(TDCRecordWrapper)
private
fR : TIntfMethEntry;
public
function GetRecordPtr : pointer; override;
published
procedure setName(const val : AnsiString);
function getName : AnsiString;
property Name : AnsiString read getName write setName;
procedure setCC(const val : TCallConv);
function getCC : TCallConv;
property CC : TCallConv read getCC write setCC;
procedure setPos(const val : Integer);
function getPos : Integer;
property Pos : Integer read getPos write setPos;
procedure setParamCount(const val : Integer);
function getParamCount : Integer;
property ParamCount : Integer read getParamCount write setParamCount;
procedure setHasRTTI(const val : Boolean);
function getHasRTTI : Boolean;
property HasRTTI : Boolean read getHasRTTI write setHasRTTI;
end;
type
_T0 = function (const p0 : IDispatch;
p1 : Boolean): TWebServiceBindingType of object;

{_T1 = function (const p0 : TTypeKind): PTypeinfo of object;}

{_T2 = function (const p0 : PTypeinfo): Boolean of object;}

_T3 = procedure  of object;

{_T4 = procedure (const p0 : Pointer;
p1 : IWSDLDocument;
p2 : Array of WideString;
p3 : Array of WideString) of object;}

{_T5 = procedure (p0 : IXMLSchemaDef;
const p1 : PTypeinfo;
const p2 : PTypeinfo;
p3 : WideString) of object;}

_T6 = function : TWebServExp of object;

function __TSchemaType__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSchemaType__Wrapper.setTypeName(const val : WideString);
begin
TSchemaType(GetRecordPtr^).TypeName := val;
end;
function __TSchemaType__Wrapper.getTypeName : WideString;
begin
result := TSchemaType(GetRecordPtr^).TypeName;
end;
procedure __TSchemaType__Wrapper.setNameSpace(const val : WideString);
begin
TSchemaType(GetRecordPtr^).NameSpace := val;
end;
function __TSchemaType__Wrapper.getNameSpace : WideString;
begin
result := TSchemaType(GetRecordPtr^).NameSpace;
end;
procedure __TSchemaType__Wrapper.setNSPrefix(const val : WideString);
begin
TSchemaType(GetRecordPtr^).NSPrefix := val;
end;
function __TSchemaType__Wrapper.getNSPrefix : WideString;
begin
result := TSchemaType(GetRecordPtr^).NSPrefix;
end;
procedure __TSchemaType__Wrapper.setXSGenerated(const val : Boolean);
begin
TSchemaType(GetRecordPtr^).XSGenerated := val;
end;
function __TSchemaType__Wrapper.getXSGenerated : Boolean;
begin
result := TSchemaType(GetRecordPtr^).XSGenerated;
end;
function _TSchemaType_ : IDispatch;
begin
  result := __TSchemaType__Wrapper.Create;
end;
function __TIntfMethEntry__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIntfMethEntry__Wrapper.setName(const val : AnsiString);
begin
TIntfMethEntry(GetRecordPtr^).Name := val;
end;
function __TIntfMethEntry__Wrapper.getName : AnsiString;
begin
result := TIntfMethEntry(GetRecordPtr^).Name;
end;
procedure __TIntfMethEntry__Wrapper.setCC(const val : TCallConv);
begin
TIntfMethEntry(GetRecordPtr^).CC := val;
end;
function __TIntfMethEntry__Wrapper.getCC : TCallConv;
begin
result := TIntfMethEntry(GetRecordPtr^).CC;
end;
procedure __TIntfMethEntry__Wrapper.setPos(const val : Integer);
begin
TIntfMethEntry(GetRecordPtr^).Pos := val;
end;
function __TIntfMethEntry__Wrapper.getPos : Integer;
begin
result := TIntfMethEntry(GetRecordPtr^).Pos;
end;
procedure __TIntfMethEntry__Wrapper.setParamCount(const val : Integer);
begin
TIntfMethEntry(GetRecordPtr^).ParamCount := val;
end;
function __TIntfMethEntry__Wrapper.getParamCount : Integer;
begin
result := TIntfMethEntry(GetRecordPtr^).ParamCount;
end;
procedure __TIntfMethEntry__Wrapper.setHasRTTI(const val : Boolean);
begin
TIntfMethEntry(GetRecordPtr^).HasRTTI := val;
end;
function __TIntfMethEntry__Wrapper.getHasRTTI : Boolean;
begin
result := TIntfMethEntry(GetRecordPtr^).HasRTTI;
end;
function ____GetBindingType__Wrapper(const p0 : IDispatch;
p1 : Boolean): TWebServiceBindingType;
var
__p0 : ^TIntfMethEntry;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := GetBindingType(__p0^,p1);
end;


type __TIntfMethEntry__Wrapper__ = class(__TIntfMethEntry__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIntfMethEntry__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIntfMethEntryToVariant(var R : TIntfMethEntry) : OleVariant;
var
__rw : __TIntfMethEntry__Wrapper__;
begin
__rw := __TIntfMethEntry__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIntfMethEntry(const V : OleVariant) : TIntfMethEntry;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIntfMethEntry((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSchemaType__Wrapper__ = class(__TSchemaType__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSchemaType__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSchemaTypeToVariant(var R : TSchemaType) : OleVariant;
var
__rw : __TSchemaType__Wrapper__;
begin
__rw := __TSchemaType__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSchemaType(const V : OleVariant) : TSchemaType;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSchemaType((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTWebServExp__ImportNames(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWebServExp(Instance).ImportNames[OleVariant(Params^[0])];
end;

procedure __DC__SetTWebServExp__ImportNames(Instance : TObject; Params : PVariantArgList);
begin
TWebServExp(Instance).ImportNames[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTWebServExp__ImportLocations(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWebServExp(Instance).ImportLocations[OleVariant(Params^[0])];
end;

procedure __DC__SetTWebServExp__ImportLocations(Instance : TObject; Params : PVariantArgList);
begin
TWebServExp(Instance).ImportLocations[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTWebServExp__TargetNameSpace(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWebServExp(Instance).TargetNameSpace;
end;

procedure __DC__SetTWebServExp__TargetNameSpace(Instance : TObject; Params : PVariantArgList);
begin
TWebServExp(Instance).TargetNameSpace:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterIndexedProperty(TWebServExp,'ImportNames',1,False,__DC__GetTWebServExp__ImportNames,__DC__SetTWebServExp__ImportNames);
RegisterIndexedProperty(TWebServExp,'ImportLocations',1,False,__DC__GetTWebServExp__ImportLocations,__DC__SetTWebServExp__ImportLocations);
RegisterProperty(TWebServExp,'TargetNameSpace',__DC__GetTWebServExp__TargetNameSpace,__DC__SetTWebServExp__TargetNameSpace);
end;

const __ConstNames0 : array[0..8] of string = (
'argIn'
,'argOut'
,'argInOut'
,'argReturn'
,'mtInput'
,'mtOutput'
,'mtHeaderInput'
,'mtHeaderOutput'
,'mtFault'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,argIn));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,argOut));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,argInOut));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,argReturn));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,mtInput));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,mtOutput));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,mtHeaderInput));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,mtHeaderOutput));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,mtFault));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..0] of TClass = (
TWebServExp
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..1] of string = (
'TSchemaType'
,'GetBindingType'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TSchemaType_)));
RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T0),[
TypeInfo(IDispatch),
TypeInfo(Boolean),TypeInfo(TWebServiceBindingType)],Addr(____GetBindingType__Wrapper),cRegister);

RegisterProc(TWebServExp,'Create',mtConstructor,TypeInfo(_T3),NoParams,Addr(TWebServExp.Create),cRegister);

RegRegisterMethod(TWebServExp,'GetWebServExp',TypeInfo(_T6),[TypeInfo(TWebServExp)],Addr(TWebServExp.GetWebServExp));

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'GetAliasBaseTypeInfo',mtProc,TypeInfo(_T1),[
TypeInfo(TTypeKind),TypeInfoPointer],Addr(GetAliasBaseTypeInfo),cRegister)}

{RegisterProc(nil,'IsBaseClassTypeInfo',mtProc,TypeInfo(_T2),[
TypeInfoPointer,TypeInfo(Boolean)],Addr(IsBaseClassTypeInfo),cRegister)}

{RegRegisterMethod(TWebServExp,'GetWSDLForInterface',TypeInfo(_T4),[
TypeInfoPointer,
TypeInfo(IWSDLDocument),
ArrayInfo(TypeInfo(WideString)),
ArrayInfo(TypeInfo(WideString))],Addr(TWebServExp.GetWSDLForInterface))}

{RegRegisterMethod(TWebServExp,'GenerateXMLSchema',TypeInfo(_T5),[
TypeInfo(IXMLSchemaDef),
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(WideString)],Addr(TWebServExp.GenerateXMLSchema))}

{RegisterEvent(TypeInfo(TAfterPublishingWSDLEvent),[
TypeInfo(IWSDLDocument)]);}

{RegisterEvent(TypeInfo(TBeforePublishingTypesEvent),[
TypeInfo(IWebServExp)]);}

{RegisterEvent(TypeInfo(TPublishingTypeEvent),[
TypeInfo(IWebServExp),
TypeInfo(IXMLSchemaDef),
TypeInfoPointer,
TypeInfo(WideString)]);}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
