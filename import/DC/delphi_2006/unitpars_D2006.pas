{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit unitpars_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  consts,
  classes,
  dcsystem,
  typinfo,
  dcparser,
  sysutils,
  dcdreamlib,
  messages,
  dcconsts,
  dcapi,
  unitpars;
function ConvertTConstInfoToVariant(var R : TConstInfo) : OleVariant;
function ConvertVariantToTConstInfo(const V : OleVariant) : TConstInfo;
function ConvertTMethodInfoToVariant(var R : TMethodInfo) : OleVariant;
function ConvertVariantToTMethodInfo(const V : OleVariant) : TMethodInfo;
function ConvertTParamInfoToVariant(var R : TParamInfo) : OleVariant;
function ConvertVariantToTParamInfo(const V : OleVariant) : TParamInfo;
function ConvertTPropertyInfoToVariant(var R : TPropertyInfo) : OleVariant;
function ConvertVariantToTPropertyInfo(const V : OleVariant) : TPropertyInfo;
function ConvertTTypeDeclInfoToVariant(var R : TTypeDeclInfo) : OleVariant;
function ConvertVariantToTTypeDeclInfo(const V : OleVariant) : TTypeDeclInfo;
function ConvertTVarInfoToVariant(var R : TVarInfo) : OleVariant;
function ConvertVariantToTVarInfo(const V : OleVariant) : TVarInfo;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TConstInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TConstInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setMInfo(const val : TModuleInfo);
function getMInfo : TModuleInfo;
property MInfo : TModuleInfo read getMInfo write setMInfo;
procedure setConstName(const val : GlobalString);
function getConstName : GlobalString;
property ConstName : GlobalString read getConstName write setConstName;
procedure setConstType(const val : GlobalString);
function getConstType : GlobalString;
property ConstType : GlobalString read getConstType write setConstType;
procedure setIsSet(const val : Boolean);
function getIsSet : Boolean;
property IsSet : Boolean read getIsSet write setIsSet;
end;
type __TMethodInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TMethodInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setMName(const val : GlobalString);
function getMName : GlobalString;
property MName : GlobalString read getMName write setMName;
procedure setRetType(const val : GlobalString);
function getRetType : GlobalString;
property RetType : GlobalString read getRetType write setRetType;
procedure setParamIndex(const val : Integer);
function getParamIndex : Integer;
property ParamIndex : Integer read getParamIndex write setParamIndex;
procedure setParamCount(const val : Word);
function getParamCount : Word;
property ParamCount : Word read getParamCount write setParamCount;
procedure setDefaultParam(const val : Word);
function getDefaultParam : Word;
property DefaultParam : Word read getDefaultParam write setDefaultParam;
procedure setMethodType(const val : TMethodType);
function getMethodType : TMethodType;
property MethodType : TMethodType read getMethodType write setMethodType;
procedure setOfObject(const val : Boolean);
function getOfObject : Boolean;
property OfObject : Boolean read getOfObject write setOfObject;
procedure setIsFunction(const val : Boolean);
function getIsFunction : Boolean;
property IsFunction : Boolean read getIsFunction write setIsFunction;
procedure setScope(const val : TScope);
function getScope : TScope;
property Scope : TScope read getScope write setScope;
procedure setCallType(const val : TCallType);
function getCallType : TCallType;
property CallType : TCallType read getCallType write setCallType;
procedure setVMTOffset(const val : Integer);
function getVMTOffset : Integer;
property VMTOffset : Integer read getVMTOffset write setVMTOffset;
end;
type __TParamInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TParamInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setParamName(const val : GlobalString);
function getParamName : GlobalString;
property ParamName : GlobalString read getParamName write setParamName;
procedure setParamType(const val : GlobalString);
function getParamType : GlobalString;
property ParamType : GlobalString read getParamType write setParamType;
end;
type __TPropertyInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TPropertyInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setPropName(const val : GlobalString);
function getPropName : GlobalString;
property PropName : GlobalString read getPropName write setPropName;
procedure setVarType(const val : GlobalString);
function getVarType : GlobalString;
property VarType : GlobalString read getVarType write setVarType;
procedure setPStored(const val : GlobalString);
function getPStored : GlobalString;
property PStored : GlobalString read getPStored write setPStored;
procedure setParamIndex(const val : Integer);
function getParamIndex : Integer;
property ParamIndex : Integer read getParamIndex write setParamIndex;
procedure setParamCount(const val : Word);
function getParamCount : Word;
property ParamCount : Word read getParamCount write setParamCount;
procedure setScope(const val : TScope);
function getScope : TScope;
property Scope : TScope read getScope write setScope;
end;
type __TTypeDeclInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TTypeDeclInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setMInfo(const val : TModuleInfo);
function getMInfo : TModuleInfo;
property MInfo : TModuleInfo read getMInfo write setMInfo;
procedure setBaseName(const val : GlobalString);
function getBaseName : GlobalString;
property BaseName : GlobalString read getBaseName write setBaseName;
procedure setTypeName(const val : GlobalString);
function getTypeName : GlobalString;
property TypeName : GlobalString read getTypeName write setTypeName;
procedure setMethodIndex(const val : Integer);
function getMethodIndex : Integer;
property MethodIndex : Integer read getMethodIndex write setMethodIndex;
procedure setPropIndex(const val : Integer);
function getPropIndex : Integer;
property PropIndex : Integer read getPropIndex write setPropIndex;
procedure setProcInfo(const val : Integer);
function getProcInfo : Integer;
property ProcInfo : Integer read getProcInfo write setProcInfo;
procedure setVarIndex(const val : Integer);
function getVarIndex : Integer;
property VarIndex : Integer read getVarIndex write setVarIndex;
procedure setConstIndex(const val : Integer);
function getConstIndex : Integer;
property ConstIndex : Integer read getConstIndex write setConstIndex;
procedure setMethodCount(const val : Word);
function getMethodCount : Word;
property MethodCount : Word read getMethodCount write setMethodCount;
procedure setPropCount(const val : Word);
function getPropCount : Word;
property PropCount : Word read getPropCount write setPropCount;
procedure setVarCount(const val : Word);
function getVarCount : Word;
property VarCount : Word read getVarCount write setVarCount;
procedure setConstCount(const val : Word);
function getConstCount : Word;
property ConstCount : Word read getConstCount write setConstCount;
procedure setTypeKind(const val : TTypeDeclKind);
function getTypeKind : TTypeDeclKind;
property TypeKind : TTypeDeclKind read getTypeKind write setTypeKind;
procedure setBaseType(const val : TBaseType);
function getBaseType : TBaseType;
property BaseType : TBaseType read getBaseType write setBaseType;
procedure setReference(const val : TTypeReference);
function getReference : TTypeReference;
property Reference : TTypeReference read getReference write setReference;
procedure setBaseTypeDecl(const val : Integer);
function getBaseTypeDecl : Integer;
property BaseTypeDecl : Integer read getBaseTypeDecl write setBaseTypeDecl;
procedure setVMCount(const val : Word);
function getVMCount : Word;
property VMCount : Word read getVMCount write setVMCount;
procedure setVMStart(const val : Integer);
function getVMStart : Integer;
property VMStart : Integer read getVMStart write setVMStart;
procedure setDynaCount(const val : Word);
function getDynaCount : Word;
property DynaCount : Word read getDynaCount write setDynaCount;
procedure setDynaStart(const val : Word);
function getDynaStart : Word;
property DynaStart : Word read getDynaStart write setDynaStart;
procedure setVMCalculated(const val : Boolean);
function getVMCalculated : Boolean;
property VMCalculated : Boolean read getVMCalculated write setVMCalculated;
end;
type __TVarInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TVarInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setVarName(const val : GlobalString);
function getVarName : GlobalString;
property VarName : GlobalString read getVarName write setVarName;
procedure setVarType(const val : GlobalString);
function getVarType : GlobalString;
property VarType : GlobalString read getVarType write setVarType;
procedure setScope(const val : TScope);
function getScope : TScope;
property Scope : TScope read getScope write setScope;
procedure setIsThread(const val : Boolean);
function getIsThread : Boolean;
property IsThread : Boolean read getIsThread write setIsThread;
end;
type
{_T0 = function (const p0 : String;
const p1 : String;
const p2 : String;
const p3 : String;
const p4 : String;
const p5 : String;
p6 : TUnitParserClass;
p7 : Boolean;
p8 : TDCMsgHandler): TUnitParser of object;}

{_T1 = function (const p0 : String;
const p1 : String;
const p2 : String;
const p3 : String;
const p4 : String;
const p5 : String;
p6 : TUnitParserClass;
p7 : Boolean;
p8 : Boolean;
p9 : TDCMsgHandler): TUnitParser of object;}

{_T2 = procedure (const p0 : String;
const p1 : String;
const p2 : String;
const p3 : String;
const p4 : String;
p5 : TStrings;
p6 : Boolean;
p7 : Boolean;
p8 : TDCMsgHandler;
p9 : Boolean) of object;}

{_T3 = procedure (p0 : TStrings;
p1 : TStrings;
const p2 : String;
const p3 : String;
const p4 : String;
const p5 : String;
p6 : Boolean;
p7 : Boolean;
p8 : TDCMsgHandler;
p9 : Boolean;
p10 : TStrings) of object;}

{_T4 = procedure (const p0 : String;
p1 : TDelphiVer;
p2 : Boolean;
p3 : Boolean;
p4 : TDCMsgHandler) of object;}

_T5 = procedure (const p0 : String) of object;

{_T6 = procedure (const p0 : String;
p1 : Boolean;
p2 : Boolean;
p3 : TDCMsgHandler) of object;}

_T7 = procedure  of object;

_T8 = function (p0 : TBaseType): String of object;

_T9 = procedure (p0 : TStrings;
p1 : TDelphiVer) of object;

_T10 = function (const p0 : String;
p1 : TDelphiVer): Boolean of object;

_T11 = function (p0 : TUnitParser;
const p1 : String): Boolean of object;

_T12 = function (const p0 : String): Boolean of object;

_T13 = _T10;

_T14 = function (const p0 : String;
const p1 : String): Boolean of object;

{_T15 = procedure (p0 : TList;
p1 : TDCCheckParserProc;
p2 : Pointer) of object;}

_T16 = function (p0 : GlobalString): String of object;

_T17 = function (const p0 : String): GlobalString of object;

_T18 = _T7;

{_T19 = function (const p0 : String): PTypeDeclInfo of object;}

{_T20 = function (const p0 : String): PTypeDeclInfo of object;}

{_T21 = function (const p0 : String): PConstInfo of object;}

_T22 = function (const p0 : String;
const p1 : String): TModuleInfo of object;

_T23 = procedure (p0 : TStream) of object;

_T24 = _T23;

_T25 = function (const p0 : String): Integer of object;

_T26 = _T7;

_T27 = _T23;

_T28 = _T23;

_T29 = _T7;

_T30 = _T7;

_T31 = _T7;

_T32 = procedure (const p0 : String;
const p1 : String;
const p2 : String;
const p3 : String;
const p4 : String) of object;

_T33 = function (p0 : TStream): Boolean of object;

_T34 = _T23;

function __TConstInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TConstInfo__Wrapper.setMInfo(const val : TModuleInfo);
begin
TConstInfo(GetRecordPtr^).MInfo := val;
end;
function __TConstInfo__Wrapper.getMInfo : TModuleInfo;
begin
result := TConstInfo(GetRecordPtr^).MInfo;
end;
procedure __TConstInfo__Wrapper.setConstName(const val : GlobalString);
begin
TConstInfo(GetRecordPtr^).ConstName := val;
end;
function __TConstInfo__Wrapper.getConstName : GlobalString;
begin
result := TConstInfo(GetRecordPtr^).ConstName;
end;
procedure __TConstInfo__Wrapper.setConstType(const val : GlobalString);
begin
TConstInfo(GetRecordPtr^).ConstType := val;
end;
function __TConstInfo__Wrapper.getConstType : GlobalString;
begin
result := TConstInfo(GetRecordPtr^).ConstType;
end;
procedure __TConstInfo__Wrapper.setIsSet(const val : Boolean);
begin
TConstInfo(GetRecordPtr^).IsSet := val;
end;
function __TConstInfo__Wrapper.getIsSet : Boolean;
begin
result := TConstInfo(GetRecordPtr^).IsSet;
end;
function __TMethodInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMethodInfo__Wrapper.setMName(const val : GlobalString);
begin
TMethodInfo(GetRecordPtr^).MName := val;
end;
function __TMethodInfo__Wrapper.getMName : GlobalString;
begin
result := TMethodInfo(GetRecordPtr^).MName;
end;
procedure __TMethodInfo__Wrapper.setRetType(const val : GlobalString);
begin
TMethodInfo(GetRecordPtr^).RetType := val;
end;
function __TMethodInfo__Wrapper.getRetType : GlobalString;
begin
result := TMethodInfo(GetRecordPtr^).RetType;
end;
procedure __TMethodInfo__Wrapper.setParamIndex(const val : Integer);
begin
TMethodInfo(GetRecordPtr^).ParamIndex := val;
end;
function __TMethodInfo__Wrapper.getParamIndex : Integer;
begin
result := TMethodInfo(GetRecordPtr^).ParamIndex;
end;
procedure __TMethodInfo__Wrapper.setParamCount(const val : Word);
begin
TMethodInfo(GetRecordPtr^).ParamCount := val;
end;
function __TMethodInfo__Wrapper.getParamCount : Word;
begin
result := TMethodInfo(GetRecordPtr^).ParamCount;
end;
procedure __TMethodInfo__Wrapper.setDefaultParam(const val : Word);
begin
TMethodInfo(GetRecordPtr^).DefaultParam := val;
end;
function __TMethodInfo__Wrapper.getDefaultParam : Word;
begin
result := TMethodInfo(GetRecordPtr^).DefaultParam;
end;
procedure __TMethodInfo__Wrapper.setMethodType(const val : TMethodType);
begin
TMethodInfo(GetRecordPtr^).MethodType := val;
end;
function __TMethodInfo__Wrapper.getMethodType : TMethodType;
begin
result := TMethodInfo(GetRecordPtr^).MethodType;
end;
procedure __TMethodInfo__Wrapper.setOfObject(const val : Boolean);
begin
TMethodInfo(GetRecordPtr^).OfObject := val;
end;
function __TMethodInfo__Wrapper.getOfObject : Boolean;
begin
result := TMethodInfo(GetRecordPtr^).OfObject;
end;
procedure __TMethodInfo__Wrapper.setIsFunction(const val : Boolean);
begin
TMethodInfo(GetRecordPtr^).IsFunction := val;
end;
function __TMethodInfo__Wrapper.getIsFunction : Boolean;
begin
result := TMethodInfo(GetRecordPtr^).IsFunction;
end;
procedure __TMethodInfo__Wrapper.setScope(const val : TScope);
begin
TMethodInfo(GetRecordPtr^).Scope := val;
end;
function __TMethodInfo__Wrapper.getScope : TScope;
begin
result := TMethodInfo(GetRecordPtr^).Scope;
end;
procedure __TMethodInfo__Wrapper.setCallType(const val : TCallType);
begin
TMethodInfo(GetRecordPtr^).CallType := val;
end;
function __TMethodInfo__Wrapper.getCallType : TCallType;
begin
result := TMethodInfo(GetRecordPtr^).CallType;
end;
procedure __TMethodInfo__Wrapper.setVMTOffset(const val : Integer);
begin
TMethodInfo(GetRecordPtr^).VMTOffset := val;
end;
function __TMethodInfo__Wrapper.getVMTOffset : Integer;
begin
result := TMethodInfo(GetRecordPtr^).VMTOffset;
end;
function __TParamInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TParamInfo__Wrapper.setParamName(const val : GlobalString);
begin
TParamInfo(GetRecordPtr^).ParamName := val;
end;
function __TParamInfo__Wrapper.getParamName : GlobalString;
begin
result := TParamInfo(GetRecordPtr^).ParamName;
end;
procedure __TParamInfo__Wrapper.setParamType(const val : GlobalString);
begin
TParamInfo(GetRecordPtr^).ParamType := val;
end;
function __TParamInfo__Wrapper.getParamType : GlobalString;
begin
result := TParamInfo(GetRecordPtr^).ParamType;
end;
function __TPropertyInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPropertyInfo__Wrapper.setPropName(const val : GlobalString);
begin
TPropertyInfo(GetRecordPtr^).PropName := val;
end;
function __TPropertyInfo__Wrapper.getPropName : GlobalString;
begin
result := TPropertyInfo(GetRecordPtr^).PropName;
end;
procedure __TPropertyInfo__Wrapper.setVarType(const val : GlobalString);
begin
TPropertyInfo(GetRecordPtr^).VarType := val;
end;
function __TPropertyInfo__Wrapper.getVarType : GlobalString;
begin
result := TPropertyInfo(GetRecordPtr^).VarType;
end;
procedure __TPropertyInfo__Wrapper.setPStored(const val : GlobalString);
begin
TPropertyInfo(GetRecordPtr^).PStored := val;
end;
function __TPropertyInfo__Wrapper.getPStored : GlobalString;
begin
result := TPropertyInfo(GetRecordPtr^).PStored;
end;
procedure __TPropertyInfo__Wrapper.setParamIndex(const val : Integer);
begin
TPropertyInfo(GetRecordPtr^).ParamIndex := val;
end;
function __TPropertyInfo__Wrapper.getParamIndex : Integer;
begin
result := TPropertyInfo(GetRecordPtr^).ParamIndex;
end;
procedure __TPropertyInfo__Wrapper.setParamCount(const val : Word);
begin
TPropertyInfo(GetRecordPtr^).ParamCount := val;
end;
function __TPropertyInfo__Wrapper.getParamCount : Word;
begin
result := TPropertyInfo(GetRecordPtr^).ParamCount;
end;
procedure __TPropertyInfo__Wrapper.setScope(const val : TScope);
begin
TPropertyInfo(GetRecordPtr^).Scope := val;
end;
function __TPropertyInfo__Wrapper.getScope : TScope;
begin
result := TPropertyInfo(GetRecordPtr^).Scope;
end;
function __TTypeDeclInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTypeDeclInfo__Wrapper.setMInfo(const val : TModuleInfo);
begin
TTypeDeclInfo(GetRecordPtr^).MInfo := val;
end;
function __TTypeDeclInfo__Wrapper.getMInfo : TModuleInfo;
begin
result := TTypeDeclInfo(GetRecordPtr^).MInfo;
end;
procedure __TTypeDeclInfo__Wrapper.setBaseName(const val : GlobalString);
begin
TTypeDeclInfo(GetRecordPtr^).BaseName := val;
end;
function __TTypeDeclInfo__Wrapper.getBaseName : GlobalString;
begin
result := TTypeDeclInfo(GetRecordPtr^).BaseName;
end;
procedure __TTypeDeclInfo__Wrapper.setTypeName(const val : GlobalString);
begin
TTypeDeclInfo(GetRecordPtr^).TypeName := val;
end;
function __TTypeDeclInfo__Wrapper.getTypeName : GlobalString;
begin
result := TTypeDeclInfo(GetRecordPtr^).TypeName;
end;
procedure __TTypeDeclInfo__Wrapper.setMethodIndex(const val : Integer);
begin
TTypeDeclInfo(GetRecordPtr^).MethodIndex := val;
end;
function __TTypeDeclInfo__Wrapper.getMethodIndex : Integer;
begin
result := TTypeDeclInfo(GetRecordPtr^).MethodIndex;
end;
procedure __TTypeDeclInfo__Wrapper.setPropIndex(const val : Integer);
begin
TTypeDeclInfo(GetRecordPtr^).PropIndex := val;
end;
function __TTypeDeclInfo__Wrapper.getPropIndex : Integer;
begin
result := TTypeDeclInfo(GetRecordPtr^).PropIndex;
end;
procedure __TTypeDeclInfo__Wrapper.setProcInfo(const val : Integer);
begin
TTypeDeclInfo(GetRecordPtr^).ProcInfo := val;
end;
function __TTypeDeclInfo__Wrapper.getProcInfo : Integer;
begin
result := TTypeDeclInfo(GetRecordPtr^).ProcInfo;
end;
procedure __TTypeDeclInfo__Wrapper.setVarIndex(const val : Integer);
begin
TTypeDeclInfo(GetRecordPtr^).VarIndex := val;
end;
function __TTypeDeclInfo__Wrapper.getVarIndex : Integer;
begin
result := TTypeDeclInfo(GetRecordPtr^).VarIndex;
end;
procedure __TTypeDeclInfo__Wrapper.setConstIndex(const val : Integer);
begin
TTypeDeclInfo(GetRecordPtr^).ConstIndex := val;
end;
function __TTypeDeclInfo__Wrapper.getConstIndex : Integer;
begin
result := TTypeDeclInfo(GetRecordPtr^).ConstIndex;
end;
procedure __TTypeDeclInfo__Wrapper.setMethodCount(const val : Word);
begin
TTypeDeclInfo(GetRecordPtr^).MethodCount := val;
end;
function __TTypeDeclInfo__Wrapper.getMethodCount : Word;
begin
result := TTypeDeclInfo(GetRecordPtr^).MethodCount;
end;
procedure __TTypeDeclInfo__Wrapper.setPropCount(const val : Word);
begin
TTypeDeclInfo(GetRecordPtr^).PropCount := val;
end;
function __TTypeDeclInfo__Wrapper.getPropCount : Word;
begin
result := TTypeDeclInfo(GetRecordPtr^).PropCount;
end;
procedure __TTypeDeclInfo__Wrapper.setVarCount(const val : Word);
begin
TTypeDeclInfo(GetRecordPtr^).VarCount := val;
end;
function __TTypeDeclInfo__Wrapper.getVarCount : Word;
begin
result := TTypeDeclInfo(GetRecordPtr^).VarCount;
end;
procedure __TTypeDeclInfo__Wrapper.setConstCount(const val : Word);
begin
TTypeDeclInfo(GetRecordPtr^).ConstCount := val;
end;
function __TTypeDeclInfo__Wrapper.getConstCount : Word;
begin
result := TTypeDeclInfo(GetRecordPtr^).ConstCount;
end;
procedure __TTypeDeclInfo__Wrapper.setTypeKind(const val : TTypeDeclKind);
begin
TTypeDeclInfo(GetRecordPtr^).TypeKind := val;
end;
function __TTypeDeclInfo__Wrapper.getTypeKind : TTypeDeclKind;
begin
result := TTypeDeclInfo(GetRecordPtr^).TypeKind;
end;
procedure __TTypeDeclInfo__Wrapper.setBaseType(const val : TBaseType);
begin
TTypeDeclInfo(GetRecordPtr^).BaseType := val;
end;
function __TTypeDeclInfo__Wrapper.getBaseType : TBaseType;
begin
result := TTypeDeclInfo(GetRecordPtr^).BaseType;
end;
procedure __TTypeDeclInfo__Wrapper.setReference(const val : TTypeReference);
begin
TTypeDeclInfo(GetRecordPtr^).Reference := val;
end;
function __TTypeDeclInfo__Wrapper.getReference : TTypeReference;
begin
result := TTypeDeclInfo(GetRecordPtr^).Reference;
end;
procedure __TTypeDeclInfo__Wrapper.setBaseTypeDecl(const val : Integer);
begin
TTypeDeclInfo(GetRecordPtr^).BaseTypeDecl := val;
end;
function __TTypeDeclInfo__Wrapper.getBaseTypeDecl : Integer;
begin
result := TTypeDeclInfo(GetRecordPtr^).BaseTypeDecl;
end;
procedure __TTypeDeclInfo__Wrapper.setVMCount(const val : Word);
begin
TTypeDeclInfo(GetRecordPtr^).VMCount := val;
end;
function __TTypeDeclInfo__Wrapper.getVMCount : Word;
begin
result := TTypeDeclInfo(GetRecordPtr^).VMCount;
end;
procedure __TTypeDeclInfo__Wrapper.setVMStart(const val : Integer);
begin
TTypeDeclInfo(GetRecordPtr^).VMStart := val;
end;
function __TTypeDeclInfo__Wrapper.getVMStart : Integer;
begin
result := TTypeDeclInfo(GetRecordPtr^).VMStart;
end;
procedure __TTypeDeclInfo__Wrapper.setDynaCount(const val : Word);
begin
TTypeDeclInfo(GetRecordPtr^).DynaCount := val;
end;
function __TTypeDeclInfo__Wrapper.getDynaCount : Word;
begin
result := TTypeDeclInfo(GetRecordPtr^).DynaCount;
end;
procedure __TTypeDeclInfo__Wrapper.setDynaStart(const val : Word);
begin
TTypeDeclInfo(GetRecordPtr^).DynaStart := val;
end;
function __TTypeDeclInfo__Wrapper.getDynaStart : Word;
begin
result := TTypeDeclInfo(GetRecordPtr^).DynaStart;
end;
procedure __TTypeDeclInfo__Wrapper.setVMCalculated(const val : Boolean);
begin
TTypeDeclInfo(GetRecordPtr^).VMCalculated := val;
end;
function __TTypeDeclInfo__Wrapper.getVMCalculated : Boolean;
begin
result := TTypeDeclInfo(GetRecordPtr^).VMCalculated;
end;
function __TVarInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TVarInfo__Wrapper.setVarName(const val : GlobalString);
begin
TVarInfo(GetRecordPtr^).VarName := val;
end;
function __TVarInfo__Wrapper.getVarName : GlobalString;
begin
result := TVarInfo(GetRecordPtr^).VarName;
end;
procedure __TVarInfo__Wrapper.setVarType(const val : GlobalString);
begin
TVarInfo(GetRecordPtr^).VarType := val;
end;
function __TVarInfo__Wrapper.getVarType : GlobalString;
begin
result := TVarInfo(GetRecordPtr^).VarType;
end;
procedure __TVarInfo__Wrapper.setScope(const val : TScope);
begin
TVarInfo(GetRecordPtr^).Scope := val;
end;
function __TVarInfo__Wrapper.getScope : TScope;
begin
result := TVarInfo(GetRecordPtr^).Scope;
end;
procedure __TVarInfo__Wrapper.setIsThread(const val : Boolean);
begin
TVarInfo(GetRecordPtr^).IsThread := val;
end;
function __TVarInfo__Wrapper.getIsThread : Boolean;
begin
result := TVarInfo(GetRecordPtr^).IsThread;
end;
function _TConstInfo_ : IDispatch;
begin
  result := __TConstInfo__Wrapper.Create;
end;
function _TMethodInfo_ : IDispatch;
begin
  result := __TMethodInfo__Wrapper.Create;
end;
function _TParamInfo_ : IDispatch;
begin
  result := __TParamInfo__Wrapper.Create;
end;
function _TPropertyInfo_ : IDispatch;
begin
  result := __TPropertyInfo__Wrapper.Create;
end;
function _TTypeDeclInfo_ : IDispatch;
begin
  result := __TTypeDeclInfo__Wrapper.Create;
end;
function _TVarInfo_ : IDispatch;
begin
  result := __TVarInfo__Wrapper.Create;
end;

type __TConstInfo__Wrapper__ = class(__TConstInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TConstInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTConstInfoToVariant(var R : TConstInfo) : OleVariant;
var
__rw : __TConstInfo__Wrapper__;
begin
__rw := __TConstInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTConstInfo(const V : OleVariant) : TConstInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TConstInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMethodInfo__Wrapper__ = class(__TMethodInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMethodInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMethodInfoToVariant(var R : TMethodInfo) : OleVariant;
var
__rw : __TMethodInfo__Wrapper__;
begin
__rw := __TMethodInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMethodInfo(const V : OleVariant) : TMethodInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMethodInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TParamInfo__Wrapper__ = class(__TParamInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TParamInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTParamInfoToVariant(var R : TParamInfo) : OleVariant;
var
__rw : __TParamInfo__Wrapper__;
begin
__rw := __TParamInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTParamInfo(const V : OleVariant) : TParamInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TParamInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPropertyInfo__Wrapper__ = class(__TPropertyInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPropertyInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPropertyInfoToVariant(var R : TPropertyInfo) : OleVariant;
var
__rw : __TPropertyInfo__Wrapper__;
begin
__rw := __TPropertyInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPropertyInfo(const V : OleVariant) : TPropertyInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPropertyInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTypeDeclInfo__Wrapper__ = class(__TTypeDeclInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTypeDeclInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTypeDeclInfoToVariant(var R : TTypeDeclInfo) : OleVariant;
var
__rw : __TTypeDeclInfo__Wrapper__;
begin
__rw := __TTypeDeclInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTypeDeclInfo(const V : OleVariant) : TTypeDeclInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTypeDeclInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TVarInfo__Wrapper__ = class(__TVarInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TVarInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTVarInfoToVariant(var R : TVarInfo) : OleVariant;
var
__rw : __TVarInfo__Wrapper__;
begin
__rw := __TVarInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTVarInfo(const V : OleVariant) : TVarInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TVarInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTStringHolder__BaseAddr(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := String(TStringHolder(Instance).BaseAddr);
end;

function __DC__GetTUnitParser__CompiledPath(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TUnitParser(Instance).CompiledPath;
end;

procedure __DC__SetTUnitParser__CompiledPath(Instance : TObject; Params : PVariantArgList);
begin
TUnitParser(Instance).CompiledPath:=OleVariant(Params^[0]);
end;

function __DC__GetTUnitParser__ModuleInfo(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TUnitParser(Instance).ModuleInfo);
end;

function __DC__GetTUnitParser__DefaultCallType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TUnitParser(Instance).DefaultCallType;
end;

procedure __DC__SetTUnitParser__DefaultCallType(Instance : TObject; Params : PVariantArgList);
begin
TUnitParser(Instance).DefaultCallType:=OleVariant(Params^[0]);
end;

function __DC__GetTUnitParser__DefaultStringType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TUnitParser(Instance).DefaultStringType;
end;

procedure __DC__SetTUnitParser__DefaultStringType(Instance : TObject; Params : PVariantArgList);
begin
TUnitParser(Instance).DefaultStringType:=OleVariant(Params^[0]);
end;

function __DC__GetTUnitParser__IgnoreExistDPU(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TUnitParser(Instance).IgnoreExistDPU;
end;

procedure __DC__SetTUnitParser__IgnoreExistDPU(Instance : TObject; Params : PVariantArgList);
begin
TUnitParser(Instance).IgnoreExistDPU:=OleVariant(Params^[0]);
end;

function __DC__GetTUnitParser__NoDefaultDefines(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TUnitParser(Instance).NoDefaultDefines;
end;

procedure __DC__SetTUnitParser__NoDefaultDefines(Instance : TObject; Params : PVariantArgList);
begin
TUnitParser(Instance).NoDefaultDefines:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TStringHolder,'BaseAddr',__DC__GetTStringHolder__BaseAddr,nil);
RegisterProperty(TUnitParser,'CompiledPath',__DC__GetTUnitParser__CompiledPath,__DC__SetTUnitParser__CompiledPath);
RegisterProperty(TUnitParser,'ModuleInfo',__DC__GetTUnitParser__ModuleInfo,nil);
RegisterProperty(TUnitParser,'DefaultCallType',__DC__GetTUnitParser__DefaultCallType,__DC__SetTUnitParser__DefaultCallType);
RegisterProperty(TUnitParser,'DefaultStringType',__DC__GetTUnitParser__DefaultStringType,__DC__SetTUnitParser__DefaultStringType);
RegisterProperty(TUnitParser,'IgnoreExistDPU',__DC__GetTUnitParser__IgnoreExistDPU,__DC__SetTUnitParser__IgnoreExistDPU);
RegisterProperty(TUnitParser,'NoDefaultDefines',__DC__GetTUnitParser__NoDefaultDefines,__DC__SetTUnitParser__NoDefaultDefines);
end;

function __DC__Getunitpars__Parsers(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(unitpars.Parsers);
end;

procedure __DC__Setunitpars__Parsers(Instance : TObject; Params : PVariantArgList);
begin
TObject(unitpars.Parsers):=(VarToObject(OleVariant(Params^[0])));
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('Parsers',__DC__Getunitpars__Parsers,__DC__Setunitpars__Parsers));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..94] of string = (
'CompiledExt'
,'ikParserDestroyed'
,'ikLoadedUnit'
,'ikConsideredEmpty'
,'ikCompiledUnit'
,'ikSavedTo'
,'ikNotSavedTo'
,'ikError'
,'ikCompilingUnit'
,'ikImplementIgnored'
,'ParserInfoKinds'
,'SDCParserDestroyed'
,'SDCLoadedUnit'
,'SDCConsideredEmpty'
,'SDCCompiledUnit'
,'SDCCompilingUnit'
,'SDCSavedTo'
,'SDCNotSavedTo'
,'SDCError'
,'sPrivate'
,'sProtected'
,'sPublic'
,'sPublished'
,'sAutomated'
,'moUnit'
,'moProgram'
,'moLibrary'
,'btInteger'
,'btShortint'
,'btSmallInt'
,'btLongint'
,'btByte'
,'btWord'
,'btCardinal'
,'btChar'
,'btAnsiChar'
,'btBoolean'
,'btByteBool'
,'btWordBool'
,'btLongBool'
,'btValuedEnum'
,'btEnum'
,'btReal'
,'btSingle'
,'btDouble'
,'btExtended'
,'btComp'
,'btCurrency'
,'btShortString'
,'btAnsiString'
,'btWideString'
,'btPointer'
,'btProc'
,'btPChar'
,'btPWideChar'
,'btPAnsiChar'
,'btFile'
,'btText'
,'btInt64'
,'btRecord'
,'trEqual'
,'trSubrange'
,'trArray'
,'trFile'
,'trClassOf'
,'trSetOf'
,'trPointer'
,'trDynArray'
,'tdBase'
,'tdRef'
,'tdClass'
,'tdRecord'
,'tdUnknown'
,'tdInterface'
,'tdDispInterface'
,'tdObject'
,'pmRead'
,'pmWrite'
,'pmDefault'
,'pmDeclaredHere'
,'mfOverride'
,'mfVirtual'
,'mfDynamic'
,'mfAbstract'
,'mfMapped'
,'mfOverload'
,'mfReintroduce'
,'mfMessage'
,'mfDeprecated'
,'mfLibrary'
,'mfPlatform'
,'GSEMPTY'
,'cArrayOfConst'
,'CompiledHeader'
,'DCSkipAbsentVCLUnits'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,CompiledExt));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,ikParserDestroyed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,ikLoadedUnit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,ikConsideredEmpty));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,ikCompiledUnit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,ikSavedTo));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,ikNotSavedTo));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,ikError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,ikCompilingUnit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,ikImplementIgnored));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,VarFromSet(ParserInfoKinds, sizeof(ParserInfoKinds))));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,SDCParserDestroyed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,SDCLoadedUnit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,SDCConsideredEmpty));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,SDCCompiledUnit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,SDCCompilingUnit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,SDCSavedTo));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,SDCNotSavedTo));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,SDCError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,sPrivate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,sProtected));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,sPublic));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,sPublished));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,sAutomated));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,moUnit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,moProgram));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,moLibrary));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,btInteger));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,btShortint));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,btSmallInt));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,btLongint));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,btByte));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,btWord));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,btCardinal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,btChar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,btAnsiChar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,btBoolean));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,btByteBool));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,btWordBool));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,btLongBool));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,btValuedEnum));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,btEnum));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,btReal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,btSingle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,btDouble));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,btExtended));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,btComp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,btCurrency));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,btShortString));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,btAnsiString));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,btWideString));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,btPointer));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,btProc));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,btPChar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,btPWideChar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,btPAnsiChar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,btFile));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,btText));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,btInt64));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,btRecord));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,trEqual));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,trSubrange));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,trArray));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,trFile));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,trClassOf));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[65] ,trSetOf));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[66] ,trPointer));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[67] ,trDynArray));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[68] ,tdBase));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[69] ,tdRef));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[70] ,tdClass));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[71] ,tdRecord));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[72] ,tdUnknown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[73] ,tdInterface));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[74] ,tdDispInterface));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[75] ,tdObject));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[76] ,pmRead));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[77] ,pmWrite));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[78] ,pmDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[79] ,pmDeclaredHere));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[80] ,mfOverride));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[81] ,mfVirtual));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[82] ,mfDynamic));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[83] ,mfAbstract));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[84] ,mfMapped));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[85] ,mfOverload));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[86] ,mfReintroduce));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[87] ,mfMessage));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[88] ,mfDeprecated));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[89] ,mfLibrary));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[90] ,mfPlatform));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[91] ,GSEMPTY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[92] ,cArrayOfConst));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[93] ,CompiledHeader));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[94] ,DCSkipAbsentVCLUnits));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..3] of TClass = (
TDCImplParser,
TModuleInfo,
TStringHolder,
TUnitParser
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..14] of string = (
'TConstInfo'
,'TMethodInfo'
,'TParamInfo'
,'TPropertyInfo'
,'TTypeDeclInfo'
,'TVarInfo'
,'DCGenVCLDPUs'
,'DCRemoveCreatedParsers'
,'GetBaseTypeName'
,'DCRemoveBadVCLUnits'
,'DCUnitIsInBadUnits'
,'DCIgnoreDPUsButNotVCL'
,'DCPathIsInAnyDelphiDirs'
,'DCPathIsInDelphiDirs'
,'DCPathIsInPaths'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TConstInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_TMethodInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_TParamInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(_TPropertyInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(_TTypeDeclInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[5],Addr(_TVarInfo_)));
RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T5),[
TypeInfo(String)],Addr(DCGenVCLDPUs),cRegister);

RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T7),NoParams,Addr(DCRemoveCreatedParsers),cRegister);

RegisterProc(nil,MethodNames[8],mtProc,TypeInfo(_T8),[
TypeInfo(TBaseType),TypeInfo(String)],Addr(GetBaseTypeName),cRegister);

RegisterProc(nil,MethodNames[9],mtProc,TypeInfo(_T9),[
TypeInfo(TStrings),
TypeInfo(TDelphiVer)],Addr(DCRemoveBadVCLUnits),cRegister);

RegisterProc(nil,MethodNames[10],mtProc,TypeInfo(_T10),[
TypeInfo(String),
TypeInfo(TDelphiVer),TypeInfo(Boolean)],Addr(DCUnitIsInBadUnits),cRegister);

RegisterProc(nil,MethodNames[11],mtProc,TypeInfo(_T11),[
TypeInfo(TUnitParser),
TypeInfo(String),TypeInfo(Boolean)],Addr(DCIgnoreDPUsButNotVCL),cRegister);

RegisterProc(nil,MethodNames[12],mtProc,TypeInfo(_T12),[
TypeInfo(String),TypeInfo(Boolean)],Addr(DCPathIsInAnyDelphiDirs),cRegister);

RegisterProc(nil,MethodNames[13],mtProc,TypeInfo(_T13),[
TypeInfo(String),
TypeInfo(TDelphiVer),TypeInfo(Boolean)],Addr(DCPathIsInDelphiDirs),cRegister);

RegisterProc(nil,MethodNames[14],mtProc,TypeInfo(_T14),[
TypeInfo(String),
TypeInfo(String),TypeInfo(Boolean)],Addr(DCPathIsInPaths),cRegister);

RegRegisterMethod(TModuleInfo,'GetGlobalString',TypeInfo(_T16),[
TypeInfo(GlobalString),TypeInfo(String)],Addr(TModuleInfo.GetGlobalString));

RegRegisterMethod(TModuleInfo,'SetGlobalString',TypeInfo(_T17),[
TypeInfo(String),TypeInfo(GlobalString)],Addr(TModuleInfo.SetGlobalString));

RegisterProc(TModuleInfo,'Create',mtConstructor,TypeInfo(_T18),NoParams,Addr(TModuleInfo.Create),cRegister);

RegRegisterMethod(TModuleInfo,'GetUnitWherePropertyWasDeclared',TypeInfo(_T22),[
TypeInfo(String),
TypeInfo(String),TypeInfo(TModuleInfo)],Addr(TModuleInfo.GetUnitWherePropertyWasDeclared));

RegRegisterMethod(TModuleInfo,'SaveToStream',TypeInfo(_T23),[
TypeInfo(TStream)],Addr(TModuleInfo.SaveToStream));

RegRegisterMethod(TModuleInfo,'LoadFromStream',TypeInfo(_T24),[
TypeInfo(TStream)],Addr(TModuleInfo.LoadFromStream));

RegRegisterMethod(TStringHolder,'Add',TypeInfo(_T25),[
TypeInfo(String),TypeInfo(Integer)],Addr(TStringHolder.Add));

RegisterProc(TStringHolder,'Create',mtConstructor,TypeInfo(_T26),NoParams,Addr(TStringHolder.Create),cRegister);

RegRegisterMethod(TStringHolder,'SaveToStream',TypeInfo(_T27),[
TypeInfo(TStream)],Addr(TStringHolder.SaveToStream));

RegRegisterMethod(TStringHolder,'LoadFromStream',TypeInfo(_T28),[
TypeInfo(TStream)],Addr(TStringHolder.LoadFromStream));

//RegRegisterMethod(TUnitParser,'ParseText',TypeInfo(_T29),NoParams, pointer(140));
RegRegisterMethod(TUnitParser,'ParseText',TypeInfo(_T29),NoParams,  getVMTProcAddr('TUnitParser','ParseText',140));


RegRegisterMethod(TUnitParser,'AddRef',TypeInfo(_T30),NoParams,Addr(TUnitParser.AddRef));

RegRegisterMethod(TUnitParser,'Release',TypeInfo(_T31),NoParams,Addr(TUnitParser.Release));

RegRegisterMethod(TUnitParser,'LoadFromFile',TypeInfo(_T32),[
TypeInfo(String),
TypeInfo(String),
TypeInfo(String),
TypeInfo(String),
TypeInfo(String)],Addr(TUnitParser.LoadFromFile));

RegRegisterMethod(TUnitParser,'LoadFromStream',TypeInfo(_T33),[
TypeInfo(TStream),TypeInfo(Boolean)],Addr(TUnitParser.LoadFromStream));

RegRegisterMethod(TUnitParser,'SaveToStream',TypeInfo(_T34),[
TypeInfo(TStream)],Addr(TUnitParser.SaveToStream));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'LoadModuleEx',mtProc,TypeInfo(_T0),[
TypeInfo(String),
TypeInfo(String),
TypeInfo(String),
TypeInfo(String),
TypeInfo(String),
TypeInfo(String),
TypeInfo(TUnitParserClass),
TypeInfo(Boolean),
TypeInfo(TDCMsgHandler),TypeInfo(TUnitParser)],Addr(LoadModuleEx),cRegister)}

{RegisterProc(nil,'DCLoadModule',mtProc,TypeInfo(_T1),[
TypeInfo(String),
TypeInfo(String),
TypeInfo(String),
TypeInfo(String),
TypeInfo(String),
TypeInfo(String),
TypeInfo(TUnitParserClass),
TypeInfo(Boolean),
TypeInfo(Boolean),
TypeInfo(TDCMsgHandler),TypeInfo(TUnitParser)],Addr(DCLoadModule),cRegister)}

{RegisterProc(nil,'DCGetUsedFilesEx',mtProc,TypeInfo(_T2),[
TypeInfo(String),
TypeInfo(String),
TypeInfo(String),
TypeInfo(String),
TypeInfo(String),
TypeInfo(TStrings),
TypeInfo(Boolean),
TypeInfo(Boolean),
TypeInfo(TDCMsgHandler),
TypeInfo(Boolean)],Addr(DCGetUsedFilesEx),cRegister)}

{RegisterProc(nil,'DCGetUsedFilesListEx',mtProc,TypeInfo(_T3),[
TypeInfo(TStrings),
TypeInfo(TStrings),
TypeInfo(String),
TypeInfo(String),
TypeInfo(String),
TypeInfo(String),
TypeInfo(Boolean),
TypeInfo(Boolean),
TypeInfo(TDCMsgHandler),
TypeInfo(Boolean),
TypeInfo(TStrings)],Addr(DCGetUsedFilesListEx),cRegister)}

{RegisterProc(nil,'DCGenVCLDPUsForVer',mtProc,TypeInfo(_T4),[
TypeInfo(String),
TypeInfo(TDelphiVer),
TypeInfo(Boolean),
TypeInfo(Boolean),
TypeInfo(TDCMsgHandler)],Addr(DCGenVCLDPUsForVer),cRegister)}

{RegisterProc(nil,'DCGenVCLDPUsEx',mtProc,TypeInfo(_T6),[
TypeInfo(String),
TypeInfo(Boolean),
TypeInfo(Boolean),
TypeInfo(TDCMsgHandler)],Addr(DCGenVCLDPUsEx),cRegister)}

{RegisterProc(nil,'DCEnumParsersToDestroy',mtProc,TypeInfo(_T15),[
TypeInfo(TList),
TypeInfo(TDCCheckParserProc),
TypeInfoPointer],Addr(DCEnumParsersToDestroy),cRegister)}

{RegRegisterMethod(TModuleInfo,'GetTypeDecl',TypeInfo(_T19),[
TypeInfo(String),TypeInfoPointer],Addr(TModuleInfo.GetTypeDecl))}

{RegRegisterMethod(TModuleInfo,'GetTypeDeclInAllUnits',TypeInfo(_T20),[
TypeInfo(String),TypeInfoPointer],Addr(TModuleInfo.GetTypeDeclInAllUnits))}

{RegRegisterMethod(TModuleInfo,'GetConstDecl',TypeInfo(_T21),[
TypeInfo(String),TypeInfoPointer],Addr(TModuleInfo.GetConstDecl))}

RegisterEvent(TypeInfo(TDCMsgHandler),[
TypeInfo(String)]);

RegisterEvent(TypeInfo(TDeclProc),NoParams);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
