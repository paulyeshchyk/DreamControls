{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit MSXMLDOM_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  dcscript,
  dcsystem,
  dcdreamlib,
  ActiveX,
  Windows,
  Variants,
  ComObj,
  msxml,
  xmldom,
  Classes,
  msxmldom;
function ConvertTGUIDToVariant(var R : TGUID) : OleVariant;
function ConvertVariantToTGUID(const V : OleVariant) : TGUID;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TGUID__Wrapper = class(TDCRecordWrapper)
private
fR : TGUID;
public
function GetRecordPtr : pointer; override;
published
procedure setD1(const val : LongWord);
function getD1 : LongWord;
property D1 : LongWord read getD1 write setD1;
procedure setD2(const val : Word);
function getD2 : Word;
property D2 : Word read getD2 write setD2;
procedure setD3(const val : Word);
function getD3 : Word;
property D3 : Word read getD3 write setD3;
end;
type __TMSDOMEventHandler__ = class(TMSDOMEventHandler);
type
{_T0 = function : IXMLDOMDocument of object;}

{_T1 = function (const p0 : IXMLDOMDocument;
const p1 : String): Boolean of object;}

_T2 = function (const p0 : IDispatch;
p1 : Pointer;
p2 : Integer;
p3 : Integer;
p4 : Pointer): HRESULT of object;

_T3 = function (p0 : Integer;
p1 : Integer;
out p2): HRESULT of object;

_T4 = function (out p0 : Integer): HRESULT of object;

_T5 = function (p0 : Integer;
const p1 : IDispatch;
p2 : Integer;
p3 : Word;
var p4 : Word;
p5 : Pointer;
p6 : Pointer;
p7 : Pointer): HRESULT of object;

{_T6 = procedure (const p0 : TMSDOMDocument;
p1 : TAsyncEventHandler;
p2 : TObject) of object;}

{_T7 = procedure (p0 : IXMLDOMImplementation) of object;}

{_T8 = procedure (p0 : IXMLDOMNamedNodeMap) of object;}

{_T9 = procedure (p0 : IXMLDOMNode) of object;}

{_T10 = procedure (p0 : IXMLDOMNodeList) of object;}

function __TGUID__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TGUID__Wrapper.setD1(const val : LongWord);
begin
TGUID(GetRecordPtr^).D1 := val;
end;
function __TGUID__Wrapper.getD1 : LongWord;
begin
result := TGUID(GetRecordPtr^).D1;
end;
procedure __TGUID__Wrapper.setD2(const val : Word);
begin
TGUID(GetRecordPtr^).D2 := val;
end;
function __TGUID__Wrapper.getD2 : Word;
begin
result := TGUID(GetRecordPtr^).D2;
end;
procedure __TGUID__Wrapper.setD3(const val : Word);
begin
TGUID(GetRecordPtr^).D3 := val;
end;
function __TGUID__Wrapper.getD3 : Word;
begin
result := TGUID(GetRecordPtr^).D3;
end;
function __TMSDOMEventHandler__GetIDsOfNames__Wrapper(__Instance : TMSDOMEventHandler;
const p0 : IDispatch;
p1 : Pointer;
p2 : Integer;
p3 : Integer;
p4 : Pointer): HRESULT;
var
__p0 : ^TGUID;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := __TMSDOMEventHandler__(__Instance).GetIDsOfNames(__p0^,p1,p2,p3,p4);
end;

function __TMSDOMEventHandler__Invoke__Wrapper(__Instance : TMSDOMEventHandler;
p0 : Integer;
const p1 : IDispatch;
p2 : Integer;
p3 : Word;
var p4 : Word;
p5 : Pointer;
p6 : Pointer;
p7 : Pointer): HRESULT;
var
__p1 : ^TGUID;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := __TMSDOMEventHandler__(__Instance).Invoke(p0,__p1^,p2,p3,p4,p5,p6,p7);
end;


type __TGUID__Wrapper__ = class(__TGUID__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TGUID__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTGUIDToVariant(var R : TGUID) : OleVariant;
var
__rw : __TGUID__Wrapper__;
begin
__rw := __TGUID__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTGUID(const V : OleVariant) : TGUID;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TGUID((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

function __DC__Getmsxmldom__MSXML_DOM(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(msxmldom.MSXML_DOM);
end;

procedure __DC__Setmsxmldom__MSXML_DOM(Instance : TObject; Params : PVariantArgList);
begin
TObject(msxmldom.MSXML_DOM):=(VarToObject(OleVariant(Params^[0])));
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('MSXML_DOM',__DC__Getmsxmldom__MSXML_DOM,__DC__Setmsxmldom__MSXML_DOM));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..0] of string = (
'SMSXML'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,SMSXML));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..19] of TClass = (
TMSDOMAttr,
TMSDOMCDATASection,
TMSDOMCharacterData,
TMSDOMComment,
TMSDOMDocument,
TMSDOMDocumentFragment,
TMSDOMDocumentType,
TMSDOMElement,
TMSDOMEntity,
TMSDOMEntityReference,
TMSDOMEventHandler,
TMSDOMImplementation,
TMSDOMImplementationFactory,
TMSDOMInterface,
TMSDOMNamedNodeMap,
TMSDOMNode,
TMSDOMNodeList,
TMSDOMNotation,
TMSDOMProcessingInstruction,
TMSDOMText
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegisterProc(TMSDOMEventHandler,'GetIDsOfNames',mtMethod,TypeInfo(_T2),[TypeInfo(IDispatch),TypeInfoPointer,TypeInfo(Integer),TypeInfo(Integer),TypeInfoPointer,TypeInfo(HRESULT)], pointer(0),cRegister);
RegisterProc(TMSDOMEventHandler,'GetIDsOfNames',mtMethod,TypeInfo(_T2),[TypeInfo(IDispatch),TypeInfoPointer,TypeInfo(Integer),TypeInfo(Integer),TypeInfoPointer,TypeInfo(HRESULT)],  getVMTProcAddr('TMSDOMEventHandler','GetIDsOfNames',0),cRegister);


//RegisterProc(TMSDOMEventHandler,'GetTypeInfo',mtMethod,TypeInfo(_T3),[TypeInfo(Integer),TypeInfo(Integer),TypeInfoUntyped,TypeInfo(HRESULT)], pointer(4),cStdCall);
RegisterProc(TMSDOMEventHandler,'GetTypeInfo',mtMethod,TypeInfo(_T3),[TypeInfo(Integer),TypeInfo(Integer),TypeInfoUntyped,TypeInfo(HRESULT)],  getVMTProcAddr('TMSDOMEventHandler','GetTypeInfo',4),cStdCall);


//RegisterProc(TMSDOMEventHandler,'GetTypeInfoCount',mtMethod,TypeInfo(_T4),[TypeInfo(Integer),TypeInfo(HRESULT)], pointer(8),cStdCall);
RegisterProc(TMSDOMEventHandler,'GetTypeInfoCount',mtMethod,TypeInfo(_T4),[TypeInfo(Integer),TypeInfo(HRESULT)],  getVMTProcAddr('TMSDOMEventHandler','GetTypeInfoCount',8),cStdCall);


//RegisterProc(TMSDOMEventHandler,'Invoke',mtMethod,TypeInfo(_T5),[TypeInfo(Integer),TypeInfo(IDispatch),TypeInfo(Integer),TypeInfo(Word),TypeInfo(Word),TypeInfoPointer,TypeInfoPointer,TypeInfoPointer,TypeInfo(HRESULT)], pointer(12),cRegister);
RegisterProc(TMSDOMEventHandler,'Invoke',mtMethod,TypeInfo(_T5),[TypeInfo(Integer),TypeInfo(IDispatch),TypeInfo(Integer),TypeInfo(Word),TypeInfo(Word),TypeInfoPointer,TypeInfoPointer,TypeInfoPointer,TypeInfo(HRESULT)],  getVMTProcAddr('TMSDOMEventHandler','Invoke',12),cRegister);


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
{RegisterProc(nil,'CreateDOMDocument',mtProc,TypeInfo(_T0),[TypeInfo(IXMLDOMDocument)],Addr(CreateDOMDocument),cRegister)}

{RegisterProc(nil,'LoadFromXMLString',mtProc,TypeInfo(_T1),[
TypeInfo(IXMLDOMDocument),
TypeInfo(String),TypeInfo(Boolean)],Addr(LoadFromXMLString),cRegister)}

{RegisterProc(TMSDOMEventHandler,'Create',mtConstructor,TypeInfo(_T6),[
TypeInfo(TMSDOMDocument),
TypeInfo(TAsyncEventHandler),
TypeInfo(TObject)],Addr(TMSDOMEventHandler.Create),cRegister)}

{RegisterProc(TMSDOMImplementation,'Create',mtConstructor,TypeInfo(_T7),[
TypeInfo(IXMLDOMImplementation)],Addr(TMSDOMImplementation.Create),cRegister)}

{RegisterProc(TMSDOMNamedNodeMap,'Create',mtConstructor,TypeInfo(_T8),[
TypeInfo(IXMLDOMNamedNodeMap)],Addr(TMSDOMNamedNodeMap.Create),cRegister)}

{RegisterProc(TMSDOMNode,'Create',mtConstructor,TypeInfo(_T9),[
TypeInfo(IXMLDOMNode)],Addr(TMSDOMNode.Create),cRegister)}

{RegisterProc(TMSDOMNodeList,'Create',mtConstructor,TypeInfo(_T10),[
TypeInfo(IXMLDOMNodeList)],Addr(TMSDOMNodeList.Create),cRegister)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
end.
