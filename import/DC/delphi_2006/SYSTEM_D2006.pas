{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit SYSTEM_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  classes,
  dcscript,
  sysUtils,
  dcsystem,
  dcdreamlib;
function ConvertTCallDescToVariant(var R : TCallDesc) : OleVariant;
function ConvertVariantToTCallDesc(const V : OleVariant) : TCallDesc;
function ConvertTCVModInfoToVariant(var R : TCVModInfo) : OleVariant;
function ConvertVariantToTCVModInfo(const V : OleVariant) : TCVModInfo;
function ConvertTDispatchMessageToVariant(var R : TDispatchMessage) : OleVariant;
function ConvertVariantToTDispatchMessage(const V : OleVariant) : TDispatchMessage;
function ConvertTDispDescToVariant(var R : TDispDesc) : OleVariant;
function ConvertVariantToTDispDesc(const V : OleVariant) : TDispDesc;
function ConvertTDynArrayTypeInfoToVariant(var R : TDynArrayTypeInfo) : OleVariant;
function ConvertVariantToTDynArrayTypeInfo(const V : OleVariant) : TDynArrayTypeInfo;
function ConvertTFileRecToVariant(var R : TFileRec) : OleVariant;
function ConvertVariantToTFileRec(const V : OleVariant) : TFileRec;
function ConvertTGUIDToVariant(var R : TGUID) : OleVariant;
function ConvertVariantToTGUID(const V : OleVariant) : TGUID;
function ConvertTHeapStatusToVariant(var R : THeapStatus) : OleVariant;
function ConvertVariantToTHeapStatus(const V : OleVariant) : THeapStatus;
function ConvertTInitContextToVariant(var R : TInitContext) : OleVariant;
function ConvertVariantToTInitContext(const V : OleVariant) : TInitContext;
function ConvertTInterfaceEntryToVariant(var R : TInterfaceEntry) : OleVariant;
function ConvertVariantToTInterfaceEntry(const V : OleVariant) : TInterfaceEntry;
function ConvertTInterfaceTableToVariant(var R : TInterfaceTable) : OleVariant;
function ConvertVariantToTInterfaceTable(const V : OleVariant) : TInterfaceTable;
function ConvertTLibModuleToVariant(var R : TLibModule) : OleVariant;
function ConvertVariantToTLibModule(const V : OleVariant) : TLibModule;
function ConvertTMemoryManagerToVariant(var R : TMemoryManager) : OleVariant;
function ConvertVariantToTMemoryManager(const V : OleVariant) : TMemoryManager;
function ConvertTMemoryManagerExToVariant(var R : TMemoryManagerEx) : OleVariant;
function ConvertVariantToTMemoryManagerEx(const V : OleVariant) : TMemoryManagerEx;
function ConvertTMemoryManagerStateToVariant(var R : TMemoryManagerState) : OleVariant;
function ConvertVariantToTMemoryManagerState(const V : OleVariant) : TMemoryManagerState;
function ConvertTMethodToVariant(var R : TMethod) : OleVariant;
function ConvertVariantToTMethod(const V : OleVariant) : TMethod;
function ConvertTModuleUnloadRecToVariant(var R : TModuleUnloadRec) : OleVariant;
function ConvertVariantToTModuleUnloadRec(const V : OleVariant) : TModuleUnloadRec;
function ConvertTResStringRecToVariant(var R : TResStringRec) : OleVariant;
function ConvertVariantToTResStringRec(const V : OleVariant) : TResStringRec;
function ConvertTSmallBlockTypeStateToVariant(var R : TSmallBlockTypeState) : OleVariant;
function ConvertVariantToTSmallBlockTypeState(const V : OleVariant) : TSmallBlockTypeState;
function ConvertTTextRecToVariant(var R : TTextRec) : OleVariant;
function ConvertVariantToTTextRec(const V : OleVariant) : TTextRec;
function ConvertTVarArrayToVariant(var R : TVarArray) : OleVariant;
function ConvertVariantToTVarArray(const V : OleVariant) : TVarArray;
function ConvertTVarArrayBoundToVariant(var R : TVarArrayBound) : OleVariant;
function ConvertVariantToTVarArrayBound(const V : OleVariant) : TVarArrayBound;
function ConvertTVarDataToVariant(var R : TVarData) : OleVariant;
function ConvertVariantToTVarData(const V : OleVariant) : TVarData;
function ConvertTVariantManagerToVariant(var R : TVariantManager) : OleVariant;
function ConvertVariantToTVariantManager(const V : OleVariant) : TVariantManager;
function ConvertTVarRecToVariant(var R : TVarRec) : OleVariant;
function ConvertVariantToTVarRec(const V : OleVariant) : TVarRec;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TCallDesc__Wrapper = class(TDCRecordWrapper)
private
fR : TCallDesc;
public
function GetRecordPtr : pointer; override;
published
procedure setCallType(const val : Byte);
function getCallType : Byte;
property CallType : Byte read getCallType write setCallType;
procedure setArgCount(const val : Byte);
function getArgCount : Byte;
property ArgCount : Byte read getArgCount write setArgCount;
procedure setNamedArgCount(const val : Byte);
function getNamedArgCount : Byte;
property NamedArgCount : Byte read getNamedArgCount write setNamedArgCount;
end;
type __TCVModInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TCVModInfo;
public
function GetRecordPtr : pointer; override;
published
end;
type __TDispatchMessage__Wrapper = class(TDCRecordWrapper)
private
fR : TDispatchMessage;
public
function GetRecordPtr : pointer; override;
published
procedure setMsgID(const val : Word);
function getMsgID : Word;
property MsgID : Word read getMsgID write setMsgID;
end;
type __TDispDesc__Wrapper = class(TDCRecordWrapper)
private
fR : TDispDesc;
public
function GetRecordPtr : pointer; override;
published
procedure setDispID(const val : Integer);
function getDispID : Integer;
property DispID : Integer read getDispID write setDispID;
procedure setResType(const val : Byte);
function getResType : Byte;
property ResType : Byte read getResType write setResType;
end;
type __TDynArrayTypeInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TDynArrayTypeInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setkind(const val : system.TTypeKind);
function getkind : system.TTypeKind;
property kind : system.TTypeKind read getkind write setkind;
procedure setelSize(const val : Longint);
function getelSize : Longint;
property elSize : Longint read getelSize write setelSize;
procedure setVarType(const val : Integer);
function getVarType : Integer;
property VarType : Integer read getVarType write setVarType;
end;
type __TFileRec__Wrapper = class(TDCRecordWrapper)
private
fR : TFileRec;
public
function GetRecordPtr : pointer; override;
published
procedure setHandle(const val : Integer);
function getHandle : Integer;
property Handle : Integer read getHandle write setHandle;
procedure setMode(const val : Word);
function getMode : Word;
property Mode : Word read getMode write setMode;
procedure setFlags(const val : Word);
function getFlags : Word;
property Flags : Word read getFlags write setFlags;
procedure setRecSize(const val : Cardinal);
function getRecSize : Cardinal;
property RecSize : Cardinal read getRecSize write setRecSize;
procedure setBufSize(const val : Cardinal);
function getBufSize : Cardinal;
property BufSize : Cardinal read getBufSize write setBufSize;
procedure setBufPos(const val : Cardinal);
function getBufPos : Cardinal;
property BufPos : Cardinal read getBufPos write setBufPos;
procedure setBufEnd(const val : Cardinal);
function getBufEnd : Cardinal;
property BufEnd : Cardinal read getBufEnd write setBufEnd;
end;
type __TGUID__Wrapper = class(TDCRecordWrapper)
private
fR : TGUID;
public
function GetRecordPtr : pointer; override;
published
procedure setD1(const val : LongWord);
function getD1 : LongWord;
property D1 : LongWord read getD1 write setD1;
procedure setD2(const val : Word);
function getD2 : Word;
property D2 : Word read getD2 write setD2;
procedure setD3(const val : Word);
function getD3 : Word;
property D3 : Word read getD3 write setD3;
end;
type __THeapStatus__Wrapper = class(TDCRecordWrapper)
private
fR : THeapStatus;
public
function GetRecordPtr : pointer; override;
published
procedure setTotalAddrSpace(const val : Cardinal);
function getTotalAddrSpace : Cardinal;
property TotalAddrSpace : Cardinal read getTotalAddrSpace write setTotalAddrSpace;
procedure setTotalUncommitted(const val : Cardinal);
function getTotalUncommitted : Cardinal;
property TotalUncommitted : Cardinal read getTotalUncommitted write setTotalUncommitted;
procedure setTotalCommitted(const val : Cardinal);
function getTotalCommitted : Cardinal;
property TotalCommitted : Cardinal read getTotalCommitted write setTotalCommitted;
procedure setTotalAllocated(const val : Cardinal);
function getTotalAllocated : Cardinal;
property TotalAllocated : Cardinal read getTotalAllocated write setTotalAllocated;
procedure setTotalFree(const val : Cardinal);
function getTotalFree : Cardinal;
property TotalFree : Cardinal read getTotalFree write setTotalFree;
procedure setFreeSmall(const val : Cardinal);
function getFreeSmall : Cardinal;
property FreeSmall : Cardinal read getFreeSmall write setFreeSmall;
procedure setFreeBig(const val : Cardinal);
function getFreeBig : Cardinal;
property FreeBig : Cardinal read getFreeBig write setFreeBig;
procedure setUnused(const val : Cardinal);
function getUnused : Cardinal;
property Unused : Cardinal read getUnused write setUnused;
procedure setOverhead(const val : Cardinal);
function getOverhead : Cardinal;
property Overhead : Cardinal read getOverhead write setOverhead;
procedure setHeapErrorCode(const val : Cardinal);
function getHeapErrorCode : Cardinal;
property HeapErrorCode : Cardinal read getHeapErrorCode write setHeapErrorCode;
end;
type __TInitContext__Wrapper = class(TDCRecordWrapper)
private
fR : TInitContext;
public
function GetRecordPtr : pointer; override;
published
procedure setInitCount(const val : Integer);
function getInitCount : Integer;
property InitCount : Integer read getInitCount write setInitCount;
procedure setDLLInitState(const val : Byte);
function getDLLInitState : Byte;
property DLLInitState : Byte read getDLLInitState write setDLLInitState;
end;
type __TInterfaceEntry__Wrapper = class(TDCRecordWrapper)
private
fR : TInterfaceEntry;
public
function GetRecordPtr : pointer; override;
published
procedure setIOffset(const val : Integer);
function getIOffset : Integer;
property IOffset : Integer read getIOffset write setIOffset;
procedure setImplGetter(const val : Integer);
function getImplGetter : Integer;
property ImplGetter : Integer read getImplGetter write setImplGetter;
end;
type __TInterfaceTable__Wrapper = class(TDCRecordWrapper)
private
fR : TInterfaceTable;
public
function GetRecordPtr : pointer; override;
published
procedure setEntryCount(const val : Integer);
function getEntryCount : Integer;
property EntryCount : Integer read getEntryCount write setEntryCount;
end;
type __TLibModule__Wrapper = class(TDCRecordWrapper)
private
fR : TLibModule;
public
function GetRecordPtr : pointer; override;
published
procedure setInstance(const val : LongWord);
function getInstance : LongWord;
property Instance : LongWord read getInstance write setInstance;
procedure setCodeInstance(const val : LongWord);
function getCodeInstance : LongWord;
property CodeInstance : LongWord read getCodeInstance write setCodeInstance;
procedure setDataInstance(const val : LongWord);
function getDataInstance : LongWord;
property DataInstance : LongWord read getDataInstance write setDataInstance;
procedure setResInstance(const val : LongWord);
function getResInstance : LongWord;
property ResInstance : LongWord read getResInstance write setResInstance;
procedure setReserved(const val : Integer);
function getReserved : Integer;
property Reserved : Integer read getReserved write setReserved;
end;
type __TMemoryManager__Wrapper = class(TDCRecordWrapper)
private
fR : TMemoryManager;
public
function GetRecordPtr : pointer; override;
published
end;
type __TMemoryManagerEx__Wrapper = class(TDCRecordWrapper)
private
fR : TMemoryManagerEx;
public
function GetRecordPtr : pointer; override;
published
end;
type __TMemoryManagerState__Wrapper = class(TDCRecordWrapper)
private
fR : TMemoryManagerState;
public
function GetRecordPtr : pointer; override;
published
procedure setAllocatedMediumBlockCount(const val : Cardinal);
function getAllocatedMediumBlockCount : Cardinal;
property AllocatedMediumBlockCount : Cardinal read getAllocatedMediumBlockCount write setAllocatedMediumBlockCount;
procedure setTotalAllocatedMediumBlockSize(const val : Cardinal);
function getTotalAllocatedMediumBlockSize : Cardinal;
property TotalAllocatedMediumBlockSize : Cardinal read getTotalAllocatedMediumBlockSize write setTotalAllocatedMediumBlockSize;
procedure setReservedMediumBlockAddressSpace(const val : Cardinal);
function getReservedMediumBlockAddressSpace : Cardinal;
property ReservedMediumBlockAddressSpace : Cardinal read getReservedMediumBlockAddressSpace write setReservedMediumBlockAddressSpace;
procedure setAllocatedLargeBlockCount(const val : Cardinal);
function getAllocatedLargeBlockCount : Cardinal;
property AllocatedLargeBlockCount : Cardinal read getAllocatedLargeBlockCount write setAllocatedLargeBlockCount;
procedure setTotalAllocatedLargeBlockSize(const val : Cardinal);
function getTotalAllocatedLargeBlockSize : Cardinal;
property TotalAllocatedLargeBlockSize : Cardinal read getTotalAllocatedLargeBlockSize write setTotalAllocatedLargeBlockSize;
procedure setReservedLargeBlockAddressSpace(const val : Cardinal);
function getReservedLargeBlockAddressSpace : Cardinal;
property ReservedLargeBlockAddressSpace : Cardinal read getReservedLargeBlockAddressSpace write setReservedLargeBlockAddressSpace;
end;
type __TMethod__Wrapper = class(TDCRecordWrapper)
private
fR : TMethod;
public
function GetRecordPtr : pointer; override;
published
end;
type __TModuleUnloadRec__Wrapper = class(TDCRecordWrapper)
private
fR : TModuleUnloadRec;
public
function GetRecordPtr : pointer; override;
published
end;
type __TResStringRec__Wrapper = class(TDCRecordWrapper)
private
fR : TResStringRec;
public
function GetRecordPtr : pointer; override;
published
procedure setIdentifier(const val : Integer);
function getIdentifier : Integer;
property Identifier : Integer read getIdentifier write setIdentifier;
end;
type __TSmallBlockTypeState__Wrapper = class(TDCRecordWrapper)
private
fR : TSmallBlockTypeState;
public
function GetRecordPtr : pointer; override;
published
procedure setInternalBlockSize(const val : Cardinal);
function getInternalBlockSize : Cardinal;
property InternalBlockSize : Cardinal read getInternalBlockSize write setInternalBlockSize;
procedure setUseableBlockSize(const val : Cardinal);
function getUseableBlockSize : Cardinal;
property UseableBlockSize : Cardinal read getUseableBlockSize write setUseableBlockSize;
procedure setAllocatedBlockCount(const val : Cardinal);
function getAllocatedBlockCount : Cardinal;
property AllocatedBlockCount : Cardinal read getAllocatedBlockCount write setAllocatedBlockCount;
procedure setReservedAddressSpace(const val : Cardinal);
function getReservedAddressSpace : Cardinal;
property ReservedAddressSpace : Cardinal read getReservedAddressSpace write setReservedAddressSpace;
end;
type __TTextRec__Wrapper = class(TDCRecordWrapper)
private
fR : TTextRec;
public
function GetRecordPtr : pointer; override;
published
procedure setHandle(const val : Integer);
function getHandle : Integer;
property Handle : Integer read getHandle write setHandle;
procedure setMode(const val : Word);
function getMode : Word;
property Mode : Word read getMode write setMode;
procedure setFlags(const val : Word);
function getFlags : Word;
property Flags : Word read getFlags write setFlags;
procedure setBufSize(const val : Cardinal);
function getBufSize : Cardinal;
property BufSize : Cardinal read getBufSize write setBufSize;
procedure setBufPos(const val : Cardinal);
function getBufPos : Cardinal;
property BufPos : Cardinal read getBufPos write setBufPos;
procedure setBufEnd(const val : Cardinal);
function getBufEnd : Cardinal;
property BufEnd : Cardinal read getBufEnd write setBufEnd;
end;
type __TVarArray__Wrapper = class(TDCRecordWrapper)
private
fR : TVarArray;
public
function GetRecordPtr : pointer; override;
published
procedure setDimCount(const val : Word);
function getDimCount : Word;
property DimCount : Word read getDimCount write setDimCount;
procedure setFlags(const val : Word);
function getFlags : Word;
property Flags : Word read getFlags write setFlags;
procedure setElementSize(const val : Integer);
function getElementSize : Integer;
property ElementSize : Integer read getElementSize write setElementSize;
procedure setLockCount(const val : Integer);
function getLockCount : Integer;
property LockCount : Integer read getLockCount write setLockCount;
end;
type __TVarArrayBound__Wrapper = class(TDCRecordWrapper)
private
fR : TVarArrayBound;
public
function GetRecordPtr : pointer; override;
published
procedure setElementCount(const val : Integer);
function getElementCount : Integer;
property ElementCount : Integer read getElementCount write setElementCount;
procedure setLowBound(const val : Integer);
function getLowBound : Integer;
property LowBound : Integer read getLowBound write setLowBound;
end;
type __TVarData__Wrapper = class(TDCRecordWrapper)
private
fR : TVarData;
public
function GetRecordPtr : pointer; override;
published
procedure setVType(const val : TVarType);
function getVType : TVarType;
property VType : TVarType read getVType write setVType;
procedure setReserved1(const val : Word);
function getReserved1 : Word;
property Reserved1 : Word read getReserved1 write setReserved1;
procedure setReserved2(const val : Word);
function getReserved2 : Word;
property Reserved2 : Word read getReserved2 write setReserved2;
procedure setReserved3(const val : Word);
function getReserved3 : Word;
property Reserved3 : Word read getReserved3 write setReserved3;
procedure setVSmallInt(const val : SmallInt);
function getVSmallInt : SmallInt;
property VSmallInt : SmallInt read getVSmallInt write setVSmallInt;
procedure setVInteger(const val : Integer);
function getVInteger : Integer;
property VInteger : Integer read getVInteger write setVInteger;
procedure setVSingle(const val : Single);
function getVSingle : Single;
property VSingle : Single read getVSingle write setVSingle;
procedure setVDouble(const val : Double);
function getVDouble : Double;
property VDouble : Double read getVDouble write setVDouble;
procedure setVCurrency(const val : Currency);
function getVCurrency : Currency;
property VCurrency : Currency read getVCurrency write setVCurrency;
procedure setVBoolean(const val : WordBool);
function getVBoolean : WordBool;
property VBoolean : WordBool read getVBoolean write setVBoolean;
procedure setVShortInt(const val : Shortint);
function getVShortInt : Shortint;
property VShortInt : Shortint read getVShortInt write setVShortInt;
procedure setVByte(const val : Byte);
function getVByte : Byte;
property VByte : Byte read getVByte write setVByte;
procedure setVWord(const val : Word);
function getVWord : Word;
property VWord : Word read getVWord write setVWord;
procedure setVLongWord(const val : LongWord);
function getVLongWord : LongWord;
property VLongWord : LongWord read getVLongWord write setVLongWord;
end;
type __TVariantManager__Wrapper = class(TDCRecordWrapper)
private
fR : TVariantManager;
public
function GetRecordPtr : pointer; override;
published
end;
type __TVarRec__Wrapper = class(TDCRecordWrapper)
private
fR : TVarRec;
public
function GetRecordPtr : pointer; override;
published
procedure setVInteger(const val : Integer);
function getVInteger : Integer;
property VInteger : Integer read getVInteger write setVInteger;
procedure setVType(const val : Byte);
function getVType : Byte;
property VType : Byte read getVType write setVType;
procedure setVBoolean(const val : Boolean);
function getVBoolean : Boolean;
property VBoolean : Boolean read getVBoolean write setVBoolean;
procedure setVChar(const val : Char);
function getVChar : Char;
property VChar : Char read getVChar write setVChar;
procedure setVObject(const val : TObject);
function getVObject : TObject;
property VObject : TObject read getVObject write setVObject;
procedure setVWideChar(const val : WideChar);
function getVWideChar : WideChar;
property VWideChar : WideChar read getVWideChar write setVWideChar;
end;
type __TContainedObject__ = class(TContainedObject);
type
_T0 = function : Pointer of object;

_T1 = procedure  of object;

_T2 = _T0;

_T3 = function (p0 : Pointer): Pointer of object;

_T4 = function : TObject of object;

_T5 = _T0;

_T6 = procedure (p0 : Integer) of object;

_T7 = procedure (const p0 : IDispatch) of object;

_T8 = _T7;

_T9 = function : Boolean of object;

_T10 = function (p0 : Integer): Pointer of object;

_T11 = function (p0 : Pointer): Integer of object;

_T12 = function (p0 : Pointer;
p1 : Integer): Pointer of object;

_T13 = function (p0 : Cardinal): Pointer of object;

_T14 = function (p0 : Pointer): Boolean of object;

_T15 = _T14;

_T16 = _T13;

_T17 = function : IDispatch of object;

_T18 = _T7;

{_T19 = procedure (var p0 : TMemoryMap) of object;}

_T20 = _T14;

_T21 = _T14;

_T22 = function : TMinimumBlockAlignment of object;

_T23 = procedure (p0 : TMinimumBlockAlignment) of object;

_T24 = _T9;

_T25 = _T9;

{_T26 = function (p0 : Pointer;
p1 : LongWord;
p2 : TThreadFunc;
p3 : Pointer;
p4 : LongWord;
var p5 : LongWord): Integer of object;}

_T27 = _T6;

{_T28 = procedure (var p0 : Text;
p1 : TTextLineBreakStyle) of object;}

_T29 = procedure (const p0 : string) of object;

{_T30 = function (var p0 : Text): Integer of object;}

_T31 = function : Integer of object;

_T32 = _T29;

_T33 = procedure (const p0;
var p1;
p2 : Integer) of object;

_T34 = _T31;

_T35 = function (p0 : Integer): string of object;

_T36 = _T29;

_T37 = function (p0 : Char): Char of object;

_T38 = _T1;

_T39 = function (const p0 : Integer): Integer of object;

_T40 = procedure (p0 : Word) of object;

_T41 = function : Word of object;

{_T42 = function (p0 : PWideChar): string of object;}

{_T43 = function (p0 : PWideChar;
p1 : Integer): string of object;}

{_T44 = procedure (p0 : PWideChar;
var p1 : string) of object;}

{_T45 = procedure (p0 : PWideChar;
p1 : Integer;
var p2 : string) of object;}

{_T46 = function (const p0 : string;
p1 : PWideChar;
p2 : Integer): PWideChar of object;}

_T47 = function (const p0 : UCS4String): PUCS4Char of object;

{_T48 = function (const p0 : WideString): UCS4String of object;}

_T49 = function (const p0 : UCS4String): WideString of object;

{_T50 = function (p0 : PChar;
p1 : PWideChar;
p2 : Integer): Integer of object;}

{_T51 = function (p0 : PWideChar;
p1 : PChar;
p2 : Integer): Integer of object;}

_T52 = function (const p0 : WideString): UTF8String of object;

_T53 = function (const p0 : UTF8String): WideString of object;

_T54 = function (const p0 : string): UTF8String of object;

_T55 = function (const p0 : UTF8String): string of object;

{_T56 = function (p0 : PWideChar): string of object;}

{_T57 = procedure (p0 : PWideChar;
var p1 : string) of object;}

_T58 = function (const p0 : string): PWideChar of object;

_T59 = _T7;

_T60 = _T7;

_T61 = _T9;

{_T62 = procedure (p0 : PLibModule) of object;}

{_T63 = procedure (p0 : PLibModule) of object;}

_T64 = function (p0 : Pointer): LongWord of object;

{_T65 = function (p0 : TClass): LongWord of object;}

_T66 = function (p0 : LongWord): LongWord of object;

{_T68 = procedure (p0 : TEnumModuleFunc;
p1 : Pointer) of object;}

{_T69 = procedure (p0 : TEnumModuleFunc;
p1 : Pointer) of object;}

{_T70 = procedure (p0 : TModuleUnloadProc) of object;}

{_T71 = procedure (p0 : TModuleUnloadProc) of object;}

{_T72 = function (p0 : PResStringRec): string of object;}

_T73 = function (const p0 : Extended): Extended of object;

_T74 = _T73;

_T75 = _T73;

_T76 = _T73;

_T77 = _T73;

_T78 = _T73;

_T79 = _T73;

_T80 = _T73;

_T81 = _T1;

_T82 = _T1;

_T83 = procedure (var p0 : AnsiString) of object;

_T84 = procedure (var p0 : Pointer;
p1 : Pointer) of object;

_T85 = procedure (var p0 : Pointer;
p1 : Pointer;
p2 : Longint;
p3 : PLongint) of object;

{_T86 = function (p0 : PDynArrayTypeInfo): Integer of object;}

_T87 = _T1;

_T88 = _T1;

_T89 = function (p0 : Comp): Double of object;

_T90 = procedure (p0 : Double;
var p1 : Comp) of object;

_T91 = function (p0 : Comp): Currency of object;

_T92 = procedure (p0 : Currency;
var p1 : Comp) of object;

_T93 = _T10;

_T94 = _T11;

_T95 = _T12;

_T96 = function (const p0 : AnsiString;
const p1 : AnsiString): Integer of object;

_T97 = function (p0 : AnsiChar;
p1 : Integer): AnsiString of object;

_T98 = procedure (p0 : TRuntimeError) of object;

_T99 = _T31;

_T100 = _T6;

_T101 = _T6;

{_T102 = procedure (const p0 : IInterface) of object;}

_T103 = function (const p0 : IDispatch;
var p1): HRESULT of object;

_T104 = _T1;

_T105 = _T1;

_T106 = function (p0 : Pointer): TObject of object;

_T107 = _T1;

{_T108 = function : TClass of object;}

_T109 = function : ShortString of object;

_T110 = function (const p0 : string): Boolean of object;

{_T111 = function : TClass of object;}

_T112 = _T0;

_T113 = function : Longint of object;

{_T114 = function (p0 : TClass): Boolean of object;}

_T115 = function (const p0 : ShortString): Pointer of object;

_T116 = function (p0 : Pointer): ShortString of object;

_T117 = _T115;

_T118 = function (const p0 : IDispatch;
var p1): Boolean of object;

{_T120 = function : PInterfaceTable of object;}

_T121 = function (p0 : TObject;
p1 : Pointer): HRESULT of object;

_T122 = _T1;

_T123 = _T1;

_T124 = procedure (var p0) of object;

_T125 = _T124;

_T126 = _T4;

_T127 = _T1;

_T128 = _T1;

function __TCallDesc__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCallDesc__Wrapper.setCallType(const val : Byte);
begin
TCallDesc(GetRecordPtr^).CallType := val;
end;
function __TCallDesc__Wrapper.getCallType : Byte;
begin
result := TCallDesc(GetRecordPtr^).CallType;
end;
procedure __TCallDesc__Wrapper.setArgCount(const val : Byte);
begin
TCallDesc(GetRecordPtr^).ArgCount := val;
end;
function __TCallDesc__Wrapper.getArgCount : Byte;
begin
result := TCallDesc(GetRecordPtr^).ArgCount;
end;
procedure __TCallDesc__Wrapper.setNamedArgCount(const val : Byte);
begin
TCallDesc(GetRecordPtr^).NamedArgCount := val;
end;
function __TCallDesc__Wrapper.getNamedArgCount : Byte;
begin
result := TCallDesc(GetRecordPtr^).NamedArgCount;
end;
function __TCVModInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TDispatchMessage__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDispatchMessage__Wrapper.setMsgID(const val : Word);
begin
TDispatchMessage(GetRecordPtr^).MsgID := val;
end;
function __TDispatchMessage__Wrapper.getMsgID : Word;
begin
result := TDispatchMessage(GetRecordPtr^).MsgID;
end;
function __TDispDesc__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDispDesc__Wrapper.setDispID(const val : Integer);
begin
TDispDesc(GetRecordPtr^).DispID := val;
end;
function __TDispDesc__Wrapper.getDispID : Integer;
begin
result := TDispDesc(GetRecordPtr^).DispID;
end;
procedure __TDispDesc__Wrapper.setResType(const val : Byte);
begin
TDispDesc(GetRecordPtr^).ResType := val;
end;
function __TDispDesc__Wrapper.getResType : Byte;
begin
result := TDispDesc(GetRecordPtr^).ResType;
end;
function __TDynArrayTypeInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDynArrayTypeInfo__Wrapper.setkind(const val : system.TTypeKind);
var k:system.TTypeKind;
begin
  k:=val;
  system.TTypeKind(system.TDynArrayTypeInfo(GetRecordPtr^).kind) := k;
end;
function __TDynArrayTypeInfo__Wrapper.getkind : system.TTypeKind;
begin
result := system.TTypeKind(TDynArrayTypeInfo(GetRecordPtr^).kind);
end;
procedure __TDynArrayTypeInfo__Wrapper.setelSize(const val : Longint);
begin
TDynArrayTypeInfo(GetRecordPtr^).elSize := val;
end;
function __TDynArrayTypeInfo__Wrapper.getelSize : Longint;
begin
result := TDynArrayTypeInfo(GetRecordPtr^).elSize;
end;
procedure __TDynArrayTypeInfo__Wrapper.setVarType(const val : Integer);
begin
TDynArrayTypeInfo(GetRecordPtr^).VarType := val;
end;
function __TDynArrayTypeInfo__Wrapper.getVarType : Integer;
begin
result := TDynArrayTypeInfo(GetRecordPtr^).VarType;
end;
function __TFileRec__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TFileRec__Wrapper.setHandle(const val : Integer);
begin
TFileRec(GetRecordPtr^).Handle := val;
end;
function __TFileRec__Wrapper.getHandle : Integer;
begin
result := TFileRec(GetRecordPtr^).Handle;
end;
procedure __TFileRec__Wrapper.setMode(const val : Word);
begin
TFileRec(GetRecordPtr^).Mode := val;
end;
function __TFileRec__Wrapper.getMode : Word;
begin
result := TFileRec(GetRecordPtr^).Mode;
end;
procedure __TFileRec__Wrapper.setFlags(const val : Word);
begin
TFileRec(GetRecordPtr^).Flags := val;
end;
function __TFileRec__Wrapper.getFlags : Word;
begin
result := TFileRec(GetRecordPtr^).Flags;
end;
procedure __TFileRec__Wrapper.setRecSize(const val : Cardinal);
begin
TFileRec(GetRecordPtr^).RecSize := val;
end;
function __TFileRec__Wrapper.getRecSize : Cardinal;
begin
result := TFileRec(GetRecordPtr^).RecSize;
end;
procedure __TFileRec__Wrapper.setBufSize(const val : Cardinal);
begin
TFileRec(GetRecordPtr^).BufSize := val;
end;
function __TFileRec__Wrapper.getBufSize : Cardinal;
begin
result := TFileRec(GetRecordPtr^).BufSize;
end;
procedure __TFileRec__Wrapper.setBufPos(const val : Cardinal);
begin
TFileRec(GetRecordPtr^).BufPos := val;
end;
function __TFileRec__Wrapper.getBufPos : Cardinal;
begin
result := TFileRec(GetRecordPtr^).BufPos;
end;
procedure __TFileRec__Wrapper.setBufEnd(const val : Cardinal);
begin
TFileRec(GetRecordPtr^).BufEnd := val;
end;
function __TFileRec__Wrapper.getBufEnd : Cardinal;
begin
result := TFileRec(GetRecordPtr^).BufEnd;
end;
function __TGUID__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TGUID__Wrapper.setD1(const val : LongWord);
begin
TGUID(GetRecordPtr^).D1 := val;
end;
function __TGUID__Wrapper.getD1 : LongWord;
begin
result := TGUID(GetRecordPtr^).D1;
end;
procedure __TGUID__Wrapper.setD2(const val : Word);
begin
TGUID(GetRecordPtr^).D2 := val;
end;
function __TGUID__Wrapper.getD2 : Word;
begin
result := TGUID(GetRecordPtr^).D2;
end;
procedure __TGUID__Wrapper.setD3(const val : Word);
begin
TGUID(GetRecordPtr^).D3 := val;
end;
function __TGUID__Wrapper.getD3 : Word;
begin
result := TGUID(GetRecordPtr^).D3;
end;
function __THeapStatus__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __THeapStatus__Wrapper.setTotalAddrSpace(const val : Cardinal);
begin
THeapStatus(GetRecordPtr^).TotalAddrSpace := val;
end;
function __THeapStatus__Wrapper.getTotalAddrSpace : Cardinal;
begin
result := THeapStatus(GetRecordPtr^).TotalAddrSpace;
end;
procedure __THeapStatus__Wrapper.setTotalUncommitted(const val : Cardinal);
begin
THeapStatus(GetRecordPtr^).TotalUncommitted := val;
end;
function __THeapStatus__Wrapper.getTotalUncommitted : Cardinal;
begin
result := THeapStatus(GetRecordPtr^).TotalUncommitted;
end;
procedure __THeapStatus__Wrapper.setTotalCommitted(const val : Cardinal);
begin
THeapStatus(GetRecordPtr^).TotalCommitted := val;
end;
function __THeapStatus__Wrapper.getTotalCommitted : Cardinal;
begin
result := THeapStatus(GetRecordPtr^).TotalCommitted;
end;
procedure __THeapStatus__Wrapper.setTotalAllocated(const val : Cardinal);
begin
THeapStatus(GetRecordPtr^).TotalAllocated := val;
end;
function __THeapStatus__Wrapper.getTotalAllocated : Cardinal;
begin
result := THeapStatus(GetRecordPtr^).TotalAllocated;
end;
procedure __THeapStatus__Wrapper.setTotalFree(const val : Cardinal);
begin
THeapStatus(GetRecordPtr^).TotalFree := val;
end;
function __THeapStatus__Wrapper.getTotalFree : Cardinal;
begin
result := THeapStatus(GetRecordPtr^).TotalFree;
end;
procedure __THeapStatus__Wrapper.setFreeSmall(const val : Cardinal);
begin
THeapStatus(GetRecordPtr^).FreeSmall := val;
end;
function __THeapStatus__Wrapper.getFreeSmall : Cardinal;
begin
result := THeapStatus(GetRecordPtr^).FreeSmall;
end;
procedure __THeapStatus__Wrapper.setFreeBig(const val : Cardinal);
begin
THeapStatus(GetRecordPtr^).FreeBig := val;
end;
function __THeapStatus__Wrapper.getFreeBig : Cardinal;
begin
result := THeapStatus(GetRecordPtr^).FreeBig;
end;
procedure __THeapStatus__Wrapper.setUnused(const val : Cardinal);
begin
THeapStatus(GetRecordPtr^).Unused := val;
end;
function __THeapStatus__Wrapper.getUnused : Cardinal;
begin
result := THeapStatus(GetRecordPtr^).Unused;
end;
procedure __THeapStatus__Wrapper.setOverhead(const val : Cardinal);
begin
THeapStatus(GetRecordPtr^).Overhead := val;
end;
function __THeapStatus__Wrapper.getOverhead : Cardinal;
begin
result := THeapStatus(GetRecordPtr^).Overhead;
end;
procedure __THeapStatus__Wrapper.setHeapErrorCode(const val : Cardinal);
begin
THeapStatus(GetRecordPtr^).HeapErrorCode := val;
end;
function __THeapStatus__Wrapper.getHeapErrorCode : Cardinal;
begin
result := THeapStatus(GetRecordPtr^).HeapErrorCode;
end;
function __TInitContext__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TInitContext__Wrapper.setInitCount(const val : Integer);
begin
TInitContext(GetRecordPtr^).InitCount := val;
end;
function __TInitContext__Wrapper.getInitCount : Integer;
begin
result := TInitContext(GetRecordPtr^).InitCount;
end;
procedure __TInitContext__Wrapper.setDLLInitState(const val : Byte);
begin
TInitContext(GetRecordPtr^).DLLInitState := val;
end;
function __TInitContext__Wrapper.getDLLInitState : Byte;
begin
result := TInitContext(GetRecordPtr^).DLLInitState;
end;
function __TInterfaceEntry__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TInterfaceEntry__Wrapper.setIOffset(const val : Integer);
begin
TInterfaceEntry(GetRecordPtr^).IOffset := val;
end;
function __TInterfaceEntry__Wrapper.getIOffset : Integer;
begin
result := TInterfaceEntry(GetRecordPtr^).IOffset;
end;
procedure __TInterfaceEntry__Wrapper.setImplGetter(const val : Integer);
begin
TInterfaceEntry(GetRecordPtr^).ImplGetter := val;
end;
function __TInterfaceEntry__Wrapper.getImplGetter : Integer;
begin
result := TInterfaceEntry(GetRecordPtr^).ImplGetter;
end;
function __TInterfaceTable__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TInterfaceTable__Wrapper.setEntryCount(const val : Integer);
begin
TInterfaceTable(GetRecordPtr^).EntryCount := val;
end;
function __TInterfaceTable__Wrapper.getEntryCount : Integer;
begin
result := TInterfaceTable(GetRecordPtr^).EntryCount;
end;
function __TLibModule__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TLibModule__Wrapper.setInstance(const val : LongWord);
begin
TLibModule(GetRecordPtr^).Instance := val;
end;
function __TLibModule__Wrapper.getInstance : LongWord;
begin
result := TLibModule(GetRecordPtr^).Instance;
end;
procedure __TLibModule__Wrapper.setCodeInstance(const val : LongWord);
begin
TLibModule(GetRecordPtr^).CodeInstance := val;
end;
function __TLibModule__Wrapper.getCodeInstance : LongWord;
begin
result := TLibModule(GetRecordPtr^).CodeInstance;
end;
procedure __TLibModule__Wrapper.setDataInstance(const val : LongWord);
begin
TLibModule(GetRecordPtr^).DataInstance := val;
end;
function __TLibModule__Wrapper.getDataInstance : LongWord;
begin
result := TLibModule(GetRecordPtr^).DataInstance;
end;
procedure __TLibModule__Wrapper.setResInstance(const val : LongWord);
begin
TLibModule(GetRecordPtr^).ResInstance := val;
end;
function __TLibModule__Wrapper.getResInstance : LongWord;
begin
result := TLibModule(GetRecordPtr^).ResInstance;
end;
procedure __TLibModule__Wrapper.setReserved(const val : Integer);
begin
TLibModule(GetRecordPtr^).Reserved := val;
end;
function __TLibModule__Wrapper.getReserved : Integer;
begin
result := TLibModule(GetRecordPtr^).Reserved;
end;
function __TMemoryManager__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TMemoryManagerEx__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TMemoryManagerState__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMemoryManagerState__Wrapper.setAllocatedMediumBlockCount(const val : Cardinal);
begin
TMemoryManagerState(GetRecordPtr^).AllocatedMediumBlockCount := val;
end;
function __TMemoryManagerState__Wrapper.getAllocatedMediumBlockCount : Cardinal;
begin
result := TMemoryManagerState(GetRecordPtr^).AllocatedMediumBlockCount;
end;
procedure __TMemoryManagerState__Wrapper.setTotalAllocatedMediumBlockSize(const val : Cardinal);
begin
TMemoryManagerState(GetRecordPtr^).TotalAllocatedMediumBlockSize := val;
end;
function __TMemoryManagerState__Wrapper.getTotalAllocatedMediumBlockSize : Cardinal;
begin
result := TMemoryManagerState(GetRecordPtr^).TotalAllocatedMediumBlockSize;
end;
procedure __TMemoryManagerState__Wrapper.setReservedMediumBlockAddressSpace(const val : Cardinal);
begin
TMemoryManagerState(GetRecordPtr^).ReservedMediumBlockAddressSpace := val;
end;
function __TMemoryManagerState__Wrapper.getReservedMediumBlockAddressSpace : Cardinal;
begin
result := TMemoryManagerState(GetRecordPtr^).ReservedMediumBlockAddressSpace;
end;
procedure __TMemoryManagerState__Wrapper.setAllocatedLargeBlockCount(const val : Cardinal);
begin
TMemoryManagerState(GetRecordPtr^).AllocatedLargeBlockCount := val;
end;
function __TMemoryManagerState__Wrapper.getAllocatedLargeBlockCount : Cardinal;
begin
result := TMemoryManagerState(GetRecordPtr^).AllocatedLargeBlockCount;
end;
procedure __TMemoryManagerState__Wrapper.setTotalAllocatedLargeBlockSize(const val : Cardinal);
begin
TMemoryManagerState(GetRecordPtr^).TotalAllocatedLargeBlockSize := val;
end;
function __TMemoryManagerState__Wrapper.getTotalAllocatedLargeBlockSize : Cardinal;
begin
result := TMemoryManagerState(GetRecordPtr^).TotalAllocatedLargeBlockSize;
end;
procedure __TMemoryManagerState__Wrapper.setReservedLargeBlockAddressSpace(const val : Cardinal);
begin
TMemoryManagerState(GetRecordPtr^).ReservedLargeBlockAddressSpace := val;
end;
function __TMemoryManagerState__Wrapper.getReservedLargeBlockAddressSpace : Cardinal;
begin
result := TMemoryManagerState(GetRecordPtr^).ReservedLargeBlockAddressSpace;
end;
function __TMethod__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TModuleUnloadRec__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TResStringRec__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TResStringRec__Wrapper.setIdentifier(const val : Integer);
begin
TResStringRec(GetRecordPtr^).Identifier := val;
end;
function __TResStringRec__Wrapper.getIdentifier : Integer;
begin
result := TResStringRec(GetRecordPtr^).Identifier;
end;
function __TSmallBlockTypeState__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSmallBlockTypeState__Wrapper.setInternalBlockSize(const val : Cardinal);
begin
TSmallBlockTypeState(GetRecordPtr^).InternalBlockSize := val;
end;
function __TSmallBlockTypeState__Wrapper.getInternalBlockSize : Cardinal;
begin
result := TSmallBlockTypeState(GetRecordPtr^).InternalBlockSize;
end;
procedure __TSmallBlockTypeState__Wrapper.setUseableBlockSize(const val : Cardinal);
begin
TSmallBlockTypeState(GetRecordPtr^).UseableBlockSize := val;
end;
function __TSmallBlockTypeState__Wrapper.getUseableBlockSize : Cardinal;
begin
result := TSmallBlockTypeState(GetRecordPtr^).UseableBlockSize;
end;
procedure __TSmallBlockTypeState__Wrapper.setAllocatedBlockCount(const val : Cardinal);
begin
TSmallBlockTypeState(GetRecordPtr^).AllocatedBlockCount := val;
end;
function __TSmallBlockTypeState__Wrapper.getAllocatedBlockCount : Cardinal;
begin
result := TSmallBlockTypeState(GetRecordPtr^).AllocatedBlockCount;
end;
procedure __TSmallBlockTypeState__Wrapper.setReservedAddressSpace(const val : Cardinal);
begin
TSmallBlockTypeState(GetRecordPtr^).ReservedAddressSpace := val;
end;
function __TSmallBlockTypeState__Wrapper.getReservedAddressSpace : Cardinal;
begin
result := TSmallBlockTypeState(GetRecordPtr^).ReservedAddressSpace;
end;
function __TTextRec__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTextRec__Wrapper.setHandle(const val : Integer);
begin
TTextRec(GetRecordPtr^).Handle := val;
end;
function __TTextRec__Wrapper.getHandle : Integer;
begin
result := TTextRec(GetRecordPtr^).Handle;
end;
procedure __TTextRec__Wrapper.setMode(const val : Word);
begin
TTextRec(GetRecordPtr^).Mode := val;
end;
function __TTextRec__Wrapper.getMode : Word;
begin
result := TTextRec(GetRecordPtr^).Mode;
end;
procedure __TTextRec__Wrapper.setFlags(const val : Word);
begin
TTextRec(GetRecordPtr^).Flags := val;
end;
function __TTextRec__Wrapper.getFlags : Word;
begin
result := TTextRec(GetRecordPtr^).Flags;
end;
procedure __TTextRec__Wrapper.setBufSize(const val : Cardinal);
begin
TTextRec(GetRecordPtr^).BufSize := val;
end;
function __TTextRec__Wrapper.getBufSize : Cardinal;
begin
result := TTextRec(GetRecordPtr^).BufSize;
end;
procedure __TTextRec__Wrapper.setBufPos(const val : Cardinal);
begin
TTextRec(GetRecordPtr^).BufPos := val;
end;
function __TTextRec__Wrapper.getBufPos : Cardinal;
begin
result := TTextRec(GetRecordPtr^).BufPos;
end;
procedure __TTextRec__Wrapper.setBufEnd(const val : Cardinal);
begin
TTextRec(GetRecordPtr^).BufEnd := val;
end;
function __TTextRec__Wrapper.getBufEnd : Cardinal;
begin
result := TTextRec(GetRecordPtr^).BufEnd;
end;
function __TVarArray__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TVarArray__Wrapper.setDimCount(const val : Word);
begin
TVarArray(GetRecordPtr^).DimCount := val;
end;
function __TVarArray__Wrapper.getDimCount : Word;
begin
result := TVarArray(GetRecordPtr^).DimCount;
end;
procedure __TVarArray__Wrapper.setFlags(const val : Word);
begin
TVarArray(GetRecordPtr^).Flags := val;
end;
function __TVarArray__Wrapper.getFlags : Word;
begin
result := TVarArray(GetRecordPtr^).Flags;
end;
procedure __TVarArray__Wrapper.setElementSize(const val : Integer);
begin
TVarArray(GetRecordPtr^).ElementSize := val;
end;
function __TVarArray__Wrapper.getElementSize : Integer;
begin
result := TVarArray(GetRecordPtr^).ElementSize;
end;
procedure __TVarArray__Wrapper.setLockCount(const val : Integer);
begin
TVarArray(GetRecordPtr^).LockCount := val;
end;
function __TVarArray__Wrapper.getLockCount : Integer;
begin
result := TVarArray(GetRecordPtr^).LockCount;
end;
function __TVarArrayBound__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TVarArrayBound__Wrapper.setElementCount(const val : Integer);
begin
TVarArrayBound(GetRecordPtr^).ElementCount := val;
end;
function __TVarArrayBound__Wrapper.getElementCount : Integer;
begin
result := TVarArrayBound(GetRecordPtr^).ElementCount;
end;
procedure __TVarArrayBound__Wrapper.setLowBound(const val : Integer);
begin
TVarArrayBound(GetRecordPtr^).LowBound := val;
end;
function __TVarArrayBound__Wrapper.getLowBound : Integer;
begin
result := TVarArrayBound(GetRecordPtr^).LowBound;
end;
function __TVarData__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TVarData__Wrapper.setVType(const val : TVarType);
begin
TVarData(GetRecordPtr^).VType := val;
end;
function __TVarData__Wrapper.getVType : TVarType;
begin
result := TVarData(GetRecordPtr^).VType;
end;
procedure __TVarData__Wrapper.setReserved1(const val : Word);
begin
TVarData(GetRecordPtr^).Reserved1 := val;
end;
function __TVarData__Wrapper.getReserved1 : Word;
begin
result := TVarData(GetRecordPtr^).Reserved1;
end;
procedure __TVarData__Wrapper.setReserved2(const val : Word);
begin
TVarData(GetRecordPtr^).Reserved2 := val;
end;
function __TVarData__Wrapper.getReserved2 : Word;
begin
result := TVarData(GetRecordPtr^).Reserved2;
end;
procedure __TVarData__Wrapper.setReserved3(const val : Word);
begin
TVarData(GetRecordPtr^).Reserved3 := val;
end;
function __TVarData__Wrapper.getReserved3 : Word;
begin
result := TVarData(GetRecordPtr^).Reserved3;
end;
procedure __TVarData__Wrapper.setVSmallInt(const val : SmallInt);
begin
TVarData(GetRecordPtr^).VSmallInt := val;
end;
function __TVarData__Wrapper.getVSmallInt : SmallInt;
begin
result := TVarData(GetRecordPtr^).VSmallInt;
end;
procedure __TVarData__Wrapper.setVInteger(const val : Integer);
begin
TVarData(GetRecordPtr^).VInteger := val;
end;
function __TVarData__Wrapper.getVInteger : Integer;
begin
result := TVarData(GetRecordPtr^).VInteger;
end;
procedure __TVarData__Wrapper.setVSingle(const val : Single);
begin
TVarData(GetRecordPtr^).VSingle := val;
end;
function __TVarData__Wrapper.getVSingle : Single;
begin
result := TVarData(GetRecordPtr^).VSingle;
end;
procedure __TVarData__Wrapper.setVDouble(const val : Double);
begin
TVarData(GetRecordPtr^).VDouble := val;
end;
function __TVarData__Wrapper.getVDouble : Double;
begin
result := TVarData(GetRecordPtr^).VDouble;
end;
procedure __TVarData__Wrapper.setVCurrency(const val : Currency);
begin
TVarData(GetRecordPtr^).VCurrency := val;
end;
function __TVarData__Wrapper.getVCurrency : Currency;
begin
result := TVarData(GetRecordPtr^).VCurrency;
end;
procedure __TVarData__Wrapper.setVBoolean(const val : WordBool);
begin
TVarData(GetRecordPtr^).VBoolean := val;
end;
function __TVarData__Wrapper.getVBoolean : WordBool;
begin
result := TVarData(GetRecordPtr^).VBoolean;
end;
procedure __TVarData__Wrapper.setVShortInt(const val : Shortint);
begin
TVarData(GetRecordPtr^).VShortInt := val;
end;
function __TVarData__Wrapper.getVShortInt : Shortint;
begin
result := TVarData(GetRecordPtr^).VShortInt;
end;
procedure __TVarData__Wrapper.setVByte(const val : Byte);
begin
TVarData(GetRecordPtr^).VByte := val;
end;
function __TVarData__Wrapper.getVByte : Byte;
begin
result := TVarData(GetRecordPtr^).VByte;
end;
procedure __TVarData__Wrapper.setVWord(const val : Word);
begin
TVarData(GetRecordPtr^).VWord := val;
end;
function __TVarData__Wrapper.getVWord : Word;
begin
result := TVarData(GetRecordPtr^).VWord;
end;
procedure __TVarData__Wrapper.setVLongWord(const val : LongWord);
begin
TVarData(GetRecordPtr^).VLongWord := val;
end;
function __TVarData__Wrapper.getVLongWord : LongWord;
begin
result := TVarData(GetRecordPtr^).VLongWord;
end;
function __TVariantManager__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TVarRec__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TVarRec__Wrapper.setVInteger(const val : Integer);
begin
TVarRec(GetRecordPtr^).VInteger := val;
end;
function __TVarRec__Wrapper.getVInteger : Integer;
begin
result := TVarRec(GetRecordPtr^).VInteger;
end;
procedure __TVarRec__Wrapper.setVType(const val : Byte);
begin
TVarRec(GetRecordPtr^).VType := val;
end;
function __TVarRec__Wrapper.getVType : Byte;
begin
result := TVarRec(GetRecordPtr^).VType;
end;
procedure __TVarRec__Wrapper.setVBoolean(const val : Boolean);
begin
TVarRec(GetRecordPtr^).VBoolean := val;
end;
function __TVarRec__Wrapper.getVBoolean : Boolean;
begin
result := TVarRec(GetRecordPtr^).VBoolean;
end;
procedure __TVarRec__Wrapper.setVChar(const val : Char);
begin
TVarRec(GetRecordPtr^).VChar := ansiChar(val);
end;
function __TVarRec__Wrapper.getVChar : Char;
begin
result := Char(TVarRec(GetRecordPtr^).VChar);
end;
procedure __TVarRec__Wrapper.setVObject(const val : TObject);
begin
TVarRec(GetRecordPtr^).VObject := val;
end;
function __TVarRec__Wrapper.getVObject : TObject;
begin
result := TVarRec(GetRecordPtr^).VObject;
end;
procedure __TVarRec__Wrapper.setVWideChar(const val : WideChar);
begin
TVarRec(GetRecordPtr^).VWideChar := val;
end;
function __TVarRec__Wrapper.getVWideChar : WideChar;
begin
result := TVarRec(GetRecordPtr^).VWideChar;
end;
function _TCallDesc_ : IDispatch;
begin
  result := __TCallDesc__Wrapper.Create;
end;
function _TCVModInfo_ : IDispatch;
begin
  result := __TCVModInfo__Wrapper.Create;
end;
function _TDispatchMessage_ : IDispatch;
begin
  result := __TDispatchMessage__Wrapper.Create;
end;
function _TDispDesc_ : IDispatch;
begin
  result := __TDispDesc__Wrapper.Create;
end;
function _TDynArrayTypeInfo_ : IDispatch;
begin
  result := __TDynArrayTypeInfo__Wrapper.Create;
end;
function _TFileRec_ : IDispatch;
begin
  result := __TFileRec__Wrapper.Create;
end;
function _TGUID_ : IDispatch;
begin
  result := __TGUID__Wrapper.Create;
end;
function _THeapStatus_ : IDispatch;
begin
  result := __THeapStatus__Wrapper.Create;
end;
function _TInitContext_ : IDispatch;
begin
  result := __TInitContext__Wrapper.Create;
end;
function _TInterfaceEntry_ : IDispatch;
begin
  result := __TInterfaceEntry__Wrapper.Create;
end;
function _TInterfaceTable_ : IDispatch;
begin
  result := __TInterfaceTable__Wrapper.Create;
end;
function _TLibModule_ : IDispatch;
begin
  result := __TLibModule__Wrapper.Create;
end;
function _TMemoryManager_ : IDispatch;
begin
  result := __TMemoryManager__Wrapper.Create;
end;
function _TMemoryManagerEx_ : IDispatch;
begin
  result := __TMemoryManagerEx__Wrapper.Create;
end;
function _TMemoryManagerState_ : IDispatch;
begin
  result := __TMemoryManagerState__Wrapper.Create;
end;
function _TMethod_ : IDispatch;
begin
  result := __TMethod__Wrapper.Create;
end;
function _TModuleUnloadRec_ : IDispatch;
begin
  result := __TModuleUnloadRec__Wrapper.Create;
end;
function _TResStringRec_ : IDispatch;
begin
  result := __TResStringRec__Wrapper.Create;
end;
function _TSmallBlockTypeState_ : IDispatch;
begin
  result := __TSmallBlockTypeState__Wrapper.Create;
end;
function _TTextRec_ : IDispatch;
begin
  result := __TTextRec__Wrapper.Create;
end;
function _TVarArray_ : IDispatch;
begin
  result := __TVarArray__Wrapper.Create;
end;
function _TVarArrayBound_ : IDispatch;
begin
  result := __TVarArrayBound__Wrapper.Create;
end;
function _TVarData_ : IDispatch;
begin
  result := __TVarData__Wrapper.Create;
end;
function _TVariantManager_ : IDispatch;
begin
  result := __TVariantManager__Wrapper.Create;
end;
function _TVarRec_ : IDispatch;
begin
  result := __TVarRec__Wrapper.Create;
end;
procedure ____GetMemoryManager__Wrapper(const p0 : IDispatch);
var
__p0 : ^TMemoryManager;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
GetMemoryManager(__p0^);
end;

procedure ____SetMemoryManager__Wrapper(const p0 : IDispatch);
var
__p0 : ^TMemoryManager;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
SetMemoryManager(__p0^);
end;

function ____GetHeapStatus__Wrapper: IDispatch;
var
__result : THeapStatus;
__wrapper : __THeapStatus__Wrapper;
begin
__result := GetHeapStatus;
__wrapper := __THeapStatus__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

procedure ____GetMemoryManagerState__Wrapper(const p0 : IDispatch);
var
__p0 : ^TMemoryManagerState;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
GetMemoryManagerState(__p0^);
end;

procedure ____GetVariantManager__Wrapper(const p0 : IDispatch);
var
__p0 : ^TVariantManager;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
GetVariantManager(__p0^);
end;

procedure ____SetVariantManager__Wrapper(const p0 : IDispatch);
var
__p0 : ^TVariantManager;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
SetVariantManager(__p0^);
end;

function __TContainedObject__QueryInterface__Wrapper(__Instance : TContainedObject;
const p0 : IDispatch;
var p1): HRESULT;
var
__p0 : ^TGUID;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := __TContainedObject__(__Instance).QueryInterface(__p0^,p1);
end;

function __TObject__GetInterface__Wrapper(__Instance : TObject;
const p0 : IDispatch;
var p1): Boolean;
var
__p0 : ^TGUID;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := TObject(__Instance).GetInterface(__p0^,p1);
end;


type __TCallDesc__Wrapper__ = class(__TCallDesc__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCallDesc__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCallDescToVariant(var R : TCallDesc) : OleVariant;
var
__rw : __TCallDesc__Wrapper__;
begin
__rw := __TCallDesc__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCallDesc(const V : OleVariant) : TCallDesc;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCallDesc((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCVModInfo__Wrapper__ = class(__TCVModInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCVModInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCVModInfoToVariant(var R : TCVModInfo) : OleVariant;
var
__rw : __TCVModInfo__Wrapper__;
begin
__rw := __TCVModInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCVModInfo(const V : OleVariant) : TCVModInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCVModInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDispatchMessage__Wrapper__ = class(__TDispatchMessage__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDispatchMessage__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDispatchMessageToVariant(var R : TDispatchMessage) : OleVariant;
var
__rw : __TDispatchMessage__Wrapper__;
begin
__rw := __TDispatchMessage__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDispatchMessage(const V : OleVariant) : TDispatchMessage;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDispatchMessage((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDispDesc__Wrapper__ = class(__TDispDesc__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDispDesc__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDispDescToVariant(var R : TDispDesc) : OleVariant;
var
__rw : __TDispDesc__Wrapper__;
begin
__rw := __TDispDesc__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDispDesc(const V : OleVariant) : TDispDesc;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDispDesc((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDynArrayTypeInfo__Wrapper__ = class(__TDynArrayTypeInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDynArrayTypeInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDynArrayTypeInfoToVariant(var R : TDynArrayTypeInfo) : OleVariant;
var
__rw : __TDynArrayTypeInfo__Wrapper__;
begin
__rw := __TDynArrayTypeInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDynArrayTypeInfo(const V : OleVariant) : TDynArrayTypeInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDynArrayTypeInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TFileRec__Wrapper__ = class(__TFileRec__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TFileRec__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTFileRecToVariant(var R : TFileRec) : OleVariant;
var
__rw : __TFileRec__Wrapper__;
begin
__rw := __TFileRec__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTFileRec(const V : OleVariant) : TFileRec;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TFileRec((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TGUID__Wrapper__ = class(__TGUID__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TGUID__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTGUIDToVariant(var R : TGUID) : OleVariant;
var
__rw : __TGUID__Wrapper__;
begin
__rw := __TGUID__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTGUID(const V : OleVariant) : TGUID;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TGUID((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __THeapStatus__Wrapper__ = class(__THeapStatus__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __THeapStatus__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTHeapStatusToVariant(var R : THeapStatus) : OleVariant;
var
__rw : __THeapStatus__Wrapper__;
begin
__rw := __THeapStatus__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTHeapStatus(const V : OleVariant) : THeapStatus;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := THeapStatus((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TInitContext__Wrapper__ = class(__TInitContext__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TInitContext__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTInitContextToVariant(var R : TInitContext) : OleVariant;
var
__rw : __TInitContext__Wrapper__;
begin
__rw := __TInitContext__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTInitContext(const V : OleVariant) : TInitContext;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TInitContext((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TInterfaceEntry__Wrapper__ = class(__TInterfaceEntry__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TInterfaceEntry__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTInterfaceEntryToVariant(var R : TInterfaceEntry) : OleVariant;
var
__rw : __TInterfaceEntry__Wrapper__;
begin
__rw := __TInterfaceEntry__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTInterfaceEntry(const V : OleVariant) : TInterfaceEntry;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TInterfaceEntry((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TInterfaceTable__Wrapper__ = class(__TInterfaceTable__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TInterfaceTable__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTInterfaceTableToVariant(var R : TInterfaceTable) : OleVariant;
var
__rw : __TInterfaceTable__Wrapper__;
begin
__rw := __TInterfaceTable__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTInterfaceTable(const V : OleVariant) : TInterfaceTable;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TInterfaceTable((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TLibModule__Wrapper__ = class(__TLibModule__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TLibModule__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTLibModuleToVariant(var R : TLibModule) : OleVariant;
var
__rw : __TLibModule__Wrapper__;
begin
__rw := __TLibModule__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTLibModule(const V : OleVariant) : TLibModule;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TLibModule((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMemoryManager__Wrapper__ = class(__TMemoryManager__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMemoryManager__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMemoryManagerToVariant(var R : TMemoryManager) : OleVariant;
var
__rw : __TMemoryManager__Wrapper__;
begin
__rw := __TMemoryManager__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMemoryManager(const V : OleVariant) : TMemoryManager;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMemoryManager((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMemoryManagerEx__Wrapper__ = class(__TMemoryManagerEx__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMemoryManagerEx__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMemoryManagerExToVariant(var R : TMemoryManagerEx) : OleVariant;
var
__rw : __TMemoryManagerEx__Wrapper__;
begin
__rw := __TMemoryManagerEx__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMemoryManagerEx(const V : OleVariant) : TMemoryManagerEx;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMemoryManagerEx((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMemoryManagerState__Wrapper__ = class(__TMemoryManagerState__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMemoryManagerState__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMemoryManagerStateToVariant(var R : TMemoryManagerState) : OleVariant;
var
__rw : __TMemoryManagerState__Wrapper__;
begin
__rw := __TMemoryManagerState__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMemoryManagerState(const V : OleVariant) : TMemoryManagerState;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMemoryManagerState((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMethod__Wrapper__ = class(__TMethod__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMethod__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMethodToVariant(var R : TMethod) : OleVariant;
var
__rw : __TMethod__Wrapper__;
begin
__rw := __TMethod__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMethod(const V : OleVariant) : TMethod;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMethod((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TModuleUnloadRec__Wrapper__ = class(__TModuleUnloadRec__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TModuleUnloadRec__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTModuleUnloadRecToVariant(var R : TModuleUnloadRec) : OleVariant;
var
__rw : __TModuleUnloadRec__Wrapper__;
begin
__rw := __TModuleUnloadRec__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTModuleUnloadRec(const V : OleVariant) : TModuleUnloadRec;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TModuleUnloadRec((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TResStringRec__Wrapper__ = class(__TResStringRec__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TResStringRec__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTResStringRecToVariant(var R : TResStringRec) : OleVariant;
var
__rw : __TResStringRec__Wrapper__;
begin
__rw := __TResStringRec__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTResStringRec(const V : OleVariant) : TResStringRec;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TResStringRec((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSmallBlockTypeState__Wrapper__ = class(__TSmallBlockTypeState__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSmallBlockTypeState__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSmallBlockTypeStateToVariant(var R : TSmallBlockTypeState) : OleVariant;
var
__rw : __TSmallBlockTypeState__Wrapper__;
begin
__rw := __TSmallBlockTypeState__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSmallBlockTypeState(const V : OleVariant) : TSmallBlockTypeState;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSmallBlockTypeState((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTextRec__Wrapper__ = class(__TTextRec__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTextRec__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTextRecToVariant(var R : TTextRec) : OleVariant;
var
__rw : __TTextRec__Wrapper__;
begin
__rw := __TTextRec__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTextRec(const V : OleVariant) : TTextRec;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTextRec((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TVarArray__Wrapper__ = class(__TVarArray__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TVarArray__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTVarArrayToVariant(var R : TVarArray) : OleVariant;
var
__rw : __TVarArray__Wrapper__;
begin
__rw := __TVarArray__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTVarArray(const V : OleVariant) : TVarArray;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TVarArray((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TVarArrayBound__Wrapper__ = class(__TVarArrayBound__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TVarArrayBound__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTVarArrayBoundToVariant(var R : TVarArrayBound) : OleVariant;
var
__rw : __TVarArrayBound__Wrapper__;
begin
__rw := __TVarArrayBound__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTVarArrayBound(const V : OleVariant) : TVarArrayBound;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TVarArrayBound((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TVarData__Wrapper__ = class(__TVarData__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TVarData__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTVarDataToVariant(var R : TVarData) : OleVariant;
var
__rw : __TVarData__Wrapper__;
begin
__rw := __TVarData__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTVarData(const V : OleVariant) : TVarData;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TVarData((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TVariantManager__Wrapper__ = class(__TVariantManager__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TVariantManager__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTVariantManagerToVariant(var R : TVariantManager) : OleVariant;
var
__rw : __TVariantManager__Wrapper__;
begin
__rw := __TVariantManager__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTVariantManager(const V : OleVariant) : TVariantManager;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TVariantManager((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TVarRec__Wrapper__ = class(__TVarRec__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TVarRec__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTVarRecToVariant(var R : TVarRec) : OleVariant;
var
__rw : __TVarRec__Wrapper__;
begin
__rw := __TVarRec__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTVarRec(const V : OleVariant) : TVarRec;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TVarRec((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTInterfacedObject__RefCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TInterfacedObject(Instance).RefCount;
end;

procedure __RegisterProps;
begin
RegisterProperty(TInterfacedObject,'RefCount',__DC__GetTInterfacedObject__RefCount,nil);
end;

function __DC__GetSystem__DispCallByIDProc(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(System.DispCallByIDProc);
end;

procedure __DC__SetSystem__DispCallByIDProc(Instance : TObject; Params : PVariantArgList);
begin
System.DispCallByIDProc:=VarToPointer(OleVariant(Params^[0]));
end;

function __DC__GetSystem__ExceptProc(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(System.ExceptProc);
end;

procedure __DC__SetSystem__ExceptProc(Instance : TObject; Params : PVariantArgList);
begin
System.ExceptProc:=VarToPointer(OleVariant(Params^[0]));
end;

function __DC__GetSystem__ExceptClsProc(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(System.ExceptClsProc);
end;

procedure __DC__SetSystem__ExceptClsProc(Instance : TObject; Params : PVariantArgList);
begin
System.ExceptClsProc:=VarToPointer(OleVariant(Params^[0]));
end;

function __DC__GetSystem__ExceptObjProc(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(System.ExceptObjProc);
end;

procedure __DC__SetSystem__ExceptObjProc(Instance : TObject; Params : PVariantArgList);
begin
System.ExceptObjProc:=VarToPointer(OleVariant(Params^[0]));
end;

function __DC__GetSystem__RaiseExceptionProc(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(System.RaiseExceptionProc);
end;

procedure __DC__SetSystem__RaiseExceptionProc(Instance : TObject; Params : PVariantArgList);
begin
System.RaiseExceptionProc:=VarToPointer(OleVariant(Params^[0]));
end;

function __DC__GetSystem__RTLUnwindProc(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(System.RTLUnwindProc);
end;

procedure __DC__SetSystem__RTLUnwindProc(Instance : TObject; Params : PVariantArgList);
begin
System.RTLUnwindProc:=VarToPointer(OleVariant(Params^[0]));
end;

function __DC__GetSystem__HPrevInst(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := System.HPrevInst;
end;

procedure __DC__SetSystem__HPrevInst(Instance : TObject; Params : PVariantArgList);
begin
System.HPrevInst:=OleVariant(Params^[0]);
end;

function __DC__GetSystem__MainInstance(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := System.MainInstance;
end;

procedure __DC__SetSystem__MainInstance(Instance : TObject; Params : PVariantArgList);
begin
System.MainInstance:=OleVariant(Params^[0]);
end;

function __DC__GetSystem__MainThreadID(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := System.MainThreadID;
end;

procedure __DC__SetSystem__MainThreadID(Instance : TObject; Params : PVariantArgList);
begin
System.MainThreadID:=OleVariant(Params^[0]);
end;

function __DC__GetSystem__IsLibrary(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := System.IsLibrary;
end;

procedure __DC__SetSystem__IsLibrary(Instance : TObject; Params : PVariantArgList);
begin
System.IsLibrary:=OleVariant(Params^[0]);
end;

function __DC__GetSystem__CmdShow(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := System.CmdShow;
end;

procedure __DC__SetSystem__CmdShow(Instance : TObject; Params : PVariantArgList);
begin
System.CmdShow:=OleVariant(Params^[0]);
end;

function __DC__GetSystem__CmdLine(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := String(System.CmdLine);
end;

procedure __DC__SetSystem__CmdLine(Instance : TObject; Params : PVariantArgList);
begin
System.CmdLine:=PChar(String(OleVariant(Params^[0])));
end;

function __DC__GetSystem__InitProc(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(System.InitProc);
end;

procedure __DC__SetSystem__InitProc(Instance : TObject; Params : PVariantArgList);
begin
System.InitProc:=VarToPointer(OleVariant(Params^[0]));
end;

function __DC__GetSystem__ExitCode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := System.ExitCode;
end;

procedure __DC__SetSystem__ExitCode(Instance : TObject; Params : PVariantArgList);
begin
System.ExitCode:=OleVariant(Params^[0]);
end;

function __DC__GetSystem__ExitProc(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(System.ExitProc);
end;

procedure __DC__SetSystem__ExitProc(Instance : TObject; Params : PVariantArgList);
begin
System.ExitProc:=VarToPointer(OleVariant(Params^[0]));
end;

function __DC__GetSystem__ErrorAddr(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(System.ErrorAddr);
end;

procedure __DC__SetSystem__ErrorAddr(Instance : TObject; Params : PVariantArgList);
begin
System.ErrorAddr:=VarToPointer(OleVariant(Params^[0]));
end;

function __DC__GetSystem__RandSeed(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := System.RandSeed;
end;

procedure __DC__SetSystem__RandSeed(Instance : TObject; Params : PVariantArgList);
begin
System.RandSeed:=OleVariant(Params^[0]);
end;

function __DC__GetSystem__IsConsole(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := System.IsConsole;
end;

procedure __DC__SetSystem__IsConsole(Instance : TObject; Params : PVariantArgList);
begin
System.IsConsole:=OleVariant(Params^[0]);
end;

function __DC__GetSystem__IsMultiThread(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := System.IsMultiThread;
end;

procedure __DC__SetSystem__IsMultiThread(Instance : TObject; Params : PVariantArgList);
begin
System.IsMultiThread:=OleVariant(Params^[0]);
end;

function __DC__GetSystem__FileMode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := System.FileMode;
end;

procedure __DC__SetSystem__FileMode(Instance : TObject; Params : PVariantArgList);
begin
System.FileMode:=OleVariant(Params^[0]);
end;

function __DC__GetSystem__Test8086(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := System.Test8086;
end;

procedure __DC__SetSystem__Test8086(Instance : TObject; Params : PVariantArgList);
begin
System.Test8086:=OleVariant(Params^[0]);
end;

function __DC__GetSystem__Test8087(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := System.Test8087;
end;

procedure __DC__SetSystem__Test8087(Instance : TObject; Params : PVariantArgList);
begin
System.Test8087:=OleVariant(Params^[0]);
end;

function __DC__GetSystem__TestFDIV(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := System.TestFDIV;
end;

procedure __DC__SetSystem__TestFDIV(Instance : TObject; Params : PVariantArgList);
begin
System.TestFDIV:=OleVariant(Params^[0]);
end;

function __DC__GetSystem__Default8087CW(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := System.Default8087CW;
end;

procedure __DC__SetSystem__Default8087CW(Instance : TObject; Params : PVariantArgList);
begin
System.Default8087CW:=OleVariant(Params^[0]);
end;

function __DC__GetSystem__HeapAllocFlags(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := System.HeapAllocFlags;
end;

procedure __DC__SetSystem__HeapAllocFlags(Instance : TObject; Params : PVariantArgList);
begin
System.HeapAllocFlags:=OleVariant(Params^[0]);
end;

function __DC__GetSystem__DebugHook(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := System.DebugHook;
end;

procedure __DC__SetSystem__DebugHook(Instance : TObject; Params : PVariantArgList);
begin
System.DebugHook:=OleVariant(Params^[0]);
end;

function __DC__GetSystem__JITEnable(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := System.JITEnable;
end;

procedure __DC__SetSystem__JITEnable(Instance : TObject; Params : PVariantArgList);
begin
System.JITEnable:=OleVariant(Params^[0]);
end;

function __DC__GetSystem__NoErrMsg(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := System.NoErrMsg;
end;

procedure __DC__SetSystem__NoErrMsg(Instance : TObject; Params : PVariantArgList);
begin
System.NoErrMsg:=OleVariant(Params^[0]);
end;

function __DC__GetSystem__DefaultTextLineBreakStyle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := System.DefaultTextLineBreakStyle;
end;

procedure __DC__SetSystem__DefaultTextLineBreakStyle(Instance : TObject; Params : PVariantArgList);
begin
System.DefaultTextLineBreakStyle:=OleVariant(Params^[0]);
end;

function __DC__GetSystem__AllocMemCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := System.AllocMemCount;
end;

procedure __DC__SetSystem__AllocMemCount(Instance : TObject; Params : PVariantArgList);
begin
System.AllocMemCount:=OleVariant(Params^[0]);
end;

function __DC__GetSystem__AllocMemSize(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := System.AllocMemSize;
end;

procedure __DC__SetSystem__AllocMemSize(Instance : TObject; Params : PVariantArgList);
begin
System.AllocMemSize:=OleVariant(Params^[0]);
end;

function __DC__GetSystem__ReportMemoryLeaksOnShutdown(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := System.ReportMemoryLeaksOnShutdown;
end;

procedure __DC__SetSystem__ReportMemoryLeaksOnShutdown(Instance : TObject; Params : PVariantArgList);
begin
System.ReportMemoryLeaksOnShutdown:=OleVariant(Params^[0]);
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('DispCallByIDProc',__DC__GetSystem__DispCallByIDProc,__DC__SetSystem__DispCallByIDProc));
__RegisteredVars.Add(RegisterVar('ExceptProc',__DC__GetSystem__ExceptProc,__DC__SetSystem__ExceptProc));
__RegisteredVars.Add(RegisterVar('ExceptClsProc',__DC__GetSystem__ExceptClsProc,__DC__SetSystem__ExceptClsProc));
__RegisteredVars.Add(RegisterVar('ExceptObjProc',__DC__GetSystem__ExceptObjProc,__DC__SetSystem__ExceptObjProc));
__RegisteredVars.Add(RegisterVar('RaiseExceptionProc',__DC__GetSystem__RaiseExceptionProc,__DC__SetSystem__RaiseExceptionProc));
__RegisteredVars.Add(RegisterVar('RTLUnwindProc',__DC__GetSystem__RTLUnwindProc,__DC__SetSystem__RTLUnwindProc));
__RegisteredVars.Add(RegisterVar('HPrevInst',__DC__GetSystem__HPrevInst,__DC__SetSystem__HPrevInst));
__RegisteredVars.Add(RegisterVar('MainInstance',__DC__GetSystem__MainInstance,__DC__SetSystem__MainInstance));
__RegisteredVars.Add(RegisterVar('MainThreadID',__DC__GetSystem__MainThreadID,__DC__SetSystem__MainThreadID));
__RegisteredVars.Add(RegisterVar('IsLibrary',__DC__GetSystem__IsLibrary,__DC__SetSystem__IsLibrary));
__RegisteredVars.Add(RegisterVar('CmdShow',__DC__GetSystem__CmdShow,__DC__SetSystem__CmdShow));
__RegisteredVars.Add(RegisterVar('CmdLine',__DC__GetSystem__CmdLine,__DC__SetSystem__CmdLine));
__RegisteredVars.Add(RegisterVar('InitProc',__DC__GetSystem__InitProc,__DC__SetSystem__InitProc));
__RegisteredVars.Add(RegisterVar('ExitCode',__DC__GetSystem__ExitCode,__DC__SetSystem__ExitCode));
__RegisteredVars.Add(RegisterVar('ExitProc',__DC__GetSystem__ExitProc,__DC__SetSystem__ExitProc));
__RegisteredVars.Add(RegisterVar('ErrorAddr',__DC__GetSystem__ErrorAddr,__DC__SetSystem__ErrorAddr));
__RegisteredVars.Add(RegisterVar('RandSeed',__DC__GetSystem__RandSeed,__DC__SetSystem__RandSeed));
__RegisteredVars.Add(RegisterVar('IsConsole',__DC__GetSystem__IsConsole,__DC__SetSystem__IsConsole));
__RegisteredVars.Add(RegisterVar('IsMultiThread',__DC__GetSystem__IsMultiThread,__DC__SetSystem__IsMultiThread));
__RegisteredVars.Add(RegisterVar('FileMode',__DC__GetSystem__FileMode,__DC__SetSystem__FileMode));
__RegisteredVars.Add(RegisterVar('Test8086',__DC__GetSystem__Test8086,__DC__SetSystem__Test8086));
__RegisteredVars.Add(RegisterVar('Test8087',__DC__GetSystem__Test8087,__DC__SetSystem__Test8087));
__RegisteredVars.Add(RegisterVar('TestFDIV',__DC__GetSystem__TestFDIV,__DC__SetSystem__TestFDIV));
__RegisteredVars.Add(RegisterVar('Default8087CW',__DC__GetSystem__Default8087CW,__DC__SetSystem__Default8087CW));
__RegisteredVars.Add(RegisterVar('HeapAllocFlags',__DC__GetSystem__HeapAllocFlags,__DC__SetSystem__HeapAllocFlags));
__RegisteredVars.Add(RegisterVar('DebugHook',__DC__GetSystem__DebugHook,__DC__SetSystem__DebugHook));
__RegisteredVars.Add(RegisterVar('JITEnable',__DC__GetSystem__JITEnable,__DC__SetSystem__JITEnable));
__RegisteredVars.Add(RegisterVar('NoErrMsg',__DC__GetSystem__NoErrMsg,__DC__SetSystem__NoErrMsg));
__RegisteredVars.Add(RegisterVar('DefaultTextLineBreakStyle',__DC__GetSystem__DefaultTextLineBreakStyle,__DC__SetSystem__DefaultTextLineBreakStyle));
__RegisteredVars.Add(RegisterVar('AllocMemCount',__DC__GetSystem__AllocMemCount,__DC__SetSystem__AllocMemCount));
__RegisteredVars.Add(RegisterVar('AllocMemSize',__DC__GetSystem__AllocMemSize,__DC__SetSystem__AllocMemSize));
__RegisteredVars.Add(RegisterVar('ReportMemoryLeaksOnShutdown',__DC__GetSystem__ReportMemoryLeaksOnShutdown,__DC__SetSystem__ReportMemoryLeaksOnShutdown));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..134] of string = (
'RTLVersion'
,'varEmpty'
,'varNull'
,'varSmallint'
,'varInteger'
,'varSingle'
,'varDouble'
,'varCurrency'
,'varDate'
,'varOleStr'
,'varDispatch'
,'varError'
,'varBoolean'
,'varVariant'
,'varUnknown'
,'varShortInt'
,'varByte'
,'varWord'
,'varLongWord'
,'varInt64'
,'varStrArg'
,'varString'
,'varAny'
,'varTypeMask'
,'varArray'
,'varByRef'
,'vtInteger'
,'vtBoolean'
,'vtChar'
,'vtExtended'
,'vtString'
,'vtPointer'
,'vtPChar'
,'vtObject'
,'vtClass'
,'vtWideChar'
,'vtPWideChar'
,'vtAnsiString'
,'vtCurrency'
,'vtVariant'
,'vtInterface'
,'vtWideString'
,'vtInt64'
,'vmtSelfPtr'
,'vmtIntfTable'
,'vmtAutoTable'
,'vmtInitTable'
,'vmtTypeInfo'
,'vmtFieldTable'
,'vmtMethodTable'
,'vmtDynamicTable'
,'vmtClassName'
,'vmtInstanceSize'
,'vmtParent'
,'vmtSafeCallException'
,'vmtAfterConstruction'
,'vmtBeforeDestruction'
,'vmtDispatch'
,'vmtDefaultHandler'
,'vmtNewInstance'
,'vmtFreeInstance'
,'vmtDestroy'
,'vmtQueryInterface'
,'vmtAddRef'
,'vmtRelease'
,'vmtCreateObject'
,'S_OK'
,'S_FALSE'
,'E_NOINTERFACE'
,'E_UNEXPECTED'
,'E_NOTIMPL'
,'opAdd'
,'opSubtract'
,'opMultiply'
,'opDivide'
,'opIntDivide'
,'opModulus'
,'opShiftLeft'
,'opShiftRight'
,'opAnd'
,'opOr'
,'opXor'
,'opCompare'
,'opNegate'
,'opNot'
,'opCmpEQ'
,'opCmpNE'
,'opCmpLT'
,'opCmpLE'
,'opCmpGT'
,'opCmpGE'
,'NumSmallBlockTypes'
,'csUnallocated'
,'csAllocated'
,'csReserved'
,'csSysAllocated'
,'csSysReserved'
,'mba8Byte'
,'mba16Byte'
,'CPUi386'
,'CPUi486'
,'CPUPentium'
,'tlbsLF'
,'tlbsCRLF'
,'sLineBreak'
,'fmClosed'
,'fmInput'
,'fmOutput'
,'fmInOut'
,'tfCRLF'
,'reNone'
,'reOutOfMemory'
,'reInvalidPtr'
,'reDivByZero'
,'reRangeError'
,'reIntOverflow'
,'reInvalidOp'
,'reZeroDivide'
,'reOverflow'
,'reUnderflow'
,'reInvalidCast'
,'reAccessViolation'
,'rePrivInstruction'
,'reControlBreak'
,'reStackOverflow'
,'reVarTypeCast'
,'reVarInvalidOp'
,'reVarDispatch'
,'reVarArrayCreate'
,'reVarNotArray'
,'reVarArrayBounds'
,'reAssertionFailed'
,'reExternalException'
,'reIntfCastError'
,'reSafeCallError'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,RTLVersion));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,varEmpty));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,varNull));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,varSmallint));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,varInteger));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,varSingle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,varDouble));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,varCurrency));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,varDate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,varOleStr));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,varDispatch));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,varError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,varBoolean));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,varVariant));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,varUnknown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,varShortInt));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,varByte));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,varWord));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,varLongWord));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,varInt64));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,varStrArg));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,varString));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,varAny));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,varTypeMask));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,varArray));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,varByRef));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,vtInteger));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,vtBoolean));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,vtChar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,vtExtended));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,vtString));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,vtPointer));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,vtPChar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,vtObject));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,vtClass));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,vtWideChar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,vtPWideChar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,vtAnsiString));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,vtCurrency));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,vtVariant));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,vtInterface));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,vtWideString));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,vtInt64));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,vmtSelfPtr));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,vmtIntfTable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,vmtAutoTable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,vmtInitTable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,vmtTypeInfo));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,vmtFieldTable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,vmtMethodTable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,vmtDynamicTable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,vmtClassName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,vmtInstanceSize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,vmtParent));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,vmtSafeCallException));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,vmtAfterConstruction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,vmtBeforeDestruction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,vmtDispatch));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,vmtDefaultHandler));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,vmtNewInstance));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,vmtFreeInstance));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,vmtDestroy));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,vmtQueryInterface));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,vmtAddRef));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,vmtRelease));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[65] ,vmtCreateObject));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[66] ,S_OK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[67] ,S_FALSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[68] ,E_NOINTERFACE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[69] ,E_UNEXPECTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[70] ,E_NOTIMPL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[71] ,opAdd));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[72] ,opSubtract));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[73] ,opMultiply));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[74] ,opDivide));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[75] ,opIntDivide));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[76] ,opModulus));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[77] ,opShiftLeft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[78] ,opShiftRight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[79] ,opAnd));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[80] ,opOr));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[81] ,opXor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[82] ,opCompare));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[83] ,opNegate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[84] ,opNot));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[85] ,opCmpEQ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[86] ,opCmpNE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[87] ,opCmpLT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[88] ,opCmpLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[89] ,opCmpGT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[90] ,opCmpGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[91] ,NumSmallBlockTypes));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[92] ,csUnallocated));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[93] ,csAllocated));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[94] ,csReserved));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[95] ,csSysAllocated));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[96] ,csSysReserved));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[97] ,mba8Byte));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[98] ,mba16Byte));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[99] ,CPUi386));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[100] ,CPUi486));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[101] ,CPUPentium));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[102] ,tlbsLF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[103] ,tlbsCRLF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[104] ,sLineBreak));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[105] ,fmClosed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[106] ,fmInput));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[107] ,fmOutput));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[108] ,fmInOut));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[109] ,tfCRLF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[110] ,reNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[111] ,reOutOfMemory));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[112] ,reInvalidPtr));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[113] ,reDivByZero));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[114] ,reRangeError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[115] ,reIntOverflow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[116] ,reInvalidOp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[117] ,reZeroDivide));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[118] ,reOverflow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[119] ,reUnderflow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[120] ,reInvalidCast));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[121] ,reAccessViolation));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[122] ,rePrivInstruction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[123] ,reControlBreak));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[124] ,reStackOverflow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[125] ,reVarTypeCast));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[126] ,reVarInvalidOp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[127] ,reVarDispatch));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[128] ,reVarArrayCreate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[129] ,reVarNotArray));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[130] ,reVarArrayBounds));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[131] ,reAssertionFailed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[132] ,reExternalException));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[133] ,reIntfCastError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[134] ,reSafeCallError));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..4] of TClass = (
TAggregatedObject,
TClassHelperBase,
TContainedObject,
TInterfacedObject,
TObject
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..102] of string = (
'TCallDesc'
,'TCVModInfo'
,'TDispatchMessage'
,'TDispDesc'
,'TDynArrayTypeInfo'
,'TFileRec'
,'TGUID'
,'THeapStatus'
,'TInitContext'
,'TInterfaceEntry'
,'TInterfaceTable'
,'TLibModule'
,'TMemoryManager'
,'TMemoryManagerEx'
,'TMemoryManagerState'
,'TMethod'
,'TModuleUnloadRec'
,'TResStringRec'
,'TSmallBlockTypeState'
,'TTextRec'
,'TVarArray'
,'TVarArrayBound'
,'TVarData'
,'TVariantManager'
,'TVarRec'
,'AcquireExceptionObject'
,'ReleaseExceptionObject'
,'RaiseList'
,'SetRaiseList'
,'ExceptObject'
,'ExceptAddr'
,'SetInOutRes'
,'GetMemoryManager'
,'SetMemoryManager'
,'IsMemoryManagerSet'
,'SysGetMem'
,'SysFreeMem'
,'SysReallocMem'
,'SysAllocMem'
,'SysRegisterExpectedMemoryLeak'
,'SysUnregisterExpectedMemoryLeak'
,'AllocMem'
,'GetHeapStatus'
,'GetMemoryManagerState'
,'RegisterExpectedMemoryLeak'
,'UnregisterExpectedMemoryLeak'
,'GetMinimumBlockAlignment'
,'SetMinimumBlockAlignment'
,'AttemptToUseSharedMemoryManager'
,'ShareMemoryManager'
,'EndThread'
,'ChDir'
,'IOResult'
,'MkDir'
,'Move'
,'ParamCount'
,'ParamStr'
,'RmDir'
,'UpCase'
,'Randomize'
,'Random'
,'Set8087CW'
,'Get8087CW'
,'PUCS4Chars'
,'UCS4StringToWideString'
,'UTF8Encode'
,'UTF8Decode'
,'AnsiToUtf8'
,'Utf8ToAnsi'
,'StringToOleStr'
,'GetVariantManager'
,'SetVariantManager'
,'IsVariantManagerSet'
,'FindHInstance'
,'FindResourceHInstance'
,'Int'
,'Frac'
,'Exp'
,'Cos'
,'Sin'
,'Ln'
,'ArcTan'
,'Sqrt'
,'Mark'
,'Release'
,'UniqueString'
,'DynArrayClear'
,'DynArraySetLength'
,'FPower10'
,'TextStart'
,'CompToDouble'
,'DoubleToComp'
,'CompToCurrency'
,'CurrencyToComp'
,'GetMemory'
,'FreeMemory'
,'ReallocMemory'
,'Pos'
,'StringOfChar'
,'Error'
,'GetLastError'
,'SetLastError'
,'SetMultiByteConversionCodePage'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TCallDesc_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_TCVModInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_TDispatchMessage_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(_TDispDesc_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(_TDynArrayTypeInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[5],Addr(_TFileRec_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[6],Addr(_TGUID_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[7],Addr(_THeapStatus_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[8],Addr(_TInitContext_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[9],Addr(_TInterfaceEntry_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[10],Addr(_TInterfaceTable_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[11],Addr(_TLibModule_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[12],Addr(_TMemoryManager_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[13],Addr(_TMemoryManagerEx_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[14],Addr(_TMemoryManagerState_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[15],Addr(_TMethod_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[16],Addr(_TModuleUnloadRec_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[17],Addr(_TResStringRec_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[18],Addr(_TSmallBlockTypeState_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[19],Addr(_TTextRec_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[20],Addr(_TVarArray_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[21],Addr(_TVarArrayBound_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[22],Addr(_TVarData_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[23],Addr(_TVariantManager_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[24],Addr(_TVarRec_)));
RegisterProc(nil,MethodNames[25],mtProc,TypeInfo(_T0),[TypeInfoPointer],Addr(AcquireExceptionObject),cRegister);

RegisterProc(nil,MethodNames[26],mtProc,TypeInfo(_T1),NoParams,Addr(ReleaseExceptionObject),cRegister);

RegisterProc(nil,MethodNames[27],mtProc,TypeInfo(_T2),[TypeInfoPointer],Addr(RaiseList),cRegister);

RegisterProc(nil,MethodNames[28],mtProc,TypeInfo(_T3),[
TypeInfoPointer,TypeInfoPointer],Addr(SetRaiseList),cRegister);

RegisterProc(nil,MethodNames[29],mtProc,TypeInfo(_T4),[TypeInfo(TObject)],Addr(ExceptObject),cRegister);

RegisterProc(nil,MethodNames[30],mtProc,TypeInfo(_T5),[TypeInfoPointer],Addr(ExceptAddr),cRegister);

RegisterProc(nil,MethodNames[31],mtProc,TypeInfo(_T6),[
TypeInfo(Integer)],Addr(SetInOutRes),cRegister);

RegisterProc(nil,MethodNames[32],mtProc,TypeInfo(_T7),[
TypeInfo(IDispatch)],Addr(____GetMemoryManager__Wrapper),cRegister);

RegisterProc(nil,MethodNames[33],mtProc,TypeInfo(_T8),[
TypeInfo(IDispatch)],Addr(____SetMemoryManager__Wrapper),cRegister);

RegisterProc(nil,MethodNames[34],mtProc,TypeInfo(_T9),[TypeInfo(Boolean)],Addr(IsMemoryManagerSet),cRegister);

RegisterProc(nil,MethodNames[35],mtProc,TypeInfo(_T10),[
TypeInfo(Integer),TypeInfoPointer],Addr(SysGetMem),cRegister);

RegisterProc(nil,MethodNames[36],mtProc,TypeInfo(_T11),[
TypeInfoPointer,TypeInfo(Integer)],Addr(SysFreeMem),cRegister);

RegisterProc(nil,MethodNames[37],mtProc,TypeInfo(_T12),[
TypeInfoPointer,
TypeInfo(Integer),TypeInfoPointer],Addr(SysReallocMem),cRegister);

RegisterProc(nil,MethodNames[38],mtProc,TypeInfo(_T13),[
TypeInfo(Cardinal),TypeInfoPointer],Addr(SysAllocMem),cRegister);

RegisterProc(nil,MethodNames[39],mtProc,TypeInfo(_T14),[
TypeInfoPointer,TypeInfo(Boolean)],Addr(SysRegisterExpectedMemoryLeak),cRegister);

RegisterProc(nil,MethodNames[40],mtProc,TypeInfo(_T15),[
TypeInfoPointer,TypeInfo(Boolean)],Addr(SysUnregisterExpectedMemoryLeak),cRegister);

RegisterProc(nil,MethodNames[41],mtProc,TypeInfo(_T16),[
TypeInfo(Cardinal),TypeInfoPointer],Addr(AllocMem),cRegister);

RegisterProc(nil,MethodNames[42],mtProc,TypeInfo(_T17),[TypeInfo(IDispatch)],Addr(____GetHeapStatus__Wrapper),cRegister);

RegisterProc(nil,MethodNames[43],mtProc,TypeInfo(_T18),[
TypeInfo(IDispatch)],Addr(____GetMemoryManagerState__Wrapper),cRegister);

RegisterProc(nil,MethodNames[44],mtProc,TypeInfo(_T20),[
TypeInfoPointer,TypeInfo(Boolean)],Addr(RegisterExpectedMemoryLeak),cRegister);

RegisterProc(nil,MethodNames[45],mtProc,TypeInfo(_T21),[
TypeInfoPointer,TypeInfo(Boolean)],Addr(UnregisterExpectedMemoryLeak),cRegister);

RegisterProc(nil,MethodNames[46],mtProc,TypeInfo(_T22),[TypeInfo(TMinimumBlockAlignment)],Addr(GetMinimumBlockAlignment),cRegister);

RegisterProc(nil,MethodNames[47],mtProc,TypeInfo(_T23),[
TypeInfo(TMinimumBlockAlignment)],Addr(SetMinimumBlockAlignment),cRegister);

RegisterProc(nil,MethodNames[48],mtProc,TypeInfo(_T24),[TypeInfo(Boolean)],Addr(AttemptToUseSharedMemoryManager),cRegister);

RegisterProc(nil,MethodNames[49],mtProc,TypeInfo(_T25),[TypeInfo(Boolean)],Addr(ShareMemoryManager),cRegister);

RegisterProc(nil,MethodNames[50],mtProc,TypeInfo(_T27),[
TypeInfo(Integer)],Addr(EndThread),cRegister);

RegisterProc(nil,MethodNames[51],mtProc,TypeInfo(_T29),[
TypeInfo(string)],Addr(ChDir),cRegister);

RegisterProc(nil,MethodNames[52],mtProc,TypeInfo(_T31),[TypeInfo(Integer)],Addr(IOResult),cRegister);

RegisterProc(nil,MethodNames[53],mtProc,TypeInfo(_T32),[
TypeInfo(string)],Addr(MkDir),cRegister);

RegisterProc(nil,MethodNames[54],mtProc,TypeInfo(_T33),[
TypeInfoUntyped,
TypeInfoUntyped,
TypeInfo(Integer)],Addr(Move),cRegister);

RegisterProc(nil,MethodNames[55],mtProc,TypeInfo(_T34),[TypeInfo(Integer)],Addr(ParamCount),cRegister);

RegisterProc(nil,MethodNames[56],mtProc,TypeInfo(_T35),[
TypeInfo(Integer),TypeInfo(string)],Addr(ParamStr),cRegister);

RegisterProc(nil,MethodNames[57],mtProc,TypeInfo(_T36),[
TypeInfo(string)],Addr(RmDir),cRegister);

RegisterProc(nil,MethodNames[58],mtProc,TypeInfo(_T37),[
TypeInfo(Char),TypeInfo(Char)],Addr(UpCase),cRegister);

RegisterProc(nil,MethodNames[59],mtProc,TypeInfo(_T38),NoParams,Addr(Randomize),cRegister);

RegisterProc(nil,MethodNames[60],mtProc,TypeInfo(_T39),[
TypeInfo(Integer),TypeInfo(Integer)],Addr(Random),cRegister);

RegisterProc(nil,MethodNames[61],mtProc,TypeInfo(_T40),[
TypeInfo(Word)],Addr(Set8087CW),cRegister);

RegisterProc(nil,MethodNames[62],mtProc,TypeInfo(_T41),[TypeInfo(Word)],Addr(Get8087CW),cRegister);

RegisterProc(nil,MethodNames[63],mtProc,TypeInfo(_T47),[
DynArrayInfo(TypeInfo(UCS4String)),TypeInfoPointer],Addr(PUCS4Chars),cRegister);

RegisterProc(nil,MethodNames[64],mtProc,TypeInfo(_T49),[
DynArrayInfo(TypeInfo(UCS4String)),TypeInfo(WideString)],Addr(UCS4StringToWideString),cRegister);

RegisterProc(nil,MethodNames[65],mtProc,TypeInfo(_T52),[
TypeInfo(WideString),TypeInfo(UTF8String)],Addr(UTF8Encode),cRegister);

RegisterProc(nil,MethodNames[66],mtProc,TypeInfo(_T53),[
TypeInfo(UTF8String),TypeInfo(WideString)],Addr(UTF8Decode),cRegister);

RegisterProc(nil,MethodNames[67],mtProc,TypeInfo(_T54),[
TypeInfo(string),TypeInfo(UTF8String)],Addr(AnsiToUtf8),cRegister);

RegisterProc(nil,MethodNames[68],mtProc,TypeInfo(_T55),[
TypeInfo(UTF8String),TypeInfo(string)],Addr(Utf8ToAnsi),cRegister);

RegisterProc(nil,MethodNames[69],mtProc,TypeInfo(_T58),[
TypeInfo(string),TypeInfoPWideChar],Addr(StringToOleStr),cRegister);

RegisterProc(nil,MethodNames[70],mtProc,TypeInfo(_T59),[
TypeInfo(IDispatch)],Addr(____GetVariantManager__Wrapper),cRegister);

RegisterProc(nil,MethodNames[71],mtProc,TypeInfo(_T60),[
TypeInfo(IDispatch)],Addr(____SetVariantManager__Wrapper),cRegister);

RegisterProc(nil,MethodNames[72],mtProc,TypeInfo(_T61),[TypeInfo(Boolean)],Addr(IsVariantManagerSet),cRegister);

RegisterProc(nil,MethodNames[73],mtProc,TypeInfo(_T64),[
TypeInfoPointer,TypeInfo(LongWord)],Addr(FindHInstance),cRegister);

RegisterProc(nil,MethodNames[74],mtProc,TypeInfo(_T66),[
TypeInfo(LongWord),TypeInfo(LongWord)],Addr(FindResourceHInstance),cRegister);

RegisterProc(nil,MethodNames[75],mtProc,TypeInfo(_T73),[
TypeInfo(Extended),TypeInfo(Extended)],Addr(Int),cRegister);

RegisterProc(nil,MethodNames[76],mtProc,TypeInfo(_T74),[
TypeInfo(Extended),TypeInfo(Extended)],Addr(Frac),cRegister);

RegisterProc(nil,MethodNames[77],mtProc,TypeInfo(_T75),[
TypeInfo(Extended),TypeInfo(Extended)],Addr(Exp),cRegister);

RegisterProc(nil,MethodNames[78],mtProc,TypeInfo(_T76),[
TypeInfo(Extended),TypeInfo(Extended)],Addr(Cos),cRegister);

RegisterProc(nil,MethodNames[79],mtProc,TypeInfo(_T77),[
TypeInfo(Extended),TypeInfo(Extended)],Addr(Sin),cRegister);

RegisterProc(nil,MethodNames[80],mtProc,TypeInfo(_T78),[
TypeInfo(Extended),TypeInfo(Extended)],Addr(Ln),cRegister);

RegisterProc(nil,MethodNames[81],mtProc,TypeInfo(_T79),[
TypeInfo(Extended),TypeInfo(Extended)],Addr(ArcTan),cRegister);

RegisterProc(nil,MethodNames[82],mtProc,TypeInfo(_T80),[
TypeInfo(Extended),TypeInfo(Extended)],Addr(Sqrt),cRegister);

RegisterProc(nil,MethodNames[83],mtProc,TypeInfo(_T81),NoParams,Addr(Mark),cRegister);

RegisterProc(nil,MethodNames[84],mtProc,TypeInfo(_T82),NoParams,Addr(Release),cRegister);

RegisterProc(nil,MethodNames[85],mtProc,TypeInfo(_T83),[
TypeInfo(AnsiString)],Addr(UniqueString),cRegister);

RegisterProc(nil,MethodNames[86],mtProc,TypeInfo(_T84),[
TypeInfoPointer,
TypeInfoPointer],Addr(DynArrayClear),cRegister);

RegisterProc(nil,MethodNames[87],mtProc,TypeInfo(_T85),[
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(Longint),
TypeInfoPointer],Addr(DynArraySetLength),cRegister);

RegisterProc(nil,MethodNames[88],mtProc,TypeInfo(_T87),NoParams,Addr(FPower10),cRegister);

RegisterProc(nil,MethodNames[89],mtProc,TypeInfo(_T88),NoParams,Addr(TextStart),cRegister);

RegisterProc(nil,MethodNames[90],mtProc,TypeInfo(_T89),[
TypeInfo(Comp),TypeInfo(Double)],Addr(CompToDouble),cCdecl);

RegisterProc(nil,MethodNames[91],mtProc,TypeInfo(_T90),[
TypeInfo(Double),
TypeInfo(Comp)],Addr(DoubleToComp),cCdecl);

RegisterProc(nil,MethodNames[92],mtProc,TypeInfo(_T91),[
TypeInfo(Comp),TypeInfo(Currency)],Addr(CompToCurrency),cCdecl);

RegisterProc(nil,MethodNames[93],mtProc,TypeInfo(_T92),[
TypeInfo(Currency),
TypeInfo(Comp)],Addr(CurrencyToComp),cCdecl);

RegisterProc(nil,MethodNames[94],mtProc,TypeInfo(_T93),[
TypeInfo(Integer),TypeInfoPointer],Addr(GetMemory),cCdecl);

RegisterProc(nil,MethodNames[95],mtProc,TypeInfo(_T94),[
TypeInfoPointer,TypeInfo(Integer)],Addr(FreeMemory),cCdecl);

RegisterProc(nil,MethodNames[96],mtProc,TypeInfo(_T95),[
TypeInfoPointer,
TypeInfo(Integer),TypeInfoPointer],Addr(ReallocMemory),cCdecl);

RegisterProc(nil,MethodNames[97],mtProc,TypeInfo(_T96),[
TypeInfo(AnsiString),
TypeInfo(AnsiString),TypeInfo(Integer)],Addr(Pos),cRegister);

RegisterProc(nil,MethodNames[98],mtProc,TypeInfo(_T97),[
TypeInfo(AnsiChar),
TypeInfo(Integer),TypeInfo(AnsiString)],Addr(StringOfChar),cRegister);

RegisterProc(nil,MethodNames[99],mtProc,TypeInfo(_T98),[
TypeInfo(TRuntimeError)],Addr(Error),cRegister);

RegisterProc(nil,MethodNames[100],mtProc,TypeInfo(_T99),[TypeInfo(Integer)],Addr(GetLastError),cStdCall);

RegisterProc(nil,MethodNames[101],mtProc,TypeInfo(_T100),[
TypeInfo(Integer)],Addr(SetLastError),cStdCall);

RegisterProc(nil,MethodNames[102],mtProc,TypeInfo(_T101),[
TypeInfo(Integer)],Addr(SetMultiByteConversionCodePage),cRegister);

//RegisterProc(TContainedObject,'QueryInterface',mtMethod,TypeInfo(_T103),[TypeInfo(IDispatch),TypeInfoUntyped,TypeInfo(HRESULT)], pointer(0),cRegister);
RegisterProc(TContainedObject,'QueryInterface',mtMethod,TypeInfo(_T103),[TypeInfo(IDispatch),TypeInfoUntyped,TypeInfo(HRESULT)],  getVMTProcAddr('TContainedObject','QueryInterface',0),cRegister);


RegisterProc(TObject,'Create',mtConstructor,TypeInfo(_T104),NoParams,Addr(TObject.Create),cRegister);

RegRegisterMethod(TObject,'Free',TypeInfo(_T105),NoParams,Addr(TObject.Free));

RegisterProc(TObject,'InitInstance',mtClassMethod,TypeInfo(_T106),[
TypeInfoPointer,TypeInfo(TObject)],Addr(TObject.InitInstance),cRegister);

RegRegisterMethod(TObject,'CleanupInstance',TypeInfo(_T107),NoParams,Addr(TObject.CleanupInstance));

RegisterProc(TObject,'ClassName',mtClassMethod,TypeInfo(_T109),[TypeInfo(ShortString)],Addr(TObject.ClassName),cRegister);

RegisterProc(TObject,'ClassNameIs',mtClassMethod,TypeInfo(_T110),[
TypeInfo(string),TypeInfo(Boolean)],Addr(TObject.ClassNameIs),cRegister);

RegisterProc(TObject,'ClassInfo',mtClassMethod,TypeInfo(_T112),[TypeInfoPointer],Addr(TObject.ClassInfo),cRegister);

RegisterProc(TObject,'InstanceSize',mtClassMethod,TypeInfo(_T113),[TypeInfo(Longint)],Addr(TObject.InstanceSize),cRegister);

RegisterProc(TObject,'MethodAddress',mtClassMethod,TypeInfo(_T115),[
TypeInfo(ShortString),TypeInfoPointer],Addr(TObject.MethodAddress),cRegister);

RegisterProc(TObject,'MethodName',mtClassMethod,TypeInfo(_T116),[
TypeInfoPointer,TypeInfo(ShortString)],Addr(TObject.MethodName),cRegister);

RegRegisterMethod(TObject,'FieldAddress',TypeInfo(_T117),[
TypeInfo(ShortString),TypeInfoPointer],Addr(TObject.FieldAddress));

RegRegisterMethod(TObject,'GetInterface',TypeInfo(_T118),[
TypeInfo(IDispatch),
TypeInfoUntyped,TypeInfo(Boolean)],Addr(__TObject__GetInterface__Wrapper));

//RegRegisterMethod(TObject,'SafeCallException',TypeInfo(_T121),[TypeInfo(TObject),TypeInfoPointer,TypeInfo(HRESULT)], pointer(-28));
RegRegisterMethod(TObject,'SafeCallException',TypeInfo(_T121),[TypeInfo(TObject),TypeInfoPointer,TypeInfo(HRESULT)],  getVMTProcAddr('TObject','SafeCallException',-28));


//RegRegisterMethod(TObject,'AfterConstruction',TypeInfo(_T122),NoParams, pointer(-24));
RegRegisterMethod(TObject,'AfterConstruction',TypeInfo(_T122),NoParams,  getVMTProcAddr('TObject','AfterConstruction',-24));


//RegRegisterMethod(TObject,'BeforeDestruction',TypeInfo(_T123),NoParams, pointer(-20));
RegRegisterMethod(TObject,'BeforeDestruction',TypeInfo(_T123),NoParams,  getVMTProcAddr('TObject','BeforeDestruction',-20));


//RegRegisterMethod(TObject,'Dispatch',TypeInfo(_T124),[TypeInfoUntyped], pointer(-16));
RegRegisterMethod(TObject,'Dispatch',TypeInfo(_T124),[TypeInfoUntyped],  getVMTProcAddr('TObject','Dispatch',-16));


//RegRegisterMethod(TObject,'DefaultHandler',TypeInfo(_T125),[TypeInfoUntyped], pointer(-12));
RegRegisterMethod(TObject,'DefaultHandler',TypeInfo(_T125),[TypeInfoUntyped],  getVMTProcAddr('TObject','DefaultHandler',-12));


RegisterProc(TObject,'NewInstance',mtClassMethod,TypeInfo(_T126),[TypeInfo(TObject)], pointer(-8),cRegister);

//RegRegisterMethod(TObject,'FreeInstance',TypeInfo(_T127),NoParams, pointer(-4));
RegRegisterMethod(TObject,'FreeInstance',TypeInfo(_T127),NoParams,  getVMTProcAddr('TObject','FreeInstance',-4));


RegisterProc(TObject,'Destroy',mtDestructor,TypeInfo(_T128),NoParams, pointer(0),cRegister);

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'GetMemoryMap',mtProc,TypeInfo(_T19),[
TypeInfo(TMemoryMap)],Addr(GetMemoryMap),cRegister)}

{RegisterProc(nil,'BeginThread',mtProc,TypeInfo(_T26),[
TypeInfoPointer,
TypeInfo(LongWord),
TypeInfo(TThreadFunc),
TypeInfoPointer,
TypeInfo(LongWord),
TypeInfo(LongWord),TypeInfo(Integer)],Addr(BeginThread),cRegister)}

{RegisterProc(nil,'SetLineBreakStyle',mtProc,TypeInfo(_T28),[
TypeInfo(Text),
TypeInfo(TTextLineBreakStyle)],Addr(SetLineBreakStyle),cRegister)}

{RegisterProc(nil,'Flush',mtProc,TypeInfo(_T30),[
TypeInfo(Text),TypeInfo(Integer)],Addr(Flush),cRegister)}

{RegisterProc(nil,'WideCharToString',mtProc,TypeInfo(_T42),[
TypeInfoPWideChar,TypeInfo(string)],Addr(WideCharToString),cRegister)}

{RegisterProc(nil,'WideCharLenToString',mtProc,TypeInfo(_T43),[
TypeInfoPWideChar,
TypeInfo(Integer),TypeInfo(string)],Addr(WideCharLenToString),cRegister)}

{RegisterProc(nil,'WideCharToStrVar',mtProc,TypeInfo(_T44),[
TypeInfoPWideChar,
TypeInfo(string)],Addr(WideCharToStrVar),cRegister)}

{RegisterProc(nil,'WideCharLenToStrVar',mtProc,TypeInfo(_T45),[
TypeInfoPWideChar,
TypeInfo(Integer),
TypeInfo(string)],Addr(WideCharLenToStrVar),cRegister)}

{RegisterProc(nil,'StringToWideChar',mtProc,TypeInfo(_T46),[
TypeInfo(string),
TypeInfoPWideChar,
TypeInfo(Integer),TypeInfoPWideChar],Addr(StringToWideChar),cRegister)}

{RegisterProc(nil,'WideStringToUCS4String',mtProc,TypeInfo(_T48),[
TypeInfo(WideString),TypeInfo(UCS4String)],Addr(WideStringToUCS4String),cRegister)}

{RegisterProc(nil,'UnicodeToUtf8',mtProc,TypeInfo(_T50),[
TypeInfoPChar,
TypeInfoPWideChar,
TypeInfo(Integer),TypeInfo(Integer)],Addr(UnicodeToUtf8),cRegister)}

{RegisterProc(nil,'Utf8ToUnicode',mtProc,TypeInfo(_T51),[
TypeInfoPWideChar,
TypeInfoPChar,
TypeInfo(Integer),TypeInfo(Integer)],Addr(Utf8ToUnicode),cRegister)}

{RegisterProc(nil,'OleStrToString',mtProc,TypeInfo(_T56),[
TypeInfoPWideChar,TypeInfo(string)],Addr(OleStrToString),cRegister)}

{RegisterProc(nil,'OleStrToStrVar',mtProc,TypeInfo(_T57),[
TypeInfoPWideChar,
TypeInfo(string)],Addr(OleStrToStrVar),cRegister)}

{RegisterProc(nil,'RegisterModule',mtProc,TypeInfo(_T62),[
TypeInfoPointer],Addr(RegisterModule),cRegister)}

{RegisterProc(nil,'UnregisterModule',mtProc,TypeInfo(_T63),[
TypeInfoPointer],Addr(UnregisterModule),cRegister)}

{RegisterProc(nil,'FindClassHInstance',mtProc,TypeInfo(_T65),[
TypeInfo(TClass),TypeInfo(LongWord)],Addr(FindClassHInstance),cRegister)}

{RegisterProc(nil,'EnumModules',mtProc,TypeInfo(_T68),[
TypeInfo(TEnumModuleFunc),
TypeInfoPointer],Addr(EnumModules),cRegister)}

{RegisterProc(nil,'EnumResourceModules',mtProc,TypeInfo(_T69),[
TypeInfo(TEnumModuleFunc),
TypeInfoPointer],Addr(EnumResourceModules),cRegister)}

{RegisterProc(nil,'AddModuleUnloadProc',mtProc,TypeInfo(_T70),[
TypeInfo(TModuleUnloadProc)],Addr(AddModuleUnloadProc),cRegister)}

{RegisterProc(nil,'RemoveModuleUnloadProc',mtProc,TypeInfo(_T71),[
TypeInfo(TModuleUnloadProc)],Addr(RemoveModuleUnloadProc),cRegister)}

{RegisterProc(nil,'LoadResString',mtProc,TypeInfo(_T72),[
TypeInfoPointer,TypeInfo(string)],Addr(LoadResString),cRegister)}

{RegisterProc(nil,'DynArrayDim',mtProc,TypeInfo(_T86),[
TypeInfoPointer,TypeInfo(Integer)],Addr(DynArrayDim),cRegister)}

{RegisterProc(TAggregatedObject,'Create',mtConstructor,TypeInfo(_T102),[
TypeInfo(IInterface)],Addr(TAggregatedObject.Create),cRegister)}

{RegRegisterMethod(TObject,'ClassType',TypeInfo(_T108),[TypeInfo(TClass)],Addr(TObject.ClassType))}

{RegisterProc(TObject,'ClassParent',mtClassMethod,TypeInfo(_T111),[TypeInfo(TClass)],Addr(TObject.ClassParent),cRegister)}

{RegisterProc(TObject,'InheritsFrom',mtClassMethod,TypeInfo(_T114),[
TypeInfo(TClass),TypeInfo(Boolean)],Addr(TObject.InheritsFrom),cRegister)}

{RegisterProc(TObject,'GetInterfaceTable',mtClassMethod,TypeInfo(_T120),[TypeInfoPointer],Addr(TObject.GetInterfaceTable),cRegister)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
