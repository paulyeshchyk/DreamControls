{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit WEBREQ_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  SyncObjs,
  SysUtils,
  Classes,
  HTTPApp,
  Contnrs,
  WebCntxt,
  WebReq;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = function : TWebRequestHandler of object;

_T1 = procedure  of object;

_T2 = procedure (p0 : TAbstractWebModuleFactory) of object;

_T3 = procedure (const p0 : TWebModuleFactoryList) of object;

_T4 = procedure (p0 : TComponent) of object;

_T5 = _T1;

_T6 = _T1;

_T7 = procedure (p0 : TObject) of object;

_T8 = _T2;

function __DC__GetTWebModuleFactoryList__AppModuleFactory(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TWebModuleFactoryList(Instance).AppModuleFactory);
end;

function __DC__GetTWebModuleFactoryList__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TWebModuleFactoryList(Instance).Items[OleVariant(Params^[0])]);
end;

function __DC__GetTWebModuleFactoryList__ItemCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWebModuleFactoryList(Instance).ItemCount;
end;

function __DC__GetTWebRequestHandler__ActiveCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWebRequestHandler(Instance).ActiveCount;
end;

function __DC__GetTWebRequestHandler__CacheConnections(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWebRequestHandler(Instance).CacheConnections;
end;

procedure __DC__SetTWebRequestHandler__CacheConnections(Instance : TObject; Params : PVariantArgList);
begin
TWebRequestHandler(Instance).CacheConnections:=OleVariant(Params^[0]);
end;

function __DC__GetTWebRequestHandler__InactiveCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWebRequestHandler(Instance).InactiveCount;
end;

function __DC__GetTWebRequestHandler__MaxConnections(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWebRequestHandler(Instance).MaxConnections;
end;

procedure __DC__SetTWebRequestHandler__MaxConnections(Instance : TObject; Params : PVariantArgList);
begin
TWebRequestHandler(Instance).MaxConnections:=OleVariant(Params^[0]);
end;

function __DC__GetTWebRequestHandler__WebModuleFactoryCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWebRequestHandler(Instance).WebModuleFactoryCount;
end;

function __DC__GetTWebRequestHandler__WebModuleFactory(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TWebRequestHandler(Instance).WebModuleFactory[OleVariant(Params^[0])]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TWebModuleFactoryList,'AppModuleFactory',__DC__GetTWebModuleFactoryList__AppModuleFactory,nil);
RegisterIndexedProperty(TWebModuleFactoryList,'Items',1,False,__DC__GetTWebModuleFactoryList__Items,nil);
RegisterProperty(TWebModuleFactoryList,'ItemCount',__DC__GetTWebModuleFactoryList__ItemCount,nil);
RegisterProperty(TWebRequestHandler,'ActiveCount',__DC__GetTWebRequestHandler__ActiveCount,nil);
RegisterProperty(TWebRequestHandler,'CacheConnections',__DC__GetTWebRequestHandler__CacheConnections,__DC__SetTWebRequestHandler__CacheConnections);
RegisterProperty(TWebRequestHandler,'InactiveCount',__DC__GetTWebRequestHandler__InactiveCount,nil);
RegisterProperty(TWebRequestHandler,'MaxConnections',__DC__GetTWebRequestHandler__MaxConnections,__DC__SetTWebRequestHandler__MaxConnections);
RegisterProperty(TWebRequestHandler,'WebModuleFactoryCount',__DC__GetTWebRequestHandler__WebModuleFactoryCount,nil);
RegisterIndexedProperty(TWebRequestHandler,'WebModuleFactory',1,False,__DC__GetTWebRequestHandler__WebModuleFactory,nil);
end;

const __ConstNames0 : array[0..5] of string = (
'rnActivateModule'
,'rnDeactivateModule'
,'rnCreateModule'
,'rnFreeModule'
,'rnStartRequest'
,'rnFinishRequest'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,rnActivateModule));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,rnDeactivateModule));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,rnCreateModule));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,rnFreeModule));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,rnStartRequest));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,rnFinishRequest));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..2] of TClass = (
TWebModuleFactoryList,
TWebModuleList,
TWebRequestHandler
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'WebRequestHandler'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[TypeInfo(TWebRequestHandler)],Addr(WebRequestHandler),cRegister);

RegisterProc(TWebModuleFactoryList,'Create',mtConstructor,TypeInfo(_T1),NoParams,Addr(TWebModuleFactoryList.Create),cRegister);

RegRegisterMethod(TWebModuleFactoryList,'AddFactory',TypeInfo(_T2),[
TypeInfo(TAbstractWebModuleFactory)],Addr(TWebModuleFactoryList.AddFactory));

RegisterProc(TWebModuleList,'Create',mtConstructor,TypeInfo(_T3),[
TypeInfo(TWebModuleFactoryList)],Addr(TWebModuleList.Create),cRegister);

RegRegisterMethod(TWebModuleList,'AddModule',TypeInfo(_T4),[
TypeInfo(TComponent)],Addr(TWebModuleList.AddModule));

RegRegisterMethod(TWebModuleList,'AutoCreateModules',TypeInfo(_T5),NoParams,Addr(TWebModuleList.AutoCreateModules));

RegRegisterMethod(TWebModuleList,'AutoDestroyModules',TypeInfo(_T6),NoParams,Addr(TWebModuleList.AutoDestroyModules));

RegRegisterMethod(TWebRequestHandler,'HandleException',TypeInfo(_T7),[
TypeInfo(TObject)],Addr(TWebRequestHandler.HandleException));

RegRegisterMethod(TWebRequestHandler,'AddWebModuleFactory',TypeInfo(_T8),[
TypeInfo(TAbstractWebModuleFactory)],Addr(TWebRequestHandler.AddWebModuleFactory));

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
