{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit EXTCTRLS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  Types,
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Messages,
  Windows,
  SysUtils,
  Classes,
  Contnrs,
  Controls,
  Forms,
  Menus,
  Graphics,
  StdCtrls,
  GraphUtil,
  ShellApi,
  ExtCtrls;
function ConvertTMessageToVariant(var R : TMessage) : OleVariant;
function ConvertVariantToTMessage(const V : OleVariant) : TMessage;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TPoint__Wrapper = class(TDCRecordWrapper)
private
fR : TPoint;
public
function GetRecordPtr : pointer; override;
published
procedure setX(const val : Longint);
function getX : Longint;
property X : Longint read getX write setX;
procedure setY(const val : Longint);
function getY : Longint;
property Y : Longint read getY write setY;
end;
type __TRect__Wrapper = class(TDCRecordWrapper)
private
fR : TRect;
public
function GetRecordPtr : pointer; override;
published
procedure setLeft(const val : Longint);
function getLeft : Longint;
property Left : Longint read getLeft write setLeft;
procedure setTop(const val : Longint);
function getTop : Longint;
property Top : Longint read getTop write setTop;
procedure setRight(const val : Longint);
function getRight : Longint;
property Right : Longint read getRight write setRight;
procedure setBottom(const val : Longint);
function getBottom : Longint;
property Bottom : Longint read getBottom write setBottom;
end;
type __TMessage__Wrapper = class(TDCRecordWrapper)
private
fR : TMessage;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setWParam(const val : Longint);
function getWParam : Longint;
property WParam : Longint read getWParam write setWParam;
procedure setLParam(const val : Longint);
function getLParam : Longint;
property LParam : Longint read getLParam write setLParam;
procedure setResult(const val : Longint);
function getResult : Longint;
property Result : Longint read getResult write setResult;
procedure setWParamLo(const val : Word);
function getWParamLo : Word;
property WParamLo : Word read getWParamLo write setWParamLo;
procedure setWParamHi(const val : Word);
function getWParamHi : Word;
property WParamHi : Word read getWParamHi write setWParamHi;
procedure setLParamLo(const val : Word);
function getLParamLo : Word;
property LParamLo : Word read getLParamLo write setLParamLo;
procedure setLParamHi(const val : Word);
function getLParamHi : Word;
property LParamHi : Word read getLParamHi write setLParamHi;
procedure setResultLo(const val : Word);
function getResultLo : Word;
property ResultLo : Word read getResultLo write setResultLo;
procedure setResultHi(const val : Word);
function getResultHi : Word;
property ResultHi : Word read getResultHi write setResultHi;
end;
type __TCustomControlBar__ = class(TCustomControlBar);
type __TCustomTrayIcon__ = class(TCustomTrayIcon);
type __TImage__ = class(TImage);
type
_T0 = procedure (p0 : TCanvas;
const p1 : IDispatch;
p2 : TColor;
p3 : TColor;
p4 : Integer) of object;

_T1 = procedure (p0 : TNotebook) of object;

_T2 = function : TCustomGridPanel of object;

_T3 = procedure (p0 : TPersistent) of object;

_T4 = function : TColumnItem of object;

_T5 = _T3;

_T6 = function : TControlItem of object;

_T7 = procedure (p0 : TControl;
p1 : Integer;
p2 : Integer) of object;

_T8 = procedure (p0 : TControl) of object;

_T9 = function (p0 : TControl): Integer of object;

_T10 = _T2;

_T11 = procedure (p0 : Integer;
p1 : Integer;
p2 : Boolean) of object;

_T12 = function : Boolean of object;

_T13 = _T12;

_T14 = procedure (p0 : TControl;
const p1 : IDispatch) of object;

_T15 = procedure (p0 : TControl;
p1 : TCanvas;
const p2 : IDispatch;
var p3 : TBandPaintOptions) of object;

_T16 = function (p0 : TControl): Boolean of object;

_T17 = _T8;

_T18 = function (p0 : TControl;
p1 : Integer;
p2 : Integer;
p3 : Boolean): Boolean of object;

_T19 = procedure (p0 : TControl;
const p1 : IDispatch;
var p2 : Integer;
var p3 : Integer) of object;

_T20 = procedure (p0 : TCanvas;
p1 : TControl;
const p2 : IDispatch) of object;

_T21 = procedure  of object;

_T22 = _T9;

_T23 = procedure (p0 : TControl;
p1 : Integer) of object;

_T24 = function (p0 : Integer): Boolean of object;

_T25 = _T24;

_T26 = _T21;

_T27 = _T12;

_T28 = procedure (p0 : Boolean) of object;

_T29 = procedure (p0 : Integer) of object;

_T30 = procedure (const p0 : IDispatch) of object;

_T31 = procedure (p0 : TObject) of object;

_T32 = _T21;

_T33 = _T21;

_T34 = _T21;

_T35 = procedure (p0 : Integer;
p1 : Integer) of object;

_T36 = _T35;

_T37 = procedure (p0 : TObject;
p1 : TProgressStage;
p2 : Byte;
p3 : Boolean;
const p4 : IDispatch;
const p5 : string) of object;

_T38 = _T3;

_T39 = function : TRowItem of object;

_T40 = _T31;

_T41 = function (var p0 : Integer): Boolean of object;

_T42 = _T41;

_T43 = _T21;

_T44 = _T21;

function __TPoint__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPoint__Wrapper.setX(const val : Longint);
begin
TPoint(GetRecordPtr^).X := val;
end;
function __TPoint__Wrapper.getX : Longint;
begin
result := TPoint(GetRecordPtr^).X;
end;
procedure __TPoint__Wrapper.setY(const val : Longint);
begin
TPoint(GetRecordPtr^).Y := val;
end;
function __TPoint__Wrapper.getY : Longint;
begin
result := TPoint(GetRecordPtr^).Y;
end;
function __TRect__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRect__Wrapper.setLeft(const val : Longint);
begin
TRect(GetRecordPtr^).Left := val;
end;
function __TRect__Wrapper.getLeft : Longint;
begin
result := TRect(GetRecordPtr^).Left;
end;
procedure __TRect__Wrapper.setTop(const val : Longint);
begin
TRect(GetRecordPtr^).Top := val;
end;
function __TRect__Wrapper.getTop : Longint;
begin
result := TRect(GetRecordPtr^).Top;
end;
procedure __TRect__Wrapper.setRight(const val : Longint);
begin
TRect(GetRecordPtr^).Right := val;
end;
function __TRect__Wrapper.getRight : Longint;
begin
result := TRect(GetRecordPtr^).Right;
end;
procedure __TRect__Wrapper.setBottom(const val : Longint);
begin
TRect(GetRecordPtr^).Bottom := val;
end;
function __TRect__Wrapper.getBottom : Longint;
begin
result := TRect(GetRecordPtr^).Bottom;
end;
function __TMessage__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMessage__Wrapper.setMsg(const val : Cardinal);
begin
TMessage(GetRecordPtr^).Msg := val;
end;
function __TMessage__Wrapper.getMsg : Cardinal;
begin
result := TMessage(GetRecordPtr^).Msg;
end;
procedure __TMessage__Wrapper.setWParam(const val : Longint);
begin
TMessage(GetRecordPtr^).WParam := val;
end;
function __TMessage__Wrapper.getWParam : Longint;
begin
result := TMessage(GetRecordPtr^).WParam;
end;
procedure __TMessage__Wrapper.setLParam(const val : Longint);
begin
TMessage(GetRecordPtr^).LParam := val;
end;
function __TMessage__Wrapper.getLParam : Longint;
begin
result := TMessage(GetRecordPtr^).LParam;
end;
procedure __TMessage__Wrapper.setResult(const val : Longint);
begin
TMessage(GetRecordPtr^).Result := val;
end;
function __TMessage__Wrapper.getResult : Longint;
begin
result := TMessage(GetRecordPtr^).Result;
end;
procedure __TMessage__Wrapper.setWParamLo(const val : Word);
begin
TMessage(GetRecordPtr^).WParamLo := val;
end;
function __TMessage__Wrapper.getWParamLo : Word;
begin
result := TMessage(GetRecordPtr^).WParamLo;
end;
procedure __TMessage__Wrapper.setWParamHi(const val : Word);
begin
TMessage(GetRecordPtr^).WParamHi := val;
end;
function __TMessage__Wrapper.getWParamHi : Word;
begin
result := TMessage(GetRecordPtr^).WParamHi;
end;
procedure __TMessage__Wrapper.setLParamLo(const val : Word);
begin
TMessage(GetRecordPtr^).LParamLo := val;
end;
function __TMessage__Wrapper.getLParamLo : Word;
begin
result := TMessage(GetRecordPtr^).LParamLo;
end;
procedure __TMessage__Wrapper.setLParamHi(const val : Word);
begin
TMessage(GetRecordPtr^).LParamHi := val;
end;
function __TMessage__Wrapper.getLParamHi : Word;
begin
result := TMessage(GetRecordPtr^).LParamHi;
end;
procedure __TMessage__Wrapper.setResultLo(const val : Word);
begin
TMessage(GetRecordPtr^).ResultLo := val;
end;
function __TMessage__Wrapper.getResultLo : Word;
begin
result := TMessage(GetRecordPtr^).ResultLo;
end;
procedure __TMessage__Wrapper.setResultHi(const val : Word);
begin
TMessage(GetRecordPtr^).ResultHi := val;
end;
function __TMessage__Wrapper.getResultHi : Word;
begin
result := TMessage(GetRecordPtr^).ResultHi;
end;
procedure ____Frame3D__Wrapper(p0 : TCanvas;
const p1 : IDispatch;
p2 : TColor;
p3 : TColor;
p4 : Integer);
var
__p1 : ^TRect;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
Frame3D(p0,__p1^,p2,p3,p4);
end;

procedure __TControlCollection__AddControl__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
TControlCollection(__Instance).AddControl(TControl(VarToObject(OleVariant(pargs^[0]))));
end;
2:
begin
TControlCollection(__Instance).AddControl(TControl(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
end;
3:
begin
TControlCollection(__Instance).AddControl(TControl(VarToObject(OleVariant(pargs^[2]))),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure __TControlItem__SetLocation__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
2:
begin
TControlItem(__Instance).SetLocation(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
3:
begin
TControlItem(__Instance).SetLocation(OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure __TCustomControlBar__DoBandMove__Wrapper(__Instance : TCustomControlBar;
p0 : TControl;
const p1 : IDispatch);
var
__p1 : ^TRect;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
__TCustomControlBar__(__Instance).DoBandMove(p0,__p1^);
end;

procedure __TCustomControlBar__DoBandPaint__Wrapper(__Instance : TCustomControlBar;
p0 : TControl;
p1 : TCanvas;
const p2 : IDispatch;
var p3 : TBandPaintOptions);
var
__p2 : ^TRect;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
__TCustomControlBar__(__Instance).DoBandPaint(p0,p1,__p2^,p3);
end;

function __TCustomControlBar__DragControl__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
3:
begin
result := __TCustomControlBar__(__Instance).DragControl(TControl(VarToObject(OleVariant(pargs^[2]))),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
4:
begin
result := __TCustomControlBar__(__Instance).DragControl(TControl(VarToObject(OleVariant(pargs^[3]))),OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure __TCustomControlBar__GetControlInfo__Wrapper(__Instance : TCustomControlBar;
p0 : TControl;
const p1 : IDispatch;
var p2 : Integer;
var p3 : Integer);
var
__p1 : ^TRect;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
__TCustomControlBar__(__Instance).GetControlInfo(p0,__p1^,p2,p3);
end;

procedure __TCustomControlBar__PaintControlFrame__Wrapper(__Instance : TCustomControlBar;
p0 : TCanvas;
p1 : TControl;
const p2 : IDispatch);
var
__p2 : ^TRect;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
__TCustomControlBar__(__Instance).PaintControlFrame(p0,p1,__p2^);
end;

procedure __TCustomTrayIcon__WindowProc__Wrapper(__Instance : TCustomTrayIcon;
const p0 : IDispatch);
var
__p0 : ^TMessage;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__TCustomTrayIcon__(__Instance).WindowProc(__p0^);
end;

procedure __TImage__Progress__Wrapper(__Instance : TImage;
p0 : TObject;
p1 : TProgressStage;
p2 : Byte;
p3 : Boolean;
const p4 : IDispatch;
const p5 : string);
var
__p4 : ^TRect;
__i4 : IDispatch;
begin
if p4 = nil then exit;
__p4 := (p4 as IDCRecordWrapper).GetRecordPtr;
__TImage__(__Instance).Progress(p0,p1,p2,p3,__p4^,p5);
end;


type __TMessage__Wrapper__ = class(__TMessage__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMessage__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMessageToVariant(var R : TMessage) : OleVariant;
var
__rw : __TMessage__Wrapper__;
begin
__rw := __TMessage__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMessage(const V : OleVariant) : TMessage;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMessage((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPoint__Wrapper__ = class(__TPoint__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPoint__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
var
__rw : __TPoint__Wrapper__;
begin
__rw := __TPoint__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPoint((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRect__Wrapper__ = class(__TRect__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRect__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
var
__rw : __TRect__Wrapper__;
begin
__rw := __TRect__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRect((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTCellCollection__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCellCollection(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __DC__SetTCellCollection__Items(Instance : TObject; Params : PVariantArgList);
begin
TCellCollection(Instance).Items[OleVariant(Params^[1])]:=TCellItem(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTControlBar__Canvas(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TControlBar(Instance).Canvas);
end;

function __DC__GetTControlCollection__Controls(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TControlCollection(Instance).Controls[OleVariant(Params^[1]), OleVariant(Params^[0])]);
end;

procedure __DC__SetTControlCollection__Controls(Instance : TObject; Params : PVariantArgList);
begin
TControlCollection(Instance).Controls[OleVariant(Params^[2]), OleVariant(Params^[1])]:=TControl(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTControlCollection__ControlItems(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TControlCollection(Instance).ControlItems[OleVariant(Params^[1]), OleVariant(Params^[0])]);
end;

function __DC__GetTControlCollection__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TControlCollection(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __DC__SetTControlCollection__Items(Instance : TObject; Params : PVariantArgList);
begin
TControlCollection(Instance).Items[OleVariant(Params^[1])]:=TControlItem(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomColorBox__Style(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TColorBoxStyle;
begin
tmp := TCustomColorBox(Instance).Style;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTCustomColorBox__Style(Instance : TObject; Params : PVariantArgList);
var
  tmp : TColorBoxStyle;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TCustomColorBox(Instance).Style:=tmp;
end;

function __DC__GetTCustomColorBox__Colors(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomColorBox(Instance).Colors[OleVariant(Params^[0])];
end;

function __DC__GetTCustomColorBox__ColorNames(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomColorBox(Instance).ColorNames[OleVariant(Params^[0])];
end;

function __DC__GetTCustomColorBox__Selected(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomColorBox(Instance).Selected;
end;

procedure __DC__SetTCustomColorBox__Selected(Instance : TObject; Params : PVariantArgList);
begin
TCustomColorBox(Instance).Selected:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomColorBox__DefaultColorColor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomColorBox(Instance).DefaultColorColor;
end;

procedure __DC__SetTCustomColorBox__DefaultColorColor(Instance : TObject; Params : PVariantArgList);
begin
TCustomColorBox(Instance).DefaultColorColor:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomColorBox__NoneColorColor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomColorBox(Instance).NoneColorColor;
end;

procedure __DC__SetTCustomColorBox__NoneColorColor(Instance : TObject; Params : PVariantArgList);
begin
TCustomColorBox(Instance).NoneColorColor:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomColorListBox__Style(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TColorBoxStyle;
begin
tmp := TCustomColorListBox(Instance).Style;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTCustomColorListBox__Style(Instance : TObject; Params : PVariantArgList);
var
  tmp : TColorBoxStyle;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TCustomColorListBox(Instance).Style:=tmp;
end;

function __DC__GetTCustomColorListBox__Colors(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomColorListBox(Instance).Colors[OleVariant(Params^[0])];
end;

function __DC__GetTCustomColorListBox__ColorNames(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomColorListBox(Instance).ColorNames[OleVariant(Params^[0])];
end;

function __DC__GetTCustomColorListBox__Selected(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomColorListBox(Instance).Selected;
end;

procedure __DC__SetTCustomColorListBox__Selected(Instance : TObject; Params : PVariantArgList);
begin
TCustomColorListBox(Instance).Selected:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomColorListBox__DefaultColorColor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomColorListBox(Instance).DefaultColorColor;
end;

procedure __DC__SetTCustomColorListBox__DefaultColorColor(Instance : TObject; Params : PVariantArgList);
begin
TCustomColorListBox(Instance).DefaultColorColor:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomColorListBox__NoneColorColor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomColorListBox(Instance).NoneColorColor;
end;

procedure __DC__SetTCustomColorListBox__NoneColorColor(Instance : TObject; Params : PVariantArgList);
begin
TCustomColorListBox(Instance).NoneColorColor:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomControlBar__Picture(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomControlBar(Instance).Picture);
end;

procedure __DC__SetTCustomControlBar__Picture(Instance : TObject; Params : PVariantArgList);
begin
TCustomControlBar(Instance).Picture:=TPicture(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomFlowPanel__AutoWrap(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomFlowPanel(Instance).AutoWrap;
end;

procedure __DC__SetTCustomFlowPanel__AutoWrap(Instance : TObject; Params : PVariantArgList);
begin
TCustomFlowPanel(Instance).AutoWrap:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomFlowPanel__FlowStyle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomFlowPanel(Instance).FlowStyle;
end;

procedure __DC__SetTCustomFlowPanel__FlowStyle(Instance : TObject; Params : PVariantArgList);
begin
TCustomFlowPanel(Instance).FlowStyle:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomGridPanel__ColumnSpanIndex(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomGridPanel(Instance).ColumnSpanIndex[OleVariant(Params^[1]), OleVariant(Params^[0])];
end;

function __DC__GetTCustomGridPanel__CellCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomGridPanel(Instance).CellCount;
end;

function __DC__GetTCustomGridPanel__CellSize(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TPoint__Wrapper;
begin
__wrapper := __TPoint__Wrapper.Create;
__wrapper.fR := TCustomGridPanel(Instance).CellSize[OleVariant(Params^[1]), OleVariant(Params^[0])];
result := IUnknown(__wrapper) as IDispatch;
end;

function __DC__GetTCustomGridPanel__CellRect(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TRect__Wrapper;
begin
__wrapper := __TRect__Wrapper.Create;
__wrapper.fR := TCustomGridPanel(Instance).CellRect[OleVariant(Params^[1]), OleVariant(Params^[0])];
result := IUnknown(__wrapper) as IDispatch;
end;

function __DC__GetTCustomGridPanel__ColumnCollection(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomGridPanel(Instance).ColumnCollection);
end;

procedure __DC__SetTCustomGridPanel__ColumnCollection(Instance : TObject; Params : PVariantArgList);
begin
TCustomGridPanel(Instance).ColumnCollection:=TColumnCollection(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomGridPanel__ControlCollection(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomGridPanel(Instance).ControlCollection);
end;

procedure __DC__SetTCustomGridPanel__ControlCollection(Instance : TObject; Params : PVariantArgList);
begin
TCustomGridPanel(Instance).ControlCollection:=TControlCollection(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomGridPanel__ExpandStyle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomGridPanel(Instance).ExpandStyle;
end;

procedure __DC__SetTCustomGridPanel__ExpandStyle(Instance : TObject; Params : PVariantArgList);
begin
TCustomGridPanel(Instance).ExpandStyle:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomGridPanel__RowCollection(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomGridPanel(Instance).RowCollection);
end;

procedure __DC__SetTCustomGridPanel__RowCollection(Instance : TObject; Params : PVariantArgList);
begin
TCustomGridPanel(Instance).RowCollection:=TRowCollection(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomGridPanel__RowSpanIndex(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomGridPanel(Instance).RowSpanIndex[OleVariant(Params^[1]), OleVariant(Params^[0])];
end;

function __DC__GetTCustomLabeledEdit__EditLabel(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomLabeledEdit(Instance).EditLabel);
end;

function __DC__GetTCustomLabeledEdit__LabelPosition(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomLabeledEdit(Instance).LabelPosition;
end;

procedure __DC__SetTCustomLabeledEdit__LabelPosition(Instance : TObject; Params : PVariantArgList);
begin
TCustomLabeledEdit(Instance).LabelPosition:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomLabeledEdit__LabelSpacing(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomLabeledEdit(Instance).LabelSpacing;
end;

procedure __DC__SetTCustomLabeledEdit__LabelSpacing(Instance : TObject; Params : PVariantArgList);
begin
TCustomLabeledEdit(Instance).LabelSpacing:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomPanel__ParentBackground(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomPanel(Instance).ParentBackground;
end;

procedure __DC__SetTCustomPanel__ParentBackground(Instance : TObject; Params : PVariantArgList);
begin
TCustomPanel(Instance).ParentBackground:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomRadioGroup__Buttons(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomRadioGroup(Instance).Buttons[OleVariant(Params^[0])]);
end;

function __DC__GetTCustomTrayIcon__Animate(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomTrayIcon(Instance).Animate;
end;

procedure __DC__SetTCustomTrayIcon__Animate(Instance : TObject; Params : PVariantArgList);
begin
TCustomTrayIcon(Instance).Animate:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomTrayIcon__AnimateInterval(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomTrayIcon(Instance).AnimateInterval;
end;

procedure __DC__SetTCustomTrayIcon__AnimateInterval(Instance : TObject; Params : PVariantArgList);
begin
TCustomTrayIcon(Instance).AnimateInterval:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomTrayIcon__Hint(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomTrayIcon(Instance).Hint;
end;

procedure __DC__SetTCustomTrayIcon__Hint(Instance : TObject; Params : PVariantArgList);
begin
TCustomTrayIcon(Instance).Hint:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomTrayIcon__BalloonHint(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomTrayIcon(Instance).BalloonHint;
end;

procedure __DC__SetTCustomTrayIcon__BalloonHint(Instance : TObject; Params : PVariantArgList);
begin
TCustomTrayIcon(Instance).BalloonHint:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomTrayIcon__BalloonTitle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomTrayIcon(Instance).BalloonTitle;
end;

procedure __DC__SetTCustomTrayIcon__BalloonTitle(Instance : TObject; Params : PVariantArgList);
begin
TCustomTrayIcon(Instance).BalloonTitle:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomTrayIcon__BalloonTimeout(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomTrayIcon(Instance).BalloonTimeout;
end;

procedure __DC__SetTCustomTrayIcon__BalloonTimeout(Instance : TObject; Params : PVariantArgList);
begin
TCustomTrayIcon(Instance).BalloonTimeout:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomTrayIcon__Icon(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomTrayIcon(Instance).Icon);
end;

procedure __DC__SetTCustomTrayIcon__Icon(Instance : TObject; Params : PVariantArgList);
begin
TCustomTrayIcon(Instance).Icon:=TIcon(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomTrayIcon__Icons(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomTrayIcon(Instance).Icons);
end;

procedure __DC__SetTCustomTrayIcon__Icons(Instance : TObject; Params : PVariantArgList);
begin
TCustomTrayIcon(Instance).Icons:=TImageList(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomTrayIcon__IconIndex(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomTrayIcon(Instance).IconIndex;
end;

procedure __DC__SetTCustomTrayIcon__IconIndex(Instance : TObject; Params : PVariantArgList);
begin
TCustomTrayIcon(Instance).IconIndex:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomTrayIcon__PopupMenu(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomTrayIcon(Instance).PopupMenu);
end;

procedure __DC__SetTCustomTrayIcon__PopupMenu(Instance : TObject; Params : PVariantArgList);
begin
TCustomTrayIcon(Instance).PopupMenu:=TPopupMenu(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomTrayIcon__Visible(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomTrayIcon(Instance).Visible;
end;

procedure __DC__SetTCustomTrayIcon__Visible(Instance : TObject; Params : PVariantArgList);
begin
TCustomTrayIcon(Instance).Visible:=OleVariant(Params^[0]);
end;

function __DC__GetTHeader__SectionWidth(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := THeader(Instance).SectionWidth[OleVariant(Params^[0])];
end;

procedure __DC__SetTHeader__SectionWidth(Instance : TObject; Params : PVariantArgList);
begin
THeader(Instance).SectionWidth[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTImage__Canvas(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TImage(Instance).Canvas);
end;

function __DC__GetTPaintBox__Canvas(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TPaintBox(Instance).Canvas);
end;

function __DC__GetTSplitter__Canvas(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TSplitter(Instance).Canvas);
end;

procedure __RegisterProps;
begin
RegisterIndexedProperty(TCellCollection,'Items',1,True,__DC__GetTCellCollection__Items,__DC__SetTCellCollection__Items);
RegisterProperty(TControlBar,'Canvas',__DC__GetTControlBar__Canvas,nil);
RegisterIndexedProperty(TControlCollection,'Controls',2,False,__DC__GetTControlCollection__Controls,__DC__SetTControlCollection__Controls);
RegisterIndexedProperty(TControlCollection,'ControlItems',2,False,__DC__GetTControlCollection__ControlItems,nil);
RegisterIndexedProperty(TControlCollection,'Items',1,True,__DC__GetTControlCollection__Items,__DC__SetTControlCollection__Items);
RegisterProperty(TCustomColorBox,'Style',__DC__GetTCustomColorBox__Style,__DC__SetTCustomColorBox__Style);
RegisterIndexedProperty(TCustomColorBox,'Colors',1,False,__DC__GetTCustomColorBox__Colors,nil);
RegisterIndexedProperty(TCustomColorBox,'ColorNames',1,False,__DC__GetTCustomColorBox__ColorNames,nil);
RegisterProperty(TCustomColorBox,'Selected',__DC__GetTCustomColorBox__Selected,__DC__SetTCustomColorBox__Selected);
RegisterProperty(TCustomColorBox,'DefaultColorColor',__DC__GetTCustomColorBox__DefaultColorColor,__DC__SetTCustomColorBox__DefaultColorColor);
RegisterProperty(TCustomColorBox,'NoneColorColor',__DC__GetTCustomColorBox__NoneColorColor,__DC__SetTCustomColorBox__NoneColorColor);
RegisterProperty(TCustomColorListBox,'Style',__DC__GetTCustomColorListBox__Style,__DC__SetTCustomColorListBox__Style);
RegisterIndexedProperty(TCustomColorListBox,'Colors',1,False,__DC__GetTCustomColorListBox__Colors,nil);
RegisterIndexedProperty(TCustomColorListBox,'ColorNames',1,False,__DC__GetTCustomColorListBox__ColorNames,nil);
RegisterProperty(TCustomColorListBox,'Selected',__DC__GetTCustomColorListBox__Selected,__DC__SetTCustomColorListBox__Selected);
RegisterProperty(TCustomColorListBox,'DefaultColorColor',__DC__GetTCustomColorListBox__DefaultColorColor,__DC__SetTCustomColorListBox__DefaultColorColor);
RegisterProperty(TCustomColorListBox,'NoneColorColor',__DC__GetTCustomColorListBox__NoneColorColor,__DC__SetTCustomColorListBox__NoneColorColor);
RegisterProperty(TCustomControlBar,'Picture',__DC__GetTCustomControlBar__Picture,__DC__SetTCustomControlBar__Picture);
RegisterProperty(TCustomFlowPanel,'AutoWrap',__DC__GetTCustomFlowPanel__AutoWrap,__DC__SetTCustomFlowPanel__AutoWrap);
RegisterProperty(TCustomFlowPanel,'FlowStyle',__DC__GetTCustomFlowPanel__FlowStyle,__DC__SetTCustomFlowPanel__FlowStyle);
RegisterIndexedProperty(TCustomGridPanel,'ColumnSpanIndex',2,False,__DC__GetTCustomGridPanel__ColumnSpanIndex,nil);
RegisterProperty(TCustomGridPanel,'CellCount',__DC__GetTCustomGridPanel__CellCount,nil);
RegisterIndexedProperty(TCustomGridPanel,'CellSize',2,False,__DC__GetTCustomGridPanel__CellSize,nil);
RegisterIndexedProperty(TCustomGridPanel,'CellRect',2,False,__DC__GetTCustomGridPanel__CellRect,nil);
RegisterProperty(TCustomGridPanel,'ColumnCollection',__DC__GetTCustomGridPanel__ColumnCollection,__DC__SetTCustomGridPanel__ColumnCollection);
RegisterProperty(TCustomGridPanel,'ControlCollection',__DC__GetTCustomGridPanel__ControlCollection,__DC__SetTCustomGridPanel__ControlCollection);
RegisterProperty(TCustomGridPanel,'ExpandStyle',__DC__GetTCustomGridPanel__ExpandStyle,__DC__SetTCustomGridPanel__ExpandStyle);
RegisterProperty(TCustomGridPanel,'RowCollection',__DC__GetTCustomGridPanel__RowCollection,__DC__SetTCustomGridPanel__RowCollection);
RegisterIndexedProperty(TCustomGridPanel,'RowSpanIndex',2,False,__DC__GetTCustomGridPanel__RowSpanIndex,nil);
RegisterProperty(TCustomLabeledEdit,'EditLabel',__DC__GetTCustomLabeledEdit__EditLabel,nil);
RegisterProperty(TCustomLabeledEdit,'LabelPosition',__DC__GetTCustomLabeledEdit__LabelPosition,__DC__SetTCustomLabeledEdit__LabelPosition);
RegisterProperty(TCustomLabeledEdit,'LabelSpacing',__DC__GetTCustomLabeledEdit__LabelSpacing,__DC__SetTCustomLabeledEdit__LabelSpacing);
RegisterProperty(TCustomPanel,'ParentBackground',__DC__GetTCustomPanel__ParentBackground,__DC__SetTCustomPanel__ParentBackground);
RegisterIndexedProperty(TCustomRadioGroup,'Buttons',1,False,__DC__GetTCustomRadioGroup__Buttons,nil);
RegisterProperty(TCustomTrayIcon,'Animate',__DC__GetTCustomTrayIcon__Animate,__DC__SetTCustomTrayIcon__Animate);
RegisterProperty(TCustomTrayIcon,'AnimateInterval',__DC__GetTCustomTrayIcon__AnimateInterval,__DC__SetTCustomTrayIcon__AnimateInterval);
RegisterProperty(TCustomTrayIcon,'Hint',__DC__GetTCustomTrayIcon__Hint,__DC__SetTCustomTrayIcon__Hint);
RegisterProperty(TCustomTrayIcon,'BalloonHint',__DC__GetTCustomTrayIcon__BalloonHint,__DC__SetTCustomTrayIcon__BalloonHint);
RegisterProperty(TCustomTrayIcon,'BalloonTitle',__DC__GetTCustomTrayIcon__BalloonTitle,__DC__SetTCustomTrayIcon__BalloonTitle);
RegisterProperty(TCustomTrayIcon,'BalloonTimeout',__DC__GetTCustomTrayIcon__BalloonTimeout,__DC__SetTCustomTrayIcon__BalloonTimeout);
RegisterProperty(TCustomTrayIcon,'Icon',__DC__GetTCustomTrayIcon__Icon,__DC__SetTCustomTrayIcon__Icon);
RegisterProperty(TCustomTrayIcon,'Icons',__DC__GetTCustomTrayIcon__Icons,__DC__SetTCustomTrayIcon__Icons);
RegisterProperty(TCustomTrayIcon,'IconIndex',__DC__GetTCustomTrayIcon__IconIndex,__DC__SetTCustomTrayIcon__IconIndex);
RegisterProperty(TCustomTrayIcon,'PopupMenu',__DC__GetTCustomTrayIcon__PopupMenu,__DC__SetTCustomTrayIcon__PopupMenu);
RegisterProperty(TCustomTrayIcon,'Visible',__DC__GetTCustomTrayIcon__Visible,__DC__SetTCustomTrayIcon__Visible);
RegisterIndexedProperty(THeader,'SectionWidth',1,False,__DC__GetTHeader__SectionWidth,__DC__SetTHeader__SectionWidth);
RegisterProperty(TImage,'Canvas',__DC__GetTImage__Canvas,nil);
RegisterProperty(TPaintBox,'Canvas',__DC__GetTPaintBox__Canvas,nil);
RegisterProperty(TSplitter,'Canvas',__DC__GetTSplitter__Canvas,nil);
end;

const __ConstNames0 : array[0..60] of string = (
'stRectangle'
,'stSquare'
,'stRoundRect'
,'stRoundSquare'
,'stEllipse'
,'stCircle'
,'bsLowered'
,'bsRaised'
,'bsBox'
,'bsFrame'
,'bsTopLine'
,'bsBottomLine'
,'bsLeftLine'
,'bsRightLine'
,'bsSpacer'
,'fsLeftRightTopBottom'
,'fsRightLeftTopBottom'
,'fsLeftRightBottomTop'
,'fsRightLeftBottomTop'
,'fsTopBottomLeftRight'
,'fsBottomTopLeftRight'
,'fsTopBottomRightLeft'
,'fsBottomTopRightLeft'
,'ssAbsolute'
,'ssPercent'
,'ssAuto'
,'emAddRows'
,'emAddColumns'
,'emFixedSize'
,'rsNone'
,'rsLine'
,'rsUpdate'
,'rsPattern'
,'bpoGrabber'
,'bpoFrame'
,'bpoGradient'
,'bpoRoundRect'
,'dsNormal'
,'dsGradient'
,'ceNone'
,'ceSmall'
,'ceMedium'
,'ceLarge'
,'lpAbove'
,'lpBelow'
,'lpLeft'
,'lpRight'
,'NoColorSelected'
,'cbStandardColors'
,'cbExtendedColors'
,'cbSystemColors'
,'cbIncludeNone'
,'cbIncludeDefault'
,'cbCustomColor'
,'cbPrettyNames'
,'cbCustomColors'
,'WM_SYSTEM_TRAY_MESSAGE'
,'bfNone'
,'bfInfo'
,'bfWarning'
,'bfError'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,stRectangle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,stSquare));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,stRoundRect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,stRoundSquare));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,stEllipse));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,stCircle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,bsLowered));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,bsRaised));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,bsBox));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,bsFrame));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,bsTopLine));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,bsBottomLine));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,bsLeftLine));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,bsRightLine));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,bsSpacer));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,fsLeftRightTopBottom));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,fsRightLeftTopBottom));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,fsLeftRightBottomTop));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,fsRightLeftBottomTop));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,fsTopBottomLeftRight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,fsBottomTopLeftRight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,fsTopBottomRightLeft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,fsBottomTopRightLeft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,ssAbsolute));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,ssPercent));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,ssAuto));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,emAddRows));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,emAddColumns));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,emFixedSize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,rsNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,rsLine));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,rsUpdate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,rsPattern));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,bpoGrabber));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,bpoFrame));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,bpoGradient));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,bpoRoundRect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,dsNormal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,dsGradient));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,ceNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,ceSmall));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,ceMedium));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,ceLarge));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,lpAbove));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,lpBelow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,lpLeft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,lpRight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,NoColorSelected));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,cbStandardColors));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,cbExtendedColors));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,cbSystemColors));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,cbIncludeNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,cbIncludeDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,cbCustomColor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,cbPrettyNames));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,cbCustomColors));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,WM_SYSTEM_TRAY_MESSAGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,bfNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,bfInfo));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,bfWarning));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,bfError));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..36] of TClass = (
EGridPanelException,
TBevel,
TBoundLabel,
TCellCollection,
TCellItem,
TColorBox,
TColorListBox,
TColumnCollection,
TColumnItem,
TControlBar,
TControlCollection,
TControlItem,
TCustomColorBox,
TCustomColorListBox,
TCustomControlBar,
TCustomFlowPanel,
TCustomGridPanel,
TCustomLabeledEdit,
TCustomPanel,
TCustomRadioGroup,
TCustomTrayIcon,
TFlowPanel,
TGridPanel,
THeader,
TImage,
TLabeledEdit,
TNotebook,
TPage,
TPaintBox,
TPanel,
TRadioGroup,
TRowCollection,
TRowItem,
TShape,
TSplitter,
TTimer,
TTrayIcon
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..1] of string = (
'Frame3D'
,'NotebookHandlesNeeded'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(TCanvas),
TypeInfo(IDispatch),
TypeInfo(TColor),
TypeInfo(TColor),
TypeInfo(Integer)],Addr(____Frame3D__Wrapper),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(TNotebook)],Addr(NotebookHandlesNeeded),cRegister);

RegRegisterMethod(TCellCollection,'Owner',TypeInfo(_T2),[TypeInfo(TCustomGridPanel)],Addr(TCellCollection.Owner));

RegisterProc(TColumnCollection,'Create',mtConstructor,TypeInfo(_T3),[
TypeInfo(TPersistent)],Addr(TColumnCollection.Create),cRegister);

RegRegisterMethod(TColumnCollection,'Add',TypeInfo(_T4),[TypeInfo(TColumnItem)],Addr(TColumnCollection.Add));

RegisterProc(TControlCollection,'Create',mtConstructor,TypeInfo(_T5),[
TypeInfo(TPersistent)],Addr(TControlCollection.Create),cRegister);

RegRegisterMethod(TControlCollection,'Add',TypeInfo(_T6),[TypeInfo(TControlItem)],Addr(TControlCollection.Add));

RegisterProc(TControlCollection,'AddControl',mtScriptMethod,TypeInfo(_T7),[
TypeInfo(TControl),
TypeInfo(Integer),
TypeInfo(Integer)],Addr(__TControlCollection__AddControl__Wrapper),cRegister);

RegRegisterMethod(TControlCollection,'RemoveControl',TypeInfo(_T8),[
TypeInfo(TControl)],Addr(TControlCollection.RemoveControl));

RegRegisterMethod(TControlCollection,'IndexOf',TypeInfo(_T9),[
TypeInfo(TControl),TypeInfo(Integer)],Addr(TControlCollection.IndexOf));

RegRegisterMethod(TControlCollection,'Owner',TypeInfo(_T10),[TypeInfo(TCustomGridPanel)],Addr(TControlCollection.Owner));

RegisterProc(TControlItem,'SetLocation',mtScriptMethod,TypeInfo(_T11),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Boolean)],Addr(__TControlItem__SetLocation__Wrapper),cRegister);

//RegRegisterMethod(TCustomColorBox,'PickCustomColor',TypeInfo(_T12),[TypeInfo(Boolean)], pointer(304));
RegRegisterMethod(TCustomColorBox,'PickCustomColor',TypeInfo(_T12),[TypeInfo(Boolean)],  getVMTProcAddr('TCustomColorBox','PickCustomColor',304));


//RegRegisterMethod(TCustomColorListBox,'PickCustomColor',TypeInfo(_T13),[TypeInfo(Boolean)], pointer(280));
RegRegisterMethod(TCustomColorListBox,'PickCustomColor',TypeInfo(_T13),[TypeInfo(Boolean)],  getVMTProcAddr('TCustomColorListBox','PickCustomColor',280));


//RegRegisterMethod(TCustomControlBar,'DoBandMove',TypeInfo(_T14),[TypeInfo(TControl),TypeInfo(IDispatch)], pointer(220));
RegRegisterMethod(TCustomControlBar,'DoBandMove',TypeInfo(_T14),[TypeInfo(TControl),TypeInfo(IDispatch)],  getVMTProcAddr('TCustomControlBar','DoBandMove',220));


//RegRegisterMethod(TCustomControlBar,'DoBandPaint',TypeInfo(_T15),[TypeInfo(TControl),TypeInfo(TCanvas),TypeInfo(IDispatch),TypeInfo(TBandPaintOptions)], pointer(224));
RegRegisterMethod(TCustomControlBar,'DoBandPaint',TypeInfo(_T15),[TypeInfo(TControl),TypeInfo(TCanvas),TypeInfo(IDispatch),TypeInfo(TBandPaintOptions)],  getVMTProcAddr('TCustomControlBar','DoBandPaint',224));


RegRegisterMethod(TCustomControlBar,'DoBeginBandMove',TypeInfo(_T16),[
TypeInfo(TControl),TypeInfo(Boolean)], pointer(MinVMTOffset - 79));

RegRegisterMethod(TCustomControlBar,'DoEndBandMove',TypeInfo(_T17),[
TypeInfo(TControl)], pointer(MinVMTOffset - 80));

RegisterProc(TCustomControlBar,'DragControl',mtScriptMethod,TypeInfo(_T18),[
TypeInfo(TControl),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Boolean),TypeInfo(Boolean)],Addr(__TCustomControlBar__DragControl__Wrapper),cRegister);

//RegRegisterMethod(TCustomControlBar,'GetControlInfo',TypeInfo(_T19),[TypeInfo(TControl),TypeInfo(IDispatch),TypeInfo(Integer),TypeInfo(Integer)], pointer(232));
RegRegisterMethod(TCustomControlBar,'GetControlInfo',TypeInfo(_T19),[TypeInfo(TControl),TypeInfo(IDispatch),TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TCustomControlBar','GetControlInfo',232));


//RegRegisterMethod(TCustomControlBar,'PaintControlFrame',TypeInfo(_T20),[TypeInfo(TCanvas),TypeInfo(TControl),TypeInfo(IDispatch)], pointer(236));
RegRegisterMethod(TCustomControlBar,'PaintControlFrame',TypeInfo(_T20),[TypeInfo(TCanvas),TypeInfo(TControl),TypeInfo(IDispatch)],  getVMTProcAddr('TCustomControlBar','PaintControlFrame',236));


//RegRegisterMethod(TCustomControlBar,'StickControls',TypeInfo(_T21),NoParams, pointer(240));
RegRegisterMethod(TCustomControlBar,'StickControls',TypeInfo(_T21),NoParams,  getVMTProcAddr('TCustomControlBar','StickControls',240));


RegRegisterMethod(TCustomFlowPanel,'GetControlIndex',TypeInfo(_T22),[
TypeInfo(TControl),TypeInfo(Integer)],Addr(TCustomFlowPanel.GetControlIndex));

RegRegisterMethod(TCustomFlowPanel,'SetControlIndex',TypeInfo(_T23),[
TypeInfo(TControl),
TypeInfo(Integer)],Addr(TCustomFlowPanel.SetControlIndex));

RegRegisterMethod(TCustomGridPanel,'IsColumnEmpty',TypeInfo(_T24),[
TypeInfo(Integer),TypeInfo(Boolean)],Addr(TCustomGridPanel.IsColumnEmpty));

RegRegisterMethod(TCustomGridPanel,'IsRowEmpty',TypeInfo(_T25),[
TypeInfo(Integer),TypeInfo(Boolean)],Addr(TCustomGridPanel.IsRowEmpty));

RegRegisterMethod(TCustomLabeledEdit,'SetupInternalLabel',TypeInfo(_T26),NoParams,Addr(TCustomLabeledEdit.SetupInternalLabel));

//RegRegisterMethod(TCustomRadioGroup,'CanModify',TypeInfo(_T27),[TypeInfo(Boolean)], pointer(220));
RegRegisterMethod(TCustomRadioGroup,'CanModify',TypeInfo(_T27),[TypeInfo(Boolean)],  getVMTProcAddr('TCustomRadioGroup','CanModify',220));


//RegRegisterMethod(TCustomTrayIcon,'SetVisible',TypeInfo(_T28),[TypeInfo(Boolean)], pointer(48));
RegRegisterMethod(TCustomTrayIcon,'SetVisible',TypeInfo(_T28),[TypeInfo(Boolean)],  getVMTProcAddr('TCustomTrayIcon','SetVisible',48));


//RegRegisterMethod(TCustomTrayIcon,'SetIconIndex',TypeInfo(_T29),[TypeInfo(Integer)], pointer(52));
RegRegisterMethod(TCustomTrayIcon,'SetIconIndex',TypeInfo(_T29),[TypeInfo(Integer)],  getVMTProcAddr('TCustomTrayIcon','SetIconIndex',52));


//RegRegisterMethod(TCustomTrayIcon,'WindowProc',TypeInfo(_T30),[TypeInfo(IDispatch)], pointer(56));
RegRegisterMethod(TCustomTrayIcon,'WindowProc',TypeInfo(_T30),[TypeInfo(IDispatch)],  getVMTProcAddr('TCustomTrayIcon','WindowProc',56));


//RegRegisterMethod(TCustomTrayIcon,'DoOnAnimate',TypeInfo(_T31),[TypeInfo(TObject)], pointer(60));
RegRegisterMethod(TCustomTrayIcon,'DoOnAnimate',TypeInfo(_T31),[TypeInfo(TObject)],  getVMTProcAddr('TCustomTrayIcon','DoOnAnimate',60));


RegRegisterMethod(TCustomTrayIcon,'Refresh',TypeInfo(_T32),NoParams,Addr(TCustomTrayIcon.Refresh));

RegRegisterMethod(TCustomTrayIcon,'SetDefaultIcon',TypeInfo(_T33),NoParams,Addr(TCustomTrayIcon.SetDefaultIcon));

//RegRegisterMethod(TCustomTrayIcon,'ShowBalloonHint',TypeInfo(_T34),NoParams, pointer(64));
RegRegisterMethod(TCustomTrayIcon,'ShowBalloonHint',TypeInfo(_T34),NoParams,  getVMTProcAddr('TCustomTrayIcon','ShowBalloonHint',64));


RegRegisterMethod(THeader,'Sizing',TypeInfo(_T35),[
TypeInfo(Integer),
TypeInfo(Integer)], pointer(MinVMTOffset - 79));

RegRegisterMethod(THeader,'Sized',TypeInfo(_T36),[
TypeInfo(Integer),
TypeInfo(Integer)], pointer(MinVMTOffset - 80));

RegRegisterMethod(TImage,'Progress',TypeInfo(_T37),[
TypeInfo(TObject),
TypeInfo(TProgressStage),
TypeInfo(Byte),
TypeInfo(Boolean),
TypeInfo(IDispatch),
TypeInfo(string)], pointer(MinVMTOffset - 57));

RegisterProc(TRowCollection,'Create',mtConstructor,TypeInfo(_T38),[
TypeInfo(TPersistent)],Addr(TRowCollection.Create),cRegister);

RegRegisterMethod(TRowCollection,'Add',TypeInfo(_T39),[TypeInfo(TRowItem)],Addr(TRowCollection.Add));

RegRegisterMethod(TShape,'StyleChanged',TypeInfo(_T40),[
TypeInfo(TObject)],Addr(TShape.StyleChanged));

//RegRegisterMethod(TSplitter,'CanResize',TypeInfo(_T41),[TypeInfo(Integer),TypeInfo(Boolean)], pointer(148));
RegRegisterMethod(TSplitter,'CanResize',TypeInfo(_T41),[TypeInfo(Integer),TypeInfo(Boolean)],  getVMTProcAddr('TSplitter','CanResize',148));


//RegRegisterMethod(TSplitter,'DoCanResize',TypeInfo(_T42),[TypeInfo(Integer),TypeInfo(Boolean)], pointer(152));
RegRegisterMethod(TSplitter,'DoCanResize',TypeInfo(_T42),[TypeInfo(Integer),TypeInfo(Boolean)],  getVMTProcAddr('TSplitter','DoCanResize',152));


RegRegisterMethod(TSplitter,'StopSizing',TypeInfo(_T43),NoParams, pointer(MinVMTOffset - 57));

RegRegisterMethod(TTimer,'Timer',TypeInfo(_T44),NoParams, pointer(MinVMTOffset - 16));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
RegisterEvent(TypeInfo(TBandDragEvent),[
TypeInfo(TObject),
TypeInfo(TControl),
TypeInfo(Boolean)]);

{RegisterEvent(TypeInfo(TBandInfoEvent),[
TypeInfo(TObject),
TypeInfo(TControl),
TypeInfo(IDispatch),
TypeInfo(Integer),
TypeInfo(Integer)]);}

{RegisterEvent(TypeInfo(TBandMoveEvent),[
TypeInfo(TObject),
TypeInfo(TControl),
TypeInfo(IDispatch)]);}

{RegisterEvent(TypeInfo(TBandPaintEvent),[
TypeInfo(TObject),
TypeInfo(TControl),
TypeInfo(TCanvas),
TypeInfo(IDispatch),
TypeInfo(TBandPaintOptions)]);}

RegisterEvent(TypeInfo(TBeginBandMoveEvent),[
TypeInfo(TObject),
TypeInfo(TControl),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TEndBandMoveEvent),[
TypeInfo(TObject),
TypeInfo(TControl)]);

RegisterEvent(TypeInfo(TGetColorsEvent),[
TypeInfo(TCustomColorBox),
TypeInfo(TStrings)]);

RegisterEvent(TypeInfo(TLBGetColorsEvent),[
TypeInfo(TCustomColorListBox),
TypeInfo(TStrings)]);

RegisterEvent(TypeInfo(TSectionEvent),[
TypeInfo(TObject),
TypeInfo(Integer),
TypeInfo(Integer)]);

RegisterEvent(TypeInfo(TSplitterCanResizeEvent),[
TypeInfo(TObject),
TypeInfo(Integer),
TypeInfo(Boolean)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
