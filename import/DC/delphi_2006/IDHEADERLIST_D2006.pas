{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDHEADERLIST_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdHeaderList;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (p0 : TStrings) of object;

_T1 = _T0;

_T2 = procedure  of object;

_T3 = procedure (const p0 : string;
p1 : TStrings) of object;

_T4 = function (const p0 : string): Integer of object;

function __DC__GetTIdHeaderList__Names(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHeaderList(Instance).Names[OleVariant(Params^[0])];
end;

function __DC__GetTIdHeaderList__Values(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHeaderList(Instance).Values[OleVariant(Params^[0])];
end;

procedure __DC__SetTIdHeaderList__Values(Instance : TObject; Params : PVariantArgList);
begin
TIdHeaderList(Instance).Values[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTIdHeaderList__NameValueSeparator(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHeaderList(Instance).NameValueSeparator;
end;

procedure __DC__SetTIdHeaderList__NameValueSeparator(Instance : TObject; Params : PVariantArgList);
begin
TIdHeaderList(Instance).NameValueSeparator:=OleVariant(Params^[0]);
end;

function __DC__GetTIdHeaderList__CaseSensitive(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHeaderList(Instance).CaseSensitive;
end;

procedure __DC__SetTIdHeaderList__CaseSensitive(Instance : TObject; Params : PVariantArgList);
begin
TIdHeaderList(Instance).CaseSensitive:=OleVariant(Params^[0]);
end;

function __DC__GetTIdHeaderList__UnfoldLines(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHeaderList(Instance).UnfoldLines;
end;

procedure __DC__SetTIdHeaderList__UnfoldLines(Instance : TObject; Params : PVariantArgList);
begin
TIdHeaderList(Instance).UnfoldLines:=OleVariant(Params^[0]);
end;

function __DC__GetTIdHeaderList__FoldLines(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHeaderList(Instance).FoldLines;
end;

procedure __DC__SetTIdHeaderList__FoldLines(Instance : TObject; Params : PVariantArgList);
begin
TIdHeaderList(Instance).FoldLines:=OleVariant(Params^[0]);
end;

function __DC__GetTIdHeaderList__FoldLength(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHeaderList(Instance).FoldLength;
end;

procedure __DC__SetTIdHeaderList__FoldLength(Instance : TObject; Params : PVariantArgList);
begin
TIdHeaderList(Instance).FoldLength:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterIndexedProperty(TIdHeaderList,'Names',1,False,__DC__GetTIdHeaderList__Names,nil);
RegisterIndexedProperty(TIdHeaderList,'Values',1,False,__DC__GetTIdHeaderList__Values,__DC__SetTIdHeaderList__Values);
RegisterProperty(TIdHeaderList,'NameValueSeparator',__DC__GetTIdHeaderList__NameValueSeparator,__DC__SetTIdHeaderList__NameValueSeparator);
RegisterProperty(TIdHeaderList,'CaseSensitive',__DC__GetTIdHeaderList__CaseSensitive,__DC__SetTIdHeaderList__CaseSensitive);
RegisterProperty(TIdHeaderList,'UnfoldLines',__DC__GetTIdHeaderList__UnfoldLines,__DC__SetTIdHeaderList__UnfoldLines);
RegisterProperty(TIdHeaderList,'FoldLines',__DC__GetTIdHeaderList__FoldLines,__DC__SetTIdHeaderList__FoldLines);
RegisterProperty(TIdHeaderList,'FoldLength',__DC__GetTIdHeaderList__FoldLength,__DC__SetTIdHeaderList__FoldLength);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..0] of TClass = (
TIdHeaderList
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegRegisterMethod(TIdHeaderList,'AddStdValues',TypeInfo(_T0),[
TypeInfo(TStrings)],Addr(TIdHeaderList.AddStdValues));

RegRegisterMethod(TIdHeaderList,'ConvertToStdValues',TypeInfo(_T1),[
TypeInfo(TStrings)],Addr(TIdHeaderList.ConvertToStdValues));

RegisterProc(TIdHeaderList,'Create',mtConstructor,TypeInfo(_T2),NoParams,Addr(TIdHeaderList.Create),cRegister);

RegRegisterMethod(TIdHeaderList,'Extract',TypeInfo(_T3),[
TypeInfo(string),
TypeInfo(TStrings)],Addr(TIdHeaderList.Extract));

RegRegisterMethod(TIdHeaderList,'IndexOfName',TypeInfo(_T4),[
TypeInfo(string),TypeInfo(Integer)],Addr(TIdHeaderList.IndexOfName));

end;
initialization
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
