{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit INVOKER_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Classes,
  Typinfo,
  IntfInfo,
  InvokeRegistry,
  WSDLIntf,
  Invoker;
function ConvertTIntfMetaDataToVariant(var R : TIntfMetaData) : OleVariant;
function ConvertVariantToTIntfMetaData(const V : OleVariant) : TIntfMetaData;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TIntfMetaData__Wrapper = class(TDCRecordWrapper)
private
fR : TIntfMetaData;
public
function GetRecordPtr : pointer; override;
published
procedure setName(const val : AnsiString);
function getName : AnsiString;
property Name : AnsiString read getName write setName;
procedure setUnitName(const val : AnsiString);
function getUnitName : AnsiString;
property UnitName : AnsiString read getUnitName write setUnitName;
procedure setNumAnc(const val : Integer);
function getNumAnc : Integer;
property NumAnc : Integer read getNumAnc write setNumAnc;
end;
type
_T0 = procedure (const p0 : TObject;
const p1 : IDispatch;
const p2 : Integer;
const p3 : TInvContext) of object;

_T1 = procedure  of object;

function __TIntfMetaData__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIntfMetaData__Wrapper.setName(const val : AnsiString);
begin
TIntfMetaData(GetRecordPtr^).Name := val;
end;
function __TIntfMetaData__Wrapper.getName : AnsiString;
begin
result := TIntfMetaData(GetRecordPtr^).Name;
end;
procedure __TIntfMetaData__Wrapper.setUnitName(const val : AnsiString);
begin
TIntfMetaData(GetRecordPtr^).UnitName := val;
end;
function __TIntfMetaData__Wrapper.getUnitName : AnsiString;
begin
result := TIntfMetaData(GetRecordPtr^).UnitName;
end;
procedure __TIntfMetaData__Wrapper.setNumAnc(const val : Integer);
begin
TIntfMetaData(GetRecordPtr^).NumAnc := val;
end;
function __TIntfMetaData__Wrapper.getNumAnc : Integer;
begin
result := TIntfMetaData(GetRecordPtr^).NumAnc;
end;
procedure __TInterfaceInvoker__Invoke__Wrapper(__Instance : TInterfaceInvoker;
const p0 : TObject;
const p1 : IDispatch;
const p2 : Integer;
const p3 : TInvContext);
var
__p1 : ^TIntfMetaData;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
TInterfaceInvoker(__Instance).Invoke(p0,__p1^,p2,p3);
end;


type __TIntfMetaData__Wrapper__ = class(__TIntfMetaData__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIntfMetaData__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIntfMetaDataToVariant(var R : TIntfMetaData) : OleVariant;
var
__rw : __TIntfMetaData__Wrapper__;
begin
__rw := __TIntfMetaData__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIntfMetaData(const V : OleVariant) : TIntfMetaData;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIntfMetaData((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..0] of TClass = (
TInterfaceInvoker
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegRegisterMethod(TInterfaceInvoker,'Invoke',TypeInfo(_T0),[
TypeInfo(TObject),
TypeInfo(IDispatch),
TypeInfo(Integer),
TypeInfo(TInvContext)],Addr(__TInterfaceInvoker__Invoke__Wrapper));

RegisterProc(TInterfaceInvoker,'Create',mtConstructor,TypeInfo(_T1),NoParams,Addr(TInterfaceInvoker.Create),cRegister);

end;
initialization
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
