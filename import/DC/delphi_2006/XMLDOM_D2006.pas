{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit XMLDOM_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  ActiveX,
  SysUtils,
  Variants,
  Classes,
  XMLConst,
  xmldom;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = function (const p0 : DOMString): Boolean of object;

_T1 = function (const p0 : DOMString): DOMString of object;

_T2 = _T1;

_T3 = function (const p0 : DOMString;
const p1 : DOMString): DOMString of object;

{_T4 = function (const p0 : IDOMNode;
const p1 : WideString): Boolean of object;}

{_T5 = function (const p0 : IDOMNode;
const p1 : DOMString;
const p2 : DOMString): Boolean of object;}

{_T6 = function (const p0 : IDOMNode): IDOMNodeEx of object;}

_T7 = procedure (const p0 : TDOMVendor) of object;

_T8 = _T7;

_T9 = function (p0 : string): TDOMVendor of object;

_T11 = procedure (const p0 : string;
const p1 : string) of object;

{_T12 = procedure (const p0 : IDOMParseError;
const p1 : string) of object;}

_T13 = function : string of object;

{_T14 = function : IDOMImplementation of object;}

_T15 = _T7;

_T16 = function : Integer of object;

_T17 = function (const p0 : string): TDOMVendor of object;

_T18 = _T7;

function __DC__GetEDOMParseError__ErrorCode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := EDOMParseError(Instance).ErrorCode;
end;

function __DC__GetEDOMParseError__URL(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := EDOMParseError(Instance).URL;
end;

function __DC__GetEDOMParseError__Reason(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := EDOMParseError(Instance).Reason;
end;

function __DC__GetEDOMParseError__SrcText(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := EDOMParseError(Instance).SrcText;
end;

function __DC__GetEDOMParseError__Line(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := EDOMParseError(Instance).Line;
end;

function __DC__GetEDOMParseError__LinePos(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := EDOMParseError(Instance).LinePos;
end;

function __DC__GetEDOMParseError__FilePos(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := EDOMParseError(Instance).FilePos;
end;

function __DC__GetTDOMVendorList__Vendors(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDOMVendorList(Instance).Vendors[OleVariant(Params^[0])]);
end;

procedure __RegisterProps;
begin
RegisterProperty(EDOMParseError,'ErrorCode',__DC__GetEDOMParseError__ErrorCode,nil);
RegisterProperty(EDOMParseError,'URL',__DC__GetEDOMParseError__URL,nil);
RegisterProperty(EDOMParseError,'Reason',__DC__GetEDOMParseError__Reason,nil);
RegisterProperty(EDOMParseError,'SrcText',__DC__GetEDOMParseError__SrcText,nil);
RegisterProperty(EDOMParseError,'Line',__DC__GetEDOMParseError__Line,nil);
RegisterProperty(EDOMParseError,'LinePos',__DC__GetEDOMParseError__LinePos,nil);
RegisterProperty(EDOMParseError,'FilePos',__DC__GetEDOMParseError__FilePos,nil);
RegisterIndexedProperty(TDOMVendorList,'Vendors',1,True,__DC__GetTDOMVendorList__Vendors,nil);
end;

function __DC__Getxmldom__DefaultDOMVendor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := xmldom.DefaultDOMVendor;
end;

procedure __DC__Setxmldom__DefaultDOMVendor(Instance : TObject; Params : PVariantArgList);
begin
xmldom.DefaultDOMVendor:=OleVariant(Params^[0]);
end;

function __DC__Getxmldom__DOMVendors(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(xmldom.DOMVendors);
end;

procedure __DC__Setxmldom__DOMVendors(Instance : TObject; Params : PVariantArgList);
begin
TObject(xmldom.DOMVendors):=(VarToObject(OleVariant(Params^[0])));
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('DefaultDOMVendor',__DC__Getxmldom__DefaultDOMVendor,__DC__Setxmldom__DefaultDOMVendor));
__RegisteredVars.Add(RegisterVar('DOMVendors',__DC__Getxmldom__DOMVendors,__DC__Setxmldom__DOMVendors));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..36] of string = (
'DOMWrapperVersion'
,'ELEMENT_NODE'
,'ATTRIBUTE_NODE'
,'TEXT_NODE'
,'CDATA_SECTION_NODE'
,'ENTITY_REFERENCE_NODE'
,'ENTITY_NODE'
,'PROCESSING_INSTRUCTION_NODE'
,'COMMENT_NODE'
,'DOCUMENT_NODE'
,'DOCUMENT_TYPE_NODE'
,'DOCUMENT_FRAGMENT_NODE'
,'NOTATION_NODE'
,'INDEX_SIZE_ERR'
,'DOMSTRING_SIZE_ERR'
,'HIERARCHY_REQUEST_ERR'
,'WRONG_DOCUMENT_ERR'
,'INVALID_CHARACTER_ERR'
,'NO_DATA_ALLOWED_ERR'
,'NO_MODIFICATION_ALLOWED_ERR'
,'NOT_FOUND_ERR'
,'NOT_SUPPORTED_ERR'
,'INUSE_ATTRIBUTE_ERR'
,'INVALID_STATE_ERR'
,'SYNTAX_ERR'
,'INVALID_MODIFICATION_ERR'
,'NAMESPACE_ERR'
,'INVALID_ACCESS_ERR'
,'NSDelim'
,'SXML'
,'SVersion'
,'SEncoding'
,'SStandalone'
,'SXMLNS'
,'SHttp'
,'SXMLNamespaceURI'
,'SXMLPrefixNamespaceURI'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,DOMWrapperVersion));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,ELEMENT_NODE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,ATTRIBUTE_NODE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,TEXT_NODE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,CDATA_SECTION_NODE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,ENTITY_REFERENCE_NODE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,ENTITY_NODE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,PROCESSING_INSTRUCTION_NODE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,COMMENT_NODE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,DOCUMENT_NODE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,DOCUMENT_TYPE_NODE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,DOCUMENT_FRAGMENT_NODE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,NOTATION_NODE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,INDEX_SIZE_ERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,DOMSTRING_SIZE_ERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,HIERARCHY_REQUEST_ERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,WRONG_DOCUMENT_ERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,INVALID_CHARACTER_ERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,NO_DATA_ALLOWED_ERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,NO_MODIFICATION_ALLOWED_ERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,NOT_FOUND_ERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,NOT_SUPPORTED_ERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,INUSE_ATTRIBUTE_ERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,INVALID_STATE_ERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,SYNTAX_ERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,INVALID_MODIFICATION_ERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,NAMESPACE_ERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,INVALID_ACCESS_ERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,NSDelim));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,SXML));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,SVersion));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,SEncoding));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,SStandalone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,SXMLNS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,SHttp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,SXMLNamespaceURI));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,SXMLPrefixNamespaceURI));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..3] of TClass = (
DOMException,
EDOMParseError,
TDOMVendor,
TDOMVendorList
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..7] of string = (
'IsPrefixed'
,'ExtractLocalName'
,'ExtractPrefix'
,'MakeNodeName'
,'RegisterDOMVendor'
,'UnRegisterDOMVendor'
,'GetDOMVendor'
,'DOMVendorNotSupported'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(DOMString),TypeInfo(Boolean)],Addr(IsPrefixed),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(DOMString),TypeInfo(DOMString)],Addr(ExtractLocalName),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T2),[
TypeInfo(DOMString),TypeInfo(DOMString)],Addr(ExtractPrefix),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T3),[
TypeInfo(DOMString),
TypeInfo(DOMString),TypeInfo(DOMString)],Addr(MakeNodeName),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T7),[
TypeInfo(TDOMVendor)],Addr(RegisterDOMVendor),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T8),[
TypeInfo(TDOMVendor)],Addr(UnRegisterDOMVendor),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T9),[
TypeInfo(string),TypeInfo(TDOMVendor)],Addr(GetDOMVendor),cRegister);

RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T11),[
TypeInfo(string),
TypeInfo(string)],Addr(DOMVendorNotSupported),cRegister);

RegRegisterMethod(TDOMVendor,'Description',TypeInfo(_T13),[TypeInfo(string)], pointer(0));

RegRegisterMethod(TDOMVendorList,'Add',TypeInfo(_T15),[
TypeInfo(TDOMVendor)],Addr(TDOMVendorList.Add));

RegRegisterMethod(TDOMVendorList,'count',TypeInfo(_T16),[TypeInfo(Integer)],Addr(TDOMVendorList.count));

RegRegisterMethod(TDOMVendorList,'Find',TypeInfo(_T17),[
TypeInfo(string),TypeInfo(TDOMVendor)],Addr(TDOMVendorList.Find));

RegRegisterMethod(TDOMVendorList,'Remove',TypeInfo(_T18),[
TypeInfo(TDOMVendor)],Addr(TDOMVendorList.Remove));

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'SameNamespace',mtProc,TypeInfo(_T4),[
TypeInfo(IDOMNode),
TypeInfo(WideString),TypeInfo(Boolean)],Addr(SameNamespace),cRegister)}

{RegisterProc(nil,'NodeMatches',mtProc,TypeInfo(_T5),[
TypeInfo(IDOMNode),
TypeInfo(DOMString),
TypeInfo(DOMString),TypeInfo(Boolean)],Addr(NodeMatches),cRegister)}

{RegisterProc(nil,'GetDOMNodeEx',mtProc,TypeInfo(_T6),[
TypeInfo(IDOMNode),TypeInfo(IDOMNodeEx)],Addr(GetDOMNodeEx),cRegister)}

{RegisterProc(EDOMParseError,'Create',mtConstructor,TypeInfo(_T12),[
TypeInfo(IDOMParseError),
TypeInfo(string)],Addr(EDOMParseError.Create),cRegister)}

{RegRegisterMethod(TDOMVendor,'domImplementation',TypeInfo(_T14),[TypeInfo(IDOMImplementation)], pointer(4))}

RegisterEvent(TypeInfo(TAsyncEventHandler),[
TypeInfo(TObject),
TypeInfo(Integer)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
