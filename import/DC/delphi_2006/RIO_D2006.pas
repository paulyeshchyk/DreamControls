{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit RIO_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IntfInfo,
  OPConvert,
  InvokeRegistry,
  WebNode,
  SOAPAttachIntf,
  WSDLIntf,
  Rio;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (const p0 : string;
p1 : TStream) of object;

_T1 = _T0;

_T2 = function (p0 : TWebServiceBindingType): TStream of object;

function __DC__GetTRIO__RefCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TRIO(Instance).RefCount;
end;

function __DC__GetTRIO__SOAPHeaders(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TRIO(Instance).SOAPHeaders);
end;

procedure __RegisterProps;
begin
RegisterProperty(TRIO,'RefCount',__DC__GetTRIO__RefCount,nil);
RegisterProperty(TRIO,'SOAPHeaders',__DC__GetTRIO__SOAPHeaders,nil);
end;

const __ConstNames0 : array[0..0] of string = (
'StubSize'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,StubSize));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..0] of TClass = (
TRIO
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TRIO,'DoAfterExecute',TypeInfo(_T0),[TypeInfo(string),TypeInfo(TStream)], pointer(48));
RegRegisterMethod(TRIO,'DoAfterExecute',TypeInfo(_T0),[TypeInfo(string),TypeInfo(TStream)],  getVMTProcAddr('TRIO','DoAfterExecute',48));


//RegRegisterMethod(TRIO,'DoBeforeExecute',TypeInfo(_T1),[TypeInfo(string),TypeInfo(TStream)], pointer(52));
RegRegisterMethod(TRIO,'DoBeforeExecute',TypeInfo(_T1),[TypeInfo(string),TypeInfo(TStream)],  getVMTProcAddr('TRIO','DoBeforeExecute',52));


//RegRegisterMethod(TRIO,'GetResponseStream',TypeInfo(_T2),[TypeInfo(TWebServiceBindingType),TypeInfo(TStream)], pointer(56));
RegRegisterMethod(TRIO,'GetResponseStream',TypeInfo(_T2),[TypeInfo(TWebServiceBindingType),TypeInfo(TStream)],  getVMTProcAddr('TRIO','GetResponseStream',56));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
RegisterEvent(TypeInfo(TAfterExecuteEvent),[
TypeInfo(string),
TypeInfo(TStream)]);

RegisterEvent(TypeInfo(TBeforeExecuteEvent),[
TypeInfo(string),
TypeInfo(InvString)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
