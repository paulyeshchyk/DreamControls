{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit dchook_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  Types,
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  messages,
  windows,
  classes,
  sysutils,
  dcconsts,
  dcClasses,
  dchook;
function ConvertTCWPRetStructToVariant(var R : TCWPRetStruct) : OleVariant;
function ConvertVariantToTCWPRetStruct(const V : OleVariant) : TCWPRetStruct;
function ConvertTHookInfoToVariant(var R : THookInfo) : OleVariant;
function ConvertVariantToTHookInfo(const V : OleVariant) : THookInfo;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __THookInfo__Wrapper = class(TDCRecordWrapper)
private
fR : THookInfo;
public
function GetRecordPtr : pointer; override;
published
end;
type __TCWPRetStruct__Wrapper = class(TDCRecordWrapper)
private
fR : TCWPRetStruct;
public
function GetRecordPtr : pointer; override;
published
procedure setLRESULT(const val : LRESULT);
function getLRESULT : LRESULT;
property LRESULT : LRESULT read getLRESULT write setLRESULT;
procedure setLPARAM(const val : LPARAM);
function getLPARAM : LPARAM;
property LPARAM : LPARAM read getLPARAM write setLPARAM;
procedure setWPARAM(const val : WPARAM);
function getWPARAM : WPARAM;
property WPARAM : WPARAM read getWPARAM write setWPARAM;
procedure setmessage(const val : UINT);
function getmessage : UINT;
property message : UINT read getmessage write setmessage;
end;
type __TCustomActiveNotifier__ = class(TCustomActiveNotifier);
type
{_T0 = procedure (p0 : TObject;
p1 : TFreeNotifyProc) of object;}

{_T1 = procedure (p0 : TObject;
p1 : TFreeNotifyProc) of object;}

_T2 = procedure (const p0 : IDispatch) of object;

_T3 = function (p0 : Pointer;
p1 : Pointer): IDispatch of object;

_T4 = procedure (p0 : TObject) of object;

_T5 = _T4;

_T6 = _T2;

function __THookInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function _THookInfo_ : IDispatch;
begin
  result := __THookInfo__Wrapper.Create;
end;
function __TCWPRetStruct__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCWPRetStruct__Wrapper.setLRESULT(const val : LRESULT);
begin
TCWPRetStruct(GetRecordPtr^).LRESULT := val;
end;
function __TCWPRetStruct__Wrapper.getLRESULT : LRESULT;
begin
result := TCWPRetStruct(GetRecordPtr^).LRESULT;
end;
procedure __TCWPRetStruct__Wrapper.setLPARAM(const val : LPARAM);
begin
TCWPRetStruct(GetRecordPtr^).LPARAM := val;
end;
function __TCWPRetStruct__Wrapper.getLPARAM : LPARAM;
begin
result := TCWPRetStruct(GetRecordPtr^).LPARAM;
end;
procedure __TCWPRetStruct__Wrapper.setWPARAM(const val : WPARAM);
begin
TCWPRetStruct(GetRecordPtr^).WPARAM := val;
end;
function __TCWPRetStruct__Wrapper.getWPARAM : WPARAM;
begin
result := TCWPRetStruct(GetRecordPtr^).WPARAM;
end;
procedure __TCWPRetStruct__Wrapper.setmessage(const val : UINT);
begin
TCWPRetStruct(GetRecordPtr^).message := val;
end;
function __TCWPRetStruct__Wrapper.getmessage : UINT;
begin
result := TCWPRetStruct(GetRecordPtr^).message;
end;
procedure ____RestoreHook__Wrapper(const p0 : IDispatch);
var
__p0 : ^THookInfo;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
RestoreHook(__p0^);
end;

function ____SetupHook__Wrapper(p0 : Pointer;
p1 : Pointer): IDispatch;
var
__result : THookInfo;
__wrapper : __THookInfo__Wrapper;
begin
__result := SetupHook(p0,p1);
__wrapper := __THookInfo__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

procedure __TCustomActiveNotifier__HookProc__Wrapper(__Instance : TCustomActiveNotifier;
const p0 : IDispatch);
var
__p0 : ^TCWPRetStruct;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__TCustomActiveNotifier__(__Instance).HookProc(__p0^);
end;


type __TCWPRetStruct__Wrapper__ = class(__TCWPRetStruct__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCWPRetStruct__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCWPRetStructToVariant(var R : TCWPRetStruct) : OleVariant;
var
__rw : __TCWPRetStruct__Wrapper__;
begin
__rw := __TCWPRetStruct__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCWPRetStruct(const V : OleVariant) : TCWPRetStruct;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCWPRetStruct((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __THookInfo__Wrapper__ = class(__THookInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __THookInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTHookInfoToVariant(var R : THookInfo) : OleVariant;
var
__rw : __THookInfo__Wrapper__;
begin
__rw := __THookInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTHookInfo(const V : OleVariant) : THookInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := THookInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..0] of string = (
'CM_HOOKPROC'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,CM_HOOKPROC));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..0] of TClass = (
TCustomActiveNotifier
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..4] of string = (
'THookInfo'
,'RestoreHook'
,'SetupHook'
,'AddWndHook'
,'RemoveWndHook'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_THookInfo_)));
RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T2),[
TypeInfo(IDispatch)],Addr(____RestoreHook__Wrapper),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T3),[
TypeInfoPointer,
TypeInfoPointer,TypeInfo(IDispatch)],Addr(____SetupHook__Wrapper),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T4),[
TypeInfo(TObject)],Addr(AddWndHook),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T5),[
TypeInfo(TObject)],Addr(RemoveWndHook),cRegister);

//RegRegisterMethod(TCustomActiveNotifier,'HookProc',TypeInfo(_T6),[TypeInfo(IDispatch)], pointer(48));
RegRegisterMethod(TCustomActiveNotifier,'HookProc',TypeInfo(_T6),[TypeInfo(IDispatch)],  getVMTProcAddr('TCustomActiveNotifier','HookProc',48));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'dcAddFreeNotification',mtProc,TypeInfo(_T0),[
TypeInfo(TObject),
TypeInfo(TFreeNotifyProc)],Addr(dcAddFreeNotification),cRegister)}

{RegisterProc(nil,'dcRemoveFreeNotification',mtProc,TypeInfo(_T1),[
TypeInfo(TObject),
TypeInfo(TFreeNotifyProc)],Addr(dcRemoveFreeNotification),cRegister)}

RegisterEvent(TypeInfo(TFreeNotifyProc),[
TypeInfo(TObject)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
