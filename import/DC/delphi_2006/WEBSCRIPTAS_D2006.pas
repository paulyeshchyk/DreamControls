{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit WEBSCRIPTAS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Classes,
  Contnrs,
  HTTPApp,
  HTTPProd,
  AscrLib,
  ActiveX,
  SiteComp,
  WebAuto,
  WebCntxt,
  WebScript,
  WebSnapObjs,
  WebScriptAS;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (const p0 : string;
p1 : HRESULT) of object;

_T1 = function : TStrings of object;

_T2 = procedure  of object;

_T3 = _T2;

{_T4 = procedure (const p0 : IActiveScriptError;
p1 : TLineNumberMap) of object;}

_T5 = _T2;

{_T6 = procedure (p0 : TScriptFile;
p1 : IInterface) of object;}

{_T7 = procedure (p0 : IScriptProducer) of object;}

function __DC__GetECannotCreateScriptEngine__ProgID(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := ECannotCreateScriptEngine(Instance).ProgID;
end;

function __DC__GetECannotCreateScriptEngine__HR(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := ECannotCreateScriptEngine(Instance).HR;
end;

procedure __RegisterProps;
begin
RegisterProperty(ECannotCreateScriptEngine,'ProgID',__DC__GetECannotCreateScriptEngine__ProgID,nil);
RegisterProperty(ECannotCreateScriptEngine,'HR',__DC__GetECannotCreateScriptEngine__HR,nil);
end;

function __DC__GetWebScriptAS__ActiveScriptEngine(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(WebScriptAS.ActiveScriptEngine);
end;

procedure __DC__SetWebScriptAS__ActiveScriptEngine(Instance : TObject; Params : PVariantArgList);
begin
TObject(WebScriptAS.ActiveScriptEngine):=(VarToObject(OleVariant(Params^[0])));
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('ActiveScriptEngine',__DC__GetWebScriptAS__ActiveScriptEngine,__DC__SetWebScriptAS__ActiveScriptEngine));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..0] of string = (
'sActiveScriptEngine'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,sActiveScriptEngine));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..8] of TClass = (
EActiveScriptError,
ECannotCreateScriptEngine,
TAbstractActiveScriptLanguages,
TActiveScriptEngine,
TActiveScriptError,
TActiveScriptGlobalObjects,
TActiveScriptObjectFactory,
TActiveScriptProducer,
TActiveScriptSite
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegisterProc(ECannotCreateScriptEngine,'Create',mtConstructor,TypeInfo(_T0),[
TypeInfo(string),
TypeInfo(HRESULT)],Addr(ECannotCreateScriptEngine.Create),cRegister);

//RegRegisterMethod(TAbstractActiveScriptLanguages,'List',TypeInfo(_T1),[TypeInfo(TStrings)], pointer(0));
RegRegisterMethod(TAbstractActiveScriptLanguages,'List',TypeInfo(_T1),[TypeInfo(TStrings)],  getVMTProcAddr('TAbstractActiveScriptLanguages','List',0));


RegisterProc(TAbstractActiveScriptLanguages,'Create',mtConstructor,TypeInfo(_T2),NoParams, pointer(4),cRegister);

RegisterProc(TActiveScriptEngine,'Create',mtConstructor,TypeInfo(_T3),NoParams,Addr(TActiveScriptEngine.Create),cRegister);

RegisterProc(TActiveScriptObjectFactory,'Create',mtConstructor,TypeInfo(_T5),NoParams,Addr(TActiveScriptObjectFactory.Create),cRegister);

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
{RegisterProc(TActiveScriptError,'Create',mtConstructor,TypeInfo(_T4),[
TypeInfo(IActiveScriptError),
TypeInfo(TLineNumberMap)],Addr(TActiveScriptError.Create),cRegister)}

{RegRegisterMethod(TActiveScriptSite,'RunExpression',TypeInfo(_T6),[
TypeInfo(TScriptFile),
TypeInfo(IInterface)], pointer(0))}

{RegisterProc(TActiveScriptSite,'Create',mtConstructor,TypeInfo(_T7),[
TypeInfo(IScriptProducer)],Addr(TActiveScriptSite.Create),cRegister)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
end.
