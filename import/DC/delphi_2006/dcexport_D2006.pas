{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit dcexport_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  windows,
  graphics,
  classes,
  sysutils,
  dcsystem,
  dcdreamlib,
  dcparser,
  dcexport;
function ConvertTColorReferenceToVariant(var R : TColorReference) : OleVariant;
function ConvertVariantToTColorReference(const V : OleVariant) : TColorReference;
function ConvertTTableParamsToVariant(var R : TTableParams) : OleVariant;
function ConvertVariantToTTableParams(const V : OleVariant) : TTableParams;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TColorReference__Wrapper = class(TDCRecordWrapper)
private
fR : TColorReference;
public
function GetRecordPtr : pointer; override;
published
procedure setred(const val : Byte);
function getred : Byte;
property red : Byte read getred write setred;
procedure setgreen(const val : Byte);
function getgreen : Byte;
property green : Byte read getgreen write setgreen;
procedure setblue(const val : Byte);
function getblue : Byte;
property blue : Byte read getblue write setblue;
end;
type __TTableParams__Wrapper = class(TDCRecordWrapper)
private
fR : TTableParams;
public
function GetRecordPtr : pointer; override;
published
procedure setwidth(const val : Integer);
function getwidth : Integer;
property width : Integer read getwidth write setwidth;
procedure setborder(const val : Integer);
function getborder : Integer;
property border : Integer read getborder write setborder;
procedure setframe(const val : TTableFrame);
function getframe : TTableFrame;
property frame : TTableFrame read getframe write setframe;
procedure setrules(const val : TTableRules);
function getrules : TTableRules;
property rules : TTableRules read getrules write setrules;
procedure setcellspacing(const val : Integer);
function getcellspacing : Integer;
property cellspacing : Integer read getcellspacing write setcellspacing;
procedure setcellpadding(const val : Integer);
function getcellpadding : Integer;
property cellpadding : Integer read getcellpadding write setcellpadding;
end;
type
_T0 = function (p0 : TDCRTFExporter;
p1 : string): Integer of object;

_T1 = function (p0 : TDCRTFExporter;
p1 : TColor): Integer of object;

_T2 = function (const p0 : string): string of object;

_T3 = function (const p0 : string;
p1 : TDCRTFExporter): string of object;

_T4 = procedure (var p0 : string) of object;

_T5 = _T2;

_T6 = procedure (p0 : TStream;
const p1 : string) of object;

_T7 = procedure (p0 : TDCRTFExporter;
const p1 : string) of object;

_T8 = _T2;

_T9 = function (const p0 : string;
p1 : Boolean): string of object;

_T10 = function (p0 : TDCSectionKind): TDCSectionKind of object;

_T11 = procedure (p0 : TStream) of object;

_T12 = procedure (const p0 : string) of object;

_T13 = _T2;

_T14 = procedure (p0 : TParagraphAlign) of object;

_T15 = procedure  of object;

_T16 = _T15;

_T17 = _T15;

_T18 = _T15;

_T19 = _T12;

_T20 = procedure (const p0 : string;
p1 : TFontCharSet) of object;

_T21 = _T15;

_T22 = _T15;

_T23 = _T15;

_T24 = _T15;

_T25 = _T15;

_T26 = procedure (p0 : Integer) of object;

_T27 = _T15;

_T28 = _T15;

_T29 = _T15;

_T30 = _T15;

_T31 = _T15;

_T32 = _T15;

_T33 = _T15;

_T34 = _T15;

_T35 = _T15;

_T36 = _T15;

_T37 = _T15;

_T38 = _T15;

_T39 = _T15;

_T40 = _T15;

_T41 = _T15;

_T42 = _T15;

_T43 = _T15;

_T44 = _T15;

_T45 = _T15;

_T46 = _T15;

_T47 = _T15;

_T48 = _T15;

_T49 = _T15;

_T50 = procedure (p0 : TColor) of object;

_T51 = _T15;

_T52 = _T50;

_T53 = _T15;

_T54 = _T50;

_T55 = _T15;

_T56 = procedure (const p0 : string;
p1 : TWindowStyle) of object;

_T57 = _T15;

_T58 = procedure (const p0 : IDispatch) of object;

_T59 = _T15;

_T60 = _T15;

_T61 = _T15;

_T62 = _T26;

_T63 = _T15;

_T64 = _T12;

_T65 = _T15;

_T66 = _T12;

_T67 = _T15;

_T68 = _T26;

_T69 = procedure (const p0 : string;
p1 : Integer;
p2 : Integer) of object;

_T70 = function : Boolean of object;

_T71 = _T15;

_T72 = procedure (const p0 : string;
const p1 : string) of object;

_T73 = _T12;

_T74 = procedure (const p0 : string;
p1 : TFont;
p2 : TColor) of object;

_T75 = function (p0 : TStream): Boolean of object;

_T76 = _T15;

_T77 = _T12;

_T78 = procedure (const p0 : string;
p1 : TDCRTFExporter) of object;

{_T79 = function : TRTFWriterListClass of object;}

_T80 = _T15;

_T81 = _T72;

_T82 = procedure (const p0 : string;
const p1 : string;
p2 : TDCSectionKind;
const p3 : string;
const p4 : string) of object;

_T83 = _T15;

_T84 = _T72;

_T85 = _T15;

_T86 = procedure (p0 : TDCRTFExporter;
p1 : TStream) of object;

_T87 = _T72;

_T88 = _T82;

_T89 = _T15;

{_T90 = function : TDCRtfParserClass of object;}

_T91 = _T12;

_T92 = function : string of object;

_T93 = procedure (p0 : TDCRTFExporter) of object;

_T94 = _T72;

_T95 = _T15;

_T96 = procedure (p0 : TObject) of object;

_T97 = _T15;

_T98 = _T12;

_T99 = _T11;

_T100 = _T15;

_T101 = function : TWriterObject of object;

_T102 = function : Pointer of object;

_T103 = procedure (p0 : Pointer) of object;

_T104 = _T12;

_T105 = _T12;

_T106 = _T15;

_T107 = function (p0 : TColor): Integer of object;

_T108 = _T15;

_T109 = function (const p0 : string;
p1 : Byte): Integer of object;

_T110 = _T12;

_T111 = _T12;

_T112 = function (const p0 : string): Boolean of object;

_T113 = _T6;

_T114 = _T6;

_T115 = _T11;

_T116 = _T112;

_T117 = _T58;

_T118 = _T15;

_T119 = _T15;

_T120 = _T26;

_T121 = _T15;

function __TColorReference__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TColorReference__Wrapper.setred(const val : Byte);
begin
TColorReference(GetRecordPtr^).red := val;
end;
function __TColorReference__Wrapper.getred : Byte;
begin
result := TColorReference(GetRecordPtr^).red;
end;
procedure __TColorReference__Wrapper.setgreen(const val : Byte);
begin
TColorReference(GetRecordPtr^).green := val;
end;
function __TColorReference__Wrapper.getgreen : Byte;
begin
result := TColorReference(GetRecordPtr^).green;
end;
procedure __TColorReference__Wrapper.setblue(const val : Byte);
begin
TColorReference(GetRecordPtr^).blue := val;
end;
function __TColorReference__Wrapper.getblue : Byte;
begin
result := TColorReference(GetRecordPtr^).blue;
end;
function __TTableParams__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTableParams__Wrapper.setwidth(const val : Integer);
begin
TTableParams(GetRecordPtr^).width := val;
end;
function __TTableParams__Wrapper.getwidth : Integer;
begin
result := TTableParams(GetRecordPtr^).width;
end;
procedure __TTableParams__Wrapper.setborder(const val : Integer);
begin
TTableParams(GetRecordPtr^).border := val;
end;
function __TTableParams__Wrapper.getborder : Integer;
begin
result := TTableParams(GetRecordPtr^).border;
end;
procedure __TTableParams__Wrapper.setframe(const val : TTableFrame);
begin
TTableParams(GetRecordPtr^).frame := val;
end;
function __TTableParams__Wrapper.getframe : TTableFrame;
begin
result := TTableParams(GetRecordPtr^).frame;
end;
procedure __TTableParams__Wrapper.setrules(const val : TTableRules);
begin
TTableParams(GetRecordPtr^).rules := val;
end;
function __TTableParams__Wrapper.getrules : TTableRules;
begin
result := TTableParams(GetRecordPtr^).rules;
end;
procedure __TTableParams__Wrapper.setcellspacing(const val : Integer);
begin
TTableParams(GetRecordPtr^).cellspacing := val;
end;
function __TTableParams__Wrapper.getcellspacing : Integer;
begin
result := TTableParams(GetRecordPtr^).cellspacing;
end;
procedure __TTableParams__Wrapper.setcellpadding(const val : Integer);
begin
TTableParams(GetRecordPtr^).cellpadding := val;
end;
function __TTableParams__Wrapper.getcellpadding : Integer;
begin
result := TTableParams(GetRecordPtr^).cellpadding;
end;
function _TColorReference_ : IDispatch;
begin
  result := __TColorReference__Wrapper.Create;
end;
function _TTableParams_ : IDispatch;
begin
  result := __TTableParams__Wrapper.Create;
end;
procedure __TDCExporter__StartTable__Wrapper(__Instance : TDCExporter;
const p0 : IDispatch);
var
__p0 : ^TTableParams;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
TDCExporter(__Instance).StartTable(__p0^);
end;

procedure __TWriterTableObject__Create__Wrapper(__Instance : TWriterTableObject;
const p0 : IDispatch);
var
__p0 : ^TTableParams;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
TWriterTableObject(__Instance).Create(__p0^);
end;


type __TColorReference__Wrapper__ = class(__TColorReference__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TColorReference__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTColorReferenceToVariant(var R : TColorReference) : OleVariant;
var
__rw : __TColorReference__Wrapper__;
begin
__rw := __TColorReference__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTColorReference(const V : OleVariant) : TColorReference;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TColorReference((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTableParams__Wrapper__ = class(__TTableParams__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTableParams__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTableParamsToVariant(var R : TTableParams) : OleVariant;
var
__rw : __TTableParams__Wrapper__;
begin
__rw := __TTableParams__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTableParams(const V : OleVariant) : TTableParams;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTableParams((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTDCExporter__ParSpaceBefore(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCExporter(Instance).ParSpaceBefore;
end;

procedure __DC__SetTDCExporter__ParSpaceBefore(Instance : TObject; Params : PVariantArgList);
begin
TDCExporter(Instance).ParSpaceBefore:=OleVariant(Params^[0]);
end;

function __DC__GetTDCExporter__ParSpaceAfter(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCExporter(Instance).ParSpaceAfter;
end;

procedure __DC__SetTDCExporter__ParSpaceAfter(Instance : TObject; Params : PVariantArgList);
begin
TDCExporter(Instance).ParSpaceAfter:=OleVariant(Params^[0]);
end;

function __DC__GetTDCRtfParser__ResWordId(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCRtfParser(Instance).ResWordId;
end;

procedure __DC__SetTDCRtfParser__ResWordId(Instance : TObject; Params : PVariantArgList);
begin
TDCRtfParser(Instance).ResWordId:=OleVariant(Params^[0]);
end;

function __DC__GetTDCRtfParser__SpecialChar(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCRtfParser(Instance).SpecialChar;
end;

function __DC__GetTRTFConverter__Parser(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TRTFConverter(Instance).Parser);
end;

function __DC__GetTRTFConverter__ColorTable(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TRTFConverter(Instance).ColorTable);
end;

function __DC__GetTRTFConverter__FontTable(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TRTFConverter(Instance).FontTable);
end;

function __DC__GetTRTFWriterList__RemoveBrackets(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TRTFWriterList(Instance).RemoveBrackets;
end;

procedure __DC__SetTRTFWriterList__RemoveBrackets(Instance : TObject; Params : PVariantArgList);
begin
TRTFWriterList(Instance).RemoveBrackets:=OleVariant(Params^[0]);
end;

function __DC__GetTRTFWriterList__VarData(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TRTFWriterList(Instance).VarData;
end;

procedure __DC__SetTRTFWriterList__VarData(Instance : TObject; Params : PVariantArgList);
begin
TRTFWriterList(Instance).VarData:=OleVariant(Params^[0]);
end;

function __DC__GetTRTFWriterList__IgnoreCharSet(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TRTFWriterList(Instance).IgnoreCharSet;
end;

procedure __DC__SetTRTFWriterList__IgnoreCharSet(Instance : TObject; Params : PVariantArgList);
begin
TRTFWriterList(Instance).IgnoreCharSet:=OleVariant(Params^[0]);
end;

function __DC__GetTWriterFontObject__IgnoreCharSet(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWriterFontObject(Instance).IgnoreCharSet;
end;

procedure __DC__SetTWriterFontObject__IgnoreCharSet(Instance : TObject; Params : PVariantArgList);
begin
TWriterFontObject(Instance).IgnoreCharSet:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TDCExporter,'ParSpaceBefore',__DC__GetTDCExporter__ParSpaceBefore,__DC__SetTDCExporter__ParSpaceBefore);
RegisterProperty(TDCExporter,'ParSpaceAfter',__DC__GetTDCExporter__ParSpaceAfter,__DC__SetTDCExporter__ParSpaceAfter);
RegisterProperty(TDCRtfParser,'ResWordId',__DC__GetTDCRtfParser__ResWordId,__DC__SetTDCRtfParser__ResWordId);
RegisterProperty(TDCRtfParser,'SpecialChar',__DC__GetTDCRtfParser__SpecialChar,nil);
RegisterProperty(TRTFConverter,'Parser',__DC__GetTRTFConverter__Parser,nil);
RegisterProperty(TRTFConverter,'ColorTable',__DC__GetTRTFConverter__ColorTable,nil);
RegisterProperty(TRTFConverter,'FontTable',__DC__GetTRTFConverter__FontTable,nil);
RegisterProperty(TRTFWriterList,'RemoveBrackets',__DC__GetTRTFWriterList__RemoveBrackets,__DC__SetTRTFWriterList__RemoveBrackets);
RegisterProperty(TRTFWriterList,'VarData',__DC__GetTRTFWriterList__VarData,__DC__SetTRTFWriterList__VarData);
RegisterProperty(TRTFWriterList,'IgnoreCharSet',__DC__GetTRTFWriterList__IgnoreCharSet,__DC__SetTRTFWriterList__IgnoreCharSet);
RegisterProperty(TWriterFontObject,'IgnoreCharSet',__DC__GetTWriterFontObject__IgnoreCharSet,__DC__SetTWriterFontObject__IgnoreCharSet);
end;

const __ConstNames0 : array[0..247] of string = (
'wsDefault'
,'wsPopup'
,'wsSecondary'
,'paLeft'
,'paCenter'
,'paRight'
,'paJustify'
,'tfvoid'
,'tfabove'
,'tfbelow'
,'tfhsides'
,'tflhs'
,'tfrhs'
,'tfvsides'
,'tfbox'
,'tfborder'
,'trnone'
,'trgroups'
,'trrows'
,'trcols'
,'trall'
,'skTitle'
,'skClassesGroup'
,'skInterfacesGroup'
,'skTypesGroup'
,'skProceduresGroup'
,'skUnitsGroup'
,'skUnitHeader'
,'skAuxiliaryGroup'
,'skIndex'
,'skClass'
,'skInterface'
,'skType'
,'skProcedure'
,'skVariable'
,'skUnit'
,'skMethod'
,'skProperty'
,'skEvent'
,'skCategorySectionClass'
,'skCategoryGroupSectionIntf'
,'skCategoryGroupSectionType'
,'skCategoryGroupSectionProc'
,'skCategoryGroupSectionVar'
,'skSubCategorySection'
,'skDefCategorySection'
,'skUserDefinedGroup'
,'skUserDefinedNode'
,'skVariableGroup'
,'SHtmlExt'
,'SParagraphTag'
,'SAlignTag'
,'SLeftAlignTag'
,'SCenterAlignTag'
,'SRightAlignTag'
,'SJustifyAlignTag'
,'SLineBreakTag'
,'SParTag'
,'SFontTag'
,'SFontFaceTag'
,'SBigFontTag'
,'SSmallFontTag'
,'SBoldFontTag'
,'SUnderlineFontTag'
,'SStrikeOutFontTag'
,'SFontColorTag'
,'SBackColorTag'
,'SDefaultFont'
,'SNumberedListTag'
,'SBulletedListTag'
,'SListItemTag'
,'SQuoteTag'
,'SubScriptTag'
,'SupperScriptTag'
,'SRefTag'
,'SHRefTag'
,'sRefTarget'
,'sRefTargetNewWindow'
,'SLinkTag'
,'SHtmlTag'
,'SHeadTag'
,'SBodyTag'
,'SSpaceTag'
,'SLtTag'
,'SQtTag'
,'SAmpTag'
,'SQuotTag'
,'SBRTag'
,'SStrongTag'
,'SEMTag'
,'STablewidthTag'
,'STableborderTag'
,'STableframeTag'
,'STablerulesTag'
,'STablecellspacingTag'
,'STablecellpaddingTag'
,'SFramevoidTag'
,'SFrameaboveTag'
,'SFramebelowTag'
,'SFramehsidesTag'
,'SFramelhsTag'
,'SFramerhsTag'
,'SFramevsidesTag'
,'SFrameboxTag'
,'SFrameborderTag'
,'SRulesnone'
,'SRulesgroups'
,'SRulesrows'
,'SRulescols'
,'SRulesall'
,'SImageTag'
,'SImageWidth'
,'SImageHeight'
,'SImageNameTag'
,'SRedColor'
,'SGreenColor'
,'SBlueColor'
,'SNewLine'
,'SRtfStartDocTag'
,'sRTFBorderAtTop'
,'sRTFSingleBorder'
,'SRtfParagraphTag'
,'SRtfLeftAlignTag'
,'SRtfCenterAlignTag'
,'SRtfRightAlignTag'
,'SRtfJustifyAlignTag'
,'SRTFDefaultParagraphTag'
,'SRtfLineBreakTag'
,'SRtfFontNameTag'
,'SRtfFontNameCharsetTag'
,'SRtfFontTag'
,'SRtfFontTableTag'
,'SRtfFontColorTable'
,'SRTFNewPageTag'
,'SRTFNew_PageTag'
,'SRtfNonScrollTag'
,'SRtfPlainTag'
,'SRtfFonSizeTag'
,'SRtfBoldFontTag'
,'SRtfItalicFontTag'
,'SRtfUnderlineFontTag'
,'SRtfStrikeOutFontTag'
,'SRtfHiddenTag'
,'sRtfSeeAlsoTag'
,'sRtfALinkTag'
,'sRtfJumpTag'
,'sRtfBaseTag'
,'sParagraphVertBeforeShift'
,'sParagraphVertAfterShift'
,'SRtfDefaultFont'
,'SRtfCharSetTag'
,'SRtfListTag'
,'SRtfNumberedListTag'
,'SRtfBulletedListTag'
,'SRtfBulletListItemTag'
,'SRtfNumberListItemTag'
,'SRtfQuoteTag'
,'SRtfsubScriptTag'
,'SRtfsuperScriptTag'
,'SRtffootnoteTag'
,'SRtfRefTag'
,'SRtfHRefTag'
,'StfImageTag'
,'SRTFTableRowTag'
,'SRTFTableCellWidth'
,'SRtfFontColorTag'
,'SRtfBackColorTag'
,'SRTFTableDataCellTag'
,'SRTFTableIntableTag'
,'SRTFRowEndTag'
,'SRtfFramevoidTag'
,'SRtfFrameaboveTag'
,'SRtfFramebelowTag'
,'SRtfFramehsidesTag'
,'SRtfFramelhsTag'
,'SRtfFramerhsTag'
,'SRtfFramevsidesTag'
,'SRtfFrameboxTag'
,'SRtfTabTag'
,'SRtfFrameborderTag'
,'DefaultCellWidth'
,'SDefaultQuoteWidth'
,'SContentTag'
,'SObjectTag'
,'STypeTag'
,'STextStampTag'
,'SParamNameTag'
,'SValueTag'
,'SNameTag'
,'SLocalTag'
,'SMainStyleTag'
,'SSecondStlyTag'
,'TokGroupBegin'
,'TokGroupEnd'
,'tokUnknownResWord'
,'tokSpecialChar'
,'tokHtmlString'
,'cRtfIdentChars'
,'cNotStrChars'
,'cNotHtmlStrChars'
,'SMaxRtfResWors'
,'id_bold'
,'id_blue'
,'id_cell'
,'id_cf'
,'id_colortbl'
,'id_deff'
,'id_deflang'
,'id_endash'
,'id_f'
,'id_fonttbl'
,'id_fs'
,'id_green'
,'id_highlight'
,'id_i'
,'id_line'
,'id_lquote'
,'id_nosupersub'
,'id_par'
,'id_pard'
,'id_plain'
,'id_pnf'
,'id_pnlvlblt'
,'id_pnlvlbody'
,'id_pntext'
,'id_qc'
,'id_qr'
,'id_red'
,'id_row'
,'id_rquote'
,'id_rtf'
,'id_strike'
,'id_sub'
,'id_super'
,'id_tab'
,'id_trowd'
,'id_u'
,'id_ul'
,'id_ulnone'
,'id_v'
,'id_big'
,'id_small'
,'id_href'
,'id_head'
,'id_body'
,'id_strong'
,'id_em'
,'SkipHtmlHeader'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,wsDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,wsPopup));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,wsSecondary));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,paLeft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,paCenter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,paRight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,paJustify));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,tfvoid));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,tfabove));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,tfbelow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,tfhsides));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,tflhs));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,tfrhs));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,tfvsides));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,tfbox));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,tfborder));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,trnone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,trgroups));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,trrows));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,trcols));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,trall));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,skTitle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,skClassesGroup));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,skInterfacesGroup));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,skTypesGroup));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,skProceduresGroup));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,skUnitsGroup));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,skUnitHeader));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,skAuxiliaryGroup));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,skIndex));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,skClass));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,skInterface));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,skType));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,skProcedure));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,skVariable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,skUnit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,skMethod));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,skProperty));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,skEvent));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,skCategorySectionClass));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,skCategoryGroupSectionIntf));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,skCategoryGroupSectionType));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,skCategoryGroupSectionProc));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,skCategoryGroupSectionVar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,skSubCategorySection));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,skDefCategorySection));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,skUserDefinedGroup));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,skUserDefinedNode));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,skVariableGroup));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,SHtmlExt));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,SParagraphTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,SAlignTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,SLeftAlignTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,SCenterAlignTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,SRightAlignTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,SJustifyAlignTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,SLineBreakTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,SParTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,SFontTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,SFontFaceTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,SBigFontTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,SSmallFontTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,SBoldFontTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,SUnderlineFontTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,SStrikeOutFontTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[65] ,SFontColorTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[66] ,SBackColorTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[67] ,SDefaultFont));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[68] ,SNumberedListTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[69] ,SBulletedListTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[70] ,SListItemTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[71] ,SQuoteTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[72] ,SubScriptTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[73] ,SupperScriptTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[74] ,SRefTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[75] ,SHRefTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[76] ,sRefTarget));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[77] ,sRefTargetNewWindow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[78] ,SLinkTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[79] ,SHtmlTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[80] ,SHeadTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[81] ,SBodyTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[82] ,SSpaceTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[83] ,SLtTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[84] ,SQtTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[85] ,SAmpTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[86] ,SQuotTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[87] ,SBRTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[88] ,SStrongTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[89] ,SEMTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[90] ,STablewidthTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[91] ,STableborderTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[92] ,STableframeTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[93] ,STablerulesTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[94] ,STablecellspacingTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[95] ,STablecellpaddingTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[96] ,SFramevoidTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[97] ,SFrameaboveTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[98] ,SFramebelowTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[99] ,SFramehsidesTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[100] ,SFramelhsTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[101] ,SFramerhsTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[102] ,SFramevsidesTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[103] ,SFrameboxTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[104] ,SFrameborderTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[105] ,SRulesnone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[106] ,SRulesgroups));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[107] ,SRulesrows));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[108] ,SRulescols));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[109] ,SRulesall));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[110] ,SImageTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[111] ,SImageWidth));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[112] ,SImageHeight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[113] ,SImageNameTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[114] ,SRedColor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[115] ,SGreenColor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[116] ,SBlueColor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[117] ,SNewLine));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[118] ,SRtfStartDocTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[119] ,sRTFBorderAtTop));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[120] ,sRTFSingleBorder));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[121] ,SRtfParagraphTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[122] ,SRtfLeftAlignTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[123] ,SRtfCenterAlignTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[124] ,SRtfRightAlignTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[125] ,SRtfJustifyAlignTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[126] ,SRTFDefaultParagraphTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[127] ,SRtfLineBreakTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[128] ,SRtfFontNameTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[129] ,SRtfFontNameCharsetTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[130] ,SRtfFontTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[131] ,SRtfFontTableTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[132] ,SRtfFontColorTable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[133] ,SRTFNewPageTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[134] ,SRTFNew_PageTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[135] ,SRtfNonScrollTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[136] ,SRtfPlainTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[137] ,SRtfFonSizeTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[138] ,SRtfBoldFontTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[139] ,SRtfItalicFontTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[140] ,SRtfUnderlineFontTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[141] ,SRtfStrikeOutFontTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[142] ,SRtfHiddenTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[143] ,sRtfSeeAlsoTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[144] ,sRtfALinkTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[145] ,sRtfJumpTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[146] ,sRtfBaseTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[147] ,sParagraphVertBeforeShift));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[148] ,sParagraphVertAfterShift));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[149] ,SRtfDefaultFont));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[150] ,SRtfCharSetTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[151] ,SRtfListTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[152] ,SRtfNumberedListTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[153] ,SRtfBulletedListTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[154] ,SRtfBulletListItemTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[155] ,SRtfNumberListItemTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[156] ,SRtfQuoteTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[157] ,SRtfsubScriptTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[158] ,SRtfsuperScriptTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[159] ,SRtffootnoteTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[160] ,SRtfRefTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[161] ,SRtfHRefTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[162] ,StfImageTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[163] ,SRTFTableRowTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[164] ,SRTFTableCellWidth));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[165] ,SRtfFontColorTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[166] ,SRtfBackColorTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[167] ,SRTFTableDataCellTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[168] ,SRTFTableIntableTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[169] ,SRTFRowEndTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[170] ,SRtfFramevoidTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[171] ,SRtfFrameaboveTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[172] ,SRtfFramebelowTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[173] ,SRtfFramehsidesTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[174] ,SRtfFramelhsTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[175] ,SRtfFramerhsTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[176] ,SRtfFramevsidesTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[177] ,SRtfFrameboxTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[178] ,SRtfTabTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[179] ,SRtfFrameborderTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[180] ,DefaultCellWidth));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[181] ,SDefaultQuoteWidth));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[182] ,SContentTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[183] ,SObjectTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[184] ,STypeTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[185] ,STextStampTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[186] ,SParamNameTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[187] ,SValueTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[188] ,SNameTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[189] ,SLocalTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[190] ,SMainStyleTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[191] ,SSecondStlyTag));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[192] ,TokGroupBegin));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[193] ,TokGroupEnd));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[194] ,tokUnknownResWord));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[195] ,tokSpecialChar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[196] ,tokHtmlString));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[197] ,VarFromSet(cRtfIdentChars, sizeof(cRtfIdentChars))));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[198] ,VarFromSet(cNotStrChars, sizeof(cNotStrChars))));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[199] ,VarFromSet(cNotHtmlStrChars, sizeof(cNotHtmlStrChars))));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[200] ,SMaxRtfResWors));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[201] ,id_bold));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[202] ,id_blue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[203] ,id_cell));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[204] ,id_cf));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[205] ,id_colortbl));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[206] ,id_deff));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[207] ,id_deflang));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[208] ,id_endash));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[209] ,id_f));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[210] ,id_fonttbl));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[211] ,id_fs));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[212] ,id_green));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[213] ,id_highlight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[214] ,id_i));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[215] ,id_line));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[216] ,id_lquote));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[217] ,id_nosupersub));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[218] ,id_par));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[219] ,id_pard));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[220] ,id_plain));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[221] ,id_pnf));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[222] ,id_pnlvlblt));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[223] ,id_pnlvlbody));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[224] ,id_pntext));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[225] ,id_qc));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[226] ,id_qr));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[227] ,id_red));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[228] ,id_row));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[229] ,id_rquote));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[230] ,id_rtf));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[231] ,id_strike));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[232] ,id_sub));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[233] ,id_super));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[234] ,id_tab));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[235] ,id_trowd));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[236] ,id_u));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[237] ,id_ul));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[238] ,id_ulnone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[239] ,id_v));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[240] ,id_big));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[241] ,id_small));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[242] ,id_href));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[243] ,id_head));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[244] ,id_body));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[245] ,id_strong));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[246] ,id_em));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[247] ,SkipHtmlHeader));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..19] of TClass = (
TDCExporter,
TDCHtmlConverter,
TDCHTMLExporter,
TDCHTMLImporter,
TDCImporter,
TDCRTFConverter,
TDCRTFExporter,
TDCRtfImporter,
TDCRtfParser,
THTMLContentWriter,
THTMLExporter,
THTMLIndexWriter,
TRTFContentWriter,
TRTFConverter,
TRTFIndexWriter,
TRTFWriterList,
TWriterColorObject,
TWriterFontObject,
TWriterObject,
TWriterTableObject
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..12] of string = (
'TColorReference'
,'TTableParams'
,'AddFont'
,'AddColor'
,'RtfToHtml'
,'Rtf2Rtf'
,'DCProcessHTMLSysSymbols'
,'DCExportToRTF'
,'DCExportToRTFStream'
,'DCExportTo'
,'DCExportToHTML'
,'DCRemoveSlash'
,'DCGetGroupSectionKind'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TColorReference_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_TTableParams_)));
RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T0),[
TypeInfo(TDCRTFExporter),
TypeInfo(string),TypeInfo(Integer)],Addr(AddFont),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T1),[
TypeInfo(TDCRTFExporter),
TypeInfo(TColor),TypeInfo(Integer)],Addr(AddColor),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T2),[
TypeInfo(string),TypeInfo(string)],Addr(RtfToHtml),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T3),[
TypeInfo(string),
TypeInfo(TDCRTFExporter),TypeInfo(string)],Addr(Rtf2Rtf),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T4),[
TypeInfo(string)],Addr(DCProcessHTMLSysSymbols),cRegister);

RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T5),[
TypeInfo(string),TypeInfo(string)],Addr(DCExportToRTF),cRegister);

RegisterProc(nil,MethodNames[8],mtProc,TypeInfo(_T6),[
TypeInfo(TStream),
TypeInfo(string)],Addr(DCExportToRTFStream),cRegister);

RegisterProc(nil,MethodNames[9],mtProc,TypeInfo(_T7),[
TypeInfo(TDCRTFExporter),
TypeInfo(string)],Addr(DCExportTo),cRegister);

RegisterProc(nil,MethodNames[10],mtProc,TypeInfo(_T8),[
TypeInfo(string),TypeInfo(string)],Addr(DCExportToHTML),cRegister);

RegisterProc(nil,MethodNames[11],mtProc,TypeInfo(_T9),[
TypeInfo(string),
TypeInfo(Boolean),TypeInfo(string)],Addr(DCRemoveSlash),cRegister);

RegisterProc(nil,MethodNames[12],mtProc,TypeInfo(_T10),[
TypeInfo(TDCSectionKind),TypeInfo(TDCSectionKind)],Addr(DCGetGroupSectionKind),cRegister);

//RegisterProc(TDCExporter,'Create',mtConstructor,TypeInfo(_T11),[TypeInfo(TStream)], pointer(0),cRegister);
RegisterProc(TDCExporter,'Create',mtConstructor,TypeInfo(_T11),[TypeInfo(TStream)],  getVMTProcAddr('TDCExporter','Create',0),cRegister);


//RegRegisterMethod(TDCExporter,'WriteString',TypeInfo(_T12),[TypeInfo(string)], pointer(4));
RegRegisterMethod(TDCExporter,'WriteString',TypeInfo(_T12),[TypeInfo(string)],  getVMTProcAddr('TDCExporter','WriteString',4));


//RegRegisterMethod(TDCExporter,'TranslateString',TypeInfo(_T13),[TypeInfo(string),TypeInfo(string)], pointer(8));
RegRegisterMethod(TDCExporter,'TranslateString',TypeInfo(_T13),[TypeInfo(string),TypeInfo(string)],  getVMTProcAddr('TDCExporter','TranslateString',8));


//RegRegisterMethod(TDCExporter,'StartParagraph',TypeInfo(_T14),[TypeInfo(TParagraphAlign)], pointer(12));
RegRegisterMethod(TDCExporter,'StartParagraph',TypeInfo(_T14),[TypeInfo(TParagraphAlign)],  getVMTProcAddr('TDCExporter','StartParagraph',12));


//RegRegisterMethod(TDCExporter,'FinishParagraph',TypeInfo(_T15),NoParams, pointer(16));
RegRegisterMethod(TDCExporter,'FinishParagraph',TypeInfo(_T15),NoParams,  getVMTProcAddr('TDCExporter','FinishParagraph',16));


//RegRegisterMethod(TDCExporter,'StartNonScrolledArea',TypeInfo(_T16),NoParams, pointer(20));
RegRegisterMethod(TDCExporter,'StartNonScrolledArea',TypeInfo(_T16),NoParams,  getVMTProcAddr('TDCExporter','StartNonScrolledArea',20));


//RegRegisterMethod(TDCExporter,'FinishNonScrolledArea',TypeInfo(_T17),NoParams, pointer(24));
RegRegisterMethod(TDCExporter,'FinishNonScrolledArea',TypeInfo(_T17),NoParams,  getVMTProcAddr('TDCExporter','FinishNonScrolledArea',24));


//RegRegisterMethod(TDCExporter,'NewLine',TypeInfo(_T18),NoParams, pointer(28));
RegRegisterMethod(TDCExporter,'NewLine',TypeInfo(_T18),NoParams,  getVMTProcAddr('TDCExporter','NewLine',28));


//RegRegisterMethod(TDCExporter,'StartFont',TypeInfo(_T19),[TypeInfo(string)], pointer(32));
RegRegisterMethod(TDCExporter,'StartFont',TypeInfo(_T19),[TypeInfo(string)],  getVMTProcAddr('TDCExporter','StartFont',32));


//RegRegisterMethod(TDCExporter,'StartFontWithCharSet',TypeInfo(_T20),[TypeInfo(string),TypeInfo(TFontCharSet)], pointer(36));
RegRegisterMethod(TDCExporter,'StartFontWithCharSet',TypeInfo(_T20),[TypeInfo(string),TypeInfo(TFontCharSet)],  getVMTProcAddr('TDCExporter','StartFontWithCharSet',36));


//RegRegisterMethod(TDCExporter,'FinishFont',TypeInfo(_T21),NoParams, pointer(40));
RegRegisterMethod(TDCExporter,'FinishFont',TypeInfo(_T21),NoParams,  getVMTProcAddr('TDCExporter','FinishFont',40));


//RegRegisterMethod(TDCExporter,'StartBigFont',TypeInfo(_T22),NoParams, pointer(44));
RegRegisterMethod(TDCExporter,'StartBigFont',TypeInfo(_T22),NoParams,  getVMTProcAddr('TDCExporter','StartBigFont',44));


//RegRegisterMethod(TDCExporter,'FinishBigFont',TypeInfo(_T23),NoParams, pointer(48));
RegRegisterMethod(TDCExporter,'FinishBigFont',TypeInfo(_T23),NoParams,  getVMTProcAddr('TDCExporter','FinishBigFont',48));


//RegRegisterMethod(TDCExporter,'StartSmallFont',TypeInfo(_T24),NoParams, pointer(52));
RegRegisterMethod(TDCExporter,'StartSmallFont',TypeInfo(_T24),NoParams,  getVMTProcAddr('TDCExporter','StartSmallFont',52));


//RegRegisterMethod(TDCExporter,'FinishSmallFont',TypeInfo(_T25),NoParams, pointer(56));
RegRegisterMethod(TDCExporter,'FinishSmallFont',TypeInfo(_T25),NoParams,  getVMTProcAddr('TDCExporter','FinishSmallFont',56));


//RegRegisterMethod(TDCExporter,'StartFontSize',TypeInfo(_T26),[TypeInfo(Integer)], pointer(60));
RegRegisterMethod(TDCExporter,'StartFontSize',TypeInfo(_T26),[TypeInfo(Integer)],  getVMTProcAddr('TDCExporter','StartFontSize',60));


//RegRegisterMethod(TDCExporter,'FinishFontSize',TypeInfo(_T27),NoParams, pointer(64));
RegRegisterMethod(TDCExporter,'FinishFontSize',TypeInfo(_T27),NoParams,  getVMTProcAddr('TDCExporter','FinishFontSize',64));


//RegRegisterMethod(TDCExporter,'StartItalic',TypeInfo(_T28),NoParams, pointer(68));
RegRegisterMethod(TDCExporter,'StartItalic',TypeInfo(_T28),NoParams,  getVMTProcAddr('TDCExporter','StartItalic',68));


//RegRegisterMethod(TDCExporter,'FinishItalic',TypeInfo(_T29),NoParams, pointer(72));
RegRegisterMethod(TDCExporter,'FinishItalic',TypeInfo(_T29),NoParams,  getVMTProcAddr('TDCExporter','FinishItalic',72));


//RegRegisterMethod(TDCExporter,'StartBold',TypeInfo(_T30),NoParams, pointer(76));
RegRegisterMethod(TDCExporter,'StartBold',TypeInfo(_T30),NoParams,  getVMTProcAddr('TDCExporter','StartBold',76));


//RegRegisterMethod(TDCExporter,'FinishBold',TypeInfo(_T31),NoParams, pointer(80));
RegRegisterMethod(TDCExporter,'FinishBold',TypeInfo(_T31),NoParams,  getVMTProcAddr('TDCExporter','FinishBold',80));


//RegRegisterMethod(TDCExporter,'StartUnderline',TypeInfo(_T32),NoParams, pointer(84));
RegRegisterMethod(TDCExporter,'StartUnderline',TypeInfo(_T32),NoParams,  getVMTProcAddr('TDCExporter','StartUnderline',84));


//RegRegisterMethod(TDCExporter,'FinishUnderline',TypeInfo(_T33),NoParams, pointer(88));
RegRegisterMethod(TDCExporter,'FinishUnderline',TypeInfo(_T33),NoParams,  getVMTProcAddr('TDCExporter','FinishUnderline',88));


//RegRegisterMethod(TDCExporter,'StartStrikeOut',TypeInfo(_T34),NoParams, pointer(92));
RegRegisterMethod(TDCExporter,'StartStrikeOut',TypeInfo(_T34),NoParams,  getVMTProcAddr('TDCExporter','StartStrikeOut',92));


//RegRegisterMethod(TDCExporter,'FinishStrikeOut',TypeInfo(_T35),NoParams, pointer(96));
RegRegisterMethod(TDCExporter,'FinishStrikeOut',TypeInfo(_T35),NoParams,  getVMTProcAddr('TDCExporter','FinishStrikeOut',96));


//RegRegisterMethod(TDCExporter,'StartNumberedList',TypeInfo(_T36),NoParams, pointer(100));
RegRegisterMethod(TDCExporter,'StartNumberedList',TypeInfo(_T36),NoParams,  getVMTProcAddr('TDCExporter','StartNumberedList',100));


//RegRegisterMethod(TDCExporter,'FinishNumberedList',TypeInfo(_T37),NoParams, pointer(104));
RegRegisterMethod(TDCExporter,'FinishNumberedList',TypeInfo(_T37),NoParams,  getVMTProcAddr('TDCExporter','FinishNumberedList',104));


//RegRegisterMethod(TDCExporter,'StartBulletedList',TypeInfo(_T38),NoParams, pointer(108));
RegRegisterMethod(TDCExporter,'StartBulletedList',TypeInfo(_T38),NoParams,  getVMTProcAddr('TDCExporter','StartBulletedList',108));


//RegRegisterMethod(TDCExporter,'FinishBulletedList',TypeInfo(_T39),NoParams, pointer(112));
RegRegisterMethod(TDCExporter,'FinishBulletedList',TypeInfo(_T39),NoParams,  getVMTProcAddr('TDCExporter','FinishBulletedList',112));


//RegRegisterMethod(TDCExporter,'StartBulletListItem',TypeInfo(_T40),NoParams, pointer(116));
RegRegisterMethod(TDCExporter,'StartBulletListItem',TypeInfo(_T40),NoParams,  getVMTProcAddr('TDCExporter','StartBulletListItem',116));


//RegRegisterMethod(TDCExporter,'FinishBulletListItem',TypeInfo(_T41),NoParams, pointer(120));
RegRegisterMethod(TDCExporter,'FinishBulletListItem',TypeInfo(_T41),NoParams,  getVMTProcAddr('TDCExporter','FinishBulletListItem',120));


//RegRegisterMethod(TDCExporter,'StartNumberedListItem',TypeInfo(_T42),NoParams, pointer(124));
RegRegisterMethod(TDCExporter,'StartNumberedListItem',TypeInfo(_T42),NoParams,  getVMTProcAddr('TDCExporter','StartNumberedListItem',124));


//RegRegisterMethod(TDCExporter,'FinishNumberedListItem',TypeInfo(_T43),NoParams, pointer(128));
RegRegisterMethod(TDCExporter,'FinishNumberedListItem',TypeInfo(_T43),NoParams,  getVMTProcAddr('TDCExporter','FinishNumberedListItem',128));


//RegRegisterMethod(TDCExporter,'StartQuote',TypeInfo(_T44),NoParams, pointer(132));
RegRegisterMethod(TDCExporter,'StartQuote',TypeInfo(_T44),NoParams,  getVMTProcAddr('TDCExporter','StartQuote',132));


//RegRegisterMethod(TDCExporter,'FinishQuote',TypeInfo(_T45),NoParams, pointer(136));
RegRegisterMethod(TDCExporter,'FinishQuote',TypeInfo(_T45),NoParams,  getVMTProcAddr('TDCExporter','FinishQuote',136));


//RegRegisterMethod(TDCExporter,'StartSubScript',TypeInfo(_T46),NoParams, pointer(140));
RegRegisterMethod(TDCExporter,'StartSubScript',TypeInfo(_T46),NoParams,  getVMTProcAddr('TDCExporter','StartSubScript',140));


//RegRegisterMethod(TDCExporter,'FinishSubScript',TypeInfo(_T47),NoParams, pointer(144));
RegRegisterMethod(TDCExporter,'FinishSubScript',TypeInfo(_T47),NoParams,  getVMTProcAddr('TDCExporter','FinishSubScript',144));


//RegRegisterMethod(TDCExporter,'StartSuperScript',TypeInfo(_T48),NoParams, pointer(148));
RegRegisterMethod(TDCExporter,'StartSuperScript',TypeInfo(_T48),NoParams,  getVMTProcAddr('TDCExporter','StartSuperScript',148));


//RegRegisterMethod(TDCExporter,'FinishSuperScript',TypeInfo(_T49),NoParams, pointer(152));
RegRegisterMethod(TDCExporter,'FinishSuperScript',TypeInfo(_T49),NoParams,  getVMTProcAddr('TDCExporter','FinishSuperScript',152));


//RegRegisterMethod(TDCExporter,'StartColor',TypeInfo(_T50),[TypeInfo(TColor)], pointer(156));
RegRegisterMethod(TDCExporter,'StartColor',TypeInfo(_T50),[TypeInfo(TColor)],  getVMTProcAddr('TDCExporter','StartColor',156));


//RegRegisterMethod(TDCExporter,'FinishColor',TypeInfo(_T51),NoParams, pointer(160));
RegRegisterMethod(TDCExporter,'FinishColor',TypeInfo(_T51),NoParams,  getVMTProcAddr('TDCExporter','FinishColor',160));


//RegRegisterMethod(TDCExporter,'StartBackground',TypeInfo(_T52),[TypeInfo(TColor)], pointer(164));
RegRegisterMethod(TDCExporter,'StartBackground',TypeInfo(_T52),[TypeInfo(TColor)],  getVMTProcAddr('TDCExporter','StartBackground',164));


//RegRegisterMethod(TDCExporter,'FinishBackground',TypeInfo(_T53),NoParams, pointer(168));
RegRegisterMethod(TDCExporter,'FinishBackground',TypeInfo(_T53),NoParams,  getVMTProcAddr('TDCExporter','FinishBackground',168));


//RegRegisterMethod(TDCExporter,'StartBackColor',TypeInfo(_T54),[TypeInfo(TColor)], pointer(172));
RegRegisterMethod(TDCExporter,'StartBackColor',TypeInfo(_T54),[TypeInfo(TColor)],  getVMTProcAddr('TDCExporter','StartBackColor',172));


//RegRegisterMethod(TDCExporter,'FinishBackColor',TypeInfo(_T55),NoParams, pointer(176));
RegRegisterMethod(TDCExporter,'FinishBackColor',TypeInfo(_T55),NoParams,  getVMTProcAddr('TDCExporter','FinishBackColor',176));


//RegRegisterMethod(TDCExporter,'StartHRef',TypeInfo(_T56),[TypeInfo(string),TypeInfo(TWindowStyle)], pointer(180));
RegRegisterMethod(TDCExporter,'StartHRef',TypeInfo(_T56),[TypeInfo(string),TypeInfo(TWindowStyle)],  getVMTProcAddr('TDCExporter','StartHRef',180));


//RegRegisterMethod(TDCExporter,'FinishHRef',TypeInfo(_T57),NoParams, pointer(184));
RegRegisterMethod(TDCExporter,'FinishHRef',TypeInfo(_T57),NoParams,  getVMTProcAddr('TDCExporter','FinishHRef',184));


//RegRegisterMethod(TDCExporter,'StartTable',TypeInfo(_T58),[TypeInfo(IDispatch)], pointer(188));
RegRegisterMethod(TDCExporter,'StartTable',TypeInfo(_T58),[TypeInfo(IDispatch)],  getVMTProcAddr('TDCExporter','StartTable',188));


//RegRegisterMethod(TDCExporter,'FinishTable',TypeInfo(_T59),NoParams, pointer(192));
RegRegisterMethod(TDCExporter,'FinishTable',TypeInfo(_T59),NoParams,  getVMTProcAddr('TDCExporter','FinishTable',192));


//RegRegisterMethod(TDCExporter,'StartTableRow',TypeInfo(_T60),NoParams, pointer(196));
RegRegisterMethod(TDCExporter,'StartTableRow',TypeInfo(_T60),NoParams,  getVMTProcAddr('TDCExporter','StartTableRow',196));


//RegRegisterMethod(TDCExporter,'FinishTableRow',TypeInfo(_T61),NoParams, pointer(200));
RegRegisterMethod(TDCExporter,'FinishTableRow',TypeInfo(_T61),NoParams,  getVMTProcAddr('TDCExporter','FinishTableRow',200));


//RegRegisterMethod(TDCExporter,'StartTableDataCell',TypeInfo(_T62),[TypeInfo(Integer)], pointer(204));
RegRegisterMethod(TDCExporter,'StartTableDataCell',TypeInfo(_T62),[TypeInfo(Integer)],  getVMTProcAddr('TDCExporter','StartTableDataCell',204));


//RegRegisterMethod(TDCExporter,'FinishTableDataCell',TypeInfo(_T63),NoParams, pointer(208));
RegRegisterMethod(TDCExporter,'FinishTableDataCell',TypeInfo(_T63),NoParams,  getVMTProcAddr('TDCExporter','FinishTableDataCell',208));


//RegRegisterMethod(TDCExporter,'StartDocument',TypeInfo(_T64),[TypeInfo(string)], pointer(212));
RegRegisterMethod(TDCExporter,'StartDocument',TypeInfo(_T64),[TypeInfo(string)],  getVMTProcAddr('TDCExporter','StartDocument',212));


//RegRegisterMethod(TDCExporter,'FinishDocument',TypeInfo(_T65),NoParams, pointer(216));
RegRegisterMethod(TDCExporter,'FinishDocument',TypeInfo(_T65),NoParams,  getVMTProcAddr('TDCExporter','FinishDocument',216));


//RegRegisterMethod(TDCExporter,'StartPage',TypeInfo(_T66),[TypeInfo(string)], pointer(220));
RegRegisterMethod(TDCExporter,'StartPage',TypeInfo(_T66),[TypeInfo(string)],  getVMTProcAddr('TDCExporter','StartPage',220));


//RegRegisterMethod(TDCExporter,'FinishPage',TypeInfo(_T67),NoParams, pointer(224));
RegRegisterMethod(TDCExporter,'FinishPage',TypeInfo(_T67),NoParams,  getVMTProcAddr('TDCExporter','FinishPage',224));


//RegRegisterMethod(TDCExporter,'AddSpaces',TypeInfo(_T68),[TypeInfo(Integer)], pointer(228));
RegRegisterMethod(TDCExporter,'AddSpaces',TypeInfo(_T68),[TypeInfo(Integer)],  getVMTProcAddr('TDCExporter','AddSpaces',228));


//RegRegisterMethod(TDCExporter,'AddImage',TypeInfo(_T69),[TypeInfo(string),TypeInfo(Integer),TypeInfo(Integer)], pointer(232));
RegRegisterMethod(TDCExporter,'AddImage',TypeInfo(_T69),[TypeInfo(string),TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TDCExporter','AddImage',232));


//RegRegisterMethod(TDCExporter,'UseTabCharacter',TypeInfo(_T70),[TypeInfo(Boolean)], pointer(236));
RegRegisterMethod(TDCExporter,'UseTabCharacter',TypeInfo(_T70),[TypeInfo(Boolean)],  getVMTProcAddr('TDCExporter','UseTabCharacter',236));


//RegRegisterMethod(TDCExporter,'DrawHorzLine',TypeInfo(_T71),NoParams, pointer(240));
RegRegisterMethod(TDCExporter,'DrawHorzLine',TypeInfo(_T71),NoParams,  getVMTProcAddr('TDCExporter','DrawHorzLine',240));


//RegRegisterMethod(TDCExporter,'WriteExternalURL',TypeInfo(_T72),[TypeInfo(string),TypeInfo(string)], pointer(244));
RegRegisterMethod(TDCExporter,'WriteExternalURL',TypeInfo(_T72),[TypeInfo(string),TypeInfo(string)],  getVMTProcAddr('TDCExporter','WriteExternalURL',244));


RegisterProc(TDCHtmlConverter,'Create',mtConstructor,TypeInfo(_T73),[
TypeInfo(string)],Addr(TDCHtmlConverter.Create),cRegister);

//RegRegisterMethod(TDCImporter,'TextChanged',TypeInfo(_T74),[TypeInfo(string),TypeInfo(TFont),TypeInfo(TColor)], pointer(0));
RegRegisterMethod(TDCImporter,'TextChanged',TypeInfo(_T74),[TypeInfo(string),TypeInfo(TFont),TypeInfo(TColor)],  getVMTProcAddr('TDCImporter','TextChanged',0));


//RegRegisterMethod(TDCImporter,'IsValidStream',TypeInfo(_T75),[TypeInfo(TStream),TypeInfo(Boolean)], pointer(4));
RegRegisterMethod(TDCImporter,'IsValidStream',TypeInfo(_T75),[TypeInfo(TStream),TypeInfo(Boolean)],  getVMTProcAddr('TDCImporter','IsValidStream',4));


RegisterProc(TDCImporter,'Create',mtConstructor,TypeInfo(_T76),NoParams,Addr(TDCImporter.Create),cRegister);

//RegRegisterMethod(TDCImporter,'ParseText',TypeInfo(_T77),[TypeInfo(string)], pointer(8));
RegRegisterMethod(TDCImporter,'ParseText',TypeInfo(_T77),[TypeInfo(string)],  getVMTProcAddr('TDCImporter','ParseText',8));


RegisterProc(TDCRTFConverter,'Create',mtConstructor,TypeInfo(_T78),[
TypeInfo(string),
TypeInfo(TDCRTFExporter)],Addr(TDCRTFConverter.Create),cRegister);

RegRegisterMethod(TDCRtfParser,'InitRtfSyntax',TypeInfo(_T80),NoParams,Addr(TDCRtfParser.InitRtfSyntax));

RegRegisterMethod(THTMLContentWriter,'StartSection',TypeInfo(_T81),[
TypeInfo(string),
TypeInfo(string)],Addr(THTMLContentWriter.StartSection));

RegRegisterMethod(THTMLContentWriter,'StartSectionEx',TypeInfo(_T82),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(TDCSectionKind),
TypeInfo(string),
TypeInfo(string)],Addr(THTMLContentWriter.StartSectionEx));

RegRegisterMethod(THTMLContentWriter,'FinishSection',TypeInfo(_T83),NoParams,Addr(THTMLContentWriter.FinishSection));

RegRegisterMethod(THTMLIndexWriter,'StartSection',TypeInfo(_T84),[
TypeInfo(string),
TypeInfo(string)],Addr(THTMLIndexWriter.StartSection));

RegRegisterMethod(THTMLIndexWriter,'FinishSection',TypeInfo(_T85),NoParams,Addr(THTMLIndexWriter.FinishSection));

RegisterProc(TRTFContentWriter,'Create',mtConstructor,TypeInfo(_T86),[
TypeInfo(TDCRTFExporter),
TypeInfo(TStream)],Addr(TRTFContentWriter.Create),cRegister);

RegRegisterMethod(TRTFContentWriter,'StartSection',TypeInfo(_T87),[
TypeInfo(string),
TypeInfo(string)],Addr(TRTFContentWriter.StartSection));

RegRegisterMethod(TRTFContentWriter,'StartSectionEx',TypeInfo(_T88),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(TDCSectionKind),
TypeInfo(string),
TypeInfo(string)],Addr(TRTFContentWriter.StartSectionEx));

RegRegisterMethod(TRTFContentWriter,'FinishSection',TypeInfo(_T89),NoParams,Addr(TRTFContentWriter.FinishSection));

RegisterProc(TRTFConverter,'Create',mtConstructor,TypeInfo(_T91),[
TypeInfo(string)],Addr(TRTFConverter.Create),cRegister);

RegRegisterMethod(TRTFConverter,'ParseDigits',TypeInfo(_T92),[TypeInfo(string)],Addr(TRTFConverter.ParseDigits));

RegisterProc(TRTFIndexWriter,'Create',mtConstructor,TypeInfo(_T93),[
TypeInfo(TDCRTFExporter)],Addr(TRTFIndexWriter.Create),cRegister);

RegRegisterMethod(TRTFIndexWriter,'StartSection',TypeInfo(_T94),[
TypeInfo(string),
TypeInfo(string)],Addr(TRTFIndexWriter.StartSection));

RegRegisterMethod(TRTFIndexWriter,'FinishSection',TypeInfo(_T95),NoParams,Addr(TRTFIndexWriter.FinishSection));

RegRegisterMethod(TRTFWriterList,'StartWriterObject',TypeInfo(_T96),[
TypeInfo(TObject)],Addr(TRTFWriterList.StartWriterObject));

RegRegisterMethod(TRTFWriterList,'FinishWriterObject',TypeInfo(_T97),NoParams,Addr(TRTFWriterList.FinishWriterObject));

RegRegisterMethod(TRTFWriterList,'WriteString',TypeInfo(_T98),[
TypeInfo(string)],Addr(TRTFWriterList.WriteString));

RegRegisterMethod(TRTFWriterList,'Flush',TypeInfo(_T99),[
TypeInfo(TStream)],Addr(TRTFWriterList.Flush));

RegisterProc(TRTFWriterList,'Create',mtConstructor,TypeInfo(_T100),NoParams,Addr(TRTFWriterList.Create),cRegister);

RegRegisterMethod(TRTFWriterList,'StackPointer',TypeInfo(_T101),[TypeInfo(TWriterObject)],Addr(TRTFWriterList.StackPointer));

RegRegisterMethod(TRTFWriterList,'Pop',TypeInfo(_T102),[TypeInfoPointer],Addr(TRTFWriterList.Pop));

RegRegisterMethod(TRTFWriterList,'Push',TypeInfo(_T103),[
TypeInfoPointer],Addr(TRTFWriterList.Push));

RegRegisterMethod(TRTFWriterList,'BeginTag',TypeInfo(_T104),[
TypeInfo(string)],Addr(TRTFWriterList.BeginTag));

RegRegisterMethod(TRTFWriterList,'EndTag',TypeInfo(_T105),[
TypeInfo(string)],Addr(TRTFWriterList.EndTag));

RegisterProc(TWriterColorObject,'Create',mtConstructor,TypeInfo(_T106),NoParams,Addr(TWriterColorObject.Create),cRegister);

RegRegisterMethod(TWriterColorObject,'AddColor',TypeInfo(_T107),[
TypeInfo(TColor),TypeInfo(Integer)],Addr(TWriterColorObject.AddColor));

RegisterProc(TWriterFontObject,'Create',mtConstructor,TypeInfo(_T108),NoParams,Addr(TWriterFontObject.Create),cRegister);

RegRegisterMethod(TWriterFontObject,'AddFont',TypeInfo(_T109),[
TypeInfo(string),
TypeInfo(Byte),TypeInfo(Integer)],Addr(TWriterFontObject.AddFont));

//RegRegisterMethod(TWriterObject,'BeginTag',TypeInfo(_T110),[TypeInfo(string)], pointer(0));
RegRegisterMethod(TWriterObject,'BeginTag',TypeInfo(_T110),[TypeInfo(string)],  getVMTProcAddr('TWriterObject','BeginTag',0));


//RegRegisterMethod(TWriterObject,'EndTag',TypeInfo(_T111),[TypeInfo(string)], pointer(4));
RegRegisterMethod(TWriterObject,'EndTag',TypeInfo(_T111),[TypeInfo(string)],  getVMTProcAddr('TWriterObject','EndTag',4));


//RegRegisterMethod(TWriterObject,'IsEmbeddedTag',TypeInfo(_T112),[TypeInfo(string),TypeInfo(Boolean)], pointer(8));
RegRegisterMethod(TWriterObject,'IsEmbeddedTag',TypeInfo(_T112),[TypeInfo(string),TypeInfo(Boolean)],  getVMTProcAddr('TWriterObject','IsEmbeddedTag',8));


//RegRegisterMethod(TWriterObject,'WriteString',TypeInfo(_T113),[TypeInfo(TStream),TypeInfo(string)], pointer(12));
RegRegisterMethod(TWriterObject,'WriteString',TypeInfo(_T113),[TypeInfo(TStream),TypeInfo(string)],  getVMTProcAddr('TWriterObject','WriteString',12));


RegRegisterMethod(TWriterObject,'WritelnString',TypeInfo(_T114),[
TypeInfo(TStream),
TypeInfo(string)],Addr(TWriterObject.WritelnString));

//RegRegisterMethod(TWriterObject,'Flush',TypeInfo(_T115),[TypeInfo(TStream)], pointer(16));
RegRegisterMethod(TWriterObject,'Flush',TypeInfo(_T115),[TypeInfo(TStream)],  getVMTProcAddr('TWriterObject','Flush',16));


//RegRegisterMethod(TWriterObject,'IsEmbeddedString',TypeInfo(_T116),[TypeInfo(string),TypeInfo(Boolean)], pointer(20));
RegRegisterMethod(TWriterObject,'IsEmbeddedString',TypeInfo(_T116),[TypeInfo(string),TypeInfo(Boolean)],  getVMTProcAddr('TWriterObject','IsEmbeddedString',20));


RegisterProc(TWriterTableObject,'Create',mtConstructor,TypeInfo(_T117),[
TypeInfo(IDispatch)],Addr(__TWriterTableObject__Create__Wrapper),cRegister);

RegRegisterMethod(TWriterTableObject,'StartTableRow',TypeInfo(_T118),NoParams,Addr(TWriterTableObject.StartTableRow));

RegRegisterMethod(TWriterTableObject,'FinishTableRow',TypeInfo(_T119),NoParams,Addr(TWriterTableObject.FinishTableRow));

RegRegisterMethod(TWriterTableObject,'StartTableDataCell',TypeInfo(_T120),[
TypeInfo(Integer)],Addr(TWriterTableObject.StartTableDataCell));

RegRegisterMethod(TWriterTableObject,'FinishTableDataCell',TypeInfo(_T121),NoParams,Addr(TWriterTableObject.FinishTableDataCell));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegRegisterMethod(TDCRTFExporter,'GetRTFWriterClass',TypeInfo(_T79),[TypeInfo(TRTFWriterListClass)], pointer(248))}

{RegRegisterMethod(TRTFConverter,'GetParserClass',TypeInfo(_T90),[TypeInfo(TDCRtfParserClass)], pointer(0))}

RegisterEvent(TypeInfo(TParseTextEvent),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(TFont),
TypeInfo(TColor)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
