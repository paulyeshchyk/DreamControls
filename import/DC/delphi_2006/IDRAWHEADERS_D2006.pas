{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDRAWHEADERS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  IdStack,
  IdRawHeaders;
function ConvertTIdArpHdrToVariant(var R : TIdArpHdr) : OleVariant;
function ConvertVariantToTIdArpHdr(const V : OleVariant) : TIdArpHdr;
function ConvertTIdDnsHdrToVariant(var R : TIdDnsHdr) : OleVariant;
function ConvertVariantToTIdDnsHdr(const V : OleVariant) : TIdDnsHdr;
function ConvertTIdEtherAddrToVariant(var R : TIdEtherAddr) : OleVariant;
function ConvertVariantToTIdEtherAddr(const V : OleVariant) : TIdEtherAddr;
function ConvertTIdEthernetHdrToVariant(var R : TIdEthernetHdr) : OleVariant;
function ConvertVariantToTIdEthernetHdr(const V : OleVariant) : TIdEthernetHdr;
function ConvertTIdIcmpEchoToVariant(var R : TIdIcmpEcho) : OleVariant;
function ConvertVariantToTIdIcmpEcho(const V : OleVariant) : TIdIcmpEcho;
function ConvertTIdIcmpFragToVariant(var R : TIdIcmpFrag) : OleVariant;
function ConvertVariantToTIdIcmpFrag(const V : OleVariant) : TIdIcmpFrag;
function ConvertTIdIcmpHdrToVariant(var R : TIdIcmpHdr) : OleVariant;
function ConvertVariantToTIdIcmpHdr(const V : OleVariant) : TIdIcmpHdr;
function ConvertTIdIcmpTsToVariant(var R : TIdIcmpTs) : OleVariant;
function ConvertVariantToTIdIcmpTs(const V : OleVariant) : TIdIcmpTs;
function ConvertTIdIgmpHdrToVariant(var R : TIdIgmpHdr) : OleVariant;
function ConvertVariantToTIdIgmpHdr(const V : OleVariant) : TIdIgmpHdr;
function ConvertTIdIpHdrToVariant(var R : TIdIpHdr) : OleVariant;
function ConvertVariantToTIdIpHdr(const V : OleVariant) : TIdIpHdr;
function ConvertTIdIpOptionsToVariant(var R : TIdIpOptions) : OleVariant;
function ConvertVariantToTIdIpOptions(const V : OleVariant) : TIdIpOptions;
function ConvertTIdRipHdrToVariant(var R : TIdRipHdr) : OleVariant;
function ConvertVariantToTIdRipHdr(const V : OleVariant) : TIdRipHdr;
function ConvertTIdTcpHdrToVariant(var R : TIdTcpHdr) : OleVariant;
function ConvertVariantToTIdTcpHdr(const V : OleVariant) : TIdTcpHdr;
function ConvertTIdTcpOptionsToVariant(var R : TIdTcpOptions) : OleVariant;
function ConvertVariantToTIdTcpOptions(const V : OleVariant) : TIdTcpOptions;
function ConvertTIdUdpHdrToVariant(var R : TIdUdpHdr) : OleVariant;
function ConvertVariantToTIdUdpHdr(const V : OleVariant) : TIdUdpHdr;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TIdArpHdr__Wrapper = class(TDCRecordWrapper)
private
fR : TIdArpHdr;
public
function GetRecordPtr : pointer; override;
published
procedure setarp_hrd(const val : Word);
function getarp_hrd : Word;
property arp_hrd : Word read getarp_hrd write setarp_hrd;
procedure setarp_pro(const val : Word);
function getarp_pro : Word;
property arp_pro : Word read getarp_pro write setarp_pro;
procedure setarp_hln(const val : Byte);
function getarp_hln : Byte;
property arp_hln : Byte read getarp_hln write setarp_hln;
procedure setarp_pln(const val : Byte);
function getarp_pln : Byte;
property arp_pln : Byte read getarp_pln write setarp_pln;
procedure setarp_op(const val : Word);
function getarp_op : Word;
property arp_op : Word read getarp_op write setarp_op;
end;
type __TIdDnsHdr__Wrapper = class(TDCRecordWrapper)
private
fR : TIdDnsHdr;
public
function GetRecordPtr : pointer; override;
published
procedure setdns_id(const val : Word);
function getdns_id : Word;
property dns_id : Word read getdns_id write setdns_id;
procedure setdns_flags(const val : Word);
function getdns_flags : Word;
property dns_flags : Word read getdns_flags write setdns_flags;
procedure setdns_num_q(const val : Word);
function getdns_num_q : Word;
property dns_num_q : Word read getdns_num_q write setdns_num_q;
procedure setdns_num_answ_rr(const val : Word);
function getdns_num_answ_rr : Word;
property dns_num_answ_rr : Word read getdns_num_answ_rr write setdns_num_answ_rr;
procedure setdns_num_auth_rr(const val : Word);
function getdns_num_auth_rr : Word;
property dns_num_auth_rr : Word read getdns_num_auth_rr write setdns_num_auth_rr;
procedure setdns_num_addi_rr(const val : Word);
function getdns_num_addi_rr : Word;
property dns_num_addi_rr : Word read getdns_num_addi_rr write setdns_num_addi_rr;
end;
type __TIdEtherAddr__Wrapper = class(TDCRecordWrapper)
private
fR : TIdEtherAddr;
public
function GetRecordPtr : pointer; override;
published
end;
type __TIdEthernetHdr__Wrapper = class(TDCRecordWrapper)
private
fR : TIdEthernetHdr;
public
function GetRecordPtr : pointer; override;
published
procedure setether_type(const val : Word);
function getether_type : Word;
property ether_type : Word read getether_type write setether_type;
end;
type __TIdIcmpEcho__Wrapper = class(TDCRecordWrapper)
private
fR : TIdIcmpEcho;
public
function GetRecordPtr : pointer; override;
published
procedure setid(const val : Word);
function getid : Word;
property id : Word read getid write setid;
procedure setseq(const val : Word);
function getseq : Word;
property seq : Word read getseq write setseq;
end;
type __TIdIcmpFrag__Wrapper = class(TDCRecordWrapper)
private
fR : TIdIcmpFrag;
public
function GetRecordPtr : pointer; override;
published
procedure setpad(const val : Word);
function getpad : Word;
property pad : Word read getpad write setpad;
procedure setmtu(const val : Word);
function getmtu : Word;
property mtu : Word read getmtu write setmtu;
end;
type __TIdIcmpHdr__Wrapper = class(TDCRecordWrapper)
private
fR : TIdIcmpHdr;
public
function GetRecordPtr : pointer; override;
published
procedure seticmp_type(const val : Byte);
function geticmp_type : Byte;
property icmp_type : Byte read geticmp_type write seticmp_type;
procedure seticmp_code(const val : Byte);
function geticmp_code : Byte;
property icmp_code : Byte read geticmp_code write seticmp_code;
procedure seticmp_sum(const val : Word);
function geticmp_sum : Word;
property icmp_sum : Word read geticmp_sum write seticmp_sum;
end;
type __TIdIcmpTs__Wrapper = class(TDCRecordWrapper)
private
fR : TIdIcmpTs;
public
function GetRecordPtr : pointer; override;
published
procedure setotime(const val : TIdNetTime);
function getotime : TIdNetTime;
property otime : TIdNetTime read getotime write setotime;
procedure setrtime(const val : TIdNetTime);
function getrtime : TIdNetTime;
property rtime : TIdNetTime read getrtime write setrtime;
procedure setttime(const val : TIdNetTime);
function getttime : TIdNetTime;
property ttime : TIdNetTime read getttime write setttime;
end;
type __TIdIgmpHdr__Wrapper = class(TDCRecordWrapper)
private
fR : TIdIgmpHdr;
public
function GetRecordPtr : pointer; override;
published
procedure setigmp_type(const val : Byte);
function getigmp_type : Byte;
property igmp_type : Byte read getigmp_type write setigmp_type;
procedure setigmp_code(const val : Byte);
function getigmp_code : Byte;
property igmp_code : Byte read getigmp_code write setigmp_code;
procedure setigmp_sum(const val : Word);
function getigmp_sum : Word;
property igmp_sum : Word read getigmp_sum write setigmp_sum;
end;
type __TIdIpHdr__Wrapper = class(TDCRecordWrapper)
private
fR : TIdIpHdr;
public
function GetRecordPtr : pointer; override;
published
procedure setip_verlen(const val : Byte);
function getip_verlen : Byte;
property ip_verlen : Byte read getip_verlen write setip_verlen;
procedure setip_tos(const val : Byte);
function getip_tos : Byte;
property ip_tos : Byte read getip_tos write setip_tos;
procedure setip_len(const val : Word);
function getip_len : Word;
property ip_len : Word read getip_len write setip_len;
procedure setip_id(const val : Word);
function getip_id : Word;
property ip_id : Word read getip_id write setip_id;
procedure setip_off(const val : Word);
function getip_off : Word;
property ip_off : Word read getip_off write setip_off;
procedure setip_ttl(const val : Byte);
function getip_ttl : Byte;
property ip_ttl : Byte read getip_ttl write setip_ttl;
procedure setip_p(const val : Byte);
function getip_p : Byte;
property ip_p : Byte read getip_p write setip_p;
procedure setip_sum(const val : Word);
function getip_sum : Word;
property ip_sum : Word read getip_sum write setip_sum;
procedure setip_options(const val : longword);
function getip_options : longword;
property ip_options : longword read getip_options write setip_options;
end;
type __TIdIpOptions__Wrapper = class(TDCRecordWrapper)
private
fR : TIdIpOptions;
public
function GetRecordPtr : pointer; override;
published
end;
type __TIdRipHdr__Wrapper = class(TDCRecordWrapper)
private
fR : TIdRipHdr;
public
function GetRecordPtr : pointer; override;
published
procedure setrip_cmd(const val : Byte);
function getrip_cmd : Byte;
property rip_cmd : Byte read getrip_cmd write setrip_cmd;
procedure setrip_ver(const val : Byte);
function getrip_ver : Byte;
property rip_ver : Byte read getrip_ver write setrip_ver;
procedure setrip_rd(const val : Word);
function getrip_rd : Word;
property rip_rd : Word read getrip_rd write setrip_rd;
procedure setrip_af(const val : Word);
function getrip_af : Word;
property rip_af : Word read getrip_af write setrip_af;
procedure setrip_rt(const val : Word);
function getrip_rt : Word;
property rip_rt : Word read getrip_rt write setrip_rt;
procedure setrip_addr(const val : longword);
function getrip_addr : longword;
property rip_addr : longword read getrip_addr write setrip_addr;
procedure setrip_mask(const val : longword);
function getrip_mask : longword;
property rip_mask : longword read getrip_mask write setrip_mask;
procedure setrip_next_hop(const val : longword);
function getrip_next_hop : longword;
property rip_next_hop : longword read getrip_next_hop write setrip_next_hop;
procedure setrip_metric(const val : longword);
function getrip_metric : longword;
property rip_metric : longword read getrip_metric write setrip_metric;
end;
type __TIdTcpHdr__Wrapper = class(TDCRecordWrapper)
private
fR : TIdTcpHdr;
public
function GetRecordPtr : pointer; override;
published
procedure settcp_sport(const val : Word);
function gettcp_sport : Word;
property tcp_sport : Word read gettcp_sport write settcp_sport;
procedure settcp_dport(const val : Word);
function gettcp_dport : Word;
property tcp_dport : Word read gettcp_dport write settcp_dport;
procedure settcp_seq(const val : longword);
function gettcp_seq : longword;
property tcp_seq : longword read gettcp_seq write settcp_seq;
procedure settcp_ack(const val : longword);
function gettcp_ack : longword;
property tcp_ack : longword read gettcp_ack write settcp_ack;
procedure settcp_x2off(const val : Byte);
function gettcp_x2off : Byte;
property tcp_x2off : Byte read gettcp_x2off write settcp_x2off;
procedure settcp_flags(const val : Byte);
function gettcp_flags : Byte;
property tcp_flags : Byte read gettcp_flags write settcp_flags;
procedure settcp_win(const val : Word);
function gettcp_win : Word;
property tcp_win : Word read gettcp_win write settcp_win;
procedure settcp_sum(const val : Word);
function gettcp_sum : Word;
property tcp_sum : Word read gettcp_sum write settcp_sum;
procedure settcp_urp(const val : Word);
function gettcp_urp : Word;
property tcp_urp : Word read gettcp_urp write settcp_urp;
end;
type __TIdTcpOptions__Wrapper = class(TDCRecordWrapper)
private
fR : TIdTcpOptions;
public
function GetRecordPtr : pointer; override;
published
end;
type __TIdUdpHdr__Wrapper = class(TDCRecordWrapper)
private
fR : TIdUdpHdr;
public
function GetRecordPtr : pointer; override;
published
procedure setudp_sport(const val : Word);
function getudp_sport : Word;
property udp_sport : Word read getudp_sport write setudp_sport;
procedure setudp_dport(const val : Word);
function getudp_dport : Word;
property udp_dport : Word read getudp_dport write setudp_dport;
procedure setudp_ulen(const val : Word);
function getudp_ulen : Word;
property udp_ulen : Word read getudp_ulen write setudp_ulen;
procedure setudp_sum(const val : Word);
function getudp_sum : Word;
property udp_sum : Word read getudp_sum write setudp_sum;
end;
function __TIdArpHdr__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIdArpHdr__Wrapper.setarp_hrd(const val : Word);
begin
TIdArpHdr(GetRecordPtr^).arp_hrd := val;
end;
function __TIdArpHdr__Wrapper.getarp_hrd : Word;
begin
result := TIdArpHdr(GetRecordPtr^).arp_hrd;
end;
procedure __TIdArpHdr__Wrapper.setarp_pro(const val : Word);
begin
TIdArpHdr(GetRecordPtr^).arp_pro := val;
end;
function __TIdArpHdr__Wrapper.getarp_pro : Word;
begin
result := TIdArpHdr(GetRecordPtr^).arp_pro;
end;
procedure __TIdArpHdr__Wrapper.setarp_hln(const val : Byte);
begin
TIdArpHdr(GetRecordPtr^).arp_hln := val;
end;
function __TIdArpHdr__Wrapper.getarp_hln : Byte;
begin
result := TIdArpHdr(GetRecordPtr^).arp_hln;
end;
procedure __TIdArpHdr__Wrapper.setarp_pln(const val : Byte);
begin
TIdArpHdr(GetRecordPtr^).arp_pln := val;
end;
function __TIdArpHdr__Wrapper.getarp_pln : Byte;
begin
result := TIdArpHdr(GetRecordPtr^).arp_pln;
end;
procedure __TIdArpHdr__Wrapper.setarp_op(const val : Word);
begin
TIdArpHdr(GetRecordPtr^).arp_op := val;
end;
function __TIdArpHdr__Wrapper.getarp_op : Word;
begin
result := TIdArpHdr(GetRecordPtr^).arp_op;
end;
function __TIdDnsHdr__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIdDnsHdr__Wrapper.setdns_id(const val : Word);
begin
TIdDnsHdr(GetRecordPtr^).dns_id := val;
end;
function __TIdDnsHdr__Wrapper.getdns_id : Word;
begin
result := TIdDnsHdr(GetRecordPtr^).dns_id;
end;
procedure __TIdDnsHdr__Wrapper.setdns_flags(const val : Word);
begin
TIdDnsHdr(GetRecordPtr^).dns_flags := val;
end;
function __TIdDnsHdr__Wrapper.getdns_flags : Word;
begin
result := TIdDnsHdr(GetRecordPtr^).dns_flags;
end;
procedure __TIdDnsHdr__Wrapper.setdns_num_q(const val : Word);
begin
TIdDnsHdr(GetRecordPtr^).dns_num_q := val;
end;
function __TIdDnsHdr__Wrapper.getdns_num_q : Word;
begin
result := TIdDnsHdr(GetRecordPtr^).dns_num_q;
end;
procedure __TIdDnsHdr__Wrapper.setdns_num_answ_rr(const val : Word);
begin
TIdDnsHdr(GetRecordPtr^).dns_num_answ_rr := val;
end;
function __TIdDnsHdr__Wrapper.getdns_num_answ_rr : Word;
begin
result := TIdDnsHdr(GetRecordPtr^).dns_num_answ_rr;
end;
procedure __TIdDnsHdr__Wrapper.setdns_num_auth_rr(const val : Word);
begin
TIdDnsHdr(GetRecordPtr^).dns_num_auth_rr := val;
end;
function __TIdDnsHdr__Wrapper.getdns_num_auth_rr : Word;
begin
result := TIdDnsHdr(GetRecordPtr^).dns_num_auth_rr;
end;
procedure __TIdDnsHdr__Wrapper.setdns_num_addi_rr(const val : Word);
begin
TIdDnsHdr(GetRecordPtr^).dns_num_addi_rr := val;
end;
function __TIdDnsHdr__Wrapper.getdns_num_addi_rr : Word;
begin
result := TIdDnsHdr(GetRecordPtr^).dns_num_addi_rr;
end;
function __TIdEtherAddr__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TIdEthernetHdr__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIdEthernetHdr__Wrapper.setether_type(const val : Word);
begin
TIdEthernetHdr(GetRecordPtr^).ether_type := val;
end;
function __TIdEthernetHdr__Wrapper.getether_type : Word;
begin
result := TIdEthernetHdr(GetRecordPtr^).ether_type;
end;
function __TIdIcmpEcho__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIdIcmpEcho__Wrapper.setid(const val : Word);
begin
TIdIcmpEcho(GetRecordPtr^).id := val;
end;
function __TIdIcmpEcho__Wrapper.getid : Word;
begin
result := TIdIcmpEcho(GetRecordPtr^).id;
end;
procedure __TIdIcmpEcho__Wrapper.setseq(const val : Word);
begin
TIdIcmpEcho(GetRecordPtr^).seq := val;
end;
function __TIdIcmpEcho__Wrapper.getseq : Word;
begin
result := TIdIcmpEcho(GetRecordPtr^).seq;
end;
function __TIdIcmpFrag__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIdIcmpFrag__Wrapper.setpad(const val : Word);
begin
TIdIcmpFrag(GetRecordPtr^).pad := val;
end;
function __TIdIcmpFrag__Wrapper.getpad : Word;
begin
result := TIdIcmpFrag(GetRecordPtr^).pad;
end;
procedure __TIdIcmpFrag__Wrapper.setmtu(const val : Word);
begin
TIdIcmpFrag(GetRecordPtr^).mtu := val;
end;
function __TIdIcmpFrag__Wrapper.getmtu : Word;
begin
result := TIdIcmpFrag(GetRecordPtr^).mtu;
end;
function __TIdIcmpHdr__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIdIcmpHdr__Wrapper.seticmp_type(const val : Byte);
begin
TIdIcmpHdr(GetRecordPtr^).icmp_type := val;
end;
function __TIdIcmpHdr__Wrapper.geticmp_type : Byte;
begin
result := TIdIcmpHdr(GetRecordPtr^).icmp_type;
end;
procedure __TIdIcmpHdr__Wrapper.seticmp_code(const val : Byte);
begin
TIdIcmpHdr(GetRecordPtr^).icmp_code := val;
end;
function __TIdIcmpHdr__Wrapper.geticmp_code : Byte;
begin
result := TIdIcmpHdr(GetRecordPtr^).icmp_code;
end;
procedure __TIdIcmpHdr__Wrapper.seticmp_sum(const val : Word);
begin
TIdIcmpHdr(GetRecordPtr^).icmp_sum := val;
end;
function __TIdIcmpHdr__Wrapper.geticmp_sum : Word;
begin
result := TIdIcmpHdr(GetRecordPtr^).icmp_sum;
end;
function __TIdIcmpTs__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIdIcmpTs__Wrapper.setotime(const val : TIdNetTime);
begin
TIdIcmpTs(GetRecordPtr^).otime := val;
end;
function __TIdIcmpTs__Wrapper.getotime : TIdNetTime;
begin
result := TIdIcmpTs(GetRecordPtr^).otime;
end;
procedure __TIdIcmpTs__Wrapper.setrtime(const val : TIdNetTime);
begin
TIdIcmpTs(GetRecordPtr^).rtime := val;
end;
function __TIdIcmpTs__Wrapper.getrtime : TIdNetTime;
begin
result := TIdIcmpTs(GetRecordPtr^).rtime;
end;
procedure __TIdIcmpTs__Wrapper.setttime(const val : TIdNetTime);
begin
TIdIcmpTs(GetRecordPtr^).ttime := val;
end;
function __TIdIcmpTs__Wrapper.getttime : TIdNetTime;
begin
result := TIdIcmpTs(GetRecordPtr^).ttime;
end;
function __TIdIgmpHdr__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIdIgmpHdr__Wrapper.setigmp_type(const val : Byte);
begin
TIdIgmpHdr(GetRecordPtr^).igmp_type := val;
end;
function __TIdIgmpHdr__Wrapper.getigmp_type : Byte;
begin
result := TIdIgmpHdr(GetRecordPtr^).igmp_type;
end;
procedure __TIdIgmpHdr__Wrapper.setigmp_code(const val : Byte);
begin
TIdIgmpHdr(GetRecordPtr^).igmp_code := val;
end;
function __TIdIgmpHdr__Wrapper.getigmp_code : Byte;
begin
result := TIdIgmpHdr(GetRecordPtr^).igmp_code;
end;
procedure __TIdIgmpHdr__Wrapper.setigmp_sum(const val : Word);
begin
TIdIgmpHdr(GetRecordPtr^).igmp_sum := val;
end;
function __TIdIgmpHdr__Wrapper.getigmp_sum : Word;
begin
result := TIdIgmpHdr(GetRecordPtr^).igmp_sum;
end;
function __TIdIpHdr__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIdIpHdr__Wrapper.setip_verlen(const val : Byte);
begin
TIdIpHdr(GetRecordPtr^).ip_verlen := val;
end;
function __TIdIpHdr__Wrapper.getip_verlen : Byte;
begin
result := TIdIpHdr(GetRecordPtr^).ip_verlen;
end;
procedure __TIdIpHdr__Wrapper.setip_tos(const val : Byte);
begin
TIdIpHdr(GetRecordPtr^).ip_tos := val;
end;
function __TIdIpHdr__Wrapper.getip_tos : Byte;
begin
result := TIdIpHdr(GetRecordPtr^).ip_tos;
end;
procedure __TIdIpHdr__Wrapper.setip_len(const val : Word);
begin
TIdIpHdr(GetRecordPtr^).ip_len := val;
end;
function __TIdIpHdr__Wrapper.getip_len : Word;
begin
result := TIdIpHdr(GetRecordPtr^).ip_len;
end;
procedure __TIdIpHdr__Wrapper.setip_id(const val : Word);
begin
TIdIpHdr(GetRecordPtr^).ip_id := val;
end;
function __TIdIpHdr__Wrapper.getip_id : Word;
begin
result := TIdIpHdr(GetRecordPtr^).ip_id;
end;
procedure __TIdIpHdr__Wrapper.setip_off(const val : Word);
begin
TIdIpHdr(GetRecordPtr^).ip_off := val;
end;
function __TIdIpHdr__Wrapper.getip_off : Word;
begin
result := TIdIpHdr(GetRecordPtr^).ip_off;
end;
procedure __TIdIpHdr__Wrapper.setip_ttl(const val : Byte);
begin
TIdIpHdr(GetRecordPtr^).ip_ttl := val;
end;
function __TIdIpHdr__Wrapper.getip_ttl : Byte;
begin
result := TIdIpHdr(GetRecordPtr^).ip_ttl;
end;
procedure __TIdIpHdr__Wrapper.setip_p(const val : Byte);
begin
TIdIpHdr(GetRecordPtr^).ip_p := val;
end;
function __TIdIpHdr__Wrapper.getip_p : Byte;
begin
result := TIdIpHdr(GetRecordPtr^).ip_p;
end;
procedure __TIdIpHdr__Wrapper.setip_sum(const val : Word);
begin
TIdIpHdr(GetRecordPtr^).ip_sum := val;
end;
function __TIdIpHdr__Wrapper.getip_sum : Word;
begin
result := TIdIpHdr(GetRecordPtr^).ip_sum;
end;
procedure __TIdIpHdr__Wrapper.setip_options(const val : longword);
begin
TIdIpHdr(GetRecordPtr^).ip_options := val;
end;
function __TIdIpHdr__Wrapper.getip_options : longword;
begin
result := TIdIpHdr(GetRecordPtr^).ip_options;
end;
function __TIdIpOptions__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TIdRipHdr__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIdRipHdr__Wrapper.setrip_cmd(const val : Byte);
begin
TIdRipHdr(GetRecordPtr^).rip_cmd := val;
end;
function __TIdRipHdr__Wrapper.getrip_cmd : Byte;
begin
result := TIdRipHdr(GetRecordPtr^).rip_cmd;
end;
procedure __TIdRipHdr__Wrapper.setrip_ver(const val : Byte);
begin
TIdRipHdr(GetRecordPtr^).rip_ver := val;
end;
function __TIdRipHdr__Wrapper.getrip_ver : Byte;
begin
result := TIdRipHdr(GetRecordPtr^).rip_ver;
end;
procedure __TIdRipHdr__Wrapper.setrip_rd(const val : Word);
begin
TIdRipHdr(GetRecordPtr^).rip_rd := val;
end;
function __TIdRipHdr__Wrapper.getrip_rd : Word;
begin
result := TIdRipHdr(GetRecordPtr^).rip_rd;
end;
procedure __TIdRipHdr__Wrapper.setrip_af(const val : Word);
begin
TIdRipHdr(GetRecordPtr^).rip_af := val;
end;
function __TIdRipHdr__Wrapper.getrip_af : Word;
begin
result := TIdRipHdr(GetRecordPtr^).rip_af;
end;
procedure __TIdRipHdr__Wrapper.setrip_rt(const val : Word);
begin
TIdRipHdr(GetRecordPtr^).rip_rt := val;
end;
function __TIdRipHdr__Wrapper.getrip_rt : Word;
begin
result := TIdRipHdr(GetRecordPtr^).rip_rt;
end;
procedure __TIdRipHdr__Wrapper.setrip_addr(const val : longword);
begin
TIdRipHdr(GetRecordPtr^).rip_addr := val;
end;
function __TIdRipHdr__Wrapper.getrip_addr : longword;
begin
result := TIdRipHdr(GetRecordPtr^).rip_addr;
end;
procedure __TIdRipHdr__Wrapper.setrip_mask(const val : longword);
begin
TIdRipHdr(GetRecordPtr^).rip_mask := val;
end;
function __TIdRipHdr__Wrapper.getrip_mask : longword;
begin
result := TIdRipHdr(GetRecordPtr^).rip_mask;
end;
procedure __TIdRipHdr__Wrapper.setrip_next_hop(const val : longword);
begin
TIdRipHdr(GetRecordPtr^).rip_next_hop := val;
end;
function __TIdRipHdr__Wrapper.getrip_next_hop : longword;
begin
result := TIdRipHdr(GetRecordPtr^).rip_next_hop;
end;
procedure __TIdRipHdr__Wrapper.setrip_metric(const val : longword);
begin
TIdRipHdr(GetRecordPtr^).rip_metric := val;
end;
function __TIdRipHdr__Wrapper.getrip_metric : longword;
begin
result := TIdRipHdr(GetRecordPtr^).rip_metric;
end;
function __TIdTcpHdr__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIdTcpHdr__Wrapper.settcp_sport(const val : Word);
begin
TIdTcpHdr(GetRecordPtr^).tcp_sport := val;
end;
function __TIdTcpHdr__Wrapper.gettcp_sport : Word;
begin
result := TIdTcpHdr(GetRecordPtr^).tcp_sport;
end;
procedure __TIdTcpHdr__Wrapper.settcp_dport(const val : Word);
begin
TIdTcpHdr(GetRecordPtr^).tcp_dport := val;
end;
function __TIdTcpHdr__Wrapper.gettcp_dport : Word;
begin
result := TIdTcpHdr(GetRecordPtr^).tcp_dport;
end;
procedure __TIdTcpHdr__Wrapper.settcp_seq(const val : longword);
begin
TIdTcpHdr(GetRecordPtr^).tcp_seq := val;
end;
function __TIdTcpHdr__Wrapper.gettcp_seq : longword;
begin
result := TIdTcpHdr(GetRecordPtr^).tcp_seq;
end;
procedure __TIdTcpHdr__Wrapper.settcp_ack(const val : longword);
begin
TIdTcpHdr(GetRecordPtr^).tcp_ack := val;
end;
function __TIdTcpHdr__Wrapper.gettcp_ack : longword;
begin
result := TIdTcpHdr(GetRecordPtr^).tcp_ack;
end;
procedure __TIdTcpHdr__Wrapper.settcp_x2off(const val : Byte);
begin
TIdTcpHdr(GetRecordPtr^).tcp_x2off := val;
end;
function __TIdTcpHdr__Wrapper.gettcp_x2off : Byte;
begin
result := TIdTcpHdr(GetRecordPtr^).tcp_x2off;
end;
procedure __TIdTcpHdr__Wrapper.settcp_flags(const val : Byte);
begin
TIdTcpHdr(GetRecordPtr^).tcp_flags := val;
end;
function __TIdTcpHdr__Wrapper.gettcp_flags : Byte;
begin
result := TIdTcpHdr(GetRecordPtr^).tcp_flags;
end;
procedure __TIdTcpHdr__Wrapper.settcp_win(const val : Word);
begin
TIdTcpHdr(GetRecordPtr^).tcp_win := val;
end;
function __TIdTcpHdr__Wrapper.gettcp_win : Word;
begin
result := TIdTcpHdr(GetRecordPtr^).tcp_win;
end;
procedure __TIdTcpHdr__Wrapper.settcp_sum(const val : Word);
begin
TIdTcpHdr(GetRecordPtr^).tcp_sum := val;
end;
function __TIdTcpHdr__Wrapper.gettcp_sum : Word;
begin
result := TIdTcpHdr(GetRecordPtr^).tcp_sum;
end;
procedure __TIdTcpHdr__Wrapper.settcp_urp(const val : Word);
begin
TIdTcpHdr(GetRecordPtr^).tcp_urp := val;
end;
function __TIdTcpHdr__Wrapper.gettcp_urp : Word;
begin
result := TIdTcpHdr(GetRecordPtr^).tcp_urp;
end;
function __TIdTcpOptions__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TIdUdpHdr__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIdUdpHdr__Wrapper.setudp_sport(const val : Word);
begin
TIdUdpHdr(GetRecordPtr^).udp_sport := val;
end;
function __TIdUdpHdr__Wrapper.getudp_sport : Word;
begin
result := TIdUdpHdr(GetRecordPtr^).udp_sport;
end;
procedure __TIdUdpHdr__Wrapper.setudp_dport(const val : Word);
begin
TIdUdpHdr(GetRecordPtr^).udp_dport := val;
end;
function __TIdUdpHdr__Wrapper.getudp_dport : Word;
begin
result := TIdUdpHdr(GetRecordPtr^).udp_dport;
end;
procedure __TIdUdpHdr__Wrapper.setudp_ulen(const val : Word);
begin
TIdUdpHdr(GetRecordPtr^).udp_ulen := val;
end;
function __TIdUdpHdr__Wrapper.getudp_ulen : Word;
begin
result := TIdUdpHdr(GetRecordPtr^).udp_ulen;
end;
procedure __TIdUdpHdr__Wrapper.setudp_sum(const val : Word);
begin
TIdUdpHdr(GetRecordPtr^).udp_sum := val;
end;
function __TIdUdpHdr__Wrapper.getudp_sum : Word;
begin
result := TIdUdpHdr(GetRecordPtr^).udp_sum;
end;
function _TIdArpHdr_ : IDispatch;
begin
  result := __TIdArpHdr__Wrapper.Create;
end;
function _TIdDnsHdr_ : IDispatch;
begin
  result := __TIdDnsHdr__Wrapper.Create;
end;
function _TIdEtherAddr_ : IDispatch;
begin
  result := __TIdEtherAddr__Wrapper.Create;
end;
function _TIdEthernetHdr_ : IDispatch;
begin
  result := __TIdEthernetHdr__Wrapper.Create;
end;
function _TIdIcmpEcho_ : IDispatch;
begin
  result := __TIdIcmpEcho__Wrapper.Create;
end;
function _TIdIcmpFrag_ : IDispatch;
begin
  result := __TIdIcmpFrag__Wrapper.Create;
end;
function _TIdIcmpHdr_ : IDispatch;
begin
  result := __TIdIcmpHdr__Wrapper.Create;
end;
function _TIdIcmpTs_ : IDispatch;
begin
  result := __TIdIcmpTs__Wrapper.Create;
end;
function _TIdIgmpHdr_ : IDispatch;
begin
  result := __TIdIgmpHdr__Wrapper.Create;
end;
function _TIdIpHdr_ : IDispatch;
begin
  result := __TIdIpHdr__Wrapper.Create;
end;
function _TIdIpOptions_ : IDispatch;
begin
  result := __TIdIpOptions__Wrapper.Create;
end;
function _TIdRipHdr_ : IDispatch;
begin
  result := __TIdRipHdr__Wrapper.Create;
end;
function _TIdTcpHdr_ : IDispatch;
begin
  result := __TIdTcpHdr__Wrapper.Create;
end;
function _TIdTcpOptions_ : IDispatch;
begin
  result := __TIdTcpOptions__Wrapper.Create;
end;
function _TIdUdpHdr_ : IDispatch;
begin
  result := __TIdUdpHdr__Wrapper.Create;
end;

type __TIdArpHdr__Wrapper__ = class(__TIdArpHdr__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIdArpHdr__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIdArpHdrToVariant(var R : TIdArpHdr) : OleVariant;
var
__rw : __TIdArpHdr__Wrapper__;
begin
__rw := __TIdArpHdr__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIdArpHdr(const V : OleVariant) : TIdArpHdr;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIdArpHdr((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TIdDnsHdr__Wrapper__ = class(__TIdDnsHdr__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIdDnsHdr__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIdDnsHdrToVariant(var R : TIdDnsHdr) : OleVariant;
var
__rw : __TIdDnsHdr__Wrapper__;
begin
__rw := __TIdDnsHdr__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIdDnsHdr(const V : OleVariant) : TIdDnsHdr;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIdDnsHdr((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TIdEtherAddr__Wrapper__ = class(__TIdEtherAddr__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIdEtherAddr__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIdEtherAddrToVariant(var R : TIdEtherAddr) : OleVariant;
var
__rw : __TIdEtherAddr__Wrapper__;
begin
__rw := __TIdEtherAddr__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIdEtherAddr(const V : OleVariant) : TIdEtherAddr;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIdEtherAddr((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TIdEthernetHdr__Wrapper__ = class(__TIdEthernetHdr__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIdEthernetHdr__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIdEthernetHdrToVariant(var R : TIdEthernetHdr) : OleVariant;
var
__rw : __TIdEthernetHdr__Wrapper__;
begin
__rw := __TIdEthernetHdr__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIdEthernetHdr(const V : OleVariant) : TIdEthernetHdr;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIdEthernetHdr((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TIdIcmpEcho__Wrapper__ = class(__TIdIcmpEcho__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIdIcmpEcho__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIdIcmpEchoToVariant(var R : TIdIcmpEcho) : OleVariant;
var
__rw : __TIdIcmpEcho__Wrapper__;
begin
__rw := __TIdIcmpEcho__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIdIcmpEcho(const V : OleVariant) : TIdIcmpEcho;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIdIcmpEcho((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TIdIcmpFrag__Wrapper__ = class(__TIdIcmpFrag__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIdIcmpFrag__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIdIcmpFragToVariant(var R : TIdIcmpFrag) : OleVariant;
var
__rw : __TIdIcmpFrag__Wrapper__;
begin
__rw := __TIdIcmpFrag__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIdIcmpFrag(const V : OleVariant) : TIdIcmpFrag;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIdIcmpFrag((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TIdIcmpHdr__Wrapper__ = class(__TIdIcmpHdr__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIdIcmpHdr__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIdIcmpHdrToVariant(var R : TIdIcmpHdr) : OleVariant;
var
__rw : __TIdIcmpHdr__Wrapper__;
begin
__rw := __TIdIcmpHdr__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIdIcmpHdr(const V : OleVariant) : TIdIcmpHdr;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIdIcmpHdr((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TIdIcmpTs__Wrapper__ = class(__TIdIcmpTs__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIdIcmpTs__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIdIcmpTsToVariant(var R : TIdIcmpTs) : OleVariant;
var
__rw : __TIdIcmpTs__Wrapper__;
begin
__rw := __TIdIcmpTs__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIdIcmpTs(const V : OleVariant) : TIdIcmpTs;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIdIcmpTs((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TIdIgmpHdr__Wrapper__ = class(__TIdIgmpHdr__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIdIgmpHdr__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIdIgmpHdrToVariant(var R : TIdIgmpHdr) : OleVariant;
var
__rw : __TIdIgmpHdr__Wrapper__;
begin
__rw := __TIdIgmpHdr__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIdIgmpHdr(const V : OleVariant) : TIdIgmpHdr;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIdIgmpHdr((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TIdIpHdr__Wrapper__ = class(__TIdIpHdr__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIdIpHdr__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIdIpHdrToVariant(var R : TIdIpHdr) : OleVariant;
var
__rw : __TIdIpHdr__Wrapper__;
begin
__rw := __TIdIpHdr__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIdIpHdr(const V : OleVariant) : TIdIpHdr;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIdIpHdr((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TIdIpOptions__Wrapper__ = class(__TIdIpOptions__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIdIpOptions__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIdIpOptionsToVariant(var R : TIdIpOptions) : OleVariant;
var
__rw : __TIdIpOptions__Wrapper__;
begin
__rw := __TIdIpOptions__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIdIpOptions(const V : OleVariant) : TIdIpOptions;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIdIpOptions((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TIdRipHdr__Wrapper__ = class(__TIdRipHdr__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIdRipHdr__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIdRipHdrToVariant(var R : TIdRipHdr) : OleVariant;
var
__rw : __TIdRipHdr__Wrapper__;
begin
__rw := __TIdRipHdr__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIdRipHdr(const V : OleVariant) : TIdRipHdr;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIdRipHdr((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TIdTcpHdr__Wrapper__ = class(__TIdTcpHdr__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIdTcpHdr__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIdTcpHdrToVariant(var R : TIdTcpHdr) : OleVariant;
var
__rw : __TIdTcpHdr__Wrapper__;
begin
__rw := __TIdTcpHdr__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIdTcpHdr(const V : OleVariant) : TIdTcpHdr;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIdTcpHdr((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TIdTcpOptions__Wrapper__ = class(__TIdTcpOptions__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIdTcpOptions__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIdTcpOptionsToVariant(var R : TIdTcpOptions) : OleVariant;
var
__rw : __TIdTcpOptions__Wrapper__;
begin
__rw := __TIdTcpOptions__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIdTcpOptions(const V : OleVariant) : TIdTcpOptions;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIdTcpOptions((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TIdUdpHdr__Wrapper__ = class(__TIdUdpHdr__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIdUdpHdr__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIdUdpHdrToVariant(var R : TIdUdpHdr) : OleVariant;
var
__rw : __TIdUdpHdr__Wrapper__;
begin
__rw := __TIdUdpHdr__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIdUdpHdr(const V : OleVariant) : TIdUdpHdr;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIdUdpHdr((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..92] of string = (
'Id_ARP_HSIZE'
,'Id_DNS_HSIZE'
,'Id_ETH_HSIZE'
,'Id_ICMP_HSIZE'
,'Id_ICMP_ECHO_HSIZE'
,'Id_ICMP_MASK_HSIZE'
,'Id_ICMP_UNREACH_HSIZE'
,'Id_ICMP_TIMEXCEED_HSIZE'
,'Id_ICMP_REDIRECT_HSIZE'
,'Id_ICMP_TS_HSIZE'
,'Id_IGMP_HSIZE'
,'Id_IP_HSIZE'
,'Id_RIP_HSIZE'
,'Id_TCP_HSIZE'
,'Id_UDP_HSIZE'
,'Id_MAX_IPOPTLEN'
,'Id_IP_RF'
,'Id_IP_DF'
,'Id_IP_MF'
,'Id_IP_OFFMASK'
,'Id_IP_MAXPACKET'
,'Id_TCP_FIN'
,'Id_TCP_SYN'
,'Id_TCP_RST'
,'Id_TCP_PUSH'
,'Id_TCP_ACK'
,'Id_TCP_URG'
,'Id_ICMP_ECHOREPLY'
,'Id_ICMP_UNREACH'
,'Id_ICMP_SOURCEQUENCH'
,'Id_ICMP_REDIRECT'
,'Id_ICMP_ECHO'
,'Id_ICMP_ROUTERADVERT'
,'Id_ICMP_ROUTERSOLICIT'
,'Id_ICMP_TIMXCEED'
,'Id_ICMP_PARAMPROB'
,'Id_ICMP_TSTAMP'
,'Id_ICMP_TSTAMPREPLY'
,'Id_ICMP_IREQ'
,'Id_ICMP_IREQREPLY'
,'Id_ICMP_MASKREQ'
,'Id_ICMP_MASKREPLY'
,'Id_ICMP_UNREACH_NET'
,'Id_ICMP_UNREACH_HOST'
,'Id_ICMP_UNREACH_PROTOCOL'
,'Id_ICMP_UNREACH_PORT'
,'Id_ICMP_UNREACH_NEEDFRAG'
,'Id_ICMP_UNREACH_SRCFAIL'
,'Id_ICMP_UNREACH_NET_UNKNOWN'
,'Id_ICMP_UNREACH_HOST_UNKNOWN'
,'Id_ICMP_UNREACH_ISOLATED'
,'Id_ICMP_UNREACH_NET_PROHIB'
,'Id_ICMP_UNREACH_HOST_PROHIB'
,'Id_ICMP_UNREACH_TOSNET'
,'Id_ICMP_UNREACH_TOSHOST'
,'Id_ICMP_UNREACH_FILTER_PROHIB'
,'Id_ICMP_UNREACH_HOST_PRECEDENCE'
,'Id_ICMP_UNREACH_PRECEDENCE_CUTOFF'
,'Id_ICMP_REDIRECT_NET'
,'Id_ICMP_REDIRECT_HOST'
,'Id_ICMP_REDIRECT_TOSNET'
,'Id_ICMP_REDIRECT_TOSHOST'
,'Id_ICMP_TIMXCEED_INTRANS'
,'Id_ICMP_TIMXCEED_REASS'
,'Id_ICMP_PARAMPROB_OPTABSENT'
,'Id_IGMP_MEMBERSHIP_QUERY'
,'Id_IGMP_V1_MEMBERSHIP_REPORT'
,'Id_IGMP_V2_MEMBERSHIP_REPORT'
,'Id_IGMP_LEAVE_GROUP'
,'Id_ETHER_ADDR_LEN'
,'Id_ETHERTYPE_PUP'
,'Id_ETHERTYPE_IP'
,'Id_ETHERTYPE_ARP'
,'Id_ETHERTYPE_REVARP'
,'Id_ETHERTYPE_VLAN'
,'Id_ETHERTYPE_LOOPBACK'
,'Id_ARPHRD_ETHER'
,'Id_ARPOP_REQUEST'
,'Id_ARPOP_REPLY'
,'Id_ARPOP_REVREQUEST'
,'Id_ARPOP_REVREPLY'
,'Id_ARPOP_INVREQUEST'
,'Id_ARPOP_INVREPLY'
,'Id_RIPCMD_REQUEST'
,'Id_RIPCMD_RESPONSE'
,'Id_RIPCMD_TRACEON'
,'Id_RIPCMD_TRACEOFF'
,'Id_RIPCMD_POLL'
,'Id_RIPCMD_POLLENTRY'
,'Id_RIPCMD_MAX'
,'Id_RIPVER_0'
,'Id_RIPVER_1'
,'Id_RIPVER_2'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,Id_ARP_HSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,Id_DNS_HSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,Id_ETH_HSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,Id_ICMP_HSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,Id_ICMP_ECHO_HSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,Id_ICMP_MASK_HSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,Id_ICMP_UNREACH_HSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,Id_ICMP_TIMEXCEED_HSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,Id_ICMP_REDIRECT_HSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,Id_ICMP_TS_HSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,Id_IGMP_HSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,Id_IP_HSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,Id_RIP_HSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,Id_TCP_HSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,Id_UDP_HSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,Id_MAX_IPOPTLEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,Id_IP_RF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,Id_IP_DF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,Id_IP_MF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,Id_IP_OFFMASK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,Id_IP_MAXPACKET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,Id_TCP_FIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,Id_TCP_SYN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,Id_TCP_RST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,Id_TCP_PUSH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,Id_TCP_ACK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,Id_TCP_URG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,Id_ICMP_ECHOREPLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,Id_ICMP_UNREACH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,Id_ICMP_SOURCEQUENCH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,Id_ICMP_REDIRECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,Id_ICMP_ECHO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,Id_ICMP_ROUTERADVERT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,Id_ICMP_ROUTERSOLICIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,Id_ICMP_TIMXCEED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,Id_ICMP_PARAMPROB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,Id_ICMP_TSTAMP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,Id_ICMP_TSTAMPREPLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,Id_ICMP_IREQ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,Id_ICMP_IREQREPLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,Id_ICMP_MASKREQ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,Id_ICMP_MASKREPLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,Id_ICMP_UNREACH_NET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,Id_ICMP_UNREACH_HOST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,Id_ICMP_UNREACH_PROTOCOL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,Id_ICMP_UNREACH_PORT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,Id_ICMP_UNREACH_NEEDFRAG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,Id_ICMP_UNREACH_SRCFAIL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,Id_ICMP_UNREACH_NET_UNKNOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,Id_ICMP_UNREACH_HOST_UNKNOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,Id_ICMP_UNREACH_ISOLATED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,Id_ICMP_UNREACH_NET_PROHIB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,Id_ICMP_UNREACH_HOST_PROHIB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,Id_ICMP_UNREACH_TOSNET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,Id_ICMP_UNREACH_TOSHOST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,Id_ICMP_UNREACH_FILTER_PROHIB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,Id_ICMP_UNREACH_HOST_PRECEDENCE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,Id_ICMP_UNREACH_PRECEDENCE_CUTOFF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,Id_ICMP_REDIRECT_NET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,Id_ICMP_REDIRECT_HOST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,Id_ICMP_REDIRECT_TOSNET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,Id_ICMP_REDIRECT_TOSHOST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,Id_ICMP_TIMXCEED_INTRANS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,Id_ICMP_TIMXCEED_REASS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,Id_ICMP_PARAMPROB_OPTABSENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[65] ,Id_IGMP_MEMBERSHIP_QUERY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[66] ,Id_IGMP_V1_MEMBERSHIP_REPORT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[67] ,Id_IGMP_V2_MEMBERSHIP_REPORT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[68] ,Id_IGMP_LEAVE_GROUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[69] ,Id_ETHER_ADDR_LEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[70] ,Id_ETHERTYPE_PUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[71] ,Id_ETHERTYPE_IP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[72] ,Id_ETHERTYPE_ARP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[73] ,Id_ETHERTYPE_REVARP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[74] ,Id_ETHERTYPE_VLAN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[75] ,Id_ETHERTYPE_LOOPBACK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[76] ,Id_ARPHRD_ETHER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[77] ,Id_ARPOP_REQUEST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[78] ,Id_ARPOP_REPLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[79] ,Id_ARPOP_REVREQUEST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[80] ,Id_ARPOP_REVREPLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[81] ,Id_ARPOP_INVREQUEST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[82] ,Id_ARPOP_INVREPLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[83] ,Id_RIPCMD_REQUEST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[84] ,Id_RIPCMD_RESPONSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[85] ,Id_RIPCMD_TRACEON));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[86] ,Id_RIPCMD_TRACEOFF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[87] ,Id_RIPCMD_POLL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[88] ,Id_RIPCMD_POLLENTRY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[89] ,Id_RIPCMD_MAX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[90] ,Id_RIPVER_0));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[91] ,Id_RIPVER_1));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[92] ,Id_RIPVER_2));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..14] of string = (
'TIdArpHdr'
,'TIdDnsHdr'
,'TIdEtherAddr'
,'TIdEthernetHdr'
,'TIdIcmpEcho'
,'TIdIcmpFrag'
,'TIdIcmpHdr'
,'TIdIcmpTs'
,'TIdIgmpHdr'
,'TIdIpHdr'
,'TIdIpOptions'
,'TIdRipHdr'
,'TIdTcpHdr'
,'TIdTcpOptions'
,'TIdUdpHdr'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TIdArpHdr_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_TIdDnsHdr_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_TIdEtherAddr_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(_TIdEthernetHdr_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(_TIdIcmpEcho_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[5],Addr(_TIdIcmpFrag_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[6],Addr(_TIdIcmpHdr_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[7],Addr(_TIdIcmpTs_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[8],Addr(_TIdIgmpHdr_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[9],Addr(_TIdIpHdr_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[10],Addr(_TIdIpOptions_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[11],Addr(_TIdRipHdr_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[12],Addr(_TIdTcpHdr_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[13],Addr(_TIdTcpOptions_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[14],Addr(_TIdUdpHdr_)));
end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
