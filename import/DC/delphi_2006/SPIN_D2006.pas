{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit SPIN_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Classes,
  StdCtrls,
  ExtCtrls,
  Controls,
  Messages,
  SysUtils,
  Forms,
  Graphics,
  Menus,
  Buttons,
  Spin;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = function (p0 : Char): Boolean of object;

_T1 = procedure (p0 : TObject) of object;

_T2 = _T1;

function __DC__GetTSpinEdit__Button(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TSpinEdit(Instance).Button);
end;

function __DC__GetTTimerSpeedButton__TimeBtnState(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TTimeBtnState;
begin
tmp := TTimerSpeedButton(Instance).TimeBtnState;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTTimerSpeedButton__TimeBtnState(Instance : TObject; Params : PVariantArgList);
var
  tmp : TTimeBtnState;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TTimerSpeedButton(Instance).TimeBtnState:=tmp;
end;

procedure __RegisterProps;
begin
RegisterProperty(TSpinEdit,'Button',__DC__GetTSpinEdit__Button,nil);
RegisterProperty(TTimerSpeedButton,'TimeBtnState',__DC__GetTTimerSpeedButton__TimeBtnState,__DC__SetTTimerSpeedButton__TimeBtnState);
end;

const __ConstNames0 : array[0..3] of string = (
'InitRepeatPause'
,'RepeatPause'
,'tbFocusRect'
,'tbAllowTimer'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,InitRepeatPause));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,RepeatPause));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,tbFocusRect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,tbAllowTimer));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..2] of TClass = (
TSpinButton,
TSpinEdit,
TTimerSpeedButton
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TSpinEdit,'IsValidChar',TypeInfo(_T0),[TypeInfo(Char),TypeInfo(Boolean)], pointer(248));
RegRegisterMethod(TSpinEdit,'IsValidChar',TypeInfo(_T0),[TypeInfo(Char),TypeInfo(Boolean)],  getVMTProcAddr('TSpinEdit','IsValidChar',248));


//RegRegisterMethod(TSpinEdit,'UpClick',TypeInfo(_T1),[TypeInfo(TObject)], pointer(252));
RegRegisterMethod(TSpinEdit,'UpClick',TypeInfo(_T1),[TypeInfo(TObject)],  getVMTProcAddr('TSpinEdit','UpClick',252));


//RegRegisterMethod(TSpinEdit,'DownClick',TypeInfo(_T2),[TypeInfo(TObject)], pointer(256));
RegRegisterMethod(TSpinEdit,'DownClick',TypeInfo(_T2),[TypeInfo(TObject)],  getVMTProcAddr('TSpinEdit','DownClick',256));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
