{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit PALETTEAPI_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  ToolsAPI,
  Graphics,
  ActiveX,
  Menus,
  GraphUtil,
  PaletteAPI;
function ConvertTOTAPaletteButtonColorsToVariant(var R : TOTAPaletteButtonColors) : OleVariant;
function ConvertVariantToTOTAPaletteButtonColors(const V : OleVariant) : TOTAPaletteButtonColors;
function ConvertTOTAPaletteColorItemToVariant(var R : TOTAPaletteColorItem) : OleVariant;
function ConvertVariantToTOTAPaletteColorItem(const V : OleVariant) : TOTAPaletteColorItem;
function ConvertTOTAPaletteOptionsToVariant(var R : TOTAPaletteOptions) : OleVariant;
function ConvertVariantToTOTAPaletteOptions(const V : OleVariant) : TOTAPaletteOptions;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TOTAPaletteButtonColors__Wrapper = class(TDCRecordWrapper)
private
fR : TOTAPaletteButtonColors;
public
function GetRecordPtr : pointer; override;
published
procedure setRegularColor(const val : TColor);
function getRegularColor : TColor;
property RegularColor : TColor read getRegularColor write setRegularColor;
procedure setSelectedColor(const val : TColor);
function getSelectedColor : TColor;
property SelectedColor : TColor read getSelectedColor write setSelectedColor;
procedure setHotColor(const val : TColor);
function getHotColor : TColor;
property HotColor : TColor read getHotColor write setHotColor;
end;
type __TOTAPaletteColorItem__Wrapper = class(TDCRecordWrapper)
private
fR : TOTAPaletteColorItem;
public
function GetRecordPtr : pointer; override;
published
procedure setStartColor(const val : TColor);
function getStartColor : TColor;
property StartColor : TColor read getStartColor write setStartColor;
procedure setEndColor(const val : TColor);
function getEndColor : TColor;
property EndColor : TColor read getEndColor write setEndColor;
procedure setTextColor(const val : TColor);
function getTextColor : TColor;
property TextColor : TColor read getTextColor write setTextColor;
end;
type __TOTAPaletteOptions__Wrapper = class(TDCRecordWrapper)
private
fR : TOTAPaletteOptions;
public
function GetRecordPtr : pointer; override;
published
procedure setBackgroundColor(const val : TColor);
function getBackgroundColor : TColor;
property BackgroundColor : TColor read getBackgroundColor write setBackgroundColor;
procedure setBackgroundGradientColor(const val : TColor);
function getBackgroundGradientColor : TColor;
property BackgroundGradientColor : TColor read getBackgroundGradientColor write setBackgroundGradientColor;
procedure setBoldCaptions(const val : Boolean);
function getBoldCaptions : Boolean;
property BoldCaptions : Boolean read getBoldCaptions write setBoldCaptions;
procedure setCaptionOnlyBorder(const val : Boolean);
function getCaptionOnlyBorder : Boolean;
property CaptionOnlyBorder : Boolean read getCaptionOnlyBorder write setCaptionOnlyBorder;
procedure setUsePlusMinus(const val : Boolean);
function getUsePlusMinus : Boolean;
property UsePlusMinus : Boolean read getUsePlusMinus write setUsePlusMinus;
procedure setCategoryGradientDirection(const val : TGradientDirection);
function getCategoryGradientDirection : TGradientDirection;
property CategoryGradientDirection : TGradientDirection read getCategoryGradientDirection write setCategoryGradientDirection;
procedure setBackgroundGradientDirection(const val : TGradientDirection);
function getBackgroundGradientDirection : TGradientDirection;
property BackgroundGradientDirection : TGradientDirection read getBackgroundGradientDirection write setBackgroundGradientDirection;
end;
function __TOTAPaletteButtonColors__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TOTAPaletteButtonColors__Wrapper.setRegularColor(const val : TColor);
begin
TOTAPaletteButtonColors(GetRecordPtr^).RegularColor := val;
end;
function __TOTAPaletteButtonColors__Wrapper.getRegularColor : TColor;
begin
result := TOTAPaletteButtonColors(GetRecordPtr^).RegularColor;
end;
procedure __TOTAPaletteButtonColors__Wrapper.setSelectedColor(const val : TColor);
begin
TOTAPaletteButtonColors(GetRecordPtr^).SelectedColor := val;
end;
function __TOTAPaletteButtonColors__Wrapper.getSelectedColor : TColor;
begin
result := TOTAPaletteButtonColors(GetRecordPtr^).SelectedColor;
end;
procedure __TOTAPaletteButtonColors__Wrapper.setHotColor(const val : TColor);
begin
TOTAPaletteButtonColors(GetRecordPtr^).HotColor := val;
end;
function __TOTAPaletteButtonColors__Wrapper.getHotColor : TColor;
begin
result := TOTAPaletteButtonColors(GetRecordPtr^).HotColor;
end;
function __TOTAPaletteColorItem__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TOTAPaletteColorItem__Wrapper.setStartColor(const val : TColor);
begin
TOTAPaletteColorItem(GetRecordPtr^).StartColor := val;
end;
function __TOTAPaletteColorItem__Wrapper.getStartColor : TColor;
begin
result := TOTAPaletteColorItem(GetRecordPtr^).StartColor;
end;
procedure __TOTAPaletteColorItem__Wrapper.setEndColor(const val : TColor);
begin
TOTAPaletteColorItem(GetRecordPtr^).EndColor := val;
end;
function __TOTAPaletteColorItem__Wrapper.getEndColor : TColor;
begin
result := TOTAPaletteColorItem(GetRecordPtr^).EndColor;
end;
procedure __TOTAPaletteColorItem__Wrapper.setTextColor(const val : TColor);
begin
TOTAPaletteColorItem(GetRecordPtr^).TextColor := val;
end;
function __TOTAPaletteColorItem__Wrapper.getTextColor : TColor;
begin
result := TOTAPaletteColorItem(GetRecordPtr^).TextColor;
end;
function __TOTAPaletteOptions__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TOTAPaletteOptions__Wrapper.setBackgroundColor(const val : TColor);
begin
TOTAPaletteOptions(GetRecordPtr^).BackgroundColor := val;
end;
function __TOTAPaletteOptions__Wrapper.getBackgroundColor : TColor;
begin
result := TOTAPaletteOptions(GetRecordPtr^).BackgroundColor;
end;
procedure __TOTAPaletteOptions__Wrapper.setBackgroundGradientColor(const val : TColor);
begin
TOTAPaletteOptions(GetRecordPtr^).BackgroundGradientColor := val;
end;
function __TOTAPaletteOptions__Wrapper.getBackgroundGradientColor : TColor;
begin
result := TOTAPaletteOptions(GetRecordPtr^).BackgroundGradientColor;
end;
procedure __TOTAPaletteOptions__Wrapper.setBoldCaptions(const val : Boolean);
begin
TOTAPaletteOptions(GetRecordPtr^).BoldCaptions := val;
end;
function __TOTAPaletteOptions__Wrapper.getBoldCaptions : Boolean;
begin
result := TOTAPaletteOptions(GetRecordPtr^).BoldCaptions;
end;
procedure __TOTAPaletteOptions__Wrapper.setCaptionOnlyBorder(const val : Boolean);
begin
TOTAPaletteOptions(GetRecordPtr^).CaptionOnlyBorder := val;
end;
function __TOTAPaletteOptions__Wrapper.getCaptionOnlyBorder : Boolean;
begin
result := TOTAPaletteOptions(GetRecordPtr^).CaptionOnlyBorder;
end;
procedure __TOTAPaletteOptions__Wrapper.setUsePlusMinus(const val : Boolean);
begin
TOTAPaletteOptions(GetRecordPtr^).UsePlusMinus := val;
end;
function __TOTAPaletteOptions__Wrapper.getUsePlusMinus : Boolean;
begin
result := TOTAPaletteOptions(GetRecordPtr^).UsePlusMinus;
end;
procedure __TOTAPaletteOptions__Wrapper.setCategoryGradientDirection(const val : TGradientDirection);
begin
TOTAPaletteOptions(GetRecordPtr^).CategoryGradientDirection := val;
end;
function __TOTAPaletteOptions__Wrapper.getCategoryGradientDirection : TGradientDirection;
begin
result := TOTAPaletteOptions(GetRecordPtr^).CategoryGradientDirection;
end;
procedure __TOTAPaletteOptions__Wrapper.setBackgroundGradientDirection(const val : TGradientDirection);
begin
TOTAPaletteOptions(GetRecordPtr^).BackgroundGradientDirection := val;
end;
function __TOTAPaletteOptions__Wrapper.getBackgroundGradientDirection : TGradientDirection;
begin
result := TOTAPaletteOptions(GetRecordPtr^).BackgroundGradientDirection;
end;
function _TOTAPaletteButtonColors_ : IDispatch;
begin
  result := __TOTAPaletteButtonColors__Wrapper.Create;
end;
function _TOTAPaletteColorItem_ : IDispatch;
begin
  result := __TOTAPaletteColorItem__Wrapper.Create;
end;
function _TOTAPaletteOptions_ : IDispatch;
begin
  result := __TOTAPaletteOptions__Wrapper.Create;
end;

type __TOTAPaletteButtonColors__Wrapper__ = class(__TOTAPaletteButtonColors__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TOTAPaletteButtonColors__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTOTAPaletteButtonColorsToVariant(var R : TOTAPaletteButtonColors) : OleVariant;
var
__rw : __TOTAPaletteButtonColors__Wrapper__;
begin
__rw := __TOTAPaletteButtonColors__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTOTAPaletteButtonColors(const V : OleVariant) : TOTAPaletteButtonColors;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TOTAPaletteButtonColors((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TOTAPaletteColorItem__Wrapper__ = class(__TOTAPaletteColorItem__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TOTAPaletteColorItem__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTOTAPaletteColorItemToVariant(var R : TOTAPaletteColorItem) : OleVariant;
var
__rw : __TOTAPaletteColorItem__Wrapper__;
begin
__rw := __TOTAPaletteColorItem__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTOTAPaletteColorItem(const V : OleVariant) : TOTAPaletteColorItem;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TOTAPaletteColorItem((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TOTAPaletteOptions__Wrapper__ = class(__TOTAPaletteOptions__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TOTAPaletteOptions__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTOTAPaletteOptionsToVariant(var R : TOTAPaletteOptions) : OleVariant;
var
__rw : __TOTAPaletteOptions__Wrapper__;
begin
__rw := __TOTAPaletteOptions__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTOTAPaletteOptions(const V : OleVariant) : TOTAPaletteOptions;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TOTAPaletteOptions((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..7] of string = (
'pi16x16'
,'pi24x24'
,'pi32x32'
,'pdsDragEnter'
,'pdsDragLeave'
,'pdsDragMove'
,'cPSCodeEditorActive'
,'cPSDesignerActive'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,pi16x16));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,pi24x24));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,pi32x32));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,pdsDragEnter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,pdsDragLeave));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,pdsDragMove));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,cPSCodeEditorActive));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,cPSDesignerActive));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..2] of string = (
'TOTAPaletteButtonColors'
,'TOTAPaletteColorItem'
,'TOTAPaletteOptions'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TOTAPaletteButtonColors_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_TOTAPaletteColorItem_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_TOTAPaletteOptions_)));
end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
