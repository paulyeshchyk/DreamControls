{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit WEBDISP_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  Messages,
  HTTPApp,
  HTTPProd,
  WebCntxt,
  Masks,
  WebComp,
  Contnrs,
  SysUtils,
  SiteComp,
  WebDisp;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = function (const p0 : string;
p1 : TWebResponse;
p2 : TDispatchPageFlags): Boolean of object;

_T1 = function (const p0 : string;
p1 : TStrings;
p2 : TWebResponse;
p3 : TDispatchPageFlags): Boolean of object;

_T2 = function : string of object;

_T3 = function (p0 : TWebRequest): string of object;

_T4 = procedure (const p0 : string) of object;

_T5 = function (p0 : TStrings): string of object;

_T6 = procedure (p0 : TWebResponse;
const p1 : string) of object;

_T7 = procedure (const p0 : string;
p1 : TStrings) of object;

_T8 = _T5;

_T9 = procedure  of object;

_T10 = _T4;

_T11 = _T4;

_T12 = function (p0 : EScriptError): string of object;

{_T13 = function (p0 : IUnknown): TStrings of object;}

_T14 = procedure (p0 : TWebRequest) of object;

_T15 = _T9;

_T16 = function (p0 : TWebRequest;
p1 : TWebResponse): Boolean of object;

{_T17 = procedure (p0 : IUnknown;
p1 : IAdapterItemRequestParams) of object;}

_T18 = function (p0 : TWebRequest): TAdapterDispatchParams of object;

{_T19 = function (p0 : IUnknown;
p1 : TAdapterItemRequestParamOptions): string of object;}

{_T20 = function (p0 : IUnknown;
p1 : TAdapterItemRequestParamOptions): string of object;}

{_T21 = procedure (p0 : IUnknown;
p1 : TAdapterItemRequestParamOptions;
p2 : IAdapterItemRequestParams) of object;}

_T22 = function (p0 : TComponent;
const p1 : string;
var p2 : string): Boolean of object;

_T23 = function (p0 : TComponent;
p1 : string;
out p2 : Boolean): TStream of object;

_T24 = function (p0 : TComponent;
const p1 : string;
out p2 : TStream;
out p3 : Boolean): Boolean of object;

_T25 = function (const p0 : string;
out p1 : Boolean): TStream of object;

_T26 = _T3;

_T27 = _T2;

_T28 = function (const p0 : string): Boolean of object;

_T29 = _T28;

{_T30 = procedure (p0 : IInterfaceList) of object;}

_T31 = _T4;

_T32 = _T9;

_T33 = procedure (p0 : TComponent) of object;

_T34 = _T33;

_T35 = function : TAbstractWebContext of object;

_T36 = procedure (p0 : Exception;
var p1 : Boolean) of object;

_T37 = procedure (p0 : TAbstractWebModuleList;
p1 : TWebRequest;
p2 : TWebResponse) of object;

_T38 = function : Boolean of object;

_T39 = _T9;

{_T40 = procedure (p0 : ISessionsService;
p1 : TWebRequest;
p2 : TWebResponse) of object;}

function __DC__GetTAdapterDispatchParams__RequestIdentifier(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TAdapterDispatchParams(Instance).RequestIdentifier;
end;

function __DC__GetTAdapterDispatchParams__ObjectIdentifier(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TAdapterDispatchParams(Instance).ObjectIdentifier;
end;

function __DC__GetTAdapterDispatchParams__Handler(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TAdapterDispatchParams(Instance).Handler);
end;

function __DC__GetTAdapterItemRequestParams__SuccessPage(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TAdapterItemRequestParams(Instance).SuccessPage;
end;

procedure __DC__SetTAdapterItemRequestParams__SuccessPage(Instance : TObject; Params : PVariantArgList);
begin
TAdapterItemRequestParams(Instance).SuccessPage:=OleVariant(Params^[0]);
end;

function __DC__GetTAdapterItemRequestParams__FailurePage(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TAdapterItemRequestParams(Instance).FailurePage;
end;

procedure __DC__SetTAdapterItemRequestParams__FailurePage(Instance : TObject; Params : PVariantArgList);
begin
TAdapterItemRequestParams(Instance).FailurePage:=OleVariant(Params^[0]);
end;

function __DC__GetTAdapterItemRequestParams__ParamValues(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TAdapterItemRequestParams(Instance).ParamValues);
end;

function __DC__GetTCustomPageDispatcher__DefaultPage(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomPageDispatcher(Instance).DefaultPage;
end;

procedure __DC__SetTCustomPageDispatcher__DefaultPage(Instance : TObject; Params : PVariantArgList);
begin
TCustomPageDispatcher(Instance).DefaultPage:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TAdapterDispatchParams,'RequestIdentifier',__DC__GetTAdapterDispatchParams__RequestIdentifier,nil);
RegisterProperty(TAdapterDispatchParams,'ObjectIdentifier',__DC__GetTAdapterDispatchParams__ObjectIdentifier,nil);
RegisterProperty(TAdapterDispatchParams,'Handler',__DC__GetTAdapterDispatchParams__Handler,nil);
RegisterProperty(TAdapterItemRequestParams,'SuccessPage',__DC__GetTAdapterItemRequestParams__SuccessPage,__DC__SetTAdapterItemRequestParams__SuccessPage);
RegisterProperty(TAdapterItemRequestParams,'FailurePage',__DC__GetTAdapterItemRequestParams__FailurePage,__DC__SetTAdapterItemRequestParams__FailurePage);
RegisterProperty(TAdapterItemRequestParams,'ParamValues',__DC__GetTAdapterItemRequestParams__ParamValues,nil);
RegisterProperty(TCustomPageDispatcher,'DefaultPage',__DC__GetTCustomPageDispatcher__DefaultPage,__DC__SetTCustomPageDispatcher__DefaultPage);
end;

const __ConstNames0 : array[0..6] of string = (
'adLoginRequired'
,'adCantView'
,'sRequestIDParamName'
,'sSuccessPageParamName'
,'sFailurePageParamName'
,'sPageParamName'
,'sSessionCookieName'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,adLoginRequired));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,adCantView));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,sRequestIDParamName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,sSuccessPageParamName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,sFailurePageParamName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,sPageParamName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,sSessionCookieName));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..18] of TClass = (
EAdapterDispatcherException,
EPageDispatcherException,
ESessionException,
TAdapterDispatcher,
TAdapterDispatchParams,
TAdapterItemRequestParams,
TBaseRequestHandler,
TCustomAdapterDispatcher,
TCustomLocateFileService,
TCustomPageDispatcher,
TCustomWebAppComponents,
TInvalidWebSession,
TLocateFileService,
TMultiModuleWebAppServices,
TPageDispatcher,
TWebAppComponents,
TWebRequest,
TWebResponse,
TWebSession
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..12] of string = (
'DispatchPageName'
,'RedirectToPageName'
,'FindDefaultAppPageName'
,'PageNameOfRequest'
,'RegisterAdapterRequestIdentifier'
,'EncodeParamsAsHTTPQuery'
,'SafeRedirect'
,'ExtractParamNameValues'
,'EncodeParamNameValues'
,'RaiseDispatchBlankPageNameException'
,'RaisePageDoesNotProvideContent'
,'RaisePageNotFound'
,'ExpandScriptException'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(string),
TypeInfo(TWebResponse),
TypeInfo(TDispatchPageFlags),TypeInfo(Boolean)],Addr(DispatchPageName),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(string),
TypeInfo(TStrings),
TypeInfo(TWebResponse),
TypeInfo(TDispatchPageFlags),TypeInfo(Boolean)],Addr(RedirectToPageName),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T2),[TypeInfo(string)],Addr(FindDefaultAppPageName),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T3),[
TypeInfo(TWebRequest),TypeInfo(string)],Addr(PageNameOfRequest),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T4),[
TypeInfo(string)],Addr(RegisterAdapterRequestIdentifier),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T5),[
TypeInfo(TStrings),TypeInfo(string)],Addr(EncodeParamsAsHTTPQuery),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T6),[
TypeInfo(TWebResponse),
TypeInfo(string)],Addr(SafeRedirect),cRegister);

RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T7),[
TypeInfo(string),
TypeInfo(TStrings)],Addr(ExtractParamNameValues),cRegister);

RegisterProc(nil,MethodNames[8],mtProc,TypeInfo(_T8),[
TypeInfo(TStrings),TypeInfo(string)],Addr(EncodeParamNameValues),cRegister);

RegisterProc(nil,MethodNames[9],mtProc,TypeInfo(_T9),NoParams,Addr(RaiseDispatchBlankPageNameException),cRegister);

RegisterProc(nil,MethodNames[10],mtProc,TypeInfo(_T10),[
TypeInfo(string)],Addr(RaisePageDoesNotProvideContent),cRegister);

RegisterProc(nil,MethodNames[11],mtProc,TypeInfo(_T11),[
TypeInfo(string)],Addr(RaisePageNotFound),cRegister);

RegisterProc(nil,MethodNames[12],mtProc,TypeInfo(_T12),[
TypeInfo(EScriptError),TypeInfo(string)],Addr(ExpandScriptException),cRegister);

RegisterProc(TAdapterDispatchParams,'Create',mtConstructor,TypeInfo(_T14),[
TypeInfo(TWebRequest)],Addr(TAdapterDispatchParams.Create),cRegister);

RegisterProc(TAdapterItemRequestParams,'Create',mtConstructor,TypeInfo(_T15),NoParams,Addr(TAdapterItemRequestParams.Create),cRegister);

//RegRegisterMethod(TBaseRequestHandler,'ImplHandleRequest',TypeInfo(_T16),[TypeInfo(TWebRequest),TypeInfo(TWebResponse),TypeInfo(Boolean)], pointer(48));
RegRegisterMethod(TBaseRequestHandler,'ImplHandleRequest',TypeInfo(_T16),[TypeInfo(TWebRequest),TypeInfo(TWebResponse),TypeInfo(Boolean)],  getVMTProcAddr('TBaseRequestHandler','ImplHandleRequest',48));


//RegRegisterMethod(TCustomAdapterDispatcher,'GetDispatchParams',TypeInfo(_T18),[TypeInfo(TWebRequest),TypeInfo(TAdapterDispatchParams)], pointer(56));
RegRegisterMethod(TCustomAdapterDispatcher,'GetDispatchParams',TypeInfo(_T18),[TypeInfo(TWebRequest),TypeInfo(TAdapterDispatchParams)],  getVMTProcAddr('TCustomAdapterDispatcher','GetDispatchParams',56));


//RegRegisterMethod(TCustomLocateFileService,'ImplFindIncludeFile',TypeInfo(_T22),[TypeInfo(TComponent),TypeInfo(string),TypeInfo(string),TypeInfo(Boolean)], pointer(48));
RegRegisterMethod(TCustomLocateFileService,'ImplFindIncludeFile',TypeInfo(_T22),[TypeInfo(TComponent),TypeInfo(string),TypeInfo(string),TypeInfo(Boolean)],  getVMTProcAddr('TCustomLocateFileService','ImplFindIncludeFile',48));


//RegRegisterMethod(TCustomLocateFileService,'ImplGetTemplateStream',TypeInfo(_T23),[TypeInfo(TComponent),TypeInfo(string),TypeInfo(Boolean),TypeInfo(TStream)], pointer(52));
RegRegisterMethod(TCustomLocateFileService,'ImplGetTemplateStream',TypeInfo(_T23),[TypeInfo(TComponent),TypeInfo(string),TypeInfo(Boolean),TypeInfo(TStream)],  getVMTProcAddr('TCustomLocateFileService','ImplGetTemplateStream',52));


//RegRegisterMethod(TCustomLocateFileService,'FindStream',TypeInfo(_T24),[TypeInfo(TComponent),TypeInfo(string),TypeInfo(TStream),TypeInfo(Boolean),TypeInfo(Boolean)], pointer(56));
RegRegisterMethod(TCustomLocateFileService,'FindStream',TypeInfo(_T24),[TypeInfo(TComponent),TypeInfo(string),TypeInfo(TStream),TypeInfo(Boolean),TypeInfo(Boolean)],  getVMTProcAddr('TCustomLocateFileService','FindStream',56));


//RegRegisterMethod(TCustomLocateFileService,'GetFileStream',TypeInfo(_T25),[TypeInfo(string),TypeInfo(Boolean),TypeInfo(TStream)], pointer(60));
RegRegisterMethod(TCustomLocateFileService,'GetFileStream',TypeInfo(_T25),[TypeInfo(string),TypeInfo(Boolean),TypeInfo(TStream)],  getVMTProcAddr('TCustomLocateFileService','GetFileStream',60));


//RegRegisterMethod(TCustomPageDispatcher,'ImplPageNameOfRequest',TypeInfo(_T26),[TypeInfo(TWebRequest),TypeInfo(string)], pointer(52));
RegRegisterMethod(TCustomPageDispatcher,'ImplPageNameOfRequest',TypeInfo(_T26),[TypeInfo(TWebRequest),TypeInfo(string)],  getVMTProcAddr('TCustomPageDispatcher','ImplPageNameOfRequest',52));


//RegRegisterMethod(TCustomPageDispatcher,'ImplGetDefaultPageName',TypeInfo(_T27),[TypeInfo(string)], pointer(56));
RegRegisterMethod(TCustomPageDispatcher,'ImplGetDefaultPageName',TypeInfo(_T27),[TypeInfo(string)],  getVMTProcAddr('TCustomPageDispatcher','ImplGetDefaultPageName',56));


//RegRegisterMethod(TCustomPageDispatcher,'ImplGetLoginRequired',TypeInfo(_T28),[TypeInfo(string),TypeInfo(Boolean)], pointer(60));
RegRegisterMethod(TCustomPageDispatcher,'ImplGetLoginRequired',TypeInfo(_T28),[TypeInfo(string),TypeInfo(Boolean)],  getVMTProcAddr('TCustomPageDispatcher','ImplGetLoginRequired',60));


//RegRegisterMethod(TCustomPageDispatcher,'ImplGetCanView',TypeInfo(_T29),[TypeInfo(string),TypeInfo(Boolean)], pointer(64));
RegRegisterMethod(TCustomPageDispatcher,'ImplGetCanView',TypeInfo(_T29),[TypeInfo(string),TypeInfo(Boolean)],  getVMTProcAddr('TCustomPageDispatcher','ImplGetCanView',64));


RegisterProc(TInvalidWebSession,'Create',mtConstructor,TypeInfo(_T31),[
TypeInfo(string)],Addr(TInvalidWebSession.Create),cRegister);

//RegRegisterMethod(TMultiModuleWebAppServices,'InitModules',TypeInfo(_T32),NoParams, pointer(48));
RegRegisterMethod(TMultiModuleWebAppServices,'InitModules',TypeInfo(_T32),NoParams,  getVMTProcAddr('TMultiModuleWebAppServices','InitModules',48));


//RegRegisterMethod(TMultiModuleWebAppServices,'InitModule',TypeInfo(_T33),[TypeInfo(TComponent)], pointer(52));
RegRegisterMethod(TMultiModuleWebAppServices,'InitModule',TypeInfo(_T33),[TypeInfo(TComponent)],  getVMTProcAddr('TMultiModuleWebAppServices','InitModule',52));


//RegRegisterMethod(TMultiModuleWebAppServices,'DoneModule',TypeInfo(_T34),[TypeInfo(TComponent)], pointer(56));
RegRegisterMethod(TMultiModuleWebAppServices,'DoneModule',TypeInfo(_T34),[TypeInfo(TComponent)],  getVMTProcAddr('TMultiModuleWebAppServices','DoneModule',56));


//RegRegisterMethod(TMultiModuleWebAppServices,'CreateContext',TypeInfo(_T35),[TypeInfo(TAbstractWebContext)], pointer(60));
RegRegisterMethod(TMultiModuleWebAppServices,'CreateContext',TypeInfo(_T35),[TypeInfo(TAbstractWebContext)],  getVMTProcAddr('TMultiModuleWebAppServices','CreateContext',60));


//RegRegisterMethod(TMultiModuleWebAppServices,'ImplHandleException',TypeInfo(_T36),[TypeInfo(Exception),TypeInfo(Boolean)], pointer(64));
RegRegisterMethod(TMultiModuleWebAppServices,'ImplHandleException',TypeInfo(_T36),[TypeInfo(Exception),TypeInfo(Boolean)],  getVMTProcAddr('TMultiModuleWebAppServices','ImplHandleException',64));


//RegRegisterMethod(TMultiModuleWebAppServices,'ImplInitContext',TypeInfo(_T37),[TypeInfo(TAbstractWebModuleList),TypeInfo(TWebRequest),TypeInfo(TWebResponse)], pointer(68));
RegRegisterMethod(TMultiModuleWebAppServices,'ImplInitContext',TypeInfo(_T37),[TypeInfo(TAbstractWebModuleList),TypeInfo(TWebRequest),TypeInfo(TWebResponse)],  getVMTProcAddr('TMultiModuleWebAppServices','ImplInitContext',68));


//RegRegisterMethod(TMultiModuleWebAppServices,'ImplHandleRequest',TypeInfo(_T38),[TypeInfo(Boolean)], pointer(72));
RegRegisterMethod(TMultiModuleWebAppServices,'ImplHandleRequest',TypeInfo(_T38),[TypeInfo(Boolean)],  getVMTProcAddr('TMultiModuleWebAppServices','ImplHandleRequest',72));


//RegRegisterMethod(TMultiModuleWebAppServices,'ImplFinishContext',TypeInfo(_T39),NoParams, pointer(76));
RegRegisterMethod(TMultiModuleWebAppServices,'ImplFinishContext',TypeInfo(_T39),NoParams,  getVMTProcAddr('TMultiModuleWebAppServices','ImplFinishContext',76));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'AdapterRequestParamsAsStrings',mtProc,TypeInfo(_T13),[
TypeInfo(IUnknown),TypeInfo(TStrings)],Addr(AdapterRequestParamsAsStrings),cRegister)}

{RegRegisterMethod(TCustomAdapterDispatcher,'AddSpecialParams',TypeInfo(_T17),[
TypeInfo(IUnknown),
TypeInfo(IAdapterItemRequestParams)], pointer(52))}

{RegRegisterMethod(TCustomAdapterDispatcher,'ImplEncodeAdapterItemRequestAsHREF',TypeInfo(_T19),[
TypeInfo(IUnknown),
TypeInfo(TAdapterItemRequestParamOptions),TypeInfo(string)], pointer(60))}

{RegRegisterMethod(TCustomAdapterDispatcher,'ImplEncodeAdapterItemRequestAsFieldValue',TypeInfo(_T20),[
TypeInfo(IUnknown),
TypeInfo(TAdapterItemRequestParamOptions),TypeInfo(string)], pointer(64))}

{RegRegisterMethod(TCustomAdapterDispatcher,'ImplGetAdapterItemRequestParams',TypeInfo(_T21),[
TypeInfo(IUnknown),
TypeInfo(TAdapterItemRequestParamOptions),
TypeInfo(IAdapterItemRequestParams)], pointer(68))}

{RegRegisterMethod(TCustomWebAppComponents,'ListRequestHandlers',TypeInfo(_T30),[
TypeInfo(IInterfaceList)], pointer(80))}

{RegisterProc(TWebSession,'Create',mtConstructor,TypeInfo(_T40),[
TypeInfo(ISessionsService),
TypeInfo(TWebRequest),
TypeInfo(TWebResponse)],Addr(TWebSession.Create),cRegister)}

RegisterEvent(TypeInfo(TActivateWebModuleEvent),[
TypeInfo(TObject),
TypeInfo(TComponent)]);

RegisterEvent(TypeInfo(TCanViewPageEvent),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(Boolean),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TDispatchActionEvent),[
TypeInfo(TObject),
TypeInfo(TObject),
TypeInfo(TStrings)]);

RegisterEvent(TypeInfo(TDispatchActionHandledEvent),[
TypeInfo(TObject),
TypeInfo(TObject),
TypeInfo(TStrings),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TDispatchImageEvent),[
TypeInfo(TObject),
TypeInfo(TObject),
TypeInfo(TStrings)]);

RegisterEvent(TypeInfo(TDispatchImageHandledEvent),[
TypeInfo(TObject),
TypeInfo(TObject),
TypeInfo(TStrings),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TDispatchPageEvent),[
TypeInfo(TObject),
TypeInfo(string)]);

RegisterEvent(TypeInfo(TDispatchPageHandledEvent),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TDispatchPageParamsHandledEvent),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(TStrings),
TypeInfo(Boolean)]);

{RegisterEvent(TypeInfo(TGetAdapterRequestParamsEvent),[
TypeInfo(TObject),
TypeInfo(IUnknown),
TypeInfo(string),
TypeInfo(TStrings)]);}

RegisterEvent(TypeInfo(TLocateFileServiceFindFileEvent),[
TypeInfo(TObject),
TypeInfo(TComponent),
TypeInfo(string),
TypeInfo(string),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TLocateFileServiceFindStreamEvent),[
TypeInfo(TObject),
TypeInfo(TComponent),
TypeInfo(string),
TypeInfo(TStream),
TypeInfo(Boolean),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TLoginPagedHandledEvent),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TLoginRequiredEvent),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TPageAccessDeniedEvent),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(TPageAccessDenied),
TypeInfo(Boolean)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
