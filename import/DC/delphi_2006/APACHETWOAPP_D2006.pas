{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit APACHETWOAPP_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  Windows,
  Winsock,
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Classes,
  HTTPD2,
  ApacheTwoHTTP,
  HTTPApp,
  WebBroker,
  ApacheTwoApp;
function ConvertmoduleToVariant(var R : module) : OleVariant;
function ConvertVariantTomodule(const V : OleVariant) : module;
function Convertrequest_recToVariant(var R : request_rec) : OleVariant;
function ConvertVariantTorequest_rec(const V : OleVariant) : request_rec;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __module__Wrapper = class(TDCRecordWrapper)
private
fR : module;
public
function GetRecordPtr : pointer; override;
published
procedure setversion(const val : Integer);
function getversion : Integer;
property version : Integer read getversion write setversion;
procedure setminor_version(const val : Integer);
function getminor_version : Integer;
property minor_version : Integer read getminor_version write setminor_version;
procedure setmodule_index(const val : Integer);
function getmodule_index : Integer;
property module_index : Integer read getmodule_index write setmodule_index;
procedure setmagic(const val : Cardinal);
function getmagic : Cardinal;
property magic : Cardinal read getmagic write setmagic;
end;
type __request_rec__Wrapper = class(TDCRecordWrapper)
private
fR : request_rec;
public
function GetRecordPtr : pointer; override;
published
procedure setassbackwards(const val : Integer);
function getassbackwards : Integer;
property assbackwards : Integer read getassbackwards write setassbackwards;
procedure setproxyreq(const val : Integer);
function getproxyreq : Integer;
property proxyreq : Integer read getproxyreq write setproxyreq;
procedure setheader_only(const val : Integer);
function getheader_only : Integer;
property header_only : Integer read getheader_only write setheader_only;
procedure setproto_num(const val : Integer);
function getproto_num : Integer;
property proto_num : Integer read getproto_num write setproto_num;
procedure setstatus(const val : Integer);
function getstatus : Integer;
property status : Integer read getstatus write setstatus;
procedure setmethod_number(const val : Integer);
function getmethod_number : Integer;
property method_number : Integer read getmethod_number write setmethod_number;
procedure setchunked(const val : Integer);
function getchunked : Integer;
property chunked : Integer read getchunked write setchunked;
procedure setread_body(const val : Integer);
function getread_body : Integer;
property read_body : Integer read getread_body write setread_body;
procedure setread_chunked(const val : Integer);
function getread_chunked : Integer;
property read_chunked : Integer read getread_chunked write setread_chunked;
procedure setexpecting_100(const val : Cardinal);
function getexpecting_100 : Cardinal;
property expecting_100 : Cardinal read getexpecting_100 write setexpecting_100;
procedure setno_cache(const val : Integer);
function getno_cache : Integer;
property no_cache : Integer read getno_cache write setno_cache;
procedure setno_local_copy(const val : Integer);
function getno_local_copy : Integer;
property no_local_copy : Integer read getno_local_copy write setno_local_copy;
procedure setused_path_info(const val : Integer);
function getused_path_info : Integer;
property used_path_info : Integer read getused_path_info write setused_path_info;
procedure seteos_sent(const val : Integer);
function geteos_sent : Integer;
property eos_sent : Integer read geteos_sent write seteos_sent;
end;
type
{_T0 = procedure (p0 : Pmodule) of object;}

_T1 = function (const p0 : IDispatch): Integer of object;

function __module__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __module__Wrapper.setversion(const val : Integer);
begin
module(GetRecordPtr^).version := val;
end;
function __module__Wrapper.getversion : Integer;
begin
result := module(GetRecordPtr^).version;
end;
procedure __module__Wrapper.setminor_version(const val : Integer);
begin
module(GetRecordPtr^).minor_version := val;
end;
function __module__Wrapper.getminor_version : Integer;
begin
result := module(GetRecordPtr^).minor_version;
end;
procedure __module__Wrapper.setmodule_index(const val : Integer);
begin
module(GetRecordPtr^).module_index := val;
end;
function __module__Wrapper.getmodule_index : Integer;
begin
result := module(GetRecordPtr^).module_index;
end;
procedure __module__Wrapper.setmagic(const val : Cardinal);
begin
module(GetRecordPtr^).magic := val;
end;
function __module__Wrapper.getmagic : Cardinal;
begin
result := module(GetRecordPtr^).magic;
end;
function __request_rec__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __request_rec__Wrapper.setassbackwards(const val : Integer);
begin
request_rec(GetRecordPtr^).assbackwards := val;
end;
function __request_rec__Wrapper.getassbackwards : Integer;
begin
result := request_rec(GetRecordPtr^).assbackwards;
end;
procedure __request_rec__Wrapper.setproxyreq(const val : Integer);
begin
request_rec(GetRecordPtr^).proxyreq := val;
end;
function __request_rec__Wrapper.getproxyreq : Integer;
begin
result := request_rec(GetRecordPtr^).proxyreq;
end;
procedure __request_rec__Wrapper.setheader_only(const val : Integer);
begin
request_rec(GetRecordPtr^).header_only := val;
end;
function __request_rec__Wrapper.getheader_only : Integer;
begin
result := request_rec(GetRecordPtr^).header_only;
end;
procedure __request_rec__Wrapper.setproto_num(const val : Integer);
begin
request_rec(GetRecordPtr^).proto_num := val;
end;
function __request_rec__Wrapper.getproto_num : Integer;
begin
result := request_rec(GetRecordPtr^).proto_num;
end;
procedure __request_rec__Wrapper.setstatus(const val : Integer);
begin
request_rec(GetRecordPtr^).status := val;
end;
function __request_rec__Wrapper.getstatus : Integer;
begin
result := request_rec(GetRecordPtr^).status;
end;
procedure __request_rec__Wrapper.setmethod_number(const val : Integer);
begin
request_rec(GetRecordPtr^).method_number := val;
end;
function __request_rec__Wrapper.getmethod_number : Integer;
begin
result := request_rec(GetRecordPtr^).method_number;
end;
procedure __request_rec__Wrapper.setchunked(const val : Integer);
begin
request_rec(GetRecordPtr^).chunked := val;
end;
function __request_rec__Wrapper.getchunked : Integer;
begin
result := request_rec(GetRecordPtr^).chunked;
end;
procedure __request_rec__Wrapper.setread_body(const val : Integer);
begin
request_rec(GetRecordPtr^).read_body := val;
end;
function __request_rec__Wrapper.getread_body : Integer;
begin
result := request_rec(GetRecordPtr^).read_body;
end;
procedure __request_rec__Wrapper.setread_chunked(const val : Integer);
begin
request_rec(GetRecordPtr^).read_chunked := val;
end;
function __request_rec__Wrapper.getread_chunked : Integer;
begin
result := request_rec(GetRecordPtr^).read_chunked;
end;
procedure __request_rec__Wrapper.setexpecting_100(const val : Cardinal);
begin
request_rec(GetRecordPtr^).expecting_100 := val;
end;
function __request_rec__Wrapper.getexpecting_100 : Cardinal;
begin
result := request_rec(GetRecordPtr^).expecting_100;
end;
procedure __request_rec__Wrapper.setno_cache(const val : Integer);
begin
request_rec(GetRecordPtr^).no_cache := val;
end;
function __request_rec__Wrapper.getno_cache : Integer;
begin
result := request_rec(GetRecordPtr^).no_cache;
end;
procedure __request_rec__Wrapper.setno_local_copy(const val : Integer);
begin
request_rec(GetRecordPtr^).no_local_copy := val;
end;
function __request_rec__Wrapper.getno_local_copy : Integer;
begin
result := request_rec(GetRecordPtr^).no_local_copy;
end;
procedure __request_rec__Wrapper.setused_path_info(const val : Integer);
begin
request_rec(GetRecordPtr^).used_path_info := val;
end;
function __request_rec__Wrapper.getused_path_info : Integer;
begin
result := request_rec(GetRecordPtr^).used_path_info;
end;
procedure __request_rec__Wrapper.seteos_sent(const val : Integer);
begin
request_rec(GetRecordPtr^).eos_sent := val;
end;
function __request_rec__Wrapper.geteos_sent : Integer;
begin
result := request_rec(GetRecordPtr^).eos_sent;
end;
function __TApacheTwoApplication__ProcessRequest__Wrapper(__Instance : TApacheTwoApplication;
const p0 : IDispatch): Integer;
var
__p0 : ^request_rec;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := TApacheTwoApplication(__Instance).ProcessRequest(__p0^);
end;


type __module__Wrapper__ = class(__module__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __module__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertmoduleToVariant(var R : module) : OleVariant;
var
__rw : __module__Wrapper__;
begin
__rw := __module__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTomodule(const V : OleVariant) : module;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := module((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __request_rec__Wrapper__ = class(__request_rec__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __request_rec__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convertrequest_recToVariant(var R : request_rec) : OleVariant;
var
__rw : __request_rec__Wrapper__;
begin
__rw := __request_rec__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTorequest_rec(const V : OleVariant) : request_rec;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := request_rec((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

function __DC__GetApacheTwoApp__Handler(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := ApacheTwoApp.Handler;
end;

procedure __DC__SetApacheTwoApp__Handler(Instance : TObject; Params : PVariantArgList);
begin
ApacheTwoApp.Handler:=OleVariant(Params^[0]);
end;

function __DC__GetApacheTwoApp__apache_module(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __module__Wrapper;
begin
__wrapper := __module__Wrapper.Create;
__wrapper.fR := ApacheTwoApp.apache_module;
result := IUnknown(__wrapper) as IDispatch;
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('Handler',__DC__GetApacheTwoApp__Handler,__DC__SetApacheTwoApp__Handler));
__RegisteredVars.Add(RegisterVar('apache_module',__DC__GetApacheTwoApp__apache_module,nil));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..0] of TClass = (
TApacheTwoApplication
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegRegisterMethod(TApacheTwoApplication,'ProcessRequest',TypeInfo(_T1),[
TypeInfo(IDispatch),TypeInfo(Integer)],Addr(__TApacheTwoApplication__ProcessRequest__Wrapper));

end;
initialization
_mreg_0;
{RegisterProc(nil,'set_module',mtProc,TypeInfo(_T0),[
TypeInfoPointer],Addr(set_module),cRegister)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
end.
