{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IMGLIST_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  Types,
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Classes,
  Graphics,
  sysUtils,
  CommCtrl,
  ImgList;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TPoint__Wrapper = class(TDCRecordWrapper)
private
fR : TPoint;
public
function GetRecordPtr : pointer; override;
published
procedure setX(const val : Longint);
function getX : Longint;
property X : Longint read getX write setX;
procedure setY(const val : Longint);
function getY : Longint;
property Y : Longint read getY write setY;
end;
type __TCustomImageList__ = class(TCustomImageList);
type
_T0 = procedure  of object;

_T1 = _T0;

_T2 = procedure (p0 : Integer;
p1 : TCanvas;
p2 : Integer;
p3 : Integer;
p4 : Cardinal;
p5 : Boolean) of object;

_T3 = _T0;

_T4 = procedure (p0 : TStream) of object;

_T5 = _T4;

_T6 = procedure (p0 : Integer;
p1 : Integer) of object;

_T7 = function (p0 : TBitmap;
p1 : TBitmap): Integer of object;

_T8 = function (p0 : TIcon): Integer of object;

_T9 = function (p0 : TCustomImageList;
p1 : Integer): Integer of object;

_T10 = procedure (p0 : TCustomImageList) of object;

_T11 = function (p0 : TBitmap;
p1 : TColor): Integer of object;

_T12 = _T0;

_T13 = procedure (p0 : Integer) of object;

_T14 = procedure (p0 : TCanvas;
p1 : Integer;
p2 : Integer;
p3 : Integer;
p4 : Boolean) of object;

_T15 = procedure (p0 : TCanvas;
p1 : Integer;
p2 : Integer;
p3 : Integer;
p4 : TOverlay;
p5 : Boolean) of object;

_T16 = function (p0 : TResType;
const p1 : string;
p2 : TColor): Boolean of object;

_T17 = function (p0 : Integer;
p1 : TBitmap): Boolean of object;

_T18 = function : IDispatch of object;

_T19 = procedure (p0 : Integer;
p1 : TIcon) of object;

_T20 = function : HBITMAP of object;

_T21 = _T20;

_T22 = function (p0 : TResType;
const p1 : string;
p2 : Integer;
p3 : TLoadResources;
p4 : TColor): Boolean of object;

_T23 = function (p0 : THandle;
p1 : TResType;
const p2 : string;
p3 : Integer;
p4 : TLoadResources;
p5 : TColor): Boolean of object;

_T24 = function : Boolean of object;

_T25 = procedure (p0 : Integer;
p1 : TBitmap;
p2 : TBitmap) of object;

_T26 = _T19;

_T27 = procedure (p0 : Integer;
p1 : TBitmap;
p2 : TColor) of object;

_T28 = _T6;

_T29 = function (p0 : Integer;
p1 : TOverlay): Boolean of object;

_T30 = procedure (p0 : TChangeLink) of object;

_T31 = _T16;

_T32 = function (p0 : THandle;
p1 : TResType;
const p2 : string;
p3 : TColor): Boolean of object;

_T33 = _T25;

_T34 = _T19;

_T35 = _T27;

_T36 = _T30;

function __TPoint__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPoint__Wrapper.setX(const val : Longint);
begin
TPoint(GetRecordPtr^).X := val;
end;
function __TPoint__Wrapper.getX : Longint;
begin
result := TPoint(GetRecordPtr^).X;
end;
procedure __TPoint__Wrapper.setY(const val : Longint);
begin
TPoint(GetRecordPtr^).Y := val;
end;
function __TPoint__Wrapper.getY : Longint;
begin
result := TPoint(GetRecordPtr^).Y;
end;
procedure __TCustomImageList__DoDraw__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
5:
begin
__TCustomImageList__(__Instance).DoDraw(OleVariant(pargs^[4]),TCanvas(VarToObject(OleVariant(pargs^[3]))),OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
6:
begin
__TCustomImageList__(__Instance).DoDraw(OleVariant(pargs^[5]),TCanvas(VarToObject(OleVariant(pargs^[4]))),OleVariant(pargs^[3]),OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure __TCustomImageList__Draw__Wrapper(__Instance : TCustomImageList;
p0 : TCanvas;
p1 : Integer;
p2 : Integer;
p3 : Integer;
p4 : Boolean);
begin
TCustomImageList(__Instance).Draw(p0,p1,p2,p3,p4);
end;

procedure __TCustomImageList__DrawOverlay__Wrapper(__Instance : TCustomImageList;
p0 : TCanvas;
p1 : Integer;
p2 : Integer;
p3 : Integer;
p4 : TOverlay;
p5 : Boolean);
begin
TCustomImageList(__Instance).DrawOverlay(p0,p1,p2,p3,p4,p5);
end;

function __TCustomImageList__GetHotSpot__Wrapper(__Instance : TCustomImageList): IDispatch;
var
__result : TPoint;
__wrapper : __TPoint__Wrapper;
begin
__result := TCustomImageList(__Instance).GetHotSpot;
__wrapper := __TPoint__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;


type __TPoint__Wrapper__ = class(__TPoint__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPoint__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
var
__rw : __TPoint__Wrapper__;
begin
__rw := __TPoint__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPoint((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTChangeLink__Sender(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TChangeLink(Instance).Sender);
end;

procedure __DC__SetTChangeLink__Sender(Instance : TObject; Params : PVariantArgList);
begin
TChangeLink(Instance).Sender:=TCustomImageList(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomImageList__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomImageList(Instance).Count;
end;

function __DC__GetTCustomImageList__Handle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomImageList(Instance).Handle;
end;

procedure __DC__SetTCustomImageList__Handle(Instance : TObject; Params : PVariantArgList);
begin
TCustomImageList(Instance).Handle:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomImageList__AllocBy(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomImageList(Instance).AllocBy;
end;

procedure __DC__SetTCustomImageList__AllocBy(Instance : TObject; Params : PVariantArgList);
begin
TCustomImageList(Instance).AllocBy:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomImageList__BlendColor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomImageList(Instance).BlendColor;
end;

procedure __DC__SetTCustomImageList__BlendColor(Instance : TObject; Params : PVariantArgList);
begin
TCustomImageList(Instance).BlendColor:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomImageList__BkColor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomImageList(Instance).BkColor;
end;

procedure __DC__SetTCustomImageList__BkColor(Instance : TObject; Params : PVariantArgList);
begin
TCustomImageList(Instance).BkColor:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomImageList__DrawingStyle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomImageList(Instance).DrawingStyle;
end;

procedure __DC__SetTCustomImageList__DrawingStyle(Instance : TObject; Params : PVariantArgList);
begin
TCustomImageList(Instance).DrawingStyle:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomImageList__Height(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomImageList(Instance).Height;
end;

procedure __DC__SetTCustomImageList__Height(Instance : TObject; Params : PVariantArgList);
begin
TCustomImageList(Instance).Height:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomImageList__ImageType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomImageList(Instance).ImageType;
end;

procedure __DC__SetTCustomImageList__ImageType(Instance : TObject; Params : PVariantArgList);
begin
TCustomImageList(Instance).ImageType:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomImageList__Masked(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomImageList(Instance).Masked;
end;

procedure __DC__SetTCustomImageList__Masked(Instance : TObject; Params : PVariantArgList);
begin
TCustomImageList(Instance).Masked:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomImageList__ShareImages(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomImageList(Instance).ShareImages;
end;

procedure __DC__SetTCustomImageList__ShareImages(Instance : TObject; Params : PVariantArgList);
begin
TCustomImageList(Instance).ShareImages:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomImageList__Width(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomImageList(Instance).Width;
end;

procedure __DC__SetTCustomImageList__Width(Instance : TObject; Params : PVariantArgList);
begin
TCustomImageList(Instance).Width:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TChangeLink,'Sender',__DC__GetTChangeLink__Sender,__DC__SetTChangeLink__Sender);
RegisterProperty(TCustomImageList,'Count',__DC__GetTCustomImageList__Count,nil);
RegisterProperty(TCustomImageList,'Handle',__DC__GetTCustomImageList__Handle,__DC__SetTCustomImageList__Handle);
RegisterProperty(TCustomImageList,'AllocBy',__DC__GetTCustomImageList__AllocBy,__DC__SetTCustomImageList__AllocBy);
RegisterProperty(TCustomImageList,'BlendColor',__DC__GetTCustomImageList__BlendColor,__DC__SetTCustomImageList__BlendColor);
RegisterProperty(TCustomImageList,'BkColor',__DC__GetTCustomImageList__BkColor,__DC__SetTCustomImageList__BkColor);
RegisterProperty(TCustomImageList,'DrawingStyle',__DC__GetTCustomImageList__DrawingStyle,__DC__SetTCustomImageList__DrawingStyle);
RegisterProperty(TCustomImageList,'Height',__DC__GetTCustomImageList__Height,__DC__SetTCustomImageList__Height);
RegisterProperty(TCustomImageList,'ImageType',__DC__GetTCustomImageList__ImageType,__DC__SetTCustomImageList__ImageType);
RegisterProperty(TCustomImageList,'Masked',__DC__GetTCustomImageList__Masked,__DC__SetTCustomImageList__Masked);
RegisterProperty(TCustomImageList,'ShareImages',__DC__GetTCustomImageList__ShareImages,__DC__SetTCustomImageList__ShareImages);
RegisterProperty(TCustomImageList,'Width',__DC__GetTCustomImageList__Width,__DC__SetTCustomImageList__Width);
end;

const __ConstNames0 : array[0..14] of string = (
'dsFocus'
,'dsSelected'
,'dsNormal'
,'dsTransparent'
,'itImage'
,'itMask'
,'rtBitmap'
,'rtCursor'
,'rtIcon'
,'lrDefaultColor'
,'lrDefaultSize'
,'lrFromFile'
,'lrMap3DColors'
,'lrTransparent'
,'lrMonoChrome'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,dsFocus));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,dsSelected));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,dsNormal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,dsTransparent));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,itImage));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,itMask));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,rtBitmap));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,rtCursor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,rtIcon));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,lrDefaultColor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,lrDefaultSize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,lrFromFile));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,lrMap3DColors));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,lrTransparent));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,lrMonoChrome));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..1] of TClass = (
TChangeLink,
TCustomImageList
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegRegisterMethod(TChangeLink,'Change',TypeInfo(_T0),NoParams, pointer(MinVMTOffset - 0));

RegRegisterMethod(TCustomImageList,'Change',TypeInfo(_T1),NoParams, pointer(MinVMTOffset - 16));

RegisterProc(TCustomImageList,'DoDraw',mtScriptMethod,TypeInfo(_T2),[
TypeInfo(Integer),
TypeInfo(TCanvas),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Cardinal),
TypeInfo(Boolean)],Addr(__TCustomImageList__DoDraw__Wrapper),cRegister);

//RegRegisterMethod(TCustomImageList,'Initialize',TypeInfo(_T3),NoParams, pointer(52));
RegRegisterMethod(TCustomImageList,'Initialize',TypeInfo(_T3),NoParams,  getVMTProcAddr('TCustomImageList','Initialize',52));


//RegRegisterMethod(TCustomImageList,'ReadData',TypeInfo(_T4),[TypeInfo(TStream)], pointer(56));
RegRegisterMethod(TCustomImageList,'ReadData',TypeInfo(_T4),[TypeInfo(TStream)],  getVMTProcAddr('TCustomImageList','ReadData',56));


//RegRegisterMethod(TCustomImageList,'WriteData',TypeInfo(_T5),[TypeInfo(TStream)], pointer(60));
RegRegisterMethod(TCustomImageList,'WriteData',TypeInfo(_T5),[TypeInfo(TStream)],  getVMTProcAddr('TCustomImageList','WriteData',60));


RegisterProc(TCustomImageList,'CreateSize',mtConstructor,TypeInfo(_T6),[
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TCustomImageList.CreateSize),cRegister);

RegRegisterMethod(TCustomImageList,'Add',TypeInfo(_T7),[
TypeInfo(TBitmap),
TypeInfo(TBitmap),TypeInfo(Integer)],Addr(TCustomImageList.Add));

RegRegisterMethod(TCustomImageList,'AddIcon',TypeInfo(_T8),[
TypeInfo(TIcon),TypeInfo(Integer)],Addr(TCustomImageList.AddIcon));

RegRegisterMethod(TCustomImageList,'AddImage',TypeInfo(_T9),[
TypeInfo(TCustomImageList),
TypeInfo(Integer),TypeInfo(Integer)],Addr(TCustomImageList.AddImage));

RegRegisterMethod(TCustomImageList,'AddImages',TypeInfo(_T10),[
TypeInfo(TCustomImageList)],Addr(TCustomImageList.AddImages));

RegRegisterMethod(TCustomImageList,'AddMasked',TypeInfo(_T11),[
TypeInfo(TBitmap),
TypeInfo(TColor),TypeInfo(Integer)],Addr(TCustomImageList.AddMasked));

RegRegisterMethod(TCustomImageList,'Clear',TypeInfo(_T12),NoParams,Addr(TCustomImageList.Clear));

RegRegisterMethod(TCustomImageList,'Delete',TypeInfo(_T13),[
TypeInfo(Integer)],Addr(TCustomImageList.Delete));

RegRegisterMethod(TCustomImageList,'Draw',TypeInfo(_T14),[
TypeInfo(TCanvas),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Boolean)],Addr(__TCustomImageList__Draw__Wrapper));

RegRegisterMethod(TCustomImageList,'DrawOverlay',TypeInfo(_T15),[
TypeInfo(TCanvas),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(TOverlay),
TypeInfo(Boolean)],Addr(__TCustomImageList__DrawOverlay__Wrapper));

RegRegisterMethod(TCustomImageList,'FileLoad',TypeInfo(_T16),[
TypeInfo(TResType),
TypeInfo(string),
TypeInfo(TColor),TypeInfo(Boolean)],Addr(TCustomImageList.FileLoad));

RegRegisterMethod(TCustomImageList,'GetBitmap',TypeInfo(_T17),[
TypeInfo(Integer),
TypeInfo(TBitmap),TypeInfo(Boolean)],Addr(TCustomImageList.GetBitmap));

//RegRegisterMethod(TCustomImageList,'GetHotSpot',TypeInfo(_T18),[TypeInfo(IDispatch)], pointer(64));
RegRegisterMethod(TCustomImageList,'GetHotSpot',TypeInfo(_T18),[TypeInfo(IDispatch)],  getVMTProcAddr('TCustomImageList','GetHotSpot',64));


RegRegisterMethod(TCustomImageList,'GetIcon',TypeInfo(_T19),[
TypeInfo(Integer),
TypeInfo(TIcon)],Addr(TCustomImageList.GetIcon));

RegRegisterMethod(TCustomImageList,'GetImageBitmap',TypeInfo(_T20),[TypeInfo(HBITMAP)],Addr(TCustomImageList.GetImageBitmap));

RegRegisterMethod(TCustomImageList,'GetMaskBitmap',TypeInfo(_T21),[TypeInfo(HBITMAP)],Addr(TCustomImageList.GetMaskBitmap));

RegRegisterMethod(TCustomImageList,'GetResource',TypeInfo(_T22),[
TypeInfo(TResType),
TypeInfo(string),
TypeInfo(Integer),
TypeInfo(TLoadResources),
TypeInfo(TColor),TypeInfo(Boolean)],Addr(TCustomImageList.GetResource));

RegRegisterMethod(TCustomImageList,'GetInstRes',TypeInfo(_T23),[
TypeInfo(THandle),
TypeInfo(TResType),
TypeInfo(string),
TypeInfo(Integer),
TypeInfo(TLoadResources),
TypeInfo(TColor),TypeInfo(Boolean)],Addr(TCustomImageList.GetInstRes));

RegRegisterMethod(TCustomImageList,'HandleAllocated',TypeInfo(_T24),[TypeInfo(Boolean)],Addr(TCustomImageList.HandleAllocated));

RegRegisterMethod(TCustomImageList,'Insert',TypeInfo(_T25),[
TypeInfo(Integer),
TypeInfo(TBitmap),
TypeInfo(TBitmap)],Addr(TCustomImageList.Insert));

RegRegisterMethod(TCustomImageList,'InsertIcon',TypeInfo(_T26),[
TypeInfo(Integer),
TypeInfo(TIcon)],Addr(TCustomImageList.InsertIcon));

RegRegisterMethod(TCustomImageList,'InsertMasked',TypeInfo(_T27),[
TypeInfo(Integer),
TypeInfo(TBitmap),
TypeInfo(TColor)],Addr(TCustomImageList.InsertMasked));

RegRegisterMethod(TCustomImageList,'Move',TypeInfo(_T28),[
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TCustomImageList.Move));

RegRegisterMethod(TCustomImageList,'Overlay',TypeInfo(_T29),[
TypeInfo(Integer),
TypeInfo(TOverlay),TypeInfo(Boolean)],Addr(TCustomImageList.Overlay));

RegRegisterMethod(TCustomImageList,'RegisterChanges',TypeInfo(_T30),[
TypeInfo(TChangeLink)],Addr(TCustomImageList.RegisterChanges));

RegRegisterMethod(TCustomImageList,'ResourceLoad',TypeInfo(_T31),[
TypeInfo(TResType),
TypeInfo(string),
TypeInfo(TColor),TypeInfo(Boolean)],Addr(TCustomImageList.ResourceLoad));

RegRegisterMethod(TCustomImageList,'ResInstLoad',TypeInfo(_T32),[
TypeInfo(THandle),
TypeInfo(TResType),
TypeInfo(string),
TypeInfo(TColor),TypeInfo(Boolean)],Addr(TCustomImageList.ResInstLoad));

RegRegisterMethod(TCustomImageList,'Replace',TypeInfo(_T33),[
TypeInfo(Integer),
TypeInfo(TBitmap),
TypeInfo(TBitmap)],Addr(TCustomImageList.Replace));

RegRegisterMethod(TCustomImageList,'ReplaceIcon',TypeInfo(_T34),[
TypeInfo(Integer),
TypeInfo(TIcon)],Addr(TCustomImageList.ReplaceIcon));

RegRegisterMethod(TCustomImageList,'ReplaceMasked',TypeInfo(_T35),[
TypeInfo(Integer),
TypeInfo(TBitmap),
TypeInfo(TColor)],Addr(TCustomImageList.ReplaceMasked));

RegRegisterMethod(TCustomImageList,'UnRegisterChanges',TypeInfo(_T36),[
TypeInfo(TChangeLink)],Addr(TCustomImageList.UnRegisterChanges));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
