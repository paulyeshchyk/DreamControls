{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit MTSRDM_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Classes,
  DataBkr,
  Mtx,
  Midas,
  MtsRdm;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = function : Bool of object;

_T1 = procedure (p0 : Boolean) of object;

_T2 = procedure  of object;

_T3 = _T2;

_T4 = _T2;

_T5 = _T2;

_T6 = _T0;

_T7 = _T0;

_T8 = function (const p0 : WideString): Bool of object;

procedure __RegisterProps;
begin
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..0] of TClass = (
TMtsDataModule
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegisterProc(TMtsDataModule,'CanBePooled',mtMethod,TypeInfo(_T0),[TypeInfo(Bool)], pointer(80),cStdCall);
RegisterProc(TMtsDataModule,'CanBePooled',mtMethod,TypeInfo(_T0),[TypeInfo(Bool)],  getVMTProcAddr('TMtsDataModule','CanBePooled',80),cStdCall);


//RegRegisterMethod(TMtsDataModule,'CallComplete',TypeInfo(_T1),[TypeInfo(Boolean)], pointer(84));
RegRegisterMethod(TMtsDataModule,'CallComplete',TypeInfo(_T1),[TypeInfo(Boolean)],  getVMTProcAddr('TMtsDataModule','CallComplete',84));


RegRegisterMethod(TMtsDataModule,'SetComplete',TypeInfo(_T2),NoParams,Addr(TMtsDataModule.SetComplete));

RegRegisterMethod(TMtsDataModule,'SetAbort',TypeInfo(_T3),NoParams,Addr(TMtsDataModule.SetAbort));

RegRegisterMethod(TMtsDataModule,'EnableCommit',TypeInfo(_T4),NoParams,Addr(TMtsDataModule.EnableCommit));

RegRegisterMethod(TMtsDataModule,'DisableCommit',TypeInfo(_T5),NoParams,Addr(TMtsDataModule.DisableCommit));

RegRegisterMethod(TMtsDataModule,'IsInTransaction',TypeInfo(_T6),[TypeInfo(Bool)],Addr(TMtsDataModule.IsInTransaction));

RegRegisterMethod(TMtsDataModule,'IsSecurityEnabled',TypeInfo(_T7),[TypeInfo(Bool)],Addr(TMtsDataModule.IsSecurityEnabled));

RegRegisterMethod(TMtsDataModule,'IsCallerInRole',TypeInfo(_T8),[
TypeInfo(WideString),TypeInfo(Bool)],Addr(TMtsDataModule.IsCallerInRole));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
