{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit DSDEFINE_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  SysUtils,
  Messages,
  Classes,
  Graphics,
  Controls,
  Forms,
  StdCtrls,
  ExtCtrls,
  Buttons,
  DB,
  WideStrings,
  DSDefine;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
{_T0 = function (p0 : TFieldClass): string of object;}

_T1 = procedure (p0 : TObject) of object;

_T2 = _T1;

_T3 = _T1;

_T4 = _T1;

_T5 = _T1;

_T6 = _T1;

_T7 = _T1;

_T8 = _T1;

_T9 = _T1;

_T10 = _T1;

_T11 = _T1;

_T12 = procedure (const p0 : string;
const p1 : string;
const p2 : string;
const p3 : string;
const p4 : string;
p5 : Word) of object;

function __DC__GetTDefineField__Calculated(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDefineField(Instance).Calculated;
end;

procedure __DC__SetTDefineField__Calculated(Instance : TObject; Params : PVariantArgList);
begin
TDefineField(Instance).Calculated:=OleVariant(Params^[0]);
end;

function __DC__GetTDefineField__Lookup(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDefineField(Instance).Lookup;
end;

procedure __DC__SetTDefineField__Lookup(Instance : TObject; Params : PVariantArgList);
begin
TDefineField(Instance).Lookup:=OleVariant(Params^[0]);
end;

function __DC__GetTDefineField__ComponentName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDefineField(Instance).ComponentName;
end;

procedure __DC__SetTDefineField__ComponentName(Instance : TObject; Params : PVariantArgList);
begin
TDefineField(Instance).ComponentName:=OleVariant(Params^[0]);
end;

function __DC__GetTDefineField__FieldName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDefineField(Instance).FieldName;
end;

procedure __DC__SetTDefineField__FieldName(Instance : TObject; Params : PVariantArgList);
begin
TDefineField(Instance).FieldName:=OleVariant(Params^[0]);
end;

function __DC__GetTDefineField__Field(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDefineField(Instance).Field);
end;

function __DC__GetTDefineField__Size(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDefineField(Instance).Size;
end;

procedure __DC__SetTDefineField__Size(Instance : TObject; Params : PVariantArgList);
begin
TDefineField(Instance).Size:=OleVariant(Params^[0]);
end;

function __DC__GetTDefineField__LookupDataset(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDefineField(Instance).LookupDataset);
end;

function __DC__GetTDefineField__KeyFields(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDefineField(Instance).KeyFields;
end;

function __DC__GetTDefineField__LookupKeyFields(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDefineField(Instance).LookupKeyFields;
end;

function __DC__GetTDefineField__LookupResultField(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDefineField(Instance).LookupResultField;
end;

function __DC__GetTDefineField__Dataset(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDefineField(Instance).Dataset);
end;

procedure __DC__SetTDefineField__Dataset(Instance : TObject; Params : PVariantArgList);
begin
TDefineField(Instance).Dataset:=TDataset(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDefineField__DSDesigner(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDefineField(Instance).DSDesigner);
end;

procedure __DC__SetTDefineField__DSDesigner(Instance : TObject; Params : PVariantArgList);
begin
TDefineField(Instance).DSDesigner:=TDatasetDesigner(VarToObject(OleVariant(Params^[0])));
end;

procedure __RegisterProps;
begin
RegisterProperty(TDefineField,'Calculated',__DC__GetTDefineField__Calculated,__DC__SetTDefineField__Calculated);
RegisterProperty(TDefineField,'Lookup',__DC__GetTDefineField__Lookup,__DC__SetTDefineField__Lookup);
RegisterProperty(TDefineField,'ComponentName',__DC__GetTDefineField__ComponentName,__DC__SetTDefineField__ComponentName);
RegisterProperty(TDefineField,'FieldName',__DC__GetTDefineField__FieldName,__DC__SetTDefineField__FieldName);
RegisterProperty(TDefineField,'Field',__DC__GetTDefineField__Field,nil);
RegisterProperty(TDefineField,'Size',__DC__GetTDefineField__Size,__DC__SetTDefineField__Size);
RegisterProperty(TDefineField,'LookupDataset',__DC__GetTDefineField__LookupDataset,nil);
RegisterProperty(TDefineField,'KeyFields',__DC__GetTDefineField__KeyFields,nil);
RegisterProperty(TDefineField,'LookupKeyFields',__DC__GetTDefineField__LookupKeyFields,nil);
RegisterProperty(TDefineField,'LookupResultField',__DC__GetTDefineField__LookupResultField,nil);
RegisterProperty(TDefineField,'Dataset',__DC__GetTDefineField__Dataset,__DC__SetTDefineField__Dataset);
RegisterProperty(TDefineField,'DSDesigner',__DC__GetTDefineField__DSDesigner,__DC__SetTDefineField__DSDesigner);
end;

function __DC__GetDSDefine__DefineField(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(DSDefine.DefineField);
end;

procedure __DC__SetDSDefine__DefineField(Instance : TObject; Params : PVariantArgList);
begin
TObject(DSDefine.DefineField):=(VarToObject(OleVariant(Params^[0])));
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('DefineField',__DC__GetDSDefine__DefineField,__DC__SetDSDefine__DefineField));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..0] of TClass = (
TDefineField
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegRegisterMethod(TDefineField,'FieldNameEditChange',TypeInfo(_T1),[
TypeInfo(TObject)],Addr(TDefineField.FieldNameEditChange));

RegRegisterMethod(TDefineField,'FormCreate',TypeInfo(_T2),[
TypeInfo(TObject)],Addr(TDefineField.FormCreate));

RegRegisterMethod(TDefineField,'OkBtnClick',TypeInfo(_T3),[
TypeInfo(TObject)],Addr(TDefineField.OkBtnClick));

RegRegisterMethod(TDefineField,'DatasetListDropDown',TypeInfo(_T4),[
TypeInfo(TObject)],Addr(TDefineField.DatasetListDropDown));

RegRegisterMethod(TDefineField,'LookupKeysListDropDown',TypeInfo(_T5),[
TypeInfo(TObject)],Addr(TDefineField.LookupKeysListDropDown));

RegRegisterMethod(TDefineField,'KeyFieldsListDropDown',TypeInfo(_T6),[
TypeInfo(TObject)],Addr(TDefineField.KeyFieldsListDropDown));

RegRegisterMethod(TDefineField,'ResultFieldListDropDown',TypeInfo(_T7),[
TypeInfo(TObject)],Addr(TDefineField.ResultFieldListDropDown));

RegRegisterMethod(TDefineField,'FieldKindClick',TypeInfo(_T8),[
TypeInfo(TObject)],Addr(TDefineField.FieldKindClick));

RegRegisterMethod(TDefineField,'DatasetListChange',TypeInfo(_T9),[
TypeInfo(TObject)],Addr(TDefineField.DatasetListChange));

RegRegisterMethod(TDefineField,'HelpBtnClick',TypeInfo(_T10),[
TypeInfo(TObject)],Addr(TDefineField.HelpBtnClick));

RegRegisterMethod(TDefineField,'FieldTypeListChange',TypeInfo(_T11),[
TypeInfo(TObject)],Addr(TDefineField.FieldTypeListChange));

RegRegisterMethod(TDefineField,'ConfigureForLookupOnly',TypeInfo(_T12),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(string),
TypeInfo(string),
TypeInfo(string),
TypeInfo(Word)],Addr(TDefineField.ConfigureForLookupOnly));

end;
initialization
_mreg_0;
{RegisterProc(nil,'ClassNameNoT',mtProc,TypeInfo(_T0),[
TypeInfo(TFieldClass),TypeInfo(string)],Addr(ClassNameNoT),cRegister)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
end.
