{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDMESSAGECLIENT_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdGlobal,
  IdIOHandlerStream,
  IdMessage,
  IdTCPClient,
  IdHeaderList,
  IdMessageClient;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TIdMessageClient__ = class(TIdMessageClient);
type
_T0 = procedure (p0 : TIdMessage;
const p1 : string) of object;

_T1 = function (p0 : TIdMessage;
const p1 : string): string of object;

_T2 = procedure (p0 : TIdMessage) of object;

_T3 = _T2;

_T4 = _T2;

_T5 = procedure (p0 : TIdMessage;
p1 : Boolean) of object;

_T6 = procedure (p0 : TIdMessage;
const p1 : Boolean) of object;

procedure __TIdMessageClient__ReceiveBody__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
__TIdMessageClient__(__Instance).ReceiveBody(TIdMessage(VarToObject(OleVariant(pargs^[0]))));
end;
2:
begin
__TIdMessageClient__(__Instance).ReceiveBody(TIdMessage(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
end;
end
end;

function __TIdMessageClient__ReceiveHeader__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := __TIdMessageClient__(__Instance).ReceiveHeader(TIdMessage(VarToObject(OleVariant(pargs^[0]))));
end;
2:
begin
result := __TIdMessageClient__(__Instance).ReceiveHeader(TIdMessage(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
end;
end
end;

procedure __TIdMessageClient__ProcessMessage__Wrapper(__Instance : TIdMessageClient;
p0 : TIdMessage;
p1 : Boolean);
begin
TIdMessageClient(__Instance).ProcessMessage(p0,p1);
end;

procedure __TIdMessageClient__SendMsg__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
TIdMessageClient(__Instance).SendMsg(TIdMessage(VarToObject(OleVariant(pargs^[0]))));
end;
2:
begin
TIdMessageClient(__Instance).SendMsg(TIdMessage(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
end;
end
end;

function __DC__GetTIdMessageClient__MsgLineLength(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMessageClient(Instance).MsgLineLength;
end;

procedure __DC__SetTIdMessageClient__MsgLineLength(Instance : TObject; Params : PVariantArgList);
begin
TIdMessageClient(Instance).MsgLineLength:=OleVariant(Params^[0]);
end;

function __DC__GetTIdMessageClient__MsgLineFold(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMessageClient(Instance).MsgLineFold;
end;

procedure __DC__SetTIdMessageClient__MsgLineFold(Instance : TObject; Params : PVariantArgList);
begin
TIdMessageClient(Instance).MsgLineFold:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TIdMessageClient,'MsgLineLength',__DC__GetTIdMessageClient__MsgLineLength,__DC__SetTIdMessageClient__MsgLineLength);
RegisterProperty(TIdMessageClient,'MsgLineFold',__DC__GetTIdMessageClient__MsgLineFold,__DC__SetTIdMessageClient__MsgLineFold);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..1] of TClass = (
TIdIOHandlerStreamMsg,
TIdMessageClient
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegisterProc(TIdMessageClient,'ReceiveBody',mtScriptMethod,TypeInfo(_T0),[
TypeInfo(TIdMessage),
TypeInfo(string)],Addr(__TIdMessageClient__ReceiveBody__Wrapper),cRegister);

RegisterProc(TIdMessageClient,'ReceiveHeader',mtScriptMethod,TypeInfo(_T1),[
TypeInfo(TIdMessage),
TypeInfo(string),TypeInfo(string)],Addr(__TIdMessageClient__ReceiveHeader__Wrapper),cRegister);

//RegRegisterMethod(TIdMessageClient,'SendBody',TypeInfo(_T2),[TypeInfo(TIdMessage)], pointer(164));
RegRegisterMethod(TIdMessageClient,'SendBody',TypeInfo(_T2),[TypeInfo(TIdMessage)],  getVMTProcAddr('TIdMessageClient','SendBody',164));


//RegRegisterMethod(TIdMessageClient,'SendHeader',TypeInfo(_T3),[TypeInfo(TIdMessage)], pointer(168));
RegRegisterMethod(TIdMessageClient,'SendHeader',TypeInfo(_T3),[TypeInfo(TIdMessage)],  getVMTProcAddr('TIdMessageClient','SendHeader',168));


//RegRegisterMethod(TIdMessageClient,'WriteBodyText',TypeInfo(_T4),[TypeInfo(TIdMessage)], pointer(172));
RegRegisterMethod(TIdMessageClient,'WriteBodyText',TypeInfo(_T4),[TypeInfo(TIdMessage)],  getVMTProcAddr('TIdMessageClient','WriteBodyText',172));


RegRegisterMethod(TIdMessageClient,'ProcessMessage',TypeInfo(_T5),[
TypeInfo(TIdMessage),
TypeInfo(Boolean)],Addr(__TIdMessageClient__ProcessMessage__Wrapper));

RegisterProc(TIdMessageClient,'SendMsg',mtScriptMethod,TypeInfo(_T6),[
TypeInfo(TIdMessage),
TypeInfo(Boolean)],Addr(__TIdMessageClient__SendMsg__Wrapper),cRegister);

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
