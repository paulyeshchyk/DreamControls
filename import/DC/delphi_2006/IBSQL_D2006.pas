{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IBSQL_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  Types,
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Variants,
  Windows,
  Classes,
  IBHeader,
  IBErrorCodes,
  IBExternals,
  DB,
  IB,
  IBDatabase,
  IBUtils,
  IBXConst,
  DBConsts,
  IBIntf,
  FMTBcd,
  IBSQL;
function ConvertTBcdToVariant(var R : TBcd) : OleVariant;
function ConvertVariantToTBcd(const V : OleVariant) : TBcd;
function ConvertTISC_QUADToVariant(var R : TISC_QUAD) : OleVariant;
function ConvertVariantToTISC_QUAD(const V : OleVariant) : TISC_QUAD;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TISC_QUAD__Wrapper = class(TDCRecordWrapper)
private
fR : TISC_QUAD;
public
function GetRecordPtr : pointer; override;
published
procedure setgds_quad_high(const val : ISC_LONG);
function getgds_quad_high : ISC_LONG;
property gds_quad_high : ISC_LONG read getgds_quad_high write setgds_quad_high;
procedure setgds_quad_low(const val : UISC_LONG);
function getgds_quad_low : UISC_LONG;
property gds_quad_low : UISC_LONG read getgds_quad_low write setgds_quad_low;
end;
type __TBcd__Wrapper = class(TDCRecordWrapper)
private
fR : TBcd;
public
function GetRecordPtr : pointer; override;
published
procedure setPrecision(const val : Byte);
function getPrecision : Byte;
property Precision : Byte read getPrecision write setPrecision;
procedure setSignSpecialPlaces(const val : Byte);
function getSignSpecialPlaces : Byte;
property SignSpecialPlaces : Byte read getSignSpecialPlaces write setSignSpecialPlaces;
end;
type
_T0 = procedure (p0 : TIBSQL;
p1 : TIBOutputXML) of object;

_T1 = procedure  of object;

_T2 = function : Boolean of object;

_T3 = _T2;

_T4 = function (var p0 : String): Integer of object;

_T5 = procedure (p0 : TIBSQL) of object;

_T6 = procedure (p0 : TIBBatchInput) of object;

_T7 = procedure (p0 : TIBBatchOutput) of object;

_T8 = procedure (p0 : TIBOutputXML) of object;

_T9 = function (p0 : ISC_STATUS;
p1 : Boolean): ISC_STATUS of object;

_T10 = _T1;

_T11 = _T1;

_T12 = _T1;

_T13 = _T1;

_T14 = function : TIBXSQLDA of object;

_T15 = _T1;

_T16 = function (p0 : String): TIBXSQLVAR of object;

_T17 = _T1;

_T18 = _T14;

_T19 = _T1;

_T20 = _T1;

_T21 = function : String of object;

_T22 = _T16;

_T23 = _T5;

_T24 = procedure (p0 : String;
p1 : Integer) of object;

_T25 = _T16;

_T26 = procedure (p0 : TIBXSQLDA;
p1 : TIBSQL) of object;

_T27 = procedure (p0 : TIBXSQLVAR) of object;

_T28 = procedure (const p0 : String) of object;

_T29 = procedure (p0 : TStream) of object;

_T30 = _T28;

_T31 = _T29;

_T32 = _T1;

_T33 = _T21;

_T34 = _T21;

_T35 = _T21;

_T36 = function : PChar of object;

_T37 = function : PShort of object;

_T38 = function : Short of object;

_T39 = _T21;

_T40 = _T38;

_T41 = _T38;

_T42 = _T38;

_T43 = _T38;

_T44 = function : Pointer of object;

_T45 = _T28;

_T46 = _T28;

_T47 = _T28;

_T48 = _T28;

{_T49 = procedure (const p0 : PChar) of object;}

_T50 = procedure (const p0 : PShort) of object;

_T51 = procedure (const p0 : Short) of object;

_T52 = _T51;

_T53 = _T51;

_T54 = _T51;

_T55 = _T51;

_T56 = procedure (const p0 : Pointer) of object;

_T57 = procedure (p0 : Integer;
p1 : Integer) of object;

_T58 = _T57;

function __TISC_QUAD__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TISC_QUAD__Wrapper.setgds_quad_high(const val : ISC_LONG);
begin
TISC_QUAD(GetRecordPtr^).gds_quad_high := val;
end;
function __TISC_QUAD__Wrapper.getgds_quad_high : ISC_LONG;
begin
result := TISC_QUAD(GetRecordPtr^).gds_quad_high;
end;
procedure __TISC_QUAD__Wrapper.setgds_quad_low(const val : UISC_LONG);
begin
TISC_QUAD(GetRecordPtr^).gds_quad_low := val;
end;
function __TISC_QUAD__Wrapper.getgds_quad_low : UISC_LONG;
begin
result := TISC_QUAD(GetRecordPtr^).gds_quad_low;
end;
function __TBcd__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TBcd__Wrapper.setPrecision(const val : Byte);
begin
TBcd(GetRecordPtr^).Precision := val;
end;
function __TBcd__Wrapper.getPrecision : Byte;
begin
result := TBcd(GetRecordPtr^).Precision;
end;
procedure __TBcd__Wrapper.setSignSpecialPlaces(const val : Byte);
begin
TBcd(GetRecordPtr^).SignSpecialPlaces := val;
end;
function __TBcd__Wrapper.getSignSpecialPlaces : Byte;
begin
result := TBcd(GetRecordPtr^).SignSpecialPlaces;
end;

type __TBcd__Wrapper__ = class(__TBcd__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TBcd__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTBcdToVariant(var R : TBcd) : OleVariant;
var
__rw : __TBcd__Wrapper__;
begin
__rw := __TBcd__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTBcd(const V : OleVariant) : TBcd;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TBcd((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TISC_QUAD__Wrapper__ = class(__TISC_QUAD__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TISC_QUAD__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTISC_QUADToVariant(var R : TISC_QUAD) : OleVariant;
var
__rw : __TISC_QUAD__Wrapper__;
begin
__rw := __TISC_QUAD__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTISC_QUAD(const V : OleVariant) : TISC_QUAD;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TISC_QUAD((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTIBBatch__Columns(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBBatch(Instance).Columns);
end;

procedure __DC__SetTIBBatch__Columns(Instance : TObject; Params : PVariantArgList);
begin
TIBBatch(Instance).Columns:=TIBXSQLDA(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIBBatch__FileName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBBatch(Instance).FileName;
end;

procedure __DC__SetTIBBatch__FileName(Instance : TObject; Params : PVariantArgList);
begin
TIBBatch(Instance).FileName:=OleVariant(Params^[0]);
end;

function __DC__GetTIBBatch__Params(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBBatch(Instance).Params);
end;

procedure __DC__SetTIBBatch__Params(Instance : TObject; Params : PVariantArgList);
begin
TIBBatch(Instance).Params:=TIBXSQLDA(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIBInputDelimitedFile__ColDelimiter(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBInputDelimitedFile(Instance).ColDelimiter;
end;

procedure __DC__SetTIBInputDelimitedFile__ColDelimiter(Instance : TObject; Params : PVariantArgList);
begin
TIBInputDelimitedFile(Instance).ColDelimiter:=OleVariant(Params^[0]);
end;

function __DC__GetTIBInputDelimitedFile__ReadBlanksAsNull(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBInputDelimitedFile(Instance).ReadBlanksAsNull;
end;

procedure __DC__SetTIBInputDelimitedFile__ReadBlanksAsNull(Instance : TObject; Params : PVariantArgList);
begin
TIBInputDelimitedFile(Instance).ReadBlanksAsNull:=OleVariant(Params^[0]);
end;

function __DC__GetTIBInputDelimitedFile__RowDelimiter(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBInputDelimitedFile(Instance).RowDelimiter;
end;

procedure __DC__SetTIBInputDelimitedFile__RowDelimiter(Instance : TObject; Params : PVariantArgList);
begin
TIBInputDelimitedFile(Instance).RowDelimiter:=OleVariant(Params^[0]);
end;

function __DC__GetTIBInputDelimitedFile__SkipTitles(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBInputDelimitedFile(Instance).SkipTitles;
end;

procedure __DC__SetTIBInputDelimitedFile__SkipTitles(Instance : TObject; Params : PVariantArgList);
begin
TIBInputDelimitedFile(Instance).SkipTitles:=OleVariant(Params^[0]);
end;

function __DC__GetTIBOutputDelimitedFile__ColDelimiter(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBOutputDelimitedFile(Instance).ColDelimiter;
end;

procedure __DC__SetTIBOutputDelimitedFile__ColDelimiter(Instance : TObject; Params : PVariantArgList);
begin
TIBOutputDelimitedFile(Instance).ColDelimiter:=OleVariant(Params^[0]);
end;

function __DC__GetTIBOutputDelimitedFile__OutputTitles(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBOutputDelimitedFile(Instance).OutputTitles;
end;

procedure __DC__SetTIBOutputDelimitedFile__OutputTitles(Instance : TObject; Params : PVariantArgList);
begin
TIBOutputDelimitedFile(Instance).OutputTitles:=OleVariant(Params^[0]);
end;

function __DC__GetTIBOutputDelimitedFile__RowDelimiter(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBOutputDelimitedFile(Instance).RowDelimiter;
end;

procedure __DC__SetTIBOutputDelimitedFile__RowDelimiter(Instance : TObject; Params : PVariantArgList);
begin
TIBOutputDelimitedFile(Instance).RowDelimiter:=OleVariant(Params^[0]);
end;

function __DC__GetTIBOutputXML__HeaderTag(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBOutputXML(Instance).HeaderTag;
end;

procedure __DC__SetTIBOutputXML__HeaderTag(Instance : TObject; Params : PVariantArgList);
begin
TIBOutputXML(Instance).HeaderTag:=OleVariant(Params^[0]);
end;

function __DC__GetTIBOutputXML__DatabaseTag(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBOutputXML(Instance).DatabaseTag;
end;

procedure __DC__SetTIBOutputXML__DatabaseTag(Instance : TObject; Params : PVariantArgList);
begin
TIBOutputXML(Instance).DatabaseTag:=OleVariant(Params^[0]);
end;

function __DC__GetTIBOutputXML__Stream(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBOutputXML(Instance).Stream);
end;

procedure __DC__SetTIBOutputXML__Stream(Instance : TObject; Params : PVariantArgList);
begin
TIBOutputXML(Instance).Stream:=TStream(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIBOutputXML__TableTag(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBOutputXML(Instance).TableTag;
end;

procedure __DC__SetTIBOutputXML__TableTag(Instance : TObject; Params : PVariantArgList);
begin
TIBOutputXML(Instance).TableTag:=OleVariant(Params^[0]);
end;

function __DC__GetTIBOutputXML__RowTag(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBOutputXML(Instance).RowTag;
end;

procedure __DC__SetTIBOutputXML__RowTag(Instance : TObject; Params : PVariantArgList);
begin
TIBOutputXML(Instance).RowTag:=OleVariant(Params^[0]);
end;

function __DC__GetTIBOutputXML__Flags(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TIBXMLFlags;
begin
tmp := TIBOutputXML(Instance).Flags;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTIBOutputXML__Flags(Instance : TObject; Params : PVariantArgList);
var
  tmp : TIBXMLFlags;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TIBOutputXML(Instance).Flags:=tmp;
end;

function __DC__GetTIBSQL__Bof(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBSQL(Instance).Bof;
end;

function __DC__GetTIBSQL__DBHandle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TIBSQL(Instance).DBHandle);
end;

function __DC__GetTIBSQL__Eof(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBSQL(Instance).Eof;
end;

function __DC__GetTIBSQL__Fields(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBSQL(Instance).Fields[OleVariant(Params^[0])]);
end;

function __DC__GetTIBSQL__FieldIndex(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBSQL(Instance).FieldIndex[OleVariant(Params^[0])];
end;

function __DC__GetTIBSQL__Open(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBSQL(Instance).Open;
end;

function __DC__GetTIBSQL__Params(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBSQL(Instance).Params);
end;

function __DC__GetTIBSQL__Plan(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBSQL(Instance).Plan;
end;

function __DC__GetTIBSQL__Prepared(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBSQL(Instance).Prepared;
end;

function __DC__GetTIBSQL__RecordCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBSQL(Instance).RecordCount;
end;

function __DC__GetTIBSQL__RowsAffected(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBSQL(Instance).RowsAffected;
end;

function __DC__GetTIBSQL__SqlType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBSQL(Instance).SqlType;
end;

function __DC__GetTIBSQL__TRHandle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TIBSQL(Instance).TRHandle);
end;

function __DC__GetTIBSQL__Handle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TIBSQL(Instance).Handle);
end;

function __DC__GetTIBSQL__GenerateParamNames(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBSQL(Instance).GenerateParamNames;
end;

procedure __DC__SetTIBSQL__GenerateParamNames(Instance : TObject; Params : PVariantArgList);
begin
TIBSQL(Instance).GenerateParamNames:=OleVariant(Params^[0]);
end;

function __DC__GetTIBSQL__UniqueRelationName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBSQL(Instance).UniqueRelationName;
end;

function __DC__GetTIBSQL__FieldCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBSQL(Instance).FieldCount;
end;

function __DC__GetTIBXSQLDA__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBXSQLDA(Instance).Count;
end;

procedure __DC__SetTIBXSQLDA__Count(Instance : TObject; Params : PVariantArgList);
begin
TIBXSQLDA(Instance).Count:=OleVariant(Params^[0]);
end;

function __DC__GetTIBXSQLDA__Modified(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBXSQLDA(Instance).Modified;
end;

function __DC__GetTIBXSQLDA__Names(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBXSQLDA(Instance).Names;
end;

function __DC__GetTIBXSQLDA__RecordSize(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBXSQLDA(Instance).RecordSize;
end;

function __DC__GetTIBXSQLDA__Vars(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBXSQLDA(Instance).Vars[OleVariant(Params^[0])]);
end;

function __DC__GetTIBXSQLDA__UniqueRelationName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBXSQLDA(Instance).UniqueRelationName;
end;

function __DC__GetTIBXSQLVAR__AsBoolean(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBXSQLVAR(Instance).AsBoolean;
end;

procedure __DC__SetTIBXSQLVAR__AsBoolean(Instance : TObject; Params : PVariantArgList);
begin
TIBXSQLVAR(Instance).AsBoolean:=OleVariant(Params^[0]);
end;

function __DC__GetTIBXSQLVAR__AsDate(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBXSQLVAR(Instance).AsDate;
end;

procedure __DC__SetTIBXSQLVAR__AsDate(Instance : TObject; Params : PVariantArgList);
begin
TIBXSQLVAR(Instance).AsDate:=OleVariant(Params^[0]);
end;

function __DC__GetTIBXSQLVAR__AsTime(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBXSQLVAR(Instance).AsTime;
end;

procedure __DC__SetTIBXSQLVAR__AsTime(Instance : TObject; Params : PVariantArgList);
begin
TIBXSQLVAR(Instance).AsTime:=OleVariant(Params^[0]);
end;

function __DC__GetTIBXSQLVAR__AsDateTime(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBXSQLVAR(Instance).AsDateTime;
end;

procedure __DC__SetTIBXSQLVAR__AsDateTime(Instance : TObject; Params : PVariantArgList);
begin
TIBXSQLVAR(Instance).AsDateTime:=OleVariant(Params^[0]);
end;

function __DC__GetTIBXSQLVAR__AsDouble(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBXSQLVAR(Instance).AsDouble;
end;

procedure __DC__SetTIBXSQLVAR__AsDouble(Instance : TObject; Params : PVariantArgList);
begin
TIBXSQLVAR(Instance).AsDouble:=OleVariant(Params^[0]);
end;

function __DC__GetTIBXSQLVAR__AsFloat(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBXSQLVAR(Instance).AsFloat;
end;

procedure __DC__SetTIBXSQLVAR__AsFloat(Instance : TObject; Params : PVariantArgList);
begin
TIBXSQLVAR(Instance).AsFloat:=OleVariant(Params^[0]);
end;

function __DC__GetTIBXSQLVAR__AsCurrency(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBXSQLVAR(Instance).AsCurrency;
end;

procedure __DC__SetTIBXSQLVAR__AsCurrency(Instance : TObject; Params : PVariantArgList);
begin
TIBXSQLVAR(Instance).AsCurrency:=OleVariant(Params^[0]);
end;

function __DC__GetTIBXSQLVAR__AsInteger(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBXSQLVAR(Instance).AsInteger;
end;

procedure __DC__SetTIBXSQLVAR__AsInteger(Instance : TObject; Params : PVariantArgList);
begin
TIBXSQLVAR(Instance).AsInteger:=OleVariant(Params^[0]);
end;

function __DC__GetTIBXSQLVAR__AsLong(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBXSQLVAR(Instance).AsLong;
end;

procedure __DC__SetTIBXSQLVAR__AsLong(Instance : TObject; Params : PVariantArgList);
begin
TIBXSQLVAR(Instance).AsLong:=OleVariant(Params^[0]);
end;

function __DC__GetTIBXSQLVAR__AsPointer(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TIBXSQLVAR(Instance).AsPointer);
end;

procedure __DC__SetTIBXSQLVAR__AsPointer(Instance : TObject; Params : PVariantArgList);
begin
TIBXSQLVAR(Instance).AsPointer:=VarToPointer(OleVariant(Params^[0]));
end;

function __DC__GetTIBXSQLVAR__AsQuad(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TISC_QUAD__Wrapper;
begin
__wrapper := __TISC_QUAD__Wrapper.Create;
__wrapper.fR := TIBXSQLVAR(Instance).AsQuad;
result := IUnknown(__wrapper) as IDispatch;
end;

procedure __DC__SetTIBXSQLVAR__AsQuad(Instance : TObject; Params : PVariantArgList);
var
__idisp:IDispatch;
__iwrapper:IDCRecordWrapper;
begin
__idisp:=DCVarToInterface(OleVariant(Params^[0]));
if __idisp=nil then exit;
__idisp.QueryInterface(IDCRecordWrapper, __iwrapper);
TIBXSQLVAR(Instance).AsQuad:=TISC_QUAD(__iwrapper.GetRecordPtr^);
end;

function __DC__GetTIBXSQLVAR__AsShort(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBXSQLVAR(Instance).AsShort;
end;

procedure __DC__SetTIBXSQLVAR__AsShort(Instance : TObject; Params : PVariantArgList);
begin
TIBXSQLVAR(Instance).AsShort:=OleVariant(Params^[0]);
end;

function __DC__GetTIBXSQLVAR__AsString(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBXSQLVAR(Instance).AsString;
end;

procedure __DC__SetTIBXSQLVAR__AsString(Instance : TObject; Params : PVariantArgList);
begin
TIBXSQLVAR(Instance).AsString:=OleVariant(Params^[0]);
end;

function __DC__GetTIBXSQLVAR__AsTrimString(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBXSQLVAR(Instance).AsTrimString;
end;

procedure __DC__SetTIBXSQLVAR__AsTrimString(Instance : TObject; Params : PVariantArgList);
begin
TIBXSQLVAR(Instance).AsTrimString:=OleVariant(Params^[0]);
end;

function __DC__GetTIBXSQLVAR__AsVariant(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBXSQLVAR(Instance).AsVariant;
end;

procedure __DC__SetTIBXSQLVAR__AsVariant(Instance : TObject; Params : PVariantArgList);
begin
TIBXSQLVAR(Instance).AsVariant:=OleVariant(Params^[0]);
end;

function __DC__GetTIBXSQLVAR__AsBcd(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TBcd__Wrapper;
begin
__wrapper := __TBcd__Wrapper.Create;
__wrapper.fR := TIBXSQLVAR(Instance).AsBcd;
result := IUnknown(__wrapper) as IDispatch;
end;

procedure __DC__SetTIBXSQLVAR__AsBcd(Instance : TObject; Params : PVariantArgList);
var
__idisp:IDispatch;
__iwrapper:IDCRecordWrapper;
begin
__idisp:=DCVarToInterface(OleVariant(Params^[0]));
if __idisp=nil then exit;
__idisp.QueryInterface(IDCRecordWrapper, __iwrapper);
TIBXSQLVAR(Instance).AsBcd:=TBcd(__iwrapper.GetRecordPtr^);
end;

function __DC__GetTIBXSQLVAR__SqlVar(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBXSQLVAR(Instance).SqlVar);
end;

procedure __DC__SetTIBXSQLVAR__SqlVar(Instance : TObject; Params : PVariantArgList);
begin
TIBXSQLVAR(Instance).SqlVar:=TSQLVAR(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIBXSQLVAR__Data(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBXSQLVAR(Instance).Data);
end;

procedure __DC__SetTIBXSQLVAR__Data(Instance : TObject; Params : PVariantArgList);
begin
TIBXSQLVAR(Instance).Data:=TSQLVAR(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIBXSQLVAR__IsNull(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBXSQLVAR(Instance).IsNull;
end;

procedure __DC__SetTIBXSQLVAR__IsNull(Instance : TObject; Params : PVariantArgList);
begin
TIBXSQLVAR(Instance).IsNull:=OleVariant(Params^[0]);
end;

function __DC__GetTIBXSQLVAR__IsNullable(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBXSQLVAR(Instance).IsNullable;
end;

procedure __DC__SetTIBXSQLVAR__IsNullable(Instance : TObject; Params : PVariantArgList);
begin
TIBXSQLVAR(Instance).IsNullable:=OleVariant(Params^[0]);
end;

function __DC__GetTIBXSQLVAR__Index(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBXSQLVAR(Instance).Index;
end;

function __DC__GetTIBXSQLVAR__Modified(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBXSQLVAR(Instance).Modified;
end;

procedure __DC__SetTIBXSQLVAR__Modified(Instance : TObject; Params : PVariantArgList);
begin
TIBXSQLVAR(Instance).Modified:=OleVariant(Params^[0]);
end;

function __DC__GetTIBXSQLVAR__Name(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBXSQLVAR(Instance).Name;
end;

function __DC__GetTIBXSQLVAR__Size(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBXSQLVAR(Instance).Size;
end;

function __DC__GetTIBXSQLVAR__SqlType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBXSQLVAR(Instance).SqlType;
end;

function __DC__GetTIBXSQLVAR__Value(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBXSQLVAR(Instance).Value;
end;

procedure __DC__SetTIBXSQLVAR__Value(Instance : TObject; Params : PVariantArgList);
begin
TIBXSQLVAR(Instance).Value:=OleVariant(Params^[0]);
end;

function __DC__GetTSQLVAR__XSqlVar(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TSQLVAR(Instance).XSqlVar);
end;

procedure __DC__SetTSQLVAR__XSqlVar(Instance : TObject; Params : PVariantArgList);
begin
TSQLVAR(Instance).XSqlVar:=VarToPointer(OleVariant(Params^[0]));
end;

function __DC__GetTSQLVAR__SqlType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSQLVAR(Instance).SqlType;
end;

procedure __DC__SetTSQLVAR__SqlType(Instance : TObject; Params : PVariantArgList);
begin
TSQLVAR(Instance).SqlType:=OleVariant(Params^[0]);
end;

function __DC__GetTSQLVAR__SqlDef(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSQLVAR(Instance).SqlDef;
end;

function __DC__GetTSQLVAR__SqlScale(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSQLVAR(Instance).SqlScale;
end;

procedure __DC__SetTSQLVAR__SqlScale(Instance : TObject; Params : PVariantArgList);
begin
TSQLVAR(Instance).SqlScale:=OleVariant(Params^[0]);
end;

function __DC__GetTSQLVAR__SqlPrecision(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSQLVAR(Instance).SqlPrecision;
end;

procedure __DC__SetTSQLVAR__SqlPrecision(Instance : TObject; Params : PVariantArgList);
begin
TSQLVAR(Instance).SqlPrecision:=OleVariant(Params^[0]);
end;

function __DC__GetTSQLVAR__SqlSubtype(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSQLVAR(Instance).SqlSubtype;
end;

procedure __DC__SetTSQLVAR__SqlSubtype(Instance : TObject; Params : PVariantArgList);
begin
TSQLVAR(Instance).SqlSubtype:=OleVariant(Params^[0]);
end;

function __DC__GetTSQLVAR__SqlLen(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSQLVAR(Instance).SqlLen;
end;

procedure __DC__SetTSQLVAR__SqlLen(Instance : TObject; Params : PVariantArgList);
begin
TSQLVAR(Instance).SqlLen:=OleVariant(Params^[0]);
end;

function __DC__GetTSQLVAR__SqlData(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := String(TSQLVAR(Instance).SqlData);
end;

procedure __DC__SetTSQLVAR__SqlData(Instance : TObject; Params : PVariantArgList);
begin
TSQLVAR(Instance).SqlData:=PChar(String(OleVariant(Params^[0])));
end;

function __DC__GetTSQLVAR__SqlInd(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TSQLVAR(Instance).SqlInd);
end;

procedure __DC__SetTSQLVAR__SqlInd(Instance : TObject; Params : PVariantArgList);
begin
TSQLVAR(Instance).SqlInd:=VarToPointer(OleVariant(Params^[0]));
end;

function __DC__GetTSQLVAR__SqlName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSQLVAR(Instance).SqlName;
end;

procedure __DC__SetTSQLVAR__SqlName(Instance : TObject; Params : PVariantArgList);
begin
TSQLVAR(Instance).SqlName:=OleVariant(Params^[0]);
end;

function __DC__GetTSQLVAR__RelName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSQLVAR(Instance).RelName;
end;

procedure __DC__SetTSQLVAR__RelName(Instance : TObject; Params : PVariantArgList);
begin
TSQLVAR(Instance).RelName:=OleVariant(Params^[0]);
end;

function __DC__GetTSQLVAR__OwnName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSQLVAR(Instance).OwnName;
end;

procedure __DC__SetTSQLVAR__OwnName(Instance : TObject; Params : PVariantArgList);
begin
TSQLVAR(Instance).OwnName:=OleVariant(Params^[0]);
end;

function __DC__GetTSQLVAR__AliasName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSQLVAR(Instance).AliasName;
end;

procedure __DC__SetTSQLVAR__AliasName(Instance : TObject; Params : PVariantArgList);
begin
TSQLVAR(Instance).AliasName:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TIBBatch,'Columns',__DC__GetTIBBatch__Columns,__DC__SetTIBBatch__Columns);
RegisterProperty(TIBBatch,'FileName',__DC__GetTIBBatch__FileName,__DC__SetTIBBatch__FileName);
RegisterProperty(TIBBatch,'Params',__DC__GetTIBBatch__Params,__DC__SetTIBBatch__Params);
RegisterProperty(TIBInputDelimitedFile,'ColDelimiter',__DC__GetTIBInputDelimitedFile__ColDelimiter,__DC__SetTIBInputDelimitedFile__ColDelimiter);
RegisterProperty(TIBInputDelimitedFile,'ReadBlanksAsNull',__DC__GetTIBInputDelimitedFile__ReadBlanksAsNull,__DC__SetTIBInputDelimitedFile__ReadBlanksAsNull);
RegisterProperty(TIBInputDelimitedFile,'RowDelimiter',__DC__GetTIBInputDelimitedFile__RowDelimiter,__DC__SetTIBInputDelimitedFile__RowDelimiter);
RegisterProperty(TIBInputDelimitedFile,'SkipTitles',__DC__GetTIBInputDelimitedFile__SkipTitles,__DC__SetTIBInputDelimitedFile__SkipTitles);
RegisterProperty(TIBOutputDelimitedFile,'ColDelimiter',__DC__GetTIBOutputDelimitedFile__ColDelimiter,__DC__SetTIBOutputDelimitedFile__ColDelimiter);
RegisterProperty(TIBOutputDelimitedFile,'OutputTitles',__DC__GetTIBOutputDelimitedFile__OutputTitles,__DC__SetTIBOutputDelimitedFile__OutputTitles);
RegisterProperty(TIBOutputDelimitedFile,'RowDelimiter',__DC__GetTIBOutputDelimitedFile__RowDelimiter,__DC__SetTIBOutputDelimitedFile__RowDelimiter);
RegisterProperty(TIBOutputXML,'HeaderTag',__DC__GetTIBOutputXML__HeaderTag,__DC__SetTIBOutputXML__HeaderTag);
RegisterProperty(TIBOutputXML,'DatabaseTag',__DC__GetTIBOutputXML__DatabaseTag,__DC__SetTIBOutputXML__DatabaseTag);
RegisterProperty(TIBOutputXML,'Stream',__DC__GetTIBOutputXML__Stream,__DC__SetTIBOutputXML__Stream);
RegisterProperty(TIBOutputXML,'TableTag',__DC__GetTIBOutputXML__TableTag,__DC__SetTIBOutputXML__TableTag);
RegisterProperty(TIBOutputXML,'RowTag',__DC__GetTIBOutputXML__RowTag,__DC__SetTIBOutputXML__RowTag);
RegisterProperty(TIBOutputXML,'Flags',__DC__GetTIBOutputXML__Flags,__DC__SetTIBOutputXML__Flags);
RegisterProperty(TIBSQL,'Bof',__DC__GetTIBSQL__Bof,nil);
RegisterProperty(TIBSQL,'DBHandle',__DC__GetTIBSQL__DBHandle,nil);
RegisterProperty(TIBSQL,'Eof',__DC__GetTIBSQL__Eof,nil);
RegisterIndexedProperty(TIBSQL,'Fields',1,False,__DC__GetTIBSQL__Fields,nil);
RegisterIndexedProperty(TIBSQL,'FieldIndex',1,False,__DC__GetTIBSQL__FieldIndex,nil);
RegisterProperty(TIBSQL,'Open',__DC__GetTIBSQL__Open,nil);
RegisterProperty(TIBSQL,'Params',__DC__GetTIBSQL__Params,nil);
RegisterProperty(TIBSQL,'Plan',__DC__GetTIBSQL__Plan,nil);
RegisterProperty(TIBSQL,'Prepared',__DC__GetTIBSQL__Prepared,nil);
RegisterProperty(TIBSQL,'RecordCount',__DC__GetTIBSQL__RecordCount,nil);
RegisterProperty(TIBSQL,'RowsAffected',__DC__GetTIBSQL__RowsAffected,nil);
RegisterProperty(TIBSQL,'SqlType',__DC__GetTIBSQL__SqlType,nil);
RegisterProperty(TIBSQL,'TRHandle',__DC__GetTIBSQL__TRHandle,nil);
RegisterProperty(TIBSQL,'Handle',__DC__GetTIBSQL__Handle,nil);
RegisterProperty(TIBSQL,'GenerateParamNames',__DC__GetTIBSQL__GenerateParamNames,__DC__SetTIBSQL__GenerateParamNames);
RegisterProperty(TIBSQL,'UniqueRelationName',__DC__GetTIBSQL__UniqueRelationName,nil);
RegisterProperty(TIBSQL,'FieldCount',__DC__GetTIBSQL__FieldCount,nil);
RegisterProperty(TIBXSQLDA,'Count',__DC__GetTIBXSQLDA__Count,__DC__SetTIBXSQLDA__Count);
RegisterProperty(TIBXSQLDA,'Modified',__DC__GetTIBXSQLDA__Modified,nil);
RegisterProperty(TIBXSQLDA,'Names',__DC__GetTIBXSQLDA__Names,nil);
RegisterProperty(TIBXSQLDA,'RecordSize',__DC__GetTIBXSQLDA__RecordSize,nil);
RegisterIndexedProperty(TIBXSQLDA,'Vars',1,True,__DC__GetTIBXSQLDA__Vars,nil);
RegisterProperty(TIBXSQLDA,'UniqueRelationName',__DC__GetTIBXSQLDA__UniqueRelationName,nil);
RegisterProperty(TIBXSQLVAR,'AsBoolean',__DC__GetTIBXSQLVAR__AsBoolean,__DC__SetTIBXSQLVAR__AsBoolean);
RegisterProperty(TIBXSQLVAR,'AsDate',__DC__GetTIBXSQLVAR__AsDate,__DC__SetTIBXSQLVAR__AsDate);
RegisterProperty(TIBXSQLVAR,'AsTime',__DC__GetTIBXSQLVAR__AsTime,__DC__SetTIBXSQLVAR__AsTime);
RegisterProperty(TIBXSQLVAR,'AsDateTime',__DC__GetTIBXSQLVAR__AsDateTime,__DC__SetTIBXSQLVAR__AsDateTime);
RegisterProperty(TIBXSQLVAR,'AsDouble',__DC__GetTIBXSQLVAR__AsDouble,__DC__SetTIBXSQLVAR__AsDouble);
RegisterProperty(TIBXSQLVAR,'AsFloat',__DC__GetTIBXSQLVAR__AsFloat,__DC__SetTIBXSQLVAR__AsFloat);
RegisterProperty(TIBXSQLVAR,'AsCurrency',__DC__GetTIBXSQLVAR__AsCurrency,__DC__SetTIBXSQLVAR__AsCurrency);
RegisterProperty(TIBXSQLVAR,'AsInteger',__DC__GetTIBXSQLVAR__AsInteger,__DC__SetTIBXSQLVAR__AsInteger);
RegisterProperty(TIBXSQLVAR,'AsLong',__DC__GetTIBXSQLVAR__AsLong,__DC__SetTIBXSQLVAR__AsLong);
RegisterProperty(TIBXSQLVAR,'AsPointer',__DC__GetTIBXSQLVAR__AsPointer,__DC__SetTIBXSQLVAR__AsPointer);
RegisterProperty(TIBXSQLVAR,'AsQuad',__DC__GetTIBXSQLVAR__AsQuad,__DC__SetTIBXSQLVAR__AsQuad);
RegisterProperty(TIBXSQLVAR,'AsShort',__DC__GetTIBXSQLVAR__AsShort,__DC__SetTIBXSQLVAR__AsShort);
RegisterProperty(TIBXSQLVAR,'AsString',__DC__GetTIBXSQLVAR__AsString,__DC__SetTIBXSQLVAR__AsString);
RegisterProperty(TIBXSQLVAR,'AsTrimString',__DC__GetTIBXSQLVAR__AsTrimString,__DC__SetTIBXSQLVAR__AsTrimString);
RegisterProperty(TIBXSQLVAR,'AsVariant',__DC__GetTIBXSQLVAR__AsVariant,__DC__SetTIBXSQLVAR__AsVariant);
RegisterProperty(TIBXSQLVAR,'AsBcd',__DC__GetTIBXSQLVAR__AsBcd,__DC__SetTIBXSQLVAR__AsBcd);
RegisterProperty(TIBXSQLVAR,'SqlVar',__DC__GetTIBXSQLVAR__SqlVar,__DC__SetTIBXSQLVAR__SqlVar);
RegisterProperty(TIBXSQLVAR,'Data',__DC__GetTIBXSQLVAR__Data,__DC__SetTIBXSQLVAR__Data);
RegisterProperty(TIBXSQLVAR,'IsNull',__DC__GetTIBXSQLVAR__IsNull,__DC__SetTIBXSQLVAR__IsNull);
RegisterProperty(TIBXSQLVAR,'IsNullable',__DC__GetTIBXSQLVAR__IsNullable,__DC__SetTIBXSQLVAR__IsNullable);
RegisterProperty(TIBXSQLVAR,'Index',__DC__GetTIBXSQLVAR__Index,nil);
RegisterProperty(TIBXSQLVAR,'Modified',__DC__GetTIBXSQLVAR__Modified,__DC__SetTIBXSQLVAR__Modified);
RegisterProperty(TIBXSQLVAR,'Name',__DC__GetTIBXSQLVAR__Name,nil);
RegisterProperty(TIBXSQLVAR,'Size',__DC__GetTIBXSQLVAR__Size,nil);
RegisterProperty(TIBXSQLVAR,'SqlType',__DC__GetTIBXSQLVAR__SqlType,nil);
RegisterProperty(TIBXSQLVAR,'Value',__DC__GetTIBXSQLVAR__Value,__DC__SetTIBXSQLVAR__Value);
RegisterProperty(TSQLVAR,'XSqlVar',__DC__GetTSQLVAR__XSqlVar,__DC__SetTSQLVAR__XSqlVar);
RegisterProperty(TSQLVAR,'SqlType',__DC__GetTSQLVAR__SqlType,__DC__SetTSQLVAR__SqlType);
RegisterProperty(TSQLVAR,'SqlDef',__DC__GetTSQLVAR__SqlDef,nil);
RegisterProperty(TSQLVAR,'SqlScale',__DC__GetTSQLVAR__SqlScale,__DC__SetTSQLVAR__SqlScale);
RegisterProperty(TSQLVAR,'SqlPrecision',__DC__GetTSQLVAR__SqlPrecision,__DC__SetTSQLVAR__SqlPrecision);
RegisterProperty(TSQLVAR,'SqlSubtype',__DC__GetTSQLVAR__SqlSubtype,__DC__SetTSQLVAR__SqlSubtype);
RegisterProperty(TSQLVAR,'SqlLen',__DC__GetTSQLVAR__SqlLen,__DC__SetTSQLVAR__SqlLen);
RegisterProperty(TSQLVAR,'SqlData',__DC__GetTSQLVAR__SqlData,__DC__SetTSQLVAR__SqlData);
RegisterProperty(TSQLVAR,'SqlInd',__DC__GetTSQLVAR__SqlInd,__DC__SetTSQLVAR__SqlInd);
RegisterProperty(TSQLVAR,'SqlName',__DC__GetTSQLVAR__SqlName,__DC__SetTSQLVAR__SqlName);
RegisterProperty(TSQLVAR,'RelName',__DC__GetTSQLVAR__RelName,__DC__SetTSQLVAR__RelName);
RegisterProperty(TSQLVAR,'OwnName',__DC__GetTSQLVAR__OwnName,__DC__SetTSQLVAR__OwnName);
RegisterProperty(TSQLVAR,'AliasName',__DC__GetTSQLVAR__AliasName,__DC__SetTSQLVAR__AliasName);
end;

const __ConstNames0 : array[0..16] of string = (
'xmlAttribute'
,'xmlDisplayNull'
,'xmlNoHeader'
,'SQLUnknown'
,'SQLSelect'
,'SQLInsert'
,'SQLUpdate'
,'SQLDelete'
,'SQLDDL'
,'SQLGetSegment'
,'SQLPutSegment'
,'SQLExecProcedure'
,'SQLStartTransaction'
,'SQLCommit'
,'SQLRollback'
,'SQLSelectForUpdate'
,'SQLSetGenerator'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,xmlAttribute));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,xmlDisplayNull));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,xmlNoHeader));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,SQLUnknown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,SQLSelect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,SQLInsert));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,SQLUpdate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,SQLDelete));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,SQLDDL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,SQLGetSegment));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,SQLPutSegment));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,SQLExecProcedure));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,SQLStartTransaction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,SQLCommit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,SQLRollback));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,SQLSelectForUpdate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,SQLSetGenerator));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..13] of TClass = (
TIBBatch,
TIBBatchInput,
TIBBatchOutput,
TIBInputDelimitedFile,
TIBInputRawFile,
TIBOutputDelimitedFile,
TIBOutputRawFile,
TIBOutputXML,
TIBSQL,
TIBXSQLDA,
TIBXSQLVAR,
TSQLVAR,
TSQLVAR_V1,
TSQLVAR_V2
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'OutputXML'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(TIBSQL),
TypeInfo(TIBOutputXML)],Addr(OutputXML),cRegister);

//RegRegisterMethod(TIBBatch,'ReadyFile',TypeInfo(_T1),NoParams, pointer(0));
RegRegisterMethod(TIBBatch,'ReadyFile',TypeInfo(_T1),NoParams,  getVMTProcAddr('TIBBatch','ReadyFile',0));


//RegRegisterMethod(TIBBatchInput,'ReadParameters',TypeInfo(_T2),[TypeInfo(Boolean)], pointer(4));
RegRegisterMethod(TIBBatchInput,'ReadParameters',TypeInfo(_T2),[TypeInfo(Boolean)],  getVMTProcAddr('TIBBatchInput','ReadParameters',4));


//RegRegisterMethod(TIBBatchOutput,'WriteColumns',TypeInfo(_T3),[TypeInfo(Boolean)], pointer(4));
RegRegisterMethod(TIBBatchOutput,'WriteColumns',TypeInfo(_T3),[TypeInfo(Boolean)],  getVMTProcAddr('TIBBatchOutput','WriteColumns',4));


RegRegisterMethod(TIBInputDelimitedFile,'GetColumn',TypeInfo(_T4),[
TypeInfo(String),TypeInfo(Integer)],Addr(TIBInputDelimitedFile.GetColumn));

RegRegisterMethod(TIBOutputXML,'WriteXML',TypeInfo(_T5),[
TypeInfo(TIBSQL)],Addr(TIBOutputXML.WriteXML));

RegRegisterMethod(TIBSQL,'BatchInput',TypeInfo(_T6),[
TypeInfo(TIBBatchInput)],Addr(TIBSQL.BatchInput));

RegRegisterMethod(TIBSQL,'BatchOutput',TypeInfo(_T7),[
TypeInfo(TIBBatchOutput)],Addr(TIBSQL.BatchOutput));

RegRegisterMethod(TIBSQL,'OutputXML',TypeInfo(_T8),[
TypeInfo(TIBOutputXML)],Addr(TIBSQL.OutputXML));

RegRegisterMethod(TIBSQL,'Call',TypeInfo(_T9),[
TypeInfo(ISC_STATUS),
TypeInfo(Boolean),TypeInfo(ISC_STATUS)],Addr(TIBSQL.Call));

RegRegisterMethod(TIBSQL,'CheckClosed',TypeInfo(_T10),NoParams,Addr(TIBSQL.CheckClosed));

RegRegisterMethod(TIBSQL,'CheckOpen',TypeInfo(_T11),NoParams,Addr(TIBSQL.CheckOpen));

RegRegisterMethod(TIBSQL,'CheckValidStatement',TypeInfo(_T12),NoParams,Addr(TIBSQL.CheckValidStatement));

RegRegisterMethod(TIBSQL,'Close',TypeInfo(_T13),NoParams,Addr(TIBSQL.Close));

RegRegisterMethod(TIBSQL,'Current',TypeInfo(_T14),[TypeInfo(TIBXSQLDA)],Addr(TIBSQL.Current));

RegRegisterMethod(TIBSQL,'ExecQuery',TypeInfo(_T15),NoParams,Addr(TIBSQL.ExecQuery));

RegRegisterMethod(TIBSQL,'FieldByName',TypeInfo(_T16),[
TypeInfo(String),TypeInfo(TIBXSQLVAR)],Addr(TIBSQL.FieldByName));

RegRegisterMethod(TIBSQL,'FreeHandle',TypeInfo(_T17),NoParams,Addr(TIBSQL.FreeHandle));

RegRegisterMethod(TIBSQL,'Next',TypeInfo(_T18),[TypeInfo(TIBXSQLDA)],Addr(TIBSQL.Next));

RegRegisterMethod(TIBSQL,'Prepare',TypeInfo(_T19),NoParams,Addr(TIBSQL.Prepare));

RegRegisterMethod(TIBSQL,'Unprepare',TypeInfo(_T20),NoParams,Addr(TIBSQL.Unprepare));

RegRegisterMethod(TIBSQL,'GetUniqueRelationName',TypeInfo(_T21),[TypeInfo(String)],Addr(TIBSQL.GetUniqueRelationName));

RegRegisterMethod(TIBSQL,'ParamByName',TypeInfo(_T22),[
TypeInfo(String),TypeInfo(TIBXSQLVAR)],Addr(TIBSQL.ParamByName));

RegisterProc(TIBXSQLDA,'Create',mtConstructor,TypeInfo(_T23),[
TypeInfo(TIBSQL)],Addr(TIBXSQLDA.Create),cRegister);

RegRegisterMethod(TIBXSQLDA,'AddName',TypeInfo(_T24),[
TypeInfo(String),
TypeInfo(Integer)],Addr(TIBXSQLDA.AddName));

RegRegisterMethod(TIBXSQLDA,'ByName',TypeInfo(_T25),[
TypeInfo(String),TypeInfo(TIBXSQLVAR)],Addr(TIBXSQLDA.ByName));

RegisterProc(TIBXSQLVAR,'Create',mtConstructor,TypeInfo(_T26),[
TypeInfo(TIBXSQLDA),
TypeInfo(TIBSQL)],Addr(TIBXSQLVAR.Create),cRegister);

RegRegisterMethod(TIBXSQLVAR,'Assign',TypeInfo(_T27),[
TypeInfo(TIBXSQLVAR)],Addr(TIBXSQLVAR.Assign));

RegRegisterMethod(TIBXSQLVAR,'LoadFromFile',TypeInfo(_T28),[
TypeInfo(String)],Addr(TIBXSQLVAR.LoadFromFile));

RegRegisterMethod(TIBXSQLVAR,'LoadFromStream',TypeInfo(_T29),[
TypeInfo(TStream)],Addr(TIBXSQLVAR.LoadFromStream));

RegRegisterMethod(TIBXSQLVAR,'SaveToFile',TypeInfo(_T30),[
TypeInfo(String)],Addr(TIBXSQLVAR.SaveToFile));

RegRegisterMethod(TIBXSQLVAR,'SaveToStream',TypeInfo(_T31),[
TypeInfo(TStream)],Addr(TIBXSQLVAR.SaveToStream));

RegRegisterMethod(TIBXSQLVAR,'Clear',TypeInfo(_T32),NoParams,Addr(TIBXSQLVAR.Clear));

//RegRegisterMethod(TSQLVAR,'GetAliasName',TypeInfo(_T33),[TypeInfo(String)], pointer(0));
RegRegisterMethod(TSQLVAR,'GetAliasName',TypeInfo(_T33),[TypeInfo(String)],  getVMTProcAddr('TSQLVAR','GetAliasName',0));


//RegRegisterMethod(TSQLVAR,'GetOwnName',TypeInfo(_T34),[TypeInfo(String)], pointer(4));
RegRegisterMethod(TSQLVAR,'GetOwnName',TypeInfo(_T34),[TypeInfo(String)],  getVMTProcAddr('TSQLVAR','GetOwnName',4));


//RegRegisterMethod(TSQLVAR,'GetRelName',TypeInfo(_T35),[TypeInfo(String)], pointer(8));
RegRegisterMethod(TSQLVAR,'GetRelName',TypeInfo(_T35),[TypeInfo(String)],  getVMTProcAddr('TSQLVAR','GetRelName',8));


//RegRegisterMethod(TSQLVAR,'GetSqlData',TypeInfo(_T36),[TypeInfoPChar], pointer(12));
RegRegisterMethod(TSQLVAR,'GetSqlData',TypeInfo(_T36),[TypeInfoPChar],  getVMTProcAddr('TSQLVAR','GetSqlData',12));


//RegRegisterMethod(TSQLVAR,'GetSqlInd',TypeInfo(_T37),[TypeInfoPointer], pointer(16));
RegRegisterMethod(TSQLVAR,'GetSqlInd',TypeInfo(_T37),[TypeInfoPointer],  getVMTProcAddr('TSQLVAR','GetSqlInd',16));


//RegRegisterMethod(TSQLVAR,'GetSqlLen',TypeInfo(_T38),[TypeInfo(Short)], pointer(20));
RegRegisterMethod(TSQLVAR,'GetSqlLen',TypeInfo(_T38),[TypeInfo(Short)],  getVMTProcAddr('TSQLVAR','GetSqlLen',20));


//RegRegisterMethod(TSQLVAR,'GetSqlName',TypeInfo(_T39),[TypeInfo(String)], pointer(24));
RegRegisterMethod(TSQLVAR,'GetSqlName',TypeInfo(_T39),[TypeInfo(String)],  getVMTProcAddr('TSQLVAR','GetSqlName',24));


//RegRegisterMethod(TSQLVAR,'GetSqlPrecision',TypeInfo(_T40),[TypeInfo(Short)], pointer(28));
RegRegisterMethod(TSQLVAR,'GetSqlPrecision',TypeInfo(_T40),[TypeInfo(Short)],  getVMTProcAddr('TSQLVAR','GetSqlPrecision',28));


//RegRegisterMethod(TSQLVAR,'GetSqlScale',TypeInfo(_T41),[TypeInfo(Short)], pointer(32));
RegRegisterMethod(TSQLVAR,'GetSqlScale',TypeInfo(_T41),[TypeInfo(Short)],  getVMTProcAddr('TSQLVAR','GetSqlScale',32));


//RegRegisterMethod(TSQLVAR,'GetSqlSubtype',TypeInfo(_T42),[TypeInfo(Short)], pointer(36));
RegRegisterMethod(TSQLVAR,'GetSqlSubtype',TypeInfo(_T42),[TypeInfo(Short)],  getVMTProcAddr('TSQLVAR','GetSqlSubtype',36));


//RegRegisterMethod(TSQLVAR,'GetSqlType',TypeInfo(_T43),[TypeInfo(Short)], pointer(40));
RegRegisterMethod(TSQLVAR,'GetSqlType',TypeInfo(_T43),[TypeInfo(Short)],  getVMTProcAddr('TSQLVAR','GetSqlType',40));


//RegRegisterMethod(TSQLVAR,'GetSQLVAR',TypeInfo(_T44),[TypeInfoPointer], pointer(44));
RegRegisterMethod(TSQLVAR,'GetSQLVAR',TypeInfo(_T44),[TypeInfoPointer],  getVMTProcAddr('TSQLVAR','GetSQLVAR',44));


//RegRegisterMethod(TSQLVAR,'SetAliasName',TypeInfo(_T45),[TypeInfo(String)], pointer(48));
RegRegisterMethod(TSQLVAR,'SetAliasName',TypeInfo(_T45),[TypeInfo(String)],  getVMTProcAddr('TSQLVAR','SetAliasName',48));


//RegRegisterMethod(TSQLVAR,'SetOwnName',TypeInfo(_T46),[TypeInfo(String)], pointer(52));
RegRegisterMethod(TSQLVAR,'SetOwnName',TypeInfo(_T46),[TypeInfo(String)],  getVMTProcAddr('TSQLVAR','SetOwnName',52));


//RegRegisterMethod(TSQLVAR,'SetRelName',TypeInfo(_T47),[TypeInfo(String)], pointer(56));
RegRegisterMethod(TSQLVAR,'SetRelName',TypeInfo(_T47),[TypeInfo(String)],  getVMTProcAddr('TSQLVAR','SetRelName',56));


//RegRegisterMethod(TSQLVAR,'SetSqlName',TypeInfo(_T48),[TypeInfo(String)], pointer(60));
RegRegisterMethod(TSQLVAR,'SetSqlName',TypeInfo(_T48),[TypeInfo(String)],  getVMTProcAddr('TSQLVAR','SetSqlName',60));


//RegRegisterMethod(TSQLVAR,'SetSqlInd',TypeInfo(_T50),[TypeInfoPointer], pointer(68));
RegRegisterMethod(TSQLVAR,'SetSqlInd',TypeInfo(_T50),[TypeInfoPointer],  getVMTProcAddr('TSQLVAR','SetSqlInd',68));


//RegRegisterMethod(TSQLVAR,'SetSqlLen',TypeInfo(_T51),[TypeInfo(Short)], pointer(72));
RegRegisterMethod(TSQLVAR,'SetSqlLen',TypeInfo(_T51),[TypeInfo(Short)],  getVMTProcAddr('TSQLVAR','SetSqlLen',72));


//RegRegisterMethod(TSQLVAR,'SetSqlPrecision',TypeInfo(_T52),[TypeInfo(Short)], pointer(76));
RegRegisterMethod(TSQLVAR,'SetSqlPrecision',TypeInfo(_T52),[TypeInfo(Short)],  getVMTProcAddr('TSQLVAR','SetSqlPrecision',76));


//RegRegisterMethod(TSQLVAR,'SetSqlScale',TypeInfo(_T53),[TypeInfo(Short)], pointer(80));
RegRegisterMethod(TSQLVAR,'SetSqlScale',TypeInfo(_T53),[TypeInfo(Short)],  getVMTProcAddr('TSQLVAR','SetSqlScale',80));


//RegRegisterMethod(TSQLVAR,'SetSqlSubtype',TypeInfo(_T54),[TypeInfo(Short)], pointer(84));
RegRegisterMethod(TSQLVAR,'SetSqlSubtype',TypeInfo(_T54),[TypeInfo(Short)],  getVMTProcAddr('TSQLVAR','SetSqlSubtype',84));


//RegRegisterMethod(TSQLVAR,'SetSqlType',TypeInfo(_T55),[TypeInfo(Short)], pointer(88));
RegRegisterMethod(TSQLVAR,'SetSqlType',TypeInfo(_T55),[TypeInfo(Short)],  getVMTProcAddr('TSQLVAR','SetSqlType',88));


//RegRegisterMethod(TSQLVAR,'SetSQLVAR',TypeInfo(_T56),[TypeInfoPointer], pointer(92));
RegRegisterMethod(TSQLVAR,'SetSQLVAR',TypeInfo(_T56),[TypeInfoPointer],  getVMTProcAddr('TSQLVAR','SetSQLVAR',92));


//RegRegisterMethod(TSQLVAR,'SetDataSize',TypeInfo(_T57),[TypeInfo(Integer),TypeInfo(Integer)], pointer(96));
RegRegisterMethod(TSQLVAR,'SetDataSize',TypeInfo(_T57),[TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TSQLVAR','SetDataSize',96));


//RegRegisterMethod(TSQLVAR,'SetIndSize',TypeInfo(_T58),[TypeInfo(Integer),TypeInfo(Integer)], pointer(100));
RegRegisterMethod(TSQLVAR,'SetIndSize',TypeInfo(_T58),[TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TSQLVAR','SetIndSize',100));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegRegisterMethod(TSQLVAR,'SetSqlData',TypeInfo(_T49),[
TypeInfoPChar], pointer(64))}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
