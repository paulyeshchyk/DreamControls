{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit DDEML_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  Types,
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  DDEml;
function ConvertCONVCONTEXTToVariant(var R : CONVCONTEXT) : OleVariant;
function ConvertVariantToCONVCONTEXT(const V : OleVariant) : CONVCONTEXT;
function ConvertCONVINFOToVariant(var R : CONVINFO) : OleVariant;
function ConvertVariantToCONVINFO(const V : OleVariant) : CONVINFO;
function ConvertDDEML_MSG_HOOK_DATAToVariant(var R : DDEML_MSG_HOOK_DATA) : OleVariant;
function ConvertVariantToDDEML_MSG_HOOK_DATA(const V : OleVariant) : DDEML_MSG_HOOK_DATA;
function ConvertHSZPAIRToVariant(var R : HSZPAIR) : OleVariant;
function ConvertVariantToHSZPAIR(const V : OleVariant) : HSZPAIR;
function ConvertMONCBSTRUCTToVariant(var R : MONCBSTRUCT) : OleVariant;
function ConvertVariantToMONCBSTRUCT(const V : OleVariant) : MONCBSTRUCT;
function ConvertMONCONVSTRUCTToVariant(var R : MONCONVSTRUCT) : OleVariant;
function ConvertVariantToMONCONVSTRUCT(const V : OleVariant) : MONCONVSTRUCT;
function ConvertMONERRSTRUCTToVariant(var R : MONERRSTRUCT) : OleVariant;
function ConvertVariantToMONERRSTRUCT(const V : OleVariant) : MONERRSTRUCT;
function ConvertMONHSZSTRUCTToVariant(var R : MONHSZSTRUCT) : OleVariant;
function ConvertVariantToMONHSZSTRUCT(const V : OleVariant) : MONHSZSTRUCT;
function ConvertMONHSZSTRUCTAToVariant(var R : MONHSZSTRUCTA) : OleVariant;
function ConvertVariantToMONHSZSTRUCTA(const V : OleVariant) : MONHSZSTRUCTA;
function ConvertMONHSZSTRUCTWToVariant(var R : MONHSZSTRUCTW) : OleVariant;
function ConvertVariantToMONHSZSTRUCTW(const V : OleVariant) : MONHSZSTRUCTW;
function ConvertMONLINKSTRUCTToVariant(var R : MONLINKSTRUCT) : OleVariant;
function ConvertVariantToMONLINKSTRUCT(const V : OleVariant) : MONLINKSTRUCT;
function ConvertMONMSGSTRUCTToVariant(var R : MONMSGSTRUCT) : OleVariant;
function ConvertVariantToMONMSGSTRUCT(const V : OleVariant) : MONMSGSTRUCT;
function ConverttagCONVCONTEXTToVariant(var R : tagCONVCONTEXT) : OleVariant;
function ConvertVariantTotagCONVCONTEXT(const V : OleVariant) : tagCONVCONTEXT;
function ConverttagCONVINFOToVariant(var R : tagCONVINFO) : OleVariant;
function ConvertVariantTotagCONVINFO(const V : OleVariant) : tagCONVINFO;
function ConverttagDDEML_MSG_HOOK_DATAToVariant(var R : tagDDEML_MSG_HOOK_DATA) : OleVariant;
function ConvertVariantTotagDDEML_MSG_HOOK_DATA(const V : OleVariant) : tagDDEML_MSG_HOOK_DATA;
function ConverttagHSZPAIRToVariant(var R : tagHSZPAIR) : OleVariant;
function ConvertVariantTotagHSZPAIR(const V : OleVariant) : tagHSZPAIR;
function ConverttagMONCBSTRUCTToVariant(var R : tagMONCBSTRUCT) : OleVariant;
function ConvertVariantTotagMONCBSTRUCT(const V : OleVariant) : tagMONCBSTRUCT;
function ConverttagMONCONVSTRUCTToVariant(var R : tagMONCONVSTRUCT) : OleVariant;
function ConvertVariantTotagMONCONVSTRUCT(const V : OleVariant) : tagMONCONVSTRUCT;
function ConverttagMONERRSTRUCTToVariant(var R : tagMONERRSTRUCT) : OleVariant;
function ConvertVariantTotagMONERRSTRUCT(const V : OleVariant) : tagMONERRSTRUCT;
function ConverttagMONHSZSTRUCTToVariant(var R : tagMONHSZSTRUCT) : OleVariant;
function ConvertVariantTotagMONHSZSTRUCT(const V : OleVariant) : tagMONHSZSTRUCT;
function ConverttagMONHSZSTRUCTAToVariant(var R : tagMONHSZSTRUCTA) : OleVariant;
function ConvertVariantTotagMONHSZSTRUCTA(const V : OleVariant) : tagMONHSZSTRUCTA;
function ConverttagMONHSZSTRUCTWToVariant(var R : tagMONHSZSTRUCTW) : OleVariant;
function ConvertVariantTotagMONHSZSTRUCTW(const V : OleVariant) : tagMONHSZSTRUCTW;
function ConverttagMONLINKSTRUCTToVariant(var R : tagMONLINKSTRUCT) : OleVariant;
function ConvertVariantTotagMONLINKSTRUCT(const V : OleVariant) : tagMONLINKSTRUCT;
function ConverttagMONMSGSTRUCTToVariant(var R : tagMONMSGSTRUCT) : OleVariant;
function ConvertVariantTotagMONMSGSTRUCT(const V : OleVariant) : tagMONMSGSTRUCT;
function ConvertTConvContextToVariant(var R : TConvContext) : OleVariant;
function ConvertVariantToTConvContext(const V : OleVariant) : TConvContext;
function ConvertTConvInfoToVariant(var R : TConvInfo) : OleVariant;
function ConvertVariantToTConvInfo(const V : OleVariant) : TConvInfo;
function ConvertTDdemlMsgHookDataToVariant(var R : TDdemlMsgHookData) : OleVariant;
function ConvertVariantToTDdemlMsgHookData(const V : OleVariant) : TDdemlMsgHookData;
function ConvertTHSZPairToVariant(var R : THSZPair) : OleVariant;
function ConvertVariantToTHSZPair(const V : OleVariant) : THSZPair;
function ConvertTMonCBStructToVariant(var R : TMonCBStruct) : OleVariant;
function ConvertVariantToTMonCBStruct(const V : OleVariant) : TMonCBStruct;
function ConvertTMonConvStructToVariant(var R : TMonConvStruct) : OleVariant;
function ConvertVariantToTMonConvStruct(const V : OleVariant) : TMonConvStruct;
function ConvertTMonErrStructToVariant(var R : TMonErrStruct) : OleVariant;
function ConvertVariantToTMonErrStruct(const V : OleVariant) : TMonErrStruct;
function ConvertTMonHSZStructToVariant(var R : TMonHSZStruct) : OleVariant;
function ConvertVariantToTMonHSZStruct(const V : OleVariant) : TMonHSZStruct;
function ConvertTMonHSZStructAToVariant(var R : TMonHSZStructA) : OleVariant;
function ConvertVariantToTMonHSZStructA(const V : OleVariant) : TMonHSZStructA;
function ConvertTMonHSZStructWToVariant(var R : TMonHSZStructW) : OleVariant;
function ConvertVariantToTMonHSZStructW(const V : OleVariant) : TMonHSZStructW;
function ConvertTMonLinkStructToVariant(var R : TMonLinkStruct) : OleVariant;
function ConvertVariantToTMonLinkStruct(const V : OleVariant) : TMonLinkStruct;
function ConvertTMonMsgStructToVariant(var R : TMonMsgStruct) : OleVariant;
function ConvertVariantToTMonMsgStruct(const V : OleVariant) : TMonMsgStruct;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __CONVCONTEXT__Wrapper = class(TDCRecordWrapper)
private
fR : CONVCONTEXT;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : UINT);
function getcb : UINT;
property cb : UINT read getcb write setcb;
procedure setwFlags(const val : UINT);
function getwFlags : UINT;
property wFlags : UINT read getwFlags write setwFlags;
procedure setwCountryID(const val : UINT);
function getwCountryID : UINT;
property wCountryID : UINT read getwCountryID write setwCountryID;
procedure setiCodePage(const val : Integer);
function getiCodePage : Integer;
property iCodePage : Integer read getiCodePage write setiCodePage;
procedure setdwLangID(const val : DWORD);
function getdwLangID : DWORD;
property dwLangID : DWORD read getdwLangID write setdwLangID;
procedure setdwSecurity(const val : DWORD);
function getdwSecurity : DWORD;
property dwSecurity : DWORD read getdwSecurity write setdwSecurity;
end;
type __CONVINFO__Wrapper = class(TDCRecordWrapper)
private
fR : CONVINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : DWORD);
function getcb : DWORD;
property cb : DWORD read getcb write setcb;
procedure sethUser(const val : DWORD);
function gethUser : DWORD;
property hUser : DWORD read gethUser write sethUser;
procedure sethConvPartner(const val : HConv);
function gethConvPartner : HConv;
property hConvPartner : HConv read gethConvPartner write sethConvPartner;
procedure sethszSvcPartner(const val : HSz);
function gethszSvcPartner : HSz;
property hszSvcPartner : HSz read gethszSvcPartner write sethszSvcPartner;
procedure sethszServiceReq(const val : HSz);
function gethszServiceReq : HSz;
property hszServiceReq : HSz read gethszServiceReq write sethszServiceReq;
procedure sethszTopic(const val : HSz);
function gethszTopic : HSz;
property hszTopic : HSz read gethszTopic write sethszTopic;
procedure sethszItem(const val : HSz);
function gethszItem : HSz;
property hszItem : HSz read gethszItem write sethszItem;
procedure setwFmt(const val : UINT);
function getwFmt : UINT;
property wFmt : UINT read getwFmt write setwFmt;
procedure setwType(const val : UINT);
function getwType : UINT;
property wType : UINT read getwType write setwType;
procedure setwStatus(const val : UINT);
function getwStatus : UINT;
property wStatus : UINT read getwStatus write setwStatus;
procedure setwConvst(const val : UINT);
function getwConvst : UINT;
property wConvst : UINT read getwConvst write setwConvst;
procedure setwLastError(const val : UINT);
function getwLastError : UINT;
property wLastError : UINT read getwLastError write setwLastError;
procedure setHConvList(const val : HConvList);
function getHConvList : HConvList;
property HConvList : HConvList read getHConvList write setHConvList;
end;
type __DDEML_MSG_HOOK_DATA__Wrapper = class(TDCRecordWrapper)
private
fR : DDEML_MSG_HOOK_DATA;
public
function GetRecordPtr : pointer; override;
published
procedure setuiLo(const val : UINT);
function getuiLo : UINT;
property uiLo : UINT read getuiLo write setuiLo;
procedure setuiHi(const val : UINT);
function getuiHi : UINT;
property uiHi : UINT read getuiHi write setuiHi;
procedure setcbData(const val : DWORD);
function getcbData : DWORD;
property cbData : DWORD read getcbData write setcbData;
end;
type __HSZPAIR__Wrapper = class(TDCRecordWrapper)
private
fR : HSZPAIR;
public
function GetRecordPtr : pointer; override;
published
procedure sethszSvc(const val : HSz);
function gethszSvc : HSz;
property hszSvc : HSz read gethszSvc write sethszSvc;
procedure sethszTopic(const val : HSz);
function gethszTopic : HSz;
property hszTopic : HSz read gethszTopic write sethszTopic;
end;
type __MONCBSTRUCT__Wrapper = class(TDCRecordWrapper)
private
fR : MONCBSTRUCT;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : UINT);
function getcb : UINT;
property cb : UINT read getcb write setcb;
procedure setdwTime(const val : DWORD);
function getdwTime : DWORD;
property dwTime : DWORD read getdwTime write setdwTime;
procedure sethTask(const val : THandle);
function gethTask : THandle;
property hTask : THandle read gethTask write sethTask;
procedure setdwRet(const val : DWORD);
function getdwRet : DWORD;
property dwRet : DWORD read getdwRet write setdwRet;
procedure setwType(const val : UINT);
function getwType : UINT;
property wType : UINT read getwType write setwType;
procedure setwFmt(const val : UINT);
function getwFmt : UINT;
property wFmt : UINT read getwFmt write setwFmt;
procedure setHConv(const val : HConv);
function getHConv : HConv;
property HConv : HConv read getHConv write setHConv;
procedure sethsz1(const val : HSz);
function gethsz1 : HSz;
property hsz1 : HSz read gethsz1 write sethsz1;
procedure sethsz2(const val : HSz);
function gethsz2 : HSz;
property hsz2 : HSz read gethsz2 write sethsz2;
procedure sethData(const val : HDDEData);
function gethData : HDDEData;
property hData : HDDEData read gethData write sethData;
procedure setdwData1(const val : DWORD);
function getdwData1 : DWORD;
property dwData1 : DWORD read getdwData1 write setdwData1;
procedure setdwData2(const val : DWORD);
function getdwData2 : DWORD;
property dwData2 : DWORD read getdwData2 write setdwData2;
procedure setcbData(const val : DWORD);
function getcbData : DWORD;
property cbData : DWORD read getcbData write setcbData;
end;
type __MONCONVSTRUCT__Wrapper = class(TDCRecordWrapper)
private
fR : MONCONVSTRUCT;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : UINT);
function getcb : UINT;
property cb : UINT read getcb write setcb;
procedure setfConnect(const val : BOOL);
function getfConnect : BOOL;
property fConnect : BOOL read getfConnect write setfConnect;
procedure setdwTime(const val : DWORD);
function getdwTime : DWORD;
property dwTime : DWORD read getdwTime write setdwTime;
procedure sethTask(const val : THandle);
function gethTask : THandle;
property hTask : THandle read gethTask write sethTask;
procedure sethszSvc(const val : HSz);
function gethszSvc : HSz;
property hszSvc : HSz read gethszSvc write sethszSvc;
procedure sethszTopic(const val : HSz);
function gethszTopic : HSz;
property hszTopic : HSz read gethszTopic write sethszTopic;
procedure sethConvClient(const val : HConv);
function gethConvClient : HConv;
property hConvClient : HConv read gethConvClient write sethConvClient;
procedure sethConvServer(const val : HConv);
function gethConvServer : HConv;
property hConvServer : HConv read gethConvServer write sethConvServer;
end;
type __MONERRSTRUCT__Wrapper = class(TDCRecordWrapper)
private
fR : MONERRSTRUCT;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : UINT);
function getcb : UINT;
property cb : UINT read getcb write setcb;
procedure setwLastError(const val : UINT);
function getwLastError : UINT;
property wLastError : UINT read getwLastError write setwLastError;
procedure setdwTime(const val : DWORD);
function getdwTime : DWORD;
property dwTime : DWORD read getdwTime write setdwTime;
procedure sethTask(const val : THandle);
function gethTask : THandle;
property hTask : THandle read gethTask write sethTask;
end;
type __MONHSZSTRUCT__Wrapper = class(TDCRecordWrapper)
private
fR : MONHSZSTRUCT;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : UINT);
function getcb : UINT;
property cb : UINT read getcb write setcb;
procedure setfsAction(const val : BOOL);
function getfsAction : BOOL;
property fsAction : BOOL read getfsAction write setfsAction;
procedure setdwTime(const val : DWORD);
function getdwTime : DWORD;
property dwTime : DWORD read getdwTime write setdwTime;
procedure setHSz(const val : HSz);
function getHSz : HSz;
property HSz : HSz read getHSz write setHSz;
procedure sethTask(const val : THandle);
function gethTask : THandle;
property hTask : THandle read gethTask write sethTask;
procedure setwReserved(const val : UINT);
function getwReserved : UINT;
property wReserved : UINT read getwReserved write setwReserved;
end;
type __MONHSZSTRUCTA__Wrapper = class(TDCRecordWrapper)
private
fR : MONHSZSTRUCTA;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : UINT);
function getcb : UINT;
property cb : UINT read getcb write setcb;
procedure setfsAction(const val : BOOL);
function getfsAction : BOOL;
property fsAction : BOOL read getfsAction write setfsAction;
procedure setdwTime(const val : DWORD);
function getdwTime : DWORD;
property dwTime : DWORD read getdwTime write setdwTime;
procedure setHSz(const val : HSz);
function getHSz : HSz;
property HSz : HSz read getHSz write setHSz;
procedure sethTask(const val : THandle);
function gethTask : THandle;
property hTask : THandle read gethTask write sethTask;
procedure setwReserved(const val : UINT);
function getwReserved : UINT;
property wReserved : UINT read getwReserved write setwReserved;
end;
type __MONHSZSTRUCTW__Wrapper = class(TDCRecordWrapper)
private
fR : MONHSZSTRUCTW;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : UINT);
function getcb : UINT;
property cb : UINT read getcb write setcb;
procedure setfsAction(const val : BOOL);
function getfsAction : BOOL;
property fsAction : BOOL read getfsAction write setfsAction;
procedure setdwTime(const val : DWORD);
function getdwTime : DWORD;
property dwTime : DWORD read getdwTime write setdwTime;
procedure setHSz(const val : HSz);
function getHSz : HSz;
property HSz : HSz read getHSz write setHSz;
procedure sethTask(const val : THandle);
function gethTask : THandle;
property hTask : THandle read gethTask write sethTask;
procedure setwReserved(const val : UINT);
function getwReserved : UINT;
property wReserved : UINT read getwReserved write setwReserved;
end;
type __MONLINKSTRUCT__Wrapper = class(TDCRecordWrapper)
private
fR : MONLINKSTRUCT;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : UINT);
function getcb : UINT;
property cb : UINT read getcb write setcb;
procedure setdwTime(const val : DWORD);
function getdwTime : DWORD;
property dwTime : DWORD read getdwTime write setdwTime;
procedure sethTask(const val : THandle);
function gethTask : THandle;
property hTask : THandle read gethTask write sethTask;
procedure setfEstablished(const val : BOOL);
function getfEstablished : BOOL;
property fEstablished : BOOL read getfEstablished write setfEstablished;
procedure setfNoData(const val : BOOL);
function getfNoData : BOOL;
property fNoData : BOOL read getfNoData write setfNoData;
procedure sethszSvc(const val : HSz);
function gethszSvc : HSz;
property hszSvc : HSz read gethszSvc write sethszSvc;
procedure sethszTopic(const val : HSz);
function gethszTopic : HSz;
property hszTopic : HSz read gethszTopic write sethszTopic;
procedure sethszItem(const val : HSz);
function gethszItem : HSz;
property hszItem : HSz read gethszItem write sethszItem;
procedure setwFmt(const val : UINT);
function getwFmt : UINT;
property wFmt : UINT read getwFmt write setwFmt;
procedure setfServer(const val : BOOL);
function getfServer : BOOL;
property fServer : BOOL read getfServer write setfServer;
procedure sethConvServer(const val : HConv);
function gethConvServer : HConv;
property hConvServer : HConv read gethConvServer write sethConvServer;
procedure sethConvClient(const val : HConv);
function gethConvClient : HConv;
property hConvClient : HConv read gethConvClient write sethConvClient;
end;
type __MONMSGSTRUCT__Wrapper = class(TDCRecordWrapper)
private
fR : MONMSGSTRUCT;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : UINT);
function getcb : UINT;
property cb : UINT read getcb write setcb;
procedure setdwTime(const val : DWORD);
function getdwTime : DWORD;
property dwTime : DWORD read getdwTime write setdwTime;
procedure sethTask(const val : THandle);
function gethTask : THandle;
property hTask : THandle read gethTask write sethTask;
procedure setwMsg(const val : UINT);
function getwMsg : UINT;
property wMsg : UINT read getwMsg write setwMsg;
procedure setwParam(const val : wParam);
function getwParam : wParam;
property wParam : wParam read getwParam write setwParam;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __tagCONVCONTEXT__Wrapper = class(TDCRecordWrapper)
private
fR : tagCONVCONTEXT;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : UINT);
function getcb : UINT;
property cb : UINT read getcb write setcb;
procedure setwFlags(const val : UINT);
function getwFlags : UINT;
property wFlags : UINT read getwFlags write setwFlags;
procedure setwCountryID(const val : UINT);
function getwCountryID : UINT;
property wCountryID : UINT read getwCountryID write setwCountryID;
procedure setiCodePage(const val : Integer);
function getiCodePage : Integer;
property iCodePage : Integer read getiCodePage write setiCodePage;
procedure setdwLangID(const val : DWORD);
function getdwLangID : DWORD;
property dwLangID : DWORD read getdwLangID write setdwLangID;
procedure setdwSecurity(const val : DWORD);
function getdwSecurity : DWORD;
property dwSecurity : DWORD read getdwSecurity write setdwSecurity;
end;
type __tagCONVINFO__Wrapper = class(TDCRecordWrapper)
private
fR : tagCONVINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : DWORD);
function getcb : DWORD;
property cb : DWORD read getcb write setcb;
procedure sethUser(const val : DWORD);
function gethUser : DWORD;
property hUser : DWORD read gethUser write sethUser;
procedure sethConvPartner(const val : HConv);
function gethConvPartner : HConv;
property hConvPartner : HConv read gethConvPartner write sethConvPartner;
procedure sethszSvcPartner(const val : HSz);
function gethszSvcPartner : HSz;
property hszSvcPartner : HSz read gethszSvcPartner write sethszSvcPartner;
procedure sethszServiceReq(const val : HSz);
function gethszServiceReq : HSz;
property hszServiceReq : HSz read gethszServiceReq write sethszServiceReq;
procedure sethszTopic(const val : HSz);
function gethszTopic : HSz;
property hszTopic : HSz read gethszTopic write sethszTopic;
procedure sethszItem(const val : HSz);
function gethszItem : HSz;
property hszItem : HSz read gethszItem write sethszItem;
procedure setwFmt(const val : UINT);
function getwFmt : UINT;
property wFmt : UINT read getwFmt write setwFmt;
procedure setwType(const val : UINT);
function getwType : UINT;
property wType : UINT read getwType write setwType;
procedure setwStatus(const val : UINT);
function getwStatus : UINT;
property wStatus : UINT read getwStatus write setwStatus;
procedure setwConvst(const val : UINT);
function getwConvst : UINT;
property wConvst : UINT read getwConvst write setwConvst;
procedure setwLastError(const val : UINT);
function getwLastError : UINT;
property wLastError : UINT read getwLastError write setwLastError;
procedure setHConvList(const val : HConvList);
function getHConvList : HConvList;
property HConvList : HConvList read getHConvList write setHConvList;
end;
type __tagDDEML_MSG_HOOK_DATA__Wrapper = class(TDCRecordWrapper)
private
fR : tagDDEML_MSG_HOOK_DATA;
public
function GetRecordPtr : pointer; override;
published
procedure setuiLo(const val : UINT);
function getuiLo : UINT;
property uiLo : UINT read getuiLo write setuiLo;
procedure setuiHi(const val : UINT);
function getuiHi : UINT;
property uiHi : UINT read getuiHi write setuiHi;
procedure setcbData(const val : DWORD);
function getcbData : DWORD;
property cbData : DWORD read getcbData write setcbData;
end;
type __tagHSZPAIR__Wrapper = class(TDCRecordWrapper)
private
fR : tagHSZPAIR;
public
function GetRecordPtr : pointer; override;
published
procedure sethszSvc(const val : HSz);
function gethszSvc : HSz;
property hszSvc : HSz read gethszSvc write sethszSvc;
procedure sethszTopic(const val : HSz);
function gethszTopic : HSz;
property hszTopic : HSz read gethszTopic write sethszTopic;
end;
type __tagMONCBSTRUCT__Wrapper = class(TDCRecordWrapper)
private
fR : tagMONCBSTRUCT;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : UINT);
function getcb : UINT;
property cb : UINT read getcb write setcb;
procedure setdwTime(const val : DWORD);
function getdwTime : DWORD;
property dwTime : DWORD read getdwTime write setdwTime;
procedure sethTask(const val : THandle);
function gethTask : THandle;
property hTask : THandle read gethTask write sethTask;
procedure setdwRet(const val : DWORD);
function getdwRet : DWORD;
property dwRet : DWORD read getdwRet write setdwRet;
procedure setwType(const val : UINT);
function getwType : UINT;
property wType : UINT read getwType write setwType;
procedure setwFmt(const val : UINT);
function getwFmt : UINT;
property wFmt : UINT read getwFmt write setwFmt;
procedure setHConv(const val : HConv);
function getHConv : HConv;
property HConv : HConv read getHConv write setHConv;
procedure sethsz1(const val : HSz);
function gethsz1 : HSz;
property hsz1 : HSz read gethsz1 write sethsz1;
procedure sethsz2(const val : HSz);
function gethsz2 : HSz;
property hsz2 : HSz read gethsz2 write sethsz2;
procedure sethData(const val : HDDEData);
function gethData : HDDEData;
property hData : HDDEData read gethData write sethData;
procedure setdwData1(const val : DWORD);
function getdwData1 : DWORD;
property dwData1 : DWORD read getdwData1 write setdwData1;
procedure setdwData2(const val : DWORD);
function getdwData2 : DWORD;
property dwData2 : DWORD read getdwData2 write setdwData2;
procedure setcbData(const val : DWORD);
function getcbData : DWORD;
property cbData : DWORD read getcbData write setcbData;
end;
type __tagMONCONVSTRUCT__Wrapper = class(TDCRecordWrapper)
private
fR : tagMONCONVSTRUCT;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : UINT);
function getcb : UINT;
property cb : UINT read getcb write setcb;
procedure setfConnect(const val : BOOL);
function getfConnect : BOOL;
property fConnect : BOOL read getfConnect write setfConnect;
procedure setdwTime(const val : DWORD);
function getdwTime : DWORD;
property dwTime : DWORD read getdwTime write setdwTime;
procedure sethTask(const val : THandle);
function gethTask : THandle;
property hTask : THandle read gethTask write sethTask;
procedure sethszSvc(const val : HSz);
function gethszSvc : HSz;
property hszSvc : HSz read gethszSvc write sethszSvc;
procedure sethszTopic(const val : HSz);
function gethszTopic : HSz;
property hszTopic : HSz read gethszTopic write sethszTopic;
procedure sethConvClient(const val : HConv);
function gethConvClient : HConv;
property hConvClient : HConv read gethConvClient write sethConvClient;
procedure sethConvServer(const val : HConv);
function gethConvServer : HConv;
property hConvServer : HConv read gethConvServer write sethConvServer;
end;
type __tagMONERRSTRUCT__Wrapper = class(TDCRecordWrapper)
private
fR : tagMONERRSTRUCT;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : UINT);
function getcb : UINT;
property cb : UINT read getcb write setcb;
procedure setwLastError(const val : UINT);
function getwLastError : UINT;
property wLastError : UINT read getwLastError write setwLastError;
procedure setdwTime(const val : DWORD);
function getdwTime : DWORD;
property dwTime : DWORD read getdwTime write setdwTime;
procedure sethTask(const val : THandle);
function gethTask : THandle;
property hTask : THandle read gethTask write sethTask;
end;
type __tagMONHSZSTRUCT__Wrapper = class(TDCRecordWrapper)
private
fR : tagMONHSZSTRUCT;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : UINT);
function getcb : UINT;
property cb : UINT read getcb write setcb;
procedure setfsAction(const val : BOOL);
function getfsAction : BOOL;
property fsAction : BOOL read getfsAction write setfsAction;
procedure setdwTime(const val : DWORD);
function getdwTime : DWORD;
property dwTime : DWORD read getdwTime write setdwTime;
procedure setHSz(const val : HSz);
function getHSz : HSz;
property HSz : HSz read getHSz write setHSz;
procedure sethTask(const val : THandle);
function gethTask : THandle;
property hTask : THandle read gethTask write sethTask;
procedure setwReserved(const val : UINT);
function getwReserved : UINT;
property wReserved : UINT read getwReserved write setwReserved;
end;
type __tagMONHSZSTRUCTA__Wrapper = class(TDCRecordWrapper)
private
fR : tagMONHSZSTRUCTA;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : UINT);
function getcb : UINT;
property cb : UINT read getcb write setcb;
procedure setfsAction(const val : BOOL);
function getfsAction : BOOL;
property fsAction : BOOL read getfsAction write setfsAction;
procedure setdwTime(const val : DWORD);
function getdwTime : DWORD;
property dwTime : DWORD read getdwTime write setdwTime;
procedure setHSz(const val : HSz);
function getHSz : HSz;
property HSz : HSz read getHSz write setHSz;
procedure sethTask(const val : THandle);
function gethTask : THandle;
property hTask : THandle read gethTask write sethTask;
procedure setwReserved(const val : UINT);
function getwReserved : UINT;
property wReserved : UINT read getwReserved write setwReserved;
end;
type __tagMONHSZSTRUCTW__Wrapper = class(TDCRecordWrapper)
private
fR : tagMONHSZSTRUCTW;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : UINT);
function getcb : UINT;
property cb : UINT read getcb write setcb;
procedure setfsAction(const val : BOOL);
function getfsAction : BOOL;
property fsAction : BOOL read getfsAction write setfsAction;
procedure setdwTime(const val : DWORD);
function getdwTime : DWORD;
property dwTime : DWORD read getdwTime write setdwTime;
procedure setHSz(const val : HSz);
function getHSz : HSz;
property HSz : HSz read getHSz write setHSz;
procedure sethTask(const val : THandle);
function gethTask : THandle;
property hTask : THandle read gethTask write sethTask;
procedure setwReserved(const val : UINT);
function getwReserved : UINT;
property wReserved : UINT read getwReserved write setwReserved;
end;
type __tagMONLINKSTRUCT__Wrapper = class(TDCRecordWrapper)
private
fR : tagMONLINKSTRUCT;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : UINT);
function getcb : UINT;
property cb : UINT read getcb write setcb;
procedure setdwTime(const val : DWORD);
function getdwTime : DWORD;
property dwTime : DWORD read getdwTime write setdwTime;
procedure sethTask(const val : THandle);
function gethTask : THandle;
property hTask : THandle read gethTask write sethTask;
procedure setfEstablished(const val : BOOL);
function getfEstablished : BOOL;
property fEstablished : BOOL read getfEstablished write setfEstablished;
procedure setfNoData(const val : BOOL);
function getfNoData : BOOL;
property fNoData : BOOL read getfNoData write setfNoData;
procedure sethszSvc(const val : HSz);
function gethszSvc : HSz;
property hszSvc : HSz read gethszSvc write sethszSvc;
procedure sethszTopic(const val : HSz);
function gethszTopic : HSz;
property hszTopic : HSz read gethszTopic write sethszTopic;
procedure sethszItem(const val : HSz);
function gethszItem : HSz;
property hszItem : HSz read gethszItem write sethszItem;
procedure setwFmt(const val : UINT);
function getwFmt : UINT;
property wFmt : UINT read getwFmt write setwFmt;
procedure setfServer(const val : BOOL);
function getfServer : BOOL;
property fServer : BOOL read getfServer write setfServer;
procedure sethConvServer(const val : HConv);
function gethConvServer : HConv;
property hConvServer : HConv read gethConvServer write sethConvServer;
procedure sethConvClient(const val : HConv);
function gethConvClient : HConv;
property hConvClient : HConv read gethConvClient write sethConvClient;
end;
type __tagMONMSGSTRUCT__Wrapper = class(TDCRecordWrapper)
private
fR : tagMONMSGSTRUCT;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : UINT);
function getcb : UINT;
property cb : UINT read getcb write setcb;
procedure setdwTime(const val : DWORD);
function getdwTime : DWORD;
property dwTime : DWORD read getdwTime write setdwTime;
procedure sethTask(const val : THandle);
function gethTask : THandle;
property hTask : THandle read gethTask write sethTask;
procedure setwMsg(const val : UINT);
function getwMsg : UINT;
property wMsg : UINT read getwMsg write setwMsg;
procedure setwParam(const val : wParam);
function getwParam : wParam;
property wParam : wParam read getwParam write setwParam;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type __TConvContext__Wrapper = class(TDCRecordWrapper)
private
fR : TConvContext;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : UINT);
function getcb : UINT;
property cb : UINT read getcb write setcb;
procedure setwFlags(const val : UINT);
function getwFlags : UINT;
property wFlags : UINT read getwFlags write setwFlags;
procedure setwCountryID(const val : UINT);
function getwCountryID : UINT;
property wCountryID : UINT read getwCountryID write setwCountryID;
procedure setiCodePage(const val : Integer);
function getiCodePage : Integer;
property iCodePage : Integer read getiCodePage write setiCodePage;
procedure setdwLangID(const val : DWORD);
function getdwLangID : DWORD;
property dwLangID : DWORD read getdwLangID write setdwLangID;
procedure setdwSecurity(const val : DWORD);
function getdwSecurity : DWORD;
property dwSecurity : DWORD read getdwSecurity write setdwSecurity;
end;
type __TConvInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TConvInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : DWORD);
function getcb : DWORD;
property cb : DWORD read getcb write setcb;
procedure sethUser(const val : DWORD);
function gethUser : DWORD;
property hUser : DWORD read gethUser write sethUser;
procedure sethConvPartner(const val : HConv);
function gethConvPartner : HConv;
property hConvPartner : HConv read gethConvPartner write sethConvPartner;
procedure sethszSvcPartner(const val : HSz);
function gethszSvcPartner : HSz;
property hszSvcPartner : HSz read gethszSvcPartner write sethszSvcPartner;
procedure sethszServiceReq(const val : HSz);
function gethszServiceReq : HSz;
property hszServiceReq : HSz read gethszServiceReq write sethszServiceReq;
procedure sethszTopic(const val : HSz);
function gethszTopic : HSz;
property hszTopic : HSz read gethszTopic write sethszTopic;
procedure sethszItem(const val : HSz);
function gethszItem : HSz;
property hszItem : HSz read gethszItem write sethszItem;
procedure setwFmt(const val : UINT);
function getwFmt : UINT;
property wFmt : UINT read getwFmt write setwFmt;
procedure setwType(const val : UINT);
function getwType : UINT;
property wType : UINT read getwType write setwType;
procedure setwStatus(const val : UINT);
function getwStatus : UINT;
property wStatus : UINT read getwStatus write setwStatus;
procedure setwConvst(const val : UINT);
function getwConvst : UINT;
property wConvst : UINT read getwConvst write setwConvst;
procedure setwLastError(const val : UINT);
function getwLastError : UINT;
property wLastError : UINT read getwLastError write setwLastError;
procedure setHConvList(const val : HConvList);
function getHConvList : HConvList;
property HConvList : HConvList read getHConvList write setHConvList;
end;
type __TDdemlMsgHookData__Wrapper = class(TDCRecordWrapper)
private
fR : TDdemlMsgHookData;
public
function GetRecordPtr : pointer; override;
published
procedure setuiLo(const val : UINT);
function getuiLo : UINT;
property uiLo : UINT read getuiLo write setuiLo;
procedure setuiHi(const val : UINT);
function getuiHi : UINT;
property uiHi : UINT read getuiHi write setuiHi;
procedure setcbData(const val : DWORD);
function getcbData : DWORD;
property cbData : DWORD read getcbData write setcbData;
end;
type __THSZPair__Wrapper = class(TDCRecordWrapper)
private
fR : THSZPair;
public
function GetRecordPtr : pointer; override;
published
procedure sethszSvc(const val : HSz);
function gethszSvc : HSz;
property hszSvc : HSz read gethszSvc write sethszSvc;
procedure sethszTopic(const val : HSz);
function gethszTopic : HSz;
property hszTopic : HSz read gethszTopic write sethszTopic;
end;
type __TMonCBStruct__Wrapper = class(TDCRecordWrapper)
private
fR : TMonCBStruct;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : UINT);
function getcb : UINT;
property cb : UINT read getcb write setcb;
procedure setdwTime(const val : DWORD);
function getdwTime : DWORD;
property dwTime : DWORD read getdwTime write setdwTime;
procedure sethTask(const val : THandle);
function gethTask : THandle;
property hTask : THandle read gethTask write sethTask;
procedure setdwRet(const val : DWORD);
function getdwRet : DWORD;
property dwRet : DWORD read getdwRet write setdwRet;
procedure setwType(const val : UINT);
function getwType : UINT;
property wType : UINT read getwType write setwType;
procedure setwFmt(const val : UINT);
function getwFmt : UINT;
property wFmt : UINT read getwFmt write setwFmt;
procedure setHConv(const val : HConv);
function getHConv : HConv;
property HConv : HConv read getHConv write setHConv;
procedure sethsz1(const val : HSz);
function gethsz1 : HSz;
property hsz1 : HSz read gethsz1 write sethsz1;
procedure sethsz2(const val : HSz);
function gethsz2 : HSz;
property hsz2 : HSz read gethsz2 write sethsz2;
procedure sethData(const val : HDDEData);
function gethData : HDDEData;
property hData : HDDEData read gethData write sethData;
procedure setdwData1(const val : DWORD);
function getdwData1 : DWORD;
property dwData1 : DWORD read getdwData1 write setdwData1;
procedure setdwData2(const val : DWORD);
function getdwData2 : DWORD;
property dwData2 : DWORD read getdwData2 write setdwData2;
procedure setcbData(const val : DWORD);
function getcbData : DWORD;
property cbData : DWORD read getcbData write setcbData;
end;
type __TMonConvStruct__Wrapper = class(TDCRecordWrapper)
private
fR : TMonConvStruct;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : UINT);
function getcb : UINT;
property cb : UINT read getcb write setcb;
procedure setfConnect(const val : BOOL);
function getfConnect : BOOL;
property fConnect : BOOL read getfConnect write setfConnect;
procedure setdwTime(const val : DWORD);
function getdwTime : DWORD;
property dwTime : DWORD read getdwTime write setdwTime;
procedure sethTask(const val : THandle);
function gethTask : THandle;
property hTask : THandle read gethTask write sethTask;
procedure sethszSvc(const val : HSz);
function gethszSvc : HSz;
property hszSvc : HSz read gethszSvc write sethszSvc;
procedure sethszTopic(const val : HSz);
function gethszTopic : HSz;
property hszTopic : HSz read gethszTopic write sethszTopic;
procedure sethConvClient(const val : HConv);
function gethConvClient : HConv;
property hConvClient : HConv read gethConvClient write sethConvClient;
procedure sethConvServer(const val : HConv);
function gethConvServer : HConv;
property hConvServer : HConv read gethConvServer write sethConvServer;
end;
type __TMonErrStruct__Wrapper = class(TDCRecordWrapper)
private
fR : TMonErrStruct;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : UINT);
function getcb : UINT;
property cb : UINT read getcb write setcb;
procedure setwLastError(const val : UINT);
function getwLastError : UINT;
property wLastError : UINT read getwLastError write setwLastError;
procedure setdwTime(const val : DWORD);
function getdwTime : DWORD;
property dwTime : DWORD read getdwTime write setdwTime;
procedure sethTask(const val : THandle);
function gethTask : THandle;
property hTask : THandle read gethTask write sethTask;
end;
type __TMonHSZStruct__Wrapper = class(TDCRecordWrapper)
private
fR : TMonHSZStruct;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : UINT);
function getcb : UINT;
property cb : UINT read getcb write setcb;
procedure setfsAction(const val : BOOL);
function getfsAction : BOOL;
property fsAction : BOOL read getfsAction write setfsAction;
procedure setdwTime(const val : DWORD);
function getdwTime : DWORD;
property dwTime : DWORD read getdwTime write setdwTime;
procedure setHSz(const val : HSz);
function getHSz : HSz;
property HSz : HSz read getHSz write setHSz;
procedure sethTask(const val : THandle);
function gethTask : THandle;
property hTask : THandle read gethTask write sethTask;
procedure setwReserved(const val : UINT);
function getwReserved : UINT;
property wReserved : UINT read getwReserved write setwReserved;
end;
type __TMonHSZStructA__Wrapper = class(TDCRecordWrapper)
private
fR : TMonHSZStructA;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : UINT);
function getcb : UINT;
property cb : UINT read getcb write setcb;
procedure setfsAction(const val : BOOL);
function getfsAction : BOOL;
property fsAction : BOOL read getfsAction write setfsAction;
procedure setdwTime(const val : DWORD);
function getdwTime : DWORD;
property dwTime : DWORD read getdwTime write setdwTime;
procedure setHSz(const val : HSz);
function getHSz : HSz;
property HSz : HSz read getHSz write setHSz;
procedure sethTask(const val : THandle);
function gethTask : THandle;
property hTask : THandle read gethTask write sethTask;
procedure setwReserved(const val : UINT);
function getwReserved : UINT;
property wReserved : UINT read getwReserved write setwReserved;
end;
type __TMonHSZStructW__Wrapper = class(TDCRecordWrapper)
private
fR : TMonHSZStructW;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : UINT);
function getcb : UINT;
property cb : UINT read getcb write setcb;
procedure setfsAction(const val : BOOL);
function getfsAction : BOOL;
property fsAction : BOOL read getfsAction write setfsAction;
procedure setdwTime(const val : DWORD);
function getdwTime : DWORD;
property dwTime : DWORD read getdwTime write setdwTime;
procedure setHSz(const val : HSz);
function getHSz : HSz;
property HSz : HSz read getHSz write setHSz;
procedure sethTask(const val : THandle);
function gethTask : THandle;
property hTask : THandle read gethTask write sethTask;
procedure setwReserved(const val : UINT);
function getwReserved : UINT;
property wReserved : UINT read getwReserved write setwReserved;
end;
type __TMonLinkStruct__Wrapper = class(TDCRecordWrapper)
private
fR : TMonLinkStruct;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : UINT);
function getcb : UINT;
property cb : UINT read getcb write setcb;
procedure setdwTime(const val : DWORD);
function getdwTime : DWORD;
property dwTime : DWORD read getdwTime write setdwTime;
procedure sethTask(const val : THandle);
function gethTask : THandle;
property hTask : THandle read gethTask write sethTask;
procedure setfEstablished(const val : BOOL);
function getfEstablished : BOOL;
property fEstablished : BOOL read getfEstablished write setfEstablished;
procedure setfNoData(const val : BOOL);
function getfNoData : BOOL;
property fNoData : BOOL read getfNoData write setfNoData;
procedure sethszSvc(const val : HSz);
function gethszSvc : HSz;
property hszSvc : HSz read gethszSvc write sethszSvc;
procedure sethszTopic(const val : HSz);
function gethszTopic : HSz;
property hszTopic : HSz read gethszTopic write sethszTopic;
procedure sethszItem(const val : HSz);
function gethszItem : HSz;
property hszItem : HSz read gethszItem write sethszItem;
procedure setwFmt(const val : UINT);
function getwFmt : UINT;
property wFmt : UINT read getwFmt write setwFmt;
procedure setfServer(const val : BOOL);
function getfServer : BOOL;
property fServer : BOOL read getfServer write setfServer;
procedure sethConvServer(const val : HConv);
function gethConvServer : HConv;
property hConvServer : HConv read gethConvServer write sethConvServer;
procedure sethConvClient(const val : HConv);
function gethConvClient : HConv;
property hConvClient : HConv read gethConvClient write sethConvClient;
end;
type __TMonMsgStruct__Wrapper = class(TDCRecordWrapper)
private
fR : TMonMsgStruct;
public
function GetRecordPtr : pointer; override;
published
procedure setcb(const val : UINT);
function getcb : UINT;
property cb : UINT read getcb write setcb;
procedure setdwTime(const val : DWORD);
function getdwTime : DWORD;
property dwTime : DWORD read getdwTime write setdwTime;
procedure sethTask(const val : THandle);
function gethTask : THandle;
property hTask : THandle read gethTask write sethTask;
procedure setwMsg(const val : UINT);
function getwMsg : UINT;
property wMsg : UINT read getwMsg write setwMsg;
procedure setwParam(const val : wParam);
function getwParam : wParam;
property wParam : wParam read getwParam write setwParam;
procedure setlParam(const val : lParam);
function getlParam : lParam;
property lParam : lParam read getlParam write setlParam;
end;
type
{_T0 = function (var p0 : Longint;
p1 : TFNCallback;
p2 : Longint;
p3 : Longint): Longint of object;}

{_T1 = function (var p0 : Longint;
p1 : TFNCallback;
p2 : Longint;
p3 : Longint): Longint of object;}

{_T2 = function (var p0 : Longint;
p1 : TFNCallback;
p2 : Longint;
p3 : Longint): Longint of object;}

_T3 = function (p0 : DWORD): BOOL of object;

{_T4 = function (p0 : DWORD;
p1 : HSz;
p2 : HSz;
p3 : HConvList;
p4 : PConvContext): HConvList of object;}

_T5 = function (p0 : HConvList;
p1 : HConv): HConv of object;

_T6 = function (p0 : HConvList): BOOL of object;

{_T7 = function (p0 : DWORD;
p1 : HSz;
p2 : HSz;
p3 : PConvContext): HConv of object;}

_T8 = function (p0 : HConv): BOOL of object;

_T9 = function (p0 : HConv): HConv of object;

{_T10 = function (p0 : HConv;
p1 : DWORD;
p2 : PConvInfo): UINT of object;}

_T11 = function (p0 : HConv;
p1 : DWORD;
p2 : DWORD): BOOL of object;

_T12 = function (p0 : DWORD;
p1 : HConv;
p2 : DWORD): BOOL of object;

_T13 = function (p0 : DWORD;
p1 : HSz;
p2 : HSz): BOOL of object;

_T14 = function (p0 : DWORD;
p1 : HConv;
p2 : UINT): BOOL of object;

_T15 = function (p0 : DWORD;
p1 : HSz;
p2 : HSz;
p3 : UINT): HDDEData of object;

_T16 = function (p0 : Pointer;
p1 : DWORD;
p2 : HConv;
p3 : HSz;
p4 : UINT;
p5 : UINT;
p6 : DWORD;
p7 : PDWORD): HDDEData of object;

_T17 = function (p0 : DWORD;
p1 : Pointer;
p2 : DWORD;
p3 : DWORD;
p4 : HSz;
p5 : UINT;
p6 : UINT): HDDEData of object;

_T18 = function (p0 : HDDEData;
p1 : Pointer;
p2 : DWORD;
p3 : DWORD): HDDEData of object;

_T19 = function (p0 : HDDEData;
p1 : Pointer;
p2 : DWORD;
p3 : DWORD): DWORD of object;

_T20 = function (p0 : HDDEData;
p1 : PDWORD): Pointer of object;

_T21 = function (p0 : HDDEData): BOOL of object;

_T22 = _T21;

_T23 = function (p0 : DWORD): UINT of object;

{_T24 = function (p0 : DWORD;
p1 : PAnsiChar;
p2 : Integer): HSz of object;}

{_T25 = function (p0 : DWORD;
p1 : PWideChar;
p2 : Integer): HSz of object;}

{_T26 = function (p0 : DWORD;
p1 : PChar;
p2 : Integer): HSz of object;}

{_T27 = function (p0 : DWORD;
p1 : HSz;
p2 : PAnsiChar;
p3 : DWORD;
p4 : Integer): DWORD of object;}

{_T28 = function (p0 : DWORD;
p1 : HSz;
p2 : PWideChar;
p3 : DWORD;
p4 : Integer): DWORD of object;}

{_T29 = function (p0 : DWORD;
p1 : HSz;
p2 : PChar;
p3 : DWORD;
p4 : Integer): DWORD of object;}

_T30 = function (p0 : DWORD;
p1 : HSz): BOOL of object;

_T31 = _T30;

_T32 = function (p0 : HSz;
p1 : HSz): Integer of object;

function __CONVCONTEXT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __CONVCONTEXT__Wrapper.setcb(const val : UINT);
begin
CONVCONTEXT(GetRecordPtr^).cb := val;
end;
function __CONVCONTEXT__Wrapper.getcb : UINT;
begin
result := CONVCONTEXT(GetRecordPtr^).cb;
end;
procedure __CONVCONTEXT__Wrapper.setwFlags(const val : UINT);
begin
CONVCONTEXT(GetRecordPtr^).wFlags := val;
end;
function __CONVCONTEXT__Wrapper.getwFlags : UINT;
begin
result := CONVCONTEXT(GetRecordPtr^).wFlags;
end;
procedure __CONVCONTEXT__Wrapper.setwCountryID(const val : UINT);
begin
CONVCONTEXT(GetRecordPtr^).wCountryID := val;
end;
function __CONVCONTEXT__Wrapper.getwCountryID : UINT;
begin
result := CONVCONTEXT(GetRecordPtr^).wCountryID;
end;
procedure __CONVCONTEXT__Wrapper.setiCodePage(const val : Integer);
begin
CONVCONTEXT(GetRecordPtr^).iCodePage := val;
end;
function __CONVCONTEXT__Wrapper.getiCodePage : Integer;
begin
result := CONVCONTEXT(GetRecordPtr^).iCodePage;
end;
procedure __CONVCONTEXT__Wrapper.setdwLangID(const val : DWORD);
begin
CONVCONTEXT(GetRecordPtr^).dwLangID := val;
end;
function __CONVCONTEXT__Wrapper.getdwLangID : DWORD;
begin
result := CONVCONTEXT(GetRecordPtr^).dwLangID;
end;
procedure __CONVCONTEXT__Wrapper.setdwSecurity(const val : DWORD);
begin
CONVCONTEXT(GetRecordPtr^).dwSecurity := val;
end;
function __CONVCONTEXT__Wrapper.getdwSecurity : DWORD;
begin
result := CONVCONTEXT(GetRecordPtr^).dwSecurity;
end;
function __CONVINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __CONVINFO__Wrapper.setcb(const val : DWORD);
begin
CONVINFO(GetRecordPtr^).cb := val;
end;
function __CONVINFO__Wrapper.getcb : DWORD;
begin
result := CONVINFO(GetRecordPtr^).cb;
end;
procedure __CONVINFO__Wrapper.sethUser(const val : DWORD);
begin
CONVINFO(GetRecordPtr^).hUser := val;
end;
function __CONVINFO__Wrapper.gethUser : DWORD;
begin
result := CONVINFO(GetRecordPtr^).hUser;
end;
procedure __CONVINFO__Wrapper.sethConvPartner(const val : HConv);
begin
CONVINFO(GetRecordPtr^).hConvPartner := val;
end;
function __CONVINFO__Wrapper.gethConvPartner : HConv;
begin
result := CONVINFO(GetRecordPtr^).hConvPartner;
end;
procedure __CONVINFO__Wrapper.sethszSvcPartner(const val : HSz);
begin
CONVINFO(GetRecordPtr^).hszSvcPartner := val;
end;
function __CONVINFO__Wrapper.gethszSvcPartner : HSz;
begin
result := CONVINFO(GetRecordPtr^).hszSvcPartner;
end;
procedure __CONVINFO__Wrapper.sethszServiceReq(const val : HSz);
begin
CONVINFO(GetRecordPtr^).hszServiceReq := val;
end;
function __CONVINFO__Wrapper.gethszServiceReq : HSz;
begin
result := CONVINFO(GetRecordPtr^).hszServiceReq;
end;
procedure __CONVINFO__Wrapper.sethszTopic(const val : HSz);
begin
CONVINFO(GetRecordPtr^).hszTopic := val;
end;
function __CONVINFO__Wrapper.gethszTopic : HSz;
begin
result := CONVINFO(GetRecordPtr^).hszTopic;
end;
procedure __CONVINFO__Wrapper.sethszItem(const val : HSz);
begin
CONVINFO(GetRecordPtr^).hszItem := val;
end;
function __CONVINFO__Wrapper.gethszItem : HSz;
begin
result := CONVINFO(GetRecordPtr^).hszItem;
end;
procedure __CONVINFO__Wrapper.setwFmt(const val : UINT);
begin
CONVINFO(GetRecordPtr^).wFmt := val;
end;
function __CONVINFO__Wrapper.getwFmt : UINT;
begin
result := CONVINFO(GetRecordPtr^).wFmt;
end;
procedure __CONVINFO__Wrapper.setwType(const val : UINT);
begin
CONVINFO(GetRecordPtr^).wType := val;
end;
function __CONVINFO__Wrapper.getwType : UINT;
begin
result := CONVINFO(GetRecordPtr^).wType;
end;
procedure __CONVINFO__Wrapper.setwStatus(const val : UINT);
begin
CONVINFO(GetRecordPtr^).wStatus := val;
end;
function __CONVINFO__Wrapper.getwStatus : UINT;
begin
result := CONVINFO(GetRecordPtr^).wStatus;
end;
procedure __CONVINFO__Wrapper.setwConvst(const val : UINT);
begin
CONVINFO(GetRecordPtr^).wConvst := val;
end;
function __CONVINFO__Wrapper.getwConvst : UINT;
begin
result := CONVINFO(GetRecordPtr^).wConvst;
end;
procedure __CONVINFO__Wrapper.setwLastError(const val : UINT);
begin
CONVINFO(GetRecordPtr^).wLastError := val;
end;
function __CONVINFO__Wrapper.getwLastError : UINT;
begin
result := CONVINFO(GetRecordPtr^).wLastError;
end;
procedure __CONVINFO__Wrapper.setHConvList(const val : HConvList);
begin
CONVINFO(GetRecordPtr^).HConvList := val;
end;
function __CONVINFO__Wrapper.getHConvList : HConvList;
begin
result := CONVINFO(GetRecordPtr^).HConvList;
end;
function __DDEML_MSG_HOOK_DATA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __DDEML_MSG_HOOK_DATA__Wrapper.setuiLo(const val : UINT);
begin
DDEML_MSG_HOOK_DATA(GetRecordPtr^).uiLo := val;
end;
function __DDEML_MSG_HOOK_DATA__Wrapper.getuiLo : UINT;
begin
result := DDEML_MSG_HOOK_DATA(GetRecordPtr^).uiLo;
end;
procedure __DDEML_MSG_HOOK_DATA__Wrapper.setuiHi(const val : UINT);
begin
DDEML_MSG_HOOK_DATA(GetRecordPtr^).uiHi := val;
end;
function __DDEML_MSG_HOOK_DATA__Wrapper.getuiHi : UINT;
begin
result := DDEML_MSG_HOOK_DATA(GetRecordPtr^).uiHi;
end;
procedure __DDEML_MSG_HOOK_DATA__Wrapper.setcbData(const val : DWORD);
begin
DDEML_MSG_HOOK_DATA(GetRecordPtr^).cbData := val;
end;
function __DDEML_MSG_HOOK_DATA__Wrapper.getcbData : DWORD;
begin
result := DDEML_MSG_HOOK_DATA(GetRecordPtr^).cbData;
end;
function __HSZPAIR__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __HSZPAIR__Wrapper.sethszSvc(const val : HSz);
begin
HSZPAIR(GetRecordPtr^).hszSvc := val;
end;
function __HSZPAIR__Wrapper.gethszSvc : HSz;
begin
result := HSZPAIR(GetRecordPtr^).hszSvc;
end;
procedure __HSZPAIR__Wrapper.sethszTopic(const val : HSz);
begin
HSZPAIR(GetRecordPtr^).hszTopic := val;
end;
function __HSZPAIR__Wrapper.gethszTopic : HSz;
begin
result := HSZPAIR(GetRecordPtr^).hszTopic;
end;
function __MONCBSTRUCT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MONCBSTRUCT__Wrapper.setcb(const val : UINT);
begin
MONCBSTRUCT(GetRecordPtr^).cb := val;
end;
function __MONCBSTRUCT__Wrapper.getcb : UINT;
begin
result := MONCBSTRUCT(GetRecordPtr^).cb;
end;
procedure __MONCBSTRUCT__Wrapper.setdwTime(const val : DWORD);
begin
MONCBSTRUCT(GetRecordPtr^).dwTime := val;
end;
function __MONCBSTRUCT__Wrapper.getdwTime : DWORD;
begin
result := MONCBSTRUCT(GetRecordPtr^).dwTime;
end;
procedure __MONCBSTRUCT__Wrapper.sethTask(const val : THandle);
begin
MONCBSTRUCT(GetRecordPtr^).hTask := val;
end;
function __MONCBSTRUCT__Wrapper.gethTask : THandle;
begin
result := MONCBSTRUCT(GetRecordPtr^).hTask;
end;
procedure __MONCBSTRUCT__Wrapper.setdwRet(const val : DWORD);
begin
MONCBSTRUCT(GetRecordPtr^).dwRet := val;
end;
function __MONCBSTRUCT__Wrapper.getdwRet : DWORD;
begin
result := MONCBSTRUCT(GetRecordPtr^).dwRet;
end;
procedure __MONCBSTRUCT__Wrapper.setwType(const val : UINT);
begin
MONCBSTRUCT(GetRecordPtr^).wType := val;
end;
function __MONCBSTRUCT__Wrapper.getwType : UINT;
begin
result := MONCBSTRUCT(GetRecordPtr^).wType;
end;
procedure __MONCBSTRUCT__Wrapper.setwFmt(const val : UINT);
begin
MONCBSTRUCT(GetRecordPtr^).wFmt := val;
end;
function __MONCBSTRUCT__Wrapper.getwFmt : UINT;
begin
result := MONCBSTRUCT(GetRecordPtr^).wFmt;
end;
procedure __MONCBSTRUCT__Wrapper.setHConv(const val : HConv);
begin
MONCBSTRUCT(GetRecordPtr^).HConv := val;
end;
function __MONCBSTRUCT__Wrapper.getHConv : HConv;
begin
result := MONCBSTRUCT(GetRecordPtr^).HConv;
end;
procedure __MONCBSTRUCT__Wrapper.sethsz1(const val : HSz);
begin
MONCBSTRUCT(GetRecordPtr^).hsz1 := val;
end;
function __MONCBSTRUCT__Wrapper.gethsz1 : HSz;
begin
result := MONCBSTRUCT(GetRecordPtr^).hsz1;
end;
procedure __MONCBSTRUCT__Wrapper.sethsz2(const val : HSz);
begin
MONCBSTRUCT(GetRecordPtr^).hsz2 := val;
end;
function __MONCBSTRUCT__Wrapper.gethsz2 : HSz;
begin
result := MONCBSTRUCT(GetRecordPtr^).hsz2;
end;
procedure __MONCBSTRUCT__Wrapper.sethData(const val : HDDEData);
begin
MONCBSTRUCT(GetRecordPtr^).hData := val;
end;
function __MONCBSTRUCT__Wrapper.gethData : HDDEData;
begin
result := MONCBSTRUCT(GetRecordPtr^).hData;
end;
procedure __MONCBSTRUCT__Wrapper.setdwData1(const val : DWORD);
begin
MONCBSTRUCT(GetRecordPtr^).dwData1 := val;
end;
function __MONCBSTRUCT__Wrapper.getdwData1 : DWORD;
begin
result := MONCBSTRUCT(GetRecordPtr^).dwData1;
end;
procedure __MONCBSTRUCT__Wrapper.setdwData2(const val : DWORD);
begin
MONCBSTRUCT(GetRecordPtr^).dwData2 := val;
end;
function __MONCBSTRUCT__Wrapper.getdwData2 : DWORD;
begin
result := MONCBSTRUCT(GetRecordPtr^).dwData2;
end;
procedure __MONCBSTRUCT__Wrapper.setcbData(const val : DWORD);
begin
MONCBSTRUCT(GetRecordPtr^).cbData := val;
end;
function __MONCBSTRUCT__Wrapper.getcbData : DWORD;
begin
result := MONCBSTRUCT(GetRecordPtr^).cbData;
end;
function __MONCONVSTRUCT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MONCONVSTRUCT__Wrapper.setcb(const val : UINT);
begin
MONCONVSTRUCT(GetRecordPtr^).cb := val;
end;
function __MONCONVSTRUCT__Wrapper.getcb : UINT;
begin
result := MONCONVSTRUCT(GetRecordPtr^).cb;
end;
procedure __MONCONVSTRUCT__Wrapper.setfConnect(const val : BOOL);
begin
MONCONVSTRUCT(GetRecordPtr^).fConnect := val;
end;
function __MONCONVSTRUCT__Wrapper.getfConnect : BOOL;
begin
result := MONCONVSTRUCT(GetRecordPtr^).fConnect;
end;
procedure __MONCONVSTRUCT__Wrapper.setdwTime(const val : DWORD);
begin
MONCONVSTRUCT(GetRecordPtr^).dwTime := val;
end;
function __MONCONVSTRUCT__Wrapper.getdwTime : DWORD;
begin
result := MONCONVSTRUCT(GetRecordPtr^).dwTime;
end;
procedure __MONCONVSTRUCT__Wrapper.sethTask(const val : THandle);
begin
MONCONVSTRUCT(GetRecordPtr^).hTask := val;
end;
function __MONCONVSTRUCT__Wrapper.gethTask : THandle;
begin
result := MONCONVSTRUCT(GetRecordPtr^).hTask;
end;
procedure __MONCONVSTRUCT__Wrapper.sethszSvc(const val : HSz);
begin
MONCONVSTRUCT(GetRecordPtr^).hszSvc := val;
end;
function __MONCONVSTRUCT__Wrapper.gethszSvc : HSz;
begin
result := MONCONVSTRUCT(GetRecordPtr^).hszSvc;
end;
procedure __MONCONVSTRUCT__Wrapper.sethszTopic(const val : HSz);
begin
MONCONVSTRUCT(GetRecordPtr^).hszTopic := val;
end;
function __MONCONVSTRUCT__Wrapper.gethszTopic : HSz;
begin
result := MONCONVSTRUCT(GetRecordPtr^).hszTopic;
end;
procedure __MONCONVSTRUCT__Wrapper.sethConvClient(const val : HConv);
begin
MONCONVSTRUCT(GetRecordPtr^).hConvClient := val;
end;
function __MONCONVSTRUCT__Wrapper.gethConvClient : HConv;
begin
result := MONCONVSTRUCT(GetRecordPtr^).hConvClient;
end;
procedure __MONCONVSTRUCT__Wrapper.sethConvServer(const val : HConv);
begin
MONCONVSTRUCT(GetRecordPtr^).hConvServer := val;
end;
function __MONCONVSTRUCT__Wrapper.gethConvServer : HConv;
begin
result := MONCONVSTRUCT(GetRecordPtr^).hConvServer;
end;
function __MONERRSTRUCT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MONERRSTRUCT__Wrapper.setcb(const val : UINT);
begin
MONERRSTRUCT(GetRecordPtr^).cb := val;
end;
function __MONERRSTRUCT__Wrapper.getcb : UINT;
begin
result := MONERRSTRUCT(GetRecordPtr^).cb;
end;
procedure __MONERRSTRUCT__Wrapper.setwLastError(const val : UINT);
begin
MONERRSTRUCT(GetRecordPtr^).wLastError := val;
end;
function __MONERRSTRUCT__Wrapper.getwLastError : UINT;
begin
result := MONERRSTRUCT(GetRecordPtr^).wLastError;
end;
procedure __MONERRSTRUCT__Wrapper.setdwTime(const val : DWORD);
begin
MONERRSTRUCT(GetRecordPtr^).dwTime := val;
end;
function __MONERRSTRUCT__Wrapper.getdwTime : DWORD;
begin
result := MONERRSTRUCT(GetRecordPtr^).dwTime;
end;
procedure __MONERRSTRUCT__Wrapper.sethTask(const val : THandle);
begin
MONERRSTRUCT(GetRecordPtr^).hTask := val;
end;
function __MONERRSTRUCT__Wrapper.gethTask : THandle;
begin
result := MONERRSTRUCT(GetRecordPtr^).hTask;
end;
function __MONHSZSTRUCT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MONHSZSTRUCT__Wrapper.setcb(const val : UINT);
begin
MONHSZSTRUCT(GetRecordPtr^).cb := val;
end;
function __MONHSZSTRUCT__Wrapper.getcb : UINT;
begin
result := MONHSZSTRUCT(GetRecordPtr^).cb;
end;
procedure __MONHSZSTRUCT__Wrapper.setfsAction(const val : BOOL);
begin
MONHSZSTRUCT(GetRecordPtr^).fsAction := val;
end;
function __MONHSZSTRUCT__Wrapper.getfsAction : BOOL;
begin
result := MONHSZSTRUCT(GetRecordPtr^).fsAction;
end;
procedure __MONHSZSTRUCT__Wrapper.setdwTime(const val : DWORD);
begin
MONHSZSTRUCT(GetRecordPtr^).dwTime := val;
end;
function __MONHSZSTRUCT__Wrapper.getdwTime : DWORD;
begin
result := MONHSZSTRUCT(GetRecordPtr^).dwTime;
end;
procedure __MONHSZSTRUCT__Wrapper.setHSz(const val : HSz);
begin
MONHSZSTRUCT(GetRecordPtr^).HSz := val;
end;
function __MONHSZSTRUCT__Wrapper.getHSz : HSz;
begin
result := MONHSZSTRUCT(GetRecordPtr^).HSz;
end;
procedure __MONHSZSTRUCT__Wrapper.sethTask(const val : THandle);
begin
MONHSZSTRUCT(GetRecordPtr^).hTask := val;
end;
function __MONHSZSTRUCT__Wrapper.gethTask : THandle;
begin
result := MONHSZSTRUCT(GetRecordPtr^).hTask;
end;
procedure __MONHSZSTRUCT__Wrapper.setwReserved(const val : UINT);
begin
MONHSZSTRUCT(GetRecordPtr^).wReserved := val;
end;
function __MONHSZSTRUCT__Wrapper.getwReserved : UINT;
begin
result := MONHSZSTRUCT(GetRecordPtr^).wReserved;
end;
function __MONHSZSTRUCTA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MONHSZSTRUCTA__Wrapper.setcb(const val : UINT);
begin
MONHSZSTRUCTA(GetRecordPtr^).cb := val;
end;
function __MONHSZSTRUCTA__Wrapper.getcb : UINT;
begin
result := MONHSZSTRUCTA(GetRecordPtr^).cb;
end;
procedure __MONHSZSTRUCTA__Wrapper.setfsAction(const val : BOOL);
begin
MONHSZSTRUCTA(GetRecordPtr^).fsAction := val;
end;
function __MONHSZSTRUCTA__Wrapper.getfsAction : BOOL;
begin
result := MONHSZSTRUCTA(GetRecordPtr^).fsAction;
end;
procedure __MONHSZSTRUCTA__Wrapper.setdwTime(const val : DWORD);
begin
MONHSZSTRUCTA(GetRecordPtr^).dwTime := val;
end;
function __MONHSZSTRUCTA__Wrapper.getdwTime : DWORD;
begin
result := MONHSZSTRUCTA(GetRecordPtr^).dwTime;
end;
procedure __MONHSZSTRUCTA__Wrapper.setHSz(const val : HSz);
begin
MONHSZSTRUCTA(GetRecordPtr^).HSz := val;
end;
function __MONHSZSTRUCTA__Wrapper.getHSz : HSz;
begin
result := MONHSZSTRUCTA(GetRecordPtr^).HSz;
end;
procedure __MONHSZSTRUCTA__Wrapper.sethTask(const val : THandle);
begin
MONHSZSTRUCTA(GetRecordPtr^).hTask := val;
end;
function __MONHSZSTRUCTA__Wrapper.gethTask : THandle;
begin
result := MONHSZSTRUCTA(GetRecordPtr^).hTask;
end;
procedure __MONHSZSTRUCTA__Wrapper.setwReserved(const val : UINT);
begin
MONHSZSTRUCTA(GetRecordPtr^).wReserved := val;
end;
function __MONHSZSTRUCTA__Wrapper.getwReserved : UINT;
begin
result := MONHSZSTRUCTA(GetRecordPtr^).wReserved;
end;
function __MONHSZSTRUCTW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MONHSZSTRUCTW__Wrapper.setcb(const val : UINT);
begin
MONHSZSTRUCTW(GetRecordPtr^).cb := val;
end;
function __MONHSZSTRUCTW__Wrapper.getcb : UINT;
begin
result := MONHSZSTRUCTW(GetRecordPtr^).cb;
end;
procedure __MONHSZSTRUCTW__Wrapper.setfsAction(const val : BOOL);
begin
MONHSZSTRUCTW(GetRecordPtr^).fsAction := val;
end;
function __MONHSZSTRUCTW__Wrapper.getfsAction : BOOL;
begin
result := MONHSZSTRUCTW(GetRecordPtr^).fsAction;
end;
procedure __MONHSZSTRUCTW__Wrapper.setdwTime(const val : DWORD);
begin
MONHSZSTRUCTW(GetRecordPtr^).dwTime := val;
end;
function __MONHSZSTRUCTW__Wrapper.getdwTime : DWORD;
begin
result := MONHSZSTRUCTW(GetRecordPtr^).dwTime;
end;
procedure __MONHSZSTRUCTW__Wrapper.setHSz(const val : HSz);
begin
MONHSZSTRUCTW(GetRecordPtr^).HSz := val;
end;
function __MONHSZSTRUCTW__Wrapper.getHSz : HSz;
begin
result := MONHSZSTRUCTW(GetRecordPtr^).HSz;
end;
procedure __MONHSZSTRUCTW__Wrapper.sethTask(const val : THandle);
begin
MONHSZSTRUCTW(GetRecordPtr^).hTask := val;
end;
function __MONHSZSTRUCTW__Wrapper.gethTask : THandle;
begin
result := MONHSZSTRUCTW(GetRecordPtr^).hTask;
end;
procedure __MONHSZSTRUCTW__Wrapper.setwReserved(const val : UINT);
begin
MONHSZSTRUCTW(GetRecordPtr^).wReserved := val;
end;
function __MONHSZSTRUCTW__Wrapper.getwReserved : UINT;
begin
result := MONHSZSTRUCTW(GetRecordPtr^).wReserved;
end;
function __MONLINKSTRUCT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MONLINKSTRUCT__Wrapper.setcb(const val : UINT);
begin
MONLINKSTRUCT(GetRecordPtr^).cb := val;
end;
function __MONLINKSTRUCT__Wrapper.getcb : UINT;
begin
result := MONLINKSTRUCT(GetRecordPtr^).cb;
end;
procedure __MONLINKSTRUCT__Wrapper.setdwTime(const val : DWORD);
begin
MONLINKSTRUCT(GetRecordPtr^).dwTime := val;
end;
function __MONLINKSTRUCT__Wrapper.getdwTime : DWORD;
begin
result := MONLINKSTRUCT(GetRecordPtr^).dwTime;
end;
procedure __MONLINKSTRUCT__Wrapper.sethTask(const val : THandle);
begin
MONLINKSTRUCT(GetRecordPtr^).hTask := val;
end;
function __MONLINKSTRUCT__Wrapper.gethTask : THandle;
begin
result := MONLINKSTRUCT(GetRecordPtr^).hTask;
end;
procedure __MONLINKSTRUCT__Wrapper.setfEstablished(const val : BOOL);
begin
MONLINKSTRUCT(GetRecordPtr^).fEstablished := val;
end;
function __MONLINKSTRUCT__Wrapper.getfEstablished : BOOL;
begin
result := MONLINKSTRUCT(GetRecordPtr^).fEstablished;
end;
procedure __MONLINKSTRUCT__Wrapper.setfNoData(const val : BOOL);
begin
MONLINKSTRUCT(GetRecordPtr^).fNoData := val;
end;
function __MONLINKSTRUCT__Wrapper.getfNoData : BOOL;
begin
result := MONLINKSTRUCT(GetRecordPtr^).fNoData;
end;
procedure __MONLINKSTRUCT__Wrapper.sethszSvc(const val : HSz);
begin
MONLINKSTRUCT(GetRecordPtr^).hszSvc := val;
end;
function __MONLINKSTRUCT__Wrapper.gethszSvc : HSz;
begin
result := MONLINKSTRUCT(GetRecordPtr^).hszSvc;
end;
procedure __MONLINKSTRUCT__Wrapper.sethszTopic(const val : HSz);
begin
MONLINKSTRUCT(GetRecordPtr^).hszTopic := val;
end;
function __MONLINKSTRUCT__Wrapper.gethszTopic : HSz;
begin
result := MONLINKSTRUCT(GetRecordPtr^).hszTopic;
end;
procedure __MONLINKSTRUCT__Wrapper.sethszItem(const val : HSz);
begin
MONLINKSTRUCT(GetRecordPtr^).hszItem := val;
end;
function __MONLINKSTRUCT__Wrapper.gethszItem : HSz;
begin
result := MONLINKSTRUCT(GetRecordPtr^).hszItem;
end;
procedure __MONLINKSTRUCT__Wrapper.setwFmt(const val : UINT);
begin
MONLINKSTRUCT(GetRecordPtr^).wFmt := val;
end;
function __MONLINKSTRUCT__Wrapper.getwFmt : UINT;
begin
result := MONLINKSTRUCT(GetRecordPtr^).wFmt;
end;
procedure __MONLINKSTRUCT__Wrapper.setfServer(const val : BOOL);
begin
MONLINKSTRUCT(GetRecordPtr^).fServer := val;
end;
function __MONLINKSTRUCT__Wrapper.getfServer : BOOL;
begin
result := MONLINKSTRUCT(GetRecordPtr^).fServer;
end;
procedure __MONLINKSTRUCT__Wrapper.sethConvServer(const val : HConv);
begin
MONLINKSTRUCT(GetRecordPtr^).hConvServer := val;
end;
function __MONLINKSTRUCT__Wrapper.gethConvServer : HConv;
begin
result := MONLINKSTRUCT(GetRecordPtr^).hConvServer;
end;
procedure __MONLINKSTRUCT__Wrapper.sethConvClient(const val : HConv);
begin
MONLINKSTRUCT(GetRecordPtr^).hConvClient := val;
end;
function __MONLINKSTRUCT__Wrapper.gethConvClient : HConv;
begin
result := MONLINKSTRUCT(GetRecordPtr^).hConvClient;
end;
function __MONMSGSTRUCT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MONMSGSTRUCT__Wrapper.setcb(const val : UINT);
begin
MONMSGSTRUCT(GetRecordPtr^).cb := val;
end;
function __MONMSGSTRUCT__Wrapper.getcb : UINT;
begin
result := MONMSGSTRUCT(GetRecordPtr^).cb;
end;
procedure __MONMSGSTRUCT__Wrapper.setdwTime(const val : DWORD);
begin
MONMSGSTRUCT(GetRecordPtr^).dwTime := val;
end;
function __MONMSGSTRUCT__Wrapper.getdwTime : DWORD;
begin
result := MONMSGSTRUCT(GetRecordPtr^).dwTime;
end;
procedure __MONMSGSTRUCT__Wrapper.sethTask(const val : THandle);
begin
MONMSGSTRUCT(GetRecordPtr^).hTask := val;
end;
function __MONMSGSTRUCT__Wrapper.gethTask : THandle;
begin
result := MONMSGSTRUCT(GetRecordPtr^).hTask;
end;
procedure __MONMSGSTRUCT__Wrapper.setwMsg(const val : UINT);
begin
MONMSGSTRUCT(GetRecordPtr^).wMsg := val;
end;
function __MONMSGSTRUCT__Wrapper.getwMsg : UINT;
begin
result := MONMSGSTRUCT(GetRecordPtr^).wMsg;
end;
procedure __MONMSGSTRUCT__Wrapper.setwParam(const val : wParam);
begin
MONMSGSTRUCT(GetRecordPtr^).wParam := val;
end;
function __MONMSGSTRUCT__Wrapper.getwParam : wParam;
begin
result := MONMSGSTRUCT(GetRecordPtr^).wParam;
end;
procedure __MONMSGSTRUCT__Wrapper.setlParam(const val : lParam);
begin
MONMSGSTRUCT(GetRecordPtr^).lParam := val;
end;
function __MONMSGSTRUCT__Wrapper.getlParam : lParam;
begin
result := MONMSGSTRUCT(GetRecordPtr^).lParam;
end;
function __tagCONVCONTEXT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagCONVCONTEXT__Wrapper.setcb(const val : UINT);
begin
tagCONVCONTEXT(GetRecordPtr^).cb := val;
end;
function __tagCONVCONTEXT__Wrapper.getcb : UINT;
begin
result := tagCONVCONTEXT(GetRecordPtr^).cb;
end;
procedure __tagCONVCONTEXT__Wrapper.setwFlags(const val : UINT);
begin
tagCONVCONTEXT(GetRecordPtr^).wFlags := val;
end;
function __tagCONVCONTEXT__Wrapper.getwFlags : UINT;
begin
result := tagCONVCONTEXT(GetRecordPtr^).wFlags;
end;
procedure __tagCONVCONTEXT__Wrapper.setwCountryID(const val : UINT);
begin
tagCONVCONTEXT(GetRecordPtr^).wCountryID := val;
end;
function __tagCONVCONTEXT__Wrapper.getwCountryID : UINT;
begin
result := tagCONVCONTEXT(GetRecordPtr^).wCountryID;
end;
procedure __tagCONVCONTEXT__Wrapper.setiCodePage(const val : Integer);
begin
tagCONVCONTEXT(GetRecordPtr^).iCodePage := val;
end;
function __tagCONVCONTEXT__Wrapper.getiCodePage : Integer;
begin
result := tagCONVCONTEXT(GetRecordPtr^).iCodePage;
end;
procedure __tagCONVCONTEXT__Wrapper.setdwLangID(const val : DWORD);
begin
tagCONVCONTEXT(GetRecordPtr^).dwLangID := val;
end;
function __tagCONVCONTEXT__Wrapper.getdwLangID : DWORD;
begin
result := tagCONVCONTEXT(GetRecordPtr^).dwLangID;
end;
procedure __tagCONVCONTEXT__Wrapper.setdwSecurity(const val : DWORD);
begin
tagCONVCONTEXT(GetRecordPtr^).dwSecurity := val;
end;
function __tagCONVCONTEXT__Wrapper.getdwSecurity : DWORD;
begin
result := tagCONVCONTEXT(GetRecordPtr^).dwSecurity;
end;
function __tagCONVINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagCONVINFO__Wrapper.setcb(const val : DWORD);
begin
tagCONVINFO(GetRecordPtr^).cb := val;
end;
function __tagCONVINFO__Wrapper.getcb : DWORD;
begin
result := tagCONVINFO(GetRecordPtr^).cb;
end;
procedure __tagCONVINFO__Wrapper.sethUser(const val : DWORD);
begin
tagCONVINFO(GetRecordPtr^).hUser := val;
end;
function __tagCONVINFO__Wrapper.gethUser : DWORD;
begin
result := tagCONVINFO(GetRecordPtr^).hUser;
end;
procedure __tagCONVINFO__Wrapper.sethConvPartner(const val : HConv);
begin
tagCONVINFO(GetRecordPtr^).hConvPartner := val;
end;
function __tagCONVINFO__Wrapper.gethConvPartner : HConv;
begin
result := tagCONVINFO(GetRecordPtr^).hConvPartner;
end;
procedure __tagCONVINFO__Wrapper.sethszSvcPartner(const val : HSz);
begin
tagCONVINFO(GetRecordPtr^).hszSvcPartner := val;
end;
function __tagCONVINFO__Wrapper.gethszSvcPartner : HSz;
begin
result := tagCONVINFO(GetRecordPtr^).hszSvcPartner;
end;
procedure __tagCONVINFO__Wrapper.sethszServiceReq(const val : HSz);
begin
tagCONVINFO(GetRecordPtr^).hszServiceReq := val;
end;
function __tagCONVINFO__Wrapper.gethszServiceReq : HSz;
begin
result := tagCONVINFO(GetRecordPtr^).hszServiceReq;
end;
procedure __tagCONVINFO__Wrapper.sethszTopic(const val : HSz);
begin
tagCONVINFO(GetRecordPtr^).hszTopic := val;
end;
function __tagCONVINFO__Wrapper.gethszTopic : HSz;
begin
result := tagCONVINFO(GetRecordPtr^).hszTopic;
end;
procedure __tagCONVINFO__Wrapper.sethszItem(const val : HSz);
begin
tagCONVINFO(GetRecordPtr^).hszItem := val;
end;
function __tagCONVINFO__Wrapper.gethszItem : HSz;
begin
result := tagCONVINFO(GetRecordPtr^).hszItem;
end;
procedure __tagCONVINFO__Wrapper.setwFmt(const val : UINT);
begin
tagCONVINFO(GetRecordPtr^).wFmt := val;
end;
function __tagCONVINFO__Wrapper.getwFmt : UINT;
begin
result := tagCONVINFO(GetRecordPtr^).wFmt;
end;
procedure __tagCONVINFO__Wrapper.setwType(const val : UINT);
begin
tagCONVINFO(GetRecordPtr^).wType := val;
end;
function __tagCONVINFO__Wrapper.getwType : UINT;
begin
result := tagCONVINFO(GetRecordPtr^).wType;
end;
procedure __tagCONVINFO__Wrapper.setwStatus(const val : UINT);
begin
tagCONVINFO(GetRecordPtr^).wStatus := val;
end;
function __tagCONVINFO__Wrapper.getwStatus : UINT;
begin
result := tagCONVINFO(GetRecordPtr^).wStatus;
end;
procedure __tagCONVINFO__Wrapper.setwConvst(const val : UINT);
begin
tagCONVINFO(GetRecordPtr^).wConvst := val;
end;
function __tagCONVINFO__Wrapper.getwConvst : UINT;
begin
result := tagCONVINFO(GetRecordPtr^).wConvst;
end;
procedure __tagCONVINFO__Wrapper.setwLastError(const val : UINT);
begin
tagCONVINFO(GetRecordPtr^).wLastError := val;
end;
function __tagCONVINFO__Wrapper.getwLastError : UINT;
begin
result := tagCONVINFO(GetRecordPtr^).wLastError;
end;
procedure __tagCONVINFO__Wrapper.setHConvList(const val : HConvList);
begin
tagCONVINFO(GetRecordPtr^).HConvList := val;
end;
function __tagCONVINFO__Wrapper.getHConvList : HConvList;
begin
result := tagCONVINFO(GetRecordPtr^).HConvList;
end;
function __tagDDEML_MSG_HOOK_DATA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagDDEML_MSG_HOOK_DATA__Wrapper.setuiLo(const val : UINT);
begin
tagDDEML_MSG_HOOK_DATA(GetRecordPtr^).uiLo := val;
end;
function __tagDDEML_MSG_HOOK_DATA__Wrapper.getuiLo : UINT;
begin
result := tagDDEML_MSG_HOOK_DATA(GetRecordPtr^).uiLo;
end;
procedure __tagDDEML_MSG_HOOK_DATA__Wrapper.setuiHi(const val : UINT);
begin
tagDDEML_MSG_HOOK_DATA(GetRecordPtr^).uiHi := val;
end;
function __tagDDEML_MSG_HOOK_DATA__Wrapper.getuiHi : UINT;
begin
result := tagDDEML_MSG_HOOK_DATA(GetRecordPtr^).uiHi;
end;
procedure __tagDDEML_MSG_HOOK_DATA__Wrapper.setcbData(const val : DWORD);
begin
tagDDEML_MSG_HOOK_DATA(GetRecordPtr^).cbData := val;
end;
function __tagDDEML_MSG_HOOK_DATA__Wrapper.getcbData : DWORD;
begin
result := tagDDEML_MSG_HOOK_DATA(GetRecordPtr^).cbData;
end;
function __tagHSZPAIR__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagHSZPAIR__Wrapper.sethszSvc(const val : HSz);
begin
tagHSZPAIR(GetRecordPtr^).hszSvc := val;
end;
function __tagHSZPAIR__Wrapper.gethszSvc : HSz;
begin
result := tagHSZPAIR(GetRecordPtr^).hszSvc;
end;
procedure __tagHSZPAIR__Wrapper.sethszTopic(const val : HSz);
begin
tagHSZPAIR(GetRecordPtr^).hszTopic := val;
end;
function __tagHSZPAIR__Wrapper.gethszTopic : HSz;
begin
result := tagHSZPAIR(GetRecordPtr^).hszTopic;
end;
function __tagMONCBSTRUCT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMONCBSTRUCT__Wrapper.setcb(const val : UINT);
begin
tagMONCBSTRUCT(GetRecordPtr^).cb := val;
end;
function __tagMONCBSTRUCT__Wrapper.getcb : UINT;
begin
result := tagMONCBSTRUCT(GetRecordPtr^).cb;
end;
procedure __tagMONCBSTRUCT__Wrapper.setdwTime(const val : DWORD);
begin
tagMONCBSTRUCT(GetRecordPtr^).dwTime := val;
end;
function __tagMONCBSTRUCT__Wrapper.getdwTime : DWORD;
begin
result := tagMONCBSTRUCT(GetRecordPtr^).dwTime;
end;
procedure __tagMONCBSTRUCT__Wrapper.sethTask(const val : THandle);
begin
tagMONCBSTRUCT(GetRecordPtr^).hTask := val;
end;
function __tagMONCBSTRUCT__Wrapper.gethTask : THandle;
begin
result := tagMONCBSTRUCT(GetRecordPtr^).hTask;
end;
procedure __tagMONCBSTRUCT__Wrapper.setdwRet(const val : DWORD);
begin
tagMONCBSTRUCT(GetRecordPtr^).dwRet := val;
end;
function __tagMONCBSTRUCT__Wrapper.getdwRet : DWORD;
begin
result := tagMONCBSTRUCT(GetRecordPtr^).dwRet;
end;
procedure __tagMONCBSTRUCT__Wrapper.setwType(const val : UINT);
begin
tagMONCBSTRUCT(GetRecordPtr^).wType := val;
end;
function __tagMONCBSTRUCT__Wrapper.getwType : UINT;
begin
result := tagMONCBSTRUCT(GetRecordPtr^).wType;
end;
procedure __tagMONCBSTRUCT__Wrapper.setwFmt(const val : UINT);
begin
tagMONCBSTRUCT(GetRecordPtr^).wFmt := val;
end;
function __tagMONCBSTRUCT__Wrapper.getwFmt : UINT;
begin
result := tagMONCBSTRUCT(GetRecordPtr^).wFmt;
end;
procedure __tagMONCBSTRUCT__Wrapper.setHConv(const val : HConv);
begin
tagMONCBSTRUCT(GetRecordPtr^).HConv := val;
end;
function __tagMONCBSTRUCT__Wrapper.getHConv : HConv;
begin
result := tagMONCBSTRUCT(GetRecordPtr^).HConv;
end;
procedure __tagMONCBSTRUCT__Wrapper.sethsz1(const val : HSz);
begin
tagMONCBSTRUCT(GetRecordPtr^).hsz1 := val;
end;
function __tagMONCBSTRUCT__Wrapper.gethsz1 : HSz;
begin
result := tagMONCBSTRUCT(GetRecordPtr^).hsz1;
end;
procedure __tagMONCBSTRUCT__Wrapper.sethsz2(const val : HSz);
begin
tagMONCBSTRUCT(GetRecordPtr^).hsz2 := val;
end;
function __tagMONCBSTRUCT__Wrapper.gethsz2 : HSz;
begin
result := tagMONCBSTRUCT(GetRecordPtr^).hsz2;
end;
procedure __tagMONCBSTRUCT__Wrapper.sethData(const val : HDDEData);
begin
tagMONCBSTRUCT(GetRecordPtr^).hData := val;
end;
function __tagMONCBSTRUCT__Wrapper.gethData : HDDEData;
begin
result := tagMONCBSTRUCT(GetRecordPtr^).hData;
end;
procedure __tagMONCBSTRUCT__Wrapper.setdwData1(const val : DWORD);
begin
tagMONCBSTRUCT(GetRecordPtr^).dwData1 := val;
end;
function __tagMONCBSTRUCT__Wrapper.getdwData1 : DWORD;
begin
result := tagMONCBSTRUCT(GetRecordPtr^).dwData1;
end;
procedure __tagMONCBSTRUCT__Wrapper.setdwData2(const val : DWORD);
begin
tagMONCBSTRUCT(GetRecordPtr^).dwData2 := val;
end;
function __tagMONCBSTRUCT__Wrapper.getdwData2 : DWORD;
begin
result := tagMONCBSTRUCT(GetRecordPtr^).dwData2;
end;
procedure __tagMONCBSTRUCT__Wrapper.setcbData(const val : DWORD);
begin
tagMONCBSTRUCT(GetRecordPtr^).cbData := val;
end;
function __tagMONCBSTRUCT__Wrapper.getcbData : DWORD;
begin
result := tagMONCBSTRUCT(GetRecordPtr^).cbData;
end;
function __tagMONCONVSTRUCT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMONCONVSTRUCT__Wrapper.setcb(const val : UINT);
begin
tagMONCONVSTRUCT(GetRecordPtr^).cb := val;
end;
function __tagMONCONVSTRUCT__Wrapper.getcb : UINT;
begin
result := tagMONCONVSTRUCT(GetRecordPtr^).cb;
end;
procedure __tagMONCONVSTRUCT__Wrapper.setfConnect(const val : BOOL);
begin
tagMONCONVSTRUCT(GetRecordPtr^).fConnect := val;
end;
function __tagMONCONVSTRUCT__Wrapper.getfConnect : BOOL;
begin
result := tagMONCONVSTRUCT(GetRecordPtr^).fConnect;
end;
procedure __tagMONCONVSTRUCT__Wrapper.setdwTime(const val : DWORD);
begin
tagMONCONVSTRUCT(GetRecordPtr^).dwTime := val;
end;
function __tagMONCONVSTRUCT__Wrapper.getdwTime : DWORD;
begin
result := tagMONCONVSTRUCT(GetRecordPtr^).dwTime;
end;
procedure __tagMONCONVSTRUCT__Wrapper.sethTask(const val : THandle);
begin
tagMONCONVSTRUCT(GetRecordPtr^).hTask := val;
end;
function __tagMONCONVSTRUCT__Wrapper.gethTask : THandle;
begin
result := tagMONCONVSTRUCT(GetRecordPtr^).hTask;
end;
procedure __tagMONCONVSTRUCT__Wrapper.sethszSvc(const val : HSz);
begin
tagMONCONVSTRUCT(GetRecordPtr^).hszSvc := val;
end;
function __tagMONCONVSTRUCT__Wrapper.gethszSvc : HSz;
begin
result := tagMONCONVSTRUCT(GetRecordPtr^).hszSvc;
end;
procedure __tagMONCONVSTRUCT__Wrapper.sethszTopic(const val : HSz);
begin
tagMONCONVSTRUCT(GetRecordPtr^).hszTopic := val;
end;
function __tagMONCONVSTRUCT__Wrapper.gethszTopic : HSz;
begin
result := tagMONCONVSTRUCT(GetRecordPtr^).hszTopic;
end;
procedure __tagMONCONVSTRUCT__Wrapper.sethConvClient(const val : HConv);
begin
tagMONCONVSTRUCT(GetRecordPtr^).hConvClient := val;
end;
function __tagMONCONVSTRUCT__Wrapper.gethConvClient : HConv;
begin
result := tagMONCONVSTRUCT(GetRecordPtr^).hConvClient;
end;
procedure __tagMONCONVSTRUCT__Wrapper.sethConvServer(const val : HConv);
begin
tagMONCONVSTRUCT(GetRecordPtr^).hConvServer := val;
end;
function __tagMONCONVSTRUCT__Wrapper.gethConvServer : HConv;
begin
result := tagMONCONVSTRUCT(GetRecordPtr^).hConvServer;
end;
function __tagMONERRSTRUCT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMONERRSTRUCT__Wrapper.setcb(const val : UINT);
begin
tagMONERRSTRUCT(GetRecordPtr^).cb := val;
end;
function __tagMONERRSTRUCT__Wrapper.getcb : UINT;
begin
result := tagMONERRSTRUCT(GetRecordPtr^).cb;
end;
procedure __tagMONERRSTRUCT__Wrapper.setwLastError(const val : UINT);
begin
tagMONERRSTRUCT(GetRecordPtr^).wLastError := val;
end;
function __tagMONERRSTRUCT__Wrapper.getwLastError : UINT;
begin
result := tagMONERRSTRUCT(GetRecordPtr^).wLastError;
end;
procedure __tagMONERRSTRUCT__Wrapper.setdwTime(const val : DWORD);
begin
tagMONERRSTRUCT(GetRecordPtr^).dwTime := val;
end;
function __tagMONERRSTRUCT__Wrapper.getdwTime : DWORD;
begin
result := tagMONERRSTRUCT(GetRecordPtr^).dwTime;
end;
procedure __tagMONERRSTRUCT__Wrapper.sethTask(const val : THandle);
begin
tagMONERRSTRUCT(GetRecordPtr^).hTask := val;
end;
function __tagMONERRSTRUCT__Wrapper.gethTask : THandle;
begin
result := tagMONERRSTRUCT(GetRecordPtr^).hTask;
end;
function __tagMONHSZSTRUCT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMONHSZSTRUCT__Wrapper.setcb(const val : UINT);
begin
tagMONHSZSTRUCT(GetRecordPtr^).cb := val;
end;
function __tagMONHSZSTRUCT__Wrapper.getcb : UINT;
begin
result := tagMONHSZSTRUCT(GetRecordPtr^).cb;
end;
procedure __tagMONHSZSTRUCT__Wrapper.setfsAction(const val : BOOL);
begin
tagMONHSZSTRUCT(GetRecordPtr^).fsAction := val;
end;
function __tagMONHSZSTRUCT__Wrapper.getfsAction : BOOL;
begin
result := tagMONHSZSTRUCT(GetRecordPtr^).fsAction;
end;
procedure __tagMONHSZSTRUCT__Wrapper.setdwTime(const val : DWORD);
begin
tagMONHSZSTRUCT(GetRecordPtr^).dwTime := val;
end;
function __tagMONHSZSTRUCT__Wrapper.getdwTime : DWORD;
begin
result := tagMONHSZSTRUCT(GetRecordPtr^).dwTime;
end;
procedure __tagMONHSZSTRUCT__Wrapper.setHSz(const val : HSz);
begin
tagMONHSZSTRUCT(GetRecordPtr^).HSz := val;
end;
function __tagMONHSZSTRUCT__Wrapper.getHSz : HSz;
begin
result := tagMONHSZSTRUCT(GetRecordPtr^).HSz;
end;
procedure __tagMONHSZSTRUCT__Wrapper.sethTask(const val : THandle);
begin
tagMONHSZSTRUCT(GetRecordPtr^).hTask := val;
end;
function __tagMONHSZSTRUCT__Wrapper.gethTask : THandle;
begin
result := tagMONHSZSTRUCT(GetRecordPtr^).hTask;
end;
procedure __tagMONHSZSTRUCT__Wrapper.setwReserved(const val : UINT);
begin
tagMONHSZSTRUCT(GetRecordPtr^).wReserved := val;
end;
function __tagMONHSZSTRUCT__Wrapper.getwReserved : UINT;
begin
result := tagMONHSZSTRUCT(GetRecordPtr^).wReserved;
end;
function __tagMONHSZSTRUCTA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMONHSZSTRUCTA__Wrapper.setcb(const val : UINT);
begin
tagMONHSZSTRUCTA(GetRecordPtr^).cb := val;
end;
function __tagMONHSZSTRUCTA__Wrapper.getcb : UINT;
begin
result := tagMONHSZSTRUCTA(GetRecordPtr^).cb;
end;
procedure __tagMONHSZSTRUCTA__Wrapper.setfsAction(const val : BOOL);
begin
tagMONHSZSTRUCTA(GetRecordPtr^).fsAction := val;
end;
function __tagMONHSZSTRUCTA__Wrapper.getfsAction : BOOL;
begin
result := tagMONHSZSTRUCTA(GetRecordPtr^).fsAction;
end;
procedure __tagMONHSZSTRUCTA__Wrapper.setdwTime(const val : DWORD);
begin
tagMONHSZSTRUCTA(GetRecordPtr^).dwTime := val;
end;
function __tagMONHSZSTRUCTA__Wrapper.getdwTime : DWORD;
begin
result := tagMONHSZSTRUCTA(GetRecordPtr^).dwTime;
end;
procedure __tagMONHSZSTRUCTA__Wrapper.setHSz(const val : HSz);
begin
tagMONHSZSTRUCTA(GetRecordPtr^).HSz := val;
end;
function __tagMONHSZSTRUCTA__Wrapper.getHSz : HSz;
begin
result := tagMONHSZSTRUCTA(GetRecordPtr^).HSz;
end;
procedure __tagMONHSZSTRUCTA__Wrapper.sethTask(const val : THandle);
begin
tagMONHSZSTRUCTA(GetRecordPtr^).hTask := val;
end;
function __tagMONHSZSTRUCTA__Wrapper.gethTask : THandle;
begin
result := tagMONHSZSTRUCTA(GetRecordPtr^).hTask;
end;
procedure __tagMONHSZSTRUCTA__Wrapper.setwReserved(const val : UINT);
begin
tagMONHSZSTRUCTA(GetRecordPtr^).wReserved := val;
end;
function __tagMONHSZSTRUCTA__Wrapper.getwReserved : UINT;
begin
result := tagMONHSZSTRUCTA(GetRecordPtr^).wReserved;
end;
function __tagMONHSZSTRUCTW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMONHSZSTRUCTW__Wrapper.setcb(const val : UINT);
begin
tagMONHSZSTRUCTW(GetRecordPtr^).cb := val;
end;
function __tagMONHSZSTRUCTW__Wrapper.getcb : UINT;
begin
result := tagMONHSZSTRUCTW(GetRecordPtr^).cb;
end;
procedure __tagMONHSZSTRUCTW__Wrapper.setfsAction(const val : BOOL);
begin
tagMONHSZSTRUCTW(GetRecordPtr^).fsAction := val;
end;
function __tagMONHSZSTRUCTW__Wrapper.getfsAction : BOOL;
begin
result := tagMONHSZSTRUCTW(GetRecordPtr^).fsAction;
end;
procedure __tagMONHSZSTRUCTW__Wrapper.setdwTime(const val : DWORD);
begin
tagMONHSZSTRUCTW(GetRecordPtr^).dwTime := val;
end;
function __tagMONHSZSTRUCTW__Wrapper.getdwTime : DWORD;
begin
result := tagMONHSZSTRUCTW(GetRecordPtr^).dwTime;
end;
procedure __tagMONHSZSTRUCTW__Wrapper.setHSz(const val : HSz);
begin
tagMONHSZSTRUCTW(GetRecordPtr^).HSz := val;
end;
function __tagMONHSZSTRUCTW__Wrapper.getHSz : HSz;
begin
result := tagMONHSZSTRUCTW(GetRecordPtr^).HSz;
end;
procedure __tagMONHSZSTRUCTW__Wrapper.sethTask(const val : THandle);
begin
tagMONHSZSTRUCTW(GetRecordPtr^).hTask := val;
end;
function __tagMONHSZSTRUCTW__Wrapper.gethTask : THandle;
begin
result := tagMONHSZSTRUCTW(GetRecordPtr^).hTask;
end;
procedure __tagMONHSZSTRUCTW__Wrapper.setwReserved(const val : UINT);
begin
tagMONHSZSTRUCTW(GetRecordPtr^).wReserved := val;
end;
function __tagMONHSZSTRUCTW__Wrapper.getwReserved : UINT;
begin
result := tagMONHSZSTRUCTW(GetRecordPtr^).wReserved;
end;
function __tagMONLINKSTRUCT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMONLINKSTRUCT__Wrapper.setcb(const val : UINT);
begin
tagMONLINKSTRUCT(GetRecordPtr^).cb := val;
end;
function __tagMONLINKSTRUCT__Wrapper.getcb : UINT;
begin
result := tagMONLINKSTRUCT(GetRecordPtr^).cb;
end;
procedure __tagMONLINKSTRUCT__Wrapper.setdwTime(const val : DWORD);
begin
tagMONLINKSTRUCT(GetRecordPtr^).dwTime := val;
end;
function __tagMONLINKSTRUCT__Wrapper.getdwTime : DWORD;
begin
result := tagMONLINKSTRUCT(GetRecordPtr^).dwTime;
end;
procedure __tagMONLINKSTRUCT__Wrapper.sethTask(const val : THandle);
begin
tagMONLINKSTRUCT(GetRecordPtr^).hTask := val;
end;
function __tagMONLINKSTRUCT__Wrapper.gethTask : THandle;
begin
result := tagMONLINKSTRUCT(GetRecordPtr^).hTask;
end;
procedure __tagMONLINKSTRUCT__Wrapper.setfEstablished(const val : BOOL);
begin
tagMONLINKSTRUCT(GetRecordPtr^).fEstablished := val;
end;
function __tagMONLINKSTRUCT__Wrapper.getfEstablished : BOOL;
begin
result := tagMONLINKSTRUCT(GetRecordPtr^).fEstablished;
end;
procedure __tagMONLINKSTRUCT__Wrapper.setfNoData(const val : BOOL);
begin
tagMONLINKSTRUCT(GetRecordPtr^).fNoData := val;
end;
function __tagMONLINKSTRUCT__Wrapper.getfNoData : BOOL;
begin
result := tagMONLINKSTRUCT(GetRecordPtr^).fNoData;
end;
procedure __tagMONLINKSTRUCT__Wrapper.sethszSvc(const val : HSz);
begin
tagMONLINKSTRUCT(GetRecordPtr^).hszSvc := val;
end;
function __tagMONLINKSTRUCT__Wrapper.gethszSvc : HSz;
begin
result := tagMONLINKSTRUCT(GetRecordPtr^).hszSvc;
end;
procedure __tagMONLINKSTRUCT__Wrapper.sethszTopic(const val : HSz);
begin
tagMONLINKSTRUCT(GetRecordPtr^).hszTopic := val;
end;
function __tagMONLINKSTRUCT__Wrapper.gethszTopic : HSz;
begin
result := tagMONLINKSTRUCT(GetRecordPtr^).hszTopic;
end;
procedure __tagMONLINKSTRUCT__Wrapper.sethszItem(const val : HSz);
begin
tagMONLINKSTRUCT(GetRecordPtr^).hszItem := val;
end;
function __tagMONLINKSTRUCT__Wrapper.gethszItem : HSz;
begin
result := tagMONLINKSTRUCT(GetRecordPtr^).hszItem;
end;
procedure __tagMONLINKSTRUCT__Wrapper.setwFmt(const val : UINT);
begin
tagMONLINKSTRUCT(GetRecordPtr^).wFmt := val;
end;
function __tagMONLINKSTRUCT__Wrapper.getwFmt : UINT;
begin
result := tagMONLINKSTRUCT(GetRecordPtr^).wFmt;
end;
procedure __tagMONLINKSTRUCT__Wrapper.setfServer(const val : BOOL);
begin
tagMONLINKSTRUCT(GetRecordPtr^).fServer := val;
end;
function __tagMONLINKSTRUCT__Wrapper.getfServer : BOOL;
begin
result := tagMONLINKSTRUCT(GetRecordPtr^).fServer;
end;
procedure __tagMONLINKSTRUCT__Wrapper.sethConvServer(const val : HConv);
begin
tagMONLINKSTRUCT(GetRecordPtr^).hConvServer := val;
end;
function __tagMONLINKSTRUCT__Wrapper.gethConvServer : HConv;
begin
result := tagMONLINKSTRUCT(GetRecordPtr^).hConvServer;
end;
procedure __tagMONLINKSTRUCT__Wrapper.sethConvClient(const val : HConv);
begin
tagMONLINKSTRUCT(GetRecordPtr^).hConvClient := val;
end;
function __tagMONLINKSTRUCT__Wrapper.gethConvClient : HConv;
begin
result := tagMONLINKSTRUCT(GetRecordPtr^).hConvClient;
end;
function __tagMONMSGSTRUCT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagMONMSGSTRUCT__Wrapper.setcb(const val : UINT);
begin
tagMONMSGSTRUCT(GetRecordPtr^).cb := val;
end;
function __tagMONMSGSTRUCT__Wrapper.getcb : UINT;
begin
result := tagMONMSGSTRUCT(GetRecordPtr^).cb;
end;
procedure __tagMONMSGSTRUCT__Wrapper.setdwTime(const val : DWORD);
begin
tagMONMSGSTRUCT(GetRecordPtr^).dwTime := val;
end;
function __tagMONMSGSTRUCT__Wrapper.getdwTime : DWORD;
begin
result := tagMONMSGSTRUCT(GetRecordPtr^).dwTime;
end;
procedure __tagMONMSGSTRUCT__Wrapper.sethTask(const val : THandle);
begin
tagMONMSGSTRUCT(GetRecordPtr^).hTask := val;
end;
function __tagMONMSGSTRUCT__Wrapper.gethTask : THandle;
begin
result := tagMONMSGSTRUCT(GetRecordPtr^).hTask;
end;
procedure __tagMONMSGSTRUCT__Wrapper.setwMsg(const val : UINT);
begin
tagMONMSGSTRUCT(GetRecordPtr^).wMsg := val;
end;
function __tagMONMSGSTRUCT__Wrapper.getwMsg : UINT;
begin
result := tagMONMSGSTRUCT(GetRecordPtr^).wMsg;
end;
procedure __tagMONMSGSTRUCT__Wrapper.setwParam(const val : wParam);
begin
tagMONMSGSTRUCT(GetRecordPtr^).wParam := val;
end;
function __tagMONMSGSTRUCT__Wrapper.getwParam : wParam;
begin
result := tagMONMSGSTRUCT(GetRecordPtr^).wParam;
end;
procedure __tagMONMSGSTRUCT__Wrapper.setlParam(const val : lParam);
begin
tagMONMSGSTRUCT(GetRecordPtr^).lParam := val;
end;
function __tagMONMSGSTRUCT__Wrapper.getlParam : lParam;
begin
result := tagMONMSGSTRUCT(GetRecordPtr^).lParam;
end;
function __TConvContext__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TConvContext__Wrapper.setcb(const val : UINT);
begin
TConvContext(GetRecordPtr^).cb := val;
end;
function __TConvContext__Wrapper.getcb : UINT;
begin
result := TConvContext(GetRecordPtr^).cb;
end;
procedure __TConvContext__Wrapper.setwFlags(const val : UINT);
begin
TConvContext(GetRecordPtr^).wFlags := val;
end;
function __TConvContext__Wrapper.getwFlags : UINT;
begin
result := TConvContext(GetRecordPtr^).wFlags;
end;
procedure __TConvContext__Wrapper.setwCountryID(const val : UINT);
begin
TConvContext(GetRecordPtr^).wCountryID := val;
end;
function __TConvContext__Wrapper.getwCountryID : UINT;
begin
result := TConvContext(GetRecordPtr^).wCountryID;
end;
procedure __TConvContext__Wrapper.setiCodePage(const val : Integer);
begin
TConvContext(GetRecordPtr^).iCodePage := val;
end;
function __TConvContext__Wrapper.getiCodePage : Integer;
begin
result := TConvContext(GetRecordPtr^).iCodePage;
end;
procedure __TConvContext__Wrapper.setdwLangID(const val : DWORD);
begin
TConvContext(GetRecordPtr^).dwLangID := val;
end;
function __TConvContext__Wrapper.getdwLangID : DWORD;
begin
result := TConvContext(GetRecordPtr^).dwLangID;
end;
procedure __TConvContext__Wrapper.setdwSecurity(const val : DWORD);
begin
TConvContext(GetRecordPtr^).dwSecurity := val;
end;
function __TConvContext__Wrapper.getdwSecurity : DWORD;
begin
result := TConvContext(GetRecordPtr^).dwSecurity;
end;
function __TConvInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TConvInfo__Wrapper.setcb(const val : DWORD);
begin
TConvInfo(GetRecordPtr^).cb := val;
end;
function __TConvInfo__Wrapper.getcb : DWORD;
begin
result := TConvInfo(GetRecordPtr^).cb;
end;
procedure __TConvInfo__Wrapper.sethUser(const val : DWORD);
begin
TConvInfo(GetRecordPtr^).hUser := val;
end;
function __TConvInfo__Wrapper.gethUser : DWORD;
begin
result := TConvInfo(GetRecordPtr^).hUser;
end;
procedure __TConvInfo__Wrapper.sethConvPartner(const val : HConv);
begin
TConvInfo(GetRecordPtr^).hConvPartner := val;
end;
function __TConvInfo__Wrapper.gethConvPartner : HConv;
begin
result := TConvInfo(GetRecordPtr^).hConvPartner;
end;
procedure __TConvInfo__Wrapper.sethszSvcPartner(const val : HSz);
begin
TConvInfo(GetRecordPtr^).hszSvcPartner := val;
end;
function __TConvInfo__Wrapper.gethszSvcPartner : HSz;
begin
result := TConvInfo(GetRecordPtr^).hszSvcPartner;
end;
procedure __TConvInfo__Wrapper.sethszServiceReq(const val : HSz);
begin
TConvInfo(GetRecordPtr^).hszServiceReq := val;
end;
function __TConvInfo__Wrapper.gethszServiceReq : HSz;
begin
result := TConvInfo(GetRecordPtr^).hszServiceReq;
end;
procedure __TConvInfo__Wrapper.sethszTopic(const val : HSz);
begin
TConvInfo(GetRecordPtr^).hszTopic := val;
end;
function __TConvInfo__Wrapper.gethszTopic : HSz;
begin
result := TConvInfo(GetRecordPtr^).hszTopic;
end;
procedure __TConvInfo__Wrapper.sethszItem(const val : HSz);
begin
TConvInfo(GetRecordPtr^).hszItem := val;
end;
function __TConvInfo__Wrapper.gethszItem : HSz;
begin
result := TConvInfo(GetRecordPtr^).hszItem;
end;
procedure __TConvInfo__Wrapper.setwFmt(const val : UINT);
begin
TConvInfo(GetRecordPtr^).wFmt := val;
end;
function __TConvInfo__Wrapper.getwFmt : UINT;
begin
result := TConvInfo(GetRecordPtr^).wFmt;
end;
procedure __TConvInfo__Wrapper.setwType(const val : UINT);
begin
TConvInfo(GetRecordPtr^).wType := val;
end;
function __TConvInfo__Wrapper.getwType : UINT;
begin
result := TConvInfo(GetRecordPtr^).wType;
end;
procedure __TConvInfo__Wrapper.setwStatus(const val : UINT);
begin
TConvInfo(GetRecordPtr^).wStatus := val;
end;
function __TConvInfo__Wrapper.getwStatus : UINT;
begin
result := TConvInfo(GetRecordPtr^).wStatus;
end;
procedure __TConvInfo__Wrapper.setwConvst(const val : UINT);
begin
TConvInfo(GetRecordPtr^).wConvst := val;
end;
function __TConvInfo__Wrapper.getwConvst : UINT;
begin
result := TConvInfo(GetRecordPtr^).wConvst;
end;
procedure __TConvInfo__Wrapper.setwLastError(const val : UINT);
begin
TConvInfo(GetRecordPtr^).wLastError := val;
end;
function __TConvInfo__Wrapper.getwLastError : UINT;
begin
result := TConvInfo(GetRecordPtr^).wLastError;
end;
procedure __TConvInfo__Wrapper.setHConvList(const val : HConvList);
begin
TConvInfo(GetRecordPtr^).HConvList := val;
end;
function __TConvInfo__Wrapper.getHConvList : HConvList;
begin
result := TConvInfo(GetRecordPtr^).HConvList;
end;
function __TDdemlMsgHookData__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDdemlMsgHookData__Wrapper.setuiLo(const val : UINT);
begin
TDdemlMsgHookData(GetRecordPtr^).uiLo := val;
end;
function __TDdemlMsgHookData__Wrapper.getuiLo : UINT;
begin
result := TDdemlMsgHookData(GetRecordPtr^).uiLo;
end;
procedure __TDdemlMsgHookData__Wrapper.setuiHi(const val : UINT);
begin
TDdemlMsgHookData(GetRecordPtr^).uiHi := val;
end;
function __TDdemlMsgHookData__Wrapper.getuiHi : UINT;
begin
result := TDdemlMsgHookData(GetRecordPtr^).uiHi;
end;
procedure __TDdemlMsgHookData__Wrapper.setcbData(const val : DWORD);
begin
TDdemlMsgHookData(GetRecordPtr^).cbData := val;
end;
function __TDdemlMsgHookData__Wrapper.getcbData : DWORD;
begin
result := TDdemlMsgHookData(GetRecordPtr^).cbData;
end;
function __THSZPair__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __THSZPair__Wrapper.sethszSvc(const val : HSz);
begin
THSZPair(GetRecordPtr^).hszSvc := val;
end;
function __THSZPair__Wrapper.gethszSvc : HSz;
begin
result := THSZPair(GetRecordPtr^).hszSvc;
end;
procedure __THSZPair__Wrapper.sethszTopic(const val : HSz);
begin
THSZPair(GetRecordPtr^).hszTopic := val;
end;
function __THSZPair__Wrapper.gethszTopic : HSz;
begin
result := THSZPair(GetRecordPtr^).hszTopic;
end;
function __TMonCBStruct__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMonCBStruct__Wrapper.setcb(const val : UINT);
begin
TMonCBStruct(GetRecordPtr^).cb := val;
end;
function __TMonCBStruct__Wrapper.getcb : UINT;
begin
result := TMonCBStruct(GetRecordPtr^).cb;
end;
procedure __TMonCBStruct__Wrapper.setdwTime(const val : DWORD);
begin
TMonCBStruct(GetRecordPtr^).dwTime := val;
end;
function __TMonCBStruct__Wrapper.getdwTime : DWORD;
begin
result := TMonCBStruct(GetRecordPtr^).dwTime;
end;
procedure __TMonCBStruct__Wrapper.sethTask(const val : THandle);
begin
TMonCBStruct(GetRecordPtr^).hTask := val;
end;
function __TMonCBStruct__Wrapper.gethTask : THandle;
begin
result := TMonCBStruct(GetRecordPtr^).hTask;
end;
procedure __TMonCBStruct__Wrapper.setdwRet(const val : DWORD);
begin
TMonCBStruct(GetRecordPtr^).dwRet := val;
end;
function __TMonCBStruct__Wrapper.getdwRet : DWORD;
begin
result := TMonCBStruct(GetRecordPtr^).dwRet;
end;
procedure __TMonCBStruct__Wrapper.setwType(const val : UINT);
begin
TMonCBStruct(GetRecordPtr^).wType := val;
end;
function __TMonCBStruct__Wrapper.getwType : UINT;
begin
result := TMonCBStruct(GetRecordPtr^).wType;
end;
procedure __TMonCBStruct__Wrapper.setwFmt(const val : UINT);
begin
TMonCBStruct(GetRecordPtr^).wFmt := val;
end;
function __TMonCBStruct__Wrapper.getwFmt : UINT;
begin
result := TMonCBStruct(GetRecordPtr^).wFmt;
end;
procedure __TMonCBStruct__Wrapper.setHConv(const val : HConv);
begin
TMonCBStruct(GetRecordPtr^).HConv := val;
end;
function __TMonCBStruct__Wrapper.getHConv : HConv;
begin
result := TMonCBStruct(GetRecordPtr^).HConv;
end;
procedure __TMonCBStruct__Wrapper.sethsz1(const val : HSz);
begin
TMonCBStruct(GetRecordPtr^).hsz1 := val;
end;
function __TMonCBStruct__Wrapper.gethsz1 : HSz;
begin
result := TMonCBStruct(GetRecordPtr^).hsz1;
end;
procedure __TMonCBStruct__Wrapper.sethsz2(const val : HSz);
begin
TMonCBStruct(GetRecordPtr^).hsz2 := val;
end;
function __TMonCBStruct__Wrapper.gethsz2 : HSz;
begin
result := TMonCBStruct(GetRecordPtr^).hsz2;
end;
procedure __TMonCBStruct__Wrapper.sethData(const val : HDDEData);
begin
TMonCBStruct(GetRecordPtr^).hData := val;
end;
function __TMonCBStruct__Wrapper.gethData : HDDEData;
begin
result := TMonCBStruct(GetRecordPtr^).hData;
end;
procedure __TMonCBStruct__Wrapper.setdwData1(const val : DWORD);
begin
TMonCBStruct(GetRecordPtr^).dwData1 := val;
end;
function __TMonCBStruct__Wrapper.getdwData1 : DWORD;
begin
result := TMonCBStruct(GetRecordPtr^).dwData1;
end;
procedure __TMonCBStruct__Wrapper.setdwData2(const val : DWORD);
begin
TMonCBStruct(GetRecordPtr^).dwData2 := val;
end;
function __TMonCBStruct__Wrapper.getdwData2 : DWORD;
begin
result := TMonCBStruct(GetRecordPtr^).dwData2;
end;
procedure __TMonCBStruct__Wrapper.setcbData(const val : DWORD);
begin
TMonCBStruct(GetRecordPtr^).cbData := val;
end;
function __TMonCBStruct__Wrapper.getcbData : DWORD;
begin
result := TMonCBStruct(GetRecordPtr^).cbData;
end;
function __TMonConvStruct__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMonConvStruct__Wrapper.setcb(const val : UINT);
begin
TMonConvStruct(GetRecordPtr^).cb := val;
end;
function __TMonConvStruct__Wrapper.getcb : UINT;
begin
result := TMonConvStruct(GetRecordPtr^).cb;
end;
procedure __TMonConvStruct__Wrapper.setfConnect(const val : BOOL);
begin
TMonConvStruct(GetRecordPtr^).fConnect := val;
end;
function __TMonConvStruct__Wrapper.getfConnect : BOOL;
begin
result := TMonConvStruct(GetRecordPtr^).fConnect;
end;
procedure __TMonConvStruct__Wrapper.setdwTime(const val : DWORD);
begin
TMonConvStruct(GetRecordPtr^).dwTime := val;
end;
function __TMonConvStruct__Wrapper.getdwTime : DWORD;
begin
result := TMonConvStruct(GetRecordPtr^).dwTime;
end;
procedure __TMonConvStruct__Wrapper.sethTask(const val : THandle);
begin
TMonConvStruct(GetRecordPtr^).hTask := val;
end;
function __TMonConvStruct__Wrapper.gethTask : THandle;
begin
result := TMonConvStruct(GetRecordPtr^).hTask;
end;
procedure __TMonConvStruct__Wrapper.sethszSvc(const val : HSz);
begin
TMonConvStruct(GetRecordPtr^).hszSvc := val;
end;
function __TMonConvStruct__Wrapper.gethszSvc : HSz;
begin
result := TMonConvStruct(GetRecordPtr^).hszSvc;
end;
procedure __TMonConvStruct__Wrapper.sethszTopic(const val : HSz);
begin
TMonConvStruct(GetRecordPtr^).hszTopic := val;
end;
function __TMonConvStruct__Wrapper.gethszTopic : HSz;
begin
result := TMonConvStruct(GetRecordPtr^).hszTopic;
end;
procedure __TMonConvStruct__Wrapper.sethConvClient(const val : HConv);
begin
TMonConvStruct(GetRecordPtr^).hConvClient := val;
end;
function __TMonConvStruct__Wrapper.gethConvClient : HConv;
begin
result := TMonConvStruct(GetRecordPtr^).hConvClient;
end;
procedure __TMonConvStruct__Wrapper.sethConvServer(const val : HConv);
begin
TMonConvStruct(GetRecordPtr^).hConvServer := val;
end;
function __TMonConvStruct__Wrapper.gethConvServer : HConv;
begin
result := TMonConvStruct(GetRecordPtr^).hConvServer;
end;
function __TMonErrStruct__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMonErrStruct__Wrapper.setcb(const val : UINT);
begin
TMonErrStruct(GetRecordPtr^).cb := val;
end;
function __TMonErrStruct__Wrapper.getcb : UINT;
begin
result := TMonErrStruct(GetRecordPtr^).cb;
end;
procedure __TMonErrStruct__Wrapper.setwLastError(const val : UINT);
begin
TMonErrStruct(GetRecordPtr^).wLastError := val;
end;
function __TMonErrStruct__Wrapper.getwLastError : UINT;
begin
result := TMonErrStruct(GetRecordPtr^).wLastError;
end;
procedure __TMonErrStruct__Wrapper.setdwTime(const val : DWORD);
begin
TMonErrStruct(GetRecordPtr^).dwTime := val;
end;
function __TMonErrStruct__Wrapper.getdwTime : DWORD;
begin
result := TMonErrStruct(GetRecordPtr^).dwTime;
end;
procedure __TMonErrStruct__Wrapper.sethTask(const val : THandle);
begin
TMonErrStruct(GetRecordPtr^).hTask := val;
end;
function __TMonErrStruct__Wrapper.gethTask : THandle;
begin
result := TMonErrStruct(GetRecordPtr^).hTask;
end;
function __TMonHSZStruct__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMonHSZStruct__Wrapper.setcb(const val : UINT);
begin
TMonHSZStruct(GetRecordPtr^).cb := val;
end;
function __TMonHSZStruct__Wrapper.getcb : UINT;
begin
result := TMonHSZStruct(GetRecordPtr^).cb;
end;
procedure __TMonHSZStruct__Wrapper.setfsAction(const val : BOOL);
begin
TMonHSZStruct(GetRecordPtr^).fsAction := val;
end;
function __TMonHSZStruct__Wrapper.getfsAction : BOOL;
begin
result := TMonHSZStruct(GetRecordPtr^).fsAction;
end;
procedure __TMonHSZStruct__Wrapper.setdwTime(const val : DWORD);
begin
TMonHSZStruct(GetRecordPtr^).dwTime := val;
end;
function __TMonHSZStruct__Wrapper.getdwTime : DWORD;
begin
result := TMonHSZStruct(GetRecordPtr^).dwTime;
end;
procedure __TMonHSZStruct__Wrapper.setHSz(const val : HSz);
begin
TMonHSZStruct(GetRecordPtr^).HSz := val;
end;
function __TMonHSZStruct__Wrapper.getHSz : HSz;
begin
result := TMonHSZStruct(GetRecordPtr^).HSz;
end;
procedure __TMonHSZStruct__Wrapper.sethTask(const val : THandle);
begin
TMonHSZStruct(GetRecordPtr^).hTask := val;
end;
function __TMonHSZStruct__Wrapper.gethTask : THandle;
begin
result := TMonHSZStruct(GetRecordPtr^).hTask;
end;
procedure __TMonHSZStruct__Wrapper.setwReserved(const val : UINT);
begin
TMonHSZStruct(GetRecordPtr^).wReserved := val;
end;
function __TMonHSZStruct__Wrapper.getwReserved : UINT;
begin
result := TMonHSZStruct(GetRecordPtr^).wReserved;
end;
function __TMonHSZStructA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMonHSZStructA__Wrapper.setcb(const val : UINT);
begin
TMonHSZStructA(GetRecordPtr^).cb := val;
end;
function __TMonHSZStructA__Wrapper.getcb : UINT;
begin
result := TMonHSZStructA(GetRecordPtr^).cb;
end;
procedure __TMonHSZStructA__Wrapper.setfsAction(const val : BOOL);
begin
TMonHSZStructA(GetRecordPtr^).fsAction := val;
end;
function __TMonHSZStructA__Wrapper.getfsAction : BOOL;
begin
result := TMonHSZStructA(GetRecordPtr^).fsAction;
end;
procedure __TMonHSZStructA__Wrapper.setdwTime(const val : DWORD);
begin
TMonHSZStructA(GetRecordPtr^).dwTime := val;
end;
function __TMonHSZStructA__Wrapper.getdwTime : DWORD;
begin
result := TMonHSZStructA(GetRecordPtr^).dwTime;
end;
procedure __TMonHSZStructA__Wrapper.setHSz(const val : HSz);
begin
TMonHSZStructA(GetRecordPtr^).HSz := val;
end;
function __TMonHSZStructA__Wrapper.getHSz : HSz;
begin
result := TMonHSZStructA(GetRecordPtr^).HSz;
end;
procedure __TMonHSZStructA__Wrapper.sethTask(const val : THandle);
begin
TMonHSZStructA(GetRecordPtr^).hTask := val;
end;
function __TMonHSZStructA__Wrapper.gethTask : THandle;
begin
result := TMonHSZStructA(GetRecordPtr^).hTask;
end;
procedure __TMonHSZStructA__Wrapper.setwReserved(const val : UINT);
begin
TMonHSZStructA(GetRecordPtr^).wReserved := val;
end;
function __TMonHSZStructA__Wrapper.getwReserved : UINT;
begin
result := TMonHSZStructA(GetRecordPtr^).wReserved;
end;
function __TMonHSZStructW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMonHSZStructW__Wrapper.setcb(const val : UINT);
begin
TMonHSZStructW(GetRecordPtr^).cb := val;
end;
function __TMonHSZStructW__Wrapper.getcb : UINT;
begin
result := TMonHSZStructW(GetRecordPtr^).cb;
end;
procedure __TMonHSZStructW__Wrapper.setfsAction(const val : BOOL);
begin
TMonHSZStructW(GetRecordPtr^).fsAction := val;
end;
function __TMonHSZStructW__Wrapper.getfsAction : BOOL;
begin
result := TMonHSZStructW(GetRecordPtr^).fsAction;
end;
procedure __TMonHSZStructW__Wrapper.setdwTime(const val : DWORD);
begin
TMonHSZStructW(GetRecordPtr^).dwTime := val;
end;
function __TMonHSZStructW__Wrapper.getdwTime : DWORD;
begin
result := TMonHSZStructW(GetRecordPtr^).dwTime;
end;
procedure __TMonHSZStructW__Wrapper.setHSz(const val : HSz);
begin
TMonHSZStructW(GetRecordPtr^).HSz := val;
end;
function __TMonHSZStructW__Wrapper.getHSz : HSz;
begin
result := TMonHSZStructW(GetRecordPtr^).HSz;
end;
procedure __TMonHSZStructW__Wrapper.sethTask(const val : THandle);
begin
TMonHSZStructW(GetRecordPtr^).hTask := val;
end;
function __TMonHSZStructW__Wrapper.gethTask : THandle;
begin
result := TMonHSZStructW(GetRecordPtr^).hTask;
end;
procedure __TMonHSZStructW__Wrapper.setwReserved(const val : UINT);
begin
TMonHSZStructW(GetRecordPtr^).wReserved := val;
end;
function __TMonHSZStructW__Wrapper.getwReserved : UINT;
begin
result := TMonHSZStructW(GetRecordPtr^).wReserved;
end;
function __TMonLinkStruct__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMonLinkStruct__Wrapper.setcb(const val : UINT);
begin
TMonLinkStruct(GetRecordPtr^).cb := val;
end;
function __TMonLinkStruct__Wrapper.getcb : UINT;
begin
result := TMonLinkStruct(GetRecordPtr^).cb;
end;
procedure __TMonLinkStruct__Wrapper.setdwTime(const val : DWORD);
begin
TMonLinkStruct(GetRecordPtr^).dwTime := val;
end;
function __TMonLinkStruct__Wrapper.getdwTime : DWORD;
begin
result := TMonLinkStruct(GetRecordPtr^).dwTime;
end;
procedure __TMonLinkStruct__Wrapper.sethTask(const val : THandle);
begin
TMonLinkStruct(GetRecordPtr^).hTask := val;
end;
function __TMonLinkStruct__Wrapper.gethTask : THandle;
begin
result := TMonLinkStruct(GetRecordPtr^).hTask;
end;
procedure __TMonLinkStruct__Wrapper.setfEstablished(const val : BOOL);
begin
TMonLinkStruct(GetRecordPtr^).fEstablished := val;
end;
function __TMonLinkStruct__Wrapper.getfEstablished : BOOL;
begin
result := TMonLinkStruct(GetRecordPtr^).fEstablished;
end;
procedure __TMonLinkStruct__Wrapper.setfNoData(const val : BOOL);
begin
TMonLinkStruct(GetRecordPtr^).fNoData := val;
end;
function __TMonLinkStruct__Wrapper.getfNoData : BOOL;
begin
result := TMonLinkStruct(GetRecordPtr^).fNoData;
end;
procedure __TMonLinkStruct__Wrapper.sethszSvc(const val : HSz);
begin
TMonLinkStruct(GetRecordPtr^).hszSvc := val;
end;
function __TMonLinkStruct__Wrapper.gethszSvc : HSz;
begin
result := TMonLinkStruct(GetRecordPtr^).hszSvc;
end;
procedure __TMonLinkStruct__Wrapper.sethszTopic(const val : HSz);
begin
TMonLinkStruct(GetRecordPtr^).hszTopic := val;
end;
function __TMonLinkStruct__Wrapper.gethszTopic : HSz;
begin
result := TMonLinkStruct(GetRecordPtr^).hszTopic;
end;
procedure __TMonLinkStruct__Wrapper.sethszItem(const val : HSz);
begin
TMonLinkStruct(GetRecordPtr^).hszItem := val;
end;
function __TMonLinkStruct__Wrapper.gethszItem : HSz;
begin
result := TMonLinkStruct(GetRecordPtr^).hszItem;
end;
procedure __TMonLinkStruct__Wrapper.setwFmt(const val : UINT);
begin
TMonLinkStruct(GetRecordPtr^).wFmt := val;
end;
function __TMonLinkStruct__Wrapper.getwFmt : UINT;
begin
result := TMonLinkStruct(GetRecordPtr^).wFmt;
end;
procedure __TMonLinkStruct__Wrapper.setfServer(const val : BOOL);
begin
TMonLinkStruct(GetRecordPtr^).fServer := val;
end;
function __TMonLinkStruct__Wrapper.getfServer : BOOL;
begin
result := TMonLinkStruct(GetRecordPtr^).fServer;
end;
procedure __TMonLinkStruct__Wrapper.sethConvServer(const val : HConv);
begin
TMonLinkStruct(GetRecordPtr^).hConvServer := val;
end;
function __TMonLinkStruct__Wrapper.gethConvServer : HConv;
begin
result := TMonLinkStruct(GetRecordPtr^).hConvServer;
end;
procedure __TMonLinkStruct__Wrapper.sethConvClient(const val : HConv);
begin
TMonLinkStruct(GetRecordPtr^).hConvClient := val;
end;
function __TMonLinkStruct__Wrapper.gethConvClient : HConv;
begin
result := TMonLinkStruct(GetRecordPtr^).hConvClient;
end;
function __TMonMsgStruct__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMonMsgStruct__Wrapper.setcb(const val : UINT);
begin
TMonMsgStruct(GetRecordPtr^).cb := val;
end;
function __TMonMsgStruct__Wrapper.getcb : UINT;
begin
result := TMonMsgStruct(GetRecordPtr^).cb;
end;
procedure __TMonMsgStruct__Wrapper.setdwTime(const val : DWORD);
begin
TMonMsgStruct(GetRecordPtr^).dwTime := val;
end;
function __TMonMsgStruct__Wrapper.getdwTime : DWORD;
begin
result := TMonMsgStruct(GetRecordPtr^).dwTime;
end;
procedure __TMonMsgStruct__Wrapper.sethTask(const val : THandle);
begin
TMonMsgStruct(GetRecordPtr^).hTask := val;
end;
function __TMonMsgStruct__Wrapper.gethTask : THandle;
begin
result := TMonMsgStruct(GetRecordPtr^).hTask;
end;
procedure __TMonMsgStruct__Wrapper.setwMsg(const val : UINT);
begin
TMonMsgStruct(GetRecordPtr^).wMsg := val;
end;
function __TMonMsgStruct__Wrapper.getwMsg : UINT;
begin
result := TMonMsgStruct(GetRecordPtr^).wMsg;
end;
procedure __TMonMsgStruct__Wrapper.setwParam(const val : wParam);
begin
TMonMsgStruct(GetRecordPtr^).wParam := val;
end;
function __TMonMsgStruct__Wrapper.getwParam : wParam;
begin
result := TMonMsgStruct(GetRecordPtr^).wParam;
end;
procedure __TMonMsgStruct__Wrapper.setlParam(const val : lParam);
begin
TMonMsgStruct(GetRecordPtr^).lParam := val;
end;
function __TMonMsgStruct__Wrapper.getlParam : lParam;
begin
result := TMonMsgStruct(GetRecordPtr^).lParam;
end;
function _CONVCONTEXT_ : IDispatch;
begin
  result := __CONVCONTEXT__Wrapper.Create;
end;
function _CONVINFO_ : IDispatch;
begin
  result := __CONVINFO__Wrapper.Create;
end;
function _DDEML_MSG_HOOK_DATA_ : IDispatch;
begin
  result := __DDEML_MSG_HOOK_DATA__Wrapper.Create;
end;
function _HSZPAIR_ : IDispatch;
begin
  result := __HSZPAIR__Wrapper.Create;
end;
function _MONCBSTRUCT_ : IDispatch;
begin
  result := __MONCBSTRUCT__Wrapper.Create;
end;
function _MONCONVSTRUCT_ : IDispatch;
begin
  result := __MONCONVSTRUCT__Wrapper.Create;
end;
function _MONERRSTRUCT_ : IDispatch;
begin
  result := __MONERRSTRUCT__Wrapper.Create;
end;
function _MONHSZSTRUCT_ : IDispatch;
begin
  result := __MONHSZSTRUCT__Wrapper.Create;
end;
function _MONHSZSTRUCTA_ : IDispatch;
begin
  result := __MONHSZSTRUCTA__Wrapper.Create;
end;
function _MONHSZSTRUCTW_ : IDispatch;
begin
  result := __MONHSZSTRUCTW__Wrapper.Create;
end;
function _MONLINKSTRUCT_ : IDispatch;
begin
  result := __MONLINKSTRUCT__Wrapper.Create;
end;
function _MONMSGSTRUCT_ : IDispatch;
begin
  result := __MONMSGSTRUCT__Wrapper.Create;
end;
function _tagCONVCONTEXT_ : IDispatch;
begin
  result := __tagCONVCONTEXT__Wrapper.Create;
end;
function _tagCONVINFO_ : IDispatch;
begin
  result := __tagCONVINFO__Wrapper.Create;
end;
function _tagDDEML_MSG_HOOK_DATA_ : IDispatch;
begin
  result := __tagDDEML_MSG_HOOK_DATA__Wrapper.Create;
end;
function _tagHSZPAIR_ : IDispatch;
begin
  result := __tagHSZPAIR__Wrapper.Create;
end;
function _tagMONCBSTRUCT_ : IDispatch;
begin
  result := __tagMONCBSTRUCT__Wrapper.Create;
end;
function _tagMONCONVSTRUCT_ : IDispatch;
begin
  result := __tagMONCONVSTRUCT__Wrapper.Create;
end;
function _tagMONERRSTRUCT_ : IDispatch;
begin
  result := __tagMONERRSTRUCT__Wrapper.Create;
end;
function _tagMONHSZSTRUCT_ : IDispatch;
begin
  result := __tagMONHSZSTRUCT__Wrapper.Create;
end;
function _tagMONHSZSTRUCTA_ : IDispatch;
begin
  result := __tagMONHSZSTRUCTA__Wrapper.Create;
end;
function _tagMONHSZSTRUCTW_ : IDispatch;
begin
  result := __tagMONHSZSTRUCTW__Wrapper.Create;
end;
function _tagMONLINKSTRUCT_ : IDispatch;
begin
  result := __tagMONLINKSTRUCT__Wrapper.Create;
end;
function _tagMONMSGSTRUCT_ : IDispatch;
begin
  result := __tagMONMSGSTRUCT__Wrapper.Create;
end;
function _TConvContext_ : IDispatch;
begin
  result := __TConvContext__Wrapper.Create;
end;
function _TConvInfo_ : IDispatch;
begin
  result := __TConvInfo__Wrapper.Create;
end;
function _TDdemlMsgHookData_ : IDispatch;
begin
  result := __TDdemlMsgHookData__Wrapper.Create;
end;
function _THSZPair_ : IDispatch;
begin
  result := __THSZPair__Wrapper.Create;
end;
function _TMonCBStruct_ : IDispatch;
begin
  result := __TMonCBStruct__Wrapper.Create;
end;
function _TMonConvStruct_ : IDispatch;
begin
  result := __TMonConvStruct__Wrapper.Create;
end;
function _TMonErrStruct_ : IDispatch;
begin
  result := __TMonErrStruct__Wrapper.Create;
end;
function _TMonHSZStruct_ : IDispatch;
begin
  result := __TMonHSZStruct__Wrapper.Create;
end;
function _TMonHSZStructA_ : IDispatch;
begin
  result := __TMonHSZStructA__Wrapper.Create;
end;
function _TMonHSZStructW_ : IDispatch;
begin
  result := __TMonHSZStructW__Wrapper.Create;
end;
function _TMonLinkStruct_ : IDispatch;
begin
  result := __TMonLinkStruct__Wrapper.Create;
end;
function _TMonMsgStruct_ : IDispatch;
begin
  result := __TMonMsgStruct__Wrapper.Create;
end;

type __CONVCONTEXT__Wrapper__ = class(__CONVCONTEXT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __CONVCONTEXT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertCONVCONTEXTToVariant(var R : CONVCONTEXT) : OleVariant;
var
__rw : __CONVCONTEXT__Wrapper__;
begin
__rw := __CONVCONTEXT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToCONVCONTEXT(const V : OleVariant) : CONVCONTEXT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := CONVCONTEXT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __CONVINFO__Wrapper__ = class(__CONVINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __CONVINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertCONVINFOToVariant(var R : CONVINFO) : OleVariant;
var
__rw : __CONVINFO__Wrapper__;
begin
__rw := __CONVINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToCONVINFO(const V : OleVariant) : CONVINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := CONVINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DDEML_MSG_HOOK_DATA__Wrapper__ = class(__DDEML_MSG_HOOK_DATA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DDEML_MSG_HOOK_DATA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDDEML_MSG_HOOK_DATAToVariant(var R : DDEML_MSG_HOOK_DATA) : OleVariant;
var
__rw : __DDEML_MSG_HOOK_DATA__Wrapper__;
begin
__rw := __DDEML_MSG_HOOK_DATA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDDEML_MSG_HOOK_DATA(const V : OleVariant) : DDEML_MSG_HOOK_DATA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DDEML_MSG_HOOK_DATA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __HSZPAIR__Wrapper__ = class(__HSZPAIR__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __HSZPAIR__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertHSZPAIRToVariant(var R : HSZPAIR) : OleVariant;
var
__rw : __HSZPAIR__Wrapper__;
begin
__rw := __HSZPAIR__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToHSZPAIR(const V : OleVariant) : HSZPAIR;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := HSZPAIR((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MONCBSTRUCT__Wrapper__ = class(__MONCBSTRUCT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MONCBSTRUCT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMONCBSTRUCTToVariant(var R : MONCBSTRUCT) : OleVariant;
var
__rw : __MONCBSTRUCT__Wrapper__;
begin
__rw := __MONCBSTRUCT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMONCBSTRUCT(const V : OleVariant) : MONCBSTRUCT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MONCBSTRUCT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MONCONVSTRUCT__Wrapper__ = class(__MONCONVSTRUCT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MONCONVSTRUCT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMONCONVSTRUCTToVariant(var R : MONCONVSTRUCT) : OleVariant;
var
__rw : __MONCONVSTRUCT__Wrapper__;
begin
__rw := __MONCONVSTRUCT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMONCONVSTRUCT(const V : OleVariant) : MONCONVSTRUCT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MONCONVSTRUCT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MONERRSTRUCT__Wrapper__ = class(__MONERRSTRUCT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MONERRSTRUCT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMONERRSTRUCTToVariant(var R : MONERRSTRUCT) : OleVariant;
var
__rw : __MONERRSTRUCT__Wrapper__;
begin
__rw := __MONERRSTRUCT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMONERRSTRUCT(const V : OleVariant) : MONERRSTRUCT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MONERRSTRUCT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MONHSZSTRUCT__Wrapper__ = class(__MONHSZSTRUCT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MONHSZSTRUCT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMONHSZSTRUCTToVariant(var R : MONHSZSTRUCT) : OleVariant;
var
__rw : __MONHSZSTRUCT__Wrapper__;
begin
__rw := __MONHSZSTRUCT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMONHSZSTRUCT(const V : OleVariant) : MONHSZSTRUCT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MONHSZSTRUCT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MONHSZSTRUCTA__Wrapper__ = class(__MONHSZSTRUCTA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MONHSZSTRUCTA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMONHSZSTRUCTAToVariant(var R : MONHSZSTRUCTA) : OleVariant;
var
__rw : __MONHSZSTRUCTA__Wrapper__;
begin
__rw := __MONHSZSTRUCTA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMONHSZSTRUCTA(const V : OleVariant) : MONHSZSTRUCTA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MONHSZSTRUCTA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MONHSZSTRUCTW__Wrapper__ = class(__MONHSZSTRUCTW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MONHSZSTRUCTW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMONHSZSTRUCTWToVariant(var R : MONHSZSTRUCTW) : OleVariant;
var
__rw : __MONHSZSTRUCTW__Wrapper__;
begin
__rw := __MONHSZSTRUCTW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMONHSZSTRUCTW(const V : OleVariant) : MONHSZSTRUCTW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MONHSZSTRUCTW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MONLINKSTRUCT__Wrapper__ = class(__MONLINKSTRUCT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MONLINKSTRUCT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMONLINKSTRUCTToVariant(var R : MONLINKSTRUCT) : OleVariant;
var
__rw : __MONLINKSTRUCT__Wrapper__;
begin
__rw := __MONLINKSTRUCT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMONLINKSTRUCT(const V : OleVariant) : MONLINKSTRUCT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MONLINKSTRUCT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MONMSGSTRUCT__Wrapper__ = class(__MONMSGSTRUCT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MONMSGSTRUCT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMONMSGSTRUCTToVariant(var R : MONMSGSTRUCT) : OleVariant;
var
__rw : __MONMSGSTRUCT__Wrapper__;
begin
__rw := __MONMSGSTRUCT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMONMSGSTRUCT(const V : OleVariant) : MONMSGSTRUCT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MONMSGSTRUCT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagCONVCONTEXT__Wrapper__ = class(__tagCONVCONTEXT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagCONVCONTEXT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagCONVCONTEXTToVariant(var R : tagCONVCONTEXT) : OleVariant;
var
__rw : __tagCONVCONTEXT__Wrapper__;
begin
__rw := __tagCONVCONTEXT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagCONVCONTEXT(const V : OleVariant) : tagCONVCONTEXT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagCONVCONTEXT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagCONVINFO__Wrapper__ = class(__tagCONVINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagCONVINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagCONVINFOToVariant(var R : tagCONVINFO) : OleVariant;
var
__rw : __tagCONVINFO__Wrapper__;
begin
__rw := __tagCONVINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagCONVINFO(const V : OleVariant) : tagCONVINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagCONVINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagDDEML_MSG_HOOK_DATA__Wrapper__ = class(__tagDDEML_MSG_HOOK_DATA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagDDEML_MSG_HOOK_DATA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagDDEML_MSG_HOOK_DATAToVariant(var R : tagDDEML_MSG_HOOK_DATA) : OleVariant;
var
__rw : __tagDDEML_MSG_HOOK_DATA__Wrapper__;
begin
__rw := __tagDDEML_MSG_HOOK_DATA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagDDEML_MSG_HOOK_DATA(const V : OleVariant) : tagDDEML_MSG_HOOK_DATA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagDDEML_MSG_HOOK_DATA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagHSZPAIR__Wrapper__ = class(__tagHSZPAIR__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagHSZPAIR__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagHSZPAIRToVariant(var R : tagHSZPAIR) : OleVariant;
var
__rw : __tagHSZPAIR__Wrapper__;
begin
__rw := __tagHSZPAIR__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagHSZPAIR(const V : OleVariant) : tagHSZPAIR;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagHSZPAIR((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMONCBSTRUCT__Wrapper__ = class(__tagMONCBSTRUCT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMONCBSTRUCT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMONCBSTRUCTToVariant(var R : tagMONCBSTRUCT) : OleVariant;
var
__rw : __tagMONCBSTRUCT__Wrapper__;
begin
__rw := __tagMONCBSTRUCT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMONCBSTRUCT(const V : OleVariant) : tagMONCBSTRUCT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMONCBSTRUCT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMONCONVSTRUCT__Wrapper__ = class(__tagMONCONVSTRUCT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMONCONVSTRUCT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMONCONVSTRUCTToVariant(var R : tagMONCONVSTRUCT) : OleVariant;
var
__rw : __tagMONCONVSTRUCT__Wrapper__;
begin
__rw := __tagMONCONVSTRUCT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMONCONVSTRUCT(const V : OleVariant) : tagMONCONVSTRUCT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMONCONVSTRUCT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMONERRSTRUCT__Wrapper__ = class(__tagMONERRSTRUCT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMONERRSTRUCT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMONERRSTRUCTToVariant(var R : tagMONERRSTRUCT) : OleVariant;
var
__rw : __tagMONERRSTRUCT__Wrapper__;
begin
__rw := __tagMONERRSTRUCT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMONERRSTRUCT(const V : OleVariant) : tagMONERRSTRUCT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMONERRSTRUCT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMONHSZSTRUCT__Wrapper__ = class(__tagMONHSZSTRUCT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMONHSZSTRUCT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMONHSZSTRUCTToVariant(var R : tagMONHSZSTRUCT) : OleVariant;
var
__rw : __tagMONHSZSTRUCT__Wrapper__;
begin
__rw := __tagMONHSZSTRUCT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMONHSZSTRUCT(const V : OleVariant) : tagMONHSZSTRUCT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMONHSZSTRUCT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMONHSZSTRUCTA__Wrapper__ = class(__tagMONHSZSTRUCTA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMONHSZSTRUCTA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMONHSZSTRUCTAToVariant(var R : tagMONHSZSTRUCTA) : OleVariant;
var
__rw : __tagMONHSZSTRUCTA__Wrapper__;
begin
__rw := __tagMONHSZSTRUCTA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMONHSZSTRUCTA(const V : OleVariant) : tagMONHSZSTRUCTA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMONHSZSTRUCTA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMONHSZSTRUCTW__Wrapper__ = class(__tagMONHSZSTRUCTW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMONHSZSTRUCTW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMONHSZSTRUCTWToVariant(var R : tagMONHSZSTRUCTW) : OleVariant;
var
__rw : __tagMONHSZSTRUCTW__Wrapper__;
begin
__rw := __tagMONHSZSTRUCTW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMONHSZSTRUCTW(const V : OleVariant) : tagMONHSZSTRUCTW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMONHSZSTRUCTW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMONLINKSTRUCT__Wrapper__ = class(__tagMONLINKSTRUCT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMONLINKSTRUCT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMONLINKSTRUCTToVariant(var R : tagMONLINKSTRUCT) : OleVariant;
var
__rw : __tagMONLINKSTRUCT__Wrapper__;
begin
__rw := __tagMONLINKSTRUCT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMONLINKSTRUCT(const V : OleVariant) : tagMONLINKSTRUCT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMONLINKSTRUCT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagMONMSGSTRUCT__Wrapper__ = class(__tagMONMSGSTRUCT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagMONMSGSTRUCT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagMONMSGSTRUCTToVariant(var R : tagMONMSGSTRUCT) : OleVariant;
var
__rw : __tagMONMSGSTRUCT__Wrapper__;
begin
__rw := __tagMONMSGSTRUCT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagMONMSGSTRUCT(const V : OleVariant) : tagMONMSGSTRUCT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagMONMSGSTRUCT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TConvContext__Wrapper__ = class(__TConvContext__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TConvContext__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTConvContextToVariant(var R : TConvContext) : OleVariant;
var
__rw : __TConvContext__Wrapper__;
begin
__rw := __TConvContext__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTConvContext(const V : OleVariant) : TConvContext;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TConvContext((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TConvInfo__Wrapper__ = class(__TConvInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TConvInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTConvInfoToVariant(var R : TConvInfo) : OleVariant;
var
__rw : __TConvInfo__Wrapper__;
begin
__rw := __TConvInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTConvInfo(const V : OleVariant) : TConvInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TConvInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDdemlMsgHookData__Wrapper__ = class(__TDdemlMsgHookData__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDdemlMsgHookData__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDdemlMsgHookDataToVariant(var R : TDdemlMsgHookData) : OleVariant;
var
__rw : __TDdemlMsgHookData__Wrapper__;
begin
__rw := __TDdemlMsgHookData__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDdemlMsgHookData(const V : OleVariant) : TDdemlMsgHookData;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDdemlMsgHookData((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __THSZPair__Wrapper__ = class(__THSZPair__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __THSZPair__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTHSZPairToVariant(var R : THSZPair) : OleVariant;
var
__rw : __THSZPair__Wrapper__;
begin
__rw := __THSZPair__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTHSZPair(const V : OleVariant) : THSZPair;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := THSZPair((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMonCBStruct__Wrapper__ = class(__TMonCBStruct__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMonCBStruct__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMonCBStructToVariant(var R : TMonCBStruct) : OleVariant;
var
__rw : __TMonCBStruct__Wrapper__;
begin
__rw := __TMonCBStruct__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMonCBStruct(const V : OleVariant) : TMonCBStruct;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMonCBStruct((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMonConvStruct__Wrapper__ = class(__TMonConvStruct__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMonConvStruct__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMonConvStructToVariant(var R : TMonConvStruct) : OleVariant;
var
__rw : __TMonConvStruct__Wrapper__;
begin
__rw := __TMonConvStruct__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMonConvStruct(const V : OleVariant) : TMonConvStruct;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMonConvStruct((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMonErrStruct__Wrapper__ = class(__TMonErrStruct__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMonErrStruct__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMonErrStructToVariant(var R : TMonErrStruct) : OleVariant;
var
__rw : __TMonErrStruct__Wrapper__;
begin
__rw := __TMonErrStruct__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMonErrStruct(const V : OleVariant) : TMonErrStruct;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMonErrStruct((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMonHSZStruct__Wrapper__ = class(__TMonHSZStruct__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMonHSZStruct__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMonHSZStructToVariant(var R : TMonHSZStruct) : OleVariant;
var
__rw : __TMonHSZStruct__Wrapper__;
begin
__rw := __TMonHSZStruct__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMonHSZStruct(const V : OleVariant) : TMonHSZStruct;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMonHSZStruct((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMonHSZStructA__Wrapper__ = class(__TMonHSZStructA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMonHSZStructA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMonHSZStructAToVariant(var R : TMonHSZStructA) : OleVariant;
var
__rw : __TMonHSZStructA__Wrapper__;
begin
__rw := __TMonHSZStructA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMonHSZStructA(const V : OleVariant) : TMonHSZStructA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMonHSZStructA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMonHSZStructW__Wrapper__ = class(__TMonHSZStructW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMonHSZStructW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMonHSZStructWToVariant(var R : TMonHSZStructW) : OleVariant;
var
__rw : __TMonHSZStructW__Wrapper__;
begin
__rw := __TMonHSZStructW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMonHSZStructW(const V : OleVariant) : TMonHSZStructW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMonHSZStructW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMonLinkStruct__Wrapper__ = class(__TMonLinkStruct__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMonLinkStruct__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMonLinkStructToVariant(var R : TMonLinkStruct) : OleVariant;
var
__rw : __TMonLinkStruct__Wrapper__;
begin
__rw := __TMonLinkStruct__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMonLinkStruct(const V : OleVariant) : TMonLinkStruct;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMonLinkStruct((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMonMsgStruct__Wrapper__ = class(__TMonMsgStruct__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMonMsgStruct__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMonMsgStructToVariant(var R : TMonMsgStruct) : OleVariant;
var
__rw : __TMonMsgStruct__Wrapper__;
begin
__rw := __TMonMsgStruct__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMonMsgStruct(const V : OleVariant) : TMonMsgStruct;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMonMsgStruct((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..138] of string = (
'XST_NULL'
,'XST_INCOMPLETE'
,'XST_CONNECTED'
,'XST_INIT1'
,'XST_INIT2'
,'XST_REQSENT'
,'XST_DATARCVD'
,'XST_POKESENT'
,'XST_POKEACKRCVD'
,'XST_EXECSENT'
,'XST_EXECACKRCVD'
,'XST_ADVSENT'
,'XST_UNADVSENT'
,'XST_ADVACKRCVD'
,'XST_UNADVACKRCVD'
,'XST_ADVDATASENT'
,'XST_ADVDATAACKRCVD'
,'CADV_LATEACK'
,'ST_CONNECTED'
,'ST_ADVISE'
,'ST_ISLOCAL'
,'ST_BLOCKED'
,'ST_CLIENT'
,'ST_TERMINATED'
,'ST_INLIST'
,'ST_BLOCKNEXT'
,'ST_ISSELF'
,'DDE_FACK'
,'DDE_FBUSY'
,'DDE_FDEFERUPD'
,'DDE_FACKREQ'
,'DDE_FRELEASE'
,'DDE_FREQUESTED'
,'DDE_FAPPSTATUS'
,'DDE_FNOTPROCESSED'
,'DDE_FACKRESERVED'
,'DDE_FADVRESERVED'
,'DDE_FDATRESERVED'
,'DDE_FPOKRESERVED'
,'MSGF_DDEMGR'
,'CP_WINANSI'
,'CP_WINUNICODE'
,'CP_WINNEUTRAL'
,'XTYPF_NOBLOCK'
,'XTYPF_NODATA'
,'XTYPF_ACKREQ'
,'XCLASS_MASK'
,'XCLASS_BOOL'
,'XCLASS_DATA'
,'XCLASS_FLAGS'
,'XCLASS_NOTIFICATION'
,'XTYP_ERROR'
,'XTYP_ADVDATA'
,'XTYP_ADVREQ'
,'XTYP_ADVSTART'
,'XTYP_ADVSTOP'
,'XTYP_EXECUTE'
,'XTYP_CONNECT'
,'XTYP_CONNECT_CONFIRM'
,'XTYP_XACT_COMPLETE'
,'XTYP_POKE'
,'XTYP_REGISTER'
,'XTYP_REQUEST'
,'XTYP_DISCONNECT'
,'XTYP_UNREGISTER'
,'XTYP_WILDCONNECT'
,'XTYP_MASK'
,'XTYP_SHIFT'
,'TIMEOUT_ASYNC'
,'QID_SYNC'
,'SZDDESYS_TOPIC'
,'SZDDESYS_ITEM_SYSITEMS'
,'SZDDESYS_ITEM_RTNMSG'
,'SZDDESYS_ITEM_STATUS'
,'SZDDESYS_ITEM_FORMATS'
,'SZDDESYS_ITEM_HELP'
,'CBR_BLOCK'
,'CBF_FAIL_SELFCONNECTIONS'
,'CBF_FAIL_CONNECTIONS'
,'CBF_FAIL_ADVISES'
,'CBF_FAIL_EXECUTES'
,'CBF_FAIL_POKES'
,'CBF_FAIL_REQUESTS'
,'CBF_FAIL_ALLSVRXACTIONS'
,'CBF_SKIP_CONNECT_CONFIRMS'
,'CBF_SKIP_REGISTRATIONS'
,'CBF_SKIP_UNREGISTRATIONS'
,'CBF_SKIP_DISCONNECTS'
,'CBF_SKIP_ALLNOTIFICATIONS'
,'APPCMD_CLIENTONLY'
,'APPCMD_FILTERINITS'
,'APPCMD_MASK'
,'APPCLASS_STANDARD'
,'APPCLASS_MASK'
,'EC_ENABLEALL'
,'EC_ENABLEONE'
,'EC_DISABLE'
,'EC_QUERYWAITING'
,'DNS_REGISTER'
,'DNS_UNREGISTER'
,'DNS_FILTERON'
,'DNS_FILTEROFF'
,'HDATA_APPOWNED'
,'DMLERR_NO_ERROR'
,'DMLERR_FIRST'
,'DMLERR_ADVACKTIMEOUT'
,'DMLERR_BUSY'
,'DMLERR_DATAACKTIMEOUT'
,'DMLERR_DLL_NOT_INITIALIZED'
,'DMLERR_DLL_USAGE'
,'DMLERR_EXECACKTIMEOUT'
,'DMLERR_INVALIDPARAMETER'
,'DMLERR_LOW_MEMORY'
,'DMLERR_MEMORY_ERROR'
,'DMLERR_NOTPROCESSED'
,'DMLERR_NO_CONV_ESTABLISHED'
,'DMLERR_POKEACKTIMEOUT'
,'DMLERR_POSTMSG_FAILED'
,'DMLERR_REENTRANCY'
,'DMLERR_SERVER_DIED'
,'DMLERR_SYS_ERROR'
,'DMLERR_UNADVACKTIMEOUT'
,'DMLERR_UNFOUND_QUEUE_ID'
,'DMLERR_LAST'
,'MH_CREATE'
,'MH_KEEP'
,'MH_DELETE'
,'MH_CLEANUP'
,'MAX_MONITORS'
,'APPCLASS_MONITOR'
,'XTYP_MONITOR'
,'MF_HSZ_INFO'
,'MF_SENDMSGS'
,'MF_POSTMSGS'
,'MF_CALLBACKS'
,'MF_ERRORS'
,'MF_LINKS'
,'MF_CONV'
,'ddelib'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,XST_NULL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,XST_INCOMPLETE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,XST_CONNECTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,XST_INIT1));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,XST_INIT2));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,XST_REQSENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,XST_DATARCVD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,XST_POKESENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,XST_POKEACKRCVD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,XST_EXECSENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,XST_EXECACKRCVD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,XST_ADVSENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,XST_UNADVSENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,XST_ADVACKRCVD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,XST_UNADVACKRCVD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,XST_ADVDATASENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,XST_ADVDATAACKRCVD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,CADV_LATEACK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,ST_CONNECTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,ST_ADVISE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,ST_ISLOCAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,ST_BLOCKED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,ST_CLIENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,ST_TERMINATED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,ST_INLIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,ST_BLOCKNEXT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,ST_ISSELF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,DDE_FACK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,DDE_FBUSY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,DDE_FDEFERUPD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,DDE_FACKREQ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,DDE_FRELEASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,DDE_FREQUESTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,DDE_FAPPSTATUS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,DDE_FNOTPROCESSED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,DDE_FACKRESERVED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,DDE_FADVRESERVED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,DDE_FDATRESERVED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,DDE_FPOKRESERVED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,MSGF_DDEMGR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,CP_WINANSI));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,CP_WINUNICODE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,CP_WINNEUTRAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,XTYPF_NOBLOCK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,XTYPF_NODATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,XTYPF_ACKREQ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,XCLASS_MASK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,XCLASS_BOOL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,XCLASS_DATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,XCLASS_FLAGS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,XCLASS_NOTIFICATION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,XTYP_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,XTYP_ADVDATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,XTYP_ADVREQ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,XTYP_ADVSTART));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,XTYP_ADVSTOP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,XTYP_EXECUTE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,XTYP_CONNECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,XTYP_CONNECT_CONFIRM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,XTYP_XACT_COMPLETE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,XTYP_POKE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,XTYP_REGISTER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,XTYP_REQUEST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,XTYP_DISCONNECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,XTYP_UNREGISTER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[65] ,XTYP_WILDCONNECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[66] ,XTYP_MASK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[67] ,XTYP_SHIFT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[68] ,TIMEOUT_ASYNC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[69] ,QID_SYNC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[70] ,SZDDESYS_TOPIC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[71] ,SZDDESYS_ITEM_SYSITEMS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[72] ,SZDDESYS_ITEM_RTNMSG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[73] ,SZDDESYS_ITEM_STATUS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[74] ,SZDDESYS_ITEM_FORMATS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[75] ,SZDDESYS_ITEM_HELP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[76] ,CBR_BLOCK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[77] ,CBF_FAIL_SELFCONNECTIONS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[78] ,CBF_FAIL_CONNECTIONS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[79] ,CBF_FAIL_ADVISES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[80] ,CBF_FAIL_EXECUTES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[81] ,CBF_FAIL_POKES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[82] ,CBF_FAIL_REQUESTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[83] ,CBF_FAIL_ALLSVRXACTIONS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[84] ,CBF_SKIP_CONNECT_CONFIRMS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[85] ,CBF_SKIP_REGISTRATIONS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[86] ,CBF_SKIP_UNREGISTRATIONS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[87] ,CBF_SKIP_DISCONNECTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[88] ,CBF_SKIP_ALLNOTIFICATIONS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[89] ,APPCMD_CLIENTONLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[90] ,APPCMD_FILTERINITS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[91] ,APPCMD_MASK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[92] ,APPCLASS_STANDARD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[93] ,APPCLASS_MASK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[94] ,EC_ENABLEALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[95] ,EC_ENABLEONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[96] ,EC_DISABLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[97] ,EC_QUERYWAITING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[98] ,DNS_REGISTER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[99] ,DNS_UNREGISTER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[100] ,DNS_FILTERON));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[101] ,DNS_FILTEROFF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[102] ,HDATA_APPOWNED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[103] ,DMLERR_NO_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[104] ,DMLERR_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[105] ,DMLERR_ADVACKTIMEOUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[106] ,DMLERR_BUSY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[107] ,DMLERR_DATAACKTIMEOUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[108] ,DMLERR_DLL_NOT_INITIALIZED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[109] ,DMLERR_DLL_USAGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[110] ,DMLERR_EXECACKTIMEOUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[111] ,DMLERR_INVALIDPARAMETER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[112] ,DMLERR_LOW_MEMORY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[113] ,DMLERR_MEMORY_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[114] ,DMLERR_NOTPROCESSED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[115] ,DMLERR_NO_CONV_ESTABLISHED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[116] ,DMLERR_POKEACKTIMEOUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[117] ,DMLERR_POSTMSG_FAILED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[118] ,DMLERR_REENTRANCY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[119] ,DMLERR_SERVER_DIED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[120] ,DMLERR_SYS_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[121] ,DMLERR_UNADVACKTIMEOUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[122] ,DMLERR_UNFOUND_QUEUE_ID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[123] ,DMLERR_LAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[124] ,MH_CREATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[125] ,MH_KEEP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[126] ,MH_DELETE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[127] ,MH_CLEANUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[128] ,MAX_MONITORS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[129] ,APPCLASS_MONITOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[130] ,XTYP_MONITOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[131] ,MF_HSZ_INFO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[132] ,MF_SENDMSGS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[133] ,MF_POSTMSGS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[134] ,MF_CALLBACKS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[135] ,MF_ERRORS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[136] ,MF_LINKS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[137] ,MF_CONV));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[138] ,ddelib));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..56] of string = (
'CONVCONTEXT'
,'CONVINFO'
,'DDEML_MSG_HOOK_DATA'
,'HSZPAIR'
,'MONCBSTRUCT'
,'MONCONVSTRUCT'
,'MONERRSTRUCT'
,'MONHSZSTRUCT'
,'MONHSZSTRUCTA'
,'MONHSZSTRUCTW'
,'MONLINKSTRUCT'
,'MONMSGSTRUCT'
,'tagCONVCONTEXT'
,'tagCONVINFO'
,'tagDDEML_MSG_HOOK_DATA'
,'tagHSZPAIR'
,'tagMONCBSTRUCT'
,'tagMONCONVSTRUCT'
,'tagMONERRSTRUCT'
,'tagMONHSZSTRUCT'
,'tagMONHSZSTRUCTA'
,'tagMONHSZSTRUCTW'
,'tagMONLINKSTRUCT'
,'tagMONMSGSTRUCT'
,'TConvContext'
,'TConvInfo'
,'TDdemlMsgHookData'
,'THSZPair'
,'TMonCBStruct'
,'TMonConvStruct'
,'TMonErrStruct'
,'TMonHSZStruct'
,'TMonHSZStructA'
,'TMonHSZStructW'
,'TMonLinkStruct'
,'TMonMsgStruct'
,'DdeUninitialize'
,'DdeQueryNextServer'
,'DdeDisconnectList'
,'DdeDisconnect'
,'DdeReconnect'
,'DdeSetUserHandle'
,'DdeAbandonTransaction'
,'DdePostAdvise'
,'DdeEnableCallback'
,'DdeNameService'
,'DdeClientTransaction'
,'DdeCreateDataHandle'
,'DdeAddData'
,'DdeGetData'
,'DdeAccessData'
,'DdeUnaccessData'
,'DdeFreeDataHandle'
,'DdeGetLastError'
,'DdeFreeStringHandle'
,'DdeKeepStringHandle'
,'DdeCmpStringHandles'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_CONVCONTEXT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_CONVINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_DDEML_MSG_HOOK_DATA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(_HSZPAIR_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(_MONCBSTRUCT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[5],Addr(_MONCONVSTRUCT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[6],Addr(_MONERRSTRUCT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[7],Addr(_MONHSZSTRUCT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[8],Addr(_MONHSZSTRUCTA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[9],Addr(_MONHSZSTRUCTW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[10],Addr(_MONLINKSTRUCT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[11],Addr(_MONMSGSTRUCT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[12],Addr(_tagCONVCONTEXT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[13],Addr(_tagCONVINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[14],Addr(_tagDDEML_MSG_HOOK_DATA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[15],Addr(_tagHSZPAIR_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[16],Addr(_tagMONCBSTRUCT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[17],Addr(_tagMONCONVSTRUCT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[18],Addr(_tagMONERRSTRUCT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[19],Addr(_tagMONHSZSTRUCT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[20],Addr(_tagMONHSZSTRUCTA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[21],Addr(_tagMONHSZSTRUCTW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[22],Addr(_tagMONLINKSTRUCT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[23],Addr(_tagMONMSGSTRUCT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[24],Addr(_TConvContext_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[25],Addr(_TConvInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[26],Addr(_TDdemlMsgHookData_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[27],Addr(_THSZPair_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[28],Addr(_TMonCBStruct_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[29],Addr(_TMonConvStruct_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[30],Addr(_TMonErrStruct_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[31],Addr(_TMonHSZStruct_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[32],Addr(_TMonHSZStructA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[33],Addr(_TMonHSZStructW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[34],Addr(_TMonLinkStruct_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[35],Addr(_TMonMsgStruct_)));
RegisterProc(nil,MethodNames[36],mtProc,TypeInfo(_T3),[
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(DdeUninitialize),cStdCall);

RegisterProc(nil,MethodNames[37],mtProc,TypeInfo(_T5),[
TypeInfo(HConvList),
TypeInfo(HConv),TypeInfo(HConv)],Addr(DdeQueryNextServer),cStdCall);

RegisterProc(nil,MethodNames[38],mtProc,TypeInfo(_T6),[
TypeInfo(HConvList),TypeInfo(BOOL)],Addr(DdeDisconnectList),cStdCall);

RegisterProc(nil,MethodNames[39],mtProc,TypeInfo(_T8),[
TypeInfo(HConv),TypeInfo(BOOL)],Addr(DdeDisconnect),cStdCall);

RegisterProc(nil,MethodNames[40],mtProc,TypeInfo(_T9),[
TypeInfo(HConv),TypeInfo(HConv)],Addr(DdeReconnect),cStdCall);

RegisterProc(nil,MethodNames[41],mtProc,TypeInfo(_T11),[
TypeInfo(HConv),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(DdeSetUserHandle),cStdCall);

RegisterProc(nil,MethodNames[42],mtProc,TypeInfo(_T12),[
TypeInfo(DWORD),
TypeInfo(HConv),
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(DdeAbandonTransaction),cStdCall);

RegisterProc(nil,MethodNames[43],mtProc,TypeInfo(_T13),[
TypeInfo(DWORD),
TypeInfo(HSz),
TypeInfo(HSz),TypeInfo(BOOL)],Addr(DdePostAdvise),cStdCall);

RegisterProc(nil,MethodNames[44],mtProc,TypeInfo(_T14),[
TypeInfo(DWORD),
TypeInfo(HConv),
TypeInfo(UINT),TypeInfo(BOOL)],Addr(DdeEnableCallback),cStdCall);

RegisterProc(nil,MethodNames[45],mtProc,TypeInfo(_T15),[
TypeInfo(DWORD),
TypeInfo(HSz),
TypeInfo(HSz),
TypeInfo(UINT),TypeInfo(HDDEData)],Addr(DdeNameService),cStdCall);

RegisterProc(nil,MethodNames[46],mtProc,TypeInfo(_T16),[
TypeInfoPointer,
TypeInfo(DWORD),
TypeInfo(HConv),
TypeInfo(HSz),
TypeInfo(UINT),
TypeInfo(UINT),
TypeInfo(DWORD),
TypeInfoPointer,TypeInfo(HDDEData)],Addr(DdeClientTransaction),cStdCall);

RegisterProc(nil,MethodNames[47],mtProc,TypeInfo(_T17),[
TypeInfo(DWORD),
TypeInfoPointer,
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(HSz),
TypeInfo(UINT),
TypeInfo(UINT),TypeInfo(HDDEData)],Addr(DdeCreateDataHandle),cStdCall);

RegisterProc(nil,MethodNames[48],mtProc,TypeInfo(_T18),[
TypeInfo(HDDEData),
TypeInfoPointer,
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(HDDEData)],Addr(DdeAddData),cStdCall);

RegisterProc(nil,MethodNames[49],mtProc,TypeInfo(_T19),[
TypeInfo(HDDEData),
TypeInfoPointer,
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(DdeGetData),cStdCall);

RegisterProc(nil,MethodNames[50],mtProc,TypeInfo(_T20),[
TypeInfo(HDDEData),
TypeInfoPointer,TypeInfoPointer],Addr(DdeAccessData),cStdCall);

RegisterProc(nil,MethodNames[51],mtProc,TypeInfo(_T21),[
TypeInfo(HDDEData),TypeInfo(BOOL)],Addr(DdeUnaccessData),cStdCall);

RegisterProc(nil,MethodNames[52],mtProc,TypeInfo(_T22),[
TypeInfo(HDDEData),TypeInfo(BOOL)],Addr(DdeFreeDataHandle),cStdCall);

RegisterProc(nil,MethodNames[53],mtProc,TypeInfo(_T23),[
TypeInfo(DWORD),TypeInfo(UINT)],Addr(DdeGetLastError),cStdCall);

RegisterProc(nil,MethodNames[54],mtProc,TypeInfo(_T30),[
TypeInfo(DWORD),
TypeInfo(HSz),TypeInfo(BOOL)],Addr(DdeFreeStringHandle),cStdCall);

RegisterProc(nil,MethodNames[55],mtProc,TypeInfo(_T31),[
TypeInfo(DWORD),
TypeInfo(HSz),TypeInfo(BOOL)],Addr(DdeKeepStringHandle),cStdCall);

RegisterProc(nil,MethodNames[56],mtProc,TypeInfo(_T32),[
TypeInfo(HSz),
TypeInfo(HSz),TypeInfo(Integer)],Addr(DdeCmpStringHandles),cStdCall);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'DdeInitializeA',mtProc,TypeInfo(_T0),[
TypeInfo(Longint),
TypeInfo(TFNCallback),
TypeInfo(Longint),
TypeInfo(Longint),TypeInfo(Longint)],Addr(DdeInitializeA),cStdCall)}

{RegisterProc(nil,'DdeInitializeW',mtProc,TypeInfo(_T1),[
TypeInfo(Longint),
TypeInfo(TFNCallback),
TypeInfo(Longint),
TypeInfo(Longint),TypeInfo(Longint)],Addr(DdeInitializeW),cStdCall)}

{RegisterProc(nil,'DdeInitialize',mtProc,TypeInfo(_T2),[
TypeInfo(Longint),
TypeInfo(TFNCallback),
TypeInfo(Longint),
TypeInfo(Longint),TypeInfo(Longint)],Addr(DdeInitialize),cStdCall)}

{RegisterProc(nil,'DdeConnectList',mtProc,TypeInfo(_T4),[
TypeInfo(DWORD),
TypeInfo(HSz),
TypeInfo(HSz),
TypeInfo(HConvList),
TypeInfoPointer,TypeInfo(HConvList)],Addr(DdeConnectList),cStdCall)}

{RegisterProc(nil,'DdeConnect',mtProc,TypeInfo(_T7),[
TypeInfo(DWORD),
TypeInfo(HSz),
TypeInfo(HSz),
TypeInfoPointer,TypeInfo(HConv)],Addr(DdeConnect),cStdCall)}

{RegisterProc(nil,'DdeQueryConvInfo',mtProc,TypeInfo(_T10),[
TypeInfo(HConv),
TypeInfo(DWORD),
TypeInfoPointer,TypeInfo(UINT)],Addr(DdeQueryConvInfo),cStdCall)}

{RegisterProc(nil,'DdeCreateStringHandleA',mtProc,TypeInfo(_T24),[
TypeInfo(DWORD),
TypeInfoPChar,
TypeInfo(Integer),TypeInfo(HSz)],Addr(DdeCreateStringHandleA),cStdCall)}

{RegisterProc(nil,'DdeCreateStringHandleW',mtProc,TypeInfo(_T25),[
TypeInfo(DWORD),
TypeInfoPWideChar,
TypeInfo(Integer),TypeInfo(HSz)],Addr(DdeCreateStringHandleW),cStdCall)}

{RegisterProc(nil,'DdeCreateStringHandle',mtProc,TypeInfo(_T26),[
TypeInfo(DWORD),
TypeInfoPChar,
TypeInfo(Integer),TypeInfo(HSz)],Addr(DdeCreateStringHandle),cStdCall)}

{RegisterProc(nil,'DdeQueryStringA',mtProc,TypeInfo(_T27),[
TypeInfo(DWORD),
TypeInfo(HSz),
TypeInfoPChar,
TypeInfo(DWORD),
TypeInfo(Integer),TypeInfo(DWORD)],Addr(DdeQueryStringA),cStdCall)}

{RegisterProc(nil,'DdeQueryStringW',mtProc,TypeInfo(_T28),[
TypeInfo(DWORD),
TypeInfo(HSz),
TypeInfoPWideChar,
TypeInfo(DWORD),
TypeInfo(Integer),TypeInfo(DWORD)],Addr(DdeQueryStringW),cStdCall)}

{RegisterProc(nil,'DdeQueryString',mtProc,TypeInfo(_T29),[
TypeInfo(DWORD),
TypeInfo(HSz),
TypeInfoPChar,
TypeInfo(DWORD),
TypeInfo(Integer),TypeInfo(DWORD)],Addr(DdeQueryString),cStdCall)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
