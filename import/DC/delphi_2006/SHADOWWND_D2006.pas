{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit SHADOWWND_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Messages,
  Classes,
  Controls,
  Forms,
  Graphics,
  ShadowWnd;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (p0 : TComponent;
p1 : TControlSide) of object;

function __DC__GetTShadowWindow__Control(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TShadowWindow(Instance).Control);
end;

procedure __DC__SetTShadowWindow__Control(Instance : TObject; Params : PVariantArgList);
begin
TShadowWindow(Instance).Control:=TControl(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTShadowWindow__Side(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TShadowWindow(Instance).Side;
end;

procedure __DC__SetTShadowWindow__Side(Instance : TObject; Params : PVariantArgList);
begin
TShadowWindow(Instance).Side:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TShadowWindow,'Control',__DC__GetTShadowWindow__Control,__DC__SetTShadowWindow__Control);
RegisterProperty(TShadowWindow,'Side',__DC__GetTShadowWindow__Side,__DC__SetTShadowWindow__Side);
end;

const __ConstNames0 : array[0..1] of string = (
'csRight'
,'csBottom'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,csRight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,csBottom));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..0] of TClass = (
TShadowWindow
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegisterProc(TShadowWindow,'CreateShadow',mtConstructor,TypeInfo(_T0),[TypeInfo(TComponent),TypeInfo(TControlSide)], pointer(220),cRegister);
RegisterProc(TShadowWindow,'CreateShadow',mtConstructor,TypeInfo(_T0),[TypeInfo(TComponent),TypeInfo(TControlSide)],  getVMTProcAddr('TShadowWindow','CreateShadow',220),cRegister);


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
