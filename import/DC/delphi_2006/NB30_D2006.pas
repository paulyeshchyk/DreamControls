{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit NB30_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  Types,
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Nb30;
function ConvertTActionHeaderToVariant(var R : TActionHeader) : OleVariant;
function ConvertVariantToTActionHeader(const V : OleVariant) : TActionHeader;
function ConvertTAdapterStatusToVariant(var R : TAdapterStatus) : OleVariant;
function ConvertVariantToTAdapterStatus(const V : OleVariant) : TAdapterStatus;
function ConvertTFindNameBufferToVariant(var R : TFindNameBuffer) : OleVariant;
function ConvertVariantToTFindNameBuffer(const V : OleVariant) : TFindNameBuffer;
function ConvertTFindNameHeaderToVariant(var R : TFindNameHeader) : OleVariant;
function ConvertVariantToTFindNameHeader(const V : OleVariant) : TFindNameHeader;
function ConvertTLanaEnumToVariant(var R : TLanaEnum) : OleVariant;
function ConvertVariantToTLanaEnum(const V : OleVariant) : TLanaEnum;
function ConvertTNameBufferToVariant(var R : TNameBuffer) : OleVariant;
function ConvertVariantToTNameBuffer(const V : OleVariant) : TNameBuffer;
function ConvertTNCBToVariant(var R : TNCB) : OleVariant;
function ConvertVariantToTNCB(const V : OleVariant) : TNCB;
function ConvertTSessionBufferToVariant(var R : TSessionBuffer) : OleVariant;
function ConvertVariantToTSessionBuffer(const V : OleVariant) : TSessionBuffer;
function ConvertTSessionHeaderToVariant(var R : TSessionHeader) : OleVariant;
function ConvertVariantToTSessionHeader(const V : OleVariant) : TSessionHeader;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TActionHeader__Wrapper = class(TDCRecordWrapper)
private
fR : TActionHeader;
public
function GetRecordPtr : pointer; override;
published
procedure settransport_id(const val : Longint);
function gettransport_id : Longint;
property transport_id : Longint read gettransport_id write settransport_id;
procedure setaction_code(const val : Word);
function getaction_code : Word;
property action_code : Word read getaction_code write setaction_code;
procedure setreserved(const val : Word);
function getreserved : Word;
property reserved : Word read getreserved write setreserved;
end;
type __TAdapterStatus__Wrapper = class(TDCRecordWrapper)
private
fR : TAdapterStatus;
public
function GetRecordPtr : pointer; override;
published
procedure setrev_major(const val : Char);
function getrev_major : Char;
property rev_major : Char read getrev_major write setrev_major;
procedure setreserved0(const val : Char);
function getreserved0 : Char;
property reserved0 : Char read getreserved0 write setreserved0;
procedure setadapter_type(const val : Char);
function getadapter_type : Char;
property adapter_type : Char read getadapter_type write setadapter_type;
procedure setrev_minor(const val : Char);
function getrev_minor : Char;
property rev_minor : Char read getrev_minor write setrev_minor;
procedure setduration(const val : Word);
function getduration : Word;
property duration : Word read getduration write setduration;
procedure setfrmr_recv(const val : Word);
function getfrmr_recv : Word;
property frmr_recv : Word read getfrmr_recv write setfrmr_recv;
procedure setfrmr_xmit(const val : Word);
function getfrmr_xmit : Word;
property frmr_xmit : Word read getfrmr_xmit write setfrmr_xmit;
procedure setiframe_recv_err(const val : Word);
function getiframe_recv_err : Word;
property iframe_recv_err : Word read getiframe_recv_err write setiframe_recv_err;
procedure setxmit_aborts(const val : Word);
function getxmit_aborts : Word;
property xmit_aborts : Word read getxmit_aborts write setxmit_aborts;
procedure setxmit_success(const val : DWORD);
function getxmit_success : DWORD;
property xmit_success : DWORD read getxmit_success write setxmit_success;
procedure setrecv_success(const val : DWORD);
function getrecv_success : DWORD;
property recv_success : DWORD read getrecv_success write setrecv_success;
procedure setiframe_xmit_err(const val : Word);
function getiframe_xmit_err : Word;
property iframe_xmit_err : Word read getiframe_xmit_err write setiframe_xmit_err;
procedure setrecv_buff_unavail(const val : Word);
function getrecv_buff_unavail : Word;
property recv_buff_unavail : Word read getrecv_buff_unavail write setrecv_buff_unavail;
procedure sett1_timeouts(const val : Word);
function gett1_timeouts : Word;
property t1_timeouts : Word read gett1_timeouts write sett1_timeouts;
procedure setti_timeouts(const val : Word);
function getti_timeouts : Word;
property ti_timeouts : Word read getti_timeouts write setti_timeouts;
procedure setreserved1(const val : DWORD);
function getreserved1 : DWORD;
property reserved1 : DWORD read getreserved1 write setreserved1;
procedure setfree_ncbs(const val : Word);
function getfree_ncbs : Word;
property free_ncbs : Word read getfree_ncbs write setfree_ncbs;
procedure setmax_cfg_ncbs(const val : Word);
function getmax_cfg_ncbs : Word;
property max_cfg_ncbs : Word read getmax_cfg_ncbs write setmax_cfg_ncbs;
procedure setmax_ncbs(const val : Word);
function getmax_ncbs : Word;
property max_ncbs : Word read getmax_ncbs write setmax_ncbs;
procedure setxmit_buf_unavail(const val : Word);
function getxmit_buf_unavail : Word;
property xmit_buf_unavail : Word read getxmit_buf_unavail write setxmit_buf_unavail;
procedure setmax_dgram_size(const val : Word);
function getmax_dgram_size : Word;
property max_dgram_size : Word read getmax_dgram_size write setmax_dgram_size;
procedure setpending_sess(const val : Word);
function getpending_sess : Word;
property pending_sess : Word read getpending_sess write setpending_sess;
procedure setmax_cfg_sess(const val : Word);
function getmax_cfg_sess : Word;
property max_cfg_sess : Word read getmax_cfg_sess write setmax_cfg_sess;
procedure setmax_sess(const val : Word);
function getmax_sess : Word;
property max_sess : Word read getmax_sess write setmax_sess;
procedure setmax_sess_pkt_size(const val : Word);
function getmax_sess_pkt_size : Word;
property max_sess_pkt_size : Word read getmax_sess_pkt_size write setmax_sess_pkt_size;
procedure setname_count(const val : Word);
function getname_count : Word;
property name_count : Word read getname_count write setname_count;
end;
type __TFindNameBuffer__Wrapper = class(TDCRecordWrapper)
private
fR : TFindNameBuffer;
public
function GetRecordPtr : pointer; override;
published
procedure setlength(const val : Char);
function getlength : Char;
property length : Char read getlength write setlength;
procedure setaccess_control(const val : Char);
function getaccess_control : Char;
property access_control : Char read getaccess_control write setaccess_control;
procedure setframe_control(const val : Char);
function getframe_control : Char;
property frame_control : Char read getframe_control write setframe_control;
end;
type __TFindNameHeader__Wrapper = class(TDCRecordWrapper)
private
fR : TFindNameHeader;
public
function GetRecordPtr : pointer; override;
published
procedure setnode_count(const val : Word);
function getnode_count : Word;
property node_count : Word read getnode_count write setnode_count;
procedure setreserved(const val : Char);
function getreserved : Char;
property reserved : Char read getreserved write setreserved;
procedure setunique_group(const val : Char);
function getunique_group : Char;
property unique_group : Char read getunique_group write setunique_group;
end;
type __TLanaEnum__Wrapper = class(TDCRecordWrapper)
private
fR : TLanaEnum;
public
function GetRecordPtr : pointer; override;
published
procedure setlength(const val : Char);
function getlength : Char;
property length : Char read getlength write setlength;
end;
type __TNameBuffer__Wrapper = class(TDCRecordWrapper)
private
fR : TNameBuffer;
public
function GetRecordPtr : pointer; override;
published
procedure setname_num(const val : Char);
function getname_num : Char;
property name_num : Char read getname_num write setname_num;
procedure setname_flags(const val : Char);
function getname_flags : Char;
property name_flags : Char read getname_flags write setname_flags;
end;
type __TNCB__Wrapper = class(TDCRecordWrapper)
private
fR : TNCB;
public
function GetRecordPtr : pointer; override;
published
procedure setncb_command(const val : Char);
function getncb_command : Char;
property ncb_command : Char read getncb_command write setncb_command;
procedure setncb_retcode(const val : Char);
function getncb_retcode : Char;
property ncb_retcode : Char read getncb_retcode write setncb_retcode;
procedure setncb_lsn(const val : Char);
function getncb_lsn : Char;
property ncb_lsn : Char read getncb_lsn write setncb_lsn;
procedure setncb_num(const val : Char);
function getncb_num : Char;
property ncb_num : Char read getncb_num write setncb_num;
procedure setncb_length(const val : Word);
function getncb_length : Word;
property ncb_length : Word read getncb_length write setncb_length;
procedure setncb_rto(const val : Char);
function getncb_rto : Char;
property ncb_rto : Char read getncb_rto write setncb_rto;
procedure setncb_sto(const val : Char);
function getncb_sto : Char;
property ncb_sto : Char read getncb_sto write setncb_sto;
procedure setncb_lana_num(const val : Char);
function getncb_lana_num : Char;
property ncb_lana_num : Char read getncb_lana_num write setncb_lana_num;
procedure setncb_cmd_cplt(const val : Char);
function getncb_cmd_cplt : Char;
property ncb_cmd_cplt : Char read getncb_cmd_cplt write setncb_cmd_cplt;
procedure setncb_event(const val : THandle);
function getncb_event : THandle;
property ncb_event : THandle read getncb_event write setncb_event;
end;
type __TSessionBuffer__Wrapper = class(TDCRecordWrapper)
private
fR : TSessionBuffer;
public
function GetRecordPtr : pointer; override;
published
procedure setlsn(const val : Char);
function getlsn : Char;
property lsn : Char read getlsn write setlsn;
procedure setstate(const val : Char);
function getstate : Char;
property state : Char read getstate write setstate;
procedure setrcvs_outstanding(const val : Char);
function getrcvs_outstanding : Char;
property rcvs_outstanding : Char read getrcvs_outstanding write setrcvs_outstanding;
procedure setsends_outstanding(const val : Char);
function getsends_outstanding : Char;
property sends_outstanding : Char read getsends_outstanding write setsends_outstanding;
end;
type __TSessionHeader__Wrapper = class(TDCRecordWrapper)
private
fR : TSessionHeader;
public
function GetRecordPtr : pointer; override;
published
procedure setsess_name(const val : Char);
function getsess_name : Char;
property sess_name : Char read getsess_name write setsess_name;
procedure setnum_sess(const val : Char);
function getnum_sess : Char;
property num_sess : Char read getnum_sess write setnum_sess;
procedure setrcv_dg_outstanding(const val : Char);
function getrcv_dg_outstanding : Char;
property rcv_dg_outstanding : Char read getrcv_dg_outstanding write setrcv_dg_outstanding;
procedure setrcv_any_outstanding(const val : Char);
function getrcv_any_outstanding : Char;
property rcv_any_outstanding : Char read getrcv_any_outstanding write setrcv_any_outstanding;
end;
function __TActionHeader__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TActionHeader__Wrapper.settransport_id(const val : Longint);
begin
TActionHeader(GetRecordPtr^).transport_id := val;
end;
function __TActionHeader__Wrapper.gettransport_id : Longint;
begin
result := TActionHeader(GetRecordPtr^).transport_id;
end;
procedure __TActionHeader__Wrapper.setaction_code(const val : Word);
begin
TActionHeader(GetRecordPtr^).action_code := val;
end;
function __TActionHeader__Wrapper.getaction_code : Word;
begin
result := TActionHeader(GetRecordPtr^).action_code;
end;
procedure __TActionHeader__Wrapper.setreserved(const val : Word);
begin
TActionHeader(GetRecordPtr^).reserved := val;
end;
function __TActionHeader__Wrapper.getreserved : Word;
begin
result := TActionHeader(GetRecordPtr^).reserved;
end;
function __TAdapterStatus__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TAdapterStatus__Wrapper.setrev_major(const val : Char);
begin
TAdapterStatus(GetRecordPtr^).rev_major := val;
end;
function __TAdapterStatus__Wrapper.getrev_major : Char;
begin
result := TAdapterStatus(GetRecordPtr^).rev_major;
end;
procedure __TAdapterStatus__Wrapper.setreserved0(const val : Char);
begin
TAdapterStatus(GetRecordPtr^).reserved0 := val;
end;
function __TAdapterStatus__Wrapper.getreserved0 : Char;
begin
result := TAdapterStatus(GetRecordPtr^).reserved0;
end;
procedure __TAdapterStatus__Wrapper.setadapter_type(const val : Char);
begin
TAdapterStatus(GetRecordPtr^).adapter_type := val;
end;
function __TAdapterStatus__Wrapper.getadapter_type : Char;
begin
result := TAdapterStatus(GetRecordPtr^).adapter_type;
end;
procedure __TAdapterStatus__Wrapper.setrev_minor(const val : Char);
begin
TAdapterStatus(GetRecordPtr^).rev_minor := val;
end;
function __TAdapterStatus__Wrapper.getrev_minor : Char;
begin
result := TAdapterStatus(GetRecordPtr^).rev_minor;
end;
procedure __TAdapterStatus__Wrapper.setduration(const val : Word);
begin
TAdapterStatus(GetRecordPtr^).duration := val;
end;
function __TAdapterStatus__Wrapper.getduration : Word;
begin
result := TAdapterStatus(GetRecordPtr^).duration;
end;
procedure __TAdapterStatus__Wrapper.setfrmr_recv(const val : Word);
begin
TAdapterStatus(GetRecordPtr^).frmr_recv := val;
end;
function __TAdapterStatus__Wrapper.getfrmr_recv : Word;
begin
result := TAdapterStatus(GetRecordPtr^).frmr_recv;
end;
procedure __TAdapterStatus__Wrapper.setfrmr_xmit(const val : Word);
begin
TAdapterStatus(GetRecordPtr^).frmr_xmit := val;
end;
function __TAdapterStatus__Wrapper.getfrmr_xmit : Word;
begin
result := TAdapterStatus(GetRecordPtr^).frmr_xmit;
end;
procedure __TAdapterStatus__Wrapper.setiframe_recv_err(const val : Word);
begin
TAdapterStatus(GetRecordPtr^).iframe_recv_err := val;
end;
function __TAdapterStatus__Wrapper.getiframe_recv_err : Word;
begin
result := TAdapterStatus(GetRecordPtr^).iframe_recv_err;
end;
procedure __TAdapterStatus__Wrapper.setxmit_aborts(const val : Word);
begin
TAdapterStatus(GetRecordPtr^).xmit_aborts := val;
end;
function __TAdapterStatus__Wrapper.getxmit_aborts : Word;
begin
result := TAdapterStatus(GetRecordPtr^).xmit_aborts;
end;
procedure __TAdapterStatus__Wrapper.setxmit_success(const val : DWORD);
begin
TAdapterStatus(GetRecordPtr^).xmit_success := val;
end;
function __TAdapterStatus__Wrapper.getxmit_success : DWORD;
begin
result := TAdapterStatus(GetRecordPtr^).xmit_success;
end;
procedure __TAdapterStatus__Wrapper.setrecv_success(const val : DWORD);
begin
TAdapterStatus(GetRecordPtr^).recv_success := val;
end;
function __TAdapterStatus__Wrapper.getrecv_success : DWORD;
begin
result := TAdapterStatus(GetRecordPtr^).recv_success;
end;
procedure __TAdapterStatus__Wrapper.setiframe_xmit_err(const val : Word);
begin
TAdapterStatus(GetRecordPtr^).iframe_xmit_err := val;
end;
function __TAdapterStatus__Wrapper.getiframe_xmit_err : Word;
begin
result := TAdapterStatus(GetRecordPtr^).iframe_xmit_err;
end;
procedure __TAdapterStatus__Wrapper.setrecv_buff_unavail(const val : Word);
begin
TAdapterStatus(GetRecordPtr^).recv_buff_unavail := val;
end;
function __TAdapterStatus__Wrapper.getrecv_buff_unavail : Word;
begin
result := TAdapterStatus(GetRecordPtr^).recv_buff_unavail;
end;
procedure __TAdapterStatus__Wrapper.sett1_timeouts(const val : Word);
begin
TAdapterStatus(GetRecordPtr^).t1_timeouts := val;
end;
function __TAdapterStatus__Wrapper.gett1_timeouts : Word;
begin
result := TAdapterStatus(GetRecordPtr^).t1_timeouts;
end;
procedure __TAdapterStatus__Wrapper.setti_timeouts(const val : Word);
begin
TAdapterStatus(GetRecordPtr^).ti_timeouts := val;
end;
function __TAdapterStatus__Wrapper.getti_timeouts : Word;
begin
result := TAdapterStatus(GetRecordPtr^).ti_timeouts;
end;
procedure __TAdapterStatus__Wrapper.setreserved1(const val : DWORD);
begin
TAdapterStatus(GetRecordPtr^).reserved1 := val;
end;
function __TAdapterStatus__Wrapper.getreserved1 : DWORD;
begin
result := TAdapterStatus(GetRecordPtr^).reserved1;
end;
procedure __TAdapterStatus__Wrapper.setfree_ncbs(const val : Word);
begin
TAdapterStatus(GetRecordPtr^).free_ncbs := val;
end;
function __TAdapterStatus__Wrapper.getfree_ncbs : Word;
begin
result := TAdapterStatus(GetRecordPtr^).free_ncbs;
end;
procedure __TAdapterStatus__Wrapper.setmax_cfg_ncbs(const val : Word);
begin
TAdapterStatus(GetRecordPtr^).max_cfg_ncbs := val;
end;
function __TAdapterStatus__Wrapper.getmax_cfg_ncbs : Word;
begin
result := TAdapterStatus(GetRecordPtr^).max_cfg_ncbs;
end;
procedure __TAdapterStatus__Wrapper.setmax_ncbs(const val : Word);
begin
TAdapterStatus(GetRecordPtr^).max_ncbs := val;
end;
function __TAdapterStatus__Wrapper.getmax_ncbs : Word;
begin
result := TAdapterStatus(GetRecordPtr^).max_ncbs;
end;
procedure __TAdapterStatus__Wrapper.setxmit_buf_unavail(const val : Word);
begin
TAdapterStatus(GetRecordPtr^).xmit_buf_unavail := val;
end;
function __TAdapterStatus__Wrapper.getxmit_buf_unavail : Word;
begin
result := TAdapterStatus(GetRecordPtr^).xmit_buf_unavail;
end;
procedure __TAdapterStatus__Wrapper.setmax_dgram_size(const val : Word);
begin
TAdapterStatus(GetRecordPtr^).max_dgram_size := val;
end;
function __TAdapterStatus__Wrapper.getmax_dgram_size : Word;
begin
result := TAdapterStatus(GetRecordPtr^).max_dgram_size;
end;
procedure __TAdapterStatus__Wrapper.setpending_sess(const val : Word);
begin
TAdapterStatus(GetRecordPtr^).pending_sess := val;
end;
function __TAdapterStatus__Wrapper.getpending_sess : Word;
begin
result := TAdapterStatus(GetRecordPtr^).pending_sess;
end;
procedure __TAdapterStatus__Wrapper.setmax_cfg_sess(const val : Word);
begin
TAdapterStatus(GetRecordPtr^).max_cfg_sess := val;
end;
function __TAdapterStatus__Wrapper.getmax_cfg_sess : Word;
begin
result := TAdapterStatus(GetRecordPtr^).max_cfg_sess;
end;
procedure __TAdapterStatus__Wrapper.setmax_sess(const val : Word);
begin
TAdapterStatus(GetRecordPtr^).max_sess := val;
end;
function __TAdapterStatus__Wrapper.getmax_sess : Word;
begin
result := TAdapterStatus(GetRecordPtr^).max_sess;
end;
procedure __TAdapterStatus__Wrapper.setmax_sess_pkt_size(const val : Word);
begin
TAdapterStatus(GetRecordPtr^).max_sess_pkt_size := val;
end;
function __TAdapterStatus__Wrapper.getmax_sess_pkt_size : Word;
begin
result := TAdapterStatus(GetRecordPtr^).max_sess_pkt_size;
end;
procedure __TAdapterStatus__Wrapper.setname_count(const val : Word);
begin
TAdapterStatus(GetRecordPtr^).name_count := val;
end;
function __TAdapterStatus__Wrapper.getname_count : Word;
begin
result := TAdapterStatus(GetRecordPtr^).name_count;
end;
function __TFindNameBuffer__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TFindNameBuffer__Wrapper.setlength(const val : Char);
begin
TFindNameBuffer(GetRecordPtr^).length := val;
end;
function __TFindNameBuffer__Wrapper.getlength : Char;
begin
result := TFindNameBuffer(GetRecordPtr^).length;
end;
procedure __TFindNameBuffer__Wrapper.setaccess_control(const val : Char);
begin
TFindNameBuffer(GetRecordPtr^).access_control := val;
end;
function __TFindNameBuffer__Wrapper.getaccess_control : Char;
begin
result := TFindNameBuffer(GetRecordPtr^).access_control;
end;
procedure __TFindNameBuffer__Wrapper.setframe_control(const val : Char);
begin
TFindNameBuffer(GetRecordPtr^).frame_control := val;
end;
function __TFindNameBuffer__Wrapper.getframe_control : Char;
begin
result := TFindNameBuffer(GetRecordPtr^).frame_control;
end;
function __TFindNameHeader__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TFindNameHeader__Wrapper.setnode_count(const val : Word);
begin
TFindNameHeader(GetRecordPtr^).node_count := val;
end;
function __TFindNameHeader__Wrapper.getnode_count : Word;
begin
result := TFindNameHeader(GetRecordPtr^).node_count;
end;
procedure __TFindNameHeader__Wrapper.setreserved(const val : Char);
begin
TFindNameHeader(GetRecordPtr^).reserved := val;
end;
function __TFindNameHeader__Wrapper.getreserved : Char;
begin
result := TFindNameHeader(GetRecordPtr^).reserved;
end;
procedure __TFindNameHeader__Wrapper.setunique_group(const val : Char);
begin
TFindNameHeader(GetRecordPtr^).unique_group := val;
end;
function __TFindNameHeader__Wrapper.getunique_group : Char;
begin
result := TFindNameHeader(GetRecordPtr^).unique_group;
end;
function __TLanaEnum__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TLanaEnum__Wrapper.setlength(const val : Char);
begin
TLanaEnum(GetRecordPtr^).length := val;
end;
function __TLanaEnum__Wrapper.getlength : Char;
begin
result := TLanaEnum(GetRecordPtr^).length;
end;
function __TNameBuffer__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNameBuffer__Wrapper.setname_num(const val : Char);
begin
TNameBuffer(GetRecordPtr^).name_num := val;
end;
function __TNameBuffer__Wrapper.getname_num : Char;
begin
result := TNameBuffer(GetRecordPtr^).name_num;
end;
procedure __TNameBuffer__Wrapper.setname_flags(const val : Char);
begin
TNameBuffer(GetRecordPtr^).name_flags := val;
end;
function __TNameBuffer__Wrapper.getname_flags : Char;
begin
result := TNameBuffer(GetRecordPtr^).name_flags;
end;
function __TNCB__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNCB__Wrapper.setncb_command(const val : Char);
begin
TNCB(GetRecordPtr^).ncb_command := val;
end;
function __TNCB__Wrapper.getncb_command : Char;
begin
result := TNCB(GetRecordPtr^).ncb_command;
end;
procedure __TNCB__Wrapper.setncb_retcode(const val : Char);
begin
TNCB(GetRecordPtr^).ncb_retcode := val;
end;
function __TNCB__Wrapper.getncb_retcode : Char;
begin
result := TNCB(GetRecordPtr^).ncb_retcode;
end;
procedure __TNCB__Wrapper.setncb_lsn(const val : Char);
begin
TNCB(GetRecordPtr^).ncb_lsn := val;
end;
function __TNCB__Wrapper.getncb_lsn : Char;
begin
result := TNCB(GetRecordPtr^).ncb_lsn;
end;
procedure __TNCB__Wrapper.setncb_num(const val : Char);
begin
TNCB(GetRecordPtr^).ncb_num := val;
end;
function __TNCB__Wrapper.getncb_num : Char;
begin
result := TNCB(GetRecordPtr^).ncb_num;
end;
procedure __TNCB__Wrapper.setncb_length(const val : Word);
begin
TNCB(GetRecordPtr^).ncb_length := val;
end;
function __TNCB__Wrapper.getncb_length : Word;
begin
result := TNCB(GetRecordPtr^).ncb_length;
end;
procedure __TNCB__Wrapper.setncb_rto(const val : Char);
begin
TNCB(GetRecordPtr^).ncb_rto := val;
end;
function __TNCB__Wrapper.getncb_rto : Char;
begin
result := TNCB(GetRecordPtr^).ncb_rto;
end;
procedure __TNCB__Wrapper.setncb_sto(const val : Char);
begin
TNCB(GetRecordPtr^).ncb_sto := val;
end;
function __TNCB__Wrapper.getncb_sto : Char;
begin
result := TNCB(GetRecordPtr^).ncb_sto;
end;
procedure __TNCB__Wrapper.setncb_lana_num(const val : Char);
begin
TNCB(GetRecordPtr^).ncb_lana_num := val;
end;
function __TNCB__Wrapper.getncb_lana_num : Char;
begin
result := TNCB(GetRecordPtr^).ncb_lana_num;
end;
procedure __TNCB__Wrapper.setncb_cmd_cplt(const val : Char);
begin
TNCB(GetRecordPtr^).ncb_cmd_cplt := val;
end;
function __TNCB__Wrapper.getncb_cmd_cplt : Char;
begin
result := TNCB(GetRecordPtr^).ncb_cmd_cplt;
end;
procedure __TNCB__Wrapper.setncb_event(const val : THandle);
begin
TNCB(GetRecordPtr^).ncb_event := val;
end;
function __TNCB__Wrapper.getncb_event : THandle;
begin
result := TNCB(GetRecordPtr^).ncb_event;
end;
function __TSessionBuffer__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSessionBuffer__Wrapper.setlsn(const val : Char);
begin
TSessionBuffer(GetRecordPtr^).lsn := val;
end;
function __TSessionBuffer__Wrapper.getlsn : Char;
begin
result := TSessionBuffer(GetRecordPtr^).lsn;
end;
procedure __TSessionBuffer__Wrapper.setstate(const val : Char);
begin
TSessionBuffer(GetRecordPtr^).state := val;
end;
function __TSessionBuffer__Wrapper.getstate : Char;
begin
result := TSessionBuffer(GetRecordPtr^).state;
end;
procedure __TSessionBuffer__Wrapper.setrcvs_outstanding(const val : Char);
begin
TSessionBuffer(GetRecordPtr^).rcvs_outstanding := val;
end;
function __TSessionBuffer__Wrapper.getrcvs_outstanding : Char;
begin
result := TSessionBuffer(GetRecordPtr^).rcvs_outstanding;
end;
procedure __TSessionBuffer__Wrapper.setsends_outstanding(const val : Char);
begin
TSessionBuffer(GetRecordPtr^).sends_outstanding := val;
end;
function __TSessionBuffer__Wrapper.getsends_outstanding : Char;
begin
result := TSessionBuffer(GetRecordPtr^).sends_outstanding;
end;
function __TSessionHeader__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSessionHeader__Wrapper.setsess_name(const val : Char);
begin
TSessionHeader(GetRecordPtr^).sess_name := val;
end;
function __TSessionHeader__Wrapper.getsess_name : Char;
begin
result := TSessionHeader(GetRecordPtr^).sess_name;
end;
procedure __TSessionHeader__Wrapper.setnum_sess(const val : Char);
begin
TSessionHeader(GetRecordPtr^).num_sess := val;
end;
function __TSessionHeader__Wrapper.getnum_sess : Char;
begin
result := TSessionHeader(GetRecordPtr^).num_sess;
end;
procedure __TSessionHeader__Wrapper.setrcv_dg_outstanding(const val : Char);
begin
TSessionHeader(GetRecordPtr^).rcv_dg_outstanding := val;
end;
function __TSessionHeader__Wrapper.getrcv_dg_outstanding : Char;
begin
result := TSessionHeader(GetRecordPtr^).rcv_dg_outstanding;
end;
procedure __TSessionHeader__Wrapper.setrcv_any_outstanding(const val : Char);
begin
TSessionHeader(GetRecordPtr^).rcv_any_outstanding := val;
end;
function __TSessionHeader__Wrapper.getrcv_any_outstanding : Char;
begin
result := TSessionHeader(GetRecordPtr^).rcv_any_outstanding;
end;
function _TActionHeader_ : IDispatch;
begin
  result := __TActionHeader__Wrapper.Create;
end;
function _TAdapterStatus_ : IDispatch;
begin
  result := __TAdapterStatus__Wrapper.Create;
end;
function _TFindNameBuffer_ : IDispatch;
begin
  result := __TFindNameBuffer__Wrapper.Create;
end;
function _TFindNameHeader_ : IDispatch;
begin
  result := __TFindNameHeader__Wrapper.Create;
end;
function _TLanaEnum_ : IDispatch;
begin
  result := __TLanaEnum__Wrapper.Create;
end;
function _TNameBuffer_ : IDispatch;
begin
  result := __TNameBuffer__Wrapper.Create;
end;
function _TNCB_ : IDispatch;
begin
  result := __TNCB__Wrapper.Create;
end;
function _TSessionBuffer_ : IDispatch;
begin
  result := __TSessionBuffer__Wrapper.Create;
end;
function _TSessionHeader_ : IDispatch;
begin
  result := __TSessionHeader__Wrapper.Create;
end;

type __TActionHeader__Wrapper__ = class(__TActionHeader__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TActionHeader__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTActionHeaderToVariant(var R : TActionHeader) : OleVariant;
var
__rw : __TActionHeader__Wrapper__;
begin
__rw := __TActionHeader__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTActionHeader(const V : OleVariant) : TActionHeader;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TActionHeader((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TAdapterStatus__Wrapper__ = class(__TAdapterStatus__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TAdapterStatus__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTAdapterStatusToVariant(var R : TAdapterStatus) : OleVariant;
var
__rw : __TAdapterStatus__Wrapper__;
begin
__rw := __TAdapterStatus__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTAdapterStatus(const V : OleVariant) : TAdapterStatus;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TAdapterStatus((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TFindNameBuffer__Wrapper__ = class(__TFindNameBuffer__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TFindNameBuffer__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTFindNameBufferToVariant(var R : TFindNameBuffer) : OleVariant;
var
__rw : __TFindNameBuffer__Wrapper__;
begin
__rw := __TFindNameBuffer__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTFindNameBuffer(const V : OleVariant) : TFindNameBuffer;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TFindNameBuffer((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TFindNameHeader__Wrapper__ = class(__TFindNameHeader__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TFindNameHeader__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTFindNameHeaderToVariant(var R : TFindNameHeader) : OleVariant;
var
__rw : __TFindNameHeader__Wrapper__;
begin
__rw := __TFindNameHeader__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTFindNameHeader(const V : OleVariant) : TFindNameHeader;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TFindNameHeader((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TLanaEnum__Wrapper__ = class(__TLanaEnum__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TLanaEnum__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTLanaEnumToVariant(var R : TLanaEnum) : OleVariant;
var
__rw : __TLanaEnum__Wrapper__;
begin
__rw := __TLanaEnum__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTLanaEnum(const V : OleVariant) : TLanaEnum;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TLanaEnum((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNameBuffer__Wrapper__ = class(__TNameBuffer__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNameBuffer__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNameBufferToVariant(var R : TNameBuffer) : OleVariant;
var
__rw : __TNameBuffer__Wrapper__;
begin
__rw := __TNameBuffer__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNameBuffer(const V : OleVariant) : TNameBuffer;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNameBuffer((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNCB__Wrapper__ = class(__TNCB__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNCB__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNCBToVariant(var R : TNCB) : OleVariant;
var
__rw : __TNCB__Wrapper__;
begin
__rw := __TNCB__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNCB(const V : OleVariant) : TNCB;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNCB((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSessionBuffer__Wrapper__ = class(__TSessionBuffer__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSessionBuffer__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSessionBufferToVariant(var R : TSessionBuffer) : OleVariant;
var
__rw : __TSessionBuffer__Wrapper__;
begin
__rw := __TSessionBuffer__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSessionBuffer(const V : OleVariant) : TSessionBuffer;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSessionBuffer((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSessionHeader__Wrapper__ = class(__TSessionHeader__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSessionHeader__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSessionHeaderToVariant(var R : TSessionHeader) : OleVariant;
var
__rw : __TSessionHeader__Wrapper__;
begin
__rw := __TSessionHeader__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSessionHeader(const V : OleVariant) : TSessionHeader;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSessionHeader((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..83] of string = (
'NCBNAMSZ'
,'MAX_LANA'
,'NAME_FLAGS_MASK'
,'GROUP_NAME'
,'UNIQUE_NAME'
,'REGISTERING'
,'REGISTERED'
,'DEREGISTERED'
,'DUPLICATE'
,'DUPLICATE_DEREG'
,'LISTEN_OUTSTANDING'
,'CALL_PENDING'
,'SESSION_ESTABLISHED'
,'HANGUP_PENDING'
,'HANGUP_COMPLETE'
,'SESSION_ABORTED'
,'ALL_TRANSPORTS'
,'MS_NBF'
,'NCBCALL'
,'NCBLISTEN'
,'NCBHANGUP'
,'NCBSEND'
,'NCBRECV'
,'NCBRECVANY'
,'NCBCHAINSEND'
,'NCBDGSEND'
,'NCBDGRECV'
,'NCBDGSENDBC'
,'NCBDGRECVBC'
,'NCBADDNAME'
,'NCBDELNAME'
,'NCBRESET'
,'NCBASTAT'
,'NCBSSTAT'
,'NCBCANCEL'
,'NCBADDGRNAME'
,'NCBENUM'
,'NCBUNLINK'
,'NCBSENDNA'
,'NCBCHAINSENDNA'
,'NCBLANSTALERT'
,'NCBACTION'
,'NCBFINDNAME'
,'NCBTRACE'
,'ASYNCH'
,'NRC_GOODRET'
,'NRC_BUFLEN'
,'NRC_ILLCMD'
,'NRC_CMDTMO'
,'NRC_INCOMP'
,'NRC_BADDR'
,'NRC_SNUMOUT'
,'NRC_NORES'
,'NRC_SCLOSED'
,'NRC_CMDCAN'
,'NRC_DUPNAME'
,'NRC_NAMTFUL'
,'NRC_ACTSES'
,'NRC_LOCTFUL'
,'NRC_REMTFUL'
,'NRC_ILLNN'
,'NRC_NOCALL'
,'NRC_NOWILD'
,'NRC_INUSE'
,'NRC_NAMERR'
,'NRC_SABORT'
,'NRC_NAMCONF'
,'NRC_IFBUSY'
,'NRC_TOOMANY'
,'NRC_BRIDGE'
,'NRC_CANOCCR'
,'NRC_CANCEL'
,'NRC_DUPENV'
,'NRC_ENVNOTDEF'
,'NRC_OSRESNOTAV'
,'NRC_MAXAPPS'
,'NRC_NOSAPS'
,'NRC_NORESOURCES'
,'NRC_INVADDRESS'
,'NRC_INVDDID'
,'NRC_LOCKFAIL'
,'NRC_OPENERR'
,'NRC_SYSTEM'
,'NRC_PENDING'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,NCBNAMSZ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,MAX_LANA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,NAME_FLAGS_MASK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,GROUP_NAME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,UNIQUE_NAME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,REGISTERING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,REGISTERED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,DEREGISTERED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,DUPLICATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,DUPLICATE_DEREG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,LISTEN_OUTSTANDING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,CALL_PENDING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,SESSION_ESTABLISHED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,HANGUP_PENDING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,HANGUP_COMPLETE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,SESSION_ABORTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,ALL_TRANSPORTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,MS_NBF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,NCBCALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,NCBLISTEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,NCBHANGUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,NCBSEND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,NCBRECV));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,NCBRECVANY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,NCBCHAINSEND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,NCBDGSEND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,NCBDGRECV));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,NCBDGSENDBC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,NCBDGRECVBC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,NCBADDNAME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,NCBDELNAME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,NCBRESET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,NCBASTAT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,NCBSSTAT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,NCBCANCEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,NCBADDGRNAME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,NCBENUM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,NCBUNLINK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,NCBSENDNA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,NCBCHAINSENDNA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,NCBLANSTALERT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,NCBACTION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,NCBFINDNAME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,NCBTRACE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,ASYNCH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,NRC_GOODRET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,NRC_BUFLEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,NRC_ILLCMD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,NRC_CMDTMO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,NRC_INCOMP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,NRC_BADDR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,NRC_SNUMOUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,NRC_NORES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,NRC_SCLOSED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,NRC_CMDCAN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,NRC_DUPNAME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,NRC_NAMTFUL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,NRC_ACTSES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,NRC_LOCTFUL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,NRC_REMTFUL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,NRC_ILLNN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,NRC_NOCALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,NRC_NOWILD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,NRC_INUSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,NRC_NAMERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[65] ,NRC_SABORT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[66] ,NRC_NAMCONF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[67] ,NRC_IFBUSY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[68] ,NRC_TOOMANY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[69] ,NRC_BRIDGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[70] ,NRC_CANOCCR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[71] ,NRC_CANCEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[72] ,NRC_DUPENV));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[73] ,NRC_ENVNOTDEF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[74] ,NRC_OSRESNOTAV));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[75] ,NRC_MAXAPPS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[76] ,NRC_NOSAPS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[77] ,NRC_NORESOURCES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[78] ,NRC_INVADDRESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[79] ,NRC_INVDDID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[80] ,NRC_LOCKFAIL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[81] ,NRC_OPENERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[82] ,NRC_SYSTEM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[83] ,NRC_PENDING));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..8] of string = (
'TActionHeader'
,'TAdapterStatus'
,'TFindNameBuffer'
,'TFindNameHeader'
,'TLanaEnum'
,'TNameBuffer'
,'TNCB'
,'TSessionBuffer'
,'TSessionHeader'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TActionHeader_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_TAdapterStatus_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_TFindNameBuffer_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(_TFindNameHeader_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(_TLanaEnum_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[5],Addr(_TNameBuffer_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[6],Addr(_TNCB_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[7],Addr(_TSessionBuffer_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[8],Addr(_TSessionHeader_)));
end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'Netbios',mtProc,TypeInfo(_T0),[
TypeInfoPointer,TypeInfo(Char)],Addr(Netbios),cStdCall)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
