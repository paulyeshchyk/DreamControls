{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IBSERVICES_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Classes,
  Db,
  IBHeader,
  IB,
  IBIntf,
  IBExternals,
  IBServices;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure  of object;

_T1 = _T0;

_T2 = _T0;

_T3 = _T0;

_T4 = _T0;

_T5 = _T0;

_T6 = procedure (p0 : TShutdownMode;
p1 : Integer) of object;

_T7 = procedure (p0 : Integer) of object;

_T8 = _T7;

_T9 = _T7;

_T10 = _T0;

_T11 = _T0;

_T12 = procedure (p0 : Boolean) of object;

_T13 = _T12;

_T14 = _T12;

_T15 = _T7;

_T16 = _T0;

_T17 = _T12;

_T18 = _T7;

_T19 = _T0;

_T20 = _T0;

_T21 = _T7;

_T22 = _T0;

_T23 = function : String of object;

_T24 = _T23;

_T25 = _T0;

_T26 = _T0;

_T27 = _T0;

_T28 = _T0;

_T29 = _T0;

_T30 = _T0;

_T31 = _T0;

_T32 = _T0;

_T33 = procedure (p0 : String) of object;

_T34 = _T0;

_T35 = _T0;

_T36 = _T0;

_T37 = _T12;

_T38 = _T12;

_T39 = _T0;

_T40 = _T0;

_T41 = _T0;

_T42 = _T0;

_T43 = _T0;

_T44 = _T0;

_T45 = _T0;

_T46 = procedure (p0 : String;
p1 : String) of object;

_T47 = _T33;

_T48 = _T0;

_T49 = _T0;

_T50 = _T0;

_T51 = _T0;

_T52 = _T0;

_T53 = function (p0 : String): Boolean of object;

_T54 = _T0;

function __DC__GetTIBControlAndQueryService__Eof(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBControlAndQueryService(Instance).Eof;
end;

function __DC__GetTIBControlService__IsServiceRunning(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBControlService(Instance).IsServiceRunning;
end;

function __DC__GetTIBCustomService__Handle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TIBCustomService(Instance).Handle);
end;

function __DC__GetTIBCustomService__ServiceParamBySPB(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBCustomService(Instance).ServiceParamBySPB[OleVariant(Params^[0])];
end;

procedure __DC__SetTIBCustomService__ServiceParamBySPB(Instance : TObject; Params : PVariantArgList);
begin
TIBCustomService(Instance).ServiceParamBySPB[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTIBSecurityService__UserInfo(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBSecurityService(Instance).UserInfo[OleVariant(Params^[0])]);
end;

function __DC__GetTIBSecurityService__UserInfoCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBSecurityService(Instance).UserInfoCount;
end;

function __DC__GetTIBServerProperties__DatabaseInfo(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBServerProperties(Instance).DatabaseInfo);
end;

function __DC__GetTIBServerProperties__LicenseInfo(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBServerProperties(Instance).LicenseInfo);
end;

function __DC__GetTIBServerProperties__LicenseMaskInfo(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBServerProperties(Instance).LicenseMaskInfo);
end;

function __DC__GetTIBServerProperties__VersionInfo(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBServerProperties(Instance).VersionInfo);
end;

function __DC__GetTIBServerProperties__ConfigParams(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBServerProperties(Instance).ConfigParams);
end;

function __DC__GetTIBServerProperties__AliasCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBServerProperties(Instance).AliasCount;
end;

function __DC__GetTIBServerProperties__AliasInfo(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBServerProperties(Instance).AliasInfo[OleVariant(Params^[0])]);
end;

function __DC__GetTIBValidationService__LimboTransactionInfo(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBValidationService(Instance).LimboTransactionInfo[OleVariant(Params^[0])]);
end;

function __DC__GetTIBValidationService__LimboTransactionInfoCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIBValidationService(Instance).LimboTransactionInfoCount;
end;

procedure __RegisterProps;
begin
RegisterProperty(TIBControlAndQueryService,'Eof',__DC__GetTIBControlAndQueryService__Eof,nil);
RegisterProperty(TIBControlService,'IsServiceRunning',__DC__GetTIBControlService__IsServiceRunning,nil);
RegisterProperty(TIBCustomService,'Handle',__DC__GetTIBCustomService__Handle,nil);
RegisterIndexedProperty(TIBCustomService,'ServiceParamBySPB',1,False,__DC__GetTIBCustomService__ServiceParamBySPB,__DC__SetTIBCustomService__ServiceParamBySPB);
RegisterIndexedProperty(TIBSecurityService,'UserInfo',1,False,__DC__GetTIBSecurityService__UserInfo,nil);
RegisterProperty(TIBSecurityService,'UserInfoCount',__DC__GetTIBSecurityService__UserInfoCount,nil);
RegisterProperty(TIBServerProperties,'DatabaseInfo',__DC__GetTIBServerProperties__DatabaseInfo,nil);
RegisterProperty(TIBServerProperties,'LicenseInfo',__DC__GetTIBServerProperties__LicenseInfo,nil);
RegisterProperty(TIBServerProperties,'LicenseMaskInfo',__DC__GetTIBServerProperties__LicenseMaskInfo,nil);
RegisterProperty(TIBServerProperties,'VersionInfo',__DC__GetTIBServerProperties__VersionInfo,nil);
RegisterProperty(TIBServerProperties,'ConfigParams',__DC__GetTIBServerProperties__ConfigParams,nil);
RegisterProperty(TIBServerProperties,'AliasCount',__DC__GetTIBServerProperties__AliasCount,nil);
RegisterIndexedProperty(TIBServerProperties,'AliasInfo',1,False,__DC__GetTIBServerProperties__AliasInfo,nil);
RegisterIndexedProperty(TIBValidationService,'LimboTransactionInfo',1,False,__DC__GetTIBValidationService__LimboTransactionInfo,nil);
RegisterProperty(TIBValidationService,'LimboTransactionInfoCount',__DC__GetTIBValidationService__LimboTransactionInfoCount,nil);
end;

const __ConstNames0 : array[0..76] of string = (
'DefaultBufferSize'
,'SPBPrefix'
,'TCP'
,'SPX'
,'NamedPipe'
,'Local'
,'ByLine'
,'ByChunk'
,'Database'
,'License'
,'LicenseMask'
,'ConfigParameters'
,'Version'
,'DBAlias'
,'Forced'
,'DenyTransaction'
,'DenyAttachment'
,'LicenseAdd'
,'LicenseRemove'
,'DataPages'
,'DbLog'
,'HeaderPages'
,'IndexPages'
,'SystemRelations'
,'RecordVersions'
,'StatTables'
,'IgnoreChecksums'
,'IgnoreLimbo'
,'MetadataOnly'
,'NoGarbageCollection'
,'OldMetadataDesc'
,'NonTransportable'
,'ConvertExtTables'
,'DeactivateIndexes'
,'NoShadow'
,'NoValidityCheck'
,'OneRelationAtATime'
,'Replace'
,'CreateNewDB'
,'UseAllSpace'
,'ValidationCheck'
,'LimboTransactions'
,'CheckDB'
,'IgnoreChecksum'
,'KillShadows'
,'MendDB'
,'SweepDB'
,'ValidateDB'
,'ValidateFull'
,'CommitGlobal'
,'RollbackGlobal'
,'RecoverTwoPhaseGlobal'
,'NoGlobalAction'
,'LimboState'
,'CommitState'
,'RollbackState'
,'UnknownState'
,'CommitAdvise'
,'RollbackAdvise'
,'UnknownAdvise'
,'CommitAction'
,'RollbackAction'
,'ActionAddUser'
,'ActionDeleteUser'
,'ActionModifyUser'
,'ActionDisplayUser'
,'ModifyFirstName'
,'ModifyMiddleName'
,'ModifyLastName'
,'ModifyUserId'
,'ModifyGroupId'
,'ModifyPassword'
,'ModifySystemUserName'
,'ModifyGroupName'
,'ModifyDefaultRole'
,'ModifyDescription'
,'ModifyActiveUser'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,DefaultBufferSize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,SPBPrefix));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,TCP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,SPX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,NamedPipe));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,Local));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,ByLine));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,ByChunk));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,Database));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,License));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,LicenseMask));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,ConfigParameters));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,Version));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,DBAlias));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,Forced));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,DenyTransaction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,DenyAttachment));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,LicenseAdd));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,LicenseRemove));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,DataPages));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,DbLog));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,HeaderPages));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,IndexPages));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,SystemRelations));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,RecordVersions));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,StatTables));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,IgnoreChecksums));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,IgnoreLimbo));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,MetadataOnly));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,NoGarbageCollection));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,OldMetadataDesc));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,NonTransportable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,ConvertExtTables));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,DeactivateIndexes));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,NoShadow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,NoValidityCheck));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,OneRelationAtATime));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,Replace));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,CreateNewDB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,UseAllSpace));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,ValidationCheck));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,LimboTransactions));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,CheckDB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,IgnoreChecksum));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,KillShadows));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,MendDB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,SweepDB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,ValidateDB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,ValidateFull));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,CommitGlobal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,RollbackGlobal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,RecoverTwoPhaseGlobal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,NoGlobalAction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,LimboState));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,CommitState));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,RollbackState));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,UnknownState));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,CommitAdvise));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,RollbackAdvise));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,UnknownAdvise));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,CommitAction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,RollbackAction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,ActionAddUser));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,ActionDeleteUser));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,ActionModifyUser));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[65] ,ActionDisplayUser));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[66] ,ModifyFirstName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[67] ,ModifyMiddleName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[68] ,ModifyLastName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[69] ,ModifyUserId));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[70] ,ModifyGroupId));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[71] ,ModifyPassword));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[72] ,ModifySystemUserName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[73] ,ModifyGroupName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[74] ,ModifyDefaultRole));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[75] ,ModifyDescription));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[76] ,ModifyActiveUser));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..21] of TClass = (
TConfigFileData,
TConfigParams,
TDatabaseInfo,
TIBAliasInfo,
TIBBackupRestoreService,
TIBBackupService,
TIBConfigService,
TIBControlAndQueryService,
TIBControlService,
TIBCustomService,
TIBLicensingService,
TIBLogService,
TIBRestoreService,
TIBSecurityService,
TIBServerProperties,
TIBStatisticalService,
TIBValidationService,
TLicenseInfo,
TLicenseMaskInfo,
TLimboTransactionInfo,
TUserInfo,
TVersionInfo
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegisterProc(TConfigFileData,'Create',mtConstructor,TypeInfo(_T0),NoParams,Addr(TConfigFileData.Create),cRegister);

RegRegisterMethod(TConfigFileData,'Clear',TypeInfo(_T1),NoParams,Addr(TConfigFileData.Clear));

RegisterProc(TConfigParams,'Create',mtConstructor,TypeInfo(_T2),NoParams,Addr(TConfigParams.Create),cRegister);

RegRegisterMethod(TConfigParams,'Clear',TypeInfo(_T3),NoParams,Addr(TConfigParams.Clear));

RegisterProc(TDatabaseInfo,'Create',mtConstructor,TypeInfo(_T4),NoParams,Addr(TDatabaseInfo.Create),cRegister);

RegRegisterMethod(TDatabaseInfo,'Clear',TypeInfo(_T5),NoParams,Addr(TDatabaseInfo.Clear));

RegRegisterMethod(TIBConfigService,'ShutdownDatabase',TypeInfo(_T6),[
TypeInfo(TShutdownMode),
TypeInfo(Integer)],Addr(TIBConfigService.ShutdownDatabase));

RegRegisterMethod(TIBConfigService,'SetSweepInterval',TypeInfo(_T7),[
TypeInfo(Integer)],Addr(TIBConfigService.SetSweepInterval));

RegRegisterMethod(TIBConfigService,'SetDBSqlDialect',TypeInfo(_T8),[
TypeInfo(Integer)],Addr(TIBConfigService.SetDBSqlDialect));

RegRegisterMethod(TIBConfigService,'SetPageBuffers',TypeInfo(_T9),[
TypeInfo(Integer)],Addr(TIBConfigService.SetPageBuffers));

RegRegisterMethod(TIBConfigService,'ActivateShadow',TypeInfo(_T10),NoParams,Addr(TIBConfigService.ActivateShadow));

RegRegisterMethod(TIBConfigService,'BringDatabaseOnline',TypeInfo(_T11),NoParams,Addr(TIBConfigService.BringDatabaseOnline));

RegRegisterMethod(TIBConfigService,'SetReserveSpace',TypeInfo(_T12),[
TypeInfo(Boolean)],Addr(TIBConfigService.SetReserveSpace));

RegRegisterMethod(TIBConfigService,'SetAsyncMode',TypeInfo(_T13),[
TypeInfo(Boolean)],Addr(TIBConfigService.SetAsyncMode));

RegRegisterMethod(TIBConfigService,'SetReadOnly',TypeInfo(_T14),[
TypeInfo(Boolean)],Addr(TIBConfigService.SetReadOnly));

RegRegisterMethod(TIBConfigService,'SetFlushInterval',TypeInfo(_T15),[
TypeInfo(Integer)],Addr(TIBConfigService.SetFlushInterval));

RegRegisterMethod(TIBConfigService,'DisableFlush',TypeInfo(_T16),NoParams,Addr(TIBConfigService.DisableFlush));

RegRegisterMethod(TIBConfigService,'SetGroupCommit',TypeInfo(_T17),[
TypeInfo(Boolean)],Addr(TIBConfigService.SetGroupCommit));

RegRegisterMethod(TIBConfigService,'SetLingerInterval',TypeInfo(_T18),[
TypeInfo(Integer)],Addr(TIBConfigService.SetLingerInterval));

RegRegisterMethod(TIBConfigService,'FlushDatabase',TypeInfo(_T19),NoParams,Addr(TIBConfigService.FlushDatabase));

RegRegisterMethod(TIBConfigService,'ReclaimMemory',TypeInfo(_T20),NoParams,Addr(TIBConfigService.ReclaimMemory));

RegRegisterMethod(TIBConfigService,'SetReclaimInterval',TypeInfo(_T21),[
TypeInfo(Integer)],Addr(TIBConfigService.SetReclaimInterval));

RegRegisterMethod(TIBConfigService,'SweepDatabase',TypeInfo(_T22),NoParams,Addr(TIBConfigService.SweepDatabase));

RegRegisterMethod(TIBControlAndQueryService,'GetNextLine',TypeInfo(_T23),[TypeInfo(String)],Addr(TIBControlAndQueryService.GetNextLine));

RegRegisterMethod(TIBControlAndQueryService,'GetNextChunk',TypeInfo(_T24),[TypeInfo(String)],Addr(TIBControlAndQueryService.GetNextChunk));

//RegRegisterMethod(TIBControlService,'SetServiceStartOptions',TypeInfo(_T25),NoParams, pointer(52));
RegRegisterMethod(TIBControlService,'SetServiceStartOptions',TypeInfo(_T25),NoParams,  getVMTProcAddr('TIBControlService','SetServiceStartOptions',52));


//RegRegisterMethod(TIBControlService,'ServiceStart',TypeInfo(_T26),NoParams, pointer(56));
RegRegisterMethod(TIBControlService,'ServiceStart',TypeInfo(_T26),NoParams,  getVMTProcAddr('TIBControlService','ServiceStart',56));


//RegRegisterMethod(TIBCustomService,'DoServerChange',TypeInfo(_T27),NoParams, pointer(48));
RegRegisterMethod(TIBCustomService,'DoServerChange',TypeInfo(_T27),NoParams,  getVMTProcAddr('TIBCustomService','DoServerChange',48));


RegRegisterMethod(TIBCustomService,'Attach',TypeInfo(_T28),NoParams,Addr(TIBCustomService.Attach));

RegRegisterMethod(TIBCustomService,'Detach',TypeInfo(_T29),NoParams,Addr(TIBCustomService.Detach));

RegRegisterMethod(TIBLicensingService,'AddLicense',TypeInfo(_T30),NoParams,Addr(TIBLicensingService.AddLicense));

RegRegisterMethod(TIBLicensingService,'RemoveLicense',TypeInfo(_T31),NoParams,Addr(TIBLicensingService.RemoveLicense));

RegRegisterMethod(TIBSecurityService,'DisplayUsers',TypeInfo(_T32),NoParams,Addr(TIBSecurityService.DisplayUsers));

RegRegisterMethod(TIBSecurityService,'DisplayUser',TypeInfo(_T33),[
TypeInfo(String)],Addr(TIBSecurityService.DisplayUser));

RegRegisterMethod(TIBSecurityService,'AddUser',TypeInfo(_T34),NoParams,Addr(TIBSecurityService.AddUser));

RegRegisterMethod(TIBSecurityService,'DeleteUser',TypeInfo(_T35),NoParams,Addr(TIBSecurityService.DeleteUser));

RegRegisterMethod(TIBSecurityService,'ModifyUser',TypeInfo(_T36),NoParams,Addr(TIBSecurityService.ModifyUser));

RegRegisterMethod(TIBSecurityService,'EnableEUA',TypeInfo(_T37),[
TypeInfo(Boolean)],Addr(TIBSecurityService.EnableEUA));

RegRegisterMethod(TIBSecurityService,'SuspendEUA',TypeInfo(_T38),[
TypeInfo(Boolean)],Addr(TIBSecurityService.SuspendEUA));

RegRegisterMethod(TIBServerProperties,'Fetch',TypeInfo(_T39),NoParams,Addr(TIBServerProperties.Fetch));

RegRegisterMethod(TIBServerProperties,'FetchDatabaseInfo',TypeInfo(_T40),NoParams,Addr(TIBServerProperties.FetchDatabaseInfo));

RegRegisterMethod(TIBServerProperties,'FetchLicenseInfo',TypeInfo(_T41),NoParams,Addr(TIBServerProperties.FetchLicenseInfo));

RegRegisterMethod(TIBServerProperties,'FetchLicenseMaskInfo',TypeInfo(_T42),NoParams,Addr(TIBServerProperties.FetchLicenseMaskInfo));

RegRegisterMethod(TIBServerProperties,'FetchConfigParams',TypeInfo(_T43),NoParams,Addr(TIBServerProperties.FetchConfigParams));

RegRegisterMethod(TIBServerProperties,'FetchVersionInfo',TypeInfo(_T44),NoParams,Addr(TIBServerProperties.FetchVersionInfo));

RegRegisterMethod(TIBServerProperties,'FetchAliasInfo',TypeInfo(_T45),NoParams,Addr(TIBServerProperties.FetchAliasInfo));

RegRegisterMethod(TIBServerProperties,'AddAlias',TypeInfo(_T46),[
TypeInfo(String),
TypeInfo(String)],Addr(TIBServerProperties.AddAlias));

RegRegisterMethod(TIBServerProperties,'DeleteAlias',TypeInfo(_T47),[
TypeInfo(String)],Addr(TIBServerProperties.DeleteAlias));

RegRegisterMethod(TIBValidationService,'FetchLimboTransactionInfo',TypeInfo(_T48),NoParams,Addr(TIBValidationService.FetchLimboTransactionInfo));

RegRegisterMethod(TIBValidationService,'FixLimboTransactionErrors',TypeInfo(_T49),NoParams,Addr(TIBValidationService.FixLimboTransactionErrors));

RegisterProc(TLicenseInfo,'Create',mtConstructor,TypeInfo(_T50),NoParams,Addr(TLicenseInfo.Create),cRegister);

RegRegisterMethod(TLicenseInfo,'Clear',TypeInfo(_T51),NoParams,Addr(TLicenseInfo.Clear));

RegRegisterMethod(TLicenseMaskInfo,'Clear',TypeInfo(_T52),NoParams,Addr(TLicenseMaskInfo.Clear));

RegRegisterMethod(TVersionInfo,'IsMinimumVersion',TypeInfo(_T53),[
TypeInfo(String),TypeInfo(Boolean)],Addr(TVersionInfo.IsMinimumVersion));

RegRegisterMethod(TVersionInfo,'Clear',TypeInfo(_T54),NoParams,Addr(TVersionInfo.Clear));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
RegisterEvent(TypeInfo(TIBLoginEvent),[
TypeInfo(TIBCustomService),
TypeInfo(TStrings)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
