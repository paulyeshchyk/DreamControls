{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit INVOKEREGISTRY_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  TypInfo,
  IntfInfo,
  Classes,
  Contnrs,
  Windows,
  XMLSchema,
  XmlIntf,
  Types,
  InvokeRegistry;
function ConvertExtNameMapItemToVariant(var R : ExtNameMapItem) : OleVariant;
function ConvertVariantToExtNameMapItem(const V : OleVariant) : ExtNameMapItem;
function ConvertIntfExceptionItemToVariant(var R : IntfExceptionItem) : OleVariant;
function ConvertVariantToIntfExceptionItem(const V : OleVariant) : IntfExceptionItem;
function ConvertIntfHeaderItemToVariant(var R : IntfHeaderItem) : OleVariant;
function ConvertVariantToIntfHeaderItem(const V : OleVariant) : IntfHeaderItem;
function ConvertInvRegClassEntryToVariant(var R : InvRegClassEntry) : OleVariant;
function ConvertVariantToInvRegClassEntry(const V : OleVariant) : InvRegClassEntry;
function ConvertInvRegIntfEntryToVariant(var R : InvRegIntfEntry) : OleVariant;
function ConvertVariantToInvRegIntfEntry(const V : OleVariant) : InvRegIntfEntry;
function ConvertMethParamNameMapItemToVariant(var R : MethParamNameMapItem) : OleVariant;
function ConvertVariantToMethParamNameMapItem(const V : OleVariant) : MethParamNameMapItem;
function ConvertTDynToClearToVariant(var R : TDynToClear) : OleVariant;
function ConvertVariantToTDynToClear(const V : OleVariant) : TDynToClear;
function ConvertTGUIDToVariant(var R : TGUID) : OleVariant;
function ConvertVariantToTGUID(const V : OleVariant) : TGUID;
function ConvertTIntfMethEntryToVariant(var R : TIntfMethEntry) : OleVariant;
function ConvertVariantToTIntfMethEntry(const V : OleVariant) : TIntfMethEntry;
function ConvertTRemHeaderEntryToVariant(var R : TRemHeaderEntry) : OleVariant;
function ConvertVariantToTRemHeaderEntry(const V : OleVariant) : TRemHeaderEntry;
function ConvertTRemRegEntryToVariant(var R : TRemRegEntry) : OleVariant;
function ConvertVariantToTRemRegEntry(const V : OleVariant) : TRemRegEntry;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __ExtNameMapItem__Wrapper = class(TDCRecordWrapper)
private
fR : ExtNameMapItem;
public
function GetRecordPtr : pointer; override;
published
procedure setName(const val : AnsiString);
function getName : AnsiString;
property Name : AnsiString read getName write setName;
procedure setExtName(const val : WideString);
function getExtName : WideString;
property ExtName : WideString read getExtName write setExtName;
end;
type __IntfExceptionItem__Wrapper = class(TDCRecordWrapper)
private
fR : IntfExceptionItem;
public
function GetRecordPtr : pointer; override;
published
procedure setMethodNames(const val : AnsiString);
function getMethodNames : AnsiString;
property MethodNames : AnsiString read getMethodNames write setMethodNames;
end;
type __IntfHeaderItem__Wrapper = class(TDCRecordWrapper)
private
fR : IntfHeaderItem;
public
function GetRecordPtr : pointer; override;
published
procedure setNamespace(const val : WideString);
function getNamespace : WideString;
property Namespace : WideString read getNamespace write setNamespace;
procedure setName(const val : WideString);
function getName : WideString;
property Name : WideString read getName write setName;
procedure setDefaultMethodType(const val : eHeaderMethodType);
function getDefaultMethodType : eHeaderMethodType;
property DefaultMethodType : eHeaderMethodType read getDefaultMethodType write setDefaultMethodType;
procedure setDefaultRequired(const val : Boolean);
function getDefaultRequired : Boolean;
property DefaultRequired : Boolean read getDefaultRequired write setDefaultRequired;
procedure setMethodNames(const val : AnsiString);
function getMethodNames : AnsiString;
property MethodNames : AnsiString read getMethodNames write setMethodNames;
end;
type __InvRegClassEntry__Wrapper = class(TDCRecordWrapper)
private
fR : InvRegClassEntry;
public
function GetRecordPtr : pointer; override;
published
procedure setURI(const val : AnsiString);
function getURI : AnsiString;
property URI : AnsiString read getURI write setURI;
end;
type __InvRegIntfEntry__Wrapper = class(TDCRecordWrapper)
private
fR : InvRegIntfEntry;
public
function GetRecordPtr : pointer; override;
published
procedure setName(const val : AnsiString);
function getName : AnsiString;
property Name : AnsiString read getName write setName;
procedure setExtName(const val : WideString);
function getExtName : WideString;
property ExtName : WideString read getExtName write setExtName;
procedure setUnitName(const val : AnsiString);
function getUnitName : AnsiString;
property UnitName : AnsiString read getUnitName write setUnitName;
procedure setNamespace(const val : WideString);
function getNamespace : WideString;
property Namespace : WideString read getNamespace write setNamespace;
procedure setWSDLEncoding(const val : WideString);
function getWSDLEncoding : WideString;
property WSDLEncoding : WideString read getWSDLEncoding write setWSDLEncoding;
procedure setDocumentation(const val : AnsiString);
function getDocumentation : AnsiString;
property Documentation : AnsiString read getDocumentation write setDocumentation;
procedure setSOAPAction(const val : AnsiString);
function getSOAPAction : AnsiString;
property SOAPAction : AnsiString read getSOAPAction write setSOAPAction;
procedure setReturnParamNames(const val : AnsiString);
function getReturnParamNames : AnsiString;
property ReturnParamNames : AnsiString read getReturnParamNames write setReturnParamNames;
procedure setUDDIOperator(const val : AnsiString);
function getUDDIOperator : AnsiString;
property UDDIOperator : AnsiString read getUDDIOperator write setUDDIOperator;
procedure setUDDIBindingKey(const val : AnsiString);
function getUDDIBindingKey : AnsiString;
property UDDIBindingKey : AnsiString read getUDDIBindingKey write setUDDIBindingKey;
end;
type __MethParamNameMapItem__Wrapper = class(TDCRecordWrapper)
private
fR : MethParamNameMapItem;
public
function GetRecordPtr : pointer; override;
published
procedure setMethName(const val : AnsiString);
function getMethName : AnsiString;
property MethName : AnsiString read getMethName write setMethName;
end;
type __TDynToClear__Wrapper = class(TDCRecordWrapper)
private
fR : TDynToClear;
public
function GetRecordPtr : pointer; override;
published
end;
type __TRemHeaderEntry__Wrapper = class(TDCRecordWrapper)
private
fR : TRemHeaderEntry;
public
function GetRecordPtr : pointer; override;
published
procedure setName(const val : WideString);
function getName : WideString;
property Name : WideString read getName write setName;
procedure setExtName(const val : WideString);
function getExtName : WideString;
property ExtName : WideString read getExtName write setExtName;
procedure setURI(const val : WideString);
function getURI : WideString;
property URI : WideString read getURI write setURI;
end;
type __TRemRegEntry__Wrapper = class(TDCRecordWrapper)
private
fR : TRemRegEntry;
public
function GetRecordPtr : pointer; override;
published
procedure setURI(const val : WideString);
function getURI : WideString;
property URI : WideString read getURI write setURI;
procedure setName(const val : WideString);
function getName : WideString;
property Name : WideString read getName write setName;
procedure setExtName(const val : WideString);
function getExtName : WideString;
property ExtName : WideString read getExtName write setExtName;
procedure setIsScalar(const val : Boolean);
function getIsScalar : Boolean;
property IsScalar : Boolean read getIsScalar write setIsScalar;
procedure setMultiRefOpt(const val : TObjMultiOptions);
function getMultiRefOpt : TObjMultiOptions;
property MultiRefOpt : TObjMultiOptions read getMultiRefOpt write setMultiRefOpt;
end;
type __TIntfMethEntry__Wrapper = class(TDCRecordWrapper)
private
fR : TIntfMethEntry;
public
function GetRecordPtr : pointer; override;
published
procedure setName(const val : AnsiString);
function getName : AnsiString;
property Name : AnsiString read getName write setName;
procedure setCC(const val : TCallConv);
function getCC : TCallConv;
property CC : TCallConv read getCC write setCC;
procedure setPos(const val : Integer);
function getPos : Integer;
property Pos : Integer read getPos write setPos;
procedure setParamCount(const val : Integer);
function getParamCount : Integer;
property ParamCount : Integer read getParamCount write setParamCount;
procedure setHasRTTI(const val : Boolean);
function getHasRTTI : Boolean;
property HasRTTI : Boolean read getHasRTTI write setHasRTTI;
end;
type __TGUID__Wrapper = class(TDCRecordWrapper)
private
fR : TGUID;
public
function GetRecordPtr : pointer; override;
published
procedure setD1(const val : LongWord);
function getD1 : LongWord;
property D1 : LongWord read getD1 write setD1;
procedure setD2(const val : Word);
function getD2 : Word;
property D2 : Word read getD2 write setD2;
procedure setD3(const val : Word);
function getD3 : Word;
property D3 : Word read getD3 write setD3;
end;
type
_T0 = function : Pointer of object;

_T1 = procedure (p0 : Pointer) of object;

_T2 = function : TInvokableClassRegistry of object;

_T3 = function : TRemotableClassRegistry of object;

_T4 = function : TRemotableTypeRegistry of object;

_T5 = function (const p0 : WideString;
const p1 : WideString;
const p2 : WideString): WideString of object;

_T6 = procedure  of object;

_T7 = _T6;

_T8 = function (p0 : Integer): Pointer of object;

_T9 = procedure (p0 : Integer;
p1 : Pointer) of object;

_T10 = _T8;

_T11 = procedure (p0 : TObject) of object;

_T12 = _T11;

{_T13 = procedure (p0 : Pointer;
p1 : PTypeInfo) of object;}

{_T14 = procedure (p0 : PVarData) of object;}

_T15 = _T1;

_T16 = _T1;

_T17 = _T6;

_T18 = procedure (p0 : TSOAPHeader) of object;

_T19 = _T6;

_T20 = function (p0 : TObject): TObject of object;

_T21 = function (p0 : TObject): Integer of object;

_T22 = procedure (const p0 : IDispatch) of object;

_T23 = _T9;

_T24 = _T8;

_T25 = _T0;

_T26 = _T1;

_T27 = _T22;

_T28 = _T6;

_T29 = _T6;

{_T34 = function (p0 : PTypeInfo): THeaderItemArray of object;}

{_T35 = function (p0 : PTypeInfo): THeaderItemArray of object;}

{_T36 = function (p0 : PTypeInfo;
p1 : TClass): WideString of object;}

{_T37 = function (p0 : PTypeInfo;
p1 : TClass): WideString of object;}

{_T38 = function (p0 : WideString;
p1 : WideString): TClass of object;}

{_T39 = procedure (p0 : PTypeInfo;
p1 : TClass) of object;}

{_T40 = procedure (p0 : PTypeInfo;
p1 : TClass;
const p2 : string) of object;}

{_T41 = function (p0 : PTypeInfo): TExceptionItemArray of object;}

{_T42 = procedure (p0 : PTypeInfo;
const p1 : string;
const p2 : InvString) of object;}

{_T43 = procedure (p0 : PTypeInfo;
const p1 : string;
const p2 : string;
const p3 : InvString) of object;}

{_T44 = procedure (p0 : TClass;
p1 : TCreateInstanceProc) of object;}

{_T45 = procedure (p0 : PTypeInfo;
const p1 : InvString) of object;}

{_T46 = procedure (p0 : PTypeInfo;
const p1 : InvString) of object;}

{_T47 = function (const p0 : PTypeInfo;
const p1 : WideString;
p2 : Integer): string of object;}

_T48 = function (const p0 : IDispatch): string of object;

{_T49 = procedure (p0 : PTypeInfo;
const p1 : string;
const p2 : string) of object;}

{_T50 = function (const p0 : PTypeInfo;
var p1 : string;
var p2 : string): Boolean of object;}

{_T51 = procedure (p0 : PTypeInfo;
const p1 : string) of object;}

{_T52 = function (const p0 : PTypeInfo): string of object;}

{_T53 = procedure (p0 : PTypeInfo;
const p1 : TIntfInvokeOption) of object;}

_T54 = _T6;

_T55 = _T6;

_T56 = _T48;

{_T57 = function (const p0 : string;
const p1 : string;
var p2 : TClass;
var p3 : PTypeInfo;
var p4 : string): Boolean of object;}

{_T58 = function (const p0 : PTypeInfo): TIntfInvokeOptions of object;}

_T60 = function (const p0 : IDispatch): Pointer of object;

{_T61 = function (p0 : TClass): TObject of object;}

_T62 = function (p0 : Integer): IDispatch of object;

_T63 = function (p0 : Integer): Boolean of object;

{_T64 = procedure (p0 : PTypeInfo;
var p1 : TClass) of object;}

_T65 = function : Integer of object;

{_T66 = function (p0 : PTypeInfo;
const p1 : string;
const p2 : string): InvString of object;}

{_T67 = function (p0 : PTypeInfo;
const p1 : string;
const p2 : string): InvString of object;}

{_T68 = procedure (p0 : PTypeInfo) of object;}

{_T69 = procedure (p0 : TClass) of object;}

{_T70 = function (p0 : PTypeInfo;
const p1 : string;
const p2 : string): InvString of object;}

{_T71 = function (p0 : PTypeInfo;
const p1 : string;
const p2 : InvString): string of object;}

{_T72 = function (p0 : PTypeInfo;
const p1 : string): InvString of object;}

{_T73 = function (p0 : PTypeInfo;
const p1 : InvString): string of object;}

_T74 = _T6;

{_T75 = function (p0 : IXMLNode;
p1 : IXMLNode;
const p2 : IObjConverter;
const p3 : InvString;
const p4 : InvString;
p5 : TObjectConvertOptions;
out p6 : InvString): IXMLNode of object;}

{_T76 = procedure (const p0 : IXMLNode;
const p1 : IXMLNode;
const p2 : IObjConverter) of object;}

_T77 = _T6;

_T78 = _T6;

_T79 = _T6;

{_T85 = function (p0 : PTypeInfo;
var p1 : WideString;
var p2 : WideString): Boolean of object;}

{_T86 = procedure (p0 : PTypeInfo;
var p1 : WideString;
var p2 : WideString) of object;}

{_T87 = function (const p0 : WideString;
const p1 : WideString;
var p2 : Boolean): TClass of object;}

{_T88 = function (const p0 : WideString;
const p1 : WideString): PTypeInfo of object;}

{_T89 = function (const p0 : WideString;
const p1 : WideString): PTypeInfo of object;}

_T90 = _T65;

_T91 = _T62;

{_T92 = function (p0 : TClass): Boolean of object;}

{_T93 = function (p0 : TClass): TObjMultiOptions of object;}

{_T94 = function (const p0 : Variant;
p1 : Boolean): PTypeInfo of object;}

_T95 = function (const p0 : InvString;
const p1 : InvString): TVarType of object;

{_T96 = procedure (p0 : PTypeInfo;
p1 : TSerializationOptions) of object;}

{_T97 = function (p0 : PTypeInfo): TSerializationOptions of object;}

{_T98 = procedure (p0 : TClass) of object;}

{_T99 = procedure (p0 : PTypeInfo) of object;}

{_T100 = procedure (p0 : PTypeInfo;
const p1 : string;
const p2 : InvString) of object;}

{_T101 = function (p0 : PTypeInfo;
p1 : string): InvString of object;}

{_T102 = function (p0 : PTypeInfo;
p1 : InvString): string of object;}

_T103 = function : WideString of object;

_T104 = procedure (p0 : WideString) of object;

_T105 = function : TStream of object;

_T106 = procedure (const p0 : string) of object;

_T107 = _T106;

_T108 = procedure (const p0 : TStreamOwnership) of object;

_T109 = procedure (p0 : string;
p1 : TStrings;
p2 : string;
p3 : WideString) of object;

_T110 = procedure (p0 : TStream) of object;

_T111 = procedure (p0 : string) of object;

_T112 = _T106;

_T113 = procedure (const p0 : TStream;
const p1 : TStreamOwnership) of object;

_T114 = procedure (const p0 : TSOAPHeader) of object;

_T115 = _T65;

_T116 = function (p0 : Integer): TSOAPHeader of object;

{_T117 = procedure (p0 : TClass;
out p1 : TSOAPHeader) of object;}

_T118 = function : Boolean of object;

_T119 = procedure (p0 : Boolean) of object;

function __ExtNameMapItem__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ExtNameMapItem__Wrapper.setName(const val : AnsiString);
begin
ExtNameMapItem(GetRecordPtr^).Name := val;
end;
function __ExtNameMapItem__Wrapper.getName : AnsiString;
begin
result := ExtNameMapItem(GetRecordPtr^).Name;
end;
procedure __ExtNameMapItem__Wrapper.setExtName(const val : WideString);
begin
ExtNameMapItem(GetRecordPtr^).ExtName := val;
end;
function __ExtNameMapItem__Wrapper.getExtName : WideString;
begin
result := ExtNameMapItem(GetRecordPtr^).ExtName;
end;
function __IntfExceptionItem__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __IntfExceptionItem__Wrapper.setMethodNames(const val : AnsiString);
begin
IntfExceptionItem(GetRecordPtr^).MethodNames := val;
end;
function __IntfExceptionItem__Wrapper.getMethodNames : AnsiString;
begin
result := IntfExceptionItem(GetRecordPtr^).MethodNames;
end;
function __IntfHeaderItem__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __IntfHeaderItem__Wrapper.setNamespace(const val : WideString);
begin
IntfHeaderItem(GetRecordPtr^).Namespace := val;
end;
function __IntfHeaderItem__Wrapper.getNamespace : WideString;
begin
result := IntfHeaderItem(GetRecordPtr^).Namespace;
end;
procedure __IntfHeaderItem__Wrapper.setName(const val : WideString);
begin
IntfHeaderItem(GetRecordPtr^).Name := val;
end;
function __IntfHeaderItem__Wrapper.getName : WideString;
begin
result := IntfHeaderItem(GetRecordPtr^).Name;
end;
procedure __IntfHeaderItem__Wrapper.setDefaultMethodType(const val : eHeaderMethodType);
begin
IntfHeaderItem(GetRecordPtr^).DefaultMethodType := val;
end;
function __IntfHeaderItem__Wrapper.getDefaultMethodType : eHeaderMethodType;
begin
result := IntfHeaderItem(GetRecordPtr^).DefaultMethodType;
end;
procedure __IntfHeaderItem__Wrapper.setDefaultRequired(const val : Boolean);
begin
IntfHeaderItem(GetRecordPtr^).DefaultRequired := val;
end;
function __IntfHeaderItem__Wrapper.getDefaultRequired : Boolean;
begin
result := IntfHeaderItem(GetRecordPtr^).DefaultRequired;
end;
procedure __IntfHeaderItem__Wrapper.setMethodNames(const val : AnsiString);
begin
IntfHeaderItem(GetRecordPtr^).MethodNames := val;
end;
function __IntfHeaderItem__Wrapper.getMethodNames : AnsiString;
begin
result := IntfHeaderItem(GetRecordPtr^).MethodNames;
end;
function __InvRegClassEntry__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __InvRegClassEntry__Wrapper.setURI(const val : AnsiString);
begin
InvRegClassEntry(GetRecordPtr^).URI := val;
end;
function __InvRegClassEntry__Wrapper.getURI : AnsiString;
begin
result := InvRegClassEntry(GetRecordPtr^).URI;
end;
function __InvRegIntfEntry__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __InvRegIntfEntry__Wrapper.setName(const val : AnsiString);
begin
InvRegIntfEntry(GetRecordPtr^).Name := val;
end;
function __InvRegIntfEntry__Wrapper.getName : AnsiString;
begin
result := InvRegIntfEntry(GetRecordPtr^).Name;
end;
procedure __InvRegIntfEntry__Wrapper.setExtName(const val : WideString);
begin
InvRegIntfEntry(GetRecordPtr^).ExtName := val;
end;
function __InvRegIntfEntry__Wrapper.getExtName : WideString;
begin
result := InvRegIntfEntry(GetRecordPtr^).ExtName;
end;
procedure __InvRegIntfEntry__Wrapper.setUnitName(const val : AnsiString);
begin
InvRegIntfEntry(GetRecordPtr^).UnitName := val;
end;
function __InvRegIntfEntry__Wrapper.getUnitName : AnsiString;
begin
result := InvRegIntfEntry(GetRecordPtr^).UnitName;
end;
procedure __InvRegIntfEntry__Wrapper.setNamespace(const val : WideString);
begin
InvRegIntfEntry(GetRecordPtr^).Namespace := val;
end;
function __InvRegIntfEntry__Wrapper.getNamespace : WideString;
begin
result := InvRegIntfEntry(GetRecordPtr^).Namespace;
end;
procedure __InvRegIntfEntry__Wrapper.setWSDLEncoding(const val : WideString);
begin
InvRegIntfEntry(GetRecordPtr^).WSDLEncoding := val;
end;
function __InvRegIntfEntry__Wrapper.getWSDLEncoding : WideString;
begin
result := InvRegIntfEntry(GetRecordPtr^).WSDLEncoding;
end;
procedure __InvRegIntfEntry__Wrapper.setDocumentation(const val : AnsiString);
begin
InvRegIntfEntry(GetRecordPtr^).Documentation := val;
end;
function __InvRegIntfEntry__Wrapper.getDocumentation : AnsiString;
begin
result := InvRegIntfEntry(GetRecordPtr^).Documentation;
end;
procedure __InvRegIntfEntry__Wrapper.setSOAPAction(const val : AnsiString);
begin
InvRegIntfEntry(GetRecordPtr^).SOAPAction := val;
end;
function __InvRegIntfEntry__Wrapper.getSOAPAction : AnsiString;
begin
result := InvRegIntfEntry(GetRecordPtr^).SOAPAction;
end;
procedure __InvRegIntfEntry__Wrapper.setReturnParamNames(const val : AnsiString);
begin
InvRegIntfEntry(GetRecordPtr^).ReturnParamNames := val;
end;
function __InvRegIntfEntry__Wrapper.getReturnParamNames : AnsiString;
begin
result := InvRegIntfEntry(GetRecordPtr^).ReturnParamNames;
end;
procedure __InvRegIntfEntry__Wrapper.setUDDIOperator(const val : AnsiString);
begin
InvRegIntfEntry(GetRecordPtr^).UDDIOperator := val;
end;
function __InvRegIntfEntry__Wrapper.getUDDIOperator : AnsiString;
begin
result := InvRegIntfEntry(GetRecordPtr^).UDDIOperator;
end;
procedure __InvRegIntfEntry__Wrapper.setUDDIBindingKey(const val : AnsiString);
begin
InvRegIntfEntry(GetRecordPtr^).UDDIBindingKey := val;
end;
function __InvRegIntfEntry__Wrapper.getUDDIBindingKey : AnsiString;
begin
result := InvRegIntfEntry(GetRecordPtr^).UDDIBindingKey;
end;
function __MethParamNameMapItem__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MethParamNameMapItem__Wrapper.setMethName(const val : AnsiString);
begin
MethParamNameMapItem(GetRecordPtr^).MethName := val;
end;
function __MethParamNameMapItem__Wrapper.getMethName : AnsiString;
begin
result := MethParamNameMapItem(GetRecordPtr^).MethName;
end;
function __TDynToClear__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TRemHeaderEntry__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRemHeaderEntry__Wrapper.setName(const val : WideString);
begin
TRemHeaderEntry(GetRecordPtr^).Name := val;
end;
function __TRemHeaderEntry__Wrapper.getName : WideString;
begin
result := TRemHeaderEntry(GetRecordPtr^).Name;
end;
procedure __TRemHeaderEntry__Wrapper.setExtName(const val : WideString);
begin
TRemHeaderEntry(GetRecordPtr^).ExtName := val;
end;
function __TRemHeaderEntry__Wrapper.getExtName : WideString;
begin
result := TRemHeaderEntry(GetRecordPtr^).ExtName;
end;
procedure __TRemHeaderEntry__Wrapper.setURI(const val : WideString);
begin
TRemHeaderEntry(GetRecordPtr^).URI := val;
end;
function __TRemHeaderEntry__Wrapper.getURI : WideString;
begin
result := TRemHeaderEntry(GetRecordPtr^).URI;
end;
function __TRemRegEntry__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRemRegEntry__Wrapper.setURI(const val : WideString);
begin
TRemRegEntry(GetRecordPtr^).URI := val;
end;
function __TRemRegEntry__Wrapper.getURI : WideString;
begin
result := TRemRegEntry(GetRecordPtr^).URI;
end;
procedure __TRemRegEntry__Wrapper.setName(const val : WideString);
begin
TRemRegEntry(GetRecordPtr^).Name := val;
end;
function __TRemRegEntry__Wrapper.getName : WideString;
begin
result := TRemRegEntry(GetRecordPtr^).Name;
end;
procedure __TRemRegEntry__Wrapper.setExtName(const val : WideString);
begin
TRemRegEntry(GetRecordPtr^).ExtName := val;
end;
function __TRemRegEntry__Wrapper.getExtName : WideString;
begin
result := TRemRegEntry(GetRecordPtr^).ExtName;
end;
procedure __TRemRegEntry__Wrapper.setIsScalar(const val : Boolean);
begin
TRemRegEntry(GetRecordPtr^).IsScalar := val;
end;
function __TRemRegEntry__Wrapper.getIsScalar : Boolean;
begin
result := TRemRegEntry(GetRecordPtr^).IsScalar;
end;
procedure __TRemRegEntry__Wrapper.setMultiRefOpt(const val : TObjMultiOptions);
begin
TRemRegEntry(GetRecordPtr^).MultiRefOpt := val;
end;
function __TRemRegEntry__Wrapper.getMultiRefOpt : TObjMultiOptions;
begin
result := TRemRegEntry(GetRecordPtr^).MultiRefOpt;
end;
function _ExtNameMapItem_ : IDispatch;
begin
  result := __ExtNameMapItem__Wrapper.Create;
end;
function _IntfExceptionItem_ : IDispatch;
begin
  result := __IntfExceptionItem__Wrapper.Create;
end;
function _IntfHeaderItem_ : IDispatch;
begin
  result := __IntfHeaderItem__Wrapper.Create;
end;
function _InvRegClassEntry_ : IDispatch;
begin
  result := __InvRegClassEntry__Wrapper.Create;
end;
function _InvRegIntfEntry_ : IDispatch;
begin
  result := __InvRegIntfEntry__Wrapper.Create;
end;
function _MethParamNameMapItem_ : IDispatch;
begin
  result := __MethParamNameMapItem__Wrapper.Create;
end;
function _TDynToClear_ : IDispatch;
begin
  result := __TDynToClear__Wrapper.Create;
end;
function _TRemHeaderEntry_ : IDispatch;
begin
  result := __TRemHeaderEntry__Wrapper.Create;
end;
function _TRemRegEntry_ : IDispatch;
begin
  result := __TRemRegEntry__Wrapper.Create;
end;
function __TIntfMethEntry__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIntfMethEntry__Wrapper.setName(const val : AnsiString);
begin
TIntfMethEntry(GetRecordPtr^).Name := val;
end;
function __TIntfMethEntry__Wrapper.getName : AnsiString;
begin
result := TIntfMethEntry(GetRecordPtr^).Name;
end;
procedure __TIntfMethEntry__Wrapper.setCC(const val : TCallConv);
begin
TIntfMethEntry(GetRecordPtr^).CC := val;
end;
function __TIntfMethEntry__Wrapper.getCC : TCallConv;
begin
result := TIntfMethEntry(GetRecordPtr^).CC;
end;
procedure __TIntfMethEntry__Wrapper.setPos(const val : Integer);
begin
TIntfMethEntry(GetRecordPtr^).Pos := val;
end;
function __TIntfMethEntry__Wrapper.getPos : Integer;
begin
result := TIntfMethEntry(GetRecordPtr^).Pos;
end;
procedure __TIntfMethEntry__Wrapper.setParamCount(const val : Integer);
begin
TIntfMethEntry(GetRecordPtr^).ParamCount := val;
end;
function __TIntfMethEntry__Wrapper.getParamCount : Integer;
begin
result := TIntfMethEntry(GetRecordPtr^).ParamCount;
end;
procedure __TIntfMethEntry__Wrapper.setHasRTTI(const val : Boolean);
begin
TIntfMethEntry(GetRecordPtr^).HasRTTI := val;
end;
function __TIntfMethEntry__Wrapper.getHasRTTI : Boolean;
begin
result := TIntfMethEntry(GetRecordPtr^).HasRTTI;
end;
function __TGUID__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TGUID__Wrapper.setD1(const val : LongWord);
begin
TGUID(GetRecordPtr^).D1 := val;
end;
function __TGUID__Wrapper.getD1 : LongWord;
begin
result := TGUID(GetRecordPtr^).D1;
end;
procedure __TGUID__Wrapper.setD2(const val : Word);
begin
TGUID(GetRecordPtr^).D2 := val;
end;
function __TGUID__Wrapper.getD2 : Word;
begin
result := TGUID(GetRecordPtr^).D2;
end;
procedure __TGUID__Wrapper.setD3(const val : Word);
begin
TGUID(GetRecordPtr^).D3 := val;
end;
function __TGUID__Wrapper.getD3 : Word;
begin
result := TGUID(GetRecordPtr^).D3;
end;
procedure __TInvContext__SetMethodInfo__Wrapper(__Instance : TInvContext;
const p0 : IDispatch);
var
__p0 : ^TIntfMethEntry;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
TInvContext(__Instance).SetMethodInfo(__p0^);
end;

procedure __TInvContext__AllocServerData__Wrapper(__Instance : TInvContext;
const p0 : IDispatch);
var
__p0 : ^TIntfMethEntry;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
TInvContext(__Instance).AllocServerData(__p0^);
end;

function __TInvokableClassRegistry__GetActionURIOfIID__Wrapper(__Instance : TInvokableClassRegistry;
const p0 : IDispatch): string;
var
__p0 : ^TGUID;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := TInvokableClassRegistry(__Instance).GetActionURIOfIID(__p0^);
end;

function __TInvokableClassRegistry__GetNamespaceByGUID__Wrapper(__Instance : TInvokableClassRegistry;
const p0 : IDispatch): string;
var
__p0 : ^TGUID;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := TInvokableClassRegistry(__Instance).GetNamespaceByGUID(__p0^);
end;

function __TInvokableClassRegistry__GetInterfaceTypeInfo__Wrapper(__Instance : TInvokableClassRegistry;
const p0 : IDispatch): Pointer;
var
__p0 : ^TGUID;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := TInvokableClassRegistry(__Instance).GetInterfaceTypeInfo(__p0^);
end;

function __TInvokableClassRegistry__GetRegInterfaceEntry__Wrapper(__Instance : TInvokableClassRegistry;
p0 : Integer): IDispatch;
var
__result : InvRegIntfEntry;
__wrapper : __InvRegIntfEntry__Wrapper;
begin
__result := TInvokableClassRegistry(__Instance).GetRegInterfaceEntry(p0);
__wrapper := __InvRegIntfEntry__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

function __TRemotableTypeRegistry__GetURIMap__Wrapper(__Instance : TRemotableTypeRegistry;
p0 : Integer): IDispatch;
var
__result : TRemRegEntry;
__wrapper : __TRemRegEntry__Wrapper;
begin
__result := TRemotableTypeRegistry(__Instance).GetURIMap(p0);
__wrapper := __TRemRegEntry__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

procedure __TSOAPAttachment__SetSourceStream__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
TSOAPAttachment(__Instance).SetSourceStream(TStream(VarToObject(OleVariant(pargs^[0]))));
end;
2:
begin
TSOAPAttachment(__Instance).SetSourceStream(TStream(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
end;
end
end;


type __ExtNameMapItem__Wrapper__ = class(__ExtNameMapItem__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ExtNameMapItem__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertExtNameMapItemToVariant(var R : ExtNameMapItem) : OleVariant;
var
__rw : __ExtNameMapItem__Wrapper__;
begin
__rw := __ExtNameMapItem__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToExtNameMapItem(const V : OleVariant) : ExtNameMapItem;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ExtNameMapItem((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __IntfExceptionItem__Wrapper__ = class(__IntfExceptionItem__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __IntfExceptionItem__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertIntfExceptionItemToVariant(var R : IntfExceptionItem) : OleVariant;
var
__rw : __IntfExceptionItem__Wrapper__;
begin
__rw := __IntfExceptionItem__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToIntfExceptionItem(const V : OleVariant) : IntfExceptionItem;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := IntfExceptionItem((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __IntfHeaderItem__Wrapper__ = class(__IntfHeaderItem__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __IntfHeaderItem__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertIntfHeaderItemToVariant(var R : IntfHeaderItem) : OleVariant;
var
__rw : __IntfHeaderItem__Wrapper__;
begin
__rw := __IntfHeaderItem__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToIntfHeaderItem(const V : OleVariant) : IntfHeaderItem;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := IntfHeaderItem((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __InvRegClassEntry__Wrapper__ = class(__InvRegClassEntry__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __InvRegClassEntry__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertInvRegClassEntryToVariant(var R : InvRegClassEntry) : OleVariant;
var
__rw : __InvRegClassEntry__Wrapper__;
begin
__rw := __InvRegClassEntry__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToInvRegClassEntry(const V : OleVariant) : InvRegClassEntry;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := InvRegClassEntry((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __InvRegIntfEntry__Wrapper__ = class(__InvRegIntfEntry__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __InvRegIntfEntry__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertInvRegIntfEntryToVariant(var R : InvRegIntfEntry) : OleVariant;
var
__rw : __InvRegIntfEntry__Wrapper__;
begin
__rw := __InvRegIntfEntry__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToInvRegIntfEntry(const V : OleVariant) : InvRegIntfEntry;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := InvRegIntfEntry((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MethParamNameMapItem__Wrapper__ = class(__MethParamNameMapItem__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MethParamNameMapItem__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMethParamNameMapItemToVariant(var R : MethParamNameMapItem) : OleVariant;
var
__rw : __MethParamNameMapItem__Wrapper__;
begin
__rw := __MethParamNameMapItem__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMethParamNameMapItem(const V : OleVariant) : MethParamNameMapItem;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MethParamNameMapItem((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDynToClear__Wrapper__ = class(__TDynToClear__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDynToClear__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDynToClearToVariant(var R : TDynToClear) : OleVariant;
var
__rw : __TDynToClear__Wrapper__;
begin
__rw := __TDynToClear__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDynToClear(const V : OleVariant) : TDynToClear;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDynToClear((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TGUID__Wrapper__ = class(__TGUID__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TGUID__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTGUIDToVariant(var R : TGUID) : OleVariant;
var
__rw : __TGUID__Wrapper__;
begin
__rw := __TGUID__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTGUID(const V : OleVariant) : TGUID;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TGUID((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TIntfMethEntry__Wrapper__ = class(__TIntfMethEntry__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIntfMethEntry__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIntfMethEntryToVariant(var R : TIntfMethEntry) : OleVariant;
var
__rw : __TIntfMethEntry__Wrapper__;
begin
__rw := __TIntfMethEntry__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIntfMethEntry(const V : OleVariant) : TIntfMethEntry;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIntfMethEntry((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRemHeaderEntry__Wrapper__ = class(__TRemHeaderEntry__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRemHeaderEntry__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRemHeaderEntryToVariant(var R : TRemHeaderEntry) : OleVariant;
var
__rw : __TRemHeaderEntry__Wrapper__;
begin
__rw := __TRemHeaderEntry__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRemHeaderEntry(const V : OleVariant) : TRemHeaderEntry;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRemHeaderEntry((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRemRegEntry__Wrapper__ = class(__TRemRegEntry__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRemRegEntry__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRemRegEntryToVariant(var R : TRemRegEntry) : OleVariant;
var
__rw : __TRemRegEntry__Wrapper__;
begin
__rw := __TRemRegEntry__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRemRegEntry(const V : OleVariant) : TRemRegEntry;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRemRegEntry((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetERemotableException__FaultActor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := ERemotableException(Instance).FaultActor;
end;

procedure __DC__SetERemotableException__FaultActor(Instance : TObject; Params : PVariantArgList);
begin
ERemotableException(Instance).FaultActor:=OleVariant(Params^[0]);
end;

function __DC__GetERemotableException__FaultCode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := ERemotableException(Instance).FaultCode;
end;

procedure __DC__SetERemotableException__FaultCode(Instance : TObject; Params : PVariantArgList);
begin
ERemotableException(Instance).FaultCode:=OleVariant(Params^[0]);
end;

function __DC__GetERemotableException__FaultDetail(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := ERemotableException(Instance).FaultDetail;
end;

procedure __DC__SetERemotableException__FaultDetail(Instance : TObject; Params : PVariantArgList);
begin
ERemotableException(Instance).FaultDetail:=OleVariant(Params^[0]);
end;

function __DC__GetTHeaderList__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := THeaderList(Instance).Count;
end;

function __DC__GetTHeaderList__OwnsObjects(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := THeaderList(Instance).OwnsObjects;
end;

procedure __DC__SetTHeaderList__OwnsObjects(Instance : TObject; Params : PVariantArgList);
begin
THeaderList(Instance).OwnsObjects:=OleVariant(Params^[0]);
end;

function __DC__GetTHeaderList__Headers(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(THeaderList(Instance).Headers[OleVariant(Params^[0])]);
end;

function __DC__GetTInvokableClass__RefCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TInvokableClass(Instance).RefCount;
end;

function __DC__GetTRemotable__DataContext(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TRemotable(Instance).DataContext);
end;

procedure __DC__SetTRemotable__DataContext(Instance : TObject; Params : PVariantArgList);
begin
TRemotable(Instance).DataContext:=TDataContext(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTRemotable__SerializationOptions(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TSerializationOptions;
begin
tmp := TRemotable(Instance).SerializationOptions;
result := VarFromSet(tmp, sizeof(tmp));
end;

function __DC__GetTRemotableTypeRegistry__AutoRegisterNativeTypes(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TRemotableTypeRegistry(Instance).AutoRegisterNativeTypes;
end;

procedure __DC__SetTRemotableTypeRegistry__AutoRegisterNativeTypes(Instance : TObject; Params : PVariantArgList);
begin
TRemotableTypeRegistry(Instance).AutoRegisterNativeTypes:=OleVariant(Params^[0]);
end;

function __DC__GetTSOAPAttachment__CacheFile(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSOAPAttachment(Instance).CacheFile;
end;

function __DC__GetTSOAPAttachment__CacheFilePersist(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSOAPAttachment(Instance).CacheFilePersist;
end;

procedure __DC__SetTSOAPAttachment__CacheFilePersist(Instance : TObject; Params : PVariantArgList);
begin
TSOAPAttachment(Instance).CacheFilePersist:=OleVariant(Params^[0]);
end;

function __DC__GetTSOAPAttachment__ContentType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSOAPAttachment(Instance).ContentType;
end;

procedure __DC__SetTSOAPAttachment__ContentType(Instance : TObject; Params : PVariantArgList);
begin
TSOAPAttachment(Instance).ContentType:=OleVariant(Params^[0]);
end;

function __DC__GetTSOAPAttachment__Encoding(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSOAPAttachment(Instance).Encoding;
end;

procedure __DC__SetTSOAPAttachment__Encoding(Instance : TObject; Params : PVariantArgList);
begin
TSOAPAttachment(Instance).Encoding:=OleVariant(Params^[0]);
end;

function __DC__GetTSOAPAttachment__Headers(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TSOAPAttachment(Instance).Headers);
end;

function __DC__GetTSOAPAttachment__Ownership(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSOAPAttachment(Instance).Ownership;
end;

procedure __DC__SetTSOAPAttachment__Ownership(Instance : TObject; Params : PVariantArgList);
begin
TSOAPAttachment(Instance).Ownership:=OleVariant(Params^[0]);
end;

function __DC__GetTSOAPAttachment__SourceStream(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TSOAPAttachment(Instance).SourceStream);
end;

function __DC__GetTSOAPAttachment__SourceString(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSOAPAttachment(Instance).SourceString;
end;

procedure __DC__SetTSOAPAttachment__SourceString(Instance : TObject; Params : PVariantArgList);
begin
TSOAPAttachment(Instance).SourceString:=OleVariant(Params^[0]);
end;

function __DC__GetTSOAPHeader__MustUnderstand(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSOAPHeader(Instance).MustUnderstand;
end;

procedure __DC__SetTSOAPHeader__MustUnderstand(Instance : TObject; Params : PVariantArgList);
begin
TSOAPHeader(Instance).MustUnderstand:=OleVariant(Params^[0]);
end;

function __DC__GetTSOAPHeader__Actor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSOAPHeader(Instance).Actor;
end;

procedure __DC__SetTSOAPHeader__Actor(Instance : TObject; Params : PVariantArgList);
begin
TSOAPHeader(Instance).Actor:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(ERemotableException,'FaultActor',__DC__GetERemotableException__FaultActor,__DC__SetERemotableException__FaultActor);
RegisterProperty(ERemotableException,'FaultCode',__DC__GetERemotableException__FaultCode,__DC__SetERemotableException__FaultCode);
RegisterProperty(ERemotableException,'FaultDetail',__DC__GetERemotableException__FaultDetail,__DC__SetERemotableException__FaultDetail);
RegisterProperty(THeaderList,'Count',__DC__GetTHeaderList__Count,nil);
RegisterProperty(THeaderList,'OwnsObjects',__DC__GetTHeaderList__OwnsObjects,__DC__SetTHeaderList__OwnsObjects);
RegisterIndexedProperty(THeaderList,'Headers',1,True,__DC__GetTHeaderList__Headers,nil);
RegisterProperty(TInvokableClass,'RefCount',__DC__GetTInvokableClass__RefCount,nil);
RegisterProperty(TRemotable,'DataContext',__DC__GetTRemotable__DataContext,__DC__SetTRemotable__DataContext);
RegisterProperty(TRemotable,'SerializationOptions',__DC__GetTRemotable__SerializationOptions,nil);
RegisterProperty(TRemotableTypeRegistry,'AutoRegisterNativeTypes',__DC__GetTRemotableTypeRegistry__AutoRegisterNativeTypes,__DC__SetTRemotableTypeRegistry__AutoRegisterNativeTypes);
RegisterProperty(TSOAPAttachment,'CacheFile',__DC__GetTSOAPAttachment__CacheFile,nil);
RegisterProperty(TSOAPAttachment,'CacheFilePersist',__DC__GetTSOAPAttachment__CacheFilePersist,__DC__SetTSOAPAttachment__CacheFilePersist);
RegisterProperty(TSOAPAttachment,'ContentType',__DC__GetTSOAPAttachment__ContentType,__DC__SetTSOAPAttachment__ContentType);
RegisterProperty(TSOAPAttachment,'Encoding',__DC__GetTSOAPAttachment__Encoding,__DC__SetTSOAPAttachment__Encoding);
RegisterProperty(TSOAPAttachment,'Headers',__DC__GetTSOAPAttachment__Headers,nil);
RegisterProperty(TSOAPAttachment,'Ownership',__DC__GetTSOAPAttachment__Ownership,__DC__SetTSOAPAttachment__Ownership);
RegisterProperty(TSOAPAttachment,'SourceStream',__DC__GetTSOAPAttachment__SourceStream,nil);
RegisterProperty(TSOAPAttachment,'SourceString',__DC__GetTSOAPAttachment__SourceString,__DC__SetTSOAPAttachment__SourceString);
RegisterProperty(TSOAPHeader,'MustUnderstand',__DC__GetTSOAPHeader__MustUnderstand,__DC__SetTSOAPHeader__MustUnderstand);
RegisterProperty(TSOAPHeader,'Actor',__DC__GetTSOAPHeader__Actor,__DC__SetTSOAPHeader__Actor);
end;

function __DC__GetInvokeRegistry__AppNameSpacePrefix(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := InvokeRegistry.AppNameSpacePrefix;
end;

procedure __DC__SetInvokeRegistry__AppNameSpacePrefix(Instance : TObject; Params : PVariantArgList);
begin
InvokeRegistry.AppNameSpacePrefix:=OleVariant(Params^[0]);
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('AppNameSpacePrefix',__DC__GetInvokeRegistry__AppNameSpacePrefix,__DC__SetInvokeRegistry__AppNameSpacePrefix));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..36] of string = (
'ocoDontPrefixNode'
,'ocoDontSerializeProps'
,'ocoDontPutTypeAttr'
,'xoHolderClass'
,'xoAttributeOnLastMember'
,'xoInlineArrays'
,'xoLiteralParam'
,'xoSimpleTypeWrapper'
,'xoOption6'
,'xoOption7'
,'xoOption8'
,'xoOption9'
,'xoOptionA'
,'xoOptionB'
,'xoOptionC'
,'xoOptionD'
,'xoOptionE'
,'xoOptionF'
,'xoOptionG'
,'xoOptionH'
,'xoOptionI'
,'hmtAll'
,'hmtRequest'
,'hmtResponse'
,'ioDefault'
,'ioDocument'
,'ioLiteral'
,'ioHasDefaultSOAPAction'
,'ioHasReturnParamNames'
,'ioHasNamespace'
,'ioIsAppServerSOAP'
,'ioHasUDDIInfo'
,'ioHasAllSOAPActions'
,'ocDefault'
,'ocMultiRef'
,'ocNoMultiRef'
,'AS_ATTRIBUTE'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,ocoDontPrefixNode));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,ocoDontSerializeProps));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,ocoDontPutTypeAttr));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,xoHolderClass));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,xoAttributeOnLastMember));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,xoInlineArrays));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,xoLiteralParam));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,xoSimpleTypeWrapper));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,xoOption6));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,xoOption7));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,xoOption8));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,xoOption9));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,xoOptionA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,xoOptionB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,xoOptionC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,xoOptionD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,xoOptionE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,xoOptionF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,xoOptionG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,xoOptionH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,xoOptionI));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,hmtAll));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,hmtRequest));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,hmtResponse));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,ioDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,ioDocument));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,ioLiteral));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,ioHasDefaultSOAPAction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,ioHasReturnParamNames));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,ioHasNamespace));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,ioIsAppServerSOAP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,ioHasUDDIInfo));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,ioHasAllSOAPActions));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,ocDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,ocMultiRef));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,ocNoMultiRef));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,AS_ATTRIBUTE));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..16] of TClass = (
ERemotableException,
ETypeRegistryException,
TDataContext,
THeaderList,
TInvContext,
TInvokableClass,
TInvokableClassRegistry,
TPascalRemotableClassRegistry,
TPascalRemotableTypeRegistry,
TRemotable,
TRemotableClassRegistry,
TRemotableTypeRegistry,
TRemotableXS,
TSOAPAttachment,
TSOAPHeader,
TSOAPHeaders,
TSOAPHeadersBase
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..14] of string = (
'ExtNameMapItem'
,'IntfExceptionItem'
,'IntfHeaderItem'
,'InvRegClassEntry'
,'InvRegIntfEntry'
,'MethParamNameMapItem'
,'TDynToClear'
,'TRemHeaderEntry'
,'TRemRegEntry'
,'GetRemotableDataContext'
,'SetRemotableDataContext'
,'InvRegistry'
,'RemClassRegistry'
,'RemTypeRegistry'
,'SubstituteStrings'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_ExtNameMapItem_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_IntfExceptionItem_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_IntfHeaderItem_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(_InvRegClassEntry_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(_InvRegIntfEntry_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[5],Addr(_MethParamNameMapItem_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[6],Addr(_TDynToClear_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[7],Addr(_TRemHeaderEntry_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[8],Addr(_TRemRegEntry_)));
RegisterProc(nil,MethodNames[9],mtProc,TypeInfo(_T0),[TypeInfoPointer],Addr(GetRemotableDataContext),cRegister);

RegisterProc(nil,MethodNames[10],mtProc,TypeInfo(_T1),[
TypeInfoPointer],Addr(SetRemotableDataContext),cRegister);

RegisterProc(nil,MethodNames[11],mtProc,TypeInfo(_T2),[TypeInfo(TInvokableClassRegistry)],Addr(InvRegistry),cRegister);

RegisterProc(nil,MethodNames[12],mtProc,TypeInfo(_T3),[TypeInfo(TRemotableClassRegistry)],Addr(RemClassRegistry),cRegister);

RegisterProc(nil,MethodNames[13],mtProc,TypeInfo(_T4),[TypeInfo(TRemotableTypeRegistry)],Addr(RemTypeRegistry),cRegister);

RegisterProc(nil,MethodNames[14],mtProc,TypeInfo(_T5),[
TypeInfo(WideString),
TypeInfo(WideString),
TypeInfo(WideString),TypeInfo(WideString)],Addr(SubstituteStrings),cRegister);

//RegisterProc(ERemotableException,'Create',mtConstructor,TypeInfo(_T6),NoParams, pointer(0),cRegister);
RegisterProc(ERemotableException,'Create',mtConstructor,TypeInfo(_T6),NoParams,  getVMTProcAddr('ERemotableException','Create',0),cRegister);


RegisterProc(TDataContext,'Create',mtConstructor,TypeInfo(_T7),NoParams,Addr(TDataContext.Create),cRegister);

RegRegisterMethod(TDataContext,'AllocData',TypeInfo(_T8),[
TypeInfo(Integer),TypeInfoPointer],Addr(TDataContext.AllocData));

RegRegisterMethod(TDataContext,'SetDataPointer',TypeInfo(_T9),[
TypeInfo(Integer),
TypeInfoPointer],Addr(TDataContext.SetDataPointer));

RegRegisterMethod(TDataContext,'GetDataPointer',TypeInfo(_T10),[
TypeInfo(Integer),TypeInfoPointer],Addr(TDataContext.GetDataPointer));

RegRegisterMethod(TDataContext,'AddObjectToDestroy',TypeInfo(_T11),[
TypeInfo(TObject)],Addr(TDataContext.AddObjectToDestroy));

RegRegisterMethod(TDataContext,'RemoveObjectToDestroy',TypeInfo(_T12),[
TypeInfo(TObject)],Addr(TDataContext.RemoveObjectToDestroy));

RegRegisterMethod(TDataContext,'AddStrToClear',TypeInfo(_T15),[
TypeInfoPointer],Addr(TDataContext.AddStrToClear));

RegRegisterMethod(TDataContext,'AddWStrToClear',TypeInfo(_T16),[
TypeInfoPointer],Addr(TDataContext.AddWStrToClear));

RegisterProc(THeaderList,'Create',mtConstructor,TypeInfo(_T17),NoParams,Addr(THeaderList.Create),cRegister);

RegRegisterMethod(THeaderList,'Add',TypeInfo(_T18),[
TypeInfo(TSOAPHeader)],Addr(THeaderList.Add));

RegRegisterMethod(THeaderList,'Clear',TypeInfo(_T19),NoParams,Addr(THeaderList.Clear));

RegRegisterMethod(THeaderList,'Extract',TypeInfo(_T20),[
TypeInfo(TObject),TypeInfo(TObject)],Addr(THeaderList.Extract));

RegRegisterMethod(THeaderList,'IndexOf',TypeInfo(_T21),[
TypeInfo(TObject),TypeInfo(Integer)],Addr(THeaderList.IndexOf));

RegRegisterMethod(TInvContext,'SetMethodInfo',TypeInfo(_T22),[
TypeInfo(IDispatch)],Addr(__TInvContext__SetMethodInfo__Wrapper));

RegRegisterMethod(TInvContext,'SetParamPointer',TypeInfo(_T23),[
TypeInfo(Integer),
TypeInfoPointer],Addr(TInvContext.SetParamPointer));

RegRegisterMethod(TInvContext,'GetParamPointer',TypeInfo(_T24),[
TypeInfo(Integer),TypeInfoPointer],Addr(TInvContext.GetParamPointer));

RegRegisterMethod(TInvContext,'GetResultPointer',TypeInfo(_T25),[TypeInfoPointer],Addr(TInvContext.GetResultPointer));

RegRegisterMethod(TInvContext,'SetResultPointer',TypeInfo(_T26),[
TypeInfoPointer],Addr(TInvContext.SetResultPointer));

RegRegisterMethod(TInvContext,'AllocServerData',TypeInfo(_T27),[
TypeInfo(IDispatch)],Addr(__TInvContext__AllocServerData__Wrapper));

//RegisterProc(TInvokableClass,'Create',mtConstructor,TypeInfo(_T28),NoParams, pointer(0),cRegister);
RegisterProc(TInvokableClass,'Create',mtConstructor,TypeInfo(_T28),NoParams,  getVMTProcAddr('TInvokableClass','Create',0),cRegister);


RegisterProc(TInvokableClassRegistry,'Create',mtConstructor,TypeInfo(_T29),NoParams,Addr(TInvokableClassRegistry.Create),cRegister);

RegRegisterMethod(TInvokableClassRegistry,'GetActionURIOfIID',TypeInfo(_T48),[
TypeInfo(IDispatch),TypeInfo(string)],Addr(__TInvokableClassRegistry__GetActionURIOfIID__Wrapper));

//RegRegisterMethod(TInvokableClassRegistry,'Lock',TypeInfo(_T54),NoParams, pointer(0));
RegRegisterMethod(TInvokableClassRegistry,'Lock',TypeInfo(_T54),NoParams,  getVMTProcAddr('TInvokableClassRegistry','Lock',0));


//RegRegisterMethod(TInvokableClassRegistry,'UnLock',TypeInfo(_T55),NoParams, pointer(4));
RegRegisterMethod(TInvokableClassRegistry,'UnLock',TypeInfo(_T55),NoParams,  getVMTProcAddr('TInvokableClassRegistry','UnLock',4));


RegRegisterMethod(TInvokableClassRegistry,'GetNamespaceByGUID',TypeInfo(_T56),[
TypeInfo(IDispatch),TypeInfo(string)],Addr(__TInvokableClassRegistry__GetNamespaceByGUID__Wrapper));

RegRegisterMethod(TInvokableClassRegistry,'GetInterfaceTypeInfo',TypeInfo(_T60),[
TypeInfo(IDispatch),TypeInfoPointer],Addr(__TInvokableClassRegistry__GetInterfaceTypeInfo__Wrapper));

RegRegisterMethod(TInvokableClassRegistry,'GetRegInterfaceEntry',TypeInfo(_T62),[
TypeInfo(Integer),TypeInfo(IDispatch)],Addr(__TInvokableClassRegistry__GetRegInterfaceEntry__Wrapper));

RegRegisterMethod(TInvokableClassRegistry,'HasRegInterfaceImpl',TypeInfo(_T63),[
TypeInfo(Integer),TypeInfo(Boolean)],Addr(TInvokableClassRegistry.HasRegInterfaceImpl));

RegRegisterMethod(TInvokableClassRegistry,'GetInterfaceCount',TypeInfo(_T65),[TypeInfo(Integer)],Addr(TInvokableClassRegistry.GetInterfaceCount));

RegisterProc(TRemotable,'Create',mtConstructor,TypeInfo(_T74),NoParams, pointer(0),cRegister);

//RegRegisterMethod(TRemotableTypeRegistry,'Lock',TypeInfo(_T77),NoParams, pointer(0));
RegRegisterMethod(TRemotableTypeRegistry,'Lock',TypeInfo(_T77),NoParams,  getVMTProcAddr('TRemotableTypeRegistry','Lock',0));


//RegRegisterMethod(TRemotableTypeRegistry,'UnLock',TypeInfo(_T78),NoParams, pointer(4));
RegRegisterMethod(TRemotableTypeRegistry,'UnLock',TypeInfo(_T78),NoParams,  getVMTProcAddr('TRemotableTypeRegistry','UnLock',4));


RegisterProc(TRemotableTypeRegistry,'Create',mtConstructor,TypeInfo(_T79),NoParams,Addr(TRemotableTypeRegistry.Create),cRegister);

RegRegisterMethod(TRemotableTypeRegistry,'GetURICount',TypeInfo(_T90),[TypeInfo(Integer)],Addr(TRemotableTypeRegistry.GetURICount));

RegRegisterMethod(TRemotableTypeRegistry,'GetURIMap',TypeInfo(_T91),[
TypeInfo(Integer),TypeInfo(IDispatch)],Addr(__TRemotableTypeRegistry__GetURIMap__Wrapper));

RegRegisterMethod(TRemotableTypeRegistry,'GetVarTypeFromXSD',TypeInfo(_T95),[
TypeInfo(InvString),
TypeInfo(InvString),TypeInfo(TVarType)],Addr(TRemotableTypeRegistry.GetVarTypeFromXSD));

//RegRegisterMethod(TRemotableXS,'NativeToXS',TypeInfo(_T103),[TypeInfo(WideString)], pointer(12));
RegRegisterMethod(TRemotableXS,'NativeToXS',TypeInfo(_T103),[TypeInfo(WideString)],  getVMTProcAddr('TRemotableXS','NativeToXS',12));


//RegRegisterMethod(TRemotableXS,'XSToNative',TypeInfo(_T104),[TypeInfo(WideString)], pointer(16));
RegRegisterMethod(TRemotableXS,'XSToNative',TypeInfo(_T104),[TypeInfo(WideString)],  getVMTProcAddr('TRemotableXS','XSToNative',16));


//RegRegisterMethod(TSOAPAttachment,'GetSourceStream',TypeInfo(_T105),[TypeInfo(TStream)], pointer(12));
RegRegisterMethod(TSOAPAttachment,'GetSourceStream',TypeInfo(_T105),[TypeInfo(TStream)],  getVMTProcAddr('TSOAPAttachment','GetSourceStream',12));


//RegRegisterMethod(TSOAPAttachment,'InternalSetCacheFile',TypeInfo(_T106),[TypeInfo(string)], pointer(16));
RegRegisterMethod(TSOAPAttachment,'InternalSetCacheFile',TypeInfo(_T106),[TypeInfo(string)],  getVMTProcAddr('TSOAPAttachment','InternalSetCacheFile',16));


//RegRegisterMethod(TSOAPAttachment,'SetSourceString',TypeInfo(_T107),[TypeInfo(string)], pointer(20));
RegRegisterMethod(TSOAPAttachment,'SetSourceString',TypeInfo(_T107),[TypeInfo(string)],  getVMTProcAddr('TSOAPAttachment','SetSourceString',20));


//RegRegisterMethod(TSOAPAttachment,'SetOwnership',TypeInfo(_T108),[TypeInfo(TStreamOwnership)], pointer(24));
RegRegisterMethod(TSOAPAttachment,'SetOwnership',TypeInfo(_T108),[TypeInfo(TStreamOwnership)],  getVMTProcAddr('TSOAPAttachment','SetOwnership',24));


RegRegisterMethod(TSOAPAttachment,'Init',TypeInfo(_T109),[
TypeInfo(string),
TypeInfo(TStrings),
TypeInfo(string),
TypeInfo(WideString)],Addr(TSOAPAttachment.Init));

RegRegisterMethod(TSOAPAttachment,'SaveToStream',TypeInfo(_T110),[
TypeInfo(TStream)],Addr(TSOAPAttachment.SaveToStream));

RegRegisterMethod(TSOAPAttachment,'SaveToFile',TypeInfo(_T111),[
TypeInfo(string)],Addr(TSOAPAttachment.SaveToFile));

//RegRegisterMethod(TSOAPAttachment,'SetSourceFile',TypeInfo(_T112),[TypeInfo(string)], pointer(28));
RegRegisterMethod(TSOAPAttachment,'SetSourceFile',TypeInfo(_T112),[TypeInfo(string)],  getVMTProcAddr('TSOAPAttachment','SetSourceFile',28));


RegisterProc(TSOAPAttachment,'SetSourceStream',mtScriptMethod,TypeInfo(_T113),[
TypeInfo(TStream),
TypeInfo(TStreamOwnership)],Addr(__TSOAPAttachment__SetSourceStream__Wrapper),cRegister);

RegRegisterMethod(TSOAPHeaders,'Send',TypeInfo(_T114),[
TypeInfo(TSOAPHeader)],Addr(TSOAPHeaders.Send));

RegRegisterMethod(TSOAPHeaders,'SendCount',TypeInfo(_T115),[TypeInfo(Integer)],Addr(TSOAPHeaders.SendCount));

RegRegisterMethod(TSOAPHeaders,'SendAt',TypeInfo(_T116),[
TypeInfo(Integer),TypeInfo(TSOAPHeader)],Addr(TSOAPHeaders.SendAt));

RegRegisterMethod(TSOAPHeaders,'GetOwnsSentHeaders',TypeInfo(_T118),[TypeInfo(Boolean)],Addr(TSOAPHeaders.GetOwnsSentHeaders));

RegRegisterMethod(TSOAPHeaders,'SetOwnsSentHeaders',TypeInfo(_T119),[
TypeInfo(Boolean)],Addr(TSOAPHeaders.SetOwnsSentHeaders));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegRegisterMethod(TDataContext,'AddDynArrayToClear',TypeInfo(_T13),[
TypeInfoPointer,
TypeInfoPointer],Addr(TDataContext.AddDynArrayToClear))}

{RegRegisterMethod(TDataContext,'AddVariantToClear',TypeInfo(_T14),[
TypeInfoPointer],Addr(TDataContext.AddVariantToClear))}

{RegRegisterMethod(TInvokableClassRegistry,'GetRequestHeaderInfoForInterface',TypeInfo(_T34),[
TypeInfoPointer,TypeInfo(THeaderItemArray)],Addr(TInvokableClassRegistry.GetRequestHeaderInfoForInterface))}

{RegRegisterMethod(TInvokableClassRegistry,'GetResponseHeaderInfoForInterface',TypeInfo(_T35),[
TypeInfoPointer,TypeInfo(THeaderItemArray)],Addr(TInvokableClassRegistry.GetResponseHeaderInfoForInterface))}

{RegRegisterMethod(TInvokableClassRegistry,'GetHeaderName',TypeInfo(_T36),[
TypeInfoPointer,
TypeInfo(TClass),TypeInfo(WideString)],Addr(TInvokableClassRegistry.GetHeaderName))}

{RegRegisterMethod(TInvokableClassRegistry,'GetHeaderNamespace',TypeInfo(_T37),[
TypeInfoPointer,
TypeInfo(TClass),TypeInfo(WideString)],Addr(TInvokableClassRegistry.GetHeaderNamespace))}

{RegRegisterMethod(TInvokableClassRegistry,'GetHeaderClass',TypeInfo(_T38),[
TypeInfo(WideString),
TypeInfo(WideString),TypeInfo(TClass)],Addr(TInvokableClassRegistry.GetHeaderClass))}

{RegRegisterMethod(TInvokableClassRegistry,'RegisterException',TypeInfo(_T39),[
TypeInfoPointer,
TypeInfo(TClass)],Addr(TInvokableClassRegistry.RegisterException))}

{RegRegisterMethod(TInvokableClassRegistry,'RegisterExceptionMethod',TypeInfo(_T40),[
TypeInfoPointer,
TypeInfo(TClass),
TypeInfo(string)],Addr(TInvokableClassRegistry.RegisterExceptionMethod))}

{RegRegisterMethod(TInvokableClassRegistry,'GetExceptionInfoForInterface',TypeInfo(_T41),[
TypeInfoPointer,TypeInfo(TExceptionItemArray)],Addr(TInvokableClassRegistry.GetExceptionInfoForInterface))}

{RegRegisterMethod(TInvokableClassRegistry,'RegisterExternalMethName',TypeInfo(_T42),[
TypeInfoPointer,
TypeInfo(string),
TypeInfo(InvString)],Addr(TInvokableClassRegistry.RegisterExternalMethName))}

{RegRegisterMethod(TInvokableClassRegistry,'RegisterExternalParamName',TypeInfo(_T43),[
TypeInfoPointer,
TypeInfo(string),
TypeInfo(string),
TypeInfo(InvString)],Addr(TInvokableClassRegistry.RegisterExternalParamName))}

{RegRegisterMethod(TInvokableClassRegistry,'RegisterInvokableClass',TypeInfo(_T44),[
TypeInfo(TClass),
TypeInfo(TCreateInstanceProc)],Addr(TInvokableClassRegistry.RegisterInvokableClass))}

{RegRegisterMethod(TInvokableClassRegistry,'RegisterDefaultSOAPAction',TypeInfo(_T45),[
TypeInfoPointer,
TypeInfo(InvString)],Addr(TInvokableClassRegistry.RegisterDefaultSOAPAction))}

{RegRegisterMethod(TInvokableClassRegistry,'RegisterAllSOAPActions',TypeInfo(_T46),[
TypeInfoPointer,
TypeInfo(InvString)],Addr(TInvokableClassRegistry.RegisterAllSOAPActions))}

{RegRegisterMethod(TInvokableClassRegistry,'GetActionURIOfInfo',TypeInfo(_T47),[
TypeInfoPointer,
TypeInfo(WideString),
TypeInfo(Integer),TypeInfo(string)],Addr(TInvokableClassRegistry.GetActionURIOfInfo))}

{RegRegisterMethod(TInvokableClassRegistry,'RegisterUDDIInfo',TypeInfo(_T49),[
TypeInfoPointer,
TypeInfo(string),
TypeInfo(string)],Addr(TInvokableClassRegistry.RegisterUDDIInfo))}

{RegRegisterMethod(TInvokableClassRegistry,'GetUDDIInfo',TypeInfo(_T50),[
TypeInfoPointer,
TypeInfo(string),
TypeInfo(string),TypeInfo(Boolean)],Addr(TInvokableClassRegistry.GetUDDIInfo))}

{RegRegisterMethod(TInvokableClassRegistry,'RegisterReturnParamNames',TypeInfo(_T51),[
TypeInfoPointer,
TypeInfo(string)],Addr(TInvokableClassRegistry.RegisterReturnParamNames))}

{RegRegisterMethod(TInvokableClassRegistry,'GetReturnParamNames',TypeInfo(_T52),[
TypeInfoPointer,TypeInfo(string)],Addr(TInvokableClassRegistry.GetReturnParamNames))}

{RegRegisterMethod(TInvokableClassRegistry,'RegisterInvokeOptions',TypeInfo(_T53),[
TypeInfoPointer,
TypeInfo(TIntfInvokeOption)],Addr(TInvokableClassRegistry.RegisterInvokeOptions))}

{RegRegisterMethod(TInvokableClassRegistry,'GetInfoForURI',TypeInfo(_T57),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(TClass),
TypeInfoPointer,
TypeInfo(string),TypeInfo(Boolean)],Addr(TInvokableClassRegistry.GetInfoForURI))}

{RegRegisterMethod(TInvokableClassRegistry,'GetIntfInvokeOptions',TypeInfo(_T58),[
TypeInfoPointer,TypeInfo(TIntfInvokeOptions)],Addr(TInvokableClassRegistry.GetIntfInvokeOptions))}

{RegRegisterMethod(TInvokableClassRegistry,'GetInvokableObjectFromClass',TypeInfo(_T61),[
TypeInfo(TClass),TypeInfo(TObject)],Addr(TInvokableClassRegistry.GetInvokableObjectFromClass))}

{RegRegisterMethod(TInvokableClassRegistry,'GetClassFromIntfInfo',TypeInfo(_T64),[
TypeInfoPointer,
TypeInfo(TClass)],Addr(TInvokableClassRegistry.GetClassFromIntfInfo))}

{RegRegisterMethod(TInvokableClassRegistry,'GetInterfaceExternalName',TypeInfo(_T66),[
TypeInfoPointer,
TypeInfo(string),
TypeInfo(string),TypeInfo(InvString)],Addr(TInvokableClassRegistry.GetInterfaceExternalName))}

{RegRegisterMethod(TInvokableClassRegistry,'GetWSDLEncoding',TypeInfo(_T67),[
TypeInfoPointer,
TypeInfo(string),
TypeInfo(string),TypeInfo(InvString)],Addr(TInvokableClassRegistry.GetWSDLEncoding))}

{RegRegisterMethod(TInvokableClassRegistry,'UnRegisterInterface',TypeInfo(_T68),[
TypeInfoPointer],Addr(TInvokableClassRegistry.UnRegisterInterface))}

{RegRegisterMethod(TInvokableClassRegistry,'UnRegisterInvokableClass',TypeInfo(_T69),[
TypeInfo(TClass)],Addr(TInvokableClassRegistry.UnRegisterInvokableClass))}

{RegRegisterMethod(TInvokableClassRegistry,'GetParamExternalName',TypeInfo(_T70),[
TypeInfoPointer,
TypeInfo(string),
TypeInfo(string),TypeInfo(InvString)],Addr(TInvokableClassRegistry.GetParamExternalName))}

{RegRegisterMethod(TInvokableClassRegistry,'GetParamInternalName',TypeInfo(_T71),[
TypeInfoPointer,
TypeInfo(string),
TypeInfo(InvString),TypeInfo(string)],Addr(TInvokableClassRegistry.GetParamInternalName))}

{RegRegisterMethod(TInvokableClassRegistry,'GetMethExternalName',TypeInfo(_T72),[
TypeInfoPointer,
TypeInfo(string),TypeInfo(InvString)],Addr(TInvokableClassRegistry.GetMethExternalName))}

{RegRegisterMethod(TInvokableClassRegistry,'GetMethInternalName',TypeInfo(_T73),[
TypeInfoPointer,
TypeInfo(InvString),TypeInfo(string)],Addr(TInvokableClassRegistry.GetMethInternalName))}

{RegRegisterMethod(TRemotable,'ObjectToSOAP',TypeInfo(_T75),[
TypeInfo(IXMLNode),
TypeInfo(IXMLNode),
TypeInfo(IObjConverter),
TypeInfo(InvString),
TypeInfo(InvString),
TypeInfo(TObjectConvertOptions),
TypeInfo(InvString),TypeInfo(IXMLNode)], pointer(4))}

{RegRegisterMethod(TRemotable,'SOAPToObject',TypeInfo(_T76),[
TypeInfo(IXMLNode),
TypeInfo(IXMLNode),
TypeInfo(IObjConverter)], pointer(8))}

{RegRegisterMethod(TRemotableTypeRegistry,'TypeInfoToXSD',TypeInfo(_T85),[
TypeInfoPointer,
TypeInfo(WideString),
TypeInfo(WideString),TypeInfo(Boolean)],Addr(TRemotableTypeRegistry.TypeInfoToXSD))}

{RegRegisterMethod(TRemotableTypeRegistry,'GetXSDInfoForClass',TypeInfo(_T86),[
TypeInfoPointer,
TypeInfo(WideString),
TypeInfo(WideString)],Addr(TRemotableTypeRegistry.GetXSDInfoForClass))}

{RegRegisterMethod(TRemotableTypeRegistry,'URIToClass',TypeInfo(_T87),[
TypeInfo(WideString),
TypeInfo(WideString),
TypeInfo(Boolean),TypeInfo(TClass)],Addr(TRemotableTypeRegistry.URIToClass))}

{RegRegisterMethod(TRemotableTypeRegistry,'XSDToTypeInfo',TypeInfo(_T88),[
TypeInfo(WideString),
TypeInfo(WideString),TypeInfoPointer],Addr(TRemotableTypeRegistry.XSDToTypeInfo))}

{RegRegisterMethod(TRemotableTypeRegistry,'URIToInfo',TypeInfo(_T89),[
TypeInfo(WideString),
TypeInfo(WideString),TypeInfoPointer],Addr(TRemotableTypeRegistry.URIToInfo))}

{RegRegisterMethod(TRemotableTypeRegistry,'IsClassScalar',TypeInfo(_T92),[
TypeInfo(TClass),TypeInfo(Boolean)],Addr(TRemotableTypeRegistry.IsClassScalar))}

{RegRegisterMethod(TRemotableTypeRegistry,'ClassOptions',TypeInfo(_T93),[
TypeInfo(TClass),TypeInfo(TObjMultiOptions)],Addr(TRemotableTypeRegistry.ClassOptions))}

{RegRegisterMethod(TRemotableTypeRegistry,'VariantToInfo',TypeInfo(_T94),[
TypeInfo(Variant),
TypeInfo(Boolean),TypeInfoPointer],Addr(TRemotableTypeRegistry.VariantToInfo))}

{RegRegisterMethod(TRemotableTypeRegistry,'RegisterSerializeOptions',TypeInfo(_T96),[
TypeInfoPointer,
TypeInfo(TSerializationOptions)],Addr(TRemotableTypeRegistry.RegisterSerializeOptions))}

{RegRegisterMethod(TRemotableTypeRegistry,'SerializeOptions',TypeInfo(_T97),[
TypeInfoPointer,TypeInfo(TSerializationOptions)],Addr(TRemotableTypeRegistry.SerializeOptions))}

{RegRegisterMethod(TRemotableTypeRegistry,'UnRegisterXSClass',TypeInfo(_T98),[
TypeInfo(TClass)],Addr(TRemotableTypeRegistry.UnRegisterXSClass))}

{RegRegisterMethod(TRemotableTypeRegistry,'UnRegisterXSInfo',TypeInfo(_T99),[
TypeInfoPointer],Addr(TRemotableTypeRegistry.UnRegisterXSInfo))}

{RegRegisterMethod(TRemotableTypeRegistry,'RegisterExternalPropName',TypeInfo(_T100),[
TypeInfoPointer,
TypeInfo(string),
TypeInfo(InvString)],Addr(TRemotableTypeRegistry.RegisterExternalPropName))}

{RegRegisterMethod(TRemotableTypeRegistry,'GetExternalPropName',TypeInfo(_T101),[
TypeInfoPointer,
TypeInfo(string),TypeInfo(InvString)],Addr(TRemotableTypeRegistry.GetExternalPropName))}

{RegRegisterMethod(TRemotableTypeRegistry,'GetInternalPropName',TypeInfo(_T102),[
TypeInfoPointer,
TypeInfo(InvString),TypeInfo(string)],Addr(TRemotableTypeRegistry.GetInternalPropName))}

{RegRegisterMethod(TSOAPHeaders,'Get',TypeInfo(_T117),[
TypeInfo(TClass),
TypeInfo(TSOAPHeader)],Addr(TSOAPHeaders.Get))}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
