{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit FORMS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  Types,
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Messages,
  Windows,
  SysUtils,
  Classes,
  Graphics,
  Menus,
  Controls,
  Imm,
  ActnList,
  MultiMon,
  HelpIntfs,
  Forms;
function ConvertTCMHintShowToVariant(var R : TCMHintShow) : OleVariant;
function ConvertVariantToTCMHintShow(const V : OleVariant) : TCMHintShow;
function ConvertTCMHintShowPauseToVariant(var R : TCMHintShowPause) : OleVariant;
function ConvertVariantToTCMHintShowPause(const V : OleVariant) : TCMHintShowPause;
function ConvertTCursorRecToVariant(var R : TCursorRec) : OleVariant;
function ConvertVariantToTCursorRec(const V : OleVariant) : TCursorRec;
function ConvertTHintInfoToVariant(var R : THintInfo) : OleVariant;
function ConvertVariantToTHintInfo(const V : OleVariant) : THintInfo;
function ConvertTMessageToVariant(var R : TMessage) : OleVariant;
function ConvertVariantToTMessage(const V : OleVariant) : TMessage;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
function ConvertTPopupFormToVariant(var R : TPopupForm) : OleVariant;
function ConvertVariantToTPopupForm(const V : OleVariant) : TPopupForm;
function ConvertTPopupWndToVariant(var R : TPopupWnd) : OleVariant;
function ConvertVariantToTPopupWnd(const V : OleVariant) : TPopupWnd;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
function ConvertTWMKeyToVariant(var R : TWMKey) : OleVariant;
function ConvertVariantToTWMKey(const V : OleVariant) : TWMKey;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TRect__Wrapper = class(TDCRecordWrapper)
private
fR : TRect;
public
function GetRecordPtr : pointer; override;
published
procedure setLeft(const val : Longint);
function getLeft : Longint;
property Left : Longint read getLeft write setLeft;
procedure setTop(const val : Longint);
function getTop : Longint;
property Top : Longint read getTop write setTop;
procedure setRight(const val : Longint);
function getRight : Longint;
property Right : Longint read getRight write setRight;
procedure setBottom(const val : Longint);
function getBottom : Longint;
property Bottom : Longint read getBottom write setBottom;
end;
type __TCMHintShow__Wrapper = class(TDCRecordWrapper)
private
fR : TCMHintShow;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setReserved(const val : Integer);
function getReserved : Integer;
property Reserved : Integer read getReserved write setReserved;
procedure setResult(const val : Integer);
function getResult : Integer;
property Result : Integer read getResult write setResult;
end;
type __TCMHintShowPause__Wrapper = class(TDCRecordWrapper)
private
fR : TCMHintShowPause;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setWasActive(const val : Integer);
function getWasActive : Integer;
property WasActive : Integer read getWasActive write setWasActive;
procedure setResult(const val : Integer);
function getResult : Integer;
property Result : Integer read getResult write setResult;
end;
type __TCursorRec__Wrapper = class(TDCRecordWrapper)
private
fR : TCursorRec;
public
function GetRecordPtr : pointer; override;
published
procedure setIndex(const val : Integer);
function getIndex : Integer;
property Index : Integer read getIndex write setIndex;
end;
type __THintInfo__Wrapper = class(TDCRecordWrapper)
private
fR : THintInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setHintControl(const val : TControl);
function getHintControl : TControl;
property HintControl : TControl read getHintControl write setHintControl;
procedure setHintMaxWidth(const val : Integer);
function getHintMaxWidth : Integer;
property HintMaxWidth : Integer read getHintMaxWidth write setHintMaxWidth;
procedure setHintColor(const val : TColor);
function getHintColor : TColor;
property HintColor : TColor read getHintColor write setHintColor;
procedure setReshowTimeout(const val : Integer);
function getReshowTimeout : Integer;
property ReshowTimeout : Integer read getReshowTimeout write setReshowTimeout;
procedure setHideTimeout(const val : Integer);
function getHideTimeout : Integer;
property HideTimeout : Integer read getHideTimeout write setHideTimeout;
procedure setHintStr(const val : AnsiString);
function getHintStr : AnsiString;
property HintStr : AnsiString read getHintStr write setHintStr;
end;
type __TPopupForm__Wrapper = class(TDCRecordWrapper)
private
fR : TPopupForm;
public
function GetRecordPtr : pointer; override;
published
procedure setFormID(const val : Integer);
function getFormID : Integer;
property FormID : Integer read getFormID write setFormID;
procedure setForm(const val : TCustomForm);
function getForm : TCustomForm;
property Form : TCustomForm read getForm write setForm;
procedure setWasPopup(const val : Boolean);
function getWasPopup : Boolean;
property WasPopup : Boolean read getWasPopup write setWasPopup;
end;
type __TPopupWnd__Wrapper = class(TDCRecordWrapper)
private
fR : TPopupWnd;
public
function GetRecordPtr : pointer; override;
published
procedure setID(const val : Integer);
function getID : Integer;
property ID : Integer read getID write setID;
end;
type __TPoint__Wrapper = class(TDCRecordWrapper)
private
fR : TPoint;
public
function GetRecordPtr : pointer; override;
published
procedure setX(const val : Longint);
function getX : Longint;
property X : Longint read getX write setX;
procedure setY(const val : Longint);
function getY : Longint;
property Y : Longint read getY write setY;
end;
type __TMessage__Wrapper = class(TDCRecordWrapper)
private
fR : TMessage;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setWParam(const val : Longint);
function getWParam : Longint;
property WParam : Longint read getWParam write setWParam;
procedure setLParam(const val : Longint);
function getLParam : Longint;
property LParam : Longint read getLParam write setLParam;
procedure setResult(const val : Longint);
function getResult : Longint;
property Result : Longint read getResult write setResult;
procedure setWParamLo(const val : Word);
function getWParamLo : Word;
property WParamLo : Word read getWParamLo write setWParamLo;
procedure setWParamHi(const val : Word);
function getWParamHi : Word;
property WParamHi : Word read getWParamHi write setWParamHi;
procedure setLParamLo(const val : Word);
function getLParamLo : Word;
property LParamLo : Word read getLParamLo write setLParamLo;
procedure setLParamHi(const val : Word);
function getLParamHi : Word;
property LParamHi : Word read getLParamHi write setLParamHi;
procedure setResultLo(const val : Word);
function getResultLo : Word;
property ResultLo : Word read getResultLo write setResultLo;
procedure setResultHi(const val : Word);
function getResultHi : Word;
property ResultHi : Word read getResultHi write setResultHi;
end;
type __TWMKey__Wrapper = class(TDCRecordWrapper)
private
fR : TWMKey;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setCharCode(const val : Word);
function getCharCode : Word;
property CharCode : Word read getCharCode write setCharCode;
procedure setUnused(const val : Word);
function getUnused : Word;
property Unused : Word read getUnused write setUnused;
procedure setKeyData(const val : Longint);
function getKeyData : Longint;
property KeyData : Longint read getKeyData write setKeyData;
procedure setResult(const val : Longint);
function getResult : Longint;
property Result : Longint read getResult write setResult;
end;
type
_T0 = function (p0 : TControl;
p1 : Boolean): TCustomForm of object;

_T1 = _T0;

_T2 = function (p0 : HWND): Pointer of object;

_T3 = procedure (p0 : Pointer) of object;

{_T4 = function (p0 : TWndMethod): Pointer of object;}

_T5 = _T3;

_T6 = function (p0 : Word;
const p1 : string): Boolean of object;

_T7 = function (p0 : HWND): Boolean of object;

_T8 = procedure (p0 : HWND;
p1 : Word) of object;

_T9 = procedure (p0 : Boolean) of object;

{_T10 = function (p0 : TWndMethod): HWND of object;}

_T11 = procedure (p0 : HWND) of object;

_T12 = procedure  of object;

_T13 = _T12;

_T14 = function (p0 : Word): TShiftState of object;

_T15 = function (p0 : Longint): TShiftState of object;

{_T16 = function (const p0 : TKeyboardState): TShiftState of object;}

_T17 = function : Boolean of object;

_T18 = function : TFocusState of object;

_T19 = procedure (p0 : TFocusState) of object;

_T20 = procedure (const p0 : IDispatch) of object;

_T21 = function (p0 : TCustomForm): Integer of object;

_T22 = _T12;

_T23 = procedure (p0 : TControl) of object;

_T24 = _T12;

{_T25 = procedure (p0 : TComponentClass;
var p1) of object;}

_T26 = _T12;

_T27 = _T12;

_T28 = function (p0 : TBasicAction): Boolean of object;

_T29 = procedure (p0 : TObject) of object;

_T30 = _T12;

_T31 = function (p0 : Integer;
p1 : Longint): Boolean of object;

_T32 = function (p0 : THelpContext): Boolean of object;

_T33 = function (const p0 : string): Boolean of object;

_T34 = _T33;

_T35 = _T17;

_T36 = _T12;

_T37 = procedure (p0 : TControl;
const p1 : IDispatch) of object;

{_T38 = procedure (p0 : TWindowHook) of object;}

_T39 = _T12;

_T40 = _T12;

_T41 = _T17;

_T43 = _T12;

_T44 = _T12;

_T45 = _T12;

_T46 = _T12;

_T47 = _T12;

_T48 = _T12;

_T49 = procedure (p0 : TCustomForm) of object;

_T50 = _T12;

_T51 = _T12;

_T52 = _T12;

_T53 = procedure (p0 : Exception) of object;

_T54 = _T12;

{_T55 = procedure (p0 : TWindowHook) of object;}

_T56 = _T12;

_T57 = _T28;

_T58 = _T17;

_T59 = _T17;

_T60 = _T17;

_T61 = _T12;

_T62 = _T17;

_T63 = _T12;

_T64 = _T12;

_T65 = _T12;

_T66 = procedure (var p0 : TCloseAction) of object;

_T67 = _T12;

_T68 = _T12;

_T69 = _T12;

_T70 = _T12;

_T71 = procedure (var p0 : Cardinal;
var p1 : Cardinal) of object;

_T72 = procedure (var p0 : Cardinal;
var p1 : Cardinal;
var p2 : Cardinal) of object;

_T73 = function : HWND of object;

_T74 = _T17;

_T75 = _T12;

_T76 = _T12;

_T77 = procedure (p0 : TComponent;
p1 : Integer) of object;

_T78 = _T12;

_T79 = _T17;

_T80 = procedure (p0 : TWinControl;
p1 : Boolean) of object;

_T81 = procedure (p0 : TWinControl) of object;

_T82 = function : TBitmap of object;

_T83 = _T12;

_T84 = function (const p0 : IDispatch): Boolean of object;

_T85 = procedure (p0 : TMonitor) of object;

_T86 = _T12;

_T87 = _T11;

_T88 = _T12;

_T89 = _T23;

_T90 = function (p0 : TWinControl): Boolean of object;

_T91 = _T12;

_T92 = function : Integer of object;

_T93 = function (p0 : TControl;
const p1 : IDispatch): Boolean of object;

_T94 = _T12;

_T95 = _T12;

_T96 = _T12;

_T97 = _T12;

_T98 = _T12;

_T99 = _T12;

_T100 = _T12;

_T101 = function (const p0 : IDispatch;
p1 : TMonitorDefaultTo): TMonitor of object;

_T102 = _T101;

_T103 = function (const p0 : THandle;
p1 : TMonitorDefaultTo): TMonitor of object;

_T104 = _T12;

_T105 = _T12;

_T106 = _T17;

_T107 = _T23;

_T108 = procedure (p0 : TWindowState) of object;

_T109 = _T12;

_T110 = _T12;

_T111 = _T23;

_T112 = procedure (p0 : TComponent) of object;

function __TRect__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRect__Wrapper.setLeft(const val : Longint);
begin
TRect(GetRecordPtr^).Left := val;
end;
function __TRect__Wrapper.getLeft : Longint;
begin
result := TRect(GetRecordPtr^).Left;
end;
procedure __TRect__Wrapper.setTop(const val : Longint);
begin
TRect(GetRecordPtr^).Top := val;
end;
function __TRect__Wrapper.getTop : Longint;
begin
result := TRect(GetRecordPtr^).Top;
end;
procedure __TRect__Wrapper.setRight(const val : Longint);
begin
TRect(GetRecordPtr^).Right := val;
end;
function __TRect__Wrapper.getRight : Longint;
begin
result := TRect(GetRecordPtr^).Right;
end;
procedure __TRect__Wrapper.setBottom(const val : Longint);
begin
TRect(GetRecordPtr^).Bottom := val;
end;
function __TRect__Wrapper.getBottom : Longint;
begin
result := TRect(GetRecordPtr^).Bottom;
end;
function __TCMHintShow__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCMHintShow__Wrapper.setMsg(const val : Cardinal);
begin
TCMHintShow(GetRecordPtr^).Msg := val;
end;
function __TCMHintShow__Wrapper.getMsg : Cardinal;
begin
result := TCMHintShow(GetRecordPtr^).Msg;
end;
procedure __TCMHintShow__Wrapper.setReserved(const val : Integer);
begin
TCMHintShow(GetRecordPtr^).Reserved := val;
end;
function __TCMHintShow__Wrapper.getReserved : Integer;
begin
result := TCMHintShow(GetRecordPtr^).Reserved;
end;
procedure __TCMHintShow__Wrapper.setResult(const val : Integer);
begin
TCMHintShow(GetRecordPtr^).Result := val;
end;
function __TCMHintShow__Wrapper.getResult : Integer;
begin
result := TCMHintShow(GetRecordPtr^).Result;
end;
function __TCMHintShowPause__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCMHintShowPause__Wrapper.setMsg(const val : Cardinal);
begin
TCMHintShowPause(GetRecordPtr^).Msg := val;
end;
function __TCMHintShowPause__Wrapper.getMsg : Cardinal;
begin
result := TCMHintShowPause(GetRecordPtr^).Msg;
end;
procedure __TCMHintShowPause__Wrapper.setWasActive(const val : Integer);
begin
TCMHintShowPause(GetRecordPtr^).WasActive := val;
end;
function __TCMHintShowPause__Wrapper.getWasActive : Integer;
begin
result := TCMHintShowPause(GetRecordPtr^).WasActive;
end;
procedure __TCMHintShowPause__Wrapper.setResult(const val : Integer);
begin
TCMHintShowPause(GetRecordPtr^).Result := val;
end;
function __TCMHintShowPause__Wrapper.getResult : Integer;
begin
result := TCMHintShowPause(GetRecordPtr^).Result;
end;
function __TCursorRec__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCursorRec__Wrapper.setIndex(const val : Integer);
begin
TCursorRec(GetRecordPtr^).Index := val;
end;
function __TCursorRec__Wrapper.getIndex : Integer;
begin
result := TCursorRec(GetRecordPtr^).Index;
end;
function __THintInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __THintInfo__Wrapper.setHintControl(const val : TControl);
begin
THintInfo(GetRecordPtr^).HintControl := val;
end;
function __THintInfo__Wrapper.getHintControl : TControl;
begin
result := THintInfo(GetRecordPtr^).HintControl;
end;
procedure __THintInfo__Wrapper.setHintMaxWidth(const val : Integer);
begin
THintInfo(GetRecordPtr^).HintMaxWidth := val;
end;
function __THintInfo__Wrapper.getHintMaxWidth : Integer;
begin
result := THintInfo(GetRecordPtr^).HintMaxWidth;
end;
procedure __THintInfo__Wrapper.setHintColor(const val : TColor);
begin
THintInfo(GetRecordPtr^).HintColor := val;
end;
function __THintInfo__Wrapper.getHintColor : TColor;
begin
result := THintInfo(GetRecordPtr^).HintColor;
end;
procedure __THintInfo__Wrapper.setReshowTimeout(const val : Integer);
begin
THintInfo(GetRecordPtr^).ReshowTimeout := val;
end;
function __THintInfo__Wrapper.getReshowTimeout : Integer;
begin
result := THintInfo(GetRecordPtr^).ReshowTimeout;
end;
procedure __THintInfo__Wrapper.setHideTimeout(const val : Integer);
begin
THintInfo(GetRecordPtr^).HideTimeout := val;
end;
function __THintInfo__Wrapper.getHideTimeout : Integer;
begin
result := THintInfo(GetRecordPtr^).HideTimeout;
end;
procedure __THintInfo__Wrapper.setHintStr(const val : AnsiString);
begin
THintInfo(GetRecordPtr^).HintStr := val;
end;
function __THintInfo__Wrapper.getHintStr : AnsiString;
begin
result := THintInfo(GetRecordPtr^).HintStr;
end;
function __TPopupForm__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPopupForm__Wrapper.setFormID(const val : Integer);
begin
TPopupForm(GetRecordPtr^).FormID := val;
end;
function __TPopupForm__Wrapper.getFormID : Integer;
begin
result := TPopupForm(GetRecordPtr^).FormID;
end;
procedure __TPopupForm__Wrapper.setForm(const val : TCustomForm);
begin
TPopupForm(GetRecordPtr^).Form := val;
end;
function __TPopupForm__Wrapper.getForm : TCustomForm;
begin
result := TPopupForm(GetRecordPtr^).Form;
end;
procedure __TPopupForm__Wrapper.setWasPopup(const val : Boolean);
begin
TPopupForm(GetRecordPtr^).WasPopup := val;
end;
function __TPopupForm__Wrapper.getWasPopup : Boolean;
begin
result := TPopupForm(GetRecordPtr^).WasPopup;
end;
function __TPopupWnd__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPopupWnd__Wrapper.setID(const val : Integer);
begin
TPopupWnd(GetRecordPtr^).ID := val;
end;
function __TPopupWnd__Wrapper.getID : Integer;
begin
result := TPopupWnd(GetRecordPtr^).ID;
end;
function _TCMHintShow_ : IDispatch;
begin
  result := __TCMHintShow__Wrapper.Create;
end;
function _TCMHintShowPause_ : IDispatch;
begin
  result := __TCMHintShowPause__Wrapper.Create;
end;
function _TCursorRec_ : IDispatch;
begin
  result := __TCursorRec__Wrapper.Create;
end;
function _THintInfo_ : IDispatch;
begin
  result := __THintInfo__Wrapper.Create;
end;
function _TPopupForm_ : IDispatch;
begin
  result := __TPopupForm__Wrapper.Create;
end;
function _TPopupWnd_ : IDispatch;
begin
  result := __TPopupWnd__Wrapper.Create;
end;
function __TPoint__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPoint__Wrapper.setX(const val : Longint);
begin
TPoint(GetRecordPtr^).X := val;
end;
function __TPoint__Wrapper.getX : Longint;
begin
result := TPoint(GetRecordPtr^).X;
end;
procedure __TPoint__Wrapper.setY(const val : Longint);
begin
TPoint(GetRecordPtr^).Y := val;
end;
function __TPoint__Wrapper.getY : Longint;
begin
result := TPoint(GetRecordPtr^).Y;
end;
function __TMessage__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMessage__Wrapper.setMsg(const val : Cardinal);
begin
TMessage(GetRecordPtr^).Msg := val;
end;
function __TMessage__Wrapper.getMsg : Cardinal;
begin
result := TMessage(GetRecordPtr^).Msg;
end;
procedure __TMessage__Wrapper.setWParam(const val : Longint);
begin
TMessage(GetRecordPtr^).WParam := val;
end;
function __TMessage__Wrapper.getWParam : Longint;
begin
result := TMessage(GetRecordPtr^).WParam;
end;
procedure __TMessage__Wrapper.setLParam(const val : Longint);
begin
TMessage(GetRecordPtr^).LParam := val;
end;
function __TMessage__Wrapper.getLParam : Longint;
begin
result := TMessage(GetRecordPtr^).LParam;
end;
procedure __TMessage__Wrapper.setResult(const val : Longint);
begin
TMessage(GetRecordPtr^).Result := val;
end;
function __TMessage__Wrapper.getResult : Longint;
begin
result := TMessage(GetRecordPtr^).Result;
end;
procedure __TMessage__Wrapper.setWParamLo(const val : Word);
begin
TMessage(GetRecordPtr^).WParamLo := val;
end;
function __TMessage__Wrapper.getWParamLo : Word;
begin
result := TMessage(GetRecordPtr^).WParamLo;
end;
procedure __TMessage__Wrapper.setWParamHi(const val : Word);
begin
TMessage(GetRecordPtr^).WParamHi := val;
end;
function __TMessage__Wrapper.getWParamHi : Word;
begin
result := TMessage(GetRecordPtr^).WParamHi;
end;
procedure __TMessage__Wrapper.setLParamLo(const val : Word);
begin
TMessage(GetRecordPtr^).LParamLo := val;
end;
function __TMessage__Wrapper.getLParamLo : Word;
begin
result := TMessage(GetRecordPtr^).LParamLo;
end;
procedure __TMessage__Wrapper.setLParamHi(const val : Word);
begin
TMessage(GetRecordPtr^).LParamHi := val;
end;
function __TMessage__Wrapper.getLParamHi : Word;
begin
result := TMessage(GetRecordPtr^).LParamHi;
end;
procedure __TMessage__Wrapper.setResultLo(const val : Word);
begin
TMessage(GetRecordPtr^).ResultLo := val;
end;
function __TMessage__Wrapper.getResultLo : Word;
begin
result := TMessage(GetRecordPtr^).ResultLo;
end;
procedure __TMessage__Wrapper.setResultHi(const val : Word);
begin
TMessage(GetRecordPtr^).ResultHi := val;
end;
function __TMessage__Wrapper.getResultHi : Word;
begin
result := TMessage(GetRecordPtr^).ResultHi;
end;
function __TWMKey__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWMKey__Wrapper.setMsg(const val : Cardinal);
begin
TWMKey(GetRecordPtr^).Msg := val;
end;
function __TWMKey__Wrapper.getMsg : Cardinal;
begin
result := TWMKey(GetRecordPtr^).Msg;
end;
procedure __TWMKey__Wrapper.setCharCode(const val : Word);
begin
TWMKey(GetRecordPtr^).CharCode := val;
end;
function __TWMKey__Wrapper.getCharCode : Word;
begin
result := TWMKey(GetRecordPtr^).CharCode;
end;
procedure __TWMKey__Wrapper.setUnused(const val : Word);
begin
TWMKey(GetRecordPtr^).Unused := val;
end;
function __TWMKey__Wrapper.getUnused : Word;
begin
result := TWMKey(GetRecordPtr^).Unused;
end;
procedure __TWMKey__Wrapper.setKeyData(const val : Longint);
begin
TWMKey(GetRecordPtr^).KeyData := val;
end;
function __TWMKey__Wrapper.getKeyData : Longint;
begin
result := TWMKey(GetRecordPtr^).KeyData;
end;
procedure __TWMKey__Wrapper.setResult(const val : Longint);
begin
TWMKey(GetRecordPtr^).Result := val;
end;
function __TWMKey__Wrapper.getResult : Longint;
begin
result := TWMKey(GetRecordPtr^).Result;
end;
function ____GetParentForm__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := VarFromObject(GetParentForm(TControl(VarToObject(OleVariant(pargs^[0])))));
end;
2:
begin
result := VarFromObject(GetParentForm(TControl(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0])));
end;
end
end;

function ____ValidParentForm__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := VarFromObject(ValidParentForm(TControl(VarToObject(OleVariant(pargs^[0])))));
end;
2:
begin
result := VarFromObject(ValidParentForm(TControl(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0])));
end;
end
end;

procedure __TApplication__ActivateHint__Wrapper(__Instance : TApplication;
const p0 : IDispatch);
var
__p0 : ^TPoint;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
TApplication(__Instance).ActivateHint(__p0^);
end;

procedure __TApplication__HintMouseMessage__Wrapper(__Instance : TApplication;
p0 : TControl;
const p1 : IDispatch);
var
__p1 : ^TMessage;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
TApplication(__Instance).HintMouseMessage(p0,__p1^);
end;

function __TCustomForm__IsShortCut__Wrapper(__Instance : TCustomForm;
const p0 : IDispatch): Boolean;
var
__p0 : ^TWMKey;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := TCustomForm(__Instance).IsShortCut(__p0^);
end;

procedure __TCustomForm__MakeFullyVisible__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
0:
begin
TCustomForm(__Instance).MakeFullyVisible;
end;
1:
begin
TCustomForm(__Instance).MakeFullyVisible(TMonitor(VarToObject(OleVariant(pargs^[0]))));
end;
end
end;

function __TCustomForm__WantChildKey__Wrapper(__Instance : TCustomForm;
p0 : TControl;
const p1 : IDispatch): Boolean;
var
__p1 : ^TMessage;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := TCustomForm(__Instance).WantChildKey(p0,__p1^);
end;

function __TScreen__MonitorFromPoint__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
var
__p0 : ^TPoint;
__i0 : IDispatch;
begin
__i0 := VarToInterface(OleVariant(pargs^[0]));
if __i0 = nil then exit;
__p0 := (__i0 as IDCRecordWrapper).GetRecordPtr;
case cArgs of
1:
begin
result := VarFromObject(TScreen(__Instance).MonitorFromPoint(__p0^));
end;
2:
begin
result := VarFromObject(TScreen(__Instance).MonitorFromPoint(__p0^,OleVariant(pargs^[0])));
end;
end
end;

function __TScreen__MonitorFromRect__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
var
__p0 : ^TRect;
__i0 : IDispatch;
begin
__i0 := VarToInterface(OleVariant(pargs^[0]));
if __i0 = nil then exit;
__p0 := (__i0 as IDCRecordWrapper).GetRecordPtr;
case cArgs of
1:
begin
result := VarFromObject(TScreen(__Instance).MonitorFromRect(__p0^));
end;
2:
begin
result := VarFromObject(TScreen(__Instance).MonitorFromRect(__p0^,OleVariant(pargs^[0])));
end;
end
end;

function __TScreen__MonitorFromWindow__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := VarFromObject(TScreen(__Instance).MonitorFromWindow(OleVariant(pargs^[0])));
end;
2:
begin
result := VarFromObject(TScreen(__Instance).MonitorFromWindow(OleVariant(pargs^[1]),OleVariant(pargs^[0])));
end;
end
end;


type __TCMHintShow__Wrapper__ = class(__TCMHintShow__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCMHintShow__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCMHintShowToVariant(var R : TCMHintShow) : OleVariant;
var
__rw : __TCMHintShow__Wrapper__;
begin
__rw := __TCMHintShow__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCMHintShow(const V : OleVariant) : TCMHintShow;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCMHintShow((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCMHintShowPause__Wrapper__ = class(__TCMHintShowPause__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCMHintShowPause__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCMHintShowPauseToVariant(var R : TCMHintShowPause) : OleVariant;
var
__rw : __TCMHintShowPause__Wrapper__;
begin
__rw := __TCMHintShowPause__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCMHintShowPause(const V : OleVariant) : TCMHintShowPause;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCMHintShowPause((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCursorRec__Wrapper__ = class(__TCursorRec__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCursorRec__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCursorRecToVariant(var R : TCursorRec) : OleVariant;
var
__rw : __TCursorRec__Wrapper__;
begin
__rw := __TCursorRec__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCursorRec(const V : OleVariant) : TCursorRec;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCursorRec((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __THintInfo__Wrapper__ = class(__THintInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __THintInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTHintInfoToVariant(var R : THintInfo) : OleVariant;
var
__rw : __THintInfo__Wrapper__;
begin
__rw := __THintInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTHintInfo(const V : OleVariant) : THintInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := THintInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMessage__Wrapper__ = class(__TMessage__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMessage__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMessageToVariant(var R : TMessage) : OleVariant;
var
__rw : __TMessage__Wrapper__;
begin
__rw := __TMessage__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMessage(const V : OleVariant) : TMessage;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMessage((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPoint__Wrapper__ = class(__TPoint__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPoint__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
var
__rw : __TPoint__Wrapper__;
begin
__rw := __TPoint__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPoint((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPopupForm__Wrapper__ = class(__TPopupForm__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPopupForm__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPopupFormToVariant(var R : TPopupForm) : OleVariant;
var
__rw : __TPopupForm__Wrapper__;
begin
__rw := __TPopupForm__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPopupForm(const V : OleVariant) : TPopupForm;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPopupForm((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPopupWnd__Wrapper__ = class(__TPopupWnd__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPopupWnd__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPopupWndToVariant(var R : TPopupWnd) : OleVariant;
var
__rw : __TPopupWnd__Wrapper__;
begin
__rw := __TPopupWnd__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPopupWnd(const V : OleVariant) : TPopupWnd;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPopupWnd((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRect__Wrapper__ = class(__TRect__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRect__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
var
__rw : __TRect__Wrapper__;
begin
__rw := __TRect__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRect((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWMKey__Wrapper__ = class(__TWMKey__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWMKey__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWMKeyToVariant(var R : TWMKey) : OleVariant;
var
__rw : __TWMKey__Wrapper__;
begin
__rw := __TWMKey__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWMKey(const V : OleVariant) : TWMKey;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWMKey((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTApplication__Active(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TApplication(Instance).Active;
end;

function __DC__GetTApplication__ActionUpdateDelay(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TApplication(Instance).ActionUpdateDelay;
end;

procedure __DC__SetTApplication__ActionUpdateDelay(Instance : TObject; Params : PVariantArgList);
begin
TApplication(Instance).ActionUpdateDelay:=OleVariant(Params^[0]);
end;

function __DC__GetTApplication__ActiveFormHandle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TApplication(Instance).ActiveFormHandle;
end;

function __DC__GetTApplication__AllowTesting(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TApplication(Instance).AllowTesting;
end;

procedure __DC__SetTApplication__AllowTesting(Instance : TObject; Params : PVariantArgList);
begin
TApplication(Instance).AllowTesting:=OleVariant(Params^[0]);
end;

function __DC__GetTApplication__AutoDragDocking(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TApplication(Instance).AutoDragDocking;
end;

procedure __DC__SetTApplication__AutoDragDocking(Instance : TObject; Params : PVariantArgList);
begin
TApplication(Instance).AutoDragDocking:=OleVariant(Params^[0]);
end;

function __DC__GetTApplication__CurrentHelpFile(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TApplication(Instance).CurrentHelpFile;
end;

function __DC__GetTApplication__DialogHandle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TApplication(Instance).DialogHandle;
end;

procedure __DC__SetTApplication__DialogHandle(Instance : TObject; Params : PVariantArgList);
begin
TApplication(Instance).DialogHandle:=OleVariant(Params^[0]);
end;

function __DC__GetTApplication__ExeName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TApplication(Instance).ExeName;
end;

function __DC__GetTApplication__Handle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TApplication(Instance).Handle;
end;

procedure __DC__SetTApplication__Handle(Instance : TObject; Params : PVariantArgList);
begin
TApplication(Instance).Handle:=OleVariant(Params^[0]);
end;

function __DC__GetTApplication__HelpFile(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TApplication(Instance).HelpFile;
end;

procedure __DC__SetTApplication__HelpFile(Instance : TObject; Params : PVariantArgList);
begin
TApplication(Instance).HelpFile:=OleVariant(Params^[0]);
end;

function __DC__GetTApplication__Hint(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TApplication(Instance).Hint;
end;

procedure __DC__SetTApplication__Hint(Instance : TObject; Params : PVariantArgList);
begin
TApplication(Instance).Hint:=OleVariant(Params^[0]);
end;

function __DC__GetTApplication__HintColor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TApplication(Instance).HintColor;
end;

procedure __DC__SetTApplication__HintColor(Instance : TObject; Params : PVariantArgList);
begin
TApplication(Instance).HintColor:=OleVariant(Params^[0]);
end;

function __DC__GetTApplication__HintHidePause(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TApplication(Instance).HintHidePause;
end;

procedure __DC__SetTApplication__HintHidePause(Instance : TObject; Params : PVariantArgList);
begin
TApplication(Instance).HintHidePause:=OleVariant(Params^[0]);
end;

function __DC__GetTApplication__HintPause(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TApplication(Instance).HintPause;
end;

procedure __DC__SetTApplication__HintPause(Instance : TObject; Params : PVariantArgList);
begin
TApplication(Instance).HintPause:=OleVariant(Params^[0]);
end;

function __DC__GetTApplication__HintShortCuts(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TApplication(Instance).HintShortCuts;
end;

procedure __DC__SetTApplication__HintShortCuts(Instance : TObject; Params : PVariantArgList);
begin
TApplication(Instance).HintShortCuts:=OleVariant(Params^[0]);
end;

function __DC__GetTApplication__HintShortPause(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TApplication(Instance).HintShortPause;
end;

procedure __DC__SetTApplication__HintShortPause(Instance : TObject; Params : PVariantArgList);
begin
TApplication(Instance).HintShortPause:=OleVariant(Params^[0]);
end;

function __DC__GetTApplication__Icon(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TApplication(Instance).Icon);
end;

procedure __DC__SetTApplication__Icon(Instance : TObject; Params : PVariantArgList);
begin
TApplication(Instance).Icon:=TIcon(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTApplication__MainForm(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TApplication(Instance).MainForm);
end;

function __DC__GetTApplication__MainFormHandle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TApplication(Instance).MainFormHandle;
end;

function __DC__GetTApplication__ModalLevel(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TApplication(Instance).ModalLevel;
end;

function __DC__GetTApplication__ModalPopupMode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TApplication(Instance).ModalPopupMode;
end;

procedure __DC__SetTApplication__ModalPopupMode(Instance : TObject; Params : PVariantArgList);
begin
TApplication(Instance).ModalPopupMode:=OleVariant(Params^[0]);
end;

function __DC__GetTApplication__BiDiMode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TApplication(Instance).BiDiMode;
end;

procedure __DC__SetTApplication__BiDiMode(Instance : TObject; Params : PVariantArgList);
begin
TApplication(Instance).BiDiMode:=OleVariant(Params^[0]);
end;

function __DC__GetTApplication__BiDiKeyboard(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TApplication(Instance).BiDiKeyboard;
end;

procedure __DC__SetTApplication__BiDiKeyboard(Instance : TObject; Params : PVariantArgList);
begin
TApplication(Instance).BiDiKeyboard:=OleVariant(Params^[0]);
end;

function __DC__GetTApplication__NonBiDiKeyboard(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TApplication(Instance).NonBiDiKeyboard;
end;

procedure __DC__SetTApplication__NonBiDiKeyboard(Instance : TObject; Params : PVariantArgList);
begin
TApplication(Instance).NonBiDiKeyboard:=OleVariant(Params^[0]);
end;

function __DC__GetTApplication__PopupControlWnd(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TApplication(Instance).PopupControlWnd;
end;

function __DC__GetTApplication__ShowHint(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TApplication(Instance).ShowHint;
end;

procedure __DC__SetTApplication__ShowHint(Instance : TObject; Params : PVariantArgList);
begin
TApplication(Instance).ShowHint:=OleVariant(Params^[0]);
end;

function __DC__GetTApplication__ShowMainForm(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TApplication(Instance).ShowMainForm;
end;

procedure __DC__SetTApplication__ShowMainForm(Instance : TObject; Params : PVariantArgList);
begin
TApplication(Instance).ShowMainForm:=OleVariant(Params^[0]);
end;

function __DC__GetTApplication__Terminated(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TApplication(Instance).Terminated;
end;

function __DC__GetTApplication__Title(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TApplication(Instance).Title;
end;

procedure __DC__SetTApplication__Title(Instance : TObject; Params : PVariantArgList);
begin
TApplication(Instance).Title:=OleVariant(Params^[0]);
end;

function __DC__GetTApplication__UpdateFormatSettings(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TApplication(Instance).UpdateFormatSettings;
end;

procedure __DC__SetTApplication__UpdateFormatSettings(Instance : TObject; Params : PVariantArgList);
begin
TApplication(Instance).UpdateFormatSettings:=OleVariant(Params^[0]);
end;

function __DC__GetTApplication__UpdateMetricSettings(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TApplication(Instance).UpdateMetricSettings;
end;

procedure __DC__SetTApplication__UpdateMetricSettings(Instance : TObject; Params : PVariantArgList);
begin
TApplication(Instance).UpdateMetricSettings:=OleVariant(Params^[0]);
end;

function __DC__GetTControlScrollBar__Kind(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TControlScrollBar(Instance).Kind;
end;

function __DC__GetTControlScrollBar__ScrollPos(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TControlScrollBar(Instance).ScrollPos;
end;

function __DC__GetTCustomActiveForm__Visible(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActiveForm(Instance).Visible;
end;

procedure __DC__SetTCustomActiveForm__Visible(Instance : TObject; Params : PVariantArgList);
begin
TCustomActiveForm(Instance).Visible:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomDockForm__AutoScroll(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomDockForm(Instance).AutoScroll;
end;

procedure __DC__SetTCustomDockForm__AutoScroll(Instance : TObject; Params : PVariantArgList);
begin
TCustomDockForm(Instance).AutoScroll:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomDockForm__BorderStyle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomDockForm(Instance).BorderStyle;
end;

procedure __DC__SetTCustomDockForm__BorderStyle(Instance : TObject; Params : PVariantArgList);
begin
TCustomDockForm(Instance).BorderStyle:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomDockForm__FormStyle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomDockForm(Instance).FormStyle;
end;

procedure __DC__SetTCustomDockForm__FormStyle(Instance : TObject; Params : PVariantArgList);
begin
TCustomDockForm(Instance).FormStyle:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomForm__Active(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomForm(Instance).Active;
end;

function __DC__GetTCustomForm__ActiveControl(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomForm(Instance).ActiveControl);
end;

procedure __DC__SetTCustomForm__ActiveControl(Instance : TObject; Params : PVariantArgList);
begin
TCustomForm(Instance).ActiveControl:=TWinControl(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomForm__Action(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomForm(Instance).Action);
end;

procedure __DC__SetTCustomForm__Action(Instance : TObject; Params : PVariantArgList);
begin
TCustomForm(Instance).Action:=TBasicAction(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomForm__ActiveOleControl(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomForm(Instance).ActiveOleControl);
end;

procedure __DC__SetTCustomForm__ActiveOleControl(Instance : TObject; Params : PVariantArgList);
begin
TCustomForm(Instance).ActiveOleControl:=TWinControl(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomForm__BorderStyle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomForm(Instance).BorderStyle;
end;

procedure __DC__SetTCustomForm__BorderStyle(Instance : TObject; Params : PVariantArgList);
begin
TCustomForm(Instance).BorderStyle:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomForm__Canvas(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomForm(Instance).Canvas);
end;

function __DC__GetTCustomForm__Caption(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomForm(Instance).Caption;
end;

procedure __DC__SetTCustomForm__Caption(Instance : TObject; Params : PVariantArgList);
begin
TCustomForm(Instance).Caption:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomForm__Color(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomForm(Instance).Color;
end;

procedure __DC__SetTCustomForm__Color(Instance : TObject; Params : PVariantArgList);
begin
TCustomForm(Instance).Color:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomForm__DropTarget(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomForm(Instance).DropTarget;
end;

procedure __DC__SetTCustomForm__DropTarget(Instance : TObject; Params : PVariantArgList);
begin
TCustomForm(Instance).DropTarget:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomForm__Font(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomForm(Instance).Font);
end;

procedure __DC__SetTCustomForm__Font(Instance : TObject; Params : PVariantArgList);
begin
TCustomForm(Instance).Font:=TFont(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomForm__FormState(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TFormState;
begin
tmp := TCustomForm(Instance).FormState;
result := VarFromSet(tmp, sizeof(tmp));
end;

function __DC__GetTCustomForm__HelpFile(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomForm(Instance).HelpFile;
end;

procedure __DC__SetTCustomForm__HelpFile(Instance : TObject; Params : PVariantArgList);
begin
TCustomForm(Instance).HelpFile:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomForm__KeyPreview(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomForm(Instance).KeyPreview;
end;

procedure __DC__SetTCustomForm__KeyPreview(Instance : TObject; Params : PVariantArgList);
begin
TCustomForm(Instance).KeyPreview:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomForm__Menu(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomForm(Instance).Menu);
end;

procedure __DC__SetTCustomForm__Menu(Instance : TObject; Params : PVariantArgList);
begin
TCustomForm(Instance).Menu:=TMainMenu(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomForm__ModalResult(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomForm(Instance).ModalResult;
end;

procedure __DC__SetTCustomForm__ModalResult(Instance : TObject; Params : PVariantArgList);
begin
TCustomForm(Instance).ModalResult:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomForm__Monitor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomForm(Instance).Monitor);
end;

function __DC__GetTCustomForm__PopupMode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomForm(Instance).PopupMode;
end;

procedure __DC__SetTCustomForm__PopupMode(Instance : TObject; Params : PVariantArgList);
begin
TCustomForm(Instance).PopupMode:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomForm__PopupParent(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomForm(Instance).PopupParent);
end;

procedure __DC__SetTCustomForm__PopupParent(Instance : TObject; Params : PVariantArgList);
begin
TCustomForm(Instance).PopupParent:=TCustomForm(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomForm__ScreenSnap(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomForm(Instance).ScreenSnap;
end;

procedure __DC__SetTCustomForm__ScreenSnap(Instance : TObject; Params : PVariantArgList);
begin
TCustomForm(Instance).ScreenSnap:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomForm__SnapBuffer(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomForm(Instance).SnapBuffer;
end;

procedure __DC__SetTCustomForm__SnapBuffer(Instance : TObject; Params : PVariantArgList);
begin
TCustomForm(Instance).SnapBuffer:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomForm__WindowState(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomForm(Instance).WindowState;
end;

procedure __DC__SetTCustomForm__WindowState(Instance : TObject; Params : PVariantArgList);
begin
TCustomForm(Instance).WindowState:=OleVariant(Params^[0]);
end;

function __DC__GetTForm__ActiveMDIChild(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TForm(Instance).ActiveMDIChild);
end;

function __DC__GetTForm__ClientHandle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TForm(Instance).ClientHandle;
end;

function __DC__GetTForm__MDIChildCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TForm(Instance).MDIChildCount;
end;

function __DC__GetTForm__MDIChildren(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TForm(Instance).MDIChildren[OleVariant(Params^[0])]);
end;

function __DC__GetTForm__TileMode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TForm(Instance).TileMode;
end;

procedure __DC__SetTForm__TileMode(Instance : TObject; Params : PVariantArgList);
begin
TForm(Instance).TileMode:=OleVariant(Params^[0]);
end;

function __DC__GetTMonitor__Handle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMonitor(Instance).Handle;
end;

function __DC__GetTMonitor__MonitorNum(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMonitor(Instance).MonitorNum;
end;

function __DC__GetTMonitor__Left(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMonitor(Instance).Left;
end;

function __DC__GetTMonitor__Height(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMonitor(Instance).Height;
end;

function __DC__GetTMonitor__Top(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMonitor(Instance).Top;
end;

function __DC__GetTMonitor__Width(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMonitor(Instance).Width;
end;

function __DC__GetTMonitor__BoundsRect(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TRect__Wrapper;
begin
__wrapper := __TRect__Wrapper.Create;
__wrapper.fR := TMonitor(Instance).BoundsRect;
result := IUnknown(__wrapper) as IDispatch;
end;

function __DC__GetTMonitor__WorkareaRect(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TRect__Wrapper;
begin
__wrapper := __TRect__Wrapper.Create;
__wrapper.fR := TMonitor(Instance).WorkareaRect;
result := IUnknown(__wrapper) as IDispatch;
end;

function __DC__GetTMonitor__Primary(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMonitor(Instance).Primary;
end;

function __DC__GetTScreen__ActiveControl(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TScreen(Instance).ActiveControl);
end;

function __DC__GetTScreen__ActiveCustomForm(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TScreen(Instance).ActiveCustomForm);
end;

function __DC__GetTScreen__ActiveForm(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TScreen(Instance).ActiveForm);
end;

function __DC__GetTScreen__CustomFormCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScreen(Instance).CustomFormCount;
end;

function __DC__GetTScreen__CustomForms(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TScreen(Instance).CustomForms[OleVariant(Params^[0])]);
end;

function __DC__GetTScreen__CursorCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScreen(Instance).CursorCount;
end;

function __DC__GetTScreen__Cursor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScreen(Instance).Cursor;
end;

procedure __DC__SetTScreen__Cursor(Instance : TObject; Params : PVariantArgList);
begin
TScreen(Instance).Cursor:=OleVariant(Params^[0]);
end;

function __DC__GetTScreen__Cursors(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScreen(Instance).Cursors[OleVariant(Params^[0])];
end;

procedure __DC__SetTScreen__Cursors(Instance : TObject; Params : PVariantArgList);
begin
TScreen(Instance).Cursors[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTScreen__DataModules(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TScreen(Instance).DataModules[OleVariant(Params^[0])]);
end;

function __DC__GetTScreen__DataModuleCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScreen(Instance).DataModuleCount;
end;

function __DC__GetTScreen__FocusedForm(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TScreen(Instance).FocusedForm);
end;

procedure __DC__SetTScreen__FocusedForm(Instance : TObject; Params : PVariantArgList);
begin
TScreen(Instance).FocusedForm:=TCustomForm(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTScreen__SaveFocusedList(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TScreen(Instance).SaveFocusedList);
end;

function __DC__GetTScreen__MonitorCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScreen(Instance).MonitorCount;
end;

function __DC__GetTScreen__Monitors(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TScreen(Instance).Monitors[OleVariant(Params^[0])]);
end;

function __DC__GetTScreen__DesktopRect(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TRect__Wrapper;
begin
__wrapper := __TRect__Wrapper.Create;
__wrapper.fR := TScreen(Instance).DesktopRect;
result := IUnknown(__wrapper) as IDispatch;
end;

function __DC__GetTScreen__DesktopHeight(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScreen(Instance).DesktopHeight;
end;

function __DC__GetTScreen__DesktopLeft(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScreen(Instance).DesktopLeft;
end;

function __DC__GetTScreen__DesktopTop(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScreen(Instance).DesktopTop;
end;

function __DC__GetTScreen__DesktopWidth(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScreen(Instance).DesktopWidth;
end;

function __DC__GetTScreen__WorkareaRect(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TRect__Wrapper;
begin
__wrapper := __TRect__Wrapper.Create;
__wrapper.fR := TScreen(Instance).WorkareaRect;
result := IUnknown(__wrapper) as IDispatch;
end;

function __DC__GetTScreen__WorkAreaHeight(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScreen(Instance).WorkAreaHeight;
end;

function __DC__GetTScreen__WorkAreaLeft(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScreen(Instance).WorkAreaLeft;
end;

function __DC__GetTScreen__WorkAreaTop(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScreen(Instance).WorkAreaTop;
end;

function __DC__GetTScreen__WorkAreaWidth(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScreen(Instance).WorkAreaWidth;
end;

function __DC__GetTScreen__HintFont(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TScreen(Instance).HintFont);
end;

procedure __DC__SetTScreen__HintFont(Instance : TObject; Params : PVariantArgList);
begin
TScreen(Instance).HintFont:=TFont(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTScreen__IconFont(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TScreen(Instance).IconFont);
end;

procedure __DC__SetTScreen__IconFont(Instance : TObject; Params : PVariantArgList);
begin
TScreen(Instance).IconFont:=TFont(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTScreen__MenuFont(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TScreen(Instance).MenuFont);
end;

procedure __DC__SetTScreen__MenuFont(Instance : TObject; Params : PVariantArgList);
begin
TScreen(Instance).MenuFont:=TFont(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTScreen__Fonts(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TScreen(Instance).Fonts);
end;

function __DC__GetTScreen__FormCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScreen(Instance).FormCount;
end;

function __DC__GetTScreen__Forms(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TScreen(Instance).Forms[OleVariant(Params^[0])]);
end;

function __DC__GetTScreen__Imes(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TScreen(Instance).Imes);
end;

function __DC__GetTScreen__DefaultIme(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScreen(Instance).DefaultIme;
end;

function __DC__GetTScreen__DefaultKbLayout(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScreen(Instance).DefaultKbLayout;
end;

function __DC__GetTScreen__Height(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScreen(Instance).Height;
end;

function __DC__GetTScreen__PixelsPerInch(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScreen(Instance).PixelsPerInch;
end;

function __DC__GetTScreen__PrimaryMonitor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TScreen(Instance).PrimaryMonitor);
end;

function __DC__GetTScreen__Width(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScreen(Instance).Width;
end;

procedure __RegisterProps;
begin
RegisterProperty(TApplication,'Active',__DC__GetTApplication__Active,nil);
RegisterProperty(TApplication,'ActionUpdateDelay',__DC__GetTApplication__ActionUpdateDelay,__DC__SetTApplication__ActionUpdateDelay);
RegisterProperty(TApplication,'ActiveFormHandle',__DC__GetTApplication__ActiveFormHandle,nil);
RegisterProperty(TApplication,'AllowTesting',__DC__GetTApplication__AllowTesting,__DC__SetTApplication__AllowTesting);
RegisterProperty(TApplication,'AutoDragDocking',__DC__GetTApplication__AutoDragDocking,__DC__SetTApplication__AutoDragDocking);
RegisterProperty(TApplication,'CurrentHelpFile',__DC__GetTApplication__CurrentHelpFile,nil);
RegisterProperty(TApplication,'DialogHandle',__DC__GetTApplication__DialogHandle,__DC__SetTApplication__DialogHandle);
RegisterProperty(TApplication,'ExeName',__DC__GetTApplication__ExeName,nil);
RegisterProperty(TApplication,'Handle',__DC__GetTApplication__Handle,__DC__SetTApplication__Handle);
RegisterProperty(TApplication,'HelpFile',__DC__GetTApplication__HelpFile,__DC__SetTApplication__HelpFile);
RegisterProperty(TApplication,'Hint',__DC__GetTApplication__Hint,__DC__SetTApplication__Hint);
RegisterProperty(TApplication,'HintColor',__DC__GetTApplication__HintColor,__DC__SetTApplication__HintColor);
RegisterProperty(TApplication,'HintHidePause',__DC__GetTApplication__HintHidePause,__DC__SetTApplication__HintHidePause);
RegisterProperty(TApplication,'HintPause',__DC__GetTApplication__HintPause,__DC__SetTApplication__HintPause);
RegisterProperty(TApplication,'HintShortCuts',__DC__GetTApplication__HintShortCuts,__DC__SetTApplication__HintShortCuts);
RegisterProperty(TApplication,'HintShortPause',__DC__GetTApplication__HintShortPause,__DC__SetTApplication__HintShortPause);
RegisterProperty(TApplication,'Icon',__DC__GetTApplication__Icon,__DC__SetTApplication__Icon);
RegisterProperty(TApplication,'MainForm',__DC__GetTApplication__MainForm,nil);
RegisterProperty(TApplication,'MainFormHandle',__DC__GetTApplication__MainFormHandle,nil);
RegisterProperty(TApplication,'ModalLevel',__DC__GetTApplication__ModalLevel,nil);
RegisterProperty(TApplication,'ModalPopupMode',__DC__GetTApplication__ModalPopupMode,__DC__SetTApplication__ModalPopupMode);
RegisterProperty(TApplication,'BiDiMode',__DC__GetTApplication__BiDiMode,__DC__SetTApplication__BiDiMode);
RegisterProperty(TApplication,'BiDiKeyboard',__DC__GetTApplication__BiDiKeyboard,__DC__SetTApplication__BiDiKeyboard);
RegisterProperty(TApplication,'NonBiDiKeyboard',__DC__GetTApplication__NonBiDiKeyboard,__DC__SetTApplication__NonBiDiKeyboard);
RegisterProperty(TApplication,'PopupControlWnd',__DC__GetTApplication__PopupControlWnd,nil);
RegisterProperty(TApplication,'ShowHint',__DC__GetTApplication__ShowHint,__DC__SetTApplication__ShowHint);
RegisterProperty(TApplication,'ShowMainForm',__DC__GetTApplication__ShowMainForm,__DC__SetTApplication__ShowMainForm);
RegisterProperty(TApplication,'Terminated',__DC__GetTApplication__Terminated,nil);
RegisterProperty(TApplication,'Title',__DC__GetTApplication__Title,__DC__SetTApplication__Title);
RegisterProperty(TApplication,'UpdateFormatSettings',__DC__GetTApplication__UpdateFormatSettings,__DC__SetTApplication__UpdateFormatSettings);
RegisterProperty(TApplication,'UpdateMetricSettings',__DC__GetTApplication__UpdateMetricSettings,__DC__SetTApplication__UpdateMetricSettings);
RegisterProperty(TControlScrollBar,'Kind',__DC__GetTControlScrollBar__Kind,nil);
RegisterProperty(TControlScrollBar,'ScrollPos',__DC__GetTControlScrollBar__ScrollPos,nil);
RegisterProperty(TCustomActiveForm,'Visible',__DC__GetTCustomActiveForm__Visible,__DC__SetTCustomActiveForm__Visible);
RegisterProperty(TCustomDockForm,'AutoScroll',__DC__GetTCustomDockForm__AutoScroll,__DC__SetTCustomDockForm__AutoScroll);
RegisterProperty(TCustomDockForm,'BorderStyle',__DC__GetTCustomDockForm__BorderStyle,__DC__SetTCustomDockForm__BorderStyle);
RegisterProperty(TCustomDockForm,'FormStyle',__DC__GetTCustomDockForm__FormStyle,__DC__SetTCustomDockForm__FormStyle);
RegisterProperty(TCustomForm,'Active',__DC__GetTCustomForm__Active,nil);
RegisterProperty(TCustomForm,'ActiveControl',__DC__GetTCustomForm__ActiveControl,__DC__SetTCustomForm__ActiveControl);
RegisterProperty(TCustomForm,'Action',__DC__GetTCustomForm__Action,__DC__SetTCustomForm__Action);
RegisterProperty(TCustomForm,'ActiveOleControl',__DC__GetTCustomForm__ActiveOleControl,__DC__SetTCustomForm__ActiveOleControl);
RegisterProperty(TCustomForm,'BorderStyle',__DC__GetTCustomForm__BorderStyle,__DC__SetTCustomForm__BorderStyle);
RegisterProperty(TCustomForm,'Canvas',__DC__GetTCustomForm__Canvas,nil);
RegisterProperty(TCustomForm,'Caption',__DC__GetTCustomForm__Caption,__DC__SetTCustomForm__Caption);
RegisterProperty(TCustomForm,'Color',__DC__GetTCustomForm__Color,__DC__SetTCustomForm__Color);
RegisterProperty(TCustomForm,'DropTarget',__DC__GetTCustomForm__DropTarget,__DC__SetTCustomForm__DropTarget);
RegisterProperty(TCustomForm,'Font',__DC__GetTCustomForm__Font,__DC__SetTCustomForm__Font);
RegisterProperty(TCustomForm,'FormState',__DC__GetTCustomForm__FormState,nil);
RegisterProperty(TCustomForm,'HelpFile',__DC__GetTCustomForm__HelpFile,__DC__SetTCustomForm__HelpFile);
RegisterProperty(TCustomForm,'KeyPreview',__DC__GetTCustomForm__KeyPreview,__DC__SetTCustomForm__KeyPreview);
RegisterProperty(TCustomForm,'Menu',__DC__GetTCustomForm__Menu,__DC__SetTCustomForm__Menu);
RegisterProperty(TCustomForm,'ModalResult',__DC__GetTCustomForm__ModalResult,__DC__SetTCustomForm__ModalResult);
RegisterProperty(TCustomForm,'Monitor',__DC__GetTCustomForm__Monitor,nil);
RegisterProperty(TCustomForm,'PopupMode',__DC__GetTCustomForm__PopupMode,__DC__SetTCustomForm__PopupMode);
RegisterProperty(TCustomForm,'PopupParent',__DC__GetTCustomForm__PopupParent,__DC__SetTCustomForm__PopupParent);
RegisterProperty(TCustomForm,'ScreenSnap',__DC__GetTCustomForm__ScreenSnap,__DC__SetTCustomForm__ScreenSnap);
RegisterProperty(TCustomForm,'SnapBuffer',__DC__GetTCustomForm__SnapBuffer,__DC__SetTCustomForm__SnapBuffer);
RegisterProperty(TCustomForm,'WindowState',__DC__GetTCustomForm__WindowState,__DC__SetTCustomForm__WindowState);
RegisterProperty(TForm,'ActiveMDIChild',__DC__GetTForm__ActiveMDIChild,nil);
RegisterProperty(TForm,'ClientHandle',__DC__GetTForm__ClientHandle,nil);
RegisterProperty(TForm,'MDIChildCount',__DC__GetTForm__MDIChildCount,nil);
RegisterIndexedProperty(TForm,'MDIChildren',1,False,__DC__GetTForm__MDIChildren,nil);
RegisterProperty(TForm,'TileMode',__DC__GetTForm__TileMode,__DC__SetTForm__TileMode);
RegisterProperty(TMonitor,'Handle',__DC__GetTMonitor__Handle,nil);
RegisterProperty(TMonitor,'MonitorNum',__DC__GetTMonitor__MonitorNum,nil);
RegisterProperty(TMonitor,'Left',__DC__GetTMonitor__Left,nil);
RegisterProperty(TMonitor,'Height',__DC__GetTMonitor__Height,nil);
RegisterProperty(TMonitor,'Top',__DC__GetTMonitor__Top,nil);
RegisterProperty(TMonitor,'Width',__DC__GetTMonitor__Width,nil);
RegisterProperty(TMonitor,'BoundsRect',__DC__GetTMonitor__BoundsRect,nil);
RegisterProperty(TMonitor,'WorkareaRect',__DC__GetTMonitor__WorkareaRect,nil);
RegisterProperty(TMonitor,'Primary',__DC__GetTMonitor__Primary,nil);
RegisterProperty(TScreen,'ActiveControl',__DC__GetTScreen__ActiveControl,nil);
RegisterProperty(TScreen,'ActiveCustomForm',__DC__GetTScreen__ActiveCustomForm,nil);
RegisterProperty(TScreen,'ActiveForm',__DC__GetTScreen__ActiveForm,nil);
RegisterProperty(TScreen,'CustomFormCount',__DC__GetTScreen__CustomFormCount,nil);
RegisterIndexedProperty(TScreen,'CustomForms',1,False,__DC__GetTScreen__CustomForms,nil);
RegisterProperty(TScreen,'CursorCount',__DC__GetTScreen__CursorCount,nil);
RegisterProperty(TScreen,'Cursor',__DC__GetTScreen__Cursor,__DC__SetTScreen__Cursor);
RegisterIndexedProperty(TScreen,'Cursors',1,False,__DC__GetTScreen__Cursors,__DC__SetTScreen__Cursors);
RegisterIndexedProperty(TScreen,'DataModules',1,False,__DC__GetTScreen__DataModules,nil);
RegisterProperty(TScreen,'DataModuleCount',__DC__GetTScreen__DataModuleCount,nil);
RegisterProperty(TScreen,'FocusedForm',__DC__GetTScreen__FocusedForm,__DC__SetTScreen__FocusedForm);
RegisterProperty(TScreen,'SaveFocusedList',__DC__GetTScreen__SaveFocusedList,nil);
RegisterProperty(TScreen,'MonitorCount',__DC__GetTScreen__MonitorCount,nil);
RegisterIndexedProperty(TScreen,'Monitors',1,False,__DC__GetTScreen__Monitors,nil);
RegisterProperty(TScreen,'DesktopRect',__DC__GetTScreen__DesktopRect,nil);
RegisterProperty(TScreen,'DesktopHeight',__DC__GetTScreen__DesktopHeight,nil);
RegisterProperty(TScreen,'DesktopLeft',__DC__GetTScreen__DesktopLeft,nil);
RegisterProperty(TScreen,'DesktopTop',__DC__GetTScreen__DesktopTop,nil);
RegisterProperty(TScreen,'DesktopWidth',__DC__GetTScreen__DesktopWidth,nil);
RegisterProperty(TScreen,'WorkareaRect',__DC__GetTScreen__WorkareaRect,nil);
RegisterProperty(TScreen,'WorkAreaHeight',__DC__GetTScreen__WorkAreaHeight,nil);
RegisterProperty(TScreen,'WorkAreaLeft',__DC__GetTScreen__WorkAreaLeft,nil);
RegisterProperty(TScreen,'WorkAreaTop',__DC__GetTScreen__WorkAreaTop,nil);
RegisterProperty(TScreen,'WorkAreaWidth',__DC__GetTScreen__WorkAreaWidth,nil);
RegisterProperty(TScreen,'HintFont',__DC__GetTScreen__HintFont,__DC__SetTScreen__HintFont);
RegisterProperty(TScreen,'IconFont',__DC__GetTScreen__IconFont,__DC__SetTScreen__IconFont);
RegisterProperty(TScreen,'MenuFont',__DC__GetTScreen__MenuFont,__DC__SetTScreen__MenuFont);
RegisterProperty(TScreen,'Fonts',__DC__GetTScreen__Fonts,nil);
RegisterProperty(TScreen,'FormCount',__DC__GetTScreen__FormCount,nil);
RegisterIndexedProperty(TScreen,'Forms',1,False,__DC__GetTScreen__Forms,nil);
RegisterProperty(TScreen,'Imes',__DC__GetTScreen__Imes,nil);
RegisterProperty(TScreen,'DefaultIme',__DC__GetTScreen__DefaultIme,nil);
RegisterProperty(TScreen,'DefaultKbLayout',__DC__GetTScreen__DefaultKbLayout,nil);
RegisterProperty(TScreen,'Height',__DC__GetTScreen__Height,nil);
RegisterProperty(TScreen,'PixelsPerInch',__DC__GetTScreen__PixelsPerInch,nil);
RegisterProperty(TScreen,'PrimaryMonitor',__DC__GetTScreen__PrimaryMonitor,nil);
RegisterProperty(TScreen,'Width',__DC__GetTScreen__Width,nil);
end;

function __DC__GetForms__Application(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(Forms.Application);
end;

procedure __DC__SetForms__Application(Instance : TObject; Params : PVariantArgList);
begin
TObject(Forms.Application):=(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetForms__Screen(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(Forms.Screen);
end;

procedure __DC__SetForms__Screen(Instance : TObject; Params : PVariantArgList);
begin
TObject(Forms.Screen):=(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetForms__Ctl3DBtnWndProc(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(Forms.Ctl3DBtnWndProc);
end;

procedure __DC__SetForms__Ctl3DBtnWndProc(Instance : TObject; Params : PVariantArgList);
begin
Forms.Ctl3DBtnWndProc:=VarToPointer(OleVariant(Params^[0]));
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('Application',__DC__GetForms__Application,__DC__SetForms__Application));
__RegisteredVars.Add(RegisterVar('Screen',__DC__GetForms__Screen,__DC__SetForms__Screen));
__RegisteredVars.Add(RegisterVar('Ctl3DBtnWndProc',__DC__GetForms__Ctl3DBtnWndProc,__DC__SetForms__Ctl3DBtnWndProc));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..64] of string = (
'sbHorizontal'
,'sbVertical'
,'ssRegular'
,'ssFlat'
,'ssHotTrack'
,'wsNormal'
,'wsMinimized'
,'wsMaximized'
,'bsNone'
,'bsSingle'
,'bsSizeable'
,'bsDialog'
,'bsToolWindow'
,'bsSizeToolWin'
,'fsNormal'
,'fsMDIChild'
,'fsMDIForm'
,'fsStayOnTop'
,'biSystemMenu'
,'biMinimize'
,'biMaximize'
,'biHelp'
,'poDesigned'
,'poDefault'
,'poDefaultPosOnly'
,'poDefaultSizeOnly'
,'poScreenCenter'
,'poDesktopCenter'
,'poMainFormCenter'
,'poOwnerFormCenter'
,'dmDesktop'
,'dmPrimary'
,'dmMainForm'
,'dmActiveForm'
,'poNone'
,'poProportional'
,'poPrintToFit'
,'saIgnore'
,'saRestore'
,'saMinimize'
,'saMaximize'
,'tbHorizontal'
,'tbVertical'
,'caNone'
,'caHide'
,'caFree'
,'caMinimize'
,'fsCreating'
,'fsVisible'
,'fsShowing'
,'fsModal'
,'fsCreatedMDIChild'
,'fsActivated'
,'pmNone'
,'pmAuto'
,'pmExplicit'
,'afbNone'
,'afbSingle'
,'afbSunken'
,'afbRaised'
,'mdNearest'
,'mdNull'
,'mdPrimary'
,'tmShow'
,'tmHide'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,sbHorizontal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,sbVertical));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,ssRegular));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,ssFlat));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,ssHotTrack));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,wsNormal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,wsMinimized));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,wsMaximized));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,bsNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,bsSingle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,bsSizeable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,bsDialog));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,bsToolWindow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,bsSizeToolWin));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,fsNormal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,fsMDIChild));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,fsMDIForm));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,fsStayOnTop));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,biSystemMenu));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,biMinimize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,biMaximize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,biHelp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,poDesigned));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,poDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,poDefaultPosOnly));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,poDefaultSizeOnly));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,poScreenCenter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,poDesktopCenter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,poMainFormCenter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,poOwnerFormCenter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,dmDesktop));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,dmPrimary));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,dmMainForm));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,dmActiveForm));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,poNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,poProportional));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,poPrintToFit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,saIgnore));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,saRestore));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,saMinimize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,saMaximize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,tbHorizontal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,tbVertical));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,caNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,caHide));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,caFree));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,caMinimize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,fsCreating));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,fsVisible));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,fsShowing));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,fsModal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,fsCreatedMDIChild));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,fsActivated));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,pmNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,pmAuto));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,pmExplicit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,afbNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,afbSingle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,afbSunken));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,afbRaised));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,mdNearest));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,mdNull));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,mdPrimary));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,tmShow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,tmHide));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..11] of TClass = (
TApplication,
TControlScrollBar,
TCustomActiveForm,
TCustomDockForm,
TCustomForm,
TCustomFrame,
TForm,
TFrame,
TMonitor,
TScreen,
TScrollBox,
TScrollingWinControl
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..22] of string = (
'TCMHintShow'
,'TCMHintShowPause'
,'TCursorRec'
,'THintInfo'
,'TPopupForm'
,'TPopupWnd'
,'GetParentForm'
,'ValidParentForm'
,'DisableTaskWindows'
,'EnableTaskWindows'
,'FreeObjectInstance'
,'IsAccel'
,'Subclass3DWnd'
,'Subclass3DDlg'
,'SetAutoSubClass'
,'DeallocateHWnd'
,'DoneCtl3D'
,'InitCtl3D'
,'KeysToShiftState'
,'KeyDataToShiftState'
,'ForegroundTask'
,'SaveFocusState'
,'RestoreFocusState'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TCMHintShow_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_TCMHintShowPause_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_TCursorRec_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(_THintInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(_TPopupForm_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[5],Addr(_TPopupWnd_)));
RegisterProc(nil,MethodNames[6],mtScriptProc,TypeInfo(_T0),[
TypeInfo(TControl),
TypeInfo(Boolean),TypeInfo(TCustomForm)],Addr(____GetParentForm__Wrapper),cRegister);

RegisterProc(nil,MethodNames[7],mtScriptProc,TypeInfo(_T1),[
TypeInfo(TControl),
TypeInfo(Boolean),TypeInfo(TCustomForm)],Addr(____ValidParentForm__Wrapper),cRegister);

RegisterProc(nil,MethodNames[8],mtProc,TypeInfo(_T2),[
TypeInfo(HWND),TypeInfoPointer],Addr(DisableTaskWindows),cRegister);

RegisterProc(nil,MethodNames[9],mtProc,TypeInfo(_T3),[
TypeInfoPointer],Addr(EnableTaskWindows),cRegister);

RegisterProc(nil,MethodNames[10],mtProc,TypeInfo(_T5),[
TypeInfoPointer],Addr(FreeObjectInstance),cRegister);

RegisterProc(nil,MethodNames[11],mtProc,TypeInfo(_T6),[
TypeInfo(Word),
TypeInfo(string),TypeInfo(Boolean)],Addr(IsAccel),cRegister);

RegisterProc(nil,MethodNames[12],mtProc,TypeInfo(_T7),[
TypeInfo(HWND),TypeInfo(Boolean)],Addr(Subclass3DWnd),cRegister);

RegisterProc(nil,MethodNames[13],mtProc,TypeInfo(_T8),[
TypeInfo(HWND),
TypeInfo(Word)],Addr(Subclass3DDlg),cRegister);

RegisterProc(nil,MethodNames[14],mtProc,TypeInfo(_T9),[
TypeInfo(Boolean)],Addr(SetAutoSubClass),cRegister);

RegisterProc(nil,MethodNames[15],mtProc,TypeInfo(_T11),[
TypeInfo(HWND)],Addr(DeallocateHWnd),cRegister);

RegisterProc(nil,MethodNames[16],mtProc,TypeInfo(_T12),NoParams,Addr(DoneCtl3D),cRegister);

RegisterProc(nil,MethodNames[17],mtProc,TypeInfo(_T13),NoParams,Addr(InitCtl3D),cRegister);

RegisterProc(nil,MethodNames[18],mtProc,TypeInfo(_T14),[
TypeInfo(Word),TypeInfo(TShiftState)],Addr(KeysToShiftState),cRegister);

RegisterProc(nil,MethodNames[19],mtProc,TypeInfo(_T15),[
TypeInfo(Longint),TypeInfo(TShiftState)],Addr(KeyDataToShiftState),cRegister);

RegisterProc(nil,MethodNames[20],mtProc,TypeInfo(_T17),[TypeInfo(Boolean)],Addr(ForegroundTask),cRegister);

RegisterProc(nil,MethodNames[21],mtProc,TypeInfo(_T18),[TypeInfoPointer],Addr(SaveFocusState),cRegister);

RegisterProc(nil,MethodNames[22],mtProc,TypeInfo(_T19),[
TypeInfoPointer],Addr(RestoreFocusState),cRegister);

RegRegisterMethod(TApplication,'ActivateHint',TypeInfo(_T20),[
TypeInfo(IDispatch)],Addr(__TApplication__ActivateHint__Wrapper));

RegRegisterMethod(TApplication,'AddPopupForm',TypeInfo(_T21),[
TypeInfo(TCustomForm),TypeInfo(Integer)],Addr(TApplication.AddPopupForm));

RegRegisterMethod(TApplication,'BringToFront',TypeInfo(_T22),NoParams,Addr(TApplication.BringToFront));

RegRegisterMethod(TApplication,'ControlDestroyed',TypeInfo(_T23),[
TypeInfo(TControl)],Addr(TApplication.ControlDestroyed));

RegRegisterMethod(TApplication,'CancelHint',TypeInfo(_T24),NoParams,Addr(TApplication.CancelHint));

RegRegisterMethod(TApplication,'CreateHandle',TypeInfo(_T26),NoParams,Addr(TApplication.CreateHandle));

RegRegisterMethod(TApplication,'DoApplicationIdle',TypeInfo(_T27),NoParams,Addr(TApplication.DoApplicationIdle));

RegRegisterMethod(TApplication,'ExecuteAction',TypeInfo(_T28),[
TypeInfo(TBasicAction),TypeInfo(Boolean)],Addr(TApplication.ExecuteAction));

RegRegisterMethod(TApplication,'HandleException',TypeInfo(_T29),[
TypeInfo(TObject)],Addr(TApplication.HandleException));

RegRegisterMethod(TApplication,'HandleMessage',TypeInfo(_T30),NoParams,Addr(TApplication.HandleMessage));

RegRegisterMethod(TApplication,'HelpCommand',TypeInfo(_T31),[
TypeInfo(Integer),
TypeInfo(Longint),TypeInfo(Boolean)],Addr(TApplication.HelpCommand));

RegRegisterMethod(TApplication,'HelpContext',TypeInfo(_T32),[
TypeInfo(THelpContext),TypeInfo(Boolean)],Addr(TApplication.HelpContext));

RegRegisterMethod(TApplication,'HelpJump',TypeInfo(_T33),[
TypeInfo(string),TypeInfo(Boolean)],Addr(TApplication.HelpJump));

RegRegisterMethod(TApplication,'HelpKeyword',TypeInfo(_T34),[
TypeInfo(string),TypeInfo(Boolean)],Addr(TApplication.HelpKeyword));

RegRegisterMethod(TApplication,'HelpShowTableOfContents',TypeInfo(_T35),[TypeInfo(Boolean)],Addr(TApplication.HelpShowTableOfContents));

RegRegisterMethod(TApplication,'HideHint',TypeInfo(_T36),NoParams,Addr(TApplication.HideHint));

RegRegisterMethod(TApplication,'HintMouseMessage',TypeInfo(_T37),[
TypeInfo(TControl),
TypeInfo(IDispatch)],Addr(__TApplication__HintMouseMessage__Wrapper));

RegRegisterMethod(TApplication,'HookSynchronizeWakeup',TypeInfo(_T39),NoParams,Addr(TApplication.HookSynchronizeWakeup));

RegRegisterMethod(TApplication,'Initialize',TypeInfo(_T40),NoParams,Addr(TApplication.Initialize));

RegRegisterMethod(TApplication,'IsRightToLeft',TypeInfo(_T41),[TypeInfo(Boolean)],Addr(TApplication.IsRightToLeft));

RegRegisterMethod(TApplication,'Minimize',TypeInfo(_T43),NoParams,Addr(TApplication.Minimize));

RegRegisterMethod(TApplication,'ModalStarted',TypeInfo(_T44),NoParams,Addr(TApplication.ModalStarted));

RegRegisterMethod(TApplication,'ModalFinished',TypeInfo(_T45),NoParams,Addr(TApplication.ModalFinished));

RegRegisterMethod(TApplication,'NormalizeAllTopMosts',TypeInfo(_T46),NoParams,Addr(TApplication.NormalizeAllTopMosts));

RegRegisterMethod(TApplication,'NormalizeTopMosts',TypeInfo(_T47),NoParams,Addr(TApplication.NormalizeTopMosts));

RegRegisterMethod(TApplication,'ProcessMessages',TypeInfo(_T48),NoParams,Addr(TApplication.ProcessMessages));

RegRegisterMethod(TApplication,'RemovePopupForm',TypeInfo(_T49),[
TypeInfo(TCustomForm)],Addr(TApplication.RemovePopupForm));

RegRegisterMethod(TApplication,'Restore',TypeInfo(_T50),NoParams,Addr(TApplication.Restore));

RegRegisterMethod(TApplication,'RestoreTopMosts',TypeInfo(_T51),NoParams,Addr(TApplication.RestoreTopMosts));

RegRegisterMethod(TApplication,'Run',TypeInfo(_T52),NoParams,Addr(TApplication.Run));

RegRegisterMethod(TApplication,'ShowException',TypeInfo(_T53),[
TypeInfo(Exception)],Addr(TApplication.ShowException));

RegRegisterMethod(TApplication,'Terminate',TypeInfo(_T54),NoParams,Addr(TApplication.Terminate));

RegRegisterMethod(TApplication,'UnhookSynchronizeWakeup',TypeInfo(_T56),NoParams,Addr(TApplication.UnhookSynchronizeWakeup));

RegRegisterMethod(TApplication,'UpdateAction',TypeInfo(_T57),[
TypeInfo(TBasicAction),TypeInfo(Boolean)],Addr(TApplication.UpdateAction));

RegRegisterMethod(TApplication,'UseRightToLeftAlignment',TypeInfo(_T58),[TypeInfo(Boolean)],Addr(TApplication.UseRightToLeftAlignment));

RegRegisterMethod(TApplication,'UseRightToLeftReading',TypeInfo(_T59),[TypeInfo(Boolean)],Addr(TApplication.UseRightToLeftReading));

RegRegisterMethod(TApplication,'UseRightToLeftScrollBar',TypeInfo(_T60),[TypeInfo(Boolean)],Addr(TApplication.UseRightToLeftScrollBar));

RegRegisterMethod(TControlScrollBar,'ChangeBiDiPosition',TypeInfo(_T61),NoParams,Addr(TControlScrollBar.ChangeBiDiPosition));

RegRegisterMethod(TControlScrollBar,'IsScrollBarVisible',TypeInfo(_T62),[TypeInfo(Boolean)],Addr(TControlScrollBar.IsScrollBarVisible));

RegRegisterMethod(TCustomForm,'Activate',TypeInfo(_T63),NoParams, pointer(MinVMTOffset - 79));

RegRegisterMethod(TCustomForm,'ActiveChanged',TypeInfo(_T64),NoParams, pointer(MinVMTOffset - 80));

RegRegisterMethod(TCustomForm,'Deactivate',TypeInfo(_T65),NoParams, pointer(MinVMTOffset - 81));

RegRegisterMethod(TCustomForm,'DoClose',TypeInfo(_T66),[
TypeInfo(TCloseAction)], pointer(MinVMTOffset - 82));

//RegRegisterMethod(TCustomForm,'DoCreate',TypeInfo(_T67),NoParams, pointer(228));
RegRegisterMethod(TCustomForm,'DoCreate',TypeInfo(_T67),NoParams,  getVMTProcAddr('TCustomForm','DoCreate',228));


//RegRegisterMethod(TCustomForm,'DoDestroy',TypeInfo(_T68),NoParams, pointer(232));
RegRegisterMethod(TCustomForm,'DoDestroy',TypeInfo(_T68),NoParams,  getVMTProcAddr('TCustomForm','DoDestroy',232));


RegRegisterMethod(TCustomForm,'DoHide',TypeInfo(_T69),NoParams, pointer(MinVMTOffset - 83));

RegRegisterMethod(TCustomForm,'DoShow',TypeInfo(_T70),NoParams, pointer(MinVMTOffset - 84));

RegRegisterMethod(TCustomForm,'GetBorderIconStyles',TypeInfo(_T71),[
TypeInfo(Cardinal),
TypeInfo(Cardinal)], pointer(MinVMTOffset - 85));

RegRegisterMethod(TCustomForm,'GetBorderStyles',TypeInfo(_T72),[
TypeInfo(Cardinal),
TypeInfo(Cardinal),
TypeInfo(Cardinal)], pointer(MinVMTOffset - 86));

RegRegisterMethod(TCustomForm,'GetOwnerWindow',TypeInfo(_T73),[TypeInfo(HWND)], pointer(MinVMTOffset - 87));

RegRegisterMethod(TCustomForm,'HandleCreateException',TypeInfo(_T74),[TypeInfo(Boolean)], pointer(MinVMTOffset - 88));

RegRegisterMethod(TCustomForm,'Paint',TypeInfo(_T75),NoParams, pointer(MinVMTOffset - 89));

//RegRegisterMethod(TCustomForm,'UpdateActions',TypeInfo(_T76),NoParams, pointer(236));
RegRegisterMethod(TCustomForm,'UpdateActions',TypeInfo(_T76),NoParams,  getVMTProcAddr('TCustomForm','UpdateActions',236));

RegisterProc(TCustomForm,'CreateNew',mtConstructor,TypeInfo(_T77),[
  TypeInfo(TComponent),
  TypeInfo(Integer)], getVMTProcAddr('TCustomForm','CreateNew',240),cRegister);


//RegisterProc(TCustomForm,'CreateNew',mtConstructor,TypeInfo(_T77),[
//TypeInfo(TComponent),
//TypeInfo(Integer)],Addr(TCustomForm.CreateNew) ,cRegister);

RegisterProc(TCustomForm,'Create',mtConstructor,TypeInfo(_T112),[
  TypeInfo(TComponent)],getVMTProcAddr('TCustomForm','Create',240) ,cRegister);


RegRegisterMethod(TCustomForm,'Close',TypeInfo(_T78),NoParams,Addr(TCustomForm.Close));

//RegRegisterMethod(TCustomForm,'CloseQuery',TypeInfo(_T79),[TypeInfo(Boolean)], pointer(244));
RegRegisterMethod(TCustomForm,'CloseQuery',TypeInfo(_T79),[TypeInfo(Boolean)],  getVMTProcAddr('TCustomForm','CloseQuery',244));


RegRegisterMethod(TCustomForm,'DefocusControl',TypeInfo(_T80),[
TypeInfo(TWinControl),
TypeInfo(Boolean)],Addr(TCustomForm.DefocusControl));

RegRegisterMethod(TCustomForm,'FocusControl',TypeInfo(_T81),[
TypeInfo(TWinControl)],Addr(TCustomForm.FocusControl));

RegRegisterMethod(TCustomForm,'GetFormImage',TypeInfo(_T82),[TypeInfo(TBitmap)],Addr(TCustomForm.GetFormImage));

RegRegisterMethod(TCustomForm,'Hide',TypeInfo(_T83),NoParams,Addr(TCustomForm.Hide));

RegRegisterMethod(TCustomForm,'IsShortCut',TypeInfo(_T84),[
TypeInfo(IDispatch),TypeInfo(Boolean)], pointer(MinVMTOffset - 90));

RegisterProc(TCustomForm,'MakeFullyVisible',mtScriptMethod,TypeInfo(_T85),[
TypeInfo(TMonitor)],Addr(__TCustomForm__MakeFullyVisible__Wrapper),cRegister);

RegRegisterMethod(TCustomForm,'Print',TypeInfo(_T86),NoParams,Addr(TCustomForm.Print));

RegRegisterMethod(TCustomForm,'RecreateAsPopup',TypeInfo(_T87),[
TypeInfo(HWND)],Addr(TCustomForm.RecreateAsPopup));

RegRegisterMethod(TCustomForm,'Release',TypeInfo(_T88),NoParams,Addr(TCustomForm.Release));

RegRegisterMethod(TCustomForm,'SendCancelMode',TypeInfo(_T89),[
TypeInfo(TControl)],Addr(TCustomForm.SendCancelMode));

//RegRegisterMethod(TCustomForm,'SetFocusedControl',TypeInfo(_T90),[TypeInfo(TWinControl),TypeInfo(Boolean)], pointer(248));
RegRegisterMethod(TCustomForm,'SetFocusedControl',TypeInfo(_T90),[TypeInfo(TWinControl),TypeInfo(Boolean)],  getVMTProcAddr('TCustomForm','SetFocusedControl',248));


RegRegisterMethod(TCustomForm,'Show',TypeInfo(_T91),NoParams,Addr(TCustomForm.Show));

RegRegisterMethod(TCustomForm,'ShowModal',TypeInfo(_T92),[TypeInfo(Integer)], Addr(TCustomForm.ShowModal));

//RegRegisterMethod(TCustomForm,'ShowModal',TypeInfo(_T92),[TypeInfo(Integer)], pointer(252));

//RegRegisterMethod(TCustomForm,'WantChildKey',TypeInfo(_T93),[TypeInfo(TControl),TypeInfo(IDispatch),TypeInfo(Boolean)], pointer(256));
RegRegisterMethod(TCustomForm,'WantChildKey',TypeInfo(_T93),[TypeInfo(TControl),TypeInfo(IDispatch),TypeInfo(Boolean)],  getVMTProcAddr('TCustomForm','WantChildKey',256));


RegRegisterMethod(TForm,'ArrangeIcons',TypeInfo(_T94),NoParams,Addr(TForm.ArrangeIcons));

RegRegisterMethod(TForm,'Cascade',TypeInfo(_T95),NoParams,Addr(TForm.Cascade));

RegRegisterMethod(TForm,'Next',TypeInfo(_T96),NoParams,Addr(TForm.Next));

RegRegisterMethod(TForm,'Previous',TypeInfo(_T97),NoParams,Addr(TForm.Previous));

RegRegisterMethod(TForm,'Tile',TypeInfo(_T98),NoParams,Addr(TForm.Tile));

RegRegisterMethod(TScreen,'DisableAlign',TypeInfo(_T99),NoParams,Addr(TScreen.DisableAlign));

RegRegisterMethod(TScreen,'EnableAlign',TypeInfo(_T100),NoParams,Addr(TScreen.EnableAlign));

RegisterProc(TScreen,'MonitorFromPoint',mtScriptMethod,TypeInfo(_T101),[
TypeInfo(IDispatch),
TypeInfo(TMonitorDefaultTo),TypeInfo(TMonitor)],Addr(__TScreen__MonitorFromPoint__Wrapper),cRegister);

RegisterProc(TScreen,'MonitorFromRect',mtScriptMethod,TypeInfo(_T102),[
TypeInfo(IDispatch),
TypeInfo(TMonitorDefaultTo),TypeInfo(TMonitor)],Addr(__TScreen__MonitorFromRect__Wrapper),cRegister);

RegisterProc(TScreen,'MonitorFromWindow',mtScriptMethod,TypeInfo(_T103),[
TypeInfo(THandle),
TypeInfo(TMonitorDefaultTo),TypeInfo(TMonitor)],Addr(__TScreen__MonitorFromWindow__Wrapper),cRegister);

RegRegisterMethod(TScreen,'Realign',TypeInfo(_T104),NoParams,Addr(TScreen.Realign));

RegRegisterMethod(TScreen,'ResetFonts',TypeInfo(_T105),NoParams,Addr(TScreen.ResetFonts));

//RegRegisterMethod(TScrollingWinControl,'AutoScrollEnabled',TypeInfo(_T106),[TypeInfo(Boolean)], pointer(216));
RegRegisterMethod(TScrollingWinControl,'AutoScrollEnabled',TypeInfo(_T106),[TypeInfo(Boolean)],  getVMTProcAddr('TScrollingWinControl','AutoScrollEnabled',216));


//RegRegisterMethod(TScrollingWinControl,'AutoScrollInView',TypeInfo(_T107),[TypeInfo(TControl)], pointer(220));
RegRegisterMethod(TScrollingWinControl,'AutoScrollInView',TypeInfo(_T107),[TypeInfo(TControl)],  getVMTProcAddr('TScrollingWinControl','AutoScrollInView',220));


//RegRegisterMethod(TScrollingWinControl,'Resizing',TypeInfo(_T108),[TypeInfo(TWindowState)], pointer(224));
RegRegisterMethod(TScrollingWinControl,'Resizing',TypeInfo(_T108),[TypeInfo(TWindowState)],  getVMTProcAddr('TScrollingWinControl','Resizing',224));


RegRegisterMethod(TScrollingWinControl,'DisableAutoRange',TypeInfo(_T109),NoParams,Addr(TScrollingWinControl.DisableAutoRange));

RegRegisterMethod(TScrollingWinControl,'EnableAutoRange',TypeInfo(_T110),NoParams,Addr(TScrollingWinControl.EnableAutoRange));

RegRegisterMethod(TScrollingWinControl,'ScrollInView',TypeInfo(_T111),[
TypeInfo(TControl)],Addr(TScrollingWinControl.ScrollInView));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'MakeObjectInstance',mtProc,TypeInfo(_T4),[
TypeInfo(TWndMethod),TypeInfoPointer],Addr(MakeObjectInstance),cRegister)}

{RegisterProc(nil,'AllocateHWnd',mtProc,TypeInfo(_T10),[
TypeInfo(TWndMethod),TypeInfo(HWND)],Addr(AllocateHWnd),cRegister)}

{RegisterProc(nil,'KeyboardStateToShiftState',mtProc,TypeInfo(_T16),[
TypeInfo(TKeyboardState),TypeInfo(TShiftState)],Addr(KeyboardStateToShiftState),cRegister)}

{RegRegisterMethod(TApplication,'CreateForm',TypeInfo(_T25),[
TypeInfo(TComponentClass),
TypeInfoUntyped],Addr(TApplication.CreateForm))}

{RegRegisterMethod(TApplication,'HookMainWindow',TypeInfo(_T38),[
TypeInfo(TWindowHook)],Addr(TApplication.HookMainWindow))}

{RegRegisterMethod(TApplication,'UnhookMainWindow',TypeInfo(_T55),[
TypeInfo(TWindowHook)],Addr(TApplication.UnhookMainWindow))}

RegisterEvent(TypeInfo(TCloseEvent),[
TypeInfo(TObject),
TypeInfo(TCloseAction)]);

RegisterEvent(TypeInfo(TCloseQueryEvent),[
TypeInfo(TObject),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TExceptionEvent),[
TypeInfo(TObject),
TypeInfo(Exception)]);

RegisterEvent(TypeInfo(TGetHandleEvent),[
TypeInfo(HWND)]);

RegisterEvent(TypeInfo(THelpEvent),[
TypeInfo(Word),
TypeInfo(Longint),
TypeInfo(Boolean),TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TIdleEvent),[
TypeInfo(TObject),
TypeInfo(Boolean)]);

{RegisterEvent(TypeInfo(TMessageEvent),[
TypeInfo(IDispatch),
TypeInfo(Boolean)]);}

RegisterEvent(TypeInfo(TSettingChangeEvent),[
TypeInfo(TObject),
TypeInfo(Integer),
TypeInfo(string),
TypeInfo(Longint)]);

{RegisterEvent(TypeInfo(TShortCutEvent),[
TypeInfo(IDispatch),
TypeInfo(Boolean)]);}

{RegisterEvent(TypeInfo(TShowHintEvent),[
TypeInfo(string),
TypeInfo(Boolean),
TypeInfo(IDispatch)]);}

{RegisterEvent(TypeInfo(TWindowHook),[
TypeInfo(IDispatch),TypeInfo(Boolean)]);}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
