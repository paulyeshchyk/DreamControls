{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit SESSCOLN_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  SyncObjs,
  Classes,
  SysUtils,
  SiteComp,
  WebContnrs,
  HTTPApp,
  SessColn;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = function : string of object;

_T1 = procedure (p0 : TSessionID;
var p1 : Boolean) of object;

_T2 = _T1;

_T3 = _T1;

_T4 = procedure  of object;

_T5 = function : Boolean of object;

_T6 = _T4;

_T7 = function : TAbstractSessionIDGen of object;

_T8 = _T7;

_T9 = function (p0 : TSessionID): Boolean of object;

_T10 = _T9;

_T11 = procedure (p0 : TSessionID) of object;

_T12 = _T9;

_T13 = procedure (var p0 : TList) of object;

_T14 = function : Integer of object;

_T15 = function : TSessionID of object;

_T16 = _T9;

_T17 = _T9;

_T18 = procedure (p0 : TSessionID;
const p1 : string;
const p2 : Variant) of object;

_T19 = function (p0 : TSessionID;
const p1 : string): Variant of object;

_T20 = procedure (p0 : TSessionID;
var p1 : TAbstractNamedVariants) of object;

_T21 = function (p0 : TSessionID): Integer of object;

_T22 = function (p0 : TSessionID;
var p1 : TSessionItem): Boolean of object;

_T23 = function (p0 : TSessionID): TDateTime of object;

_T24 = _T21;

_T25 = procedure (p0 : TSessionID;
p1 : Integer) of object;

_T26 = _T23;

_T27 = _T9;

_T28 = _T23;

_T29 = _T9;

_T30 = _T9;

_T31 = _T5;

_T32 = procedure (p0 : TAbstractSessionStatusChange) of object;

_T33 = procedure (const p0 : string) of object;

_T34 = _T33;

_T35 = procedure (p0 : TStream) of object;

_T36 = _T35;

function __DC__GetTSessionItem__ExpirationTime(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSessionItem(Instance).ExpirationTime;
end;

function __DC__GetTSessions__Filename(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSessions(Instance).Filename;
end;

procedure __DC__SetTSessions__Filename(Instance : TObject; Params : PVariantArgList);
begin
TSessions(Instance).Filename:=OleVariant(Params^[0]);
end;

function __DC__GetTSessions__MaxSessions(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSessions(Instance).MaxSessions;
end;

procedure __DC__SetTSessions__MaxSessions(Instance : TObject; Params : PVariantArgList);
begin
TSessions(Instance).MaxSessions:=OleVariant(Params^[0]);
end;

function __DC__GetTSessions__ActiveCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSessions(Instance).ActiveCount;
end;

procedure __RegisterProps;
begin
RegisterProperty(TSessionItem,'ExpirationTime',__DC__GetTSessionItem__ExpirationTime,nil);
RegisterProperty(TSessions,'Filename',__DC__GetTSessions__Filename,__DC__SetTSessions__Filename);
RegisterProperty(TSessions,'MaxSessions',__DC__GetTSessions__MaxSessions,__DC__SetTSessions__MaxSessions);
RegisterProperty(TSessions,'ActiveCount',__DC__GetTSessions__ActiveCount,nil);
end;

function __DC__GetSessColn__Sessions(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(SessColn.Sessions);
end;

procedure __DC__SetSessColn__Sessions(Instance : TObject; Params : PVariantArgList);
begin
TObject(SessColn.Sessions):=(VarToObject(OleVariant(Params^[0])));
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('Sessions',__DC__GetSessColn__Sessions,__DC__SetSessColn__Sessions));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..2] of string = (
'ssStarted'
,'ssTerminated'
,'ssTimeOut'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,ssStarted));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,ssTerminated));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,ssTimeOut));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..5] of TClass = (
ESessionsException,
TAbstractSessionIDGen,
TAbstractSessionStatusChange,
TSessionIDGen,
TSessionItem,
TSessions
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TAbstractSessionIDGen,'NextID',TypeInfo(_T0),[TypeInfo(string)], pointer(0));
RegRegisterMethod(TAbstractSessionIDGen,'NextID',TypeInfo(_T0),[TypeInfo(string)],  getVMTProcAddr('TAbstractSessionIDGen','NextID',0));


//RegRegisterMethod(TAbstractSessionStatusChange,'SessionTerminated',TypeInfo(_T1),[TypeInfo(TSessionID),TypeInfo(Boolean)], pointer(0));
RegRegisterMethod(TAbstractSessionStatusChange,'SessionTerminated',TypeInfo(_T1),[TypeInfo(TSessionID),TypeInfo(Boolean)],  getVMTProcAddr('TAbstractSessionStatusChange','SessionTerminated',0));


//RegRegisterMethod(TAbstractSessionStatusChange,'SessionTimeout',TypeInfo(_T2),[TypeInfo(TSessionID),TypeInfo(Boolean)], pointer(4));
RegRegisterMethod(TAbstractSessionStatusChange,'SessionTimeout',TypeInfo(_T2),[TypeInfo(TSessionID),TypeInfo(Boolean)],  getVMTProcAddr('TAbstractSessionStatusChange','SessionTimeout',4));


//RegRegisterMethod(TAbstractSessionStatusChange,'SessionStarted',TypeInfo(_T3),[TypeInfo(TSessionID),TypeInfo(Boolean)], pointer(8));
RegRegisterMethod(TAbstractSessionStatusChange,'SessionStarted',TypeInfo(_T3),[TypeInfo(TSessionID),TypeInfo(Boolean)],  getVMTProcAddr('TAbstractSessionStatusChange','SessionStarted',8));


RegisterProc(TSessionIDGen,'Create',mtConstructor,TypeInfo(_T4),NoParams,Addr(TSessionIDGen.Create),cRegister);

RegRegisterMethod(TSessionItem,'IsActive',TypeInfo(_T5),[TypeInfo(Boolean)],Addr(TSessionItem.IsActive));

RegisterProc(TSessions,'Create',mtConstructor,TypeInfo(_T6),NoParams,Addr(TSessions.Create),cRegister);

RegRegisterMethod(TSessions,'GetSessionIDGen',TypeInfo(_T7),[TypeInfo(TAbstractSessionIDGen)],Addr(TSessions.GetSessionIDGen));

//RegRegisterMethod(TSessions,'CreateSessionIDGen',TypeInfo(_T8),[TypeInfo(TAbstractSessionIDGen)], pointer(40));
RegRegisterMethod(TSessions,'CreateSessionIDGen',TypeInfo(_T8),[TypeInfo(TAbstractSessionIDGen)],  getVMTProcAddr('TSessions','CreateSessionIDGen',40));


RegRegisterMethod(TSessions,'ConnectSession',TypeInfo(_T9),[
TypeInfo(TSessionID),TypeInfo(Boolean)],Addr(TSessions.ConnectSession));

RegRegisterMethod(TSessions,'ConnectActiveSession',TypeInfo(_T10),[
TypeInfo(TSessionID),TypeInfo(Boolean)],Addr(TSessions.ConnectActiveSession));

RegRegisterMethod(TSessions,'DisconnectSession',TypeInfo(_T11),[
TypeInfo(TSessionID)],Addr(TSessions.DisconnectSession));

RegRegisterMethod(TSessions,'TerminateSession',TypeInfo(_T12),[
TypeInfo(TSessionID),TypeInfo(Boolean)],Addr(TSessions.TerminateSession));

RegRegisterMethod(TSessions,'GetIDs',TypeInfo(_T13),[
TypeInfo(TList)],Addr(TSessions.GetIDs));

RegRegisterMethod(TSessions,'GetIDCount',TypeInfo(_T14),[TypeInfo(Integer)],Addr(TSessions.GetIDCount));

RegRegisterMethod(TSessions,'StartSession',TypeInfo(_T15),[TypeInfo(TSessionID)],Addr(TSessions.StartSession));

RegRegisterMethod(TSessions,'SessionExists',TypeInfo(_T16),[
TypeInfo(TSessionID),TypeInfo(Boolean)],Addr(TSessions.SessionExists));

RegRegisterMethod(TSessions,'TouchSession',TypeInfo(_T17),[
TypeInfo(TSessionID),TypeInfo(Boolean)],Addr(TSessions.TouchSession));

RegRegisterMethod(TSessions,'SetItemValue',TypeInfo(_T18),[
TypeInfo(TSessionID),
TypeInfo(string),
TypeInfo(Variant)],Addr(TSessions.SetItemValue));

RegRegisterMethod(TSessions,'ItemValue',TypeInfo(_T19),[
TypeInfo(TSessionID),
TypeInfo(string),TypeInfo(Variant)],Addr(TSessions.ItemValue));

RegRegisterMethod(TSessions,'GetItems',TypeInfo(_T20),[
TypeInfo(TSessionID),
TypeInfo(TAbstractNamedVariants)],Addr(TSessions.GetItems));

RegRegisterMethod(TSessions,'GetItemCount',TypeInfo(_T21),[
TypeInfo(TSessionID),TypeInfo(Integer)],Addr(TSessions.GetItemCount));

RegRegisterMethod(TSessions,'GetSession',TypeInfo(_T22),[
TypeInfo(TSessionID),
TypeInfo(TSessionItem),TypeInfo(Boolean)],Addr(TSessions.GetSession));

RegRegisterMethod(TSessions,'GetStartTime',TypeInfo(_T23),[
TypeInfo(TSessionID),TypeInfo(TDateTime)],Addr(TSessions.GetStartTime));

RegRegisterMethod(TSessions,'GetTimeoutMinutes',TypeInfo(_T24),[
TypeInfo(TSessionID),TypeInfo(Integer)],Addr(TSessions.GetTimeoutMinutes));

RegRegisterMethod(TSessions,'SetTimeoutMinutes',TypeInfo(_T25),[
TypeInfo(TSessionID),
TypeInfo(Integer)],Addr(TSessions.SetTimeoutMinutes));

RegRegisterMethod(TSessions,'GetTouchTime',TypeInfo(_T26),[
TypeInfo(TSessionID),TypeInfo(TDateTime)],Addr(TSessions.GetTouchTime));

RegRegisterMethod(TSessions,'GetExpired',TypeInfo(_T27),[
TypeInfo(TSessionID),TypeInfo(Boolean)],Addr(TSessions.GetExpired));

RegRegisterMethod(TSessions,'GetExpirationTime',TypeInfo(_T28),[
TypeInfo(TSessionID),TypeInfo(TDateTime)],Addr(TSessions.GetExpirationTime));

RegRegisterMethod(TSessions,'GetTerminated',TypeInfo(_T29),[
TypeInfo(TSessionID),TypeInfo(Boolean)],Addr(TSessions.GetTerminated));

RegRegisterMethod(TSessions,'GetIsActive',TypeInfo(_T30),[
TypeInfo(TSessionID),TypeInfo(Boolean)],Addr(TSessions.GetIsActive));

RegRegisterMethod(TSessions,'CheckStatusChange',TypeInfo(_T31),[TypeInfo(Boolean)],Addr(TSessions.CheckStatusChange));

RegRegisterMethod(TSessions,'NotifyStatusChange',TypeInfo(_T32),[
TypeInfo(TAbstractSessionStatusChange)],Addr(TSessions.NotifyStatusChange));

RegRegisterMethod(TSessions,'LoadFromFile',TypeInfo(_T33),[
TypeInfo(string)],Addr(TSessions.LoadFromFile));

RegRegisterMethod(TSessions,'SaveToFile',TypeInfo(_T34),[
TypeInfo(string)],Addr(TSessions.SaveToFile));

RegRegisterMethod(TSessions,'LoadFromStream',TypeInfo(_T35),[
TypeInfo(TStream)],Addr(TSessions.LoadFromStream));

RegRegisterMethod(TSessions,'SaveToStream',TypeInfo(_T36),[
TypeInfo(TStream)],Addr(TSessions.SaveToStream));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
end.
