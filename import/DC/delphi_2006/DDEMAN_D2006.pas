{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit DDEMAN_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Classes,
  Forms,
  Controls,
  DDEml,
  DdeMan;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = function (var p0 : string;
var p1 : string;
var p2 : string): Boolean of object;

_T1 = procedure  of object;

_T2 = _T1;

_T3 = function : Boolean of object;

_T4 = _T3;

_T5 = function (const p0 : string;
const p1 : string): Boolean of object;

_T6 = _T1;

_T7 = _T3;

_T8 = function (const p0 : string;
p1 : TStrings): Boolean of object;

{_T9 = function (const p0 : string;
p1 : PChar): Boolean of object;}

_T10 = function (p0 : TStrings;
p1 : Boolean): Boolean of object;

{_T11 = function (p0 : PChar;
p1 : Boolean): Boolean of object;}

_T12 = function (const p0 : string): PChar of object;

_T13 = function : string of object;

_T14 = _T1;

_T15 = _T1;

_T16 = function (p0 : HDDEData): Longint of object;

_T17 = _T16;

_T18 = _T1;

_T19 = _T1;

function __DC__GetTDdeClientConv__DdeFmt(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDdeClientConv(Instance).DdeFmt;
end;

function __DC__GetTDdeClientConv__WaitStat(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDdeClientConv(Instance).WaitStat;
end;

function __DC__GetTDdeClientConv__Conv(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDdeClientConv(Instance).Conv;
end;

function __DC__GetTDdeClientConv__DataMode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDdeClientConv(Instance).DataMode;
end;

procedure __DC__SetTDdeClientConv__DataMode(Instance : TObject; Params : PVariantArgList);
begin
TDdeClientConv(Instance).DataMode:=OleVariant(Params^[0]);
end;

function __DC__GetTDdeMgr__DdeInstId(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDdeMgr(Instance).DdeInstId;
end;

procedure __DC__SetTDdeMgr__DdeInstId(Instance : TObject; Params : PVariantArgList);
begin
TDdeMgr(Instance).DdeInstId:=OleVariant(Params^[0]);
end;

function __DC__GetTDdeMgr__AppName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDdeMgr(Instance).AppName;
end;

procedure __DC__SetTDdeMgr__AppName(Instance : TObject; Params : PVariantArgList);
begin
TDdeMgr(Instance).AppName:=OleVariant(Params^[0]);
end;

function __DC__GetTDdeMgr__LinkClipFmt(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDdeMgr(Instance).LinkClipFmt;
end;

function __DC__GetTDdeServerItem__Fmt(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDdeServerItem(Instance).Fmt;
end;

procedure __RegisterProps;
begin
RegisterProperty(TDdeClientConv,'DdeFmt',__DC__GetTDdeClientConv__DdeFmt,nil);
RegisterProperty(TDdeClientConv,'WaitStat',__DC__GetTDdeClientConv__WaitStat,nil);
RegisterProperty(TDdeClientConv,'Conv',__DC__GetTDdeClientConv__Conv,nil);
RegisterProperty(TDdeClientConv,'DataMode',__DC__GetTDdeClientConv__DataMode,__DC__SetTDdeClientConv__DataMode);
RegisterProperty(TDdeMgr,'DdeInstId',__DC__GetTDdeMgr__DdeInstId,__DC__SetTDdeMgr__DdeInstId);
RegisterProperty(TDdeMgr,'AppName',__DC__GetTDdeMgr__AppName,__DC__SetTDdeMgr__AppName);
RegisterProperty(TDdeMgr,'LinkClipFmt',__DC__GetTDdeMgr__LinkClipFmt,nil);
RegisterProperty(TDdeServerItem,'Fmt',__DC__GetTDdeServerItem__Fmt,nil);
end;

function __DC__GetDdeMan__ddeMgr(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(DdeMan.ddeMgr);
end;

procedure __DC__SetDdeMan__ddeMgr(Instance : TObject; Params : PVariantArgList);
begin
TObject(DdeMan.ddeMgr):=(VarToObject(OleVariant(Params^[0])));
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('ddeMgr',__DC__GetDdeMan__ddeMgr,__DC__SetDdeMan__ddeMgr));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..1] of string = (
'ddeAutomatic'
,'ddeManual'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,ddeAutomatic));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,ddeManual));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..4] of TClass = (
TDdeClientConv,
TDdeClientItem,
TDdeMgr,
TDdeServerConv,
TDdeServerItem
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'GetPasteLinkInfo'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(string),TypeInfo(Boolean)],Addr(GetPasteLinkInfo),cRegister);

RegRegisterMethod(TDdeClientConv,'Close',TypeInfo(_T1),NoParams, pointer(MinVMTOffset - 16));

RegRegisterMethod(TDdeClientConv,'Open',TypeInfo(_T2),NoParams, pointer(MinVMTOffset - 17));

RegRegisterMethod(TDdeClientConv,'PasteLink',TypeInfo(_T3),[TypeInfo(Boolean)],Addr(TDdeClientConv.PasteLink));

RegRegisterMethod(TDdeClientConv,'OpenLink',TypeInfo(_T4),[TypeInfo(Boolean)],Addr(TDdeClientConv.OpenLink));

RegRegisterMethod(TDdeClientConv,'SetLink',TypeInfo(_T5),[
TypeInfo(string),
TypeInfo(string),TypeInfo(Boolean)],Addr(TDdeClientConv.SetLink));

RegRegisterMethod(TDdeClientConv,'CloseLink',TypeInfo(_T6),NoParams,Addr(TDdeClientConv.CloseLink));

RegRegisterMethod(TDdeClientConv,'StartAdvise',TypeInfo(_T7),[TypeInfo(Boolean)],Addr(TDdeClientConv.StartAdvise));

RegRegisterMethod(TDdeClientConv,'PokeDataLines',TypeInfo(_T8),[
TypeInfo(string),
TypeInfo(TStrings),TypeInfo(Boolean)],Addr(TDdeClientConv.PokeDataLines));

RegRegisterMethod(TDdeClientConv,'ExecuteMacroLines',TypeInfo(_T10),[
TypeInfo(TStrings),
TypeInfo(Boolean),TypeInfo(Boolean)],Addr(TDdeClientConv.ExecuteMacroLines));

RegRegisterMethod(TDdeClientConv,'RequestData',TypeInfo(_T12),[
TypeInfo(string),TypeInfoPChar],Addr(TDdeClientConv.RequestData));

RegRegisterMethod(TDdeMgr,'GetExeName',TypeInfo(_T13),[TypeInfo(string)],Addr(TDdeMgr.GetExeName));

RegRegisterMethod(TDdeServerConv,'Connect',TypeInfo(_T14),NoParams, pointer(MinVMTOffset - 16));

RegRegisterMethod(TDdeServerConv,'Disconnect',TypeInfo(_T15),NoParams, pointer(MinVMTOffset - 17));

RegRegisterMethod(TDdeServerConv,'ExecuteMacro',TypeInfo(_T16),[
TypeInfo(HDDEData),TypeInfo(Longint)],Addr(TDdeServerConv.ExecuteMacro));

RegRegisterMethod(TDdeServerItem,'PokeData',TypeInfo(_T17),[
TypeInfo(HDDEData),TypeInfo(Longint)],Addr(TDdeServerItem.PokeData));

RegRegisterMethod(TDdeServerItem,'CopyToClipboard',TypeInfo(_T18),NoParams,Addr(TDdeServerItem.CopyToClipboard));

RegRegisterMethod(TDdeServerItem,'Change',TypeInfo(_T19),NoParams, pointer(MinVMTOffset - 16));

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegRegisterMethod(TDdeClientConv,'PokeData',TypeInfo(_T9),[
TypeInfo(string),
TypeInfoPChar,TypeInfo(Boolean)],Addr(TDdeClientConv.PokeData))}

{RegRegisterMethod(TDdeClientConv,'ExecuteMacro',TypeInfo(_T11),[
TypeInfoPChar,
TypeInfo(Boolean),TypeInfo(Boolean)],Addr(TDdeClientConv.ExecuteMacro))}

RegisterEvent(TypeInfo(TMacroEvent),[
TypeInfo(TObject),
TypeInfo(TStrings)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
