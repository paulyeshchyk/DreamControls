{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit WEBSESS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  Contnrs,
  SysUtils,
  SiteComp,
  WebContnrs,
  HTTPApp,
  SessColn,
  WebDisp,
  WebSess;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (p0 : TAbstractWebSession) of object;

_T1 = procedure (p0 : TAbstractWebSession;
p1 : TEndSessionReason) of object;

_T2 = procedure  of object;

_T3 = procedure (p0 : TSessionID) of object;

function __DC__GetTCustomSessionsService__DefaultTimeout(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomSessionsService(Instance).DefaultTimeout;
end;

procedure __DC__SetTCustomSessionsService__DefaultTimeout(Instance : TObject; Params : PVariantArgList);
begin
TCustomSessionsService(Instance).DefaultTimeout:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomSessionsService__MaxSessions(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomSessionsService(Instance).MaxSessions;
end;

procedure __DC__SetTCustomSessionsService__MaxSessions(Instance : TObject; Params : PVariantArgList);
begin
TCustomSessionsService(Instance).MaxSessions:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TCustomSessionsService,'DefaultTimeout',__DC__GetTCustomSessionsService__DefaultTimeout,__DC__SetTCustomSessionsService__DefaultTimeout);
RegisterProperty(TCustomSessionsService,'MaxSessions',__DC__GetTCustomSessionsService__MaxSessions,__DC__SetTCustomSessionsService__MaxSessions);
end;

const __ConstNames0 : array[0..1] of string = (
'esTimeout'
,'esTerminate'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,esTimeout));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,esTerminate));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..3] of TClass = (
TCustomSessionsService,
TSessionsService,
TWebSessionIDsImpl,
TWebSessionImpl
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TCustomSessionsService,'DoStartSession',TypeInfo(_T0),[TypeInfo(TAbstractWebSession)], pointer(48));
RegRegisterMethod(TCustomSessionsService,'DoStartSession',TypeInfo(_T0),[TypeInfo(TAbstractWebSession)],  getVMTProcAddr('TCustomSessionsService','DoStartSession',48));


//RegRegisterMethod(TCustomSessionsService,'DoEndSession',TypeInfo(_T1),[TypeInfo(TAbstractWebSession),TypeInfo(TEndSessionReason)], pointer(52));
RegRegisterMethod(TCustomSessionsService,'DoEndSession',TypeInfo(_T1),[TypeInfo(TAbstractWebSession),TypeInfo(TEndSessionReason)],  getVMTProcAddr('TCustomSessionsService','DoEndSession',52));


RegisterProc(TWebSessionIDsImpl,'Create',mtConstructor,TypeInfo(_T2),NoParams,Addr(TWebSessionIDsImpl.Create),cRegister);

RegisterProc(TWebSessionImpl,'Create',mtConstructor,TypeInfo(_T3),[
TypeInfo(TSessionID)],Addr(TWebSessionImpl.Create),cRegister);

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
RegisterEvent(TypeInfo(TEndSessionEvent),[
TypeInfo(TObject),
TypeInfo(TAbstractWebSession),
TypeInfo(TEndSessionReason)]);

RegisterEvent(TypeInfo(TStartSessionEvent),[
TypeInfo(TObject),
TypeInfo(TAbstractWebSession)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
