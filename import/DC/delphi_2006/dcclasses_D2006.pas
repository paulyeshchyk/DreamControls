{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit dcclasses_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Messages,
  Windows,
  Classes,
  Sysutils,
  dcconsts,
  dcClasses;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = function (const p0 : Pointer;
p1 : Pointer;
p2 : DWORD): Boolean of object;

_T1 = procedure  of object;

_T2 = function (p0 : Pointer;
p1 : Pointer): Integer of object;

_T3 = _T2;

_T4 = function (p0 : Pointer): Integer of object;

_T5 = function (p0 : Pointer): Pointer of object;

_T6 = function (p0 : Pointer;
var p1 : Integer): Boolean of object;

_T7 = _T6;

_T8 = _T4;

_T9 = procedure (p0 : Integer;
p1 : Pointer) of object;

_T10 = _T4;

_T11 = _T4;

_T12 = procedure (p0 : Pointer) of object;

_T13 = _T1;

_T14 = procedure (p0 : Integer) of object;

function __DC__GetTCustomSortedList__InternalList(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomSortedList(Instance).InternalList);
end;

function __DC__GetTCustomSortedList__Sorted(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomSortedList(Instance).Sorted;
end;

procedure __DC__SetTCustomSortedList__Sorted(Instance : TObject; Params : PVariantArgList);
begin
TCustomSortedList(Instance).Sorted:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomSortedList__Duplicates(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomSortedList(Instance).Duplicates;
end;

procedure __DC__SetTCustomSortedList__Duplicates(Instance : TObject; Params : PVariantArgList);
begin
TCustomSortedList(Instance).Duplicates:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomSortedList__Capacity(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomSortedList(Instance).Capacity;
end;

procedure __DC__SetTCustomSortedList__Capacity(Instance : TObject; Params : PVariantArgList);
begin
TCustomSortedList(Instance).Capacity:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomSortedList__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomSortedList(Instance).Count;
end;

procedure __DC__SetTCustomSortedList__Count(Instance : TObject; Params : PVariantArgList);
begin
TCustomSortedList(Instance).Count:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomSortedList__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TCustomSortedList(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TCustomSortedList,'InternalList',__DC__GetTCustomSortedList__InternalList,nil);
RegisterProperty(TCustomSortedList,'Sorted',__DC__GetTCustomSortedList__Sorted,__DC__SetTCustomSortedList__Sorted);
RegisterProperty(TCustomSortedList,'Duplicates',__DC__GetTCustomSortedList__Duplicates,__DC__SetTCustomSortedList__Duplicates);
RegisterProperty(TCustomSortedList,'Capacity',__DC__GetTCustomSortedList__Capacity,__DC__SetTCustomSortedList__Capacity);
RegisterProperty(TCustomSortedList,'Count',__DC__GetTCustomSortedList__Count,__DC__SetTCustomSortedList__Count);
RegisterIndexedProperty(TCustomSortedList,'Items',1,True,__DC__GetTCustomSortedList__Items,nil);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..1] of TClass = (
TCustomSortedList,
TFastList
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'WriteMemory'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(Boolean)],Addr(WriteMemory),cRegister);

RegisterProc(TCustomSortedList,'Create',mtConstructor,TypeInfo(_T1),NoParams,Addr(TCustomSortedList.Create),cRegister);

//RegRegisterMethod(TCustomSortedList,'CompareWithKey',TypeInfo(_T2),[TypeInfoPointer,TypeInfoPointer,TypeInfo(Integer)], pointer(0));
RegRegisterMethod(TCustomSortedList,'CompareWithKey',TypeInfo(_T2),[TypeInfoPointer,TypeInfoPointer,TypeInfo(Integer)],  getVMTProcAddr('TCustomSortedList','CompareWithKey',0));


//RegRegisterMethod(TCustomSortedList,'Compare',TypeInfo(_T3),[TypeInfoPointer,TypeInfoPointer,TypeInfo(Integer)], pointer(4));
RegRegisterMethod(TCustomSortedList,'Compare',TypeInfo(_T3),[TypeInfoPointer,TypeInfoPointer,TypeInfo(Integer)],  getVMTProcAddr('TCustomSortedList','Compare',4));


RegRegisterMethod(TCustomSortedList,'IndexOfKey',TypeInfo(_T4),[
TypeInfoPointer,TypeInfo(Integer)],Addr(TCustomSortedList.IndexOfKey));

RegRegisterMethod(TCustomSortedList,'ItemByKey',TypeInfo(_T5),[
TypeInfoPointer,TypeInfoPointer],Addr(TCustomSortedList.ItemByKey));

RegRegisterMethod(TCustomSortedList,'Find',TypeInfo(_T6),[
TypeInfoPointer,
TypeInfo(Integer),TypeInfo(Boolean)],Addr(TCustomSortedList.Find));

RegRegisterMethod(TCustomSortedList,'FindByKey',TypeInfo(_T7),[
TypeInfoPointer,
TypeInfo(Integer),TypeInfo(Boolean)],Addr(TCustomSortedList.FindByKey));

RegRegisterMethod(TCustomSortedList,'Add',TypeInfo(_T8),[
TypeInfoPointer,TypeInfo(Integer)],Addr(TCustomSortedList.Add));

RegRegisterMethod(TCustomSortedList,'Insert',TypeInfo(_T9),[
TypeInfo(Integer),
TypeInfoPointer],Addr(TCustomSortedList.Insert));

RegRegisterMethod(TCustomSortedList,'IndexOf',TypeInfo(_T10),[
TypeInfoPointer,TypeInfo(Integer)],Addr(TCustomSortedList.IndexOf));

RegRegisterMethod(TCustomSortedList,'Remove',TypeInfo(_T11),[
TypeInfoPointer,TypeInfo(Integer)],Addr(TCustomSortedList.Remove));

RegRegisterMethod(TCustomSortedList,'RemoveAll',TypeInfo(_T12),[
TypeInfoPointer],Addr(TCustomSortedList.RemoveAll));

RegRegisterMethod(TCustomSortedList,'Clear',TypeInfo(_T13),NoParams,Addr(TCustomSortedList.Clear));

//RegRegisterMethod(TCustomSortedList,'Delete',TypeInfo(_T14),[TypeInfo(Integer)], pointer(8));
RegRegisterMethod(TCustomSortedList,'Delete',TypeInfo(_T14),[TypeInfo(Integer)],  getVMTProcAddr('TCustomSortedList','Delete',8));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
RegisterEvent(TypeInfo(TListCompare),[
TypeInfoPointer,
TypeInfoPointer,TypeInfo(Integer)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
