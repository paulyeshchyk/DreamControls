{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit COPYPRSR_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  CopyPrsr;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (p0 : TStream;
p1 : TStream) of object;

_T1 = procedure (p0 : Char) of object;

_T2 = procedure (const p0 : string) of object;

_T3 = function (p0 : Integer): string of object;

_T4 = function (p0 : Char): string of object;

_T5 = function : string of object;

_T6 = _T5;

_T7 = procedure  of object;

_T8 = _T2;

_T9 = procedure (const p0 : string;
const p1 : Array of Const) of object;

_T10 = _T2;

_T11 = function : Char of object;

_T12 = function (p0 : Boolean): Char of object;

_T13 = _T7;

_T14 = _T3;

_T15 = _T4;

_T16 = _T5;

_T17 = _T5;

_T18 = function : Longint of object;

_T19 = _T5;

_T20 = function : Extended of object;

_T21 = _T18;

_T22 = _T5;

_T23 = function (const p0 : string): Boolean of object;

function __DC__GetTCopyParser__SourceLine(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCopyParser(Instance).SourceLine;
end;

function __DC__GetTCopyParser__Token(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCopyParser(Instance).Token;
end;

function __DC__GetTCopyParser__OutputStream(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCopyParser(Instance).OutputStream);
end;

procedure __DC__SetTCopyParser__OutputStream(Instance : TObject; Params : PVariantArgList);
begin
TCopyParser(Instance).OutputStream:=TStream(VarToObject(OleVariant(Params^[0])));
end;

procedure __RegisterProps;
begin
RegisterProperty(TCopyParser,'SourceLine',__DC__GetTCopyParser__SourceLine,nil);
RegisterProperty(TCopyParser,'Token',__DC__GetTCopyParser__Token,nil);
RegisterProperty(TCopyParser,'OutputStream',__DC__GetTCopyParser__OutputStream,__DC__SetTCopyParser__OutputStream);
end;

const __ConstNames0 : array[0..0] of string = (
'toEOL'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,toEOL));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..0] of TClass = (
TCopyParser
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegisterProc(TCopyParser,'Create',mtConstructor,TypeInfo(_T0),[
TypeInfo(TStream),
TypeInfo(TStream)],Addr(TCopyParser.Create),cRegister);

RegRegisterMethod(TCopyParser,'CheckToken',TypeInfo(_T1),[
TypeInfo(Char)],Addr(TCopyParser.CheckToken));

RegRegisterMethod(TCopyParser,'CheckTokenSymbol',TypeInfo(_T2),[
TypeInfo(string)],Addr(TCopyParser.CheckTokenSymbol));

RegRegisterMethod(TCopyParser,'CopyTo',TypeInfo(_T3),[
TypeInfo(Integer),TypeInfo(string)],Addr(TCopyParser.CopyTo));

RegRegisterMethod(TCopyParser,'CopyToToken',TypeInfo(_T4),[
TypeInfo(Char),TypeInfo(string)],Addr(TCopyParser.CopyToToken));

RegRegisterMethod(TCopyParser,'CopyToEOL',TypeInfo(_T5),[TypeInfo(string)],Addr(TCopyParser.CopyToEOL));

RegRegisterMethod(TCopyParser,'CopyToEOF',TypeInfo(_T6),[TypeInfo(string)],Addr(TCopyParser.CopyToEOF));

RegRegisterMethod(TCopyParser,'CopyTokenToOutput',TypeInfo(_T7),NoParams,Addr(TCopyParser.CopyTokenToOutput));

RegRegisterMethod(TCopyParser,'Error',TypeInfo(_T8),[
TypeInfo(string)],Addr(TCopyParser.Error));

RegRegisterMethod(TCopyParser,'ErrorFmt',TypeInfo(_T9),[
TypeInfo(string),
TypeInfoArrayOfConst],Addr(TCopyParser.ErrorFmt));

RegRegisterMethod(TCopyParser,'ErrorStr',TypeInfo(_T10),[
TypeInfo(string)],Addr(TCopyParser.ErrorStr));

RegRegisterMethod(TCopyParser,'NextToken',TypeInfo(_T11),[TypeInfo(Char)],Addr(TCopyParser.NextToken));

RegRegisterMethod(TCopyParser,'SkipToken',TypeInfo(_T12),[
TypeInfo(Boolean),TypeInfo(Char)],Addr(TCopyParser.SkipToken));

RegRegisterMethod(TCopyParser,'SkipEOL',TypeInfo(_T13),NoParams,Addr(TCopyParser.SkipEOL));

RegRegisterMethod(TCopyParser,'SkipTo',TypeInfo(_T14),[
TypeInfo(Integer),TypeInfo(string)],Addr(TCopyParser.SkipTo));

RegRegisterMethod(TCopyParser,'SkipToToken',TypeInfo(_T15),[
TypeInfo(Char),TypeInfo(string)],Addr(TCopyParser.SkipToToken));

RegRegisterMethod(TCopyParser,'SkipToEOL',TypeInfo(_T16),[TypeInfo(string)],Addr(TCopyParser.SkipToEOL));

RegRegisterMethod(TCopyParser,'SkipToEOF',TypeInfo(_T17),[TypeInfo(string)],Addr(TCopyParser.SkipToEOF));

RegRegisterMethod(TCopyParser,'SourcePos',TypeInfo(_T18),[TypeInfo(Longint)],Addr(TCopyParser.SourcePos));

RegRegisterMethod(TCopyParser,'TokenComponentIdent',TypeInfo(_T19),[TypeInfo(string)],Addr(TCopyParser.TokenComponentIdent));

RegRegisterMethod(TCopyParser,'TokenFloat',TypeInfo(_T20),[TypeInfo(Extended)],Addr(TCopyParser.TokenFloat));

RegRegisterMethod(TCopyParser,'TokenInt',TypeInfo(_T21),[TypeInfo(Longint)],Addr(TCopyParser.TokenInt));

RegRegisterMethod(TCopyParser,'TokenString',TypeInfo(_T22),[TypeInfo(string)],Addr(TCopyParser.TokenString));

RegRegisterMethod(TCopyParser,'TokenSymbolIs',TypeInfo(_T23),[
TypeInfo(string),TypeInfo(Boolean)],Addr(TCopyParser.TokenSymbolIs));

end;
initialization
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
