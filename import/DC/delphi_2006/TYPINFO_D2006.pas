{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit TYPINFO_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Variants,
  SysUtils,
  TypInfo;
function ConvertTMethodToVariant(var R : TMethod) : OleVariant;
function ConvertVariantToTMethod(const V : OleVariant) : TMethod;
function ConvertTPropDataToVariant(var R : TPropData) : OleVariant;
function ConvertVariantToTPropData(const V : OleVariant) : TPropData;
function ConvertTPropInfoToVariant(var R : TPropInfo) : OleVariant;
function ConvertVariantToTPropInfo(const V : OleVariant) : TPropInfo;
function ConvertTTypeDataToVariant(var R : TTypeData) : OleVariant;
function ConvertVariantToTTypeData(const V : OleVariant) : TTypeData;
function ConvertTTypeInfoToVariant(var R : TTypeInfo) : OleVariant;
function ConvertVariantToTTypeInfo(const V : OleVariant) : TTypeInfo;
function ConvertTVarDataToVariant(var R : TVarData) : OleVariant;
function ConvertVariantToTVarData(const V : OleVariant) : TVarData;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TPropData__Wrapper = class(TDCRecordWrapper)
private
fR : TPropData;
public
function GetRecordPtr : pointer; override;
published
procedure setPropCount(const val : Word);
function getPropCount : Word;
property PropCount : Word read getPropCount write setPropCount;
end;
type __TPropInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TPropInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setIndex(const val : Integer);
function getIndex : Integer;
property Index : Integer read getIndex write setIndex;
procedure setDefault(const val : Longint);
function getDefault : Longint;
property Default : Longint read getDefault write setDefault;
procedure setNameIndex(const val : SmallInt);
function getNameIndex : SmallInt;
property NameIndex : SmallInt read getNameIndex write setNameIndex;
end;
type __TTypeData__Wrapper = class(TDCRecordWrapper)
private
fR : TTypeData;
public
function GetRecordPtr : pointer; override;
published
procedure setOrdType(const val : TOrdType);
function getOrdType : TOrdType;
property OrdType : TOrdType read getOrdType write setOrdType;
procedure setMinValue(const val : Longint);
function getMinValue : Longint;
property MinValue : Longint read getMinValue write setMinValue;
procedure setMaxValue(const val : Longint);
function getMaxValue : Longint;
property MaxValue : Longint read getMaxValue write setMaxValue;
procedure setNameList(const val : ShortStringBase);
function getNameList : ShortStringBase;
property NameList : ShortStringBase read getNameList write setNameList;
procedure setEnumUnitName(const val : ShortStringBase);
function getEnumUnitName : ShortStringBase;
property EnumUnitName : ShortStringBase read getEnumUnitName write setEnumUnitName;
procedure setFloatType(const val : TFloatType);
function getFloatType : TFloatType;
property FloatType : TFloatType read getFloatType write setFloatType;
procedure setMaxLength(const val : Byte);
function getMaxLength : Byte;
property MaxLength : Byte read getMaxLength write setMaxLength;
procedure setPropCount(const val : SmallInt);
function getPropCount : SmallInt;
property PropCount : SmallInt read getPropCount write setPropCount;
procedure setUnitName(const val : ShortStringBase);
function getUnitName : ShortStringBase;
property UnitName : ShortStringBase read getUnitName write setUnitName;
procedure setMethodKind(const val : TMethodKind);
function getMethodKind : TMethodKind;
property MethodKind : TMethodKind read getMethodKind write setMethodKind;
procedure setParamCount(const val : Byte);
function getParamCount : Byte;
property ParamCount : Byte read getParamCount write setParamCount;
procedure setIntfUnit(const val : ShortStringBase);
function getIntfUnit : ShortStringBase;
property IntfUnit : ShortStringBase read getIntfUnit write setIntfUnit;
procedure setelSize(const val : Longint);
function getelSize : Longint;
property elSize : Longint read getelSize write setelSize;
procedure setvarType(const val : Integer);
function getvarType : Integer;
property varType : Integer read getvarType write setvarType;
procedure setDynUnitName(const val : ShortStringBase);
function getDynUnitName : ShortStringBase;
property DynUnitName : ShortStringBase read getDynUnitName write setDynUnitName;
end;
type __TTypeInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TTypeInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setKind(const val : TTypeKind);
function getKind : TTypeKind;
property Kind : TTypeKind read getKind write setKind;
end;
type __TMethod__Wrapper = class(TDCRecordWrapper)
private
fR : TMethod;
public
function GetRecordPtr : pointer; override;
published
end;
type __TVarData__Wrapper = class(TDCRecordWrapper)
private
fR : TVarData;
public
function GetRecordPtr : pointer; override;
published
procedure setVType(const val : TVarType);
function getVType : TVarType;
property VType : TVarType read getVType write setVType;
procedure setReserved1(const val : Word);
function getReserved1 : Word;
property Reserved1 : Word read getReserved1 write setReserved1;
procedure setReserved2(const val : Word);
function getReserved2 : Word;
property Reserved2 : Word read getReserved2 write setReserved2;
procedure setReserved3(const val : Word);
function getReserved3 : Word;
property Reserved3 : Word read getReserved3 write setReserved3;
procedure setVSmallInt(const val : SmallInt);
function getVSmallInt : SmallInt;
property VSmallInt : SmallInt read getVSmallInt write setVSmallInt;
procedure setVInteger(const val : Integer);
function getVInteger : Integer;
property VInteger : Integer read getVInteger write setVInteger;
procedure setVSingle(const val : Single);
function getVSingle : Single;
property VSingle : Single read getVSingle write setVSingle;
procedure setVDouble(const val : Double);
function getVDouble : Double;
property VDouble : Double read getVDouble write setVDouble;
procedure setVCurrency(const val : Currency);
function getVCurrency : Currency;
property VCurrency : Currency read getVCurrency write setVCurrency;
procedure setVBoolean(const val : WordBool);
function getVBoolean : WordBool;
property VBoolean : WordBool read getVBoolean write setVBoolean;
procedure setVShortInt(const val : Shortint);
function getVShortInt : Shortint;
property VShortInt : Shortint read getVShortInt write setVShortInt;
procedure setVByte(const val : Byte);
function getVByte : Byte;
property VByte : Byte read getVByte write setVByte;
procedure setVWord(const val : Word);
function getVWord : Word;
property VWord : Word read getVWord write setVWord;
procedure setVLongWord(const val : LongWord);
function getVLongWord : LongWord;
property VLongWord : LongWord read getVLongWord write setVLongWord;
end;
type __TPublishableVariantType__ = class(TPublishableVariantType);
type
_T0 = function (p0 : TObject;
const p1 : string): TTypeKind of object;

_T1 = function (p0 : TObject;
const p1 : string;
p2 : TTypeKind): Boolean of object;

_T2 = function (p0 : TObject;
const p1 : string): Boolean of object;

_T3 = _T2;

_T4 = function (p0 : TObject;
const p1 : string): Longint of object;

_T5 = procedure (p0 : TObject;
const p1 : string;
p2 : Longint) of object;

_T6 = function (p0 : TObject;
const p1 : string): string of object;

_T7 = procedure (p0 : TObject;
const p1 : string;
const p2 : string) of object;

_T8 = function (p0 : TObject;
const p1 : string;
p2 : Boolean): string of object;

_T9 = _T7;

_T11 = procedure (p0 : TObject;
const p1 : string;
p2 : TObject) of object;

{_T12 = function (p0 : TObject;
const p1 : string): TClass of object;}

_T13 = _T6;

_T14 = _T7;

_T15 = function (p0 : TObject;
const p1 : string): WideString of object;

_T16 = procedure (p0 : TObject;
const p1 : string;
const p2 : WideString) of object;

_T17 = function (p0 : TObject;
const p1 : string): Extended of object;

_T18 = procedure (p0 : TObject;
const p1 : string;
const p2 : Extended) of object;

_T19 = function (p0 : TObject;
const p1 : string): Variant of object;

_T20 = procedure (p0 : TObject;
const p1 : string;
const p2 : Variant) of object;

_T21 = function (p0 : TObject;
const p1 : string): IDispatch of object;

_T22 = procedure (p0 : TObject;
const p1 : string;
const p2 : IDispatch) of object;

{_T23 = function (p0 : TObject;
const p1 : string): Int64 of object;}

{_T24 = procedure (p0 : TObject;
const p1 : string;
const p2 : Int64) of object;}

{_T25 = function (p0 : TObject;
const p1 : string): IInterface of object;}

{_T26 = procedure (p0 : TObject;
const p1 : string;
const p2 : IInterface) of object;}

_T27 = function (p0 : TObject;
const p1 : string): Pointer of object;

_T28 = procedure (p0 : TObject;
const p1 : string;
const p2 : Pointer) of object;

_T29 = function (p0 : TObject;
const p1 : string;
p2 : Boolean): Variant of object;

_T30 = _T20;

_T31 = procedure (p0 : TObject) of object;

{_T32 = function (p0 : PTypeInfo): PTypeData of object;}

{_T33 = function (p0 : PTypeInfo;
p1 : Integer): string of object;}

{_T34 = function (p0 : PTypeInfo;
const p1 : string): Integer of object;}

{_T36 = procedure (p0 : PTypeInfo;
p1 : PPropList) of object;}

{_T38 = procedure (p0 : PPropList;
p1 : Integer) of object;}

{_T40 = function (p0 : PPropInfo;
const p1 : string): Integer of object;}

{_T41 = function (p0 : PTypeInfo;
p1 : Integer): string of object;}

{_T42 = function (p0 : PTypeInfo;
const p1 : string): Integer of object;}

_T43 = function (const p0 : IDispatch): TObject of object;

function __TPropData__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPropData__Wrapper.setPropCount(const val : Word);
begin
TPropData(GetRecordPtr^).PropCount := val;
end;
function __TPropData__Wrapper.getPropCount : Word;
begin
result := TPropData(GetRecordPtr^).PropCount;
end;
function __TPropInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPropInfo__Wrapper.setIndex(const val : Integer);
begin
TPropInfo(GetRecordPtr^).Index := val;
end;
function __TPropInfo__Wrapper.getIndex : Integer;
begin
result := TPropInfo(GetRecordPtr^).Index;
end;
procedure __TPropInfo__Wrapper.setDefault(const val : Longint);
begin
TPropInfo(GetRecordPtr^).Default := val;
end;
function __TPropInfo__Wrapper.getDefault : Longint;
begin
result := TPropInfo(GetRecordPtr^).Default;
end;
procedure __TPropInfo__Wrapper.setNameIndex(const val : SmallInt);
begin
TPropInfo(GetRecordPtr^).NameIndex := val;
end;
function __TPropInfo__Wrapper.getNameIndex : SmallInt;
begin
result := TPropInfo(GetRecordPtr^).NameIndex;
end;
function __TTypeData__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTypeData__Wrapper.setOrdType(const val : TOrdType);
begin
TTypeData(GetRecordPtr^).OrdType := val;
end;
function __TTypeData__Wrapper.getOrdType : TOrdType;
begin
result := TTypeData(GetRecordPtr^).OrdType;
end;
procedure __TTypeData__Wrapper.setMinValue(const val : Longint);
begin
TTypeData(GetRecordPtr^).MinValue := val;
end;
function __TTypeData__Wrapper.getMinValue : Longint;
begin
result := TTypeData(GetRecordPtr^).MinValue;
end;
procedure __TTypeData__Wrapper.setMaxValue(const val : Longint);
begin
TTypeData(GetRecordPtr^).MaxValue := val;
end;
function __TTypeData__Wrapper.getMaxValue : Longint;
begin
result := TTypeData(GetRecordPtr^).MaxValue;
end;
procedure __TTypeData__Wrapper.setNameList(const val : ShortStringBase);
begin
TTypeData(GetRecordPtr^).NameList := val;
end;
function __TTypeData__Wrapper.getNameList : ShortStringBase;
begin
result := TTypeData(GetRecordPtr^).NameList;
end;
procedure __TTypeData__Wrapper.setEnumUnitName(const val : ShortStringBase);
begin
TTypeData(GetRecordPtr^).EnumUnitName := val;
end;
function __TTypeData__Wrapper.getEnumUnitName : ShortStringBase;
begin
result := TTypeData(GetRecordPtr^).EnumUnitName;
end;
procedure __TTypeData__Wrapper.setFloatType(const val : TFloatType);
begin
TTypeData(GetRecordPtr^).FloatType := val;
end;
function __TTypeData__Wrapper.getFloatType : TFloatType;
begin
result := TTypeData(GetRecordPtr^).FloatType;
end;
procedure __TTypeData__Wrapper.setMaxLength(const val : Byte);
begin
TTypeData(GetRecordPtr^).MaxLength := val;
end;
function __TTypeData__Wrapper.getMaxLength : Byte;
begin
result := TTypeData(GetRecordPtr^).MaxLength;
end;
procedure __TTypeData__Wrapper.setPropCount(const val : SmallInt);
begin
TTypeData(GetRecordPtr^).PropCount := val;
end;
function __TTypeData__Wrapper.getPropCount : SmallInt;
begin
result := TTypeData(GetRecordPtr^).PropCount;
end;
procedure __TTypeData__Wrapper.setUnitName(const val : ShortStringBase);
begin
TTypeData(GetRecordPtr^).UnitName := val;
end;
function __TTypeData__Wrapper.getUnitName : ShortStringBase;
begin
result := TTypeData(GetRecordPtr^).UnitName;
end;
procedure __TTypeData__Wrapper.setMethodKind(const val : TMethodKind);
begin
TTypeData(GetRecordPtr^).MethodKind := val;
end;
function __TTypeData__Wrapper.getMethodKind : TMethodKind;
begin
result := TTypeData(GetRecordPtr^).MethodKind;
end;
procedure __TTypeData__Wrapper.setParamCount(const val : Byte);
begin
TTypeData(GetRecordPtr^).ParamCount := val;
end;
function __TTypeData__Wrapper.getParamCount : Byte;
begin
result := TTypeData(GetRecordPtr^).ParamCount;
end;
procedure __TTypeData__Wrapper.setIntfUnit(const val : ShortStringBase);
begin
TTypeData(GetRecordPtr^).IntfUnit := val;
end;
function __TTypeData__Wrapper.getIntfUnit : ShortStringBase;
begin
result := TTypeData(GetRecordPtr^).IntfUnit;
end;
procedure __TTypeData__Wrapper.setelSize(const val : Longint);
begin
TTypeData(GetRecordPtr^).elSize := val;
end;
function __TTypeData__Wrapper.getelSize : Longint;
begin
result := TTypeData(GetRecordPtr^).elSize;
end;
procedure __TTypeData__Wrapper.setvarType(const val : Integer);
begin
TTypeData(GetRecordPtr^).varType := val;
end;
function __TTypeData__Wrapper.getvarType : Integer;
begin
result := TTypeData(GetRecordPtr^).varType;
end;
procedure __TTypeData__Wrapper.setDynUnitName(const val : ShortStringBase);
begin
TTypeData(GetRecordPtr^).DynUnitName := val;
end;
function __TTypeData__Wrapper.getDynUnitName : ShortStringBase;
begin
result := TTypeData(GetRecordPtr^).DynUnitName;
end;
function __TTypeInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTypeInfo__Wrapper.setKind(const val : TTypeKind);
begin
TTypeInfo(GetRecordPtr^).Kind := val;
end;
function __TTypeInfo__Wrapper.getKind : TTypeKind;
begin
result := TTypeInfo(GetRecordPtr^).Kind;
end;
function _TPropData_ : IDispatch;
begin
  result := __TPropData__Wrapper.Create;
end;
function _TPropInfo_ : IDispatch;
begin
  result := __TPropInfo__Wrapper.Create;
end;
function _TTypeData_ : IDispatch;
begin
  result := __TTypeData__Wrapper.Create;
end;
function _TTypeInfo_ : IDispatch;
begin
  result := __TTypeInfo__Wrapper.Create;
end;
function __TMethod__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TVarData__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TVarData__Wrapper.setVType(const val : TVarType);
begin
TVarData(GetRecordPtr^).VType := val;
end;
function __TVarData__Wrapper.getVType : TVarType;
begin
result := TVarData(GetRecordPtr^).VType;
end;
procedure __TVarData__Wrapper.setReserved1(const val : Word);
begin
TVarData(GetRecordPtr^).Reserved1 := val;
end;
function __TVarData__Wrapper.getReserved1 : Word;
begin
result := TVarData(GetRecordPtr^).Reserved1;
end;
procedure __TVarData__Wrapper.setReserved2(const val : Word);
begin
TVarData(GetRecordPtr^).Reserved2 := val;
end;
function __TVarData__Wrapper.getReserved2 : Word;
begin
result := TVarData(GetRecordPtr^).Reserved2;
end;
procedure __TVarData__Wrapper.setReserved3(const val : Word);
begin
TVarData(GetRecordPtr^).Reserved3 := val;
end;
function __TVarData__Wrapper.getReserved3 : Word;
begin
result := TVarData(GetRecordPtr^).Reserved3;
end;
procedure __TVarData__Wrapper.setVSmallInt(const val : SmallInt);
begin
TVarData(GetRecordPtr^).VSmallInt := val;
end;
function __TVarData__Wrapper.getVSmallInt : SmallInt;
begin
result := TVarData(GetRecordPtr^).VSmallInt;
end;
procedure __TVarData__Wrapper.setVInteger(const val : Integer);
begin
TVarData(GetRecordPtr^).VInteger := val;
end;
function __TVarData__Wrapper.getVInteger : Integer;
begin
result := TVarData(GetRecordPtr^).VInteger;
end;
procedure __TVarData__Wrapper.setVSingle(const val : Single);
begin
TVarData(GetRecordPtr^).VSingle := val;
end;
function __TVarData__Wrapper.getVSingle : Single;
begin
result := TVarData(GetRecordPtr^).VSingle;
end;
procedure __TVarData__Wrapper.setVDouble(const val : Double);
begin
TVarData(GetRecordPtr^).VDouble := val;
end;
function __TVarData__Wrapper.getVDouble : Double;
begin
result := TVarData(GetRecordPtr^).VDouble;
end;
procedure __TVarData__Wrapper.setVCurrency(const val : Currency);
begin
TVarData(GetRecordPtr^).VCurrency := val;
end;
function __TVarData__Wrapper.getVCurrency : Currency;
begin
result := TVarData(GetRecordPtr^).VCurrency;
end;
procedure __TVarData__Wrapper.setVBoolean(const val : WordBool);
begin
TVarData(GetRecordPtr^).VBoolean := val;
end;
function __TVarData__Wrapper.getVBoolean : WordBool;
begin
result := TVarData(GetRecordPtr^).VBoolean;
end;
procedure __TVarData__Wrapper.setVShortInt(const val : Shortint);
begin
TVarData(GetRecordPtr^).VShortInt := val;
end;
function __TVarData__Wrapper.getVShortInt : Shortint;
begin
result := TVarData(GetRecordPtr^).VShortInt;
end;
procedure __TVarData__Wrapper.setVByte(const val : Byte);
begin
TVarData(GetRecordPtr^).VByte := val;
end;
function __TVarData__Wrapper.getVByte : Byte;
begin
result := TVarData(GetRecordPtr^).VByte;
end;
procedure __TVarData__Wrapper.setVWord(const val : Word);
begin
TVarData(GetRecordPtr^).VWord := val;
end;
function __TVarData__Wrapper.getVWord : Word;
begin
result := TVarData(GetRecordPtr^).VWord;
end;
procedure __TVarData__Wrapper.setVLongWord(const val : LongWord);
begin
TVarData(GetRecordPtr^).VLongWord := val;
end;
function __TVarData__Wrapper.getVLongWord : LongWord;
begin
result := TVarData(GetRecordPtr^).VLongWord;
end;
function ____GetSetProp__Wrapper(p0 : TObject;
const p1 : string;
p2 : Boolean): string;
begin
result := GetSetProp(p0,p1,p2);
end;

function ____GetMethodProp__Wrapper(p0 : TObject;
const p1 : string): IDispatch;
var
__result : TMethod;
__wrapper : __TMethod__Wrapper;
begin
__result := GetMethodProp(p0,p1);
__wrapper := __TMethod__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

procedure ____SetMethodProp__Wrapper(p0 : TObject;
const p1 : string;
const p2 : IDispatch);
var
__p2 : ^TMethod;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
SetMethodProp(p0,p1,__p2^);
end;

function ____GetPropValue__Wrapper(p0 : TObject;
const p1 : string;
p2 : Boolean): Variant;
begin
result := GetPropValue(p0,p1,p2);
end;

function __TPublishableVariantType__GetInstance__Wrapper(__Instance : TPublishableVariantType;
const p0 : IDispatch): TObject;
var
__p0 : ^TVarData;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := __TPublishableVariantType__(__Instance).GetInstance(__p0^);
end;


type __TMethod__Wrapper__ = class(__TMethod__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMethod__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMethodToVariant(var R : TMethod) : OleVariant;
var
__rw : __TMethod__Wrapper__;
begin
__rw := __TMethod__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMethod(const V : OleVariant) : TMethod;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMethod((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPropData__Wrapper__ = class(__TPropData__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPropData__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPropDataToVariant(var R : TPropData) : OleVariant;
var
__rw : __TPropData__Wrapper__;
begin
__rw := __TPropData__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPropData(const V : OleVariant) : TPropData;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPropData((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPropInfo__Wrapper__ = class(__TPropInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPropInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPropInfoToVariant(var R : TPropInfo) : OleVariant;
var
__rw : __TPropInfo__Wrapper__;
begin
__rw := __TPropInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPropInfo(const V : OleVariant) : TPropInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPropInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTypeData__Wrapper__ = class(__TTypeData__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTypeData__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTypeDataToVariant(var R : TTypeData) : OleVariant;
var
__rw : __TTypeData__Wrapper__;
begin
__rw := __TTypeData__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTypeData(const V : OleVariant) : TTypeData;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTypeData((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTypeInfo__Wrapper__ = class(__TTypeInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTypeInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTypeInfoToVariant(var R : TTypeInfo) : OleVariant;
var
__rw : __TTypeInfo__Wrapper__;
begin
__rw := __TTypeInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTypeInfo(const V : OleVariant) : TTypeInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTypeInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TVarData__Wrapper__ = class(__TVarData__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TVarData__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTVarDataToVariant(var R : TVarData) : OleVariant;
var
__rw : __TVarData__Wrapper__;
begin
__rw := __TVarData__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTVarData(const V : OleVariant) : TVarData;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TVarData((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

function __DC__GetTypInfo__DotSep(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TypInfo.DotSep;
end;

procedure __DC__SetTypInfo__DotSep(Instance : TObject; Params : PVariantArgList);
begin
TypInfo.DotSep:=OleVariant(Params^[0]);
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('DotSep',__DC__GetTypInfo__DotSep,__DC__SetTypInfo__DotSep));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..50] of string = (
'tkUnknown'
,'tkInteger'
,'tkChar'
,'tkEnumeration'
,'tkFloat'
,'tkString'
,'tkSet'
,'tkClass'
,'tkMethod'
,'tkWChar'
,'tkLString'
,'tkWString'
,'tkVariant'
,'tkArray'
,'tkRecord'
,'tkInterface'
,'tkInt64'
,'tkDynArray'
,'otSByte'
,'otUByte'
,'otSWord'
,'otUWord'
,'otSLong'
,'otULong'
,'ftSingle'
,'ftDouble'
,'ftExtended'
,'ftComp'
,'ftCurr'
,'mkProcedure'
,'mkFunction'
,'mkConstructor'
,'mkDestructor'
,'mkClassProcedure'
,'mkClassFunction'
,'mkClassConstructor'
,'mkOperatorOverload'
,'mkSafeProcedure'
,'mkSafeFunction'
,'pfVar'
,'pfConst'
,'pfArray'
,'pfAddress'
,'pfReference'
,'pfOut'
,'ifHasGuid'
,'ifDispInterface'
,'ifDispatch'
,'tkAny'
,'tkMethods'
,'tkProperties'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,tkUnknown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,tkInteger));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,tkChar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,tkEnumeration));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,tkFloat));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,tkString));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,tkSet));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,tkClass));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,tkMethod));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,tkWChar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,tkLString));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,tkWString));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,tkVariant));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,tkArray));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,tkRecord));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,tkInterface));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,tkInt64));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,tkDynArray));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,otSByte));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,otUByte));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,otSWord));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,otUWord));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,otSLong));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,otULong));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,ftSingle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,ftDouble));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,ftExtended));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,ftComp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,ftCurr));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,mkProcedure));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,mkFunction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,mkConstructor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,mkDestructor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,mkClassProcedure));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,mkClassFunction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,mkClassConstructor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,mkOperatorOverload));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,mkSafeProcedure));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,mkSafeFunction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,pfVar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,pfConst));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,pfArray));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,pfAddress));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,pfReference));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,pfOut));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,ifHasGuid));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,ifDispInterface));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,ifDispatch));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,VarFromSet(tkAny, sizeof(tkAny))));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,VarFromSet(tkMethods, sizeof(tkMethods))));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,VarFromSet(tkProperties, sizeof(tkProperties))));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..2] of TClass = (
EPropertyConvertError,
EPropertyError,
TPublishableVariantType
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..29] of string = (
'TPropData'
,'TPropInfo'
,'TTypeData'
,'TTypeInfo'
,'PropType'
,'PropIsType'
,'IsStoredProp'
,'IsPublishedProp'
,'GetOrdProp'
,'SetOrdProp'
,'GetEnumProp'
,'SetEnumProp'
,'GetSetProp'
,'SetSetProp'
,'SetObjectProp'
,'GetStrProp'
,'SetStrProp'
,'GetWideStrProp'
,'SetWideStrProp'
,'GetFloatProp'
,'SetFloatProp'
,'GetVariantProp'
,'SetVariantProp'
,'GetMethodProp'
,'SetMethodProp'
,'GetDynArrayProp'
,'SetDynArrayProp'
,'GetPropValue'
,'SetPropValue'
,'FreeAndNilProperties'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TPropData_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_TPropInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_TTypeData_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(_TTypeInfo_)));
RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T0),[
TypeInfo(TObject),
TypeInfo(string),TypeInfo(TTypeKind)],Addr(PropType),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T1),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(TTypeKind),TypeInfo(Boolean)],Addr(PropIsType),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T2),[
TypeInfo(TObject),
TypeInfo(string),TypeInfo(Boolean)],Addr(IsStoredProp),cRegister);

RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T3),[
TypeInfo(TObject),
TypeInfo(string),TypeInfo(Boolean)],Addr(IsPublishedProp),cRegister);

RegisterProc(nil,MethodNames[8],mtProc,TypeInfo(_T4),[
TypeInfo(TObject),
TypeInfo(string),TypeInfo(Longint)],Addr(GetOrdProp),cRegister);

RegisterProc(nil,MethodNames[9],mtProc,TypeInfo(_T5),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(Longint)],Addr(SetOrdProp),cRegister);

RegisterProc(nil,MethodNames[10],mtProc,TypeInfo(_T6),[
TypeInfo(TObject),
TypeInfo(string),TypeInfo(string)],Addr(GetEnumProp),cRegister);

RegisterProc(nil,MethodNames[11],mtProc,TypeInfo(_T7),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(string)],Addr(SetEnumProp),cRegister);

RegisterProc(nil,MethodNames[12],mtProc,TypeInfo(_T8),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(Boolean),TypeInfo(string)],Addr(____GetSetProp__Wrapper),cRegister);

RegisterProc(nil,MethodNames[13],mtProc,TypeInfo(_T9),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(string)],Addr(SetSetProp),cRegister);

RegisterProc(nil,MethodNames[14],mtProc,TypeInfo(_T11),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(TObject)],Addr(SetObjectProp),cRegister);

RegisterProc(nil,MethodNames[15],mtProc,TypeInfo(_T13),[
TypeInfo(TObject),
TypeInfo(string),TypeInfo(string)],Addr(GetStrProp),cRegister);

RegisterProc(nil,MethodNames[16],mtProc,TypeInfo(_T14),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(string)],Addr(SetStrProp),cRegister);

RegisterProc(nil,MethodNames[17],mtProc,TypeInfo(_T15),[
TypeInfo(TObject),
TypeInfo(string),TypeInfo(WideString)],Addr(GetWideStrProp),cRegister);

RegisterProc(nil,MethodNames[18],mtProc,TypeInfo(_T16),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(WideString)],Addr(SetWideStrProp),cRegister);

RegisterProc(nil,MethodNames[19],mtProc,TypeInfo(_T17),[
TypeInfo(TObject),
TypeInfo(string),TypeInfo(Extended)],Addr(GetFloatProp),cRegister);

RegisterProc(nil,MethodNames[20],mtProc,TypeInfo(_T18),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(Extended)],Addr(SetFloatProp),cRegister);

RegisterProc(nil,MethodNames[21],mtProc,TypeInfo(_T19),[
TypeInfo(TObject),
TypeInfo(string),TypeInfo(Variant)],Addr(GetVariantProp),cRegister);

RegisterProc(nil,MethodNames[22],mtProc,TypeInfo(_T20),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(Variant)],Addr(SetVariantProp),cRegister);

RegisterProc(nil,MethodNames[23],mtProc,TypeInfo(_T21),[
TypeInfo(TObject),
TypeInfo(string),TypeInfo(IDispatch)],Addr(____GetMethodProp__Wrapper),cRegister);

RegisterProc(nil,MethodNames[24],mtProc,TypeInfo(_T22),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(IDispatch)],Addr(____SetMethodProp__Wrapper),cRegister);

RegisterProc(nil,MethodNames[25],mtProc,TypeInfo(_T27),[
TypeInfo(TObject),
TypeInfo(string),TypeInfoPointer],Addr(GetDynArrayProp),cRegister);

RegisterProc(nil,MethodNames[26],mtProc,TypeInfo(_T28),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfoPointer],Addr(SetDynArrayProp),cRegister);

RegisterProc(nil,MethodNames[27],mtProc,TypeInfo(_T29),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(Boolean),TypeInfo(Variant)],Addr(____GetPropValue__Wrapper),cRegister);

RegisterProc(nil,MethodNames[28],mtProc,TypeInfo(_T30),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(Variant)],Addr(SetPropValue),cRegister);

RegisterProc(nil,MethodNames[29],mtProc,TypeInfo(_T31),[
TypeInfo(TObject)],Addr(FreeAndNilProperties),cRegister);

//RegRegisterMethod(TPublishableVariantType,'GetInstance',TypeInfo(_T43),[TypeInfo(IDispatch),TypeInfo(TObject)], pointer(80));
RegRegisterMethod(TPublishableVariantType,'GetInstance',TypeInfo(_T43),[TypeInfo(IDispatch),TypeInfo(TObject)],  getVMTProcAddr('TPublishableVariantType','GetInstance',80));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'GetObjectPropClass',mtProc,TypeInfo(_T12),[
TypeInfo(TObject),
TypeInfo(string),TypeInfo(TClass)],Addr(GetObjectPropClass),cRegister)}

{RegisterProc(nil,'GetInt64Prop',mtProc,TypeInfo(_T23),[
TypeInfo(TObject),
TypeInfo(string),TypeInfo(Int64)],Addr(GetInt64Prop),cRegister)}

{RegisterProc(nil,'SetInt64Prop',mtProc,TypeInfo(_T24),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(Int64)],Addr(SetInt64Prop),cRegister)}

{RegisterProc(nil,'GetInterfaceProp',mtProc,TypeInfo(_T25),[
TypeInfo(TObject),
TypeInfo(string),TypeInfo(IInterface)],Addr(GetInterfaceProp),cRegister)}

{RegisterProc(nil,'SetInterfaceProp',mtProc,TypeInfo(_T26),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(IInterface)],Addr(SetInterfaceProp),cRegister)}

{RegisterProc(nil,'GetTypeData',mtProc,TypeInfo(_T32),[
TypeInfoPointer,TypeInfoPointer],Addr(GetTypeData),cRegister)}

{RegisterProc(nil,'GetEnumName',mtProc,TypeInfo(_T33),[
TypeInfoPointer,
TypeInfo(Integer),TypeInfo(string)],Addr(GetEnumName),cRegister)}

{RegisterProc(nil,'GetEnumValue',mtProc,TypeInfo(_T34),[
TypeInfoPointer,
TypeInfo(string),TypeInfo(Integer)],Addr(GetEnumValue),cRegister)}

{RegisterProc(nil,'GetPropInfos',mtProc,TypeInfo(_T36),[
TypeInfoPointer,
TypeInfoPointer],Addr(GetPropInfos),cRegister)}

{RegisterProc(nil,'SortPropList',mtProc,TypeInfo(_T38),[
TypeInfoPointer,
TypeInfo(Integer)],Addr(SortPropList),cRegister)}

{RegisterProc(nil,'StringToSet',mtProc,TypeInfo(_T40),[
TypeInfoPointer,
TypeInfo(string),TypeInfo(Integer)],Addr(StringToSet),cRegister)}

{RegisterProc(nil,'GetSetElementName',mtProc,TypeInfo(_T41),[
TypeInfoPointer,
TypeInfo(Integer),TypeInfo(string)],Addr(GetSetElementName),cRegister)}

{RegisterProc(nil,'GetSetElementValue',mtProc,TypeInfo(_T42),[
TypeInfoPointer,
TypeInfo(string),TypeInfo(Integer)],Addr(GetSetElementValue),cRegister)}

{RegisterEvent(TypeInfo(TPropInfoProc),[
TypeInfoPointer]);}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
