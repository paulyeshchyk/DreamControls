{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit dcsyntax_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  Types,
  activex,
  dcscript,
  Windows,
  Messages,
  Controls,
  Classes,
  Dialogs,
  Graphics,
  SysUtils,
  dcSystem,
  dcdreamLib,
  dcConsts,
  dcMemo,
  dcSyntax;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
function ConvertTSyntaxItemInfoToVariant(var R : TSyntaxItemInfo) : OleVariant;
function ConvertVariantToTSyntaxItemInfo(const V : OleVariant) : TSyntaxItemInfo;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TSyntaxItemInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TSyntaxItemInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setBlock(const val : TSyntaxBlock);
function getBlock : TSyntaxBlock;
property Block : TSyntaxBlock read getBlock write setBlock;
procedure setAttribute(const val : TAttrItem);
function getAttribute : TAttrItem;
property Attribute : TAttrItem read getAttribute write setAttribute;
procedure setItemType(const val : Integer);
function getItemType : Integer;
property ItemType : Integer read getItemType write setItemType;
procedure setItemSet(const val : TToken);
function getItemSet : TToken;
property ItemSet : TToken read getItemSet write setItemSet;
end;
type __TPoint__Wrapper = class(TDCRecordWrapper)
private
fR : TPoint;
public
function GetRecordPtr : pointer; override;
published
procedure setX(const val : Longint);
function getX : Longint;
property X : Longint read getX write setX;
procedure setY(const val : Longint);
function getY : Longint;
property Y : Longint read getY write setY;
end;
type
_T0 = function (p0 : TDCMemo;
const p1 : IDispatch): TSyntaxBlock of object;

_T1 = function (p0 : TDCMemo): TSyntaxBlock of object;

_T2 = function (p0 : TDCMemo;
const p1 : IDispatch): IDispatch of object;

_T3 = function (const p0 : string): TCharSet of object;

_T4 = function (const p0 : TCharSet): string of object;

_T5 = procedure (p0 : TBlockInfo;
p1 : Integer;
p2 : Integer) of object;

_T6 = procedure (p0 : TCollection;
p1 : TSyntaxParser) of object;

_T7 = function : Integer of object;

_T8 = function (p0 : Integer): TAttrItem of object;

_T9 = function (p0 : Integer): TFont of object;

_T10 = function : Boolean of object;

_T11 = _T10;

_T12 = _T10;

_T13 = _T10;

_T14 = _T10;

_T15 = _T10;

_T16 = _T10;

_T17 = procedure  of object;

_T18 = _T17;

_T19 = _T17;

_T20 = _T17;

_T21 = _T17;

_T22 = _T17;

_T23 = _T7;

_T24 = _T17;

_T25 = _T17;

_T26 = procedure (const p0 : string) of object;

_T27 = _T26;

_T28 = procedure (p0 : TStream) of object;

_T29 = _T28;

_T30 = _T26;

function __TSyntaxItemInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSyntaxItemInfo__Wrapper.setBlock(const val : TSyntaxBlock);
begin
TSyntaxItemInfo(GetRecordPtr^).Block := val;
end;
function __TSyntaxItemInfo__Wrapper.getBlock : TSyntaxBlock;
begin
result := TSyntaxItemInfo(GetRecordPtr^).Block;
end;
procedure __TSyntaxItemInfo__Wrapper.setAttribute(const val : TAttrItem);
begin
TSyntaxItemInfo(GetRecordPtr^).Attribute := val;
end;
function __TSyntaxItemInfo__Wrapper.getAttribute : TAttrItem;
begin
result := TSyntaxItemInfo(GetRecordPtr^).Attribute;
end;
procedure __TSyntaxItemInfo__Wrapper.setItemType(const val : Integer);
begin
TSyntaxItemInfo(GetRecordPtr^).ItemType := val;
end;
function __TSyntaxItemInfo__Wrapper.getItemType : Integer;
begin
result := TSyntaxItemInfo(GetRecordPtr^).ItemType;
end;
procedure __TSyntaxItemInfo__Wrapper.setItemSet(const val : TToken);
begin
TSyntaxItemInfo(GetRecordPtr^).ItemSet := val;
end;
function __TSyntaxItemInfo__Wrapper.getItemSet : TToken;
begin
result := TSyntaxItemInfo(GetRecordPtr^).ItemSet;
end;
function _TSyntaxItemInfo_ : IDispatch;
begin
  result := __TSyntaxItemInfo__Wrapper.Create;
end;
function __TPoint__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPoint__Wrapper.setX(const val : Longint);
begin
TPoint(GetRecordPtr^).X := val;
end;
function __TPoint__Wrapper.getX : Longint;
begin
result := TPoint(GetRecordPtr^).X;
end;
procedure __TPoint__Wrapper.setY(const val : Longint);
begin
TPoint(GetRecordPtr^).Y := val;
end;
function __TPoint__Wrapper.getY : Longint;
begin
result := TPoint(GetRecordPtr^).Y;
end;
function ____GetSyntaxBlockAt__Wrapper(p0 : TDCMemo;
const p1 : IDispatch): TSyntaxBlock;
var
__p1 : ^TPoint;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := GetSyntaxBlockAt(p0,__p1^);
end;

function ____GetItemInfoAt__Wrapper(p0 : TDCMemo;
const p1 : IDispatch): IDispatch;
var
__result : TSyntaxItemInfo;
__wrapper : __TSyntaxItemInfo__Wrapper;
__p1 : ^TPoint;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
__result := GetItemInfoAt(p0,__p1^);
__wrapper := __TSyntaxItemInfo__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;


type __TPoint__Wrapper__ = class(__TPoint__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPoint__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
var
__rw : __TPoint__Wrapper__;
begin
__rw := __TPoint__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPoint((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSyntaxItemInfo__Wrapper__ = class(__TSyntaxItemInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSyntaxItemInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSyntaxItemInfoToVariant(var R : TSyntaxItemInfo) : OleVariant;
var
__rw : __TSyntaxItemInfo__Wrapper__;
begin
__rw := __TSyntaxItemInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSyntaxItemInfo(const V : OleVariant) : TSyntaxItemInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSyntaxItemInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTBlockTokenList__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TBlockTokenList(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __DC__SetTBlockTokenList__Items(Instance : TObject; Params : PVariantArgList);
begin
TBlockTokenList(Instance).Items[OleVariant(Params^[1])]:=TBlockToken(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDelimitersList__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDelimitersList(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __DC__SetTDelimitersList__Items(Instance : TObject; Params : PVariantArgList);
begin
TDelimitersList(Instance).Items[OleVariant(Params^[1])]:=TDelimiters(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTFontList__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TFontList(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __DC__SetTFontList__Items(Instance : TObject; Params : PVariantArgList);
begin
TFontList(Instance).Items[OleVariant(Params^[1])]:=TAttrItem(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTKeywordSetList__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TKeywordSetList(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __DC__SetTKeywordSetList__Items(Instance : TObject; Params : PVariantArgList);
begin
TKeywordSetList(Instance).Items[OleVariant(Params^[1])]:=TKeywordSet(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTLineTokenList__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TLineTokenList(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __DC__SetTLineTokenList__Items(Instance : TObject; Params : PVariantArgList);
begin
TLineTokenList(Instance).Items[OleVariant(Params^[1])]:=TLineToken(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTSyntaxBlock__FirstIdentChars(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TCharSet;
begin
tmp := TSyntaxBlock(Instance).FirstIdentChars;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTSyntaxBlock__FirstIdentChars(Instance : TObject; Params : PVariantArgList);
var
  tmp : TCharSet;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TSyntaxBlock(Instance).FirstIdentChars:=tmp;
end;

function __DC__GetTSyntaxBlock__OtherIdentChars(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TCharSet;
begin
tmp := TSyntaxBlock(Instance).OtherIdentChars;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTSyntaxBlock__OtherIdentChars(Instance : TObject; Params : PVariantArgList);
var
  tmp : TCharSet;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TSyntaxBlock(Instance).OtherIdentChars:=tmp;
end;

function __DC__GetTSyntaxBlockList__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TSyntaxBlockList(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __DC__SetTSyntaxBlockList__Items(Instance : TObject; Params : PVariantArgList);
begin
TSyntaxBlockList(Instance).Items[OleVariant(Params^[1])]:=TSyntaxBlock(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTSyntaxScheme__Parser(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TSyntaxScheme(Instance).Parser);
end;

procedure __RegisterProps;
begin
RegisterIndexedProperty(TBlockTokenList,'Items',1,True,__DC__GetTBlockTokenList__Items,__DC__SetTBlockTokenList__Items);
RegisterIndexedProperty(TDelimitersList,'Items',1,True,__DC__GetTDelimitersList__Items,__DC__SetTDelimitersList__Items);
RegisterIndexedProperty(TFontList,'Items',1,True,__DC__GetTFontList__Items,__DC__SetTFontList__Items);
RegisterIndexedProperty(TKeywordSetList,'Items',1,True,__DC__GetTKeywordSetList__Items,__DC__SetTKeywordSetList__Items);
RegisterIndexedProperty(TLineTokenList,'Items',1,True,__DC__GetTLineTokenList__Items,__DC__SetTLineTokenList__Items);
RegisterProperty(TSyntaxBlock,'FirstIdentChars',__DC__GetTSyntaxBlock__FirstIdentChars,__DC__SetTSyntaxBlock__FirstIdentChars);
RegisterProperty(TSyntaxBlock,'OtherIdentChars',__DC__GetTSyntaxBlock__OtherIdentChars,__DC__SetTSyntaxBlock__OtherIdentChars);
RegisterIndexedProperty(TSyntaxBlockList,'Items',1,True,__DC__GetTSyntaxBlockList__Items,__DC__SetTSyntaxBlockList__Items);
RegisterProperty(TSyntaxScheme,'Parser',__DC__GetTSyntaxScheme__Parser,nil);
end;

const __ConstNames0 : array[0..28] of string = (
'CurrentSchemeVersion'
,'sptText'
,'sptCommentSL'
,'sptCommentML'
,'sptLineDirective'
,'sptCommentFL'
,'sptStringSL'
,'sptStringML'
,'sptIntNumber'
,'sptFloatNumber'
,'sptHexNumber'
,'sptIdentifier'
,'sptKeyword'
,'sptSymbol'
,'spsNormal'
,'spsCommentML'
,'spsStringSL'
,'spsStringML'
,'spsLineDirective'
,'cSyFirstIdentChars'
,'cSyOtherIdentChars'
,'cSyHexDigits'
,'cSySymbolChars'
,'DefaultFontName'
,'DefaultFontSize'
,'DefaultFontColor'
,'DefaultBackColor'
,'DefaultBlockName'
,'DefaultGlobalAttrID'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,CurrentSchemeVersion));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,sptText));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,sptCommentSL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,sptCommentML));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,sptLineDirective));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,sptCommentFL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,sptStringSL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,sptStringML));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,sptIntNumber));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,sptFloatNumber));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,sptHexNumber));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,sptIdentifier));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,sptKeyword));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,sptSymbol));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,spsNormal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,spsCommentML));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,spsStringSL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,spsStringML));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,spsLineDirective));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,VarFromSet(cSyFirstIdentChars, sizeof(cSyFirstIdentChars))));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,VarFromSet(cSyOtherIdentChars, sizeof(cSyOtherIdentChars))));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,VarFromSet(cSyHexDigits, sizeof(cSyHexDigits))));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,VarFromSet(cSySymbolChars, sizeof(cSySymbolChars))));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,DefaultFontName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,DefaultFontSize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,DefaultFontColor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,DefaultBackColor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,DefaultBlockName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,DefaultGlobalAttrID));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..16] of TClass = (
TAttrItem,
TBlockInfo,
TBlockToken,
TBlockTokenList,
TDefAttrItem,
TDelimiters,
TDelimitersList,
TFontList,
TKeywordSet,
TKeywordSetList,
TLineToken,
TLineTokenList,
TSyntaxBlock,
TSyntaxBlockList,
TSyntaxParser,
TSyntaxScheme,
TToken
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..5] of string = (
'TSyntaxItemInfo'
,'GetSyntaxBlockAt'
,'GetSyntaxBlockAtCursor'
,'GetItemInfoAt'
,'StringToCharSet'
,'CharSetToString'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TSyntaxItemInfo_)));
RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T0),[
TypeInfo(TDCMemo),
TypeInfo(IDispatch),TypeInfo(TSyntaxBlock)],Addr(____GetSyntaxBlockAt__Wrapper),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T1),[
TypeInfo(TDCMemo),TypeInfo(TSyntaxBlock)],Addr(GetSyntaxBlockAtCursor),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T2),[
TypeInfo(TDCMemo),
TypeInfo(IDispatch),TypeInfo(IDispatch)],Addr(____GetItemInfoAt__Wrapper),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T3),[
TypeInfo(string),TypeInfo(TCharSet)],Addr(StringToCharSet),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T4),[
TypeInfo(TCharSet),TypeInfo(string)],Addr(CharSetToString),cRegister);

RegisterProc(TBlockInfo,'Create',mtConstructor,TypeInfo(_T5),[
TypeInfo(TBlockInfo),
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TBlockInfo.Create),cRegister);

RegisterProc(TDefAttrItem,'Create2',mtConstructor,TypeInfo(_T6),[
TypeInfo(TCollection),
TypeInfo(TSyntaxParser)],Addr(TDefAttrItem.Create2),cRegister);

RegRegisterMethod(TFontList,'GetUniqueID',TypeInfo(_T7),[TypeInfo(Integer)],Addr(TFontList.GetUniqueID));

RegRegisterMethod(TFontList,'GetItemByID',TypeInfo(_T8),[
TypeInfo(Integer),TypeInfo(TAttrItem)],Addr(TFontList.GetItemByID));

RegRegisterMethod(TFontList,'GetFontByID',TypeInfo(_T9),[
TypeInfo(Integer),TypeInfo(TFont)],Addr(TFontList.GetFontByID));

//RegRegisterMethod(TSyntaxParser,'ParseComment',TypeInfo(_T10),[TypeInfo(Boolean)], pointer(72));
RegRegisterMethod(TSyntaxParser,'ParseComment',TypeInfo(_T10),[TypeInfo(Boolean)],  getVMTProcAddr('TSyntaxParser','ParseComment',72));


//RegRegisterMethod(TSyntaxParser,'ParseLineDirective',TypeInfo(_T11),[TypeInfo(Boolean)], pointer(76));
RegRegisterMethod(TSyntaxParser,'ParseLineDirective',TypeInfo(_T11),[TypeInfo(Boolean)],  getVMTProcAddr('TSyntaxParser','ParseLineDirective',76));


//RegRegisterMethod(TSyntaxParser,'ParseString',TypeInfo(_T12),[TypeInfo(Boolean)], pointer(80));
RegRegisterMethod(TSyntaxParser,'ParseString',TypeInfo(_T12),[TypeInfo(Boolean)],  getVMTProcAddr('TSyntaxParser','ParseString',80));


//RegRegisterMethod(TSyntaxParser,'ParseIntNumber',TypeInfo(_T13),[TypeInfo(Boolean)], pointer(84));
RegRegisterMethod(TSyntaxParser,'ParseIntNumber',TypeInfo(_T13),[TypeInfo(Boolean)],  getVMTProcAddr('TSyntaxParser','ParseIntNumber',84));


//RegRegisterMethod(TSyntaxParser,'ParseFloatNumber',TypeInfo(_T14),[TypeInfo(Boolean)], pointer(88));
RegRegisterMethod(TSyntaxParser,'ParseFloatNumber',TypeInfo(_T14),[TypeInfo(Boolean)],  getVMTProcAddr('TSyntaxParser','ParseFloatNumber',88));


//RegRegisterMethod(TSyntaxParser,'ParsePSNumber',TypeInfo(_T15),[TypeInfo(Boolean)], pointer(92));
RegRegisterMethod(TSyntaxParser,'ParsePSNumber',TypeInfo(_T15),[TypeInfo(Boolean)],  getVMTProcAddr('TSyntaxParser','ParsePSNumber',92));


//RegRegisterMethod(TSyntaxParser,'ParseIdentifiers',TypeInfo(_T16),[TypeInfo(Boolean)], pointer(96));
RegRegisterMethod(TSyntaxParser,'ParseIdentifiers',TypeInfo(_T16),[TypeInfo(Boolean)],  getVMTProcAddr('TSyntaxParser','ParseIdentifiers',96));


//RegRegisterMethod(TSyntaxParser,'InitParser',TypeInfo(_T17),NoParams, pointer(100));
RegRegisterMethod(TSyntaxParser,'InitParser',TypeInfo(_T17),NoParams,  getVMTProcAddr('TSyntaxParser','InitParser',100));


//RegRegisterMethod(TSyntaxParser,'ParserChanged',TypeInfo(_T18),NoParams, pointer(104));
RegRegisterMethod(TSyntaxParser,'ParserChanged',TypeInfo(_T18),NoParams,  getVMTProcAddr('TSyntaxParser','ParserChanged',104));


RegRegisterMethod(TSyntaxParser,'BeginUpdate',TypeInfo(_T19),NoParams,Addr(TSyntaxParser.BeginUpdate));

RegRegisterMethod(TSyntaxParser,'EndUpdate',TypeInfo(_T20),NoParams,Addr(TSyntaxParser.EndUpdate));

//RegRegisterMethod(TSyntaxScheme,'UpdateSchemeVersion',TypeInfo(_T21),NoParams, pointer(12));
RegRegisterMethod(TSyntaxScheme,'UpdateSchemeVersion',TypeInfo(_T21),NoParams,  getVMTProcAddr('TSyntaxScheme','UpdateSchemeVersion',12));


//RegRegisterMethod(TSyntaxScheme,'InitScheme',TypeInfo(_T22),NoParams, pointer(16));
RegRegisterMethod(TSyntaxScheme,'InitScheme',TypeInfo(_T22),NoParams,  getVMTProcAddr('TSyntaxScheme','InitScheme',16));


RegRegisterMethod(TSyntaxScheme,'GetUniqueBlockID',TypeInfo(_T23),[TypeInfo(Integer)],Addr(TSyntaxScheme.GetUniqueBlockID));

RegisterProc(TSyntaxScheme,'Create',mtConstructor,TypeInfo(_T24),NoParams,Addr(TSyntaxScheme.Create),cRegister);

RegRegisterMethod(TSyntaxScheme,'SchemeChanged',TypeInfo(_T25),NoParams,Addr(TSyntaxScheme.SchemeChanged));

RegRegisterMethod(TSyntaxScheme,'LoadFromFile',TypeInfo(_T26),[
TypeInfo(string)],Addr(TSyntaxScheme.LoadFromFile));

RegRegisterMethod(TSyntaxScheme,'SaveToFile',TypeInfo(_T27),[
TypeInfo(string)],Addr(TSyntaxScheme.SaveToFile));

RegRegisterMethod(TSyntaxScheme,'LoadFromStream',TypeInfo(_T28),[
TypeInfo(TStream)],Addr(TSyntaxScheme.LoadFromStream));

RegRegisterMethod(TSyntaxScheme,'SaveToStream',TypeInfo(_T29),[
TypeInfo(TStream)],Addr(TSyntaxScheme.SaveToStream));

RegRegisterMethod(TSyntaxScheme,'LoadFromResource',TypeInfo(_T30),[
TypeInfo(string)],Addr(TSyntaxScheme.LoadFromResource));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterEvent(TypeInfo(TCompareStrProc),[
TypeInfoPChar,TypeInfo(Boolean)]);}

RegisterEvent(TypeInfo(TGetTokenEvent),[
TypeInfo(TObject),
TypeInfo(Integer),
TypeInfo(string)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
