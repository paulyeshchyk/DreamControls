{*******************************************************}
{                                                       }
{ Import unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

Unit DateUtils_d2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Types,
  TimeSpan,
  DateUtils;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = function (const AValue : TDateTime): TDateTime of object;

_T1 = _T0;

_T2 = function (const AValue : TDateTime): Boolean of object;

_T3 = _T2;

_T4 = _T2;

_T5 = function (const AYear : Word;
const AMonth : Word;
const ADay : Word): Boolean of object;

_T6 = function (const AHour : Word;
const AMinute : Word;
const ASecond : Word;
const AMilliSecond : Word): Boolean of object;

_T7 = function (const AYear : Word;
const AMonth : Word;
const ADay : Word;
const AHour : Word;
const AMinute : Word;
const ASecond : Word;
const AMilliSecond : Word): Boolean of object;

_T8 = function (const AYear : Word;
const ADayOfYear : Word): Boolean of object;

_T9 = function (const AYear : Word;
const AWeekOfYear : Word;
const ADayOfWeek : Word): Boolean of object;

_T10 = function (const AYear : Word;
const AMonth : Word;
const AWeekOfMonth : Word;
const ADayOfWeek : Word): Boolean of object;

_T11 = function (const AValue : TDateTime): Word of object;

_T12 = function (const AYear : Word): Word of object;

_T13 = _T11;

_T14 = _T12;

_T15 = _T11;

_T16 = function (const AYear : Word;
const AMonth : Word): Word of object;

_T17 = function : TDateTime of object;

_T18 = _T17;

_T19 = _T17;

_T20 = _T2;

_T21 = function (const AValue : TDateTime;
const ABasis : TDateTime): Boolean of object;

_T22 = _T11;

_T23 = _T11;

_T24 = _T11;

_T25 = _T11;

_T26 = _T11;

_T27 = _T11;

_T28 = _T11;

_T29 = _T11;

_T30 = _T0;

_T31 = _T0;

_T32 = function (const AYear : Word): TDateTime of object;

_T33 = _T32;

_T34 = _T0;

_T35 = _T0;

_T36 = function (const AYear : Word;
const AMonth : Word): TDateTime of object;

_T37 = _T36;

_T38 = _T0;

_T39 = _T0;

_T40 = function (const AYear : Word;
const AWeekOfYear : Word;
const ADayOfWeek : Word): TDateTime of object;

_T41 = _T40;

_T42 = _T0;

_T43 = _T0;

_T44 = function (const AYear : Word;
const AMonth : Word;
const ADay : Word): TDateTime of object;

_T45 = _T44;

_T46 = _T11;

_T47 = _T11;

_T48 = _T11;

_T49 = _T11;

_T50 = function (const AValue : TDateTime): Cardinal of object;

_T51 = _T50;

_T52 = function (const AValue : TDateTime): Int64 of object;

_T53 = _T11;

_T54 = _T11;

_T55 = _T11;

_T56 = _T11;

_T57 = _T50;

_T58 = _T50;

_T59 = _T11;

_T60 = _T11;

_T61 = _T11;

_T62 = _T50;

_T63 = _T50;

_T64 = _T11;

_T65 = _T11;

_T66 = _T50;

_T67 = _T50;

_T68 = _T11;

_T69 = _T11;

_T70 = _T50;

_T71 = _T11;

_T72 = _T50;

_T73 = _T11;

_T74 = function (const ANow : TDateTime;
const AThen : TDateTime;
const AYears : Integer): Boolean of object;

_T75 = function (const ANow : TDateTime;
const AThen : TDateTime;
const AMonths : Integer): Boolean of object;

_T76 = function (const ANow : TDateTime;
const AThen : TDateTime;
const AWeeks : Integer): Boolean of object;

_T77 = function (const ANow : TDateTime;
const AThen : TDateTime;
const ADays : Integer): Boolean of object;

_T78 = function (const ANow : TDateTime;
const AThen : TDateTime;
const AHours : Int64): Boolean of object;

_T79 = function (const ANow : TDateTime;
const AThen : TDateTime;
const AMinutes : Int64): Boolean of object;

_T80 = function (const ANow : TDateTime;
const AThen : TDateTime;
const ASeconds : Int64): Boolean of object;

_T81 = function (const ANow : TDateTime;
const AThen : TDateTime;
const AMilliSeconds : Int64): Boolean of object;

_T82 = function (const ANow : TDateTime;
const AThen : TDateTime): Integer of object;

_T83 = _T82;

_T84 = _T82;

_T85 = _T82;

_T86 = function (const ANow : TDateTime;
const AThen : TDateTime): Int64 of object;

_T87 = function (const ANow : TDateTime;
const AThen : TDateTime): Int64 of object;

_T88 = function (const ANow : TDateTime;
const AThen : TDateTime): Integer of object;

_T89 = function (const ANow : TDateTime;
const AThen : TDateTime): Int64 of object;

_T90 = function (ADateTime : TDateTime;
AStartDateTime : TDateTime;
AEndDateTime : TDateTime;
aInclusive : Boolean): Boolean of object;

_T91 = function (ADate : TDate;
AStartDate : TDate;
AEndDate : TDate;
aInclusive : Boolean): Boolean of object;

_T92 = function (ATime : TTime;
AStartTime : TTime;
AEndTime : TTime;
aInclusive : Boolean): Boolean of object;

_T93 = function (const ANow : TDateTime;
const AThen : TDateTime): Double of object;

_T94 = _T93;

_T95 = _T93;

_T96 = _T93;

_T97 = _T93;

_T98 = _T93;

_T99 = _T93;

_T100 = _T93;

_T101 = function (const AValue : TDateTime;
const ANumberOfYears : Integer): TDateTime of object;

_T102 = function (const AValue : TDateTime;
const ANumberOfWeeks : Integer): TDateTime of object;

_T103 = function (const AValue : TDateTime;
const ANumberOfDays : Integer): TDateTime of object;

_T108 = function (const AYear : Word;
const AMonth : Word;
const ADay : Word;
const AHour : Word;
const AMinute : Word;
const ASecond : Word;
const AMilliSecond : Word): TDateTime of object;

_T109 = procedure (const AValue : TDateTime;
var AYear : Word;
var AMonth : Word;
var ADay : Word;
var AHour : Word;
var AMinute : Word;
var ASecond : Word;
var AMilliSecond : Word) of object;

_T110 = _T40;

_T111 = procedure (const AValue : TDateTime;
var AYear : Word;
var AWeekOfYear : Word;
var ADayOfWeek : Word) of object;

_T112 = function (const AYear : Word;
const ADayOfYear : Word): TDateTime of object;

_T113 = procedure (const AValue : TDateTime;
var AYear : Word;
var ADayOfYear : Word) of object;

_T114 = function (const AYear : Word;
const AMonth : Word;
const AWeekOfMonth : Word;
const ADayOfWeek : Word): TDateTime of object;

_T115 = procedure (const AValue : TDateTime;
var AYear : Word;
var AMonth : Word;
var AWeekOfMonth : Word;
var ADayOfWeek : Word) of object;

_T116 = function (const AYear : Word;
const AMonth : Word;
const ADay : Word;
const AHour : Word;
const AMinute : Word;
const ASecond : Word;
const AMilliSecond : Word;
var AValue : TDateTime): Boolean of object;

_T117 = function (const AYear : Word;
const ADayOfYear : Word;
var AValue : TDateTime): Boolean of object;

_T118 = function (const AYear : Word;
const AMonth : Word;
const AWeekOfMonth : Word;
const ADayOfWeek : Word;
var AValue : TDateTime): Boolean of object;

_T119 = function (const AValue : TDateTime;
const AYear : Word): TDateTime of object;

_T120 = function (const AValue : TDateTime;
const AMonth : Word): TDateTime of object;

_T121 = function (const AValue : TDateTime;
const ADay : Word): TDateTime of object;

_T122 = function (const AValue : TDateTime;
const AHour : Word): TDateTime of object;

_T123 = function (const AValue : TDateTime;
const AMinute : Word): TDateTime of object;

_T124 = function (const AValue : TDateTime;
const ASecond : Word): TDateTime of object;

_T125 = function (const AValue : TDateTime;
const AMilliSecond : Word): TDateTime of object;

_T126 = function (const AValue : TDateTime;
const AYear : Word;
const AMonth : Word;
const ADay : Word): TDateTime of object;

_T127 = function (const AValue : TDateTime;
const AHour : Word;
const AMinute : Word;
const ASecond : Word;
const AMilliSecond : Word): TDateTime of object;

_T128 = function (const AValue : TDateTime;
const AYear : Word;
const AMonth : Word;
const ADay : Word;
const AHour : Word;
const AMinute : Word;
const ASecond : Word;
const AMilliSecond : Word): TDateTime of object;

_T129 = function (const AValue : TDateTime;
const AYear : Word;
const AMonth : Word;
const ADay : Word;
const AHour : Word;
const AMinute : Word;
const ASecond : Word;
const AMilliSecond : Word;
var AResult : TDateTime): Boolean of object;

_T130 = function (const A : TDateTime;
const B : TDateTime): TValueRelationship of object;

_T131 = function (const A : TDateTime;
const B : TDateTime): Boolean of object;

_T132 = _T130;

_T133 = _T131;

_T134 = _T130;

_T135 = _T131;

_T136 = _T11;

_T137 = procedure (const AValue : TDateTime;
var AYear : Word;
var AMonth : Word;
var ANthDayOfWeek : Word;
var ADayOfWeek : Word) of object;

_T138 = function (const AYear : Word;
const AMonth : Word;
const ANthDayOfWeek : Word;
const ADayOfWeek : Word): TDateTime of object;

_T139 = function (const AYear : Word;
const AMonth : Word;
const ANthDayOfWeek : Word;
const ADayOfWeek : Word;
var AValue : TDateTime): Boolean of object;

_T140 = procedure (const AYear : Word;
const AMonth : Word;
const ADay : Word;
const AHour : Word;
const AMinute : Word;
const ASecond : Word;
const AMilliSecond : Word;
const ABaseDate : TDateTime) of object;

_T141 = procedure (const AYear : Word;
const AWeekOfYear : Word;
const ADayOfWeek : Word) of object;

_T142 = procedure (const AYear : Word;
const ADayOfYear : Word) of object;

_T143 = procedure (const AYear : Word;
const AMonth : Word;
const AWeekOfMonth : Word;
const ADayOfWeek : Word) of object;

_T144 = procedure (const AYear : Word;
const AMonth : Word;
const ANthDayOfWeek : Word;
const ADayOfWeek : Word) of object;

_T145 = function (const AValue : TDateTime): Double of object;

_T146 = function (const AValue : Double): TDateTime of object;

_T147 = function (const AValue : Double;
var ADateTime : TDateTime): Boolean of object;

_T148 = _T145;

_T149 = _T146;

_T150 = _T147;

_T153 = function (const AISODate : string;
AReturnUTC : Boolean): TDateTime of object;

_T154 = function (const AISODate : string;
var Value : TDateTime;
AReturnUTC : Boolean): Boolean of object;

_T155 = function (const ADate : TDateTime;
AInputIsUTC : Boolean): string of object;

{_T156 = procedure (const ADateTime : TDateTime;
out AOffset : Int64;
out ADstSave : Int64;
out AType : TLocalTimeType) of object;}

_T157 = function (const ADateTime : TDateTime;
const ForceDaylight : Boolean): string of object;

_T158 = function : string of object;

_T159 = function (const ADateTime : TDateTime;
const ForceDaylight : Boolean): TTimeSpan of object;

_T160 = function (const ADateTime : TDateTime;
const ForceDaylight : Boolean): TDateTime of object;

_T161 = function (const ADateTime : TDateTime): TDateTime of object;

_T162 = _T157;

_T163 = _T157;

_T164 = function (const ADateTime : TDateTime): TLocalTimeType of object;

_T165 = function (const ADateTime : TDateTime;
const ForceDaylight : Boolean): Boolean of object;

_T166 = function (const ADateTime : TDateTime): Boolean of object;

_T167 = _T166;

_T168 = _T165;

function ____StartOfAWeek__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
2:
begin
result := StartOfAWeek(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
3:
begin
result := StartOfAWeek(OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function ____EndOfAWeek__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
2:
begin
result := EndOfAWeek(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
3:
begin
result := EndOfAWeek(OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function ____DateTimeInRange__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
3:
begin
result := DateTimeInRange(OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
4:
begin
result := DateTimeInRange(OleVariant(pargs^[3]),OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function ____DateInRange__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
3:
begin
  result := DateInRange(TDate(varValueToDouble(OleVariant(pargs^[2]))),TDate(varValueToDouble(OleVariant(pargs^[1]))),TDate(varValueToDouble(OleVariant(pargs^[0]))));
end;
4:
begin
  result := DateInRange(TDate(varValueToDouble(OleVariant(pargs^[3]))),TDate(varValueToDouble(OleVariant(pargs^[2]))),TDate(varValueToDouble(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
end;
end
end;

function ____TimeInRange__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
3:
begin
result := TimeInRange(TTime(varValueToDouble(OleVariant(pargs^[2]))),TTime(varValueToDouble(OleVariant(pargs^[1]))),TTime(varValueToDouble(OleVariant(pargs^[0]))));
end;
4:
begin
result := TimeInRange(TTime(varValueToDouble(OleVariant(pargs^[3]))),TTime(varValueToDouble(OleVariant(pargs^[2]))),TTime(varValueToDouble(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
end;
end
end;

function ____IncYear__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := IncYear(OleVariant(pargs^[0]));
end;
2:
begin
result := IncYear(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function ____IncWeek__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := IncWeek(OleVariant(pargs^[0]));
end;
2:
begin
result := IncWeek(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function ____IncDay__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := IncDay(OleVariant(pargs^[0]));
end;
2:
begin
result := IncDay(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function ____EncodeDateWeek__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
2:
begin
result := EncodeDateWeek(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
3:
begin
result := EncodeDateWeek(OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure ____InvalidDateTimeError__Wrapper(cArgs : integer; pArgs : PArgList);
begin
case cArgs of
7:
begin
InvalidDateTimeError(OleVariant(pargs^[6]),OleVariant(pargs^[5]),OleVariant(pargs^[4]),OleVariant(pargs^[3]),OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
8:
begin
InvalidDateTimeError(OleVariant(pargs^[7]),OleVariant(pargs^[6]),OleVariant(pargs^[5]),OleVariant(pargs^[4]),OleVariant(pargs^[3]),OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function ____ISO8601ToDate__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := ISO8601ToDate(OleVariant(pargs^[0]));
end;
2:
begin
result := ISO8601ToDate(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function ____TryISO8601ToDate__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
2:
begin
//result := TryISO8601ToDate(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
3:
begin
//result := TryISO8601ToDate(OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function ____DateToISO8601__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := DateToISO8601(OleVariant(pargs^[0]));
end;
2:
begin
result := DateToISO8601(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function __TTimeZone__GetUtcOffset__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
//result := VarFromObject(TTimeZone(__Instance).GetUtcOffset(OleVariant(pargs^[0])));
end;
2:
begin
//result := VarFromObject(TTimeZone(__Instance).GetUtcOffset(OleVariant(pargs^[1]),OleVariant(pargs^[0])));
end;
end
end;

function __TTimeZone__ToUniversalTime__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := TTimeZone(__Instance).ToUniversalTime(OleVariant(pargs^[0]));
end;
2:
begin
result := TTimeZone(__Instance).ToUniversalTime(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function __TTimeZone__GetDisplayName__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := TTimeZone(__Instance).GetDisplayName(OleVariant(pargs^[0]));
end;
2:
begin
result := TTimeZone(__Instance).GetDisplayName(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function __TTimeZone__GetAbbreviation__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := TTimeZone(__Instance).GetAbbreviation(OleVariant(pargs^[0]));
end;
2:
begin
result := TTimeZone(__Instance).GetAbbreviation(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function __TTimeZone__IsStandardTime__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := TTimeZone(__Instance).IsStandardTime(OleVariant(pargs^[0]));
end;
2:
begin
result := TTimeZone(__Instance).IsStandardTime(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function __MilliSecondsBetween(const ANow, AThen: TDateTime): Int64;
begin
  Result := dateUtils.MilliSecondsBetween(ANow, AThen);
end;

function __SecondsBetween(const ANow, AThen: TDateTime): Int64;
begin
  Result := dateUtils.SecondsBetween(ANow, AThen);
end;

function __MinutesBetween(const ANow, AThen: TDateTime): Int64;
begin
  Result := dateUtils.MinutesBetween(ANow, AThen);
end;

function __HoursBetween(const ANow, AThen: TDateTime): Integer;
begin
  Result := dateUtils.HoursBetween(ANow, AThen);
end;

function __WithinPastMilliSeconds(const ANow, AThen: TDateTime;
  const AMilliSeconds: Int64): Boolean;
begin
  result:=dateUtils.WithinPastMilliSeconds(aNow, aThen, AMilliSeconds);
end;


function __WithinPastSeconds(const ANow, AThen: TDateTime;
  const ASeconds: Int64): Boolean;
begin
  result:=dateUtils.WithinPastSeconds(aNow, aThen, ASeconds);
end;

function __WithinPastMinutes(const ANow, AThen: TDateTime;
  const AMinutes: Int64): Boolean;
begin
  result:=dateUtils.WithinPastSeconds(aNow, aThen, AMinutes);
end;

function __WithinPastHours(const ANow, AThen: TDateTime;
  const AHours: Int64): Boolean;
begin
  result:=dateUtils.WithinPastHours(aNow, aThen, AHours);
end;

function __TTimeZone__IsDaylightTime__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := TTimeZone(__Instance).IsDaylightTime(OleVariant(pargs^[0]));
end;
2:
begin
result := TTimeZone(__Instance).IsDaylightTime(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function __DC__GetTTimeZone__ID(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TTimeZone(Instance).ID;
end;

function __DC__GetTTimeZone__DisplayName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TTimeZone(Instance).DisplayName;
end;

function __DC__GetTTimeZone__Abbreviation(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TTimeZone(Instance).Abbreviation;
end;

function __DC__GetTTimeZone__UtcOffset(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
//result := VarFromObject(TTimeZone(Instance).UtcOffset);
end;

function __DC__GetTTimeZone__Local(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TTimeZone(Instance).Local);
end;

procedure __RegisterProps;
begin
RegisterProperty(TTimeZone,'ID',__DC__GetTTimeZone__ID,nil);
RegisterProperty(TTimeZone,'DisplayName',__DC__GetTTimeZone__DisplayName,nil);
RegisterProperty(TTimeZone,'Abbreviation',__DC__GetTTimeZone__Abbreviation,nil);
RegisterProperty(TTimeZone,'UtcOffset',__DC__GetTTimeZone__UtcOffset,nil);
RegisterProperty(TTimeZone,'Local',__DC__GetTTimeZone__Local,nil);
end;

function __DC__GetDateUtils__ApproxDaysPerMonth(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := DateUtils.ApproxDaysPerMonth;
end;

procedure __DC__SetDateUtils__ApproxDaysPerMonth(Instance : TObject; Params : PVariantArgList);
begin
DateUtils.ApproxDaysPerMonth:=OleVariant(Params^[0]);
end;

function __DC__GetDateUtils__ApproxDaysPerYear(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := DateUtils.ApproxDaysPerYear;
end;

procedure __DC__SetDateUtils__ApproxDaysPerYear(Instance : TObject; Params : PVariantArgList);
begin
DateUtils.ApproxDaysPerYear:=OleVariant(Params^[0]);
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('ApproxDaysPerMonth',__DC__GetDateUtils__ApproxDaysPerMonth,__DC__SetDateUtils__ApproxDaysPerMonth));
__RegisteredVars.Add(RegisterVar('ApproxDaysPerYear',__DC__GetDateUtils__ApproxDaysPerYear,__DC__SetDateUtils__ApproxDaysPerYear));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..35] of string = (
'DaysPerWeek'
,'WeeksPerFortnight'
,'MonthsPerYear'
,'YearsPerDecade'
,'YearsPerCentury'
,'YearsPerMillennium'
,'DayMonday'
,'DayTuesday'
,'DayWednesday'
,'DayThursday'
,'DayFriday'
,'DaySaturday'
,'DaySunday'
,'MonthJanuary'
,'MonthFebruary'
,'MonthMarch'
,'MonthApril'
,'MonthMay'
,'MonthJune'
,'MonthJuly'
,'MonthAugust'
,'MonthSeptember'
,'MonthOctober'
,'MonthNovember'
,'MonthDecember'
,'OneHour'
,'OneMinute'
,'OneSecond'
,'OneMillisecond'
,'EpochAsJulianDate'
,'EpochAsUnixDate'
,'RecodeLeaveFieldAsIs'
,'lttStandard'
,'lttDaylight'
,'lttAmbiguous'
,'lttInvalid'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,DaysPerWeek));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,WeeksPerFortnight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,MonthsPerYear));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,YearsPerDecade));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,YearsPerCentury));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,YearsPerMillennium));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,DayMonday));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,DayTuesday));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,DayWednesday));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,DayThursday));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,DayFriday));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,DaySaturday));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,DaySunday));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,MonthJanuary));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,MonthFebruary));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,MonthMarch));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,MonthApril));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,MonthMay));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,MonthJune));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,MonthJuly));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,MonthAugust));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,MonthSeptember));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,MonthOctober));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,MonthNovember));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,MonthDecember));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,OneHour));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,OneMinute));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,OneSecond));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,OneMillisecond));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,EpochAsJulianDate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,EpochAsUnixDate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,RecodeLeaveFieldAsIs));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,lttStandard));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,lttDaylight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,lttAmbiguous));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,lttInvalid));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..2] of TClass = (
EDateTimeException,
ELocalTimeInvalid,
TTimeZone
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..140] of string = (
'DateOf'
,'TimeOf'
,'IsInLeapYear'
,'IsPM'
,'IsAM'
,'IsValidDate'
,'IsValidTime'
,'IsValidDateTime'
,'IsValidDateDay'
,'IsValidDateWeek'
,'IsValidDateMonthWeek'
,'WeeksInYear'
,'WeeksInAYear'
,'DaysInYear'
,'DaysInAYear'
,'DaysInMonth'
,'DaysInAMonth'
,'Today'
,'Yesterday'
,'Tomorrow'
,'IsToday'
,'IsSameDay'
,'YearOf'
,'MonthOf'
,'WeekOf'
,'DayOf'
,'HourOf'
,'MinuteOf'
,'SecondOf'
,'MilliSecondOf'
,'StartOfTheYear'
,'EndOfTheYear'
,'StartOfAYear'
,'EndOfAYear'
,'StartOfTheMonth'
,'EndOfTheMonth'
,'StartOfAMonth'
,'EndOfAMonth'
,'StartOfTheWeek'
,'EndOfTheWeek'
,'StartOfAWeek'
,'EndOfAWeek'
,'StartOfTheDay'
,'EndOfTheDay'
,'StartOfADay'
,'EndOfADay'
,'MonthOfTheYear'
,'WeekOfTheYear'
,'DayOfTheYear'
,'HourOfTheYear'
,'MinuteOfTheYear'
,'SecondOfTheYear'
,'WeekOfTheMonth'
,'DayOfTheMonth'
,'HourOfTheMonth'
,'MinuteOfTheMonth'
,'SecondOfTheMonth'
,'MilliSecondOfTheMonth'
,'DayOfTheWeek'
,'HourOfTheWeek'
,'MinuteOfTheWeek'
,'SecondOfTheWeek'
,'MilliSecondOfTheWeek'
,'HourOfTheDay'
,'MinuteOfTheDay'
,'SecondOfTheDay'
,'MilliSecondOfTheDay'
,'MinuteOfTheHour'
,'SecondOfTheHour'
,'MilliSecondOfTheHour'
,'SecondOfTheMinute'
,'MilliSecondOfTheMinute'
,'MilliSecondOfTheSecond'
,'WithinPastYears'
,'WithinPastMonths'
,'WithinPastWeeks'
,'WithinPastDays'
,'YearsBetween'
,'MonthsBetween'
,'WeeksBetween'
,'DaysBetween'
,'DateTimeInRange'
,'DateInRange'
,'TimeInRange'
,'YearSpan'
,'MonthSpan'
,'WeekSpan'
,'DaySpan'
,'HourSpan'
,'MinuteSpan'
,'SecondSpan'
,'MilliSecondSpan'
,'IncYear'
,'IncWeek'
,'IncDay'
,'EncodeDateTime'
,'DecodeDateTime'
,'EncodeDateWeek'
,'DecodeDateWeek'
,'EncodeDateDay'
,'DecodeDateDay'
,'EncodeDateMonthWeek'
,'DecodeDateMonthWeek'
,'TryEncodeDateTime'
,'TryEncodeDateDay'
,'TryEncodeDateMonthWeek'
,'RecodeYear'
,'RecodeMonth'
,'RecodeDay'
,'RecodeHour'
,'RecodeMinute'
,'RecodeSecond'
,'RecodeMilliSecond'
,'RecodeDate'
,'RecodeTime'
,'RecodeDateTime'
,'TryRecodeDateTime'
,'CompareDateTime'
,'SameDateTime'
,'CompareDate'
,'SameDate'
,'CompareTime'
,'SameTime'
,'NthDayOfWeek'
,'DecodeDayOfWeekInMonth'
,'EncodeDayOfWeekInMonth'
,'TryEncodeDayOfWeekInMonth'
,'InvalidDateTimeError'
,'InvalidDateWeekError'
,'InvalidDateDayError'
,'InvalidDateMonthWeekError'
,'InvalidDayOfWeekInMonthError'
,'DateTimeToJulianDate'
,'JulianDateToDateTime'
,'TryJulianDateToDateTime'
,'DateTimeToModifiedJulianDate'
,'ModifiedJulianDateToDateTime'
,'TryModifiedJulianDateToDateTime'
,'ISO8601ToDate'
,'TryISO8601ToDate'
,'DateToISO8601'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(TDateTime),TypeInfo(TDateTime)],Addr(DateOf),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(TDateTime),TypeInfo(TDateTime)],Addr(TimeOf),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T2),[
TypeInfo(TDateTime),TypeInfo(Boolean)],Addr(IsInLeapYear),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T3),[
TypeInfo(TDateTime),TypeInfo(Boolean)],Addr(IsPM),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T4),[
TypeInfo(TDateTime),TypeInfo(Boolean)],Addr(IsAM),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T5),[
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),TypeInfo(Boolean)],Addr(IsValidDate),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T6),[
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),TypeInfo(Boolean)],Addr(IsValidTime),cRegister);

RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T7),[
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),TypeInfo(Boolean)],Addr(IsValidDateTime),cRegister);

RegisterProc(nil,MethodNames[8],mtProc,TypeInfo(_T8),[
TypeInfo(Word),
TypeInfo(Word),TypeInfo(Boolean)],Addr(IsValidDateDay),cRegister);

RegisterProc(nil,MethodNames[9],mtProc,TypeInfo(_T9),[
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),TypeInfo(Boolean)],Addr(IsValidDateWeek),cRegister);

RegisterProc(nil,MethodNames[10],mtProc,TypeInfo(_T10),[
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),TypeInfo(Boolean)],Addr(IsValidDateMonthWeek),cRegister);

RegisterProc(nil,MethodNames[11],mtProc,TypeInfo(_T11),[
TypeInfo(TDateTime),TypeInfo(Word)],Addr(WeeksInYear),cRegister);

RegisterProc(nil,MethodNames[12],mtProc,TypeInfo(_T12),[
TypeInfo(Word),TypeInfo(Word)],Addr(WeeksInAYear),cRegister);

RegisterProc(nil,MethodNames[13],mtProc,TypeInfo(_T13),[
TypeInfo(TDateTime),TypeInfo(Word)],Addr(DaysInYear),cRegister);

RegisterProc(nil,MethodNames[14],mtProc,TypeInfo(_T14),[
TypeInfo(Word),TypeInfo(Word)],Addr(DaysInAYear),cRegister);

RegisterProc(nil,MethodNames[15],mtProc,TypeInfo(_T15),[
TypeInfo(TDateTime),TypeInfo(Word)],Addr(DaysInMonth),cRegister);

RegisterProc(nil,MethodNames[16],mtProc,TypeInfo(_T16),[
TypeInfo(Word),
TypeInfo(Word),TypeInfo(Word)],Addr(DaysInAMonth),cRegister);

RegisterProc(nil,MethodNames[17],mtProc,TypeInfo(_T17),[TypeInfo(TDateTime)],Addr(Today),cRegister);

RegisterProc(nil,MethodNames[18],mtProc,TypeInfo(_T18),[TypeInfo(TDateTime)],Addr(Yesterday),cRegister);

RegisterProc(nil,MethodNames[19],mtProc,TypeInfo(_T19),[TypeInfo(TDateTime)],Addr(Tomorrow),cRegister);

RegisterProc(nil,MethodNames[20],mtProc,TypeInfo(_T20),[
TypeInfo(TDateTime),TypeInfo(Boolean)],Addr(IsToday),cRegister);

RegisterProc(nil,MethodNames[21],mtProc,TypeInfo(_T21),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),TypeInfo(Boolean)],Addr(IsSameDay),cRegister);

RegisterProc(nil,MethodNames[22],mtProc,TypeInfo(_T22),[
TypeInfo(TDateTime),TypeInfo(Word)],Addr(YearOf),cRegister);

RegisterProc(nil,MethodNames[23],mtProc,TypeInfo(_T23),[
TypeInfo(TDateTime),TypeInfo(Word)],Addr(MonthOf),cRegister);

RegisterProc(nil,MethodNames[24],mtProc,TypeInfo(_T24),[
TypeInfo(TDateTime),TypeInfo(Word)],Addr(WeekOf),cRegister);

RegisterProc(nil,MethodNames[25],mtProc,TypeInfo(_T25),[
TypeInfo(TDateTime),TypeInfo(Word)],Addr(DayOf),cRegister);

RegisterProc(nil,MethodNames[26],mtProc,TypeInfo(_T26),[
TypeInfo(TDateTime),TypeInfo(Word)],Addr(HourOf),cRegister);

RegisterProc(nil,MethodNames[27],mtProc,TypeInfo(_T27),[
TypeInfo(TDateTime),TypeInfo(Word)],Addr(MinuteOf),cRegister);

RegisterProc(nil,MethodNames[28],mtProc,TypeInfo(_T28),[
TypeInfo(TDateTime),TypeInfo(Word)],Addr(SecondOf),cRegister);

RegisterProc(nil,MethodNames[29],mtProc,TypeInfo(_T29),[
TypeInfo(TDateTime),TypeInfo(Word)],Addr(MilliSecondOf),cRegister);

RegisterProc(nil,MethodNames[30],mtProc,TypeInfo(_T30),[
TypeInfo(TDateTime),TypeInfo(TDateTime)],Addr(StartOfTheYear),cRegister);

RegisterProc(nil,MethodNames[31],mtProc,TypeInfo(_T31),[
TypeInfo(TDateTime),TypeInfo(TDateTime)],Addr(EndOfTheYear),cRegister);

RegisterProc(nil,MethodNames[32],mtProc,TypeInfo(_T32),[
TypeInfo(Word),TypeInfo(TDateTime)],Addr(StartOfAYear),cRegister);

RegisterProc(nil,MethodNames[33],mtProc,TypeInfo(_T33),[
TypeInfo(Word),TypeInfo(TDateTime)],Addr(EndOfAYear),cRegister);

RegisterProc(nil,MethodNames[34],mtProc,TypeInfo(_T34),[
TypeInfo(TDateTime),TypeInfo(TDateTime)],Addr(StartOfTheMonth),cRegister);

RegisterProc(nil,MethodNames[35],mtProc,TypeInfo(_T35),[
TypeInfo(TDateTime),TypeInfo(TDateTime)],Addr(EndOfTheMonth),cRegister);

RegisterProc(nil,MethodNames[36],mtProc,TypeInfo(_T36),[
TypeInfo(Word),
TypeInfo(Word),TypeInfo(TDateTime)],Addr(StartOfAMonth),cRegister);

RegisterProc(nil,MethodNames[37],mtProc,TypeInfo(_T37),[
TypeInfo(Word),
TypeInfo(Word),TypeInfo(TDateTime)],Addr(EndOfAMonth),cRegister);

RegisterProc(nil,MethodNames[38],mtProc,TypeInfo(_T38),[
TypeInfo(TDateTime),TypeInfo(TDateTime)],Addr(StartOfTheWeek),cRegister);

RegisterProc(nil,MethodNames[39],mtProc,TypeInfo(_T39),[
TypeInfo(TDateTime),TypeInfo(TDateTime)],Addr(EndOfTheWeek),cRegister);

RegisterProc(nil,MethodNames[40],mtScriptProc,TypeInfo(_T40),[
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),TypeInfo(TDateTime)],Addr(____StartOfAWeek__Wrapper),cRegister);

RegisterProc(nil,MethodNames[41],mtScriptProc,TypeInfo(_T41),[
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),TypeInfo(TDateTime)],Addr(____EndOfAWeek__Wrapper),cRegister);

RegisterProc(nil,MethodNames[42],mtProc,TypeInfo(_T42),[
TypeInfo(TDateTime),TypeInfo(TDateTime)],Addr(StartOfTheDay),cRegister);

RegisterProc(nil,MethodNames[43],mtProc,TypeInfo(_T43),[
TypeInfo(TDateTime),TypeInfo(TDateTime)],Addr(EndOfTheDay),cRegister);

RegisterProc(nil,MethodNames[44],mtProc,TypeInfo(_T44),[
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),TypeInfo(TDateTime)],Addr(StartOfADay),cRegister);

RegisterProc(nil,MethodNames[45],mtProc,TypeInfo(_T45),[
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),TypeInfo(TDateTime)],Addr(EndOfADay),cRegister);

RegisterProc(nil,MethodNames[46],mtProc,TypeInfo(_T46),[
TypeInfo(TDateTime),TypeInfo(Word)],Addr(MonthOfTheYear),cRegister);

RegisterProc(nil,MethodNames[47],mtProc,TypeInfo(_T47),[
TypeInfo(TDateTime),TypeInfo(Word)],Addr(WeekOfTheYear),cRegister);

RegisterProc(nil,MethodNames[48],mtProc,TypeInfo(_T48),[
TypeInfo(TDateTime),TypeInfo(Word)],Addr(DayOfTheYear),cRegister);

RegisterProc(nil,MethodNames[49],mtProc,TypeInfo(_T49),[
TypeInfo(TDateTime),TypeInfo(Word)],Addr(HourOfTheYear),cRegister);

RegisterProc(nil,MethodNames[50],mtProc,TypeInfo(_T50),[
TypeInfo(TDateTime),TypeInfo(Cardinal)],Addr(MinuteOfTheYear),cRegister);

RegisterProc(nil,MethodNames[51],mtProc,TypeInfo(_T51),[
TypeInfo(TDateTime),TypeInfo(Cardinal)],Addr(SecondOfTheYear),cRegister);

RegisterProc(nil,MethodNames[52],mtProc,TypeInfo(_T53),[
TypeInfo(TDateTime),TypeInfo(Word)],Addr(WeekOfTheMonth),cRegister);

RegisterProc(nil,MethodNames[53],mtProc,TypeInfo(_T54),[
TypeInfo(TDateTime),TypeInfo(Word)],Addr(DayOfTheMonth),cRegister);

RegisterProc(nil,MethodNames[54],mtProc,TypeInfo(_T55),[
TypeInfo(TDateTime),TypeInfo(Word)],Addr(HourOfTheMonth),cRegister);

RegisterProc(nil,MethodNames[55],mtProc,TypeInfo(_T56),[
TypeInfo(TDateTime),TypeInfo(Word)],Addr(MinuteOfTheMonth),cRegister);

RegisterProc(nil,MethodNames[56],mtProc,TypeInfo(_T57),[
TypeInfo(TDateTime),TypeInfo(Cardinal)],Addr(SecondOfTheMonth),cRegister);

RegisterProc(nil,MethodNames[57],mtProc,TypeInfo(_T58),[
TypeInfo(TDateTime),TypeInfo(Cardinal)],Addr(MilliSecondOfTheMonth),cRegister);

RegisterProc(nil,MethodNames[58],mtProc,TypeInfo(_T59),[
TypeInfo(TDateTime),TypeInfo(Word)],Addr(DayOfTheWeek),cRegister);

RegisterProc(nil,MethodNames[59],mtProc,TypeInfo(_T60),[
TypeInfo(TDateTime),TypeInfo(Word)],Addr(HourOfTheWeek),cRegister);

RegisterProc(nil,MethodNames[60],mtProc,TypeInfo(_T61),[
TypeInfo(TDateTime),TypeInfo(Word)],Addr(MinuteOfTheWeek),cRegister);

RegisterProc(nil,MethodNames[61],mtProc,TypeInfo(_T62),[
TypeInfo(TDateTime),TypeInfo(Cardinal)],Addr(SecondOfTheWeek),cRegister);

RegisterProc(nil,MethodNames[62],mtProc,TypeInfo(_T63),[
TypeInfo(TDateTime),TypeInfo(Cardinal)],Addr(MilliSecondOfTheWeek),cRegister);

RegisterProc(nil,MethodNames[63],mtProc,TypeInfo(_T64),[
TypeInfo(TDateTime),TypeInfo(Word)],Addr(HourOfTheDay),cRegister);

RegisterProc(nil,MethodNames[64],mtProc,TypeInfo(_T65),[
TypeInfo(TDateTime),TypeInfo(Word)],Addr(MinuteOfTheDay),cRegister);

RegisterProc(nil,MethodNames[65],mtProc,TypeInfo(_T66),[
TypeInfo(TDateTime),TypeInfo(Cardinal)],Addr(SecondOfTheDay),cRegister);

RegisterProc(nil,MethodNames[66],mtProc,TypeInfo(_T67),[
TypeInfo(TDateTime),TypeInfo(Cardinal)],Addr(MilliSecondOfTheDay),cRegister);

RegisterProc(nil,MethodNames[67],mtProc,TypeInfo(_T68),[
TypeInfo(TDateTime),TypeInfo(Word)],Addr(MinuteOfTheHour),cRegister);

RegisterProc(nil,MethodNames[68],mtProc,TypeInfo(_T69),[
TypeInfo(TDateTime),TypeInfo(Word)],Addr(SecondOfTheHour),cRegister);

RegisterProc(nil,MethodNames[69],mtProc,TypeInfo(_T70),[
TypeInfo(TDateTime),TypeInfo(Cardinal)],Addr(MilliSecondOfTheHour),cRegister);

RegisterProc(nil,MethodNames[70],mtProc,TypeInfo(_T71),[
TypeInfo(TDateTime),TypeInfo(Word)],Addr(SecondOfTheMinute),cRegister);

RegisterProc(nil,MethodNames[71],mtProc,TypeInfo(_T72),[
TypeInfo(TDateTime),TypeInfo(Cardinal)],Addr(MilliSecondOfTheMinute),cRegister);

RegisterProc(nil,MethodNames[72],mtProc,TypeInfo(_T73),[
TypeInfo(TDateTime),TypeInfo(Word)],Addr(MilliSecondOfTheSecond),cRegister);

RegisterProc(nil,MethodNames[73],mtProc,TypeInfo(_T74),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),
TypeInfo(Integer),TypeInfo(Boolean)],Addr(WithinPastYears),cRegister);

RegisterProc(nil,MethodNames[74],mtProc,TypeInfo(_T75),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),
TypeInfo(Integer),TypeInfo(Boolean)],Addr(WithinPastMonths),cRegister);

RegisterProc(nil,MethodNames[75],mtProc,TypeInfo(_T76),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),
TypeInfo(Integer),TypeInfo(Boolean)],Addr(WithinPastWeeks),cRegister);

RegisterProc(nil,MethodNames[76],mtProc,TypeInfo(_T77),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),
TypeInfo(Integer),TypeInfo(Boolean)],Addr(WithinPastDays),cRegister);

RegisterProc(nil,MethodNames[77],mtProc,TypeInfo(_T82),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),TypeInfo(Integer)],Addr(YearsBetween),cRegister);

RegisterProc(nil,MethodNames[78],mtProc,TypeInfo(_T83),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),TypeInfo(Integer)],Addr(MonthsBetween),cRegister);

RegisterProc(nil,MethodNames[79],mtProc,TypeInfo(_T84),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),TypeInfo(Integer)],Addr(WeeksBetween),cRegister);

RegisterProc(nil,MethodNames[80],mtProc,TypeInfo(_T85),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),TypeInfo(Integer)],Addr(DaysBetween),cRegister);

RegisterProc(nil,MethodNames[81],mtScriptProc,TypeInfo(_T90),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),
TypeInfo(TDateTime),
TypeInfo(Boolean),TypeInfo(Boolean)],Addr(____DateTimeInRange__Wrapper),cRegister);

RegisterProc(nil,MethodNames[82],mtScriptProc,TypeInfo(_T91),[
TypeInfo(TDate),
TypeInfo(TDate),
TypeInfo(TDate),
TypeInfo(Boolean),TypeInfo(Boolean)],Addr(____DateInRange__Wrapper),cRegister);

RegisterProc(nil,MethodNames[83],mtScriptProc,TypeInfo(_T92),[
TypeInfo(TTime),
TypeInfo(TTime),
TypeInfo(TTime),
TypeInfo(Boolean),TypeInfo(Boolean)],Addr(____TimeInRange__Wrapper),cRegister);

RegisterProc(nil,MethodNames[84],mtProc,TypeInfo(_T93),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),TypeInfo(Double)],Addr(YearSpan),cRegister);

RegisterProc(nil,MethodNames[85],mtProc,TypeInfo(_T94),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),TypeInfo(Double)],Addr(MonthSpan),cRegister);

RegisterProc(nil,MethodNames[86],mtProc,TypeInfo(_T95),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),TypeInfo(Double)],Addr(WeekSpan),cRegister);

RegisterProc(nil,MethodNames[87],mtProc,TypeInfo(_T96),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),TypeInfo(Double)],Addr(DaySpan),cRegister);

RegisterProc(nil,MethodNames[88],mtProc,TypeInfo(_T97),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),TypeInfo(Double)],Addr(HourSpan),cRegister);

RegisterProc(nil,MethodNames[89],mtProc,TypeInfo(_T98),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),TypeInfo(Double)],Addr(MinuteSpan),cRegister);

RegisterProc(nil,MethodNames[90],mtProc,TypeInfo(_T99),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),TypeInfo(Double)],Addr(SecondSpan),cRegister);

RegisterProc(nil,MethodNames[91],mtProc,TypeInfo(_T100),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),TypeInfo(Double)],Addr(MilliSecondSpan),cRegister);

RegisterProc(nil,MethodNames[92],mtScriptProc,TypeInfo(_T101),[
TypeInfo(TDateTime),
TypeInfo(Integer),TypeInfo(TDateTime)],Addr(____IncYear__Wrapper),cRegister);

RegisterProc(nil,MethodNames[93],mtScriptProc,TypeInfo(_T102),[
TypeInfo(TDateTime),
TypeInfo(Integer),TypeInfo(TDateTime)],Addr(____IncWeek__Wrapper),cRegister);

RegisterProc(nil,MethodNames[94],mtScriptProc,TypeInfo(_T103),[
TypeInfo(TDateTime),
TypeInfo(Integer),TypeInfo(TDateTime)],Addr(____IncDay__Wrapper),cRegister);

RegisterProc(nil,MethodNames[95],mtProc,TypeInfo(_T108),[
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),TypeInfo(TDateTime)],Addr(EncodeDateTime),cRegister);

RegisterProc(nil,MethodNames[96],mtProc,TypeInfo(_T109),[
TypeInfo(TDateTime),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word)],Addr(DecodeDateTime),cRegister);

RegisterProc(nil,MethodNames[97],mtScriptProc,TypeInfo(_T110),[
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),TypeInfo(TDateTime)],Addr(____EncodeDateWeek__Wrapper),cRegister);

RegisterProc(nil,MethodNames[98],mtProc,TypeInfo(_T111),[
TypeInfo(TDateTime),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word)],Addr(DecodeDateWeek),cRegister);

RegisterProc(nil,MethodNames[99],mtProc,TypeInfo(_T112),[
TypeInfo(Word),
TypeInfo(Word),TypeInfo(TDateTime)],Addr(EncodeDateDay),cRegister);

RegisterProc(nil,MethodNames[100],mtProc,TypeInfo(_T113),[
TypeInfo(TDateTime),
TypeInfo(Word),
TypeInfo(Word)],Addr(DecodeDateDay),cRegister);

RegisterProc(nil,MethodNames[101],mtProc,TypeInfo(_T114),[
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),TypeInfo(TDateTime)],Addr(EncodeDateMonthWeek),cRegister);

RegisterProc(nil,MethodNames[102],mtProc,TypeInfo(_T115),[
TypeInfo(TDateTime),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word)],Addr(DecodeDateMonthWeek),cRegister);

RegisterProc(nil,MethodNames[103],mtProc,TypeInfo(_T116),[
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(TDateTime),TypeInfo(Boolean)],Addr(TryEncodeDateTime),cRegister);

RegisterProc(nil,MethodNames[104],mtProc,TypeInfo(_T117),[
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(TDateTime),TypeInfo(Boolean)],Addr(TryEncodeDateDay),cRegister);

RegisterProc(nil,MethodNames[105],mtProc,TypeInfo(_T118),[
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(TDateTime),TypeInfo(Boolean)],Addr(TryEncodeDateMonthWeek),cRegister);

RegisterProc(nil,MethodNames[106],mtProc,TypeInfo(_T119),[
TypeInfo(TDateTime),
TypeInfo(Word),TypeInfo(TDateTime)],Addr(RecodeYear),cRegister);

RegisterProc(nil,MethodNames[107],mtProc,TypeInfo(_T120),[
TypeInfo(TDateTime),
TypeInfo(Word),TypeInfo(TDateTime)],Addr(RecodeMonth),cRegister);

RegisterProc(nil,MethodNames[108],mtProc,TypeInfo(_T121),[
TypeInfo(TDateTime),
TypeInfo(Word),TypeInfo(TDateTime)],Addr(RecodeDay),cRegister);

RegisterProc(nil,MethodNames[109],mtProc,TypeInfo(_T122),[
TypeInfo(TDateTime),
TypeInfo(Word),TypeInfo(TDateTime)],Addr(RecodeHour),cRegister);

RegisterProc(nil,MethodNames[110],mtProc,TypeInfo(_T123),[
TypeInfo(TDateTime),
TypeInfo(Word),TypeInfo(TDateTime)],Addr(RecodeMinute),cRegister);

RegisterProc(nil,MethodNames[111],mtProc,TypeInfo(_T124),[
TypeInfo(TDateTime),
TypeInfo(Word),TypeInfo(TDateTime)],Addr(RecodeSecond),cRegister);

RegisterProc(nil,MethodNames[112],mtProc,TypeInfo(_T125),[
TypeInfo(TDateTime),
TypeInfo(Word),TypeInfo(TDateTime)],Addr(RecodeMilliSecond),cRegister);

RegisterProc(nil,MethodNames[113],mtProc,TypeInfo(_T126),[
TypeInfo(TDateTime),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),TypeInfo(TDateTime)],Addr(RecodeDate),cRegister);

RegisterProc(nil,MethodNames[114],mtProc,TypeInfo(_T127),[
TypeInfo(TDateTime),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),TypeInfo(TDateTime)],Addr(RecodeTime),cRegister);

RegisterProc(nil,MethodNames[115],mtProc,TypeInfo(_T128),[
TypeInfo(TDateTime),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),TypeInfo(TDateTime)],Addr(RecodeDateTime),cRegister);

RegisterProc(nil,MethodNames[116],mtProc,TypeInfo(_T129),[
TypeInfo(TDateTime),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(TDateTime),TypeInfo(Boolean)],Addr(TryRecodeDateTime),cRegister);

RegisterProc(nil,MethodNames[117],mtProc,TypeInfo(_T130),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),TypeInfo(TValueRelationship)],Addr(CompareDateTime),cRegister);

RegisterProc(nil,MethodNames[118],mtProc,TypeInfo(_T131),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),TypeInfo(Boolean)],Addr(SameDateTime),cRegister);

RegisterProc(nil,MethodNames[119],mtProc,TypeInfo(_T132),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),TypeInfo(TValueRelationship)],Addr(CompareDate),cRegister);

RegisterProc(nil,MethodNames[120],mtProc,TypeInfo(_T133),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),TypeInfo(Boolean)],Addr(SameDate),cRegister);

RegisterProc(nil,MethodNames[121],mtProc,TypeInfo(_T134),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),TypeInfo(TValueRelationship)],Addr(CompareTime),cRegister);

RegisterProc(nil,MethodNames[122],mtProc,TypeInfo(_T135),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),TypeInfo(Boolean)],Addr(SameTime),cRegister);

RegisterProc(nil,MethodNames[123],mtProc,TypeInfo(_T136),[
TypeInfo(TDateTime),TypeInfo(Word)],Addr(NthDayOfWeek),cRegister);

RegisterProc(nil,MethodNames[124],mtProc,TypeInfo(_T137),[
TypeInfo(TDateTime),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word)],Addr(DecodeDayOfWeekInMonth),cRegister);

RegisterProc(nil,MethodNames[125],mtProc,TypeInfo(_T138),[
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),TypeInfo(TDateTime)],Addr(EncodeDayOfWeekInMonth),cRegister);

RegisterProc(nil,MethodNames[126],mtProc,TypeInfo(_T139),[
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(TDateTime),TypeInfo(Boolean)],Addr(TryEncodeDayOfWeekInMonth),cRegister);

RegisterProc(nil,MethodNames[127],mtScriptProc,TypeInfo(_T140),[
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(TDateTime)],Addr(____InvalidDateTimeError__Wrapper),cRegister);

RegisterProc(nil,MethodNames[128],mtProc,TypeInfo(_T141),[
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word)],Addr(InvalidDateWeekError),cRegister);

RegisterProc(nil,MethodNames[129],mtProc,TypeInfo(_T142),[
TypeInfo(Word),
TypeInfo(Word)],Addr(InvalidDateDayError),cRegister);

RegisterProc(nil,MethodNames[130],mtProc,TypeInfo(_T143),[
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word)],Addr(InvalidDateMonthWeekError),cRegister);

RegisterProc(nil,MethodNames[131],mtProc,TypeInfo(_T144),[
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word)],Addr(InvalidDayOfWeekInMonthError),cRegister);

RegisterProc(nil,MethodNames[132],mtProc,TypeInfo(_T145),[
TypeInfo(TDateTime),TypeInfo(Double)],Addr(DateTimeToJulianDate),cRegister);

RegisterProc(nil,MethodNames[133],mtProc,TypeInfo(_T146),[
TypeInfo(Double),TypeInfo(TDateTime)],Addr(JulianDateToDateTime),cRegister);

RegisterProc(nil,MethodNames[134],mtProc,TypeInfo(_T147),[
TypeInfo(Double),
TypeInfo(TDateTime),TypeInfo(Boolean)],Addr(TryJulianDateToDateTime),cRegister);

RegisterProc(nil,MethodNames[135],mtProc,TypeInfo(_T148),[
TypeInfo(TDateTime),TypeInfo(Double)],Addr(DateTimeToModifiedJulianDate),cRegister);

RegisterProc(nil,MethodNames[136],mtProc,TypeInfo(_T149),[
TypeInfo(Double),TypeInfo(TDateTime)],Addr(ModifiedJulianDateToDateTime),cRegister);

RegisterProc(nil,MethodNames[137],mtProc,TypeInfo(_T150),[
TypeInfo(Double),
TypeInfo(TDateTime),TypeInfo(Boolean)],Addr(TryModifiedJulianDateToDateTime),cRegister);

RegisterProc(nil,MethodNames[138],mtScriptProc,TypeInfo(_T153),[
TypeInfo(string),
TypeInfo(Boolean),TypeInfo(TDateTime)],Addr(____ISO8601ToDate__Wrapper),cRegister);

RegisterProc(nil,MethodNames[139],mtScriptProc,TypeInfo(_T154),[
TypeInfo(string),
TypeInfo(TDateTime),
TypeInfo(Boolean),TypeInfo(Boolean)],Addr(____TryISO8601ToDate__Wrapper),cRegister);

RegisterProc(nil,MethodNames[140],mtScriptProc,TypeInfo(_T155),[
TypeInfo(TDateTime),
TypeInfo(Boolean),TypeInfo(string)],Addr(____DateToISO8601__Wrapper),cRegister);

//RegRegisterMethod(TTimeZone,'DoGetDisplayName',TypeInfo(_T157),[TypeInfo(TDateTime),TypeInfo(Boolean),TypeInfo(string)], pointer(4));
RegRegisterMethod(TTimeZone,'DoGetDisplayName',TypeInfo(_T157),[TypeInfo(TDateTime),TypeInfo(Boolean),TypeInfo(string)],  getVMTProcAddr('TTimeZone','DoGetDisplayName',4));


//RegRegisterMethod(TTimeZone,'DoGetID',TypeInfo(_T158),[TypeInfo(string)], pointer(8));
RegRegisterMethod(TTimeZone,'DoGetID',TypeInfo(_T158),[TypeInfo(string)],  getVMTProcAddr('TTimeZone','DoGetID',8));


RegisterProc(TTimeZone,'GetUtcOffset',mtScriptMethod,TypeInfo(_T159),[
TypeInfo(TDateTime),
TypeInfo(Boolean),TypeInfo(TTimeSpan)],Addr(__TTimeZone__GetUtcOffset__Wrapper),cRegister);

RegisterProc(TTimeZone,'ToUniversalTime',mtScriptMethod,TypeInfo(_T160),[
TypeInfo(TDateTime),
TypeInfo(Boolean),TypeInfo(TDateTime)],Addr(__TTimeZone__ToUniversalTime__Wrapper),cRegister);

RegRegisterMethod(TTimeZone,'ToLocalTime',TypeInfo(_T161),[
TypeInfo(TDateTime),TypeInfo(TDateTime)],Addr(TTimeZone.ToLocalTime));

RegisterProc(TTimeZone,'GetDisplayName',mtScriptMethod,TypeInfo(_T162),[
TypeInfo(TDateTime),
TypeInfo(Boolean),TypeInfo(string)],Addr(__TTimeZone__GetDisplayName__Wrapper),cRegister);

RegisterProc(TTimeZone,'GetAbbreviation',mtScriptMethod,TypeInfo(_T163),[
TypeInfo(TDateTime),
TypeInfo(Boolean),TypeInfo(string)],Addr(__TTimeZone__GetAbbreviation__Wrapper),cRegister);

RegRegisterMethod(TTimeZone,'GetLocalTimeType',TypeInfo(_T164),[
TypeInfo(TDateTime),TypeInfo(TLocalTimeType)],Addr(TTimeZone.GetLocalTimeType));

RegisterProc(TTimeZone,'IsStandardTime',mtScriptMethod,TypeInfo(_T165),[
TypeInfo(TDateTime),
TypeInfo(Boolean),TypeInfo(Boolean)],Addr(__TTimeZone__IsStandardTime__Wrapper),cRegister);

RegRegisterMethod(TTimeZone,'IsInvalidTime',TypeInfo(_T166),[
TypeInfo(TDateTime),TypeInfo(Boolean)],Addr(TTimeZone.IsInvalidTime));

RegRegisterMethod(TTimeZone,'IsAmbiguousTime',TypeInfo(_T167),[
TypeInfo(TDateTime),TypeInfo(Boolean)],Addr(TTimeZone.IsAmbiguousTime));

RegisterProc(TTimeZone,'IsDaylightTime',mtScriptMethod,TypeInfo(_T168),[
TypeInfo(TDateTime),
TypeInfo(Boolean),TypeInfo(Boolean)],Addr(__TTimeZone__IsDaylightTime__Wrapper),cRegister);

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
RegisterProc(nil,'MilliSecondOfTheYear',mtProc,TypeInfo(_T52),[
TypeInfo(TDateTime),TypeInfo(Int64)],Addr(MilliSecondOfTheYear),cRegister);

RegisterProc(nil,'WithinPastHours',mtProc,TypeInfo(_T78),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),
TypeInfo(Int64),TypeInfo(Boolean)],Addr(__WithinPastHours),cRegister);

RegisterProc(nil,'WithinPastMinutes',mtProc,TypeInfo(_T79),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),
TypeInfo(Integer),TypeInfo(Boolean)],Addr(__WithinPastMinutes),cRegister);

RegisterProc(nil,'WithinPastSeconds',mtProc,TypeInfo(_T80),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),
TypeInfo(Integer),TypeInfo(Boolean)],Addr(__WithinPastSeconds),cRegister);

RegisterProc(nil,'WithinPastMilliSeconds',mtProc,TypeInfo(_T81),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),
TypeInfo(Integer),TypeInfo(Boolean)],Addr(__WithinPastMilliSeconds),cRegister);

RegisterProc(nil,'HoursBetween',mtProc,TypeInfo(_T86),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),TypeInfo(Integer)],Addr(__HoursBetween),cRegister);

RegisterProc(nil,'MinutesBetween',mtProc,TypeInfo(_T87),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),TypeInfo(Integer)],Addr(__MinutesBetween),cRegister);

RegisterProc(nil,'SecondsBetween',mtProc,TypeInfo(_T88),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),TypeInfo(Integer)],Addr(__SecondsBetween),cRegister);

RegisterProc(nil,'MilliSecondsBetween',mtProc,TypeInfo(_T89),[
TypeInfo(TDateTime),
TypeInfo(TDateTime),TypeInfo(Integer)],Addr(__MilliSecondsBetween),cRegister);

{RegRegisterMethod(TTimeZone,'DoGetOffsetsAndType',TypeInfo(_T156),[
TypeInfo(TDateTime),
TypeInfo(Int64),
TypeInfo(Int64),
TypeInfo(TLocalTimeType)], pointer(0))}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
