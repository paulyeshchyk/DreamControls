{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit MXARRAYS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Windows,
  Variants,
  Classes,
  Mxconsts,
  Mxarrays;
function ConvertTStringItemToVariant(var R : TStringItem) : OleVariant;
function ConvertVariantToTStringItem(const V : OleVariant) : TStringItem;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TStringItem__Wrapper = class(TDCRecordWrapper)
private
fR : TStringItem;
public
function GetRecordPtr : pointer; override;
published
procedure setFString(const val : AnsiString);
function getFString : AnsiString;
property FString : AnsiString read getFString write setFString;
procedure setFObject(const val : TObject);
function getFObject : TObject;
property FObject : TObject read getFObject write setFObject;
end;
type
_T0 = procedure (p0 : Integer) of object;

_T1 = function : Integer of object;

_T2 = procedure (p0 : Integer;
p1 : Integer) of object;

_T3 = _T0;

_T4 = procedure  of object;

_T5 = _T2;

_T6 = _T4;

_T7 = procedure (p0 : Integer;
var p1) of object;

_T8 = _T7;

_T9 = _T7;

_T10 = _T7;

_T11 = _T0;

_T12 = _T0;

_T13 = _T2;

_T14 = function (var p0): Integer of object;

_T15 = function (var p0 : Integer;
var p1): Boolean of object;

{_T16 = procedure (p0 : TCompareProc) of object;}

_T17 = procedure (p0 : Integer;
p1 : Currency) of object;

_T18 = function (p0 : Integer): Currency of object;

_T19 = function (p0 : Currency): Integer of object;

_T20 = function (var p0 : Integer;
p1 : Currency): Boolean of object;

_T21 = _T2;

_T22 = function (p0 : Variant): Variant of object;

_T23 = function (p0 : Variant): Integer of object;

_T24 = function (p0 : Integer): Boolean of object;

_T25 = _T1;

_T26 = _T0;

_T27 = _T23;

_T28 = procedure (p0 : TCustomArray;
p1 : Boolean;
p2 : Boolean) of object;

_T29 = function (p0 : Integer): Double of object;

_T30 = _T18;

_T31 = function (p0 : Integer): Integer of object;

_T32 = procedure (p0 : Integer;
p1 : Double) of object;

_T33 = _T29;

_T34 = function (p0 : Double): Integer of object;

_T35 = function (var p0 : Integer;
p1 : Double): Boolean of object;

_T36 = _T4;

_T37 = procedure (p0 : TIndexNDX) of object;

_T38 = _T4;

_T39 = function (const p0 : TSmallIntArray): Integer of object;

_T40 = _T2;

_T41 = _T31;

_T42 = _T31;

_T43 = function (var p0 : Integer;
p1 : Integer): Boolean of object;

_T44 = procedure (p0 : Integer;
p1 : Pointer) of object;

_T45 = function (p0 : Integer): Pointer of object;

_T46 = procedure (var p0;
p1 : Integer;
p2 : Integer) of object;

_T47 = _T46;

_T48 = function (p0 : Pointer): Pointer of object;

_T49 = procedure (p0 : Pointer) of object;

_T50 = procedure (p0 : Integer;
p1 : Single) of object;

_T51 = function (p0 : Integer): Single of object;

_T52 = function (p0 : Single): Integer of object;

_T53 = function (var p0 : Integer;
p1 : Single): Boolean of object;

_T54 = procedure (p0 : Integer;
p1 : SmallInt) of object;

_T55 = function (p0 : Integer): SmallInt of object;

_T56 = function (p0 : SmallInt): Integer of object;

_T57 = function (const p0 : string): Integer of object;

_T58 = function (p0 : string;
var p1 : Integer): Boolean of object;

_T59 = _T2;

_T60 = _T23;

_T61 = function : TCustomArray of object;

_T62 = function (p0 : Integer): Variant of object;

_T63 = _T1;

_T64 = _T4;

_T65 = _T4;

_T66 = procedure (p0 : TDynArrayNDX;
p1 : TMatrixNDX) of object;

_T67 = procedure (p0 : Integer;
p1 : Word) of object;

_T68 = function (p0 : Integer): Word of object;

_T69 = function (p0 : Word): Integer of object;

_T70 = function (var p0 : Integer;
p1 : Word): Boolean of object;

function __TStringItem__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TStringItem__Wrapper.setFString(const val : AnsiString);
begin
TStringItem(GetRecordPtr^).FString := val;
end;
function __TStringItem__Wrapper.getFString : AnsiString;
begin
result := TStringItem(GetRecordPtr^).FString;
end;
procedure __TStringItem__Wrapper.setFObject(const val : TObject);
begin
TStringItem(GetRecordPtr^).FObject := val;
end;
function __TStringItem__Wrapper.getFObject : TObject;
begin
result := TStringItem(GetRecordPtr^).FObject;
end;
function _TStringItem_ : IDispatch;
begin
  result := __TStringItem__Wrapper.Create;
end;

type __TStringItem__Wrapper__ = class(__TStringItem__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TStringItem__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTStringItemToVariant(var R : TStringItem) : OleVariant;
var
__rw : __TStringItem__Wrapper__;
begin
__rw := __TStringItem__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTStringItem(const V : OleVariant) : TStringItem;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TStringItem((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTBaseArray__Duplicates(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBaseArray(Instance).Duplicates;
end;

procedure __DC__SetTBaseArray__Duplicates(Instance : TObject; Params : PVariantArgList);
begin
TBaseArray(Instance).Duplicates:=OleVariant(Params^[0]);
end;

function __DC__GetTBaseArray__SortOrder(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBaseArray(Instance).SortOrder;
end;

procedure __DC__SetTBaseArray__SortOrder(Instance : TObject; Params : PVariantArgList);
begin
TBaseArray(Instance).SortOrder:=OleVariant(Params^[0]);
end;

function __DC__GetTBaseArray__Capacity(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBaseArray(Instance).Capacity;
end;

procedure __DC__SetTBaseArray__Capacity(Instance : TObject; Params : PVariantArgList);
begin
TBaseArray(Instance).Capacity:=OleVariant(Params^[0]);
end;

function __DC__GetTBaseArray__Limit(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBaseArray(Instance).Limit;
end;

procedure __DC__SetTBaseArray__Limit(Instance : TObject; Params : PVariantArgList);
begin
TBaseArray(Instance).Limit:=OleVariant(Params^[0]);
end;

function __DC__GetTBaseArray__ItemSize(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBaseArray(Instance).ItemSize;
end;

function __DC__GetTBaseArray__AutoSize(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBaseArray(Instance).AutoSize;
end;

procedure __DC__SetTBaseArray__AutoSize(Instance : TObject; Params : PVariantArgList);
begin
TBaseArray(Instance).AutoSize:=OleVariant(Params^[0]);
end;

function __DC__GetTBaseArray__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBaseArray(Instance).Count;
end;

procedure __DC__SetTBaseArray__Count(Instance : TObject; Params : PVariantArgList);
begin
TBaseArray(Instance).Count:=OleVariant(Params^[0]);
end;

function __DC__GetTBaseArray__List(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TBaseArray(Instance).List);
end;

function __DC__GetTCurrencyArray__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCurrencyArray(Instance).Items[OleVariant(Params^[0])];
end;

procedure __DC__SetTCurrencyArray__Items(Instance : TObject; Params : PVariantArgList);
begin
TCurrencyArray(Instance).Items[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomArray__List(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TCustomArray(Instance).List);
end;

function __DC__GetTCustomArray__Duplicates(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomArray(Instance).Duplicates;
end;

procedure __DC__SetTCustomArray__Duplicates(Instance : TObject; Params : PVariantArgList);
begin
TCustomArray(Instance).Duplicates:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomArray__Sorted(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomArray(Instance).Sorted;
end;

procedure __DC__SetTCustomArray__Sorted(Instance : TObject; Params : PVariantArgList);
begin
TCustomArray(Instance).Sorted:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomArray__BlankStringVal(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomArray(Instance).BlankStringVal;
end;

procedure __DC__SetTCustomArray__BlankStringVal(Instance : TObject; Params : PVariantArgList);
begin
TCustomArray(Instance).BlankStringVal:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomArray__BlankDateVal(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomArray(Instance).BlankDateVal;
end;

procedure __DC__SetTCustomArray__BlankDateVal(Instance : TObject; Params : PVariantArgList);
begin
TCustomArray(Instance).BlankDateVal:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomArray__BlankBoolVal(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomArray(Instance).BlankBoolVal;
end;

procedure __DC__SetTCustomArray__BlankBoolVal(Instance : TObject; Params : PVariantArgList);
begin
TCustomArray(Instance).BlankBoolVal:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomArray__MemberCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomArray(Instance).MemberCount;
end;

function __DC__GetTCustomArray__DataType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomArray(Instance).DataType;
end;

function __DC__GetTCustomArray__BlankCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomArray(Instance).BlankCount;
end;

function __DC__GetTCustomArray__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomArray(Instance).Items[OleVariant(Params^[0])];
end;

procedure __DC__SetTCustomArray__Items(Instance : TObject; Params : PVariantArgList);
begin
TCustomArray(Instance).Items[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTDoubleArray__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDoubleArray(Instance).Items[OleVariant(Params^[0])];
end;

procedure __DC__SetTDoubleArray__Items(Instance : TObject; Params : PVariantArgList);
begin
TDoubleArray(Instance).Items[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTIndexArray__MemoryUsage(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIndexArray(Instance).MemoryUsage;
end;

function __DC__GetTIndexArray__AutoSize(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIndexArray(Instance).AutoSize;
end;

procedure __DC__SetTIndexArray__AutoSize(Instance : TObject; Params : PVariantArgList);
begin
TIndexArray(Instance).AutoSize:=OleVariant(Params^[0]);
end;

function __DC__GetTIndexArray__Capacity(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIndexArray(Instance).Capacity;
end;

procedure __DC__SetTIndexArray__Capacity(Instance : TObject; Params : PVariantArgList);
begin
TIndexArray(Instance).Capacity:=OleVariant(Params^[0]);
end;

function __DC__GetTIndexArray__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIndexArray(Instance).Count;
end;

function __DC__GetTIndexArray__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIndexArray(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __DC__SetTIndexArray__Items(Instance : TObject; Params : PVariantArgList);
begin
TIndexArray(Instance).Items[OleVariant(Params^[1])]:=TSmallIntArray(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIntArray__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIntArray(Instance).Items[OleVariant(Params^[0])];
end;

procedure __DC__SetTIntArray__Items(Instance : TObject; Params : PVariantArgList);
begin
TIntArray(Instance).Items[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTPointerArray__AsPtr(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TPointerArray(Instance).AsPtr[OleVariant(Params^[0])]);
end;

procedure __DC__SetTPointerArray__AsPtr(Instance : TObject; Params : PVariantArgList);
begin
TPointerArray(Instance).AsPtr[OleVariant(Params^[1])]:=VarToPointer(OleVariant(Params^[0]));
end;

function __DC__GetTPointerArray__Data(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TPointerArray(Instance).Data[OleVariant(Params^[0])]);
end;

procedure __DC__SetTPointerArray__Data(Instance : TObject; Params : PVariantArgList);
begin
TPointerArray(Instance).Data[OleVariant(Params^[1])]:=VarToPointer(OleVariant(Params^[0]));
end;

function __DC__GetTSingleArray__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSingleArray(Instance).Items[OleVariant(Params^[0])];
end;

procedure __DC__SetTSingleArray__Items(Instance : TObject; Params : PVariantArgList);
begin
TSingleArray(Instance).Items[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTSmallIntArray__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSmallIntArray(Instance).Items[OleVariant(Params^[0])];
end;

procedure __DC__SetTSmallIntArray__Items(Instance : TObject; Params : PVariantArgList);
begin
TSmallIntArray(Instance).Items[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTStringArray__Strings(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TStringArray(Instance).Strings[OleVariant(Params^[0])];
end;

procedure __DC__SetTStringArray__Strings(Instance : TObject; Params : PVariantArgList);
begin
TStringArray(Instance).Strings[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTTwoDimArray__rows(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TTwoDimArray(Instance).rows;
end;

function __DC__GetTTwoDimArray__columns(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TTwoDimArray(Instance).columns;
end;

function __DC__GetTTwoDimArray__Element(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TTwoDimArray(Instance).Element[OleVariant(Params^[1]), OleVariant(Params^[0])];
end;

procedure __DC__SetTTwoDimArray__Element(Instance : TObject; Params : PVariantArgList);
begin
TTwoDimArray(Instance).Element[OleVariant(Params^[2]), OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTWordArray__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWordArray(Instance).Items[OleVariant(Params^[0])];
end;

procedure __DC__SetTWordArray__Items(Instance : TObject; Params : PVariantArgList);
begin
TWordArray(Instance).Items[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TBaseArray,'Duplicates',__DC__GetTBaseArray__Duplicates,__DC__SetTBaseArray__Duplicates);
RegisterProperty(TBaseArray,'SortOrder',__DC__GetTBaseArray__SortOrder,__DC__SetTBaseArray__SortOrder);
RegisterProperty(TBaseArray,'Capacity',__DC__GetTBaseArray__Capacity,__DC__SetTBaseArray__Capacity);
RegisterProperty(TBaseArray,'Limit',__DC__GetTBaseArray__Limit,__DC__SetTBaseArray__Limit);
RegisterProperty(TBaseArray,'ItemSize',__DC__GetTBaseArray__ItemSize,nil);
RegisterProperty(TBaseArray,'AutoSize',__DC__GetTBaseArray__AutoSize,__DC__SetTBaseArray__AutoSize);
RegisterProperty(TBaseArray,'Count',__DC__GetTBaseArray__Count,__DC__SetTBaseArray__Count);
RegisterProperty(TBaseArray,'List',__DC__GetTBaseArray__List,nil);
RegisterIndexedProperty(TCurrencyArray,'Items',1,True,__DC__GetTCurrencyArray__Items,__DC__SetTCurrencyArray__Items);
RegisterProperty(TCustomArray,'List',__DC__GetTCustomArray__List,nil);
RegisterProperty(TCustomArray,'Duplicates',__DC__GetTCustomArray__Duplicates,__DC__SetTCustomArray__Duplicates);
RegisterProperty(TCustomArray,'Sorted',__DC__GetTCustomArray__Sorted,__DC__SetTCustomArray__Sorted);
RegisterProperty(TCustomArray,'BlankStringVal',__DC__GetTCustomArray__BlankStringVal,__DC__SetTCustomArray__BlankStringVal);
RegisterProperty(TCustomArray,'BlankDateVal',__DC__GetTCustomArray__BlankDateVal,__DC__SetTCustomArray__BlankDateVal);
RegisterProperty(TCustomArray,'BlankBoolVal',__DC__GetTCustomArray__BlankBoolVal,__DC__SetTCustomArray__BlankBoolVal);
RegisterProperty(TCustomArray,'MemberCount',__DC__GetTCustomArray__MemberCount,nil);
RegisterProperty(TCustomArray,'DataType',__DC__GetTCustomArray__DataType,nil);
RegisterProperty(TCustomArray,'BlankCount',__DC__GetTCustomArray__BlankCount,nil);
RegisterIndexedProperty(TCustomArray,'Items',1,True,__DC__GetTCustomArray__Items,__DC__SetTCustomArray__Items);
RegisterIndexedProperty(TDoubleArray,'Items',1,True,__DC__GetTDoubleArray__Items,__DC__SetTDoubleArray__Items);
RegisterProperty(TIndexArray,'MemoryUsage',__DC__GetTIndexArray__MemoryUsage,nil);
RegisterProperty(TIndexArray,'AutoSize',__DC__GetTIndexArray__AutoSize,__DC__SetTIndexArray__AutoSize);
RegisterProperty(TIndexArray,'Capacity',__DC__GetTIndexArray__Capacity,__DC__SetTIndexArray__Capacity);
RegisterProperty(TIndexArray,'Count',__DC__GetTIndexArray__Count,nil);
RegisterIndexedProperty(TIndexArray,'Items',1,True,__DC__GetTIndexArray__Items,__DC__SetTIndexArray__Items);
RegisterIndexedProperty(TIntArray,'Items',1,True,__DC__GetTIntArray__Items,__DC__SetTIntArray__Items);
RegisterIndexedProperty(TPointerArray,'AsPtr',1,False,__DC__GetTPointerArray__AsPtr,__DC__SetTPointerArray__AsPtr);
RegisterIndexedProperty(TPointerArray,'Data',1,False,__DC__GetTPointerArray__Data,__DC__SetTPointerArray__Data);
RegisterIndexedProperty(TSingleArray,'Items',1,True,__DC__GetTSingleArray__Items,__DC__SetTSingleArray__Items);
RegisterIndexedProperty(TSmallIntArray,'Items',1,True,__DC__GetTSmallIntArray__Items,__DC__SetTSmallIntArray__Items);
RegisterIndexedProperty(TStringArray,'Strings',1,True,__DC__GetTStringArray__Strings,__DC__SetTStringArray__Strings);
RegisterProperty(TTwoDimArray,'rows',__DC__GetTTwoDimArray__rows,nil);
RegisterProperty(TTwoDimArray,'columns',__DC__GetTTwoDimArray__columns,nil);
RegisterIndexedProperty(TTwoDimArray,'Element',2,True,__DC__GetTTwoDimArray__Element,__DC__SetTTwoDimArray__Element);
RegisterIndexedProperty(TWordArray,'Items',1,True,__DC__GetTWordArray__Items,__DC__SetTWordArray__Items);
end;

const __ConstNames0 : array[0..11] of string = (
'tsNone'
,'tsAscending'
,'tsDescending'
,'afOwnsData'
,'afAutoSize'
,'afCanCompare'
,'afSortUnique'
,'dupIgnore'
,'dupAccept'
,'dupError'
,'vMaxRow'
,'vMaxCol'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,tsNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,tsAscending));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,tsDescending));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,afOwnsData));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,afAutoSize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,afCanCompare));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,afSortUnique));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,dupIgnore));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,dupAccept));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,dupError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,vMaxRow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,vMaxCol));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..16] of TClass = (
EArrayError,
EDynArrayRangeError,
ELowCapacityError,
EUnsupportedTypeError,
TBaseArray,
TCurrencyArray,
TCustomArray,
TDoubleArray,
TIndexArray,
TIntArray,
TPointerArray,
TSingleArray,
TSmallIntArray,
TStringArray,
TThreadCustomArray,
TTwoDimArray,
TWordArray
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..2] of string = (
'TStringItem'
,'SetMemoryCapacity'
,'GetMemoryCapacity'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TStringItem_)));
RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T0),[
TypeInfo(Integer)],Addr(SetMemoryCapacity),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T1),[TypeInfo(Integer)],Addr(GetMemoryCapacity),cRegister);

//RegRegisterMethod(TBaseArray,'InvalidateItems',TypeInfo(_T2),[TypeInfo(Integer),TypeInfo(Integer)], pointer(12));
RegRegisterMethod(TBaseArray,'InvalidateItems',TypeInfo(_T2),[TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TBaseArray','InvalidateItems',12));


//RegRegisterMethod(TBaseArray,'SetCapacity',TypeInfo(_T3),[TypeInfo(Integer)], pointer(16));
RegRegisterMethod(TBaseArray,'SetCapacity',TypeInfo(_T3),[TypeInfo(Integer)],  getVMTProcAddr('TBaseArray','SetCapacity',16));


//RegRegisterMethod(TBaseArray,'Grow',TypeInfo(_T4),NoParams, pointer(20));
RegRegisterMethod(TBaseArray,'Grow',TypeInfo(_T4),NoParams,  getVMTProcAddr('TBaseArray','Grow',20));


RegisterProc(TBaseArray,'Create',mtConstructor,TypeInfo(_T5),[
TypeInfo(Integer),
TypeInfo(Integer)], pointer(24),cRegister);

RegRegisterMethod(TBaseArray,'Clear',TypeInfo(_T6),NoParams,Addr(TBaseArray.Clear));

RegRegisterMethod(TBaseArray,'InsertAt',TypeInfo(_T7),[
TypeInfo(Integer),
TypeInfoUntyped],Addr(TBaseArray.InsertAt));

//RegRegisterMethod(TBaseArray,'Insert',TypeInfo(_T8),[TypeInfo(Integer),TypeInfoUntyped], pointer(28));
RegRegisterMethod(TBaseArray,'Insert',TypeInfo(_T8),[TypeInfo(Integer),TypeInfoUntyped],  getVMTProcAddr('TBaseArray','Insert',28));


RegRegisterMethod(TBaseArray,'PutItem',TypeInfo(_T9),[
TypeInfo(Integer),
TypeInfoUntyped],Addr(TBaseArray.PutItem));

RegRegisterMethod(TBaseArray,'GetItem',TypeInfo(_T10),[
TypeInfo(Integer),
TypeInfoUntyped],Addr(TBaseArray.GetItem));

RegRegisterMethod(TBaseArray,'RemoveItem',TypeInfo(_T11),[
TypeInfo(Integer)],Addr(TBaseArray.RemoveItem));

//RegRegisterMethod(TBaseArray,'Delete',TypeInfo(_T12),[TypeInfo(Integer)], pointer(32));
RegRegisterMethod(TBaseArray,'Delete',TypeInfo(_T12),[TypeInfo(Integer)],  getVMTProcAddr('TBaseArray','Delete',32));


//RegRegisterMethod(TBaseArray,'Exchange',TypeInfo(_T13),[TypeInfo(Integer),TypeInfo(Integer)], pointer(36));
RegRegisterMethod(TBaseArray,'Exchange',TypeInfo(_T13),[TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TBaseArray','Exchange',36));


//RegRegisterMethod(TBaseArray,'IndexOf',TypeInfo(_T14),[TypeInfoUntyped,TypeInfo(Integer)], pointer(40));
RegRegisterMethod(TBaseArray,'IndexOf',TypeInfo(_T14),[TypeInfoUntyped,TypeInfo(Integer)],  getVMTProcAddr('TBaseArray','IndexOf',40));


RegRegisterMethod(TBaseArray,'FindItem',TypeInfo(_T15),[
TypeInfo(Integer),
TypeInfoUntyped,TypeInfo(Boolean)],Addr(TBaseArray.FindItem));

RegRegisterMethod(TCurrencyArray,'PutItem',TypeInfo(_T17),[
TypeInfo(Integer),
TypeInfo(Currency)],Addr(TCurrencyArray.PutItem));

RegRegisterMethod(TCurrencyArray,'GetItem',TypeInfo(_T18),[
TypeInfo(Integer),TypeInfo(Currency)],Addr(TCurrencyArray.GetItem));

RegRegisterMethod(TCurrencyArray,'Add',TypeInfo(_T19),[
TypeInfo(Currency),TypeInfo(Integer)],Addr(TCurrencyArray.Add));

RegRegisterMethod(TCurrencyArray,'Find',TypeInfo(_T20),[
TypeInfo(Integer),
TypeInfo(Currency),TypeInfo(Boolean)],Addr(TCurrencyArray.Find));

RegisterProc(TCustomArray,'Create',mtConstructor,TypeInfo(_T21),[
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TCustomArray.Create),cRegister);

RegRegisterMethod(TCustomArray,'ConvertVar',TypeInfo(_T22),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(TCustomArray.ConvertVar));

RegRegisterMethod(TCustomArray,'Add',TypeInfo(_T23),[
TypeInfo(Variant),TypeInfo(Integer)],Addr(TCustomArray.Add));

RegRegisterMethod(TCustomArray,'IsBlank',TypeInfo(_T24),[
TypeInfo(Integer),TypeInfo(Boolean)],Addr(TCustomArray.IsBlank));

//RegRegisterMethod(TCustomArray,'MemoryUsage',TypeInfo(_T25),[TypeInfo(Integer)], pointer(0));
RegRegisterMethod(TCustomArray,'MemoryUsage',TypeInfo(_T25),[TypeInfo(Integer)],  getVMTProcAddr('TCustomArray','MemoryUsage',0));


RegRegisterMethod(TCustomArray,'SetSize',TypeInfo(_T26),[
TypeInfo(Integer)],Addr(TCustomArray.SetSize));

RegRegisterMethod(TCustomArray,'IndexOf',TypeInfo(_T27),[
TypeInfo(Variant),TypeInfo(Integer)],Addr(TCustomArray.IndexOf));

RegRegisterMethod(TCustomArray,'Assign',TypeInfo(_T28),[
TypeInfo(TCustomArray),
TypeInfo(Boolean),
TypeInfo(Boolean)],Addr(TCustomArray.Assign));

RegRegisterMethod(TCustomArray,'GetDouble',TypeInfo(_T29),[
TypeInfo(Integer),TypeInfo(Double)],Addr(TCustomArray.GetDouble));

RegRegisterMethod(TCustomArray,'GetCurrency',TypeInfo(_T30),[
TypeInfo(Integer),TypeInfo(Currency)],Addr(TCustomArray.GetCurrency));

RegRegisterMethod(TCustomArray,'GetInteger',TypeInfo(_T31),[
TypeInfo(Integer),TypeInfo(Integer)],Addr(TCustomArray.GetInteger));

RegRegisterMethod(TDoubleArray,'PutItem',TypeInfo(_T32),[
TypeInfo(Integer),
TypeInfo(Double)],Addr(TDoubleArray.PutItem));

RegRegisterMethod(TDoubleArray,'GetItem',TypeInfo(_T33),[
TypeInfo(Integer),TypeInfo(Double)],Addr(TDoubleArray.GetItem));

RegRegisterMethod(TDoubleArray,'Add',TypeInfo(_T34),[
TypeInfo(Double),TypeInfo(Integer)],Addr(TDoubleArray.Add));

RegRegisterMethod(TDoubleArray,'Find',TypeInfo(_T35),[
TypeInfo(Integer),
TypeInfo(Double),TypeInfo(Boolean)],Addr(TDoubleArray.Find));

RegisterProc(TIndexArray,'Create',mtConstructor,TypeInfo(_T36),NoParams,Addr(TIndexArray.Create),cRegister);

RegRegisterMethod(TIndexArray,'SetSize',TypeInfo(_T37),[
TypeInfo(TIndexNDX)],Addr(TIndexArray.SetSize));

RegRegisterMethod(TIndexArray,'Expand',TypeInfo(_T38),NoParams,Addr(TIndexArray.Expand));

RegRegisterMethod(TIndexArray,'Add',TypeInfo(_T39),[
TypeInfo(TSmallIntArray),TypeInfo(Integer)],Addr(TIndexArray.Add));

RegRegisterMethod(TIntArray,'PutItem',TypeInfo(_T40),[
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TIntArray.PutItem));

RegRegisterMethod(TIntArray,'GetItem',TypeInfo(_T41),[
TypeInfo(Integer),TypeInfo(Integer)],Addr(TIntArray.GetItem));

RegRegisterMethod(TIntArray,'Add',TypeInfo(_T42),[
TypeInfo(Integer),TypeInfo(Integer)],Addr(TIntArray.Add));

RegRegisterMethod(TIntArray,'Find',TypeInfo(_T43),[
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Boolean)],Addr(TIntArray.Find));

RegRegisterMethod(TPointerArray,'PutData',TypeInfo(_T44),[
TypeInfo(Integer),
TypeInfoPointer],Addr(TPointerArray.PutData));

RegRegisterMethod(TPointerArray,'GetData',TypeInfo(_T45),[
TypeInfo(Integer),TypeInfoPointer],Addr(TPointerArray.GetData));

RegRegisterMethod(TPointerArray,'CopyFrom',TypeInfo(_T46),[
TypeInfoUntyped,
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TPointerArray.CopyFrom));

RegRegisterMethod(TPointerArray,'CopyTo',TypeInfo(_T47),[
TypeInfoUntyped,
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TPointerArray.CopyTo));

//RegRegisterMethod(TPointerArray,'CloneItem',TypeInfo(_T48),[TypeInfoPointer,TypeInfoPointer], pointer(48));
RegRegisterMethod(TPointerArray,'CloneItem',TypeInfo(_T48),[TypeInfoPointer,TypeInfoPointer],  getVMTProcAddr('TPointerArray','CloneItem',48));


//RegRegisterMethod(TPointerArray,'FreeItem',TypeInfo(_T49),[TypeInfoPointer], pointer(52));
RegRegisterMethod(TPointerArray,'FreeItem',TypeInfo(_T49),[TypeInfoPointer],  getVMTProcAddr('TPointerArray','FreeItem',52));


RegRegisterMethod(TSingleArray,'PutItem',TypeInfo(_T50),[
TypeInfo(Integer),
TypeInfo(Single)],Addr(TSingleArray.PutItem));

RegRegisterMethod(TSingleArray,'GetItem',TypeInfo(_T51),[
TypeInfo(Integer),TypeInfo(Single)],Addr(TSingleArray.GetItem));

RegRegisterMethod(TSingleArray,'Add',TypeInfo(_T52),[
TypeInfo(Single),TypeInfo(Integer)],Addr(TSingleArray.Add));

RegRegisterMethod(TSingleArray,'Find',TypeInfo(_T53),[
TypeInfo(Integer),
TypeInfo(Single),TypeInfo(Boolean)],Addr(TSingleArray.Find));

RegRegisterMethod(TSmallIntArray,'PutItem',TypeInfo(_T54),[
TypeInfo(Integer),
TypeInfo(SmallInt)],Addr(TSmallIntArray.PutItem));

RegRegisterMethod(TSmallIntArray,'GetItem',TypeInfo(_T55),[
TypeInfo(Integer),TypeInfo(SmallInt)],Addr(TSmallIntArray.GetItem));

RegRegisterMethod(TSmallIntArray,'Add',TypeInfo(_T56),[
TypeInfo(SmallInt),TypeInfo(Integer)],Addr(TSmallIntArray.Add));

RegRegisterMethod(TStringArray,'Add',TypeInfo(_T57),[
TypeInfo(string),TypeInfo(Integer)],Addr(TStringArray.Add));

RegRegisterMethod(TStringArray,'Find',TypeInfo(_T58),[
TypeInfo(string),
TypeInfo(Integer),TypeInfo(Boolean)],Addr(TStringArray.Find));

RegisterProc(TThreadCustomArray,'Create',mtConstructor,TypeInfo(_T59),[
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TThreadCustomArray.Create),cRegister);

RegRegisterMethod(TThreadCustomArray,'Add',TypeInfo(_T60),[
TypeInfo(Variant),TypeInfo(Integer)],Addr(TThreadCustomArray.Add));

RegRegisterMethod(TThreadCustomArray,'LockArray',TypeInfo(_T61),[TypeInfo(TCustomArray)],Addr(TThreadCustomArray.LockArray));

RegRegisterMethod(TThreadCustomArray,'GetItem',TypeInfo(_T62),[
TypeInfo(Integer),TypeInfo(Variant)],Addr(TThreadCustomArray.GetItem));

RegRegisterMethod(TThreadCustomArray,'MemoryUsage',TypeInfo(_T63),[TypeInfo(Integer)],Addr(TThreadCustomArray.MemoryUsage));

RegRegisterMethod(TThreadCustomArray,'UnlockArray',TypeInfo(_T64),NoParams,Addr(TThreadCustomArray.UnlockArray));

RegisterProc(TTwoDimArray,'Create',mtConstructor,TypeInfo(_T65),NoParams,Addr(TTwoDimArray.Create),cRegister);

RegRegisterMethod(TTwoDimArray,'SetSize',TypeInfo(_T66),[
TypeInfo(TDynArrayNDX),
TypeInfo(TMatrixNDX)],Addr(TTwoDimArray.SetSize));

RegRegisterMethod(TWordArray,'PutItem',TypeInfo(_T67),[
TypeInfo(Integer),
TypeInfo(Word)],Addr(TWordArray.PutItem));

RegRegisterMethod(TWordArray,'GetItem',TypeInfo(_T68),[
TypeInfo(Integer),TypeInfo(Word)],Addr(TWordArray.GetItem));

RegRegisterMethod(TWordArray,'Add',TypeInfo(_T69),[
TypeInfo(Word),TypeInfo(Integer)],Addr(TWordArray.Add));

RegRegisterMethod(TWordArray,'Find',TypeInfo(_T70),[
TypeInfo(Integer),
TypeInfo(Word),TypeInfo(Boolean)],Addr(TWordArray.Find));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegRegisterMethod(TBaseArray,'Sort',TypeInfo(_T16),[
TypeInfo(TCompareProc)], pointer(44))}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
