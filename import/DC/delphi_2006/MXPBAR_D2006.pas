{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit MXPBAR_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Messages,
  SysUtils,
  Classes,
  Graphics,
  Controls,
  Forms,
  Dialogs,
  StdCtrls,
  ComCtrls,
  MXPBAR;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (p0 : TObject) of object;

_T1 = _T0;

_T2 = _T0;

_T3 = function : Boolean of object;

_T4 = procedure (p0 : string) of object;

_T5 = function : Integer of object;

_T6 = procedure  of object;

function __DC__GetTProgressDialog__Max(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TProgressDialog(Instance).Max;
end;

procedure __DC__SetTProgressDialog__Max(Instance : TObject; Params : PVariantArgList);
begin
TProgressDialog(Instance).Max:=OleVariant(Params^[0]);
end;

function __DC__GetTProgressDialog__Canceled(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TProgressDialog(Instance).Canceled;
end;

procedure __DC__SetTProgressDialog__Canceled(Instance : TObject; Params : PVariantArgList);
begin
TProgressDialog(Instance).Canceled:=OleVariant(Params^[0]);
end;

function __DC__GetTProgressDialog__Interval(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TProgressDialog(Instance).Interval;
end;

procedure __DC__SetTProgressDialog__Interval(Instance : TObject; Params : PVariantArgList);
begin
TProgressDialog(Instance).Interval:=OleVariant(Params^[0]);
end;

function __DC__GetTProgressDialog__ExceptMessage(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TProgressDialog(Instance).ExceptMessage;
end;

procedure __DC__SetTProgressDialog__ExceptMessage(Instance : TObject; Params : PVariantArgList);
begin
TProgressDialog(Instance).ExceptMessage:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TProgressDialog,'Max',__DC__GetTProgressDialog__Max,__DC__SetTProgressDialog__Max);
RegisterProperty(TProgressDialog,'Canceled',__DC__GetTProgressDialog__Canceled,__DC__SetTProgressDialog__Canceled);
RegisterProperty(TProgressDialog,'Interval',__DC__GetTProgressDialog__Interval,__DC__SetTProgressDialog__Interval);
RegisterProperty(TProgressDialog,'ExceptMessage',__DC__GetTProgressDialog__ExceptMessage,__DC__SetTProgressDialog__ExceptMessage);
end;

function __DC__GetMXPBAR__ProgressDlg(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(MXPBAR.ProgressDlg);
end;

procedure __DC__SetMXPBAR__ProgressDlg(Instance : TObject; Params : PVariantArgList);
begin
TObject(MXPBAR.ProgressDlg):=(VarToObject(OleVariant(Params^[0])));
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('ProgressDlg',__DC__GetMXPBAR__ProgressDlg,__DC__SetMXPBAR__ProgressDlg));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..1] of TClass = (
EUserCanceled,
TProgressDialog
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegRegisterMethod(TProgressDialog,'CancelButtonClick',TypeInfo(_T0),[
TypeInfo(TObject)],Addr(TProgressDialog.CancelButtonClick));

RegRegisterMethod(TProgressDialog,'FormActivate',TypeInfo(_T1),[
TypeInfo(TObject)],Addr(TProgressDialog.FormActivate));

RegRegisterMethod(TProgressDialog,'FormCreate',TypeInfo(_T2),[
TypeInfo(TObject)],Addr(TProgressDialog.FormCreate));

RegRegisterMethod(TProgressDialog,'StepProgress',TypeInfo(_T3),[TypeInfo(Boolean)],Addr(TProgressDialog.StepProgress));

RegRegisterMethod(TProgressDialog,'ShowStatus',TypeInfo(_T4),[
TypeInfo(string)],Addr(TProgressDialog.ShowStatus));

RegRegisterMethod(TProgressDialog,'UpdateProgress',TypeInfo(_T5),[TypeInfo(Integer)],Addr(TProgressDialog.UpdateProgress));

RegRegisterMethod(TProgressDialog,'Reset',TypeInfo(_T6),NoParams,Addr(TProgressDialog.Reset));

end;
initialization
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
end.
