{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit WEBBROKER_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Classes,
  HTTPApp,
  Contnrs,
  WebReq,
  WebBroker;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
{_T0 = procedure (p0 : TComponentClass;
var p1) of object;}

_T1 = procedure  of object;

_T2 = _T1;

function __DC__GetTWebApplication__Title(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWebApplication(Instance).Title;
end;

procedure __DC__SetTWebApplication__Title(Instance : TObject; Params : PVariantArgList);
begin
TWebApplication(Instance).Title:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TWebApplication,'Title',__DC__GetTWebApplication__Title,__DC__SetTWebApplication__Title);
end;

function __DC__GetWebBroker__Application(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(WebBroker.Application);
end;

procedure __DC__SetWebBroker__Application(Instance : TObject; Params : PVariantArgList);
begin
TObject(WebBroker.Application):=(VarToObject(OleVariant(Params^[0])));
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('Application',__DC__GetWebBroker__Application,__DC__SetWebBroker__Application));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..0] of TClass = (
TWebApplication
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TWebApplication,'Initialize',TypeInfo(_T1),NoParams, pointer(52));
RegRegisterMethod(TWebApplication,'Initialize',TypeInfo(_T1),NoParams,  getVMTProcAddr('TWebApplication','Initialize',52));


//RegRegisterMethod(TWebApplication,'Run',TypeInfo(_T2),NoParams, pointer(56));
RegRegisterMethod(TWebApplication,'Run',TypeInfo(_T2),NoParams,  getVMTProcAddr('TWebApplication','Run',56));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
{RegRegisterMethod(TWebApplication,'CreateForm',TypeInfo(_T0),[
TypeInfo(TComponentClass),
TypeInfoUntyped], pointer(48))}

RegisterEvent(TypeInfo(TServerExceptionEvent),[
TypeInfo(Exception),
TypeInfo(TWebResponse)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
end.
