{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit GRAPHICS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  Types,
  system.uiTypes,
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  SysUtils,
  Classes,
  Graphics;
function ConvertTBrushDataToVariant(var R : TBrushData) : OleVariant;
function ConvertVariantToTBrushData(const V : OleVariant) : TBrushData;
function ConvertTCursorOrIconToVariant(var R : TCursorOrIcon) : OleVariant;
function ConvertVariantToTCursorOrIcon(const V : OleVariant) : TCursorOrIcon;
function ConvertTFontDataToVariant(var R : TFontData) : OleVariant;
function ConvertVariantToTFontData(const V : OleVariant) : TFontData;
function ConvertTIconRecToVariant(var R : TIconRec) : OleVariant;
function ConvertVariantToTIconRec(const V : OleVariant) : TIconRec;
function ConvertTPenDataToVariant(var R : TPenData) : OleVariant;
function ConvertVariantToTPenData(const V : OleVariant) : TPenData;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
function ConvertTResDataToVariant(var R : TResData) : OleVariant;
function ConvertVariantToTResData(const V : OleVariant) : TResData;
function ConvertTResourceToVariant(var R : TResource) : OleVariant;
function ConvertVariantToTResource(const V : OleVariant) : TResource;
function ConvertTSizeToVariant(var R : TSize) : OleVariant;
function ConvertVariantToTSize(const V : OleVariant) : TSize;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TRect__Wrapper = class(TDCRecordWrapper)
private
fR : TRect;
public
function GetRecordPtr : pointer; override;
published
procedure setLeft(const val : Longint);
function getLeft : Longint;
property Left : Longint read getLeft write setLeft;
procedure setTop(const val : Longint);
function getTop : Longint;
property Top : Longint read getTop write setTop;
procedure setRight(const val : Longint);
function getRight : Longint;
property Right : Longint read getRight write setRight;
procedure setBottom(const val : Longint);
function getBottom : Longint;
property Bottom : Longint read getBottom write setBottom;
end;
type __TPoint__Wrapper = class(TDCRecordWrapper)
private
fR : TPoint;
public
function GetRecordPtr : pointer; override;
published
procedure setX(const val : Longint);
function getX : Longint;
property X : Longint read getX write setX;
procedure setY(const val : Longint);
function getY : Longint;
property Y : Longint read getY write setY;
end;
type __TFontData__Wrapper = class(TDCRecordWrapper)
private
fR : TFontData;
public
function GetRecordPtr : pointer; override;
published
procedure setHeight(const val : Integer);
function getHeight : Integer;
property Height : Integer read getHeight write setHeight;
procedure setOrientation(const val : Integer);
function getOrientation : Integer;
property Orientation : Integer read getOrientation write setOrientation;
procedure setPitch(const val : TFontPitch);
function getPitch : TFontPitch;
property Pitch : TFontPitch read getPitch write setPitch;
procedure setCharset(const val : TFontCharset);
function getCharset : TFontCharset;
property Charset : TFontCharset read getCharset write setCharset;
procedure setName(const val : TFontDataName);
function getName : TFontDataName;
property Name : TFontDataName read getName write setName;
end;
type __TBrushData__Wrapper = class(TDCRecordWrapper)
private
fR : TBrushData;
public
function GetRecordPtr : pointer; override;
published
procedure setColor(const val : TColor);
function getColor : TColor;
property Color : TColor read getColor write setColor;
procedure setBitmap(const val : TBitmap);
function getBitmap : TBitmap;
property Bitmap : TBitmap read getBitmap write setBitmap;
procedure setStyle(const val : TBrushStyle);
function getStyle : TBrushStyle;
property Style : TBrushStyle read getStyle write setStyle;
procedure setOwnsBitmap(const val : Boolean);
function getOwnsBitmap : Boolean;
property OwnsBitmap : Boolean read getOwnsBitmap write setOwnsBitmap;
end;
type __TCursorOrIcon__Wrapper = class(TDCRecordWrapper)
private
fR : TCursorOrIcon;
public
function GetRecordPtr : pointer; override;
published
procedure setReserved(const val : Word);
function getReserved : Word;
property Reserved : Word read getReserved write setReserved;
procedure setwType(const val : Word);
function getwType : Word;
property wType : Word read getwType write setwType;
procedure setCount(const val : Word);
function getCount : Word;
property Count : Word read getCount write setCount;
end;
type __TIconRec__Wrapper = class(TDCRecordWrapper)
private
fR : TIconRec;
public
function GetRecordPtr : pointer; override;
published
procedure setWidth(const val : Byte);
function getWidth : Byte;
property Width : Byte read getWidth write setWidth;
procedure setHeight(const val : Byte);
function getHeight : Byte;
property Height : Byte read getHeight write setHeight;
procedure setColors(const val : Word);
function getColors : Word;
property Colors : Word read getColors write setColors;
procedure setReserved1(const val : Word);
function getReserved1 : Word;
property Reserved1 : Word read getReserved1 write setReserved1;
procedure setReserved2(const val : Word);
function getReserved2 : Word;
property Reserved2 : Word read getReserved2 write setReserved2;
procedure setDIBSize(const val : Longint);
function getDIBSize : Longint;
property DIBSize : Longint read getDIBSize write setDIBSize;
procedure setDIBOffset(const val : Longint);
function getDIBOffset : Longint;
property DIBOffset : Longint read getDIBOffset write setDIBOffset;
end;
type __TPenData__Wrapper = class(TDCRecordWrapper)
private
fR : TPenData;
public
function GetRecordPtr : pointer; override;
published
procedure setColor(const val : TColor);
function getColor : TColor;
property Color : TColor read getColor write setColor;
procedure setWidth(const val : Integer);
function getWidth : Integer;
property Width : Integer read getWidth write setWidth;
procedure setStyle(const val : TPenStyle);
function getStyle : TPenStyle;
property Style : TPenStyle read getStyle write setStyle;
end;
type __TResData__Wrapper = class(TDCRecordWrapper)
private
fR : TResData;
public
function GetRecordPtr : pointer; override;
published
procedure setHandle(const val : THandle);
function getHandle : THandle;
property Handle : THandle read getHandle write setHandle;
end;
type __TResource__Wrapper = class(TDCRecordWrapper)
private
fR : TResource;
public
function GetRecordPtr : pointer; override;
published
procedure setRefCount(const val : Integer);
function getRefCount : Integer;
property RefCount : Integer read getRefCount write setRefCount;
procedure setHandle(const val : THandle);
function getHandle : THandle;
property Handle : THandle read getHandle write setHandle;
procedure setHashCode(const val : Word);
function getHashCode : Word;
property HashCode : Word read getHashCode write setHashCode;
end;
type __TSize__Wrapper = class(TDCRecordWrapper)
private
fR : TSize;
public
function GetRecordPtr : pointer; override;
published
procedure setcx(const val : Longint);
function getcx : Longint;
property cx : Longint read getcx write setcx;
procedure setcy(const val : Longint);
function getcy : Longint;
property cy : Longint read getcy write setcy;
end;
type __TGraphic__ = class(TGraphic);
type __TPicture__ = class(TPicture);
type
{_T0 = function (p0 : TGraphicClass): string of object;}

{_T1 = function (p0 : TGraphicClass): string of object;}

{_T2 = function (p0 : TGraphicClass): string of object;}

_T3 = function (p0 : TColor): Longint of object;

_T4 = function (p0 : TColor): string of object;

_T5 = function (const p0 : string): TColor of object;

{_T6 = procedure (p0 : TGetStrProc) of object;}

_T7 = function (p0 : Longint;
var p1 : string): Boolean of object;

_T8 = function (const p0 : string;
var p1 : Longint): Boolean of object;

{_T9 = procedure (p0 : TGetStrProc) of object;}

_T10 = _T7;

_T11 = _T8;

_T12 = procedure (p0 : HBITMAP;
var p1 : DWORD;
var p2 : DWORD) of object;

_T13 = function (p0 : HBITMAP;
p1 : HPALETTE;
var p2 : HPALETTE;
var p3): Boolean of object;

_T14 = procedure  of object;

_T15 = _T14;

_T16 = function : TFontCharset of object;

_T17 = function (p0 : HDC;
p1 : Integer;
p2 : Integer;
p3 : Integer;
p4 : Integer;
p5 : HDC;
p6 : Integer;
p7 : Integer;
p8 : Integer;
p9 : Integer;
p10 : HDC;
p11 : Integer;
p12 : Integer): Boolean of object;

_T18 = function (p0 : HBITMAP;
const p1 : Array of TColor;
const p2 : Array of TColor): HBITMAP of object;

{_T19 = function (p0 : THandle;
p1 : PChar;
const p2 : Array of TColor;
const p3 : Array of TColor): HBITMAP of object;}

_T20 = function (p0 : HBITMAP): HBITMAP of object;

{_T21 = function (p0 : THandle;
p1 : PChar): HBITMAP of object;}

_T22 = function (p0 : TColor;
p1 : TColor): TBitmap of object;

_T23 = function (p0 : Longint;
p1 : Longint;
p2 : Longint): Longint of object;

_T24 = function : HBITMAP of object;

_T25 = _T24;

_T26 = procedure (p0 : TBitmapHandleType) of object;

_T27 = _T14;

_T28 = _T14;

_T29 = function : Boolean of object;

_T30 = procedure (p0 : THandle;
const p1 : string) of object;

_T31 = procedure (p0 : THandle;
p1 : Integer) of object;

_T32 = procedure (p0 : TColor) of object;

_T33 = _T24;

_T34 = _T24;

_T35 = function : HPALETTE of object;

_T36 = _T14;

_T37 = procedure (p0 : TBrush) of object;

_T38 = _T14;

_T39 = _T14;

_T40 = _T14;

_T41 = _T14;

_T42 = procedure (p0 : Integer;
p1 : Integer;
p2 : Integer;
p3 : Integer;
p4 : Integer;
p5 : Integer;
p6 : Integer;
p7 : Integer) of object;

_T43 = procedure (const p0 : IDispatch;
p1 : TBitmap;
const p2 : IDispatch;
p3 : TColor) of object;

_T44 = _T42;

_T45 = procedure (const p0 : IDispatch;
p1 : TCanvas;
const p2 : IDispatch) of object;

_T46 = procedure (p0 : Integer;
p1 : Integer;
p2 : TGraphic) of object;

_T47 = procedure (const p0 : IDispatch) of object;

_T48 = procedure (p0 : Integer;
p1 : Integer;
p2 : Integer;
p3 : Integer) of object;

_T49 = _T47;

_T50 = procedure (p0 : Integer;
p1 : Integer;
p2 : TColor;
p3 : TFillStyle) of object;

_T51 = _T47;

_T52 = _T29;

_T53 = procedure (p0 : Integer;
p1 : Integer) of object;

_T54 = _T14;

_T55 = _T53;

_T56 = _T42;

_T57 = _T47;

_T58 = _T47;

_T59 = _T47;

_T60 = _T47;

_T61 = _T48;

_T62 = _T14;

_T63 = procedure (p0 : Integer;
p1 : Integer;
p2 : Integer;
p3 : Integer;
p4 : Integer;
p5 : Integer) of object;

_T64 = procedure (const p0 : IDispatch;
p1 : TGraphic) of object;

_T65 = function (const p0 : string): IDispatch of object;

_T66 = function (const p0 : string): Integer of object;

_T67 = procedure (p0 : Integer;
p1 : Integer;
const p2 : string) of object;

_T68 = procedure (const p0 : IDispatch;
p1 : Integer;
p2 : Integer;
const p3 : string) of object;

_T69 = _T66;

_T70 = _T29;

_T71 = _T14;

_T72 = _T14;

_T73 = procedure (p0 : TFont) of object;

_T74 = procedure (p0 : TObject) of object;

_T75 = procedure (p0 : TCanvas;
const p1 : IDispatch) of object;

_T76 = function (p0 : TGraphic): Boolean of object;

_T77 = _T29;

_T78 = function : Integer of object;

_T79 = _T35;

_T80 = _T29;

_T81 = _T78;

_T82 = procedure (p0 : TObject;
p1 : TProgressStage;
p2 : Byte;
p3 : Boolean;
const p4 : IDispatch;
const p5 : string) of object;

_T83 = procedure (p0 : TStream) of object;

_T84 = procedure (p0 : Integer) of object;

_T85 = procedure (p0 : HPALETTE) of object;

_T86 = procedure (p0 : Boolean) of object;

_T87 = _T84;

_T88 = _T83;

_T89 = _T14;

_T90 = procedure (const p0 : string) of object;

_T91 = _T90;

_T92 = _T83;

_T93 = _T83;

_T94 = procedure (p0 : Word;
p1 : THandle;
p2 : HPALETTE) of object;

_T95 = procedure (var p0 : Word;
var p1 : THandle;
var p2 : HPALETTE) of object;

_T96 = _T53;

_T97 = _T14;

_T98 = _T29;

_T99 = _T29;

_T100 = _T30;

_T101 = _T31;

_T102 = function : HICON of object;

_T103 = _T14;

_T104 = _T29;

_T105 = function : HENHMETAFILE of object;

_T106 = procedure (p0 : TMetafile;
p1 : HDC) of object;

_T107 = procedure (p0 : TMetafile;
p1 : HDC;
const p2 : string;
const p3 : string) of object;

_T108 = _T14;

_T109 = procedure (p0 : TPen) of object;

_T110 = _T74;

_T111 = _T82;

_T112 = _T14;

_T113 = _T90;

_T114 = _T90;

_T115 = _T94;

_T116 = _T95;

_T117 = function (p0 : Word): Boolean of object;

{_T118 = procedure (const p0 : string;
const p1 : string;
p2 : TGraphicClass) of object;}

{_T119 = procedure (const p0 : string;
p1 : Integer;
p2 : TGraphicClass) of object;}

{_T120 = procedure (p0 : Word;
p1 : TGraphicClass) of object;}

{_T121 = procedure (p0 : TGraphicClass) of object;}

_T122 = _T14;

function __TRect__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRect__Wrapper.setLeft(const val : Longint);
begin
TRect(GetRecordPtr^).Left := val;
end;
function __TRect__Wrapper.getLeft : Longint;
begin
result := TRect(GetRecordPtr^).Left;
end;
procedure __TRect__Wrapper.setTop(const val : Longint);
begin
TRect(GetRecordPtr^).Top := val;
end;
function __TRect__Wrapper.getTop : Longint;
begin
result := TRect(GetRecordPtr^).Top;
end;
procedure __TRect__Wrapper.setRight(const val : Longint);
begin
TRect(GetRecordPtr^).Right := val;
end;
function __TRect__Wrapper.getRight : Longint;
begin
result := TRect(GetRecordPtr^).Right;
end;
procedure __TRect__Wrapper.setBottom(const val : Longint);
begin
TRect(GetRecordPtr^).Bottom := val;
end;
function __TRect__Wrapper.getBottom : Longint;
begin
result := TRect(GetRecordPtr^).Bottom;
end;
function __TPoint__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPoint__Wrapper.setX(const val : Longint);
begin
TPoint(GetRecordPtr^).X := val;
end;
function __TPoint__Wrapper.getX : Longint;
begin
result := TPoint(GetRecordPtr^).X;
end;
procedure __TPoint__Wrapper.setY(const val : Longint);
begin
TPoint(GetRecordPtr^).Y := val;
end;
function __TPoint__Wrapper.getY : Longint;
begin
result := TPoint(GetRecordPtr^).Y;
end;
function __TFontData__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TFontData__Wrapper.setHeight(const val : Integer);
begin
TFontData(GetRecordPtr^).Height := val;
end;
function __TFontData__Wrapper.getHeight : Integer;
begin
result := TFontData(GetRecordPtr^).Height;
end;
procedure __TFontData__Wrapper.setOrientation(const val : Integer);
begin
TFontData(GetRecordPtr^).Orientation := val;
end;
function __TFontData__Wrapper.getOrientation : Integer;
begin
result := TFontData(GetRecordPtr^).Orientation;
end;
procedure __TFontData__Wrapper.setPitch(const val : TFontPitch);
begin
TFontData(GetRecordPtr^).Pitch := val;
end;
function __TFontData__Wrapper.getPitch : TFontPitch;
begin
result := TFontData(GetRecordPtr^).Pitch;
end;
procedure __TFontData__Wrapper.setCharset(const val : TFontCharset);
begin
TFontData(GetRecordPtr^).Charset := val;
end;
function __TFontData__Wrapper.getCharset : TFontCharset;
begin
result := TFontData(GetRecordPtr^).Charset;
end;
procedure __TFontData__Wrapper.setName(const val : TFontDataName);
begin
TFontData(GetRecordPtr^).Name := val;
end;
function __TFontData__Wrapper.getName : TFontDataName;
begin
result := TFontData(GetRecordPtr^).Name;
end;
function __TBrushData__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TBrushData__Wrapper.setColor(const val : TColor);
begin
TBrushData(GetRecordPtr^).Color := val;
end;
function __TBrushData__Wrapper.getColor : TColor;
begin
result := TBrushData(GetRecordPtr^).Color;
end;
procedure __TBrushData__Wrapper.setBitmap(const val : TBitmap);
begin
TBrushData(GetRecordPtr^).Bitmap := val;
end;
function __TBrushData__Wrapper.getBitmap : TBitmap;
begin
result := TBrushData(GetRecordPtr^).Bitmap;
end;
procedure __TBrushData__Wrapper.setStyle(const val : TBrushStyle);
begin
TBrushData(GetRecordPtr^).Style := val;
end;
function __TBrushData__Wrapper.getStyle : TBrushStyle;
begin
result := TBrushData(GetRecordPtr^).Style;
end;
procedure __TBrushData__Wrapper.setOwnsBitmap(const val : Boolean);
begin
TBrushData(GetRecordPtr^).OwnsBitmap := val;
end;
function __TBrushData__Wrapper.getOwnsBitmap : Boolean;
begin
result := TBrushData(GetRecordPtr^).OwnsBitmap;
end;
function __TCursorOrIcon__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCursorOrIcon__Wrapper.setReserved(const val : Word);
begin
TCursorOrIcon(GetRecordPtr^).Reserved := val;
end;
function __TCursorOrIcon__Wrapper.getReserved : Word;
begin
result := TCursorOrIcon(GetRecordPtr^).Reserved;
end;
procedure __TCursorOrIcon__Wrapper.setwType(const val : Word);
begin
TCursorOrIcon(GetRecordPtr^).wType := val;
end;
function __TCursorOrIcon__Wrapper.getwType : Word;
begin
result := TCursorOrIcon(GetRecordPtr^).wType;
end;
procedure __TCursorOrIcon__Wrapper.setCount(const val : Word);
begin
TCursorOrIcon(GetRecordPtr^).Count := val;
end;
function __TCursorOrIcon__Wrapper.getCount : Word;
begin
result := TCursorOrIcon(GetRecordPtr^).Count;
end;
function __TIconRec__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIconRec__Wrapper.setWidth(const val : Byte);
begin
TIconRec(GetRecordPtr^).Width := val;
end;
function __TIconRec__Wrapper.getWidth : Byte;
begin
result := TIconRec(GetRecordPtr^).Width;
end;
procedure __TIconRec__Wrapper.setHeight(const val : Byte);
begin
TIconRec(GetRecordPtr^).Height := val;
end;
function __TIconRec__Wrapper.getHeight : Byte;
begin
result := TIconRec(GetRecordPtr^).Height;
end;
procedure __TIconRec__Wrapper.setColors(const val : Word);
begin
TIconRec(GetRecordPtr^).Colors := val;
end;
function __TIconRec__Wrapper.getColors : Word;
begin
result := TIconRec(GetRecordPtr^).Colors;
end;
procedure __TIconRec__Wrapper.setReserved1(const val : Word);
begin
TIconRec(GetRecordPtr^).Reserved1 := val;
end;
function __TIconRec__Wrapper.getReserved1 : Word;
begin
result := TIconRec(GetRecordPtr^).Reserved1;
end;
procedure __TIconRec__Wrapper.setReserved2(const val : Word);
begin
TIconRec(GetRecordPtr^).Reserved2 := val;
end;
function __TIconRec__Wrapper.getReserved2 : Word;
begin
result := TIconRec(GetRecordPtr^).Reserved2;
end;
procedure __TIconRec__Wrapper.setDIBSize(const val : Longint);
begin
TIconRec(GetRecordPtr^).DIBSize := val;
end;
function __TIconRec__Wrapper.getDIBSize : Longint;
begin
result := TIconRec(GetRecordPtr^).DIBSize;
end;
procedure __TIconRec__Wrapper.setDIBOffset(const val : Longint);
begin
TIconRec(GetRecordPtr^).DIBOffset := val;
end;
function __TIconRec__Wrapper.getDIBOffset : Longint;
begin
result := TIconRec(GetRecordPtr^).DIBOffset;
end;
function __TPenData__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPenData__Wrapper.setColor(const val : TColor);
begin
TPenData(GetRecordPtr^).Color := val;
end;
function __TPenData__Wrapper.getColor : TColor;
begin
result := TPenData(GetRecordPtr^).Color;
end;
procedure __TPenData__Wrapper.setWidth(const val : Integer);
begin
TPenData(GetRecordPtr^).Width := val;
end;
function __TPenData__Wrapper.getWidth : Integer;
begin
result := TPenData(GetRecordPtr^).Width;
end;
procedure __TPenData__Wrapper.setStyle(const val : TPenStyle);
begin
TPenData(GetRecordPtr^).Style := val;
end;
function __TPenData__Wrapper.getStyle : TPenStyle;
begin
result := TPenData(GetRecordPtr^).Style;
end;
function __TResData__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TResData__Wrapper.setHandle(const val : THandle);
begin
TResData(GetRecordPtr^).Handle := val;
end;
function __TResData__Wrapper.getHandle : THandle;
begin
result := TResData(GetRecordPtr^).Handle;
end;
function __TResource__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TResource__Wrapper.setRefCount(const val : Integer);
begin
TResource(GetRecordPtr^).RefCount := val;
end;
function __TResource__Wrapper.getRefCount : Integer;
begin
result := TResource(GetRecordPtr^).RefCount;
end;
procedure __TResource__Wrapper.setHandle(const val : THandle);
begin
TResource(GetRecordPtr^).Handle := val;
end;
function __TResource__Wrapper.getHandle : THandle;
begin
result := TResource(GetRecordPtr^).Handle;
end;
procedure __TResource__Wrapper.setHashCode(const val : Word);
begin
TResource(GetRecordPtr^).HashCode := val;
end;
function __TResource__Wrapper.getHashCode : Word;
begin
result := TResource(GetRecordPtr^).HashCode;
end;
function _TBrushData_ : IDispatch;
begin
  result := __TBrushData__Wrapper.Create;
end;
function _TCursorOrIcon_ : IDispatch;
begin
  result := __TCursorOrIcon__Wrapper.Create;
end;
function _TFontData_ : IDispatch;
begin
  result := __TFontData__Wrapper.Create;
end;
function _TIconRec_ : IDispatch;
begin
  result := __TIconRec__Wrapper.Create;
end;
function _TPenData_ : IDispatch;
begin
  result := __TPenData__Wrapper.Create;
end;
function _TResData_ : IDispatch;
begin
  result := __TResData__Wrapper.Create;
end;
function _TResource_ : IDispatch;
begin
  result := __TResource__Wrapper.Create;
end;
function __TSize__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSize__Wrapper.setcx(const val : Longint);
begin
TSize(GetRecordPtr^).cx := val;
end;
function __TSize__Wrapper.getcx : Longint;
begin
result := TSize(GetRecordPtr^).cx;
end;
procedure __TSize__Wrapper.setcy(const val : Longint);
begin
TSize(GetRecordPtr^).cy := val;
end;
function __TSize__Wrapper.getcy : Longint;
begin
result := TSize(GetRecordPtr^).cy;
end;
procedure __TCanvas__BrushCopy__Wrapper(__Instance : TCanvas;
const p0 : IDispatch;
p1 : TBitmap;
const p2 : IDispatch;
p3 : TColor);
var
__p0 : ^TRect;
__i0 : IDispatch;
__p2 : ^TRect;
__i2 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
TCanvas(__Instance).BrushCopy(__p0^,p1,__p2^,p3);
end;

procedure __TCanvas__CopyRect__Wrapper(__Instance : TCanvas;
const p0 : IDispatch;
p1 : TCanvas;
const p2 : IDispatch);
var
__p0 : ^TRect;
__i0 : IDispatch;
__p2 : ^TRect;
__i2 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
TCanvas(__Instance).CopyRect(__p0^,p1,__p2^);
end;

procedure __TCanvas__DrawFocusRect__Wrapper(__Instance : TCanvas;
const p0 : IDispatch);
var
__p0 : ^TRect;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
TCanvas(__Instance).DrawFocusRect(__p0^);
end;

procedure __TCanvas__FillRect__Wrapper(__Instance : TCanvas;
const p0 : IDispatch);
var
__p0 : ^TRect;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
TCanvas(__Instance).FillRect(__p0^);
end;

procedure __TCanvas__FrameRect__Wrapper(__Instance : TCanvas;
const p0 : IDispatch);
var
__p0 : ^TRect;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
TCanvas(__Instance).FrameRect(__p0^);
end;

procedure __TCanvas__Polygon__Wrapper(__Instance : TCanvas;
const p0 : IDispatch);
var
__p0 : ^TPoint;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
TCanvas(__Instance).Polygon(__p0^);
end;

procedure __TCanvas__Polyline__Wrapper(__Instance : TCanvas;
const p0 : IDispatch);
var
__p0 : ^TPoint;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
TCanvas(__Instance).Polyline(__p0^);
end;

procedure __TCanvas__PolyBezier__Wrapper(__Instance : TCanvas;
const p0 : IDispatch);
var
__p0 : ^TPoint;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
TCanvas(__Instance).PolyBezier(__p0^);
end;

procedure __TCanvas__PolyBezierTo__Wrapper(__Instance : TCanvas;
const p0 : IDispatch);
var
__p0 : ^TPoint;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
TCanvas(__Instance).PolyBezierTo(__p0^);
end;

procedure __TCanvas__StretchDraw__Wrapper(__Instance : TCanvas;
const p0 : IDispatch;
p1 : TGraphic);
var
__p0 : ^TRect;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
TCanvas(__Instance).StretchDraw(__p0^,p1);
end;

function __TCanvas__TextExtent__Wrapper(__Instance : TCanvas;
const p0 : string): IDispatch;
var
__result : TSize;
__wrapper : __TSize__Wrapper;
begin
__result := TCanvas(__Instance).TextExtent(p0);
__wrapper := __TSize__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

procedure __TCanvas__TextRect__Wrapper(__Instance : TCanvas;
const p0 : IDispatch;
p1 : Integer;
p2 : Integer;
const p3 : string);
var
__p0 : ^TRect;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
TCanvas(__Instance).TextRect(__p0^,p1,p2,p3);
end;

procedure __TGraphic__Draw__Wrapper(__Instance : TGraphic;
p0 : TCanvas;
const p1 : IDispatch);
var
__p1 : ^TRect;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
__TGraphic__(__Instance).Draw(p0,__p1^);
end;

procedure __TGraphic__Progress__Wrapper(__Instance : TGraphic;
p0 : TObject;
p1 : TProgressStage;
p2 : Byte;
p3 : Boolean;
const p4 : IDispatch;
const p5 : string);
var
__p4 : ^TRect;
__i4 : IDispatch;
begin
if p4 = nil then exit;
__p4 := (p4 as IDCRecordWrapper).GetRecordPtr;
__TGraphic__(__Instance).Progress(p0,p1,p2,p3,__p4^,p5);
end;

procedure __TPicture__Progress__Wrapper(__Instance : TPicture;
p0 : TObject;
p1 : TProgressStage;
p2 : Byte;
p3 : Boolean;
const p4 : IDispatch;
const p5 : string);
var
__p4 : ^TRect;
__i4 : IDispatch;
begin
if p4 = nil then exit;
__p4 := (p4 as IDCRecordWrapper).GetRecordPtr;
__TPicture__(__Instance).Progress(p0,p1,p2,p3,__p4^,p5);
end;


type __TBrushData__Wrapper__ = class(__TBrushData__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TBrushData__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTBrushDataToVariant(var R : TBrushData) : OleVariant;
var
__rw : __TBrushData__Wrapper__;
begin
__rw := __TBrushData__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTBrushData(const V : OleVariant) : TBrushData;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TBrushData((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCursorOrIcon__Wrapper__ = class(__TCursorOrIcon__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCursorOrIcon__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCursorOrIconToVariant(var R : TCursorOrIcon) : OleVariant;
var
__rw : __TCursorOrIcon__Wrapper__;
begin
__rw := __TCursorOrIcon__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCursorOrIcon(const V : OleVariant) : TCursorOrIcon;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCursorOrIcon((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TFontData__Wrapper__ = class(__TFontData__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TFontData__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTFontDataToVariant(var R : TFontData) : OleVariant;
var
__rw : __TFontData__Wrapper__;
begin
__rw := __TFontData__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTFontData(const V : OleVariant) : TFontData;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TFontData((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TIconRec__Wrapper__ = class(__TIconRec__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIconRec__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIconRecToVariant(var R : TIconRec) : OleVariant;
var
__rw : __TIconRec__Wrapper__;
begin
__rw := __TIconRec__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIconRec(const V : OleVariant) : TIconRec;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIconRec((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPenData__Wrapper__ = class(__TPenData__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPenData__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPenDataToVariant(var R : TPenData) : OleVariant;
var
__rw : __TPenData__Wrapper__;
begin
__rw := __TPenData__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPenData(const V : OleVariant) : TPenData;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPenData((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPoint__Wrapper__ = class(__TPoint__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPoint__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
var
__rw : __TPoint__Wrapper__;
begin
__rw := __TPoint__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPoint((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRect__Wrapper__ = class(__TRect__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRect__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
var
__rw : __TRect__Wrapper__;
begin
__rw := __TRect__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRect((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TResData__Wrapper__ = class(__TResData__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TResData__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTResDataToVariant(var R : TResData) : OleVariant;
var
__rw : __TResData__Wrapper__;
begin
__rw := __TResData__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTResData(const V : OleVariant) : TResData;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TResData((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TResource__Wrapper__ = class(__TResource__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TResource__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTResourceToVariant(var R : TResource) : OleVariant;
var
__rw : __TResource__Wrapper__;
begin
__rw := __TResource__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTResource(const V : OleVariant) : TResource;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TResource((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSize__Wrapper__ = class(__TSize__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSize__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSizeToVariant(var R : TSize) : OleVariant;
var
__rw : __TSize__Wrapper__;
begin
__rw := __TSize__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSize(const V : OleVariant) : TSize;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSize((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTBitmap__Canvas(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TBitmap(Instance).Canvas);
end;

function __DC__GetTBitmap__Handle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBitmap(Instance).Handle;
end;

procedure __DC__SetTBitmap__Handle(Instance : TObject; Params : PVariantArgList);
begin
TBitmap(Instance).Handle:=OleVariant(Params^[0]);
end;

function __DC__GetTBitmap__HandleType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBitmap(Instance).HandleType;
end;

procedure __DC__SetTBitmap__HandleType(Instance : TObject; Params : PVariantArgList);
begin
TBitmap(Instance).HandleType:=OleVariant(Params^[0]);
end;

function __DC__GetTBitmap__IgnorePalette(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBitmap(Instance).IgnorePalette;
end;

procedure __DC__SetTBitmap__IgnorePalette(Instance : TObject; Params : PVariantArgList);
begin
TBitmap(Instance).IgnorePalette:=OleVariant(Params^[0]);
end;

function __DC__GetTBitmap__MaskHandle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBitmap(Instance).MaskHandle;
end;

procedure __DC__SetTBitmap__MaskHandle(Instance : TObject; Params : PVariantArgList);
begin
TBitmap(Instance).MaskHandle:=OleVariant(Params^[0]);
end;

function __DC__GetTBitmap__Monochrome(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBitmap(Instance).Monochrome;
end;

procedure __DC__SetTBitmap__Monochrome(Instance : TObject; Params : PVariantArgList);
begin
TBitmap(Instance).Monochrome:=OleVariant(Params^[0]);
end;

function __DC__GetTBitmap__PixelFormat(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBitmap(Instance).PixelFormat;
end;

procedure __DC__SetTBitmap__PixelFormat(Instance : TObject; Params : PVariantArgList);
begin
TBitmap(Instance).PixelFormat:=OleVariant(Params^[0]);
end;

function __DC__GetTBitmap__ScanLine(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TBitmap(Instance).ScanLine[OleVariant(Params^[0])]);
end;

function __DC__GetTBitmap__TransparentColor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBitmap(Instance).TransparentColor;
end;

procedure __DC__SetTBitmap__TransparentColor(Instance : TObject; Params : PVariantArgList);
begin
TBitmap(Instance).TransparentColor:=OleVariant(Params^[0]);
end;

function __DC__GetTBitmap__TransparentMode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBitmap(Instance).TransparentMode;
end;

procedure __DC__SetTBitmap__TransparentMode(Instance : TObject; Params : PVariantArgList);
begin
TBitmap(Instance).TransparentMode:=OleVariant(Params^[0]);
end;

function __DC__GetTBrush__Bitmap(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TBrush(Instance).Bitmap);
end;

procedure __DC__SetTBrush__Bitmap(Instance : TObject; Params : PVariantArgList);
begin
TBrush(Instance).Bitmap:=TBitmap(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTBrush__Handle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBrush(Instance).Handle;
end;

procedure __DC__SetTBrush__Handle(Instance : TObject; Params : PVariantArgList);
begin
TBrush(Instance).Handle:=OleVariant(Params^[0]);
end;

function __DC__GetTCanvas__ClipRect(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TRect__Wrapper;
begin
__wrapper := __TRect__Wrapper.Create;
__wrapper.fR := TCanvas(Instance).ClipRect;
result := IUnknown(__wrapper) as IDispatch;
end;

function __DC__GetTCanvas__Handle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCanvas(Instance).Handle;
end;

procedure __DC__SetTCanvas__Handle(Instance : TObject; Params : PVariantArgList);
begin
TCanvas(Instance).Handle:=OleVariant(Params^[0]);
end;

function __DC__GetTCanvas__LockCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCanvas(Instance).LockCount;
end;

function __DC__GetTCanvas__CanvasOrientation(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCanvas(Instance).CanvasOrientation;
end;

function __DC__GetTCanvas__PenPos(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TPoint__Wrapper;
begin
__wrapper := __TPoint__Wrapper.Create;
__wrapper.fR := TCanvas(Instance).PenPos;
result := IUnknown(__wrapper) as IDispatch;
end;

procedure __DC__SetTCanvas__PenPos(Instance : TObject; Params : PVariantArgList);
var
__idisp:IDispatch;
__iwrapper:IDCRecordWrapper;
begin
__idisp:=DCVarToInterface(OleVariant(Params^[0]));
if __idisp=nil then exit;
__idisp.QueryInterface(IDCRecordWrapper, __iwrapper);
TCanvas(Instance).PenPos:=TPoint(__iwrapper.GetRecordPtr^);
end;

function __DC__GetTCanvas__Pixels(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCanvas(Instance).Pixels[OleVariant(Params^[1]), OleVariant(Params^[0])];
end;

procedure __DC__SetTCanvas__Pixels(Instance : TObject; Params : PVariantArgList);
begin
TCanvas(Instance).Pixels[OleVariant(Params^[2]), OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTCanvas__TextFlags(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCanvas(Instance).TextFlags;
end;

procedure __DC__SetTCanvas__TextFlags(Instance : TObject; Params : PVariantArgList);
begin
TCanvas(Instance).TextFlags:=OleVariant(Params^[0]);
end;

function __DC__GetTFont__Handle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFont(Instance).Handle;
end;

procedure __DC__SetTFont__Handle(Instance : TObject; Params : PVariantArgList);
begin
TFont(Instance).Handle:=OleVariant(Params^[0]);
end;

function __DC__GetTFont__PixelsPerInch(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFont(Instance).PixelsPerInch;
end;

procedure __DC__SetTFont__PixelsPerInch(Instance : TObject; Params : PVariantArgList);
begin
TFont(Instance).PixelsPerInch:=OleVariant(Params^[0]);
end;

function __DC__GetTGraphic__Empty(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TGraphic(Instance).Empty;
end;

function __DC__GetTGraphic__Height(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TGraphic(Instance).Height;
end;

procedure __DC__SetTGraphic__Height(Instance : TObject; Params : PVariantArgList);
begin
TGraphic(Instance).Height:=OleVariant(Params^[0]);
end;

function __DC__GetTGraphic__Modified(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TGraphic(Instance).Modified;
end;

procedure __DC__SetTGraphic__Modified(Instance : TObject; Params : PVariantArgList);
begin
TGraphic(Instance).Modified:=OleVariant(Params^[0]);
end;

function __DC__GetTGraphic__Palette(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TGraphic(Instance).Palette;
end;

procedure __DC__SetTGraphic__Palette(Instance : TObject; Params : PVariantArgList);
begin
TGraphic(Instance).Palette:=OleVariant(Params^[0]);
end;

function __DC__GetTGraphic__PaletteModified(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TGraphic(Instance).PaletteModified;
end;

procedure __DC__SetTGraphic__PaletteModified(Instance : TObject; Params : PVariantArgList);
begin
TGraphic(Instance).PaletteModified:=OleVariant(Params^[0]);
end;

function __DC__GetTGraphic__Transparent(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TGraphic(Instance).Transparent;
end;

procedure __DC__SetTGraphic__Transparent(Instance : TObject; Params : PVariantArgList);
begin
TGraphic(Instance).Transparent:=OleVariant(Params^[0]);
end;

function __DC__GetTGraphic__Width(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TGraphic(Instance).Width;
end;

procedure __DC__SetTGraphic__Width(Instance : TObject; Params : PVariantArgList);
begin
TGraphic(Instance).Width:=OleVariant(Params^[0]);
end;

function __DC__GetTIcon__Handle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIcon(Instance).Handle;
end;

procedure __DC__SetTIcon__Handle(Instance : TObject; Params : PVariantArgList);
begin
TIcon(Instance).Handle:=OleVariant(Params^[0]);
end;

function __DC__GetTMetafile__CreatedBy(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMetafile(Instance).CreatedBy;
end;

function __DC__GetTMetafile__Description(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMetafile(Instance).Description;
end;

function __DC__GetTMetafile__Enhanced(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMetafile(Instance).Enhanced;
end;

procedure __DC__SetTMetafile__Enhanced(Instance : TObject; Params : PVariantArgList);
begin
TMetafile(Instance).Enhanced:=OleVariant(Params^[0]);
end;

function __DC__GetTMetafile__Handle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMetafile(Instance).Handle;
end;

procedure __DC__SetTMetafile__Handle(Instance : TObject; Params : PVariantArgList);
begin
TMetafile(Instance).Handle:=OleVariant(Params^[0]);
end;

function __DC__GetTMetafile__MMWidth(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMetafile(Instance).MMWidth;
end;

procedure __DC__SetTMetafile__MMWidth(Instance : TObject; Params : PVariantArgList);
begin
TMetafile(Instance).MMWidth:=OleVariant(Params^[0]);
end;

function __DC__GetTMetafile__MMHeight(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMetafile(Instance).MMHeight;
end;

procedure __DC__SetTMetafile__MMHeight(Instance : TObject; Params : PVariantArgList);
begin
TMetafile(Instance).MMHeight:=OleVariant(Params^[0]);
end;

function __DC__GetTMetafile__Inch(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMetafile(Instance).Inch;
end;

procedure __DC__SetTMetafile__Inch(Instance : TObject; Params : PVariantArgList);
begin
TMetafile(Instance).Inch:=OleVariant(Params^[0]);
end;

function __DC__GetTPen__Handle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TPen(Instance).Handle;
end;

procedure __DC__SetTPen__Handle(Instance : TObject; Params : PVariantArgList);
begin
TPen(Instance).Handle:=OleVariant(Params^[0]);
end;

function __DC__GetTPicture__Bitmap(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TPicture(Instance).Bitmap);
end;

procedure __DC__SetTPicture__Bitmap(Instance : TObject; Params : PVariantArgList);
begin
TPicture(Instance).Bitmap:=TBitmap(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTPicture__Graphic(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TPicture(Instance).Graphic);
end;

procedure __DC__SetTPicture__Graphic(Instance : TObject; Params : PVariantArgList);
begin
TPicture(Instance).Graphic:=TGraphic(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTPicture__Height(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TPicture(Instance).Height;
end;

function __DC__GetTPicture__Icon(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TPicture(Instance).Icon);
end;

procedure __DC__SetTPicture__Icon(Instance : TObject; Params : PVariantArgList);
begin
TPicture(Instance).Icon:=TIcon(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTPicture__Metafile(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TPicture(Instance).Metafile);
end;

procedure __DC__SetTPicture__Metafile(Instance : TObject; Params : PVariantArgList);
begin
TPicture(Instance).Metafile:=TMetafile(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTPicture__Width(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TPicture(Instance).Width;
end;

procedure __RegisterProps;
begin
RegisterProperty(TBitmap,'Canvas',__DC__GetTBitmap__Canvas,nil);
RegisterProperty(TBitmap,'Handle',__DC__GetTBitmap__Handle,__DC__SetTBitmap__Handle);
RegisterProperty(TBitmap,'HandleType',__DC__GetTBitmap__HandleType,__DC__SetTBitmap__HandleType);
RegisterProperty(TBitmap,'IgnorePalette',__DC__GetTBitmap__IgnorePalette,__DC__SetTBitmap__IgnorePalette);
RegisterProperty(TBitmap,'MaskHandle',__DC__GetTBitmap__MaskHandle,__DC__SetTBitmap__MaskHandle);
RegisterProperty(TBitmap,'Monochrome',__DC__GetTBitmap__Monochrome,__DC__SetTBitmap__Monochrome);
RegisterProperty(TBitmap,'PixelFormat',__DC__GetTBitmap__PixelFormat,__DC__SetTBitmap__PixelFormat);
RegisterIndexedProperty(TBitmap,'ScanLine',1,False,__DC__GetTBitmap__ScanLine,nil);
RegisterProperty(TBitmap,'TransparentColor',__DC__GetTBitmap__TransparentColor,__DC__SetTBitmap__TransparentColor);
RegisterProperty(TBitmap,'TransparentMode',__DC__GetTBitmap__TransparentMode,__DC__SetTBitmap__TransparentMode);
RegisterProperty(TBrush,'Bitmap',__DC__GetTBrush__Bitmap,__DC__SetTBrush__Bitmap);
RegisterProperty(TBrush,'Handle',__DC__GetTBrush__Handle,__DC__SetTBrush__Handle);
RegisterProperty(TCanvas,'ClipRect',__DC__GetTCanvas__ClipRect,nil);
RegisterProperty(TCanvas,'Handle',__DC__GetTCanvas__Handle,__DC__SetTCanvas__Handle);
RegisterProperty(TCanvas,'LockCount',__DC__GetTCanvas__LockCount,nil);
RegisterProperty(TCanvas,'CanvasOrientation',__DC__GetTCanvas__CanvasOrientation,nil);
RegisterProperty(TCanvas,'PenPos',__DC__GetTCanvas__PenPos,__DC__SetTCanvas__PenPos);
RegisterIndexedProperty(TCanvas,'Pixels',2,False,__DC__GetTCanvas__Pixels,__DC__SetTCanvas__Pixels);
RegisterProperty(TCanvas,'TextFlags',__DC__GetTCanvas__TextFlags,__DC__SetTCanvas__TextFlags);
RegisterProperty(TFont,'Handle',__DC__GetTFont__Handle,__DC__SetTFont__Handle);
RegisterProperty(TFont,'PixelsPerInch',__DC__GetTFont__PixelsPerInch,__DC__SetTFont__PixelsPerInch);
RegisterProperty(TGraphic,'Empty',__DC__GetTGraphic__Empty,nil);
RegisterProperty(TGraphic,'Height',__DC__GetTGraphic__Height,__DC__SetTGraphic__Height);
RegisterProperty(TGraphic,'Modified',__DC__GetTGraphic__Modified,__DC__SetTGraphic__Modified);
RegisterProperty(TGraphic,'Palette',__DC__GetTGraphic__Palette,__DC__SetTGraphic__Palette);
RegisterProperty(TGraphic,'PaletteModified',__DC__GetTGraphic__PaletteModified,__DC__SetTGraphic__PaletteModified);
RegisterProperty(TGraphic,'Transparent',__DC__GetTGraphic__Transparent,__DC__SetTGraphic__Transparent);
RegisterProperty(TGraphic,'Width',__DC__GetTGraphic__Width,__DC__SetTGraphic__Width);
RegisterProperty(TIcon,'Handle',__DC__GetTIcon__Handle,__DC__SetTIcon__Handle);
RegisterProperty(TMetafile,'CreatedBy',__DC__GetTMetafile__CreatedBy,nil);
RegisterProperty(TMetafile,'Description',__DC__GetTMetafile__Description,nil);
RegisterProperty(TMetafile,'Enhanced',__DC__GetTMetafile__Enhanced,__DC__SetTMetafile__Enhanced);
RegisterProperty(TMetafile,'Handle',__DC__GetTMetafile__Handle,__DC__SetTMetafile__Handle);
RegisterProperty(TMetafile,'MMWidth',__DC__GetTMetafile__MMWidth,__DC__SetTMetafile__MMWidth);
RegisterProperty(TMetafile,'MMHeight',__DC__GetTMetafile__MMHeight,__DC__SetTMetafile__MMHeight);
RegisterProperty(TMetafile,'Inch',__DC__GetTMetafile__Inch,__DC__SetTMetafile__Inch);
RegisterProperty(TPen,'Handle',__DC__GetTPen__Handle,__DC__SetTPen__Handle);
RegisterProperty(TPicture,'Bitmap',__DC__GetTPicture__Bitmap,__DC__SetTPicture__Bitmap);
RegisterProperty(TPicture,'Graphic',__DC__GetTPicture__Graphic,__DC__SetTPicture__Graphic);
RegisterProperty(TPicture,'Height',__DC__GetTPicture__Height,nil);
RegisterProperty(TPicture,'Icon',__DC__GetTPicture__Icon,__DC__SetTPicture__Icon);
RegisterProperty(TPicture,'Metafile',__DC__GetTPicture__Metafile,__DC__SetTPicture__Metafile);
RegisterProperty(TPicture,'Width',__DC__GetTPicture__Width,nil);
end;

function __DC__GetGraphics__DefFontData(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TFontData__Wrapper;
begin
__wrapper := __TFontData__Wrapper.Create;
__wrapper.fR := Graphics.DefFontData;
result := IUnknown(__wrapper) as IDispatch;
end;

function __DC__GetGraphics__SystemPalette16(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := Graphics.SystemPalette16;
end;

procedure __DC__SetGraphics__SystemPalette16(Instance : TObject; Params : PVariantArgList);
begin
Graphics.SystemPalette16:=OleVariant(Params^[0]);
end;

function __DC__GetGraphics__DDBsOnly(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := Graphics.DDBsOnly;
end;

procedure __DC__SetGraphics__DDBsOnly(Instance : TObject; Params : PVariantArgList);
begin
Graphics.DDBsOnly:=OleVariant(Params^[0]);
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('DefFontData',__DC__GetGraphics__DefFontData,nil));
__RegisteredVars.Add(RegisterVar('SystemPalette16',__DC__GetGraphics__SystemPalette16,__DC__SetGraphics__SystemPalette16));
__RegisteredVars.Add(RegisterVar('DDBsOnly',__DC__GetGraphics__DDBsOnly,__DC__SetGraphics__DDBsOnly));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..299] of string = (
'clSystemColor'
,'clScrollBar'
,'clBackground'
,'clActiveCaption'
,'clInactiveCaption'
,'clMenu'
,'clWindow'
,'clWindowFrame'
,'clMenuText'
,'clWindowText'
,'clCaptionText'
,'clActiveBorder'
,'clInactiveBorder'
,'clAppWorkSpace'
,'clHighlight'
,'clHighlightText'
,'clBtnFace'
,'clBtnShadow'
,'clGrayText'
,'clBtnText'
,'clInactiveCaptionText'
,'clBtnHighlight'
,'cl3DDkShadow'
,'cl3DLight'
,'clInfoText'
,'clInfoBk'
,'clHotLight'
,'clGradientActiveCaption'
,'clGradientInactiveCaption'
,'clMenuHighlight'
,'clMenuBar'
,'clBlack'
,'clMaroon'
,'clGreen'
,'clOlive'
,'clNavy'
,'clPurple'
,'clTeal'
,'clGray'
,'clSilver'
,'clRed'
,'clLime'
,'clYellow'
,'clBlue'
,'clFuchsia'
,'clAqua'
,'clLtGray'
,'clDkGray'
,'clWhite'
,'StandardColorsCount'
,'clMoneyGreen'
,'clSkyBlue'
,'clCream'
,'clMedGray'
,'ExtendedColorsCount'
,'clNone'
,'clDefault'
,'clWebSnow'
,'clWebFloralWhite'
,'clWebLavenderBlush'
,'clWebOldLace'
,'clWebIvory'
,'clWebCornSilk'
,'clWebBeige'
,'clWebAntiqueWhite'
,'clWebWheat'
,'clWebAliceBlue'
,'clWebGhostWhite'
,'clWebLavender'
,'clWebSeashell'
,'clWebLightYellow'
,'clWebPapayaWhip'
,'clWebNavajoWhite'
,'clWebMoccasin'
,'clWebBurlywood'
,'clWebAzure'
,'clWebMintcream'
,'clWebHoneydew'
,'clWebLinen'
,'clWebLemonChiffon'
,'clWebBlanchedAlmond'
,'clWebBisque'
,'clWebPeachPuff'
,'clWebTan'
,'clWebYellow'
,'clWebDarkOrange'
,'clWebRed'
,'clWebDarkRed'
,'clWebMaroon'
,'clWebIndianRed'
,'clWebSalmon'
,'clWebCoral'
,'clWebGold'
,'clWebTomato'
,'clWebCrimson'
,'clWebBrown'
,'clWebChocolate'
,'clWebSandyBrown'
,'clWebLightSalmon'
,'clWebLightCoral'
,'clWebOrange'
,'clWebOrangeRed'
,'clWebFirebrick'
,'clWebSaddleBrown'
,'clWebSienna'
,'clWebPeru'
,'clWebDarkSalmon'
,'clWebRosyBrown'
,'clWebPaleGoldenrod'
,'clWebLightGoldenrodYellow'
,'clWebOlive'
,'clWebForestGreen'
,'clWebGreenYellow'
,'clWebChartreuse'
,'clWebLightGreen'
,'clWebAquamarine'
,'clWebSeaGreen'
,'clWebGoldenRod'
,'clWebKhaki'
,'clWebOliveDrab'
,'clWebGreen'
,'clWebYellowGreen'
,'clWebLawnGreen'
,'clWebPaleGreen'
,'clWebMediumAquamarine'
,'clWebMediumSeaGreen'
,'clWebDarkGoldenRod'
,'clWebDarkKhaki'
,'clWebDarkOliveGreen'
,'clWebDarkgreen'
,'clWebLimeGreen'
,'clWebLime'
,'clWebSpringGreen'
,'clWebMediumSpringGreen'
,'clWebDarkSeaGreen'
,'clWebLightSeaGreen'
,'clWebPaleTurquoise'
,'clWebLightCyan'
,'clWebLightBlue'
,'clWebLightSkyBlue'
,'clWebCornFlowerBlue'
,'clWebDarkBlue'
,'clWebIndigo'
,'clWebMediumTurquoise'
,'clWebTurquoise'
,'clWebCyan'
,'clWebAqua'
,'clWebPowderBlue'
,'clWebSkyBlue'
,'clWebRoyalBlue'
,'clWebMediumBlue'
,'clWebMidnightBlue'
,'clWebDarkTurquoise'
,'clWebCadetBlue'
,'clWebDarkCyan'
,'clWebTeal'
,'clWebDeepskyBlue'
,'clWebDodgerBlue'
,'clWebBlue'
,'clWebNavy'
,'clWebDarkViolet'
,'clWebDarkOrchid'
,'clWebMagenta'
,'clWebFuchsia'
,'clWebDarkMagenta'
,'clWebMediumVioletRed'
,'clWebPaleVioletRed'
,'clWebBlueViolet'
,'clWebMediumOrchid'
,'clWebMediumPurple'
,'clWebPurple'
,'clWebDeepPink'
,'clWebLightPink'
,'clWebViolet'
,'clWebOrchid'
,'clWebPlum'
,'clWebThistle'
,'clWebHotPink'
,'clWebPink'
,'clWebLightSteelBlue'
,'clWebMediumSlateBlue'
,'clWebLightSlateGray'
,'clWebWhite'
,'clWebLightgrey'
,'clWebGray'
,'clWebSteelBlue'
,'clWebSlateBlue'
,'clWebSlateGray'
,'clWebWhiteSmoke'
,'clWebSilver'
,'clWebDimGray'
,'clWebMistyRose'
,'clWebDarkSlateBlue'
,'clWebDarkSlategray'
,'clWebGainsboro'
,'clWebDarkGray'
,'clWebBlack'
,'WebColorsCount'
,'cmBlackness'
,'cmDstInvert'
,'cmMergeCopy'
,'cmMergePaint'
,'cmNotSrcCopy'
,'cmNotSrcErase'
,'cmPatCopy'
,'cmPatInvert'
,'cmPatPaint'
,'cmSrcAnd'
,'cmSrcCopy'
,'cmSrcErase'
,'cmSrcInvert'
,'cmSrcPaint'
,'cmWhiteness'
,'rc3_StockIcon'
,'rc3_Icon'
,'rc3_Cursor'
,'fpDefault'
,'fpVariable'
,'fpFixed'
,'fsBold'
,'fsItalic'
,'fsUnderline'
,'fsStrikeOut'
,'psSolid'
,'psDash'
,'psDot'
,'psDashDot'
,'psDashDotDot'
,'psClear'
,'psInsideFrame'
,'psUserStyle'
,'psAlternate'
,'pmBlack'
,'pmWhite'
,'pmNop'
,'pmNot'
,'pmCopy'
,'pmNotCopy'
,'pmMergePenNot'
,'pmMaskPenNot'
,'pmMergeNotPen'
,'pmMaskNotPen'
,'pmMerge'
,'pmNotMerge'
,'pmMask'
,'pmNotMask'
,'pmXor'
,'pmNotXor'
,'bsSolid'
,'bsClear'
,'bsHorizontal'
,'bsVertical'
,'bsFDiagonal'
,'bsBDiagonal'
,'bsCross'
,'bsDiagCross'
,'fsSurface'
,'fsBorder'
,'fmAlternate'
,'fmWinding'
,'csHandleValid'
,'csFontValid'
,'csPenValid'
,'csBrushValid'
,'coLeftToRight'
,'coRightToLeft'
,'tfBottom'
,'tfCalcRect'
,'tfCenter'
,'tfEditControl'
,'tfEndEllipsis'
,'tfPathEllipsis'
,'tfExpandTabs'
,'tfExternalLeading'
,'tfLeft'
,'tfModifyString'
,'tfNoClip'
,'tfNoPrefix'
,'tfRight'
,'tfRtlReading'
,'tfSingleLine'
,'tfTop'
,'tfVerticalCenter'
,'tfWordBreak'
,'psStarting'
,'psRunning'
,'psEnding'
,'bmDIB'
,'bmDDB'
,'pfDevice'
,'pf1bit'
,'pf4bit'
,'pf8bit'
,'pf15bit'
,'pf16bit'
,'pf24bit'
,'pf32bit'
,'pfCustom'
,'tmAuto'
,'tmFixed'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,clSystemColor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,clScrollBar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,clBackground));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,clActiveCaption));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,clInactiveCaption));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,clMenu));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,clWindow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,clWindowFrame));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,clMenuText));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,clWindowText));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,clCaptionText));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,clActiveBorder));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,clInactiveBorder));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,clAppWorkSpace));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,clHighlight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,clHighlightText));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,clBtnFace));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,clBtnShadow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,clGrayText));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,clBtnText));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,clInactiveCaptionText));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,clBtnHighlight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,cl3DDkShadow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,cl3DLight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,clInfoText));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,clInfoBk));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,clHotLight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,clGradientActiveCaption));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,clGradientInactiveCaption));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,clMenuHighlight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,clMenuBar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,clBlack));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,clMaroon));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,clGreen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,clOlive));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,clNavy));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,clPurple));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,clTeal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,clGray));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,clSilver));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,clRed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,clLime));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,clYellow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,clBlue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,clFuchsia));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,clAqua));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,clLtGray));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,clDkGray));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,clWhite));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,StandardColorsCount));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,clMoneyGreen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,clSkyBlue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,clCream));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,clMedGray));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,ExtendedColorsCount));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,clNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,clDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,clWebSnow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,clWebFloralWhite));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,clWebLavenderBlush));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,clWebOldLace));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,clWebIvory));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,clWebCornSilk));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,clWebBeige));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,clWebAntiqueWhite));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[65] ,clWebWheat));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[66] ,clWebAliceBlue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[67] ,clWebGhostWhite));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[68] ,clWebLavender));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[69] ,clWebSeashell));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[70] ,clWebLightYellow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[71] ,clWebPapayaWhip));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[72] ,clWebNavajoWhite));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[73] ,clWebMoccasin));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[74] ,clWebBurlywood));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[75] ,clWebAzure));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[76] ,clWebMintcream));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[77] ,clWebHoneydew));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[78] ,clWebLinen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[79] ,clWebLemonChiffon));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[80] ,clWebBlanchedAlmond));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[81] ,clWebBisque));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[82] ,clWebPeachPuff));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[83] ,clWebTan));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[84] ,clWebYellow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[85] ,clWebDarkOrange));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[86] ,clWebRed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[87] ,clWebDarkRed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[88] ,clWebMaroon));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[89] ,clWebIndianRed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[90] ,clWebSalmon));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[91] ,clWebCoral));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[92] ,clWebGold));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[93] ,clWebTomato));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[94] ,clWebCrimson));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[95] ,clWebBrown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[96] ,clWebChocolate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[97] ,clWebSandyBrown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[98] ,clWebLightSalmon));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[99] ,clWebLightCoral));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[100] ,clWebOrange));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[101] ,clWebOrangeRed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[102] ,clWebFirebrick));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[103] ,clWebSaddleBrown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[104] ,clWebSienna));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[105] ,clWebPeru));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[106] ,clWebDarkSalmon));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[107] ,clWebRosyBrown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[108] ,clWebPaleGoldenrod));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[109] ,clWebLightGoldenrodYellow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[110] ,clWebOlive));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[111] ,clWebForestGreen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[112] ,clWebGreenYellow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[113] ,clWebChartreuse));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[114] ,clWebLightGreen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[115] ,clWebAquamarine));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[116] ,clWebSeaGreen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[117] ,clWebGoldenRod));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[118] ,clWebKhaki));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[119] ,clWebOliveDrab));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[120] ,clWebGreen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[121] ,clWebYellowGreen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[122] ,clWebLawnGreen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[123] ,clWebPaleGreen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[124] ,clWebMediumAquamarine));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[125] ,clWebMediumSeaGreen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[126] ,clWebDarkGoldenRod));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[127] ,clWebDarkKhaki));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[128] ,clWebDarkOliveGreen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[129] ,clWebDarkgreen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[130] ,clWebLimeGreen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[131] ,clWebLime));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[132] ,clWebSpringGreen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[133] ,clWebMediumSpringGreen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[134] ,clWebDarkSeaGreen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[135] ,clWebLightSeaGreen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[136] ,clWebPaleTurquoise));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[137] ,clWebLightCyan));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[138] ,clWebLightBlue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[139] ,clWebLightSkyBlue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[140] ,clWebCornFlowerBlue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[141] ,clWebDarkBlue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[142] ,clWebIndigo));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[143] ,clWebMediumTurquoise));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[144] ,clWebTurquoise));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[145] ,clWebCyan));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[146] ,clWebAqua));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[147] ,clWebPowderBlue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[148] ,clWebSkyBlue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[149] ,clWebRoyalBlue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[150] ,clWebMediumBlue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[151] ,clWebMidnightBlue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[152] ,clWebDarkTurquoise));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[153] ,clWebCadetBlue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[154] ,clWebDarkCyan));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[155] ,clWebTeal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[156] ,clWebDeepskyBlue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[157] ,clWebDodgerBlue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[158] ,clWebBlue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[159] ,clWebNavy));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[160] ,clWebDarkViolet));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[161] ,clWebDarkOrchid));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[162] ,clWebMagenta));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[163] ,clWebFuchsia));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[164] ,clWebDarkMagenta));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[165] ,clWebMediumVioletRed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[166] ,clWebPaleVioletRed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[167] ,clWebBlueViolet));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[168] ,clWebMediumOrchid));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[169] ,clWebMediumPurple));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[170] ,clWebPurple));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[171] ,clWebDeepPink));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[172] ,clWebLightPink));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[173] ,clWebViolet));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[174] ,clWebOrchid));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[175] ,clWebPlum));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[176] ,clWebThistle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[177] ,clWebHotPink));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[178] ,clWebPink));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[179] ,clWebLightSteelBlue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[180] ,clWebMediumSlateBlue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[181] ,clWebLightSlateGray));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[182] ,clWebWhite));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[183] ,clWebLightgrey));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[184] ,clWebGray));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[185] ,clWebSteelBlue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[186] ,clWebSlateBlue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[187] ,clWebSlateGray));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[188] ,clWebWhiteSmoke));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[189] ,clWebSilver));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[190] ,clWebDimGray));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[191] ,clWebMistyRose));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[192] ,clWebDarkSlateBlue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[193] ,clWebDarkSlategray));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[194] ,clWebGainsboro));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[195] ,clWebDarkGray));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[196] ,clWebBlack));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[197] ,WebColorsCount));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[198] ,cmBlackness));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[199] ,cmDstInvert));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[200] ,cmMergeCopy));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[201] ,cmMergePaint));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[202] ,cmNotSrcCopy));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[203] ,cmNotSrcErase));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[204] ,cmPatCopy));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[205] ,cmPatInvert));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[206] ,cmPatPaint));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[207] ,cmSrcAnd));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[208] ,cmSrcCopy));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[209] ,cmSrcErase));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[210] ,cmSrcInvert));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[211] ,cmSrcPaint));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[212] ,cmWhiteness));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[213] ,rc3_StockIcon));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[214] ,rc3_Icon));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[215] ,rc3_Cursor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[216] ,fpDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[217] ,fpVariable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[218] ,fpFixed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[219] ,fsBold));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[220] ,fsItalic));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[221] ,fsUnderline));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[222] ,fsStrikeOut));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[223] ,psSolid));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[224] ,psDash));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[225] ,psDot));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[226] ,psDashDot));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[227] ,psDashDotDot));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[228] ,psClear));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[229] ,psInsideFrame));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[230] ,psUserStyle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[231] ,psAlternate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[232] ,pmBlack));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[233] ,pmWhite));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[234] ,pmNop));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[235] ,pmNot));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[236] ,pmCopy));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[237] ,pmNotCopy));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[238] ,pmMergePenNot));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[239] ,pmMaskPenNot));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[240] ,pmMergeNotPen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[241] ,pmMaskNotPen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[242] ,pmMerge));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[243] ,pmNotMerge));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[244] ,pmMask));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[245] ,pmNotMask));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[246] ,pmXor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[247] ,pmNotXor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[248] ,bsSolid));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[249] ,bsClear));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[250] ,bsHorizontal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[251] ,bsVertical));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[252] ,bsFDiagonal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[253] ,bsBDiagonal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[254] ,bsCross));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[255] ,bsDiagCross));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[256] ,fsSurface));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[257] ,fsBorder));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[258] ,fmAlternate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[259] ,fmWinding));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[260] ,csHandleValid));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[261] ,csFontValid));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[262] ,csPenValid));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[263] ,csBrushValid));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[264] ,coLeftToRight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[265] ,coRightToLeft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[266] ,tfBottom));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[267] ,tfCalcRect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[268] ,tfCenter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[269] ,tfEditControl));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[270] ,tfEndEllipsis));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[271] ,tfPathEllipsis));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[272] ,tfExpandTabs));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[273] ,tfExternalLeading));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[274] ,tfLeft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[275] ,tfModifyString));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[276] ,tfNoClip));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[277] ,tfNoPrefix));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[278] ,tfRight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[279] ,tfRtlReading));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[280] ,tfSingleLine));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[281] ,tfTop));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[282] ,tfVerticalCenter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[283] ,tfWordBreak));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[284] ,psStarting));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[285] ,psRunning));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[286] ,psEnding));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[287] ,bmDIB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[288] ,bmDDB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[289] ,pfDevice));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[290] ,pf1bit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[291] ,pf4bit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[292] ,pf8bit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[293] ,pf15bit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[294] ,pf16bit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[295] ,pf24bit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[296] ,pf32bit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[297] ,pfCustom));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[298] ,tmAuto));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[299] ,tmFixed));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..19] of TClass = (
EInvalidGraphic,
EInvalidGraphicOperation,
TBitmap,
TBitmapImage,
TBrush,
TBrushRecall,
TCanvas,
TFont,
TFontRecall,
TGraphic,
TGraphicsObject,
TIcon,
TIconImage,
TMetafile,
TMetafileCanvas,
TMetafileImage,
TPen,
TPenRecall,
TPicture,
TSharedImage
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..23] of string = (
'TBrushData'
,'TCursorOrIcon'
,'TFontData'
,'TIconRec'
,'TPenData'
,'TResData'
,'TResource'
,'ColorToRGB'
,'ColorToString'
,'StringToColor'
,'ColorToIdent'
,'IdentToColor'
,'CharsetToIdent'
,'IdentToCharset'
,'GetDIBSizes'
,'GetDIB'
,'PaletteChanged'
,'FreeMemoryContexts'
,'GetDefFontCharSet'
,'TransparentStretchBlt'
,'CreateMappedBmp'
,'CreateGrayMappedBmp'
,'AllocPatternBitmap'
,'BytesPerScanline'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TBrushData_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_TCursorOrIcon_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_TFontData_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(_TIconRec_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(_TPenData_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[5],Addr(_TResData_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[6],Addr(_TResource_)));
RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T3),[
TypeInfo(TColor),TypeInfo(Longint)],Addr(ColorToRGB),cRegister);

RegisterProc(nil,MethodNames[8],mtProc,TypeInfo(_T4),[
TypeInfo(TColor),TypeInfo(string)],Addr(ColorToString),cRegister);

RegisterProc(nil,MethodNames[9],mtProc,TypeInfo(_T5),[
TypeInfo(string),TypeInfo(TColor)],Addr(StringToColor),cRegister);

RegisterProc(nil,MethodNames[10],mtProc,TypeInfo(_T7),[
TypeInfo(Longint),
TypeInfo(string),TypeInfo(Boolean)],Addr(ColorToIdent),cRegister);

RegisterProc(nil,MethodNames[11],mtProc,TypeInfo(_T8),[
TypeInfo(string),
TypeInfo(Longint),TypeInfo(Boolean)],Addr(IdentToColor),cRegister);

RegisterProc(nil,MethodNames[12],mtProc,TypeInfo(_T10),[
TypeInfo(Longint),
TypeInfo(string),TypeInfo(Boolean)],Addr(CharsetToIdent),cRegister);

RegisterProc(nil,MethodNames[13],mtProc,TypeInfo(_T11),[
TypeInfo(string),
TypeInfo(Longint),TypeInfo(Boolean)],Addr(IdentToCharset),cRegister);

RegisterProc(nil,MethodNames[14],mtProc,TypeInfo(_T12),[
TypeInfo(HBITMAP),
TypeInfo(DWORD),
TypeInfo(DWORD)],Addr(GetDIBSizes),cRegister);

RegisterProc(nil,MethodNames[15],mtProc,TypeInfo(_T13),[
TypeInfo(HBITMAP),
TypeInfo(HPALETTE),
TypeInfo(HPALETTE),
TypeInfoUntyped,TypeInfo(Boolean)],Addr(GetDIB),cRegister);

RegisterProc(nil,MethodNames[16],mtProc,TypeInfo(_T14),NoParams,Addr(PaletteChanged),cRegister);

RegisterProc(nil,MethodNames[17],mtProc,TypeInfo(_T15),NoParams,Addr(FreeMemoryContexts),cRegister);

RegisterProc(nil,MethodNames[18],mtProc,TypeInfo(_T16),[TypeInfo(TFontCharset)],Addr(GetDefFontCharSet),cRegister);

RegisterProc(nil,MethodNames[19],mtProc,TypeInfo(_T17),[
TypeInfo(HDC),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(HDC),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(HDC),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Boolean)],Addr(TransparentStretchBlt),cRegister);

RegisterProc(nil,MethodNames[20],mtProc,TypeInfo(_T18),[
TypeInfo(HBITMAP),
ArrayInfo(TypeInfo(TColor)),
ArrayInfo(TypeInfo(TColor)),TypeInfo(HBITMAP)],Addr(CreateMappedBmp),cRegister);

RegisterProc(nil,MethodNames[21],mtProc,TypeInfo(_T20),[
TypeInfo(HBITMAP),TypeInfo(HBITMAP)],Addr(CreateGrayMappedBmp),cRegister);

RegisterProc(nil,MethodNames[22],mtProc,TypeInfo(_T22),[
TypeInfo(TColor),
TypeInfo(TColor),TypeInfo(TBitmap)],Addr(AllocPatternBitmap),cRegister);

RegisterProc(nil,MethodNames[23],mtProc,TypeInfo(_T23),[
TypeInfo(Longint),
TypeInfo(Longint),
TypeInfo(Longint),TypeInfo(Longint)],Addr(BytesPerScanline),cRegister);


RegisterProc(TBItmap,'Create',mtConstructor,TypeInfo(_T36),NoParams,Addr(TBitmap.Create),cRegister);

//RegRegisterMethod(TBitmap,'GetHandle',TypeInfo(_T24),[TypeInfo(HBITMAP)], pointer(104));
RegRegisterMethod(TBitmap,'GetHandle',TypeInfo(_T24),[TypeInfo(HBITMAP)],  getVMTProcAddr('TBitmap','GetHandle',104));


//RegRegisterMethod(TBitmap,'GetMaskHandle',TypeInfo(_T25),[TypeInfo(HBITMAP)], pointer(108));
RegRegisterMethod(TBitmap,'GetMaskHandle',TypeInfo(_T25),[TypeInfo(HBITMAP)],  getVMTProcAddr('TBitmap','GetMaskHandle',108));


//RegRegisterMethod(TBitmap,'SetHandleType',TypeInfo(_T26),[TypeInfo(TBitmapHandleType)], pointer(112));
RegRegisterMethod(TBitmap,'SetHandleType',TypeInfo(_T26),[TypeInfo(TBitmapHandleType)],  getVMTProcAddr('TBitmap','SetHandleType',112));


RegRegisterMethod(TBitmap,'Dormant',TypeInfo(_T27),NoParams,Addr(TBitmap.Dormant));

RegRegisterMethod(TBitmap,'FreeImage',TypeInfo(_T28),NoParams,Addr(TBitmap.FreeImage));

RegRegisterMethod(TBitmap,'HandleAllocated',TypeInfo(_T29),[TypeInfo(Boolean)],Addr(TBitmap.HandleAllocated));

RegRegisterMethod(TBitmap,'LoadFromResourceName',TypeInfo(_T30),[
TypeInfo(THandle),
TypeInfo(string)],Addr(TBitmap.LoadFromResourceName));

RegRegisterMethod(TBitmap,'LoadFromResourceID',TypeInfo(_T31),[
TypeInfo(THandle),
TypeInfo(Integer)],Addr(TBitmap.LoadFromResourceID));

RegRegisterMethod(TBitmap,'Mask',TypeInfo(_T32),[
TypeInfo(TColor)],Addr(TBitmap.Mask));

RegRegisterMethod(TBitmap,'ReleaseHandle',TypeInfo(_T33),[TypeInfo(HBITMAP)],Addr(TBitmap.ReleaseHandle));

RegRegisterMethod(TBitmap,'ReleaseMaskHandle',TypeInfo(_T34),[TypeInfo(HBITMAP)],Addr(TBitmap.ReleaseMaskHandle));

RegRegisterMethod(TBitmap,'ReleasePalette',TypeInfo(_T35),[TypeInfo(HPALETTE)],Addr(TBitmap.ReleasePalette));

RegisterProc(TBrush,'Create',mtConstructor,TypeInfo(_T36),NoParams,Addr(TBrush.Create),cRegister);

RegisterProc(TBrushRecall,'Create',mtConstructor,TypeInfo(_T37),[
TypeInfo(TBrush)],Addr(TBrushRecall.Create),cRegister);

//RegRegisterMethod(TCanvas,'Changed',TypeInfo(_T38),NoParams, pointer(12));
RegRegisterMethod(TCanvas,'Changed',TypeInfo(_T38),NoParams,  getVMTProcAddr('TCanvas','Changed',12));


//RegRegisterMethod(TCanvas,'Changing',TypeInfo(_T39),NoParams, pointer(16));
RegRegisterMethod(TCanvas,'Changing',TypeInfo(_T39),NoParams,  getVMTProcAddr('TCanvas','Changing',16));


//RegRegisterMethod(TCanvas,'CreateHandle',TypeInfo(_T40),NoParams, pointer(20));
RegRegisterMethod(TCanvas,'CreateHandle',TypeInfo(_T40),NoParams,  getVMTProcAddr('TCanvas','CreateHandle',20));


RegisterProc(TCanvas,'Create',mtConstructor,TypeInfo(_T41),NoParams,Addr(TCanvas.Create),cRegister);

RegRegisterMethod(TCanvas,'Arc',TypeInfo(_T42),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TCanvas.Arc));

RegRegisterMethod(TCanvas,'BrushCopy',TypeInfo(_T43),[
TypeInfo(IDispatch),
TypeInfo(TBitmap),
TypeInfo(IDispatch),
TypeInfo(TColor)],Addr(__TCanvas__BrushCopy__Wrapper));

RegRegisterMethod(TCanvas,'Chord',TypeInfo(_T44),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TCanvas.Chord));

RegRegisterMethod(TCanvas,'CopyRect',TypeInfo(_T45),[
TypeInfo(IDispatch),
TypeInfo(TCanvas),
TypeInfo(IDispatch)],Addr(__TCanvas__CopyRect__Wrapper));

RegRegisterMethod(TCanvas,'Draw',TypeInfo(_T46),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(TGraphic)],Addr(TCanvas.Draw));

RegRegisterMethod(TCanvas,'DrawFocusRect',TypeInfo(_T47),[
TypeInfo(IDispatch)],Addr(__TCanvas__DrawFocusRect__Wrapper));

RegRegisterMethod(TCanvas,'Ellipse',TypeInfo(_T48),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TCanvas.Ellipse));

RegRegisterMethod(TCanvas,'FillRect',TypeInfo(_T49),[
TypeInfo(IDispatch)],Addr(__TCanvas__FillRect__Wrapper));

RegRegisterMethod(TCanvas,'FloodFill',TypeInfo(_T50),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(TColor),
TypeInfo(TFillStyle)],Addr(TCanvas.FloodFill));

RegRegisterMethod(TCanvas,'FrameRect',TypeInfo(_T51),[
TypeInfo(IDispatch)],Addr(__TCanvas__FrameRect__Wrapper));

RegRegisterMethod(TCanvas,'HandleAllocated',TypeInfo(_T52),[TypeInfo(Boolean)],Addr(TCanvas.HandleAllocated));

RegRegisterMethod(TCanvas,'LineTo',TypeInfo(_T53),[
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TCanvas.LineTo));

RegRegisterMethod(TCanvas,'Lock',TypeInfo(_T54),NoParams,Addr(TCanvas.Lock));

RegRegisterMethod(TCanvas,'MoveTo',TypeInfo(_T55),[
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TCanvas.MoveTo));

RegRegisterMethod(TCanvas,'Pie',TypeInfo(_T56),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TCanvas.Pie));

RegRegisterMethod(TCanvas,'Polygon',TypeInfo(_T57),[
ArrayInfo(TypeInfo(IDispatch))],Addr(__TCanvas__Polygon__Wrapper));

RegRegisterMethod(TCanvas,'Polyline',TypeInfo(_T58),[
ArrayInfo(TypeInfo(IDispatch))],Addr(__TCanvas__Polyline__Wrapper));

RegRegisterMethod(TCanvas,'PolyBezier',TypeInfo(_T59),[
ArrayInfo(TypeInfo(IDispatch))],Addr(__TCanvas__PolyBezier__Wrapper));

RegRegisterMethod(TCanvas,'PolyBezierTo',TypeInfo(_T60),[
ArrayInfo(TypeInfo(IDispatch))],Addr(__TCanvas__PolyBezierTo__Wrapper));

RegRegisterMethod(TCanvas,'Rectangle',TypeInfo(_T61),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TCanvas.Rectangle));

RegRegisterMethod(TCanvas,'Refresh',TypeInfo(_T62),NoParams,Addr(TCanvas.Refresh));

RegRegisterMethod(TCanvas,'RoundRect',TypeInfo(_T63),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TCanvas.RoundRect));

RegRegisterMethod(TCanvas,'StretchDraw',TypeInfo(_T64),[
TypeInfo(IDispatch),
TypeInfo(TGraphic)],Addr(__TCanvas__StretchDraw__Wrapper));

RegRegisterMethod(TCanvas,'TextExtent',TypeInfo(_T65),[
TypeInfo(string),TypeInfo(IDispatch)],Addr(__TCanvas__TextExtent__Wrapper));

RegRegisterMethod(TCanvas,'TextHeight',TypeInfo(_T66),[
TypeInfo(string),TypeInfo(Integer)],Addr(TCanvas.TextHeight));

RegRegisterMethod(TCanvas,'TextOut',TypeInfo(_T67),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(string)],Addr(TCanvas.TextOut));

RegRegisterMethod(TCanvas,'TextRect',TypeInfo(_T68),[
TypeInfo(IDispatch),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(string)],Addr(__TCanvas__TextRect__Wrapper));

RegRegisterMethod(TCanvas,'TextWidth',TypeInfo(_T69),[
TypeInfo(string),TypeInfo(Integer)],Addr(TCanvas.TextWidth));

RegRegisterMethod(TCanvas,'TryLock',TypeInfo(_T70),[TypeInfo(Boolean)],Addr(TCanvas.TryLock));

RegRegisterMethod(TCanvas,'Unlock',TypeInfo(_T71),NoParams,Addr(TCanvas.Unlock));

RegisterProc(TFont,'Create',mtConstructor,TypeInfo(_T72),NoParams,Addr(TFont.Create),cRegister);

RegisterProc(TFontRecall,'Create',mtConstructor,TypeInfo(_T73),[
TypeInfo(TFont)],Addr(TFontRecall.Create),cRegister);

//RegRegisterMethod(TGraphic,'Changed',TypeInfo(_T74),[TypeInfo(TObject)], pointer(16));
RegRegisterMethod(TGraphic,'Changed',TypeInfo(_T74),[TypeInfo(TObject)],  getVMTProcAddr('TGraphic','Changed',16));


//RegRegisterMethod(TGraphic,'Draw',TypeInfo(_T75),[TypeInfo(TCanvas),TypeInfo(IDispatch)], pointer(20));
RegRegisterMethod(TGraphic,'Draw',TypeInfo(_T75),[TypeInfo(TCanvas),TypeInfo(IDispatch)],  getVMTProcAddr('TGraphic','Draw',20));


//RegRegisterMethod(TGraphic,'Equals',TypeInfo(_T76),[TypeInfo(TGraphic),TypeInfo(Boolean)], pointer(24));
RegRegisterMethod(TGraphic,'Equals',TypeInfo(_T76),[TypeInfo(TGraphic),TypeInfo(Boolean)],  getVMTProcAddr('TGraphic','Equals',24));


//RegRegisterMethod(TGraphic,'GetEmpty',TypeInfo(_T77),[TypeInfo(Boolean)], pointer(28));
RegRegisterMethod(TGraphic,'GetEmpty',TypeInfo(_T77),[TypeInfo(Boolean)],  getVMTProcAddr('TGraphic','GetEmpty',28));


//RegRegisterMethod(TGraphic,'GetHeight',TypeInfo(_T78),[TypeInfo(Integer)], pointer(32));
RegRegisterMethod(TGraphic,'GetHeight',TypeInfo(_T78),[TypeInfo(Integer)],  getVMTProcAddr('TGraphic','GetHeight',32));


//RegRegisterMethod(TGraphic,'GetPalette',TypeInfo(_T79),[TypeInfo(HPALETTE)], pointer(36));
RegRegisterMethod(TGraphic,'GetPalette',TypeInfo(_T79),[TypeInfo(HPALETTE)],  getVMTProcAddr('TGraphic','GetPalette',36));


//RegRegisterMethod(TGraphic,'GetTransparent',TypeInfo(_T80),[TypeInfo(Boolean)], pointer(40));
RegRegisterMethod(TGraphic,'GetTransparent',TypeInfo(_T80),[TypeInfo(Boolean)],  getVMTProcAddr('TGraphic','GetTransparent',40));


//RegRegisterMethod(TGraphic,'GetWidth',TypeInfo(_T81),[TypeInfo(Integer)], pointer(44));
RegRegisterMethod(TGraphic,'GetWidth',TypeInfo(_T81),[TypeInfo(Integer)],  getVMTProcAddr('TGraphic','GetWidth',44));


RegRegisterMethod(TGraphic,'Progress',TypeInfo(_T82),[
TypeInfo(TObject),
TypeInfo(TProgressStage),
TypeInfo(Byte),
TypeInfo(Boolean),
TypeInfo(IDispatch),
TypeInfo(string)], pointer(MinVMTOffset - 2));

//RegRegisterMethod(TGraphic,'ReadData',TypeInfo(_T83),[TypeInfo(TStream)], pointer(48));
RegRegisterMethod(TGraphic,'ReadData',TypeInfo(_T83),[TypeInfo(TStream)],  getVMTProcAddr('TGraphic','ReadData',48));


//RegRegisterMethod(TGraphic,'SetHeight',TypeInfo(_T84),[TypeInfo(Integer)], pointer(52));
RegRegisterMethod(TGraphic,'SetHeight',TypeInfo(_T84),[TypeInfo(Integer)],  getVMTProcAddr('TGraphic','SetHeight',52));


//RegRegisterMethod(TGraphic,'SetPalette',TypeInfo(_T85),[TypeInfo(HPALETTE)], pointer(56));
RegRegisterMethod(TGraphic,'SetPalette',TypeInfo(_T85),[TypeInfo(HPALETTE)],  getVMTProcAddr('TGraphic','SetPalette',56));


//RegRegisterMethod(TGraphic,'SetTransparent',TypeInfo(_T86),[TypeInfo(Boolean)], pointer(60));
RegRegisterMethod(TGraphic,'SetTransparent',TypeInfo(_T86),[TypeInfo(Boolean)],  getVMTProcAddr('TGraphic','SetTransparent',60));


//RegRegisterMethod(TGraphic,'SetWidth',TypeInfo(_T87),[TypeInfo(Integer)], pointer(64));
RegRegisterMethod(TGraphic,'SetWidth',TypeInfo(_T87),[TypeInfo(Integer)],  getVMTProcAddr('TGraphic','SetWidth',64));


//RegRegisterMethod(TGraphic,'WriteData',TypeInfo(_T88),[TypeInfo(TStream)], pointer(68));
RegRegisterMethod(TGraphic,'WriteData',TypeInfo(_T88),[TypeInfo(TStream)],  getVMTProcAddr('TGraphic','WriteData',68));


RegisterProc(TGraphic,'Create',mtConstructor,TypeInfo(_T89),NoParams, pointer(72),cRegister);

//RegRegisterMethod(TGraphic,'LoadFromFile',TypeInfo(_T90),[TypeInfo(string)], pointer(76));
RegRegisterMethod(TGraphic,'LoadFromFile',TypeInfo(_T90),[TypeInfo(string)],  getVMTProcAddr('TGraphic','LoadFromFile',76));


//RegRegisterMethod(TGraphic,'SaveToFile',TypeInfo(_T91),[TypeInfo(string)], pointer(80));
RegRegisterMethod(TGraphic,'SaveToFile',TypeInfo(_T91),[TypeInfo(string)],  getVMTProcAddr('TGraphic','SaveToFile',80));


//RegRegisterMethod(TGraphic,'LoadFromStream',TypeInfo(_T92),[TypeInfo(TStream)], pointer(84));
RegRegisterMethod(TGraphic,'LoadFromStream',TypeInfo(_T92),[TypeInfo(TStream)],  getVMTProcAddr('TGraphic','LoadFromStream',84));


//RegRegisterMethod(TGraphic,'SaveToStream',TypeInfo(_T93),[TypeInfo(TStream)], pointer(88));
RegRegisterMethod(TGraphic,'SaveToStream',TypeInfo(_T93),[TypeInfo(TStream)],  getVMTProcAddr('TGraphic','SaveToStream',88));


//RegRegisterMethod(TGraphic,'LoadFromClipboardFormat',TypeInfo(_T94),[TypeInfo(Word),TypeInfo(THandle),TypeInfo(HPALETTE)], pointer(92));
RegRegisterMethod(TGraphic,'LoadFromClipboardFormat',TypeInfo(_T94),[TypeInfo(Word),TypeInfo(THandle),TypeInfo(HPALETTE)],  getVMTProcAddr('TGraphic','LoadFromClipboardFormat',92));


//RegRegisterMethod(TGraphic,'SaveToClipboardFormat',TypeInfo(_T95),[TypeInfo(Word),TypeInfo(THandle),TypeInfo(HPALETTE)], pointer(96));
RegRegisterMethod(TGraphic,'SaveToClipboardFormat',TypeInfo(_T95),[TypeInfo(Word),TypeInfo(THandle),TypeInfo(HPALETTE)],  getVMTProcAddr('TGraphic','SaveToClipboardFormat',96));


//RegRegisterMethod(TGraphic,'SetSize',TypeInfo(_T96),[TypeInfo(Integer),TypeInfo(Integer)], pointer(100));
RegRegisterMethod(TGraphic,'SetSize',TypeInfo(_T96),[TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TGraphic','SetSize',100));


RegRegisterMethod(TGraphicsObject,'Changed',TypeInfo(_T97),NoParams, pointer(MinVMTOffset - 2));

RegRegisterMethod(TGraphicsObject,'HandleAllocated',TypeInfo(_T98),[TypeInfo(Boolean)],Addr(TGraphicsObject.HandleAllocated));

RegRegisterMethod(TIcon,'HandleAllocated',TypeInfo(_T99),[TypeInfo(Boolean)],Addr(TIcon.HandleAllocated));

RegRegisterMethod(TIcon,'LoadFromResourceName',TypeInfo(_T100),[
TypeInfo(THandle),
TypeInfo(string)],Addr(TIcon.LoadFromResourceName));

RegRegisterMethod(TIcon,'LoadFromResourceID',TypeInfo(_T101),[
TypeInfo(THandle),
TypeInfo(Integer)],Addr(TIcon.LoadFromResourceID));

RegRegisterMethod(TIcon,'ReleaseHandle',TypeInfo(_T102),[TypeInfo(HICON)],Addr(TIcon.ReleaseHandle));

RegRegisterMethod(TMetafile,'Clear',TypeInfo(_T103),NoParams,Addr(TMetafile.Clear));

RegRegisterMethod(TMetafile,'HandleAllocated',TypeInfo(_T104),[TypeInfo(Boolean)],Addr(TMetafile.HandleAllocated));

RegRegisterMethod(TMetafile,'ReleaseHandle',TypeInfo(_T105),[TypeInfo(HENHMETAFILE)],Addr(TMetafile.ReleaseHandle));

RegisterProc(TMetafileCanvas,'Create',mtConstructor,TypeInfo(_T106),[
TypeInfo(TMetafile),
TypeInfo(HDC)],Addr(TMetafileCanvas.Create),cRegister);

RegisterProc(TMetafileCanvas,'CreateWithComment',mtConstructor,TypeInfo(_T107),[
TypeInfo(TMetafile),
TypeInfo(HDC),
TypeInfo(string),
TypeInfo(string)],Addr(TMetafileCanvas.CreateWithComment),cRegister);

RegisterProc(TPen,'Create',mtConstructor,TypeInfo(_T108),NoParams,Addr(TPen.Create),cRegister);

RegisterProc(TPenRecall,'Create',mtConstructor,TypeInfo(_T109),[
TypeInfo(TPen)],Addr(TPenRecall.Create),cRegister);

RegRegisterMethod(TPicture,'Changed',TypeInfo(_T110),[
TypeInfo(TObject)], pointer(MinVMTOffset - 2));

RegRegisterMethod(TPicture,'Progress',TypeInfo(_T111),[
TypeInfo(TObject),
TypeInfo(TProgressStage),
TypeInfo(Byte),
TypeInfo(Boolean),
TypeInfo(IDispatch),
TypeInfo(string)], pointer(MinVMTOffset - 3));

RegisterProc(TPicture,'Create',mtConstructor,TypeInfo(_T112),NoParams,Addr(TPicture.Create),cRegister);

RegRegisterMethod(TPicture,'LoadFromFile',TypeInfo(_T113),[
TypeInfo(string)],Addr(TPicture.LoadFromFile));

RegRegisterMethod(TPicture,'SaveToFile',TypeInfo(_T114),[
TypeInfo(string)],Addr(TPicture.SaveToFile));

RegRegisterMethod(TPicture,'LoadFromClipboardFormat',TypeInfo(_T115),[
TypeInfo(Word),
TypeInfo(THandle),
TypeInfo(HPALETTE)],Addr(TPicture.LoadFromClipboardFormat));

RegRegisterMethod(TPicture,'SaveToClipboardFormat',TypeInfo(_T116),[
TypeInfo(Word),
TypeInfo(THandle),
TypeInfo(HPALETTE)],Addr(TPicture.SaveToClipboardFormat));

RegisterProc(TPicture,'SupportsClipboardFormat',mtClassMethod,TypeInfo(_T117),[
TypeInfo(Word),TypeInfo(Boolean)],Addr(TPicture.SupportsClipboardFormat),cRegister);

//RegRegisterMethod(TSharedImage,'FreeHandle',TypeInfo(_T122),NoParams, pointer(0));
RegRegisterMethod(TSharedImage,'FreeHandle',TypeInfo(_T122),NoParams,  getVMTProcAddr('TSharedImage','FreeHandle',0));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'GraphicFilter',mtProc,TypeInfo(_T0),[
TypeInfo(TGraphicClass),TypeInfo(string)],Addr(GraphicFilter),cRegister)}

{RegisterProc(nil,'GraphicExtension',mtProc,TypeInfo(_T1),[
TypeInfo(TGraphicClass),TypeInfo(string)],Addr(GraphicExtension),cRegister)}

{RegisterProc(nil,'GraphicFileMask',mtProc,TypeInfo(_T2),[
TypeInfo(TGraphicClass),TypeInfo(string)],Addr(GraphicFileMask),cRegister)}

{RegisterProc(nil,'GetColorValues',mtProc,TypeInfo(_T6),[
TypeInfo(TGetStrProc)],Addr(GetColorValues),cRegister)}

{RegisterProc(nil,'GetCharsetValues',mtProc,TypeInfo(_T9),[
TypeInfo(TGetStrProc)],Addr(GetCharsetValues),cRegister)}

{RegisterProc(nil,'CreateMappedRes',mtProc,TypeInfo(_T19),[
TypeInfo(THandle),
TypeInfoPChar,
ArrayInfo(TypeInfo(TColor)),
ArrayInfo(TypeInfo(TColor)),TypeInfo(HBITMAP)],Addr(CreateMappedRes),cRegister)}

{RegisterProc(nil,'CreateGrayMappedRes',mtProc,TypeInfo(_T21),[
TypeInfo(THandle),
TypeInfoPChar,TypeInfo(HBITMAP)],Addr(CreateGrayMappedRes),cRegister)}

{RegisterProc(TPicture,'RegisterFileFormat',mtClassMethod,TypeInfo(_T118),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(TGraphicClass)],Addr(TPicture.RegisterFileFormat),cRegister)}

{RegisterProc(TPicture,'RegisterFileFormatRes',mtClassMethod,TypeInfo(_T119),[
TypeInfo(string),
TypeInfo(Integer),
TypeInfo(TGraphicClass)],Addr(TPicture.RegisterFileFormatRes),cRegister)}

{RegisterProc(TPicture,'RegisterClipboardFormat',mtClassMethod,TypeInfo(_T120),[
TypeInfo(Word),
TypeInfo(TGraphicClass)],Addr(TPicture.RegisterClipboardFormat),cRegister)}

{RegisterProc(TPicture,'UnregisterGraphicClass',mtClassMethod,TypeInfo(_T121),[
TypeInfo(TGraphicClass)],Addr(TPicture.UnregisterGraphicClass),cRegister)}

{RegisterEvent(TypeInfo(TProgressEvent),[
TypeInfo(TObject),
TypeInfo(TProgressStage),
TypeInfo(Byte),
TypeInfo(Boolean),
TypeInfo(IDispatch),
TypeInfo(string)]);}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
