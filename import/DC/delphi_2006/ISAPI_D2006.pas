{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit ISAPI_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  Types,
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Isapi;
function ConvertHSE_VERSION_INFOToVariant(var R : HSE_VERSION_INFO) : OleVariant;
function ConvertVariantToHSE_VERSION_INFO(const V : OleVariant) : HSE_VERSION_INFO;
function ConvertTEXTENSION_CONTROL_BLOCKToVariant(var R : TEXTENSION_CONTROL_BLOCK) : OleVariant;
function ConvertVariantToTEXTENSION_CONTROL_BLOCK(const V : OleVariant) : TEXTENSION_CONTROL_BLOCK;
function ConvertTHSE_VERSION_INFOToVariant(var R : THSE_VERSION_INFO) : OleVariant;
function ConvertVariantToTHSE_VERSION_INFO(const V : OleVariant) : THSE_VERSION_INFO;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __HSE_VERSION_INFO__Wrapper = class(TDCRecordWrapper)
private
fR : HSE_VERSION_INFO;
public
function GetRecordPtr : pointer; override;
published
procedure setdwExtensionVersion(const val : DWORD);
function getdwExtensionVersion : DWORD;
property dwExtensionVersion : DWORD read getdwExtensionVersion write setdwExtensionVersion;
end;
type __TEXTENSION_CONTROL_BLOCK__Wrapper = class(TDCRecordWrapper)
private
fR : TEXTENSION_CONTROL_BLOCK;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setdwVersion(const val : DWORD);
function getdwVersion : DWORD;
property dwVersion : DWORD read getdwVersion write setdwVersion;
procedure setConnID(const val : HCONN);
function getConnID : HCONN;
property ConnID : HCONN read getConnID write setConnID;
procedure setdwHttpStatusCode(const val : DWORD);
function getdwHttpStatusCode : DWORD;
property dwHttpStatusCode : DWORD read getdwHttpStatusCode write setdwHttpStatusCode;
procedure setcbTotalBytes(const val : DWORD);
function getcbTotalBytes : DWORD;
property cbTotalBytes : DWORD read getcbTotalBytes write setcbTotalBytes;
procedure setcbAvailable(const val : DWORD);
function getcbAvailable : DWORD;
property cbAvailable : DWORD read getcbAvailable write setcbAvailable;
end;
type __THSE_VERSION_INFO__Wrapper = class(TDCRecordWrapper)
private
fR : THSE_VERSION_INFO;
public
function GetRecordPtr : pointer; override;
published
procedure setdwExtensionVersion(const val : DWORD);
function getdwExtensionVersion : DWORD;
property dwExtensionVersion : DWORD read getdwExtensionVersion write setdwExtensionVersion;
end;
function __HSE_VERSION_INFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __HSE_VERSION_INFO__Wrapper.setdwExtensionVersion(const val : DWORD);
begin
HSE_VERSION_INFO(GetRecordPtr^).dwExtensionVersion := val;
end;
function __HSE_VERSION_INFO__Wrapper.getdwExtensionVersion : DWORD;
begin
result := HSE_VERSION_INFO(GetRecordPtr^).dwExtensionVersion;
end;
function __TEXTENSION_CONTROL_BLOCK__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TEXTENSION_CONTROL_BLOCK__Wrapper.setcbSize(const val : DWORD);
begin
TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).cbSize := val;
end;
function __TEXTENSION_CONTROL_BLOCK__Wrapper.getcbSize : DWORD;
begin
result := TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).cbSize;
end;
procedure __TEXTENSION_CONTROL_BLOCK__Wrapper.setdwVersion(const val : DWORD);
begin
TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).dwVersion := val;
end;
function __TEXTENSION_CONTROL_BLOCK__Wrapper.getdwVersion : DWORD;
begin
result := TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).dwVersion;
end;
procedure __TEXTENSION_CONTROL_BLOCK__Wrapper.setConnID(const val : HCONN);
begin
TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).ConnID := val;
end;
function __TEXTENSION_CONTROL_BLOCK__Wrapper.getConnID : HCONN;
begin
result := TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).ConnID;
end;
procedure __TEXTENSION_CONTROL_BLOCK__Wrapper.setdwHttpStatusCode(const val : DWORD);
begin
TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).dwHttpStatusCode := val;
end;
function __TEXTENSION_CONTROL_BLOCK__Wrapper.getdwHttpStatusCode : DWORD;
begin
result := TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).dwHttpStatusCode;
end;
procedure __TEXTENSION_CONTROL_BLOCK__Wrapper.setcbTotalBytes(const val : DWORD);
begin
TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).cbTotalBytes := val;
end;
function __TEXTENSION_CONTROL_BLOCK__Wrapper.getcbTotalBytes : DWORD;
begin
result := TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).cbTotalBytes;
end;
procedure __TEXTENSION_CONTROL_BLOCK__Wrapper.setcbAvailable(const val : DWORD);
begin
TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).cbAvailable := val;
end;
function __TEXTENSION_CONTROL_BLOCK__Wrapper.getcbAvailable : DWORD;
begin
result := TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).cbAvailable;
end;
function __THSE_VERSION_INFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __THSE_VERSION_INFO__Wrapper.setdwExtensionVersion(const val : DWORD);
begin
THSE_VERSION_INFO(GetRecordPtr^).dwExtensionVersion := val;
end;
function __THSE_VERSION_INFO__Wrapper.getdwExtensionVersion : DWORD;
begin
result := THSE_VERSION_INFO(GetRecordPtr^).dwExtensionVersion;
end;
function _HSE_VERSION_INFO_ : IDispatch;
begin
  result := __HSE_VERSION_INFO__Wrapper.Create;
end;
function _TEXTENSION_CONTROL_BLOCK_ : IDispatch;
begin
  result := __TEXTENSION_CONTROL_BLOCK__Wrapper.Create;
end;
function _THSE_VERSION_INFO_ : IDispatch;
begin
  result := __THSE_VERSION_INFO__Wrapper.Create;
end;

type __HSE_VERSION_INFO__Wrapper__ = class(__HSE_VERSION_INFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __HSE_VERSION_INFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertHSE_VERSION_INFOToVariant(var R : HSE_VERSION_INFO) : OleVariant;
var
__rw : __HSE_VERSION_INFO__Wrapper__;
begin
__rw := __HSE_VERSION_INFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToHSE_VERSION_INFO(const V : OleVariant) : HSE_VERSION_INFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := HSE_VERSION_INFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TEXTENSION_CONTROL_BLOCK__Wrapper__ = class(__TEXTENSION_CONTROL_BLOCK__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TEXTENSION_CONTROL_BLOCK__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTEXTENSION_CONTROL_BLOCKToVariant(var R : TEXTENSION_CONTROL_BLOCK) : OleVariant;
var
__rw : __TEXTENSION_CONTROL_BLOCK__Wrapper__;
begin
__rw := __TEXTENSION_CONTROL_BLOCK__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTEXTENSION_CONTROL_BLOCK(const V : OleVariant) : TEXTENSION_CONTROL_BLOCK;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TEXTENSION_CONTROL_BLOCK((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __THSE_VERSION_INFO__Wrapper__ = class(__THSE_VERSION_INFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __THSE_VERSION_INFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTHSE_VERSION_INFOToVariant(var R : THSE_VERSION_INFO) : OleVariant;
var
__rw : __THSE_VERSION_INFO__Wrapper__;
begin
__rw := __THSE_VERSION_INFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTHSE_VERSION_INFO(const V : OleVariant) : THSE_VERSION_INFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := THSE_VERSION_INFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..15] of string = (
'HSE_VERSION_MAJOR'
,'HSE_VERSION_MINOR'
,'HSE_LOG_BUFFER_LEN'
,'HSE_MAX_EXT_DLL_NAME_LEN'
,'HSE_STATUS_SUCCESS'
,'HSE_STATUS_SUCCESS_AND_KEEP_CONN'
,'HSE_STATUS_PENDING'
,'HSE_STATUS_ERROR'
,'HSE_REQ_BASE'
,'HSE_REQ_SEND_URL_REDIRECT_RESP'
,'HSE_REQ_SEND_URL'
,'HSE_REQ_SEND_RESPONSE_HEADER'
,'HSE_REQ_DONE_WITH_SESSION'
,'HSE_REQ_END_RESERVED'
,'HSE_REQ_MAP_URL_TO_PATH'
,'HSE_REQ_GET_SSPI_INFO'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,HSE_VERSION_MAJOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,HSE_VERSION_MINOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,HSE_LOG_BUFFER_LEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,HSE_MAX_EXT_DLL_NAME_LEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,HSE_STATUS_SUCCESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,HSE_STATUS_SUCCESS_AND_KEEP_CONN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,HSE_STATUS_PENDING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,HSE_STATUS_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,HSE_REQ_BASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,HSE_REQ_SEND_URL_REDIRECT_RESP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,HSE_REQ_SEND_URL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,HSE_REQ_SEND_RESPONSE_HEADER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,HSE_REQ_DONE_WITH_SESSION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,HSE_REQ_END_RESERVED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,HSE_REQ_MAP_URL_TO_PATH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,HSE_REQ_GET_SSPI_INFO));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..2] of string = (
'HSE_VERSION_INFO'
,'TEXTENSION_CONTROL_BLOCK'
,'THSE_VERSION_INFO'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_HSE_VERSION_INFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_TEXTENSION_CONTROL_BLOCK_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_THSE_VERSION_INFO_)));
end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
