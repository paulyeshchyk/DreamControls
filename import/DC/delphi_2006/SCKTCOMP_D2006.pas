{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit SCKTCOMP_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Windows,
  Messages,
  Classes,
  WinSock,
  SyncObjs,
  ScktComp;
function ConvertTCMLookupCompleteToVariant(var R : TCMLookupComplete) : OleVariant;
function ConvertVariantToTCMLookupComplete(const V : OleVariant) : TCMLookupComplete;
function ConvertTCMSocketMessageToVariant(var R : TCMSocketMessage) : OleVariant;
function ConvertVariantToTCMSocketMessage(const V : OleVariant) : TCMSocketMessage;
function ConvertTInAddrToVariant(var R : TInAddr) : OleVariant;
function ConvertVariantToTInAddr(const V : OleVariant) : TInAddr;
function ConvertTSockAddrInToVariant(var R : TSockAddrIn) : OleVariant;
function ConvertVariantToTSockAddrIn(const V : OleVariant) : TSockAddrIn;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TSockAddrIn__Wrapper = class(TDCRecordWrapper)
private
fR : TSockAddrIn;
public
function GetRecordPtr : pointer; override;
published
procedure setsin_family(const val : u_short);
function getsin_family : u_short;
property sin_family : u_short read getsin_family write setsin_family;
procedure setsin_port(const val : u_short);
function getsin_port : u_short;
property sin_port : u_short read getsin_port write setsin_port;
procedure setsa_family(const val : u_short);
function getsa_family : u_short;
property sa_family : u_short read getsa_family write setsa_family;
end;
type __TCMLookupComplete__Wrapper = class(TDCRecordWrapper)
private
fR : TCMLookupComplete;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setLookupHandle(const val : THandle);
function getLookupHandle : THandle;
property LookupHandle : THandle read getLookupHandle write setLookupHandle;
procedure setAsyncBufLen(const val : Word);
function getAsyncBufLen : Word;
property AsyncBufLen : Word read getAsyncBufLen write setAsyncBufLen;
procedure setAsyncError(const val : Word);
function getAsyncError : Word;
property AsyncError : Word read getAsyncError write setAsyncError;
procedure setResult(const val : Longint);
function getResult : Longint;
property Result : Longint read getResult write setResult;
end;
type __TCMSocketMessage__Wrapper = class(TDCRecordWrapper)
private
fR : TCMSocketMessage;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setSocket(const val : TSocket);
function getSocket : TSocket;
property Socket : TSocket read getSocket write setSocket;
procedure setSelectEvent(const val : Word);
function getSelectEvent : Word;
property SelectEvent : Word read getSelectEvent write setSelectEvent;
procedure setSelectError(const val : Word);
function getSelectError : Word;
property SelectError : Word read getSelectError write setSelectError;
procedure setResult(const val : Longint);
function getResult : Longint;
property Result : Longint read getResult write setResult;
end;
type __TInAddr__Wrapper = class(TDCRecordWrapper)
private
fR : TInAddr;
public
function GetRecordPtr : pointer; override;
published
procedure setS_addr(const val : u_long);
function getS_addr : u_long;
property S_addr : u_long read getS_addr write setS_addr;
end;
type
{_T0 = function (p0 : TSocketErrorProc): TSocketErrorProc of object;}

_T1 = procedure (p0 : TCustomWinSocket;
p1 : TSocketEvent) of object;

_T2 = procedure (p0 : TCustomWinSocket;
p1 : TErrorEvent;
var p2 : Integer) of object;

_T3 = procedure (p0 : Boolean) of object;

_T4 = procedure  of object;

_T5 = _T4;

_T6 = _T1;

_T7 = _T2;

_T8 = procedure (p0 : TSocket) of object;

_T9 = _T4;

_T10 = _T4;

_T11 = _T4;

_T12 = procedure (const p0 : string;
const p1 : string;
const p2 : string;
p3 : Word;
p4 : Integer;
p5 : Boolean) of object;

_T13 = procedure (const p0 : string;
const p1 : string;
const p2 : string;
p3 : Word;
p4 : Boolean) of object;

_T14 = _T8;

_T15 = _T8;

_T16 = _T8;

_T17 = _T8;

_T18 = _T8;

_T19 = function (const p0 : string): IDispatch of object;

_T20 = function (const p0 : string): Integer of object;

_T21 = function : Integer of object;

_T22 = function (var p0;
p1 : Integer): Integer of object;

_T23 = function : string of object;

_T24 = _T22;

_T25 = function (p0 : TStream): Boolean of object;

_T26 = _T25;

_T27 = _T20;

_T28 = procedure (p0 : Boolean;
p1 : TServerWinSocket) of object;

_T29 = _T4;

_T30 = procedure (p0 : TSocketEvent) of object;

_T31 = procedure (p0 : TErrorEvent;
var p1 : Integer) of object;

_T32 = _T4;

_T33 = procedure (p0 : Boolean;
p1 : TServerClientWinSocket) of object;

_T34 = procedure (p0 : TSocket;
p1 : TServerWinSocket) of object;

_T35 = function (p0 : TServerClientWinSocket): TServerClientThread of object;

_T36 = procedure (p0 : TServerClientThread) of object;

_T37 = _T36;

_T38 = function (p0 : TSocket): TServerClientWinSocket of object;

_T39 = _T35;

_T40 = procedure (p0 : TCustomWinSocket) of object;

_T41 = _T40;

_T42 = _T40;

_T43 = _T40;

_T44 = _T2;

_T45 = _T8;

_T46 = _T35;

_T47 = procedure (p0 : TCustomWinSocket;
p1 : Longint) of object;

_T48 = function (p0 : Longint): Boolean of object;

function __TSockAddrIn__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSockAddrIn__Wrapper.setsin_family(const val : u_short);
begin
TSockAddrIn(GetRecordPtr^).sin_family := val;
end;
function __TSockAddrIn__Wrapper.getsin_family : u_short;
begin
result := TSockAddrIn(GetRecordPtr^).sin_family;
end;
procedure __TSockAddrIn__Wrapper.setsin_port(const val : u_short);
begin
TSockAddrIn(GetRecordPtr^).sin_port := val;
end;
function __TSockAddrIn__Wrapper.getsin_port : u_short;
begin
result := TSockAddrIn(GetRecordPtr^).sin_port;
end;
procedure __TSockAddrIn__Wrapper.setsa_family(const val : u_short);
begin
TSockAddrIn(GetRecordPtr^).sa_family := val;
end;
function __TSockAddrIn__Wrapper.getsa_family : u_short;
begin
result := TSockAddrIn(GetRecordPtr^).sa_family;
end;
function __TCMLookupComplete__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCMLookupComplete__Wrapper.setMsg(const val : Cardinal);
begin
TCMLookupComplete(GetRecordPtr^).Msg := val;
end;
function __TCMLookupComplete__Wrapper.getMsg : Cardinal;
begin
result := TCMLookupComplete(GetRecordPtr^).Msg;
end;
procedure __TCMLookupComplete__Wrapper.setLookupHandle(const val : THandle);
begin
TCMLookupComplete(GetRecordPtr^).LookupHandle := val;
end;
function __TCMLookupComplete__Wrapper.getLookupHandle : THandle;
begin
result := TCMLookupComplete(GetRecordPtr^).LookupHandle;
end;
procedure __TCMLookupComplete__Wrapper.setAsyncBufLen(const val : Word);
begin
TCMLookupComplete(GetRecordPtr^).AsyncBufLen := val;
end;
function __TCMLookupComplete__Wrapper.getAsyncBufLen : Word;
begin
result := TCMLookupComplete(GetRecordPtr^).AsyncBufLen;
end;
procedure __TCMLookupComplete__Wrapper.setAsyncError(const val : Word);
begin
TCMLookupComplete(GetRecordPtr^).AsyncError := val;
end;
function __TCMLookupComplete__Wrapper.getAsyncError : Word;
begin
result := TCMLookupComplete(GetRecordPtr^).AsyncError;
end;
procedure __TCMLookupComplete__Wrapper.setResult(const val : Longint);
begin
TCMLookupComplete(GetRecordPtr^).Result := val;
end;
function __TCMLookupComplete__Wrapper.getResult : Longint;
begin
result := TCMLookupComplete(GetRecordPtr^).Result;
end;
function __TCMSocketMessage__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCMSocketMessage__Wrapper.setMsg(const val : Cardinal);
begin
TCMSocketMessage(GetRecordPtr^).Msg := val;
end;
function __TCMSocketMessage__Wrapper.getMsg : Cardinal;
begin
result := TCMSocketMessage(GetRecordPtr^).Msg;
end;
procedure __TCMSocketMessage__Wrapper.setSocket(const val : TSocket);
begin
TCMSocketMessage(GetRecordPtr^).Socket := val;
end;
function __TCMSocketMessage__Wrapper.getSocket : TSocket;
begin
result := TCMSocketMessage(GetRecordPtr^).Socket;
end;
procedure __TCMSocketMessage__Wrapper.setSelectEvent(const val : Word);
begin
TCMSocketMessage(GetRecordPtr^).SelectEvent := val;
end;
function __TCMSocketMessage__Wrapper.getSelectEvent : Word;
begin
result := TCMSocketMessage(GetRecordPtr^).SelectEvent;
end;
procedure __TCMSocketMessage__Wrapper.setSelectError(const val : Word);
begin
TCMSocketMessage(GetRecordPtr^).SelectError := val;
end;
function __TCMSocketMessage__Wrapper.getSelectError : Word;
begin
result := TCMSocketMessage(GetRecordPtr^).SelectError;
end;
procedure __TCMSocketMessage__Wrapper.setResult(const val : Longint);
begin
TCMSocketMessage(GetRecordPtr^).Result := val;
end;
function __TCMSocketMessage__Wrapper.getResult : Longint;
begin
result := TCMSocketMessage(GetRecordPtr^).Result;
end;
function _TCMLookupComplete_ : IDispatch;
begin
  result := __TCMLookupComplete__Wrapper.Create;
end;
function _TCMSocketMessage_ : IDispatch;
begin
  result := __TCMSocketMessage__Wrapper.Create;
end;
function __TInAddr__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TInAddr__Wrapper.setS_addr(const val : u_long);
begin
TInAddr(GetRecordPtr^).S_addr := val;
end;
function __TInAddr__Wrapper.getS_addr : u_long;
begin
result := TInAddr(GetRecordPtr^).S_addr;
end;
procedure __TCustomWinSocket__Listen__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
5:
begin
TCustomWinSocket(__Instance).Listen(OleVariant(pargs^[4]),OleVariant(pargs^[3]),OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
6:
begin
TCustomWinSocket(__Instance).Listen(OleVariant(pargs^[5]),OleVariant(pargs^[4]),OleVariant(pargs^[3]),OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure __TCustomWinSocket__Open__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
4:
begin
TCustomWinSocket(__Instance).Open(OleVariant(pargs^[3]),OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
5:
begin
TCustomWinSocket(__Instance).Open(OleVariant(pargs^[4]),OleVariant(pargs^[3]),OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function __TCustomWinSocket__LookupName__Wrapper(__Instance : TCustomWinSocket;
const p0 : string): IDispatch;
var
__result : TInAddr;
__wrapper : __TInAddr__Wrapper;
begin
__result := TCustomWinSocket(__Instance).LookupName(p0);
__wrapper := __TInAddr__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;


type __TCMLookupComplete__Wrapper__ = class(__TCMLookupComplete__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCMLookupComplete__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCMLookupCompleteToVariant(var R : TCMLookupComplete) : OleVariant;
var
__rw : __TCMLookupComplete__Wrapper__;
begin
__rw := __TCMLookupComplete__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCMLookupComplete(const V : OleVariant) : TCMLookupComplete;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCMLookupComplete((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCMSocketMessage__Wrapper__ = class(__TCMSocketMessage__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCMSocketMessage__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCMSocketMessageToVariant(var R : TCMSocketMessage) : OleVariant;
var
__rw : __TCMSocketMessage__Wrapper__;
begin
__rw := __TCMSocketMessage__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCMSocketMessage(const V : OleVariant) : TCMSocketMessage;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCMSocketMessage((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TInAddr__Wrapper__ = class(__TInAddr__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TInAddr__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTInAddrToVariant(var R : TInAddr) : OleVariant;
var
__rw : __TInAddr__Wrapper__;
begin
__rw := __TInAddr__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTInAddr(const V : OleVariant) : TInAddr;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TInAddr((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSockAddrIn__Wrapper__ = class(__TSockAddrIn__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSockAddrIn__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSockAddrInToVariant(var R : TSockAddrIn) : OleVariant;
var
__rw : __TSockAddrIn__Wrapper__;
begin
__rw := __TSockAddrIn__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSockAddrIn(const V : OleVariant) : TSockAddrIn;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSockAddrIn((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTClientSocket__Socket(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TClientSocket(Instance).Socket);
end;

function __DC__GetTClientWinSocket__ClientType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TClientWinSocket(Instance).ClientType;
end;

procedure __DC__SetTClientWinSocket__ClientType(Instance : TObject; Params : PVariantArgList);
begin
TClientWinSocket(Instance).ClientType:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomWinSocket__LocalHost(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomWinSocket(Instance).LocalHost;
end;

function __DC__GetTCustomWinSocket__LocalAddress(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomWinSocket(Instance).LocalAddress;
end;

function __DC__GetTCustomWinSocket__LocalPort(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomWinSocket(Instance).LocalPort;
end;

function __DC__GetTCustomWinSocket__RemoteHost(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomWinSocket(Instance).RemoteHost;
end;

function __DC__GetTCustomWinSocket__RemoteAddress(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomWinSocket(Instance).RemoteAddress;
end;

function __DC__GetTCustomWinSocket__RemotePort(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomWinSocket(Instance).RemotePort;
end;

function __DC__GetTCustomWinSocket__RemoteAddr(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TSockAddrIn__Wrapper;
begin
__wrapper := __TSockAddrIn__Wrapper.Create;
__wrapper.fR := TCustomWinSocket(Instance).RemoteAddr;
result := IUnknown(__wrapper) as IDispatch;
end;

function __DC__GetTCustomWinSocket__Connected(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomWinSocket(Instance).Connected;
end;

function __DC__GetTCustomWinSocket__Addr(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TSockAddrIn__Wrapper;
begin
__wrapper := __TSockAddrIn__Wrapper.Create;
__wrapper.fR := TCustomWinSocket(Instance).Addr;
result := IUnknown(__wrapper) as IDispatch;
end;

function __DC__GetTCustomWinSocket__ASyncStyles(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TAsyncStyles;
begin
tmp := TCustomWinSocket(Instance).ASyncStyles;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTCustomWinSocket__ASyncStyles(Instance : TObject; Params : PVariantArgList);
var
  tmp : TAsyncStyles;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TCustomWinSocket(Instance).ASyncStyles:=tmp;
end;

function __DC__GetTCustomWinSocket__Handle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomWinSocket(Instance).Handle;
end;

function __DC__GetTCustomWinSocket__SocketHandle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomWinSocket(Instance).SocketHandle;
end;

function __DC__GetTCustomWinSocket__LookupState(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomWinSocket(Instance).LookupState;
end;

function __DC__GetTCustomWinSocket__Data(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TCustomWinSocket(Instance).Data);
end;

procedure __DC__SetTCustomWinSocket__Data(Instance : TObject; Params : PVariantArgList);
begin
TCustomWinSocket(Instance).Data:=VarToPointer(OleVariant(Params^[0]));
end;

function __DC__GetTServerAcceptThread__ServerSocket(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TServerAcceptThread(Instance).ServerSocket);
end;

function __DC__GetTServerClientThread__ClientSocket(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TServerClientThread(Instance).ClientSocket);
end;

function __DC__GetTServerClientThread__ServerSocket(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TServerClientThread(Instance).ServerSocket);
end;

function __DC__GetTServerClientThread__KeepInCache(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TServerClientThread(Instance).KeepInCache;
end;

procedure __DC__SetTServerClientThread__KeepInCache(Instance : TObject; Params : PVariantArgList);
begin
TServerClientThread(Instance).KeepInCache:=OleVariant(Params^[0]);
end;

function __DC__GetTServerClientThread__Data(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TServerClientThread(Instance).Data);
end;

procedure __DC__SetTServerClientThread__Data(Instance : TObject; Params : PVariantArgList);
begin
TServerClientThread(Instance).Data:=VarToPointer(OleVariant(Params^[0]));
end;

function __DC__GetTServerClientWinSocket__ServerWinSocket(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TServerClientWinSocket(Instance).ServerWinSocket);
end;

function __DC__GetTServerSocket__Socket(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TServerSocket(Instance).Socket);
end;

function __DC__GetTServerWinSocket__ActiveConnections(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TServerWinSocket(Instance).ActiveConnections;
end;

function __DC__GetTServerWinSocket__ActiveThreads(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TServerWinSocket(Instance).ActiveThreads;
end;

function __DC__GetTServerWinSocket__Connections(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TServerWinSocket(Instance).Connections[OleVariant(Params^[0])]);
end;

function __DC__GetTServerWinSocket__IdleThreads(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TServerWinSocket(Instance).IdleThreads;
end;

function __DC__GetTServerWinSocket__ServerType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TServerWinSocket(Instance).ServerType;
end;

procedure __DC__SetTServerWinSocket__ServerType(Instance : TObject; Params : PVariantArgList);
begin
TServerWinSocket(Instance).ServerType:=OleVariant(Params^[0]);
end;

function __DC__GetTServerWinSocket__ThreadCacheSize(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TServerWinSocket(Instance).ThreadCacheSize;
end;

procedure __DC__SetTServerWinSocket__ThreadCacheSize(Instance : TObject; Params : PVariantArgList);
begin
TServerWinSocket(Instance).ThreadCacheSize:=OleVariant(Params^[0]);
end;

function __DC__GetTWinSocketStream__TimeOut(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWinSocketStream(Instance).TimeOut;
end;

procedure __DC__SetTWinSocketStream__TimeOut(Instance : TObject; Params : PVariantArgList);
begin
TWinSocketStream(Instance).TimeOut:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TClientSocket,'Socket',__DC__GetTClientSocket__Socket,nil);
RegisterProperty(TClientWinSocket,'ClientType',__DC__GetTClientWinSocket__ClientType,__DC__SetTClientWinSocket__ClientType);
RegisterProperty(TCustomWinSocket,'LocalHost',__DC__GetTCustomWinSocket__LocalHost,nil);
RegisterProperty(TCustomWinSocket,'LocalAddress',__DC__GetTCustomWinSocket__LocalAddress,nil);
RegisterProperty(TCustomWinSocket,'LocalPort',__DC__GetTCustomWinSocket__LocalPort,nil);
RegisterProperty(TCustomWinSocket,'RemoteHost',__DC__GetTCustomWinSocket__RemoteHost,nil);
RegisterProperty(TCustomWinSocket,'RemoteAddress',__DC__GetTCustomWinSocket__RemoteAddress,nil);
RegisterProperty(TCustomWinSocket,'RemotePort',__DC__GetTCustomWinSocket__RemotePort,nil);
RegisterProperty(TCustomWinSocket,'RemoteAddr',__DC__GetTCustomWinSocket__RemoteAddr,nil);
RegisterProperty(TCustomWinSocket,'Connected',__DC__GetTCustomWinSocket__Connected,nil);
RegisterProperty(TCustomWinSocket,'Addr',__DC__GetTCustomWinSocket__Addr,nil);
RegisterProperty(TCustomWinSocket,'ASyncStyles',__DC__GetTCustomWinSocket__ASyncStyles,__DC__SetTCustomWinSocket__ASyncStyles);
RegisterProperty(TCustomWinSocket,'Handle',__DC__GetTCustomWinSocket__Handle,nil);
RegisterProperty(TCustomWinSocket,'SocketHandle',__DC__GetTCustomWinSocket__SocketHandle,nil);
RegisterProperty(TCustomWinSocket,'LookupState',__DC__GetTCustomWinSocket__LookupState,nil);
RegisterProperty(TCustomWinSocket,'Data',__DC__GetTCustomWinSocket__Data,__DC__SetTCustomWinSocket__Data);
RegisterProperty(TServerAcceptThread,'ServerSocket',__DC__GetTServerAcceptThread__ServerSocket,nil);
RegisterProperty(TServerClientThread,'ClientSocket',__DC__GetTServerClientThread__ClientSocket,nil);
RegisterProperty(TServerClientThread,'ServerSocket',__DC__GetTServerClientThread__ServerSocket,nil);
RegisterProperty(TServerClientThread,'KeepInCache',__DC__GetTServerClientThread__KeepInCache,__DC__SetTServerClientThread__KeepInCache);
RegisterProperty(TServerClientThread,'Data',__DC__GetTServerClientThread__Data,__DC__SetTServerClientThread__Data);
RegisterProperty(TServerClientWinSocket,'ServerWinSocket',__DC__GetTServerClientWinSocket__ServerWinSocket,nil);
RegisterProperty(TServerSocket,'Socket',__DC__GetTServerSocket__Socket,nil);
RegisterProperty(TServerWinSocket,'ActiveConnections',__DC__GetTServerWinSocket__ActiveConnections,nil);
RegisterProperty(TServerWinSocket,'ActiveThreads',__DC__GetTServerWinSocket__ActiveThreads,nil);
RegisterIndexedProperty(TServerWinSocket,'Connections',1,False,__DC__GetTServerWinSocket__Connections,nil);
RegisterProperty(TServerWinSocket,'IdleThreads',__DC__GetTServerWinSocket__IdleThreads,nil);
RegisterProperty(TServerWinSocket,'ServerType',__DC__GetTServerWinSocket__ServerType,__DC__SetTServerWinSocket__ServerType);
RegisterProperty(TServerWinSocket,'ThreadCacheSize',__DC__GetTServerWinSocket__ThreadCacheSize,__DC__SetTServerWinSocket__ThreadCacheSize);
RegisterProperty(TWinSocketStream,'TimeOut',__DC__GetTWinSocketStream__TimeOut,__DC__SetTWinSocketStream__TimeOut);
end;

const __ConstNames0 : array[0..30] of string = (
'CM_SOCKETMESSAGE'
,'CM_DEFERFREE'
,'CM_LOOKUPCOMPLETE'
,'stNonBlocking'
,'stThreadBlocking'
,'ctNonBlocking'
,'ctBlocking'
,'asRead'
,'asWrite'
,'asOOB'
,'asAccept'
,'asConnect'
,'asClose'
,'seLookup'
,'seConnecting'
,'seConnect'
,'seDisconnect'
,'seListen'
,'seAccept'
,'seWrite'
,'seRead'
,'lsIdle'
,'lsLookupAddress'
,'lsLookupService'
,'eeGeneral'
,'eeSend'
,'eeReceive'
,'eeConnect'
,'eeDisconnect'
,'eeAccept'
,'eeLookup'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,CM_SOCKETMESSAGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,CM_DEFERFREE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,CM_LOOKUPCOMPLETE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,stNonBlocking));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,stThreadBlocking));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,ctNonBlocking));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,ctBlocking));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,asRead));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,asWrite));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,asOOB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,asAccept));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,asConnect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,asClose));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,seLookup));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,seConnecting));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,seConnect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,seDisconnect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,seListen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,seAccept));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,seWrite));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,seRead));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,lsIdle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,lsLookupAddress));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,lsLookupService));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,eeGeneral));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,eeSend));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,eeReceive));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,eeConnect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,eeDisconnect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,eeAccept));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,eeLookup));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..12] of TClass = (
ESocketError,
TAbstractSocket,
TClientSocket,
TClientWinSocket,
TCustomServerSocket,
TCustomSocket,
TCustomWinSocket,
TServerAcceptThread,
TServerClientThread,
TServerClientWinSocket,
TServerSocket,
TServerWinSocket,
TWinSocketStream
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..1] of string = (
'TCMLookupComplete'
,'TCMSocketMessage'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TCMLookupComplete_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_TCMSocketMessage_)));
//RegRegisterMethod(TAbstractSocket,'Event',TypeInfo(_T1),[TypeInfo(TCustomWinSocket),TypeInfo(TSocketEvent)], pointer(48));
RegRegisterMethod(TAbstractSocket,'Event',TypeInfo(_T1),[TypeInfo(TCustomWinSocket),TypeInfo(TSocketEvent)],  getVMTProcAddr('TAbstractSocket','Event',48));


//RegRegisterMethod(TAbstractSocket,'Error',TypeInfo(_T2),[TypeInfo(TCustomWinSocket),TypeInfo(TErrorEvent),TypeInfo(Integer)], pointer(52));
RegRegisterMethod(TAbstractSocket,'Error',TypeInfo(_T2),[TypeInfo(TCustomWinSocket),TypeInfo(TErrorEvent),TypeInfo(Integer)],  getVMTProcAddr('TAbstractSocket','Error',52));


//RegRegisterMethod(TAbstractSocket,'DoActivate',TypeInfo(_T3),[TypeInfo(Boolean)], pointer(56));
RegRegisterMethod(TAbstractSocket,'DoActivate',TypeInfo(_T3),[TypeInfo(Boolean)],  getVMTProcAddr('TAbstractSocket','DoActivate',56));


RegRegisterMethod(TAbstractSocket,'Open',TypeInfo(_T4),NoParams,Addr(TAbstractSocket.Open));

RegRegisterMethod(TAbstractSocket,'Close',TypeInfo(_T5),NoParams,Addr(TAbstractSocket.Close));

RegRegisterMethod(TCustomWinSocket,'Event',TypeInfo(_T6),[
TypeInfo(TCustomWinSocket),
TypeInfo(TSocketEvent)], pointer(MinVMTOffset - 0));

RegRegisterMethod(TCustomWinSocket,'Error',TypeInfo(_T7),[
TypeInfo(TCustomWinSocket),
TypeInfo(TErrorEvent),
TypeInfo(Integer)], pointer(MinVMTOffset - 1));

RegisterProc(TCustomWinSocket,'Create',mtConstructor,TypeInfo(_T8),[
TypeInfo(TSocket)],Addr(TCustomWinSocket.Create),cRegister);

RegRegisterMethod(TCustomWinSocket,'Close',TypeInfo(_T9),NoParams,Addr(TCustomWinSocket.Close));

RegRegisterMethod(TCustomWinSocket,'Lock',TypeInfo(_T10),NoParams,Addr(TCustomWinSocket.Lock));

RegRegisterMethod(TCustomWinSocket,'Unlock',TypeInfo(_T11),NoParams,Addr(TCustomWinSocket.Unlock));

RegisterProc(TCustomWinSocket,'Listen',mtScriptMethod,TypeInfo(_T12),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(string),
TypeInfo(Word),
TypeInfo(Integer),
TypeInfo(Boolean)],Addr(__TCustomWinSocket__Listen__Wrapper),cRegister);

RegisterProc(TCustomWinSocket,'Open',mtScriptMethod,TypeInfo(_T13),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(string),
TypeInfo(Word),
TypeInfo(Boolean)],Addr(__TCustomWinSocket__Open__Wrapper),cRegister);

//RegRegisterMethod(TCustomWinSocket,'Accept',TypeInfo(_T14),[TypeInfo(TSocket)], pointer(0));
RegRegisterMethod(TCustomWinSocket,'Accept',TypeInfo(_T14),[TypeInfo(TSocket)],  getVMTProcAddr('TCustomWinSocket','Accept',0));


//RegRegisterMethod(TCustomWinSocket,'Connect',TypeInfo(_T15),[TypeInfo(TSocket)], pointer(4));
RegRegisterMethod(TCustomWinSocket,'Connect',TypeInfo(_T15),[TypeInfo(TSocket)],  getVMTProcAddr('TCustomWinSocket','Connect',4));


//RegRegisterMethod(TCustomWinSocket,'Disconnect',TypeInfo(_T16),[TypeInfo(TSocket)], pointer(8));
RegRegisterMethod(TCustomWinSocket,'Disconnect',TypeInfo(_T16),[TypeInfo(TSocket)],  getVMTProcAddr('TCustomWinSocket','Disconnect',8));


//RegRegisterMethod(TCustomWinSocket,'Read',TypeInfo(_T17),[TypeInfo(TSocket)], pointer(12));
RegRegisterMethod(TCustomWinSocket,'Read',TypeInfo(_T17),[TypeInfo(TSocket)],  getVMTProcAddr('TCustomWinSocket','Read',12));


//RegRegisterMethod(TCustomWinSocket,'Write',TypeInfo(_T18),[TypeInfo(TSocket)], pointer(16));
RegRegisterMethod(TCustomWinSocket,'Write',TypeInfo(_T18),[TypeInfo(TSocket)],  getVMTProcAddr('TCustomWinSocket','Write',16));


RegRegisterMethod(TCustomWinSocket,'LookupName',TypeInfo(_T19),[
TypeInfo(string),TypeInfo(IDispatch)],Addr(__TCustomWinSocket__LookupName__Wrapper));

RegRegisterMethod(TCustomWinSocket,'LookupService',TypeInfo(_T20),[
TypeInfo(string),TypeInfo(Integer)],Addr(TCustomWinSocket.LookupService));

RegRegisterMethod(TCustomWinSocket,'ReceiveLength',TypeInfo(_T21),[TypeInfo(Integer)],Addr(TCustomWinSocket.ReceiveLength));

RegRegisterMethod(TCustomWinSocket,'ReceiveBuf',TypeInfo(_T22),[
TypeInfoUntyped,
TypeInfo(Integer),TypeInfo(Integer)],Addr(TCustomWinSocket.ReceiveBuf));

RegRegisterMethod(TCustomWinSocket,'ReceiveText',TypeInfo(_T23),[TypeInfo(string)],Addr(TCustomWinSocket.ReceiveText));

RegRegisterMethod(TCustomWinSocket,'SendBuf',TypeInfo(_T24),[
TypeInfoUntyped,
TypeInfo(Integer),TypeInfo(Integer)],Addr(TCustomWinSocket.SendBuf));

RegRegisterMethod(TCustomWinSocket,'SendStream',TypeInfo(_T25),[
TypeInfo(TStream),TypeInfo(Boolean)],Addr(TCustomWinSocket.SendStream));

RegRegisterMethod(TCustomWinSocket,'SendStreamThenDrop',TypeInfo(_T26),[
TypeInfo(TStream),TypeInfo(Boolean)],Addr(TCustomWinSocket.SendStreamThenDrop));

RegRegisterMethod(TCustomWinSocket,'SendText',TypeInfo(_T27),[
TypeInfo(string),TypeInfo(Integer)],Addr(TCustomWinSocket.SendText));

RegisterProc(TServerAcceptThread,'Create',mtConstructor,TypeInfo(_T28),[
TypeInfo(Boolean),
TypeInfo(TServerWinSocket)],Addr(TServerAcceptThread.Create),cRegister);

//RegRegisterMethod(TServerClientThread,'ClientExecute',TypeInfo(_T29),NoParams, pointer(8));
RegRegisterMethod(TServerClientThread,'ClientExecute',TypeInfo(_T29),NoParams,  getVMTProcAddr('TServerClientThread','ClientExecute',8));


//RegRegisterMethod(TServerClientThread,'Event',TypeInfo(_T30),[TypeInfo(TSocketEvent)], pointer(12));
RegRegisterMethod(TServerClientThread,'Event',TypeInfo(_T30),[TypeInfo(TSocketEvent)],  getVMTProcAddr('TServerClientThread','Event',12));


//RegRegisterMethod(TServerClientThread,'Error',TypeInfo(_T31),[TypeInfo(TErrorEvent),TypeInfo(Integer)], pointer(16));
RegRegisterMethod(TServerClientThread,'Error',TypeInfo(_T31),[TypeInfo(TErrorEvent),TypeInfo(Integer)],  getVMTProcAddr('TServerClientThread','Error',16));


//RegRegisterMethod(TServerClientThread,'HandleException',TypeInfo(_T32),NoParams, pointer(20));
RegRegisterMethod(TServerClientThread,'HandleException',TypeInfo(_T32),NoParams,  getVMTProcAddr('TServerClientThread','HandleException',20));


RegisterProc(TServerClientThread,'Create',mtConstructor,TypeInfo(_T33),[
TypeInfo(Boolean),
TypeInfo(TServerClientWinSocket)],Addr(TServerClientThread.Create),cRegister);

RegisterProc(TServerClientWinSocket,'Create',mtConstructor,TypeInfo(_T34),[
TypeInfo(TSocket),
TypeInfo(TServerWinSocket)],Addr(TServerClientWinSocket.Create),cRegister);

//RegRegisterMethod(TServerWinSocket,'DoCreateThread',TypeInfo(_T35),[TypeInfo(TServerClientWinSocket),TypeInfo(TServerClientThread)], pointer(20));
RegRegisterMethod(TServerWinSocket,'DoCreateThread',TypeInfo(_T35),[TypeInfo(TServerClientWinSocket),TypeInfo(TServerClientThread)],  getVMTProcAddr('TServerWinSocket','DoCreateThread',20));


RegRegisterMethod(TServerWinSocket,'ThreadEnd',TypeInfo(_T36),[
TypeInfo(TServerClientThread)], pointer(MinVMTOffset - 2));

RegRegisterMethod(TServerWinSocket,'ThreadStart',TypeInfo(_T37),[
TypeInfo(TServerClientThread)], pointer(MinVMTOffset - 3));

RegRegisterMethod(TServerWinSocket,'GetClientSocket',TypeInfo(_T38),[
TypeInfo(TSocket),TypeInfo(TServerClientWinSocket)], pointer(MinVMTOffset - 4));

RegRegisterMethod(TServerWinSocket,'GetServerThread',TypeInfo(_T39),[
TypeInfo(TServerClientWinSocket),TypeInfo(TServerClientThread)], pointer(MinVMTOffset - 5));

RegRegisterMethod(TServerWinSocket,'ClientRead',TypeInfo(_T40),[
TypeInfo(TCustomWinSocket)], pointer(MinVMTOffset - 6));

RegRegisterMethod(TServerWinSocket,'ClientWrite',TypeInfo(_T41),[
TypeInfo(TCustomWinSocket)], pointer(MinVMTOffset - 7));

RegRegisterMethod(TServerWinSocket,'ClientConnect',TypeInfo(_T42),[
TypeInfo(TCustomWinSocket)], pointer(MinVMTOffset - 8));

RegRegisterMethod(TServerWinSocket,'ClientDisconnect',TypeInfo(_T43),[
TypeInfo(TCustomWinSocket)], pointer(MinVMTOffset - 9));

RegRegisterMethod(TServerWinSocket,'ClientErrorEvent',TypeInfo(_T44),[
TypeInfo(TCustomWinSocket),
TypeInfo(TErrorEvent),
TypeInfo(Integer)], pointer(MinVMTOffset - 10));

RegisterProc(TServerWinSocket,'Create',mtConstructor,TypeInfo(_T45),[
TypeInfo(TSocket)],Addr(TServerWinSocket.Create),cRegister);

RegRegisterMethod(TServerWinSocket,'GetClientThread',TypeInfo(_T46),[
TypeInfo(TServerClientWinSocket),TypeInfo(TServerClientThread)],Addr(TServerWinSocket.GetClientThread));

RegisterProc(TWinSocketStream,'Create',mtConstructor,TypeInfo(_T47),[
TypeInfo(TCustomWinSocket),
TypeInfo(Longint)],Addr(TWinSocketStream.Create),cRegister);

RegRegisterMethod(TWinSocketStream,'WaitForData',TypeInfo(_T48),[
TypeInfo(Longint),TypeInfo(Boolean)],Addr(TWinSocketStream.WaitForData));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'SetErrorProc',mtProc,TypeInfo(_T0),[
TypeInfo(TSocketErrorProc),TypeInfo(TSocketErrorProc)],Addr(SetErrorProc),cRegister)}

RegisterEvent(TypeInfo(TGetSocketEvent),[
TypeInfo(TObject),
TypeInfo(TSocket),
TypeInfo(TServerClientWinSocket)]);

RegisterEvent(TypeInfo(TGetThreadEvent),[
TypeInfo(TObject),
TypeInfo(TServerClientWinSocket),
TypeInfo(TServerClientThread)]);

RegisterEvent(TypeInfo(TSocketErrorEvent),[
TypeInfo(TObject),
TypeInfo(TCustomWinSocket),
TypeInfo(TErrorEvent),
TypeInfo(Integer)]);

RegisterEvent(TypeInfo(TSocketEventEvent),[
TypeInfo(TObject),
TypeInfo(TCustomWinSocket),
TypeInfo(TSocketEvent)]);

RegisterEvent(TypeInfo(TSocketNotifyEvent),[
TypeInfo(TObject),
TypeInfo(TCustomWinSocket)]);

RegisterEvent(TypeInfo(TThreadNotifyEvent),[
TypeInfo(TObject),
TypeInfo(TServerClientThread)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
