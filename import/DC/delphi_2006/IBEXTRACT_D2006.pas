{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IBEXTRACT_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Classes,
  IBDatabase,
  IBDatabaseInfo,
  IBSQL,
  IBUtils,
  IBHeader,
  IB,
  IBIntf,
  IBExternals,
  IBExtract;
function ConvertTPrivTypesToVariant(var R : TPrivTypes) : OleVariant;
function ConvertVariantToTPrivTypes(const V : OleVariant) : TPrivTypes;
function ConvertTSQLTypeToVariant(var R : TSQLType) : OleVariant;
function ConvertVariantToTSQLType(const V : OleVariant) : TSQLType;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TPrivTypes__Wrapper = class(TDCRecordWrapper)
private
fR : TPrivTypes;
public
function GetRecordPtr : pointer; override;
published
procedure setPrivFlag(const val : Integer);
function getPrivFlag : Integer;
property PrivFlag : Integer read getPrivFlag write setPrivFlag;
procedure setPrivString(const val : AnsiString);
function getPrivString : AnsiString;
property PrivString : AnsiString read getPrivString write setPrivString;
end;
type __TSQLType__Wrapper = class(TDCRecordWrapper)
private
fR : TSQLType;
public
function GetRecordPtr : pointer; override;
published
procedure setSqlType(const val : Integer);
function getSqlType : Integer;
property SqlType : Integer read getSqlType write setSqlType;
procedure setTypeName(const val : AnsiString);
function getTypeName : AnsiString;
property TypeName : AnsiString read getTypeName write setTypeName;
end;
type
_T0 = function (p0 : String): String of object;

_T1 = function (p0 : Integer;
p1 : Integer;
p2 : Integer;
p3 : Integer;
p4 : Integer;
p5 : Integer): String of object;

_T2 = function (p0 : Short;
p1 : Short;
p2 : Boolean): String of object;

_T3 = procedure (p0 : TExtractObjectTypes;
p1 : String;
p2 : TExtractTypes) of object;

function __TPrivTypes__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPrivTypes__Wrapper.setPrivFlag(const val : Integer);
begin
TPrivTypes(GetRecordPtr^).PrivFlag := val;
end;
function __TPrivTypes__Wrapper.getPrivFlag : Integer;
begin
result := TPrivTypes(GetRecordPtr^).PrivFlag;
end;
procedure __TPrivTypes__Wrapper.setPrivString(const val : AnsiString);
begin
TPrivTypes(GetRecordPtr^).PrivString := val;
end;
function __TPrivTypes__Wrapper.getPrivString : AnsiString;
begin
result := TPrivTypes(GetRecordPtr^).PrivString;
end;
function __TSQLType__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSQLType__Wrapper.setSqlType(const val : Integer);
begin
TSQLType(GetRecordPtr^).SqlType := val;
end;
function __TSQLType__Wrapper.getSqlType : Integer;
begin
result := TSQLType(GetRecordPtr^).SqlType;
end;
procedure __TSQLType__Wrapper.setTypeName(const val : AnsiString);
begin
TSQLType(GetRecordPtr^).TypeName := val;
end;
function __TSQLType__Wrapper.getTypeName : AnsiString;
begin
result := TSQLType(GetRecordPtr^).TypeName;
end;
function _TPrivTypes_ : IDispatch;
begin
  result := __TPrivTypes__Wrapper.Create;
end;
function _TSQLType_ : IDispatch;
begin
  result := __TSQLType__Wrapper.Create;
end;
procedure __TIBExtract__ExtractObject__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
var
__s2 : TExtractTypes;
begin
if cArgs > 2 then
VarToSet(__s2,OleVariant(pargs^[2]),SizeOf(TExtractTypes));
case cArgs of
1:
begin
TIBExtract(__Instance).ExtractObject(OleVariant(pargs^[0]));
end;
2:
begin
TIBExtract(__Instance).ExtractObject(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
3:
begin
TIBExtract(__Instance).ExtractObject(OleVariant(pargs^[2]),OleVariant(pargs^[1]),__s2);
end;
end
end;


type __TPrivTypes__Wrapper__ = class(__TPrivTypes__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPrivTypes__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPrivTypesToVariant(var R : TPrivTypes) : OleVariant;
var
__rw : __TPrivTypes__Wrapper__;
begin
__rw := __TPrivTypes__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPrivTypes(const V : OleVariant) : TPrivTypes;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPrivTypes((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSQLType__Wrapper__ = class(__TSQLType__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSQLType__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSQLTypeToVariant(var R : TSQLType) : OleVariant;
var
__rw : __TSQLType__Wrapper__;
begin
__rw := __TSQLType__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSQLType(const V : OleVariant) : TSQLType;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSQLType((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTIBExtract__DatabaseInfo(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBExtract(Instance).DatabaseInfo);
end;

function __DC__GetTIBExtract__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIBExtract(Instance).Items);
end;

procedure __RegisterProps;
begin
RegisterProperty(TIBExtract,'DatabaseInfo',__DC__GetTIBExtract__DatabaseInfo,nil);
RegisterProperty(TIBExtract,'Items',__DC__GetTIBExtract__Items,nil);
end;

const __ConstNames0 : array[0..61] of string = (
'eoDatabase'
,'eoDomain'
,'eoTable'
,'eoView'
,'eoProcedure'
,'eoFunction'
,'eoGenerator'
,'eoException'
,'eoBLOBFilter'
,'eoRole'
,'eoTrigger'
,'eoForeign'
,'eoIndexes'
,'eoChecks'
,'eoData'
,'etDomain'
,'etTable'
,'etRole'
,'etTrigger'
,'etForeign'
,'etIndex'
,'etData'
,'etGrant'
,'etCheck'
,'etAlterProc'
,'priv_UNKNOWN'
,'priv_SELECT'
,'priv_INSERT'
,'priv_UPDATE'
,'priv_DELETE'
,'priv_EXECUTE'
,'priv_REFERENCES'
,'ODS_VERSION6'
,'ODS_VERSION7'
,'ODS_VERSION8'
,'ODS_VERSION9'
,'ODS_VERSION10'
,'FILE_shadow'
,'FILE_inactive'
,'FILE_manual'
,'FILE_cache'
,'FILE_conditional'
,'LOG_serial'
,'LOG_default'
,'LOG_raw'
,'LOG_overflow'
,'MAX_INTSUBTYPES'
,'MAXSUBTYPES'
,'obj_relation'
,'obj_view'
,'obj_trigger'
,'obj_computed'
,'obj_validation'
,'obj_procedure'
,'obj_expression_index'
,'obj_exception'
,'obj_user'
,'obj_field'
,'obj_index'
,'obj_count'
,'obj_user_group'
,'obj_sql_role'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,eoDatabase));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,eoDomain));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,eoTable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,eoView));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,eoProcedure));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,eoFunction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,eoGenerator));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,eoException));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,eoBLOBFilter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,eoRole));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,eoTrigger));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,eoForeign));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,eoIndexes));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,eoChecks));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,eoData));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,etDomain));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,etTable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,etRole));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,etTrigger));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,etForeign));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,etIndex));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,etData));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,etGrant));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,etCheck));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,etAlterProc));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,priv_UNKNOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,priv_SELECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,priv_INSERT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,priv_UPDATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,priv_DELETE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,priv_EXECUTE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,priv_REFERENCES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,ODS_VERSION6));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,ODS_VERSION7));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,ODS_VERSION8));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,ODS_VERSION9));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,ODS_VERSION10));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,FILE_shadow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,FILE_inactive));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,FILE_manual));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,FILE_cache));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,FILE_conditional));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,LOG_serial));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,LOG_default));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,LOG_raw));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,LOG_overflow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,MAX_INTSUBTYPES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,MAXSUBTYPES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,obj_relation));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,obj_view));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,obj_trigger));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,obj_computed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,obj_validation));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,obj_procedure));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,obj_expression_index));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,obj_exception));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,obj_user));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,obj_field));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,obj_index));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,obj_count));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,obj_user_group));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,obj_sql_role));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..0] of TClass = (
TIBExtract
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..1] of string = (
'TPrivTypes'
,'TSQLType'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TPrivTypes_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_TSQLType_)));
RegRegisterMethod(TIBExtract,'GetArrayField',TypeInfo(_T0),[
TypeInfo(String),TypeInfo(String)],Addr(TIBExtract.GetArrayField));

RegRegisterMethod(TIBExtract,'GetFieldType',TypeInfo(_T1),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(String)],Addr(TIBExtract.GetFieldType));

RegRegisterMethod(TIBExtract,'GetCharacterSets',TypeInfo(_T2),[
TypeInfo(Short),
TypeInfo(Short),
TypeInfo(Boolean),TypeInfo(String)],Addr(TIBExtract.GetCharacterSets));

RegisterProc(TIBExtract,'ExtractObject',mtScriptMethod,TypeInfo(_T3),[
TypeInfo(TExtractObjectTypes),
TypeInfo(String),
TypeInfo(TExtractTypes)],Addr(__TIBExtract__ExtractObject__Wrapper),cRegister);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
