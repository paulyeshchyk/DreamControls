{*******************************************************}
{                                                       }
{ Import unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

Unit DBClient_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  SysUtils,
  VarUtils,
  Variants,
  Classes,
  DB,
  DSIntf,
  DBCommon,
  DBCommonTypes,
  Midas,
  SqlTimSt,
  ActiveX,
  DBClient;
function ConvertTCDSKeyBufferToVariant(var R : TCDSKeyBuffer) : OleVariant;
function ConvertVariantToTCDSKeyBuffer(const V : OleVariant) : TCDSKeyBuffer;
function ConvertTCDSRecInfoToVariant(var R : TCDSRecInfo) : OleVariant;
function ConvertVariantToTCDSRecInfo(const V : OleVariant) : TCDSRecInfo;
function ConvertTKeyBufferToVariant(var R : TKeyBuffer) : OleVariant;
function ConvertVariantToTKeyBuffer(const V : OleVariant) : TKeyBuffer;
function ConvertTRecInfoToVariant(var R : TRecInfo) : OleVariant;
function ConvertVariantToTRecInfo(const V : OleVariant) : TRecInfo;
function ConvertTReconcileInfoToVariant(var R : TReconcileInfo) : OleVariant;
function ConvertVariantToTReconcileInfo(const V : OleVariant) : TReconcileInfo;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TCDSKeyBuffer__Wrapper = class(TDCRecordWrapper)
private
fR : TCDSKeyBuffer;
public
function GetRecordPtr : pointer; override;
published
procedure setModified(const val : Boolean);
function getModified : Boolean;
property Modified : Boolean read getModified write setModified;
procedure setExclusive(const val : Boolean);
function getExclusive : Boolean;
property Exclusive : Boolean read getExclusive write setExclusive;
procedure setFieldCount(const val : Integer);
function getFieldCount : Integer;
property FieldCount : Integer read getFieldCount write setFieldCount;
end;
type __TCDSRecInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TCDSRecInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setRecordNumber(const val : Longint);
function getRecordNumber : Longint;
property RecordNumber : Longint read getRecordNumber write setRecordNumber;
procedure setBookmarkFlag(const val : TBookmarkFlag);
function getBookmarkFlag : TBookmarkFlag;
property BookmarkFlag : TBookmarkFlag read getBookmarkFlag write setBookmarkFlag;
end;
type __TKeyBuffer__Wrapper = class(TDCRecordWrapper)
private
fR : TKeyBuffer;
public
function GetRecordPtr : pointer; override;
published
procedure setModified(const val : Boolean);
function getModified : Boolean;
property Modified : Boolean read getModified write setModified;
procedure setExclusive(const val : Boolean);
function getExclusive : Boolean;
property Exclusive : Boolean read getExclusive write setExclusive;
procedure setFieldCount(const val : Integer);
function getFieldCount : Integer;
property FieldCount : Integer read getFieldCount write setFieldCount;
end;
type __TRecInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TRecInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setRecordNumber(const val : Longint);
function getRecordNumber : Longint;
property RecordNumber : Longint read getRecordNumber write setRecordNumber;
procedure setBookmarkFlag(const val : TBookmarkFlag);
function getBookmarkFlag : TBookmarkFlag;
property BookmarkFlag : TBookmarkFlag read getBookmarkFlag write setBookmarkFlag;
end;
type __TReconcileInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TReconcileInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setDataSet(const val : TDataSet);
function getDataSet : TDataSet;
property DataSet : TDataSet read getDataSet write setDataSet;
procedure setUpdateKind(const val : TUpdateKind);
function getUpdateKind : TUpdateKind;
property UpdateKind : TUpdateKind read getUpdateKind write setUpdateKind;
procedure setReconcileError(const val : EReconcileError);
function getReconcileError : EReconcileError;
property ReconcileError : EReconcileError read getReconcileError write setReconcileError;
end;
type
_T0 = function (Params : TParams;
Types : TParamTypes): OleVariant of object;

_T1 = procedure (const Source : OleVariant;
Dest : TParams) of object;

_T2 = procedure (Message : string;
ErrorCode : DBResult) of object;

_T3 = procedure (NativeError : string;
Context : string;
ErrorCode : DBResult;
PreviousError : DBResult) of object;

_T4 = procedure (Aggregates : TAggregates;
ADataSet : TCustomClientDataSet) of object;

_T5 = function : Variant of object;

_T209 = function : TBookmark of object;


_T6 = procedure (Owner : TPersistent) of object;

_T7 = function : TAggregate of object;

_T8 = procedure  of object;

_T9 = function (const DisplayName : string): TAggregate of object;

_T10 = function (const DisplayName : string): Integer of object;

_T11 = procedure (Field : TBlobField;
Mode : TBlobStreamMode) of object;

_T12 = _T8;

_T13 = procedure (var OwnerData : OleVariant) of object;

_T14 = _T13;

_T15 = function (Delta : OleVariant;
MaxErrors : Integer;
var ErrorCount : Integer): OleVariant of object;

_T16 = _T13;

_T17 = _T13;

_T18 = _T13;

_T19 = _T13;

_T20 = function (Count : Integer;
var RecsOut : Integer;
Options : Integer;
const CommandText : WideString;
Params : OleVariant): OleVariant of object;

_T21 = _T13;

_T22 = _T13;

_T23 = function (Row : OleVariant;
RequestType : Integer): OleVariant of object;

_T24 = _T13;

_T25 = _T13;

_T26 = procedure (Params : OleVariant) of object;

_T27 = procedure (const Data : OleVariant;
HitEOF : Boolean) of object;

_T28 = _T8;

_T29 = _T8;

_T30 = _T8;

_T31 = procedure (All : Boolean) of object;

{_T32 = function : IAppServer of object;}

_T33 = function : Boolean of object;

_T34 = function : TCustomRemoteServer of object;

_T35 = procedure (Value : TAggregates) of object;

{_T36 = procedure (Value : IAppServer) of object;}

_T37 = procedure (Value : WideString) of object;

_T38 = procedure (Value : Boolean) of object;

_T39 = procedure (Value : TCustomRemoteServer) of object;

_T40 = procedure (const Name : string;
const Fields : string;
Options : TIndexOptions;
const DescFields : string;
const CaseInsFields : string;
const GroupingLevel : Integer) of object;

_T41 = _T27;

_T42 = _T8;

_T43 = function (MaxErrors : Integer): Integer of object;

_T44 = _T8;

_T45 = _T8;

_T46 = _T8;

_T47 = procedure (Source : TCustomClientDataSet;
Reset : Boolean;
KeepSettings : Boolean) of object;

_T48 = _T33;

_T49 = function (Data : OleVariant): OleVariant of object;

_T50 = procedure (const Name : string) of object;

_T51 = _T8;

_T52 = _T8;

_T53 = _T8;

_T54 = _T8;

_T55 = _T8;

_T56 = _T8;

_T57 = _T8;

_T58 = _T8;

_T59 = _T8;

_T60 = _T8;

_T61 = _T8;

_T62 = function (const KeyValues : Array of Const): Boolean of object;

_T63 = procedure (const KeyValues : Array of Const) of object;

_T64 = function (Level : Integer): TGroupPosInds of object;

_T65 = procedure (IndexName : string) of object;

_T66 = procedure (List : TStrings) of object;

_T67 = function : Integer of object;

_T68 = function (const ParamName : string): OleVariant of object;

_T69 = procedure (DataSet : TCustomClientDataSet) of object;

_T70 = _T33;

_T71 = _T8;

_T72 = procedure (const FileName : string) of object;

_T73 = procedure (Stream : TStream) of object;

_T74 = _T8;

_T75 = function (const Results : OleVariant): Boolean of object;

_T76 = _T8;

_T77 = procedure (const FileName : string;
Format : TDataPacketFormat) of object;

_T78 = procedure (Stream : TStream;
Format : TDataPacketFormat) of object;

_T79 = procedure (Old : TRecordBuffer;
New : TRecordBuffer;
Cur : TRecordBuffer) of object;

_T80 = _T8;

_T81 = procedure (const ParamName : string;
const Value : OleVariant;
IncludeInDelta : Boolean) of object;

_T82 = procedure (Provider : TComponent) of object;

_T83 = procedure (const StartValues : Array of Const;
const EndValues : Array of Const) of object;

_T84 = _T8;

_T85 = _T8;

_T86 = function (FollowChange : Boolean): Boolean of object;

_T87 = _T5;

_T88 = procedure (Value : Variant) of object;

{_T89 = function : IAppServer of object;}

_T90 = function : OleVariant of object;

_T91 = procedure (Proc : TGetStrProc) of object;

function __TCDSKeyBuffer__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCDSKeyBuffer__Wrapper.setModified(const val : Boolean);
begin
TCDSKeyBuffer(GetRecordPtr^).Modified := val;
end;
function __TCDSKeyBuffer__Wrapper.getModified : Boolean;
begin
result := TCDSKeyBuffer(GetRecordPtr^).Modified;
end;
procedure __TCDSKeyBuffer__Wrapper.setExclusive(const val : Boolean);
begin
TCDSKeyBuffer(GetRecordPtr^).Exclusive := val;
end;
function __TCDSKeyBuffer__Wrapper.getExclusive : Boolean;
begin
result := TCDSKeyBuffer(GetRecordPtr^).Exclusive;
end;
procedure __TCDSKeyBuffer__Wrapper.setFieldCount(const val : Integer);
begin
TCDSKeyBuffer(GetRecordPtr^).FieldCount := val;
end;
function __TCDSKeyBuffer__Wrapper.getFieldCount : Integer;
begin
result := TCDSKeyBuffer(GetRecordPtr^).FieldCount;
end;
function __TCDSRecInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCDSRecInfo__Wrapper.setRecordNumber(const val : Longint);
begin
TCDSRecInfo(GetRecordPtr^).RecordNumber := val;
end;
function __TCDSRecInfo__Wrapper.getRecordNumber : Longint;
begin
result := TCDSRecInfo(GetRecordPtr^).RecordNumber;
end;
procedure __TCDSRecInfo__Wrapper.setBookmarkFlag(const val : TBookmarkFlag);
begin
TCDSRecInfo(GetRecordPtr^).BookmarkFlag := val;
end;
function __TCDSRecInfo__Wrapper.getBookmarkFlag : TBookmarkFlag;
begin
result := TCDSRecInfo(GetRecordPtr^).BookmarkFlag;
end;
function __TKeyBuffer__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TKeyBuffer__Wrapper.setModified(const val : Boolean);
begin
TKeyBuffer(GetRecordPtr^).Modified := val;
end;
function __TKeyBuffer__Wrapper.getModified : Boolean;
begin
result := TKeyBuffer(GetRecordPtr^).Modified;
end;
procedure __TKeyBuffer__Wrapper.setExclusive(const val : Boolean);
begin
TKeyBuffer(GetRecordPtr^).Exclusive := val;
end;
function __TKeyBuffer__Wrapper.getExclusive : Boolean;
begin
result := TKeyBuffer(GetRecordPtr^).Exclusive;
end;
procedure __TKeyBuffer__Wrapper.setFieldCount(const val : Integer);
begin
TKeyBuffer(GetRecordPtr^).FieldCount := val;
end;
function __TKeyBuffer__Wrapper.getFieldCount : Integer;
begin
result := TKeyBuffer(GetRecordPtr^).FieldCount;
end;
function __TRecInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRecInfo__Wrapper.setRecordNumber(const val : Longint);
begin
TRecInfo(GetRecordPtr^).RecordNumber := val;
end;
function __TRecInfo__Wrapper.getRecordNumber : Longint;
begin
result := TRecInfo(GetRecordPtr^).RecordNumber;
end;
procedure __TRecInfo__Wrapper.setBookmarkFlag(const val : TBookmarkFlag);
begin
TRecInfo(GetRecordPtr^).BookmarkFlag := val;
end;
function __TRecInfo__Wrapper.getBookmarkFlag : TBookmarkFlag;
begin
result := TRecInfo(GetRecordPtr^).BookmarkFlag;
end;
function __TReconcileInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TReconcileInfo__Wrapper.setDataSet(const val : TDataSet);
begin
TReconcileInfo(GetRecordPtr^).DataSet := val;
end;
function __TReconcileInfo__Wrapper.getDataSet : TDataSet;
begin
result := TReconcileInfo(GetRecordPtr^).DataSet;
end;
procedure __TReconcileInfo__Wrapper.setUpdateKind(const val : TUpdateKind);
begin
TReconcileInfo(GetRecordPtr^).UpdateKind := val;
end;
function __TReconcileInfo__Wrapper.getUpdateKind : TUpdateKind;
begin
result := TReconcileInfo(GetRecordPtr^).UpdateKind;
end;
procedure __TReconcileInfo__Wrapper.setReconcileError(const val : EReconcileError);
begin
TReconcileInfo(GetRecordPtr^).ReconcileError := val;
end;
function __TReconcileInfo__Wrapper.getReconcileError : EReconcileError;
begin
result := TReconcileInfo(GetRecordPtr^).ReconcileError;
end;
function _TCDSKeyBuffer_ : IDispatch;
begin
  result := __TCDSKeyBuffer__Wrapper.Create;
end;
function _TCDSRecInfo_ : IDispatch;
begin
  result := __TCDSRecInfo__Wrapper.Create;
end;
function _TKeyBuffer_ : IDispatch;
begin
  result := __TKeyBuffer__Wrapper.Create;
end;
function _TRecInfo_ : IDispatch;
begin
  result := __TRecInfo__Wrapper.Create;
end;
function _TReconcileInfo_ : IDispatch;
begin
  result := __TReconcileInfo__Wrapper.Create;
end;
function ____PackageParams__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
var
__s1 : TParamTypes;
begin
if cArgs > 1 then
VarToSet(__s1,OleVariant(pargs^[1]),SizeOf(TParamTypes));
case cArgs of
1:
begin
result := PackageParams(TParams(VarToObject(OleVariant(pargs^[0]))));
end;
2:
begin
result := PackageParams(TParams(VarToObject(OleVariant(pargs^[1]))),__s1);
end;
end
end;

procedure __TCustomClientDataSet__AddIndex__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
var
__s2 : TIndexOptions;
begin
if cArgs > 2 then
VarToSet(__s2,OleVariant(pargs^[2]),SizeOf(TIndexOptions));
case cArgs of
3:
begin
TCustomClientDataSet(__Instance).AddIndex(OleVariant(pargs^[2]),OleVariant(pargs^[1]),__s2);
end;
4:
begin
TCustomClientDataSet(__Instance).AddIndex(OleVariant(pargs^[3]),OleVariant(pargs^[2]),__s2,OleVariant(pargs^[0]));
end;
5:
begin
TCustomClientDataSet(__Instance).AddIndex(OleVariant(pargs^[4]),OleVariant(pargs^[3]),__s2,OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
6:
begin
TCustomClientDataSet(__Instance).AddIndex(OleVariant(pargs^[5]),OleVariant(pargs^[4]),__s2,OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure __TCustomClientDataSet__CloneCursor__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
2:
begin
TCustomClientDataSet(__Instance).CloneCursor(TCustomClientDataSet(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
end;
3:
begin
TCustomClientDataSet(__Instance).CloneCursor(TCustomClientDataSet(VarToObject(OleVariant(pargs^[2]))),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure __TCustomClientDataSet__LoadFromFile__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
0:
begin
TCustomClientDataSet(__Instance).LoadFromFile;
end;
1:
begin
TCustomClientDataSet(__Instance).LoadFromFile(OleVariant(pargs^[0]));
end;
end
end;

procedure __TCustomClientDataSet__SaveToFile__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
0:
begin
TCustomClientDataSet(__Instance).SaveToFile;
end;
1:
begin
TCustomClientDataSet(__Instance).SaveToFile(OleVariant(pargs^[0]));
end;
2:
begin
TCustomClientDataSet(__Instance).SaveToFile(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure __TCustomClientDataSet__SaveToStream__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
TCustomClientDataSet(__Instance).SaveToStream(TStream(VarToObject(OleVariant(pargs^[0]))));
end;
2:
begin
TCustomClientDataSet(__Instance).SaveToStream(TStream(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
end;
end
end;

procedure __TCustomClientDataSet__SetOptionalParam__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
2:
begin
TCustomClientDataSet(__Instance).SetOptionalParam(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
3:
begin
TCustomClientDataSet(__Instance).SetOptionalParam(OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;


type __TCDSKeyBuffer__Wrapper__ = class(__TCDSKeyBuffer__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCDSKeyBuffer__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCDSKeyBufferToVariant(var R : TCDSKeyBuffer) : OleVariant;
var
__rw : __TCDSKeyBuffer__Wrapper__;
begin
__rw := __TCDSKeyBuffer__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCDSKeyBuffer(const V : OleVariant) : TCDSKeyBuffer;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCDSKeyBuffer((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCDSRecInfo__Wrapper__ = class(__TCDSRecInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCDSRecInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCDSRecInfoToVariant(var R : TCDSRecInfo) : OleVariant;
var
__rw : __TCDSRecInfo__Wrapper__;
begin
__rw := __TCDSRecInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCDSRecInfo(const V : OleVariant) : TCDSRecInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCDSRecInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TKeyBuffer__Wrapper__ = class(__TKeyBuffer__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TKeyBuffer__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTKeyBufferToVariant(var R : TKeyBuffer) : OleVariant;
var
__rw : __TKeyBuffer__Wrapper__;
begin
__rw := __TKeyBuffer__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTKeyBuffer(const V : OleVariant) : TKeyBuffer;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TKeyBuffer((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRecInfo__Wrapper__ = class(__TRecInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRecInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRecInfoToVariant(var R : TRecInfo) : OleVariant;
var
__rw : __TRecInfo__Wrapper__;
begin
__rw := __TRecInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRecInfo(const V : OleVariant) : TRecInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRecInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TReconcileInfo__Wrapper__ = class(__TReconcileInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TReconcileInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTReconcileInfoToVariant(var R : TReconcileInfo) : OleVariant;
var
__rw : __TReconcileInfo__Wrapper__;
begin
__rw := __TReconcileInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTReconcileInfo(const V : OleVariant) : TReconcileInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TReconcileInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetEDBClient__ErrorCode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := EDBClient(Instance).ErrorCode;
end;

function __DC__GetEReconcileError__Context(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := EReconcileError(Instance).Context;
end;

function __DC__GetEReconcileError__PreviousError(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := EReconcileError(Instance).PreviousError;
end;

function __DC__GetTAggregate__AggHandle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TAggregate(Instance).AggHandle;
end;

procedure __DC__SetTAggregate__AggHandle(Instance : TObject; Params : PVariantArgList);
begin
TAggregate(Instance).AggHandle:=OleVariant(Params^[0]);
end;

function __DC__GetTAggregate__InUse(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TAggregate(Instance).InUse;
end;

procedure __DC__SetTAggregate__InUse(Instance : TObject; Params : PVariantArgList);
begin
TAggregate(Instance).InUse:=OleVariant(Params^[0]);
end;

function __DC__GetTAggregate__DataSet(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TAggregate(Instance).DataSet);
end;

function __DC__GetTAggregate__DataSize(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TAggregate(Instance).DataSize;
end;

function __DC__GetTAggregate__DataType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TAggregate(Instance).DataType;
end;

function __DC__GetTAggregates__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TAggregates(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __DC__SetTAggregates__Items(Instance : TObject; Params : PVariantArgList);
begin
TAggregates(Instance).Items[OleVariant(Params^[1])]:=TAggregate(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomClientDataSet__Active(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomClientDataSet(Instance).Active;
end;

procedure __DC__SetTCustomClientDataSet__Active(Instance : TObject; Params : PVariantArgList);
begin
TCustomClientDataSet(Instance).Active:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomClientDataSet__DataSetField(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomClientDataSet(Instance).DataSetField);
end;

procedure __DC__SetTCustomClientDataSet__DataSetField(Instance : TObject; Params : PVariantArgList);
begin
TCustomClientDataSet(Instance).DataSetField:=TDataSetField(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomClientDataSet__ProviderName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomClientDataSet(Instance).ProviderName;
end;

procedure __DC__SetTCustomClientDataSet__ProviderName(Instance : TObject; Params : PVariantArgList);
begin
TCustomClientDataSet(Instance).ProviderName:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomClientDataSet__FileName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomClientDataSet(Instance).FileName;
end;

procedure __DC__SetTCustomClientDataSet__FileName(Instance : TObject; Params : PVariantArgList);
begin
TCustomClientDataSet(Instance).FileName:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomClientDataSet__ConnectionBroker(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomClientDataSet(Instance).ConnectionBroker);
end;

procedure __DC__SetTCustomClientDataSet__ConnectionBroker(Instance : TObject; Params : PVariantArgList);
begin
TCustomClientDataSet(Instance).ConnectionBroker:=TConnectionBroker(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomClientDataSet__IndexFieldNames(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomClientDataSet(Instance).IndexFieldNames;
end;

procedure __DC__SetTCustomClientDataSet__IndexFieldNames(Instance : TObject; Params : PVariantArgList);
begin
TCustomClientDataSet(Instance).IndexFieldNames:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomClientDataSet__MasterFields(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomClientDataSet(Instance).MasterFields;
end;

procedure __DC__SetTCustomClientDataSet__MasterFields(Instance : TObject; Params : PVariantArgList);
begin
TCustomClientDataSet(Instance).MasterFields:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomClientDataSet__PacketRecords(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomClientDataSet(Instance).PacketRecords;
end;

procedure __DC__SetTCustomClientDataSet__PacketRecords(Instance : TObject; Params : PVariantArgList);
begin
TCustomClientDataSet(Instance).PacketRecords:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomClientDataSet__RemoteServer(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomClientDataSet(Instance).RemoteServer);
end;

procedure __DC__SetTCustomClientDataSet__RemoteServer(Instance : TObject; Params : PVariantArgList);
begin
TCustomClientDataSet(Instance).RemoteServer:=TCustomRemoteServer(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomClientDataSet__HasAppServer(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomClientDataSet(Instance).HasAppServer;
end;

function __DC__GetTCustomClientDataSet__ActiveAggs(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomClientDataSet(Instance).ActiveAggs[OleVariant(Params^[0])]);
end;

function __DC__GetTCustomClientDataSet__ChangeCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomClientDataSet(Instance).ChangeCount;
end;

function __DC__GetTCustomClientDataSet__CloneSource(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomClientDataSet(Instance).CloneSource);
end;

function __DC__GetTCustomClientDataSet__Data(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomClientDataSet(Instance).Data;
end;

procedure __DC__SetTCustomClientDataSet__Data(Instance : TObject; Params : PVariantArgList);
begin
TCustomClientDataSet(Instance).Data:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomClientDataSet__XMLData(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomClientDataSet(Instance).XMLData;
end;

procedure __DC__SetTCustomClientDataSet__XMLData(Instance : TObject; Params : PVariantArgList);
begin
TCustomClientDataSet(Instance).XMLData:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomClientDataSet__DataSize(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomClientDataSet(Instance).DataSize;
end;

function __DC__GetTCustomClientDataSet__Delta(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomClientDataSet(Instance).Delta;
end;

function __DC__GetTCustomClientDataSet__GroupingLevel(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomClientDataSet(Instance).GroupingLevel;
end;

function __DC__GetTCustomClientDataSet__IndexFieldCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomClientDataSet(Instance).IndexFieldCount;
end;

function __DC__GetTCustomClientDataSet__IndexFields(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomClientDataSet(Instance).IndexFields[OleVariant(Params^[0])]);
end;

procedure __DC__SetTCustomClientDataSet__IndexFields(Instance : TObject; Params : PVariantArgList);
begin
TCustomClientDataSet(Instance).IndexFields[OleVariant(Params^[1])]:=TField(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomClientDataSet__KeyExclusive(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomClientDataSet(Instance).KeyExclusive;
end;

procedure __DC__SetTCustomClientDataSet__KeyExclusive(Instance : TObject; Params : PVariantArgList);
begin
TCustomClientDataSet(Instance).KeyExclusive:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomClientDataSet__KeyFieldCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomClientDataSet(Instance).KeyFieldCount;
end;

procedure __DC__SetTCustomClientDataSet__KeyFieldCount(Instance : TObject; Params : PVariantArgList);
begin
TCustomClientDataSet(Instance).KeyFieldCount:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomClientDataSet__KeySize(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomClientDataSet(Instance).KeySize;
end;

function __DC__GetTCustomClientDataSet__LogChanges(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomClientDataSet(Instance).LogChanges;
end;

procedure __DC__SetTCustomClientDataSet__LogChanges(Instance : TObject; Params : PVariantArgList);
begin
TCustomClientDataSet(Instance).LogChanges:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomClientDataSet__SavePoint(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomClientDataSet(Instance).SavePoint;
end;

procedure __DC__SetTCustomClientDataSet__SavePoint(Instance : TObject; Params : PVariantArgList);
begin
TCustomClientDataSet(Instance).SavePoint:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomClientDataSet__StatusFilter(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TUpdateStatusSet;
begin
tmp := TCustomClientDataSet(Instance).StatusFilter;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTCustomClientDataSet__StatusFilter(Instance : TObject; Params : PVariantArgList);
var
  tmp : TUpdateStatusSet;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TCustomClientDataSet(Instance).StatusFilter:=tmp;
end;

function __DC__GetTCustomClientDataSet__Ranged(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomClientDataSet(Instance).Ranged;
end;

function __DC__GetTCustomRemoteServer__AppServer(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomRemoteServer(Instance).AppServer;
end;

procedure __RegisterProps;
begin
RegisterProperty(EDBClient,'ErrorCode',__DC__GetEDBClient__ErrorCode,nil);
RegisterProperty(EReconcileError,'Context',__DC__GetEReconcileError__Context,nil);
RegisterProperty(EReconcileError,'PreviousError',__DC__GetEReconcileError__PreviousError,nil);
RegisterProperty(TAggregate,'AggHandle',__DC__GetTAggregate__AggHandle,__DC__SetTAggregate__AggHandle);
RegisterProperty(TAggregate,'InUse',__DC__GetTAggregate__InUse,__DC__SetTAggregate__InUse);
RegisterProperty(TAggregate,'DataSet',__DC__GetTAggregate__DataSet,nil);
RegisterProperty(TAggregate,'DataSize',__DC__GetTAggregate__DataSize,nil);
RegisterProperty(TAggregate,'DataType',__DC__GetTAggregate__DataType,nil);
RegisterIndexedProperty(TAggregates,'Items',1,True,__DC__GetTAggregates__Items,__DC__SetTAggregates__Items);
RegisterProperty(TCustomClientDataSet,'Active',__DC__GetTCustomClientDataSet__Active,__DC__SetTCustomClientDataSet__Active);
RegisterProperty(TCustomClientDataSet,'DataSetField',__DC__GetTCustomClientDataSet__DataSetField,__DC__SetTCustomClientDataSet__DataSetField);
RegisterProperty(TCustomClientDataSet,'ProviderName',__DC__GetTCustomClientDataSet__ProviderName,__DC__SetTCustomClientDataSet__ProviderName);
RegisterProperty(TCustomClientDataSet,'FileName',__DC__GetTCustomClientDataSet__FileName,__DC__SetTCustomClientDataSet__FileName);
RegisterProperty(TCustomClientDataSet,'ConnectionBroker',__DC__GetTCustomClientDataSet__ConnectionBroker,__DC__SetTCustomClientDataSet__ConnectionBroker);
RegisterProperty(TCustomClientDataSet,'IndexFieldNames',__DC__GetTCustomClientDataSet__IndexFieldNames,__DC__SetTCustomClientDataSet__IndexFieldNames);
RegisterProperty(TCustomClientDataSet,'MasterFields',__DC__GetTCustomClientDataSet__MasterFields,__DC__SetTCustomClientDataSet__MasterFields);
RegisterProperty(TCustomClientDataSet,'PacketRecords',__DC__GetTCustomClientDataSet__PacketRecords,__DC__SetTCustomClientDataSet__PacketRecords);
RegisterProperty(TCustomClientDataSet,'RemoteServer',__DC__GetTCustomClientDataSet__RemoteServer,__DC__SetTCustomClientDataSet__RemoteServer);
RegisterProperty(TCustomClientDataSet,'HasAppServer',__DC__GetTCustomClientDataSet__HasAppServer,nil);
RegisterIndexedProperty(TCustomClientDataSet,'ActiveAggs',1,False,__DC__GetTCustomClientDataSet__ActiveAggs,nil);
RegisterProperty(TCustomClientDataSet,'ChangeCount',__DC__GetTCustomClientDataSet__ChangeCount,nil);
RegisterProperty(TCustomClientDataSet,'CloneSource',__DC__GetTCustomClientDataSet__CloneSource,nil);
RegisterProperty(TCustomClientDataSet,'Data',__DC__GetTCustomClientDataSet__Data,__DC__SetTCustomClientDataSet__Data);
RegisterProperty(TCustomClientDataSet,'XMLData',__DC__GetTCustomClientDataSet__XMLData,__DC__SetTCustomClientDataSet__XMLData);
RegisterProperty(TCustomClientDataSet,'DataSize',__DC__GetTCustomClientDataSet__DataSize,nil);
RegisterProperty(TCustomClientDataSet,'Delta',__DC__GetTCustomClientDataSet__Delta,nil);
RegisterProperty(TCustomClientDataSet,'GroupingLevel',__DC__GetTCustomClientDataSet__GroupingLevel,nil);
RegisterProperty(TCustomClientDataSet,'IndexFieldCount',__DC__GetTCustomClientDataSet__IndexFieldCount,nil);
RegisterIndexedProperty(TCustomClientDataSet,'IndexFields',1,False,__DC__GetTCustomClientDataSet__IndexFields,__DC__SetTCustomClientDataSet__IndexFields);
RegisterProperty(TCustomClientDataSet,'KeyExclusive',__DC__GetTCustomClientDataSet__KeyExclusive,__DC__SetTCustomClientDataSet__KeyExclusive);
RegisterProperty(TCustomClientDataSet,'KeyFieldCount',__DC__GetTCustomClientDataSet__KeyFieldCount,__DC__SetTCustomClientDataSet__KeyFieldCount);
RegisterProperty(TCustomClientDataSet,'KeySize',__DC__GetTCustomClientDataSet__KeySize,nil);
RegisterProperty(TCustomClientDataSet,'LogChanges',__DC__GetTCustomClientDataSet__LogChanges,__DC__SetTCustomClientDataSet__LogChanges);
RegisterProperty(TCustomClientDataSet,'SavePoint',__DC__GetTCustomClientDataSet__SavePoint,__DC__SetTCustomClientDataSet__SavePoint);
RegisterProperty(TCustomClientDataSet,'StatusFilter',__DC__GetTCustomClientDataSet__StatusFilter,__DC__SetTCustomClientDataSet__StatusFilter);
RegisterProperty(TCustomClientDataSet,'Ranged',__DC__GetTCustomClientDataSet__Ranged,nil);
RegisterProperty(TCustomRemoteServer,'AppServer',__DC__GetTCustomRemoteServer__AppServer,nil);
end;

const __ConstNames0 : array[0..17] of string = (
'dfBinary'
,'dfXML'
,'dfXMLUTF8'
,'raSkip'
,'raAbort'
,'raMerge'
,'raCorrect'
,'raCancel'
,'raRefresh'
,'doDisableInserts'
,'doDisableDeletes'
,'doDisableEdits'
,'doNoResetCall'
,'foRecord'
,'foBlobs'
,'foDetails'
,'AllParamTypes'
,'AllRecords'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,dfBinary));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,dfXML));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,dfXMLUTF8));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,raSkip));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,raAbort));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,raMerge));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,raCorrect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,raCancel));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,raRefresh));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,doDisableInserts));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,doDisableDeletes));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,doDisableEdits));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,doNoResetCall));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,foRecord));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,foBlobs));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,foDetails));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,VarFromSet(AllParamTypes, sizeof(AllParamTypes))));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,AllRecords));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..8] of TClass = (
EDBClient,
EReconcileError,
TAggregate,
TAggregates,
TClientBlobStream,
TClientDataSet,
TConnectionBroker,
TCustomClientDataSet,
TCustomRemoteServer
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..6] of string = (
'TCDSKeyBuffer'
,'TCDSRecInfo'
,'TKeyBuffer'
,'TRecInfo'
,'TReconcileInfo'
,'PackageParams'
,'UnpackParams'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TCDSKeyBuffer_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_TCDSRecInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_TKeyBuffer_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(_TRecInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(_TReconcileInfo_)));
RegisterProc(nil,MethodNames[5],mtScriptProc,TypeInfo(_T0),[
TypeInfo(TParams),
TypeInfo(TParamTypes),TypeInfo(OleVariant)],Addr(____PackageParams__Wrapper),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T1),[
TypeInfo(OleVariant),
TypeInfo(TParams)],Addr(UnpackParams),cRegister);

RegisterProc(EDBClient,'Create',mtConstructor,TypeInfo(_T2),[
TypeInfo(string),
TypeInfo(DBResult)],Addr(EDBClient.Create),cRegister);

RegisterProc(EReconcileError,'Create',mtConstructor,TypeInfo(_T3),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(DBResult),
TypeInfo(DBResult)],Addr(EReconcileError.Create),cRegister);

RegisterProc(TAggregate,'Create',mtConstructor,TypeInfo(_T4),[
TypeInfo(TAggregates),
TypeInfo(TCustomClientDataSet)],Addr(TAggregate.Create),cRegister);

RegRegisterMethod(TAggregate,'Value',TypeInfo(_T5),[TypeInfo(Variant)],Addr(TAggregate.Value));

RegisterProc(TAggregates,'Create',mtConstructor,TypeInfo(_T6),[
TypeInfo(TPersistent)],Addr(TAggregates.Create),cRegister);

RegRegisterMethod(TAggregates,'Add',TypeInfo(_T7),[TypeInfo(TAggregate)],Addr(TAggregates.Add));

RegRegisterMethod(TAggregates,'Clear',TypeInfo(_T8),NoParams,Addr(TAggregates.Clear));

RegRegisterMethod(TAggregates,'Find',TypeInfo(_T9),[
TypeInfo(string),TypeInfo(TAggregate)],Addr(TAggregates.Find));

RegRegisterMethod(TAggregates,'IndexOf',TypeInfo(_T10),[
TypeInfo(string),TypeInfo(Integer)],Addr(TAggregates.IndexOf));

RegisterProc(TClientBlobStream,'Create',mtConstructor,TypeInfo(_T11),[
TypeInfo(TBlobField),
TypeInfo(TBlobStreamMode)],Addr(TClientBlobStream.Create),cRegister);

RegRegisterMethod(TClientBlobStream,'Truncate',TypeInfo(_T12),NoParams,Addr(TClientBlobStream.Truncate));

//RegRegisterMethod(TCustomClientDataSet,'DoAfterApplyUpdates',TypeInfo(_T13),[TypeInfo(OleVariant)], pointer(640));
RegRegisterMethod(TCustomClientDataSet,'DoAfterApplyUpdates',TypeInfo(_T13),[TypeInfo(OleVariant)], getVMTProcAddr('TCustomClientDataSet','DoAfterApplyUpdates',640));


//RegRegisterMethod(TCustomClientDataSet,'DoBeforeApplyUpdates',TypeInfo(_T14),[TypeInfo(OleVariant)], pointer(644));
RegRegisterMethod(TCustomClientDataSet,'DoBeforeApplyUpdates',TypeInfo(_T14),[TypeInfo(OleVariant)], getVMTProcAddr('TCustomClientDataSet','DoBeforeApplyUpdates',644));


//RegRegisterMethod(TCustomClientDataSet,'DoApplyUpdates',TypeInfo(_T15),[TypeInfo(OleVariant),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(OleVariant)], pointer(648));
RegRegisterMethod(TCustomClientDataSet,'DoApplyUpdates',TypeInfo(_T15),[TypeInfo(OleVariant),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(OleVariant)], getVMTProcAddr('TCustomClientDataSet','DoApplyUpdates',648));


//RegRegisterMethod(TCustomClientDataSet,'DoAfterGetParams',TypeInfo(_T16),[TypeInfo(OleVariant)], pointer(652));
RegRegisterMethod(TCustomClientDataSet,'DoAfterGetParams',TypeInfo(_T16),[TypeInfo(OleVariant)], getVMTProcAddr('TCustomClientDataSet','DoAfterGetParams',652));


//RegRegisterMethod(TCustomClientDataSet,'DoBeforeGetParams',TypeInfo(_T17),[TypeInfo(OleVariant)], pointer(656));
RegRegisterMethod(TCustomClientDataSet,'DoBeforeGetParams',TypeInfo(_T17),[TypeInfo(OleVariant)], getVMTProcAddr('TCustomClientDataSet','DoBeforeGetParams',656));


//RegRegisterMethod(TCustomClientDataSet,'DoAfterGetRecords',TypeInfo(_T18),[TypeInfo(OleVariant)], pointer(660));
RegRegisterMethod(TCustomClientDataSet,'DoAfterGetRecords',TypeInfo(_T18),[TypeInfo(OleVariant)], getVMTProcAddr('TCustomClientDataSet','DoAfterGetRecords',660));


//RegRegisterMethod(TCustomClientDataSet,'DoBeforeGetRecords',TypeInfo(_T19),[TypeInfo(OleVariant)], pointer(664));
RegRegisterMethod(TCustomClientDataSet,'DoBeforeGetRecords',TypeInfo(_T19),[TypeInfo(OleVariant)], getVMTProcAddr('TCustomClientDataSet','DoBeforeGetRecords',664));


//RegRegisterMethod(TCustomClientDataSet,'DoGetRecords',TypeInfo(_T20),[TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(WideString),TypeInfo(OleVariant),TypeInfo(OleVariant)], pointer(668));
RegRegisterMethod(TCustomClientDataSet,'DoGetRecords',TypeInfo(_T20),[TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(WideString),TypeInfo(OleVariant),TypeInfo(OleVariant)], getVMTProcAddr('TCustomClientDataSet','DoGetRecords',668));


//RegRegisterMethod(TCustomClientDataSet,'DoAfterRowRequest',TypeInfo(_T21),[TypeInfo(OleVariant)], pointer(672));
RegRegisterMethod(TCustomClientDataSet,'DoAfterRowRequest',TypeInfo(_T21),[TypeInfo(OleVariant)], getVMTProcAddr('TCustomClientDataSet','DoAfterRowRequest',672));


//RegRegisterMethod(TCustomClientDataSet,'DoBeforeRowRequest',TypeInfo(_T22),[TypeInfo(OleVariant)], pointer(676));
RegRegisterMethod(TCustomClientDataSet,'DoBeforeRowRequest',TypeInfo(_T22),[TypeInfo(OleVariant)], getVMTProcAddr('TCustomClientDataSet','DoBeforeRowRequest',676));


//RegRegisterMethod(TCustomClientDataSet,'DoRowRequest',TypeInfo(_T23),[TypeInfo(OleVariant),TypeInfo(Integer),TypeInfo(OleVariant)], pointer(680));
RegRegisterMethod(TCustomClientDataSet,'DoRowRequest',TypeInfo(_T23),[TypeInfo(OleVariant),TypeInfo(Integer),TypeInfo(OleVariant)], getVMTProcAddr('TCustomClientDataSet','DoRowRequest',680));


//RegRegisterMethod(TCustomClientDataSet,'DoAfterExecute',TypeInfo(_T24),[TypeInfo(OleVariant)], pointer(684));
RegRegisterMethod(TCustomClientDataSet,'DoAfterExecute',TypeInfo(_T24),[TypeInfo(OleVariant)], getVMTProcAddr('TCustomClientDataSet','DoAfterExecute',684));


//RegRegisterMethod(TCustomClientDataSet,'DoBeforeExecute',TypeInfo(_T25),[TypeInfo(OleVariant)], pointer(688));
RegRegisterMethod(TCustomClientDataSet,'DoBeforeExecute',TypeInfo(_T25),[TypeInfo(OleVariant)], getVMTProcAddr('TCustomClientDataSet','DoBeforeExecute',688));


//RegRegisterMethod(TCustomClientDataSet,'DoExecute',TypeInfo(_T26),[TypeInfo(OleVariant)], pointer(692));
RegRegisterMethod(TCustomClientDataSet,'DoExecute',TypeInfo(_T26),[TypeInfo(OleVariant)], getVMTProcAddr('TCustomClientDataSet','DoExecute',692));


//RegRegisterMethod(TCustomClientDataSet,'AddDataPacket',TypeInfo(_T27),[TypeInfo(OleVariant),TypeInfo(Boolean)], pointer(696));
RegRegisterMethod(TCustomClientDataSet,'AddDataPacket',TypeInfo(_T27),[TypeInfo(OleVariant),TypeInfo(Boolean)], getVMTProcAddr('TCustomClientDataSet','AddDataPacket',696));


//RegRegisterMethod(TCustomClientDataSet,'CheckDetailRecords',TypeInfo(_T28),NoParams, pointer(700));
RegRegisterMethod(TCustomClientDataSet,'CheckDetailRecords',TypeInfo(_T28),NoParams, getVMTProcAddr('TCustomClientDataSet','CheckDetailRecords',700));


//RegRegisterMethod(TCustomClientDataSet,'CheckProviderEOF',TypeInfo(_T29),NoParams, pointer(704));
RegRegisterMethod(TCustomClientDataSet,'CheckProviderEOF',TypeInfo(_T29),NoParams, getVMTProcAddr('TCustomClientDataSet','CheckProviderEOF',704));


//RegRegisterMethod(TCustomClientDataSet,'DestroyLookupCursor',TypeInfo(_T30),NoParams, pointer(708));
RegRegisterMethod(TCustomClientDataSet,'DestroyLookupCursor',TypeInfo(_T30),NoParams, getVMTProcAddr('TCustomClientDataSet','DestroyLookupCursor',708));


//RegRegisterMethod(TCustomClientDataSet,'FetchMoreData',TypeInfo(_T31),[TypeInfo(Boolean)], pointer(712));
RegRegisterMethod(TCustomClientDataSet,'FetchMoreData',TypeInfo(_T31),[TypeInfo(Boolean)], getVMTProcAddr('TCustomClientDataSet','FetchMoreData',712));


//RegRegisterMethod(TCustomClientDataSet,'GetIsClone',TypeInfo(_T33),[TypeInfo(Boolean)], pointer(720));
RegRegisterMethod(TCustomClientDataSet,'GetIsClone',TypeInfo(_T33),[TypeInfo(Boolean)], getVMTProcAddr('TCustomClientDataSet','GetIsClone',720));


//RegRegisterMethod(TCustomClientDataSet,'GetRemoteServer',TypeInfo(_T34),[TypeInfo(TCustomRemoteServer)], pointer(724));
RegRegisterMethod(TCustomClientDataSet,'GetRemoteServer',TypeInfo(_T34),[TypeInfo(TCustomRemoteServer)], getVMTProcAddr('TCustomClientDataSet','GetRemoteServer',724));


//RegRegisterMethod(TCustomClientDataSet,'SetAggregates',TypeInfo(_T35),[TypeInfo(TAggregates)], pointer(728));
RegRegisterMethod(TCustomClientDataSet,'SetAggregates',TypeInfo(_T35),[TypeInfo(TAggregates)], getVMTProcAddr('TCustomClientDataSet','SetAggregates',728));


//RegRegisterMethod(TCustomClientDataSet,'SetCommandText',TypeInfo(_T37),[TypeInfo(WideString)], pointer(736));
RegRegisterMethod(TCustomClientDataSet,'SetCommandText',TypeInfo(_T37),[TypeInfo(WideString)], getVMTProcAddr('TCustomClientDataSet','SetCommandText',736));


//RegRegisterMethod(TCustomClientDataSet,'SetProviderEOF',TypeInfo(_T38),[TypeInfo(Boolean)], pointer(740));
RegRegisterMethod(TCustomClientDataSet,'SetProviderEOF',TypeInfo(_T38),[TypeInfo(Boolean)], getVMTProcAddr('TCustomClientDataSet','SetProviderEOF',740));


//RegRegisterMethod(TCustomClientDataSet,'SetRemoteServer',TypeInfo(_T39),[TypeInfo(TCustomRemoteServer)], pointer(744));
RegRegisterMethod(TCustomClientDataSet,'SetRemoteServer',TypeInfo(_T39),[TypeInfo(TCustomRemoteServer)], getVMTProcAddr('TCustomClientDataSet','SetRemoteServer',744));


RegisterProc(TCustomClientDataSet,'AddIndex',mtScriptMethod,TypeInfo(_T40),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(TIndexOptions),
TypeInfo(string),
TypeInfo(string),
TypeInfo(Integer)],Addr(__TCustomClientDataSet__AddIndex__Wrapper),cRegister);

RegRegisterMethod(TCustomClientDataSet,'AppendData',TypeInfo(_T41),[
TypeInfo(OleVariant),
TypeInfo(Boolean)],Addr(TCustomClientDataSet.AppendData));

RegRegisterMethod(TCustomClientDataSet,'ApplyRange',TypeInfo(_T42),NoParams,Addr(TCustomClientDataSet.ApplyRange));

//RegRegisterMethod(TCustomClientDataSet,'ApplyUpdates',TypeInfo(_T43),[TypeInfo(Integer),TypeInfo(Integer)], pointer(748));
RegRegisterMethod(TCustomClientDataSet,'ApplyUpdates',TypeInfo(_T43),[TypeInfo(Integer),TypeInfo(Integer)], getVMTProcAddr('TCustomClientDataSet','ApplyUpdates',748));


RegRegisterMethod(TCustomClientDataSet,'CancelRange',TypeInfo(_T44),NoParams,Addr(TCustomClientDataSet.CancelRange));

RegRegisterMethod(TCustomClientDataSet,'CancelUpdates',TypeInfo(_T45),NoParams,Addr(TCustomClientDataSet.CancelUpdates));

RegRegisterMethod(TCustomClientDataSet,'CreateDataSet',TypeInfo(_T46),NoParams,Addr(TCustomClientDataSet.CreateDataSet));

RegisterProc(TCustomClientDataSet,'CloneCursor',mtScriptMethod,TypeInfo(_T47),[
TypeInfo(TCustomClientDataSet),
TypeInfo(Boolean),
TypeInfo(Boolean)],Addr(__TCustomClientDataSet__CloneCursor__Wrapper),cRegister);

RegRegisterMethod(TCustomClientDataSet,'ConstraintsDisabled',TypeInfo(_T48),[TypeInfo(Boolean)],Addr(TCustomClientDataSet.ConstraintsDisabled));

//RegRegisterMethod(TCustomClientDataSet,'DataRequest',TypeInfo(_T49),[TypeInfo(OleVariant),TypeInfo(OleVariant)], pointer(756));
RegRegisterMethod(TCustomClientDataSet,'DataRequest',TypeInfo(_T49),[TypeInfo(OleVariant),TypeInfo(OleVariant)], getVMTProcAddr('TCustomClientDataSet','DataRequest',756));


RegRegisterMethod(TCustomClientDataSet,'DeleteIndex',TypeInfo(_T50),[
TypeInfo(string)],Addr(TCustomClientDataSet.DeleteIndex));

RegRegisterMethod(TCustomClientDataSet,'DisableConstraints',TypeInfo(_T51),NoParams,Addr(TCustomClientDataSet.DisableConstraints));

RegRegisterMethod(TCustomClientDataSet,'EnableConstraints',TypeInfo(_T52),NoParams,Addr(TCustomClientDataSet.EnableConstraints));

RegRegisterMethod(TCustomClientDataSet,'EditKey',TypeInfo(_T53),NoParams,Addr(TCustomClientDataSet.EditKey));

RegRegisterMethod(TCustomClientDataSet,'EditRangeEnd',TypeInfo(_T54),NoParams,Addr(TCustomClientDataSet.EditRangeEnd));

RegRegisterMethod(TCustomClientDataSet,'EditRangeStart',TypeInfo(_T55),NoParams,Addr(TCustomClientDataSet.EditRangeStart));

//RegRegisterMethod(TCustomClientDataSet,'EmptyDataSet',TypeInfo(_T56),NoParams, pointer(760));
RegRegisterMethod(TCustomClientDataSet,'EmptyDataSet',TypeInfo(_T56),NoParams, getVMTProcAddr('TCustomClientDataSet','EmptyDataSet',760));


//RegRegisterMethod(TCustomClientDataSet,'Execute',TypeInfo(_T57),NoParams, pointer(764));
RegRegisterMethod(TCustomClientDataSet,'Execute',TypeInfo(_T57),NoParams, getVMTProcAddr('TCustomClientDataSet','Execute',764));


RegRegisterMethod(TCustomClientDataSet,'FetchBlobs',TypeInfo(_T58),NoParams,Addr(TCustomClientDataSet.FetchBlobs));

RegRegisterMethod(TCustomClientDataSet,'FetchDetails',TypeInfo(_T59),NoParams,Addr(TCustomClientDataSet.FetchDetails));

RegRegisterMethod(TCustomClientDataSet,'RefreshRecord',TypeInfo(_T60),NoParams,Addr(TCustomClientDataSet.RefreshRecord));

RegRegisterMethod(TCustomClientDataSet,'FetchParams',TypeInfo(_T61),NoParams,Addr(TCustomClientDataSet.FetchParams));

//RegRegisterMethod(TCustomClientDataSet,'FindKey',TypeInfo(_T62),[TypeInfoArrayOfConst,TypeInfo(Boolean)], pointer(768));
RegRegisterMethod(TCustomClientDataSet,'FindKey',TypeInfo(_T62),[TypeInfoArrayOfConst,TypeInfo(Boolean)], getVMTProcAddr('TCustomClientDataSet','FindKey',768));


RegRegisterMethod(TCustomClientDataSet,'FindNearest',TypeInfo(_T63),[
TypeInfoArrayOfConst],Addr(TCustomClientDataSet.FindNearest));

RegRegisterMethod(TCustomClientDataSet,'GetGroupState',TypeInfo(_T64),[
TypeInfo(Integer),TypeInfo(TGroupPosInds)],Addr(TCustomClientDataSet.GetGroupState));

RegRegisterMethod(TCustomClientDataSet,'GetIndexInfo',TypeInfo(_T65),[
TypeInfo(string)],Addr(TCustomClientDataSet.GetIndexInfo));

RegRegisterMethod(TCustomClientDataSet,'GetIndexNames',TypeInfo(_T66),[
TypeInfo(TStrings)],Addr(TCustomClientDataSet.GetIndexNames));

//RegRegisterMethod(TCustomClientDataSet,'GetNextPacket',TypeInfo(_T67),[TypeInfo(Integer)], pointer(772));
RegRegisterMethod(TCustomClientDataSet,'GetNextPacket',TypeInfo(_T67),[TypeInfo(Integer)], getVMTProcAddr('TCustomClientDataSet','GetNextPacket',772));


RegRegisterMethod(TCustomClientDataSet,'GetOptionalParam',TypeInfo(_T68),[
TypeInfo(string),TypeInfo(OleVariant)],Addr(TCustomClientDataSet.GetOptionalParam));

RegRegisterMethod(TCustomClientDataSet,'GotoCurrent',TypeInfo(_T69),[
TypeInfo(TCustomClientDataSet)],Addr(TCustomClientDataSet.GotoCurrent));

RegRegisterMethod(TCustomClientDataSet,'GotoKey',TypeInfo(_T70),[TypeInfo(Boolean)],Addr(TCustomClientDataSet.GotoKey));

RegRegisterMethod(TCustomClientDataSet,'GotoNearest',TypeInfo(_T71),NoParams,Addr(TCustomClientDataSet.GotoNearest));

RegisterProc(TCustomClientDataSet,'LoadFromFile',mtScriptMethod,TypeInfo(_T72),[
TypeInfo(string)],Addr(__TCustomClientDataSet__LoadFromFile__Wrapper),cRegister);

RegRegisterMethod(TCustomClientDataSet,'LoadFromStream',TypeInfo(_T73),[
TypeInfo(TStream)],Addr(TCustomClientDataSet.LoadFromStream));

RegRegisterMethod(TCustomClientDataSet,'MergeChangeLog',TypeInfo(_T74),NoParams,Addr(TCustomClientDataSet.MergeChangeLog));

RegRegisterMethod(TCustomClientDataSet,'Reconcile',TypeInfo(_T75),[
TypeInfo(OleVariant),TypeInfo(Boolean)],Addr(TCustomClientDataSet.Reconcile));

RegRegisterMethod(TCustomClientDataSet,'RevertRecord',TypeInfo(_T76),NoParams,Addr(TCustomClientDataSet.RevertRecord));

RegisterProc(TCustomClientDataSet,'SaveToFile',mtScriptMethod,TypeInfo(_T77),[
TypeInfo(string),
TypeInfo(TDataPacketFormat)],Addr(__TCustomClientDataSet__SaveToFile__Wrapper),cRegister);

RegisterProc(TCustomClientDataSet,'SaveToStream',mtScriptMethod,TypeInfo(_T78),[
TypeInfo(TStream),
TypeInfo(TDataPacketFormat)],Addr(__TCustomClientDataSet__SaveToStream__Wrapper),cRegister);

//RegRegisterMethod(TCustomClientDataSet,'SetAltRecBuffers',TypeInfo(_T79),[
//TypeInfoPointer,
//TypeInfoPointer,
//TypeInfoPointer],Addr(TCustomClientDataSet.SetAltRecBuffers));

RegRegisterMethod(TCustomClientDataSet,'SetKey',TypeInfo(_T80),NoParams,Addr(TCustomClientDataSet.SetKey));

RegisterProc(TCustomClientDataSet,'SetOptionalParam',mtScriptMethod,TypeInfo(_T81),[
TypeInfo(string),
TypeInfo(OleVariant),
TypeInfo(Boolean)],Addr(__TCustomClientDataSet__SetOptionalParam__Wrapper),cRegister);

RegRegisterMethod(TCustomClientDataSet,'SetProvider',TypeInfo(_T82),[
TypeInfo(TComponent)],Addr(TCustomClientDataSet.SetProvider));

RegRegisterMethod(TCustomClientDataSet,'SetRange',TypeInfo(_T83),[
TypeInfoArrayOfConst,
TypeInfoArrayOfConst],Addr(TCustomClientDataSet.SetRange));

RegRegisterMethod(TCustomClientDataSet,'SetRangeEnd',TypeInfo(_T84),NoParams,Addr(TCustomClientDataSet.SetRangeEnd));

RegRegisterMethod(TCustomClientDataSet,'SetRangeStart',TypeInfo(_T85),NoParams,Addr(TCustomClientDataSet.SetRangeStart));

RegRegisterMethod(TCustomClientDataSet,'UndoLastChange',TypeInfo(_T86),[
TypeInfo(Boolean),TypeInfo(Boolean)],Addr(TCustomClientDataSet.UndoLastChange));

//RegRegisterMethod(TCustomRemoteServer,'GetAppServer',TypeInfo(_T87),[TypeInfo(Variant)], pointer(32));
RegRegisterMethod(TCustomRemoteServer,'GetAppServer',TypeInfo(_T87),[TypeInfo(Variant)], getVMTProcAddr('TCustomRemoteServer','GetAppServer',32));


//RegRegisterMethod(TCustomRemoteServer,'SetAppServer',TypeInfo(_T88),[TypeInfo(Variant)], pointer(36));
RegRegisterMethod(TCustomRemoteServer,'SetAppServer',TypeInfo(_T88),[TypeInfo(Variant)], getVMTProcAddr('TCustomRemoteServer','SetAppServer',36));


//RegRegisterMethod(TCustomRemoteServer,'GetServerList',TypeInfo(_T90),[TypeInfo(OleVariant)], pointer(44));
RegRegisterMethod(TCustomRemoteServer,'GetServerList',TypeInfo(_T90),[TypeInfo(OleVariant)], getVMTProcAddr('TCustomRemoteServer','GetServerList',44));


//RegRegisterMethod(TCustomRemoteServer,'GetProviderNames',TypeInfo(_T91),[TypeInfo(TGetStrProc)], pointer(48));
RegRegisterMethod(TCustomRemoteServer,'GetProviderNames',TypeInfo(_T91),[TypeInfo(TGetStrProc)], getVMTProcAddr('TCustomRemoteServer','GetProviderNames',48));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegRegisterMethod(TCustomClientDataSet,'GetAppServer',TypeInfo(_T32),[TypeInfo(IAppServer)], pointer(716))}

{RegRegisterMethod(TCustomClientDataSet,'SetAppServer',TypeInfo(_T36),[
TypeInfo(IAppServer)], pointer(732))}

{RegRegisterMethod(TCustomRemoteServer,'GetServer',TypeInfo(_T89),[TypeInfo(IAppServer)], pointer(40))}

RegisterEvent(TypeInfo(TAggUpdateEvent),[
TypeInfo(TAggregate)]);

RegisterEvent(TypeInfo(TGetUsernameEvent),[
TypeInfo(TObject),
TypeInfo(string)]);

RegisterEvent(TypeInfo(TReconcileErrorEvent),[
TypeInfo(TCustomClientDataSet),
TypeInfo(EReconcileError),
TypeInfo(TUpdateKind),
TypeInfo(TReconcileAction)]);

RegisterEvent(TypeInfo(TRemoteEvent),[
TypeInfo(TObject),
TypeInfo(OleVariant)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
