{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit WSDLPUB_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  InvokeRegistry,
  Classes,
  HTTPApp,
  AutoDisp,
  Masks,
  Types,
  WebServExp,
  WSDLPub;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (out p0 : TObject) of object;

_T1 = function : Boolean of object;

_T2 = function : TMask of object;

_T3 = function : TMethodType of object;

_T4 = function (p0 : TObject;
p1 : TWebRequest;
p2 : TWebResponse): Boolean of object;

_T5 = procedure (p0 : TObject;
p1 : TWebRequest;
p2 : TWebResponse;
var p3 : Boolean) of object;

_T6 = function (p0 : TStringList;
const p1 : String;
const p2 : String;
var p3 : String;
p4 : TWebRequest): Integer of object;

_T7 = function : WideString of object;

_T8 = procedure (var p0 : TInvRegIntfEntryArray) of object;

{_T9 = function : TWideStringDynArray of object;}

_T10 = function (const p0 : WideString): WideString of object;

{_T11 = function : TWideStringDynArray of object;}

_T12 = _T10;

function __DC__GetTWSDLPublish__TargetNamespace(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWSDLPublish(Instance).TargetNamespace;
end;

procedure __DC__SetTWSDLPublish__TargetNamespace(Instance : TObject; Params : PVariantArgList);
begin
TWSDLPublish(Instance).TargetNamespace:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TWSDLPublish,'TargetNamespace',__DC__GetTWSDLPublish__TargetNamespace,__DC__SetTWSDLPublish__TargetNamespace);
end;

const __ConstNames0 : array[0..1] of string = (
'poDefault'
,'poPublishLocationAsSecure'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,poDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,poPublishLocationAsSecure));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..1] of TClass = (
TWSDLHTMLPublish,
TWSDLPublish
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'WSDLPubFactory'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(TObject)],Addr(WSDLPubFactory),cRegister);

RegRegisterMethod(TWSDLHTMLPublish,'DispatchEnabled',TypeInfo(_T1),[TypeInfo(Boolean)],Addr(TWSDLHTMLPublish.DispatchEnabled));

RegRegisterMethod(TWSDLHTMLPublish,'DispatchMask',TypeInfo(_T2),[TypeInfo(TMask)],Addr(TWSDLHTMLPublish.DispatchMask));

RegRegisterMethod(TWSDLHTMLPublish,'DispatchMethodType',TypeInfo(_T3),[TypeInfo(TMethodType)],Addr(TWSDLHTMLPublish.DispatchMethodType));

RegRegisterMethod(TWSDLHTMLPublish,'DispatchRequest',TypeInfo(_T4),[
TypeInfo(TObject),
TypeInfo(TWebRequest),
TypeInfo(TWebResponse),TypeInfo(Boolean)],Addr(TWSDLHTMLPublish.DispatchRequest));

RegRegisterMethod(TWSDLHTMLPublish,'ServiceInfo',TypeInfo(_T5),[
TypeInfo(TObject),
TypeInfo(TWebRequest),
TypeInfo(TWebResponse),
TypeInfo(Boolean)],Addr(TWSDLHTMLPublish.ServiceInfo));

RegRegisterMethod(TWSDLHTMLPublish,'HandleRequest',TypeInfo(_T6),[
TypeInfo(TStringList),
TypeInfo(String),
TypeInfo(String),
TypeInfo(String),
TypeInfo(TWebRequest),TypeInfo(Integer)],Addr(TWSDLHTMLPublish.HandleRequest));

RegRegisterMethod(TWSDLHTMLPublish,'GetTargetNamespace',TypeInfo(_T7),[TypeInfo(WideString)],Addr(TWSDLHTMLPublish.GetTargetNamespace));

RegRegisterMethod(TWSDLPublish,'GetPortTypeEntries',TypeInfo(_T8),[
DynArrayInfo(TypeInfo(TInvRegIntfEntryArray))],Addr(TWSDLPublish.GetPortTypeEntries));

RegisterProc(TWSDLPublish,'GetWSDLForPortType',mtMethod,TypeInfo(_T10),[
TypeInfo(WideString),TypeInfo(WideString)],Addr(TWSDLPublish.GetWSDLForPortType),cStdCall);

RegisterProc(TWSDLPublish,'GetXSDForTypeSystem',mtMethod,TypeInfo(_T12),[
TypeInfo(WideString),TypeInfo(WideString)],Addr(TWSDLPublish.GetXSDForTypeSystem),cStdCall);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(TWSDLPublish,'GetPortTypeList',mtMethod,TypeInfo(_T9),[TypeInfo(TWideStringDynArray)],Addr(TWSDLPublish.GetPortTypeList),cStdCall)}

{RegisterProc(TWSDLPublish,'GetTypeSystemsList',mtMethod,TypeInfo(_T11),[TypeInfo(TWideStringDynArray)],Addr(TWSDLPublish.GetTypeSystemsList),cStdCall)}

RegisterEvent(TypeInfo(TBeforePublishingWSDLEvent),[
TypeInfo(WideString),
TypeInfo(WideString),
TypeInfo(Boolean)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
