{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit INTFINFO_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  TypInfo,
  SysUtils,
  IntfInfo;
function ConvertTIntfMetaDataToVariant(var R : TIntfMetaData) : OleVariant;
function ConvertVariantToTIntfMetaData(const V : OleVariant) : TIntfMetaData;
function ConvertTIntfMethEntryToVariant(var R : TIntfMethEntry) : OleVariant;
function ConvertVariantToTIntfMethEntry(const V : OleVariant) : TIntfMethEntry;
function ConvertTIntfParamEntryToVariant(var R : TIntfParamEntry) : OleVariant;
function ConvertVariantToTIntfParamEntry(const V : OleVariant) : TIntfParamEntry;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TIntfMetaData__Wrapper = class(TDCRecordWrapper)
private
fR : TIntfMetaData;
public
function GetRecordPtr : pointer; override;
published
procedure setName(const val : AnsiString);
function getName : AnsiString;
property Name : AnsiString read getName write setName;
procedure setUnitName(const val : AnsiString);
function getUnitName : AnsiString;
property UnitName : AnsiString read getUnitName write setUnitName;
procedure setNumAnc(const val : Integer);
function getNumAnc : Integer;
property NumAnc : Integer read getNumAnc write setNumAnc;
end;
type __TIntfMethEntry__Wrapper = class(TDCRecordWrapper)
private
fR : TIntfMethEntry;
public
function GetRecordPtr : pointer; override;
published
procedure setName(const val : AnsiString);
function getName : AnsiString;
property Name : AnsiString read getName write setName;
procedure setCC(const val : TCallConv);
function getCC : TCallConv;
property CC : TCallConv read getCC write setCC;
procedure setPos(const val : Integer);
function getPos : Integer;
property Pos : Integer read getPos write setPos;
procedure setParamCount(const val : Integer);
function getParamCount : Integer;
property ParamCount : Integer read getParamCount write setParamCount;
procedure setHasRTTI(const val : Boolean);
function getHasRTTI : Boolean;
property HasRTTI : Boolean read getHasRTTI write setHasRTTI;
end;
type __TIntfParamEntry__Wrapper = class(TDCRecordWrapper)
private
fR : TIntfParamEntry;
public
function GetRecordPtr : pointer; override;
published
procedure setName(const val : AnsiString);
function getName : AnsiString;
property Name : AnsiString read getName write setName;
end;
type
_T1 = function (const p0 : IDispatch;
const p1 : string;
p2 : Integer): Integer of object;

{_T2 = procedure (p0 : PTypeInfo;
var p1 : PTypeInfo;
var p2 : Integer) of object;}

{_T3 = function (p0 : PTypeInfo): PTypeInfo of object;}

{_T4 = function (p0 : PTypeInfo;
var p1 : string): PTypeInfo of object;}

_T5 = function (const p0 : string;
const p1 : string): Boolean of object;

_T6 = function (const p0 : string): string of object;

{_T7 = function (const p0 : PTypeInfo;
const p1 : PTypeInfo): Boolean of object;}

{_T8 = function (p0 : PTypeInfo;
out p1 : PPropList): Integer of object;}

{_T9 = function (p0 : TObject;
p1 : PPropInfo): Boolean of object;}

function __TIntfMetaData__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIntfMetaData__Wrapper.setName(const val : AnsiString);
begin
TIntfMetaData(GetRecordPtr^).Name := val;
end;
function __TIntfMetaData__Wrapper.getName : AnsiString;
begin
result := TIntfMetaData(GetRecordPtr^).Name;
end;
procedure __TIntfMetaData__Wrapper.setUnitName(const val : AnsiString);
begin
TIntfMetaData(GetRecordPtr^).UnitName := val;
end;
function __TIntfMetaData__Wrapper.getUnitName : AnsiString;
begin
result := TIntfMetaData(GetRecordPtr^).UnitName;
end;
procedure __TIntfMetaData__Wrapper.setNumAnc(const val : Integer);
begin
TIntfMetaData(GetRecordPtr^).NumAnc := val;
end;
function __TIntfMetaData__Wrapper.getNumAnc : Integer;
begin
result := TIntfMetaData(GetRecordPtr^).NumAnc;
end;
function __TIntfMethEntry__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIntfMethEntry__Wrapper.setName(const val : AnsiString);
begin
TIntfMethEntry(GetRecordPtr^).Name := val;
end;
function __TIntfMethEntry__Wrapper.getName : AnsiString;
begin
result := TIntfMethEntry(GetRecordPtr^).Name;
end;
procedure __TIntfMethEntry__Wrapper.setCC(const val : TCallConv);
begin
TIntfMethEntry(GetRecordPtr^).CC := val;
end;
function __TIntfMethEntry__Wrapper.getCC : TCallConv;
begin
result := TIntfMethEntry(GetRecordPtr^).CC;
end;
procedure __TIntfMethEntry__Wrapper.setPos(const val : Integer);
begin
TIntfMethEntry(GetRecordPtr^).Pos := val;
end;
function __TIntfMethEntry__Wrapper.getPos : Integer;
begin
result := TIntfMethEntry(GetRecordPtr^).Pos;
end;
procedure __TIntfMethEntry__Wrapper.setParamCount(const val : Integer);
begin
TIntfMethEntry(GetRecordPtr^).ParamCount := val;
end;
function __TIntfMethEntry__Wrapper.getParamCount : Integer;
begin
result := TIntfMethEntry(GetRecordPtr^).ParamCount;
end;
procedure __TIntfMethEntry__Wrapper.setHasRTTI(const val : Boolean);
begin
TIntfMethEntry(GetRecordPtr^).HasRTTI := val;
end;
function __TIntfMethEntry__Wrapper.getHasRTTI : Boolean;
begin
result := TIntfMethEntry(GetRecordPtr^).HasRTTI;
end;
function __TIntfParamEntry__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIntfParamEntry__Wrapper.setName(const val : AnsiString);
begin
TIntfParamEntry(GetRecordPtr^).Name := val;
end;
function __TIntfParamEntry__Wrapper.getName : AnsiString;
begin
result := TIntfParamEntry(GetRecordPtr^).Name;
end;
function _TIntfMetaData_ : IDispatch;
begin
  result := __TIntfMetaData__Wrapper.Create;
end;
function _TIntfMethEntry_ : IDispatch;
begin
  result := __TIntfMethEntry__Wrapper.Create;
end;
function _TIntfParamEntry_ : IDispatch;
begin
  result := __TIntfParamEntry__Wrapper.Create;
end;
function ____GetMethNum__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
var
__p0 : ^TIntfMetaData;
__i0 : IDispatch;
begin
__i0 := VarToInterface(OleVariant(pargs^[0]));
if __i0 = nil then exit;
__p0 := (__i0 as IDCRecordWrapper).GetRecordPtr;
case cArgs of
2:
begin
result := GetMethNum(__p0^,OleVariant(pargs^[0]));
end;
3:
begin
result := GetMethNum(__p0^,OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;


type __TIntfMetaData__Wrapper__ = class(__TIntfMetaData__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIntfMetaData__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIntfMetaDataToVariant(var R : TIntfMetaData) : OleVariant;
var
__rw : __TIntfMetaData__Wrapper__;
begin
__rw := __TIntfMetaData__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIntfMetaData(const V : OleVariant) : TIntfMetaData;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIntfMetaData((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TIntfMethEntry__Wrapper__ = class(__TIntfMethEntry__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIntfMethEntry__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIntfMethEntryToVariant(var R : TIntfMethEntry) : OleVariant;
var
__rw : __TIntfMethEntry__Wrapper__;
begin
__rw := __TIntfMethEntry__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIntfMethEntry(const V : OleVariant) : TIntfMethEntry;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIntfMethEntry((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TIntfParamEntry__Wrapper__ = class(__TIntfParamEntry__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIntfParamEntry__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIntfParamEntryToVariant(var R : TIntfParamEntry) : OleVariant;
var
__rw : __TIntfParamEntry__Wrapper__;
begin
__rw := __TIntfParamEntry__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIntfParamEntry(const V : OleVariant) : TIntfParamEntry;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIntfParamEntry((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..7] of string = (
'ccReg'
,'ccCdecl'
,'ccPascal'
,'ccStdCall'
,'ccSafeCall'
,'fmoAllBaseMethods'
,'fmoRTTIBaseMethods'
,'fmoNoBaseMethods'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,ccReg));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,ccCdecl));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,ccPascal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,ccStdCall));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,ccSafeCall));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,fmoAllBaseMethods));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,fmoRTTIBaseMethods));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,fmoNoBaseMethods));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..0] of TClass = (
EInterfaceRTTIException
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..5] of string = (
'TIntfMetaData'
,'TIntfMethEntry'
,'TIntfParamEntry'
,'GetMethNum'
,'TypeNamesMatch'
,'OtherTypeName'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TIntfMetaData_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_TIntfMethEntry_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_TIntfParamEntry_)));
RegisterProc(nil,MethodNames[3],mtScriptProc,TypeInfo(_T1),[
TypeInfo(IDispatch),
TypeInfo(string),
TypeInfo(Integer),TypeInfo(Integer)],Addr(____GetMethNum__Wrapper),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T5),[
TypeInfo(string),
TypeInfo(string),TypeInfo(Boolean)],Addr(TypeNamesMatch),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T6),[
TypeInfo(string),TypeInfo(string)],Addr(OtherTypeName),cRegister);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'GetDynArrayElTypeInfo',mtProc,TypeInfo(_T2),[
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(Integer)],Addr(GetDynArrayElTypeInfo),cRegister)}

{RegisterProc(nil,'GetDynArrayNextInfo',mtProc,TypeInfo(_T3),[
TypeInfoPointer,TypeInfoPointer],Addr(GetDynArrayNextInfo),cRegister)}

{RegisterProc(nil,'GetDynArrayNextInfo2',mtProc,TypeInfo(_T4),[
TypeInfoPointer,
TypeInfo(string),TypeInfoPointer],Addr(GetDynArrayNextInfo2),cRegister)}

{RegisterProc(nil,'SameTypeInfo',mtProc,TypeInfo(_T7),[
TypeInfoPointer,
TypeInfoPointer,TypeInfo(Boolean)],Addr(SameTypeInfo),cRegister)}

{RegisterProc(nil,'GetPropListFlat',mtProc,TypeInfo(_T8),[
TypeInfoPointer,
TypeInfoPointer,TypeInfo(Integer)],Addr(GetPropListFlat),cRegister)}

{RegisterProc(nil,'IsStoredPropConst',mtProc,TypeInfo(_T9),[
TypeInfo(TObject),
TypeInfoPointer,TypeInfo(Boolean)],Addr(IsStoredPropConst),cRegister)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
