{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit dccompchanges_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  windows,
  classes,
  dcdreamlib,
  typinfo,
  sysutils,
  controls,
  menus,
  dccommon,
  dcsystem,
  forms,
  dccompchanges;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (p0 : TStream;
p1 : TStrings) of object;

_T1 = procedure (p0 : TStream;
p1 : TStream) of object;

_T2 = function (p0 : TComponent): Boolean of object;

_T3 = _T2;

_T4 = procedure  of object;

_T5 = procedure (p0 : TComponent) of object;

_T6 = _T4;

_T7 = procedure (p0 : TStream) of object;

_T8 = procedure (p0 : TComponent;
p1 : TStream) of object;

_T9 = procedure (const p0 : TFileName) of object;

_T10 = procedure (const p0 : string) of object;

_T11 = procedure (p0 : TComponent;
const p1 : string) of object;

_T12 = procedure (p0 : TComponent;
const p1 : TFileName) of object;

function __DC__GetTCompStateCollection__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCompStateCollection(Instance).Items[OleVariant(Params^[0])]);
end;

function __DC__GetTCompStateItem__Instance(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCompStateItem(Instance).Instance);
end;

procedure __DC__SetTCompStateItem__Instance(Instance : TObject; Params : PVariantArgList);
begin
TCompStateItem(Instance).Instance:=TComponent(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDCCompChanges__StartList(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDCCompChanges(Instance).StartList);
end;

procedure __RegisterProps;
begin
RegisterIndexedProperty(TCompStateCollection,'Items',1,True,__DC__GetTCompStateCollection__Items,nil);
RegisterProperty(TCompStateItem,'Instance',__DC__GetTCompStateItem__Instance,__DC__SetTCompStateItem__Instance);
RegisterProperty(TDCCompChanges,'StartList',__DC__GetTDCCompChanges__StartList,nil);
end;

function __DC__Getdccompchanges__IsStoredPropAddr(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(dccompchanges.IsStoredPropAddr);
end;

procedure __DC__Setdccompchanges__IsStoredPropAddr(Instance : TObject; Params : PVariantArgList);
begin
dccompchanges.IsStoredPropAddr:=VarToPointer(OleVariant(Params^[0]));
end;

function __DC__Getdccompchanges__WritePropertyAddr(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(dccompchanges.WritePropertyAddr);
end;

procedure __DC__Setdccompchanges__WritePropertyAddr(Instance : TObject; Params : PVariantArgList);
begin
dccompchanges.WritePropertyAddr:=VarToPointer(OleVariant(Params^[0]));
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('IsStoredPropAddr',__DC__Getdccompchanges__IsStoredPropAddr,__DC__Setdccompchanges__IsStoredPropAddr));
__RegisteredVars.Add(RegisterVar('WritePropertyAddr',__DC__Getdccompchanges__WritePropertyAddr,__DC__Setdccompchanges__WritePropertyAddr));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..0] of string = (
'CVersion'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,CVersion));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..3] of TClass = (
TCompStateCollection,
TCompStateItem,
TCustomDataModuleNotifier,
TDCCompChanges
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..1] of string = (
'CompChangesStreamToStrings'
,'CompChangesStreamToTextStream'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(TStream),
TypeInfo(TStrings)],Addr(CompChangesStreamToStrings),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(TStream),
TypeInfo(TStream)],Addr(CompChangesStreamToTextStream),cRegister);

RegRegisterMethod(TCompStateCollection,'CompExists',TypeInfo(_T2),[
TypeInfo(TComponent),TypeInfo(Boolean)],Addr(TCompStateCollection.CompExists));

//RegRegisterMethod(TDCCompChanges,'NeedTrackComponent',TypeInfo(_T3),[TypeInfo(TComponent),TypeInfo(Boolean)], pointer(0));
RegRegisterMethod(TDCCompChanges,'NeedTrackComponent',TypeInfo(_T3),[TypeInfo(TComponent),TypeInfo(Boolean)],  getVMTProcAddr('TDCCompChanges','NeedTrackComponent',0));


RegisterProc(TDCCompChanges,'Create',mtConstructor,TypeInfo(_T4),NoParams,Addr(TDCCompChanges.Create),cRegister);

RegRegisterMethod(TDCCompChanges,'Start',TypeInfo(_T5),[
TypeInfo(TComponent)],Addr(TDCCompChanges.Start));

RegRegisterMethod(TDCCompChanges,'Finish',TypeInfo(_T6),NoParams,Addr(TDCCompChanges.Finish));

RegRegisterMethod(TDCCompChanges,'SaveToStream',TypeInfo(_T7),[
TypeInfo(TStream)],Addr(TDCCompChanges.SaveToStream));

RegRegisterMethod(TDCCompChanges,'ApplyFromStream',TypeInfo(_T8),[
TypeInfo(TComponent),
TypeInfo(TStream)],Addr(TDCCompChanges.ApplyFromStream));

RegRegisterMethod(TDCCompChanges,'SaveToFile',TypeInfo(_T9),[
TypeInfo(TFileName)],Addr(TDCCompChanges.SaveToFile));

RegRegisterMethod(TDCCompChanges,'SaveToRegistry',TypeInfo(_T10),[
TypeInfo(string)],Addr(TDCCompChanges.SaveToRegistry));

RegRegisterMethod(TDCCompChanges,'LoadFromRegistry',TypeInfo(_T11),[
TypeInfo(TComponent),
TypeInfo(string)],Addr(TDCCompChanges.LoadFromRegistry));

RegRegisterMethod(TDCCompChanges,'ApplyFromFile',TypeInfo(_T12),[
TypeInfo(TComponent),
TypeInfo(TFileName)],Addr(TDCCompChanges.ApplyFromFile));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
RegisterEvent(TypeInfo(TNeedTrackComponentProc),[
TypeInfo(TObject),
TypeInfo(TComponent),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TStorePropertyProc),[
TypeInfo(TObject),
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(Boolean)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
