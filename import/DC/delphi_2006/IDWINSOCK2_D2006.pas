{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDWINSOCK2_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  Types,
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Windows,
  IdException,
  IdWinSock2;
function Convert_TRANSMIT_FILE_BUFFERSToVariant(var R : _TRANSMIT_FILE_BUFFERS) : OleVariant;
function ConvertVariantTo_TRANSMIT_FILE_BUFFERS(const V : OleVariant) : _TRANSMIT_FILE_BUFFERS;
function ConvertAAL_PARAMETERS_IEToVariant(var R : AAL_PARAMETERS_IE) : OleVariant;
function ConvertVariantToAAL_PARAMETERS_IE(const V : OleVariant) : AAL_PARAMETERS_IE;
function ConvertAAL5_PARAMETERSToVariant(var R : AAL5_PARAMETERS) : OleVariant;
function ConvertVariantToAAL5_PARAMETERS(const V : OleVariant) : AAL5_PARAMETERS;
function ConvertAALUSER_PARAMETERSToVariant(var R : AALUSER_PARAMETERS) : OleVariant;
function ConvertVariantToAALUSER_PARAMETERS(const V : OleVariant) : AALUSER_PARAMETERS;
function ConvertADDRINFOToVariant(var R : ADDRINFO) : OleVariant;
function ConvertVariantToADDRINFO(const V : OleVariant) : ADDRINFO;
function ConvertAFPROTOCOLSToVariant(var R : AFPROTOCOLS) : OleVariant;
function ConvertVariantToAFPROTOCOLS(const V : OleVariant) : AFPROTOCOLS;
function ConvertATM_ADDRESSToVariant(var R : ATM_ADDRESS) : OleVariant;
function ConvertVariantToATM_ADDRESS(const V : OleVariant) : ATM_ADDRESS;
function ConvertATM_BHLIToVariant(var R : ATM_BHLI) : OleVariant;
function ConvertVariantToATM_BHLI(const V : OleVariant) : ATM_BHLI;
function ConvertATM_BHLI_IEToVariant(var R : ATM_BHLI_IE) : OleVariant;
function ConvertVariantToATM_BHLI_IE(const V : OleVariant) : ATM_BHLI_IE;
function ConvertATM_BLLIToVariant(var R : ATM_BLLI) : OleVariant;
function ConvertVariantToATM_BLLI(const V : OleVariant) : ATM_BLLI;
function ConvertATM_BLLI_IEToVariant(var R : ATM_BLLI_IE) : OleVariant;
function ConvertVariantToATM_BLLI_IE(const V : OleVariant) : ATM_BLLI_IE;
function ConvertATM_BROADBAND_BEARER_CAPABILITY_IEToVariant(var R : ATM_BROADBAND_BEARER_CAPABILITY_IE) : OleVariant;
function ConvertVariantToATM_BROADBAND_BEARER_CAPABILITY_IE(const V : OleVariant) : ATM_BROADBAND_BEARER_CAPABILITY_IE;
function ConvertATM_CALLED_PARTY_NUMBER_IEToVariant(var R : ATM_CALLED_PARTY_NUMBER_IE) : OleVariant;
function ConvertVariantToATM_CALLED_PARTY_NUMBER_IE(const V : OleVariant) : ATM_CALLED_PARTY_NUMBER_IE;
function ConvertATM_CALLED_PARTY_SUBADDRESS_IEToVariant(var R : ATM_CALLED_PARTY_SUBADDRESS_IE) : OleVariant;
function ConvertVariantToATM_CALLED_PARTY_SUBADDRESS_IE(const V : OleVariant) : ATM_CALLED_PARTY_SUBADDRESS_IE;
function ConvertATM_CALLING_PARTY_NUMBER_IEToVariant(var R : ATM_CALLING_PARTY_NUMBER_IE) : OleVariant;
function ConvertVariantToATM_CALLING_PARTY_NUMBER_IE(const V : OleVariant) : ATM_CALLING_PARTY_NUMBER_IE;
function ConvertATM_CALLING_PARTY_SUBADDRESS_IEToVariant(var R : ATM_CALLING_PARTY_SUBADDRESS_IE) : OleVariant;
function ConvertVariantToATM_CALLING_PARTY_SUBADDRESS_IE(const V : OleVariant) : ATM_CALLING_PARTY_SUBADDRESS_IE;
function ConvertATM_CAUSE_IEToVariant(var R : ATM_CAUSE_IE) : OleVariant;
function ConvertVariantToATM_CAUSE_IE(const V : OleVariant) : ATM_CAUSE_IE;
function ConvertATM_CONNECTION_IDToVariant(var R : ATM_CONNECTION_ID) : OleVariant;
function ConvertVariantToATM_CONNECTION_ID(const V : OleVariant) : ATM_CONNECTION_ID;
function ConvertATM_PVC_PARAMSToVariant(var R : ATM_PVC_PARAMS) : OleVariant;
function ConvertVariantToATM_PVC_PARAMS(const V : OleVariant) : ATM_PVC_PARAMS;
function ConvertATM_QOS_CLASS_IEToVariant(var R : ATM_QOS_CLASS_IE) : OleVariant;
function ConvertVariantToATM_QOS_CLASS_IE(const V : OleVariant) : ATM_QOS_CLASS_IE;
function ConvertATM_TDToVariant(var R : ATM_TD) : OleVariant;
function ConvertVariantToATM_TD(const V : OleVariant) : ATM_TD;
function ConvertATM_TRAFFIC_DESCRIPTOR_IEToVariant(var R : ATM_TRAFFIC_DESCRIPTOR_IE) : OleVariant;
function ConvertVariantToATM_TRAFFIC_DESCRIPTOR_IE(const V : OleVariant) : ATM_TRAFFIC_DESCRIPTOR_IE;
function ConvertATM_TRANSIT_NETWORK_SELECTION_IEToVariant(var R : ATM_TRANSIT_NETWORK_SELECTION_IE) : OleVariant;
function ConvertVariantToATM_TRANSIT_NETWORK_SELECTION_IE(const V : OleVariant) : ATM_TRANSIT_NETWORK_SELECTION_IE;
function ConvertBLOBToVariant(var R : BLOB) : OleVariant;
function ConvertVariantToBLOB(const V : OleVariant) : BLOB;
function ConvertCSADDR_INFOToVariant(var R : CSADDR_INFO) : OleVariant;
function ConvertVariantToCSADDR_INFO(const V : OleVariant) : CSADDR_INFO;
function ConvertFLOWSPECToVariant(var R : FLOWSPEC) : OleVariant;
function ConvertVariantToFLOWSPEC(const V : OleVariant) : FLOWSPEC;
function ConverthostentToVariant(var R : hostent) : OleVariant;
function ConvertVariantTohostent(const V : OleVariant) : hostent;
function Convertin_addrToVariant(var R : in_addr) : OleVariant;
function ConvertVariantToin_addr(const V : OleVariant) : in_addr;
function ConvertIN_PKTINFOToVariant(var R : IN_PKTINFO) : OleVariant;
function ConvertVariantToIN_PKTINFO(const V : OleVariant) : IN_PKTINFO;
function ConvertIN6_ADDRToVariant(var R : IN6_ADDR) : OleVariant;
function ConvertVariantToIN6_ADDR(const V : OleVariant) : IN6_ADDR;
function ConvertIN6_PKTINFOToVariant(var R : IN6_PKTINFO) : OleVariant;
function ConvertVariantToIN6_PKTINFO(const V : OleVariant) : IN6_PKTINFO;
function ConvertINTERFACE_INFOToVariant(var R : INTERFACE_INFO) : OleVariant;
function ConvertVariantToINTERFACE_INFO(const V : OleVariant) : INTERFACE_INFO;
function ConvertINTERFACE_INFO_EXToVariant(var R : INTERFACE_INFO_EX) : OleVariant;
function ConvertVariantToINTERFACE_INFO_EX(const V : OleVariant) : INTERFACE_INFO_EX;
function Convertip_mreqToVariant(var R : ip_mreq) : OleVariant;
function ConvertVariantToip_mreq(const V : OleVariant) : ip_mreq;
function Convertip_mreq_sourceToVariant(var R : ip_mreq_source) : OleVariant;
function ConvertVariantToip_mreq_source(const V : OleVariant) : ip_mreq_source;
function Convertip_msfilterToVariant(var R : ip_msfilter) : OleVariant;
function ConvertVariantToip_msfilter(const V : OleVariant) : ip_msfilter;
function Convertipv6_mreqToVariant(var R : ipv6_mreq) : OleVariant;
function ConvertVariantToipv6_mreq(const V : OleVariant) : ipv6_mreq;
function ConvertIPX_ADDRESS_DATAToVariant(var R : IPX_ADDRESS_DATA) : OleVariant;
function ConvertVariantToIPX_ADDRESS_DATA(const V : OleVariant) : IPX_ADDRESS_DATA;
function ConvertIPX_NETNUM_DATAToVariant(var R : IPX_NETNUM_DATA) : OleVariant;
function ConvertVariantToIPX_NETNUM_DATA(const V : OleVariant) : IPX_NETNUM_DATA;
function ConvertIPX_SPXCONNSTATUS_DATAToVariant(var R : IPX_SPXCONNSTATUS_DATA) : OleVariant;
function ConvertVariantToIPX_SPXCONNSTATUS_DATA(const V : OleVariant) : IPX_SPXCONNSTATUS_DATA;
function ConvertlingerToVariant(var R : linger) : OleVariant;
function ConvertVariantTolinger(const V : OleVariant) : linger;
function ConvertnetentToVariant(var R : netent) : OleVariant;
function ConvertVariantTonetent(const V : OleVariant) : netent;
function ConvertprotoentToVariant(var R : protoent) : OleVariant;
function ConvertVariantToprotoent(const V : OleVariant) : protoent;
function ConvertQ2931_IEToVariant(var R : Q2931_IE) : OleVariant;
function ConvertVariantToQ2931_IE(const V : OleVariant) : Q2931_IE;
function ConvertQOSToVariant(var R : QOS) : OleVariant;
function ConvertVariantToQOS(const V : OleVariant) : QOS;
function ConvertserventToVariant(var R : servent) : OleVariant;
function ConvertVariantToservent(const V : OleVariant) : servent;
function ConvertSOCKADDRToVariant(var R : SOCKADDR) : OleVariant;
function ConvertVariantToSOCKADDR(const V : OleVariant) : SOCKADDR;
function ConvertSOCKADDR_ATMToVariant(var R : SOCKADDR_ATM) : OleVariant;
function ConvertVariantToSOCKADDR_ATM(const V : OleVariant) : SOCKADDR_ATM;
function Convertsockaddr_genToVariant(var R : sockaddr_gen) : OleVariant;
function ConvertVariantTosockaddr_gen(const V : OleVariant) : sockaddr_gen;
function Convertsockaddr_inToVariant(var R : sockaddr_in) : OleVariant;
function ConvertVariantTosockaddr_in(const V : OleVariant) : sockaddr_in;
function ConvertSOCKADDR_IN6ToVariant(var R : SOCKADDR_IN6) : OleVariant;
function ConvertVariantToSOCKADDR_IN6(const V : OleVariant) : SOCKADDR_IN6;
function Convertsockaddr_in6_oldToVariant(var R : sockaddr_in6_old) : OleVariant;
function ConvertVariantTosockaddr_in6_old(const V : OleVariant) : sockaddr_in6_old;
function ConvertSOCKADDR_IPXToVariant(var R : SOCKADDR_IPX) : OleVariant;
function ConvertVariantToSOCKADDR_IPX(const V : OleVariant) : SOCKADDR_IPX;
function ConvertSOCKADDR_NBToVariant(var R : SOCKADDR_NB) : OleVariant;
function ConvertVariantToSOCKADDR_NB(const V : OleVariant) : SOCKADDR_NB;
function ConvertSOCKET_ADDRESSToVariant(var R : SOCKET_ADDRESS) : OleVariant;
function ConvertVariantToSOCKET_ADDRESS(const V : OleVariant) : SOCKET_ADDRESS;
function ConvertSOCKET_ADDRESS_LISTToVariant(var R : SOCKET_ADDRESS_LIST) : OleVariant;
function ConvertVariantToSOCKET_ADDRESS_LIST(const V : OleVariant) : SOCKET_ADDRESS_LIST;
function ConvertsockprotoToVariant(var R : sockproto) : OleVariant;
function ConvertVariantTosockproto(const V : OleVariant) : sockproto;
function ConvertSunBToVariant(var R : SunB) : OleVariant;
function ConvertVariantToSunB(const V : OleVariant) : SunB;
function ConvertSunWToVariant(var R : SunW) : OleVariant;
function ConvertVariantToSunW(const V : OleVariant) : SunW;
function ConvertTAddrInfoToVariant(var R : TAddrInfo) : OleVariant;
function ConvertVariantToTAddrInfo(const V : OleVariant) : TAddrInfo;
function ConvertTAFProtocolsToVariant(var R : TAFProtocols) : OleVariant;
function ConvertVariantToTAFProtocols(const V : OleVariant) : TAFProtocols;
function ConvertTBLOBToVariant(var R : TBLOB) : OleVariant;
function ConvertVariantToTBLOB(const V : OleVariant) : TBLOB;
function ConvertTCSAddr_InfoToVariant(var R : TCSAddr_Info) : OleVariant;
function ConvertVariantToTCSAddr_Info(const V : OleVariant) : TCSAddr_Info;
function ConvertTFDSetToVariant(var R : TFDSet) : OleVariant;
function ConvertVariantToTFDSet(const V : OleVariant) : TFDSet;
function ConvertTFlowSpecToVariant(var R : TFlowSpec) : OleVariant;
function ConvertVariantToTFlowSpec(const V : OleVariant) : TFlowSpec;
function ConvertTHostEntToVariant(var R : THostEnt) : OleVariant;
function ConvertVariantToTHostEnt(const V : OleVariant) : THostEnt;
function ConverttimevalToVariant(var R : timeval) : OleVariant;
function ConvertVariantTotimeval(const V : OleVariant) : timeval;
function ConvertTIn6AddrToVariant(var R : TIn6Addr) : OleVariant;
function ConvertVariantToTIn6Addr(const V : OleVariant) : TIn6Addr;
function ConvertTIn6PktInfoToVariant(var R : TIn6PktInfo) : OleVariant;
function ConvertVariantToTIn6PktInfo(const V : OleVariant) : TIn6PktInfo;
function ConvertTInAddrToVariant(var R : TInAddr) : OleVariant;
function ConvertVariantToTInAddr(const V : OleVariant) : TInAddr;
function ConvertTInPktInfoToVariant(var R : TInPktInfo) : OleVariant;
function ConvertVariantToTInPktInfo(const V : OleVariant) : TInPktInfo;
function ConvertTInterface_InfoToVariant(var R : TInterface_Info) : OleVariant;
function ConvertVariantToTInterface_Info(const V : OleVariant) : TInterface_Info;
function ConvertTInterface_Info_ExToVariant(var R : TInterface_Info_Ex) : OleVariant;
function ConvertVariantToTInterface_Info_Ex(const V : OleVariant) : TInterface_Info_Ex;
function ConvertTIPXAddressDataToVariant(var R : TIPXAddressData) : OleVariant;
function ConvertVariantToTIPXAddressData(const V : OleVariant) : TIPXAddressData;
function ConvertTIPXNetNumDataToVariant(var R : TIPXNetNumData) : OleVariant;
function ConvertVariantToTIPXNetNumData(const V : OleVariant) : TIPXNetNumData;
function ConvertTIPXSPXConnStatusDataToVariant(var R : TIPXSPXConnStatusData) : OleVariant;
function ConvertVariantToTIPXSPXConnStatusData(const V : OleVariant) : TIPXSPXConnStatusData;
function ConvertTLingerToVariant(var R : TLinger) : OleVariant;
function ConvertVariantToTLinger(const V : OleVariant) : TLinger;
function ConvertTNetEntToVariant(var R : TNetEnt) : OleVariant;
function ConvertVariantToTNetEnt(const V : OleVariant) : TNetEnt;
function ConvertTProtoEntToVariant(var R : TProtoEnt) : OleVariant;
function ConvertVariantToTProtoEnt(const V : OleVariant) : TProtoEnt;
function ConvertTQualityOfServiceToVariant(var R : TQualityOfService) : OleVariant;
function ConvertVariantToTQualityOfService(const V : OleVariant) : TQualityOfService;
function ConvertTRANSMIT_FILE_BUFFERSToVariant(var R : TRANSMIT_FILE_BUFFERS) : OleVariant;
function ConvertVariantToTRANSMIT_FILE_BUFFERS(const V : OleVariant) : TRANSMIT_FILE_BUFFERS;
function ConvertTServEntToVariant(var R : TServEnt) : OleVariant;
function ConvertVariantToTServEnt(const V : OleVariant) : TServEnt;
function ConvertTSockAddrToVariant(var R : TSockAddr) : OleVariant;
function ConvertVariantToTSockAddr(const V : OleVariant) : TSockAddr;
function ConvertTSockAddr_IPXToVariant(var R : TSockAddr_IPX) : OleVariant;
function ConvertVariantToTSockAddr_IPX(const V : OleVariant) : TSockAddr_IPX;
function ConvertTSockAddrATMToVariant(var R : TSockAddrATM) : OleVariant;
function ConvertVariantToTSockAddrATM(const V : OleVariant) : TSockAddrATM;
function ConvertTSockAddrGenToVariant(var R : TSockAddrGen) : OleVariant;
function ConvertVariantToTSockAddrGen(const V : OleVariant) : TSockAddrGen;
function ConvertTSockAddrInToVariant(var R : TSockAddrIn) : OleVariant;
function ConvertVariantToTSockAddrIn(const V : OleVariant) : TSockAddrIn;
function ConvertTSockAddrIn6ToVariant(var R : TSockAddrIn6) : OleVariant;
function ConvertVariantToTSockAddrIn6(const V : OleVariant) : TSockAddrIn6;
function ConvertTSockAddrIPXToVariant(var R : TSockAddrIPX) : OleVariant;
function ConvertVariantToTSockAddrIPX(const V : OleVariant) : TSockAddrIPX;
function ConvertTSockAddrNBToVariant(var R : TSockAddrNB) : OleVariant;
function ConvertVariantToTSockAddrNB(const V : OleVariant) : TSockAddrNB;
function ConvertTSocket_AddressToVariant(var R : TSocket_Address) : OleVariant;
function ConvertVariantToTSocket_Address(const V : OleVariant) : TSocket_Address;
function ConvertTSocket_Address_ListToVariant(var R : TSocket_Address_List) : OleVariant;
function ConvertVariantToTSocket_Address_List(const V : OleVariant) : TSocket_Address_List;
function ConvertTSockProtoToVariant(var R : TSockProto) : OleVariant;
function ConvertVariantToTSockProto(const V : OleVariant) : TSockProto;
function ConvertTTimeValToVariant(var R : TTimeVal) : OleVariant;
function ConvertVariantToTTimeVal(const V : OleVariant) : TTimeVal;
function ConvertTTransmitFileBuffersToVariant(var R : TTransmitFileBuffers) : OleVariant;
function ConvertVariantToTTransmitFileBuffers(const V : OleVariant) : TTransmitFileBuffers;
function ConvertTWSABufToVariant(var R : TWSABuf) : OleVariant;
function ConvertVariantToTWSABuf(const V : OleVariant) : TWSABuf;
function ConvertTWSADataToVariant(var R : TWSAData) : OleVariant;
function ConvertVariantToTWSAData(const V : OleVariant) : TWSAData;
function ConvertTWSANameSpace_InfoToVariant(var R : TWSANameSpace_Info) : OleVariant;
function ConvertVariantToTWSANameSpace_Info(const V : OleVariant) : TWSANameSpace_Info;
function ConvertTWSANameSpace_InfoAToVariant(var R : TWSANameSpace_InfoA) : OleVariant;
function ConvertVariantToTWSANameSpace_InfoA(const V : OleVariant) : TWSANameSpace_InfoA;
function ConvertTWSANameSpace_InfoWToVariant(var R : TWSANameSpace_InfoW) : OleVariant;
function ConvertVariantToTWSANameSpace_InfoW(const V : OleVariant) : TWSANameSpace_InfoW;
function ConvertTWSANetworkEventsToVariant(var R : TWSANetworkEvents) : OleVariant;
function ConvertVariantToTWSANetworkEvents(const V : OleVariant) : TWSANetworkEvents;
function ConvertTWSANSClassInfoToVariant(var R : TWSANSClassInfo) : OleVariant;
function ConvertVariantToTWSANSClassInfo(const V : OleVariant) : TWSANSClassInfo;
function ConvertTWSANSClassInfoAToVariant(var R : TWSANSClassInfoA) : OleVariant;
function ConvertVariantToTWSANSClassInfoA(const V : OleVariant) : TWSANSClassInfoA;
function ConvertTWSANSClassInfoWToVariant(var R : TWSANSClassInfoW) : OleVariant;
function ConvertVariantToTWSANSClassInfoW(const V : OleVariant) : TWSANSClassInfoW;
function ConvertTWSAOverlappedToVariant(var R : TWSAOverlapped) : OleVariant;
function ConvertVariantToTWSAOverlapped(const V : OleVariant) : TWSAOverlapped;
function ConvertTWSAProtocol_InfoToVariant(var R : TWSAProtocol_Info) : OleVariant;
function ConvertVariantToTWSAProtocol_Info(const V : OleVariant) : TWSAProtocol_Info;
function ConvertTWSAProtocol_InfoAToVariant(var R : TWSAProtocol_InfoA) : OleVariant;
function ConvertVariantToTWSAProtocol_InfoA(const V : OleVariant) : TWSAProtocol_InfoA;
function ConvertTWSAProtocol_InfoWToVariant(var R : TWSAProtocol_InfoW) : OleVariant;
function ConvertVariantToTWSAProtocol_InfoW(const V : OleVariant) : TWSAProtocol_InfoW;
function ConvertTWSAProtocolChainToVariant(var R : TWSAProtocolChain) : OleVariant;
function ConvertVariantToTWSAProtocolChain(const V : OleVariant) : TWSAProtocolChain;
function ConvertTWSAQuerySetToVariant(var R : TWSAQuerySet) : OleVariant;
function ConvertVariantToTWSAQuerySet(const V : OleVariant) : TWSAQuerySet;
function ConvertTWSAQuerySetAToVariant(var R : TWSAQuerySetA) : OleVariant;
function ConvertVariantToTWSAQuerySetA(const V : OleVariant) : TWSAQuerySetA;
function ConvertTWSAQuerySetWToVariant(var R : TWSAQuerySetW) : OleVariant;
function ConvertVariantToTWSAQuerySetW(const V : OleVariant) : TWSAQuerySetW;
function ConvertTWSAServiceClassInfoToVariant(var R : TWSAServiceClassInfo) : OleVariant;
function ConvertVariantToTWSAServiceClassInfo(const V : OleVariant) : TWSAServiceClassInfo;
function ConvertTWSAServiceClassInfoAToVariant(var R : TWSAServiceClassInfoA) : OleVariant;
function ConvertVariantToTWSAServiceClassInfoA(const V : OleVariant) : TWSAServiceClassInfoA;
function ConvertTWSAServiceClassInfoWToVariant(var R : TWSAServiceClassInfoW) : OleVariant;
function ConvertVariantToTWSAServiceClassInfoW(const V : OleVariant) : TWSAServiceClassInfoW;
function ConvertTWSAVersionToVariant(var R : TWSAVersion) : OleVariant;
function ConvertVariantToTWSAVersion(const V : OleVariant) : TWSAVersion;
function ConvertWSABUFToVariant(var R : WSABUF) : OleVariant;
function ConvertVariantToWSABUF(const V : OleVariant) : WSABUF;
function ConvertWSADATAToVariant(var R : WSADATA) : OleVariant;
function ConvertVariantToWSADATA(const V : OleVariant) : WSADATA;
function ConvertWSANAMESPACE_INFOToVariant(var R : WSANAMESPACE_INFO) : OleVariant;
function ConvertVariantToWSANAMESPACE_INFO(const V : OleVariant) : WSANAMESPACE_INFO;
function ConvertWSANAMESPACE_INFOAToVariant(var R : WSANAMESPACE_INFOA) : OleVariant;
function ConvertVariantToWSANAMESPACE_INFOA(const V : OleVariant) : WSANAMESPACE_INFOA;
function ConvertWSANAMESPACE_INFOWToVariant(var R : WSANAMESPACE_INFOW) : OleVariant;
function ConvertVariantToWSANAMESPACE_INFOW(const V : OleVariant) : WSANAMESPACE_INFOW;
function ConvertWSANETWORKEVENTSToVariant(var R : WSANETWORKEVENTS) : OleVariant;
function ConvertVariantToWSANETWORKEVENTS(const V : OleVariant) : WSANETWORKEVENTS;
function ConvertWSANSCLASSINFOToVariant(var R : WSANSCLASSINFO) : OleVariant;
function ConvertVariantToWSANSCLASSINFO(const V : OleVariant) : WSANSCLASSINFO;
function ConvertWSANSCLASSINFOAToVariant(var R : WSANSCLASSINFOA) : OleVariant;
function ConvertVariantToWSANSCLASSINFOA(const V : OleVariant) : WSANSCLASSINFOA;
function ConvertWSANSCLASSINFOWToVariant(var R : WSANSCLASSINFOW) : OleVariant;
function ConvertVariantToWSANSCLASSINFOW(const V : OleVariant) : WSANSCLASSINFOW;
function ConvertWSAOVERLAPPEDToVariant(var R : WSAOVERLAPPED) : OleVariant;
function ConvertVariantToWSAOVERLAPPED(const V : OleVariant) : WSAOVERLAPPED;
function ConvertWSAPROTOCOL_INFOToVariant(var R : WSAPROTOCOL_INFO) : OleVariant;
function ConvertVariantToWSAPROTOCOL_INFO(const V : OleVariant) : WSAPROTOCOL_INFO;
function ConvertWSAPROTOCOL_INFOAToVariant(var R : WSAPROTOCOL_INFOA) : OleVariant;
function ConvertVariantToWSAPROTOCOL_INFOA(const V : OleVariant) : WSAPROTOCOL_INFOA;
function ConvertWSAPROTOCOL_INFOWToVariant(var R : WSAPROTOCOL_INFOW) : OleVariant;
function ConvertVariantToWSAPROTOCOL_INFOW(const V : OleVariant) : WSAPROTOCOL_INFOW;
function ConvertWSAPROTOCOLCHAINToVariant(var R : WSAPROTOCOLCHAIN) : OleVariant;
function ConvertVariantToWSAPROTOCOLCHAIN(const V : OleVariant) : WSAPROTOCOLCHAIN;
function ConvertWSAQUERYSETAToVariant(var R : WSAQUERYSETA) : OleVariant;
function ConvertVariantToWSAQUERYSETA(const V : OleVariant) : WSAQUERYSETA;
function ConvertWSAQUERYSETWToVariant(var R : WSAQUERYSETW) : OleVariant;
function ConvertVariantToWSAQUERYSETW(const V : OleVariant) : WSAQUERYSETW;
function ConvertWSASERVICECLASSINFOToVariant(var R : WSASERVICECLASSINFO) : OleVariant;
function ConvertVariantToWSASERVICECLASSINFO(const V : OleVariant) : WSASERVICECLASSINFO;
function ConvertWSASERVICECLASSINFOAToVariant(var R : WSASERVICECLASSINFOA) : OleVariant;
function ConvertVariantToWSASERVICECLASSINFOA(const V : OleVariant) : WSASERVICECLASSINFOA;
function ConvertWSASERVICECLASSINFOWToVariant(var R : WSASERVICECLASSINFOW) : OleVariant;
function ConvertVariantToWSASERVICECLASSINFOW(const V : OleVariant) : WSASERVICECLASSINFOW;
function ConvertWSAVERSIONToVariant(var R : WSAVERSION) : OleVariant;
function ConvertVariantToWSAVERSION(const V : OleVariant) : WSAVERSION;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __IN6_ADDR__Wrapper = class(TDCRecordWrapper)
private
fR : IN6_ADDR;
public
function GetRecordPtr : pointer; override;
published
end;
type ___TRANSMIT_FILE_BUFFERS__Wrapper = class(TDCRecordWrapper)
private
fR : _TRANSMIT_FILE_BUFFERS;
public
function GetRecordPtr : pointer; override;
published
procedure setHeadLength(const val : DWORD);
function getHeadLength : DWORD;
property HeadLength : DWORD read getHeadLength write setHeadLength;
procedure setTailLength(const val : DWORD);
function getTailLength : DWORD;
property TailLength : DWORD read getTailLength write setTailLength;
end;
type __AAL_PARAMETERS_IE__Wrapper = class(TDCRecordWrapper)
private
fR : AAL_PARAMETERS_IE;
public
function GetRecordPtr : pointer; override;
published
procedure setAALType(const val : AAL_TYPE);
function getAALType : AAL_TYPE;
property AALType : AAL_TYPE read getAALType write setAALType;
end;
type __AAL5_PARAMETERS__Wrapper = class(TDCRecordWrapper)
private
fR : AAL5_PARAMETERS;
public
function GetRecordPtr : pointer; override;
published
procedure setForwardMaxCPCSSDUSize(const val : ULONG);
function getForwardMaxCPCSSDUSize : ULONG;
property ForwardMaxCPCSSDUSize : ULONG read getForwardMaxCPCSSDUSize write setForwardMaxCPCSSDUSize;
procedure setBackwardMaxCPCSSDUSize(const val : ULONG);
function getBackwardMaxCPCSSDUSize : ULONG;
property BackwardMaxCPCSSDUSize : ULONG read getBackwardMaxCPCSSDUSize write setBackwardMaxCPCSSDUSize;
procedure setMode(const val : Byte);
function getMode : Byte;
property Mode : Byte read getMode write setMode;
procedure setSSCSType(const val : Byte);
function getSSCSType : Byte;
property SSCSType : Byte read getSSCSType write setSSCSType;
end;
type __AALUSER_PARAMETERS__Wrapper = class(TDCRecordWrapper)
private
fR : AALUSER_PARAMETERS;
public
function GetRecordPtr : pointer; override;
published
procedure setUserDefined(const val : ULONG);
function getUserDefined : ULONG;
property UserDefined : ULONG read getUserDefined write setUserDefined;
end;
type __ADDRINFO__Wrapper = class(TDCRecordWrapper)
private
fR : ADDRINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setai_flags(const val : Integer);
function getai_flags : Integer;
property ai_flags : Integer read getai_flags write setai_flags;
procedure setai_family(const val : Integer);
function getai_family : Integer;
property ai_family : Integer read getai_family write setai_family;
procedure setai_socktype(const val : Integer);
function getai_socktype : Integer;
property ai_socktype : Integer read getai_socktype write setai_socktype;
procedure setai_protocol(const val : Integer);
function getai_protocol : Integer;
property ai_protocol : Integer read getai_protocol write setai_protocol;
procedure setai_addrlen(const val : ULONG);
function getai_addrlen : ULONG;
property ai_addrlen : ULONG read getai_addrlen write setai_addrlen;
end;
type __AFPROTOCOLS__Wrapper = class(TDCRecordWrapper)
private
fR : AFPROTOCOLS;
public
function GetRecordPtr : pointer; override;
published
procedure setiAddressFamily(const val : Integer);
function getiAddressFamily : Integer;
property iAddressFamily : Integer read getiAddressFamily write setiAddressFamily;
procedure setiProtocol(const val : Integer);
function getiProtocol : Integer;
property iProtocol : Integer read getiProtocol write setiProtocol;
end;
type __ATM_ADDRESS__Wrapper = class(TDCRecordWrapper)
private
fR : ATM_ADDRESS;
public
function GetRecordPtr : pointer; override;
published
procedure setAddressType(const val : DWORD);
function getAddressType : DWORD;
property AddressType : DWORD read getAddressType write setAddressType;
procedure setNumofDigits(const val : DWORD);
function getNumofDigits : DWORD;
property NumofDigits : DWORD read getNumofDigits write setNumofDigits;
end;
type __ATM_BHLI__Wrapper = class(TDCRecordWrapper)
private
fR : ATM_BHLI;
public
function GetRecordPtr : pointer; override;
published
procedure setHighLayerInfoType(const val : DWORD);
function getHighLayerInfoType : DWORD;
property HighLayerInfoType : DWORD read getHighLayerInfoType write setHighLayerInfoType;
procedure setHighLayerInfoLength(const val : DWORD);
function getHighLayerInfoLength : DWORD;
property HighLayerInfoLength : DWORD read getHighLayerInfoLength write setHighLayerInfoLength;
end;
type __ATM_BHLI_IE__Wrapper = class(TDCRecordWrapper)
private
fR : ATM_BHLI_IE;
public
function GetRecordPtr : pointer; override;
published
procedure setHighLayerInfoType(const val : DWORD);
function getHighLayerInfoType : DWORD;
property HighLayerInfoType : DWORD read getHighLayerInfoType write setHighLayerInfoType;
procedure setHighLayerInfoLength(const val : DWORD);
function getHighLayerInfoLength : DWORD;
property HighLayerInfoLength : DWORD read getHighLayerInfoLength write setHighLayerInfoLength;
end;
type __ATM_BLLI__Wrapper = class(TDCRecordWrapper)
private
fR : ATM_BLLI;
public
function GetRecordPtr : pointer; override;
published
procedure setLayer2Protocol(const val : DWORD);
function getLayer2Protocol : DWORD;
property Layer2Protocol : DWORD read getLayer2Protocol write setLayer2Protocol;
procedure setLayer2UserSpecifiedProtocol(const val : DWORD);
function getLayer2UserSpecifiedProtocol : DWORD;
property Layer2UserSpecifiedProtocol : DWORD read getLayer2UserSpecifiedProtocol write setLayer2UserSpecifiedProtocol;
procedure setLayer3Protocol(const val : DWORD);
function getLayer3Protocol : DWORD;
property Layer3Protocol : DWORD read getLayer3Protocol write setLayer3Protocol;
procedure setLayer3UserSpecifiedProtocol(const val : DWORD);
function getLayer3UserSpecifiedProtocol : DWORD;
property Layer3UserSpecifiedProtocol : DWORD read getLayer3UserSpecifiedProtocol write setLayer3UserSpecifiedProtocol;
procedure setLayer3IPI(const val : DWORD);
function getLayer3IPI : DWORD;
property Layer3IPI : DWORD read getLayer3IPI write setLayer3IPI;
end;
type __ATM_BLLI_IE__Wrapper = class(TDCRecordWrapper)
private
fR : ATM_BLLI_IE;
public
function GetRecordPtr : pointer; override;
published
procedure setLayer2Protocol(const val : DWORD);
function getLayer2Protocol : DWORD;
property Layer2Protocol : DWORD read getLayer2Protocol write setLayer2Protocol;
procedure setLayer2Mode(const val : Byte);
function getLayer2Mode : Byte;
property Layer2Mode : Byte read getLayer2Mode write setLayer2Mode;
procedure setLayer2WindowSize(const val : Byte);
function getLayer2WindowSize : Byte;
property Layer2WindowSize : Byte read getLayer2WindowSize write setLayer2WindowSize;
procedure setLayer2UserSpecifiedProtocol(const val : DWORD);
function getLayer2UserSpecifiedProtocol : DWORD;
property Layer2UserSpecifiedProtocol : DWORD read getLayer2UserSpecifiedProtocol write setLayer2UserSpecifiedProtocol;
procedure setLayer3Protocol(const val : DWORD);
function getLayer3Protocol : DWORD;
property Layer3Protocol : DWORD read getLayer3Protocol write setLayer3Protocol;
procedure setLayer3Mode(const val : Byte);
function getLayer3Mode : Byte;
property Layer3Mode : Byte read getLayer3Mode write setLayer3Mode;
procedure setLayer3DefaultPacketSize(const val : Byte);
function getLayer3DefaultPacketSize : Byte;
property Layer3DefaultPacketSize : Byte read getLayer3DefaultPacketSize write setLayer3DefaultPacketSize;
procedure setLayer3PacketWindowSize(const val : Byte);
function getLayer3PacketWindowSize : Byte;
property Layer3PacketWindowSize : Byte read getLayer3PacketWindowSize write setLayer3PacketWindowSize;
procedure setLayer3UserSpecifiedProtocol(const val : DWORD);
function getLayer3UserSpecifiedProtocol : DWORD;
property Layer3UserSpecifiedProtocol : DWORD read getLayer3UserSpecifiedProtocol write setLayer3UserSpecifiedProtocol;
procedure setLayer3IPI(const val : DWORD);
function getLayer3IPI : DWORD;
property Layer3IPI : DWORD read getLayer3IPI write setLayer3IPI;
end;
type __ATM_BROADBAND_BEARER_CAPABILITY_IE__Wrapper = class(TDCRecordWrapper)
private
fR : ATM_BROADBAND_BEARER_CAPABILITY_IE;
public
function GetRecordPtr : pointer; override;
published
procedure setBearerClass(const val : Byte);
function getBearerClass : Byte;
property BearerClass : Byte read getBearerClass write setBearerClass;
procedure setTrafficType(const val : Byte);
function getTrafficType : Byte;
property TrafficType : Byte read getTrafficType write setTrafficType;
procedure setTimingRequirements(const val : Byte);
function getTimingRequirements : Byte;
property TimingRequirements : Byte read getTimingRequirements write setTimingRequirements;
procedure setClippingSusceptability(const val : Byte);
function getClippingSusceptability : Byte;
property ClippingSusceptability : Byte read getClippingSusceptability write setClippingSusceptability;
procedure setUserPlaneConnectionConfig(const val : Byte);
function getUserPlaneConnectionConfig : Byte;
property UserPlaneConnectionConfig : Byte read getUserPlaneConnectionConfig write setUserPlaneConnectionConfig;
end;
type __ATM_CALLED_PARTY_NUMBER_IE__Wrapper = class(TDCRecordWrapper)
private
fR : ATM_CALLED_PARTY_NUMBER_IE;
public
function GetRecordPtr : pointer; override;
published
procedure setAddressType(const val : DWORD);
function getAddressType : DWORD;
property AddressType : DWORD read getAddressType write setAddressType;
procedure setNumofDigits(const val : DWORD);
function getNumofDigits : DWORD;
property NumofDigits : DWORD read getNumofDigits write setNumofDigits;
end;
type __ATM_CALLED_PARTY_SUBADDRESS_IE__Wrapper = class(TDCRecordWrapper)
private
fR : ATM_CALLED_PARTY_SUBADDRESS_IE;
public
function GetRecordPtr : pointer; override;
published
procedure setAddressType(const val : DWORD);
function getAddressType : DWORD;
property AddressType : DWORD read getAddressType write setAddressType;
procedure setNumofDigits(const val : DWORD);
function getNumofDigits : DWORD;
property NumofDigits : DWORD read getNumofDigits write setNumofDigits;
end;
type __ATM_CALLING_PARTY_NUMBER_IE__Wrapper = class(TDCRecordWrapper)
private
fR : ATM_CALLING_PARTY_NUMBER_IE;
public
function GetRecordPtr : pointer; override;
published
procedure setPresentation_Indication(const val : Byte);
function getPresentation_Indication : Byte;
property Presentation_Indication : Byte read getPresentation_Indication write setPresentation_Indication;
procedure setScreening_Indicator(const val : Byte);
function getScreening_Indicator : Byte;
property Screening_Indicator : Byte read getScreening_Indicator write setScreening_Indicator;
end;
type __ATM_CALLING_PARTY_SUBADDRESS_IE__Wrapper = class(TDCRecordWrapper)
private
fR : ATM_CALLING_PARTY_SUBADDRESS_IE;
public
function GetRecordPtr : pointer; override;
published
procedure setAddressType(const val : DWORD);
function getAddressType : DWORD;
property AddressType : DWORD read getAddressType write setAddressType;
procedure setNumofDigits(const val : DWORD);
function getNumofDigits : DWORD;
property NumofDigits : DWORD read getNumofDigits write setNumofDigits;
end;
type __ATM_CAUSE_IE__Wrapper = class(TDCRecordWrapper)
private
fR : ATM_CAUSE_IE;
public
function GetRecordPtr : pointer; override;
published
procedure setLocation(const val : Byte);
function getLocation : Byte;
property Location : Byte read getLocation write setLocation;
procedure setCause(const val : Byte);
function getCause : Byte;
property Cause : Byte read getCause write setCause;
procedure setDiagnosticsLength(const val : Byte);
function getDiagnosticsLength : Byte;
property DiagnosticsLength : Byte read getDiagnosticsLength write setDiagnosticsLength;
end;
type __ATM_CONNECTION_ID__Wrapper = class(TDCRecordWrapper)
private
fR : ATM_CONNECTION_ID;
public
function GetRecordPtr : pointer; override;
published
procedure setDeviceNumber(const val : DWORD);
function getDeviceNumber : DWORD;
property DeviceNumber : DWORD read getDeviceNumber write setDeviceNumber;
procedure setVPI(const val : DWORD);
function getVPI : DWORD;
property VPI : DWORD read getVPI write setVPI;
procedure setVCI(const val : DWORD);
function getVCI : DWORD;
property VCI : DWORD read getVCI write setVCI;
end;
type __ATM_PVC_PARAMS__Wrapper = class(TDCRecordWrapper)
private
fR : ATM_PVC_PARAMS;
public
function GetRecordPtr : pointer; override;
published
end;
type __ATM_QOS_CLASS_IE__Wrapper = class(TDCRecordWrapper)
private
fR : ATM_QOS_CLASS_IE;
public
function GetRecordPtr : pointer; override;
published
procedure setQOSClassForward(const val : Byte);
function getQOSClassForward : Byte;
property QOSClassForward : Byte read getQOSClassForward write setQOSClassForward;
procedure setQOSClassBackward(const val : Byte);
function getQOSClassBackward : Byte;
property QOSClassBackward : Byte read getQOSClassBackward write setQOSClassBackward;
end;
type __ATM_TD__Wrapper = class(TDCRecordWrapper)
private
fR : ATM_TD;
public
function GetRecordPtr : pointer; override;
published
procedure setPeakCellRate_CLP0(const val : ULONG);
function getPeakCellRate_CLP0 : ULONG;
property PeakCellRate_CLP0 : ULONG read getPeakCellRate_CLP0 write setPeakCellRate_CLP0;
procedure setPeakCellRate_CLP01(const val : ULONG);
function getPeakCellRate_CLP01 : ULONG;
property PeakCellRate_CLP01 : ULONG read getPeakCellRate_CLP01 write setPeakCellRate_CLP01;
procedure setSustainableCellRate_CLP0(const val : ULONG);
function getSustainableCellRate_CLP0 : ULONG;
property SustainableCellRate_CLP0 : ULONG read getSustainableCellRate_CLP0 write setSustainableCellRate_CLP0;
procedure setSustainableCellRate_CLP01(const val : ULONG);
function getSustainableCellRate_CLP01 : ULONG;
property SustainableCellRate_CLP01 : ULONG read getSustainableCellRate_CLP01 write setSustainableCellRate_CLP01;
procedure setMaxBurstSize_CLP0(const val : ULONG);
function getMaxBurstSize_CLP0 : ULONG;
property MaxBurstSize_CLP0 : ULONG read getMaxBurstSize_CLP0 write setMaxBurstSize_CLP0;
procedure setMaxBurstSize_CLP01(const val : ULONG);
function getMaxBurstSize_CLP01 : ULONG;
property MaxBurstSize_CLP01 : ULONG read getMaxBurstSize_CLP01 write setMaxBurstSize_CLP01;
procedure setTagging(const val : LongBool);
function getTagging : LongBool;
property Tagging : LongBool read getTagging write setTagging;
end;
type __ATM_TRAFFIC_DESCRIPTOR_IE__Wrapper = class(TDCRecordWrapper)
private
fR : ATM_TRAFFIC_DESCRIPTOR_IE;
public
function GetRecordPtr : pointer; override;
published
procedure setBestEffort(const val : LongBool);
function getBestEffort : LongBool;
property BestEffort : LongBool read getBestEffort write setBestEffort;
end;
type __ATM_TRANSIT_NETWORK_SELECTION_IE__Wrapper = class(TDCRecordWrapper)
private
fR : ATM_TRANSIT_NETWORK_SELECTION_IE;
public
function GetRecordPtr : pointer; override;
published
procedure setTypeOfNetworkId(const val : Byte);
function getTypeOfNetworkId : Byte;
property TypeOfNetworkId : Byte read getTypeOfNetworkId write setTypeOfNetworkId;
procedure setNetworkIdPlan(const val : Byte);
function getNetworkIdPlan : Byte;
property NetworkIdPlan : Byte read getNetworkIdPlan write setNetworkIdPlan;
procedure setNetworkIdLength(const val : Byte);
function getNetworkIdLength : Byte;
property NetworkIdLength : Byte read getNetworkIdLength write setNetworkIdLength;
end;
type __BLOB__Wrapper = class(TDCRecordWrapper)
private
fR : BLOB;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : ULONG);
function getcbSize : ULONG;
property cbSize : ULONG read getcbSize write setcbSize;
end;
type __CSADDR_INFO__Wrapper = class(TDCRecordWrapper)
private
fR : CSADDR_INFO;
public
function GetRecordPtr : pointer; override;
published
procedure setiSocketType(const val : Integer);
function getiSocketType : Integer;
property iSocketType : Integer read getiSocketType write setiSocketType;
procedure setiProtocol(const val : Integer);
function getiProtocol : Integer;
property iProtocol : Integer read getiProtocol write setiProtocol;
end;
type __FLOWSPEC__Wrapper = class(TDCRecordWrapper)
private
fR : FLOWSPEC;
public
function GetRecordPtr : pointer; override;
published
procedure setTokenRate(const val : Longint);
function getTokenRate : Longint;
property TokenRate : Longint read getTokenRate write setTokenRate;
procedure setTokenBucketSize(const val : Longint);
function getTokenBucketSize : Longint;
property TokenBucketSize : Longint read getTokenBucketSize write setTokenBucketSize;
procedure setPeakBandwidth(const val : Longint);
function getPeakBandwidth : Longint;
property PeakBandwidth : Longint read getPeakBandwidth write setPeakBandwidth;
procedure setLatency(const val : Longint);
function getLatency : Longint;
property Latency : Longint read getLatency write setLatency;
procedure setDelayVariation(const val : Longint);
function getDelayVariation : Longint;
property DelayVariation : Longint read getDelayVariation write setDelayVariation;
procedure setSERVICETYPE(const val : TServiceType);
function getSERVICETYPE : TServiceType;
property SERVICETYPE : TServiceType read getSERVICETYPE write setSERVICETYPE;
procedure setMaxSduSize(const val : Longint);
function getMaxSduSize : Longint;
property MaxSduSize : Longint read getMaxSduSize write setMaxSduSize;
procedure setMinimumPolicedSize(const val : Longint);
function getMinimumPolicedSize : Longint;
property MinimumPolicedSize : Longint read getMinimumPolicedSize write setMinimumPolicedSize;
end;
type __hostent__Wrapper = class(TDCRecordWrapper)
private
fR : hostent;
public
function GetRecordPtr : pointer; override;
published
procedure seth_addrtype(const val : SmallInt);
function geth_addrtype : SmallInt;
property h_addrtype : SmallInt read geth_addrtype write seth_addrtype;
procedure seth_length(const val : SmallInt);
function geth_length : SmallInt;
property h_length : SmallInt read geth_length write seth_length;
end;
type __in_addr__Wrapper = class(TDCRecordWrapper)
private
fR : in_addr;
public
function GetRecordPtr : pointer; override;
published
procedure setS_addr(const val : u_long);
function getS_addr : u_long;
property S_addr : u_long read getS_addr write setS_addr;
end;
type __IN_PKTINFO__Wrapper = class(TDCRecordWrapper)
private
fR : IN_PKTINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setipi_ifindex(const val : UINT);
function getipi_ifindex : UINT;
property ipi_ifindex : UINT read getipi_ifindex write setipi_ifindex;
end;
type __IN6_PKTINFO__Wrapper = class(TDCRecordWrapper)
private
fR : IN6_PKTINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setipi6_ifindex(const val : UINT);
function getipi6_ifindex : UINT;
property ipi6_ifindex : UINT read getipi6_ifindex write setipi6_ifindex;
end;
type __INTERFACE_INFO__Wrapper = class(TDCRecordWrapper)
private
fR : INTERFACE_INFO;
public
function GetRecordPtr : pointer; override;
published
procedure setiiFlags(const val : u_long);
function getiiFlags : u_long;
property iiFlags : u_long read getiiFlags write setiiFlags;
end;
type __INTERFACE_INFO_EX__Wrapper = class(TDCRecordWrapper)
private
fR : INTERFACE_INFO_EX;
public
function GetRecordPtr : pointer; override;
published
procedure setiiFlags(const val : u_long);
function getiiFlags : u_long;
property iiFlags : u_long read getiiFlags write setiiFlags;
end;
type __ip_mreq__Wrapper = class(TDCRecordWrapper)
private
fR : ip_mreq;
public
function GetRecordPtr : pointer; override;
published
end;
type __ip_mreq_source__Wrapper = class(TDCRecordWrapper)
private
fR : ip_mreq_source;
public
function GetRecordPtr : pointer; override;
published
end;
type __ip_msfilter__Wrapper = class(TDCRecordWrapper)
private
fR : ip_msfilter;
public
function GetRecordPtr : pointer; override;
published
procedure setimsf_fmode(const val : u_long);
function getimsf_fmode : u_long;
property imsf_fmode : u_long read getimsf_fmode write setimsf_fmode;
procedure setimsf_numsrc(const val : u_long);
function getimsf_numsrc : u_long;
property imsf_numsrc : u_long read getimsf_numsrc write setimsf_numsrc;
end;
type __ipv6_mreq__Wrapper = class(TDCRecordWrapper)
private
fR : ipv6_mreq;
public
function GetRecordPtr : pointer; override;
published
procedure setipv6mr_interface(const val : u_int);
function getipv6mr_interface : u_int;
property ipv6mr_interface : u_int read getipv6mr_interface write setipv6mr_interface;
end;
type __IPX_ADDRESS_DATA__Wrapper = class(TDCRecordWrapper)
private
fR : IPX_ADDRESS_DATA;
public
function GetRecordPtr : pointer; override;
published
procedure setadapternum(const val : Integer);
function getadapternum : Integer;
property adapternum : Integer read getadapternum write setadapternum;
procedure setwan(const val : Boolean);
function getwan : Boolean;
property wan : Boolean read getwan write setwan;
procedure setstatus(const val : Boolean);
function getstatus : Boolean;
property status : Boolean read getstatus write setstatus;
procedure setmaxpkt(const val : Integer);
function getmaxpkt : Integer;
property maxpkt : Integer read getmaxpkt write setmaxpkt;
procedure setlinkspeed(const val : ULONG);
function getlinkspeed : ULONG;
property linkspeed : ULONG read getlinkspeed write setlinkspeed;
end;
type __IPX_NETNUM_DATA__Wrapper = class(TDCRecordWrapper)
private
fR : IPX_NETNUM_DATA;
public
function GetRecordPtr : pointer; override;
published
procedure sethopcount(const val : Word);
function gethopcount : Word;
property hopcount : Word read gethopcount write sethopcount;
procedure setnetdelay(const val : Word);
function getnetdelay : Word;
property netdelay : Word read getnetdelay write setnetdelay;
procedure setcardnum(const val : Integer);
function getcardnum : Integer;
property cardnum : Integer read getcardnum write setcardnum;
end;
type __IPX_SPXCONNSTATUS_DATA__Wrapper = class(TDCRecordWrapper)
private
fR : IPX_SPXCONNSTATUS_DATA;
public
function GetRecordPtr : pointer; override;
published
procedure setConnectionState(const val : Byte);
function getConnectionState : Byte;
property ConnectionState : Byte read getConnectionState write setConnectionState;
procedure setWatchDogActive(const val : Byte);
function getWatchDogActive : Byte;
property WatchDogActive : Byte read getWatchDogActive write setWatchDogActive;
procedure setLocalConnectionId(const val : Word);
function getLocalConnectionId : Word;
property LocalConnectionId : Word read getLocalConnectionId write setLocalConnectionId;
procedure setRemoteConnectionId(const val : Word);
function getRemoteConnectionId : Word;
property RemoteConnectionId : Word read getRemoteConnectionId write setRemoteConnectionId;
procedure setLocalSequenceNumber(const val : Word);
function getLocalSequenceNumber : Word;
property LocalSequenceNumber : Word read getLocalSequenceNumber write setLocalSequenceNumber;
procedure setLocalAckNumber(const val : Word);
function getLocalAckNumber : Word;
property LocalAckNumber : Word read getLocalAckNumber write setLocalAckNumber;
procedure setLocalAllocNumber(const val : Word);
function getLocalAllocNumber : Word;
property LocalAllocNumber : Word read getLocalAllocNumber write setLocalAllocNumber;
procedure setRemoteAckNumber(const val : Word);
function getRemoteAckNumber : Word;
property RemoteAckNumber : Word read getRemoteAckNumber write setRemoteAckNumber;
procedure setRemoteAllocNumber(const val : Word);
function getRemoteAllocNumber : Word;
property RemoteAllocNumber : Word read getRemoteAllocNumber write setRemoteAllocNumber;
procedure setLocalSocket(const val : Word);
function getLocalSocket : Word;
property LocalSocket : Word read getLocalSocket write setLocalSocket;
procedure setRemoteSocket(const val : Word);
function getRemoteSocket : Word;
property RemoteSocket : Word read getRemoteSocket write setRemoteSocket;
procedure setRetransmissionCount(const val : Word);
function getRetransmissionCount : Word;
property RetransmissionCount : Word read getRetransmissionCount write setRetransmissionCount;
procedure setEstimatedRoundTripDelay(const val : Word);
function getEstimatedRoundTripDelay : Word;
property EstimatedRoundTripDelay : Word read getEstimatedRoundTripDelay write setEstimatedRoundTripDelay;
procedure setRetransmittedPackets(const val : Word);
function getRetransmittedPackets : Word;
property RetransmittedPackets : Word read getRetransmittedPackets write setRetransmittedPackets;
procedure setSuppressedPacket(const val : Word);
function getSuppressedPacket : Word;
property SuppressedPacket : Word read getSuppressedPacket write setSuppressedPacket;
end;
type __linger__Wrapper = class(TDCRecordWrapper)
private
fR : linger;
public
function GetRecordPtr : pointer; override;
published
procedure setl_onoff(const val : u_short);
function getl_onoff : u_short;
property l_onoff : u_short read getl_onoff write setl_onoff;
procedure setl_linger(const val : u_short);
function getl_linger : u_short;
property l_linger : u_short read getl_linger write setl_linger;
end;
type __netent__Wrapper = class(TDCRecordWrapper)
private
fR : netent;
public
function GetRecordPtr : pointer; override;
published
procedure setn_addrtype(const val : SmallInt);
function getn_addrtype : SmallInt;
property n_addrtype : SmallInt read getn_addrtype write setn_addrtype;
procedure setn_net(const val : u_long);
function getn_net : u_long;
property n_net : u_long read getn_net write setn_net;
end;
type __protoent__Wrapper = class(TDCRecordWrapper)
private
fR : protoent;
public
function GetRecordPtr : pointer; override;
published
procedure setp_proto(const val : SmallInt);
function getp_proto : SmallInt;
property p_proto : SmallInt read getp_proto write setp_proto;
end;
type __Q2931_IE__Wrapper = class(TDCRecordWrapper)
private
fR : Q2931_IE;
public
function GetRecordPtr : pointer; override;
published
procedure setIEType(const val : Q2931_IE_TYPE);
function getIEType : Q2931_IE_TYPE;
property IEType : Q2931_IE_TYPE read getIEType write setIEType;
procedure setIELength(const val : ULONG);
function getIELength : ULONG;
property IELength : ULONG read getIELength write setIELength;
end;
type __QOS__Wrapper = class(TDCRecordWrapper)
private
fR : QOS;
public
function GetRecordPtr : pointer; override;
published
end;
type __servent__Wrapper = class(TDCRecordWrapper)
private
fR : servent;
public
function GetRecordPtr : pointer; override;
published
procedure sets_port(const val : SmallInt);
function gets_port : SmallInt;
property s_port : SmallInt read gets_port write sets_port;
end;
type __SOCKADDR__Wrapper = class(TDCRecordWrapper)
private
fR : SOCKADDR;
public
function GetRecordPtr : pointer; override;
published
procedure setsin_family(const val : u_short);
function getsin_family : u_short;
property sin_family : u_short read getsin_family write setsin_family;
procedure setsin_port(const val : u_short);
function getsin_port : u_short;
property sin_port : u_short read getsin_port write setsin_port;
procedure setsa_family(const val : u_short);
function getsa_family : u_short;
property sa_family : u_short read getsa_family write setsa_family;
end;
type __SOCKADDR_ATM__Wrapper = class(TDCRecordWrapper)
private
fR : SOCKADDR_ATM;
public
function GetRecordPtr : pointer; override;
published
procedure setsatm_family(const val : u_short);
function getsatm_family : u_short;
property satm_family : u_short read getsatm_family write setsatm_family;
end;
type __sockaddr_gen__Wrapper = class(TDCRecordWrapper)
private
fR : sockaddr_gen;
public
function GetRecordPtr : pointer; override;
published
end;
type __sockaddr_in__Wrapper = class(TDCRecordWrapper)
private
fR : sockaddr_in;
public
function GetRecordPtr : pointer; override;
published
procedure setsin_family(const val : u_short);
function getsin_family : u_short;
property sin_family : u_short read getsin_family write setsin_family;
procedure setsin_port(const val : u_short);
function getsin_port : u_short;
property sin_port : u_short read getsin_port write setsin_port;
procedure setsa_family(const val : u_short);
function getsa_family : u_short;
property sa_family : u_short read getsa_family write setsa_family;
end;
type __SOCKADDR_IN6__Wrapper = class(TDCRecordWrapper)
private
fR : SOCKADDR_IN6;
public
function GetRecordPtr : pointer; override;
published
procedure setsin6_family(const val : SmallInt);
function getsin6_family : SmallInt;
property sin6_family : SmallInt read getsin6_family write setsin6_family;
procedure setsin6_port(const val : u_short);
function getsin6_port : u_short;
property sin6_port : u_short read getsin6_port write setsin6_port;
procedure setsin6_flowinfo(const val : u_long);
function getsin6_flowinfo : u_long;
property sin6_flowinfo : u_long read getsin6_flowinfo write setsin6_flowinfo;
procedure setsin6_scope_id(const val : u_long);
function getsin6_scope_id : u_long;
property sin6_scope_id : u_long read getsin6_scope_id write setsin6_scope_id;
end;
type __sockaddr_in6_old__Wrapper = class(TDCRecordWrapper)
private
fR : sockaddr_in6_old;
public
function GetRecordPtr : pointer; override;
published
procedure setsin6_family(const val : SmallInt);
function getsin6_family : SmallInt;
property sin6_family : SmallInt read getsin6_family write setsin6_family;
procedure setsin6_port(const val : u_short);
function getsin6_port : u_short;
property sin6_port : u_short read getsin6_port write setsin6_port;
procedure setsin6_flowinfo(const val : u_long);
function getsin6_flowinfo : u_long;
property sin6_flowinfo : u_long read getsin6_flowinfo write setsin6_flowinfo;
end;
type __SOCKADDR_IPX__Wrapper = class(TDCRecordWrapper)
private
fR : SOCKADDR_IPX;
public
function GetRecordPtr : pointer; override;
published
procedure setsa_family(const val : u_short);
function getsa_family : u_short;
property sa_family : u_short read getsa_family write setsa_family;
procedure setsa_socket(const val : u_short);
function getsa_socket : u_short;
property sa_socket : u_short read getsa_socket write setsa_socket;
end;
type __SOCKADDR_NB__Wrapper = class(TDCRecordWrapper)
private
fR : SOCKADDR_NB;
public
function GetRecordPtr : pointer; override;
published
procedure setsnb_family(const val : SmallInt);
function getsnb_family : SmallInt;
property snb_family : SmallInt read getsnb_family write setsnb_family;
procedure setsnb_type(const val : u_short);
function getsnb_type : u_short;
property snb_type : u_short read getsnb_type write setsnb_type;
end;
type __SOCKET_ADDRESS__Wrapper = class(TDCRecordWrapper)
private
fR : SOCKET_ADDRESS;
public
function GetRecordPtr : pointer; override;
published
procedure setiSockaddrLength(const val : Integer);
function getiSockaddrLength : Integer;
property iSockaddrLength : Integer read getiSockaddrLength write setiSockaddrLength;
end;
type __SOCKET_ADDRESS_LIST__Wrapper = class(TDCRecordWrapper)
private
fR : SOCKET_ADDRESS_LIST;
public
function GetRecordPtr : pointer; override;
published
procedure setiAddressCount(const val : Integer);
function getiAddressCount : Integer;
property iAddressCount : Integer read getiAddressCount write setiAddressCount;
end;
type __sockproto__Wrapper = class(TDCRecordWrapper)
private
fR : sockproto;
public
function GetRecordPtr : pointer; override;
published
procedure setsp_family(const val : u_short);
function getsp_family : u_short;
property sp_family : u_short read getsp_family write setsp_family;
procedure setsp_protocol(const val : u_short);
function getsp_protocol : u_short;
property sp_protocol : u_short read getsp_protocol write setsp_protocol;
end;
type __SunB__Wrapper = class(TDCRecordWrapper)
private
fR : SunB;
public
function GetRecordPtr : pointer; override;
published
procedure sets_b1(const val : u_char);
function gets_b1 : u_char;
property s_b1 : u_char read gets_b1 write sets_b1;
procedure sets_b2(const val : u_char);
function gets_b2 : u_char;
property s_b2 : u_char read gets_b2 write sets_b2;
procedure sets_b3(const val : u_char);
function gets_b3 : u_char;
property s_b3 : u_char read gets_b3 write sets_b3;
procedure sets_b4(const val : u_char);
function gets_b4 : u_char;
property s_b4 : u_char read gets_b4 write sets_b4;
end;
type __SunW__Wrapper = class(TDCRecordWrapper)
private
fR : SunW;
public
function GetRecordPtr : pointer; override;
published
procedure sets_w1(const val : u_short);
function gets_w1 : u_short;
property s_w1 : u_short read gets_w1 write sets_w1;
procedure sets_w2(const val : u_short);
function gets_w2 : u_short;
property s_w2 : u_short read gets_w2 write sets_w2;
end;
type __TAddrInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TAddrInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setai_flags(const val : Integer);
function getai_flags : Integer;
property ai_flags : Integer read getai_flags write setai_flags;
procedure setai_family(const val : Integer);
function getai_family : Integer;
property ai_family : Integer read getai_family write setai_family;
procedure setai_socktype(const val : Integer);
function getai_socktype : Integer;
property ai_socktype : Integer read getai_socktype write setai_socktype;
procedure setai_protocol(const val : Integer);
function getai_protocol : Integer;
property ai_protocol : Integer read getai_protocol write setai_protocol;
procedure setai_addrlen(const val : ULONG);
function getai_addrlen : ULONG;
property ai_addrlen : ULONG read getai_addrlen write setai_addrlen;
end;
type __TAFProtocols__Wrapper = class(TDCRecordWrapper)
private
fR : TAFProtocols;
public
function GetRecordPtr : pointer; override;
published
procedure setiAddressFamily(const val : Integer);
function getiAddressFamily : Integer;
property iAddressFamily : Integer read getiAddressFamily write setiAddressFamily;
procedure setiProtocol(const val : Integer);
function getiProtocol : Integer;
property iProtocol : Integer read getiProtocol write setiProtocol;
end;
type __TBLOB__Wrapper = class(TDCRecordWrapper)
private
fR : TBLOB;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : ULONG);
function getcbSize : ULONG;
property cbSize : ULONG read getcbSize write setcbSize;
end;
type __TCSAddr_Info__Wrapper = class(TDCRecordWrapper)
private
fR : TCSAddr_Info;
public
function GetRecordPtr : pointer; override;
published
procedure setiSocketType(const val : Integer);
function getiSocketType : Integer;
property iSocketType : Integer read getiSocketType write setiSocketType;
procedure setiProtocol(const val : Integer);
function getiProtocol : Integer;
property iProtocol : Integer read getiProtocol write setiProtocol;
end;
type __TFDSet__Wrapper = class(TDCRecordWrapper)
private
fR : TFDSet;
public
function GetRecordPtr : pointer; override;
published
procedure setfd_count(const val : u_int);
function getfd_count : u_int;
property fd_count : u_int read getfd_count write setfd_count;
end;
type __TFlowSpec__Wrapper = class(TDCRecordWrapper)
private
fR : TFlowSpec;
public
function GetRecordPtr : pointer; override;
published
procedure setTokenRate(const val : Longint);
function getTokenRate : Longint;
property TokenRate : Longint read getTokenRate write setTokenRate;
procedure setTokenBucketSize(const val : Longint);
function getTokenBucketSize : Longint;
property TokenBucketSize : Longint read getTokenBucketSize write setTokenBucketSize;
procedure setPeakBandwidth(const val : Longint);
function getPeakBandwidth : Longint;
property PeakBandwidth : Longint read getPeakBandwidth write setPeakBandwidth;
procedure setLatency(const val : Longint);
function getLatency : Longint;
property Latency : Longint read getLatency write setLatency;
procedure setDelayVariation(const val : Longint);
function getDelayVariation : Longint;
property DelayVariation : Longint read getDelayVariation write setDelayVariation;
procedure setSERVICETYPE(const val : TServiceType);
function getSERVICETYPE : TServiceType;
property SERVICETYPE : TServiceType read getSERVICETYPE write setSERVICETYPE;
procedure setMaxSduSize(const val : Longint);
function getMaxSduSize : Longint;
property MaxSduSize : Longint read getMaxSduSize write setMaxSduSize;
procedure setMinimumPolicedSize(const val : Longint);
function getMinimumPolicedSize : Longint;
property MinimumPolicedSize : Longint read getMinimumPolicedSize write setMinimumPolicedSize;
end;
type __THostEnt__Wrapper = class(TDCRecordWrapper)
private
fR : THostEnt;
public
function GetRecordPtr : pointer; override;
published
procedure seth_addrtype(const val : SmallInt);
function geth_addrtype : SmallInt;
property h_addrtype : SmallInt read geth_addrtype write seth_addrtype;
procedure seth_length(const val : SmallInt);
function geth_length : SmallInt;
property h_length : SmallInt read geth_length write seth_length;
end;
type __timeval__Wrapper = class(TDCRecordWrapper)
private
fR : timeval;
public
function GetRecordPtr : pointer; override;
published
procedure settv_sec(const val : Longint);
function gettv_sec : Longint;
property tv_sec : Longint read gettv_sec write settv_sec;
procedure settv_usec(const val : Longint);
function gettv_usec : Longint;
property tv_usec : Longint read gettv_usec write settv_usec;
end;
type __TIn6Addr__Wrapper = class(TDCRecordWrapper)
private
fR : TIn6Addr;
public
function GetRecordPtr : pointer; override;
published
end;
type __TIn6PktInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TIn6PktInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setipi6_ifindex(const val : UINT);
function getipi6_ifindex : UINT;
property ipi6_ifindex : UINT read getipi6_ifindex write setipi6_ifindex;
end;
type __TInAddr__Wrapper = class(TDCRecordWrapper)
private
fR : TInAddr;
public
function GetRecordPtr : pointer; override;
published
procedure setS_addr(const val : u_long);
function getS_addr : u_long;
property S_addr : u_long read getS_addr write setS_addr;
end;
type __TInPktInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TInPktInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setipi_ifindex(const val : UINT);
function getipi_ifindex : UINT;
property ipi_ifindex : UINT read getipi_ifindex write setipi_ifindex;
end;
type __TInterface_Info__Wrapper = class(TDCRecordWrapper)
private
fR : TInterface_Info;
public
function GetRecordPtr : pointer; override;
published
procedure setiiFlags(const val : u_long);
function getiiFlags : u_long;
property iiFlags : u_long read getiiFlags write setiiFlags;
end;
type __TInterface_Info_Ex__Wrapper = class(TDCRecordWrapper)
private
fR : TInterface_Info_Ex;
public
function GetRecordPtr : pointer; override;
published
procedure setiiFlags(const val : u_long);
function getiiFlags : u_long;
property iiFlags : u_long read getiiFlags write setiiFlags;
end;
type __TIPXAddressData__Wrapper = class(TDCRecordWrapper)
private
fR : TIPXAddressData;
public
function GetRecordPtr : pointer; override;
published
procedure setadapternum(const val : Integer);
function getadapternum : Integer;
property adapternum : Integer read getadapternum write setadapternum;
procedure setwan(const val : Boolean);
function getwan : Boolean;
property wan : Boolean read getwan write setwan;
procedure setstatus(const val : Boolean);
function getstatus : Boolean;
property status : Boolean read getstatus write setstatus;
procedure setmaxpkt(const val : Integer);
function getmaxpkt : Integer;
property maxpkt : Integer read getmaxpkt write setmaxpkt;
procedure setlinkspeed(const val : ULONG);
function getlinkspeed : ULONG;
property linkspeed : ULONG read getlinkspeed write setlinkspeed;
end;
type __TIPXNetNumData__Wrapper = class(TDCRecordWrapper)
private
fR : TIPXNetNumData;
public
function GetRecordPtr : pointer; override;
published
procedure sethopcount(const val : Word);
function gethopcount : Word;
property hopcount : Word read gethopcount write sethopcount;
procedure setnetdelay(const val : Word);
function getnetdelay : Word;
property netdelay : Word read getnetdelay write setnetdelay;
procedure setcardnum(const val : Integer);
function getcardnum : Integer;
property cardnum : Integer read getcardnum write setcardnum;
end;
type __TIPXSPXConnStatusData__Wrapper = class(TDCRecordWrapper)
private
fR : TIPXSPXConnStatusData;
public
function GetRecordPtr : pointer; override;
published
procedure setConnectionState(const val : Byte);
function getConnectionState : Byte;
property ConnectionState : Byte read getConnectionState write setConnectionState;
procedure setWatchDogActive(const val : Byte);
function getWatchDogActive : Byte;
property WatchDogActive : Byte read getWatchDogActive write setWatchDogActive;
procedure setLocalConnectionId(const val : Word);
function getLocalConnectionId : Word;
property LocalConnectionId : Word read getLocalConnectionId write setLocalConnectionId;
procedure setRemoteConnectionId(const val : Word);
function getRemoteConnectionId : Word;
property RemoteConnectionId : Word read getRemoteConnectionId write setRemoteConnectionId;
procedure setLocalSequenceNumber(const val : Word);
function getLocalSequenceNumber : Word;
property LocalSequenceNumber : Word read getLocalSequenceNumber write setLocalSequenceNumber;
procedure setLocalAckNumber(const val : Word);
function getLocalAckNumber : Word;
property LocalAckNumber : Word read getLocalAckNumber write setLocalAckNumber;
procedure setLocalAllocNumber(const val : Word);
function getLocalAllocNumber : Word;
property LocalAllocNumber : Word read getLocalAllocNumber write setLocalAllocNumber;
procedure setRemoteAckNumber(const val : Word);
function getRemoteAckNumber : Word;
property RemoteAckNumber : Word read getRemoteAckNumber write setRemoteAckNumber;
procedure setRemoteAllocNumber(const val : Word);
function getRemoteAllocNumber : Word;
property RemoteAllocNumber : Word read getRemoteAllocNumber write setRemoteAllocNumber;
procedure setLocalSocket(const val : Word);
function getLocalSocket : Word;
property LocalSocket : Word read getLocalSocket write setLocalSocket;
procedure setRemoteSocket(const val : Word);
function getRemoteSocket : Word;
property RemoteSocket : Word read getRemoteSocket write setRemoteSocket;
procedure setRetransmissionCount(const val : Word);
function getRetransmissionCount : Word;
property RetransmissionCount : Word read getRetransmissionCount write setRetransmissionCount;
procedure setEstimatedRoundTripDelay(const val : Word);
function getEstimatedRoundTripDelay : Word;
property EstimatedRoundTripDelay : Word read getEstimatedRoundTripDelay write setEstimatedRoundTripDelay;
procedure setRetransmittedPackets(const val : Word);
function getRetransmittedPackets : Word;
property RetransmittedPackets : Word read getRetransmittedPackets write setRetransmittedPackets;
procedure setSuppressedPacket(const val : Word);
function getSuppressedPacket : Word;
property SuppressedPacket : Word read getSuppressedPacket write setSuppressedPacket;
end;
type __TLinger__Wrapper = class(TDCRecordWrapper)
private
fR : TLinger;
public
function GetRecordPtr : pointer; override;
published
procedure setl_onoff(const val : u_short);
function getl_onoff : u_short;
property l_onoff : u_short read getl_onoff write setl_onoff;
procedure setl_linger(const val : u_short);
function getl_linger : u_short;
property l_linger : u_short read getl_linger write setl_linger;
end;
type __TNetEnt__Wrapper = class(TDCRecordWrapper)
private
fR : TNetEnt;
public
function GetRecordPtr : pointer; override;
published
procedure setn_addrtype(const val : SmallInt);
function getn_addrtype : SmallInt;
property n_addrtype : SmallInt read getn_addrtype write setn_addrtype;
procedure setn_net(const val : u_long);
function getn_net : u_long;
property n_net : u_long read getn_net write setn_net;
end;
type __TProtoEnt__Wrapper = class(TDCRecordWrapper)
private
fR : TProtoEnt;
public
function GetRecordPtr : pointer; override;
published
procedure setp_proto(const val : SmallInt);
function getp_proto : SmallInt;
property p_proto : SmallInt read getp_proto write setp_proto;
end;
type __TQualityOfService__Wrapper = class(TDCRecordWrapper)
private
fR : TQualityOfService;
public
function GetRecordPtr : pointer; override;
published
end;
type __TRANSMIT_FILE_BUFFERS__Wrapper = class(TDCRecordWrapper)
private
fR : TRANSMIT_FILE_BUFFERS;
public
function GetRecordPtr : pointer; override;
published
procedure setHeadLength(const val : DWORD);
function getHeadLength : DWORD;
property HeadLength : DWORD read getHeadLength write setHeadLength;
procedure setTailLength(const val : DWORD);
function getTailLength : DWORD;
property TailLength : DWORD read getTailLength write setTailLength;
end;
type __TServEnt__Wrapper = class(TDCRecordWrapper)
private
fR : TServEnt;
public
function GetRecordPtr : pointer; override;
published
procedure sets_port(const val : SmallInt);
function gets_port : SmallInt;
property s_port : SmallInt read gets_port write sets_port;
end;
type __TSockAddr__Wrapper = class(TDCRecordWrapper)
private
fR : TSockAddr;
public
function GetRecordPtr : pointer; override;
published
procedure setsin_family(const val : u_short);
function getsin_family : u_short;
property sin_family : u_short read getsin_family write setsin_family;
procedure setsin_port(const val : u_short);
function getsin_port : u_short;
property sin_port : u_short read getsin_port write setsin_port;
procedure setsa_family(const val : u_short);
function getsa_family : u_short;
property sa_family : u_short read getsa_family write setsa_family;
end;
type __TSockAddr_IPX__Wrapper = class(TDCRecordWrapper)
private
fR : TSockAddr_IPX;
public
function GetRecordPtr : pointer; override;
published
procedure setsa_family(const val : u_short);
function getsa_family : u_short;
property sa_family : u_short read getsa_family write setsa_family;
procedure setsa_socket(const val : u_short);
function getsa_socket : u_short;
property sa_socket : u_short read getsa_socket write setsa_socket;
end;
type __TSockAddrATM__Wrapper = class(TDCRecordWrapper)
private
fR : TSockAddrATM;
public
function GetRecordPtr : pointer; override;
published
procedure setsatm_family(const val : u_short);
function getsatm_family : u_short;
property satm_family : u_short read getsatm_family write setsatm_family;
end;
type __TSockAddrGen__Wrapper = class(TDCRecordWrapper)
private
fR : TSockAddrGen;
public
function GetRecordPtr : pointer; override;
published
end;
type __TSockAddrIn__Wrapper = class(TDCRecordWrapper)
private
fR : TSockAddrIn;
public
function GetRecordPtr : pointer; override;
published
procedure setsin_family(const val : u_short);
function getsin_family : u_short;
property sin_family : u_short read getsin_family write setsin_family;
procedure setsin_port(const val : u_short);
function getsin_port : u_short;
property sin_port : u_short read getsin_port write setsin_port;
procedure setsa_family(const val : u_short);
function getsa_family : u_short;
property sa_family : u_short read getsa_family write setsa_family;
end;
type __TSockAddrIn6__Wrapper = class(TDCRecordWrapper)
private
fR : TSockAddrIn6;
public
function GetRecordPtr : pointer; override;
published
procedure setsin6_family(const val : SmallInt);
function getsin6_family : SmallInt;
property sin6_family : SmallInt read getsin6_family write setsin6_family;
procedure setsin6_port(const val : u_short);
function getsin6_port : u_short;
property sin6_port : u_short read getsin6_port write setsin6_port;
procedure setsin6_flowinfo(const val : u_long);
function getsin6_flowinfo : u_long;
property sin6_flowinfo : u_long read getsin6_flowinfo write setsin6_flowinfo;
procedure setsin6_scope_id(const val : u_long);
function getsin6_scope_id : u_long;
property sin6_scope_id : u_long read getsin6_scope_id write setsin6_scope_id;
end;
type __TSockAddrIPX__Wrapper = class(TDCRecordWrapper)
private
fR : TSockAddrIPX;
public
function GetRecordPtr : pointer; override;
published
procedure setsa_family(const val : u_short);
function getsa_family : u_short;
property sa_family : u_short read getsa_family write setsa_family;
procedure setsa_socket(const val : u_short);
function getsa_socket : u_short;
property sa_socket : u_short read getsa_socket write setsa_socket;
end;
type __TSockAddrNB__Wrapper = class(TDCRecordWrapper)
private
fR : TSockAddrNB;
public
function GetRecordPtr : pointer; override;
published
procedure setsnb_family(const val : SmallInt);
function getsnb_family : SmallInt;
property snb_family : SmallInt read getsnb_family write setsnb_family;
procedure setsnb_type(const val : u_short);
function getsnb_type : u_short;
property snb_type : u_short read getsnb_type write setsnb_type;
end;
type __TSocket_Address__Wrapper = class(TDCRecordWrapper)
private
fR : TSocket_Address;
public
function GetRecordPtr : pointer; override;
published
procedure setiSockaddrLength(const val : Integer);
function getiSockaddrLength : Integer;
property iSockaddrLength : Integer read getiSockaddrLength write setiSockaddrLength;
end;
type __TSocket_Address_List__Wrapper = class(TDCRecordWrapper)
private
fR : TSocket_Address_List;
public
function GetRecordPtr : pointer; override;
published
procedure setiAddressCount(const val : Integer);
function getiAddressCount : Integer;
property iAddressCount : Integer read getiAddressCount write setiAddressCount;
end;
type __TSockProto__Wrapper = class(TDCRecordWrapper)
private
fR : TSockProto;
public
function GetRecordPtr : pointer; override;
published
procedure setsp_family(const val : u_short);
function getsp_family : u_short;
property sp_family : u_short read getsp_family write setsp_family;
procedure setsp_protocol(const val : u_short);
function getsp_protocol : u_short;
property sp_protocol : u_short read getsp_protocol write setsp_protocol;
end;
type __TTimeVal__Wrapper = class(TDCRecordWrapper)
private
fR : TTimeVal;
public
function GetRecordPtr : pointer; override;
published
procedure settv_sec(const val : Longint);
function gettv_sec : Longint;
property tv_sec : Longint read gettv_sec write settv_sec;
procedure settv_usec(const val : Longint);
function gettv_usec : Longint;
property tv_usec : Longint read gettv_usec write settv_usec;
end;
type __TTransmitFileBuffers__Wrapper = class(TDCRecordWrapper)
private
fR : TTransmitFileBuffers;
public
function GetRecordPtr : pointer; override;
published
procedure setHeadLength(const val : DWORD);
function getHeadLength : DWORD;
property HeadLength : DWORD read getHeadLength write setHeadLength;
procedure setTailLength(const val : DWORD);
function getTailLength : DWORD;
property TailLength : DWORD read getTailLength write setTailLength;
end;
type __TWSABuf__Wrapper = class(TDCRecordWrapper)
private
fR : TWSABuf;
public
function GetRecordPtr : pointer; override;
published
procedure setlen(const val : u_long);
function getlen : u_long;
property len : u_long read getlen write setlen;
end;
type __TWSAData__Wrapper = class(TDCRecordWrapper)
private
fR : TWSAData;
public
function GetRecordPtr : pointer; override;
published
procedure setwVersion(const val : Word);
function getwVersion : Word;
property wVersion : Word read getwVersion write setwVersion;
procedure setwHighVersion(const val : Word);
function getwHighVersion : Word;
property wHighVersion : Word read getwHighVersion write setwHighVersion;
procedure setiMaxSockets(const val : Word);
function getiMaxSockets : Word;
property iMaxSockets : Word read getiMaxSockets write setiMaxSockets;
procedure setiMaxUdpDg(const val : Word);
function getiMaxUdpDg : Word;
property iMaxUdpDg : Word read getiMaxUdpDg write setiMaxUdpDg;
end;
type __TWSANameSpace_Info__Wrapper = class(TDCRecordWrapper)
private
fR : TWSANameSpace_Info;
public
function GetRecordPtr : pointer; override;
published
procedure setdwNameSpace(const val : DWORD);
function getdwNameSpace : DWORD;
property dwNameSpace : DWORD read getdwNameSpace write setdwNameSpace;
procedure setfActive(const val : DWORD);
function getfActive : DWORD;
property fActive : DWORD read getfActive write setfActive;
procedure setdwVersion(const val : DWORD);
function getdwVersion : DWORD;
property dwVersion : DWORD read getdwVersion write setdwVersion;
end;
type __TWSANameSpace_InfoA__Wrapper = class(TDCRecordWrapper)
private
fR : TWSANameSpace_InfoA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwNameSpace(const val : DWORD);
function getdwNameSpace : DWORD;
property dwNameSpace : DWORD read getdwNameSpace write setdwNameSpace;
procedure setfActive(const val : DWORD);
function getfActive : DWORD;
property fActive : DWORD read getfActive write setfActive;
procedure setdwVersion(const val : DWORD);
function getdwVersion : DWORD;
property dwVersion : DWORD read getdwVersion write setdwVersion;
end;
type __TWSANameSpace_InfoW__Wrapper = class(TDCRecordWrapper)
private
fR : TWSANameSpace_InfoW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwNameSpace(const val : DWORD);
function getdwNameSpace : DWORD;
property dwNameSpace : DWORD read getdwNameSpace write setdwNameSpace;
procedure setfActive(const val : DWORD);
function getfActive : DWORD;
property fActive : DWORD read getfActive write setfActive;
procedure setdwVersion(const val : DWORD);
function getdwVersion : DWORD;
property dwVersion : DWORD read getdwVersion write setdwVersion;
end;
type __TWSANetworkEvents__Wrapper = class(TDCRecordWrapper)
private
fR : TWSANetworkEvents;
public
function GetRecordPtr : pointer; override;
published
procedure setlNetworkEvents(const val : Longint);
function getlNetworkEvents : Longint;
property lNetworkEvents : Longint read getlNetworkEvents write setlNetworkEvents;
end;
type __TWSANSClassInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TWSANSClassInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setdwNameSpace(const val : DWORD);
function getdwNameSpace : DWORD;
property dwNameSpace : DWORD read getdwNameSpace write setdwNameSpace;
procedure setdwValueType(const val : DWORD);
function getdwValueType : DWORD;
property dwValueType : DWORD read getdwValueType write setdwValueType;
procedure setdwValueSize(const val : DWORD);
function getdwValueSize : DWORD;
property dwValueSize : DWORD read getdwValueSize write setdwValueSize;
end;
type __TWSANSClassInfoA__Wrapper = class(TDCRecordWrapper)
private
fR : TWSANSClassInfoA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwNameSpace(const val : DWORD);
function getdwNameSpace : DWORD;
property dwNameSpace : DWORD read getdwNameSpace write setdwNameSpace;
procedure setdwValueType(const val : DWORD);
function getdwValueType : DWORD;
property dwValueType : DWORD read getdwValueType write setdwValueType;
procedure setdwValueSize(const val : DWORD);
function getdwValueSize : DWORD;
property dwValueSize : DWORD read getdwValueSize write setdwValueSize;
end;
type __TWSANSClassInfoW__Wrapper = class(TDCRecordWrapper)
private
fR : TWSANSClassInfoW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwNameSpace(const val : DWORD);
function getdwNameSpace : DWORD;
property dwNameSpace : DWORD read getdwNameSpace write setdwNameSpace;
procedure setdwValueType(const val : DWORD);
function getdwValueType : DWORD;
property dwValueType : DWORD read getdwValueType write setdwValueType;
procedure setdwValueSize(const val : DWORD);
function getdwValueSize : DWORD;
property dwValueSize : DWORD read getdwValueSize write setdwValueSize;
end;
type __TWSAOverlapped__Wrapper = class(TDCRecordWrapper)
private
fR : TWSAOverlapped;
public
function GetRecordPtr : pointer; override;
published
procedure setInternal(const val : DWORD);
function getInternal : DWORD;
property Internal : DWORD read getInternal write setInternal;
procedure setInternalHigh(const val : DWORD);
function getInternalHigh : DWORD;
property InternalHigh : DWORD read getInternalHigh write setInternalHigh;
procedure setOffset(const val : DWORD);
function getOffset : DWORD;
property Offset : DWORD read getOffset write setOffset;
procedure setOffsetHigh(const val : DWORD);
function getOffsetHigh : DWORD;
property OffsetHigh : DWORD read getOffsetHigh write setOffsetHigh;
procedure sethEvent(const val : THandle);
function gethEvent : THandle;
property hEvent : THandle read gethEvent write sethEvent;
end;
type __TWSAProtocol_Info__Wrapper = class(TDCRecordWrapper)
private
fR : TWSAProtocol_Info;
public
function GetRecordPtr : pointer; override;
published
procedure setdwServiceFlags1(const val : DWORD);
function getdwServiceFlags1 : DWORD;
property dwServiceFlags1 : DWORD read getdwServiceFlags1 write setdwServiceFlags1;
procedure setdwServiceFlags2(const val : DWORD);
function getdwServiceFlags2 : DWORD;
property dwServiceFlags2 : DWORD read getdwServiceFlags2 write setdwServiceFlags2;
procedure setdwServiceFlags3(const val : DWORD);
function getdwServiceFlags3 : DWORD;
property dwServiceFlags3 : DWORD read getdwServiceFlags3 write setdwServiceFlags3;
procedure setdwServiceFlags4(const val : DWORD);
function getdwServiceFlags4 : DWORD;
property dwServiceFlags4 : DWORD read getdwServiceFlags4 write setdwServiceFlags4;
procedure setdwProviderFlags(const val : DWORD);
function getdwProviderFlags : DWORD;
property dwProviderFlags : DWORD read getdwProviderFlags write setdwProviderFlags;
procedure setdwCatalogEntryId(const val : DWORD);
function getdwCatalogEntryId : DWORD;
property dwCatalogEntryId : DWORD read getdwCatalogEntryId write setdwCatalogEntryId;
procedure setiVersion(const val : Integer);
function getiVersion : Integer;
property iVersion : Integer read getiVersion write setiVersion;
procedure setiAddressFamily(const val : Integer);
function getiAddressFamily : Integer;
property iAddressFamily : Integer read getiAddressFamily write setiAddressFamily;
procedure setiMaxSockAddr(const val : Integer);
function getiMaxSockAddr : Integer;
property iMaxSockAddr : Integer read getiMaxSockAddr write setiMaxSockAddr;
procedure setiMinSockAddr(const val : Integer);
function getiMinSockAddr : Integer;
property iMinSockAddr : Integer read getiMinSockAddr write setiMinSockAddr;
procedure setiSocketType(const val : Integer);
function getiSocketType : Integer;
property iSocketType : Integer read getiSocketType write setiSocketType;
procedure setiProtocol(const val : Integer);
function getiProtocol : Integer;
property iProtocol : Integer read getiProtocol write setiProtocol;
procedure setiProtocolMaxOffset(const val : Integer);
function getiProtocolMaxOffset : Integer;
property iProtocolMaxOffset : Integer read getiProtocolMaxOffset write setiProtocolMaxOffset;
procedure setiNetworkByteOrder(const val : Integer);
function getiNetworkByteOrder : Integer;
property iNetworkByteOrder : Integer read getiNetworkByteOrder write setiNetworkByteOrder;
procedure setiSecurityScheme(const val : Integer);
function getiSecurityScheme : Integer;
property iSecurityScheme : Integer read getiSecurityScheme write setiSecurityScheme;
procedure setdwMessageSize(const val : DWORD);
function getdwMessageSize : DWORD;
property dwMessageSize : DWORD read getdwMessageSize write setdwMessageSize;
procedure setdwProviderReserved(const val : DWORD);
function getdwProviderReserved : DWORD;
property dwProviderReserved : DWORD read getdwProviderReserved write setdwProviderReserved;
end;
type __TWSAProtocol_InfoA__Wrapper = class(TDCRecordWrapper)
private
fR : TWSAProtocol_InfoA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwServiceFlags1(const val : DWORD);
function getdwServiceFlags1 : DWORD;
property dwServiceFlags1 : DWORD read getdwServiceFlags1 write setdwServiceFlags1;
procedure setdwServiceFlags2(const val : DWORD);
function getdwServiceFlags2 : DWORD;
property dwServiceFlags2 : DWORD read getdwServiceFlags2 write setdwServiceFlags2;
procedure setdwServiceFlags3(const val : DWORD);
function getdwServiceFlags3 : DWORD;
property dwServiceFlags3 : DWORD read getdwServiceFlags3 write setdwServiceFlags3;
procedure setdwServiceFlags4(const val : DWORD);
function getdwServiceFlags4 : DWORD;
property dwServiceFlags4 : DWORD read getdwServiceFlags4 write setdwServiceFlags4;
procedure setdwProviderFlags(const val : DWORD);
function getdwProviderFlags : DWORD;
property dwProviderFlags : DWORD read getdwProviderFlags write setdwProviderFlags;
procedure setdwCatalogEntryId(const val : DWORD);
function getdwCatalogEntryId : DWORD;
property dwCatalogEntryId : DWORD read getdwCatalogEntryId write setdwCatalogEntryId;
procedure setiVersion(const val : Integer);
function getiVersion : Integer;
property iVersion : Integer read getiVersion write setiVersion;
procedure setiAddressFamily(const val : Integer);
function getiAddressFamily : Integer;
property iAddressFamily : Integer read getiAddressFamily write setiAddressFamily;
procedure setiMaxSockAddr(const val : Integer);
function getiMaxSockAddr : Integer;
property iMaxSockAddr : Integer read getiMaxSockAddr write setiMaxSockAddr;
procedure setiMinSockAddr(const val : Integer);
function getiMinSockAddr : Integer;
property iMinSockAddr : Integer read getiMinSockAddr write setiMinSockAddr;
procedure setiSocketType(const val : Integer);
function getiSocketType : Integer;
property iSocketType : Integer read getiSocketType write setiSocketType;
procedure setiProtocol(const val : Integer);
function getiProtocol : Integer;
property iProtocol : Integer read getiProtocol write setiProtocol;
procedure setiProtocolMaxOffset(const val : Integer);
function getiProtocolMaxOffset : Integer;
property iProtocolMaxOffset : Integer read getiProtocolMaxOffset write setiProtocolMaxOffset;
procedure setiNetworkByteOrder(const val : Integer);
function getiNetworkByteOrder : Integer;
property iNetworkByteOrder : Integer read getiNetworkByteOrder write setiNetworkByteOrder;
procedure setiSecurityScheme(const val : Integer);
function getiSecurityScheme : Integer;
property iSecurityScheme : Integer read getiSecurityScheme write setiSecurityScheme;
procedure setdwMessageSize(const val : DWORD);
function getdwMessageSize : DWORD;
property dwMessageSize : DWORD read getdwMessageSize write setdwMessageSize;
procedure setdwProviderReserved(const val : DWORD);
function getdwProviderReserved : DWORD;
property dwProviderReserved : DWORD read getdwProviderReserved write setdwProviderReserved;
end;
type __TWSAProtocol_InfoW__Wrapper = class(TDCRecordWrapper)
private
fR : TWSAProtocol_InfoW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwServiceFlags1(const val : DWORD);
function getdwServiceFlags1 : DWORD;
property dwServiceFlags1 : DWORD read getdwServiceFlags1 write setdwServiceFlags1;
procedure setdwServiceFlags2(const val : DWORD);
function getdwServiceFlags2 : DWORD;
property dwServiceFlags2 : DWORD read getdwServiceFlags2 write setdwServiceFlags2;
procedure setdwServiceFlags3(const val : DWORD);
function getdwServiceFlags3 : DWORD;
property dwServiceFlags3 : DWORD read getdwServiceFlags3 write setdwServiceFlags3;
procedure setdwServiceFlags4(const val : DWORD);
function getdwServiceFlags4 : DWORD;
property dwServiceFlags4 : DWORD read getdwServiceFlags4 write setdwServiceFlags4;
procedure setdwProviderFlags(const val : DWORD);
function getdwProviderFlags : DWORD;
property dwProviderFlags : DWORD read getdwProviderFlags write setdwProviderFlags;
procedure setdwCatalogEntryId(const val : DWORD);
function getdwCatalogEntryId : DWORD;
property dwCatalogEntryId : DWORD read getdwCatalogEntryId write setdwCatalogEntryId;
procedure setiVersion(const val : Integer);
function getiVersion : Integer;
property iVersion : Integer read getiVersion write setiVersion;
procedure setiAddressFamily(const val : Integer);
function getiAddressFamily : Integer;
property iAddressFamily : Integer read getiAddressFamily write setiAddressFamily;
procedure setiMaxSockAddr(const val : Integer);
function getiMaxSockAddr : Integer;
property iMaxSockAddr : Integer read getiMaxSockAddr write setiMaxSockAddr;
procedure setiMinSockAddr(const val : Integer);
function getiMinSockAddr : Integer;
property iMinSockAddr : Integer read getiMinSockAddr write setiMinSockAddr;
procedure setiSocketType(const val : Integer);
function getiSocketType : Integer;
property iSocketType : Integer read getiSocketType write setiSocketType;
procedure setiProtocol(const val : Integer);
function getiProtocol : Integer;
property iProtocol : Integer read getiProtocol write setiProtocol;
procedure setiProtocolMaxOffset(const val : Integer);
function getiProtocolMaxOffset : Integer;
property iProtocolMaxOffset : Integer read getiProtocolMaxOffset write setiProtocolMaxOffset;
procedure setiNetworkByteOrder(const val : Integer);
function getiNetworkByteOrder : Integer;
property iNetworkByteOrder : Integer read getiNetworkByteOrder write setiNetworkByteOrder;
procedure setiSecurityScheme(const val : Integer);
function getiSecurityScheme : Integer;
property iSecurityScheme : Integer read getiSecurityScheme write setiSecurityScheme;
procedure setdwMessageSize(const val : DWORD);
function getdwMessageSize : DWORD;
property dwMessageSize : DWORD read getdwMessageSize write setdwMessageSize;
procedure setdwProviderReserved(const val : DWORD);
function getdwProviderReserved : DWORD;
property dwProviderReserved : DWORD read getdwProviderReserved write setdwProviderReserved;
end;
type __TWSAProtocolChain__Wrapper = class(TDCRecordWrapper)
private
fR : TWSAProtocolChain;
public
function GetRecordPtr : pointer; override;
published
procedure setChainLen(const val : Integer);
function getChainLen : Integer;
property ChainLen : Integer read getChainLen write setChainLen;
end;
type __TWSAQuerySet__Wrapper = class(TDCRecordWrapper)
private
fR : TWSAQuerySet;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setdwNameSpace(const val : DWORD);
function getdwNameSpace : DWORD;
property dwNameSpace : DWORD read getdwNameSpace write setdwNameSpace;
procedure setdwNumberOfProtocols(const val : DWORD);
function getdwNumberOfProtocols : DWORD;
property dwNumberOfProtocols : DWORD read getdwNumberOfProtocols write setdwNumberOfProtocols;
procedure setdwNumberOfCsAddrs(const val : DWORD);
function getdwNumberOfCsAddrs : DWORD;
property dwNumberOfCsAddrs : DWORD read getdwNumberOfCsAddrs write setdwNumberOfCsAddrs;
procedure setdwOutputFlags(const val : DWORD);
function getdwOutputFlags : DWORD;
property dwOutputFlags : DWORD read getdwOutputFlags write setdwOutputFlags;
end;
type __TWSAQuerySetA__Wrapper = class(TDCRecordWrapper)
private
fR : TWSAQuerySetA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setdwNameSpace(const val : DWORD);
function getdwNameSpace : DWORD;
property dwNameSpace : DWORD read getdwNameSpace write setdwNameSpace;
procedure setdwNumberOfProtocols(const val : DWORD);
function getdwNumberOfProtocols : DWORD;
property dwNumberOfProtocols : DWORD read getdwNumberOfProtocols write setdwNumberOfProtocols;
procedure setdwNumberOfCsAddrs(const val : DWORD);
function getdwNumberOfCsAddrs : DWORD;
property dwNumberOfCsAddrs : DWORD read getdwNumberOfCsAddrs write setdwNumberOfCsAddrs;
procedure setdwOutputFlags(const val : DWORD);
function getdwOutputFlags : DWORD;
property dwOutputFlags : DWORD read getdwOutputFlags write setdwOutputFlags;
end;
type __TWSAQuerySetW__Wrapper = class(TDCRecordWrapper)
private
fR : TWSAQuerySetW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setdwNameSpace(const val : DWORD);
function getdwNameSpace : DWORD;
property dwNameSpace : DWORD read getdwNameSpace write setdwNameSpace;
procedure setdwNumberOfProtocols(const val : DWORD);
function getdwNumberOfProtocols : DWORD;
property dwNumberOfProtocols : DWORD read getdwNumberOfProtocols write setdwNumberOfProtocols;
procedure setdwNumberOfCsAddrs(const val : DWORD);
function getdwNumberOfCsAddrs : DWORD;
property dwNumberOfCsAddrs : DWORD read getdwNumberOfCsAddrs write setdwNumberOfCsAddrs;
procedure setdwOutputFlags(const val : DWORD);
function getdwOutputFlags : DWORD;
property dwOutputFlags : DWORD read getdwOutputFlags write setdwOutputFlags;
end;
type __TWSAServiceClassInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TWSAServiceClassInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCount(const val : DWORD);
function getdwCount : DWORD;
property dwCount : DWORD read getdwCount write setdwCount;
end;
type __TWSAServiceClassInfoA__Wrapper = class(TDCRecordWrapper)
private
fR : TWSAServiceClassInfoA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCount(const val : DWORD);
function getdwCount : DWORD;
property dwCount : DWORD read getdwCount write setdwCount;
end;
type __TWSAServiceClassInfoW__Wrapper = class(TDCRecordWrapper)
private
fR : TWSAServiceClassInfoW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCount(const val : DWORD);
function getdwCount : DWORD;
property dwCount : DWORD read getdwCount write setdwCount;
end;
type __TWSAVersion__Wrapper = class(TDCRecordWrapper)
private
fR : TWSAVersion;
public
function GetRecordPtr : pointer; override;
published
procedure setdwVersion(const val : DWORD);
function getdwVersion : DWORD;
property dwVersion : DWORD read getdwVersion write setdwVersion;
procedure setecHow(const val : TWSAEComparator);
function getecHow : TWSAEComparator;
property ecHow : TWSAEComparator read getecHow write setecHow;
end;
type __WSABUF__Wrapper = class(TDCRecordWrapper)
private
fR : WSABUF;
public
function GetRecordPtr : pointer; override;
published
procedure setlen(const val : u_long);
function getlen : u_long;
property len : u_long read getlen write setlen;
end;
type __WSADATA__Wrapper = class(TDCRecordWrapper)
private
fR : WSADATA;
public
function GetRecordPtr : pointer; override;
published
procedure setwVersion(const val : Word);
function getwVersion : Word;
property wVersion : Word read getwVersion write setwVersion;
procedure setwHighVersion(const val : Word);
function getwHighVersion : Word;
property wHighVersion : Word read getwHighVersion write setwHighVersion;
procedure setiMaxSockets(const val : Word);
function getiMaxSockets : Word;
property iMaxSockets : Word read getiMaxSockets write setiMaxSockets;
procedure setiMaxUdpDg(const val : Word);
function getiMaxUdpDg : Word;
property iMaxUdpDg : Word read getiMaxUdpDg write setiMaxUdpDg;
end;
type __WSANAMESPACE_INFO__Wrapper = class(TDCRecordWrapper)
private
fR : WSANAMESPACE_INFO;
public
function GetRecordPtr : pointer; override;
published
procedure setdwNameSpace(const val : DWORD);
function getdwNameSpace : DWORD;
property dwNameSpace : DWORD read getdwNameSpace write setdwNameSpace;
procedure setfActive(const val : DWORD);
function getfActive : DWORD;
property fActive : DWORD read getfActive write setfActive;
procedure setdwVersion(const val : DWORD);
function getdwVersion : DWORD;
property dwVersion : DWORD read getdwVersion write setdwVersion;
end;
type __WSANAMESPACE_INFOA__Wrapper = class(TDCRecordWrapper)
private
fR : WSANAMESPACE_INFOA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwNameSpace(const val : DWORD);
function getdwNameSpace : DWORD;
property dwNameSpace : DWORD read getdwNameSpace write setdwNameSpace;
procedure setfActive(const val : DWORD);
function getfActive : DWORD;
property fActive : DWORD read getfActive write setfActive;
procedure setdwVersion(const val : DWORD);
function getdwVersion : DWORD;
property dwVersion : DWORD read getdwVersion write setdwVersion;
end;
type __WSANAMESPACE_INFOW__Wrapper = class(TDCRecordWrapper)
private
fR : WSANAMESPACE_INFOW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwNameSpace(const val : DWORD);
function getdwNameSpace : DWORD;
property dwNameSpace : DWORD read getdwNameSpace write setdwNameSpace;
procedure setfActive(const val : DWORD);
function getfActive : DWORD;
property fActive : DWORD read getfActive write setfActive;
procedure setdwVersion(const val : DWORD);
function getdwVersion : DWORD;
property dwVersion : DWORD read getdwVersion write setdwVersion;
end;
type __WSANETWORKEVENTS__Wrapper = class(TDCRecordWrapper)
private
fR : WSANETWORKEVENTS;
public
function GetRecordPtr : pointer; override;
published
procedure setlNetworkEvents(const val : Longint);
function getlNetworkEvents : Longint;
property lNetworkEvents : Longint read getlNetworkEvents write setlNetworkEvents;
end;
type __WSANSCLASSINFO__Wrapper = class(TDCRecordWrapper)
private
fR : WSANSCLASSINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setdwNameSpace(const val : DWORD);
function getdwNameSpace : DWORD;
property dwNameSpace : DWORD read getdwNameSpace write setdwNameSpace;
procedure setdwValueType(const val : DWORD);
function getdwValueType : DWORD;
property dwValueType : DWORD read getdwValueType write setdwValueType;
procedure setdwValueSize(const val : DWORD);
function getdwValueSize : DWORD;
property dwValueSize : DWORD read getdwValueSize write setdwValueSize;
end;
type __WSANSCLASSINFOA__Wrapper = class(TDCRecordWrapper)
private
fR : WSANSCLASSINFOA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwNameSpace(const val : DWORD);
function getdwNameSpace : DWORD;
property dwNameSpace : DWORD read getdwNameSpace write setdwNameSpace;
procedure setdwValueType(const val : DWORD);
function getdwValueType : DWORD;
property dwValueType : DWORD read getdwValueType write setdwValueType;
procedure setdwValueSize(const val : DWORD);
function getdwValueSize : DWORD;
property dwValueSize : DWORD read getdwValueSize write setdwValueSize;
end;
type __WSANSCLASSINFOW__Wrapper = class(TDCRecordWrapper)
private
fR : WSANSCLASSINFOW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwNameSpace(const val : DWORD);
function getdwNameSpace : DWORD;
property dwNameSpace : DWORD read getdwNameSpace write setdwNameSpace;
procedure setdwValueType(const val : DWORD);
function getdwValueType : DWORD;
property dwValueType : DWORD read getdwValueType write setdwValueType;
procedure setdwValueSize(const val : DWORD);
function getdwValueSize : DWORD;
property dwValueSize : DWORD read getdwValueSize write setdwValueSize;
end;
type __WSAOVERLAPPED__Wrapper = class(TDCRecordWrapper)
private
fR : WSAOVERLAPPED;
public
function GetRecordPtr : pointer; override;
published
procedure setInternal(const val : DWORD);
function getInternal : DWORD;
property Internal : DWORD read getInternal write setInternal;
procedure setInternalHigh(const val : DWORD);
function getInternalHigh : DWORD;
property InternalHigh : DWORD read getInternalHigh write setInternalHigh;
procedure setOffset(const val : DWORD);
function getOffset : DWORD;
property Offset : DWORD read getOffset write setOffset;
procedure setOffsetHigh(const val : DWORD);
function getOffsetHigh : DWORD;
property OffsetHigh : DWORD read getOffsetHigh write setOffsetHigh;
procedure sethEvent(const val : THandle);
function gethEvent : THandle;
property hEvent : THandle read gethEvent write sethEvent;
end;
type __WSAPROTOCOL_INFO__Wrapper = class(TDCRecordWrapper)
private
fR : WSAPROTOCOL_INFO;
public
function GetRecordPtr : pointer; override;
published
procedure setdwServiceFlags1(const val : DWORD);
function getdwServiceFlags1 : DWORD;
property dwServiceFlags1 : DWORD read getdwServiceFlags1 write setdwServiceFlags1;
procedure setdwServiceFlags2(const val : DWORD);
function getdwServiceFlags2 : DWORD;
property dwServiceFlags2 : DWORD read getdwServiceFlags2 write setdwServiceFlags2;
procedure setdwServiceFlags3(const val : DWORD);
function getdwServiceFlags3 : DWORD;
property dwServiceFlags3 : DWORD read getdwServiceFlags3 write setdwServiceFlags3;
procedure setdwServiceFlags4(const val : DWORD);
function getdwServiceFlags4 : DWORD;
property dwServiceFlags4 : DWORD read getdwServiceFlags4 write setdwServiceFlags4;
procedure setdwProviderFlags(const val : DWORD);
function getdwProviderFlags : DWORD;
property dwProviderFlags : DWORD read getdwProviderFlags write setdwProviderFlags;
procedure setdwCatalogEntryId(const val : DWORD);
function getdwCatalogEntryId : DWORD;
property dwCatalogEntryId : DWORD read getdwCatalogEntryId write setdwCatalogEntryId;
procedure setiVersion(const val : Integer);
function getiVersion : Integer;
property iVersion : Integer read getiVersion write setiVersion;
procedure setiAddressFamily(const val : Integer);
function getiAddressFamily : Integer;
property iAddressFamily : Integer read getiAddressFamily write setiAddressFamily;
procedure setiMaxSockAddr(const val : Integer);
function getiMaxSockAddr : Integer;
property iMaxSockAddr : Integer read getiMaxSockAddr write setiMaxSockAddr;
procedure setiMinSockAddr(const val : Integer);
function getiMinSockAddr : Integer;
property iMinSockAddr : Integer read getiMinSockAddr write setiMinSockAddr;
procedure setiSocketType(const val : Integer);
function getiSocketType : Integer;
property iSocketType : Integer read getiSocketType write setiSocketType;
procedure setiProtocol(const val : Integer);
function getiProtocol : Integer;
property iProtocol : Integer read getiProtocol write setiProtocol;
procedure setiProtocolMaxOffset(const val : Integer);
function getiProtocolMaxOffset : Integer;
property iProtocolMaxOffset : Integer read getiProtocolMaxOffset write setiProtocolMaxOffset;
procedure setiNetworkByteOrder(const val : Integer);
function getiNetworkByteOrder : Integer;
property iNetworkByteOrder : Integer read getiNetworkByteOrder write setiNetworkByteOrder;
procedure setiSecurityScheme(const val : Integer);
function getiSecurityScheme : Integer;
property iSecurityScheme : Integer read getiSecurityScheme write setiSecurityScheme;
procedure setdwMessageSize(const val : DWORD);
function getdwMessageSize : DWORD;
property dwMessageSize : DWORD read getdwMessageSize write setdwMessageSize;
procedure setdwProviderReserved(const val : DWORD);
function getdwProviderReserved : DWORD;
property dwProviderReserved : DWORD read getdwProviderReserved write setdwProviderReserved;
end;
type __WSAPROTOCOL_INFOA__Wrapper = class(TDCRecordWrapper)
private
fR : WSAPROTOCOL_INFOA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwServiceFlags1(const val : DWORD);
function getdwServiceFlags1 : DWORD;
property dwServiceFlags1 : DWORD read getdwServiceFlags1 write setdwServiceFlags1;
procedure setdwServiceFlags2(const val : DWORD);
function getdwServiceFlags2 : DWORD;
property dwServiceFlags2 : DWORD read getdwServiceFlags2 write setdwServiceFlags2;
procedure setdwServiceFlags3(const val : DWORD);
function getdwServiceFlags3 : DWORD;
property dwServiceFlags3 : DWORD read getdwServiceFlags3 write setdwServiceFlags3;
procedure setdwServiceFlags4(const val : DWORD);
function getdwServiceFlags4 : DWORD;
property dwServiceFlags4 : DWORD read getdwServiceFlags4 write setdwServiceFlags4;
procedure setdwProviderFlags(const val : DWORD);
function getdwProviderFlags : DWORD;
property dwProviderFlags : DWORD read getdwProviderFlags write setdwProviderFlags;
procedure setdwCatalogEntryId(const val : DWORD);
function getdwCatalogEntryId : DWORD;
property dwCatalogEntryId : DWORD read getdwCatalogEntryId write setdwCatalogEntryId;
procedure setiVersion(const val : Integer);
function getiVersion : Integer;
property iVersion : Integer read getiVersion write setiVersion;
procedure setiAddressFamily(const val : Integer);
function getiAddressFamily : Integer;
property iAddressFamily : Integer read getiAddressFamily write setiAddressFamily;
procedure setiMaxSockAddr(const val : Integer);
function getiMaxSockAddr : Integer;
property iMaxSockAddr : Integer read getiMaxSockAddr write setiMaxSockAddr;
procedure setiMinSockAddr(const val : Integer);
function getiMinSockAddr : Integer;
property iMinSockAddr : Integer read getiMinSockAddr write setiMinSockAddr;
procedure setiSocketType(const val : Integer);
function getiSocketType : Integer;
property iSocketType : Integer read getiSocketType write setiSocketType;
procedure setiProtocol(const val : Integer);
function getiProtocol : Integer;
property iProtocol : Integer read getiProtocol write setiProtocol;
procedure setiProtocolMaxOffset(const val : Integer);
function getiProtocolMaxOffset : Integer;
property iProtocolMaxOffset : Integer read getiProtocolMaxOffset write setiProtocolMaxOffset;
procedure setiNetworkByteOrder(const val : Integer);
function getiNetworkByteOrder : Integer;
property iNetworkByteOrder : Integer read getiNetworkByteOrder write setiNetworkByteOrder;
procedure setiSecurityScheme(const val : Integer);
function getiSecurityScheme : Integer;
property iSecurityScheme : Integer read getiSecurityScheme write setiSecurityScheme;
procedure setdwMessageSize(const val : DWORD);
function getdwMessageSize : DWORD;
property dwMessageSize : DWORD read getdwMessageSize write setdwMessageSize;
procedure setdwProviderReserved(const val : DWORD);
function getdwProviderReserved : DWORD;
property dwProviderReserved : DWORD read getdwProviderReserved write setdwProviderReserved;
end;
type __WSAPROTOCOL_INFOW__Wrapper = class(TDCRecordWrapper)
private
fR : WSAPROTOCOL_INFOW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwServiceFlags1(const val : DWORD);
function getdwServiceFlags1 : DWORD;
property dwServiceFlags1 : DWORD read getdwServiceFlags1 write setdwServiceFlags1;
procedure setdwServiceFlags2(const val : DWORD);
function getdwServiceFlags2 : DWORD;
property dwServiceFlags2 : DWORD read getdwServiceFlags2 write setdwServiceFlags2;
procedure setdwServiceFlags3(const val : DWORD);
function getdwServiceFlags3 : DWORD;
property dwServiceFlags3 : DWORD read getdwServiceFlags3 write setdwServiceFlags3;
procedure setdwServiceFlags4(const val : DWORD);
function getdwServiceFlags4 : DWORD;
property dwServiceFlags4 : DWORD read getdwServiceFlags4 write setdwServiceFlags4;
procedure setdwProviderFlags(const val : DWORD);
function getdwProviderFlags : DWORD;
property dwProviderFlags : DWORD read getdwProviderFlags write setdwProviderFlags;
procedure setdwCatalogEntryId(const val : DWORD);
function getdwCatalogEntryId : DWORD;
property dwCatalogEntryId : DWORD read getdwCatalogEntryId write setdwCatalogEntryId;
procedure setiVersion(const val : Integer);
function getiVersion : Integer;
property iVersion : Integer read getiVersion write setiVersion;
procedure setiAddressFamily(const val : Integer);
function getiAddressFamily : Integer;
property iAddressFamily : Integer read getiAddressFamily write setiAddressFamily;
procedure setiMaxSockAddr(const val : Integer);
function getiMaxSockAddr : Integer;
property iMaxSockAddr : Integer read getiMaxSockAddr write setiMaxSockAddr;
procedure setiMinSockAddr(const val : Integer);
function getiMinSockAddr : Integer;
property iMinSockAddr : Integer read getiMinSockAddr write setiMinSockAddr;
procedure setiSocketType(const val : Integer);
function getiSocketType : Integer;
property iSocketType : Integer read getiSocketType write setiSocketType;
procedure setiProtocol(const val : Integer);
function getiProtocol : Integer;
property iProtocol : Integer read getiProtocol write setiProtocol;
procedure setiProtocolMaxOffset(const val : Integer);
function getiProtocolMaxOffset : Integer;
property iProtocolMaxOffset : Integer read getiProtocolMaxOffset write setiProtocolMaxOffset;
procedure setiNetworkByteOrder(const val : Integer);
function getiNetworkByteOrder : Integer;
property iNetworkByteOrder : Integer read getiNetworkByteOrder write setiNetworkByteOrder;
procedure setiSecurityScheme(const val : Integer);
function getiSecurityScheme : Integer;
property iSecurityScheme : Integer read getiSecurityScheme write setiSecurityScheme;
procedure setdwMessageSize(const val : DWORD);
function getdwMessageSize : DWORD;
property dwMessageSize : DWORD read getdwMessageSize write setdwMessageSize;
procedure setdwProviderReserved(const val : DWORD);
function getdwProviderReserved : DWORD;
property dwProviderReserved : DWORD read getdwProviderReserved write setdwProviderReserved;
end;
type __WSAPROTOCOLCHAIN__Wrapper = class(TDCRecordWrapper)
private
fR : WSAPROTOCOLCHAIN;
public
function GetRecordPtr : pointer; override;
published
procedure setChainLen(const val : Integer);
function getChainLen : Integer;
property ChainLen : Integer read getChainLen write setChainLen;
end;
type __WSAQUERYSETA__Wrapper = class(TDCRecordWrapper)
private
fR : WSAQUERYSETA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setdwNameSpace(const val : DWORD);
function getdwNameSpace : DWORD;
property dwNameSpace : DWORD read getdwNameSpace write setdwNameSpace;
procedure setdwNumberOfProtocols(const val : DWORD);
function getdwNumberOfProtocols : DWORD;
property dwNumberOfProtocols : DWORD read getdwNumberOfProtocols write setdwNumberOfProtocols;
procedure setdwNumberOfCsAddrs(const val : DWORD);
function getdwNumberOfCsAddrs : DWORD;
property dwNumberOfCsAddrs : DWORD read getdwNumberOfCsAddrs write setdwNumberOfCsAddrs;
procedure setdwOutputFlags(const val : DWORD);
function getdwOutputFlags : DWORD;
property dwOutputFlags : DWORD read getdwOutputFlags write setdwOutputFlags;
end;
type __WSAQUERYSETW__Wrapper = class(TDCRecordWrapper)
private
fR : WSAQUERYSETW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setdwNameSpace(const val : DWORD);
function getdwNameSpace : DWORD;
property dwNameSpace : DWORD read getdwNameSpace write setdwNameSpace;
procedure setdwNumberOfProtocols(const val : DWORD);
function getdwNumberOfProtocols : DWORD;
property dwNumberOfProtocols : DWORD read getdwNumberOfProtocols write setdwNumberOfProtocols;
procedure setdwNumberOfCsAddrs(const val : DWORD);
function getdwNumberOfCsAddrs : DWORD;
property dwNumberOfCsAddrs : DWORD read getdwNumberOfCsAddrs write setdwNumberOfCsAddrs;
procedure setdwOutputFlags(const val : DWORD);
function getdwOutputFlags : DWORD;
property dwOutputFlags : DWORD read getdwOutputFlags write setdwOutputFlags;
end;
type __WSASERVICECLASSINFO__Wrapper = class(TDCRecordWrapper)
private
fR : WSASERVICECLASSINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCount(const val : DWORD);
function getdwCount : DWORD;
property dwCount : DWORD read getdwCount write setdwCount;
end;
type __WSASERVICECLASSINFOA__Wrapper = class(TDCRecordWrapper)
private
fR : WSASERVICECLASSINFOA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCount(const val : DWORD);
function getdwCount : DWORD;
property dwCount : DWORD read getdwCount write setdwCount;
end;
type __WSASERVICECLASSINFOW__Wrapper = class(TDCRecordWrapper)
private
fR : WSASERVICECLASSINFOW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwCount(const val : DWORD);
function getdwCount : DWORD;
property dwCount : DWORD read getdwCount write setdwCount;
end;
type __WSAVERSION__Wrapper = class(TDCRecordWrapper)
private
fR : WSAVERSION;
public
function GetRecordPtr : pointer; override;
published
procedure setdwVersion(const val : DWORD);
function getdwVersion : DWORD;
property dwVersion : DWORD read getdwVersion write setdwVersion;
procedure setecHow(const val : TWSAEComparator);
function getecHow : TWSAEComparator;
property ecHow : TWSAEComparator read getecHow write setecHow;
end;
type
_T0 = function (const p0 : Word;
const p1 : IDispatch): Integer of object;

_T1 = function (p0 : Word;
p1 : Word): Longint of object;

_T2 = _T1;

_T3 = function (p0 : Longint): Word of object;

_T4 = _T3;

_T5 = _T3;

_T6 = _T3;

_T7 = procedure (p0 : TSocket;
const p1 : IDispatch) of object;

_T8 = function (p0 : TSocket;
const p1 : IDispatch): Boolean of object;

_T9 = _T7;

_T10 = procedure (const p0 : IDispatch) of object;

_T11 = function (p0 : DWORD): DWORD of object;

{_T12 = function (p0 : PSockAddrIn): u_short of object;}

_T13 = function : IDispatch of object;

_T14 = _T13;

{_T15 = procedure (p0 : PSockAddrIn6) of object;}

{_T16 = procedure (p0 : PSockAddrIn6) of object;}

{_T17 = function (p0 : PSockAddrIn6): Boolean of object;}

{_T18 = function (p0 : PSockAddrIn6): Boolean of object;}

{_T19 = function (const p0 : PIn6Addr;
const p1 : PIn6Addr): Boolean of object;}

{_T20 = function (const p0 : PIn6Addr): Boolean of object;}

{_T21 = function (const p0 : PIn6Addr): Boolean of object;}

{_T22 = function (const p0 : PIn6Addr): Boolean of object;}

{_T23 = function (const p0 : PIn6Addr): Boolean of object;}

{_T24 = function (const p0 : PIn6Addr): Boolean of object;}

{_T25 = function (const p0 : PIn6Addr): Boolean of object;}

{_T26 = function (const p0 : PIn6Addr): Boolean of object;}

{_T27 = function (const p0 : PIn6Addr): Boolean of object;}

{_T28 = function (const p0 : PIn6Addr): Boolean of object;}

{_T29 = function (const p0 : PIn6Addr): Boolean of object;}

{_T30 = function (const p0 : PIn6Addr): Boolean of object;}

{_T31 = function (const p0 : PIn6Addr): Boolean of object;}

{_T32 = procedure (p0 : PSockAddrNB;
const p1 : Word;
const p2 : PChar;
const p3 : Char) of object;}

_T33 = function : Boolean of object;

_T34 = procedure (const p0 : String;
p1 : DWORD) of object;

function __IN6_ADDR__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function ___TRANSMIT_FILE_BUFFERS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___TRANSMIT_FILE_BUFFERS__Wrapper.setHeadLength(const val : DWORD);
begin
_TRANSMIT_FILE_BUFFERS(GetRecordPtr^).HeadLength := val;
end;
function ___TRANSMIT_FILE_BUFFERS__Wrapper.getHeadLength : DWORD;
begin
result := _TRANSMIT_FILE_BUFFERS(GetRecordPtr^).HeadLength;
end;
procedure ___TRANSMIT_FILE_BUFFERS__Wrapper.setTailLength(const val : DWORD);
begin
_TRANSMIT_FILE_BUFFERS(GetRecordPtr^).TailLength := val;
end;
function ___TRANSMIT_FILE_BUFFERS__Wrapper.getTailLength : DWORD;
begin
result := _TRANSMIT_FILE_BUFFERS(GetRecordPtr^).TailLength;
end;
function __AAL_PARAMETERS_IE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __AAL_PARAMETERS_IE__Wrapper.setAALType(const val : AAL_TYPE);
begin
AAL_PARAMETERS_IE(GetRecordPtr^).AALType := val;
end;
function __AAL_PARAMETERS_IE__Wrapper.getAALType : AAL_TYPE;
begin
result := AAL_PARAMETERS_IE(GetRecordPtr^).AALType;
end;
function __AAL5_PARAMETERS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __AAL5_PARAMETERS__Wrapper.setForwardMaxCPCSSDUSize(const val : ULONG);
begin
AAL5_PARAMETERS(GetRecordPtr^).ForwardMaxCPCSSDUSize := val;
end;
function __AAL5_PARAMETERS__Wrapper.getForwardMaxCPCSSDUSize : ULONG;
begin
result := AAL5_PARAMETERS(GetRecordPtr^).ForwardMaxCPCSSDUSize;
end;
procedure __AAL5_PARAMETERS__Wrapper.setBackwardMaxCPCSSDUSize(const val : ULONG);
begin
AAL5_PARAMETERS(GetRecordPtr^).BackwardMaxCPCSSDUSize := val;
end;
function __AAL5_PARAMETERS__Wrapper.getBackwardMaxCPCSSDUSize : ULONG;
begin
result := AAL5_PARAMETERS(GetRecordPtr^).BackwardMaxCPCSSDUSize;
end;
procedure __AAL5_PARAMETERS__Wrapper.setMode(const val : Byte);
begin
AAL5_PARAMETERS(GetRecordPtr^).Mode := val;
end;
function __AAL5_PARAMETERS__Wrapper.getMode : Byte;
begin
result := AAL5_PARAMETERS(GetRecordPtr^).Mode;
end;
procedure __AAL5_PARAMETERS__Wrapper.setSSCSType(const val : Byte);
begin
AAL5_PARAMETERS(GetRecordPtr^).SSCSType := val;
end;
function __AAL5_PARAMETERS__Wrapper.getSSCSType : Byte;
begin
result := AAL5_PARAMETERS(GetRecordPtr^).SSCSType;
end;
function __AALUSER_PARAMETERS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __AALUSER_PARAMETERS__Wrapper.setUserDefined(const val : ULONG);
begin
AALUSER_PARAMETERS(GetRecordPtr^).UserDefined := val;
end;
function __AALUSER_PARAMETERS__Wrapper.getUserDefined : ULONG;
begin
result := AALUSER_PARAMETERS(GetRecordPtr^).UserDefined;
end;
function __ADDRINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ADDRINFO__Wrapper.setai_flags(const val : Integer);
begin
ADDRINFO(GetRecordPtr^).ai_flags := val;
end;
function __ADDRINFO__Wrapper.getai_flags : Integer;
begin
result := ADDRINFO(GetRecordPtr^).ai_flags;
end;
procedure __ADDRINFO__Wrapper.setai_family(const val : Integer);
begin
ADDRINFO(GetRecordPtr^).ai_family := val;
end;
function __ADDRINFO__Wrapper.getai_family : Integer;
begin
result := ADDRINFO(GetRecordPtr^).ai_family;
end;
procedure __ADDRINFO__Wrapper.setai_socktype(const val : Integer);
begin
ADDRINFO(GetRecordPtr^).ai_socktype := val;
end;
function __ADDRINFO__Wrapper.getai_socktype : Integer;
begin
result := ADDRINFO(GetRecordPtr^).ai_socktype;
end;
procedure __ADDRINFO__Wrapper.setai_protocol(const val : Integer);
begin
ADDRINFO(GetRecordPtr^).ai_protocol := val;
end;
function __ADDRINFO__Wrapper.getai_protocol : Integer;
begin
result := ADDRINFO(GetRecordPtr^).ai_protocol;
end;
procedure __ADDRINFO__Wrapper.setai_addrlen(const val : ULONG);
begin
ADDRINFO(GetRecordPtr^).ai_addrlen := val;
end;
function __ADDRINFO__Wrapper.getai_addrlen : ULONG;
begin
result := ADDRINFO(GetRecordPtr^).ai_addrlen;
end;
function __AFPROTOCOLS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __AFPROTOCOLS__Wrapper.setiAddressFamily(const val : Integer);
begin
AFPROTOCOLS(GetRecordPtr^).iAddressFamily := val;
end;
function __AFPROTOCOLS__Wrapper.getiAddressFamily : Integer;
begin
result := AFPROTOCOLS(GetRecordPtr^).iAddressFamily;
end;
procedure __AFPROTOCOLS__Wrapper.setiProtocol(const val : Integer);
begin
AFPROTOCOLS(GetRecordPtr^).iProtocol := val;
end;
function __AFPROTOCOLS__Wrapper.getiProtocol : Integer;
begin
result := AFPROTOCOLS(GetRecordPtr^).iProtocol;
end;
function __ATM_ADDRESS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ATM_ADDRESS__Wrapper.setAddressType(const val : DWORD);
begin
ATM_ADDRESS(GetRecordPtr^).AddressType := val;
end;
function __ATM_ADDRESS__Wrapper.getAddressType : DWORD;
begin
result := ATM_ADDRESS(GetRecordPtr^).AddressType;
end;
procedure __ATM_ADDRESS__Wrapper.setNumofDigits(const val : DWORD);
begin
ATM_ADDRESS(GetRecordPtr^).NumofDigits := val;
end;
function __ATM_ADDRESS__Wrapper.getNumofDigits : DWORD;
begin
result := ATM_ADDRESS(GetRecordPtr^).NumofDigits;
end;
function __ATM_BHLI__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ATM_BHLI__Wrapper.setHighLayerInfoType(const val : DWORD);
begin
ATM_BHLI(GetRecordPtr^).HighLayerInfoType := val;
end;
function __ATM_BHLI__Wrapper.getHighLayerInfoType : DWORD;
begin
result := ATM_BHLI(GetRecordPtr^).HighLayerInfoType;
end;
procedure __ATM_BHLI__Wrapper.setHighLayerInfoLength(const val : DWORD);
begin
ATM_BHLI(GetRecordPtr^).HighLayerInfoLength := val;
end;
function __ATM_BHLI__Wrapper.getHighLayerInfoLength : DWORD;
begin
result := ATM_BHLI(GetRecordPtr^).HighLayerInfoLength;
end;
function __ATM_BHLI_IE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ATM_BHLI_IE__Wrapper.setHighLayerInfoType(const val : DWORD);
begin
ATM_BHLI_IE(GetRecordPtr^).HighLayerInfoType := val;
end;
function __ATM_BHLI_IE__Wrapper.getHighLayerInfoType : DWORD;
begin
result := ATM_BHLI_IE(GetRecordPtr^).HighLayerInfoType;
end;
procedure __ATM_BHLI_IE__Wrapper.setHighLayerInfoLength(const val : DWORD);
begin
ATM_BHLI_IE(GetRecordPtr^).HighLayerInfoLength := val;
end;
function __ATM_BHLI_IE__Wrapper.getHighLayerInfoLength : DWORD;
begin
result := ATM_BHLI_IE(GetRecordPtr^).HighLayerInfoLength;
end;
function __ATM_BLLI__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ATM_BLLI__Wrapper.setLayer2Protocol(const val : DWORD);
begin
ATM_BLLI(GetRecordPtr^).Layer2Protocol := val;
end;
function __ATM_BLLI__Wrapper.getLayer2Protocol : DWORD;
begin
result := ATM_BLLI(GetRecordPtr^).Layer2Protocol;
end;
procedure __ATM_BLLI__Wrapper.setLayer2UserSpecifiedProtocol(const val : DWORD);
begin
ATM_BLLI(GetRecordPtr^).Layer2UserSpecifiedProtocol := val;
end;
function __ATM_BLLI__Wrapper.getLayer2UserSpecifiedProtocol : DWORD;
begin
result := ATM_BLLI(GetRecordPtr^).Layer2UserSpecifiedProtocol;
end;
procedure __ATM_BLLI__Wrapper.setLayer3Protocol(const val : DWORD);
begin
ATM_BLLI(GetRecordPtr^).Layer3Protocol := val;
end;
function __ATM_BLLI__Wrapper.getLayer3Protocol : DWORD;
begin
result := ATM_BLLI(GetRecordPtr^).Layer3Protocol;
end;
procedure __ATM_BLLI__Wrapper.setLayer3UserSpecifiedProtocol(const val : DWORD);
begin
ATM_BLLI(GetRecordPtr^).Layer3UserSpecifiedProtocol := val;
end;
function __ATM_BLLI__Wrapper.getLayer3UserSpecifiedProtocol : DWORD;
begin
result := ATM_BLLI(GetRecordPtr^).Layer3UserSpecifiedProtocol;
end;
procedure __ATM_BLLI__Wrapper.setLayer3IPI(const val : DWORD);
begin
ATM_BLLI(GetRecordPtr^).Layer3IPI := val;
end;
function __ATM_BLLI__Wrapper.getLayer3IPI : DWORD;
begin
result := ATM_BLLI(GetRecordPtr^).Layer3IPI;
end;
function __ATM_BLLI_IE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ATM_BLLI_IE__Wrapper.setLayer2Protocol(const val : DWORD);
begin
ATM_BLLI_IE(GetRecordPtr^).Layer2Protocol := val;
end;
function __ATM_BLLI_IE__Wrapper.getLayer2Protocol : DWORD;
begin
result := ATM_BLLI_IE(GetRecordPtr^).Layer2Protocol;
end;
procedure __ATM_BLLI_IE__Wrapper.setLayer2Mode(const val : Byte);
begin
ATM_BLLI_IE(GetRecordPtr^).Layer2Mode := val;
end;
function __ATM_BLLI_IE__Wrapper.getLayer2Mode : Byte;
begin
result := ATM_BLLI_IE(GetRecordPtr^).Layer2Mode;
end;
procedure __ATM_BLLI_IE__Wrapper.setLayer2WindowSize(const val : Byte);
begin
ATM_BLLI_IE(GetRecordPtr^).Layer2WindowSize := val;
end;
function __ATM_BLLI_IE__Wrapper.getLayer2WindowSize : Byte;
begin
result := ATM_BLLI_IE(GetRecordPtr^).Layer2WindowSize;
end;
procedure __ATM_BLLI_IE__Wrapper.setLayer2UserSpecifiedProtocol(const val : DWORD);
begin
ATM_BLLI_IE(GetRecordPtr^).Layer2UserSpecifiedProtocol := val;
end;
function __ATM_BLLI_IE__Wrapper.getLayer2UserSpecifiedProtocol : DWORD;
begin
result := ATM_BLLI_IE(GetRecordPtr^).Layer2UserSpecifiedProtocol;
end;
procedure __ATM_BLLI_IE__Wrapper.setLayer3Protocol(const val : DWORD);
begin
ATM_BLLI_IE(GetRecordPtr^).Layer3Protocol := val;
end;
function __ATM_BLLI_IE__Wrapper.getLayer3Protocol : DWORD;
begin
result := ATM_BLLI_IE(GetRecordPtr^).Layer3Protocol;
end;
procedure __ATM_BLLI_IE__Wrapper.setLayer3Mode(const val : Byte);
begin
ATM_BLLI_IE(GetRecordPtr^).Layer3Mode := val;
end;
function __ATM_BLLI_IE__Wrapper.getLayer3Mode : Byte;
begin
result := ATM_BLLI_IE(GetRecordPtr^).Layer3Mode;
end;
procedure __ATM_BLLI_IE__Wrapper.setLayer3DefaultPacketSize(const val : Byte);
begin
ATM_BLLI_IE(GetRecordPtr^).Layer3DefaultPacketSize := val;
end;
function __ATM_BLLI_IE__Wrapper.getLayer3DefaultPacketSize : Byte;
begin
result := ATM_BLLI_IE(GetRecordPtr^).Layer3DefaultPacketSize;
end;
procedure __ATM_BLLI_IE__Wrapper.setLayer3PacketWindowSize(const val : Byte);
begin
ATM_BLLI_IE(GetRecordPtr^).Layer3PacketWindowSize := val;
end;
function __ATM_BLLI_IE__Wrapper.getLayer3PacketWindowSize : Byte;
begin
result := ATM_BLLI_IE(GetRecordPtr^).Layer3PacketWindowSize;
end;
procedure __ATM_BLLI_IE__Wrapper.setLayer3UserSpecifiedProtocol(const val : DWORD);
begin
ATM_BLLI_IE(GetRecordPtr^).Layer3UserSpecifiedProtocol := val;
end;
function __ATM_BLLI_IE__Wrapper.getLayer3UserSpecifiedProtocol : DWORD;
begin
result := ATM_BLLI_IE(GetRecordPtr^).Layer3UserSpecifiedProtocol;
end;
procedure __ATM_BLLI_IE__Wrapper.setLayer3IPI(const val : DWORD);
begin
ATM_BLLI_IE(GetRecordPtr^).Layer3IPI := val;
end;
function __ATM_BLLI_IE__Wrapper.getLayer3IPI : DWORD;
begin
result := ATM_BLLI_IE(GetRecordPtr^).Layer3IPI;
end;
function __ATM_BROADBAND_BEARER_CAPABILITY_IE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ATM_BROADBAND_BEARER_CAPABILITY_IE__Wrapper.setBearerClass(const val : Byte);
begin
ATM_BROADBAND_BEARER_CAPABILITY_IE(GetRecordPtr^).BearerClass := val;
end;
function __ATM_BROADBAND_BEARER_CAPABILITY_IE__Wrapper.getBearerClass : Byte;
begin
result := ATM_BROADBAND_BEARER_CAPABILITY_IE(GetRecordPtr^).BearerClass;
end;
procedure __ATM_BROADBAND_BEARER_CAPABILITY_IE__Wrapper.setTrafficType(const val : Byte);
begin
ATM_BROADBAND_BEARER_CAPABILITY_IE(GetRecordPtr^).TrafficType := val;
end;
function __ATM_BROADBAND_BEARER_CAPABILITY_IE__Wrapper.getTrafficType : Byte;
begin
result := ATM_BROADBAND_BEARER_CAPABILITY_IE(GetRecordPtr^).TrafficType;
end;
procedure __ATM_BROADBAND_BEARER_CAPABILITY_IE__Wrapper.setTimingRequirements(const val : Byte);
begin
ATM_BROADBAND_BEARER_CAPABILITY_IE(GetRecordPtr^).TimingRequirements := val;
end;
function __ATM_BROADBAND_BEARER_CAPABILITY_IE__Wrapper.getTimingRequirements : Byte;
begin
result := ATM_BROADBAND_BEARER_CAPABILITY_IE(GetRecordPtr^).TimingRequirements;
end;
procedure __ATM_BROADBAND_BEARER_CAPABILITY_IE__Wrapper.setClippingSusceptability(const val : Byte);
begin
ATM_BROADBAND_BEARER_CAPABILITY_IE(GetRecordPtr^).ClippingSusceptability := val;
end;
function __ATM_BROADBAND_BEARER_CAPABILITY_IE__Wrapper.getClippingSusceptability : Byte;
begin
result := ATM_BROADBAND_BEARER_CAPABILITY_IE(GetRecordPtr^).ClippingSusceptability;
end;
procedure __ATM_BROADBAND_BEARER_CAPABILITY_IE__Wrapper.setUserPlaneConnectionConfig(const val : Byte);
begin
ATM_BROADBAND_BEARER_CAPABILITY_IE(GetRecordPtr^).UserPlaneConnectionConfig := val;
end;
function __ATM_BROADBAND_BEARER_CAPABILITY_IE__Wrapper.getUserPlaneConnectionConfig : Byte;
begin
result := ATM_BROADBAND_BEARER_CAPABILITY_IE(GetRecordPtr^).UserPlaneConnectionConfig;
end;
function __ATM_CALLED_PARTY_NUMBER_IE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ATM_CALLED_PARTY_NUMBER_IE__Wrapper.setAddressType(const val : DWORD);
begin
ATM_CALLED_PARTY_NUMBER_IE(GetRecordPtr^).AddressType := val;
end;
function __ATM_CALLED_PARTY_NUMBER_IE__Wrapper.getAddressType : DWORD;
begin
result := ATM_CALLED_PARTY_NUMBER_IE(GetRecordPtr^).AddressType;
end;
procedure __ATM_CALLED_PARTY_NUMBER_IE__Wrapper.setNumofDigits(const val : DWORD);
begin
ATM_CALLED_PARTY_NUMBER_IE(GetRecordPtr^).NumofDigits := val;
end;
function __ATM_CALLED_PARTY_NUMBER_IE__Wrapper.getNumofDigits : DWORD;
begin
result := ATM_CALLED_PARTY_NUMBER_IE(GetRecordPtr^).NumofDigits;
end;
function __ATM_CALLED_PARTY_SUBADDRESS_IE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ATM_CALLED_PARTY_SUBADDRESS_IE__Wrapper.setAddressType(const val : DWORD);
begin
ATM_CALLED_PARTY_SUBADDRESS_IE(GetRecordPtr^).AddressType := val;
end;
function __ATM_CALLED_PARTY_SUBADDRESS_IE__Wrapper.getAddressType : DWORD;
begin
result := ATM_CALLED_PARTY_SUBADDRESS_IE(GetRecordPtr^).AddressType;
end;
procedure __ATM_CALLED_PARTY_SUBADDRESS_IE__Wrapper.setNumofDigits(const val : DWORD);
begin
ATM_CALLED_PARTY_SUBADDRESS_IE(GetRecordPtr^).NumofDigits := val;
end;
function __ATM_CALLED_PARTY_SUBADDRESS_IE__Wrapper.getNumofDigits : DWORD;
begin
result := ATM_CALLED_PARTY_SUBADDRESS_IE(GetRecordPtr^).NumofDigits;
end;
function __ATM_CALLING_PARTY_NUMBER_IE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ATM_CALLING_PARTY_NUMBER_IE__Wrapper.setPresentation_Indication(const val : Byte);
begin
ATM_CALLING_PARTY_NUMBER_IE(GetRecordPtr^).Presentation_Indication := val;
end;
function __ATM_CALLING_PARTY_NUMBER_IE__Wrapper.getPresentation_Indication : Byte;
begin
result := ATM_CALLING_PARTY_NUMBER_IE(GetRecordPtr^).Presentation_Indication;
end;
procedure __ATM_CALLING_PARTY_NUMBER_IE__Wrapper.setScreening_Indicator(const val : Byte);
begin
ATM_CALLING_PARTY_NUMBER_IE(GetRecordPtr^).Screening_Indicator := val;
end;
function __ATM_CALLING_PARTY_NUMBER_IE__Wrapper.getScreening_Indicator : Byte;
begin
result := ATM_CALLING_PARTY_NUMBER_IE(GetRecordPtr^).Screening_Indicator;
end;
function __ATM_CALLING_PARTY_SUBADDRESS_IE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ATM_CALLING_PARTY_SUBADDRESS_IE__Wrapper.setAddressType(const val : DWORD);
begin
ATM_CALLING_PARTY_SUBADDRESS_IE(GetRecordPtr^).AddressType := val;
end;
function __ATM_CALLING_PARTY_SUBADDRESS_IE__Wrapper.getAddressType : DWORD;
begin
result := ATM_CALLING_PARTY_SUBADDRESS_IE(GetRecordPtr^).AddressType;
end;
procedure __ATM_CALLING_PARTY_SUBADDRESS_IE__Wrapper.setNumofDigits(const val : DWORD);
begin
ATM_CALLING_PARTY_SUBADDRESS_IE(GetRecordPtr^).NumofDigits := val;
end;
function __ATM_CALLING_PARTY_SUBADDRESS_IE__Wrapper.getNumofDigits : DWORD;
begin
result := ATM_CALLING_PARTY_SUBADDRESS_IE(GetRecordPtr^).NumofDigits;
end;
function __ATM_CAUSE_IE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ATM_CAUSE_IE__Wrapper.setLocation(const val : Byte);
begin
ATM_CAUSE_IE(GetRecordPtr^).Location := val;
end;
function __ATM_CAUSE_IE__Wrapper.getLocation : Byte;
begin
result := ATM_CAUSE_IE(GetRecordPtr^).Location;
end;
procedure __ATM_CAUSE_IE__Wrapper.setCause(const val : Byte);
begin
ATM_CAUSE_IE(GetRecordPtr^).Cause := val;
end;
function __ATM_CAUSE_IE__Wrapper.getCause : Byte;
begin
result := ATM_CAUSE_IE(GetRecordPtr^).Cause;
end;
procedure __ATM_CAUSE_IE__Wrapper.setDiagnosticsLength(const val : Byte);
begin
ATM_CAUSE_IE(GetRecordPtr^).DiagnosticsLength := val;
end;
function __ATM_CAUSE_IE__Wrapper.getDiagnosticsLength : Byte;
begin
result := ATM_CAUSE_IE(GetRecordPtr^).DiagnosticsLength;
end;
function __ATM_CONNECTION_ID__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ATM_CONNECTION_ID__Wrapper.setDeviceNumber(const val : DWORD);
begin
ATM_CONNECTION_ID(GetRecordPtr^).DeviceNumber := val;
end;
function __ATM_CONNECTION_ID__Wrapper.getDeviceNumber : DWORD;
begin
result := ATM_CONNECTION_ID(GetRecordPtr^).DeviceNumber;
end;
procedure __ATM_CONNECTION_ID__Wrapper.setVPI(const val : DWORD);
begin
ATM_CONNECTION_ID(GetRecordPtr^).VPI := val;
end;
function __ATM_CONNECTION_ID__Wrapper.getVPI : DWORD;
begin
result := ATM_CONNECTION_ID(GetRecordPtr^).VPI;
end;
procedure __ATM_CONNECTION_ID__Wrapper.setVCI(const val : DWORD);
begin
ATM_CONNECTION_ID(GetRecordPtr^).VCI := val;
end;
function __ATM_CONNECTION_ID__Wrapper.getVCI : DWORD;
begin
result := ATM_CONNECTION_ID(GetRecordPtr^).VCI;
end;
function __ATM_PVC_PARAMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __ATM_QOS_CLASS_IE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ATM_QOS_CLASS_IE__Wrapper.setQOSClassForward(const val : Byte);
begin
ATM_QOS_CLASS_IE(GetRecordPtr^).QOSClassForward := val;
end;
function __ATM_QOS_CLASS_IE__Wrapper.getQOSClassForward : Byte;
begin
result := ATM_QOS_CLASS_IE(GetRecordPtr^).QOSClassForward;
end;
procedure __ATM_QOS_CLASS_IE__Wrapper.setQOSClassBackward(const val : Byte);
begin
ATM_QOS_CLASS_IE(GetRecordPtr^).QOSClassBackward := val;
end;
function __ATM_QOS_CLASS_IE__Wrapper.getQOSClassBackward : Byte;
begin
result := ATM_QOS_CLASS_IE(GetRecordPtr^).QOSClassBackward;
end;
function __ATM_TD__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ATM_TD__Wrapper.setPeakCellRate_CLP0(const val : ULONG);
begin
ATM_TD(GetRecordPtr^).PeakCellRate_CLP0 := val;
end;
function __ATM_TD__Wrapper.getPeakCellRate_CLP0 : ULONG;
begin
result := ATM_TD(GetRecordPtr^).PeakCellRate_CLP0;
end;
procedure __ATM_TD__Wrapper.setPeakCellRate_CLP01(const val : ULONG);
begin
ATM_TD(GetRecordPtr^).PeakCellRate_CLP01 := val;
end;
function __ATM_TD__Wrapper.getPeakCellRate_CLP01 : ULONG;
begin
result := ATM_TD(GetRecordPtr^).PeakCellRate_CLP01;
end;
procedure __ATM_TD__Wrapper.setSustainableCellRate_CLP0(const val : ULONG);
begin
ATM_TD(GetRecordPtr^).SustainableCellRate_CLP0 := val;
end;
function __ATM_TD__Wrapper.getSustainableCellRate_CLP0 : ULONG;
begin
result := ATM_TD(GetRecordPtr^).SustainableCellRate_CLP0;
end;
procedure __ATM_TD__Wrapper.setSustainableCellRate_CLP01(const val : ULONG);
begin
ATM_TD(GetRecordPtr^).SustainableCellRate_CLP01 := val;
end;
function __ATM_TD__Wrapper.getSustainableCellRate_CLP01 : ULONG;
begin
result := ATM_TD(GetRecordPtr^).SustainableCellRate_CLP01;
end;
procedure __ATM_TD__Wrapper.setMaxBurstSize_CLP0(const val : ULONG);
begin
ATM_TD(GetRecordPtr^).MaxBurstSize_CLP0 := val;
end;
function __ATM_TD__Wrapper.getMaxBurstSize_CLP0 : ULONG;
begin
result := ATM_TD(GetRecordPtr^).MaxBurstSize_CLP0;
end;
procedure __ATM_TD__Wrapper.setMaxBurstSize_CLP01(const val : ULONG);
begin
ATM_TD(GetRecordPtr^).MaxBurstSize_CLP01 := val;
end;
function __ATM_TD__Wrapper.getMaxBurstSize_CLP01 : ULONG;
begin
result := ATM_TD(GetRecordPtr^).MaxBurstSize_CLP01;
end;
procedure __ATM_TD__Wrapper.setTagging(const val : LongBool);
begin
ATM_TD(GetRecordPtr^).Tagging := val;
end;
function __ATM_TD__Wrapper.getTagging : LongBool;
begin
result := ATM_TD(GetRecordPtr^).Tagging;
end;
function __ATM_TRAFFIC_DESCRIPTOR_IE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ATM_TRAFFIC_DESCRIPTOR_IE__Wrapper.setBestEffort(const val : LongBool);
begin
ATM_TRAFFIC_DESCRIPTOR_IE(GetRecordPtr^).BestEffort := val;
end;
function __ATM_TRAFFIC_DESCRIPTOR_IE__Wrapper.getBestEffort : LongBool;
begin
result := ATM_TRAFFIC_DESCRIPTOR_IE(GetRecordPtr^).BestEffort;
end;
function __ATM_TRANSIT_NETWORK_SELECTION_IE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ATM_TRANSIT_NETWORK_SELECTION_IE__Wrapper.setTypeOfNetworkId(const val : Byte);
begin
ATM_TRANSIT_NETWORK_SELECTION_IE(GetRecordPtr^).TypeOfNetworkId := val;
end;
function __ATM_TRANSIT_NETWORK_SELECTION_IE__Wrapper.getTypeOfNetworkId : Byte;
begin
result := ATM_TRANSIT_NETWORK_SELECTION_IE(GetRecordPtr^).TypeOfNetworkId;
end;
procedure __ATM_TRANSIT_NETWORK_SELECTION_IE__Wrapper.setNetworkIdPlan(const val : Byte);
begin
ATM_TRANSIT_NETWORK_SELECTION_IE(GetRecordPtr^).NetworkIdPlan := val;
end;
function __ATM_TRANSIT_NETWORK_SELECTION_IE__Wrapper.getNetworkIdPlan : Byte;
begin
result := ATM_TRANSIT_NETWORK_SELECTION_IE(GetRecordPtr^).NetworkIdPlan;
end;
procedure __ATM_TRANSIT_NETWORK_SELECTION_IE__Wrapper.setNetworkIdLength(const val : Byte);
begin
ATM_TRANSIT_NETWORK_SELECTION_IE(GetRecordPtr^).NetworkIdLength := val;
end;
function __ATM_TRANSIT_NETWORK_SELECTION_IE__Wrapper.getNetworkIdLength : Byte;
begin
result := ATM_TRANSIT_NETWORK_SELECTION_IE(GetRecordPtr^).NetworkIdLength;
end;
function __BLOB__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __BLOB__Wrapper.setcbSize(const val : ULONG);
begin
BLOB(GetRecordPtr^).cbSize := val;
end;
function __BLOB__Wrapper.getcbSize : ULONG;
begin
result := BLOB(GetRecordPtr^).cbSize;
end;
function __CSADDR_INFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __CSADDR_INFO__Wrapper.setiSocketType(const val : Integer);
begin
CSADDR_INFO(GetRecordPtr^).iSocketType := val;
end;
function __CSADDR_INFO__Wrapper.getiSocketType : Integer;
begin
result := CSADDR_INFO(GetRecordPtr^).iSocketType;
end;
procedure __CSADDR_INFO__Wrapper.setiProtocol(const val : Integer);
begin
CSADDR_INFO(GetRecordPtr^).iProtocol := val;
end;
function __CSADDR_INFO__Wrapper.getiProtocol : Integer;
begin
result := CSADDR_INFO(GetRecordPtr^).iProtocol;
end;
function __FLOWSPEC__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __FLOWSPEC__Wrapper.setTokenRate(const val : Longint);
begin
FLOWSPEC(GetRecordPtr^).TokenRate := val;
end;
function __FLOWSPEC__Wrapper.getTokenRate : Longint;
begin
result := FLOWSPEC(GetRecordPtr^).TokenRate;
end;
procedure __FLOWSPEC__Wrapper.setTokenBucketSize(const val : Longint);
begin
FLOWSPEC(GetRecordPtr^).TokenBucketSize := val;
end;
function __FLOWSPEC__Wrapper.getTokenBucketSize : Longint;
begin
result := FLOWSPEC(GetRecordPtr^).TokenBucketSize;
end;
procedure __FLOWSPEC__Wrapper.setPeakBandwidth(const val : Longint);
begin
FLOWSPEC(GetRecordPtr^).PeakBandwidth := val;
end;
function __FLOWSPEC__Wrapper.getPeakBandwidth : Longint;
begin
result := FLOWSPEC(GetRecordPtr^).PeakBandwidth;
end;
procedure __FLOWSPEC__Wrapper.setLatency(const val : Longint);
begin
FLOWSPEC(GetRecordPtr^).Latency := val;
end;
function __FLOWSPEC__Wrapper.getLatency : Longint;
begin
result := FLOWSPEC(GetRecordPtr^).Latency;
end;
procedure __FLOWSPEC__Wrapper.setDelayVariation(const val : Longint);
begin
FLOWSPEC(GetRecordPtr^).DelayVariation := val;
end;
function __FLOWSPEC__Wrapper.getDelayVariation : Longint;
begin
result := FLOWSPEC(GetRecordPtr^).DelayVariation;
end;
procedure __FLOWSPEC__Wrapper.setSERVICETYPE(const val : TServiceType);
begin
FLOWSPEC(GetRecordPtr^).SERVICETYPE := val;
end;
function __FLOWSPEC__Wrapper.getSERVICETYPE : TServiceType;
begin
result := FLOWSPEC(GetRecordPtr^).SERVICETYPE;
end;
procedure __FLOWSPEC__Wrapper.setMaxSduSize(const val : Longint);
begin
FLOWSPEC(GetRecordPtr^).MaxSduSize := val;
end;
function __FLOWSPEC__Wrapper.getMaxSduSize : Longint;
begin
result := FLOWSPEC(GetRecordPtr^).MaxSduSize;
end;
procedure __FLOWSPEC__Wrapper.setMinimumPolicedSize(const val : Longint);
begin
FLOWSPEC(GetRecordPtr^).MinimumPolicedSize := val;
end;
function __FLOWSPEC__Wrapper.getMinimumPolicedSize : Longint;
begin
result := FLOWSPEC(GetRecordPtr^).MinimumPolicedSize;
end;
function __hostent__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __hostent__Wrapper.seth_addrtype(const val : SmallInt);
begin
hostent(GetRecordPtr^).h_addrtype := val;
end;
function __hostent__Wrapper.geth_addrtype : SmallInt;
begin
result := hostent(GetRecordPtr^).h_addrtype;
end;
procedure __hostent__Wrapper.seth_length(const val : SmallInt);
begin
hostent(GetRecordPtr^).h_length := val;
end;
function __hostent__Wrapper.geth_length : SmallInt;
begin
result := hostent(GetRecordPtr^).h_length;
end;
function __in_addr__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __in_addr__Wrapper.setS_addr(const val : u_long);
begin
in_addr(GetRecordPtr^).S_addr := val;
end;
function __in_addr__Wrapper.getS_addr : u_long;
begin
result := in_addr(GetRecordPtr^).S_addr;
end;
function __IN_PKTINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __IN_PKTINFO__Wrapper.setipi_ifindex(const val : UINT);
begin
IN_PKTINFO(GetRecordPtr^).ipi_ifindex := val;
end;
function __IN_PKTINFO__Wrapper.getipi_ifindex : UINT;
begin
result := IN_PKTINFO(GetRecordPtr^).ipi_ifindex;
end;
function __IN6_PKTINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __IN6_PKTINFO__Wrapper.setipi6_ifindex(const val : UINT);
begin
IN6_PKTINFO(GetRecordPtr^).ipi6_ifindex := val;
end;
function __IN6_PKTINFO__Wrapper.getipi6_ifindex : UINT;
begin
result := IN6_PKTINFO(GetRecordPtr^).ipi6_ifindex;
end;
function __INTERFACE_INFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __INTERFACE_INFO__Wrapper.setiiFlags(const val : u_long);
begin
INTERFACE_INFO(GetRecordPtr^).iiFlags := val;
end;
function __INTERFACE_INFO__Wrapper.getiiFlags : u_long;
begin
result := INTERFACE_INFO(GetRecordPtr^).iiFlags;
end;
function __INTERFACE_INFO_EX__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __INTERFACE_INFO_EX__Wrapper.setiiFlags(const val : u_long);
begin
INTERFACE_INFO_EX(GetRecordPtr^).iiFlags := val;
end;
function __INTERFACE_INFO_EX__Wrapper.getiiFlags : u_long;
begin
result := INTERFACE_INFO_EX(GetRecordPtr^).iiFlags;
end;
function __ip_mreq__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __ip_mreq_source__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __ip_msfilter__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ip_msfilter__Wrapper.setimsf_fmode(const val : u_long);
begin
ip_msfilter(GetRecordPtr^).imsf_fmode := val;
end;
function __ip_msfilter__Wrapper.getimsf_fmode : u_long;
begin
result := ip_msfilter(GetRecordPtr^).imsf_fmode;
end;
procedure __ip_msfilter__Wrapper.setimsf_numsrc(const val : u_long);
begin
ip_msfilter(GetRecordPtr^).imsf_numsrc := val;
end;
function __ip_msfilter__Wrapper.getimsf_numsrc : u_long;
begin
result := ip_msfilter(GetRecordPtr^).imsf_numsrc;
end;
function __ipv6_mreq__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ipv6_mreq__Wrapper.setipv6mr_interface(const val : u_int);
begin
ipv6_mreq(GetRecordPtr^).ipv6mr_interface := val;
end;
function __ipv6_mreq__Wrapper.getipv6mr_interface : u_int;
begin
result := ipv6_mreq(GetRecordPtr^).ipv6mr_interface;
end;
function __IPX_ADDRESS_DATA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __IPX_ADDRESS_DATA__Wrapper.setadapternum(const val : Integer);
begin
IPX_ADDRESS_DATA(GetRecordPtr^).adapternum := val;
end;
function __IPX_ADDRESS_DATA__Wrapper.getadapternum : Integer;
begin
result := IPX_ADDRESS_DATA(GetRecordPtr^).adapternum;
end;
procedure __IPX_ADDRESS_DATA__Wrapper.setwan(const val : Boolean);
begin
IPX_ADDRESS_DATA(GetRecordPtr^).wan := val;
end;
function __IPX_ADDRESS_DATA__Wrapper.getwan : Boolean;
begin
result := IPX_ADDRESS_DATA(GetRecordPtr^).wan;
end;
procedure __IPX_ADDRESS_DATA__Wrapper.setstatus(const val : Boolean);
begin
IPX_ADDRESS_DATA(GetRecordPtr^).status := val;
end;
function __IPX_ADDRESS_DATA__Wrapper.getstatus : Boolean;
begin
result := IPX_ADDRESS_DATA(GetRecordPtr^).status;
end;
procedure __IPX_ADDRESS_DATA__Wrapper.setmaxpkt(const val : Integer);
begin
IPX_ADDRESS_DATA(GetRecordPtr^).maxpkt := val;
end;
function __IPX_ADDRESS_DATA__Wrapper.getmaxpkt : Integer;
begin
result := IPX_ADDRESS_DATA(GetRecordPtr^).maxpkt;
end;
procedure __IPX_ADDRESS_DATA__Wrapper.setlinkspeed(const val : ULONG);
begin
IPX_ADDRESS_DATA(GetRecordPtr^).linkspeed := val;
end;
function __IPX_ADDRESS_DATA__Wrapper.getlinkspeed : ULONG;
begin
result := IPX_ADDRESS_DATA(GetRecordPtr^).linkspeed;
end;
function __IPX_NETNUM_DATA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __IPX_NETNUM_DATA__Wrapper.sethopcount(const val : Word);
begin
IPX_NETNUM_DATA(GetRecordPtr^).hopcount := val;
end;
function __IPX_NETNUM_DATA__Wrapper.gethopcount : Word;
begin
result := IPX_NETNUM_DATA(GetRecordPtr^).hopcount;
end;
procedure __IPX_NETNUM_DATA__Wrapper.setnetdelay(const val : Word);
begin
IPX_NETNUM_DATA(GetRecordPtr^).netdelay := val;
end;
function __IPX_NETNUM_DATA__Wrapper.getnetdelay : Word;
begin
result := IPX_NETNUM_DATA(GetRecordPtr^).netdelay;
end;
procedure __IPX_NETNUM_DATA__Wrapper.setcardnum(const val : Integer);
begin
IPX_NETNUM_DATA(GetRecordPtr^).cardnum := val;
end;
function __IPX_NETNUM_DATA__Wrapper.getcardnum : Integer;
begin
result := IPX_NETNUM_DATA(GetRecordPtr^).cardnum;
end;
function __IPX_SPXCONNSTATUS_DATA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __IPX_SPXCONNSTATUS_DATA__Wrapper.setConnectionState(const val : Byte);
begin
IPX_SPXCONNSTATUS_DATA(GetRecordPtr^).ConnectionState := val;
end;
function __IPX_SPXCONNSTATUS_DATA__Wrapper.getConnectionState : Byte;
begin
result := IPX_SPXCONNSTATUS_DATA(GetRecordPtr^).ConnectionState;
end;
procedure __IPX_SPXCONNSTATUS_DATA__Wrapper.setWatchDogActive(const val : Byte);
begin
IPX_SPXCONNSTATUS_DATA(GetRecordPtr^).WatchDogActive := val;
end;
function __IPX_SPXCONNSTATUS_DATA__Wrapper.getWatchDogActive : Byte;
begin
result := IPX_SPXCONNSTATUS_DATA(GetRecordPtr^).WatchDogActive;
end;
procedure __IPX_SPXCONNSTATUS_DATA__Wrapper.setLocalConnectionId(const val : Word);
begin
IPX_SPXCONNSTATUS_DATA(GetRecordPtr^).LocalConnectionId := val;
end;
function __IPX_SPXCONNSTATUS_DATA__Wrapper.getLocalConnectionId : Word;
begin
result := IPX_SPXCONNSTATUS_DATA(GetRecordPtr^).LocalConnectionId;
end;
procedure __IPX_SPXCONNSTATUS_DATA__Wrapper.setRemoteConnectionId(const val : Word);
begin
IPX_SPXCONNSTATUS_DATA(GetRecordPtr^).RemoteConnectionId := val;
end;
function __IPX_SPXCONNSTATUS_DATA__Wrapper.getRemoteConnectionId : Word;
begin
result := IPX_SPXCONNSTATUS_DATA(GetRecordPtr^).RemoteConnectionId;
end;
procedure __IPX_SPXCONNSTATUS_DATA__Wrapper.setLocalSequenceNumber(const val : Word);
begin
IPX_SPXCONNSTATUS_DATA(GetRecordPtr^).LocalSequenceNumber := val;
end;
function __IPX_SPXCONNSTATUS_DATA__Wrapper.getLocalSequenceNumber : Word;
begin
result := IPX_SPXCONNSTATUS_DATA(GetRecordPtr^).LocalSequenceNumber;
end;
procedure __IPX_SPXCONNSTATUS_DATA__Wrapper.setLocalAckNumber(const val : Word);
begin
IPX_SPXCONNSTATUS_DATA(GetRecordPtr^).LocalAckNumber := val;
end;
function __IPX_SPXCONNSTATUS_DATA__Wrapper.getLocalAckNumber : Word;
begin
result := IPX_SPXCONNSTATUS_DATA(GetRecordPtr^).LocalAckNumber;
end;
procedure __IPX_SPXCONNSTATUS_DATA__Wrapper.setLocalAllocNumber(const val : Word);
begin
IPX_SPXCONNSTATUS_DATA(GetRecordPtr^).LocalAllocNumber := val;
end;
function __IPX_SPXCONNSTATUS_DATA__Wrapper.getLocalAllocNumber : Word;
begin
result := IPX_SPXCONNSTATUS_DATA(GetRecordPtr^).LocalAllocNumber;
end;
procedure __IPX_SPXCONNSTATUS_DATA__Wrapper.setRemoteAckNumber(const val : Word);
begin
IPX_SPXCONNSTATUS_DATA(GetRecordPtr^).RemoteAckNumber := val;
end;
function __IPX_SPXCONNSTATUS_DATA__Wrapper.getRemoteAckNumber : Word;
begin
result := IPX_SPXCONNSTATUS_DATA(GetRecordPtr^).RemoteAckNumber;
end;
procedure __IPX_SPXCONNSTATUS_DATA__Wrapper.setRemoteAllocNumber(const val : Word);
begin
IPX_SPXCONNSTATUS_DATA(GetRecordPtr^).RemoteAllocNumber := val;
end;
function __IPX_SPXCONNSTATUS_DATA__Wrapper.getRemoteAllocNumber : Word;
begin
result := IPX_SPXCONNSTATUS_DATA(GetRecordPtr^).RemoteAllocNumber;
end;
procedure __IPX_SPXCONNSTATUS_DATA__Wrapper.setLocalSocket(const val : Word);
begin
IPX_SPXCONNSTATUS_DATA(GetRecordPtr^).LocalSocket := val;
end;
function __IPX_SPXCONNSTATUS_DATA__Wrapper.getLocalSocket : Word;
begin
result := IPX_SPXCONNSTATUS_DATA(GetRecordPtr^).LocalSocket;
end;
procedure __IPX_SPXCONNSTATUS_DATA__Wrapper.setRemoteSocket(const val : Word);
begin
IPX_SPXCONNSTATUS_DATA(GetRecordPtr^).RemoteSocket := val;
end;
function __IPX_SPXCONNSTATUS_DATA__Wrapper.getRemoteSocket : Word;
begin
result := IPX_SPXCONNSTATUS_DATA(GetRecordPtr^).RemoteSocket;
end;
procedure __IPX_SPXCONNSTATUS_DATA__Wrapper.setRetransmissionCount(const val : Word);
begin
IPX_SPXCONNSTATUS_DATA(GetRecordPtr^).RetransmissionCount := val;
end;
function __IPX_SPXCONNSTATUS_DATA__Wrapper.getRetransmissionCount : Word;
begin
result := IPX_SPXCONNSTATUS_DATA(GetRecordPtr^).RetransmissionCount;
end;
procedure __IPX_SPXCONNSTATUS_DATA__Wrapper.setEstimatedRoundTripDelay(const val : Word);
begin
IPX_SPXCONNSTATUS_DATA(GetRecordPtr^).EstimatedRoundTripDelay := val;
end;
function __IPX_SPXCONNSTATUS_DATA__Wrapper.getEstimatedRoundTripDelay : Word;
begin
result := IPX_SPXCONNSTATUS_DATA(GetRecordPtr^).EstimatedRoundTripDelay;
end;
procedure __IPX_SPXCONNSTATUS_DATA__Wrapper.setRetransmittedPackets(const val : Word);
begin
IPX_SPXCONNSTATUS_DATA(GetRecordPtr^).RetransmittedPackets := val;
end;
function __IPX_SPXCONNSTATUS_DATA__Wrapper.getRetransmittedPackets : Word;
begin
result := IPX_SPXCONNSTATUS_DATA(GetRecordPtr^).RetransmittedPackets;
end;
procedure __IPX_SPXCONNSTATUS_DATA__Wrapper.setSuppressedPacket(const val : Word);
begin
IPX_SPXCONNSTATUS_DATA(GetRecordPtr^).SuppressedPacket := val;
end;
function __IPX_SPXCONNSTATUS_DATA__Wrapper.getSuppressedPacket : Word;
begin
result := IPX_SPXCONNSTATUS_DATA(GetRecordPtr^).SuppressedPacket;
end;
function __linger__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __linger__Wrapper.setl_onoff(const val : u_short);
begin
linger(GetRecordPtr^).l_onoff := val;
end;
function __linger__Wrapper.getl_onoff : u_short;
begin
result := linger(GetRecordPtr^).l_onoff;
end;
procedure __linger__Wrapper.setl_linger(const val : u_short);
begin
linger(GetRecordPtr^).l_linger := val;
end;
function __linger__Wrapper.getl_linger : u_short;
begin
result := linger(GetRecordPtr^).l_linger;
end;
function __netent__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __netent__Wrapper.setn_addrtype(const val : SmallInt);
begin
netent(GetRecordPtr^).n_addrtype := val;
end;
function __netent__Wrapper.getn_addrtype : SmallInt;
begin
result := netent(GetRecordPtr^).n_addrtype;
end;
procedure __netent__Wrapper.setn_net(const val : u_long);
begin
netent(GetRecordPtr^).n_net := val;
end;
function __netent__Wrapper.getn_net : u_long;
begin
result := netent(GetRecordPtr^).n_net;
end;
function __protoent__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __protoent__Wrapper.setp_proto(const val : SmallInt);
begin
protoent(GetRecordPtr^).p_proto := val;
end;
function __protoent__Wrapper.getp_proto : SmallInt;
begin
result := protoent(GetRecordPtr^).p_proto;
end;
function __Q2931_IE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __Q2931_IE__Wrapper.setIEType(const val : Q2931_IE_TYPE);
begin
Q2931_IE(GetRecordPtr^).IEType := val;
end;
function __Q2931_IE__Wrapper.getIEType : Q2931_IE_TYPE;
begin
result := Q2931_IE(GetRecordPtr^).IEType;
end;
procedure __Q2931_IE__Wrapper.setIELength(const val : ULONG);
begin
Q2931_IE(GetRecordPtr^).IELength := val;
end;
function __Q2931_IE__Wrapper.getIELength : ULONG;
begin
result := Q2931_IE(GetRecordPtr^).IELength;
end;
function __QOS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __servent__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __servent__Wrapper.sets_port(const val : SmallInt);
begin
servent(GetRecordPtr^).s_port := val;
end;
function __servent__Wrapper.gets_port : SmallInt;
begin
result := servent(GetRecordPtr^).s_port;
end;
function __SOCKADDR__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __SOCKADDR__Wrapper.setsin_family(const val : u_short);
begin
SOCKADDR(GetRecordPtr^).sin_family := val;
end;
function __SOCKADDR__Wrapper.getsin_family : u_short;
begin
result := SOCKADDR(GetRecordPtr^).sin_family;
end;
procedure __SOCKADDR__Wrapper.setsin_port(const val : u_short);
begin
SOCKADDR(GetRecordPtr^).sin_port := val;
end;
function __SOCKADDR__Wrapper.getsin_port : u_short;
begin
result := SOCKADDR(GetRecordPtr^).sin_port;
end;
procedure __SOCKADDR__Wrapper.setsa_family(const val : u_short);
begin
SOCKADDR(GetRecordPtr^).sa_family := val;
end;
function __SOCKADDR__Wrapper.getsa_family : u_short;
begin
result := SOCKADDR(GetRecordPtr^).sa_family;
end;
function __SOCKADDR_ATM__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __SOCKADDR_ATM__Wrapper.setsatm_family(const val : u_short);
begin
SOCKADDR_ATM(GetRecordPtr^).satm_family := val;
end;
function __SOCKADDR_ATM__Wrapper.getsatm_family : u_short;
begin
result := SOCKADDR_ATM(GetRecordPtr^).satm_family;
end;
function __sockaddr_gen__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __sockaddr_in__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __sockaddr_in__Wrapper.setsin_family(const val : u_short);
begin
sockaddr_in(GetRecordPtr^).sin_family := val;
end;
function __sockaddr_in__Wrapper.getsin_family : u_short;
begin
result := sockaddr_in(GetRecordPtr^).sin_family;
end;
procedure __sockaddr_in__Wrapper.setsin_port(const val : u_short);
begin
sockaddr_in(GetRecordPtr^).sin_port := val;
end;
function __sockaddr_in__Wrapper.getsin_port : u_short;
begin
result := sockaddr_in(GetRecordPtr^).sin_port;
end;
procedure __sockaddr_in__Wrapper.setsa_family(const val : u_short);
begin
sockaddr_in(GetRecordPtr^).sa_family := val;
end;
function __sockaddr_in__Wrapper.getsa_family : u_short;
begin
result := sockaddr_in(GetRecordPtr^).sa_family;
end;
function __SOCKADDR_IN6__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __SOCKADDR_IN6__Wrapper.setsin6_family(const val : SmallInt);
begin
SOCKADDR_IN6(GetRecordPtr^).sin6_family := val;
end;
function __SOCKADDR_IN6__Wrapper.getsin6_family : SmallInt;
begin
result := SOCKADDR_IN6(GetRecordPtr^).sin6_family;
end;
procedure __SOCKADDR_IN6__Wrapper.setsin6_port(const val : u_short);
begin
SOCKADDR_IN6(GetRecordPtr^).sin6_port := val;
end;
function __SOCKADDR_IN6__Wrapper.getsin6_port : u_short;
begin
result := SOCKADDR_IN6(GetRecordPtr^).sin6_port;
end;
procedure __SOCKADDR_IN6__Wrapper.setsin6_flowinfo(const val : u_long);
begin
SOCKADDR_IN6(GetRecordPtr^).sin6_flowinfo := val;
end;
function __SOCKADDR_IN6__Wrapper.getsin6_flowinfo : u_long;
begin
result := SOCKADDR_IN6(GetRecordPtr^).sin6_flowinfo;
end;
procedure __SOCKADDR_IN6__Wrapper.setsin6_scope_id(const val : u_long);
begin
SOCKADDR_IN6(GetRecordPtr^).sin6_scope_id := val;
end;
function __SOCKADDR_IN6__Wrapper.getsin6_scope_id : u_long;
begin
result := SOCKADDR_IN6(GetRecordPtr^).sin6_scope_id;
end;
function __sockaddr_in6_old__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __sockaddr_in6_old__Wrapper.setsin6_family(const val : SmallInt);
begin
sockaddr_in6_old(GetRecordPtr^).sin6_family := val;
end;
function __sockaddr_in6_old__Wrapper.getsin6_family : SmallInt;
begin
result := sockaddr_in6_old(GetRecordPtr^).sin6_family;
end;
procedure __sockaddr_in6_old__Wrapper.setsin6_port(const val : u_short);
begin
sockaddr_in6_old(GetRecordPtr^).sin6_port := val;
end;
function __sockaddr_in6_old__Wrapper.getsin6_port : u_short;
begin
result := sockaddr_in6_old(GetRecordPtr^).sin6_port;
end;
procedure __sockaddr_in6_old__Wrapper.setsin6_flowinfo(const val : u_long);
begin
sockaddr_in6_old(GetRecordPtr^).sin6_flowinfo := val;
end;
function __sockaddr_in6_old__Wrapper.getsin6_flowinfo : u_long;
begin
result := sockaddr_in6_old(GetRecordPtr^).sin6_flowinfo;
end;
function __SOCKADDR_IPX__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __SOCKADDR_IPX__Wrapper.setsa_family(const val : u_short);
begin
SOCKADDR_IPX(GetRecordPtr^).sa_family := val;
end;
function __SOCKADDR_IPX__Wrapper.getsa_family : u_short;
begin
result := SOCKADDR_IPX(GetRecordPtr^).sa_family;
end;
procedure __SOCKADDR_IPX__Wrapper.setsa_socket(const val : u_short);
begin
SOCKADDR_IPX(GetRecordPtr^).sa_socket := val;
end;
function __SOCKADDR_IPX__Wrapper.getsa_socket : u_short;
begin
result := SOCKADDR_IPX(GetRecordPtr^).sa_socket;
end;
function __SOCKADDR_NB__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __SOCKADDR_NB__Wrapper.setsnb_family(const val : SmallInt);
begin
SOCKADDR_NB(GetRecordPtr^).snb_family := val;
end;
function __SOCKADDR_NB__Wrapper.getsnb_family : SmallInt;
begin
result := SOCKADDR_NB(GetRecordPtr^).snb_family;
end;
procedure __SOCKADDR_NB__Wrapper.setsnb_type(const val : u_short);
begin
SOCKADDR_NB(GetRecordPtr^).snb_type := val;
end;
function __SOCKADDR_NB__Wrapper.getsnb_type : u_short;
begin
result := SOCKADDR_NB(GetRecordPtr^).snb_type;
end;
function __SOCKET_ADDRESS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __SOCKET_ADDRESS__Wrapper.setiSockaddrLength(const val : Integer);
begin
SOCKET_ADDRESS(GetRecordPtr^).iSockaddrLength := val;
end;
function __SOCKET_ADDRESS__Wrapper.getiSockaddrLength : Integer;
begin
result := SOCKET_ADDRESS(GetRecordPtr^).iSockaddrLength;
end;
function __SOCKET_ADDRESS_LIST__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __SOCKET_ADDRESS_LIST__Wrapper.setiAddressCount(const val : Integer);
begin
SOCKET_ADDRESS_LIST(GetRecordPtr^).iAddressCount := val;
end;
function __SOCKET_ADDRESS_LIST__Wrapper.getiAddressCount : Integer;
begin
result := SOCKET_ADDRESS_LIST(GetRecordPtr^).iAddressCount;
end;
function __sockproto__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __sockproto__Wrapper.setsp_family(const val : u_short);
begin
sockproto(GetRecordPtr^).sp_family := val;
end;
function __sockproto__Wrapper.getsp_family : u_short;
begin
result := sockproto(GetRecordPtr^).sp_family;
end;
procedure __sockproto__Wrapper.setsp_protocol(const val : u_short);
begin
sockproto(GetRecordPtr^).sp_protocol := val;
end;
function __sockproto__Wrapper.getsp_protocol : u_short;
begin
result := sockproto(GetRecordPtr^).sp_protocol;
end;
function __SunB__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __SunB__Wrapper.sets_b1(const val : u_char);
begin
SunB(GetRecordPtr^).s_b1 := val;
end;
function __SunB__Wrapper.gets_b1 : u_char;
begin
result := SunB(GetRecordPtr^).s_b1;
end;
procedure __SunB__Wrapper.sets_b2(const val : u_char);
begin
SunB(GetRecordPtr^).s_b2 := val;
end;
function __SunB__Wrapper.gets_b2 : u_char;
begin
result := SunB(GetRecordPtr^).s_b2;
end;
procedure __SunB__Wrapper.sets_b3(const val : u_char);
begin
SunB(GetRecordPtr^).s_b3 := val;
end;
function __SunB__Wrapper.gets_b3 : u_char;
begin
result := SunB(GetRecordPtr^).s_b3;
end;
procedure __SunB__Wrapper.sets_b4(const val : u_char);
begin
SunB(GetRecordPtr^).s_b4 := val;
end;
function __SunB__Wrapper.gets_b4 : u_char;
begin
result := SunB(GetRecordPtr^).s_b4;
end;
function __SunW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __SunW__Wrapper.sets_w1(const val : u_short);
begin
SunW(GetRecordPtr^).s_w1 := val;
end;
function __SunW__Wrapper.gets_w1 : u_short;
begin
result := SunW(GetRecordPtr^).s_w1;
end;
procedure __SunW__Wrapper.sets_w2(const val : u_short);
begin
SunW(GetRecordPtr^).s_w2 := val;
end;
function __SunW__Wrapper.gets_w2 : u_short;
begin
result := SunW(GetRecordPtr^).s_w2;
end;
function __TAddrInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TAddrInfo__Wrapper.setai_flags(const val : Integer);
begin
TAddrInfo(GetRecordPtr^).ai_flags := val;
end;
function __TAddrInfo__Wrapper.getai_flags : Integer;
begin
result := TAddrInfo(GetRecordPtr^).ai_flags;
end;
procedure __TAddrInfo__Wrapper.setai_family(const val : Integer);
begin
TAddrInfo(GetRecordPtr^).ai_family := val;
end;
function __TAddrInfo__Wrapper.getai_family : Integer;
begin
result := TAddrInfo(GetRecordPtr^).ai_family;
end;
procedure __TAddrInfo__Wrapper.setai_socktype(const val : Integer);
begin
TAddrInfo(GetRecordPtr^).ai_socktype := val;
end;
function __TAddrInfo__Wrapper.getai_socktype : Integer;
begin
result := TAddrInfo(GetRecordPtr^).ai_socktype;
end;
procedure __TAddrInfo__Wrapper.setai_protocol(const val : Integer);
begin
TAddrInfo(GetRecordPtr^).ai_protocol := val;
end;
function __TAddrInfo__Wrapper.getai_protocol : Integer;
begin
result := TAddrInfo(GetRecordPtr^).ai_protocol;
end;
procedure __TAddrInfo__Wrapper.setai_addrlen(const val : ULONG);
begin
TAddrInfo(GetRecordPtr^).ai_addrlen := val;
end;
function __TAddrInfo__Wrapper.getai_addrlen : ULONG;
begin
result := TAddrInfo(GetRecordPtr^).ai_addrlen;
end;
function __TAFProtocols__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TAFProtocols__Wrapper.setiAddressFamily(const val : Integer);
begin
TAFProtocols(GetRecordPtr^).iAddressFamily := val;
end;
function __TAFProtocols__Wrapper.getiAddressFamily : Integer;
begin
result := TAFProtocols(GetRecordPtr^).iAddressFamily;
end;
procedure __TAFProtocols__Wrapper.setiProtocol(const val : Integer);
begin
TAFProtocols(GetRecordPtr^).iProtocol := val;
end;
function __TAFProtocols__Wrapper.getiProtocol : Integer;
begin
result := TAFProtocols(GetRecordPtr^).iProtocol;
end;
function __TBLOB__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TBLOB__Wrapper.setcbSize(const val : ULONG);
begin
TBLOB(GetRecordPtr^).cbSize := val;
end;
function __TBLOB__Wrapper.getcbSize : ULONG;
begin
result := TBLOB(GetRecordPtr^).cbSize;
end;
function __TCSAddr_Info__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCSAddr_Info__Wrapper.setiSocketType(const val : Integer);
begin
TCSAddr_Info(GetRecordPtr^).iSocketType := val;
end;
function __TCSAddr_Info__Wrapper.getiSocketType : Integer;
begin
result := TCSAddr_Info(GetRecordPtr^).iSocketType;
end;
procedure __TCSAddr_Info__Wrapper.setiProtocol(const val : Integer);
begin
TCSAddr_Info(GetRecordPtr^).iProtocol := val;
end;
function __TCSAddr_Info__Wrapper.getiProtocol : Integer;
begin
result := TCSAddr_Info(GetRecordPtr^).iProtocol;
end;
function __TFDSet__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TFDSet__Wrapper.setfd_count(const val : u_int);
begin
TFDSet(GetRecordPtr^).fd_count := val;
end;
function __TFDSet__Wrapper.getfd_count : u_int;
begin
result := TFDSet(GetRecordPtr^).fd_count;
end;
function __TFlowSpec__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TFlowSpec__Wrapper.setTokenRate(const val : Longint);
begin
TFlowSpec(GetRecordPtr^).TokenRate := val;
end;
function __TFlowSpec__Wrapper.getTokenRate : Longint;
begin
result := TFlowSpec(GetRecordPtr^).TokenRate;
end;
procedure __TFlowSpec__Wrapper.setTokenBucketSize(const val : Longint);
begin
TFlowSpec(GetRecordPtr^).TokenBucketSize := val;
end;
function __TFlowSpec__Wrapper.getTokenBucketSize : Longint;
begin
result := TFlowSpec(GetRecordPtr^).TokenBucketSize;
end;
procedure __TFlowSpec__Wrapper.setPeakBandwidth(const val : Longint);
begin
TFlowSpec(GetRecordPtr^).PeakBandwidth := val;
end;
function __TFlowSpec__Wrapper.getPeakBandwidth : Longint;
begin
result := TFlowSpec(GetRecordPtr^).PeakBandwidth;
end;
procedure __TFlowSpec__Wrapper.setLatency(const val : Longint);
begin
TFlowSpec(GetRecordPtr^).Latency := val;
end;
function __TFlowSpec__Wrapper.getLatency : Longint;
begin
result := TFlowSpec(GetRecordPtr^).Latency;
end;
procedure __TFlowSpec__Wrapper.setDelayVariation(const val : Longint);
begin
TFlowSpec(GetRecordPtr^).DelayVariation := val;
end;
function __TFlowSpec__Wrapper.getDelayVariation : Longint;
begin
result := TFlowSpec(GetRecordPtr^).DelayVariation;
end;
procedure __TFlowSpec__Wrapper.setSERVICETYPE(const val : TServiceType);
begin
TFlowSpec(GetRecordPtr^).SERVICETYPE := val;
end;
function __TFlowSpec__Wrapper.getSERVICETYPE : TServiceType;
begin
result := TFlowSpec(GetRecordPtr^).SERVICETYPE;
end;
procedure __TFlowSpec__Wrapper.setMaxSduSize(const val : Longint);
begin
TFlowSpec(GetRecordPtr^).MaxSduSize := val;
end;
function __TFlowSpec__Wrapper.getMaxSduSize : Longint;
begin
result := TFlowSpec(GetRecordPtr^).MaxSduSize;
end;
procedure __TFlowSpec__Wrapper.setMinimumPolicedSize(const val : Longint);
begin
TFlowSpec(GetRecordPtr^).MinimumPolicedSize := val;
end;
function __TFlowSpec__Wrapper.getMinimumPolicedSize : Longint;
begin
result := TFlowSpec(GetRecordPtr^).MinimumPolicedSize;
end;
function __THostEnt__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __THostEnt__Wrapper.seth_addrtype(const val : SmallInt);
begin
THostEnt(GetRecordPtr^).h_addrtype := val;
end;
function __THostEnt__Wrapper.geth_addrtype : SmallInt;
begin
result := THostEnt(GetRecordPtr^).h_addrtype;
end;
procedure __THostEnt__Wrapper.seth_length(const val : SmallInt);
begin
THostEnt(GetRecordPtr^).h_length := val;
end;
function __THostEnt__Wrapper.geth_length : SmallInt;
begin
result := THostEnt(GetRecordPtr^).h_length;
end;
function __timeval__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __timeval__Wrapper.settv_sec(const val : Longint);
begin
timeval(GetRecordPtr^).tv_sec := val;
end;
function __timeval__Wrapper.gettv_sec : Longint;
begin
result := timeval(GetRecordPtr^).tv_sec;
end;
procedure __timeval__Wrapper.settv_usec(const val : Longint);
begin
timeval(GetRecordPtr^).tv_usec := val;
end;
function __timeval__Wrapper.gettv_usec : Longint;
begin
result := timeval(GetRecordPtr^).tv_usec;
end;
function __TIn6Addr__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TIn6PktInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIn6PktInfo__Wrapper.setipi6_ifindex(const val : UINT);
begin
TIn6PktInfo(GetRecordPtr^).ipi6_ifindex := val;
end;
function __TIn6PktInfo__Wrapper.getipi6_ifindex : UINT;
begin
result := TIn6PktInfo(GetRecordPtr^).ipi6_ifindex;
end;
function __TInAddr__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TInAddr__Wrapper.setS_addr(const val : u_long);
begin
TInAddr(GetRecordPtr^).S_addr := val;
end;
function __TInAddr__Wrapper.getS_addr : u_long;
begin
result := TInAddr(GetRecordPtr^).S_addr;
end;
function __TInPktInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TInPktInfo__Wrapper.setipi_ifindex(const val : UINT);
begin
TInPktInfo(GetRecordPtr^).ipi_ifindex := val;
end;
function __TInPktInfo__Wrapper.getipi_ifindex : UINT;
begin
result := TInPktInfo(GetRecordPtr^).ipi_ifindex;
end;
function __TInterface_Info__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TInterface_Info__Wrapper.setiiFlags(const val : u_long);
begin
TInterface_Info(GetRecordPtr^).iiFlags := val;
end;
function __TInterface_Info__Wrapper.getiiFlags : u_long;
begin
result := TInterface_Info(GetRecordPtr^).iiFlags;
end;
function __TInterface_Info_Ex__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TInterface_Info_Ex__Wrapper.setiiFlags(const val : u_long);
begin
TInterface_Info_Ex(GetRecordPtr^).iiFlags := val;
end;
function __TInterface_Info_Ex__Wrapper.getiiFlags : u_long;
begin
result := TInterface_Info_Ex(GetRecordPtr^).iiFlags;
end;
function __TIPXAddressData__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIPXAddressData__Wrapper.setadapternum(const val : Integer);
begin
TIPXAddressData(GetRecordPtr^).adapternum := val;
end;
function __TIPXAddressData__Wrapper.getadapternum : Integer;
begin
result := TIPXAddressData(GetRecordPtr^).adapternum;
end;
procedure __TIPXAddressData__Wrapper.setwan(const val : Boolean);
begin
TIPXAddressData(GetRecordPtr^).wan := val;
end;
function __TIPXAddressData__Wrapper.getwan : Boolean;
begin
result := TIPXAddressData(GetRecordPtr^).wan;
end;
procedure __TIPXAddressData__Wrapper.setstatus(const val : Boolean);
begin
TIPXAddressData(GetRecordPtr^).status := val;
end;
function __TIPXAddressData__Wrapper.getstatus : Boolean;
begin
result := TIPXAddressData(GetRecordPtr^).status;
end;
procedure __TIPXAddressData__Wrapper.setmaxpkt(const val : Integer);
begin
TIPXAddressData(GetRecordPtr^).maxpkt := val;
end;
function __TIPXAddressData__Wrapper.getmaxpkt : Integer;
begin
result := TIPXAddressData(GetRecordPtr^).maxpkt;
end;
procedure __TIPXAddressData__Wrapper.setlinkspeed(const val : ULONG);
begin
TIPXAddressData(GetRecordPtr^).linkspeed := val;
end;
function __TIPXAddressData__Wrapper.getlinkspeed : ULONG;
begin
result := TIPXAddressData(GetRecordPtr^).linkspeed;
end;
function __TIPXNetNumData__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIPXNetNumData__Wrapper.sethopcount(const val : Word);
begin
TIPXNetNumData(GetRecordPtr^).hopcount := val;
end;
function __TIPXNetNumData__Wrapper.gethopcount : Word;
begin
result := TIPXNetNumData(GetRecordPtr^).hopcount;
end;
procedure __TIPXNetNumData__Wrapper.setnetdelay(const val : Word);
begin
TIPXNetNumData(GetRecordPtr^).netdelay := val;
end;
function __TIPXNetNumData__Wrapper.getnetdelay : Word;
begin
result := TIPXNetNumData(GetRecordPtr^).netdelay;
end;
procedure __TIPXNetNumData__Wrapper.setcardnum(const val : Integer);
begin
TIPXNetNumData(GetRecordPtr^).cardnum := val;
end;
function __TIPXNetNumData__Wrapper.getcardnum : Integer;
begin
result := TIPXNetNumData(GetRecordPtr^).cardnum;
end;
function __TIPXSPXConnStatusData__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIPXSPXConnStatusData__Wrapper.setConnectionState(const val : Byte);
begin
TIPXSPXConnStatusData(GetRecordPtr^).ConnectionState := val;
end;
function __TIPXSPXConnStatusData__Wrapper.getConnectionState : Byte;
begin
result := TIPXSPXConnStatusData(GetRecordPtr^).ConnectionState;
end;
procedure __TIPXSPXConnStatusData__Wrapper.setWatchDogActive(const val : Byte);
begin
TIPXSPXConnStatusData(GetRecordPtr^).WatchDogActive := val;
end;
function __TIPXSPXConnStatusData__Wrapper.getWatchDogActive : Byte;
begin
result := TIPXSPXConnStatusData(GetRecordPtr^).WatchDogActive;
end;
procedure __TIPXSPXConnStatusData__Wrapper.setLocalConnectionId(const val : Word);
begin
TIPXSPXConnStatusData(GetRecordPtr^).LocalConnectionId := val;
end;
function __TIPXSPXConnStatusData__Wrapper.getLocalConnectionId : Word;
begin
result := TIPXSPXConnStatusData(GetRecordPtr^).LocalConnectionId;
end;
procedure __TIPXSPXConnStatusData__Wrapper.setRemoteConnectionId(const val : Word);
begin
TIPXSPXConnStatusData(GetRecordPtr^).RemoteConnectionId := val;
end;
function __TIPXSPXConnStatusData__Wrapper.getRemoteConnectionId : Word;
begin
result := TIPXSPXConnStatusData(GetRecordPtr^).RemoteConnectionId;
end;
procedure __TIPXSPXConnStatusData__Wrapper.setLocalSequenceNumber(const val : Word);
begin
TIPXSPXConnStatusData(GetRecordPtr^).LocalSequenceNumber := val;
end;
function __TIPXSPXConnStatusData__Wrapper.getLocalSequenceNumber : Word;
begin
result := TIPXSPXConnStatusData(GetRecordPtr^).LocalSequenceNumber;
end;
procedure __TIPXSPXConnStatusData__Wrapper.setLocalAckNumber(const val : Word);
begin
TIPXSPXConnStatusData(GetRecordPtr^).LocalAckNumber := val;
end;
function __TIPXSPXConnStatusData__Wrapper.getLocalAckNumber : Word;
begin
result := TIPXSPXConnStatusData(GetRecordPtr^).LocalAckNumber;
end;
procedure __TIPXSPXConnStatusData__Wrapper.setLocalAllocNumber(const val : Word);
begin
TIPXSPXConnStatusData(GetRecordPtr^).LocalAllocNumber := val;
end;
function __TIPXSPXConnStatusData__Wrapper.getLocalAllocNumber : Word;
begin
result := TIPXSPXConnStatusData(GetRecordPtr^).LocalAllocNumber;
end;
procedure __TIPXSPXConnStatusData__Wrapper.setRemoteAckNumber(const val : Word);
begin
TIPXSPXConnStatusData(GetRecordPtr^).RemoteAckNumber := val;
end;
function __TIPXSPXConnStatusData__Wrapper.getRemoteAckNumber : Word;
begin
result := TIPXSPXConnStatusData(GetRecordPtr^).RemoteAckNumber;
end;
procedure __TIPXSPXConnStatusData__Wrapper.setRemoteAllocNumber(const val : Word);
begin
TIPXSPXConnStatusData(GetRecordPtr^).RemoteAllocNumber := val;
end;
function __TIPXSPXConnStatusData__Wrapper.getRemoteAllocNumber : Word;
begin
result := TIPXSPXConnStatusData(GetRecordPtr^).RemoteAllocNumber;
end;
procedure __TIPXSPXConnStatusData__Wrapper.setLocalSocket(const val : Word);
begin
TIPXSPXConnStatusData(GetRecordPtr^).LocalSocket := val;
end;
function __TIPXSPXConnStatusData__Wrapper.getLocalSocket : Word;
begin
result := TIPXSPXConnStatusData(GetRecordPtr^).LocalSocket;
end;
procedure __TIPXSPXConnStatusData__Wrapper.setRemoteSocket(const val : Word);
begin
TIPXSPXConnStatusData(GetRecordPtr^).RemoteSocket := val;
end;
function __TIPXSPXConnStatusData__Wrapper.getRemoteSocket : Word;
begin
result := TIPXSPXConnStatusData(GetRecordPtr^).RemoteSocket;
end;
procedure __TIPXSPXConnStatusData__Wrapper.setRetransmissionCount(const val : Word);
begin
TIPXSPXConnStatusData(GetRecordPtr^).RetransmissionCount := val;
end;
function __TIPXSPXConnStatusData__Wrapper.getRetransmissionCount : Word;
begin
result := TIPXSPXConnStatusData(GetRecordPtr^).RetransmissionCount;
end;
procedure __TIPXSPXConnStatusData__Wrapper.setEstimatedRoundTripDelay(const val : Word);
begin
TIPXSPXConnStatusData(GetRecordPtr^).EstimatedRoundTripDelay := val;
end;
function __TIPXSPXConnStatusData__Wrapper.getEstimatedRoundTripDelay : Word;
begin
result := TIPXSPXConnStatusData(GetRecordPtr^).EstimatedRoundTripDelay;
end;
procedure __TIPXSPXConnStatusData__Wrapper.setRetransmittedPackets(const val : Word);
begin
TIPXSPXConnStatusData(GetRecordPtr^).RetransmittedPackets := val;
end;
function __TIPXSPXConnStatusData__Wrapper.getRetransmittedPackets : Word;
begin
result := TIPXSPXConnStatusData(GetRecordPtr^).RetransmittedPackets;
end;
procedure __TIPXSPXConnStatusData__Wrapper.setSuppressedPacket(const val : Word);
begin
TIPXSPXConnStatusData(GetRecordPtr^).SuppressedPacket := val;
end;
function __TIPXSPXConnStatusData__Wrapper.getSuppressedPacket : Word;
begin
result := TIPXSPXConnStatusData(GetRecordPtr^).SuppressedPacket;
end;
function __TLinger__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TLinger__Wrapper.setl_onoff(const val : u_short);
begin
TLinger(GetRecordPtr^).l_onoff := val;
end;
function __TLinger__Wrapper.getl_onoff : u_short;
begin
result := TLinger(GetRecordPtr^).l_onoff;
end;
procedure __TLinger__Wrapper.setl_linger(const val : u_short);
begin
TLinger(GetRecordPtr^).l_linger := val;
end;
function __TLinger__Wrapper.getl_linger : u_short;
begin
result := TLinger(GetRecordPtr^).l_linger;
end;
function __TNetEnt__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNetEnt__Wrapper.setn_addrtype(const val : SmallInt);
begin
TNetEnt(GetRecordPtr^).n_addrtype := val;
end;
function __TNetEnt__Wrapper.getn_addrtype : SmallInt;
begin
result := TNetEnt(GetRecordPtr^).n_addrtype;
end;
procedure __TNetEnt__Wrapper.setn_net(const val : u_long);
begin
TNetEnt(GetRecordPtr^).n_net := val;
end;
function __TNetEnt__Wrapper.getn_net : u_long;
begin
result := TNetEnt(GetRecordPtr^).n_net;
end;
function __TProtoEnt__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TProtoEnt__Wrapper.setp_proto(const val : SmallInt);
begin
TProtoEnt(GetRecordPtr^).p_proto := val;
end;
function __TProtoEnt__Wrapper.getp_proto : SmallInt;
begin
result := TProtoEnt(GetRecordPtr^).p_proto;
end;
function __TQualityOfService__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TRANSMIT_FILE_BUFFERS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRANSMIT_FILE_BUFFERS__Wrapper.setHeadLength(const val : DWORD);
begin
TRANSMIT_FILE_BUFFERS(GetRecordPtr^).HeadLength := val;
end;
function __TRANSMIT_FILE_BUFFERS__Wrapper.getHeadLength : DWORD;
begin
result := TRANSMIT_FILE_BUFFERS(GetRecordPtr^).HeadLength;
end;
procedure __TRANSMIT_FILE_BUFFERS__Wrapper.setTailLength(const val : DWORD);
begin
TRANSMIT_FILE_BUFFERS(GetRecordPtr^).TailLength := val;
end;
function __TRANSMIT_FILE_BUFFERS__Wrapper.getTailLength : DWORD;
begin
result := TRANSMIT_FILE_BUFFERS(GetRecordPtr^).TailLength;
end;
function __TServEnt__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TServEnt__Wrapper.sets_port(const val : SmallInt);
begin
TServEnt(GetRecordPtr^).s_port := val;
end;
function __TServEnt__Wrapper.gets_port : SmallInt;
begin
result := TServEnt(GetRecordPtr^).s_port;
end;
function __TSockAddr__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSockAddr__Wrapper.setsin_family(const val : u_short);
begin
TSockAddr(GetRecordPtr^).sin_family := val;
end;
function __TSockAddr__Wrapper.getsin_family : u_short;
begin
result := TSockAddr(GetRecordPtr^).sin_family;
end;
procedure __TSockAddr__Wrapper.setsin_port(const val : u_short);
begin
TSockAddr(GetRecordPtr^).sin_port := val;
end;
function __TSockAddr__Wrapper.getsin_port : u_short;
begin
result := TSockAddr(GetRecordPtr^).sin_port;
end;
procedure __TSockAddr__Wrapper.setsa_family(const val : u_short);
begin
TSockAddr(GetRecordPtr^).sa_family := val;
end;
function __TSockAddr__Wrapper.getsa_family : u_short;
begin
result := TSockAddr(GetRecordPtr^).sa_family;
end;
function __TSockAddr_IPX__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSockAddr_IPX__Wrapper.setsa_family(const val : u_short);
begin
TSockAddr_IPX(GetRecordPtr^).sa_family := val;
end;
function __TSockAddr_IPX__Wrapper.getsa_family : u_short;
begin
result := TSockAddr_IPX(GetRecordPtr^).sa_family;
end;
procedure __TSockAddr_IPX__Wrapper.setsa_socket(const val : u_short);
begin
TSockAddr_IPX(GetRecordPtr^).sa_socket := val;
end;
function __TSockAddr_IPX__Wrapper.getsa_socket : u_short;
begin
result := TSockAddr_IPX(GetRecordPtr^).sa_socket;
end;
function __TSockAddrATM__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSockAddrATM__Wrapper.setsatm_family(const val : u_short);
begin
TSockAddrATM(GetRecordPtr^).satm_family := val;
end;
function __TSockAddrATM__Wrapper.getsatm_family : u_short;
begin
result := TSockAddrATM(GetRecordPtr^).satm_family;
end;
function __TSockAddrGen__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TSockAddrIn__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSockAddrIn__Wrapper.setsin_family(const val : u_short);
begin
TSockAddrIn(GetRecordPtr^).sin_family := val;
end;
function __TSockAddrIn__Wrapper.getsin_family : u_short;
begin
result := TSockAddrIn(GetRecordPtr^).sin_family;
end;
procedure __TSockAddrIn__Wrapper.setsin_port(const val : u_short);
begin
TSockAddrIn(GetRecordPtr^).sin_port := val;
end;
function __TSockAddrIn__Wrapper.getsin_port : u_short;
begin
result := TSockAddrIn(GetRecordPtr^).sin_port;
end;
procedure __TSockAddrIn__Wrapper.setsa_family(const val : u_short);
begin
TSockAddrIn(GetRecordPtr^).sa_family := val;
end;
function __TSockAddrIn__Wrapper.getsa_family : u_short;
begin
result := TSockAddrIn(GetRecordPtr^).sa_family;
end;
function __TSockAddrIn6__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSockAddrIn6__Wrapper.setsin6_family(const val : SmallInt);
begin
TSockAddrIn6(GetRecordPtr^).sin6_family := val;
end;
function __TSockAddrIn6__Wrapper.getsin6_family : SmallInt;
begin
result := TSockAddrIn6(GetRecordPtr^).sin6_family;
end;
procedure __TSockAddrIn6__Wrapper.setsin6_port(const val : u_short);
begin
TSockAddrIn6(GetRecordPtr^).sin6_port := val;
end;
function __TSockAddrIn6__Wrapper.getsin6_port : u_short;
begin
result := TSockAddrIn6(GetRecordPtr^).sin6_port;
end;
procedure __TSockAddrIn6__Wrapper.setsin6_flowinfo(const val : u_long);
begin
TSockAddrIn6(GetRecordPtr^).sin6_flowinfo := val;
end;
function __TSockAddrIn6__Wrapper.getsin6_flowinfo : u_long;
begin
result := TSockAddrIn6(GetRecordPtr^).sin6_flowinfo;
end;
procedure __TSockAddrIn6__Wrapper.setsin6_scope_id(const val : u_long);
begin
TSockAddrIn6(GetRecordPtr^).sin6_scope_id := val;
end;
function __TSockAddrIn6__Wrapper.getsin6_scope_id : u_long;
begin
result := TSockAddrIn6(GetRecordPtr^).sin6_scope_id;
end;
function __TSockAddrIPX__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSockAddrIPX__Wrapper.setsa_family(const val : u_short);
begin
TSockAddrIPX(GetRecordPtr^).sa_family := val;
end;
function __TSockAddrIPX__Wrapper.getsa_family : u_short;
begin
result := TSockAddrIPX(GetRecordPtr^).sa_family;
end;
procedure __TSockAddrIPX__Wrapper.setsa_socket(const val : u_short);
begin
TSockAddrIPX(GetRecordPtr^).sa_socket := val;
end;
function __TSockAddrIPX__Wrapper.getsa_socket : u_short;
begin
result := TSockAddrIPX(GetRecordPtr^).sa_socket;
end;
function __TSockAddrNB__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSockAddrNB__Wrapper.setsnb_family(const val : SmallInt);
begin
TSockAddrNB(GetRecordPtr^).snb_family := val;
end;
function __TSockAddrNB__Wrapper.getsnb_family : SmallInt;
begin
result := TSockAddrNB(GetRecordPtr^).snb_family;
end;
procedure __TSockAddrNB__Wrapper.setsnb_type(const val : u_short);
begin
TSockAddrNB(GetRecordPtr^).snb_type := val;
end;
function __TSockAddrNB__Wrapper.getsnb_type : u_short;
begin
result := TSockAddrNB(GetRecordPtr^).snb_type;
end;
function __TSocket_Address__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSocket_Address__Wrapper.setiSockaddrLength(const val : Integer);
begin
TSocket_Address(GetRecordPtr^).iSockaddrLength := val;
end;
function __TSocket_Address__Wrapper.getiSockaddrLength : Integer;
begin
result := TSocket_Address(GetRecordPtr^).iSockaddrLength;
end;
function __TSocket_Address_List__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSocket_Address_List__Wrapper.setiAddressCount(const val : Integer);
begin
TSocket_Address_List(GetRecordPtr^).iAddressCount := val;
end;
function __TSocket_Address_List__Wrapper.getiAddressCount : Integer;
begin
result := TSocket_Address_List(GetRecordPtr^).iAddressCount;
end;
function __TSockProto__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSockProto__Wrapper.setsp_family(const val : u_short);
begin
TSockProto(GetRecordPtr^).sp_family := val;
end;
function __TSockProto__Wrapper.getsp_family : u_short;
begin
result := TSockProto(GetRecordPtr^).sp_family;
end;
procedure __TSockProto__Wrapper.setsp_protocol(const val : u_short);
begin
TSockProto(GetRecordPtr^).sp_protocol := val;
end;
function __TSockProto__Wrapper.getsp_protocol : u_short;
begin
result := TSockProto(GetRecordPtr^).sp_protocol;
end;
function __TTimeVal__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTimeVal__Wrapper.settv_sec(const val : Longint);
begin
TTimeVal(GetRecordPtr^).tv_sec := val;
end;
function __TTimeVal__Wrapper.gettv_sec : Longint;
begin
result := TTimeVal(GetRecordPtr^).tv_sec;
end;
procedure __TTimeVal__Wrapper.settv_usec(const val : Longint);
begin
TTimeVal(GetRecordPtr^).tv_usec := val;
end;
function __TTimeVal__Wrapper.gettv_usec : Longint;
begin
result := TTimeVal(GetRecordPtr^).tv_usec;
end;
function __TTransmitFileBuffers__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTransmitFileBuffers__Wrapper.setHeadLength(const val : DWORD);
begin
TTransmitFileBuffers(GetRecordPtr^).HeadLength := val;
end;
function __TTransmitFileBuffers__Wrapper.getHeadLength : DWORD;
begin
result := TTransmitFileBuffers(GetRecordPtr^).HeadLength;
end;
procedure __TTransmitFileBuffers__Wrapper.setTailLength(const val : DWORD);
begin
TTransmitFileBuffers(GetRecordPtr^).TailLength := val;
end;
function __TTransmitFileBuffers__Wrapper.getTailLength : DWORD;
begin
result := TTransmitFileBuffers(GetRecordPtr^).TailLength;
end;
function __TWSABuf__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWSABuf__Wrapper.setlen(const val : u_long);
begin
TWSABuf(GetRecordPtr^).len := val;
end;
function __TWSABuf__Wrapper.getlen : u_long;
begin
result := TWSABuf(GetRecordPtr^).len;
end;
function __TWSAData__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWSAData__Wrapper.setwVersion(const val : Word);
begin
TWSAData(GetRecordPtr^).wVersion := val;
end;
function __TWSAData__Wrapper.getwVersion : Word;
begin
result := TWSAData(GetRecordPtr^).wVersion;
end;
procedure __TWSAData__Wrapper.setwHighVersion(const val : Word);
begin
TWSAData(GetRecordPtr^).wHighVersion := val;
end;
function __TWSAData__Wrapper.getwHighVersion : Word;
begin
result := TWSAData(GetRecordPtr^).wHighVersion;
end;
procedure __TWSAData__Wrapper.setiMaxSockets(const val : Word);
begin
TWSAData(GetRecordPtr^).iMaxSockets := val;
end;
function __TWSAData__Wrapper.getiMaxSockets : Word;
begin
result := TWSAData(GetRecordPtr^).iMaxSockets;
end;
procedure __TWSAData__Wrapper.setiMaxUdpDg(const val : Word);
begin
TWSAData(GetRecordPtr^).iMaxUdpDg := val;
end;
function __TWSAData__Wrapper.getiMaxUdpDg : Word;
begin
result := TWSAData(GetRecordPtr^).iMaxUdpDg;
end;
function __TWSANameSpace_Info__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWSANameSpace_Info__Wrapper.setdwNameSpace(const val : DWORD);
begin
TWSANameSpace_Info(GetRecordPtr^).dwNameSpace := val;
end;
function __TWSANameSpace_Info__Wrapper.getdwNameSpace : DWORD;
begin
result := TWSANameSpace_Info(GetRecordPtr^).dwNameSpace;
end;
procedure __TWSANameSpace_Info__Wrapper.setfActive(const val : DWORD);
begin
TWSANameSpace_Info(GetRecordPtr^).fActive := val;
end;
function __TWSANameSpace_Info__Wrapper.getfActive : DWORD;
begin
result := TWSANameSpace_Info(GetRecordPtr^).fActive;
end;
procedure __TWSANameSpace_Info__Wrapper.setdwVersion(const val : DWORD);
begin
TWSANameSpace_Info(GetRecordPtr^).dwVersion := val;
end;
function __TWSANameSpace_Info__Wrapper.getdwVersion : DWORD;
begin
result := TWSANameSpace_Info(GetRecordPtr^).dwVersion;
end;
function __TWSANameSpace_InfoA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWSANameSpace_InfoA__Wrapper.setdwNameSpace(const val : DWORD);
begin
TWSANameSpace_InfoA(GetRecordPtr^).dwNameSpace := val;
end;
function __TWSANameSpace_InfoA__Wrapper.getdwNameSpace : DWORD;
begin
result := TWSANameSpace_InfoA(GetRecordPtr^).dwNameSpace;
end;
procedure __TWSANameSpace_InfoA__Wrapper.setfActive(const val : DWORD);
begin
TWSANameSpace_InfoA(GetRecordPtr^).fActive := val;
end;
function __TWSANameSpace_InfoA__Wrapper.getfActive : DWORD;
begin
result := TWSANameSpace_InfoA(GetRecordPtr^).fActive;
end;
procedure __TWSANameSpace_InfoA__Wrapper.setdwVersion(const val : DWORD);
begin
TWSANameSpace_InfoA(GetRecordPtr^).dwVersion := val;
end;
function __TWSANameSpace_InfoA__Wrapper.getdwVersion : DWORD;
begin
result := TWSANameSpace_InfoA(GetRecordPtr^).dwVersion;
end;
function __TWSANameSpace_InfoW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWSANameSpace_InfoW__Wrapper.setdwNameSpace(const val : DWORD);
begin
TWSANameSpace_InfoW(GetRecordPtr^).dwNameSpace := val;
end;
function __TWSANameSpace_InfoW__Wrapper.getdwNameSpace : DWORD;
begin
result := TWSANameSpace_InfoW(GetRecordPtr^).dwNameSpace;
end;
procedure __TWSANameSpace_InfoW__Wrapper.setfActive(const val : DWORD);
begin
TWSANameSpace_InfoW(GetRecordPtr^).fActive := val;
end;
function __TWSANameSpace_InfoW__Wrapper.getfActive : DWORD;
begin
result := TWSANameSpace_InfoW(GetRecordPtr^).fActive;
end;
procedure __TWSANameSpace_InfoW__Wrapper.setdwVersion(const val : DWORD);
begin
TWSANameSpace_InfoW(GetRecordPtr^).dwVersion := val;
end;
function __TWSANameSpace_InfoW__Wrapper.getdwVersion : DWORD;
begin
result := TWSANameSpace_InfoW(GetRecordPtr^).dwVersion;
end;
function __TWSANetworkEvents__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWSANetworkEvents__Wrapper.setlNetworkEvents(const val : Longint);
begin
TWSANetworkEvents(GetRecordPtr^).lNetworkEvents := val;
end;
function __TWSANetworkEvents__Wrapper.getlNetworkEvents : Longint;
begin
result := TWSANetworkEvents(GetRecordPtr^).lNetworkEvents;
end;
function __TWSANSClassInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWSANSClassInfo__Wrapper.setdwNameSpace(const val : DWORD);
begin
TWSANSClassInfo(GetRecordPtr^).dwNameSpace := val;
end;
function __TWSANSClassInfo__Wrapper.getdwNameSpace : DWORD;
begin
result := TWSANSClassInfo(GetRecordPtr^).dwNameSpace;
end;
procedure __TWSANSClassInfo__Wrapper.setdwValueType(const val : DWORD);
begin
TWSANSClassInfo(GetRecordPtr^).dwValueType := val;
end;
function __TWSANSClassInfo__Wrapper.getdwValueType : DWORD;
begin
result := TWSANSClassInfo(GetRecordPtr^).dwValueType;
end;
procedure __TWSANSClassInfo__Wrapper.setdwValueSize(const val : DWORD);
begin
TWSANSClassInfo(GetRecordPtr^).dwValueSize := val;
end;
function __TWSANSClassInfo__Wrapper.getdwValueSize : DWORD;
begin
result := TWSANSClassInfo(GetRecordPtr^).dwValueSize;
end;
function __TWSANSClassInfoA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWSANSClassInfoA__Wrapper.setdwNameSpace(const val : DWORD);
begin
TWSANSClassInfoA(GetRecordPtr^).dwNameSpace := val;
end;
function __TWSANSClassInfoA__Wrapper.getdwNameSpace : DWORD;
begin
result := TWSANSClassInfoA(GetRecordPtr^).dwNameSpace;
end;
procedure __TWSANSClassInfoA__Wrapper.setdwValueType(const val : DWORD);
begin
TWSANSClassInfoA(GetRecordPtr^).dwValueType := val;
end;
function __TWSANSClassInfoA__Wrapper.getdwValueType : DWORD;
begin
result := TWSANSClassInfoA(GetRecordPtr^).dwValueType;
end;
procedure __TWSANSClassInfoA__Wrapper.setdwValueSize(const val : DWORD);
begin
TWSANSClassInfoA(GetRecordPtr^).dwValueSize := val;
end;
function __TWSANSClassInfoA__Wrapper.getdwValueSize : DWORD;
begin
result := TWSANSClassInfoA(GetRecordPtr^).dwValueSize;
end;
function __TWSANSClassInfoW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWSANSClassInfoW__Wrapper.setdwNameSpace(const val : DWORD);
begin
TWSANSClassInfoW(GetRecordPtr^).dwNameSpace := val;
end;
function __TWSANSClassInfoW__Wrapper.getdwNameSpace : DWORD;
begin
result := TWSANSClassInfoW(GetRecordPtr^).dwNameSpace;
end;
procedure __TWSANSClassInfoW__Wrapper.setdwValueType(const val : DWORD);
begin
TWSANSClassInfoW(GetRecordPtr^).dwValueType := val;
end;
function __TWSANSClassInfoW__Wrapper.getdwValueType : DWORD;
begin
result := TWSANSClassInfoW(GetRecordPtr^).dwValueType;
end;
procedure __TWSANSClassInfoW__Wrapper.setdwValueSize(const val : DWORD);
begin
TWSANSClassInfoW(GetRecordPtr^).dwValueSize := val;
end;
function __TWSANSClassInfoW__Wrapper.getdwValueSize : DWORD;
begin
result := TWSANSClassInfoW(GetRecordPtr^).dwValueSize;
end;
function __TWSAOverlapped__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWSAOverlapped__Wrapper.setInternal(const val : DWORD);
begin
TWSAOverlapped(GetRecordPtr^).Internal := val;
end;
function __TWSAOverlapped__Wrapper.getInternal : DWORD;
begin
result := TWSAOverlapped(GetRecordPtr^).Internal;
end;
procedure __TWSAOverlapped__Wrapper.setInternalHigh(const val : DWORD);
begin
TWSAOverlapped(GetRecordPtr^).InternalHigh := val;
end;
function __TWSAOverlapped__Wrapper.getInternalHigh : DWORD;
begin
result := TWSAOverlapped(GetRecordPtr^).InternalHigh;
end;
procedure __TWSAOverlapped__Wrapper.setOffset(const val : DWORD);
begin
TWSAOverlapped(GetRecordPtr^).Offset := val;
end;
function __TWSAOverlapped__Wrapper.getOffset : DWORD;
begin
result := TWSAOverlapped(GetRecordPtr^).Offset;
end;
procedure __TWSAOverlapped__Wrapper.setOffsetHigh(const val : DWORD);
begin
TWSAOverlapped(GetRecordPtr^).OffsetHigh := val;
end;
function __TWSAOverlapped__Wrapper.getOffsetHigh : DWORD;
begin
result := TWSAOverlapped(GetRecordPtr^).OffsetHigh;
end;
procedure __TWSAOverlapped__Wrapper.sethEvent(const val : THandle);
begin
TWSAOverlapped(GetRecordPtr^).hEvent := val;
end;
function __TWSAOverlapped__Wrapper.gethEvent : THandle;
begin
result := TWSAOverlapped(GetRecordPtr^).hEvent;
end;
function __TWSAProtocol_Info__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWSAProtocol_Info__Wrapper.setdwServiceFlags1(const val : DWORD);
begin
TWSAProtocol_Info(GetRecordPtr^).dwServiceFlags1 := val;
end;
function __TWSAProtocol_Info__Wrapper.getdwServiceFlags1 : DWORD;
begin
result := TWSAProtocol_Info(GetRecordPtr^).dwServiceFlags1;
end;
procedure __TWSAProtocol_Info__Wrapper.setdwServiceFlags2(const val : DWORD);
begin
TWSAProtocol_Info(GetRecordPtr^).dwServiceFlags2 := val;
end;
function __TWSAProtocol_Info__Wrapper.getdwServiceFlags2 : DWORD;
begin
result := TWSAProtocol_Info(GetRecordPtr^).dwServiceFlags2;
end;
procedure __TWSAProtocol_Info__Wrapper.setdwServiceFlags3(const val : DWORD);
begin
TWSAProtocol_Info(GetRecordPtr^).dwServiceFlags3 := val;
end;
function __TWSAProtocol_Info__Wrapper.getdwServiceFlags3 : DWORD;
begin
result := TWSAProtocol_Info(GetRecordPtr^).dwServiceFlags3;
end;
procedure __TWSAProtocol_Info__Wrapper.setdwServiceFlags4(const val : DWORD);
begin
TWSAProtocol_Info(GetRecordPtr^).dwServiceFlags4 := val;
end;
function __TWSAProtocol_Info__Wrapper.getdwServiceFlags4 : DWORD;
begin
result := TWSAProtocol_Info(GetRecordPtr^).dwServiceFlags4;
end;
procedure __TWSAProtocol_Info__Wrapper.setdwProviderFlags(const val : DWORD);
begin
TWSAProtocol_Info(GetRecordPtr^).dwProviderFlags := val;
end;
function __TWSAProtocol_Info__Wrapper.getdwProviderFlags : DWORD;
begin
result := TWSAProtocol_Info(GetRecordPtr^).dwProviderFlags;
end;
procedure __TWSAProtocol_Info__Wrapper.setdwCatalogEntryId(const val : DWORD);
begin
TWSAProtocol_Info(GetRecordPtr^).dwCatalogEntryId := val;
end;
function __TWSAProtocol_Info__Wrapper.getdwCatalogEntryId : DWORD;
begin
result := TWSAProtocol_Info(GetRecordPtr^).dwCatalogEntryId;
end;
procedure __TWSAProtocol_Info__Wrapper.setiVersion(const val : Integer);
begin
TWSAProtocol_Info(GetRecordPtr^).iVersion := val;
end;
function __TWSAProtocol_Info__Wrapper.getiVersion : Integer;
begin
result := TWSAProtocol_Info(GetRecordPtr^).iVersion;
end;
procedure __TWSAProtocol_Info__Wrapper.setiAddressFamily(const val : Integer);
begin
TWSAProtocol_Info(GetRecordPtr^).iAddressFamily := val;
end;
function __TWSAProtocol_Info__Wrapper.getiAddressFamily : Integer;
begin
result := TWSAProtocol_Info(GetRecordPtr^).iAddressFamily;
end;
procedure __TWSAProtocol_Info__Wrapper.setiMaxSockAddr(const val : Integer);
begin
TWSAProtocol_Info(GetRecordPtr^).iMaxSockAddr := val;
end;
function __TWSAProtocol_Info__Wrapper.getiMaxSockAddr : Integer;
begin
result := TWSAProtocol_Info(GetRecordPtr^).iMaxSockAddr;
end;
procedure __TWSAProtocol_Info__Wrapper.setiMinSockAddr(const val : Integer);
begin
TWSAProtocol_Info(GetRecordPtr^).iMinSockAddr := val;
end;
function __TWSAProtocol_Info__Wrapper.getiMinSockAddr : Integer;
begin
result := TWSAProtocol_Info(GetRecordPtr^).iMinSockAddr;
end;
procedure __TWSAProtocol_Info__Wrapper.setiSocketType(const val : Integer);
begin
TWSAProtocol_Info(GetRecordPtr^).iSocketType := val;
end;
function __TWSAProtocol_Info__Wrapper.getiSocketType : Integer;
begin
result := TWSAProtocol_Info(GetRecordPtr^).iSocketType;
end;
procedure __TWSAProtocol_Info__Wrapper.setiProtocol(const val : Integer);
begin
TWSAProtocol_Info(GetRecordPtr^).iProtocol := val;
end;
function __TWSAProtocol_Info__Wrapper.getiProtocol : Integer;
begin
result := TWSAProtocol_Info(GetRecordPtr^).iProtocol;
end;
procedure __TWSAProtocol_Info__Wrapper.setiProtocolMaxOffset(const val : Integer);
begin
TWSAProtocol_Info(GetRecordPtr^).iProtocolMaxOffset := val;
end;
function __TWSAProtocol_Info__Wrapper.getiProtocolMaxOffset : Integer;
begin
result := TWSAProtocol_Info(GetRecordPtr^).iProtocolMaxOffset;
end;
procedure __TWSAProtocol_Info__Wrapper.setiNetworkByteOrder(const val : Integer);
begin
TWSAProtocol_Info(GetRecordPtr^).iNetworkByteOrder := val;
end;
function __TWSAProtocol_Info__Wrapper.getiNetworkByteOrder : Integer;
begin
result := TWSAProtocol_Info(GetRecordPtr^).iNetworkByteOrder;
end;
procedure __TWSAProtocol_Info__Wrapper.setiSecurityScheme(const val : Integer);
begin
TWSAProtocol_Info(GetRecordPtr^).iSecurityScheme := val;
end;
function __TWSAProtocol_Info__Wrapper.getiSecurityScheme : Integer;
begin
result := TWSAProtocol_Info(GetRecordPtr^).iSecurityScheme;
end;
procedure __TWSAProtocol_Info__Wrapper.setdwMessageSize(const val : DWORD);
begin
TWSAProtocol_Info(GetRecordPtr^).dwMessageSize := val;
end;
function __TWSAProtocol_Info__Wrapper.getdwMessageSize : DWORD;
begin
result := TWSAProtocol_Info(GetRecordPtr^).dwMessageSize;
end;
procedure __TWSAProtocol_Info__Wrapper.setdwProviderReserved(const val : DWORD);
begin
TWSAProtocol_Info(GetRecordPtr^).dwProviderReserved := val;
end;
function __TWSAProtocol_Info__Wrapper.getdwProviderReserved : DWORD;
begin
result := TWSAProtocol_Info(GetRecordPtr^).dwProviderReserved;
end;
function __TWSAProtocol_InfoA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWSAProtocol_InfoA__Wrapper.setdwServiceFlags1(const val : DWORD);
begin
TWSAProtocol_InfoA(GetRecordPtr^).dwServiceFlags1 := val;
end;
function __TWSAProtocol_InfoA__Wrapper.getdwServiceFlags1 : DWORD;
begin
result := TWSAProtocol_InfoA(GetRecordPtr^).dwServiceFlags1;
end;
procedure __TWSAProtocol_InfoA__Wrapper.setdwServiceFlags2(const val : DWORD);
begin
TWSAProtocol_InfoA(GetRecordPtr^).dwServiceFlags2 := val;
end;
function __TWSAProtocol_InfoA__Wrapper.getdwServiceFlags2 : DWORD;
begin
result := TWSAProtocol_InfoA(GetRecordPtr^).dwServiceFlags2;
end;
procedure __TWSAProtocol_InfoA__Wrapper.setdwServiceFlags3(const val : DWORD);
begin
TWSAProtocol_InfoA(GetRecordPtr^).dwServiceFlags3 := val;
end;
function __TWSAProtocol_InfoA__Wrapper.getdwServiceFlags3 : DWORD;
begin
result := TWSAProtocol_InfoA(GetRecordPtr^).dwServiceFlags3;
end;
procedure __TWSAProtocol_InfoA__Wrapper.setdwServiceFlags4(const val : DWORD);
begin
TWSAProtocol_InfoA(GetRecordPtr^).dwServiceFlags4 := val;
end;
function __TWSAProtocol_InfoA__Wrapper.getdwServiceFlags4 : DWORD;
begin
result := TWSAProtocol_InfoA(GetRecordPtr^).dwServiceFlags4;
end;
procedure __TWSAProtocol_InfoA__Wrapper.setdwProviderFlags(const val : DWORD);
begin
TWSAProtocol_InfoA(GetRecordPtr^).dwProviderFlags := val;
end;
function __TWSAProtocol_InfoA__Wrapper.getdwProviderFlags : DWORD;
begin
result := TWSAProtocol_InfoA(GetRecordPtr^).dwProviderFlags;
end;
procedure __TWSAProtocol_InfoA__Wrapper.setdwCatalogEntryId(const val : DWORD);
begin
TWSAProtocol_InfoA(GetRecordPtr^).dwCatalogEntryId := val;
end;
function __TWSAProtocol_InfoA__Wrapper.getdwCatalogEntryId : DWORD;
begin
result := TWSAProtocol_InfoA(GetRecordPtr^).dwCatalogEntryId;
end;
procedure __TWSAProtocol_InfoA__Wrapper.setiVersion(const val : Integer);
begin
TWSAProtocol_InfoA(GetRecordPtr^).iVersion := val;
end;
function __TWSAProtocol_InfoA__Wrapper.getiVersion : Integer;
begin
result := TWSAProtocol_InfoA(GetRecordPtr^).iVersion;
end;
procedure __TWSAProtocol_InfoA__Wrapper.setiAddressFamily(const val : Integer);
begin
TWSAProtocol_InfoA(GetRecordPtr^).iAddressFamily := val;
end;
function __TWSAProtocol_InfoA__Wrapper.getiAddressFamily : Integer;
begin
result := TWSAProtocol_InfoA(GetRecordPtr^).iAddressFamily;
end;
procedure __TWSAProtocol_InfoA__Wrapper.setiMaxSockAddr(const val : Integer);
begin
TWSAProtocol_InfoA(GetRecordPtr^).iMaxSockAddr := val;
end;
function __TWSAProtocol_InfoA__Wrapper.getiMaxSockAddr : Integer;
begin
result := TWSAProtocol_InfoA(GetRecordPtr^).iMaxSockAddr;
end;
procedure __TWSAProtocol_InfoA__Wrapper.setiMinSockAddr(const val : Integer);
begin
TWSAProtocol_InfoA(GetRecordPtr^).iMinSockAddr := val;
end;
function __TWSAProtocol_InfoA__Wrapper.getiMinSockAddr : Integer;
begin
result := TWSAProtocol_InfoA(GetRecordPtr^).iMinSockAddr;
end;
procedure __TWSAProtocol_InfoA__Wrapper.setiSocketType(const val : Integer);
begin
TWSAProtocol_InfoA(GetRecordPtr^).iSocketType := val;
end;
function __TWSAProtocol_InfoA__Wrapper.getiSocketType : Integer;
begin
result := TWSAProtocol_InfoA(GetRecordPtr^).iSocketType;
end;
procedure __TWSAProtocol_InfoA__Wrapper.setiProtocol(const val : Integer);
begin
TWSAProtocol_InfoA(GetRecordPtr^).iProtocol := val;
end;
function __TWSAProtocol_InfoA__Wrapper.getiProtocol : Integer;
begin
result := TWSAProtocol_InfoA(GetRecordPtr^).iProtocol;
end;
procedure __TWSAProtocol_InfoA__Wrapper.setiProtocolMaxOffset(const val : Integer);
begin
TWSAProtocol_InfoA(GetRecordPtr^).iProtocolMaxOffset := val;
end;
function __TWSAProtocol_InfoA__Wrapper.getiProtocolMaxOffset : Integer;
begin
result := TWSAProtocol_InfoA(GetRecordPtr^).iProtocolMaxOffset;
end;
procedure __TWSAProtocol_InfoA__Wrapper.setiNetworkByteOrder(const val : Integer);
begin
TWSAProtocol_InfoA(GetRecordPtr^).iNetworkByteOrder := val;
end;
function __TWSAProtocol_InfoA__Wrapper.getiNetworkByteOrder : Integer;
begin
result := TWSAProtocol_InfoA(GetRecordPtr^).iNetworkByteOrder;
end;
procedure __TWSAProtocol_InfoA__Wrapper.setiSecurityScheme(const val : Integer);
begin
TWSAProtocol_InfoA(GetRecordPtr^).iSecurityScheme := val;
end;
function __TWSAProtocol_InfoA__Wrapper.getiSecurityScheme : Integer;
begin
result := TWSAProtocol_InfoA(GetRecordPtr^).iSecurityScheme;
end;
procedure __TWSAProtocol_InfoA__Wrapper.setdwMessageSize(const val : DWORD);
begin
TWSAProtocol_InfoA(GetRecordPtr^).dwMessageSize := val;
end;
function __TWSAProtocol_InfoA__Wrapper.getdwMessageSize : DWORD;
begin
result := TWSAProtocol_InfoA(GetRecordPtr^).dwMessageSize;
end;
procedure __TWSAProtocol_InfoA__Wrapper.setdwProviderReserved(const val : DWORD);
begin
TWSAProtocol_InfoA(GetRecordPtr^).dwProviderReserved := val;
end;
function __TWSAProtocol_InfoA__Wrapper.getdwProviderReserved : DWORD;
begin
result := TWSAProtocol_InfoA(GetRecordPtr^).dwProviderReserved;
end;
function __TWSAProtocol_InfoW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWSAProtocol_InfoW__Wrapper.setdwServiceFlags1(const val : DWORD);
begin
TWSAProtocol_InfoW(GetRecordPtr^).dwServiceFlags1 := val;
end;
function __TWSAProtocol_InfoW__Wrapper.getdwServiceFlags1 : DWORD;
begin
result := TWSAProtocol_InfoW(GetRecordPtr^).dwServiceFlags1;
end;
procedure __TWSAProtocol_InfoW__Wrapper.setdwServiceFlags2(const val : DWORD);
begin
TWSAProtocol_InfoW(GetRecordPtr^).dwServiceFlags2 := val;
end;
function __TWSAProtocol_InfoW__Wrapper.getdwServiceFlags2 : DWORD;
begin
result := TWSAProtocol_InfoW(GetRecordPtr^).dwServiceFlags2;
end;
procedure __TWSAProtocol_InfoW__Wrapper.setdwServiceFlags3(const val : DWORD);
begin
TWSAProtocol_InfoW(GetRecordPtr^).dwServiceFlags3 := val;
end;
function __TWSAProtocol_InfoW__Wrapper.getdwServiceFlags3 : DWORD;
begin
result := TWSAProtocol_InfoW(GetRecordPtr^).dwServiceFlags3;
end;
procedure __TWSAProtocol_InfoW__Wrapper.setdwServiceFlags4(const val : DWORD);
begin
TWSAProtocol_InfoW(GetRecordPtr^).dwServiceFlags4 := val;
end;
function __TWSAProtocol_InfoW__Wrapper.getdwServiceFlags4 : DWORD;
begin
result := TWSAProtocol_InfoW(GetRecordPtr^).dwServiceFlags4;
end;
procedure __TWSAProtocol_InfoW__Wrapper.setdwProviderFlags(const val : DWORD);
begin
TWSAProtocol_InfoW(GetRecordPtr^).dwProviderFlags := val;
end;
function __TWSAProtocol_InfoW__Wrapper.getdwProviderFlags : DWORD;
begin
result := TWSAProtocol_InfoW(GetRecordPtr^).dwProviderFlags;
end;
procedure __TWSAProtocol_InfoW__Wrapper.setdwCatalogEntryId(const val : DWORD);
begin
TWSAProtocol_InfoW(GetRecordPtr^).dwCatalogEntryId := val;
end;
function __TWSAProtocol_InfoW__Wrapper.getdwCatalogEntryId : DWORD;
begin
result := TWSAProtocol_InfoW(GetRecordPtr^).dwCatalogEntryId;
end;
procedure __TWSAProtocol_InfoW__Wrapper.setiVersion(const val : Integer);
begin
TWSAProtocol_InfoW(GetRecordPtr^).iVersion := val;
end;
function __TWSAProtocol_InfoW__Wrapper.getiVersion : Integer;
begin
result := TWSAProtocol_InfoW(GetRecordPtr^).iVersion;
end;
procedure __TWSAProtocol_InfoW__Wrapper.setiAddressFamily(const val : Integer);
begin
TWSAProtocol_InfoW(GetRecordPtr^).iAddressFamily := val;
end;
function __TWSAProtocol_InfoW__Wrapper.getiAddressFamily : Integer;
begin
result := TWSAProtocol_InfoW(GetRecordPtr^).iAddressFamily;
end;
procedure __TWSAProtocol_InfoW__Wrapper.setiMaxSockAddr(const val : Integer);
begin
TWSAProtocol_InfoW(GetRecordPtr^).iMaxSockAddr := val;
end;
function __TWSAProtocol_InfoW__Wrapper.getiMaxSockAddr : Integer;
begin
result := TWSAProtocol_InfoW(GetRecordPtr^).iMaxSockAddr;
end;
procedure __TWSAProtocol_InfoW__Wrapper.setiMinSockAddr(const val : Integer);
begin
TWSAProtocol_InfoW(GetRecordPtr^).iMinSockAddr := val;
end;
function __TWSAProtocol_InfoW__Wrapper.getiMinSockAddr : Integer;
begin
result := TWSAProtocol_InfoW(GetRecordPtr^).iMinSockAddr;
end;
procedure __TWSAProtocol_InfoW__Wrapper.setiSocketType(const val : Integer);
begin
TWSAProtocol_InfoW(GetRecordPtr^).iSocketType := val;
end;
function __TWSAProtocol_InfoW__Wrapper.getiSocketType : Integer;
begin
result := TWSAProtocol_InfoW(GetRecordPtr^).iSocketType;
end;
procedure __TWSAProtocol_InfoW__Wrapper.setiProtocol(const val : Integer);
begin
TWSAProtocol_InfoW(GetRecordPtr^).iProtocol := val;
end;
function __TWSAProtocol_InfoW__Wrapper.getiProtocol : Integer;
begin
result := TWSAProtocol_InfoW(GetRecordPtr^).iProtocol;
end;
procedure __TWSAProtocol_InfoW__Wrapper.setiProtocolMaxOffset(const val : Integer);
begin
TWSAProtocol_InfoW(GetRecordPtr^).iProtocolMaxOffset := val;
end;
function __TWSAProtocol_InfoW__Wrapper.getiProtocolMaxOffset : Integer;
begin
result := TWSAProtocol_InfoW(GetRecordPtr^).iProtocolMaxOffset;
end;
procedure __TWSAProtocol_InfoW__Wrapper.setiNetworkByteOrder(const val : Integer);
begin
TWSAProtocol_InfoW(GetRecordPtr^).iNetworkByteOrder := val;
end;
function __TWSAProtocol_InfoW__Wrapper.getiNetworkByteOrder : Integer;
begin
result := TWSAProtocol_InfoW(GetRecordPtr^).iNetworkByteOrder;
end;
procedure __TWSAProtocol_InfoW__Wrapper.setiSecurityScheme(const val : Integer);
begin
TWSAProtocol_InfoW(GetRecordPtr^).iSecurityScheme := val;
end;
function __TWSAProtocol_InfoW__Wrapper.getiSecurityScheme : Integer;
begin
result := TWSAProtocol_InfoW(GetRecordPtr^).iSecurityScheme;
end;
procedure __TWSAProtocol_InfoW__Wrapper.setdwMessageSize(const val : DWORD);
begin
TWSAProtocol_InfoW(GetRecordPtr^).dwMessageSize := val;
end;
function __TWSAProtocol_InfoW__Wrapper.getdwMessageSize : DWORD;
begin
result := TWSAProtocol_InfoW(GetRecordPtr^).dwMessageSize;
end;
procedure __TWSAProtocol_InfoW__Wrapper.setdwProviderReserved(const val : DWORD);
begin
TWSAProtocol_InfoW(GetRecordPtr^).dwProviderReserved := val;
end;
function __TWSAProtocol_InfoW__Wrapper.getdwProviderReserved : DWORD;
begin
result := TWSAProtocol_InfoW(GetRecordPtr^).dwProviderReserved;
end;
function __TWSAProtocolChain__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWSAProtocolChain__Wrapper.setChainLen(const val : Integer);
begin
TWSAProtocolChain(GetRecordPtr^).ChainLen := val;
end;
function __TWSAProtocolChain__Wrapper.getChainLen : Integer;
begin
result := TWSAProtocolChain(GetRecordPtr^).ChainLen;
end;
function __TWSAQuerySet__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWSAQuerySet__Wrapper.setdwSize(const val : DWORD);
begin
TWSAQuerySet(GetRecordPtr^).dwSize := val;
end;
function __TWSAQuerySet__Wrapper.getdwSize : DWORD;
begin
result := TWSAQuerySet(GetRecordPtr^).dwSize;
end;
procedure __TWSAQuerySet__Wrapper.setdwNameSpace(const val : DWORD);
begin
TWSAQuerySet(GetRecordPtr^).dwNameSpace := val;
end;
function __TWSAQuerySet__Wrapper.getdwNameSpace : DWORD;
begin
result := TWSAQuerySet(GetRecordPtr^).dwNameSpace;
end;
procedure __TWSAQuerySet__Wrapper.setdwNumberOfProtocols(const val : DWORD);
begin
TWSAQuerySet(GetRecordPtr^).dwNumberOfProtocols := val;
end;
function __TWSAQuerySet__Wrapper.getdwNumberOfProtocols : DWORD;
begin
result := TWSAQuerySet(GetRecordPtr^).dwNumberOfProtocols;
end;
procedure __TWSAQuerySet__Wrapper.setdwNumberOfCsAddrs(const val : DWORD);
begin
TWSAQuerySet(GetRecordPtr^).dwNumberOfCsAddrs := val;
end;
function __TWSAQuerySet__Wrapper.getdwNumberOfCsAddrs : DWORD;
begin
result := TWSAQuerySet(GetRecordPtr^).dwNumberOfCsAddrs;
end;
procedure __TWSAQuerySet__Wrapper.setdwOutputFlags(const val : DWORD);
begin
TWSAQuerySet(GetRecordPtr^).dwOutputFlags := val;
end;
function __TWSAQuerySet__Wrapper.getdwOutputFlags : DWORD;
begin
result := TWSAQuerySet(GetRecordPtr^).dwOutputFlags;
end;
function __TWSAQuerySetA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWSAQuerySetA__Wrapper.setdwSize(const val : DWORD);
begin
TWSAQuerySetA(GetRecordPtr^).dwSize := val;
end;
function __TWSAQuerySetA__Wrapper.getdwSize : DWORD;
begin
result := TWSAQuerySetA(GetRecordPtr^).dwSize;
end;
procedure __TWSAQuerySetA__Wrapper.setdwNameSpace(const val : DWORD);
begin
TWSAQuerySetA(GetRecordPtr^).dwNameSpace := val;
end;
function __TWSAQuerySetA__Wrapper.getdwNameSpace : DWORD;
begin
result := TWSAQuerySetA(GetRecordPtr^).dwNameSpace;
end;
procedure __TWSAQuerySetA__Wrapper.setdwNumberOfProtocols(const val : DWORD);
begin
TWSAQuerySetA(GetRecordPtr^).dwNumberOfProtocols := val;
end;
function __TWSAQuerySetA__Wrapper.getdwNumberOfProtocols : DWORD;
begin
result := TWSAQuerySetA(GetRecordPtr^).dwNumberOfProtocols;
end;
procedure __TWSAQuerySetA__Wrapper.setdwNumberOfCsAddrs(const val : DWORD);
begin
TWSAQuerySetA(GetRecordPtr^).dwNumberOfCsAddrs := val;
end;
function __TWSAQuerySetA__Wrapper.getdwNumberOfCsAddrs : DWORD;
begin
result := TWSAQuerySetA(GetRecordPtr^).dwNumberOfCsAddrs;
end;
procedure __TWSAQuerySetA__Wrapper.setdwOutputFlags(const val : DWORD);
begin
TWSAQuerySetA(GetRecordPtr^).dwOutputFlags := val;
end;
function __TWSAQuerySetA__Wrapper.getdwOutputFlags : DWORD;
begin
result := TWSAQuerySetA(GetRecordPtr^).dwOutputFlags;
end;
function __TWSAQuerySetW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWSAQuerySetW__Wrapper.setdwSize(const val : DWORD);
begin
TWSAQuerySetW(GetRecordPtr^).dwSize := val;
end;
function __TWSAQuerySetW__Wrapper.getdwSize : DWORD;
begin
result := TWSAQuerySetW(GetRecordPtr^).dwSize;
end;
procedure __TWSAQuerySetW__Wrapper.setdwNameSpace(const val : DWORD);
begin
TWSAQuerySetW(GetRecordPtr^).dwNameSpace := val;
end;
function __TWSAQuerySetW__Wrapper.getdwNameSpace : DWORD;
begin
result := TWSAQuerySetW(GetRecordPtr^).dwNameSpace;
end;
procedure __TWSAQuerySetW__Wrapper.setdwNumberOfProtocols(const val : DWORD);
begin
TWSAQuerySetW(GetRecordPtr^).dwNumberOfProtocols := val;
end;
function __TWSAQuerySetW__Wrapper.getdwNumberOfProtocols : DWORD;
begin
result := TWSAQuerySetW(GetRecordPtr^).dwNumberOfProtocols;
end;
procedure __TWSAQuerySetW__Wrapper.setdwNumberOfCsAddrs(const val : DWORD);
begin
TWSAQuerySetW(GetRecordPtr^).dwNumberOfCsAddrs := val;
end;
function __TWSAQuerySetW__Wrapper.getdwNumberOfCsAddrs : DWORD;
begin
result := TWSAQuerySetW(GetRecordPtr^).dwNumberOfCsAddrs;
end;
procedure __TWSAQuerySetW__Wrapper.setdwOutputFlags(const val : DWORD);
begin
TWSAQuerySetW(GetRecordPtr^).dwOutputFlags := val;
end;
function __TWSAQuerySetW__Wrapper.getdwOutputFlags : DWORD;
begin
result := TWSAQuerySetW(GetRecordPtr^).dwOutputFlags;
end;
function __TWSAServiceClassInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWSAServiceClassInfo__Wrapper.setdwCount(const val : DWORD);
begin
TWSAServiceClassInfo(GetRecordPtr^).dwCount := val;
end;
function __TWSAServiceClassInfo__Wrapper.getdwCount : DWORD;
begin
result := TWSAServiceClassInfo(GetRecordPtr^).dwCount;
end;
function __TWSAServiceClassInfoA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWSAServiceClassInfoA__Wrapper.setdwCount(const val : DWORD);
begin
TWSAServiceClassInfoA(GetRecordPtr^).dwCount := val;
end;
function __TWSAServiceClassInfoA__Wrapper.getdwCount : DWORD;
begin
result := TWSAServiceClassInfoA(GetRecordPtr^).dwCount;
end;
function __TWSAServiceClassInfoW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWSAServiceClassInfoW__Wrapper.setdwCount(const val : DWORD);
begin
TWSAServiceClassInfoW(GetRecordPtr^).dwCount := val;
end;
function __TWSAServiceClassInfoW__Wrapper.getdwCount : DWORD;
begin
result := TWSAServiceClassInfoW(GetRecordPtr^).dwCount;
end;
function __TWSAVersion__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWSAVersion__Wrapper.setdwVersion(const val : DWORD);
begin
TWSAVersion(GetRecordPtr^).dwVersion := val;
end;
function __TWSAVersion__Wrapper.getdwVersion : DWORD;
begin
result := TWSAVersion(GetRecordPtr^).dwVersion;
end;
procedure __TWSAVersion__Wrapper.setecHow(const val : TWSAEComparator);
begin
TWSAVersion(GetRecordPtr^).ecHow := val;
end;
function __TWSAVersion__Wrapper.getecHow : TWSAEComparator;
begin
result := TWSAVersion(GetRecordPtr^).ecHow;
end;
function __WSABUF__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __WSABUF__Wrapper.setlen(const val : u_long);
begin
WSABUF(GetRecordPtr^).len := val;
end;
function __WSABUF__Wrapper.getlen : u_long;
begin
result := WSABUF(GetRecordPtr^).len;
end;
function __WSADATA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __WSADATA__Wrapper.setwVersion(const val : Word);
begin
WSADATA(GetRecordPtr^).wVersion := val;
end;
function __WSADATA__Wrapper.getwVersion : Word;
begin
result := WSADATA(GetRecordPtr^).wVersion;
end;
procedure __WSADATA__Wrapper.setwHighVersion(const val : Word);
begin
WSADATA(GetRecordPtr^).wHighVersion := val;
end;
function __WSADATA__Wrapper.getwHighVersion : Word;
begin
result := WSADATA(GetRecordPtr^).wHighVersion;
end;
procedure __WSADATA__Wrapper.setiMaxSockets(const val : Word);
begin
WSADATA(GetRecordPtr^).iMaxSockets := val;
end;
function __WSADATA__Wrapper.getiMaxSockets : Word;
begin
result := WSADATA(GetRecordPtr^).iMaxSockets;
end;
procedure __WSADATA__Wrapper.setiMaxUdpDg(const val : Word);
begin
WSADATA(GetRecordPtr^).iMaxUdpDg := val;
end;
function __WSADATA__Wrapper.getiMaxUdpDg : Word;
begin
result := WSADATA(GetRecordPtr^).iMaxUdpDg;
end;
function __WSANAMESPACE_INFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __WSANAMESPACE_INFO__Wrapper.setdwNameSpace(const val : DWORD);
begin
WSANAMESPACE_INFO(GetRecordPtr^).dwNameSpace := val;
end;
function __WSANAMESPACE_INFO__Wrapper.getdwNameSpace : DWORD;
begin
result := WSANAMESPACE_INFO(GetRecordPtr^).dwNameSpace;
end;
procedure __WSANAMESPACE_INFO__Wrapper.setfActive(const val : DWORD);
begin
WSANAMESPACE_INFO(GetRecordPtr^).fActive := val;
end;
function __WSANAMESPACE_INFO__Wrapper.getfActive : DWORD;
begin
result := WSANAMESPACE_INFO(GetRecordPtr^).fActive;
end;
procedure __WSANAMESPACE_INFO__Wrapper.setdwVersion(const val : DWORD);
begin
WSANAMESPACE_INFO(GetRecordPtr^).dwVersion := val;
end;
function __WSANAMESPACE_INFO__Wrapper.getdwVersion : DWORD;
begin
result := WSANAMESPACE_INFO(GetRecordPtr^).dwVersion;
end;
function __WSANAMESPACE_INFOA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __WSANAMESPACE_INFOA__Wrapper.setdwNameSpace(const val : DWORD);
begin
WSANAMESPACE_INFOA(GetRecordPtr^).dwNameSpace := val;
end;
function __WSANAMESPACE_INFOA__Wrapper.getdwNameSpace : DWORD;
begin
result := WSANAMESPACE_INFOA(GetRecordPtr^).dwNameSpace;
end;
procedure __WSANAMESPACE_INFOA__Wrapper.setfActive(const val : DWORD);
begin
WSANAMESPACE_INFOA(GetRecordPtr^).fActive := val;
end;
function __WSANAMESPACE_INFOA__Wrapper.getfActive : DWORD;
begin
result := WSANAMESPACE_INFOA(GetRecordPtr^).fActive;
end;
procedure __WSANAMESPACE_INFOA__Wrapper.setdwVersion(const val : DWORD);
begin
WSANAMESPACE_INFOA(GetRecordPtr^).dwVersion := val;
end;
function __WSANAMESPACE_INFOA__Wrapper.getdwVersion : DWORD;
begin
result := WSANAMESPACE_INFOA(GetRecordPtr^).dwVersion;
end;
function __WSANAMESPACE_INFOW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __WSANAMESPACE_INFOW__Wrapper.setdwNameSpace(const val : DWORD);
begin
WSANAMESPACE_INFOW(GetRecordPtr^).dwNameSpace := val;
end;
function __WSANAMESPACE_INFOW__Wrapper.getdwNameSpace : DWORD;
begin
result := WSANAMESPACE_INFOW(GetRecordPtr^).dwNameSpace;
end;
procedure __WSANAMESPACE_INFOW__Wrapper.setfActive(const val : DWORD);
begin
WSANAMESPACE_INFOW(GetRecordPtr^).fActive := val;
end;
function __WSANAMESPACE_INFOW__Wrapper.getfActive : DWORD;
begin
result := WSANAMESPACE_INFOW(GetRecordPtr^).fActive;
end;
procedure __WSANAMESPACE_INFOW__Wrapper.setdwVersion(const val : DWORD);
begin
WSANAMESPACE_INFOW(GetRecordPtr^).dwVersion := val;
end;
function __WSANAMESPACE_INFOW__Wrapper.getdwVersion : DWORD;
begin
result := WSANAMESPACE_INFOW(GetRecordPtr^).dwVersion;
end;
function __WSANETWORKEVENTS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __WSANETWORKEVENTS__Wrapper.setlNetworkEvents(const val : Longint);
begin
WSANETWORKEVENTS(GetRecordPtr^).lNetworkEvents := val;
end;
function __WSANETWORKEVENTS__Wrapper.getlNetworkEvents : Longint;
begin
result := WSANETWORKEVENTS(GetRecordPtr^).lNetworkEvents;
end;
function __WSANSCLASSINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __WSANSCLASSINFO__Wrapper.setdwNameSpace(const val : DWORD);
begin
WSANSCLASSINFO(GetRecordPtr^).dwNameSpace := val;
end;
function __WSANSCLASSINFO__Wrapper.getdwNameSpace : DWORD;
begin
result := WSANSCLASSINFO(GetRecordPtr^).dwNameSpace;
end;
procedure __WSANSCLASSINFO__Wrapper.setdwValueType(const val : DWORD);
begin
WSANSCLASSINFO(GetRecordPtr^).dwValueType := val;
end;
function __WSANSCLASSINFO__Wrapper.getdwValueType : DWORD;
begin
result := WSANSCLASSINFO(GetRecordPtr^).dwValueType;
end;
procedure __WSANSCLASSINFO__Wrapper.setdwValueSize(const val : DWORD);
begin
WSANSCLASSINFO(GetRecordPtr^).dwValueSize := val;
end;
function __WSANSCLASSINFO__Wrapper.getdwValueSize : DWORD;
begin
result := WSANSCLASSINFO(GetRecordPtr^).dwValueSize;
end;
function __WSANSCLASSINFOA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __WSANSCLASSINFOA__Wrapper.setdwNameSpace(const val : DWORD);
begin
WSANSCLASSINFOA(GetRecordPtr^).dwNameSpace := val;
end;
function __WSANSCLASSINFOA__Wrapper.getdwNameSpace : DWORD;
begin
result := WSANSCLASSINFOA(GetRecordPtr^).dwNameSpace;
end;
procedure __WSANSCLASSINFOA__Wrapper.setdwValueType(const val : DWORD);
begin
WSANSCLASSINFOA(GetRecordPtr^).dwValueType := val;
end;
function __WSANSCLASSINFOA__Wrapper.getdwValueType : DWORD;
begin
result := WSANSCLASSINFOA(GetRecordPtr^).dwValueType;
end;
procedure __WSANSCLASSINFOA__Wrapper.setdwValueSize(const val : DWORD);
begin
WSANSCLASSINFOA(GetRecordPtr^).dwValueSize := val;
end;
function __WSANSCLASSINFOA__Wrapper.getdwValueSize : DWORD;
begin
result := WSANSCLASSINFOA(GetRecordPtr^).dwValueSize;
end;
function __WSANSCLASSINFOW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __WSANSCLASSINFOW__Wrapper.setdwNameSpace(const val : DWORD);
begin
WSANSCLASSINFOW(GetRecordPtr^).dwNameSpace := val;
end;
function __WSANSCLASSINFOW__Wrapper.getdwNameSpace : DWORD;
begin
result := WSANSCLASSINFOW(GetRecordPtr^).dwNameSpace;
end;
procedure __WSANSCLASSINFOW__Wrapper.setdwValueType(const val : DWORD);
begin
WSANSCLASSINFOW(GetRecordPtr^).dwValueType := val;
end;
function __WSANSCLASSINFOW__Wrapper.getdwValueType : DWORD;
begin
result := WSANSCLASSINFOW(GetRecordPtr^).dwValueType;
end;
procedure __WSANSCLASSINFOW__Wrapper.setdwValueSize(const val : DWORD);
begin
WSANSCLASSINFOW(GetRecordPtr^).dwValueSize := val;
end;
function __WSANSCLASSINFOW__Wrapper.getdwValueSize : DWORD;
begin
result := WSANSCLASSINFOW(GetRecordPtr^).dwValueSize;
end;
function __WSAOVERLAPPED__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __WSAOVERLAPPED__Wrapper.setInternal(const val : DWORD);
begin
WSAOVERLAPPED(GetRecordPtr^).Internal := val;
end;
function __WSAOVERLAPPED__Wrapper.getInternal : DWORD;
begin
result := WSAOVERLAPPED(GetRecordPtr^).Internal;
end;
procedure __WSAOVERLAPPED__Wrapper.setInternalHigh(const val : DWORD);
begin
WSAOVERLAPPED(GetRecordPtr^).InternalHigh := val;
end;
function __WSAOVERLAPPED__Wrapper.getInternalHigh : DWORD;
begin
result := WSAOVERLAPPED(GetRecordPtr^).InternalHigh;
end;
procedure __WSAOVERLAPPED__Wrapper.setOffset(const val : DWORD);
begin
WSAOVERLAPPED(GetRecordPtr^).Offset := val;
end;
function __WSAOVERLAPPED__Wrapper.getOffset : DWORD;
begin
result := WSAOVERLAPPED(GetRecordPtr^).Offset;
end;
procedure __WSAOVERLAPPED__Wrapper.setOffsetHigh(const val : DWORD);
begin
WSAOVERLAPPED(GetRecordPtr^).OffsetHigh := val;
end;
function __WSAOVERLAPPED__Wrapper.getOffsetHigh : DWORD;
begin
result := WSAOVERLAPPED(GetRecordPtr^).OffsetHigh;
end;
procedure __WSAOVERLAPPED__Wrapper.sethEvent(const val : THandle);
begin
WSAOVERLAPPED(GetRecordPtr^).hEvent := val;
end;
function __WSAOVERLAPPED__Wrapper.gethEvent : THandle;
begin
result := WSAOVERLAPPED(GetRecordPtr^).hEvent;
end;
function __WSAPROTOCOL_INFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __WSAPROTOCOL_INFO__Wrapper.setdwServiceFlags1(const val : DWORD);
begin
WSAPROTOCOL_INFO(GetRecordPtr^).dwServiceFlags1 := val;
end;
function __WSAPROTOCOL_INFO__Wrapper.getdwServiceFlags1 : DWORD;
begin
result := WSAPROTOCOL_INFO(GetRecordPtr^).dwServiceFlags1;
end;
procedure __WSAPROTOCOL_INFO__Wrapper.setdwServiceFlags2(const val : DWORD);
begin
WSAPROTOCOL_INFO(GetRecordPtr^).dwServiceFlags2 := val;
end;
function __WSAPROTOCOL_INFO__Wrapper.getdwServiceFlags2 : DWORD;
begin
result := WSAPROTOCOL_INFO(GetRecordPtr^).dwServiceFlags2;
end;
procedure __WSAPROTOCOL_INFO__Wrapper.setdwServiceFlags3(const val : DWORD);
begin
WSAPROTOCOL_INFO(GetRecordPtr^).dwServiceFlags3 := val;
end;
function __WSAPROTOCOL_INFO__Wrapper.getdwServiceFlags3 : DWORD;
begin
result := WSAPROTOCOL_INFO(GetRecordPtr^).dwServiceFlags3;
end;
procedure __WSAPROTOCOL_INFO__Wrapper.setdwServiceFlags4(const val : DWORD);
begin
WSAPROTOCOL_INFO(GetRecordPtr^).dwServiceFlags4 := val;
end;
function __WSAPROTOCOL_INFO__Wrapper.getdwServiceFlags4 : DWORD;
begin
result := WSAPROTOCOL_INFO(GetRecordPtr^).dwServiceFlags4;
end;
procedure __WSAPROTOCOL_INFO__Wrapper.setdwProviderFlags(const val : DWORD);
begin
WSAPROTOCOL_INFO(GetRecordPtr^).dwProviderFlags := val;
end;
function __WSAPROTOCOL_INFO__Wrapper.getdwProviderFlags : DWORD;
begin
result := WSAPROTOCOL_INFO(GetRecordPtr^).dwProviderFlags;
end;
procedure __WSAPROTOCOL_INFO__Wrapper.setdwCatalogEntryId(const val : DWORD);
begin
WSAPROTOCOL_INFO(GetRecordPtr^).dwCatalogEntryId := val;
end;
function __WSAPROTOCOL_INFO__Wrapper.getdwCatalogEntryId : DWORD;
begin
result := WSAPROTOCOL_INFO(GetRecordPtr^).dwCatalogEntryId;
end;
procedure __WSAPROTOCOL_INFO__Wrapper.setiVersion(const val : Integer);
begin
WSAPROTOCOL_INFO(GetRecordPtr^).iVersion := val;
end;
function __WSAPROTOCOL_INFO__Wrapper.getiVersion : Integer;
begin
result := WSAPROTOCOL_INFO(GetRecordPtr^).iVersion;
end;
procedure __WSAPROTOCOL_INFO__Wrapper.setiAddressFamily(const val : Integer);
begin
WSAPROTOCOL_INFO(GetRecordPtr^).iAddressFamily := val;
end;
function __WSAPROTOCOL_INFO__Wrapper.getiAddressFamily : Integer;
begin
result := WSAPROTOCOL_INFO(GetRecordPtr^).iAddressFamily;
end;
procedure __WSAPROTOCOL_INFO__Wrapper.setiMaxSockAddr(const val : Integer);
begin
WSAPROTOCOL_INFO(GetRecordPtr^).iMaxSockAddr := val;
end;
function __WSAPROTOCOL_INFO__Wrapper.getiMaxSockAddr : Integer;
begin
result := WSAPROTOCOL_INFO(GetRecordPtr^).iMaxSockAddr;
end;
procedure __WSAPROTOCOL_INFO__Wrapper.setiMinSockAddr(const val : Integer);
begin
WSAPROTOCOL_INFO(GetRecordPtr^).iMinSockAddr := val;
end;
function __WSAPROTOCOL_INFO__Wrapper.getiMinSockAddr : Integer;
begin
result := WSAPROTOCOL_INFO(GetRecordPtr^).iMinSockAddr;
end;
procedure __WSAPROTOCOL_INFO__Wrapper.setiSocketType(const val : Integer);
begin
WSAPROTOCOL_INFO(GetRecordPtr^).iSocketType := val;
end;
function __WSAPROTOCOL_INFO__Wrapper.getiSocketType : Integer;
begin
result := WSAPROTOCOL_INFO(GetRecordPtr^).iSocketType;
end;
procedure __WSAPROTOCOL_INFO__Wrapper.setiProtocol(const val : Integer);
begin
WSAPROTOCOL_INFO(GetRecordPtr^).iProtocol := val;
end;
function __WSAPROTOCOL_INFO__Wrapper.getiProtocol : Integer;
begin
result := WSAPROTOCOL_INFO(GetRecordPtr^).iProtocol;
end;
procedure __WSAPROTOCOL_INFO__Wrapper.setiProtocolMaxOffset(const val : Integer);
begin
WSAPROTOCOL_INFO(GetRecordPtr^).iProtocolMaxOffset := val;
end;
function __WSAPROTOCOL_INFO__Wrapper.getiProtocolMaxOffset : Integer;
begin
result := WSAPROTOCOL_INFO(GetRecordPtr^).iProtocolMaxOffset;
end;
procedure __WSAPROTOCOL_INFO__Wrapper.setiNetworkByteOrder(const val : Integer);
begin
WSAPROTOCOL_INFO(GetRecordPtr^).iNetworkByteOrder := val;
end;
function __WSAPROTOCOL_INFO__Wrapper.getiNetworkByteOrder : Integer;
begin
result := WSAPROTOCOL_INFO(GetRecordPtr^).iNetworkByteOrder;
end;
procedure __WSAPROTOCOL_INFO__Wrapper.setiSecurityScheme(const val : Integer);
begin
WSAPROTOCOL_INFO(GetRecordPtr^).iSecurityScheme := val;
end;
function __WSAPROTOCOL_INFO__Wrapper.getiSecurityScheme : Integer;
begin
result := WSAPROTOCOL_INFO(GetRecordPtr^).iSecurityScheme;
end;
procedure __WSAPROTOCOL_INFO__Wrapper.setdwMessageSize(const val : DWORD);
begin
WSAPROTOCOL_INFO(GetRecordPtr^).dwMessageSize := val;
end;
function __WSAPROTOCOL_INFO__Wrapper.getdwMessageSize : DWORD;
begin
result := WSAPROTOCOL_INFO(GetRecordPtr^).dwMessageSize;
end;
procedure __WSAPROTOCOL_INFO__Wrapper.setdwProviderReserved(const val : DWORD);
begin
WSAPROTOCOL_INFO(GetRecordPtr^).dwProviderReserved := val;
end;
function __WSAPROTOCOL_INFO__Wrapper.getdwProviderReserved : DWORD;
begin
result := WSAPROTOCOL_INFO(GetRecordPtr^).dwProviderReserved;
end;
function __WSAPROTOCOL_INFOA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __WSAPROTOCOL_INFOA__Wrapper.setdwServiceFlags1(const val : DWORD);
begin
WSAPROTOCOL_INFOA(GetRecordPtr^).dwServiceFlags1 := val;
end;
function __WSAPROTOCOL_INFOA__Wrapper.getdwServiceFlags1 : DWORD;
begin
result := WSAPROTOCOL_INFOA(GetRecordPtr^).dwServiceFlags1;
end;
procedure __WSAPROTOCOL_INFOA__Wrapper.setdwServiceFlags2(const val : DWORD);
begin
WSAPROTOCOL_INFOA(GetRecordPtr^).dwServiceFlags2 := val;
end;
function __WSAPROTOCOL_INFOA__Wrapper.getdwServiceFlags2 : DWORD;
begin
result := WSAPROTOCOL_INFOA(GetRecordPtr^).dwServiceFlags2;
end;
procedure __WSAPROTOCOL_INFOA__Wrapper.setdwServiceFlags3(const val : DWORD);
begin
WSAPROTOCOL_INFOA(GetRecordPtr^).dwServiceFlags3 := val;
end;
function __WSAPROTOCOL_INFOA__Wrapper.getdwServiceFlags3 : DWORD;
begin
result := WSAPROTOCOL_INFOA(GetRecordPtr^).dwServiceFlags3;
end;
procedure __WSAPROTOCOL_INFOA__Wrapper.setdwServiceFlags4(const val : DWORD);
begin
WSAPROTOCOL_INFOA(GetRecordPtr^).dwServiceFlags4 := val;
end;
function __WSAPROTOCOL_INFOA__Wrapper.getdwServiceFlags4 : DWORD;
begin
result := WSAPROTOCOL_INFOA(GetRecordPtr^).dwServiceFlags4;
end;
procedure __WSAPROTOCOL_INFOA__Wrapper.setdwProviderFlags(const val : DWORD);
begin
WSAPROTOCOL_INFOA(GetRecordPtr^).dwProviderFlags := val;
end;
function __WSAPROTOCOL_INFOA__Wrapper.getdwProviderFlags : DWORD;
begin
result := WSAPROTOCOL_INFOA(GetRecordPtr^).dwProviderFlags;
end;
procedure __WSAPROTOCOL_INFOA__Wrapper.setdwCatalogEntryId(const val : DWORD);
begin
WSAPROTOCOL_INFOA(GetRecordPtr^).dwCatalogEntryId := val;
end;
function __WSAPROTOCOL_INFOA__Wrapper.getdwCatalogEntryId : DWORD;
begin
result := WSAPROTOCOL_INFOA(GetRecordPtr^).dwCatalogEntryId;
end;
procedure __WSAPROTOCOL_INFOA__Wrapper.setiVersion(const val : Integer);
begin
WSAPROTOCOL_INFOA(GetRecordPtr^).iVersion := val;
end;
function __WSAPROTOCOL_INFOA__Wrapper.getiVersion : Integer;
begin
result := WSAPROTOCOL_INFOA(GetRecordPtr^).iVersion;
end;
procedure __WSAPROTOCOL_INFOA__Wrapper.setiAddressFamily(const val : Integer);
begin
WSAPROTOCOL_INFOA(GetRecordPtr^).iAddressFamily := val;
end;
function __WSAPROTOCOL_INFOA__Wrapper.getiAddressFamily : Integer;
begin
result := WSAPROTOCOL_INFOA(GetRecordPtr^).iAddressFamily;
end;
procedure __WSAPROTOCOL_INFOA__Wrapper.setiMaxSockAddr(const val : Integer);
begin
WSAPROTOCOL_INFOA(GetRecordPtr^).iMaxSockAddr := val;
end;
function __WSAPROTOCOL_INFOA__Wrapper.getiMaxSockAddr : Integer;
begin
result := WSAPROTOCOL_INFOA(GetRecordPtr^).iMaxSockAddr;
end;
procedure __WSAPROTOCOL_INFOA__Wrapper.setiMinSockAddr(const val : Integer);
begin
WSAPROTOCOL_INFOA(GetRecordPtr^).iMinSockAddr := val;
end;
function __WSAPROTOCOL_INFOA__Wrapper.getiMinSockAddr : Integer;
begin
result := WSAPROTOCOL_INFOA(GetRecordPtr^).iMinSockAddr;
end;
procedure __WSAPROTOCOL_INFOA__Wrapper.setiSocketType(const val : Integer);
begin
WSAPROTOCOL_INFOA(GetRecordPtr^).iSocketType := val;
end;
function __WSAPROTOCOL_INFOA__Wrapper.getiSocketType : Integer;
begin
result := WSAPROTOCOL_INFOA(GetRecordPtr^).iSocketType;
end;
procedure __WSAPROTOCOL_INFOA__Wrapper.setiProtocol(const val : Integer);
begin
WSAPROTOCOL_INFOA(GetRecordPtr^).iProtocol := val;
end;
function __WSAPROTOCOL_INFOA__Wrapper.getiProtocol : Integer;
begin
result := WSAPROTOCOL_INFOA(GetRecordPtr^).iProtocol;
end;
procedure __WSAPROTOCOL_INFOA__Wrapper.setiProtocolMaxOffset(const val : Integer);
begin
WSAPROTOCOL_INFOA(GetRecordPtr^).iProtocolMaxOffset := val;
end;
function __WSAPROTOCOL_INFOA__Wrapper.getiProtocolMaxOffset : Integer;
begin
result := WSAPROTOCOL_INFOA(GetRecordPtr^).iProtocolMaxOffset;
end;
procedure __WSAPROTOCOL_INFOA__Wrapper.setiNetworkByteOrder(const val : Integer);
begin
WSAPROTOCOL_INFOA(GetRecordPtr^).iNetworkByteOrder := val;
end;
function __WSAPROTOCOL_INFOA__Wrapper.getiNetworkByteOrder : Integer;
begin
result := WSAPROTOCOL_INFOA(GetRecordPtr^).iNetworkByteOrder;
end;
procedure __WSAPROTOCOL_INFOA__Wrapper.setiSecurityScheme(const val : Integer);
begin
WSAPROTOCOL_INFOA(GetRecordPtr^).iSecurityScheme := val;
end;
function __WSAPROTOCOL_INFOA__Wrapper.getiSecurityScheme : Integer;
begin
result := WSAPROTOCOL_INFOA(GetRecordPtr^).iSecurityScheme;
end;
procedure __WSAPROTOCOL_INFOA__Wrapper.setdwMessageSize(const val : DWORD);
begin
WSAPROTOCOL_INFOA(GetRecordPtr^).dwMessageSize := val;
end;
function __WSAPROTOCOL_INFOA__Wrapper.getdwMessageSize : DWORD;
begin
result := WSAPROTOCOL_INFOA(GetRecordPtr^).dwMessageSize;
end;
procedure __WSAPROTOCOL_INFOA__Wrapper.setdwProviderReserved(const val : DWORD);
begin
WSAPROTOCOL_INFOA(GetRecordPtr^).dwProviderReserved := val;
end;
function __WSAPROTOCOL_INFOA__Wrapper.getdwProviderReserved : DWORD;
begin
result := WSAPROTOCOL_INFOA(GetRecordPtr^).dwProviderReserved;
end;
function __WSAPROTOCOL_INFOW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __WSAPROTOCOL_INFOW__Wrapper.setdwServiceFlags1(const val : DWORD);
begin
WSAPROTOCOL_INFOW(GetRecordPtr^).dwServiceFlags1 := val;
end;
function __WSAPROTOCOL_INFOW__Wrapper.getdwServiceFlags1 : DWORD;
begin
result := WSAPROTOCOL_INFOW(GetRecordPtr^).dwServiceFlags1;
end;
procedure __WSAPROTOCOL_INFOW__Wrapper.setdwServiceFlags2(const val : DWORD);
begin
WSAPROTOCOL_INFOW(GetRecordPtr^).dwServiceFlags2 := val;
end;
function __WSAPROTOCOL_INFOW__Wrapper.getdwServiceFlags2 : DWORD;
begin
result := WSAPROTOCOL_INFOW(GetRecordPtr^).dwServiceFlags2;
end;
procedure __WSAPROTOCOL_INFOW__Wrapper.setdwServiceFlags3(const val : DWORD);
begin
WSAPROTOCOL_INFOW(GetRecordPtr^).dwServiceFlags3 := val;
end;
function __WSAPROTOCOL_INFOW__Wrapper.getdwServiceFlags3 : DWORD;
begin
result := WSAPROTOCOL_INFOW(GetRecordPtr^).dwServiceFlags3;
end;
procedure __WSAPROTOCOL_INFOW__Wrapper.setdwServiceFlags4(const val : DWORD);
begin
WSAPROTOCOL_INFOW(GetRecordPtr^).dwServiceFlags4 := val;
end;
function __WSAPROTOCOL_INFOW__Wrapper.getdwServiceFlags4 : DWORD;
begin
result := WSAPROTOCOL_INFOW(GetRecordPtr^).dwServiceFlags4;
end;
procedure __WSAPROTOCOL_INFOW__Wrapper.setdwProviderFlags(const val : DWORD);
begin
WSAPROTOCOL_INFOW(GetRecordPtr^).dwProviderFlags := val;
end;
function __WSAPROTOCOL_INFOW__Wrapper.getdwProviderFlags : DWORD;
begin
result := WSAPROTOCOL_INFOW(GetRecordPtr^).dwProviderFlags;
end;
procedure __WSAPROTOCOL_INFOW__Wrapper.setdwCatalogEntryId(const val : DWORD);
begin
WSAPROTOCOL_INFOW(GetRecordPtr^).dwCatalogEntryId := val;
end;
function __WSAPROTOCOL_INFOW__Wrapper.getdwCatalogEntryId : DWORD;
begin
result := WSAPROTOCOL_INFOW(GetRecordPtr^).dwCatalogEntryId;
end;
procedure __WSAPROTOCOL_INFOW__Wrapper.setiVersion(const val : Integer);
begin
WSAPROTOCOL_INFOW(GetRecordPtr^).iVersion := val;
end;
function __WSAPROTOCOL_INFOW__Wrapper.getiVersion : Integer;
begin
result := WSAPROTOCOL_INFOW(GetRecordPtr^).iVersion;
end;
procedure __WSAPROTOCOL_INFOW__Wrapper.setiAddressFamily(const val : Integer);
begin
WSAPROTOCOL_INFOW(GetRecordPtr^).iAddressFamily := val;
end;
function __WSAPROTOCOL_INFOW__Wrapper.getiAddressFamily : Integer;
begin
result := WSAPROTOCOL_INFOW(GetRecordPtr^).iAddressFamily;
end;
procedure __WSAPROTOCOL_INFOW__Wrapper.setiMaxSockAddr(const val : Integer);
begin
WSAPROTOCOL_INFOW(GetRecordPtr^).iMaxSockAddr := val;
end;
function __WSAPROTOCOL_INFOW__Wrapper.getiMaxSockAddr : Integer;
begin
result := WSAPROTOCOL_INFOW(GetRecordPtr^).iMaxSockAddr;
end;
procedure __WSAPROTOCOL_INFOW__Wrapper.setiMinSockAddr(const val : Integer);
begin
WSAPROTOCOL_INFOW(GetRecordPtr^).iMinSockAddr := val;
end;
function __WSAPROTOCOL_INFOW__Wrapper.getiMinSockAddr : Integer;
begin
result := WSAPROTOCOL_INFOW(GetRecordPtr^).iMinSockAddr;
end;
procedure __WSAPROTOCOL_INFOW__Wrapper.setiSocketType(const val : Integer);
begin
WSAPROTOCOL_INFOW(GetRecordPtr^).iSocketType := val;
end;
function __WSAPROTOCOL_INFOW__Wrapper.getiSocketType : Integer;
begin
result := WSAPROTOCOL_INFOW(GetRecordPtr^).iSocketType;
end;
procedure __WSAPROTOCOL_INFOW__Wrapper.setiProtocol(const val : Integer);
begin
WSAPROTOCOL_INFOW(GetRecordPtr^).iProtocol := val;
end;
function __WSAPROTOCOL_INFOW__Wrapper.getiProtocol : Integer;
begin
result := WSAPROTOCOL_INFOW(GetRecordPtr^).iProtocol;
end;
procedure __WSAPROTOCOL_INFOW__Wrapper.setiProtocolMaxOffset(const val : Integer);
begin
WSAPROTOCOL_INFOW(GetRecordPtr^).iProtocolMaxOffset := val;
end;
function __WSAPROTOCOL_INFOW__Wrapper.getiProtocolMaxOffset : Integer;
begin
result := WSAPROTOCOL_INFOW(GetRecordPtr^).iProtocolMaxOffset;
end;
procedure __WSAPROTOCOL_INFOW__Wrapper.setiNetworkByteOrder(const val : Integer);
begin
WSAPROTOCOL_INFOW(GetRecordPtr^).iNetworkByteOrder := val;
end;
function __WSAPROTOCOL_INFOW__Wrapper.getiNetworkByteOrder : Integer;
begin
result := WSAPROTOCOL_INFOW(GetRecordPtr^).iNetworkByteOrder;
end;
procedure __WSAPROTOCOL_INFOW__Wrapper.setiSecurityScheme(const val : Integer);
begin
WSAPROTOCOL_INFOW(GetRecordPtr^).iSecurityScheme := val;
end;
function __WSAPROTOCOL_INFOW__Wrapper.getiSecurityScheme : Integer;
begin
result := WSAPROTOCOL_INFOW(GetRecordPtr^).iSecurityScheme;
end;
procedure __WSAPROTOCOL_INFOW__Wrapper.setdwMessageSize(const val : DWORD);
begin
WSAPROTOCOL_INFOW(GetRecordPtr^).dwMessageSize := val;
end;
function __WSAPROTOCOL_INFOW__Wrapper.getdwMessageSize : DWORD;
begin
result := WSAPROTOCOL_INFOW(GetRecordPtr^).dwMessageSize;
end;
procedure __WSAPROTOCOL_INFOW__Wrapper.setdwProviderReserved(const val : DWORD);
begin
WSAPROTOCOL_INFOW(GetRecordPtr^).dwProviderReserved := val;
end;
function __WSAPROTOCOL_INFOW__Wrapper.getdwProviderReserved : DWORD;
begin
result := WSAPROTOCOL_INFOW(GetRecordPtr^).dwProviderReserved;
end;
function __WSAPROTOCOLCHAIN__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __WSAPROTOCOLCHAIN__Wrapper.setChainLen(const val : Integer);
begin
WSAPROTOCOLCHAIN(GetRecordPtr^).ChainLen := val;
end;
function __WSAPROTOCOLCHAIN__Wrapper.getChainLen : Integer;
begin
result := WSAPROTOCOLCHAIN(GetRecordPtr^).ChainLen;
end;
function __WSAQUERYSETA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __WSAQUERYSETA__Wrapper.setdwSize(const val : DWORD);
begin
WSAQUERYSETA(GetRecordPtr^).dwSize := val;
end;
function __WSAQUERYSETA__Wrapper.getdwSize : DWORD;
begin
result := WSAQUERYSETA(GetRecordPtr^).dwSize;
end;
procedure __WSAQUERYSETA__Wrapper.setdwNameSpace(const val : DWORD);
begin
WSAQUERYSETA(GetRecordPtr^).dwNameSpace := val;
end;
function __WSAQUERYSETA__Wrapper.getdwNameSpace : DWORD;
begin
result := WSAQUERYSETA(GetRecordPtr^).dwNameSpace;
end;
procedure __WSAQUERYSETA__Wrapper.setdwNumberOfProtocols(const val : DWORD);
begin
WSAQUERYSETA(GetRecordPtr^).dwNumberOfProtocols := val;
end;
function __WSAQUERYSETA__Wrapper.getdwNumberOfProtocols : DWORD;
begin
result := WSAQUERYSETA(GetRecordPtr^).dwNumberOfProtocols;
end;
procedure __WSAQUERYSETA__Wrapper.setdwNumberOfCsAddrs(const val : DWORD);
begin
WSAQUERYSETA(GetRecordPtr^).dwNumberOfCsAddrs := val;
end;
function __WSAQUERYSETA__Wrapper.getdwNumberOfCsAddrs : DWORD;
begin
result := WSAQUERYSETA(GetRecordPtr^).dwNumberOfCsAddrs;
end;
procedure __WSAQUERYSETA__Wrapper.setdwOutputFlags(const val : DWORD);
begin
WSAQUERYSETA(GetRecordPtr^).dwOutputFlags := val;
end;
function __WSAQUERYSETA__Wrapper.getdwOutputFlags : DWORD;
begin
result := WSAQUERYSETA(GetRecordPtr^).dwOutputFlags;
end;
function __WSAQUERYSETW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __WSAQUERYSETW__Wrapper.setdwSize(const val : DWORD);
begin
WSAQUERYSETW(GetRecordPtr^).dwSize := val;
end;
function __WSAQUERYSETW__Wrapper.getdwSize : DWORD;
begin
result := WSAQUERYSETW(GetRecordPtr^).dwSize;
end;
procedure __WSAQUERYSETW__Wrapper.setdwNameSpace(const val : DWORD);
begin
WSAQUERYSETW(GetRecordPtr^).dwNameSpace := val;
end;
function __WSAQUERYSETW__Wrapper.getdwNameSpace : DWORD;
begin
result := WSAQUERYSETW(GetRecordPtr^).dwNameSpace;
end;
procedure __WSAQUERYSETW__Wrapper.setdwNumberOfProtocols(const val : DWORD);
begin
WSAQUERYSETW(GetRecordPtr^).dwNumberOfProtocols := val;
end;
function __WSAQUERYSETW__Wrapper.getdwNumberOfProtocols : DWORD;
begin
result := WSAQUERYSETW(GetRecordPtr^).dwNumberOfProtocols;
end;
procedure __WSAQUERYSETW__Wrapper.setdwNumberOfCsAddrs(const val : DWORD);
begin
WSAQUERYSETW(GetRecordPtr^).dwNumberOfCsAddrs := val;
end;
function __WSAQUERYSETW__Wrapper.getdwNumberOfCsAddrs : DWORD;
begin
result := WSAQUERYSETW(GetRecordPtr^).dwNumberOfCsAddrs;
end;
procedure __WSAQUERYSETW__Wrapper.setdwOutputFlags(const val : DWORD);
begin
WSAQUERYSETW(GetRecordPtr^).dwOutputFlags := val;
end;
function __WSAQUERYSETW__Wrapper.getdwOutputFlags : DWORD;
begin
result := WSAQUERYSETW(GetRecordPtr^).dwOutputFlags;
end;
function __WSASERVICECLASSINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __WSASERVICECLASSINFO__Wrapper.setdwCount(const val : DWORD);
begin
WSASERVICECLASSINFO(GetRecordPtr^).dwCount := val;
end;
function __WSASERVICECLASSINFO__Wrapper.getdwCount : DWORD;
begin
result := WSASERVICECLASSINFO(GetRecordPtr^).dwCount;
end;
function __WSASERVICECLASSINFOA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __WSASERVICECLASSINFOA__Wrapper.setdwCount(const val : DWORD);
begin
WSASERVICECLASSINFOA(GetRecordPtr^).dwCount := val;
end;
function __WSASERVICECLASSINFOA__Wrapper.getdwCount : DWORD;
begin
result := WSASERVICECLASSINFOA(GetRecordPtr^).dwCount;
end;
function __WSASERVICECLASSINFOW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __WSASERVICECLASSINFOW__Wrapper.setdwCount(const val : DWORD);
begin
WSASERVICECLASSINFOW(GetRecordPtr^).dwCount := val;
end;
function __WSASERVICECLASSINFOW__Wrapper.getdwCount : DWORD;
begin
result := WSASERVICECLASSINFOW(GetRecordPtr^).dwCount;
end;
function __WSAVERSION__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __WSAVERSION__Wrapper.setdwVersion(const val : DWORD);
begin
WSAVERSION(GetRecordPtr^).dwVersion := val;
end;
function __WSAVERSION__Wrapper.getdwVersion : DWORD;
begin
result := WSAVERSION(GetRecordPtr^).dwVersion;
end;
procedure __WSAVERSION__Wrapper.setecHow(const val : TWSAEComparator);
begin
WSAVERSION(GetRecordPtr^).ecHow := val;
end;
function __WSAVERSION__Wrapper.getecHow : TWSAEComparator;
begin
result := WSAVERSION(GetRecordPtr^).ecHow;
end;
function __TRANSMIT_FILE_BUFFERS_ : IDispatch;
begin
  result := ___TRANSMIT_FILE_BUFFERS__Wrapper.Create;
end;
function _AAL_PARAMETERS_IE_ : IDispatch;
begin
  result := __AAL_PARAMETERS_IE__Wrapper.Create;
end;
function _AAL5_PARAMETERS_ : IDispatch;
begin
  result := __AAL5_PARAMETERS__Wrapper.Create;
end;
function _AALUSER_PARAMETERS_ : IDispatch;
begin
  result := __AALUSER_PARAMETERS__Wrapper.Create;
end;
function _ADDRINFO_ : IDispatch;
begin
  result := __ADDRINFO__Wrapper.Create;
end;
function _AFPROTOCOLS_ : IDispatch;
begin
  result := __AFPROTOCOLS__Wrapper.Create;
end;
function _ATM_ADDRESS_ : IDispatch;
begin
  result := __ATM_ADDRESS__Wrapper.Create;
end;
function _ATM_BHLI_ : IDispatch;
begin
  result := __ATM_BHLI__Wrapper.Create;
end;
function _ATM_BHLI_IE_ : IDispatch;
begin
  result := __ATM_BHLI_IE__Wrapper.Create;
end;
function _ATM_BLLI_ : IDispatch;
begin
  result := __ATM_BLLI__Wrapper.Create;
end;
function _ATM_BLLI_IE_ : IDispatch;
begin
  result := __ATM_BLLI_IE__Wrapper.Create;
end;
function _ATM_BROADBAND_BEARER_CAPABILITY_IE_ : IDispatch;
begin
  result := __ATM_BROADBAND_BEARER_CAPABILITY_IE__Wrapper.Create;
end;
function _ATM_CALLED_PARTY_NUMBER_IE_ : IDispatch;
begin
  result := __ATM_CALLED_PARTY_NUMBER_IE__Wrapper.Create;
end;
function _ATM_CALLED_PARTY_SUBADDRESS_IE_ : IDispatch;
begin
  result := __ATM_CALLED_PARTY_SUBADDRESS_IE__Wrapper.Create;
end;
function _ATM_CALLING_PARTY_NUMBER_IE_ : IDispatch;
begin
  result := __ATM_CALLING_PARTY_NUMBER_IE__Wrapper.Create;
end;
function _ATM_CALLING_PARTY_SUBADDRESS_IE_ : IDispatch;
begin
  result := __ATM_CALLING_PARTY_SUBADDRESS_IE__Wrapper.Create;
end;
function _ATM_CAUSE_IE_ : IDispatch;
begin
  result := __ATM_CAUSE_IE__Wrapper.Create;
end;
function _ATM_CONNECTION_ID_ : IDispatch;
begin
  result := __ATM_CONNECTION_ID__Wrapper.Create;
end;
function _ATM_PVC_PARAMS_ : IDispatch;
begin
  result := __ATM_PVC_PARAMS__Wrapper.Create;
end;
function _ATM_QOS_CLASS_IE_ : IDispatch;
begin
  result := __ATM_QOS_CLASS_IE__Wrapper.Create;
end;
function _ATM_TD_ : IDispatch;
begin
  result := __ATM_TD__Wrapper.Create;
end;
function _ATM_TRAFFIC_DESCRIPTOR_IE_ : IDispatch;
begin
  result := __ATM_TRAFFIC_DESCRIPTOR_IE__Wrapper.Create;
end;
function _ATM_TRANSIT_NETWORK_SELECTION_IE_ : IDispatch;
begin
  result := __ATM_TRANSIT_NETWORK_SELECTION_IE__Wrapper.Create;
end;
function _BLOB_ : IDispatch;
begin
  result := __BLOB__Wrapper.Create;
end;
function _CSADDR_INFO_ : IDispatch;
begin
  result := __CSADDR_INFO__Wrapper.Create;
end;
function _FLOWSPEC_ : IDispatch;
begin
  result := __FLOWSPEC__Wrapper.Create;
end;
function _hostent_ : IDispatch;
begin
  result := __hostent__Wrapper.Create;
end;
function _in_addr_ : IDispatch;
begin
  result := __in_addr__Wrapper.Create;
end;
function _IN_PKTINFO_ : IDispatch;
begin
  result := __IN_PKTINFO__Wrapper.Create;
end;
function _IN6_ADDR_ : IDispatch;
begin
  result := __IN6_ADDR__Wrapper.Create;
end;
function _IN6_PKTINFO_ : IDispatch;
begin
  result := __IN6_PKTINFO__Wrapper.Create;
end;
function _INTERFACE_INFO_ : IDispatch;
begin
  result := __INTERFACE_INFO__Wrapper.Create;
end;
function _INTERFACE_INFO_EX_ : IDispatch;
begin
  result := __INTERFACE_INFO_EX__Wrapper.Create;
end;
function _ip_mreq_ : IDispatch;
begin
  result := __ip_mreq__Wrapper.Create;
end;
function _ip_mreq_source_ : IDispatch;
begin
  result := __ip_mreq_source__Wrapper.Create;
end;
function _ip_msfilter_ : IDispatch;
begin
  result := __ip_msfilter__Wrapper.Create;
end;
function _ipv6_mreq_ : IDispatch;
begin
  result := __ipv6_mreq__Wrapper.Create;
end;
function _IPX_ADDRESS_DATA_ : IDispatch;
begin
  result := __IPX_ADDRESS_DATA__Wrapper.Create;
end;
function _IPX_NETNUM_DATA_ : IDispatch;
begin
  result := __IPX_NETNUM_DATA__Wrapper.Create;
end;
function _IPX_SPXCONNSTATUS_DATA_ : IDispatch;
begin
  result := __IPX_SPXCONNSTATUS_DATA__Wrapper.Create;
end;
function _linger_ : IDispatch;
begin
  result := __linger__Wrapper.Create;
end;
function _netent_ : IDispatch;
begin
  result := __netent__Wrapper.Create;
end;
function _protoent_ : IDispatch;
begin
  result := __protoent__Wrapper.Create;
end;
function _Q2931_IE_ : IDispatch;
begin
  result := __Q2931_IE__Wrapper.Create;
end;
function _QOS_ : IDispatch;
begin
  result := __QOS__Wrapper.Create;
end;
function _servent_ : IDispatch;
begin
  result := __servent__Wrapper.Create;
end;
function _SOCKADDR_ : IDispatch;
begin
  result := __SOCKADDR__Wrapper.Create;
end;
function _SOCKADDR_ATM_ : IDispatch;
begin
  result := __SOCKADDR_ATM__Wrapper.Create;
end;
function _sockaddr_gen_ : IDispatch;
begin
  result := __sockaddr_gen__Wrapper.Create;
end;
function _sockaddr_in_ : IDispatch;
begin
  result := __sockaddr_in__Wrapper.Create;
end;
function _SOCKADDR_IN6_ : IDispatch;
begin
  result := __SOCKADDR_IN6__Wrapper.Create;
end;
function _sockaddr_in6_old_ : IDispatch;
begin
  result := __sockaddr_in6_old__Wrapper.Create;
end;
function _SOCKADDR_IPX_ : IDispatch;
begin
  result := __SOCKADDR_IPX__Wrapper.Create;
end;
function _SOCKADDR_NB_ : IDispatch;
begin
  result := __SOCKADDR_NB__Wrapper.Create;
end;
function _SOCKET_ADDRESS_ : IDispatch;
begin
  result := __SOCKET_ADDRESS__Wrapper.Create;
end;
function _SOCKET_ADDRESS_LIST_ : IDispatch;
begin
  result := __SOCKET_ADDRESS_LIST__Wrapper.Create;
end;
function _sockproto_ : IDispatch;
begin
  result := __sockproto__Wrapper.Create;
end;
function _SunB_ : IDispatch;
begin
  result := __SunB__Wrapper.Create;
end;
function _SunW_ : IDispatch;
begin
  result := __SunW__Wrapper.Create;
end;
function _TAddrInfo_ : IDispatch;
begin
  result := __TAddrInfo__Wrapper.Create;
end;
function _TAFProtocols_ : IDispatch;
begin
  result := __TAFProtocols__Wrapper.Create;
end;
function _TBLOB_ : IDispatch;
begin
  result := __TBLOB__Wrapper.Create;
end;
function _TCSAddr_Info_ : IDispatch;
begin
  result := __TCSAddr_Info__Wrapper.Create;
end;
function _TFDSet_ : IDispatch;
begin
  result := __TFDSet__Wrapper.Create;
end;
function _TFlowSpec_ : IDispatch;
begin
  result := __TFlowSpec__Wrapper.Create;
end;
function _THostEnt_ : IDispatch;
begin
  result := __THostEnt__Wrapper.Create;
end;
function _timeval_ : IDispatch;
begin
  result := __timeval__Wrapper.Create;
end;
function _TIn6Addr_ : IDispatch;
begin
  result := __TIn6Addr__Wrapper.Create;
end;
function _TIn6PktInfo_ : IDispatch;
begin
  result := __TIn6PktInfo__Wrapper.Create;
end;
function _TInAddr_ : IDispatch;
begin
  result := __TInAddr__Wrapper.Create;
end;
function _TInPktInfo_ : IDispatch;
begin
  result := __TInPktInfo__Wrapper.Create;
end;
function _TInterface_Info_ : IDispatch;
begin
  result := __TInterface_Info__Wrapper.Create;
end;
function _TInterface_Info_Ex_ : IDispatch;
begin
  result := __TInterface_Info_Ex__Wrapper.Create;
end;
function _TIPXAddressData_ : IDispatch;
begin
  result := __TIPXAddressData__Wrapper.Create;
end;
function _TIPXNetNumData_ : IDispatch;
begin
  result := __TIPXNetNumData__Wrapper.Create;
end;
function _TIPXSPXConnStatusData_ : IDispatch;
begin
  result := __TIPXSPXConnStatusData__Wrapper.Create;
end;
function _TLinger_ : IDispatch;
begin
  result := __TLinger__Wrapper.Create;
end;
function _TNetEnt_ : IDispatch;
begin
  result := __TNetEnt__Wrapper.Create;
end;
function _TProtoEnt_ : IDispatch;
begin
  result := __TProtoEnt__Wrapper.Create;
end;
function _TQualityOfService_ : IDispatch;
begin
  result := __TQualityOfService__Wrapper.Create;
end;
function _TRANSMIT_FILE_BUFFERS_ : IDispatch;
begin
  result := __TRANSMIT_FILE_BUFFERS__Wrapper.Create;
end;
function _TServEnt_ : IDispatch;
begin
  result := __TServEnt__Wrapper.Create;
end;
function _TSockAddr_ : IDispatch;
begin
  result := __TSockAddr__Wrapper.Create;
end;
function _TSockAddr_IPX_ : IDispatch;
begin
  result := __TSockAddr_IPX__Wrapper.Create;
end;
function _TSockAddrATM_ : IDispatch;
begin
  result := __TSockAddrATM__Wrapper.Create;
end;
function _TSockAddrGen_ : IDispatch;
begin
  result := __TSockAddrGen__Wrapper.Create;
end;
function _TSockAddrIn_ : IDispatch;
begin
  result := __TSockAddrIn__Wrapper.Create;
end;
function _TSockAddrIn6_ : IDispatch;
begin
  result := __TSockAddrIn6__Wrapper.Create;
end;
function _TSockAddrIPX_ : IDispatch;
begin
  result := __TSockAddrIPX__Wrapper.Create;
end;
function _TSockAddrNB_ : IDispatch;
begin
  result := __TSockAddrNB__Wrapper.Create;
end;
function _TSocket_Address_ : IDispatch;
begin
  result := __TSocket_Address__Wrapper.Create;
end;
function _TSocket_Address_List_ : IDispatch;
begin
  result := __TSocket_Address_List__Wrapper.Create;
end;
function _TSockProto_ : IDispatch;
begin
  result := __TSockProto__Wrapper.Create;
end;
function _TTimeVal_ : IDispatch;
begin
  result := __TTimeVal__Wrapper.Create;
end;
function _TTransmitFileBuffers_ : IDispatch;
begin
  result := __TTransmitFileBuffers__Wrapper.Create;
end;
function _TWSABuf_ : IDispatch;
begin
  result := __TWSABuf__Wrapper.Create;
end;
function _TWSAData_ : IDispatch;
begin
  result := __TWSAData__Wrapper.Create;
end;
function _TWSANameSpace_Info_ : IDispatch;
begin
  result := __TWSANameSpace_Info__Wrapper.Create;
end;
function _TWSANameSpace_InfoA_ : IDispatch;
begin
  result := __TWSANameSpace_InfoA__Wrapper.Create;
end;
function _TWSANameSpace_InfoW_ : IDispatch;
begin
  result := __TWSANameSpace_InfoW__Wrapper.Create;
end;
function _TWSANetworkEvents_ : IDispatch;
begin
  result := __TWSANetworkEvents__Wrapper.Create;
end;
function _TWSANSClassInfo_ : IDispatch;
begin
  result := __TWSANSClassInfo__Wrapper.Create;
end;
function _TWSANSClassInfoA_ : IDispatch;
begin
  result := __TWSANSClassInfoA__Wrapper.Create;
end;
function _TWSANSClassInfoW_ : IDispatch;
begin
  result := __TWSANSClassInfoW__Wrapper.Create;
end;
function _TWSAOverlapped_ : IDispatch;
begin
  result := __TWSAOverlapped__Wrapper.Create;
end;
function _TWSAProtocol_Info_ : IDispatch;
begin
  result := __TWSAProtocol_Info__Wrapper.Create;
end;
function _TWSAProtocol_InfoA_ : IDispatch;
begin
  result := __TWSAProtocol_InfoA__Wrapper.Create;
end;
function _TWSAProtocol_InfoW_ : IDispatch;
begin
  result := __TWSAProtocol_InfoW__Wrapper.Create;
end;
function _TWSAProtocolChain_ : IDispatch;
begin
  result := __TWSAProtocolChain__Wrapper.Create;
end;
function _TWSAQuerySet_ : IDispatch;
begin
  result := __TWSAQuerySet__Wrapper.Create;
end;
function _TWSAQuerySetA_ : IDispatch;
begin
  result := __TWSAQuerySetA__Wrapper.Create;
end;
function _TWSAQuerySetW_ : IDispatch;
begin
  result := __TWSAQuerySetW__Wrapper.Create;
end;
function _TWSAServiceClassInfo_ : IDispatch;
begin
  result := __TWSAServiceClassInfo__Wrapper.Create;
end;
function _TWSAServiceClassInfoA_ : IDispatch;
begin
  result := __TWSAServiceClassInfoA__Wrapper.Create;
end;
function _TWSAServiceClassInfoW_ : IDispatch;
begin
  result := __TWSAServiceClassInfoW__Wrapper.Create;
end;
function _TWSAVersion_ : IDispatch;
begin
  result := __TWSAVersion__Wrapper.Create;
end;
function _WSABUF_ : IDispatch;
begin
  result := __WSABUF__Wrapper.Create;
end;
function _WSADATA_ : IDispatch;
begin
  result := __WSADATA__Wrapper.Create;
end;
function _WSANAMESPACE_INFO_ : IDispatch;
begin
  result := __WSANAMESPACE_INFO__Wrapper.Create;
end;
function _WSANAMESPACE_INFOA_ : IDispatch;
begin
  result := __WSANAMESPACE_INFOA__Wrapper.Create;
end;
function _WSANAMESPACE_INFOW_ : IDispatch;
begin
  result := __WSANAMESPACE_INFOW__Wrapper.Create;
end;
function _WSANETWORKEVENTS_ : IDispatch;
begin
  result := __WSANETWORKEVENTS__Wrapper.Create;
end;
function _WSANSCLASSINFO_ : IDispatch;
begin
  result := __WSANSCLASSINFO__Wrapper.Create;
end;
function _WSANSCLASSINFOA_ : IDispatch;
begin
  result := __WSANSCLASSINFOA__Wrapper.Create;
end;
function _WSANSCLASSINFOW_ : IDispatch;
begin
  result := __WSANSCLASSINFOW__Wrapper.Create;
end;
function _WSAOVERLAPPED_ : IDispatch;
begin
  result := __WSAOVERLAPPED__Wrapper.Create;
end;
function _WSAPROTOCOL_INFO_ : IDispatch;
begin
  result := __WSAPROTOCOL_INFO__Wrapper.Create;
end;
function _WSAPROTOCOL_INFOA_ : IDispatch;
begin
  result := __WSAPROTOCOL_INFOA__Wrapper.Create;
end;
function _WSAPROTOCOL_INFOW_ : IDispatch;
begin
  result := __WSAPROTOCOL_INFOW__Wrapper.Create;
end;
function _WSAPROTOCOLCHAIN_ : IDispatch;
begin
  result := __WSAPROTOCOLCHAIN__Wrapper.Create;
end;
function _WSAQUERYSETA_ : IDispatch;
begin
  result := __WSAQUERYSETA__Wrapper.Create;
end;
function _WSAQUERYSETW_ : IDispatch;
begin
  result := __WSAQUERYSETW__Wrapper.Create;
end;
function _WSASERVICECLASSINFO_ : IDispatch;
begin
  result := __WSASERVICECLASSINFO__Wrapper.Create;
end;
function _WSASERVICECLASSINFOA_ : IDispatch;
begin
  result := __WSASERVICECLASSINFOA__Wrapper.Create;
end;
function _WSASERVICECLASSINFOW_ : IDispatch;
begin
  result := __WSASERVICECLASSINFOW__Wrapper.Create;
end;
function _WSAVERSION_ : IDispatch;
begin
  result := __WSAVERSION__Wrapper.Create;
end;
function ____WSAStartup__Wrapper(const p0 : Word;
const p1 : IDispatch): Integer;
var
__p1 : ^TWSAData;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := WSAStartup(p0,__p1^);
end;

procedure ____FD_CLR__Wrapper(p0 : TSocket;
const p1 : IDispatch);
var
__p1 : ^TFDSet;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
FD_CLR(p0,__p1^);
end;

function ____FD_ISSET__Wrapper(p0 : TSocket;
const p1 : IDispatch): Boolean;
var
__p1 : ^TFDSet;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := FD_ISSET(p0,__p1^);
end;

procedure ____FD_SET__Wrapper(p0 : TSocket;
const p1 : IDispatch);
var
__p1 : ^TFDSet;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
FD_SET(p0,__p1^);
end;

procedure ____FD_ZERO__Wrapper(const p0 : IDispatch);
var
__p0 : ^TFDSet;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
FD_ZERO(__p0^);
end;

function ____IN6ADDR_ANY_INIT__Wrapper: IDispatch;
var
__result : TIn6Addr;
__wrapper : __TIn6Addr__Wrapper;
begin
__result := IN6ADDR_ANY_INIT;
__wrapper := __TIn6Addr__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

function ____IN6ADDR_LOOPBACK_INIT__Wrapper: IDispatch;
var
__result : TIn6Addr;
__wrapper : __TIn6Addr__Wrapper;
begin
__result := IN6ADDR_LOOPBACK_INIT;
__wrapper := __TIn6Addr__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;


type ___TRANSMIT_FILE_BUFFERS__Wrapper__ = class(___TRANSMIT_FILE_BUFFERS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___TRANSMIT_FILE_BUFFERS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_TRANSMIT_FILE_BUFFERSToVariant(var R : _TRANSMIT_FILE_BUFFERS) : OleVariant;
var
__rw : ___TRANSMIT_FILE_BUFFERS__Wrapper__;
begin
__rw := ___TRANSMIT_FILE_BUFFERS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_TRANSMIT_FILE_BUFFERS(const V : OleVariant) : _TRANSMIT_FILE_BUFFERS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _TRANSMIT_FILE_BUFFERS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __AAL_PARAMETERS_IE__Wrapper__ = class(__AAL_PARAMETERS_IE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __AAL_PARAMETERS_IE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertAAL_PARAMETERS_IEToVariant(var R : AAL_PARAMETERS_IE) : OleVariant;
var
__rw : __AAL_PARAMETERS_IE__Wrapper__;
begin
__rw := __AAL_PARAMETERS_IE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToAAL_PARAMETERS_IE(const V : OleVariant) : AAL_PARAMETERS_IE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := AAL_PARAMETERS_IE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __AAL5_PARAMETERS__Wrapper__ = class(__AAL5_PARAMETERS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __AAL5_PARAMETERS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertAAL5_PARAMETERSToVariant(var R : AAL5_PARAMETERS) : OleVariant;
var
__rw : __AAL5_PARAMETERS__Wrapper__;
begin
__rw := __AAL5_PARAMETERS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToAAL5_PARAMETERS(const V : OleVariant) : AAL5_PARAMETERS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := AAL5_PARAMETERS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __AALUSER_PARAMETERS__Wrapper__ = class(__AALUSER_PARAMETERS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __AALUSER_PARAMETERS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertAALUSER_PARAMETERSToVariant(var R : AALUSER_PARAMETERS) : OleVariant;
var
__rw : __AALUSER_PARAMETERS__Wrapper__;
begin
__rw := __AALUSER_PARAMETERS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToAALUSER_PARAMETERS(const V : OleVariant) : AALUSER_PARAMETERS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := AALUSER_PARAMETERS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ADDRINFO__Wrapper__ = class(__ADDRINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ADDRINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertADDRINFOToVariant(var R : ADDRINFO) : OleVariant;
var
__rw : __ADDRINFO__Wrapper__;
begin
__rw := __ADDRINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToADDRINFO(const V : OleVariant) : ADDRINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ADDRINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __AFPROTOCOLS__Wrapper__ = class(__AFPROTOCOLS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __AFPROTOCOLS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertAFPROTOCOLSToVariant(var R : AFPROTOCOLS) : OleVariant;
var
__rw : __AFPROTOCOLS__Wrapper__;
begin
__rw := __AFPROTOCOLS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToAFPROTOCOLS(const V : OleVariant) : AFPROTOCOLS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := AFPROTOCOLS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ATM_ADDRESS__Wrapper__ = class(__ATM_ADDRESS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ATM_ADDRESS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertATM_ADDRESSToVariant(var R : ATM_ADDRESS) : OleVariant;
var
__rw : __ATM_ADDRESS__Wrapper__;
begin
__rw := __ATM_ADDRESS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToATM_ADDRESS(const V : OleVariant) : ATM_ADDRESS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ATM_ADDRESS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ATM_BHLI__Wrapper__ = class(__ATM_BHLI__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ATM_BHLI__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertATM_BHLIToVariant(var R : ATM_BHLI) : OleVariant;
var
__rw : __ATM_BHLI__Wrapper__;
begin
__rw := __ATM_BHLI__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToATM_BHLI(const V : OleVariant) : ATM_BHLI;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ATM_BHLI((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ATM_BHLI_IE__Wrapper__ = class(__ATM_BHLI_IE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ATM_BHLI_IE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertATM_BHLI_IEToVariant(var R : ATM_BHLI_IE) : OleVariant;
var
__rw : __ATM_BHLI_IE__Wrapper__;
begin
__rw := __ATM_BHLI_IE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToATM_BHLI_IE(const V : OleVariant) : ATM_BHLI_IE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ATM_BHLI_IE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ATM_BLLI__Wrapper__ = class(__ATM_BLLI__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ATM_BLLI__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertATM_BLLIToVariant(var R : ATM_BLLI) : OleVariant;
var
__rw : __ATM_BLLI__Wrapper__;
begin
__rw := __ATM_BLLI__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToATM_BLLI(const V : OleVariant) : ATM_BLLI;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ATM_BLLI((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ATM_BLLI_IE__Wrapper__ = class(__ATM_BLLI_IE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ATM_BLLI_IE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertATM_BLLI_IEToVariant(var R : ATM_BLLI_IE) : OleVariant;
var
__rw : __ATM_BLLI_IE__Wrapper__;
begin
__rw := __ATM_BLLI_IE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToATM_BLLI_IE(const V : OleVariant) : ATM_BLLI_IE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ATM_BLLI_IE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ATM_BROADBAND_BEARER_CAPABILITY_IE__Wrapper__ = class(__ATM_BROADBAND_BEARER_CAPABILITY_IE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ATM_BROADBAND_BEARER_CAPABILITY_IE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertATM_BROADBAND_BEARER_CAPABILITY_IEToVariant(var R : ATM_BROADBAND_BEARER_CAPABILITY_IE) : OleVariant;
var
__rw : __ATM_BROADBAND_BEARER_CAPABILITY_IE__Wrapper__;
begin
__rw := __ATM_BROADBAND_BEARER_CAPABILITY_IE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToATM_BROADBAND_BEARER_CAPABILITY_IE(const V : OleVariant) : ATM_BROADBAND_BEARER_CAPABILITY_IE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ATM_BROADBAND_BEARER_CAPABILITY_IE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ATM_CALLED_PARTY_NUMBER_IE__Wrapper__ = class(__ATM_CALLED_PARTY_NUMBER_IE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ATM_CALLED_PARTY_NUMBER_IE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertATM_CALLED_PARTY_NUMBER_IEToVariant(var R : ATM_CALLED_PARTY_NUMBER_IE) : OleVariant;
var
__rw : __ATM_CALLED_PARTY_NUMBER_IE__Wrapper__;
begin
__rw := __ATM_CALLED_PARTY_NUMBER_IE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToATM_CALLED_PARTY_NUMBER_IE(const V : OleVariant) : ATM_CALLED_PARTY_NUMBER_IE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ATM_CALLED_PARTY_NUMBER_IE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ATM_CALLED_PARTY_SUBADDRESS_IE__Wrapper__ = class(__ATM_CALLED_PARTY_SUBADDRESS_IE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ATM_CALLED_PARTY_SUBADDRESS_IE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertATM_CALLED_PARTY_SUBADDRESS_IEToVariant(var R : ATM_CALLED_PARTY_SUBADDRESS_IE) : OleVariant;
var
__rw : __ATM_CALLED_PARTY_SUBADDRESS_IE__Wrapper__;
begin
__rw := __ATM_CALLED_PARTY_SUBADDRESS_IE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToATM_CALLED_PARTY_SUBADDRESS_IE(const V : OleVariant) : ATM_CALLED_PARTY_SUBADDRESS_IE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ATM_CALLED_PARTY_SUBADDRESS_IE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ATM_CALLING_PARTY_NUMBER_IE__Wrapper__ = class(__ATM_CALLING_PARTY_NUMBER_IE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ATM_CALLING_PARTY_NUMBER_IE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertATM_CALLING_PARTY_NUMBER_IEToVariant(var R : ATM_CALLING_PARTY_NUMBER_IE) : OleVariant;
var
__rw : __ATM_CALLING_PARTY_NUMBER_IE__Wrapper__;
begin
__rw := __ATM_CALLING_PARTY_NUMBER_IE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToATM_CALLING_PARTY_NUMBER_IE(const V : OleVariant) : ATM_CALLING_PARTY_NUMBER_IE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ATM_CALLING_PARTY_NUMBER_IE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ATM_CALLING_PARTY_SUBADDRESS_IE__Wrapper__ = class(__ATM_CALLING_PARTY_SUBADDRESS_IE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ATM_CALLING_PARTY_SUBADDRESS_IE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertATM_CALLING_PARTY_SUBADDRESS_IEToVariant(var R : ATM_CALLING_PARTY_SUBADDRESS_IE) : OleVariant;
var
__rw : __ATM_CALLING_PARTY_SUBADDRESS_IE__Wrapper__;
begin
__rw := __ATM_CALLING_PARTY_SUBADDRESS_IE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToATM_CALLING_PARTY_SUBADDRESS_IE(const V : OleVariant) : ATM_CALLING_PARTY_SUBADDRESS_IE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ATM_CALLING_PARTY_SUBADDRESS_IE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ATM_CAUSE_IE__Wrapper__ = class(__ATM_CAUSE_IE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ATM_CAUSE_IE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertATM_CAUSE_IEToVariant(var R : ATM_CAUSE_IE) : OleVariant;
var
__rw : __ATM_CAUSE_IE__Wrapper__;
begin
__rw := __ATM_CAUSE_IE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToATM_CAUSE_IE(const V : OleVariant) : ATM_CAUSE_IE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ATM_CAUSE_IE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ATM_CONNECTION_ID__Wrapper__ = class(__ATM_CONNECTION_ID__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ATM_CONNECTION_ID__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertATM_CONNECTION_IDToVariant(var R : ATM_CONNECTION_ID) : OleVariant;
var
__rw : __ATM_CONNECTION_ID__Wrapper__;
begin
__rw := __ATM_CONNECTION_ID__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToATM_CONNECTION_ID(const V : OleVariant) : ATM_CONNECTION_ID;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ATM_CONNECTION_ID((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ATM_PVC_PARAMS__Wrapper__ = class(__ATM_PVC_PARAMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ATM_PVC_PARAMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertATM_PVC_PARAMSToVariant(var R : ATM_PVC_PARAMS) : OleVariant;
var
__rw : __ATM_PVC_PARAMS__Wrapper__;
begin
__rw := __ATM_PVC_PARAMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToATM_PVC_PARAMS(const V : OleVariant) : ATM_PVC_PARAMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ATM_PVC_PARAMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ATM_QOS_CLASS_IE__Wrapper__ = class(__ATM_QOS_CLASS_IE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ATM_QOS_CLASS_IE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertATM_QOS_CLASS_IEToVariant(var R : ATM_QOS_CLASS_IE) : OleVariant;
var
__rw : __ATM_QOS_CLASS_IE__Wrapper__;
begin
__rw := __ATM_QOS_CLASS_IE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToATM_QOS_CLASS_IE(const V : OleVariant) : ATM_QOS_CLASS_IE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ATM_QOS_CLASS_IE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ATM_TD__Wrapper__ = class(__ATM_TD__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ATM_TD__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertATM_TDToVariant(var R : ATM_TD) : OleVariant;
var
__rw : __ATM_TD__Wrapper__;
begin
__rw := __ATM_TD__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToATM_TD(const V : OleVariant) : ATM_TD;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ATM_TD((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ATM_TRAFFIC_DESCRIPTOR_IE__Wrapper__ = class(__ATM_TRAFFIC_DESCRIPTOR_IE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ATM_TRAFFIC_DESCRIPTOR_IE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertATM_TRAFFIC_DESCRIPTOR_IEToVariant(var R : ATM_TRAFFIC_DESCRIPTOR_IE) : OleVariant;
var
__rw : __ATM_TRAFFIC_DESCRIPTOR_IE__Wrapper__;
begin
__rw := __ATM_TRAFFIC_DESCRIPTOR_IE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToATM_TRAFFIC_DESCRIPTOR_IE(const V : OleVariant) : ATM_TRAFFIC_DESCRIPTOR_IE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ATM_TRAFFIC_DESCRIPTOR_IE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ATM_TRANSIT_NETWORK_SELECTION_IE__Wrapper__ = class(__ATM_TRANSIT_NETWORK_SELECTION_IE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ATM_TRANSIT_NETWORK_SELECTION_IE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertATM_TRANSIT_NETWORK_SELECTION_IEToVariant(var R : ATM_TRANSIT_NETWORK_SELECTION_IE) : OleVariant;
var
__rw : __ATM_TRANSIT_NETWORK_SELECTION_IE__Wrapper__;
begin
__rw := __ATM_TRANSIT_NETWORK_SELECTION_IE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToATM_TRANSIT_NETWORK_SELECTION_IE(const V : OleVariant) : ATM_TRANSIT_NETWORK_SELECTION_IE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ATM_TRANSIT_NETWORK_SELECTION_IE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __BLOB__Wrapper__ = class(__BLOB__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __BLOB__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertBLOBToVariant(var R : BLOB) : OleVariant;
var
__rw : __BLOB__Wrapper__;
begin
__rw := __BLOB__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToBLOB(const V : OleVariant) : BLOB;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := BLOB((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __CSADDR_INFO__Wrapper__ = class(__CSADDR_INFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __CSADDR_INFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertCSADDR_INFOToVariant(var R : CSADDR_INFO) : OleVariant;
var
__rw : __CSADDR_INFO__Wrapper__;
begin
__rw := __CSADDR_INFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToCSADDR_INFO(const V : OleVariant) : CSADDR_INFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := CSADDR_INFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __FLOWSPEC__Wrapper__ = class(__FLOWSPEC__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __FLOWSPEC__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertFLOWSPECToVariant(var R : FLOWSPEC) : OleVariant;
var
__rw : __FLOWSPEC__Wrapper__;
begin
__rw := __FLOWSPEC__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToFLOWSPEC(const V : OleVariant) : FLOWSPEC;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := FLOWSPEC((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __hostent__Wrapper__ = class(__hostent__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __hostent__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverthostentToVariant(var R : hostent) : OleVariant;
var
__rw : __hostent__Wrapper__;
begin
__rw := __hostent__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTohostent(const V : OleVariant) : hostent;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := hostent((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __in_addr__Wrapper__ = class(__in_addr__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __in_addr__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convertin_addrToVariant(var R : in_addr) : OleVariant;
var
__rw : __in_addr__Wrapper__;
begin
__rw := __in_addr__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToin_addr(const V : OleVariant) : in_addr;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := in_addr((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __IN_PKTINFO__Wrapper__ = class(__IN_PKTINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __IN_PKTINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertIN_PKTINFOToVariant(var R : IN_PKTINFO) : OleVariant;
var
__rw : __IN_PKTINFO__Wrapper__;
begin
__rw := __IN_PKTINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToIN_PKTINFO(const V : OleVariant) : IN_PKTINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := IN_PKTINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __IN6_ADDR__Wrapper__ = class(__IN6_ADDR__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __IN6_ADDR__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertIN6_ADDRToVariant(var R : IN6_ADDR) : OleVariant;
var
__rw : __IN6_ADDR__Wrapper__;
begin
__rw := __IN6_ADDR__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToIN6_ADDR(const V : OleVariant) : IN6_ADDR;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := IN6_ADDR((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __IN6_PKTINFO__Wrapper__ = class(__IN6_PKTINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __IN6_PKTINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertIN6_PKTINFOToVariant(var R : IN6_PKTINFO) : OleVariant;
var
__rw : __IN6_PKTINFO__Wrapper__;
begin
__rw := __IN6_PKTINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToIN6_PKTINFO(const V : OleVariant) : IN6_PKTINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := IN6_PKTINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __INTERFACE_INFO__Wrapper__ = class(__INTERFACE_INFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __INTERFACE_INFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertINTERFACE_INFOToVariant(var R : INTERFACE_INFO) : OleVariant;
var
__rw : __INTERFACE_INFO__Wrapper__;
begin
__rw := __INTERFACE_INFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToINTERFACE_INFO(const V : OleVariant) : INTERFACE_INFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := INTERFACE_INFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __INTERFACE_INFO_EX__Wrapper__ = class(__INTERFACE_INFO_EX__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __INTERFACE_INFO_EX__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertINTERFACE_INFO_EXToVariant(var R : INTERFACE_INFO_EX) : OleVariant;
var
__rw : __INTERFACE_INFO_EX__Wrapper__;
begin
__rw := __INTERFACE_INFO_EX__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToINTERFACE_INFO_EX(const V : OleVariant) : INTERFACE_INFO_EX;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := INTERFACE_INFO_EX((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ip_mreq__Wrapper__ = class(__ip_mreq__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ip_mreq__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convertip_mreqToVariant(var R : ip_mreq) : OleVariant;
var
__rw : __ip_mreq__Wrapper__;
begin
__rw := __ip_mreq__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToip_mreq(const V : OleVariant) : ip_mreq;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ip_mreq((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ip_mreq_source__Wrapper__ = class(__ip_mreq_source__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ip_mreq_source__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convertip_mreq_sourceToVariant(var R : ip_mreq_source) : OleVariant;
var
__rw : __ip_mreq_source__Wrapper__;
begin
__rw := __ip_mreq_source__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToip_mreq_source(const V : OleVariant) : ip_mreq_source;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ip_mreq_source((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ip_msfilter__Wrapper__ = class(__ip_msfilter__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ip_msfilter__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convertip_msfilterToVariant(var R : ip_msfilter) : OleVariant;
var
__rw : __ip_msfilter__Wrapper__;
begin
__rw := __ip_msfilter__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToip_msfilter(const V : OleVariant) : ip_msfilter;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ip_msfilter((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ipv6_mreq__Wrapper__ = class(__ipv6_mreq__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ipv6_mreq__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convertipv6_mreqToVariant(var R : ipv6_mreq) : OleVariant;
var
__rw : __ipv6_mreq__Wrapper__;
begin
__rw := __ipv6_mreq__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToipv6_mreq(const V : OleVariant) : ipv6_mreq;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ipv6_mreq((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __IPX_ADDRESS_DATA__Wrapper__ = class(__IPX_ADDRESS_DATA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __IPX_ADDRESS_DATA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertIPX_ADDRESS_DATAToVariant(var R : IPX_ADDRESS_DATA) : OleVariant;
var
__rw : __IPX_ADDRESS_DATA__Wrapper__;
begin
__rw := __IPX_ADDRESS_DATA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToIPX_ADDRESS_DATA(const V : OleVariant) : IPX_ADDRESS_DATA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := IPX_ADDRESS_DATA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __IPX_NETNUM_DATA__Wrapper__ = class(__IPX_NETNUM_DATA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __IPX_NETNUM_DATA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertIPX_NETNUM_DATAToVariant(var R : IPX_NETNUM_DATA) : OleVariant;
var
__rw : __IPX_NETNUM_DATA__Wrapper__;
begin
__rw := __IPX_NETNUM_DATA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToIPX_NETNUM_DATA(const V : OleVariant) : IPX_NETNUM_DATA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := IPX_NETNUM_DATA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __IPX_SPXCONNSTATUS_DATA__Wrapper__ = class(__IPX_SPXCONNSTATUS_DATA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __IPX_SPXCONNSTATUS_DATA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertIPX_SPXCONNSTATUS_DATAToVariant(var R : IPX_SPXCONNSTATUS_DATA) : OleVariant;
var
__rw : __IPX_SPXCONNSTATUS_DATA__Wrapper__;
begin
__rw := __IPX_SPXCONNSTATUS_DATA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToIPX_SPXCONNSTATUS_DATA(const V : OleVariant) : IPX_SPXCONNSTATUS_DATA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := IPX_SPXCONNSTATUS_DATA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __linger__Wrapper__ = class(__linger__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __linger__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertlingerToVariant(var R : linger) : OleVariant;
var
__rw : __linger__Wrapper__;
begin
__rw := __linger__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTolinger(const V : OleVariant) : linger;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := linger((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __netent__Wrapper__ = class(__netent__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __netent__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertnetentToVariant(var R : netent) : OleVariant;
var
__rw : __netent__Wrapper__;
begin
__rw := __netent__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTonetent(const V : OleVariant) : netent;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := netent((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __protoent__Wrapper__ = class(__protoent__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __protoent__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertprotoentToVariant(var R : protoent) : OleVariant;
var
__rw : __protoent__Wrapper__;
begin
__rw := __protoent__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToprotoent(const V : OleVariant) : protoent;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := protoent((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __Q2931_IE__Wrapper__ = class(__Q2931_IE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __Q2931_IE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertQ2931_IEToVariant(var R : Q2931_IE) : OleVariant;
var
__rw : __Q2931_IE__Wrapper__;
begin
__rw := __Q2931_IE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToQ2931_IE(const V : OleVariant) : Q2931_IE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := Q2931_IE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __QOS__Wrapper__ = class(__QOS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __QOS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertQOSToVariant(var R : QOS) : OleVariant;
var
__rw : __QOS__Wrapper__;
begin
__rw := __QOS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToQOS(const V : OleVariant) : QOS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := QOS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __servent__Wrapper__ = class(__servent__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __servent__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertserventToVariant(var R : servent) : OleVariant;
var
__rw : __servent__Wrapper__;
begin
__rw := __servent__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToservent(const V : OleVariant) : servent;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := servent((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SOCKADDR__Wrapper__ = class(__SOCKADDR__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SOCKADDR__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSOCKADDRToVariant(var R : SOCKADDR) : OleVariant;
var
__rw : __SOCKADDR__Wrapper__;
begin
__rw := __SOCKADDR__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSOCKADDR(const V : OleVariant) : SOCKADDR;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SOCKADDR((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SOCKADDR_ATM__Wrapper__ = class(__SOCKADDR_ATM__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SOCKADDR_ATM__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSOCKADDR_ATMToVariant(var R : SOCKADDR_ATM) : OleVariant;
var
__rw : __SOCKADDR_ATM__Wrapper__;
begin
__rw := __SOCKADDR_ATM__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSOCKADDR_ATM(const V : OleVariant) : SOCKADDR_ATM;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SOCKADDR_ATM((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __sockaddr_gen__Wrapper__ = class(__sockaddr_gen__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __sockaddr_gen__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convertsockaddr_genToVariant(var R : sockaddr_gen) : OleVariant;
var
__rw : __sockaddr_gen__Wrapper__;
begin
__rw := __sockaddr_gen__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTosockaddr_gen(const V : OleVariant) : sockaddr_gen;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := sockaddr_gen((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __sockaddr_in__Wrapper__ = class(__sockaddr_in__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __sockaddr_in__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convertsockaddr_inToVariant(var R : sockaddr_in) : OleVariant;
var
__rw : __sockaddr_in__Wrapper__;
begin
__rw := __sockaddr_in__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTosockaddr_in(const V : OleVariant) : sockaddr_in;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := sockaddr_in((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SOCKADDR_IN6__Wrapper__ = class(__SOCKADDR_IN6__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SOCKADDR_IN6__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSOCKADDR_IN6ToVariant(var R : SOCKADDR_IN6) : OleVariant;
var
__rw : __SOCKADDR_IN6__Wrapper__;
begin
__rw := __SOCKADDR_IN6__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSOCKADDR_IN6(const V : OleVariant) : SOCKADDR_IN6;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SOCKADDR_IN6((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __sockaddr_in6_old__Wrapper__ = class(__sockaddr_in6_old__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __sockaddr_in6_old__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convertsockaddr_in6_oldToVariant(var R : sockaddr_in6_old) : OleVariant;
var
__rw : __sockaddr_in6_old__Wrapper__;
begin
__rw := __sockaddr_in6_old__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTosockaddr_in6_old(const V : OleVariant) : sockaddr_in6_old;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := sockaddr_in6_old((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SOCKADDR_IPX__Wrapper__ = class(__SOCKADDR_IPX__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SOCKADDR_IPX__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSOCKADDR_IPXToVariant(var R : SOCKADDR_IPX) : OleVariant;
var
__rw : __SOCKADDR_IPX__Wrapper__;
begin
__rw := __SOCKADDR_IPX__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSOCKADDR_IPX(const V : OleVariant) : SOCKADDR_IPX;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SOCKADDR_IPX((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SOCKADDR_NB__Wrapper__ = class(__SOCKADDR_NB__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SOCKADDR_NB__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSOCKADDR_NBToVariant(var R : SOCKADDR_NB) : OleVariant;
var
__rw : __SOCKADDR_NB__Wrapper__;
begin
__rw := __SOCKADDR_NB__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSOCKADDR_NB(const V : OleVariant) : SOCKADDR_NB;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SOCKADDR_NB((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SOCKET_ADDRESS__Wrapper__ = class(__SOCKET_ADDRESS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SOCKET_ADDRESS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSOCKET_ADDRESSToVariant(var R : SOCKET_ADDRESS) : OleVariant;
var
__rw : __SOCKET_ADDRESS__Wrapper__;
begin
__rw := __SOCKET_ADDRESS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSOCKET_ADDRESS(const V : OleVariant) : SOCKET_ADDRESS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SOCKET_ADDRESS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SOCKET_ADDRESS_LIST__Wrapper__ = class(__SOCKET_ADDRESS_LIST__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SOCKET_ADDRESS_LIST__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSOCKET_ADDRESS_LISTToVariant(var R : SOCKET_ADDRESS_LIST) : OleVariant;
var
__rw : __SOCKET_ADDRESS_LIST__Wrapper__;
begin
__rw := __SOCKET_ADDRESS_LIST__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSOCKET_ADDRESS_LIST(const V : OleVariant) : SOCKET_ADDRESS_LIST;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SOCKET_ADDRESS_LIST((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __sockproto__Wrapper__ = class(__sockproto__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __sockproto__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertsockprotoToVariant(var R : sockproto) : OleVariant;
var
__rw : __sockproto__Wrapper__;
begin
__rw := __sockproto__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTosockproto(const V : OleVariant) : sockproto;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := sockproto((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SunB__Wrapper__ = class(__SunB__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SunB__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSunBToVariant(var R : SunB) : OleVariant;
var
__rw : __SunB__Wrapper__;
begin
__rw := __SunB__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSunB(const V : OleVariant) : SunB;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SunB((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SunW__Wrapper__ = class(__SunW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SunW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSunWToVariant(var R : SunW) : OleVariant;
var
__rw : __SunW__Wrapper__;
begin
__rw := __SunW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSunW(const V : OleVariant) : SunW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SunW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TAddrInfo__Wrapper__ = class(__TAddrInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TAddrInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTAddrInfoToVariant(var R : TAddrInfo) : OleVariant;
var
__rw : __TAddrInfo__Wrapper__;
begin
__rw := __TAddrInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTAddrInfo(const V : OleVariant) : TAddrInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TAddrInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TAFProtocols__Wrapper__ = class(__TAFProtocols__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TAFProtocols__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTAFProtocolsToVariant(var R : TAFProtocols) : OleVariant;
var
__rw : __TAFProtocols__Wrapper__;
begin
__rw := __TAFProtocols__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTAFProtocols(const V : OleVariant) : TAFProtocols;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TAFProtocols((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TBLOB__Wrapper__ = class(__TBLOB__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TBLOB__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTBLOBToVariant(var R : TBLOB) : OleVariant;
var
__rw : __TBLOB__Wrapper__;
begin
__rw := __TBLOB__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTBLOB(const V : OleVariant) : TBLOB;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TBLOB((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCSAddr_Info__Wrapper__ = class(__TCSAddr_Info__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCSAddr_Info__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCSAddr_InfoToVariant(var R : TCSAddr_Info) : OleVariant;
var
__rw : __TCSAddr_Info__Wrapper__;
begin
__rw := __TCSAddr_Info__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCSAddr_Info(const V : OleVariant) : TCSAddr_Info;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCSAddr_Info((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TFDSet__Wrapper__ = class(__TFDSet__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TFDSet__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTFDSetToVariant(var R : TFDSet) : OleVariant;
var
__rw : __TFDSet__Wrapper__;
begin
__rw := __TFDSet__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTFDSet(const V : OleVariant) : TFDSet;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TFDSet((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TFlowSpec__Wrapper__ = class(__TFlowSpec__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TFlowSpec__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTFlowSpecToVariant(var R : TFlowSpec) : OleVariant;
var
__rw : __TFlowSpec__Wrapper__;
begin
__rw := __TFlowSpec__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTFlowSpec(const V : OleVariant) : TFlowSpec;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TFlowSpec((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __THostEnt__Wrapper__ = class(__THostEnt__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __THostEnt__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTHostEntToVariant(var R : THostEnt) : OleVariant;
var
__rw : __THostEnt__Wrapper__;
begin
__rw := __THostEnt__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTHostEnt(const V : OleVariant) : THostEnt;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := THostEnt((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __timeval__Wrapper__ = class(__timeval__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __timeval__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttimevalToVariant(var R : timeval) : OleVariant;
var
__rw : __timeval__Wrapper__;
begin
__rw := __timeval__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotimeval(const V : OleVariant) : timeval;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := timeval((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TIn6Addr__Wrapper__ = class(__TIn6Addr__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIn6Addr__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIn6AddrToVariant(var R : TIn6Addr) : OleVariant;
var
__rw : __TIn6Addr__Wrapper__;
begin
__rw := __TIn6Addr__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIn6Addr(const V : OleVariant) : TIn6Addr;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIn6Addr((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TIn6PktInfo__Wrapper__ = class(__TIn6PktInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIn6PktInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIn6PktInfoToVariant(var R : TIn6PktInfo) : OleVariant;
var
__rw : __TIn6PktInfo__Wrapper__;
begin
__rw := __TIn6PktInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIn6PktInfo(const V : OleVariant) : TIn6PktInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIn6PktInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TInAddr__Wrapper__ = class(__TInAddr__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TInAddr__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTInAddrToVariant(var R : TInAddr) : OleVariant;
var
__rw : __TInAddr__Wrapper__;
begin
__rw := __TInAddr__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTInAddr(const V : OleVariant) : TInAddr;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TInAddr((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TInPktInfo__Wrapper__ = class(__TInPktInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TInPktInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTInPktInfoToVariant(var R : TInPktInfo) : OleVariant;
var
__rw : __TInPktInfo__Wrapper__;
begin
__rw := __TInPktInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTInPktInfo(const V : OleVariant) : TInPktInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TInPktInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TInterface_Info__Wrapper__ = class(__TInterface_Info__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TInterface_Info__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTInterface_InfoToVariant(var R : TInterface_Info) : OleVariant;
var
__rw : __TInterface_Info__Wrapper__;
begin
__rw := __TInterface_Info__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTInterface_Info(const V : OleVariant) : TInterface_Info;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TInterface_Info((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TInterface_Info_Ex__Wrapper__ = class(__TInterface_Info_Ex__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TInterface_Info_Ex__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTInterface_Info_ExToVariant(var R : TInterface_Info_Ex) : OleVariant;
var
__rw : __TInterface_Info_Ex__Wrapper__;
begin
__rw := __TInterface_Info_Ex__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTInterface_Info_Ex(const V : OleVariant) : TInterface_Info_Ex;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TInterface_Info_Ex((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TIPXAddressData__Wrapper__ = class(__TIPXAddressData__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIPXAddressData__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIPXAddressDataToVariant(var R : TIPXAddressData) : OleVariant;
var
__rw : __TIPXAddressData__Wrapper__;
begin
__rw := __TIPXAddressData__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIPXAddressData(const V : OleVariant) : TIPXAddressData;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIPXAddressData((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TIPXNetNumData__Wrapper__ = class(__TIPXNetNumData__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIPXNetNumData__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIPXNetNumDataToVariant(var R : TIPXNetNumData) : OleVariant;
var
__rw : __TIPXNetNumData__Wrapper__;
begin
__rw := __TIPXNetNumData__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIPXNetNumData(const V : OleVariant) : TIPXNetNumData;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIPXNetNumData((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TIPXSPXConnStatusData__Wrapper__ = class(__TIPXSPXConnStatusData__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIPXSPXConnStatusData__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIPXSPXConnStatusDataToVariant(var R : TIPXSPXConnStatusData) : OleVariant;
var
__rw : __TIPXSPXConnStatusData__Wrapper__;
begin
__rw := __TIPXSPXConnStatusData__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIPXSPXConnStatusData(const V : OleVariant) : TIPXSPXConnStatusData;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIPXSPXConnStatusData((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TLinger__Wrapper__ = class(__TLinger__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TLinger__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTLingerToVariant(var R : TLinger) : OleVariant;
var
__rw : __TLinger__Wrapper__;
begin
__rw := __TLinger__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTLinger(const V : OleVariant) : TLinger;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TLinger((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNetEnt__Wrapper__ = class(__TNetEnt__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNetEnt__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNetEntToVariant(var R : TNetEnt) : OleVariant;
var
__rw : __TNetEnt__Wrapper__;
begin
__rw := __TNetEnt__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNetEnt(const V : OleVariant) : TNetEnt;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNetEnt((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TProtoEnt__Wrapper__ = class(__TProtoEnt__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TProtoEnt__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTProtoEntToVariant(var R : TProtoEnt) : OleVariant;
var
__rw : __TProtoEnt__Wrapper__;
begin
__rw := __TProtoEnt__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTProtoEnt(const V : OleVariant) : TProtoEnt;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TProtoEnt((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TQualityOfService__Wrapper__ = class(__TQualityOfService__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TQualityOfService__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTQualityOfServiceToVariant(var R : TQualityOfService) : OleVariant;
var
__rw : __TQualityOfService__Wrapper__;
begin
__rw := __TQualityOfService__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTQualityOfService(const V : OleVariant) : TQualityOfService;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TQualityOfService((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRANSMIT_FILE_BUFFERS__Wrapper__ = class(__TRANSMIT_FILE_BUFFERS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRANSMIT_FILE_BUFFERS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRANSMIT_FILE_BUFFERSToVariant(var R : TRANSMIT_FILE_BUFFERS) : OleVariant;
var
__rw : __TRANSMIT_FILE_BUFFERS__Wrapper__;
begin
__rw := __TRANSMIT_FILE_BUFFERS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRANSMIT_FILE_BUFFERS(const V : OleVariant) : TRANSMIT_FILE_BUFFERS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRANSMIT_FILE_BUFFERS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TServEnt__Wrapper__ = class(__TServEnt__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TServEnt__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTServEntToVariant(var R : TServEnt) : OleVariant;
var
__rw : __TServEnt__Wrapper__;
begin
__rw := __TServEnt__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTServEnt(const V : OleVariant) : TServEnt;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TServEnt((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSockAddr__Wrapper__ = class(__TSockAddr__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSockAddr__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSockAddrToVariant(var R : TSockAddr) : OleVariant;
var
__rw : __TSockAddr__Wrapper__;
begin
__rw := __TSockAddr__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSockAddr(const V : OleVariant) : TSockAddr;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSockAddr((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSockAddr_IPX__Wrapper__ = class(__TSockAddr_IPX__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSockAddr_IPX__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSockAddr_IPXToVariant(var R : TSockAddr_IPX) : OleVariant;
var
__rw : __TSockAddr_IPX__Wrapper__;
begin
__rw := __TSockAddr_IPX__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSockAddr_IPX(const V : OleVariant) : TSockAddr_IPX;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSockAddr_IPX((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSockAddrATM__Wrapper__ = class(__TSockAddrATM__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSockAddrATM__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSockAddrATMToVariant(var R : TSockAddrATM) : OleVariant;
var
__rw : __TSockAddrATM__Wrapper__;
begin
__rw := __TSockAddrATM__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSockAddrATM(const V : OleVariant) : TSockAddrATM;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSockAddrATM((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSockAddrGen__Wrapper__ = class(__TSockAddrGen__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSockAddrGen__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSockAddrGenToVariant(var R : TSockAddrGen) : OleVariant;
var
__rw : __TSockAddrGen__Wrapper__;
begin
__rw := __TSockAddrGen__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSockAddrGen(const V : OleVariant) : TSockAddrGen;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSockAddrGen((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSockAddrIn__Wrapper__ = class(__TSockAddrIn__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSockAddrIn__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSockAddrInToVariant(var R : TSockAddrIn) : OleVariant;
var
__rw : __TSockAddrIn__Wrapper__;
begin
__rw := __TSockAddrIn__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSockAddrIn(const V : OleVariant) : TSockAddrIn;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSockAddrIn((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSockAddrIn6__Wrapper__ = class(__TSockAddrIn6__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSockAddrIn6__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSockAddrIn6ToVariant(var R : TSockAddrIn6) : OleVariant;
var
__rw : __TSockAddrIn6__Wrapper__;
begin
__rw := __TSockAddrIn6__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSockAddrIn6(const V : OleVariant) : TSockAddrIn6;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSockAddrIn6((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSockAddrIPX__Wrapper__ = class(__TSockAddrIPX__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSockAddrIPX__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSockAddrIPXToVariant(var R : TSockAddrIPX) : OleVariant;
var
__rw : __TSockAddrIPX__Wrapper__;
begin
__rw := __TSockAddrIPX__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSockAddrIPX(const V : OleVariant) : TSockAddrIPX;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSockAddrIPX((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSockAddrNB__Wrapper__ = class(__TSockAddrNB__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSockAddrNB__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSockAddrNBToVariant(var R : TSockAddrNB) : OleVariant;
var
__rw : __TSockAddrNB__Wrapper__;
begin
__rw := __TSockAddrNB__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSockAddrNB(const V : OleVariant) : TSockAddrNB;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSockAddrNB((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSocket_Address__Wrapper__ = class(__TSocket_Address__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSocket_Address__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSocket_AddressToVariant(var R : TSocket_Address) : OleVariant;
var
__rw : __TSocket_Address__Wrapper__;
begin
__rw := __TSocket_Address__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSocket_Address(const V : OleVariant) : TSocket_Address;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSocket_Address((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSocket_Address_List__Wrapper__ = class(__TSocket_Address_List__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSocket_Address_List__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSocket_Address_ListToVariant(var R : TSocket_Address_List) : OleVariant;
var
__rw : __TSocket_Address_List__Wrapper__;
begin
__rw := __TSocket_Address_List__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSocket_Address_List(const V : OleVariant) : TSocket_Address_List;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSocket_Address_List((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSockProto__Wrapper__ = class(__TSockProto__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSockProto__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSockProtoToVariant(var R : TSockProto) : OleVariant;
var
__rw : __TSockProto__Wrapper__;
begin
__rw := __TSockProto__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSockProto(const V : OleVariant) : TSockProto;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSockProto((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTimeVal__Wrapper__ = class(__TTimeVal__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTimeVal__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTimeValToVariant(var R : TTimeVal) : OleVariant;
var
__rw : __TTimeVal__Wrapper__;
begin
__rw := __TTimeVal__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTimeVal(const V : OleVariant) : TTimeVal;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTimeVal((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTransmitFileBuffers__Wrapper__ = class(__TTransmitFileBuffers__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTransmitFileBuffers__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTransmitFileBuffersToVariant(var R : TTransmitFileBuffers) : OleVariant;
var
__rw : __TTransmitFileBuffers__Wrapper__;
begin
__rw := __TTransmitFileBuffers__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTransmitFileBuffers(const V : OleVariant) : TTransmitFileBuffers;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTransmitFileBuffers((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWSABuf__Wrapper__ = class(__TWSABuf__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWSABuf__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWSABufToVariant(var R : TWSABuf) : OleVariant;
var
__rw : __TWSABuf__Wrapper__;
begin
__rw := __TWSABuf__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWSABuf(const V : OleVariant) : TWSABuf;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWSABuf((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWSAData__Wrapper__ = class(__TWSAData__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWSAData__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWSADataToVariant(var R : TWSAData) : OleVariant;
var
__rw : __TWSAData__Wrapper__;
begin
__rw := __TWSAData__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWSAData(const V : OleVariant) : TWSAData;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWSAData((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWSANameSpace_Info__Wrapper__ = class(__TWSANameSpace_Info__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWSANameSpace_Info__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWSANameSpace_InfoToVariant(var R : TWSANameSpace_Info) : OleVariant;
var
__rw : __TWSANameSpace_Info__Wrapper__;
begin
__rw := __TWSANameSpace_Info__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWSANameSpace_Info(const V : OleVariant) : TWSANameSpace_Info;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWSANameSpace_Info((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWSANameSpace_InfoA__Wrapper__ = class(__TWSANameSpace_InfoA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWSANameSpace_InfoA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWSANameSpace_InfoAToVariant(var R : TWSANameSpace_InfoA) : OleVariant;
var
__rw : __TWSANameSpace_InfoA__Wrapper__;
begin
__rw := __TWSANameSpace_InfoA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWSANameSpace_InfoA(const V : OleVariant) : TWSANameSpace_InfoA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWSANameSpace_InfoA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWSANameSpace_InfoW__Wrapper__ = class(__TWSANameSpace_InfoW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWSANameSpace_InfoW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWSANameSpace_InfoWToVariant(var R : TWSANameSpace_InfoW) : OleVariant;
var
__rw : __TWSANameSpace_InfoW__Wrapper__;
begin
__rw := __TWSANameSpace_InfoW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWSANameSpace_InfoW(const V : OleVariant) : TWSANameSpace_InfoW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWSANameSpace_InfoW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWSANetworkEvents__Wrapper__ = class(__TWSANetworkEvents__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWSANetworkEvents__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWSANetworkEventsToVariant(var R : TWSANetworkEvents) : OleVariant;
var
__rw : __TWSANetworkEvents__Wrapper__;
begin
__rw := __TWSANetworkEvents__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWSANetworkEvents(const V : OleVariant) : TWSANetworkEvents;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWSANetworkEvents((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWSANSClassInfo__Wrapper__ = class(__TWSANSClassInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWSANSClassInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWSANSClassInfoToVariant(var R : TWSANSClassInfo) : OleVariant;
var
__rw : __TWSANSClassInfo__Wrapper__;
begin
__rw := __TWSANSClassInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWSANSClassInfo(const V : OleVariant) : TWSANSClassInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWSANSClassInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWSANSClassInfoA__Wrapper__ = class(__TWSANSClassInfoA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWSANSClassInfoA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWSANSClassInfoAToVariant(var R : TWSANSClassInfoA) : OleVariant;
var
__rw : __TWSANSClassInfoA__Wrapper__;
begin
__rw := __TWSANSClassInfoA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWSANSClassInfoA(const V : OleVariant) : TWSANSClassInfoA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWSANSClassInfoA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWSANSClassInfoW__Wrapper__ = class(__TWSANSClassInfoW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWSANSClassInfoW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWSANSClassInfoWToVariant(var R : TWSANSClassInfoW) : OleVariant;
var
__rw : __TWSANSClassInfoW__Wrapper__;
begin
__rw := __TWSANSClassInfoW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWSANSClassInfoW(const V : OleVariant) : TWSANSClassInfoW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWSANSClassInfoW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWSAOverlapped__Wrapper__ = class(__TWSAOverlapped__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWSAOverlapped__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWSAOverlappedToVariant(var R : TWSAOverlapped) : OleVariant;
var
__rw : __TWSAOverlapped__Wrapper__;
begin
__rw := __TWSAOverlapped__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWSAOverlapped(const V : OleVariant) : TWSAOverlapped;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWSAOverlapped((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWSAProtocol_Info__Wrapper__ = class(__TWSAProtocol_Info__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWSAProtocol_Info__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWSAProtocol_InfoToVariant(var R : TWSAProtocol_Info) : OleVariant;
var
__rw : __TWSAProtocol_Info__Wrapper__;
begin
__rw := __TWSAProtocol_Info__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWSAProtocol_Info(const V : OleVariant) : TWSAProtocol_Info;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWSAProtocol_Info((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWSAProtocol_InfoA__Wrapper__ = class(__TWSAProtocol_InfoA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWSAProtocol_InfoA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWSAProtocol_InfoAToVariant(var R : TWSAProtocol_InfoA) : OleVariant;
var
__rw : __TWSAProtocol_InfoA__Wrapper__;
begin
__rw := __TWSAProtocol_InfoA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWSAProtocol_InfoA(const V : OleVariant) : TWSAProtocol_InfoA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWSAProtocol_InfoA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWSAProtocol_InfoW__Wrapper__ = class(__TWSAProtocol_InfoW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWSAProtocol_InfoW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWSAProtocol_InfoWToVariant(var R : TWSAProtocol_InfoW) : OleVariant;
var
__rw : __TWSAProtocol_InfoW__Wrapper__;
begin
__rw := __TWSAProtocol_InfoW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWSAProtocol_InfoW(const V : OleVariant) : TWSAProtocol_InfoW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWSAProtocol_InfoW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWSAProtocolChain__Wrapper__ = class(__TWSAProtocolChain__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWSAProtocolChain__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWSAProtocolChainToVariant(var R : TWSAProtocolChain) : OleVariant;
var
__rw : __TWSAProtocolChain__Wrapper__;
begin
__rw := __TWSAProtocolChain__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWSAProtocolChain(const V : OleVariant) : TWSAProtocolChain;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWSAProtocolChain((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWSAQuerySet__Wrapper__ = class(__TWSAQuerySet__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWSAQuerySet__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWSAQuerySetToVariant(var R : TWSAQuerySet) : OleVariant;
var
__rw : __TWSAQuerySet__Wrapper__;
begin
__rw := __TWSAQuerySet__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWSAQuerySet(const V : OleVariant) : TWSAQuerySet;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWSAQuerySet((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWSAQuerySetA__Wrapper__ = class(__TWSAQuerySetA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWSAQuerySetA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWSAQuerySetAToVariant(var R : TWSAQuerySetA) : OleVariant;
var
__rw : __TWSAQuerySetA__Wrapper__;
begin
__rw := __TWSAQuerySetA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWSAQuerySetA(const V : OleVariant) : TWSAQuerySetA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWSAQuerySetA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWSAQuerySetW__Wrapper__ = class(__TWSAQuerySetW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWSAQuerySetW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWSAQuerySetWToVariant(var R : TWSAQuerySetW) : OleVariant;
var
__rw : __TWSAQuerySetW__Wrapper__;
begin
__rw := __TWSAQuerySetW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWSAQuerySetW(const V : OleVariant) : TWSAQuerySetW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWSAQuerySetW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWSAServiceClassInfo__Wrapper__ = class(__TWSAServiceClassInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWSAServiceClassInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWSAServiceClassInfoToVariant(var R : TWSAServiceClassInfo) : OleVariant;
var
__rw : __TWSAServiceClassInfo__Wrapper__;
begin
__rw := __TWSAServiceClassInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWSAServiceClassInfo(const V : OleVariant) : TWSAServiceClassInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWSAServiceClassInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWSAServiceClassInfoA__Wrapper__ = class(__TWSAServiceClassInfoA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWSAServiceClassInfoA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWSAServiceClassInfoAToVariant(var R : TWSAServiceClassInfoA) : OleVariant;
var
__rw : __TWSAServiceClassInfoA__Wrapper__;
begin
__rw := __TWSAServiceClassInfoA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWSAServiceClassInfoA(const V : OleVariant) : TWSAServiceClassInfoA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWSAServiceClassInfoA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWSAServiceClassInfoW__Wrapper__ = class(__TWSAServiceClassInfoW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWSAServiceClassInfoW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWSAServiceClassInfoWToVariant(var R : TWSAServiceClassInfoW) : OleVariant;
var
__rw : __TWSAServiceClassInfoW__Wrapper__;
begin
__rw := __TWSAServiceClassInfoW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWSAServiceClassInfoW(const V : OleVariant) : TWSAServiceClassInfoW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWSAServiceClassInfoW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWSAVersion__Wrapper__ = class(__TWSAVersion__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWSAVersion__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWSAVersionToVariant(var R : TWSAVersion) : OleVariant;
var
__rw : __TWSAVersion__Wrapper__;
begin
__rw := __TWSAVersion__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWSAVersion(const V : OleVariant) : TWSAVersion;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWSAVersion((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __WSABUF__Wrapper__ = class(__WSABUF__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __WSABUF__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertWSABUFToVariant(var R : WSABUF) : OleVariant;
var
__rw : __WSABUF__Wrapper__;
begin
__rw := __WSABUF__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToWSABUF(const V : OleVariant) : WSABUF;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := WSABUF((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __WSADATA__Wrapper__ = class(__WSADATA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __WSADATA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertWSADATAToVariant(var R : WSADATA) : OleVariant;
var
__rw : __WSADATA__Wrapper__;
begin
__rw := __WSADATA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToWSADATA(const V : OleVariant) : WSADATA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := WSADATA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __WSANAMESPACE_INFO__Wrapper__ = class(__WSANAMESPACE_INFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __WSANAMESPACE_INFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertWSANAMESPACE_INFOToVariant(var R : WSANAMESPACE_INFO) : OleVariant;
var
__rw : __WSANAMESPACE_INFO__Wrapper__;
begin
__rw := __WSANAMESPACE_INFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToWSANAMESPACE_INFO(const V : OleVariant) : WSANAMESPACE_INFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := WSANAMESPACE_INFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __WSANAMESPACE_INFOA__Wrapper__ = class(__WSANAMESPACE_INFOA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __WSANAMESPACE_INFOA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertWSANAMESPACE_INFOAToVariant(var R : WSANAMESPACE_INFOA) : OleVariant;
var
__rw : __WSANAMESPACE_INFOA__Wrapper__;
begin
__rw := __WSANAMESPACE_INFOA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToWSANAMESPACE_INFOA(const V : OleVariant) : WSANAMESPACE_INFOA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := WSANAMESPACE_INFOA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __WSANAMESPACE_INFOW__Wrapper__ = class(__WSANAMESPACE_INFOW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __WSANAMESPACE_INFOW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertWSANAMESPACE_INFOWToVariant(var R : WSANAMESPACE_INFOW) : OleVariant;
var
__rw : __WSANAMESPACE_INFOW__Wrapper__;
begin
__rw := __WSANAMESPACE_INFOW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToWSANAMESPACE_INFOW(const V : OleVariant) : WSANAMESPACE_INFOW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := WSANAMESPACE_INFOW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __WSANETWORKEVENTS__Wrapper__ = class(__WSANETWORKEVENTS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __WSANETWORKEVENTS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertWSANETWORKEVENTSToVariant(var R : WSANETWORKEVENTS) : OleVariant;
var
__rw : __WSANETWORKEVENTS__Wrapper__;
begin
__rw := __WSANETWORKEVENTS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToWSANETWORKEVENTS(const V : OleVariant) : WSANETWORKEVENTS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := WSANETWORKEVENTS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __WSANSCLASSINFO__Wrapper__ = class(__WSANSCLASSINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __WSANSCLASSINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertWSANSCLASSINFOToVariant(var R : WSANSCLASSINFO) : OleVariant;
var
__rw : __WSANSCLASSINFO__Wrapper__;
begin
__rw := __WSANSCLASSINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToWSANSCLASSINFO(const V : OleVariant) : WSANSCLASSINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := WSANSCLASSINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __WSANSCLASSINFOA__Wrapper__ = class(__WSANSCLASSINFOA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __WSANSCLASSINFOA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertWSANSCLASSINFOAToVariant(var R : WSANSCLASSINFOA) : OleVariant;
var
__rw : __WSANSCLASSINFOA__Wrapper__;
begin
__rw := __WSANSCLASSINFOA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToWSANSCLASSINFOA(const V : OleVariant) : WSANSCLASSINFOA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := WSANSCLASSINFOA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __WSANSCLASSINFOW__Wrapper__ = class(__WSANSCLASSINFOW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __WSANSCLASSINFOW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertWSANSCLASSINFOWToVariant(var R : WSANSCLASSINFOW) : OleVariant;
var
__rw : __WSANSCLASSINFOW__Wrapper__;
begin
__rw := __WSANSCLASSINFOW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToWSANSCLASSINFOW(const V : OleVariant) : WSANSCLASSINFOW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := WSANSCLASSINFOW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __WSAOVERLAPPED__Wrapper__ = class(__WSAOVERLAPPED__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __WSAOVERLAPPED__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertWSAOVERLAPPEDToVariant(var R : WSAOVERLAPPED) : OleVariant;
var
__rw : __WSAOVERLAPPED__Wrapper__;
begin
__rw := __WSAOVERLAPPED__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToWSAOVERLAPPED(const V : OleVariant) : WSAOVERLAPPED;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := WSAOVERLAPPED((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __WSAPROTOCOL_INFO__Wrapper__ = class(__WSAPROTOCOL_INFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __WSAPROTOCOL_INFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertWSAPROTOCOL_INFOToVariant(var R : WSAPROTOCOL_INFO) : OleVariant;
var
__rw : __WSAPROTOCOL_INFO__Wrapper__;
begin
__rw := __WSAPROTOCOL_INFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToWSAPROTOCOL_INFO(const V : OleVariant) : WSAPROTOCOL_INFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := WSAPROTOCOL_INFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __WSAPROTOCOL_INFOA__Wrapper__ = class(__WSAPROTOCOL_INFOA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __WSAPROTOCOL_INFOA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertWSAPROTOCOL_INFOAToVariant(var R : WSAPROTOCOL_INFOA) : OleVariant;
var
__rw : __WSAPROTOCOL_INFOA__Wrapper__;
begin
__rw := __WSAPROTOCOL_INFOA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToWSAPROTOCOL_INFOA(const V : OleVariant) : WSAPROTOCOL_INFOA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := WSAPROTOCOL_INFOA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __WSAPROTOCOL_INFOW__Wrapper__ = class(__WSAPROTOCOL_INFOW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __WSAPROTOCOL_INFOW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertWSAPROTOCOL_INFOWToVariant(var R : WSAPROTOCOL_INFOW) : OleVariant;
var
__rw : __WSAPROTOCOL_INFOW__Wrapper__;
begin
__rw := __WSAPROTOCOL_INFOW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToWSAPROTOCOL_INFOW(const V : OleVariant) : WSAPROTOCOL_INFOW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := WSAPROTOCOL_INFOW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __WSAPROTOCOLCHAIN__Wrapper__ = class(__WSAPROTOCOLCHAIN__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __WSAPROTOCOLCHAIN__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertWSAPROTOCOLCHAINToVariant(var R : WSAPROTOCOLCHAIN) : OleVariant;
var
__rw : __WSAPROTOCOLCHAIN__Wrapper__;
begin
__rw := __WSAPROTOCOLCHAIN__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToWSAPROTOCOLCHAIN(const V : OleVariant) : WSAPROTOCOLCHAIN;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := WSAPROTOCOLCHAIN((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __WSAQUERYSETA__Wrapper__ = class(__WSAQUERYSETA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __WSAQUERYSETA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertWSAQUERYSETAToVariant(var R : WSAQUERYSETA) : OleVariant;
var
__rw : __WSAQUERYSETA__Wrapper__;
begin
__rw := __WSAQUERYSETA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToWSAQUERYSETA(const V : OleVariant) : WSAQUERYSETA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := WSAQUERYSETA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __WSAQUERYSETW__Wrapper__ = class(__WSAQUERYSETW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __WSAQUERYSETW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertWSAQUERYSETWToVariant(var R : WSAQUERYSETW) : OleVariant;
var
__rw : __WSAQUERYSETW__Wrapper__;
begin
__rw := __WSAQUERYSETW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToWSAQUERYSETW(const V : OleVariant) : WSAQUERYSETW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := WSAQUERYSETW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __WSASERVICECLASSINFO__Wrapper__ = class(__WSASERVICECLASSINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __WSASERVICECLASSINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertWSASERVICECLASSINFOToVariant(var R : WSASERVICECLASSINFO) : OleVariant;
var
__rw : __WSASERVICECLASSINFO__Wrapper__;
begin
__rw := __WSASERVICECLASSINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToWSASERVICECLASSINFO(const V : OleVariant) : WSASERVICECLASSINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := WSASERVICECLASSINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __WSASERVICECLASSINFOA__Wrapper__ = class(__WSASERVICECLASSINFOA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __WSASERVICECLASSINFOA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertWSASERVICECLASSINFOAToVariant(var R : WSASERVICECLASSINFOA) : OleVariant;
var
__rw : __WSASERVICECLASSINFOA__Wrapper__;
begin
__rw := __WSASERVICECLASSINFOA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToWSASERVICECLASSINFOA(const V : OleVariant) : WSASERVICECLASSINFOA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := WSASERVICECLASSINFOA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __WSASERVICECLASSINFOW__Wrapper__ = class(__WSASERVICECLASSINFOW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __WSASERVICECLASSINFOW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertWSASERVICECLASSINFOWToVariant(var R : WSASERVICECLASSINFOW) : OleVariant;
var
__rw : __WSASERVICECLASSINFOW__Wrapper__;
begin
__rw := __WSASERVICECLASSINFOW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToWSASERVICECLASSINFOW(const V : OleVariant) : WSASERVICECLASSINFOW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := WSASERVICECLASSINFOW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __WSAVERSION__Wrapper__ = class(__WSAVERSION__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __WSAVERSION__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertWSAVERSIONToVariant(var R : WSAVERSION) : OleVariant;
var
__rw : __WSAVERSION__Wrapper__;
begin
__rw := __WSAVERSION__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToWSAVERSION(const V : OleVariant) : WSAVERSION;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := WSAVERSION((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetEIdWS2StubError__Win32Error(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := EIdWS2StubError(Instance).Win32Error;
end;

function __DC__GetEIdWS2StubError__Win32ErrorMessage(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := EIdWS2StubError(Instance).Win32ErrorMessage;
end;

function __DC__GetEIdWS2StubError__Title(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := EIdWS2StubError(Instance).Title;
end;

procedure __RegisterProps;
begin
RegisterProperty(EIdWS2StubError,'Win32Error',__DC__GetEIdWS2StubError__Win32Error,nil);
RegisterProperty(EIdWS2StubError,'Win32ErrorMessage',__DC__GetEIdWS2StubError__Win32ErrorMessage,nil);
RegisterProperty(EIdWS2StubError,'Title',__DC__GetEIdWS2StubError__Title,nil);
end;

function __DC__GetIdWinSock2__in6addr_any(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __IN6_ADDR__Wrapper;
begin
__wrapper := __IN6_ADDR__Wrapper.Create;
__wrapper.fR := IdWinSock2.in6addr_any;
result := IUnknown(__wrapper) as IDispatch;
end;

function __DC__GetIdWinSock2__in6addr_loopback(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __IN6_ADDR__Wrapper;
begin
__wrapper := __IN6_ADDR__Wrapper.Create;
__wrapper.fR := IdWinSock2.in6addr_loopback;
result := IUnknown(__wrapper) as IDispatch;
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('in6addr_any',__DC__GetIdWinSock2__in6addr_any,nil));
__RegisteredVars.Add(RegisterVar('in6addr_loopback',__DC__GetIdWinSock2__in6addr_loopback,nil));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..474] of string = (
'WINSOCK_VERSION'
,'WINSOCK2_DLL'
,'FD_SETSIZE'
,'IOCPARM_MASK'
,'IOC_VOID'
,'IOC_OUT'
,'IOC_IN'
,'IOC_INOUT'
,'IPPROTO_IP'
,'IPPROTO_ICMP'
,'IPPROTO_IGMP'
,'IPPROTO_GGP'
,'IPPROTO_TCP'
,'IPPROTO_PUP'
,'IPPROTO_UDP'
,'IPPROTO_IDP'
,'IPPROTO_ND'
,'IPPROTO_IPV6'
,'IPPROTO_ICLFXBM'
,'IPPROTO_RAW'
,'IPPROTO_MAX'
,'IPPORT_ECHO'
,'IPPORT_DISCARD'
,'IPPORT_SYSTAT'
,'IPPORT_DAYTIME'
,'IPPORT_NETSTAT'
,'IPPORT_FTP'
,'IPPORT_TELNET'
,'IPPORT_SMTP'
,'IPPORT_TIMESERVER'
,'IPPORT_NAMESERVER'
,'IPPORT_WHOIS'
,'IPPORT_MTP'
,'IPPORT_TFTP'
,'IPPORT_RJE'
,'IPPORT_FINGER'
,'IPPORT_TTYLINK'
,'IPPORT_SUPDUP'
,'IPPORT_EXECSERVER'
,'IPPORT_LOGINSERVER'
,'IPPORT_CMDSERVER'
,'IPPORT_EFSSERVER'
,'IPPORT_BIFFUDP'
,'IPPORT_WHOSERVER'
,'IPPORT_ROUTESERVER'
,'IPPORT_RESERVED'
,'IMPLINK_IP'
,'IMPLINK_LOWEXPER'
,'IMPLINK_HIGHEXPER'
,'TF_DISCONNECT'
,'TF_REUSE_SOCKET'
,'TF_WRITE_BEHIND'
,'INVALID_SOCKET'
,'SOCKET_ERROR'
,'FROM_PROTOCOL_INFO'
,'SOCK_STREAM'
,'SOCK_DGRAM'
,'SOCK_RAW'
,'SOCK_RDM'
,'SOCK_SEQPACKET'
,'SO_DEBUG'
,'SO_ACCEPTCONN'
,'SO_REUSEADDR'
,'SO_KEEPALIVE'
,'SO_DONTROUTE'
,'SO_BROADCAST'
,'SO_USELOOPBACK'
,'SO_LINGER'
,'SO_OOBINLINE'
,'SO_DONTLINGER'
,'SO_EXCLUSIVEADDRUSE'
,'SO_SNDBUF'
,'SO_RCVBUF'
,'SO_SNDLOWAT'
,'SO_RCVLOWAT'
,'SO_SNDTIMEO'
,'SO_RCVTIMEO'
,'SO_ERROR'
,'SO_TYPE'
,'SO_CONNDATA'
,'SO_CONNOPT'
,'SO_DISCDATA'
,'SO_DISCOPT'
,'SO_CONNDATALEN'
,'SO_CONNOPTLEN'
,'SO_DISCDATALEN'
,'SO_DISCOPTLEN'
,'SO_OPENTYPE'
,'SO_SYNCHRONOUS_ALERT'
,'SO_SYNCHRONOUS_NONALERT'
,'SO_MAXDG'
,'SO_MAXPATHDG'
,'SO_UPDATE_ACCEPT_CONTEXT'
,'SO_CONNECT_TIME'
,'TCP_NODELAY'
,'TCP_BSDURGENT'
,'SO_GROUP_ID'
,'SO_GROUP_PRIORITY'
,'SO_MAX_MSG_SIZE'
,'SO_PROTOCOL_INFOA'
,'SO_PROTOCOL_INFOW'
,'SO_PROTOCOL_INFO'
,'PVD_CONFIG'
,'SO_CONDITIONAL_ACCEPT'
,'AF_UNSPEC'
,'AF_UNIX'
,'AF_INET'
,'AF_IMPLINK'
,'AF_PUP'
,'AF_CHAOS'
,'AF_IPX'
,'AF_NS'
,'AF_ISO'
,'AF_OSI'
,'AF_ECMA'
,'AF_DATAKIT'
,'AF_CCITT'
,'AF_SNA'
,'AF_DECNET'
,'AF_DLI'
,'AF_LAT'
,'AF_HYLINK'
,'AF_APPLETALK'
,'AF_NETBIOS'
,'AF_VOICEVIEW'
,'AF_FIREFOX'
,'AF_UNKNOWN1'
,'AF_BAN'
,'AF_ATM'
,'AF_INET6'
,'AF_CLUSTER'
,'AF_12844'
,'AF_IRDA'
,'AF_NETDES'
,'AF_TCNPROCESS'
,'AF_TCNMESSAGE'
,'AF_ICLFXBM'
,'AF_MAX'
,'PF_UNSPEC'
,'PF_UNIX'
,'PF_INET'
,'PF_IMPLINK'
,'PF_PUP'
,'PF_CHAOS'
,'PF_NS'
,'PF_IPX'
,'PF_ISO'
,'PF_OSI'
,'PF_ECMA'
,'PF_DATAKIT'
,'PF_CCITT'
,'PF_SNA'
,'PF_DECNET'
,'PF_DLI'
,'PF_LAT'
,'PF_HYLINK'
,'PF_APPLETALK'
,'PF_VOICEVIEW'
,'PF_FIREFOX'
,'PF_UNKNOWN1'
,'PF_BAN'
,'PF_ATM'
,'PF_INET6'
,'PF_MAX'
,'INADDR_ANY'
,'INADDR_LOOPBACK'
,'INADDR_BROADCAST'
,'INADDR_NONE'
,'SOL_SOCKET'
,'MSG_OOB'
,'MSG_PEEK'
,'MSG_DONTROUTE'
,'MSG_PARTIAL'
,'MSG_INTERRUPT'
,'MSG_MAXIOVLEN'
,'MAXGETHOSTSTRUCT'
,'SOMAXCONN'
,'FD_READ_BIT'
,'FD_WRITE_BIT'
,'FD_OOB_BIT'
,'FD_ACCEPT_BIT'
,'FD_CONNECT_BIT'
,'FD_CLOSE_BIT'
,'FD_QOS_BIT'
,'FD_GROUP_QOS_BIT'
,'FD_ROUTING_INTERFACE_CHANGE_BIT'
,'FD_ADDRESS_LIST_CHANGE_BIT'
,'FD_MAX_EVENTS'
,'FD_READ'
,'FD_WRITE'
,'FD_OOB'
,'FD_ACCEPT'
,'FD_CONNECT'
,'FD_CLOSE'
,'FD_QOS'
,'FD_GROUP_QOS'
,'FD_ROUTING_INTERFACE_CHANGE'
,'FD_ADDRESS_LIST_CHANGE'
,'FD_ALL_EVENTS'
,'WSABASEERR'
,'WSAEINTR'
,'WSAEBADF'
,'WSAEACCES'
,'WSAEFAULT'
,'WSAEINVAL'
,'WSAEMFILE'
,'WSAEWOULDBLOCK'
,'WSAEINPROGRESS'
,'WSAEALREADY'
,'WSAENOTSOCK'
,'WSAEDESTADDRREQ'
,'WSAEMSGSIZE'
,'WSAEPROTOTYPE'
,'WSAENOPROTOOPT'
,'WSAEPROTONOSUPPORT'
,'WSAESOCKTNOSUPPORT'
,'WSAEOPNOTSUPP'
,'WSAEPFNOSUPPORT'
,'WSAEAFNOSUPPORT'
,'WSAEADDRINUSE'
,'WSAEADDRNOTAVAIL'
,'WSAENETDOWN'
,'WSAENETUNREACH'
,'WSAENETRESET'
,'WSAECONNABORTED'
,'WSAECONNRESET'
,'WSAENOBUFS'
,'WSAEISCONN'
,'WSAENOTCONN'
,'WSAESHUTDOWN'
,'WSAETOOMANYREFS'
,'WSAETIMEDOUT'
,'WSAECONNREFUSED'
,'WSAELOOP'
,'WSAENAMETOOLONG'
,'WSAEHOSTDOWN'
,'WSAEHOSTUNREACH'
,'WSAENOTEMPTY'
,'WSAEPROCLIM'
,'WSAEUSERS'
,'WSAEDQUOT'
,'WSAESTALE'
,'WSAEREMOTE'
,'WSASYSNOTREADY'
,'WSAVERNOTSUPPORTED'
,'WSANOTINITIALISED'
,'WSAEDISCON'
,'WSAENOMORE'
,'WSAECANCELLED'
,'WSAEINVALIDPROCTABLE'
,'WSAEINVALIDPROVIDER'
,'WSAEPROVIDERFAILEDINIT'
,'WSASYSCALLFAILURE'
,'WSASERVICE_NOT_FOUND'
,'WSATYPE_NOT_FOUND'
,'WSA_E_NO_MORE'
,'WSA_E_CANCELLED'
,'WSAEREFUSED'
,'WSAHOST_NOT_FOUND'
,'HOST_NOT_FOUND'
,'WSATRY_AGAIN'
,'TRY_AGAIN'
,'WSANO_RECOVERY'
,'NO_RECOVERY'
,'WSANO_DATA'
,'NO_DATA'
,'WSANO_ADDRESS'
,'NO_ADDRESS'
,'WSA_QOS_RECEIVERS'
,'WSA_QOS_SENDERS'
,'WSA_QOS_NO_SENDERS'
,'WSA_QOS_NO_RECEIVERS'
,'WSA_QOS_REQUEST_CONFIRMED'
,'WSA_QOS_ADMISSION_FAILURE'
,'WSA_QOS_POLICY_FAILURE'
,'WSA_QOS_BAD_STYLE'
,'WSA_QOS_BAD_OBJECT'
,'WSA_QOS_TRAFFIC_CTRL_ERROR'
,'WSA_QOS_GENERIC_ERROR'
,'WSA_QOS_ESERVICETYPE'
,'WSA_QOS_EFLOWSPEC'
,'WSA_QOS_EPROVSPECBUF'
,'WSA_QOS_EFILTERSTYLE'
,'WSA_QOS_EFILTERTYPE'
,'WSA_QOS_EFILTERCOUNT'
,'WSA_QOS_EOBJLENGTH'
,'WSA_QOS_EFLOWCOUNT'
,'WSA_QOS_EUNKOWNPSOBJ'
,'WSA_QOS_EPOLICYOBJ'
,'WSA_QOS_EFLOWDESC'
,'WSA_QOS_EPSFLOWSPEC'
,'WSA_QOS_EPSFILTERSPEC'
,'WSA_QOS_ESDMODEOBJ'
,'WSA_QOS_ESHAPERATEOBJ'
,'WSA_QOS_RESERVED_PETYPE'
,'WSA_IO_PENDING'
,'WSA_IO_INCOMPLETE'
,'WSA_INVALID_HANDLE'
,'WSA_INVALID_PARAMETER'
,'WSA_NOT_ENOUGH_MEMORY'
,'WSA_OPERATION_ABORTED'
,'WSA_INVALID_EVENT'
,'WSA_MAXIMUM_WAIT_EVENTS'
,'WSA_WAIT_FAILED'
,'WSA_WAIT_EVENT_0'
,'WSA_WAIT_IO_COMPLETION'
,'WSA_WAIT_TIMEOUT'
,'EWOULDBLOCK'
,'EINPROGRESS'
,'EALREADY'
,'ENOTSOCK'
,'EDESTADDRREQ'
,'EMSGSIZE'
,'EPROTOTYPE'
,'ENOPROTOOPT'
,'EPROTONOSUPPORT'
,'ESOCKTNOSUPPORT'
,'EOPNOTSUPP'
,'EPFNOSUPPORT'
,'EAFNOSUPPORT'
,'EADDRINUSE'
,'EADDRNOTAVAIL'
,'ENETDOWN'
,'ENETUNREACH'
,'ENETRESET'
,'ECONNABORTED'
,'ECONNRESET'
,'ENOBUFS'
,'EISCONN'
,'ENOTCONN'
,'ESHUTDOWN'
,'ETOOMANYREFS'
,'ETIMEDOUT'
,'ECONNREFUSED'
,'ELOOP'
,'ENAMETOOLONG'
,'EHOSTDOWN'
,'EHOSTUNREACH'
,'ENOTEMPTY'
,'EPROCLIM'
,'EUSERS'
,'EDQUOT'
,'ESTALE'
,'EREMOTE'
,'WSADESCRIPTION_LEN'
,'WSASYS_STATUS_LEN'
,'SERVICETYPE_NOTRAFFIC'
,'SERVICETYPE_BESTEFFORT'
,'SERVICETYPE_CONTROLLEDLOAD'
,'SERVICETYPE_GUARANTEED'
,'SERVICETYPE_NETWORK_UNAVAILABLE'
,'SERVICETYPE_GENERAL_INFORMATION'
,'SERVICETYPE_NOCHANGE'
,'SERVICE_IMMEDIATE_TRAFFIC_CONTROL'
,'CF_ACCEPT'
,'CF_REJECT'
,'CF_DEFER'
,'SD_RECEIVE'
,'SD_SEND'
,'SD_BOTH'
,'SG_UNCONSTRAINED_GROUP'
,'SG_CONSTRAINED_GROUP'
,'MAX_PROTOCOL_CHAIN'
,'BASE_PROTOCOL'
,'LAYERED_PROTOCOL'
,'WSAPROTOCOL_LEN'
,'PFL_MULTIPLE_PROTO_ENTRIES'
,'PFL_RECOMMENTED_PROTO_ENTRY'
,'PFL_HIDDEN'
,'PFL_MATCHES_PROTOCOL_ZERO'
,'XP1_CONNECTIONLESS'
,'XP1_GUARANTEED_DELIVERY'
,'XP1_GUARANTEED_ORDER'
,'XP1_MESSAGE_ORIENTED'
,'XP1_PSEUDO_STREAM'
,'XP1_GRACEFUL_CLOSE'
,'XP1_EXPEDITED_DATA'
,'XP1_CONNECT_DATA'
,'XP1_DISCONNECT_DATA'
,'XP1_SUPPORT_BROADCAST'
,'XP1_SUPPORT_MULTIPOINT'
,'XP1_MULTIPOINT_CONTROL_PLANE'
,'XP1_MULTIPOINT_DATA_PLANE'
,'XP1_QOS_SUPPORTED'
,'XP1_INTERRUPT'
,'XP1_UNI_SEND'
,'XP1_UNI_RECV'
,'XP1_IFS_HANDLES'
,'XP1_PARTIAL_MESSAGE'
,'BIGENDIAN'
,'LITTLEENDIAN'
,'SECURITY_PROTOCOL_NONE'
,'JL_SENDER_ONLY'
,'JL_RECEIVER_ONLY'
,'JL_BOTH'
,'WSA_FLAG_OVERLAPPED'
,'WSA_FLAG_MULTIPOINT_C_ROOT'
,'WSA_FLAG_MULTIPOINT_C_LEAF'
,'WSA_FLAG_MULTIPOINT_D_ROOT'
,'WSA_FLAG_MULTIPOINT_D_LEAF'
,'IOC_UNIX'
,'IOC_WS2'
,'IOC_PROTOCOL'
,'IOC_VENDOR'
,'TH_NETDEV'
,'TH_TAPI'
,'SERVICE_MULTIPLE'
,'NS_ALL'
,'NS_SAP'
,'NS_NDS'
,'NS_PEER_BROWSE'
,'NS_SLP'
,'NS_DHCP'
,'NS_TCPIP_LOCAL'
,'NS_TCPIP_HOSTS'
,'NS_DNS'
,'NS_NETBT'
,'NS_WINS'
,'NS_NLA'
,'NS_NBP'
,'NS_MS'
,'NS_STDA'
,'NS_NTDS'
,'NS_X500'
,'NS_NIS'
,'NS_NISPLUS'
,'NS_WRQ'
,'NS_NETDES'
,'RES_UNUSED_1'
,'RES_FLUSH_CACHE'
,'RES_SERVICE'
,'SERVICE_TYPE_VALUE_IPXPORTW'
,'SERVICE_TYPE_VALUE_SAPIDA'
,'SERVICE_TYPE_VALUE_SAPIDW'
,'SERVICE_TYPE_VALUE_TCPPORTW'
,'SERVICE_TYPE_VALUE_UDPPORTA'
,'SERVICE_TYPE_VALUE_UDPPORTW'
,'SERVICE_TYPE_VALUE_OBJECTIDA'
,'SERVICE_TYPE_VALUE_OBJECTIDW'
,'SERVICE_TYPE_VALUE_SAPID'
,'SERVICE_TYPE_VALUE_UDPPORT'
,'SERVICE_TYPE_VALUE_OBJECTID'
,'COMP_EQUAL'
,'COMP_NOTLESS'
,'LUP_DEEP'
,'LUP_CONTAINERS'
,'LUP_NOCONTAINERS'
,'LUP_NEAREST'
,'LUP_RETURN_NAME'
,'LUP_RETURN_TYPE'
,'LUP_RETURN_VERSION'
,'LUP_RETURN_COMMENT'
,'LUP_RETURN_ADDR'
,'LUP_RETURN_BLOB'
,'LUP_RETURN_ALIASES'
,'LUP_RETURN_QUERY_STRING'
,'LUP_RETURN_ALL'
,'LUP_RES_SERVICE'
,'LUP_FLUSHCACHE'
,'LUP_FLUSHPREVIOUS'
,'RESULT_IS_ALIAS'
,'RESULT_IS_ADDED'
,'RESULT_IS_CHANGED'
,'RESULT_IS_DELETED'
,'RNRSERVICE_REGISTER'
,'RNRSERVICE_DEREGISTER'
,'RNRSERVICE_DELETE'
,'MCAST_INCLUDE'
,'MCAST_EXCLUDE'
,'IP_OPTIONS'
,'IP_HDRINCL'
,'IP_TOS'
,'IP_TTL'
,'IP_MULTICAST_IF'
,'IP_MULTICAST_TTL'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,WINSOCK_VERSION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,WINSOCK2_DLL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,FD_SETSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,IOCPARM_MASK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,IOC_VOID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,IOC_OUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,IOC_IN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,IOC_INOUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,IPPROTO_IP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,IPPROTO_ICMP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,IPPROTO_IGMP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,IPPROTO_GGP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,IPPROTO_TCP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,IPPROTO_PUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,IPPROTO_UDP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,IPPROTO_IDP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,IPPROTO_ND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,IPPROTO_IPV6));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,IPPROTO_ICLFXBM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,IPPROTO_RAW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,IPPROTO_MAX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,IPPORT_ECHO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,IPPORT_DISCARD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,IPPORT_SYSTAT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,IPPORT_DAYTIME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,IPPORT_NETSTAT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,IPPORT_FTP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,IPPORT_TELNET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,IPPORT_SMTP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,IPPORT_TIMESERVER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,IPPORT_NAMESERVER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,IPPORT_WHOIS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,IPPORT_MTP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,IPPORT_TFTP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,IPPORT_RJE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,IPPORT_FINGER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,IPPORT_TTYLINK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,IPPORT_SUPDUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,IPPORT_EXECSERVER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,IPPORT_LOGINSERVER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,IPPORT_CMDSERVER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,IPPORT_EFSSERVER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,IPPORT_BIFFUDP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,IPPORT_WHOSERVER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,IPPORT_ROUTESERVER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,IPPORT_RESERVED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,IMPLINK_IP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,IMPLINK_LOWEXPER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,IMPLINK_HIGHEXPER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,TF_DISCONNECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,TF_REUSE_SOCKET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,TF_WRITE_BEHIND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,INVALID_SOCKET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,SOCKET_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,FROM_PROTOCOL_INFO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,SOCK_STREAM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,SOCK_DGRAM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,SOCK_RAW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,SOCK_RDM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,SOCK_SEQPACKET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,SO_DEBUG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,SO_ACCEPTCONN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,SO_REUSEADDR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,SO_KEEPALIVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,SO_DONTROUTE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[65] ,SO_BROADCAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[66] ,SO_USELOOPBACK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[67] ,SO_LINGER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[68] ,SO_OOBINLINE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[69] ,SO_DONTLINGER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[70] ,SO_EXCLUSIVEADDRUSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[71] ,SO_SNDBUF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[72] ,SO_RCVBUF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[73] ,SO_SNDLOWAT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[74] ,SO_RCVLOWAT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[75] ,SO_SNDTIMEO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[76] ,SO_RCVTIMEO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[77] ,SO_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[78] ,SO_TYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[79] ,SO_CONNDATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[80] ,SO_CONNOPT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[81] ,SO_DISCDATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[82] ,SO_DISCOPT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[83] ,SO_CONNDATALEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[84] ,SO_CONNOPTLEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[85] ,SO_DISCDATALEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[86] ,SO_DISCOPTLEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[87] ,SO_OPENTYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[88] ,SO_SYNCHRONOUS_ALERT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[89] ,SO_SYNCHRONOUS_NONALERT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[90] ,SO_MAXDG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[91] ,SO_MAXPATHDG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[92] ,SO_UPDATE_ACCEPT_CONTEXT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[93] ,SO_CONNECT_TIME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[94] ,TCP_NODELAY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[95] ,TCP_BSDURGENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[96] ,SO_GROUP_ID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[97] ,SO_GROUP_PRIORITY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[98] ,SO_MAX_MSG_SIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[99] ,SO_PROTOCOL_INFOA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[100] ,SO_PROTOCOL_INFOW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[101] ,SO_PROTOCOL_INFO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[102] ,PVD_CONFIG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[103] ,SO_CONDITIONAL_ACCEPT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[104] ,AF_UNSPEC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[105] ,AF_UNIX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[106] ,AF_INET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[107] ,AF_IMPLINK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[108] ,AF_PUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[109] ,AF_CHAOS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[110] ,AF_IPX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[111] ,AF_NS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[112] ,AF_ISO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[113] ,AF_OSI));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[114] ,AF_ECMA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[115] ,AF_DATAKIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[116] ,AF_CCITT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[117] ,AF_SNA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[118] ,AF_DECNET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[119] ,AF_DLI));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[120] ,AF_LAT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[121] ,AF_HYLINK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[122] ,AF_APPLETALK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[123] ,AF_NETBIOS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[124] ,AF_VOICEVIEW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[125] ,AF_FIREFOX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[126] ,AF_UNKNOWN1));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[127] ,AF_BAN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[128] ,AF_ATM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[129] ,AF_INET6));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[130] ,AF_CLUSTER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[131] ,AF_12844));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[132] ,AF_IRDA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[133] ,AF_NETDES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[134] ,AF_TCNPROCESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[135] ,AF_TCNMESSAGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[136] ,AF_ICLFXBM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[137] ,AF_MAX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[138] ,PF_UNSPEC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[139] ,PF_UNIX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[140] ,PF_INET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[141] ,PF_IMPLINK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[142] ,PF_PUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[143] ,PF_CHAOS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[144] ,PF_NS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[145] ,PF_IPX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[146] ,PF_ISO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[147] ,PF_OSI));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[148] ,PF_ECMA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[149] ,PF_DATAKIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[150] ,PF_CCITT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[151] ,PF_SNA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[152] ,PF_DECNET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[153] ,PF_DLI));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[154] ,PF_LAT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[155] ,PF_HYLINK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[156] ,PF_APPLETALK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[157] ,PF_VOICEVIEW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[158] ,PF_FIREFOX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[159] ,PF_UNKNOWN1));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[160] ,PF_BAN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[161] ,PF_ATM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[162] ,PF_INET6));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[163] ,PF_MAX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[164] ,INADDR_ANY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[165] ,INADDR_LOOPBACK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[166] ,INADDR_BROADCAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[167] ,INADDR_NONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[168] ,SOL_SOCKET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[169] ,MSG_OOB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[170] ,MSG_PEEK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[171] ,MSG_DONTROUTE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[172] ,MSG_PARTIAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[173] ,MSG_INTERRUPT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[174] ,MSG_MAXIOVLEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[175] ,MAXGETHOSTSTRUCT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[176] ,SOMAXCONN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[177] ,FD_READ_BIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[178] ,FD_WRITE_BIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[179] ,FD_OOB_BIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[180] ,FD_ACCEPT_BIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[181] ,FD_CONNECT_BIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[182] ,FD_CLOSE_BIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[183] ,FD_QOS_BIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[184] ,FD_GROUP_QOS_BIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[185] ,FD_ROUTING_INTERFACE_CHANGE_BIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[186] ,FD_ADDRESS_LIST_CHANGE_BIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[187] ,FD_MAX_EVENTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[188] ,FD_READ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[189] ,FD_WRITE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[190] ,FD_OOB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[191] ,FD_ACCEPT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[192] ,FD_CONNECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[193] ,FD_CLOSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[194] ,FD_QOS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[195] ,FD_GROUP_QOS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[196] ,FD_ROUTING_INTERFACE_CHANGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[197] ,FD_ADDRESS_LIST_CHANGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[198] ,FD_ALL_EVENTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[199] ,WSABASEERR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[200] ,WSAEINTR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[201] ,WSAEBADF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[202] ,WSAEACCES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[203] ,WSAEFAULT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[204] ,WSAEINVAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[205] ,WSAEMFILE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[206] ,WSAEWOULDBLOCK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[207] ,WSAEINPROGRESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[208] ,WSAEALREADY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[209] ,WSAENOTSOCK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[210] ,WSAEDESTADDRREQ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[211] ,WSAEMSGSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[212] ,WSAEPROTOTYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[213] ,WSAENOPROTOOPT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[214] ,WSAEPROTONOSUPPORT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[215] ,WSAESOCKTNOSUPPORT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[216] ,WSAEOPNOTSUPP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[217] ,WSAEPFNOSUPPORT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[218] ,WSAEAFNOSUPPORT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[219] ,WSAEADDRINUSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[220] ,WSAEADDRNOTAVAIL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[221] ,WSAENETDOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[222] ,WSAENETUNREACH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[223] ,WSAENETRESET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[224] ,WSAECONNABORTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[225] ,WSAECONNRESET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[226] ,WSAENOBUFS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[227] ,WSAEISCONN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[228] ,WSAENOTCONN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[229] ,WSAESHUTDOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[230] ,WSAETOOMANYREFS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[231] ,WSAETIMEDOUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[232] ,WSAECONNREFUSED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[233] ,WSAELOOP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[234] ,WSAENAMETOOLONG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[235] ,WSAEHOSTDOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[236] ,WSAEHOSTUNREACH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[237] ,WSAENOTEMPTY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[238] ,WSAEPROCLIM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[239] ,WSAEUSERS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[240] ,WSAEDQUOT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[241] ,WSAESTALE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[242] ,WSAEREMOTE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[243] ,WSASYSNOTREADY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[244] ,WSAVERNOTSUPPORTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[245] ,WSANOTINITIALISED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[246] ,WSAEDISCON));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[247] ,WSAENOMORE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[248] ,WSAECANCELLED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[249] ,WSAEINVALIDPROCTABLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[250] ,WSAEINVALIDPROVIDER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[251] ,WSAEPROVIDERFAILEDINIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[252] ,WSASYSCALLFAILURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[253] ,WSASERVICE_NOT_FOUND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[254] ,WSATYPE_NOT_FOUND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[255] ,WSA_E_NO_MORE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[256] ,WSA_E_CANCELLED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[257] ,WSAEREFUSED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[258] ,WSAHOST_NOT_FOUND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[259] ,HOST_NOT_FOUND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[260] ,WSATRY_AGAIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[261] ,TRY_AGAIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[262] ,WSANO_RECOVERY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[263] ,NO_RECOVERY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[264] ,WSANO_DATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[265] ,NO_DATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[266] ,WSANO_ADDRESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[267] ,NO_ADDRESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[268] ,WSA_QOS_RECEIVERS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[269] ,WSA_QOS_SENDERS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[270] ,WSA_QOS_NO_SENDERS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[271] ,WSA_QOS_NO_RECEIVERS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[272] ,WSA_QOS_REQUEST_CONFIRMED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[273] ,WSA_QOS_ADMISSION_FAILURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[274] ,WSA_QOS_POLICY_FAILURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[275] ,WSA_QOS_BAD_STYLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[276] ,WSA_QOS_BAD_OBJECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[277] ,WSA_QOS_TRAFFIC_CTRL_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[278] ,WSA_QOS_GENERIC_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[279] ,WSA_QOS_ESERVICETYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[280] ,WSA_QOS_EFLOWSPEC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[281] ,WSA_QOS_EPROVSPECBUF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[282] ,WSA_QOS_EFILTERSTYLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[283] ,WSA_QOS_EFILTERTYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[284] ,WSA_QOS_EFILTERCOUNT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[285] ,WSA_QOS_EOBJLENGTH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[286] ,WSA_QOS_EFLOWCOUNT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[287] ,WSA_QOS_EUNKOWNPSOBJ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[288] ,WSA_QOS_EPOLICYOBJ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[289] ,WSA_QOS_EFLOWDESC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[290] ,WSA_QOS_EPSFLOWSPEC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[291] ,WSA_QOS_EPSFILTERSPEC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[292] ,WSA_QOS_ESDMODEOBJ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[293] ,WSA_QOS_ESHAPERATEOBJ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[294] ,WSA_QOS_RESERVED_PETYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[295] ,WSA_IO_PENDING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[296] ,WSA_IO_INCOMPLETE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[297] ,WSA_INVALID_HANDLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[298] ,WSA_INVALID_PARAMETER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[299] ,WSA_NOT_ENOUGH_MEMORY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[300] ,WSA_OPERATION_ABORTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[301] ,WSA_INVALID_EVENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[302] ,WSA_MAXIMUM_WAIT_EVENTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[303] ,WSA_WAIT_FAILED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[304] ,WSA_WAIT_EVENT_0));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[305] ,WSA_WAIT_IO_COMPLETION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[306] ,WSA_WAIT_TIMEOUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[307] ,EWOULDBLOCK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[308] ,EINPROGRESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[309] ,EALREADY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[310] ,ENOTSOCK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[311] ,EDESTADDRREQ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[312] ,EMSGSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[313] ,EPROTOTYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[314] ,ENOPROTOOPT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[315] ,EPROTONOSUPPORT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[316] ,ESOCKTNOSUPPORT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[317] ,EOPNOTSUPP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[318] ,EPFNOSUPPORT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[319] ,EAFNOSUPPORT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[320] ,EADDRINUSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[321] ,EADDRNOTAVAIL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[322] ,ENETDOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[323] ,ENETUNREACH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[324] ,ENETRESET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[325] ,ECONNABORTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[326] ,ECONNRESET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[327] ,ENOBUFS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[328] ,EISCONN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[329] ,ENOTCONN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[330] ,ESHUTDOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[331] ,ETOOMANYREFS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[332] ,ETIMEDOUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[333] ,ECONNREFUSED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[334] ,ELOOP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[335] ,ENAMETOOLONG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[336] ,EHOSTDOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[337] ,EHOSTUNREACH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[338] ,ENOTEMPTY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[339] ,EPROCLIM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[340] ,EUSERS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[341] ,EDQUOT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[342] ,ESTALE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[343] ,EREMOTE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[344] ,WSADESCRIPTION_LEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[345] ,WSASYS_STATUS_LEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[346] ,SERVICETYPE_NOTRAFFIC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[347] ,SERVICETYPE_BESTEFFORT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[348] ,SERVICETYPE_CONTROLLEDLOAD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[349] ,SERVICETYPE_GUARANTEED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[350] ,SERVICETYPE_NETWORK_UNAVAILABLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[351] ,SERVICETYPE_GENERAL_INFORMATION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[352] ,SERVICETYPE_NOCHANGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[353] ,SERVICE_IMMEDIATE_TRAFFIC_CONTROL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[354] ,CF_ACCEPT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[355] ,CF_REJECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[356] ,CF_DEFER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[357] ,SD_RECEIVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[358] ,SD_SEND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[359] ,SD_BOTH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[360] ,SG_UNCONSTRAINED_GROUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[361] ,SG_CONSTRAINED_GROUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[362] ,MAX_PROTOCOL_CHAIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[363] ,BASE_PROTOCOL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[364] ,LAYERED_PROTOCOL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[365] ,WSAPROTOCOL_LEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[366] ,PFL_MULTIPLE_PROTO_ENTRIES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[367] ,PFL_RECOMMENTED_PROTO_ENTRY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[368] ,PFL_HIDDEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[369] ,PFL_MATCHES_PROTOCOL_ZERO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[370] ,XP1_CONNECTIONLESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[371] ,XP1_GUARANTEED_DELIVERY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[372] ,XP1_GUARANTEED_ORDER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[373] ,XP1_MESSAGE_ORIENTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[374] ,XP1_PSEUDO_STREAM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[375] ,XP1_GRACEFUL_CLOSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[376] ,XP1_EXPEDITED_DATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[377] ,XP1_CONNECT_DATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[378] ,XP1_DISCONNECT_DATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[379] ,XP1_SUPPORT_BROADCAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[380] ,XP1_SUPPORT_MULTIPOINT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[381] ,XP1_MULTIPOINT_CONTROL_PLANE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[382] ,XP1_MULTIPOINT_DATA_PLANE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[383] ,XP1_QOS_SUPPORTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[384] ,XP1_INTERRUPT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[385] ,XP1_UNI_SEND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[386] ,XP1_UNI_RECV));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[387] ,XP1_IFS_HANDLES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[388] ,XP1_PARTIAL_MESSAGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[389] ,BIGENDIAN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[390] ,LITTLEENDIAN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[391] ,SECURITY_PROTOCOL_NONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[392] ,JL_SENDER_ONLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[393] ,JL_RECEIVER_ONLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[394] ,JL_BOTH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[395] ,WSA_FLAG_OVERLAPPED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[396] ,WSA_FLAG_MULTIPOINT_C_ROOT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[397] ,WSA_FLAG_MULTIPOINT_C_LEAF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[398] ,WSA_FLAG_MULTIPOINT_D_ROOT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[399] ,WSA_FLAG_MULTIPOINT_D_LEAF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[400] ,IOC_UNIX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[401] ,IOC_WS2));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[402] ,IOC_PROTOCOL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[403] ,IOC_VENDOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[404] ,TH_NETDEV));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[405] ,TH_TAPI));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[406] ,SERVICE_MULTIPLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[407] ,NS_ALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[408] ,NS_SAP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[409] ,NS_NDS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[410] ,NS_PEER_BROWSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[411] ,NS_SLP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[412] ,NS_DHCP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[413] ,NS_TCPIP_LOCAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[414] ,NS_TCPIP_HOSTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[415] ,NS_DNS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[416] ,NS_NETBT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[417] ,NS_WINS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[418] ,NS_NLA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[419] ,NS_NBP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[420] ,NS_MS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[421] ,NS_STDA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[422] ,NS_NTDS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[423] ,NS_X500));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[424] ,NS_NIS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[425] ,NS_NISPLUS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[426] ,NS_WRQ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[427] ,NS_NETDES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[428] ,RES_UNUSED_1));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[429] ,RES_FLUSH_CACHE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[430] ,RES_SERVICE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[431] ,Integer(SERVICE_TYPE_VALUE_IPXPORTW)));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[432] ,SERVICE_TYPE_VALUE_SAPIDA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[433] ,Integer(SERVICE_TYPE_VALUE_SAPIDW)));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[434] ,Integer(SERVICE_TYPE_VALUE_TCPPORTW)));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[435] ,SERVICE_TYPE_VALUE_UDPPORTA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[436] ,Integer(SERVICE_TYPE_VALUE_UDPPORTW)));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[437] ,SERVICE_TYPE_VALUE_OBJECTIDA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[438] ,Integer(SERVICE_TYPE_VALUE_OBJECTIDW)));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[439] ,SERVICE_TYPE_VALUE_SAPID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[440] ,SERVICE_TYPE_VALUE_UDPPORT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[441] ,SERVICE_TYPE_VALUE_OBJECTID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[442] ,COMP_EQUAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[443] ,COMP_NOTLESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[444] ,LUP_DEEP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[445] ,LUP_CONTAINERS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[446] ,LUP_NOCONTAINERS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[447] ,LUP_NEAREST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[448] ,LUP_RETURN_NAME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[449] ,LUP_RETURN_TYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[450] ,LUP_RETURN_VERSION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[451] ,LUP_RETURN_COMMENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[452] ,LUP_RETURN_ADDR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[453] ,LUP_RETURN_BLOB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[454] ,LUP_RETURN_ALIASES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[455] ,LUP_RETURN_QUERY_STRING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[456] ,LUP_RETURN_ALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[457] ,LUP_RES_SERVICE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[458] ,LUP_FLUSHCACHE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[459] ,LUP_FLUSHPREVIOUS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[460] ,RESULT_IS_ALIAS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[461] ,RESULT_IS_ADDED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[462] ,RESULT_IS_CHANGED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[463] ,RESULT_IS_DELETED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[464] ,RNRSERVICE_REGISTER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[465] ,RNRSERVICE_DEREGISTER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[466] ,RNRSERVICE_DELETE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[467] ,MCAST_INCLUDE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[468] ,MCAST_EXCLUDE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[469] ,IP_OPTIONS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[470] ,IP_HDRINCL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[471] ,IP_TOS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[472] ,IP_TTL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[473] ,IP_MULTICAST_IF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[474] ,IP_MULTICAST_TTL));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const __ConstNames1 : array[0..226] of string = (
'IP_MULTICAST_LOOP'
,'IP_ADD_MEMBERSHIP'
,'IP_DROP_MEMBERSHIP'
,'IP_DONTFRAGMENT'
,'IP_ADD_SOURCE_MEMBERSHIP'
,'IP_DROP_SOURCE_MEMBERSHIP'
,'IP_BLOCK_SOURCE'
,'IP_UNBLOCK_SOURCE'
,'IP_PKTINFO'
,'IP_DEFAULT_MULTICAST_TTL'
,'IP_DEFAULT_MULTICAST_LOOP'
,'IP_MAX_MEMBERSHIPS'
,'IPV6_HDRINCL'
,'IPV6_UNICAST_HOPS'
,'IPV6_MULTICAST_IF'
,'IPV6_MULTICAST_HOPS'
,'IPV6_MULTICAST_LOOP'
,'IPV6_ADD_MEMBERSHIP'
,'IPV6_DROP_MEMBERSHIP'
,'IPV6_PKTINFO'
,'UDP_NOCHECKSUM'
,'UDP_CHECKSUM_COVERAGE'
,'TCP_EXPEDITED_1122'
,'IFF_UP'
,'IFF_BROADCAST'
,'IFF_LOOPBACK'
,'IFF_POINTTOPOINT'
,'IFF_MULTICAST'
,'EAI_AGAIN'
,'EAI_BADFLAGS'
,'EAI_FAIL'
,'EAI_FAMILY'
,'EAI_MEMORY'
,'EAI_NONAME'
,'EAI_SERVICE'
,'EAI_SOCKTYPE'
,'EAI_NODATA'
,'AI_PASSIVE'
,'ai_canonname'
,'AI_NUMERICHOST'
,'NSPROTO_IPX'
,'NSPROTO_SPX'
,'NSPROTO_SPXII'
,'IPX_PTYPE'
,'IPX_FILTERPTYPE'
,'IPX_STOPFILTERPTYPE'
,'IPX_DSTYPE'
,'IPX_EXTENDED_ADDRESS'
,'IPX_RECVHDR'
,'IPX_MAXSIZE'
,'IPX_ADDRESS'
,'IPX_GETNETINFO'
,'IPX_GETNETINFO_NORIP'
,'IPX_SPXGETCONNECTIONSTATUS'
,'IPX_ADDRESS_NOTIFY'
,'IPX_MAX_ADAPTER_NUM'
,'IPX_RERIPNETNUMBER'
,'IPX_RECEIVE_BROADCAST'
,'IPX_IMMEDIATESPXACK'
,'NETBIOS_NAME_LENGTH'
,'NETBIOS_UNIQUE_NAME'
,'NETBIOS_GROUP_NAME'
,'NETBIOS_TYPE_QUICK_UNIQUE'
,'NETBIOS_TYPE_QUICK_GROUP'
,'ATMPROTO_AALUSER'
,'ATMPROTO_AAL1'
,'ATMPROTO_AAL2'
,'ATMPROTO_AAL34'
,'ATMPROTO_AAL5'
,'SAP_FIELD_ABSENT'
,'SAP_FIELD_ANY'
,'SAP_FIELD_ANY_AESA_SEL'
,'SAP_FIELD_ANY_AESA_REST'
,'ATM_E164'
,'ATM_NSAP'
,'ATM_AESA'
,'ATM_ADDR_SIZE'
,'BLLI_L2_ISO_1745'
,'BLLI_L2_Q921'
,'BLLI_L2_X25L'
,'BLLI_L2_X25M'
,'BLLI_L2_ELAPB'
,'BLLI_L2_HDLC_NRM'
,'BLLI_L2_HDLC_ABM'
,'BLLI_L2_HDLC_ARM'
,'BLLI_L2_LLC'
,'BLLI_L2_X75'
,'BLLI_L2_Q922'
,'BLLI_L2_USER_SPECIFIED'
,'BLLI_L2_ISO_7776'
,'BLLI_L3_X25'
,'BLLI_L3_ISO_8208'
,'BLLI_L3_X223'
,'BLLI_L3_SIO_8473'
,'BLLI_L3_T70'
,'BLLI_L3_ISO_TR9577'
,'BLLI_L3_USER_SPECIFIED'
,'BLLI_L3_IPI_SNAP'
,'BLLI_L3_IPI_IP'
,'BHLI_ISO'
,'BHLI_UserSpecific'
,'BHLI_HighLayerProfile'
,'BHLI_VendorSpecificAppId'
,'IE_AALParameters'
,'IE_TrafficDescriptor'
,'IE_BroadbandBearerCapability'
,'IE_BHLI'
,'IE_BLLI'
,'IE_CalledPartyNumber'
,'IE_CalledPartySubaddress'
,'IE_CallingPartyNumber'
,'IE_CallingPartySubaddress'
,'IE_Cause'
,'IE_QOSClass'
,'IE_TransitNetworkSelection'
,'AALTYPE_5'
,'AALTYPE_USER'
,'AAL5_MODE_MESSAGE'
,'AAL5_MODE_STREAMING'
,'AAL5_SSCS_NULL'
,'AAL5_SSCS_SSCOP_ASSURED'
,'AAL5_SSCS_SSCOP_NON_ASSURED'
,'AAL5_SSCS_FRAME_RELAY'
,'BCOB_A'
,'BCOB_C'
,'BCOB_X'
,'TT_NOIND'
,'TT_CBR'
,'TT_VBR'
,'TR_NOIND'
,'TR_END_TO_END'
,'TR_NO_END_TO_END'
,'CLIP_NOT'
,'CLIP_SUS'
,'UP_P2P'
,'UP_P2MP'
,'BLLI_L2_MODE_NORMAL'
,'BLLI_L2_MODE_EXT'
,'BLLI_L3_MODE_NORMAL'
,'BLLI_L3_MODE_EXT'
,'BLLI_L3_PACKET_16'
,'BLLI_L3_PACKET_32'
,'BLLI_L3_PACKET_64'
,'BLLI_L3_PACKET_128'
,'BLLI_L3_PACKET_256'
,'BLLI_L3_PACKET_512'
,'BLLI_L3_PACKET_1024'
,'BLLI_L3_PACKET_2048'
,'BLLI_L3_PACKET_4096'
,'PI_ALLOWED'
,'PI_RESTRICTED'
,'PI_NUMBER_NOT_AVAILABLE'
,'SI_USER_NOT_SCREENED'
,'SI_USER_PASSED'
,'SI_USER_FAILED'
,'SI_NETWORK'
,'CAUSE_LOC_USER'
,'CAUSE_LOC_PRIVATE_LOCAL'
,'CAUSE_LOC_PUBLIC_LOCAL'
,'CAUSE_LOC_TRANSIT_NETWORK'
,'CAUSE_LOC_PUBLIC_REMOTE'
,'CAUSE_LOC_PRIVATE_REMOTE'
,'CAUSE_LOC_INTERNATIONAL_NETWORK'
,'CAUSE_LOC_BEYOND_INTERWORKING'
,'CAUSE_UNALLOCATED_NUMBER'
,'CAUSE_NO_ROUTE_TO_TRANSIT_NETWORK'
,'CAUSE_NO_ROUTE_TO_DESTINATION'
,'CAUSE_VPI_VCI_UNACCEPTABLE'
,'CAUSE_NORMAL_CALL_CLEARING'
,'CAUSE_USER_BUSY'
,'CAUSE_NO_USER_RESPONDING'
,'CAUSE_CALL_REJECTED'
,'CAUSE_NUMBER_CHANGED'
,'CAUSE_USER_REJECTS_CLIR'
,'CAUSE_DESTINATION_OUT_OF_ORDER'
,'CAUSE_INVALID_NUMBER_FORMAT'
,'CAUSE_STATUS_ENQUIRY_RESPONSE'
,'CAUSE_NORMAL_UNSPECIFIED'
,'CAUSE_VPI_VCI_UNAVAILABLE'
,'CAUSE_NETWORK_OUT_OF_ORDER'
,'CAUSE_TEMPORARY_FAILURE'
,'CAUSE_ACCESS_INFORMAION_DISCARDED'
,'CAUSE_NO_VPI_VCI_AVAILABLE'
,'CAUSE_RESOURCE_UNAVAILABLE'
,'CAUSE_QOS_UNAVAILABLE'
,'CAUSE_USER_CELL_RATE_UNAVAILABLE'
,'CAUSE_BEARER_CAPABILITY_UNAUTHORIZED'
,'CAUSE_BEARER_CAPABILITY_UNAVAILABLE'
,'CAUSE_OPTION_UNAVAILABLE'
,'CAUSE_BEARER_CAPABILITY_UNIMPLEMENTED'
,'CAUSE_UNSUPPORTED_TRAFFIC_PARAMETERS'
,'CAUSE_INVALID_CALL_REFERENCE'
,'CAUSE_CHANNEL_NONEXISTENT'
,'CAUSE_INCOMPATIBLE_DESTINATION'
,'CAUSE_INVALID_ENDPOINT_REFERENCE'
,'CAUSE_INVALID_TRANSIT_NETWORK_SELECTION'
,'CAUSE_TOO_MANY_PENDING_ADD_PARTY'
,'CAUSE_AAL_PARAMETERS_UNSUPPORTED'
,'CAUSE_MANDATORY_IE_MISSING'
,'CAUSE_UNIMPLEMENTED_MESSAGE_TYPE'
,'CAUSE_UNIMPLEMENTED_IE'
,'CAUSE_INVALID_IE_CONTENTS'
,'CAUSE_INVALID_STATE_FOR_MESSAGE'
,'CAUSE_RECOVERY_ON_TIMEOUT'
,'CAUSE_INCORRECT_MESSAGE_LENGTH'
,'CAUSE_PROTOCOL_ERROR'
,'CAUSE_COND_UNKNOWN'
,'CAUSE_COND_PERMANENT'
,'CAUSE_COND_TRANSIENT'
,'CAUSE_REASON_USER'
,'CAUSE_REASON_IE_MISSING'
,'CAUSE_REASON_IE_INSUFFICIENT'
,'CAUSE_PU_PROVIDER'
,'CAUSE_PU_USER'
,'CAUSE_NA_NORMAL'
,'CAUSE_NA_ABNORMAL'
,'QOS_CLASS0'
,'QOS_CLASS1'
,'QOS_CLASS2'
,'QOS_CLASS3'
,'QOS_CLASS4'
,'TNS_TYPE_NATIONAL'
,'TNS_PLAN_CARRIER_ID_CODE'
,'SIO_GET_NUMBER_OF_ATM_DEVICES'
,'SIO_GET_ATM_ADDRESS'
,'SIO_ASSOCIATE_PVC'
,'SIO_GET_ATM_CONNECTION_ID'
);
var __RegisteredConstsList1 : TList;
procedure __RegisterConsts1;
begin
__RegisteredConstsList1 := TList.Create;
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[0] ,IP_MULTICAST_LOOP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[1] ,IP_ADD_MEMBERSHIP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[2] ,IP_DROP_MEMBERSHIP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[3] ,IP_DONTFRAGMENT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[4] ,IP_ADD_SOURCE_MEMBERSHIP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[5] ,IP_DROP_SOURCE_MEMBERSHIP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[6] ,IP_BLOCK_SOURCE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[7] ,IP_UNBLOCK_SOURCE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[8] ,IP_PKTINFO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[9] ,IP_DEFAULT_MULTICAST_TTL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[10] ,IP_DEFAULT_MULTICAST_LOOP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[11] ,IP_MAX_MEMBERSHIPS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[12] ,IPV6_HDRINCL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[13] ,IPV6_UNICAST_HOPS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[14] ,IPV6_MULTICAST_IF));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[15] ,IPV6_MULTICAST_HOPS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[16] ,IPV6_MULTICAST_LOOP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[17] ,IPV6_ADD_MEMBERSHIP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[18] ,IPV6_DROP_MEMBERSHIP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[19] ,IPV6_PKTINFO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[20] ,UDP_NOCHECKSUM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[21] ,UDP_CHECKSUM_COVERAGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[22] ,TCP_EXPEDITED_1122));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[23] ,IFF_UP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[24] ,IFF_BROADCAST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[25] ,IFF_LOOPBACK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[26] ,IFF_POINTTOPOINT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[27] ,IFF_MULTICAST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[28] ,EAI_AGAIN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[29] ,EAI_BADFLAGS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[30] ,EAI_FAIL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[31] ,EAI_FAMILY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[32] ,EAI_MEMORY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[33] ,EAI_NONAME));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[34] ,EAI_SERVICE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[35] ,EAI_SOCKTYPE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[36] ,EAI_NODATA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[37] ,AI_PASSIVE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[38] ,ai_canonname));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[39] ,AI_NUMERICHOST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[40] ,NSPROTO_IPX));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[41] ,NSPROTO_SPX));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[42] ,NSPROTO_SPXII));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[43] ,IPX_PTYPE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[44] ,IPX_FILTERPTYPE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[45] ,IPX_STOPFILTERPTYPE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[46] ,IPX_DSTYPE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[47] ,IPX_EXTENDED_ADDRESS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[48] ,IPX_RECVHDR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[49] ,IPX_MAXSIZE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[50] ,IPX_ADDRESS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[51] ,IPX_GETNETINFO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[52] ,IPX_GETNETINFO_NORIP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[53] ,IPX_SPXGETCONNECTIONSTATUS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[54] ,IPX_ADDRESS_NOTIFY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[55] ,IPX_MAX_ADAPTER_NUM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[56] ,IPX_RERIPNETNUMBER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[57] ,IPX_RECEIVE_BROADCAST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[58] ,IPX_IMMEDIATESPXACK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[59] ,NETBIOS_NAME_LENGTH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[60] ,NETBIOS_UNIQUE_NAME));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[61] ,NETBIOS_GROUP_NAME));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[62] ,NETBIOS_TYPE_QUICK_UNIQUE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[63] ,NETBIOS_TYPE_QUICK_GROUP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[64] ,ATMPROTO_AALUSER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[65] ,ATMPROTO_AAL1));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[66] ,ATMPROTO_AAL2));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[67] ,ATMPROTO_AAL34));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[68] ,ATMPROTO_AAL5));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[69] ,SAP_FIELD_ABSENT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[70] ,SAP_FIELD_ANY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[71] ,SAP_FIELD_ANY_AESA_SEL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[72] ,SAP_FIELD_ANY_AESA_REST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[73] ,ATM_E164));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[74] ,ATM_NSAP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[75] ,ATM_AESA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[76] ,ATM_ADDR_SIZE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[77] ,BLLI_L2_ISO_1745));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[78] ,BLLI_L2_Q921));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[79] ,BLLI_L2_X25L));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[80] ,BLLI_L2_X25M));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[81] ,BLLI_L2_ELAPB));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[82] ,BLLI_L2_HDLC_NRM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[83] ,BLLI_L2_HDLC_ABM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[84] ,BLLI_L2_HDLC_ARM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[85] ,BLLI_L2_LLC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[86] ,BLLI_L2_X75));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[87] ,BLLI_L2_Q922));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[88] ,BLLI_L2_USER_SPECIFIED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[89] ,BLLI_L2_ISO_7776));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[90] ,BLLI_L3_X25));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[91] ,BLLI_L3_ISO_8208));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[92] ,BLLI_L3_X223));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[93] ,BLLI_L3_SIO_8473));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[94] ,BLLI_L3_T70));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[95] ,BLLI_L3_ISO_TR9577));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[96] ,BLLI_L3_USER_SPECIFIED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[97] ,BLLI_L3_IPI_SNAP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[98] ,BLLI_L3_IPI_IP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[99] ,BHLI_ISO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[100] ,BHLI_UserSpecific));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[101] ,BHLI_HighLayerProfile));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[102] ,BHLI_VendorSpecificAppId));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[103] ,IE_AALParameters));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[104] ,IE_TrafficDescriptor));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[105] ,IE_BroadbandBearerCapability));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[106] ,IE_BHLI));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[107] ,IE_BLLI));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[108] ,IE_CalledPartyNumber));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[109] ,IE_CalledPartySubaddress));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[110] ,IE_CallingPartyNumber));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[111] ,IE_CallingPartySubaddress));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[112] ,IE_Cause));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[113] ,IE_QOSClass));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[114] ,IE_TransitNetworkSelection));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[115] ,AALTYPE_5));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[116] ,AALTYPE_USER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[117] ,AAL5_MODE_MESSAGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[118] ,AAL5_MODE_STREAMING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[119] ,AAL5_SSCS_NULL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[120] ,AAL5_SSCS_SSCOP_ASSURED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[121] ,AAL5_SSCS_SSCOP_NON_ASSURED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[122] ,AAL5_SSCS_FRAME_RELAY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[123] ,BCOB_A));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[124] ,BCOB_C));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[125] ,BCOB_X));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[126] ,TT_NOIND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[127] ,TT_CBR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[128] ,TT_VBR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[129] ,TR_NOIND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[130] ,TR_END_TO_END));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[131] ,TR_NO_END_TO_END));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[132] ,CLIP_NOT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[133] ,CLIP_SUS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[134] ,UP_P2P));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[135] ,UP_P2MP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[136] ,BLLI_L2_MODE_NORMAL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[137] ,BLLI_L2_MODE_EXT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[138] ,BLLI_L3_MODE_NORMAL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[139] ,BLLI_L3_MODE_EXT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[140] ,BLLI_L3_PACKET_16));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[141] ,BLLI_L3_PACKET_32));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[142] ,BLLI_L3_PACKET_64));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[143] ,BLLI_L3_PACKET_128));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[144] ,BLLI_L3_PACKET_256));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[145] ,BLLI_L3_PACKET_512));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[146] ,BLLI_L3_PACKET_1024));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[147] ,BLLI_L3_PACKET_2048));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[148] ,BLLI_L3_PACKET_4096));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[149] ,PI_ALLOWED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[150] ,PI_RESTRICTED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[151] ,PI_NUMBER_NOT_AVAILABLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[152] ,SI_USER_NOT_SCREENED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[153] ,SI_USER_PASSED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[154] ,SI_USER_FAILED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[155] ,SI_NETWORK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[156] ,CAUSE_LOC_USER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[157] ,CAUSE_LOC_PRIVATE_LOCAL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[158] ,CAUSE_LOC_PUBLIC_LOCAL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[159] ,CAUSE_LOC_TRANSIT_NETWORK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[160] ,CAUSE_LOC_PUBLIC_REMOTE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[161] ,CAUSE_LOC_PRIVATE_REMOTE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[162] ,CAUSE_LOC_INTERNATIONAL_NETWORK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[163] ,CAUSE_LOC_BEYOND_INTERWORKING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[164] ,CAUSE_UNALLOCATED_NUMBER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[165] ,CAUSE_NO_ROUTE_TO_TRANSIT_NETWORK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[166] ,CAUSE_NO_ROUTE_TO_DESTINATION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[167] ,CAUSE_VPI_VCI_UNACCEPTABLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[168] ,CAUSE_NORMAL_CALL_CLEARING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[169] ,CAUSE_USER_BUSY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[170] ,CAUSE_NO_USER_RESPONDING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[171] ,CAUSE_CALL_REJECTED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[172] ,CAUSE_NUMBER_CHANGED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[173] ,CAUSE_USER_REJECTS_CLIR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[174] ,CAUSE_DESTINATION_OUT_OF_ORDER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[175] ,CAUSE_INVALID_NUMBER_FORMAT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[176] ,CAUSE_STATUS_ENQUIRY_RESPONSE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[177] ,CAUSE_NORMAL_UNSPECIFIED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[178] ,CAUSE_VPI_VCI_UNAVAILABLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[179] ,CAUSE_NETWORK_OUT_OF_ORDER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[180] ,CAUSE_TEMPORARY_FAILURE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[181] ,CAUSE_ACCESS_INFORMAION_DISCARDED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[182] ,CAUSE_NO_VPI_VCI_AVAILABLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[183] ,CAUSE_RESOURCE_UNAVAILABLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[184] ,CAUSE_QOS_UNAVAILABLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[185] ,CAUSE_USER_CELL_RATE_UNAVAILABLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[186] ,CAUSE_BEARER_CAPABILITY_UNAUTHORIZED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[187] ,CAUSE_BEARER_CAPABILITY_UNAVAILABLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[188] ,CAUSE_OPTION_UNAVAILABLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[189] ,CAUSE_BEARER_CAPABILITY_UNIMPLEMENTED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[190] ,CAUSE_UNSUPPORTED_TRAFFIC_PARAMETERS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[191] ,CAUSE_INVALID_CALL_REFERENCE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[192] ,CAUSE_CHANNEL_NONEXISTENT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[193] ,CAUSE_INCOMPATIBLE_DESTINATION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[194] ,CAUSE_INVALID_ENDPOINT_REFERENCE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[195] ,CAUSE_INVALID_TRANSIT_NETWORK_SELECTION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[196] ,CAUSE_TOO_MANY_PENDING_ADD_PARTY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[197] ,CAUSE_AAL_PARAMETERS_UNSUPPORTED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[198] ,CAUSE_MANDATORY_IE_MISSING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[199] ,CAUSE_UNIMPLEMENTED_MESSAGE_TYPE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[200] ,CAUSE_UNIMPLEMENTED_IE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[201] ,CAUSE_INVALID_IE_CONTENTS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[202] ,CAUSE_INVALID_STATE_FOR_MESSAGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[203] ,CAUSE_RECOVERY_ON_TIMEOUT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[204] ,CAUSE_INCORRECT_MESSAGE_LENGTH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[205] ,CAUSE_PROTOCOL_ERROR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[206] ,CAUSE_COND_UNKNOWN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[207] ,CAUSE_COND_PERMANENT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[208] ,CAUSE_COND_TRANSIENT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[209] ,CAUSE_REASON_USER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[210] ,CAUSE_REASON_IE_MISSING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[211] ,CAUSE_REASON_IE_INSUFFICIENT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[212] ,CAUSE_PU_PROVIDER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[213] ,CAUSE_PU_USER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[214] ,CAUSE_NA_NORMAL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[215] ,CAUSE_NA_ABNORMAL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[216] ,QOS_CLASS0));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[217] ,QOS_CLASS1));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[218] ,QOS_CLASS2));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[219] ,QOS_CLASS3));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[220] ,QOS_CLASS4));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[221] ,TNS_TYPE_NATIONAL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[222] ,TNS_PLAN_CARRIER_ID_CODE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[223] ,SIO_GET_NUMBER_OF_ATM_DEVICES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[224] ,SIO_GET_ATM_ADDRESS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[225] ,SIO_ASSOCIATE_PVC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[226] ,SIO_GET_ATM_CONNECTION_ID));
end;

procedure __UnregisterConsts1;
var i : integer;
begin
__RegisteredConstsList1.Free
end;

const ClassList : array[0..0] of TClass = (
EIdWS2StubError
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..150] of string = (
'_TRANSMIT_FILE_BUFFERS'
,'AAL_PARAMETERS_IE'
,'AAL5_PARAMETERS'
,'AALUSER_PARAMETERS'
,'ADDRINFO'
,'AFPROTOCOLS'
,'ATM_ADDRESS'
,'ATM_BHLI'
,'ATM_BHLI_IE'
,'ATM_BLLI'
,'ATM_BLLI_IE'
,'ATM_BROADBAND_BEARER_CAPABILITY_IE'
,'ATM_CALLED_PARTY_NUMBER_IE'
,'ATM_CALLED_PARTY_SUBADDRESS_IE'
,'ATM_CALLING_PARTY_NUMBER_IE'
,'ATM_CALLING_PARTY_SUBADDRESS_IE'
,'ATM_CAUSE_IE'
,'ATM_CONNECTION_ID'
,'ATM_PVC_PARAMS'
,'ATM_QOS_CLASS_IE'
,'ATM_TD'
,'ATM_TRAFFIC_DESCRIPTOR_IE'
,'ATM_TRANSIT_NETWORK_SELECTION_IE'
,'BLOB'
,'CSADDR_INFO'
,'FLOWSPEC'
,'hostent'
,'in_addr'
,'IN_PKTINFO'
,'IN6_ADDR'
,'IN6_PKTINFO'
,'INTERFACE_INFO'
,'INTERFACE_INFO_EX'
,'ip_mreq'
,'ip_mreq_source'
,'ip_msfilter'
,'ipv6_mreq'
,'IPX_ADDRESS_DATA'
,'IPX_NETNUM_DATA'
,'IPX_SPXCONNSTATUS_DATA'
,'linger'
,'netent'
,'protoent'
,'Q2931_IE'
,'QOS'
,'servent'
,'SOCKADDR'
,'SOCKADDR_ATM'
,'sockaddr_gen'
,'sockaddr_in'
,'SOCKADDR_IN6'
,'sockaddr_in6_old'
,'SOCKADDR_IPX'
,'SOCKADDR_NB'
,'SOCKET_ADDRESS'
,'SOCKET_ADDRESS_LIST'
,'sockproto'
,'SunB'
,'SunW'
,'TAddrInfo'
,'TAFProtocols'
,'TBLOB'
,'TCSAddr_Info'
,'TFDSet'
,'TFlowSpec'
,'THostEnt'
,'timeval'
,'TIn6Addr'
,'TIn6PktInfo'
,'TInAddr'
,'TInPktInfo'
,'TInterface_Info'
,'TInterface_Info_Ex'
,'TIPXAddressData'
,'TIPXNetNumData'
,'TIPXSPXConnStatusData'
,'TLinger'
,'TNetEnt'
,'TProtoEnt'
,'TQualityOfService'
,'TRANSMIT_FILE_BUFFERS'
,'TServEnt'
,'TSockAddr'
,'TSockAddr_IPX'
,'TSockAddrATM'
,'TSockAddrGen'
,'TSockAddrIn'
,'TSockAddrIn6'
,'TSockAddrIPX'
,'TSockAddrNB'
,'TSocket_Address'
,'TSocket_Address_List'
,'TSockProto'
,'TTimeVal'
,'TTransmitFileBuffers'
,'TWSABuf'
,'TWSAData'
,'TWSANameSpace_Info'
,'TWSANameSpace_InfoA'
,'TWSANameSpace_InfoW'
,'TWSANetworkEvents'
,'TWSANSClassInfo'
,'TWSANSClassInfoA'
,'TWSANSClassInfoW'
,'TWSAOverlapped'
,'TWSAProtocol_Info'
,'TWSAProtocol_InfoA'
,'TWSAProtocol_InfoW'
,'TWSAProtocolChain'
,'TWSAQuerySet'
,'TWSAQuerySetA'
,'TWSAQuerySetW'
,'TWSAServiceClassInfo'
,'TWSAServiceClassInfoA'
,'TWSAServiceClassInfoW'
,'TWSAVersion'
,'WSABUF'
,'WSADATA'
,'WSANAMESPACE_INFO'
,'WSANAMESPACE_INFOA'
,'WSANAMESPACE_INFOW'
,'WSANETWORKEVENTS'
,'WSANSCLASSINFO'
,'WSANSCLASSINFOA'
,'WSANSCLASSINFOW'
,'WSAOVERLAPPED'
,'WSAPROTOCOL_INFO'
,'WSAPROTOCOL_INFOA'
,'WSAPROTOCOL_INFOW'
,'WSAPROTOCOLCHAIN'
,'WSAQUERYSETA'
,'WSAQUERYSETW'
,'WSASERVICECLASSINFO'
,'WSASERVICECLASSINFOA'
,'WSASERVICECLASSINFOW'
,'WSAVERSION'
,'WSAStartup'
,'WSAMakeSyncReply'
,'WSAMakeSelectReply'
,'WSAGetAsyncBuflen'
,'WSAGetAsyncError'
,'WSAGetSelectEvent'
,'WSAGetSelectError'
,'FD_CLR'
,'FD_ISSET'
,'FD_SET'
,'FD_ZERO'
,'IP_MSFILTER_SIZE'
,'IN6ADDR_ANY_INIT'
,'IN6ADDR_LOOPBACK_INIT'
,'Winsock2Loaded'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(__TRANSMIT_FILE_BUFFERS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_AAL_PARAMETERS_IE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_AAL5_PARAMETERS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(_AALUSER_PARAMETERS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(_ADDRINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[5],Addr(_AFPROTOCOLS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[6],Addr(_ATM_ADDRESS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[7],Addr(_ATM_BHLI_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[8],Addr(_ATM_BHLI_IE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[9],Addr(_ATM_BLLI_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[10],Addr(_ATM_BLLI_IE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[11],Addr(_ATM_BROADBAND_BEARER_CAPABILITY_IE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[12],Addr(_ATM_CALLED_PARTY_NUMBER_IE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[13],Addr(_ATM_CALLED_PARTY_SUBADDRESS_IE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[14],Addr(_ATM_CALLING_PARTY_NUMBER_IE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[15],Addr(_ATM_CALLING_PARTY_SUBADDRESS_IE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[16],Addr(_ATM_CAUSE_IE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[17],Addr(_ATM_CONNECTION_ID_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[18],Addr(_ATM_PVC_PARAMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[19],Addr(_ATM_QOS_CLASS_IE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[20],Addr(_ATM_TD_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[21],Addr(_ATM_TRAFFIC_DESCRIPTOR_IE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[22],Addr(_ATM_TRANSIT_NETWORK_SELECTION_IE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[23],Addr(_BLOB_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[24],Addr(_CSADDR_INFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[25],Addr(_FLOWSPEC_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[26],Addr(_hostent_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[27],Addr(_in_addr_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[28],Addr(_IN_PKTINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[29],Addr(_IN6_ADDR_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[30],Addr(_IN6_PKTINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[31],Addr(_INTERFACE_INFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[32],Addr(_INTERFACE_INFO_EX_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[33],Addr(_ip_mreq_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[34],Addr(_ip_mreq_source_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[35],Addr(_ip_msfilter_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[36],Addr(_ipv6_mreq_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[37],Addr(_IPX_ADDRESS_DATA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[38],Addr(_IPX_NETNUM_DATA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[39],Addr(_IPX_SPXCONNSTATUS_DATA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[40],Addr(_linger_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[41],Addr(_netent_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[42],Addr(_protoent_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[43],Addr(_Q2931_IE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[44],Addr(_QOS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[45],Addr(_servent_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[46],Addr(_SOCKADDR_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[47],Addr(_SOCKADDR_ATM_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[48],Addr(_sockaddr_gen_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[49],Addr(_sockaddr_in_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[50],Addr(_SOCKADDR_IN6_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[51],Addr(_sockaddr_in6_old_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[52],Addr(_SOCKADDR_IPX_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[53],Addr(_SOCKADDR_NB_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[54],Addr(_SOCKET_ADDRESS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[55],Addr(_SOCKET_ADDRESS_LIST_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[56],Addr(_sockproto_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[57],Addr(_SunB_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[58],Addr(_SunW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[59],Addr(_TAddrInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[60],Addr(_TAFProtocols_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[61],Addr(_TBLOB_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[62],Addr(_TCSAddr_Info_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[63],Addr(_TFDSet_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[64],Addr(_TFlowSpec_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[65],Addr(_THostEnt_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[66],Addr(_timeval_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[67],Addr(_TIn6Addr_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[68],Addr(_TIn6PktInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[69],Addr(_TInAddr_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[70],Addr(_TInPktInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[71],Addr(_TInterface_Info_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[72],Addr(_TInterface_Info_Ex_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[73],Addr(_TIPXAddressData_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[74],Addr(_TIPXNetNumData_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[75],Addr(_TIPXSPXConnStatusData_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[76],Addr(_TLinger_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[77],Addr(_TNetEnt_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[78],Addr(_TProtoEnt_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[79],Addr(_TQualityOfService_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[80],Addr(_TRANSMIT_FILE_BUFFERS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[81],Addr(_TServEnt_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[82],Addr(_TSockAddr_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[83],Addr(_TSockAddr_IPX_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[84],Addr(_TSockAddrATM_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[85],Addr(_TSockAddrGen_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[86],Addr(_TSockAddrIn_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[87],Addr(_TSockAddrIn6_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[88],Addr(_TSockAddrIPX_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[89],Addr(_TSockAddrNB_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[90],Addr(_TSocket_Address_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[91],Addr(_TSocket_Address_List_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[92],Addr(_TSockProto_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[93],Addr(_TTimeVal_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[94],Addr(_TTransmitFileBuffers_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[95],Addr(_TWSABuf_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[96],Addr(_TWSAData_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[97],Addr(_TWSANameSpace_Info_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[98],Addr(_TWSANameSpace_InfoA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[99],Addr(_TWSANameSpace_InfoW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[100],Addr(_TWSANetworkEvents_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[101],Addr(_TWSANSClassInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[102],Addr(_TWSANSClassInfoA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[103],Addr(_TWSANSClassInfoW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[104],Addr(_TWSAOverlapped_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[105],Addr(_TWSAProtocol_Info_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[106],Addr(_TWSAProtocol_InfoA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[107],Addr(_TWSAProtocol_InfoW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[108],Addr(_TWSAProtocolChain_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[109],Addr(_TWSAQuerySet_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[110],Addr(_TWSAQuerySetA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[111],Addr(_TWSAQuerySetW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[112],Addr(_TWSAServiceClassInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[113],Addr(_TWSAServiceClassInfoA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[114],Addr(_TWSAServiceClassInfoW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[115],Addr(_TWSAVersion_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[116],Addr(_WSABUF_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[117],Addr(_WSADATA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[118],Addr(_WSANAMESPACE_INFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[119],Addr(_WSANAMESPACE_INFOA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[120],Addr(_WSANAMESPACE_INFOW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[121],Addr(_WSANETWORKEVENTS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[122],Addr(_WSANSCLASSINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[123],Addr(_WSANSCLASSINFOA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[124],Addr(_WSANSCLASSINFOW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[125],Addr(_WSAOVERLAPPED_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[126],Addr(_WSAPROTOCOL_INFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[127],Addr(_WSAPROTOCOL_INFOA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[128],Addr(_WSAPROTOCOL_INFOW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[129],Addr(_WSAPROTOCOLCHAIN_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[130],Addr(_WSAQUERYSETA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[131],Addr(_WSAQUERYSETW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[132],Addr(_WSASERVICECLASSINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[133],Addr(_WSASERVICECLASSINFOA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[134],Addr(_WSASERVICECLASSINFOW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[135],Addr(_WSAVERSION_)));
RegisterProc(nil,MethodNames[136],mtProc,TypeInfo(_T0),[
TypeInfo(Word),
TypeInfo(IDispatch),TypeInfo(Integer)],Addr(____WSAStartup__Wrapper),cRegister);

RegisterProc(nil,MethodNames[137],mtProc,TypeInfo(_T1),[
TypeInfo(Word),
TypeInfo(Word),TypeInfo(Longint)],Addr(WSAMakeSyncReply),cRegister);

RegisterProc(nil,MethodNames[138],mtProc,TypeInfo(_T2),[
TypeInfo(Word),
TypeInfo(Word),TypeInfo(Longint)],Addr(WSAMakeSelectReply),cRegister);

RegisterProc(nil,MethodNames[139],mtProc,TypeInfo(_T3),[
TypeInfo(Longint),TypeInfo(Word)],Addr(WSAGetAsyncBuflen),cRegister);

RegisterProc(nil,MethodNames[140],mtProc,TypeInfo(_T4),[
TypeInfo(Longint),TypeInfo(Word)],Addr(WSAGetAsyncError),cRegister);

RegisterProc(nil,MethodNames[141],mtProc,TypeInfo(_T5),[
TypeInfo(Longint),TypeInfo(Word)],Addr(WSAGetSelectEvent),cRegister);

RegisterProc(nil,MethodNames[142],mtProc,TypeInfo(_T6),[
TypeInfo(Longint),TypeInfo(Word)],Addr(WSAGetSelectError),cRegister);

RegisterProc(nil,MethodNames[143],mtProc,TypeInfo(_T7),[
TypeInfo(TSocket),
TypeInfo(IDispatch)],Addr(____FD_CLR__Wrapper),cRegister);

RegisterProc(nil,MethodNames[144],mtProc,TypeInfo(_T8),[
TypeInfo(TSocket),
TypeInfo(IDispatch),TypeInfo(Boolean)],Addr(____FD_ISSET__Wrapper),cRegister);

RegisterProc(nil,MethodNames[145],mtProc,TypeInfo(_T9),[
TypeInfo(TSocket),
TypeInfo(IDispatch)],Addr(____FD_SET__Wrapper),cRegister);

RegisterProc(nil,MethodNames[146],mtProc,TypeInfo(_T10),[
TypeInfo(IDispatch)],Addr(____FD_ZERO__Wrapper),cRegister);

RegisterProc(nil,MethodNames[147],mtProc,TypeInfo(_T11),[
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(IP_MSFILTER_SIZE),cRegister);

RegisterProc(nil,MethodNames[148],mtProc,TypeInfo(_T13),[TypeInfo(IDispatch)],Addr(____IN6ADDR_ANY_INIT__Wrapper),cRegister);

RegisterProc(nil,MethodNames[149],mtProc,TypeInfo(_T14),[TypeInfo(IDispatch)],Addr(____IN6ADDR_LOOPBACK_INIT__Wrapper),cRegister);

RegisterProc(nil,MethodNames[150],mtProc,TypeInfo(_T33),[TypeInfo(Boolean)],Addr(Winsock2Loaded),cRegister);

RegisterProc(EIdWS2StubError,'Build',mtConstructor,TypeInfo(_T34),[
TypeInfo(String),
TypeInfo(DWORD)],Addr(EIdWS2StubError.Build),cRegister);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'SS_PORT',mtProc,TypeInfo(_T12),[
TypeInfoPointer,TypeInfo(u_short)],Addr(SS_PORT),cRegister)}

{RegisterProc(nil,'IN6ADDR_SETANY',mtProc,TypeInfo(_T15),[
TypeInfoPointer],Addr(IN6ADDR_SETANY),cRegister)}

{RegisterProc(nil,'IN6ADDR_SETLOOPBACK',mtProc,TypeInfo(_T16),[
TypeInfoPointer],Addr(IN6ADDR_SETLOOPBACK),cRegister)}

{RegisterProc(nil,'IN6ADDR_ISANY',mtProc,TypeInfo(_T17),[
TypeInfoPointer,TypeInfo(Boolean)],Addr(IN6ADDR_ISANY),cRegister)}

{RegisterProc(nil,'IN6ADDR_ISLOOPBACK',mtProc,TypeInfo(_T18),[
TypeInfoPointer,TypeInfo(Boolean)],Addr(IN6ADDR_ISLOOPBACK),cRegister)}

{RegisterProc(nil,'IN6_ADDR_EQUAL',mtProc,TypeInfo(_T19),[
TypeInfoPointer,
TypeInfoPointer,TypeInfo(Boolean)],Addr(IN6_ADDR_EQUAL),cRegister)}

{RegisterProc(nil,'IN6_IS_ADDR_UNSPECIFIED',mtProc,TypeInfo(_T20),[
TypeInfoPointer,TypeInfo(Boolean)],Addr(IN6_IS_ADDR_UNSPECIFIED),cRegister)}

{RegisterProc(nil,'IN6_IS_ADDR_LOOPBACK',mtProc,TypeInfo(_T21),[
TypeInfoPointer,TypeInfo(Boolean)],Addr(IN6_IS_ADDR_LOOPBACK),cRegister)}

{RegisterProc(nil,'IN6_IS_ADDR_MULTICAST',mtProc,TypeInfo(_T22),[
TypeInfoPointer,TypeInfo(Boolean)],Addr(IN6_IS_ADDR_MULTICAST),cRegister)}

{RegisterProc(nil,'IN6_IS_ADDR_LINKLOCAL',mtProc,TypeInfo(_T23),[
TypeInfoPointer,TypeInfo(Boolean)],Addr(IN6_IS_ADDR_LINKLOCAL),cRegister)}

{RegisterProc(nil,'IN6_IS_ADDR_SITELOCAL',mtProc,TypeInfo(_T24),[
TypeInfoPointer,TypeInfo(Boolean)],Addr(IN6_IS_ADDR_SITELOCAL),cRegister)}

{RegisterProc(nil,'IN6_IS_ADDR_V4MAPPED',mtProc,TypeInfo(_T25),[
TypeInfoPointer,TypeInfo(Boolean)],Addr(IN6_IS_ADDR_V4MAPPED),cRegister)}

{RegisterProc(nil,'IN6_IS_ADDR_V4COMPAT',mtProc,TypeInfo(_T26),[
TypeInfoPointer,TypeInfo(Boolean)],Addr(IN6_IS_ADDR_V4COMPAT),cRegister)}

{RegisterProc(nil,'IN6_IS_ADDR_MC_NODELOCAL',mtProc,TypeInfo(_T27),[
TypeInfoPointer,TypeInfo(Boolean)],Addr(IN6_IS_ADDR_MC_NODELOCAL),cRegister)}

{RegisterProc(nil,'IN6_IS_ADDR_MC_LINKLOCAL',mtProc,TypeInfo(_T28),[
TypeInfoPointer,TypeInfo(Boolean)],Addr(IN6_IS_ADDR_MC_LINKLOCAL),cRegister)}

{RegisterProc(nil,'IN6_IS_ADDR_MC_SITELOCAL',mtProc,TypeInfo(_T29),[
TypeInfoPointer,TypeInfo(Boolean)],Addr(IN6_IS_ADDR_MC_SITELOCAL),cRegister)}

{RegisterProc(nil,'IN6_IS_ADDR_MC_ORGLOCAL',mtProc,TypeInfo(_T30),[
TypeInfoPointer,TypeInfo(Boolean)],Addr(IN6_IS_ADDR_MC_ORGLOCAL),cRegister)}

{RegisterProc(nil,'IN6_IS_ADDR_MC_GLOBAL',mtProc,TypeInfo(_T31),[
TypeInfoPointer,TypeInfo(Boolean)],Addr(IN6_IS_ADDR_MC_GLOBAL),cRegister)}

{RegisterProc(nil,'SET_NETBIOS_SOCKADDR',mtProc,TypeInfo(_T32),[
TypeInfoPointer,
TypeInfo(Word),
TypeInfoPChar,
TypeInfo(Char)],Addr(SET_NETBIOS_SOCKADDR),cRegister)}

__RegisterClasses;
__RegisterConsts0;
__RegisterConsts1;
__RegisterProps;
__RegisterVars;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterConsts1;
__UnRegisterVars;
__UnregisterProcs;
end.
