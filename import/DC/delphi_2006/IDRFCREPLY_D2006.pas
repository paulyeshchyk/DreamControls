{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDRFCREPLY_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdRFCReply;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = function : TIdRFCReply of object;

_T1 = procedure (p0 : TPersistent) of object;

_T2 = function (const p0 : Integer): TIdRFCReply of object;

_T3 = function (const p0 : Integer;
const p1 : string): TIdRFCReply of object;

_T4 = procedure (p0 : TIdRFCReply) of object;

_T5 = procedure  of object;

_T6 = function : string of object;

_T7 = procedure (const p0 : TStrings) of object;

_T8 = function : Boolean of object;

_T9 = procedure (const p0 : Integer;
const p1 : string) of object;

function __DC__GetTIdRFCReplies__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdRFCReplies(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __DC__SetTIdRFCReplies__Items(Instance : TObject; Params : PVariantArgList);
begin
TIdRFCReplies(Instance).Items[OleVariant(Params^[1])]:=TIdRFCReply(VarToObject(OleVariant(Params^[0])));
end;

procedure __RegisterProps;
begin
RegisterIndexedProperty(TIdRFCReplies,'Items',1,True,__DC__GetTIdRFCReplies__Items,__DC__SetTIdRFCReplies__Items);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..1] of TClass = (
TIdRFCReplies,
TIdRFCReply
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegRegisterMethod(TIdRFCReplies,'Add',TypeInfo(_T0),[TypeInfo(TIdRFCReply)],Addr(TIdRFCReplies.Add));

RegisterProc(TIdRFCReplies,'Create',mtConstructor,TypeInfo(_T1),[
TypeInfo(TPersistent)],Addr(TIdRFCReplies.Create),cRegister);

//RegRegisterMethod(TIdRFCReplies,'FindByNumber',TypeInfo(_T2),[TypeInfo(Integer),TypeInfo(TIdRFCReply)], pointer(40));
RegRegisterMethod(TIdRFCReplies,'FindByNumber',TypeInfo(_T2),[TypeInfo(Integer),TypeInfo(TIdRFCReply)],  getVMTProcAddr('TIdRFCReplies','FindByNumber',40));


RegRegisterMethod(TIdRFCReplies,'UpdateReply',TypeInfo(_T3),[
TypeInfo(Integer),
TypeInfo(string),TypeInfo(TIdRFCReply)],Addr(TIdRFCReplies.UpdateReply));

RegRegisterMethod(TIdRFCReplies,'UpdateText',TypeInfo(_T4),[
TypeInfo(TIdRFCReply)],Addr(TIdRFCReplies.UpdateText));

RegRegisterMethod(TIdRFCReply,'Clear',TypeInfo(_T5),NoParams,Addr(TIdRFCReply.Clear));

RegRegisterMethod(TIdRFCReply,'GenerateReply',TypeInfo(_T6),[TypeInfo(string)],Addr(TIdRFCReply.GenerateReply));

RegRegisterMethod(TIdRFCReply,'ParseResponse',TypeInfo(_T7),[
TypeInfo(TStrings)],Addr(TIdRFCReply.ParseResponse));

RegRegisterMethod(TIdRFCReply,'ReplyExists',TypeInfo(_T8),[TypeInfo(Boolean)],Addr(TIdRFCReply.ReplyExists));

RegRegisterMethod(TIdRFCReply,'SetReply',TypeInfo(_T9),[
TypeInfo(Integer),
TypeInfo(string)],Addr(TIdRFCReply.SetReply));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
