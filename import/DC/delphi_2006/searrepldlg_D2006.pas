{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit searrepldlg_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  Types,
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Graphics,
  Controls,
  Forms,
  Buttons,
  ExtCtrls,
  StdCtrls,
  SysUtils,
  Classes,
  dcedit,
  histed,
  dcconsts,
  dcstring,
  ComCtrls,
  searrepldlg;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TRect__Wrapper = class(TDCRecordWrapper)
private
fR : TRect;
public
function GetRecordPtr : pointer; override;
published
procedure setLeft(const val : Longint);
function getLeft : Longint;
property Left : Longint read getLeft write setLeft;
procedure setTop(const val : Longint);
function getTop : Longint;
property Top : Longint read getTop write setTop;
procedure setRight(const val : Longint);
function getRight : Longint;
property Right : Longint read getRight write setRight;
procedure setBottom(const val : Longint);
function getBottom : Longint;
property Bottom : Longint read getBottom write setBottom;
end;
type
_T0 = procedure (p0 : TObject) of object;

_T1 = _T0;

_T2 = _T0;

_T3 = _T0;

_T4 = _T0;

_T5 = _T0;

_T6 = _T0;

_T7 = procedure (p0 : TObject;
var p1 : TCloseAction) of object;

_T8 = _T0;

_T9 = procedure (const p0 : IDispatch) of object;

_T10 = procedure (p0 : Integer) of object;

function __TRect__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRect__Wrapper.setLeft(const val : Longint);
begin
TRect(GetRecordPtr^).Left := val;
end;
function __TRect__Wrapper.getLeft : Longint;
begin
result := TRect(GetRecordPtr^).Left;
end;
procedure __TRect__Wrapper.setTop(const val : Longint);
begin
TRect(GetRecordPtr^).Top := val;
end;
function __TRect__Wrapper.getTop : Longint;
begin
result := TRect(GetRecordPtr^).Top;
end;
procedure __TRect__Wrapper.setRight(const val : Longint);
begin
TRect(GetRecordPtr^).Right := val;
end;
function __TRect__Wrapper.getRight : Longint;
begin
result := TRect(GetRecordPtr^).Right;
end;
procedure __TRect__Wrapper.setBottom(const val : Longint);
begin
TRect(GetRecordPtr^).Bottom := val;
end;
function __TRect__Wrapper.getBottom : Longint;
begin
result := TRect(GetRecordPtr^).Bottom;
end;
procedure __TFrmSearRepl__MakeSearchVisible__Wrapper(__Instance : TFrmSearRepl;
const p0 : IDispatch);
var
__p0 : ^TRect;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
TFrmSearRepl(__Instance).MakeSearchVisible(__p0^);
end;


type __TRect__Wrapper__ = class(__TRect__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRect__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
var
__rw : __TRect__Wrapper__;
begin
__rw := __TRect__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRect((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

function __DC__Getsearrepldlg__FrmSearRepl(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(searrepldlg.FrmSearRepl);
end;

procedure __DC__Setsearrepldlg__FrmSearRepl(Instance : TObject; Params : PVariantArgList);
begin
TObject(searrepldlg.FrmSearRepl):=(VarToObject(OleVariant(Params^[0])));
end;

function __DC__Getsearrepldlg__CurrentFindSource(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(searrepldlg.CurrentFindSource);
end;

procedure __DC__Setsearrepldlg__CurrentFindSource(Instance : TObject; Params : PVariantArgList);
begin
TObject(searrepldlg.CurrentFindSource):=(VarToObject(OleVariant(Params^[0])));
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('FrmSearRepl',__DC__Getsearrepldlg__FrmSearRepl,__DC__Setsearrepldlg__FrmSearRepl));
__RegisteredVars.Add(RegisterVar('CurrentFindSource',__DC__Getsearrepldlg__CurrentFindSource,__DC__Setsearrepldlg__CurrentFindSource));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..0] of TClass = (
TFrmSearRepl
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegRegisterMethod(TFrmSearRepl,'FormCreate',TypeInfo(_T0),[
TypeInfo(TObject)],Addr(TFrmSearRepl.FormCreate));

RegRegisterMethod(TFrmSearRepl,'ExBtnClick',TypeInfo(_T1),[
TypeInfo(TObject)],Addr(TFrmSearRepl.ExBtnClick));

RegRegisterMethod(TFrmSearRepl,'FindBtnClick',TypeInfo(_T2),[
TypeInfo(TObject)],Addr(TFrmSearRepl.FindBtnClick));

RegRegisterMethod(TFrmSearRepl,'CloseBtnClick',TypeInfo(_T3),[
TypeInfo(TObject)],Addr(TFrmSearRepl.CloseBtnClick));

RegRegisterMethod(TFrmSearRepl,'ReplBtnClick',TypeInfo(_T4),[
TypeInfo(TObject)],Addr(TFrmSearRepl.ReplBtnClick));

RegRegisterMethod(TFrmSearRepl,'PageControlChange',TypeInfo(_T5),[
TypeInfo(TObject)],Addr(TFrmSearRepl.PageControlChange));

RegRegisterMethod(TFrmSearRepl,'GoToBtnClick',TypeInfo(_T6),[
TypeInfo(TObject)],Addr(TFrmSearRepl.GoToBtnClick));

RegRegisterMethod(TFrmSearRepl,'FormClose',TypeInfo(_T7),[
TypeInfo(TObject),
TypeInfo(TCloseAction)],Addr(TFrmSearRepl.FormClose));

RegRegisterMethod(TFrmSearRepl,'FormDestroy',TypeInfo(_T8),[
TypeInfo(TObject)],Addr(TFrmSearRepl.FormDestroy));

RegRegisterMethod(TFrmSearRepl,'MakeSearchVisible',TypeInfo(_T9),[
TypeInfo(IDispatch)],Addr(__TFrmSearRepl__MakeSearchVisible__Wrapper));

RegRegisterMethod(TFrmSearRepl,'SetActiveIndex',TypeInfo(_T10),[
TypeInfo(Integer)],Addr(TFrmSearRepl.SetActiveIndex));

end;
initialization
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
end.
