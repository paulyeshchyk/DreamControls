{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit ACTIVDBGLIB_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  ActiveX,
  Classes,
  StdVCL,
  ascrlib,
  ActivDbgLib;
function Convert__MIDL_IOleAutomationTypes_0005ToVariant(var R : __MIDL_IOleAutomationTypes_0005) : OleVariant;
function ConvertVariantTo__MIDL_IOleAutomationTypes_0005(const V : OleVariant) : __MIDL_IOleAutomationTypes_0005;
function Convert__MIDL_IOleAutomationTypes_0006ToVariant(var R : __MIDL_IOleAutomationTypes_0006) : OleVariant;
function ConvertVariantTo__MIDL_IOleAutomationTypes_0006(const V : OleVariant) : __MIDL_IOleAutomationTypes_0006;
function Convert_GUIDToVariant(var R : _GUID) : OleVariant;
function ConvertVariantTo_GUID(const V : OleVariant) : _GUID;
function ConverttagARRAYDESCToVariant(var R : tagARRAYDESC) : OleVariant;
function ConvertVariantTotagARRAYDESC(const V : OleVariant) : tagARRAYDESC;
function ConverttagDebugStackFrameDescriptorToVariant(var R : tagDebugStackFrameDescriptor) : OleVariant;
function ConvertVariantTotagDebugStackFrameDescriptor(const V : OleVariant) : tagDebugStackFrameDescriptor;
function ConverttagELEMDESCToVariant(var R : tagELEMDESC) : OleVariant;
function ConvertVariantTotagELEMDESC(const V : OleVariant) : tagELEMDESC;
function ConverttagEXCEPINFOToVariant(var R : tagEXCEPINFO) : OleVariant;
function ConvertVariantTotagEXCEPINFO(const V : OleVariant) : tagEXCEPINFO;
function ConverttagFUNCDESCToVariant(var R : tagFUNCDESC) : OleVariant;
function ConvertVariantTotagFUNCDESC(const V : OleVariant) : tagFUNCDESC;
function ConverttagIDLDESCToVariant(var R : tagIDLDESC) : OleVariant;
function ConvertVariantTotagIDLDESC(const V : OleVariant) : tagIDLDESC;
function ConverttagPARAMDESCToVariant(var R : tagPARAMDESC) : OleVariant;
function ConvertVariantTotagPARAMDESC(const V : OleVariant) : tagPARAMDESC;
function ConverttagPARAMDESCEXToVariant(var R : tagPARAMDESCEX) : OleVariant;
function ConvertVariantTotagPARAMDESCEX(const V : OleVariant) : tagPARAMDESCEX;
function ConverttagSAFEARRAYBOUNDToVariant(var R : tagSAFEARRAYBOUND) : OleVariant;
function ConvertVariantTotagSAFEARRAYBOUND(const V : OleVariant) : tagSAFEARRAYBOUND;
function ConverttagTLIBATTRToVariant(var R : tagTLIBATTR) : OleVariant;
function ConvertVariantTotagTLIBATTR(const V : OleVariant) : tagTLIBATTR;
function ConverttagTYPEATTRToVariant(var R : tagTYPEATTR) : OleVariant;
function ConvertVariantTotagTYPEATTR(const V : OleVariant) : tagTYPEATTR;
function ConverttagTYPEDESCToVariant(var R : tagTYPEDESC) : OleVariant;
function ConvertVariantTotagTYPEDESC(const V : OleVariant) : tagTYPEDESC;
function ConverttagVARDESCToVariant(var R : tagVARDESC) : OleVariant;
function ConvertVariantTotagVARDESC(const V : OleVariant) : tagVARDESC;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type ____MIDL_IOleAutomationTypes_0005__Wrapper = class(TDCRecordWrapper)
private
fR : __MIDL_IOleAutomationTypes_0005;
public
function GetRecordPtr : pointer; override;
published
procedure sethreftype(const val : LongWord);
function gethreftype : LongWord;
property hreftype : LongWord read gethreftype write sethreftype;
end;
type ____MIDL_IOleAutomationTypes_0006__Wrapper = class(TDCRecordWrapper)
private
fR : __MIDL_IOleAutomationTypes_0006;
public
function GetRecordPtr : pointer; override;
published
procedure setoInst(const val : LongWord);
function getoInst : LongWord;
property oInst : LongWord read getoInst write setoInst;
end;
type ___GUID__Wrapper = class(TDCRecordWrapper)
private
fR : _GUID;
public
function GetRecordPtr : pointer; override;
published
procedure setData1(const val : LongWord);
function getData1 : LongWord;
property Data1 : LongWord read getData1 write setData1;
procedure setData2(const val : Word);
function getData2 : Word;
property Data2 : Word read getData2 write setData2;
procedure setData3(const val : Word);
function getData3 : Word;
property Data3 : Word read getData3 write setData3;
end;
type __tagARRAYDESC__Wrapper = class(TDCRecordWrapper)
private
fR : tagARRAYDESC;
public
function GetRecordPtr : pointer; override;
published
procedure setcDims(const val : Word);
function getcDims : Word;
property cDims : Word read getcDims write setcDims;
end;
type __tagDebugStackFrameDescriptor__Wrapper = class(TDCRecordWrapper)
private
fR : tagDebugStackFrameDescriptor;
public
function GetRecordPtr : pointer; override;
published
procedure setdwMin(const val : LongWord);
function getdwMin : LongWord;
property dwMin : LongWord read getdwMin write setdwMin;
procedure setdwLim(const val : LongWord);
function getdwLim : LongWord;
property dwLim : LongWord read getdwLim write setdwLim;
procedure setfFinal(const val : Integer);
function getfFinal : Integer;
property fFinal : Integer read getfFinal write setfFinal;
end;
type __tagELEMDESC__Wrapper = class(TDCRecordWrapper)
private
fR : tagELEMDESC;
public
function GetRecordPtr : pointer; override;
published
end;
type __tagEXCEPINFO__Wrapper = class(TDCRecordWrapper)
private
fR : tagEXCEPINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setwCode(const val : Word);
function getwCode : Word;
property wCode : Word read getwCode write setwCode;
procedure setwReserved(const val : Word);
function getwReserved : Word;
property wReserved : Word read getwReserved write setwReserved;
procedure setbstrSource(const val : WideString);
function getbstrSource : WideString;
property bstrSource : WideString read getbstrSource write setbstrSource;
procedure setbstrDescription(const val : WideString);
function getbstrDescription : WideString;
property bstrDescription : WideString read getbstrDescription write setbstrDescription;
procedure setbstrHelpFile(const val : WideString);
function getbstrHelpFile : WideString;
property bstrHelpFile : WideString read getbstrHelpFile write setbstrHelpFile;
procedure setdwHelpContext(const val : LongWord);
function getdwHelpContext : LongWord;
property dwHelpContext : LongWord read getdwHelpContext write setdwHelpContext;
procedure setpvReserved(const val : LongWord);
function getpvReserved : LongWord;
property pvReserved : LongWord read getpvReserved write setpvReserved;
procedure setpfnDeferredFillIn(const val : LongWord);
function getpfnDeferredFillIn : LongWord;
property pfnDeferredFillIn : LongWord read getpfnDeferredFillIn write setpfnDeferredFillIn;
procedure setscode(const val : scode);
function getscode : scode;
property scode : scode read getscode write setscode;
end;
type __tagFUNCDESC__Wrapper = class(TDCRecordWrapper)
private
fR : tagFUNCDESC;
public
function GetRecordPtr : pointer; override;
published
procedure setmemid(const val : Integer);
function getmemid : Integer;
property memid : Integer read getmemid write setmemid;
procedure setcParams(const val : SmallInt);
function getcParams : SmallInt;
property cParams : SmallInt read getcParams write setcParams;
procedure setcParamsOpt(const val : SmallInt);
function getcParamsOpt : SmallInt;
property cParamsOpt : SmallInt read getcParamsOpt write setcParamsOpt;
procedure setoVft(const val : SmallInt);
function getoVft : SmallInt;
property oVft : SmallInt read getoVft write setoVft;
procedure setcScodes(const val : SmallInt);
function getcScodes : SmallInt;
property cScodes : SmallInt read getcScodes write setcScodes;
procedure setwFuncFlags(const val : Word);
function getwFuncFlags : Word;
property wFuncFlags : Word read getwFuncFlags write setwFuncFlags;
end;
type __tagIDLDESC__Wrapper = class(TDCRecordWrapper)
private
fR : tagIDLDESC;
public
function GetRecordPtr : pointer; override;
published
procedure setdwReserved(const val : LongWord);
function getdwReserved : LongWord;
property dwReserved : LongWord read getdwReserved write setdwReserved;
procedure setwIDLFlags(const val : Word);
function getwIDLFlags : Word;
property wIDLFlags : Word read getwIDLFlags write setwIDLFlags;
end;
type __tagPARAMDESC__Wrapper = class(TDCRecordWrapper)
private
fR : tagPARAMDESC;
public
function GetRecordPtr : pointer; override;
published
procedure setwParamFlags(const val : Word);
function getwParamFlags : Word;
property wParamFlags : Word read getwParamFlags write setwParamFlags;
end;
type __tagPARAMDESCEX__Wrapper = class(TDCRecordWrapper)
private
fR : tagPARAMDESCEX;
public
function GetRecordPtr : pointer; override;
published
procedure setcBytes(const val : LongWord);
function getcBytes : LongWord;
property cBytes : LongWord read getcBytes write setcBytes;
procedure setvarDefaultValue(const val : OleVariant);
function getvarDefaultValue : OleVariant;
property varDefaultValue : OleVariant read getvarDefaultValue write setvarDefaultValue;
end;
type __tagSAFEARRAYBOUND__Wrapper = class(TDCRecordWrapper)
private
fR : tagSAFEARRAYBOUND;
public
function GetRecordPtr : pointer; override;
published
procedure setcElements(const val : LongWord);
function getcElements : LongWord;
property cElements : LongWord read getcElements write setcElements;
procedure setlLbound(const val : Integer);
function getlLbound : Integer;
property lLbound : Integer read getlLbound write setlLbound;
end;
type __tagTLIBATTR__Wrapper = class(TDCRecordWrapper)
private
fR : tagTLIBATTR;
public
function GetRecordPtr : pointer; override;
published
procedure setlcid(const val : LongWord);
function getlcid : LongWord;
property lcid : LongWord read getlcid write setlcid;
procedure setwMajorVerNum(const val : Word);
function getwMajorVerNum : Word;
property wMajorVerNum : Word read getwMajorVerNum write setwMajorVerNum;
procedure setwMinorVerNum(const val : Word);
function getwMinorVerNum : Word;
property wMinorVerNum : Word read getwMinorVerNum write setwMinorVerNum;
procedure setwLibFlags(const val : Word);
function getwLibFlags : Word;
property wLibFlags : Word read getwLibFlags write setwLibFlags;
end;
type __tagTYPEATTR__Wrapper = class(TDCRecordWrapper)
private
fR : tagTYPEATTR;
public
function GetRecordPtr : pointer; override;
published
procedure setlcid(const val : LongWord);
function getlcid : LongWord;
property lcid : LongWord read getlcid write setlcid;
procedure setdwReserved(const val : LongWord);
function getdwReserved : LongWord;
property dwReserved : LongWord read getdwReserved write setdwReserved;
procedure setmemidConstructor(const val : Integer);
function getmemidConstructor : Integer;
property memidConstructor : Integer read getmemidConstructor write setmemidConstructor;
procedure setmemidDestructor(const val : Integer);
function getmemidDestructor : Integer;
property memidDestructor : Integer read getmemidDestructor write setmemidDestructor;
procedure setcbSizeInstance(const val : LongWord);
function getcbSizeInstance : LongWord;
property cbSizeInstance : LongWord read getcbSizeInstance write setcbSizeInstance;
procedure setcFuncs(const val : Word);
function getcFuncs : Word;
property cFuncs : Word read getcFuncs write setcFuncs;
procedure setcVars(const val : Word);
function getcVars : Word;
property cVars : Word read getcVars write setcVars;
procedure setcImplTypes(const val : Word);
function getcImplTypes : Word;
property cImplTypes : Word read getcImplTypes write setcImplTypes;
procedure setcbSizeVft(const val : Word);
function getcbSizeVft : Word;
property cbSizeVft : Word read getcbSizeVft write setcbSizeVft;
procedure setcbAlignment(const val : Word);
function getcbAlignment : Word;
property cbAlignment : Word read getcbAlignment write setcbAlignment;
procedure setwTypeFlags(const val : Word);
function getwTypeFlags : Word;
property wTypeFlags : Word read getwTypeFlags write setwTypeFlags;
procedure setwMajorVerNum(const val : Word);
function getwMajorVerNum : Word;
property wMajorVerNum : Word read getwMajorVerNum write setwMajorVerNum;
procedure setwMinorVerNum(const val : Word);
function getwMinorVerNum : Word;
property wMinorVerNum : Word read getwMinorVerNum write setwMinorVerNum;
end;
type __tagTYPEDESC__Wrapper = class(TDCRecordWrapper)
private
fR : tagTYPEDESC;
public
function GetRecordPtr : pointer; override;
published
procedure setvt(const val : Word);
function getvt : Word;
property vt : Word read getvt write setvt;
end;
type __tagVARDESC__Wrapper = class(TDCRecordWrapper)
private
fR : tagVARDESC;
public
function GetRecordPtr : pointer; override;
published
procedure setmemid(const val : Integer);
function getmemid : Integer;
property memid : Integer read getmemid write setmemid;
procedure setwVarFlags(const val : Word);
function getwVarFlags : Word;
property wVarFlags : Word read getwVarFlags write setwVarFlags;
end;
function ____MIDL_IOleAutomationTypes_0005__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ____MIDL_IOleAutomationTypes_0005__Wrapper.sethreftype(const val : LongWord);
begin
__MIDL_IOleAutomationTypes_0005(GetRecordPtr^).hreftype := val;
end;
function ____MIDL_IOleAutomationTypes_0005__Wrapper.gethreftype : LongWord;
begin
result := __MIDL_IOleAutomationTypes_0005(GetRecordPtr^).hreftype;
end;
function ____MIDL_IOleAutomationTypes_0006__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ____MIDL_IOleAutomationTypes_0006__Wrapper.setoInst(const val : LongWord);
begin
__MIDL_IOleAutomationTypes_0006(GetRecordPtr^).oInst := val;
end;
function ____MIDL_IOleAutomationTypes_0006__Wrapper.getoInst : LongWord;
begin
result := __MIDL_IOleAutomationTypes_0006(GetRecordPtr^).oInst;
end;
function ___GUID__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___GUID__Wrapper.setData1(const val : LongWord);
begin
_GUID(GetRecordPtr^).Data1 := val;
end;
function ___GUID__Wrapper.getData1 : LongWord;
begin
result := _GUID(GetRecordPtr^).Data1;
end;
procedure ___GUID__Wrapper.setData2(const val : Word);
begin
_GUID(GetRecordPtr^).Data2 := val;
end;
function ___GUID__Wrapper.getData2 : Word;
begin
result := _GUID(GetRecordPtr^).Data2;
end;
procedure ___GUID__Wrapper.setData3(const val : Word);
begin
_GUID(GetRecordPtr^).Data3 := val;
end;
function ___GUID__Wrapper.getData3 : Word;
begin
result := _GUID(GetRecordPtr^).Data3;
end;
function __tagARRAYDESC__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagARRAYDESC__Wrapper.setcDims(const val : Word);
begin
tagARRAYDESC(GetRecordPtr^).cDims := val;
end;
function __tagARRAYDESC__Wrapper.getcDims : Word;
begin
result := tagARRAYDESC(GetRecordPtr^).cDims;
end;
function __tagDebugStackFrameDescriptor__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagDebugStackFrameDescriptor__Wrapper.setdwMin(const val : LongWord);
begin
tagDebugStackFrameDescriptor(GetRecordPtr^).dwMin := val;
end;
function __tagDebugStackFrameDescriptor__Wrapper.getdwMin : LongWord;
begin
result := tagDebugStackFrameDescriptor(GetRecordPtr^).dwMin;
end;
procedure __tagDebugStackFrameDescriptor__Wrapper.setdwLim(const val : LongWord);
begin
tagDebugStackFrameDescriptor(GetRecordPtr^).dwLim := val;
end;
function __tagDebugStackFrameDescriptor__Wrapper.getdwLim : LongWord;
begin
result := tagDebugStackFrameDescriptor(GetRecordPtr^).dwLim;
end;
procedure __tagDebugStackFrameDescriptor__Wrapper.setfFinal(const val : Integer);
begin
tagDebugStackFrameDescriptor(GetRecordPtr^).fFinal := val;
end;
function __tagDebugStackFrameDescriptor__Wrapper.getfFinal : Integer;
begin
result := tagDebugStackFrameDescriptor(GetRecordPtr^).fFinal;
end;
function __tagELEMDESC__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __tagEXCEPINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagEXCEPINFO__Wrapper.setwCode(const val : Word);
begin
tagEXCEPINFO(GetRecordPtr^).wCode := val;
end;
function __tagEXCEPINFO__Wrapper.getwCode : Word;
begin
result := tagEXCEPINFO(GetRecordPtr^).wCode;
end;
procedure __tagEXCEPINFO__Wrapper.setwReserved(const val : Word);
begin
tagEXCEPINFO(GetRecordPtr^).wReserved := val;
end;
function __tagEXCEPINFO__Wrapper.getwReserved : Word;
begin
result := tagEXCEPINFO(GetRecordPtr^).wReserved;
end;
procedure __tagEXCEPINFO__Wrapper.setbstrSource(const val : WideString);
begin
tagEXCEPINFO(GetRecordPtr^).bstrSource := val;
end;
function __tagEXCEPINFO__Wrapper.getbstrSource : WideString;
begin
result := tagEXCEPINFO(GetRecordPtr^).bstrSource;
end;
procedure __tagEXCEPINFO__Wrapper.setbstrDescription(const val : WideString);
begin
tagEXCEPINFO(GetRecordPtr^).bstrDescription := val;
end;
function __tagEXCEPINFO__Wrapper.getbstrDescription : WideString;
begin
result := tagEXCEPINFO(GetRecordPtr^).bstrDescription;
end;
procedure __tagEXCEPINFO__Wrapper.setbstrHelpFile(const val : WideString);
begin
tagEXCEPINFO(GetRecordPtr^).bstrHelpFile := val;
end;
function __tagEXCEPINFO__Wrapper.getbstrHelpFile : WideString;
begin
result := tagEXCEPINFO(GetRecordPtr^).bstrHelpFile;
end;
procedure __tagEXCEPINFO__Wrapper.setdwHelpContext(const val : LongWord);
begin
tagEXCEPINFO(GetRecordPtr^).dwHelpContext := val;
end;
function __tagEXCEPINFO__Wrapper.getdwHelpContext : LongWord;
begin
result := tagEXCEPINFO(GetRecordPtr^).dwHelpContext;
end;
procedure __tagEXCEPINFO__Wrapper.setpvReserved(const val : LongWord);
begin
tagEXCEPINFO(GetRecordPtr^).pvReserved := val;
end;
function __tagEXCEPINFO__Wrapper.getpvReserved : LongWord;
begin
result := tagEXCEPINFO(GetRecordPtr^).pvReserved;
end;
procedure __tagEXCEPINFO__Wrapper.setpfnDeferredFillIn(const val : LongWord);
begin
tagEXCEPINFO(GetRecordPtr^).pfnDeferredFillIn := val;
end;
function __tagEXCEPINFO__Wrapper.getpfnDeferredFillIn : LongWord;
begin
result := tagEXCEPINFO(GetRecordPtr^).pfnDeferredFillIn;
end;
procedure __tagEXCEPINFO__Wrapper.setscode(const val : scode);
begin
tagEXCEPINFO(GetRecordPtr^).scode := val;
end;
function __tagEXCEPINFO__Wrapper.getscode : scode;
begin
result := tagEXCEPINFO(GetRecordPtr^).scode;
end;
function __tagFUNCDESC__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagFUNCDESC__Wrapper.setmemid(const val : Integer);
begin
tagFUNCDESC(GetRecordPtr^).memid := val;
end;
function __tagFUNCDESC__Wrapper.getmemid : Integer;
begin
result := tagFUNCDESC(GetRecordPtr^).memid;
end;
procedure __tagFUNCDESC__Wrapper.setcParams(const val : SmallInt);
begin
tagFUNCDESC(GetRecordPtr^).cParams := val;
end;
function __tagFUNCDESC__Wrapper.getcParams : SmallInt;
begin
result := tagFUNCDESC(GetRecordPtr^).cParams;
end;
procedure __tagFUNCDESC__Wrapper.setcParamsOpt(const val : SmallInt);
begin
tagFUNCDESC(GetRecordPtr^).cParamsOpt := val;
end;
function __tagFUNCDESC__Wrapper.getcParamsOpt : SmallInt;
begin
result := tagFUNCDESC(GetRecordPtr^).cParamsOpt;
end;
procedure __tagFUNCDESC__Wrapper.setoVft(const val : SmallInt);
begin
tagFUNCDESC(GetRecordPtr^).oVft := val;
end;
function __tagFUNCDESC__Wrapper.getoVft : SmallInt;
begin
result := tagFUNCDESC(GetRecordPtr^).oVft;
end;
procedure __tagFUNCDESC__Wrapper.setcScodes(const val : SmallInt);
begin
tagFUNCDESC(GetRecordPtr^).cScodes := val;
end;
function __tagFUNCDESC__Wrapper.getcScodes : SmallInt;
begin
result := tagFUNCDESC(GetRecordPtr^).cScodes;
end;
procedure __tagFUNCDESC__Wrapper.setwFuncFlags(const val : Word);
begin
tagFUNCDESC(GetRecordPtr^).wFuncFlags := val;
end;
function __tagFUNCDESC__Wrapper.getwFuncFlags : Word;
begin
result := tagFUNCDESC(GetRecordPtr^).wFuncFlags;
end;
function __tagIDLDESC__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagIDLDESC__Wrapper.setdwReserved(const val : LongWord);
begin
tagIDLDESC(GetRecordPtr^).dwReserved := val;
end;
function __tagIDLDESC__Wrapper.getdwReserved : LongWord;
begin
result := tagIDLDESC(GetRecordPtr^).dwReserved;
end;
procedure __tagIDLDESC__Wrapper.setwIDLFlags(const val : Word);
begin
tagIDLDESC(GetRecordPtr^).wIDLFlags := val;
end;
function __tagIDLDESC__Wrapper.getwIDLFlags : Word;
begin
result := tagIDLDESC(GetRecordPtr^).wIDLFlags;
end;
function __tagPARAMDESC__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagPARAMDESC__Wrapper.setwParamFlags(const val : Word);
begin
tagPARAMDESC(GetRecordPtr^).wParamFlags := val;
end;
function __tagPARAMDESC__Wrapper.getwParamFlags : Word;
begin
result := tagPARAMDESC(GetRecordPtr^).wParamFlags;
end;
function __tagPARAMDESCEX__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagPARAMDESCEX__Wrapper.setcBytes(const val : LongWord);
begin
tagPARAMDESCEX(GetRecordPtr^).cBytes := val;
end;
function __tagPARAMDESCEX__Wrapper.getcBytes : LongWord;
begin
result := tagPARAMDESCEX(GetRecordPtr^).cBytes;
end;
procedure __tagPARAMDESCEX__Wrapper.setvarDefaultValue(const val : OleVariant);
begin
tagPARAMDESCEX(GetRecordPtr^).varDefaultValue := val;
end;
function __tagPARAMDESCEX__Wrapper.getvarDefaultValue : OleVariant;
begin
result := tagPARAMDESCEX(GetRecordPtr^).varDefaultValue;
end;
function __tagSAFEARRAYBOUND__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagSAFEARRAYBOUND__Wrapper.setcElements(const val : LongWord);
begin
tagSAFEARRAYBOUND(GetRecordPtr^).cElements := val;
end;
function __tagSAFEARRAYBOUND__Wrapper.getcElements : LongWord;
begin
result := tagSAFEARRAYBOUND(GetRecordPtr^).cElements;
end;
procedure __tagSAFEARRAYBOUND__Wrapper.setlLbound(const val : Integer);
begin
tagSAFEARRAYBOUND(GetRecordPtr^).lLbound := val;
end;
function __tagSAFEARRAYBOUND__Wrapper.getlLbound : Integer;
begin
result := tagSAFEARRAYBOUND(GetRecordPtr^).lLbound;
end;
function __tagTLIBATTR__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTLIBATTR__Wrapper.setlcid(const val : LongWord);
begin
tagTLIBATTR(GetRecordPtr^).lcid := val;
end;
function __tagTLIBATTR__Wrapper.getlcid : LongWord;
begin
result := tagTLIBATTR(GetRecordPtr^).lcid;
end;
procedure __tagTLIBATTR__Wrapper.setwMajorVerNum(const val : Word);
begin
tagTLIBATTR(GetRecordPtr^).wMajorVerNum := val;
end;
function __tagTLIBATTR__Wrapper.getwMajorVerNum : Word;
begin
result := tagTLIBATTR(GetRecordPtr^).wMajorVerNum;
end;
procedure __tagTLIBATTR__Wrapper.setwMinorVerNum(const val : Word);
begin
tagTLIBATTR(GetRecordPtr^).wMinorVerNum := val;
end;
function __tagTLIBATTR__Wrapper.getwMinorVerNum : Word;
begin
result := tagTLIBATTR(GetRecordPtr^).wMinorVerNum;
end;
procedure __tagTLIBATTR__Wrapper.setwLibFlags(const val : Word);
begin
tagTLIBATTR(GetRecordPtr^).wLibFlags := val;
end;
function __tagTLIBATTR__Wrapper.getwLibFlags : Word;
begin
result := tagTLIBATTR(GetRecordPtr^).wLibFlags;
end;
function __tagTYPEATTR__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTYPEATTR__Wrapper.setlcid(const val : LongWord);
begin
tagTYPEATTR(GetRecordPtr^).lcid := val;
end;
function __tagTYPEATTR__Wrapper.getlcid : LongWord;
begin
result := tagTYPEATTR(GetRecordPtr^).lcid;
end;
procedure __tagTYPEATTR__Wrapper.setdwReserved(const val : LongWord);
begin
tagTYPEATTR(GetRecordPtr^).dwReserved := val;
end;
function __tagTYPEATTR__Wrapper.getdwReserved : LongWord;
begin
result := tagTYPEATTR(GetRecordPtr^).dwReserved;
end;
procedure __tagTYPEATTR__Wrapper.setmemidConstructor(const val : Integer);
begin
tagTYPEATTR(GetRecordPtr^).memidConstructor := val;
end;
function __tagTYPEATTR__Wrapper.getmemidConstructor : Integer;
begin
result := tagTYPEATTR(GetRecordPtr^).memidConstructor;
end;
procedure __tagTYPEATTR__Wrapper.setmemidDestructor(const val : Integer);
begin
tagTYPEATTR(GetRecordPtr^).memidDestructor := val;
end;
function __tagTYPEATTR__Wrapper.getmemidDestructor : Integer;
begin
result := tagTYPEATTR(GetRecordPtr^).memidDestructor;
end;
procedure __tagTYPEATTR__Wrapper.setcbSizeInstance(const val : LongWord);
begin
tagTYPEATTR(GetRecordPtr^).cbSizeInstance := val;
end;
function __tagTYPEATTR__Wrapper.getcbSizeInstance : LongWord;
begin
result := tagTYPEATTR(GetRecordPtr^).cbSizeInstance;
end;
procedure __tagTYPEATTR__Wrapper.setcFuncs(const val : Word);
begin
tagTYPEATTR(GetRecordPtr^).cFuncs := val;
end;
function __tagTYPEATTR__Wrapper.getcFuncs : Word;
begin
result := tagTYPEATTR(GetRecordPtr^).cFuncs;
end;
procedure __tagTYPEATTR__Wrapper.setcVars(const val : Word);
begin
tagTYPEATTR(GetRecordPtr^).cVars := val;
end;
function __tagTYPEATTR__Wrapper.getcVars : Word;
begin
result := tagTYPEATTR(GetRecordPtr^).cVars;
end;
procedure __tagTYPEATTR__Wrapper.setcImplTypes(const val : Word);
begin
tagTYPEATTR(GetRecordPtr^).cImplTypes := val;
end;
function __tagTYPEATTR__Wrapper.getcImplTypes : Word;
begin
result := tagTYPEATTR(GetRecordPtr^).cImplTypes;
end;
procedure __tagTYPEATTR__Wrapper.setcbSizeVft(const val : Word);
begin
tagTYPEATTR(GetRecordPtr^).cbSizeVft := val;
end;
function __tagTYPEATTR__Wrapper.getcbSizeVft : Word;
begin
result := tagTYPEATTR(GetRecordPtr^).cbSizeVft;
end;
procedure __tagTYPEATTR__Wrapper.setcbAlignment(const val : Word);
begin
tagTYPEATTR(GetRecordPtr^).cbAlignment := val;
end;
function __tagTYPEATTR__Wrapper.getcbAlignment : Word;
begin
result := tagTYPEATTR(GetRecordPtr^).cbAlignment;
end;
procedure __tagTYPEATTR__Wrapper.setwTypeFlags(const val : Word);
begin
tagTYPEATTR(GetRecordPtr^).wTypeFlags := val;
end;
function __tagTYPEATTR__Wrapper.getwTypeFlags : Word;
begin
result := tagTYPEATTR(GetRecordPtr^).wTypeFlags;
end;
procedure __tagTYPEATTR__Wrapper.setwMajorVerNum(const val : Word);
begin
tagTYPEATTR(GetRecordPtr^).wMajorVerNum := val;
end;
function __tagTYPEATTR__Wrapper.getwMajorVerNum : Word;
begin
result := tagTYPEATTR(GetRecordPtr^).wMajorVerNum;
end;
procedure __tagTYPEATTR__Wrapper.setwMinorVerNum(const val : Word);
begin
tagTYPEATTR(GetRecordPtr^).wMinorVerNum := val;
end;
function __tagTYPEATTR__Wrapper.getwMinorVerNum : Word;
begin
result := tagTYPEATTR(GetRecordPtr^).wMinorVerNum;
end;
function __tagTYPEDESC__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagTYPEDESC__Wrapper.setvt(const val : Word);
begin
tagTYPEDESC(GetRecordPtr^).vt := val;
end;
function __tagTYPEDESC__Wrapper.getvt : Word;
begin
result := tagTYPEDESC(GetRecordPtr^).vt;
end;
function __tagVARDESC__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagVARDESC__Wrapper.setmemid(const val : Integer);
begin
tagVARDESC(GetRecordPtr^).memid := val;
end;
function __tagVARDESC__Wrapper.getmemid : Integer;
begin
result := tagVARDESC(GetRecordPtr^).memid;
end;
procedure __tagVARDESC__Wrapper.setwVarFlags(const val : Word);
begin
tagVARDESC(GetRecordPtr^).wVarFlags := val;
end;
function __tagVARDESC__Wrapper.getwVarFlags : Word;
begin
result := tagVARDESC(GetRecordPtr^).wVarFlags;
end;
function ___MIDL_IOleAutomationTypes_0005_ : IDispatch;
begin
  result := ____MIDL_IOleAutomationTypes_0005__Wrapper.Create;
end;
function ___MIDL_IOleAutomationTypes_0006_ : IDispatch;
begin
  result := ____MIDL_IOleAutomationTypes_0006__Wrapper.Create;
end;
function __GUID_ : IDispatch;
begin
  result := ___GUID__Wrapper.Create;
end;
function _tagARRAYDESC_ : IDispatch;
begin
  result := __tagARRAYDESC__Wrapper.Create;
end;
function _tagDebugStackFrameDescriptor_ : IDispatch;
begin
  result := __tagDebugStackFrameDescriptor__Wrapper.Create;
end;
function _tagELEMDESC_ : IDispatch;
begin
  result := __tagELEMDESC__Wrapper.Create;
end;
function _tagEXCEPINFO_ : IDispatch;
begin
  result := __tagEXCEPINFO__Wrapper.Create;
end;
function _tagFUNCDESC_ : IDispatch;
begin
  result := __tagFUNCDESC__Wrapper.Create;
end;
function _tagIDLDESC_ : IDispatch;
begin
  result := __tagIDLDESC__Wrapper.Create;
end;
function _tagPARAMDESC_ : IDispatch;
begin
  result := __tagPARAMDESC__Wrapper.Create;
end;
function _tagPARAMDESCEX_ : IDispatch;
begin
  result := __tagPARAMDESCEX__Wrapper.Create;
end;
function _tagSAFEARRAYBOUND_ : IDispatch;
begin
  result := __tagSAFEARRAYBOUND__Wrapper.Create;
end;
function _tagTLIBATTR_ : IDispatch;
begin
  result := __tagTLIBATTR__Wrapper.Create;
end;
function _tagTYPEATTR_ : IDispatch;
begin
  result := __tagTYPEATTR__Wrapper.Create;
end;
function _tagTYPEDESC_ : IDispatch;
begin
  result := __tagTYPEDESC__Wrapper.Create;
end;
function _tagVARDESC_ : IDispatch;
begin
  result := __tagVARDESC__Wrapper.Create;
end;

type ____MIDL_IOleAutomationTypes_0005__Wrapper__ = class(____MIDL_IOleAutomationTypes_0005__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ____MIDL_IOleAutomationTypes_0005__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert__MIDL_IOleAutomationTypes_0005ToVariant(var R : __MIDL_IOleAutomationTypes_0005) : OleVariant;
var
__rw : ____MIDL_IOleAutomationTypes_0005__Wrapper__;
begin
__rw := ____MIDL_IOleAutomationTypes_0005__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo__MIDL_IOleAutomationTypes_0005(const V : OleVariant) : __MIDL_IOleAutomationTypes_0005;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := __MIDL_IOleAutomationTypes_0005((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ____MIDL_IOleAutomationTypes_0006__Wrapper__ = class(____MIDL_IOleAutomationTypes_0006__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ____MIDL_IOleAutomationTypes_0006__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert__MIDL_IOleAutomationTypes_0006ToVariant(var R : __MIDL_IOleAutomationTypes_0006) : OleVariant;
var
__rw : ____MIDL_IOleAutomationTypes_0006__Wrapper__;
begin
__rw := ____MIDL_IOleAutomationTypes_0006__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo__MIDL_IOleAutomationTypes_0006(const V : OleVariant) : __MIDL_IOleAutomationTypes_0006;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := __MIDL_IOleAutomationTypes_0006((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___GUID__Wrapper__ = class(___GUID__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___GUID__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_GUIDToVariant(var R : _GUID) : OleVariant;
var
__rw : ___GUID__Wrapper__;
begin
__rw := ___GUID__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_GUID(const V : OleVariant) : _GUID;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _GUID((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagARRAYDESC__Wrapper__ = class(__tagARRAYDESC__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagARRAYDESC__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagARRAYDESCToVariant(var R : tagARRAYDESC) : OleVariant;
var
__rw : __tagARRAYDESC__Wrapper__;
begin
__rw := __tagARRAYDESC__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagARRAYDESC(const V : OleVariant) : tagARRAYDESC;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagARRAYDESC((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagDebugStackFrameDescriptor__Wrapper__ = class(__tagDebugStackFrameDescriptor__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagDebugStackFrameDescriptor__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagDebugStackFrameDescriptorToVariant(var R : tagDebugStackFrameDescriptor) : OleVariant;
var
__rw : __tagDebugStackFrameDescriptor__Wrapper__;
begin
__rw := __tagDebugStackFrameDescriptor__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagDebugStackFrameDescriptor(const V : OleVariant) : tagDebugStackFrameDescriptor;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagDebugStackFrameDescriptor((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagELEMDESC__Wrapper__ = class(__tagELEMDESC__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagELEMDESC__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagELEMDESCToVariant(var R : tagELEMDESC) : OleVariant;
var
__rw : __tagELEMDESC__Wrapper__;
begin
__rw := __tagELEMDESC__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagELEMDESC(const V : OleVariant) : tagELEMDESC;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagELEMDESC((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagEXCEPINFO__Wrapper__ = class(__tagEXCEPINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagEXCEPINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagEXCEPINFOToVariant(var R : tagEXCEPINFO) : OleVariant;
var
__rw : __tagEXCEPINFO__Wrapper__;
begin
__rw := __tagEXCEPINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagEXCEPINFO(const V : OleVariant) : tagEXCEPINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagEXCEPINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagFUNCDESC__Wrapper__ = class(__tagFUNCDESC__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagFUNCDESC__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagFUNCDESCToVariant(var R : tagFUNCDESC) : OleVariant;
var
__rw : __tagFUNCDESC__Wrapper__;
begin
__rw := __tagFUNCDESC__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagFUNCDESC(const V : OleVariant) : tagFUNCDESC;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagFUNCDESC((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagIDLDESC__Wrapper__ = class(__tagIDLDESC__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagIDLDESC__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagIDLDESCToVariant(var R : tagIDLDESC) : OleVariant;
var
__rw : __tagIDLDESC__Wrapper__;
begin
__rw := __tagIDLDESC__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagIDLDESC(const V : OleVariant) : tagIDLDESC;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagIDLDESC((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagPARAMDESC__Wrapper__ = class(__tagPARAMDESC__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagPARAMDESC__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagPARAMDESCToVariant(var R : tagPARAMDESC) : OleVariant;
var
__rw : __tagPARAMDESC__Wrapper__;
begin
__rw := __tagPARAMDESC__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagPARAMDESC(const V : OleVariant) : tagPARAMDESC;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagPARAMDESC((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagPARAMDESCEX__Wrapper__ = class(__tagPARAMDESCEX__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagPARAMDESCEX__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagPARAMDESCEXToVariant(var R : tagPARAMDESCEX) : OleVariant;
var
__rw : __tagPARAMDESCEX__Wrapper__;
begin
__rw := __tagPARAMDESCEX__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagPARAMDESCEX(const V : OleVariant) : tagPARAMDESCEX;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagPARAMDESCEX((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagSAFEARRAYBOUND__Wrapper__ = class(__tagSAFEARRAYBOUND__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagSAFEARRAYBOUND__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagSAFEARRAYBOUNDToVariant(var R : tagSAFEARRAYBOUND) : OleVariant;
var
__rw : __tagSAFEARRAYBOUND__Wrapper__;
begin
__rw := __tagSAFEARRAYBOUND__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagSAFEARRAYBOUND(const V : OleVariant) : tagSAFEARRAYBOUND;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagSAFEARRAYBOUND((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTLIBATTR__Wrapper__ = class(__tagTLIBATTR__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTLIBATTR__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTLIBATTRToVariant(var R : tagTLIBATTR) : OleVariant;
var
__rw : __tagTLIBATTR__Wrapper__;
begin
__rw := __tagTLIBATTR__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTLIBATTR(const V : OleVariant) : tagTLIBATTR;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTLIBATTR((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTYPEATTR__Wrapper__ = class(__tagTYPEATTR__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTYPEATTR__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTYPEATTRToVariant(var R : tagTYPEATTR) : OleVariant;
var
__rw : __tagTYPEATTR__Wrapper__;
begin
__rw := __tagTYPEATTR__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTYPEATTR(const V : OleVariant) : tagTYPEATTR;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTYPEATTR((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagTYPEDESC__Wrapper__ = class(__tagTYPEDESC__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagTYPEDESC__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagTYPEDESCToVariant(var R : tagTYPEDESC) : OleVariant;
var
__rw : __tagTYPEDESC__Wrapper__;
begin
__rw := __tagTYPEDESC__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagTYPEDESC(const V : OleVariant) : tagTYPEDESC;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagTYPEDESC((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagVARDESC__Wrapper__ = class(__tagVARDESC__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagVARDESC__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagVARDESCToVariant(var R : tagVARDESC) : OleVariant;
var
__rw : __tagVARDESC__Wrapper__;
begin
__rw := __tagVARDESC__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagVARDESC(const V : OleVariant) : tagVARDESC;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagVARDESC((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..86] of string = (
'ActivDbgMajorVersion'
,'ActivDbgMinorVersion'
,'SOURCETEXT_ATTR_KEYWORD'
,'SOURCETEXT_ATTR_COMMENT'
,'SOURCETEXT_ATTR_NONSOURCE'
,'SOURCETEXT_ATTR_OPERATOR'
,'SOURCETEXT_ATTR_NUMBER'
,'SOURCETEXT_ATTR_STRING'
,'SOURCETEXT_ATTR_FUNCTION_START'
,'TEXT_DOC_ATTR_READONLY'
,'DEBUG_TEXT_ISEXPRESSION'
,'DEBUG_TEXT_RETURNVALUE'
,'DEBUG_TEXT_NOSIDEEFFECTS'
,'DEBUG_TEXT_ALLOWBREAKPOINTS'
,'DEBUG_TEXT_ALLOWERRORREPORT'
,'BREAKPOINT_DELETED'
,'BREAKPOINT_DISABLED'
,'BREAKPOINT_ENABLED'
,'BREAKREASON_STEP'
,'BREAKREASON_BREAKPOINT'
,'BREAKREASON_DEBUGGER_BLOCK'
,'BREAKREASON_HOST_INITIATED'
,'BREAKREASON_LANGUAGE_INITIATED'
,'BREAKREASON_DEBUGGER_HALT'
,'BREAKREASON_ERROR'
,'BREAKRESUMEACTION_ABORT'
,'BREAKRESUMEACTION_CONTINUE'
,'BREAKRESUMEACTION_STEP_INTO'
,'BREAKRESUMEACTION_STEP_OVER'
,'BREAKRESUMEACTION_STEP_OUT'
,'DOCUMENTNAMETYPE_APPNODE'
,'DOCUMENTNAMETYPE_TITLE'
,'DOCUMENTNAMETYPE_FILE_TAIL'
,'DOCUMENTNAMETYPE_URL'
,'ERRORRESUMEACTION_ReexecuteErrorStatement'
,'ERRORRESUMEACTION_AbortCallAndReturnErrorToCaller'
,'ERRORRESUMEACTION_SkipErrorStatement'
,'TKIND_ENUM'
,'TKIND_RECORD'
,'TKIND_MODULE'
,'TKIND_INTERFACE'
,'TKIND_DISPATCH'
,'TKIND_COCLASS'
,'TKIND_ALIAS'
,'TKIND_UNION'
,'TKIND_MAX'
,'DESCKIND_NONE'
,'DESCKIND_FUNCDESC'
,'DESCKIND_VARDESC'
,'DESCKIND_TYPECOMP'
,'DESCKIND_IMPLICITAPPOBJ'
,'DESCKIND_MAX'
,'FUNC_VIRTUAL'
,'FUNC_PUREVIRTUAL'
,'FUNC_NONVIRTUAL'
,'FUNC_STATIC'
,'FUNC_DISPATCH'
,'INVOKE_FUNC'
,'INVOKE_PROPERTYGET'
,'INVOKE_PROPERTYPUT'
,'INVOKE_PROPERTYPUTREF'
,'CC_FASTCALL'
,'CC_CDECL'
,'CC_MSCPASCAL'
,'CC_PASCAL'
,'CC_MACPASCAL'
,'CC_STDCALL'
,'CC_FPFASTCALL'
,'CC_SYSCALL'
,'CC_MPWCDECL'
,'CC_MPWPASCAL'
,'CC_MAX'
,'VAR_PERINSTANCE'
,'VAR_STATIC'
,'VAR_CONST'
,'VAR_DISPATCH'
,'SYS_WIN16'
,'SYS_WIN32'
,'SYS_MAC'
,'SCRIPTSTATE_UNINITIALIZED'
,'SCRIPTSTATE_INITIALIZED'
,'SCRIPTSTATE_STARTED'
,'SCRIPTSTATE_CONNECTED'
,'SCRIPTSTATE_DISCONNECTED'
,'SCRIPTSTATE_CLOSED'
,'SCRIPTTHREADSTATE_NOTINSCRIPT'
,'SCRIPTTHREADSTATE_RUNNING'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,ActivDbgMajorVersion));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,ActivDbgMinorVersion));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,SOURCETEXT_ATTR_KEYWORD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,SOURCETEXT_ATTR_COMMENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,SOURCETEXT_ATTR_NONSOURCE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,SOURCETEXT_ATTR_OPERATOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,SOURCETEXT_ATTR_NUMBER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,SOURCETEXT_ATTR_STRING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,SOURCETEXT_ATTR_FUNCTION_START));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,TEXT_DOC_ATTR_READONLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,DEBUG_TEXT_ISEXPRESSION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,DEBUG_TEXT_RETURNVALUE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,DEBUG_TEXT_NOSIDEEFFECTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,DEBUG_TEXT_ALLOWBREAKPOINTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,DEBUG_TEXT_ALLOWERRORREPORT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,BREAKPOINT_DELETED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,BREAKPOINT_DISABLED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,BREAKPOINT_ENABLED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,BREAKREASON_STEP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,BREAKREASON_BREAKPOINT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,BREAKREASON_DEBUGGER_BLOCK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,BREAKREASON_HOST_INITIATED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,BREAKREASON_LANGUAGE_INITIATED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,BREAKREASON_DEBUGGER_HALT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,BREAKREASON_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,BREAKRESUMEACTION_ABORT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,BREAKRESUMEACTION_CONTINUE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,BREAKRESUMEACTION_STEP_INTO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,BREAKRESUMEACTION_STEP_OVER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,BREAKRESUMEACTION_STEP_OUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,DOCUMENTNAMETYPE_APPNODE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,DOCUMENTNAMETYPE_TITLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,DOCUMENTNAMETYPE_FILE_TAIL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,DOCUMENTNAMETYPE_URL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,ERRORRESUMEACTION_ReexecuteErrorStatement));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,ERRORRESUMEACTION_AbortCallAndReturnErrorToCaller));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,ERRORRESUMEACTION_SkipErrorStatement));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,TKIND_ENUM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,TKIND_RECORD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,TKIND_MODULE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,TKIND_INTERFACE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,TKIND_DISPATCH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,TKIND_COCLASS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,TKIND_ALIAS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,TKIND_UNION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,TKIND_MAX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,DESCKIND_NONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,DESCKIND_FUNCDESC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,DESCKIND_VARDESC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,DESCKIND_TYPECOMP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,DESCKIND_IMPLICITAPPOBJ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,DESCKIND_MAX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,FUNC_VIRTUAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,FUNC_PUREVIRTUAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,FUNC_NONVIRTUAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,FUNC_STATIC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,FUNC_DISPATCH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,INVOKE_FUNC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,INVOKE_PROPERTYGET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,INVOKE_PROPERTYPUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,INVOKE_PROPERTYPUTREF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,CC_FASTCALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,CC_CDECL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,CC_MSCPASCAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,CC_PASCAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[65] ,CC_MACPASCAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[66] ,CC_STDCALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[67] ,CC_FPFASTCALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[68] ,CC_SYSCALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[69] ,CC_MPWCDECL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[70] ,CC_MPWPASCAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[71] ,CC_MAX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[72] ,VAR_PERINSTANCE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[73] ,VAR_STATIC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[74] ,VAR_CONST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[75] ,VAR_DISPATCH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[76] ,SYS_WIN16));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[77] ,SYS_WIN32));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[78] ,SYS_MAC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[79] ,SCRIPTSTATE_UNINITIALIZED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[80] ,SCRIPTSTATE_INITIALIZED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[81] ,SCRIPTSTATE_STARTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[82] ,SCRIPTSTATE_CONNECTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[83] ,SCRIPTSTATE_DISCONNECTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[84] ,SCRIPTSTATE_CLOSED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[85] ,SCRIPTTHREADSTATE_NOTINSCRIPT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[86] ,SCRIPTTHREADSTATE_RUNNING));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..15] of string = (
'__MIDL_IOleAutomationTypes_0005'
,'__MIDL_IOleAutomationTypes_0006'
,'_GUID'
,'tagARRAYDESC'
,'tagDebugStackFrameDescriptor'
,'tagELEMDESC'
,'tagEXCEPINFO'
,'tagFUNCDESC'
,'tagIDLDESC'
,'tagPARAMDESC'
,'tagPARAMDESCEX'
,'tagSAFEARRAYBOUND'
,'tagTLIBATTR'
,'tagTYPEATTR'
,'tagTYPEDESC'
,'tagVARDESC'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(___MIDL_IOleAutomationTypes_0005_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(___MIDL_IOleAutomationTypes_0006_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(__GUID_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(_tagARRAYDESC_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(_tagDebugStackFrameDescriptor_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[5],Addr(_tagELEMDESC_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[6],Addr(_tagEXCEPINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[7],Addr(_tagFUNCDESC_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[8],Addr(_tagIDLDESC_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[9],Addr(_tagPARAMDESC_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[10],Addr(_tagPARAMDESCEX_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[11],Addr(_tagSAFEARRAYBOUND_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[12],Addr(_tagTLIBATTR_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[13],Addr(_tagTYPEATTR_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[14],Addr(_tagTYPEDESC_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[15],Addr(_tagVARDESC_)));
end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
