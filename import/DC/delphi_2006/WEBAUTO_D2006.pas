{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit WEBAUTO_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  Contnrs,
  SiteComp,
  HTTPProd,
  HTTPApp,
  WebCntxt,
  WebScript,
  WebAuto;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure  of object;

_T1 = _T0;

_T2 = _T0;

_T3 = _T0;

{_T4 = procedure (p0 : IScriptProducer) of object;}

_T5 = procedure (const p0 : string) of object;

_T6 = function (const p0 : string): TObject of object;

{_T7 = function (const p0 : string;
p1 : TAbstractScriptEngine): IInterface of object;}

{_T8 = function (p0 : TComponent): IInterface of object;}

{_T9 = function (p0 : IScriptContext;
const p1 : IWebPageInfo): IInterface of object;}

{_T10 = procedure (p0 : IScriptContext) of object;}

{_T11 = function (p0 : TInterfacedObject): IInterface of object;}

{_T12 = procedure (p0 : IScriptContext;
const p1 : IWebPageInfo) of object;}

{_T13 = function : IPageDispatcher of object;}

{_T14 = procedure (p0 : IScriptProducer) of object;}

{_T15 = procedure (p0 : IScriptContext) of object;}

{_T16 = procedure (p0 : IScriptProducer) of object;}

{_T17 = function : IInterface of object;}

function __DC__GetTModuleObjectsStub__Module(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TModuleObjectsStub(Instance).Module);
end;

function __DC__GetTWebModuleStub__Name(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWebModuleStub(Instance).Name;
end;

function __DC__GetTWebPageStub__Name(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWebPageStub(Instance).Name;
end;

function __DC__GetTWebProducerStub__Content(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := String(TWebProducerStub(Instance).Content);
end;

procedure __DC__SetTWebProducerStub__Content(Instance : TObject; Params : PVariantArgList);
begin
TWebProducerStub(Instance).Content:=PChar(String(OleVariant(Params^[0])));
end;

function __DC__GetTWebResponseStub__Content(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := String(TWebResponseStub(Instance).Content);
end;

procedure __DC__SetTWebResponseStub__Content(Instance : TObject; Params : PVariantArgList);
begin
TWebResponseStub(Instance).Content:=PChar(String(OleVariant(Params^[0])));
end;

procedure __RegisterProps;
begin
RegisterProperty(TModuleObjectsStub,'Module',__DC__GetTModuleObjectsStub__Module,nil);
RegisterProperty(TWebModuleStub,'Name',__DC__GetTWebModuleStub__Name,nil);
RegisterProperty(TWebPageStub,'Name',__DC__GetTWebPageStub__Name,nil);
RegisterProperty(TWebProducerStub,'Content',__DC__GetTWebProducerStub__Content,__DC__SetTWebProducerStub__Content);
RegisterProperty(TWebResponseStub,'Content',__DC__GetTWebResponseStub__Content,__DC__SetTWebResponseStub__Content);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..12] of TClass = (
THTMLItemsStub,
TModuleObjectsStub,
TSampleWebPageInfo,
TWebComponentsStub,
TWebModulesStub,
TWebModuleStub,
TWebPagesStub,
TWebPageStub,
TWebProducerStub,
TWebRequestStub,
TWebResponseStub,
TWebSessionIDStub,
TWebSessionStub
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..3] of string = (
'RaiseStringParameterExpected'
,'RaiseObjectParameterExpected'
,'RaiseIntegerParameterExpected'
,'RaiseParameterExpected'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),NoParams,Addr(RaiseStringParameterExpected),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),NoParams,Addr(RaiseObjectParameterExpected),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T2),NoParams,Addr(RaiseIntegerParameterExpected),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T3),NoParams,Addr(RaiseParameterExpected),cRegister);

RegisterProc(TSampleWebPageInfo,'Create',mtConstructor,TypeInfo(_T5),[
TypeInfo(string)],Addr(TSampleWebPageInfo.Create),cRegister);

//RegRegisterMethod(TWebComponentsStub,'FindObject',TypeInfo(_T6),[TypeInfo(string),TypeInfo(TObject)], pointer(4));
RegRegisterMethod(TWebComponentsStub,'FindObject',TypeInfo(_T6),[TypeInfo(string),TypeInfo(TObject)],  getVMTProcAddr('TWebComponentsStub','FindObject',4));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(THTMLItemsStub,'Create',mtConstructor,TypeInfo(_T4),[
TypeInfo(IScriptProducer)],Addr(THTMLItemsStub.Create),cRegister)}

{RegRegisterMethod(TWebComponentsStub,'DispatchOfName',TypeInfo(_T7),[
TypeInfo(string),
TypeInfo(TAbstractScriptEngine),TypeInfo(IInterface)], pointer(8))}

{RegRegisterMethod(TWebModuleStub,'CreateModuleObjectsStub',TypeInfo(_T8),[
TypeInfo(TComponent),TypeInfo(IInterface)], pointer(12))}

{RegRegisterMethod(TWebPagesStub,'CreatePageStub',TypeInfo(_T9),[
TypeInfo(IScriptContext),
TypeInfo(IWebPageInfo),TypeInfo(IInterface)], pointer(12))}

{RegisterProc(TWebPagesStub,'Create',mtConstructor,TypeInfo(_T10),[
TypeInfo(IScriptContext)],Addr(TWebPagesStub.Create),cRegister)}

{RegRegisterMethod(TWebPageStub,'CreateActionStub',TypeInfo(_T11),[
TypeInfo(TInterfacedObject),TypeInfo(IInterface)], pointer(0))}

{RegisterProc(TWebPageStub,'Create',mtConstructor,TypeInfo(_T12),[
TypeInfo(IScriptContext),
TypeInfo(IWebPageInfo)],Addr(TWebPageStub.Create),cRegister)}

{RegRegisterMethod(TWebPageStub,'PageDispatcher',TypeInfo(_T13),[TypeInfo(IPageDispatcher)],Addr(TWebPageStub.PageDispatcher))}

{RegisterProc(TWebProducerStub,'Create',mtConstructor,TypeInfo(_T14),[
TypeInfo(IScriptProducer)],Addr(TWebProducerStub.Create),cRegister)}

{RegisterProc(TWebRequestStub,'Create',mtConstructor,TypeInfo(_T15),[
TypeInfo(IScriptContext)],Addr(TWebRequestStub.Create),cRegister)}

{RegisterProc(TWebResponseStub,'Create',mtConstructor,TypeInfo(_T16),[
TypeInfo(IScriptProducer)],Addr(TWebResponseStub.Create),cRegister)}

{RegRegisterMethod(TWebSessionStub,'CreateSessionIDStub',TypeInfo(_T17),[TypeInfo(IInterface)], pointer(0))}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
