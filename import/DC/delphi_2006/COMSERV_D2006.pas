{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit COMSERV_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Messages,
  ActiveX,
  SysUtils,
  ComObj,
  ComServ;
function ConvertTGUIDToVariant(var R : TGUID) : OleVariant;
function ConvertVariantToTGUID(const V : OleVariant) : TGUID;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TGUID__Wrapper = class(TDCRecordWrapper)
private
fR : TGUID;
public
function GetRecordPtr : pointer; override;
published
procedure setD1(const val : LongWord);
function getD1 : LongWord;
property D1 : LongWord read getD1 write setD1;
procedure setD2(const val : Word);
function getD2 : Word;
property D2 : Word read getD2 write setD2;
procedure setD3(const val : Word);
function getD3 : Word;
property D3 : Word read getD3 write setD3;
end;
type
_T0 = function (const p0 : IDispatch;
const p1 : IDispatch;
var p2): HResult of object;

_T1 = function : HResult of object;

_T2 = _T1;

_T3 = _T1;

{_T4 = function (const p0 : string): ITypeLib of object;}

_T5 = procedure  of object;

_T6 = _T5;

_T7 = _T5;

_T8 = procedure (const p0 : string) of object;

_T9 = procedure (p0 : Boolean) of object;

function __TGUID__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TGUID__Wrapper.setD1(const val : LongWord);
begin
TGUID(GetRecordPtr^).D1 := val;
end;
function __TGUID__Wrapper.getD1 : LongWord;
begin
result := TGUID(GetRecordPtr^).D1;
end;
procedure __TGUID__Wrapper.setD2(const val : Word);
begin
TGUID(GetRecordPtr^).D2 := val;
end;
function __TGUID__Wrapper.getD2 : Word;
begin
result := TGUID(GetRecordPtr^).D2;
end;
procedure __TGUID__Wrapper.setD3(const val : Word);
begin
TGUID(GetRecordPtr^).D3 := val;
end;
function __TGUID__Wrapper.getD3 : Word;
begin
result := TGUID(GetRecordPtr^).D3;
end;
function ____DllGetClassObject__Wrapper(const p0 : IDispatch;
const p1 : IDispatch;
var p2): HResult;
var
__p0 : ^TGUID;
__i0 : IDispatch;
__p1 : ^TGUID;
__i1 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := DllGetClassObject(__p0^,__p1^,p2);
end;


type __TGUID__Wrapper__ = class(__TGUID__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TGUID__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTGUIDToVariant(var R : TGUID) : OleVariant;
var
__rw : __TGUID__Wrapper__;
begin
__rw := __TGUID__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTGUID(const V : OleVariant) : TGUID;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TGUID((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTComServer__IsInprocServer(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TComServer(Instance).IsInprocServer;
end;

procedure __DC__SetTComServer__IsInprocServer(Instance : TObject; Params : PVariantArgList);
begin
TComServer(Instance).IsInprocServer:=OleVariant(Params^[0]);
end;

function __DC__GetTComServer__ObjectCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TComServer(Instance).ObjectCount;
end;

function __DC__GetTComServer__StartMode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TComServer(Instance).StartMode;
end;

function __DC__GetTComServer__UIInteractive(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TComServer(Instance).UIInteractive;
end;

procedure __DC__SetTComServer__UIInteractive(Instance : TObject; Params : PVariantArgList);
begin
TComServer(Instance).UIInteractive:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TComServer,'IsInprocServer',__DC__GetTComServer__IsInprocServer,__DC__SetTComServer__IsInprocServer);
RegisterProperty(TComServer,'ObjectCount',__DC__GetTComServer__ObjectCount,nil);
RegisterProperty(TComServer,'StartMode',__DC__GetTComServer__StartMode,nil);
RegisterProperty(TComServer,'UIInteractive',__DC__GetTComServer__UIInteractive,__DC__SetTComServer__UIInteractive);
end;

function __DC__GetComServ__ComServer(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(ComServ.ComServer);
end;

procedure __DC__SetComServ__ComServer(Instance : TObject; Params : PVariantArgList);
begin
TObject(ComServ.ComServer):=(VarToObject(OleVariant(Params^[0])));
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('ComServer',__DC__GetComServ__ComServer,__DC__SetComServ__ComServer));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..3] of string = (
'smStandalone'
,'smAutomation'
,'smRegServer'
,'smUnregServer'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,smStandalone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,smAutomation));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,smRegServer));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,smUnregServer));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..0] of TClass = (
TComServer
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..3] of string = (
'DllGetClassObject'
,'DllCanUnloadNow'
,'DllRegisterServer'
,'DllUnregisterServer'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(IDispatch),
TypeInfo(IDispatch),
TypeInfoUntyped,TypeInfo(HResult)],Addr(____DllGetClassObject__Wrapper),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[TypeInfo(HResult)],Addr(DllCanUnloadNow),cStdCall);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T2),[TypeInfo(HResult)],Addr(DllRegisterServer),cStdCall);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T3),[TypeInfo(HResult)],Addr(DllUnregisterServer),cStdCall);

RegisterProc(TComServer,'Create',mtConstructor,TypeInfo(_T5),NoParams,Addr(TComServer.Create),cRegister);

RegRegisterMethod(TComServer,'Initialize',TypeInfo(_T6),NoParams,Addr(TComServer.Initialize));

RegRegisterMethod(TComServer,'LoadTypeLib',TypeInfo(_T7),NoParams,Addr(TComServer.LoadTypeLib));

RegRegisterMethod(TComServer,'SetServerName',TypeInfo(_T8),[
TypeInfo(string)],Addr(TComServer.SetServerName));

RegRegisterMethod(TComServer,'UpdateRegistry',TypeInfo(_T9),[
TypeInfo(Boolean)],Addr(TComServer.UpdateRegistry));

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'LoadTypeLibrary',mtProc,TypeInfo(_T4),[
TypeInfo(string),TypeInfo(ITypeLib)],Addr(LoadTypeLibrary),cRegister)}

RegisterEvent(TypeInfo(TLastReleaseEvent),[
TypeInfo(Boolean)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
