{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDINTERCEPT_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdBaseComponent,
  IdException,
  IdIntercept;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (p0 : TComponent) of object;

_T1 = procedure  of object;

_T2 = procedure (p0 : TStream) of object;

_T3 = _T2;

_T4 = _T0;

_T5 = _T1;

_T6 = _T2;

_T7 = _T2;

_T8 = _T1;

_T9 = function (p0 : TComponent): TIdConnectionIntercept of object;

function __DC__GetTIdConnectionIntercept__Connection(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdConnectionIntercept(Instance).Connection);
end;

function __DC__GetTIdConnectionIntercept__IsClient(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdConnectionIntercept(Instance).IsClient;
end;

procedure __RegisterProps;
begin
RegisterProperty(TIdConnectionIntercept,'Connection',__DC__GetTIdConnectionIntercept__Connection,nil);
RegisterProperty(TIdConnectionIntercept,'IsClient',__DC__GetTIdConnectionIntercept__IsClient,nil);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..2] of TClass = (
EIdInterceptCircularLink,
TIdConnectionIntercept,
TIdServerIntercept
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TIdConnectionIntercept,'NestedConnect',TypeInfo(_T0),[TypeInfo(TComponent)], pointer(48));
RegRegisterMethod(TIdConnectionIntercept,'NestedConnect',TypeInfo(_T0),[TypeInfo(TComponent)],  getVMTProcAddr('TIdConnectionIntercept','NestedConnect',48));


//RegRegisterMethod(TIdConnectionIntercept,'NestedDisconnect',TypeInfo(_T1),NoParams, pointer(52));
RegRegisterMethod(TIdConnectionIntercept,'NestedDisconnect',TypeInfo(_T1),NoParams,  getVMTProcAddr('TIdConnectionIntercept','NestedDisconnect',52));


//RegRegisterMethod(TIdConnectionIntercept,'NestedReceive',TypeInfo(_T2),[TypeInfo(TStream)], pointer(56));
RegRegisterMethod(TIdConnectionIntercept,'NestedReceive',TypeInfo(_T2),[TypeInfo(TStream)],  getVMTProcAddr('TIdConnectionIntercept','NestedReceive',56));


//RegRegisterMethod(TIdConnectionIntercept,'NestedSend',TypeInfo(_T3),[TypeInfo(TStream)], pointer(60));
RegRegisterMethod(TIdConnectionIntercept,'NestedSend',TypeInfo(_T3),[TypeInfo(TStream)],  getVMTProcAddr('TIdConnectionIntercept','NestedSend',60));


//RegRegisterMethod(TIdConnectionIntercept,'Connect',TypeInfo(_T4),[TypeInfo(TComponent)], pointer(64));
RegRegisterMethod(TIdConnectionIntercept,'Connect',TypeInfo(_T4),[TypeInfo(TComponent)],  getVMTProcAddr('TIdConnectionIntercept','Connect',64));


//RegRegisterMethod(TIdConnectionIntercept,'Disconnect',TypeInfo(_T5),NoParams, pointer(68));
RegRegisterMethod(TIdConnectionIntercept,'Disconnect',TypeInfo(_T5),NoParams,  getVMTProcAddr('TIdConnectionIntercept','Disconnect',68));


//RegRegisterMethod(TIdConnectionIntercept,'Receive',TypeInfo(_T6),[TypeInfo(TStream)], pointer(72));
RegRegisterMethod(TIdConnectionIntercept,'Receive',TypeInfo(_T6),[TypeInfo(TStream)],  getVMTProcAddr('TIdConnectionIntercept','Receive',72));


//RegRegisterMethod(TIdConnectionIntercept,'Send',TypeInfo(_T7),[TypeInfo(TStream)], pointer(76));
RegRegisterMethod(TIdConnectionIntercept,'Send',TypeInfo(_T7),[TypeInfo(TStream)],  getVMTProcAddr('TIdConnectionIntercept','Send',76));


//RegRegisterMethod(TIdServerIntercept,'Init',TypeInfo(_T8),NoParams, pointer(48));
RegRegisterMethod(TIdServerIntercept,'Init',TypeInfo(_T8),NoParams,  getVMTProcAddr('TIdServerIntercept','Init',48));


//RegRegisterMethod(TIdServerIntercept,'Accept',TypeInfo(_T9),[TypeInfo(TComponent),TypeInfo(TIdConnectionIntercept)], pointer(52));
RegRegisterMethod(TIdServerIntercept,'Accept',TypeInfo(_T9),[TypeInfo(TComponent),TypeInfo(TIdConnectionIntercept)],  getVMTProcAddr('TIdServerIntercept','Accept',52));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
RegisterEvent(TypeInfo(TIdInterceptNotifyEvent),[
TypeInfo(TIdConnectionIntercept)]);

RegisterEvent(TypeInfo(TIdInterceptStreamEvent),[
TypeInfo(TIdConnectionIntercept),
TypeInfo(TStream)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
