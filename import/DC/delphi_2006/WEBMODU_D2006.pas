{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit WEBMODU_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  HTTPApp,
  HTTPProd,
  Contnrs,
  WebComp,
  WebDisp,
  SiteComp,
  SysUtils,
  WebSnapObjs,
  WebModu;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = function (p0 : TComponent;
const p1 : string): TComponent of object;

_T1 = function (p0 : TComponent;
p1 : Integer): TComponent of object;

_T2 = function (p0 : TComponent): Integer of object;

_T3 = procedure (p0 : TComponent) of object;

_T4 = function : TSiteModuleHelper of object;

{_T5 = function : TObjectScripterClass of object;}

_T6 = function : TSitePageModuleHelper of object;

_T7 = function (const p0 : string): TComponent of object;

_T8 = _T3;

_T9 = procedure (p0 : TComponent;
p1 : TOperation) of object;

_T10 = function (const p0 : string;
p1 : TWebResponse): Boolean of object;

_T11 = function (const p0 : string;
var p1 : Boolean): TStream of object;

_T12 = function (const p0 : string;
p1 : TStrings;
p2 : TWebResponse): Boolean of object;

_T13 = procedure (p0 : TWebContentOptions) of object;

{_T14 = function : IProduceContent of object;}

_T15 = procedure  of object;

_T16 = _T15;

_T17 = _T15;

_T18 = _T3;

function __DC__GetTAdapterActionName__Action(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TAdapterActionName(Instance).Action);
end;

function __DC__GetTCustomWebDataModule__Request(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomWebDataModule(Instance).Request);
end;

function __DC__GetTCustomWebDataModule__Response(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomWebDataModule(Instance).Response);
end;

function __DC__GetTCustomWebDataModule__Session(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomWebDataModule(Instance).Session);
end;

function __DC__GetTCustomWebPageModule__DefaultAction(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomWebPageModule(Instance).DefaultAction);
end;

procedure __DC__SetTCustomWebPageModule__DefaultAction(Instance : TObject; Params : PVariantArgList);
begin
TCustomWebPageModule(Instance).DefaultAction:=TAdapterActionName(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTSiteModuleHelper__WebModuleContext(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TSiteModuleHelper(Instance).WebModuleContext);
end;

function __DC__GetTSiteModuleHelper__Request(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TSiteModuleHelper(Instance).Request);
end;

function __DC__GetTSiteModuleHelper__Response(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TSiteModuleHelper(Instance).Response);
end;

function __DC__GetTSiteModuleHelper__Session(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TSiteModuleHelper(Instance).Session);
end;

function __DC__GetTSitePageModuleHelper__DefaultAction(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TSitePageModuleHelper(Instance).DefaultAction);
end;

procedure __DC__SetTSitePageModuleHelper__DefaultAction(Instance : TObject; Params : PVariantArgList);
begin
TSitePageModuleHelper(Instance).DefaultAction:=TAdapterActionName(VarToObject(OleVariant(Params^[0])));
end;

procedure __RegisterProps;
begin
RegisterProperty(TAdapterActionName,'Action',__DC__GetTAdapterActionName__Action,nil);
RegisterProperty(TCustomWebDataModule,'Request',__DC__GetTCustomWebDataModule__Request,nil);
RegisterProperty(TCustomWebDataModule,'Response',__DC__GetTCustomWebDataModule__Response,nil);
RegisterProperty(TCustomWebDataModule,'Session',__DC__GetTCustomWebDataModule__Session,nil);
RegisterProperty(TCustomWebPageModule,'DefaultAction',__DC__GetTCustomWebPageModule__DefaultAction,__DC__SetTCustomWebPageModule__DefaultAction);
RegisterProperty(TSiteModuleHelper,'WebModuleContext',__DC__GetTSiteModuleHelper__WebModuleContext,nil);
RegisterProperty(TSiteModuleHelper,'Request',__DC__GetTSiteModuleHelper__Request,nil);
RegisterProperty(TSiteModuleHelper,'Response',__DC__GetTSiteModuleHelper__Response,nil);
RegisterProperty(TSiteModuleHelper,'Session',__DC__GetTSiteModuleHelper__Session,nil);
RegisterProperty(TSitePageModuleHelper,'DefaultAction',__DC__GetTSitePageModuleHelper__DefaultAction,__DC__SetTSitePageModuleHelper__DefaultAction);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..14] of TClass = (
EWebModuleException,
TAdapterActionName,
TCustomWebAppDataModule,
TCustomWebAppPageModule,
TCustomWebDataModule,
TCustomWebPageModule,
TSiteModuleHelper,
TSitePageModuleHelper,
TWebAppDataModule,
TWebAppPageModule,
TWebAppPageModuleHelper,
TWebDataModule,
TWebNotifyContainer,
TWebPageModule,
TWebPageModuleHelper
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..2] of string = (
'FindNamedModuleVariable'
,'GetModuleVariable'
,'GetModuleVariableCount'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(TComponent),
TypeInfo(string),TypeInfo(TComponent)],Addr(FindNamedModuleVariable),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(TComponent),
TypeInfo(Integer),TypeInfo(TComponent)],Addr(GetModuleVariable),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T2),[
TypeInfo(TComponent),TypeInfo(Integer)],Addr(GetModuleVariableCount),cRegister);

RegisterProc(TAdapterActionName,'Create',mtConstructor,TypeInfo(_T3),[
TypeInfo(TComponent)],Addr(TAdapterActionName.Create),cRegister);

//RegRegisterMethod(TCustomWebDataModule,'GetSiteModuleHelper',TypeInfo(_T4),[TypeInfo(TSiteModuleHelper)], pointer(60));
RegRegisterMethod(TCustomWebDataModule,'GetSiteModuleHelper',TypeInfo(_T4),[TypeInfo(TSiteModuleHelper)],  getVMTProcAddr('TCustomWebDataModule','GetSiteModuleHelper',60));


//RegRegisterMethod(TCustomWebPageModule,'GetSitePageModuleHelper',TypeInfo(_T6),[TypeInfo(TSitePageModuleHelper)], pointer(68));
RegRegisterMethod(TCustomWebPageModule,'GetSitePageModuleHelper',TypeInfo(_T6),[TypeInfo(TSitePageModuleHelper)],  getVMTProcAddr('TCustomWebPageModule','GetSitePageModuleHelper',68));


//RegRegisterMethod(TSiteModuleHelper,'FindNamedVariable',TypeInfo(_T7),[TypeInfo(string),TypeInfo(TComponent)], pointer(0));
RegRegisterMethod(TSiteModuleHelper,'FindNamedVariable',TypeInfo(_T7),[TypeInfo(string),TypeInfo(TComponent)],  getVMTProcAddr('TSiteModuleHelper','FindNamedVariable',0));


//RegisterProc(TSiteModuleHelper,'Create',mtConstructor,TypeInfo(_T8),[TypeInfo(TComponent)], pointer(4),cRegister);
RegisterProc(TSiteModuleHelper,'Create',mtConstructor,TypeInfo(_T8),[TypeInfo(TComponent)],  getVMTProcAddr('TSiteModuleHelper','Create',4),cRegister);


RegRegisterMethod(TSiteModuleHelper,'Notification',TypeInfo(_T9),[
TypeInfo(TComponent),
TypeInfo(TOperation)],Addr(TSiteModuleHelper.Notification));

//RegRegisterMethod(TSitePageModuleHelper,'ImplDispatchPage',TypeInfo(_T10),[TypeInfo(string),TypeInfo(TWebResponse),TypeInfo(Boolean)], pointer(8));
RegRegisterMethod(TSitePageModuleHelper,'ImplDispatchPage',TypeInfo(_T10),[TypeInfo(string),TypeInfo(TWebResponse),TypeInfo(Boolean)],  getVMTProcAddr('TSitePageModuleHelper','ImplDispatchPage',8));


//RegRegisterMethod(TSitePageModuleHelper,'ImplIncludePage',TypeInfo(_T11),[TypeInfo(string),TypeInfo(Boolean),TypeInfo(TStream)], pointer(12));
RegRegisterMethod(TSitePageModuleHelper,'ImplIncludePage',TypeInfo(_T11),[TypeInfo(string),TypeInfo(Boolean),TypeInfo(TStream)],  getVMTProcAddr('TSitePageModuleHelper','ImplIncludePage',12));


//RegRegisterMethod(TSitePageModuleHelper,'ImplRedirectToPage',TypeInfo(_T12),[TypeInfo(string),TypeInfo(TStrings),TypeInfo(TWebResponse),TypeInfo(Boolean)], pointer(16));
RegRegisterMethod(TSitePageModuleHelper,'ImplRedirectToPage',TypeInfo(_T12),[TypeInfo(string),TypeInfo(TStrings),TypeInfo(TWebResponse),TypeInfo(Boolean)],  getVMTProcAddr('TSitePageModuleHelper','ImplRedirectToPage',16));


//RegRegisterMethod(TSitePageModuleHelper,'ImplSetWebContentOptions',TypeInfo(_T13),[TypeInfo(TWebContentOptions)], pointer(20));
RegRegisterMethod(TSitePageModuleHelper,'ImplSetWebContentOptions',TypeInfo(_T13),[TypeInfo(TWebContentOptions)],  getVMTProcAddr('TSitePageModuleHelper','ImplSetWebContentOptions',20));


RegisterProc(TWebNotifyContainer,'Create',mtConstructor,TypeInfo(_T15),NoParams,Addr(TWebNotifyContainer.Create),cRegister);

RegRegisterMethod(TWebNotifyContainer,'NotifyWebActivate',TypeInfo(_T16),NoParams,Addr(TWebNotifyContainer.NotifyWebActivate));

RegRegisterMethod(TWebNotifyContainer,'NotifyWebDeactivate',TypeInfo(_T17),NoParams,Addr(TWebNotifyContainer.NotifyWebDeactivate));

RegRegisterMethod(TWebNotifyContainer,'Add',TypeInfo(_T18),[
TypeInfo(TComponent)],Addr(TWebNotifyContainer.Add));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegRegisterMethod(TCustomWebDataModule,'GetWebSnapObjClass',TypeInfo(_T5),[TypeInfo(TObjectScripterClass)], pointer(64))}

{RegRegisterMethod(TSitePageModuleHelper,'GetPageProducer',TypeInfo(_T14),[TypeInfo(IProduceContent)], pointer(24))}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
