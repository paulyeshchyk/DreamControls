{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit ACLAPI_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  Types,
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  AccCtrl,
  AclAPI;
function ConvertACLToVariant(var R : ACL) : OleVariant;
function ConvertVariantToACL(const V : OleVariant) : ACL;
function ConvertTRUSTEE_ToVariant(var R : TRUSTEE_) : OleVariant;
function ConvertVariantToTRUSTEE_(const V : OleVariant) : TRUSTEE_;
function ConvertTRUSTEE_AToVariant(var R : TRUSTEE_A) : OleVariant;
function ConvertVariantToTRUSTEE_A(const V : OleVariant) : TRUSTEE_A;
function ConvertTRUSTEE_WToVariant(var R : TRUSTEE_W) : OleVariant;
function ConvertVariantToTRUSTEE_W(const V : OleVariant) : TRUSTEE_W;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __ACL__Wrapper = class(TDCRecordWrapper)
private
fR : ACL;
public
function GetRecordPtr : pointer; override;
published
procedure setAclRevision(const val : Byte);
function getAclRevision : Byte;
property AclRevision : Byte read getAclRevision write setAclRevision;
procedure setSbz1(const val : Byte);
function getSbz1 : Byte;
property Sbz1 : Byte read getSbz1 write setSbz1;
procedure setAclSize(const val : Word);
function getAclSize : Word;
property AclSize : Word read getAclSize write setAclSize;
procedure setAceCount(const val : Word);
function getAceCount : Word;
property AceCount : Word read getAceCount write setAceCount;
procedure setSbz2(const val : Word);
function getSbz2 : Word;
property Sbz2 : Word read getSbz2 write setSbz2;
end;
type __TRUSTEE___Wrapper = class(TDCRecordWrapper)
private
fR : TRUSTEE_;
public
function GetRecordPtr : pointer; override;
published
procedure setMultipleTrusteeOperation(const val : MULTIPLE_TRUSTEE_OPERATION);
function getMultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION;
property MultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION read getMultipleTrusteeOperation write setMultipleTrusteeOperation;
procedure setTrusteeForm(const val : TRUSTEE_FORM);
function getTrusteeForm : TRUSTEE_FORM;
property TrusteeForm : TRUSTEE_FORM read getTrusteeForm write setTrusteeForm;
procedure setTrusteeType(const val : TRUSTEE_TYPE);
function getTrusteeType : TRUSTEE_TYPE;
property TrusteeType : TRUSTEE_TYPE read getTrusteeType write setTrusteeType;
end;
type __TRUSTEE_A__Wrapper = class(TDCRecordWrapper)
private
fR : TRUSTEE_A;
public
function GetRecordPtr : pointer; override;
published
procedure setMultipleTrusteeOperation(const val : MULTIPLE_TRUSTEE_OPERATION);
function getMultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION;
property MultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION read getMultipleTrusteeOperation write setMultipleTrusteeOperation;
procedure setTrusteeForm(const val : TRUSTEE_FORM);
function getTrusteeForm : TRUSTEE_FORM;
property TrusteeForm : TRUSTEE_FORM read getTrusteeForm write setTrusteeForm;
procedure setTrusteeType(const val : TRUSTEE_TYPE);
function getTrusteeType : TRUSTEE_TYPE;
property TrusteeType : TRUSTEE_TYPE read getTrusteeType write setTrusteeType;
end;
type __TRUSTEE_W__Wrapper = class(TDCRecordWrapper)
private
fR : TRUSTEE_W;
public
function GetRecordPtr : pointer; override;
published
procedure setMultipleTrusteeOperation(const val : MULTIPLE_TRUSTEE_OPERATION);
function getMultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION;
property MultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION read getMultipleTrusteeOperation write setMultipleTrusteeOperation;
procedure setTrusteeForm(const val : TRUSTEE_FORM);
function getTrusteeForm : TRUSTEE_FORM;
property TrusteeForm : TRUSTEE_FORM read getTrusteeForm write setTrusteeForm;
procedure setTrusteeType(const val : TRUSTEE_TYPE);
function getTrusteeType : TRUSTEE_TYPE;
property TrusteeType : TRUSTEE_TYPE read getTrusteeType write setTrusteeType;
end;
type
{_T0 = function (p0 : ULONG;
p1 : PEXPLICIT_ACCESS_;
p2 : PACL;
var p3 : PACL): DWORD of object;}

{_T1 = function (p0 : ULONG;
p1 : PEXPLICIT_ACCESS_A;
p2 : PACL;
var p3 : PACL): DWORD of object;}

{_T2 = function (p0 : ULONG;
p1 : PEXPLICIT_ACCESS_W;
p2 : PACL;
var p3 : PACL): DWORD of object;}

_T6 = function (const p0 : IDispatch;
const p1 : IDispatch;
var p2 : ACCESS_MASK): DWORD of object;

_T7 = _T6;

_T8 = _T6;

_T9 = function (const p0 : IDispatch;
const p1 : IDispatch;
var p2 : ACCESS_MASK;
var p3 : ACCESS_MASK): DWORD of object;

_T10 = _T9;

_T11 = _T9;

{_T12 = function (p0 : PAnsiChar;
p1 : SE_OBJECT_TYPE;
p2 : SECURITY_INFORMATION;
p3 : PPSID;
p4 : PPSID;
p5 : PACL;
p6 : PACL;
var p7 : PSECURITY_DESCRIPTOR): DWORD of object;}

{_T13 = function (p0 : PAnsiChar;
p1 : SE_OBJECT_TYPE;
p2 : SECURITY_INFORMATION;
p3 : PPSID;
p4 : PPSID;
p5 : PACL;
p6 : PACL;
var p7 : PSECURITY_DESCRIPTOR): DWORD of object;}

{_T14 = function (p0 : PAnsiChar;
p1 : SE_OBJECT_TYPE;
p2 : SECURITY_INFORMATION;
p3 : PPSID;
p4 : PPSID;
p5 : PACL;
p6 : PACL;
var p7 : PSECURITY_DESCRIPTOR): DWORD of object;}

{_T15 = function (p0 : THandle;
p1 : SE_OBJECT_TYPE;
p2 : SECURITY_INFORMATION;
p3 : PPSID;
p4 : PPSID;
p5 : PACL;
p6 : PACL;
var p7 : PPSECURITY_DESCRIPTOR): DWORD of object;}

{_T16 = function (p0 : PAnsiChar;
p1 : SE_OBJECT_TYPE;
p2 : SECURITY_INFORMATION;
p3 : PPSID;
p4 : PPSID;
p5 : PACL;
p6 : PACL): DWORD of object;}

{_T17 = function (p0 : PAnsiChar;
p1 : SE_OBJECT_TYPE;
p2 : SECURITY_INFORMATION;
p3 : PPSID;
p4 : PPSID;
p5 : PACL;
p6 : PACL): DWORD of object;}

{_T18 = function (p0 : PAnsiChar;
p1 : SE_OBJECT_TYPE;
p2 : SECURITY_INFORMATION;
p3 : PPSID;
p4 : PPSID;
p5 : PACL;
p6 : PACL): DWORD of object;}

{_T19 = function (p0 : THandle;
p1 : SE_OBJECT_TYPE;
p2 : SECURITY_INFORMATION;
p3 : PPSID;
p4 : PPSID;
p5 : PACL;
p6 : PACL): DWORD of object;}

{_T26 = procedure (p0 : PEXPLICIT_ACCESS_;
p1 : PAnsiChar;
p2 : DWORD;
p3 : ACCESS_MODE;
p4 : DWORD) of object;}

{_T27 = procedure (p0 : PEXPLICIT_ACCESS_A;
p1 : PAnsiChar;
p2 : DWORD;
p3 : ACCESS_MODE;
p4 : DWORD) of object;}

{_T28 = procedure (p0 : PEXPLICIT_ACCESS_W;
p1 : PAnsiChar;
p2 : DWORD;
p3 : ACCESS_MODE;
p4 : DWORD) of object;}

{_T29 = procedure (p0 : PEXPLICIT_ACCESS_;
p1 : PAnsiChar;
p2 : PTRUSTEE_;
p3 : DWORD;
p4 : ACCESS_MODE;
p5 : DWORD) of object;}

{_T30 = procedure (p0 : PEXPLICIT_ACCESS_A;
p1 : PAnsiChar;
p2 : PTRUSTEE_A;
p3 : DWORD;
p4 : ACCESS_MODE;
p5 : DWORD) of object;}

{_T31 = procedure (p0 : PEXPLICIT_ACCESS_W;
p1 : PAnsiChar;
p2 : PTRUSTEE_W;
p3 : DWORD;
p4 : ACCESS_MODE;
p5 : DWORD) of object;}

{_T32 = procedure (p0 : PTRUSTEE_;
p1 : PAnsiChar) of object;}

{_T33 = procedure (p0 : PTRUSTEE_A;
p1 : PAnsiChar) of object;}

{_T34 = procedure (p0 : PTRUSTEE_W;
p1 : PAnsiChar) of object;}

{_T35 = procedure (p0 : PTRUSTEE_;
p1 : PTRUSTEE_) of object;}

{_T36 = procedure (p0 : PTRUSTEE_A;
p1 : PTRUSTEE_A) of object;}

{_T37 = procedure (p0 : PTRUSTEE_W;
p1 : PTRUSTEE_W) of object;}

{_T38 = procedure (p0 : PTRUSTEE_;
p1 : PSID) of object;}

{_T39 = procedure (p0 : PTRUSTEE_A;
p1 : PSID) of object;}

{_T40 = procedure (p0 : PTRUSTEE_W;
p1 : PSID) of object;}

_T41 = function (const p0 : IDispatch): PAnsiChar of object;

_T42 = _T41;

_T43 = _T41;

_T44 = function (const p0 : IDispatch): TRUSTEE_TYPE of object;

_T45 = _T44;

_T46 = _T44;

_T47 = function (const p0 : IDispatch): TRUSTEE_FORM of object;

_T48 = _T47;

_T49 = _T47;

{_T50 = function (p0 : PTRUSTEE_): MULTIPLE_TRUSTEE_OPERATION of object;}

{_T51 = function (p0 : PTRUSTEE_A): MULTIPLE_TRUSTEE_OPERATION of object;}

{_T52 = function (p0 : PTRUSTEE_W): MULTIPLE_TRUSTEE_OPERATION of object;}

{_T53 = function (p0 : PTRUSTEE_): PTRUSTEE_ of object;}

{_T54 = function (p0 : PTRUSTEE_A): PTRUSTEE_A of object;}

{_T55 = function (p0 : PTRUSTEE_W): PTRUSTEE_W of object;}

function __ACL__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ACL__Wrapper.setAclRevision(const val : Byte);
begin
ACL(GetRecordPtr^).AclRevision := val;
end;
function __ACL__Wrapper.getAclRevision : Byte;
begin
result := ACL(GetRecordPtr^).AclRevision;
end;
procedure __ACL__Wrapper.setSbz1(const val : Byte);
begin
ACL(GetRecordPtr^).Sbz1 := val;
end;
function __ACL__Wrapper.getSbz1 : Byte;
begin
result := ACL(GetRecordPtr^).Sbz1;
end;
procedure __ACL__Wrapper.setAclSize(const val : Word);
begin
ACL(GetRecordPtr^).AclSize := val;
end;
function __ACL__Wrapper.getAclSize : Word;
begin
result := ACL(GetRecordPtr^).AclSize;
end;
procedure __ACL__Wrapper.setAceCount(const val : Word);
begin
ACL(GetRecordPtr^).AceCount := val;
end;
function __ACL__Wrapper.getAceCount : Word;
begin
result := ACL(GetRecordPtr^).AceCount;
end;
procedure __ACL__Wrapper.setSbz2(const val : Word);
begin
ACL(GetRecordPtr^).Sbz2 := val;
end;
function __ACL__Wrapper.getSbz2 : Word;
begin
result := ACL(GetRecordPtr^).Sbz2;
end;
function __TRUSTEE___Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRUSTEE___Wrapper.setMultipleTrusteeOperation(const val : MULTIPLE_TRUSTEE_OPERATION);
begin
TRUSTEE_(GetRecordPtr^).MultipleTrusteeOperation := val;
end;
function __TRUSTEE___Wrapper.getMultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION;
begin
result := TRUSTEE_(GetRecordPtr^).MultipleTrusteeOperation;
end;
procedure __TRUSTEE___Wrapper.setTrusteeForm(const val : TRUSTEE_FORM);
begin
TRUSTEE_(GetRecordPtr^).TrusteeForm := val;
end;
function __TRUSTEE___Wrapper.getTrusteeForm : TRUSTEE_FORM;
begin
result := TRUSTEE_(GetRecordPtr^).TrusteeForm;
end;
procedure __TRUSTEE___Wrapper.setTrusteeType(const val : TRUSTEE_TYPE);
begin
TRUSTEE_(GetRecordPtr^).TrusteeType := val;
end;
function __TRUSTEE___Wrapper.getTrusteeType : TRUSTEE_TYPE;
begin
result := TRUSTEE_(GetRecordPtr^).TrusteeType;
end;
function __TRUSTEE_A__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRUSTEE_A__Wrapper.setMultipleTrusteeOperation(const val : MULTIPLE_TRUSTEE_OPERATION);
begin
TRUSTEE_A(GetRecordPtr^).MultipleTrusteeOperation := val;
end;
function __TRUSTEE_A__Wrapper.getMultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION;
begin
result := TRUSTEE_A(GetRecordPtr^).MultipleTrusteeOperation;
end;
procedure __TRUSTEE_A__Wrapper.setTrusteeForm(const val : TRUSTEE_FORM);
begin
TRUSTEE_A(GetRecordPtr^).TrusteeForm := val;
end;
function __TRUSTEE_A__Wrapper.getTrusteeForm : TRUSTEE_FORM;
begin
result := TRUSTEE_A(GetRecordPtr^).TrusteeForm;
end;
procedure __TRUSTEE_A__Wrapper.setTrusteeType(const val : TRUSTEE_TYPE);
begin
TRUSTEE_A(GetRecordPtr^).TrusteeType := val;
end;
function __TRUSTEE_A__Wrapper.getTrusteeType : TRUSTEE_TYPE;
begin
result := TRUSTEE_A(GetRecordPtr^).TrusteeType;
end;
function __TRUSTEE_W__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRUSTEE_W__Wrapper.setMultipleTrusteeOperation(const val : MULTIPLE_TRUSTEE_OPERATION);
begin
TRUSTEE_W(GetRecordPtr^).MultipleTrusteeOperation := val;
end;
function __TRUSTEE_W__Wrapper.getMultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION;
begin
result := TRUSTEE_W(GetRecordPtr^).MultipleTrusteeOperation;
end;
procedure __TRUSTEE_W__Wrapper.setTrusteeForm(const val : TRUSTEE_FORM);
begin
TRUSTEE_W(GetRecordPtr^).TrusteeForm := val;
end;
function __TRUSTEE_W__Wrapper.getTrusteeForm : TRUSTEE_FORM;
begin
result := TRUSTEE_W(GetRecordPtr^).TrusteeForm;
end;
procedure __TRUSTEE_W__Wrapper.setTrusteeType(const val : TRUSTEE_TYPE);
begin
TRUSTEE_W(GetRecordPtr^).TrusteeType := val;
end;
function __TRUSTEE_W__Wrapper.getTrusteeType : TRUSTEE_TYPE;
begin
result := TRUSTEE_W(GetRecordPtr^).TrusteeType;
end;
function ____GetEffectiveRightsFromAcl__Wrapper(const p0 : IDispatch;
const p1 : IDispatch;
var p2 : ACCESS_MASK): DWORD;
var
__p0 : ^ACL;
__i0 : IDispatch;
__p1 : ^TRUSTEE_;
__i1 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := GetEffectiveRightsFromAcl(__p0^,__p1^,p2);
end;

function ____GetEffectiveRightsFromAclA__Wrapper(const p0 : IDispatch;
const p1 : IDispatch;
var p2 : ACCESS_MASK): DWORD;
var
__p0 : ^ACL;
__i0 : IDispatch;
__p1 : ^TRUSTEE_A;
__i1 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := GetEffectiveRightsFromAclA(__p0^,__p1^,p2);
end;

function ____GetEffectiveRightsFromAclW__Wrapper(const p0 : IDispatch;
const p1 : IDispatch;
var p2 : ACCESS_MASK): DWORD;
var
__p0 : ^ACL;
__i0 : IDispatch;
__p1 : ^TRUSTEE_W;
__i1 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := GetEffectiveRightsFromAclW(__p0^,__p1^,p2);
end;

function ____GetAuditedPermissionsFromAcl__Wrapper(const p0 : IDispatch;
const p1 : IDispatch;
var p2 : ACCESS_MASK;
var p3 : ACCESS_MASK): DWORD;
var
__p0 : ^ACL;
__i0 : IDispatch;
__p1 : ^TRUSTEE_;
__i1 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := GetAuditedPermissionsFromAcl(__p0^,__p1^,p2,p3);
end;

function ____GetAuditedPermissionsFromAclA__Wrapper(const p0 : IDispatch;
const p1 : IDispatch;
var p2 : ACCESS_MASK;
var p3 : ACCESS_MASK): DWORD;
var
__p0 : ^ACL;
__i0 : IDispatch;
__p1 : ^TRUSTEE_A;
__i1 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := GetAuditedPermissionsFromAclA(__p0^,__p1^,p2,p3);
end;

function ____GetAuditedPermissionsFromAclW__Wrapper(const p0 : IDispatch;
const p1 : IDispatch;
var p2 : ACCESS_MASK;
var p3 : ACCESS_MASK): DWORD;
var
__p0 : ^ACL;
__i0 : IDispatch;
__p1 : ^TRUSTEE_W;
__i1 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := GetAuditedPermissionsFromAclW(__p0^,__p1^,p2,p3);
end;

function ____GetTrusteeName__Wrapper(const p0 : IDispatch): PAnsiChar;
var
__p0 : ^TRUSTEE_;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := GetTrusteeName(__p0^);
end;

function ____GetTrusteeNameA__Wrapper(const p0 : IDispatch): PAnsiChar;
var
__p0 : ^TRUSTEE_A;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := GetTrusteeNameA(__p0^);
end;

function ____GetTrusteeNameW__Wrapper(const p0 : IDispatch): PAnsiChar;
var
__p0 : ^TRUSTEE_W;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := GetTrusteeNameW(__p0^);
end;

function ____GetTrusteeType__Wrapper(const p0 : IDispatch): TRUSTEE_TYPE;
var
__p0 : ^TRUSTEE_;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := GetTrusteeType(__p0^);
end;

function ____GetTrusteeTypeA__Wrapper(const p0 : IDispatch): TRUSTEE_TYPE;
var
__p0 : ^TRUSTEE_A;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := GetTrusteeTypeA(__p0^);
end;

function ____GetTrusteeTypeW__Wrapper(const p0 : IDispatch): TRUSTEE_TYPE;
var
__p0 : ^TRUSTEE_W;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := GetTrusteeTypeW(__p0^);
end;

function ____GetTrusteeForm__Wrapper(const p0 : IDispatch): TRUSTEE_FORM;
var
__p0 : ^TRUSTEE_;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := GetTrusteeForm(__p0^);
end;

function ____GetTrusteeFormA__Wrapper(const p0 : IDispatch): TRUSTEE_FORM;
var
__p0 : ^TRUSTEE_A;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := GetTrusteeFormA(__p0^);
end;

function ____GetTrusteeFormW__Wrapper(const p0 : IDispatch): TRUSTEE_FORM;
var
__p0 : ^TRUSTEE_W;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := GetTrusteeFormW(__p0^);
end;


type __ACL__Wrapper__ = class(__ACL__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ACL__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertACLToVariant(var R : ACL) : OleVariant;
var
__rw : __ACL__Wrapper__;
begin
__rw := __ACL__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToACL(const V : OleVariant) : ACL;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ACL((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRUSTEE___Wrapper__ = class(__TRUSTEE___Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRUSTEE___Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRUSTEE_ToVariant(var R : TRUSTEE_) : OleVariant;
var
__rw : __TRUSTEE___Wrapper__;
begin
__rw := __TRUSTEE___Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRUSTEE_(const V : OleVariant) : TRUSTEE_;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRUSTEE_((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRUSTEE_A__Wrapper__ = class(__TRUSTEE_A__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRUSTEE_A__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRUSTEE_AToVariant(var R : TRUSTEE_A) : OleVariant;
var
__rw : __TRUSTEE_A__Wrapper__;
begin
__rw := __TRUSTEE_A__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRUSTEE_A(const V : OleVariant) : TRUSTEE_A;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRUSTEE_A((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRUSTEE_W__Wrapper__ = class(__TRUSTEE_W__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRUSTEE_W__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRUSTEE_WToVariant(var R : TRUSTEE_W) : OleVariant;
var
__rw : __TRUSTEE_W__Wrapper__;
begin
__rw := __TRUSTEE_W__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRUSTEE_W(const V : OleVariant) : TRUSTEE_W;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRUSTEE_W((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..14] of string = (
'GetEffectiveRightsFromAcl'
,'GetEffectiveRightsFromAclA'
,'GetEffectiveRightsFromAclW'
,'GetAuditedPermissionsFromAcl'
,'GetAuditedPermissionsFromAclA'
,'GetAuditedPermissionsFromAclW'
,'GetTrusteeName'
,'GetTrusteeNameA'
,'GetTrusteeNameW'
,'GetTrusteeType'
,'GetTrusteeTypeA'
,'GetTrusteeTypeW'
,'GetTrusteeForm'
,'GetTrusteeFormA'
,'GetTrusteeFormW'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T6),[
TypeInfo(IDispatch),
TypeInfo(IDispatch),
TypeInfo(ACCESS_MASK),TypeInfo(DWORD)],Addr(____GetEffectiveRightsFromAcl__Wrapper),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T7),[
TypeInfo(IDispatch),
TypeInfo(IDispatch),
TypeInfo(ACCESS_MASK),TypeInfo(DWORD)],Addr(____GetEffectiveRightsFromAclA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T8),[
TypeInfo(IDispatch),
TypeInfo(IDispatch),
TypeInfo(ACCESS_MASK),TypeInfo(DWORD)],Addr(____GetEffectiveRightsFromAclW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T9),[
TypeInfo(IDispatch),
TypeInfo(IDispatch),
TypeInfo(ACCESS_MASK),
TypeInfo(ACCESS_MASK),TypeInfo(DWORD)],Addr(____GetAuditedPermissionsFromAcl__Wrapper),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T10),[
TypeInfo(IDispatch),
TypeInfo(IDispatch),
TypeInfo(ACCESS_MASK),
TypeInfo(ACCESS_MASK),TypeInfo(DWORD)],Addr(____GetAuditedPermissionsFromAclA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T11),[
TypeInfo(IDispatch),
TypeInfo(IDispatch),
TypeInfo(ACCESS_MASK),
TypeInfo(ACCESS_MASK),TypeInfo(DWORD)],Addr(____GetAuditedPermissionsFromAclW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T41),[
TypeInfo(IDispatch),TypeInfoPChar],Addr(____GetTrusteeName__Wrapper),cRegister);

RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T42),[
TypeInfo(IDispatch),TypeInfoPChar],Addr(____GetTrusteeNameA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[8],mtProc,TypeInfo(_T43),[
TypeInfo(IDispatch),TypeInfoPChar],Addr(____GetTrusteeNameW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[9],mtProc,TypeInfo(_T44),[
TypeInfo(IDispatch),TypeInfo(TRUSTEE_TYPE)],Addr(____GetTrusteeType__Wrapper),cRegister);

RegisterProc(nil,MethodNames[10],mtProc,TypeInfo(_T45),[
TypeInfo(IDispatch),TypeInfo(TRUSTEE_TYPE)],Addr(____GetTrusteeTypeA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[11],mtProc,TypeInfo(_T46),[
TypeInfo(IDispatch),TypeInfo(TRUSTEE_TYPE)],Addr(____GetTrusteeTypeW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[12],mtProc,TypeInfo(_T47),[
TypeInfo(IDispatch),TypeInfo(TRUSTEE_FORM)],Addr(____GetTrusteeForm__Wrapper),cRegister);

RegisterProc(nil,MethodNames[13],mtProc,TypeInfo(_T48),[
TypeInfo(IDispatch),TypeInfo(TRUSTEE_FORM)],Addr(____GetTrusteeFormA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[14],mtProc,TypeInfo(_T49),[
TypeInfo(IDispatch),TypeInfo(TRUSTEE_FORM)],Addr(____GetTrusteeFormW__Wrapper),cRegister);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'SetEntriesInAcl',mtProc,TypeInfo(_T0),[
TypeInfo(ULONG),
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,TypeInfo(DWORD)],Addr(SetEntriesInAcl),cStdCall)}

{RegisterProc(nil,'SetEntriesInAclA',mtProc,TypeInfo(_T1),[
TypeInfo(ULONG),
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,TypeInfo(DWORD)],Addr(SetEntriesInAclA),cStdCall)}

{RegisterProc(nil,'SetEntriesInAclW',mtProc,TypeInfo(_T2),[
TypeInfo(ULONG),
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,TypeInfo(DWORD)],Addr(SetEntriesInAclW),cStdCall)}

{RegisterProc(nil,'GetNamedSecurityInfo',mtProc,TypeInfo(_T12),[
TypeInfoPChar,
TypeInfo(SE_OBJECT_TYPE),
TypeInfo(SECURITY_INFORMATION),
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,TypeInfo(DWORD)],Addr(GetNamedSecurityInfo),cStdCall)}

{RegisterProc(nil,'GetNamedSecurityInfoA',mtProc,TypeInfo(_T13),[
TypeInfoPChar,
TypeInfo(SE_OBJECT_TYPE),
TypeInfo(SECURITY_INFORMATION),
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,TypeInfo(DWORD)],Addr(GetNamedSecurityInfoA),cStdCall)}

{RegisterProc(nil,'GetNamedSecurityInfoW',mtProc,TypeInfo(_T14),[
TypeInfoPChar,
TypeInfo(SE_OBJECT_TYPE),
TypeInfo(SECURITY_INFORMATION),
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,TypeInfo(DWORD)],Addr(GetNamedSecurityInfoW),cStdCall)}

{RegisterProc(nil,'GetSecurityInfo',mtProc,TypeInfo(_T15),[
TypeInfo(THandle),
TypeInfo(SE_OBJECT_TYPE),
TypeInfo(SECURITY_INFORMATION),
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,TypeInfo(DWORD)],Addr(GetSecurityInfo),cStdCall)}

{RegisterProc(nil,'SetNamedSecurityInfo',mtProc,TypeInfo(_T16),[
TypeInfoPChar,
TypeInfo(SE_OBJECT_TYPE),
TypeInfo(SECURITY_INFORMATION),
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,TypeInfo(DWORD)],Addr(SetNamedSecurityInfo),cStdCall)}

{RegisterProc(nil,'SetNamedSecurityInfoA',mtProc,TypeInfo(_T17),[
TypeInfoPChar,
TypeInfo(SE_OBJECT_TYPE),
TypeInfo(SECURITY_INFORMATION),
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,TypeInfo(DWORD)],Addr(SetNamedSecurityInfoA),cStdCall)}

{RegisterProc(nil,'SetNamedSecurityInfoW',mtProc,TypeInfo(_T18),[
TypeInfoPChar,
TypeInfo(SE_OBJECT_TYPE),
TypeInfo(SECURITY_INFORMATION),
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,TypeInfo(DWORD)],Addr(SetNamedSecurityInfoW),cStdCall)}

{RegisterProc(nil,'SetSecurityInfo',mtProc,TypeInfo(_T19),[
TypeInfo(THandle),
TypeInfo(SE_OBJECT_TYPE),
TypeInfo(SECURITY_INFORMATION),
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,TypeInfo(DWORD)],Addr(SetSecurityInfo),cStdCall)}

{RegisterProc(nil,'BuildExplicitAccessWithName',mtProc,TypeInfo(_T26),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfo(DWORD),
TypeInfo(ACCESS_MODE),
TypeInfo(DWORD)],Addr(BuildExplicitAccessWithName),cStdCall)}

{RegisterProc(nil,'BuildExplicitAccessWithNameA',mtProc,TypeInfo(_T27),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfo(DWORD),
TypeInfo(ACCESS_MODE),
TypeInfo(DWORD)],Addr(BuildExplicitAccessWithNameA),cStdCall)}

{RegisterProc(nil,'BuildExplicitAccessWithNameW',mtProc,TypeInfo(_T28),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfo(DWORD),
TypeInfo(ACCESS_MODE),
TypeInfo(DWORD)],Addr(BuildExplicitAccessWithNameW),cStdCall)}

{RegisterProc(nil,'BuildImpersonateExplicitAccessWithName',mtProc,TypeInfo(_T29),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfoPointer,
TypeInfo(DWORD),
TypeInfo(ACCESS_MODE),
TypeInfo(DWORD)],Addr(BuildImpersonateExplicitAccessWithName),cStdCall)}

{RegisterProc(nil,'BuildImpersonateExplicitAccessWithNameA',mtProc,TypeInfo(_T30),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfoPointer,
TypeInfo(DWORD),
TypeInfo(ACCESS_MODE),
TypeInfo(DWORD)],Addr(BuildImpersonateExplicitAccessWithNameA),cStdCall)}

{RegisterProc(nil,'BuildImpersonateExplicitAccessWithNameW',mtProc,TypeInfo(_T31),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfoPointer,
TypeInfo(DWORD),
TypeInfo(ACCESS_MODE),
TypeInfo(DWORD)],Addr(BuildImpersonateExplicitAccessWithNameW),cStdCall)}

{RegisterProc(nil,'BuildTrusteeWithName',mtProc,TypeInfo(_T32),[
TypeInfoPointer,
TypeInfoPChar],Addr(BuildTrusteeWithName),cStdCall)}

{RegisterProc(nil,'BuildTrusteeWithNameA',mtProc,TypeInfo(_T33),[
TypeInfoPointer,
TypeInfoPChar],Addr(BuildTrusteeWithNameA),cStdCall)}

{RegisterProc(nil,'BuildTrusteeWithNameW',mtProc,TypeInfo(_T34),[
TypeInfoPointer,
TypeInfoPChar],Addr(BuildTrusteeWithNameW),cStdCall)}

{RegisterProc(nil,'BuildImpersonateTrustee',mtProc,TypeInfo(_T35),[
TypeInfoPointer,
TypeInfoPointer],Addr(BuildImpersonateTrustee),cStdCall)}

{RegisterProc(nil,'BuildImpersonateTrusteeA',mtProc,TypeInfo(_T36),[
TypeInfoPointer,
TypeInfoPointer],Addr(BuildImpersonateTrusteeA),cStdCall)}

{RegisterProc(nil,'BuildImpersonateTrusteeW',mtProc,TypeInfo(_T37),[
TypeInfoPointer,
TypeInfoPointer],Addr(BuildImpersonateTrusteeW),cStdCall)}

{RegisterProc(nil,'BuildTrusteeWithSid',mtProc,TypeInfo(_T38),[
TypeInfoPointer,
TypeInfoPointer],Addr(BuildTrusteeWithSid),cStdCall)}

{RegisterProc(nil,'BuildTrusteeWithSidA',mtProc,TypeInfo(_T39),[
TypeInfoPointer,
TypeInfoPointer],Addr(BuildTrusteeWithSidA),cStdCall)}

{RegisterProc(nil,'BuildTrusteeWithSidW',mtProc,TypeInfo(_T40),[
TypeInfoPointer,
TypeInfoPointer],Addr(BuildTrusteeWithSidW),cStdCall)}

{RegisterProc(nil,'GetMultipleTrusteeOperation',mtProc,TypeInfo(_T50),[
TypeInfoPointer,TypeInfo(MULTIPLE_TRUSTEE_OPERATION)],Addr(GetMultipleTrusteeOperation),cStdCall)}

{RegisterProc(nil,'GetMultipleTrusteeOperationA',mtProc,TypeInfo(_T51),[
TypeInfoPointer,TypeInfo(MULTIPLE_TRUSTEE_OPERATION)],Addr(GetMultipleTrusteeOperationA),cStdCall)}

{RegisterProc(nil,'GetMultipleTrusteeOperationW',mtProc,TypeInfo(_T52),[
TypeInfoPointer,TypeInfo(MULTIPLE_TRUSTEE_OPERATION)],Addr(GetMultipleTrusteeOperationW),cStdCall)}

{RegisterProc(nil,'GetMultipleTrustee',mtProc,TypeInfo(_T53),[
TypeInfoPointer,TypeInfoPointer],Addr(GetMultipleTrustee),cStdCall)}

{RegisterProc(nil,'GetMultipleTrusteeA',mtProc,TypeInfo(_T54),[
TypeInfoPointer,TypeInfoPointer],Addr(GetMultipleTrusteeA),cStdCall)}

{RegisterProc(nil,'GetMultipleTrusteeW',mtProc,TypeInfo(_T55),[
TypeInfoPointer,TypeInfoPointer],Addr(GetMultipleTrusteeW),cStdCall)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
