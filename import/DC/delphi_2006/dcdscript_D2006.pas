{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit dcdscript_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  Windows,
  activex,
  dcsystem,
  dcdreamlib,
  Sysutils,
  Classes,
  extctrls,
  dcscript,
  dcDSLib,
  Variants,
  dcdscript;
function ConvertTLineDebugInfoToVariant(var R : TLineDebugInfo) : OleVariant;
function ConvertVariantToTLineDebugInfo(const V : OleVariant) : TLineDebugInfo;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TLineDebugInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TLineDebugInfo;
public
function GetRecordPtr : pointer; override;
published
end;
type
_T0 = procedure (const p0 : TDSUnit;
const p1 : Integer) of object;

_T1 = function : Boolean of object;

_T2 = function (p0 : TDSUnit;
p1 : Integer;
p2 : Boolean): Boolean of object;

_T3 = function (p0 : TDSUnit;
p1 : Integer): Boolean of object;

_T4 = procedure (p0 : TDSUnit) of object;

_T5 = _T4;

_T6 = procedure (p0 : Exception;
p1 : TDSUnit;
p2 : Integer) of object;

_T7 = procedure  of object;

_T8 = _T7;

_T9 = procedure (p0 : TBreakResumeType) of object;

_T10 = _T7;

_T11 = procedure (const p0 : Integer;
const p1 : Integer) of object;

_T12 = _T7;

_T13 = _T7;

_T14 = _T7;

_T15 = function : string of object;

_T16 = _T15;

_T17 = procedure (const p0 : Integer;
const p1 : string;
var p2 : string;
var p3 : Boolean) of object;

_T18 = function (p0 : Integer): string of object;

_T19 = _T18;

_T20 = _T7;

_T21 = _T7;

_T22 = _T7;

_T23 = _T7;

_T24 = _T7;

_T25 = function (const p0 : Integer;
const p1 : Integer;
const p2 : Boolean): Integer of object;

_T26 = function (p0 : Integer): Boolean of object;

_T27 = function : Integer of object;

_T28 = procedure (p0 : Integer;
var p1 : Integer;
var p2 : Integer;
var p3 : string) of object;

_T29 = procedure (const p0 : Integer;
p1 : TStrings) of object;

_T30 = _T7;

_T31 = function (const p0 : string): TDSUnit of object;

_T32 = function (const p0 : string): Boolean of object;

_T33 = procedure (p0 : TObject) of object;

_T34 = _T7;

{_T35 = procedure (p0 : TDSUnit;
p1 : Integer;
const p2 : string;
p3 : Integer;
p4 : PArgList) of object;}

_T36 = _T7;

_T37 = procedure (p0 : TDSUnit;
p1 : Integer) of object;

_T38 = _T27;

_T39 = procedure (p0 : Integer) of object;

_T40 = function (var p0 : TFileName): Boolean of object;

_T41 = _T7;

_T42 = procedure (p0 : TScriptRunner) of object;

_T43 = procedure (const p0 : string) of object;

_T44 = function : TDebugDCScripter of object;

_T45 = _T7;

_T46 = _T7;

_T47 = _T15;

_T48 = _T15;

_T49 = function (const p0 : string): OleVariant of object;

_T50 = function (const p0 : string): string of object;

_T51 = procedure (p0 : TStrings) of object;

_T52 = _T7;

_T53 = function (p0 : Pointer): Integer of object;

_T54 = _T7;

_T55 = _T39;

_T56 = _T7;

_T57 = _T7;

_T58 = function : Pointer of object;

_T59 = _T53;

_T60 = _T58;

_T61 = _T53;

function __TLineDebugInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function _TLineDebugInfo_ : IDispatch;
begin
  result := __TLineDebugInfo__Wrapper.Create;
end;

type __TLineDebugInfo__Wrapper__ = class(__TLineDebugInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TLineDebugInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTLineDebugInfoToVariant(var R : TLineDebugInfo) : OleVariant;
var
__rw : __TLineDebugInfo__Wrapper__;
begin
__rw := __TLineDebugInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTLineDebugInfo(const V : OleVariant) : TLineDebugInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TLineDebugInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTDebugDCScripter__Project(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDebugDCScripter(Instance).Project;
end;

procedure __DC__SetTDebugDCScripter__Project(Instance : TObject; Params : PVariantArgList);
begin
TDebugDCScripter(Instance).Project:=OleVariant(Params^[0]);
end;

function __DC__GetTDebugDCScripter__DebugProject(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDebugDCScripter(Instance).DebugProject;
end;

procedure __DC__SetTDebugDCScripter__DebugProject(Instance : TObject; Params : PVariantArgList);
begin
TDebugDCScripter(Instance).DebugProject:=OleVariant(Params^[0]);
end;

function __DC__GetTDSBreakPoint__Module(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDSBreakPoint(Instance).Module);
end;

function __DC__GetTDSBreakPoint__FileName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDSBreakPoint(Instance).FileName;
end;

function __DC__GetTDSProject__Units(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDSProject(Instance).Units[OleVariant(Params^[0])];
end;

function __DC__GetTDSProject__UnitCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDSProject(Instance).UnitCount;
end;

function __DC__GetTDSProject__BreakPoint(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDSProject(Instance).BreakPoint[OleVariant(Params^[0])]);
end;

function __DC__GetTDSProject__BreakPointCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDSProject(Instance).BreakPointCount;
end;

function __DC__GetTDSProject__BreakOnException(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDSProject(Instance).BreakOnException;
end;

procedure __DC__SetTDSProject__BreakOnException(Instance : TObject; Params : PVariantArgList);
begin
TDSProject(Instance).BreakOnException:=OleVariant(Params^[0]);
end;

function __DC__GetTDSProjectRun__CurrentUnit(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDSProjectRun(Instance).CurrentUnit);
end;

function __DC__GetTDSProjectRun__CurrentLine(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDSProjectRun(Instance).CurrentLine;
end;

function __DC__GetTDSProjectRun__CallsCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDSProjectRun(Instance).CallsCount;
end;

function __DC__GetTDSProjectRun__CallStackState(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDSProjectRun(Instance).CallStackState;
end;

procedure __DC__SetTDSProjectRun__CallStackState(Instance : TObject; Params : PVariantArgList);
begin
TDSProjectRun(Instance).CallStackState:=OleVariant(Params^[0]);
end;

function __DC__GetTDSProjectRun__StopAtNextLine(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDSProjectRun(Instance).StopAtNextLine;
end;

procedure __DC__SetTDSProjectRun__StopAtNextLine(Instance : TObject; Params : PVariantArgList);
begin
TDSProjectRun(Instance).StopAtNextLine:=OleVariant(Params^[0]);
end;

function __DC__GetTDSProjectRun__ResumeAction(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDSProjectRun(Instance).ResumeAction;
end;

procedure __DC__SetTDSProjectRun__ResumeAction(Instance : TObject; Params : PVariantArgList);
begin
TDSProjectRun(Instance).ResumeAction:=OleVariant(Params^[0]);
end;

function __DC__GetTDSProjectRun__LastUnitFromStack(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDSProjectRun(Instance).LastUnitFromStack);
end;

function __DC__GetTDSProjectRun__LastLineFromStack(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDSProjectRun(Instance).LastLineFromStack;
end;

function __DC__GetTDSProjectRun__Connected(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDSProjectRun(Instance).Connected;
end;

function __DC__GetTDSProjectRun__DebuggerExist(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDSProjectRun(Instance).DebuggerExist;
end;

procedure __DC__SetTDSProjectRun__DebuggerExist(Instance : TObject; Params : PVariantArgList);
begin
TDSProjectRun(Instance).DebuggerExist:=OleVariant(Params^[0]);
end;

function __DC__GetTDSUnit__DSProject(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDSUnit(Instance).DSProject);
end;

procedure __DC__SetTDSUnit__DSProject(Instance : TObject; Params : PVariantArgList);
begin
TDSUnit(Instance).DSProject:=TDSProjectRun(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTSafedList__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSafedList(Instance).Count;
end;

function __DC__GetTSafedList__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TSafedList(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __DC__SetTSafedList__Items(Instance : TObject; Params : PVariantArgList);
begin
TSafedList(Instance).Items[OleVariant(Params^[1])]:=VarToPointer(OleVariant(Params^[0]));
end;

procedure __RegisterProps;
begin
RegisterProperty(TDebugDCScripter,'Project',__DC__GetTDebugDCScripter__Project,__DC__SetTDebugDCScripter__Project);
RegisterProperty(TDebugDCScripter,'DebugProject',__DC__GetTDebugDCScripter__DebugProject,__DC__SetTDebugDCScripter__DebugProject);
RegisterProperty(TDSBreakPoint,'Module',__DC__GetTDSBreakPoint__Module,nil);
RegisterProperty(TDSBreakPoint,'FileName',__DC__GetTDSBreakPoint__FileName,nil);
RegisterIndexedProperty(TDSProject,'Units',1,False,__DC__GetTDSProject__Units,nil);
RegisterProperty(TDSProject,'UnitCount',__DC__GetTDSProject__UnitCount,nil);
RegisterIndexedProperty(TDSProject,'BreakPoint',1,False,__DC__GetTDSProject__BreakPoint,nil);
RegisterProperty(TDSProject,'BreakPointCount',__DC__GetTDSProject__BreakPointCount,nil);
RegisterProperty(TDSProject,'BreakOnException',__DC__GetTDSProject__BreakOnException,__DC__SetTDSProject__BreakOnException);
RegisterProperty(TDSProjectRun,'CurrentUnit',__DC__GetTDSProjectRun__CurrentUnit,nil);
RegisterProperty(TDSProjectRun,'CurrentLine',__DC__GetTDSProjectRun__CurrentLine,nil);
RegisterProperty(TDSProjectRun,'CallsCount',__DC__GetTDSProjectRun__CallsCount,nil);
RegisterProperty(TDSProjectRun,'CallStackState',__DC__GetTDSProjectRun__CallStackState,__DC__SetTDSProjectRun__CallStackState);
RegisterProperty(TDSProjectRun,'StopAtNextLine',__DC__GetTDSProjectRun__StopAtNextLine,__DC__SetTDSProjectRun__StopAtNextLine);
RegisterProperty(TDSProjectRun,'ResumeAction',__DC__GetTDSProjectRun__ResumeAction,__DC__SetTDSProjectRun__ResumeAction);
RegisterProperty(TDSProjectRun,'LastUnitFromStack',__DC__GetTDSProjectRun__LastUnitFromStack,nil);
RegisterProperty(TDSProjectRun,'LastLineFromStack',__DC__GetTDSProjectRun__LastLineFromStack,nil);
RegisterProperty(TDSProjectRun,'Connected',__DC__GetTDSProjectRun__Connected,nil);
RegisterProperty(TDSProjectRun,'DebuggerExist',__DC__GetTDSProjectRun__DebuggerExist,__DC__SetTDSProjectRun__DebuggerExist);
RegisterProperty(TDSUnit,'DSProject',__DC__GetTDSUnit__DSProject,__DC__SetTDSUnit__DSProject);
RegisterProperty(TSafedList,'Count',__DC__GetTSafedList__Count,nil);
RegisterIndexedProperty(TSafedList,'Items',1,True,__DC__GetTSafedList__Items,__DC__SetTSafedList__Items);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..5] of TClass = (
TDebugDCScripter,
TDSBreakPoint,
TDSProject,
TDSProjectRun,
TDSUnit,
TSafedList
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'TLineDebugInfo'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TLineDebugInfo_)));
RegisterProc(TDSBreakPoint,'CreateDS',mtConstructor,TypeInfo(_T0),[
TypeInfo(TDSUnit),
TypeInfo(Integer)],Addr(TDSBreakPoint.CreateDS),cRegister);

//RegRegisterMethod(TDSProject,'ResumeThread',TypeInfo(_T1),[TypeInfo(Boolean)], pointer(0));
RegRegisterMethod(TDSProject,'ResumeThread',TypeInfo(_T1),[TypeInfo(Boolean)],  getVMTProcAddr('TDSProject','ResumeThread',0));


//RegRegisterMethod(TDSProject,'SuspendThread',TypeInfo(_T2),[TypeInfo(TDSUnit),TypeInfo(Integer),TypeInfo(Boolean),TypeInfo(Boolean)], pointer(4));
RegRegisterMethod(TDSProject,'SuspendThread',TypeInfo(_T2),[TypeInfo(TDSUnit),TypeInfo(Integer),TypeInfo(Boolean),TypeInfo(Boolean)],  getVMTProcAddr('TDSProject','SuspendThread',4));


//RegRegisterMethod(TDSProject,'CheckBreakPoint',TypeInfo(_T3),[TypeInfo(TDSUnit),TypeInfo(Integer),TypeInfo(Boolean)], pointer(8));
RegRegisterMethod(TDSProject,'CheckBreakPoint',TypeInfo(_T3),[TypeInfo(TDSUnit),TypeInfo(Integer),TypeInfo(Boolean)],  getVMTProcAddr('TDSProject','CheckBreakPoint',8));


//RegRegisterMethod(TDSProject,'AddUnit',TypeInfo(_T4),[TypeInfo(TDSUnit)], pointer(12));
RegRegisterMethod(TDSProject,'AddUnit',TypeInfo(_T4),[TypeInfo(TDSUnit)],  getVMTProcAddr('TDSProject','AddUnit',12));


//RegRegisterMethod(TDSProject,'RemoveUnit',TypeInfo(_T5),[TypeInfo(TDSUnit)], pointer(16));
RegRegisterMethod(TDSProject,'RemoveUnit',TypeInfo(_T5),[TypeInfo(TDSUnit)],  getVMTProcAddr('TDSProject','RemoveUnit',16));


//RegRegisterMethod(TDSProject,'OnException',TypeInfo(_T6),[TypeInfo(Exception),TypeInfo(TDSUnit),TypeInfo(Integer)], pointer(20));
RegRegisterMethod(TDSProject,'OnException',TypeInfo(_T6),[TypeInfo(Exception),TypeInfo(TDSUnit),TypeInfo(Integer)],  getVMTProcAddr('TDSProject','OnException',20));


RegisterProc(TDSProject,'Create',mtConstructor,TypeInfo(_T7),NoParams,Addr(TDSProject.Create),cRegister);

RegRegisterMethod(TDSProject,'ConnectToDebugger',TypeInfo(_T8),NoParams,Addr(TDSProject.ConnectToDebugger));

RegRegisterMethod(TDSProject,'ResumeFromBreakPoint',TypeInfo(_T9),[
TypeInfo(TBreakResumeType)],Addr(TDSProject.ResumeFromBreakPoint));

RegRegisterMethod(TDSProject,'CauseBreak',TypeInfo(_T10),NoParams,Addr(TDSProject.CauseBreak));

RegRegisterMethod(TDSProject,'RunToLine',TypeInfo(_T11),[
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TDSProject.RunToLine));

RegRegisterMethod(TDSProject,'ConnectDebugger',TypeInfo(_T12),NoParams,Addr(TDSProject.ConnectDebugger));

RegRegisterMethod(TDSProject,'DisconnectDebugger',TypeInfo(_T13),NoParams,Addr(TDSProject.DisconnectDebugger));

RegRegisterMethod(TDSProject,'OnDebuggerClose',TypeInfo(_T14),NoParams,Addr(TDSProject.OnDebuggerClose));

RegRegisterMethod(TDSProject,'GetApplicationName',TypeInfo(_T15),[TypeInfo(string)],Addr(TDSProject.GetApplicationName));

RegRegisterMethod(TDSProject,'GetName',TypeInfo(_T16),[TypeInfo(string)],Addr(TDSProject.GetName));

RegRegisterMethod(TDSProject,'Evaluate',TypeInfo(_T17),[
TypeInfo(Integer),
TypeInfo(string),
TypeInfo(string),
TypeInfo(Boolean)],Addr(TDSProject.Evaluate));

RegRegisterMethod(TDSProject,'GetUnitName',TypeInfo(_T18),[
TypeInfo(Integer),TypeInfo(string)],Addr(TDSProject.GetUnitName));

RegRegisterMethod(TDSProject,'GetUnitText',TypeInfo(_T19),[
TypeInfo(Integer),TypeInfo(string)],Addr(TDSProject.GetUnitText));

RegRegisterMethod(TDSProject,'LockUnits',TypeInfo(_T20),NoParams,Addr(TDSProject.LockUnits));

RegRegisterMethod(TDSProject,'UnLockUnits',TypeInfo(_T21),NoParams,Addr(TDSProject.UnLockUnits));

RegRegisterMethod(TDSProject,'LockBreakPoints',TypeInfo(_T22),NoParams,Addr(TDSProject.LockBreakPoints));

RegRegisterMethod(TDSProject,'UnLockBreakPoints',TypeInfo(_T23),NoParams,Addr(TDSProject.UnLockBreakPoints));

RegRegisterMethod(TDSProject,'ClearBreakPoints',TypeInfo(_T24),NoParams,Addr(TDSProject.ClearBreakPoints));

RegRegisterMethod(TDSProject,'AddBreakPoint',TypeInfo(_T25),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Boolean),TypeInfo(Integer)],Addr(TDSProject.AddBreakPoint));

RegRegisterMethod(TDSProject,'RemoveBreakPoint',TypeInfo(_T26),[
TypeInfo(Integer),TypeInfo(Boolean)],Addr(TDSProject.RemoveBreakPoint));

RegRegisterMethod(TDSProject,'GetStackFrameCount',TypeInfo(_T27),[TypeInfo(Integer)],Addr(TDSProject.GetStackFrameCount));

RegRegisterMethod(TDSProject,'GetStackFrame',TypeInfo(_T28),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(string)],Addr(TDSProject.GetStackFrame));

RegRegisterMethod(TDSProject,'GetVarList',TypeInfo(_T29),[
TypeInfo(Integer),
TypeInfo(TStrings)],Addr(TDSProject.GetVarList));

RegisterProc(TDSProjectRun,'Create',mtConstructor,TypeInfo(_T30),NoParams,Addr(TDSProjectRun.Create),cRegister);

RegRegisterMethod(TDSProjectRun,'GetUnitFromName',TypeInfo(_T31),[
TypeInfo(string),TypeInfo(TDSUnit)],Addr(TDSProjectRun.GetUnitFromName));

RegRegisterMethod(TDSProjectRun,'IsValidUnitName',TypeInfo(_T32),[
TypeInfo(string),TypeInfo(Boolean)],Addr(TDSProjectRun.IsValidUnitName));

RegRegisterMethod(TDSProjectRun,'OnLastUnitLoaded',TypeInfo(_T33),[
TypeInfo(TObject)],Addr(TDSProjectRun.OnLastUnitLoaded));

RegRegisterMethod(TDSProjectRun,'OnFirstUnitUnLoaded',TypeInfo(_T34),NoParams,Addr(TDSProjectRun.OnFirstUnitUnLoaded));

RegRegisterMethod(TDSProjectRun,'OnLeaveProcedure',TypeInfo(_T36),NoParams,Addr(TDSProjectRun.OnLeaveProcedure));

RegRegisterMethod(TDSProjectRun,'SetPrevParams',TypeInfo(_T37),[
TypeInfo(TDSUnit),
TypeInfo(Integer)],Addr(TDSProjectRun.SetPrevParams));

RegRegisterMethod(TDSProjectRun,'GetStackState',TypeInfo(_T38),[TypeInfo(Integer)],Addr(TDSProjectRun.GetStackState));

RegRegisterMethod(TDSProjectRun,'SetStackState',TypeInfo(_T39),[
TypeInfo(Integer)],Addr(TDSProjectRun.SetStackState));

RegRegisterMethod(TDSProjectRun,'CheckDebuggerInSystem',TypeInfo(_T40),[
TypeInfo(TFileName),TypeInfo(Boolean)],Addr(TDSProjectRun.CheckDebuggerInSystem));

RegRegisterMethod(TDSProjectRun,'RunDebugger',TypeInfo(_T41),NoParams,Addr(TDSProjectRun.RunDebugger));

RegisterProc(TDSUnit,'Create',mtConstructor,TypeInfo(_T42),[
TypeInfo(TScriptRunner)],Addr(TDSUnit.Create),cRegister);

RegRegisterMethod(TDSUnit,'Init',TypeInfo(_T43),[
TypeInfo(string)],Addr(TDSUnit.Init));

RegRegisterMethod(TDSUnit,'GetDebugDCScripter',TypeInfo(_T44),[TypeInfo(TDebugDCScripter)],Addr(TDSUnit.GetDebugDCScripter));

RegRegisterMethod(TDSUnit,'DoDebuggerConnect',TypeInfo(_T45),NoParams,Addr(TDSUnit.DoDebuggerConnect));

RegRegisterMethod(TDSUnit,'DoDebuggerDisconnect',TypeInfo(_T46),NoParams,Addr(TDSUnit.DoDebuggerDisconnect));

RegRegisterMethod(TDSUnit,'GetText',TypeInfo(_T47),[TypeInfo(string)],Addr(TDSUnit.GetText));

RegRegisterMethod(TDSUnit,'GetName',TypeInfo(_T48),[TypeInfo(string)],Addr(TDSUnit.GetName));

RegRegisterMethod(TDSUnit,'_Evaluate',TypeInfo(_T49),[
TypeInfo(string),TypeInfo(OleVariant)],Addr(TDSUnit._Evaluate));

RegRegisterMethod(TDSUnit,'Evaluate',TypeInfo(_T50),[
TypeInfo(string),TypeInfo(string)],Addr(TDSUnit.Evaluate));

RegRegisterMethod(TDSUnit,'GetVarList',TypeInfo(_T51),[
TypeInfo(TStrings)],Addr(TDSUnit.GetVarList));

RegisterProc(TSafedList,'Create',mtConstructor,TypeInfo(_T52),NoParams,Addr(TSafedList.Create),cRegister);

RegRegisterMethod(TSafedList,'Add',TypeInfo(_T53),[
TypeInfoPointer,TypeInfo(Integer)],Addr(TSafedList.Add));

//RegRegisterMethod(TSafedList,'Clear',TypeInfo(_T54),NoParams, pointer(0));
RegRegisterMethod(TSafedList,'Clear',TypeInfo(_T54),NoParams,  getVMTProcAddr('TSafedList','Clear',0));


RegRegisterMethod(TSafedList,'Delete',TypeInfo(_T55),[
TypeInfo(Integer)],Addr(TSafedList.Delete));

RegRegisterMethod(TSafedList,'Lock',TypeInfo(_T56),NoParams,Addr(TSafedList.Lock));

RegRegisterMethod(TSafedList,'UnLock',TypeInfo(_T57),NoParams,Addr(TSafedList.UnLock));

RegRegisterMethod(TSafedList,'First',TypeInfo(_T58),[TypeInfoPointer],Addr(TSafedList.First));

RegRegisterMethod(TSafedList,'IndexOf',TypeInfo(_T59),[
TypeInfoPointer,TypeInfo(Integer)],Addr(TSafedList.IndexOf));

RegRegisterMethod(TSafedList,'Last',TypeInfo(_T60),[TypeInfoPointer],Addr(TSafedList.Last));

RegRegisterMethod(TSafedList,'Remove',TypeInfo(_T61),[
TypeInfoPointer,TypeInfo(Integer)],Addr(TSafedList.Remove));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegRegisterMethod(TDSProjectRun,'OnEnterProcedure',TypeInfo(_T35),[
TypeInfo(TDSUnit),
TypeInfo(Integer),
TypeInfo(string),
TypeInfo(Integer),
TypeInfoPointer],Addr(TDSProjectRun.OnEnterProcedure))}

{RegisterEvent(TypeInfo(TCallStackNotifyEvent),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(string),
TypeInfo(Integer),
TypeInfoPointer]);}

{RegisterEvent(TypeInfo(TChangeLineNotifyEvent),[
TypeInfo(IDispatch)]);}

{RegisterEvent(TypeInfo(TExceptionNotifyEvent),[
TypeInfo(Exception),
TypeInfo(IDispatch)]);}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
