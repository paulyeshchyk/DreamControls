{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit dccbut_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  Windows,
  Messages,
  SysUtils,
  Classes,
  Graphics,
  Controls,
  Forms,
  Menus,
  dcdreamLib,
  dcsystem,
  dcconsts,
  dcToolTip,
  dccbut;
function ConvertTMessageToVariant(var R : TMessage) : OleVariant;
function ConvertVariantToTMessage(const V : OleVariant) : TMessage;
function ConvertTWMMouseToVariant(var R : TWMMouse) : OleVariant;
function ConvertVariantToTWMMouse(const V : OleVariant) : TWMMouse;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TWMMouse__Wrapper = class(TDCRecordWrapper)
private
fR : TWMMouse;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setKeys(const val : Longint);
function getKeys : Longint;
property Keys : Longint read getKeys write setKeys;
procedure setXPos(const val : SmallInt);
function getXPos : SmallInt;
property XPos : SmallInt read getXPos write setXPos;
procedure setYPos(const val : SmallInt);
function getYPos : SmallInt;
property YPos : SmallInt read getYPos write setYPos;
procedure setResult(const val : Longint);
function getResult : Longint;
property Result : Longint read getResult write setResult;
end;
type __TMessage__Wrapper = class(TDCRecordWrapper)
private
fR : TMessage;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setWParam(const val : Longint);
function getWParam : Longint;
property WParam : Longint read getWParam write setWParam;
procedure setLParam(const val : Longint);
function getLParam : Longint;
property LParam : Longint read getLParam write setLParam;
procedure setResult(const val : Longint);
function getResult : Longint;
property Result : Longint read getResult write setResult;
procedure setWParamLo(const val : Word);
function getWParamLo : Word;
property WParamLo : Word read getWParamLo write setWParamLo;
procedure setWParamHi(const val : Word);
function getWParamHi : Word;
property WParamHi : Word read getWParamHi write setWParamHi;
procedure setLParamLo(const val : Word);
function getLParamLo : Word;
property LParamLo : Word read getLParamLo write setLParamLo;
procedure setLParamHi(const val : Word);
function getLParamHi : Word;
property LParamHi : Word read getLParamHi write setLParamHi;
procedure setResultLo(const val : Word);
function getResultLo : Word;
property ResultLo : Word read getResultLo write setResultLo;
procedure setResultHi(const val : Word);
function getResultHi : Word;
property ResultHi : Word read getResultHi write setResultHi;
end;
type __TDCCaptionButton__ = class(TDCCaptionButton);
type
_T0 = procedure  of object;

_T1 = _T0;

_T2 = procedure (const p0 : IDispatch;
p1 : TMouseButton;
p2 : TShiftState) of object;

_T3 = procedure (const p0 : IDispatch) of object;

_T4 = _T2;

_T5 = procedure (p0 : TMouseButton;
p1 : TShiftState;
p2 : Integer;
p3 : Integer) of object;

_T6 = procedure (p0 : TShiftState;
p1 : Integer;
p2 : Integer) of object;

_T7 = _T5;

function __TWMMouse__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWMMouse__Wrapper.setMsg(const val : Cardinal);
begin
TWMMouse(GetRecordPtr^).Msg := val;
end;
function __TWMMouse__Wrapper.getMsg : Cardinal;
begin
result := TWMMouse(GetRecordPtr^).Msg;
end;
procedure __TWMMouse__Wrapper.setKeys(const val : Longint);
begin
TWMMouse(GetRecordPtr^).Keys := val;
end;
function __TWMMouse__Wrapper.getKeys : Longint;
begin
result := TWMMouse(GetRecordPtr^).Keys;
end;
procedure __TWMMouse__Wrapper.setXPos(const val : SmallInt);
begin
TWMMouse(GetRecordPtr^).XPos := val;
end;
function __TWMMouse__Wrapper.getXPos : SmallInt;
begin
result := TWMMouse(GetRecordPtr^).XPos;
end;
procedure __TWMMouse__Wrapper.setYPos(const val : SmallInt);
begin
TWMMouse(GetRecordPtr^).YPos := val;
end;
function __TWMMouse__Wrapper.getYPos : SmallInt;
begin
result := TWMMouse(GetRecordPtr^).YPos;
end;
procedure __TWMMouse__Wrapper.setResult(const val : Longint);
begin
TWMMouse(GetRecordPtr^).Result := val;
end;
function __TWMMouse__Wrapper.getResult : Longint;
begin
result := TWMMouse(GetRecordPtr^).Result;
end;
function __TMessage__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMessage__Wrapper.setMsg(const val : Cardinal);
begin
TMessage(GetRecordPtr^).Msg := val;
end;
function __TMessage__Wrapper.getMsg : Cardinal;
begin
result := TMessage(GetRecordPtr^).Msg;
end;
procedure __TMessage__Wrapper.setWParam(const val : Longint);
begin
TMessage(GetRecordPtr^).WParam := val;
end;
function __TMessage__Wrapper.getWParam : Longint;
begin
result := TMessage(GetRecordPtr^).WParam;
end;
procedure __TMessage__Wrapper.setLParam(const val : Longint);
begin
TMessage(GetRecordPtr^).LParam := val;
end;
function __TMessage__Wrapper.getLParam : Longint;
begin
result := TMessage(GetRecordPtr^).LParam;
end;
procedure __TMessage__Wrapper.setResult(const val : Longint);
begin
TMessage(GetRecordPtr^).Result := val;
end;
function __TMessage__Wrapper.getResult : Longint;
begin
result := TMessage(GetRecordPtr^).Result;
end;
procedure __TMessage__Wrapper.setWParamLo(const val : Word);
begin
TMessage(GetRecordPtr^).WParamLo := val;
end;
function __TMessage__Wrapper.getWParamLo : Word;
begin
result := TMessage(GetRecordPtr^).WParamLo;
end;
procedure __TMessage__Wrapper.setWParamHi(const val : Word);
begin
TMessage(GetRecordPtr^).WParamHi := val;
end;
function __TMessage__Wrapper.getWParamHi : Word;
begin
result := TMessage(GetRecordPtr^).WParamHi;
end;
procedure __TMessage__Wrapper.setLParamLo(const val : Word);
begin
TMessage(GetRecordPtr^).LParamLo := val;
end;
function __TMessage__Wrapper.getLParamLo : Word;
begin
result := TMessage(GetRecordPtr^).LParamLo;
end;
procedure __TMessage__Wrapper.setLParamHi(const val : Word);
begin
TMessage(GetRecordPtr^).LParamHi := val;
end;
function __TMessage__Wrapper.getLParamHi : Word;
begin
result := TMessage(GetRecordPtr^).LParamHi;
end;
procedure __TMessage__Wrapper.setResultLo(const val : Word);
begin
TMessage(GetRecordPtr^).ResultLo := val;
end;
function __TMessage__Wrapper.getResultLo : Word;
begin
result := TMessage(GetRecordPtr^).ResultLo;
end;
procedure __TMessage__Wrapper.setResultHi(const val : Word);
begin
TMessage(GetRecordPtr^).ResultHi := val;
end;
function __TMessage__Wrapper.getResultHi : Word;
begin
result := TMessage(GetRecordPtr^).ResultHi;
end;
procedure __TDCCaptionButton__DoMouseDown__Wrapper(__Instance : TDCCaptionButton;
const p0 : IDispatch;
p1 : TMouseButton;
p2 : TShiftState);
var
__p0 : ^TWMMouse;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__TDCCaptionButton__(__Instance).DoMouseDown(__p0^,p1,p2);
end;

procedure __TDCCaptionButton__DoMouseMove__Wrapper(__Instance : TDCCaptionButton;
const p0 : IDispatch);
var
__p0 : ^TMessage;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__TDCCaptionButton__(__Instance).DoMouseMove(__p0^);
end;

procedure __TDCCaptionButton__DoMouseUp__Wrapper(__Instance : TDCCaptionButton;
const p0 : IDispatch;
p1 : TMouseButton;
p2 : TShiftState);
var
__p0 : ^TWMMouse;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__TDCCaptionButton__(__Instance).DoMouseUp(__p0^,p1,p2);
end;


type __TMessage__Wrapper__ = class(__TMessage__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMessage__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMessageToVariant(var R : TMessage) : OleVariant;
var
__rw : __TMessage__Wrapper__;
begin
__rw := __TMessage__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMessage(const V : OleVariant) : TMessage;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMessage((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWMMouse__Wrapper__ = class(__TWMMouse__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWMMouse__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWMMouseToVariant(var R : TWMMouse) : OleVariant;
var
__rw : __TWMMouse__Wrapper__;
begin
__rw := __TWMMouse__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWMMouse(const V : OleVariant) : TWMMouse;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWMMouse((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..0] of TClass = (
TDCCaptionButton
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TDCCaptionButton,'Click',TypeInfo(_T0),NoParams, pointer(48));
RegRegisterMethod(TDCCaptionButton,'Click',TypeInfo(_T0),NoParams,  getVMTProcAddr('TDCCaptionButton','Click',48));


//RegRegisterMethod(TDCCaptionButton,'DblClick',TypeInfo(_T1),NoParams, pointer(52));
RegRegisterMethod(TDCCaptionButton,'DblClick',TypeInfo(_T1),NoParams,  getVMTProcAddr('TDCCaptionButton','DblClick',52));


//RegRegisterMethod(TDCCaptionButton,'DoMouseDown',TypeInfo(_T2),[TypeInfo(IDispatch),TypeInfo(TMouseButton),TypeInfo(TShiftState)], pointer(56));
RegRegisterMethod(TDCCaptionButton,'DoMouseDown',TypeInfo(_T2),[TypeInfo(IDispatch),TypeInfo(TMouseButton),TypeInfo(TShiftState)],  getVMTProcAddr('TDCCaptionButton','DoMouseDown',56));


//RegRegisterMethod(TDCCaptionButton,'DoMouseMove',TypeInfo(_T3),[TypeInfo(IDispatch)], pointer(60));
RegRegisterMethod(TDCCaptionButton,'DoMouseMove',TypeInfo(_T3),[TypeInfo(IDispatch)],  getVMTProcAddr('TDCCaptionButton','DoMouseMove',60));


//RegRegisterMethod(TDCCaptionButton,'DoMouseUp',TypeInfo(_T4),[TypeInfo(IDispatch),TypeInfo(TMouseButton),TypeInfo(TShiftState)], pointer(64));
RegRegisterMethod(TDCCaptionButton,'DoMouseUp',TypeInfo(_T4),[TypeInfo(IDispatch),TypeInfo(TMouseButton),TypeInfo(TShiftState)],  getVMTProcAddr('TDCCaptionButton','DoMouseUp',64));


//RegRegisterMethod(TDCCaptionButton,'MouseDown',TypeInfo(_T5),[TypeInfo(TMouseButton),TypeInfo(TShiftState),TypeInfo(Integer),TypeInfo(Integer)], pointer(68));
RegRegisterMethod(TDCCaptionButton,'MouseDown',TypeInfo(_T5),[TypeInfo(TMouseButton),TypeInfo(TShiftState),TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TDCCaptionButton','MouseDown',68));


//RegRegisterMethod(TDCCaptionButton,'MouseMove',TypeInfo(_T6),[TypeInfo(TShiftState),TypeInfo(Integer),TypeInfo(Integer)], pointer(72));
RegRegisterMethod(TDCCaptionButton,'MouseMove',TypeInfo(_T6),[TypeInfo(TShiftState),TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TDCCaptionButton','MouseMove',72));


//RegRegisterMethod(TDCCaptionButton,'MouseUp',TypeInfo(_T7),[TypeInfo(TMouseButton),TypeInfo(TShiftState),TypeInfo(Integer),TypeInfo(Integer)], pointer(76));
RegRegisterMethod(TDCCaptionButton,'MouseUp',TypeInfo(_T7),[TypeInfo(TMouseButton),TypeInfo(TShiftState),TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TDCCaptionButton','MouseUp',76));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
