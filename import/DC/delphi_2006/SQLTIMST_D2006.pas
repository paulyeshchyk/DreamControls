{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit SQLTIMST_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Variants,
  SqlTimSt;
function ConvertTSQLTimeStampToVariant(var R : TSQLTimeStamp) : OleVariant;
function ConvertVariantToTSQLTimeStamp(const V : OleVariant) : TSQLTimeStamp;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TSQLTimeStamp__Wrapper = class(TDCRecordWrapper)
private
fR : TSQLTimeStamp;
public
function GetRecordPtr : pointer; override;
published
procedure setYear(const val : SmallInt);
function getYear : SmallInt;
property Year : SmallInt read getYear write setYear;
procedure setMonth(const val : Word);
function getMonth : Word;
property Month : Word read getMonth write setMonth;
procedure setDay(const val : Word);
function getDay : Word;
property Day : Word read getDay write setDay;
procedure setHour(const val : Word);
function getHour : Word;
property Hour : Word read getHour write setHour;
procedure setMinute(const val : Word);
function getMinute : Word;
property Minute : Word read getMinute write setMinute;
procedure setSecond(const val : Word);
function getSecond : Word;
property Second : Word read getSecond write setSecond;
procedure setFractions(const val : LongWord);
function getFractions : LongWord;
property Fractions : LongWord read getFractions write setFractions;
end;
type
_T0 = procedure (var p0 : Variant;
const p1 : IDispatch) of object;

_T1 = function : TVarType of object;

_T2 = function (const p0 : Variant): Boolean of object;

_T3 = function (const p0 : Variant): IDispatch of object;

_T4 = function (const p0 : string;
const p1 : IDispatch): string of object;

_T5 = function (const p0 : IDispatch): Integer of object;

_T6 = function (const p0 : TDateTime): IDispatch of object;

_T7 = function (const p0 : IDispatch): TDateTime of object;

_T8 = function (const p0 : string;
const p1 : IDispatch): Boolean of object;

_T9 = function (const p0 : string): IDispatch of object;

_T10 = procedure (const p0 : IDispatch) of object;

function __TSQLTimeStamp__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSQLTimeStamp__Wrapper.setYear(const val : SmallInt);
begin
TSQLTimeStamp(GetRecordPtr^).Year := val;
end;
function __TSQLTimeStamp__Wrapper.getYear : SmallInt;
begin
result := TSQLTimeStamp(GetRecordPtr^).Year;
end;
procedure __TSQLTimeStamp__Wrapper.setMonth(const val : Word);
begin
TSQLTimeStamp(GetRecordPtr^).Month := val;
end;
function __TSQLTimeStamp__Wrapper.getMonth : Word;
begin
result := TSQLTimeStamp(GetRecordPtr^).Month;
end;
procedure __TSQLTimeStamp__Wrapper.setDay(const val : Word);
begin
TSQLTimeStamp(GetRecordPtr^).Day := val;
end;
function __TSQLTimeStamp__Wrapper.getDay : Word;
begin
result := TSQLTimeStamp(GetRecordPtr^).Day;
end;
procedure __TSQLTimeStamp__Wrapper.setHour(const val : Word);
begin
TSQLTimeStamp(GetRecordPtr^).Hour := val;
end;
function __TSQLTimeStamp__Wrapper.getHour : Word;
begin
result := TSQLTimeStamp(GetRecordPtr^).Hour;
end;
procedure __TSQLTimeStamp__Wrapper.setMinute(const val : Word);
begin
TSQLTimeStamp(GetRecordPtr^).Minute := val;
end;
function __TSQLTimeStamp__Wrapper.getMinute : Word;
begin
result := TSQLTimeStamp(GetRecordPtr^).Minute;
end;
procedure __TSQLTimeStamp__Wrapper.setSecond(const val : Word);
begin
TSQLTimeStamp(GetRecordPtr^).Second := val;
end;
function __TSQLTimeStamp__Wrapper.getSecond : Word;
begin
result := TSQLTimeStamp(GetRecordPtr^).Second;
end;
procedure __TSQLTimeStamp__Wrapper.setFractions(const val : LongWord);
begin
TSQLTimeStamp(GetRecordPtr^).Fractions := val;
end;
function __TSQLTimeStamp__Wrapper.getFractions : LongWord;
begin
result := TSQLTimeStamp(GetRecordPtr^).Fractions;
end;
function _TSQLTimeStamp_ : IDispatch;
begin
  result := __TSQLTimeStamp__Wrapper.Create;
end;
procedure ____VarSQLTimeStampCreate__Wrapper(var p0 : Variant;
const p1 : IDispatch);
var
__p1 : ^TSQLTimeStamp;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
VarSQLTimeStampCreate(p0,__p1^);
end;

function ____VarToSQLTimeStamp__Wrapper(const p0 : Variant): IDispatch;
var
__result : TSQLTimeStamp;
__wrapper : __TSQLTimeStamp__Wrapper;
begin
__result := VarToSQLTimeStamp(p0);
__wrapper := __TSQLTimeStamp__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

function ____SQLTimeStampToStr__Wrapper(const p0 : string;
const p1 : IDispatch): string;
var
__p1 : ^TSQLTimeStamp;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := SQLTimeStampToStr(p0,__p1^);
end;

function ____SQLDayOfWeek__Wrapper(const p0 : IDispatch): Integer;
var
__p0 : ^TSQLTimeStamp;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := SQLDayOfWeek(__p0^);
end;

function ____DateTimeToSQLTimeStamp__Wrapper(const p0 : TDateTime): IDispatch;
var
__result : TSQLTimeStamp;
__wrapper : __TSQLTimeStamp__Wrapper;
begin
__result := DateTimeToSQLTimeStamp(p0);
__wrapper := __TSQLTimeStamp__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

function ____SQLTimeStampToDateTime__Wrapper(const p0 : IDispatch): TDateTime;
var
__p0 : ^TSQLTimeStamp;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := SQLTimeStampToDateTime(__p0^);
end;

function ____TryStrToSQLTimeStamp__Wrapper(const p0 : string;
const p1 : IDispatch): Boolean;
var
__p1 : ^TSQLTimeStamp;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := TryStrToSQLTimeStamp(p0,__p1^);
end;

function ____StrToSQLTimeStamp__Wrapper(const p0 : string): IDispatch;
var
__result : TSQLTimeStamp;
__wrapper : __TSQLTimeStamp__Wrapper;
begin
__result := StrToSQLTimeStamp(p0);
__wrapper := __TSQLTimeStamp__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

procedure ____CheckSqlTimeStamp__Wrapper(const p0 : IDispatch);
var
__p0 : ^TSQLTimeStamp;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
CheckSqlTimeStamp(__p0^);
end;


type __TSQLTimeStamp__Wrapper__ = class(__TSQLTimeStamp__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSQLTimeStamp__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSQLTimeStampToVariant(var R : TSQLTimeStamp) : OleVariant;
var
__rw : __TSQLTimeStamp__Wrapper__;
begin
__rw := __TSQLTimeStamp__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSQLTimeStamp(const V : OleVariant) : TSQLTimeStamp;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSQLTimeStamp((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..11] of string = (
'TSQLTimeStamp'
,'VarSQLTimeStampCreate'
,'VarSQLTimeStamp'
,'VarIsSQLTimeStamp'
,'VarToSQLTimeStamp'
,'SQLTimeStampToStr'
,'SQLDayOfWeek'
,'DateTimeToSQLTimeStamp'
,'SQLTimeStampToDateTime'
,'TryStrToSQLTimeStamp'
,'StrToSQLTimeStamp'
,'CheckSqlTimeStamp'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TSQLTimeStamp_)));
RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T0),[
TypeInfo(Variant),
TypeInfo(IDispatch)],Addr(____VarSQLTimeStampCreate__Wrapper),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T1),[TypeInfo(TVarType)],Addr(VarSQLTimeStamp),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T2),[
TypeInfo(Variant),TypeInfo(Boolean)],Addr(VarIsSQLTimeStamp),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T3),[
TypeInfo(Variant),TypeInfo(IDispatch)],Addr(____VarToSQLTimeStamp__Wrapper),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T4),[
TypeInfo(string),
TypeInfo(IDispatch),TypeInfo(string)],Addr(____SQLTimeStampToStr__Wrapper),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T5),[
TypeInfo(IDispatch),TypeInfo(Integer)],Addr(____SQLDayOfWeek__Wrapper),cRegister);

RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T6),[
TypeInfo(TDateTime),TypeInfo(IDispatch)],Addr(____DateTimeToSQLTimeStamp__Wrapper),cRegister);

RegisterProc(nil,MethodNames[8],mtProc,TypeInfo(_T7),[
TypeInfo(IDispatch),TypeInfo(TDateTime)],Addr(____SQLTimeStampToDateTime__Wrapper),cRegister);

RegisterProc(nil,MethodNames[9],mtProc,TypeInfo(_T8),[
TypeInfo(string),
TypeInfo(IDispatch),TypeInfo(Boolean)],Addr(____TryStrToSQLTimeStamp__Wrapper),cRegister);

RegisterProc(nil,MethodNames[10],mtProc,TypeInfo(_T9),[
TypeInfo(string),TypeInfo(IDispatch)],Addr(____StrToSQLTimeStamp__Wrapper),cRegister);

RegisterProc(nil,MethodNames[11],mtProc,TypeInfo(_T10),[
TypeInfo(IDispatch)],Addr(____CheckSqlTimeStamp__Wrapper),cRegister);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
