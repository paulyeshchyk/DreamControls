{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit ACCCTRL_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  Types,
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  AccCtrl;
function Convert_TRUSTEE_AToVariant(var R : _TRUSTEE_A) : OleVariant;
function ConvertVariantTo_TRUSTEE_A(const V : OleVariant) : _TRUSTEE_A;
function Convert_TRUSTEE_WToVariant(var R : _TRUSTEE_W) : OleVariant;
function ConvertVariantTo_TRUSTEE_W(const V : OleVariant) : _TRUSTEE_W;
function ConvertACTRL_ACCESS_ENTRY_LISTAToVariant(var R : ACTRL_ACCESS_ENTRY_LISTA) : OleVariant;
function ConvertVariantToACTRL_ACCESS_ENTRY_LISTA(const V : OleVariant) : ACTRL_ACCESS_ENTRY_LISTA;
function ConvertACTRL_ACCESS_ENTRY_LISTWToVariant(var R : ACTRL_ACCESS_ENTRY_LISTW) : OleVariant;
function ConvertVariantToACTRL_ACCESS_ENTRY_LISTW(const V : OleVariant) : ACTRL_ACCESS_ENTRY_LISTW;
function ConvertACTRL_ACCESS_ENTRYAToVariant(var R : ACTRL_ACCESS_ENTRYA) : OleVariant;
function ConvertVariantToACTRL_ACCESS_ENTRYA(const V : OleVariant) : ACTRL_ACCESS_ENTRYA;
function ConvertACTRL_ACCESS_ENTRYWToVariant(var R : ACTRL_ACCESS_ENTRYW) : OleVariant;
function ConvertVariantToACTRL_ACCESS_ENTRYW(const V : OleVariant) : ACTRL_ACCESS_ENTRYW;
function ConvertACTRL_ACCESS_INFOAToVariant(var R : ACTRL_ACCESS_INFOA) : OleVariant;
function ConvertVariantToACTRL_ACCESS_INFOA(const V : OleVariant) : ACTRL_ACCESS_INFOA;
function ConvertACTRL_ACCESS_INFOWToVariant(var R : ACTRL_ACCESS_INFOW) : OleVariant;
function ConvertVariantToACTRL_ACCESS_INFOW(const V : OleVariant) : ACTRL_ACCESS_INFOW;
function ConvertACTRL_ACCESSAToVariant(var R : ACTRL_ACCESSA) : OleVariant;
function ConvertVariantToACTRL_ACCESSA(const V : OleVariant) : ACTRL_ACCESSA;
function ConvertACTRL_ACCESSWToVariant(var R : ACTRL_ACCESSW) : OleVariant;
function ConvertVariantToACTRL_ACCESSW(const V : OleVariant) : ACTRL_ACCESSW;
function ConvertACTRL_AUDITToVariant(var R : ACTRL_AUDIT) : OleVariant;
function ConvertVariantToACTRL_AUDIT(const V : OleVariant) : ACTRL_AUDIT;
function ConvertACTRL_AUDITAToVariant(var R : ACTRL_AUDITA) : OleVariant;
function ConvertVariantToACTRL_AUDITA(const V : OleVariant) : ACTRL_AUDITA;
function ConvertACTRL_AUDITWToVariant(var R : ACTRL_AUDITW) : OleVariant;
function ConvertVariantToACTRL_AUDITW(const V : OleVariant) : ACTRL_AUDITW;
function ConvertACTRL_CONTROL_INFOAToVariant(var R : ACTRL_CONTROL_INFOA) : OleVariant;
function ConvertVariantToACTRL_CONTROL_INFOA(const V : OleVariant) : ACTRL_CONTROL_INFOA;
function ConvertACTRL_CONTROL_INFOWToVariant(var R : ACTRL_CONTROL_INFOW) : OleVariant;
function ConvertVariantToACTRL_CONTROL_INFOW(const V : OleVariant) : ACTRL_CONTROL_INFOW;
function ConvertACTRL_OVERLAPPEDToVariant(var R : ACTRL_OVERLAPPED) : OleVariant;
function ConvertVariantToACTRL_OVERLAPPED(const V : OleVariant) : ACTRL_OVERLAPPED;
function ConvertACTRL_PROPERTY_ENTRYAToVariant(var R : ACTRL_PROPERTY_ENTRYA) : OleVariant;
function ConvertVariantToACTRL_PROPERTY_ENTRYA(const V : OleVariant) : ACTRL_PROPERTY_ENTRYA;
function ConvertACTRL_PROPERTY_ENTRYWToVariant(var R : ACTRL_PROPERTY_ENTRYW) : OleVariant;
function ConvertVariantToACTRL_PROPERTY_ENTRYW(const V : OleVariant) : ACTRL_PROPERTY_ENTRYW;
function ConvertEXPLICIT_ACCESSToVariant(var R : EXPLICIT_ACCESS) : OleVariant;
function ConvertVariantToEXPLICIT_ACCESS(const V : OleVariant) : EXPLICIT_ACCESS;
function ConvertEXPLICIT_ACCESS_AToVariant(var R : EXPLICIT_ACCESS_A) : OleVariant;
function ConvertVariantToEXPLICIT_ACCESS_A(const V : OleVariant) : EXPLICIT_ACCESS_A;
function ConvertEXPLICIT_ACCESS_WToVariant(var R : EXPLICIT_ACCESS_W) : OleVariant;
function ConvertVariantToEXPLICIT_ACCESS_W(const V : OleVariant) : EXPLICIT_ACCESS_W;
function ConvertEXPLICIT_ACCESSAToVariant(var R : EXPLICIT_ACCESSA) : OleVariant;
function ConvertVariantToEXPLICIT_ACCESSA(const V : OleVariant) : EXPLICIT_ACCESSA;
function ConvertEXPLICIT_ACCESSWToVariant(var R : EXPLICIT_ACCESSW) : OleVariant;
function ConvertVariantToEXPLICIT_ACCESSW(const V : OleVariant) : EXPLICIT_ACCESSW;
function ConvertTRUSTEEToVariant(var R : TRUSTEE) : OleVariant;
function ConvertVariantToTRUSTEE(const V : OleVariant) : TRUSTEE;
function ConvertTRUSTEE_ToVariant(var R : TRUSTEE_) : OleVariant;
function ConvertVariantToTRUSTEE_(const V : OleVariant) : TRUSTEE_;
function ConvertTRUSTEE_AToVariant(var R : TRUSTEE_A) : OleVariant;
function ConvertVariantToTRUSTEE_A(const V : OleVariant) : TRUSTEE_A;
function ConvertTRUSTEE_ACCESSAToVariant(var R : TRUSTEE_ACCESSA) : OleVariant;
function ConvertVariantToTRUSTEE_ACCESSA(const V : OleVariant) : TRUSTEE_ACCESSA;
function ConvertTRUSTEE_ACCESSWToVariant(var R : TRUSTEE_ACCESSW) : OleVariant;
function ConvertVariantToTRUSTEE_ACCESSW(const V : OleVariant) : TRUSTEE_ACCESSW;
function ConvertTRUSTEE_WToVariant(var R : TRUSTEE_W) : OleVariant;
function ConvertVariantToTRUSTEE_W(const V : OleVariant) : TRUSTEE_W;
function ConvertTRUSTEEAToVariant(var R : TRUSTEEA) : OleVariant;
function ConvertVariantToTRUSTEEA(const V : OleVariant) : TRUSTEEA;
function ConvertTRUSTEEWToVariant(var R : TRUSTEEW) : OleVariant;
function ConvertVariantToTRUSTEEW(const V : OleVariant) : TRUSTEEW;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type ___TRUSTEE_A__Wrapper = class(TDCRecordWrapper)
private
fR : _TRUSTEE_A;
public
function GetRecordPtr : pointer; override;
published
procedure setMultipleTrusteeOperation(const val : MULTIPLE_TRUSTEE_OPERATION);
function getMultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION;
property MultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION read getMultipleTrusteeOperation write setMultipleTrusteeOperation;
procedure setTrusteeForm(const val : TRUSTEE_FORM);
function getTrusteeForm : TRUSTEE_FORM;
property TrusteeForm : TRUSTEE_FORM read getTrusteeForm write setTrusteeForm;
procedure setTrusteeType(const val : TRUSTEE_TYPE);
function getTrusteeType : TRUSTEE_TYPE;
property TrusteeType : TRUSTEE_TYPE read getTrusteeType write setTrusteeType;
end;
type ___TRUSTEE_W__Wrapper = class(TDCRecordWrapper)
private
fR : _TRUSTEE_W;
public
function GetRecordPtr : pointer; override;
published
procedure setMultipleTrusteeOperation(const val : MULTIPLE_TRUSTEE_OPERATION);
function getMultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION;
property MultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION read getMultipleTrusteeOperation write setMultipleTrusteeOperation;
procedure setTrusteeForm(const val : TRUSTEE_FORM);
function getTrusteeForm : TRUSTEE_FORM;
property TrusteeForm : TRUSTEE_FORM read getTrusteeForm write setTrusteeForm;
procedure setTrusteeType(const val : TRUSTEE_TYPE);
function getTrusteeType : TRUSTEE_TYPE;
property TrusteeType : TRUSTEE_TYPE read getTrusteeType write setTrusteeType;
end;
type __ACTRL_ACCESS_ENTRY_LISTA__Wrapper = class(TDCRecordWrapper)
private
fR : ACTRL_ACCESS_ENTRY_LISTA;
public
function GetRecordPtr : pointer; override;
published
procedure setcEntries(const val : ULONG);
function getcEntries : ULONG;
property cEntries : ULONG read getcEntries write setcEntries;
end;
type __ACTRL_ACCESS_ENTRY_LISTW__Wrapper = class(TDCRecordWrapper)
private
fR : ACTRL_ACCESS_ENTRY_LISTW;
public
function GetRecordPtr : pointer; override;
published
procedure setcEntries(const val : ULONG);
function getcEntries : ULONG;
property cEntries : ULONG read getcEntries write setcEntries;
end;
type __ACTRL_ACCESS_ENTRYA__Wrapper = class(TDCRecordWrapper)
private
fR : ACTRL_ACCESS_ENTRYA;
public
function GetRecordPtr : pointer; override;
published
procedure setfAccessFlags(const val : ULONG);
function getfAccessFlags : ULONG;
property fAccessFlags : ULONG read getfAccessFlags write setfAccessFlags;
procedure setAccess(const val : ACCESS_RIGHTS);
function getAccess : ACCESS_RIGHTS;
property Access : ACCESS_RIGHTS read getAccess write setAccess;
procedure setProvSpecificAccess(const val : ACCESS_RIGHTS);
function getProvSpecificAccess : ACCESS_RIGHTS;
property ProvSpecificAccess : ACCESS_RIGHTS read getProvSpecificAccess write setProvSpecificAccess;
procedure setInheritance(const val : INHERIT_FLAGS);
function getInheritance : INHERIT_FLAGS;
property Inheritance : INHERIT_FLAGS read getInheritance write setInheritance;
end;
type __ACTRL_ACCESS_ENTRYW__Wrapper = class(TDCRecordWrapper)
private
fR : ACTRL_ACCESS_ENTRYW;
public
function GetRecordPtr : pointer; override;
published
procedure setfAccessFlags(const val : ULONG);
function getfAccessFlags : ULONG;
property fAccessFlags : ULONG read getfAccessFlags write setfAccessFlags;
procedure setAccess(const val : ACCESS_RIGHTS);
function getAccess : ACCESS_RIGHTS;
property Access : ACCESS_RIGHTS read getAccess write setAccess;
procedure setProvSpecificAccess(const val : ACCESS_RIGHTS);
function getProvSpecificAccess : ACCESS_RIGHTS;
property ProvSpecificAccess : ACCESS_RIGHTS read getProvSpecificAccess write setProvSpecificAccess;
procedure setInheritance(const val : INHERIT_FLAGS);
function getInheritance : INHERIT_FLAGS;
property Inheritance : INHERIT_FLAGS read getInheritance write setInheritance;
end;
type __ACTRL_ACCESS_INFOA__Wrapper = class(TDCRecordWrapper)
private
fR : ACTRL_ACCESS_INFOA;
public
function GetRecordPtr : pointer; override;
published
procedure setfAccessPermission(const val : ULONG);
function getfAccessPermission : ULONG;
property fAccessPermission : ULONG read getfAccessPermission write setfAccessPermission;
end;
type __ACTRL_ACCESS_INFOW__Wrapper = class(TDCRecordWrapper)
private
fR : ACTRL_ACCESS_INFOW;
public
function GetRecordPtr : pointer; override;
published
procedure setfAccessPermission(const val : ULONG);
function getfAccessPermission : ULONG;
property fAccessPermission : ULONG read getfAccessPermission write setfAccessPermission;
end;
type __ACTRL_ACCESSA__Wrapper = class(TDCRecordWrapper)
private
fR : ACTRL_ACCESSA;
public
function GetRecordPtr : pointer; override;
published
procedure setcEntries(const val : ULONG);
function getcEntries : ULONG;
property cEntries : ULONG read getcEntries write setcEntries;
end;
type __ACTRL_ACCESSW__Wrapper = class(TDCRecordWrapper)
private
fR : ACTRL_ACCESSW;
public
function GetRecordPtr : pointer; override;
published
procedure setcEntries(const val : ULONG);
function getcEntries : ULONG;
property cEntries : ULONG read getcEntries write setcEntries;
end;
type __ACTRL_AUDIT__Wrapper = class(TDCRecordWrapper)
private
fR : ACTRL_AUDIT;
public
function GetRecordPtr : pointer; override;
published
procedure setcEntries(const val : ULONG);
function getcEntries : ULONG;
property cEntries : ULONG read getcEntries write setcEntries;
end;
type __ACTRL_AUDITA__Wrapper = class(TDCRecordWrapper)
private
fR : ACTRL_AUDITA;
public
function GetRecordPtr : pointer; override;
published
procedure setcEntries(const val : ULONG);
function getcEntries : ULONG;
property cEntries : ULONG read getcEntries write setcEntries;
end;
type __ACTRL_AUDITW__Wrapper = class(TDCRecordWrapper)
private
fR : ACTRL_AUDITW;
public
function GetRecordPtr : pointer; override;
published
procedure setcEntries(const val : ULONG);
function getcEntries : ULONG;
property cEntries : ULONG read getcEntries write setcEntries;
end;
type __ACTRL_CONTROL_INFOA__Wrapper = class(TDCRecordWrapper)
private
fR : ACTRL_CONTROL_INFOA;
public
function GetRecordPtr : pointer; override;
published
end;
type __ACTRL_CONTROL_INFOW__Wrapper = class(TDCRecordWrapper)
private
fR : ACTRL_CONTROL_INFOW;
public
function GetRecordPtr : pointer; override;
published
end;
type __ACTRL_OVERLAPPED__Wrapper = class(TDCRecordWrapper)
private
fR : ACTRL_OVERLAPPED;
public
function GetRecordPtr : pointer; override;
published
procedure setRsrvd2(const val : ULONG);
function getRsrvd2 : ULONG;
property Rsrvd2 : ULONG read getRsrvd2 write setRsrvd2;
procedure sethEvnt(const val : THandle);
function gethEvnt : THandle;
property hEvnt : THandle read gethEvnt write sethEvnt;
procedure setReserved1(const val : ULONG);
function getReserved1 : ULONG;
property Reserved1 : ULONG read getReserved1 write setReserved1;
procedure setReserved2(const val : ULONG);
function getReserved2 : ULONG;
property Reserved2 : ULONG read getReserved2 write setReserved2;
procedure sethEvent(const val : THandle);
function gethEvent : THandle;
property hEvent : THandle read gethEvent write sethEvent;
end;
type __ACTRL_PROPERTY_ENTRYA__Wrapper = class(TDCRecordWrapper)
private
fR : ACTRL_PROPERTY_ENTRYA;
public
function GetRecordPtr : pointer; override;
published
procedure setfListFlags(const val : ULONG);
function getfListFlags : ULONG;
property fListFlags : ULONG read getfListFlags write setfListFlags;
end;
type __ACTRL_PROPERTY_ENTRYW__Wrapper = class(TDCRecordWrapper)
private
fR : ACTRL_PROPERTY_ENTRYW;
public
function GetRecordPtr : pointer; override;
published
procedure setfListFlags(const val : ULONG);
function getfListFlags : ULONG;
property fListFlags : ULONG read getfListFlags write setfListFlags;
end;
type __EXPLICIT_ACCESS__Wrapper = class(TDCRecordWrapper)
private
fR : EXPLICIT_ACCESS;
public
function GetRecordPtr : pointer; override;
published
procedure setgrfAccessPermissions(const val : DWORD);
function getgrfAccessPermissions : DWORD;
property grfAccessPermissions : DWORD read getgrfAccessPermissions write setgrfAccessPermissions;
procedure setgrfAccessMode(const val : ACCESS_MODE);
function getgrfAccessMode : ACCESS_MODE;
property grfAccessMode : ACCESS_MODE read getgrfAccessMode write setgrfAccessMode;
procedure setgrfInheritance(const val : DWORD);
function getgrfInheritance : DWORD;
property grfInheritance : DWORD read getgrfInheritance write setgrfInheritance;
end;
type __EXPLICIT_ACCESS_A__Wrapper = class(TDCRecordWrapper)
private
fR : EXPLICIT_ACCESS_A;
public
function GetRecordPtr : pointer; override;
published
procedure setgrfAccessPermissions(const val : DWORD);
function getgrfAccessPermissions : DWORD;
property grfAccessPermissions : DWORD read getgrfAccessPermissions write setgrfAccessPermissions;
procedure setgrfAccessMode(const val : ACCESS_MODE);
function getgrfAccessMode : ACCESS_MODE;
property grfAccessMode : ACCESS_MODE read getgrfAccessMode write setgrfAccessMode;
procedure setgrfInheritance(const val : DWORD);
function getgrfInheritance : DWORD;
property grfInheritance : DWORD read getgrfInheritance write setgrfInheritance;
end;
type __EXPLICIT_ACCESS_W__Wrapper = class(TDCRecordWrapper)
private
fR : EXPLICIT_ACCESS_W;
public
function GetRecordPtr : pointer; override;
published
procedure setgrfAccessPermissions(const val : DWORD);
function getgrfAccessPermissions : DWORD;
property grfAccessPermissions : DWORD read getgrfAccessPermissions write setgrfAccessPermissions;
procedure setgrfAccessMode(const val : ACCESS_MODE);
function getgrfAccessMode : ACCESS_MODE;
property grfAccessMode : ACCESS_MODE read getgrfAccessMode write setgrfAccessMode;
procedure setgrfInheritance(const val : DWORD);
function getgrfInheritance : DWORD;
property grfInheritance : DWORD read getgrfInheritance write setgrfInheritance;
end;
type __EXPLICIT_ACCESSA__Wrapper = class(TDCRecordWrapper)
private
fR : EXPLICIT_ACCESSA;
public
function GetRecordPtr : pointer; override;
published
procedure setgrfAccessPermissions(const val : DWORD);
function getgrfAccessPermissions : DWORD;
property grfAccessPermissions : DWORD read getgrfAccessPermissions write setgrfAccessPermissions;
procedure setgrfAccessMode(const val : ACCESS_MODE);
function getgrfAccessMode : ACCESS_MODE;
property grfAccessMode : ACCESS_MODE read getgrfAccessMode write setgrfAccessMode;
procedure setgrfInheritance(const val : DWORD);
function getgrfInheritance : DWORD;
property grfInheritance : DWORD read getgrfInheritance write setgrfInheritance;
end;
type __EXPLICIT_ACCESSW__Wrapper = class(TDCRecordWrapper)
private
fR : EXPLICIT_ACCESSW;
public
function GetRecordPtr : pointer; override;
published
procedure setgrfAccessPermissions(const val : DWORD);
function getgrfAccessPermissions : DWORD;
property grfAccessPermissions : DWORD read getgrfAccessPermissions write setgrfAccessPermissions;
procedure setgrfAccessMode(const val : ACCESS_MODE);
function getgrfAccessMode : ACCESS_MODE;
property grfAccessMode : ACCESS_MODE read getgrfAccessMode write setgrfAccessMode;
procedure setgrfInheritance(const val : DWORD);
function getgrfInheritance : DWORD;
property grfInheritance : DWORD read getgrfInheritance write setgrfInheritance;
end;
type __TRUSTEE__Wrapper = class(TDCRecordWrapper)
private
fR : TRUSTEE;
public
function GetRecordPtr : pointer; override;
published
procedure setMultipleTrusteeOperation(const val : MULTIPLE_TRUSTEE_OPERATION);
function getMultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION;
property MultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION read getMultipleTrusteeOperation write setMultipleTrusteeOperation;
procedure setTrusteeForm(const val : TRUSTEE_FORM);
function getTrusteeForm : TRUSTEE_FORM;
property TrusteeForm : TRUSTEE_FORM read getTrusteeForm write setTrusteeForm;
procedure setTrusteeType(const val : TRUSTEE_TYPE);
function getTrusteeType : TRUSTEE_TYPE;
property TrusteeType : TRUSTEE_TYPE read getTrusteeType write setTrusteeType;
end;
type __TRUSTEE___Wrapper = class(TDCRecordWrapper)
private
fR : TRUSTEE_;
public
function GetRecordPtr : pointer; override;
published
procedure setMultipleTrusteeOperation(const val : MULTIPLE_TRUSTEE_OPERATION);
function getMultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION;
property MultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION read getMultipleTrusteeOperation write setMultipleTrusteeOperation;
procedure setTrusteeForm(const val : TRUSTEE_FORM);
function getTrusteeForm : TRUSTEE_FORM;
property TrusteeForm : TRUSTEE_FORM read getTrusteeForm write setTrusteeForm;
procedure setTrusteeType(const val : TRUSTEE_TYPE);
function getTrusteeType : TRUSTEE_TYPE;
property TrusteeType : TRUSTEE_TYPE read getTrusteeType write setTrusteeType;
end;
type __TRUSTEE_A__Wrapper = class(TDCRecordWrapper)
private
fR : TRUSTEE_A;
public
function GetRecordPtr : pointer; override;
published
procedure setMultipleTrusteeOperation(const val : MULTIPLE_TRUSTEE_OPERATION);
function getMultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION;
property MultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION read getMultipleTrusteeOperation write setMultipleTrusteeOperation;
procedure setTrusteeForm(const val : TRUSTEE_FORM);
function getTrusteeForm : TRUSTEE_FORM;
property TrusteeForm : TRUSTEE_FORM read getTrusteeForm write setTrusteeForm;
procedure setTrusteeType(const val : TRUSTEE_TYPE);
function getTrusteeType : TRUSTEE_TYPE;
property TrusteeType : TRUSTEE_TYPE read getTrusteeType write setTrusteeType;
end;
type __TRUSTEE_ACCESSA__Wrapper = class(TDCRecordWrapper)
private
fR : TRUSTEE_ACCESSA;
public
function GetRecordPtr : pointer; override;
published
procedure setAccess(const val : ACCESS_RIGHTS);
function getAccess : ACCESS_RIGHTS;
property Access : ACCESS_RIGHTS read getAccess write setAccess;
procedure setfAccessFlags(const val : ULONG);
function getfAccessFlags : ULONG;
property fAccessFlags : ULONG read getfAccessFlags write setfAccessFlags;
procedure setfReturnedAccess(const val : ULONG);
function getfReturnedAccess : ULONG;
property fReturnedAccess : ULONG read getfReturnedAccess write setfReturnedAccess;
end;
type __TRUSTEE_ACCESSW__Wrapper = class(TDCRecordWrapper)
private
fR : TRUSTEE_ACCESSW;
public
function GetRecordPtr : pointer; override;
published
procedure setAccess(const val : ACCESS_RIGHTS);
function getAccess : ACCESS_RIGHTS;
property Access : ACCESS_RIGHTS read getAccess write setAccess;
procedure setfAccessFlags(const val : ULONG);
function getfAccessFlags : ULONG;
property fAccessFlags : ULONG read getfAccessFlags write setfAccessFlags;
procedure setfReturnedAccess(const val : ULONG);
function getfReturnedAccess : ULONG;
property fReturnedAccess : ULONG read getfReturnedAccess write setfReturnedAccess;
end;
type __TRUSTEE_W__Wrapper = class(TDCRecordWrapper)
private
fR : TRUSTEE_W;
public
function GetRecordPtr : pointer; override;
published
procedure setMultipleTrusteeOperation(const val : MULTIPLE_TRUSTEE_OPERATION);
function getMultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION;
property MultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION read getMultipleTrusteeOperation write setMultipleTrusteeOperation;
procedure setTrusteeForm(const val : TRUSTEE_FORM);
function getTrusteeForm : TRUSTEE_FORM;
property TrusteeForm : TRUSTEE_FORM read getTrusteeForm write setTrusteeForm;
procedure setTrusteeType(const val : TRUSTEE_TYPE);
function getTrusteeType : TRUSTEE_TYPE;
property TrusteeType : TRUSTEE_TYPE read getTrusteeType write setTrusteeType;
end;
type __TRUSTEEA__Wrapper = class(TDCRecordWrapper)
private
fR : TRUSTEEA;
public
function GetRecordPtr : pointer; override;
published
procedure setMultipleTrusteeOperation(const val : MULTIPLE_TRUSTEE_OPERATION);
function getMultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION;
property MultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION read getMultipleTrusteeOperation write setMultipleTrusteeOperation;
procedure setTrusteeForm(const val : TRUSTEE_FORM);
function getTrusteeForm : TRUSTEE_FORM;
property TrusteeForm : TRUSTEE_FORM read getTrusteeForm write setTrusteeForm;
procedure setTrusteeType(const val : TRUSTEE_TYPE);
function getTrusteeType : TRUSTEE_TYPE;
property TrusteeType : TRUSTEE_TYPE read getTrusteeType write setTrusteeType;
end;
type __TRUSTEEW__Wrapper = class(TDCRecordWrapper)
private
fR : TRUSTEEW;
public
function GetRecordPtr : pointer; override;
published
procedure setMultipleTrusteeOperation(const val : MULTIPLE_TRUSTEE_OPERATION);
function getMultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION;
property MultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION read getMultipleTrusteeOperation write setMultipleTrusteeOperation;
procedure setTrusteeForm(const val : TRUSTEE_FORM);
function getTrusteeForm : TRUSTEE_FORM;
property TrusteeForm : TRUSTEE_FORM read getTrusteeForm write setTrusteeForm;
procedure setTrusteeType(const val : TRUSTEE_TYPE);
function getTrusteeType : TRUSTEE_TYPE;
property TrusteeType : TRUSTEE_TYPE read getTrusteeType write setTrusteeType;
end;
function ___TRUSTEE_A__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___TRUSTEE_A__Wrapper.setMultipleTrusteeOperation(const val : MULTIPLE_TRUSTEE_OPERATION);
begin
_TRUSTEE_A(GetRecordPtr^).MultipleTrusteeOperation := val;
end;
function ___TRUSTEE_A__Wrapper.getMultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION;
begin
result := _TRUSTEE_A(GetRecordPtr^).MultipleTrusteeOperation;
end;
procedure ___TRUSTEE_A__Wrapper.setTrusteeForm(const val : TRUSTEE_FORM);
begin
_TRUSTEE_A(GetRecordPtr^).TrusteeForm := val;
end;
function ___TRUSTEE_A__Wrapper.getTrusteeForm : TRUSTEE_FORM;
begin
result := _TRUSTEE_A(GetRecordPtr^).TrusteeForm;
end;
procedure ___TRUSTEE_A__Wrapper.setTrusteeType(const val : TRUSTEE_TYPE);
begin
_TRUSTEE_A(GetRecordPtr^).TrusteeType := val;
end;
function ___TRUSTEE_A__Wrapper.getTrusteeType : TRUSTEE_TYPE;
begin
result := _TRUSTEE_A(GetRecordPtr^).TrusteeType;
end;
function ___TRUSTEE_W__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___TRUSTEE_W__Wrapper.setMultipleTrusteeOperation(const val : MULTIPLE_TRUSTEE_OPERATION);
begin
_TRUSTEE_W(GetRecordPtr^).MultipleTrusteeOperation := val;
end;
function ___TRUSTEE_W__Wrapper.getMultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION;
begin
result := _TRUSTEE_W(GetRecordPtr^).MultipleTrusteeOperation;
end;
procedure ___TRUSTEE_W__Wrapper.setTrusteeForm(const val : TRUSTEE_FORM);
begin
_TRUSTEE_W(GetRecordPtr^).TrusteeForm := val;
end;
function ___TRUSTEE_W__Wrapper.getTrusteeForm : TRUSTEE_FORM;
begin
result := _TRUSTEE_W(GetRecordPtr^).TrusteeForm;
end;
procedure ___TRUSTEE_W__Wrapper.setTrusteeType(const val : TRUSTEE_TYPE);
begin
_TRUSTEE_W(GetRecordPtr^).TrusteeType := val;
end;
function ___TRUSTEE_W__Wrapper.getTrusteeType : TRUSTEE_TYPE;
begin
result := _TRUSTEE_W(GetRecordPtr^).TrusteeType;
end;
function __ACTRL_ACCESS_ENTRY_LISTA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ACTRL_ACCESS_ENTRY_LISTA__Wrapper.setcEntries(const val : ULONG);
begin
ACTRL_ACCESS_ENTRY_LISTA(GetRecordPtr^).cEntries := val;
end;
function __ACTRL_ACCESS_ENTRY_LISTA__Wrapper.getcEntries : ULONG;
begin
result := ACTRL_ACCESS_ENTRY_LISTA(GetRecordPtr^).cEntries;
end;
function __ACTRL_ACCESS_ENTRY_LISTW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ACTRL_ACCESS_ENTRY_LISTW__Wrapper.setcEntries(const val : ULONG);
begin
ACTRL_ACCESS_ENTRY_LISTW(GetRecordPtr^).cEntries := val;
end;
function __ACTRL_ACCESS_ENTRY_LISTW__Wrapper.getcEntries : ULONG;
begin
result := ACTRL_ACCESS_ENTRY_LISTW(GetRecordPtr^).cEntries;
end;
function __ACTRL_ACCESS_ENTRYA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ACTRL_ACCESS_ENTRYA__Wrapper.setfAccessFlags(const val : ULONG);
begin
ACTRL_ACCESS_ENTRYA(GetRecordPtr^).fAccessFlags := val;
end;
function __ACTRL_ACCESS_ENTRYA__Wrapper.getfAccessFlags : ULONG;
begin
result := ACTRL_ACCESS_ENTRYA(GetRecordPtr^).fAccessFlags;
end;
procedure __ACTRL_ACCESS_ENTRYA__Wrapper.setAccess(const val : ACCESS_RIGHTS);
begin
ACTRL_ACCESS_ENTRYA(GetRecordPtr^).Access := val;
end;
function __ACTRL_ACCESS_ENTRYA__Wrapper.getAccess : ACCESS_RIGHTS;
begin
result := ACTRL_ACCESS_ENTRYA(GetRecordPtr^).Access;
end;
procedure __ACTRL_ACCESS_ENTRYA__Wrapper.setProvSpecificAccess(const val : ACCESS_RIGHTS);
begin
ACTRL_ACCESS_ENTRYA(GetRecordPtr^).ProvSpecificAccess := val;
end;
function __ACTRL_ACCESS_ENTRYA__Wrapper.getProvSpecificAccess : ACCESS_RIGHTS;
begin
result := ACTRL_ACCESS_ENTRYA(GetRecordPtr^).ProvSpecificAccess;
end;
procedure __ACTRL_ACCESS_ENTRYA__Wrapper.setInheritance(const val : INHERIT_FLAGS);
begin
ACTRL_ACCESS_ENTRYA(GetRecordPtr^).Inheritance := val;
end;
function __ACTRL_ACCESS_ENTRYA__Wrapper.getInheritance : INHERIT_FLAGS;
begin
result := ACTRL_ACCESS_ENTRYA(GetRecordPtr^).Inheritance;
end;
function __ACTRL_ACCESS_ENTRYW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ACTRL_ACCESS_ENTRYW__Wrapper.setfAccessFlags(const val : ULONG);
begin
ACTRL_ACCESS_ENTRYW(GetRecordPtr^).fAccessFlags := val;
end;
function __ACTRL_ACCESS_ENTRYW__Wrapper.getfAccessFlags : ULONG;
begin
result := ACTRL_ACCESS_ENTRYW(GetRecordPtr^).fAccessFlags;
end;
procedure __ACTRL_ACCESS_ENTRYW__Wrapper.setAccess(const val : ACCESS_RIGHTS);
begin
ACTRL_ACCESS_ENTRYW(GetRecordPtr^).Access := val;
end;
function __ACTRL_ACCESS_ENTRYW__Wrapper.getAccess : ACCESS_RIGHTS;
begin
result := ACTRL_ACCESS_ENTRYW(GetRecordPtr^).Access;
end;
procedure __ACTRL_ACCESS_ENTRYW__Wrapper.setProvSpecificAccess(const val : ACCESS_RIGHTS);
begin
ACTRL_ACCESS_ENTRYW(GetRecordPtr^).ProvSpecificAccess := val;
end;
function __ACTRL_ACCESS_ENTRYW__Wrapper.getProvSpecificAccess : ACCESS_RIGHTS;
begin
result := ACTRL_ACCESS_ENTRYW(GetRecordPtr^).ProvSpecificAccess;
end;
procedure __ACTRL_ACCESS_ENTRYW__Wrapper.setInheritance(const val : INHERIT_FLAGS);
begin
ACTRL_ACCESS_ENTRYW(GetRecordPtr^).Inheritance := val;
end;
function __ACTRL_ACCESS_ENTRYW__Wrapper.getInheritance : INHERIT_FLAGS;
begin
result := ACTRL_ACCESS_ENTRYW(GetRecordPtr^).Inheritance;
end;
function __ACTRL_ACCESS_INFOA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ACTRL_ACCESS_INFOA__Wrapper.setfAccessPermission(const val : ULONG);
begin
ACTRL_ACCESS_INFOA(GetRecordPtr^).fAccessPermission := val;
end;
function __ACTRL_ACCESS_INFOA__Wrapper.getfAccessPermission : ULONG;
begin
result := ACTRL_ACCESS_INFOA(GetRecordPtr^).fAccessPermission;
end;
function __ACTRL_ACCESS_INFOW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ACTRL_ACCESS_INFOW__Wrapper.setfAccessPermission(const val : ULONG);
begin
ACTRL_ACCESS_INFOW(GetRecordPtr^).fAccessPermission := val;
end;
function __ACTRL_ACCESS_INFOW__Wrapper.getfAccessPermission : ULONG;
begin
result := ACTRL_ACCESS_INFOW(GetRecordPtr^).fAccessPermission;
end;
function __ACTRL_ACCESSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ACTRL_ACCESSA__Wrapper.setcEntries(const val : ULONG);
begin
ACTRL_ACCESSA(GetRecordPtr^).cEntries := val;
end;
function __ACTRL_ACCESSA__Wrapper.getcEntries : ULONG;
begin
result := ACTRL_ACCESSA(GetRecordPtr^).cEntries;
end;
function __ACTRL_ACCESSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ACTRL_ACCESSW__Wrapper.setcEntries(const val : ULONG);
begin
ACTRL_ACCESSW(GetRecordPtr^).cEntries := val;
end;
function __ACTRL_ACCESSW__Wrapper.getcEntries : ULONG;
begin
result := ACTRL_ACCESSW(GetRecordPtr^).cEntries;
end;
function __ACTRL_AUDIT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ACTRL_AUDIT__Wrapper.setcEntries(const val : ULONG);
begin
ACTRL_AUDIT(GetRecordPtr^).cEntries := val;
end;
function __ACTRL_AUDIT__Wrapper.getcEntries : ULONG;
begin
result := ACTRL_AUDIT(GetRecordPtr^).cEntries;
end;
function __ACTRL_AUDITA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ACTRL_AUDITA__Wrapper.setcEntries(const val : ULONG);
begin
ACTRL_AUDITA(GetRecordPtr^).cEntries := val;
end;
function __ACTRL_AUDITA__Wrapper.getcEntries : ULONG;
begin
result := ACTRL_AUDITA(GetRecordPtr^).cEntries;
end;
function __ACTRL_AUDITW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ACTRL_AUDITW__Wrapper.setcEntries(const val : ULONG);
begin
ACTRL_AUDITW(GetRecordPtr^).cEntries := val;
end;
function __ACTRL_AUDITW__Wrapper.getcEntries : ULONG;
begin
result := ACTRL_AUDITW(GetRecordPtr^).cEntries;
end;
function __ACTRL_CONTROL_INFOA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __ACTRL_CONTROL_INFOW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __ACTRL_OVERLAPPED__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ACTRL_OVERLAPPED__Wrapper.setRsrvd2(const val : ULONG);
begin
ACTRL_OVERLAPPED(GetRecordPtr^).Rsrvd2 := val;
end;
function __ACTRL_OVERLAPPED__Wrapper.getRsrvd2 : ULONG;
begin
result := ACTRL_OVERLAPPED(GetRecordPtr^).Rsrvd2;
end;
procedure __ACTRL_OVERLAPPED__Wrapper.sethEvnt(const val : THandle);
begin
ACTRL_OVERLAPPED(GetRecordPtr^).hEvnt := val;
end;
function __ACTRL_OVERLAPPED__Wrapper.gethEvnt : THandle;
begin
result := ACTRL_OVERLAPPED(GetRecordPtr^).hEvnt;
end;
procedure __ACTRL_OVERLAPPED__Wrapper.setReserved1(const val : ULONG);
begin
ACTRL_OVERLAPPED(GetRecordPtr^).Reserved1 := val;
end;
function __ACTRL_OVERLAPPED__Wrapper.getReserved1 : ULONG;
begin
result := ACTRL_OVERLAPPED(GetRecordPtr^).Reserved1;
end;
procedure __ACTRL_OVERLAPPED__Wrapper.setReserved2(const val : ULONG);
begin
ACTRL_OVERLAPPED(GetRecordPtr^).Reserved2 := val;
end;
function __ACTRL_OVERLAPPED__Wrapper.getReserved2 : ULONG;
begin
result := ACTRL_OVERLAPPED(GetRecordPtr^).Reserved2;
end;
procedure __ACTRL_OVERLAPPED__Wrapper.sethEvent(const val : THandle);
begin
ACTRL_OVERLAPPED(GetRecordPtr^).hEvent := val;
end;
function __ACTRL_OVERLAPPED__Wrapper.gethEvent : THandle;
begin
result := ACTRL_OVERLAPPED(GetRecordPtr^).hEvent;
end;
function __ACTRL_PROPERTY_ENTRYA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ACTRL_PROPERTY_ENTRYA__Wrapper.setfListFlags(const val : ULONG);
begin
ACTRL_PROPERTY_ENTRYA(GetRecordPtr^).fListFlags := val;
end;
function __ACTRL_PROPERTY_ENTRYA__Wrapper.getfListFlags : ULONG;
begin
result := ACTRL_PROPERTY_ENTRYA(GetRecordPtr^).fListFlags;
end;
function __ACTRL_PROPERTY_ENTRYW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ACTRL_PROPERTY_ENTRYW__Wrapper.setfListFlags(const val : ULONG);
begin
ACTRL_PROPERTY_ENTRYW(GetRecordPtr^).fListFlags := val;
end;
function __ACTRL_PROPERTY_ENTRYW__Wrapper.getfListFlags : ULONG;
begin
result := ACTRL_PROPERTY_ENTRYW(GetRecordPtr^).fListFlags;
end;
function __EXPLICIT_ACCESS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __EXPLICIT_ACCESS__Wrapper.setgrfAccessPermissions(const val : DWORD);
begin
EXPLICIT_ACCESS(GetRecordPtr^).grfAccessPermissions := val;
end;
function __EXPLICIT_ACCESS__Wrapper.getgrfAccessPermissions : DWORD;
begin
result := EXPLICIT_ACCESS(GetRecordPtr^).grfAccessPermissions;
end;
procedure __EXPLICIT_ACCESS__Wrapper.setgrfAccessMode(const val : ACCESS_MODE);
begin
EXPLICIT_ACCESS(GetRecordPtr^).grfAccessMode := val;
end;
function __EXPLICIT_ACCESS__Wrapper.getgrfAccessMode : ACCESS_MODE;
begin
result := EXPLICIT_ACCESS(GetRecordPtr^).grfAccessMode;
end;
procedure __EXPLICIT_ACCESS__Wrapper.setgrfInheritance(const val : DWORD);
begin
EXPLICIT_ACCESS(GetRecordPtr^).grfInheritance := val;
end;
function __EXPLICIT_ACCESS__Wrapper.getgrfInheritance : DWORD;
begin
result := EXPLICIT_ACCESS(GetRecordPtr^).grfInheritance;
end;
function __EXPLICIT_ACCESS_A__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __EXPLICIT_ACCESS_A__Wrapper.setgrfAccessPermissions(const val : DWORD);
begin
EXPLICIT_ACCESS_A(GetRecordPtr^).grfAccessPermissions := val;
end;
function __EXPLICIT_ACCESS_A__Wrapper.getgrfAccessPermissions : DWORD;
begin
result := EXPLICIT_ACCESS_A(GetRecordPtr^).grfAccessPermissions;
end;
procedure __EXPLICIT_ACCESS_A__Wrapper.setgrfAccessMode(const val : ACCESS_MODE);
begin
EXPLICIT_ACCESS_A(GetRecordPtr^).grfAccessMode := val;
end;
function __EXPLICIT_ACCESS_A__Wrapper.getgrfAccessMode : ACCESS_MODE;
begin
result := EXPLICIT_ACCESS_A(GetRecordPtr^).grfAccessMode;
end;
procedure __EXPLICIT_ACCESS_A__Wrapper.setgrfInheritance(const val : DWORD);
begin
EXPLICIT_ACCESS_A(GetRecordPtr^).grfInheritance := val;
end;
function __EXPLICIT_ACCESS_A__Wrapper.getgrfInheritance : DWORD;
begin
result := EXPLICIT_ACCESS_A(GetRecordPtr^).grfInheritance;
end;
function __EXPLICIT_ACCESS_W__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __EXPLICIT_ACCESS_W__Wrapper.setgrfAccessPermissions(const val : DWORD);
begin
EXPLICIT_ACCESS_W(GetRecordPtr^).grfAccessPermissions := val;
end;
function __EXPLICIT_ACCESS_W__Wrapper.getgrfAccessPermissions : DWORD;
begin
result := EXPLICIT_ACCESS_W(GetRecordPtr^).grfAccessPermissions;
end;
procedure __EXPLICIT_ACCESS_W__Wrapper.setgrfAccessMode(const val : ACCESS_MODE);
begin
EXPLICIT_ACCESS_W(GetRecordPtr^).grfAccessMode := val;
end;
function __EXPLICIT_ACCESS_W__Wrapper.getgrfAccessMode : ACCESS_MODE;
begin
result := EXPLICIT_ACCESS_W(GetRecordPtr^).grfAccessMode;
end;
procedure __EXPLICIT_ACCESS_W__Wrapper.setgrfInheritance(const val : DWORD);
begin
EXPLICIT_ACCESS_W(GetRecordPtr^).grfInheritance := val;
end;
function __EXPLICIT_ACCESS_W__Wrapper.getgrfInheritance : DWORD;
begin
result := EXPLICIT_ACCESS_W(GetRecordPtr^).grfInheritance;
end;
function __EXPLICIT_ACCESSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __EXPLICIT_ACCESSA__Wrapper.setgrfAccessPermissions(const val : DWORD);
begin
EXPLICIT_ACCESSA(GetRecordPtr^).grfAccessPermissions := val;
end;
function __EXPLICIT_ACCESSA__Wrapper.getgrfAccessPermissions : DWORD;
begin
result := EXPLICIT_ACCESSA(GetRecordPtr^).grfAccessPermissions;
end;
procedure __EXPLICIT_ACCESSA__Wrapper.setgrfAccessMode(const val : ACCESS_MODE);
begin
EXPLICIT_ACCESSA(GetRecordPtr^).grfAccessMode := val;
end;
function __EXPLICIT_ACCESSA__Wrapper.getgrfAccessMode : ACCESS_MODE;
begin
result := EXPLICIT_ACCESSA(GetRecordPtr^).grfAccessMode;
end;
procedure __EXPLICIT_ACCESSA__Wrapper.setgrfInheritance(const val : DWORD);
begin
EXPLICIT_ACCESSA(GetRecordPtr^).grfInheritance := val;
end;
function __EXPLICIT_ACCESSA__Wrapper.getgrfInheritance : DWORD;
begin
result := EXPLICIT_ACCESSA(GetRecordPtr^).grfInheritance;
end;
function __EXPLICIT_ACCESSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __EXPLICIT_ACCESSW__Wrapper.setgrfAccessPermissions(const val : DWORD);
begin
EXPLICIT_ACCESSW(GetRecordPtr^).grfAccessPermissions := val;
end;
function __EXPLICIT_ACCESSW__Wrapper.getgrfAccessPermissions : DWORD;
begin
result := EXPLICIT_ACCESSW(GetRecordPtr^).grfAccessPermissions;
end;
procedure __EXPLICIT_ACCESSW__Wrapper.setgrfAccessMode(const val : ACCESS_MODE);
begin
EXPLICIT_ACCESSW(GetRecordPtr^).grfAccessMode := val;
end;
function __EXPLICIT_ACCESSW__Wrapper.getgrfAccessMode : ACCESS_MODE;
begin
result := EXPLICIT_ACCESSW(GetRecordPtr^).grfAccessMode;
end;
procedure __EXPLICIT_ACCESSW__Wrapper.setgrfInheritance(const val : DWORD);
begin
EXPLICIT_ACCESSW(GetRecordPtr^).grfInheritance := val;
end;
function __EXPLICIT_ACCESSW__Wrapper.getgrfInheritance : DWORD;
begin
result := EXPLICIT_ACCESSW(GetRecordPtr^).grfInheritance;
end;
function __TRUSTEE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRUSTEE__Wrapper.setMultipleTrusteeOperation(const val : MULTIPLE_TRUSTEE_OPERATION);
begin
TRUSTEE(GetRecordPtr^).MultipleTrusteeOperation := val;
end;
function __TRUSTEE__Wrapper.getMultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION;
begin
result := TRUSTEE(GetRecordPtr^).MultipleTrusteeOperation;
end;
procedure __TRUSTEE__Wrapper.setTrusteeForm(const val : TRUSTEE_FORM);
begin
TRUSTEE(GetRecordPtr^).TrusteeForm := val;
end;
function __TRUSTEE__Wrapper.getTrusteeForm : TRUSTEE_FORM;
begin
result := TRUSTEE(GetRecordPtr^).TrusteeForm;
end;
procedure __TRUSTEE__Wrapper.setTrusteeType(const val : TRUSTEE_TYPE);
begin
TRUSTEE(GetRecordPtr^).TrusteeType := val;
end;
function __TRUSTEE__Wrapper.getTrusteeType : TRUSTEE_TYPE;
begin
result := TRUSTEE(GetRecordPtr^).TrusteeType;
end;
function __TRUSTEE___Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRUSTEE___Wrapper.setMultipleTrusteeOperation(const val : MULTIPLE_TRUSTEE_OPERATION);
begin
TRUSTEE_(GetRecordPtr^).MultipleTrusteeOperation := val;
end;
function __TRUSTEE___Wrapper.getMultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION;
begin
result := TRUSTEE_(GetRecordPtr^).MultipleTrusteeOperation;
end;
procedure __TRUSTEE___Wrapper.setTrusteeForm(const val : TRUSTEE_FORM);
begin
TRUSTEE_(GetRecordPtr^).TrusteeForm := val;
end;
function __TRUSTEE___Wrapper.getTrusteeForm : TRUSTEE_FORM;
begin
result := TRUSTEE_(GetRecordPtr^).TrusteeForm;
end;
procedure __TRUSTEE___Wrapper.setTrusteeType(const val : TRUSTEE_TYPE);
begin
TRUSTEE_(GetRecordPtr^).TrusteeType := val;
end;
function __TRUSTEE___Wrapper.getTrusteeType : TRUSTEE_TYPE;
begin
result := TRUSTEE_(GetRecordPtr^).TrusteeType;
end;
function __TRUSTEE_A__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRUSTEE_A__Wrapper.setMultipleTrusteeOperation(const val : MULTIPLE_TRUSTEE_OPERATION);
begin
TRUSTEE_A(GetRecordPtr^).MultipleTrusteeOperation := val;
end;
function __TRUSTEE_A__Wrapper.getMultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION;
begin
result := TRUSTEE_A(GetRecordPtr^).MultipleTrusteeOperation;
end;
procedure __TRUSTEE_A__Wrapper.setTrusteeForm(const val : TRUSTEE_FORM);
begin
TRUSTEE_A(GetRecordPtr^).TrusteeForm := val;
end;
function __TRUSTEE_A__Wrapper.getTrusteeForm : TRUSTEE_FORM;
begin
result := TRUSTEE_A(GetRecordPtr^).TrusteeForm;
end;
procedure __TRUSTEE_A__Wrapper.setTrusteeType(const val : TRUSTEE_TYPE);
begin
TRUSTEE_A(GetRecordPtr^).TrusteeType := val;
end;
function __TRUSTEE_A__Wrapper.getTrusteeType : TRUSTEE_TYPE;
begin
result := TRUSTEE_A(GetRecordPtr^).TrusteeType;
end;
function __TRUSTEE_ACCESSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRUSTEE_ACCESSA__Wrapper.setAccess(const val : ACCESS_RIGHTS);
begin
TRUSTEE_ACCESSA(GetRecordPtr^).Access := val;
end;
function __TRUSTEE_ACCESSA__Wrapper.getAccess : ACCESS_RIGHTS;
begin
result := TRUSTEE_ACCESSA(GetRecordPtr^).Access;
end;
procedure __TRUSTEE_ACCESSA__Wrapper.setfAccessFlags(const val : ULONG);
begin
TRUSTEE_ACCESSA(GetRecordPtr^).fAccessFlags := val;
end;
function __TRUSTEE_ACCESSA__Wrapper.getfAccessFlags : ULONG;
begin
result := TRUSTEE_ACCESSA(GetRecordPtr^).fAccessFlags;
end;
procedure __TRUSTEE_ACCESSA__Wrapper.setfReturnedAccess(const val : ULONG);
begin
TRUSTEE_ACCESSA(GetRecordPtr^).fReturnedAccess := val;
end;
function __TRUSTEE_ACCESSA__Wrapper.getfReturnedAccess : ULONG;
begin
result := TRUSTEE_ACCESSA(GetRecordPtr^).fReturnedAccess;
end;
function __TRUSTEE_ACCESSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRUSTEE_ACCESSW__Wrapper.setAccess(const val : ACCESS_RIGHTS);
begin
TRUSTEE_ACCESSW(GetRecordPtr^).Access := val;
end;
function __TRUSTEE_ACCESSW__Wrapper.getAccess : ACCESS_RIGHTS;
begin
result := TRUSTEE_ACCESSW(GetRecordPtr^).Access;
end;
procedure __TRUSTEE_ACCESSW__Wrapper.setfAccessFlags(const val : ULONG);
begin
TRUSTEE_ACCESSW(GetRecordPtr^).fAccessFlags := val;
end;
function __TRUSTEE_ACCESSW__Wrapper.getfAccessFlags : ULONG;
begin
result := TRUSTEE_ACCESSW(GetRecordPtr^).fAccessFlags;
end;
procedure __TRUSTEE_ACCESSW__Wrapper.setfReturnedAccess(const val : ULONG);
begin
TRUSTEE_ACCESSW(GetRecordPtr^).fReturnedAccess := val;
end;
function __TRUSTEE_ACCESSW__Wrapper.getfReturnedAccess : ULONG;
begin
result := TRUSTEE_ACCESSW(GetRecordPtr^).fReturnedAccess;
end;
function __TRUSTEE_W__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRUSTEE_W__Wrapper.setMultipleTrusteeOperation(const val : MULTIPLE_TRUSTEE_OPERATION);
begin
TRUSTEE_W(GetRecordPtr^).MultipleTrusteeOperation := val;
end;
function __TRUSTEE_W__Wrapper.getMultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION;
begin
result := TRUSTEE_W(GetRecordPtr^).MultipleTrusteeOperation;
end;
procedure __TRUSTEE_W__Wrapper.setTrusteeForm(const val : TRUSTEE_FORM);
begin
TRUSTEE_W(GetRecordPtr^).TrusteeForm := val;
end;
function __TRUSTEE_W__Wrapper.getTrusteeForm : TRUSTEE_FORM;
begin
result := TRUSTEE_W(GetRecordPtr^).TrusteeForm;
end;
procedure __TRUSTEE_W__Wrapper.setTrusteeType(const val : TRUSTEE_TYPE);
begin
TRUSTEE_W(GetRecordPtr^).TrusteeType := val;
end;
function __TRUSTEE_W__Wrapper.getTrusteeType : TRUSTEE_TYPE;
begin
result := TRUSTEE_W(GetRecordPtr^).TrusteeType;
end;
function __TRUSTEEA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRUSTEEA__Wrapper.setMultipleTrusteeOperation(const val : MULTIPLE_TRUSTEE_OPERATION);
begin
TRUSTEEA(GetRecordPtr^).MultipleTrusteeOperation := val;
end;
function __TRUSTEEA__Wrapper.getMultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION;
begin
result := TRUSTEEA(GetRecordPtr^).MultipleTrusteeOperation;
end;
procedure __TRUSTEEA__Wrapper.setTrusteeForm(const val : TRUSTEE_FORM);
begin
TRUSTEEA(GetRecordPtr^).TrusteeForm := val;
end;
function __TRUSTEEA__Wrapper.getTrusteeForm : TRUSTEE_FORM;
begin
result := TRUSTEEA(GetRecordPtr^).TrusteeForm;
end;
procedure __TRUSTEEA__Wrapper.setTrusteeType(const val : TRUSTEE_TYPE);
begin
TRUSTEEA(GetRecordPtr^).TrusteeType := val;
end;
function __TRUSTEEA__Wrapper.getTrusteeType : TRUSTEE_TYPE;
begin
result := TRUSTEEA(GetRecordPtr^).TrusteeType;
end;
function __TRUSTEEW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRUSTEEW__Wrapper.setMultipleTrusteeOperation(const val : MULTIPLE_TRUSTEE_OPERATION);
begin
TRUSTEEW(GetRecordPtr^).MultipleTrusteeOperation := val;
end;
function __TRUSTEEW__Wrapper.getMultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION;
begin
result := TRUSTEEW(GetRecordPtr^).MultipleTrusteeOperation;
end;
procedure __TRUSTEEW__Wrapper.setTrusteeForm(const val : TRUSTEE_FORM);
begin
TRUSTEEW(GetRecordPtr^).TrusteeForm := val;
end;
function __TRUSTEEW__Wrapper.getTrusteeForm : TRUSTEE_FORM;
begin
result := TRUSTEEW(GetRecordPtr^).TrusteeForm;
end;
procedure __TRUSTEEW__Wrapper.setTrusteeType(const val : TRUSTEE_TYPE);
begin
TRUSTEEW(GetRecordPtr^).TrusteeType := val;
end;
function __TRUSTEEW__Wrapper.getTrusteeType : TRUSTEE_TYPE;
begin
result := TRUSTEEW(GetRecordPtr^).TrusteeType;
end;
function __TRUSTEE_A_ : IDispatch;
begin
  result := ___TRUSTEE_A__Wrapper.Create;
end;
function __TRUSTEE_W_ : IDispatch;
begin
  result := ___TRUSTEE_W__Wrapper.Create;
end;
function _ACTRL_ACCESS_ENTRY_LISTA_ : IDispatch;
begin
  result := __ACTRL_ACCESS_ENTRY_LISTA__Wrapper.Create;
end;
function _ACTRL_ACCESS_ENTRY_LISTW_ : IDispatch;
begin
  result := __ACTRL_ACCESS_ENTRY_LISTW__Wrapper.Create;
end;
function _ACTRL_ACCESS_ENTRYA_ : IDispatch;
begin
  result := __ACTRL_ACCESS_ENTRYA__Wrapper.Create;
end;
function _ACTRL_ACCESS_ENTRYW_ : IDispatch;
begin
  result := __ACTRL_ACCESS_ENTRYW__Wrapper.Create;
end;
function _ACTRL_ACCESS_INFOA_ : IDispatch;
begin
  result := __ACTRL_ACCESS_INFOA__Wrapper.Create;
end;
function _ACTRL_ACCESS_INFOW_ : IDispatch;
begin
  result := __ACTRL_ACCESS_INFOW__Wrapper.Create;
end;
function _ACTRL_ACCESSA_ : IDispatch;
begin
  result := __ACTRL_ACCESSA__Wrapper.Create;
end;
function _ACTRL_ACCESSW_ : IDispatch;
begin
  result := __ACTRL_ACCESSW__Wrapper.Create;
end;
function _ACTRL_AUDIT_ : IDispatch;
begin
  result := __ACTRL_AUDIT__Wrapper.Create;
end;
function _ACTRL_AUDITA_ : IDispatch;
begin
  result := __ACTRL_AUDITA__Wrapper.Create;
end;
function _ACTRL_AUDITW_ : IDispatch;
begin
  result := __ACTRL_AUDITW__Wrapper.Create;
end;
function _ACTRL_CONTROL_INFOA_ : IDispatch;
begin
  result := __ACTRL_CONTROL_INFOA__Wrapper.Create;
end;
function _ACTRL_CONTROL_INFOW_ : IDispatch;
begin
  result := __ACTRL_CONTROL_INFOW__Wrapper.Create;
end;
function _ACTRL_OVERLAPPED_ : IDispatch;
begin
  result := __ACTRL_OVERLAPPED__Wrapper.Create;
end;
function _ACTRL_PROPERTY_ENTRYA_ : IDispatch;
begin
  result := __ACTRL_PROPERTY_ENTRYA__Wrapper.Create;
end;
function _ACTRL_PROPERTY_ENTRYW_ : IDispatch;
begin
  result := __ACTRL_PROPERTY_ENTRYW__Wrapper.Create;
end;
function _EXPLICIT_ACCESS_ : IDispatch;
begin
  result := __EXPLICIT_ACCESS__Wrapper.Create;
end;
function _EXPLICIT_ACCESS_A_ : IDispatch;
begin
  result := __EXPLICIT_ACCESS_A__Wrapper.Create;
end;
function _EXPLICIT_ACCESS_W_ : IDispatch;
begin
  result := __EXPLICIT_ACCESS_W__Wrapper.Create;
end;
function _EXPLICIT_ACCESSA_ : IDispatch;
begin
  result := __EXPLICIT_ACCESSA__Wrapper.Create;
end;
function _EXPLICIT_ACCESSW_ : IDispatch;
begin
  result := __EXPLICIT_ACCESSW__Wrapper.Create;
end;
function _TRUSTEE_ : IDispatch;
begin
  result := __TRUSTEE__Wrapper.Create;
end;
function _TRUSTEE__ : IDispatch;
begin
  result := __TRUSTEE___Wrapper.Create;
end;
function _TRUSTEE_A_ : IDispatch;
begin
  result := __TRUSTEE_A__Wrapper.Create;
end;
function _TRUSTEE_ACCESSA_ : IDispatch;
begin
  result := __TRUSTEE_ACCESSA__Wrapper.Create;
end;
function _TRUSTEE_ACCESSW_ : IDispatch;
begin
  result := __TRUSTEE_ACCESSW__Wrapper.Create;
end;
function _TRUSTEE_W_ : IDispatch;
begin
  result := __TRUSTEE_W__Wrapper.Create;
end;
function _TRUSTEEA_ : IDispatch;
begin
  result := __TRUSTEEA__Wrapper.Create;
end;
function _TRUSTEEW_ : IDispatch;
begin
  result := __TRUSTEEW__Wrapper.Create;
end;

type ___TRUSTEE_A__Wrapper__ = class(___TRUSTEE_A__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___TRUSTEE_A__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_TRUSTEE_AToVariant(var R : _TRUSTEE_A) : OleVariant;
var
__rw : ___TRUSTEE_A__Wrapper__;
begin
__rw := ___TRUSTEE_A__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_TRUSTEE_A(const V : OleVariant) : _TRUSTEE_A;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _TRUSTEE_A((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___TRUSTEE_W__Wrapper__ = class(___TRUSTEE_W__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___TRUSTEE_W__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_TRUSTEE_WToVariant(var R : _TRUSTEE_W) : OleVariant;
var
__rw : ___TRUSTEE_W__Wrapper__;
begin
__rw := ___TRUSTEE_W__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_TRUSTEE_W(const V : OleVariant) : _TRUSTEE_W;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _TRUSTEE_W((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ACTRL_ACCESS_ENTRY_LISTA__Wrapper__ = class(__ACTRL_ACCESS_ENTRY_LISTA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ACTRL_ACCESS_ENTRY_LISTA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertACTRL_ACCESS_ENTRY_LISTAToVariant(var R : ACTRL_ACCESS_ENTRY_LISTA) : OleVariant;
var
__rw : __ACTRL_ACCESS_ENTRY_LISTA__Wrapper__;
begin
__rw := __ACTRL_ACCESS_ENTRY_LISTA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToACTRL_ACCESS_ENTRY_LISTA(const V : OleVariant) : ACTRL_ACCESS_ENTRY_LISTA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ACTRL_ACCESS_ENTRY_LISTA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ACTRL_ACCESS_ENTRY_LISTW__Wrapper__ = class(__ACTRL_ACCESS_ENTRY_LISTW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ACTRL_ACCESS_ENTRY_LISTW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertACTRL_ACCESS_ENTRY_LISTWToVariant(var R : ACTRL_ACCESS_ENTRY_LISTW) : OleVariant;
var
__rw : __ACTRL_ACCESS_ENTRY_LISTW__Wrapper__;
begin
__rw := __ACTRL_ACCESS_ENTRY_LISTW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToACTRL_ACCESS_ENTRY_LISTW(const V : OleVariant) : ACTRL_ACCESS_ENTRY_LISTW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ACTRL_ACCESS_ENTRY_LISTW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ACTRL_ACCESS_ENTRYA__Wrapper__ = class(__ACTRL_ACCESS_ENTRYA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ACTRL_ACCESS_ENTRYA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertACTRL_ACCESS_ENTRYAToVariant(var R : ACTRL_ACCESS_ENTRYA) : OleVariant;
var
__rw : __ACTRL_ACCESS_ENTRYA__Wrapper__;
begin
__rw := __ACTRL_ACCESS_ENTRYA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToACTRL_ACCESS_ENTRYA(const V : OleVariant) : ACTRL_ACCESS_ENTRYA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ACTRL_ACCESS_ENTRYA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ACTRL_ACCESS_ENTRYW__Wrapper__ = class(__ACTRL_ACCESS_ENTRYW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ACTRL_ACCESS_ENTRYW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertACTRL_ACCESS_ENTRYWToVariant(var R : ACTRL_ACCESS_ENTRYW) : OleVariant;
var
__rw : __ACTRL_ACCESS_ENTRYW__Wrapper__;
begin
__rw := __ACTRL_ACCESS_ENTRYW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToACTRL_ACCESS_ENTRYW(const V : OleVariant) : ACTRL_ACCESS_ENTRYW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ACTRL_ACCESS_ENTRYW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ACTRL_ACCESS_INFOA__Wrapper__ = class(__ACTRL_ACCESS_INFOA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ACTRL_ACCESS_INFOA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertACTRL_ACCESS_INFOAToVariant(var R : ACTRL_ACCESS_INFOA) : OleVariant;
var
__rw : __ACTRL_ACCESS_INFOA__Wrapper__;
begin
__rw := __ACTRL_ACCESS_INFOA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToACTRL_ACCESS_INFOA(const V : OleVariant) : ACTRL_ACCESS_INFOA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ACTRL_ACCESS_INFOA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ACTRL_ACCESS_INFOW__Wrapper__ = class(__ACTRL_ACCESS_INFOW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ACTRL_ACCESS_INFOW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertACTRL_ACCESS_INFOWToVariant(var R : ACTRL_ACCESS_INFOW) : OleVariant;
var
__rw : __ACTRL_ACCESS_INFOW__Wrapper__;
begin
__rw := __ACTRL_ACCESS_INFOW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToACTRL_ACCESS_INFOW(const V : OleVariant) : ACTRL_ACCESS_INFOW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ACTRL_ACCESS_INFOW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ACTRL_ACCESSA__Wrapper__ = class(__ACTRL_ACCESSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ACTRL_ACCESSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertACTRL_ACCESSAToVariant(var R : ACTRL_ACCESSA) : OleVariant;
var
__rw : __ACTRL_ACCESSA__Wrapper__;
begin
__rw := __ACTRL_ACCESSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToACTRL_ACCESSA(const V : OleVariant) : ACTRL_ACCESSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ACTRL_ACCESSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ACTRL_ACCESSW__Wrapper__ = class(__ACTRL_ACCESSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ACTRL_ACCESSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertACTRL_ACCESSWToVariant(var R : ACTRL_ACCESSW) : OleVariant;
var
__rw : __ACTRL_ACCESSW__Wrapper__;
begin
__rw := __ACTRL_ACCESSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToACTRL_ACCESSW(const V : OleVariant) : ACTRL_ACCESSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ACTRL_ACCESSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ACTRL_AUDIT__Wrapper__ = class(__ACTRL_AUDIT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ACTRL_AUDIT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertACTRL_AUDITToVariant(var R : ACTRL_AUDIT) : OleVariant;
var
__rw : __ACTRL_AUDIT__Wrapper__;
begin
__rw := __ACTRL_AUDIT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToACTRL_AUDIT(const V : OleVariant) : ACTRL_AUDIT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ACTRL_AUDIT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ACTRL_AUDITA__Wrapper__ = class(__ACTRL_AUDITA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ACTRL_AUDITA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertACTRL_AUDITAToVariant(var R : ACTRL_AUDITA) : OleVariant;
var
__rw : __ACTRL_AUDITA__Wrapper__;
begin
__rw := __ACTRL_AUDITA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToACTRL_AUDITA(const V : OleVariant) : ACTRL_AUDITA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ACTRL_AUDITA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ACTRL_AUDITW__Wrapper__ = class(__ACTRL_AUDITW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ACTRL_AUDITW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertACTRL_AUDITWToVariant(var R : ACTRL_AUDITW) : OleVariant;
var
__rw : __ACTRL_AUDITW__Wrapper__;
begin
__rw := __ACTRL_AUDITW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToACTRL_AUDITW(const V : OleVariant) : ACTRL_AUDITW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ACTRL_AUDITW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ACTRL_CONTROL_INFOA__Wrapper__ = class(__ACTRL_CONTROL_INFOA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ACTRL_CONTROL_INFOA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertACTRL_CONTROL_INFOAToVariant(var R : ACTRL_CONTROL_INFOA) : OleVariant;
var
__rw : __ACTRL_CONTROL_INFOA__Wrapper__;
begin
__rw := __ACTRL_CONTROL_INFOA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToACTRL_CONTROL_INFOA(const V : OleVariant) : ACTRL_CONTROL_INFOA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ACTRL_CONTROL_INFOA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ACTRL_CONTROL_INFOW__Wrapper__ = class(__ACTRL_CONTROL_INFOW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ACTRL_CONTROL_INFOW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertACTRL_CONTROL_INFOWToVariant(var R : ACTRL_CONTROL_INFOW) : OleVariant;
var
__rw : __ACTRL_CONTROL_INFOW__Wrapper__;
begin
__rw := __ACTRL_CONTROL_INFOW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToACTRL_CONTROL_INFOW(const V : OleVariant) : ACTRL_CONTROL_INFOW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ACTRL_CONTROL_INFOW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ACTRL_OVERLAPPED__Wrapper__ = class(__ACTRL_OVERLAPPED__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ACTRL_OVERLAPPED__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertACTRL_OVERLAPPEDToVariant(var R : ACTRL_OVERLAPPED) : OleVariant;
var
__rw : __ACTRL_OVERLAPPED__Wrapper__;
begin
__rw := __ACTRL_OVERLAPPED__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToACTRL_OVERLAPPED(const V : OleVariant) : ACTRL_OVERLAPPED;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ACTRL_OVERLAPPED((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ACTRL_PROPERTY_ENTRYA__Wrapper__ = class(__ACTRL_PROPERTY_ENTRYA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ACTRL_PROPERTY_ENTRYA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertACTRL_PROPERTY_ENTRYAToVariant(var R : ACTRL_PROPERTY_ENTRYA) : OleVariant;
var
__rw : __ACTRL_PROPERTY_ENTRYA__Wrapper__;
begin
__rw := __ACTRL_PROPERTY_ENTRYA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToACTRL_PROPERTY_ENTRYA(const V : OleVariant) : ACTRL_PROPERTY_ENTRYA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ACTRL_PROPERTY_ENTRYA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ACTRL_PROPERTY_ENTRYW__Wrapper__ = class(__ACTRL_PROPERTY_ENTRYW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ACTRL_PROPERTY_ENTRYW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertACTRL_PROPERTY_ENTRYWToVariant(var R : ACTRL_PROPERTY_ENTRYW) : OleVariant;
var
__rw : __ACTRL_PROPERTY_ENTRYW__Wrapper__;
begin
__rw := __ACTRL_PROPERTY_ENTRYW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToACTRL_PROPERTY_ENTRYW(const V : OleVariant) : ACTRL_PROPERTY_ENTRYW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ACTRL_PROPERTY_ENTRYW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __EXPLICIT_ACCESS__Wrapper__ = class(__EXPLICIT_ACCESS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __EXPLICIT_ACCESS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertEXPLICIT_ACCESSToVariant(var R : EXPLICIT_ACCESS) : OleVariant;
var
__rw : __EXPLICIT_ACCESS__Wrapper__;
begin
__rw := __EXPLICIT_ACCESS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToEXPLICIT_ACCESS(const V : OleVariant) : EXPLICIT_ACCESS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := EXPLICIT_ACCESS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __EXPLICIT_ACCESS_A__Wrapper__ = class(__EXPLICIT_ACCESS_A__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __EXPLICIT_ACCESS_A__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertEXPLICIT_ACCESS_AToVariant(var R : EXPLICIT_ACCESS_A) : OleVariant;
var
__rw : __EXPLICIT_ACCESS_A__Wrapper__;
begin
__rw := __EXPLICIT_ACCESS_A__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToEXPLICIT_ACCESS_A(const V : OleVariant) : EXPLICIT_ACCESS_A;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := EXPLICIT_ACCESS_A((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __EXPLICIT_ACCESS_W__Wrapper__ = class(__EXPLICIT_ACCESS_W__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __EXPLICIT_ACCESS_W__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertEXPLICIT_ACCESS_WToVariant(var R : EXPLICIT_ACCESS_W) : OleVariant;
var
__rw : __EXPLICIT_ACCESS_W__Wrapper__;
begin
__rw := __EXPLICIT_ACCESS_W__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToEXPLICIT_ACCESS_W(const V : OleVariant) : EXPLICIT_ACCESS_W;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := EXPLICIT_ACCESS_W((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __EXPLICIT_ACCESSA__Wrapper__ = class(__EXPLICIT_ACCESSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __EXPLICIT_ACCESSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertEXPLICIT_ACCESSAToVariant(var R : EXPLICIT_ACCESSA) : OleVariant;
var
__rw : __EXPLICIT_ACCESSA__Wrapper__;
begin
__rw := __EXPLICIT_ACCESSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToEXPLICIT_ACCESSA(const V : OleVariant) : EXPLICIT_ACCESSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := EXPLICIT_ACCESSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __EXPLICIT_ACCESSW__Wrapper__ = class(__EXPLICIT_ACCESSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __EXPLICIT_ACCESSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertEXPLICIT_ACCESSWToVariant(var R : EXPLICIT_ACCESSW) : OleVariant;
var
__rw : __EXPLICIT_ACCESSW__Wrapper__;
begin
__rw := __EXPLICIT_ACCESSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToEXPLICIT_ACCESSW(const V : OleVariant) : EXPLICIT_ACCESSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := EXPLICIT_ACCESSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRUSTEE__Wrapper__ = class(__TRUSTEE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRUSTEE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRUSTEEToVariant(var R : TRUSTEE) : OleVariant;
var
__rw : __TRUSTEE__Wrapper__;
begin
__rw := __TRUSTEE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRUSTEE(const V : OleVariant) : TRUSTEE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRUSTEE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRUSTEE___Wrapper__ = class(__TRUSTEE___Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRUSTEE___Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRUSTEE_ToVariant(var R : TRUSTEE_) : OleVariant;
var
__rw : __TRUSTEE___Wrapper__;
begin
__rw := __TRUSTEE___Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRUSTEE_(const V : OleVariant) : TRUSTEE_;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRUSTEE_((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRUSTEE_A__Wrapper__ = class(__TRUSTEE_A__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRUSTEE_A__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRUSTEE_AToVariant(var R : TRUSTEE_A) : OleVariant;
var
__rw : __TRUSTEE_A__Wrapper__;
begin
__rw := __TRUSTEE_A__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRUSTEE_A(const V : OleVariant) : TRUSTEE_A;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRUSTEE_A((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRUSTEE_ACCESSA__Wrapper__ = class(__TRUSTEE_ACCESSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRUSTEE_ACCESSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRUSTEE_ACCESSAToVariant(var R : TRUSTEE_ACCESSA) : OleVariant;
var
__rw : __TRUSTEE_ACCESSA__Wrapper__;
begin
__rw := __TRUSTEE_ACCESSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRUSTEE_ACCESSA(const V : OleVariant) : TRUSTEE_ACCESSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRUSTEE_ACCESSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRUSTEE_ACCESSW__Wrapper__ = class(__TRUSTEE_ACCESSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRUSTEE_ACCESSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRUSTEE_ACCESSWToVariant(var R : TRUSTEE_ACCESSW) : OleVariant;
var
__rw : __TRUSTEE_ACCESSW__Wrapper__;
begin
__rw := __TRUSTEE_ACCESSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRUSTEE_ACCESSW(const V : OleVariant) : TRUSTEE_ACCESSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRUSTEE_ACCESSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRUSTEE_W__Wrapper__ = class(__TRUSTEE_W__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRUSTEE_W__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRUSTEE_WToVariant(var R : TRUSTEE_W) : OleVariant;
var
__rw : __TRUSTEE_W__Wrapper__;
begin
__rw := __TRUSTEE_W__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRUSTEE_W(const V : OleVariant) : TRUSTEE_W;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRUSTEE_W((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRUSTEEA__Wrapper__ = class(__TRUSTEEA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRUSTEEA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRUSTEEAToVariant(var R : TRUSTEEA) : OleVariant;
var
__rw : __TRUSTEEA__Wrapper__;
begin
__rw := __TRUSTEEA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRUSTEEA(const V : OleVariant) : TRUSTEEA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRUSTEEA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRUSTEEW__Wrapper__ = class(__TRUSTEEW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRUSTEEW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRUSTEEWToVariant(var R : TRUSTEEW) : OleVariant;
var
__rw : __TRUSTEEW__Wrapper__;
begin
__rw := __TRUSTEEW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRUSTEEW(const V : OleVariant) : TRUSTEEW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRUSTEEW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..153] of string = (
'TRUSTEE_IS_UNKNOWN'
,'TRUSTEE_IS_USER'
,'TRUSTEE_IS_GROUP'
,'TRUSTEE_IS_DOMAIN'
,'TRUSTEE_IS_ALIAS'
,'TRUSTEE_IS_WELL_KNOWN_GROUP'
,'TRUSTEE_IS_DELETED'
,'TRUSTEE_IS_INVALID'
,'TRUSTEE_IS_SID'
,'TRUSTEE_IS_NAME'
,'TRUSTEE_BAD_FORM'
,'NO_MULTIPLE_TRUSTEE'
,'TRUSTEE_IS_IMPERSONATE'
,'NOT_USED_ACCESS'
,'GRANT_ACCESS'
,'SET_ACCESS'
,'DENY_ACCESS'
,'REVOKE_ACCESS'
,'SET_AUDIT_SUCCESS'
,'SET_AUDIT_FAILURE'
,'NO_INHERITANCE'
,'SUB_OBJECTS_ONLY_INHERIT'
,'SUB_CONTAINERS_ONLY_INHERIT'
,'SUB_CONTAINERS_AND_OBJECTS_INHERIT'
,'INHERIT_NO_PROPAGATE'
,'INHERIT_ONLY'
,'INHERITED_ACCESS_ENTRY'
,'INHERITED_PARENT'
,'INHERITED_GRANDPARENT'
,'SE_UNKNOWN_OBJECT_TYPE'
,'SE_FILE_OBJECT'
,'SE_SERVICE'
,'SE_PRINTER'
,'SE_REGISTRY_KEY'
,'SE_LMSHARE'
,'SE_KERNEL_OBJECT'
,'SE_WINDOW_OBJECT'
,'SE_DS_OBJECT'
,'SE_DS_OBJECT_ALL'
,'SE_PROVIDER_DEFINED_OBJECT'
,'SE_WMIGUID_OBJECT'
,'ACCCTRL_DEFAULT_PROVIDERA'
,'ACCCTRL_DEFAULT_PROVIDERW'
,'ACCCTRL_DEFAULT_PROVIDER'
,'TRUSTEE_ACCESS_ALLOWED'
,'TRUSTEE_ACCESS_READ'
,'TRUSTEE_ACCESS_WRITE'
,'TRUSTEE_ACCESS_EXPLICIT'
,'TRUSTEE_ACCESS_ALL'
,'ACTRL_RESERVED'
,'ACTRL_PERM_1'
,'ACTRL_PERM_2'
,'ACTRL_PERM_3'
,'ACTRL_PERM_4'
,'ACTRL_PERM_5'
,'ACTRL_PERM_6'
,'ACTRL_PERM_7'
,'ACTRL_PERM_8'
,'ACTRL_PERM_9'
,'ACTRL_PERM_10'
,'ACTRL_PERM_11'
,'ACTRL_PERM_12'
,'ACTRL_PERM_13'
,'ACTRL_PERM_14'
,'ACTRL_PERM_15'
,'ACTRL_PERM_16'
,'ACTRL_PERM_17'
,'ACTRL_PERM_18'
,'ACTRL_PERM_19'
,'ACTRL_PERM_20'
,'ACTRL_ACCESS_ALLOWED'
,'ACTRL_ACCESS_DENIED'
,'ACTRL_AUDIT_SUCCESS'
,'ACTRL_AUDIT_FAILURE'
,'ACTRL_ACCESS_PROTECTED'
,'ACTRL_SYSTEM_ACCESS'
,'ACTRL_DELETE'
,'ACTRL_READ_CONTROL'
,'ACTRL_CHANGE_ACCESS'
,'ACTRL_CHANGE_OWNER'
,'ACTRL_SYNCHRONIZE'
,'ACTRL_STD_RIGHTS_ALL'
,'ACTRL_STD_RIGHT_REQUIRED'
,'ACTRL_DS_OPEN'
,'ACTRL_DS_CREATE_CHILD'
,'ACTRL_DS_DELETE_CHILD'
,'ACTRL_DS_LIST'
,'ACTRL_DS_SELF'
,'ACTRL_DS_READ_PROP'
,'ACTRL_DS_WRITE_PROP'
,'ACTRL_DS_DELETE_TREE'
,'ACTRL_DS_LIST_OBJECT'
,'ACTRL_DS_CONTROL_ACCESS'
,'ACTRL_FILE_READ'
,'ACTRL_FILE_WRITE'
,'ACTRL_FILE_APPEND'
,'ACTRL_FILE_READ_PROP'
,'ACTRL_FILE_WRITE_PROP'
,'ACTRL_FILE_EXECUTE'
,'ACTRL_FILE_READ_ATTRIB'
,'ACTRL_FILE_WRITE_ATTRIB'
,'ACTRL_FILE_CREATE_PIPE'
,'ACTRL_DIR_LIST'
,'ACTRL_DIR_CREATE_OBJECT'
,'ACTRL_DIR_CREATE_CHILD'
,'ACTRL_DIR_DELETE_CHILD'
,'ACTRL_DIR_TRAVERSE'
,'ACTRL_KERNEL_TERMINATE'
,'ACTRL_KERNEL_THREAD'
,'ACTRL_KERNEL_VM'
,'ACTRL_KERNEL_VM_READ'
,'ACTRL_KERNEL_VM_WRITE'
,'ACTRL_KERNEL_DUP_HANDLE'
,'ACTRL_KERNEL_PROCESS'
,'ACTRL_KERNEL_SET_INFO'
,'ACTRL_KERNEL_GET_INFO'
,'ACTRL_KERNEL_CONTROL'
,'ACTRL_KERNEL_ALERT'
,'ACTRL_KERNEL_GET_CONTEXT'
,'ACTRL_KERNEL_SET_CONTEXT'
,'ACTRL_KERNEL_TOKEN'
,'ACTRL_KERNEL_IMPERSONATE'
,'ACTRL_KERNEL_DIMPERSONATE'
,'ACTRL_PRINT_SADMIN'
,'ACTRL_PRINT_SLIST'
,'ACTRL_PRINT_PADMIN'
,'ACTRL_PRINT_PUSE'
,'ACTRL_PRINT_JADMIN'
,'ACTRL_SVC_GET_INFO'
,'ACTRL_SVC_SET_INFO'
,'ACTRL_SVC_STATUS'
,'ACTRL_SVC_LIST'
,'ACTRL_SVC_START'
,'ACTRL_SVC_STOP'
,'ACTRL_SVC_PAUSE'
,'ACTRL_SVC_INTERROGATE'
,'ACTRL_SVC_UCONTROL'
,'ACTRL_REG_QUERY'
,'ACTRL_REG_SET'
,'ACTRL_REG_CREATE_CHILD'
,'ACTRL_REG_LIST'
,'ACTRL_REG_NOTIFY'
,'ACTRL_REG_LINK'
,'ACTRL_WIN_CLIPBRD'
,'ACTRL_WIN_GLOBAL_ATOMS'
,'ACTRL_WIN_CREATE'
,'ACTRL_WIN_LIST_DESK'
,'ACTRL_WIN_LIST'
,'ACTRL_WIN_READ_ATTRIBS'
,'ACTRL_WIN_WRITE_ATTRIBS'
,'ACTRL_WIN_SCREEN'
,'ACTRL_WIN_EXIT'
,'ACTRL_ACCESS_NO_OPTIONS'
,'ACTRL_ACCESS_SUPPORTS_OBJECT_ENTRIES'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,TRUSTEE_IS_UNKNOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,TRUSTEE_IS_USER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,TRUSTEE_IS_GROUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,TRUSTEE_IS_DOMAIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,TRUSTEE_IS_ALIAS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,TRUSTEE_IS_WELL_KNOWN_GROUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,TRUSTEE_IS_DELETED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,TRUSTEE_IS_INVALID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,TRUSTEE_IS_SID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,TRUSTEE_IS_NAME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,TRUSTEE_BAD_FORM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,NO_MULTIPLE_TRUSTEE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,TRUSTEE_IS_IMPERSONATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,NOT_USED_ACCESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,GRANT_ACCESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,SET_ACCESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,DENY_ACCESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,REVOKE_ACCESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,SET_AUDIT_SUCCESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,SET_AUDIT_FAILURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,NO_INHERITANCE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,SUB_OBJECTS_ONLY_INHERIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,SUB_CONTAINERS_ONLY_INHERIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,SUB_CONTAINERS_AND_OBJECTS_INHERIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,INHERIT_NO_PROPAGATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,INHERIT_ONLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,INHERITED_ACCESS_ENTRY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,INHERITED_PARENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,INHERITED_GRANDPARENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,SE_UNKNOWN_OBJECT_TYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,SE_FILE_OBJECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,SE_SERVICE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,SE_PRINTER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,SE_REGISTRY_KEY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,SE_LMSHARE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,SE_KERNEL_OBJECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,SE_WINDOW_OBJECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,SE_DS_OBJECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,SE_DS_OBJECT_ALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,SE_PROVIDER_DEFINED_OBJECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,SE_WMIGUID_OBJECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,ACCCTRL_DEFAULT_PROVIDERA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,ACCCTRL_DEFAULT_PROVIDERW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,ACCCTRL_DEFAULT_PROVIDER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,TRUSTEE_ACCESS_ALLOWED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,TRUSTEE_ACCESS_READ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,TRUSTEE_ACCESS_WRITE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,TRUSTEE_ACCESS_EXPLICIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,TRUSTEE_ACCESS_ALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,ACTRL_RESERVED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,ACTRL_PERM_1));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,ACTRL_PERM_2));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,ACTRL_PERM_3));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,ACTRL_PERM_4));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,ACTRL_PERM_5));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,ACTRL_PERM_6));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,ACTRL_PERM_7));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,ACTRL_PERM_8));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,ACTRL_PERM_9));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,ACTRL_PERM_10));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,ACTRL_PERM_11));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,ACTRL_PERM_12));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,ACTRL_PERM_13));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,ACTRL_PERM_14));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,ACTRL_PERM_15));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[65] ,ACTRL_PERM_16));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[66] ,ACTRL_PERM_17));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[67] ,ACTRL_PERM_18));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[68] ,ACTRL_PERM_19));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[69] ,ACTRL_PERM_20));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[70] ,ACTRL_ACCESS_ALLOWED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[71] ,ACTRL_ACCESS_DENIED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[72] ,ACTRL_AUDIT_SUCCESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[73] ,ACTRL_AUDIT_FAILURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[74] ,ACTRL_ACCESS_PROTECTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[75] ,ACTRL_SYSTEM_ACCESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[76] ,ACTRL_DELETE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[77] ,ACTRL_READ_CONTROL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[78] ,ACTRL_CHANGE_ACCESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[79] ,ACTRL_CHANGE_OWNER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[80] ,ACTRL_SYNCHRONIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[81] ,ACTRL_STD_RIGHTS_ALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[82] ,ACTRL_STD_RIGHT_REQUIRED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[83] ,ACTRL_DS_OPEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[84] ,ACTRL_DS_CREATE_CHILD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[85] ,ACTRL_DS_DELETE_CHILD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[86] ,ACTRL_DS_LIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[87] ,ACTRL_DS_SELF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[88] ,ACTRL_DS_READ_PROP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[89] ,ACTRL_DS_WRITE_PROP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[90] ,ACTRL_DS_DELETE_TREE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[91] ,ACTRL_DS_LIST_OBJECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[92] ,ACTRL_DS_CONTROL_ACCESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[93] ,ACTRL_FILE_READ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[94] ,ACTRL_FILE_WRITE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[95] ,ACTRL_FILE_APPEND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[96] ,ACTRL_FILE_READ_PROP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[97] ,ACTRL_FILE_WRITE_PROP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[98] ,ACTRL_FILE_EXECUTE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[99] ,ACTRL_FILE_READ_ATTRIB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[100] ,ACTRL_FILE_WRITE_ATTRIB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[101] ,ACTRL_FILE_CREATE_PIPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[102] ,ACTRL_DIR_LIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[103] ,ACTRL_DIR_CREATE_OBJECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[104] ,ACTRL_DIR_CREATE_CHILD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[105] ,ACTRL_DIR_DELETE_CHILD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[106] ,ACTRL_DIR_TRAVERSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[107] ,ACTRL_KERNEL_TERMINATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[108] ,ACTRL_KERNEL_THREAD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[109] ,ACTRL_KERNEL_VM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[110] ,ACTRL_KERNEL_VM_READ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[111] ,ACTRL_KERNEL_VM_WRITE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[112] ,ACTRL_KERNEL_DUP_HANDLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[113] ,ACTRL_KERNEL_PROCESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[114] ,ACTRL_KERNEL_SET_INFO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[115] ,ACTRL_KERNEL_GET_INFO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[116] ,ACTRL_KERNEL_CONTROL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[117] ,ACTRL_KERNEL_ALERT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[118] ,ACTRL_KERNEL_GET_CONTEXT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[119] ,ACTRL_KERNEL_SET_CONTEXT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[120] ,ACTRL_KERNEL_TOKEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[121] ,ACTRL_KERNEL_IMPERSONATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[122] ,ACTRL_KERNEL_DIMPERSONATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[123] ,ACTRL_PRINT_SADMIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[124] ,ACTRL_PRINT_SLIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[125] ,ACTRL_PRINT_PADMIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[126] ,ACTRL_PRINT_PUSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[127] ,ACTRL_PRINT_JADMIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[128] ,ACTRL_SVC_GET_INFO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[129] ,ACTRL_SVC_SET_INFO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[130] ,ACTRL_SVC_STATUS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[131] ,ACTRL_SVC_LIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[132] ,ACTRL_SVC_START));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[133] ,ACTRL_SVC_STOP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[134] ,ACTRL_SVC_PAUSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[135] ,ACTRL_SVC_INTERROGATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[136] ,ACTRL_SVC_UCONTROL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[137] ,ACTRL_REG_QUERY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[138] ,ACTRL_REG_SET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[139] ,ACTRL_REG_CREATE_CHILD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[140] ,ACTRL_REG_LIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[141] ,ACTRL_REG_NOTIFY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[142] ,ACTRL_REG_LINK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[143] ,ACTRL_WIN_CLIPBRD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[144] ,ACTRL_WIN_GLOBAL_ATOMS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[145] ,ACTRL_WIN_CREATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[146] ,ACTRL_WIN_LIST_DESK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[147] ,ACTRL_WIN_LIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[148] ,ACTRL_WIN_READ_ATTRIBS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[149] ,ACTRL_WIN_WRITE_ATTRIBS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[150] ,ACTRL_WIN_SCREEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[151] ,ACTRL_WIN_EXIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[152] ,ACTRL_ACCESS_NO_OPTIONS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[153] ,ACTRL_ACCESS_SUPPORTS_OBJECT_ENTRIES));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..30] of string = (
'_TRUSTEE_A'
,'_TRUSTEE_W'
,'ACTRL_ACCESS_ENTRY_LISTA'
,'ACTRL_ACCESS_ENTRY_LISTW'
,'ACTRL_ACCESS_ENTRYA'
,'ACTRL_ACCESS_ENTRYW'
,'ACTRL_ACCESS_INFOA'
,'ACTRL_ACCESS_INFOW'
,'ACTRL_ACCESSA'
,'ACTRL_ACCESSW'
,'ACTRL_AUDIT'
,'ACTRL_AUDITA'
,'ACTRL_AUDITW'
,'ACTRL_CONTROL_INFOA'
,'ACTRL_CONTROL_INFOW'
,'ACTRL_OVERLAPPED'
,'ACTRL_PROPERTY_ENTRYA'
,'ACTRL_PROPERTY_ENTRYW'
,'EXPLICIT_ACCESS'
,'EXPLICIT_ACCESS_A'
,'EXPLICIT_ACCESS_W'
,'EXPLICIT_ACCESSA'
,'EXPLICIT_ACCESSW'
,'TRUSTEE'
,'TRUSTEE_'
,'TRUSTEE_A'
,'TRUSTEE_ACCESSA'
,'TRUSTEE_ACCESSW'
,'TRUSTEE_W'
,'TRUSTEEA'
,'TRUSTEEW'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(__TRUSTEE_A_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(__TRUSTEE_W_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_ACTRL_ACCESS_ENTRY_LISTA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(_ACTRL_ACCESS_ENTRY_LISTW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(_ACTRL_ACCESS_ENTRYA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[5],Addr(_ACTRL_ACCESS_ENTRYW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[6],Addr(_ACTRL_ACCESS_INFOA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[7],Addr(_ACTRL_ACCESS_INFOW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[8],Addr(_ACTRL_ACCESSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[9],Addr(_ACTRL_ACCESSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[10],Addr(_ACTRL_AUDIT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[11],Addr(_ACTRL_AUDITA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[12],Addr(_ACTRL_AUDITW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[13],Addr(_ACTRL_CONTROL_INFOA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[14],Addr(_ACTRL_CONTROL_INFOW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[15],Addr(_ACTRL_OVERLAPPED_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[16],Addr(_ACTRL_PROPERTY_ENTRYA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[17],Addr(_ACTRL_PROPERTY_ENTRYW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[18],Addr(_EXPLICIT_ACCESS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[19],Addr(_EXPLICIT_ACCESS_A_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[20],Addr(_EXPLICIT_ACCESS_W_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[21],Addr(_EXPLICIT_ACCESSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[22],Addr(_EXPLICIT_ACCESSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[23],Addr(_TRUSTEE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[24],Addr(_TRUSTEE__)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[25],Addr(_TRUSTEE_A_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[26],Addr(_TRUSTEE_ACCESSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[27],Addr(_TRUSTEE_ACCESSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[28],Addr(_TRUSTEE_W_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[29],Addr(_TRUSTEEA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[30],Addr(_TRUSTEEW_)));
end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
