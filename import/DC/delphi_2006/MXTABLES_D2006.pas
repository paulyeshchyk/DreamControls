{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit MXTABLES_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  SysUtils,
  Graphics,
  Classes,
  Controls,
  DB,
  DBCommon,
  BDE,
  DBTables,
  MXCOMMON,
  MXQPARSE,
  MXQEDCOM,
  Mxarrays,
  MXTABLES;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = function (p0 : TXtabQuery;
p1 : TQueryDims;
p2 : string): TQueryError of object;

_T1 = function (p0 : TXtabQuery;
p1 : TQueryDims): TQueryError of object;

_T2 = function (p0 : TXtabQuery;
p1 : TQueryDims;
p2 : Integer;
p3 : string): TQueryError of object;

_T3 = function (p0 : TXtabQuery;
p1 : TQueryDims;
p2 : Integer): TQueryError of object;

_T4 = function : TQueryDim of object;

function __DC__GetTQueryDim__Active(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TQueryDim(Instance).Active;
end;

procedure __DC__SetTQueryDim__Active(Instance : TObject; Params : PVariantArgList);
begin
TQueryDim(Instance).Active:=OleVariant(Params^[0]);
end;

function __DC__GetTQueryDims__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TQueryDims(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __DC__SetTQueryDims__Items(Instance : TObject; Params : PVariantArgList);
begin
TQueryDims(Instance).Items[OleVariant(Params^[1])]:=TQueryDim(VarToObject(OleVariant(Params^[0])));
end;

procedure __RegisterProps;
begin
RegisterProperty(TQueryDim,'Active',__DC__GetTQueryDim__Active,__DC__SetTQueryDim__Active);
RegisterIndexedProperty(TQueryDims,'Items',1,True,__DC__GetTQueryDims__Items,__DC__SetTQueryDims__Items);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..2] of TClass = (
TDecisionQuery,
TQueryDim,
TQueryDims
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..3] of string = (
'BuildDimensionMap'
,'BuildMasterDimensionMap'
,'AddDimensionItem'
,'RemoveDimensionItem'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(TXtabQuery),
TypeInfo(TQueryDims),
TypeInfo(string),TypeInfo(TQueryError)],Addr(BuildDimensionMap),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(TXtabQuery),
TypeInfo(TQueryDims),TypeInfo(TQueryError)],Addr(BuildMasterDimensionMap),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T2),[
TypeInfo(TXtabQuery),
TypeInfo(TQueryDims),
TypeInfo(Integer),
TypeInfo(string),TypeInfo(TQueryError)],Addr(AddDimensionItem),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T3),[
TypeInfo(TXtabQuery),
TypeInfo(TQueryDims),
TypeInfo(Integer),TypeInfo(TQueryError)],Addr(RemoveDimensionItem),cRegister);

RegRegisterMethod(TQueryDims,'Add',TypeInfo(_T4),[TypeInfo(TQueryDim)],Addr(TQueryDims.Add));

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
