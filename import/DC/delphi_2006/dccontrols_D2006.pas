{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit dccontrols_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  Types,
  activex,
  dcscript,
  dcsystem,
  windows,
  forms,
  controls,
  graphics,
  messages,
  extctrls,
  classes,
  dcdreamlib,
  dccontrols;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
function ConvertTSizeToVariant(var R : TSize) : OleVariant;
function ConvertVariantToTSize(const V : OleVariant) : TSize;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TSize__Wrapper = class(TDCRecordWrapper)
private
fR : TSize;
public
function GetRecordPtr : pointer; override;
published
procedure setcx(const val : Longint);
function getcx : Longint;
property cx : Longint read getcx write setcx;
procedure setcy(const val : Longint);
function getcy : Longint;
property cy : Longint read getcy write setcy;
end;
type __TRect__Wrapper = class(TDCRecordWrapper)
private
fR : TRect;
public
function GetRecordPtr : pointer; override;
published
procedure setLeft(const val : Longint);
function getLeft : Longint;
property Left : Longint read getLeft write setLeft;
procedure setTop(const val : Longint);
function getTop : Longint;
property Top : Longint read getTop write setTop;
procedure setRight(const val : Longint);
function getRight : Longint;
property Right : Longint read getRight write setRight;
procedure setBottom(const val : Longint);
function getBottom : Longint;
property Bottom : Longint read getBottom write setBottom;
end;
type __TPoint__Wrapper = class(TDCRecordWrapper)
private
fR : TPoint;
public
function GetRecordPtr : pointer; override;
published
procedure setX(const val : Longint);
function getX : Longint;
property X : Longint read getX write setX;
procedure setY(const val : Longint);
function getY : Longint;
property Y : Longint read getY write setY;
end;
type __TControlBackground__ = class(TControlBackground);
type __TDCHint__ = class(TDCHint);
type
_T0 = function (p0 : TCanvas;
p1 : TFont;
p2 : TFont;
const p3 : string): IDispatch of object;

_T1 = function (const p0 : string;
var p1 : Integer): string of object;

_T2 = function (p0 : TCanvas;
const p1 : string): IDispatch of object;

_T3 = function (const p0 : string;
var p1 : Integer;
var p2 : Integer): string of object;

_T4 = procedure (p0 : TCanvas;
p1 : TFont;
p2 : TFont;
const p3 : IDispatch;
const p4 : string;
p5 : Integer;
p6 : Integer;
p7 : TLeftRightAlign) of object;

_T5 = procedure (p0 : TCanvas;
p1 : Integer;
p2 : Integer;
p3 : TColor;
p4 : TColor;
p5 : Boolean) of object;

_T6 = procedure (p0 : TCanvas;
p1 : Integer;
p2 : Integer;
p3 : Integer;
p4 : Integer;
p5 : Boolean) of object;

_T7 = function : IDispatch of object;

_T8 = function : TBrush of object;

_T9 = function : Boolean of object;

_T10 = procedure (p0 : TCustomControl) of object;

_T11 = procedure  of object;

_T12 = _T11;

_T13 = _T11;

_T14 = function (const p0 : IDispatch;
const p1 : IDispatch): Boolean of object;

_T15 = procedure (const p0 : IDispatch;
const p1 : string) of object;

_T16 = procedure (const p0 : string) of object;

_T17 = _T11;

_T18 = function (const p0 : string): IDispatch of object;

function __TSize__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSize__Wrapper.setcx(const val : Longint);
begin
TSize(GetRecordPtr^).cx := val;
end;
function __TSize__Wrapper.getcx : Longint;
begin
result := TSize(GetRecordPtr^).cx;
end;
procedure __TSize__Wrapper.setcy(const val : Longint);
begin
TSize(GetRecordPtr^).cy := val;
end;
function __TSize__Wrapper.getcy : Longint;
begin
result := TSize(GetRecordPtr^).cy;
end;
function __TRect__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRect__Wrapper.setLeft(const val : Longint);
begin
TRect(GetRecordPtr^).Left := val;
end;
function __TRect__Wrapper.getLeft : Longint;
begin
result := TRect(GetRecordPtr^).Left;
end;
procedure __TRect__Wrapper.setTop(const val : Longint);
begin
TRect(GetRecordPtr^).Top := val;
end;
function __TRect__Wrapper.getTop : Longint;
begin
result := TRect(GetRecordPtr^).Top;
end;
procedure __TRect__Wrapper.setRight(const val : Longint);
begin
TRect(GetRecordPtr^).Right := val;
end;
function __TRect__Wrapper.getRight : Longint;
begin
result := TRect(GetRecordPtr^).Right;
end;
procedure __TRect__Wrapper.setBottom(const val : Longint);
begin
TRect(GetRecordPtr^).Bottom := val;
end;
function __TRect__Wrapper.getBottom : Longint;
begin
result := TRect(GetRecordPtr^).Bottom;
end;
function __TPoint__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPoint__Wrapper.setX(const val : Longint);
begin
TPoint(GetRecordPtr^).X := val;
end;
function __TPoint__Wrapper.getX : Longint;
begin
result := TPoint(GetRecordPtr^).X;
end;
procedure __TPoint__Wrapper.setY(const val : Longint);
begin
TPoint(GetRecordPtr^).Y := val;
end;
function __TPoint__Wrapper.getY : Longint;
begin
result := TPoint(GetRecordPtr^).Y;
end;
function ____CalcStringSize__Wrapper(p0 : TCanvas;
p1 : TFont;
p2 : TFont;
const p3 : string): IDispatch;
var
__result : TSize;
__wrapper : __TSize__Wrapper;
begin
__result := CalcStringSize(p0,p1,p2,p3);
__wrapper := __TSize__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

function ____GetStringExtent__Wrapper(p0 : TCanvas;
const p1 : string): IDispatch;
var
__result : TSize;
__wrapper : __TSize__Wrapper;
begin
__result := GetStringExtent(p0,p1);
__wrapper := __TSize__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

procedure ____DrawWithSelection__Wrapper(p0 : TCanvas;
p1 : TFont;
p2 : TFont;
const p3 : IDispatch;
const p4 : string;
p5 : Integer;
p6 : Integer;
p7 : TLeftRightAlign);
var
__p3 : ^TRect;
__i3 : IDispatch;
begin
if p3 = nil then exit;
__p3 := (p3 as IDCRecordWrapper).GetRecordPtr;
DrawWithSelection(p0,p1,p2,__p3^,p4,p5,p6,p7);
end;

function __TControlBackground__GetPaintRect__Wrapper(__Instance : TControlBackground): IDispatch;
var
__result : TRect;
__wrapper : __TRect__Wrapper;
begin
__result := __TControlBackground__(__Instance).GetPaintRect;
__wrapper := __TRect__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

function __TDCHint__IsHintInRect__Wrapper(__Instance : TDCHint;
const p0 : IDispatch;
const p1 : IDispatch): Boolean;
var
__p0 : ^TRect;
__i0 : IDispatch;
__p1 : ^TPoint;
__i1 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := __TDCHint__(__Instance).IsHintInRect(__p0^,__p1^);
end;

procedure __TDCHint__ActivateHintAtPos__Wrapper(__Instance : TDCHint;
const p0 : IDispatch;
const p1 : string);
var
__p0 : ^TPoint;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
TDCHint(__Instance).ActivateHintAtPos(__p0^,p1);
end;

function __TDCHint__GetSize__Wrapper(__Instance : TDCHint;
const p0 : string): IDispatch;
var
__result : TSize;
__wrapper : __TSize__Wrapper;
begin
__result := TDCHint(__Instance).GetSize(p0);
__wrapper := __TSize__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;


type __TPoint__Wrapper__ = class(__TPoint__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPoint__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
var
__rw : __TPoint__Wrapper__;
begin
__rw := __TPoint__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPoint((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRect__Wrapper__ = class(__TRect__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRect__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
var
__rw : __TRect__Wrapper__;
begin
__rw := __TRect__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRect((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSize__Wrapper__ = class(__TSize__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSize__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSizeToVariant(var R : TSize) : OleVariant;
var
__rw : __TSize__Wrapper__;
begin
__rw := __TSize__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSize(const V : OleVariant) : TSize;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSize((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTControlBackground__Owner(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TControlBackground(Instance).Owner);
end;

function __DC__GetTControlBackground__TempBackground(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TControlBackground(Instance).TempBackground);
end;

function __DC__GetTDCHint__HintWindow(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDCHint(Instance).HintWindow);
end;

procedure __RegisterProps;
begin
RegisterProperty(TControlBackground,'Owner',__DC__GetTControlBackground__Owner,nil);
RegisterProperty(TControlBackground,'TempBackground',__DC__GetTControlBackground__TempBackground,nil);
RegisterProperty(TDCHint,'HintWindow',__DC__GetTDCHint__HintWindow,nil);
end;

const __ConstNames0 : array[0..10] of string = (
'hsShow'
,'hsHide'
,'hsBeginShow'
,'boNone'
,'boStretch'
,'boCenter'
,'boTile'
,'boHorzGradient'
,'boVertGradient'
,'lrLeftJustify'
,'lrRightJustify'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,hsShow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,hsHide));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,hsBeginShow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,boNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,boStretch));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,boCenter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,boTile));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,boHorzGradient));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,boVertGradient));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,lrLeftJustify));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,lrRightJustify));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..1] of TClass = (
TControlBackground,
TDCHint
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..6] of string = (
'CalcStringSize'
,'ExtractColumn'
,'GetStringExtent'
,'ExtractBoldPos'
,'DrawWithSelection'
,'FillGradient'
,'PaintExpandCollapse'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(TCanvas),
TypeInfo(TFont),
TypeInfo(TFont),
TypeInfo(string),TypeInfo(IDispatch)],Addr(____CalcStringSize__Wrapper),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(string),
TypeInfo(Integer),TypeInfo(string)],Addr(ExtractColumn),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T2),[
TypeInfo(TCanvas),
TypeInfo(string),TypeInfo(IDispatch)],Addr(____GetStringExtent__Wrapper),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T3),[
TypeInfo(string),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(string)],Addr(ExtractBoldPos),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T4),[
TypeInfo(TCanvas),
TypeInfo(TFont),
TypeInfo(TFont),
TypeInfo(IDispatch),
TypeInfo(string),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(TLeftRightAlign)],Addr(____DrawWithSelection__Wrapper),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T5),[
TypeInfo(TCanvas),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(TColor),
TypeInfo(TColor),
TypeInfo(Boolean)],Addr(FillGradient),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T6),[
TypeInfo(TCanvas),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Boolean)],Addr(PaintExpandCollapse),cRegister);

//RegRegisterMethod(TControlBackground,'GetPaintRect',TypeInfo(_T7),[TypeInfo(IDispatch)], pointer(12));
RegRegisterMethod(TControlBackground,'GetPaintRect',TypeInfo(_T7),[TypeInfo(IDispatch)],  getVMTProcAddr('TControlBackground','GetPaintRect',12));


//RegRegisterMethod(TControlBackground,'GetPaintBrush',TypeInfo(_T8),[TypeInfo(TBrush)], pointer(16));
RegRegisterMethod(TControlBackground,'GetPaintBrush',TypeInfo(_T8),[TypeInfo(TBrush)],  getVMTProcAddr('TControlBackground','GetPaintBrush',16));


RegRegisterMethod(TControlBackground,'NeedPaint',TypeInfo(_T9),[TypeInfo(Boolean)],Addr(TControlBackground.NeedPaint));

RegisterProc(TControlBackground,'Create',mtConstructor,TypeInfo(_T10),[
TypeInfo(TCustomControl)],Addr(TControlBackground.Create),cRegister);

//RegRegisterMethod(TControlBackground,'PaintBackground',TypeInfo(_T11),NoParams, pointer(20));
RegRegisterMethod(TControlBackground,'PaintBackground',TypeInfo(_T11),NoParams,  getVMTProcAddr('TControlBackground','PaintBackground',20));


//RegRegisterMethod(TDCHint,'ExecHintTimer',TypeInfo(_T12),NoParams, pointer(48));
RegRegisterMethod(TDCHint,'ExecHintTimer',TypeInfo(_T12),NoParams,  getVMTProcAddr('TDCHint','ExecHintTimer',48));


//RegRegisterMethod(TDCHint,'VisibleChanged',TypeInfo(_T13),NoParams, pointer(52));
RegRegisterMethod(TDCHint,'VisibleChanged',TypeInfo(_T13),NoParams,  getVMTProcAddr('TDCHint','VisibleChanged',52));


//RegRegisterMethod(TDCHint,'IsHintInRect',TypeInfo(_T14),[TypeInfo(IDispatch),TypeInfo(IDispatch),TypeInfo(Boolean)], pointer(56));
RegRegisterMethod(TDCHint,'IsHintInRect',TypeInfo(_T14),[TypeInfo(IDispatch),TypeInfo(IDispatch),TypeInfo(Boolean)],  getVMTProcAddr('TDCHint','IsHintInRect',56));


RegRegisterMethod(TDCHint,'ActivateHintAtPos',TypeInfo(_T15),[
TypeInfo(IDispatch),
TypeInfo(string)],Addr(__TDCHint__ActivateHintAtPos__Wrapper));

RegRegisterMethod(TDCHint,'ActivateHint',TypeInfo(_T16),[
TypeInfo(string)],Addr(TDCHint.ActivateHint));

RegRegisterMethod(TDCHint,'CancelHint',TypeInfo(_T17),NoParams,Addr(TDCHint.CancelHint));

RegRegisterMethod(TDCHint,'GetSize',TypeInfo(_T18),[
TypeInfo(string),TypeInfo(IDispatch)],Addr(__TDCHint__GetSize__Wrapper));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
