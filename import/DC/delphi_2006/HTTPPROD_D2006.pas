{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit HTTPPROD_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Classes,
  HTTPApp,
  Masks,
  Contnrs,
  HTTPProd;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
{_T0 = function (p0 : TStream;
p1 : TWebModuleContext;
p2 : Boolean;
p3 : THandleTagProc;
p4 : THandledTagProc;
const p5 : string;
p6 : ILocateFileService): string of object;}

{_T1 = function (const p0 : TFileName;
p1 : TWebModuleContext;
p2 : Boolean;
p3 : THandleTagProc;
p4 : THandledTagProc;
const p5 : string;
p6 : ILocateFileService): string of object;}

_T2 = function (p0 : TComponent): TWebModuleContext of object;

_T3 = function (const p0 : string): TTag of object;

{_T4 = function (p0 : TStream;
p1 : Boolean;
p2 : THandleTagProc;
p3 : THandledTagProc): string of object;}

{_T5 = function (const p0 : string;
p1 : Boolean;
p2 : THandleTagProc;
p3 : THandledTagProc): string of object;}

_T6 = procedure (const p0 : TAbstractScriptErrors;
const p1 : string) of object;

_T7 = procedure  of object;

{_T8 = function (const p0 : string): TScriptProducerClass of object;}

_T9 = function : string of object;

_T10 = function : Integer of object;

_T11 = _T10;

_T12 = _T9;

_T13 = procedure (const p0 : string) of object;

_T14 = _T9;

_T15 = function (p0 : Integer): TAbstractScriptError of object;

_T16 = _T10;

_T17 = procedure (const p0 : TAbstractScriptError) of object;

{_T18 = procedure (p0 : TWebModuleContext;
p1 : Boolean;
p2 : THandleTagProc;
const p3 : string;
p4 : ILocateFileService) of object;}

_T19 = _T9;

_T20 = function : Boolean of object;

_T21 = function (const p0 : string;
p1 : TStrings): string of object;

_T22 = procedure (p0 : TTag;
const p1 : string;
p2 : TStrings;
var p3 : string) of object;

_T23 = function (const p0 : string;
p1 : TStrings;
var p2 : string): Boolean of object;

_T24 = _T9;

_T25 = function (out p0 : Boolean): TStream of object;

_T26 = procedure (p0 : TCustomContentProducer) of object;

_T27 = _T26;

_T28 = _T7;

function __DC__GetEScriptError__Errors(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(EScriptError(Instance).Errors);
end;

function __DC__GetEScriptError__Content(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := EScriptError(Instance).Content;
end;

function __DC__GetTAbstractScriptError__Line(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TAbstractScriptError(Instance).Line;
end;

function __DC__GetTAbstractScriptError__CharPos(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TAbstractScriptError(Instance).CharPos;
end;

function __DC__GetTAbstractScriptError__Description(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TAbstractScriptError(Instance).Description;
end;

procedure __DC__SetTAbstractScriptError__Description(Instance : TObject; Params : PVariantArgList);
begin
TAbstractScriptError(Instance).Description:=OleVariant(Params^[0]);
end;

function __DC__GetTAbstractScriptError__SourceLine(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TAbstractScriptError(Instance).SourceLine;
end;

function __DC__GetTAbstractScriptError__FileName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TAbstractScriptError(Instance).FileName;
end;

function __DC__GetTAbstractScriptErrors__Errors(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TAbstractScriptErrors(Instance).Errors[OleVariant(Params^[0])]);
end;

function __DC__GetTAbstractScriptErrors__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TAbstractScriptErrors(Instance).Count;
end;

function __DC__GetTBasePageProducer__WebModuleContext(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TBasePageProducer(Instance).WebModuleContext);
end;

function __DC__GetTBasePageProducer__StripParamQuotes(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBasePageProducer(Instance).StripParamQuotes;
end;

procedure __DC__SetTBasePageProducer__StripParamQuotes(Instance : TObject; Params : PVariantArgList);
begin
TBasePageProducer(Instance).StripParamQuotes:=OleVariant(Params^[0]);
end;

function __DC__GetTBasePageProducer__ScriptEngine(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBasePageProducer(Instance).ScriptEngine;
end;

procedure __DC__SetTBasePageProducer__ScriptEngine(Instance : TObject; Params : PVariantArgList);
begin
TBasePageProducer(Instance).ScriptEngine:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomPageProducer__HTMLDoc(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomPageProducer(Instance).HTMLDoc);
end;

procedure __DC__SetTCustomPageProducer__HTMLDoc(Instance : TObject; Params : PVariantArgList);
begin
TCustomPageProducer(Instance).HTMLDoc:=TStrings(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomPageProducer__HTMLFile(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomPageProducer(Instance).HTMLFile;
end;

procedure __DC__SetTCustomPageProducer__HTMLFile(Instance : TObject; Params : PVariantArgList);
begin
TCustomPageProducer(Instance).HTMLFile:=OleVariant(Params^[0]);
end;

function __DC__GetTHTMLTagAttributes__Producer(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(THTMLTagAttributes(Instance).Producer);
end;

procedure __RegisterProps;
begin
RegisterProperty(EScriptError,'Errors',__DC__GetEScriptError__Errors,nil);
RegisterProperty(EScriptError,'Content',__DC__GetEScriptError__Content,nil);
RegisterProperty(TAbstractScriptError,'Line',__DC__GetTAbstractScriptError__Line,nil);
RegisterProperty(TAbstractScriptError,'CharPos',__DC__GetTAbstractScriptError__CharPos,nil);
RegisterProperty(TAbstractScriptError,'Description',__DC__GetTAbstractScriptError__Description,__DC__SetTAbstractScriptError__Description);
RegisterProperty(TAbstractScriptError,'SourceLine',__DC__GetTAbstractScriptError__SourceLine,nil);
RegisterProperty(TAbstractScriptError,'FileName',__DC__GetTAbstractScriptError__FileName,nil);
RegisterIndexedProperty(TAbstractScriptErrors,'Errors',1,True,__DC__GetTAbstractScriptErrors__Errors,nil);
RegisterProperty(TAbstractScriptErrors,'Count',__DC__GetTAbstractScriptErrors__Count,nil);
RegisterProperty(TBasePageProducer,'WebModuleContext',__DC__GetTBasePageProducer__WebModuleContext,nil);
RegisterProperty(TBasePageProducer,'StripParamQuotes',__DC__GetTBasePageProducer__StripParamQuotes,__DC__SetTBasePageProducer__StripParamQuotes);
RegisterProperty(TBasePageProducer,'ScriptEngine',__DC__GetTBasePageProducer__ScriptEngine,__DC__SetTBasePageProducer__ScriptEngine);
RegisterProperty(TCustomPageProducer,'HTMLDoc',__DC__GetTCustomPageProducer__HTMLDoc,__DC__SetTCustomPageProducer__HTMLDoc);
RegisterProperty(TCustomPageProducer,'HTMLFile',__DC__GetTCustomPageProducer__HTMLFile,__DC__SetTCustomPageProducer__HTMLFile);
RegisterProperty(THTMLTagAttributes,'Producer',__DC__GetTHTMLTagAttributes__Producer,nil);
end;

function __DC__GetHTTPProd__ScriptEnginesList(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(HTTPProd.ScriptEnginesList);
end;

procedure __DC__SetHTTPProd__ScriptEnginesList(Instance : TObject; Params : PVariantArgList);
begin
TObject(HTTPProd.ScriptEnginesList):=(VarToObject(OleVariant(Params^[0])));
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('ScriptEnginesList',__DC__GetHTTPProd__ScriptEnginesList,__DC__SetHTTPProd__ScriptEnginesList));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..15] of string = (
'haDefault'
,'haLeft'
,'haRight'
,'haCenter'
,'haVDefault'
,'haTop'
,'haMiddle'
,'haBottom'
,'haBaseline'
,'tgCustom'
,'tgLink'
,'tgImage'
,'tgTable'
,'tgImageMap'
,'tgObject'
,'tgEmbed'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,haDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,haLeft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,haRight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,haCenter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,haVDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,haTop));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,haMiddle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,haBottom));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,haBaseline));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,tgCustom));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,tgLink));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,tgImage));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,tgTable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,tgImageMap));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,tgObject));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,tgEmbed));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..13] of TClass = (
EScriptError,
TAbstractScriptEnginesList,
TAbstractScriptError,
TAbstractScriptErrors,
TAbstractScriptProducer,
TBasePageProducer,
TCustomPageProducer,
THTMLTableAttributes,
THTMLTableCellAttributes,
THTMLTableElementAttributes,
THTMLTableHeaderAttributes,
THTMLTableRowAttributes,
THTMLTagAttributes,
TPageProducer
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..1] of string = (
'FindComponentWebModuleContext'
,'GetTagID'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T2),[
TypeInfo(TComponent),TypeInfo(TWebModuleContext)],Addr(FindComponentWebModuleContext),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T3),[
TypeInfo(string),TypeInfo(TTag)],Addr(GetTagID),cRegister);

RegisterProc(EScriptError,'Create',mtConstructor,TypeInfo(_T6),[
TypeInfo(TAbstractScriptErrors),
TypeInfo(string)],Addr(EScriptError.Create),cRegister);

RegisterProc(TAbstractScriptEnginesList,'Create',mtConstructor,TypeInfo(_T7),NoParams,Addr(TAbstractScriptEnginesList.Create),cRegister);

//RegRegisterMethod(TAbstractScriptError,'GetSourceLine',TypeInfo(_T9),[TypeInfo(string)], pointer(0));
RegRegisterMethod(TAbstractScriptError,'GetSourceLine',TypeInfo(_T9),[TypeInfo(string)],  getVMTProcAddr('TAbstractScriptError','GetSourceLine',0));


//RegRegisterMethod(TAbstractScriptError,'GetCharPos',TypeInfo(_T10),[TypeInfo(Integer)], pointer(4));
RegRegisterMethod(TAbstractScriptError,'GetCharPos',TypeInfo(_T10),[TypeInfo(Integer)],  getVMTProcAddr('TAbstractScriptError','GetCharPos',4));


//RegRegisterMethod(TAbstractScriptError,'GetLine',TypeInfo(_T11),[TypeInfo(Integer)], pointer(8));
RegRegisterMethod(TAbstractScriptError,'GetLine',TypeInfo(_T11),[TypeInfo(Integer)],  getVMTProcAddr('TAbstractScriptError','GetLine',8));


//RegRegisterMethod(TAbstractScriptError,'GetDescription',TypeInfo(_T12),[TypeInfo(string)], pointer(12));
RegRegisterMethod(TAbstractScriptError,'GetDescription',TypeInfo(_T12),[TypeInfo(string)],  getVMTProcAddr('TAbstractScriptError','GetDescription',12));


//RegRegisterMethod(TAbstractScriptError,'SetDescription',TypeInfo(_T13),[TypeInfo(string)], pointer(16));
RegRegisterMethod(TAbstractScriptError,'SetDescription',TypeInfo(_T13),[TypeInfo(string)],  getVMTProcAddr('TAbstractScriptError','SetDescription',16));


//RegRegisterMethod(TAbstractScriptError,'GetFileName',TypeInfo(_T14),[TypeInfo(string)], pointer(20));
RegRegisterMethod(TAbstractScriptError,'GetFileName',TypeInfo(_T14),[TypeInfo(string)],  getVMTProcAddr('TAbstractScriptError','GetFileName',20));


//RegRegisterMethod(TAbstractScriptErrors,'GetError',TypeInfo(_T15),[TypeInfo(Integer),TypeInfo(TAbstractScriptError)], pointer(0));
RegRegisterMethod(TAbstractScriptErrors,'GetError',TypeInfo(_T15),[TypeInfo(Integer),TypeInfo(TAbstractScriptError)],  getVMTProcAddr('TAbstractScriptErrors','GetError',0));


//RegRegisterMethod(TAbstractScriptErrors,'GetErrorCount',TypeInfo(_T16),[TypeInfo(Integer)], pointer(4));
RegRegisterMethod(TAbstractScriptErrors,'GetErrorCount',TypeInfo(_T16),[TypeInfo(Integer)],  getVMTProcAddr('TAbstractScriptErrors','GetErrorCount',4));


//RegRegisterMethod(TAbstractScriptErrors,'Add',TypeInfo(_T17),[TypeInfo(TAbstractScriptError)], pointer(8));
RegRegisterMethod(TAbstractScriptErrors,'Add',TypeInfo(_T17),[TypeInfo(TAbstractScriptError)],  getVMTProcAddr('TAbstractScriptErrors','Add',8));


//RegRegisterMethod(TBasePageProducer,'GetScriptEngine',TypeInfo(_T19),[TypeInfo(string)], pointer(60));
RegRegisterMethod(TBasePageProducer,'GetScriptEngine',TypeInfo(_T19),[TypeInfo(string)],  getVMTProcAddr('TBasePageProducer','GetScriptEngine',60));


//RegRegisterMethod(TBasePageProducer,'UseScriptEngine',TypeInfo(_T20),[TypeInfo(Boolean)], pointer(64));
RegRegisterMethod(TBasePageProducer,'UseScriptEngine',TypeInfo(_T20),[TypeInfo(Boolean)],  getVMTProcAddr('TBasePageProducer','UseScriptEngine',64));


//RegRegisterMethod(TBasePageProducer,'HandleTag',TypeInfo(_T21),[TypeInfo(string),TypeInfo(TStrings),TypeInfo(string)], pointer(68));
RegRegisterMethod(TBasePageProducer,'HandleTag',TypeInfo(_T21),[TypeInfo(string),TypeInfo(TStrings),TypeInfo(string)],  getVMTProcAddr('TBasePageProducer','HandleTag',68));


RegRegisterMethod(TBasePageProducer,'DoTagEvent',TypeInfo(_T22),[
TypeInfo(TTag),
TypeInfo(string),
TypeInfo(TStrings),
TypeInfo(string)], pointer(MinVMTOffset - 16));

//RegRegisterMethod(TBasePageProducer,'HandleScriptTag',TypeInfo(_T23),[TypeInfo(string),TypeInfo(TStrings),TypeInfo(string),TypeInfo(Boolean)], pointer(72));
RegRegisterMethod(TBasePageProducer,'HandleScriptTag',TypeInfo(_T23),[TypeInfo(string),TypeInfo(TStrings),TypeInfo(string),TypeInfo(Boolean)],  getVMTProcAddr('TBasePageProducer','HandleScriptTag',72));


//RegRegisterMethod(TBasePageProducer,'GetTemplateFileName',TypeInfo(_T24),[TypeInfo(string)], pointer(76));
RegRegisterMethod(TBasePageProducer,'GetTemplateFileName',TypeInfo(_T24),[TypeInfo(string)],  getVMTProcAddr('TBasePageProducer','GetTemplateFileName',76));


//RegRegisterMethod(TBasePageProducer,'GetTemplateStream',TypeInfo(_T25),[TypeInfo(Boolean),TypeInfo(TStream)], pointer(80));
RegRegisterMethod(TBasePageProducer,'GetTemplateStream',TypeInfo(_T25),[TypeInfo(Boolean),TypeInfo(TStream)],  getVMTProcAddr('TBasePageProducer','GetTemplateStream',80));


RegisterProc(THTMLTableAttributes,'Create',mtConstructor,TypeInfo(_T26),[
TypeInfo(TCustomContentProducer)],Addr(THTMLTableAttributes.Create),cRegister);

RegisterProc(THTMLTagAttributes,'Create',mtConstructor,TypeInfo(_T27),[
TypeInfo(TCustomContentProducer)],Addr(THTMLTagAttributes.Create),cRegister);

//RegRegisterMethod(THTMLTagAttributes,'RestoreDefaults',TypeInfo(_T28),NoParams, pointer(12));
RegRegisterMethod(THTMLTagAttributes,'RestoreDefaults',TypeInfo(_T28),NoParams,  getVMTProcAddr('THTMLTagAttributes','RestoreDefaults',12));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'ContentFromScriptStream',mtProc,TypeInfo(_T0),[
TypeInfo(TStream),
TypeInfo(TWebModuleContext),
TypeInfo(Boolean),
TypeInfo(THandleTagProc),
TypeInfo(THandledTagProc),
TypeInfo(string),
TypeInfo(ILocateFileService),TypeInfo(string)],Addr(ContentFromScriptStream),cRegister)}

{RegisterProc(nil,'ContentFromScriptFile',mtProc,TypeInfo(_T1),[
TypeInfo(TFileName),
TypeInfo(TWebModuleContext),
TypeInfo(Boolean),
TypeInfo(THandleTagProc),
TypeInfo(THandledTagProc),
TypeInfo(string),
TypeInfo(ILocateFileService),TypeInfo(string)],Addr(ContentFromScriptFile),cRegister)}

{RegisterProc(nil,'ContentFromStream',mtProc,TypeInfo(_T4),[
TypeInfo(TStream),
TypeInfo(Boolean),
TypeInfo(THandleTagProc),
TypeInfo(THandledTagProc),TypeInfo(string)],Addr(ContentFromStream),cRegister)}

{RegisterProc(nil,'ContentFromString',mtProc,TypeInfo(_T5),[
TypeInfo(string),
TypeInfo(Boolean),
TypeInfo(THandleTagProc),
TypeInfo(THandledTagProc),TypeInfo(string)],Addr(ContentFromString),cRegister)}

{RegRegisterMethod(TAbstractScriptEnginesList,'FindScriptProducerClass',TypeInfo(_T8),[
TypeInfo(string),TypeInfo(TScriptProducerClass)], pointer(0))}

{RegisterProc(TAbstractScriptProducer,'Create',mtConstructor,TypeInfo(_T18),[
TypeInfo(TWebModuleContext),
TypeInfo(Boolean),
TypeInfo(THandleTagProc),
TypeInfo(string),
TypeInfo(ILocateFileService)], pointer(0),cRegister)}

RegisterEvent(TypeInfo(THandledTagProc),[
TypeInfo(string),
TypeInfo(TStrings),
TypeInfo(string),TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(THandleTagProc),[
TypeInfo(string),
TypeInfo(TStrings),TypeInfo(string)]);

RegisterEvent(TypeInfo(THTMLTagEvent),[
TypeInfo(TObject),
TypeInfo(TTag),
TypeInfo(string),
TypeInfo(TStrings),
TypeInfo(string)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
