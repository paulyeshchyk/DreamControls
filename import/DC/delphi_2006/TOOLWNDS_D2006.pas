{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit TOOLWNDS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Messages,
  SysUtils,
  Classes,
  Graphics,
  Controls,
  Forms,
  Dialogs,
  DesignWindows,
  ExtCtrls,
  ToolWin,
  ComCtrls,
  IniFiles,
  ActnList,
  Menus,
  ActnPopup,
  ToolWnds;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (p0 : TObject) of object;

_T1 = _T0;

_T2 = procedure (p0 : TObject;
var p1 : Integer;
var p2 : Boolean) of object;

_T3 = _T0;

_T4 = _T0;

_T5 = _T0;

_T6 = _T0;

_T7 = procedure (p0 : Boolean) of object;

function __DC__GetTToolbarDesignWindow__LargeButtons(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TToolbarDesignWindow(Instance).LargeButtons;
end;

procedure __DC__SetTToolbarDesignWindow__LargeButtons(Instance : TObject; Params : PVariantArgList);
begin
TToolbarDesignWindow(Instance).LargeButtons:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TToolbarDesignWindow,'LargeButtons',__DC__GetTToolbarDesignWindow__LargeButtons,__DC__SetTToolbarDesignWindow__LargeButtons);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..0] of TClass = (
TToolbarDesignWindow
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegRegisterMethod(TToolbarDesignWindow,'FormCreate',TypeInfo(_T0),[
TypeInfo(TObject)],Addr(TToolbarDesignWindow.FormCreate));

RegRegisterMethod(TToolbarDesignWindow,'Splitter1Moved',TypeInfo(_T1),[
TypeInfo(TObject)],Addr(TToolbarDesignWindow.Splitter1Moved));

RegRegisterMethod(TToolbarDesignWindow,'Splitter1CanResize',TypeInfo(_T2),[
TypeInfo(TObject),
TypeInfo(Integer),
TypeInfo(Boolean)],Addr(TToolbarDesignWindow.Splitter1CanResize));

RegRegisterMethod(TToolbarDesignWindow,'ToolbarCmdExecute',TypeInfo(_T3),[
TypeInfo(TObject)],Addr(TToolbarDesignWindow.ToolbarCmdExecute));

RegRegisterMethod(TToolbarDesignWindow,'TextLabelsCmdExecute',TypeInfo(_T4),[
TypeInfo(TObject)],Addr(TToolbarDesignWindow.TextLabelsCmdExecute));

RegRegisterMethod(TToolbarDesignWindow,'ToolbarCmdUpdate',TypeInfo(_T5),[
TypeInfo(TObject)],Addr(TToolbarDesignWindow.ToolbarCmdUpdate));

RegRegisterMethod(TToolbarDesignWindow,'TextLabelsCmdUpdate',TypeInfo(_T6),[
TypeInfo(TObject)],Addr(TToolbarDesignWindow.TextLabelsCmdUpdate));

//RegRegisterMethod(TToolbarDesignWindow,'ResizeButtons',TypeInfo(_T7),[TypeInfo(Boolean)], pointer(304));
RegRegisterMethod(TToolbarDesignWindow,'ResizeButtons',TypeInfo(_T7),[TypeInfo(Boolean)],  getVMTProcAddr('TToolbarDesignWindow','ResizeButtons',304));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
