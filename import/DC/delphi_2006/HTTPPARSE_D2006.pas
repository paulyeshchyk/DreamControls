{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit HTTPPARSE_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Classes,
  HTTPParse;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (p0 : TStream) of object;

_T1 = procedure (p0 : Char) of object;

_T2 = procedure (const p0 : string) of object;

_T3 = function (p0 : Integer): string of object;

_T4 = function : string of object;

_T5 = _T4;

_T6 = _T2;

_T7 = procedure (const p0 : string;
const p1 : Array of Const) of object;

_T8 = _T2;

_T9 = _T0;

_T10 = function : Char of object;

_T11 = procedure  of object;

_T12 = function : Longint of object;

_T13 = function : Extended of object;

_T14 = _T12;

_T15 = _T4;

_T16 = function (const p0 : string): Boolean of object;

_T17 = function (p0 : Integer): TStream of object;

function __DC__GetTHTTPParser__SourceLine(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := THTTPParser(Instance).SourceLine;
end;

function __DC__GetTHTTPParser__Token(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := THTTPParser(Instance).Token;
end;

function __DC__GetTHTTPParser__HeaderField(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := THTTPParser(Instance).HeaderField;
end;

procedure __DC__SetTHTTPParser__HeaderField(Instance : TObject; Params : PVariantArgList);
begin
THTTPParser(Instance).HeaderField:=OleVariant(Params^[0]);
end;

function __DC__GetTHTTPParser__SourcePtr(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := String(THTTPParser(Instance).SourcePtr);
end;

procedure __DC__SetTHTTPParser__SourcePtr(Instance : TObject; Params : PVariantArgList);
begin
THTTPParser(Instance).SourcePtr:=PChar(String(OleVariant(Params^[0])));
end;

function __DC__GetTHTTPParser__TokenPtr(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := String(THTTPParser(Instance).TokenPtr);
end;

procedure __DC__SetTHTTPParser__TokenPtr(Instance : TObject; Params : PVariantArgList);
begin
THTTPParser(Instance).TokenPtr:=PChar(String(OleVariant(Params^[0])));
end;

function __DC__GetTHTTPParser__Stream(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(THTTPParser(Instance).Stream);
end;

function __DC__GetTHTTPParser__SourceEnd(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := String(THTTPParser(Instance).SourceEnd);
end;

procedure __RegisterProps;
begin
RegisterProperty(THTTPParser,'SourceLine',__DC__GetTHTTPParser__SourceLine,nil);
RegisterProperty(THTTPParser,'Token',__DC__GetTHTTPParser__Token,nil);
RegisterProperty(THTTPParser,'HeaderField',__DC__GetTHTTPParser__HeaderField,__DC__SetTHTTPParser__HeaderField);
RegisterProperty(THTTPParser,'SourcePtr',__DC__GetTHTTPParser__SourcePtr,__DC__SetTHTTPParser__SourcePtr);
RegisterProperty(THTTPParser,'TokenPtr',__DC__GetTHTTPParser__TokenPtr,__DC__SetTHTTPParser__TokenPtr);
RegisterProperty(THTTPParser,'Stream',__DC__GetTHTTPParser__Stream,nil);
RegisterProperty(THTTPParser,'SourceEnd',__DC__GetTHTTPParser__SourceEnd,nil);
end;

const __ConstNames0 : array[0..45] of string = (
'toEOL'
,'toGET'
,'toHEAD'
,'toPUT'
,'toDELETE'
,'toPOST'
,'toPATCH'
,'toCOPY'
,'toUserAgent'
,'toAccept'
,'toContentType'
,'toContentLength'
,'toReferer'
,'toAuthorization'
,'toCacheControl'
,'toDate'
,'toFrom'
,'toHost'
,'toIfModified'
,'toContentEncoding'
,'toContentVersion'
,'toAllow'
,'toConnection'
,'toCookie'
,'toContentDisposition'
,'hcGET'
,'hcPUT'
,'hcDELETE'
,'hcPOST'
,'hcCacheControl'
,'hcDate'
,'hcFrom'
,'hcHost'
,'hcIfModified'
,'hcAllow'
,'hcUserAgent'
,'hcAccept'
,'hcContentEncoding'
,'hcContentVersion'
,'hcContentType'
,'hcContentLength'
,'hcReferer'
,'hcAuthorization'
,'hcConnection'
,'hcCookie'
,'hcContentDisposition'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,toEOL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,toGET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,toHEAD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,toPUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,toDELETE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,toPOST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,toPATCH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,toCOPY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,toUserAgent));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,toAccept));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,toContentType));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,toContentLength));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,toReferer));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,toAuthorization));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,toCacheControl));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,toDate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,toFrom));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,toHost));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,toIfModified));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,toContentEncoding));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,toContentVersion));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,toAllow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,toConnection));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,toCookie));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,toContentDisposition));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,hcGET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,hcPUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,hcDELETE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,hcPOST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,hcCacheControl));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,hcDate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,hcFrom));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,hcHost));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,hcIfModified));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,hcAllow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,hcUserAgent));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,hcAccept));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,hcContentEncoding));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,hcContentVersion));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,hcContentType));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,hcContentLength));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,hcReferer));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,hcAuthorization));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,hcConnection));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,hcCookie));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,hcContentDisposition));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..0] of TClass = (
THTTPParser
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegisterProc(THTTPParser,'Create',mtConstructor,TypeInfo(_T0),[
TypeInfo(TStream)],Addr(THTTPParser.Create),cRegister);

RegRegisterMethod(THTTPParser,'CheckToken',TypeInfo(_T1),[
TypeInfo(Char)],Addr(THTTPParser.CheckToken));

RegRegisterMethod(THTTPParser,'CheckTokenSymbol',TypeInfo(_T2),[
TypeInfo(string)],Addr(THTTPParser.CheckTokenSymbol));

RegRegisterMethod(THTTPParser,'CopyTo',TypeInfo(_T3),[
TypeInfo(Integer),TypeInfo(string)],Addr(THTTPParser.CopyTo));

RegRegisterMethod(THTTPParser,'CopyToEOL',TypeInfo(_T4),[TypeInfo(string)],Addr(THTTPParser.CopyToEOL));

RegRegisterMethod(THTTPParser,'CopyToEOF',TypeInfo(_T5),[TypeInfo(string)],Addr(THTTPParser.CopyToEOF));

RegRegisterMethod(THTTPParser,'Error',TypeInfo(_T6),[
TypeInfo(string)],Addr(THTTPParser.Error));

RegRegisterMethod(THTTPParser,'ErrorFmt',TypeInfo(_T7),[
TypeInfo(string),
TypeInfoArrayOfConst],Addr(THTTPParser.ErrorFmt));

RegRegisterMethod(THTTPParser,'ErrorStr',TypeInfo(_T8),[
TypeInfo(string)],Addr(THTTPParser.ErrorStr));

RegRegisterMethod(THTTPParser,'HexToBinary',TypeInfo(_T9),[
TypeInfo(TStream)],Addr(THTTPParser.HexToBinary));

RegRegisterMethod(THTTPParser,'NextToken',TypeInfo(_T10),[TypeInfo(Char)],Addr(THTTPParser.NextToken));

RegRegisterMethod(THTTPParser,'SkipEOL',TypeInfo(_T11),NoParams,Addr(THTTPParser.SkipEOL));

RegRegisterMethod(THTTPParser,'SourcePos',TypeInfo(_T12),[TypeInfo(Longint)],Addr(THTTPParser.SourcePos));

RegRegisterMethod(THTTPParser,'TokenFloat',TypeInfo(_T13),[TypeInfo(Extended)],Addr(THTTPParser.TokenFloat));

RegRegisterMethod(THTTPParser,'TokenInt',TypeInfo(_T14),[TypeInfo(Longint)],Addr(THTTPParser.TokenInt));

RegRegisterMethod(THTTPParser,'TokenString',TypeInfo(_T15),[TypeInfo(string)],Addr(THTTPParser.TokenString));

RegRegisterMethod(THTTPParser,'TokenSymbolIs',TypeInfo(_T16),[
TypeInfo(string),TypeInfo(Boolean)],Addr(THTTPParser.TokenSymbolIs));

RegRegisterMethod(THTTPParser,'BufferRequest',TypeInfo(_T17),[
TypeInfo(Integer),TypeInfo(TStream)],Addr(THTTPParser.BufferRequest));

end;
initialization
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
