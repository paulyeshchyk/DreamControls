{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IBPROC32_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  sysutils,
  IBProc32;
function Convertisc_tebToVariant(var R : isc_teb) : OleVariant;
function ConvertVariantToisc_teb(const V : OleVariant) : isc_teb;
function ConvertTXSQLDAToVariant(var R : TXSQLDA) : OleVariant;
function ConvertVariantToTXSQLDA(const V : OleVariant) : TXSQLDA;
function ConvertTXSQLVarToVariant(var R : TXSQLVar) : OleVariant;
function ConvertVariantToTXSQLVar(const V : OleVariant) : TXSQLVar;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __isc_teb__Wrapper = class(TDCRecordWrapper)
private
fR : isc_teb;
public
function GetRecordPtr : pointer; override;
published
procedure settpb_len(const val : Longint);
function gettpb_len : Longint;
property tpb_len : Longint read gettpb_len write settpb_len;
end;
type __TXSQLDA__Wrapper = class(TDCRecordWrapper)
private
fR : TXSQLDA;
public
function GetRecordPtr : pointer; override;
published
end;
type __TXSQLVar__Wrapper = class(TDCRecordWrapper)
private
fR : TXSQLVar;
public
function GetRecordPtr : pointer; override;
published
end;
function __isc_teb__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __isc_teb__Wrapper.settpb_len(const val : Longint);
begin
isc_teb(GetRecordPtr^).tpb_len := val;
end;
function __isc_teb__Wrapper.gettpb_len : Longint;
begin
result := isc_teb(GetRecordPtr^).tpb_len;
end;
function __TXSQLDA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TXSQLVar__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function _isc_teb_ : IDispatch;
begin
  result := __isc_teb__Wrapper.Create;
end;
function _TXSQLDA_ : IDispatch;
begin
  result := __TXSQLDA__Wrapper.Create;
end;
function _TXSQLVar_ : IDispatch;
begin
  result := __TXSQLVar__Wrapper.Create;
end;

type __isc_teb__Wrapper__ = class(__isc_teb__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __isc_teb__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convertisc_tebToVariant(var R : isc_teb) : OleVariant;
var
__rw : __isc_teb__Wrapper__;
begin
__rw := __isc_teb__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToisc_teb(const V : OleVariant) : isc_teb;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := isc_teb((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TXSQLDA__Wrapper__ = class(__TXSQLDA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TXSQLDA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTXSQLDAToVariant(var R : TXSQLDA) : OleVariant;
var
__rw : __TXSQLDA__Wrapper__;
begin
__rw := __TXSQLDA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTXSQLDA(const V : OleVariant) : TXSQLDA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TXSQLDA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TXSQLVar__Wrapper__ = class(__TXSQLVar__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TXSQLVar__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTXSQLVarToVariant(var R : TXSQLVar) : OleVariant;
var
__rw : __TXSQLVar__Wrapper__;
begin
__rw := __TXSQLVar__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTXSQLVar(const V : OleVariant) : TXSQLVar;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TXSQLVar((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..6] of string = (
'isc_dpb_version1'
,'isc_dpb_user_name'
,'isc_dpb_password'
,'isc_tpb_concurrency'
,'isc_tpb_version3'
,'isc_tpb_wait'
,'isc_tpb_write'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,isc_dpb_version1));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,isc_dpb_user_name));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,isc_dpb_password));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,isc_tpb_concurrency));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,isc_tpb_version3));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,isc_tpb_wait));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,isc_tpb_write));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..0] of TClass = (
EDLLLoadError
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..2] of string = (
'isc_teb'
,'TXSQLDA'
,'TXSQLVar'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_isc_teb_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_TXSQLDA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_TXSQLVar_)));
end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
