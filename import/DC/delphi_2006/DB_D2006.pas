{*******************************************************}
{                                                       }
{ Import unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

Unit DB_d2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Types,
  SysUtils,
  Classes,
  Variants,
  MaskUtils,
  System.Generics.Collections,
  SqlTimSt,
  FmtBcd,
  DBCommonTypes,
  DB;
function ConvertTDateTimeRecToVariant(var R : TDateTimeRec) : OleVariant;
function ConvertVariantToTDateTimeRec(const V : OleVariant) : TDateTimeRec;
function ConvertTGUIDToVariant(var R : TGUID) : OleVariant;
function ConvertVariantToTGUID(const V : OleVariant) : TGUID;
function ConvertTLookupListEntryToVariant(var R : TLookupListEntry) : OleVariant;
function ConvertVariantToTLookupListEntry(const V : OleVariant) : TLookupListEntry;
function ConvertTPacketAttributeToVariant(var R : TPacketAttribute) : OleVariant;
function ConvertVariantToTPacketAttribute(const V : OleVariant) : TPacketAttribute;
function ConvertTVarRecToVariant(var R : TVarRec) : OleVariant;
function ConvertVariantToTVarRec(const V : OleVariant) : TVarRec;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TGUID__Wrapper = class(TDCRecordWrapper)
private
fR : TGUID;
public
function GetRecordPtr : pointer; override;
published
procedure setD1(const val : LongWord);
function getD1 : LongWord;
property D1 : LongWord read getD1 write setD1;
procedure setD2(const val : Word);
function getD2 : Word;
property D2 : Word read getD2 write setD2;
procedure setD3(const val : Word);
function getD3 : Word;
property D3 : Word read getD3 write setD3;
end;
type __TDateTimeRec__Wrapper = class(TDCRecordWrapper)
private
fR : TDateTimeRec;
public
function GetRecordPtr : pointer; override;
published
procedure setDate(const val : Integer);
function getDate : Integer;
property Date : Integer read getDate write setDate;
procedure setTime(const val : Integer);
function getTime : Integer;
property Time : Integer read getTime write setTime;
end;
type __TLookupListEntry__Wrapper = class(TDCRecordWrapper)
private
fR : TLookupListEntry;
public
function GetRecordPtr : pointer; override;
published
procedure setKey(const val : Variant);
function getKey : Variant;
property Key : Variant read getKey write setKey;
procedure setValue(const val : Variant);
function getValue : Variant;
property Value : Variant read getValue write setValue;
end;
type __TPacketAttribute__Wrapper = class(TDCRecordWrapper)
private
fR : TPacketAttribute;
public
function GetRecordPtr : pointer; override;
published
procedure setName(const val : AnsiString);
function getName : AnsiString;
property Name : AnsiString read getName write setName;
procedure setValue(const val : OleVariant);
function getValue : OleVariant;
property Value : OleVariant read getValue write setValue;
procedure setIncludeInDelta(const val : Boolean);
function getIncludeInDelta : Boolean;
property IncludeInDelta : Boolean read getIncludeInDelta write setIncludeInDelta;
end;
type __TVarRec__Wrapper = class(TDCRecordWrapper)
private
fR : TVarRec;
public
function GetRecordPtr : pointer; override;
published
procedure setVInteger(const val : Integer);
function getVInteger : Integer;
property VInteger : Integer read getVInteger write setVInteger;
procedure setVType(const val : Byte);
function getVType : Byte;
property VType : Byte read getVType write setVType;
procedure setVBoolean(const val : Boolean);
function getVBoolean : Boolean;
property VBoolean : Boolean read getVBoolean write setVBoolean;
procedure setVChar(const val : Char);
function getVChar : Char;
property VChar : Char read getVChar write setVChar;
procedure setVObject(const val : TObject);
function getVObject : TObject;
property VObject : TObject read getVObject write setVObject;
procedure setVWideChar(const val : WideChar);
function getVWideChar : WideChar;
property VWideChar : WideChar read getVWideChar write setVWideChar;
end;
type __TDataSet__ = class(TDataSet);
type __TField__ = class(TField);
type
_T0 = function (const Fields : string;
var Pos : Integer): string of object;

{_T1 = procedure (const FieldClasses : Array of TFieldClass) of object;}

_T2 = procedure (const Message : string;
Component : TComponent) of object;

_T3 = procedure (const Message : string;
const Args : Array of Const;
Component : TComponent) of object;

_T4 = procedure (var Buffer;
Size : Integer) of object;

_T5 = function (Buf1 : Pointer;
Buf2 : Pointer;
Size : Integer): Boolean of object;

_T6 = function (DataSet : TDataSet;
Control : TComponent;
const FieldName : string): TField of object;

_T7 = function (VarType : Integer): TFieldType of object;

_T8 = procedure (NativeError : string;
Context : string;
ErrCode : Integer;
PrevError : Integer;
E : Exception) of object;

_T9 = function : Integer of object;

_T10 = procedure (const FileName : string) of object;

_T11 = procedure (Stream : TStream) of object;

_T12 = _T10;

_T13 = _T11;

{_T14 = function : TCheckConstraintClass of object;}

_T15 = procedure (Owner : TPersistent) of object;

_T16 = function : TCheckConstraint of object;

_T17 = procedure  of object;

_T18 = _T17;

_T19 = function : Boolean of object;

_T20 = function (Index : Integer): TDataSet of object;

_T21 = _T9;

_T23 = procedure (Value : Boolean) of object;

_T24 = procedure (Client : TObject) of object;

_T25 = _T17;

_T26 = _T17;

_T27 = _T17;

_T28 = _T17;

_T29 = procedure (Event : TDataEvent;
Info : NativeInt) of object;

_T30 = _T17;

_T31 = procedure (Distance : Integer) of object;

_T32 = _T17;

_T33 = procedure (Field : TFieldRef) of object;

_T34 = _T9;

_T35 = _T19;

_T36 = _T9;

_T37 = _T19;

_T38 = _T9;

_T39 = _T17;

_T40 = function (Distance : Integer): Integer of object;

_T41 = procedure (Field : TField) of object;

_T42 = procedure (Value : Integer) of object;

_T43 = _T42;

_T44 = _T17;

_T45 = _T17;

_T46 = _T19;

_T47 = function (Action : TBasicAction): Boolean of object;

_T48 = _T47;

_T49 = _T17;

_T50 = function (const ASQL : string;
AParams : TParams): Integer of object;

_T51 = function : string of object;

_T52 = _T51;

_T53 = _T51;

_T54 = _T51;

_T55 = procedure (const CommandText : string) of object;

_T56 = procedure (Commit : Boolean) of object;

_T57 = _T17;

_T58 = procedure (List : TPacketAttributeList) of object;

_T59 = function : TPSCommandType of object;

_T60 = function : TIndexDef of object;

_T61 = function : TParams of object;

_T62 = function (IndexTypes : TIndexOptions): TIndexDefs of object;

_T63 = function (E : Exception;
Prev : EUpdateError): EUpdateError of object;

_T64 = _T19;

_T65 = _T19;

_T66 = _T19;

_T67 = _T17;

_T68 = procedure (AParams : TParams) of object;

_T69 = _T17;

_T70 = function (UpdateKind : TUpdateKind;
Delta : TDataSet): Boolean of object;

{_T71 = function (Field : TField): TLookupListClass of object;}

_T72 = _T41;

_T73 = procedure (Binding : Boolean) of object;

_T74 = procedure (Buffer : NativeInt) of object;

_T75 = _T17;

_T76 = procedure (Field : TField;
FieldDef : TFieldDef) of object;

_T77 = _T17;

_T78 = _T17;

_T79 = _T74;

_T80 = _T41;

_T81 = _T17;

_T82 = _T17;

_T83 = function (DataSetField : TDataSetField): TDataSet of object;

_T84 = procedure (Field : TField;
Source : TValueBuffer;
var Dest : TValueBuffer;
ToNative : Boolean) of object;

_T85 = _T29;

_T86 = procedure (Sender : TObject) of object;

_T87 = _T17;

_T88 = _T17;

_T89 = _T17;

_T90 = _T17;

_T91 = _T17;

_T92 = _T17;

_T93 = _T17;

_T94 = _T17;

_T95 = _T17;

_T96 = _T17;

_T97 = _T17;

_T98 = _T17;

_T99 = _T17;

_T100 = _T17;

_T101 = _T17;

_T102 = _T17;

_T103 = _T17;

_T104 = _T17;

_T105 = _T17;

_T106 = _T17;

_T107 = _T17;

_T108 = function (Restart : Boolean;
GoForward : Boolean): Boolean of object;

_T109 = _T17;

_T110 = function (Field : TField): Variant of object;

_T111 = function (Grp : TGroupPosInd): Integer of object;

_T112 = _T17;

_T113 = procedure (Buffer : TRecBuf) of object;

_T114 = function : TBookmarkStr of object;

_T115 = function : TFieldTypes of object;

_T116 = _T19;

_T117 = _T19;

_T118 = function : TDataSource of object;

{_T119 = function (FieldType : TFieldType): TFieldClass of object;}

_T120 = function (Field : TField): string of object;

_T121 = function (State : TDataSetState;
Field : TField): Variant of object;

_T122 = function (Field : TField): Boolean of object;

_T123 = _T9;

_T124 = _T19;

_T125 = _T9;

_T126 = _T19;

_T127 = _T9;

_T128 = _T9;

_T129 = _T17;

_T130 = _T113;

_T131 = _T17;

_T132 = _T17;

_T133 = _T17;

_T134 = _T17;

_T135 = procedure (InfoQuery : Boolean) of object;

_T136 = _T113;

_T137 = _T17;

_T138 = _T23;

_T139 = procedure (const Value : TBookmarkStr) of object;

_T140 = _T42;

_T141 = _T42;

_T142 = procedure (Index : Integer) of object;

_T143 = procedure (const Value : TDataSetField) of object;

_T144 = _T76;

_T145 = _T76;

_T146 = _T23;

_T147 = procedure (Value : TFilterOptions) of object;

_T148 = procedure (const Value : string) of object;

{_T149 = procedure (const Value : TFilterRecordEvent) of object;}

_T150 = _T42;

_T151 = procedure (State : TDataSetState;
Field : TField;
const Value : Variant) of object;

_T152 = _T17;

_T153 = function : TRecordBuffer of object;

_T154 = procedure (var Buffer : TRecordBuffer) of object;

_T155 = procedure (Buffer : TRecBuf;
Data : TBookmark) of object;

_T156 = function (Buffer : TRecBuf): TBookmarkFlag of object;

_T157 = function : Word of object;

_T158 = procedure (Buffer : TRecBuf;
Append : Boolean) of object;

_T159 = _T17;

_T160 = _T17;

_T161 = procedure (Bookmark : TBookmark) of object;

_T162 = _T113;

_T163 = _T17;

_T164 = _T17;

_T165 = _T113;

_T166 = procedure (Field : TField;
Buffer : TValueBuffer) of object;

_T167 = procedure (Buffer : TRecBuf;
Value : TBookmarkFlag) of object;

_T168 = _T155;

_T169 = function (Buffer : TRecBuf;
GetMode : TGetMode;
DoCheck : Boolean): TGetResult of object;

_T170 = _T17;

_T171 = _T17;

_T172 = _T17;

_T173 = _T17;

_T174 = _T19;

{_T175 = function : TFieldDefsClass of object;}

{_T176 = function : TFieldDefListClass of object;}

{_T177 = function : TFieldsClass of object;}

{_T178 = function : TFieldListClass of object;}

{_T179 = function : TCheckConstraintsClass of object;}

{_T180 = function : TFieldsClass of object;}

{_T181 = function : TIndexDefsClass of object;}

{_T182 = function : TParamsClass of object;}

_T183 = function : TRecBuf of object;

_T184 = _T17;

_T185 = procedure (const Values : Array of Const) of object;

_T186 = function (Bookmark : TBookmark): Boolean of object;

_T187 = _T17;

_T188 = _T17;

_T189 = _T17;

_T190 = _T17;

_T191 = _T19;

_T192 = function (Bookmark1 : TBookmark;
Bookmark2 : TBookmark): Integer of object;

_T193 = function (Field : TField;
Mode : TBlobStreamMode): TStream of object;

_T194 = _T17;

_T195 = _T17;

_T196 = _T17;

_T197 = _T17;

_T198 = _T17;

_T199 = function (const FieldName : string): TField of object;

_T200 = _T199;

_T201 = _T19;

_T202 = _T19;

_T203 = _T19;

_T204 = _T19;

_T205 = _T17;

_T206 = _T161;

_T207 = function : TBookmark of object;

_T208 = function (WithSettings : Boolean): TDataSet of object;

_T209 = function (Buffer : TRecBuf): Boolean of object;

//_T210 = procedure (List : TList;
//<;
//TDataSet;
//>) of object;

//_T211 = procedure (MasterFields : TList;
//DetailFields : TList;
//<;
//TField;
//>) of object;

_T212 = function (FieldNo : Integer;
var Buffer : TBlobByteData): Integer of object;

_T213 = function (Field : TField;
var Buffer : TValueBuffer): Boolean of object;

//_T214 = procedure (List : TList;
//< : TList;
//TField : TList;
//> : TList;
//const FieldNames : string) of object;

_T215 = procedure (List : TStrings) of object;

_T216 = _T161;

_T217 = _T17;

_T218 = _T185;

_T219 = _T19;

_T220 = function (DataSource : TDataSource): Boolean of object;

_T221 = _T19;

_T222 = _T17;

_T223 = function (const KeyFields : string;
const KeyValues : Variant;
Options : TLocateOptions): Boolean of object;

_T224 = function (const KeyFields : string;
const KeyValues : Variant;
const ResultFields : string): Variant of object;

_T225 = _T40;

_T226 = _T17;

_T227 = _T17;

_T228 = _T17;

_T229 = _T17;

_T230 = _T17;

_T231 = procedure (Mode : TResyncMode) of object;

_T232 = _T185;

_T233 = function (Source : TDataSet): Integer of object;

{_T234 = function (Src : PAnsiChar;
Dest : PAnsiChar;
ToOem : Boolean): Integer of object;}

_T235 = _T17;

_T236 = _T17;

_T237 = function : TUpdateStatus of object;

_T238 = _T19;

_T239 = procedure (DataSet : TDataSet) of object;

_T240 = _T17;

_T241 = _T29;

_T242 = _T17;

_T243 = _T17;

_T244 = function (DataSet : TDataSet): Boolean of object;

//_T248 = function (const B : TArray;
//const < : TArray;
//const Byte : TArray;
//const > : TArray;
//Offset : Integer): Variant of object;
//
//_T249 = _T248;

_T251 = procedure (ADataSet : TDataSet;
AOwner : TPersistent;
AClass : TCollectionItemClass) of object;

_T252 = function (const AName : string): TNamedItem of object;

_T253 = _T215;

_T254 = function (const AName : string): Integer of object;

_T255 = function : TDataSet of object;

_T256 = function (const TypeName : string): EDatabaseError of object;

_T257 = _T73;

_T258 = _T42;

_T259 = _T17;

_T260 = _T17;

_T261 = function : TBcd of object;

_T262 = _T19;

_T263 = function : Variant of object;

_T264 = function : Currency of object;

_T265 = function : TDateTime of object;

_T266 = function : Single of object;

_T267 = function : Double of object;

_T268 = function : Extended of object;

_T269 = function : Longint of object;

{_T270 = function : Largeint of object;}

_T271 = function : LongWord of object;

_T272 = function : TSQLTimeStamp of object;

_T273 = function : TSQLTimeStampOffset of object;

_T274 = _T51;

_T275 = _T51;

_T276 = function : AnsiString of object;

_T277 = _T263;

_T278 = function : IDispatch of object;

_T279 = _T19;

_T280 = _T51;

_T281 = _T9;

_T282 = _T9;

_T283 = procedure (Source : TValueBuffer;
Dest : TValueBuffer) of object;

_T284 = _T9;

_T285 = _T9;

_T286 = _T19;

_T287 = _T19;

_T288 = _T9;

_T289 = procedure (var Text : string;
DisplayText : Boolean) of object;

_T290 = _T289;

_T291 = procedure (const Value : TBcd) of object;

_T292 = _T23;

_T293 = procedure (const Value : Variant) of object;

_T294 = procedure (Value : Currency) of object;

_T295 = procedure (Value : TDateTime) of object;

_T296 = procedure (Value : Single) of object;

_T297 = procedure (Value : Double) of object;

_T298 = procedure (Value : Extended) of object;

_T299 = procedure (Value : Longint) of object;

{_T300 = procedure (Value : Largeint) of object;}

_T301 = procedure (Value : LongWord) of object;

_T302 = procedure (const Value : TSQLTimeStamp) of object;

_T303 = procedure (const Value : TSQLTimeStampOffset) of object;

_T304 = _T148;

_T305 = _T148;

_T306 = procedure (const Value : AnsiString) of object;

//_T307 = procedure (const Value : TArray;
//const <;
//const Byte;
//const >) of object;

_T308 = _T293;

_T309 = procedure (ADataSet : TDataSet) of object;

_T310 = procedure (Value : TFieldKind) of object;

_T311 = procedure (AField : TObjectField) of object;

_T312 = _T42;

_T313 = _T148;

_T314 = _T148;

_T315 = _T293;

_T316 = procedure (const Value : IDispatch) of object;

{_T317 = function : TLookupListClass of object;}

_T318 = _T316;

_T319 = _T17;

_T320 = _T17;

_T322 = _T19;

_T323 = function (InputChar : Char): Boolean of object;

_T324 = _T17;

_T325 = procedure (Buffer : TValueBuffer;
NativeFormat : Boolean) of object;

_T326 = procedure (Value : TFieldType) of object;

_T327 = procedure (FieldDef : TFieldDef) of object;

_T328 = _T327;

_T329 = procedure (Buffer : TValueBuffer) of object;

{_T330 = function : TFieldDefsClass of object;}

_T331 = procedure (Owner : TFieldDefs;
const Name : string;
DataType : TFieldType;
Size : Integer;
Required : Boolean;
FieldNo : Integer) of object;

_T332 = function : TFieldDef of object;

_T333 = function (Owner : TComponent;
ParentField : TObjectField;
const FieldName : string;
CreateChildren : Boolean): TField of object;

_T334 = _T19;

_T335 = function (const Name : string): TFieldDef of object;

_T336 = _T335;

{_T337 = function : TFieldDefClass of object;}

_T338 = procedure (AOwner : TPersistent) of object;

_T339 = _T332;

_T340 = _T335;

_T341 = _T17;

_T342 = procedure (const Name : string;
DataType : TFieldType;
Size : Integer;
Required : Boolean) of object;

_T343 = function (const Name : string): TField of object;

_T344 = _T343;

_T345 = _T239;

_T346 = _T309;

_T347 = _T41;

_T348 = procedure (const FieldName : string) of object;

_T349 = procedure (const FieldNames : string) of object;

_T350 = _T17;

_T351 = _T17;

_T352 = _T199;

_T353 = _T199;

_T354 = function (FieldNo : Integer): TField of object;

_T355 = function : TFieldsEnumerator of object;

_T356 = _T215;

_T357 = function (Field : TField): Integer of object;

_T358 = _T41;

_T359 = procedure (AFields : TFields) of object;

_T360 = function : TField of object;

_T361 = _T19;

_T362 = function (const Name : string;
MustExist : Boolean): TObject of object;

_T363 = _T19;

_T364 = _T17;

_T365 = _T309;

_T366 = _T17;

_T367 = procedure (Owner : TIndexDefs;
const Name : string;
const Fields : string;
Options : TIndexOptions) of object;

{_T368 = function : TIndexDefClass of object;}

_T369 = _T309;

_T370 = _T60;

_T371 = function (const Name : string): TIndexDef of object;

_T372 = _T17;

_T373 = function (const Fields : string): TIndexDef of object;

_T374 = function (const Fields : string;
CaseInsensitive : Boolean): TIndexDef of object;

_T375 = procedure (const Name : string;
const Fields : string;
Options : TIndexOptions) of object;

_T376 = function (var Value : Longint): Boolean of object;

_T377 = function (var Value : LongWord): Boolean of object;

_T378 = _T17;

_T379 = procedure (const AKey : Variant;
const AValue : Variant) of object;

_T380 = _T17;

_T381 = function (const AKey : Variant): Variant of object;

_T382 = _T239;

_T383 = function : TFields of object;

_T384 = function (Index : Integer): Variant of object;

_T385 = procedure (Index : Integer;
const Value : Variant) of object;

_T386 = procedure (AParams : TParams;
AParamType : TParamType) of object;

_T387 = _T41;

_T388 = procedure (Field : TField;
const Value : Variant) of object;

_T389 = _T17;

_T390 = _T329;

_T391 = _T9;

_T392 = procedure (const FileName : string;
BlobType : TBlobType) of object;

_T393 = procedure (Stream : TStream;
BlobType : TBlobType) of object;

_T394 = procedure (Buffer : TValueBuffer;
Size : Integer) of object;

_T395 = procedure (DataSet : TDataSet;
AInstanceOwner : Boolean) of object;

{_T396 = function (const AInstance : TObject;
const ADataType : TFieldType;
AInstanceOwner : Boolean): IParamObject of object;}

_T397 = procedure (Params : TParams;
AInstanceOwner : Boolean) of object;

_T398 = procedure (Stream : TStream;
AInstanceOwner : Boolean;
KnownSize : Integer) of object;

_T399 = _T329;

_T400 = procedure (AObject : TObject;
ADataType : TFieldType;
AInstanceOwner : Boolean) of object;

{_T401 = function : TParamClass of object;}

_T402 = _T15;

_T403 = function : TParam of object;

_T404 = procedure (Value : TParams) of object;

_T405 = procedure (Value : TParam) of object;

_T406 = _T405;

_T407 = function (FldType : TFieldType;
const ParamName : string;
ParamType : TParamType): TParam of object;

//_T408 = procedure (List : TList;
//< : TList;
//TParam : TList;
//> : TList;
//const ParamNames : string) of object;

_T409 = function (Value : TParams): Boolean of object;

_T410 = function (const SQL : string;
DoCreate : Boolean): string of object;

_T411 = function (const Value : string): TParam of object;

_T412 = _T411;

_T413 = function (Length : Integer): TValueBuffer of object;

_T414 = procedure (var Buffer : TValueBuffer) of object;

//_T415 = procedure (Buffer : TValueBuffer;
//const Dest : TArray;
//const < : TArray;
//const Byte : TArray;
//const > : TArray;
//Offset : Integer;
//Count : Integer) of object;

function __TGUID__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TGUID__Wrapper.setD1(const val : LongWord);
begin
TGUID(GetRecordPtr^).D1 := val;
end;
function __TGUID__Wrapper.getD1 : LongWord;
begin
result := TGUID(GetRecordPtr^).D1;
end;
procedure __TGUID__Wrapper.setD2(const val : Word);
begin
TGUID(GetRecordPtr^).D2 := val;
end;
function __TGUID__Wrapper.getD2 : Word;
begin
result := TGUID(GetRecordPtr^).D2;
end;
procedure __TGUID__Wrapper.setD3(const val : Word);
begin
TGUID(GetRecordPtr^).D3 := val;
end;
function __TGUID__Wrapper.getD3 : Word;
begin
result := TGUID(GetRecordPtr^).D3;
end;
function __TDateTimeRec__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDateTimeRec__Wrapper.setDate(const val : Integer);
begin
TDateTimeRec(GetRecordPtr^).Date := val;
end;
function __TDateTimeRec__Wrapper.getDate : Integer;
begin
result := TDateTimeRec(GetRecordPtr^).Date;
end;
procedure __TDateTimeRec__Wrapper.setTime(const val : Integer);
begin
TDateTimeRec(GetRecordPtr^).Time := val;
end;
function __TDateTimeRec__Wrapper.getTime : Integer;
begin
result := TDateTimeRec(GetRecordPtr^).Time;
end;
function __TLookupListEntry__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TLookupListEntry__Wrapper.setKey(const val : Variant);
begin
TLookupListEntry(GetRecordPtr^).Key := val;
end;
function __TLookupListEntry__Wrapper.getKey : Variant;
begin
result := TLookupListEntry(GetRecordPtr^).Key;
end;
procedure __TLookupListEntry__Wrapper.setValue(const val : Variant);
begin
TLookupListEntry(GetRecordPtr^).Value := val;
end;
function __TLookupListEntry__Wrapper.getValue : Variant;
begin
result := TLookupListEntry(GetRecordPtr^).Value;
end;
function __TPacketAttribute__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPacketAttribute__Wrapper.setName(const val : AnsiString);
begin
TPacketAttribute(GetRecordPtr^).Name := val;
end;
function __TPacketAttribute__Wrapper.getName : AnsiString;
begin
result := TPacketAttribute(GetRecordPtr^).Name;
end;
procedure __TPacketAttribute__Wrapper.setValue(const val : OleVariant);
begin
TPacketAttribute(GetRecordPtr^).Value := val;
end;
function __TPacketAttribute__Wrapper.getValue : OleVariant;
begin
result := TPacketAttribute(GetRecordPtr^).Value;
end;
procedure __TPacketAttribute__Wrapper.setIncludeInDelta(const val : Boolean);
begin
TPacketAttribute(GetRecordPtr^).IncludeInDelta := val;
end;
function __TPacketAttribute__Wrapper.getIncludeInDelta : Boolean;
begin
result := TPacketAttribute(GetRecordPtr^).IncludeInDelta;
end;
function _TDateTimeRec_ : IDispatch;
begin
  result := __TDateTimeRec__Wrapper.Create;
end;
function _TLookupListEntry_ : IDispatch;
begin
  result := __TLookupListEntry__Wrapper.Create;
end;
function _TPacketAttribute_ : IDispatch;
begin
  result := __TPacketAttribute__Wrapper.Create;
end;
function __TVarRec__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TVarRec__Wrapper.setVInteger(const val : Integer);
begin
TVarRec(GetRecordPtr^).VInteger := val;
end;
function __TVarRec__Wrapper.getVInteger : Integer;
begin
result := TVarRec(GetRecordPtr^).VInteger;
end;
procedure __TVarRec__Wrapper.setVType(const val : Byte);
begin
TVarRec(GetRecordPtr^).VType := val;
end;
function __TVarRec__Wrapper.getVType : Byte;
begin
result := TVarRec(GetRecordPtr^).VType;
end;
procedure __TVarRec__Wrapper.setVBoolean(const val : Boolean);
begin
TVarRec(GetRecordPtr^).VBoolean := val;
end;
function __TVarRec__Wrapper.getVBoolean : Boolean;
begin
result := TVarRec(GetRecordPtr^).VBoolean;
end;
procedure __TVarRec__Wrapper.setVChar(const val : Char);
begin
TVarRec(GetRecordPtr^).VChar := ansiChar(val);
end;
function __TVarRec__Wrapper.getVChar : Char;
begin
result := char(TVarRec(GetRecordPtr^).VChar);
end;
procedure __TVarRec__Wrapper.setVObject(const val : TObject);
begin
TVarRec(GetRecordPtr^).VObject := val;
end;
function __TVarRec__Wrapper.getVObject : TObject;
begin
result := TVarRec(GetRecordPtr^).VObject;
end;
procedure __TVarRec__Wrapper.setVWideChar(const val : WideChar);
begin
TVarRec(GetRecordPtr^).VWideChar := val;
end;
function __TVarRec__Wrapper.getVWideChar : WideChar;
begin
result := TVarRec(GetRecordPtr^).VWideChar;
end;
procedure ____DatabaseError__Wrapper(cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
DatabaseError(OleVariant(pargs^[0]));
end;
2:
begin
DatabaseError(OleVariant(pargs^[1]),TComponent(VarToObject(OleVariant(pargs^[0]))));
end;
end
end;

procedure ____DatabaseErrorFmt__Wrapper(const p0 : string;
const p1 : Array of Const;
p2 : TComponent);
begin
DatabaseErrorFmt(p0,p1,p2);
end;

procedure __TDataSet__OpenCursor__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
0:
begin
__TDataSet__(__Instance).OpenCursor;
end;
1:
begin
__TDataSet__(__Instance).OpenCursor(OleVariant(pargs^[0]));
end;
end
end;



function __TDataSet__BookMarkValid__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList):Boolean;
var b1:TBookmark;
v:Variant;
begin
   v:=OleVariant(pargs^[0]);
   if varIsNull(v) or varISEmpty(v)  then
   exit;
   DynArrayFromVariant(pointer(b1), v, TypeInfo(TBookmark));
   result:=__TDataSet__(__Instance).BookmarkValid(b1);
end;

//function bkToString(bk:TBookmark):String;
//var i:integer;
//begin
//  if bk = nil then
//  exit;
//  result:='';
//  for i :=length(bk)-1 downto 0 do
//  result:=inttoStr(bk[i])+';'+result;
//end;

procedure __TDataSet__setBookMark__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
var b1:TBookmark;
v:Variant;
begin
  v:=OleVariant(pargs^[0]);
  if varIsNull(v) or varISEmpty(v)  then
  exit;
  try
    DynArrayfromVariant(pointer(b1),v,TypeInfo(TBookmark));
    __TDataSet__(__Instance).GotoBookmark(b1);
  except
  end;
end;

procedure __TDataSet__freeBookMark__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
var b1:TBookmark;
v:variant;
begin
   if VarToObject(OleVariant(pargs^[0])) = nil  then
   exit;
   v:=OleVariant(pargs^[0]);
   if (varISNull(v))or (varIsEmpty(v)) then
   exit;
   DynArrayFromVariant(pointer(b1),v,TypeInfo(TbookMark));
   try
     __TDataSet__(__Instance).FreeBookmark(b1);
   except
   end;
end;


function __TDataSet__getBookMark__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList):OleVariant;
var
bk:TBookmark;
v:Variant;
begin
 try
   if (__TDataSet__(__Instance) = nil) then exit;
   if not(__TDataSet__(__Instance).Active) then exit;
   bk:=__TDataSet__(__Instance).GetBookmark;
   DynArrayToVariant(v,pointer(bk),TypeInfo(TBookmark));
   result:= v;
 except
   result:=null;
 end;
end;

//function __TDBBitConverter__UnsafeInToVariant__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
//begin
//case cArgs of
//4:
//begin
//result := TDBBitConverter(__Instance).UnsafeInToVariant(TArray(VarToObject(OleVariant(pargs^[3]))),TArray(VarToObject(OleVariant(pargs^[2]))),TArray(VarToObject(OleVariant(pargs^[1]))),TArray(VarToObject(OleVariant(pargs^[0]))));
//end;
//5:
//begin
//result := TDBBitConverter(__Instance).UnsafeInToVariant(TArray(VarToObject(OleVariant(pargs^[4]))),TArray(VarToObject(OleVariant(pargs^[3]))),TArray(VarToObject(OleVariant(pargs^[2]))),TArray(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
//end;
//end
//end;
//
//function __TDBBitConverter__UnsafeInToBAVariant__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
//begin
//case cArgs of
//4:
//begin
//result := TDBBitConverter(__Instance).UnsafeInToBAVariant(TArray(VarToObject(OleVariant(pargs^[3]))),TArray(VarToObject(OleVariant(pargs^[2]))),TArray(VarToObject(OleVariant(pargs^[1]))),TArray(VarToObject(OleVariant(pargs^[0]))));
//end;
//5:
//begin
//result := TDBBitConverter(__Instance).UnsafeInToBAVariant(TArray(VarToObject(OleVariant(pargs^[4]))),TArray(VarToObject(OleVariant(pargs^[3]))),TArray(VarToObject(OleVariant(pargs^[2]))),TArray(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
//end;
//end
//end;

function __TField__GetAsGuid__Wrapper(__Instance : TField): IDispatch;
var
__result : TGUID;
__wrapper : __TGUID__Wrapper;
begin
__result := __TField__(__Instance).GetAsGuid;
__wrapper := __TGUID__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

procedure __TField__SetAsGuid__Wrapper(__Instance : TField;
const p0 : IDispatch);
var
__p0 : ^TGUID;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__TField__(__Instance).SetAsGuid(__p0^);
end;

procedure __TField__AssignValue__Wrapper(__Instance : TField;
const p0 : IDispatch);
var
__p0 : ^TVarRec;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
TField(__Instance).AssignValue(__p0^);
end;

procedure __TField__SetData__Wrapper(__Instance : TField;
p0 : TValueBuffer;
p1 : Boolean);
begin
TField(__Instance).SetData(p0,p1);
end;

function __TFieldDef__CreateField__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := VarFromObject(TFieldDef(__Instance).CreateField(TComponent(VarToObject(OleVariant(pargs^[0])))));
end;
2:
begin
result := VarFromObject(TFieldDef(__Instance).CreateField(TComponent(VarToObject(OleVariant(pargs^[1]))),TObjectField(VarToObject(OleVariant(pargs^[0])))));
end;
3:
begin
result := VarFromObject(TFieldDef(__Instance).CreateField(TComponent(VarToObject(OleVariant(pargs^[2]))),TObjectField(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0])));
end;
4:
begin
result := VarFromObject(TFieldDef(__Instance).CreateField(TComponent(VarToObject(OleVariant(pargs^[3]))),TObjectField(VarToObject(OleVariant(pargs^[2]))),OleVariant(pargs^[1]),OleVariant(pargs^[0])));
end;
end
end;

procedure __TFieldDefs__Add__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
2:
begin
TFieldDefs(__Instance).Add(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
3:
begin
TFieldDefs(__Instance).Add(OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
4:
begin
TFieldDefs(__Instance).Add(OleVariant(pargs^[3]),OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure __TParam__SetStream__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
2:
begin
TParam(__Instance).SetStream(TStream(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
end;
3:
begin
TParam(__Instance).SetStream(TStream(VarToObject(OleVariant(pargs^[2]))),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;


type __TDateTimeRec__Wrapper__ = class(__TDateTimeRec__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDateTimeRec__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDateTimeRecToVariant(var R : TDateTimeRec) : OleVariant;
var
__rw : __TDateTimeRec__Wrapper__;
begin
__rw := __TDateTimeRec__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDateTimeRec(const V : OleVariant) : TDateTimeRec;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDateTimeRec((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TGUID__Wrapper__ = class(__TGUID__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TGUID__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTGUIDToVariant(var R : TGUID) : OleVariant;
var
__rw : __TGUID__Wrapper__;
begin
__rw := __TGUID__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTGUID(const V : OleVariant) : TGUID;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TGUID((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TLookupListEntry__Wrapper__ = class(__TLookupListEntry__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TLookupListEntry__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTLookupListEntryToVariant(var R : TLookupListEntry) : OleVariant;
var
__rw : __TLookupListEntry__Wrapper__;
begin
__rw := __TLookupListEntry__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTLookupListEntry(const V : OleVariant) : TLookupListEntry;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TLookupListEntry((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPacketAttribute__Wrapper__ = class(__TPacketAttribute__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPacketAttribute__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPacketAttributeToVariant(var R : TPacketAttribute) : OleVariant;
var
__rw : __TPacketAttribute__Wrapper__;
begin
__rw := __TPacketAttribute__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPacketAttribute(const V : OleVariant) : TPacketAttribute;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPacketAttribute((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TVarRec__Wrapper__ = class(__TVarRec__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TVarRec__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTVarRecToVariant(var R : TVarRec) : OleVariant;
var
__rw : __TVarRec__Wrapper__;
begin
__rw := __TVarRec__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTVarRec(const V : OleVariant) : TVarRec;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TVarRec((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetEUpdateError__Context(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := EUpdateError(Instance).Context;
end;

function __DC__GetEUpdateError__ErrorCode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := EUpdateError(Instance).ErrorCode;
end;

function __DC__GetEUpdateError__PreviousError(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := EUpdateError(Instance).PreviousError;
end;

function __DC__GetEUpdateError__OriginalException(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(EUpdateError(Instance).OriginalException);
end;

function __DC__GetTAggregateField__Handle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TAggregateField(Instance).Handle);
end;

procedure __DC__SetTAggregateField__Handle(Instance : TObject; Params : PVariantArgList);
begin
TAggregateField(Instance).Handle:=TAggHandle(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTAggregateField__ResultType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TAggregateField(Instance).ResultType;
end;

procedure __DC__SetTAggregateField__ResultType(Instance : TObject; Params : PVariantArgList);
begin
TAggregateField(Instance).ResultType:=OleVariant(Params^[0]);
end;

function __DC__GetTArrayField__Size(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TArrayField(Instance).Size;
end;

procedure __DC__SetTArrayField__Size(Instance : TObject; Params : PVariantArgList);
begin
TArrayField(Instance).Size:=OleVariant(Params^[0]);
end;

function __DC__GetTBCDField__Value(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBCDField(Instance).Value;
end;

procedure __DC__SetTBCDField__Value(Instance : TObject; Params : PVariantArgList);
begin
TBCDField(Instance).Value:=OleVariant(Params^[0]);
end;

function __DC__GetTBlobField__BlobSize(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBlobField(Instance).BlobSize;
end;

function __DC__GetTBlobField__Modified(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBlobField(Instance).Modified;
end;

procedure __DC__SetTBlobField__Modified(Instance : TObject; Params : PVariantArgList);
begin
TBlobField(Instance).Modified:=OleVariant(Params^[0]);
end;

function __DC__GetTBlobField__Transliterate(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBlobField(Instance).Transliterate;
end;

procedure __DC__SetTBlobField__Transliterate(Instance : TObject; Params : PVariantArgList);
begin
TBlobField(Instance).Transliterate:=OleVariant(Params^[0]);
end;

function __DC__GetTBooleanField__Value(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBooleanField(Instance).Value;
end;

procedure __DC__SetTBooleanField__Value(Instance : TObject; Params : PVariantArgList);
begin
TBooleanField(Instance).Value:=OleVariant(Params^[0]);
end;

function __DC__GetTCheckConstraints__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCheckConstraints(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __DC__SetTCheckConstraints__Items(Instance : TObject; Params : PVariantArgList);
begin
TCheckConstraints(Instance).Items[OleVariant(Params^[1])]:=TCheckConstraint(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomConnection__Connected(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomConnection(Instance).Connected;
end;

procedure __DC__SetTCustomConnection__Connected(Instance : TObject; Params : PVariantArgList);
begin
TCustomConnection(Instance).Connected:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomConnection__DataSets(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomConnection(Instance).DataSets[OleVariant(Params^[0])]);
end;

function __DC__GetTCustomConnection__DataSetCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomConnection(Instance).DataSetCount;
end;

function __DC__GetTCustomConnection__LoginPrompt(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomConnection(Instance).LoginPrompt;
end;

procedure __DC__SetTCustomConnection__LoginPrompt(Instance : TObject; Params : PVariantArgList);
begin
TCustomConnection(Instance).LoginPrompt:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomConnection__AfterConnect(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
// result := VarFromObject(TCustomConnection(Instance).AfterConnect);
end;

procedure __DC__SetTCustomConnection__AfterConnect(Instance : TObject; Params : PVariantArgList);
begin
//TCustomConnection(Instance).AfterConnect:=TNotifyEvent(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomConnection__BeforeConnect(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
//result := VarFromObject(TCustomConnection(Instance).BeforeConnect);
end;

procedure __DC__SetTCustomConnection__BeforeConnect(Instance : TObject; Params : PVariantArgList);
begin
//TCustomConnection(Instance).BeforeConnect:=TNotifyEvent(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomConnection__AfterDisconnect(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
//result := VarFromObject(TCustomConnection(Instance).AfterDisconnect);
end;

procedure __DC__SetTCustomConnection__AfterDisconnect(Instance : TObject; Params : PVariantArgList);
begin
//TCustomConnection(Instance).AfterDisconnect:=TNotifyEvent(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomConnection__BeforeDisconnect(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
//result := VarFromObject(TCustomConnection(Instance).BeforeDisconnect);
end;

procedure __DC__SetTCustomConnection__BeforeDisconnect(Instance : TObject; Params : PVariantArgList);
begin
//TCustomConnection(Instance).BeforeDisconnect:=TNotifyEvent(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomConnection__OnLogin(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
//result := VarFromObject(TCustomConnection(Instance).OnLogin);
end;

procedure __DC__SetTCustomConnection__OnLogin(Instance : TObject; Params : PVariantArgList);
begin
//TCustomConnection(Instance).OnLogin:=TLoginEvent(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDataLink__Active(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataLink(Instance).Active;
end;

function __DC__GetTDataLink__ActiveRecord(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataLink(Instance).ActiveRecord;
end;

procedure __DC__SetTDataLink__ActiveRecord(Instance : TObject; Params : PVariantArgList);
begin
TDataLink(Instance).ActiveRecord:=OleVariant(Params^[0]);
end;

function __DC__GetTDataLink__BOF(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataLink(Instance).BOF;
end;

function __DC__GetTDataLink__BufferCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataLink(Instance).BufferCount;
end;

procedure __DC__SetTDataLink__BufferCount(Instance : TObject; Params : PVariantArgList);
begin
TDataLink(Instance).BufferCount:=OleVariant(Params^[0]);
end;

function __DC__GetTDataLink__DataSet(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDataLink(Instance).DataSet);
end;

function __DC__GetTDataLink__DataSource(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDataLink(Instance).DataSource);
end;

procedure __DC__SetTDataLink__DataSource(Instance : TObject; Params : PVariantArgList);
begin
TDataLink(Instance).DataSource:=TDataSource(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDataLink__DataSourceFixed(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataLink(Instance).DataSourceFixed;
end;

procedure __DC__SetTDataLink__DataSourceFixed(Instance : TObject; Params : PVariantArgList);
begin
TDataLink(Instance).DataSourceFixed:=OleVariant(Params^[0]);
end;

function __DC__GetTDataLink__Editing(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataLink(Instance).Editing;
end;

function __DC__GetTDataLink__Eof(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataLink(Instance).Eof;
end;

function __DC__GetTDataLink__ReadOnly(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataLink(Instance).ReadOnly;
end;

procedure __DC__SetTDataLink__ReadOnly(Instance : TObject; Params : PVariantArgList);
begin
TDataLink(Instance).ReadOnly:=OleVariant(Params^[0]);
end;

function __DC__GetTDataLink__RecordCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataLink(Instance).RecordCount;
end;

function __DC__GetTDataSet__AggFields(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDataSet(Instance).AggFields);
end;

function __DC__GetTDataSet__BOF(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataSet(Instance).BOF;
end;

function __DC__GetTDataSet__Bookmark(Instance : TObject; Params : PVariantArgList) : OleVariant;
var v:Variant;
begin
  DynArrayToVariant(v, TDataSet(Instance).Bookmark ,TypeInfo(TBookMark));
  result:=v;
//result := VarFromObject(TDataSet(Instance).Bookmark);
end;

procedure __DC__SetTDataSet__Bookmark(Instance : TObject; Params : PVariantArgList);
var bk:TBookmark;
v:Variant;
begin
  v:=OleVariant(Params^[0]);
  DynArrayFromVariant(pointer(bk),v,TypeInfo(TBookMark));
//TDataSet(Instance).Bookmark:=TBookmark(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDataSet__CanModify(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataSet(Instance).CanModify;
end;

function __DC__GetTDataSet__CanRefresh(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataSet(Instance).CanRefresh;
end;

function __DC__GetTDataSet__DataSetField(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDataSet(Instance).DataSetField);
end;

procedure __DC__SetTDataSet__DataSetField(Instance : TObject; Params : PVariantArgList);
begin
TDataSet(Instance).DataSetField:=TDataSetField(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDataSet__DataSource(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDataSet(Instance).DataSource);
end;

function __DC__GetTDataSet__Designer(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDataSet(Instance).Designer);
end;

function __DC__GetTDataSet__Eof(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataSet(Instance).Eof;
end;

function __DC__GetTDataSet__BlockReadSize(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataSet(Instance).BlockReadSize;
end;

procedure __DC__SetTDataSet__BlockReadSize(Instance : TObject; Params : PVariantArgList);
begin
TDataSet(Instance).BlockReadSize:=OleVariant(Params^[0]);
end;

function __DC__GetTDataSet__FieldCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataSet(Instance).FieldCount;
end;

function __DC__GetTDataSet__FieldDefs(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDataSet(Instance).FieldDefs);
end;

procedure __DC__SetTDataSet__FieldDefs(Instance : TObject; Params : PVariantArgList);
begin
TDataSet(Instance).FieldDefs:=TFieldDefs(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDataSet__FieldDefList(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDataSet(Instance).FieldDefList);
end;

function __DC__GetTDataSet__Fields(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDataSet(Instance).Fields);
end;

function __DC__GetTDataSet__FieldList(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDataSet(Instance).FieldList);
end;

function __DC__GetTDataSet__FieldValues(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataSet(Instance).FieldValues[OleVariant(Params^[0])];
end;

procedure __DC__SetTDataSet__FieldValues(Instance : TObject; Params : PVariantArgList);
begin
TDataSet(Instance).FieldValues[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTDataSet__Found(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataSet(Instance).Found;
end;

function __DC__GetTDataSet__IsUniDirectional(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataSet(Instance).IsUniDirectional;
end;

function __DC__GetTDataSet__Modified(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataSet(Instance).Modified;
end;

function __DC__GetTDataSet__ObjectView(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataSet(Instance).ObjectView;
end;

procedure __DC__SetTDataSet__ObjectView(Instance : TObject; Params : PVariantArgList);
begin
TDataSet(Instance).ObjectView:=OleVariant(Params^[0]);
end;

function __DC__GetTDataSet__RecordCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataSet(Instance).RecordCount;
end;

function __DC__GetTDataSet__RecNo(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataSet(Instance).RecNo;
end;

procedure __DC__SetTDataSet__RecNo(Instance : TObject; Params : PVariantArgList);
begin
TDataSet(Instance).RecNo:=OleVariant(Params^[0]);
end;

function __DC__GetTDataSet__RecordSize(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataSet(Instance).RecordSize;
end;

function __DC__GetTDataSet__SparseArrays(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataSet(Instance).SparseArrays;
end;

procedure __DC__SetTDataSet__SparseArrays(Instance : TObject; Params : PVariantArgList);
begin
TDataSet(Instance).SparseArrays:=OleVariant(Params^[0]);
end;

function __DC__GetTDataSet__State(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataSet(Instance).State;
end;

function __DC__GetTDataSet__Filter(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataSet(Instance).Filter;
end;

procedure __DC__SetTDataSet__Filter(Instance : TObject; Params : PVariantArgList);
begin
TDataSet(Instance).Filter:=OleVariant(Params^[0]);
end;

function __DC__GetTDataSet__Filtered(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataSet(Instance).Filtered;
end;

procedure __DC__SetTDataSet__Filtered(Instance : TObject; Params : PVariantArgList);
begin
TDataSet(Instance).Filtered:=OleVariant(Params^[0]);
end;

function __DC__GetTDataSet__FilterOptions(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TFilterOptions;
begin
tmp := TDataSet(Instance).FilterOptions;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTDataSet__FilterOptions(Instance : TObject; Params : PVariantArgList);
var
  tmp : TFilterOptions;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TDataSet(Instance).FilterOptions:=tmp;
end;

function __DC__GetTDataSet__Active(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataSet(Instance).Active;
end;

procedure __DC__SetTDataSet__Active(Instance : TObject; Params : PVariantArgList);
begin
TDataSet(Instance).Active:=OleVariant(Params^[0]);
end;

function __DC__GetTDataSet__AutoCalcFields(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataSet(Instance).AutoCalcFields;
end;

procedure __DC__SetTDataSet__AutoCalcFields(Instance : TObject; Params : PVariantArgList);
begin
TDataSet(Instance).AutoCalcFields:=OleVariant(Params^[0]);
end;

function __DC__GetTDataSetDesigner__DataSet(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDataSetDesigner(Instance).DataSet);
end;

function __DC__GetTDataSetField__NestedDataSet(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDataSetField(Instance).NestedDataSet);
end;

function __DC__GetTDataSource__State(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataSource(Instance).State;
end;

function __DC__GetTDateTimeField__Value(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDateTimeField(Instance).Value;
end;

procedure __DC__SetTDateTimeField__Value(Instance : TObject; Params : PVariantArgList);
begin
TDateTimeField(Instance).Value:=OleVariant(Params^[0]);
end;

function __DC__GetTDefCollection__DataSet(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDefCollection(Instance).DataSet);
end;

function __DC__GetTDefCollection__Updated(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDefCollection(Instance).Updated;
end;

procedure __DC__SetTDefCollection__Updated(Instance : TObject; Params : PVariantArgList);
begin
TDefCollection(Instance).Updated:=OleVariant(Params^[0]);
end;

function __DC__GetTDetailDataLink__DetailDataSet(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDetailDataLink(Instance).DetailDataSet);
end;

function __DC__GetTExtendedField__Value(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TExtendedField(Instance).Value;
end;

procedure __DC__SetTExtendedField__Value(Instance : TObject; Params : PVariantArgList);
begin
TExtendedField(Instance).Value:=OleVariant(Params^[0]);
end;

function __DC__GetTField__AsBCD(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
//result := VarFromObject(TField(Instance).AsBCD);
end;

procedure __DC__SetTField__AsBCD(Instance : TObject; Params : PVariantArgList);
begin
//TField(Instance).AsBCD:=TBcd(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTField__AsBoolean(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).AsBoolean;
end;

procedure __DC__SetTField__AsBoolean(Instance : TObject; Params : PVariantArgList);
begin
TField(Instance).AsBoolean:=OleVariant(Params^[0]);
end;

function __DC__GetTField__AsCurrency(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).AsCurrency;
end;

procedure __DC__SetTField__AsCurrency(Instance : TObject; Params : PVariantArgList);
begin
TField(Instance).AsCurrency:=OleVariant(Params^[0]);
end;

function __DC__GetTField__AsDateTime(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).AsDateTime;
end;

procedure __DC__SetTField__AsDateTime(Instance : TObject; Params : PVariantArgList);
begin
TField(Instance).AsDateTime:=OleVariant(Params^[0]);
end;

function __DC__GetTField__AsSQLTimeStamp(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
//result := VarFromObject(TField(Instance).AsSQLTimeStamp);
end;

procedure __DC__SetTField__AsSQLTimeStamp(Instance : TObject; Params : PVariantArgList);
begin
//TField(Instance).AsSQLTimeStamp:=TSQLTimeStamp(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTField__AsSQLTimeStampOffset(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
//result := VarFromObject(TField(Instance).AsSQLTimeStampOffset);
end;

procedure __DC__SetTField__AsSQLTimeStampOffset(Instance : TObject; Params : PVariantArgList);
begin
//TField(Instance).AsSQLTimeStampOffset:=TSQLTimeStampOffset(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTField__AsSingle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).AsSingle;
end;

procedure __DC__SetTField__AsSingle(Instance : TObject; Params : PVariantArgList);
begin
TField(Instance).AsSingle:=OleVariant(Params^[0]);
end;

function __DC__GetTField__AsFloat(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).AsFloat;
end;

procedure __DC__SetTField__AsFloat(Instance : TObject; Params : PVariantArgList);
begin
TField(Instance).AsFloat:=OleVariant(Params^[0]);
end;

function __DC__GetTField__AsExtended(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).AsExtended;
end;

procedure __DC__SetTField__AsExtended(Instance : TObject; Params : PVariantArgList);
begin
TField(Instance).AsExtended:=OleVariant(Params^[0]);
end;

function __DC__GetTField__AsInteger(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).AsInteger;
end;

procedure __DC__SetTField__AsInteger(Instance : TObject; Params : PVariantArgList);
begin
TField(Instance).AsInteger:=OleVariant(Params^[0]);
end;

function __DC__GetTField__AsLongWord(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).AsLongWord;
end;

procedure __DC__SetTField__AsLongWord(Instance : TObject; Params : PVariantArgList);
begin
TField(Instance).AsLongWord:=OleVariant(Params^[0]);
end;

function __DC__GetTField__AsString(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).AsString;
end;

procedure __DC__SetTField__AsString(Instance : TObject; Params : PVariantArgList);
begin
TField(Instance).AsString:=OleVariant(Params^[0]);
end;

function __DC__GetTField__AsWideString(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).AsWideString;
end;

procedure __DC__SetTField__AsWideString(Instance : TObject; Params : PVariantArgList);
begin
TField(Instance).AsWideString:=OleVariant(Params^[0]);
end;

function __DC__GetTField__AsAnsiString(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).AsAnsiString;
end;

procedure __DC__SetTField__AsAnsiString(Instance : TObject; Params : PVariantArgList);
begin
TField(Instance).AsAnsiString:=OleVariant(Params^[0]);
end;

function __DC__GetTField__AsVariant(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).AsVariant;
end;

procedure __DC__SetTField__AsVariant(Instance : TObject; Params : PVariantArgList);
begin
TField(Instance).AsVariant:=OleVariant(Params^[0]);
end;

function __DC__GetTField__AsGuid(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TGUID__Wrapper;
begin
__wrapper := __TGUID__Wrapper.Create;
__wrapper.fR := TField(Instance).AsGuid;
result := IUnknown(__wrapper) as IDispatch;
end;

procedure __DC__SetTField__AsGuid(Instance : TObject; Params : PVariantArgList);
var
__idisp:IDispatch;
__iwrapper:IDCRecordWrapper;
begin
__idisp:=DCVarToInterface(OleVariant(Params^[0]));
if __idisp=nil then exit;
__idisp.QueryInterface(IDCRecordWrapper, __iwrapper);
TField(Instance).AsGuid:=TGUID(__iwrapper.GetRecordPtr^);
end;

function __DC__GetTField__AttributeSet(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).AttributeSet;
end;

procedure __DC__SetTField__AttributeSet(Instance : TObject; Params : PVariantArgList);
begin
TField(Instance).AttributeSet:=OleVariant(Params^[0]);
end;

function __DC__GetTField__Calculated(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).Calculated;
end;

procedure __DC__SetTField__Calculated(Instance : TObject; Params : PVariantArgList);
begin
TField(Instance).Calculated:=OleVariant(Params^[0]);
end;

function __DC__GetTField__CanModify(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).CanModify;
end;

function __DC__GetTField__LifeCycle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).LifeCycle;
end;

procedure __DC__SetTField__LifeCycle(Instance : TObject; Params : PVariantArgList);
begin
TField(Instance).LifeCycle:=OleVariant(Params^[0]);
end;

function __DC__GetTField__CurValue(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).CurValue;
end;

function __DC__GetTField__DataSet(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TField(Instance).DataSet);
end;

procedure __DC__SetTField__DataSet(Instance : TObject; Params : PVariantArgList);
begin
TField(Instance).DataSet:=TDataSet(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTField__DataSize(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).DataSize;
end;

function __DC__GetTField__DataType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).DataType;
end;

function __DC__GetTField__DisplayName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).DisplayName;
end;

function __DC__GetTField__DisplayText(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).DisplayText;
end;

function __DC__GetTField__EditMask(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
//result := VarFromObject(TField(Instance).EditMask);
end;

procedure __DC__SetTField__EditMask(Instance : TObject; Params : PVariantArgList);
begin
TField(Instance).EditMask:=TEditMask(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTField__EditMaskPtr(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
//result := VarFromObject(TField(Instance).EditMaskPtr);
end;

function __DC__GetTField__FieldNo(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).FieldNo;
end;

function __DC__GetTField__FullName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).FullName;
end;

function __DC__GetTField__IsIndexField(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).IsIndexField;
end;

function __DC__GetTField__IsNull(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).IsNull;
end;

function __DC__GetTField__Lookup(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).Lookup;
end;

procedure __DC__SetTField__Lookup(Instance : TObject; Params : PVariantArgList);
begin
TField(Instance).Lookup:=OleVariant(Params^[0]);
end;

function __DC__GetTField__LookupList(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TField(Instance).LookupList);
end;

function __DC__GetTField__NewValue(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).NewValue;
end;

procedure __DC__SetTField__NewValue(Instance : TObject; Params : PVariantArgList);
begin
TField(Instance).NewValue:=OleVariant(Params^[0]);
end;

function __DC__GetTField__Offset(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).Offset;
end;

function __DC__GetTField__OldValue(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).OldValue;
end;

function __DC__GetTField__ParentField(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TField(Instance).ParentField);
end;

procedure __DC__SetTField__ParentField(Instance : TObject; Params : PVariantArgList);
begin
TField(Instance).ParentField:=TObjectField(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTField__Size(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).Size;
end;

procedure __DC__SetTField__Size(Instance : TObject; Params : PVariantArgList);
begin
TField(Instance).Size:=OleVariant(Params^[0]);
end;

function __DC__GetTField__Text(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).Text;
end;

procedure __DC__SetTField__Text(Instance : TObject; Params : PVariantArgList);
begin
TField(Instance).Text:=OleVariant(Params^[0]);
end;

function __DC__GetTField__Validating(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).Validating;
end;

function __DC__GetTField__ValidChars(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TFieldChars;
begin
tmp := TField(Instance).ValidChars;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTField__ValidChars(Instance : TObject; Params : PVariantArgList);
var
  tmp : TFieldChars;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TField(Instance).ValidChars:=tmp;
end;

function __DC__GetTField__Value(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TField(Instance).Value;
end;

procedure __DC__SetTField__Value(Instance : TObject; Params : PVariantArgList);
begin
TField(Instance).Value:=OleVariant(Params^[0]);
end;

function __DC__GetTFieldDef__FieldNo(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFieldDef(Instance).FieldNo;
end;

procedure __DC__SetTFieldDef__FieldNo(Instance : TObject; Params : PVariantArgList);
begin
TFieldDef(Instance).FieldNo:=OleVariant(Params^[0]);
end;

function __DC__GetTFieldDef__InternalCalcField(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFieldDef(Instance).InternalCalcField;
end;

procedure __DC__SetTFieldDef__InternalCalcField(Instance : TObject; Params : PVariantArgList);
begin
TFieldDef(Instance).InternalCalcField:=OleVariant(Params^[0]);
end;

function __DC__GetTFieldDef__ParentDef(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TFieldDef(Instance).ParentDef);
end;

function __DC__GetTFieldDef__DataSet(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TFieldDef(Instance).DataSet);
end;

function __DC__GetTFieldDef__Required(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFieldDef(Instance).Required;
end;

procedure __DC__SetTFieldDef__Required(Instance : TObject; Params : PVariantArgList);
begin
TFieldDef(Instance).Required:=OleVariant(Params^[0]);
end;

function __DC__GetTFieldDefList__FieldDefs(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TFieldDefList(Instance).FieldDefs[OleVariant(Params^[0])]);
end;

function __DC__GetTFieldDefs__HiddenFields(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFieldDefs(Instance).HiddenFields;
end;

procedure __DC__SetTFieldDefs__HiddenFields(Instance : TObject; Params : PVariantArgList);
begin
TFieldDefs(Instance).HiddenFields:=OleVariant(Params^[0]);
end;

function __DC__GetTFieldDefs__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TFieldDefs(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __DC__SetTFieldDefs__Items(Instance : TObject; Params : PVariantArgList);
begin
TFieldDefs(Instance).Items[OleVariant(Params^[1])]:=TFieldDef(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTFieldDefs__ParentDef(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TFieldDefs(Instance).ParentDef);
end;

function __DC__GetTFieldList__Fields(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TFieldList(Instance).Fields[OleVariant(Params^[0])]);
end;

function __DC__GetTFields__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFields(Instance).Count;
end;

function __DC__GetTFields__DataSet(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TFields(Instance).DataSet);
end;

function __DC__GetTFields__Fields(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TFields(Instance).Fields[OleVariant(Params^[0])]);
end;

procedure __DC__SetTFields__Fields(Instance : TObject; Params : PVariantArgList);
begin
TFields(Instance).Fields[OleVariant(Params^[1])]:=TField(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTFields__LifeCycles(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TFieldLifeCycles;
begin
tmp := TFields(Instance).LifeCycles;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTFields__LifeCycles(Instance : TObject; Params : PVariantArgList);
var
  tmp : TFieldLifeCycles;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TFields(Instance).LifeCycles:=tmp;
end;

function __DC__GetTFieldsEnumerator__Current(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TFieldsEnumerator(Instance).Current);
end;

function __DC__GetTFlatList__DataSet(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TFlatList(Instance).DataSet);
end;

function __DC__GetTFloatField__Value(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFloatField(Instance).Value;
end;

procedure __DC__SetTFloatField__Value(Instance : TObject; Params : PVariantArgList);
begin
TFloatField(Instance).Value:=OleVariant(Params^[0]);
end;

function __DC__GetTFMTBCDField__Value(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
//result := VarFromObject(TFMTBCDField(Instance).Value);
end;

procedure __DC__SetTFMTBCDField__Value(Instance : TObject; Params : PVariantArgList);
begin
//TFMTBCDField(Instance).Value:=TBcd(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIndexDef__FieldExpression(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIndexDef(Instance).FieldExpression;
end;

function __DC__GetTIndexDefs__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIndexDefs(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __DC__SetTIndexDefs__Items(Instance : TObject; Params : PVariantArgList);
begin
TIndexDefs(Instance).Items[OleVariant(Params^[1])]:=TIndexDef(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIntegerField__Value(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIntegerField(Instance).Value;
end;

procedure __DC__SetTIntegerField__Value(Instance : TObject; Params : PVariantArgList);
begin
TIntegerField(Instance).Value:=OleVariant(Params^[0]);
end;

function __DC__GetTLongWordField__Value(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TLongWordField(Instance).Value;
end;

procedure __DC__SetTLongWordField__Value(Instance : TObject; Params : PVariantArgList);
begin
TLongWordField(Instance).Value:=OleVariant(Params^[0]);
end;

function __DC__GetTMasterDataLink__FieldNames(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMasterDataLink(Instance).FieldNames;
end;

procedure __DC__SetTMasterDataLink__FieldNames(Instance : TObject; Params : PVariantArgList);
begin
TMasterDataLink(Instance).FieldNames:=OleVariant(Params^[0]);
end;

function __DC__GetTMasterDataLink__OnMasterChange(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
//result := VarFromObject(TMasterDataLink(Instance).OnMasterChange);
end;

procedure __DC__SetTMasterDataLink__OnMasterChange(Instance : TObject; Params : PVariantArgList);
begin
//TMasterDataLink(Instance).OnMasterChange:=TNotifyEvent(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTMasterDataLink__OnMasterDisable(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
//result := VarFromObject(TMasterDataLink(Instance).OnMasterDisable);
end;

procedure __DC__SetTMasterDataLink__OnMasterDisable(Instance : TObject; Params : PVariantArgList);
begin
//TMasterDataLink(Instance).OnMasterDisable:=TNotifyEvent(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTMemoField__Value(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMemoField(Instance).Value;
end;

procedure __DC__SetTMemoField__Value(Instance : TObject; Params : PVariantArgList);
begin
TMemoField(Instance).Value:=OleVariant(Params^[0]);
end;

function __DC__GetTObjectField__FieldCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TObjectField(Instance).FieldCount;
end;

function __DC__GetTObjectField__Fields(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TObjectField(Instance).Fields);
end;

function __DC__GetTObjectField__FieldValues(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TObjectField(Instance).FieldValues[OleVariant(Params^[0])];
end;

procedure __DC__SetTObjectField__FieldValues(Instance : TObject; Params : PVariantArgList);
begin
TObjectField(Instance).FieldValues[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTObjectField__UnNamed(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TObjectField(Instance).UnNamed;
end;

function __DC__GetTParam__AsBCD(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TParam(Instance).AsBCD;
end;

procedure __DC__SetTParam__AsBCD(Instance : TObject; Params : PVariantArgList);
begin
TParam(Instance).AsBCD:=OleVariant(Params^[0]);
end;

function __DC__GetTParam__AsFMTBCD(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
//result := VarFromObject(TParam(Instance).AsFMTBCD);
end;

procedure __DC__SetTParam__AsFMTBCD(Instance : TObject; Params : PVariantArgList);
begin
//TParam(Instance).AsFMTBCD:=TBcd(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTParam__AsBlob(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
//result := VarFromObject(TParam(Instance).AsBlob);
end;

procedure __DC__SetTParam__AsBlob(Instance : TObject; Params : PVariantArgList);
begin
TParam(Instance).AsBlob:=TBlobData(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTParam__AsBoolean(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TParam(Instance).AsBoolean;
end;

procedure __DC__SetTParam__AsBoolean(Instance : TObject; Params : PVariantArgList);
begin
TParam(Instance).AsBoolean:=OleVariant(Params^[0]);
end;

function __DC__GetTParam__AsCurrency(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TParam(Instance).AsCurrency;
end;

procedure __DC__SetTParam__AsCurrency(Instance : TObject; Params : PVariantArgList);
begin
TParam(Instance).AsCurrency:=OleVariant(Params^[0]);
end;

function __DC__GetTParam__AsDate(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TParam(Instance).AsDate;
end;

procedure __DC__SetTParam__AsDate(Instance : TObject; Params : PVariantArgList);
begin
TParam(Instance).AsDate:=OleVariant(Params^[0]);
end;

function __DC__GetTParam__AsDateTime(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TParam(Instance).AsDateTime;
end;

procedure __DC__SetTParam__AsDateTime(Instance : TObject; Params : PVariantArgList);
begin
TParam(Instance).AsDateTime:=OleVariant(Params^[0]);
end;

function __DC__GetTParam__AsSingle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TParam(Instance).AsSingle;
end;

procedure __DC__SetTParam__AsSingle(Instance : TObject; Params : PVariantArgList);
begin
TParam(Instance).AsSingle:=OleVariant(Params^[0]);
end;

function __DC__GetTParam__AsFloat(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TParam(Instance).AsFloat;
end;

procedure __DC__SetTParam__AsFloat(Instance : TObject; Params : PVariantArgList);
begin
TParam(Instance).AsFloat:=OleVariant(Params^[0]);
end;

function __DC__GetTParam__AsInteger(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TParam(Instance).AsInteger;
end;

procedure __DC__SetTParam__AsInteger(Instance : TObject; Params : PVariantArgList);
begin
TParam(Instance).AsInteger:=OleVariant(Params^[0]);
end;

function __DC__GetTParam__AsSmallInt(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TParam(Instance).AsSmallInt;
end;

procedure __DC__SetTParam__AsSmallInt(Instance : TObject; Params : PVariantArgList);
begin
TParam(Instance).AsSmallInt:=OleVariant(Params^[0]);
end;

function __DC__GetTParam__AsShortInt(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TParam(Instance).AsShortInt;
end;

procedure __DC__SetTParam__AsShortInt(Instance : TObject; Params : PVariantArgList);
begin
TParam(Instance).AsShortInt:=OleVariant(Params^[0]);
end;

function __DC__GetTParam__AsByte(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TParam(Instance).AsByte;
end;

procedure __DC__SetTParam__AsByte(Instance : TObject; Params : PVariantArgList);
begin
TParam(Instance).AsByte:=OleVariant(Params^[0]);
end;

function __DC__GetTParam__AsLongWord(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TParam(Instance).AsLongWord;
end;

procedure __DC__SetTParam__AsLongWord(Instance : TObject; Params : PVariantArgList);
begin
TParam(Instance).AsLongWord:=OleVariant(Params^[0]);
end;

function __DC__GetTParam__AsSQLTimeStamp(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
//result := VarFromObject(TParam(Instance).AsSQLTimeStamp);
end;

procedure __DC__SetTParam__AsSQLTimeStamp(Instance : TObject; Params : PVariantArgList);
begin
//TParam(Instance).AsSQLTimeStamp:=TSQLTimeStamp(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTParam__AsSQLTimeStampOffset(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
//result := VarFromObject(TParam(Instance).AsSQLTimeStampOffset);
end;

procedure __DC__SetTParam__AsSQLTimeStampOffset(Instance : TObject; Params : PVariantArgList);
begin
//TParam(Instance).AsSQLTimeStampOffset:=TSQLTimeStampOffset(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTParam__AsMemo(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TParam(Instance).AsMemo;
end;

procedure __DC__SetTParam__AsMemo(Instance : TObject; Params : PVariantArgList);
begin
TParam(Instance).AsMemo:=OleVariant(Params^[0]);
end;

function __DC__GetTParam__AsString(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TParam(Instance).AsString;
end;

procedure __DC__SetTParam__AsString(Instance : TObject; Params : PVariantArgList);
begin
TParam(Instance).AsString:=OleVariant(Params^[0]);
end;

function __DC__GetTParam__AsWideString(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TParam(Instance).AsWideString;
end;

procedure __DC__SetTParam__AsWideString(Instance : TObject; Params : PVariantArgList);
begin
TParam(Instance).AsWideString:=OleVariant(Params^[0]);
end;

function __DC__GetTParam__AsAnsiString(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TParam(Instance).AsAnsiString;
end;

procedure __DC__SetTParam__AsAnsiString(Instance : TObject; Params : PVariantArgList);
begin
TParam(Instance).AsAnsiString:=OleVariant(Params^[0]);
end;

function __DC__GetTParam__AsTime(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TParam(Instance).AsTime;
end;

procedure __DC__SetTParam__AsTime(Instance : TObject; Params : PVariantArgList);
begin
TParam(Instance).AsTime:=OleVariant(Params^[0]);
end;

function __DC__GetTParam__AsWord(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TParam(Instance).AsWord;
end;

procedure __DC__SetTParam__AsWord(Instance : TObject; Params : PVariantArgList);
begin
TParam(Instance).AsWord:=OleVariant(Params^[0]);
end;

function __DC__GetTParam__AsDataSet(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TParam(Instance).AsDataSet);
end;

procedure __DC__SetTParam__AsDataSet(Instance : TObject; Params : PVariantArgList);
begin
TParam(Instance).AsDataSet:=TDataSet(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTParam__AsObject(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TParam(Instance).AsObject);
end;

procedure __DC__SetTParam__AsObject(Instance : TObject; Params : PVariantArgList);
begin
TParam(Instance).AsObject:=TObject(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTParam__AsParams(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TParam(Instance).AsParams);
end;

procedure __DC__SetTParam__AsParams(Instance : TObject; Params : PVariantArgList);
begin
TParam(Instance).AsParams:=TParams(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTParam__AsStream(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TParam(Instance).AsStream);
end;

procedure __DC__SetTParam__AsStream(Instance : TObject; Params : PVariantArgList);
begin
TParam(Instance).AsStream:=TStream(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTParam__AsGuid(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TGUID__Wrapper;
begin
__wrapper := __TGUID__Wrapper.Create;
__wrapper.fR := TParam(Instance).AsGuid;
result := IUnknown(__wrapper) as IDispatch;
end;

procedure __DC__SetTParam__AsGuid(Instance : TObject; Params : PVariantArgList);
var
__idisp:IDispatch;
__iwrapper:IDCRecordWrapper;
begin
__idisp:=DCVarToInterface(OleVariant(Params^[0]));
if __idisp=nil then exit;
__idisp.QueryInterface(IDCRecordWrapper, __iwrapper);
TParam(Instance).AsGuid:=TGUID(__iwrapper.GetRecordPtr^);
end;

function __DC__GetTParam__Bound(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TParam(Instance).Bound;
end;

procedure __DC__SetTParam__Bound(Instance : TObject; Params : PVariantArgList);
begin
TParam(Instance).Bound:=OleVariant(Params^[0]);
end;

function __DC__GetTParam__IsNull(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TParam(Instance).IsNull;
end;

function __DC__GetTParam__NativeStr(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TParam(Instance).NativeStr;
end;

procedure __DC__SetTParam__NativeStr(Instance : TObject; Params : PVariantArgList);
begin
TParam(Instance).NativeStr:=OleVariant(Params^[0]);
end;

function __DC__GetTParam__Text(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TParam(Instance).Text;
end;

procedure __DC__SetTParam__Text(Instance : TObject; Params : PVariantArgList);
begin
TParam(Instance).Text:=OleVariant(Params^[0]);
end;

function __DC__GetTParams__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TParams(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __DC__SetTParams__Items(Instance : TObject; Params : PVariantArgList);
begin
TParams(Instance).Items[OleVariant(Params^[1])]:=TParam(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTParams__ParamValues(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TParams(Instance).ParamValues[OleVariant(Params^[0])];
end;

procedure __DC__SetTParams__ParamValues(Instance : TObject; Params : PVariantArgList);
begin
TParams(Instance).ParamValues[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTSingleField__Value(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSingleField(Instance).Value;
end;

procedure __DC__SetTSingleField__Value(Instance : TObject; Params : PVariantArgList);
begin
TSingleField(Instance).Value:=OleVariant(Params^[0]);
end;

function __DC__GetTSQLTimeStampField__Value(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
//result := VarFromObject(TSQLTimeStampField(Instance).Value);
end;

procedure __DC__SetTSQLTimeStampField__Value(Instance : TObject; Params : PVariantArgList);
begin
//TSQLTimeStampField(Instance).Value:=TSQLTimeStamp(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTSQLTimeStampOffsetField__Value(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
//result := VarFromObject(TSQLTimeStampOffsetField(Instance).Value);
end;

procedure __DC__SetTSQLTimeStampOffsetField__Value(Instance : TObject; Params : PVariantArgList);
begin
//TSQLTimeStampOffsetField(Instance).Value:=TSQLTimeStampOffset(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTStringField__Value(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TStringField(Instance).Value;
end;

procedure __DC__SetTStringField__Value(Instance : TObject; Params : PVariantArgList);
begin
TStringField(Instance).Value:=OleVariant(Params^[0]);
end;

function __DC__GetTWideMemoField__Value(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWideMemoField(Instance).Value;
end;

procedure __DC__SetTWideMemoField__Value(Instance : TObject; Params : PVariantArgList);
begin
TWideMemoField(Instance).Value:=OleVariant(Params^[0]);
end;

function __DC__GetTWideStringField__Value(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TWideStringField(Instance).Value;
end;

procedure __DC__SetTWideStringField__Value(Instance : TObject; Params : PVariantArgList);
begin
TWideStringField(Instance).Value:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(EUpdateError,'Context',__DC__GetEUpdateError__Context,nil);
RegisterProperty(EUpdateError,'ErrorCode',__DC__GetEUpdateError__ErrorCode,nil);
RegisterProperty(EUpdateError,'PreviousError',__DC__GetEUpdateError__PreviousError,nil);
RegisterProperty(EUpdateError,'OriginalException',__DC__GetEUpdateError__OriginalException,nil);
RegisterProperty(TAggregateField,'Handle',__DC__GetTAggregateField__Handle,__DC__SetTAggregateField__Handle);
RegisterProperty(TAggregateField,'ResultType',__DC__GetTAggregateField__ResultType,__DC__SetTAggregateField__ResultType);
RegisterProperty(TArrayField,'Size',__DC__GetTArrayField__Size,__DC__SetTArrayField__Size);
RegisterProperty(TBCDField,'Value',__DC__GetTBCDField__Value,__DC__SetTBCDField__Value);
RegisterProperty(TBlobField,'BlobSize',__DC__GetTBlobField__BlobSize,nil);
RegisterProperty(TBlobField,'Modified',__DC__GetTBlobField__Modified,__DC__SetTBlobField__Modified);
RegisterProperty(TBlobField,'Transliterate',__DC__GetTBlobField__Transliterate,__DC__SetTBlobField__Transliterate);
RegisterProperty(TBooleanField,'Value',__DC__GetTBooleanField__Value,__DC__SetTBooleanField__Value);
RegisterIndexedProperty(TCheckConstraints,'Items',1,True,__DC__GetTCheckConstraints__Items,__DC__SetTCheckConstraints__Items);
RegisterProperty(TCustomConnection,'Connected',__DC__GetTCustomConnection__Connected,__DC__SetTCustomConnection__Connected);
RegisterIndexedProperty(TCustomConnection,'DataSets',1,False,__DC__GetTCustomConnection__DataSets,nil);
RegisterProperty(TCustomConnection,'DataSetCount',__DC__GetTCustomConnection__DataSetCount,nil);
RegisterProperty(TCustomConnection,'LoginPrompt',__DC__GetTCustomConnection__LoginPrompt,__DC__SetTCustomConnection__LoginPrompt);
RegisterProperty(TCustomConnection,'AfterConnect',__DC__GetTCustomConnection__AfterConnect,__DC__SetTCustomConnection__AfterConnect);
RegisterProperty(TCustomConnection,'BeforeConnect',__DC__GetTCustomConnection__BeforeConnect,__DC__SetTCustomConnection__BeforeConnect);
RegisterProperty(TCustomConnection,'AfterDisconnect',__DC__GetTCustomConnection__AfterDisconnect,__DC__SetTCustomConnection__AfterDisconnect);
RegisterProperty(TCustomConnection,'BeforeDisconnect',__DC__GetTCustomConnection__BeforeDisconnect,__DC__SetTCustomConnection__BeforeDisconnect);
RegisterProperty(TCustomConnection,'OnLogin',__DC__GetTCustomConnection__OnLogin,__DC__SetTCustomConnection__OnLogin);
RegisterProperty(TDataLink,'Active',__DC__GetTDataLink__Active,nil);
RegisterProperty(TDataLink,'ActiveRecord',__DC__GetTDataLink__ActiveRecord,__DC__SetTDataLink__ActiveRecord);
RegisterProperty(TDataLink,'BOF',__DC__GetTDataLink__BOF,nil);
RegisterProperty(TDataLink,'BufferCount',__DC__GetTDataLink__BufferCount,__DC__SetTDataLink__BufferCount);
RegisterProperty(TDataLink,'DataSet',__DC__GetTDataLink__DataSet,nil);
RegisterProperty(TDataLink,'DataSource',__DC__GetTDataLink__DataSource,__DC__SetTDataLink__DataSource);
RegisterProperty(TDataLink,'DataSourceFixed',__DC__GetTDataLink__DataSourceFixed,__DC__SetTDataLink__DataSourceFixed);
RegisterProperty(TDataLink,'Editing',__DC__GetTDataLink__Editing,nil);
RegisterProperty(TDataLink,'Eof',__DC__GetTDataLink__Eof,nil);
RegisterProperty(TDataLink,'ReadOnly',__DC__GetTDataLink__ReadOnly,__DC__SetTDataLink__ReadOnly);
RegisterProperty(TDataLink,'RecordCount',__DC__GetTDataLink__RecordCount,nil);
RegisterProperty(TDataSet,'AggFields',__DC__GetTDataSet__AggFields,nil);
RegisterProperty(TDataSet,'BOF',__DC__GetTDataSet__BOF,nil);
RegisterProperty(TDataSet,'Bookmark',__DC__GetTDataSet__Bookmark,__DC__SetTDataSet__Bookmark);
RegisterProperty(TDataSet,'CanModify',__DC__GetTDataSet__CanModify,nil);
RegisterProperty(TDataSet,'CanRefresh',__DC__GetTDataSet__CanRefresh,nil);
RegisterProperty(TDataSet,'DataSetField',__DC__GetTDataSet__DataSetField,__DC__SetTDataSet__DataSetField);
RegisterProperty(TDataSet,'DataSource',__DC__GetTDataSet__DataSource,nil);
RegisterProperty(TDataSet,'Designer',__DC__GetTDataSet__Designer,nil);
RegisterProperty(TDataSet,'Eof',__DC__GetTDataSet__Eof,nil);
RegisterProperty(TDataSet,'BlockReadSize',__DC__GetTDataSet__BlockReadSize,__DC__SetTDataSet__BlockReadSize);
RegisterProperty(TDataSet,'FieldCount',__DC__GetTDataSet__FieldCount,nil);
RegisterProperty(TDataSet,'FieldDefs',__DC__GetTDataSet__FieldDefs,__DC__SetTDataSet__FieldDefs);
RegisterProperty(TDataSet,'FieldDefList',__DC__GetTDataSet__FieldDefList,nil);
RegisterProperty(TDataSet,'Fields',__DC__GetTDataSet__Fields,nil);
RegisterProperty(TDataSet,'FieldList',__DC__GetTDataSet__FieldList,nil);
RegisterIndexedProperty(TDataSet,'FieldValues',1,True,__DC__GetTDataSet__FieldValues,__DC__SetTDataSet__FieldValues);
RegisterProperty(TDataSet,'Found',__DC__GetTDataSet__Found,nil);
RegisterProperty(TDataSet,'IsUniDirectional',__DC__GetTDataSet__IsUniDirectional,nil);
RegisterProperty(TDataSet,'Modified',__DC__GetTDataSet__Modified,nil);
RegisterProperty(TDataSet,'ObjectView',__DC__GetTDataSet__ObjectView,__DC__SetTDataSet__ObjectView);
RegisterProperty(TDataSet,'RecordCount',__DC__GetTDataSet__RecordCount,nil);
RegisterProperty(TDataSet,'RecNo',__DC__GetTDataSet__RecNo,__DC__SetTDataSet__RecNo);
RegisterProperty(TDataSet,'RecordSize',__DC__GetTDataSet__RecordSize,nil);
RegisterProperty(TDataSet,'SparseArrays',__DC__GetTDataSet__SparseArrays,__DC__SetTDataSet__SparseArrays);
RegisterProperty(TDataSet,'State',__DC__GetTDataSet__State,nil);
RegisterProperty(TDataSet,'Filter',__DC__GetTDataSet__Filter,__DC__SetTDataSet__Filter);
RegisterProperty(TDataSet,'Filtered',__DC__GetTDataSet__Filtered,__DC__SetTDataSet__Filtered);
RegisterProperty(TDataSet,'FilterOptions',__DC__GetTDataSet__FilterOptions,__DC__SetTDataSet__FilterOptions);
RegisterProperty(TDataSet,'Active',__DC__GetTDataSet__Active,__DC__SetTDataSet__Active);
RegisterProperty(TDataSet,'AutoCalcFields',__DC__GetTDataSet__AutoCalcFields,__DC__SetTDataSet__AutoCalcFields);
RegisterProperty(TDataSetDesigner,'DataSet',__DC__GetTDataSetDesigner__DataSet,nil);
RegisterProperty(TDataSetField,'NestedDataSet',__DC__GetTDataSetField__NestedDataSet,nil);
RegisterProperty(TDataSource,'State',__DC__GetTDataSource__State,nil);
RegisterProperty(TDateTimeField,'Value',__DC__GetTDateTimeField__Value,__DC__SetTDateTimeField__Value);
RegisterProperty(TDefCollection,'DataSet',__DC__GetTDefCollection__DataSet,nil);
RegisterProperty(TDefCollection,'Updated',__DC__GetTDefCollection__Updated,__DC__SetTDefCollection__Updated);
RegisterProperty(TDetailDataLink,'DetailDataSet',__DC__GetTDetailDataLink__DetailDataSet,nil);
RegisterProperty(TExtendedField,'Value',__DC__GetTExtendedField__Value,__DC__SetTExtendedField__Value);
RegisterProperty(TField,'AsBCD',__DC__GetTField__AsBCD,__DC__SetTField__AsBCD);
RegisterProperty(TField,'AsBoolean',__DC__GetTField__AsBoolean,__DC__SetTField__AsBoolean);
RegisterProperty(TField,'AsCurrency',__DC__GetTField__AsCurrency,__DC__SetTField__AsCurrency);
RegisterProperty(TField,'AsDateTime',__DC__GetTField__AsDateTime,__DC__SetTField__AsDateTime);
RegisterProperty(TField,'AsSQLTimeStamp',__DC__GetTField__AsSQLTimeStamp,__DC__SetTField__AsSQLTimeStamp);
RegisterProperty(TField,'AsSQLTimeStampOffset',__DC__GetTField__AsSQLTimeStampOffset,__DC__SetTField__AsSQLTimeStampOffset);
RegisterProperty(TField,'AsSingle',__DC__GetTField__AsSingle,__DC__SetTField__AsSingle);
RegisterProperty(TField,'AsFloat',__DC__GetTField__AsFloat,__DC__SetTField__AsFloat);
RegisterProperty(TField,'AsExtended',__DC__GetTField__AsExtended,__DC__SetTField__AsExtended);
RegisterProperty(TField,'AsInteger',__DC__GetTField__AsInteger,__DC__SetTField__AsInteger);
RegisterProperty(TField,'AsLongWord',__DC__GetTField__AsLongWord,__DC__SetTField__AsLongWord);
RegisterProperty(TField,'AsString',__DC__GetTField__AsString,__DC__SetTField__AsString);
RegisterProperty(TField,'AsWideString',__DC__GetTField__AsWideString,__DC__SetTField__AsWideString);
RegisterProperty(TField,'AsAnsiString',__DC__GetTField__AsAnsiString,__DC__SetTField__AsAnsiString);
RegisterProperty(TField,'AsVariant',__DC__GetTField__AsVariant,__DC__SetTField__AsVariant);
RegisterProperty(TField,'AsGuid',__DC__GetTField__AsGuid,__DC__SetTField__AsGuid);
RegisterProperty(TField,'AttributeSet',__DC__GetTField__AttributeSet,__DC__SetTField__AttributeSet);
RegisterProperty(TField,'Calculated',__DC__GetTField__Calculated,__DC__SetTField__Calculated);
RegisterProperty(TField,'CanModify',__DC__GetTField__CanModify,nil);
RegisterProperty(TField,'LifeCycle',__DC__GetTField__LifeCycle,__DC__SetTField__LifeCycle);
RegisterProperty(TField,'CurValue',__DC__GetTField__CurValue,nil);
RegisterProperty(TField,'DataSet',__DC__GetTField__DataSet,__DC__SetTField__DataSet);
RegisterProperty(TField,'DataSize',__DC__GetTField__DataSize,nil);
RegisterProperty(TField,'DataType',__DC__GetTField__DataType,nil);
RegisterProperty(TField,'DisplayName',__DC__GetTField__DisplayName,nil);
RegisterProperty(TField,'DisplayText',__DC__GetTField__DisplayText,nil);
RegisterProperty(TField,'EditMask',__DC__GetTField__EditMask,__DC__SetTField__EditMask);
RegisterProperty(TField,'EditMaskPtr',__DC__GetTField__EditMaskPtr,nil);
RegisterProperty(TField,'FieldNo',__DC__GetTField__FieldNo,nil);
RegisterProperty(TField,'FullName',__DC__GetTField__FullName,nil);
RegisterProperty(TField,'IsIndexField',__DC__GetTField__IsIndexField,nil);
RegisterProperty(TField,'IsNull',__DC__GetTField__IsNull,nil);
RegisterProperty(TField,'Lookup',__DC__GetTField__Lookup,__DC__SetTField__Lookup);
RegisterProperty(TField,'LookupList',__DC__GetTField__LookupList,nil);
RegisterProperty(TField,'NewValue',__DC__GetTField__NewValue,__DC__SetTField__NewValue);
RegisterProperty(TField,'Offset',__DC__GetTField__Offset,nil);
RegisterProperty(TField,'OldValue',__DC__GetTField__OldValue,nil);
RegisterProperty(TField,'ParentField',__DC__GetTField__ParentField,__DC__SetTField__ParentField);
RegisterProperty(TField,'Size',__DC__GetTField__Size,__DC__SetTField__Size);
RegisterProperty(TField,'Text',__DC__GetTField__Text,__DC__SetTField__Text);
RegisterProperty(TField,'Validating',__DC__GetTField__Validating,nil);
RegisterProperty(TField,'ValidChars',__DC__GetTField__ValidChars,__DC__SetTField__ValidChars);
RegisterProperty(TField,'Value',__DC__GetTField__Value,__DC__SetTField__Value);
RegisterProperty(TFieldDef,'FieldNo',__DC__GetTFieldDef__FieldNo,__DC__SetTFieldDef__FieldNo);
RegisterProperty(TFieldDef,'InternalCalcField',__DC__GetTFieldDef__InternalCalcField,__DC__SetTFieldDef__InternalCalcField);
RegisterProperty(TFieldDef,'ParentDef',__DC__GetTFieldDef__ParentDef,nil);
RegisterProperty(TFieldDef,'DataSet',__DC__GetTFieldDef__DataSet,nil);
RegisterProperty(TFieldDef,'Required',__DC__GetTFieldDef__Required,__DC__SetTFieldDef__Required);
RegisterIndexedProperty(TFieldDefList,'FieldDefs',1,True,__DC__GetTFieldDefList__FieldDefs,nil);
RegisterProperty(TFieldDefs,'HiddenFields',__DC__GetTFieldDefs__HiddenFields,__DC__SetTFieldDefs__HiddenFields);
RegisterIndexedProperty(TFieldDefs,'Items',1,True,__DC__GetTFieldDefs__Items,__DC__SetTFieldDefs__Items);
RegisterProperty(TFieldDefs,'ParentDef',__DC__GetTFieldDefs__ParentDef,nil);
RegisterIndexedProperty(TFieldList,'Fields',1,True,__DC__GetTFieldList__Fields,nil);
RegisterProperty(TFields,'Count',__DC__GetTFields__Count,nil);
RegisterProperty(TFields,'DataSet',__DC__GetTFields__DataSet,nil);
RegisterIndexedProperty(TFields,'Fields',1,True,__DC__GetTFields__Fields,__DC__SetTFields__Fields);
RegisterProperty(TFields,'LifeCycles',__DC__GetTFields__LifeCycles,__DC__SetTFields__LifeCycles);
RegisterProperty(TFieldsEnumerator,'Current',__DC__GetTFieldsEnumerator__Current,nil);
RegisterProperty(TFlatList,'DataSet',__DC__GetTFlatList__DataSet,nil);
RegisterProperty(TFloatField,'Value',__DC__GetTFloatField__Value,__DC__SetTFloatField__Value);
RegisterProperty(TFMTBCDField,'Value',__DC__GetTFMTBCDField__Value,__DC__SetTFMTBCDField__Value);
RegisterProperty(TIndexDef,'FieldExpression',__DC__GetTIndexDef__FieldExpression,nil);
RegisterIndexedProperty(TIndexDefs,'Items',1,True,__DC__GetTIndexDefs__Items,__DC__SetTIndexDefs__Items);
RegisterProperty(TIntegerField,'Value',__DC__GetTIntegerField__Value,__DC__SetTIntegerField__Value);
RegisterProperty(TLongWordField,'Value',__DC__GetTLongWordField__Value,__DC__SetTLongWordField__Value);
RegisterProperty(TMasterDataLink,'FieldNames',__DC__GetTMasterDataLink__FieldNames,__DC__SetTMasterDataLink__FieldNames);
RegisterProperty(TMasterDataLink,'OnMasterChange',__DC__GetTMasterDataLink__OnMasterChange,__DC__SetTMasterDataLink__OnMasterChange);
RegisterProperty(TMasterDataLink,'OnMasterDisable',__DC__GetTMasterDataLink__OnMasterDisable,__DC__SetTMasterDataLink__OnMasterDisable);
RegisterProperty(TMemoField,'Value',__DC__GetTMemoField__Value,__DC__SetTMemoField__Value);
RegisterProperty(TObjectField,'FieldCount',__DC__GetTObjectField__FieldCount,nil);
RegisterProperty(TObjectField,'Fields',__DC__GetTObjectField__Fields,nil);
RegisterIndexedProperty(TObjectField,'FieldValues',1,True,__DC__GetTObjectField__FieldValues,__DC__SetTObjectField__FieldValues);
RegisterProperty(TObjectField,'UnNamed',__DC__GetTObjectField__UnNamed,nil);
RegisterProperty(TParam,'AsBCD',__DC__GetTParam__AsBCD,__DC__SetTParam__AsBCD);
RegisterProperty(TParam,'AsFMTBCD',__DC__GetTParam__AsFMTBCD,__DC__SetTParam__AsFMTBCD);
RegisterProperty(TParam,'AsBlob',__DC__GetTParam__AsBlob,__DC__SetTParam__AsBlob);
RegisterProperty(TParam,'AsBoolean',__DC__GetTParam__AsBoolean,__DC__SetTParam__AsBoolean);
RegisterProperty(TParam,'AsCurrency',__DC__GetTParam__AsCurrency,__DC__SetTParam__AsCurrency);
RegisterProperty(TParam,'AsDate',__DC__GetTParam__AsDate,__DC__SetTParam__AsDate);
RegisterProperty(TParam,'AsDateTime',__DC__GetTParam__AsDateTime,__DC__SetTParam__AsDateTime);
RegisterProperty(TParam,'AsSingle',__DC__GetTParam__AsSingle,__DC__SetTParam__AsSingle);
RegisterProperty(TParam,'AsFloat',__DC__GetTParam__AsFloat,__DC__SetTParam__AsFloat);
RegisterProperty(TParam,'AsInteger',__DC__GetTParam__AsInteger,__DC__SetTParam__AsInteger);
RegisterProperty(TParam,'AsSmallInt',__DC__GetTParam__AsSmallInt,__DC__SetTParam__AsSmallInt);
RegisterProperty(TParam,'AsShortInt',__DC__GetTParam__AsShortInt,__DC__SetTParam__AsShortInt);
RegisterProperty(TParam,'AsByte',__DC__GetTParam__AsByte,__DC__SetTParam__AsByte);
RegisterProperty(TParam,'AsLongWord',__DC__GetTParam__AsLongWord,__DC__SetTParam__AsLongWord);
RegisterProperty(TParam,'AsSQLTimeStamp',__DC__GetTParam__AsSQLTimeStamp,__DC__SetTParam__AsSQLTimeStamp);
RegisterProperty(TParam,'AsSQLTimeStampOffset',__DC__GetTParam__AsSQLTimeStampOffset,__DC__SetTParam__AsSQLTimeStampOffset);
RegisterProperty(TParam,'AsMemo',__DC__GetTParam__AsMemo,__DC__SetTParam__AsMemo);
RegisterProperty(TParam,'AsString',__DC__GetTParam__AsString,__DC__SetTParam__AsString);
RegisterProperty(TParam,'AsWideString',__DC__GetTParam__AsWideString,__DC__SetTParam__AsWideString);
RegisterProperty(TParam,'AsAnsiString',__DC__GetTParam__AsAnsiString,__DC__SetTParam__AsAnsiString);
RegisterProperty(TParam,'AsTime',__DC__GetTParam__AsTime,__DC__SetTParam__AsTime);
RegisterProperty(TParam,'AsWord',__DC__GetTParam__AsWord,__DC__SetTParam__AsWord);
RegisterProperty(TParam,'AsDataSet',__DC__GetTParam__AsDataSet,__DC__SetTParam__AsDataSet);
RegisterProperty(TParam,'AsObject',__DC__GetTParam__AsObject,__DC__SetTParam__AsObject);
RegisterProperty(TParam,'AsParams',__DC__GetTParam__AsParams,__DC__SetTParam__AsParams);
RegisterProperty(TParam,'AsStream',__DC__GetTParam__AsStream,__DC__SetTParam__AsStream);
RegisterProperty(TParam,'AsGuid',__DC__GetTParam__AsGuid,__DC__SetTParam__AsGuid);
RegisterProperty(TParam,'Bound',__DC__GetTParam__Bound,__DC__SetTParam__Bound);
RegisterProperty(TParam,'IsNull',__DC__GetTParam__IsNull,nil);
RegisterProperty(TParam,'NativeStr',__DC__GetTParam__NativeStr,__DC__SetTParam__NativeStr);
RegisterProperty(TParam,'Text',__DC__GetTParam__Text,__DC__SetTParam__Text);
RegisterIndexedProperty(TParams,'Items',1,True,__DC__GetTParams__Items,__DC__SetTParams__Items);
RegisterIndexedProperty(TParams,'ParamValues',1,False,__DC__GetTParams__ParamValues,__DC__SetTParams__ParamValues);
RegisterProperty(TSingleField,'Value',__DC__GetTSingleField__Value,__DC__SetTSingleField__Value);
RegisterProperty(TSQLTimeStampField,'Value',__DC__GetTSQLTimeStampField__Value,__DC__SetTSQLTimeStampField__Value);
RegisterProperty(TSQLTimeStampOffsetField,'Value',__DC__GetTSQLTimeStampOffsetField__Value,__DC__SetTSQLTimeStampOffsetField__Value);
RegisterProperty(TStringField,'Value',__DC__GetTStringField__Value,__DC__SetTStringField__Value);
RegisterProperty(TWideMemoField,'Value',__DC__GetTWideMemoField__Value,__DC__SetTWideMemoField__Value);
RegisterProperty(TWideStringField,'Value',__DC__GetTWideStringField__Value,__DC__SetTWideStringField__Value);
end;

const __ConstNames0 : array[0..189] of string = (
'ftUnknown'
,'ftString'
,'ftSmallint'
,'ftInteger'
,'ftWord'
,'ftBoolean'
,'ftFloat'
,'ftCurrency'
,'ftBCD'
,'ftDate'
,'ftTime'
,'ftDateTime'
,'ftBytes'
,'ftVarBytes'
,'ftAutoInc'
,'ftBlob'
,'ftMemo'
,'ftGraphic'
,'ftFmtMemo'
,'ftParadoxOle'
,'ftDBaseOle'
,'ftTypedBinary'
,'ftCursor'
,'ftFixedChar'
,'ftWideString'
,'ftLargeint'
,'ftADT'
,'ftArray'
,'ftReference'
,'ftDataSet'
,'ftOraBlob'
,'ftOraClob'
,'ftVariant'
,'ftInterface'
,'ftIDispatch'
,'ftGuid'
,'ftTimeStamp'
,'ftFMTBcd'
,'ftFixedWideChar'
,'ftWideMemo'
,'ftOraTimeStamp'
,'ftOraInterval'
,'ftLongWord'
,'ftShortint'
,'ftByte'
,'ftExtended'
,'ftConnection'
,'ftParams'
,'ftStream'
,'ftTimeStampOffset'
,'ftObject'
,'ftSingle'
,'dsInactive'
,'dsBrowse'
,'dsEdit'
,'dsInsert'
,'dsSetKey'
,'dsCalcFields'
,'dsFilter'
,'dsNewValue'
,'dsOldValue'
,'dsCurValue'
,'dsBlockRead'
,'dsInternalCalc'
,'dsOpening'
,'deFieldChange'
,'deRecordChange'
,'deDataSetChange'
,'deDataSetScroll'
,'deLayoutChange'
,'deUpdateRecord'
,'deUpdateState'
,'deCheckBrowseMode'
,'dePropertyChange'
,'deFieldListChange'
,'deFocusControl'
,'deParentScroll'
,'deConnectChange'
,'deReconcileError'
,'deDisabledStateChange'
,'acExclusive'
,'acCombineComputed'
,'acCombineAlways'
,'poLast'
,'poFirst'
,'poFieldNo'
,'lcAutomatic'
,'lcPersistent'
,'usUnmodified'
,'usModified'
,'usInserted'
,'usDeleted'
,'uaFail'
,'uaAbort'
,'uaSkip'
,'uaRetry'
,'uaApplied'
,'rtModified'
,'rtInserted'
,'rtDeleted'
,'rtUnmodified'
,'upWhereAll'
,'upWhereChanged'
,'upWhereKeyOnly'
,'ukModify'
,'ukInsert'
,'ukDelete'
,'faHiddenCol'
,'faReadonly'
,'faRequired'
,'faLink'
,'faUnNamed'
,'faFixed'
,'ixPrimary'
,'ixUnique'
,'ixDescending'
,'ixCaseInsensitive'
,'ixExpression'
,'ixNonMaintained'
,'fkData'
,'fkCalculated'
,'fkLookup'
,'fkInternalCalc'
,'fkAggregate'
,'pfInUpdate'
,'pfInWhere'
,'pfInKey'
,'pfHidden'
,'arNone'
,'arAutoInc'
,'arDefault'
,'dvClass'
,'dvFull'
,'dvClip'
,'dvFit'
,'ptUnknown'
,'ptInput'
,'ptOutput'
,'ptInputOutput'
,'ptResult'
,'ctUnknown'
,'ctQuery'
,'ctTable'
,'ctStoredProc'
,'ctServerMethod'
,'ctSelect'
,'ctInsert'
,'ctUpdate'
,'ctDelete'
,'ctDDL'
,'bfCurrent'
,'bfBOF'
,'bfEOF'
,'bfInserted'
,'gmCurrent'
,'gmNext'
,'gmPrior'
,'grOK'
,'grBOF'
,'grEOF'
,'grError'
,'rmExact'
,'rmCenter'
,'daFail'
,'daAbort'
,'daRetry'
,'bmRead'
,'bmWrite'
,'bmReadWrite'
,'loCaseInsensitive'
,'loPartialKey'
,'foCaseInsensitive'
,'foNoPartialCompare'
,'gbFirst'
,'gbMiddle'
,'gbLast'
,'ftNonTextTypes'
,'ftFixedSizeTypes'
,'ftCalcFieldTypes'
,'dsEditModes'
,'dsWriteModes'
,'sApplyUpdatesDataSetCommand'
,'sCancelUpdatesDataSetCommand'
,'ObjectFieldTypes'
,'dsMaxStringSize'
,'dsGuidStringLength'
,'dcrDefault'
,'dcrHourGlass'
,'dcrSQLWait'
,'dcrOther'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,ftUnknown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,ftString));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,ftSmallint));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,ftInteger));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,ftWord));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,ftBoolean));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,ftFloat));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,ftCurrency));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,ftBCD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,ftDate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,ftTime));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,ftDateTime));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,ftBytes));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,ftVarBytes));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,ftAutoInc));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,ftBlob));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,ftMemo));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,ftGraphic));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,ftFmtMemo));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,ftParadoxOle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,ftDBaseOle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,ftTypedBinary));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,ftCursor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,ftFixedChar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,ftWideString));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,ftLargeint));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,ftADT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,ftArray));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,ftReference));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,ftDataSet));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,ftOraBlob));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,ftOraClob));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,ftVariant));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,ftInterface));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,ftIDispatch));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,ftGuid));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,ftTimeStamp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,ftFMTBcd));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,ftFixedWideChar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,ftWideMemo));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,ftOraTimeStamp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,ftOraInterval));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,ftLongWord));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,ftShortint));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,ftByte));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,ftExtended));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,ftConnection));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,ftParams));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,ftStream));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,ftTimeStampOffset));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,ftObject));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,ftSingle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,dsInactive));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,dsBrowse));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,dsEdit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,dsInsert));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,dsSetKey));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,dsCalcFields));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,dsFilter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,dsNewValue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,dsOldValue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,dsCurValue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,dsBlockRead));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,dsInternalCalc));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,dsOpening));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[65] ,deFieldChange));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[66] ,deRecordChange));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[67] ,deDataSetChange));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[68] ,deDataSetScroll));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[69] ,deLayoutChange));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[70] ,deUpdateRecord));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[71] ,deUpdateState));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[72] ,deCheckBrowseMode));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[73] ,dePropertyChange));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[74] ,deFieldListChange));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[75] ,deFocusControl));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[76] ,deParentScroll));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[77] ,deConnectChange));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[78] ,deReconcileError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[79] ,deDisabledStateChange));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[80] ,acExclusive));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[81] ,acCombineComputed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[82] ,acCombineAlways));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[83] ,poLast));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[84] ,poFirst));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[85] ,poFieldNo));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[86] ,lcAutomatic));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[87] ,lcPersistent));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[88] ,usUnmodified));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[89] ,usModified));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[90] ,usInserted));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[91] ,usDeleted));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[92] ,uaFail));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[93] ,uaAbort));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[94] ,uaSkip));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[95] ,uaRetry));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[96] ,uaApplied));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[97] ,rtModified));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[98] ,rtInserted));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[99] ,rtDeleted));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[100] ,rtUnmodified));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[101] ,upWhereAll));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[102] ,upWhereChanged));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[103] ,upWhereKeyOnly));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[104] ,ukModify));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[105] ,ukInsert));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[106] ,ukDelete));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[107] ,faHiddenCol));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[108] ,faReadonly));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[109] ,faRequired));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[110] ,faLink));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[111] ,faUnNamed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[112] ,faFixed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[113] ,ixPrimary));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[114] ,ixUnique));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[115] ,ixDescending));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[116] ,ixCaseInsensitive));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[117] ,ixExpression));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[118] ,ixNonMaintained));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[119] ,fkData));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[120] ,fkCalculated));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[121] ,fkLookup));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[122] ,fkInternalCalc));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[123] ,fkAggregate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[124] ,pfInUpdate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[125] ,pfInWhere));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[126] ,pfInKey));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[127] ,pfHidden));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[128] ,arNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[129] ,arAutoInc));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[130] ,arDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[131] ,dvClass));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[132] ,dvFull));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[133] ,dvClip));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[134] ,dvFit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[135] ,ptUnknown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[136] ,ptInput));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[137] ,ptOutput));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[138] ,ptInputOutput));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[139] ,ptResult));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[140] ,ctUnknown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[141] ,ctQuery));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[142] ,ctTable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[143] ,ctStoredProc));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[144] ,ctServerMethod));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[145] ,ctSelect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[146] ,ctInsert));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[147] ,ctUpdate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[148] ,ctDelete));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[149] ,ctDDL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[150] ,bfCurrent));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[151] ,bfBOF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[152] ,bfEOF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[153] ,bfInserted));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[154] ,gmCurrent));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[155] ,gmNext));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[156] ,gmPrior));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[157] ,grOK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[158] ,grBOF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[159] ,grEOF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[160] ,grError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[161] ,rmExact));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[162] ,rmCenter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[163] ,daFail));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[164] ,daAbort));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[165] ,daRetry));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[166] ,bmRead));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[167] ,bmWrite));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[168] ,bmReadWrite));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[169] ,loCaseInsensitive));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[170] ,loPartialKey));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[171] ,foCaseInsensitive));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[172] ,foNoPartialCompare));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[173] ,gbFirst));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[174] ,gbMiddle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[175] ,gbLast));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[176] ,VarFromSet(ftNonTextTypes, sizeof(ftNonTextTypes))));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[177] ,VarFromSet(ftFixedSizeTypes, sizeof(ftFixedSizeTypes))));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[178] ,VarFromSet(ftCalcFieldTypes, sizeof(ftCalcFieldTypes))));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[179] ,VarFromSet(dsEditModes, sizeof(dsEditModes))));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[180] ,VarFromSet(dsWriteModes, sizeof(dsWriteModes))));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[181] ,sApplyUpdatesDataSetCommand));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[182] ,sCancelUpdatesDataSetCommand));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[183] ,VarFromSet(ObjectFieldTypes, sizeof(ObjectFieldTypes))));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[184] ,dsMaxStringSize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[185] ,dsGuidStringLength));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[186] ,dcrDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[187] ,dcrHourGlass));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[188] ,dcrSQLWait));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[189] ,dcrOther));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..74] of TClass = (
EDatabaseError,
EUpdateError,
TADTField,
TAggHandle,
TAggregateField,
TArrayField,
TAutoIncField,
TBCDField,
TBinaryField,
//TBlobByteData,
//TBlobData,
TBlobField,
//TBookmark,
TBooleanField,
//TBufList,
TByteField,
TBytesField,
TCheckConstraint,
TCheckConstraints,
TCurrencyField,
TCustomConnection,
TDataLink,
TDataSet,
TDataSetDesigner,
TDataSetField,
TDataSource,
TDateField,
TDateTimeField,
TDBBitConverter,
TDefaultLookupList,
TDefCollection,
TDetailDataLink,
TExtendedField,
TField,
TFieldDef,
TFieldDefList,
TFieldDefs,
TFieldList,
TFieldOptions,
TFields,
TFieldsEnumerator,
TFlatList,
TFloatField,
TFMTBCDField,
TGraphicField,
TGuidField,
TIDispatchField,
TIndexDef,
TIndexDefs,
TIntegerField,
TInterfaceField,
TLargeintField,
TLongWordField,
TLookupList,
TMasterDataLink,
TMemoField,
TNamedItem,
TNumericField,
TObjectField,
TPacketAttributeList,
TParam,
TParamObject,
TParams,
TParamStreamObject,
TPlatformValueBuffer,
TReferenceField,
TShortintField,
TSingleField,
TSmallintField,
TSQLTimeStampField,
TSQLTimeStampOffsetField,
TStringField,
TTimeField,
TUnsignedAutoIncField,
//TValueBuffer,
TVarBytesField,
TVariantField,
TWideMemoField,
TWideStringField,
TWordField
//Use IProviderSupportNG instead
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..9] of string = (
'TDateTimeRec'
,'TLookupListEntry'
,'TPacketAttribute'
,'ExtractFieldName'
,'DatabaseError'
,'DatabaseErrorFmt'
,'DisposeMem'
,'BuffersEqual'
,'GetFieldProperty'
,'VarTypeToDataType'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TDateTimeRec_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_TLookupListEntry_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_TPacketAttribute_)));
RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T0),[
TypeInfo(string),
TypeInfo(Integer),TypeInfo(string)],Addr(ExtractFieldName),cRegister);

RegisterProc(nil,MethodNames[4],mtScriptProc,TypeInfo(_T2),[
TypeInfo(string),
TypeInfo(TComponent)],Addr(____DatabaseError__Wrapper),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T3),[
TypeInfo(string),
TypeInfoArrayOfConst,
TypeInfo(TComponent)],Addr(____DatabaseErrorFmt__Wrapper),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T4),[
TypeInfoUntyped,
TypeInfo(Integer)],Addr(DisposeMem),cRegister);

RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T5),[
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(Integer),TypeInfo(Boolean)],Addr(BuffersEqual),cRegister);

RegisterProc(nil,MethodNames[8],mtProc,TypeInfo(_T6),[
TypeInfo(TDataSet),
TypeInfo(TComponent),
TypeInfo(string),TypeInfo(TField)],Addr(GetFieldProperty),cRegister);

RegisterProc(nil,MethodNames[9],mtProc,TypeInfo(_T7),[
TypeInfo(Integer),TypeInfo(TFieldType)],Addr(VarTypeToDataType),cRegister);

RegisterProc(EUpdateError,'Create',mtConstructor,TypeInfo(_T8),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Exception)],Addr(EUpdateError.Create),cRegister);

//RegRegisterMethod(TBlobField,'GetBlobSize',TypeInfo(_T9),[TypeInfo(Integer)], pointer(276));
RegRegisterMethod(TBlobField,'GetBlobSize',TypeInfo(_T9),[TypeInfo(Integer)], getVMTProcAddr('TBlobField','GetBlobSize',276));


RegRegisterMethod(TBlobField,'LoadFromFile',TypeInfo(_T10),[
TypeInfo(string)],Addr(TBlobField.LoadFromFile));

RegRegisterMethod(TBlobField,'LoadFromStream',TypeInfo(_T11),[
TypeInfo(TStream)],Addr(TBlobField.LoadFromStream));

RegRegisterMethod(TBlobField,'SaveToFile',TypeInfo(_T12),[
TypeInfo(string)],Addr(TBlobField.SaveToFile));

RegRegisterMethod(TBlobField,'SaveToStream',TypeInfo(_T13),[
TypeInfo(TStream)],Addr(TBlobField.SaveToStream));

RegisterProc(TCheckConstraints,'Create',mtConstructor,TypeInfo(_T15),[
TypeInfo(TPersistent)], pointer(4),cRegister);

RegRegisterMethod(TCheckConstraints,'Add',TypeInfo(_T16),[TypeInfo(TCheckConstraint)],Addr(TCheckConstraints.Add));

//RegRegisterMethod(TCustomConnection,'DoConnect',TypeInfo(_T17),NoParams, pointer(0));
RegRegisterMethod(TCustomConnection,'DoConnect',TypeInfo(_T17),NoParams, getVMTProcAddr('TCustomConnection','DoConnect',0));


//RegRegisterMethod(TCustomConnection,'DoDisconnect',TypeInfo(_T18),NoParams, pointer(4));
RegRegisterMethod(TCustomConnection,'DoDisconnect',TypeInfo(_T18),NoParams, getVMTProcAddr('TCustomConnection','DoDisconnect',4));


//RegRegisterMethod(TCustomConnection,'GetConnected',TypeInfo(_T19),[TypeInfo(Boolean)], pointer(8));
RegRegisterMethod(TCustomConnection,'GetConnected',TypeInfo(_T19),[TypeInfo(Boolean)], getVMTProcAddr('TCustomConnection','GetConnected',8));


//RegRegisterMethod(TCustomConnection,'GetDataSet',TypeInfo(_T20),[TypeInfo(Integer),TypeInfo(TDataSet)], pointer(12));
RegRegisterMethod(TCustomConnection,'GetDataSet',TypeInfo(_T20),[TypeInfo(Integer),TypeInfo(TDataSet)], getVMTProcAddr('TCustomConnection','GetDataSet',12));


//RegRegisterMethod(TCustomConnection,'GetDataSetCount',TypeInfo(_T21),[TypeInfo(Integer)], pointer(16));
RegRegisterMethod(TCustomConnection,'GetDataSetCount',TypeInfo(_T21),[TypeInfo(Integer)], getVMTProcAddr('TCustomConnection','GetDataSetCount',16));


//RegRegisterMethod(TCustomConnection,'SetConnected',TypeInfo(_T23),[TypeInfo(Boolean)], pointer(24));
RegRegisterMethod(TCustomConnection,'SetConnected',TypeInfo(_T23),[TypeInfo(Boolean)], getVMTProcAddr('TCustomConnection','SetConnected',24));


//RegRegisterMethod(TCustomConnection,'UnRegisterClient',TypeInfo(_T24),[TypeInfo(TObject)], pointer(28));
RegRegisterMethod(TCustomConnection,'UnRegisterClient',TypeInfo(_T24),[TypeInfo(TObject)], getVMTProcAddr('TCustomConnection','UnRegisterClient',28));


RegRegisterMethod(TCustomConnection,'Open',TypeInfo(_T25),NoParams,Addr(TCustomConnection.Open));

RegRegisterMethod(TCustomConnection,'Close',TypeInfo(_T26),NoParams,Addr(TCustomConnection.Close));

//RegRegisterMethod(TDataLink,'ActiveChanged',TypeInfo(_T27),NoParams, pointer(0));
RegRegisterMethod(TDataLink,'ActiveChanged',TypeInfo(_T27),NoParams, getVMTProcAddr('TDataLink','ActiveChanged',0));


//RegRegisterMethod(TDataLink,'CheckBrowseMode',TypeInfo(_T28),NoParams, pointer(4));
RegRegisterMethod(TDataLink,'CheckBrowseMode',TypeInfo(_T28),NoParams, getVMTProcAddr('TDataLink','CheckBrowseMode',4));


//RegRegisterMethod(TDataLink,'DataEvent',TypeInfo(_T29),[TypeInfo(TDataEvent),TypeInfo(NativeInt)], pointer(8));
RegRegisterMethod(TDataLink,'DataEvent',TypeInfo(_T29),[TypeInfo(TDataEvent),TypeInfo(NativeInt)], getVMTProcAddr('TDataLink','DataEvent',8));


//RegRegisterMethod(TDataLink,'DataSetChanged',TypeInfo(_T30),NoParams, pointer(12));
RegRegisterMethod(TDataLink,'DataSetChanged',TypeInfo(_T30),NoParams, getVMTProcAddr('TDataLink','DataSetChanged',12));


//RegRegisterMethod(TDataLink,'DataSetScrolled',TypeInfo(_T31),[TypeInfo(Integer)], pointer(16));
RegRegisterMethod(TDataLink,'DataSetScrolled',TypeInfo(_T31),[TypeInfo(Integer)], getVMTProcAddr('TDataLink','DataSetScrolled',16));


//RegRegisterMethod(TDataLink,'EditingChanged',TypeInfo(_T32),NoParams, pointer(20));
RegRegisterMethod(TDataLink,'EditingChanged',TypeInfo(_T32),NoParams, getVMTProcAddr('TDataLink','EditingChanged',20));


//RegRegisterMethod(TDataLink,'FocusControl',TypeInfo(_T33),[TypeInfoPointer], pointer(24));
RegRegisterMethod(TDataLink,'FocusControl',TypeInfo(_T33),[TypeInfoPointer], getVMTProcAddr('TDataLink','FocusControl',24));


//RegRegisterMethod(TDataLink,'GetActiveRecord',TypeInfo(_T34),[TypeInfo(Integer)], pointer(28));
RegRegisterMethod(TDataLink,'GetActiveRecord',TypeInfo(_T34),[TypeInfo(Integer)], getVMTProcAddr('TDataLink','GetActiveRecord',28));


//RegRegisterMethod(TDataLink,'GetBOF',TypeInfo(_T35),[TypeInfo(Boolean)], pointer(32));
RegRegisterMethod(TDataLink,'GetBOF',TypeInfo(_T35),[TypeInfo(Boolean)], getVMTProcAddr('TDataLink','GetBOF',32));


//RegRegisterMethod(TDataLink,'GetBufferCount',TypeInfo(_T36),[TypeInfo(Integer)], pointer(36));
RegRegisterMethod(TDataLink,'GetBufferCount',TypeInfo(_T36),[TypeInfo(Integer)], getVMTProcAddr('TDataLink','GetBufferCount',36));


//RegRegisterMethod(TDataLink,'GetEOF',TypeInfo(_T37),[TypeInfo(Boolean)], pointer(40));
RegRegisterMethod(TDataLink,'GetEOF',TypeInfo(_T37),[TypeInfo(Boolean)], getVMTProcAddr('TDataLink','GetEOF',40));


//RegRegisterMethod(TDataLink,'GetRecordCount',TypeInfo(_T38),[TypeInfo(Integer)], pointer(44));
RegRegisterMethod(TDataLink,'GetRecordCount',TypeInfo(_T38),[TypeInfo(Integer)], getVMTProcAddr('TDataLink','GetRecordCount',44));


//RegRegisterMethod(TDataLink,'LayoutChanged',TypeInfo(_T39),NoParams, pointer(48));
RegRegisterMethod(TDataLink,'LayoutChanged',TypeInfo(_T39),NoParams, getVMTProcAddr('TDataLink','LayoutChanged',48));


//RegRegisterMethod(TDataLink,'MoveBy',TypeInfo(_T40),[TypeInfo(Integer),TypeInfo(Integer)], pointer(52));
RegRegisterMethod(TDataLink,'MoveBy',TypeInfo(_T40),[TypeInfo(Integer),TypeInfo(Integer)], getVMTProcAddr('TDataLink','MoveBy',52));


//RegRegisterMethod(TDataLink,'RecordChanged',TypeInfo(_T41),[TypeInfo(TField)], pointer(56));
RegRegisterMethod(TDataLink,'RecordChanged',TypeInfo(_T41),[TypeInfo(TField)], getVMTProcAddr('TDataLink','RecordChanged',56));


//RegRegisterMethod(TDataLink,'SetActiveRecord',TypeInfo(_T42),[TypeInfo(Integer)], pointer(60));
RegRegisterMethod(TDataLink,'SetActiveRecord',TypeInfo(_T42),[TypeInfo(Integer)], getVMTProcAddr('TDataLink','SetActiveRecord',60));


//RegRegisterMethod(TDataLink,'SetBufferCount',TypeInfo(_T43),[TypeInfo(Integer)], pointer(64));
RegRegisterMethod(TDataLink,'SetBufferCount',TypeInfo(_T43),[TypeInfo(Integer)], getVMTProcAddr('TDataLink','SetBufferCount',64));


//RegRegisterMethod(TDataLink,'UpdateData',TypeInfo(_T44),NoParams, pointer(68));
RegRegisterMethod(TDataLink,'UpdateData',TypeInfo(_T44),NoParams, getVMTProcAddr('TDataLink','UpdateData',68));


RegisterProc(TDataLink,'Create',mtConstructor,TypeInfo(_T45),NoParams,Addr(TDataLink.Create),cRegister);

RegRegisterMethod(TDataLink,'Edit',TypeInfo(_T46),[TypeInfo(Boolean)],Addr(TDataLink.Edit));

RegRegisterMethod(TDataLink,'ExecuteAction',TypeInfo(_T47),[
TypeInfo(TBasicAction),TypeInfo(Boolean)], pointer(MinVMTOffset - 0));

RegRegisterMethod(TDataLink,'UpdateAction',TypeInfo(_T48),[
TypeInfo(TBasicAction),TypeInfo(Boolean)], pointer(MinVMTOffset - 1));

RegRegisterMethod(TDataLink,'UpdateRecord',TypeInfo(_T49),NoParams,Addr(TDataLink.UpdateRecord));

//RegRegisterMethod(TDataSet,'PSExecuteStatement',TypeInfo(_T50),[TypeInfo(string),TypeInfo(TParams),TypeInfo(Integer)], pointer(0));
RegRegisterMethod(TDataSet,'PSExecuteStatement',TypeInfo(_T50),[TypeInfo(string),TypeInfo(TParams),TypeInfo(Integer)], getVMTProcAddr('TDataSet','PSExecuteStatement',0));


//RegRegisterMethod(TDataSet,'PSGetCommandText',TypeInfo(_T51),[TypeInfo(string)], pointer(12));
RegRegisterMethod(TDataSet,'PSGetCommandText',TypeInfo(_T51),[TypeInfo(string)], getVMTProcAddr('TDataSet','PSGetCommandText',12));


//RegRegisterMethod(TDataSet,'PSGetKeyFields',TypeInfo(_T52),[TypeInfo(string)], pointer(16));
RegRegisterMethod(TDataSet,'PSGetKeyFields',TypeInfo(_T52),[TypeInfo(string)], getVMTProcAddr('TDataSet','PSGetKeyFields',16));


//RegRegisterMethod(TDataSet,'PSGetQuoteChar',TypeInfo(_T53),[TypeInfo(string)], pointer(20));
RegRegisterMethod(TDataSet,'PSGetQuoteChar',TypeInfo(_T53),[TypeInfo(string)], getVMTProcAddr('TDataSet','PSGetQuoteChar',20));


//RegRegisterMethod(TDataSet,'PSGetTableName',TypeInfo(_T54),[TypeInfo(string)], pointer(24));
RegRegisterMethod(TDataSet,'PSGetTableName',TypeInfo(_T54),[TypeInfo(string)], getVMTProcAddr('TDataSet','PSGetTableName',24));


//RegRegisterMethod(TDataSet,'PSSetCommandText',TypeInfo(_T55),[TypeInfo(string)], pointer(28));
RegRegisterMethod(TDataSet,'PSSetCommandText',TypeInfo(_T55),[TypeInfo(string)], getVMTProcAddr('TDataSet','PSSetCommandText',28));


//RegRegisterMethod(TDataSet,'PSEndTransaction',TypeInfo(_T56),[TypeInfo(Boolean)], pointer(32));
RegRegisterMethod(TDataSet,'PSEndTransaction',TypeInfo(_T56),[TypeInfo(Boolean)], getVMTProcAddr('TDataSet','PSEndTransaction',32));


//RegRegisterMethod(TDataSet,'PSExecute',TypeInfo(_T57),NoParams, pointer(36));
RegRegisterMethod(TDataSet,'PSExecute',TypeInfo(_T57),NoParams, getVMTProcAddr('TDataSet','PSExecute',36));


//RegRegisterMethod(TDataSet,'PSGetAttributes',TypeInfo(_T58),[TypeInfo(TPacketAttributeList)], pointer(40));
RegRegisterMethod(TDataSet,'PSGetAttributes',TypeInfo(_T58),[TypeInfo(TPacketAttributeList)], getVMTProcAddr('TDataSet','PSGetAttributes',40));


//RegRegisterMethod(TDataSet,'PSGetCommandType',TypeInfo(_T59),[TypeInfo(TPSCommandType)], pointer(44));
RegRegisterMethod(TDataSet,'PSGetCommandType',TypeInfo(_T59),[TypeInfo(TPSCommandType)], getVMTProcAddr('TDataSet','PSGetCommandType',44));


//RegRegisterMethod(TDataSet,'PSGetDefaultOrder',TypeInfo(_T60),[TypeInfo(TIndexDef)], pointer(48));
RegRegisterMethod(TDataSet,'PSGetDefaultOrder',TypeInfo(_T60),[TypeInfo(TIndexDef)], getVMTProcAddr('TDataSet','PSGetDefaultOrder',48));


//RegRegisterMethod(TDataSet,'PSGetParams',TypeInfo(_T61),[TypeInfo(TParams)], pointer(52));
RegRegisterMethod(TDataSet,'PSGetParams',TypeInfo(_T61),[TypeInfo(TParams)], getVMTProcAddr('TDataSet','PSGetParams',52));


//RegRegisterMethod(TDataSet,'PSGetIndexDefs',TypeInfo(_T62),[TypeInfo(TIndexOptions),TypeInfo(TIndexDefs)], pointer(56));
RegRegisterMethod(TDataSet,'PSGetIndexDefs',TypeInfo(_T62),[TypeInfo(TIndexOptions),TypeInfo(TIndexDefs)], getVMTProcAddr('TDataSet','PSGetIndexDefs',56));


//RegRegisterMethod(TDataSet,'PSGetUpdateException',TypeInfo(_T63),[TypeInfo(Exception),TypeInfo(EUpdateError),TypeInfo(EUpdateError)], pointer(60));
RegRegisterMethod(TDataSet,'PSGetUpdateException',TypeInfo(_T63),[TypeInfo(Exception),TypeInfo(EUpdateError),TypeInfo(EUpdateError)], getVMTProcAddr('TDataSet','PSGetUpdateException',60));


//RegRegisterMethod(TDataSet,'PSInTransaction',TypeInfo(_T64),[TypeInfo(Boolean)], pointer(64));
RegRegisterMethod(TDataSet,'PSInTransaction',TypeInfo(_T64),[TypeInfo(Boolean)], getVMTProcAddr('TDataSet','PSInTransaction',64));


//RegRegisterMethod(TDataSet,'PSIsSQLBased',TypeInfo(_T65),[TypeInfo(Boolean)], pointer(68));
RegRegisterMethod(TDataSet,'PSIsSQLBased',TypeInfo(_T65),[TypeInfo(Boolean)], getVMTProcAddr('TDataSet','PSIsSQLBased',68));


//RegRegisterMethod(TDataSet,'PSIsSQLSupported',TypeInfo(_T66),[TypeInfo(Boolean)], pointer(72));
RegRegisterMethod(TDataSet,'PSIsSQLSupported',TypeInfo(_T66),[TypeInfo(Boolean)], getVMTProcAddr('TDataSet','PSIsSQLSupported',72));


//RegRegisterMethod(TDataSet,'PSReset',TypeInfo(_T67),NoParams, pointer(76));
RegRegisterMethod(TDataSet,'PSReset',TypeInfo(_T67),NoParams, getVMTProcAddr('TDataSet','PSReset',76));


//RegRegisterMethod(TDataSet,'PSSetParams',TypeInfo(_T68),[TypeInfo(TParams)], pointer(80));
RegRegisterMethod(TDataSet,'PSSetParams',TypeInfo(_T68),[TypeInfo(TParams)], getVMTProcAddr('TDataSet','PSSetParams',80));


//RegRegisterMethod(TDataSet,'PSStartTransaction',TypeInfo(_T69),NoParams, pointer(84));
RegRegisterMethod(TDataSet,'PSStartTransaction',TypeInfo(_T69),NoParams, getVMTProcAddr('TDataSet','PSStartTransaction',84));


//RegRegisterMethod(TDataSet,'PSUpdateRecord',TypeInfo(_T70),[TypeInfo(TUpdateKind),TypeInfo(TDataSet),TypeInfo(Boolean)], pointer(88));
RegRegisterMethod(TDataSet,'PSUpdateRecord',TypeInfo(_T70),[TypeInfo(TUpdateKind),TypeInfo(TDataSet),TypeInfo(Boolean)], getVMTProcAddr('TDataSet','PSUpdateRecord',88));


//RegRegisterMethod(TDataSet,'ResetAggField',TypeInfo(_T72),[TypeInfo(TField)], pointer(96));
RegRegisterMethod(TDataSet,'ResetAggField',TypeInfo(_T72),[TypeInfo(TField)], getVMTProcAddr('TDataSet','ResetAggField',96));


//RegRegisterMethod(TDataSet,'BindFields',TypeInfo(_T73),[TypeInfo(Boolean)], pointer(100));
RegRegisterMethod(TDataSet,'BindFields',TypeInfo(_T73),[TypeInfo(Boolean)], getVMTProcAddr('TDataSet','BindFields',100));


//RegRegisterMethod(TDataSet,'CalculateFields',TypeInfo(_T74),[TypeInfo(NativeInt)], pointer(104));
RegRegisterMethod(TDataSet,'CalculateFields',TypeInfo(_T74),[TypeInfo(NativeInt)], getVMTProcAddr('TDataSet','CalculateFields',104));


//RegRegisterMethod(TDataSet,'CheckActive',TypeInfo(_T75),NoParams, pointer(112));
RegRegisterMethod(TDataSet,'CheckActive',TypeInfo(_T75),NoParams, getVMTProcAddr('TDataSet','CheckActive',112));


//RegRegisterMethod(TDataSet,'CheckFieldCompatibility',TypeInfo(_T76),[TypeInfo(TField),TypeInfo(TFieldDef)], pointer(116));
RegRegisterMethod(TDataSet,'CheckFieldCompatibility',TypeInfo(_T76),[TypeInfo(TField),TypeInfo(TFieldDef)], getVMTProcAddr('TDataSet','CheckFieldCompatibility',116));


//RegRegisterMethod(TDataSet,'CheckInactive',TypeInfo(_T77),NoParams, pointer(120));
RegRegisterMethod(TDataSet,'CheckInactive',TypeInfo(_T77),NoParams, getVMTProcAddr('TDataSet','CheckInactive',120));


//RegRegisterMethod(TDataSet,'ClearBuffers',TypeInfo(_T78),NoParams, pointer(124));
RegRegisterMethod(TDataSet,'ClearBuffers',TypeInfo(_T78),NoParams, getVMTProcAddr('TDataSet','ClearBuffers',124));


//RegRegisterMethod(TDataSet,'ClearCalcFields',TypeInfo(_T79),[TypeInfo(NativeInt)], pointer(128));
RegRegisterMethod(TDataSet,'ClearCalcFields',TypeInfo(_T79),[TypeInfo(NativeInt)], getVMTProcAddr('TDataSet','ClearCalcFields',128));


//RegRegisterMethod(TDataSet,'CloseBlob',TypeInfo(_T80),[TypeInfo(TField)], pointer(136));
RegRegisterMethod(TDataSet,'CloseBlob',TypeInfo(_T80),[TypeInfo(TField)], getVMTProcAddr('TDataSet','CloseBlob',136));


//RegRegisterMethod(TDataSet,'CloseCursor',TypeInfo(_T81),NoParams, pointer(140));
RegRegisterMethod(TDataSet,'CloseCursor',TypeInfo(_T81),NoParams, getVMTProcAddr('TDataSet','CloseCursor',140));


//RegRegisterMethod(TDataSet,'CreateFields',TypeInfo(_T82),NoParams, pointer(144));
RegRegisterMethod(TDataSet,'CreateFields',TypeInfo(_T82),NoParams, getVMTProcAddr('TDataSet','CreateFields',144));


//RegRegisterMethod(TDataSet,'CreateNestedDataSet',TypeInfo(_T83),[TypeInfo(TDataSetField),TypeInfo(TDataSet)], pointer(148));
RegRegisterMethod(TDataSet,'CreateNestedDataSet',TypeInfo(_T83),[TypeInfo(TDataSetField),TypeInfo(TDataSet)], getVMTProcAddr('TDataSet','CreateNestedDataSet',148));


//RegRegisterMethod(TDataSet,'DataConvert',TypeInfo(_T84),[TypeInfo(TField),TypeInfo(TValueBuffer),TypeInfo(TValueBuffer),TypeInfo(Boolean)], pointer(152));
RegRegisterMethod(TDataSet,'DataConvert',TypeInfo(_T84),[TypeInfo(TField),TypeInfo(TValueBuffer),TypeInfo(TValueBuffer),TypeInfo(Boolean)], getVMTProcAddr('TDataSet','DataConvert',152));


//RegRegisterMethod(TDataSet,'DataEvent',TypeInfo(_T85),[TypeInfo(TDataEvent),TypeInfo(NativeInt)], pointer(160));
RegRegisterMethod(TDataSet,'DataEvent',TypeInfo(_T85),[TypeInfo(TDataEvent),TypeInfo(NativeInt)], getVMTProcAddr('TDataSet','DataEvent',160));


//RegRegisterMethod(TDataSet,'DefChanged',TypeInfo(_T86),[TypeInfo(TObject)], pointer(164));
RegRegisterMethod(TDataSet,'DefChanged',TypeInfo(_T86),[TypeInfo(TObject)], getVMTProcAddr('TDataSet','DefChanged',164));


//RegRegisterMethod(TDataSet,'DestroyFields',TypeInfo(_T87),NoParams, pointer(168));
RegRegisterMethod(TDataSet,'DestroyFields',TypeInfo(_T87),NoParams, getVMTProcAddr('TDataSet','DestroyFields',168));


//RegRegisterMethod(TDataSet,'DoAfterCancel',TypeInfo(_T88),NoParams, pointer(172));
RegRegisterMethod(TDataSet,'DoAfterCancel',TypeInfo(_T88),NoParams, getVMTProcAddr('TDataSet','DoAfterCancel',172));


//RegRegisterMethod(TDataSet,'DoAfterClose',TypeInfo(_T89),NoParams, pointer(176));
RegRegisterMethod(TDataSet,'DoAfterClose',TypeInfo(_T89),NoParams, getVMTProcAddr('TDataSet','DoAfterClose',176));


//RegRegisterMethod(TDataSet,'DoAfterDelete',TypeInfo(_T90),NoParams, pointer(180));
RegRegisterMethod(TDataSet,'DoAfterDelete',TypeInfo(_T90),NoParams, getVMTProcAddr('TDataSet','DoAfterDelete',180));


//RegRegisterMethod(TDataSet,'DoAfterEdit',TypeInfo(_T91),NoParams, pointer(184));
RegRegisterMethod(TDataSet,'DoAfterEdit',TypeInfo(_T91),NoParams, getVMTProcAddr('TDataSet','DoAfterEdit',184));


//RegRegisterMethod(TDataSet,'DoAfterInsert',TypeInfo(_T92),NoParams, pointer(188));
RegRegisterMethod(TDataSet,'DoAfterInsert',TypeInfo(_T92),NoParams, getVMTProcAddr('TDataSet','DoAfterInsert',188));


//RegRegisterMethod(TDataSet,'DoAfterOpen',TypeInfo(_T93),NoParams, pointer(192));
RegRegisterMethod(TDataSet,'DoAfterOpen',TypeInfo(_T93),NoParams, getVMTProcAddr('TDataSet','DoAfterOpen',192));


//RegRegisterMethod(TDataSet,'DoAfterPost',TypeInfo(_T94),NoParams, pointer(196));
RegRegisterMethod(TDataSet,'DoAfterPost',TypeInfo(_T94),NoParams, getVMTProcAddr('TDataSet','DoAfterPost',196));


//RegRegisterMethod(TDataSet,'DoAfterRefresh',TypeInfo(_T95),NoParams, pointer(200));
RegRegisterMethod(TDataSet,'DoAfterRefresh',TypeInfo(_T95),NoParams, getVMTProcAddr('TDataSet','DoAfterRefresh',200));


//RegRegisterMethod(TDataSet,'DoAfterScroll',TypeInfo(_T96),NoParams, pointer(204));
RegRegisterMethod(TDataSet,'DoAfterScroll',TypeInfo(_T96),NoParams, getVMTProcAddr('TDataSet','DoAfterScroll',204));


//RegRegisterMethod(TDataSet,'DoBeforeCancel',TypeInfo(_T97),NoParams, pointer(208));
RegRegisterMethod(TDataSet,'DoBeforeCancel',TypeInfo(_T97),NoParams, getVMTProcAddr('TDataSet','DoBeforeCancel',208));


//RegRegisterMethod(TDataSet,'DoBeforeClose',TypeInfo(_T98),NoParams, pointer(212));
RegRegisterMethod(TDataSet,'DoBeforeClose',TypeInfo(_T98),NoParams, getVMTProcAddr('TDataSet','DoBeforeClose',212));


//RegRegisterMethod(TDataSet,'DoBeforeDelete',TypeInfo(_T99),NoParams, pointer(216));
RegRegisterMethod(TDataSet,'DoBeforeDelete',TypeInfo(_T99),NoParams, getVMTProcAddr('TDataSet','DoBeforeDelete',216));


//RegRegisterMethod(TDataSet,'DoBeforeEdit',TypeInfo(_T100),NoParams, pointer(220));
RegRegisterMethod(TDataSet,'DoBeforeEdit',TypeInfo(_T100),NoParams, getVMTProcAddr('TDataSet','DoBeforeEdit',220));


//RegRegisterMethod(TDataSet,'DoBeforeInsert',TypeInfo(_T101),NoParams, pointer(224));
RegRegisterMethod(TDataSet,'DoBeforeInsert',TypeInfo(_T101),NoParams, getVMTProcAddr('TDataSet','DoBeforeInsert',224));


//RegRegisterMethod(TDataSet,'DoBeforeOpen',TypeInfo(_T102),NoParams, pointer(228));
RegRegisterMethod(TDataSet,'DoBeforeOpen',TypeInfo(_T102),NoParams, getVMTProcAddr('TDataSet','DoBeforeOpen',228));


//RegRegisterMethod(TDataSet,'DoBeforePost',TypeInfo(_T103),NoParams, pointer(232));
RegRegisterMethod(TDataSet,'DoBeforePost',TypeInfo(_T103),NoParams, getVMTProcAddr('TDataSet','DoBeforePost',232));


//RegRegisterMethod(TDataSet,'DoBeforeRefresh',TypeInfo(_T104),NoParams, pointer(236));
RegRegisterMethod(TDataSet,'DoBeforeRefresh',TypeInfo(_T104),NoParams, getVMTProcAddr('TDataSet','DoBeforeRefresh',236));


//RegRegisterMethod(TDataSet,'DoBeforeScroll',TypeInfo(_T105),NoParams, pointer(240));
RegRegisterMethod(TDataSet,'DoBeforeScroll',TypeInfo(_T105),NoParams, getVMTProcAddr('TDataSet','DoBeforeScroll',240));


//RegRegisterMethod(TDataSet,'DoOnCalcFields',TypeInfo(_T106),NoParams, pointer(244));
RegRegisterMethod(TDataSet,'DoOnCalcFields',TypeInfo(_T106),NoParams, getVMTProcAddr('TDataSet','DoOnCalcFields',244));


//RegRegisterMethod(TDataSet,'DoOnNewRecord',TypeInfo(_T107),NoParams, pointer(248));
RegRegisterMethod(TDataSet,'DoOnNewRecord',TypeInfo(_T107),NoParams, getVMTProcAddr('TDataSet','DoOnNewRecord',248));


//RegRegisterMethod(TDataSet,'FindRecord',TypeInfo(_T108),[TypeInfo(Boolean),TypeInfo(Boolean),TypeInfo(Boolean)], pointer(252));
RegRegisterMethod(TDataSet,'FindRecord',TypeInfo(_T108),[TypeInfo(Boolean),TypeInfo(Boolean),TypeInfo(Boolean)], getVMTProcAddr('TDataSet','FindRecord',252));


//RegRegisterMethod(TDataSet,'FreeFieldBuffers',TypeInfo(_T109),NoParams, pointer(256));
RegRegisterMethod(TDataSet,'FreeFieldBuffers',TypeInfo(_T109),NoParams, getVMTProcAddr('TDataSet','FreeFieldBuffers',256));


//RegRegisterMethod(TDataSet,'GetAggregateValue',TypeInfo(_T110),[TypeInfo(TField),TypeInfo(Variant)], pointer(260));
RegRegisterMethod(TDataSet,'GetAggregateValue',TypeInfo(_T110),[TypeInfo(TField),TypeInfo(Variant)], getVMTProcAddr('TDataSet','GetAggregateValue',260));


//RegRegisterMethod(TDataSet,'GetAggRecordCount',TypeInfo(_T111),[TypeInfo(TGroupPosInd),TypeInfo(Integer)], pointer(264));
RegRegisterMethod(TDataSet,'GetAggRecordCount',TypeInfo(_T111),[TypeInfo(TGroupPosInd),TypeInfo(Integer)], getVMTProcAddr('TDataSet','GetAggRecordCount',264));


//RegRegisterMethod(TDataSet,'ActivateBuffers',TypeInfo(_T112),NoParams, pointer(268));
RegRegisterMethod(TDataSet,'ActivateBuffers',TypeInfo(_T112),NoParams, getVMTProcAddr('TDataSet','ActivateBuffers',268));


//RegRegisterMethod(TDataSet,'GetCalcFields',TypeInfo(_T113),[TypeInfo(TRecBuf)], pointer(272));
RegRegisterMethod(TDataSet,'GetCalcFields',TypeInfo(_T113),[TypeInfo(TRecBuf)], getVMTProcAddr('TDataSet','GetCalcFields',272));


//RegRegisterMethod(TDataSet,'GetBookmarkStr',TypeInfo(_T114),[TypeInfo(TBookmarkStr)], pointer(276));
RegRegisterMethod(TDataSet,'GetBookmarkStr',TypeInfo(_T114),[TypeInfo(TBookmarkStr)], getVMTProcAddr('TDataSet','GetBookmarkStr',276));


//RegRegisterMethod(TDataSet,'GetCalcFieldTypes',TypeInfo(_T115),[TypeInfo(TFieldTypes)], pointer(284));
RegRegisterMethod(TDataSet,'GetCalcFieldTypes',TypeInfo(_T115),[TypeInfo(TFieldTypes)], getVMTProcAddr('TDataSet','GetCalcFieldTypes',284));


//RegRegisterMethod(TDataSet,'GetCanModify',TypeInfo(_T116),[TypeInfo(Boolean)], pointer(288));
RegRegisterMethod(TDataSet,'GetCanModify',TypeInfo(_T116),[TypeInfo(Boolean)], getVMTProcAddr('TDataSet','GetCanModify',288));


//RegRegisterMethod(TDataSet,'GetCanRefresh',TypeInfo(_T117),[TypeInfo(Boolean)], pointer(292));
RegRegisterMethod(TDataSet,'GetCanRefresh',TypeInfo(_T117),[TypeInfo(Boolean)], getVMTProcAddr('TDataSet','GetCanRefresh',292));


//RegRegisterMethod(TDataSet,'GetDataSource',TypeInfo(_T118),[TypeInfo(TDataSource)], pointer(296));
RegRegisterMethod(TDataSet,'GetDataSource',TypeInfo(_T118),[TypeInfo(TDataSource)], getVMTProcAddr('TDataSet','GetDataSource',296));


//RegRegisterMethod(TDataSet,'GetFieldFullName',TypeInfo(_T120),[TypeInfo(TField),TypeInfo(string)], pointer(308));
RegRegisterMethod(TDataSet,'GetFieldFullName',TypeInfo(_T120),[TypeInfo(TField),TypeInfo(string)], getVMTProcAddr('TDataSet','GetFieldFullName',308));


//RegRegisterMethod(TDataSet,'GetStateFieldValue',TypeInfo(_T121),[TypeInfo(TDataSetState),TypeInfo(TField),TypeInfo(Variant)], pointer(312));
RegRegisterMethod(TDataSet,'GetStateFieldValue',TypeInfo(_T121),[TypeInfo(TDataSetState),TypeInfo(TField),TypeInfo(Variant)], getVMTProcAddr('TDataSet','GetStateFieldValue',312));


//RegRegisterMethod(TDataSet,'GetIsIndexField',TypeInfo(_T122),[TypeInfo(TField),TypeInfo(Boolean)], pointer(316));
RegRegisterMethod(TDataSet,'GetIsIndexField',TypeInfo(_T122),[TypeInfo(TField),TypeInfo(Boolean)], getVMTProcAddr('TDataSet','GetIsIndexField',316));


//RegRegisterMethod(TDataSet,'GetNextRecords',TypeInfo(_T123),[TypeInfo(Integer)], pointer(320));
RegRegisterMethod(TDataSet,'GetNextRecords',TypeInfo(_T123),[TypeInfo(Integer)], getVMTProcAddr('TDataSet','GetNextRecords',320));


//RegRegisterMethod(TDataSet,'GetNextRecord',TypeInfo(_T124),[TypeInfo(Boolean)], pointer(324));
RegRegisterMethod(TDataSet,'GetNextRecord',TypeInfo(_T124),[TypeInfo(Boolean)], getVMTProcAddr('TDataSet','GetNextRecord',324));


//RegRegisterMethod(TDataSet,'GetPriorRecords',TypeInfo(_T125),[TypeInfo(Integer)], pointer(328));
RegRegisterMethod(TDataSet,'GetPriorRecords',TypeInfo(_T125),[TypeInfo(Integer)], getVMTProcAddr('TDataSet','GetPriorRecords',328));


//RegRegisterMethod(TDataSet,'GetPriorRecord',TypeInfo(_T126),[TypeInfo(Boolean)], pointer(332));
RegRegisterMethod(TDataSet,'GetPriorRecord',TypeInfo(_T126),[TypeInfo(Boolean)], getVMTProcAddr('TDataSet','GetPriorRecord',332));


//RegRegisterMethod(TDataSet,'GetRecordCount',TypeInfo(_T127),[TypeInfo(Integer)], pointer(336));
RegRegisterMethod(TDataSet,'GetRecordCount',TypeInfo(_T127),[TypeInfo(Integer)], getVMTProcAddr('TDataSet','GetRecordCount',336));


//RegRegisterMethod(TDataSet,'GetRecNo',TypeInfo(_T128),[TypeInfo(Integer)], pointer(340));
RegRegisterMethod(TDataSet,'GetRecNo',TypeInfo(_T128),[TypeInfo(Integer)], getVMTProcAddr('TDataSet','GetRecNo',340));


//RegRegisterMethod(TDataSet,'InitFieldDefs',TypeInfo(_T129),NoParams, pointer(344));
RegRegisterMethod(TDataSet,'InitFieldDefs',TypeInfo(_T129),NoParams, getVMTProcAddr('TDataSet','InitFieldDefs',344));


//RegRegisterMethod(TDataSet,'InitRecord',TypeInfo(_T130),[TypeInfo(TRecBuf)], pointer(348));
RegRegisterMethod(TDataSet,'InitRecord',TypeInfo(_T130),[TypeInfo(TRecBuf)], getVMTProcAddr('TDataSet','InitRecord',348));


//RegRegisterMethod(TDataSet,'InternalCancel',TypeInfo(_T131),NoParams, pointer(356));
RegRegisterMethod(TDataSet,'InternalCancel',TypeInfo(_T131),NoParams, getVMTProcAddr('TDataSet','InternalCancel',356));


//RegRegisterMethod(TDataSet,'InternalEdit',TypeInfo(_T132),NoParams, pointer(360));
RegRegisterMethod(TDataSet,'InternalEdit',TypeInfo(_T132),NoParams, getVMTProcAddr('TDataSet','InternalEdit',360));


//RegRegisterMethod(TDataSet,'InternalInsert',TypeInfo(_T133),NoParams, pointer(364));
RegRegisterMethod(TDataSet,'InternalInsert',TypeInfo(_T133),NoParams, getVMTProcAddr('TDataSet','InternalInsert',364));


//RegRegisterMethod(TDataSet,'InternalRefresh',TypeInfo(_T134),NoParams, pointer(368));
RegRegisterMethod(TDataSet,'InternalRefresh',TypeInfo(_T134),NoParams, getVMTProcAddr('TDataSet','InternalRefresh',368));


RegisterProc(TDataSet,'OpenCursor',mtScriptMethod,TypeInfo(_T135),[
TypeInfo(Boolean)],Addr(__TDataSet__OpenCursor__Wrapper),cRegister);

//RegRegisterMethod(TDataSet,'RefreshInternalCalcFields',TypeInfo(_T136),[TypeInfo(TRecBuf)], pointer(376));
RegRegisterMethod(TDataSet,'RefreshInternalCalcFields',TypeInfo(_T136),[TypeInfo(TRecBuf)], getVMTProcAddr('TDataSet','RefreshInternalCalcFields',376));


//RegRegisterMethod(TDataSet,'BlockReadNext',TypeInfo(_T137),NoParams, pointer(384));
RegRegisterMethod(TDataSet,'BlockReadNext',TypeInfo(_T137),NoParams, getVMTProcAddr('TDataSet','BlockReadNext',384));


//RegRegisterMethod(TDataSet,'SetActive',TypeInfo(_T138),[TypeInfo(Boolean)], pointer(388));
RegRegisterMethod(TDataSet,'SetActive',TypeInfo(_T138),[TypeInfo(Boolean)], getVMTProcAddr('TDataSet','SetActive',388));


//RegRegisterMethod(TDataSet,'SetBookmarkStr',TypeInfo(_T139),[TypeInfo(TBookmarkStr)], pointer(392));
RegRegisterMethod(TDataSet,'SetBookmarkStr',TypeInfo(_T139),[TypeInfo(TBookmarkStr)], getVMTProcAddr('TDataSet','SetBookmarkStr',392));


//RegRegisterMethod(TDataSet,'SetBlockReadSize',TypeInfo(_T140),[TypeInfo(Integer)], pointer(396));
RegRegisterMethod(TDataSet,'SetBlockReadSize',TypeInfo(_T140),[TypeInfo(Integer)], getVMTProcAddr('TDataSet','SetBlockReadSize',396));


//RegRegisterMethod(TDataSet,'SetBufListSize',TypeInfo(_T141),[TypeInfo(Integer)], pointer(400));
RegRegisterMethod(TDataSet,'SetBufListSize',TypeInfo(_T141),[TypeInfo(Integer)], getVMTProcAddr('TDataSet','SetBufListSize',400));


//RegRegisterMethod(TDataSet,'SetCurrentRecord',TypeInfo(_T142),[TypeInfo(Integer)], pointer(404));
RegRegisterMethod(TDataSet,'SetCurrentRecord',TypeInfo(_T142),[TypeInfo(Integer)], getVMTProcAddr('TDataSet','SetCurrentRecord',404));


//RegRegisterMethod(TDataSet,'SetDataSetField',TypeInfo(_T143),[TypeInfo(TDataSetField)], pointer(408));
RegRegisterMethod(TDataSet,'SetDataSetField',TypeInfo(_T143),[TypeInfo(TDataSetField)], getVMTProcAddr('TDataSet','SetDataSetField',408));


//RegRegisterMethod(TDataSet,'SetFieldProps',TypeInfo(_T144),[TypeInfo(TField),TypeInfo(TFieldDef)], pointer(412));
RegRegisterMethod(TDataSet,'SetFieldProps',TypeInfo(_T144),[TypeInfo(TField),TypeInfo(TFieldDef)], getVMTProcAddr('TDataSet','SetFieldProps',412));


//RegRegisterMethod(TDataSet,'SetFieldDefProps',TypeInfo(_T145),[TypeInfo(TField),TypeInfo(TFieldDef)], pointer(416));
RegRegisterMethod(TDataSet,'SetFieldDefProps',TypeInfo(_T145),[TypeInfo(TField),TypeInfo(TFieldDef)], getVMTProcAddr('TDataSet','SetFieldDefProps',416));


//RegRegisterMethod(TDataSet,'SetFiltered',TypeInfo(_T146),[TypeInfo(Boolean)], pointer(420));
RegRegisterMethod(TDataSet,'SetFiltered',TypeInfo(_T146),[TypeInfo(Boolean)], getVMTProcAddr('TDataSet','SetFiltered',420));


//RegRegisterMethod(TDataSet,'SetFilterOptions',TypeInfo(_T147),[TypeInfo(TFilterOptions)], pointer(424));
RegRegisterMethod(TDataSet,'SetFilterOptions',TypeInfo(_T147),[TypeInfo(TFilterOptions)], getVMTProcAddr('TDataSet','SetFilterOptions',424));


//RegRegisterMethod(TDataSet,'SetFilterText',TypeInfo(_T148),[TypeInfo(string)], pointer(428));
RegRegisterMethod(TDataSet,'SetFilterText',TypeInfo(_T148),[TypeInfo(string)], getVMTProcAddr('TDataSet','SetFilterText',428));


//RegRegisterMethod(TDataSet,'SetRecNo',TypeInfo(_T150),[TypeInfo(Integer)], pointer(436));
RegRegisterMethod(TDataSet,'SetRecNo',TypeInfo(_T150),[TypeInfo(Integer)], getVMTProcAddr('TDataSet','SetRecNo',436));


//RegRegisterMethod(TDataSet,'SetStateFieldValue',TypeInfo(_T151),[TypeInfo(TDataSetState),TypeInfo(TField),TypeInfo(Variant)], pointer(440));
RegRegisterMethod(TDataSet,'SetStateFieldValue',TypeInfo(_T151),[TypeInfo(TDataSetState),TypeInfo(TField),TypeInfo(Variant)], getVMTProcAddr('TDataSet','SetStateFieldValue',440));


//RegRegisterMethod(TDataSet,'UpdateIndexDefs',TypeInfo(_T152),NoParams, pointer(444));
RegRegisterMethod(TDataSet,'UpdateIndexDefs',TypeInfo(_T152),NoParams, getVMTProcAddr('TDataSet','UpdateIndexDefs',444));


//RegRegisterMethod(TDataSet,'AllocRecordBuffer',TypeInfo(_T153),[TypeInfoPointer], pointer(448));
RegRegisterMethod(TDataSet,'AllocRecordBuffer',TypeInfo(_T153),[TypeInfoPointer], getVMTProcAddr('TDataSet','AllocRecordBuffer',448));


//RegRegisterMethod(TDataSet,'FreeRecordBuffer',TypeInfo(_T154),[TypeInfoPointer], pointer(452));
RegRegisterMethod(TDataSet,'FreeRecordBuffer',TypeInfo(_T154),[TypeInfoPointer], getVMTProcAddr('TDataSet','FreeRecordBuffer',452));


//RegRegisterMethod(TDataSet,'GetBookmarkData',TypeInfo(_T155),[TypeInfo(TRecBuf),TypeInfo(TBookmark)], pointer(456));
RegRegisterMethod(TDataSet,'GetBookmarkData',TypeInfo(_T155),[TypeInfo(TRecBuf),TypeInfo(TBookmark)], getVMTProcAddr('TDataSet','GetBookmarkData',456));


//RegRegisterMethod(TDataSet,'GetBookmarkFlag',TypeInfo(_T156),[TypeInfo(TRecBuf),TypeInfo(TBookmarkFlag)], pointer(460));
RegRegisterMethod(TDataSet,'GetBookmarkFlag',TypeInfo(_T156),[TypeInfo(TRecBuf),TypeInfo(TBookmarkFlag)], getVMTProcAddr('TDataSet','GetBookmarkFlag',460));


//RegRegisterMethod(TDataSet,'GetRecordSize',TypeInfo(_T157),[TypeInfo(Word)], pointer(464));
RegRegisterMethod(TDataSet,'GetRecordSize',TypeInfo(_T157),[TypeInfo(Word)], getVMTProcAddr('TDataSet','GetRecordSize',464));


//RegRegisterMethod(TDataSet,'InternalAddRecord',TypeInfo(_T158),[TypeInfo(TRecBuf),TypeInfo(Boolean)], pointer(468));
RegRegisterMethod(TDataSet,'InternalAddRecord',TypeInfo(_T158),[TypeInfo(TRecBuf),TypeInfo(Boolean)], getVMTProcAddr('TDataSet','InternalAddRecord',468));


//RegRegisterMethod(TDataSet,'InternalDelete',TypeInfo(_T159),NoParams, pointer(492));
RegRegisterMethod(TDataSet,'InternalDelete',TypeInfo(_T159),NoParams, getVMTProcAddr('TDataSet','InternalDelete',492));


//RegRegisterMethod(TDataSet,'InternalFirst',TypeInfo(_T160),NoParams, pointer(496));
RegRegisterMethod(TDataSet,'InternalFirst',TypeInfo(_T160),NoParams, getVMTProcAddr('TDataSet','InternalFirst',496));


//RegRegisterMethod(TDataSet,'InternalGotoBookmark',TypeInfo(_T161),[TypeInfo(TBookmark)], pointer(500));
RegRegisterMethod(TDataSet,'InternalGotoBookmark',TypeInfo(_T161),[TypeInfo(TBookmark)], getVMTProcAddr('TDataSet','InternalGotoBookmark',500));


//RegRegisterMethod(TDataSet,'InternalInitRecord',TypeInfo(_T162),[TypeInfo(TRecBuf)], pointer(504));
RegRegisterMethod(TDataSet,'InternalInitRecord',TypeInfo(_T162),[TypeInfo(TRecBuf)], getVMTProcAddr('TDataSet','InternalInitRecord',504));


//RegRegisterMethod(TDataSet,'InternalLast',TypeInfo(_T163),NoParams, pointer(516));
RegRegisterMethod(TDataSet,'InternalLast',TypeInfo(_T163),NoParams, getVMTProcAddr('TDataSet','InternalLast',516));


//RegRegisterMethod(TDataSet,'InternalPost',TypeInfo(_T164),NoParams, pointer(520));
RegRegisterMethod(TDataSet,'InternalPost',TypeInfo(_T164),NoParams, getVMTProcAddr('TDataSet','InternalPost',520));


//RegRegisterMethod(TDataSet,'InternalSetToRecord',TypeInfo(_T165),[TypeInfo(TRecBuf)], pointer(524));
RegRegisterMethod(TDataSet,'InternalSetToRecord',TypeInfo(_T165),[TypeInfo(TRecBuf)], getVMTProcAddr('TDataSet','InternalSetToRecord',524));


//RegRegisterMethod(TDataSet,'SetFieldData',TypeInfo(_T166),[TypeInfo(TField),TypeInfo(TValueBuffer)], pointer(532));
RegRegisterMethod(TDataSet,'SetFieldData',TypeInfo(_T166),[TypeInfo(TField),TypeInfo(TValueBuffer)], getVMTProcAddr('TDataSet','SetFieldData',532));


//RegRegisterMethod(TDataSet,'SetBookmarkFlag',TypeInfo(_T167),[TypeInfo(TRecBuf),TypeInfo(TBookmarkFlag)], pointer(540));
RegRegisterMethod(TDataSet,'SetBookmarkFlag',TypeInfo(_T167),[TypeInfo(TRecBuf),TypeInfo(TBookmarkFlag)], getVMTProcAddr('TDataSet','SetBookmarkFlag',540));


//RegRegisterMethod(TDataSet,'SetBookmarkData',TypeInfo(_T168),[TypeInfo(TRecBuf),TypeInfo(TBookmark)], pointer(544));
RegRegisterMethod(TDataSet,'SetBookmarkData',TypeInfo(_T168),[TypeInfo(TRecBuf),TypeInfo(TBookmark)], getVMTProcAddr('TDataSet','SetBookmarkData',544));


//RegRegisterMethod(TDataSet,'GetRecord',TypeInfo(_T169),[TypeInfo(TRecBuf),TypeInfo(TGetMode),TypeInfo(Boolean),TypeInfo(TGetResult)], pointer(568));
RegRegisterMethod(TDataSet,'GetRecord',TypeInfo(_T169),[TypeInfo(TRecBuf),TypeInfo(TGetMode),TypeInfo(Boolean),TypeInfo(TGetResult)], getVMTProcAddr('TDataSet','GetRecord',568));


//RegRegisterMethod(TDataSet,'InternalClose',TypeInfo(_T170),NoParams, pointer(576));
RegRegisterMethod(TDataSet,'InternalClose',TypeInfo(_T170),NoParams, getVMTProcAddr('TDataSet','InternalClose',576));


//RegRegisterMethod(TDataSet,'InternalHandleException',TypeInfo(_T171),NoParams, pointer(580));
RegRegisterMethod(TDataSet,'InternalHandleException',TypeInfo(_T171),NoParams, getVMTProcAddr('TDataSet','InternalHandleException',580));


//RegRegisterMethod(TDataSet,'InternalInitFieldDefs',TypeInfo(_T172),NoParams, pointer(584));
RegRegisterMethod(TDataSet,'InternalInitFieldDefs',TypeInfo(_T172),NoParams, getVMTProcAddr('TDataSet','InternalInitFieldDefs',584));


//RegRegisterMethod(TDataSet,'InternalOpen',TypeInfo(_T173),NoParams, pointer(588));
RegRegisterMethod(TDataSet,'InternalOpen',TypeInfo(_T173),NoParams, getVMTProcAddr('TDataSet','InternalOpen',588));


//RegRegisterMethod(TDataSet,'IsCursorOpen',TypeInfo(_T174),[TypeInfo(Boolean)], pointer(592));
RegRegisterMethod(TDataSet,'IsCursorOpen',TypeInfo(_T174),[TypeInfo(Boolean)], getVMTProcAddr('TDataSet','IsCursorOpen',592));


RegRegisterMethod(TDataSet,'ActiveBuffer',TypeInfo(_T183),[TypeInfo(TRecBuf)],Addr(TDataSet.ActiveBuffer));

RegRegisterMethod(TDataSet,'Append',TypeInfo(_T184),NoParams,Addr(TDataSet.Append));

RegRegisterMethod(TDataSet,'AppendRecord',TypeInfo(_T185),[
TypeInfoArrayOfConst],Addr(TDataSet.AppendRecord));

//RegRegisterMethod(TDataSet,'BookmarkValid',TypeInfo(_T186),[TypeInfo(TBookmark),TypeInfo(Boolean)], pointer(628));


//RegRegisterMethod(TDataSet,'Cancel',TypeInfo(_T187),NoParams, pointer(632));
RegRegisterMethod(TDataSet,'Cancel',TypeInfo(_T187),NoParams, getVMTProcAddr('TDataSet','Cancel',632));


RegRegisterMethod(TDataSet,'CheckBrowseMode',TypeInfo(_T188),NoParams,Addr(TDataSet.CheckBrowseMode));

RegRegisterMethod(TDataSet,'ClearFields',TypeInfo(_T189),NoParams,Addr(TDataSet.ClearFields));

RegRegisterMethod(TDataSet,'Close',TypeInfo(_T190),NoParams,Addr(TDataSet.Close));

RegRegisterMethod(TDataSet,'ControlsDisabled',TypeInfo(_T191),[TypeInfo(Boolean)],Addr(TDataSet.ControlsDisabled));

//RegRegisterMethod(TDataSet,'CompareBookmarks',TypeInfo(_T192),[TypeInfo(TBookmark),TypeInfo(TBookmark),TypeInfo(Integer)], pointer(636));
RegRegisterMethod(TDataSet,'CompareBookmarks',TypeInfo(_T192),[TypeInfo(TBookmark),TypeInfo(TBookmark),TypeInfo(Integer)], getVMTProcAddr('TDataSet','CompareBookmarks',636));


//RegRegisterMethod(TDataSet,'CreateBlobStream',TypeInfo(_T193),[TypeInfo(TField),TypeInfo(TBlobStreamMode),TypeInfo(TStream)], pointer(640));
RegRegisterMethod(TDataSet,'CreateBlobStream',TypeInfo(_T193),[TypeInfo(TField),TypeInfo(TBlobStreamMode),TypeInfo(TStream)], getVMTProcAddr('TDataSet','CreateBlobStream',640));


RegRegisterMethod(TDataSet,'CursorPosChanged',TypeInfo(_T194),NoParams,Addr(TDataSet.CursorPosChanged));

RegRegisterMethod(TDataSet,'Delete',TypeInfo(_T195),NoParams,Addr(TDataSet.Delete));

RegRegisterMethod(TDataSet,'DisableControls',TypeInfo(_T196),NoParams,Addr(TDataSet.DisableControls));

RegRegisterMethod(TDataSet,'Edit',TypeInfo(_T197),NoParams,Addr(TDataSet.Edit));

RegRegisterMethod(TDataSet,'EnableControls',TypeInfo(_T198),NoParams,Addr(TDataSet.EnableControls));

RegRegisterMethod(TDataSet,'FieldByName',TypeInfo(_T199),[
TypeInfo(string),TypeInfo(TField)],Addr(TDataSet.FieldByName));

RegRegisterMethod(TDataSet,'FindField',TypeInfo(_T200),[
TypeInfo(string),TypeInfo(TField)],Addr(TDataSet.FindField));

RegRegisterMethod(TDataSet,'FindFirst',TypeInfo(_T201),[TypeInfo(Boolean)],Addr(TDataSet.FindFirst));

RegRegisterMethod(TDataSet,'FindLast',TypeInfo(_T202),[TypeInfo(Boolean)],Addr(TDataSet.FindLast));

RegRegisterMethod(TDataSet,'FindNext',TypeInfo(_T203),[TypeInfo(Boolean)],Addr(TDataSet.FindNext));

RegRegisterMethod(TDataSet,'FindPrior',TypeInfo(_T204),[TypeInfo(Boolean)],Addr(TDataSet.FindPrior));

RegRegisterMethod(TDataSet,'First',TypeInfo(_T205),NoParams,Addr(TDataSet.First));



//<green>
//added implementation of getbookmark\gotobookmark\freebookmark

RegisterProc(TDataSet,'GetBookmark',mtScriptMethod, TypeInfo(_T209),
  [DynArrayInfo(TypeInfo(Byte))],
  Addr(__TDataSet__getBookMark__Wrapper), cRegister);

RegisterProc(TDataSet,'GotoBookmark',mtScriptMethod, TypeInfo(_T217),
[DynArrayInfo(TypeInfo(Byte))],
  Addr(__TDataSet__setBookMark__Wrapper), cRegister);

RegisterProc(TDataSet,'FreeBookmark',mtScriptMethod, TypeInfo(_T217),
[DynArrayInfo(TypeInfo(Byte))],
  Addr(__TDataSet__freeBookMark__Wrapper), cRegister);

RegisterProc(TDataSet,'BookmarkValid',mtScriptMethod, TypeInfo(_T188),
[DynArrayInfo(TypeInfo(Byte))],
  Addr(__TDataSet__BookMarkValid__Wrapper), cRegister);


//RegRegisterMethod(TDataSet,'FreeBookmark',TypeInfo(_T206),[TypeInfo(TBookmark)], pointer(644));
//RegRegisterMethod(TDataSet,'FreeBookmark',TypeInfo(_T206),[TypeInfo(TBookmark)], getVMTProcAddr('TDataSet','FreeBookmark',644));


//RegRegisterMethod(TDataSet,'GetBookmark',TypeInfo(_T207),[TypeInfo(TBookmark)], pointer(648));
//RegRegisterMethod(TDataSet,'GetBookmark',TypeInfo(_T207),[TypeInfo(TBookmark)], getVMTProcAddr('TDataSet','GetBookmark',648));


//RegRegisterMethod(TDataSet,'GetClonedDataSet',TypeInfo(_T208),[TypeInfo(Boolean),TypeInfo(TDataSet)], pointer(652));
RegRegisterMethod(TDataSet,'GetClonedDataSet',TypeInfo(_T208),[TypeInfo(Boolean),TypeInfo(TDataSet)], getVMTProcAddr('TDataSet','GetClonedDataSet',652));


//RegRegisterMethod(TDataSet,'GetCurrentRecord',TypeInfo(_T209),[TypeInfo(TRecBuf),TypeInfo(Boolean)], pointer(656));
RegRegisterMethod(TDataSet,'GetCurrentRecord',TypeInfo(_T209),[TypeInfo(TRecBuf),TypeInfo(Boolean)], getVMTProcAddr('TDataSet','GetCurrentRecord',656));


//RegRegisterMethod(TDataSet,'GetDetailDataSets',TypeInfo(_T210),[
//TypeInfo(TList),
//TypeInfoUntyped,
//TypeInfoUntyped,
//TypeInfoUntyped], pointer(664));
//
//RegRegisterMethod(TDataSet,'GetDetailLinkFields',TypeInfo(_T211),[
//TypeInfo(TList),
//TypeInfo(TList),
//TypeInfoUntyped,
//TypeInfoUntyped,
//TypeInfoUntyped], pointer(668));

//RegRegisterMethod(TDataSet,'GetBlobFieldData',TypeInfo(_T212),[TypeInfo(Integer),TypeInfo(TBlobByteData),TypeInfo(Integer)], pointer(672));
RegRegisterMethod(TDataSet,'GetBlobFieldData',TypeInfo(_T212),[TypeInfo(Integer),TypeInfo(TBlobByteData),TypeInfo(Integer)], getVMTProcAddr('TDataSet','GetBlobFieldData',672));


//RegRegisterMethod(TDataSet,'GetFieldData',TypeInfo(_T213),[TypeInfo(TField),TypeInfo(TValueBuffer),TypeInfo(Boolean)], pointer(676));
RegRegisterMethod(TDataSet,'GetFieldData',TypeInfo(_T213),[TypeInfo(TField),TypeInfo(TValueBuffer),TypeInfo(Boolean)], getVMTProcAddr('TDataSet','GetFieldData',676));


//RegRegisterMethod(TDataSet,'GetFieldList',TypeInfo(_T214),[
//TypeInfo(TList),
//TypeInfo(TList),
//TypeInfo(TList),
//TypeInfo(TList),
//TypeInfo(string)],Addr(TDataSet.GetFieldList));

//RegRegisterMethod(TDataSet,'GetFieldNames',TypeInfo(_T215),[TypeInfo(TStrings)], pointer(708));
RegRegisterMethod(TDataSet,'GetFieldNames',TypeInfo(_T215),[TypeInfo(TStrings)], getVMTProcAddr('TDataSet','GetFieldNames',708));


//RegRegisterMethod(TDataSet,'GotoBookmark',TypeInfo(_T216),[TypeInfo(TBookmark)],Addr(TDataSet.GotoBookmark));

RegRegisterMethod(TDataSet,'Insert',TypeInfo(_T217),NoParams,Addr(TDataSet.Insert));

RegRegisterMethod(TDataSet,'InsertRecord',TypeInfo(_T218),[
TypeInfoArrayOfConst],Addr(TDataSet.InsertRecord));

RegRegisterMethod(TDataSet,'IsEmpty',TypeInfo(_T219),[TypeInfo(Boolean)],Addr(TDataSet.IsEmpty));

RegRegisterMethod(TDataSet,'IsLinkedTo',TypeInfo(_T220),[
TypeInfo(TDataSource),TypeInfo(Boolean)],Addr(TDataSet.IsLinkedTo));

//RegRegisterMethod(TDataSet,'IsSequenced',TypeInfo(_T221),[TypeInfo(Boolean)], pointer(712));
RegRegisterMethod(TDataSet,'IsSequenced',TypeInfo(_T221),[TypeInfo(Boolean)], getVMTProcAddr('TDataSet','IsSequenced',712));


RegRegisterMethod(TDataSet,'Last',TypeInfo(_T222),NoParams,Addr(TDataSet.Last));

//RegRegisterMethod(TDataSet,'Locate',TypeInfo(_T223),[TypeInfo(string),TypeInfo(Variant),TypeInfo(TLocateOptions),TypeInfo(Boolean)], pointer(716));
RegRegisterMethod(TDataSet,'Locate',TypeInfo(_T223),[TypeInfo(string),TypeInfo(Variant),TypeInfo(TLocateOptions),TypeInfo(Boolean)], getVMTProcAddr('TDataSet','Locate',716));


//RegRegisterMethod(TDataSet,'Lookup',TypeInfo(_T224),[TypeInfo(string),TypeInfo(Variant),TypeInfo(string),TypeInfo(Variant)], pointer(720));
RegRegisterMethod(TDataSet,'Lookup',TypeInfo(_T224),[TypeInfo(string),TypeInfo(Variant),TypeInfo(string),TypeInfo(Variant)], getVMTProcAddr('TDataSet','Lookup',720));


//RegRegisterMethod(TDataSet,'MoveBy',TypeInfo(_T225),[TypeInfo(Integer),TypeInfo(Integer)], pointer(724));
RegRegisterMethod(TDataSet,'MoveBy',TypeInfo(_T225),[TypeInfo(Integer),TypeInfo(Integer)], getVMTProcAddr('TDataSet','MoveBy',724));


RegRegisterMethod(TDataSet,'Next',TypeInfo(_T226),NoParams,Addr(TDataSet.Next));

RegRegisterMethod(TDataSet,'Open',TypeInfo(_T227),NoParams,Addr(TDataSet.Open));

//RegRegisterMethod(TDataSet,'Post',TypeInfo(_T228),NoParams, pointer(728));
RegRegisterMethod(TDataSet,'Post',TypeInfo(_T228),NoParams, getVMTProcAddr('TDataSet','Post',728));


RegRegisterMethod(TDataSet,'Prior',TypeInfo(_T229),NoParams,Addr(TDataSet.Prior));

RegRegisterMethod(TDataSet,'Refresh',TypeInfo(_T230),NoParams,Addr(TDataSet.Refresh));

//RegRegisterMethod(TDataSet,'Resync',TypeInfo(_T231),[TypeInfo(TResyncMode)], pointer(732));
RegRegisterMethod(TDataSet,'Resync',TypeInfo(_T231),[TypeInfo(TResyncMode)], getVMTProcAddr('TDataSet','Resync',732));


RegRegisterMethod(TDataSet,'SetFields',TypeInfo(_T232),[
TypeInfoArrayOfConst],Addr(TDataSet.SetFields));

RegRegisterMethod(TDataSet,'CopyFields',TypeInfo(_T233),[
TypeInfo(TDataSet),TypeInfo(Integer)],Addr(TDataSet.CopyFields));

RegRegisterMethod(TDataSet,'UpdateCursorPos',TypeInfo(_T235),NoParams,Addr(TDataSet.UpdateCursorPos));

RegRegisterMethod(TDataSet,'UpdateRecord',TypeInfo(_T236),NoParams,Addr(TDataSet.UpdateRecord));

//RegRegisterMethod(TDataSet,'UpdateStatus',TypeInfo(_T237),[TypeInfo(TUpdateStatus)], pointer(740));
RegRegisterMethod(TDataSet,'UpdateStatus',TypeInfo(_T237),[TypeInfo(TUpdateStatus)], getVMTProcAddr('TDataSet','UpdateStatus',740));


RegRegisterMethod(TDataSet,'DefaultFields',TypeInfo(_T238),[TypeInfo(Boolean)],Addr(TDataSet.DefaultFields));

RegisterProc(TDataSetDesigner,'Create',mtConstructor,TypeInfo(_T239),[
TypeInfo(TDataSet)], pointer(0),cRegister);

RegRegisterMethod(TDataSetDesigner,'BeginDesign',TypeInfo(_T240),NoParams,Addr(TDataSetDesigner.BeginDesign));

//RegRegisterMethod(TDataSetDesigner,'DataEvent',TypeInfo(_T241),[TypeInfo(TDataEvent),TypeInfo(NativeInt)], pointer(4));
RegRegisterMethod(TDataSetDesigner,'DataEvent',TypeInfo(_T241),[TypeInfo(TDataEvent),TypeInfo(NativeInt)], getVMTProcAddr('TDataSetDesigner','DataEvent',4));


RegRegisterMethod(TDataSetDesigner,'EndDesign',TypeInfo(_T242),NoParams,Addr(TDataSetDesigner.EndDesign));

RegRegisterMethod(TDataSource,'Edit',TypeInfo(_T243),NoParams,Addr(TDataSource.Edit));

RegRegisterMethod(TDataSource,'IsLinkedTo',TypeInfo(_T244),[
TypeInfo(TDataSet),TypeInfo(Boolean)],Addr(TDataSource.IsLinkedTo));

//RegisterProc(TDBBitConverter,'UnsafeInToVariant',mtScriptProc,TypeInfo(_T248),[
//TypeInfo(TArray),
//TypeInfo(TArray),
//TypeInfo(TArray),
//TypeInfo(TArray),
//TypeInfo(Integer),TypeInfo(Variant)],Addr(__TDBBitConverter__UnsafeInToVariant__Wrapper),cRegister);
//
//RegisterProc(TDBBitConverter,'UnsafeInToBAVariant',mtScriptProc,TypeInfo(_T249),[
//TypeInfo(TArray),
//TypeInfo(TArray),
//TypeInfo(TArray),
//TypeInfo(TArray),
//TypeInfo(Integer),TypeInfo(Variant)],Addr(__TDBBitConverter__UnsafeInToBAVariant__Wrapper),cRegister);

RegisterProc(TDefCollection,'Create',mtConstructor,TypeInfo(_T251),[
TypeInfo(TDataSet),
TypeInfo(TPersistent),
TypeInfo(TCollectionItemClass)],Addr(TDefCollection.Create),cRegister);

RegRegisterMethod(TDefCollection,'Find',TypeInfo(_T252),[
TypeInfo(string),TypeInfo(TNamedItem)],Addr(TDefCollection.Find));

RegRegisterMethod(TDefCollection,'GetItemNames',TypeInfo(_T253),[
TypeInfo(TStrings)],Addr(TDefCollection.GetItemNames));

RegRegisterMethod(TDefCollection,'IndexOf',TypeInfo(_T254),[
TypeInfo(string),TypeInfo(Integer)],Addr(TDefCollection.IndexOf));

//RegRegisterMethod(TDetailDataLink,'GetDetailDataSet',TypeInfo(_T255),[TypeInfo(TDataSet)], pointer(72));
RegRegisterMethod(TDetailDataLink,'GetDetailDataSet',TypeInfo(_T255),[TypeInfo(TDataSet)], getVMTProcAddr('TDetailDataLink','GetDetailDataSet',72));


RegRegisterMethod(TField,'AccessError',TypeInfo(_T256),[
TypeInfo(string),TypeInfo(EDatabaseError)], pointer(MinVMTOffset - 0));

//RegRegisterMethod(TField,'Bind',TypeInfo(_T257),[TypeInfo(Boolean)], pointer(0));
RegRegisterMethod(TField,'Bind',TypeInfo(_T257),[TypeInfo(Boolean)], getVMTProcAddr('TField','Bind',0));


RegisterProc(TField,'CheckTypeSize',mtClassMethod,TypeInfo(_T258),[
TypeInfo(Integer)], pointer(4),cRegister);

//RegRegisterMethod(TField,'Change',TypeInfo(_T259),NoParams, pointer(8));
RegRegisterMethod(TField,'Change',TypeInfo(_T259),NoParams, getVMTProcAddr('TField','Change',8));


//RegRegisterMethod(TField,'FreeBuffers',TypeInfo(_T260),NoParams, pointer(12));
RegRegisterMethod(TField,'FreeBuffers',TypeInfo(_T260),NoParams, getVMTProcAddr('TField','FreeBuffers',12));


//RegRegisterMethod(TField,'GetAsBCD',TypeInfo(_T261),[TypeInfo(TBcd)], pointer(16));
RegRegisterMethod(TField,'GetAsBCD',TypeInfo(_T261),[TypeInfo(TBcd)], getVMTProcAddr('TField','GetAsBCD',16));


//RegRegisterMethod(TField,'GetAsBoolean',TypeInfo(_T262),[TypeInfo(Boolean)], pointer(20));
RegRegisterMethod(TField,'GetAsBoolean',TypeInfo(_T262),[TypeInfo(Boolean)], getVMTProcAddr('TField','GetAsBoolean',20));


//RegRegisterMethod(TField,'GetAsByteArray',TypeInfo(_T263),[TypeInfo(Variant)], pointer(24));
RegRegisterMethod(TField,'GetAsByteArray',TypeInfo(_T263),[TypeInfo(Variant)], getVMTProcAddr('TField','GetAsByteArray',24));


//RegRegisterMethod(TField,'GetAsCurrency',TypeInfo(_T264),[TypeInfo(Currency)], pointer(28));
RegRegisterMethod(TField,'GetAsCurrency',TypeInfo(_T264),[TypeInfo(Currency)], getVMTProcAddr('TField','GetAsCurrency',28));


//RegRegisterMethod(TField,'GetAsDateTime',TypeInfo(_T265),[TypeInfo(TDateTime)], pointer(32));
RegRegisterMethod(TField,'GetAsDateTime',TypeInfo(_T265),[TypeInfo(TDateTime)], getVMTProcAddr('TField','GetAsDateTime',32));


//RegRegisterMethod(TField,'GetAsSingle',TypeInfo(_T266),[TypeInfo(Single)], pointer(36));
RegRegisterMethod(TField,'GetAsSingle',TypeInfo(_T266),[TypeInfo(Single)], getVMTProcAddr('TField','GetAsSingle',36));


//RegRegisterMethod(TField,'GetAsFloat',TypeInfo(_T267),[TypeInfo(Double)], pointer(40));
RegRegisterMethod(TField,'GetAsFloat',TypeInfo(_T267),[TypeInfo(Double)], getVMTProcAddr('TField','GetAsFloat',40));


//RegRegisterMethod(TField,'GetAsExtended',TypeInfo(_T268),[TypeInfo(Extended)], pointer(44));
RegRegisterMethod(TField,'GetAsExtended',TypeInfo(_T268),[TypeInfo(Extended)], getVMTProcAddr('TField','GetAsExtended',44));


//RegRegisterMethod(TField,'GetAsInteger',TypeInfo(_T269),[TypeInfo(Longint)], pointer(48));
RegRegisterMethod(TField,'GetAsInteger',TypeInfo(_T269),[TypeInfo(Longint)], getVMTProcAddr('TField','GetAsInteger',48));


//RegRegisterMethod(TField,'GetAsLongWord',TypeInfo(_T271),[TypeInfo(LongWord)], pointer(56));
RegRegisterMethod(TField,'GetAsLongWord',TypeInfo(_T271),[TypeInfo(LongWord)], getVMTProcAddr('TField','GetAsLongWord',56));


//RegRegisterMethod(TField,'GetAsSQLTimeStamp',TypeInfo(_T272),[TypeInfo(TSQLTimeStamp)], pointer(60));
RegRegisterMethod(TField,'GetAsSQLTimeStamp',TypeInfo(_T272),[TypeInfo(TSQLTimeStamp)], getVMTProcAddr('TField','GetAsSQLTimeStamp',60));


//RegRegisterMethod(TField,'GetAsSQLTimeStampOffset',TypeInfo(_T273),[TypeInfo(TSQLTimeStampOffset)], pointer(64));
RegRegisterMethod(TField,'GetAsSQLTimeStampOffset',TypeInfo(_T273),[TypeInfo(TSQLTimeStampOffset)], getVMTProcAddr('TField','GetAsSQLTimeStampOffset',64));


//RegRegisterMethod(TField,'GetAsString',TypeInfo(_T274),[TypeInfo(string)], pointer(68));
RegRegisterMethod(TField,'GetAsString',TypeInfo(_T274),[TypeInfo(string)], getVMTProcAddr('TField','GetAsString',68));


//RegRegisterMethod(TField,'GetAsWideString',TypeInfo(_T275),[TypeInfo(string)], pointer(72));
RegRegisterMethod(TField,'GetAsWideString',TypeInfo(_T275),[TypeInfo(string)], getVMTProcAddr('TField','GetAsWideString',72));


//RegRegisterMethod(TField,'GetAsAnsiString',TypeInfo(_T276),[TypeInfo(AnsiString)], pointer(76));
RegRegisterMethod(TField,'GetAsAnsiString',TypeInfo(_T276),[TypeInfo(AnsiString)], getVMTProcAddr('TField','GetAsAnsiString',76));


//RegRegisterMethod(TField,'GetAsVariant',TypeInfo(_T277),[TypeInfo(Variant)], pointer(80));
RegRegisterMethod(TField,'GetAsVariant',TypeInfo(_T277),[TypeInfo(Variant)], getVMTProcAddr('TField','GetAsVariant',80));


//RegRegisterMethod(TField,'GetAsGuid',TypeInfo(_T278),[TypeInfo(IDispatch)], pointer(84));
RegRegisterMethod(TField,'GetAsGuid',TypeInfo(_T278),[TypeInfo(IDispatch)], getVMTProcAddr('TField','GetAsGuid',84));


//RegRegisterMethod(TField,'GetCanModify',TypeInfo(_T279),[TypeInfo(Boolean)], pointer(88));
RegRegisterMethod(TField,'GetCanModify',TypeInfo(_T279),[TypeInfo(Boolean)], getVMTProcAddr('TField','GetCanModify',88));


//RegRegisterMethod(TField,'GetClassDesc',TypeInfo(_T280),[TypeInfo(string)], pointer(92));
RegRegisterMethod(TField,'GetClassDesc',TypeInfo(_T280),[TypeInfo(string)], getVMTProcAddr('TField','GetClassDesc',92));


//RegRegisterMethod(TField,'GetDataSize',TypeInfo(_T281),[TypeInfo(Integer)], pointer(96));
RegRegisterMethod(TField,'GetDataSize',TypeInfo(_T281),[TypeInfo(Integer)], getVMTProcAddr('TField','GetDataSize',96));


//RegRegisterMethod(TField,'GetIOSize',TypeInfo(_T282),[TypeInfo(Integer)], pointer(100));
RegRegisterMethod(TField,'GetIOSize',TypeInfo(_T282),[TypeInfo(Integer)], getVMTProcAddr('TField','GetIOSize',100));


//RegRegisterMethod(TField,'CopyData',TypeInfo(_T283),[TypeInfo(TValueBuffer),TypeInfo(TValueBuffer)], pointer(104));
RegRegisterMethod(TField,'CopyData',TypeInfo(_T283),[TypeInfo(TValueBuffer),TypeInfo(TValueBuffer)], getVMTProcAddr('TField','CopyData',104));


//RegRegisterMethod(TField,'GetDefaultWidth',TypeInfo(_T284),[TypeInfo(Integer)], pointer(112));
RegRegisterMethod(TField,'GetDefaultWidth',TypeInfo(_T284),[TypeInfo(Integer)], getVMTProcAddr('TField','GetDefaultWidth',112));


//RegRegisterMethod(TField,'GetFieldNo',TypeInfo(_T285),[TypeInfo(Integer)], pointer(116));
RegRegisterMethod(TField,'GetFieldNo',TypeInfo(_T285),[TypeInfo(Integer)], getVMTProcAddr('TField','GetFieldNo',116));


//RegRegisterMethod(TField,'GetHasConstraints',TypeInfo(_T286),[TypeInfo(Boolean)], pointer(120));
RegRegisterMethod(TField,'GetHasConstraints',TypeInfo(_T286),[TypeInfo(Boolean)], getVMTProcAddr('TField','GetHasConstraints',120));


//RegRegisterMethod(TField,'GetIsNull',TypeInfo(_T287),[TypeInfo(Boolean)], pointer(124));
RegRegisterMethod(TField,'GetIsNull',TypeInfo(_T287),[TypeInfo(Boolean)], getVMTProcAddr('TField','GetIsNull',124));


//RegRegisterMethod(TField,'GetSize',TypeInfo(_T288),[TypeInfo(Integer)], pointer(128));
RegRegisterMethod(TField,'GetSize',TypeInfo(_T288),[TypeInfo(Integer)], getVMTProcAddr('TField','GetSize',128));


//RegRegisterMethod(TField,'GetText',TypeInfo(_T289),[TypeInfo(string),TypeInfo(Boolean)], pointer(132));
RegRegisterMethod(TField,'GetText',TypeInfo(_T289),[TypeInfo(string),TypeInfo(Boolean)], getVMTProcAddr('TField','GetText',132));


//RegRegisterMethod(TField,'GetWideText',TypeInfo(_T290),[TypeInfo(string),TypeInfo(Boolean)], pointer(136));
RegRegisterMethod(TField,'GetWideText',TypeInfo(_T290),[TypeInfo(string),TypeInfo(Boolean)], getVMTProcAddr('TField','GetWideText',136));


//RegRegisterMethod(TField,'SetAsBCD',TypeInfo(_T291),[TypeInfo(TBcd)], pointer(140));
RegRegisterMethod(TField,'SetAsBCD',TypeInfo(_T291),[TypeInfo(TBcd)], getVMTProcAddr('TField','SetAsBCD',140));


//RegRegisterMethod(TField,'SetAsBoolean',TypeInfo(_T292),[TypeInfo(Boolean)], pointer(144));
RegRegisterMethod(TField,'SetAsBoolean',TypeInfo(_T292),[TypeInfo(Boolean)], getVMTProcAddr('TField','SetAsBoolean',144));


//RegRegisterMethod(TField,'SetAsByteArray',TypeInfo(_T293),[TypeInfo(Variant)], pointer(148));
RegRegisterMethod(TField,'SetAsByteArray',TypeInfo(_T293),[TypeInfo(Variant)], getVMTProcAddr('TField','SetAsByteArray',148));


//RegRegisterMethod(TField,'SetAsCurrency',TypeInfo(_T294),[TypeInfo(Currency)], pointer(152));
RegRegisterMethod(TField,'SetAsCurrency',TypeInfo(_T294),[TypeInfo(Currency)], getVMTProcAddr('TField','SetAsCurrency',152));


//RegRegisterMethod(TField,'SetAsDateTime',TypeInfo(_T295),[TypeInfo(TDateTime)], pointer(156));
RegRegisterMethod(TField,'SetAsDateTime',TypeInfo(_T295),[TypeInfo(TDateTime)], getVMTProcAddr('TField','SetAsDateTime',156));


//RegRegisterMethod(TField,'SetAsSingle',TypeInfo(_T296),[TypeInfo(Single)], pointer(160));
RegRegisterMethod(TField,'SetAsSingle',TypeInfo(_T296),[TypeInfo(Single)], getVMTProcAddr('TField','SetAsSingle',160));


//RegRegisterMethod(TField,'SetAsFloat',TypeInfo(_T297),[TypeInfo(Double)], pointer(164));
RegRegisterMethod(TField,'SetAsFloat',TypeInfo(_T297),[TypeInfo(Double)], getVMTProcAddr('TField','SetAsFloat',164));


//RegRegisterMethod(TField,'SetAsExtended',TypeInfo(_T298),[TypeInfo(Extended)], pointer(168));
RegRegisterMethod(TField,'SetAsExtended',TypeInfo(_T298),[TypeInfo(Extended)], getVMTProcAddr('TField','SetAsExtended',168));


//RegRegisterMethod(TField,'SetAsInteger',TypeInfo(_T299),[TypeInfo(Longint)], pointer(172));
RegRegisterMethod(TField,'SetAsInteger',TypeInfo(_T299),[TypeInfo(Longint)], getVMTProcAddr('TField','SetAsInteger',172));


//RegRegisterMethod(TField,'SetAsLongWord',TypeInfo(_T301),[TypeInfo(LongWord)], pointer(180));
RegRegisterMethod(TField,'SetAsLongWord',TypeInfo(_T301),[TypeInfo(LongWord)], getVMTProcAddr('TField','SetAsLongWord',180));


//RegRegisterMethod(TField,'SetAsSQLTimeStamp',TypeInfo(_T302),[TypeInfo(TSQLTimeStamp)], pointer(184));
RegRegisterMethod(TField,'SetAsSQLTimeStamp',TypeInfo(_T302),[TypeInfo(TSQLTimeStamp)], getVMTProcAddr('TField','SetAsSQLTimeStamp',184));


//RegRegisterMethod(TField,'SetAsSQLTimeStampOffset',TypeInfo(_T303),[TypeInfo(TSQLTimeStampOffset)], pointer(188));
RegRegisterMethod(TField,'SetAsSQLTimeStampOffset',TypeInfo(_T303),[TypeInfo(TSQLTimeStampOffset)], getVMTProcAddr('TField','SetAsSQLTimeStampOffset',188));


//RegRegisterMethod(TField,'SetAsString',TypeInfo(_T304),[TypeInfo(string)], pointer(192));
RegRegisterMethod(TField,'SetAsString',TypeInfo(_T304),[TypeInfo(string)], getVMTProcAddr('TField','SetAsString',192));


//RegRegisterMethod(TField,'SetAsWideString',TypeInfo(_T305),[TypeInfo(string)], pointer(196));
RegRegisterMethod(TField,'SetAsWideString',TypeInfo(_T305),[TypeInfo(string)], getVMTProcAddr('TField','SetAsWideString',196));


//RegRegisterMethod(TField,'SetAsAnsiString',TypeInfo(_T306),[TypeInfo(AnsiString)], pointer(200));
RegRegisterMethod(TField,'SetAsAnsiString',TypeInfo(_T306),[TypeInfo(AnsiString)], getVMTProcAddr('TField','SetAsAnsiString',200));


//RegRegisterMethod(TField,'SetAsBytes',TypeInfo(_T307),[
//TypeInfo(TArray),
//TypeInfoUntyped,
//TypeInfoUntyped,
//TypeInfoUntyped], pointer(204));

//RegRegisterMethod(TField,'SetAsVariant',TypeInfo(_T308),[TypeInfo(Variant)], pointer(208));
RegRegisterMethod(TField,'SetAsVariant',TypeInfo(_T308),[TypeInfo(Variant)], getVMTProcAddr('TField','SetAsVariant',208));


//RegRegisterMethod(TField,'SetDataSet',TypeInfo(_T309),[TypeInfo(TDataSet)], pointer(212));
RegRegisterMethod(TField,'SetDataSet',TypeInfo(_T309),[TypeInfo(TDataSet)], getVMTProcAddr('TField','SetDataSet',212));


//RegRegisterMethod(TField,'SetFieldKind',TypeInfo(_T310),[TypeInfo(TFieldKind)], pointer(216));
RegRegisterMethod(TField,'SetFieldKind',TypeInfo(_T310),[TypeInfo(TFieldKind)], getVMTProcAddr('TField','SetFieldKind',216));


//RegRegisterMethod(TField,'SetParentField',TypeInfo(_T311),[TypeInfo(TObjectField)], pointer(220));
RegRegisterMethod(TField,'SetParentField',TypeInfo(_T311),[TypeInfo(TObjectField)], getVMTProcAddr('TField','SetParentField',220));


//RegRegisterMethod(TField,'SetSize',TypeInfo(_T312),[TypeInfo(Integer)], pointer(224));
RegRegisterMethod(TField,'SetSize',TypeInfo(_T312),[TypeInfo(Integer)], getVMTProcAddr('TField','SetSize',224));


//RegRegisterMethod(TField,'SetText',TypeInfo(_T313),[TypeInfo(string)], pointer(228));
RegRegisterMethod(TField,'SetText',TypeInfo(_T313),[TypeInfo(string)], getVMTProcAddr('TField','SetText',228));


//RegRegisterMethod(TField,'SetWideText',TypeInfo(_T314),[TypeInfo(string)], pointer(232));
RegRegisterMethod(TField,'SetWideText',TypeInfo(_T314),[TypeInfo(string)], getVMTProcAddr('TField','SetWideText',232));


//RegRegisterMethod(TField,'SetVarValue',TypeInfo(_T315),[TypeInfo(Variant)], pointer(236));
RegRegisterMethod(TField,'SetVarValue',TypeInfo(_T315),[TypeInfo(Variant)], getVMTProcAddr('TField','SetVarValue',236));


//RegRegisterMethod(TField,'SetAsGuid',TypeInfo(_T316),[TypeInfo(IDispatch)], pointer(240));
RegRegisterMethod(TField,'SetAsGuid',TypeInfo(_T316),[TypeInfo(IDispatch)], getVMTProcAddr('TField','SetAsGuid',240));


//RegRegisterMethod(TField,'AssignValue',TypeInfo(_T318),[TypeInfo(IDispatch)], pointer(248));
RegRegisterMethod(TField,'AssignValue',TypeInfo(_T318),[TypeInfo(IDispatch)], getVMTProcAddr('TField','AssignValue',248));


//RegRegisterMethod(TField,'Clear',TypeInfo(_T319),NoParams, pointer(252));
RegRegisterMethod(TField,'Clear',TypeInfo(_T319),NoParams, getVMTProcAddr('TField','Clear',252));


RegRegisterMethod(TField,'FocusControl',TypeInfo(_T320),NoParams,Addr(TField.FocusControl));

RegisterProc(TField,'IsBlob',mtClassMethod,TypeInfo(_T322),[TypeInfo(Boolean)], pointer(256),cRegister);

//RegRegisterMethod(TField,'IsValidChar',TypeInfo(_T323),[TypeInfo(Char),TypeInfo(Boolean)], pointer(260));
RegRegisterMethod(TField,'IsValidChar',TypeInfo(_T323),[TypeInfo(Char),TypeInfo(Boolean)], getVMTProcAddr('TField','IsValidChar',260));


RegRegisterMethod(TField,'RefreshLookupList',TypeInfo(_T324),NoParams,Addr(TField.RefreshLookupList));

RegRegisterMethod(TField,'SetData',TypeInfo(_T325),[
TypeInfo(TValueBuffer),
TypeInfo(Boolean)],Addr(__TField__SetData__Wrapper));

//RegRegisterMethod(TField,'SetFieldType',TypeInfo(_T326),[TypeInfo(TFieldType)], pointer(264));
RegRegisterMethod(TField,'SetFieldType',TypeInfo(_T326),[TypeInfo(TFieldType)], getVMTProcAddr('TField','SetFieldType',264));


//RegRegisterMethod(TField,'SetFieldProps',TypeInfo(_T327),[TypeInfo(TFieldDef)], pointer(268));
RegRegisterMethod(TField,'SetFieldProps',TypeInfo(_T327),[TypeInfo(TFieldDef)], getVMTProcAddr('TField','SetFieldProps',268));


//RegRegisterMethod(TField,'SetFieldDefProps',TypeInfo(_T328),[TypeInfo(TFieldDef)], pointer(272));
RegRegisterMethod(TField,'SetFieldDefProps',TypeInfo(_T328),[TypeInfo(TFieldDef)], getVMTProcAddr('TField','SetFieldDefProps',272));


RegRegisterMethod(TField,'Validate',TypeInfo(_T329),[
TypeInfo(TValueBuffer)],Addr(TField.Validate));

RegisterProc(TFieldDef,'Create',mtConstructor,TypeInfo(_T331),[
TypeInfo(TFieldDefs),
TypeInfo(string),
TypeInfo(TFieldType),
TypeInfo(Integer),
TypeInfo(Boolean),
TypeInfo(Integer)], pointer(4),cRegister);

RegRegisterMethod(TFieldDef,'AddChild',TypeInfo(_T332),[TypeInfo(TFieldDef)],Addr(TFieldDef.AddChild));

RegisterProc(TFieldDef,'CreateField',mtScriptMethod,TypeInfo(_T333),[
TypeInfo(TComponent),
TypeInfo(TObjectField),
TypeInfo(string),
TypeInfo(Boolean),TypeInfo(TField)],Addr(__TFieldDef__CreateField__Wrapper),cRegister);

RegRegisterMethod(TFieldDef,'HasChildDefs',TypeInfo(_T334),[TypeInfo(Boolean)],Addr(TFieldDef.HasChildDefs));

RegRegisterMethod(TFieldDefList,'FieldByName',TypeInfo(_T335),[
TypeInfo(string),TypeInfo(TFieldDef)],Addr(TFieldDefList.FieldByName));

RegRegisterMethod(TFieldDefList,'Find',TypeInfo(_T336),[
TypeInfo(string),TypeInfo(TFieldDef)],Addr(TFieldDefList.Find));

RegisterProc(TFieldDefs,'Create',mtConstructor,TypeInfo(_T338),[
TypeInfo(TPersistent)], pointer(4),cRegister);

RegRegisterMethod(TFieldDefs,'AddFieldDef',TypeInfo(_T339),[TypeInfo(TFieldDef)],Addr(TFieldDefs.AddFieldDef));

RegRegisterMethod(TFieldDefs,'Find',TypeInfo(_T340),[
TypeInfo(string),TypeInfo(TFieldDef)],Addr(TFieldDefs.Find));

RegRegisterMethod(TFieldDefs,'Update',TypeInfo(_T341),NoParams,Addr(TFieldDefs.Update));

RegisterProc(TFieldDefs,'Add',mtScriptMethod,TypeInfo(_T342),[
TypeInfo(string),
TypeInfo(TFieldType),
TypeInfo(Integer),
TypeInfo(Boolean)],Addr(__TFieldDefs__Add__Wrapper),cRegister);

RegRegisterMethod(TFieldList,'FieldByName',TypeInfo(_T343),[
TypeInfo(string),TypeInfo(TField)],Addr(TFieldList.FieldByName));

RegRegisterMethod(TFieldList,'Find',TypeInfo(_T344),[
TypeInfo(string),TypeInfo(TField)],Addr(TFieldList.Find));

RegisterProc(TFieldOptions,'Create',mtConstructor,TypeInfo(_T345),[
TypeInfo(TDataSet)],Addr(TFieldOptions.Create),cRegister);

RegisterProc(TFields,'Create',mtConstructor,TypeInfo(_T346),[
TypeInfo(TDataSet)], pointer(0),cRegister);

RegRegisterMethod(TFields,'Add',TypeInfo(_T347),[
TypeInfo(TField)],Addr(TFields.Add));

RegRegisterMethod(TFields,'CheckFieldName',TypeInfo(_T348),[
TypeInfo(string)],Addr(TFields.CheckFieldName));

RegRegisterMethod(TFields,'CheckFieldNames',TypeInfo(_T349),[
TypeInfo(string)],Addr(TFields.CheckFieldNames));

RegRegisterMethod(TFields,'Clear',TypeInfo(_T350),NoParams,Addr(TFields.Clear));

RegRegisterMethod(TFields,'ClearAutomatic',TypeInfo(_T351),NoParams,Addr(TFields.ClearAutomatic));

RegRegisterMethod(TFields,'FindField',TypeInfo(_T352),[
TypeInfo(string),TypeInfo(TField)],Addr(TFields.FindField));

RegRegisterMethod(TFields,'FieldByName',TypeInfo(_T353),[
TypeInfo(string),TypeInfo(TField)],Addr(TFields.FieldByName));

RegRegisterMethod(TFields,'FieldByNumber',TypeInfo(_T354),[
TypeInfo(Integer),TypeInfo(TField)],Addr(TFields.FieldByNumber));

RegRegisterMethod(TFields,'GetEnumerator',TypeInfo(_T355),[TypeInfo(TFieldsEnumerator)],Addr(TFields.GetEnumerator));

RegRegisterMethod(TFields,'GetFieldNames',TypeInfo(_T356),[
TypeInfo(TStrings)],Addr(TFields.GetFieldNames));

RegRegisterMethod(TFields,'IndexOf',TypeInfo(_T357),[
TypeInfo(TField),TypeInfo(Integer)],Addr(TFields.IndexOf));

RegRegisterMethod(TFields,'Remove',TypeInfo(_T358),[
TypeInfo(TField)],Addr(TFields.Remove));

RegisterProc(TFieldsEnumerator,'Create',mtConstructor,TypeInfo(_T359),[
TypeInfo(TFields)],Addr(TFieldsEnumerator.Create),cRegister);

RegRegisterMethod(TFieldsEnumerator,'GetCurrent',TypeInfo(_T360),[TypeInfo(TField)],Addr(TFieldsEnumerator.GetCurrent));

RegRegisterMethod(TFieldsEnumerator,'MoveNext',TypeInfo(_T361),[TypeInfo(Boolean)],Addr(TFieldsEnumerator.MoveNext));

//RegRegisterMethod(TFlatList,'FindItem',TypeInfo(_T362),[TypeInfo(string),TypeInfo(Boolean),TypeInfo(TObject)], pointer(0));
RegRegisterMethod(TFlatList,'FindItem',TypeInfo(_T362),[TypeInfo(string),TypeInfo(Boolean),TypeInfo(TObject)], getVMTProcAddr('TFlatList','FindItem',0));


//RegRegisterMethod(TFlatList,'GetUpdated',TypeInfo(_T363),[TypeInfo(Boolean)], pointer(4));
RegRegisterMethod(TFlatList,'GetUpdated',TypeInfo(_T363),[TypeInfo(Boolean)], getVMTProcAddr('TFlatList','GetUpdated',4));


//RegRegisterMethod(TFlatList,'UpdateList',TypeInfo(_T364),NoParams, pointer(8));
RegRegisterMethod(TFlatList,'UpdateList',TypeInfo(_T364),NoParams, getVMTProcAddr('TFlatList','UpdateList',8));


RegisterProc(TFlatList,'Create',mtConstructor,TypeInfo(_T365),[
TypeInfo(TDataSet)], pointer(12),cRegister);

RegRegisterMethod(TFlatList,'Update',TypeInfo(_T366),NoParams,Addr(TFlatList.Update));

RegisterProc(TIndexDef,'Create',mtConstructor,TypeInfo(_T367),[
TypeInfo(TIndexDefs),
TypeInfo(string),
TypeInfo(string),
TypeInfo(TIndexOptions)], pointer(0),cRegister);

RegisterProc(TIndexDefs,'Create',mtConstructor,TypeInfo(_T369),[
TypeInfo(TDataSet)], pointer(4),cRegister);

RegRegisterMethod(TIndexDefs,'AddIndexDef',TypeInfo(_T370),[TypeInfo(TIndexDef)],Addr(TIndexDefs.AddIndexDef));

RegRegisterMethod(TIndexDefs,'Find',TypeInfo(_T371),[
TypeInfo(string),TypeInfo(TIndexDef)],Addr(TIndexDefs.Find));

RegRegisterMethod(TIndexDefs,'Update',TypeInfo(_T372),NoParams,Addr(TIndexDefs.Update));

RegRegisterMethod(TIndexDefs,'FindIndexForFields',TypeInfo(_T373),[
TypeInfo(string),TypeInfo(TIndexDef)],Addr(TIndexDefs.FindIndexForFields));

RegRegisterMethod(TIndexDefs,'GetIndexForFields',TypeInfo(_T374),[
TypeInfo(string),
TypeInfo(Boolean),TypeInfo(TIndexDef)],Addr(TIndexDefs.GetIndexForFields));

RegRegisterMethod(TIndexDefs,'Add',TypeInfo(_T375),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(TIndexOptions)],Addr(TIndexDefs.Add));

//RegRegisterMethod(TIntegerField,'GetValue',TypeInfo(_T376),[TypeInfo(Longint),TypeInfo(Boolean)], pointer(276));
RegRegisterMethod(TIntegerField,'GetValue',TypeInfo(_T376),[TypeInfo(Longint),TypeInfo(Boolean)], getVMTProcAddr('TIntegerField','GetValue',276));


//RegRegisterMethod(TLongWordField,'GetValue',TypeInfo(_T377),[TypeInfo(LongWord),TypeInfo(Boolean)], pointer(276));
RegRegisterMethod(TLongWordField,'GetValue',TypeInfo(_T377),[TypeInfo(LongWord),TypeInfo(Boolean)], getVMTProcAddr('TLongWordField','GetValue',276));


RegisterProc(TLookupList,'Create',mtConstructor,TypeInfo(_T378),NoParams, pointer(0),cRegister);

//RegRegisterMethod(TLookupList,'Add',TypeInfo(_T379),[TypeInfo(Variant),TypeInfo(Variant)], pointer(4));
RegRegisterMethod(TLookupList,'Add',TypeInfo(_T379),[TypeInfo(Variant),TypeInfo(Variant)], getVMTProcAddr('TLookupList','Add',4));


//RegRegisterMethod(TLookupList,'Clear',TypeInfo(_T380),NoParams, pointer(8));
RegRegisterMethod(TLookupList,'Clear',TypeInfo(_T380),NoParams, getVMTProcAddr('TLookupList','Clear',8));


//RegRegisterMethod(TLookupList,'ValueOfKey',TypeInfo(_T381),[TypeInfo(Variant),TypeInfo(Variant)], pointer(12));
RegRegisterMethod(TLookupList,'ValueOfKey',TypeInfo(_T381),[TypeInfo(Variant),TypeInfo(Variant)], getVMTProcAddr('TLookupList','ValueOfKey',12));


RegisterProc(TMasterDataLink,'Create',mtConstructor,TypeInfo(_T382),[
TypeInfo(TDataSet)],Addr(TMasterDataLink.Create),cRegister);

//RegRegisterMethod(TObjectField,'GetFields',TypeInfo(_T383),[TypeInfo(TFields)], pointer(276));
RegRegisterMethod(TObjectField,'GetFields',TypeInfo(_T383),[TypeInfo(TFields)], getVMTProcAddr('TObjectField','GetFields',276));


//RegRegisterMethod(TObjectField,'GetFieldValue',TypeInfo(_T384),[TypeInfo(Integer),TypeInfo(Variant)], pointer(280));
RegRegisterMethod(TObjectField,'GetFieldValue',TypeInfo(_T384),[TypeInfo(Integer),TypeInfo(Variant)], getVMTProcAddr('TObjectField','GetFieldValue',280));


//RegRegisterMethod(TObjectField,'SetFieldValue',TypeInfo(_T385),[TypeInfo(Integer),TypeInfo(Variant)], pointer(284));
RegRegisterMethod(TObjectField,'SetFieldValue',TypeInfo(_T385),[TypeInfo(Integer),TypeInfo(Variant)], getVMTProcAddr('TObjectField','SetFieldValue',284));


RegisterProc(TParam,'Create',mtConstructor,TypeInfo(_T386),[
TypeInfo(TParams),
TypeInfo(TParamType)],Addr(TParam.Create),cRegister);

RegRegisterMethod(TParam,'AssignField',TypeInfo(_T387),[
TypeInfo(TField)],Addr(TParam.AssignField));

RegRegisterMethod(TParam,'AssignFieldValue',TypeInfo(_T388),[
TypeInfo(TField),
TypeInfo(Variant)],Addr(TParam.AssignFieldValue));

RegRegisterMethod(TParam,'Clear',TypeInfo(_T389),NoParams,Addr(TParam.Clear));

RegRegisterMethod(TParam,'GetData',TypeInfo(_T390),[
TypeInfo(TValueBuffer)],Addr(TParam.GetData));

RegRegisterMethod(TParam,'GetDataSize',TypeInfo(_T391),[TypeInfo(Integer)],Addr(TParam.GetDataSize));

RegRegisterMethod(TParam,'LoadFromFile',TypeInfo(_T392),[
TypeInfo(string),
TypeInfo(TBlobType)],Addr(TParam.LoadFromFile));

RegRegisterMethod(TParam,'LoadFromStream',TypeInfo(_T393),[
TypeInfo(TStream),
TypeInfo(TBlobType)],Addr(TParam.LoadFromStream));

RegRegisterMethod(TParam,'SetBlobData',TypeInfo(_T394),[
TypeInfo(TValueBuffer),
TypeInfo(Integer)],Addr(TParam.SetBlobData));

RegRegisterMethod(TParam,'SetDataSet',TypeInfo(_T395),[
TypeInfo(TDataSet),
TypeInfo(Boolean)],Addr(TParam.SetDataSet));

RegRegisterMethod(TParam,'SetParams',TypeInfo(_T397),[
TypeInfo(TParams),
TypeInfo(Boolean)],Addr(TParam.SetParams));

RegisterProc(TParam,'SetStream',mtScriptMethod,TypeInfo(_T398),[
TypeInfo(TStream),
TypeInfo(Boolean),
TypeInfo(Integer)],Addr(__TParam__SetStream__Wrapper),cRegister);

RegRegisterMethod(TParam,'SetData',TypeInfo(_T399),[
TypeInfo(TValueBuffer)],Addr(TParam.SetData));

RegisterProc(TParamObject,'Create',mtConstructor,TypeInfo(_T400),[
TypeInfo(TObject),
TypeInfo(TFieldType),
TypeInfo(Boolean)], pointer(0),cRegister);

RegisterProc(TParams,'Create',mtConstructor,TypeInfo(_T402),[
TypeInfo(TPersistent)],Addr(TParams.Create),cRegister);

RegRegisterMethod(TParams,'AddParameter',TypeInfo(_T403),[TypeInfo(TParam)],Addr(TParams.AddParameter));

RegRegisterMethod(TParams,'AssignValues',TypeInfo(_T404),[
TypeInfo(TParams)],Addr(TParams.AssignValues));

RegRegisterMethod(TParams,'AddParam',TypeInfo(_T405),[
TypeInfo(TParam)],Addr(TParams.AddParam));

RegRegisterMethod(TParams,'RemoveParam',TypeInfo(_T406),[
TypeInfo(TParam)],Addr(TParams.RemoveParam));

RegRegisterMethod(TParams,'CreateParam',TypeInfo(_T407),[
TypeInfo(TFieldType),
TypeInfo(string),
TypeInfo(TParamType),TypeInfo(TParam)],Addr(TParams.CreateParam));

//RegRegisterMethod(TParams,'GetParamList',TypeInfo(_T408),[
//TypeInfo(TList),
//TypeInfo(TList),
//TypeInfo(TList),
//TypeInfo(TList),
//TypeInfo(string)],Addr(TParams.GetParamList));

RegRegisterMethod(TParams,'IsEqual',TypeInfo(_T409),[
TypeInfo(TParams),TypeInfo(Boolean)],Addr(TParams.IsEqual));

RegRegisterMethod(TParams,'ParseSQL',TypeInfo(_T410),[
TypeInfo(string),
TypeInfo(Boolean),TypeInfo(string)],Addr(TParams.ParseSQL));

RegRegisterMethod(TParams,'ParamByName',TypeInfo(_T411),[
TypeInfo(string),TypeInfo(TParam)],Addr(TParams.ParamByName));

RegRegisterMethod(TParams,'FindParam',TypeInfo(_T412),[
TypeInfo(string),TypeInfo(TParam)],Addr(TParams.FindParam));

RegisterProc(TPlatformValueBuffer,'CreateValueBuffer',mtClassMethod,TypeInfo(_T413),[
TypeInfo(Integer),TypeInfo(TValueBuffer)],Addr(TPlatformValueBuffer.CreateValueBuffer),cRegister);

RegisterProc(TPlatformValueBuffer,'Free',mtClassMethod,TypeInfo(_T414),[
TypeInfo(TValueBuffer)],Addr(TPlatformValueBuffer.Free),cRegister);

//RegisterProc(TPlatformValueBuffer,'Copy',mtClassMethod,TypeInfo(_T415),[
//TypeInfo(TValueBuffer),
//TypeInfo(TArray),
//TypeInfo(TArray),
//TypeInfo(TArray),
//TypeInfo(TArray),
//TypeInfo(Integer),
//TypeInfo(Integer)],Addr(TPlatformValueBuffer.Copy),cRegister);

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'RegisterFields',mtProc,TypeInfo(_T1),[
ArrayInfo(TypeInfo(TFieldClass))],Addr(RegisterFields),cRegister)}

{RegRegisterMethod(TCheckConstraints,'GetCheckConstraintClass',TypeInfo(_T14),[TypeInfo(TCheckConstraintClass)], pointer(0))}

{RegRegisterMethod(TDataSet,'GetLookupListClass',TypeInfo(_T71),[
TypeInfo(TField),TypeInfo(TLookupListClass)], pointer(92))}

{RegRegisterMethod(TDataSet,'GetFieldClass',TypeInfo(_T119),[
TypeInfo(TFieldType),TypeInfo(TFieldClass)], pointer(300))}

{RegRegisterMethod(TDataSet,'SetOnFilterRecord',TypeInfo(_T149),[
TypeInfo(TFilterRecordEvent)], pointer(432))}

{RegRegisterMethod(TDataSet,'GetFieldDefsClass',TypeInfo(_T175),[TypeInfo(TFieldDefsClass)], pointer(596))}

{RegRegisterMethod(TDataSet,'GetFieldDefListClass',TypeInfo(_T176),[TypeInfo(TFieldDefListClass)], pointer(600))}

{RegRegisterMethod(TDataSet,'GetFieldsClass',TypeInfo(_T177),[TypeInfo(TFieldsClass)], pointer(604))}

{RegRegisterMethod(TDataSet,'GetFieldListClass',TypeInfo(_T178),[TypeInfo(TFieldListClass)], pointer(608))}

{RegRegisterMethod(TDataSet,'GetCheckConstraintsClass',TypeInfo(_T179),[TypeInfo(TCheckConstraintsClass)], pointer(612))}

{RegRegisterMethod(TDataSet,'GetAggFieldsClass',TypeInfo(_T180),[TypeInfo(TFieldsClass)], pointer(616))}

{RegRegisterMethod(TDataSet,'GetIndexDefsClass',TypeInfo(_T181),[TypeInfo(TIndexDefsClass)], pointer(620))}

{RegRegisterMethod(TDataSet,'GetParamsClass',TypeInfo(_T182),[TypeInfo(TParamsClass)], pointer(624))}

{RegRegisterMethod(TDataSet,'Translate',TypeInfo(_T234),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(Boolean),TypeInfo(Integer)], pointer(736))}

{RegRegisterMethod(TField,'GetAsLargeInt',TypeInfo(_T270),[TypeInfo(Largeint)], pointer(52))}

{RegRegisterMethod(TField,'SetAsLargeInt',TypeInfo(_T300),[
TypeInfo(Largeint)], pointer(176))}

{RegRegisterMethod(TField,'GetLookupListClass',TypeInfo(_T317),[TypeInfo(TLookupListClass)], pointer(244))}

{RegRegisterMethod(TFieldDef,'GetChildDefsClass',TypeInfo(_T330),[TypeInfo(TFieldDefsClass)], pointer(0))}

{RegRegisterMethod(TFieldDefs,'GetFieldDefClass',TypeInfo(_T337),[TypeInfo(TFieldDefClass)], pointer(0))}

{RegRegisterMethod(TIndexDefs,'GetIndexDefClass',TypeInfo(_T368),[TypeInfo(TIndexDefClass)], pointer(0))}

{RegRegisterMethod(TParam,'SetObjectValue',TypeInfo(_T396),[
TypeInfo(TObject),
TypeInfo(TFieldType),
TypeInfo(Boolean),TypeInfo(IParamObject)],Addr(TParam.SetObjectValue))}

{RegRegisterMethod(TParams,'GetParamClass',TypeInfo(_T401),[TypeInfo(TParamClass)], pointer(0))}

RegisterEvent(TypeInfo(TConnectChangeEvent),[
TypeInfo(TObject),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TDataChangeEvent),[
TypeInfo(TObject),
TypeInfo(TField)]);

RegisterEvent(TypeInfo(TDataOperation),NoParams);

RegisterEvent(TypeInfo(TDataSetErrorEvent),[
TypeInfo(TDataSet),
TypeInfo(EDatabaseError),
TypeInfo(TDataAction)]);

RegisterEvent(TypeInfo(TDataSetNotifyEvent),[
TypeInfo(TDataSet)]);

RegisterEvent(TypeInfo(TDefUpdateMethod),NoParams);

RegisterEvent(TypeInfo(TFieldGetTextEvent),[
TypeInfo(TField),
TypeInfo(string),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TFieldNotifyEvent),[
TypeInfo(TField)]);

RegisterEvent(TypeInfo(TFieldSetTextEvent),[
TypeInfo(TField),
TypeInfo(string)]);

RegisterEvent(TypeInfo(TFilterRecordEvent),[
TypeInfo(TDataSet),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TUpdateErrorEvent),[
TypeInfo(TDataSet),
TypeInfo(EDatabaseError),
TypeInfo(TUpdateKind),
TypeInfo(TUpdateAction)]);

RegisterEvent(TypeInfo(TUpdateRecordEvent),[
TypeInfo(TDataSet),
TypeInfo(TUpdateKind),
TypeInfo(TUpdateAction)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
