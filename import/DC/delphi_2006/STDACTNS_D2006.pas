{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit STDACTNS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  SysUtils,
  Classes,
  ActnList,
  StdCtrls,
  Forms,
  Dialogs,
  StdActns;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure  of object;

_T1 = _T0;

{_T2 = function : TCommonDialogClass of object;}

_T3 = _T0;

_T4 = function (p0 : TObject): TCustomEdit of object;

_T5 = procedure (p0 : TObject) of object;

_T6 = function (p0 : TObject): TForm of object;

function __DC__GetTBrowseForFolder__Folder(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBrowseForFolder(Instance).Folder;
end;

procedure __DC__SetTBrowseForFolder__Folder(Instance : TObject; Params : PVariantArgList);
begin
TBrowseForFolder(Instance).Folder:=OleVariant(Params^[0]);
end;

function __DC__GetTCommonDialogAction__ExecuteResult(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCommonDialogAction(Instance).ExecuteResult;
end;

function __DC__GetTEditAction__Control(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TEditAction(Instance).Control);
end;

procedure __DC__SetTEditAction__Control(Instance : TObject; Params : PVariantArgList);
begin
TEditAction(Instance).Control:=TCustomEdit(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTWindowAction__Form(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TWindowAction(Instance).Form);
end;

procedure __DC__SetTWindowAction__Form(Instance : TObject; Params : PVariantArgList);
begin
TWindowAction(Instance).Form:=TCustomForm(VarToObject(OleVariant(Params^[0])));
end;

procedure __RegisterProps;
begin
RegisterProperty(TBrowseForFolder,'Folder',__DC__GetTBrowseForFolder__Folder,__DC__SetTBrowseForFolder__Folder);
RegisterProperty(TCommonDialogAction,'ExecuteResult',__DC__GetTCommonDialogAction__ExecuteResult,nil);
RegisterProperty(TEditAction,'Control',__DC__GetTEditAction__Control,__DC__SetTEditAction__Control);
RegisterProperty(TWindowAction,'Form',__DC__GetTWindowAction__Form,__DC__SetTWindowAction__Form);
end;

const __ConstNames0 : array[0..15] of string = (
'bifBrowseForComputer'
,'bifBrowseForPrinter'
,'bifBrowseIncludeFiles'
,'bifBrowseIncludeURLS'
,'bifDontGoBelowDomain'
,'bifEditBox'
,'bifNewDialogStyle'
,'bifNoNewFolderButton'
,'bifNoTranslateTargets'
,'bifReturnFSAncestors'
,'bifReturnOnlyFSDirs'
,'bifShareable'
,'bifStatusText'
,'bifUAHint'
,'bifUseNewUI'
,'bifValidate'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,bifBrowseForComputer));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,bifBrowseForPrinter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,bifBrowseIncludeFiles));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,bifBrowseIncludeURLS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,bifDontGoBelowDomain));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,bifEditBox));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,bifNewDialogStyle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,bifNoNewFolderButton));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,bifNoTranslateTargets));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,bifReturnFSAncestors));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,bifReturnOnlyFSDirs));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,bifShareable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,bifStatusText));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,bifUAHint));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,bifUseNewUI));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,bifValidate));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..36] of TClass = (
TBrowseForFolder,
TColorSelect,
TCommonDialogAction,
TEditAction,
TEditCopy,
TEditCut,
TEditDelete,
TEditPaste,
TEditSelectAll,
TEditUndo,
TFileAction,
TFileExit,
TFileOpen,
TFileOpenWith,
TFilePageSetup,
TFilePrintSetup,
TFileSaveAs,
TFontEdit,
THelpAction,
THelpContents,
THelpContextAction,
THelpOnHelp,
THelpTopicSearch,
THintAction,
TPrintDlg,
TSearchAction,
TSearchFind,
TSearchFindFirst,
TSearchFindNext,
TSearchReplace,
TWindowAction,
TWindowArrange,
TWindowCascade,
TWindowClose,
TWindowMinimizeAll,
TWindowTileHorizontal,
TWindowTileVertical
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TCommonDialogAction,'DoAccept',TypeInfo(_T0),NoParams, pointer(84));
RegRegisterMethod(TCommonDialogAction,'DoAccept',TypeInfo(_T0),NoParams,  getVMTProcAddr('TCommonDialogAction','DoAccept',84));


//RegRegisterMethod(TCommonDialogAction,'DoCancel',TypeInfo(_T1),NoParams, pointer(88));
RegRegisterMethod(TCommonDialogAction,'DoCancel',TypeInfo(_T1),NoParams,  getVMTProcAddr('TCommonDialogAction','DoCancel',88));


//RegRegisterMethod(TCommonDialogAction,'SetupDialog',TypeInfo(_T3),NoParams, pointer(96));
RegRegisterMethod(TCommonDialogAction,'SetupDialog',TypeInfo(_T3),NoParams,  getVMTProcAddr('TCommonDialogAction','SetupDialog',96));


//RegRegisterMethod(TEditAction,'GetControl',TypeInfo(_T4),[TypeInfo(TObject),TypeInfo(TCustomEdit)], pointer(84));
RegRegisterMethod(TEditAction,'GetControl',TypeInfo(_T4),[TypeInfo(TObject),TypeInfo(TCustomEdit)],  getVMTProcAddr('TEditAction','GetControl',84));


//RegRegisterMethod(TSearchAction,'Search',TypeInfo(_T5),[TypeInfo(TObject)], pointer(100));
RegRegisterMethod(TSearchAction,'Search',TypeInfo(_T5),[TypeInfo(TObject)],  getVMTProcAddr('TSearchAction','Search',100));


//RegRegisterMethod(TWindowAction,'GetForm',TypeInfo(_T6),[TypeInfo(TObject),TypeInfo(TForm)], pointer(84));
RegRegisterMethod(TWindowAction,'GetForm',TypeInfo(_T6),[TypeInfo(TObject),TypeInfo(TForm)],  getVMTProcAddr('TWindowAction','GetForm',84));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
{RegRegisterMethod(TCommonDialogAction,'GetDialogClass',TypeInfo(_T2),[TypeInfo(TCommonDialogClass)], pointer(92))}

RegisterEvent(TypeInfo(TBrowseForFolderCallbackEvent),[
TypeInfo(TBrowseForFolder),
TypeInfo(HWND),
TypeInfo(UINT),
TypeInfo(lParam),
TypeInfo(lParam),
TypeInfo(Integer)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
