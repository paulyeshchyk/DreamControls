{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit WEBSCRIPT_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Classes,
  Contnrs,
  HTTPApp,
  HTTPProd,
  WebSnapObjs,
  SiteComp,
  WebCntxt,
  WebScript;
function ConvertTLineNumbersToVariant(var R : TLineNumbers) : OleVariant;
function ConvertVariantToTLineNumbers(const V : OleVariant) : TLineNumbers;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TLineNumbers__Wrapper = class(TDCRecordWrapper)
private
fR : TLineNumbers;
public
function GetRecordPtr : pointer; override;
published
procedure setSourceStartLine(const val : Integer);
function getSourceStartLine : Integer;
property SourceStartLine : Integer read getSourceStartLine write setSourceStartLine;
procedure setSourceLineCount(const val : Integer);
function getSourceLineCount : Integer;
property SourceLineCount : Integer read getSourceLineCount write setSourceLineCount;
procedure setDestStartLine(const val : Integer);
function getDestStartLine : Integer;
property DestStartLine : Integer read getDestStartLine write setDestStartLine;
procedure setDestLineCount(const val : Integer);
function getDestLineCount : Integer;
property DestLineCount : Integer read getDestLineCount write setDestLineCount;
procedure setScriptIncludeFile(const val : TScriptIncludeFile);
function getScriptIncludeFile : TScriptIncludeFile;
property ScriptIncludeFile : TScriptIncludeFile read getScriptIncludeFile write setScriptIncludeFile;
end;
type
_T0 = procedure (p0 : TStrings) of object;

_T1 = function (const p0 : string): Boolean of object;

_T2 = procedure (const p0 : string) of object;

{_T3 = function (p0 : TObject): IInterface of object;}

_T4 = procedure (p0 : TAbstractScriptObjectFactory) of object;

_T5 = function : Integer of object;

_T6 = function (p0 : Integer): TAbstractScriptObjectFactory of object;

_T7 = function : TObjectList of object;

_T8 = function : TAbstractScriptEngine of object;

{_T9 = function (p0 : TObject;
p1 : TClass): IInterface of object;}

_T10 = procedure (p0 : TScriptGlobalObjects) of object;

{_T11 = function (p0 : TGlobalScriptVariables;
p1 : IScriptProducer): IInterface of object;}

{_T12 = function (p0 : TGlobalScriptVariables;
p1 : IScriptContext): IInterface of object;}

{_T13 = procedure (p0 : IScriptContext) of object;}

_T14 = procedure (p0 : THTMLItems) of object;

{_T15 = procedure (p0 : Integer;
p1 : PChar;
p2 : Integer) of object;}

_T16 = procedure (p0 : TScriptProducer) of object;

_T17 = procedure  of object;

_T18 = function (p0 : THTMLItem): string of object;

_T19 = function (p0 : Integer): THTMLItem of object;

{_T20 = function : PLineNumbers of object;}

_T21 = function (p0 : Integer;
var p1 : string): Integer of object;

_T22 = _T2;

_T23 = _T17;

_T24 = function (const p0 : string): TAbstractScriptEngine of object;

_T25 = procedure (p0 : TAbstractScriptObjectFactory;
const p1 : string) of object;

_T26 = procedure (p0 : TAbstractScriptEngine) of object;

_T27 = _T26;

_T28 = _T0;

_T29 = procedure (p0 : Exception) of object;

_T30 = _T17;

_T31 = _T16;

_T32 = procedure (p0 : TStream;
p1 : Boolean) of object;

_T33 = _T2;

_T34 = _T8;

{_T35 = procedure (p0 : IScriptProducer) of object;}

_T36 = _T5;

_T37 = function (p0 : Integer): string of object;

{_T38 = procedure (const p0 : string;
p1 : IUnknown) of object;}

{_T39 = function (const p0 : string): IUnknown of object;}

_T40 = procedure (p0 : TScriptProducer;
p1 : TIncludeType;
const p2 : string) of object;

_T41 = _T17;

_T42 = _T16;

_T43 = function (p0 : Integer): TScriptIncludeFile of object;

_T44 = procedure (p0 : TScriptItems;
p1 : TScriptIncludeFile) of object;

_T45 = function : string of object;

_T46 = procedure (p0 : TScriptItems) of object;

_T47 = _T16;

_T48 = function (p0 : Integer): TScriptItem of object;

_T49 = _T17;

{_T50 = function (p0 : TGlobalScriptVariables;
p1 : IScriptContext): IInterface of object;}

_T51 = function (p0 : TScriptFile): string of object;

{_T52 = function (const p0 : IUnknown): HRESULT of object;}

_T53 = function (const p0 : string): TComponent of object;

_T54 = _T53;

_T55 = procedure (const p0 : string;
p1 : TWebModuleContext) of object;

_T56 = function : Boolean of object;

function __TLineNumbers__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TLineNumbers__Wrapper.setSourceStartLine(const val : Integer);
begin
TLineNumbers(GetRecordPtr^).SourceStartLine := val;
end;
function __TLineNumbers__Wrapper.getSourceStartLine : Integer;
begin
result := TLineNumbers(GetRecordPtr^).SourceStartLine;
end;
procedure __TLineNumbers__Wrapper.setSourceLineCount(const val : Integer);
begin
TLineNumbers(GetRecordPtr^).SourceLineCount := val;
end;
function __TLineNumbers__Wrapper.getSourceLineCount : Integer;
begin
result := TLineNumbers(GetRecordPtr^).SourceLineCount;
end;
procedure __TLineNumbers__Wrapper.setDestStartLine(const val : Integer);
begin
TLineNumbers(GetRecordPtr^).DestStartLine := val;
end;
function __TLineNumbers__Wrapper.getDestStartLine : Integer;
begin
result := TLineNumbers(GetRecordPtr^).DestStartLine;
end;
procedure __TLineNumbers__Wrapper.setDestLineCount(const val : Integer);
begin
TLineNumbers(GetRecordPtr^).DestLineCount := val;
end;
function __TLineNumbers__Wrapper.getDestLineCount : Integer;
begin
result := TLineNumbers(GetRecordPtr^).DestLineCount;
end;
procedure __TLineNumbers__Wrapper.setScriptIncludeFile(const val : TScriptIncludeFile);
begin
TLineNumbers(GetRecordPtr^).ScriptIncludeFile := val;
end;
function __TLineNumbers__Wrapper.getScriptIncludeFile : TScriptIncludeFile;
begin
result := TLineNumbers(GetRecordPtr^).ScriptIncludeFile;
end;
function _TLineNumbers_ : IDispatch;
begin
  result := __TLineNumbers__Wrapper.Create;
end;

type __TLineNumbers__Wrapper__ = class(__TLineNumbers__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TLineNumbers__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTLineNumbersToVariant(var R : TLineNumbers) : OleVariant;
var
__rw : __TLineNumbers__Wrapper__;
begin
__rw := __TLineNumbers__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTLineNumbers(const V : OleVariant) : TLineNumbers;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TLineNumbers((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTAbstractScriptEngine__Name(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TAbstractScriptEngine(Instance).Name;
end;

function __DC__GetTAbstractScriptEngine__ScriptObjectFactories(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TAbstractScriptEngine(Instance).ScriptObjectFactories);
end;

function __DC__GetTAbstractScriptObjectFactories__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TAbstractScriptObjectFactories(Instance).Count;
end;

function __DC__GetTAbstractScriptObjectFactories__Factories(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TAbstractScriptObjectFactories(Instance).Factories[OleVariant(Params^[0])]);
end;

function __DC__GetTAbstractScriptObjectFactories__ObjectList(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TAbstractScriptObjectFactories(Instance).ObjectList);
end;

function __DC__GetTHTMLItem__Offset(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := THTMLItem(Instance).Offset;
end;

function __DC__GetTHTMLItem__Ident(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := THTMLItem(Instance).Ident;
end;

function __DC__GetTHTMLItem__HTML(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := THTMLItem(Instance).HTML;
end;

function __DC__GetTHTMLItem__TagToken(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := THTMLItem(Instance).TagToken;
end;

procedure __DC__SetTHTMLItem__TagToken(Instance : TObject; Params : PVariantArgList);
begin
THTMLItem(Instance).TagToken:=OleVariant(Params^[0]);
end;

function __DC__GetTHTMLItem__Length(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := THTMLItem(Instance).Length;
end;

function __DC__GetTHTMLItems__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(THTMLItems(Instance).Items[OleVariant(Params^[0])]);
end;

function __DC__GetTLineNumberMap__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TLineNumberMap(Instance).Count;
end;

function __DC__GetTScriptEnginesList__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScriptEnginesList(Instance).Count;
end;

function __DC__GetTScriptEnginesList__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TScriptEnginesList(Instance).Items[OleVariant(Params^[0])]);
end;

function __DC__GetTScriptFile__Script(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScriptFile(Instance).Script;
end;

function __DC__GetTScriptFile__Source(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScriptFile(Instance).Source;
end;

function __DC__GetTScriptFile__ShortName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScriptFile(Instance).ShortName;
end;

function __DC__GetTScriptFile__LongName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScriptFile(Instance).LongName;
end;

function __DC__GetTScriptFile__ApplicationName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScriptFile(Instance).ApplicationName;
end;

function __DC__GetTScriptGlobalObjects__NamedItemCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScriptGlobalObjects(Instance).NamedItemCount;
end;

function __DC__GetTScriptGlobalObjects__NamedItemName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScriptGlobalObjects(Instance).NamedItemName[OleVariant(Params^[0])];
end;

function __DC__GetTScriptGlobalObjects__ScriptEngine(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TScriptGlobalObjects(Instance).ScriptEngine);
end;

function __DC__GetTScriptIncludeFiles__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TScriptIncludeFiles(Instance).Items[OleVariant(Params^[0])]);
end;

function __DC__GetTScriptItem__Script(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScriptItem(Instance).Script;
end;

function __DC__GetTScriptItems__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TScriptItems(Instance).Items[OleVariant(Params^[0])]);
end;

function __DC__GetTScriptObjectFactories__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScriptObjectFactories(Instance).Count;
end;

function __DC__GetTScriptObjectFactories__Factories(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TScriptObjectFactories(Instance).Factories[OleVariant(Params^[0])]);
end;

function __DC__GetTVariableLookup__Ident(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TVariableLookup(Instance).Ident;
end;

procedure __DC__SetTVariableLookup__Ident(Instance : TObject; Params : PVariantArgList);
begin
TVariableLookup(Instance).Ident:=OleVariant(Params^[0]);
end;

function __DC__GetTVariableLookup__Obj(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TVariableLookup(Instance).Obj);
end;

procedure __RegisterProps;
begin
RegisterProperty(TAbstractScriptEngine,'Name',__DC__GetTAbstractScriptEngine__Name,nil);
RegisterProperty(TAbstractScriptEngine,'ScriptObjectFactories',__DC__GetTAbstractScriptEngine__ScriptObjectFactories,nil);
RegisterProperty(TAbstractScriptObjectFactories,'Count',__DC__GetTAbstractScriptObjectFactories__Count,nil);
RegisterIndexedProperty(TAbstractScriptObjectFactories,'Factories',1,True,__DC__GetTAbstractScriptObjectFactories__Factories,nil);
RegisterProperty(TAbstractScriptObjectFactories,'ObjectList',__DC__GetTAbstractScriptObjectFactories__ObjectList,nil);
RegisterProperty(THTMLItem,'Offset',__DC__GetTHTMLItem__Offset,nil);
RegisterProperty(THTMLItem,'Ident',__DC__GetTHTMLItem__Ident,nil);
RegisterProperty(THTMLItem,'HTML',__DC__GetTHTMLItem__HTML,nil);
RegisterProperty(THTMLItem,'TagToken',__DC__GetTHTMLItem__TagToken,__DC__SetTHTMLItem__TagToken);
RegisterProperty(THTMLItem,'Length',__DC__GetTHTMLItem__Length,nil);
RegisterIndexedProperty(THTMLItems,'Items',1,True,__DC__GetTHTMLItems__Items,nil);
RegisterProperty(TLineNumberMap,'Count',__DC__GetTLineNumberMap__Count,nil);
RegisterProperty(TScriptEnginesList,'Count',__DC__GetTScriptEnginesList__Count,nil);
RegisterIndexedProperty(TScriptEnginesList,'Items',1,False,__DC__GetTScriptEnginesList__Items,nil);
RegisterProperty(TScriptFile,'Script',__DC__GetTScriptFile__Script,nil);
RegisterProperty(TScriptFile,'Source',__DC__GetTScriptFile__Source,nil);
RegisterProperty(TScriptFile,'ShortName',__DC__GetTScriptFile__ShortName,nil);
RegisterProperty(TScriptFile,'LongName',__DC__GetTScriptFile__LongName,nil);
RegisterProperty(TScriptFile,'ApplicationName',__DC__GetTScriptFile__ApplicationName,nil);
RegisterProperty(TScriptGlobalObjects,'NamedItemCount',__DC__GetTScriptGlobalObjects__NamedItemCount,nil);
RegisterIndexedProperty(TScriptGlobalObjects,'NamedItemName',1,False,__DC__GetTScriptGlobalObjects__NamedItemName,nil);
RegisterProperty(TScriptGlobalObjects,'ScriptEngine',__DC__GetTScriptGlobalObjects__ScriptEngine,nil);
RegisterIndexedProperty(TScriptIncludeFiles,'Items',1,True,__DC__GetTScriptIncludeFiles__Items,nil);
RegisterProperty(TScriptItem,'Script',__DC__GetTScriptItem__Script,nil);
RegisterIndexedProperty(TScriptItems,'Items',1,True,__DC__GetTScriptItems__Items,nil);
RegisterProperty(TScriptObjectFactories,'Count',__DC__GetTScriptObjectFactories__Count,nil);
RegisterIndexedProperty(TScriptObjectFactories,'Factories',1,True,__DC__GetTScriptObjectFactories__Factories,nil);
RegisterProperty(TVariableLookup,'Ident',__DC__GetTVariableLookup__Ident,__DC__SetTVariableLookup__Ident);
RegisterProperty(TVariableLookup,'Obj',__DC__GetTVariableLookup__Obj,nil);
end;

const __ConstNames0 : array[0..11] of string = (
'incFile'
,'incPage'
,'svPage'
,'svPages'
,'svModules'
,'svApplication'
,'svSession'
,'svEndUser'
,'svResponse'
,'svRequest'
,'svHTMLItems'
,'svProducer'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,incFile));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,incPage));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,svPage));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,svPages));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,svModules));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,svApplication));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,svSession));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,svEndUser));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,svResponse));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,svRequest));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,svHTMLItems));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,svProducer));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..22] of TClass = (
ERecursiveIncludeFile,
EScriptEvalError,
TAbstractScriptEngine,
TAbstractScriptObjectFactories,
TAbstractScriptObjectFactory,
TCurrentWebPageInfo,
THTMLItem,
THTMLItems,
TLineNumberMap,
TScriptCodeItem,
TScriptEnginesList,
TScriptError,
TScriptErrors,
TScriptFile,
TScriptGlobalObjects,
TScriptIncludeFile,
TScriptIncludeFiles,
TScriptIncludeItem,
TScriptItem,
TScriptItems,
TScriptObjectFactories,
TScriptProducer,
TVariableLookup
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'TLineNumbers'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TLineNumbers_)));
//RegRegisterMethod(TAbstractScriptEngine,'ListLanguageNames',TypeInfo(_T0),[TypeInfo(TStrings)], pointer(0));
RegRegisterMethod(TAbstractScriptEngine,'ListLanguageNames',TypeInfo(_T0),[TypeInfo(TStrings)],  getVMTProcAddr('TAbstractScriptEngine','ListLanguageNames',0));


//RegRegisterMethod(TAbstractScriptEngine,'SupportsLanguage',TypeInfo(_T1),[TypeInfo(string),TypeInfo(Boolean)], pointer(4));
RegRegisterMethod(TAbstractScriptEngine,'SupportsLanguage',TypeInfo(_T1),[TypeInfo(string),TypeInfo(Boolean)],  getVMTProcAddr('TAbstractScriptEngine','SupportsLanguage',4));


RegisterProc(TAbstractScriptEngine,'Create',mtConstructor,TypeInfo(_T2),[
TypeInfo(string)],Addr(TAbstractScriptEngine.Create),cRegister);

RegRegisterMethod(TAbstractScriptEngine,'AddObjectFactory',TypeInfo(_T4),[
TypeInfo(TAbstractScriptObjectFactory)],Addr(TAbstractScriptEngine.AddObjectFactory));

//RegRegisterMethod(TAbstractScriptObjectFactories,'GetCount',TypeInfo(_T5),[TypeInfo(Integer)], pointer(0));
RegRegisterMethod(TAbstractScriptObjectFactories,'GetCount',TypeInfo(_T5),[TypeInfo(Integer)],  getVMTProcAddr('TAbstractScriptObjectFactories','GetCount',0));


//RegRegisterMethod(TAbstractScriptObjectFactories,'GetFactory',TypeInfo(_T6),[TypeInfo(Integer),TypeInfo(TAbstractScriptObjectFactory)], pointer(4));
RegRegisterMethod(TAbstractScriptObjectFactories,'GetFactory',TypeInfo(_T6),[TypeInfo(Integer),TypeInfo(TAbstractScriptObjectFactory)],  getVMTProcAddr('TAbstractScriptObjectFactories','GetFactory',4));


//RegRegisterMethod(TAbstractScriptObjectFactories,'GetObjectList',TypeInfo(_T7),[TypeInfo(TObjectList)], pointer(8));
RegRegisterMethod(TAbstractScriptObjectFactories,'GetObjectList',TypeInfo(_T7),[TypeInfo(TObjectList)],  getVMTProcAddr('TAbstractScriptObjectFactories','GetObjectList',8));


//RegRegisterMethod(TAbstractScriptObjectFactory,'GetScriptEngine',TypeInfo(_T8),[TypeInfo(TAbstractScriptEngine)], pointer(0));
RegRegisterMethod(TAbstractScriptObjectFactory,'GetScriptEngine',TypeInfo(_T8),[TypeInfo(TAbstractScriptEngine)],  getVMTProcAddr('TAbstractScriptObjectFactory','GetScriptEngine',0));


//RegRegisterMethod(TAbstractScriptObjectFactory,'AddGlobalObjects',TypeInfo(_T10),[TypeInfo(TScriptGlobalObjects)], pointer(8));
RegRegisterMethod(TAbstractScriptObjectFactory,'AddGlobalObjects',TypeInfo(_T10),[TypeInfo(TScriptGlobalObjects)],  getVMTProcAddr('TAbstractScriptObjectFactory','AddGlobalObjects',8));


RegisterProc(THTMLItem,'Create',mtConstructor,TypeInfo(_T14),[
TypeInfo(THTMLItems)],Addr(THTMLItem.Create),cRegister);

RegisterProc(THTMLItems,'Create',mtConstructor,TypeInfo(_T16),[
TypeInfo(TScriptProducer)],Addr(THTMLItems.Create),cRegister);

RegRegisterMethod(THTMLItems,'Prepare',TypeInfo(_T17),NoParams,Addr(THTMLItems.Prepare));

RegRegisterMethod(THTMLItems,'MakeIdentifier',TypeInfo(_T18),[
TypeInfo(THTMLItem),TypeInfo(string)],Addr(THTMLItems.MakeIdentifier));

RegRegisterMethod(THTMLItems,'GetHTMLItem',TypeInfo(_T19),[
TypeInfo(Integer),TypeInfo(THTMLItem)],Addr(THTMLItems.GetHTMLItem));

RegRegisterMethod(TLineNumberMap,'DestLineToSourceLine',TypeInfo(_T21),[
TypeInfo(Integer),
TypeInfo(string),TypeInfo(Integer)],Addr(TLineNumberMap.DestLineToSourceLine));

RegRegisterMethod(TScriptCodeItem,'AssignString',TypeInfo(_T22),[
TypeInfo(string)],Addr(TScriptCodeItem.AssignString));

RegisterProc(TScriptEnginesList,'Create',mtConstructor,TypeInfo(_T23),NoParams,Addr(TScriptEnginesList.Create),cRegister);

RegRegisterMethod(TScriptEnginesList,'Find',TypeInfo(_T24),[
TypeInfo(string),TypeInfo(TAbstractScriptEngine)],Addr(TScriptEnginesList.Find));

RegRegisterMethod(TScriptEnginesList,'AddObjectFactory',TypeInfo(_T25),[
TypeInfo(TAbstractScriptObjectFactory),
TypeInfo(string)],Addr(TScriptEnginesList.AddObjectFactory));

RegRegisterMethod(TScriptEnginesList,'AddEngine',TypeInfo(_T26),[
TypeInfo(TAbstractScriptEngine)],Addr(TScriptEnginesList.AddEngine));

RegRegisterMethod(TScriptEnginesList,'RemoveEngine',TypeInfo(_T27),[
TypeInfo(TAbstractScriptEngine)],Addr(TScriptEnginesList.RemoveEngine));

RegRegisterMethod(TScriptEnginesList,'ListLanguageNames',TypeInfo(_T28),[
TypeInfo(TStrings)],Addr(TScriptEnginesList.ListLanguageNames));

RegisterProc(TScriptError,'Create',mtConstructor,TypeInfo(_T29),[
TypeInfo(Exception)],Addr(TScriptError.Create),cRegister);

RegisterProc(TScriptErrors,'Create',mtConstructor,TypeInfo(_T30),NoParams,Addr(TScriptErrors.Create),cRegister);

RegisterProc(TScriptFile,'Create',mtConstructor,TypeInfo(_T31),[
TypeInfo(TScriptProducer)],Addr(TScriptFile.Create),cRegister);

RegRegisterMethod(TScriptFile,'ParseStream',TypeInfo(_T32),[
TypeInfo(TStream),
TypeInfo(Boolean)],Addr(TScriptFile.ParseStream));

RegRegisterMethod(TScriptFile,'ParseString',TypeInfo(_T33),[
TypeInfo(string)],Addr(TScriptFile.ParseString));

//RegRegisterMethod(TScriptGlobalObjects,'GetScriptEngine',TypeInfo(_T34),[TypeInfo(TAbstractScriptEngine)], pointer(0));
RegRegisterMethod(TScriptGlobalObjects,'GetScriptEngine',TypeInfo(_T34),[TypeInfo(TAbstractScriptEngine)],  getVMTProcAddr('TScriptGlobalObjects','GetScriptEngine',0));


RegRegisterMethod(TScriptGlobalObjects,'GetNamedItemCount',TypeInfo(_T36),[TypeInfo(Integer)],Addr(TScriptGlobalObjects.GetNamedItemCount));

RegRegisterMethod(TScriptGlobalObjects,'GetNamedItemName',TypeInfo(_T37),[
TypeInfo(Integer),TypeInfo(string)],Addr(TScriptGlobalObjects.GetNamedItemName));

RegisterProc(TScriptIncludeFile,'Create',mtConstructor,TypeInfo(_T40),[
TypeInfo(TScriptProducer),
TypeInfo(TIncludeType),
TypeInfo(string)],Addr(TScriptIncludeFile.Create),cRegister);

RegRegisterMethod(TScriptIncludeFile,'LoadFile',TypeInfo(_T41),NoParams,Addr(TScriptIncludeFile.LoadFile));

RegisterProc(TScriptIncludeFiles,'Create',mtConstructor,TypeInfo(_T42),[
TypeInfo(TScriptProducer)],Addr(TScriptIncludeFiles.Create),cRegister);

RegRegisterMethod(TScriptIncludeFiles,'GetScriptIncludeFile',TypeInfo(_T43),[
TypeInfo(Integer),TypeInfo(TScriptIncludeFile)],Addr(TScriptIncludeFiles.GetScriptIncludeFile));

RegisterProc(TScriptIncludeItem,'Create',mtConstructor,TypeInfo(_T44),[
TypeInfo(TScriptItems),
TypeInfo(TScriptIncludeFile)],Addr(TScriptIncludeItem.Create),cRegister);

//RegRegisterMethod(TScriptItem,'GetScript',TypeInfo(_T45),[TypeInfo(string)], pointer(0));
RegRegisterMethod(TScriptItem,'GetScript',TypeInfo(_T45),[TypeInfo(string)],  getVMTProcAddr('TScriptItem','GetScript',0));


RegisterProc(TScriptItem,'Create',mtConstructor,TypeInfo(_T46),[
TypeInfo(TScriptItems)],Addr(TScriptItem.Create),cRegister);

RegisterProc(TScriptItems,'Create',mtConstructor,TypeInfo(_T47),[
TypeInfo(TScriptProducer)],Addr(TScriptItems.Create),cRegister);

RegRegisterMethod(TScriptItems,'GetScriptItem',TypeInfo(_T48),[
TypeInfo(Integer),TypeInfo(TScriptItem)],Addr(TScriptItems.GetScriptItem));

RegisterProc(TScriptObjectFactories,'Create',mtConstructor,TypeInfo(_T49),NoParams,Addr(TScriptObjectFactories.Create),cRegister);

//RegRegisterMethod(TScriptProducer,'EvaluateExpression',TypeInfo(_T51),[TypeInfo(TScriptFile),TypeInfo(string)], pointer(4));
RegRegisterMethod(TScriptProducer,'EvaluateExpression',TypeInfo(_T51),[TypeInfo(TScriptFile),TypeInfo(string)],  getVMTProcAddr('TScriptProducer','EvaluateExpression',4));


RegRegisterMethod(TVariableLookup,'FindGlobalVariable',TypeInfo(_T53),[
TypeInfo(string),TypeInfo(TComponent)],Addr(TVariableLookup.FindGlobalVariable));

RegRegisterMethod(TVariableLookup,'FindGlobalVariableContainer',TypeInfo(_T54),[
TypeInfo(string),TypeInfo(TComponent)],Addr(TVariableLookup.FindGlobalVariableContainer));

RegisterProc(TVariableLookup,'Create',mtConstructor,TypeInfo(_T55),[
TypeInfo(string),
TypeInfo(TWebModuleContext)],Addr(TVariableLookup.Create),cRegister);

RegRegisterMethod(TVariableLookup,'LookupObject',TypeInfo(_T56),[TypeInfo(Boolean)],Addr(TVariableLookup.LookupObject));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegRegisterMethod(TAbstractScriptEngine,'CreateComponentStub',TypeInfo(_T3),[
TypeInfo(TObject),TypeInfo(IInterface)],Addr(TAbstractScriptEngine.CreateComponentStub))}

{RegRegisterMethod(TAbstractScriptObjectFactory,'CreateComponentObject',TypeInfo(_T9),[
TypeInfo(TObject),
TypeInfo(TClass),TypeInfo(IInterface)], pointer(4))}

{RegRegisterMethod(TAbstractScriptObjectFactory,'CreateProducerObject',TypeInfo(_T11),[
TypeInfo(TGlobalScriptVariables),
TypeInfo(IScriptProducer),TypeInfo(IInterface)], pointer(12))}

{RegRegisterMethod(TAbstractScriptObjectFactory,'CreateGlobalObject',TypeInfo(_T12),[
TypeInfo(TGlobalScriptVariables),
TypeInfo(IScriptContext),TypeInfo(IInterface)], pointer(16))}

{RegisterProc(TCurrentWebPageInfo,'Create',mtConstructor,TypeInfo(_T13),[
TypeInfo(IScriptContext)],Addr(TCurrentWebPageInfo.Create),cRegister)}

{RegRegisterMethod(THTMLItem,'AssignString',TypeInfo(_T15),[
TypeInfo(Integer),
TypeInfoPChar,
TypeInfo(Integer)],Addr(THTMLItem.AssignString))}

{RegRegisterMethod(TLineNumberMap,'New',TypeInfo(_T20),[TypeInfoPointer],Addr(TLineNumberMap.New))}

{RegisterProc(TScriptGlobalObjects,'Create',mtConstructor,TypeInfo(_T35),[
TypeInfo(IScriptProducer)],Addr(TScriptGlobalObjects.Create),cRegister)}

{RegRegisterMethod(TScriptGlobalObjects,'AddNamedIntf',TypeInfo(_T38),[
TypeInfo(string),
TypeInfo(IUnknown)],Addr(TScriptGlobalObjects.AddNamedIntf))}

{RegRegisterMethod(TScriptGlobalObjects,'FindNamedItemIntf',TypeInfo(_T39),[
TypeInfo(string),TypeInfo(IUnknown)],Addr(TScriptGlobalObjects.FindNamedItemIntf))}

{RegRegisterMethod(TScriptObjectFactories,'CreateGlobalObject',TypeInfo(_T50),[
TypeInfo(TGlobalScriptVariables),
TypeInfo(IScriptContext),TypeInfo(IInterface)],Addr(TScriptObjectFactories.CreateGlobalObject))}

{RegRegisterMethod(TScriptProducer,'ImplHandleScriptError',TypeInfo(_T52),[
TypeInfo(IUnknown),TypeInfo(HRESULT)], pointer(8))}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
