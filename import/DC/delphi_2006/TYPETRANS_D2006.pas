{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit TYPETRANS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  TypInfo,
  IntfInfo,
  SysUtils,
  InvokeRegistry,
  TypeTrans;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = function (p0 : Extended): string of object;

_T1 = function (const p0 : string): Extended of object;

{_T2 = function (p0 : PTypeInfo;
const p1 : string): Integer of object;}

{_T3 = procedure (p0 : TObject;
p1 : PPropInfo;
const p2 : string) of object;}

_T4 = procedure  of object;

{_T5 = function (p0 : PTypeInfo;
const p1 : WideString;
p2 : Pointer;
p3 : Boolean): Boolean of object;}

{_T6 = procedure (p0 : PTypeInfo;
var p1 : WideString;
p2 : Pointer;
var p3 : Boolean) of object;}

{_T7 = procedure (p0 : PTypeInfo;
const p1 : WideString;
p2 : Pointer) of object;}

_T8 = procedure (p0 : Pointer;
const p1 : WideString) of object;

procedure __RegisterProps;
begin
end;

function __DC__GetTypeTrans__TypeTranslator(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TypeTrans.TypeTranslator);
end;

procedure __DC__SetTypeTrans__TypeTranslator(Instance : TObject; Params : PVariantArgList);
begin
TObject(TypeTrans.TypeTranslator):=(VarToObject(OleVariant(Params^[0])));
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('TypeTranslator',__DC__GetTypeTrans__TypeTranslator,__DC__SetTypeTrans__TypeTranslator));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..1] of TClass = (
ETypeTransException,
TTypeTranslator
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..1] of string = (
'FloatToStrEx'
,'StrToFloatEx'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(Extended),TypeInfo(string)],Addr(FloatToStrEx),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(string),TypeInfo(Extended)],Addr(StrToFloatEx),cRegister);

RegisterProc(TTypeTranslator,'Create',mtConstructor,TypeInfo(_T4),NoParams,Addr(TTypeTranslator.Create),cRegister);

RegRegisterMethod(TTypeTranslator,'Base64ToVar',TypeInfo(_T8),[
TypeInfoPointer,
TypeInfo(WideString)],Addr(TTypeTranslator.Base64ToVar));

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'GetEnumValueEx',mtProc,TypeInfo(_T2),[
TypeInfoPointer,
TypeInfo(string),TypeInfo(Integer)],Addr(GetEnumValueEx),cRegister)}

{RegisterProc(nil,'SetEnumPropEx',mtProc,TypeInfo(_T3),[
TypeInfo(TObject),
TypeInfoPointer,
TypeInfo(string)],Addr(SetEnumPropEx),cRegister)}

{RegRegisterMethod(TTypeTranslator,'CastSoapToNative',TypeInfo(_T5),[
TypeInfoPointer,
TypeInfo(WideString),
TypeInfoPointer,
TypeInfo(Boolean),TypeInfo(Boolean)],Addr(TTypeTranslator.CastSoapToNative))}

{RegRegisterMethod(TTypeTranslator,'CastNativeToSoap',TypeInfo(_T6),[
TypeInfoPointer,
TypeInfo(WideString),
TypeInfoPointer,
TypeInfo(Boolean)],Addr(TTypeTranslator.CastNativeToSoap))}

{RegRegisterMethod(TTypeTranslator,'CastSoapToVariant',TypeInfo(_T7),[
TypeInfoPointer,
TypeInfo(WideString),
TypeInfoPointer],Addr(TTypeTranslator.CastSoapToVariant))}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
