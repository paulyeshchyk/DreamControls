{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDTHREADCOMPONENT_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdBaseComponent,
  IdException,
  IdGlobal,
  IdThread,
  SysUtils,
  IdThreadComponent;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (const p0 : Boolean) of object;

_T1 = procedure  of object;

_T2 = _T1;

_T3 = _T1;

_T4 = _T1;

_T5 = _T1;

_T6 = procedure (p0 : TIdThread;
p1 : Exception) of object;

_T7 = _T1;

_T8 = procedure (p0 : TIdThread) of object;

_T9 = procedure (p0 : TObject) of object;

_T10 = _T1;

_T11 = _T1;

{_T12 = procedure (p0 : TThreadMethod) of object;}

_T13 = _T1;

_T14 = _T1;

_T15 = function : LongWord of object;

_T16 = procedure (p0 : TIdCustomThreadComponent) of object;

function __DC__GetTIdCustomThreadComponent__Data(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdCustomThreadComponent(Instance).Data);
end;

procedure __DC__SetTIdCustomThreadComponent__Data(Instance : TObject; Params : PVariantArgList);
begin
TIdCustomThreadComponent(Instance).Data:=TObject(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIdCustomThreadComponent__Handle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdCustomThreadComponent(Instance).Handle;
end;

function __DC__GetTIdCustomThreadComponent__ReturnValue(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdCustomThreadComponent(Instance).ReturnValue;
end;

procedure __DC__SetTIdCustomThreadComponent__ReturnValue(Instance : TObject; Params : PVariantArgList);
begin
TIdCustomThreadComponent(Instance).ReturnValue:=OleVariant(Params^[0]);
end;

function __DC__GetTIdCustomThreadComponent__Stopped(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdCustomThreadComponent(Instance).Stopped;
end;

function __DC__GetTIdCustomThreadComponent__Suspended(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdCustomThreadComponent(Instance).Suspended;
end;

function __DC__GetTIdCustomThreadComponent__Thread(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdCustomThreadComponent(Instance).Thread);
end;

function __DC__GetTIdCustomThreadComponent__TerminatingException(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdCustomThreadComponent(Instance).TerminatingException;
end;

function __DC__GetTIdCustomThreadComponent__Terminated(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdCustomThreadComponent(Instance).Terminated;
end;

procedure __RegisterProps;
begin
RegisterProperty(TIdCustomThreadComponent,'Data',__DC__GetTIdCustomThreadComponent__Data,__DC__SetTIdCustomThreadComponent__Data);
RegisterProperty(TIdCustomThreadComponent,'Handle',__DC__GetTIdCustomThreadComponent__Handle,nil);
RegisterProperty(TIdCustomThreadComponent,'ReturnValue',__DC__GetTIdCustomThreadComponent__ReturnValue,__DC__SetTIdCustomThreadComponent__ReturnValue);
RegisterProperty(TIdCustomThreadComponent,'Stopped',__DC__GetTIdCustomThreadComponent__Stopped,nil);
RegisterProperty(TIdCustomThreadComponent,'Suspended',__DC__GetTIdCustomThreadComponent__Suspended,nil);
RegisterProperty(TIdCustomThreadComponent,'Thread',__DC__GetTIdCustomThreadComponent__Thread,nil);
RegisterProperty(TIdCustomThreadComponent,'TerminatingException',__DC__GetTIdCustomThreadComponent__TerminatingException,nil);
RegisterProperty(TIdCustomThreadComponent,'Terminated',__DC__GetTIdCustomThreadComponent__Terminated,nil);
end;

const __ConstNames0 : array[0..1] of string = (
'IdThreadComponentDefaultPriority'
,'IdThreadComponentDefaultStopMode'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,IdThreadComponentDefaultPriority));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,IdThreadComponentDefaultStopMode));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..2] of TClass = (
TIdCustomThreadComponent,
TIdThreadComponent,
TIdThreadEx
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TIdCustomThreadComponent,'SetActive',TypeInfo(_T0),[TypeInfo(Boolean)], pointer(48));
RegRegisterMethod(TIdCustomThreadComponent,'SetActive',TypeInfo(_T0),[TypeInfo(Boolean)],  getVMTProcAddr('TIdCustomThreadComponent','SetActive',48));


//RegRegisterMethod(TIdCustomThreadComponent,'DoAfterExecute',TypeInfo(_T1),NoParams, pointer(52));
RegRegisterMethod(TIdCustomThreadComponent,'DoAfterExecute',TypeInfo(_T1),NoParams,  getVMTProcAddr('TIdCustomThreadComponent','DoAfterExecute',52));


//RegRegisterMethod(TIdCustomThreadComponent,'DoAfterRun',TypeInfo(_T2),NoParams, pointer(56));
RegRegisterMethod(TIdCustomThreadComponent,'DoAfterRun',TypeInfo(_T2),NoParams,  getVMTProcAddr('TIdCustomThreadComponent','DoAfterRun',56));


//RegRegisterMethod(TIdCustomThreadComponent,'DoBeforeExecute',TypeInfo(_T3),NoParams, pointer(60));
RegRegisterMethod(TIdCustomThreadComponent,'DoBeforeExecute',TypeInfo(_T3),NoParams,  getVMTProcAddr('TIdCustomThreadComponent','DoBeforeExecute',60));


//RegRegisterMethod(TIdCustomThreadComponent,'DoBeforeRun',TypeInfo(_T4),NoParams, pointer(64));
RegRegisterMethod(TIdCustomThreadComponent,'DoBeforeRun',TypeInfo(_T4),NoParams,  getVMTProcAddr('TIdCustomThreadComponent','DoBeforeRun',64));


//RegRegisterMethod(TIdCustomThreadComponent,'DoCleanup',TypeInfo(_T5),NoParams, pointer(68));
RegRegisterMethod(TIdCustomThreadComponent,'DoCleanup',TypeInfo(_T5),NoParams,  getVMTProcAddr('TIdCustomThreadComponent','DoCleanup',68));


//RegRegisterMethod(TIdCustomThreadComponent,'DoException',TypeInfo(_T6),[TypeInfo(TIdThread),TypeInfo(Exception)], pointer(72));
RegRegisterMethod(TIdCustomThreadComponent,'DoException',TypeInfo(_T6),[TypeInfo(TIdThread),TypeInfo(Exception)],  getVMTProcAddr('TIdCustomThreadComponent','DoException',72));


//RegRegisterMethod(TIdCustomThreadComponent,'DoRun',TypeInfo(_T7),NoParams, pointer(76));
RegRegisterMethod(TIdCustomThreadComponent,'DoRun',TypeInfo(_T7),NoParams,  getVMTProcAddr('TIdCustomThreadComponent','DoRun',76));


//RegRegisterMethod(TIdCustomThreadComponent,'DoStopped',TypeInfo(_T8),[TypeInfo(TIdThread)], pointer(80));
RegRegisterMethod(TIdCustomThreadComponent,'DoStopped',TypeInfo(_T8),[TypeInfo(TIdThread)],  getVMTProcAddr('TIdCustomThreadComponent','DoStopped',80));


//RegRegisterMethod(TIdCustomThreadComponent,'DoTerminate',TypeInfo(_T9),[TypeInfo(TObject)], pointer(84));
RegRegisterMethod(TIdCustomThreadComponent,'DoTerminate',TypeInfo(_T9),[TypeInfo(TObject)],  getVMTProcAddr('TIdCustomThreadComponent','DoTerminate',84));


//RegRegisterMethod(TIdCustomThreadComponent,'Start',TypeInfo(_T10),NoParams, pointer(88));
RegRegisterMethod(TIdCustomThreadComponent,'Start',TypeInfo(_T10),NoParams,  getVMTProcAddr('TIdCustomThreadComponent','Start',88));


//RegRegisterMethod(TIdCustomThreadComponent,'Stop',TypeInfo(_T11),NoParams, pointer(92));
RegRegisterMethod(TIdCustomThreadComponent,'Stop',TypeInfo(_T11),NoParams,  getVMTProcAddr('TIdCustomThreadComponent','Stop',92));


//RegRegisterMethod(TIdCustomThreadComponent,'Terminate',TypeInfo(_T13),NoParams, pointer(96));
RegRegisterMethod(TIdCustomThreadComponent,'Terminate',TypeInfo(_T13),NoParams,  getVMTProcAddr('TIdCustomThreadComponent','Terminate',96));


//RegRegisterMethod(TIdCustomThreadComponent,'TerminateAndWaitFor',TypeInfo(_T14),NoParams, pointer(100));
RegRegisterMethod(TIdCustomThreadComponent,'TerminateAndWaitFor',TypeInfo(_T14),NoParams,  getVMTProcAddr('TIdCustomThreadComponent','TerminateAndWaitFor',100));


RegRegisterMethod(TIdCustomThreadComponent,'WaitFor',TypeInfo(_T15),[TypeInfo(LongWord)],Addr(TIdCustomThreadComponent.WaitFor));

RegisterProc(TIdThreadEx,'Create',mtConstructor,TypeInfo(_T16),[
TypeInfo(TIdCustomThreadComponent)],Addr(TIdThreadEx.Create),cRegister);

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
{RegRegisterMethod(TIdCustomThreadComponent,'Synchronize',TypeInfo(_T12),[
TypeInfo(TThreadMethod)],Addr(TIdCustomThreadComponent.Synchronize))}

RegisterEvent(TypeInfo(TIdExceptionThreadComponentEvent),[
TypeInfo(TIdCustomThreadComponent),
TypeInfo(Exception)]);

RegisterEvent(TypeInfo(TIdNotifyThreadComponentEvent),[
TypeInfo(TIdCustomThreadComponent)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
