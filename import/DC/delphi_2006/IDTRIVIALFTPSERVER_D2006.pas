{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDTRIVIALFTPSERVER_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdAssignedNumbers,
  IdTrivialFTPBase,
  IdSocketHandle,
  IdUDPServer,
  IdTrivialFTPServer;
function ConvertTPeerInfoToVariant(var R : TPeerInfo) : OleVariant;
function ConvertVariantToTPeerInfo(const V : OleVariant) : TPeerInfo;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TPeerInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TPeerInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setPeerIP(const val : AnsiString);
function getPeerIP : AnsiString;
property PeerIP : AnsiString read getPeerIP write setPeerIP;
procedure setPeerPort(const val : Integer);
function getPeerPort : Integer;
property PeerPort : Integer read getPeerPort write setPeerPort;
end;
type __TIdTrivialFTPServer__ = class(TIdTrivialFTPServer);
type
_T0 = procedure (p0 : String;
const p1 : TIdTFTPMode;
const p2 : IDispatch;
p3 : Integer) of object;

_T1 = _T0;

_T2 = procedure (const p0 : Boolean;
const p1 : IDispatch;
p2 : TStream;
const p3 : Boolean) of object;

function __TPeerInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPeerInfo__Wrapper.setPeerIP(const val : AnsiString);
begin
TPeerInfo(GetRecordPtr^).PeerIP := val;
end;
function __TPeerInfo__Wrapper.getPeerIP : AnsiString;
begin
result := TPeerInfo(GetRecordPtr^).PeerIP;
end;
procedure __TPeerInfo__Wrapper.setPeerPort(const val : Integer);
begin
TPeerInfo(GetRecordPtr^).PeerPort := val;
end;
function __TPeerInfo__Wrapper.getPeerPort : Integer;
begin
result := TPeerInfo(GetRecordPtr^).PeerPort;
end;
function _TPeerInfo_ : IDispatch;
begin
  result := __TPeerInfo__Wrapper.Create;
end;
procedure __TIdTrivialFTPServer__DoReadFile__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
var
__p2 : ^TPeerInfo;
__i2 : IDispatch;
begin
__i2 := VarToInterface(OleVariant(pargs^[2]));
if __i2 = nil then exit;
__p2 := (__i2 as IDCRecordWrapper).GetRecordPtr;
case cArgs of
3:
begin
__TIdTrivialFTPServer__(__Instance).DoReadFile(OleVariant(pargs^[2]),OleVariant(pargs^[1]),__p2^);
end;
4:
begin
__TIdTrivialFTPServer__(__Instance).DoReadFile(OleVariant(pargs^[3]),OleVariant(pargs^[2]),__p2^,OleVariant(pargs^[0]));
end;
end
end;

procedure __TIdTrivialFTPServer__DoWriteFile__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
var
__p2 : ^TPeerInfo;
__i2 : IDispatch;
begin
__i2 := VarToInterface(OleVariant(pargs^[2]));
if __i2 = nil then exit;
__p2 := (__i2 as IDCRecordWrapper).GetRecordPtr;
case cArgs of
3:
begin
__TIdTrivialFTPServer__(__Instance).DoWriteFile(OleVariant(pargs^[2]),OleVariant(pargs^[1]),__p2^);
end;
4:
begin
__TIdTrivialFTPServer__(__Instance).DoWriteFile(OleVariant(pargs^[3]),OleVariant(pargs^[2]),__p2^,OleVariant(pargs^[0]));
end;
end
end;

procedure __TIdTrivialFTPServer__DoTransferComplete__Wrapper(__Instance : TIdTrivialFTPServer;
const p0 : Boolean;
const p1 : IDispatch;
p2 : TStream;
const p3 : Boolean);
var
__p1 : ^TPeerInfo;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
__TIdTrivialFTPServer__(__Instance).DoTransferComplete(p0,__p1^,p2,p3);
end;


type __TPeerInfo__Wrapper__ = class(__TPeerInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPeerInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPeerInfoToVariant(var R : TPeerInfo) : OleVariant;
var
__rw : __TPeerInfo__Wrapper__;
begin
__rw := __TPeerInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPeerInfo(const V : OleVariant) : TPeerInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPeerInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..0] of TClass = (
TIdTrivialFTPServer
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'TPeerInfo'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TPeerInfo_)));
RegisterProc(TIdTrivialFTPServer,'DoReadFile',mtScriptMethod,TypeInfo(_T0),[
TypeInfo(String),
TypeInfo(TIdTFTPMode),
TypeInfo(IDispatch),
TypeInfo(Integer)],Addr(__TIdTrivialFTPServer__DoReadFile__Wrapper),cRegister);

RegisterProc(TIdTrivialFTPServer,'DoWriteFile',mtScriptMethod,TypeInfo(_T1),[
TypeInfo(String),
TypeInfo(TIdTFTPMode),
TypeInfo(IDispatch),
TypeInfo(Integer)],Addr(__TIdTrivialFTPServer__DoWriteFile__Wrapper),cRegister);

//RegRegisterMethod(TIdTrivialFTPServer,'DoTransferComplete',TypeInfo(_T2),[TypeInfo(Boolean),TypeInfo(IDispatch),TypeInfo(TStream),TypeInfo(Boolean)], pointer(84));
RegRegisterMethod(TIdTrivialFTPServer,'DoTransferComplete',TypeInfo(_T2),[TypeInfo(Boolean),TypeInfo(IDispatch),TypeInfo(TStream),TypeInfo(Boolean)],  getVMTProcAddr('TIdTrivialFTPServer','DoTransferComplete',84));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterEvent(TypeInfo(TAccessFileEvent),[
TypeInfo(TObject),
TypeInfo(String),
TypeInfo(IDispatch),
TypeInfo(Boolean),
TypeInfo(TStream),
TypeInfo(Boolean)]);}

{RegisterEvent(TypeInfo(TTransferCompleteEvent),[
TypeInfo(TObject),
TypeInfo(Boolean),
TypeInfo(IDispatch),
TypeInfo(TStream),
TypeInfo(Boolean)]);}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
