{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit WINSVC_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  Types,
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  WinSvc;
function Convert_ENUM_SERVICE_STATUSToVariant(var R : _ENUM_SERVICE_STATUS) : OleVariant;
function ConvertVariantTo_ENUM_SERVICE_STATUS(const V : OleVariant) : _ENUM_SERVICE_STATUS;
function Convert_ENUM_SERVICE_STATUSAToVariant(var R : _ENUM_SERVICE_STATUSA) : OleVariant;
function ConvertVariantTo_ENUM_SERVICE_STATUSA(const V : OleVariant) : _ENUM_SERVICE_STATUSA;
function Convert_ENUM_SERVICE_STATUSWToVariant(var R : _ENUM_SERVICE_STATUSW) : OleVariant;
function ConvertVariantTo_ENUM_SERVICE_STATUSW(const V : OleVariant) : _ENUM_SERVICE_STATUSW;
function Convert_QUERY_SERVICE_CONFIGToVariant(var R : _QUERY_SERVICE_CONFIG) : OleVariant;
function ConvertVariantTo_QUERY_SERVICE_CONFIG(const V : OleVariant) : _QUERY_SERVICE_CONFIG;
function Convert_QUERY_SERVICE_CONFIGAToVariant(var R : _QUERY_SERVICE_CONFIGA) : OleVariant;
function ConvertVariantTo_QUERY_SERVICE_CONFIGA(const V : OleVariant) : _QUERY_SERVICE_CONFIGA;
function Convert_QUERY_SERVICE_CONFIGWToVariant(var R : _QUERY_SERVICE_CONFIGW) : OleVariant;
function ConvertVariantTo_QUERY_SERVICE_CONFIGW(const V : OleVariant) : _QUERY_SERVICE_CONFIGW;
function Convert_QUERY_SERVICE_LOCK_STATUSToVariant(var R : _QUERY_SERVICE_LOCK_STATUS) : OleVariant;
function ConvertVariantTo_QUERY_SERVICE_LOCK_STATUS(const V : OleVariant) : _QUERY_SERVICE_LOCK_STATUS;
function Convert_QUERY_SERVICE_LOCK_STATUSAToVariant(var R : _QUERY_SERVICE_LOCK_STATUSA) : OleVariant;
function ConvertVariantTo_QUERY_SERVICE_LOCK_STATUSA(const V : OleVariant) : _QUERY_SERVICE_LOCK_STATUSA;
function Convert_QUERY_SERVICE_LOCK_STATUSWToVariant(var R : _QUERY_SERVICE_LOCK_STATUSW) : OleVariant;
function ConvertVariantTo_QUERY_SERVICE_LOCK_STATUSW(const V : OleVariant) : _QUERY_SERVICE_LOCK_STATUSW;
function Convert_SERVICE_STATUSToVariant(var R : _SERVICE_STATUS) : OleVariant;
function ConvertVariantTo_SERVICE_STATUS(const V : OleVariant) : _SERVICE_STATUS;
function Convert_SERVICE_TABLE_ENTRYToVariant(var R : _SERVICE_TABLE_ENTRY) : OleVariant;
function ConvertVariantTo_SERVICE_TABLE_ENTRY(const V : OleVariant) : _SERVICE_TABLE_ENTRY;
function Convert_SERVICE_TABLE_ENTRYAToVariant(var R : _SERVICE_TABLE_ENTRYA) : OleVariant;
function ConvertVariantTo_SERVICE_TABLE_ENTRYA(const V : OleVariant) : _SERVICE_TABLE_ENTRYA;
function Convert_SERVICE_TABLE_ENTRYWToVariant(var R : _SERVICE_TABLE_ENTRYW) : OleVariant;
function ConvertVariantTo_SERVICE_TABLE_ENTRYW(const V : OleVariant) : _SERVICE_TABLE_ENTRYW;
function ConvertENUM_SERVICE_STATUSAToVariant(var R : ENUM_SERVICE_STATUSA) : OleVariant;
function ConvertVariantToENUM_SERVICE_STATUSA(const V : OleVariant) : ENUM_SERVICE_STATUSA;
function ConvertENUM_SERVICE_STATUSWToVariant(var R : ENUM_SERVICE_STATUSW) : OleVariant;
function ConvertVariantToENUM_SERVICE_STATUSW(const V : OleVariant) : ENUM_SERVICE_STATUSW;
function ConvertQUERY_SERVICE_CONFIGToVariant(var R : QUERY_SERVICE_CONFIG) : OleVariant;
function ConvertVariantToQUERY_SERVICE_CONFIG(const V : OleVariant) : QUERY_SERVICE_CONFIG;
function ConvertQUERY_SERVICE_CONFIGAToVariant(var R : QUERY_SERVICE_CONFIGA) : OleVariant;
function ConvertVariantToQUERY_SERVICE_CONFIGA(const V : OleVariant) : QUERY_SERVICE_CONFIGA;
function ConvertQUERY_SERVICE_CONFIGWToVariant(var R : QUERY_SERVICE_CONFIGW) : OleVariant;
function ConvertVariantToQUERY_SERVICE_CONFIGW(const V : OleVariant) : QUERY_SERVICE_CONFIGW;
function ConvertQUERY_SERVICE_LOCK_STATUSToVariant(var R : QUERY_SERVICE_LOCK_STATUS) : OleVariant;
function ConvertVariantToQUERY_SERVICE_LOCK_STATUS(const V : OleVariant) : QUERY_SERVICE_LOCK_STATUS;
function ConvertQUERY_SERVICE_LOCK_STATUSAToVariant(var R : QUERY_SERVICE_LOCK_STATUSA) : OleVariant;
function ConvertVariantToQUERY_SERVICE_LOCK_STATUSA(const V : OleVariant) : QUERY_SERVICE_LOCK_STATUSA;
function ConvertQUERY_SERVICE_LOCK_STATUSWToVariant(var R : QUERY_SERVICE_LOCK_STATUSW) : OleVariant;
function ConvertVariantToQUERY_SERVICE_LOCK_STATUSW(const V : OleVariant) : QUERY_SERVICE_LOCK_STATUSW;
function ConvertSERVICE_STATUSToVariant(var R : SERVICE_STATUS) : OleVariant;
function ConvertVariantToSERVICE_STATUS(const V : OleVariant) : SERVICE_STATUS;
function ConvertSERVICE_TABLE_ENTRYToVariant(var R : SERVICE_TABLE_ENTRY) : OleVariant;
function ConvertVariantToSERVICE_TABLE_ENTRY(const V : OleVariant) : SERVICE_TABLE_ENTRY;
function ConvertSERVICE_TABLE_ENTRYAToVariant(var R : SERVICE_TABLE_ENTRYA) : OleVariant;
function ConvertVariantToSERVICE_TABLE_ENTRYA(const V : OleVariant) : SERVICE_TABLE_ENTRYA;
function ConvertSERVICE_TABLE_ENTRYWToVariant(var R : SERVICE_TABLE_ENTRYW) : OleVariant;
function ConvertVariantToSERVICE_TABLE_ENTRYW(const V : OleVariant) : SERVICE_TABLE_ENTRYW;
function ConvertTEnumServiceStatusToVariant(var R : TEnumServiceStatus) : OleVariant;
function ConvertVariantToTEnumServiceStatus(const V : OleVariant) : TEnumServiceStatus;
function ConvertTEnumServiceStatusAToVariant(var R : TEnumServiceStatusA) : OleVariant;
function ConvertVariantToTEnumServiceStatusA(const V : OleVariant) : TEnumServiceStatusA;
function ConvertTEnumServiceStatusWToVariant(var R : TEnumServiceStatusW) : OleVariant;
function ConvertVariantToTEnumServiceStatusW(const V : OleVariant) : TEnumServiceStatusW;
function ConvertTQueryServiceConfigToVariant(var R : TQueryServiceConfig) : OleVariant;
function ConvertVariantToTQueryServiceConfig(const V : OleVariant) : TQueryServiceConfig;
function ConvertTQueryServiceConfigAToVariant(var R : TQueryServiceConfigA) : OleVariant;
function ConvertVariantToTQueryServiceConfigA(const V : OleVariant) : TQueryServiceConfigA;
function ConvertTQueryServiceConfigWToVariant(var R : TQueryServiceConfigW) : OleVariant;
function ConvertVariantToTQueryServiceConfigW(const V : OleVariant) : TQueryServiceConfigW;
function ConvertTQueryServiceLockStatusToVariant(var R : TQueryServiceLockStatus) : OleVariant;
function ConvertVariantToTQueryServiceLockStatus(const V : OleVariant) : TQueryServiceLockStatus;
function ConvertTQueryServiceLockStatusAToVariant(var R : TQueryServiceLockStatusA) : OleVariant;
function ConvertVariantToTQueryServiceLockStatusA(const V : OleVariant) : TQueryServiceLockStatusA;
function ConvertTQueryServiceLockStatusWToVariant(var R : TQueryServiceLockStatusW) : OleVariant;
function ConvertVariantToTQueryServiceLockStatusW(const V : OleVariant) : TQueryServiceLockStatusW;
function ConvertTServiceStatusToVariant(var R : TServiceStatus) : OleVariant;
function ConvertVariantToTServiceStatus(const V : OleVariant) : TServiceStatus;
function ConvertTServiceTableEntryToVariant(var R : TServiceTableEntry) : OleVariant;
function ConvertVariantToTServiceTableEntry(const V : OleVariant) : TServiceTableEntry;
function ConvertTServiceTableEntryAToVariant(var R : TServiceTableEntryA) : OleVariant;
function ConvertVariantToTServiceTableEntryA(const V : OleVariant) : TServiceTableEntryA;
function ConvertTServiceTableEntryWToVariant(var R : TServiceTableEntryW) : OleVariant;
function ConvertVariantToTServiceTableEntryW(const V : OleVariant) : TServiceTableEntryW;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type ___ENUM_SERVICE_STATUS__Wrapper = class(TDCRecordWrapper)
private
fR : _ENUM_SERVICE_STATUS;
public
function GetRecordPtr : pointer; override;
published
end;
type ___ENUM_SERVICE_STATUSA__Wrapper = class(TDCRecordWrapper)
private
fR : _ENUM_SERVICE_STATUSA;
public
function GetRecordPtr : pointer; override;
published
end;
type ___ENUM_SERVICE_STATUSW__Wrapper = class(TDCRecordWrapper)
private
fR : _ENUM_SERVICE_STATUSW;
public
function GetRecordPtr : pointer; override;
published
end;
type ___QUERY_SERVICE_CONFIG__Wrapper = class(TDCRecordWrapper)
private
fR : _QUERY_SERVICE_CONFIG;
public
function GetRecordPtr : pointer; override;
published
procedure setdwServiceType(const val : DWORD);
function getdwServiceType : DWORD;
property dwServiceType : DWORD read getdwServiceType write setdwServiceType;
procedure setdwStartType(const val : DWORD);
function getdwStartType : DWORD;
property dwStartType : DWORD read getdwStartType write setdwStartType;
procedure setdwErrorControl(const val : DWORD);
function getdwErrorControl : DWORD;
property dwErrorControl : DWORD read getdwErrorControl write setdwErrorControl;
procedure setdwTagId(const val : DWORD);
function getdwTagId : DWORD;
property dwTagId : DWORD read getdwTagId write setdwTagId;
end;
type ___QUERY_SERVICE_CONFIGA__Wrapper = class(TDCRecordWrapper)
private
fR : _QUERY_SERVICE_CONFIGA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwServiceType(const val : DWORD);
function getdwServiceType : DWORD;
property dwServiceType : DWORD read getdwServiceType write setdwServiceType;
procedure setdwStartType(const val : DWORD);
function getdwStartType : DWORD;
property dwStartType : DWORD read getdwStartType write setdwStartType;
procedure setdwErrorControl(const val : DWORD);
function getdwErrorControl : DWORD;
property dwErrorControl : DWORD read getdwErrorControl write setdwErrorControl;
procedure setdwTagId(const val : DWORD);
function getdwTagId : DWORD;
property dwTagId : DWORD read getdwTagId write setdwTagId;
end;
type ___QUERY_SERVICE_CONFIGW__Wrapper = class(TDCRecordWrapper)
private
fR : _QUERY_SERVICE_CONFIGW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwServiceType(const val : DWORD);
function getdwServiceType : DWORD;
property dwServiceType : DWORD read getdwServiceType write setdwServiceType;
procedure setdwStartType(const val : DWORD);
function getdwStartType : DWORD;
property dwStartType : DWORD read getdwStartType write setdwStartType;
procedure setdwErrorControl(const val : DWORD);
function getdwErrorControl : DWORD;
property dwErrorControl : DWORD read getdwErrorControl write setdwErrorControl;
procedure setdwTagId(const val : DWORD);
function getdwTagId : DWORD;
property dwTagId : DWORD read getdwTagId write setdwTagId;
end;
type ___QUERY_SERVICE_LOCK_STATUS__Wrapper = class(TDCRecordWrapper)
private
fR : _QUERY_SERVICE_LOCK_STATUS;
public
function GetRecordPtr : pointer; override;
published
procedure setfIsLocked(const val : DWORD);
function getfIsLocked : DWORD;
property fIsLocked : DWORD read getfIsLocked write setfIsLocked;
procedure setdwLockDuration(const val : DWORD);
function getdwLockDuration : DWORD;
property dwLockDuration : DWORD read getdwLockDuration write setdwLockDuration;
end;
type ___QUERY_SERVICE_LOCK_STATUSA__Wrapper = class(TDCRecordWrapper)
private
fR : _QUERY_SERVICE_LOCK_STATUSA;
public
function GetRecordPtr : pointer; override;
published
procedure setfIsLocked(const val : DWORD);
function getfIsLocked : DWORD;
property fIsLocked : DWORD read getfIsLocked write setfIsLocked;
procedure setdwLockDuration(const val : DWORD);
function getdwLockDuration : DWORD;
property dwLockDuration : DWORD read getdwLockDuration write setdwLockDuration;
end;
type ___QUERY_SERVICE_LOCK_STATUSW__Wrapper = class(TDCRecordWrapper)
private
fR : _QUERY_SERVICE_LOCK_STATUSW;
public
function GetRecordPtr : pointer; override;
published
procedure setfIsLocked(const val : DWORD);
function getfIsLocked : DWORD;
property fIsLocked : DWORD read getfIsLocked write setfIsLocked;
procedure setdwLockDuration(const val : DWORD);
function getdwLockDuration : DWORD;
property dwLockDuration : DWORD read getdwLockDuration write setdwLockDuration;
end;
type ___SERVICE_STATUS__Wrapper = class(TDCRecordWrapper)
private
fR : _SERVICE_STATUS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwServiceType(const val : DWORD);
function getdwServiceType : DWORD;
property dwServiceType : DWORD read getdwServiceType write setdwServiceType;
procedure setdwCurrentState(const val : DWORD);
function getdwCurrentState : DWORD;
property dwCurrentState : DWORD read getdwCurrentState write setdwCurrentState;
procedure setdwControlsAccepted(const val : DWORD);
function getdwControlsAccepted : DWORD;
property dwControlsAccepted : DWORD read getdwControlsAccepted write setdwControlsAccepted;
procedure setdwWin32ExitCode(const val : DWORD);
function getdwWin32ExitCode : DWORD;
property dwWin32ExitCode : DWORD read getdwWin32ExitCode write setdwWin32ExitCode;
procedure setdwServiceSpecificExitCode(const val : DWORD);
function getdwServiceSpecificExitCode : DWORD;
property dwServiceSpecificExitCode : DWORD read getdwServiceSpecificExitCode write setdwServiceSpecificExitCode;
procedure setdwCheckPoint(const val : DWORD);
function getdwCheckPoint : DWORD;
property dwCheckPoint : DWORD read getdwCheckPoint write setdwCheckPoint;
procedure setdwWaitHint(const val : DWORD);
function getdwWaitHint : DWORD;
property dwWaitHint : DWORD read getdwWaitHint write setdwWaitHint;
end;
type ___SERVICE_TABLE_ENTRY__Wrapper = class(TDCRecordWrapper)
private
fR : _SERVICE_TABLE_ENTRY;
public
function GetRecordPtr : pointer; override;
published
end;
type ___SERVICE_TABLE_ENTRYA__Wrapper = class(TDCRecordWrapper)
private
fR : _SERVICE_TABLE_ENTRYA;
public
function GetRecordPtr : pointer; override;
published
end;
type ___SERVICE_TABLE_ENTRYW__Wrapper = class(TDCRecordWrapper)
private
fR : _SERVICE_TABLE_ENTRYW;
public
function GetRecordPtr : pointer; override;
published
end;
type __ENUM_SERVICE_STATUSA__Wrapper = class(TDCRecordWrapper)
private
fR : ENUM_SERVICE_STATUSA;
public
function GetRecordPtr : pointer; override;
published
end;
type __ENUM_SERVICE_STATUSW__Wrapper = class(TDCRecordWrapper)
private
fR : ENUM_SERVICE_STATUSW;
public
function GetRecordPtr : pointer; override;
published
end;
type __QUERY_SERVICE_CONFIG__Wrapper = class(TDCRecordWrapper)
private
fR : QUERY_SERVICE_CONFIG;
public
function GetRecordPtr : pointer; override;
published
procedure setdwServiceType(const val : DWORD);
function getdwServiceType : DWORD;
property dwServiceType : DWORD read getdwServiceType write setdwServiceType;
procedure setdwStartType(const val : DWORD);
function getdwStartType : DWORD;
property dwStartType : DWORD read getdwStartType write setdwStartType;
procedure setdwErrorControl(const val : DWORD);
function getdwErrorControl : DWORD;
property dwErrorControl : DWORD read getdwErrorControl write setdwErrorControl;
procedure setdwTagId(const val : DWORD);
function getdwTagId : DWORD;
property dwTagId : DWORD read getdwTagId write setdwTagId;
end;
type __QUERY_SERVICE_CONFIGA__Wrapper = class(TDCRecordWrapper)
private
fR : QUERY_SERVICE_CONFIGA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwServiceType(const val : DWORD);
function getdwServiceType : DWORD;
property dwServiceType : DWORD read getdwServiceType write setdwServiceType;
procedure setdwStartType(const val : DWORD);
function getdwStartType : DWORD;
property dwStartType : DWORD read getdwStartType write setdwStartType;
procedure setdwErrorControl(const val : DWORD);
function getdwErrorControl : DWORD;
property dwErrorControl : DWORD read getdwErrorControl write setdwErrorControl;
procedure setdwTagId(const val : DWORD);
function getdwTagId : DWORD;
property dwTagId : DWORD read getdwTagId write setdwTagId;
end;
type __QUERY_SERVICE_CONFIGW__Wrapper = class(TDCRecordWrapper)
private
fR : QUERY_SERVICE_CONFIGW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwServiceType(const val : DWORD);
function getdwServiceType : DWORD;
property dwServiceType : DWORD read getdwServiceType write setdwServiceType;
procedure setdwStartType(const val : DWORD);
function getdwStartType : DWORD;
property dwStartType : DWORD read getdwStartType write setdwStartType;
procedure setdwErrorControl(const val : DWORD);
function getdwErrorControl : DWORD;
property dwErrorControl : DWORD read getdwErrorControl write setdwErrorControl;
procedure setdwTagId(const val : DWORD);
function getdwTagId : DWORD;
property dwTagId : DWORD read getdwTagId write setdwTagId;
end;
type __QUERY_SERVICE_LOCK_STATUS__Wrapper = class(TDCRecordWrapper)
private
fR : QUERY_SERVICE_LOCK_STATUS;
public
function GetRecordPtr : pointer; override;
published
procedure setfIsLocked(const val : DWORD);
function getfIsLocked : DWORD;
property fIsLocked : DWORD read getfIsLocked write setfIsLocked;
procedure setdwLockDuration(const val : DWORD);
function getdwLockDuration : DWORD;
property dwLockDuration : DWORD read getdwLockDuration write setdwLockDuration;
end;
type __QUERY_SERVICE_LOCK_STATUSA__Wrapper = class(TDCRecordWrapper)
private
fR : QUERY_SERVICE_LOCK_STATUSA;
public
function GetRecordPtr : pointer; override;
published
procedure setfIsLocked(const val : DWORD);
function getfIsLocked : DWORD;
property fIsLocked : DWORD read getfIsLocked write setfIsLocked;
procedure setdwLockDuration(const val : DWORD);
function getdwLockDuration : DWORD;
property dwLockDuration : DWORD read getdwLockDuration write setdwLockDuration;
end;
type __QUERY_SERVICE_LOCK_STATUSW__Wrapper = class(TDCRecordWrapper)
private
fR : QUERY_SERVICE_LOCK_STATUSW;
public
function GetRecordPtr : pointer; override;
published
procedure setfIsLocked(const val : DWORD);
function getfIsLocked : DWORD;
property fIsLocked : DWORD read getfIsLocked write setfIsLocked;
procedure setdwLockDuration(const val : DWORD);
function getdwLockDuration : DWORD;
property dwLockDuration : DWORD read getdwLockDuration write setdwLockDuration;
end;
type __SERVICE_STATUS__Wrapper = class(TDCRecordWrapper)
private
fR : SERVICE_STATUS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwServiceType(const val : DWORD);
function getdwServiceType : DWORD;
property dwServiceType : DWORD read getdwServiceType write setdwServiceType;
procedure setdwCurrentState(const val : DWORD);
function getdwCurrentState : DWORD;
property dwCurrentState : DWORD read getdwCurrentState write setdwCurrentState;
procedure setdwControlsAccepted(const val : DWORD);
function getdwControlsAccepted : DWORD;
property dwControlsAccepted : DWORD read getdwControlsAccepted write setdwControlsAccepted;
procedure setdwWin32ExitCode(const val : DWORD);
function getdwWin32ExitCode : DWORD;
property dwWin32ExitCode : DWORD read getdwWin32ExitCode write setdwWin32ExitCode;
procedure setdwServiceSpecificExitCode(const val : DWORD);
function getdwServiceSpecificExitCode : DWORD;
property dwServiceSpecificExitCode : DWORD read getdwServiceSpecificExitCode write setdwServiceSpecificExitCode;
procedure setdwCheckPoint(const val : DWORD);
function getdwCheckPoint : DWORD;
property dwCheckPoint : DWORD read getdwCheckPoint write setdwCheckPoint;
procedure setdwWaitHint(const val : DWORD);
function getdwWaitHint : DWORD;
property dwWaitHint : DWORD read getdwWaitHint write setdwWaitHint;
end;
type __SERVICE_TABLE_ENTRY__Wrapper = class(TDCRecordWrapper)
private
fR : SERVICE_TABLE_ENTRY;
public
function GetRecordPtr : pointer; override;
published
end;
type __SERVICE_TABLE_ENTRYA__Wrapper = class(TDCRecordWrapper)
private
fR : SERVICE_TABLE_ENTRYA;
public
function GetRecordPtr : pointer; override;
published
end;
type __SERVICE_TABLE_ENTRYW__Wrapper = class(TDCRecordWrapper)
private
fR : SERVICE_TABLE_ENTRYW;
public
function GetRecordPtr : pointer; override;
published
end;
type __TEnumServiceStatus__Wrapper = class(TDCRecordWrapper)
private
fR : TEnumServiceStatus;
public
function GetRecordPtr : pointer; override;
published
end;
type __TEnumServiceStatusA__Wrapper = class(TDCRecordWrapper)
private
fR : TEnumServiceStatusA;
public
function GetRecordPtr : pointer; override;
published
end;
type __TEnumServiceStatusW__Wrapper = class(TDCRecordWrapper)
private
fR : TEnumServiceStatusW;
public
function GetRecordPtr : pointer; override;
published
end;
type __TQueryServiceConfig__Wrapper = class(TDCRecordWrapper)
private
fR : TQueryServiceConfig;
public
function GetRecordPtr : pointer; override;
published
procedure setdwServiceType(const val : DWORD);
function getdwServiceType : DWORD;
property dwServiceType : DWORD read getdwServiceType write setdwServiceType;
procedure setdwStartType(const val : DWORD);
function getdwStartType : DWORD;
property dwStartType : DWORD read getdwStartType write setdwStartType;
procedure setdwErrorControl(const val : DWORD);
function getdwErrorControl : DWORD;
property dwErrorControl : DWORD read getdwErrorControl write setdwErrorControl;
procedure setdwTagId(const val : DWORD);
function getdwTagId : DWORD;
property dwTagId : DWORD read getdwTagId write setdwTagId;
end;
type __TQueryServiceConfigA__Wrapper = class(TDCRecordWrapper)
private
fR : TQueryServiceConfigA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwServiceType(const val : DWORD);
function getdwServiceType : DWORD;
property dwServiceType : DWORD read getdwServiceType write setdwServiceType;
procedure setdwStartType(const val : DWORD);
function getdwStartType : DWORD;
property dwStartType : DWORD read getdwStartType write setdwStartType;
procedure setdwErrorControl(const val : DWORD);
function getdwErrorControl : DWORD;
property dwErrorControl : DWORD read getdwErrorControl write setdwErrorControl;
procedure setdwTagId(const val : DWORD);
function getdwTagId : DWORD;
property dwTagId : DWORD read getdwTagId write setdwTagId;
end;
type __TQueryServiceConfigW__Wrapper = class(TDCRecordWrapper)
private
fR : TQueryServiceConfigW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwServiceType(const val : DWORD);
function getdwServiceType : DWORD;
property dwServiceType : DWORD read getdwServiceType write setdwServiceType;
procedure setdwStartType(const val : DWORD);
function getdwStartType : DWORD;
property dwStartType : DWORD read getdwStartType write setdwStartType;
procedure setdwErrorControl(const val : DWORD);
function getdwErrorControl : DWORD;
property dwErrorControl : DWORD read getdwErrorControl write setdwErrorControl;
procedure setdwTagId(const val : DWORD);
function getdwTagId : DWORD;
property dwTagId : DWORD read getdwTagId write setdwTagId;
end;
type __TQueryServiceLockStatus__Wrapper = class(TDCRecordWrapper)
private
fR : TQueryServiceLockStatus;
public
function GetRecordPtr : pointer; override;
published
procedure setfIsLocked(const val : DWORD);
function getfIsLocked : DWORD;
property fIsLocked : DWORD read getfIsLocked write setfIsLocked;
procedure setdwLockDuration(const val : DWORD);
function getdwLockDuration : DWORD;
property dwLockDuration : DWORD read getdwLockDuration write setdwLockDuration;
end;
type __TQueryServiceLockStatusA__Wrapper = class(TDCRecordWrapper)
private
fR : TQueryServiceLockStatusA;
public
function GetRecordPtr : pointer; override;
published
procedure setfIsLocked(const val : DWORD);
function getfIsLocked : DWORD;
property fIsLocked : DWORD read getfIsLocked write setfIsLocked;
procedure setdwLockDuration(const val : DWORD);
function getdwLockDuration : DWORD;
property dwLockDuration : DWORD read getdwLockDuration write setdwLockDuration;
end;
type __TQueryServiceLockStatusW__Wrapper = class(TDCRecordWrapper)
private
fR : TQueryServiceLockStatusW;
public
function GetRecordPtr : pointer; override;
published
procedure setfIsLocked(const val : DWORD);
function getfIsLocked : DWORD;
property fIsLocked : DWORD read getfIsLocked write setfIsLocked;
procedure setdwLockDuration(const val : DWORD);
function getdwLockDuration : DWORD;
property dwLockDuration : DWORD read getdwLockDuration write setdwLockDuration;
end;
type __TServiceStatus__Wrapper = class(TDCRecordWrapper)
private
fR : TServiceStatus;
public
function GetRecordPtr : pointer; override;
published
procedure setdwServiceType(const val : DWORD);
function getdwServiceType : DWORD;
property dwServiceType : DWORD read getdwServiceType write setdwServiceType;
procedure setdwCurrentState(const val : DWORD);
function getdwCurrentState : DWORD;
property dwCurrentState : DWORD read getdwCurrentState write setdwCurrentState;
procedure setdwControlsAccepted(const val : DWORD);
function getdwControlsAccepted : DWORD;
property dwControlsAccepted : DWORD read getdwControlsAccepted write setdwControlsAccepted;
procedure setdwWin32ExitCode(const val : DWORD);
function getdwWin32ExitCode : DWORD;
property dwWin32ExitCode : DWORD read getdwWin32ExitCode write setdwWin32ExitCode;
procedure setdwServiceSpecificExitCode(const val : DWORD);
function getdwServiceSpecificExitCode : DWORD;
property dwServiceSpecificExitCode : DWORD read getdwServiceSpecificExitCode write setdwServiceSpecificExitCode;
procedure setdwCheckPoint(const val : DWORD);
function getdwCheckPoint : DWORD;
property dwCheckPoint : DWORD read getdwCheckPoint write setdwCheckPoint;
procedure setdwWaitHint(const val : DWORD);
function getdwWaitHint : DWORD;
property dwWaitHint : DWORD read getdwWaitHint write setdwWaitHint;
end;
type __TServiceTableEntry__Wrapper = class(TDCRecordWrapper)
private
fR : TServiceTableEntry;
public
function GetRecordPtr : pointer; override;
published
end;
type __TServiceTableEntryA__Wrapper = class(TDCRecordWrapper)
private
fR : TServiceTableEntryA;
public
function GetRecordPtr : pointer; override;
published
end;
type __TServiceTableEntryW__Wrapper = class(TDCRecordWrapper)
private
fR : TServiceTableEntryW;
public
function GetRecordPtr : pointer; override;
published
end;
type
{_T0 = function (p0 : SC_HANDLE;
p1 : DWORD;
p2 : DWORD;
p3 : DWORD;
p4 : PChar;
p5 : PChar;
p6 : LPDWORD;
p7 : PChar;
p8 : PChar;
p9 : PChar;
p10 : PChar): BOOL of object;}

{_T1 = function (p0 : SC_HANDLE;
p1 : DWORD;
p2 : DWORD;
p3 : DWORD;
p4 : PAnsiChar;
p5 : PAnsiChar;
p6 : LPDWORD;
p7 : PAnsiChar;
p8 : PAnsiChar;
p9 : PAnsiChar;
p10 : PAnsiChar): BOOL of object;}

{_T2 = function (p0 : SC_HANDLE;
p1 : DWORD;
p2 : DWORD;
p3 : DWORD;
p4 : PWideChar;
p5 : PWideChar;
p6 : LPDWORD;
p7 : PWideChar;
p8 : PWideChar;
p9 : PWideChar;
p10 : PWideChar): BOOL of object;}

_T3 = function (p0 : SC_HANDLE): BOOL of object;

_T4 = function (p0 : SC_HANDLE;
p1 : DWORD;
const p2 : IDispatch): BOOL of object;

{_T5 = function (p0 : SC_HANDLE;
p1 : PChar;
p2 : PChar;
p3 : DWORD;
p4 : DWORD;
p5 : DWORD;
p6 : DWORD;
p7 : PChar;
p8 : PChar;
p9 : LPDWORD;
p10 : PChar;
p11 : PChar;
p12 : PChar): SC_HANDLE of object;}

{_T6 = function (p0 : SC_HANDLE;
p1 : PAnsiChar;
p2 : PAnsiChar;
p3 : DWORD;
p4 : DWORD;
p5 : DWORD;
p6 : DWORD;
p7 : PAnsiChar;
p8 : PAnsiChar;
p9 : LPDWORD;
p10 : PAnsiChar;
p11 : PAnsiChar;
p12 : PAnsiChar): SC_HANDLE of object;}

{_T7 = function (p0 : SC_HANDLE;
p1 : PWideChar;
p2 : PWideChar;
p3 : DWORD;
p4 : DWORD;
p5 : DWORD;
p6 : DWORD;
p7 : PWideChar;
p8 : PWideChar;
p9 : LPDWORD;
p10 : PWideChar;
p11 : PWideChar;
p12 : PWideChar): SC_HANDLE of object;}

_T8 = _T3;

_T9 = function (p0 : SC_HANDLE;
p1 : DWORD;
const p2 : IDispatch;
p3 : DWORD;
var p4 : DWORD;
var p5 : DWORD): BOOL of object;

_T10 = _T9;

_T11 = _T9;

_T12 = function (p0 : SC_HANDLE;
p1 : DWORD;
p2 : DWORD;
const p3 : IDispatch;
p4 : DWORD;
var p5 : DWORD;
var p6 : DWORD;
var p7 : DWORD): BOOL of object;

_T13 = _T12;

_T14 = _T12;

{_T15 = function (p0 : SC_HANDLE;
p1 : PChar;
p2 : PChar;
var p3 : DWORD): BOOL of object;}

{_T16 = function (p0 : SC_HANDLE;
p1 : PAnsiChar;
p2 : PAnsiChar;
var p3 : DWORD): BOOL of object;}

{_T17 = function (p0 : SC_HANDLE;
p1 : PWideChar;
p2 : PWideChar;
var p3 : DWORD): BOOL of object;}

{_T18 = function (p0 : SC_HANDLE;
p1 : PChar;
p2 : PChar;
var p3 : DWORD): BOOL of object;}

{_T19 = function (p0 : SC_HANDLE;
p1 : PAnsiChar;
p2 : PAnsiChar;
var p3 : DWORD): BOOL of object;}

{_T20 = function (p0 : SC_HANDLE;
p1 : PWideChar;
p2 : PWideChar;
var p3 : DWORD): BOOL of object;}

_T21 = function (p0 : SC_HANDLE): SC_LOCK of object;

_T22 = function (p0 : BOOL): BOOL of object;

{_T23 = function (p0 : PChar;
p1 : PChar;
p2 : DWORD): SC_HANDLE of object;}

{_T24 = function (p0 : PAnsiChar;
p1 : PAnsiChar;
p2 : DWORD): SC_HANDLE of object;}

{_T25 = function (p0 : PWideChar;
p1 : PWideChar;
p2 : DWORD): SC_HANDLE of object;}

{_T26 = function (p0 : SC_HANDLE;
p1 : PChar;
p2 : DWORD): SC_HANDLE of object;}

{_T27 = function (p0 : SC_HANDLE;
p1 : PAnsiChar;
p2 : DWORD): SC_HANDLE of object;}

{_T28 = function (p0 : SC_HANDLE;
p1 : PWideChar;
p2 : DWORD): SC_HANDLE of object;}

{_T29 = function (p0 : SC_HANDLE;
p1 : PQueryServiceConfig;
p2 : DWORD;
var p3 : DWORD): BOOL of object;}

{_T30 = function (p0 : SC_HANDLE;
p1 : PQueryServiceConfigA;
p2 : DWORD;
var p3 : DWORD): BOOL of object;}

{_T31 = function (p0 : SC_HANDLE;
p1 : PQueryServiceConfigW;
p2 : DWORD;
var p3 : DWORD): BOOL of object;}

_T32 = function (p0 : SC_HANDLE;
const p1 : IDispatch;
p2 : DWORD;
var p3 : DWORD): BOOL of object;

_T33 = _T32;

_T34 = _T32;

_T35 = function (p0 : SC_HANDLE;
p1 : SECURITY_INFORMATION;
p2 : PSECURITY_DESCRIPTOR;
p3 : DWORD;
var p4 : DWORD): BOOL of object;

_T36 = function (p0 : SC_HANDLE;
const p1 : IDispatch): BOOL of object;

{_T37 = function (p0 : PChar;
p1 : THandlerFunction): SERVICE_STATUS_HANDLE of object;}

{_T38 = function (p0 : PAnsiChar;
p1 : THandlerFunction): SERVICE_STATUS_HANDLE of object;}

{_T39 = function (p0 : PWideChar;
p1 : THandlerFunction): SERVICE_STATUS_HANDLE of object;}

_T40 = function (p0 : SC_HANDLE;
p1 : SECURITY_INFORMATION;
p2 : PSECURITY_DESCRIPTOR): BOOL of object;

_T41 = function (p0 : SERVICE_STATUS_HANDLE;
const p1 : IDispatch): BOOL of object;

_T42 = function (const p0 : IDispatch): BOOL of object;

_T43 = _T42;

_T44 = _T42;

{_T45 = function (p0 : SC_HANDLE;
p1 : DWORD;
var p2 : PChar): BOOL of object;}

{_T46 = function (p0 : SC_HANDLE;
p1 : DWORD;
var p2 : PAnsiChar): BOOL of object;}

{_T47 = function (p0 : SC_HANDLE;
p1 : DWORD;
var p2 : PWideChar): BOOL of object;}

_T48 = function (p0 : SC_LOCK): BOOL of object;

function ___ENUM_SERVICE_STATUS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function ___ENUM_SERVICE_STATUSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function ___ENUM_SERVICE_STATUSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function ___QUERY_SERVICE_CONFIG__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___QUERY_SERVICE_CONFIG__Wrapper.setdwServiceType(const val : DWORD);
begin
_QUERY_SERVICE_CONFIG(GetRecordPtr^).dwServiceType := val;
end;
function ___QUERY_SERVICE_CONFIG__Wrapper.getdwServiceType : DWORD;
begin
result := _QUERY_SERVICE_CONFIG(GetRecordPtr^).dwServiceType;
end;
procedure ___QUERY_SERVICE_CONFIG__Wrapper.setdwStartType(const val : DWORD);
begin
_QUERY_SERVICE_CONFIG(GetRecordPtr^).dwStartType := val;
end;
function ___QUERY_SERVICE_CONFIG__Wrapper.getdwStartType : DWORD;
begin
result := _QUERY_SERVICE_CONFIG(GetRecordPtr^).dwStartType;
end;
procedure ___QUERY_SERVICE_CONFIG__Wrapper.setdwErrorControl(const val : DWORD);
begin
_QUERY_SERVICE_CONFIG(GetRecordPtr^).dwErrorControl := val;
end;
function ___QUERY_SERVICE_CONFIG__Wrapper.getdwErrorControl : DWORD;
begin
result := _QUERY_SERVICE_CONFIG(GetRecordPtr^).dwErrorControl;
end;
procedure ___QUERY_SERVICE_CONFIG__Wrapper.setdwTagId(const val : DWORD);
begin
_QUERY_SERVICE_CONFIG(GetRecordPtr^).dwTagId := val;
end;
function ___QUERY_SERVICE_CONFIG__Wrapper.getdwTagId : DWORD;
begin
result := _QUERY_SERVICE_CONFIG(GetRecordPtr^).dwTagId;
end;
function ___QUERY_SERVICE_CONFIGA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___QUERY_SERVICE_CONFIGA__Wrapper.setdwServiceType(const val : DWORD);
begin
_QUERY_SERVICE_CONFIGA(GetRecordPtr^).dwServiceType := val;
end;
function ___QUERY_SERVICE_CONFIGA__Wrapper.getdwServiceType : DWORD;
begin
result := _QUERY_SERVICE_CONFIGA(GetRecordPtr^).dwServiceType;
end;
procedure ___QUERY_SERVICE_CONFIGA__Wrapper.setdwStartType(const val : DWORD);
begin
_QUERY_SERVICE_CONFIGA(GetRecordPtr^).dwStartType := val;
end;
function ___QUERY_SERVICE_CONFIGA__Wrapper.getdwStartType : DWORD;
begin
result := _QUERY_SERVICE_CONFIGA(GetRecordPtr^).dwStartType;
end;
procedure ___QUERY_SERVICE_CONFIGA__Wrapper.setdwErrorControl(const val : DWORD);
begin
_QUERY_SERVICE_CONFIGA(GetRecordPtr^).dwErrorControl := val;
end;
function ___QUERY_SERVICE_CONFIGA__Wrapper.getdwErrorControl : DWORD;
begin
result := _QUERY_SERVICE_CONFIGA(GetRecordPtr^).dwErrorControl;
end;
procedure ___QUERY_SERVICE_CONFIGA__Wrapper.setdwTagId(const val : DWORD);
begin
_QUERY_SERVICE_CONFIGA(GetRecordPtr^).dwTagId := val;
end;
function ___QUERY_SERVICE_CONFIGA__Wrapper.getdwTagId : DWORD;
begin
result := _QUERY_SERVICE_CONFIGA(GetRecordPtr^).dwTagId;
end;
function ___QUERY_SERVICE_CONFIGW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___QUERY_SERVICE_CONFIGW__Wrapper.setdwServiceType(const val : DWORD);
begin
_QUERY_SERVICE_CONFIGW(GetRecordPtr^).dwServiceType := val;
end;
function ___QUERY_SERVICE_CONFIGW__Wrapper.getdwServiceType : DWORD;
begin
result := _QUERY_SERVICE_CONFIGW(GetRecordPtr^).dwServiceType;
end;
procedure ___QUERY_SERVICE_CONFIGW__Wrapper.setdwStartType(const val : DWORD);
begin
_QUERY_SERVICE_CONFIGW(GetRecordPtr^).dwStartType := val;
end;
function ___QUERY_SERVICE_CONFIGW__Wrapper.getdwStartType : DWORD;
begin
result := _QUERY_SERVICE_CONFIGW(GetRecordPtr^).dwStartType;
end;
procedure ___QUERY_SERVICE_CONFIGW__Wrapper.setdwErrorControl(const val : DWORD);
begin
_QUERY_SERVICE_CONFIGW(GetRecordPtr^).dwErrorControl := val;
end;
function ___QUERY_SERVICE_CONFIGW__Wrapper.getdwErrorControl : DWORD;
begin
result := _QUERY_SERVICE_CONFIGW(GetRecordPtr^).dwErrorControl;
end;
procedure ___QUERY_SERVICE_CONFIGW__Wrapper.setdwTagId(const val : DWORD);
begin
_QUERY_SERVICE_CONFIGW(GetRecordPtr^).dwTagId := val;
end;
function ___QUERY_SERVICE_CONFIGW__Wrapper.getdwTagId : DWORD;
begin
result := _QUERY_SERVICE_CONFIGW(GetRecordPtr^).dwTagId;
end;
function ___QUERY_SERVICE_LOCK_STATUS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___QUERY_SERVICE_LOCK_STATUS__Wrapper.setfIsLocked(const val : DWORD);
begin
_QUERY_SERVICE_LOCK_STATUS(GetRecordPtr^).fIsLocked := val;
end;
function ___QUERY_SERVICE_LOCK_STATUS__Wrapper.getfIsLocked : DWORD;
begin
result := _QUERY_SERVICE_LOCK_STATUS(GetRecordPtr^).fIsLocked;
end;
procedure ___QUERY_SERVICE_LOCK_STATUS__Wrapper.setdwLockDuration(const val : DWORD);
begin
_QUERY_SERVICE_LOCK_STATUS(GetRecordPtr^).dwLockDuration := val;
end;
function ___QUERY_SERVICE_LOCK_STATUS__Wrapper.getdwLockDuration : DWORD;
begin
result := _QUERY_SERVICE_LOCK_STATUS(GetRecordPtr^).dwLockDuration;
end;
function ___QUERY_SERVICE_LOCK_STATUSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___QUERY_SERVICE_LOCK_STATUSA__Wrapper.setfIsLocked(const val : DWORD);
begin
_QUERY_SERVICE_LOCK_STATUSA(GetRecordPtr^).fIsLocked := val;
end;
function ___QUERY_SERVICE_LOCK_STATUSA__Wrapper.getfIsLocked : DWORD;
begin
result := _QUERY_SERVICE_LOCK_STATUSA(GetRecordPtr^).fIsLocked;
end;
procedure ___QUERY_SERVICE_LOCK_STATUSA__Wrapper.setdwLockDuration(const val : DWORD);
begin
_QUERY_SERVICE_LOCK_STATUSA(GetRecordPtr^).dwLockDuration := val;
end;
function ___QUERY_SERVICE_LOCK_STATUSA__Wrapper.getdwLockDuration : DWORD;
begin
result := _QUERY_SERVICE_LOCK_STATUSA(GetRecordPtr^).dwLockDuration;
end;
function ___QUERY_SERVICE_LOCK_STATUSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___QUERY_SERVICE_LOCK_STATUSW__Wrapper.setfIsLocked(const val : DWORD);
begin
_QUERY_SERVICE_LOCK_STATUSW(GetRecordPtr^).fIsLocked := val;
end;
function ___QUERY_SERVICE_LOCK_STATUSW__Wrapper.getfIsLocked : DWORD;
begin
result := _QUERY_SERVICE_LOCK_STATUSW(GetRecordPtr^).fIsLocked;
end;
procedure ___QUERY_SERVICE_LOCK_STATUSW__Wrapper.setdwLockDuration(const val : DWORD);
begin
_QUERY_SERVICE_LOCK_STATUSW(GetRecordPtr^).dwLockDuration := val;
end;
function ___QUERY_SERVICE_LOCK_STATUSW__Wrapper.getdwLockDuration : DWORD;
begin
result := _QUERY_SERVICE_LOCK_STATUSW(GetRecordPtr^).dwLockDuration;
end;
function ___SERVICE_STATUS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___SERVICE_STATUS__Wrapper.setdwServiceType(const val : DWORD);
begin
_SERVICE_STATUS(GetRecordPtr^).dwServiceType := val;
end;
function ___SERVICE_STATUS__Wrapper.getdwServiceType : DWORD;
begin
result := _SERVICE_STATUS(GetRecordPtr^).dwServiceType;
end;
procedure ___SERVICE_STATUS__Wrapper.setdwCurrentState(const val : DWORD);
begin
_SERVICE_STATUS(GetRecordPtr^).dwCurrentState := val;
end;
function ___SERVICE_STATUS__Wrapper.getdwCurrentState : DWORD;
begin
result := _SERVICE_STATUS(GetRecordPtr^).dwCurrentState;
end;
procedure ___SERVICE_STATUS__Wrapper.setdwControlsAccepted(const val : DWORD);
begin
_SERVICE_STATUS(GetRecordPtr^).dwControlsAccepted := val;
end;
function ___SERVICE_STATUS__Wrapper.getdwControlsAccepted : DWORD;
begin
result := _SERVICE_STATUS(GetRecordPtr^).dwControlsAccepted;
end;
procedure ___SERVICE_STATUS__Wrapper.setdwWin32ExitCode(const val : DWORD);
begin
_SERVICE_STATUS(GetRecordPtr^).dwWin32ExitCode := val;
end;
function ___SERVICE_STATUS__Wrapper.getdwWin32ExitCode : DWORD;
begin
result := _SERVICE_STATUS(GetRecordPtr^).dwWin32ExitCode;
end;
procedure ___SERVICE_STATUS__Wrapper.setdwServiceSpecificExitCode(const val : DWORD);
begin
_SERVICE_STATUS(GetRecordPtr^).dwServiceSpecificExitCode := val;
end;
function ___SERVICE_STATUS__Wrapper.getdwServiceSpecificExitCode : DWORD;
begin
result := _SERVICE_STATUS(GetRecordPtr^).dwServiceSpecificExitCode;
end;
procedure ___SERVICE_STATUS__Wrapper.setdwCheckPoint(const val : DWORD);
begin
_SERVICE_STATUS(GetRecordPtr^).dwCheckPoint := val;
end;
function ___SERVICE_STATUS__Wrapper.getdwCheckPoint : DWORD;
begin
result := _SERVICE_STATUS(GetRecordPtr^).dwCheckPoint;
end;
procedure ___SERVICE_STATUS__Wrapper.setdwWaitHint(const val : DWORD);
begin
_SERVICE_STATUS(GetRecordPtr^).dwWaitHint := val;
end;
function ___SERVICE_STATUS__Wrapper.getdwWaitHint : DWORD;
begin
result := _SERVICE_STATUS(GetRecordPtr^).dwWaitHint;
end;
function ___SERVICE_TABLE_ENTRY__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function ___SERVICE_TABLE_ENTRYA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function ___SERVICE_TABLE_ENTRYW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __ENUM_SERVICE_STATUSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __ENUM_SERVICE_STATUSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __QUERY_SERVICE_CONFIG__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __QUERY_SERVICE_CONFIG__Wrapper.setdwServiceType(const val : DWORD);
begin
QUERY_SERVICE_CONFIG(GetRecordPtr^).dwServiceType := val;
end;
function __QUERY_SERVICE_CONFIG__Wrapper.getdwServiceType : DWORD;
begin
result := QUERY_SERVICE_CONFIG(GetRecordPtr^).dwServiceType;
end;
procedure __QUERY_SERVICE_CONFIG__Wrapper.setdwStartType(const val : DWORD);
begin
QUERY_SERVICE_CONFIG(GetRecordPtr^).dwStartType := val;
end;
function __QUERY_SERVICE_CONFIG__Wrapper.getdwStartType : DWORD;
begin
result := QUERY_SERVICE_CONFIG(GetRecordPtr^).dwStartType;
end;
procedure __QUERY_SERVICE_CONFIG__Wrapper.setdwErrorControl(const val : DWORD);
begin
QUERY_SERVICE_CONFIG(GetRecordPtr^).dwErrorControl := val;
end;
function __QUERY_SERVICE_CONFIG__Wrapper.getdwErrorControl : DWORD;
begin
result := QUERY_SERVICE_CONFIG(GetRecordPtr^).dwErrorControl;
end;
procedure __QUERY_SERVICE_CONFIG__Wrapper.setdwTagId(const val : DWORD);
begin
QUERY_SERVICE_CONFIG(GetRecordPtr^).dwTagId := val;
end;
function __QUERY_SERVICE_CONFIG__Wrapper.getdwTagId : DWORD;
begin
result := QUERY_SERVICE_CONFIG(GetRecordPtr^).dwTagId;
end;
function __QUERY_SERVICE_CONFIGA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __QUERY_SERVICE_CONFIGA__Wrapper.setdwServiceType(const val : DWORD);
begin
QUERY_SERVICE_CONFIGA(GetRecordPtr^).dwServiceType := val;
end;
function __QUERY_SERVICE_CONFIGA__Wrapper.getdwServiceType : DWORD;
begin
result := QUERY_SERVICE_CONFIGA(GetRecordPtr^).dwServiceType;
end;
procedure __QUERY_SERVICE_CONFIGA__Wrapper.setdwStartType(const val : DWORD);
begin
QUERY_SERVICE_CONFIGA(GetRecordPtr^).dwStartType := val;
end;
function __QUERY_SERVICE_CONFIGA__Wrapper.getdwStartType : DWORD;
begin
result := QUERY_SERVICE_CONFIGA(GetRecordPtr^).dwStartType;
end;
procedure __QUERY_SERVICE_CONFIGA__Wrapper.setdwErrorControl(const val : DWORD);
begin
QUERY_SERVICE_CONFIGA(GetRecordPtr^).dwErrorControl := val;
end;
function __QUERY_SERVICE_CONFIGA__Wrapper.getdwErrorControl : DWORD;
begin
result := QUERY_SERVICE_CONFIGA(GetRecordPtr^).dwErrorControl;
end;
procedure __QUERY_SERVICE_CONFIGA__Wrapper.setdwTagId(const val : DWORD);
begin
QUERY_SERVICE_CONFIGA(GetRecordPtr^).dwTagId := val;
end;
function __QUERY_SERVICE_CONFIGA__Wrapper.getdwTagId : DWORD;
begin
result := QUERY_SERVICE_CONFIGA(GetRecordPtr^).dwTagId;
end;
function __QUERY_SERVICE_CONFIGW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __QUERY_SERVICE_CONFIGW__Wrapper.setdwServiceType(const val : DWORD);
begin
QUERY_SERVICE_CONFIGW(GetRecordPtr^).dwServiceType := val;
end;
function __QUERY_SERVICE_CONFIGW__Wrapper.getdwServiceType : DWORD;
begin
result := QUERY_SERVICE_CONFIGW(GetRecordPtr^).dwServiceType;
end;
procedure __QUERY_SERVICE_CONFIGW__Wrapper.setdwStartType(const val : DWORD);
begin
QUERY_SERVICE_CONFIGW(GetRecordPtr^).dwStartType := val;
end;
function __QUERY_SERVICE_CONFIGW__Wrapper.getdwStartType : DWORD;
begin
result := QUERY_SERVICE_CONFIGW(GetRecordPtr^).dwStartType;
end;
procedure __QUERY_SERVICE_CONFIGW__Wrapper.setdwErrorControl(const val : DWORD);
begin
QUERY_SERVICE_CONFIGW(GetRecordPtr^).dwErrorControl := val;
end;
function __QUERY_SERVICE_CONFIGW__Wrapper.getdwErrorControl : DWORD;
begin
result := QUERY_SERVICE_CONFIGW(GetRecordPtr^).dwErrorControl;
end;
procedure __QUERY_SERVICE_CONFIGW__Wrapper.setdwTagId(const val : DWORD);
begin
QUERY_SERVICE_CONFIGW(GetRecordPtr^).dwTagId := val;
end;
function __QUERY_SERVICE_CONFIGW__Wrapper.getdwTagId : DWORD;
begin
result := QUERY_SERVICE_CONFIGW(GetRecordPtr^).dwTagId;
end;
function __QUERY_SERVICE_LOCK_STATUS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __QUERY_SERVICE_LOCK_STATUS__Wrapper.setfIsLocked(const val : DWORD);
begin
QUERY_SERVICE_LOCK_STATUS(GetRecordPtr^).fIsLocked := val;
end;
function __QUERY_SERVICE_LOCK_STATUS__Wrapper.getfIsLocked : DWORD;
begin
result := QUERY_SERVICE_LOCK_STATUS(GetRecordPtr^).fIsLocked;
end;
procedure __QUERY_SERVICE_LOCK_STATUS__Wrapper.setdwLockDuration(const val : DWORD);
begin
QUERY_SERVICE_LOCK_STATUS(GetRecordPtr^).dwLockDuration := val;
end;
function __QUERY_SERVICE_LOCK_STATUS__Wrapper.getdwLockDuration : DWORD;
begin
result := QUERY_SERVICE_LOCK_STATUS(GetRecordPtr^).dwLockDuration;
end;
function __QUERY_SERVICE_LOCK_STATUSA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __QUERY_SERVICE_LOCK_STATUSA__Wrapper.setfIsLocked(const val : DWORD);
begin
QUERY_SERVICE_LOCK_STATUSA(GetRecordPtr^).fIsLocked := val;
end;
function __QUERY_SERVICE_LOCK_STATUSA__Wrapper.getfIsLocked : DWORD;
begin
result := QUERY_SERVICE_LOCK_STATUSA(GetRecordPtr^).fIsLocked;
end;
procedure __QUERY_SERVICE_LOCK_STATUSA__Wrapper.setdwLockDuration(const val : DWORD);
begin
QUERY_SERVICE_LOCK_STATUSA(GetRecordPtr^).dwLockDuration := val;
end;
function __QUERY_SERVICE_LOCK_STATUSA__Wrapper.getdwLockDuration : DWORD;
begin
result := QUERY_SERVICE_LOCK_STATUSA(GetRecordPtr^).dwLockDuration;
end;
function __QUERY_SERVICE_LOCK_STATUSW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __QUERY_SERVICE_LOCK_STATUSW__Wrapper.setfIsLocked(const val : DWORD);
begin
QUERY_SERVICE_LOCK_STATUSW(GetRecordPtr^).fIsLocked := val;
end;
function __QUERY_SERVICE_LOCK_STATUSW__Wrapper.getfIsLocked : DWORD;
begin
result := QUERY_SERVICE_LOCK_STATUSW(GetRecordPtr^).fIsLocked;
end;
procedure __QUERY_SERVICE_LOCK_STATUSW__Wrapper.setdwLockDuration(const val : DWORD);
begin
QUERY_SERVICE_LOCK_STATUSW(GetRecordPtr^).dwLockDuration := val;
end;
function __QUERY_SERVICE_LOCK_STATUSW__Wrapper.getdwLockDuration : DWORD;
begin
result := QUERY_SERVICE_LOCK_STATUSW(GetRecordPtr^).dwLockDuration;
end;
function __SERVICE_STATUS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __SERVICE_STATUS__Wrapper.setdwServiceType(const val : DWORD);
begin
SERVICE_STATUS(GetRecordPtr^).dwServiceType := val;
end;
function __SERVICE_STATUS__Wrapper.getdwServiceType : DWORD;
begin
result := SERVICE_STATUS(GetRecordPtr^).dwServiceType;
end;
procedure __SERVICE_STATUS__Wrapper.setdwCurrentState(const val : DWORD);
begin
SERVICE_STATUS(GetRecordPtr^).dwCurrentState := val;
end;
function __SERVICE_STATUS__Wrapper.getdwCurrentState : DWORD;
begin
result := SERVICE_STATUS(GetRecordPtr^).dwCurrentState;
end;
procedure __SERVICE_STATUS__Wrapper.setdwControlsAccepted(const val : DWORD);
begin
SERVICE_STATUS(GetRecordPtr^).dwControlsAccepted := val;
end;
function __SERVICE_STATUS__Wrapper.getdwControlsAccepted : DWORD;
begin
result := SERVICE_STATUS(GetRecordPtr^).dwControlsAccepted;
end;
procedure __SERVICE_STATUS__Wrapper.setdwWin32ExitCode(const val : DWORD);
begin
SERVICE_STATUS(GetRecordPtr^).dwWin32ExitCode := val;
end;
function __SERVICE_STATUS__Wrapper.getdwWin32ExitCode : DWORD;
begin
result := SERVICE_STATUS(GetRecordPtr^).dwWin32ExitCode;
end;
procedure __SERVICE_STATUS__Wrapper.setdwServiceSpecificExitCode(const val : DWORD);
begin
SERVICE_STATUS(GetRecordPtr^).dwServiceSpecificExitCode := val;
end;
function __SERVICE_STATUS__Wrapper.getdwServiceSpecificExitCode : DWORD;
begin
result := SERVICE_STATUS(GetRecordPtr^).dwServiceSpecificExitCode;
end;
procedure __SERVICE_STATUS__Wrapper.setdwCheckPoint(const val : DWORD);
begin
SERVICE_STATUS(GetRecordPtr^).dwCheckPoint := val;
end;
function __SERVICE_STATUS__Wrapper.getdwCheckPoint : DWORD;
begin
result := SERVICE_STATUS(GetRecordPtr^).dwCheckPoint;
end;
procedure __SERVICE_STATUS__Wrapper.setdwWaitHint(const val : DWORD);
begin
SERVICE_STATUS(GetRecordPtr^).dwWaitHint := val;
end;
function __SERVICE_STATUS__Wrapper.getdwWaitHint : DWORD;
begin
result := SERVICE_STATUS(GetRecordPtr^).dwWaitHint;
end;
function __SERVICE_TABLE_ENTRY__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __SERVICE_TABLE_ENTRYA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __SERVICE_TABLE_ENTRYW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TEnumServiceStatus__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TEnumServiceStatusA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TEnumServiceStatusW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TQueryServiceConfig__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TQueryServiceConfig__Wrapper.setdwServiceType(const val : DWORD);
begin
TQueryServiceConfig(GetRecordPtr^).dwServiceType := val;
end;
function __TQueryServiceConfig__Wrapper.getdwServiceType : DWORD;
begin
result := TQueryServiceConfig(GetRecordPtr^).dwServiceType;
end;
procedure __TQueryServiceConfig__Wrapper.setdwStartType(const val : DWORD);
begin
TQueryServiceConfig(GetRecordPtr^).dwStartType := val;
end;
function __TQueryServiceConfig__Wrapper.getdwStartType : DWORD;
begin
result := TQueryServiceConfig(GetRecordPtr^).dwStartType;
end;
procedure __TQueryServiceConfig__Wrapper.setdwErrorControl(const val : DWORD);
begin
TQueryServiceConfig(GetRecordPtr^).dwErrorControl := val;
end;
function __TQueryServiceConfig__Wrapper.getdwErrorControl : DWORD;
begin
result := TQueryServiceConfig(GetRecordPtr^).dwErrorControl;
end;
procedure __TQueryServiceConfig__Wrapper.setdwTagId(const val : DWORD);
begin
TQueryServiceConfig(GetRecordPtr^).dwTagId := val;
end;
function __TQueryServiceConfig__Wrapper.getdwTagId : DWORD;
begin
result := TQueryServiceConfig(GetRecordPtr^).dwTagId;
end;
function __TQueryServiceConfigA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TQueryServiceConfigA__Wrapper.setdwServiceType(const val : DWORD);
begin
TQueryServiceConfigA(GetRecordPtr^).dwServiceType := val;
end;
function __TQueryServiceConfigA__Wrapper.getdwServiceType : DWORD;
begin
result := TQueryServiceConfigA(GetRecordPtr^).dwServiceType;
end;
procedure __TQueryServiceConfigA__Wrapper.setdwStartType(const val : DWORD);
begin
TQueryServiceConfigA(GetRecordPtr^).dwStartType := val;
end;
function __TQueryServiceConfigA__Wrapper.getdwStartType : DWORD;
begin
result := TQueryServiceConfigA(GetRecordPtr^).dwStartType;
end;
procedure __TQueryServiceConfigA__Wrapper.setdwErrorControl(const val : DWORD);
begin
TQueryServiceConfigA(GetRecordPtr^).dwErrorControl := val;
end;
function __TQueryServiceConfigA__Wrapper.getdwErrorControl : DWORD;
begin
result := TQueryServiceConfigA(GetRecordPtr^).dwErrorControl;
end;
procedure __TQueryServiceConfigA__Wrapper.setdwTagId(const val : DWORD);
begin
TQueryServiceConfigA(GetRecordPtr^).dwTagId := val;
end;
function __TQueryServiceConfigA__Wrapper.getdwTagId : DWORD;
begin
result := TQueryServiceConfigA(GetRecordPtr^).dwTagId;
end;
function __TQueryServiceConfigW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TQueryServiceConfigW__Wrapper.setdwServiceType(const val : DWORD);
begin
TQueryServiceConfigW(GetRecordPtr^).dwServiceType := val;
end;
function __TQueryServiceConfigW__Wrapper.getdwServiceType : DWORD;
begin
result := TQueryServiceConfigW(GetRecordPtr^).dwServiceType;
end;
procedure __TQueryServiceConfigW__Wrapper.setdwStartType(const val : DWORD);
begin
TQueryServiceConfigW(GetRecordPtr^).dwStartType := val;
end;
function __TQueryServiceConfigW__Wrapper.getdwStartType : DWORD;
begin
result := TQueryServiceConfigW(GetRecordPtr^).dwStartType;
end;
procedure __TQueryServiceConfigW__Wrapper.setdwErrorControl(const val : DWORD);
begin
TQueryServiceConfigW(GetRecordPtr^).dwErrorControl := val;
end;
function __TQueryServiceConfigW__Wrapper.getdwErrorControl : DWORD;
begin
result := TQueryServiceConfigW(GetRecordPtr^).dwErrorControl;
end;
procedure __TQueryServiceConfigW__Wrapper.setdwTagId(const val : DWORD);
begin
TQueryServiceConfigW(GetRecordPtr^).dwTagId := val;
end;
function __TQueryServiceConfigW__Wrapper.getdwTagId : DWORD;
begin
result := TQueryServiceConfigW(GetRecordPtr^).dwTagId;
end;
function __TQueryServiceLockStatus__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TQueryServiceLockStatus__Wrapper.setfIsLocked(const val : DWORD);
begin
TQueryServiceLockStatus(GetRecordPtr^).fIsLocked := val;
end;
function __TQueryServiceLockStatus__Wrapper.getfIsLocked : DWORD;
begin
result := TQueryServiceLockStatus(GetRecordPtr^).fIsLocked;
end;
procedure __TQueryServiceLockStatus__Wrapper.setdwLockDuration(const val : DWORD);
begin
TQueryServiceLockStatus(GetRecordPtr^).dwLockDuration := val;
end;
function __TQueryServiceLockStatus__Wrapper.getdwLockDuration : DWORD;
begin
result := TQueryServiceLockStatus(GetRecordPtr^).dwLockDuration;
end;
function __TQueryServiceLockStatusA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TQueryServiceLockStatusA__Wrapper.setfIsLocked(const val : DWORD);
begin
TQueryServiceLockStatusA(GetRecordPtr^).fIsLocked := val;
end;
function __TQueryServiceLockStatusA__Wrapper.getfIsLocked : DWORD;
begin
result := TQueryServiceLockStatusA(GetRecordPtr^).fIsLocked;
end;
procedure __TQueryServiceLockStatusA__Wrapper.setdwLockDuration(const val : DWORD);
begin
TQueryServiceLockStatusA(GetRecordPtr^).dwLockDuration := val;
end;
function __TQueryServiceLockStatusA__Wrapper.getdwLockDuration : DWORD;
begin
result := TQueryServiceLockStatusA(GetRecordPtr^).dwLockDuration;
end;
function __TQueryServiceLockStatusW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TQueryServiceLockStatusW__Wrapper.setfIsLocked(const val : DWORD);
begin
TQueryServiceLockStatusW(GetRecordPtr^).fIsLocked := val;
end;
function __TQueryServiceLockStatusW__Wrapper.getfIsLocked : DWORD;
begin
result := TQueryServiceLockStatusW(GetRecordPtr^).fIsLocked;
end;
procedure __TQueryServiceLockStatusW__Wrapper.setdwLockDuration(const val : DWORD);
begin
TQueryServiceLockStatusW(GetRecordPtr^).dwLockDuration := val;
end;
function __TQueryServiceLockStatusW__Wrapper.getdwLockDuration : DWORD;
begin
result := TQueryServiceLockStatusW(GetRecordPtr^).dwLockDuration;
end;
function __TServiceStatus__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TServiceStatus__Wrapper.setdwServiceType(const val : DWORD);
begin
TServiceStatus(GetRecordPtr^).dwServiceType := val;
end;
function __TServiceStatus__Wrapper.getdwServiceType : DWORD;
begin
result := TServiceStatus(GetRecordPtr^).dwServiceType;
end;
procedure __TServiceStatus__Wrapper.setdwCurrentState(const val : DWORD);
begin
TServiceStatus(GetRecordPtr^).dwCurrentState := val;
end;
function __TServiceStatus__Wrapper.getdwCurrentState : DWORD;
begin
result := TServiceStatus(GetRecordPtr^).dwCurrentState;
end;
procedure __TServiceStatus__Wrapper.setdwControlsAccepted(const val : DWORD);
begin
TServiceStatus(GetRecordPtr^).dwControlsAccepted := val;
end;
function __TServiceStatus__Wrapper.getdwControlsAccepted : DWORD;
begin
result := TServiceStatus(GetRecordPtr^).dwControlsAccepted;
end;
procedure __TServiceStatus__Wrapper.setdwWin32ExitCode(const val : DWORD);
begin
TServiceStatus(GetRecordPtr^).dwWin32ExitCode := val;
end;
function __TServiceStatus__Wrapper.getdwWin32ExitCode : DWORD;
begin
result := TServiceStatus(GetRecordPtr^).dwWin32ExitCode;
end;
procedure __TServiceStatus__Wrapper.setdwServiceSpecificExitCode(const val : DWORD);
begin
TServiceStatus(GetRecordPtr^).dwServiceSpecificExitCode := val;
end;
function __TServiceStatus__Wrapper.getdwServiceSpecificExitCode : DWORD;
begin
result := TServiceStatus(GetRecordPtr^).dwServiceSpecificExitCode;
end;
procedure __TServiceStatus__Wrapper.setdwCheckPoint(const val : DWORD);
begin
TServiceStatus(GetRecordPtr^).dwCheckPoint := val;
end;
function __TServiceStatus__Wrapper.getdwCheckPoint : DWORD;
begin
result := TServiceStatus(GetRecordPtr^).dwCheckPoint;
end;
procedure __TServiceStatus__Wrapper.setdwWaitHint(const val : DWORD);
begin
TServiceStatus(GetRecordPtr^).dwWaitHint := val;
end;
function __TServiceStatus__Wrapper.getdwWaitHint : DWORD;
begin
result := TServiceStatus(GetRecordPtr^).dwWaitHint;
end;
function __TServiceTableEntry__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TServiceTableEntryA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TServiceTableEntryW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __ENUM_SERVICE_STATUS_ : IDispatch;
begin
  result := ___ENUM_SERVICE_STATUS__Wrapper.Create;
end;
function __ENUM_SERVICE_STATUSA_ : IDispatch;
begin
  result := ___ENUM_SERVICE_STATUSA__Wrapper.Create;
end;
function __ENUM_SERVICE_STATUSW_ : IDispatch;
begin
  result := ___ENUM_SERVICE_STATUSW__Wrapper.Create;
end;
function __QUERY_SERVICE_CONFIG_ : IDispatch;
begin
  result := ___QUERY_SERVICE_CONFIG__Wrapper.Create;
end;
function __QUERY_SERVICE_CONFIGA_ : IDispatch;
begin
  result := ___QUERY_SERVICE_CONFIGA__Wrapper.Create;
end;
function __QUERY_SERVICE_CONFIGW_ : IDispatch;
begin
  result := ___QUERY_SERVICE_CONFIGW__Wrapper.Create;
end;
function __QUERY_SERVICE_LOCK_STATUS_ : IDispatch;
begin
  result := ___QUERY_SERVICE_LOCK_STATUS__Wrapper.Create;
end;
function __QUERY_SERVICE_LOCK_STATUSA_ : IDispatch;
begin
  result := ___QUERY_SERVICE_LOCK_STATUSA__Wrapper.Create;
end;
function __QUERY_SERVICE_LOCK_STATUSW_ : IDispatch;
begin
  result := ___QUERY_SERVICE_LOCK_STATUSW__Wrapper.Create;
end;
function __SERVICE_STATUS_ : IDispatch;
begin
  result := ___SERVICE_STATUS__Wrapper.Create;
end;
function __SERVICE_TABLE_ENTRY_ : IDispatch;
begin
  result := ___SERVICE_TABLE_ENTRY__Wrapper.Create;
end;
function __SERVICE_TABLE_ENTRYA_ : IDispatch;
begin
  result := ___SERVICE_TABLE_ENTRYA__Wrapper.Create;
end;
function __SERVICE_TABLE_ENTRYW_ : IDispatch;
begin
  result := ___SERVICE_TABLE_ENTRYW__Wrapper.Create;
end;
function _ENUM_SERVICE_STATUSA_ : IDispatch;
begin
  result := __ENUM_SERVICE_STATUSA__Wrapper.Create;
end;
function _ENUM_SERVICE_STATUSW_ : IDispatch;
begin
  result := __ENUM_SERVICE_STATUSW__Wrapper.Create;
end;
function _QUERY_SERVICE_CONFIG_ : IDispatch;
begin
  result := __QUERY_SERVICE_CONFIG__Wrapper.Create;
end;
function _QUERY_SERVICE_CONFIGA_ : IDispatch;
begin
  result := __QUERY_SERVICE_CONFIGA__Wrapper.Create;
end;
function _QUERY_SERVICE_CONFIGW_ : IDispatch;
begin
  result := __QUERY_SERVICE_CONFIGW__Wrapper.Create;
end;
function _QUERY_SERVICE_LOCK_STATUS_ : IDispatch;
begin
  result := __QUERY_SERVICE_LOCK_STATUS__Wrapper.Create;
end;
function _QUERY_SERVICE_LOCK_STATUSA_ : IDispatch;
begin
  result := __QUERY_SERVICE_LOCK_STATUSA__Wrapper.Create;
end;
function _QUERY_SERVICE_LOCK_STATUSW_ : IDispatch;
begin
  result := __QUERY_SERVICE_LOCK_STATUSW__Wrapper.Create;
end;
function _SERVICE_STATUS_ : IDispatch;
begin
  result := __SERVICE_STATUS__Wrapper.Create;
end;
function _SERVICE_TABLE_ENTRY_ : IDispatch;
begin
  result := __SERVICE_TABLE_ENTRY__Wrapper.Create;
end;
function _SERVICE_TABLE_ENTRYA_ : IDispatch;
begin
  result := __SERVICE_TABLE_ENTRYA__Wrapper.Create;
end;
function _SERVICE_TABLE_ENTRYW_ : IDispatch;
begin
  result := __SERVICE_TABLE_ENTRYW__Wrapper.Create;
end;
function _TEnumServiceStatus_ : IDispatch;
begin
  result := __TEnumServiceStatus__Wrapper.Create;
end;
function _TEnumServiceStatusA_ : IDispatch;
begin
  result := __TEnumServiceStatusA__Wrapper.Create;
end;
function _TEnumServiceStatusW_ : IDispatch;
begin
  result := __TEnumServiceStatusW__Wrapper.Create;
end;
function _TQueryServiceConfig_ : IDispatch;
begin
  result := __TQueryServiceConfig__Wrapper.Create;
end;
function _TQueryServiceConfigA_ : IDispatch;
begin
  result := __TQueryServiceConfigA__Wrapper.Create;
end;
function _TQueryServiceConfigW_ : IDispatch;
begin
  result := __TQueryServiceConfigW__Wrapper.Create;
end;
function _TQueryServiceLockStatus_ : IDispatch;
begin
  result := __TQueryServiceLockStatus__Wrapper.Create;
end;
function _TQueryServiceLockStatusA_ : IDispatch;
begin
  result := __TQueryServiceLockStatusA__Wrapper.Create;
end;
function _TQueryServiceLockStatusW_ : IDispatch;
begin
  result := __TQueryServiceLockStatusW__Wrapper.Create;
end;
function _TServiceStatus_ : IDispatch;
begin
  result := __TServiceStatus__Wrapper.Create;
end;
function _TServiceTableEntry_ : IDispatch;
begin
  result := __TServiceTableEntry__Wrapper.Create;
end;
function _TServiceTableEntryA_ : IDispatch;
begin
  result := __TServiceTableEntryA__Wrapper.Create;
end;
function _TServiceTableEntryW_ : IDispatch;
begin
  result := __TServiceTableEntryW__Wrapper.Create;
end;
function ____ControlService__Wrapper(p0 : SC_HANDLE;
p1 : DWORD;
const p2 : IDispatch): BOOL;
var
__p2 : ^TServiceStatus;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := ControlService(p0,p1,__p2^);
end;

function ____EnumDependentServices__Wrapper(p0 : SC_HANDLE;
p1 : DWORD;
const p2 : IDispatch;
p3 : DWORD;
var p4 : DWORD;
var p5 : DWORD): BOOL;
var
__p2 : ^TEnumServiceStatus;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := EnumDependentServices(p0,p1,__p2^,p3,p4,p5);
end;

function ____EnumDependentServicesA__Wrapper(p0 : SC_HANDLE;
p1 : DWORD;
const p2 : IDispatch;
p3 : DWORD;
var p4 : DWORD;
var p5 : DWORD): BOOL;
var
__p2 : ^TEnumServiceStatusA;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := EnumDependentServicesA(p0,p1,__p2^,p3,p4,p5);
end;

function ____EnumDependentServicesW__Wrapper(p0 : SC_HANDLE;
p1 : DWORD;
const p2 : IDispatch;
p3 : DWORD;
var p4 : DWORD;
var p5 : DWORD): BOOL;
var
__p2 : ^TEnumServiceStatusW;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := EnumDependentServicesW(p0,p1,__p2^,p3,p4,p5);
end;

function ____EnumServicesStatus__Wrapper(p0 : SC_HANDLE;
p1 : DWORD;
p2 : DWORD;
const p3 : IDispatch;
p4 : DWORD;
var p5 : DWORD;
var p6 : DWORD;
var p7 : DWORD): BOOL;
var
__p3 : ^TEnumServiceStatus;
__i3 : IDispatch;
begin
if p3 = nil then exit;
__p3 := (p3 as IDCRecordWrapper).GetRecordPtr;
result := EnumServicesStatus(p0,p1,p2,__p3^,p4,p5,p6,p7);
end;

function ____EnumServicesStatusA__Wrapper(p0 : SC_HANDLE;
p1 : DWORD;
p2 : DWORD;
const p3 : IDispatch;
p4 : DWORD;
var p5 : DWORD;
var p6 : DWORD;
var p7 : DWORD): BOOL;
var
__p3 : ^TEnumServiceStatusA;
__i3 : IDispatch;
begin
if p3 = nil then exit;
__p3 := (p3 as IDCRecordWrapper).GetRecordPtr;
result := EnumServicesStatusA(p0,p1,p2,__p3^,p4,p5,p6,p7);
end;

function ____EnumServicesStatusW__Wrapper(p0 : SC_HANDLE;
p1 : DWORD;
p2 : DWORD;
const p3 : IDispatch;
p4 : DWORD;
var p5 : DWORD;
var p6 : DWORD;
var p7 : DWORD): BOOL;
var
__p3 : ^TEnumServiceStatusW;
__i3 : IDispatch;
begin
if p3 = nil then exit;
__p3 := (p3 as IDCRecordWrapper).GetRecordPtr;
result := EnumServicesStatusW(p0,p1,p2,__p3^,p4,p5,p6,p7);
end;

function ____QueryServiceLockStatus__Wrapper(p0 : SC_HANDLE;
const p1 : IDispatch;
p2 : DWORD;
var p3 : DWORD): BOOL;
var
__p1 : ^TQueryServiceLockStatus;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := QueryServiceLockStatus(p0,__p1^,p2,p3);
end;

function ____QueryServiceLockStatusA__Wrapper(p0 : SC_HANDLE;
const p1 : IDispatch;
p2 : DWORD;
var p3 : DWORD): BOOL;
var
__p1 : ^TQueryServiceLockStatusA;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := QueryServiceLockStatusA(p0,__p1^,p2,p3);
end;

function ____QueryServiceLockStatusW__Wrapper(p0 : SC_HANDLE;
const p1 : IDispatch;
p2 : DWORD;
var p3 : DWORD): BOOL;
var
__p1 : ^TQueryServiceLockStatusW;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := QueryServiceLockStatusW(p0,__p1^,p2,p3);
end;

function ____QueryServiceStatus__Wrapper(p0 : SC_HANDLE;
const p1 : IDispatch): BOOL;
var
__p1 : ^TServiceStatus;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := QueryServiceStatus(p0,__p1^);
end;

function ____SetServiceStatus__Wrapper(p0 : SERVICE_STATUS_HANDLE;
const p1 : IDispatch): BOOL;
var
__p1 : ^TServiceStatus;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := SetServiceStatus(p0,__p1^);
end;

function ____StartServiceCtrlDispatcher__Wrapper(const p0 : IDispatch): BOOL;
var
__p0 : ^TServiceTableEntry;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := StartServiceCtrlDispatcher(__p0^);
end;

function ____StartServiceCtrlDispatcherA__Wrapper(const p0 : IDispatch): BOOL;
var
__p0 : ^TServiceTableEntryA;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := StartServiceCtrlDispatcherA(__p0^);
end;

function ____StartServiceCtrlDispatcherW__Wrapper(const p0 : IDispatch): BOOL;
var
__p0 : ^TServiceTableEntryW;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := StartServiceCtrlDispatcherW(__p0^);
end;


type ___ENUM_SERVICE_STATUS__Wrapper__ = class(___ENUM_SERVICE_STATUS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___ENUM_SERVICE_STATUS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_ENUM_SERVICE_STATUSToVariant(var R : _ENUM_SERVICE_STATUS) : OleVariant;
var
__rw : ___ENUM_SERVICE_STATUS__Wrapper__;
begin
__rw := ___ENUM_SERVICE_STATUS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_ENUM_SERVICE_STATUS(const V : OleVariant) : _ENUM_SERVICE_STATUS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _ENUM_SERVICE_STATUS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___ENUM_SERVICE_STATUSA__Wrapper__ = class(___ENUM_SERVICE_STATUSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___ENUM_SERVICE_STATUSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_ENUM_SERVICE_STATUSAToVariant(var R : _ENUM_SERVICE_STATUSA) : OleVariant;
var
__rw : ___ENUM_SERVICE_STATUSA__Wrapper__;
begin
__rw := ___ENUM_SERVICE_STATUSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_ENUM_SERVICE_STATUSA(const V : OleVariant) : _ENUM_SERVICE_STATUSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _ENUM_SERVICE_STATUSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___ENUM_SERVICE_STATUSW__Wrapper__ = class(___ENUM_SERVICE_STATUSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___ENUM_SERVICE_STATUSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_ENUM_SERVICE_STATUSWToVariant(var R : _ENUM_SERVICE_STATUSW) : OleVariant;
var
__rw : ___ENUM_SERVICE_STATUSW__Wrapper__;
begin
__rw := ___ENUM_SERVICE_STATUSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_ENUM_SERVICE_STATUSW(const V : OleVariant) : _ENUM_SERVICE_STATUSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _ENUM_SERVICE_STATUSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___QUERY_SERVICE_CONFIG__Wrapper__ = class(___QUERY_SERVICE_CONFIG__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___QUERY_SERVICE_CONFIG__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_QUERY_SERVICE_CONFIGToVariant(var R : _QUERY_SERVICE_CONFIG) : OleVariant;
var
__rw : ___QUERY_SERVICE_CONFIG__Wrapper__;
begin
__rw := ___QUERY_SERVICE_CONFIG__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_QUERY_SERVICE_CONFIG(const V : OleVariant) : _QUERY_SERVICE_CONFIG;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _QUERY_SERVICE_CONFIG((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___QUERY_SERVICE_CONFIGA__Wrapper__ = class(___QUERY_SERVICE_CONFIGA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___QUERY_SERVICE_CONFIGA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_QUERY_SERVICE_CONFIGAToVariant(var R : _QUERY_SERVICE_CONFIGA) : OleVariant;
var
__rw : ___QUERY_SERVICE_CONFIGA__Wrapper__;
begin
__rw := ___QUERY_SERVICE_CONFIGA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_QUERY_SERVICE_CONFIGA(const V : OleVariant) : _QUERY_SERVICE_CONFIGA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _QUERY_SERVICE_CONFIGA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___QUERY_SERVICE_CONFIGW__Wrapper__ = class(___QUERY_SERVICE_CONFIGW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___QUERY_SERVICE_CONFIGW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_QUERY_SERVICE_CONFIGWToVariant(var R : _QUERY_SERVICE_CONFIGW) : OleVariant;
var
__rw : ___QUERY_SERVICE_CONFIGW__Wrapper__;
begin
__rw := ___QUERY_SERVICE_CONFIGW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_QUERY_SERVICE_CONFIGW(const V : OleVariant) : _QUERY_SERVICE_CONFIGW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _QUERY_SERVICE_CONFIGW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___QUERY_SERVICE_LOCK_STATUS__Wrapper__ = class(___QUERY_SERVICE_LOCK_STATUS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___QUERY_SERVICE_LOCK_STATUS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_QUERY_SERVICE_LOCK_STATUSToVariant(var R : _QUERY_SERVICE_LOCK_STATUS) : OleVariant;
var
__rw : ___QUERY_SERVICE_LOCK_STATUS__Wrapper__;
begin
__rw := ___QUERY_SERVICE_LOCK_STATUS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_QUERY_SERVICE_LOCK_STATUS(const V : OleVariant) : _QUERY_SERVICE_LOCK_STATUS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _QUERY_SERVICE_LOCK_STATUS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___QUERY_SERVICE_LOCK_STATUSA__Wrapper__ = class(___QUERY_SERVICE_LOCK_STATUSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___QUERY_SERVICE_LOCK_STATUSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_QUERY_SERVICE_LOCK_STATUSAToVariant(var R : _QUERY_SERVICE_LOCK_STATUSA) : OleVariant;
var
__rw : ___QUERY_SERVICE_LOCK_STATUSA__Wrapper__;
begin
__rw := ___QUERY_SERVICE_LOCK_STATUSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_QUERY_SERVICE_LOCK_STATUSA(const V : OleVariant) : _QUERY_SERVICE_LOCK_STATUSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _QUERY_SERVICE_LOCK_STATUSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___QUERY_SERVICE_LOCK_STATUSW__Wrapper__ = class(___QUERY_SERVICE_LOCK_STATUSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___QUERY_SERVICE_LOCK_STATUSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_QUERY_SERVICE_LOCK_STATUSWToVariant(var R : _QUERY_SERVICE_LOCK_STATUSW) : OleVariant;
var
__rw : ___QUERY_SERVICE_LOCK_STATUSW__Wrapper__;
begin
__rw := ___QUERY_SERVICE_LOCK_STATUSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_QUERY_SERVICE_LOCK_STATUSW(const V : OleVariant) : _QUERY_SERVICE_LOCK_STATUSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _QUERY_SERVICE_LOCK_STATUSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___SERVICE_STATUS__Wrapper__ = class(___SERVICE_STATUS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___SERVICE_STATUS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_SERVICE_STATUSToVariant(var R : _SERVICE_STATUS) : OleVariant;
var
__rw : ___SERVICE_STATUS__Wrapper__;
begin
__rw := ___SERVICE_STATUS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_SERVICE_STATUS(const V : OleVariant) : _SERVICE_STATUS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _SERVICE_STATUS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___SERVICE_TABLE_ENTRY__Wrapper__ = class(___SERVICE_TABLE_ENTRY__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___SERVICE_TABLE_ENTRY__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_SERVICE_TABLE_ENTRYToVariant(var R : _SERVICE_TABLE_ENTRY) : OleVariant;
var
__rw : ___SERVICE_TABLE_ENTRY__Wrapper__;
begin
__rw := ___SERVICE_TABLE_ENTRY__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_SERVICE_TABLE_ENTRY(const V : OleVariant) : _SERVICE_TABLE_ENTRY;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _SERVICE_TABLE_ENTRY((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___SERVICE_TABLE_ENTRYA__Wrapper__ = class(___SERVICE_TABLE_ENTRYA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___SERVICE_TABLE_ENTRYA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_SERVICE_TABLE_ENTRYAToVariant(var R : _SERVICE_TABLE_ENTRYA) : OleVariant;
var
__rw : ___SERVICE_TABLE_ENTRYA__Wrapper__;
begin
__rw := ___SERVICE_TABLE_ENTRYA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_SERVICE_TABLE_ENTRYA(const V : OleVariant) : _SERVICE_TABLE_ENTRYA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _SERVICE_TABLE_ENTRYA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___SERVICE_TABLE_ENTRYW__Wrapper__ = class(___SERVICE_TABLE_ENTRYW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___SERVICE_TABLE_ENTRYW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_SERVICE_TABLE_ENTRYWToVariant(var R : _SERVICE_TABLE_ENTRYW) : OleVariant;
var
__rw : ___SERVICE_TABLE_ENTRYW__Wrapper__;
begin
__rw := ___SERVICE_TABLE_ENTRYW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_SERVICE_TABLE_ENTRYW(const V : OleVariant) : _SERVICE_TABLE_ENTRYW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _SERVICE_TABLE_ENTRYW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ENUM_SERVICE_STATUSA__Wrapper__ = class(__ENUM_SERVICE_STATUSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ENUM_SERVICE_STATUSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertENUM_SERVICE_STATUSAToVariant(var R : ENUM_SERVICE_STATUSA) : OleVariant;
var
__rw : __ENUM_SERVICE_STATUSA__Wrapper__;
begin
__rw := __ENUM_SERVICE_STATUSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToENUM_SERVICE_STATUSA(const V : OleVariant) : ENUM_SERVICE_STATUSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ENUM_SERVICE_STATUSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ENUM_SERVICE_STATUSW__Wrapper__ = class(__ENUM_SERVICE_STATUSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ENUM_SERVICE_STATUSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertENUM_SERVICE_STATUSWToVariant(var R : ENUM_SERVICE_STATUSW) : OleVariant;
var
__rw : __ENUM_SERVICE_STATUSW__Wrapper__;
begin
__rw := __ENUM_SERVICE_STATUSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToENUM_SERVICE_STATUSW(const V : OleVariant) : ENUM_SERVICE_STATUSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ENUM_SERVICE_STATUSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __QUERY_SERVICE_CONFIG__Wrapper__ = class(__QUERY_SERVICE_CONFIG__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __QUERY_SERVICE_CONFIG__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertQUERY_SERVICE_CONFIGToVariant(var R : QUERY_SERVICE_CONFIG) : OleVariant;
var
__rw : __QUERY_SERVICE_CONFIG__Wrapper__;
begin
__rw := __QUERY_SERVICE_CONFIG__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToQUERY_SERVICE_CONFIG(const V : OleVariant) : QUERY_SERVICE_CONFIG;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := QUERY_SERVICE_CONFIG((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __QUERY_SERVICE_CONFIGA__Wrapper__ = class(__QUERY_SERVICE_CONFIGA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __QUERY_SERVICE_CONFIGA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertQUERY_SERVICE_CONFIGAToVariant(var R : QUERY_SERVICE_CONFIGA) : OleVariant;
var
__rw : __QUERY_SERVICE_CONFIGA__Wrapper__;
begin
__rw := __QUERY_SERVICE_CONFIGA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToQUERY_SERVICE_CONFIGA(const V : OleVariant) : QUERY_SERVICE_CONFIGA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := QUERY_SERVICE_CONFIGA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __QUERY_SERVICE_CONFIGW__Wrapper__ = class(__QUERY_SERVICE_CONFIGW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __QUERY_SERVICE_CONFIGW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertQUERY_SERVICE_CONFIGWToVariant(var R : QUERY_SERVICE_CONFIGW) : OleVariant;
var
__rw : __QUERY_SERVICE_CONFIGW__Wrapper__;
begin
__rw := __QUERY_SERVICE_CONFIGW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToQUERY_SERVICE_CONFIGW(const V : OleVariant) : QUERY_SERVICE_CONFIGW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := QUERY_SERVICE_CONFIGW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __QUERY_SERVICE_LOCK_STATUS__Wrapper__ = class(__QUERY_SERVICE_LOCK_STATUS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __QUERY_SERVICE_LOCK_STATUS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertQUERY_SERVICE_LOCK_STATUSToVariant(var R : QUERY_SERVICE_LOCK_STATUS) : OleVariant;
var
__rw : __QUERY_SERVICE_LOCK_STATUS__Wrapper__;
begin
__rw := __QUERY_SERVICE_LOCK_STATUS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToQUERY_SERVICE_LOCK_STATUS(const V : OleVariant) : QUERY_SERVICE_LOCK_STATUS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := QUERY_SERVICE_LOCK_STATUS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __QUERY_SERVICE_LOCK_STATUSA__Wrapper__ = class(__QUERY_SERVICE_LOCK_STATUSA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __QUERY_SERVICE_LOCK_STATUSA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertQUERY_SERVICE_LOCK_STATUSAToVariant(var R : QUERY_SERVICE_LOCK_STATUSA) : OleVariant;
var
__rw : __QUERY_SERVICE_LOCK_STATUSA__Wrapper__;
begin
__rw := __QUERY_SERVICE_LOCK_STATUSA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToQUERY_SERVICE_LOCK_STATUSA(const V : OleVariant) : QUERY_SERVICE_LOCK_STATUSA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := QUERY_SERVICE_LOCK_STATUSA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __QUERY_SERVICE_LOCK_STATUSW__Wrapper__ = class(__QUERY_SERVICE_LOCK_STATUSW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __QUERY_SERVICE_LOCK_STATUSW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertQUERY_SERVICE_LOCK_STATUSWToVariant(var R : QUERY_SERVICE_LOCK_STATUSW) : OleVariant;
var
__rw : __QUERY_SERVICE_LOCK_STATUSW__Wrapper__;
begin
__rw := __QUERY_SERVICE_LOCK_STATUSW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToQUERY_SERVICE_LOCK_STATUSW(const V : OleVariant) : QUERY_SERVICE_LOCK_STATUSW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := QUERY_SERVICE_LOCK_STATUSW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SERVICE_STATUS__Wrapper__ = class(__SERVICE_STATUS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SERVICE_STATUS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSERVICE_STATUSToVariant(var R : SERVICE_STATUS) : OleVariant;
var
__rw : __SERVICE_STATUS__Wrapper__;
begin
__rw := __SERVICE_STATUS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSERVICE_STATUS(const V : OleVariant) : SERVICE_STATUS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SERVICE_STATUS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SERVICE_TABLE_ENTRY__Wrapper__ = class(__SERVICE_TABLE_ENTRY__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SERVICE_TABLE_ENTRY__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSERVICE_TABLE_ENTRYToVariant(var R : SERVICE_TABLE_ENTRY) : OleVariant;
var
__rw : __SERVICE_TABLE_ENTRY__Wrapper__;
begin
__rw := __SERVICE_TABLE_ENTRY__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSERVICE_TABLE_ENTRY(const V : OleVariant) : SERVICE_TABLE_ENTRY;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SERVICE_TABLE_ENTRY((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SERVICE_TABLE_ENTRYA__Wrapper__ = class(__SERVICE_TABLE_ENTRYA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SERVICE_TABLE_ENTRYA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSERVICE_TABLE_ENTRYAToVariant(var R : SERVICE_TABLE_ENTRYA) : OleVariant;
var
__rw : __SERVICE_TABLE_ENTRYA__Wrapper__;
begin
__rw := __SERVICE_TABLE_ENTRYA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSERVICE_TABLE_ENTRYA(const V : OleVariant) : SERVICE_TABLE_ENTRYA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SERVICE_TABLE_ENTRYA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SERVICE_TABLE_ENTRYW__Wrapper__ = class(__SERVICE_TABLE_ENTRYW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SERVICE_TABLE_ENTRYW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSERVICE_TABLE_ENTRYWToVariant(var R : SERVICE_TABLE_ENTRYW) : OleVariant;
var
__rw : __SERVICE_TABLE_ENTRYW__Wrapper__;
begin
__rw := __SERVICE_TABLE_ENTRYW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSERVICE_TABLE_ENTRYW(const V : OleVariant) : SERVICE_TABLE_ENTRYW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SERVICE_TABLE_ENTRYW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TEnumServiceStatus__Wrapper__ = class(__TEnumServiceStatus__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TEnumServiceStatus__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTEnumServiceStatusToVariant(var R : TEnumServiceStatus) : OleVariant;
var
__rw : __TEnumServiceStatus__Wrapper__;
begin
__rw := __TEnumServiceStatus__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTEnumServiceStatus(const V : OleVariant) : TEnumServiceStatus;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TEnumServiceStatus((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TEnumServiceStatusA__Wrapper__ = class(__TEnumServiceStatusA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TEnumServiceStatusA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTEnumServiceStatusAToVariant(var R : TEnumServiceStatusA) : OleVariant;
var
__rw : __TEnumServiceStatusA__Wrapper__;
begin
__rw := __TEnumServiceStatusA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTEnumServiceStatusA(const V : OleVariant) : TEnumServiceStatusA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TEnumServiceStatusA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TEnumServiceStatusW__Wrapper__ = class(__TEnumServiceStatusW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TEnumServiceStatusW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTEnumServiceStatusWToVariant(var R : TEnumServiceStatusW) : OleVariant;
var
__rw : __TEnumServiceStatusW__Wrapper__;
begin
__rw := __TEnumServiceStatusW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTEnumServiceStatusW(const V : OleVariant) : TEnumServiceStatusW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TEnumServiceStatusW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TQueryServiceConfig__Wrapper__ = class(__TQueryServiceConfig__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TQueryServiceConfig__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTQueryServiceConfigToVariant(var R : TQueryServiceConfig) : OleVariant;
var
__rw : __TQueryServiceConfig__Wrapper__;
begin
__rw := __TQueryServiceConfig__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTQueryServiceConfig(const V : OleVariant) : TQueryServiceConfig;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TQueryServiceConfig((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TQueryServiceConfigA__Wrapper__ = class(__TQueryServiceConfigA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TQueryServiceConfigA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTQueryServiceConfigAToVariant(var R : TQueryServiceConfigA) : OleVariant;
var
__rw : __TQueryServiceConfigA__Wrapper__;
begin
__rw := __TQueryServiceConfigA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTQueryServiceConfigA(const V : OleVariant) : TQueryServiceConfigA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TQueryServiceConfigA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TQueryServiceConfigW__Wrapper__ = class(__TQueryServiceConfigW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TQueryServiceConfigW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTQueryServiceConfigWToVariant(var R : TQueryServiceConfigW) : OleVariant;
var
__rw : __TQueryServiceConfigW__Wrapper__;
begin
__rw := __TQueryServiceConfigW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTQueryServiceConfigW(const V : OleVariant) : TQueryServiceConfigW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TQueryServiceConfigW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TQueryServiceLockStatus__Wrapper__ = class(__TQueryServiceLockStatus__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TQueryServiceLockStatus__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTQueryServiceLockStatusToVariant(var R : TQueryServiceLockStatus) : OleVariant;
var
__rw : __TQueryServiceLockStatus__Wrapper__;
begin
__rw := __TQueryServiceLockStatus__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTQueryServiceLockStatus(const V : OleVariant) : TQueryServiceLockStatus;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TQueryServiceLockStatus((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TQueryServiceLockStatusA__Wrapper__ = class(__TQueryServiceLockStatusA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TQueryServiceLockStatusA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTQueryServiceLockStatusAToVariant(var R : TQueryServiceLockStatusA) : OleVariant;
var
__rw : __TQueryServiceLockStatusA__Wrapper__;
begin
__rw := __TQueryServiceLockStatusA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTQueryServiceLockStatusA(const V : OleVariant) : TQueryServiceLockStatusA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TQueryServiceLockStatusA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TQueryServiceLockStatusW__Wrapper__ = class(__TQueryServiceLockStatusW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TQueryServiceLockStatusW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTQueryServiceLockStatusWToVariant(var R : TQueryServiceLockStatusW) : OleVariant;
var
__rw : __TQueryServiceLockStatusW__Wrapper__;
begin
__rw := __TQueryServiceLockStatusW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTQueryServiceLockStatusW(const V : OleVariant) : TQueryServiceLockStatusW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TQueryServiceLockStatusW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TServiceStatus__Wrapper__ = class(__TServiceStatus__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TServiceStatus__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTServiceStatusToVariant(var R : TServiceStatus) : OleVariant;
var
__rw : __TServiceStatus__Wrapper__;
begin
__rw := __TServiceStatus__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTServiceStatus(const V : OleVariant) : TServiceStatus;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TServiceStatus((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TServiceTableEntry__Wrapper__ = class(__TServiceTableEntry__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TServiceTableEntry__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTServiceTableEntryToVariant(var R : TServiceTableEntry) : OleVariant;
var
__rw : __TServiceTableEntry__Wrapper__;
begin
__rw := __TServiceTableEntry__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTServiceTableEntry(const V : OleVariant) : TServiceTableEntry;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TServiceTableEntry((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TServiceTableEntryA__Wrapper__ = class(__TServiceTableEntryA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TServiceTableEntryA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTServiceTableEntryAToVariant(var R : TServiceTableEntryA) : OleVariant;
var
__rw : __TServiceTableEntryA__Wrapper__;
begin
__rw := __TServiceTableEntryA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTServiceTableEntryA(const V : OleVariant) : TServiceTableEntryA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TServiceTableEntryA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TServiceTableEntryW__Wrapper__ = class(__TServiceTableEntryW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TServiceTableEntryW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTServiceTableEntryWToVariant(var R : TServiceTableEntryW) : OleVariant;
var
__rw : __TServiceTableEntryW__Wrapper__;
begin
__rw := __TServiceTableEntryW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTServiceTableEntryW(const V : OleVariant) : TServiceTableEntryW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TServiceTableEntryW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..63] of string = (
'SERVICES_ACTIVE_DATABASEA'
,'SERVICES_ACTIVE_DATABASEW'
,'SERVICES_ACTIVE_DATABASE'
,'SERVICES_FAILED_DATABASEA'
,'SERVICES_FAILED_DATABASEW'
,'SERVICES_FAILED_DATABASE'
,'SC_GROUP_IDENTIFIERA'
,'SC_GROUP_IDENTIFIERW'
,'SC_GROUP_IDENTIFIER'
,'SERVICE_NO_CHANGE'
,'SERVICE_ACTIVE'
,'SERVICE_INACTIVE'
,'SERVICE_STATE_ALL'
,'SERVICE_CONTROL_STOP'
,'SERVICE_CONTROL_PAUSE'
,'SERVICE_CONTROL_CONTINUE'
,'SERVICE_CONTROL_INTERROGATE'
,'SERVICE_CONTROL_SHUTDOWN'
,'SERVICE_STOPPED'
,'SERVICE_START_PENDING'
,'SERVICE_STOP_PENDING'
,'SERVICE_RUNNING'
,'SERVICE_CONTINUE_PENDING'
,'SERVICE_PAUSE_PENDING'
,'SERVICE_PAUSED'
,'SERVICE_ACCEPT_STOP'
,'SERVICE_ACCEPT_PAUSE_CONTINUE'
,'SERVICE_ACCEPT_SHUTDOWN'
,'SC_MANAGER_CONNECT'
,'SC_MANAGER_CREATE_SERVICE'
,'SC_MANAGER_ENUMERATE_SERVICE'
,'SC_MANAGER_LOCK'
,'SC_MANAGER_QUERY_LOCK_STATUS'
,'SC_MANAGER_MODIFY_BOOT_CONFIG'
,'SC_MANAGER_ALL_ACCESS'
,'SERVICE_QUERY_CONFIG'
,'SERVICE_CHANGE_CONFIG'
,'SERVICE_QUERY_STATUS'
,'SERVICE_ENUMERATE_DEPENDENTS'
,'SERVICE_START'
,'SERVICE_STOP'
,'SERVICE_PAUSE_CONTINUE'
,'SERVICE_INTERROGATE'
,'SERVICE_USER_DEFINED_CONTROL'
,'SERVICE_ALL_ACCESS'
,'SERVICE_KERNEL_DRIVER'
,'SERVICE_FILE_SYSTEM_DRIVER'
,'SERVICE_ADAPTER'
,'SERVICE_RECOGNIZER_DRIVER'
,'SERVICE_DRIVER'
,'SERVICE_WIN32_OWN_PROCESS'
,'SERVICE_WIN32_SHARE_PROCESS'
,'SERVICE_WIN32'
,'SERVICE_INTERACTIVE_PROCESS'
,'SERVICE_TYPE_ALL'
,'SERVICE_BOOT_START'
,'SERVICE_SYSTEM_START'
,'SERVICE_AUTO_START'
,'SERVICE_DEMAND_START'
,'SERVICE_DISABLED'
,'SERVICE_ERROR_IGNORE'
,'SERVICE_ERROR_NORMAL'
,'SERVICE_ERROR_SEVERE'
,'SERVICE_ERROR_CRITICAL'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,SERVICES_ACTIVE_DATABASEA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,SERVICES_ACTIVE_DATABASEW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,SERVICES_ACTIVE_DATABASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,SERVICES_FAILED_DATABASEA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,SERVICES_FAILED_DATABASEW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,SERVICES_FAILED_DATABASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,SC_GROUP_IDENTIFIERA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,SC_GROUP_IDENTIFIERW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,SC_GROUP_IDENTIFIER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,SERVICE_NO_CHANGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,SERVICE_ACTIVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,SERVICE_INACTIVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,SERVICE_STATE_ALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,SERVICE_CONTROL_STOP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,SERVICE_CONTROL_PAUSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,SERVICE_CONTROL_CONTINUE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,SERVICE_CONTROL_INTERROGATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,SERVICE_CONTROL_SHUTDOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,SERVICE_STOPPED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,SERVICE_START_PENDING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,SERVICE_STOP_PENDING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,SERVICE_RUNNING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,SERVICE_CONTINUE_PENDING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,SERVICE_PAUSE_PENDING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,SERVICE_PAUSED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,SERVICE_ACCEPT_STOP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,SERVICE_ACCEPT_PAUSE_CONTINUE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,SERVICE_ACCEPT_SHUTDOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,SC_MANAGER_CONNECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,SC_MANAGER_CREATE_SERVICE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,SC_MANAGER_ENUMERATE_SERVICE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,SC_MANAGER_LOCK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,SC_MANAGER_QUERY_LOCK_STATUS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,SC_MANAGER_MODIFY_BOOT_CONFIG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,SC_MANAGER_ALL_ACCESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,SERVICE_QUERY_CONFIG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,SERVICE_CHANGE_CONFIG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,SERVICE_QUERY_STATUS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,SERVICE_ENUMERATE_DEPENDENTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,SERVICE_START));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,SERVICE_STOP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,SERVICE_PAUSE_CONTINUE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,SERVICE_INTERROGATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,SERVICE_USER_DEFINED_CONTROL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,SERVICE_ALL_ACCESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,SERVICE_KERNEL_DRIVER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,SERVICE_FILE_SYSTEM_DRIVER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,SERVICE_ADAPTER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,SERVICE_RECOGNIZER_DRIVER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,SERVICE_DRIVER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,SERVICE_WIN32_OWN_PROCESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,SERVICE_WIN32_SHARE_PROCESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,SERVICE_WIN32));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,SERVICE_INTERACTIVE_PROCESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,SERVICE_TYPE_ALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,SERVICE_BOOT_START));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,SERVICE_SYSTEM_START));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,SERVICE_AUTO_START));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,SERVICE_DEMAND_START));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,SERVICE_DISABLED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,SERVICE_ERROR_IGNORE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,SERVICE_ERROR_NORMAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,SERVICE_ERROR_SEVERE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,SERVICE_ERROR_CRITICAL));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..59] of string = (
'_ENUM_SERVICE_STATUS'
,'_ENUM_SERVICE_STATUSA'
,'_ENUM_SERVICE_STATUSW'
,'_QUERY_SERVICE_CONFIG'
,'_QUERY_SERVICE_CONFIGA'
,'_QUERY_SERVICE_CONFIGW'
,'_QUERY_SERVICE_LOCK_STATUS'
,'_QUERY_SERVICE_LOCK_STATUSA'
,'_QUERY_SERVICE_LOCK_STATUSW'
,'_SERVICE_STATUS'
,'_SERVICE_TABLE_ENTRY'
,'_SERVICE_TABLE_ENTRYA'
,'_SERVICE_TABLE_ENTRYW'
,'ENUM_SERVICE_STATUSA'
,'ENUM_SERVICE_STATUSW'
,'QUERY_SERVICE_CONFIG'
,'QUERY_SERVICE_CONFIGA'
,'QUERY_SERVICE_CONFIGW'
,'QUERY_SERVICE_LOCK_STATUS'
,'QUERY_SERVICE_LOCK_STATUSA'
,'QUERY_SERVICE_LOCK_STATUSW'
,'SERVICE_STATUS'
,'SERVICE_TABLE_ENTRY'
,'SERVICE_TABLE_ENTRYA'
,'SERVICE_TABLE_ENTRYW'
,'TEnumServiceStatus'
,'TEnumServiceStatusA'
,'TEnumServiceStatusW'
,'TQueryServiceConfig'
,'TQueryServiceConfigA'
,'TQueryServiceConfigW'
,'TQueryServiceLockStatus'
,'TQueryServiceLockStatusA'
,'TQueryServiceLockStatusW'
,'TServiceStatus'
,'TServiceTableEntry'
,'TServiceTableEntryA'
,'TServiceTableEntryW'
,'CloseServiceHandle'
,'ControlService'
,'DeleteService'
,'EnumDependentServices'
,'EnumDependentServicesA'
,'EnumDependentServicesW'
,'EnumServicesStatus'
,'EnumServicesStatusA'
,'EnumServicesStatusW'
,'LockServiceDatabase'
,'NotifyBootConfigStatus'
,'QueryServiceLockStatus'
,'QueryServiceLockStatusA'
,'QueryServiceLockStatusW'
,'QueryServiceObjectSecurity'
,'QueryServiceStatus'
,'SetServiceObjectSecurity'
,'SetServiceStatus'
,'StartServiceCtrlDispatcher'
,'StartServiceCtrlDispatcherA'
,'StartServiceCtrlDispatcherW'
,'UnlockServiceDatabase'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(__ENUM_SERVICE_STATUS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(__ENUM_SERVICE_STATUSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(__ENUM_SERVICE_STATUSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(__QUERY_SERVICE_CONFIG_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(__QUERY_SERVICE_CONFIGA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[5],Addr(__QUERY_SERVICE_CONFIGW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[6],Addr(__QUERY_SERVICE_LOCK_STATUS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[7],Addr(__QUERY_SERVICE_LOCK_STATUSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[8],Addr(__QUERY_SERVICE_LOCK_STATUSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[9],Addr(__SERVICE_STATUS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[10],Addr(__SERVICE_TABLE_ENTRY_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[11],Addr(__SERVICE_TABLE_ENTRYA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[12],Addr(__SERVICE_TABLE_ENTRYW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[13],Addr(_ENUM_SERVICE_STATUSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[14],Addr(_ENUM_SERVICE_STATUSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[15],Addr(_QUERY_SERVICE_CONFIG_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[16],Addr(_QUERY_SERVICE_CONFIGA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[17],Addr(_QUERY_SERVICE_CONFIGW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[18],Addr(_QUERY_SERVICE_LOCK_STATUS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[19],Addr(_QUERY_SERVICE_LOCK_STATUSA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[20],Addr(_QUERY_SERVICE_LOCK_STATUSW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[21],Addr(_SERVICE_STATUS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[22],Addr(_SERVICE_TABLE_ENTRY_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[23],Addr(_SERVICE_TABLE_ENTRYA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[24],Addr(_SERVICE_TABLE_ENTRYW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[25],Addr(_TEnumServiceStatus_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[26],Addr(_TEnumServiceStatusA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[27],Addr(_TEnumServiceStatusW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[28],Addr(_TQueryServiceConfig_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[29],Addr(_TQueryServiceConfigA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[30],Addr(_TQueryServiceConfigW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[31],Addr(_TQueryServiceLockStatus_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[32],Addr(_TQueryServiceLockStatusA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[33],Addr(_TQueryServiceLockStatusW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[34],Addr(_TServiceStatus_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[35],Addr(_TServiceTableEntry_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[36],Addr(_TServiceTableEntryA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[37],Addr(_TServiceTableEntryW_)));
RegisterProc(nil,MethodNames[38],mtProc,TypeInfo(_T3),[
TypeInfo(SC_HANDLE),TypeInfo(BOOL)],Addr(CloseServiceHandle),cStdCall);

RegisterProc(nil,MethodNames[39],mtProc,TypeInfo(_T4),[
TypeInfo(SC_HANDLE),
TypeInfo(DWORD),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____ControlService__Wrapper),cRegister);

RegisterProc(nil,MethodNames[40],mtProc,TypeInfo(_T8),[
TypeInfo(SC_HANDLE),TypeInfo(BOOL)],Addr(DeleteService),cStdCall);

RegisterProc(nil,MethodNames[41],mtProc,TypeInfo(_T9),[
TypeInfo(SC_HANDLE),
TypeInfo(DWORD),
TypeInfo(IDispatch),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(____EnumDependentServices__Wrapper),cRegister);

RegisterProc(nil,MethodNames[42],mtProc,TypeInfo(_T10),[
TypeInfo(SC_HANDLE),
TypeInfo(DWORD),
TypeInfo(IDispatch),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(____EnumDependentServicesA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[43],mtProc,TypeInfo(_T11),[
TypeInfo(SC_HANDLE),
TypeInfo(DWORD),
TypeInfo(IDispatch),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(____EnumDependentServicesW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[44],mtProc,TypeInfo(_T12),[
TypeInfo(SC_HANDLE),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(IDispatch),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(____EnumServicesStatus__Wrapper),cRegister);

RegisterProc(nil,MethodNames[45],mtProc,TypeInfo(_T13),[
TypeInfo(SC_HANDLE),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(IDispatch),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(____EnumServicesStatusA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[46],mtProc,TypeInfo(_T14),[
TypeInfo(SC_HANDLE),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(IDispatch),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(____EnumServicesStatusW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[47],mtProc,TypeInfo(_T21),[
TypeInfo(SC_HANDLE),TypeInfoPointer],Addr(LockServiceDatabase),cStdCall);

RegisterProc(nil,MethodNames[48],mtProc,TypeInfo(_T22),[
TypeInfo(BOOL),TypeInfo(BOOL)],Addr(NotifyBootConfigStatus),cStdCall);

RegisterProc(nil,MethodNames[49],mtProc,TypeInfo(_T32),[
TypeInfo(SC_HANDLE),
TypeInfo(IDispatch),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(____QueryServiceLockStatus__Wrapper),cRegister);

RegisterProc(nil,MethodNames[50],mtProc,TypeInfo(_T33),[
TypeInfo(SC_HANDLE),
TypeInfo(IDispatch),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(____QueryServiceLockStatusA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[51],mtProc,TypeInfo(_T34),[
TypeInfo(SC_HANDLE),
TypeInfo(IDispatch),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(____QueryServiceLockStatusW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[52],mtProc,TypeInfo(_T35),[
TypeInfo(SC_HANDLE),
TypeInfo(SECURITY_INFORMATION),
TypeInfoPointer,
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(QueryServiceObjectSecurity),cStdCall);

RegisterProc(nil,MethodNames[53],mtProc,TypeInfo(_T36),[
TypeInfo(SC_HANDLE),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____QueryServiceStatus__Wrapper),cRegister);

RegisterProc(nil,MethodNames[54],mtProc,TypeInfo(_T40),[
TypeInfo(SC_HANDLE),
TypeInfo(SECURITY_INFORMATION),
TypeInfoPointer,TypeInfo(BOOL)],Addr(SetServiceObjectSecurity),cStdCall);

RegisterProc(nil,MethodNames[55],mtProc,TypeInfo(_T41),[
TypeInfo(SERVICE_STATUS_HANDLE),
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____SetServiceStatus__Wrapper),cRegister);

RegisterProc(nil,MethodNames[56],mtProc,TypeInfo(_T42),[
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____StartServiceCtrlDispatcher__Wrapper),cRegister);

RegisterProc(nil,MethodNames[57],mtProc,TypeInfo(_T43),[
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____StartServiceCtrlDispatcherA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[58],mtProc,TypeInfo(_T44),[
TypeInfo(IDispatch),TypeInfo(BOOL)],Addr(____StartServiceCtrlDispatcherW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[59],mtProc,TypeInfo(_T48),[
TypeInfoPointer,TypeInfo(BOOL)],Addr(UnlockServiceDatabase),cStdCall);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'ChangeServiceConfig',mtProc,TypeInfo(_T0),[
TypeInfo(SC_HANDLE),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfoPChar,
TypeInfoPChar,
TypeInfoPointer,
TypeInfoPChar,
TypeInfoPChar,
TypeInfoPChar,
TypeInfoPChar,TypeInfo(BOOL)],Addr(ChangeServiceConfig),cStdCall)}

{RegisterProc(nil,'ChangeServiceConfigA',mtProc,TypeInfo(_T1),[
TypeInfo(SC_HANDLE),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfoPChar,
TypeInfoPChar,
TypeInfoPointer,
TypeInfoPChar,
TypeInfoPChar,
TypeInfoPChar,
TypeInfoPChar,TypeInfo(BOOL)],Addr(ChangeServiceConfigA),cStdCall)}

{RegisterProc(nil,'ChangeServiceConfigW',mtProc,TypeInfo(_T2),[
TypeInfo(SC_HANDLE),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfoPWideChar,
TypeInfoPWideChar,
TypeInfoPointer,
TypeInfoPWideChar,
TypeInfoPWideChar,
TypeInfoPWideChar,
TypeInfoPWideChar,TypeInfo(BOOL)],Addr(ChangeServiceConfigW),cStdCall)}

{RegisterProc(nil,'CreateService',mtProc,TypeInfo(_T5),[
TypeInfo(SC_HANDLE),
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfoPChar,
TypeInfoPChar,
TypeInfoPointer,
TypeInfoPChar,
TypeInfoPChar,
TypeInfoPChar,TypeInfo(SC_HANDLE)],Addr(CreateService),cStdCall)}

{RegisterProc(nil,'CreateServiceA',mtProc,TypeInfo(_T6),[
TypeInfo(SC_HANDLE),
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfoPChar,
TypeInfoPChar,
TypeInfoPointer,
TypeInfoPChar,
TypeInfoPChar,
TypeInfoPChar,TypeInfo(SC_HANDLE)],Addr(CreateServiceA),cStdCall)}

{RegisterProc(nil,'CreateServiceW',mtProc,TypeInfo(_T7),[
TypeInfo(SC_HANDLE),
TypeInfoPWideChar,
TypeInfoPWideChar,
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfoPWideChar,
TypeInfoPWideChar,
TypeInfoPointer,
TypeInfoPWideChar,
TypeInfoPWideChar,
TypeInfoPWideChar,TypeInfo(SC_HANDLE)],Addr(CreateServiceW),cStdCall)}

{RegisterProc(nil,'GetServiceKeyName',mtProc,TypeInfo(_T15),[
TypeInfo(SC_HANDLE),
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(GetServiceKeyName),cStdCall)}

{RegisterProc(nil,'GetServiceKeyNameA',mtProc,TypeInfo(_T16),[
TypeInfo(SC_HANDLE),
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(GetServiceKeyNameA),cStdCall)}

{RegisterProc(nil,'GetServiceKeyNameW',mtProc,TypeInfo(_T17),[
TypeInfo(SC_HANDLE),
TypeInfoPWideChar,
TypeInfoPWideChar,
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(GetServiceKeyNameW),cStdCall)}

{RegisterProc(nil,'GetServiceDisplayName',mtProc,TypeInfo(_T18),[
TypeInfo(SC_HANDLE),
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(GetServiceDisplayName),cStdCall)}

{RegisterProc(nil,'GetServiceDisplayNameA',mtProc,TypeInfo(_T19),[
TypeInfo(SC_HANDLE),
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(GetServiceDisplayNameA),cStdCall)}

{RegisterProc(nil,'GetServiceDisplayNameW',mtProc,TypeInfo(_T20),[
TypeInfo(SC_HANDLE),
TypeInfoPWideChar,
TypeInfoPWideChar,
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(GetServiceDisplayNameW),cStdCall)}

{RegisterProc(nil,'OpenSCManager',mtProc,TypeInfo(_T23),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(DWORD),TypeInfo(SC_HANDLE)],Addr(OpenSCManager),cStdCall)}

{RegisterProc(nil,'OpenSCManagerA',mtProc,TypeInfo(_T24),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(DWORD),TypeInfo(SC_HANDLE)],Addr(OpenSCManagerA),cStdCall)}

{RegisterProc(nil,'OpenSCManagerW',mtProc,TypeInfo(_T25),[
TypeInfoPWideChar,
TypeInfoPWideChar,
TypeInfo(DWORD),TypeInfo(SC_HANDLE)],Addr(OpenSCManagerW),cStdCall)}

{RegisterProc(nil,'OpenService',mtProc,TypeInfo(_T26),[
TypeInfo(SC_HANDLE),
TypeInfoPChar,
TypeInfo(DWORD),TypeInfo(SC_HANDLE)],Addr(OpenService),cStdCall)}

{RegisterProc(nil,'OpenServiceA',mtProc,TypeInfo(_T27),[
TypeInfo(SC_HANDLE),
TypeInfoPChar,
TypeInfo(DWORD),TypeInfo(SC_HANDLE)],Addr(OpenServiceA),cStdCall)}

{RegisterProc(nil,'OpenServiceW',mtProc,TypeInfo(_T28),[
TypeInfo(SC_HANDLE),
TypeInfoPWideChar,
TypeInfo(DWORD),TypeInfo(SC_HANDLE)],Addr(OpenServiceW),cStdCall)}

{RegisterProc(nil,'QueryServiceConfig',mtProc,TypeInfo(_T29),[
TypeInfo(SC_HANDLE),
TypeInfoPointer,
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(QueryServiceConfig),cStdCall)}

{RegisterProc(nil,'QueryServiceConfigA',mtProc,TypeInfo(_T30),[
TypeInfo(SC_HANDLE),
TypeInfoPointer,
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(QueryServiceConfigA),cStdCall)}

{RegisterProc(nil,'QueryServiceConfigW',mtProc,TypeInfo(_T31),[
TypeInfo(SC_HANDLE),
TypeInfoPointer,
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(BOOL)],Addr(QueryServiceConfigW),cStdCall)}

{RegisterProc(nil,'RegisterServiceCtrlHandler',mtProc,TypeInfo(_T37),[
TypeInfoPChar,
TypeInfoPointer,TypeInfo(SERVICE_STATUS_HANDLE)],Addr(RegisterServiceCtrlHandler),cStdCall)}

{RegisterProc(nil,'RegisterServiceCtrlHandlerA',mtProc,TypeInfo(_T38),[
TypeInfoPChar,
TypeInfoPointer,TypeInfo(SERVICE_STATUS_HANDLE)],Addr(RegisterServiceCtrlHandlerA),cStdCall)}

{RegisterProc(nil,'RegisterServiceCtrlHandlerW',mtProc,TypeInfo(_T39),[
TypeInfoPWideChar,
TypeInfoPointer,TypeInfo(SERVICE_STATUS_HANDLE)],Addr(RegisterServiceCtrlHandlerW),cStdCall)}

{RegisterProc(nil,'StartService',mtProc,TypeInfo(_T45),[
TypeInfo(SC_HANDLE),
TypeInfo(DWORD),
TypeInfoPChar,TypeInfo(BOOL)],Addr(StartService),cStdCall)}

{RegisterProc(nil,'StartServiceA',mtProc,TypeInfo(_T46),[
TypeInfo(SC_HANDLE),
TypeInfo(DWORD),
TypeInfoPChar,TypeInfo(BOOL)],Addr(StartServiceA),cStdCall)}

{RegisterProc(nil,'StartServiceW',mtProc,TypeInfo(_T47),[
TypeInfo(SC_HANDLE),
TypeInfo(DWORD),
TypeInfoPWideChar,TypeInfo(BOOL)],Addr(StartServiceW),cStdCall)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
