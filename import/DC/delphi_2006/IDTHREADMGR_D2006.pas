{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDTHREADMGR_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdException,
  IdBaseComponent,
  IdGlobal,
  IdThread,
  SyncObjs,
  IdThreadMgr;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = function : TIdThread of object;

_T1 = _T0;

_T2 = procedure (p0 : TIdThread) of object;

_T3 = procedure  of object;

function __DC__GetTIdThreadMgr__ActiveThreads(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdThreadMgr(Instance).ActiveThreads);
end;

function __DC__GetTIdThreadMgr__ThreadPriority(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdThreadMgr(Instance).ThreadPriority;
end;

procedure __DC__SetTIdThreadMgr__ThreadPriority(Instance : TObject; Params : PVariantArgList);
begin
TIdThreadMgr(Instance).ThreadPriority:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TIdThreadMgr,'ActiveThreads',__DC__GetTIdThreadMgr__ActiveThreads,nil);
RegisterProperty(TIdThreadMgr,'ThreadPriority',__DC__GetTIdThreadMgr__ThreadPriority,__DC__SetTIdThreadMgr__ThreadPriority);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..2] of TClass = (
EIdThreadClassNotSpecified,
EIdThreadMgrError,
TIdThreadMgr
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TIdThreadMgr,'CreateNewThread',TypeInfo(_T0),[TypeInfo(TIdThread)], pointer(48));
RegRegisterMethod(TIdThreadMgr,'CreateNewThread',TypeInfo(_T0),[TypeInfo(TIdThread)],  getVMTProcAddr('TIdThreadMgr','CreateNewThread',48));


//RegRegisterMethod(TIdThreadMgr,'GetThread',TypeInfo(_T1),[TypeInfo(TIdThread)], pointer(52));
RegRegisterMethod(TIdThreadMgr,'GetThread',TypeInfo(_T1),[TypeInfo(TIdThread)],  getVMTProcAddr('TIdThreadMgr','GetThread',52));


//RegRegisterMethod(TIdThreadMgr,'ReleaseThread',TypeInfo(_T2),[TypeInfo(TIdThread)], pointer(56));
RegRegisterMethod(TIdThreadMgr,'ReleaseThread',TypeInfo(_T2),[TypeInfo(TIdThread)],  getVMTProcAddr('TIdThreadMgr','ReleaseThread',56));


//RegRegisterMethod(TIdThreadMgr,'TerminateThreads',TypeInfo(_T3),NoParams, pointer(60));
RegRegisterMethod(TIdThreadMgr,'TerminateThreads',TypeInfo(_T3),NoParams,  getVMTProcAddr('TIdThreadMgr','TerminateThreads',60));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
