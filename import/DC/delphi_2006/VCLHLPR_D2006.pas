{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit VCLHLPR_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Messages,
  ActiveX,
  SysUtils,
  ComObj,
  Classes,
  Graphics,
  Controls,
  Forms,
  ExtCtrls,
  StdVCL,
  AxCtrls,
  vclhlpr;
function ConvertTGUIDToVariant(var R : TGUID) : OleVariant;
function ConvertVariantToTGUID(const V : OleVariant) : TGUID;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TGUID__Wrapper = class(TDCRecordWrapper)
private
fR : TGUID;
public
function GetRecordPtr : pointer; override;
published
procedure setD1(const val : LongWord);
function getD1 : LongWord;
property D1 : LongWord read getD1 write setD1;
procedure setD2(const val : Word);
function getD2 : Word;
property D2 : Word read getD2 write setD2;
procedure setD3(const val : Word);
function getD3 : Word;
property D3 : Word read getD3 write setD3;
end;
type
_T0 = procedure (const p0 : Variant;
var p1 : Variant) of object;

_T1 = _T0;

_T2 = _T0;

_T3 = _T0;

_T4 = _T0;

_T5 = _T0;

_T6 = _T0;

_T7 = _T0;

_T8 = _T0;

_T9 = _T0;

_T10 = _T0;

_T11 = function (const p0 : Variant;
const p1 : Variant): Boolean of object;

_T12 = _T11;

_T13 = _T11;

_T14 = function (const p0 : Variant;
const p1 : Variant): Variant of object;

_T15 = _T14;

_T16 = _T14;

_T17 = _T14;

_T18 = _T14;

_T19 = _T14;

_T20 = _T14;

_T21 = _T14;

_T22 = _T14;

_T23 = _T14;

_T24 = function (const p0 : Variant): Variant of object;

_T25 = _T24;

_T26 = function (const p0 : Variant;
p1 : Integer): Variant of object;

_T27 = procedure (var p0 : Variant;
const p1 : Variant;
p2 : Integer) of object;

_T28 = procedure (p0 : Integer) of object;

_T29 = function (const p0 : IDispatch;
out p1): HResult of object;

_T30 = function : Integer of object;

_T31 = _T30;

function __TGUID__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TGUID__Wrapper.setD1(const val : LongWord);
begin
TGUID(GetRecordPtr^).D1 := val;
end;
function __TGUID__Wrapper.getD1 : LongWord;
begin
result := TGUID(GetRecordPtr^).D1;
end;
procedure __TGUID__Wrapper.setD2(const val : Word);
begin
TGUID(GetRecordPtr^).D2 := val;
end;
function __TGUID__Wrapper.getD2 : Word;
begin
result := TGUID(GetRecordPtr^).D2;
end;
procedure __TGUID__Wrapper.setD3(const val : Word);
begin
TGUID(GetRecordPtr^).D3 := val;
end;
function __TGUID__Wrapper.getD3 : Word;
begin
result := TGUID(GetRecordPtr^).D3;
end;
function __TPropertyPageImplHack__QueryInterface__Wrapper(__Instance : TPropertyPageImplHack;
const p0 : IDispatch;
out p1): HResult;
var
__p0 : ^TGUID;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := TPropertyPageImplHack(__Instance).QueryInterface(__p0^,p1);
end;


type __TGUID__Wrapper__ = class(__TGUID__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TGUID__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTGUIDToVariant(var R : TGUID) : OleVariant;
var
__rw : __TGUID__Wrapper__;
begin
__rw := __TGUID__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTGUID(const V : OleVariant) : TGUID;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TGUID((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..0] of TClass = (
TPropertyPageImplHack
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..28] of string = (
'VariantCpy'
,'VariantAdd'
,'VariantSub'
,'VariantMul'
,'VariantDiv'
,'VariantMod'
,'VariantAnd'
,'VariantOr'
,'VariantXor'
,'VariantShl'
,'VariantShr'
,'VariantCmpEQ'
,'VariantCmpLT'
,'VariantCmpGT'
,'VariantAdd2'
,'VariantSub2'
,'VariantMul2'
,'VariantDiv2'
,'VariantMod2'
,'VariantAnd2'
,'VariantOr2'
,'VariantXor2'
,'VariantShl2'
,'VariantShr2'
,'VariantNot'
,'VariantNeg'
,'VariantGetElement'
,'VariantPutElement'
,'VariantRaiseError'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(Variant),
TypeInfo(Variant)],Addr(VariantCpy),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(Variant),
TypeInfo(Variant)],Addr(VariantAdd),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T2),[
TypeInfo(Variant),
TypeInfo(Variant)],Addr(VariantSub),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T3),[
TypeInfo(Variant),
TypeInfo(Variant)],Addr(VariantMul),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T4),[
TypeInfo(Variant),
TypeInfo(Variant)],Addr(VariantDiv),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T5),[
TypeInfo(Variant),
TypeInfo(Variant)],Addr(VariantMod),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T6),[
TypeInfo(Variant),
TypeInfo(Variant)],Addr(VariantAnd),cRegister);

RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T7),[
TypeInfo(Variant),
TypeInfo(Variant)],Addr(VariantOr),cRegister);

RegisterProc(nil,MethodNames[8],mtProc,TypeInfo(_T8),[
TypeInfo(Variant),
TypeInfo(Variant)],Addr(VariantXor),cRegister);

RegisterProc(nil,MethodNames[9],mtProc,TypeInfo(_T9),[
TypeInfo(Variant),
TypeInfo(Variant)],Addr(VariantShl),cRegister);

RegisterProc(nil,MethodNames[10],mtProc,TypeInfo(_T10),[
TypeInfo(Variant),
TypeInfo(Variant)],Addr(VariantShr),cRegister);

RegisterProc(nil,MethodNames[11],mtProc,TypeInfo(_T11),[
TypeInfo(Variant),
TypeInfo(Variant),TypeInfo(Boolean)],Addr(VariantCmpEQ),cRegister);

RegisterProc(nil,MethodNames[12],mtProc,TypeInfo(_T12),[
TypeInfo(Variant),
TypeInfo(Variant),TypeInfo(Boolean)],Addr(VariantCmpLT),cRegister);

RegisterProc(nil,MethodNames[13],mtProc,TypeInfo(_T13),[
TypeInfo(Variant),
TypeInfo(Variant),TypeInfo(Boolean)],Addr(VariantCmpGT),cRegister);

RegisterProc(nil,MethodNames[14],mtProc,TypeInfo(_T14),[
TypeInfo(Variant),
TypeInfo(Variant),TypeInfo(Variant)],Addr(VariantAdd2),cRegister);

RegisterProc(nil,MethodNames[15],mtProc,TypeInfo(_T15),[
TypeInfo(Variant),
TypeInfo(Variant),TypeInfo(Variant)],Addr(VariantSub2),cRegister);

RegisterProc(nil,MethodNames[16],mtProc,TypeInfo(_T16),[
TypeInfo(Variant),
TypeInfo(Variant),TypeInfo(Variant)],Addr(VariantMul2),cRegister);

RegisterProc(nil,MethodNames[17],mtProc,TypeInfo(_T17),[
TypeInfo(Variant),
TypeInfo(Variant),TypeInfo(Variant)],Addr(VariantDiv2),cRegister);

RegisterProc(nil,MethodNames[18],mtProc,TypeInfo(_T18),[
TypeInfo(Variant),
TypeInfo(Variant),TypeInfo(Variant)],Addr(VariantMod2),cRegister);

RegisterProc(nil,MethodNames[19],mtProc,TypeInfo(_T19),[
TypeInfo(Variant),
TypeInfo(Variant),TypeInfo(Variant)],Addr(VariantAnd2),cRegister);

RegisterProc(nil,MethodNames[20],mtProc,TypeInfo(_T20),[
TypeInfo(Variant),
TypeInfo(Variant),TypeInfo(Variant)],Addr(VariantOr2),cRegister);

RegisterProc(nil,MethodNames[21],mtProc,TypeInfo(_T21),[
TypeInfo(Variant),
TypeInfo(Variant),TypeInfo(Variant)],Addr(VariantXor2),cRegister);

RegisterProc(nil,MethodNames[22],mtProc,TypeInfo(_T22),[
TypeInfo(Variant),
TypeInfo(Variant),TypeInfo(Variant)],Addr(VariantShl2),cRegister);

RegisterProc(nil,MethodNames[23],mtProc,TypeInfo(_T23),[
TypeInfo(Variant),
TypeInfo(Variant),TypeInfo(Variant)],Addr(VariantShr2),cRegister);

RegisterProc(nil,MethodNames[24],mtProc,TypeInfo(_T24),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VariantNot),cRegister);

RegisterProc(nil,MethodNames[25],mtProc,TypeInfo(_T25),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VariantNeg),cRegister);

RegisterProc(nil,MethodNames[26],mtProc,TypeInfo(_T26),[
TypeInfo(Variant),
TypeInfo(Integer),TypeInfo(Variant)],Addr(VariantGetElement),cRegister);

RegisterProc(nil,MethodNames[27],mtProc,TypeInfo(_T27),[
TypeInfo(Variant),
TypeInfo(Variant),
TypeInfo(Integer)],Addr(VariantPutElement),cRegister);

RegisterProc(nil,MethodNames[28],mtProc,TypeInfo(_T28),[
TypeInfo(Integer)],Addr(VariantRaiseError),cRegister);

RegisterProc(TPropertyPageImplHack,'QueryInterface',mtMethod,TypeInfo(_T29),[
TypeInfo(IDispatch),
TypeInfoUntyped,TypeInfo(HResult)],Addr(__TPropertyPageImplHack__QueryInterface__Wrapper),cRegister);

RegisterProc(TPropertyPageImplHack,'_AddRef',mtMethod,TypeInfo(_T30),[TypeInfo(Integer)],Addr(TPropertyPageImplHack._AddRef),cStdCall);

RegisterProc(TPropertyPageImplHack,'_Release',mtMethod,TypeInfo(_T31),[TypeInfo(Integer)],Addr(TPropertyPageImplHack._Release),cStdCall);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
