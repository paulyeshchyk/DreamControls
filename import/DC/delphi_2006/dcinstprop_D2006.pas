{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit dcinstprop_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  dcscript,
  controls,
  RTLConsts,
  Consts,
  windows,
  messages,
  activex,
  dcClasses,
  Classes,
  Sysutils,
  Typinfo,
  dcapi,
  dchook,
  registry,
  graphics,
  dialogs,
  menus,
  forms,
  dcsystem,
  dcconsts,
  dcdreamlib,
  Stdctrls,
  Variants,
  dcinstprop;
function ConvertTDCInstPropItemToVariant(var R : TDCInstPropItem) : OleVariant;
function ConvertVariantToTDCInstPropItem(const V : OleVariant) : TDCInstPropItem;
function ConvertTDCProcArrayItemToVariant(var R : TDCProcArrayItem) : OleVariant;
function ConvertVariantToTDCProcArrayItem(const V : OleVariant) : TDCProcArrayItem;
function ConvertTDCProcArraysToVariant(var R : TDCProcArrays) : OleVariant;
function ConvertVariantToTDCProcArrays(const V : OleVariant) : TDCProcArrays;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TDCInstPropItem__Wrapper = class(TDCRecordWrapper)
private
fR : TDCInstPropItem;
public
function GetRecordPtr : pointer; override;
published
procedure setInstance(const val : TPersistent);
function getInstance : TPersistent;
property Instance : TPersistent read getInstance write setInstance;
end;
type __TDCProcArrayItem__Wrapper = class(TDCRecordWrapper)
private
fR : TDCProcArrayItem;
public
function GetRecordPtr : pointer; override;
published
procedure setProcWasUsed(const val : Boolean);
function getProcWasUsed : Boolean;
property ProcWasUsed : Boolean read getProcWasUsed write setProcWasUsed;
end;
type __TDCProcArrays__Wrapper = class(TDCRecordWrapper)
private
fR : TDCProcArrays;
public
function GetRecordPtr : pointer; override;
published
end;
type
{_T0 = function (p0 : Integer;
p1 : Integer): IDCInstPropList of object;}

{_T1 = function (const p0 : Integer;
p1 : PTypeInfo): string of object;}

_T2 = procedure (p0 : TDCAccessKindsInPropEdit;
p1 : TDCPropAccessKind;
p2 : Pointer) of object;

_T3 = function (const p0 : string): string of object;

_T4 = function (p0 : TDCErrorAccessKind): string of object;

_T5 = function : Pointer of object;

_T6 = procedure (p0 : Pointer) of object;

_T7 = procedure  of object;

_T8 = procedure (p0 : Integer;
p1 : Integer) of object;

function __TDCInstPropItem__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDCInstPropItem__Wrapper.setInstance(const val : TPersistent);
begin
TDCInstPropItem(GetRecordPtr^).Instance := val;
end;
function __TDCInstPropItem__Wrapper.getInstance : TPersistent;
begin
result := TDCInstPropItem(GetRecordPtr^).Instance;
end;
function __TDCProcArrayItem__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDCProcArrayItem__Wrapper.setProcWasUsed(const val : Boolean);
begin
TDCProcArrayItem(GetRecordPtr^).ProcWasUsed := val;
end;
function __TDCProcArrayItem__Wrapper.getProcWasUsed : Boolean;
begin
result := TDCProcArrayItem(GetRecordPtr^).ProcWasUsed;
end;
function __TDCProcArrays__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function _TDCInstPropItem_ : IDispatch;
begin
  result := __TDCInstPropItem__Wrapper.Create;
end;
function _TDCProcArrayItem_ : IDispatch;
begin
  result := __TDCProcArrayItem__Wrapper.Create;
end;
function _TDCProcArrays_ : IDispatch;
begin
  result := __TDCProcArrays__Wrapper.Create;
end;

type __TDCInstPropItem__Wrapper__ = class(__TDCInstPropItem__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDCInstPropItem__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDCInstPropItemToVariant(var R : TDCInstPropItem) : OleVariant;
var
__rw : __TDCInstPropItem__Wrapper__;
begin
__rw := __TDCInstPropItem__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDCInstPropItem(const V : OleVariant) : TDCInstPropItem;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDCInstPropItem((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDCProcArrayItem__Wrapper__ = class(__TDCProcArrayItem__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDCProcArrayItem__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDCProcArrayItemToVariant(var R : TDCProcArrayItem) : OleVariant;
var
__rw : __TDCProcArrayItem__Wrapper__;
begin
__rw := __TDCProcArrayItem__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDCProcArrayItem(const V : OleVariant) : TDCProcArrayItem;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDCProcArrayItem((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDCProcArrays__Wrapper__ = class(__TDCProcArrays__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDCProcArrays__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDCProcArraysToVariant(var R : TDCProcArrays) : OleVariant;
var
__rw : __TDCProcArrays__Wrapper__;
begin
__rw := __TDCProcArrays__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDCProcArrays(const V : OleVariant) : TDCProcArrays;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDCProcArrays((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..37] of string = (
'ikAllEqual'
,'ikGetValue'
,'ikGetValues'
,'ikSetValue'
,'ikEdit'
,'ikSetValueByDataPtr'
,'ikGetValueAt'
,'ikEditLimit'
,'ikPropAttrs'
,'ikAllValues'
,'akInvalid'
,'akDefault'
,'akShortCut'
,'akModalResult'
,'akCursor'
,'akColor'
,'akImeName'
,'akFontCharSet'
,'akEnum'
,'akSetElem'
,'akMethod'
,'akComponent'
,'akFontName'
,'akDateTime'
,'akTime'
,'akDate'
,'akInt64'
,'akClass'
,'akSet'
,'akStr'
,'akFloat'
,'akInt'
,'akChar'
,'aktElem'
,'akOrd'
,'akVar'
,'akMPFileName'
,'akFont'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,ikAllEqual));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,ikGetValue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,ikGetValues));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,ikSetValue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,ikEdit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,ikSetValueByDataPtr));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,ikGetValueAt));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,ikEditLimit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,ikPropAttrs));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,ikAllValues));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,akInvalid));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,akDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,akShortCut));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,akModalResult));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,akCursor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,akColor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,akImeName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,akFontCharSet));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,akEnum));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,akSetElem));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,akMethod));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,akComponent));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,akFontName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,akDateTime));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,akTime));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,akDate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,akInt64));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,akClass));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,akSet));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,akStr));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,akFloat));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,akInt));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,akChar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,aktElem));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,akOrd));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,akVar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,akMPFileName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,akFont));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..0] of TClass = (
TDCInstPropList
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..7] of string = (
'TDCInstPropItem'
,'TDCProcArrayItem'
,'TDCProcArrays'
,'DCDumpInvalidProcAccessKinds'
,'DCTrimEventName'
,'DCErrorAccessKindToStr'
,'DCCreateTestInstPropList'
,'DCDumpProcUsage'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TDCInstPropItem_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_TDCProcArrayItem_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_TDCProcArrays_)));
RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T2),[
TypeInfo(TDCAccessKindsInPropEdit),
TypeInfo(TDCPropAccessKind),
TypeInfoPointer],Addr(DCDumpInvalidProcAccessKinds),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T3),[
TypeInfo(string),TypeInfo(string)],Addr(DCTrimEventName),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T4),[
TypeInfo(TDCErrorAccessKind),TypeInfo(string)],Addr(DCErrorAccessKindToStr),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T5),[TypeInfoPointer],Addr(DCCreateTestInstPropList),cRegister);

RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T6),[
TypeInfoPointer],Addr(DCDumpProcUsage),cRegister);

//RegRegisterMethod(TDCInstPropList,'LoadAllProcs',TypeInfo(_T7),NoParams, pointer(0));
RegRegisterMethod(TDCInstPropList,'LoadAllProcs',TypeInfo(_T7),NoParams,  getVMTProcAddr('TDCInstPropList','LoadAllProcs',0));


RegisterProc(TDCInstPropList,'Create',mtConstructor,TypeInfo(_T8),[
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TDCInstPropList.Create),cRegister);

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'DCCreateInstPropList',mtProc,TypeInfo(_T0),[
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(IDCInstPropList)],Addr(DCCreateInstPropList),cRegister)}

{RegisterProc(nil,'DCEnumValueToStr',mtProc,TypeInfo(_T1),[
TypeInfo(Integer),
TypeInfoPointer,TypeInfo(string)],Addr(DCEnumValueToStr),cRegister)}

RegisterEvent(TypeInfo(TDCBooleanMethod),[TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TDCGetStrFunc),[
TypeInfo(string),TypeInfo(Integer)]);

RegisterEvent(TypeInfo(TDCGetValueAt),[
TypeInfo(Integer),
TypeInfoUntyped]);

RegisterEvent(TypeInfo(TDCGetValueProc),[TypeInfo(string)]);

{RegisterEvent(TypeInfo(TDCGetValues),[
TypeInfo(TGetStrProc)]);}

RegisterEvent(TypeInfo(TDCNoParamsMethod),NoParams);

RegisterEvent(TypeInfo(TDCSetValue),[
TypeInfo(string)]);

RegisterEvent(TypeInfo(TDCSetValueDataPtr),[
TypeInfoPointer]);

RegisterEvent(TypeInfo(TDCStringMethod),[TypeInfo(string)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
