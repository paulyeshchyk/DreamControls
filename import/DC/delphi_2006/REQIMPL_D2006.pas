{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit REQIMPL_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Messages,
  SysUtils,
  Classes,
  HTTPApp,
  WebLib,
  ComObj,
  ReqImpl;
function ConvertTGuidToVariant(var R : TGuid) : OleVariant;
function ConvertVariantToTGuid(const V : OleVariant) : TGuid;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TGuid__Wrapper = class(TDCRecordWrapper)
private
fR : TGuid;
public
function GetRecordPtr : pointer; override;
published
procedure setD1(const val : LongWord);
function getD1 : LongWord;
property D1 : LongWord read getD1 write setD1;
procedure setD2(const val : Word);
function getD2 : Word;
property D2 : Word read getD2 write setD2;
procedure setD3(const val : Word);
function getD3 : Word;
property D3 : Word read getD3 write setD3;
end;
type
_T0 = function (p0 : TWebRequest;
var p1 : string;
const p2 : IDispatch): Boolean of object;

_T1 = function (const p0 : string;
const p1 : IDispatch): Boolean of object;

_T2 = procedure (p0 : TWebRequest;
p1 : TWebResponse;
p2 : Boolean) of object;

_T3 = function (const p0 : WideString): WideString of object;

_T4 = function (var p0 : OleVariant;
p1 : Integer): Integer of object;

_T5 = _T4;

_T6 = _T3;

_T7 = function (p0 : OleVariant): Integer of object;

_T8 = function (p0 : Integer): OleVariant of object;

_T9 = function (p0 : Integer;
p1 : OleVariant;
p2 : OleVariant): WordBool of object;

_T10 = function : WordBool of object;

function __TGuid__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TGuid__Wrapper.setD1(const val : LongWord);
begin
TGuid(GetRecordPtr^).D1 := val;
end;
function __TGuid__Wrapper.getD1 : LongWord;
begin
result := TGuid(GetRecordPtr^).D1;
end;
procedure __TGuid__Wrapper.setD2(const val : Word);
begin
TGuid(GetRecordPtr^).D2 := val;
end;
function __TGuid__Wrapper.getD2 : Word;
begin
result := TGuid(GetRecordPtr^).D2;
end;
procedure __TGuid__Wrapper.setD3(const val : Word);
begin
TGuid(GetRecordPtr^).D3 := val;
end;
function __TGuid__Wrapper.getD3 : Word;
begin
result := TGuid(GetRecordPtr^).D3;
end;
function ____SearchForCoClass__Wrapper(p0 : TWebRequest;
var p1 : string;
const p2 : IDispatch): Boolean;
var
__p2 : ^TGuid;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := SearchForCoClass(p0,p1,__p2^);
end;

function ____FileNameToClassID__Wrapper(const p0 : string;
const p1 : IDispatch): Boolean;
var
__p1 : ^TGuid;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := FileNameToClassID(p0,__p1^);
end;


type __TGuid__Wrapper__ = class(__TGuid__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TGuid__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTGuidToVariant(var R : TGuid) : OleVariant;
var
__rw : __TGuid__Wrapper__;
begin
__rw := __TGuid__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTGuid(const V : OleVariant) : TGuid;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TGuid((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..0] of TClass = (
TWebRequestImpl
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..1] of string = (
'SearchForCoClass'
,'FileNameToClassID'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(TWebRequest),
TypeInfo(string),
TypeInfo(IDispatch),TypeInfo(Boolean)],Addr(____SearchForCoClass__Wrapper),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(string),
TypeInfo(IDispatch),TypeInfo(Boolean)],Addr(____FileNameToClassID__Wrapper),cRegister);

RegisterProc(TWebRequestImpl,'Create',mtConstructor,TypeInfo(_T2),[
TypeInfo(TWebRequest),
TypeInfo(TWebResponse),
TypeInfo(Boolean)],Addr(TWebRequestImpl.Create),cRegister);

RegisterProc(TWebRequestImpl,'GetFieldByName',mtMethod,TypeInfo(_T3),[
TypeInfo(WideString),TypeInfo(WideString)],Addr(TWebRequestImpl.GetFieldByName),cSafeCall);

RegisterProc(TWebRequestImpl,'ReadClient',mtMethod,TypeInfo(_T4),[
TypeInfo(OleVariant),
TypeInfo(Integer),TypeInfo(Integer)],Addr(TWebRequestImpl.ReadClient),cSafeCall);

RegisterProc(TWebRequestImpl,'ReadString',mtMethod,TypeInfo(_T5),[
TypeInfo(OleVariant),
TypeInfo(Integer),TypeInfo(Integer)],Addr(TWebRequestImpl.ReadString),cSafeCall);

RegisterProc(TWebRequestImpl,'TranslateURI',mtMethod,TypeInfo(_T6),[
TypeInfo(WideString),TypeInfo(WideString)],Addr(TWebRequestImpl.TranslateURI),cSafeCall);

RegisterProc(TWebRequestImpl,'WriteClient',mtMethod,TypeInfo(_T7),[
TypeInfo(OleVariant),TypeInfo(Integer)],Addr(TWebRequestImpl.WriteClient),cSafeCall);

RegisterProc(TWebRequestImpl,'GetStringVariable',mtMethod,TypeInfo(_T8),[
TypeInfo(Integer),TypeInfo(OleVariant)],Addr(TWebRequestImpl.GetStringVariable),cSafeCall);

RegisterProc(TWebRequestImpl,'WriteHeaders',mtMethod,TypeInfo(_T9),[
TypeInfo(Integer),
TypeInfo(OleVariant),
TypeInfo(OleVariant),TypeInfo(WordBool)],Addr(TWebRequestImpl.WriteHeaders),cSafeCall);

RegisterProc(TWebRequestImpl,'UsingStub',mtMethod,TypeInfo(_T10),[TypeInfo(WordBool)],Addr(TWebRequestImpl.UsingStub),cSafeCall);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
