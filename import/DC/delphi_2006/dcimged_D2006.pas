{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit dcimged_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  Windows,
  Messages,
  SysUtils,
  Classes,
  Graphics,
  Controls,
  Forms,
  Dialogs,
  dcsystem,
  ComCtrls,
  Buttons,
  ExtCtrls,
  StdCtrls,
  ExtDlgs,
  dcdsgnstuff,
  dcpedit,
  dcgen,
  dccommon,
  dcdreamlib,
  dcedit,
  commctrl,
  dcconsts,
  consts,
  DcTree,
  dctsrc,
  imglist,
  Menus,
  dctslite,
  dcdtree,
  DcimgEd;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = function (p0 : TCustomImageList;
var p1 : Integer): Boolean of object;

_T1 = procedure (p0 : TObject) of object;

_T2 = _T1;

_T3 = _T1;

_T4 = _T1;

_T5 = procedure (p0 : TObject;
p1 : TMouseButton;
p2 : TShiftState;
p3 : Integer;
p4 : Integer) of object;

_T6 = procedure (p0 : TObject;
var p1 : Word;
p2 : TShiftState) of object;

_T7 = _T1;

_T8 = _T1;

_T9 = _T1;

_T10 = procedure (p0 : TObject;
p1 : TListItem;
p2 : TItemChange) of object;

_T11 = _T1;

_T12 = _T1;

_T13 = _T1;

_T14 = _T1;

_T15 = _T1;

_T16 = function : TCustomImageList of object;

_T17 = function : TCustomTreeView of object;

_T18 = function : TCustomListView of object;

procedure __RegisterProps;
begin
end;

function __DC__GetDcimgEd__FrmImageEdit(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(DcimgEd.FrmImageEdit);
end;

procedure __DC__SetDcimgEd__FrmImageEdit(Instance : TObject; Params : PVariantArgList);
begin
TObject(DcimgEd.FrmImageEdit):=(VarToObject(OleVariant(Params^[0])));
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('FrmImageEdit',__DC__GetDcimgEd__FrmImageEdit,__DC__SetDcimgEd__FrmImageEdit));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..7] of TClass = (
TFrmImageEdit,
TImageListEdit,
TListImageIndexEdit,
TListImageStateEdit,
TMListView,
TMTreeView,
TTreeImageIndexEdit,
TTreeImageStateEdit
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'EdiTCustomImageList'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(TCustomImageList),
TypeInfo(Integer),TypeInfo(Boolean)],Addr(EdiTCustomImageList),cRegister);

RegRegisterMethod(TFrmImageEdit,'FormCreate',TypeInfo(_T1),[
TypeInfo(TObject)],Addr(TFrmImageEdit.FormCreate));

RegRegisterMethod(TFrmImageEdit,'ClearButtonClick',TypeInfo(_T2),[
TypeInfo(TObject)],Addr(TFrmImageEdit.ClearButtonClick));

RegRegisterMethod(TFrmImageEdit,'ButtonAddClick',TypeInfo(_T3),[
TypeInfo(TObject)],Addr(TFrmImageEdit.ButtonAddClick));

RegRegisterMethod(TFrmImageEdit,'ButtonDeleteClick',TypeInfo(_T4),[
TypeInfo(TObject)],Addr(TFrmImageEdit.ButtonDeleteClick));

RegRegisterMethod(TFrmImageEdit,'PropImageMouseDown',TypeInfo(_T5),[
TypeInfo(TObject),
TypeInfo(TMouseButton),
TypeInfo(TShiftState),
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TFrmImageEdit.PropImageMouseDown));

RegRegisterMethod(TFrmImageEdit,'FormKeyDown',TypeInfo(_T6),[
TypeInfo(TObject),
TypeInfo(Word),
TypeInfo(TShiftState)],Addr(TFrmImageEdit.FormKeyDown));

RegRegisterMethod(TFrmImageEdit,'BtnOkClick',TypeInfo(_T7),[
TypeInfo(TObject)],Addr(TFrmImageEdit.BtnOkClick));

RegRegisterMethod(TFrmImageEdit,'PropCropChange',TypeInfo(_T8),[
TypeInfo(TObject)],Addr(TFrmImageEdit.PropCropChange));

RegRegisterMethod(TFrmImageEdit,'FormDestroy',TypeInfo(_T9),[
TypeInfo(TObject)],Addr(TFrmImageEdit.FormDestroy));

RegRegisterMethod(TFrmImageEdit,'ImageViewChange',TypeInfo(_T10),[
TypeInfo(TObject),
TypeInfo(TListItem),
TypeInfo(TItemChange)],Addr(TFrmImageEdit.ImageViewChange));

RegRegisterMethod(TFrmImageEdit,'ImageViewDblClick',TypeInfo(_T11),[
TypeInfo(TObject)],Addr(TFrmImageEdit.ImageViewDblClick));

RegRegisterMethod(TFrmImageEdit,'Save1Click',TypeInfo(_T12),[
TypeInfo(TObject)],Addr(TFrmImageEdit.Save1Click));

RegRegisterMethod(TFrmImageEdit,'BtnApplyClick',TypeInfo(_T13),[
TypeInfo(TObject)],Addr(TFrmImageEdit.BtnApplyClick));

RegRegisterMethod(TFrmImageEdit,'ImageViewClick',TypeInfo(_T14),[
TypeInfo(TObject)],Addr(TFrmImageEdit.ImageViewClick));

RegRegisterMethod(TFrmImageEdit,'FormShow',TypeInfo(_T15),[
TypeInfo(TObject)],Addr(TFrmImageEdit.FormShow));

//RegRegisterMethod(TTreeImageIndexEdit,'GetImage',TypeInfo(_T16),[TypeInfo(TCustomImageList)], pointer(60));
RegRegisterMethod(TTreeImageIndexEdit,'GetImage',TypeInfo(_T16),[TypeInfo(TCustomImageList)],  getVMTProcAddr('TTreeImageIndexEdit','GetImage',60));


RegRegisterMethod(TTreeImageIndexEdit,'GetTreeView',TypeInfo(_T17),[TypeInfo(TCustomTreeView)],Addr(TTreeImageIndexEdit.GetTreeView));

RegRegisterMethod(TTreeImageIndexEdit,'GetListView',TypeInfo(_T18),[TypeInfo(TCustomListView)],Addr(TTreeImageIndexEdit.GetListView));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
