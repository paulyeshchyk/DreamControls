{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDSTRINGS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdStrings;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = function (p0 : String;
p1 : String): Integer of object;

_T1 = _T0;

_T2 = function (p0 : String;
p1 : String): String of object;

_T3 = function (const p0 : String): Boolean of object;

_T4 = function (p0 : Pointer;
p1 : Integer): String of object;

_T5 = function (const p0 : String): String of object;

_T6 = _T5;

_T7 = procedure (const p0 : String;
p1 : TStrings;
const p2 : String) of object;

_T8 = _T7;

{_T9 = procedure (p0 : PChar;
p1 : Integer;
p2 : TStrings) of object;}

_T10 = procedure (const p0 : String;
const p1 : String;
var p2 : String;
var p3 : String) of object;

_T11 = function (const p0 : String;
const p1 : String): String of object;

procedure ____SplitColumnsNoTrim__Wrapper(cArgs : integer; pArgs : PArgList);
begin
case cArgs of
2:
begin
SplitColumnsNoTrim(OleVariant(pargs^[1]),TStrings(VarToObject(OleVariant(pargs^[0]))));
end;
3:
begin
SplitColumnsNoTrim(OleVariant(pargs^[2]),TStrings(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
end;
end
end;

procedure ____SplitColumns__Wrapper(cArgs : integer; pArgs : PArgList);
begin
case cArgs of
2:
begin
SplitColumns(OleVariant(pargs^[1]),TStrings(VarToObject(OleVariant(pargs^[0]))));
end;
3:
begin
SplitColumns(OleVariant(pargs^[2]),TStrings(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
end;
end
end;

procedure __RegisterProps;
begin
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..10] of string = (
'FindFirstOf'
,'FindFirstNotOf'
,'TrimAllOf'
,'IsWhiteString'
,'BinToHexStr'
,'StrHtmlEncode'
,'StrHtmlDecode'
,'SplitColumnsNoTrim'
,'SplitColumns'
,'SplitString'
,'CommaAdd'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(String),
TypeInfo(String),TypeInfo(Integer)],Addr(FindFirstOf),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(String),
TypeInfo(String),TypeInfo(Integer)],Addr(FindFirstNotOf),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T2),[
TypeInfo(String),
TypeInfo(String),TypeInfo(String)],Addr(TrimAllOf),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T3),[
TypeInfo(String),TypeInfo(Boolean)],Addr(IsWhiteString),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T4),[
TypeInfoPointer,
TypeInfo(Integer),TypeInfo(String)],Addr(BinToHexStr),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T5),[
TypeInfo(String),TypeInfo(String)],Addr(StrHtmlEncode),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T6),[
TypeInfo(String),TypeInfo(String)],Addr(StrHtmlDecode),cRegister);

RegisterProc(nil,MethodNames[7],mtScriptProc,TypeInfo(_T7),[
TypeInfo(String),
TypeInfo(TStrings),
TypeInfo(String)],Addr(____SplitColumnsNoTrim__Wrapper),cRegister);

RegisterProc(nil,MethodNames[8],mtScriptProc,TypeInfo(_T8),[
TypeInfo(String),
TypeInfo(TStrings),
TypeInfo(String)],Addr(____SplitColumns__Wrapper),cRegister);

RegisterProc(nil,MethodNames[9],mtProc,TypeInfo(_T10),[
TypeInfo(String),
TypeInfo(String),
TypeInfo(String),
TypeInfo(String)],Addr(SplitString),cRegister);

RegisterProc(nil,MethodNames[10],mtProc,TypeInfo(_T11),[
TypeInfo(String),
TypeInfo(String),TypeInfo(String)],Addr(CommaAdd),cRegister);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'SplitLines',mtProc,TypeInfo(_T9),[
TypeInfoPChar,
TypeInfo(Integer),
TypeInfo(TStrings)],Addr(SplitLines),cRegister)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
