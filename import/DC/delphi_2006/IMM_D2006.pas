{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IMM_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  Types,
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Imm;
function ConvertCANDIDATEFORMToVariant(var R : CANDIDATEFORM) : OleVariant;
function ConvertVariantToCANDIDATEFORM(const V : OleVariant) : CANDIDATEFORM;
function ConvertCANDIDATELISTToVariant(var R : CANDIDATELIST) : OleVariant;
function ConvertVariantToCANDIDATELIST(const V : OleVariant) : CANDIDATELIST;
function ConvertCOMPOSITIONFORMToVariant(var R : COMPOSITIONFORM) : OleVariant;
function ConvertVariantToCOMPOSITIONFORM(const V : OleVariant) : COMPOSITIONFORM;
function ConvertREGISTERWORDToVariant(var R : REGISTERWORD) : OleVariant;
function ConvertVariantToREGISTERWORD(const V : OleVariant) : REGISTERWORD;
function ConvertREGISTERWORDAToVariant(var R : REGISTERWORDA) : OleVariant;
function ConvertVariantToREGISTERWORDA(const V : OleVariant) : REGISTERWORDA;
function ConvertREGISTERWORDWToVariant(var R : REGISTERWORDW) : OleVariant;
function ConvertVariantToREGISTERWORDW(const V : OleVariant) : REGISTERWORDW;
function ConvertSTYLEBUFToVariant(var R : STYLEBUF) : OleVariant;
function ConvertVariantToSTYLEBUF(const V : OleVariant) : STYLEBUF;
function ConvertSTYLEBUFAToVariant(var R : STYLEBUFA) : OleVariant;
function ConvertVariantToSTYLEBUFA(const V : OleVariant) : STYLEBUFA;
function ConvertSTYLEBUFWToVariant(var R : STYLEBUFW) : OleVariant;
function ConvertVariantToSTYLEBUFW(const V : OleVariant) : STYLEBUFW;
function ConverttagCANDIDATEFORMToVariant(var R : tagCANDIDATEFORM) : OleVariant;
function ConvertVariantTotagCANDIDATEFORM(const V : OleVariant) : tagCANDIDATEFORM;
function ConverttagCANDIDATELISTToVariant(var R : tagCANDIDATELIST) : OleVariant;
function ConvertVariantTotagCANDIDATELIST(const V : OleVariant) : tagCANDIDATELIST;
function ConverttagCOMPOSITIONFORMToVariant(var R : tagCOMPOSITIONFORM) : OleVariant;
function ConvertVariantTotagCOMPOSITIONFORM(const V : OleVariant) : tagCOMPOSITIONFORM;
function ConverttagREGISTERWORDToVariant(var R : tagREGISTERWORD) : OleVariant;
function ConvertVariantTotagREGISTERWORD(const V : OleVariant) : tagREGISTERWORD;
function ConverttagREGISTERWORDAToVariant(var R : tagREGISTERWORDA) : OleVariant;
function ConvertVariantTotagREGISTERWORDA(const V : OleVariant) : tagREGISTERWORDA;
function ConverttagREGISTERWORDWToVariant(var R : tagREGISTERWORDW) : OleVariant;
function ConvertVariantTotagREGISTERWORDW(const V : OleVariant) : tagREGISTERWORDW;
function ConverttagSTYLEBUFToVariant(var R : tagSTYLEBUF) : OleVariant;
function ConvertVariantTotagSTYLEBUF(const V : OleVariant) : tagSTYLEBUF;
function ConverttagSTYLEBUFAToVariant(var R : tagSTYLEBUFA) : OleVariant;
function ConvertVariantTotagSTYLEBUFA(const V : OleVariant) : tagSTYLEBUFA;
function ConverttagSTYLEBUFWToVariant(var R : tagSTYLEBUFW) : OleVariant;
function ConvertVariantTotagSTYLEBUFW(const V : OleVariant) : tagSTYLEBUFW;
function ConvertTCandidateFormToVariant(var R : TCandidateForm) : OleVariant;
function ConvertVariantToTCandidateForm(const V : OleVariant) : TCandidateForm;
function ConvertTCandidateListToVariant(var R : TCandidateList) : OleVariant;
function ConvertVariantToTCandidateList(const V : OleVariant) : TCandidateList;
function ConvertTCompositionFormToVariant(var R : TCompositionForm) : OleVariant;
function ConvertVariantToTCompositionForm(const V : OleVariant) : TCompositionForm;
function ConvertTPOINTToVariant(var R : TPOINT) : OleVariant;
function ConvertVariantToTPOINT(const V : OleVariant) : TPOINT;
function ConvertTRegisterWordToVariant(var R : TRegisterWord) : OleVariant;
function ConvertVariantToTRegisterWord(const V : OleVariant) : TRegisterWord;
function ConvertTRegisterWordAToVariant(var R : TRegisterWordA) : OleVariant;
function ConvertVariantToTRegisterWordA(const V : OleVariant) : TRegisterWordA;
function ConvertTRegisterWordWToVariant(var R : TRegisterWordW) : OleVariant;
function ConvertVariantToTRegisterWordW(const V : OleVariant) : TRegisterWordW;
function ConvertTStyleBufToVariant(var R : TStyleBuf) : OleVariant;
function ConvertVariantToTStyleBuf(const V : OleVariant) : TStyleBuf;
function ConvertTStyleBufAToVariant(var R : TStyleBufA) : OleVariant;
function ConvertVariantToTStyleBufA(const V : OleVariant) : TStyleBufA;
function ConvertTStyleBufWToVariant(var R : TStyleBufW) : OleVariant;
function ConvertVariantToTStyleBufW(const V : OleVariant) : TStyleBufW;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __CANDIDATEFORM__Wrapper = class(TDCRecordWrapper)
private
fR : CANDIDATEFORM;
public
function GetRecordPtr : pointer; override;
published
procedure setdwIndex(const val : DWORD);
function getdwIndex : DWORD;
property dwIndex : DWORD read getdwIndex write setdwIndex;
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __CANDIDATELIST__Wrapper = class(TDCRecordWrapper)
private
fR : CANDIDATELIST;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
procedure setdwCount(const val : DWORD);
function getdwCount : DWORD;
property dwCount : DWORD read getdwCount write setdwCount;
procedure setdwSelection(const val : DWORD);
function getdwSelection : DWORD;
property dwSelection : DWORD read getdwSelection write setdwSelection;
procedure setdwPageStart(const val : DWORD);
function getdwPageStart : DWORD;
property dwPageStart : DWORD read getdwPageStart write setdwPageStart;
procedure setdwPageSize(const val : DWORD);
function getdwPageSize : DWORD;
property dwPageSize : DWORD read getdwPageSize write setdwPageSize;
end;
type __COMPOSITIONFORM__Wrapper = class(TDCRecordWrapper)
private
fR : COMPOSITIONFORM;
public
function GetRecordPtr : pointer; override;
published
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __REGISTERWORD__Wrapper = class(TDCRecordWrapper)
private
fR : REGISTERWORD;
public
function GetRecordPtr : pointer; override;
published
end;
type __REGISTERWORDA__Wrapper = class(TDCRecordWrapper)
private
fR : REGISTERWORDA;
public
function GetRecordPtr : pointer; override;
published
end;
type __REGISTERWORDW__Wrapper = class(TDCRecordWrapper)
private
fR : REGISTERWORDW;
public
function GetRecordPtr : pointer; override;
published
end;
type __STYLEBUF__Wrapper = class(TDCRecordWrapper)
private
fR : STYLEBUF;
public
function GetRecordPtr : pointer; override;
published
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __STYLEBUFA__Wrapper = class(TDCRecordWrapper)
private
fR : STYLEBUFA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __STYLEBUFW__Wrapper = class(TDCRecordWrapper)
private
fR : STYLEBUFW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __tagCANDIDATEFORM__Wrapper = class(TDCRecordWrapper)
private
fR : tagCANDIDATEFORM;
public
function GetRecordPtr : pointer; override;
published
procedure setdwIndex(const val : DWORD);
function getdwIndex : DWORD;
property dwIndex : DWORD read getdwIndex write setdwIndex;
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __tagCANDIDATELIST__Wrapper = class(TDCRecordWrapper)
private
fR : tagCANDIDATELIST;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
procedure setdwCount(const val : DWORD);
function getdwCount : DWORD;
property dwCount : DWORD read getdwCount write setdwCount;
procedure setdwSelection(const val : DWORD);
function getdwSelection : DWORD;
property dwSelection : DWORD read getdwSelection write setdwSelection;
procedure setdwPageStart(const val : DWORD);
function getdwPageStart : DWORD;
property dwPageStart : DWORD read getdwPageStart write setdwPageStart;
procedure setdwPageSize(const val : DWORD);
function getdwPageSize : DWORD;
property dwPageSize : DWORD read getdwPageSize write setdwPageSize;
end;
type __tagCOMPOSITIONFORM__Wrapper = class(TDCRecordWrapper)
private
fR : tagCOMPOSITIONFORM;
public
function GetRecordPtr : pointer; override;
published
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __tagREGISTERWORD__Wrapper = class(TDCRecordWrapper)
private
fR : tagREGISTERWORD;
public
function GetRecordPtr : pointer; override;
published
end;
type __tagREGISTERWORDA__Wrapper = class(TDCRecordWrapper)
private
fR : tagREGISTERWORDA;
public
function GetRecordPtr : pointer; override;
published
end;
type __tagREGISTERWORDW__Wrapper = class(TDCRecordWrapper)
private
fR : tagREGISTERWORDW;
public
function GetRecordPtr : pointer; override;
published
end;
type __tagSTYLEBUF__Wrapper = class(TDCRecordWrapper)
private
fR : tagSTYLEBUF;
public
function GetRecordPtr : pointer; override;
published
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __tagSTYLEBUFA__Wrapper = class(TDCRecordWrapper)
private
fR : tagSTYLEBUFA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __tagSTYLEBUFW__Wrapper = class(TDCRecordWrapper)
private
fR : tagSTYLEBUFW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __TCandidateForm__Wrapper = class(TDCRecordWrapper)
private
fR : TCandidateForm;
public
function GetRecordPtr : pointer; override;
published
procedure setdwIndex(const val : DWORD);
function getdwIndex : DWORD;
property dwIndex : DWORD read getdwIndex write setdwIndex;
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __TCandidateList__Wrapper = class(TDCRecordWrapper)
private
fR : TCandidateList;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
procedure setdwCount(const val : DWORD);
function getdwCount : DWORD;
property dwCount : DWORD read getdwCount write setdwCount;
procedure setdwSelection(const val : DWORD);
function getdwSelection : DWORD;
property dwSelection : DWORD read getdwSelection write setdwSelection;
procedure setdwPageStart(const val : DWORD);
function getdwPageStart : DWORD;
property dwPageStart : DWORD read getdwPageStart write setdwPageStart;
procedure setdwPageSize(const val : DWORD);
function getdwPageSize : DWORD;
property dwPageSize : DWORD read getdwPageSize write setdwPageSize;
end;
type __TCompositionForm__Wrapper = class(TDCRecordWrapper)
private
fR : TCompositionForm;
public
function GetRecordPtr : pointer; override;
published
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __TRegisterWord__Wrapper = class(TDCRecordWrapper)
private
fR : TRegisterWord;
public
function GetRecordPtr : pointer; override;
published
end;
type __TRegisterWordA__Wrapper = class(TDCRecordWrapper)
private
fR : TRegisterWordA;
public
function GetRecordPtr : pointer; override;
published
end;
type __TRegisterWordW__Wrapper = class(TDCRecordWrapper)
private
fR : TRegisterWordW;
public
function GetRecordPtr : pointer; override;
published
end;
type __TStyleBuf__Wrapper = class(TDCRecordWrapper)
private
fR : TStyleBuf;
public
function GetRecordPtr : pointer; override;
published
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __TStyleBufA__Wrapper = class(TDCRecordWrapper)
private
fR : TStyleBufA;
public
function GetRecordPtr : pointer; override;
published
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __TStyleBufW__Wrapper = class(TDCRecordWrapper)
private
fR : TStyleBufW;
public
function GetRecordPtr : pointer; override;
published
procedure setdwStyle(const val : DWORD);
function getdwStyle : DWORD;
property dwStyle : DWORD read getdwStyle write setdwStyle;
end;
type __TPOINT__Wrapper = class(TDCRecordWrapper)
private
fR : TPOINT;
public
function GetRecordPtr : pointer; override;
published
procedure setX(const val : Longint);
function getX : Longint;
property X : Longint read getX write setX;
procedure setY(const val : Longint);
function getY : Longint;
property Y : Longint read getY write setY;
end;
type
{_T0 = function (p0 : PChar;
p1 : PChar): HKL of object;}

{_T1 = function (p0 : PAnsiChar;
p1 : PAnsiChar): HKL of object;}

{_T2 = function (p0 : PWideChar;
p1 : PWideChar): HKL of object;}

{_T3 = function (p0 : HKL;
p1 : PChar;
p2 : UINT): UINT of object;}

{_T4 = function (p0 : HKL;
p1 : PAnsiChar;
p2 : UINT): UINT of object;}

{_T5 = function (p0 : HKL;
p1 : PWideChar;
p2 : UINT): UINT of object;}

{_T6 = function (p0 : HKL;
p1 : PChar;
p2 : UINT): UINT of object;}

{_T7 = function (p0 : HKL;
p1 : PAnsiChar;
p2 : UINT): UINT of object;}

{_T8 = function (p0 : HKL;
p1 : PWideChar;
p2 : UINT): UINT of object;}

_T9 = function (p0 : HKL;
p1 : DWORD): DWORD of object;

_T10 = function (p0 : HKL): Boolean of object;

_T11 = function (p0 : hWnd;
p1 : DWORD): Boolean of object;

_T12 = function : HIMC of object;

_T13 = function (p0 : HIMC): Boolean of object;

_T14 = function (p0 : hWnd): HIMC of object;

_T15 = function (p0 : hWnd;
p1 : HIMC): Boolean of object;

_T16 = function (p0 : hWnd;
p1 : HIMC): HIMC of object;

_T17 = function (p0 : HIMC;
p1 : DWORD;
p2 : Pointer;
p3 : DWORD): Longint of object;

_T18 = _T17;

_T19 = _T17;

_T20 = function (p0 : HIMC;
p1 : DWORD;
p2 : Pointer;
p3 : DWORD;
p4 : Pointer;
p5 : DWORD): Boolean of object;

_T21 = _T20;

_T22 = _T20;

_T23 = function (p0 : HIMC;
var p1 : DWORD): DWORD of object;

_T24 = _T23;

_T25 = _T23;

{_T26 = function (p0 : HIMC;
p1 : DWORD;
p2 : PCandidateList;
p3 : DWORD): DWORD of object;}

{_T27 = function (p0 : HIMC;
p1 : DWORD;
p2 : PCandidateList;
p3 : DWORD): DWORD of object;}

{_T28 = function (p0 : HIMC;
p1 : DWORD;
p2 : PCandidateList;
p3 : DWORD): DWORD of object;}

{_T29 = function (p0 : HIMC;
p1 : DWORD;
p2 : PChar;
p3 : DWORD): DWORD of object;}

{_T30 = function (p0 : HIMC;
p1 : DWORD;
p2 : PAnsiChar;
p3 : DWORD): DWORD of object;}

{_T31 = function (p0 : HIMC;
p1 : DWORD;
p2 : PWideChar;
p3 : DWORD): DWORD of object;}

_T32 = function (p0 : HIMC;
var p1 : DWORD;
var p2 : DWORD): Boolean of object;

_T33 = function (p0 : HIMC;
p1 : DWORD;
p2 : DWORD): Boolean of object;

_T34 = _T13;

_T35 = function (p0 : HIMC;
p1 : Boolean): Boolean of object;

{_T36 = function (p0 : HIMC;
p1 : PLOGFONT): Boolean of object;}

{_T37 = function (p0 : HIMC;
p1 : PLOGFONTA): Boolean of object;}

{_T38 = function (p0 : HIMC;
p1 : PLOGFONTW): Boolean of object;}

{_T39 = function (p0 : HIMC;
p1 : PLOGFONT): Boolean of object;}

{_T40 = function (p0 : HIMC;
p1 : PLOGFONTA): Boolean of object;}

{_T41 = function (p0 : HIMC;
p1 : PLOGFONTW): Boolean of object;}

_T42 = function (p0 : HKL;
p1 : hWnd;
p2 : DWORD;
p3 : Pointer): Boolean of object;

_T43 = _T42;

_T44 = _T42;

_T45 = function (p0 : HKL;
p1 : HIMC;
p2 : UINT;
p3 : Pointer): LRESULT of object;

_T46 = _T45;

_T47 = _T45;

{_T48 = function (p0 : HKL;
p1 : HIMC;
p2 : PChar;
p3 : PCandidateList;
p4 : DWORD;
p5 : UINT): DWORD of object;}

{_T49 = function (p0 : HKL;
p1 : HIMC;
p2 : PAnsiChar;
p3 : PCandidateList;
p4 : DWORD;
p5 : UINT): DWORD of object;}

{_T50 = function (p0 : HKL;
p1 : HIMC;
p2 : PWideChar;
p3 : PCandidateList;
p4 : DWORD;
p5 : UINT): DWORD of object;}

_T51 = function (p0 : HIMC;
p1 : DWORD;
p2 : DWORD;
p3 : DWORD): Boolean of object;

_T52 = function (p0 : HIMC;
const p1 : IDispatch): Boolean of object;

{_T53 = function (p0 : HIMC;
p1 : PPOINT): Boolean of object;}

{_T54 = function (p0 : HIMC;
p1 : PCompositionForm): Boolean of object;}

{_T55 = function (p0 : HIMC;
p1 : PCompositionForm): Boolean of object;}

{_T56 = function (p0 : HIMC;
p1 : DWORD;
p2 : PCandidateForm): Boolean of object;}

{_T57 = function (p0 : HIMC;
p1 : PCandidateForm): Boolean of object;}

_T58 = function (p0 : hWnd;
p1 : UINT;
p2 : wParam;
p3 : lParam): Boolean of object;

_T59 = _T58;

_T60 = _T58;

_T61 = function (p0 : hWnd): UINT of object;

{_T62 = function (p0 : HKL;
p1 : PChar;
p2 : DWORD;
p3 : PChar): Boolean of object;}

{_T63 = function (p0 : HKL;
p1 : PAnsiChar;
p2 : DWORD;
p3 : PAnsiChar): Boolean of object;}

{_T64 = function (p0 : HKL;
p1 : PWideChar;
p2 : DWORD;
p3 : PWideChar): Boolean of object;}

{_T65 = function (p0 : HKL;
p1 : PChar;
p2 : DWORD;
p3 : PChar): Boolean of object;}

{_T66 = function (p0 : HKL;
p1 : PAnsiChar;
p2 : DWORD;
p3 : PAnsiChar): Boolean of object;}

{_T67 = function (p0 : HKL;
p1 : PWideChar;
p2 : DWORD;
p3 : PWideChar): Boolean of object;}

{_T68 = function (p0 : HKL;
p1 : UINT;
p2 : PStyleBuf): UINT of object;}

{_T69 = function (p0 : HKL;
p1 : UINT;
p2 : PStyleBufA): UINT of object;}

{_T70 = function (p0 : HKL;
p1 : UINT;
p2 : PStyleBufW): UINT of object;}

{_T71 = function (p0 : HKL;
p1 : RegisterWordEnumProc;
p2 : PChar;
p3 : DWORD;
p4 : PChar;
p5 : Pointer): UINT of object;}

{_T72 = function (p0 : HKL;
p1 : RegisterWordEnumProcA;
p2 : PAnsiChar;
p3 : DWORD;
p4 : PAnsiChar;
p5 : Pointer): UINT of object;}

{_T73 = function (p0 : HKL;
p1 : RegisterWordEnumProcW;
p2 : PWideChar;
p3 : DWORD;
p4 : PWideChar;
p5 : Pointer): UINT of object;}

function __CANDIDATEFORM__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __CANDIDATEFORM__Wrapper.setdwIndex(const val : DWORD);
begin
CANDIDATEFORM(GetRecordPtr^).dwIndex := val;
end;
function __CANDIDATEFORM__Wrapper.getdwIndex : DWORD;
begin
result := CANDIDATEFORM(GetRecordPtr^).dwIndex;
end;
procedure __CANDIDATEFORM__Wrapper.setdwStyle(const val : DWORD);
begin
CANDIDATEFORM(GetRecordPtr^).dwStyle := val;
end;
function __CANDIDATEFORM__Wrapper.getdwStyle : DWORD;
begin
result := CANDIDATEFORM(GetRecordPtr^).dwStyle;
end;
function __CANDIDATELIST__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __CANDIDATELIST__Wrapper.setdwSize(const val : DWORD);
begin
CANDIDATELIST(GetRecordPtr^).dwSize := val;
end;
function __CANDIDATELIST__Wrapper.getdwSize : DWORD;
begin
result := CANDIDATELIST(GetRecordPtr^).dwSize;
end;
procedure __CANDIDATELIST__Wrapper.setdwStyle(const val : DWORD);
begin
CANDIDATELIST(GetRecordPtr^).dwStyle := val;
end;
function __CANDIDATELIST__Wrapper.getdwStyle : DWORD;
begin
result := CANDIDATELIST(GetRecordPtr^).dwStyle;
end;
procedure __CANDIDATELIST__Wrapper.setdwCount(const val : DWORD);
begin
CANDIDATELIST(GetRecordPtr^).dwCount := val;
end;
function __CANDIDATELIST__Wrapper.getdwCount : DWORD;
begin
result := CANDIDATELIST(GetRecordPtr^).dwCount;
end;
procedure __CANDIDATELIST__Wrapper.setdwSelection(const val : DWORD);
begin
CANDIDATELIST(GetRecordPtr^).dwSelection := val;
end;
function __CANDIDATELIST__Wrapper.getdwSelection : DWORD;
begin
result := CANDIDATELIST(GetRecordPtr^).dwSelection;
end;
procedure __CANDIDATELIST__Wrapper.setdwPageStart(const val : DWORD);
begin
CANDIDATELIST(GetRecordPtr^).dwPageStart := val;
end;
function __CANDIDATELIST__Wrapper.getdwPageStart : DWORD;
begin
result := CANDIDATELIST(GetRecordPtr^).dwPageStart;
end;
procedure __CANDIDATELIST__Wrapper.setdwPageSize(const val : DWORD);
begin
CANDIDATELIST(GetRecordPtr^).dwPageSize := val;
end;
function __CANDIDATELIST__Wrapper.getdwPageSize : DWORD;
begin
result := CANDIDATELIST(GetRecordPtr^).dwPageSize;
end;
function __COMPOSITIONFORM__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __COMPOSITIONFORM__Wrapper.setdwStyle(const val : DWORD);
begin
COMPOSITIONFORM(GetRecordPtr^).dwStyle := val;
end;
function __COMPOSITIONFORM__Wrapper.getdwStyle : DWORD;
begin
result := COMPOSITIONFORM(GetRecordPtr^).dwStyle;
end;
function __REGISTERWORD__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __REGISTERWORDA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __REGISTERWORDW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __STYLEBUF__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __STYLEBUF__Wrapper.setdwStyle(const val : DWORD);
begin
STYLEBUF(GetRecordPtr^).dwStyle := val;
end;
function __STYLEBUF__Wrapper.getdwStyle : DWORD;
begin
result := STYLEBUF(GetRecordPtr^).dwStyle;
end;
function __STYLEBUFA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __STYLEBUFA__Wrapper.setdwStyle(const val : DWORD);
begin
STYLEBUFA(GetRecordPtr^).dwStyle := val;
end;
function __STYLEBUFA__Wrapper.getdwStyle : DWORD;
begin
result := STYLEBUFA(GetRecordPtr^).dwStyle;
end;
function __STYLEBUFW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __STYLEBUFW__Wrapper.setdwStyle(const val : DWORD);
begin
STYLEBUFW(GetRecordPtr^).dwStyle := val;
end;
function __STYLEBUFW__Wrapper.getdwStyle : DWORD;
begin
result := STYLEBUFW(GetRecordPtr^).dwStyle;
end;
function __tagCANDIDATEFORM__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagCANDIDATEFORM__Wrapper.setdwIndex(const val : DWORD);
begin
tagCANDIDATEFORM(GetRecordPtr^).dwIndex := val;
end;
function __tagCANDIDATEFORM__Wrapper.getdwIndex : DWORD;
begin
result := tagCANDIDATEFORM(GetRecordPtr^).dwIndex;
end;
procedure __tagCANDIDATEFORM__Wrapper.setdwStyle(const val : DWORD);
begin
tagCANDIDATEFORM(GetRecordPtr^).dwStyle := val;
end;
function __tagCANDIDATEFORM__Wrapper.getdwStyle : DWORD;
begin
result := tagCANDIDATEFORM(GetRecordPtr^).dwStyle;
end;
function __tagCANDIDATELIST__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagCANDIDATELIST__Wrapper.setdwSize(const val : DWORD);
begin
tagCANDIDATELIST(GetRecordPtr^).dwSize := val;
end;
function __tagCANDIDATELIST__Wrapper.getdwSize : DWORD;
begin
result := tagCANDIDATELIST(GetRecordPtr^).dwSize;
end;
procedure __tagCANDIDATELIST__Wrapper.setdwStyle(const val : DWORD);
begin
tagCANDIDATELIST(GetRecordPtr^).dwStyle := val;
end;
function __tagCANDIDATELIST__Wrapper.getdwStyle : DWORD;
begin
result := tagCANDIDATELIST(GetRecordPtr^).dwStyle;
end;
procedure __tagCANDIDATELIST__Wrapper.setdwCount(const val : DWORD);
begin
tagCANDIDATELIST(GetRecordPtr^).dwCount := val;
end;
function __tagCANDIDATELIST__Wrapper.getdwCount : DWORD;
begin
result := tagCANDIDATELIST(GetRecordPtr^).dwCount;
end;
procedure __tagCANDIDATELIST__Wrapper.setdwSelection(const val : DWORD);
begin
tagCANDIDATELIST(GetRecordPtr^).dwSelection := val;
end;
function __tagCANDIDATELIST__Wrapper.getdwSelection : DWORD;
begin
result := tagCANDIDATELIST(GetRecordPtr^).dwSelection;
end;
procedure __tagCANDIDATELIST__Wrapper.setdwPageStart(const val : DWORD);
begin
tagCANDIDATELIST(GetRecordPtr^).dwPageStart := val;
end;
function __tagCANDIDATELIST__Wrapper.getdwPageStart : DWORD;
begin
result := tagCANDIDATELIST(GetRecordPtr^).dwPageStart;
end;
procedure __tagCANDIDATELIST__Wrapper.setdwPageSize(const val : DWORD);
begin
tagCANDIDATELIST(GetRecordPtr^).dwPageSize := val;
end;
function __tagCANDIDATELIST__Wrapper.getdwPageSize : DWORD;
begin
result := tagCANDIDATELIST(GetRecordPtr^).dwPageSize;
end;
function __tagCOMPOSITIONFORM__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagCOMPOSITIONFORM__Wrapper.setdwStyle(const val : DWORD);
begin
tagCOMPOSITIONFORM(GetRecordPtr^).dwStyle := val;
end;
function __tagCOMPOSITIONFORM__Wrapper.getdwStyle : DWORD;
begin
result := tagCOMPOSITIONFORM(GetRecordPtr^).dwStyle;
end;
function __tagREGISTERWORD__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __tagREGISTERWORDA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __tagREGISTERWORDW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __tagSTYLEBUF__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagSTYLEBUF__Wrapper.setdwStyle(const val : DWORD);
begin
tagSTYLEBUF(GetRecordPtr^).dwStyle := val;
end;
function __tagSTYLEBUF__Wrapper.getdwStyle : DWORD;
begin
result := tagSTYLEBUF(GetRecordPtr^).dwStyle;
end;
function __tagSTYLEBUFA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagSTYLEBUFA__Wrapper.setdwStyle(const val : DWORD);
begin
tagSTYLEBUFA(GetRecordPtr^).dwStyle := val;
end;
function __tagSTYLEBUFA__Wrapper.getdwStyle : DWORD;
begin
result := tagSTYLEBUFA(GetRecordPtr^).dwStyle;
end;
function __tagSTYLEBUFW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagSTYLEBUFW__Wrapper.setdwStyle(const val : DWORD);
begin
tagSTYLEBUFW(GetRecordPtr^).dwStyle := val;
end;
function __tagSTYLEBUFW__Wrapper.getdwStyle : DWORD;
begin
result := tagSTYLEBUFW(GetRecordPtr^).dwStyle;
end;
function __TCandidateForm__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCandidateForm__Wrapper.setdwIndex(const val : DWORD);
begin
TCandidateForm(GetRecordPtr^).dwIndex := val;
end;
function __TCandidateForm__Wrapper.getdwIndex : DWORD;
begin
result := TCandidateForm(GetRecordPtr^).dwIndex;
end;
procedure __TCandidateForm__Wrapper.setdwStyle(const val : DWORD);
begin
TCandidateForm(GetRecordPtr^).dwStyle := val;
end;
function __TCandidateForm__Wrapper.getdwStyle : DWORD;
begin
result := TCandidateForm(GetRecordPtr^).dwStyle;
end;
function __TCandidateList__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCandidateList__Wrapper.setdwSize(const val : DWORD);
begin
TCandidateList(GetRecordPtr^).dwSize := val;
end;
function __TCandidateList__Wrapper.getdwSize : DWORD;
begin
result := TCandidateList(GetRecordPtr^).dwSize;
end;
procedure __TCandidateList__Wrapper.setdwStyle(const val : DWORD);
begin
TCandidateList(GetRecordPtr^).dwStyle := val;
end;
function __TCandidateList__Wrapper.getdwStyle : DWORD;
begin
result := TCandidateList(GetRecordPtr^).dwStyle;
end;
procedure __TCandidateList__Wrapper.setdwCount(const val : DWORD);
begin
TCandidateList(GetRecordPtr^).dwCount := val;
end;
function __TCandidateList__Wrapper.getdwCount : DWORD;
begin
result := TCandidateList(GetRecordPtr^).dwCount;
end;
procedure __TCandidateList__Wrapper.setdwSelection(const val : DWORD);
begin
TCandidateList(GetRecordPtr^).dwSelection := val;
end;
function __TCandidateList__Wrapper.getdwSelection : DWORD;
begin
result := TCandidateList(GetRecordPtr^).dwSelection;
end;
procedure __TCandidateList__Wrapper.setdwPageStart(const val : DWORD);
begin
TCandidateList(GetRecordPtr^).dwPageStart := val;
end;
function __TCandidateList__Wrapper.getdwPageStart : DWORD;
begin
result := TCandidateList(GetRecordPtr^).dwPageStart;
end;
procedure __TCandidateList__Wrapper.setdwPageSize(const val : DWORD);
begin
TCandidateList(GetRecordPtr^).dwPageSize := val;
end;
function __TCandidateList__Wrapper.getdwPageSize : DWORD;
begin
result := TCandidateList(GetRecordPtr^).dwPageSize;
end;
function __TCompositionForm__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCompositionForm__Wrapper.setdwStyle(const val : DWORD);
begin
TCompositionForm(GetRecordPtr^).dwStyle := val;
end;
function __TCompositionForm__Wrapper.getdwStyle : DWORD;
begin
result := TCompositionForm(GetRecordPtr^).dwStyle;
end;
function __TRegisterWord__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TRegisterWordA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TRegisterWordW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TStyleBuf__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TStyleBuf__Wrapper.setdwStyle(const val : DWORD);
begin
TStyleBuf(GetRecordPtr^).dwStyle := val;
end;
function __TStyleBuf__Wrapper.getdwStyle : DWORD;
begin
result := TStyleBuf(GetRecordPtr^).dwStyle;
end;
function __TStyleBufA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TStyleBufA__Wrapper.setdwStyle(const val : DWORD);
begin
TStyleBufA(GetRecordPtr^).dwStyle := val;
end;
function __TStyleBufA__Wrapper.getdwStyle : DWORD;
begin
result := TStyleBufA(GetRecordPtr^).dwStyle;
end;
function __TStyleBufW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TStyleBufW__Wrapper.setdwStyle(const val : DWORD);
begin
TStyleBufW(GetRecordPtr^).dwStyle := val;
end;
function __TStyleBufW__Wrapper.getdwStyle : DWORD;
begin
result := TStyleBufW(GetRecordPtr^).dwStyle;
end;
function _CANDIDATEFORM_ : IDispatch;
begin
  result := __CANDIDATEFORM__Wrapper.Create;
end;
function _CANDIDATELIST_ : IDispatch;
begin
  result := __CANDIDATELIST__Wrapper.Create;
end;
function _COMPOSITIONFORM_ : IDispatch;
begin
  result := __COMPOSITIONFORM__Wrapper.Create;
end;
function _REGISTERWORD_ : IDispatch;
begin
  result := __REGISTERWORD__Wrapper.Create;
end;
function _REGISTERWORDA_ : IDispatch;
begin
  result := __REGISTERWORDA__Wrapper.Create;
end;
function _REGISTERWORDW_ : IDispatch;
begin
  result := __REGISTERWORDW__Wrapper.Create;
end;
function _STYLEBUF_ : IDispatch;
begin
  result := __STYLEBUF__Wrapper.Create;
end;
function _STYLEBUFA_ : IDispatch;
begin
  result := __STYLEBUFA__Wrapper.Create;
end;
function _STYLEBUFW_ : IDispatch;
begin
  result := __STYLEBUFW__Wrapper.Create;
end;
function _tagCANDIDATEFORM_ : IDispatch;
begin
  result := __tagCANDIDATEFORM__Wrapper.Create;
end;
function _tagCANDIDATELIST_ : IDispatch;
begin
  result := __tagCANDIDATELIST__Wrapper.Create;
end;
function _tagCOMPOSITIONFORM_ : IDispatch;
begin
  result := __tagCOMPOSITIONFORM__Wrapper.Create;
end;
function _tagREGISTERWORD_ : IDispatch;
begin
  result := __tagREGISTERWORD__Wrapper.Create;
end;
function _tagREGISTERWORDA_ : IDispatch;
begin
  result := __tagREGISTERWORDA__Wrapper.Create;
end;
function _tagREGISTERWORDW_ : IDispatch;
begin
  result := __tagREGISTERWORDW__Wrapper.Create;
end;
function _tagSTYLEBUF_ : IDispatch;
begin
  result := __tagSTYLEBUF__Wrapper.Create;
end;
function _tagSTYLEBUFA_ : IDispatch;
begin
  result := __tagSTYLEBUFA__Wrapper.Create;
end;
function _tagSTYLEBUFW_ : IDispatch;
begin
  result := __tagSTYLEBUFW__Wrapper.Create;
end;
function _TCandidateForm_ : IDispatch;
begin
  result := __TCandidateForm__Wrapper.Create;
end;
function _TCandidateList_ : IDispatch;
begin
  result := __TCandidateList__Wrapper.Create;
end;
function _TCompositionForm_ : IDispatch;
begin
  result := __TCompositionForm__Wrapper.Create;
end;
function _TRegisterWord_ : IDispatch;
begin
  result := __TRegisterWord__Wrapper.Create;
end;
function _TRegisterWordA_ : IDispatch;
begin
  result := __TRegisterWordA__Wrapper.Create;
end;
function _TRegisterWordW_ : IDispatch;
begin
  result := __TRegisterWordW__Wrapper.Create;
end;
function _TStyleBuf_ : IDispatch;
begin
  result := __TStyleBuf__Wrapper.Create;
end;
function _TStyleBufA_ : IDispatch;
begin
  result := __TStyleBufA__Wrapper.Create;
end;
function _TStyleBufW_ : IDispatch;
begin
  result := __TStyleBufW__Wrapper.Create;
end;
function __TPOINT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPOINT__Wrapper.setX(const val : Longint);
begin
TPOINT(GetRecordPtr^).X := val;
end;
function __TPOINT__Wrapper.getX : Longint;
begin
result := TPOINT(GetRecordPtr^).X;
end;
procedure __TPOINT__Wrapper.setY(const val : Longint);
begin
TPOINT(GetRecordPtr^).Y := val;
end;
function __TPOINT__Wrapper.getY : Longint;
begin
result := TPOINT(GetRecordPtr^).Y;
end;
function ____ImmGetStatusWindowPos__Wrapper(p0 : HIMC;
const p1 : IDispatch): Boolean;
var
__p1 : ^TPOINT;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := ImmGetStatusWindowPos(p0,__p1^);
end;


type __CANDIDATEFORM__Wrapper__ = class(__CANDIDATEFORM__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __CANDIDATEFORM__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertCANDIDATEFORMToVariant(var R : CANDIDATEFORM) : OleVariant;
var
__rw : __CANDIDATEFORM__Wrapper__;
begin
__rw := __CANDIDATEFORM__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToCANDIDATEFORM(const V : OleVariant) : CANDIDATEFORM;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := CANDIDATEFORM((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __CANDIDATELIST__Wrapper__ = class(__CANDIDATELIST__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __CANDIDATELIST__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertCANDIDATELISTToVariant(var R : CANDIDATELIST) : OleVariant;
var
__rw : __CANDIDATELIST__Wrapper__;
begin
__rw := __CANDIDATELIST__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToCANDIDATELIST(const V : OleVariant) : CANDIDATELIST;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := CANDIDATELIST((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __COMPOSITIONFORM__Wrapper__ = class(__COMPOSITIONFORM__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __COMPOSITIONFORM__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertCOMPOSITIONFORMToVariant(var R : COMPOSITIONFORM) : OleVariant;
var
__rw : __COMPOSITIONFORM__Wrapper__;
begin
__rw := __COMPOSITIONFORM__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToCOMPOSITIONFORM(const V : OleVariant) : COMPOSITIONFORM;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := COMPOSITIONFORM((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __REGISTERWORD__Wrapper__ = class(__REGISTERWORD__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __REGISTERWORD__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertREGISTERWORDToVariant(var R : REGISTERWORD) : OleVariant;
var
__rw : __REGISTERWORD__Wrapper__;
begin
__rw := __REGISTERWORD__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToREGISTERWORD(const V : OleVariant) : REGISTERWORD;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := REGISTERWORD((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __REGISTERWORDA__Wrapper__ = class(__REGISTERWORDA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __REGISTERWORDA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertREGISTERWORDAToVariant(var R : REGISTERWORDA) : OleVariant;
var
__rw : __REGISTERWORDA__Wrapper__;
begin
__rw := __REGISTERWORDA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToREGISTERWORDA(const V : OleVariant) : REGISTERWORDA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := REGISTERWORDA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __REGISTERWORDW__Wrapper__ = class(__REGISTERWORDW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __REGISTERWORDW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertREGISTERWORDWToVariant(var R : REGISTERWORDW) : OleVariant;
var
__rw : __REGISTERWORDW__Wrapper__;
begin
__rw := __REGISTERWORDW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToREGISTERWORDW(const V : OleVariant) : REGISTERWORDW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := REGISTERWORDW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __STYLEBUF__Wrapper__ = class(__STYLEBUF__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __STYLEBUF__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSTYLEBUFToVariant(var R : STYLEBUF) : OleVariant;
var
__rw : __STYLEBUF__Wrapper__;
begin
__rw := __STYLEBUF__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSTYLEBUF(const V : OleVariant) : STYLEBUF;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := STYLEBUF((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __STYLEBUFA__Wrapper__ = class(__STYLEBUFA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __STYLEBUFA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSTYLEBUFAToVariant(var R : STYLEBUFA) : OleVariant;
var
__rw : __STYLEBUFA__Wrapper__;
begin
__rw := __STYLEBUFA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSTYLEBUFA(const V : OleVariant) : STYLEBUFA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := STYLEBUFA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __STYLEBUFW__Wrapper__ = class(__STYLEBUFW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __STYLEBUFW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSTYLEBUFWToVariant(var R : STYLEBUFW) : OleVariant;
var
__rw : __STYLEBUFW__Wrapper__;
begin
__rw := __STYLEBUFW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSTYLEBUFW(const V : OleVariant) : STYLEBUFW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := STYLEBUFW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagCANDIDATEFORM__Wrapper__ = class(__tagCANDIDATEFORM__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagCANDIDATEFORM__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagCANDIDATEFORMToVariant(var R : tagCANDIDATEFORM) : OleVariant;
var
__rw : __tagCANDIDATEFORM__Wrapper__;
begin
__rw := __tagCANDIDATEFORM__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagCANDIDATEFORM(const V : OleVariant) : tagCANDIDATEFORM;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagCANDIDATEFORM((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagCANDIDATELIST__Wrapper__ = class(__tagCANDIDATELIST__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagCANDIDATELIST__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagCANDIDATELISTToVariant(var R : tagCANDIDATELIST) : OleVariant;
var
__rw : __tagCANDIDATELIST__Wrapper__;
begin
__rw := __tagCANDIDATELIST__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagCANDIDATELIST(const V : OleVariant) : tagCANDIDATELIST;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagCANDIDATELIST((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagCOMPOSITIONFORM__Wrapper__ = class(__tagCOMPOSITIONFORM__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagCOMPOSITIONFORM__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagCOMPOSITIONFORMToVariant(var R : tagCOMPOSITIONFORM) : OleVariant;
var
__rw : __tagCOMPOSITIONFORM__Wrapper__;
begin
__rw := __tagCOMPOSITIONFORM__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagCOMPOSITIONFORM(const V : OleVariant) : tagCOMPOSITIONFORM;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagCOMPOSITIONFORM((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagREGISTERWORD__Wrapper__ = class(__tagREGISTERWORD__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagREGISTERWORD__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagREGISTERWORDToVariant(var R : tagREGISTERWORD) : OleVariant;
var
__rw : __tagREGISTERWORD__Wrapper__;
begin
__rw := __tagREGISTERWORD__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagREGISTERWORD(const V : OleVariant) : tagREGISTERWORD;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagREGISTERWORD((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagREGISTERWORDA__Wrapper__ = class(__tagREGISTERWORDA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagREGISTERWORDA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagREGISTERWORDAToVariant(var R : tagREGISTERWORDA) : OleVariant;
var
__rw : __tagREGISTERWORDA__Wrapper__;
begin
__rw := __tagREGISTERWORDA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagREGISTERWORDA(const V : OleVariant) : tagREGISTERWORDA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagREGISTERWORDA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagREGISTERWORDW__Wrapper__ = class(__tagREGISTERWORDW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagREGISTERWORDW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagREGISTERWORDWToVariant(var R : tagREGISTERWORDW) : OleVariant;
var
__rw : __tagREGISTERWORDW__Wrapper__;
begin
__rw := __tagREGISTERWORDW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagREGISTERWORDW(const V : OleVariant) : tagREGISTERWORDW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagREGISTERWORDW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagSTYLEBUF__Wrapper__ = class(__tagSTYLEBUF__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagSTYLEBUF__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagSTYLEBUFToVariant(var R : tagSTYLEBUF) : OleVariant;
var
__rw : __tagSTYLEBUF__Wrapper__;
begin
__rw := __tagSTYLEBUF__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagSTYLEBUF(const V : OleVariant) : tagSTYLEBUF;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagSTYLEBUF((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagSTYLEBUFA__Wrapper__ = class(__tagSTYLEBUFA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagSTYLEBUFA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagSTYLEBUFAToVariant(var R : tagSTYLEBUFA) : OleVariant;
var
__rw : __tagSTYLEBUFA__Wrapper__;
begin
__rw := __tagSTYLEBUFA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagSTYLEBUFA(const V : OleVariant) : tagSTYLEBUFA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagSTYLEBUFA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagSTYLEBUFW__Wrapper__ = class(__tagSTYLEBUFW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagSTYLEBUFW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagSTYLEBUFWToVariant(var R : tagSTYLEBUFW) : OleVariant;
var
__rw : __tagSTYLEBUFW__Wrapper__;
begin
__rw := __tagSTYLEBUFW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagSTYLEBUFW(const V : OleVariant) : tagSTYLEBUFW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagSTYLEBUFW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCandidateForm__Wrapper__ = class(__TCandidateForm__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCandidateForm__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCandidateFormToVariant(var R : TCandidateForm) : OleVariant;
var
__rw : __TCandidateForm__Wrapper__;
begin
__rw := __TCandidateForm__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCandidateForm(const V : OleVariant) : TCandidateForm;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCandidateForm((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCandidateList__Wrapper__ = class(__TCandidateList__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCandidateList__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCandidateListToVariant(var R : TCandidateList) : OleVariant;
var
__rw : __TCandidateList__Wrapper__;
begin
__rw := __TCandidateList__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCandidateList(const V : OleVariant) : TCandidateList;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCandidateList((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCompositionForm__Wrapper__ = class(__TCompositionForm__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCompositionForm__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCompositionFormToVariant(var R : TCompositionForm) : OleVariant;
var
__rw : __TCompositionForm__Wrapper__;
begin
__rw := __TCompositionForm__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCompositionForm(const V : OleVariant) : TCompositionForm;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCompositionForm((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPOINT__Wrapper__ = class(__TPOINT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPOINT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPOINTToVariant(var R : TPOINT) : OleVariant;
var
__rw : __TPOINT__Wrapper__;
begin
__rw := __TPOINT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPOINT(const V : OleVariant) : TPOINT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPOINT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRegisterWord__Wrapper__ = class(__TRegisterWord__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRegisterWord__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRegisterWordToVariant(var R : TRegisterWord) : OleVariant;
var
__rw : __TRegisterWord__Wrapper__;
begin
__rw := __TRegisterWord__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRegisterWord(const V : OleVariant) : TRegisterWord;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRegisterWord((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRegisterWordA__Wrapper__ = class(__TRegisterWordA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRegisterWordA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRegisterWordAToVariant(var R : TRegisterWordA) : OleVariant;
var
__rw : __TRegisterWordA__Wrapper__;
begin
__rw := __TRegisterWordA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRegisterWordA(const V : OleVariant) : TRegisterWordA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRegisterWordA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRegisterWordW__Wrapper__ = class(__TRegisterWordW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRegisterWordW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRegisterWordWToVariant(var R : TRegisterWordW) : OleVariant;
var
__rw : __TRegisterWordW__Wrapper__;
begin
__rw := __TRegisterWordW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRegisterWordW(const V : OleVariant) : TRegisterWordW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRegisterWordW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TStyleBuf__Wrapper__ = class(__TStyleBuf__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TStyleBuf__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTStyleBufToVariant(var R : TStyleBuf) : OleVariant;
var
__rw : __TStyleBuf__Wrapper__;
begin
__rw := __TStyleBuf__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTStyleBuf(const V : OleVariant) : TStyleBuf;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TStyleBuf((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TStyleBufA__Wrapper__ = class(__TStyleBufA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TStyleBufA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTStyleBufAToVariant(var R : TStyleBufA) : OleVariant;
var
__rw : __TStyleBufA__Wrapper__;
begin
__rw := __TStyleBufA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTStyleBufA(const V : OleVariant) : TStyleBufA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TStyleBufA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TStyleBufW__Wrapper__ = class(__TStyleBufW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TStyleBufW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTStyleBufWToVariant(var R : TStyleBufW) : OleVariant;
var
__rw : __TStyleBufW__Wrapper__;
begin
__rw := __TStyleBufW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTStyleBufW(const V : OleVariant) : TStyleBufW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TStyleBufW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..204] of string = (
'VK_PROCESSKEY'
,'STYLE_DESCRIPTION_SIZE'
,'WM_CONVERTREQUESTEX'
,'WM_IME_STARTCOMPOSITION'
,'WM_IME_ENDCOMPOSITION'
,'WM_IME_COMPOSITION'
,'WM_IME_KEYLAST'
,'WM_IME_SETCONTEXT'
,'WM_IME_NOTIFY'
,'WM_IME_CONTROL'
,'WM_IME_COMPOSITIONFULL'
,'WM_IME_SELECT'
,'WM_IME_CHAR'
,'WM_IME_KEYDOWN'
,'WM_IME_KEYUP'
,'IMC_GETCANDIDATEPOS'
,'IMC_SETCANDIDATEPOS'
,'IMC_GETCOMPOSITIONFONT'
,'IMC_SETCOMPOSITIONFONT'
,'IMC_GETCOMPOSITIONWINDOW'
,'IMC_SETCOMPOSITIONWINDOW'
,'IMC_GETSTATUSWINDOWPOS'
,'IMC_SETSTATUSWINDOWPOS'
,'IMC_CLOSESTATUSWINDOW'
,'IMC_OPENSTATUSWINDOW'
,'NI_OPENCANDIDATE'
,'NI_CLOSECANDIDATE'
,'NI_SELECTCANDIDATESTR'
,'NI_CHANGECANDIDATELIST'
,'NI_FINALIZECONVERSIONRESULT'
,'NI_COMPOSITIONSTR'
,'NI_SETCANDIDATE_PAGESTART'
,'NI_SETCANDIDATE_PAGESIZE'
,'ISC_SHOWUICANDIDATEWINDOW'
,'ISC_SHOWUICOMPOSITIONWINDOW'
,'ISC_SHOWUIGUIDELINE'
,'ISC_SHOWUIALLCANDIDATEWINDOW'
,'ISC_SHOWUIALL'
,'CPS_COMPLETE'
,'CPS_CONVERT'
,'CPS_REVERT'
,'CPS_CANCEL'
,'MOD_ALT'
,'MOD_CONTROL'
,'MOD_SHIFT'
,'MOD_LEFT'
,'MOD_RIGHT'
,'MOD_ON_KEYUP'
,'MOD_IGNORE_ALL_MODIFIER'
,'IME_CHOTKEY_IME_NONIME_TOGGLE'
,'IME_CHOTKEY_SHAPE_TOGGLE'
,'IME_CHOTKEY_SYMBOL_TOGGLE'
,'IME_JHOTKEY_CLOSE_OPEN'
,'IME_KHOTKEY_SHAPE_TOGGLE'
,'IME_KHOTKEY_HANJACONVERT'
,'IME_KHOTKEY_ENGLISH'
,'IME_THOTKEY_IME_NONIME_TOGGLE'
,'IME_THOTKEY_SHAPE_TOGGLE'
,'IME_THOTKEY_SYMBOL_TOGGLE'
,'IME_HOTKEY_DSWITCH_FIRST'
,'IME_HOTKEY_DSWITCH_LAST'
,'IME_HOTKEY_PRIVATE_FIRST'
,'IME_ITHOTKEY_RESEND_RESULTSTR'
,'IME_ITHOTKEY_PREVIOUS_COMPOSITION'
,'IME_ITHOTKEY_UISTYLE_TOGGLE'
,'IME_HOTKEY_PRIVATE_LAST'
,'GCS_COMPREADSTR'
,'GCS_COMPREADATTR'
,'GCS_COMPREADCLAUSE'
,'GCS_COMPSTR'
,'GCS_COMPATTR'
,'GCS_COMPCLAUSE'
,'GCS_CURSORPOS'
,'GCS_DELTASTART'
,'GCS_RESULTREADSTR'
,'GCS_RESULTREADCLAUSE'
,'GCS_RESULTSTR'
,'GCS_RESULTCLAUSE'
,'CS_INSERTCHAR'
,'CS_NOMOVECARET'
,'IMEVER_0310'
,'IMEVER_0400'
,'IME_PROP_AT_CARET'
,'IME_PROP_SPECIAL_UI'
,'IME_PROP_CANDLIST_START_FROM_1'
,'IME_PROP_UNICODE'
,'UI_CAP_2700'
,'UI_CAP_ROT90'
,'UI_CAP_ROTANY'
,'SCS_CAP_COMPSTR'
,'SCS_CAP_MAKEREAD'
,'SELECT_CAP_CONVERSION'
,'SELECT_CAP_SENTENCE'
,'GGL_LEVEL'
,'GGL_INDEX'
,'GGL_STRING'
,'GGL_PRIVATE'
,'GL_LEVEL_NOGUIDELINE'
,'GL_LEVEL_FATAL'
,'GL_LEVEL_ERROR'
,'GL_LEVEL_WARNING'
,'GL_LEVEL_INFORMATION'
,'GL_ID_UNKNOWN'
,'GL_ID_NOMODULE'
,'GL_ID_NODICTIONARY'
,'GL_ID_CANNOTSAVE'
,'GL_ID_NOCONVERT'
,'GL_ID_TYPINGERROR'
,'GL_ID_TOOMANYSTROKE'
,'GL_ID_READINGCONFLICT'
,'GL_ID_INPUTREADING'
,'GL_ID_INPUTRADICAL'
,'GL_ID_INPUTCODE'
,'GL_ID_INPUTSYMBOL'
,'GL_ID_CHOOSECANDIDATE'
,'GL_ID_REVERSECONVERSION'
,'GL_ID_PRIVATE_FIRST'
,'GL_ID_PRIVATE_LAST'
,'IGP_GETIMEVERSION'
,'IGP_PROPERTY'
,'IGP_CONVERSION'
,'IGP_SENTENCE'
,'IGP_UI'
,'IGP_SETCOMPSTR'
,'IGP_SELECT'
,'SCS_SETSTR'
,'SCS_CHANGEATTR'
,'SCS_CHANGECLAUSE'
,'ATTR_INPUT'
,'ATTR_TARGET_CONVERTED'
,'ATTR_CONVERTED'
,'ATTR_TARGET_NOTCONVERTED'
,'ATTR_INPUT_ERROR'
,'CFS_DEFAULT'
,'CFS_RECT'
,'CFS_POINT'
,'CFS_SCREEN'
,'CFS_FORCE_POSITION'
,'CFS_CANDIDATEPOS'
,'CFS_EXCLUDE'
,'GCL_CONVERSION'
,'GCL_REVERSECONVERSION'
,'GCL_REVERSE_LENGTH'
,'IME_CMODE_ALPHANUMERIC'
,'IME_CMODE_NATIVE'
,'IME_CMODE_KATAKANA'
,'IME_CMODE_LANGUAGE'
,'IME_CMODE_FULLSHAPE'
,'IME_CMODE_ROMAN'
,'IME_CMODE_CHARCODE'
,'IME_CMODE_HANJACONVERT'
,'IME_CMODE_SOFTKBD'
,'IME_CMODE_NOCONVERSION'
,'IME_CMODE_EUDC'
,'IME_CMODE_SYMBOL'
,'IME_SMODE_NONE'
,'IME_SMODE_PLAURALCLAUSE'
,'IME_SMODE_SINGLECONVERT'
,'IME_SMODE_AUTOMATIC'
,'IME_SMODE_PHRASEPREDICT'
,'IME_CAND_UNKNOWN'
,'IME_CAND_READ'
,'IME_CAND_CODE'
,'IME_CAND_MEANING'
,'IME_CAND_RADICAL'
,'IME_CAND_STROKE'
,'IMN_CLOSESTATUSWINDOW'
,'IMN_OPENSTATUSWINDOW'
,'IMN_CHANGECANDIDATE'
,'IMN_CLOSECANDIDATE'
,'IMN_OPENCANDIDATE'
,'IMN_SETCONVERSIONMODE'
,'IMN_SETSENTENCEMODE'
,'IMN_SETOPENSTATUS'
,'IMN_SETCANDIDATEPOS'
,'IMN_SETCOMPOSITIONFONT'
,'IMN_SETCOMPOSITIONWINDOW'
,'IMN_SETSTATUSWINDOWPOS'
,'IMN_GUIDELINE'
,'IMN_PRIVATE'
,'IMM_ERROR_NODATA'
,'IMM_ERROR_GENERAL'
,'IME_CONFIG_GENERAL'
,'IME_CONFIG_REGISTERWORD'
,'IME_CONFIG_SELECTDICTIONARY'
,'IME_ESC_QUERY_SUPPORT'
,'IME_ESC_RESERVED_FIRST'
,'IME_ESC_RESERVED_LAST'
,'IME_ESC_PRIVATE_FIRST'
,'IME_ESC_PRIVATE_LAST'
,'IME_ESC_SEQUENCE_TO_INTERNAL'
,'IME_ESC_GET_EUDC_DICTIONARY'
,'IME_ESC_SET_EUDC_DICTIONARY'
,'IME_ESC_MAX_KEY'
,'IME_ESC_IME_NAME'
,'IME_ESC_SYNC_HOTKEY'
,'IME_ESC_HANJA_MODE'
,'IME_ESC_AUTOMATA'
,'IME_ESC_PRIVATE_HOTKEY'
,'IME_REGWORD_STYLE_EUDC'
,'IME_REGWORD_STYLE_USER_FIRST'
,'IME_REGWORD_STYLE_USER_LAST'
,'SOFTKEYBOARD_TYPE_T1'
,'SOFTKEYBOARD_TYPE_C1'
,'imm32'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,VK_PROCESSKEY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,STYLE_DESCRIPTION_SIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,WM_CONVERTREQUESTEX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,WM_IME_STARTCOMPOSITION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,WM_IME_ENDCOMPOSITION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,WM_IME_COMPOSITION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,WM_IME_KEYLAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,WM_IME_SETCONTEXT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,WM_IME_NOTIFY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,WM_IME_CONTROL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,WM_IME_COMPOSITIONFULL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,WM_IME_SELECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,WM_IME_CHAR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,WM_IME_KEYDOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,WM_IME_KEYUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,IMC_GETCANDIDATEPOS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,IMC_SETCANDIDATEPOS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,IMC_GETCOMPOSITIONFONT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,IMC_SETCOMPOSITIONFONT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,IMC_GETCOMPOSITIONWINDOW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,IMC_SETCOMPOSITIONWINDOW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,IMC_GETSTATUSWINDOWPOS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,IMC_SETSTATUSWINDOWPOS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,IMC_CLOSESTATUSWINDOW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,IMC_OPENSTATUSWINDOW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,NI_OPENCANDIDATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,NI_CLOSECANDIDATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,NI_SELECTCANDIDATESTR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,NI_CHANGECANDIDATELIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,NI_FINALIZECONVERSIONRESULT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,NI_COMPOSITIONSTR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,NI_SETCANDIDATE_PAGESTART));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,NI_SETCANDIDATE_PAGESIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,ISC_SHOWUICANDIDATEWINDOW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,ISC_SHOWUICOMPOSITIONWINDOW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,ISC_SHOWUIGUIDELINE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,ISC_SHOWUIALLCANDIDATEWINDOW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,ISC_SHOWUIALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,CPS_COMPLETE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,CPS_CONVERT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,CPS_REVERT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,CPS_CANCEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,MOD_ALT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,MOD_CONTROL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,MOD_SHIFT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,MOD_LEFT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,MOD_RIGHT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,MOD_ON_KEYUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,MOD_IGNORE_ALL_MODIFIER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,IME_CHOTKEY_IME_NONIME_TOGGLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,IME_CHOTKEY_SHAPE_TOGGLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,IME_CHOTKEY_SYMBOL_TOGGLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,IME_JHOTKEY_CLOSE_OPEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,IME_KHOTKEY_SHAPE_TOGGLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,IME_KHOTKEY_HANJACONVERT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,IME_KHOTKEY_ENGLISH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,IME_THOTKEY_IME_NONIME_TOGGLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,IME_THOTKEY_SHAPE_TOGGLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,IME_THOTKEY_SYMBOL_TOGGLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,IME_HOTKEY_DSWITCH_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,IME_HOTKEY_DSWITCH_LAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,IME_HOTKEY_PRIVATE_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,IME_ITHOTKEY_RESEND_RESULTSTR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,IME_ITHOTKEY_PREVIOUS_COMPOSITION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,IME_ITHOTKEY_UISTYLE_TOGGLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[65] ,IME_HOTKEY_PRIVATE_LAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[66] ,GCS_COMPREADSTR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[67] ,GCS_COMPREADATTR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[68] ,GCS_COMPREADCLAUSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[69] ,GCS_COMPSTR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[70] ,GCS_COMPATTR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[71] ,GCS_COMPCLAUSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[72] ,GCS_CURSORPOS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[73] ,GCS_DELTASTART));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[74] ,GCS_RESULTREADSTR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[75] ,GCS_RESULTREADCLAUSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[76] ,GCS_RESULTSTR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[77] ,GCS_RESULTCLAUSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[78] ,CS_INSERTCHAR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[79] ,CS_NOMOVECARET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[80] ,IMEVER_0310));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[81] ,IMEVER_0400));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[82] ,IME_PROP_AT_CARET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[83] ,IME_PROP_SPECIAL_UI));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[84] ,IME_PROP_CANDLIST_START_FROM_1));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[85] ,IME_PROP_UNICODE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[86] ,UI_CAP_2700));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[87] ,UI_CAP_ROT90));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[88] ,UI_CAP_ROTANY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[89] ,SCS_CAP_COMPSTR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[90] ,SCS_CAP_MAKEREAD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[91] ,SELECT_CAP_CONVERSION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[92] ,SELECT_CAP_SENTENCE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[93] ,GGL_LEVEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[94] ,GGL_INDEX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[95] ,GGL_STRING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[96] ,GGL_PRIVATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[97] ,GL_LEVEL_NOGUIDELINE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[98] ,GL_LEVEL_FATAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[99] ,GL_LEVEL_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[100] ,GL_LEVEL_WARNING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[101] ,GL_LEVEL_INFORMATION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[102] ,GL_ID_UNKNOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[103] ,GL_ID_NOMODULE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[104] ,GL_ID_NODICTIONARY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[105] ,GL_ID_CANNOTSAVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[106] ,GL_ID_NOCONVERT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[107] ,GL_ID_TYPINGERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[108] ,GL_ID_TOOMANYSTROKE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[109] ,GL_ID_READINGCONFLICT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[110] ,GL_ID_INPUTREADING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[111] ,GL_ID_INPUTRADICAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[112] ,GL_ID_INPUTCODE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[113] ,GL_ID_INPUTSYMBOL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[114] ,GL_ID_CHOOSECANDIDATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[115] ,GL_ID_REVERSECONVERSION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[116] ,GL_ID_PRIVATE_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[117] ,GL_ID_PRIVATE_LAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[118] ,IGP_GETIMEVERSION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[119] ,IGP_PROPERTY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[120] ,IGP_CONVERSION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[121] ,IGP_SENTENCE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[122] ,IGP_UI));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[123] ,IGP_SETCOMPSTR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[124] ,IGP_SELECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[125] ,SCS_SETSTR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[126] ,SCS_CHANGEATTR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[127] ,SCS_CHANGECLAUSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[128] ,ATTR_INPUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[129] ,ATTR_TARGET_CONVERTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[130] ,ATTR_CONVERTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[131] ,ATTR_TARGET_NOTCONVERTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[132] ,ATTR_INPUT_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[133] ,CFS_DEFAULT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[134] ,CFS_RECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[135] ,CFS_POINT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[136] ,CFS_SCREEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[137] ,CFS_FORCE_POSITION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[138] ,CFS_CANDIDATEPOS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[139] ,CFS_EXCLUDE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[140] ,GCL_CONVERSION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[141] ,GCL_REVERSECONVERSION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[142] ,GCL_REVERSE_LENGTH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[143] ,IME_CMODE_ALPHANUMERIC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[144] ,IME_CMODE_NATIVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[145] ,IME_CMODE_KATAKANA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[146] ,IME_CMODE_LANGUAGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[147] ,IME_CMODE_FULLSHAPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[148] ,IME_CMODE_ROMAN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[149] ,IME_CMODE_CHARCODE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[150] ,IME_CMODE_HANJACONVERT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[151] ,IME_CMODE_SOFTKBD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[152] ,IME_CMODE_NOCONVERSION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[153] ,IME_CMODE_EUDC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[154] ,IME_CMODE_SYMBOL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[155] ,IME_SMODE_NONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[156] ,IME_SMODE_PLAURALCLAUSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[157] ,IME_SMODE_SINGLECONVERT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[158] ,IME_SMODE_AUTOMATIC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[159] ,IME_SMODE_PHRASEPREDICT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[160] ,IME_CAND_UNKNOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[161] ,IME_CAND_READ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[162] ,IME_CAND_CODE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[163] ,IME_CAND_MEANING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[164] ,IME_CAND_RADICAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[165] ,IME_CAND_STROKE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[166] ,IMN_CLOSESTATUSWINDOW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[167] ,IMN_OPENSTATUSWINDOW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[168] ,IMN_CHANGECANDIDATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[169] ,IMN_CLOSECANDIDATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[170] ,IMN_OPENCANDIDATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[171] ,IMN_SETCONVERSIONMODE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[172] ,IMN_SETSENTENCEMODE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[173] ,IMN_SETOPENSTATUS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[174] ,IMN_SETCANDIDATEPOS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[175] ,IMN_SETCOMPOSITIONFONT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[176] ,IMN_SETCOMPOSITIONWINDOW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[177] ,IMN_SETSTATUSWINDOWPOS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[178] ,IMN_GUIDELINE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[179] ,IMN_PRIVATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[180] ,IMM_ERROR_NODATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[181] ,IMM_ERROR_GENERAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[182] ,IME_CONFIG_GENERAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[183] ,IME_CONFIG_REGISTERWORD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[184] ,IME_CONFIG_SELECTDICTIONARY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[185] ,IME_ESC_QUERY_SUPPORT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[186] ,IME_ESC_RESERVED_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[187] ,IME_ESC_RESERVED_LAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[188] ,IME_ESC_PRIVATE_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[189] ,IME_ESC_PRIVATE_LAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[190] ,IME_ESC_SEQUENCE_TO_INTERNAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[191] ,IME_ESC_GET_EUDC_DICTIONARY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[192] ,IME_ESC_SET_EUDC_DICTIONARY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[193] ,IME_ESC_MAX_KEY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[194] ,IME_ESC_IME_NAME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[195] ,IME_ESC_SYNC_HOTKEY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[196] ,IME_ESC_HANJA_MODE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[197] ,IME_ESC_AUTOMATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[198] ,IME_ESC_PRIVATE_HOTKEY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[199] ,IME_REGWORD_STYLE_EUDC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[200] ,IME_REGWORD_STYLE_USER_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[201] ,IME_REGWORD_STYLE_USER_LAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[202] ,SOFTKEYBOARD_TYPE_T1));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[203] ,SOFTKEYBOARD_TYPE_C1));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[204] ,imm32));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..59] of string = (
'CANDIDATEFORM'
,'CANDIDATELIST'
,'COMPOSITIONFORM'
,'REGISTERWORD'
,'REGISTERWORDA'
,'REGISTERWORDW'
,'STYLEBUF'
,'STYLEBUFA'
,'STYLEBUFW'
,'tagCANDIDATEFORM'
,'tagCANDIDATELIST'
,'tagCOMPOSITIONFORM'
,'tagREGISTERWORD'
,'tagREGISTERWORDA'
,'tagREGISTERWORDW'
,'tagSTYLEBUF'
,'tagSTYLEBUFA'
,'tagSTYLEBUFW'
,'TCandidateForm'
,'TCandidateList'
,'TCompositionForm'
,'TRegisterWord'
,'TRegisterWordA'
,'TRegisterWordW'
,'TStyleBuf'
,'TStyleBufA'
,'TStyleBufW'
,'ImmGetProperty'
,'ImmIsIME'
,'ImmSimulateHotKey'
,'ImmCreateContext'
,'ImmDestroyContext'
,'ImmGetContext'
,'ImmReleaseContext'
,'ImmAssociateContext'
,'ImmGetCompositionString'
,'ImmGetCompositionStringA'
,'ImmGetCompositionStringW'
,'ImmSetCompositionString'
,'ImmSetCompositionStringA'
,'ImmSetCompositionStringW'
,'ImmGetCandidateListCount'
,'ImmGetCandidateListCountA'
,'ImmGetCandidateListCountW'
,'ImmGetConversionStatus'
,'ImmSetConversionStatus'
,'ImmGetOpenStatus'
,'ImmSetOpenStatus'
,'ImmConfigureIME'
,'ImmConfigureIMEA'
,'ImmConfigureIMEW'
,'ImmEscape'
,'ImmEscapeA'
,'ImmEscapeW'
,'ImmNotifyIME'
,'ImmGetStatusWindowPos'
,'ImmIsUIMessage'
,'ImmIsUIMessageA'
,'ImmIsUIMessageW'
,'ImmGetVirtualKey'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_CANDIDATEFORM_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_CANDIDATELIST_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_COMPOSITIONFORM_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(_REGISTERWORD_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(_REGISTERWORDA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[5],Addr(_REGISTERWORDW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[6],Addr(_STYLEBUF_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[7],Addr(_STYLEBUFA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[8],Addr(_STYLEBUFW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[9],Addr(_tagCANDIDATEFORM_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[10],Addr(_tagCANDIDATELIST_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[11],Addr(_tagCOMPOSITIONFORM_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[12],Addr(_tagREGISTERWORD_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[13],Addr(_tagREGISTERWORDA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[14],Addr(_tagREGISTERWORDW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[15],Addr(_tagSTYLEBUF_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[16],Addr(_tagSTYLEBUFA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[17],Addr(_tagSTYLEBUFW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[18],Addr(_TCandidateForm_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[19],Addr(_TCandidateList_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[20],Addr(_TCompositionForm_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[21],Addr(_TRegisterWord_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[22],Addr(_TRegisterWordA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[23],Addr(_TRegisterWordW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[24],Addr(_TStyleBuf_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[25],Addr(_TStyleBufA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[26],Addr(_TStyleBufW_)));
RegisterProc(nil,MethodNames[27],mtProc,TypeInfo(_T9),[
TypeInfo(HKL),
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(ImmGetProperty),cStdCall);

RegisterProc(nil,MethodNames[28],mtProc,TypeInfo(_T10),[
TypeInfo(HKL),TypeInfo(Boolean)],Addr(ImmIsIME),cStdCall);

RegisterProc(nil,MethodNames[29],mtProc,TypeInfo(_T11),[
TypeInfo(hWnd),
TypeInfo(DWORD),TypeInfo(Boolean)],Addr(ImmSimulateHotKey),cStdCall);

RegisterProc(nil,MethodNames[30],mtProc,TypeInfo(_T12),[TypeInfo(HIMC)],Addr(ImmCreateContext),cStdCall);

RegisterProc(nil,MethodNames[31],mtProc,TypeInfo(_T13),[
TypeInfo(HIMC),TypeInfo(Boolean)],Addr(ImmDestroyContext),cStdCall);

RegisterProc(nil,MethodNames[32],mtProc,TypeInfo(_T14),[
TypeInfo(hWnd),TypeInfo(HIMC)],Addr(ImmGetContext),cStdCall);

RegisterProc(nil,MethodNames[33],mtProc,TypeInfo(_T15),[
TypeInfo(hWnd),
TypeInfo(HIMC),TypeInfo(Boolean)],Addr(ImmReleaseContext),cStdCall);

RegisterProc(nil,MethodNames[34],mtProc,TypeInfo(_T16),[
TypeInfo(hWnd),
TypeInfo(HIMC),TypeInfo(HIMC)],Addr(ImmAssociateContext),cStdCall);

RegisterProc(nil,MethodNames[35],mtProc,TypeInfo(_T17),[
TypeInfo(HIMC),
TypeInfo(DWORD),
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(Longint)],Addr(ImmGetCompositionString),cStdCall);

RegisterProc(nil,MethodNames[36],mtProc,TypeInfo(_T18),[
TypeInfo(HIMC),
TypeInfo(DWORD),
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(Longint)],Addr(ImmGetCompositionStringA),cStdCall);

RegisterProc(nil,MethodNames[37],mtProc,TypeInfo(_T19),[
TypeInfo(HIMC),
TypeInfo(DWORD),
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(Longint)],Addr(ImmGetCompositionStringW),cStdCall);

RegisterProc(nil,MethodNames[38],mtProc,TypeInfo(_T20),[
TypeInfo(HIMC),
TypeInfo(DWORD),
TypeInfoPointer,
TypeInfo(DWORD),
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(Boolean)],Addr(ImmSetCompositionString),cStdCall);

RegisterProc(nil,MethodNames[39],mtProc,TypeInfo(_T21),[
TypeInfo(HIMC),
TypeInfo(DWORD),
TypeInfoPointer,
TypeInfo(DWORD),
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(Boolean)],Addr(ImmSetCompositionStringA),cStdCall);

RegisterProc(nil,MethodNames[40],mtProc,TypeInfo(_T22),[
TypeInfo(HIMC),
TypeInfo(DWORD),
TypeInfoPointer,
TypeInfo(DWORD),
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(Boolean)],Addr(ImmSetCompositionStringW),cStdCall);

RegisterProc(nil,MethodNames[41],mtProc,TypeInfo(_T23),[
TypeInfo(HIMC),
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(ImmGetCandidateListCount),cStdCall);

RegisterProc(nil,MethodNames[42],mtProc,TypeInfo(_T24),[
TypeInfo(HIMC),
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(ImmGetCandidateListCountA),cStdCall);

RegisterProc(nil,MethodNames[43],mtProc,TypeInfo(_T25),[
TypeInfo(HIMC),
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(ImmGetCandidateListCountW),cStdCall);

RegisterProc(nil,MethodNames[44],mtProc,TypeInfo(_T32),[
TypeInfo(HIMC),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(Boolean)],Addr(ImmGetConversionStatus),cStdCall);

RegisterProc(nil,MethodNames[45],mtProc,TypeInfo(_T33),[
TypeInfo(HIMC),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(Boolean)],Addr(ImmSetConversionStatus),cStdCall);

RegisterProc(nil,MethodNames[46],mtProc,TypeInfo(_T34),[
TypeInfo(HIMC),TypeInfo(Boolean)],Addr(ImmGetOpenStatus),cStdCall);

RegisterProc(nil,MethodNames[47],mtProc,TypeInfo(_T35),[
TypeInfo(HIMC),
TypeInfo(Boolean),TypeInfo(Boolean)],Addr(ImmSetOpenStatus),cStdCall);

RegisterProc(nil,MethodNames[48],mtProc,TypeInfo(_T42),[
TypeInfo(HKL),
TypeInfo(hWnd),
TypeInfo(DWORD),
TypeInfoPointer,TypeInfo(Boolean)],Addr(ImmConfigureIME),cStdCall);

RegisterProc(nil,MethodNames[49],mtProc,TypeInfo(_T43),[
TypeInfo(HKL),
TypeInfo(hWnd),
TypeInfo(DWORD),
TypeInfoPointer,TypeInfo(Boolean)],Addr(ImmConfigureIMEA),cStdCall);

RegisterProc(nil,MethodNames[50],mtProc,TypeInfo(_T44),[
TypeInfo(HKL),
TypeInfo(hWnd),
TypeInfo(DWORD),
TypeInfoPointer,TypeInfo(Boolean)],Addr(ImmConfigureIMEW),cStdCall);

RegisterProc(nil,MethodNames[51],mtProc,TypeInfo(_T45),[
TypeInfo(HKL),
TypeInfo(HIMC),
TypeInfo(UINT),
TypeInfoPointer,TypeInfo(LRESULT)],Addr(ImmEscape),cStdCall);

RegisterProc(nil,MethodNames[52],mtProc,TypeInfo(_T46),[
TypeInfo(HKL),
TypeInfo(HIMC),
TypeInfo(UINT),
TypeInfoPointer,TypeInfo(LRESULT)],Addr(ImmEscapeA),cStdCall);

RegisterProc(nil,MethodNames[53],mtProc,TypeInfo(_T47),[
TypeInfo(HKL),
TypeInfo(HIMC),
TypeInfo(UINT),
TypeInfoPointer,TypeInfo(LRESULT)],Addr(ImmEscapeW),cStdCall);

RegisterProc(nil,MethodNames[54],mtProc,TypeInfo(_T51),[
TypeInfo(HIMC),
TypeInfo(DWORD),
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(Boolean)],Addr(ImmNotifyIME),cStdCall);

RegisterProc(nil,MethodNames[55],mtProc,TypeInfo(_T52),[
TypeInfo(HIMC),
TypeInfo(IDispatch),TypeInfo(Boolean)],Addr(____ImmGetStatusWindowPos__Wrapper),cRegister);

RegisterProc(nil,MethodNames[56],mtProc,TypeInfo(_T58),[
TypeInfo(hWnd),
TypeInfo(UINT),
TypeInfo(wParam),
TypeInfo(lParam),TypeInfo(Boolean)],Addr(ImmIsUIMessage),cStdCall);

RegisterProc(nil,MethodNames[57],mtProc,TypeInfo(_T59),[
TypeInfo(hWnd),
TypeInfo(UINT),
TypeInfo(wParam),
TypeInfo(lParam),TypeInfo(Boolean)],Addr(ImmIsUIMessageA),cStdCall);

RegisterProc(nil,MethodNames[58],mtProc,TypeInfo(_T60),[
TypeInfo(hWnd),
TypeInfo(UINT),
TypeInfo(wParam),
TypeInfo(lParam),TypeInfo(Boolean)],Addr(ImmIsUIMessageW),cStdCall);

RegisterProc(nil,MethodNames[59],mtProc,TypeInfo(_T61),[
TypeInfo(hWnd),TypeInfo(UINT)],Addr(ImmGetVirtualKey),cStdCall);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'ImmInstallIME',mtProc,TypeInfo(_T0),[
TypeInfoPChar,
TypeInfoPChar,TypeInfo(HKL)],Addr(ImmInstallIME),cStdCall)}

{RegisterProc(nil,'ImmInstallIMEA',mtProc,TypeInfo(_T1),[
TypeInfoPChar,
TypeInfoPChar,TypeInfo(HKL)],Addr(ImmInstallIMEA),cStdCall)}

{RegisterProc(nil,'ImmInstallIMEW',mtProc,TypeInfo(_T2),[
TypeInfoPWideChar,
TypeInfoPWideChar,TypeInfo(HKL)],Addr(ImmInstallIMEW),cStdCall)}

{RegisterProc(nil,'ImmGetDescription',mtProc,TypeInfo(_T3),[
TypeInfo(HKL),
TypeInfoPChar,
TypeInfo(UINT),TypeInfo(UINT)],Addr(ImmGetDescription),cStdCall)}

{RegisterProc(nil,'ImmGetDescriptionA',mtProc,TypeInfo(_T4),[
TypeInfo(HKL),
TypeInfoPChar,
TypeInfo(UINT),TypeInfo(UINT)],Addr(ImmGetDescriptionA),cStdCall)}

{RegisterProc(nil,'ImmGetDescriptionW',mtProc,TypeInfo(_T5),[
TypeInfo(HKL),
TypeInfoPWideChar,
TypeInfo(UINT),TypeInfo(UINT)],Addr(ImmGetDescriptionW),cStdCall)}

{RegisterProc(nil,'ImmGetIMEFileName',mtProc,TypeInfo(_T6),[
TypeInfo(HKL),
TypeInfoPChar,
TypeInfo(UINT),TypeInfo(UINT)],Addr(ImmGetIMEFileName),cStdCall)}

{RegisterProc(nil,'ImmGetIMEFileNameA',mtProc,TypeInfo(_T7),[
TypeInfo(HKL),
TypeInfoPChar,
TypeInfo(UINT),TypeInfo(UINT)],Addr(ImmGetIMEFileNameA),cStdCall)}

{RegisterProc(nil,'ImmGetIMEFileNameW',mtProc,TypeInfo(_T8),[
TypeInfo(HKL),
TypeInfoPWideChar,
TypeInfo(UINT),TypeInfo(UINT)],Addr(ImmGetIMEFileNameW),cStdCall)}

{RegisterProc(nil,'ImmGetCandidateList',mtProc,TypeInfo(_T26),[
TypeInfo(HIMC),
TypeInfo(DWORD),
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(ImmGetCandidateList),cStdCall)}

{RegisterProc(nil,'ImmGetCandidateListA',mtProc,TypeInfo(_T27),[
TypeInfo(HIMC),
TypeInfo(DWORD),
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(ImmGetCandidateListA),cStdCall)}

{RegisterProc(nil,'ImmGetCandidateListW',mtProc,TypeInfo(_T28),[
TypeInfo(HIMC),
TypeInfo(DWORD),
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(ImmGetCandidateListW),cStdCall)}

{RegisterProc(nil,'ImmGetGuideLine',mtProc,TypeInfo(_T29),[
TypeInfo(HIMC),
TypeInfo(DWORD),
TypeInfoPChar,
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(ImmGetGuideLine),cStdCall)}

{RegisterProc(nil,'ImmGetGuideLineA',mtProc,TypeInfo(_T30),[
TypeInfo(HIMC),
TypeInfo(DWORD),
TypeInfoPChar,
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(ImmGetGuideLineA),cStdCall)}

{RegisterProc(nil,'ImmGetGuideLineW',mtProc,TypeInfo(_T31),[
TypeInfo(HIMC),
TypeInfo(DWORD),
TypeInfoPWideChar,
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(ImmGetGuideLineW),cStdCall)}

{RegisterProc(nil,'ImmGetCompositionFont',mtProc,TypeInfo(_T36),[
TypeInfo(HIMC),
TypeInfoPointer,TypeInfo(Boolean)],Addr(ImmGetCompositionFont),cStdCall)}

{RegisterProc(nil,'ImmGetCompositionFontA',mtProc,TypeInfo(_T37),[
TypeInfo(HIMC),
TypeInfoPointer,TypeInfo(Boolean)],Addr(ImmGetCompositionFontA),cStdCall)}

{RegisterProc(nil,'ImmGetCompositionFontW',mtProc,TypeInfo(_T38),[
TypeInfo(HIMC),
TypeInfoPointer,TypeInfo(Boolean)],Addr(ImmGetCompositionFontW),cStdCall)}

{RegisterProc(nil,'ImmSetCompositionFont',mtProc,TypeInfo(_T39),[
TypeInfo(HIMC),
TypeInfoPointer,TypeInfo(Boolean)],Addr(ImmSetCompositionFont),cStdCall)}

{RegisterProc(nil,'ImmSetCompositionFontA',mtProc,TypeInfo(_T40),[
TypeInfo(HIMC),
TypeInfoPointer,TypeInfo(Boolean)],Addr(ImmSetCompositionFontA),cStdCall)}

{RegisterProc(nil,'ImmSetCompositionFontW',mtProc,TypeInfo(_T41),[
TypeInfo(HIMC),
TypeInfoPointer,TypeInfo(Boolean)],Addr(ImmSetCompositionFontW),cStdCall)}

{RegisterProc(nil,'ImmGetConversionList',mtProc,TypeInfo(_T48),[
TypeInfo(HKL),
TypeInfo(HIMC),
TypeInfoPChar,
TypeInfoPointer,
TypeInfo(DWORD),
TypeInfo(UINT),TypeInfo(DWORD)],Addr(ImmGetConversionList),cStdCall)}

{RegisterProc(nil,'ImmGetConversionListA',mtProc,TypeInfo(_T49),[
TypeInfo(HKL),
TypeInfo(HIMC),
TypeInfoPChar,
TypeInfoPointer,
TypeInfo(DWORD),
TypeInfo(UINT),TypeInfo(DWORD)],Addr(ImmGetConversionListA),cStdCall)}

{RegisterProc(nil,'ImmGetConversionListW',mtProc,TypeInfo(_T50),[
TypeInfo(HKL),
TypeInfo(HIMC),
TypeInfoPWideChar,
TypeInfoPointer,
TypeInfo(DWORD),
TypeInfo(UINT),TypeInfo(DWORD)],Addr(ImmGetConversionListW),cStdCall)}

{RegisterProc(nil,'ImmSetStatusWindowPos',mtProc,TypeInfo(_T53),[
TypeInfo(HIMC),
TypeInfoPointer,TypeInfo(Boolean)],Addr(ImmSetStatusWindowPos),cStdCall)}

{RegisterProc(nil,'ImmGetCompositionWindow',mtProc,TypeInfo(_T54),[
TypeInfo(HIMC),
TypeInfoPointer,TypeInfo(Boolean)],Addr(ImmGetCompositionWindow),cStdCall)}

{RegisterProc(nil,'ImmSetCompositionWindow',mtProc,TypeInfo(_T55),[
TypeInfo(HIMC),
TypeInfoPointer,TypeInfo(Boolean)],Addr(ImmSetCompositionWindow),cStdCall)}

{RegisterProc(nil,'ImmGetCandidateWindow',mtProc,TypeInfo(_T56),[
TypeInfo(HIMC),
TypeInfo(DWORD),
TypeInfoPointer,TypeInfo(Boolean)],Addr(ImmGetCandidateWindow),cStdCall)}

{RegisterProc(nil,'ImmSetCandidateWindow',mtProc,TypeInfo(_T57),[
TypeInfo(HIMC),
TypeInfoPointer,TypeInfo(Boolean)],Addr(ImmSetCandidateWindow),cStdCall)}

{RegisterProc(nil,'ImmRegisterWord',mtProc,TypeInfo(_T62),[
TypeInfo(HKL),
TypeInfoPChar,
TypeInfo(DWORD),
TypeInfoPChar,TypeInfo(Boolean)],Addr(ImmRegisterWord),cStdCall)}

{RegisterProc(nil,'ImmRegisterWordA',mtProc,TypeInfo(_T63),[
TypeInfo(HKL),
TypeInfoPChar,
TypeInfo(DWORD),
TypeInfoPChar,TypeInfo(Boolean)],Addr(ImmRegisterWordA),cStdCall)}

{RegisterProc(nil,'ImmRegisterWordW',mtProc,TypeInfo(_T64),[
TypeInfo(HKL),
TypeInfoPWideChar,
TypeInfo(DWORD),
TypeInfoPWideChar,TypeInfo(Boolean)],Addr(ImmRegisterWordW),cStdCall)}

{RegisterProc(nil,'ImmUnregisterWord',mtProc,TypeInfo(_T65),[
TypeInfo(HKL),
TypeInfoPChar,
TypeInfo(DWORD),
TypeInfoPChar,TypeInfo(Boolean)],Addr(ImmUnregisterWord),cStdCall)}

{RegisterProc(nil,'ImmUnregisterWordA',mtProc,TypeInfo(_T66),[
TypeInfo(HKL),
TypeInfoPChar,
TypeInfo(DWORD),
TypeInfoPChar,TypeInfo(Boolean)],Addr(ImmUnregisterWordA),cStdCall)}

{RegisterProc(nil,'ImmUnregisterWordW',mtProc,TypeInfo(_T67),[
TypeInfo(HKL),
TypeInfoPWideChar,
TypeInfo(DWORD),
TypeInfoPWideChar,TypeInfo(Boolean)],Addr(ImmUnregisterWordW),cStdCall)}

{RegisterProc(nil,'ImmGetRegisterWordStyle',mtProc,TypeInfo(_T68),[
TypeInfo(HKL),
TypeInfo(UINT),
TypeInfoPointer,TypeInfo(UINT)],Addr(ImmGetRegisterWordStyle),cStdCall)}

{RegisterProc(nil,'ImmGetRegisterWordStyleA',mtProc,TypeInfo(_T69),[
TypeInfo(HKL),
TypeInfo(UINT),
TypeInfoPointer,TypeInfo(UINT)],Addr(ImmGetRegisterWordStyleA),cStdCall)}

{RegisterProc(nil,'ImmGetRegisterWordStyleW',mtProc,TypeInfo(_T70),[
TypeInfo(HKL),
TypeInfo(UINT),
TypeInfoPointer,TypeInfo(UINT)],Addr(ImmGetRegisterWordStyleW),cStdCall)}

{RegisterProc(nil,'ImmEnumRegisterWord',mtProc,TypeInfo(_T71),[
TypeInfo(HKL),
TypeInfo(RegisterWordEnumProc),
TypeInfoPChar,
TypeInfo(DWORD),
TypeInfoPChar,
TypeInfoPointer,TypeInfo(UINT)],Addr(ImmEnumRegisterWord),cStdCall)}

{RegisterProc(nil,'ImmEnumRegisterWordA',mtProc,TypeInfo(_T72),[
TypeInfo(HKL),
TypeInfo(RegisterWordEnumProcA),
TypeInfoPChar,
TypeInfo(DWORD),
TypeInfoPChar,
TypeInfoPointer,TypeInfo(UINT)],Addr(ImmEnumRegisterWordA),cStdCall)}

{RegisterProc(nil,'ImmEnumRegisterWordW',mtProc,TypeInfo(_T73),[
TypeInfo(HKL),
TypeInfo(RegisterWordEnumProcW),
TypeInfoPWideChar,
TypeInfo(DWORD),
TypeInfoPWideChar,
TypeInfoPointer,TypeInfo(UINT)],Addr(ImmEnumRegisterWordW),cStdCall)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
