{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit SYNCOBJS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Messages,
  SysUtils,
  Classes,
  SyncObjs;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure  of object;

_T1 = function : Boolean of object;

_T2 = _T0;

_T3 = _T0;

{_T4 = procedure (p0 : PSecurityAttributes;
p1 : Boolean;
p2 : Boolean;
const p3 : string;
p4 : Boolean) of object;}

_T5 = _T0;

_T6 = _T0;

_T7 = procedure (p0 : Boolean) of object;

_T8 = function (p0 : LongWord): TWaitResult of object;

_T9 = _T7;

_T10 = _T0;

_T11 = _T0;

function __DC__GetTHandleObject__LastError(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := THandleObject(Instance).LastError;
end;

function __DC__GetTHandleObject__Handle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := THandleObject(Instance).Handle;
end;

procedure __RegisterProps;
begin
RegisterProperty(THandleObject,'LastError',__DC__GetTHandleObject__LastError,nil);
RegisterProperty(THandleObject,'Handle',__DC__GetTHandleObject__Handle,nil);
end;

const __ConstNames0 : array[0..3] of string = (
'wrSignaled'
,'wrTimeout'
,'wrAbandoned'
,'wrError'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,wrSignaled));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,wrTimeout));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,wrAbandoned));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,wrError));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..5] of TClass = (
TCriticalSection,
TEvent,
THandleObject,
TMutex,
TSimpleEvent,
TSynchroObject
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegisterProc(TCriticalSection,'Create',mtConstructor,TypeInfo(_T0),NoParams,Addr(TCriticalSection.Create),cRegister);

RegRegisterMethod(TCriticalSection,'TryEnter',TypeInfo(_T1),[TypeInfo(Boolean)],Addr(TCriticalSection.TryEnter));

RegRegisterMethod(TCriticalSection,'Enter',TypeInfo(_T2),NoParams,Addr(TCriticalSection.Enter));

RegRegisterMethod(TCriticalSection,'Leave',TypeInfo(_T3),NoParams,Addr(TCriticalSection.Leave));

RegRegisterMethod(TEvent,'SetEvent',TypeInfo(_T5),NoParams,Addr(TEvent.SetEvent));

RegRegisterMethod(TEvent,'ResetEvent',TypeInfo(_T6),NoParams,Addr(TEvent.ResetEvent));

RegisterProc(THandleObject,'Create',mtConstructor,TypeInfo(_T7),[
TypeInfo(Boolean)],Addr(THandleObject.Create),cRegister);

//RegRegisterMethod(THandleObject,'WaitFor',TypeInfo(_T8),[TypeInfo(LongWord),TypeInfo(TWaitResult)], pointer(8));
RegRegisterMethod(THandleObject,'WaitFor',TypeInfo(_T8),[TypeInfo(LongWord),TypeInfo(TWaitResult)],  getVMTProcAddr('THandleObject','WaitFor',8));


RegisterProc(TMutex,'Create',mtConstructor,TypeInfo(_T9),[
TypeInfo(Boolean)],Addr(TMutex.Create),cRegister);

//RegRegisterMethod(TSynchroObject,'Acquire',TypeInfo(_T10),NoParams, pointer(0));
RegRegisterMethod(TSynchroObject,'Acquire',TypeInfo(_T10),NoParams,  getVMTProcAddr('TSynchroObject','Acquire',0));


//RegRegisterMethod(TSynchroObject,'Release',TypeInfo(_T11),NoParams, pointer(4));
RegRegisterMethod(TSynchroObject,'Release',TypeInfo(_T11),NoParams,  getVMTProcAddr('TSynchroObject','Release',4));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
{RegisterProc(TEvent,'Create',mtConstructor,TypeInfo(_T4),[
TypeInfoPointer,
TypeInfo(Boolean),
TypeInfo(Boolean),
TypeInfo(string),
TypeInfo(Boolean)],Addr(TEvent.Create),cRegister)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
