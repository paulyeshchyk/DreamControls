{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit MCONNECT_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  dcscript,
  dcsystem,
  dcdreamlib,
  Variants,
  Windows,
  SysUtils,
  Classes,
  Midas,
  DB,
  DBClient,
  ActiveX,
  ComObj,
  Provider,
  TDMConnect;
function ConvertTGUIDToVariant(var R : TGUID) : OleVariant;
function ConvertVariantToTGUID(const V : OleVariant) : TGUID;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TGUID__Wrapper = class(TDCRecordWrapper)
private
fR : TGUID;
public
function GetRecordPtr : pointer; override;
published
procedure setD1(const val : LongWord);
function getD1 : LongWord;
property D1 : LongWord read getD1 write setD1;
procedure setD2(const val : Word);
function getD2 : Word;
property D2 : Word read getD2 write setD2;
procedure setD3(const val : Word);
function getD3 : Word;
property D3 : Word read getD3 write setD3;
end;
type
_T0 = procedure (p0 : TStringList;
const p1 : string) of object;

_T1 = procedure (p0 : string;
p1 : Boolean) of object;

_T2 = function (const p0 : IDispatch): string of object;

_T3 = function (const p0): string of object;

_T4 = function (const p0 : string): Integer of object;

{_T5 = procedure (const p0 : IAppServerDisp) of object;}

function __TGUID__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TGUID__Wrapper.setD1(const val : LongWord);
begin
TGUID(GetRecordPtr^).D1 := val;
end;
function __TGUID__Wrapper.getD1 : LongWord;
begin
result := TGUID(GetRecordPtr^).D1;
end;
procedure __TGUID__Wrapper.setD2(const val : Word);
begin
TGUID(GetRecordPtr^).D2 := val;
end;
function __TGUID__Wrapper.getD2 : Word;
begin
result := TGUID(GetRecordPtr^).D2;
end;
procedure __TGUID__Wrapper.setD3(const val : Word);
begin
TGUID(GetRecordPtr^).D3 := val;
end;
function __TGUID__Wrapper.getD3 : Word;
begin
result := TGUID(GetRecordPtr^).D3;
end;
function __TCustomObjectBroker__GetComputerForGUID__Wrapper(__Instance : TCustomObjectBroker;
const p0 : IDispatch): string;
var
__p0 : ^TGUID;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := TCustomObjectBroker(__Instance).GetComputerForGUID(__p0^);
end;


type __TGUID__Wrapper__ = class(__TGUID__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TGUID__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTGUIDToVariant(var R : TGUID) : OleVariant;
var
__rw : __TGUID__Wrapper__;
begin
__rw := __TGUID__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTGUID(const V : OleVariant) : TGUID;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TGUID((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..6] of TClass = (
TCOMConnection,
TCustomObjectBroker,
TDCOMConnection,
TDispatchAppServer,
TDispatchConnection,
TOLEnterpriseConnection,
TSharedConnection
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'GetMIDASAppServerList'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(TStringList),
TypeInfo(string)],Addr(GetMIDASAppServerList),cRegister);

//RegRegisterMethod(TCustomObjectBroker,'SetConnectStatus',TypeInfo(_T1),[TypeInfo(string),TypeInfo(Boolean)], pointer(48));
RegRegisterMethod(TCustomObjectBroker,'SetConnectStatus',TypeInfo(_T1),[TypeInfo(string),TypeInfo(Boolean)],  getVMTProcAddr('TCustomObjectBroker','SetConnectStatus',48));


//RegRegisterMethod(TCustomObjectBroker,'GetComputerForGUID',TypeInfo(_T2),[TypeInfo(IDispatch),TypeInfo(string)], pointer(52));
RegRegisterMethod(TCustomObjectBroker,'GetComputerForGUID',TypeInfo(_T2),[TypeInfo(IDispatch),TypeInfo(string)],  getVMTProcAddr('TCustomObjectBroker','GetComputerForGUID',52));


//RegRegisterMethod(TCustomObjectBroker,'GetComputerForProgID',TypeInfo(_T3),[TypeInfoUntyped,TypeInfo(string)], pointer(56));
RegRegisterMethod(TCustomObjectBroker,'GetComputerForProgID',TypeInfo(_T3),[TypeInfoUntyped,TypeInfo(string)],  getVMTProcAddr('TCustomObjectBroker','GetComputerForProgID',56));


//RegRegisterMethod(TCustomObjectBroker,'GetPortForComputer',TypeInfo(_T4),[TypeInfo(string),TypeInfo(Integer)], pointer(60));
RegRegisterMethod(TCustomObjectBroker,'GetPortForComputer',TypeInfo(_T4),[TypeInfo(string),TypeInfo(Integer)],  getVMTProcAddr('TCustomObjectBroker','GetPortForComputer',60));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(TDispatchAppServer,'Create',mtConstructor,TypeInfo(_T5),[
TypeInfo(IAppServerDisp)],Addr(TDispatchAppServer.Create),cRegister)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
