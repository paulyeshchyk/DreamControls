{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDMESSAGE_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdBaseComponent,
  IdException,
  IdEMailAddress,
  IdHeaderList,
  IdCoderHeader,
  SysUtils,
  IdMessage;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (p0 : TIdMessageParts;
const p1 : TFileName) of object;

_T1 = procedure (p0 : TStream) of object;

_T2 = function (const p0 : TFileName): Boolean of object;

_T3 = procedure (var p0 : TTransfer;
var p1 : Char;
var p2 : string) of object;

_T4 = procedure (const p0 : string) of object;

_T5 = procedure  of object;

_T6 = _T5;

_T7 = _T5;

_T8 = function : TIdHeaderList of object;

_T9 = function : Boolean of object;

_T10 = procedure (const p0 : string;
const p1 : Boolean) of object;

_T11 = procedure (p0 : TStream;
const p1 : Boolean) of object;

_T12 = _T5;

_T13 = _T10;

_T14 = _T11;

_T15 = function : TIdMessagePart of object;

_T16 = _T5;

_T17 = procedure (p0 : TPersistent) of object;

_T18 = _T5;

_T19 = function (p0 : string): string of object;

_T20 = procedure (p0 : string) of object;

_T21 = _T5;

_T22 = _T5;

_T23 = procedure (p0 : TIdMessageParts;
p1 : TStrings) of object;

procedure __TIdMessage__LoadFromFile__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
TIdMessage(__Instance).LoadFromFile(OleVariant(pargs^[0]));
end;
2:
begin
TIdMessage(__Instance).LoadFromFile(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure __TIdMessage__LoadFromStream__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
TIdMessage(__Instance).LoadFromStream(TStream(VarToObject(OleVariant(pargs^[0]))));
end;
2:
begin
TIdMessage(__Instance).LoadFromStream(TStream(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
end;
end
end;

procedure __TIdMessage__SaveToFile__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
TIdMessage(__Instance).SaveToFile(OleVariant(pargs^[0]));
end;
2:
begin
TIdMessage(__Instance).SaveToFile(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure __TIdMessage__SaveToStream__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
TIdMessage(__Instance).SaveToStream(TStream(VarToObject(OleVariant(pargs^[0]))));
end;
2:
begin
TIdMessage(__Instance).SaveToStream(TStream(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
end;
end
end;

function __DC__GetTIdAttachment__ContentDisposition(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdAttachment(Instance).ContentDisposition;
end;

procedure __DC__SetTIdAttachment__ContentDisposition(Instance : TObject; Params : PVariantArgList);
begin
TIdAttachment(Instance).ContentDisposition:=OleVariant(Params^[0]);
end;

function __DC__GetTIdAttachment__DeleteTempFile(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdAttachment(Instance).DeleteTempFile;
end;

procedure __DC__SetTIdAttachment__DeleteTempFile(Instance : TObject; Params : PVariantArgList);
begin
TIdAttachment(Instance).DeleteTempFile:=OleVariant(Params^[0]);
end;

function __DC__GetTIdAttachment__FileName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdAttachment(Instance).FileName;
end;

procedure __DC__SetTIdAttachment__FileName(Instance : TObject; Params : PVariantArgList);
begin
TIdAttachment(Instance).FileName:=OleVariant(Params^[0]);
end;

function __DC__GetTIdMessage__Flags(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TIdMessageFlagsSet;
begin
tmp := TIdMessage(Instance).Flags;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTIdMessage__Flags(Instance : TObject; Params : PVariantArgList);
var
  tmp : TIdMessageFlagsSet;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TIdMessage(Instance).Flags:=tmp;
end;

function __DC__GetTIdMessage__IsEncoded(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMessage(Instance).IsEncoded;
end;

procedure __DC__SetTIdMessage__IsEncoded(Instance : TObject; Params : PVariantArgList);
begin
TIdMessage(Instance).IsEncoded:=OleVariant(Params^[0]);
end;

function __DC__GetTIdMessage__MsgId(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMessage(Instance).MsgId;
end;

procedure __DC__SetTIdMessage__MsgId(Instance : TObject; Params : PVariantArgList);
begin
TIdMessage(Instance).MsgId:=OleVariant(Params^[0]);
end;

function __DC__GetTIdMessage__Headers(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdMessage(Instance).Headers);
end;

procedure __DC__SetTIdMessage__Headers(Instance : TObject; Params : PVariantArgList);
begin
TIdMessage(Instance).Headers:=TIdHeaderList(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIdMessage__MessageParts(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdMessage(Instance).MessageParts);
end;

function __DC__GetTIdMessage__MIMEBoundary(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdMessage(Instance).MIMEBoundary);
end;

procedure __DC__SetTIdMessage__MIMEBoundary(Instance : TObject; Params : PVariantArgList);
begin
TIdMessage(Instance).MIMEBoundary:=TIdMIMEBoundary(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIdMessage__UID(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMessage(Instance).UID;
end;

procedure __DC__SetTIdMessage__UID(Instance : TObject; Params : PVariantArgList);
begin
TIdMessage(Instance).UID:=OleVariant(Params^[0]);
end;

function __DC__GetTIdMessagePart__Boundary(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMessagePart(Instance).Boundary;
end;

procedure __DC__SetTIdMessagePart__Boundary(Instance : TObject; Params : PVariantArgList);
begin
TIdMessagePart(Instance).Boundary:=OleVariant(Params^[0]);
end;

function __DC__GetTIdMessagePart__BoundaryBegin(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMessagePart(Instance).BoundaryBegin;
end;

procedure __DC__SetTIdMessagePart__BoundaryBegin(Instance : TObject; Params : PVariantArgList);
begin
TIdMessagePart(Instance).BoundaryBegin:=OleVariant(Params^[0]);
end;

function __DC__GetTIdMessagePart__BoundaryEnd(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMessagePart(Instance).BoundaryEnd;
end;

procedure __DC__SetTIdMessagePart__BoundaryEnd(Instance : TObject; Params : PVariantArgList);
begin
TIdMessagePart(Instance).BoundaryEnd:=OleVariant(Params^[0]);
end;

function __DC__GetTIdMessagePart__IsEncoded(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMessagePart(Instance).IsEncoded;
end;

function __DC__GetTIdMessagePart__StoredPathName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMessagePart(Instance).StoredPathName;
end;

procedure __DC__SetTIdMessagePart__StoredPathName(Instance : TObject; Params : PVariantArgList);
begin
TIdMessagePart(Instance).StoredPathName:=OleVariant(Params^[0]);
end;

function __DC__GetTIdMessagePart__Headers(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdMessagePart(Instance).Headers);
end;

procedure __DC__SetTIdMessagePart__Headers(Instance : TObject; Params : PVariantArgList);
begin
TIdMessagePart(Instance).Headers:=TIdHeaderList(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIdMessageParts__AttachmentCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMessageParts(Instance).AttachmentCount;
end;

function __DC__GetTIdMessageParts__AttachmentEncoding(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMessageParts(Instance).AttachmentEncoding;
end;

procedure __DC__SetTIdMessageParts__AttachmentEncoding(Instance : TObject; Params : PVariantArgList);
begin
TIdMessageParts(Instance).AttachmentEncoding:=OleVariant(Params^[0]);
end;

function __DC__GetTIdMessageParts__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdMessageParts(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __DC__SetTIdMessageParts__Items(Instance : TObject; Params : PVariantArgList);
begin
TIdMessageParts(Instance).Items[OleVariant(Params^[1])]:=TIdMessagePart(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIdMessageParts__MessageEncoderInfo(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdMessageParts(Instance).MessageEncoderInfo);
end;

function __DC__GetTIdMessageParts__RelatedPartCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMessageParts(Instance).RelatedPartCount;
end;

function __DC__GetTIdMessageParts__TextPartCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMessageParts(Instance).TextPartCount;
end;

function __DC__GetTIdMIMEBoundary__Boundary(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMIMEBoundary(Instance).Boundary;
end;

function __DC__GetTIdMIMEBoundary__NewBoundary(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMIMEBoundary(Instance).NewBoundary;
end;

procedure __DC__SetTIdMIMEBoundary__NewBoundary(Instance : TObject; Params : PVariantArgList);
begin
TIdMIMEBoundary(Instance).NewBoundary:=OleVariant(Params^[0]);
end;

function __DC__GetTIdText__Body(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdText(Instance).Body);
end;

procedure __DC__SetTIdText__Body(Instance : TObject; Params : PVariantArgList);
begin
TIdText(Instance).Body:=TStrings(VarToObject(OleVariant(Params^[0])));
end;

procedure __RegisterProps;
begin
RegisterProperty(TIdAttachment,'ContentDisposition',__DC__GetTIdAttachment__ContentDisposition,__DC__SetTIdAttachment__ContentDisposition);
RegisterProperty(TIdAttachment,'DeleteTempFile',__DC__GetTIdAttachment__DeleteTempFile,__DC__SetTIdAttachment__DeleteTempFile);
RegisterProperty(TIdAttachment,'FileName',__DC__GetTIdAttachment__FileName,__DC__SetTIdAttachment__FileName);
RegisterProperty(TIdMessage,'Flags',__DC__GetTIdMessage__Flags,__DC__SetTIdMessage__Flags);
RegisterProperty(TIdMessage,'IsEncoded',__DC__GetTIdMessage__IsEncoded,__DC__SetTIdMessage__IsEncoded);
RegisterProperty(TIdMessage,'MsgId',__DC__GetTIdMessage__MsgId,__DC__SetTIdMessage__MsgId);
RegisterProperty(TIdMessage,'Headers',__DC__GetTIdMessage__Headers,__DC__SetTIdMessage__Headers);
RegisterProperty(TIdMessage,'MessageParts',__DC__GetTIdMessage__MessageParts,nil);
RegisterProperty(TIdMessage,'MIMEBoundary',__DC__GetTIdMessage__MIMEBoundary,__DC__SetTIdMessage__MIMEBoundary);
RegisterProperty(TIdMessage,'UID',__DC__GetTIdMessage__UID,__DC__SetTIdMessage__UID);
RegisterProperty(TIdMessagePart,'Boundary',__DC__GetTIdMessagePart__Boundary,__DC__SetTIdMessagePart__Boundary);
RegisterProperty(TIdMessagePart,'BoundaryBegin',__DC__GetTIdMessagePart__BoundaryBegin,__DC__SetTIdMessagePart__BoundaryBegin);
RegisterProperty(TIdMessagePart,'BoundaryEnd',__DC__GetTIdMessagePart__BoundaryEnd,__DC__SetTIdMessagePart__BoundaryEnd);
RegisterProperty(TIdMessagePart,'IsEncoded',__DC__GetTIdMessagePart__IsEncoded,nil);
RegisterProperty(TIdMessagePart,'StoredPathName',__DC__GetTIdMessagePart__StoredPathName,__DC__SetTIdMessagePart__StoredPathName);
RegisterProperty(TIdMessagePart,'Headers',__DC__GetTIdMessagePart__Headers,__DC__SetTIdMessagePart__Headers);
RegisterProperty(TIdMessageParts,'AttachmentCount',__DC__GetTIdMessageParts__AttachmentCount,nil);
RegisterProperty(TIdMessageParts,'AttachmentEncoding',__DC__GetTIdMessageParts__AttachmentEncoding,__DC__SetTIdMessageParts__AttachmentEncoding);
RegisterIndexedProperty(TIdMessageParts,'Items',1,True,__DC__GetTIdMessageParts__Items,__DC__SetTIdMessageParts__Items);
RegisterProperty(TIdMessageParts,'MessageEncoderInfo',__DC__GetTIdMessageParts__MessageEncoderInfo,nil);
RegisterProperty(TIdMessageParts,'RelatedPartCount',__DC__GetTIdMessageParts__RelatedPartCount,nil);
RegisterProperty(TIdMessageParts,'TextPartCount',__DC__GetTIdMessageParts__TextPartCount,nil);
RegisterProperty(TIdMIMEBoundary,'Boundary',__DC__GetTIdMIMEBoundary__Boundary,nil);
RegisterProperty(TIdMIMEBoundary,'NewBoundary',__DC__GetTIdMIMEBoundary__NewBoundary,__DC__SetTIdMIMEBoundary__NewBoundary);
RegisterProperty(TIdText,'Body',__DC__GetTIdText__Body,__DC__SetTIdText__Body);
end;

const __ConstNames0 : array[0..15] of string = (
'mpHighest'
,'mpHigh'
,'mpNormal'
,'mpLow'
,'mpLowest'
,'ID_MSG_NODECODE'
,'ID_MSG_PRIORITY'
,'mfAnswered'
,'mfFlagged'
,'mfDeleted'
,'mfDraft'
,'mfSeen'
,'mfRecent'
,'meMIME'
,'meUU'
,'RSIdMessageCannotLoad'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,mpHighest));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,mpHigh));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,mpNormal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,mpLow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,mpLowest));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,ID_MSG_NODECODE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,ID_MSG_PRIORITY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,mfAnswered));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,mfFlagged));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,mfDeleted));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,mfDraft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,mfSeen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,mfRecent));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,meMIME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,meUU));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,RSIdMessageCannotLoad));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..9] of TClass = (
EIdCanNotCreateMessagePart,
EIdMessageCannotLoad,
EIdMessageException,
EIdTextInvalidCount,
TIdAttachment,
TIdMessage,
TIdMessagePart,
TIdMessageParts,
TIdMIMEBoundary,
TIdText
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegisterProc(TIdAttachment,'Create',mtConstructor,TypeInfo(_T0),[
TypeInfo(TIdMessageParts),
TypeInfo(TFileName)],Addr(TIdAttachment.Create),cRegister);

RegRegisterMethod(TIdAttachment,'Encode',TypeInfo(_T1),[
TypeInfo(TStream)],Addr(TIdAttachment.Encode));

RegRegisterMethod(TIdAttachment,'SaveToFile',TypeInfo(_T2),[
TypeInfo(TFileName),TypeInfo(Boolean)],Addr(TIdAttachment.SaveToFile));

//RegRegisterMethod(TIdMessage,'DoInitializeISO',TypeInfo(_T3),[TypeInfo(TTransfer),TypeInfo(Char),TypeInfo(string)], pointer(48));
RegRegisterMethod(TIdMessage,'DoInitializeISO',TypeInfo(_T3),[TypeInfo(TTransfer),TypeInfo(Char),TypeInfo(string)],  getVMTProcAddr('TIdMessage','DoInitializeISO',48));


RegRegisterMethod(TIdMessage,'AddHeader',TypeInfo(_T4),[
TypeInfo(string)],Addr(TIdMessage.AddHeader));

//RegRegisterMethod(TIdMessage,'Clear',TypeInfo(_T5),NoParams, pointer(52));
RegRegisterMethod(TIdMessage,'Clear',TypeInfo(_T5),NoParams,  getVMTProcAddr('TIdMessage','Clear',52));


RegRegisterMethod(TIdMessage,'ClearBody',TypeInfo(_T6),NoParams,Addr(TIdMessage.ClearBody));

RegRegisterMethod(TIdMessage,'ClearHeader',TypeInfo(_T7),NoParams,Addr(TIdMessage.ClearHeader));

RegRegisterMethod(TIdMessage,'GenerateHeader',TypeInfo(_T8),[TypeInfo(TIdHeaderList)],Addr(TIdMessage.GenerateHeader));

RegRegisterMethod(TIdMessage,'GetUseNowForDate',TypeInfo(_T9),[TypeInfo(Boolean)],Addr(TIdMessage.GetUseNowForDate));

RegisterProc(TIdMessage,'LoadFromFile',mtScriptMethod,TypeInfo(_T10),[
TypeInfo(string),
TypeInfo(Boolean)],Addr(__TIdMessage__LoadFromFile__Wrapper),cRegister);

RegisterProc(TIdMessage,'LoadFromStream',mtScriptMethod,TypeInfo(_T11),[
TypeInfo(TStream),
TypeInfo(Boolean)],Addr(__TIdMessage__LoadFromStream__Wrapper),cRegister);

RegRegisterMethod(TIdMessage,'ProcessHeaders',TypeInfo(_T12),NoParams,Addr(TIdMessage.ProcessHeaders));

RegisterProc(TIdMessage,'SaveToFile',mtScriptMethod,TypeInfo(_T13),[
TypeInfo(string),
TypeInfo(Boolean)],Addr(__TIdMessage__SaveToFile__Wrapper),cRegister);

RegisterProc(TIdMessage,'SaveToStream',mtScriptMethod,TypeInfo(_T14),[
TypeInfo(TStream),
TypeInfo(Boolean)],Addr(__TIdMessage__SaveToStream__Wrapper),cRegister);

RegRegisterMethod(TIdMessageParts,'Add',TypeInfo(_T15),[TypeInfo(TIdMessagePart)],Addr(TIdMessageParts.Add));

RegRegisterMethod(TIdMessageParts,'CountParts',TypeInfo(_T16),NoParams,Addr(TIdMessageParts.CountParts));

RegisterProc(TIdMessageParts,'Create',mtConstructor,TypeInfo(_T17),[
TypeInfo(TPersistent)],Addr(TIdMessageParts.Create),cRegister);

RegisterProc(TIdMIMEBoundary,'Create',mtConstructor,TypeInfo(_T18),NoParams,Addr(TIdMIMEBoundary.Create),cRegister);

RegisterProc(TIdMIMEBoundary,'FindBoundary',mtClassMethod,TypeInfo(_T19),[
TypeInfo(string),TypeInfo(string)],Addr(TIdMIMEBoundary.FindBoundary),cRegister);

RegRegisterMethod(TIdMIMEBoundary,'Push',TypeInfo(_T20),[
TypeInfo(string)],Addr(TIdMIMEBoundary.Push));

RegRegisterMethod(TIdMIMEBoundary,'Pop',TypeInfo(_T21),NoParams,Addr(TIdMIMEBoundary.Pop));

RegRegisterMethod(TIdMIMEBoundary,'Clear',TypeInfo(_T22),NoParams,Addr(TIdMIMEBoundary.Clear));

RegisterProc(TIdText,'Create',mtConstructor,TypeInfo(_T23),[
TypeInfo(TIdMessageParts),
TypeInfo(TStrings)],Addr(TIdText.Create),cRegister);

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
RegisterEvent(TypeInfo(TIdInitializeIsoEvent),[
TypeInfo(TTransfer),
TypeInfo(Char),
TypeInfo(string)]);

RegisterEvent(TypeInfo(TIdMessageEvent),[
TypeInfo(TComponent),
TypeInfo(TIdMessage)]);

RegisterEvent(TypeInfo(TIdStringMessageEvent),[
TypeInfo(TComponent),
TypeInfo(string),
TypeInfo(TIdMessage)]);

RegisterEvent(TypeInfo(TOnGetMessagePartStream),[
TypeInfo(TStream)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
