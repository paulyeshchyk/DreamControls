{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IBEXTERNALS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  IBUtils,
  IBExternals;
function ConvertTBlobToVariant(var R : TBlob) : OleVariant;
function ConvertVariantToTBlob(const V : OleVariant) : TBlob;
function ConvertTCTimeStructureToVariant(var R : TCTimeStructure) : OleVariant;
function ConvertVariantToTCTimeStructure(const V : OleVariant) : TCTimeStructure;
function ConvertTISC_VARYINGToVariant(var R : TISC_VARYING) : OleVariant;
function ConvertVariantToTISC_VARYING(const V : OleVariant) : TISC_VARYING;
function ConvertTMToVariant(var R : TM) : OleVariant;
function ConvertVariantToTM(const V : OleVariant) : TM;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TBlob__Wrapper = class(TDCRecordWrapper)
private
fR : TBlob;
public
function GetRecordPtr : pointer; override;
published
procedure setSegmentCount(const val : Long);
function getSegmentCount : Long;
property SegmentCount : Long read getSegmentCount write setSegmentCount;
procedure setMaxSegmentLength(const val : Long);
function getMaxSegmentLength : Long;
property MaxSegmentLength : Long read getMaxSegmentLength write setMaxSegmentLength;
procedure setTotalSize(const val : Long);
function getTotalSize : Long;
property TotalSize : Long read getTotalSize write setTotalSize;
end;
type __TCTimeStructure__Wrapper = class(TDCRecordWrapper)
private
fR : TCTimeStructure;
public
function GetRecordPtr : pointer; override;
published
procedure settm_sec(const val : Integer);
function gettm_sec : Integer;
property tm_sec : Integer read gettm_sec write settm_sec;
procedure settm_min(const val : Integer);
function gettm_min : Integer;
property tm_min : Integer read gettm_min write settm_min;
procedure settm_hour(const val : Integer);
function gettm_hour : Integer;
property tm_hour : Integer read gettm_hour write settm_hour;
procedure settm_mday(const val : Integer);
function gettm_mday : Integer;
property tm_mday : Integer read gettm_mday write settm_mday;
procedure settm_mon(const val : Integer);
function gettm_mon : Integer;
property tm_mon : Integer read gettm_mon write settm_mon;
procedure settm_year(const val : Integer);
function gettm_year : Integer;
property tm_year : Integer read gettm_year write settm_year;
procedure settm_wday(const val : Integer);
function gettm_wday : Integer;
property tm_wday : Integer read gettm_wday write settm_wday;
procedure settm_yday(const val : Integer);
function gettm_yday : Integer;
property tm_yday : Integer read gettm_yday write settm_yday;
procedure settm_isdst(const val : Integer);
function gettm_isdst : Integer;
property tm_isdst : Integer read gettm_isdst write settm_isdst;
end;
type __TISC_VARYING__Wrapper = class(TDCRecordWrapper)
private
fR : TISC_VARYING;
public
function GetRecordPtr : pointer; override;
published
procedure setstrlen(const val : Short);
function getstrlen : Short;
property strlen : Short read getstrlen write setstrlen;
end;
type __TM__Wrapper = class(TDCRecordWrapper)
private
fR : TM;
public
function GetRecordPtr : pointer; override;
published
procedure settm_sec(const val : Integer);
function gettm_sec : Integer;
property tm_sec : Integer read gettm_sec write settm_sec;
procedure settm_min(const val : Integer);
function gettm_min : Integer;
property tm_min : Integer read gettm_min write settm_min;
procedure settm_hour(const val : Integer);
function gettm_hour : Integer;
property tm_hour : Integer read gettm_hour write settm_hour;
procedure settm_mday(const val : Integer);
function gettm_mday : Integer;
property tm_mday : Integer read gettm_mday write settm_mday;
procedure settm_mon(const val : Integer);
function gettm_mon : Integer;
property tm_mon : Integer read gettm_mon write settm_mon;
procedure settm_year(const val : Integer);
function gettm_year : Integer;
property tm_year : Integer read gettm_year write settm_year;
procedure settm_wday(const val : Integer);
function gettm_wday : Integer;
property tm_wday : Integer read gettm_wday write settm_wday;
procedure settm_yday(const val : Integer);
function gettm_yday : Integer;
property tm_yday : Integer read gettm_yday write settm_yday;
procedure settm_isdst(const val : Integer);
function gettm_isdst : Integer;
property tm_isdst : Integer read gettm_isdst write settm_isdst;
end;
type
_T0 = procedure (const p0 : IDispatch) of object;

function __TBlob__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TBlob__Wrapper.setSegmentCount(const val : Long);
begin
TBlob(GetRecordPtr^).SegmentCount := val;
end;
function __TBlob__Wrapper.getSegmentCount : Long;
begin
result := TBlob(GetRecordPtr^).SegmentCount;
end;
procedure __TBlob__Wrapper.setMaxSegmentLength(const val : Long);
begin
TBlob(GetRecordPtr^).MaxSegmentLength := val;
end;
function __TBlob__Wrapper.getMaxSegmentLength : Long;
begin
result := TBlob(GetRecordPtr^).MaxSegmentLength;
end;
procedure __TBlob__Wrapper.setTotalSize(const val : Long);
begin
TBlob(GetRecordPtr^).TotalSize := val;
end;
function __TBlob__Wrapper.getTotalSize : Long;
begin
result := TBlob(GetRecordPtr^).TotalSize;
end;
function __TCTimeStructure__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCTimeStructure__Wrapper.settm_sec(const val : Integer);
begin
TCTimeStructure(GetRecordPtr^).tm_sec := val;
end;
function __TCTimeStructure__Wrapper.gettm_sec : Integer;
begin
result := TCTimeStructure(GetRecordPtr^).tm_sec;
end;
procedure __TCTimeStructure__Wrapper.settm_min(const val : Integer);
begin
TCTimeStructure(GetRecordPtr^).tm_min := val;
end;
function __TCTimeStructure__Wrapper.gettm_min : Integer;
begin
result := TCTimeStructure(GetRecordPtr^).tm_min;
end;
procedure __TCTimeStructure__Wrapper.settm_hour(const val : Integer);
begin
TCTimeStructure(GetRecordPtr^).tm_hour := val;
end;
function __TCTimeStructure__Wrapper.gettm_hour : Integer;
begin
result := TCTimeStructure(GetRecordPtr^).tm_hour;
end;
procedure __TCTimeStructure__Wrapper.settm_mday(const val : Integer);
begin
TCTimeStructure(GetRecordPtr^).tm_mday := val;
end;
function __TCTimeStructure__Wrapper.gettm_mday : Integer;
begin
result := TCTimeStructure(GetRecordPtr^).tm_mday;
end;
procedure __TCTimeStructure__Wrapper.settm_mon(const val : Integer);
begin
TCTimeStructure(GetRecordPtr^).tm_mon := val;
end;
function __TCTimeStructure__Wrapper.gettm_mon : Integer;
begin
result := TCTimeStructure(GetRecordPtr^).tm_mon;
end;
procedure __TCTimeStructure__Wrapper.settm_year(const val : Integer);
begin
TCTimeStructure(GetRecordPtr^).tm_year := val;
end;
function __TCTimeStructure__Wrapper.gettm_year : Integer;
begin
result := TCTimeStructure(GetRecordPtr^).tm_year;
end;
procedure __TCTimeStructure__Wrapper.settm_wday(const val : Integer);
begin
TCTimeStructure(GetRecordPtr^).tm_wday := val;
end;
function __TCTimeStructure__Wrapper.gettm_wday : Integer;
begin
result := TCTimeStructure(GetRecordPtr^).tm_wday;
end;
procedure __TCTimeStructure__Wrapper.settm_yday(const val : Integer);
begin
TCTimeStructure(GetRecordPtr^).tm_yday := val;
end;
function __TCTimeStructure__Wrapper.gettm_yday : Integer;
begin
result := TCTimeStructure(GetRecordPtr^).tm_yday;
end;
procedure __TCTimeStructure__Wrapper.settm_isdst(const val : Integer);
begin
TCTimeStructure(GetRecordPtr^).tm_isdst := val;
end;
function __TCTimeStructure__Wrapper.gettm_isdst : Integer;
begin
result := TCTimeStructure(GetRecordPtr^).tm_isdst;
end;
function __TISC_VARYING__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TISC_VARYING__Wrapper.setstrlen(const val : Short);
begin
TISC_VARYING(GetRecordPtr^).strlen := val;
end;
function __TISC_VARYING__Wrapper.getstrlen : Short;
begin
result := TISC_VARYING(GetRecordPtr^).strlen;
end;
function __TM__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TM__Wrapper.settm_sec(const val : Integer);
begin
TM(GetRecordPtr^).tm_sec := val;
end;
function __TM__Wrapper.gettm_sec : Integer;
begin
result := TM(GetRecordPtr^).tm_sec;
end;
procedure __TM__Wrapper.settm_min(const val : Integer);
begin
TM(GetRecordPtr^).tm_min := val;
end;
function __TM__Wrapper.gettm_min : Integer;
begin
result := TM(GetRecordPtr^).tm_min;
end;
procedure __TM__Wrapper.settm_hour(const val : Integer);
begin
TM(GetRecordPtr^).tm_hour := val;
end;
function __TM__Wrapper.gettm_hour : Integer;
begin
result := TM(GetRecordPtr^).tm_hour;
end;
procedure __TM__Wrapper.settm_mday(const val : Integer);
begin
TM(GetRecordPtr^).tm_mday := val;
end;
function __TM__Wrapper.gettm_mday : Integer;
begin
result := TM(GetRecordPtr^).tm_mday;
end;
procedure __TM__Wrapper.settm_mon(const val : Integer);
begin
TM(GetRecordPtr^).tm_mon := val;
end;
function __TM__Wrapper.gettm_mon : Integer;
begin
result := TM(GetRecordPtr^).tm_mon;
end;
procedure __TM__Wrapper.settm_year(const val : Integer);
begin
TM(GetRecordPtr^).tm_year := val;
end;
function __TM__Wrapper.gettm_year : Integer;
begin
result := TM(GetRecordPtr^).tm_year;
end;
procedure __TM__Wrapper.settm_wday(const val : Integer);
begin
TM(GetRecordPtr^).tm_wday := val;
end;
function __TM__Wrapper.gettm_wday : Integer;
begin
result := TM(GetRecordPtr^).tm_wday;
end;
procedure __TM__Wrapper.settm_yday(const val : Integer);
begin
TM(GetRecordPtr^).tm_yday := val;
end;
function __TM__Wrapper.gettm_yday : Integer;
begin
result := TM(GetRecordPtr^).tm_yday;
end;
procedure __TM__Wrapper.settm_isdst(const val : Integer);
begin
TM(GetRecordPtr^).tm_isdst := val;
end;
function __TM__Wrapper.gettm_isdst : Integer;
begin
result := TM(GetRecordPtr^).tm_isdst;
end;
function _TBlob_ : IDispatch;
begin
  result := __TBlob__Wrapper.Create;
end;
function _TCTimeStructure_ : IDispatch;
begin
  result := __TCTimeStructure__Wrapper.Create;
end;
function _TISC_VARYING_ : IDispatch;
begin
  result := __TISC_VARYING__Wrapper.Create;
end;
function _TM_ : IDispatch;
begin
  result := __TM__Wrapper.Create;
end;
procedure ____InitializeTCTimeStructure__Wrapper(const p0 : IDispatch);
var
__p0 : ^TCTimeStructure;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
InitializeTCTimeStructure(__p0^);
end;


type __TBlob__Wrapper__ = class(__TBlob__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TBlob__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTBlobToVariant(var R : TBlob) : OleVariant;
var
__rw : __TBlob__Wrapper__;
begin
__rw := __TBlob__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTBlob(const V : OleVariant) : TBlob;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TBlob((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TCTimeStructure__Wrapper__ = class(__TCTimeStructure__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCTimeStructure__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCTimeStructureToVariant(var R : TCTimeStructure) : OleVariant;
var
__rw : __TCTimeStructure__Wrapper__;
begin
__rw := __TCTimeStructure__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCTimeStructure(const V : OleVariant) : TCTimeStructure;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCTimeStructure((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TISC_VARYING__Wrapper__ = class(__TISC_VARYING__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TISC_VARYING__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTISC_VARYINGToVariant(var R : TISC_VARYING) : OleVariant;
var
__rw : __TISC_VARYING__Wrapper__;
begin
__rw := __TISC_VARYING__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTISC_VARYING(const V : OleVariant) : TISC_VARYING;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TISC_VARYING((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TM__Wrapper__ = class(__TM__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TM__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMToVariant(var R : TM) : OleVariant;
var
__rw : __TM__Wrapper__;
begin
__rw := __TM__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTM(const V : OleVariant) : TM;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TM((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..38] of string = (
'dSun'
,'dMon'
,'dTue'
,'dWed'
,'dThu'
,'dFri'
,'dSat'
,'dJan'
,'dFeb'
,'dMar'
,'dApr'
,'dMay'
,'dJun'
,'dJul'
,'dAug'
,'dSep'
,'dOct'
,'dNov'
,'dDec'
,'cYearOffset'
,'cSun'
,'cMon'
,'cTue'
,'cWed'
,'cThu'
,'cFri'
,'cSat'
,'cJan'
,'cFeb'
,'cMar'
,'cApr'
,'cMay'
,'cJun'
,'cJul'
,'cAug'
,'cSep'
,'cOct'
,'cNov'
,'cDec'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,dSun));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,dMon));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,dTue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,dWed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,dThu));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,dFri));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,dSat));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,dJan));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,dFeb));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,dMar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,dApr));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,dMay));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,dJun));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,dJul));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,dAug));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,dSep));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,dOct));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,dNov));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,dDec));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,cYearOffset));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,cSun));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,cMon));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,cTue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,cWed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,cThu));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,cFri));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,cSat));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,cJan));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,cFeb));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,cMar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,cApr));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,cMay));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,cJun));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,cJul));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,cAug));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,cSep));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,cOct));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,cNov));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,cDec));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..4] of string = (
'TBlob'
,'TCTimeStructure'
,'TISC_VARYING'
,'TM'
,'InitializeTCTimeStructure'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TBlob_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_TCTimeStructure_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_TISC_VARYING_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(_TM_)));
RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T0),[
TypeInfo(IDispatch)],Addr(____InitializeTCTimeStructure__Wrapper),cRegister);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
