{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit dctslite_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  dccommon,
  consts,
  Registry,
  Windows,
  Messages,
  Forms,
  StdCtrls,
  extctrls,
  RTLConsts,
  inifiles,
  dcdsgnstuff,
  shellapi,
  dialogs,
  clipbrd,
  menus,
  dcvcllib,
  dcapi,
  rerrdlg,
  dcVarPropEd,
  actnlist,
  commctrl,
  buttons,
  oleconst,
  Graphics,
  activex,
  dcscript,
  classes,
  controls,
  comctrls,
  typinfo,
  imglist,
  dcsystem,
  dcgen,
  dcconsts,
  dcdreamlib,
  sysutils,
  dctslite;
function ConvertTNodeRecToVariant(var R : TNodeRec) : OleVariant;
function ConvertVariantToTNodeRec(const V : OleVariant) : TNodeRec;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TNodeRec__Wrapper = class(TDCRecordWrapper)
private
fR : TNodeRec;
public
function GetRecordPtr : pointer; override;
published
procedure setObjId(const val : Integer);
function getObjId : Integer;
property ObjId : Integer read getObjId write setObjId;
procedure setRootId(const val : Integer);
function getRootId : Integer;
property RootId : Integer read getRootId write setRootId;
procedure setDestId(const val : Integer);
function getDestId : Integer;
property DestId : Integer read getDestId write setDestId;
procedure setCaption(const val : AnsiString);
function getCaption : AnsiString;
property Caption : AnsiString read getCaption write setCaption;
procedure setImageIndex(const val : Integer);
function getImageIndex : Integer;
property ImageIndex : Integer read getImageIndex write setImageIndex;
procedure setSelectedIndex(const val : Integer);
function getSelectedIndex : Integer;
property SelectedIndex : Integer read getSelectedIndex write setSelectedIndex;
procedure setStateIndex(const val : Integer);
function getStateIndex : Integer;
property StateIndex : Integer read getStateIndex write setStateIndex;
procedure setOverlayIndex(const val : Integer);
function getOverlayIndex : Integer;
property OverlayIndex : Integer read getOverlayIndex write setOverlayIndex;
procedure setTreeSource(const val : TTreeSource);
function getTreeSource : TTreeSource;
property TreeSource : TTreeSource read getTreeSource write setTreeSource;
procedure setInsertType(const val : TNodeAttachMode);
function getInsertType : TNodeAttachMode;
property InsertType : TNodeAttachMode read getInsertType write setInsertType;
procedure setFontColor(const val : TColor);
function getFontColor : TColor;
property FontColor : TColor read getFontColor write setFontColor;
end;
type
_T0 = function (p0 : TPersistent): string of object;

_T1 = function (p0 : Integer;
p1 : Integer;
p2 : TTreeSource;
p3 : string): IDispatch of object;

_T2 = procedure  of object;

_T3 = _T2;

_T4 = procedure (p0 : Integer;
p1 : Integer;
const p2 : string;
p3 : TNodeAttachMode) of object;

_T5 = procedure (p0 : Longint;
p1 : Longint) of object;

_T6 = _T5;

_T7 = _T2;

function __TNodeRec__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNodeRec__Wrapper.setObjId(const val : Integer);
begin
TNodeRec(GetRecordPtr^).ObjId := val;
end;
function __TNodeRec__Wrapper.getObjId : Integer;
begin
result := TNodeRec(GetRecordPtr^).ObjId;
end;
procedure __TNodeRec__Wrapper.setRootId(const val : Integer);
begin
TNodeRec(GetRecordPtr^).RootId := val;
end;
function __TNodeRec__Wrapper.getRootId : Integer;
begin
result := TNodeRec(GetRecordPtr^).RootId;
end;
procedure __TNodeRec__Wrapper.setDestId(const val : Integer);
begin
TNodeRec(GetRecordPtr^).DestId := val;
end;
function __TNodeRec__Wrapper.getDestId : Integer;
begin
result := TNodeRec(GetRecordPtr^).DestId;
end;
procedure __TNodeRec__Wrapper.setCaption(const val : AnsiString);
begin
TNodeRec(GetRecordPtr^).Caption := val;
end;
function __TNodeRec__Wrapper.getCaption : AnsiString;
begin
result := TNodeRec(GetRecordPtr^).Caption;
end;
procedure __TNodeRec__Wrapper.setImageIndex(const val : Integer);
begin
TNodeRec(GetRecordPtr^).ImageIndex := val;
end;
function __TNodeRec__Wrapper.getImageIndex : Integer;
begin
result := TNodeRec(GetRecordPtr^).ImageIndex;
end;
procedure __TNodeRec__Wrapper.setSelectedIndex(const val : Integer);
begin
TNodeRec(GetRecordPtr^).SelectedIndex := val;
end;
function __TNodeRec__Wrapper.getSelectedIndex : Integer;
begin
result := TNodeRec(GetRecordPtr^).SelectedIndex;
end;
procedure __TNodeRec__Wrapper.setStateIndex(const val : Integer);
begin
TNodeRec(GetRecordPtr^).StateIndex := val;
end;
function __TNodeRec__Wrapper.getStateIndex : Integer;
begin
result := TNodeRec(GetRecordPtr^).StateIndex;
end;
procedure __TNodeRec__Wrapper.setOverlayIndex(const val : Integer);
begin
TNodeRec(GetRecordPtr^).OverlayIndex := val;
end;
function __TNodeRec__Wrapper.getOverlayIndex : Integer;
begin
result := TNodeRec(GetRecordPtr^).OverlayIndex;
end;
procedure __TNodeRec__Wrapper.setTreeSource(const val : TTreeSource);
begin
TNodeRec(GetRecordPtr^).TreeSource := val;
end;
function __TNodeRec__Wrapper.getTreeSource : TTreeSource;
begin
result := TNodeRec(GetRecordPtr^).TreeSource;
end;
procedure __TNodeRec__Wrapper.setInsertType(const val : TNodeAttachMode);
begin
TNodeRec(GetRecordPtr^).InsertType := val;
end;
function __TNodeRec__Wrapper.getInsertType : TNodeAttachMode;
begin
result := TNodeRec(GetRecordPtr^).InsertType;
end;
procedure __TNodeRec__Wrapper.setFontColor(const val : TColor);
begin
TNodeRec(GetRecordPtr^).FontColor := val;
end;
function __TNodeRec__Wrapper.getFontColor : TColor;
begin
result := TNodeRec(GetRecordPtr^).FontColor;
end;
function ____GetNodeRec__Wrapper(p0 : Integer;
p1 : Integer;
p2 : TTreeSource;
p3 : string): IDispatch;
var
__result : TNodeRec;
__wrapper : __TNodeRec__Wrapper;
begin
__result := GetNodeRec(p0,p1,p2,p3);
__wrapper := __TNodeRec__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;


type __TNodeRec__Wrapper__ = class(__TNodeRec__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNodeRec__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNodeRecToVariant(var R : TNodeRec) : OleVariant;
var
__rw : __TNodeRec__Wrapper__;
begin
__rw := __TNodeRec__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNodeRec(const V : OleVariant) : TNodeRec;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNodeRec((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTComponentSource__LargeImages(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TComponentSource(Instance).LargeImages);
end;

procedure __DC__SetTComponentSource__LargeImages(Instance : TObject; Params : PVariantArgList);
begin
TComponentSource(Instance).LargeImages:=TCustomImageList(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTComponentSource__SmallImages(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TComponentSource(Instance).SmallImages);
end;

procedure __DC__SetTComponentSource__SmallImages(Instance : TObject; Params : PVariantArgList);
begin
TComponentSource(Instance).SmallImages:=TCustomImageList(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTComponentSource__StateImages(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TComponentSource(Instance).StateImages);
end;

procedure __DC__SetTComponentSource__StateImages(Instance : TObject; Params : PVariantArgList);
begin
TComponentSource(Instance).StateImages:=TCustomImageList(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTComponentSource__SelectedObject(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TComponentSource(Instance).SelectedObject;
end;

procedure __DC__SetTComponentSource__SelectedObject(Instance : TObject; Params : PVariantArgList);
begin
TComponentSource(Instance).SelectedObject:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomDCStringSource__Strings(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomDCStringSource(Instance).Strings);
end;

procedure __DC__SetTCustomDCStringSource__Strings(Instance : TObject; Params : PVariantArgList);
begin
TCustomDCStringSource(Instance).Strings:=Tstrings(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDCPersistentSource__Link(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDCPersistentSource(Instance).Link);
end;

procedure __DC__SetTDCPersistentSource__Link(Instance : TObject; Params : PVariantArgList);
begin
TDCPersistentSource(Instance).Link:=TPersistent(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDCPersistentSource__PropName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCPersistentSource(Instance).PropName;
end;

procedure __DC__SetTDCPersistentSource__PropName(Instance : TObject; Params : PVariantArgList);
begin
TDCPersistentSource(Instance).PropName:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TComponentSource,'LargeImages',__DC__GetTComponentSource__LargeImages,__DC__SetTComponentSource__LargeImages);
RegisterProperty(TComponentSource,'SmallImages',__DC__GetTComponentSource__SmallImages,__DC__SetTComponentSource__SmallImages);
RegisterProperty(TComponentSource,'StateImages',__DC__GetTComponentSource__StateImages,__DC__SetTComponentSource__StateImages);
RegisterProperty(TComponentSource,'SelectedObject',__DC__GetTComponentSource__SelectedObject,__DC__SetTComponentSource__SelectedObject);
RegisterProperty(TCustomDCStringSource,'Strings',__DC__GetTCustomDCStringSource__Strings,__DC__SetTCustomDCStringSource__Strings);
RegisterProperty(TDCPersistentSource,'Link',__DC__GetTDCPersistentSource__Link,__DC__SetTDCPersistentSource__Link);
RegisterProperty(TDCPersistentSource,'PropName',__DC__GetTDCPersistentSource__PropName,__DC__SetTDCPersistentSource__PropName);
end;

const __ConstNames0 : array[0..0] of string = (
'TSIAMGECHANGED'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,TSIAMGECHANGED));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..3] of TClass = (
TComponentSource,
TCustomDCStringSource,
TDCPersistentSource,
TDCStringSource
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..1] of string = (
'GetBaseName'
,'GetNodeRec'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(TPersistent),TypeInfo(string)],Addr(GetBaseName),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(TTreeSource),
TypeInfo(string),TypeInfo(IDispatch)],Addr(____GetNodeRec__Wrapper),cRegister);

//RegRegisterMethod(TComponentSource,'RefreshEditor',TypeInfo(_T2),NoParams, pointer(176));
RegRegisterMethod(TComponentSource,'RefreshEditor',TypeInfo(_T2),NoParams,  getVMTProcAddr('TComponentSource','RefreshEditor',176));


//RegRegisterMethod(TComponentSource,'RefreshImages',TypeInfo(_T3),NoParams, pointer(180));
RegRegisterMethod(TComponentSource,'RefreshImages',TypeInfo(_T3),NoParams,  getVMTProcAddr('TComponentSource','RefreshImages',180));


//RegRegisterMethod(TComponentSource,'DoAfterInsert',TypeInfo(_T4),[TypeInfo(Integer),TypeInfo(Integer),TypeInfo(string),TypeInfo(TNodeAttachMode)], pointer(184));
RegRegisterMethod(TComponentSource,'DoAfterInsert',TypeInfo(_T4),[TypeInfo(Integer),TypeInfo(Integer),TypeInfo(string),TypeInfo(TNodeAttachMode)],  getVMTProcAddr('TComponentSource','DoAfterInsert',184));


RegRegisterMethod(TComponentSource,'SendNotify',TypeInfo(_T5),[
TypeInfo(Longint),
TypeInfo(Longint)],Addr(TComponentSource.SendNotify));

RegRegisterMethod(TComponentSource,'PostNotify',TypeInfo(_T6),[
TypeInfo(Longint),
TypeInfo(Longint)],Addr(TComponentSource.PostNotify));

//RegRegisterMethod(TDCPersistentSource,'Refresh',TypeInfo(_T7),NoParams, pointer(188));
RegRegisterMethod(TDCPersistentSource,'Refresh',TypeInfo(_T7),NoParams,  getVMTProcAddr('TDCPersistentSource','Refresh',188));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
