{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit ISAPI2_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  Types,
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Isapi2;
function ConvertHSE_VERSION_INFOToVariant(var R : HSE_VERSION_INFO) : OleVariant;
function ConvertVariantToHSE_VERSION_INFO(const V : OleVariant) : HSE_VERSION_INFO;
function ConvertHTTP_FILTER_ACCESS_DENIEDToVariant(var R : HTTP_FILTER_ACCESS_DENIED) : OleVariant;
function ConvertVariantToHTTP_FILTER_ACCESS_DENIED(const V : OleVariant) : HTTP_FILTER_ACCESS_DENIED;
function ConvertHTTP_FILTER_AUTHENTToVariant(var R : HTTP_FILTER_AUTHENT) : OleVariant;
function ConvertVariantToHTTP_FILTER_AUTHENT(const V : OleVariant) : HTTP_FILTER_AUTHENT;
function ConvertHTTP_FILTER_LOGToVariant(var R : HTTP_FILTER_LOG) : OleVariant;
function ConvertVariantToHTTP_FILTER_LOG(const V : OleVariant) : HTTP_FILTER_LOG;
function ConvertHTTP_FILTER_RAW_DATAToVariant(var R : HTTP_FILTER_RAW_DATA) : OleVariant;
function ConvertVariantToHTTP_FILTER_RAW_DATA(const V : OleVariant) : HTTP_FILTER_RAW_DATA;
function ConvertHTTP_FILTER_URL_MAPToVariant(var R : HTTP_FILTER_URL_MAP) : OleVariant;
function ConvertVariantToHTTP_FILTER_URL_MAP(const V : OleVariant) : HTTP_FILTER_URL_MAP;
function ConvertHTTP_FILTER_VERSIONToVariant(var R : HTTP_FILTER_VERSION) : OleVariant;
function ConvertVariantToHTTP_FILTER_VERSION(const V : OleVariant) : HTTP_FILTER_VERSION;
function ConvertTEXTENSION_CONTROL_BLOCKToVariant(var R : TEXTENSION_CONTROL_BLOCK) : OleVariant;
function ConvertVariantToTEXTENSION_CONTROL_BLOCK(const V : OleVariant) : TEXTENSION_CONTROL_BLOCK;
function ConvertTHSE_TF_INFOToVariant(var R : THSE_TF_INFO) : OleVariant;
function ConvertVariantToTHSE_TF_INFO(const V : OleVariant) : THSE_TF_INFO;
function ConvertTHSE_VERSION_INFOToVariant(var R : THSE_VERSION_INFO) : OleVariant;
function ConvertVariantToTHSE_VERSION_INFO(const V : OleVariant) : THSE_VERSION_INFO;
function ConvertTHTTP_FILTER_ACCESS_DENIEDToVariant(var R : THTTP_FILTER_ACCESS_DENIED) : OleVariant;
function ConvertVariantToTHTTP_FILTER_ACCESS_DENIED(const V : OleVariant) : THTTP_FILTER_ACCESS_DENIED;
function ConvertTHTTP_FILTER_AUTHENTToVariant(var R : THTTP_FILTER_AUTHENT) : OleVariant;
function ConvertVariantToTHTTP_FILTER_AUTHENT(const V : OleVariant) : THTTP_FILTER_AUTHENT;
function ConvertTHTTP_FILTER_CONTEXTToVariant(var R : THTTP_FILTER_CONTEXT) : OleVariant;
function ConvertVariantToTHTTP_FILTER_CONTEXT(const V : OleVariant) : THTTP_FILTER_CONTEXT;
function ConvertTHTTP_FILTER_LOGToVariant(var R : THTTP_FILTER_LOG) : OleVariant;
function ConvertVariantToTHTTP_FILTER_LOG(const V : OleVariant) : THTTP_FILTER_LOG;
function ConvertTHTTP_FILTER_PREPROC_HEADERSToVariant(var R : THTTP_FILTER_PREPROC_HEADERS) : OleVariant;
function ConvertVariantToTHTTP_FILTER_PREPROC_HEADERS(const V : OleVariant) : THTTP_FILTER_PREPROC_HEADERS;
function ConvertTHTTP_FILTER_RAW_DATAToVariant(var R : THTTP_FILTER_RAW_DATA) : OleVariant;
function ConvertVariantToTHTTP_FILTER_RAW_DATA(const V : OleVariant) : THTTP_FILTER_RAW_DATA;
function ConvertTHTTP_FILTER_URL_MAPToVariant(var R : THTTP_FILTER_URL_MAP) : OleVariant;
function ConvertVariantToTHTTP_FILTER_URL_MAP(const V : OleVariant) : THTTP_FILTER_URL_MAP;
function ConvertTHTTP_FILTER_VERSIONToVariant(var R : THTTP_FILTER_VERSION) : OleVariant;
function ConvertVariantToTHTTP_FILTER_VERSION(const V : OleVariant) : THTTP_FILTER_VERSION;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __HSE_VERSION_INFO__Wrapper = class(TDCRecordWrapper)
private
fR : HSE_VERSION_INFO;
public
function GetRecordPtr : pointer; override;
published
procedure setdwExtensionVersion(const val : DWORD);
function getdwExtensionVersion : DWORD;
property dwExtensionVersion : DWORD read getdwExtensionVersion write setdwExtensionVersion;
end;
type __HTTP_FILTER_ACCESS_DENIED__Wrapper = class(TDCRecordWrapper)
private
fR : HTTP_FILTER_ACCESS_DENIED;
public
function GetRecordPtr : pointer; override;
published
procedure setdwReason(const val : DWORD);
function getdwReason : DWORD;
property dwReason : DWORD read getdwReason write setdwReason;
end;
type __HTTP_FILTER_AUTHENT__Wrapper = class(TDCRecordWrapper)
private
fR : HTTP_FILTER_AUTHENT;
public
function GetRecordPtr : pointer; override;
published
procedure setcbUserBuff(const val : DWORD);
function getcbUserBuff : DWORD;
property cbUserBuff : DWORD read getcbUserBuff write setcbUserBuff;
procedure setcbPasswordBuff(const val : DWORD);
function getcbPasswordBuff : DWORD;
property cbPasswordBuff : DWORD read getcbPasswordBuff write setcbPasswordBuff;
end;
type __HTTP_FILTER_LOG__Wrapper = class(TDCRecordWrapper)
private
fR : HTTP_FILTER_LOG;
public
function GetRecordPtr : pointer; override;
published
procedure setdwHttpStatus(const val : DWORD);
function getdwHttpStatus : DWORD;
property dwHttpStatus : DWORD read getdwHttpStatus write setdwHttpStatus;
procedure setdwWin32Status(const val : DWORD);
function getdwWin32Status : DWORD;
property dwWin32Status : DWORD read getdwWin32Status write setdwWin32Status;
end;
type __HTTP_FILTER_RAW_DATA__Wrapper = class(TDCRecordWrapper)
private
fR : HTTP_FILTER_RAW_DATA;
public
function GetRecordPtr : pointer; override;
published
procedure setcbInData(const val : DWORD);
function getcbInData : DWORD;
property cbInData : DWORD read getcbInData write setcbInData;
procedure setcbInBuffer(const val : DWORD);
function getcbInBuffer : DWORD;
property cbInBuffer : DWORD read getcbInBuffer write setcbInBuffer;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
end;
type __HTTP_FILTER_URL_MAP__Wrapper = class(TDCRecordWrapper)
private
fR : HTTP_FILTER_URL_MAP;
public
function GetRecordPtr : pointer; override;
published
procedure setcbPathBuff(const val : DWORD);
function getcbPathBuff : DWORD;
property cbPathBuff : DWORD read getcbPathBuff write setcbPathBuff;
end;
type __HTTP_FILTER_VERSION__Wrapper = class(TDCRecordWrapper)
private
fR : HTTP_FILTER_VERSION;
public
function GetRecordPtr : pointer; override;
published
procedure setdwServerFilterVersion(const val : DWORD);
function getdwServerFilterVersion : DWORD;
property dwServerFilterVersion : DWORD read getdwServerFilterVersion write setdwServerFilterVersion;
procedure setdwFilterVersion(const val : DWORD);
function getdwFilterVersion : DWORD;
property dwFilterVersion : DWORD read getdwFilterVersion write setdwFilterVersion;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type __TEXTENSION_CONTROL_BLOCK__Wrapper = class(TDCRecordWrapper)
private
fR : TEXTENSION_CONTROL_BLOCK;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setdwVersion(const val : DWORD);
function getdwVersion : DWORD;
property dwVersion : DWORD read getdwVersion write setdwVersion;
procedure setConnID(const val : HCONN);
function getConnID : HCONN;
property ConnID : HCONN read getConnID write setConnID;
procedure setdwHttpStatusCode(const val : DWORD);
function getdwHttpStatusCode : DWORD;
property dwHttpStatusCode : DWORD read getdwHttpStatusCode write setdwHttpStatusCode;
procedure setcbTotalBytes(const val : DWORD);
function getcbTotalBytes : DWORD;
property cbTotalBytes : DWORD read getcbTotalBytes write setcbTotalBytes;
procedure setcbAvailable(const val : DWORD);
function getcbAvailable : DWORD;
property cbAvailable : DWORD read getcbAvailable write setcbAvailable;
end;
type __THSE_TF_INFO__Wrapper = class(TDCRecordWrapper)
private
fR : THSE_TF_INFO;
public
function GetRecordPtr : pointer; override;
published
procedure sethFile(const val : THandle);
function gethFile : THandle;
property hFile : THandle read gethFile write sethFile;
procedure setBytesToWrite(const val : DWORD);
function getBytesToWrite : DWORD;
property BytesToWrite : DWORD read getBytesToWrite write setBytesToWrite;
procedure setOffset(const val : DWORD);
function getOffset : DWORD;
property Offset : DWORD read getOffset write setOffset;
procedure setHeadLength(const val : DWORD);
function getHeadLength : DWORD;
property HeadLength : DWORD read getHeadLength write setHeadLength;
procedure setTailLength(const val : DWORD);
function getTailLength : DWORD;
property TailLength : DWORD read getTailLength write setTailLength;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
type __THSE_VERSION_INFO__Wrapper = class(TDCRecordWrapper)
private
fR : THSE_VERSION_INFO;
public
function GetRecordPtr : pointer; override;
published
procedure setdwExtensionVersion(const val : DWORD);
function getdwExtensionVersion : DWORD;
property dwExtensionVersion : DWORD read getdwExtensionVersion write setdwExtensionVersion;
end;
type __THTTP_FILTER_ACCESS_DENIED__Wrapper = class(TDCRecordWrapper)
private
fR : THTTP_FILTER_ACCESS_DENIED;
public
function GetRecordPtr : pointer; override;
published
procedure setdwReason(const val : DWORD);
function getdwReason : DWORD;
property dwReason : DWORD read getdwReason write setdwReason;
end;
type __THTTP_FILTER_AUTHENT__Wrapper = class(TDCRecordWrapper)
private
fR : THTTP_FILTER_AUTHENT;
public
function GetRecordPtr : pointer; override;
published
procedure setcbUserBuff(const val : DWORD);
function getcbUserBuff : DWORD;
property cbUserBuff : DWORD read getcbUserBuff write setcbUserBuff;
procedure setcbPasswordBuff(const val : DWORD);
function getcbPasswordBuff : DWORD;
property cbPasswordBuff : DWORD read getcbPasswordBuff write setcbPasswordBuff;
end;
type __THTTP_FILTER_CONTEXT__Wrapper = class(TDCRecordWrapper)
private
fR : THTTP_FILTER_CONTEXT;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : DWORD);
function getcbSize : DWORD;
property cbSize : DWORD read getcbSize write setcbSize;
procedure setRevision(const val : DWORD);
function getRevision : DWORD;
property Revision : DWORD read getRevision write setRevision;
procedure setulReserved(const val : DWORD);
function getulReserved : DWORD;
property ulReserved : DWORD read getulReserved write setulReserved;
procedure setfIsSecurePort(const val : BOOL);
function getfIsSecurePort : BOOL;
property fIsSecurePort : BOOL read getfIsSecurePort write setfIsSecurePort;
end;
type __THTTP_FILTER_LOG__Wrapper = class(TDCRecordWrapper)
private
fR : THTTP_FILTER_LOG;
public
function GetRecordPtr : pointer; override;
published
procedure setdwHttpStatus(const val : DWORD);
function getdwHttpStatus : DWORD;
property dwHttpStatus : DWORD read getdwHttpStatus write setdwHttpStatus;
procedure setdwWin32Status(const val : DWORD);
function getdwWin32Status : DWORD;
property dwWin32Status : DWORD read getdwWin32Status write setdwWin32Status;
end;
type __THTTP_FILTER_PREPROC_HEADERS__Wrapper = class(TDCRecordWrapper)
private
fR : THTTP_FILTER_PREPROC_HEADERS;
public
function GetRecordPtr : pointer; override;
published
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
end;
type __THTTP_FILTER_RAW_DATA__Wrapper = class(TDCRecordWrapper)
private
fR : THTTP_FILTER_RAW_DATA;
public
function GetRecordPtr : pointer; override;
published
procedure setcbInData(const val : DWORD);
function getcbInData : DWORD;
property cbInData : DWORD read getcbInData write setcbInData;
procedure setcbInBuffer(const val : DWORD);
function getcbInBuffer : DWORD;
property cbInBuffer : DWORD read getcbInBuffer write setcbInBuffer;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
end;
type __THTTP_FILTER_URL_MAP__Wrapper = class(TDCRecordWrapper)
private
fR : THTTP_FILTER_URL_MAP;
public
function GetRecordPtr : pointer; override;
published
procedure setcbPathBuff(const val : DWORD);
function getcbPathBuff : DWORD;
property cbPathBuff : DWORD read getcbPathBuff write setcbPathBuff;
end;
type __THTTP_FILTER_VERSION__Wrapper = class(TDCRecordWrapper)
private
fR : THTTP_FILTER_VERSION;
public
function GetRecordPtr : pointer; override;
published
procedure setdwServerFilterVersion(const val : DWORD);
function getdwServerFilterVersion : DWORD;
property dwServerFilterVersion : DWORD read getdwServerFilterVersion write setdwServerFilterVersion;
procedure setdwFilterVersion(const val : DWORD);
function getdwFilterVersion : DWORD;
property dwFilterVersion : DWORD read getdwFilterVersion write setdwFilterVersion;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
end;
function __HSE_VERSION_INFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __HSE_VERSION_INFO__Wrapper.setdwExtensionVersion(const val : DWORD);
begin
HSE_VERSION_INFO(GetRecordPtr^).dwExtensionVersion := val;
end;
function __HSE_VERSION_INFO__Wrapper.getdwExtensionVersion : DWORD;
begin
result := HSE_VERSION_INFO(GetRecordPtr^).dwExtensionVersion;
end;
function __HTTP_FILTER_ACCESS_DENIED__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __HTTP_FILTER_ACCESS_DENIED__Wrapper.setdwReason(const val : DWORD);
begin
HTTP_FILTER_ACCESS_DENIED(GetRecordPtr^).dwReason := val;
end;
function __HTTP_FILTER_ACCESS_DENIED__Wrapper.getdwReason : DWORD;
begin
result := HTTP_FILTER_ACCESS_DENIED(GetRecordPtr^).dwReason;
end;
function __HTTP_FILTER_AUTHENT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __HTTP_FILTER_AUTHENT__Wrapper.setcbUserBuff(const val : DWORD);
begin
HTTP_FILTER_AUTHENT(GetRecordPtr^).cbUserBuff := val;
end;
function __HTTP_FILTER_AUTHENT__Wrapper.getcbUserBuff : DWORD;
begin
result := HTTP_FILTER_AUTHENT(GetRecordPtr^).cbUserBuff;
end;
procedure __HTTP_FILTER_AUTHENT__Wrapper.setcbPasswordBuff(const val : DWORD);
begin
HTTP_FILTER_AUTHENT(GetRecordPtr^).cbPasswordBuff := val;
end;
function __HTTP_FILTER_AUTHENT__Wrapper.getcbPasswordBuff : DWORD;
begin
result := HTTP_FILTER_AUTHENT(GetRecordPtr^).cbPasswordBuff;
end;
function __HTTP_FILTER_LOG__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __HTTP_FILTER_LOG__Wrapper.setdwHttpStatus(const val : DWORD);
begin
HTTP_FILTER_LOG(GetRecordPtr^).dwHttpStatus := val;
end;
function __HTTP_FILTER_LOG__Wrapper.getdwHttpStatus : DWORD;
begin
result := HTTP_FILTER_LOG(GetRecordPtr^).dwHttpStatus;
end;
procedure __HTTP_FILTER_LOG__Wrapper.setdwWin32Status(const val : DWORD);
begin
HTTP_FILTER_LOG(GetRecordPtr^).dwWin32Status := val;
end;
function __HTTP_FILTER_LOG__Wrapper.getdwWin32Status : DWORD;
begin
result := HTTP_FILTER_LOG(GetRecordPtr^).dwWin32Status;
end;
function __HTTP_FILTER_RAW_DATA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __HTTP_FILTER_RAW_DATA__Wrapper.setcbInData(const val : DWORD);
begin
HTTP_FILTER_RAW_DATA(GetRecordPtr^).cbInData := val;
end;
function __HTTP_FILTER_RAW_DATA__Wrapper.getcbInData : DWORD;
begin
result := HTTP_FILTER_RAW_DATA(GetRecordPtr^).cbInData;
end;
procedure __HTTP_FILTER_RAW_DATA__Wrapper.setcbInBuffer(const val : DWORD);
begin
HTTP_FILTER_RAW_DATA(GetRecordPtr^).cbInBuffer := val;
end;
function __HTTP_FILTER_RAW_DATA__Wrapper.getcbInBuffer : DWORD;
begin
result := HTTP_FILTER_RAW_DATA(GetRecordPtr^).cbInBuffer;
end;
procedure __HTTP_FILTER_RAW_DATA__Wrapper.setdwReserved(const val : DWORD);
begin
HTTP_FILTER_RAW_DATA(GetRecordPtr^).dwReserved := val;
end;
function __HTTP_FILTER_RAW_DATA__Wrapper.getdwReserved : DWORD;
begin
result := HTTP_FILTER_RAW_DATA(GetRecordPtr^).dwReserved;
end;
function __HTTP_FILTER_URL_MAP__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __HTTP_FILTER_URL_MAP__Wrapper.setcbPathBuff(const val : DWORD);
begin
HTTP_FILTER_URL_MAP(GetRecordPtr^).cbPathBuff := val;
end;
function __HTTP_FILTER_URL_MAP__Wrapper.getcbPathBuff : DWORD;
begin
result := HTTP_FILTER_URL_MAP(GetRecordPtr^).cbPathBuff;
end;
function __HTTP_FILTER_VERSION__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __HTTP_FILTER_VERSION__Wrapper.setdwServerFilterVersion(const val : DWORD);
begin
HTTP_FILTER_VERSION(GetRecordPtr^).dwServerFilterVersion := val;
end;
function __HTTP_FILTER_VERSION__Wrapper.getdwServerFilterVersion : DWORD;
begin
result := HTTP_FILTER_VERSION(GetRecordPtr^).dwServerFilterVersion;
end;
procedure __HTTP_FILTER_VERSION__Wrapper.setdwFilterVersion(const val : DWORD);
begin
HTTP_FILTER_VERSION(GetRecordPtr^).dwFilterVersion := val;
end;
function __HTTP_FILTER_VERSION__Wrapper.getdwFilterVersion : DWORD;
begin
result := HTTP_FILTER_VERSION(GetRecordPtr^).dwFilterVersion;
end;
procedure __HTTP_FILTER_VERSION__Wrapper.setdwFlags(const val : DWORD);
begin
HTTP_FILTER_VERSION(GetRecordPtr^).dwFlags := val;
end;
function __HTTP_FILTER_VERSION__Wrapper.getdwFlags : DWORD;
begin
result := HTTP_FILTER_VERSION(GetRecordPtr^).dwFlags;
end;
function __TEXTENSION_CONTROL_BLOCK__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TEXTENSION_CONTROL_BLOCK__Wrapper.setcbSize(const val : DWORD);
begin
TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).cbSize := val;
end;
function __TEXTENSION_CONTROL_BLOCK__Wrapper.getcbSize : DWORD;
begin
result := TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).cbSize;
end;
procedure __TEXTENSION_CONTROL_BLOCK__Wrapper.setdwVersion(const val : DWORD);
begin
TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).dwVersion := val;
end;
function __TEXTENSION_CONTROL_BLOCK__Wrapper.getdwVersion : DWORD;
begin
result := TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).dwVersion;
end;
procedure __TEXTENSION_CONTROL_BLOCK__Wrapper.setConnID(const val : HCONN);
begin
TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).ConnID := val;
end;
function __TEXTENSION_CONTROL_BLOCK__Wrapper.getConnID : HCONN;
begin
result := TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).ConnID;
end;
procedure __TEXTENSION_CONTROL_BLOCK__Wrapper.setdwHttpStatusCode(const val : DWORD);
begin
TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).dwHttpStatusCode := val;
end;
function __TEXTENSION_CONTROL_BLOCK__Wrapper.getdwHttpStatusCode : DWORD;
begin
result := TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).dwHttpStatusCode;
end;
procedure __TEXTENSION_CONTROL_BLOCK__Wrapper.setcbTotalBytes(const val : DWORD);
begin
TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).cbTotalBytes := val;
end;
function __TEXTENSION_CONTROL_BLOCK__Wrapper.getcbTotalBytes : DWORD;
begin
result := TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).cbTotalBytes;
end;
procedure __TEXTENSION_CONTROL_BLOCK__Wrapper.setcbAvailable(const val : DWORD);
begin
TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).cbAvailable := val;
end;
function __TEXTENSION_CONTROL_BLOCK__Wrapper.getcbAvailable : DWORD;
begin
result := TEXTENSION_CONTROL_BLOCK(GetRecordPtr^).cbAvailable;
end;
function __THSE_TF_INFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __THSE_TF_INFO__Wrapper.sethFile(const val : THandle);
begin
THSE_TF_INFO(GetRecordPtr^).hFile := val;
end;
function __THSE_TF_INFO__Wrapper.gethFile : THandle;
begin
result := THSE_TF_INFO(GetRecordPtr^).hFile;
end;
procedure __THSE_TF_INFO__Wrapper.setBytesToWrite(const val : DWORD);
begin
THSE_TF_INFO(GetRecordPtr^).BytesToWrite := val;
end;
function __THSE_TF_INFO__Wrapper.getBytesToWrite : DWORD;
begin
result := THSE_TF_INFO(GetRecordPtr^).BytesToWrite;
end;
procedure __THSE_TF_INFO__Wrapper.setOffset(const val : DWORD);
begin
THSE_TF_INFO(GetRecordPtr^).Offset := val;
end;
function __THSE_TF_INFO__Wrapper.getOffset : DWORD;
begin
result := THSE_TF_INFO(GetRecordPtr^).Offset;
end;
procedure __THSE_TF_INFO__Wrapper.setHeadLength(const val : DWORD);
begin
THSE_TF_INFO(GetRecordPtr^).HeadLength := val;
end;
function __THSE_TF_INFO__Wrapper.getHeadLength : DWORD;
begin
result := THSE_TF_INFO(GetRecordPtr^).HeadLength;
end;
procedure __THSE_TF_INFO__Wrapper.setTailLength(const val : DWORD);
begin
THSE_TF_INFO(GetRecordPtr^).TailLength := val;
end;
function __THSE_TF_INFO__Wrapper.getTailLength : DWORD;
begin
result := THSE_TF_INFO(GetRecordPtr^).TailLength;
end;
procedure __THSE_TF_INFO__Wrapper.setdwFlags(const val : DWORD);
begin
THSE_TF_INFO(GetRecordPtr^).dwFlags := val;
end;
function __THSE_TF_INFO__Wrapper.getdwFlags : DWORD;
begin
result := THSE_TF_INFO(GetRecordPtr^).dwFlags;
end;
function __THSE_VERSION_INFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __THSE_VERSION_INFO__Wrapper.setdwExtensionVersion(const val : DWORD);
begin
THSE_VERSION_INFO(GetRecordPtr^).dwExtensionVersion := val;
end;
function __THSE_VERSION_INFO__Wrapper.getdwExtensionVersion : DWORD;
begin
result := THSE_VERSION_INFO(GetRecordPtr^).dwExtensionVersion;
end;
function __THTTP_FILTER_ACCESS_DENIED__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __THTTP_FILTER_ACCESS_DENIED__Wrapper.setdwReason(const val : DWORD);
begin
THTTP_FILTER_ACCESS_DENIED(GetRecordPtr^).dwReason := val;
end;
function __THTTP_FILTER_ACCESS_DENIED__Wrapper.getdwReason : DWORD;
begin
result := THTTP_FILTER_ACCESS_DENIED(GetRecordPtr^).dwReason;
end;
function __THTTP_FILTER_AUTHENT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __THTTP_FILTER_AUTHENT__Wrapper.setcbUserBuff(const val : DWORD);
begin
THTTP_FILTER_AUTHENT(GetRecordPtr^).cbUserBuff := val;
end;
function __THTTP_FILTER_AUTHENT__Wrapper.getcbUserBuff : DWORD;
begin
result := THTTP_FILTER_AUTHENT(GetRecordPtr^).cbUserBuff;
end;
procedure __THTTP_FILTER_AUTHENT__Wrapper.setcbPasswordBuff(const val : DWORD);
begin
THTTP_FILTER_AUTHENT(GetRecordPtr^).cbPasswordBuff := val;
end;
function __THTTP_FILTER_AUTHENT__Wrapper.getcbPasswordBuff : DWORD;
begin
result := THTTP_FILTER_AUTHENT(GetRecordPtr^).cbPasswordBuff;
end;
function __THTTP_FILTER_CONTEXT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __THTTP_FILTER_CONTEXT__Wrapper.setcbSize(const val : DWORD);
begin
THTTP_FILTER_CONTEXT(GetRecordPtr^).cbSize := val;
end;
function __THTTP_FILTER_CONTEXT__Wrapper.getcbSize : DWORD;
begin
result := THTTP_FILTER_CONTEXT(GetRecordPtr^).cbSize;
end;
procedure __THTTP_FILTER_CONTEXT__Wrapper.setRevision(const val : DWORD);
begin
THTTP_FILTER_CONTEXT(GetRecordPtr^).Revision := val;
end;
function __THTTP_FILTER_CONTEXT__Wrapper.getRevision : DWORD;
begin
result := THTTP_FILTER_CONTEXT(GetRecordPtr^).Revision;
end;
procedure __THTTP_FILTER_CONTEXT__Wrapper.setulReserved(const val : DWORD);
begin
THTTP_FILTER_CONTEXT(GetRecordPtr^).ulReserved := val;
end;
function __THTTP_FILTER_CONTEXT__Wrapper.getulReserved : DWORD;
begin
result := THTTP_FILTER_CONTEXT(GetRecordPtr^).ulReserved;
end;
procedure __THTTP_FILTER_CONTEXT__Wrapper.setfIsSecurePort(const val : BOOL);
begin
THTTP_FILTER_CONTEXT(GetRecordPtr^).fIsSecurePort := val;
end;
function __THTTP_FILTER_CONTEXT__Wrapper.getfIsSecurePort : BOOL;
begin
result := THTTP_FILTER_CONTEXT(GetRecordPtr^).fIsSecurePort;
end;
function __THTTP_FILTER_LOG__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __THTTP_FILTER_LOG__Wrapper.setdwHttpStatus(const val : DWORD);
begin
THTTP_FILTER_LOG(GetRecordPtr^).dwHttpStatus := val;
end;
function __THTTP_FILTER_LOG__Wrapper.getdwHttpStatus : DWORD;
begin
result := THTTP_FILTER_LOG(GetRecordPtr^).dwHttpStatus;
end;
procedure __THTTP_FILTER_LOG__Wrapper.setdwWin32Status(const val : DWORD);
begin
THTTP_FILTER_LOG(GetRecordPtr^).dwWin32Status := val;
end;
function __THTTP_FILTER_LOG__Wrapper.getdwWin32Status : DWORD;
begin
result := THTTP_FILTER_LOG(GetRecordPtr^).dwWin32Status;
end;
function __THTTP_FILTER_PREPROC_HEADERS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __THTTP_FILTER_PREPROC_HEADERS__Wrapper.setdwReserved(const val : DWORD);
begin
THTTP_FILTER_PREPROC_HEADERS(GetRecordPtr^).dwReserved := val;
end;
function __THTTP_FILTER_PREPROC_HEADERS__Wrapper.getdwReserved : DWORD;
begin
result := THTTP_FILTER_PREPROC_HEADERS(GetRecordPtr^).dwReserved;
end;
function __THTTP_FILTER_RAW_DATA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __THTTP_FILTER_RAW_DATA__Wrapper.setcbInData(const val : DWORD);
begin
THTTP_FILTER_RAW_DATA(GetRecordPtr^).cbInData := val;
end;
function __THTTP_FILTER_RAW_DATA__Wrapper.getcbInData : DWORD;
begin
result := THTTP_FILTER_RAW_DATA(GetRecordPtr^).cbInData;
end;
procedure __THTTP_FILTER_RAW_DATA__Wrapper.setcbInBuffer(const val : DWORD);
begin
THTTP_FILTER_RAW_DATA(GetRecordPtr^).cbInBuffer := val;
end;
function __THTTP_FILTER_RAW_DATA__Wrapper.getcbInBuffer : DWORD;
begin
result := THTTP_FILTER_RAW_DATA(GetRecordPtr^).cbInBuffer;
end;
procedure __THTTP_FILTER_RAW_DATA__Wrapper.setdwReserved(const val : DWORD);
begin
THTTP_FILTER_RAW_DATA(GetRecordPtr^).dwReserved := val;
end;
function __THTTP_FILTER_RAW_DATA__Wrapper.getdwReserved : DWORD;
begin
result := THTTP_FILTER_RAW_DATA(GetRecordPtr^).dwReserved;
end;
function __THTTP_FILTER_URL_MAP__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __THTTP_FILTER_URL_MAP__Wrapper.setcbPathBuff(const val : DWORD);
begin
THTTP_FILTER_URL_MAP(GetRecordPtr^).cbPathBuff := val;
end;
function __THTTP_FILTER_URL_MAP__Wrapper.getcbPathBuff : DWORD;
begin
result := THTTP_FILTER_URL_MAP(GetRecordPtr^).cbPathBuff;
end;
function __THTTP_FILTER_VERSION__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __THTTP_FILTER_VERSION__Wrapper.setdwServerFilterVersion(const val : DWORD);
begin
THTTP_FILTER_VERSION(GetRecordPtr^).dwServerFilterVersion := val;
end;
function __THTTP_FILTER_VERSION__Wrapper.getdwServerFilterVersion : DWORD;
begin
result := THTTP_FILTER_VERSION(GetRecordPtr^).dwServerFilterVersion;
end;
procedure __THTTP_FILTER_VERSION__Wrapper.setdwFilterVersion(const val : DWORD);
begin
THTTP_FILTER_VERSION(GetRecordPtr^).dwFilterVersion := val;
end;
function __THTTP_FILTER_VERSION__Wrapper.getdwFilterVersion : DWORD;
begin
result := THTTP_FILTER_VERSION(GetRecordPtr^).dwFilterVersion;
end;
procedure __THTTP_FILTER_VERSION__Wrapper.setdwFlags(const val : DWORD);
begin
THTTP_FILTER_VERSION(GetRecordPtr^).dwFlags := val;
end;
function __THTTP_FILTER_VERSION__Wrapper.getdwFlags : DWORD;
begin
result := THTTP_FILTER_VERSION(GetRecordPtr^).dwFlags;
end;
function _HSE_VERSION_INFO_ : IDispatch;
begin
  result := __HSE_VERSION_INFO__Wrapper.Create;
end;
function _HTTP_FILTER_ACCESS_DENIED_ : IDispatch;
begin
  result := __HTTP_FILTER_ACCESS_DENIED__Wrapper.Create;
end;
function _HTTP_FILTER_AUTHENT_ : IDispatch;
begin
  result := __HTTP_FILTER_AUTHENT__Wrapper.Create;
end;
function _HTTP_FILTER_LOG_ : IDispatch;
begin
  result := __HTTP_FILTER_LOG__Wrapper.Create;
end;
function _HTTP_FILTER_RAW_DATA_ : IDispatch;
begin
  result := __HTTP_FILTER_RAW_DATA__Wrapper.Create;
end;
function _HTTP_FILTER_URL_MAP_ : IDispatch;
begin
  result := __HTTP_FILTER_URL_MAP__Wrapper.Create;
end;
function _HTTP_FILTER_VERSION_ : IDispatch;
begin
  result := __HTTP_FILTER_VERSION__Wrapper.Create;
end;
function _TEXTENSION_CONTROL_BLOCK_ : IDispatch;
begin
  result := __TEXTENSION_CONTROL_BLOCK__Wrapper.Create;
end;
function _THSE_TF_INFO_ : IDispatch;
begin
  result := __THSE_TF_INFO__Wrapper.Create;
end;
function _THSE_VERSION_INFO_ : IDispatch;
begin
  result := __THSE_VERSION_INFO__Wrapper.Create;
end;
function _THTTP_FILTER_ACCESS_DENIED_ : IDispatch;
begin
  result := __THTTP_FILTER_ACCESS_DENIED__Wrapper.Create;
end;
function _THTTP_FILTER_AUTHENT_ : IDispatch;
begin
  result := __THTTP_FILTER_AUTHENT__Wrapper.Create;
end;
function _THTTP_FILTER_CONTEXT_ : IDispatch;
begin
  result := __THTTP_FILTER_CONTEXT__Wrapper.Create;
end;
function _THTTP_FILTER_LOG_ : IDispatch;
begin
  result := __THTTP_FILTER_LOG__Wrapper.Create;
end;
function _THTTP_FILTER_PREPROC_HEADERS_ : IDispatch;
begin
  result := __THTTP_FILTER_PREPROC_HEADERS__Wrapper.Create;
end;
function _THTTP_FILTER_RAW_DATA_ : IDispatch;
begin
  result := __THTTP_FILTER_RAW_DATA__Wrapper.Create;
end;
function _THTTP_FILTER_URL_MAP_ : IDispatch;
begin
  result := __THTTP_FILTER_URL_MAP__Wrapper.Create;
end;
function _THTTP_FILTER_VERSION_ : IDispatch;
begin
  result := __THTTP_FILTER_VERSION__Wrapper.Create;
end;

type __HSE_VERSION_INFO__Wrapper__ = class(__HSE_VERSION_INFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __HSE_VERSION_INFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertHSE_VERSION_INFOToVariant(var R : HSE_VERSION_INFO) : OleVariant;
var
__rw : __HSE_VERSION_INFO__Wrapper__;
begin
__rw := __HSE_VERSION_INFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToHSE_VERSION_INFO(const V : OleVariant) : HSE_VERSION_INFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := HSE_VERSION_INFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __HTTP_FILTER_ACCESS_DENIED__Wrapper__ = class(__HTTP_FILTER_ACCESS_DENIED__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __HTTP_FILTER_ACCESS_DENIED__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertHTTP_FILTER_ACCESS_DENIEDToVariant(var R : HTTP_FILTER_ACCESS_DENIED) : OleVariant;
var
__rw : __HTTP_FILTER_ACCESS_DENIED__Wrapper__;
begin
__rw := __HTTP_FILTER_ACCESS_DENIED__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToHTTP_FILTER_ACCESS_DENIED(const V : OleVariant) : HTTP_FILTER_ACCESS_DENIED;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := HTTP_FILTER_ACCESS_DENIED((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __HTTP_FILTER_AUTHENT__Wrapper__ = class(__HTTP_FILTER_AUTHENT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __HTTP_FILTER_AUTHENT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertHTTP_FILTER_AUTHENTToVariant(var R : HTTP_FILTER_AUTHENT) : OleVariant;
var
__rw : __HTTP_FILTER_AUTHENT__Wrapper__;
begin
__rw := __HTTP_FILTER_AUTHENT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToHTTP_FILTER_AUTHENT(const V : OleVariant) : HTTP_FILTER_AUTHENT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := HTTP_FILTER_AUTHENT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __HTTP_FILTER_LOG__Wrapper__ = class(__HTTP_FILTER_LOG__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __HTTP_FILTER_LOG__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertHTTP_FILTER_LOGToVariant(var R : HTTP_FILTER_LOG) : OleVariant;
var
__rw : __HTTP_FILTER_LOG__Wrapper__;
begin
__rw := __HTTP_FILTER_LOG__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToHTTP_FILTER_LOG(const V : OleVariant) : HTTP_FILTER_LOG;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := HTTP_FILTER_LOG((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __HTTP_FILTER_RAW_DATA__Wrapper__ = class(__HTTP_FILTER_RAW_DATA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __HTTP_FILTER_RAW_DATA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertHTTP_FILTER_RAW_DATAToVariant(var R : HTTP_FILTER_RAW_DATA) : OleVariant;
var
__rw : __HTTP_FILTER_RAW_DATA__Wrapper__;
begin
__rw := __HTTP_FILTER_RAW_DATA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToHTTP_FILTER_RAW_DATA(const V : OleVariant) : HTTP_FILTER_RAW_DATA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := HTTP_FILTER_RAW_DATA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __HTTP_FILTER_URL_MAP__Wrapper__ = class(__HTTP_FILTER_URL_MAP__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __HTTP_FILTER_URL_MAP__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertHTTP_FILTER_URL_MAPToVariant(var R : HTTP_FILTER_URL_MAP) : OleVariant;
var
__rw : __HTTP_FILTER_URL_MAP__Wrapper__;
begin
__rw := __HTTP_FILTER_URL_MAP__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToHTTP_FILTER_URL_MAP(const V : OleVariant) : HTTP_FILTER_URL_MAP;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := HTTP_FILTER_URL_MAP((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __HTTP_FILTER_VERSION__Wrapper__ = class(__HTTP_FILTER_VERSION__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __HTTP_FILTER_VERSION__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertHTTP_FILTER_VERSIONToVariant(var R : HTTP_FILTER_VERSION) : OleVariant;
var
__rw : __HTTP_FILTER_VERSION__Wrapper__;
begin
__rw := __HTTP_FILTER_VERSION__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToHTTP_FILTER_VERSION(const V : OleVariant) : HTTP_FILTER_VERSION;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := HTTP_FILTER_VERSION((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TEXTENSION_CONTROL_BLOCK__Wrapper__ = class(__TEXTENSION_CONTROL_BLOCK__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TEXTENSION_CONTROL_BLOCK__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTEXTENSION_CONTROL_BLOCKToVariant(var R : TEXTENSION_CONTROL_BLOCK) : OleVariant;
var
__rw : __TEXTENSION_CONTROL_BLOCK__Wrapper__;
begin
__rw := __TEXTENSION_CONTROL_BLOCK__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTEXTENSION_CONTROL_BLOCK(const V : OleVariant) : TEXTENSION_CONTROL_BLOCK;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TEXTENSION_CONTROL_BLOCK((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __THSE_TF_INFO__Wrapper__ = class(__THSE_TF_INFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __THSE_TF_INFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTHSE_TF_INFOToVariant(var R : THSE_TF_INFO) : OleVariant;
var
__rw : __THSE_TF_INFO__Wrapper__;
begin
__rw := __THSE_TF_INFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTHSE_TF_INFO(const V : OleVariant) : THSE_TF_INFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := THSE_TF_INFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __THSE_VERSION_INFO__Wrapper__ = class(__THSE_VERSION_INFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __THSE_VERSION_INFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTHSE_VERSION_INFOToVariant(var R : THSE_VERSION_INFO) : OleVariant;
var
__rw : __THSE_VERSION_INFO__Wrapper__;
begin
__rw := __THSE_VERSION_INFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTHSE_VERSION_INFO(const V : OleVariant) : THSE_VERSION_INFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := THSE_VERSION_INFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __THTTP_FILTER_ACCESS_DENIED__Wrapper__ = class(__THTTP_FILTER_ACCESS_DENIED__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __THTTP_FILTER_ACCESS_DENIED__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTHTTP_FILTER_ACCESS_DENIEDToVariant(var R : THTTP_FILTER_ACCESS_DENIED) : OleVariant;
var
__rw : __THTTP_FILTER_ACCESS_DENIED__Wrapper__;
begin
__rw := __THTTP_FILTER_ACCESS_DENIED__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTHTTP_FILTER_ACCESS_DENIED(const V : OleVariant) : THTTP_FILTER_ACCESS_DENIED;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := THTTP_FILTER_ACCESS_DENIED((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __THTTP_FILTER_AUTHENT__Wrapper__ = class(__THTTP_FILTER_AUTHENT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __THTTP_FILTER_AUTHENT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTHTTP_FILTER_AUTHENTToVariant(var R : THTTP_FILTER_AUTHENT) : OleVariant;
var
__rw : __THTTP_FILTER_AUTHENT__Wrapper__;
begin
__rw := __THTTP_FILTER_AUTHENT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTHTTP_FILTER_AUTHENT(const V : OleVariant) : THTTP_FILTER_AUTHENT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := THTTP_FILTER_AUTHENT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __THTTP_FILTER_CONTEXT__Wrapper__ = class(__THTTP_FILTER_CONTEXT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __THTTP_FILTER_CONTEXT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTHTTP_FILTER_CONTEXTToVariant(var R : THTTP_FILTER_CONTEXT) : OleVariant;
var
__rw : __THTTP_FILTER_CONTEXT__Wrapper__;
begin
__rw := __THTTP_FILTER_CONTEXT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTHTTP_FILTER_CONTEXT(const V : OleVariant) : THTTP_FILTER_CONTEXT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := THTTP_FILTER_CONTEXT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __THTTP_FILTER_LOG__Wrapper__ = class(__THTTP_FILTER_LOG__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __THTTP_FILTER_LOG__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTHTTP_FILTER_LOGToVariant(var R : THTTP_FILTER_LOG) : OleVariant;
var
__rw : __THTTP_FILTER_LOG__Wrapper__;
begin
__rw := __THTTP_FILTER_LOG__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTHTTP_FILTER_LOG(const V : OleVariant) : THTTP_FILTER_LOG;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := THTTP_FILTER_LOG((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __THTTP_FILTER_PREPROC_HEADERS__Wrapper__ = class(__THTTP_FILTER_PREPROC_HEADERS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __THTTP_FILTER_PREPROC_HEADERS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTHTTP_FILTER_PREPROC_HEADERSToVariant(var R : THTTP_FILTER_PREPROC_HEADERS) : OleVariant;
var
__rw : __THTTP_FILTER_PREPROC_HEADERS__Wrapper__;
begin
__rw := __THTTP_FILTER_PREPROC_HEADERS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTHTTP_FILTER_PREPROC_HEADERS(const V : OleVariant) : THTTP_FILTER_PREPROC_HEADERS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := THTTP_FILTER_PREPROC_HEADERS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __THTTP_FILTER_RAW_DATA__Wrapper__ = class(__THTTP_FILTER_RAW_DATA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __THTTP_FILTER_RAW_DATA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTHTTP_FILTER_RAW_DATAToVariant(var R : THTTP_FILTER_RAW_DATA) : OleVariant;
var
__rw : __THTTP_FILTER_RAW_DATA__Wrapper__;
begin
__rw := __THTTP_FILTER_RAW_DATA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTHTTP_FILTER_RAW_DATA(const V : OleVariant) : THTTP_FILTER_RAW_DATA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := THTTP_FILTER_RAW_DATA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __THTTP_FILTER_URL_MAP__Wrapper__ = class(__THTTP_FILTER_URL_MAP__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __THTTP_FILTER_URL_MAP__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTHTTP_FILTER_URL_MAPToVariant(var R : THTTP_FILTER_URL_MAP) : OleVariant;
var
__rw : __THTTP_FILTER_URL_MAP__Wrapper__;
begin
__rw := __THTTP_FILTER_URL_MAP__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTHTTP_FILTER_URL_MAP(const V : OleVariant) : THTTP_FILTER_URL_MAP;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := THTTP_FILTER_URL_MAP((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __THTTP_FILTER_VERSION__Wrapper__ = class(__THTTP_FILTER_VERSION__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __THTTP_FILTER_VERSION__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTHTTP_FILTER_VERSIONToVariant(var R : THTTP_FILTER_VERSION) : OleVariant;
var
__rw : __THTTP_FILTER_VERSION__Wrapper__;
begin
__rw := __THTTP_FILTER_VERSION__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTHTTP_FILTER_VERSION(const V : OleVariant) : THTTP_FILTER_VERSION;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := THTTP_FILTER_VERSION((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..56] of string = (
'HSE_VERSION_MAJOR'
,'HSE_VERSION_MINOR'
,'HSE_LOG_BUFFER_LEN'
,'HSE_MAX_EXT_DLL_NAME_LEN'
,'HSE_STATUS_SUCCESS'
,'HSE_STATUS_SUCCESS_AND_KEEP_CONN'
,'HSE_STATUS_PENDING'
,'HSE_STATUS_ERROR'
,'HSE_REQ_BASE'
,'HSE_REQ_SEND_URL_REDIRECT_RESP'
,'HSE_REQ_SEND_URL'
,'HSE_REQ_SEND_RESPONSE_HEADER'
,'HSE_REQ_DONE_WITH_SESSION'
,'HSE_REQ_END_RESERVED'
,'HSE_REQ_MAP_URL_TO_PATH'
,'HSE_REQ_GET_SSPI_INFO'
,'HSE_APPEND_LOG_PARAMETER'
,'HSE_REQ_SEND_URL_EX'
,'HSE_REQ_IO_COMPLETION'
,'HSE_REQ_TRANSMIT_FILE'
,'HSE_REQ_REFRESH_ISAPI_ACL'
,'HSE_TERM_ADVISORY_UNLOAD'
,'HSE_TERM_MUST_UNLOAD'
,'HTTP_FILTER_REVISION'
,'SF_MAX_USERNAME'
,'SF_MAX_PASSWORD'
,'SF_MAX_FILTER_DESC_LEN'
,'SF_REQ_SEND_RESPONSE_HEADER'
,'SF_REQ_ADD_HEADERS_ON_DENIAL'
,'SF_REQ_SET_NEXT_READ_SIZE'
,'SF_REQ_SET_PROXY_INFO'
,'SF_STATUS_REQ_FINISHED'
,'SF_STATUS_REQ_FINISHED_KEEP_CONN'
,'SF_STATUS_REQ_NEXT_NOTIFICATION'
,'SF_STATUS_REQ_HANDLED_NOTIFICATION'
,'SF_STATUS_REQ_ERROR'
,'SF_STATUS_REQ_READ_NEXT'
,'SF_DENIED_LOGON'
,'SF_DENIED_RESOURCE'
,'SF_DENIED_FILTER'
,'SF_DENIED_APPLICATION'
,'SF_DENIED_BY_CONFIG'
,'SF_NOTIFY_SECURE_PORT'
,'SF_NOTIFY_NONSECURE_PORT'
,'SF_NOTIFY_READ_RAW_DATA'
,'SF_NOTIFY_PREPROC_HEADERS'
,'SF_NOTIFY_AUTHENTICATION'
,'SF_NOTIFY_URL_MAP'
,'SF_NOTIFY_ACCESS_DENIED'
,'SF_NOTIFY_SEND_RAW_DATA'
,'SF_NOTIFY_LOG'
,'SF_NOTIFY_END_OF_NET_SESSION'
,'SF_NOTIFY_ORDER_HIGH'
,'SF_NOTIFY_ORDER_MEDIUM'
,'SF_NOTIFY_ORDER_LOW'
,'SF_NOTIFY_ORDER_DEFAULT'
,'SF_NOTIFY_ORDER_MASK'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,HSE_VERSION_MAJOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,HSE_VERSION_MINOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,HSE_LOG_BUFFER_LEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,HSE_MAX_EXT_DLL_NAME_LEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,HSE_STATUS_SUCCESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,HSE_STATUS_SUCCESS_AND_KEEP_CONN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,HSE_STATUS_PENDING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,HSE_STATUS_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,HSE_REQ_BASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,HSE_REQ_SEND_URL_REDIRECT_RESP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,HSE_REQ_SEND_URL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,HSE_REQ_SEND_RESPONSE_HEADER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,HSE_REQ_DONE_WITH_SESSION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,HSE_REQ_END_RESERVED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,HSE_REQ_MAP_URL_TO_PATH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,HSE_REQ_GET_SSPI_INFO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,HSE_APPEND_LOG_PARAMETER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,HSE_REQ_SEND_URL_EX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,HSE_REQ_IO_COMPLETION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,HSE_REQ_TRANSMIT_FILE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,HSE_REQ_REFRESH_ISAPI_ACL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,HSE_TERM_ADVISORY_UNLOAD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,HSE_TERM_MUST_UNLOAD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,HTTP_FILTER_REVISION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,SF_MAX_USERNAME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,SF_MAX_PASSWORD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,SF_MAX_FILTER_DESC_LEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,SF_REQ_SEND_RESPONSE_HEADER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,SF_REQ_ADD_HEADERS_ON_DENIAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,SF_REQ_SET_NEXT_READ_SIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,SF_REQ_SET_PROXY_INFO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,SF_STATUS_REQ_FINISHED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,SF_STATUS_REQ_FINISHED_KEEP_CONN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,SF_STATUS_REQ_NEXT_NOTIFICATION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,SF_STATUS_REQ_HANDLED_NOTIFICATION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,SF_STATUS_REQ_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,SF_STATUS_REQ_READ_NEXT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,SF_DENIED_LOGON));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,SF_DENIED_RESOURCE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,SF_DENIED_FILTER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,SF_DENIED_APPLICATION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,SF_DENIED_BY_CONFIG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,SF_NOTIFY_SECURE_PORT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,SF_NOTIFY_NONSECURE_PORT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,SF_NOTIFY_READ_RAW_DATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,SF_NOTIFY_PREPROC_HEADERS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,SF_NOTIFY_AUTHENTICATION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,SF_NOTIFY_URL_MAP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,SF_NOTIFY_ACCESS_DENIED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,SF_NOTIFY_SEND_RAW_DATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,SF_NOTIFY_LOG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,SF_NOTIFY_END_OF_NET_SESSION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,SF_NOTIFY_ORDER_HIGH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,SF_NOTIFY_ORDER_MEDIUM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,SF_NOTIFY_ORDER_LOW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,SF_NOTIFY_ORDER_DEFAULT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,SF_NOTIFY_ORDER_MASK));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..17] of string = (
'HSE_VERSION_INFO'
,'HTTP_FILTER_ACCESS_DENIED'
,'HTTP_FILTER_AUTHENT'
,'HTTP_FILTER_LOG'
,'HTTP_FILTER_RAW_DATA'
,'HTTP_FILTER_URL_MAP'
,'HTTP_FILTER_VERSION'
,'TEXTENSION_CONTROL_BLOCK'
,'THSE_TF_INFO'
,'THSE_VERSION_INFO'
,'THTTP_FILTER_ACCESS_DENIED'
,'THTTP_FILTER_AUTHENT'
,'THTTP_FILTER_CONTEXT'
,'THTTP_FILTER_LOG'
,'THTTP_FILTER_PREPROC_HEADERS'
,'THTTP_FILTER_RAW_DATA'
,'THTTP_FILTER_URL_MAP'
,'THTTP_FILTER_VERSION'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_HSE_VERSION_INFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_HTTP_FILTER_ACCESS_DENIED_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_HTTP_FILTER_AUTHENT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(_HTTP_FILTER_LOG_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(_HTTP_FILTER_RAW_DATA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[5],Addr(_HTTP_FILTER_URL_MAP_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[6],Addr(_HTTP_FILTER_VERSION_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[7],Addr(_TEXTENSION_CONTROL_BLOCK_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[8],Addr(_THSE_TF_INFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[9],Addr(_THSE_VERSION_INFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[10],Addr(_THTTP_FILTER_ACCESS_DENIED_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[11],Addr(_THTTP_FILTER_AUTHENT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[12],Addr(_THTTP_FILTER_CONTEXT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[13],Addr(_THTTP_FILTER_LOG_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[14],Addr(_THTTP_FILTER_PREPROC_HEADERS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[15],Addr(_THTTP_FILTER_RAW_DATA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[16],Addr(_THTTP_FILTER_URL_MAP_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[17],Addr(_THTTP_FILTER_VERSION_)));
end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
