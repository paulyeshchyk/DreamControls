{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit ZLIB_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Classes,
  ZLib;
function ConvertTZStreamRecToVariant(var R : TZStreamRec) : OleVariant;
function ConvertVariantToTZStreamRec(const V : OleVariant) : TZStreamRec;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TZStreamRec__Wrapper = class(TDCRecordWrapper)
private
fR : TZStreamRec;
public
function GetRecordPtr : pointer; override;
published
procedure setavail_in(const val : Integer);
function getavail_in : Integer;
property avail_in : Integer read getavail_in write setavail_in;
procedure settotal_in(const val : Integer);
function gettotal_in : Integer;
property total_in : Integer read gettotal_in write settotal_in;
procedure setavail_out(const val : Integer);
function getavail_out : Integer;
property avail_out : Integer read getavail_out write setavail_out;
procedure settotal_out(const val : Integer);
function gettotal_out : Integer;
property total_out : Integer read gettotal_out write settotal_out;
procedure setdata_type(const val : Integer);
function getdata_type : Integer;
property data_type : Integer read getdata_type write setdata_type;
procedure setadler(const val : Integer);
function getadler : Integer;
property adler : Integer read getadler write setadler;
procedure setreserved(const val : Integer);
function getreserved : Integer;
property reserved : Integer read getreserved write setreserved;
end;
type
_T0 = procedure (const p0 : Pointer;
p1 : Integer;
out p2 : Pointer;
out p3 : Integer) of object;

_T1 = procedure (const p0 : Pointer;
p1 : Integer;
p2 : Integer;
out p3 : Pointer;
out p4 : Integer) of object;

_T2 = procedure (const p0 : Pointer;
p1 : Integer;
const p2 : Pointer;
p3 : Integer) of object;

_T3 = function (p0 : Pointer;
p1 : Integer;
p2 : Integer): Pointer of object;

_T4 = procedure (p0 : Pointer;
p1 : Pointer) of object;

_T6 = function (const p0 : IDispatch;
p1 : Integer): Integer of object;

_T7 = function (const p0 : IDispatch): Integer of object;

_T9 = _T6;

_T10 = _T7;

_T11 = _T7;

_T12 = procedure (p0 : TCompressionLevel;
p1 : TStream) of object;

_T13 = procedure (p0 : TObject) of object;

_T14 = procedure (p0 : TStream) of object;

function __TZStreamRec__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TZStreamRec__Wrapper.setavail_in(const val : Integer);
begin
TZStreamRec(GetRecordPtr^).avail_in := val;
end;
function __TZStreamRec__Wrapper.getavail_in : Integer;
begin
result := TZStreamRec(GetRecordPtr^).avail_in;
end;
procedure __TZStreamRec__Wrapper.settotal_in(const val : Integer);
begin
TZStreamRec(GetRecordPtr^).total_in := val;
end;
function __TZStreamRec__Wrapper.gettotal_in : Integer;
begin
result := TZStreamRec(GetRecordPtr^).total_in;
end;
procedure __TZStreamRec__Wrapper.setavail_out(const val : Integer);
begin
TZStreamRec(GetRecordPtr^).avail_out := val;
end;
function __TZStreamRec__Wrapper.getavail_out : Integer;
begin
result := TZStreamRec(GetRecordPtr^).avail_out;
end;
procedure __TZStreamRec__Wrapper.settotal_out(const val : Integer);
begin
TZStreamRec(GetRecordPtr^).total_out := val;
end;
function __TZStreamRec__Wrapper.gettotal_out : Integer;
begin
result := TZStreamRec(GetRecordPtr^).total_out;
end;
procedure __TZStreamRec__Wrapper.setdata_type(const val : Integer);
begin
TZStreamRec(GetRecordPtr^).data_type := val;
end;
function __TZStreamRec__Wrapper.getdata_type : Integer;
begin
result := TZStreamRec(GetRecordPtr^).data_type;
end;
procedure __TZStreamRec__Wrapper.setadler(const val : Integer);
begin
TZStreamRec(GetRecordPtr^).adler := val;
end;
function __TZStreamRec__Wrapper.getadler : Integer;
begin
result := TZStreamRec(GetRecordPtr^).adler;
end;
procedure __TZStreamRec__Wrapper.setreserved(const val : Integer);
begin
TZStreamRec(GetRecordPtr^).reserved := val;
end;
function __TZStreamRec__Wrapper.getreserved : Integer;
begin
result := TZStreamRec(GetRecordPtr^).reserved;
end;
function _TZStreamRec_ : IDispatch;
begin
  result := __TZStreamRec__Wrapper.Create;
end;
function ____deflate__Wrapper(const p0 : IDispatch;
p1 : Integer): Integer;
var
__p0 : ^TZStreamRec;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := deflate(__p0^,p1);
end;

function ____deflateEnd__Wrapper(const p0 : IDispatch): Integer;
var
__p0 : ^TZStreamRec;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := deflateEnd(__p0^);
end;

function ____inflate__Wrapper(const p0 : IDispatch;
p1 : Integer): Integer;
var
__p0 : ^TZStreamRec;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := inflate(__p0^,p1);
end;

function ____inflateEnd__Wrapper(const p0 : IDispatch): Integer;
var
__p0 : ^TZStreamRec;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := inflateEnd(__p0^);
end;

function ____inflateReset__Wrapper(const p0 : IDispatch): Integer;
var
__p0 : ^TZStreamRec;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := inflateReset(__p0^);
end;


type __TZStreamRec__Wrapper__ = class(__TZStreamRec__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TZStreamRec__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTZStreamRecToVariant(var R : TZStreamRec) : OleVariant;
var
__rw : __TZStreamRec__Wrapper__;
begin
__rw := __TZStreamRec__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTZStreamRec(const V : OleVariant) : TZStreamRec;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TZStreamRec((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTCompressionStream__CompressionRate(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCompressionStream(Instance).CompressionRate;
end;

procedure __RegisterProps;
begin
RegisterProperty(TCompressionStream,'CompressionRate',__DC__GetTCompressionStream__CompressionRate,nil);
end;

const __ConstNames0 : array[0..29] of string = (
'clNone'
,'clFastest'
,'clDefault'
,'clMax'
,'zlib_Version'
,'Z_NO_FLUSH'
,'Z_PARTIAL_FLUSH'
,'Z_SYNC_FLUSH'
,'Z_FULL_FLUSH'
,'Z_FINISH'
,'Z_OK'
,'Z_STREAM_END'
,'Z_NEED_DICT'
,'Z_ERRNO'
,'Z_STREAM_ERROR'
,'Z_DATA_ERROR'
,'Z_MEM_ERROR'
,'Z_BUF_ERROR'
,'Z_VERSION_ERROR'
,'Z_NO_COMPRESSION'
,'Z_BEST_SPEED'
,'Z_BEST_COMPRESSION'
,'Z_DEFAULT_COMPRESSION'
,'Z_FILTERED'
,'Z_HUFFMAN_ONLY'
,'Z_DEFAULT_STRATEGY'
,'Z_BINARY'
,'Z_ASCII'
,'Z_UNKNOWN'
,'Z_DEFLATED'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,clNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,clFastest));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,clDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,clMax));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,zlib_Version));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,Z_NO_FLUSH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,Z_PARTIAL_FLUSH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,Z_SYNC_FLUSH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,Z_FULL_FLUSH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,Z_FINISH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,Z_OK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,Z_STREAM_END));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,Z_NEED_DICT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,Z_ERRNO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,Z_STREAM_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,Z_DATA_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,Z_MEM_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,Z_BUF_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,Z_VERSION_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,Z_NO_COMPRESSION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,Z_BEST_SPEED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,Z_BEST_COMPRESSION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,Z_DEFAULT_COMPRESSION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,Z_FILTERED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,Z_HUFFMAN_ONLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,Z_DEFAULT_STRATEGY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,Z_BINARY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,Z_ASCII));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,Z_UNKNOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,Z_DEFLATED));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..5] of TClass = (
ECompressionError,
EDecompressionError,
EZlibError,
TCompressionStream,
TCustomZlibStream,
TDecompressionStream
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..10] of string = (
'TZStreamRec'
,'CompressBuf'
,'DecompressBuf'
,'DecompressToUserBuf'
,'zlibAllocMem'
,'zlibFreeMem'
,'deflate'
,'deflateEnd'
,'inflate'
,'inflateEnd'
,'inflateReset'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TZStreamRec_)));
RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T0),[
TypeInfoPointer,
TypeInfo(Integer),
TypeInfoPointer,
TypeInfo(Integer)],Addr(CompressBuf),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T1),[
TypeInfoPointer,
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfoPointer,
TypeInfo(Integer)],Addr(DecompressBuf),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T2),[
TypeInfoPointer,
TypeInfo(Integer),
TypeInfoPointer,
TypeInfo(Integer)],Addr(DecompressToUserBuf),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T3),[
TypeInfoPointer,
TypeInfo(Integer),
TypeInfo(Integer),TypeInfoPointer],Addr(zlibAllocMem),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T4),[
TypeInfoPointer,
TypeInfoPointer],Addr(zlibFreeMem),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T6),[
TypeInfo(IDispatch),
TypeInfo(Integer),TypeInfo(Integer)],Addr(____deflate__Wrapper),cRegister);

RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T7),[
TypeInfo(IDispatch),TypeInfo(Integer)],Addr(____deflateEnd__Wrapper),cRegister);

RegisterProc(nil,MethodNames[8],mtProc,TypeInfo(_T9),[
TypeInfo(IDispatch),
TypeInfo(Integer),TypeInfo(Integer)],Addr(____inflate__Wrapper),cRegister);

RegisterProc(nil,MethodNames[9],mtProc,TypeInfo(_T10),[
TypeInfo(IDispatch),TypeInfo(Integer)],Addr(____inflateEnd__Wrapper),cRegister);

RegisterProc(nil,MethodNames[10],mtProc,TypeInfo(_T11),[
TypeInfo(IDispatch),TypeInfo(Integer)],Addr(____inflateReset__Wrapper),cRegister);

RegisterProc(TCompressionStream,'Create',mtConstructor,TypeInfo(_T12),[
TypeInfo(TCompressionLevel),
TypeInfo(TStream)],Addr(TCompressionStream.Create),cRegister);

RegRegisterMethod(TCustomZlibStream,'Progress',TypeInfo(_T13),[
TypeInfo(TObject)], pointer(MinVMTOffset - 0));

RegisterProc(TDecompressionStream,'Create',mtConstructor,TypeInfo(_T14),[
TypeInfo(TStream)],Addr(TDecompressionStream.Create),cRegister);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
