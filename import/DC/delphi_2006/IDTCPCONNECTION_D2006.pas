{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDTCPCONNECTION_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdException,
  IdComponent,
  IdGlobal,
  IdSocketHandle,
  IdIntercept,
  IdIOHandler,
  IdRFCReply,
  IdIOHandlerSocket,
  IdTCPConnection;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
{_T0 = procedure (p0 : TIdBufferBytesRemoved) of object;}

_T1 = procedure  of object;

_T2 = function : Pointer of object;

_T3 = _T1;

{_T4 = procedure (p0 : TIdBufferBytesRemoved) of object;}

_T5 = function (const p0 : Integer): string of object;

_T6 = procedure (const p0 : Integer) of object;

_T7 = _T1;

_T8 = _T1;

_T9 = function : string of object;

_T10 = _T1;

_T11 = procedure (p0 : TStream;
const p1 : string;
const p2 : Boolean) of object;

_T12 = procedure (const p0 : Boolean;
const p1 : Boolean) of object;

_T13 = procedure (const p0 : Boolean) of object;

_T14 = function (const p0 : SmallInt;
const p1 : Array of SmallInt): SmallInt of object;

_T15 = _T1;

_T16 = _T1;

_T17 = function : Boolean of object;

_T18 = _T9;

_T19 = _T1;

_T20 = _T1;

_T21 = _T6;

_T22 = _T1;

_T23 = function (const p0 : Array of SmallInt): SmallInt of object;

_T24 = function (const p0 : string;
p1 : Boolean;
p2 : Integer;
p3 : Integer): string of object;

_T25 = _T6;

_T26 = _T1;

_T27 = procedure (var p0;
const p1 : Longint) of object;

_T28 = function (const p0 : Boolean): Cardinal of object;

_T29 = function : Char of object;

_T30 = function (const p0 : Boolean;
p1 : Integer;
const p2 : Boolean): Integer of object;

_T31 = function (const p0 : Boolean): Integer of object;

_T32 = function (p0 : string;
const p1 : Integer;
p2 : Integer): string of object;

_T33 = function (p0 : Integer): string of object;

_T34 = function (const p0 : Boolean): SmallInt of object;

_T35 = procedure (p0 : TStream;
p1 : Longint;
const p2 : Boolean) of object;

_T36 = _T5;

_T37 = procedure (p0 : TStrings;
p1 : Integer) of object;

_T38 = function (const p0 : string;
const p1 : SmallInt): SmallInt of object;

_T39 = function (const p0 : string): string of object;

_T40 = procedure (const p0 : string) of object;

_T41 = procedure (const p0;
p1 : Longint;
const p2 : Boolean) of object;

_T42 = procedure (p0 : Cardinal;
const p1 : Boolean) of object;

_T43 = procedure (p0 : Char) of object;

_T44 = procedure (p0 : TStrings) of object;

_T45 = procedure (p0 : Integer;
const p1 : Boolean) of object;

_T46 = _T40;

_T47 = procedure (p0 : TIdRFCReply) of object;

_T48 = _T44;

_T49 = procedure (p0 : SmallInt;
const p1 : Boolean) of object;

_T50 = procedure (p0 : TStream;
const p1 : Boolean;
const p2 : Boolean;
const p3 : Integer) of object;

_T51 = procedure (p0 : TStrings;
const p1 : Boolean) of object;

_T52 = function (const p0 : string;
const p1 : Boolean): Cardinal of object;

procedure __TIdTCPConnection__Capture__Wrapper(__Instance : TIdTCPConnection;
p0 : TStream;
const p1 : string;
const p2 : Boolean);
begin
TIdTCPConnection(__Instance).Capture(p0,p1,p2);
end;

procedure __TIdTCPConnection__CheckForDisconnect__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
0:
begin
TIdTCPConnection(__Instance).CheckForDisconnect;
end;
1:
begin
TIdTCPConnection(__Instance).CheckForDisconnect(OleVariant(pargs^[0]));
end;
2:
begin
TIdTCPConnection(__Instance).CheckForDisconnect(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure __TIdTCPConnection__CheckForGracefulDisconnect__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
0:
begin
TIdTCPConnection(__Instance).CheckForGracefulDisconnect;
end;
1:
begin
TIdTCPConnection(__Instance).CheckForGracefulDisconnect(OleVariant(pargs^[0]));
end;
end
end;

procedure __TIdTCPConnection__FlushWriteBuffer__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
0:
begin
TIdTCPConnection(__Instance).FlushWriteBuffer;
end;
1:
begin
TIdTCPConnection(__Instance).FlushWriteBuffer(OleVariant(pargs^[0]));
end;
end
end;

function __TIdTCPConnection__InputLn__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
0:
begin
result := TIdTCPConnection(__Instance).InputLn;
end;
1:
begin
result := TIdTCPConnection(__Instance).InputLn(OleVariant(pargs^[0]));
end;
2:
begin
result := TIdTCPConnection(__Instance).InputLn(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
3:
begin
result := TIdTCPConnection(__Instance).InputLn(OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
4:
begin
result := TIdTCPConnection(__Instance).InputLn(OleVariant(pargs^[3]),OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure __TIdTCPConnection__OpenWriteBuffer__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
0:
begin
TIdTCPConnection(__Instance).OpenWriteBuffer;
end;
1:
begin
TIdTCPConnection(__Instance).OpenWriteBuffer(OleVariant(pargs^[0]));
end;
end
end;

function __TIdTCPConnection__ReadCardinal__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
0:
begin
result := TIdTCPConnection(__Instance).ReadCardinal;
end;
1:
begin
result := TIdTCPConnection(__Instance).ReadCardinal(OleVariant(pargs^[0]));
end;
end
end;

function __TIdTCPConnection__ReadFromStack__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
0:
begin
result := TIdTCPConnection(__Instance).ReadFromStack;
end;
1:
begin
result := TIdTCPConnection(__Instance).ReadFromStack(OleVariant(pargs^[0]));
end;
2:
begin
result := TIdTCPConnection(__Instance).ReadFromStack(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
3:
begin
result := TIdTCPConnection(__Instance).ReadFromStack(OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function __TIdTCPConnection__ReadInteger__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
0:
begin
result := TIdTCPConnection(__Instance).ReadInteger;
end;
1:
begin
result := TIdTCPConnection(__Instance).ReadInteger(OleVariant(pargs^[0]));
end;
end
end;

function __TIdTCPConnection__ReadLn__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
0:
begin
result := TIdTCPConnection(__Instance).ReadLn;
end;
1:
begin
result := TIdTCPConnection(__Instance).ReadLn(OleVariant(pargs^[0]));
end;
2:
begin
result := TIdTCPConnection(__Instance).ReadLn(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
3:
begin
result := TIdTCPConnection(__Instance).ReadLn(OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function __TIdTCPConnection__ReadLnWait__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
0:
begin
result := TIdTCPConnection(__Instance).ReadLnWait;
end;
1:
begin
result := TIdTCPConnection(__Instance).ReadLnWait(OleVariant(pargs^[0]));
end;
end
end;

function __TIdTCPConnection__ReadSmallInt__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
0:
begin
result := TIdTCPConnection(__Instance).ReadSmallInt;
end;
1:
begin
result := TIdTCPConnection(__Instance).ReadSmallInt(OleVariant(pargs^[0]));
end;
end
end;

procedure __TIdTCPConnection__ReadStream__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
TIdTCPConnection(__Instance).ReadStream(TStream(VarToObject(OleVariant(pargs^[0]))));
end;
2:
begin
TIdTCPConnection(__Instance).ReadStream(TStream(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
end;
3:
begin
TIdTCPConnection(__Instance).ReadStream(TStream(VarToObject(OleVariant(pargs^[2]))),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure __TIdTCPConnection__ReadStrings__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
TIdTCPConnection(__Instance).ReadStrings(TStrings(VarToObject(OleVariant(pargs^[0]))));
end;
2:
begin
TIdTCPConnection(__Instance).ReadStrings(TStrings(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
end;
end
end;

function __TIdTCPConnection__SendCmd__Wrapper(__Instance : TIdTCPConnection;
const p0 : string;
const p1 : SmallInt): SmallInt;
begin
result := TIdTCPConnection(__Instance).SendCmd(p0,p1);
end;

procedure __TIdTCPConnection__WriteBuffer__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
2:
begin
TIdTCPConnection(__Instance).WriteBuffer(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
3:
begin
TIdTCPConnection(__Instance).WriteBuffer(OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure __TIdTCPConnection__WriteCardinal__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
TIdTCPConnection(__Instance).WriteCardinal(OleVariant(pargs^[0]));
end;
2:
begin
TIdTCPConnection(__Instance).WriteCardinal(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure __TIdTCPConnection__WriteInteger__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
TIdTCPConnection(__Instance).WriteInteger(OleVariant(pargs^[0]));
end;
2:
begin
TIdTCPConnection(__Instance).WriteInteger(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure __TIdTCPConnection__WriteLn__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
0:
begin
TIdTCPConnection(__Instance).WriteLn;
end;
1:
begin
TIdTCPConnection(__Instance).WriteLn(OleVariant(pargs^[0]));
end;
end
end;

procedure __TIdTCPConnection__WriteSmallInt__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
TIdTCPConnection(__Instance).WriteSmallInt(OleVariant(pargs^[0]));
end;
2:
begin
TIdTCPConnection(__Instance).WriteSmallInt(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure __TIdTCPConnection__WriteStream__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
TIdTCPConnection(__Instance).WriteStream(TStream(VarToObject(OleVariant(pargs^[0]))));
end;
2:
begin
TIdTCPConnection(__Instance).WriteStream(TStream(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
end;
3:
begin
TIdTCPConnection(__Instance).WriteStream(TStream(VarToObject(OleVariant(pargs^[2]))),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
4:
begin
TIdTCPConnection(__Instance).WriteStream(TStream(VarToObject(OleVariant(pargs^[3]))),OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure __TIdTCPConnection__WriteStrings__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
TIdTCPConnection(__Instance).WriteStrings(TStrings(VarToObject(OleVariant(pargs^[0]))));
end;
2:
begin
TIdTCPConnection(__Instance).WriteStrings(TStrings(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
end;
end
end;

function __TIdTCPConnection__WriteFile__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := TIdTCPConnection(__Instance).WriteFile(OleVariant(pargs^[0]));
end;
2:
begin
result := TIdTCPConnection(__Instance).WriteFile(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function __DC__GetTIdManagedBuffer__PackReadedSize(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdManagedBuffer(Instance).PackReadedSize;
end;

procedure __DC__SetTIdManagedBuffer__PackReadedSize(Instance : TObject; Params : PVariantArgList);
begin
TIdManagedBuffer(Instance).PackReadedSize:=OleVariant(Params^[0]);
end;

function __DC__GetTIdTCPConnection__Greeting(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdTCPConnection(Instance).Greeting);
end;

procedure __DC__SetTIdTCPConnection__Greeting(Instance : TObject; Params : PVariantArgList);
begin
TIdTCPConnection(Instance).Greeting:=TIdRFCReply(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIdTCPConnection__ClosedGracefully(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdTCPConnection(Instance).ClosedGracefully;
end;

function __DC__GetTIdTCPConnection__InputBuffer(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdTCPConnection(Instance).InputBuffer);
end;

function __DC__GetTIdTCPConnection__LastCmdResult(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdTCPConnection(Instance).LastCmdResult);
end;

function __DC__GetTIdTCPConnection__ReadLnSplit(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdTCPConnection(Instance).ReadLnSplit;
end;

function __DC__GetTIdTCPConnection__ReadLnTimedOut(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdTCPConnection(Instance).ReadLnTimedOut;
end;

function __DC__GetTIdTCPConnection__Socket(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdTCPConnection(Instance).Socket);
end;

procedure __RegisterProps;
begin
RegisterProperty(TIdManagedBuffer,'PackReadedSize',__DC__GetTIdManagedBuffer__PackReadedSize,__DC__SetTIdManagedBuffer__PackReadedSize);
RegisterProperty(TIdTCPConnection,'Greeting',__DC__GetTIdTCPConnection__Greeting,__DC__SetTIdTCPConnection__Greeting);
RegisterProperty(TIdTCPConnection,'ClosedGracefully',__DC__GetTIdTCPConnection__ClosedGracefully,nil);
RegisterProperty(TIdTCPConnection,'InputBuffer',__DC__GetTIdTCPConnection__InputBuffer,nil);
RegisterProperty(TIdTCPConnection,'LastCmdResult',__DC__GetTIdTCPConnection__LastCmdResult,nil);
RegisterProperty(TIdTCPConnection,'ReadLnSplit',__DC__GetTIdTCPConnection__ReadLnSplit,nil);
RegisterProperty(TIdTCPConnection,'ReadLnTimedOut',__DC__GetTIdTCPConnection__ReadLnTimedOut,nil);
RegisterProperty(TIdTCPConnection,'Socket',__DC__GetTIdTCPConnection__Socket,nil);
end;

const __ConstNames0 : array[0..4] of string = (
'GRecvBufferSizeDefault'
,'GSendBufferSizeDefault'
,'IdMaxLineLengthDefault'
,'IdInBufCacheSizeDefault'
,'IdDefTimeout'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,GRecvBufferSizeDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,GSendBufferSizeDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,IdMaxLineLengthDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,IdInBufCacheSizeDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,IdDefTimeout));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..11] of TClass = (
EIdFileNotFound,
EIdInterceptPropInvalid,
EIdInterceptPropIsNil,
EIdIOHandlerPropInvalid,
EIdNoDataToRead,
EIdNotConnected,
EIdNotEnoughDataInBuffer,
EIdObjectTypeNotSupported,
EIdTCPConnectionError,
TIdManagedBuffer,
TIdSimpleBuffer,
TIdTCPConnection
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegRegisterMethod(TIdManagedBuffer,'Clear',TypeInfo(_T1),NoParams,Addr(TIdManagedBuffer.Clear));

RegRegisterMethod(TIdManagedBuffer,'Memory',TypeInfo(_T2),[TypeInfoPointer],Addr(TIdManagedBuffer.Memory));

RegRegisterMethod(TIdManagedBuffer,'PackBuffer',TypeInfo(_T3),NoParams,Addr(TIdManagedBuffer.PackBuffer));

//RegRegisterMethod(TIdSimpleBuffer,'Extract',TypeInfo(_T5),[TypeInfo(Integer),TypeInfo(string)], pointer(32));
RegRegisterMethod(TIdSimpleBuffer,'Extract',TypeInfo(_T5),[TypeInfo(Integer),TypeInfo(string)],  getVMTProcAddr('TIdSimpleBuffer','Extract',32));


//RegRegisterMethod(TIdSimpleBuffer,'Remove',TypeInfo(_T6),[TypeInfo(Integer)], pointer(36));
RegRegisterMethod(TIdSimpleBuffer,'Remove',TypeInfo(_T6),[TypeInfo(Integer)],  getVMTProcAddr('TIdSimpleBuffer','Remove',36));


//RegRegisterMethod(TIdTCPConnection,'DoOnDisconnected',TypeInfo(_T7),NoParams, pointer(60));
RegRegisterMethod(TIdTCPConnection,'DoOnDisconnected',TypeInfo(_T7),NoParams,  getVMTProcAddr('TIdTCPConnection','DoOnDisconnected',60));


//RegRegisterMethod(TIdTCPConnection,'ResetConnection',TypeInfo(_T8),NoParams, pointer(64));
RegRegisterMethod(TIdTCPConnection,'ResetConnection',TypeInfo(_T8),NoParams,  getVMTProcAddr('TIdTCPConnection','ResetConnection',64));


//RegRegisterMethod(TIdTCPConnection,'AllData',TypeInfo(_T9),[TypeInfo(string)], pointer(68));
RegRegisterMethod(TIdTCPConnection,'AllData',TypeInfo(_T9),[TypeInfo(string)],  getVMTProcAddr('TIdTCPConnection','AllData',68));


RegRegisterMethod(TIdTCPConnection,'CancelWriteBuffer',TypeInfo(_T10),NoParams,Addr(TIdTCPConnection.CancelWriteBuffer));

RegRegisterMethod(TIdTCPConnection,'Capture',TypeInfo(_T11),[
TypeInfo(TStream),
TypeInfo(string),
TypeInfo(Boolean)],Addr(__TIdTCPConnection__Capture__Wrapper));

RegisterProc(TIdTCPConnection,'CheckForDisconnect',mtScriptMethod,TypeInfo(_T12),[
TypeInfo(Boolean),
TypeInfo(Boolean)],Addr(__TIdTCPConnection__CheckForDisconnect__Wrapper),cRegister);

RegisterProc(TIdTCPConnection,'CheckForGracefulDisconnect',mtScriptMethod,TypeInfo(_T13),[
TypeInfo(Boolean)],Addr(__TIdTCPConnection__CheckForGracefulDisconnect__Wrapper),cRegister);

//RegRegisterMethod(TIdTCPConnection,'CheckResponse',TypeInfo(_T14),[TypeInfo(SmallInt),ArrayInfo(TypeInfo(SmallInt)),TypeInfo(SmallInt)], pointer(80));
RegRegisterMethod(TIdTCPConnection,'CheckResponse',TypeInfo(_T14),[TypeInfo(SmallInt),ArrayInfo(TypeInfo(SmallInt)),TypeInfo(SmallInt)],  getVMTProcAddr('TIdTCPConnection','CheckResponse',80));


RegRegisterMethod(TIdTCPConnection,'ClearWriteBuffer',TypeInfo(_T15),NoParams,Addr(TIdTCPConnection.ClearWriteBuffer));

RegRegisterMethod(TIdTCPConnection,'CloseWriteBuffer',TypeInfo(_T16),NoParams,Addr(TIdTCPConnection.CloseWriteBuffer));

//RegRegisterMethod(TIdTCPConnection,'Connected',TypeInfo(_T17),[TypeInfo(Boolean)], pointer(84));
RegRegisterMethod(TIdTCPConnection,'Connected',TypeInfo(_T17),[TypeInfo(Boolean)],  getVMTProcAddr('TIdTCPConnection','Connected',84));


RegRegisterMethod(TIdTCPConnection,'CurrentReadBuffer',TypeInfo(_T18),[TypeInfo(string)],Addr(TIdTCPConnection.CurrentReadBuffer));

//RegRegisterMethod(TIdTCPConnection,'Disconnect',TypeInfo(_T19),NoParams, pointer(88));
RegRegisterMethod(TIdTCPConnection,'Disconnect',TypeInfo(_T19),NoParams,  getVMTProcAddr('TIdTCPConnection','Disconnect',88));


//RegRegisterMethod(TIdTCPConnection,'DisconnectSocket',TypeInfo(_T20),NoParams, pointer(92));
RegRegisterMethod(TIdTCPConnection,'DisconnectSocket',TypeInfo(_T20),NoParams,  getVMTProcAddr('TIdTCPConnection','DisconnectSocket',92));


RegisterProc(TIdTCPConnection,'FlushWriteBuffer',mtScriptMethod,TypeInfo(_T21),[
TypeInfo(Integer)],Addr(__TIdTCPConnection__FlushWriteBuffer__Wrapper),cRegister);

RegRegisterMethod(TIdTCPConnection,'GetInternalResponse',TypeInfo(_T22),NoParams,Addr(TIdTCPConnection.GetInternalResponse));

//RegRegisterMethod(TIdTCPConnection,'GetResponse',TypeInfo(_T23),[ArrayInfo(TypeInfo(SmallInt)),TypeInfo(SmallInt)], pointer(96));
RegRegisterMethod(TIdTCPConnection,'GetResponse',TypeInfo(_T23),[ArrayInfo(TypeInfo(SmallInt)),TypeInfo(SmallInt)],  getVMTProcAddr('TIdTCPConnection','GetResponse',96));


RegisterProc(TIdTCPConnection,'InputLn',mtScriptMethod,TypeInfo(_T24),[
TypeInfo(string),
TypeInfo(Boolean),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(string)],Addr(__TIdTCPConnection__InputLn__Wrapper),cRegister);

RegisterProc(TIdTCPConnection,'OpenWriteBuffer',mtScriptMethod,TypeInfo(_T25),[
TypeInfo(Integer)],Addr(__TIdTCPConnection__OpenWriteBuffer__Wrapper),cRegister);

//RegRegisterMethod(TIdTCPConnection,'RaiseExceptionForLastCmdResult',TypeInfo(_T26),NoParams, pointer(100));
RegRegisterMethod(TIdTCPConnection,'RaiseExceptionForLastCmdResult',TypeInfo(_T26),NoParams,  getVMTProcAddr('TIdTCPConnection','RaiseExceptionForLastCmdResult',100));


RegRegisterMethod(TIdTCPConnection,'ReadBuffer',TypeInfo(_T27),[
TypeInfoUntyped,
TypeInfo(Longint)],Addr(TIdTCPConnection.ReadBuffer));

RegisterProc(TIdTCPConnection,'ReadCardinal',mtScriptMethod,TypeInfo(_T28),[
TypeInfo(Boolean),TypeInfo(Cardinal)],Addr(__TIdTCPConnection__ReadCardinal__Wrapper),cRegister);

RegRegisterMethod(TIdTCPConnection,'ReadChar',TypeInfo(_T29),[TypeInfo(Char)],Addr(TIdTCPConnection.ReadChar));

RegisterProc(TIdTCPConnection,'ReadFromStack',mtScriptMethod,TypeInfo(_T30),[
TypeInfo(Boolean),
TypeInfo(Integer),
TypeInfo(Boolean),TypeInfo(Integer)],Addr(__TIdTCPConnection__ReadFromStack__Wrapper),cRegister);

RegisterProc(TIdTCPConnection,'ReadInteger',mtScriptMethod,TypeInfo(_T31),[
TypeInfo(Boolean),TypeInfo(Integer)],Addr(__TIdTCPConnection__ReadInteger__Wrapper),cRegister);

RegisterProc(TIdTCPConnection,'ReadLn',mtScriptMethod,TypeInfo(_T32),[
TypeInfo(string),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(string)],Addr(__TIdTCPConnection__ReadLn__Wrapper),cRegister);

RegisterProc(TIdTCPConnection,'ReadLnWait',mtScriptMethod,TypeInfo(_T33),[
TypeInfo(Integer),TypeInfo(string)],Addr(__TIdTCPConnection__ReadLnWait__Wrapper),cRegister);

RegisterProc(TIdTCPConnection,'ReadSmallInt',mtScriptMethod,TypeInfo(_T34),[
TypeInfo(Boolean),TypeInfo(SmallInt)],Addr(__TIdTCPConnection__ReadSmallInt__Wrapper),cRegister);

RegisterProc(TIdTCPConnection,'ReadStream',mtScriptMethod,TypeInfo(_T35),[
TypeInfo(TStream),
TypeInfo(Longint),
TypeInfo(Boolean)],Addr(__TIdTCPConnection__ReadStream__Wrapper),cRegister);

RegRegisterMethod(TIdTCPConnection,'ReadString',TypeInfo(_T36),[
TypeInfo(Integer),TypeInfo(string)],Addr(TIdTCPConnection.ReadString));

RegisterProc(TIdTCPConnection,'ReadStrings',mtScriptMethod,TypeInfo(_T37),[
TypeInfo(TStrings),
TypeInfo(Integer)],Addr(__TIdTCPConnection__ReadStrings__Wrapper),cRegister);

RegRegisterMethod(TIdTCPConnection,'SendCmd',TypeInfo(_T38),[
TypeInfo(string),
TypeInfo(SmallInt),TypeInfo(SmallInt)],Addr(__TIdTCPConnection__SendCmd__Wrapper));

RegRegisterMethod(TIdTCPConnection,'WaitFor',TypeInfo(_T39),[
TypeInfo(string),TypeInfo(string)],Addr(TIdTCPConnection.WaitFor));

//RegRegisterMethod(TIdTCPConnection,'Write',TypeInfo(_T40),[TypeInfo(string)], pointer(120));
RegRegisterMethod(TIdTCPConnection,'Write',TypeInfo(_T40),[TypeInfo(string)],  getVMTProcAddr('TIdTCPConnection','Write',120));


RegisterProc(TIdTCPConnection,'WriteBuffer',mtScriptMethod,TypeInfo(_T41),[
TypeInfoUntyped,
TypeInfo(Longint),
TypeInfo(Boolean)],Addr(__TIdTCPConnection__WriteBuffer__Wrapper),cRegister);

RegisterProc(TIdTCPConnection,'WriteCardinal',mtScriptMethod,TypeInfo(_T42),[
TypeInfo(Cardinal),
TypeInfo(Boolean)],Addr(__TIdTCPConnection__WriteCardinal__Wrapper),cRegister);

RegRegisterMethod(TIdTCPConnection,'WriteChar',TypeInfo(_T43),[
TypeInfo(Char)],Addr(TIdTCPConnection.WriteChar));

RegRegisterMethod(TIdTCPConnection,'WriteHeader',TypeInfo(_T44),[
TypeInfo(TStrings)],Addr(TIdTCPConnection.WriteHeader));

RegisterProc(TIdTCPConnection,'WriteInteger',mtScriptMethod,TypeInfo(_T45),[
TypeInfo(Integer),
TypeInfo(Boolean)],Addr(__TIdTCPConnection__WriteInteger__Wrapper),cRegister);

RegisterProc(TIdTCPConnection,'WriteLn',mtScriptMethod,TypeInfo(_T46),[
TypeInfo(string)],Addr(__TIdTCPConnection__WriteLn__Wrapper),cRegister);

RegRegisterMethod(TIdTCPConnection,'WriteRFCReply',TypeInfo(_T47),[
TypeInfo(TIdRFCReply)],Addr(TIdTCPConnection.WriteRFCReply));

RegRegisterMethod(TIdTCPConnection,'WriteRFCStrings',TypeInfo(_T48),[
TypeInfo(TStrings)],Addr(TIdTCPConnection.WriteRFCStrings));

RegisterProc(TIdTCPConnection,'WriteSmallInt',mtScriptMethod,TypeInfo(_T49),[
TypeInfo(SmallInt),
TypeInfo(Boolean)],Addr(__TIdTCPConnection__WriteSmallInt__Wrapper),cRegister);

RegisterProc(TIdTCPConnection,'WriteStream',mtScriptMethod,TypeInfo(_T50),[
TypeInfo(TStream),
TypeInfo(Boolean),
TypeInfo(Boolean),
TypeInfo(Integer)],Addr(__TIdTCPConnection__WriteStream__Wrapper),cRegister);

RegisterProc(TIdTCPConnection,'WriteStrings',mtScriptMethod,TypeInfo(_T51),[
TypeInfo(TStrings),
TypeInfo(Boolean)],Addr(__TIdTCPConnection__WriteStrings__Wrapper),cRegister);

RegisterProc(TIdTCPConnection,'WriteFile',mtScriptMethod,TypeInfo(_T52),[
TypeInfo(string),
TypeInfo(Boolean),TypeInfo(Cardinal)],Addr(__TIdTCPConnection__WriteFile__Wrapper),cRegister);

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
{RegisterProc(TIdManagedBuffer,'Create',mtConstructor,TypeInfo(_T0),[
TypeInfo(TIdBufferBytesRemoved)],Addr(TIdManagedBuffer.Create),cRegister)}

{RegisterProc(TIdSimpleBuffer,'Create',mtConstructor,TypeInfo(_T4),[
TypeInfo(TIdBufferBytesRemoved)],Addr(TIdSimpleBuffer.Create),cRegister)}

RegisterEvent(TypeInfo(TIdBufferBytesRemoved),[
TypeInfo(TObject),
TypeInfo(Integer)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
