{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit dctooltip_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  Types,
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Messages,
  Windows,
  CommCtrl,
  SysUtils,
  Classes,
  Controls,
  Forms,
  DCToolTip;
function ConvertTMessageToVariant(var R : TMessage) : OleVariant;
function ConvertVariantToTMessage(const V : OleVariant) : TMessage;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TMessage__Wrapper = class(TDCRecordWrapper)
private
fR : TMessage;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setWParam(const val : Longint);
function getWParam : Longint;
property WParam : Longint read getWParam write setWParam;
procedure setLParam(const val : Longint);
function getLParam : Longint;
property LParam : Longint read getLParam write setLParam;
procedure setResult(const val : Longint);
function getResult : Longint;
property Result : Longint read getResult write setResult;
procedure setWParamLo(const val : Word);
function getWParamLo : Word;
property WParamLo : Word read getWParamLo write setWParamLo;
procedure setWParamHi(const val : Word);
function getWParamHi : Word;
property WParamHi : Word read getWParamHi write setWParamHi;
procedure setLParamLo(const val : Word);
function getLParamLo : Word;
property LParamLo : Word read getLParamLo write setLParamLo;
procedure setLParamHi(const val : Word);
function getLParamHi : Word;
property LParamHi : Word read getLParamHi write setLParamHi;
procedure setResultLo(const val : Word);
function getResultLo : Word;
property ResultLo : Word read getResultLo write setResultLo;
procedure setResultHi(const val : Word);
function getResultHi : Word;
property ResultHi : Word read getResultHi write setResultHi;
end;
type __TRect__Wrapper = class(TDCRecordWrapper)
private
fR : TRect;
public
function GetRecordPtr : pointer; override;
published
procedure setLeft(const val : Longint);
function getLeft : Longint;
property Left : Longint read getLeft write setLeft;
procedure setTop(const val : Longint);
function getTop : Longint;
property Top : Longint read getTop write setTop;
procedure setRight(const val : Longint);
function getRight : Longint;
property Right : Longint read getRight write setRight;
procedure setBottom(const val : Longint);
function getBottom : Longint;
property Bottom : Longint read getBottom write setBottom;
end;
type __TDCToolTip__ = class(TDCToolTip);
type
_T0 = procedure  of object;

_T1 = _T0;

_T2 = procedure (const p0 : IDispatch) of object;

_T3 = _T0;

_T4 = procedure (p0 : Cardinal;
p1 : THandle;
const p2 : IDispatch;
const p3 : String;
p4 : Boolean) of object;

_T5 = _T0;

_T6 = _T0;

_T7 = _T0;

_T8 = procedure (p0 : Cardinal;
p1 : THandle) of object;

_T9 = function : Boolean of object;

_T10 = _T0;

_T11 = procedure (const p0 : IDispatch;
p1 : THandle) of object;

_T12 = procedure (p0 : Integer) of object;

_T13 = _T12;

_T14 = _T12;

_T15 = procedure (p0 : Integer;
p1 : Integer) of object;

_T16 = _T4;

function __TMessage__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMessage__Wrapper.setMsg(const val : Cardinal);
begin
TMessage(GetRecordPtr^).Msg := val;
end;
function __TMessage__Wrapper.getMsg : Cardinal;
begin
result := TMessage(GetRecordPtr^).Msg;
end;
procedure __TMessage__Wrapper.setWParam(const val : Longint);
begin
TMessage(GetRecordPtr^).WParam := val;
end;
function __TMessage__Wrapper.getWParam : Longint;
begin
result := TMessage(GetRecordPtr^).WParam;
end;
procedure __TMessage__Wrapper.setLParam(const val : Longint);
begin
TMessage(GetRecordPtr^).LParam := val;
end;
function __TMessage__Wrapper.getLParam : Longint;
begin
result := TMessage(GetRecordPtr^).LParam;
end;
procedure __TMessage__Wrapper.setResult(const val : Longint);
begin
TMessage(GetRecordPtr^).Result := val;
end;
function __TMessage__Wrapper.getResult : Longint;
begin
result := TMessage(GetRecordPtr^).Result;
end;
procedure __TMessage__Wrapper.setWParamLo(const val : Word);
begin
TMessage(GetRecordPtr^).WParamLo := val;
end;
function __TMessage__Wrapper.getWParamLo : Word;
begin
result := TMessage(GetRecordPtr^).WParamLo;
end;
procedure __TMessage__Wrapper.setWParamHi(const val : Word);
begin
TMessage(GetRecordPtr^).WParamHi := val;
end;
function __TMessage__Wrapper.getWParamHi : Word;
begin
result := TMessage(GetRecordPtr^).WParamHi;
end;
procedure __TMessage__Wrapper.setLParamLo(const val : Word);
begin
TMessage(GetRecordPtr^).LParamLo := val;
end;
function __TMessage__Wrapper.getLParamLo : Word;
begin
result := TMessage(GetRecordPtr^).LParamLo;
end;
procedure __TMessage__Wrapper.setLParamHi(const val : Word);
begin
TMessage(GetRecordPtr^).LParamHi := val;
end;
function __TMessage__Wrapper.getLParamHi : Word;
begin
result := TMessage(GetRecordPtr^).LParamHi;
end;
procedure __TMessage__Wrapper.setResultLo(const val : Word);
begin
TMessage(GetRecordPtr^).ResultLo := val;
end;
function __TMessage__Wrapper.getResultLo : Word;
begin
result := TMessage(GetRecordPtr^).ResultLo;
end;
procedure __TMessage__Wrapper.setResultHi(const val : Word);
begin
TMessage(GetRecordPtr^).ResultHi := val;
end;
function __TMessage__Wrapper.getResultHi : Word;
begin
result := TMessage(GetRecordPtr^).ResultHi;
end;
function __TRect__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRect__Wrapper.setLeft(const val : Longint);
begin
TRect(GetRecordPtr^).Left := val;
end;
function __TRect__Wrapper.getLeft : Longint;
begin
result := TRect(GetRecordPtr^).Left;
end;
procedure __TRect__Wrapper.setTop(const val : Longint);
begin
TRect(GetRecordPtr^).Top := val;
end;
function __TRect__Wrapper.getTop : Longint;
begin
result := TRect(GetRecordPtr^).Top;
end;
procedure __TRect__Wrapper.setRight(const val : Longint);
begin
TRect(GetRecordPtr^).Right := val;
end;
function __TRect__Wrapper.getRight : Longint;
begin
result := TRect(GetRecordPtr^).Right;
end;
procedure __TRect__Wrapper.setBottom(const val : Longint);
begin
TRect(GetRecordPtr^).Bottom := val;
end;
function __TRect__Wrapper.getBottom : Longint;
begin
result := TRect(GetRecordPtr^).Bottom;
end;
procedure __TDCToolTip__WndProc__Wrapper(__Instance : TDCToolTip;
const p0 : IDispatch);
var
__p0 : ^TMessage;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__TDCToolTip__(__Instance).WndProc(__p0^);
end;

procedure __TDCToolTip__AddToolTip__Wrapper(__Instance : TDCToolTip;
p0 : Cardinal;
p1 : THandle;
const p2 : IDispatch;
const p3 : String;
p4 : Boolean);
var
__p2 : ^TRect;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
TDCToolTip(__Instance).AddToolTip(p0,p1,__p2^,p3,p4);
end;

procedure __TDCToolTip__RelayEvent__Wrapper(__Instance : TDCToolTip;
const p0 : IDispatch;
p1 : THandle);
var
__p0 : ^TMessage;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
TDCToolTip(__Instance).RelayEvent(__p0^,p1);
end;

procedure __TDCToolTip__UpdateToolTipInfo__Wrapper(__Instance : TDCToolTip;
p0 : Cardinal;
p1 : THandle;
const p2 : IDispatch;
const p3 : String;
p4 : Boolean);
var
__p2 : ^TRect;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
TDCToolTip(__Instance).UpdateToolTipInfo(p0,p1,__p2^,p3,p4);
end;


type __TMessage__Wrapper__ = class(__TMessage__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMessage__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMessageToVariant(var R : TMessage) : OleVariant;
var
__rw : __TMessage__Wrapper__;
begin
__rw := __TMessage__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMessage(const V : OleVariant) : TMessage;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMessage((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRect__Wrapper__ = class(__TRect__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRect__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
var
__rw : __TRect__Wrapper__;
begin
__rw := __TRect__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRect((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTDCToolTip__Handle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCToolTip(Instance).Handle;
end;

function __DC__GetTDCToolTip__Visible(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCToolTip(Instance).Visible;
end;

function __DC__GetTDCToolTip__Width(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCToolTip(Instance).Width;
end;

procedure __DC__SetTDCToolTip__Width(Instance : TObject; Params : PVariantArgList);
begin
TDCToolTip(Instance).Width:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TDCToolTip,'Handle',__DC__GetTDCToolTip__Handle,nil);
RegisterProperty(TDCToolTip,'Visible',__DC__GetTDCToolTip__Visible,nil);
RegisterProperty(TDCToolTip,'Width',__DC__GetTDCToolTip__Width,__DC__SetTDCToolTip__Width);
end;

const __ConstNames0 : array[0..0] of string = (
'toNoPrefox'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,toNoPrefox));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..0] of TClass = (
TDCToolTip
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TDCToolTip,'DoHideToolTip',TypeInfo(_T0),NoParams, pointer(48));
RegRegisterMethod(TDCToolTip,'DoHideToolTip',TypeInfo(_T0),NoParams,  getVMTProcAddr('TDCToolTip','DoHideToolTip',48));


//RegRegisterMethod(TDCToolTip,'DoShowToolTip',TypeInfo(_T1),NoParams, pointer(52));
RegRegisterMethod(TDCToolTip,'DoShowToolTip',TypeInfo(_T1),NoParams,  getVMTProcAddr('TDCToolTip','DoShowToolTip',52));


//RegRegisterMethod(TDCToolTip,'WndProc',TypeInfo(_T2),[TypeInfo(IDispatch)], pointer(56));
RegRegisterMethod(TDCToolTip,'WndProc',TypeInfo(_T2),[TypeInfo(IDispatch)],  getVMTProcAddr('TDCToolTip','WndProc',56));


RegRegisterMethod(TDCToolTip,'Activate',TypeInfo(_T3),NoParams,Addr(TDCToolTip.Activate));

RegRegisterMethod(TDCToolTip,'AddToolTip',TypeInfo(_T4),[
TypeInfo(Cardinal),
TypeInfo(THandle),
TypeInfo(IDispatch),
TypeInfo(String),
TypeInfo(Boolean)],Addr(__TDCToolTip__AddToolTip__Wrapper));

RegRegisterMethod(TDCToolTip,'CreateToolTipWindow',TypeInfo(_T5),NoParams,Addr(TDCToolTip.CreateToolTipWindow));

RegRegisterMethod(TDCToolTip,'DestroyToolTipWindow',TypeInfo(_T6),NoParams,Addr(TDCToolTip.DestroyToolTipWindow));

RegRegisterMethod(TDCToolTip,'Deactivate',TypeInfo(_T7),NoParams,Addr(TDCToolTip.Deactivate));

RegRegisterMethod(TDCToolTip,'DeleteToolTip',TypeInfo(_T8),[
TypeInfo(Cardinal),
TypeInfo(THandle)],Addr(TDCToolTip.DeleteToolTip));

RegRegisterMethod(TDCToolTip,'HandleAllocated',TypeInfo(_T9),[TypeInfo(Boolean)],Addr(TDCToolTip.HandleAllocated));

RegRegisterMethod(TDCToolTip,'RecalcTime',TypeInfo(_T10),NoParams,Addr(TDCToolTip.RecalcTime));

RegRegisterMethod(TDCToolTip,'RelayEvent',TypeInfo(_T11),[
TypeInfo(IDispatch),
TypeInfo(THandle)],Addr(__TDCToolTip__RelayEvent__Wrapper));

RegRegisterMethod(TDCToolTip,'SetInitialTime',TypeInfo(_T12),[
TypeInfo(Integer)],Addr(TDCToolTip.SetInitialTime));

RegRegisterMethod(TDCToolTip,'SetAutoPopTime',TypeInfo(_T13),[
TypeInfo(Integer)],Addr(TDCToolTip.SetAutoPopTime));

RegRegisterMethod(TDCToolTip,'SetReShowTime',TypeInfo(_T14),[
TypeInfo(Integer)],Addr(TDCToolTip.SetReShowTime));

RegRegisterMethod(TDCToolTip,'SetTime',TypeInfo(_T15),[
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TDCToolTip.SetTime));

RegRegisterMethod(TDCToolTip,'UpdateToolTipInfo',TypeInfo(_T16),[
TypeInfo(Cardinal),
TypeInfo(THandle),
TypeInfo(IDispatch),
TypeInfo(String),
TypeInfo(Boolean)],Addr(__TDCToolTip__UpdateToolTipInfo__Wrapper));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
