{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDTELNET_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdException,
  IdGlobal,
  IdStack,
  IdTCPClient,
  IdThread,
  SysUtils,
  IdTelnet;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (p0 : Char) of object;

_T1 = procedure (p0 : TIdTelnet) of object;

function __DC__GetTIdTelnet__TelnetThread(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdTelnet(Instance).TelnetThread);
end;

function __DC__GetTIdTelnetReadThread__Client(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdTelnetReadThread(Instance).Client);
end;

procedure __RegisterProps;
begin
RegisterProperty(TIdTelnet,'TelnetThread',__DC__GetTIdTelnet__TelnetThread,nil);
RegisterProperty(TIdTelnetReadThread,'Client',__DC__GetTIdTelnetReadThread__Client,nil);
end;

const __ConstNames0 : array[0..72] of string = (
'TNC_EOR'
,'TNC_SE'
,'TNC_NOP'
,'TNC_DATA_MARK'
,'TNC_BREAK'
,'TNC_IP'
,'TNC_AO'
,'TNC_AYT'
,'TNC_EC'
,'TNC_EL'
,'TNC_GA'
,'TNC_SB'
,'TNC_WILL'
,'TNC_WONT'
,'TNC_DO'
,'TNC_DONT'
,'TNC_IAC'
,'TNO_BINARY'
,'TNO_ECHO'
,'TNO_RECONNECT'
,'TNO_SGA'
,'TNO_AMSN'
,'TNO_STATUS'
,'TNO_TIMING_MARK'
,'TNO_RCTE'
,'TNO_OLW'
,'TNO_OPS'
,'TNO_OCRD'
,'TNO_OHTS'
,'TNO_OHTD'
,'TNO_OFD'
,'TNO_OVT'
,'TNO_OVTD'
,'TNO_OLD'
,'TNO_EA'
,'TNO_LOGOUT'
,'TNO_BYTE_MACRO'
,'TNO_DET'
,'TNO_SUPDUP'
,'TNO_SUPDUP_OUTPUT'
,'TNO_SL'
,'TNO_TERMTYPE'
,'TNO_EOR'
,'TNO_TACACS_ID'
,'TNO_OM'
,'TNO_TLN'
,'TNO_3270REGIME'
,'TNO_X3PAD'
,'TNO_NAWS'
,'TNO_TERM_SPEED'
,'TNO_RFLOW'
,'TNO_LINEMODE'
,'TNO_XDISPLOC'
,'TNO_AUTH'
,'TNO_ENCRYPT'
,'TNO_EOL'
,'TNOS_TERM_IS'
,'TNOS_TERMTYPE_SEND'
,'TNOS_REPLY'
,'TNOS_NAME'
,'tnsDATA'
,'tnsIAC'
,'tnsIAC_SB'
,'tnsIAC_WILL'
,'tnsIAC_DO'
,'tnsIAC_WONT'
,'tnsIAC_DONT'
,'tnsIAC_SBIAC'
,'tnsIAC_SBDATA'
,'tnsSBDATA_IAC'
,'tncNoLocalEcho'
,'tncLocalEcho'
,'tncEcho'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,TNC_EOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,TNC_SE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,TNC_NOP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,TNC_DATA_MARK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,TNC_BREAK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,TNC_IP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,TNC_AO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,TNC_AYT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,TNC_EC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,TNC_EL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,TNC_GA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,TNC_SB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,TNC_WILL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,TNC_WONT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,TNC_DO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,TNC_DONT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,TNC_IAC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,TNO_BINARY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,TNO_ECHO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,TNO_RECONNECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,TNO_SGA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,TNO_AMSN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,TNO_STATUS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,TNO_TIMING_MARK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,TNO_RCTE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,TNO_OLW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,TNO_OPS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,TNO_OCRD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,TNO_OHTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,TNO_OHTD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,TNO_OFD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,TNO_OVT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,TNO_OVTD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,TNO_OLD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,TNO_EA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,TNO_LOGOUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,TNO_BYTE_MACRO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,TNO_DET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,TNO_SUPDUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,TNO_SUPDUP_OUTPUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,TNO_SL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,TNO_TERMTYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,TNO_EOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,TNO_TACACS_ID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,TNO_OM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,TNO_TLN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,TNO_3270REGIME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,TNO_X3PAD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,TNO_NAWS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,TNO_TERM_SPEED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,TNO_RFLOW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,TNO_LINEMODE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,TNO_XDISPLOC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,TNO_AUTH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,TNO_ENCRYPT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,TNO_EOL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,TNOS_TERM_IS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,TNOS_TERMTYPE_SEND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,TNOS_REPLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,TNOS_NAME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,tnsDATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,tnsIAC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,tnsIAC_SB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,tnsIAC_WILL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,tnsIAC_DO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[65] ,tnsIAC_WONT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[66] ,tnsIAC_DONT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[67] ,tnsIAC_SBIAC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[68] ,tnsIAC_SBDATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[69] ,tnsSBDATA_IAC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[70] ,tncNoLocalEcho));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[71] ,tncLocalEcho));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[72] ,tncEcho));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..4] of TClass = (
EIdTelnetClientConnectError,
EIdTelnetError,
EIdTelnetServerOnDataAvailableIsNil,
TIdTelnet,
TIdTelnetReadThread
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegRegisterMethod(TIdTelnet,'SendCh',TypeInfo(_T0),[
TypeInfo(Char)],Addr(TIdTelnet.SendCh));

RegisterProc(TIdTelnetReadThread,'Create',mtConstructor,TypeInfo(_T1),[
TypeInfo(TIdTelnet)],Addr(TIdTelnetReadThread.Create),cRegister);

end;
initialization
_mreg_0;
RegisterEvent(TypeInfo(TIdTelnetCommandEvent),[
TypeInfo(TIdTelnet),
TypeInfo(TIdTelnetCommand)]);

RegisterEvent(TypeInfo(TIdTelnetDataAvailEvent),[
TypeInfo(TIdTelnet),
TypeInfo(String)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
