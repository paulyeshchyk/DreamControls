{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IB_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  Types,
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  SysUtils,
  Classes,
  IBHeader,
  IBExternals,
  IBUtils,
  DB,
  IBXConst,
  IB;
function Convert_RTL_CRITICAL_SECTIONToVariant(var R : _RTL_CRITICAL_SECTION) : OleVariant;
function ConvertVariantTo_RTL_CRITICAL_SECTION(const V : OleVariant) : _RTL_CRITICAL_SECTION;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type ___RTL_CRITICAL_SECTION__Wrapper = class(TDCRecordWrapper)
private
fR : _RTL_CRITICAL_SECTION;
public
function GetRecordPtr : pointer; override;
published
procedure setLockCount(const val : Longint);
function getLockCount : Longint;
property LockCount : Longint read getLockCount write setLockCount;
procedure setRecursionCount(const val : Longint);
function getRecursionCount : Longint;
property RecursionCount : Longint read getRecursionCount write setRecursionCount;
procedure setOwningThread(const val : THandle);
function getOwningThread : THandle;
property OwningThread : THandle read getOwningThread write setOwningThread;
procedure setLockSemaphore(const val : THandle);
function getLockSemaphore : THandle;
property LockSemaphore : THandle read getLockSemaphore write setLockSemaphore;
procedure setReserved(const val : DWORD);
function getReserved : DWORD;
property Reserved : DWORD read getReserved write setReserved;
end;
type
_T0 = procedure (var p0;
p1 : Integer;
p2 : Integer) of object;

_T1 = procedure (p0 : TIBClientError;
const p1 : Array of Const) of object;

_T2 = procedure  of object;

_T3 = function : PISC_STATUS of object;

{_T4 = function : PStatusVector of object;}

_T5 = function (p0 : Array of ISC_STATUS): Boolean of object;

_T6 = function : string of object;

_T7 = procedure (p0 : TIBDataBaseErrorMessages) of object;

_T8 = function : TIBDataBaseErrorMessages of object;

_T9 = procedure (p0 : Long;
p1 : string) of object;

function ___RTL_CRITICAL_SECTION__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___RTL_CRITICAL_SECTION__Wrapper.setLockCount(const val : Longint);
begin
_RTL_CRITICAL_SECTION(GetRecordPtr^).LockCount := val;
end;
function ___RTL_CRITICAL_SECTION__Wrapper.getLockCount : Longint;
begin
result := _RTL_CRITICAL_SECTION(GetRecordPtr^).LockCount;
end;
procedure ___RTL_CRITICAL_SECTION__Wrapper.setRecursionCount(const val : Longint);
begin
_RTL_CRITICAL_SECTION(GetRecordPtr^).RecursionCount := val;
end;
function ___RTL_CRITICAL_SECTION__Wrapper.getRecursionCount : Longint;
begin
result := _RTL_CRITICAL_SECTION(GetRecordPtr^).RecursionCount;
end;
procedure ___RTL_CRITICAL_SECTION__Wrapper.setOwningThread(const val : THandle);
begin
_RTL_CRITICAL_SECTION(GetRecordPtr^).OwningThread := val;
end;
function ___RTL_CRITICAL_SECTION__Wrapper.getOwningThread : THandle;
begin
result := _RTL_CRITICAL_SECTION(GetRecordPtr^).OwningThread;
end;
procedure ___RTL_CRITICAL_SECTION__Wrapper.setLockSemaphore(const val : THandle);
begin
_RTL_CRITICAL_SECTION(GetRecordPtr^).LockSemaphore := val;
end;
function ___RTL_CRITICAL_SECTION__Wrapper.getLockSemaphore : THandle;
begin
result := _RTL_CRITICAL_SECTION(GetRecordPtr^).LockSemaphore;
end;
procedure ___RTL_CRITICAL_SECTION__Wrapper.setReserved(const val : DWORD);
begin
_RTL_CRITICAL_SECTION(GetRecordPtr^).Reserved := val;
end;
function ___RTL_CRITICAL_SECTION__Wrapper.getReserved : DWORD;
begin
result := _RTL_CRITICAL_SECTION(GetRecordPtr^).Reserved;
end;

type ___RTL_CRITICAL_SECTION__Wrapper__ = class(___RTL_CRITICAL_SECTION__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___RTL_CRITICAL_SECTION__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_RTL_CRITICAL_SECTIONToVariant(var R : _RTL_CRITICAL_SECTION) : OleVariant;
var
__rw : ___RTL_CRITICAL_SECTION__Wrapper__;
begin
__rw := ___RTL_CRITICAL_SECTION__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_RTL_CRITICAL_SECTION(const V : OleVariant) : _RTL_CRITICAL_SECTION;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _RTL_CRITICAL_SECTION((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetEIBError__SQLCode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := EIBError(Instance).SQLCode;
end;

function __DC__GetEIBError__IBErrorCode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := EIBError(Instance).IBErrorCode;
end;

procedure __RegisterProps;
begin
RegisterProperty(EIBError,'SQLCode',__DC__GetEIBError__SQLCode,nil);
RegisterProperty(EIBError,'IBErrorCode',__DC__GetEIBError__IBErrorCode,nil);
end;

function __DC__GetIB__IBCS(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : ___RTL_CRITICAL_SECTION__Wrapper;
begin
__wrapper := ___RTL_CRITICAL_SECTION__Wrapper.Create;
__wrapper.fR := IB.IBCS;
result := IUnknown(__wrapper) as IDispatch;
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('IBCS',__DC__GetIB__IBCS,nil));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..135] of string = (
'tfQPrepare'
,'tfQExecute'
,'tfQFetch'
,'tfError'
,'tfStmt'
,'tfConnect'
,'tfTransact'
,'tfBlob'
,'tfService'
,'tfMisc'
,'ShowSQLCode'
,'ShowIBMessage'
,'ShowSQLMessage'
,'ibxeUnknownError'
,'ibxeInterBaseMissing'
,'ibxeInterBaseInstallMissing'
,'ibxeIB60feature'
,'ibxeNotSupported'
,'ibxeNotPermitted'
,'ibxeFileAccessError'
,'ibxeConnectionTimeout'
,'ibxeCannotSetDatabase'
,'ibxeCannotSetTransaction'
,'ibxeOperationCancelled'
,'ibxeDPBConstantNotSupported'
,'ibxeDPBConstantUnknown'
,'ibxeTPBConstantNotSupported'
,'ibxeTPBConstantUnknown'
,'ibxeDatabaseClosed'
,'ibxeDatabaseOpen'
,'ibxeDatabaseNameMissing'
,'ibxeNotInTransaction'
,'ibxeInTransaction'
,'ibxeTimeoutNegative'
,'ibxeNoDatabasesInTransaction'
,'ibxeUpdateWrongDB'
,'ibxeUpdateWrongTR'
,'ibxeDatabaseNotAssigned'
,'ibxeTransactionNotAssigned'
,'ibxeXSQLDAIndexOutOfRange'
,'ibxeXSQLDANameDoesNotExist'
,'ibxeEOF'
,'ibxeBOF'
,'ibxeInvalidStatementHandle'
,'ibxeSQLOpen'
,'ibxeSQLClosed'
,'ibxeDatasetOpen'
,'ibxeDatasetClosed'
,'ibxeUnknownSQLDataType'
,'ibxeInvalidColumnIndex'
,'ibxeInvalidParamColumnIndex'
,'ibxeInvalidDataConversion'
,'ibxeColumnIsNotNullable'
,'ibxeBlobCannotBeRead'
,'ibxeBlobCannotBeWritten'
,'ibxeEmptyQuery'
,'ibxeCannotOpenNonSQLSelect'
,'ibxeNoFieldAccess'
,'ibxeFieldReadOnly'
,'ibxeFieldNotFound'
,'ibxeNotEditing'
,'ibxeCannotInsert'
,'ibxeCannotPost'
,'ibxeCannotUpdate'
,'ibxeCannotDelete'
,'ibxeCannotRefresh'
,'ibxeBufferNotSet'
,'ibxeCircularReference'
,'ibxeSQLParseError'
,'ibxeUserAbort'
,'ibxeDataSetUniDirectional'
,'ibxeCannotCreateSharedResource'
,'ibxeWindowsAPIError'
,'ibxeColumnListsDontMatch'
,'ibxeColumnTypesDontMatch'
,'ibxeCantEndSharedTransaction'
,'ibxeFieldUnsupportedType'
,'ibxeCircularDataLink'
,'ibxeEmptySQLStatement'
,'ibxeIsASelectStatement'
,'ibxeRequiredParamNotSet'
,'ibxeNoStoredProcName'
,'ibxeIsAExecuteProcedure'
,'ibxeUpdateFailed'
,'ibxeNotCachedUpdates'
,'ibxeNotLiveRequest'
,'ibxeNoProvider'
,'ibxeNoRecordsAffected'
,'ibxeNoTableName'
,'ibxeCannotCreatePrimaryIndex'
,'ibxeCannotDropSystemIndex'
,'ibxeTableNameMismatch'
,'ibxeIndexFieldMissing'
,'ibxeInvalidCancellation'
,'ibxeInvalidEvent'
,'ibxeMaximumEvents'
,'ibxeNoEventsRegistered'
,'ibxeInvalidQueueing'
,'ibxeInvalidRegistration'
,'ibxeInvalidBatchMove'
,'ibxeSQLDialectInvalid'
,'ibxeSPBConstantNotSupported'
,'ibxeSPBConstantUnknown'
,'ibxeServiceActive'
,'ibxeServiceInActive'
,'ibxeServerNameMissing'
,'ibxeQueryParamsError'
,'ibxeStartParamsError'
,'ibxeOutputParsingError'
,'ibxeUseSpecificProcedures'
,'ibxeSQLMonitorAlreadyPresent'
,'ibxeCantPrintValue'
,'ibxeEOFReached'
,'ibxeEOFInComment'
,'ibxeEOFInString'
,'ibxeParamNameExpected'
,'ibxeSuccess'
,'ibxeDelphiException'
,'ibxeNoOptionsSet'
,'ibxeNoDestinationDirectory'
,'ibxeNosourceDirectory'
,'ibxeNoUninstallFile'
,'ibxeOptionNeedsClient'
,'ibxeOptionNeedsServer'
,'ibxeInvalidOption'
,'ibxeInvalidOnErrorResult'
,'ibxeInvalidOnStatusResult'
,'ibxeDPBConstantUnknownEx'
,'ibxeTPBConstantUnknownEx'
,'ibxeUnknownPlan'
,'ibxeFieldSizeMismatch'
,'ibxeEventAlreadyRegistered'
,'ibxeStringTooLarge'
,'ibxeIB65feature'
,'ibxeIB70Feature'
,'IBLocalBufferLength'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,tfQPrepare));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,tfQExecute));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,tfQFetch));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,tfError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,tfStmt));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,tfConnect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,tfTransact));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,tfBlob));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,tfService));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,tfMisc));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,ShowSQLCode));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,ShowIBMessage));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,ShowSQLMessage));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,ibxeUnknownError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,ibxeInterBaseMissing));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,ibxeInterBaseInstallMissing));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,ibxeIB60feature));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,ibxeNotSupported));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,ibxeNotPermitted));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,ibxeFileAccessError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,ibxeConnectionTimeout));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,ibxeCannotSetDatabase));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,ibxeCannotSetTransaction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,ibxeOperationCancelled));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,ibxeDPBConstantNotSupported));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,ibxeDPBConstantUnknown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,ibxeTPBConstantNotSupported));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,ibxeTPBConstantUnknown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,ibxeDatabaseClosed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,ibxeDatabaseOpen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,ibxeDatabaseNameMissing));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,ibxeNotInTransaction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,ibxeInTransaction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,ibxeTimeoutNegative));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,ibxeNoDatabasesInTransaction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,ibxeUpdateWrongDB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,ibxeUpdateWrongTR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,ibxeDatabaseNotAssigned));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,ibxeTransactionNotAssigned));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,ibxeXSQLDAIndexOutOfRange));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,ibxeXSQLDANameDoesNotExist));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,ibxeEOF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,ibxeBOF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,ibxeInvalidStatementHandle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,ibxeSQLOpen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,ibxeSQLClosed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,ibxeDatasetOpen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,ibxeDatasetClosed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,ibxeUnknownSQLDataType));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,ibxeInvalidColumnIndex));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,ibxeInvalidParamColumnIndex));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,ibxeInvalidDataConversion));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,ibxeColumnIsNotNullable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,ibxeBlobCannotBeRead));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,ibxeBlobCannotBeWritten));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,ibxeEmptyQuery));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,ibxeCannotOpenNonSQLSelect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,ibxeNoFieldAccess));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,ibxeFieldReadOnly));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,ibxeFieldNotFound));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,ibxeNotEditing));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,ibxeCannotInsert));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,ibxeCannotPost));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,ibxeCannotUpdate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,ibxeCannotDelete));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[65] ,ibxeCannotRefresh));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[66] ,ibxeBufferNotSet));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[67] ,ibxeCircularReference));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[68] ,ibxeSQLParseError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[69] ,ibxeUserAbort));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[70] ,ibxeDataSetUniDirectional));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[71] ,ibxeCannotCreateSharedResource));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[72] ,ibxeWindowsAPIError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[73] ,ibxeColumnListsDontMatch));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[74] ,ibxeColumnTypesDontMatch));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[75] ,ibxeCantEndSharedTransaction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[76] ,ibxeFieldUnsupportedType));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[77] ,ibxeCircularDataLink));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[78] ,ibxeEmptySQLStatement));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[79] ,ibxeIsASelectStatement));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[80] ,ibxeRequiredParamNotSet));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[81] ,ibxeNoStoredProcName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[82] ,ibxeIsAExecuteProcedure));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[83] ,ibxeUpdateFailed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[84] ,ibxeNotCachedUpdates));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[85] ,ibxeNotLiveRequest));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[86] ,ibxeNoProvider));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[87] ,ibxeNoRecordsAffected));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[88] ,ibxeNoTableName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[89] ,ibxeCannotCreatePrimaryIndex));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[90] ,ibxeCannotDropSystemIndex));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[91] ,ibxeTableNameMismatch));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[92] ,ibxeIndexFieldMissing));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[93] ,ibxeInvalidCancellation));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[94] ,ibxeInvalidEvent));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[95] ,ibxeMaximumEvents));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[96] ,ibxeNoEventsRegistered));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[97] ,ibxeInvalidQueueing));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[98] ,ibxeInvalidRegistration));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[99] ,ibxeInvalidBatchMove));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[100] ,ibxeSQLDialectInvalid));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[101] ,ibxeSPBConstantNotSupported));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[102] ,ibxeSPBConstantUnknown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[103] ,ibxeServiceActive));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[104] ,ibxeServiceInActive));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[105] ,ibxeServerNameMissing));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[106] ,ibxeQueryParamsError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[107] ,ibxeStartParamsError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[108] ,ibxeOutputParsingError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[109] ,ibxeUseSpecificProcedures));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[110] ,ibxeSQLMonitorAlreadyPresent));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[111] ,ibxeCantPrintValue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[112] ,ibxeEOFReached));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[113] ,ibxeEOFInComment));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[114] ,ibxeEOFInString));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[115] ,ibxeParamNameExpected));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[116] ,ibxeSuccess));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[117] ,ibxeDelphiException));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[118] ,ibxeNoOptionsSet));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[119] ,ibxeNoDestinationDirectory));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[120] ,ibxeNosourceDirectory));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[121] ,ibxeNoUninstallFile));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[122] ,ibxeOptionNeedsClient));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[123] ,ibxeOptionNeedsServer));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[124] ,ibxeInvalidOption));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[125] ,ibxeInvalidOnErrorResult));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[126] ,ibxeInvalidOnStatusResult));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[127] ,ibxeDPBConstantUnknownEx));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[128] ,ibxeTPBConstantUnknownEx));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[129] ,ibxeUnknownPlan));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[130] ,ibxeFieldSizeMismatch));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[131] ,ibxeEventAlreadyRegistered));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[132] ,ibxeStringTooLarge));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[133] ,ibxeIB65feature));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[134] ,ibxeIB70Feature));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[135] ,IBLocalBufferLength));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..4] of TClass = (
EIBClientError,
EIBError,
EIBInterBaseError,
EIBInterBaseRoleError,
EIBPlanError
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..7] of string = (
'IBAlloc'
,'IBError'
,'IBDataBaseError'
,'StatusVector'
,'CheckStatusVector'
,'StatusVectorAsText'
,'SetIBDataBaseErrorMessages'
,'GetIBDataBaseErrorMessages'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfoUntyped,
TypeInfo(Integer),
TypeInfo(Integer)],Addr(IBAlloc),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(TIBClientError),
TypeInfoArrayOfConst],Addr(IBError),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T2),NoParams,Addr(IBDataBaseError),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T3),[TypeInfoPointer],Addr(StatusVector),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T5),[
ArrayInfo(TypeInfo(ISC_STATUS)),TypeInfo(Boolean)],Addr(CheckStatusVector),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T6),[TypeInfo(string)],Addr(StatusVectorAsText),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T7),[
TypeInfo(TIBDataBaseErrorMessages)],Addr(SetIBDataBaseErrorMessages),cRegister);

RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T8),[TypeInfo(TIBDataBaseErrorMessages)],Addr(GetIBDataBaseErrorMessages),cRegister);

RegisterProc(EIBError,'Create',mtConstructor,TypeInfo(_T9),[
TypeInfo(Long),
TypeInfo(string)],Addr(EIBError.Create),cRegister);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'StatusVectorArray',mtProc,TypeInfo(_T4),[TypeInfoPointer],Addr(StatusVectorArray),cRegister)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
