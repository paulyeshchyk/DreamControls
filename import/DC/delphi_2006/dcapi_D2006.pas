{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit dcapi_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  Types,
  dcscript,
  dcsystem,
  dcdreamlib,
  sysutils,
  DCConsts,
  windows,
  activex,
  messages,
  shlobj,
  registry,
  mmsystem,
  classes,
  dcapi;
function ConvertTCabinetInfoToVariant(var R : TCabinetInfo) : OleVariant;
function ConvertVariantToTCabinetInfo(const V : OleVariant) : TCabinetInfo;
function ConvertTFileInCabinetInfoToVariant(var R : TFileInCabinetInfo) : OleVariant;
function ConvertVariantToTFileInCabinetInfo(const V : OleVariant) : TFileInCabinetInfo;
function ConvertTFILEPATHSToVariant(var R : TFILEPATHS) : OleVariant;
function ConvertVariantToTFILEPATHS(const V : OleVariant) : TFILEPATHS;
function ConvertTGUIDToVariant(var R : TGUID) : OleVariant;
function ConvertVariantToTGUID(const V : OleVariant) : TGUID;
function ConvertTRARHeaderDataToVariant(var R : TRARHeaderData) : OleVariant;
function ConvertVariantToTRARHeaderData(const V : OleVariant) : TRARHeaderData;
function ConvertTRAROpenArchiveDataToVariant(var R : TRAROpenArchiveData) : OleVariant;
function ConvertVariantToTRAROpenArchiveData(const V : OleVariant) : TRAROpenArchiveData;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TCabinetInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TCabinetInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setSetId(const val : Word);
function getSetId : Word;
property SetId : Word read getSetId write setSetId;
procedure setCabinetNumber(const val : Word);
function getCabinetNumber : Word;
property CabinetNumber : Word read getCabinetNumber write setCabinetNumber;
end;
type __TFileInCabinetInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TFileInCabinetInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setFileSize(const val : DWORD);
function getFileSize : DWORD;
property FileSize : DWORD read getFileSize write setFileSize;
procedure setWin32Error(const val : DWORD);
function getWin32Error : DWORD;
property Win32Error : DWORD read getWin32Error write setWin32Error;
procedure setDosDate(const val : Word);
function getDosDate : Word;
property DosDate : Word read getDosDate write setDosDate;
procedure setDosTime(const val : Word);
function getDosTime : Word;
property DosTime : Word read getDosTime write setDosTime;
procedure setDosAttribs(const val : Word);
function getDosAttribs : Word;
property DosAttribs : Word read getDosAttribs write setDosAttribs;
end;
type __TFILEPATHS__Wrapper = class(TDCRecordWrapper)
private
fR : TFILEPATHS;
public
function GetRecordPtr : pointer; override;
published
procedure setWin32Error(const val : UINT);
function getWin32Error : UINT;
property Win32Error : UINT read getWin32Error write setWin32Error;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
end;
type __TRARHeaderData__Wrapper = class(TDCRecordWrapper)
private
fR : TRARHeaderData;
public
function GetRecordPtr : pointer; override;
published
procedure setFlags(const val : UINT);
function getFlags : UINT;
property Flags : UINT read getFlags write setFlags;
procedure setPackSize(const val : UINT);
function getPackSize : UINT;
property PackSize : UINT read getPackSize write setPackSize;
procedure setUnpSize(const val : UINT);
function getUnpSize : UINT;
property UnpSize : UINT read getUnpSize write setUnpSize;
procedure setHostOS(const val : UINT);
function getHostOS : UINT;
property HostOS : UINT read getHostOS write setHostOS;
procedure setFileCRC(const val : UINT);
function getFileCRC : UINT;
property FileCRC : UINT read getFileCRC write setFileCRC;
procedure setFileTime(const val : UINT);
function getFileTime : UINT;
property FileTime : UINT read getFileTime write setFileTime;
procedure setUnpVer(const val : UINT);
function getUnpVer : UINT;
property UnpVer : UINT read getUnpVer write setUnpVer;
procedure setMethod(const val : UINT);
function getMethod : UINT;
property Method : UINT read getMethod write setMethod;
procedure setFileAttr(const val : UINT);
function getFileAttr : UINT;
property FileAttr : UINT read getFileAttr write setFileAttr;
procedure setCmtBufSize(const val : UINT);
function getCmtBufSize : UINT;
property CmtBufSize : UINT read getCmtBufSize write setCmtBufSize;
procedure setCmtSize(const val : UINT);
function getCmtSize : UINT;
property CmtSize : UINT read getCmtSize write setCmtSize;
procedure setCmtState(const val : UINT);
function getCmtState : UINT;
property CmtState : UINT read getCmtState write setCmtState;
end;
type __TRAROpenArchiveData__Wrapper = class(TDCRecordWrapper)
private
fR : TRAROpenArchiveData;
public
function GetRecordPtr : pointer; override;
published
procedure setOpenMode(const val : UINT);
function getOpenMode : UINT;
property OpenMode : UINT read getOpenMode write setOpenMode;
procedure setOpenResult(const val : UINT);
function getOpenResult : UINT;
property OpenResult : UINT read getOpenResult write setOpenResult;
procedure setCmtBufSize(const val : UINT);
function getCmtBufSize : UINT;
property CmtBufSize : UINT read getCmtBufSize write setCmtBufSize;
procedure setCmtSize(const val : UINT);
function getCmtSize : UINT;
property CmtSize : UINT read getCmtSize write setCmtSize;
procedure setCmtState(const val : UINT);
function getCmtState : UINT;
property CmtState : UINT read getCmtState write setCmtState;
end;
type __TGUID__Wrapper = class(TDCRecordWrapper)
private
fR : TGUID;
public
function GetRecordPtr : pointer; override;
published
procedure setD1(const val : LongWord);
function getD1 : LongWord;
property D1 : LongWord read getD1 write setD1;
procedure setD2(const val : Word);
function getD2 : Word;
property D2 : Word read getD2 write setD2;
procedure setD3(const val : Word);
function getD3 : Word;
property D3 : Word read getD3 write setD3;
end;
type
_T0 = function : String of object;

_T1 = procedure (p0 : TStrings) of object;

_T2 = function (const p0 : String): Boolean of object;

_T3 = function (p0 : Integer): Boolean of object;

_T4 = procedure (const p0 : String;
const p1 : String) of object;

_T5 = procedure (const p0 : String) of object;

_T6 = function (const p0 : IDispatch): String of object;

_T7 = function (const p0 : String): String of object;

_T8 = procedure (const p0 : String;
const p1 : String;
const p2 : String) of object;

_T9 = procedure (const p0 : String;
const p1 : String;
p2 : Pointer;
p3 : Integer) of object;

_T10 = function (const p0 : String;
var p1 : Pointer;
var p2 : Integer): THandle of object;

_T11 = procedure (p0 : THandle) of object;

_T12 = _T7;

_T13 = _T7;

_T14 = _T8;

_T15 = procedure (const p0 : String;
p1 : TStringList) of object;

_T16 = _T15;

_T17 = _T5;

_T18 = function (const p0 : String;
const p1 : String): String of object;

_T19 = _T0;

_T20 = _T0;

_T21 = _T0;

_T22 = function (p0 : THandle;
const p1 : String): HKEY of object;

_T23 = procedure (p0 : HKEY;
const p1 : String;
const p2 : String) of object;

_T24 = _T2;

_T25 = _T2;

_T26 = _T2;

_T27 = _T5;

_T28 = _T5;

_T29 = function (const p0 : String;
p1 : Boolean): DWORD of object;

_T30 = _T8;

_T31 = _T4;

_T32 = function (p0 : TDelphiVer): String of object;

_T33 = procedure (p0 : TDelphiVer;
const p1 : String;
const p2 : String) of object;

_T34 = _T7;

_T35 = procedure (const p0 : String;
const p1 : String;
const p2 : String;
const p3 : String) of object;

_T36 = _T0;

_T37 = function (const p0 : String;
var p1 : String;
p2 : THandle): Boolean of object;

_T38 = _T37;

_T39 = _T7;

_T40 = _T7;

_T41 = _T7;

_T42 = function : TDelphiVer of object;

_T43 = procedure  of object;

_T44 = _T43;

_T45 = function (const p0 : String): THandle of object;

_T46 = function (const p0 : IDispatch): THandle of object;

_T47 = function (p0 : THandle): Integer of object;

_T48 = function (p0 : THandle;
const p1 : IDispatch): Integer of object;

_T49 = function (p0 : THandle;
p1 : TRARFileOperation;
const p2 : String;
const p3 : String): Integer of object;

{_T50 = procedure (p0 : THandle;
p1 : TRARChangeVolProc) of object;}

{_T51 = procedure (p0 : THandle;
p1 : TRARProcessDataProc) of object;}

_T52 = procedure (p0 : THandle;
const p1 : String) of object;

{_T53 = function (const p0 : String;
const p1 : String;
p2 : TRARFileExtractCallBack;
p3 : TStrings;
p4 : TStrings;
p5 : TStrings): Boolean of object;}

_T54 = _T5;

_T55 = _T0;

_T56 = _T0;

_T57 = _T32;

_T58 = _T32;

_T59 = function (p0 : TDelphiVer;
const p1 : String): String of object;

_T60 = _T32;

_T61 = _T32;

_T62 = function (p0 : TDelphiVer;
p1 : TDCDelphiSourceDirsOpts): String of object;

_T63 = _T32;

_T64 = procedure (p0 : String;
p1 : TStrings) of object;

_T65 = _T32;

_T66 = _T7;

_T67 = _T7;

_T68 = _T18;

_T69 = _T18;

_T70 = function (p0 : TStrings;
const p1 : String): Integer of object;

_T71 = function (const p0 : String): TDelphiVer of object;

_T72 = _T32;

_T73 = function (const p0 : String;
p1 : Char): String of object;

_T74 = _T7;

_T75 = function : Integer of object;

_T76 = procedure (p0 : Integer) of object;

_T77 = _T75;

_T78 = _T7;

_T79 = function (p0 : TDelphiVer): Boolean of object;

_T80 = function (p0 : TDelphiVer;
const p1 : String;
const p2 : String;
var p3 : String;
var p4 : String): Boolean of object;

_T81 = function (const p0 : String;
const p1 : String;
var p2 : String;
p3 : Boolean): Boolean of object;

_T82 = function (p0 : TStrings;
var p1 : TDelphiVer): Boolean of object;

_T83 = function (const p0 : String;
var p1 : TDelphiVer): Boolean of object;

_T84 = function : Boolean of object;

_T85 = _T43;

_T86 = _T76;

_T87 = _T84;

function __TCabinetInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCabinetInfo__Wrapper.setSetId(const val : Word);
begin
TCabinetInfo(GetRecordPtr^).SetId := val;
end;
function __TCabinetInfo__Wrapper.getSetId : Word;
begin
result := TCabinetInfo(GetRecordPtr^).SetId;
end;
procedure __TCabinetInfo__Wrapper.setCabinetNumber(const val : Word);
begin
TCabinetInfo(GetRecordPtr^).CabinetNumber := val;
end;
function __TCabinetInfo__Wrapper.getCabinetNumber : Word;
begin
result := TCabinetInfo(GetRecordPtr^).CabinetNumber;
end;
function __TFileInCabinetInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TFileInCabinetInfo__Wrapper.setFileSize(const val : DWORD);
begin
TFileInCabinetInfo(GetRecordPtr^).FileSize := val;
end;
function __TFileInCabinetInfo__Wrapper.getFileSize : DWORD;
begin
result := TFileInCabinetInfo(GetRecordPtr^).FileSize;
end;
procedure __TFileInCabinetInfo__Wrapper.setWin32Error(const val : DWORD);
begin
TFileInCabinetInfo(GetRecordPtr^).Win32Error := val;
end;
function __TFileInCabinetInfo__Wrapper.getWin32Error : DWORD;
begin
result := TFileInCabinetInfo(GetRecordPtr^).Win32Error;
end;
procedure __TFileInCabinetInfo__Wrapper.setDosDate(const val : Word);
begin
TFileInCabinetInfo(GetRecordPtr^).DosDate := val;
end;
function __TFileInCabinetInfo__Wrapper.getDosDate : Word;
begin
result := TFileInCabinetInfo(GetRecordPtr^).DosDate;
end;
procedure __TFileInCabinetInfo__Wrapper.setDosTime(const val : Word);
begin
TFileInCabinetInfo(GetRecordPtr^).DosTime := val;
end;
function __TFileInCabinetInfo__Wrapper.getDosTime : Word;
begin
result := TFileInCabinetInfo(GetRecordPtr^).DosTime;
end;
procedure __TFileInCabinetInfo__Wrapper.setDosAttribs(const val : Word);
begin
TFileInCabinetInfo(GetRecordPtr^).DosAttribs := val;
end;
function __TFileInCabinetInfo__Wrapper.getDosAttribs : Word;
begin
result := TFileInCabinetInfo(GetRecordPtr^).DosAttribs;
end;
function __TFILEPATHS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TFILEPATHS__Wrapper.setWin32Error(const val : UINT);
begin
TFILEPATHS(GetRecordPtr^).Win32Error := val;
end;
function __TFILEPATHS__Wrapper.getWin32Error : UINT;
begin
result := TFILEPATHS(GetRecordPtr^).Win32Error;
end;
procedure __TFILEPATHS__Wrapper.setFlags(const val : DWORD);
begin
TFILEPATHS(GetRecordPtr^).Flags := val;
end;
function __TFILEPATHS__Wrapper.getFlags : DWORD;
begin
result := TFILEPATHS(GetRecordPtr^).Flags;
end;
function __TRARHeaderData__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRARHeaderData__Wrapper.setFlags(const val : UINT);
begin
TRARHeaderData(GetRecordPtr^).Flags := val;
end;
function __TRARHeaderData__Wrapper.getFlags : UINT;
begin
result := TRARHeaderData(GetRecordPtr^).Flags;
end;
procedure __TRARHeaderData__Wrapper.setPackSize(const val : UINT);
begin
TRARHeaderData(GetRecordPtr^).PackSize := val;
end;
function __TRARHeaderData__Wrapper.getPackSize : UINT;
begin
result := TRARHeaderData(GetRecordPtr^).PackSize;
end;
procedure __TRARHeaderData__Wrapper.setUnpSize(const val : UINT);
begin
TRARHeaderData(GetRecordPtr^).UnpSize := val;
end;
function __TRARHeaderData__Wrapper.getUnpSize : UINT;
begin
result := TRARHeaderData(GetRecordPtr^).UnpSize;
end;
procedure __TRARHeaderData__Wrapper.setHostOS(const val : UINT);
begin
TRARHeaderData(GetRecordPtr^).HostOS := val;
end;
function __TRARHeaderData__Wrapper.getHostOS : UINT;
begin
result := TRARHeaderData(GetRecordPtr^).HostOS;
end;
procedure __TRARHeaderData__Wrapper.setFileCRC(const val : UINT);
begin
TRARHeaderData(GetRecordPtr^).FileCRC := val;
end;
function __TRARHeaderData__Wrapper.getFileCRC : UINT;
begin
result := TRARHeaderData(GetRecordPtr^).FileCRC;
end;
procedure __TRARHeaderData__Wrapper.setFileTime(const val : UINT);
begin
TRARHeaderData(GetRecordPtr^).FileTime := val;
end;
function __TRARHeaderData__Wrapper.getFileTime : UINT;
begin
result := TRARHeaderData(GetRecordPtr^).FileTime;
end;
procedure __TRARHeaderData__Wrapper.setUnpVer(const val : UINT);
begin
TRARHeaderData(GetRecordPtr^).UnpVer := val;
end;
function __TRARHeaderData__Wrapper.getUnpVer : UINT;
begin
result := TRARHeaderData(GetRecordPtr^).UnpVer;
end;
procedure __TRARHeaderData__Wrapper.setMethod(const val : UINT);
begin
TRARHeaderData(GetRecordPtr^).Method := val;
end;
function __TRARHeaderData__Wrapper.getMethod : UINT;
begin
result := TRARHeaderData(GetRecordPtr^).Method;
end;
procedure __TRARHeaderData__Wrapper.setFileAttr(const val : UINT);
begin
TRARHeaderData(GetRecordPtr^).FileAttr := val;
end;
function __TRARHeaderData__Wrapper.getFileAttr : UINT;
begin
result := TRARHeaderData(GetRecordPtr^).FileAttr;
end;
procedure __TRARHeaderData__Wrapper.setCmtBufSize(const val : UINT);
begin
TRARHeaderData(GetRecordPtr^).CmtBufSize := val;
end;
function __TRARHeaderData__Wrapper.getCmtBufSize : UINT;
begin
result := TRARHeaderData(GetRecordPtr^).CmtBufSize;
end;
procedure __TRARHeaderData__Wrapper.setCmtSize(const val : UINT);
begin
TRARHeaderData(GetRecordPtr^).CmtSize := val;
end;
function __TRARHeaderData__Wrapper.getCmtSize : UINT;
begin
result := TRARHeaderData(GetRecordPtr^).CmtSize;
end;
procedure __TRARHeaderData__Wrapper.setCmtState(const val : UINT);
begin
TRARHeaderData(GetRecordPtr^).CmtState := val;
end;
function __TRARHeaderData__Wrapper.getCmtState : UINT;
begin
result := TRARHeaderData(GetRecordPtr^).CmtState;
end;
function __TRAROpenArchiveData__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRAROpenArchiveData__Wrapper.setOpenMode(const val : UINT);
begin
TRAROpenArchiveData(GetRecordPtr^).OpenMode := val;
end;
function __TRAROpenArchiveData__Wrapper.getOpenMode : UINT;
begin
result := TRAROpenArchiveData(GetRecordPtr^).OpenMode;
end;
procedure __TRAROpenArchiveData__Wrapper.setOpenResult(const val : UINT);
begin
TRAROpenArchiveData(GetRecordPtr^).OpenResult := val;
end;
function __TRAROpenArchiveData__Wrapper.getOpenResult : UINT;
begin
result := TRAROpenArchiveData(GetRecordPtr^).OpenResult;
end;
procedure __TRAROpenArchiveData__Wrapper.setCmtBufSize(const val : UINT);
begin
TRAROpenArchiveData(GetRecordPtr^).CmtBufSize := val;
end;
function __TRAROpenArchiveData__Wrapper.getCmtBufSize : UINT;
begin
result := TRAROpenArchiveData(GetRecordPtr^).CmtBufSize;
end;
procedure __TRAROpenArchiveData__Wrapper.setCmtSize(const val : UINT);
begin
TRAROpenArchiveData(GetRecordPtr^).CmtSize := val;
end;
function __TRAROpenArchiveData__Wrapper.getCmtSize : UINT;
begin
result := TRAROpenArchiveData(GetRecordPtr^).CmtSize;
end;
procedure __TRAROpenArchiveData__Wrapper.setCmtState(const val : UINT);
begin
TRAROpenArchiveData(GetRecordPtr^).CmtState := val;
end;
function __TRAROpenArchiveData__Wrapper.getCmtState : UINT;
begin
result := TRAROpenArchiveData(GetRecordPtr^).CmtState;
end;
function _TCabinetInfo_ : IDispatch;
begin
  result := __TCabinetInfo__Wrapper.Create;
end;
function _TFileInCabinetInfo_ : IDispatch;
begin
  result := __TFileInCabinetInfo__Wrapper.Create;
end;
function _TFILEPATHS_ : IDispatch;
begin
  result := __TFILEPATHS__Wrapper.Create;
end;
function _TRARHeaderData_ : IDispatch;
begin
  result := __TRARHeaderData__Wrapper.Create;
end;
function _TRAROpenArchiveData_ : IDispatch;
begin
  result := __TRAROpenArchiveData__Wrapper.Create;
end;
function __TGUID__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TGUID__Wrapper.setD1(const val : LongWord);
begin
TGUID(GetRecordPtr^).D1 := val;
end;
function __TGUID__Wrapper.getD1 : LongWord;
begin
result := TGUID(GetRecordPtr^).D1;
end;
procedure __TGUID__Wrapper.setD2(const val : Word);
begin
TGUID(GetRecordPtr^).D2 := val;
end;
function __TGUID__Wrapper.getD2 : Word;
begin
result := TGUID(GetRecordPtr^).D2;
end;
procedure __TGUID__Wrapper.setD3(const val : Word);
begin
TGUID(GetRecordPtr^).D3 := val;
end;
function __TGUID__Wrapper.getD3 : Word;
begin
result := TGUID(GetRecordPtr^).D3;
end;
function ____StringFromGUID__Wrapper(const p0 : IDispatch): String;
var
__p0 : ^TGUID;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := StringFromGUID(__p0^);
end;

function ____RAROpenArchive__Wrapper(const p0 : IDispatch): THandle;
var
__p0 : ^TRAROpenArchiveData;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := RAROpenArchive(__p0^);
end;

function ____RARReadHeader__Wrapper(p0 : THandle;
const p1 : IDispatch): Integer;
var
__p1 : ^TRARHeaderData;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := RARReadHeader(p0,__p1^);
end;


type __TCabinetInfo__Wrapper__ = class(__TCabinetInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCabinetInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCabinetInfoToVariant(var R : TCabinetInfo) : OleVariant;
var
__rw : __TCabinetInfo__Wrapper__;
begin
__rw := __TCabinetInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCabinetInfo(const V : OleVariant) : TCabinetInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCabinetInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TFileInCabinetInfo__Wrapper__ = class(__TFileInCabinetInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TFileInCabinetInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTFileInCabinetInfoToVariant(var R : TFileInCabinetInfo) : OleVariant;
var
__rw : __TFileInCabinetInfo__Wrapper__;
begin
__rw := __TFileInCabinetInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTFileInCabinetInfo(const V : OleVariant) : TFileInCabinetInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TFileInCabinetInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TFILEPATHS__Wrapper__ = class(__TFILEPATHS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TFILEPATHS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTFILEPATHSToVariant(var R : TFILEPATHS) : OleVariant;
var
__rw : __TFILEPATHS__Wrapper__;
begin
__rw := __TFILEPATHS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTFILEPATHS(const V : OleVariant) : TFILEPATHS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TFILEPATHS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TGUID__Wrapper__ = class(__TGUID__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TGUID__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTGUIDToVariant(var R : TGUID) : OleVariant;
var
__rw : __TGUID__Wrapper__;
begin
__rw := __TGUID__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTGUID(const V : OleVariant) : TGUID;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TGUID((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRARHeaderData__Wrapper__ = class(__TRARHeaderData__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRARHeaderData__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRARHeaderDataToVariant(var R : TRARHeaderData) : OleVariant;
var
__rw : __TRARHeaderData__Wrapper__;
begin
__rw := __TRARHeaderData__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRARHeaderData(const V : OleVariant) : TRARHeaderData;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRARHeaderData((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRAROpenArchiveData__Wrapper__ = class(__TRAROpenArchiveData__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRAROpenArchiveData__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRAROpenArchiveDataToVariant(var R : TRAROpenArchiveData) : OleVariant;
var
__rw : __TRAROpenArchiveData__Wrapper__;
begin
__rw := __TRAROpenArchiveData__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRAROpenArchiveData(const V : OleVariant) : TRAROpenArchiveData;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRAROpenArchiveData((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTDCPathDialog__ParentWindow(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDCPathDialog(Instance).ParentWindow;
end;

procedure __DC__SetTDCPathDialog__ParentWindow(Instance : TObject; Params : PVariantArgList);
begin
TDCPathDialog(Instance).ParentWindow:=OleVariant(Params^[0]);
end;

function __DC__GetTResDialog__DialogWnd(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TResDialog(Instance).DialogWnd;
end;

procedure __RegisterProps;
begin
RegisterProperty(TDCPathDialog,'ParentWindow',__DC__GetTDCPathDialog__ParentWindow,__DC__SetTDCPathDialog__ParentWindow);
RegisterProperty(TResDialog,'DialogWnd',__DC__GetTResDialog__DialogWnd,nil);
end;

function __DC__Getdcapi__UnRARDLLHandle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := dcapi.UnRARDLLHandle;
end;

procedure __DC__Setdcapi__UnRARDLLHandle(Instance : TObject; Params : PVariantArgList);
begin
dcapi.UnRARDLLHandle:=OleVariant(Params^[0]);
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('UnRARDLLHandle',__DC__Getdcapi__UnRARDLLHandle,__DC__Setdcapi__UnRARDLLHandle));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..83] of string = (
'SErrLoadingUnRAR'
,'sErrDelphiRunning'
,'sErrPrevVersion'
,'FILEOP_ABORT'
,'FILEOP_DOIT'
,'FILEOP_SKIP'
,'FILEOP_RETRY'
,'FILEOP_NEWPATH'
,'_MAXPATH'
,'SPFILENOTIFY_STARTQUEUE'
,'SPFILENOTIFY_ENDQUEUE'
,'SPFILENOTIFY_STARTSUBQUEUE'
,'SPFILENOTIFY_ENDSUBQUEUE'
,'SPFILENOTIFY_STARTDELETE'
,'SPFILENOTIFY_ENDDELETE'
,'SPFILENOTIFY_DELETEERROR'
,'SPFILENOTIFY_STARTRENAME'
,'SPFILENOTIFY_ENDRENAME'
,'SPFILENOTIFY_RENAMEERROR'
,'SPFILENOTIFY_STARTCOPY'
,'SPFILENOTIFY_ENDCOPY'
,'SPFILENOTIFY_COPYERROR'
,'SPFILENOTIFY_NEEDMEDIA'
,'SPFILENOTIFY_QUEUESCAN'
,'SPFILENOTIFY_CABINETINFO'
,'SPFILENOTIFY_FILEINCABINET'
,'SPFILENOTIFY_NEEDNEWCABINET'
,'SPFILENOTIFY_FILEEXTRACTED'
,'SPFILENOTIFY_FILEOPDELAYED'
,'dvD2'
,'dvC1'
,'dvD3'
,'dvC3'
,'dvD4'
,'dvC4'
,'dvD5'
,'dvC5'
,'dvd6'
,'dvC6'
,'dvD7'
,'dvD2006'
,'cAllDelphiVers'
,'pdrNone'
,'pdrBitBucket'
,'pdrControls'
,'pdrDesktop'
,'pdrDesktopDirectory'
,'pdrDrives'
,'pdrFonts'
,'pdrNetHood'
,'pdrNetwork'
,'pdrPersonal'
,'pdrPrinters'
,'pdrPrograms'
,'pdrRecent'
,'pdrSendto'
,'pdrStartmenu'
,'pdrStartup'
,'pdrTemplates'
,'pdfBrowseForComputer'
,'pdfBrowseForPrinter'
,'pdfDontGoBelowDomain'
,'pdfReturnfsAncestors'
,'pdfReturnOnlyFSDirs'
,'ERAR_END_ARCHIVE'
,'ERAR_NO_MEMORY'
,'ERAR_BAD_DATA'
,'ERAR_BAD_ARCHIVE'
,'ERAR_UNKNOWN_FORMAT'
,'ERAR_EOPEN'
,'ERAR_ECREATE'
,'ERAR_ECLOSE'
,'ERAR_EREAD'
,'ERAR_EWRITE'
,'ERAR_SMALL_BUF'
,'RAR_OM_LIST'
,'RAR_OM_EXTRACT'
,'RAR_VOL_ASK'
,'RAR_VOL_NOTIFY'
,'opSkip'
,'opTest'
,'opExtract'
,'doAddLibFolder'
,'doExcludeSysUnderD3'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,SErrLoadingUnRAR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,sErrDelphiRunning));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,sErrPrevVersion));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,FILEOP_ABORT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,FILEOP_DOIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,FILEOP_SKIP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,FILEOP_RETRY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,FILEOP_NEWPATH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,_MAXPATH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,SPFILENOTIFY_STARTQUEUE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,SPFILENOTIFY_ENDQUEUE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,SPFILENOTIFY_STARTSUBQUEUE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,SPFILENOTIFY_ENDSUBQUEUE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,SPFILENOTIFY_STARTDELETE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,SPFILENOTIFY_ENDDELETE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,SPFILENOTIFY_DELETEERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,SPFILENOTIFY_STARTRENAME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,SPFILENOTIFY_ENDRENAME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,SPFILENOTIFY_RENAMEERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,SPFILENOTIFY_STARTCOPY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,SPFILENOTIFY_ENDCOPY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,SPFILENOTIFY_COPYERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,SPFILENOTIFY_NEEDMEDIA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,SPFILENOTIFY_QUEUESCAN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,SPFILENOTIFY_CABINETINFO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,SPFILENOTIFY_FILEINCABINET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,SPFILENOTIFY_NEEDNEWCABINET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,SPFILENOTIFY_FILEEXTRACTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,SPFILENOTIFY_FILEOPDELAYED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,dvD2));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,dvC1));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,dvD3));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,dvC3));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,dvD4));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,dvC4));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,dvD5));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,dvC5));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,dvd6));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,dvC6));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,dvD7));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,dvD2006));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,VarFromSet(cAllDelphiVers, sizeof(cAllDelphiVers))));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,pdrNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,pdrBitBucket));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,pdrControls));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,pdrDesktop));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,pdrDesktopDirectory));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,pdrDrives));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,pdrFonts));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,pdrNetHood));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,pdrNetwork));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,pdrPersonal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,pdrPrinters));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,pdrPrograms));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,pdrRecent));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,pdrSendto));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,pdrStartmenu));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,pdrStartup));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,pdrTemplates));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,pdfBrowseForComputer));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,pdfBrowseForPrinter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,pdfDontGoBelowDomain));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,pdfReturnfsAncestors));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,pdfReturnOnlyFSDirs));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,ERAR_END_ARCHIVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[65] ,ERAR_NO_MEMORY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[66] ,ERAR_BAD_DATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[67] ,ERAR_BAD_ARCHIVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[68] ,ERAR_UNKNOWN_FORMAT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[69] ,ERAR_EOPEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[70] ,ERAR_ECREATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[71] ,ERAR_ECLOSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[72] ,ERAR_EREAD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[73] ,ERAR_EWRITE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[74] ,ERAR_SMALL_BUF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[75] ,RAR_OM_LIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[76] ,RAR_OM_EXTRACT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[77] ,RAR_VOL_ASK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[78] ,RAR_VOL_NOTIFY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[79] ,opSkip));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[80] ,opTest));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[81] ,opExtract));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[82] ,doAddLibFolder));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[83] ,doExcludeSysUnderD3));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..1] of TClass = (
TDCPathDialog,
TResDialog
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..85] of string = (
'TCabinetInfo'
,'TFileInCabinetInfo'
,'TFILEPATHS'
,'TRARHeaderData'
,'TRAROpenArchiveData'
,'GetTemporaryPath'
,'CreateFolders'
,'DirectoryExists'
,'ExecuteDialog'
,'AddUnInstaller'
,'RemoveUnInstaller'
,'StringFromGUID'
,'GetUniqueString'
,'AddStringResource'
,'AddRCDataResource'
,'GetResData'
,'ReleaseResData'
,'GetTemporaryFileName'
,'LoadStringFromRCData'
,'AddUnInstallInfo'
,'AddUnInstallFilesInfo'
,'GetUninstallFilesInfo'
,'RemoveUninstallFilesInfo'
,'GetUnInstallInfo'
,'SystemDirectory'
,'WindowsDirectory'
,'ProgramFilesDirectory'
,'CreateRegKey'
,'ChangeRegStrValue'
,'InstallCheckDelphiRunning'
,'InstallCheckPrevVersion'
,'IsAppInstalled'
,'RemoveFile'
,'RunBatFile'
,'RunBatFileEx'
,'AddHelpToCntFile'
,'RemoveHelpFromCntFile'
,'GetDelphiHelpCntFile'
,'AddInstalledPackage'
,'ProcessFileTemplate'
,'CreateLink'
,'StartMenuProgramsFolder'
,'QueryDir'
,'QueryComp'
,'AddSlash'
,'DCUpFolder'
,'RemoveSlash'
,'GetThisDelphiVer'
,'LoadUnRAR'
,'UnloadUnRAR'
,'OpenRARFile'
,'RAROpenArchive'
,'RARCloseArchive'
,'RARReadHeader'
,'RARProcessFile'
,'RARSetPassword'
,'LoadUnRARFromFile'
,'GetDelphiDir'
,'GetDelphiSourceDirs'
,'GetDelphiIDEFileName'
,'GetDelphiCMDFileName'
,'GetDelphiRegKey'
,'GetDelphiHelpFolder'
,'GetSpecificDelphiDir'
,'GetDelphiSourceDirsEx2'
,'GetDelphiSourceDirsEx'
,'CreateAllDirectories'
,'DCGenDPUPath'
,'ExtractValuePart'
,'ExtractNamePart'
,'ExtractValuePartEx'
,'ExtractNamePartEx'
,'IndexOfValue'
,'GetDelphiVer'
,'GetDelphiPackagesKey'
,'Quote'
,'QuoteFileName'
,'GetCDDeviceID'
,'SetCDAudioVolume'
,'GetCDAudioVolume'
,'ConvertErrors'
,'VersionCorrect'
,'CompileFile'
,'RunProgram'
,'DCGetDelphiVerFromDefines'
,'DCGetDelphiVerFromName'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TCabinetInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_TFileInCabinetInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_TFILEPATHS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(_TRARHeaderData_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(_TRAROpenArchiveData_)));
RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T0),[TypeInfo(String)],Addr(GetTemporaryPath),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T1),[
TypeInfo(TStrings)],Addr(CreateFolders),cRegister);

RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T2),[
TypeInfo(String),TypeInfo(Boolean)],Addr(DirectoryExists),cRegister);

RegisterProc(nil,MethodNames[8],mtProc,TypeInfo(_T3),[
TypeInfo(Integer),TypeInfo(Boolean)],Addr(ExecuteDialog),cRegister);

RegisterProc(nil,MethodNames[9],mtProc,TypeInfo(_T4),[
TypeInfo(String),
TypeInfo(String)],Addr(AddUnInstaller),cRegister);

RegisterProc(nil,MethodNames[10],mtProc,TypeInfo(_T5),[
TypeInfo(String)],Addr(RemoveUnInstaller),cRegister);

RegisterProc(nil,MethodNames[11],mtProc,TypeInfo(_T6),[
TypeInfo(IDispatch),TypeInfo(String)],Addr(____StringFromGUID__Wrapper),cRegister);

RegisterProc(nil,MethodNames[12],mtProc,TypeInfo(_T7),[
TypeInfo(String),TypeInfo(String)],Addr(GetUniqueString),cRegister);

RegisterProc(nil,MethodNames[13],mtProc,TypeInfo(_T8),[
TypeInfo(String),
TypeInfo(String),
TypeInfo(String)],Addr(AddStringResource),cRegister);

RegisterProc(nil,MethodNames[14],mtProc,TypeInfo(_T9),[
TypeInfo(String),
TypeInfo(String),
TypeInfoPointer,
TypeInfo(Integer)],Addr(AddRCDataResource),cRegister);

RegisterProc(nil,MethodNames[15],mtProc,TypeInfo(_T10),[
TypeInfo(String),
TypeInfoPointer,
TypeInfo(Integer),TypeInfo(THandle)],Addr(GetResData),cRegister);

RegisterProc(nil,MethodNames[16],mtProc,TypeInfo(_T11),[
TypeInfo(THandle)],Addr(ReleaseResData),cRegister);

RegisterProc(nil,MethodNames[17],mtProc,TypeInfo(_T12),[
TypeInfo(String),TypeInfo(String)],Addr(GetTemporaryFileName),cRegister);

RegisterProc(nil,MethodNames[18],mtProc,TypeInfo(_T13),[
TypeInfo(String),TypeInfo(String)],Addr(LoadStringFromRCData),cRegister);

RegisterProc(nil,MethodNames[19],mtProc,TypeInfo(_T14),[
TypeInfo(String),
TypeInfo(String),
TypeInfo(String)],Addr(AddUnInstallInfo),cRegister);

RegisterProc(nil,MethodNames[20],mtProc,TypeInfo(_T15),[
TypeInfo(String),
TypeInfo(TStringList)],Addr(AddUnInstallFilesInfo),cRegister);

RegisterProc(nil,MethodNames[21],mtProc,TypeInfo(_T16),[
TypeInfo(String),
TypeInfo(TStringList)],Addr(GetUninstallFilesInfo),cRegister);

RegisterProc(nil,MethodNames[22],mtProc,TypeInfo(_T17),[
TypeInfo(String)],Addr(RemoveUninstallFilesInfo),cRegister);

RegisterProc(nil,MethodNames[23],mtProc,TypeInfo(_T18),[
TypeInfo(String),
TypeInfo(String),TypeInfo(String)],Addr(GetUnInstallInfo),cRegister);

RegisterProc(nil,MethodNames[24],mtProc,TypeInfo(_T19),[TypeInfo(String)],Addr(SystemDirectory),cRegister);

RegisterProc(nil,MethodNames[25],mtProc,TypeInfo(_T20),[TypeInfo(String)],Addr(WindowsDirectory),cRegister);

RegisterProc(nil,MethodNames[26],mtProc,TypeInfo(_T21),[TypeInfo(String)],Addr(ProgramFilesDirectory),cRegister);

RegisterProc(nil,MethodNames[27],mtProc,TypeInfo(_T22),[
TypeInfo(THandle),
TypeInfo(String),TypeInfo(HKEY)],Addr(CreateRegKey),cRegister);

RegisterProc(nil,MethodNames[28],mtProc,TypeInfo(_T23),[
TypeInfo(HKEY),
TypeInfo(String),
TypeInfo(String)],Addr(ChangeRegStrValue),cRegister);

RegisterProc(nil,MethodNames[29],mtProc,TypeInfo(_T24),[
TypeInfo(String),TypeInfo(Boolean)],Addr(InstallCheckDelphiRunning),cRegister);

RegisterProc(nil,MethodNames[30],mtProc,TypeInfo(_T25),[
TypeInfo(String),TypeInfo(Boolean)],Addr(InstallCheckPrevVersion),cRegister);

RegisterProc(nil,MethodNames[31],mtProc,TypeInfo(_T26),[
TypeInfo(String),TypeInfo(Boolean)],Addr(IsAppInstalled),cRegister);

RegisterProc(nil,MethodNames[32],mtProc,TypeInfo(_T27),[
TypeInfo(String)],Addr(RemoveFile),cRegister);

RegisterProc(nil,MethodNames[33],mtProc,TypeInfo(_T28),[
TypeInfo(String)],Addr(RunBatFile),cRegister);

RegisterProc(nil,MethodNames[34],mtProc,TypeInfo(_T29),[
TypeInfo(String),
TypeInfo(Boolean),TypeInfo(DWORD)],Addr(RunBatFileEx),cRegister);

RegisterProc(nil,MethodNames[35],mtProc,TypeInfo(_T30),[
TypeInfo(String),
TypeInfo(String),
TypeInfo(String)],Addr(AddHelpToCntFile),cRegister);

RegisterProc(nil,MethodNames[36],mtProc,TypeInfo(_T31),[
TypeInfo(String),
TypeInfo(String)],Addr(RemoveHelpFromCntFile),cRegister);

RegisterProc(nil,MethodNames[37],mtProc,TypeInfo(_T32),[
TypeInfo(TDelphiVer),TypeInfo(String)],Addr(GetDelphiHelpCntFile),cRegister);

RegisterProc(nil,MethodNames[38],mtProc,TypeInfo(_T33),[
TypeInfo(TDelphiVer),
TypeInfo(String),
TypeInfo(String)],Addr(AddInstalledPackage),cRegister);

RegisterProc(nil,MethodNames[39],mtProc,TypeInfo(_T34),[
TypeInfo(String),TypeInfo(String)],Addr(ProcessFileTemplate),cRegister);

RegisterProc(nil,MethodNames[40],mtProc,TypeInfo(_T35),[
TypeInfo(String),
TypeInfo(String),
TypeInfo(String),
TypeInfo(String)],Addr(CreateLink),cRegister);

RegisterProc(nil,MethodNames[41],mtProc,TypeInfo(_T36),[TypeInfo(String)],Addr(StartMenuProgramsFolder),cRegister);

RegisterProc(nil,MethodNames[42],mtProc,TypeInfo(_T37),[
TypeInfo(String),
TypeInfo(String),
TypeInfo(THandle),TypeInfo(Boolean)],Addr(QueryDir),cRegister);

RegisterProc(nil,MethodNames[43],mtProc,TypeInfo(_T38),[
TypeInfo(String),
TypeInfo(String),
TypeInfo(THandle),TypeInfo(Boolean)],Addr(QueryComp),cRegister);

RegisterProc(nil,MethodNames[44],mtProc,TypeInfo(_T39),[
TypeInfo(String),TypeInfo(String)],Addr(AddSlash),cRegister);

RegisterProc(nil,MethodNames[45],mtProc,TypeInfo(_T40),[
TypeInfo(String),TypeInfo(String)],Addr(DCUpFolder),cRegister);

RegisterProc(nil,MethodNames[46],mtProc,TypeInfo(_T41),[
TypeInfo(String),TypeInfo(String)],Addr(RemoveSlash),cRegister);

RegisterProc(nil,MethodNames[47],mtProc,TypeInfo(_T42),[TypeInfo(TDelphiVer)],Addr(GetThisDelphiVer),cRegister);

RegisterProc(nil,MethodNames[48],mtProc,TypeInfo(_T43),NoParams,Addr(LoadUnRAR),cRegister);

RegisterProc(nil,MethodNames[49],mtProc,TypeInfo(_T44),NoParams,Addr(UnloadUnRAR),cRegister);

RegisterProc(nil,MethodNames[50],mtProc,TypeInfo(_T45),[
TypeInfo(String),TypeInfo(THandle)],Addr(OpenRARFile),cRegister);

RegisterProc(nil,MethodNames[51],mtProc,TypeInfo(_T46),[
TypeInfo(IDispatch),TypeInfo(THandle)],Addr(____RAROpenArchive__Wrapper),cRegister);

RegisterProc(nil,MethodNames[52],mtProc,TypeInfo(_T47),[
TypeInfo(THandle),TypeInfo(Integer)],Addr(RARCloseArchive),cRegister);

RegisterProc(nil,MethodNames[53],mtProc,TypeInfo(_T48),[
TypeInfo(THandle),
TypeInfo(IDispatch),TypeInfo(Integer)],Addr(____RARReadHeader__Wrapper),cRegister);

RegisterProc(nil,MethodNames[54],mtProc,TypeInfo(_T49),[
TypeInfo(THandle),
TypeInfo(TRARFileOperation),
TypeInfo(String),
TypeInfo(String),TypeInfo(Integer)],Addr(RARProcessFile),cRegister);

RegisterProc(nil,MethodNames[55],mtProc,TypeInfo(_T52),[
TypeInfo(THandle),
TypeInfo(String)],Addr(RARSetPassword),cRegister);

RegisterProc(nil,MethodNames[56],mtProc,TypeInfo(_T54),[
TypeInfo(String)],Addr(LoadUnRARFromFile),cRegister);

RegisterProc(nil,MethodNames[57],mtProc,TypeInfo(_T55),[TypeInfo(String)],Addr(GetDelphiDir),cRegister);

RegisterProc(nil,MethodNames[58],mtProc,TypeInfo(_T56),[TypeInfo(String)],Addr(GetDelphiSourceDirs),cRegister);

RegisterProc(nil,MethodNames[59],mtProc,TypeInfo(_T57),[
TypeInfo(TDelphiVer),TypeInfo(String)],Addr(GetDelphiIDEFileName),cRegister);

RegisterProc(nil,MethodNames[60],mtProc,TypeInfo(_T58),[
TypeInfo(TDelphiVer),TypeInfo(String)],Addr(GetDelphiCMDFileName),cRegister);

RegisterProc(nil,MethodNames[61],mtProc,TypeInfo(_T59),[
TypeInfo(TDelphiVer),
TypeInfo(String),TypeInfo(String)],Addr(GetDelphiRegKey),cRegister);

RegisterProc(nil,MethodNames[62],mtProc,TypeInfo(_T60),[
TypeInfo(TDelphiVer),TypeInfo(String)],Addr(GetDelphiHelpFolder),cRegister);

RegisterProc(nil,MethodNames[63],mtProc,TypeInfo(_T61),[
TypeInfo(TDelphiVer),TypeInfo(String)],Addr(GetSpecificDelphiDir),cRegister);

RegisterProc(nil,MethodNames[64],mtProc,TypeInfo(_T62),[
TypeInfo(TDelphiVer),
TypeInfo(TDCDelphiSourceDirsOpts),TypeInfo(String)],Addr(GetDelphiSourceDirsEx2),cRegister);

RegisterProc(nil,MethodNames[65],mtProc,TypeInfo(_T63),[
TypeInfo(TDelphiVer),TypeInfo(String)],Addr(GetDelphiSourceDirsEx),cRegister);

RegisterProc(nil,MethodNames[66],mtProc,TypeInfo(_T64),[
TypeInfo(String),
TypeInfo(TStrings)],Addr(CreateAllDirectories),cRegister);

RegisterProc(nil,MethodNames[67],mtProc,TypeInfo(_T65),[
TypeInfo(TDelphiVer),TypeInfo(String)],Addr(DCGenDPUPath),cRegister);

RegisterProc(nil,MethodNames[68],mtProc,TypeInfo(_T66),[
TypeInfo(String),TypeInfo(String)],Addr(ExtractValuePart),cRegister);

RegisterProc(nil,MethodNames[69],mtProc,TypeInfo(_T67),[
TypeInfo(String),TypeInfo(String)],Addr(ExtractNamePart),cRegister);

RegisterProc(nil,MethodNames[70],mtProc,TypeInfo(_T68),[
TypeInfo(String),
TypeInfo(String),TypeInfo(String)],Addr(ExtractValuePartEx),cRegister);

RegisterProc(nil,MethodNames[71],mtProc,TypeInfo(_T69),[
TypeInfo(String),
TypeInfo(String),TypeInfo(String)],Addr(ExtractNamePartEx),cRegister);

RegisterProc(nil,MethodNames[72],mtProc,TypeInfo(_T70),[
TypeInfo(TStrings),
TypeInfo(String),TypeInfo(Integer)],Addr(IndexOfValue),cRegister);

RegisterProc(nil,MethodNames[73],mtProc,TypeInfo(_T71),[
TypeInfo(String),TypeInfo(TDelphiVer)],Addr(GetDelphiVer),cRegister);

RegisterProc(nil,MethodNames[74],mtProc,TypeInfo(_T72),[
TypeInfo(TDelphiVer),TypeInfo(String)],Addr(GetDelphiPackagesKey),cRegister);

RegisterProc(nil,MethodNames[75],mtProc,TypeInfo(_T73),[
TypeInfo(String),
TypeInfo(Char),TypeInfo(String)],Addr(Quote),cRegister);

RegisterProc(nil,MethodNames[76],mtProc,TypeInfo(_T74),[
TypeInfo(String),TypeInfo(String)],Addr(QuoteFileName),cRegister);

RegisterProc(nil,MethodNames[77],mtProc,TypeInfo(_T75),[TypeInfo(Integer)],Addr(GetCDDeviceID),cRegister);

RegisterProc(nil,MethodNames[78],mtProc,TypeInfo(_T76),[
TypeInfo(Integer)],Addr(SetCDAudioVolume),cRegister);

RegisterProc(nil,MethodNames[79],mtProc,TypeInfo(_T77),[TypeInfo(Integer)],Addr(GetCDAudioVolume),cRegister);

RegisterProc(nil,MethodNames[80],mtProc,TypeInfo(_T78),[
TypeInfo(String),TypeInfo(String)],Addr(ConvertErrors),cRegister);

RegisterProc(nil,MethodNames[81],mtProc,TypeInfo(_T79),[
TypeInfo(TDelphiVer),TypeInfo(Boolean)],Addr(VersionCorrect),cRegister);

RegisterProc(nil,MethodNames[82],mtProc,TypeInfo(_T80),[
TypeInfo(TDelphiVer),
TypeInfo(String),
TypeInfo(String),
TypeInfo(String),
TypeInfo(String),TypeInfo(Boolean)],Addr(CompileFile),cRegister);

RegisterProc(nil,MethodNames[83],mtProc,TypeInfo(_T81),[
TypeInfo(String),
TypeInfo(String),
TypeInfo(String),
TypeInfo(Boolean),TypeInfo(Boolean)],Addr(RunProgram),cRegister);

RegisterProc(nil,MethodNames[84],mtProc,TypeInfo(_T82),[
TypeInfo(TStrings),
TypeInfo(TDelphiVer),TypeInfo(Boolean)],Addr(DCGetDelphiVerFromDefines),cRegister);

RegisterProc(nil,MethodNames[85],mtProc,TypeInfo(_T83),[
TypeInfo(String),
TypeInfo(TDelphiVer),TypeInfo(Boolean)],Addr(DCGetDelphiVerFromName),cRegister);

RegRegisterMethod(TDCPathDialog,'Execute',TypeInfo(_T84),[TypeInfo(Boolean)],Addr(TDCPathDialog.Execute));

//RegRegisterMethod(TResDialog,'InitDialog',TypeInfo(_T85),NoParams, pointer(0));
RegRegisterMethod(TResDialog,'InitDialog',TypeInfo(_T85),NoParams,  getVMTProcAddr('TResDialog','InitDialog',0));


RegisterProc(TResDialog,'Create',mtConstructor,TypeInfo(_T86),[
TypeInfo(Integer)], pointer(4),cRegister);

RegRegisterMethod(TResDialog,'Execute',TypeInfo(_T87),[TypeInfo(Boolean)],Addr(TResDialog.Execute));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'RARSetChangeVolProc',mtProc,TypeInfo(_T50),[
TypeInfo(THandle),
TypeInfo(TRARChangeVolProc)],Addr(RARSetChangeVolProc),cRegister)}

{RegisterProc(nil,'RARSetProcessDataProc',mtProc,TypeInfo(_T51),[
TypeInfo(THandle),
TypeInfo(TRARProcessDataProc)],Addr(RARSetProcessDataProc),cRegister)}

{RegisterProc(nil,'ExtractRARFile',mtProc,TypeInfo(_T53),[
TypeInfo(String),
TypeInfo(String),
TypeInfo(TRARFileExtractCallBack),
TypeInfo(TStrings),
TypeInfo(TStrings),
TypeInfo(TStrings),TypeInfo(Boolean)],Addr(ExtractRARFile),cRegister)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
