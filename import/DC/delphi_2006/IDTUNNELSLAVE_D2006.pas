{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDTUNNELSLAVE_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  IdException,
  IdHashCRC,
  IdCoder,
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Classes,
  SyncObjs,
  IdTunnelCommon,
  IdTCPServer,
  IdTCPClient,
  IdGlobal,
  IdStack,
  IdResourceStrings,
  IdThread,
  IdComponent,
  IdTCPConnection,
  IdTunnelSlave;
function ConvertTIdHeaderToVariant(var R : TIdHeader) : OleVariant;
function ConvertVariantToTIdHeader(const V : OleVariant) : TIdHeader;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TIdHeader__Wrapper = class(TDCRecordWrapper)
private
fR : TIdHeader;
public
function GetRecordPtr : pointer; override;
published
procedure setCRC16(const val : Word);
function getCRC16 : Word;
property CRC16 : Word read getCRC16 write setCRC16;
procedure setMsgType(const val : Word);
function getMsgType : Word;
property MsgType : Word read getMsgType write setMsgType;
procedure setMsgLen(const val : Word);
function getMsgLen : Word;
property MsgLen : Word read getMsgLen write setMsgLen;
procedure setUserId(const val : Word);
function getUserId : Word;
property UserId : Word read getUserId write setUserId;
procedure setPort(const val : Word);
function getPort : Word;
property Port : Word read getPort write setPort;
end;
type __TIdTunnelSlave__ = class(TIdTunnelSlave);
type
_T0 = procedure  of object;

_T1 = procedure (const p0 : IDispatch;
var p1 : String) of object;

_T2 = procedure (p0 : TReceiver) of object;

_T3 = procedure (var p0 : String) of object;

_T4 = _T1;

_T5 = procedure (p0 : TComponent;
const p1 : String) of object;

_T6 = procedure (p0 : TSlaveThread) of object;

_T7 = procedure (p0 : Integer;
p1 : Integer) of object;

_T8 = procedure (p0 : Integer;
var p1 : Integer) of object;

_T9 = procedure (p0 : TIdTunnelSlave) of object;

function __TIdHeader__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIdHeader__Wrapper.setCRC16(const val : Word);
begin
TIdHeader(GetRecordPtr^).CRC16 := val;
end;
function __TIdHeader__Wrapper.getCRC16 : Word;
begin
result := TIdHeader(GetRecordPtr^).CRC16;
end;
procedure __TIdHeader__Wrapper.setMsgType(const val : Word);
begin
TIdHeader(GetRecordPtr^).MsgType := val;
end;
function __TIdHeader__Wrapper.getMsgType : Word;
begin
result := TIdHeader(GetRecordPtr^).MsgType;
end;
procedure __TIdHeader__Wrapper.setMsgLen(const val : Word);
begin
TIdHeader(GetRecordPtr^).MsgLen := val;
end;
function __TIdHeader__Wrapper.getMsgLen : Word;
begin
result := TIdHeader(GetRecordPtr^).MsgLen;
end;
procedure __TIdHeader__Wrapper.setUserId(const val : Word);
begin
TIdHeader(GetRecordPtr^).UserId := val;
end;
function __TIdHeader__Wrapper.getUserId : Word;
begin
result := TIdHeader(GetRecordPtr^).UserId;
end;
procedure __TIdHeader__Wrapper.setPort(const val : Word);
begin
TIdHeader(GetRecordPtr^).Port := val;
end;
function __TIdHeader__Wrapper.getPort : Word;
begin
result := TIdHeader(GetRecordPtr^).Port;
end;
procedure __TIdTunnelSlave__DoBeforeTunnelConnect__Wrapper(__Instance : TIdTunnelSlave;
const p0 : IDispatch;
var p1 : String);
var
__p0 : ^TIdHeader;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__TIdTunnelSlave__(__Instance).DoBeforeTunnelConnect(__p0^,p1);
end;

procedure __TIdTunnelSlave__DoTransformSend__Wrapper(__Instance : TIdTunnelSlave;
const p0 : IDispatch;
var p1 : String);
var
__p0 : ^TIdHeader;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__TIdTunnelSlave__(__Instance).DoTransformSend(__p0^,p1);
end;


type __TIdHeader__Wrapper__ = class(__TIdHeader__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIdHeader__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIdHeaderToVariant(var R : TIdHeader) : OleVariant;
var
__rw : __TIdHeader__Wrapper__;
begin
__rw := __TIdHeader__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIdHeader(const V : OleVariant) : TIdHeader;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIdHeader((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTIdTunnelSlave__Active(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdTunnelSlave(Instance).Active;
end;

procedure __DC__SetTIdTunnelSlave__Active(Instance : TObject; Params : PVariantArgList);
begin
TIdTunnelSlave(Instance).Active:=OleVariant(Params^[0]);
end;

function __DC__GetTIdTunnelSlave__Logger(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdTunnelSlave(Instance).Logger);
end;

procedure __DC__SetTIdTunnelSlave__Logger(Instance : TObject; Params : PVariantArgList);
begin
TIdTunnelSlave(Instance).Logger:=TLogger(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIdTunnelSlave__NumClients(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdTunnelSlave(Instance).NumClients;
end;

function __DC__GetTSlaveThread__Executed(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSlaveThread(Instance).Executed;
end;

procedure __DC__SetTSlaveThread__Executed(Instance : TObject; Params : PVariantArgList);
begin
TSlaveThread(Instance).Executed:=OleVariant(Params^[0]);
end;

function __DC__GetTSlaveThread__Connection(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TSlaveThread(Instance).Connection);
end;

procedure __RegisterProps;
begin
RegisterProperty(TIdTunnelSlave,'Active',__DC__GetTIdTunnelSlave__Active,__DC__SetTIdTunnelSlave__Active);
RegisterProperty(TIdTunnelSlave,'Logger',__DC__GetTIdTunnelSlave__Logger,__DC__SetTIdTunnelSlave__Logger);
RegisterProperty(TIdTunnelSlave,'NumClients',__DC__GetTIdTunnelSlave__NumClients,nil);
RegisterProperty(TSlaveThread,'Executed',__DC__GetTSlaveThread__Executed,__DC__SetTSlaveThread__Executed);
RegisterProperty(TSlaveThread,'Connection',__DC__GetTSlaveThread__Connection,nil);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..2] of TClass = (
TClientData,
TIdTunnelSlave,
TSlaveThread
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegisterProc(TClientData,'Create',mtConstructor,TypeInfo(_T0),NoParams,Addr(TClientData.Create),cRegister);

//RegRegisterMethod(TIdTunnelSlave,'DoBeforeTunnelConnect',TypeInfo(_T1),[TypeInfo(IDispatch),TypeInfo(String)], pointer(100));
RegRegisterMethod(TIdTunnelSlave,'DoBeforeTunnelConnect',TypeInfo(_T1),[TypeInfo(IDispatch),TypeInfo(String)],  getVMTProcAddr('TIdTunnelSlave','DoBeforeTunnelConnect',100));


//RegRegisterMethod(TIdTunnelSlave,'DoTransformRead',TypeInfo(_T2),[TypeInfo(TReceiver)], pointer(104));
RegRegisterMethod(TIdTunnelSlave,'DoTransformRead',TypeInfo(_T2),[TypeInfo(TReceiver)],  getVMTProcAddr('TIdTunnelSlave','DoTransformRead',104));


//RegRegisterMethod(TIdTunnelSlave,'DoInterpretMsg',TypeInfo(_T3),[TypeInfo(String)], pointer(108));
RegRegisterMethod(TIdTunnelSlave,'DoInterpretMsg',TypeInfo(_T3),[TypeInfo(String)],  getVMTProcAddr('TIdTunnelSlave','DoInterpretMsg',108));


//RegRegisterMethod(TIdTunnelSlave,'DoTransformSend',TypeInfo(_T4),[TypeInfo(IDispatch),TypeInfo(String)], pointer(112));
RegRegisterMethod(TIdTunnelSlave,'DoTransformSend',TypeInfo(_T4),[TypeInfo(IDispatch),TypeInfo(String)],  getVMTProcAddr('TIdTunnelSlave','DoTransformSend',112));


//RegRegisterMethod(TIdTunnelSlave,'DoStatus',TypeInfo(_T5),[TypeInfo(TComponent),TypeInfo(String)], pointer(116));
RegRegisterMethod(TIdTunnelSlave,'DoStatus',TypeInfo(_T5),[TypeInfo(TComponent),TypeInfo(String)],  getVMTProcAddr('TIdTunnelSlave','DoStatus',116));


//RegRegisterMethod(TIdTunnelSlave,'DoTunnelDisconnect',TypeInfo(_T6),[TypeInfo(TSlaveThread)], pointer(120));
RegRegisterMethod(TIdTunnelSlave,'DoTunnelDisconnect',TypeInfo(_T6),[TypeInfo(TSlaveThread)],  getVMTProcAddr('TIdTunnelSlave','DoTunnelDisconnect',120));


RegRegisterMethod(TIdTunnelSlave,'SetStatistics',TypeInfo(_T7),[
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TIdTunnelSlave.SetStatistics));

RegRegisterMethod(TIdTunnelSlave,'GetStatistics',TypeInfo(_T8),[
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TIdTunnelSlave.GetStatistics));

RegisterProc(TSlaveThread,'Create',mtConstructor,TypeInfo(_T9),[
TypeInfo(TIdTunnelSlave)],Addr(TSlaveThread.Create),cRegister);

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
RegisterEvent(TypeInfo(TTunnelEvent),[
TypeInfo(TSlaveThread)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
