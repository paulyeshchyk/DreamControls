{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit MXGRID_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  Types,
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  SysUtils,
  Classes,
  Dialogs,
  Controls,
  StdCtrls,
  Graphics,
  DB,
  Menus,
  Grids,
  Forms,
  Mxarrays,
  Mxconsts,
  MXDB,
  MXBUTTON,
  MXCOMMON,
  ImgList,
  MXGRID;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TRect__Wrapper = class(TDCRecordWrapper)
private
fR : TRect;
public
function GetRecordPtr : pointer; override;
published
procedure setLeft(const val : Longint);
function getLeft : Longint;
property Left : Longint read getLeft write setLeft;
procedure setTop(const val : Longint);
function getTop : Longint;
property Top : Longint read getTop write setTop;
procedure setRight(const val : Longint);
function getRight : Longint;
property Right : Longint read getRight write setRight;
procedure setBottom(const val : Longint);
function getBottom : Longint;
property Bottom : Longint read getBottom write setBottom;
end;
type
_T0 = function (p0 : Longint;
p1 : Longint): IDispatch of object;

_T1 = function (p0 : Integer;
p1 : Integer;
var p2 : TValueArray): Boolean of object;

_T2 = function (p0 : Integer;
p1 : Integer;
var p2 : string;
var p3 : TDecisionDrawState): Boolean of object;

_T3 = procedure (p0 : TCustomDecisionGrid) of object;

function __TRect__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRect__Wrapper.setLeft(const val : Longint);
begin
TRect(GetRecordPtr^).Left := val;
end;
function __TRect__Wrapper.getLeft : Longint;
begin
result := TRect(GetRecordPtr^).Left;
end;
procedure __TRect__Wrapper.setTop(const val : Longint);
begin
TRect(GetRecordPtr^).Top := val;
end;
function __TRect__Wrapper.getTop : Longint;
begin
result := TRect(GetRecordPtr^).Top;
end;
procedure __TRect__Wrapper.setRight(const val : Longint);
begin
TRect(GetRecordPtr^).Right := val;
end;
function __TRect__Wrapper.getRight : Longint;
begin
result := TRect(GetRecordPtr^).Right;
end;
procedure __TRect__Wrapper.setBottom(const val : Longint);
begin
TRect(GetRecordPtr^).Bottom := val;
end;
function __TRect__Wrapper.getBottom : Longint;
begin
result := TRect(GetRecordPtr^).Bottom;
end;
function __TCustomDecisionGrid__CellRect__Wrapper(__Instance : TCustomDecisionGrid;
p0 : Longint;
p1 : Longint): IDispatch;
var
__result : TRect;
__wrapper : __TRect__Wrapper;
begin
__result := TCustomDecisionGrid(__Instance).CellRect(p0,p1);
__wrapper := __TRect__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;


type __TRect__Wrapper__ = class(__TRect__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRect__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
var
__rw : __TRect__Wrapper__;
begin
__rw := __TRect__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRect((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTCustomDecisionGrid__DecisionSource(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomDecisionGrid(Instance).DecisionSource);
end;

procedure __DC__SetTCustomDecisionGrid__DecisionSource(Instance : TObject; Params : PVariantArgList);
begin
TCustomDecisionGrid(Instance).DecisionSource:=TDecisionSource(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomDecisionGrid__Totals(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomDecisionGrid(Instance).Totals;
end;

procedure __DC__SetTCustomDecisionGrid__Totals(Instance : TObject; Params : PVariantArgList);
begin
TCustomDecisionGrid(Instance).Totals:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomDecisionGrid__Cells(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomDecisionGrid(Instance).Cells[OleVariant(Params^[1]), OleVariant(Params^[0])];
end;

function __DC__GetTCustomDecisionGrid__ShowCubeEditor(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomDecisionGrid(Instance).ShowCubeEditor;
end;

procedure __DC__SetTCustomDecisionGrid__ShowCubeEditor(Instance : TObject; Params : PVariantArgList);
begin
TCustomDecisionGrid(Instance).ShowCubeEditor:=OleVariant(Params^[0]);
end;

function __DC__GetTDecisionGrid__RowCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDecisionGrid(Instance).RowCount;
end;

function __DC__GetTDecisionGrid__ColCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDecisionGrid(Instance).ColCount;
end;

function __DC__GetTDecisionGrid__FixedRows(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDecisionGrid(Instance).FixedRows;
end;

function __DC__GetTDecisionGrid__FixedCols(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDecisionGrid(Instance).FixedCols;
end;

function __DC__GetTDisplayDims__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDisplayDims(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __DC__SetTDisplayDims__Items(Instance : TObject; Params : PVariantArgList);
begin
TDisplayDims(Instance).Items[OleVariant(Params^[1])]:=TDisplayDim(VarToObject(OleVariant(Params^[0])));
end;

procedure __RegisterProps;
begin
RegisterProperty(TCustomDecisionGrid,'DecisionSource',__DC__GetTCustomDecisionGrid__DecisionSource,__DC__SetTCustomDecisionGrid__DecisionSource);
RegisterProperty(TCustomDecisionGrid,'Totals',__DC__GetTCustomDecisionGrid__Totals,__DC__SetTCustomDecisionGrid__Totals);
RegisterIndexedProperty(TCustomDecisionGrid,'Cells',2,False,__DC__GetTCustomDecisionGrid__Cells,nil);
RegisterProperty(TCustomDecisionGrid,'ShowCubeEditor',__DC__GetTCustomDecisionGrid__ShowCubeEditor,__DC__SetTCustomDecisionGrid__ShowCubeEditor);
RegisterProperty(TDecisionGrid,'RowCount',__DC__GetTDecisionGrid__RowCount,nil);
RegisterProperty(TDecisionGrid,'ColCount',__DC__GetTDecisionGrid__ColCount,nil);
RegisterProperty(TDecisionGrid,'FixedRows',__DC__GetTDecisionGrid__FixedRows,nil);
RegisterProperty(TDecisionGrid,'FixedCols',__DC__GetTDecisionGrid__FixedCols,nil);
RegisterIndexedProperty(TDisplayDims,'Items',1,True,__DC__GetTDisplayDims__Items,__DC__SetTDisplayDims__Items);
end;

const __ConstNames0 : array[0..42] of string = (
'cgGridLines'
,'cgOutliner'
,'cgPivotable'
,'csNormal'
,'csPivoting'
,'dsGroupStart'
,'dsRowCaption'
,'dsColCaption'
,'dsSum'
,'dsRowValue'
,'dsColValue'
,'dsData'
,'dsOpenAfter'
,'dsCloseAfter'
,'dsCloseBefore'
,'dsOpenBefore'
,'dsRowIndicator'
,'dsColIndicator'
,'dsRowPlus'
,'dsColPlus'
,'dsNone'
,'psNone'
,'psLeftPivot'
,'psMiddlePivot'
,'psRightPivot'
,'psTopPivot'
,'ctNone'
,'ctCaptionRow'
,'ctCaptionCol'
,'ctNewCaptionCol'
,'ctRowLabel'
,'ctColLabel'
,'ctData'
,'ctRowPlus'
,'ctColPlus'
,'ctRowIndicator'
,'ctColIndicator'
,'bpLeft'
,'bpMiddle'
,'bpRight'
,'tdDisplay'
,'tdSubTotals'
,'tdMetaData'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,cgGridLines));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,cgOutliner));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,cgPivotable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,csNormal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,csPivoting));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,dsGroupStart));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,dsRowCaption));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,dsColCaption));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,dsSum));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,dsRowValue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,dsColValue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,dsData));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,dsOpenAfter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,dsCloseAfter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,dsCloseBefore));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,dsOpenBefore));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,dsRowIndicator));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,dsColIndicator));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,dsRowPlus));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,dsColPlus));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,dsNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,psNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,psLeftPivot));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,psMiddlePivot));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,psRightPivot));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,psTopPivot));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,ctNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,ctCaptionRow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,ctCaptionCol));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,ctNewCaptionCol));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,ctRowLabel));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,ctColLabel));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,ctData));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,ctRowPlus));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,ctColPlus));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,ctRowIndicator));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,ctColIndicator));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,bpLeft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,bpMiddle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,bpRight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,tdDisplay));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,tdSubTotals));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,tdMetaData));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..5] of TClass = (
TCustomDecisionGrid,
TDecisionGrid,
TDecisionGridDataLink,
TDisplayDim,
TDisplayDims,
TValueArray
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegRegisterMethod(TCustomDecisionGrid,'CellRect',TypeInfo(_T0),[
TypeInfo(Longint),
TypeInfo(Longint),TypeInfo(IDispatch)],Addr(__TCustomDecisionGrid__CellRect__Wrapper));

RegRegisterMethod(TCustomDecisionGrid,'CellValueArray',TypeInfo(_T1),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(TValueArray),TypeInfo(Boolean)],Addr(TCustomDecisionGrid.CellValueArray));

RegRegisterMethod(TCustomDecisionGrid,'CellDrawState',TypeInfo(_T2),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(string),
TypeInfo(TDecisionDrawState),TypeInfo(Boolean)],Addr(TCustomDecisionGrid.CellDrawState));

RegisterProc(TDecisionGridDataLink,'Create',mtConstructor,TypeInfo(_T3),[
TypeInfo(TCustomDecisionGrid)],Addr(TDecisionGridDataLink.Create),cRegister);

end;
initialization
_mreg_0;
RegisterEvent(TypeInfo(TDecisionDrawCellEvent),[
TypeInfo(TObject),
TypeInfo(Longint),
TypeInfo(Longint),
TypeInfo(string),
TypeInfo(TFont),
TypeInfo(TColor),
TypeInfo(TGridDrawState),
TypeInfo(TDecisionDrawState)]);

RegisterEvent(TypeInfo(TDecisionExamineCellEvent),[
TypeInfo(TObject),
TypeInfo(Longint),
TypeInfo(Longint),
TypeInfo(Integer),
TypeInfo(TValueArray)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
