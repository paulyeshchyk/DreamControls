{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit dcfdmemo_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcapp,
  dccdes,
  classes,
  sysutils,
  dcstring,
  forms,
  dcfdes,
  dcgen,
  dialogs,
  windows,
  dcconsts,
  typinfo,
  dcmemo,
  messages,
  editunit,
  dcidemem,
  dcidedes,
  dcdreamlib,
  dcfdmemo;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure  of object;

_T1 = function (const p0 : String): String of object;

{_T2 = function : TIDEFormObjectClass of object;}

_T3 = function : String of object;

function __DC__GetTIDEFormMemoObject__FormObject(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIDEFormMemoObject(Instance).FormObject);
end;

function __DC__GetTIDEFormMemoObject__MemoObject(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIDEFormMemoObject(Instance).MemoObject);
end;

procedure __RegisterProps;
begin
RegisterProperty(TIDEFormMemoObject,'FormObject',__DC__GetTIDEFormMemoObject__FormObject,nil);
RegisterProperty(TIDEFormMemoObject,'MemoObject',__DC__GetTIDEFormMemoObject__MemoObject,nil);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..20] of TClass = (
TDelphiApplication,
TDelphiDataModuleObject,
TDelphiFormObject,
TForm2HMTLSaveObject,
TFormMemoSaveObject,
TIDEDataModuleMemoObject,
TIDEFormMemoObject,
TJScriptApplication,
TJSDataModuleObject,
TJSFormObject,
TOpenFormMemoObject,
TPerlApplication,
TPerlDataModuleObject,
TPerlFormObject,
TPythonApplication,
TPythonDataModuleObject,
TPythonFormObject,
TScriptApplication,
TVBScriptApplication,
TVBSDataModuleObject,
TVBSFormObject
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TIDEFormMemoObject,'AfterCreate',TypeInfo(_T0),NoParams, pointer(232));
RegRegisterMethod(TIDEFormMemoObject,'AfterCreate',TypeInfo(_T0),NoParams,  getVMTProcAddr('TIDEFormMemoObject','AfterCreate',232));


//RegRegisterMethod(TIDEFormMemoObject,'FormFileName',TypeInfo(_T1),[TypeInfo(String),TypeInfo(String)], pointer(236));
RegRegisterMethod(TIDEFormMemoObject,'FormFileName',TypeInfo(_T1),[TypeInfo(String),TypeInfo(String)],  getVMTProcAddr('TIDEFormMemoObject','FormFileName',236));


//RegRegisterMethod(TScriptApplication,'GetDefaultUnitName',TypeInfo(_T3),[TypeInfo(String)], pointer(216));
RegRegisterMethod(TScriptApplication,'GetDefaultUnitName',TypeInfo(_T3),[TypeInfo(String)],  getVMTProcAddr('TScriptApplication','GetDefaultUnitName',216));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
{RegRegisterMethod(TIDEFormMemoObject,'GetFormObjectClass',TypeInfo(_T2),[TypeInfo(TIDEFormObjectClass)], pointer(240))}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
