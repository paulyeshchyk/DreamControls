{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit TOOLSAPI_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  Types,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  SysUtils,
  Classes,
  ActiveX,
  TypInfo,
  DockForm,
  Menus,
  ActnList,
  Graphics,
  ImgList,
  Forms,
  Controls,
  ComCtrls,
  XMLIntf,
  ToolsAPI;
function ConvertTKeyBindingRecToVariant(var R : TKeyBindingRec) : OleVariant;
function ConvertVariantToTKeyBindingRec(const V : OleVariant) : TKeyBindingRec;
function ConvertTOTACharPosToVariant(var R : TOTACharPos) : OleVariant;
function ConvertVariantToTOTACharPos(const V : OleVariant) : TOTACharPos;
function ConvertTOTAEditPosToVariant(var R : TOTAEditPos) : OleVariant;
function ConvertVariantToTOTAEditPos(const V : OleVariant) : TOTAEditPos;
function ConvertTOTAErrorToVariant(var R : TOTAError) : OleVariant;
function ConvertVariantToTOTAError(const V : OleVariant) : TOTAError;
function ConvertTOTAOptionNameToVariant(var R : TOTAOptionName) : OleVariant;
function ConvertVariantToTOTAOptionName(const V : OleVariant) : TOTAOptionName;
function ConvertTOTARegionToVariant(var R : TOTARegion) : OleVariant;
function ConvertVariantToTOTARegion(const V : OleVariant) : TOTARegion;
function ConvertTOTAThreadContextToVariant(var R : TOTAThreadContext) : OleVariant;
function ConvertVariantToTOTAThreadContext(const V : OleVariant) : TOTAThreadContext;
function ConvertTOTAXMMRegToVariant(var R : TOTAXMMReg) : OleVariant;
function ConvertVariantToTOTAXMMReg(const V : OleVariant) : TOTAXMMReg;
function ConvertTOTAXMMRegsToVariant(var R : TOTAXMMRegs) : OleVariant;
function ConvertVariantToTOTAXMMRegs(const V : OleVariant) : TOTAXMMRegs;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TKeyBindingRec__Wrapper = class(TDCRecordWrapper)
private
fR : TKeyBindingRec;
public
function GetRecordPtr : pointer; override;
published
procedure setKeyCode(const val : TShortcut);
function getKeyCode : TShortcut;
property KeyCode : TShortcut read getKeyCode write setKeyCode;
procedure setNext(const val : Integer);
function getNext : Integer;
property Next : Integer read getNext write setNext;
procedure setReserved(const val : Integer);
function getReserved : Integer;
property Reserved : Integer read getReserved write setReserved;
end;
type __TOTACharPos__Wrapper = class(TDCRecordWrapper)
private
fR : TOTACharPos;
public
function GetRecordPtr : pointer; override;
published
procedure setCharIndex(const val : SmallInt);
function getCharIndex : SmallInt;
property CharIndex : SmallInt read getCharIndex write setCharIndex;
procedure setLine(const val : Longint);
function getLine : Longint;
property Line : Longint read getLine write setLine;
end;
type __TOTAEditPos__Wrapper = class(TDCRecordWrapper)
private
fR : TOTAEditPos;
public
function GetRecordPtr : pointer; override;
published
procedure setCol(const val : SmallInt);
function getCol : SmallInt;
property Col : SmallInt read getCol write setCol;
procedure setLine(const val : Longint);
function getLine : Longint;
property Line : Longint read getLine write setLine;
end;
type __TOTAError__Wrapper = class(TDCRecordWrapper)
private
fR : TOTAError;
public
function GetRecordPtr : pointer; override;
published
procedure setText(const val : AnsiString);
function getText : AnsiString;
property Text : AnsiString read getText write setText;
end;
type __TOTAOptionName__Wrapper = class(TDCRecordWrapper)
private
fR : TOTAOptionName;
public
function GetRecordPtr : pointer; override;
published
procedure setName(const val : AnsiString);
function getName : AnsiString;
property Name : AnsiString read getName write setName;
procedure setKind(const val : TTypeKind);
function getKind : TTypeKind;
property Kind : TTypeKind read getKind write setKind;
end;
type __TOTARegion__Wrapper = class(TDCRecordWrapper)
private
fR : TOTARegion;
public
function GetRecordPtr : pointer; override;
published
procedure setRegionKind(const val : TOTARegionKind);
function getRegionKind : TOTARegionKind;
property RegionKind : TOTARegionKind read getRegionKind write setRegionKind;
procedure setName(const val : AnsiString);
function getName : AnsiString;
property Name : AnsiString read getName write setName;
procedure setActive(const val : Boolean);
function getActive : Boolean;
property Active : Boolean read getActive write setActive;
end;
type __TOTAThreadContext__Wrapper = class(TDCRecordWrapper)
private
fR : TOTAThreadContext;
public
function GetRecordPtr : pointer; override;
published
procedure setContextFlags(const val : DWORD);
function getContextFlags : DWORD;
property ContextFlags : DWORD read getContextFlags write setContextFlags;
procedure setDr0(const val : DWORD);
function getDr0 : DWORD;
property Dr0 : DWORD read getDr0 write setDr0;
procedure setDr1(const val : DWORD);
function getDr1 : DWORD;
property Dr1 : DWORD read getDr1 write setDr1;
procedure setDr2(const val : DWORD);
function getDr2 : DWORD;
property Dr2 : DWORD read getDr2 write setDr2;
procedure setDr3(const val : DWORD);
function getDr3 : DWORD;
property Dr3 : DWORD read getDr3 write setDr3;
procedure setDr6(const val : DWORD);
function getDr6 : DWORD;
property Dr6 : DWORD read getDr6 write setDr6;
procedure setDr7(const val : DWORD);
function getDr7 : DWORD;
property Dr7 : DWORD read getDr7 write setDr7;
procedure setSegGs(const val : DWORD);
function getSegGs : DWORD;
property SegGs : DWORD read getSegGs write setSegGs;
procedure setSegFs(const val : DWORD);
function getSegFs : DWORD;
property SegFs : DWORD read getSegFs write setSegFs;
procedure setSegEs(const val : DWORD);
function getSegEs : DWORD;
property SegEs : DWORD read getSegEs write setSegEs;
procedure setSegDs(const val : DWORD);
function getSegDs : DWORD;
property SegDs : DWORD read getSegDs write setSegDs;
procedure setEdi(const val : DWORD);
function getEdi : DWORD;
property Edi : DWORD read getEdi write setEdi;
procedure setEsi(const val : DWORD);
function getEsi : DWORD;
property Esi : DWORD read getEsi write setEsi;
procedure setEbx(const val : DWORD);
function getEbx : DWORD;
property Ebx : DWORD read getEbx write setEbx;
procedure setEdx(const val : DWORD);
function getEdx : DWORD;
property Edx : DWORD read getEdx write setEdx;
procedure setEcx(const val : DWORD);
function getEcx : DWORD;
property Ecx : DWORD read getEcx write setEcx;
procedure setEax(const val : DWORD);
function getEax : DWORD;
property Eax : DWORD read getEax write setEax;
procedure setEbp(const val : DWORD);
function getEbp : DWORD;
property Ebp : DWORD read getEbp write setEbp;
procedure setEip(const val : DWORD);
function getEip : DWORD;
property Eip : DWORD read getEip write setEip;
procedure setSegCs(const val : DWORD);
function getSegCs : DWORD;
property SegCs : DWORD read getSegCs write setSegCs;
procedure setEFlags(const val : DWORD);
function getEFlags : DWORD;
property EFlags : DWORD read getEFlags write setEFlags;
procedure setEsp(const val : DWORD);
function getEsp : DWORD;
property Esp : DWORD read getEsp write setEsp;
procedure setSegSs(const val : DWORD);
function getSegSs : DWORD;
property SegSs : DWORD read getSegSs write setSegSs;
end;
type __TOTAXMMReg__Wrapper = class(TDCRecordWrapper)
private
fR : TOTAXMMReg;
public
function GetRecordPtr : pointer; override;
published
end;
type __TOTAXMMRegs__Wrapper = class(TDCRecordWrapper)
private
fR : TOTAXMMRegs;
public
function GetRecordPtr : pointer; override;
published
procedure setMXCSR(const val : LongWord);
function getMXCSR : LongWord;
property MXCSR : LongWord read getMXCSR write setMXCSR;
end;
type
{_T0 = procedure (const p0 : IOTAWizard) of object;}

{_T1 = function (const p0 : string): IOTAFile of object;}

{_T2 = function : IOTAProject of object;}

{_T3 = function : IOTAPersonalityServices of object;}

_T4 = procedure (const p0 : string;
const p1 : TDateTime) of object;

_T5 = function : string of object;

_T6 = function : TDateTime of object;

_T7 = procedure (p0 : TStrings;
p1 : Boolean) of object;

function __TKeyBindingRec__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TKeyBindingRec__Wrapper.setKeyCode(const val : TShortcut);
begin
TKeyBindingRec(GetRecordPtr^).KeyCode := val;
end;
function __TKeyBindingRec__Wrapper.getKeyCode : TShortcut;
begin
result := TKeyBindingRec(GetRecordPtr^).KeyCode;
end;
procedure __TKeyBindingRec__Wrapper.setNext(const val : Integer);
begin
TKeyBindingRec(GetRecordPtr^).Next := val;
end;
function __TKeyBindingRec__Wrapper.getNext : Integer;
begin
result := TKeyBindingRec(GetRecordPtr^).Next;
end;
procedure __TKeyBindingRec__Wrapper.setReserved(const val : Integer);
begin
TKeyBindingRec(GetRecordPtr^).Reserved := val;
end;
function __TKeyBindingRec__Wrapper.getReserved : Integer;
begin
result := TKeyBindingRec(GetRecordPtr^).Reserved;
end;
function __TOTACharPos__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TOTACharPos__Wrapper.setCharIndex(const val : SmallInt);
begin
TOTACharPos(GetRecordPtr^).CharIndex := val;
end;
function __TOTACharPos__Wrapper.getCharIndex : SmallInt;
begin
result := TOTACharPos(GetRecordPtr^).CharIndex;
end;
procedure __TOTACharPos__Wrapper.setLine(const val : Longint);
begin
TOTACharPos(GetRecordPtr^).Line := val;
end;
function __TOTACharPos__Wrapper.getLine : Longint;
begin
result := TOTACharPos(GetRecordPtr^).Line;
end;
function __TOTAEditPos__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TOTAEditPos__Wrapper.setCol(const val : SmallInt);
begin
TOTAEditPos(GetRecordPtr^).Col := val;
end;
function __TOTAEditPos__Wrapper.getCol : SmallInt;
begin
result := TOTAEditPos(GetRecordPtr^).Col;
end;
procedure __TOTAEditPos__Wrapper.setLine(const val : Longint);
begin
TOTAEditPos(GetRecordPtr^).Line := val;
end;
function __TOTAEditPos__Wrapper.getLine : Longint;
begin
result := TOTAEditPos(GetRecordPtr^).Line;
end;
function __TOTAError__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TOTAError__Wrapper.setText(const val : AnsiString);
begin
TOTAError(GetRecordPtr^).Text := val;
end;
function __TOTAError__Wrapper.getText : AnsiString;
begin
result := TOTAError(GetRecordPtr^).Text;
end;
function __TOTAOptionName__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TOTAOptionName__Wrapper.setName(const val : AnsiString);
begin
TOTAOptionName(GetRecordPtr^).Name := val;
end;
function __TOTAOptionName__Wrapper.getName : AnsiString;
begin
result := TOTAOptionName(GetRecordPtr^).Name;
end;
procedure __TOTAOptionName__Wrapper.setKind(const val : TTypeKind);
begin
TOTAOptionName(GetRecordPtr^).Kind := val;
end;
function __TOTAOptionName__Wrapper.getKind : TTypeKind;
begin
result := TOTAOptionName(GetRecordPtr^).Kind;
end;
function __TOTARegion__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TOTARegion__Wrapper.setRegionKind(const val : TOTARegionKind);
begin
TOTARegion(GetRecordPtr^).RegionKind := val;
end;
function __TOTARegion__Wrapper.getRegionKind : TOTARegionKind;
begin
result := TOTARegion(GetRecordPtr^).RegionKind;
end;
procedure __TOTARegion__Wrapper.setName(const val : AnsiString);
begin
TOTARegion(GetRecordPtr^).Name := val;
end;
function __TOTARegion__Wrapper.getName : AnsiString;
begin
result := TOTARegion(GetRecordPtr^).Name;
end;
procedure __TOTARegion__Wrapper.setActive(const val : Boolean);
begin
TOTARegion(GetRecordPtr^).Active := val;
end;
function __TOTARegion__Wrapper.getActive : Boolean;
begin
result := TOTARegion(GetRecordPtr^).Active;
end;
function __TOTAThreadContext__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TOTAThreadContext__Wrapper.setContextFlags(const val : DWORD);
begin
TOTAThreadContext(GetRecordPtr^).ContextFlags := val;
end;
function __TOTAThreadContext__Wrapper.getContextFlags : DWORD;
begin
result := TOTAThreadContext(GetRecordPtr^).ContextFlags;
end;
procedure __TOTAThreadContext__Wrapper.setDr0(const val : DWORD);
begin
TOTAThreadContext(GetRecordPtr^).Dr0 := val;
end;
function __TOTAThreadContext__Wrapper.getDr0 : DWORD;
begin
result := TOTAThreadContext(GetRecordPtr^).Dr0;
end;
procedure __TOTAThreadContext__Wrapper.setDr1(const val : DWORD);
begin
TOTAThreadContext(GetRecordPtr^).Dr1 := val;
end;
function __TOTAThreadContext__Wrapper.getDr1 : DWORD;
begin
result := TOTAThreadContext(GetRecordPtr^).Dr1;
end;
procedure __TOTAThreadContext__Wrapper.setDr2(const val : DWORD);
begin
TOTAThreadContext(GetRecordPtr^).Dr2 := val;
end;
function __TOTAThreadContext__Wrapper.getDr2 : DWORD;
begin
result := TOTAThreadContext(GetRecordPtr^).Dr2;
end;
procedure __TOTAThreadContext__Wrapper.setDr3(const val : DWORD);
begin
TOTAThreadContext(GetRecordPtr^).Dr3 := val;
end;
function __TOTAThreadContext__Wrapper.getDr3 : DWORD;
begin
result := TOTAThreadContext(GetRecordPtr^).Dr3;
end;
procedure __TOTAThreadContext__Wrapper.setDr6(const val : DWORD);
begin
TOTAThreadContext(GetRecordPtr^).Dr6 := val;
end;
function __TOTAThreadContext__Wrapper.getDr6 : DWORD;
begin
result := TOTAThreadContext(GetRecordPtr^).Dr6;
end;
procedure __TOTAThreadContext__Wrapper.setDr7(const val : DWORD);
begin
TOTAThreadContext(GetRecordPtr^).Dr7 := val;
end;
function __TOTAThreadContext__Wrapper.getDr7 : DWORD;
begin
result := TOTAThreadContext(GetRecordPtr^).Dr7;
end;
procedure __TOTAThreadContext__Wrapper.setSegGs(const val : DWORD);
begin
TOTAThreadContext(GetRecordPtr^).SegGs := val;
end;
function __TOTAThreadContext__Wrapper.getSegGs : DWORD;
begin
result := TOTAThreadContext(GetRecordPtr^).SegGs;
end;
procedure __TOTAThreadContext__Wrapper.setSegFs(const val : DWORD);
begin
TOTAThreadContext(GetRecordPtr^).SegFs := val;
end;
function __TOTAThreadContext__Wrapper.getSegFs : DWORD;
begin
result := TOTAThreadContext(GetRecordPtr^).SegFs;
end;
procedure __TOTAThreadContext__Wrapper.setSegEs(const val : DWORD);
begin
TOTAThreadContext(GetRecordPtr^).SegEs := val;
end;
function __TOTAThreadContext__Wrapper.getSegEs : DWORD;
begin
result := TOTAThreadContext(GetRecordPtr^).SegEs;
end;
procedure __TOTAThreadContext__Wrapper.setSegDs(const val : DWORD);
begin
TOTAThreadContext(GetRecordPtr^).SegDs := val;
end;
function __TOTAThreadContext__Wrapper.getSegDs : DWORD;
begin
result := TOTAThreadContext(GetRecordPtr^).SegDs;
end;
procedure __TOTAThreadContext__Wrapper.setEdi(const val : DWORD);
begin
TOTAThreadContext(GetRecordPtr^).Edi := val;
end;
function __TOTAThreadContext__Wrapper.getEdi : DWORD;
begin
result := TOTAThreadContext(GetRecordPtr^).Edi;
end;
procedure __TOTAThreadContext__Wrapper.setEsi(const val : DWORD);
begin
TOTAThreadContext(GetRecordPtr^).Esi := val;
end;
function __TOTAThreadContext__Wrapper.getEsi : DWORD;
begin
result := TOTAThreadContext(GetRecordPtr^).Esi;
end;
procedure __TOTAThreadContext__Wrapper.setEbx(const val : DWORD);
begin
TOTAThreadContext(GetRecordPtr^).Ebx := val;
end;
function __TOTAThreadContext__Wrapper.getEbx : DWORD;
begin
result := TOTAThreadContext(GetRecordPtr^).Ebx;
end;
procedure __TOTAThreadContext__Wrapper.setEdx(const val : DWORD);
begin
TOTAThreadContext(GetRecordPtr^).Edx := val;
end;
function __TOTAThreadContext__Wrapper.getEdx : DWORD;
begin
result := TOTAThreadContext(GetRecordPtr^).Edx;
end;
procedure __TOTAThreadContext__Wrapper.setEcx(const val : DWORD);
begin
TOTAThreadContext(GetRecordPtr^).Ecx := val;
end;
function __TOTAThreadContext__Wrapper.getEcx : DWORD;
begin
result := TOTAThreadContext(GetRecordPtr^).Ecx;
end;
procedure __TOTAThreadContext__Wrapper.setEax(const val : DWORD);
begin
TOTAThreadContext(GetRecordPtr^).Eax := val;
end;
function __TOTAThreadContext__Wrapper.getEax : DWORD;
begin
result := TOTAThreadContext(GetRecordPtr^).Eax;
end;
procedure __TOTAThreadContext__Wrapper.setEbp(const val : DWORD);
begin
TOTAThreadContext(GetRecordPtr^).Ebp := val;
end;
function __TOTAThreadContext__Wrapper.getEbp : DWORD;
begin
result := TOTAThreadContext(GetRecordPtr^).Ebp;
end;
procedure __TOTAThreadContext__Wrapper.setEip(const val : DWORD);
begin
TOTAThreadContext(GetRecordPtr^).Eip := val;
end;
function __TOTAThreadContext__Wrapper.getEip : DWORD;
begin
result := TOTAThreadContext(GetRecordPtr^).Eip;
end;
procedure __TOTAThreadContext__Wrapper.setSegCs(const val : DWORD);
begin
TOTAThreadContext(GetRecordPtr^).SegCs := val;
end;
function __TOTAThreadContext__Wrapper.getSegCs : DWORD;
begin
result := TOTAThreadContext(GetRecordPtr^).SegCs;
end;
procedure __TOTAThreadContext__Wrapper.setEFlags(const val : DWORD);
begin
TOTAThreadContext(GetRecordPtr^).EFlags := val;
end;
function __TOTAThreadContext__Wrapper.getEFlags : DWORD;
begin
result := TOTAThreadContext(GetRecordPtr^).EFlags;
end;
procedure __TOTAThreadContext__Wrapper.setEsp(const val : DWORD);
begin
TOTAThreadContext(GetRecordPtr^).Esp := val;
end;
function __TOTAThreadContext__Wrapper.getEsp : DWORD;
begin
result := TOTAThreadContext(GetRecordPtr^).Esp;
end;
procedure __TOTAThreadContext__Wrapper.setSegSs(const val : DWORD);
begin
TOTAThreadContext(GetRecordPtr^).SegSs := val;
end;
function __TOTAThreadContext__Wrapper.getSegSs : DWORD;
begin
result := TOTAThreadContext(GetRecordPtr^).SegSs;
end;
function __TOTAXMMReg__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TOTAXMMRegs__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TOTAXMMRegs__Wrapper.setMXCSR(const val : LongWord);
begin
TOTAXMMRegs(GetRecordPtr^).MXCSR := val;
end;
function __TOTAXMMRegs__Wrapper.getMXCSR : LongWord;
begin
result := TOTAXMMRegs(GetRecordPtr^).MXCSR;
end;
function _TKeyBindingRec_ : IDispatch;
begin
  result := __TKeyBindingRec__Wrapper.Create;
end;
function _TOTACharPos_ : IDispatch;
begin
  result := __TOTACharPos__Wrapper.Create;
end;
function _TOTAEditPos_ : IDispatch;
begin
  result := __TOTAEditPos__Wrapper.Create;
end;
function _TOTAError_ : IDispatch;
begin
  result := __TOTAError__Wrapper.Create;
end;
function _TOTAOptionName_ : IDispatch;
begin
  result := __TOTAOptionName__Wrapper.Create;
end;
function _TOTARegion_ : IDispatch;
begin
  result := __TOTARegion__Wrapper.Create;
end;
function _TOTAThreadContext_ : IDispatch;
begin
  result := __TOTAThreadContext__Wrapper.Create;
end;
function _TOTAXMMReg_ : IDispatch;
begin
  result := __TOTAXMMReg__Wrapper.Create;
end;
function _TOTAXMMRegs_ : IDispatch;
begin
  result := __TOTAXMMRegs__Wrapper.Create;
end;

type __TKeyBindingRec__Wrapper__ = class(__TKeyBindingRec__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TKeyBindingRec__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTKeyBindingRecToVariant(var R : TKeyBindingRec) : OleVariant;
var
__rw : __TKeyBindingRec__Wrapper__;
begin
__rw := __TKeyBindingRec__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTKeyBindingRec(const V : OleVariant) : TKeyBindingRec;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TKeyBindingRec((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TOTACharPos__Wrapper__ = class(__TOTACharPos__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TOTACharPos__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTOTACharPosToVariant(var R : TOTACharPos) : OleVariant;
var
__rw : __TOTACharPos__Wrapper__;
begin
__rw := __TOTACharPos__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTOTACharPos(const V : OleVariant) : TOTACharPos;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TOTACharPos((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TOTAEditPos__Wrapper__ = class(__TOTAEditPos__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TOTAEditPos__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTOTAEditPosToVariant(var R : TOTAEditPos) : OleVariant;
var
__rw : __TOTAEditPos__Wrapper__;
begin
__rw := __TOTAEditPos__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTOTAEditPos(const V : OleVariant) : TOTAEditPos;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TOTAEditPos((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TOTAError__Wrapper__ = class(__TOTAError__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TOTAError__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTOTAErrorToVariant(var R : TOTAError) : OleVariant;
var
__rw : __TOTAError__Wrapper__;
begin
__rw := __TOTAError__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTOTAError(const V : OleVariant) : TOTAError;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TOTAError((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TOTAOptionName__Wrapper__ = class(__TOTAOptionName__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TOTAOptionName__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTOTAOptionNameToVariant(var R : TOTAOptionName) : OleVariant;
var
__rw : __TOTAOptionName__Wrapper__;
begin
__rw := __TOTAOptionName__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTOTAOptionName(const V : OleVariant) : TOTAOptionName;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TOTAOptionName((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TOTARegion__Wrapper__ = class(__TOTARegion__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TOTARegion__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTOTARegionToVariant(var R : TOTARegion) : OleVariant;
var
__rw : __TOTARegion__Wrapper__;
begin
__rw := __TOTARegion__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTOTARegion(const V : OleVariant) : TOTARegion;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TOTARegion((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TOTAThreadContext__Wrapper__ = class(__TOTAThreadContext__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TOTAThreadContext__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTOTAThreadContextToVariant(var R : TOTAThreadContext) : OleVariant;
var
__rw : __TOTAThreadContext__Wrapper__;
begin
__rw := __TOTAThreadContext__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTOTAThreadContext(const V : OleVariant) : TOTAThreadContext;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TOTAThreadContext((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TOTAXMMReg__Wrapper__ = class(__TOTAXMMReg__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TOTAXMMReg__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTOTAXMMRegToVariant(var R : TOTAXMMReg) : OleVariant;
var
__rw : __TOTAXMMReg__Wrapper__;
begin
__rw := __TOTAXMMReg__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTOTAXMMReg(const V : OleVariant) : TOTAXMMReg;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TOTAXMMReg((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TOTAXMMRegs__Wrapper__ = class(__TOTAXMMRegs__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TOTAXMMRegs__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTOTAXMMRegsToVariant(var R : TOTAXMMRegs) : OleVariant;
var
__rw : __TOTAXMMRegs__Wrapper__;
begin
__rw := __TOTAXMMRegs__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTOTAXMMRegs(const V : OleVariant) : TOTAXMMRegs;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TOTAXMMRegs((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..409] of string = (
'utForm'
,'utDataModule'
,'utProjUnit'
,'utUnit'
,'utRc'
,'utAsm'
,'utDef'
,'utObj'
,'utRes'
,'utLib'
,'utTypeLib'
,'utPackageImport'
,'utFormResource'
,'utNoMake'
,'atWhiteSpace'
,'atComment'
,'atReservedWord'
,'atIdentifier'
,'atSymbol'
,'atString'
,'atNumber'
,'atFloat'
,'atOctal'
,'atHex'
,'atCharacter'
,'atPreproc'
,'atIllegal'
,'atAssembler'
,'SyntaxOff'
,'MarkedBlock'
,'SearchMatch'
,'atHotLink'
,'atTags'
,'atAttrNames'
,'atAttrValues'
,'atScripts'
,'RightMargin'
,'lfCurrentEIP'
,'lfBreakpointEnabled'
,'lfBreakpointDisabled'
,'lfBreakpointInvalid'
,'lfErrorLine'
,'lfBreakpointVerified'
,'lfBackgroundBkpt'
,'lfBackgroupEIP'
,'rkRegion'
,'rkIf'
,'rkNameSpace'
,'rkType'
,'rkMethod'
,'rkNestedMethod'
,'rkGlobal'
,'mcGetFindString'
,'mcReplace'
,'mcRepeatSearch'
,'mcGotoLine'
,'mcClipCut'
,'mcClipCopy'
,'mcClipPaste'
,'mcClipClear'
,'mcHelpKeywordSearch'
,'mcOpenFileAtCursor'
,'mcRunToHere'
,'mcUndo'
,'mcRedo'
,'mcModify'
,'mcAddWatchAtCursor'
,'mcSetMark0'
,'mcSetMark1'
,'mcSetMark2'
,'mcSetMark3'
,'mcSetMark4'
,'mcSetMark5'
,'mcSetMark6'
,'mcSetMark7'
,'mcSetMark8'
,'mcSetMark9'
,'mcMoveToMark0'
,'mcMoveToMark1'
,'mcMoveToMark2'
,'mcMoveToMark3'
,'mcMoveToMark4'
,'mcMoveToMark5'
,'mcMoveToMark6'
,'mcMoveToMark7'
,'mcMoveToMark8'
,'mcMoveToMark9'
,'sEditor'
,'dVCL'
,'dCLX'
,'dDotNet'
,'dHTML'
,'dAny'
,'isWizards'
,'sCustomToolBar'
,'sStandardToolBar'
,'sDebugToolBar'
,'sViewToolBar'
,'sDesktopToolBar'
,'sCORBAToolBar'
,'sApplication'
,'sLibrary'
,'sConsole'
,'sPackage'
,'sUnit'
,'sForm'
,'sCSApplication'
,'sCSLibrary'
,'sCSConsole'
,'sCSPackage'
,'sAssembly'
,'sUserControl'
,'sClass'
,'sWinForm'
,'mmSkipWord'
,'mmSkipNonWord'
,'mmSkipWhite'
,'mmSkipNonWhite'
,'mmSkipSpecial'
,'mmSkipNonSpecial'
,'mmSkipLeft'
,'mmSkipRight'
,'mmSkipStream'
,'csCodelist'
,'csParamList'
,'csManual'
,'kfImplicitShift'
,'kfImplicitModifier'
,'kfImplicitKeypad'
,'rfBackward'
,'rfInvertLegalChars'
,'rfIncludeUpperAlphaChars'
,'rfIncludeLowerAlphaChars'
,'rfIncludeAlphaChars'
,'rfIncludeNumericChars'
,'rfIncludeSpecialChars'
,'omtForm'
,'omtDataModule'
,'omtProjUnit'
,'omtUnit'
,'omtRc'
,'omtAsm'
,'omtDef'
,'omtObj'
,'omtRes'
,'omtLib'
,'omtTypeLib'
,'omtPackageImport'
,'omtFormResource'
,'omtCustom'
,'omtIDL'
,'sDefaultPersonality'
,'sDelphiPersonality'
,'sDelphiDotNetPersonality'
,'sCBuilderPersonality'
,'sCSharpPersonality'
,'sVBPersonality'
,'sDesignPersonality'
,'sCategoryRoot'
,'sCategoryGalileoOther'
,'sCategoryDelphiNew'
,'sCategoryDelphiNewFiles'
,'sCategoryDelphiDotNetNew'
,'sCategoryDelphiDotNetNewFiles'
,'sCategoryCBuilderNew'
,'sCategoryCBuilderNewFiles'
,'sCategoryCurrentProject'
,'sCategoryCSharpNew'
,'sCategoryCSharpNewFiles'
,'sCategoryMarkupNew'
,'sCategoryMarkupNewFiles'
,'sCategoryVBNew'
,'sCategoryVBNewFiles'
,'sCategoryNewUnitTest'
,'cDefEdOptions'
,'cDefEdDefault'
,'cDefEdPascal'
,'cDefEdC'
,'cDefEdCSharp'
,'cDefEdHTML'
,'cDefEdXML'
,'cDefEdSQL'
,'cDefEdIDL'
,'cDefEdVisualBasic'
,'cDefEdJavaScript'
,'cDefEdStyleSheet'
,'cDefEdINI'
,'cDefEdPHP'
,'dcAlign'
,'dcScale'
,'dcCreationOrder'
,'dcLockControls'
,'dcFlipChildrenAll'
,'dcFlipChildrenSelected'
,'sBorlandEditorCodeExplorer'
,'sBaseContainer'
,'sFileContainer'
,'sProjectContainer'
,'sCategoryContainer'
,'sDirectoryContainer'
,'sReferencesContainer'
,'sContainsContainer'
,'sRequiresContainer'
,'cmOTAMake'
,'cmOTABuild'
,'cmOTACheck'
,'cmOTAMakeUnit'
,'btComplete'
,'btPartial'
,'krUnhandled'
,'krHandled'
,'krNextProc'
,'sdForward'
,'sdBackward'
,'shNone'
,'shQuery'
,'shPascal'
,'shC'
,'shSQL'
,'shIDL'
,'shMax'
,'btInclusive'
,'btLine'
,'btColumn'
,'btNonInclusive'
,'btUnknown'
,'smNone'
,'smNormal'
,'smTemplates'
,'sepEnter'
,'sepLeave'
,'sepExit'
,'ntUp'
,'ntDown'
,'ntHome'
,'ntEnd'
,'hvFlags'
,'hvLanguage'
,'hvDataVersion'
,'hvVersion'
,'hvCharacteristics'
,'trStop'
,'trContinue'
,'trDefault'
,'atRead'
,'atWrite'
,'atExecute'
,'ormRun'
,'ormRunToEntry'
,'ormRunToMain'
,'ormRunToCursor'
,'ormStmtStepInto'
,'ormStmtStepOver'
,'ormInstStepInto'
,'ormInstStepOver'
,'ormStmtStepToSource'
,'ormRunToTerminate'
,'ormRunUntilReturn'
,'ormUnused'
,'nrOther'
,'nrRunning'
,'nrStopped'
,'nrException'
,'nrFault'
,'erOK'
,'erError'
,'erDeferred'
,'erBusy'
,'tsStopped'
,'tsRunnable'
,'tsBlocked'
,'tsNone'
,'tsOther'
,'csAccessible'
,'csInaccessible'
,'csWait'
,'eseNone'
,'eseAll'
,'esePropertiesOnly'
,'epsByName'
,'epsByAddress'
,'epsAscending'
,'epsDescending'
,'psNothing'
,'psRunning'
,'psStopping'
,'psStopped'
,'psFault'
,'psResFault'
,'psTerminated'
,'psException'
,'psNoProcess'
,'litDefault'
,'litODS'
,'litWMSent'
,'litWMPosted'
,'litOleClientStart'
,'litOleServerStart'
,'litOleClientEnd'
,'litSourceBreakpoint'
,'litLogBreakEval'
,'litBreakpointMessage'
,'litProcStart'
,'litProcExit'
,'litThreadStart'
,'litThreadExit'
,'litModLoad'
,'litModUnload'
,'litExceptFirstTry'
,'ofnFileOpening'
,'ofnFileOpened'
,'ofnFileClosing'
,'ofnDefaultDesktopLoad'
,'ofnDefaultDesktopSave'
,'ofnProjectDesktopLoad'
,'ofnProjectDesktopSave'
,'ofnPackageInstalled'
,'ofnPackageUninstalled'
,'ofnActiveProjectChanged'
,'wsEnabled'
,'wsChecked'
,'otamkHint'
,'otamkWarn'
,'otamkError'
,'otamkFatal'
,'otamkInfo'
,'itAuto'
,'itManual'
,'itTimer'
,'citNone'
,'citCodeInsight'
,'citParameterCodeInsight'
,'citBrowseCodeInsight'
,'citHintCodeInsight'
,'soAlpha'
,'soScope'
,'vsfUnknown'
,'vsfConstant'
,'vsfType'
,'vsfVariable'
,'vsfProcedure'
,'vsfFunction'
,'vsfUnit'
,'vsfLabel'
,'vsfProperty'
,'vsfConstructor'
,'vsfDestructor'
,'vsfInterface'
,'vsfEvent'
,'vsfParameter'
,'vsfLocalVar'
,'vvfPrivate'
,'vvfProtected'
,'vvfPublic'
,'vvfPublished'
,'pdfNone'
,'pdfVirtual'
,'pdfDynamic'
,'ccNone'
,'ccError'
,'ccMember'
,'ccArgument'
,'ccDecl'
,'ccTypeDecl'
,'ccExpr'
,'ccStatement'
,'ccConstExpr'
,'ccProcDecl'
,'ccMemberDecl'
,'ccNamespace'
,'ccComment'
,'ccStringLiteral'
,'ccDocument'
,'ccElement'
,'ccAttribute'
,'ccAny'
,'afNothing'
,'afTop'
,'afLeft'
,'afBottom'
,'afRight'
,'afHCenter'
,'afVCenter'
,'afHSpace'
,'afVSpace'
,'afHWinCenter'
,'afVWinCenter'
,'afHSpaceInc'
,'afHSpaceDec'
,'afHSpaceDel'
,'afVSpaceInc'
,'afVSpaceDec'
,'afVSpaceDel'
,'afAlignToGrid'
,'afSnapToGrid'
,'afSendToBack'
,'afBringToFront'
,'asNothing'
,'asHGrow'
,'asHShrink'
,'asHAbsolute'
,'asVGrow'
,'asVShrink'
,'asVAbsolute'
,'asWidths'
,'asHeights'
,'asWidthHeight'
,'asSizeToGrid'
,'asEnabled'
,'asChecked'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,utForm));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,utDataModule));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,utProjUnit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,utUnit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,utRc));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,utAsm));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,utDef));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,utObj));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,utRes));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,utLib));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,utTypeLib));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,utPackageImport));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,utFormResource));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,utNoMake));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,atWhiteSpace));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,atComment));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,atReservedWord));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,atIdentifier));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,atSymbol));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,atString));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,atNumber));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,atFloat));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,atOctal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,atHex));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,atCharacter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,atPreproc));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,atIllegal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,atAssembler));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,SyntaxOff));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,MarkedBlock));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,SearchMatch));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,atHotLink));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,atTags));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,atAttrNames));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,atAttrValues));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,atScripts));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,RightMargin));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,lfCurrentEIP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,lfBreakpointEnabled));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,lfBreakpointDisabled));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,lfBreakpointInvalid));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,lfErrorLine));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,lfBreakpointVerified));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,lfBackgroundBkpt));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,lfBackgroupEIP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,rkRegion));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,rkIf));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,rkNameSpace));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,rkType));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,rkMethod));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,rkNestedMethod));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,rkGlobal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,mcGetFindString));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,mcReplace));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,mcRepeatSearch));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,mcGotoLine));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,mcClipCut));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,mcClipCopy));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,mcClipPaste));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,mcClipClear));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,mcHelpKeywordSearch));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,mcOpenFileAtCursor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,mcRunToHere));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,mcUndo));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,mcRedo));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[65] ,mcModify));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[66] ,mcAddWatchAtCursor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[67] ,mcSetMark0));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[68] ,mcSetMark1));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[69] ,mcSetMark2));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[70] ,mcSetMark3));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[71] ,mcSetMark4));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[72] ,mcSetMark5));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[73] ,mcSetMark6));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[74] ,mcSetMark7));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[75] ,mcSetMark8));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[76] ,mcSetMark9));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[77] ,mcMoveToMark0));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[78] ,mcMoveToMark1));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[79] ,mcMoveToMark2));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[80] ,mcMoveToMark3));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[81] ,mcMoveToMark4));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[82] ,mcMoveToMark5));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[83] ,mcMoveToMark6));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[84] ,mcMoveToMark7));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[85] ,mcMoveToMark8));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[86] ,mcMoveToMark9));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[87] ,sEditor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[88] ,dVCL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[89] ,dCLX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[90] ,dDotNet));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[91] ,dHTML));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[92] ,dAny));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[93] ,isWizards));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[94] ,sCustomToolBar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[95] ,sStandardToolBar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[96] ,sDebugToolBar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[97] ,sViewToolBar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[98] ,sDesktopToolBar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[99] ,sCORBAToolBar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[100] ,sApplication));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[101] ,sLibrary));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[102] ,sConsole));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[103] ,sPackage));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[104] ,sUnit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[105] ,sForm));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[106] ,sCSApplication));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[107] ,sCSLibrary));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[108] ,sCSConsole));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[109] ,sCSPackage));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[110] ,sAssembly));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[111] ,sUserControl));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[112] ,sClass));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[113] ,sWinForm));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[114] ,mmSkipWord));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[115] ,mmSkipNonWord));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[116] ,mmSkipWhite));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[117] ,mmSkipNonWhite));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[118] ,mmSkipSpecial));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[119] ,mmSkipNonSpecial));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[120] ,mmSkipLeft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[121] ,mmSkipRight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[122] ,mmSkipStream));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[123] ,csCodelist));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[124] ,csParamList));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[125] ,csManual));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[126] ,kfImplicitShift));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[127] ,kfImplicitModifier));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[128] ,kfImplicitKeypad));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[129] ,rfBackward));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[130] ,rfInvertLegalChars));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[131] ,rfIncludeUpperAlphaChars));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[132] ,rfIncludeLowerAlphaChars));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[133] ,rfIncludeAlphaChars));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[134] ,rfIncludeNumericChars));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[135] ,rfIncludeSpecialChars));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[136] ,omtForm));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[137] ,omtDataModule));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[138] ,omtProjUnit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[139] ,omtUnit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[140] ,omtRc));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[141] ,omtAsm));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[142] ,omtDef));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[143] ,omtObj));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[144] ,omtRes));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[145] ,omtLib));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[146] ,omtTypeLib));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[147] ,omtPackageImport));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[148] ,omtFormResource));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[149] ,omtCustom));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[150] ,omtIDL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[151] ,sDefaultPersonality));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[152] ,sDelphiPersonality));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[153] ,sDelphiDotNetPersonality));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[154] ,sCBuilderPersonality));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[155] ,sCSharpPersonality));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[156] ,sVBPersonality));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[157] ,sDesignPersonality));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[158] ,sCategoryRoot));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[159] ,sCategoryGalileoOther));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[160] ,sCategoryDelphiNew));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[161] ,sCategoryDelphiNewFiles));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[162] ,sCategoryDelphiDotNetNew));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[163] ,sCategoryDelphiDotNetNewFiles));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[164] ,sCategoryCBuilderNew));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[165] ,sCategoryCBuilderNewFiles));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[166] ,sCategoryCurrentProject));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[167] ,sCategoryCSharpNew));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[168] ,sCategoryCSharpNewFiles));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[169] ,sCategoryMarkupNew));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[170] ,sCategoryMarkupNewFiles));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[171] ,sCategoryVBNew));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[172] ,sCategoryVBNewFiles));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[173] ,sCategoryNewUnitTest));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[174] ,cDefEdOptions));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[175] ,cDefEdDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[176] ,cDefEdPascal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[177] ,cDefEdC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[178] ,cDefEdCSharp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[179] ,cDefEdHTML));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[180] ,cDefEdXML));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[181] ,cDefEdSQL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[182] ,cDefEdIDL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[183] ,cDefEdVisualBasic));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[184] ,cDefEdJavaScript));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[185] ,cDefEdStyleSheet));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[186] ,cDefEdINI));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[187] ,cDefEdPHP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[188] ,dcAlign));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[189] ,dcScale));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[190] ,dcCreationOrder));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[191] ,dcLockControls));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[192] ,dcFlipChildrenAll));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[193] ,dcFlipChildrenSelected));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[194] ,sBorlandEditorCodeExplorer));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[195] ,sBaseContainer));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[196] ,sFileContainer));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[197] ,sProjectContainer));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[198] ,sCategoryContainer));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[199] ,sDirectoryContainer));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[200] ,sReferencesContainer));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[201] ,sContainsContainer));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[202] ,sRequiresContainer));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[203] ,cmOTAMake));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[204] ,cmOTABuild));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[205] ,cmOTACheck));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[206] ,cmOTAMakeUnit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[207] ,btComplete));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[208] ,btPartial));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[209] ,krUnhandled));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[210] ,krHandled));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[211] ,krNextProc));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[212] ,sdForward));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[213] ,sdBackward));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[214] ,shNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[215] ,shQuery));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[216] ,shPascal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[217] ,shC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[218] ,shSQL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[219] ,shIDL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[220] ,shMax));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[221] ,btInclusive));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[222] ,btLine));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[223] ,btColumn));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[224] ,btNonInclusive));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[225] ,btUnknown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[226] ,smNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[227] ,smNormal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[228] ,smTemplates));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[229] ,sepEnter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[230] ,sepLeave));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[231] ,sepExit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[232] ,ntUp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[233] ,ntDown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[234] ,ntHome));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[235] ,ntEnd));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[236] ,hvFlags));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[237] ,hvLanguage));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[238] ,hvDataVersion));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[239] ,hvVersion));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[240] ,hvCharacteristics));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[241] ,trStop));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[242] ,trContinue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[243] ,trDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[244] ,atRead));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[245] ,atWrite));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[246] ,atExecute));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[247] ,ormRun));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[248] ,ormRunToEntry));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[249] ,ormRunToMain));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[250] ,ormRunToCursor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[251] ,ormStmtStepInto));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[252] ,ormStmtStepOver));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[253] ,ormInstStepInto));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[254] ,ormInstStepOver));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[255] ,ormStmtStepToSource));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[256] ,ormRunToTerminate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[257] ,ormRunUntilReturn));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[258] ,ormUnused));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[259] ,nrOther));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[260] ,nrRunning));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[261] ,nrStopped));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[262] ,nrException));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[263] ,nrFault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[264] ,erOK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[265] ,erError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[266] ,erDeferred));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[267] ,erBusy));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[268] ,tsStopped));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[269] ,tsRunnable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[270] ,tsBlocked));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[271] ,tsNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[272] ,tsOther));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[273] ,csAccessible));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[274] ,csInaccessible));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[275] ,csWait));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[276] ,eseNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[277] ,eseAll));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[278] ,esePropertiesOnly));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[279] ,epsByName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[280] ,epsByAddress));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[281] ,epsAscending));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[282] ,epsDescending));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[283] ,psNothing));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[284] ,psRunning));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[285] ,psStopping));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[286] ,psStopped));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[287] ,psFault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[288] ,psResFault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[289] ,psTerminated));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[290] ,psException));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[291] ,psNoProcess));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[292] ,litDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[293] ,litODS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[294] ,litWMSent));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[295] ,litWMPosted));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[296] ,litOleClientStart));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[297] ,litOleServerStart));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[298] ,litOleClientEnd));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[299] ,litSourceBreakpoint));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[300] ,litLogBreakEval));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[301] ,litBreakpointMessage));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[302] ,litProcStart));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[303] ,litProcExit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[304] ,litThreadStart));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[305] ,litThreadExit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[306] ,litModLoad));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[307] ,litModUnload));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[308] ,litExceptFirstTry));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[309] ,ofnFileOpening));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[310] ,ofnFileOpened));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[311] ,ofnFileClosing));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[312] ,ofnDefaultDesktopLoad));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[313] ,ofnDefaultDesktopSave));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[314] ,ofnProjectDesktopLoad));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[315] ,ofnProjectDesktopSave));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[316] ,ofnPackageInstalled));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[317] ,ofnPackageUninstalled));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[318] ,ofnActiveProjectChanged));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[319] ,wsEnabled));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[320] ,wsChecked));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[321] ,otamkHint));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[322] ,otamkWarn));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[323] ,otamkError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[324] ,otamkFatal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[325] ,otamkInfo));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[326] ,itAuto));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[327] ,itManual));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[328] ,itTimer));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[329] ,citNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[330] ,citCodeInsight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[331] ,citParameterCodeInsight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[332] ,citBrowseCodeInsight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[333] ,citHintCodeInsight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[334] ,soAlpha));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[335] ,soScope));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[336] ,vsfUnknown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[337] ,vsfConstant));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[338] ,vsfType));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[339] ,vsfVariable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[340] ,vsfProcedure));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[341] ,vsfFunction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[342] ,vsfUnit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[343] ,vsfLabel));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[344] ,vsfProperty));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[345] ,vsfConstructor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[346] ,vsfDestructor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[347] ,vsfInterface));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[348] ,vsfEvent));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[349] ,vsfParameter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[350] ,vsfLocalVar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[351] ,vvfPrivate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[352] ,vvfProtected));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[353] ,vvfPublic));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[354] ,vvfPublished));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[355] ,pdfNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[356] ,pdfVirtual));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[357] ,pdfDynamic));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[358] ,ccNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[359] ,ccError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[360] ,ccMember));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[361] ,ccArgument));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[362] ,ccDecl));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[363] ,ccTypeDecl));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[364] ,ccExpr));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[365] ,ccStatement));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[366] ,ccConstExpr));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[367] ,ccProcDecl));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[368] ,ccMemberDecl));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[369] ,ccNamespace));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[370] ,ccComment));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[371] ,ccStringLiteral));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[372] ,ccDocument));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[373] ,ccElement));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[374] ,ccAttribute));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[375] ,ccAny));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[376] ,afNothing));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[377] ,afTop));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[378] ,afLeft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[379] ,afBottom));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[380] ,afRight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[381] ,afHCenter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[382] ,afVCenter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[383] ,afHSpace));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[384] ,afVSpace));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[385] ,afHWinCenter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[386] ,afVWinCenter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[387] ,afHSpaceInc));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[388] ,afHSpaceDec));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[389] ,afHSpaceDel));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[390] ,afVSpaceInc));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[391] ,afVSpaceDec));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[392] ,afVSpaceDel));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[393] ,afAlignToGrid));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[394] ,afSnapToGrid));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[395] ,afSendToBack));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[396] ,afBringToFront));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[397] ,asNothing));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[398] ,asHGrow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[399] ,asHShrink));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[400] ,asHAbsolute));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[401] ,asVGrow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[402] ,asVShrink));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[403] ,asVAbsolute));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[404] ,asWidths));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[405] ,asHeights));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[406] ,asWidthHeight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[407] ,asSizeToGrid));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[408] ,asEnabled));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[409] ,asChecked));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..4] of TClass = (
EPersonalityException,
TModuleNotifierObject,
TNotifierObject,
TOTAFile,
TOTAStringsAdapter
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..8] of string = (
'TKeyBindingRec'
,'TOTACharPos'
,'TOTAEditPos'
,'TOTAError'
,'TOTAOptionName'
,'TOTARegion'
,'TOTAThreadContext'
,'TOTAXMMReg'
,'TOTAXMMRegs'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TKeyBindingRec_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_TOTACharPos_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_TOTAEditPos_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(_TOTAError_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(_TOTAOptionName_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[5],Addr(_TOTARegion_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[6],Addr(_TOTAThreadContext_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[7],Addr(_TOTAXMMReg_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[8],Addr(_TOTAXMMRegs_)));
RegisterProc(TOTAFile,'Create',mtConstructor,TypeInfo(_T4),[
TypeInfo(string),
TypeInfo(TDateTime)],Addr(TOTAFile.Create),cRegister);

//RegRegisterMethod(TOTAFile,'GetSource',TypeInfo(_T5),[TypeInfo(string)], pointer(0));
RegRegisterMethod(TOTAFile,'GetSource',TypeInfo(_T5),[TypeInfo(string)],  getVMTProcAddr('TOTAFile','GetSource',0));


//RegRegisterMethod(TOTAFile,'GetAge',TypeInfo(_T6),[TypeInfo(TDateTime)], pointer(4));
RegRegisterMethod(TOTAFile,'GetAge',TypeInfo(_T6),[TypeInfo(TDateTime)],  getVMTProcAddr('TOTAFile','GetAge',4));


RegisterProc(TOTAStringsAdapter,'Create',mtConstructor,TypeInfo(_T7),[
TypeInfo(TStrings),
TypeInfo(Boolean)],Addr(TOTAStringsAdapter.Create),cRegister);

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'RegisterPackageWizard',mtProc,TypeInfo(_T0),[
TypeInfo(IOTAWizard)],Addr(RegisterPackageWizard),cRegister)}

{RegisterProc(nil,'StringToIOTAFile',mtProc,TypeInfo(_T1),[
TypeInfo(string),TypeInfo(IOTAFile)],Addr(StringToIOTAFile),cRegister)}

{RegisterProc(nil,'GetActiveProject',mtProc,TypeInfo(_T2),[TypeInfo(IOTAProject)],Addr(GetActiveProject),cRegister)}

{RegisterProc(nil,'PersonalityServices',mtProc,TypeInfo(_T3),[TypeInfo(IOTAPersonalityServices)],Addr(PersonalityServices),cRegister)}

{RegisterEvent(TypeInfo(TKeyBindingProc),[
TypeInfo(IOTAKeyContext),
TypeInfo(TShortcut),
TypeInfo(TKeyBindingResult)]);}

{RegisterEvent(TypeInfo(TOTAGetChildCallback),[
TypeInfoPointer,
TypeInfo(IOTAComponent),
TypeInfo(Boolean)]);}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
