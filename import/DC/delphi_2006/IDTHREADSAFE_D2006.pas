{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDTHREADSAFE_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  SyncObjs,
  IdThreadSafe;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure  of object;

_T1 = _T0;

_T2 = _T0;

_T3 = function : Cardinal of object;

_T4 = _T3;

_T5 = function : Integer of object;

_T6 = _T5;

_T7 = function (const p0 : Cardinal): Boolean of object;

_T8 = procedure (const p0 : string) of object;

_T9 = _T8;

_T10 = procedure (const p0 : Boolean) of object;

_T11 = _T8;

_T12 = procedure (const p0 : string;
p1 : TObject) of object;

_T13 = _T0;

_T14 = function : TStringList of object;

_T15 = function (const p0 : string): TObject of object;

_T16 = _T8;

_T17 = _T0;

function __DC__GetTIdThreadSafeCardinal__Value(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdThreadSafeCardinal(Instance).Value;
end;

procedure __DC__SetTIdThreadSafeCardinal__Value(Instance : TObject; Params : PVariantArgList);
begin
TIdThreadSafeCardinal(Instance).Value:=OleVariant(Params^[0]);
end;

function __DC__GetTIdThreadSafeInteger__Value(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdThreadSafeInteger(Instance).Value;
end;

procedure __DC__SetTIdThreadSafeInteger__Value(Instance : TObject; Params : PVariantArgList);
begin
TIdThreadSafeInteger(Instance).Value:=OleVariant(Params^[0]);
end;

function __DC__GetTIdThreadSafeString__Value(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdThreadSafeString(Instance).Value;
end;

procedure __DC__SetTIdThreadSafeString__Value(Instance : TObject; Params : PVariantArgList);
begin
TIdThreadSafeString(Instance).Value:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TIdThreadSafeCardinal,'Value',__DC__GetTIdThreadSafeCardinal__Value,__DC__SetTIdThreadSafeCardinal__Value);
RegisterProperty(TIdThreadSafeInteger,'Value',__DC__GetTIdThreadSafeInteger__Value,__DC__SetTIdThreadSafeInteger__Value);
RegisterProperty(TIdThreadSafeString,'Value',__DC__GetTIdThreadSafeString__Value,__DC__SetTIdThreadSafeString__Value);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..5] of TClass = (
TIdThreadSafe,
TIdThreadSafeCardinal,
TIdThreadSafeInteger,
TIdThreadSafeList,
TIdThreadSafeString,
TIdThreadSafeStringList
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegisterProc(TIdThreadSafe,'Create',mtConstructor,TypeInfo(_T0),NoParams, pointer(0),cRegister);
RegisterProc(TIdThreadSafe,'Create',mtConstructor,TypeInfo(_T0),NoParams,  getVMTProcAddr('TIdThreadSafe','Create',0),cRegister);


RegRegisterMethod(TIdThreadSafe,'Lock',TypeInfo(_T1),NoParams,Addr(TIdThreadSafe.Lock));

RegRegisterMethod(TIdThreadSafe,'Unlock',TypeInfo(_T2),NoParams,Addr(TIdThreadSafe.Unlock));

RegRegisterMethod(TIdThreadSafeCardinal,'Decrement',TypeInfo(_T3),[TypeInfo(Cardinal)],Addr(TIdThreadSafeCardinal.Decrement));

RegRegisterMethod(TIdThreadSafeCardinal,'Increment',TypeInfo(_T4),[TypeInfo(Cardinal)],Addr(TIdThreadSafeCardinal.Increment));

RegRegisterMethod(TIdThreadSafeInteger,'Decrement',TypeInfo(_T5),[TypeInfo(Integer)],Addr(TIdThreadSafeInteger.Decrement));

RegRegisterMethod(TIdThreadSafeInteger,'Increment',TypeInfo(_T6),[TypeInfo(Integer)],Addr(TIdThreadSafeInteger.Increment));

RegRegisterMethod(TIdThreadSafeList,'IsCountLessThan',TypeInfo(_T7),[
TypeInfo(Cardinal),TypeInfo(Boolean)],Addr(TIdThreadSafeList.IsCountLessThan));

RegRegisterMethod(TIdThreadSafeString,'Append',TypeInfo(_T8),[
TypeInfo(string)],Addr(TIdThreadSafeString.Append));

RegRegisterMethod(TIdThreadSafeString,'Prepend',TypeInfo(_T9),[
TypeInfo(string)],Addr(TIdThreadSafeString.Prepend));

RegisterProc(TIdThreadSafeStringList,'Create',mtConstructor,TypeInfo(_T10),[
TypeInfo(Boolean)],Addr(TIdThreadSafeStringList.Create),cRegister);

RegRegisterMethod(TIdThreadSafeStringList,'Add',TypeInfo(_T11),[
TypeInfo(string)],Addr(TIdThreadSafeStringList.Add));

RegRegisterMethod(TIdThreadSafeStringList,'AddObject',TypeInfo(_T12),[
TypeInfo(string),
TypeInfo(TObject)],Addr(TIdThreadSafeStringList.AddObject));

RegRegisterMethod(TIdThreadSafeStringList,'Clear',TypeInfo(_T13),NoParams,Addr(TIdThreadSafeStringList.Clear));

RegRegisterMethod(TIdThreadSafeStringList,'Lock',TypeInfo(_T14),[TypeInfo(TStringList)],Addr(TIdThreadSafeStringList.Lock));

RegRegisterMethod(TIdThreadSafeStringList,'ObjectByItem',TypeInfo(_T15),[
TypeInfo(string),TypeInfo(TObject)],Addr(TIdThreadSafeStringList.ObjectByItem));

RegRegisterMethod(TIdThreadSafeStringList,'Remove',TypeInfo(_T16),[
TypeInfo(string)],Addr(TIdThreadSafeStringList.Remove));

RegRegisterMethod(TIdThreadSafeStringList,'Unlock',TypeInfo(_T17),NoParams,Addr(TIdThreadSafeStringList.Unlock));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
