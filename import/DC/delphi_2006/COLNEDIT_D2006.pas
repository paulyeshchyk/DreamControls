{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit COLNEDIT_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Messages,
  SysUtils,
  Classes,
  Graphics,
  Controls,
  Forms,
  DesignWindows,
  StdCtrls,
  Menus,
  ExtCtrls,
  ComCtrls,
  ImgList,
  ActnList,
  ToolWin,
  ToolWnds,
  ActnPopup,
  ColnEdit;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
{_T0 = procedure (p0 : IDesigner;
p1 : TComponent;
p2 : TCollection;
const p3 : string) of object;}

_T2 = procedure (p0 : TObject) of object;

_T3 = _T2;

_T4 = _T2;

_T5 = procedure (p0 : TObject;
var p1 : Char) of object;

_T6 = procedure (p0 : TObject;
var p1 : Word;
p2 : TShiftState) of object;

_T7 = procedure (p0 : TObject;
var p1 : TCloseAction) of object;

_T8 = _T2;

_T9 = procedure (p0 : TObject;
p1 : TObject;
p2 : Integer;
p3 : Integer;
p4 : TDragState;
var p5 : Boolean) of object;

_T10 = procedure (p0 : TObject;
p1 : TObject;
p2 : Integer;
p3 : Integer) of object;

_T11 = _T2;

_T12 = _T2;

_T13 = _T2;

_T14 = _T2;

_T15 = procedure (p0 : TObject;
p1 : TListItem;
p2 : TItemChange) of object;

_T16 = _T2;

_T17 = _T2;

_T18 = _T2;

_T19 = _T5;

_T20 = _T6;

_T21 = _T2;

_T22 = function (p0 : Integer): Boolean of object;

_T23 = function (p0 : Integer;
p1 : Integer): string of object;

_T24 = procedure  of object;

_T25 = _T24;

_T26 = _T24;

{_T27 = function : TCollectionEditorClass of object;}

_T28 = function : TColOptions of object;

function __DC__GetTCollectionEditor__Options(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TColOptions;
begin
tmp := TCollectionEditor(Instance).Options;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTCollectionEditor__Options(Instance : TObject; Params : PVariantArgList);
var
  tmp : TColOptions;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TCollectionEditor(Instance).Options:=tmp;
end;

function __DC__GetTCollectionEditor__CollectionPropertyName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCollectionEditor(Instance).CollectionPropertyName;
end;

procedure __DC__SetTCollectionEditor__CollectionPropertyName(Instance : TObject; Params : PVariantArgList);
begin
TCollectionEditor(Instance).CollectionPropertyName:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TCollectionEditor,'Options',__DC__GetTCollectionEditor__Options,__DC__SetTCollectionEditor__Options);
RegisterProperty(TCollectionEditor,'CollectionPropertyName',__DC__GetTCollectionEditor__CollectionPropertyName,__DC__SetTCollectionEditor__CollectionPropertyName);
end;

const __ConstNames0 : array[0..3] of string = (
'AM_DeferUpdate'
,'coAdd'
,'coDelete'
,'coMove'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,AM_DeferUpdate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,coAdd));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,coDelete));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,coMove));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..1] of TClass = (
TCollectionEditor,
TCollectionProperty
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegRegisterMethod(TCollectionEditor,'AddClick',TypeInfo(_T2),[
TypeInfo(TObject)],Addr(TCollectionEditor.AddClick));

RegRegisterMethod(TCollectionEditor,'DeleteClick',TypeInfo(_T3),[
TypeInfo(TObject)],Addr(TCollectionEditor.DeleteClick));

RegRegisterMethod(TCollectionEditor,'ListView1Click',TypeInfo(_T4),[
TypeInfo(TObject)],Addr(TCollectionEditor.ListView1Click));

RegRegisterMethod(TCollectionEditor,'FormKeyPress',TypeInfo(_T5),[
TypeInfo(TObject),
TypeInfo(Char)],Addr(TCollectionEditor.FormKeyPress));

RegRegisterMethod(TCollectionEditor,'FormKeyDown',TypeInfo(_T6),[
TypeInfo(TObject),
TypeInfo(Word),
TypeInfo(TShiftState)],Addr(TCollectionEditor.FormKeyDown));

RegRegisterMethod(TCollectionEditor,'FormClose',TypeInfo(_T7),[
TypeInfo(TObject),
TypeInfo(TCloseAction)],Addr(TCollectionEditor.FormClose));

RegRegisterMethod(TCollectionEditor,'MoveUpClick',TypeInfo(_T8),[
TypeInfo(TObject)],Addr(TCollectionEditor.MoveUpClick));

RegRegisterMethod(TCollectionEditor,'ListView1DragOver',TypeInfo(_T9),[
TypeInfo(TObject),
TypeInfo(TObject),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(TDragState),
TypeInfo(Boolean)],Addr(TCollectionEditor.ListView1DragOver));

RegRegisterMethod(TCollectionEditor,'ListView1DragDrop',TypeInfo(_T10),[
TypeInfo(TObject),
TypeInfo(TObject),
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TCollectionEditor.ListView1DragDrop));

RegRegisterMethod(TCollectionEditor,'MoveDownClick',TypeInfo(_T11),[
TypeInfo(TObject)],Addr(TCollectionEditor.MoveDownClick));

RegRegisterMethod(TCollectionEditor,'FormCreate',TypeInfo(_T12),[
TypeInfo(TObject)],Addr(TCollectionEditor.FormCreate));

RegRegisterMethod(TCollectionEditor,'FormDestroy',TypeInfo(_T13),[
TypeInfo(TObject)],Addr(TCollectionEditor.FormDestroy));

RegRegisterMethod(TCollectionEditor,'FormResize',TypeInfo(_T14),[
TypeInfo(TObject)],Addr(TCollectionEditor.FormResize));

RegRegisterMethod(TCollectionEditor,'ListView1Change',TypeInfo(_T15),[
TypeInfo(TObject),
TypeInfo(TListItem),
TypeInfo(TItemChange)],Addr(TCollectionEditor.ListView1Change));

RegRegisterMethod(TCollectionEditor,'SelectAll1Click',TypeInfo(_T16),[
TypeInfo(TObject)],Addr(TCollectionEditor.SelectAll1Click));

RegRegisterMethod(TCollectionEditor,'SelectAllCommandUpdate',TypeInfo(_T17),[
TypeInfo(TObject)],Addr(TCollectionEditor.SelectAllCommandUpdate));

RegRegisterMethod(TCollectionEditor,'SelectionUpdate',TypeInfo(_T18),[
TypeInfo(TObject)],Addr(TCollectionEditor.SelectionUpdate));

RegRegisterMethod(TCollectionEditor,'ListView1KeyPress',TypeInfo(_T19),[
TypeInfo(TObject),
TypeInfo(Char)],Addr(TCollectionEditor.ListView1KeyPress));

RegRegisterMethod(TCollectionEditor,'ListView1KeyDown',TypeInfo(_T20),[
TypeInfo(TObject),
TypeInfo(Word),
TypeInfo(TShiftState)],Addr(TCollectionEditor.ListView1KeyDown));

RegRegisterMethod(TCollectionEditor,'FormShow',TypeInfo(_T21),[
TypeInfo(TObject)],Addr(TCollectionEditor.FormShow));

//RegRegisterMethod(TCollectionEditor,'CanAdd',TypeInfo(_T22),[TypeInfo(Integer),TypeInfo(Boolean)], pointer(308));
RegRegisterMethod(TCollectionEditor,'CanAdd',TypeInfo(_T22),[TypeInfo(Integer),TypeInfo(Boolean)],  getVMTProcAddr('TCollectionEditor','CanAdd',308));


RegRegisterMethod(TCollectionEditor,'GetItemName',TypeInfo(_T23),[
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(string)],Addr(TCollectionEditor.GetItemName));

RegRegisterMethod(TCollectionEditor,'GetSelection',TypeInfo(_T24),NoParams,Addr(TCollectionEditor.GetSelection));

RegRegisterMethod(TCollectionEditor,'SetSelection',TypeInfo(_T25),NoParams,Addr(TCollectionEditor.SetSelection));

RegRegisterMethod(TCollectionEditor,'UpdateListbox',TypeInfo(_T26),NoParams,Addr(TCollectionEditor.UpdateListbox));

//RegRegisterMethod(TCollectionProperty,'GetColOptions',TypeInfo(_T28),[TypeInfo(TColOptions)], pointer(76));
RegRegisterMethod(TCollectionProperty,'GetColOptions',TypeInfo(_T28),[TypeInfo(TColOptions)],  getVMTProcAddr('TCollectionProperty','GetColOptions',76));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
{RegisterProc(nil,'ShowCollectionEditor',mtProc,TypeInfo(_T0),[
TypeInfo(IDesigner),
TypeInfo(TComponent),
TypeInfo(TCollection),
TypeInfo(string)],Addr(ShowCollectionEditor),cRegister)}

{RegRegisterMethod(TCollectionProperty,'GetEditorClass',TypeInfo(_T27),[TypeInfo(TCollectionEditorClass)], pointer(72))}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
