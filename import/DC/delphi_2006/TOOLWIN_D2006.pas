{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit TOOLWIN_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  sysUtils,
  dcsystem,
  dcdreamlib,
  Windows,
  Messages,
  Classes,
  Controls,
  Forms,
  ToolWin;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (p0 : HDC) of object;

function __DC__GetTToolWindow__EdgeBorders(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TEdgeBorders;
begin
tmp := TToolWindow(Instance).EdgeBorders;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTToolWindow__EdgeBorders(Instance : TObject; Params : PVariantArgList);
var
  tmp : TEdgeBorders;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TToolWindow(Instance).EdgeBorders:=tmp;
end;

function __DC__GetTToolWindow__EdgeInner(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TToolWindow(Instance).EdgeInner;
end;

procedure __DC__SetTToolWindow__EdgeInner(Instance : TObject; Params : PVariantArgList);
begin
TToolWindow(Instance).EdgeInner:=OleVariant(Params^[0]);
end;

function __DC__GetTToolWindow__EdgeOuter(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TToolWindow(Instance).EdgeOuter;
end;

procedure __DC__SetTToolWindow__EdgeOuter(Instance : TObject; Params : PVariantArgList);
begin
TToolWindow(Instance).EdgeOuter:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TToolWindow,'EdgeBorders',__DC__GetTToolWindow__EdgeBorders,__DC__SetTToolWindow__EdgeBorders);
RegisterProperty(TToolWindow,'EdgeInner',__DC__GetTToolWindow__EdgeInner,__DC__SetTToolWindow__EdgeInner);
RegisterProperty(TToolWindow,'EdgeOuter',__DC__GetTToolWindow__EdgeOuter,__DC__SetTToolWindow__EdgeOuter);
end;

const __ConstNames0 : array[0..9] of string = (
'ebLeft'
,'ebTop'
,'ebRight'
,'ebBottom'
,'esNone'
,'esRaised'
,'esLowered'
,'soNone'
,'soHorizontal'
,'soVertical'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,ebLeft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,ebTop));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,ebRight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,ebBottom));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,esNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,esRaised));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,esLowered));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,soNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,soHorizontal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,soVertical));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..2] of TClass = (
TToolDockForm,
TToolDockObject,
TToolWindow
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName])
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TToolWindow,'NCPaint',TypeInfo(_T0),[TypeInfo(HDC)], pointer(216));
RegRegisterMethod(TToolWindow,'NCPaint',TypeInfo(_T0),[TypeInfo(HDC)],  getVMTProcAddr('TToolWindow','NCPaint',216));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
