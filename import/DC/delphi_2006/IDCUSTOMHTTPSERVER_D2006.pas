{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDCUSTOMHTTPSERVER_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdAssignedNumbers,
  IdException,
  IdGlobal,
  IdHeaderList,
  IdTCPServer,
  IdThread,
  IdCookie,
  IdHTTPHeaderInfo,
  IdStackConsts,
  SyncObjs,
  SysUtils,
  IdCustomHTTPServer;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (p0 : TIdPeerThread;
var p1 : TIdHTTPSession) of object;

_T1 = procedure (p0 : TIdPeerThread;
p1 : TIdHTTPRequestInfo;
p2 : TIdHTTPResponseInfo;
var p3 : Boolean;
const p4 : string) of object;

_T2 = procedure (p0 : TIdPeerThread;
const p1 : string;
const p2 : string;
const p3 : string) of object;

_T3 = procedure (p0 : TIdPeerThread;
p1 : TIdHTTPRequestInfo;
p2 : TIdHTTPResponseInfo) of object;

_T4 = procedure (p0 : TIdPeerThread;
var p1 : TStream) of object;

_T5 = function (p0 : TIdPeerThread;
p1 : TIdHTTPResponseInfo;
p2 : TIdHTTPRequestInfo): TIdHTTPSession of object;

_T6 = function (const p0 : string): Boolean of object;

_T7 = function (p0 : TIdPeerThread;
p1 : TIdHTTPResponseInfo;
p2 : TFileName): Cardinal of object;

_T8 = procedure (p0 : TIdHTTPSession) of object;

_T9 = procedure  of object;

_T10 = procedure (p0 : Boolean) of object;

_T11 = function (const p0 : string): TIdHTTPSession of object;

_T12 = function (const p0 : string;
const p1 : string): TIdHTTPSession of object;

_T13 = _T12;

_T14 = _T8;

_T15 = _T9;

_T16 = procedure (p0 : TIdTCPServerConnection) of object;

_T17 = procedure (const p0 : string) of object;

_T18 = _T9;

_T19 = _T9;

_T20 = function : Boolean of object;

_T21 = _T9;

_T22 = procedure (p0 : TIdHTTPCustomSessionList) of object;

_T23 = procedure (p0 : TIdHTTPCustomSessionList;
const p1 : string;
const p2 : string) of object;

_T24 = _T9;

_T25 = _T9;

procedure __TIdHTTPCustomSessionList__PurgeStaleSessions__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
0:
begin
TIdHTTPCustomSessionList(__Instance).PurgeStaleSessions;
end;
1:
begin
TIdHTTPCustomSessionList(__Instance).PurgeStaleSessions(OleVariant(pargs^[0]));
end;
end
end;

function __DC__GetTIdCustomHTTPServer__MIMETable(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdCustomHTTPServer(Instance).MIMETable);
end;

function __DC__GetTIdCustomHTTPServer__SessionList(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdCustomHTTPServer(Instance).SessionList);
end;

function __DC__GetTIdHTTPRequestInfo__Session(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdHTTPRequestInfo(Instance).Session);
end;

function __DC__GetTIdHTTPRequestInfo__AuthExists(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHTTPRequestInfo(Instance).AuthExists;
end;

function __DC__GetTIdHTTPRequestInfo__AuthPassword(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHTTPRequestInfo(Instance).AuthPassword;
end;

function __DC__GetTIdHTTPRequestInfo__AuthUsername(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHTTPRequestInfo(Instance).AuthUsername;
end;

function __DC__GetTIdHTTPRequestInfo__Command(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHTTPRequestInfo(Instance).Command;
end;

function __DC__GetTIdHTTPRequestInfo__Cookies(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdHTTPRequestInfo(Instance).Cookies);
end;

function __DC__GetTIdHTTPRequestInfo__Document(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHTTPRequestInfo(Instance).Document;
end;

procedure __DC__SetTIdHTTPRequestInfo__Document(Instance : TObject; Params : PVariantArgList);
begin
TIdHTTPRequestInfo(Instance).Document:=OleVariant(Params^[0]);
end;

function __DC__GetTIdHTTPRequestInfo__Params(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdHTTPRequestInfo(Instance).Params);
end;

function __DC__GetTIdHTTPRequestInfo__PostStream(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdHTTPRequestInfo(Instance).PostStream);
end;

procedure __DC__SetTIdHTTPRequestInfo__PostStream(Instance : TObject; Params : PVariantArgList);
begin
TIdHTTPRequestInfo(Instance).PostStream:=TStream(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIdHTTPRequestInfo__RawHTTPCommand(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHTTPRequestInfo(Instance).RawHTTPCommand;
end;

function __DC__GetTIdHTTPRequestInfo__RemoteIP(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHTTPRequestInfo(Instance).RemoteIP;
end;

function __DC__GetTIdHTTPRequestInfo__UnparsedParams(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHTTPRequestInfo(Instance).UnparsedParams;
end;

procedure __DC__SetTIdHTTPRequestInfo__UnparsedParams(Instance : TObject; Params : PVariantArgList);
begin
TIdHTTPRequestInfo(Instance).UnparsedParams:=OleVariant(Params^[0]);
end;

function __DC__GetTIdHTTPRequestInfo__FormParams(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHTTPRequestInfo(Instance).FormParams;
end;

procedure __DC__SetTIdHTTPRequestInfo__FormParams(Instance : TObject; Params : PVariantArgList);
begin
TIdHTTPRequestInfo(Instance).FormParams:=OleVariant(Params^[0]);
end;

function __DC__GetTIdHTTPRequestInfo__QueryParams(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHTTPRequestInfo(Instance).QueryParams;
end;

procedure __DC__SetTIdHTTPRequestInfo__QueryParams(Instance : TObject; Params : PVariantArgList);
begin
TIdHTTPRequestInfo(Instance).QueryParams:=OleVariant(Params^[0]);
end;

function __DC__GetTIdHTTPRequestInfo__Version(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHTTPRequestInfo(Instance).Version;
end;

function __DC__GetTIdHTTPResponseInfo__AuthRealm(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHTTPResponseInfo(Instance).AuthRealm;
end;

procedure __DC__SetTIdHTTPResponseInfo__AuthRealm(Instance : TObject; Params : PVariantArgList);
begin
TIdHTTPResponseInfo(Instance).AuthRealm:=OleVariant(Params^[0]);
end;

function __DC__GetTIdHTTPResponseInfo__CloseConnection(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHTTPResponseInfo(Instance).CloseConnection;
end;

procedure __DC__SetTIdHTTPResponseInfo__CloseConnection(Instance : TObject; Params : PVariantArgList);
begin
TIdHTTPResponseInfo(Instance).CloseConnection:=OleVariant(Params^[0]);
end;

function __DC__GetTIdHTTPResponseInfo__ContentStream(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdHTTPResponseInfo(Instance).ContentStream);
end;

procedure __DC__SetTIdHTTPResponseInfo__ContentStream(Instance : TObject; Params : PVariantArgList);
begin
TIdHTTPResponseInfo(Instance).ContentStream:=TStream(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIdHTTPResponseInfo__ContentText(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHTTPResponseInfo(Instance).ContentText;
end;

procedure __DC__SetTIdHTTPResponseInfo__ContentText(Instance : TObject; Params : PVariantArgList);
begin
TIdHTTPResponseInfo(Instance).ContentText:=OleVariant(Params^[0]);
end;

function __DC__GetTIdHTTPResponseInfo__Cookies(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdHTTPResponseInfo(Instance).Cookies);
end;

procedure __DC__SetTIdHTTPResponseInfo__Cookies(Instance : TObject; Params : PVariantArgList);
begin
TIdHTTPResponseInfo(Instance).Cookies:=TIdServerCookies(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIdHTTPResponseInfo__FreeContentStream(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHTTPResponseInfo(Instance).FreeContentStream;
end;

procedure __DC__SetTIdHTTPResponseInfo__FreeContentStream(Instance : TObject; Params : PVariantArgList);
begin
TIdHTTPResponseInfo(Instance).FreeContentStream:=OleVariant(Params^[0]);
end;

function __DC__GetTIdHTTPResponseInfo__HeaderHasBeenWritten(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHTTPResponseInfo(Instance).HeaderHasBeenWritten;
end;

procedure __DC__SetTIdHTTPResponseInfo__HeaderHasBeenWritten(Instance : TObject; Params : PVariantArgList);
begin
TIdHTTPResponseInfo(Instance).HeaderHasBeenWritten:=OleVariant(Params^[0]);
end;

function __DC__GetTIdHTTPResponseInfo__ResponseNo(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHTTPResponseInfo(Instance).ResponseNo;
end;

procedure __DC__SetTIdHTTPResponseInfo__ResponseNo(Instance : TObject; Params : PVariantArgList);
begin
TIdHTTPResponseInfo(Instance).ResponseNo:=OleVariant(Params^[0]);
end;

function __DC__GetTIdHTTPResponseInfo__ResponseText(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHTTPResponseInfo(Instance).ResponseText;
end;

procedure __DC__SetTIdHTTPResponseInfo__ResponseText(Instance : TObject; Params : PVariantArgList);
begin
TIdHTTPResponseInfo(Instance).ResponseText:=OleVariant(Params^[0]);
end;

function __DC__GetTIdHTTPResponseInfo__ServerSoftware(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHTTPResponseInfo(Instance).ServerSoftware;
end;

procedure __DC__SetTIdHTTPResponseInfo__ServerSoftware(Instance : TObject; Params : PVariantArgList);
begin
TIdHTTPResponseInfo(Instance).ServerSoftware:=OleVariant(Params^[0]);
end;

function __DC__GetTIdHTTPResponseInfo__Session(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdHTTPResponseInfo(Instance).Session);
end;

function __DC__GetTIdHTTPSession__Content(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdHTTPSession(Instance).Content);
end;

procedure __DC__SetTIdHTTPSession__Content(Instance : TObject; Params : PVariantArgList);
begin
TIdHTTPSession(Instance).Content:=TStrings(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIdHTTPSession__LastTimeStamp(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHTTPSession(Instance).LastTimeStamp;
end;

function __DC__GetTIdHTTPSession__RemoteHost(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHTTPSession(Instance).RemoteHost;
end;

function __DC__GetTIdHTTPSession__SessionID(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdHTTPSession(Instance).SessionID;
end;

procedure __RegisterProps;
begin
RegisterProperty(TIdCustomHTTPServer,'MIMETable',__DC__GetTIdCustomHTTPServer__MIMETable,nil);
RegisterProperty(TIdCustomHTTPServer,'SessionList',__DC__GetTIdCustomHTTPServer__SessionList,nil);
RegisterProperty(TIdHTTPRequestInfo,'Session',__DC__GetTIdHTTPRequestInfo__Session,nil);
RegisterProperty(TIdHTTPRequestInfo,'AuthExists',__DC__GetTIdHTTPRequestInfo__AuthExists,nil);
RegisterProperty(TIdHTTPRequestInfo,'AuthPassword',__DC__GetTIdHTTPRequestInfo__AuthPassword,nil);
RegisterProperty(TIdHTTPRequestInfo,'AuthUsername',__DC__GetTIdHTTPRequestInfo__AuthUsername,nil);
RegisterProperty(TIdHTTPRequestInfo,'Command',__DC__GetTIdHTTPRequestInfo__Command,nil);
RegisterProperty(TIdHTTPRequestInfo,'Cookies',__DC__GetTIdHTTPRequestInfo__Cookies,nil);
RegisterProperty(TIdHTTPRequestInfo,'Document',__DC__GetTIdHTTPRequestInfo__Document,__DC__SetTIdHTTPRequestInfo__Document);
RegisterProperty(TIdHTTPRequestInfo,'Params',__DC__GetTIdHTTPRequestInfo__Params,nil);
RegisterProperty(TIdHTTPRequestInfo,'PostStream',__DC__GetTIdHTTPRequestInfo__PostStream,__DC__SetTIdHTTPRequestInfo__PostStream);
RegisterProperty(TIdHTTPRequestInfo,'RawHTTPCommand',__DC__GetTIdHTTPRequestInfo__RawHTTPCommand,nil);
RegisterProperty(TIdHTTPRequestInfo,'RemoteIP',__DC__GetTIdHTTPRequestInfo__RemoteIP,nil);
RegisterProperty(TIdHTTPRequestInfo,'UnparsedParams',__DC__GetTIdHTTPRequestInfo__UnparsedParams,__DC__SetTIdHTTPRequestInfo__UnparsedParams);
RegisterProperty(TIdHTTPRequestInfo,'FormParams',__DC__GetTIdHTTPRequestInfo__FormParams,__DC__SetTIdHTTPRequestInfo__FormParams);
RegisterProperty(TIdHTTPRequestInfo,'QueryParams',__DC__GetTIdHTTPRequestInfo__QueryParams,__DC__SetTIdHTTPRequestInfo__QueryParams);
RegisterProperty(TIdHTTPRequestInfo,'Version',__DC__GetTIdHTTPRequestInfo__Version,nil);
RegisterProperty(TIdHTTPResponseInfo,'AuthRealm',__DC__GetTIdHTTPResponseInfo__AuthRealm,__DC__SetTIdHTTPResponseInfo__AuthRealm);
RegisterProperty(TIdHTTPResponseInfo,'CloseConnection',__DC__GetTIdHTTPResponseInfo__CloseConnection,__DC__SetTIdHTTPResponseInfo__CloseConnection);
RegisterProperty(TIdHTTPResponseInfo,'ContentStream',__DC__GetTIdHTTPResponseInfo__ContentStream,__DC__SetTIdHTTPResponseInfo__ContentStream);
RegisterProperty(TIdHTTPResponseInfo,'ContentText',__DC__GetTIdHTTPResponseInfo__ContentText,__DC__SetTIdHTTPResponseInfo__ContentText);
RegisterProperty(TIdHTTPResponseInfo,'Cookies',__DC__GetTIdHTTPResponseInfo__Cookies,__DC__SetTIdHTTPResponseInfo__Cookies);
RegisterProperty(TIdHTTPResponseInfo,'FreeContentStream',__DC__GetTIdHTTPResponseInfo__FreeContentStream,__DC__SetTIdHTTPResponseInfo__FreeContentStream);
RegisterProperty(TIdHTTPResponseInfo,'HeaderHasBeenWritten',__DC__GetTIdHTTPResponseInfo__HeaderHasBeenWritten,__DC__SetTIdHTTPResponseInfo__HeaderHasBeenWritten);
RegisterProperty(TIdHTTPResponseInfo,'ResponseNo',__DC__GetTIdHTTPResponseInfo__ResponseNo,__DC__SetTIdHTTPResponseInfo__ResponseNo);
RegisterProperty(TIdHTTPResponseInfo,'ResponseText',__DC__GetTIdHTTPResponseInfo__ResponseText,__DC__SetTIdHTTPResponseInfo__ResponseText);
RegisterProperty(TIdHTTPResponseInfo,'ServerSoftware',__DC__GetTIdHTTPResponseInfo__ServerSoftware,__DC__SetTIdHTTPResponseInfo__ServerSoftware);
RegisterProperty(TIdHTTPResponseInfo,'Session',__DC__GetTIdHTTPResponseInfo__Session,nil);
RegisterProperty(TIdHTTPSession,'Content',__DC__GetTIdHTTPSession__Content,__DC__SetTIdHTTPSession__Content);
RegisterProperty(TIdHTTPSession,'LastTimeStamp',__DC__GetTIdHTTPSession__LastTimeStamp,nil);
RegisterProperty(TIdHTTPSession,'RemoteHost',__DC__GetTIdHTTPSession__RemoteHost,nil);
RegisterProperty(TIdHTTPSession,'SessionID',__DC__GetTIdHTTPSession__SessionID,nil);
end;

const __ConstNames0 : array[0..7] of string = (
'Id_TId_HTTPServer_KeepAlive'
,'Id_TId_HTTPServer_SessionState'
,'Id_TId_HTTPSessionTimeOut'
,'Id_TId_HTTPAutoStartSession'
,'GResponseNo'
,'GFContentLength'
,'GServerSoftware'
,'GContentType'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,Id_TId_HTTPServer_KeepAlive));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,Id_TId_HTTPServer_SessionState));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,Id_TId_HTTPSessionTimeOut));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,Id_TId_HTTPAutoStartSession));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,GResponseNo));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,GFContentLength));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,GServerSoftware));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,GContentType));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..10] of TClass = (
EIdHTTPCannotSwitchSessionStateWhenActive,
EIdHTTPErrorParsingCommand,
EIdHTTPHeaderAlreadyWritten,
EIdHTTPServerError,
EIdHTTPUnsupportedAuthorisationScheme,
TIdCustomHTTPServer,
TIdHTTPCustomSessionList,
TIdHTTPDefaultSessionList,
TIdHTTPRequestInfo,
TIdHTTPResponseInfo,
TIdHTTPSession
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TIdCustomHTTPServer,'DoOnCreateSession',TypeInfo(_T0),[TypeInfo(TIdPeerThread),TypeInfo(TIdHTTPSession)], pointer(100));
RegRegisterMethod(TIdCustomHTTPServer,'DoOnCreateSession',TypeInfo(_T0),[TypeInfo(TIdPeerThread),TypeInfo(TIdHTTPSession)],  getVMTProcAddr('TIdCustomHTTPServer','DoOnCreateSession',100));


//RegRegisterMethod(TIdCustomHTTPServer,'DoInvalidSession',TypeInfo(_T1),[TypeInfo(TIdPeerThread),TypeInfo(TIdHTTPRequestInfo),TypeInfo(TIdHTTPResponseInfo),TypeInfo(Boolean),TypeInfo(string)], pointer(104));
RegRegisterMethod(TIdCustomHTTPServer,'DoInvalidSession',TypeInfo(_T1),[TypeInfo(TIdPeerThread),TypeInfo(TIdHTTPRequestInfo),TypeInfo(TIdHTTPResponseInfo),TypeInfo(Boolean),TypeInfo(string)],  getVMTProcAddr('TIdCustomHTTPServer','DoInvalidSession',104));


//RegRegisterMethod(TIdCustomHTTPServer,'DoCommandOther',TypeInfo(_T2),[TypeInfo(TIdPeerThread),TypeInfo(string),TypeInfo(string),TypeInfo(string)], pointer(108));
RegRegisterMethod(TIdCustomHTTPServer,'DoCommandOther',TypeInfo(_T2),[TypeInfo(TIdPeerThread),TypeInfo(string),TypeInfo(string),TypeInfo(string)],  getVMTProcAddr('TIdCustomHTTPServer','DoCommandOther',108));


//RegRegisterMethod(TIdCustomHTTPServer,'DoCommandGet',TypeInfo(_T3),[TypeInfo(TIdPeerThread),TypeInfo(TIdHTTPRequestInfo),TypeInfo(TIdHTTPResponseInfo)], pointer(112));
RegRegisterMethod(TIdCustomHTTPServer,'DoCommandGet',TypeInfo(_T3),[TypeInfo(TIdPeerThread),TypeInfo(TIdHTTPRequestInfo),TypeInfo(TIdHTTPResponseInfo)],  getVMTProcAddr('TIdCustomHTTPServer','DoCommandGet',112));


//RegRegisterMethod(TIdCustomHTTPServer,'CreatePostStream',TypeInfo(_T4),[TypeInfo(TIdPeerThread),TypeInfo(TStream)], pointer(116));
RegRegisterMethod(TIdCustomHTTPServer,'CreatePostStream',TypeInfo(_T4),[TypeInfo(TIdPeerThread),TypeInfo(TStream)],  getVMTProcAddr('TIdCustomHTTPServer','CreatePostStream',116));


RegRegisterMethod(TIdCustomHTTPServer,'CreateSession',TypeInfo(_T5),[
TypeInfo(TIdPeerThread),
TypeInfo(TIdHTTPResponseInfo),
TypeInfo(TIdHTTPRequestInfo),TypeInfo(TIdHTTPSession)],Addr(TIdCustomHTTPServer.CreateSession));

RegRegisterMethod(TIdCustomHTTPServer,'EndSession',TypeInfo(_T6),[
TypeInfo(string),TypeInfo(Boolean)],Addr(TIdCustomHTTPServer.EndSession));

//RegRegisterMethod(TIdCustomHTTPServer,'ServeFile',TypeInfo(_T7),[TypeInfo(TIdPeerThread),TypeInfo(TIdHTTPResponseInfo),TypeInfo(TFileName),TypeInfo(Cardinal)], pointer(120));
RegRegisterMethod(TIdCustomHTTPServer,'ServeFile',TypeInfo(_T7),[TypeInfo(TIdPeerThread),TypeInfo(TIdHTTPResponseInfo),TypeInfo(TFileName),TypeInfo(Cardinal)],  getVMTProcAddr('TIdCustomHTTPServer','ServeFile',120));


//RegRegisterMethod(TIdHTTPCustomSessionList,'RemoveSession',TypeInfo(_T8),[TypeInfo(TIdHTTPSession)], pointer(48));
RegRegisterMethod(TIdHTTPCustomSessionList,'RemoveSession',TypeInfo(_T8),[TypeInfo(TIdHTTPSession)],  getVMTProcAddr('TIdHTTPCustomSessionList','RemoveSession',48));


//RegRegisterMethod(TIdHTTPCustomSessionList,'Clear',TypeInfo(_T9),NoParams, pointer(52));
RegRegisterMethod(TIdHTTPCustomSessionList,'Clear',TypeInfo(_T9),NoParams,  getVMTProcAddr('TIdHTTPCustomSessionList','Clear',52));


RegisterProc(TIdHTTPCustomSessionList,'PurgeStaleSessions',mtScriptMethod,TypeInfo(_T10),[
TypeInfo(Boolean)],Addr(__TIdHTTPCustomSessionList__PurgeStaleSessions__Wrapper),cRegister);

//RegRegisterMethod(TIdHTTPCustomSessionList,'CreateUniqueSession',TypeInfo(_T11),[TypeInfo(string),TypeInfo(TIdHTTPSession)], pointer(60));
RegRegisterMethod(TIdHTTPCustomSessionList,'CreateUniqueSession',TypeInfo(_T11),[TypeInfo(string),TypeInfo(TIdHTTPSession)],  getVMTProcAddr('TIdHTTPCustomSessionList','CreateUniqueSession',60));


//RegRegisterMethod(TIdHTTPCustomSessionList,'CreateSession',TypeInfo(_T12),[TypeInfo(string),TypeInfo(string),TypeInfo(TIdHTTPSession)], pointer(64));
RegRegisterMethod(TIdHTTPCustomSessionList,'CreateSession',TypeInfo(_T12),[TypeInfo(string),TypeInfo(string),TypeInfo(TIdHTTPSession)],  getVMTProcAddr('TIdHTTPCustomSessionList','CreateSession',64));


//RegRegisterMethod(TIdHTTPCustomSessionList,'GetSession',TypeInfo(_T13),[TypeInfo(string),TypeInfo(string),TypeInfo(TIdHTTPSession)], pointer(68));
RegRegisterMethod(TIdHTTPCustomSessionList,'GetSession',TypeInfo(_T13),[TypeInfo(string),TypeInfo(string),TypeInfo(TIdHTTPSession)],  getVMTProcAddr('TIdHTTPCustomSessionList','GetSession',68));


//RegRegisterMethod(TIdHTTPCustomSessionList,'Add',TypeInfo(_T14),[TypeInfo(TIdHTTPSession)], pointer(72));
RegRegisterMethod(TIdHTTPCustomSessionList,'Add',TypeInfo(_T14),[TypeInfo(TIdHTTPSession)],  getVMTProcAddr('TIdHTTPCustomSessionList','Add',72));


RegRegisterMethod(TIdHTTPResponseInfo,'CloseSession',TypeInfo(_T15),NoParams,Addr(TIdHTTPResponseInfo.CloseSession));

RegisterProc(TIdHTTPResponseInfo,'Create',mtConstructor,TypeInfo(_T16),[
TypeInfo(TIdTCPServerConnection)],Addr(TIdHTTPResponseInfo.Create),cRegister);

RegRegisterMethod(TIdHTTPResponseInfo,'Redirect',TypeInfo(_T17),[
TypeInfo(string)],Addr(TIdHTTPResponseInfo.Redirect));

RegRegisterMethod(TIdHTTPResponseInfo,'WriteHeader',TypeInfo(_T18),NoParams,Addr(TIdHTTPResponseInfo.WriteHeader));

RegRegisterMethod(TIdHTTPResponseInfo,'WriteContent',TypeInfo(_T19),NoParams,Addr(TIdHTTPResponseInfo.WriteContent));

//RegRegisterMethod(TIdHTTPSession,'IsSessionStale',TypeInfo(_T20),[TypeInfo(Boolean)], pointer(0));
RegRegisterMethod(TIdHTTPSession,'IsSessionStale',TypeInfo(_T20),[TypeInfo(Boolean)],  getVMTProcAddr('TIdHTTPSession','IsSessionStale',0));


//RegRegisterMethod(TIdHTTPSession,'DoSessionEnd',TypeInfo(_T21),NoParams, pointer(4));
RegRegisterMethod(TIdHTTPSession,'DoSessionEnd',TypeInfo(_T21),NoParams,  getVMTProcAddr('TIdHTTPSession','DoSessionEnd',4));


RegisterProc(TIdHTTPSession,'Create',mtConstructor,TypeInfo(_T22),[
TypeInfo(TIdHTTPCustomSessionList)], pointer(8),cRegister);

RegisterProc(TIdHTTPSession,'CreateInitialized',mtConstructor,TypeInfo(_T23),[
TypeInfo(TIdHTTPCustomSessionList),
TypeInfo(string),
TypeInfo(string)], pointer(12),cRegister);

RegRegisterMethod(TIdHTTPSession,'Lock',TypeInfo(_T24),NoParams,Addr(TIdHTTPSession.Lock));

RegRegisterMethod(TIdHTTPSession,'Unlock',TypeInfo(_T25),NoParams,Addr(TIdHTTPSession.Unlock));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
RegisterEvent(TypeInfo(TIdHTTPGetEvent),[
TypeInfo(TIdPeerThread),
TypeInfo(TIdHTTPRequestInfo),
TypeInfo(TIdHTTPResponseInfo)]);

RegisterEvent(TypeInfo(TIdHTTPInvalidSessionEvent),[
TypeInfo(TIdPeerThread),
TypeInfo(TIdHTTPRequestInfo),
TypeInfo(TIdHTTPResponseInfo),
TypeInfo(Boolean),
TypeInfo(string)]);

RegisterEvent(TypeInfo(TIdHTTPOtherEvent),[
TypeInfo(TIdPeerThread),
TypeInfo(string),
TypeInfo(string),
TypeInfo(string)]);

RegisterEvent(TypeInfo(TOnCreatePostStream),[
TypeInfo(TIdPeerThread),
TypeInfo(TStream)]);

RegisterEvent(TypeInfo(TOnCreateSession),[
TypeInfo(TIdPeerThread),
TypeInfo(TIdHTTPSession)]);

RegisterEvent(TypeInfo(TOnSessionEndEvent),[
TypeInfo(TIdHTTPSession)]);

RegisterEvent(TypeInfo(TOnSessionStartEvent),[
TypeInfo(TIdHTTPSession)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
