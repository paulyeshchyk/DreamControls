{*******************************************************}
{                                                       }
{ Import unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

Unit Math_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Types,
  Math;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = function (const X : Extended): Extended of object;

_T1 = _T0;

_T2 = function (const Y : Extended;
const X : Extended): Extended of object;

_T3 = procedure (const Theta : Single;
var Sin : Single;
var Cos : Single) of object;

_T4 = function (const X : Single): Single of object;

_T5 = _T4;

_T6 = _T4;

_T7 = _T4;

_T8 = function (const X : Single;
const Y : Single): Single of object;

_T9 = function (const Radians : Single): Single of object;

_T10 = _T9;

_T11 = _T9;

_T12 = function (const Degrees : Single): Single of object;

_T13 = _T12;

_T14 = _T12;

_T15 = _T12;

_T16 = function (const Grads : Single): Single of object;

_T17 = _T16;

_T18 = _T16;

_T19 = function (const Cycles : Single): Single of object;

_T20 = _T19;

_T21 = _T19;

_T22 = _T4;

_T23 = _T4;

_T24 = _T4;

_T25 = _T4;

_T26 = _T4;

_T27 = _T4;

_T28 = _T4;

_T29 = _T4;

_T30 = _T4;

_T31 = _T4;

_T32 = _T4;

_T33 = _T4;

_T34 = _T4;

_T35 = _T4;

_T36 = _T4;

_T37 = _T4;

_T38 = _T4;

_T39 = _T4;

_T40 = _T4;

_T41 = _T4;

_T42 = _T4;

_T43 = function (const Base : Single;
const X : Single): Single of object;

_T44 = function (const Base : Single;
const Exponent : Integer): Single of object;

_T45 = function (const Base : Extended;
const Exponent : Extended): Extended of object;

_T46 = procedure (const X : Single;
var Mantissa : Single;
var Exponent : Integer) of object;

_T47 = function (const X : Single;
const P : Integer): Single of object;

_T48 = function (const X : Single): Integer of object;

_T49 = _T48;

_T50 = function (const X : Single;
const Coefficients : Array of Single): Single of object;

_T51 = function (const Data : Array of Single): Single of object;

_T52 = _T51;

_T53 = _T51;

_T54 = procedure (const Data : Array of Single;
var Sum : Extended;
var SumOfSquares : Extended) of object;

_T55 = _T51;

_T56 = function (const A : Integer;
const B : Integer): Integer of object;

_T57 = _T51;

_T58 = _T56;

_T59 = _T51;

_T60 = procedure (const Data : Array of Single;
var Mean : Single;
var StdDev : Single) of object;

_T61 = _T51;

_T62 = _T51;

_T63 = _T51;

_T64 = _T51;

_T65 = _T51;

_T66 = procedure (const Data : Array of Double;
var M1 : Extended;
var M2 : Extended;
var M3 : Extended;
var M4 : Extended;
var Skew : Extended;
var Kurtosis : Extended) of object;

_T67 = function (Mean : Single;
StdDev : Single): Single of object;

_T68 = function (const AValue : Single): Boolean of object;

_T69 = _T68;

_T70 = function (const AValue : Integer): TValueSign of object;

_T71 = function (const A : Extended;
const B : Extended;
Epsilon : Extended): TValueRelationship of object;

_T72 = function (const A : Extended;
const B : Extended;
Epsilon : Extended): Boolean of object;

_T73 = function (const A : Extended;
Epsilon : Extended): Boolean of object;

_T74 = function (AValue : Boolean;
const ATrue : Integer;
const AFalse : Integer): Integer of object;

_T75 = function (const ANumerator : Single;
const ADenominator : Single): Single of object;

_T76 = function (const AFrom : Integer;
const ATo : Integer): Integer of object;

_T77 = function (const AValues : Array of Integer): Integer of object;

_T78 = function (const AValue : Integer;
const AMin : Integer;
const AMax : Integer): Boolean of object;

_T79 = function (const AValue : Integer;
const AMin : Integer;
const AMax : Integer): Integer of object;

_T80 = procedure (Dividend : Cardinal;
Divisor : Word;
var Result : Word;
var Remainder : Word) of object;

_T81 = function (const AValue : Extended;
const ADigit : TRoundToEXRangeExtended): Extended of object;

_T82 = function (const AValue : Single;
const ADigit : TRoundToRange): Single of object;

_T83 = function (const Cost : Extended;
const Salvage : Extended;
Life : Integer;
Period : Integer): Extended of object;

_T84 = function (const Rate : Extended;
NPeriods : Integer;
const Payment : Extended;
const PresentValue : Extended;
PaymentTime : TPaymentTime): Extended of object;

_T85 = function (const Rate : Extended;
Period : Integer;
NPeriods : Integer;
const PresentValue : Extended;
const FutureValue : Extended;
PaymentTime : TPaymentTime): Extended of object;

_T86 = function (NPeriods : Integer;
const Payment : Extended;
const PresentValue : Extended;
const FutureValue : Extended;
PaymentTime : TPaymentTime): Extended of object;

_T87 = function (const Guess : Extended;
const CashFlows : Array of Double): Extended of object;

_T88 = function (const Rate : Extended;
Payment : Extended;
const PresentValue : Extended;
const FutureValue : Extended;
PaymentTime : TPaymentTime): Extended of object;

_T89 = function (const Rate : Extended;
const CashFlows : Array of Double;
PaymentTime : TPaymentTime): Extended of object;

_T90 = function (Rate : Extended;
NPeriods : Integer;
const PresentValue : Extended;
const FutureValue : Extended;
PaymentTime : TPaymentTime): Extended of object;

_T91 = _T85;

_T92 = function (const Rate : Extended;
NPeriods : Integer;
const Payment : Extended;
const FutureValue : Extended;
PaymentTime : TPaymentTime): Extended of object;

_T93 = function (const Cost : Extended;
const Salvage : Extended;
Life : Integer): Extended of object;

_T94 = _T83;

_T95 = function : TFPURoundingMode of object;

_T96 = function : TSSERoundingMode of object;

_T97 = function : TRoundingMode of object;

_T98 = function (const RoundMode : TFPURoundingMode): TFPURoundingMode of object;

_T99 = function (const RoundMode : TSSERoundingMode): TSSERoundingMode of object;

_T100 = function (const RoundMode : TRoundingMode): TRoundingMode of object;

_T101 = function : TFPUPrecisionMode of object;

_T102 = function (const Precision : TFPUPrecisionMode): TFPUPrecisionMode of object;

_T103 = function : TFPUExceptionMask of object;

_T104 = function : TSSEExceptionMask of object;

_T105 = function : TArithmeticExceptionMask of object;

_T106 = function (const Mask : TFPUExceptionMask): TFPUExceptionMask of object;

_T107 = function (const Mask : TSSEExceptionMask): TSSEExceptionMask of object;

_T108 = function (const Mask : TArithmeticExceptionMask): TArithmeticExceptionMask of object;

_T109 = procedure (RaisePending : Boolean) of object;

_T110 = _T109;

_T111 = procedure (RaisePending : Boolean;
ExceptionFlags : TArithmeticExceptions) of object;

_T112 = function : TArithmeticExceptions of object;

_T113 = function (const Exceptions : TArithmeticExceptions): TArithmeticExceptions of object;

_T114 = procedure (const ExceptionFlags : TArithmeticExceptions) of object;

function ____CompareValue__Wrapper(const p0 : Extended;
const p1 : Extended;
p2 : Extended): TValueRelationship;
begin
result := CompareValue(p0,p1,p2);
end;

function ____SameValue__Wrapper(const p0 : Extended;
const p1 : Extended;
p2 : Extended): Boolean;
begin
result := SameValue(p0,p1,p2);
end;

function ____IsZero__Wrapper(const p0 : Extended;
p1 : Extended): Boolean;
begin
result := IsZero(p0,p1);
end;

function ____IfThen__Wrapper(p0 : Boolean;
const p1 : Integer;
const p2 : Integer): Integer;
begin
result := IfThen(p0,p1,p2);
end;

function ____SimpleRoundTo__Wrapper(const p0 : Single;
const p1 : TRoundToRange): Single;
begin
result := SimpleRoundTo(p0,p1);
end;

procedure ____ClearFPUExceptions__Wrapper(cArgs : integer; pArgs : PArgList);
begin
case cArgs of
0:
begin
ClearFPUExceptions;
end;
1:
begin
ClearFPUExceptions(OleVariant(pargs^[0]));
end;
end
end;

procedure ____ClearSSEExceptions__Wrapper(cArgs : integer; pArgs : PArgList);
begin
case cArgs of
0:
begin
ClearSSEExceptions;
end;
1:
begin
ClearSSEExceptions(OleVariant(pargs^[0]));
end;
end
end;

procedure ____ClearExceptions__Wrapper(cArgs : integer; pArgs : PArgList);
var
__s1 : TArithmeticExceptions;
begin
if cArgs > 1 then
VarToSet(__s1,OleVariant(pargs^[1]),SizeOf(TArithmeticExceptions));
case cArgs of
0:
begin
ClearExceptions;
end;
1:
begin
ClearExceptions(OleVariant(pargs^[0]));
end;
2:
begin
ClearExceptions(OleVariant(pargs^[1]),__s1);
end;
end
end;

procedure ____RaiseExceptions__Wrapper(cArgs : integer; pArgs : PArgList);
var
__s0 : TArithmeticExceptions;
begin
if cArgs > 0 then
VarToSet(__s0,OleVariant(pargs^[0]),SizeOf(TArithmeticExceptions));
case cArgs of
0:
begin
RaiseExceptions;
end;
1:
begin
RaiseExceptions(__s0);
end;
end
end;

procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..45] of string = (
'MinSingle'
,'MinSingleDenormal'
,'MaxSingle'
,'MinDouble'
,'MinDoubleDenormal'
,'MaxDouble'
,'MinExtended80'
,'MinExtended80Denormal'
,'MaxExtended80'
,'MinExtended'
,'MinExtendedDenormal'
,'MinComp'
,'MaxComp'
,'NaN'
,'Infinity'
,'NegInfinity'
,'NegativeValue'
,'ZeroValue'
,'PositiveValue'
,'ptEndOfPeriod'
,'ptStartOfPeriod'
,'rmNearest'
,'rmDown'
,'rmUp'
,'rmTruncate'
,'pmSingle'
,'pmReserved'
,'pmDouble'
,'pmExtended'
,'exInvalidOp'
,'exDenormalized'
,'exZeroDivide'
,'exOverflow'
,'exUnderflow'
,'exPrecision'
,'exAllArithmeticExceptions'
,'DefaultExceptionFlags'
,'seSSE'
,'seSSE2'
,'seSSE3'
,'seSSSE3'
,'seSSE41'
,'seSSE42'
,'sePOPCNT'
,'seAESNI'
,'sePCLMULQDQ'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,MinSingle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,MinSingleDenormal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,MaxSingle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,MinDouble));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,MinDoubleDenormal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,MaxDouble));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,MinExtended80));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,MinExtended80Denormal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,MaxExtended80));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,MinExtended));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,MinExtendedDenormal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,MinComp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,MaxComp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,NaN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,Infinity));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,NegInfinity));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,NegativeValue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,ZeroValue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,PositiveValue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,ptEndOfPeriod));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,ptStartOfPeriod));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,rmNearest));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,rmDown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,rmUp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,rmTruncate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,pmSingle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,pmReserved));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,pmDouble));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,pmExtended));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,exInvalidOp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,exDenormalized));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,exZeroDivide));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,exOverflow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,exUnderflow));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,exPrecision));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,VarFromSet(exAllArithmeticExceptions, sizeof(exAllArithmeticExceptions))));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,VarFromSet(DefaultExceptionFlags, sizeof(DefaultExceptionFlags))));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,seSSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,seSSE2));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,seSSE3));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,seSSSE3));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,seSSE41));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,seSSE42));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,sePOPCNT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,seAESNI));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,sePCLMULQDQ));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..0] of TClass = (
EInvalidArgument
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..114] of string = (
'ArcCos'
,'ArcSin'
,'ArcTan2'
,'SinCos'
,'Tan'
,'Cotan'
,'Secant'
,'Cosecant'
,'Hypot'
,'RadToDeg'
,'RadToGrad'
,'RadToCycle'
,'DegToRad'
,'DegToGrad'
,'DegToCycle'
,'DegNormalize'
,'GradToRad'
,'GradToDeg'
,'GradToCycle'
,'CycleToRad'
,'CycleToDeg'
,'CycleToGrad'
,'Cot'
,'Sec'
,'Csc'
,'Cosh'
,'Sinh'
,'Tanh'
,'CotH'
,'SecH'
,'CscH'
,'ArcCot'
,'ArcSec'
,'ArcCsc'
,'ArcCosh'
,'ArcSinh'
,'ArcTanh'
,'ArcCotH'
,'ArcSecH'
,'ArcCscH'
,'LnXP1'
,'Log10'
,'Log2'
,'LogN'
,'IntPower'
,'Power'
,'Frexp'
,'Ldexp'
,'Ceil'
,'Floor'
,'Poly'
,'Mean'
,'Sum'
,'SumOfSquares'
,'SumsAndSquares'
,'MinValue'
,'Min'
,'MaxValue'
,'Max'
,'StdDev'
,'MeanAndStdDev'
,'PopnStdDev'
,'Variance'
,'PopnVariance'
,'TotalVariance'
,'Norm'
,'MomentSkewKurtosis'
,'RandG'
,'IsNan'
,'IsInfinite'
,'Sign'
,'CompareValue'
,'SameValue'
,'IsZero'
,'IfThen'
,'FMod'
,'RandomRange'
,'RandomFrom'
,'InRange'
,'EnsureRange'
,'DivMod'
,'RoundTo'
,'SimpleRoundTo'
,'DoubleDecliningBalance'
,'FutureValue'
,'InterestPayment'
,'InterestRate'
,'InternalRateOfReturn'
,'NumberOfPeriods'
,'NetPresentValue'
,'Payment'
,'PeriodPayment'
,'PresentValue'
,'SLNDepreciation'
,'SYDDepreciation'
,'GetFPURoundMode'
,'GetSSERoundMode'
,'GetRoundMode'
,'SetFPURoundMode'
,'SetSSERoundMode'
,'SetRoundMode'
,'GetPrecisionMode'
,'SetPrecisionMode'
,'GetFPUExceptionMask'
,'GetSSEExceptionMask'
,'GetExceptionMask'
,'SetFPUExceptionMask'
,'SetSSEExceptionMask'
,'SetExceptionMask'
,'ClearFPUExceptions'
,'ClearSSEExceptions'
,'ClearExceptions'
,'GetExceptions'
,'SetExceptions'
,'RaiseExceptions'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(Extended),TypeInfo(Extended)],Addr(ArcCos),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(Extended),TypeInfo(Extended)],Addr(ArcSin),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T2),[
TypeInfo(Extended),
TypeInfo(Extended),TypeInfo(Extended)],Addr(ArcTan2),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T3),[
TypeInfo(Single),
TypeInfo(Single),
TypeInfo(Single)],Addr(SinCos),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T4),[
TypeInfo(Single),TypeInfo(Single)],Addr(Tan),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T5),[
TypeInfo(Single),TypeInfo(Single)],Addr(Cotan),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T6),[
TypeInfo(Single),TypeInfo(Single)],Addr(Secant),cRegister);

RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T7),[
TypeInfo(Single),TypeInfo(Single)],Addr(Cosecant),cRegister);

RegisterProc(nil,MethodNames[8],mtProc,TypeInfo(_T8),[
TypeInfo(Single),
TypeInfo(Single),TypeInfo(Single)],Addr(Hypot),cRegister);

RegisterProc(nil,MethodNames[9],mtProc,TypeInfo(_T9),[
TypeInfo(Single),TypeInfo(Single)],Addr(RadToDeg),cRegister);

RegisterProc(nil,MethodNames[10],mtProc,TypeInfo(_T10),[
TypeInfo(Single),TypeInfo(Single)],Addr(RadToGrad),cRegister);

RegisterProc(nil,MethodNames[11],mtProc,TypeInfo(_T11),[
TypeInfo(Single),TypeInfo(Single)],Addr(RadToCycle),cRegister);

RegisterProc(nil,MethodNames[12],mtProc,TypeInfo(_T12),[
TypeInfo(Single),TypeInfo(Single)],Addr(DegToRad),cRegister);

RegisterProc(nil,MethodNames[13],mtProc,TypeInfo(_T13),[
TypeInfo(Single),TypeInfo(Single)],Addr(DegToGrad),cRegister);

RegisterProc(nil,MethodNames[14],mtProc,TypeInfo(_T14),[
TypeInfo(Single),TypeInfo(Single)],Addr(DegToCycle),cRegister);

RegisterProc(nil,MethodNames[15],mtProc,TypeInfo(_T15),[
TypeInfo(Single),TypeInfo(Single)],Addr(DegNormalize),cRegister);

RegisterProc(nil,MethodNames[16],mtProc,TypeInfo(_T16),[
TypeInfo(Single),TypeInfo(Single)],Addr(GradToRad),cRegister);

RegisterProc(nil,MethodNames[17],mtProc,TypeInfo(_T17),[
TypeInfo(Single),TypeInfo(Single)],Addr(GradToDeg),cRegister);

RegisterProc(nil,MethodNames[18],mtProc,TypeInfo(_T18),[
TypeInfo(Single),TypeInfo(Single)],Addr(GradToCycle),cRegister);

RegisterProc(nil,MethodNames[19],mtProc,TypeInfo(_T19),[
TypeInfo(Single),TypeInfo(Single)],Addr(CycleToRad),cRegister);

RegisterProc(nil,MethodNames[20],mtProc,TypeInfo(_T20),[
TypeInfo(Single),TypeInfo(Single)],Addr(CycleToDeg),cRegister);

RegisterProc(nil,MethodNames[21],mtProc,TypeInfo(_T21),[
TypeInfo(Single),TypeInfo(Single)],Addr(CycleToGrad),cRegister);

RegisterProc(nil,MethodNames[22],mtProc,TypeInfo(_T22),[
TypeInfo(Single),TypeInfo(Single)],Addr(Cot),cRegister);

RegisterProc(nil,MethodNames[23],mtProc,TypeInfo(_T23),[
TypeInfo(Single),TypeInfo(Single)],Addr(Sec),cRegister);

RegisterProc(nil,MethodNames[24],mtProc,TypeInfo(_T24),[
TypeInfo(Single),TypeInfo(Single)],Addr(Csc),cRegister);

RegisterProc(nil,MethodNames[25],mtProc,TypeInfo(_T25),[
TypeInfo(Single),TypeInfo(Single)],Addr(Cosh),cRegister);

RegisterProc(nil,MethodNames[26],mtProc,TypeInfo(_T26),[
TypeInfo(Single),TypeInfo(Single)],Addr(Sinh),cRegister);

RegisterProc(nil,MethodNames[27],mtProc,TypeInfo(_T27),[
TypeInfo(Single),TypeInfo(Single)],Addr(Tanh),cRegister);

RegisterProc(nil,MethodNames[28],mtProc,TypeInfo(_T28),[
TypeInfo(Single),TypeInfo(Single)],Addr(CotH),cRegister);

RegisterProc(nil,MethodNames[29],mtProc,TypeInfo(_T29),[
TypeInfo(Single),TypeInfo(Single)],Addr(SecH),cRegister);

RegisterProc(nil,MethodNames[30],mtProc,TypeInfo(_T30),[
TypeInfo(Single),TypeInfo(Single)],Addr(CscH),cRegister);

RegisterProc(nil,MethodNames[31],mtProc,TypeInfo(_T31),[
TypeInfo(Single),TypeInfo(Single)],Addr(ArcCot),cRegister);

RegisterProc(nil,MethodNames[32],mtProc,TypeInfo(_T32),[
TypeInfo(Single),TypeInfo(Single)],Addr(ArcSec),cRegister);

RegisterProc(nil,MethodNames[33],mtProc,TypeInfo(_T33),[
TypeInfo(Single),TypeInfo(Single)],Addr(ArcCsc),cRegister);

RegisterProc(nil,MethodNames[34],mtProc,TypeInfo(_T34),[
TypeInfo(Single),TypeInfo(Single)],Addr(ArcCosh),cRegister);

RegisterProc(nil,MethodNames[35],mtProc,TypeInfo(_T35),[
TypeInfo(Single),TypeInfo(Single)],Addr(ArcSinh),cRegister);

RegisterProc(nil,MethodNames[36],mtProc,TypeInfo(_T36),[
TypeInfo(Single),TypeInfo(Single)],Addr(ArcTanh),cRegister);

RegisterProc(nil,MethodNames[37],mtProc,TypeInfo(_T37),[
TypeInfo(Single),TypeInfo(Single)],Addr(ArcCotH),cRegister);

RegisterProc(nil,MethodNames[38],mtProc,TypeInfo(_T38),[
TypeInfo(Single),TypeInfo(Single)],Addr(ArcSecH),cRegister);

RegisterProc(nil,MethodNames[39],mtProc,TypeInfo(_T39),[
TypeInfo(Single),TypeInfo(Single)],Addr(ArcCscH),cRegister);

RegisterProc(nil,MethodNames[40],mtProc,TypeInfo(_T40),[
TypeInfo(Single),TypeInfo(Single)],Addr(LnXP1),cRegister);

RegisterProc(nil,MethodNames[41],mtProc,TypeInfo(_T41),[
TypeInfo(Single),TypeInfo(Single)],Addr(Log10),cRegister);

RegisterProc(nil,MethodNames[42],mtProc,TypeInfo(_T42),[
TypeInfo(Single),TypeInfo(Single)],Addr(Log2),cRegister);

RegisterProc(nil,MethodNames[43],mtProc,TypeInfo(_T43),[
TypeInfo(Single),
TypeInfo(Single),TypeInfo(Single)],Addr(LogN),cRegister);

RegisterProc(nil,MethodNames[44],mtProc,TypeInfo(_T44),[
TypeInfo(Single),
TypeInfo(Integer),TypeInfo(Single)],Addr(IntPower),cRegister);

RegisterProc(nil,MethodNames[45],mtProc,TypeInfo(_T45),[
TypeInfo(Extended),
TypeInfo(Extended),TypeInfo(Extended)],Addr(Power),cRegister);

RegisterProc(nil,MethodNames[46],mtProc,TypeInfo(_T46),[
TypeInfo(Single),
TypeInfo(Single),
TypeInfo(Integer)],Addr(Frexp),cRegister);

RegisterProc(nil,MethodNames[47],mtProc,TypeInfo(_T47),[
TypeInfo(Single),
TypeInfo(Integer),TypeInfo(Single)],Addr(Ldexp),cRegister);

RegisterProc(nil,MethodNames[48],mtProc,TypeInfo(_T48),[
TypeInfo(Single),TypeInfo(Integer)],Addr(Ceil),cRegister);

RegisterProc(nil,MethodNames[49],mtProc,TypeInfo(_T49),[
TypeInfo(Single),TypeInfo(Integer)],Addr(Floor),cRegister);

RegisterProc(nil,MethodNames[50],mtProc,TypeInfo(_T50),[
TypeInfo(Single),
ArrayInfo(TypeInfo(Single)),TypeInfo(Single)],Addr(Poly),cRegister);

RegisterProc(nil,MethodNames[51],mtProc,TypeInfo(_T51),[
ArrayInfo(TypeInfo(Single)),TypeInfo(Single)],Addr(Mean),cRegister);

RegisterProc(nil,MethodNames[52],mtProc,TypeInfo(_T52),[
ArrayInfo(TypeInfo(Single)),TypeInfo(Single)],Addr(Sum),cRegister);

RegisterProc(nil,MethodNames[53],mtProc,TypeInfo(_T53),[
ArrayInfo(TypeInfo(Single)),TypeInfo(Single)],Addr(SumOfSquares),cRegister);

RegisterProc(nil,MethodNames[54],mtProc,TypeInfo(_T54),[
ArrayInfo(TypeInfo(Single)),
TypeInfo(Extended),
TypeInfo(Extended)],Addr(SumsAndSquares),cRegister);

RegisterProc(nil,MethodNames[55],mtProc,TypeInfo(_T55),[
ArrayInfo(TypeInfo(Single)),TypeInfo(Single)],Addr(MinValue),cRegister);

RegisterProc(nil,MethodNames[56],mtProc,TypeInfo(_T56),[
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Integer)],Addr(Min),cRegister);

RegisterProc(nil,MethodNames[57],mtProc,TypeInfo(_T57),[
ArrayInfo(TypeInfo(Single)),TypeInfo(Single)],Addr(MaxValue),cRegister);

RegisterProc(nil,MethodNames[58],mtProc,TypeInfo(_T58),[
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Integer)],Addr(Max),cRegister);

RegisterProc(nil,MethodNames[59],mtProc,TypeInfo(_T59),[
ArrayInfo(TypeInfo(Single)),TypeInfo(Single)],Addr(StdDev),cRegister);

RegisterProc(nil,MethodNames[60],mtProc,TypeInfo(_T60),[
ArrayInfo(TypeInfo(Single)),
TypeInfo(Single),
TypeInfo(Single)],Addr(MeanAndStdDev),cRegister);

RegisterProc(nil,MethodNames[61],mtProc,TypeInfo(_T61),[
ArrayInfo(TypeInfo(Single)),TypeInfo(Single)],Addr(PopnStdDev),cRegister);

RegisterProc(nil,MethodNames[62],mtProc,TypeInfo(_T62),[
ArrayInfo(TypeInfo(Single)),TypeInfo(Single)],Addr(Variance),cRegister);

RegisterProc(nil,MethodNames[63],mtProc,TypeInfo(_T63),[
ArrayInfo(TypeInfo(Single)),TypeInfo(Single)],Addr(PopnVariance),cRegister);

RegisterProc(nil,MethodNames[64],mtProc,TypeInfo(_T64),[
ArrayInfo(TypeInfo(Single)),TypeInfo(Single)],Addr(TotalVariance),cRegister);

RegisterProc(nil,MethodNames[65],mtProc,TypeInfo(_T65),[
ArrayInfo(TypeInfo(Single)),TypeInfo(Single)],Addr(Norm),cRegister);

RegisterProc(nil,MethodNames[66],mtProc,TypeInfo(_T66),[
ArrayInfo(TypeInfo(Double)),
TypeInfo(Extended),
TypeInfo(Extended),
TypeInfo(Extended),
TypeInfo(Extended),
TypeInfo(Extended),
TypeInfo(Extended)],Addr(MomentSkewKurtosis),cRegister);

RegisterProc(nil,MethodNames[67],mtProc,TypeInfo(_T67),[
TypeInfo(Single),
TypeInfo(Single),TypeInfo(Single)],Addr(RandG),cRegister);

RegisterProc(nil,MethodNames[68],mtProc,TypeInfo(_T68),[
TypeInfo(Single),TypeInfo(Boolean)],Addr(IsNan),cRegister);

RegisterProc(nil,MethodNames[69],mtProc,TypeInfo(_T69),[
TypeInfo(Single),TypeInfo(Boolean)],Addr(IsInfinite),cRegister);

RegisterProc(nil,MethodNames[70],mtProc,TypeInfo(_T70),[
TypeInfo(Integer),TypeInfo(TValueSign)],Addr(Sign),cRegister);

RegisterProc(nil,MethodNames[71],mtProc,TypeInfo(_T71),[
TypeInfo(Extended),
TypeInfo(Extended),
TypeInfo(Extended),TypeInfo(TValueRelationship)],Addr(____CompareValue__Wrapper),cRegister);

RegisterProc(nil,MethodNames[72],mtProc,TypeInfo(_T72),[
TypeInfo(Extended),
TypeInfo(Extended),
TypeInfo(Extended),TypeInfo(Boolean)],Addr(____SameValue__Wrapper),cRegister);

RegisterProc(nil,MethodNames[73],mtProc,TypeInfo(_T73),[
TypeInfo(Extended),
TypeInfo(Extended),TypeInfo(Boolean)],Addr(____IsZero__Wrapper),cRegister);

RegisterProc(nil,MethodNames[74],mtProc,TypeInfo(_T74),[
TypeInfo(Boolean),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Integer)],Addr(____IfThen__Wrapper),cRegister);

RegisterProc(nil,MethodNames[75],mtProc,TypeInfo(_T75),[
TypeInfo(Single),
TypeInfo(Single),TypeInfo(Single)],Addr(FMod),cRegister);

RegisterProc(nil,MethodNames[76],mtProc,TypeInfo(_T76),[
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Integer)],Addr(RandomRange),cRegister);

RegisterProc(nil,MethodNames[77],mtProc,TypeInfo(_T77),[
ArrayInfo(TypeInfo(Integer)),TypeInfo(Integer)],Addr(RandomFrom),cRegister);

RegisterProc(nil,MethodNames[78],mtProc,TypeInfo(_T78),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Boolean)],Addr(InRange),cRegister);

RegisterProc(nil,MethodNames[79],mtProc,TypeInfo(_T79),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Integer)],Addr(EnsureRange),cRegister);

RegisterProc(nil,MethodNames[80],mtProc,TypeInfo(_T80),[
TypeInfo(Cardinal),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word)],Addr(DivMod),cRegister);

RegisterProc(nil,MethodNames[81],mtProc,TypeInfo(_T81),[
TypeInfo(Extended),
TypeInfo(TRoundToEXRangeExtended),TypeInfo(Extended)],Addr(RoundTo),cRegister);

RegisterProc(nil,MethodNames[82],mtProc,TypeInfo(_T82),[
TypeInfo(Single),
TypeInfo(TRoundToRange),TypeInfo(Single)],Addr(____SimpleRoundTo__Wrapper),cRegister);

RegisterProc(nil,MethodNames[83],mtProc,TypeInfo(_T83),[
TypeInfo(Extended),
TypeInfo(Extended),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Extended)],Addr(DoubleDecliningBalance),cRegister);

RegisterProc(nil,MethodNames[84],mtProc,TypeInfo(_T84),[
TypeInfo(Extended),
TypeInfo(Integer),
TypeInfo(Extended),
TypeInfo(Extended),
TypeInfo(TPaymentTime),TypeInfo(Extended)],Addr(FutureValue),cRegister);

RegisterProc(nil,MethodNames[85],mtProc,TypeInfo(_T85),[
TypeInfo(Extended),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Extended),
TypeInfo(Extended),
TypeInfo(TPaymentTime),TypeInfo(Extended)],Addr(InterestPayment),cRegister);

RegisterProc(nil,MethodNames[86],mtProc,TypeInfo(_T86),[
TypeInfo(Integer),
TypeInfo(Extended),
TypeInfo(Extended),
TypeInfo(Extended),
TypeInfo(TPaymentTime),TypeInfo(Extended)],Addr(InterestRate),cRegister);

RegisterProc(nil,MethodNames[87],mtProc,TypeInfo(_T87),[
TypeInfo(Extended),
ArrayInfo(TypeInfo(Double)),TypeInfo(Extended)],Addr(InternalRateOfReturn),cRegister);

RegisterProc(nil,MethodNames[88],mtProc,TypeInfo(_T88),[
TypeInfo(Extended),
TypeInfo(Extended),
TypeInfo(Extended),
TypeInfo(Extended),
TypeInfo(TPaymentTime),TypeInfo(Extended)],Addr(NumberOfPeriods),cRegister);

RegisterProc(nil,MethodNames[89],mtProc,TypeInfo(_T89),[
TypeInfo(Extended),
ArrayInfo(TypeInfo(Double)),
TypeInfo(TPaymentTime),TypeInfo(Extended)],Addr(NetPresentValue),cRegister);

RegisterProc(nil,MethodNames[90],mtProc,TypeInfo(_T90),[
TypeInfo(Extended),
TypeInfo(Integer),
TypeInfo(Extended),
TypeInfo(Extended),
TypeInfo(TPaymentTime),TypeInfo(Extended)],Addr(Payment),cRegister);

RegisterProc(nil,MethodNames[91],mtProc,TypeInfo(_T91),[
TypeInfo(Extended),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Extended),
TypeInfo(Extended),
TypeInfo(TPaymentTime),TypeInfo(Extended)],Addr(PeriodPayment),cRegister);

RegisterProc(nil,MethodNames[92],mtProc,TypeInfo(_T92),[
TypeInfo(Extended),
TypeInfo(Integer),
TypeInfo(Extended),
TypeInfo(Extended),
TypeInfo(TPaymentTime),TypeInfo(Extended)],Addr(PresentValue),cRegister);

RegisterProc(nil,MethodNames[93],mtProc,TypeInfo(_T93),[
TypeInfo(Extended),
TypeInfo(Extended),
TypeInfo(Integer),TypeInfo(Extended)],Addr(SLNDepreciation),cRegister);

RegisterProc(nil,MethodNames[94],mtProc,TypeInfo(_T94),[
TypeInfo(Extended),
TypeInfo(Extended),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Extended)],Addr(SYDDepreciation),cRegister);

RegisterProc(nil,MethodNames[95],mtProc,TypeInfo(_T95),[TypeInfo(TFPURoundingMode)],Addr(GetFPURoundMode),cRegister);

RegisterProc(nil,MethodNames[96],mtProc,TypeInfo(_T96),[TypeInfo(TSSERoundingMode)],Addr(GetSSERoundMode),cRegister);

RegisterProc(nil,MethodNames[97],mtProc,TypeInfo(_T97),[TypeInfo(TRoundingMode)],Addr(GetRoundMode),cRegister);

RegisterProc(nil,MethodNames[98],mtProc,TypeInfo(_T98),[
TypeInfo(TFPURoundingMode),TypeInfo(TFPURoundingMode)],Addr(SetFPURoundMode),cRegister);

RegisterProc(nil,MethodNames[99],mtProc,TypeInfo(_T99),[
TypeInfo(TSSERoundingMode),TypeInfo(TSSERoundingMode)],Addr(SetSSERoundMode),cRegister);

RegisterProc(nil,MethodNames[100],mtProc,TypeInfo(_T100),[
TypeInfo(TRoundingMode),TypeInfo(TRoundingMode)],Addr(SetRoundMode),cRegister);

RegisterProc(nil,MethodNames[101],mtProc,TypeInfo(_T101),[TypeInfo(TFPUPrecisionMode)],Addr(GetPrecisionMode),cRegister);

RegisterProc(nil,MethodNames[102],mtProc,TypeInfo(_T102),[
TypeInfo(TFPUPrecisionMode),TypeInfo(TFPUPrecisionMode)],Addr(SetPrecisionMode),cRegister);

RegisterProc(nil,MethodNames[103],mtProc,TypeInfo(_T103),[TypeInfo(TFPUExceptionMask)],Addr(GetFPUExceptionMask),cRegister);

RegisterProc(nil,MethodNames[104],mtProc,TypeInfo(_T104),[TypeInfo(TSSEExceptionMask)],Addr(GetSSEExceptionMask),cRegister);

RegisterProc(nil,MethodNames[105],mtProc,TypeInfo(_T105),[TypeInfo(TArithmeticExceptionMask)],Addr(GetExceptionMask),cRegister);

RegisterProc(nil,MethodNames[106],mtProc,TypeInfo(_T106),[
TypeInfo(TFPUExceptionMask),TypeInfo(TFPUExceptionMask)],Addr(SetFPUExceptionMask),cRegister);

RegisterProc(nil,MethodNames[107],mtProc,TypeInfo(_T107),[
TypeInfo(TSSEExceptionMask),TypeInfo(TSSEExceptionMask)],Addr(SetSSEExceptionMask),cRegister);

RegisterProc(nil,MethodNames[108],mtProc,TypeInfo(_T108),[
TypeInfo(TArithmeticExceptionMask),TypeInfo(TArithmeticExceptionMask)],Addr(SetExceptionMask),cRegister);

RegisterProc(nil,MethodNames[109],mtScriptProc,TypeInfo(_T109),[
TypeInfo(Boolean)],Addr(____ClearFPUExceptions__Wrapper),cRegister);

RegisterProc(nil,MethodNames[110],mtScriptProc,TypeInfo(_T110),[
TypeInfo(Boolean)],Addr(____ClearSSEExceptions__Wrapper),cRegister);

RegisterProc(nil,MethodNames[111],mtScriptProc,TypeInfo(_T111),[
TypeInfo(Boolean),
TypeInfo(TArithmeticExceptions)],Addr(____ClearExceptions__Wrapper),cRegister);

RegisterProc(nil,MethodNames[112],mtProc,TypeInfo(_T112),[TypeInfo(TArithmeticExceptions)],Addr(GetExceptions),cRegister);

RegisterProc(nil,MethodNames[113],mtProc,TypeInfo(_T113),[
TypeInfo(TArithmeticExceptions),TypeInfo(TArithmeticExceptions)],Addr(SetExceptions),cRegister);

RegisterProc(nil,MethodNames[114],mtScriptProc,TypeInfo(_T114),[
TypeInfo(TArithmeticExceptions)],Addr(____RaiseExceptions__Wrapper),cRegister);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
