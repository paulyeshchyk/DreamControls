{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit dcidemem_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  windows,
  messages,
  dcconsts,
  classes,
  sysutils,
  dcdreamlib,
  dcmemo,
  dccommon,
  dcapp,
  dcstring,
  editunit,
  dcsystem,
  dcidemem;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure  of object;

_T1 = function : TCustomMemoSource of object;

_T2 = function : TCustomDCMemo of object;

_T3 = function (p0 : TComponent;
const p1 : String): TLinkedMemoObject of object;

{_T4 = procedure (p0 : TCodeDesignerClass) of object;}

{_T5 = function : TCodeDesignerClass of object;}

_T6 = _T0;

function __DC__GetTCustomMemoObject__ModuleOwner(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomMemoObject(Instance).ModuleOwner);
end;

procedure __DC__SetTCustomMemoObject__ModuleOwner(Instance : TObject; Params : PVariantArgList);
begin
TCustomMemoObject(Instance).ModuleOwner:=TComponent(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomMemoObject__CodeDesigner(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomMemoObject(Instance).CodeDesigner);
end;

function __DC__GetTCustomMemoObject__SyntaxParser(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomMemoObject(Instance).SyntaxParser);
end;

function __DC__GetTLinkedMemoObject__LinkedComp(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TLinkedMemoObject(Instance).LinkedComp);
end;

procedure __DC__SetTLinkedMemoObject__LinkedComp(Instance : TObject; Params : PVariantArgList);
begin
TLinkedMemoObject(Instance).LinkedComp:=TComponent(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTSimpleMemoObject__MemoSource(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TSimpleMemoObject(Instance).MemoSource);
end;

procedure __RegisterProps;
begin
RegisterProperty(TCustomMemoObject,'ModuleOwner',__DC__GetTCustomMemoObject__ModuleOwner,__DC__SetTCustomMemoObject__ModuleOwner);
RegisterProperty(TCustomMemoObject,'CodeDesigner',__DC__GetTCustomMemoObject__CodeDesigner,nil);
RegisterProperty(TCustomMemoObject,'SyntaxParser',__DC__GetTCustomMemoObject__SyntaxParser,nil);
RegisterProperty(TLinkedMemoObject,'LinkedComp',__DC__GetTLinkedMemoObject__LinkedComp,__DC__SetTLinkedMemoObject__LinkedComp);
RegisterProperty(TSimpleMemoObject,'MemoSource',__DC__GetTSimpleMemoObject__MemoSource,nil);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..18] of TClass = (
TClipboardIDEObject,
TCustomMemoObject,
TCustomUnitObject,
TDelphiUnitObject,
THTMLMemoObject,
TIDEMemoObject,
TIDEUnitObject,
TJSUnitObject,
TLinkedMemoObject,
TLinkedMemoOpenObject,
TMemoForFormObject,
TMemoOpenObject,
TMemoSaveObject,
TPerlUnitObject,
TPythonUnitObject,
TSimpleMemoObject,
TSQLMemoObject,
TTXTMemoObject,
TVBSUnitObject
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..3] of string = (
'UnRegisterDCMemoOpenClasses'
,'ActiveMemoSource'
,'ActiveMemo'
,'EditTextPropInIDE'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),NoParams,Addr(UnRegisterDCMemoOpenClasses),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[TypeInfo(TCustomMemoSource)],Addr(ActiveMemoSource),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T2),[TypeInfo(TCustomDCMemo)],Addr(ActiveMemo),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T3),[
TypeInfo(TComponent),
TypeInfo(String),TypeInfo(TLinkedMemoObject)],Addr(EditTextPropInIDE),cRegister);

//RegRegisterMethod(TCustomMemoObject,'CreateSource',TypeInfo(_T6),NoParams, pointer(216));
RegRegisterMethod(TCustomMemoObject,'CreateSource',TypeInfo(_T6),NoParams,  getVMTProcAddr('TCustomMemoObject','CreateSource',216));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'UpdateCodeDesigners',mtProc,TypeInfo(_T4),[
TypeInfo(TCodeDesignerClass)],Addr(UpdateCodeDesigners),cRegister)}

{RegRegisterMethod(TCustomMemoObject,'GetCodeDesignerClass',TypeInfo(_T5),[TypeInfo(TCodeDesignerClass)], pointer(212))}

{RegisterEvent(TypeInfo(TOnGetCodeDesignerClass),[
TypeInfo(TObject),
TypeInfo(TCodeDesignerClass)]);}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
