{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit SOCKETS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  WinSock,
  SysUtils,
  Classes,
  Sockets;
function ConvertTIPHeaderToVariant(var R : TIPHeader) : OleVariant;
function ConvertVariantToTIPHeader(const V : OleVariant) : TIPHeader;
function ConvertTSockAddrToVariant(var R : TSockAddr) : OleVariant;
function ConvertVariantToTSockAddr(const V : OleVariant) : TSockAddr;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TIPHeader__Wrapper = class(TDCRecordWrapper)
private
fR : TIPHeader;
public
function GetRecordPtr : pointer; override;
published
procedure setiph_verlen(const val : Byte);
function getiph_verlen : Byte;
property iph_verlen : Byte read getiph_verlen write setiph_verlen;
procedure setiph_tos(const val : Byte);
function getiph_tos : Byte;
property iph_tos : Byte read getiph_tos write setiph_tos;
procedure setiph_length(const val : Word);
function getiph_length : Word;
property iph_length : Word read getiph_length write setiph_length;
procedure setiph_id(const val : Word);
function getiph_id : Word;
property iph_id : Word read getiph_id write setiph_id;
procedure setiph_offset(const val : Word);
function getiph_offset : Word;
property iph_offset : Word read getiph_offset write setiph_offset;
procedure setiph_ttl(const val : Byte);
function getiph_ttl : Byte;
property iph_ttl : Byte read getiph_ttl write setiph_ttl;
procedure setiph_protocol(const val : Byte);
function getiph_protocol : Byte;
property iph_protocol : Byte read getiph_protocol write setiph_protocol;
procedure setiph_xsum(const val : Word);
function getiph_xsum : Word;
property iph_xsum : Word read getiph_xsum write setiph_xsum;
procedure setiph_src(const val : longword);
function getiph_src : longword;
property iph_src : longword read getiph_src write setiph_src;
procedure setiph_dest(const val : longword);
function getiph_dest : longword;
property iph_dest : longword read getiph_dest write setiph_dest;
end;
type __TSockAddr__Wrapper = class(TDCRecordWrapper)
private
fR : TSockAddr;
public
function GetRecordPtr : pointer; override;
published
procedure setsin_family(const val : u_short);
function getsin_family : u_short;
property sin_family : u_short read getsin_family write setsin_family;
procedure setsin_port(const val : u_short);
function getsin_port : u_short;
property sin_port : u_short read getsin_port write setsin_port;
procedure setsa_family(const val : u_short);
function getsa_family : u_short;
property sa_family : u_short read getsa_family write setsa_family;
end;
type
_T0 = procedure  of object;

_T1 = _T0;

_T2 = _T0;

{_T3 = procedure (p0 : PChar;
var p1 : Integer) of object;}

{_T4 = procedure (p0 : PChar;
var p1 : Integer) of object;}

_T5 = function (p0 : Integer): Integer of object;

_T6 = _T0;

_T7 = _T0;

_T8 = function (p0 : TSocketDomain): Integer of object;

_T9 = function (p0 : TSocketType): Integer of object;

_T10 = function (var p0;
p1 : Integer): Integer of object;

_T12 = function (const p0 : string): string of object;

_T13 = function (p0 : PBoolean;
p1 : PBoolean;
p2 : PBoolean;
p3 : Integer): Boolean of object;

_T15 = function (p0 : string;
const p1 : string): Integer of object;

_T16 = function (p0 : TStream): Integer of object;

_T17 = function (p0 : Integer): Boolean of object;

_T18 = _T0;

_T19 = procedure (p0 : TServerSocketThread) of object;

_T20 = _T0;

_T21 = _T0;

_T22 = _T0;

_T23 = function : Boolean of object;

_T24 = _T0;

_T25 = function : TClientSocketThread of object;

_T26 = procedure (p0 : TCustomIpClient) of object;

_T27 = _T23;

_T28 = _T23;

_T29 = function (p0 : TSocketHost;
p1 : TSocketPort): IDispatch of object;

_T30 = function (const p0 : string): TSocketHost of object;

_T31 = _T30;

_T33 = function (const p0 : string): TSocketProtocol of object;

_T34 = function : string of object;

_T35 = function : TSocketHost of object;

_T36 = _T35;

_T39 = _T25;

_T40 = procedure (p0 : TCustomTcpServer) of object;

_T41 = _T0;

function __TIPHeader__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIPHeader__Wrapper.setiph_verlen(const val : Byte);
begin
TIPHeader(GetRecordPtr^).iph_verlen := val;
end;
function __TIPHeader__Wrapper.getiph_verlen : Byte;
begin
result := TIPHeader(GetRecordPtr^).iph_verlen;
end;
procedure __TIPHeader__Wrapper.setiph_tos(const val : Byte);
begin
TIPHeader(GetRecordPtr^).iph_tos := val;
end;
function __TIPHeader__Wrapper.getiph_tos : Byte;
begin
result := TIPHeader(GetRecordPtr^).iph_tos;
end;
procedure __TIPHeader__Wrapper.setiph_length(const val : Word);
begin
TIPHeader(GetRecordPtr^).iph_length := val;
end;
function __TIPHeader__Wrapper.getiph_length : Word;
begin
result := TIPHeader(GetRecordPtr^).iph_length;
end;
procedure __TIPHeader__Wrapper.setiph_id(const val : Word);
begin
TIPHeader(GetRecordPtr^).iph_id := val;
end;
function __TIPHeader__Wrapper.getiph_id : Word;
begin
result := TIPHeader(GetRecordPtr^).iph_id;
end;
procedure __TIPHeader__Wrapper.setiph_offset(const val : Word);
begin
TIPHeader(GetRecordPtr^).iph_offset := val;
end;
function __TIPHeader__Wrapper.getiph_offset : Word;
begin
result := TIPHeader(GetRecordPtr^).iph_offset;
end;
procedure __TIPHeader__Wrapper.setiph_ttl(const val : Byte);
begin
TIPHeader(GetRecordPtr^).iph_ttl := val;
end;
function __TIPHeader__Wrapper.getiph_ttl : Byte;
begin
result := TIPHeader(GetRecordPtr^).iph_ttl;
end;
procedure __TIPHeader__Wrapper.setiph_protocol(const val : Byte);
begin
TIPHeader(GetRecordPtr^).iph_protocol := val;
end;
function __TIPHeader__Wrapper.getiph_protocol : Byte;
begin
result := TIPHeader(GetRecordPtr^).iph_protocol;
end;
procedure __TIPHeader__Wrapper.setiph_xsum(const val : Word);
begin
TIPHeader(GetRecordPtr^).iph_xsum := val;
end;
function __TIPHeader__Wrapper.getiph_xsum : Word;
begin
result := TIPHeader(GetRecordPtr^).iph_xsum;
end;
procedure __TIPHeader__Wrapper.setiph_src(const val : longword);
begin
TIPHeader(GetRecordPtr^).iph_src := val;
end;
function __TIPHeader__Wrapper.getiph_src : longword;
begin
result := TIPHeader(GetRecordPtr^).iph_src;
end;
procedure __TIPHeader__Wrapper.setiph_dest(const val : longword);
begin
TIPHeader(GetRecordPtr^).iph_dest := val;
end;
function __TIPHeader__Wrapper.getiph_dest : longword;
begin
result := TIPHeader(GetRecordPtr^).iph_dest;
end;
function _TIPHeader_ : IDispatch;
begin
  result := __TIPHeader__Wrapper.Create;
end;
function __TSockAddr__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSockAddr__Wrapper.setsin_family(const val : u_short);
begin
TSockAddr(GetRecordPtr^).sin_family := val;
end;
function __TSockAddr__Wrapper.getsin_family : u_short;
begin
result := TSockAddr(GetRecordPtr^).sin_family;
end;
procedure __TSockAddr__Wrapper.setsin_port(const val : u_short);
begin
TSockAddr(GetRecordPtr^).sin_port := val;
end;
function __TSockAddr__Wrapper.getsin_port : u_short;
begin
result := TSockAddr(GetRecordPtr^).sin_port;
end;
procedure __TSockAddr__Wrapper.setsa_family(const val : u_short);
begin
TSockAddr(GetRecordPtr^).sa_family := val;
end;
function __TSockAddr__Wrapper.getsa_family : u_short;
begin
result := TSockAddr(GetRecordPtr^).sa_family;
end;
function __TBaseSocket__Receiveln__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
0:
begin
result := TBaseSocket(__Instance).Receiveln;
end;
1:
begin
result := TBaseSocket(__Instance).Receiveln(OleVariant(pargs^[0]));
end;
end
end;

function __TBaseSocket__Select__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
3:
begin
result := TBaseSocket(__Instance).Select(VarToPointer(OleVariant(pargs^[2])),VarToPointer(OleVariant(pargs^[1])),VarToPointer(OleVariant(pargs^[0])));
end;
4:
begin
result := TBaseSocket(__Instance).Select(VarToPointer(OleVariant(pargs^[3])),VarToPointer(OleVariant(pargs^[2])),VarToPointer(OleVariant(pargs^[1])),OleVariant(pargs^[0]));
end;
end
end;

function __TBaseSocket__Sendln__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := TBaseSocket(__Instance).Sendln(OleVariant(pargs^[0]));
end;
2:
begin
result := TBaseSocket(__Instance).Sendln(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function __TBaseSocket__WaitForData__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
0:
begin
result := TBaseSocket(__Instance).WaitForData;
end;
1:
begin
result := TBaseSocket(__Instance).WaitForData(OleVariant(pargs^[0]));
end;
end
end;

function __TIpSocket__GetSocketAddr__Wrapper(__Instance : TIpSocket;
p0 : TSocketHost;
p1 : TSocketPort): IDispatch;
var
__result : TSockAddr;
__wrapper : __TSockAddr__Wrapper;
begin
__result := TIpSocket(__Instance).GetSocketAddr(p0,p1);
__wrapper := __TSockAddr__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;


type __TIPHeader__Wrapper__ = class(__TIPHeader__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIPHeader__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIPHeaderToVariant(var R : TIPHeader) : OleVariant;
var
__rw : __TIPHeader__Wrapper__;
begin
__rw := __TIPHeader__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIPHeader(const V : OleVariant) : TIPHeader;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIPHeader((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSockAddr__Wrapper__ = class(__TSockAddr__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSockAddr__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSockAddrToVariant(var R : TSockAddr) : OleVariant;
var
__rw : __TSockAddr__Wrapper__;
begin
__rw := __TSockAddr__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSockAddr(const V : OleVariant) : TSockAddr;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSockAddr((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTBaseSocket__Active(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBaseSocket(Instance).Active;
end;

procedure __DC__SetTBaseSocket__Active(Instance : TObject; Params : PVariantArgList);
begin
TBaseSocket(Instance).Active:=OleVariant(Params^[0]);
end;

function __DC__GetTBaseSocket__BlockMode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBaseSocket(Instance).BlockMode;
end;

procedure __DC__SetTBaseSocket__BlockMode(Instance : TObject; Params : PVariantArgList);
begin
TBaseSocket(Instance).BlockMode:=OleVariant(Params^[0]);
end;

function __DC__GetTBaseSocket__BytesReceived(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBaseSocket(Instance).BytesReceived;
end;

function __DC__GetTBaseSocket__BytesSent(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBaseSocket(Instance).BytesSent;
end;

function __DC__GetTBaseSocket__Domain(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBaseSocket(Instance).Domain;
end;

procedure __DC__SetTBaseSocket__Domain(Instance : TObject; Params : PVariantArgList);
begin
TBaseSocket(Instance).Domain:=OleVariant(Params^[0]);
end;

function __DC__GetTBaseSocket__Handle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBaseSocket(Instance).Handle;
end;

function __DC__GetTBaseSocket__Protocol(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBaseSocket(Instance).Protocol;
end;

procedure __DC__SetTBaseSocket__Protocol(Instance : TObject; Params : PVariantArgList);
begin
TBaseSocket(Instance).Protocol:=OleVariant(Params^[0]);
end;

function __DC__GetTBaseSocket__SockType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBaseSocket(Instance).SockType;
end;

procedure __DC__SetTBaseSocket__SockType(Instance : TObject; Params : PVariantArgList);
begin
TBaseSocket(Instance).SockType:=OleVariant(Params^[0]);
end;

function __DC__GetTClientSocketThread__ClientSocket(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TClientSocketThread(Instance).ClientSocket);
end;

function __DC__GetTClientSocketThread__ServerSocketThread(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TClientSocketThread(Instance).ServerSocketThread);
end;

function __DC__GetTCustomIpClient__Connected(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomIpClient(Instance).Connected;
end;

function __DC__GetTCustomTcpServer__BlockMode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomTcpServer(Instance).BlockMode;
end;

procedure __DC__SetTCustomTcpServer__BlockMode(Instance : TObject; Params : PVariantArgList);
begin
TCustomTcpServer(Instance).BlockMode:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomTcpServer__Listening(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomTcpServer(Instance).Listening;
end;

function __DC__GetTCustomTcpServer__ServerSocketThread(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomTcpServer(Instance).ServerSocketThread);
end;

procedure __DC__SetTCustomTcpServer__ServerSocketThread(Instance : TObject; Params : PVariantArgList);
begin
TCustomTcpServer(Instance).ServerSocketThread:=TServerSocketThread(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIpSocket__LocalHost(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIpSocket(Instance).LocalHost;
end;

procedure __DC__SetTIpSocket__LocalHost(Instance : TObject; Params : PVariantArgList);
begin
TIpSocket(Instance).LocalHost:=OleVariant(Params^[0]);
end;

function __DC__GetTIpSocket__LocalPort(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIpSocket(Instance).LocalPort;
end;

procedure __DC__SetTIpSocket__LocalPort(Instance : TObject; Params : PVariantArgList);
begin
TIpSocket(Instance).LocalPort:=OleVariant(Params^[0]);
end;

function __DC__GetTIpSocket__RemoteHost(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIpSocket(Instance).RemoteHost;
end;

procedure __DC__SetTIpSocket__RemoteHost(Instance : TObject; Params : PVariantArgList);
begin
TIpSocket(Instance).RemoteHost:=OleVariant(Params^[0]);
end;

function __DC__GetTIpSocket__RemotePort(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIpSocket(Instance).RemotePort;
end;

procedure __DC__SetTIpSocket__RemotePort(Instance : TObject; Params : PVariantArgList);
begin
TIpSocket(Instance).RemotePort:=OleVariant(Params^[0]);
end;

function __DC__GetTIpSocket__Domain(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIpSocket(Instance).Domain;
end;

procedure __DC__SetTIpSocket__Domain(Instance : TObject; Params : PVariantArgList);
begin
TIpSocket(Instance).Domain:=OleVariant(Params^[0]);
end;

function __DC__GetTRawSocket__SockType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TRawSocket(Instance).SockType;
end;

procedure __DC__SetTRawSocket__SockType(Instance : TObject; Params : PVariantArgList);
begin
TRawSocket(Instance).SockType:=OleVariant(Params^[0]);
end;

function __DC__GetTServerSocketThread__ServerSocket(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TServerSocketThread(Instance).ServerSocket);
end;

function __DC__GetTServerSocketThread__ThreadCacheSize(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TServerSocketThread(Instance).ThreadCacheSize;
end;

procedure __DC__SetTServerSocketThread__ThreadCacheSize(Instance : TObject; Params : PVariantArgList);
begin
TServerSocketThread(Instance).ThreadCacheSize:=OleVariant(Params^[0]);
end;

function __DC__GetTServerSocketThread__ThreadPool(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TServerSocketThread(Instance).ThreadPool);
end;

procedure __RegisterProps;
begin
RegisterProperty(TBaseSocket,'Active',__DC__GetTBaseSocket__Active,__DC__SetTBaseSocket__Active);
RegisterProperty(TBaseSocket,'BlockMode',__DC__GetTBaseSocket__BlockMode,__DC__SetTBaseSocket__BlockMode);
RegisterProperty(TBaseSocket,'BytesReceived',__DC__GetTBaseSocket__BytesReceived,nil);
RegisterProperty(TBaseSocket,'BytesSent',__DC__GetTBaseSocket__BytesSent,nil);
RegisterProperty(TBaseSocket,'Domain',__DC__GetTBaseSocket__Domain,__DC__SetTBaseSocket__Domain);
RegisterProperty(TBaseSocket,'Handle',__DC__GetTBaseSocket__Handle,nil);
RegisterProperty(TBaseSocket,'Protocol',__DC__GetTBaseSocket__Protocol,__DC__SetTBaseSocket__Protocol);
RegisterProperty(TBaseSocket,'SockType',__DC__GetTBaseSocket__SockType,__DC__SetTBaseSocket__SockType);
RegisterProperty(TClientSocketThread,'ClientSocket',__DC__GetTClientSocketThread__ClientSocket,nil);
RegisterProperty(TClientSocketThread,'ServerSocketThread',__DC__GetTClientSocketThread__ServerSocketThread,nil);
RegisterProperty(TCustomIpClient,'Connected',__DC__GetTCustomIpClient__Connected,nil);
RegisterProperty(TCustomTcpServer,'BlockMode',__DC__GetTCustomTcpServer__BlockMode,__DC__SetTCustomTcpServer__BlockMode);
RegisterProperty(TCustomTcpServer,'Listening',__DC__GetTCustomTcpServer__Listening,nil);
RegisterProperty(TCustomTcpServer,'ServerSocketThread',__DC__GetTCustomTcpServer__ServerSocketThread,__DC__SetTCustomTcpServer__ServerSocketThread);
RegisterProperty(TIpSocket,'LocalHost',__DC__GetTIpSocket__LocalHost,__DC__SetTIpSocket__LocalHost);
RegisterProperty(TIpSocket,'LocalPort',__DC__GetTIpSocket__LocalPort,__DC__SetTIpSocket__LocalPort);
RegisterProperty(TIpSocket,'RemoteHost',__DC__GetTIpSocket__RemoteHost,__DC__SetTIpSocket__RemoteHost);
RegisterProperty(TIpSocket,'RemotePort',__DC__GetTIpSocket__RemotePort,__DC__SetTIpSocket__RemotePort);
RegisterProperty(TIpSocket,'Domain',__DC__GetTIpSocket__Domain,__DC__SetTIpSocket__Domain);
RegisterProperty(TRawSocket,'SockType',__DC__GetTRawSocket__SockType,__DC__SetTRawSocket__SockType);
RegisterProperty(TServerSocketThread,'ServerSocket',__DC__GetTServerSocketThread__ServerSocket,nil);
RegisterProperty(TServerSocketThread,'ThreadCacheSize',__DC__GetTServerSocketThread__ThreadCacheSize,__DC__SetTServerSocketThread__ThreadCacheSize);
RegisterProperty(TServerSocketThread,'ThreadPool',__DC__GetTServerSocketThread__ThreadPool,nil);
end;

const __ConstNames0 : array[0..32] of string = (
'pfUnspec'
,'pfUnix'
,'pfInet'
,'pfImpLink'
,'pfPup'
,'pfChaos'
,'pfIpx'
,'pfNs'
,'pfIso'
,'pfOsi'
,'pfEcma'
,'pfDataKit'
,'pfCcitt'
,'pfSna'
,'pfDecNet'
,'pfDli'
,'pfLat'
,'pfHylink'
,'pfAppleTalk'
,'pfVoiceView'
,'pfFireFox'
,'pfUnknown1'
,'pfBan'
,'pfMax'
,'CRLF'
,'bmBlocking'
,'bmNonBlocking'
,'bmThreadBlocking'
,'stStream'
,'stDgram'
,'stRaw'
,'stRdm'
,'stSeqPacket'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,pfUnspec));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,pfUnix));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,pfInet));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,pfImpLink));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,pfPup));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,pfChaos));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,pfIpx));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,pfNs));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,pfIso));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,pfOsi));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,pfEcma));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,pfDataKit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,pfCcitt));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,pfSna));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,pfDecNet));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,pfDli));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,pfLat));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,pfHylink));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,pfAppleTalk));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,pfVoiceView));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,pfFireFox));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,pfUnknown1));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,pfBan));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,pfMax));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,CRLF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,bmBlocking));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,bmNonBlocking));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,bmThreadBlocking));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,stStream));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,stDgram));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,stRaw));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,stRdm));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,stSeqPacket));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..10] of TClass = (
ESocketError,
TBaseSocket,
TClientSocketThread,
TCustomIpClient,
TCustomTcpServer,
TIpSocket,
TRawSocket,
TServerSocketThread,
TTcpClient,
TTcpServer,
TUdpSocket
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'TIPHeader'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TIPHeader_)));
RegRegisterMethod(TBaseSocket,'DoCreateHandle',TypeInfo(_T0),NoParams, pointer(MinVMTOffset - 16));

RegRegisterMethod(TBaseSocket,'DoDestroyHandle',TypeInfo(_T1),NoParams, pointer(MinVMTOffset - 17));

RegRegisterMethod(TBaseSocket,'DoHandleError',TypeInfo(_T2),NoParams, pointer(MinVMTOffset - 18));

//RegRegisterMethod(TBaseSocket,'ErrorCheck',TypeInfo(_T5),[TypeInfo(Integer),TypeInfo(Integer)], pointer(56));
RegRegisterMethod(TBaseSocket,'ErrorCheck',TypeInfo(_T5),[TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TBaseSocket','ErrorCheck',56));


//RegRegisterMethod(TBaseSocket,'Open',TypeInfo(_T6),NoParams, pointer(60));
RegRegisterMethod(TBaseSocket,'Open',TypeInfo(_T6),NoParams,  getVMTProcAddr('TBaseSocket','Open',60));


//RegRegisterMethod(TBaseSocket,'Close',TypeInfo(_T7),NoParams, pointer(64));
RegRegisterMethod(TBaseSocket,'Close',TypeInfo(_T7),NoParams,  getVMTProcAddr('TBaseSocket','Close',64));


RegRegisterMethod(TBaseSocket,'MapDomain',TypeInfo(_T8),[
TypeInfo(TSocketDomain),TypeInfo(Integer)],Addr(TBaseSocket.MapDomain));

RegRegisterMethod(TBaseSocket,'MapSockType',TypeInfo(_T9),[
TypeInfo(TSocketType),TypeInfo(Integer)],Addr(TBaseSocket.MapSockType));

RegRegisterMethod(TBaseSocket,'PeekBuf',TypeInfo(_T10),[
TypeInfoUntyped,
TypeInfo(Integer),TypeInfo(Integer)],Addr(TBaseSocket.PeekBuf));

RegisterProc(TBaseSocket,'Receiveln',mtScriptMethod,TypeInfo(_T12),[
TypeInfo(string),TypeInfo(string)],Addr(__TBaseSocket__Receiveln__Wrapper),cRegister);

RegisterProc(TBaseSocket,'Select',mtScriptMethod,TypeInfo(_T13),[
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(Integer),TypeInfo(Boolean)],Addr(__TBaseSocket__Select__Wrapper),cRegister);

RegisterProc(TBaseSocket,'Sendln',mtScriptMethod,TypeInfo(_T15),[
TypeInfo(string),
TypeInfo(string),TypeInfo(Integer)],Addr(__TBaseSocket__Sendln__Wrapper),cRegister);

RegRegisterMethod(TBaseSocket,'SendStream',TypeInfo(_T16),[
TypeInfo(TStream),TypeInfo(Integer)],Addr(TBaseSocket.SendStream));

RegisterProc(TBaseSocket,'WaitForData',mtScriptMethod,TypeInfo(_T17),[
TypeInfo(Integer),TypeInfo(Boolean)],Addr(__TBaseSocket__WaitForData__Wrapper),cRegister);

//RegRegisterMethod(TClientSocketThread,'SyncProc',TypeInfo(_T18),NoParams, pointer(8));
RegRegisterMethod(TClientSocketThread,'SyncProc',TypeInfo(_T18),NoParams,  getVMTProcAddr('TClientSocketThread','SyncProc',8));


RegisterProc(TClientSocketThread,'Create',mtConstructor,TypeInfo(_T19),[
TypeInfo(TServerSocketThread)],Addr(TClientSocketThread.Create),cRegister);

RegRegisterMethod(TClientSocketThread,'ExecuteSyncProc',TypeInfo(_T20),NoParams,Addr(TClientSocketThread.ExecuteSyncProc));

//RegRegisterMethod(TCustomIpClient,'DoConnect',TypeInfo(_T21),NoParams, pointer(68));
RegRegisterMethod(TCustomIpClient,'DoConnect',TypeInfo(_T21),NoParams,  getVMTProcAddr('TCustomIpClient','DoConnect',68));


//RegRegisterMethod(TCustomIpClient,'DoDisconnect',TypeInfo(_T22),NoParams, pointer(72));
RegRegisterMethod(TCustomIpClient,'DoDisconnect',TypeInfo(_T22),NoParams,  getVMTProcAddr('TCustomIpClient','DoDisconnect',72));


RegRegisterMethod(TCustomIpClient,'Connect',TypeInfo(_T23),[TypeInfo(Boolean)],Addr(TCustomIpClient.Connect));

RegRegisterMethod(TCustomIpClient,'Disconnect',TypeInfo(_T24),NoParams,Addr(TCustomIpClient.Disconnect));

RegRegisterMethod(TCustomIpClient,'GetThreadObject',TypeInfo(_T25),[TypeInfo(TClientSocketThread)],Addr(TCustomIpClient.GetThreadObject));

//RegRegisterMethod(TCustomTcpServer,'DoAccept',TypeInfo(_T26),[TypeInfo(TCustomIpClient)], pointer(68));
RegRegisterMethod(TCustomTcpServer,'DoAccept',TypeInfo(_T26),[TypeInfo(TCustomIpClient)],  getVMTProcAddr('TCustomTcpServer','DoAccept',68));


RegRegisterMethod(TCustomTcpServer,'Accept',TypeInfo(_T27),[TypeInfo(Boolean)],Addr(TCustomTcpServer.Accept));

RegRegisterMethod(TCustomTcpServer,'WaitForConnection',TypeInfo(_T28),[TypeInfo(Boolean)],Addr(TCustomTcpServer.WaitForConnection));

RegRegisterMethod(TIpSocket,'GetSocketAddr',TypeInfo(_T29),[
TypeInfo(TSocketHost),
TypeInfo(TSocketPort),TypeInfo(IDispatch)],Addr(__TIpSocket__GetSocketAddr__Wrapper));

RegRegisterMethod(TIpSocket,'LookupHostName',TypeInfo(_T30),[
TypeInfo(string),TypeInfo(TSocketHost)],Addr(TIpSocket.LookupHostName));

RegRegisterMethod(TIpSocket,'LookupHostAddr',TypeInfo(_T31),[
TypeInfo(string),TypeInfo(TSocketHost)],Addr(TIpSocket.LookupHostAddr));

RegRegisterMethod(TIpSocket,'LookupProtocol',TypeInfo(_T33),[
TypeInfo(string),TypeInfo(TSocketProtocol)],Addr(TIpSocket.LookupProtocol));

RegRegisterMethod(TIpSocket,'LocalDomainName',TypeInfo(_T34),[TypeInfo(string)],Addr(TIpSocket.LocalDomainName));

RegRegisterMethod(TIpSocket,'LocalHostName',TypeInfo(_T35),[TypeInfo(TSocketHost)],Addr(TIpSocket.LocalHostName));

RegRegisterMethod(TIpSocket,'LocalHostAddr',TypeInfo(_T36),[TypeInfo(TSocketHost)],Addr(TIpSocket.LocalHostAddr));

//RegRegisterMethod(TServerSocketThread,'CreateThread',TypeInfo(_T39),[TypeInfo(TClientSocketThread)], pointer(8));
RegRegisterMethod(TServerSocketThread,'CreateThread',TypeInfo(_T39),[TypeInfo(TClientSocketThread)],  getVMTProcAddr('TServerSocketThread','CreateThread',8));


RegisterProc(TServerSocketThread,'Create',mtConstructor,TypeInfo(_T40),[
TypeInfo(TCustomTcpServer)],Addr(TServerSocketThread.Create),cRegister);

RegRegisterMethod(TServerSocketThread,'ClearThreadPool',TypeInfo(_T41),NoParams,Addr(TServerSocketThread.ClearThreadPool));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegRegisterMethod(TBaseSocket,'DoReceive',TypeInfo(_T3),[
TypeInfoPChar,
TypeInfo(Integer)], pointer(48))}

{RegRegisterMethod(TBaseSocket,'DoSend',TypeInfo(_T4),[
TypeInfoPChar,
TypeInfo(Integer)], pointer(52))}

RegisterEvent(TypeInfo(TGetThreadEvent),[
TypeInfo(TObject),
TypeInfo(TClientSocketThread)]);

RegisterEvent(TypeInfo(TSocketAcceptEvent),[
TypeInfo(TObject),
TypeInfo(TCustomIpClient)]);

{RegisterEvent(TypeInfo(TSocketDataEvent),[
TypeInfo(TObject),
TypeInfoPChar,
TypeInfo(Integer)]);}

RegisterEvent(TypeInfo(TSocketErrorEvent),[
TypeInfo(TObject),
TypeInfo(Integer)]);

RegisterEvent(TypeInfo(TSocketNotifyEvent),[
TypeInfo(TObject)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
