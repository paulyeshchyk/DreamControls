{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit AXCTRLS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  dcscript,
  dcsystem,
  dcdreamlib,
  Variants,
  Windows,
  Messages,
  ActiveX,
  SysUtils,
  ComObj,
  Classes,
  Graphics,
  Controls,
  Forms,
  ExtCtrls,
  StdVCL,
  AxCtrls;
function ConvertTGUIDToVariant(var R : TGUID) : OleVariant;
function ConvertVariantToTGUID(const V : OleVariant) : TGUID;
function ConvertTMessageToVariant(var R : TMessage) : OleVariant;
function ConvertVariantToTMessage(const V : OleVariant) : TMessage;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TMessage__Wrapper = class(TDCRecordWrapper)
private
fR : TMessage;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setWParam(const val : Longint);
function getWParam : Longint;
property WParam : Longint read getWParam write setWParam;
procedure setLParam(const val : Longint);
function getLParam : Longint;
property LParam : Longint read getLParam write setLParam;
procedure setResult(const val : Longint);
function getResult : Longint;
property Result : Longint read getResult write setResult;
procedure setWParamLo(const val : Word);
function getWParamLo : Word;
property WParamLo : Word read getWParamLo write setWParamLo;
procedure setWParamHi(const val : Word);
function getWParamHi : Word;
property WParamHi : Word read getWParamHi write setWParamHi;
procedure setLParamLo(const val : Word);
function getLParamLo : Word;
property LParamLo : Word read getLParamLo write setLParamLo;
procedure setLParamHi(const val : Word);
function getLParamHi : Word;
property LParamHi : Word read getLParamHi write setLParamHi;
procedure setResultLo(const val : Word);
function getResultLo : Word;
property ResultLo : Word read getResultLo write setResultLo;
procedure setResultHi(const val : Word);
function getResultHi : Word;
property ResultHi : Word read getResultHi write setResultHi;
end;
type __TGUID__Wrapper = class(TDCRecordWrapper)
private
fR : TGUID;
public
function GetRecordPtr : pointer; override;
published
procedure setD1(const val : LongWord);
function getD1 : LongWord;
property D1 : LongWord read getD1 write setD1;
procedure setD2(const val : Word);
function getD2 : Word;
property D2 : Word read getD2 write setD2;
procedure setD3(const val : Word);
function getD3 : Word;
property D3 : Word read getD3 write setD3;
end;
type __TActiveXControl__ = class(TActiveXControl);
type
{_T1 = procedure (p0 : TFont;
var p1 : IFontDisp) of object;}

{_T2 = procedure (p0 : TFont;
p1 : IFontDisp) of object;}

{_T3 = procedure (p0 : TPicture;
var p1 : IPictureDisp) of object;}

{_T4 = procedure (p0 : TPicture;
p1 : IPictureDisp) of object;}

{_T5 = procedure (p0 : TStrings;
var p1 : IStrings) of object;}

{_T6 = procedure (p0 : TStrings;
p1 : IStrings) of object;}

_T7 = function : HWND of object;

{_T8 = procedure (p0 : TDefinePropertyPage) of object;}

{_T9 = procedure (const p0 : IUnknown) of object;}

_T10 = procedure  of object;

_T11 = _T10;

{_T14 = procedure (p0 : TDefinePropertyPage) of object;}

_T15 = function (p0 : Integer;
var p1 : string): Boolean of object;

_T16 = function (p0 : Integer;
p1 : TStrings): Boolean of object;

_T17 = procedure (p0 : Integer;
p1 : Integer;
var p2 : OleVariant) of object;

{_T18 = procedure (const p0 : WideString;
p1 : Integer;
p2 : IPropertyBag;
p3 : IErrorLog) of object;}

_T19 = _T10;

{_T20 = procedure (const p0 : IStream) of object;}

_T21 = procedure (p0 : Integer) of object;

{_T22 = procedure (const p0 : WideString;
p1 : Integer;
p2 : IPropertyBag) of object;}

{_T23 = procedure (const p0 : IStream) of object;}

_T24 = procedure (const p0 : IDispatch) of object;

_T25 = procedure (const p0 : WideString) of object;

_T26 = function (const p0 : WideString): Boolean of object;

_T27 = function : string of object;

_T29 = procedure (p0 : Integer;
const p1 : string) of object;

_T31 = procedure (p0 : TCustomAdapter) of object;

{_T33 = procedure (const p0 : IUnknown) of object;}

_T35 = _T10;

_T36 = _T10;

_T37 = _T10;

_T38 = procedure (p0 : TFont) of object;

{_T39 = procedure (const p0 : IStream) of object;}

_T40 = procedure (p0 : TPicture) of object;

_T41 = _T10;

_T42 = _T10;

_T43 = _T10;

_T44 = procedure (const p0 : IDispatch;
p1 : TStrings) of object;

_T45 = _T10;

_T46 = procedure (p0 : HWND;
p1 : TControl) of object;

_T47 = procedure (p0 : TStrings) of object;

function __TMessage__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMessage__Wrapper.setMsg(const val : Cardinal);
begin
TMessage(GetRecordPtr^).Msg := val;
end;
function __TMessage__Wrapper.getMsg : Cardinal;
begin
result := TMessage(GetRecordPtr^).Msg;
end;
procedure __TMessage__Wrapper.setWParam(const val : Longint);
begin
TMessage(GetRecordPtr^).WParam := val;
end;
function __TMessage__Wrapper.getWParam : Longint;
begin
result := TMessage(GetRecordPtr^).WParam;
end;
procedure __TMessage__Wrapper.setLParam(const val : Longint);
begin
TMessage(GetRecordPtr^).LParam := val;
end;
function __TMessage__Wrapper.getLParam : Longint;
begin
result := TMessage(GetRecordPtr^).LParam;
end;
procedure __TMessage__Wrapper.setResult(const val : Longint);
begin
TMessage(GetRecordPtr^).Result := val;
end;
function __TMessage__Wrapper.getResult : Longint;
begin
result := TMessage(GetRecordPtr^).Result;
end;
procedure __TMessage__Wrapper.setWParamLo(const val : Word);
begin
TMessage(GetRecordPtr^).WParamLo := val;
end;
function __TMessage__Wrapper.getWParamLo : Word;
begin
result := TMessage(GetRecordPtr^).WParamLo;
end;
procedure __TMessage__Wrapper.setWParamHi(const val : Word);
begin
TMessage(GetRecordPtr^).WParamHi := val;
end;
function __TMessage__Wrapper.getWParamHi : Word;
begin
result := TMessage(GetRecordPtr^).WParamHi;
end;
procedure __TMessage__Wrapper.setLParamLo(const val : Word);
begin
TMessage(GetRecordPtr^).LParamLo := val;
end;
function __TMessage__Wrapper.getLParamLo : Word;
begin
result := TMessage(GetRecordPtr^).LParamLo;
end;
procedure __TMessage__Wrapper.setLParamHi(const val : Word);
begin
TMessage(GetRecordPtr^).LParamHi := val;
end;
function __TMessage__Wrapper.getLParamHi : Word;
begin
result := TMessage(GetRecordPtr^).LParamHi;
end;
procedure __TMessage__Wrapper.setResultLo(const val : Word);
begin
TMessage(GetRecordPtr^).ResultLo := val;
end;
function __TMessage__Wrapper.getResultLo : Word;
begin
result := TMessage(GetRecordPtr^).ResultLo;
end;
procedure __TMessage__Wrapper.setResultHi(const val : Word);
begin
TMessage(GetRecordPtr^).ResultHi := val;
end;
function __TMessage__Wrapper.getResultHi : Word;
begin
result := TMessage(GetRecordPtr^).ResultHi;
end;
function __TGUID__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TGUID__Wrapper.setD1(const val : LongWord);
begin
TGUID(GetRecordPtr^).D1 := val;
end;
function __TGUID__Wrapper.getD1 : LongWord;
begin
result := TGUID(GetRecordPtr^).D1;
end;
procedure __TGUID__Wrapper.setD2(const val : Word);
begin
TGUID(GetRecordPtr^).D2 := val;
end;
function __TGUID__Wrapper.getD2 : Word;
begin
result := TGUID(GetRecordPtr^).D2;
end;
procedure __TGUID__Wrapper.setD3(const val : Word);
begin
TGUID(GetRecordPtr^).D3 := val;
end;
function __TGUID__Wrapper.getD3 : Word;
begin
result := TGUID(GetRecordPtr^).D3;
end;
procedure __TActiveXControl__WndProc__Wrapper(__Instance : TActiveXControl;
const p0 : IDispatch);
var
__p0 : ^TMessage;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__TActiveXControl__(__Instance).WndProc(__p0^);
end;

procedure __TPropertyPage__EnumCtlProps__Wrapper(__Instance : TPropertyPage;
const p0 : IDispatch;
p1 : TStrings);
var
__p0 : ^TGUID;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
TPropertyPage(__Instance).EnumCtlProps(__p0^,p1);
end;


type __TGUID__Wrapper__ = class(__TGUID__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TGUID__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTGUIDToVariant(var R : TGUID) : OleVariant;
var
__rw : __TGUID__Wrapper__;
begin
__rw := __TGUID__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTGUID(const V : OleVariant) : TGUID;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TGUID((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMessage__Wrapper__ = class(__TMessage__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMessage__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMessageToVariant(var R : TMessage) : OleVariant;
var
__rw : __TMessage__Wrapper__;
begin
__rw := __TMessage__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMessage(const V : OleVariant) : TMessage;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMessage((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTActiveForm__ActiveFormControl(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TActiveForm(Instance).ActiveFormControl);
end;

function __DC__GetTActiveXControl__Control(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TActiveXControl(Instance).Control);
end;

function __DC__GetTActiveXControlFactory__MiscStatus(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TActiveXControlFactory(Instance).MiscStatus;
end;

function __DC__GetTActiveXControlFactory__ToolboxBitmapID(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TActiveXControlFactory(Instance).ToolboxBitmapID;
end;

function __DC__GetTActiveXPropertyPage__PropertyPageImpl(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TActiveXPropertyPage(Instance).PropertyPageImpl);
end;

function __DC__GetTConnectionPoint__SinkList(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TConnectionPoint(Instance).SinkList);
end;

function __DC__GetTPropertyPage__OleObject(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TPropertyPage(Instance).OleObject;
end;

function __DC__GetTPropertyPage__OleObjects(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TPropertyPage(Instance).OleObjects);
end;

procedure __DC__SetTPropertyPage__OleObjects(Instance : TObject; Params : PVariantArgList);
begin
TPropertyPage(Instance).OleObjects:=TInterfaceList(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTPropertyPageImpl__PropertyPage(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TPropertyPageImpl(Instance).PropertyPage);
end;

procedure __DC__SetTPropertyPageImpl__PropertyPage(Instance : TObject; Params : PVariantArgList);
begin
TPropertyPageImpl(Instance).PropertyPage:=TPropertyPage(VarToObject(OleVariant(Params^[0])));
end;

procedure __RegisterProps;
begin
RegisterProperty(TActiveForm,'ActiveFormControl',__DC__GetTActiveForm__ActiveFormControl,nil);
RegisterProperty(TActiveXControl,'Control',__DC__GetTActiveXControl__Control,nil);
RegisterProperty(TActiveXControlFactory,'MiscStatus',__DC__GetTActiveXControlFactory__MiscStatus,nil);
RegisterProperty(TActiveXControlFactory,'ToolboxBitmapID',__DC__GetTActiveXControlFactory__ToolboxBitmapID,nil);
RegisterProperty(TActiveXPropertyPage,'PropertyPageImpl',__DC__GetTActiveXPropertyPage__PropertyPageImpl,nil);
RegisterProperty(TConnectionPoint,'SinkList',__DC__GetTConnectionPoint__SinkList,nil);
RegisterProperty(TPropertyPage,'OleObject',__DC__GetTPropertyPage__OleObject,nil);
RegisterProperty(TPropertyPage,'OleObjects',__DC__GetTPropertyPage__OleObjects,__DC__SetTPropertyPage__OleObjects);
RegisterProperty(TPropertyPageImpl,'PropertyPage',__DC__GetTPropertyPageImpl__PropertyPage,__DC__SetTPropertyPageImpl__PropertyPage);
end;

const __ConstNames0 : array[0..1] of string = (
'ckSingle'
,'ckMulti'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,ckSingle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,ckMulti));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..18] of TClass = (
TActiveForm,
TActiveFormControl,
TActiveFormFactory,
TActiveXControl,
TActiveXControlFactory,
TActiveXPropertyPage,
TActiveXPropertyPageFactory,
TAdapterNotifier,
TConnectionPoint,
TConnectionPoints,
TCustomAdapter,
TFontAdapter,
TOleGraphic,
TOleStream,
TPictureAdapter,
TPropertyPage,
TPropertyPageImpl,
TReflectorWindow,
TStringsAdapter
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'ParkingWindow'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T7),[TypeInfo(HWND)],Addr(ParkingWindow),cRegister);

//RegRegisterMethod(TActiveForm,'Initialize',TypeInfo(_T10),NoParams, pointer(268));
RegRegisterMethod(TActiveForm,'Initialize',TypeInfo(_T10),NoParams,  getVMTProcAddr('TActiveForm','Initialize',268));


RegRegisterMethod(TActiveFormControl,'FreeOnRelease',TypeInfo(_T11),NoParams,Addr(TActiveFormControl.FreeOnRelease));

//RegRegisterMethod(TActiveXControl,'GetPropertyString',TypeInfo(_T15),[TypeInfo(Integer),TypeInfo(string),TypeInfo(Boolean)], pointer(48));
RegRegisterMethod(TActiveXControl,'GetPropertyString',TypeInfo(_T15),[TypeInfo(Integer),TypeInfo(string),TypeInfo(Boolean)],  getVMTProcAddr('TActiveXControl','GetPropertyString',48));


//RegRegisterMethod(TActiveXControl,'GetPropertyStrings',TypeInfo(_T16),[TypeInfo(Integer),TypeInfo(TStrings),TypeInfo(Boolean)], pointer(52));
RegRegisterMethod(TActiveXControl,'GetPropertyStrings',TypeInfo(_T16),[TypeInfo(Integer),TypeInfo(TStrings),TypeInfo(Boolean)],  getVMTProcAddr('TActiveXControl','GetPropertyStrings',52));


//RegRegisterMethod(TActiveXControl,'GetPropertyValue',TypeInfo(_T17),[TypeInfo(Integer),TypeInfo(Integer),TypeInfo(OleVariant)], pointer(56));
RegRegisterMethod(TActiveXControl,'GetPropertyValue',TypeInfo(_T17),[TypeInfo(Integer),TypeInfo(Integer),TypeInfo(OleVariant)],  getVMTProcAddr('TActiveXControl','GetPropertyValue',56));


//RegRegisterMethod(TActiveXControl,'InitializeControl',TypeInfo(_T19),NoParams, pointer(64));
RegRegisterMethod(TActiveXControl,'InitializeControl',TypeInfo(_T19),NoParams,  getVMTProcAddr('TActiveXControl','InitializeControl',64));


//RegRegisterMethod(TActiveXControl,'PerformVerb',TypeInfo(_T21),[TypeInfo(Integer)], pointer(72));
RegRegisterMethod(TActiveXControl,'PerformVerb',TypeInfo(_T21),[TypeInfo(Integer)],  getVMTProcAddr('TActiveXControl','PerformVerb',72));


//RegRegisterMethod(TActiveXControl,'WndProc',TypeInfo(_T24),[TypeInfo(IDispatch)], pointer(84));
RegRegisterMethod(TActiveXControl,'WndProc',TypeInfo(_T24),[TypeInfo(IDispatch)],  getVMTProcAddr('TActiveXControl','WndProc',84));


RegRegisterMethod(TActiveXControl,'PropChanged',TypeInfo(_T25),[
TypeInfo(WideString)],Addr(TActiveXControl.PropChanged));

RegRegisterMethod(TActiveXControl,'PropRequestEdit',TypeInfo(_T26),[
TypeInfo(WideString),TypeInfo(Boolean)],Addr(TActiveXControl.PropRequestEdit));

//RegRegisterMethod(TActiveXControlFactory,'GetLicenseFileName',TypeInfo(_T27),[TypeInfo(string)], pointer(28));
RegRegisterMethod(TActiveXControlFactory,'GetLicenseFileName',TypeInfo(_T27),[TypeInfo(string)],  getVMTProcAddr('TActiveXControlFactory','GetLicenseFileName',28));


RegRegisterMethod(TActiveXControlFactory,'AddVerb',TypeInfo(_T29),[
TypeInfo(Integer),
TypeInfo(string)],Addr(TActiveXControlFactory.AddVerb));

RegisterProc(TAdapterNotifier,'Create',mtConstructor,TypeInfo(_T31),[
TypeInfo(TCustomAdapter)],Addr(TAdapterNotifier.Create),cRegister);

//RegRegisterMethod(TCustomAdapter,'Changed',TypeInfo(_T35),NoParams, pointer(0));
RegRegisterMethod(TCustomAdapter,'Changed',TypeInfo(_T35),NoParams,  getVMTProcAddr('TCustomAdapter','Changed',0));


//RegRegisterMethod(TCustomAdapter,'Update',TypeInfo(_T36),NoParams, pointer(4));
RegRegisterMethod(TCustomAdapter,'Update',TypeInfo(_T36),NoParams,  getVMTProcAddr('TCustomAdapter','Update',4));


RegisterProc(TCustomAdapter,'Create',mtConstructor,TypeInfo(_T37),NoParams,Addr(TCustomAdapter.Create),cRegister);

RegisterProc(TFontAdapter,'Create',mtConstructor,TypeInfo(_T38),[
TypeInfo(TFont)],Addr(TFontAdapter.Create),cRegister);

RegisterProc(TPictureAdapter,'Create',mtConstructor,TypeInfo(_T40),[
TypeInfo(TPicture)],Addr(TPictureAdapter.Create),cRegister);

RegRegisterMethod(TPropertyPage,'Modified',TypeInfo(_T41),NoParams,Addr(TPropertyPage.Modified));

//RegRegisterMethod(TPropertyPage,'UpdateObject',TypeInfo(_T42),NoParams, pointer(260));
RegRegisterMethod(TPropertyPage,'UpdateObject',TypeInfo(_T42),NoParams,  getVMTProcAddr('TPropertyPage','UpdateObject',260));


//RegRegisterMethod(TPropertyPage,'UpdatePropertyPage',TypeInfo(_T43),NoParams, pointer(264));
RegRegisterMethod(TPropertyPage,'UpdatePropertyPage',TypeInfo(_T43),NoParams,  getVMTProcAddr('TPropertyPage','UpdatePropertyPage',264));


RegRegisterMethod(TPropertyPage,'EnumCtlProps',TypeInfo(_T44),[
TypeInfo(IDispatch),
TypeInfo(TStrings)],Addr(__TPropertyPage__EnumCtlProps__Wrapper));

//RegRegisterMethod(TPropertyPageImpl,'InitPropertyPage',TypeInfo(_T45),NoParams, pointer(0));
RegRegisterMethod(TPropertyPageImpl,'InitPropertyPage',TypeInfo(_T45),NoParams,  getVMTProcAddr('TPropertyPageImpl','InitPropertyPage',0));


RegisterProc(TReflectorWindow,'Create',mtConstructor,TypeInfo(_T46),[
TypeInfo(HWND),
TypeInfo(TControl)],Addr(TReflectorWindow.Create),cRegister);

RegisterProc(TStringsAdapter,'Create',mtConstructor,TypeInfo(_T47),[
TypeInfo(TStrings)],Addr(TStringsAdapter.Create),cRegister);

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'GetOleFont',mtProc,TypeInfo(_T1),[
TypeInfo(TFont),
TypeInfo(IFontDisp)],Addr(GetOleFont),cRegister)}

{RegisterProc(nil,'SetOleFont',mtProc,TypeInfo(_T2),[
TypeInfo(TFont),
TypeInfo(IFontDisp)],Addr(SetOleFont),cRegister)}

{RegisterProc(nil,'GetOlePicture',mtProc,TypeInfo(_T3),[
TypeInfo(TPicture),
TypeInfo(IPictureDisp)],Addr(GetOlePicture),cRegister)}

{RegisterProc(nil,'SetOlePicture',mtProc,TypeInfo(_T4),[
TypeInfo(TPicture),
TypeInfo(IPictureDisp)],Addr(SetOlePicture),cRegister)}

{RegisterProc(nil,'GetOleStrings',mtProc,TypeInfo(_T5),[
TypeInfo(TStrings),
TypeInfo(IStrings)],Addr(GetOleStrings),cRegister)}

{RegisterProc(nil,'SetOleStrings',mtProc,TypeInfo(_T6),[
TypeInfo(TStrings),
TypeInfo(IStrings)],Addr(SetOleStrings),cRegister)}

{RegRegisterMethod(TActiveForm,'DefinePropertyPages',TypeInfo(_T8),[
TypeInfo(TDefinePropertyPage)], pointer(260))}

{RegRegisterMethod(TActiveForm,'EventSinkChanged',TypeInfo(_T9),[
TypeInfo(IUnknown)], pointer(264))}

{RegRegisterMethod(TActiveXControl,'DefinePropertyPages',TypeInfo(_T14),[
TypeInfo(TDefinePropertyPage)], pointer(44))}

{RegRegisterMethod(TActiveXControl,'GetPropFromBag',TypeInfo(_T18),[
TypeInfo(WideString),
TypeInfo(Integer),
TypeInfo(IPropertyBag),
TypeInfo(IErrorLog)], pointer(60))}

{RegRegisterMethod(TActiveXControl,'LoadFromStream',TypeInfo(_T20),[
TypeInfo(IStream)], pointer(68))}

{RegRegisterMethod(TActiveXControl,'PutPropInBag',TypeInfo(_T22),[
TypeInfo(WideString),
TypeInfo(Integer),
TypeInfo(IPropertyBag)], pointer(76))}

{RegRegisterMethod(TActiveXControl,'SaveToStream',TypeInfo(_T23),[
TypeInfo(IStream)], pointer(80))}

{RegisterProc(TConnectionPoints,'Create',mtConstructor,TypeInfo(_T33),[
TypeInfo(IUnknown)],Addr(TConnectionPoints.Create),cRegister)}

{RegisterProc(TOleStream,'Create',mtConstructor,TypeInfo(_T39),[
TypeInfo(IStream)],Addr(TOleStream.Create),cRegister)}

{RegisterEvent(TypeInfo(TDefinePropertyPage),[
TypeInfo(IDispatch)]);}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
