{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit sdmain_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcdreamlib,
  RTLConsts,
  Windows,
  Classes,
  dcDSLib,
  dcConsts,
  dcsystem,
  sdMain;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = function (p0 : TScriptProject): Integer of object;

_T1 = procedure (p0 : TScriptProject;
p1 : Integer) of object;

_T2 = procedure  of object;

_T3 = procedure (const p0 : String) of object;

_T4 = procedure (const p0 : String;
const p1 : Array of Const) of object;

_T5 = function : Integer of object;

_T6 = function (p0 : Integer): TScriptProject of object;

_T7 = _T2;

_T8 = procedure (p0 : TScriptProject) of object;

_T9 = _T8;

{_T10 = procedure (p0 : TDebuggerEvent) of object;}

_T11 = _T8;

_T12 = _T1;

_T13 = _T2;

{_T14 = procedure (p0 : TDebuggerEvent) of object;}

_T15 = _T8;

_T16 = _T1;

_T17 = procedure (p0 : TScriptProject;
p1 : Integer;
p2 : Integer) of object;

_T18 = _T2;

_T19 = procedure (p0 : TScriptProject;
const p1 : String;
p2 : Integer;
p3 : Integer) of object;

_T20 = _T8;

_T21 = function (p0 : Pointer;
p1 : Pointer): Integer of object;

_T22 = function (p0 : Integer): Pointer of object;

_T23 = procedure (p0 : Integer) of object;

_T24 = procedure (p0 : Integer;
p1 : Pointer) of object;

_T25 = _T23;

_T26 = _T23;

_T27 = _T23;

_T28 = function (p0 : Pointer): Integer of object;

_T29 = _T2;

_T30 = _T23;

_T31 = procedure (const p0 : String;
p1 : Integer) of object;

_T32 = function : Pointer of object;

_T33 = _T32;

_T34 = _T22;

_T35 = _T2;

_T36 = _T28;

_T37 = _T24;

_T38 = _T32;

_T39 = _T28;

_T40 = procedure (p0 : TCustomBreakPoint) of object;

_T41 = _T2;

_T42 = procedure (p0 : TDelphiDebugger) of object;

_T43 = _T2;

_T44 = function (const p0 : String;
p1 : Integer;
p2 : Boolean;
var p3 : String): Boolean of object;

_T45 = _T5;

_T46 = function : String of object;

_T47 = _T46;

{_T48 = procedure (p0 : TGetStackFramesProc) of object;}

_T49 = function (p0 : Integer): String of object;

_T50 = procedure (p0 : TList) of object;

_T51 = _T49;

_T52 = function (p0 : Integer): TSimpleParser of object;

_T53 = _T2;

_T54 = _T40;

_T55 = procedure (p0 : TBreakResumeType) of object;

_T56 = function (p0 : Integer;
p1 : Integer): Boolean of object;

_T57 = procedure (p0 : Integer;
p1 : Integer) of object;

_T58 = procedure (p0 : TCustomBreakPoint;
p1 : TBreakPointParts) of object;

_T59 = procedure (p0 : TStrings) of object;

function __DC__GetTDelphiDebugger__Project(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDelphiDebugger(Instance).Project);
end;

procedure __DC__SetTDelphiDebugger__Project(Instance : TObject; Params : PVariantArgList);
begin
TDelphiDebugger(Instance).Project:=TScriptProject(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTRecordList__Capacity(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TRecordList(Instance).Capacity;
end;

procedure __DC__SetTRecordList__Capacity(Instance : TObject; Params : PVariantArgList);
begin
TRecordList(Instance).Capacity:=OleVariant(Params^[0]);
end;

function __DC__GetTRecordList__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TRecordList(Instance).Count;
end;

procedure __DC__SetTRecordList__Count(Instance : TObject; Params : PVariantArgList);
begin
TRecordList(Instance).Count:=OleVariant(Params^[0]);
end;

function __DC__GetTRecordList__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TRecordList(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __DC__SetTRecordList__Items(Instance : TObject; Params : PVariantArgList);
begin
TRecordList(Instance).Items[OleVariant(Params^[1])]:=VarToPointer(OleVariant(Params^[0]));
end;

function __DC__GetTRecordList__ItemSize(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TRecordList(Instance).ItemSize;
end;

function __DC__GetTRecordList__List(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TRecordList(Instance).List);
end;

procedure __RegisterProps;
begin
RegisterProperty(TDelphiDebugger,'Project',__DC__GetTDelphiDebugger__Project,__DC__SetTDelphiDebugger__Project);
RegisterProperty(TRecordList,'Capacity',__DC__GetTRecordList__Capacity,__DC__SetTRecordList__Capacity);
RegisterProperty(TRecordList,'Count',__DC__GetTRecordList__Count,__DC__SetTRecordList__Count);
RegisterIndexedProperty(TRecordList,'Items',1,True,__DC__GetTRecordList__Items,__DC__SetTRecordList__Items);
RegisterProperty(TRecordList,'ItemSize',__DC__GetTRecordList__ItemSize,nil);
RegisterProperty(TRecordList,'List',__DC__GetTRecordList__List,nil);
end;

const __ConstNames0 : array[0..53] of string = (
'DreamDebuggerKey'
,'DreamDebuggerPath'
,'SharedBufferSize'
,'InitializtionMutex'
,'GlobalMutexName'
,'GlobalFileMappingName'
,'GlobalCallEventName'
,'GlobalRetEventName'
,'ServerDataInEventName'
,'ServerDataOutEventName'
,'ClientDataInEventName'
,'ClientDataOutEventName'
,'GlobalDataMutexName'
,'EventPrefix'
,'SEmptyProjectName'
,'SEmptyUnitName'
,'dcAddProject'
,'dcConnectDebuggerToProject'
,'dcRemoveProject'
,'dcOnClose'
,'dcOnBreakPoint'
,'dcOnException'
,'ccAddBreakPoint'
,'ccCauseBreak'
,'ccConnect'
,'ccDisconnect'
,'ccEvaluate'
,'ccGetApplicationHandle'
,'ccGetApplicationName'
,'ccGetName'
,'ccGetStackFrames'
,'ccGetUnitName'
,'ccGetUnits'
,'ccGetUnitText'
,'ccGetVarList'
,'ccOnDebuggerClose'
,'ccRemoveBreakPoint'
,'ccResumeFromBreakPoint'
,'ccRunToLine'
,'ccSetBPData'
,'bpUnit'
,'bpLine'
,'bpEnabled'
,'bpCondition'
,'bpPassCount'
,'naAdd'
,'naChange'
,'naRemove'
,'naStateChanged'
,'naSubItemAdd'
,'naSubItemChanged'
,'naSubItemRemove'
,'naUserAction'
,'paConnectDebuggerToProject'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,DreamDebuggerKey));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,DreamDebuggerPath));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,SharedBufferSize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,InitializtionMutex));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,GlobalMutexName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,GlobalFileMappingName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,GlobalCallEventName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,GlobalRetEventName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,ServerDataInEventName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,ServerDataOutEventName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,ClientDataInEventName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,ClientDataOutEventName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,GlobalDataMutexName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,EventPrefix));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,SEmptyProjectName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,SEmptyUnitName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,dcAddProject));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,dcConnectDebuggerToProject));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,dcRemoveProject));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,dcOnClose));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,dcOnBreakPoint));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,dcOnException));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,ccAddBreakPoint));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,ccCauseBreak));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,ccConnect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,ccDisconnect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,ccEvaluate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,ccGetApplicationHandle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,ccGetApplicationName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,ccGetName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,ccGetStackFrames));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,ccGetUnitName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,ccGetUnits));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,ccGetUnitText));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,ccGetVarList));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,ccOnDebuggerClose));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,ccRemoveBreakPoint));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,ccResumeFromBreakPoint));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,ccRunToLine));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,ccSetBPData));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,bpUnit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,bpLine));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,bpEnabled));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,bpCondition));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,bpPassCount));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,naAdd));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,naChange));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,naRemove));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,naStateChanged));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,naSubItemAdd));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,naSubItemChanged));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,naSubItemRemove));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,naUserAction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,paConnectDebuggerToProject));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..2] of TClass = (
TDelphiDebugger,
TRecordList,
TScriptProject
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..14] of string = (
'AddProject'
,'AddProjectUnit'
,'CloseDebugger'
,'Error'
,'ErrorFmt'
,'GetProjectCount'
,'GetProject'
,'LockProjectList'
,'OnConnectDebuggerToProject'
,'ProjectStateChanged'
,'RemoveProject'
,'RemoveProjectUnit'
,'UnLockProjectList'
,'UpdateProject'
,'UpdateUnitText'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(TScriptProject),TypeInfo(Integer)],Addr(AddProject),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(TScriptProject),
TypeInfo(Integer)],Addr(AddProjectUnit),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T2),NoParams,Addr(CloseDebugger),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T3),[
TypeInfo(String)],Addr(Error),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T4),[
TypeInfo(String),
TypeInfoArrayOfConst],Addr(ErrorFmt),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T5),[TypeInfo(Integer)],Addr(GetProjectCount),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T6),[
TypeInfo(Integer),TypeInfo(TScriptProject)],Addr(GetProject),cRegister);

RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T7),NoParams,Addr(LockProjectList),cRegister);

RegisterProc(nil,MethodNames[8],mtProc,TypeInfo(_T8),[
TypeInfo(TScriptProject)],Addr(OnConnectDebuggerToProject),cRegister);

RegisterProc(nil,MethodNames[9],mtProc,TypeInfo(_T9),[
TypeInfo(TScriptProject)],Addr(ProjectStateChanged),cRegister);

RegisterProc(nil,MethodNames[10],mtProc,TypeInfo(_T11),[
TypeInfo(TScriptProject)],Addr(RemoveProject),cRegister);

RegisterProc(nil,MethodNames[11],mtProc,TypeInfo(_T12),[
TypeInfo(TScriptProject),
TypeInfo(Integer)],Addr(RemoveProjectUnit),cRegister);

RegisterProc(nil,MethodNames[12],mtProc,TypeInfo(_T13),NoParams,Addr(UnLockProjectList),cRegister);

RegisterProc(nil,MethodNames[13],mtProc,TypeInfo(_T15),[
TypeInfo(TScriptProject)],Addr(UpdateProject),cRegister);

RegisterProc(nil,MethodNames[14],mtProc,TypeInfo(_T16),[
TypeInfo(TScriptProject),
TypeInfo(Integer)],Addr(UpdateUnitText),cRegister);

RegRegisterMethod(TDelphiDebugger,'DoBreakPoint',TypeInfo(_T17),[
TypeInfo(TScriptProject),
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TDelphiDebugger.DoBreakPoint));

RegRegisterMethod(TDelphiDebugger,'DoClose',TypeInfo(_T18),NoParams,Addr(TDelphiDebugger.DoClose));

RegRegisterMethod(TDelphiDebugger,'DoException',TypeInfo(_T19),[
TypeInfo(TScriptProject),
TypeInfo(String),
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TDelphiDebugger.DoException));

RegRegisterMethod(TDelphiDebugger,'DoProjectClosed',TypeInfo(_T20),[
TypeInfo(TScriptProject)],Addr(TDelphiDebugger.DoProjectClosed));

//RegRegisterMethod(TRecordList,'Compare',TypeInfo(_T21),[TypeInfoPointer,TypeInfoPointer,TypeInfo(Integer)], pointer(0));
RegRegisterMethod(TRecordList,'Compare',TypeInfo(_T21),[TypeInfoPointer,TypeInfoPointer,TypeInfo(Integer)],  getVMTProcAddr('TRecordList','Compare',0));


//RegRegisterMethod(TRecordList,'GetItem',TypeInfo(_T22),[TypeInfo(Integer),TypeInfoPointer], pointer(4));
RegRegisterMethod(TRecordList,'GetItem',TypeInfo(_T22),[TypeInfo(Integer),TypeInfoPointer],  getVMTProcAddr('TRecordList','GetItem',4));


//RegRegisterMethod(TRecordList,'InternalDelete',TypeInfo(_T23),[TypeInfo(Integer)], pointer(8));
RegRegisterMethod(TRecordList,'InternalDelete',TypeInfo(_T23),[TypeInfo(Integer)],  getVMTProcAddr('TRecordList','InternalDelete',8));


//RegRegisterMethod(TRecordList,'SetItem',TypeInfo(_T24),[TypeInfo(Integer),TypeInfoPointer], pointer(12));
RegRegisterMethod(TRecordList,'SetItem',TypeInfo(_T24),[TypeInfo(Integer),TypeInfoPointer],  getVMTProcAddr('TRecordList','SetItem',12));


//RegRegisterMethod(TRecordList,'SetCapacity',TypeInfo(_T25),[TypeInfo(Integer)], pointer(16));
RegRegisterMethod(TRecordList,'SetCapacity',TypeInfo(_T25),[TypeInfo(Integer)],  getVMTProcAddr('TRecordList','SetCapacity',16));


//RegRegisterMethod(TRecordList,'SetCount',TypeInfo(_T26),[TypeInfo(Integer)], pointer(20));
RegRegisterMethod(TRecordList,'SetCount',TypeInfo(_T26),[TypeInfo(Integer)],  getVMTProcAddr('TRecordList','SetCount',20));


RegisterProc(TRecordList,'Create',mtConstructor,TypeInfo(_T27),[
TypeInfo(Integer)],Addr(TRecordList.Create),cRegister);

//RegRegisterMethod(TRecordList,'Add',TypeInfo(_T28),[TypeInfoPointer,TypeInfo(Integer)], pointer(24));
RegRegisterMethod(TRecordList,'Add',TypeInfo(_T28),[TypeInfoPointer,TypeInfo(Integer)],  getVMTProcAddr('TRecordList','Add',24));


//RegRegisterMethod(TRecordList,'Clear',TypeInfo(_T29),NoParams, pointer(28));
RegRegisterMethod(TRecordList,'Clear',TypeInfo(_T29),NoParams,  getVMTProcAddr('TRecordList','Clear',28));


//RegRegisterMethod(TRecordList,'Delete',TypeInfo(_T30),[TypeInfo(Integer)], pointer(32));
RegRegisterMethod(TRecordList,'Delete',TypeInfo(_T30),[TypeInfo(Integer)],  getVMTProcAddr('TRecordList','Delete',32));


RegisterProc(TRecordList,'Error',mtClassMethod,TypeInfo(_T31),[
TypeInfo(String),
TypeInfo(Integer)], pointer(36),cRegister);

RegRegisterMethod(TRecordList,'First',TypeInfo(_T32),[TypeInfoPointer],Addr(TRecordList.First));

RegRegisterMethod(TRecordList,'GetAddPlace',TypeInfo(_T33),[TypeInfoPointer],Addr(TRecordList.GetAddPlace));

RegRegisterMethod(TRecordList,'GetInsertPlace',TypeInfo(_T34),[
TypeInfo(Integer),TypeInfoPointer],Addr(TRecordList.GetInsertPlace));

//RegRegisterMethod(TRecordList,'Grow',TypeInfo(_T35),NoParams, pointer(40));
RegRegisterMethod(TRecordList,'Grow',TypeInfo(_T35),NoParams,  getVMTProcAddr('TRecordList','Grow',40));


//RegRegisterMethod(TRecordList,'IndexOf',TypeInfo(_T36),[TypeInfoPointer,TypeInfo(Integer)], pointer(44));
RegRegisterMethod(TRecordList,'IndexOf',TypeInfo(_T36),[TypeInfoPointer,TypeInfo(Integer)],  getVMTProcAddr('TRecordList','IndexOf',44));


//RegRegisterMethod(TRecordList,'Insert',TypeInfo(_T37),[TypeInfo(Integer),TypeInfoPointer], pointer(48));
RegRegisterMethod(TRecordList,'Insert',TypeInfo(_T37),[TypeInfo(Integer),TypeInfoPointer],  getVMTProcAddr('TRecordList','Insert',48));


RegRegisterMethod(TRecordList,'Last',TypeInfo(_T38),[TypeInfoPointer],Addr(TRecordList.Last));

RegRegisterMethod(TRecordList,'Remove',TypeInfo(_T39),[
TypeInfoPointer,TypeInfo(Integer)],Addr(TRecordList.Remove));

//RegRegisterMethod(TScriptProject,'AddBreakPoint',TypeInfo(_T40),[TypeInfo(TCustomBreakPoint)], pointer(0));
RegRegisterMethod(TScriptProject,'AddBreakPoint',TypeInfo(_T40),[TypeInfo(TCustomBreakPoint)],  getVMTProcAddr('TScriptProject','AddBreakPoint',0));


//RegRegisterMethod(TScriptProject,'CauseBreak',TypeInfo(_T41),NoParams, pointer(4));
RegRegisterMethod(TScriptProject,'CauseBreak',TypeInfo(_T41),NoParams,  getVMTProcAddr('TScriptProject','CauseBreak',4));


//RegRegisterMethod(TScriptProject,'ConnectDebugger',TypeInfo(_T42),[TypeInfo(TDelphiDebugger)], pointer(8));
RegRegisterMethod(TScriptProject,'ConnectDebugger',TypeInfo(_T42),[TypeInfo(TDelphiDebugger)],  getVMTProcAddr('TScriptProject','ConnectDebugger',8));


//RegRegisterMethod(TScriptProject,'DisconnectDebugger',TypeInfo(_T43),NoParams, pointer(12));
RegRegisterMethod(TScriptProject,'DisconnectDebugger',TypeInfo(_T43),NoParams,  getVMTProcAddr('TScriptProject','DisconnectDebugger',12));


//RegRegisterMethod(TScriptProject,'Evaluate',TypeInfo(_T44),[TypeInfo(String),TypeInfo(Integer),TypeInfo(Boolean),TypeInfo(String),TypeInfo(Boolean)], pointer(16));
RegRegisterMethod(TScriptProject,'Evaluate',TypeInfo(_T44),[TypeInfo(String),TypeInfo(Integer),TypeInfo(Boolean),TypeInfo(String),TypeInfo(Boolean)],  getVMTProcAddr('TScriptProject','Evaluate',16));


//RegRegisterMethod(TScriptProject,'GetApplicationHandle',TypeInfo(_T45),[TypeInfo(Integer)], pointer(20));
RegRegisterMethod(TScriptProject,'GetApplicationHandle',TypeInfo(_T45),[TypeInfo(Integer)],  getVMTProcAddr('TScriptProject','GetApplicationHandle',20));


//RegRegisterMethod(TScriptProject,'GetApplicationName',TypeInfo(_T46),[TypeInfo(String)], pointer(24));
RegRegisterMethod(TScriptProject,'GetApplicationName',TypeInfo(_T46),[TypeInfo(String)],  getVMTProcAddr('TScriptProject','GetApplicationName',24));


//RegRegisterMethod(TScriptProject,'GetName',TypeInfo(_T47),[TypeInfo(String)], pointer(28));
RegRegisterMethod(TScriptProject,'GetName',TypeInfo(_T47),[TypeInfo(String)],  getVMTProcAddr('TScriptProject','GetName',28));


//RegRegisterMethod(TScriptProject,'GetUnitName',TypeInfo(_T49),[TypeInfo(Integer),TypeInfo(String)], pointer(36));
RegRegisterMethod(TScriptProject,'GetUnitName',TypeInfo(_T49),[TypeInfo(Integer),TypeInfo(String)],  getVMTProcAddr('TScriptProject','GetUnitName',36));


//RegRegisterMethod(TScriptProject,'GetUnits',TypeInfo(_T50),[TypeInfo(TList)], pointer(40));
RegRegisterMethod(TScriptProject,'GetUnits',TypeInfo(_T50),[TypeInfo(TList)],  getVMTProcAddr('TScriptProject','GetUnits',40));


//RegRegisterMethod(TScriptProject,'GetUnitText',TypeInfo(_T51),[TypeInfo(Integer),TypeInfo(String)], pointer(44));
RegRegisterMethod(TScriptProject,'GetUnitText',TypeInfo(_T51),[TypeInfo(Integer),TypeInfo(String)],  getVMTProcAddr('TScriptProject','GetUnitText',44));


//RegRegisterMethod(TScriptProject,'GetUnitParser',TypeInfo(_T52),[TypeInfo(Integer),TypeInfo(TSimpleParser)], pointer(48));
RegRegisterMethod(TScriptProject,'GetUnitParser',TypeInfo(_T52),[TypeInfo(Integer),TypeInfo(TSimpleParser)],  getVMTProcAddr('TScriptProject','GetUnitParser',48));


//RegRegisterMethod(TScriptProject,'OnDebuggerClose',TypeInfo(_T53),NoParams, pointer(52));
RegRegisterMethod(TScriptProject,'OnDebuggerClose',TypeInfo(_T53),NoParams,  getVMTProcAddr('TScriptProject','OnDebuggerClose',52));


//RegRegisterMethod(TScriptProject,'RemoveBreakPoint',TypeInfo(_T54),[TypeInfo(TCustomBreakPoint)], pointer(56));
RegRegisterMethod(TScriptProject,'RemoveBreakPoint',TypeInfo(_T54),[TypeInfo(TCustomBreakPoint)],  getVMTProcAddr('TScriptProject','RemoveBreakPoint',56));


//RegRegisterMethod(TScriptProject,'ResumeFromBreakPoint',TypeInfo(_T55),[TypeInfo(TBreakResumeType)], pointer(60));
RegRegisterMethod(TScriptProject,'ResumeFromBreakPoint',TypeInfo(_T55),[TypeInfo(TBreakResumeType)],  getVMTProcAddr('TScriptProject','ResumeFromBreakPoint',60));


//RegRegisterMethod(TScriptProject,'CheckBreakPoint',TypeInfo(_T56),[TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Boolean)], pointer(64));
RegRegisterMethod(TScriptProject,'CheckBreakPoint',TypeInfo(_T56),[TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Boolean)],  getVMTProcAddr('TScriptProject','CheckBreakPoint',64));


//RegRegisterMethod(TScriptProject,'RunToLine',TypeInfo(_T57),[TypeInfo(Integer),TypeInfo(Integer)], pointer(68));
RegRegisterMethod(TScriptProject,'RunToLine',TypeInfo(_T57),[TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TScriptProject','RunToLine',68));


//RegRegisterMethod(TScriptProject,'SetBPData',TypeInfo(_T58),[TypeInfo(TCustomBreakPoint),TypeInfo(TBreakPointParts)], pointer(72));
RegRegisterMethod(TScriptProject,'SetBPData',TypeInfo(_T58),[TypeInfo(TCustomBreakPoint),TypeInfo(TBreakPointParts)],  getVMTProcAddr('TScriptProject','SetBPData',72));


//RegRegisterMethod(TScriptProject,'GetVarList',TypeInfo(_T59),[TypeInfo(TStrings)], pointer(76));
RegRegisterMethod(TScriptProject,'GetVarList',TypeInfo(_T59),[TypeInfo(TStrings)],  getVMTProcAddr('TScriptProject','GetVarList',76));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'RegisterProjectHandler',mtProc,TypeInfo(_T10),[
TypeInfo(TDebuggerEvent)],Addr(RegisterProjectHandler),cRegister)}

{RegisterProc(nil,'UnRegisterProjectHandler',mtProc,TypeInfo(_T14),[
TypeInfo(TDebuggerEvent)],Addr(UnRegisterProjectHandler),cRegister)}

{RegRegisterMethod(TScriptProject,'GetStackFrames',TypeInfo(_T48),[
TypeInfo(TGetStackFramesProc)], pointer(32))}

RegisterEvent(TypeInfo(TBreakEvent),[
TypeInfo(TScriptProject),
TypeInfo(Integer),
TypeInfo(Integer)]);

RegisterEvent(TypeInfo(TDebuggerEvent),[
TypeInfo(TScriptProject),
TypeInfo(TNotifyAction),
TypeInfoPointer]);

RegisterEvent(TypeInfo(TExceptionEvent),[
TypeInfo(TScriptProject),
TypeInfo(String),
TypeInfo(Integer),
TypeInfo(Integer)]);

RegisterEvent(TypeInfo(TGetStackFramesProc),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(String)]);

RegisterEvent(TypeInfo(TSimpleEvent),NoParams);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
