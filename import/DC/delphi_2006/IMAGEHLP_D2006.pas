{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IMAGEHLP_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  Types,
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  ImageHlp;
function Convert_IMAGE_DEBUG_INFORMATIONToVariant(var R : _IMAGE_DEBUG_INFORMATION) : OleVariant;
function ConvertVariantTo_IMAGE_DEBUG_INFORMATION(const V : OleVariant) : _IMAGE_DEBUG_INFORMATION;
function Convert_IMAGEHLP_DEFERRED_SYMBOL_LOADToVariant(var R : _IMAGEHLP_DEFERRED_SYMBOL_LOAD) : OleVariant;
function ConvertVariantTo_IMAGEHLP_DEFERRED_SYMBOL_LOAD(const V : OleVariant) : _IMAGEHLP_DEFERRED_SYMBOL_LOAD;
function Convert_IMAGEHLP_DUPLICATE_SYMBOLToVariant(var R : _IMAGEHLP_DUPLICATE_SYMBOL) : OleVariant;
function ConvertVariantTo_IMAGEHLP_DUPLICATE_SYMBOL(const V : OleVariant) : _IMAGEHLP_DUPLICATE_SYMBOL;
function Convert_IMAGEHLP_MODULEToVariant(var R : _IMAGEHLP_MODULE) : OleVariant;
function ConvertVariantTo_IMAGEHLP_MODULE(const V : OleVariant) : _IMAGEHLP_MODULE;
function Convert_IMAGEHLP_SYMBOLToVariant(var R : _IMAGEHLP_SYMBOL) : OleVariant;
function ConvertVariantTo_IMAGEHLP_SYMBOL(const V : OleVariant) : _IMAGEHLP_SYMBOL;
function Convert_KDHELPToVariant(var R : _KDHELP) : OleVariant;
function ConvertVariantTo_KDHELP(const V : OleVariant) : _KDHELP;
function Convert_LOADED_IMAGEToVariant(var R : _LOADED_IMAGE) : OleVariant;
function ConvertVariantTo_LOADED_IMAGE(const V : OleVariant) : _LOADED_IMAGE;
function Convert_tagADDRESSToVariant(var R : _tagADDRESS) : OleVariant;
function ConvertVariantTo_tagADDRESS(const V : OleVariant) : _tagADDRESS;
function Convert_tagSTACKFRAMEToVariant(var R : _tagSTACKFRAME) : OleVariant;
function ConvertVariantTo_tagSTACKFRAME(const V : OleVariant) : _tagSTACKFRAME;
function ConvertADDRESSToVariant(var R : ADDRESS) : OleVariant;
function ConvertVariantToADDRESS(const V : OleVariant) : ADDRESS;
function ConvertAPI_VERSIONToVariant(var R : API_VERSION) : OleVariant;
function ConvertVariantToAPI_VERSION(const V : OleVariant) : API_VERSION;
function ConvertIMAGE_DEBUG_INFORMATIONToVariant(var R : IMAGE_DEBUG_INFORMATION) : OleVariant;
function ConvertVariantToIMAGE_DEBUG_INFORMATION(const V : OleVariant) : IMAGE_DEBUG_INFORMATION;
function ConvertIMAGEHLP_DEFERRED_SYMBOL_LOADToVariant(var R : IMAGEHLP_DEFERRED_SYMBOL_LOAD) : OleVariant;
function ConvertVariantToIMAGEHLP_DEFERRED_SYMBOL_LOAD(const V : OleVariant) : IMAGEHLP_DEFERRED_SYMBOL_LOAD;
function ConvertIMAGEHLP_DUPLICATE_SYMBOLToVariant(var R : IMAGEHLP_DUPLICATE_SYMBOL) : OleVariant;
function ConvertVariantToIMAGEHLP_DUPLICATE_SYMBOL(const V : OleVariant) : IMAGEHLP_DUPLICATE_SYMBOL;
function ConvertIMAGEHLP_MODULEToVariant(var R : IMAGEHLP_MODULE) : OleVariant;
function ConvertVariantToIMAGEHLP_MODULE(const V : OleVariant) : IMAGEHLP_MODULE;
function ConvertIMAGEHLP_SYMBOLToVariant(var R : IMAGEHLP_SYMBOL) : OleVariant;
function ConvertVariantToIMAGEHLP_SYMBOL(const V : OleVariant) : IMAGEHLP_SYMBOL;
function ConvertKDHELPToVariant(var R : KDHELP) : OleVariant;
function ConvertVariantToKDHELP(const V : OleVariant) : KDHELP;
function ConvertLOADED_IMAGEToVariant(var R : LOADED_IMAGE) : OleVariant;
function ConvertVariantToLOADED_IMAGE(const V : OleVariant) : LOADED_IMAGE;
function ConvertLoadedImageToVariant(var R : LoadedImage) : OleVariant;
function ConvertVariantToLoadedImage(const V : OleVariant) : LoadedImage;
function ConvertSTACKFRAMEToVariant(var R : STACKFRAME) : OleVariant;
function ConvertVariantToSTACKFRAME(const V : OleVariant) : STACKFRAME;
function ConvertTAddressToVariant(var R : TAddress) : OleVariant;
function ConvertVariantToTAddress(const V : OleVariant) : TAddress;
function ConvertTApiVersionToVariant(var R : TApiVersion) : OleVariant;
function ConvertVariantToTApiVersion(const V : OleVariant) : TApiVersion;
function ConvertTImageDebugInformationToVariant(var R : TImageDebugInformation) : OleVariant;
function ConvertVariantToTImageDebugInformation(const V : OleVariant) : TImageDebugInformation;
function ConvertTImagehlpDeferredSymbolLoadToVariant(var R : TImagehlpDeferredSymbolLoad) : OleVariant;
function ConvertVariantToTImagehlpDeferredSymbolLoad(const V : OleVariant) : TImagehlpDeferredSymbolLoad;
function ConvertTImagehlpDuplicateSymbolToVariant(var R : TImagehlpDuplicateSymbol) : OleVariant;
function ConvertVariantToTImagehlpDuplicateSymbol(const V : OleVariant) : TImagehlpDuplicateSymbol;
function ConvertTImagehlpModuleToVariant(var R : TImagehlpModule) : OleVariant;
function ConvertVariantToTImagehlpModule(const V : OleVariant) : TImagehlpModule;
function ConvertTImagehlpSymbolToVariant(var R : TImagehlpSymbol) : OleVariant;
function ConvertVariantToTImagehlpSymbol(const V : OleVariant) : TImagehlpSymbol;
function ConvertTKdHelpToVariant(var R : TKdHelp) : OleVariant;
function ConvertVariantToTKdHelp(const V : OleVariant) : TKdHelp;
function ConvertTLoadedImageToVariant(var R : TLoadedImage) : OleVariant;
function ConvertVariantToTLoadedImage(const V : OleVariant) : TLoadedImage;
function ConvertTStackFrameToVariant(var R : TStackFrame) : OleVariant;
function ConvertVariantToTStackFrame(const V : OleVariant) : TStackFrame;
function ConvertTSystemTimeToVariant(var R : TSystemTime) : OleVariant;
function ConvertVariantToTSystemTime(const V : OleVariant) : TSystemTime;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type ___IMAGE_DEBUG_INFORMATION__Wrapper = class(TDCRecordWrapper)
private
fR : _IMAGE_DEBUG_INFORMATION;
public
function GetRecordPtr : pointer; override;
published
procedure setSize(const val : DWORD);
function getSize : DWORD;
property Size : DWORD read getSize write setSize;
procedure setMachine(const val : Word);
function getMachine : Word;
property Machine : Word read getMachine write setMachine;
procedure setCharacteristics(const val : Word);
function getCharacteristics : Word;
property Characteristics : Word read getCharacteristics write setCharacteristics;
procedure setCheckSum(const val : DWORD);
function getCheckSum : DWORD;
property CheckSum : DWORD read getCheckSum write setCheckSum;
procedure setImageBase(const val : DWORD);
function getImageBase : DWORD;
property ImageBase : DWORD read getImageBase write setImageBase;
procedure setSizeOfImage(const val : DWORD);
function getSizeOfImage : DWORD;
property SizeOfImage : DWORD read getSizeOfImage write setSizeOfImage;
procedure setNumberOfSections(const val : DWORD);
function getNumberOfSections : DWORD;
property NumberOfSections : DWORD read getNumberOfSections write setNumberOfSections;
procedure setExportedNamesSize(const val : DWORD);
function getExportedNamesSize : DWORD;
property ExportedNamesSize : DWORD read getExportedNamesSize write setExportedNamesSize;
procedure setNumberOfFunctionTableEntries(const val : DWORD);
function getNumberOfFunctionTableEntries : DWORD;
property NumberOfFunctionTableEntries : DWORD read getNumberOfFunctionTableEntries write setNumberOfFunctionTableEntries;
procedure setLowestFunctionStartingAddress(const val : DWORD);
function getLowestFunctionStartingAddress : DWORD;
property LowestFunctionStartingAddress : DWORD read getLowestFunctionStartingAddress write setLowestFunctionStartingAddress;
procedure setHighestFunctionEndingAddress(const val : DWORD);
function getHighestFunctionEndingAddress : DWORD;
property HighestFunctionEndingAddress : DWORD read getHighestFunctionEndingAddress write setHighestFunctionEndingAddress;
procedure setNumberOfFpoTableEntries(const val : DWORD);
function getNumberOfFpoTableEntries : DWORD;
property NumberOfFpoTableEntries : DWORD read getNumberOfFpoTableEntries write setNumberOfFpoTableEntries;
procedure setSizeOfCoffSymbols(const val : DWORD);
function getSizeOfCoffSymbols : DWORD;
property SizeOfCoffSymbols : DWORD read getSizeOfCoffSymbols write setSizeOfCoffSymbols;
procedure setSizeOfCodeViewSymbols(const val : DWORD);
function getSizeOfCodeViewSymbols : DWORD;
property SizeOfCodeViewSymbols : DWORD read getSizeOfCodeViewSymbols write setSizeOfCodeViewSymbols;
procedure setTimeDateStamp(const val : DWORD);
function getTimeDateStamp : DWORD;
property TimeDateStamp : DWORD read getTimeDateStamp write setTimeDateStamp;
procedure setRomImage(const val : Bool);
function getRomImage : Bool;
property RomImage : Bool read getRomImage write setRomImage;
procedure setNumberOfDebugDirectories(const val : DWORD);
function getNumberOfDebugDirectories : DWORD;
property NumberOfDebugDirectories : DWORD read getNumberOfDebugDirectories write setNumberOfDebugDirectories;
end;
type ___IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper = class(TDCRecordWrapper)
private
fR : _IMAGEHLP_DEFERRED_SYMBOL_LOAD;
public
function GetRecordPtr : pointer; override;
published
procedure setSizeOfStruct(const val : DWORD);
function getSizeOfStruct : DWORD;
property SizeOfStruct : DWORD read getSizeOfStruct write setSizeOfStruct;
procedure setBaseOfImage(const val : DWORD);
function getBaseOfImage : DWORD;
property BaseOfImage : DWORD read getBaseOfImage write setBaseOfImage;
procedure setCheckSum(const val : DWORD);
function getCheckSum : DWORD;
property CheckSum : DWORD read getCheckSum write setCheckSum;
procedure setTimeDateStamp(const val : DWORD);
function getTimeDateStamp : DWORD;
property TimeDateStamp : DWORD read getTimeDateStamp write setTimeDateStamp;
end;
type ___IMAGEHLP_DUPLICATE_SYMBOL__Wrapper = class(TDCRecordWrapper)
private
fR : _IMAGEHLP_DUPLICATE_SYMBOL;
public
function GetRecordPtr : pointer; override;
published
procedure setSizeOfStruct(const val : DWORD);
function getSizeOfStruct : DWORD;
property SizeOfStruct : DWORD read getSizeOfStruct write setSizeOfStruct;
procedure setNumberOfDups(const val : DWORD);
function getNumberOfDups : DWORD;
property NumberOfDups : DWORD read getNumberOfDups write setNumberOfDups;
procedure setSelectedSymbol(const val : ULONG);
function getSelectedSymbol : ULONG;
property SelectedSymbol : ULONG read getSelectedSymbol write setSelectedSymbol;
end;
type ___IMAGEHLP_MODULE__Wrapper = class(TDCRecordWrapper)
private
fR : _IMAGEHLP_MODULE;
public
function GetRecordPtr : pointer; override;
published
procedure setSizeOfStruct(const val : DWORD);
function getSizeOfStruct : DWORD;
property SizeOfStruct : DWORD read getSizeOfStruct write setSizeOfStruct;
procedure setBaseOfImage(const val : DWORD);
function getBaseOfImage : DWORD;
property BaseOfImage : DWORD read getBaseOfImage write setBaseOfImage;
procedure setImageSize(const val : DWORD);
function getImageSize : DWORD;
property ImageSize : DWORD read getImageSize write setImageSize;
procedure setTimeDateStamp(const val : DWORD);
function getTimeDateStamp : DWORD;
property TimeDateStamp : DWORD read getTimeDateStamp write setTimeDateStamp;
procedure setCheckSum(const val : DWORD);
function getCheckSum : DWORD;
property CheckSum : DWORD read getCheckSum write setCheckSum;
procedure setNumSyms(const val : DWORD);
function getNumSyms : DWORD;
property NumSyms : DWORD read getNumSyms write setNumSyms;
procedure setSymType(const val : TSymType);
function getSymType : TSymType;
property SymType : TSymType read getSymType write setSymType;
end;
type ___IMAGEHLP_SYMBOL__Wrapper = class(TDCRecordWrapper)
private
fR : _IMAGEHLP_SYMBOL;
public
function GetRecordPtr : pointer; override;
published
procedure setSizeOfStruct(const val : DWORD);
function getSizeOfStruct : DWORD;
property SizeOfStruct : DWORD read getSizeOfStruct write setSizeOfStruct;
procedure setADDRESS(const val : DWORD);
function getADDRESS : DWORD;
property ADDRESS : DWORD read getADDRESS write setADDRESS;
procedure setSize(const val : DWORD);
function getSize : DWORD;
property Size : DWORD read getSize write setSize;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setMaxNameLength(const val : DWORD);
function getMaxNameLength : DWORD;
property MaxNameLength : DWORD read getMaxNameLength write setMaxNameLength;
end;
type ___KDHELP__Wrapper = class(TDCRecordWrapper)
private
fR : _KDHELP;
public
function GetRecordPtr : pointer; override;
published
procedure setThread(const val : DWORD);
function getThread : DWORD;
property Thread : DWORD read getThread write setThread;
procedure setThCallbackStack(const val : DWORD);
function getThCallbackStack : DWORD;
property ThCallbackStack : DWORD read getThCallbackStack write setThCallbackStack;
procedure setNextCallback(const val : DWORD);
function getNextCallback : DWORD;
property NextCallback : DWORD read getNextCallback write setNextCallback;
procedure setFramePointer(const val : DWORD);
function getFramePointer : DWORD;
property FramePointer : DWORD read getFramePointer write setFramePointer;
procedure setKiCallUserMode(const val : DWORD);
function getKiCallUserMode : DWORD;
property KiCallUserMode : DWORD read getKiCallUserMode write setKiCallUserMode;
procedure setKeUserCallbackDispatcher(const val : DWORD);
function getKeUserCallbackDispatcher : DWORD;
property KeUserCallbackDispatcher : DWORD read getKeUserCallbackDispatcher write setKeUserCallbackDispatcher;
end;
type ___LOADED_IMAGE__Wrapper = class(TDCRecordWrapper)
private
fR : _LOADED_IMAGE;
public
function GetRecordPtr : pointer; override;
published
procedure sethFile(const val : THandle);
function gethFile : THandle;
property hFile : THandle read gethFile write sethFile;
procedure setNumberOfSections(const val : ULONG);
function getNumberOfSections : ULONG;
property NumberOfSections : ULONG read getNumberOfSections write setNumberOfSections;
procedure setCharacteristics(const val : ULONG);
function getCharacteristics : ULONG;
property Characteristics : ULONG read getCharacteristics write setCharacteristics;
procedure setfSystemImage(const val : ByteBool);
function getfSystemImage : ByteBool;
property fSystemImage : ByteBool read getfSystemImage write setfSystemImage;
procedure setfDOSImage(const val : ByteBool);
function getfDOSImage : ByteBool;
property fDOSImage : ByteBool read getfDOSImage write setfDOSImage;
procedure setSizeOfImage(const val : ULONG);
function getSizeOfImage : ULONG;
property SizeOfImage : ULONG read getSizeOfImage write setSizeOfImage;
end;
type ___tagADDRESS__Wrapper = class(TDCRecordWrapper)
private
fR : _tagADDRESS;
public
function GetRecordPtr : pointer; override;
published
procedure setOffset(const val : DWORD);
function getOffset : DWORD;
property Offset : DWORD read getOffset write setOffset;
procedure setSegment(const val : Word);
function getSegment : Word;
property Segment : Word read getSegment write setSegment;
procedure setMode(const val : TAddressMode);
function getMode : TAddressMode;
property Mode : TAddressMode read getMode write setMode;
end;
type ___tagSTACKFRAME__Wrapper = class(TDCRecordWrapper)
private
fR : _tagSTACKFRAME;
public
function GetRecordPtr : pointer; override;
published
procedure set_Far(const val : Bool);
function get_Far : Bool;
property _Far : Bool read get_Far write set_Far;
procedure set_Virtual(const val : Bool);
function get_Virtual : Bool;
property _Virtual : Bool read get_Virtual write set_Virtual;
end;
type __ADDRESS__Wrapper = class(TDCRecordWrapper)
private
fR : ADDRESS;
public
function GetRecordPtr : pointer; override;
published
procedure setOffset(const val : DWORD);
function getOffset : DWORD;
property Offset : DWORD read getOffset write setOffset;
procedure setSegment(const val : Word);
function getSegment : Word;
property Segment : Word read getSegment write setSegment;
procedure setMode(const val : TAddressMode);
function getMode : TAddressMode;
property Mode : TAddressMode read getMode write setMode;
end;
type __API_VERSION__Wrapper = class(TDCRecordWrapper)
private
fR : API_VERSION;
public
function GetRecordPtr : pointer; override;
published
procedure setMajorVersion(const val : Word);
function getMajorVersion : Word;
property MajorVersion : Word read getMajorVersion write setMajorVersion;
procedure setMinorVersion(const val : Word);
function getMinorVersion : Word;
property MinorVersion : Word read getMinorVersion write setMinorVersion;
procedure setRevision(const val : Word);
function getRevision : Word;
property Revision : Word read getRevision write setRevision;
procedure setReserved(const val : Word);
function getReserved : Word;
property Reserved : Word read getReserved write setReserved;
end;
type __IMAGE_DEBUG_INFORMATION__Wrapper = class(TDCRecordWrapper)
private
fR : IMAGE_DEBUG_INFORMATION;
public
function GetRecordPtr : pointer; override;
published
procedure setSize(const val : DWORD);
function getSize : DWORD;
property Size : DWORD read getSize write setSize;
procedure setMachine(const val : Word);
function getMachine : Word;
property Machine : Word read getMachine write setMachine;
procedure setCharacteristics(const val : Word);
function getCharacteristics : Word;
property Characteristics : Word read getCharacteristics write setCharacteristics;
procedure setCheckSum(const val : DWORD);
function getCheckSum : DWORD;
property CheckSum : DWORD read getCheckSum write setCheckSum;
procedure setImageBase(const val : DWORD);
function getImageBase : DWORD;
property ImageBase : DWORD read getImageBase write setImageBase;
procedure setSizeOfImage(const val : DWORD);
function getSizeOfImage : DWORD;
property SizeOfImage : DWORD read getSizeOfImage write setSizeOfImage;
procedure setNumberOfSections(const val : DWORD);
function getNumberOfSections : DWORD;
property NumberOfSections : DWORD read getNumberOfSections write setNumberOfSections;
procedure setExportedNamesSize(const val : DWORD);
function getExportedNamesSize : DWORD;
property ExportedNamesSize : DWORD read getExportedNamesSize write setExportedNamesSize;
procedure setNumberOfFunctionTableEntries(const val : DWORD);
function getNumberOfFunctionTableEntries : DWORD;
property NumberOfFunctionTableEntries : DWORD read getNumberOfFunctionTableEntries write setNumberOfFunctionTableEntries;
procedure setLowestFunctionStartingAddress(const val : DWORD);
function getLowestFunctionStartingAddress : DWORD;
property LowestFunctionStartingAddress : DWORD read getLowestFunctionStartingAddress write setLowestFunctionStartingAddress;
procedure setHighestFunctionEndingAddress(const val : DWORD);
function getHighestFunctionEndingAddress : DWORD;
property HighestFunctionEndingAddress : DWORD read getHighestFunctionEndingAddress write setHighestFunctionEndingAddress;
procedure setNumberOfFpoTableEntries(const val : DWORD);
function getNumberOfFpoTableEntries : DWORD;
property NumberOfFpoTableEntries : DWORD read getNumberOfFpoTableEntries write setNumberOfFpoTableEntries;
procedure setSizeOfCoffSymbols(const val : DWORD);
function getSizeOfCoffSymbols : DWORD;
property SizeOfCoffSymbols : DWORD read getSizeOfCoffSymbols write setSizeOfCoffSymbols;
procedure setSizeOfCodeViewSymbols(const val : DWORD);
function getSizeOfCodeViewSymbols : DWORD;
property SizeOfCodeViewSymbols : DWORD read getSizeOfCodeViewSymbols write setSizeOfCodeViewSymbols;
procedure setTimeDateStamp(const val : DWORD);
function getTimeDateStamp : DWORD;
property TimeDateStamp : DWORD read getTimeDateStamp write setTimeDateStamp;
procedure setRomImage(const val : Bool);
function getRomImage : Bool;
property RomImage : Bool read getRomImage write setRomImage;
procedure setNumberOfDebugDirectories(const val : DWORD);
function getNumberOfDebugDirectories : DWORD;
property NumberOfDebugDirectories : DWORD read getNumberOfDebugDirectories write setNumberOfDebugDirectories;
end;
type __IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper = class(TDCRecordWrapper)
private
fR : IMAGEHLP_DEFERRED_SYMBOL_LOAD;
public
function GetRecordPtr : pointer; override;
published
procedure setSizeOfStruct(const val : DWORD);
function getSizeOfStruct : DWORD;
property SizeOfStruct : DWORD read getSizeOfStruct write setSizeOfStruct;
procedure setBaseOfImage(const val : DWORD);
function getBaseOfImage : DWORD;
property BaseOfImage : DWORD read getBaseOfImage write setBaseOfImage;
procedure setCheckSum(const val : DWORD);
function getCheckSum : DWORD;
property CheckSum : DWORD read getCheckSum write setCheckSum;
procedure setTimeDateStamp(const val : DWORD);
function getTimeDateStamp : DWORD;
property TimeDateStamp : DWORD read getTimeDateStamp write setTimeDateStamp;
end;
type __IMAGEHLP_DUPLICATE_SYMBOL__Wrapper = class(TDCRecordWrapper)
private
fR : IMAGEHLP_DUPLICATE_SYMBOL;
public
function GetRecordPtr : pointer; override;
published
procedure setSizeOfStruct(const val : DWORD);
function getSizeOfStruct : DWORD;
property SizeOfStruct : DWORD read getSizeOfStruct write setSizeOfStruct;
procedure setNumberOfDups(const val : DWORD);
function getNumberOfDups : DWORD;
property NumberOfDups : DWORD read getNumberOfDups write setNumberOfDups;
procedure setSelectedSymbol(const val : ULONG);
function getSelectedSymbol : ULONG;
property SelectedSymbol : ULONG read getSelectedSymbol write setSelectedSymbol;
end;
type __IMAGEHLP_MODULE__Wrapper = class(TDCRecordWrapper)
private
fR : IMAGEHLP_MODULE;
public
function GetRecordPtr : pointer; override;
published
procedure setSizeOfStruct(const val : DWORD);
function getSizeOfStruct : DWORD;
property SizeOfStruct : DWORD read getSizeOfStruct write setSizeOfStruct;
procedure setBaseOfImage(const val : DWORD);
function getBaseOfImage : DWORD;
property BaseOfImage : DWORD read getBaseOfImage write setBaseOfImage;
procedure setImageSize(const val : DWORD);
function getImageSize : DWORD;
property ImageSize : DWORD read getImageSize write setImageSize;
procedure setTimeDateStamp(const val : DWORD);
function getTimeDateStamp : DWORD;
property TimeDateStamp : DWORD read getTimeDateStamp write setTimeDateStamp;
procedure setCheckSum(const val : DWORD);
function getCheckSum : DWORD;
property CheckSum : DWORD read getCheckSum write setCheckSum;
procedure setNumSyms(const val : DWORD);
function getNumSyms : DWORD;
property NumSyms : DWORD read getNumSyms write setNumSyms;
procedure setSymType(const val : TSymType);
function getSymType : TSymType;
property SymType : TSymType read getSymType write setSymType;
end;
type __IMAGEHLP_SYMBOL__Wrapper = class(TDCRecordWrapper)
private
fR : IMAGEHLP_SYMBOL;
public
function GetRecordPtr : pointer; override;
published
procedure setSizeOfStruct(const val : DWORD);
function getSizeOfStruct : DWORD;
property SizeOfStruct : DWORD read getSizeOfStruct write setSizeOfStruct;
procedure setADDRESS(const val : DWORD);
function getADDRESS : DWORD;
property ADDRESS : DWORD read getADDRESS write setADDRESS;
procedure setSize(const val : DWORD);
function getSize : DWORD;
property Size : DWORD read getSize write setSize;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setMaxNameLength(const val : DWORD);
function getMaxNameLength : DWORD;
property MaxNameLength : DWORD read getMaxNameLength write setMaxNameLength;
end;
type __KDHELP__Wrapper = class(TDCRecordWrapper)
private
fR : KDHELP;
public
function GetRecordPtr : pointer; override;
published
procedure setThread(const val : DWORD);
function getThread : DWORD;
property Thread : DWORD read getThread write setThread;
procedure setThCallbackStack(const val : DWORD);
function getThCallbackStack : DWORD;
property ThCallbackStack : DWORD read getThCallbackStack write setThCallbackStack;
procedure setNextCallback(const val : DWORD);
function getNextCallback : DWORD;
property NextCallback : DWORD read getNextCallback write setNextCallback;
procedure setFramePointer(const val : DWORD);
function getFramePointer : DWORD;
property FramePointer : DWORD read getFramePointer write setFramePointer;
procedure setKiCallUserMode(const val : DWORD);
function getKiCallUserMode : DWORD;
property KiCallUserMode : DWORD read getKiCallUserMode write setKiCallUserMode;
procedure setKeUserCallbackDispatcher(const val : DWORD);
function getKeUserCallbackDispatcher : DWORD;
property KeUserCallbackDispatcher : DWORD read getKeUserCallbackDispatcher write setKeUserCallbackDispatcher;
end;
type __LOADED_IMAGE__Wrapper = class(TDCRecordWrapper)
private
fR : LOADED_IMAGE;
public
function GetRecordPtr : pointer; override;
published
procedure sethFile(const val : THandle);
function gethFile : THandle;
property hFile : THandle read gethFile write sethFile;
procedure setNumberOfSections(const val : ULONG);
function getNumberOfSections : ULONG;
property NumberOfSections : ULONG read getNumberOfSections write setNumberOfSections;
procedure setCharacteristics(const val : ULONG);
function getCharacteristics : ULONG;
property Characteristics : ULONG read getCharacteristics write setCharacteristics;
procedure setfSystemImage(const val : ByteBool);
function getfSystemImage : ByteBool;
property fSystemImage : ByteBool read getfSystemImage write setfSystemImage;
procedure setfDOSImage(const val : ByteBool);
function getfDOSImage : ByteBool;
property fDOSImage : ByteBool read getfDOSImage write setfDOSImage;
procedure setSizeOfImage(const val : ULONG);
function getSizeOfImage : ULONG;
property SizeOfImage : ULONG read getSizeOfImage write setSizeOfImage;
end;
type __LoadedImage__Wrapper = class(TDCRecordWrapper)
private
fR : LoadedImage;
public
function GetRecordPtr : pointer; override;
published
procedure sethFile(const val : THandle);
function gethFile : THandle;
property hFile : THandle read gethFile write sethFile;
procedure setNumberOfSections(const val : ULONG);
function getNumberOfSections : ULONG;
property NumberOfSections : ULONG read getNumberOfSections write setNumberOfSections;
procedure setCharacteristics(const val : ULONG);
function getCharacteristics : ULONG;
property Characteristics : ULONG read getCharacteristics write setCharacteristics;
procedure setfSystemImage(const val : ByteBool);
function getfSystemImage : ByteBool;
property fSystemImage : ByteBool read getfSystemImage write setfSystemImage;
procedure setfDOSImage(const val : ByteBool);
function getfDOSImage : ByteBool;
property fDOSImage : ByteBool read getfDOSImage write setfDOSImage;
procedure setSizeOfImage(const val : ULONG);
function getSizeOfImage : ULONG;
property SizeOfImage : ULONG read getSizeOfImage write setSizeOfImage;
end;
type __STACKFRAME__Wrapper = class(TDCRecordWrapper)
private
fR : STACKFRAME;
public
function GetRecordPtr : pointer; override;
published
procedure set_Far(const val : Bool);
function get_Far : Bool;
property _Far : Bool read get_Far write set_Far;
procedure set_Virtual(const val : Bool);
function get_Virtual : Bool;
property _Virtual : Bool read get_Virtual write set_Virtual;
end;
type __TAddress__Wrapper = class(TDCRecordWrapper)
private
fR : TAddress;
public
function GetRecordPtr : pointer; override;
published
procedure setOffset(const val : DWORD);
function getOffset : DWORD;
property Offset : DWORD read getOffset write setOffset;
procedure setSegment(const val : Word);
function getSegment : Word;
property Segment : Word read getSegment write setSegment;
procedure setMode(const val : TAddressMode);
function getMode : TAddressMode;
property Mode : TAddressMode read getMode write setMode;
end;
type __TApiVersion__Wrapper = class(TDCRecordWrapper)
private
fR : TApiVersion;
public
function GetRecordPtr : pointer; override;
published
procedure setMajorVersion(const val : Word);
function getMajorVersion : Word;
property MajorVersion : Word read getMajorVersion write setMajorVersion;
procedure setMinorVersion(const val : Word);
function getMinorVersion : Word;
property MinorVersion : Word read getMinorVersion write setMinorVersion;
procedure setRevision(const val : Word);
function getRevision : Word;
property Revision : Word read getRevision write setRevision;
procedure setReserved(const val : Word);
function getReserved : Word;
property Reserved : Word read getReserved write setReserved;
end;
type __TImageDebugInformation__Wrapper = class(TDCRecordWrapper)
private
fR : TImageDebugInformation;
public
function GetRecordPtr : pointer; override;
published
procedure setSize(const val : DWORD);
function getSize : DWORD;
property Size : DWORD read getSize write setSize;
procedure setMachine(const val : Word);
function getMachine : Word;
property Machine : Word read getMachine write setMachine;
procedure setCharacteristics(const val : Word);
function getCharacteristics : Word;
property Characteristics : Word read getCharacteristics write setCharacteristics;
procedure setCheckSum(const val : DWORD);
function getCheckSum : DWORD;
property CheckSum : DWORD read getCheckSum write setCheckSum;
procedure setImageBase(const val : DWORD);
function getImageBase : DWORD;
property ImageBase : DWORD read getImageBase write setImageBase;
procedure setSizeOfImage(const val : DWORD);
function getSizeOfImage : DWORD;
property SizeOfImage : DWORD read getSizeOfImage write setSizeOfImage;
procedure setNumberOfSections(const val : DWORD);
function getNumberOfSections : DWORD;
property NumberOfSections : DWORD read getNumberOfSections write setNumberOfSections;
procedure setExportedNamesSize(const val : DWORD);
function getExportedNamesSize : DWORD;
property ExportedNamesSize : DWORD read getExportedNamesSize write setExportedNamesSize;
procedure setNumberOfFunctionTableEntries(const val : DWORD);
function getNumberOfFunctionTableEntries : DWORD;
property NumberOfFunctionTableEntries : DWORD read getNumberOfFunctionTableEntries write setNumberOfFunctionTableEntries;
procedure setLowestFunctionStartingAddress(const val : DWORD);
function getLowestFunctionStartingAddress : DWORD;
property LowestFunctionStartingAddress : DWORD read getLowestFunctionStartingAddress write setLowestFunctionStartingAddress;
procedure setHighestFunctionEndingAddress(const val : DWORD);
function getHighestFunctionEndingAddress : DWORD;
property HighestFunctionEndingAddress : DWORD read getHighestFunctionEndingAddress write setHighestFunctionEndingAddress;
procedure setNumberOfFpoTableEntries(const val : DWORD);
function getNumberOfFpoTableEntries : DWORD;
property NumberOfFpoTableEntries : DWORD read getNumberOfFpoTableEntries write setNumberOfFpoTableEntries;
procedure setSizeOfCoffSymbols(const val : DWORD);
function getSizeOfCoffSymbols : DWORD;
property SizeOfCoffSymbols : DWORD read getSizeOfCoffSymbols write setSizeOfCoffSymbols;
procedure setSizeOfCodeViewSymbols(const val : DWORD);
function getSizeOfCodeViewSymbols : DWORD;
property SizeOfCodeViewSymbols : DWORD read getSizeOfCodeViewSymbols write setSizeOfCodeViewSymbols;
procedure setTimeDateStamp(const val : DWORD);
function getTimeDateStamp : DWORD;
property TimeDateStamp : DWORD read getTimeDateStamp write setTimeDateStamp;
procedure setRomImage(const val : Bool);
function getRomImage : Bool;
property RomImage : Bool read getRomImage write setRomImage;
procedure setNumberOfDebugDirectories(const val : DWORD);
function getNumberOfDebugDirectories : DWORD;
property NumberOfDebugDirectories : DWORD read getNumberOfDebugDirectories write setNumberOfDebugDirectories;
end;
type __TImagehlpDeferredSymbolLoad__Wrapper = class(TDCRecordWrapper)
private
fR : TImagehlpDeferredSymbolLoad;
public
function GetRecordPtr : pointer; override;
published
procedure setSizeOfStruct(const val : DWORD);
function getSizeOfStruct : DWORD;
property SizeOfStruct : DWORD read getSizeOfStruct write setSizeOfStruct;
procedure setBaseOfImage(const val : DWORD);
function getBaseOfImage : DWORD;
property BaseOfImage : DWORD read getBaseOfImage write setBaseOfImage;
procedure setCheckSum(const val : DWORD);
function getCheckSum : DWORD;
property CheckSum : DWORD read getCheckSum write setCheckSum;
procedure setTimeDateStamp(const val : DWORD);
function getTimeDateStamp : DWORD;
property TimeDateStamp : DWORD read getTimeDateStamp write setTimeDateStamp;
end;
type __TImagehlpDuplicateSymbol__Wrapper = class(TDCRecordWrapper)
private
fR : TImagehlpDuplicateSymbol;
public
function GetRecordPtr : pointer; override;
published
procedure setSizeOfStruct(const val : DWORD);
function getSizeOfStruct : DWORD;
property SizeOfStruct : DWORD read getSizeOfStruct write setSizeOfStruct;
procedure setNumberOfDups(const val : DWORD);
function getNumberOfDups : DWORD;
property NumberOfDups : DWORD read getNumberOfDups write setNumberOfDups;
procedure setSelectedSymbol(const val : ULONG);
function getSelectedSymbol : ULONG;
property SelectedSymbol : ULONG read getSelectedSymbol write setSelectedSymbol;
end;
type __TImagehlpModule__Wrapper = class(TDCRecordWrapper)
private
fR : TImagehlpModule;
public
function GetRecordPtr : pointer; override;
published
procedure setSizeOfStruct(const val : DWORD);
function getSizeOfStruct : DWORD;
property SizeOfStruct : DWORD read getSizeOfStruct write setSizeOfStruct;
procedure setBaseOfImage(const val : DWORD);
function getBaseOfImage : DWORD;
property BaseOfImage : DWORD read getBaseOfImage write setBaseOfImage;
procedure setImageSize(const val : DWORD);
function getImageSize : DWORD;
property ImageSize : DWORD read getImageSize write setImageSize;
procedure setTimeDateStamp(const val : DWORD);
function getTimeDateStamp : DWORD;
property TimeDateStamp : DWORD read getTimeDateStamp write setTimeDateStamp;
procedure setCheckSum(const val : DWORD);
function getCheckSum : DWORD;
property CheckSum : DWORD read getCheckSum write setCheckSum;
procedure setNumSyms(const val : DWORD);
function getNumSyms : DWORD;
property NumSyms : DWORD read getNumSyms write setNumSyms;
procedure setSymType(const val : TSymType);
function getSymType : TSymType;
property SymType : TSymType read getSymType write setSymType;
end;
type __TImagehlpSymbol__Wrapper = class(TDCRecordWrapper)
private
fR : TImagehlpSymbol;
public
function GetRecordPtr : pointer; override;
published
procedure setSizeOfStruct(const val : DWORD);
function getSizeOfStruct : DWORD;
property SizeOfStruct : DWORD read getSizeOfStruct write setSizeOfStruct;
procedure setADDRESS(const val : DWORD);
function getADDRESS : DWORD;
property ADDRESS : DWORD read getADDRESS write setADDRESS;
procedure setSize(const val : DWORD);
function getSize : DWORD;
property Size : DWORD read getSize write setSize;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setMaxNameLength(const val : DWORD);
function getMaxNameLength : DWORD;
property MaxNameLength : DWORD read getMaxNameLength write setMaxNameLength;
end;
type __TKdHelp__Wrapper = class(TDCRecordWrapper)
private
fR : TKdHelp;
public
function GetRecordPtr : pointer; override;
published
procedure setThread(const val : DWORD);
function getThread : DWORD;
property Thread : DWORD read getThread write setThread;
procedure setThCallbackStack(const val : DWORD);
function getThCallbackStack : DWORD;
property ThCallbackStack : DWORD read getThCallbackStack write setThCallbackStack;
procedure setNextCallback(const val : DWORD);
function getNextCallback : DWORD;
property NextCallback : DWORD read getNextCallback write setNextCallback;
procedure setFramePointer(const val : DWORD);
function getFramePointer : DWORD;
property FramePointer : DWORD read getFramePointer write setFramePointer;
procedure setKiCallUserMode(const val : DWORD);
function getKiCallUserMode : DWORD;
property KiCallUserMode : DWORD read getKiCallUserMode write setKiCallUserMode;
procedure setKeUserCallbackDispatcher(const val : DWORD);
function getKeUserCallbackDispatcher : DWORD;
property KeUserCallbackDispatcher : DWORD read getKeUserCallbackDispatcher write setKeUserCallbackDispatcher;
end;
type __TLoadedImage__Wrapper = class(TDCRecordWrapper)
private
fR : TLoadedImage;
public
function GetRecordPtr : pointer; override;
published
procedure sethFile(const val : THandle);
function gethFile : THandle;
property hFile : THandle read gethFile write sethFile;
procedure setNumberOfSections(const val : ULONG);
function getNumberOfSections : ULONG;
property NumberOfSections : ULONG read getNumberOfSections write setNumberOfSections;
procedure setCharacteristics(const val : ULONG);
function getCharacteristics : ULONG;
property Characteristics : ULONG read getCharacteristics write setCharacteristics;
procedure setfSystemImage(const val : ByteBool);
function getfSystemImage : ByteBool;
property fSystemImage : ByteBool read getfSystemImage write setfSystemImage;
procedure setfDOSImage(const val : ByteBool);
function getfDOSImage : ByteBool;
property fDOSImage : ByteBool read getfDOSImage write setfDOSImage;
procedure setSizeOfImage(const val : ULONG);
function getSizeOfImage : ULONG;
property SizeOfImage : ULONG read getSizeOfImage write setSizeOfImage;
end;
type __TStackFrame__Wrapper = class(TDCRecordWrapper)
private
fR : TStackFrame;
public
function GetRecordPtr : pointer; override;
published
procedure set_Far(const val : Bool);
function get_Far : Bool;
property _Far : Bool read get_Far write set_Far;
procedure set_Virtual(const val : Bool);
function get_Virtual : Bool;
property _Virtual : Bool read get_Virtual write set_Virtual;
end;
type __TSystemTime__Wrapper = class(TDCRecordWrapper)
private
fR : TSystemTime;
public
function GetRecordPtr : pointer; override;
published
procedure setwYear(const val : Word);
function getwYear : Word;
property wYear : Word read getwYear write setwYear;
procedure setwMonth(const val : Word);
function getwMonth : Word;
property wMonth : Word read getwMonth write setwMonth;
procedure setwDayOfWeek(const val : Word);
function getwDayOfWeek : Word;
property wDayOfWeek : Word read getwDayOfWeek write setwDayOfWeek;
procedure setwDay(const val : Word);
function getwDay : Word;
property wDay : Word read getwDay write setwDay;
procedure setwHour(const val : Word);
function getwHour : Word;
property wHour : Word read getwHour write setwHour;
procedure setwMinute(const val : Word);
function getwMinute : Word;
property wMinute : Word read getwMinute write setwMinute;
procedure setwSecond(const val : Word);
function getwSecond : Word;
property wSecond : Word read getwSecond write setwSecond;
procedure setwMilliseconds(const val : Word);
function getwMilliseconds : Word;
property wMilliseconds : Word read getwMilliseconds write setwMilliseconds;
end;
type
{_T0 = function (p0 : Pointer;
p1 : DWORD;
p2 : PDWORD;
p3 : PDWORD): PImageNtHeaders of object;}

{_T1 = function (p0 : PChar;
var p1 : DWORD;
var p2 : DWORD): DWORD of object;}

{_T2 = function (p0 : PAnsiChar;
var p1 : DWORD;
var p2 : DWORD): DWORD of object;}

{_T3 = function (p0 : PWideChar;
var p1 : DWORD;
var p2 : DWORD): DWORD of object;}

_T4 = function (p0 : THandle;
const p1 : IDispatch): Bool of object;

{_T5 = function (p0 : LPSTR;
p1 : LPSTR;
p2 : LPSTR;
p3 : DWORD): Bool of object;}

{_T6 = function (p0 : LPSTR;
p1 : LPSTR;
p2 : LPSTR): THandle of object;}

{_T7 = function (p0 : LPSTR;
p1 : LPSTR;
p2 : LPSTR): THandle of object;}

{_T8 = function (p0 : LPSTR;
p1 : LPSTR;
p2 : LPSTR;
p3 : PImageNtHeaders): Bool of object;}

{_T9 = function (p0 : LPSTR;
p1 : LPSTR;
p2 : LPSTR;
p3 : PImageNtHeaders;
p4 : DWORD): Bool of object;}

{_T10 = function (p0 : LPSTR;
p1 : LPSTR;
p2 : LPSTR): Bool of object;}

{_T11 = function (p0 : DWORD;
p1 : LPSTR;
p2 : LPSTR;
p3 : LPSTR;
var p4 : TImagehlpStatusRoutine): Bool of object;}

{_T12 = function (p0 : LPSTR;
p1 : LPSTR;
p2 : Bool;
p3 : Bool;
p4 : Bool;
p5 : ULONG;
var p6 : ULONG;
var p7 : ULONG;
var p8 : ULONG;
var p9 : ULONG;
p10 : ULONG): Bool of object;}

{_T13 = function (p0 : LPSTR;
p1 : LPSTR): PloadedImage of object;}

{_T14 = function (p0 : PloadedImage): Bool of object;}

{_T15 = function (p0 : Pointer): PImageNtHeaders of object;}

_T16 = function (p0 : Pointer;
p1 : ByteBool;
p2 : Word;
var p3 : ULONG): Pointer of object;

{_T17 = function (p0 : PImageNtHeaders;
p1 : Pointer;
p2 : ULONG): PImageSectionHeader of object;}

{_T18 = function (p0 : PImageNtHeaders;
p1 : Pointer;
p2 : ULONG;
var p3 : PImageSectionHeader): Pointer of object;}

{_T19 = function (p0 : LPSTR;
p1 : LPSTR;
p2 : PloadedImage;
p3 : Bool;
p4 : Bool): Bool of object;}

{_T21 = function (p0 : PloadedImage;
var p1 : DWORD): DWORD of object;}

{_T23 = function (p0 : PloadedImage): Bool of object;}

{_T24 = function (p0 : THandle;
p1 : LPSTR;
p2 : LPSTR;
p3 : DWORD): PimageDebugInformation of object;}

{_T25 = function (p0 : PimageDebugInformation): Bool of object;}

{_T26 = function (p0 : LPSTR;
p1 : LPSTR;
p2 : LPSTR): Bool of object;}

{_T27 = function (p0 : LPCSTR): Bool of object;}

{_T28 = function (p0 : LPSTR;
p1 : LPSTR;
p2 : DWORD;
p3 : DWORD): DWORD of object;}

{_T29 = function (p0 : DWORD;
p1 : THandle;
p2 : THandle;
p3 : PStackFrame;
p4 : Pointer;
p5 : TReadProcessMemoryRoutine;
p6 : TFunctionTableAccessRoutine;
p7 : TGetModuleBaseRoutine;
p8 : TTranslateAddressRoutine): Bool of object;}

{_T30 = function : PApiVersion of object;}

_T32 = function (p0 : HMODULE): DWORD of object;

{_T33 = function (p0 : PChar;
var p1 : PChar;
var p2 : ULONG): Bool of object;}

{_T34 = procedure (p0 : PChar) of object;}

_T35 = function (p0 : DWORD): DWORD of object;

_T36 = function : DWORD of object;

_T37 = function (p0 : THandle): Bool of object;

{_T38 = function (p0 : THandle;
p1 : TSymEnummodulesCallback;
p2 : Pointer): Bool of object;}

{_T39 = function (p0 : THandle;
p1 : DWORD;
p2 : TSymEnumsymbolsCallback;
p3 : Pointer): Bool of object;}

{_T40 = function (p0 : THandle;
p1 : TEnumloadedModulesCallback;
p2 : Pointer): Bool of object;}

_T41 = function (p0 : THandle;
p1 : DWORD): Pointer of object;

_T42 = function (p0 : THandle;
p1 : DWORD;
const p2 : IDispatch): Bool of object;

_T43 = function (p0 : THandle;
p1 : DWORD): DWORD of object;

_T44 = function (p0 : THandle;
p1 : DWORD;
p2 : PDWORD;
const p3 : IDispatch): Bool of object;

_T46 = _T4;

_T47 = _T4;

{_T48 = function (p0 : THandle;
p1 : LPSTR;
p2 : Bool): Bool of object;}

{_T49 = function (p0 : THandle;
p1 : LPSTR;
p2 : DWORD): Bool of object;}

{_T50 = function (p0 : THandle;
p1 : LPSTR): Bool of object;}

{_T51 = function (p0 : THandle;
p1 : THandle;
p2 : LPSTR;
p3 : LPSTR;
p4 : DWORD;
p5 : DWORD): Bool of object;}

_T52 = function (p0 : THandle;
p1 : DWORD): Bool of object;

{_T53 = function (p0 : PImagehlpSymbol;
p1 : LPSTR;
p2 : DWORD): Bool of object;}

{_T54 = function (p0 : THandle;
p1 : TSymbolRegisteredCallback;
p2 : Pointer): Bool of object;}

{_T55 = function (p0 : THandle;
p1 : DWORD;
p2 : TDigestFunction;
p3 : TDigestHandle): Bool of object;}

{_T56 = function (p0 : THandle;
var p1 : PWinCertificate;
var p2 : DWORD): Bool of object;}

_T57 = _T52;

_T58 = function (p0 : THandle;
p1 : Word;
p2 : PDWORD;
p3 : PDWORD;
p4 : DWORD): Bool of object;

{_T59 = function (p0 : THandle;
p1 : DWORD;
p2 : PWinCertificate;
var p3 : DWORD): Bool of object;}

{_T60 = function (p0 : THandle;
p1 : DWORD;
var p2 : PWinCertificate): Bool of object;}

function ___IMAGE_DEBUG_INFORMATION__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___IMAGE_DEBUG_INFORMATION__Wrapper.setSize(const val : DWORD);
begin
_IMAGE_DEBUG_INFORMATION(GetRecordPtr^).Size := val;
end;
function ___IMAGE_DEBUG_INFORMATION__Wrapper.getSize : DWORD;
begin
result := _IMAGE_DEBUG_INFORMATION(GetRecordPtr^).Size;
end;
procedure ___IMAGE_DEBUG_INFORMATION__Wrapper.setMachine(const val : Word);
begin
_IMAGE_DEBUG_INFORMATION(GetRecordPtr^).Machine := val;
end;
function ___IMAGE_DEBUG_INFORMATION__Wrapper.getMachine : Word;
begin
result := _IMAGE_DEBUG_INFORMATION(GetRecordPtr^).Machine;
end;
procedure ___IMAGE_DEBUG_INFORMATION__Wrapper.setCharacteristics(const val : Word);
begin
_IMAGE_DEBUG_INFORMATION(GetRecordPtr^).Characteristics := val;
end;
function ___IMAGE_DEBUG_INFORMATION__Wrapper.getCharacteristics : Word;
begin
result := _IMAGE_DEBUG_INFORMATION(GetRecordPtr^).Characteristics;
end;
procedure ___IMAGE_DEBUG_INFORMATION__Wrapper.setCheckSum(const val : DWORD);
begin
_IMAGE_DEBUG_INFORMATION(GetRecordPtr^).CheckSum := val;
end;
function ___IMAGE_DEBUG_INFORMATION__Wrapper.getCheckSum : DWORD;
begin
result := _IMAGE_DEBUG_INFORMATION(GetRecordPtr^).CheckSum;
end;
procedure ___IMAGE_DEBUG_INFORMATION__Wrapper.setImageBase(const val : DWORD);
begin
_IMAGE_DEBUG_INFORMATION(GetRecordPtr^).ImageBase := val;
end;
function ___IMAGE_DEBUG_INFORMATION__Wrapper.getImageBase : DWORD;
begin
result := _IMAGE_DEBUG_INFORMATION(GetRecordPtr^).ImageBase;
end;
procedure ___IMAGE_DEBUG_INFORMATION__Wrapper.setSizeOfImage(const val : DWORD);
begin
_IMAGE_DEBUG_INFORMATION(GetRecordPtr^).SizeOfImage := val;
end;
function ___IMAGE_DEBUG_INFORMATION__Wrapper.getSizeOfImage : DWORD;
begin
result := _IMAGE_DEBUG_INFORMATION(GetRecordPtr^).SizeOfImage;
end;
procedure ___IMAGE_DEBUG_INFORMATION__Wrapper.setNumberOfSections(const val : DWORD);
begin
_IMAGE_DEBUG_INFORMATION(GetRecordPtr^).NumberOfSections := val;
end;
function ___IMAGE_DEBUG_INFORMATION__Wrapper.getNumberOfSections : DWORD;
begin
result := _IMAGE_DEBUG_INFORMATION(GetRecordPtr^).NumberOfSections;
end;
procedure ___IMAGE_DEBUG_INFORMATION__Wrapper.setExportedNamesSize(const val : DWORD);
begin
_IMAGE_DEBUG_INFORMATION(GetRecordPtr^).ExportedNamesSize := val;
end;
function ___IMAGE_DEBUG_INFORMATION__Wrapper.getExportedNamesSize : DWORD;
begin
result := _IMAGE_DEBUG_INFORMATION(GetRecordPtr^).ExportedNamesSize;
end;
procedure ___IMAGE_DEBUG_INFORMATION__Wrapper.setNumberOfFunctionTableEntries(const val : DWORD);
begin
_IMAGE_DEBUG_INFORMATION(GetRecordPtr^).NumberOfFunctionTableEntries := val;
end;
function ___IMAGE_DEBUG_INFORMATION__Wrapper.getNumberOfFunctionTableEntries : DWORD;
begin
result := _IMAGE_DEBUG_INFORMATION(GetRecordPtr^).NumberOfFunctionTableEntries;
end;
procedure ___IMAGE_DEBUG_INFORMATION__Wrapper.setLowestFunctionStartingAddress(const val : DWORD);
begin
_IMAGE_DEBUG_INFORMATION(GetRecordPtr^).LowestFunctionStartingAddress := val;
end;
function ___IMAGE_DEBUG_INFORMATION__Wrapper.getLowestFunctionStartingAddress : DWORD;
begin
result := _IMAGE_DEBUG_INFORMATION(GetRecordPtr^).LowestFunctionStartingAddress;
end;
procedure ___IMAGE_DEBUG_INFORMATION__Wrapper.setHighestFunctionEndingAddress(const val : DWORD);
begin
_IMAGE_DEBUG_INFORMATION(GetRecordPtr^).HighestFunctionEndingAddress := val;
end;
function ___IMAGE_DEBUG_INFORMATION__Wrapper.getHighestFunctionEndingAddress : DWORD;
begin
result := _IMAGE_DEBUG_INFORMATION(GetRecordPtr^).HighestFunctionEndingAddress;
end;
procedure ___IMAGE_DEBUG_INFORMATION__Wrapper.setNumberOfFpoTableEntries(const val : DWORD);
begin
_IMAGE_DEBUG_INFORMATION(GetRecordPtr^).NumberOfFpoTableEntries := val;
end;
function ___IMAGE_DEBUG_INFORMATION__Wrapper.getNumberOfFpoTableEntries : DWORD;
begin
result := _IMAGE_DEBUG_INFORMATION(GetRecordPtr^).NumberOfFpoTableEntries;
end;
procedure ___IMAGE_DEBUG_INFORMATION__Wrapper.setSizeOfCoffSymbols(const val : DWORD);
begin
_IMAGE_DEBUG_INFORMATION(GetRecordPtr^).SizeOfCoffSymbols := val;
end;
function ___IMAGE_DEBUG_INFORMATION__Wrapper.getSizeOfCoffSymbols : DWORD;
begin
result := _IMAGE_DEBUG_INFORMATION(GetRecordPtr^).SizeOfCoffSymbols;
end;
procedure ___IMAGE_DEBUG_INFORMATION__Wrapper.setSizeOfCodeViewSymbols(const val : DWORD);
begin
_IMAGE_DEBUG_INFORMATION(GetRecordPtr^).SizeOfCodeViewSymbols := val;
end;
function ___IMAGE_DEBUG_INFORMATION__Wrapper.getSizeOfCodeViewSymbols : DWORD;
begin
result := _IMAGE_DEBUG_INFORMATION(GetRecordPtr^).SizeOfCodeViewSymbols;
end;
procedure ___IMAGE_DEBUG_INFORMATION__Wrapper.setTimeDateStamp(const val : DWORD);
begin
_IMAGE_DEBUG_INFORMATION(GetRecordPtr^).TimeDateStamp := val;
end;
function ___IMAGE_DEBUG_INFORMATION__Wrapper.getTimeDateStamp : DWORD;
begin
result := _IMAGE_DEBUG_INFORMATION(GetRecordPtr^).TimeDateStamp;
end;
procedure ___IMAGE_DEBUG_INFORMATION__Wrapper.setRomImage(const val : Bool);
begin
_IMAGE_DEBUG_INFORMATION(GetRecordPtr^).RomImage := val;
end;
function ___IMAGE_DEBUG_INFORMATION__Wrapper.getRomImage : Bool;
begin
result := _IMAGE_DEBUG_INFORMATION(GetRecordPtr^).RomImage;
end;
procedure ___IMAGE_DEBUG_INFORMATION__Wrapper.setNumberOfDebugDirectories(const val : DWORD);
begin
_IMAGE_DEBUG_INFORMATION(GetRecordPtr^).NumberOfDebugDirectories := val;
end;
function ___IMAGE_DEBUG_INFORMATION__Wrapper.getNumberOfDebugDirectories : DWORD;
begin
result := _IMAGE_DEBUG_INFORMATION(GetRecordPtr^).NumberOfDebugDirectories;
end;
function ___IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper.setSizeOfStruct(const val : DWORD);
begin
_IMAGEHLP_DEFERRED_SYMBOL_LOAD(GetRecordPtr^).SizeOfStruct := val;
end;
function ___IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper.getSizeOfStruct : DWORD;
begin
result := _IMAGEHLP_DEFERRED_SYMBOL_LOAD(GetRecordPtr^).SizeOfStruct;
end;
procedure ___IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper.setBaseOfImage(const val : DWORD);
begin
_IMAGEHLP_DEFERRED_SYMBOL_LOAD(GetRecordPtr^).BaseOfImage := val;
end;
function ___IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper.getBaseOfImage : DWORD;
begin
result := _IMAGEHLP_DEFERRED_SYMBOL_LOAD(GetRecordPtr^).BaseOfImage;
end;
procedure ___IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper.setCheckSum(const val : DWORD);
begin
_IMAGEHLP_DEFERRED_SYMBOL_LOAD(GetRecordPtr^).CheckSum := val;
end;
function ___IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper.getCheckSum : DWORD;
begin
result := _IMAGEHLP_DEFERRED_SYMBOL_LOAD(GetRecordPtr^).CheckSum;
end;
procedure ___IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper.setTimeDateStamp(const val : DWORD);
begin
_IMAGEHLP_DEFERRED_SYMBOL_LOAD(GetRecordPtr^).TimeDateStamp := val;
end;
function ___IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper.getTimeDateStamp : DWORD;
begin
result := _IMAGEHLP_DEFERRED_SYMBOL_LOAD(GetRecordPtr^).TimeDateStamp;
end;
function ___IMAGEHLP_DUPLICATE_SYMBOL__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___IMAGEHLP_DUPLICATE_SYMBOL__Wrapper.setSizeOfStruct(const val : DWORD);
begin
_IMAGEHLP_DUPLICATE_SYMBOL(GetRecordPtr^).SizeOfStruct := val;
end;
function ___IMAGEHLP_DUPLICATE_SYMBOL__Wrapper.getSizeOfStruct : DWORD;
begin
result := _IMAGEHLP_DUPLICATE_SYMBOL(GetRecordPtr^).SizeOfStruct;
end;
procedure ___IMAGEHLP_DUPLICATE_SYMBOL__Wrapper.setNumberOfDups(const val : DWORD);
begin
_IMAGEHLP_DUPLICATE_SYMBOL(GetRecordPtr^).NumberOfDups := val;
end;
function ___IMAGEHLP_DUPLICATE_SYMBOL__Wrapper.getNumberOfDups : DWORD;
begin
result := _IMAGEHLP_DUPLICATE_SYMBOL(GetRecordPtr^).NumberOfDups;
end;
procedure ___IMAGEHLP_DUPLICATE_SYMBOL__Wrapper.setSelectedSymbol(const val : ULONG);
begin
_IMAGEHLP_DUPLICATE_SYMBOL(GetRecordPtr^).SelectedSymbol := val;
end;
function ___IMAGEHLP_DUPLICATE_SYMBOL__Wrapper.getSelectedSymbol : ULONG;
begin
result := _IMAGEHLP_DUPLICATE_SYMBOL(GetRecordPtr^).SelectedSymbol;
end;
function ___IMAGEHLP_MODULE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___IMAGEHLP_MODULE__Wrapper.setSizeOfStruct(const val : DWORD);
begin
_IMAGEHLP_MODULE(GetRecordPtr^).SizeOfStruct := val;
end;
function ___IMAGEHLP_MODULE__Wrapper.getSizeOfStruct : DWORD;
begin
result := _IMAGEHLP_MODULE(GetRecordPtr^).SizeOfStruct;
end;
procedure ___IMAGEHLP_MODULE__Wrapper.setBaseOfImage(const val : DWORD);
begin
_IMAGEHLP_MODULE(GetRecordPtr^).BaseOfImage := val;
end;
function ___IMAGEHLP_MODULE__Wrapper.getBaseOfImage : DWORD;
begin
result := _IMAGEHLP_MODULE(GetRecordPtr^).BaseOfImage;
end;
procedure ___IMAGEHLP_MODULE__Wrapper.setImageSize(const val : DWORD);
begin
_IMAGEHLP_MODULE(GetRecordPtr^).ImageSize := val;
end;
function ___IMAGEHLP_MODULE__Wrapper.getImageSize : DWORD;
begin
result := _IMAGEHLP_MODULE(GetRecordPtr^).ImageSize;
end;
procedure ___IMAGEHLP_MODULE__Wrapper.setTimeDateStamp(const val : DWORD);
begin
_IMAGEHLP_MODULE(GetRecordPtr^).TimeDateStamp := val;
end;
function ___IMAGEHLP_MODULE__Wrapper.getTimeDateStamp : DWORD;
begin
result := _IMAGEHLP_MODULE(GetRecordPtr^).TimeDateStamp;
end;
procedure ___IMAGEHLP_MODULE__Wrapper.setCheckSum(const val : DWORD);
begin
_IMAGEHLP_MODULE(GetRecordPtr^).CheckSum := val;
end;
function ___IMAGEHLP_MODULE__Wrapper.getCheckSum : DWORD;
begin
result := _IMAGEHLP_MODULE(GetRecordPtr^).CheckSum;
end;
procedure ___IMAGEHLP_MODULE__Wrapper.setNumSyms(const val : DWORD);
begin
_IMAGEHLP_MODULE(GetRecordPtr^).NumSyms := val;
end;
function ___IMAGEHLP_MODULE__Wrapper.getNumSyms : DWORD;
begin
result := _IMAGEHLP_MODULE(GetRecordPtr^).NumSyms;
end;
procedure ___IMAGEHLP_MODULE__Wrapper.setSymType(const val : TSymType);
begin
_IMAGEHLP_MODULE(GetRecordPtr^).SymType := val;
end;
function ___IMAGEHLP_MODULE__Wrapper.getSymType : TSymType;
begin
result := _IMAGEHLP_MODULE(GetRecordPtr^).SymType;
end;
function ___IMAGEHLP_SYMBOL__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___IMAGEHLP_SYMBOL__Wrapper.setSizeOfStruct(const val : DWORD);
begin
_IMAGEHLP_SYMBOL(GetRecordPtr^).SizeOfStruct := val;
end;
function ___IMAGEHLP_SYMBOL__Wrapper.getSizeOfStruct : DWORD;
begin
result := _IMAGEHLP_SYMBOL(GetRecordPtr^).SizeOfStruct;
end;
procedure ___IMAGEHLP_SYMBOL__Wrapper.setADDRESS(const val : DWORD);
begin
_IMAGEHLP_SYMBOL(GetRecordPtr^).ADDRESS := val;
end;
function ___IMAGEHLP_SYMBOL__Wrapper.getADDRESS : DWORD;
begin
result := _IMAGEHLP_SYMBOL(GetRecordPtr^).ADDRESS;
end;
procedure ___IMAGEHLP_SYMBOL__Wrapper.setSize(const val : DWORD);
begin
_IMAGEHLP_SYMBOL(GetRecordPtr^).Size := val;
end;
function ___IMAGEHLP_SYMBOL__Wrapper.getSize : DWORD;
begin
result := _IMAGEHLP_SYMBOL(GetRecordPtr^).Size;
end;
procedure ___IMAGEHLP_SYMBOL__Wrapper.setFlags(const val : DWORD);
begin
_IMAGEHLP_SYMBOL(GetRecordPtr^).Flags := val;
end;
function ___IMAGEHLP_SYMBOL__Wrapper.getFlags : DWORD;
begin
result := _IMAGEHLP_SYMBOL(GetRecordPtr^).Flags;
end;
procedure ___IMAGEHLP_SYMBOL__Wrapper.setMaxNameLength(const val : DWORD);
begin
_IMAGEHLP_SYMBOL(GetRecordPtr^).MaxNameLength := val;
end;
function ___IMAGEHLP_SYMBOL__Wrapper.getMaxNameLength : DWORD;
begin
result := _IMAGEHLP_SYMBOL(GetRecordPtr^).MaxNameLength;
end;
function ___KDHELP__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___KDHELP__Wrapper.setThread(const val : DWORD);
begin
_KDHELP(GetRecordPtr^).Thread := val;
end;
function ___KDHELP__Wrapper.getThread : DWORD;
begin
result := _KDHELP(GetRecordPtr^).Thread;
end;
procedure ___KDHELP__Wrapper.setThCallbackStack(const val : DWORD);
begin
_KDHELP(GetRecordPtr^).ThCallbackStack := val;
end;
function ___KDHELP__Wrapper.getThCallbackStack : DWORD;
begin
result := _KDHELP(GetRecordPtr^).ThCallbackStack;
end;
procedure ___KDHELP__Wrapper.setNextCallback(const val : DWORD);
begin
_KDHELP(GetRecordPtr^).NextCallback := val;
end;
function ___KDHELP__Wrapper.getNextCallback : DWORD;
begin
result := _KDHELP(GetRecordPtr^).NextCallback;
end;
procedure ___KDHELP__Wrapper.setFramePointer(const val : DWORD);
begin
_KDHELP(GetRecordPtr^).FramePointer := val;
end;
function ___KDHELP__Wrapper.getFramePointer : DWORD;
begin
result := _KDHELP(GetRecordPtr^).FramePointer;
end;
procedure ___KDHELP__Wrapper.setKiCallUserMode(const val : DWORD);
begin
_KDHELP(GetRecordPtr^).KiCallUserMode := val;
end;
function ___KDHELP__Wrapper.getKiCallUserMode : DWORD;
begin
result := _KDHELP(GetRecordPtr^).KiCallUserMode;
end;
procedure ___KDHELP__Wrapper.setKeUserCallbackDispatcher(const val : DWORD);
begin
_KDHELP(GetRecordPtr^).KeUserCallbackDispatcher := val;
end;
function ___KDHELP__Wrapper.getKeUserCallbackDispatcher : DWORD;
begin
result := _KDHELP(GetRecordPtr^).KeUserCallbackDispatcher;
end;
function ___LOADED_IMAGE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___LOADED_IMAGE__Wrapper.sethFile(const val : THandle);
begin
_LOADED_IMAGE(GetRecordPtr^).hFile := val;
end;
function ___LOADED_IMAGE__Wrapper.gethFile : THandle;
begin
result := _LOADED_IMAGE(GetRecordPtr^).hFile;
end;
procedure ___LOADED_IMAGE__Wrapper.setNumberOfSections(const val : ULONG);
begin
_LOADED_IMAGE(GetRecordPtr^).NumberOfSections := val;
end;
function ___LOADED_IMAGE__Wrapper.getNumberOfSections : ULONG;
begin
result := _LOADED_IMAGE(GetRecordPtr^).NumberOfSections;
end;
procedure ___LOADED_IMAGE__Wrapper.setCharacteristics(const val : ULONG);
begin
_LOADED_IMAGE(GetRecordPtr^).Characteristics := val;
end;
function ___LOADED_IMAGE__Wrapper.getCharacteristics : ULONG;
begin
result := _LOADED_IMAGE(GetRecordPtr^).Characteristics;
end;
procedure ___LOADED_IMAGE__Wrapper.setfSystemImage(const val : ByteBool);
begin
_LOADED_IMAGE(GetRecordPtr^).fSystemImage := val;
end;
function ___LOADED_IMAGE__Wrapper.getfSystemImage : ByteBool;
begin
result := _LOADED_IMAGE(GetRecordPtr^).fSystemImage;
end;
procedure ___LOADED_IMAGE__Wrapper.setfDOSImage(const val : ByteBool);
begin
_LOADED_IMAGE(GetRecordPtr^).fDOSImage := val;
end;
function ___LOADED_IMAGE__Wrapper.getfDOSImage : ByteBool;
begin
result := _LOADED_IMAGE(GetRecordPtr^).fDOSImage;
end;
procedure ___LOADED_IMAGE__Wrapper.setSizeOfImage(const val : ULONG);
begin
_LOADED_IMAGE(GetRecordPtr^).SizeOfImage := val;
end;
function ___LOADED_IMAGE__Wrapper.getSizeOfImage : ULONG;
begin
result := _LOADED_IMAGE(GetRecordPtr^).SizeOfImage;
end;
function ___tagADDRESS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___tagADDRESS__Wrapper.setOffset(const val : DWORD);
begin
_tagADDRESS(GetRecordPtr^).Offset := val;
end;
function ___tagADDRESS__Wrapper.getOffset : DWORD;
begin
result := _tagADDRESS(GetRecordPtr^).Offset;
end;
procedure ___tagADDRESS__Wrapper.setSegment(const val : Word);
begin
_tagADDRESS(GetRecordPtr^).Segment := val;
end;
function ___tagADDRESS__Wrapper.getSegment : Word;
begin
result := _tagADDRESS(GetRecordPtr^).Segment;
end;
procedure ___tagADDRESS__Wrapper.setMode(const val : TAddressMode);
begin
_tagADDRESS(GetRecordPtr^).Mode := val;
end;
function ___tagADDRESS__Wrapper.getMode : TAddressMode;
begin
result := _tagADDRESS(GetRecordPtr^).Mode;
end;
function ___tagSTACKFRAME__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___tagSTACKFRAME__Wrapper.set_Far(const val : Bool);
begin
_tagSTACKFRAME(GetRecordPtr^)._Far := val;
end;
function ___tagSTACKFRAME__Wrapper.get_Far : Bool;
begin
result := _tagSTACKFRAME(GetRecordPtr^)._Far;
end;
procedure ___tagSTACKFRAME__Wrapper.set_Virtual(const val : Bool);
begin
_tagSTACKFRAME(GetRecordPtr^)._Virtual := val;
end;
function ___tagSTACKFRAME__Wrapper.get_Virtual : Bool;
begin
result := _tagSTACKFRAME(GetRecordPtr^)._Virtual;
end;
function __ADDRESS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ADDRESS__Wrapper.setOffset(const val : DWORD);
begin
ADDRESS(GetRecordPtr^).Offset := val;
end;
function __ADDRESS__Wrapper.getOffset : DWORD;
begin
result := ADDRESS(GetRecordPtr^).Offset;
end;
procedure __ADDRESS__Wrapper.setSegment(const val : Word);
begin
ADDRESS(GetRecordPtr^).Segment := val;
end;
function __ADDRESS__Wrapper.getSegment : Word;
begin
result := ADDRESS(GetRecordPtr^).Segment;
end;
procedure __ADDRESS__Wrapper.setMode(const val : TAddressMode);
begin
ADDRESS(GetRecordPtr^).Mode := val;
end;
function __ADDRESS__Wrapper.getMode : TAddressMode;
begin
result := ADDRESS(GetRecordPtr^).Mode;
end;
function __API_VERSION__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __API_VERSION__Wrapper.setMajorVersion(const val : Word);
begin
API_VERSION(GetRecordPtr^).MajorVersion := val;
end;
function __API_VERSION__Wrapper.getMajorVersion : Word;
begin
result := API_VERSION(GetRecordPtr^).MajorVersion;
end;
procedure __API_VERSION__Wrapper.setMinorVersion(const val : Word);
begin
API_VERSION(GetRecordPtr^).MinorVersion := val;
end;
function __API_VERSION__Wrapper.getMinorVersion : Word;
begin
result := API_VERSION(GetRecordPtr^).MinorVersion;
end;
procedure __API_VERSION__Wrapper.setRevision(const val : Word);
begin
API_VERSION(GetRecordPtr^).Revision := val;
end;
function __API_VERSION__Wrapper.getRevision : Word;
begin
result := API_VERSION(GetRecordPtr^).Revision;
end;
procedure __API_VERSION__Wrapper.setReserved(const val : Word);
begin
API_VERSION(GetRecordPtr^).Reserved := val;
end;
function __API_VERSION__Wrapper.getReserved : Word;
begin
result := API_VERSION(GetRecordPtr^).Reserved;
end;
function __IMAGE_DEBUG_INFORMATION__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __IMAGE_DEBUG_INFORMATION__Wrapper.setSize(const val : DWORD);
begin
IMAGE_DEBUG_INFORMATION(GetRecordPtr^).Size := val;
end;
function __IMAGE_DEBUG_INFORMATION__Wrapper.getSize : DWORD;
begin
result := IMAGE_DEBUG_INFORMATION(GetRecordPtr^).Size;
end;
procedure __IMAGE_DEBUG_INFORMATION__Wrapper.setMachine(const val : Word);
begin
IMAGE_DEBUG_INFORMATION(GetRecordPtr^).Machine := val;
end;
function __IMAGE_DEBUG_INFORMATION__Wrapper.getMachine : Word;
begin
result := IMAGE_DEBUG_INFORMATION(GetRecordPtr^).Machine;
end;
procedure __IMAGE_DEBUG_INFORMATION__Wrapper.setCharacteristics(const val : Word);
begin
IMAGE_DEBUG_INFORMATION(GetRecordPtr^).Characteristics := val;
end;
function __IMAGE_DEBUG_INFORMATION__Wrapper.getCharacteristics : Word;
begin
result := IMAGE_DEBUG_INFORMATION(GetRecordPtr^).Characteristics;
end;
procedure __IMAGE_DEBUG_INFORMATION__Wrapper.setCheckSum(const val : DWORD);
begin
IMAGE_DEBUG_INFORMATION(GetRecordPtr^).CheckSum := val;
end;
function __IMAGE_DEBUG_INFORMATION__Wrapper.getCheckSum : DWORD;
begin
result := IMAGE_DEBUG_INFORMATION(GetRecordPtr^).CheckSum;
end;
procedure __IMAGE_DEBUG_INFORMATION__Wrapper.setImageBase(const val : DWORD);
begin
IMAGE_DEBUG_INFORMATION(GetRecordPtr^).ImageBase := val;
end;
function __IMAGE_DEBUG_INFORMATION__Wrapper.getImageBase : DWORD;
begin
result := IMAGE_DEBUG_INFORMATION(GetRecordPtr^).ImageBase;
end;
procedure __IMAGE_DEBUG_INFORMATION__Wrapper.setSizeOfImage(const val : DWORD);
begin
IMAGE_DEBUG_INFORMATION(GetRecordPtr^).SizeOfImage := val;
end;
function __IMAGE_DEBUG_INFORMATION__Wrapper.getSizeOfImage : DWORD;
begin
result := IMAGE_DEBUG_INFORMATION(GetRecordPtr^).SizeOfImage;
end;
procedure __IMAGE_DEBUG_INFORMATION__Wrapper.setNumberOfSections(const val : DWORD);
begin
IMAGE_DEBUG_INFORMATION(GetRecordPtr^).NumberOfSections := val;
end;
function __IMAGE_DEBUG_INFORMATION__Wrapper.getNumberOfSections : DWORD;
begin
result := IMAGE_DEBUG_INFORMATION(GetRecordPtr^).NumberOfSections;
end;
procedure __IMAGE_DEBUG_INFORMATION__Wrapper.setExportedNamesSize(const val : DWORD);
begin
IMAGE_DEBUG_INFORMATION(GetRecordPtr^).ExportedNamesSize := val;
end;
function __IMAGE_DEBUG_INFORMATION__Wrapper.getExportedNamesSize : DWORD;
begin
result := IMAGE_DEBUG_INFORMATION(GetRecordPtr^).ExportedNamesSize;
end;
procedure __IMAGE_DEBUG_INFORMATION__Wrapper.setNumberOfFunctionTableEntries(const val : DWORD);
begin
IMAGE_DEBUG_INFORMATION(GetRecordPtr^).NumberOfFunctionTableEntries := val;
end;
function __IMAGE_DEBUG_INFORMATION__Wrapper.getNumberOfFunctionTableEntries : DWORD;
begin
result := IMAGE_DEBUG_INFORMATION(GetRecordPtr^).NumberOfFunctionTableEntries;
end;
procedure __IMAGE_DEBUG_INFORMATION__Wrapper.setLowestFunctionStartingAddress(const val : DWORD);
begin
IMAGE_DEBUG_INFORMATION(GetRecordPtr^).LowestFunctionStartingAddress := val;
end;
function __IMAGE_DEBUG_INFORMATION__Wrapper.getLowestFunctionStartingAddress : DWORD;
begin
result := IMAGE_DEBUG_INFORMATION(GetRecordPtr^).LowestFunctionStartingAddress;
end;
procedure __IMAGE_DEBUG_INFORMATION__Wrapper.setHighestFunctionEndingAddress(const val : DWORD);
begin
IMAGE_DEBUG_INFORMATION(GetRecordPtr^).HighestFunctionEndingAddress := val;
end;
function __IMAGE_DEBUG_INFORMATION__Wrapper.getHighestFunctionEndingAddress : DWORD;
begin
result := IMAGE_DEBUG_INFORMATION(GetRecordPtr^).HighestFunctionEndingAddress;
end;
procedure __IMAGE_DEBUG_INFORMATION__Wrapper.setNumberOfFpoTableEntries(const val : DWORD);
begin
IMAGE_DEBUG_INFORMATION(GetRecordPtr^).NumberOfFpoTableEntries := val;
end;
function __IMAGE_DEBUG_INFORMATION__Wrapper.getNumberOfFpoTableEntries : DWORD;
begin
result := IMAGE_DEBUG_INFORMATION(GetRecordPtr^).NumberOfFpoTableEntries;
end;
procedure __IMAGE_DEBUG_INFORMATION__Wrapper.setSizeOfCoffSymbols(const val : DWORD);
begin
IMAGE_DEBUG_INFORMATION(GetRecordPtr^).SizeOfCoffSymbols := val;
end;
function __IMAGE_DEBUG_INFORMATION__Wrapper.getSizeOfCoffSymbols : DWORD;
begin
result := IMAGE_DEBUG_INFORMATION(GetRecordPtr^).SizeOfCoffSymbols;
end;
procedure __IMAGE_DEBUG_INFORMATION__Wrapper.setSizeOfCodeViewSymbols(const val : DWORD);
begin
IMAGE_DEBUG_INFORMATION(GetRecordPtr^).SizeOfCodeViewSymbols := val;
end;
function __IMAGE_DEBUG_INFORMATION__Wrapper.getSizeOfCodeViewSymbols : DWORD;
begin
result := IMAGE_DEBUG_INFORMATION(GetRecordPtr^).SizeOfCodeViewSymbols;
end;
procedure __IMAGE_DEBUG_INFORMATION__Wrapper.setTimeDateStamp(const val : DWORD);
begin
IMAGE_DEBUG_INFORMATION(GetRecordPtr^).TimeDateStamp := val;
end;
function __IMAGE_DEBUG_INFORMATION__Wrapper.getTimeDateStamp : DWORD;
begin
result := IMAGE_DEBUG_INFORMATION(GetRecordPtr^).TimeDateStamp;
end;
procedure __IMAGE_DEBUG_INFORMATION__Wrapper.setRomImage(const val : Bool);
begin
IMAGE_DEBUG_INFORMATION(GetRecordPtr^).RomImage := val;
end;
function __IMAGE_DEBUG_INFORMATION__Wrapper.getRomImage : Bool;
begin
result := IMAGE_DEBUG_INFORMATION(GetRecordPtr^).RomImage;
end;
procedure __IMAGE_DEBUG_INFORMATION__Wrapper.setNumberOfDebugDirectories(const val : DWORD);
begin
IMAGE_DEBUG_INFORMATION(GetRecordPtr^).NumberOfDebugDirectories := val;
end;
function __IMAGE_DEBUG_INFORMATION__Wrapper.getNumberOfDebugDirectories : DWORD;
begin
result := IMAGE_DEBUG_INFORMATION(GetRecordPtr^).NumberOfDebugDirectories;
end;
function __IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper.setSizeOfStruct(const val : DWORD);
begin
IMAGEHLP_DEFERRED_SYMBOL_LOAD(GetRecordPtr^).SizeOfStruct := val;
end;
function __IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper.getSizeOfStruct : DWORD;
begin
result := IMAGEHLP_DEFERRED_SYMBOL_LOAD(GetRecordPtr^).SizeOfStruct;
end;
procedure __IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper.setBaseOfImage(const val : DWORD);
begin
IMAGEHLP_DEFERRED_SYMBOL_LOAD(GetRecordPtr^).BaseOfImage := val;
end;
function __IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper.getBaseOfImage : DWORD;
begin
result := IMAGEHLP_DEFERRED_SYMBOL_LOAD(GetRecordPtr^).BaseOfImage;
end;
procedure __IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper.setCheckSum(const val : DWORD);
begin
IMAGEHLP_DEFERRED_SYMBOL_LOAD(GetRecordPtr^).CheckSum := val;
end;
function __IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper.getCheckSum : DWORD;
begin
result := IMAGEHLP_DEFERRED_SYMBOL_LOAD(GetRecordPtr^).CheckSum;
end;
procedure __IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper.setTimeDateStamp(const val : DWORD);
begin
IMAGEHLP_DEFERRED_SYMBOL_LOAD(GetRecordPtr^).TimeDateStamp := val;
end;
function __IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper.getTimeDateStamp : DWORD;
begin
result := IMAGEHLP_DEFERRED_SYMBOL_LOAD(GetRecordPtr^).TimeDateStamp;
end;
function __IMAGEHLP_DUPLICATE_SYMBOL__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __IMAGEHLP_DUPLICATE_SYMBOL__Wrapper.setSizeOfStruct(const val : DWORD);
begin
IMAGEHLP_DUPLICATE_SYMBOL(GetRecordPtr^).SizeOfStruct := val;
end;
function __IMAGEHLP_DUPLICATE_SYMBOL__Wrapper.getSizeOfStruct : DWORD;
begin
result := IMAGEHLP_DUPLICATE_SYMBOL(GetRecordPtr^).SizeOfStruct;
end;
procedure __IMAGEHLP_DUPLICATE_SYMBOL__Wrapper.setNumberOfDups(const val : DWORD);
begin
IMAGEHLP_DUPLICATE_SYMBOL(GetRecordPtr^).NumberOfDups := val;
end;
function __IMAGEHLP_DUPLICATE_SYMBOL__Wrapper.getNumberOfDups : DWORD;
begin
result := IMAGEHLP_DUPLICATE_SYMBOL(GetRecordPtr^).NumberOfDups;
end;
procedure __IMAGEHLP_DUPLICATE_SYMBOL__Wrapper.setSelectedSymbol(const val : ULONG);
begin
IMAGEHLP_DUPLICATE_SYMBOL(GetRecordPtr^).SelectedSymbol := val;
end;
function __IMAGEHLP_DUPLICATE_SYMBOL__Wrapper.getSelectedSymbol : ULONG;
begin
result := IMAGEHLP_DUPLICATE_SYMBOL(GetRecordPtr^).SelectedSymbol;
end;
function __IMAGEHLP_MODULE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __IMAGEHLP_MODULE__Wrapper.setSizeOfStruct(const val : DWORD);
begin
IMAGEHLP_MODULE(GetRecordPtr^).SizeOfStruct := val;
end;
function __IMAGEHLP_MODULE__Wrapper.getSizeOfStruct : DWORD;
begin
result := IMAGEHLP_MODULE(GetRecordPtr^).SizeOfStruct;
end;
procedure __IMAGEHLP_MODULE__Wrapper.setBaseOfImage(const val : DWORD);
begin
IMAGEHLP_MODULE(GetRecordPtr^).BaseOfImage := val;
end;
function __IMAGEHLP_MODULE__Wrapper.getBaseOfImage : DWORD;
begin
result := IMAGEHLP_MODULE(GetRecordPtr^).BaseOfImage;
end;
procedure __IMAGEHLP_MODULE__Wrapper.setImageSize(const val : DWORD);
begin
IMAGEHLP_MODULE(GetRecordPtr^).ImageSize := val;
end;
function __IMAGEHLP_MODULE__Wrapper.getImageSize : DWORD;
begin
result := IMAGEHLP_MODULE(GetRecordPtr^).ImageSize;
end;
procedure __IMAGEHLP_MODULE__Wrapper.setTimeDateStamp(const val : DWORD);
begin
IMAGEHLP_MODULE(GetRecordPtr^).TimeDateStamp := val;
end;
function __IMAGEHLP_MODULE__Wrapper.getTimeDateStamp : DWORD;
begin
result := IMAGEHLP_MODULE(GetRecordPtr^).TimeDateStamp;
end;
procedure __IMAGEHLP_MODULE__Wrapper.setCheckSum(const val : DWORD);
begin
IMAGEHLP_MODULE(GetRecordPtr^).CheckSum := val;
end;
function __IMAGEHLP_MODULE__Wrapper.getCheckSum : DWORD;
begin
result := IMAGEHLP_MODULE(GetRecordPtr^).CheckSum;
end;
procedure __IMAGEHLP_MODULE__Wrapper.setNumSyms(const val : DWORD);
begin
IMAGEHLP_MODULE(GetRecordPtr^).NumSyms := val;
end;
function __IMAGEHLP_MODULE__Wrapper.getNumSyms : DWORD;
begin
result := IMAGEHLP_MODULE(GetRecordPtr^).NumSyms;
end;
procedure __IMAGEHLP_MODULE__Wrapper.setSymType(const val : TSymType);
begin
IMAGEHLP_MODULE(GetRecordPtr^).SymType := val;
end;
function __IMAGEHLP_MODULE__Wrapper.getSymType : TSymType;
begin
result := IMAGEHLP_MODULE(GetRecordPtr^).SymType;
end;
function __IMAGEHLP_SYMBOL__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __IMAGEHLP_SYMBOL__Wrapper.setSizeOfStruct(const val : DWORD);
begin
IMAGEHLP_SYMBOL(GetRecordPtr^).SizeOfStruct := val;
end;
function __IMAGEHLP_SYMBOL__Wrapper.getSizeOfStruct : DWORD;
begin
result := IMAGEHLP_SYMBOL(GetRecordPtr^).SizeOfStruct;
end;
procedure __IMAGEHLP_SYMBOL__Wrapper.setADDRESS(const val : DWORD);
begin
IMAGEHLP_SYMBOL(GetRecordPtr^).ADDRESS := val;
end;
function __IMAGEHLP_SYMBOL__Wrapper.getADDRESS : DWORD;
begin
result := IMAGEHLP_SYMBOL(GetRecordPtr^).ADDRESS;
end;
procedure __IMAGEHLP_SYMBOL__Wrapper.setSize(const val : DWORD);
begin
IMAGEHLP_SYMBOL(GetRecordPtr^).Size := val;
end;
function __IMAGEHLP_SYMBOL__Wrapper.getSize : DWORD;
begin
result := IMAGEHLP_SYMBOL(GetRecordPtr^).Size;
end;
procedure __IMAGEHLP_SYMBOL__Wrapper.setFlags(const val : DWORD);
begin
IMAGEHLP_SYMBOL(GetRecordPtr^).Flags := val;
end;
function __IMAGEHLP_SYMBOL__Wrapper.getFlags : DWORD;
begin
result := IMAGEHLP_SYMBOL(GetRecordPtr^).Flags;
end;
procedure __IMAGEHLP_SYMBOL__Wrapper.setMaxNameLength(const val : DWORD);
begin
IMAGEHLP_SYMBOL(GetRecordPtr^).MaxNameLength := val;
end;
function __IMAGEHLP_SYMBOL__Wrapper.getMaxNameLength : DWORD;
begin
result := IMAGEHLP_SYMBOL(GetRecordPtr^).MaxNameLength;
end;
function __KDHELP__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __KDHELP__Wrapper.setThread(const val : DWORD);
begin
KDHELP(GetRecordPtr^).Thread := val;
end;
function __KDHELP__Wrapper.getThread : DWORD;
begin
result := KDHELP(GetRecordPtr^).Thread;
end;
procedure __KDHELP__Wrapper.setThCallbackStack(const val : DWORD);
begin
KDHELP(GetRecordPtr^).ThCallbackStack := val;
end;
function __KDHELP__Wrapper.getThCallbackStack : DWORD;
begin
result := KDHELP(GetRecordPtr^).ThCallbackStack;
end;
procedure __KDHELP__Wrapper.setNextCallback(const val : DWORD);
begin
KDHELP(GetRecordPtr^).NextCallback := val;
end;
function __KDHELP__Wrapper.getNextCallback : DWORD;
begin
result := KDHELP(GetRecordPtr^).NextCallback;
end;
procedure __KDHELP__Wrapper.setFramePointer(const val : DWORD);
begin
KDHELP(GetRecordPtr^).FramePointer := val;
end;
function __KDHELP__Wrapper.getFramePointer : DWORD;
begin
result := KDHELP(GetRecordPtr^).FramePointer;
end;
procedure __KDHELP__Wrapper.setKiCallUserMode(const val : DWORD);
begin
KDHELP(GetRecordPtr^).KiCallUserMode := val;
end;
function __KDHELP__Wrapper.getKiCallUserMode : DWORD;
begin
result := KDHELP(GetRecordPtr^).KiCallUserMode;
end;
procedure __KDHELP__Wrapper.setKeUserCallbackDispatcher(const val : DWORD);
begin
KDHELP(GetRecordPtr^).KeUserCallbackDispatcher := val;
end;
function __KDHELP__Wrapper.getKeUserCallbackDispatcher : DWORD;
begin
result := KDHELP(GetRecordPtr^).KeUserCallbackDispatcher;
end;
function __LOADED_IMAGE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __LOADED_IMAGE__Wrapper.sethFile(const val : THandle);
begin
LOADED_IMAGE(GetRecordPtr^).hFile := val;
end;
function __LOADED_IMAGE__Wrapper.gethFile : THandle;
begin
result := LOADED_IMAGE(GetRecordPtr^).hFile;
end;
procedure __LOADED_IMAGE__Wrapper.setNumberOfSections(const val : ULONG);
begin
LOADED_IMAGE(GetRecordPtr^).NumberOfSections := val;
end;
function __LOADED_IMAGE__Wrapper.getNumberOfSections : ULONG;
begin
result := LOADED_IMAGE(GetRecordPtr^).NumberOfSections;
end;
procedure __LOADED_IMAGE__Wrapper.setCharacteristics(const val : ULONG);
begin
LOADED_IMAGE(GetRecordPtr^).Characteristics := val;
end;
function __LOADED_IMAGE__Wrapper.getCharacteristics : ULONG;
begin
result := LOADED_IMAGE(GetRecordPtr^).Characteristics;
end;
procedure __LOADED_IMAGE__Wrapper.setfSystemImage(const val : ByteBool);
begin
LOADED_IMAGE(GetRecordPtr^).fSystemImage := val;
end;
function __LOADED_IMAGE__Wrapper.getfSystemImage : ByteBool;
begin
result := LOADED_IMAGE(GetRecordPtr^).fSystemImage;
end;
procedure __LOADED_IMAGE__Wrapper.setfDOSImage(const val : ByteBool);
begin
LOADED_IMAGE(GetRecordPtr^).fDOSImage := val;
end;
function __LOADED_IMAGE__Wrapper.getfDOSImage : ByteBool;
begin
result := LOADED_IMAGE(GetRecordPtr^).fDOSImage;
end;
procedure __LOADED_IMAGE__Wrapper.setSizeOfImage(const val : ULONG);
begin
LOADED_IMAGE(GetRecordPtr^).SizeOfImage := val;
end;
function __LOADED_IMAGE__Wrapper.getSizeOfImage : ULONG;
begin
result := LOADED_IMAGE(GetRecordPtr^).SizeOfImage;
end;
function __LoadedImage__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __LoadedImage__Wrapper.sethFile(const val : THandle);
begin
LoadedImage(GetRecordPtr^).hFile := val;
end;
function __LoadedImage__Wrapper.gethFile : THandle;
begin
result := LoadedImage(GetRecordPtr^).hFile;
end;
procedure __LoadedImage__Wrapper.setNumberOfSections(const val : ULONG);
begin
LoadedImage(GetRecordPtr^).NumberOfSections := val;
end;
function __LoadedImage__Wrapper.getNumberOfSections : ULONG;
begin
result := LoadedImage(GetRecordPtr^).NumberOfSections;
end;
procedure __LoadedImage__Wrapper.setCharacteristics(const val : ULONG);
begin
LoadedImage(GetRecordPtr^).Characteristics := val;
end;
function __LoadedImage__Wrapper.getCharacteristics : ULONG;
begin
result := LoadedImage(GetRecordPtr^).Characteristics;
end;
procedure __LoadedImage__Wrapper.setfSystemImage(const val : ByteBool);
begin
LoadedImage(GetRecordPtr^).fSystemImage := val;
end;
function __LoadedImage__Wrapper.getfSystemImage : ByteBool;
begin
result := LoadedImage(GetRecordPtr^).fSystemImage;
end;
procedure __LoadedImage__Wrapper.setfDOSImage(const val : ByteBool);
begin
LoadedImage(GetRecordPtr^).fDOSImage := val;
end;
function __LoadedImage__Wrapper.getfDOSImage : ByteBool;
begin
result := LoadedImage(GetRecordPtr^).fDOSImage;
end;
procedure __LoadedImage__Wrapper.setSizeOfImage(const val : ULONG);
begin
LoadedImage(GetRecordPtr^).SizeOfImage := val;
end;
function __LoadedImage__Wrapper.getSizeOfImage : ULONG;
begin
result := LoadedImage(GetRecordPtr^).SizeOfImage;
end;
function __STACKFRAME__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __STACKFRAME__Wrapper.set_Far(const val : Bool);
begin
STACKFRAME(GetRecordPtr^)._Far := val;
end;
function __STACKFRAME__Wrapper.get_Far : Bool;
begin
result := STACKFRAME(GetRecordPtr^)._Far;
end;
procedure __STACKFRAME__Wrapper.set_Virtual(const val : Bool);
begin
STACKFRAME(GetRecordPtr^)._Virtual := val;
end;
function __STACKFRAME__Wrapper.get_Virtual : Bool;
begin
result := STACKFRAME(GetRecordPtr^)._Virtual;
end;
function __TAddress__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TAddress__Wrapper.setOffset(const val : DWORD);
begin
TAddress(GetRecordPtr^).Offset := val;
end;
function __TAddress__Wrapper.getOffset : DWORD;
begin
result := TAddress(GetRecordPtr^).Offset;
end;
procedure __TAddress__Wrapper.setSegment(const val : Word);
begin
TAddress(GetRecordPtr^).Segment := val;
end;
function __TAddress__Wrapper.getSegment : Word;
begin
result := TAddress(GetRecordPtr^).Segment;
end;
procedure __TAddress__Wrapper.setMode(const val : TAddressMode);
begin
TAddress(GetRecordPtr^).Mode := val;
end;
function __TAddress__Wrapper.getMode : TAddressMode;
begin
result := TAddress(GetRecordPtr^).Mode;
end;
function __TApiVersion__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TApiVersion__Wrapper.setMajorVersion(const val : Word);
begin
TApiVersion(GetRecordPtr^).MajorVersion := val;
end;
function __TApiVersion__Wrapper.getMajorVersion : Word;
begin
result := TApiVersion(GetRecordPtr^).MajorVersion;
end;
procedure __TApiVersion__Wrapper.setMinorVersion(const val : Word);
begin
TApiVersion(GetRecordPtr^).MinorVersion := val;
end;
function __TApiVersion__Wrapper.getMinorVersion : Word;
begin
result := TApiVersion(GetRecordPtr^).MinorVersion;
end;
procedure __TApiVersion__Wrapper.setRevision(const val : Word);
begin
TApiVersion(GetRecordPtr^).Revision := val;
end;
function __TApiVersion__Wrapper.getRevision : Word;
begin
result := TApiVersion(GetRecordPtr^).Revision;
end;
procedure __TApiVersion__Wrapper.setReserved(const val : Word);
begin
TApiVersion(GetRecordPtr^).Reserved := val;
end;
function __TApiVersion__Wrapper.getReserved : Word;
begin
result := TApiVersion(GetRecordPtr^).Reserved;
end;
function __TImageDebugInformation__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TImageDebugInformation__Wrapper.setSize(const val : DWORD);
begin
TImageDebugInformation(GetRecordPtr^).Size := val;
end;
function __TImageDebugInformation__Wrapper.getSize : DWORD;
begin
result := TImageDebugInformation(GetRecordPtr^).Size;
end;
procedure __TImageDebugInformation__Wrapper.setMachine(const val : Word);
begin
TImageDebugInformation(GetRecordPtr^).Machine := val;
end;
function __TImageDebugInformation__Wrapper.getMachine : Word;
begin
result := TImageDebugInformation(GetRecordPtr^).Machine;
end;
procedure __TImageDebugInformation__Wrapper.setCharacteristics(const val : Word);
begin
TImageDebugInformation(GetRecordPtr^).Characteristics := val;
end;
function __TImageDebugInformation__Wrapper.getCharacteristics : Word;
begin
result := TImageDebugInformation(GetRecordPtr^).Characteristics;
end;
procedure __TImageDebugInformation__Wrapper.setCheckSum(const val : DWORD);
begin
TImageDebugInformation(GetRecordPtr^).CheckSum := val;
end;
function __TImageDebugInformation__Wrapper.getCheckSum : DWORD;
begin
result := TImageDebugInformation(GetRecordPtr^).CheckSum;
end;
procedure __TImageDebugInformation__Wrapper.setImageBase(const val : DWORD);
begin
TImageDebugInformation(GetRecordPtr^).ImageBase := val;
end;
function __TImageDebugInformation__Wrapper.getImageBase : DWORD;
begin
result := TImageDebugInformation(GetRecordPtr^).ImageBase;
end;
procedure __TImageDebugInformation__Wrapper.setSizeOfImage(const val : DWORD);
begin
TImageDebugInformation(GetRecordPtr^).SizeOfImage := val;
end;
function __TImageDebugInformation__Wrapper.getSizeOfImage : DWORD;
begin
result := TImageDebugInformation(GetRecordPtr^).SizeOfImage;
end;
procedure __TImageDebugInformation__Wrapper.setNumberOfSections(const val : DWORD);
begin
TImageDebugInformation(GetRecordPtr^).NumberOfSections := val;
end;
function __TImageDebugInformation__Wrapper.getNumberOfSections : DWORD;
begin
result := TImageDebugInformation(GetRecordPtr^).NumberOfSections;
end;
procedure __TImageDebugInformation__Wrapper.setExportedNamesSize(const val : DWORD);
begin
TImageDebugInformation(GetRecordPtr^).ExportedNamesSize := val;
end;
function __TImageDebugInformation__Wrapper.getExportedNamesSize : DWORD;
begin
result := TImageDebugInformation(GetRecordPtr^).ExportedNamesSize;
end;
procedure __TImageDebugInformation__Wrapper.setNumberOfFunctionTableEntries(const val : DWORD);
begin
TImageDebugInformation(GetRecordPtr^).NumberOfFunctionTableEntries := val;
end;
function __TImageDebugInformation__Wrapper.getNumberOfFunctionTableEntries : DWORD;
begin
result := TImageDebugInformation(GetRecordPtr^).NumberOfFunctionTableEntries;
end;
procedure __TImageDebugInformation__Wrapper.setLowestFunctionStartingAddress(const val : DWORD);
begin
TImageDebugInformation(GetRecordPtr^).LowestFunctionStartingAddress := val;
end;
function __TImageDebugInformation__Wrapper.getLowestFunctionStartingAddress : DWORD;
begin
result := TImageDebugInformation(GetRecordPtr^).LowestFunctionStartingAddress;
end;
procedure __TImageDebugInformation__Wrapper.setHighestFunctionEndingAddress(const val : DWORD);
begin
TImageDebugInformation(GetRecordPtr^).HighestFunctionEndingAddress := val;
end;
function __TImageDebugInformation__Wrapper.getHighestFunctionEndingAddress : DWORD;
begin
result := TImageDebugInformation(GetRecordPtr^).HighestFunctionEndingAddress;
end;
procedure __TImageDebugInformation__Wrapper.setNumberOfFpoTableEntries(const val : DWORD);
begin
TImageDebugInformation(GetRecordPtr^).NumberOfFpoTableEntries := val;
end;
function __TImageDebugInformation__Wrapper.getNumberOfFpoTableEntries : DWORD;
begin
result := TImageDebugInformation(GetRecordPtr^).NumberOfFpoTableEntries;
end;
procedure __TImageDebugInformation__Wrapper.setSizeOfCoffSymbols(const val : DWORD);
begin
TImageDebugInformation(GetRecordPtr^).SizeOfCoffSymbols := val;
end;
function __TImageDebugInformation__Wrapper.getSizeOfCoffSymbols : DWORD;
begin
result := TImageDebugInformation(GetRecordPtr^).SizeOfCoffSymbols;
end;
procedure __TImageDebugInformation__Wrapper.setSizeOfCodeViewSymbols(const val : DWORD);
begin
TImageDebugInformation(GetRecordPtr^).SizeOfCodeViewSymbols := val;
end;
function __TImageDebugInformation__Wrapper.getSizeOfCodeViewSymbols : DWORD;
begin
result := TImageDebugInformation(GetRecordPtr^).SizeOfCodeViewSymbols;
end;
procedure __TImageDebugInformation__Wrapper.setTimeDateStamp(const val : DWORD);
begin
TImageDebugInformation(GetRecordPtr^).TimeDateStamp := val;
end;
function __TImageDebugInformation__Wrapper.getTimeDateStamp : DWORD;
begin
result := TImageDebugInformation(GetRecordPtr^).TimeDateStamp;
end;
procedure __TImageDebugInformation__Wrapper.setRomImage(const val : Bool);
begin
TImageDebugInformation(GetRecordPtr^).RomImage := val;
end;
function __TImageDebugInformation__Wrapper.getRomImage : Bool;
begin
result := TImageDebugInformation(GetRecordPtr^).RomImage;
end;
procedure __TImageDebugInformation__Wrapper.setNumberOfDebugDirectories(const val : DWORD);
begin
TImageDebugInformation(GetRecordPtr^).NumberOfDebugDirectories := val;
end;
function __TImageDebugInformation__Wrapper.getNumberOfDebugDirectories : DWORD;
begin
result := TImageDebugInformation(GetRecordPtr^).NumberOfDebugDirectories;
end;
function __TImagehlpDeferredSymbolLoad__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TImagehlpDeferredSymbolLoad__Wrapper.setSizeOfStruct(const val : DWORD);
begin
TImagehlpDeferredSymbolLoad(GetRecordPtr^).SizeOfStruct := val;
end;
function __TImagehlpDeferredSymbolLoad__Wrapper.getSizeOfStruct : DWORD;
begin
result := TImagehlpDeferredSymbolLoad(GetRecordPtr^).SizeOfStruct;
end;
procedure __TImagehlpDeferredSymbolLoad__Wrapper.setBaseOfImage(const val : DWORD);
begin
TImagehlpDeferredSymbolLoad(GetRecordPtr^).BaseOfImage := val;
end;
function __TImagehlpDeferredSymbolLoad__Wrapper.getBaseOfImage : DWORD;
begin
result := TImagehlpDeferredSymbolLoad(GetRecordPtr^).BaseOfImage;
end;
procedure __TImagehlpDeferredSymbolLoad__Wrapper.setCheckSum(const val : DWORD);
begin
TImagehlpDeferredSymbolLoad(GetRecordPtr^).CheckSum := val;
end;
function __TImagehlpDeferredSymbolLoad__Wrapper.getCheckSum : DWORD;
begin
result := TImagehlpDeferredSymbolLoad(GetRecordPtr^).CheckSum;
end;
procedure __TImagehlpDeferredSymbolLoad__Wrapper.setTimeDateStamp(const val : DWORD);
begin
TImagehlpDeferredSymbolLoad(GetRecordPtr^).TimeDateStamp := val;
end;
function __TImagehlpDeferredSymbolLoad__Wrapper.getTimeDateStamp : DWORD;
begin
result := TImagehlpDeferredSymbolLoad(GetRecordPtr^).TimeDateStamp;
end;
function __TImagehlpDuplicateSymbol__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TImagehlpDuplicateSymbol__Wrapper.setSizeOfStruct(const val : DWORD);
begin
TImagehlpDuplicateSymbol(GetRecordPtr^).SizeOfStruct := val;
end;
function __TImagehlpDuplicateSymbol__Wrapper.getSizeOfStruct : DWORD;
begin
result := TImagehlpDuplicateSymbol(GetRecordPtr^).SizeOfStruct;
end;
procedure __TImagehlpDuplicateSymbol__Wrapper.setNumberOfDups(const val : DWORD);
begin
TImagehlpDuplicateSymbol(GetRecordPtr^).NumberOfDups := val;
end;
function __TImagehlpDuplicateSymbol__Wrapper.getNumberOfDups : DWORD;
begin
result := TImagehlpDuplicateSymbol(GetRecordPtr^).NumberOfDups;
end;
procedure __TImagehlpDuplicateSymbol__Wrapper.setSelectedSymbol(const val : ULONG);
begin
TImagehlpDuplicateSymbol(GetRecordPtr^).SelectedSymbol := val;
end;
function __TImagehlpDuplicateSymbol__Wrapper.getSelectedSymbol : ULONG;
begin
result := TImagehlpDuplicateSymbol(GetRecordPtr^).SelectedSymbol;
end;
function __TImagehlpModule__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TImagehlpModule__Wrapper.setSizeOfStruct(const val : DWORD);
begin
TImagehlpModule(GetRecordPtr^).SizeOfStruct := val;
end;
function __TImagehlpModule__Wrapper.getSizeOfStruct : DWORD;
begin
result := TImagehlpModule(GetRecordPtr^).SizeOfStruct;
end;
procedure __TImagehlpModule__Wrapper.setBaseOfImage(const val : DWORD);
begin
TImagehlpModule(GetRecordPtr^).BaseOfImage := val;
end;
function __TImagehlpModule__Wrapper.getBaseOfImage : DWORD;
begin
result := TImagehlpModule(GetRecordPtr^).BaseOfImage;
end;
procedure __TImagehlpModule__Wrapper.setImageSize(const val : DWORD);
begin
TImagehlpModule(GetRecordPtr^).ImageSize := val;
end;
function __TImagehlpModule__Wrapper.getImageSize : DWORD;
begin
result := TImagehlpModule(GetRecordPtr^).ImageSize;
end;
procedure __TImagehlpModule__Wrapper.setTimeDateStamp(const val : DWORD);
begin
TImagehlpModule(GetRecordPtr^).TimeDateStamp := val;
end;
function __TImagehlpModule__Wrapper.getTimeDateStamp : DWORD;
begin
result := TImagehlpModule(GetRecordPtr^).TimeDateStamp;
end;
procedure __TImagehlpModule__Wrapper.setCheckSum(const val : DWORD);
begin
TImagehlpModule(GetRecordPtr^).CheckSum := val;
end;
function __TImagehlpModule__Wrapper.getCheckSum : DWORD;
begin
result := TImagehlpModule(GetRecordPtr^).CheckSum;
end;
procedure __TImagehlpModule__Wrapper.setNumSyms(const val : DWORD);
begin
TImagehlpModule(GetRecordPtr^).NumSyms := val;
end;
function __TImagehlpModule__Wrapper.getNumSyms : DWORD;
begin
result := TImagehlpModule(GetRecordPtr^).NumSyms;
end;
procedure __TImagehlpModule__Wrapper.setSymType(const val : TSymType);
begin
TImagehlpModule(GetRecordPtr^).SymType := val;
end;
function __TImagehlpModule__Wrapper.getSymType : TSymType;
begin
result := TImagehlpModule(GetRecordPtr^).SymType;
end;
function __TImagehlpSymbol__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TImagehlpSymbol__Wrapper.setSizeOfStruct(const val : DWORD);
begin
TImagehlpSymbol(GetRecordPtr^).SizeOfStruct := val;
end;
function __TImagehlpSymbol__Wrapper.getSizeOfStruct : DWORD;
begin
result := TImagehlpSymbol(GetRecordPtr^).SizeOfStruct;
end;
procedure __TImagehlpSymbol__Wrapper.setADDRESS(const val : DWORD);
begin
TImagehlpSymbol(GetRecordPtr^).ADDRESS := val;
end;
function __TImagehlpSymbol__Wrapper.getADDRESS : DWORD;
begin
result := TImagehlpSymbol(GetRecordPtr^).ADDRESS;
end;
procedure __TImagehlpSymbol__Wrapper.setSize(const val : DWORD);
begin
TImagehlpSymbol(GetRecordPtr^).Size := val;
end;
function __TImagehlpSymbol__Wrapper.getSize : DWORD;
begin
result := TImagehlpSymbol(GetRecordPtr^).Size;
end;
procedure __TImagehlpSymbol__Wrapper.setFlags(const val : DWORD);
begin
TImagehlpSymbol(GetRecordPtr^).Flags := val;
end;
function __TImagehlpSymbol__Wrapper.getFlags : DWORD;
begin
result := TImagehlpSymbol(GetRecordPtr^).Flags;
end;
procedure __TImagehlpSymbol__Wrapper.setMaxNameLength(const val : DWORD);
begin
TImagehlpSymbol(GetRecordPtr^).MaxNameLength := val;
end;
function __TImagehlpSymbol__Wrapper.getMaxNameLength : DWORD;
begin
result := TImagehlpSymbol(GetRecordPtr^).MaxNameLength;
end;
function __TKdHelp__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TKdHelp__Wrapper.setThread(const val : DWORD);
begin
TKdHelp(GetRecordPtr^).Thread := val;
end;
function __TKdHelp__Wrapper.getThread : DWORD;
begin
result := TKdHelp(GetRecordPtr^).Thread;
end;
procedure __TKdHelp__Wrapper.setThCallbackStack(const val : DWORD);
begin
TKdHelp(GetRecordPtr^).ThCallbackStack := val;
end;
function __TKdHelp__Wrapper.getThCallbackStack : DWORD;
begin
result := TKdHelp(GetRecordPtr^).ThCallbackStack;
end;
procedure __TKdHelp__Wrapper.setNextCallback(const val : DWORD);
begin
TKdHelp(GetRecordPtr^).NextCallback := val;
end;
function __TKdHelp__Wrapper.getNextCallback : DWORD;
begin
result := TKdHelp(GetRecordPtr^).NextCallback;
end;
procedure __TKdHelp__Wrapper.setFramePointer(const val : DWORD);
begin
TKdHelp(GetRecordPtr^).FramePointer := val;
end;
function __TKdHelp__Wrapper.getFramePointer : DWORD;
begin
result := TKdHelp(GetRecordPtr^).FramePointer;
end;
procedure __TKdHelp__Wrapper.setKiCallUserMode(const val : DWORD);
begin
TKdHelp(GetRecordPtr^).KiCallUserMode := val;
end;
function __TKdHelp__Wrapper.getKiCallUserMode : DWORD;
begin
result := TKdHelp(GetRecordPtr^).KiCallUserMode;
end;
procedure __TKdHelp__Wrapper.setKeUserCallbackDispatcher(const val : DWORD);
begin
TKdHelp(GetRecordPtr^).KeUserCallbackDispatcher := val;
end;
function __TKdHelp__Wrapper.getKeUserCallbackDispatcher : DWORD;
begin
result := TKdHelp(GetRecordPtr^).KeUserCallbackDispatcher;
end;
function __TLoadedImage__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TLoadedImage__Wrapper.sethFile(const val : THandle);
begin
TLoadedImage(GetRecordPtr^).hFile := val;
end;
function __TLoadedImage__Wrapper.gethFile : THandle;
begin
result := TLoadedImage(GetRecordPtr^).hFile;
end;
procedure __TLoadedImage__Wrapper.setNumberOfSections(const val : ULONG);
begin
TLoadedImage(GetRecordPtr^).NumberOfSections := val;
end;
function __TLoadedImage__Wrapper.getNumberOfSections : ULONG;
begin
result := TLoadedImage(GetRecordPtr^).NumberOfSections;
end;
procedure __TLoadedImage__Wrapper.setCharacteristics(const val : ULONG);
begin
TLoadedImage(GetRecordPtr^).Characteristics := val;
end;
function __TLoadedImage__Wrapper.getCharacteristics : ULONG;
begin
result := TLoadedImage(GetRecordPtr^).Characteristics;
end;
procedure __TLoadedImage__Wrapper.setfSystemImage(const val : ByteBool);
begin
TLoadedImage(GetRecordPtr^).fSystemImage := val;
end;
function __TLoadedImage__Wrapper.getfSystemImage : ByteBool;
begin
result := TLoadedImage(GetRecordPtr^).fSystemImage;
end;
procedure __TLoadedImage__Wrapper.setfDOSImage(const val : ByteBool);
begin
TLoadedImage(GetRecordPtr^).fDOSImage := val;
end;
function __TLoadedImage__Wrapper.getfDOSImage : ByteBool;
begin
result := TLoadedImage(GetRecordPtr^).fDOSImage;
end;
procedure __TLoadedImage__Wrapper.setSizeOfImage(const val : ULONG);
begin
TLoadedImage(GetRecordPtr^).SizeOfImage := val;
end;
function __TLoadedImage__Wrapper.getSizeOfImage : ULONG;
begin
result := TLoadedImage(GetRecordPtr^).SizeOfImage;
end;
function __TStackFrame__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TStackFrame__Wrapper.set_Far(const val : Bool);
begin
TStackFrame(GetRecordPtr^)._Far := val;
end;
function __TStackFrame__Wrapper.get_Far : Bool;
begin
result := TStackFrame(GetRecordPtr^)._Far;
end;
procedure __TStackFrame__Wrapper.set_Virtual(const val : Bool);
begin
TStackFrame(GetRecordPtr^)._Virtual := val;
end;
function __TStackFrame__Wrapper.get_Virtual : Bool;
begin
result := TStackFrame(GetRecordPtr^)._Virtual;
end;
function __IMAGE_DEBUG_INFORMATION_ : IDispatch;
begin
  result := ___IMAGE_DEBUG_INFORMATION__Wrapper.Create;
end;
function __IMAGEHLP_DEFERRED_SYMBOL_LOAD_ : IDispatch;
begin
  result := ___IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper.Create;
end;
function __IMAGEHLP_DUPLICATE_SYMBOL_ : IDispatch;
begin
  result := ___IMAGEHLP_DUPLICATE_SYMBOL__Wrapper.Create;
end;
function __IMAGEHLP_MODULE_ : IDispatch;
begin
  result := ___IMAGEHLP_MODULE__Wrapper.Create;
end;
function __IMAGEHLP_SYMBOL_ : IDispatch;
begin
  result := ___IMAGEHLP_SYMBOL__Wrapper.Create;
end;
function __KDHELP_ : IDispatch;
begin
  result := ___KDHELP__Wrapper.Create;
end;
function __LOADED_IMAGE_ : IDispatch;
begin
  result := ___LOADED_IMAGE__Wrapper.Create;
end;
function __tagADDRESS_ : IDispatch;
begin
  result := ___tagADDRESS__Wrapper.Create;
end;
function __tagSTACKFRAME_ : IDispatch;
begin
  result := ___tagSTACKFRAME__Wrapper.Create;
end;
function _ADDRESS_ : IDispatch;
begin
  result := __ADDRESS__Wrapper.Create;
end;
function _API_VERSION_ : IDispatch;
begin
  result := __API_VERSION__Wrapper.Create;
end;
function _IMAGE_DEBUG_INFORMATION_ : IDispatch;
begin
  result := __IMAGE_DEBUG_INFORMATION__Wrapper.Create;
end;
function _IMAGEHLP_DEFERRED_SYMBOL_LOAD_ : IDispatch;
begin
  result := __IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper.Create;
end;
function _IMAGEHLP_DUPLICATE_SYMBOL_ : IDispatch;
begin
  result := __IMAGEHLP_DUPLICATE_SYMBOL__Wrapper.Create;
end;
function _IMAGEHLP_MODULE_ : IDispatch;
begin
  result := __IMAGEHLP_MODULE__Wrapper.Create;
end;
function _IMAGEHLP_SYMBOL_ : IDispatch;
begin
  result := __IMAGEHLP_SYMBOL__Wrapper.Create;
end;
function _KDHELP_ : IDispatch;
begin
  result := __KDHELP__Wrapper.Create;
end;
function _LOADED_IMAGE_ : IDispatch;
begin
  result := __LOADED_IMAGE__Wrapper.Create;
end;
function _LoadedImage_ : IDispatch;
begin
  result := __LoadedImage__Wrapper.Create;
end;
function _STACKFRAME_ : IDispatch;
begin
  result := __STACKFRAME__Wrapper.Create;
end;
function _TAddress_ : IDispatch;
begin
  result := __TAddress__Wrapper.Create;
end;
function _TApiVersion_ : IDispatch;
begin
  result := __TApiVersion__Wrapper.Create;
end;
function _TImageDebugInformation_ : IDispatch;
begin
  result := __TImageDebugInformation__Wrapper.Create;
end;
function _TImagehlpDeferredSymbolLoad_ : IDispatch;
begin
  result := __TImagehlpDeferredSymbolLoad__Wrapper.Create;
end;
function _TImagehlpDuplicateSymbol_ : IDispatch;
begin
  result := __TImagehlpDuplicateSymbol__Wrapper.Create;
end;
function _TImagehlpModule_ : IDispatch;
begin
  result := __TImagehlpModule__Wrapper.Create;
end;
function _TImagehlpSymbol_ : IDispatch;
begin
  result := __TImagehlpSymbol__Wrapper.Create;
end;
function _TKdHelp_ : IDispatch;
begin
  result := __TKdHelp__Wrapper.Create;
end;
function _TLoadedImage_ : IDispatch;
begin
  result := __TLoadedImage__Wrapper.Create;
end;
function _TStackFrame_ : IDispatch;
begin
  result := __TStackFrame__Wrapper.Create;
end;
function __TSystemTime__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSystemTime__Wrapper.setwYear(const val : Word);
begin
TSystemTime(GetRecordPtr^).wYear := val;
end;
function __TSystemTime__Wrapper.getwYear : Word;
begin
result := TSystemTime(GetRecordPtr^).wYear;
end;
procedure __TSystemTime__Wrapper.setwMonth(const val : Word);
begin
TSystemTime(GetRecordPtr^).wMonth := val;
end;
function __TSystemTime__Wrapper.getwMonth : Word;
begin
result := TSystemTime(GetRecordPtr^).wMonth;
end;
procedure __TSystemTime__Wrapper.setwDayOfWeek(const val : Word);
begin
TSystemTime(GetRecordPtr^).wDayOfWeek := val;
end;
function __TSystemTime__Wrapper.getwDayOfWeek : Word;
begin
result := TSystemTime(GetRecordPtr^).wDayOfWeek;
end;
procedure __TSystemTime__Wrapper.setwDay(const val : Word);
begin
TSystemTime(GetRecordPtr^).wDay := val;
end;
function __TSystemTime__Wrapper.getwDay : Word;
begin
result := TSystemTime(GetRecordPtr^).wDay;
end;
procedure __TSystemTime__Wrapper.setwHour(const val : Word);
begin
TSystemTime(GetRecordPtr^).wHour := val;
end;
function __TSystemTime__Wrapper.getwHour : Word;
begin
result := TSystemTime(GetRecordPtr^).wHour;
end;
procedure __TSystemTime__Wrapper.setwMinute(const val : Word);
begin
TSystemTime(GetRecordPtr^).wMinute := val;
end;
function __TSystemTime__Wrapper.getwMinute : Word;
begin
result := TSystemTime(GetRecordPtr^).wMinute;
end;
procedure __TSystemTime__Wrapper.setwSecond(const val : Word);
begin
TSystemTime(GetRecordPtr^).wSecond := val;
end;
function __TSystemTime__Wrapper.getwSecond : Word;
begin
result := TSystemTime(GetRecordPtr^).wSecond;
end;
procedure __TSystemTime__Wrapper.setwMilliseconds(const val : Word);
begin
TSystemTime(GetRecordPtr^).wMilliseconds := val;
end;
function __TSystemTime__Wrapper.getwMilliseconds : Word;
begin
result := TSystemTime(GetRecordPtr^).wMilliseconds;
end;
function ____TouchFileTimes__Wrapper(p0 : THandle;
const p1 : IDispatch): Bool;
var
__p1 : ^TSystemTime;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := TouchFileTimes(p0,__p1^);
end;

function ____SymGetModuleInfo__Wrapper(p0 : THandle;
p1 : DWORD;
const p2 : IDispatch): Bool;
var
__p2 : ^TImagehlpModule;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := SymGetModuleInfo(p0,p1,__p2^);
end;

function ____SymGetSymFromAddr__Wrapper(p0 : THandle;
p1 : DWORD;
p2 : PDWORD;
const p3 : IDispatch): Bool;
var
__p3 : ^TImagehlpSymbol;
__i3 : IDispatch;
begin
if p3 = nil then exit;
__p3 := (p3 as IDCRecordWrapper).GetRecordPtr;
result := SymGetSymFromAddr(p0,p1,p2,__p3^);
end;

function ____SymGetSymNext__Wrapper(p0 : THandle;
const p1 : IDispatch): Bool;
var
__p1 : ^TImagehlpSymbol;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := SymGetSymNext(p0,__p1^);
end;

function ____SymGetSymPrev__Wrapper(p0 : THandle;
const p1 : IDispatch): Bool;
var
__p1 : ^TImagehlpSymbol;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := SymGetSymPrev(p0,__p1^);
end;


type ___IMAGE_DEBUG_INFORMATION__Wrapper__ = class(___IMAGE_DEBUG_INFORMATION__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___IMAGE_DEBUG_INFORMATION__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_IMAGE_DEBUG_INFORMATIONToVariant(var R : _IMAGE_DEBUG_INFORMATION) : OleVariant;
var
__rw : ___IMAGE_DEBUG_INFORMATION__Wrapper__;
begin
__rw := ___IMAGE_DEBUG_INFORMATION__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_IMAGE_DEBUG_INFORMATION(const V : OleVariant) : _IMAGE_DEBUG_INFORMATION;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _IMAGE_DEBUG_INFORMATION((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper__ = class(___IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_IMAGEHLP_DEFERRED_SYMBOL_LOADToVariant(var R : _IMAGEHLP_DEFERRED_SYMBOL_LOAD) : OleVariant;
var
__rw : ___IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper__;
begin
__rw := ___IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_IMAGEHLP_DEFERRED_SYMBOL_LOAD(const V : OleVariant) : _IMAGEHLP_DEFERRED_SYMBOL_LOAD;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _IMAGEHLP_DEFERRED_SYMBOL_LOAD((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___IMAGEHLP_DUPLICATE_SYMBOL__Wrapper__ = class(___IMAGEHLP_DUPLICATE_SYMBOL__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___IMAGEHLP_DUPLICATE_SYMBOL__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_IMAGEHLP_DUPLICATE_SYMBOLToVariant(var R : _IMAGEHLP_DUPLICATE_SYMBOL) : OleVariant;
var
__rw : ___IMAGEHLP_DUPLICATE_SYMBOL__Wrapper__;
begin
__rw := ___IMAGEHLP_DUPLICATE_SYMBOL__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_IMAGEHLP_DUPLICATE_SYMBOL(const V : OleVariant) : _IMAGEHLP_DUPLICATE_SYMBOL;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _IMAGEHLP_DUPLICATE_SYMBOL((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___IMAGEHLP_MODULE__Wrapper__ = class(___IMAGEHLP_MODULE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___IMAGEHLP_MODULE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_IMAGEHLP_MODULEToVariant(var R : _IMAGEHLP_MODULE) : OleVariant;
var
__rw : ___IMAGEHLP_MODULE__Wrapper__;
begin
__rw := ___IMAGEHLP_MODULE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_IMAGEHLP_MODULE(const V : OleVariant) : _IMAGEHLP_MODULE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _IMAGEHLP_MODULE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___IMAGEHLP_SYMBOL__Wrapper__ = class(___IMAGEHLP_SYMBOL__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___IMAGEHLP_SYMBOL__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_IMAGEHLP_SYMBOLToVariant(var R : _IMAGEHLP_SYMBOL) : OleVariant;
var
__rw : ___IMAGEHLP_SYMBOL__Wrapper__;
begin
__rw := ___IMAGEHLP_SYMBOL__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_IMAGEHLP_SYMBOL(const V : OleVariant) : _IMAGEHLP_SYMBOL;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _IMAGEHLP_SYMBOL((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___KDHELP__Wrapper__ = class(___KDHELP__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___KDHELP__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_KDHELPToVariant(var R : _KDHELP) : OleVariant;
var
__rw : ___KDHELP__Wrapper__;
begin
__rw := ___KDHELP__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_KDHELP(const V : OleVariant) : _KDHELP;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _KDHELP((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___LOADED_IMAGE__Wrapper__ = class(___LOADED_IMAGE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___LOADED_IMAGE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_LOADED_IMAGEToVariant(var R : _LOADED_IMAGE) : OleVariant;
var
__rw : ___LOADED_IMAGE__Wrapper__;
begin
__rw := ___LOADED_IMAGE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_LOADED_IMAGE(const V : OleVariant) : _LOADED_IMAGE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _LOADED_IMAGE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___tagADDRESS__Wrapper__ = class(___tagADDRESS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___tagADDRESS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_tagADDRESSToVariant(var R : _tagADDRESS) : OleVariant;
var
__rw : ___tagADDRESS__Wrapper__;
begin
__rw := ___tagADDRESS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_tagADDRESS(const V : OleVariant) : _tagADDRESS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _tagADDRESS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___tagSTACKFRAME__Wrapper__ = class(___tagSTACKFRAME__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___tagSTACKFRAME__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_tagSTACKFRAMEToVariant(var R : _tagSTACKFRAME) : OleVariant;
var
__rw : ___tagSTACKFRAME__Wrapper__;
begin
__rw := ___tagSTACKFRAME__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_tagSTACKFRAME(const V : OleVariant) : _tagSTACKFRAME;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _tagSTACKFRAME((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ADDRESS__Wrapper__ = class(__ADDRESS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ADDRESS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertADDRESSToVariant(var R : ADDRESS) : OleVariant;
var
__rw : __ADDRESS__Wrapper__;
begin
__rw := __ADDRESS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToADDRESS(const V : OleVariant) : ADDRESS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ADDRESS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __API_VERSION__Wrapper__ = class(__API_VERSION__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __API_VERSION__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertAPI_VERSIONToVariant(var R : API_VERSION) : OleVariant;
var
__rw : __API_VERSION__Wrapper__;
begin
__rw := __API_VERSION__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToAPI_VERSION(const V : OleVariant) : API_VERSION;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := API_VERSION((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __IMAGE_DEBUG_INFORMATION__Wrapper__ = class(__IMAGE_DEBUG_INFORMATION__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __IMAGE_DEBUG_INFORMATION__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertIMAGE_DEBUG_INFORMATIONToVariant(var R : IMAGE_DEBUG_INFORMATION) : OleVariant;
var
__rw : __IMAGE_DEBUG_INFORMATION__Wrapper__;
begin
__rw := __IMAGE_DEBUG_INFORMATION__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToIMAGE_DEBUG_INFORMATION(const V : OleVariant) : IMAGE_DEBUG_INFORMATION;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := IMAGE_DEBUG_INFORMATION((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper__ = class(__IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertIMAGEHLP_DEFERRED_SYMBOL_LOADToVariant(var R : IMAGEHLP_DEFERRED_SYMBOL_LOAD) : OleVariant;
var
__rw : __IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper__;
begin
__rw := __IMAGEHLP_DEFERRED_SYMBOL_LOAD__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToIMAGEHLP_DEFERRED_SYMBOL_LOAD(const V : OleVariant) : IMAGEHLP_DEFERRED_SYMBOL_LOAD;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := IMAGEHLP_DEFERRED_SYMBOL_LOAD((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __IMAGEHLP_DUPLICATE_SYMBOL__Wrapper__ = class(__IMAGEHLP_DUPLICATE_SYMBOL__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __IMAGEHLP_DUPLICATE_SYMBOL__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertIMAGEHLP_DUPLICATE_SYMBOLToVariant(var R : IMAGEHLP_DUPLICATE_SYMBOL) : OleVariant;
var
__rw : __IMAGEHLP_DUPLICATE_SYMBOL__Wrapper__;
begin
__rw := __IMAGEHLP_DUPLICATE_SYMBOL__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToIMAGEHLP_DUPLICATE_SYMBOL(const V : OleVariant) : IMAGEHLP_DUPLICATE_SYMBOL;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := IMAGEHLP_DUPLICATE_SYMBOL((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __IMAGEHLP_MODULE__Wrapper__ = class(__IMAGEHLP_MODULE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __IMAGEHLP_MODULE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertIMAGEHLP_MODULEToVariant(var R : IMAGEHLP_MODULE) : OleVariant;
var
__rw : __IMAGEHLP_MODULE__Wrapper__;
begin
__rw := __IMAGEHLP_MODULE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToIMAGEHLP_MODULE(const V : OleVariant) : IMAGEHLP_MODULE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := IMAGEHLP_MODULE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __IMAGEHLP_SYMBOL__Wrapper__ = class(__IMAGEHLP_SYMBOL__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __IMAGEHLP_SYMBOL__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertIMAGEHLP_SYMBOLToVariant(var R : IMAGEHLP_SYMBOL) : OleVariant;
var
__rw : __IMAGEHLP_SYMBOL__Wrapper__;
begin
__rw := __IMAGEHLP_SYMBOL__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToIMAGEHLP_SYMBOL(const V : OleVariant) : IMAGEHLP_SYMBOL;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := IMAGEHLP_SYMBOL((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __KDHELP__Wrapper__ = class(__KDHELP__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __KDHELP__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertKDHELPToVariant(var R : KDHELP) : OleVariant;
var
__rw : __KDHELP__Wrapper__;
begin
__rw := __KDHELP__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToKDHELP(const V : OleVariant) : KDHELP;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := KDHELP((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __LOADED_IMAGE__Wrapper__ = class(__LOADED_IMAGE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __LOADED_IMAGE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertLOADED_IMAGEToVariant(var R : LOADED_IMAGE) : OleVariant;
var
__rw : __LOADED_IMAGE__Wrapper__;
begin
__rw := __LOADED_IMAGE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToLOADED_IMAGE(const V : OleVariant) : LOADED_IMAGE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := LOADED_IMAGE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __LoadedImage__Wrapper__ = class(__LoadedImage__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __LoadedImage__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertLoadedImageToVariant(var R : LoadedImage) : OleVariant;
var
__rw : __LoadedImage__Wrapper__;
begin
__rw := __LoadedImage__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToLoadedImage(const V : OleVariant) : LoadedImage;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := LoadedImage((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __STACKFRAME__Wrapper__ = class(__STACKFRAME__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __STACKFRAME__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSTACKFRAMEToVariant(var R : STACKFRAME) : OleVariant;
var
__rw : __STACKFRAME__Wrapper__;
begin
__rw := __STACKFRAME__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSTACKFRAME(const V : OleVariant) : STACKFRAME;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := STACKFRAME((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TAddress__Wrapper__ = class(__TAddress__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TAddress__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTAddressToVariant(var R : TAddress) : OleVariant;
var
__rw : __TAddress__Wrapper__;
begin
__rw := __TAddress__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTAddress(const V : OleVariant) : TAddress;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TAddress((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TApiVersion__Wrapper__ = class(__TApiVersion__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TApiVersion__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTApiVersionToVariant(var R : TApiVersion) : OleVariant;
var
__rw : __TApiVersion__Wrapper__;
begin
__rw := __TApiVersion__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTApiVersion(const V : OleVariant) : TApiVersion;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TApiVersion((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TImageDebugInformation__Wrapper__ = class(__TImageDebugInformation__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TImageDebugInformation__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTImageDebugInformationToVariant(var R : TImageDebugInformation) : OleVariant;
var
__rw : __TImageDebugInformation__Wrapper__;
begin
__rw := __TImageDebugInformation__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTImageDebugInformation(const V : OleVariant) : TImageDebugInformation;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TImageDebugInformation((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TImagehlpDeferredSymbolLoad__Wrapper__ = class(__TImagehlpDeferredSymbolLoad__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TImagehlpDeferredSymbolLoad__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTImagehlpDeferredSymbolLoadToVariant(var R : TImagehlpDeferredSymbolLoad) : OleVariant;
var
__rw : __TImagehlpDeferredSymbolLoad__Wrapper__;
begin
__rw := __TImagehlpDeferredSymbolLoad__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTImagehlpDeferredSymbolLoad(const V : OleVariant) : TImagehlpDeferredSymbolLoad;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TImagehlpDeferredSymbolLoad((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TImagehlpDuplicateSymbol__Wrapper__ = class(__TImagehlpDuplicateSymbol__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TImagehlpDuplicateSymbol__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTImagehlpDuplicateSymbolToVariant(var R : TImagehlpDuplicateSymbol) : OleVariant;
var
__rw : __TImagehlpDuplicateSymbol__Wrapper__;
begin
__rw := __TImagehlpDuplicateSymbol__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTImagehlpDuplicateSymbol(const V : OleVariant) : TImagehlpDuplicateSymbol;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TImagehlpDuplicateSymbol((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TImagehlpModule__Wrapper__ = class(__TImagehlpModule__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TImagehlpModule__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTImagehlpModuleToVariant(var R : TImagehlpModule) : OleVariant;
var
__rw : __TImagehlpModule__Wrapper__;
begin
__rw := __TImagehlpModule__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTImagehlpModule(const V : OleVariant) : TImagehlpModule;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TImagehlpModule((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TImagehlpSymbol__Wrapper__ = class(__TImagehlpSymbol__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TImagehlpSymbol__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTImagehlpSymbolToVariant(var R : TImagehlpSymbol) : OleVariant;
var
__rw : __TImagehlpSymbol__Wrapper__;
begin
__rw := __TImagehlpSymbol__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTImagehlpSymbol(const V : OleVariant) : TImagehlpSymbol;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TImagehlpSymbol((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TKdHelp__Wrapper__ = class(__TKdHelp__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TKdHelp__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTKdHelpToVariant(var R : TKdHelp) : OleVariant;
var
__rw : __TKdHelp__Wrapper__;
begin
__rw := __TKdHelp__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTKdHelp(const V : OleVariant) : TKdHelp;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TKdHelp((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TLoadedImage__Wrapper__ = class(__TLoadedImage__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TLoadedImage__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTLoadedImageToVariant(var R : TLoadedImage) : OleVariant;
var
__rw : __TLoadedImage__Wrapper__;
begin
__rw := __TLoadedImage__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTLoadedImage(const V : OleVariant) : TLoadedImage;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TLoadedImage((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TStackFrame__Wrapper__ = class(__TStackFrame__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TStackFrame__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTStackFrameToVariant(var R : TStackFrame) : OleVariant;
var
__rw : __TStackFrame__Wrapper__;
begin
__rw := __TStackFrame__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTStackFrame(const V : OleVariant) : TStackFrame;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TStackFrame((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSystemTime__Wrapper__ = class(__TSystemTime__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSystemTime__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSystemTimeToVariant(var R : TSystemTime) : OleVariant;
var
__rw : __TSystemTime__Wrapper__;
begin
__rw := __TSystemTime__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSystemTime(const V : OleVariant) : TSystemTime;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSystemTime((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..68] of string = (
'CHECKSUM_SUCCESS'
,'CHECKSUM_OPEN_FAILURE'
,'CHECKSUM_MAP_FAILURE'
,'CHECKSUM_MAPVIEW_FAILURE'
,'CHECKSUM_UNICODE_FAILURE'
,'SPLITSYM_REMOVE_PRIVATE'
,'SPLITSYM_EXTRACT_ALL'
,'BindOutOfMemory'
,'BindRvaToVaFailed'
,'BindNoRoomInImage'
,'BindImportModuleFailed'
,'BindImportProcedureFailed'
,'BindImportModule'
,'BindImportProcedure'
,'BindForwarder'
,'BindForwarderNOT'
,'BindImageModified'
,'BindExpandFileHeaders'
,'BindImageComplete'
,'BindMismatchedSymbols'
,'BindSymbolsNotUpdated'
,'BIND_NO_BOUND_IMPORTS'
,'BIND_NO_UPDATE'
,'BIND_ALL_IMAGES'
,'IMAGE_SEPARATION'
,'UNDNAME_COMPLETE'
,'UNDNAME_NO_LEADING_UNDERSCORES'
,'UNDNAME_NO_MS_KEYWORDS'
,'UNDNAME_NO_FUNCTION_RETURNS'
,'UNDNAME_NO_ALLOCATION_MODEL'
,'UNDNAME_NO_ALLOCATION_LANGUAGE'
,'UNDNAME_NO_MS_THISTYPE'
,'UNDNAME_NO_CV_THISTYPE'
,'UNDNAME_NO_THISTYPE'
,'UNDNAME_NO_ACCESS_SPECIFIERS'
,'UNDNAME_NO_THROW_SIGNATURES'
,'UNDNAME_NO_MEMBER_TYPE'
,'UNDNAME_NO_RETURN_UDT_MODEL'
,'UNDNAME_32_BIT_DECODE'
,'UNDNAME_NAME_ONLY'
,'UNDNAME_NO_ARGUMENTS'
,'UNDNAME_NO_SPECIAL_SYMS'
,'AddrMode1616'
,'AddrMode1632'
,'AddrModeReal'
,'AddrModeFlat'
,'API_VERSION_NUMBER'
,'SYMF_OMAP_GENERATED'
,'SYMF_OMAP_MODIFIED'
,'SymNone'
,'SymCoff'
,'SymCv'
,'SymPdb'
,'SymExport'
,'SymDeferred'
,'SymSym'
,'CBA_DEFERRED_SYMBOL_LOAD_START'
,'CBA_DEFERRED_SYMBOL_LOAD_COMPLETE'
,'CBA_DEFERRED_SYMBOL_LOAD_FAILURE'
,'CBA_SYMBOLS_UNLOADED'
,'CBA_DUPLICATE_SYMBOL'
,'SYMOPT_CASE_INSENSITIVE'
,'SYMOPT_UNDNAME'
,'SYMOPT_DEFERRED_LOADS'
,'SYMOPT_NO_CPP'
,'CERT_PE_IMAGE_DIGEST_DEBUG_INFO'
,'CERT_PE_IMAGE_DIGEST_RESOURCES'
,'CERT_PE_IMAGE_DIGEST_ALL_IMPORT_INFO'
,'CERT_SECTION_TYPE_ANY'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,CHECKSUM_SUCCESS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,CHECKSUM_OPEN_FAILURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,CHECKSUM_MAP_FAILURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,CHECKSUM_MAPVIEW_FAILURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,CHECKSUM_UNICODE_FAILURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,SPLITSYM_REMOVE_PRIVATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,SPLITSYM_EXTRACT_ALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,BindOutOfMemory));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,BindRvaToVaFailed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,BindNoRoomInImage));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,BindImportModuleFailed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,BindImportProcedureFailed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,BindImportModule));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,BindImportProcedure));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,BindForwarder));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,BindForwarderNOT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,BindImageModified));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,BindExpandFileHeaders));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,BindImageComplete));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,BindMismatchedSymbols));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,BindSymbolsNotUpdated));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,BIND_NO_BOUND_IMPORTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,BIND_NO_UPDATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,BIND_ALL_IMAGES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,IMAGE_SEPARATION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,UNDNAME_COMPLETE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,UNDNAME_NO_LEADING_UNDERSCORES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,UNDNAME_NO_MS_KEYWORDS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,UNDNAME_NO_FUNCTION_RETURNS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,UNDNAME_NO_ALLOCATION_MODEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,UNDNAME_NO_ALLOCATION_LANGUAGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,UNDNAME_NO_MS_THISTYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,UNDNAME_NO_CV_THISTYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,UNDNAME_NO_THISTYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,UNDNAME_NO_ACCESS_SPECIFIERS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,UNDNAME_NO_THROW_SIGNATURES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,UNDNAME_NO_MEMBER_TYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,UNDNAME_NO_RETURN_UDT_MODEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,UNDNAME_32_BIT_DECODE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,UNDNAME_NAME_ONLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,UNDNAME_NO_ARGUMENTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,UNDNAME_NO_SPECIAL_SYMS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,AddrMode1616));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,AddrMode1632));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,AddrModeReal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,AddrModeFlat));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,API_VERSION_NUMBER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,SYMF_OMAP_GENERATED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,SYMF_OMAP_MODIFIED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,SymNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,SymCoff));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,SymCv));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,SymPdb));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,SymExport));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,SymDeferred));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,SymSym));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,CBA_DEFERRED_SYMBOL_LOAD_START));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,CBA_DEFERRED_SYMBOL_LOAD_COMPLETE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,CBA_DEFERRED_SYMBOL_LOAD_FAILURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,CBA_SYMBOLS_UNLOADED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,CBA_DUPLICATE_SYMBOL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,SYMOPT_CASE_INSENSITIVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,SYMOPT_UNDNAME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,SYMOPT_DEFERRED_LOADS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,SYMOPT_NO_CPP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[65] ,CERT_PE_IMAGE_DIGEST_DEBUG_INFO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[66] ,CERT_PE_IMAGE_DIGEST_RESOURCES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[67] ,CERT_PE_IMAGE_DIGEST_ALL_IMPORT_INFO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[68] ,CERT_SECTION_TYPE_ANY));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..44] of string = (
'_IMAGE_DEBUG_INFORMATION'
,'_IMAGEHLP_DEFERRED_SYMBOL_LOAD'
,'_IMAGEHLP_DUPLICATE_SYMBOL'
,'_IMAGEHLP_MODULE'
,'_IMAGEHLP_SYMBOL'
,'_KDHELP'
,'_LOADED_IMAGE'
,'_tagADDRESS'
,'_tagSTACKFRAME'
,'ADDRESS'
,'API_VERSION'
,'IMAGE_DEBUG_INFORMATION'
,'IMAGEHLP_DEFERRED_SYMBOL_LOAD'
,'IMAGEHLP_DUPLICATE_SYMBOL'
,'IMAGEHLP_MODULE'
,'IMAGEHLP_SYMBOL'
,'KDHELP'
,'LOADED_IMAGE'
,'LoadedImage'
,'STACKFRAME'
,'TAddress'
,'TApiVersion'
,'TImageDebugInformation'
,'TImagehlpDeferredSymbolLoad'
,'TImagehlpDuplicateSymbol'
,'TImagehlpModule'
,'TImagehlpSymbol'
,'TKdHelp'
,'TLoadedImage'
,'TStackFrame'
,'TouchFileTimes'
,'ImageDirectoryEntryToData'
,'GetTimestampForLoadedLibrary'
,'SymSetOptions'
,'SymGetOptions'
,'SymCleanup'
,'SymFunctionTableAccess'
,'SymGetModuleInfo'
,'SymGetModuleBase'
,'SymGetSymFromAddr'
,'SymGetSymNext'
,'SymGetSymPrev'
,'SymUnloadModule'
,'ImageRemoveCertificate'
,'ImageEnumerateCertificates'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(__IMAGE_DEBUG_INFORMATION_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(__IMAGEHLP_DEFERRED_SYMBOL_LOAD_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(__IMAGEHLP_DUPLICATE_SYMBOL_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(__IMAGEHLP_MODULE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(__IMAGEHLP_SYMBOL_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[5],Addr(__KDHELP_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[6],Addr(__LOADED_IMAGE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[7],Addr(__tagADDRESS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[8],Addr(__tagSTACKFRAME_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[9],Addr(_ADDRESS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[10],Addr(_API_VERSION_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[11],Addr(_IMAGE_DEBUG_INFORMATION_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[12],Addr(_IMAGEHLP_DEFERRED_SYMBOL_LOAD_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[13],Addr(_IMAGEHLP_DUPLICATE_SYMBOL_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[14],Addr(_IMAGEHLP_MODULE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[15],Addr(_IMAGEHLP_SYMBOL_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[16],Addr(_KDHELP_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[17],Addr(_LOADED_IMAGE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[18],Addr(_LoadedImage_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[19],Addr(_STACKFRAME_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[20],Addr(_TAddress_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[21],Addr(_TApiVersion_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[22],Addr(_TImageDebugInformation_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[23],Addr(_TImagehlpDeferredSymbolLoad_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[24],Addr(_TImagehlpDuplicateSymbol_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[25],Addr(_TImagehlpModule_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[26],Addr(_TImagehlpSymbol_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[27],Addr(_TKdHelp_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[28],Addr(_TLoadedImage_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[29],Addr(_TStackFrame_)));
RegisterProc(nil,MethodNames[30],mtProc,TypeInfo(_T4),[
TypeInfo(THandle),
TypeInfo(IDispatch),TypeInfo(Bool)],Addr(____TouchFileTimes__Wrapper),cRegister);

RegisterProc(nil,MethodNames[31],mtProc,TypeInfo(_T16),[
TypeInfoPointer,
TypeInfo(ByteBool),
TypeInfo(Word),
TypeInfo(ULONG),TypeInfoPointer],Addr(ImageDirectoryEntryToData),cStdCall);

RegisterProc(nil,MethodNames[32],mtProc,TypeInfo(_T32),[
TypeInfo(HMODULE),TypeInfo(DWORD)],Addr(GetTimestampForLoadedLibrary),cStdCall);

RegisterProc(nil,MethodNames[33],mtProc,TypeInfo(_T35),[
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(SymSetOptions),cStdCall);

RegisterProc(nil,MethodNames[34],mtProc,TypeInfo(_T36),[TypeInfo(DWORD)],Addr(SymGetOptions),cStdCall);

RegisterProc(nil,MethodNames[35],mtProc,TypeInfo(_T37),[
TypeInfo(THandle),TypeInfo(Bool)],Addr(SymCleanup),cStdCall);

RegisterProc(nil,MethodNames[36],mtProc,TypeInfo(_T41),[
TypeInfo(THandle),
TypeInfo(DWORD),TypeInfoPointer],Addr(SymFunctionTableAccess),cStdCall);

RegisterProc(nil,MethodNames[37],mtProc,TypeInfo(_T42),[
TypeInfo(THandle),
TypeInfo(DWORD),
TypeInfo(IDispatch),TypeInfo(Bool)],Addr(____SymGetModuleInfo__Wrapper),cRegister);

RegisterProc(nil,MethodNames[38],mtProc,TypeInfo(_T43),[
TypeInfo(THandle),
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(SymGetModuleBase),cStdCall);

RegisterProc(nil,MethodNames[39],mtProc,TypeInfo(_T44),[
TypeInfo(THandle),
TypeInfo(DWORD),
TypeInfoPointer,
TypeInfo(IDispatch),TypeInfo(Bool)],Addr(____SymGetSymFromAddr__Wrapper),cRegister);

RegisterProc(nil,MethodNames[40],mtProc,TypeInfo(_T46),[
TypeInfo(THandle),
TypeInfo(IDispatch),TypeInfo(Bool)],Addr(____SymGetSymNext__Wrapper),cRegister);

RegisterProc(nil,MethodNames[41],mtProc,TypeInfo(_T47),[
TypeInfo(THandle),
TypeInfo(IDispatch),TypeInfo(Bool)],Addr(____SymGetSymPrev__Wrapper),cRegister);

RegisterProc(nil,MethodNames[42],mtProc,TypeInfo(_T52),[
TypeInfo(THandle),
TypeInfo(DWORD),TypeInfo(Bool)],Addr(SymUnloadModule),cStdCall);

RegisterProc(nil,MethodNames[43],mtProc,TypeInfo(_T57),[
TypeInfo(THandle),
TypeInfo(DWORD),TypeInfo(Bool)],Addr(ImageRemoveCertificate),cStdCall);

RegisterProc(nil,MethodNames[44],mtProc,TypeInfo(_T58),[
TypeInfo(THandle),
TypeInfo(Word),
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(Bool)],Addr(ImageEnumerateCertificates),cStdCall);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'CheckSumMappedFile',mtProc,TypeInfo(_T0),[
TypeInfoPointer,
TypeInfo(DWORD),
TypeInfoPointer,
TypeInfoPointer,TypeInfoPointer],Addr(CheckSumMappedFile),cStdCall)}

{RegisterProc(nil,'MapFileAndCheckSum',mtProc,TypeInfo(_T1),[
TypeInfoPChar,
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(MapFileAndCheckSum),cStdCall)}

{RegisterProc(nil,'MapFileAndCheckSumA',mtProc,TypeInfo(_T2),[
TypeInfoPChar,
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(MapFileAndCheckSumA),cStdCall)}

{RegisterProc(nil,'MapFileAndCheckSumW',mtProc,TypeInfo(_T3),[
TypeInfoPWideChar,
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(MapFileAndCheckSumW),cStdCall)}

{RegisterProc(nil,'SplitSymbols',mtProc,TypeInfo(_T5),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(DWORD),TypeInfo(Bool)],Addr(SplitSymbols),cStdCall)}

{RegisterProc(nil,'FindDebugInfoFile',mtProc,TypeInfo(_T6),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfoPChar,TypeInfo(THandle)],Addr(FindDebugInfoFile),cStdCall)}

{RegisterProc(nil,'FindExecutableImage',mtProc,TypeInfo(_T7),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfoPChar,TypeInfo(THandle)],Addr(FindExecutableImage),cStdCall)}

{RegisterProc(nil,'UpdateDebugInfoFile',mtProc,TypeInfo(_T8),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfoPChar,
TypeInfoPointer,TypeInfo(Bool)],Addr(UpdateDebugInfoFile),cStdCall)}

{RegisterProc(nil,'UpdateDebugInfoFileEx',mtProc,TypeInfo(_T9),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfoPChar,
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(Bool)],Addr(UpdateDebugInfoFileEx),cStdCall)}

{RegisterProc(nil,'BindImage',mtProc,TypeInfo(_T10),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfoPChar,TypeInfo(Bool)],Addr(BindImage),cStdCall)}

{RegisterProc(nil,'BindImageEx',mtProc,TypeInfo(_T11),[
TypeInfo(DWORD),
TypeInfoPChar,
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(TImagehlpStatusRoutine),TypeInfo(Bool)],Addr(BindImageEx),cStdCall)}

{RegisterProc(nil,'ReBaseImage',mtProc,TypeInfo(_T12),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(Bool),
TypeInfo(Bool),
TypeInfo(Bool),
TypeInfo(ULONG),
TypeInfo(ULONG),
TypeInfo(ULONG),
TypeInfo(ULONG),
TypeInfo(ULONG),
TypeInfo(ULONG),TypeInfo(Bool)],Addr(ReBaseImage),cStdCall)}

{RegisterProc(nil,'ImageLoad',mtProc,TypeInfo(_T13),[
TypeInfoPChar,
TypeInfoPChar,TypeInfoPointer],Addr(ImageLoad),cStdCall)}

{RegisterProc(nil,'ImageUnload',mtProc,TypeInfo(_T14),[
TypeInfoPointer,TypeInfo(Bool)],Addr(ImageUnload),cStdCall)}

{RegisterProc(nil,'ImageNtHeader',mtProc,TypeInfo(_T15),[
TypeInfoPointer,TypeInfoPointer],Addr(ImageNtHeader),cStdCall)}

{RegisterProc(nil,'ImageRvaToSection',mtProc,TypeInfo(_T17),[
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(ULONG),TypeInfoPointer],Addr(ImageRvaToSection),cStdCall)}

{RegisterProc(nil,'ImageRvaToVa',mtProc,TypeInfo(_T18),[
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(ULONG),
TypeInfoPointer,TypeInfoPointer],Addr(ImageRvaToVa),cStdCall)}

{RegisterProc(nil,'MapAndLoad',mtProc,TypeInfo(_T19),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfoPointer,
TypeInfo(Bool),
TypeInfo(Bool),TypeInfo(Bool)],Addr(MapAndLoad),cStdCall)}

{RegisterProc(nil,'GetImageUnusedHeaderBytes',mtProc,TypeInfo(_T21),[
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(GetImageUnusedHeaderBytes),cStdCall)}

{RegisterProc(nil,'UnMapAndLoad',mtProc,TypeInfo(_T23),[
TypeInfoPointer,TypeInfo(Bool)],Addr(UnMapAndLoad),cStdCall)}

{RegisterProc(nil,'MapDebugInformation',mtProc,TypeInfo(_T24),[
TypeInfo(THandle),
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(DWORD),TypeInfoPointer],Addr(MapDebugInformation),cStdCall)}

{RegisterProc(nil,'UnmapDebugInformation',mtProc,TypeInfo(_T25),[
TypeInfoPointer,TypeInfo(Bool)],Addr(UnmapDebugInformation),cStdCall)}

{RegisterProc(nil,'SearchTreeForFile',mtProc,TypeInfo(_T26),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfoPChar,TypeInfo(Bool)],Addr(SearchTreeForFile),cStdCall)}

{RegisterProc(nil,'MakeSureDirectoryPathExists',mtProc,TypeInfo(_T27),[
TypeInfoPChar,TypeInfo(Bool)],Addr(MakeSureDirectoryPathExists),cStdCall)}

{RegisterProc(nil,'UnDecorateSymbolName',mtProc,TypeInfo(_T28),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(DWORD)],Addr(UnDecorateSymbolName),cStdCall)}

{RegisterProc(nil,'StackWalk',mtProc,TypeInfo(_T29),[
TypeInfo(DWORD),
TypeInfo(THandle),
TypeInfo(THandle),
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(TReadProcessMemoryRoutine),
TypeInfo(TFunctionTableAccessRoutine),
TypeInfo(TGetModuleBaseRoutine),
TypeInfo(TTranslateAddressRoutine),TypeInfo(Bool)],Addr(StackWalk),cStdCall)}

{RegisterProc(nil,'ImagehlpApiVersion',mtProc,TypeInfo(_T30),[TypeInfoPointer],Addr(ImagehlpApiVersion),cStdCall)}

{RegisterProc(nil,'RemovePrivateCvSymbolic',mtProc,TypeInfo(_T33),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(ULONG),TypeInfo(Bool)],Addr(RemovePrivateCvSymbolic),cStdCall)}

{RegisterProc(nil,'RemoveRelocations',mtProc,TypeInfo(_T34),[
TypeInfoPChar],Addr(RemoveRelocations),cStdCall)}

{RegisterProc(nil,'SymEnumerateModules',mtProc,TypeInfo(_T38),[
TypeInfo(THandle),
TypeInfo(TSymEnummodulesCallback),
TypeInfoPointer,TypeInfo(Bool)],Addr(SymEnumerateModules),cStdCall)}

{RegisterProc(nil,'SymEnumerateSymbols',mtProc,TypeInfo(_T39),[
TypeInfo(THandle),
TypeInfo(DWORD),
TypeInfo(TSymEnumsymbolsCallback),
TypeInfoPointer,TypeInfo(Bool)],Addr(SymEnumerateSymbols),cStdCall)}

{RegisterProc(nil,'EnumerateLoadedModules',mtProc,TypeInfo(_T40),[
TypeInfo(THandle),
TypeInfo(TEnumloadedModulesCallback),
TypeInfoPointer,TypeInfo(Bool)],Addr(EnumerateLoadedModules),cStdCall)}

{RegisterProc(nil,'SymInitialize',mtProc,TypeInfo(_T48),[
TypeInfo(THandle),
TypeInfoPChar,
TypeInfo(Bool),TypeInfo(Bool)],Addr(SymInitialize),cStdCall)}

{RegisterProc(nil,'SymGetSearchPath',mtProc,TypeInfo(_T49),[
TypeInfo(THandle),
TypeInfoPChar,
TypeInfo(DWORD),TypeInfo(Bool)],Addr(SymGetSearchPath),cStdCall)}

{RegisterProc(nil,'SymSetSearchPath',mtProc,TypeInfo(_T50),[
TypeInfo(THandle),
TypeInfoPChar,TypeInfo(Bool)],Addr(SymSetSearchPath),cStdCall)}

{RegisterProc(nil,'SymLoadModule',mtProc,TypeInfo(_T51),[
TypeInfo(THandle),
TypeInfo(THandle),
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(DWORD),
TypeInfo(DWORD),TypeInfo(Bool)],Addr(SymLoadModule),cStdCall)}

{RegisterProc(nil,'SymUnDName',mtProc,TypeInfo(_T53),[
TypeInfoPointer,
TypeInfoPChar,
TypeInfo(DWORD),TypeInfo(Bool)],Addr(SymUnDName),cStdCall)}

{RegisterProc(nil,'SymRegisterCallback',mtProc,TypeInfo(_T54),[
TypeInfo(THandle),
TypeInfo(TSymbolRegisteredCallback),
TypeInfoPointer,TypeInfo(Bool)],Addr(SymRegisterCallback),cStdCall)}

{RegisterProc(nil,'ImageGetDigestStream',mtProc,TypeInfo(_T55),[
TypeInfo(THandle),
TypeInfo(DWORD),
TypeInfo(TDigestFunction),
TypeInfoPointer,TypeInfo(Bool)],Addr(ImageGetDigestStream),cStdCall)}

{RegisterProc(nil,'ImageAddCertificate',mtProc,TypeInfo(_T56),[
TypeInfo(THandle),
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(Bool)],Addr(ImageAddCertificate),cStdCall)}

{RegisterProc(nil,'ImageGetCertificateData',mtProc,TypeInfo(_T59),[
TypeInfo(THandle),
TypeInfo(DWORD),
TypeInfoPointer,
TypeInfo(DWORD),TypeInfo(Bool)],Addr(ImageGetCertificateData),cStdCall)}

{RegisterProc(nil,'ImageGetCertificateHeader',mtProc,TypeInfo(_T60),[
TypeInfo(THandle),
TypeInfo(DWORD),
TypeInfoPointer,TypeInfo(Bool)],Addr(ImageGetCertificateHeader),cStdCall)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
