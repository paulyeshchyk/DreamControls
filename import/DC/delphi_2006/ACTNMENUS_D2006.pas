{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit ACTNMENUS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  Types,
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Messages,
  Classes,
  Forms,
  Controls,
  Contnrs,
  Graphics,
  ActnList,
  ToolWin,
  ExtCtrls,
  ActnMan,
  ActnCtrls,
  Menus,
  StdCtrls,
  ShadowWnd,
  Buttons,
  StdActns,
  ActnMenus;
function ConvertTMsgToVariant(var R : TMsg) : OleVariant;
function ConvertVariantToTMsg(const V : OleVariant) : TMsg;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TMsg__Wrapper = class(TDCRecordWrapper)
private
fR : TMsg;
public
function GetRecordPtr : pointer; override;
published
procedure setmessage(const val : UINT);
function getmessage : UINT;
property message : UINT read getmessage write setmessage;
procedure setWPARAM(const val : WPARAM);
function getWPARAM : WPARAM;
property WPARAM : WPARAM read getWPARAM write setWPARAM;
procedure setLPARAM(const val : LPARAM);
function getLPARAM : LPARAM;
property LPARAM : LPARAM read getLPARAM write setLPARAM;
procedure settime(const val : DWORD);
function gettime : DWORD;
property time : DWORD read gettime write settime;
end;
type __TCustomActionMenuBar__ = class(TCustomActionMenuBar);
type
_T0 = procedure (p0 : TActionBarStyleEx) of object;

_T1 = _T0;

{_T2 = function (p0 : TCustomActionBar): TCustomPopupClass of object;}

{_T3 = function (p0 : TCustomActionBar): TCustomAddRemoveItemClass of object;}

{_T4 = function : TCustomToolScrollBtnClass of object;}

_T5 = function (p0 : TCustomActionMenuBar;
p1 : TCustomActionControl): TCustomActionPopupMenu of object;

{_T6 = function : TCustomPopupClass of object;}

_T7 = function (p0 : TCustomActionControl): TActionClientItem of object;

_T8 = _T7;

_T9 = procedure  of object;

_T10 = procedure (p0 : TCustomActionControl) of object;

_T11 = procedure (p0 : TContainedAction) of object;

_T12 = procedure (p0 : Boolean) of object;

{_T13 = function : TCustomPopupClass of object;}

_T14 = _T9;

_T15 = function : TCustomActionPopupMenu of object;

_T16 = function : TActionClientItem of object;

_T17 = procedure (const p0 : IDispatch) of object;

_T18 = _T9;

_T19 = _T9;

_T20 = procedure (p0 : TCustomMenuItem) of object;

_T21 = _T9;

{_T22 = function : TCustomMenuExpandBtnClass of object;}

_T23 = _T9;

_T24 = procedure (p0 : TCustomActionBar;
p1 : TCustomActionControl) of object;

_T25 = procedure (p0 : Integer;
p1 : Integer) of object;

{_T26 = function : TCustomAddRemoveItemClass of object;}

{_T27 = procedure (p0 : TCustomActionBar;
p1 : TActionClient;
var p2 : TCustomActionControlClass) of object;}

_T28 = procedure (p0 : TMenuEdges) of object;

_T29 = _T9;

_T30 = _T9;

_T31 = procedure (p0 : TCustomActionMenuBar) of object;

_T32 = _T31;

_T33 = function : TCustomActionMenuBar of object;

_T34 = _T33;

function __TMsg__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMsg__Wrapper.setmessage(const val : UINT);
begin
TMsg(GetRecordPtr^).message := val;
end;
function __TMsg__Wrapper.getmessage : UINT;
begin
result := TMsg(GetRecordPtr^).message;
end;
procedure __TMsg__Wrapper.setWPARAM(const val : WPARAM);
begin
TMsg(GetRecordPtr^).WPARAM := val;
end;
function __TMsg__Wrapper.getWPARAM : WPARAM;
begin
result := TMsg(GetRecordPtr^).WPARAM;
end;
procedure __TMsg__Wrapper.setLPARAM(const val : LPARAM);
begin
TMsg(GetRecordPtr^).LPARAM := val;
end;
function __TMsg__Wrapper.getLPARAM : LPARAM;
begin
result := TMsg(GetRecordPtr^).LPARAM;
end;
procedure __TMsg__Wrapper.settime(const val : DWORD);
begin
TMsg(GetRecordPtr^).time := val;
end;
function __TMsg__Wrapper.gettime : DWORD;
begin
result := TMsg(GetRecordPtr^).time;
end;
procedure __TCustomActionMenuBar__ProcessMouseMsg__Wrapper(__Instance : TCustomActionMenuBar;
const p0 : IDispatch);
var
__p0 : ^TMsg;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__TCustomActionMenuBar__(__Instance).ProcessMouseMsg(__p0^);
end;


type __TMsg__Wrapper__ = class(__TMsg__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMsg__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMsgToVariant(var R : TMsg) : OleVariant;
var
__rw : __TMsg__Wrapper__;
begin
__rw := __TMsg__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMsg(const V : OleVariant) : TMsg;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMsg((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTActionMainMenuBar__Canvas(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TActionMainMenuBar(Instance).Canvas);
end;

function __DC__GetTCustomActionMainMenuBar__Inactive(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionMainMenuBar(Instance).Inactive;
end;

procedure __DC__SetTCustomActionMainMenuBar__Inactive(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionMainMenuBar(Instance).Inactive:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionMainMenuBar__PersistentHotKeys(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionMainMenuBar(Instance).PersistentHotKeys;
end;

procedure __DC__SetTCustomActionMainMenuBar__PersistentHotKeys(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionMainMenuBar(Instance).PersistentHotKeys:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionMainMenuBar__Shadows(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionMainMenuBar(Instance).Shadows;
end;

procedure __DC__SetTCustomActionMainMenuBar__Shadows(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionMainMenuBar(Instance).Shadows:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionMainMenuBar__WindowMenu(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionMainMenuBar(Instance).WindowMenu;
end;

procedure __DC__SetTCustomActionMainMenuBar__WindowMenu(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionMainMenuBar(Instance).WindowMenu:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionMenuBar__AnimationStyle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionMenuBar(Instance).AnimationStyle;
end;

procedure __DC__SetTCustomActionMenuBar__AnimationStyle(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionMenuBar(Instance).AnimationStyle:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionMenuBar__AutoFocus(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionMenuBar(Instance).AutoFocus;
end;

procedure __DC__SetTCustomActionMenuBar__AutoFocus(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionMenuBar(Instance).AutoFocus:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionMenuBar__ExpandDelay(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionMenuBar(Instance).ExpandDelay;
end;

procedure __DC__SetTCustomActionMenuBar__ExpandDelay(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionMenuBar(Instance).ExpandDelay:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionMenuBar__InMenuLoop(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionMenuBar(Instance).InMenuLoop;
end;

procedure __DC__SetTCustomActionMenuBar__InMenuLoop(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionMenuBar(Instance).InMenuLoop:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionMenuBar__ParentControl(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomActionMenuBar(Instance).ParentControl);
end;

procedure __DC__SetTCustomActionMenuBar__ParentControl(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionMenuBar(Instance).ParentControl:=TCustomActionControl(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomActionMenuBar__RootMenu(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomActionMenuBar(Instance).RootMenu);
end;

procedure __DC__SetTCustomActionMenuBar__RootMenu(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionMenuBar(Instance).RootMenu:=TCustomActionMenuBar(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomActionMenuBar__UseSystemFont(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionMenuBar(Instance).UseSystemFont;
end;

procedure __DC__SetTCustomActionMenuBar__UseSystemFont(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionMenuBar(Instance).UseSystemFont:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomActionPopupMenu__ExpandBtn(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomActionPopupMenu(Instance).ExpandBtn);
end;

procedure __DC__SetTCustomActionPopupMenu__ExpandBtn(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionPopupMenu(Instance).ExpandBtn:=TCustomMenuExpandBtn(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomActionPopupMenu__Shadow(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomActionPopupMenu(Instance).Shadow;
end;

procedure __DC__SetTCustomActionPopupMenu__Shadow(Instance : TObject; Params : PVariantArgList);
begin
TCustomActionPopupMenu(Instance).Shadow:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomizeActionToolBar__AdditionalItem(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomizeActionToolBar(Instance).AdditionalItem);
end;

function __DC__GetTCustomMDIMenuButton__ButtonStyle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomMDIMenuButton(Instance).ButtonStyle;
end;

procedure __DC__SetTCustomMDIMenuButton__ButtonStyle(Instance : TObject; Params : PVariantArgList);
begin
TCustomMDIMenuButton(Instance).ButtonStyle:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomMenuItem__Edges(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TMenuEdges;
begin
tmp := TCustomMenuItem(Instance).Edges;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTCustomMenuItem__Edges(Instance : TObject; Params : PVariantArgList);
var
  tmp : TMenuEdges;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TCustomMenuItem(Instance).Edges:=tmp;
end;

procedure __RegisterProps;
begin
RegisterProperty(TActionMainMenuBar,'Canvas',__DC__GetTActionMainMenuBar__Canvas,nil);
RegisterProperty(TCustomActionMainMenuBar,'Inactive',__DC__GetTCustomActionMainMenuBar__Inactive,__DC__SetTCustomActionMainMenuBar__Inactive);
RegisterProperty(TCustomActionMainMenuBar,'PersistentHotKeys',__DC__GetTCustomActionMainMenuBar__PersistentHotKeys,__DC__SetTCustomActionMainMenuBar__PersistentHotKeys);
RegisterProperty(TCustomActionMainMenuBar,'Shadows',__DC__GetTCustomActionMainMenuBar__Shadows,__DC__SetTCustomActionMainMenuBar__Shadows);
RegisterProperty(TCustomActionMainMenuBar,'WindowMenu',__DC__GetTCustomActionMainMenuBar__WindowMenu,__DC__SetTCustomActionMainMenuBar__WindowMenu);
RegisterProperty(TCustomActionMenuBar,'AnimationStyle',__DC__GetTCustomActionMenuBar__AnimationStyle,__DC__SetTCustomActionMenuBar__AnimationStyle);
RegisterProperty(TCustomActionMenuBar,'AutoFocus',__DC__GetTCustomActionMenuBar__AutoFocus,__DC__SetTCustomActionMenuBar__AutoFocus);
RegisterProperty(TCustomActionMenuBar,'ExpandDelay',__DC__GetTCustomActionMenuBar__ExpandDelay,__DC__SetTCustomActionMenuBar__ExpandDelay);
RegisterProperty(TCustomActionMenuBar,'InMenuLoop',__DC__GetTCustomActionMenuBar__InMenuLoop,__DC__SetTCustomActionMenuBar__InMenuLoop);
RegisterProperty(TCustomActionMenuBar,'ParentControl',__DC__GetTCustomActionMenuBar__ParentControl,__DC__SetTCustomActionMenuBar__ParentControl);
RegisterProperty(TCustomActionMenuBar,'RootMenu',__DC__GetTCustomActionMenuBar__RootMenu,__DC__SetTCustomActionMenuBar__RootMenu);
RegisterProperty(TCustomActionMenuBar,'UseSystemFont',__DC__GetTCustomActionMenuBar__UseSystemFont,__DC__SetTCustomActionMenuBar__UseSystemFont);
RegisterProperty(TCustomActionPopupMenu,'ExpandBtn',__DC__GetTCustomActionPopupMenu__ExpandBtn,__DC__SetTCustomActionPopupMenu__ExpandBtn);
RegisterProperty(TCustomActionPopupMenu,'Shadow',__DC__GetTCustomActionPopupMenu__Shadow,__DC__SetTCustomActionPopupMenu__Shadow);
RegisterProperty(TCustomizeActionToolBar,'AdditionalItem',__DC__GetTCustomizeActionToolBar__AdditionalItem,nil);
RegisterProperty(TCustomMDIMenuButton,'ButtonStyle',__DC__GetTCustomMDIMenuButton__ButtonStyle,__DC__SetTCustomMDIMenuButton__ButtonStyle);
RegisterProperty(TCustomMenuItem,'Edges',__DC__GetTCustomMenuItem__Edges,__DC__SetTCustomMenuItem__Edges);
end;

const __ConstNames0 : array[0..7] of string = (
'asNone'
,'asDefault'
,'asUnFold'
,'asSlide'
,'asFade'
,'mbMinimize'
,'mbRestore'
,'mbClose'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,asNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,asDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,asUnFold));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,asSlide));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,asFade));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,mbMinimize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,mbRestore));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,mbClose));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..13] of TClass = (
TActionBarStyleEx,
TActionMainMenuBar,
TCustomActionMainMenuBar,
TCustomActionMenuBar,
TCustomActionPopupMenu,
TCustomAddRemoveItem,
TCustomizeActionClientItem,
TCustomizeActionLink,
TCustomizeActionToolBar,
TCustomMDIMenuButton,
TCustomMenuButton,
TCustomMenuExpandBtn,
TCustomMenuItem,
TMenuStack
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..1] of string = (
'RegisterActnBarStyle'
,'UnRegisterActnBarStyle'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(TActionBarStyleEx)],Addr(RegisterActnBarStyle),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(TActionBarStyleEx)],Addr(UnRegisterActnBarStyle),cRegister);

//RegRegisterMethod(TCustomActionMenuBar,'CreatePopup',TypeInfo(_T5),[TypeInfo(TCustomActionMenuBar),TypeInfo(TCustomActionControl),TypeInfo(TCustomActionPopupMenu)], pointer(352));
RegRegisterMethod(TCustomActionMenuBar,'CreatePopup',TypeInfo(_T5),[TypeInfo(TCustomActionMenuBar),TypeInfo(TCustomActionControl),TypeInfo(TCustomActionPopupMenu)],  getVMTProcAddr('TCustomActionMenuBar','CreatePopup',352));


//RegRegisterMethod(TCustomActionMenuBar,'DoItemClicked',TypeInfo(_T7),[TypeInfo(TCustomActionControl),TypeInfo(TActionClientItem)], pointer(356));
RegRegisterMethod(TCustomActionMenuBar,'DoItemClicked',TypeInfo(_T7),[TypeInfo(TCustomActionControl),TypeInfo(TActionClientItem)],  getVMTProcAddr('TCustomActionMenuBar','DoItemClicked',356));


//RegRegisterMethod(TCustomActionMenuBar,'DoItemKeyed',TypeInfo(_T8),[TypeInfo(TCustomActionControl),TypeInfo(TActionClientItem)], pointer(360));
RegRegisterMethod(TCustomActionMenuBar,'DoItemKeyed',TypeInfo(_T8),[TypeInfo(TCustomActionControl),TypeInfo(TActionClientItem)],  getVMTProcAddr('TCustomActionMenuBar','DoItemKeyed',360));


//RegRegisterMethod(TCustomActionMenuBar,'DoneMenuLoop',TypeInfo(_T9),NoParams, pointer(364));
RegRegisterMethod(TCustomActionMenuBar,'DoneMenuLoop',TypeInfo(_T9),NoParams,  getVMTProcAddr('TCustomActionMenuBar','DoneMenuLoop',364));


//RegRegisterMethod(TCustomActionMenuBar,'DoPopup',TypeInfo(_T10),[TypeInfo(TCustomActionControl)], pointer(368));
RegRegisterMethod(TCustomActionMenuBar,'DoPopup',TypeInfo(_T10),[TypeInfo(TCustomActionControl)],  getVMTProcAddr('TCustomActionMenuBar','DoPopup',368));


//RegRegisterMethod(TCustomActionMenuBar,'ExecAction',TypeInfo(_T11),[TypeInfo(TContainedAction)], pointer(372));
RegRegisterMethod(TCustomActionMenuBar,'ExecAction',TypeInfo(_T11),[TypeInfo(TContainedAction)],  getVMTProcAddr('TCustomActionMenuBar','ExecAction',372));


//RegRegisterMethod(TCustomActionMenuBar,'Expand',TypeInfo(_T12),[TypeInfo(Boolean)], pointer(376));
RegRegisterMethod(TCustomActionMenuBar,'Expand',TypeInfo(_T12),[TypeInfo(Boolean)],  getVMTProcAddr('TCustomActionMenuBar','Expand',376));


//RegRegisterMethod(TCustomActionMenuBar,'InitMenuLoop',TypeInfo(_T14),NoParams, pointer(384));
RegRegisterMethod(TCustomActionMenuBar,'InitMenuLoop',TypeInfo(_T14),NoParams,  getVMTProcAddr('TCustomActionMenuBar','InitMenuLoop',384));


//RegRegisterMethod(TCustomActionMenuBar,'NewPopup',TypeInfo(_T15),[TypeInfo(TCustomActionPopupMenu)], pointer(388));
RegRegisterMethod(TCustomActionMenuBar,'NewPopup',TypeInfo(_T15),[TypeInfo(TCustomActionPopupMenu)],  getVMTProcAddr('TCustomActionMenuBar','NewPopup',388));


//RegRegisterMethod(TCustomActionMenuBar,'ProcessMenuLoop',TypeInfo(_T16),[TypeInfo(TActionClientItem)], pointer(392));
RegRegisterMethod(TCustomActionMenuBar,'ProcessMenuLoop',TypeInfo(_T16),[TypeInfo(TActionClientItem)],  getVMTProcAddr('TCustomActionMenuBar','ProcessMenuLoop',392));


//RegRegisterMethod(TCustomActionMenuBar,'ProcessMouseMsg',TypeInfo(_T17),[TypeInfo(IDispatch)], pointer(396));
RegRegisterMethod(TCustomActionMenuBar,'ProcessMouseMsg',TypeInfo(_T17),[TypeInfo(IDispatch)],  getVMTProcAddr('TCustomActionMenuBar','ProcessMouseMsg',396));


//RegRegisterMethod(TCustomActionMenuBar,'CloseMenu',TypeInfo(_T18),NoParams, pointer(400));
RegRegisterMethod(TCustomActionMenuBar,'CloseMenu',TypeInfo(_T18),NoParams,  getVMTProcAddr('TCustomActionMenuBar','CloseMenu',400));


//RegRegisterMethod(TCustomActionMenuBar,'TrackMenu',TypeInfo(_T19),NoParams, pointer(404));
RegRegisterMethod(TCustomActionMenuBar,'TrackMenu',TypeInfo(_T19),NoParams,  getVMTProcAddr('TCustomActionMenuBar','TrackMenu',404));


//RegRegisterMethod(TCustomActionPopupMenu,'AddEdges',TypeInfo(_T20),[TypeInfo(TCustomMenuItem)], pointer(408));
RegRegisterMethod(TCustomActionPopupMenu,'AddEdges',TypeInfo(_T20),[TypeInfo(TCustomMenuItem)],  getVMTProcAddr('TCustomActionPopupMenu','AddEdges',408));


//RegRegisterMethod(TCustomActionPopupMenu,'DisplayShadow',TypeInfo(_T21),NoParams, pointer(412));
RegRegisterMethod(TCustomActionPopupMenu,'DisplayShadow',TypeInfo(_T21),NoParams,  getVMTProcAddr('TCustomActionPopupMenu','DisplayShadow',412));


//RegRegisterMethod(TCustomActionPopupMenu,'HideShadow',TypeInfo(_T23),NoParams, pointer(420));
RegRegisterMethod(TCustomActionPopupMenu,'HideShadow',TypeInfo(_T23),NoParams,  getVMTProcAddr('TCustomActionPopupMenu','HideShadow',420));


//RegRegisterMethod(TCustomActionPopupMenu,'PositionPopup',TypeInfo(_T24),[TypeInfo(TCustomActionBar),TypeInfo(TCustomActionControl)], pointer(424));
RegRegisterMethod(TCustomActionPopupMenu,'PositionPopup',TypeInfo(_T24),[TypeInfo(TCustomActionBar),TypeInfo(TCustomActionControl)],  getVMTProcAddr('TCustomActionPopupMenu','PositionPopup',424));


RegRegisterMethod(TCustomActionPopupMenu,'Popup',TypeInfo(_T25),[
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TCustomActionPopupMenu.Popup));

//RegRegisterMethod(TCustomMenuItem,'DrawEdge',TypeInfo(_T28),[TypeInfo(TMenuEdges)], pointer(232));
RegRegisterMethod(TCustomMenuItem,'DrawEdge',TypeInfo(_T28),[TypeInfo(TMenuEdges)],  getVMTProcAddr('TCustomMenuItem','DrawEdge',232));


//RegRegisterMethod(TCustomMenuItem,'DrawSubMenuGlyph',TypeInfo(_T29),NoParams, pointer(236));
RegRegisterMethod(TCustomMenuItem,'DrawSubMenuGlyph',TypeInfo(_T29),NoParams,  getVMTProcAddr('TCustomMenuItem','DrawSubMenuGlyph',236));


//RegRegisterMethod(TCustomMenuItem,'DrawUnusedEdges',TypeInfo(_T30),NoParams, pointer(240));
RegRegisterMethod(TCustomMenuItem,'DrawUnusedEdges',TypeInfo(_T30),NoParams,  getVMTProcAddr('TCustomMenuItem','DrawUnusedEdges',240));


RegisterProc(TMenuStack,'Create',mtConstructor,TypeInfo(_T31),[
TypeInfo(TCustomActionMenuBar)],Addr(TMenuStack.Create),cRegister);

RegRegisterMethod(TMenuStack,'Push',TypeInfo(_T32),[
TypeInfo(TCustomActionMenuBar)],Addr(TMenuStack.Push));

RegRegisterMethod(TMenuStack,'Pop',TypeInfo(_T33),[TypeInfo(TCustomActionMenuBar)],Addr(TMenuStack.Pop));

RegRegisterMethod(TMenuStack,'Peek',TypeInfo(_T34),[TypeInfo(TCustomActionMenuBar)],Addr(TMenuStack.Peek));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegRegisterMethod(TActionBarStyleEx,'GetPopupClass',TypeInfo(_T2),[
TypeInfo(TCustomActionBar),TypeInfo(TCustomPopupClass)], pointer(12))}

{RegRegisterMethod(TActionBarStyleEx,'GetAddRemoveItemClass',TypeInfo(_T3),[
TypeInfo(TCustomActionBar),TypeInfo(TCustomAddRemoveItemClass)], pointer(16))}

{RegRegisterMethod(TActionBarStyleEx,'GetScrollBtnClass',TypeInfo(_T4),[TypeInfo(TCustomToolScrollBtnClass)], pointer(20))}

{RegRegisterMethod(TCustomActionMenuBar,'DoGetPopupClass',TypeInfo(_T6),[TypeInfo(TCustomPopupClass)], pointer(MinVMTOffset - 80))}

{RegRegisterMethod(TCustomActionMenuBar,'GetPopupClass',TypeInfo(_T13),[TypeInfo(TCustomPopupClass)], pointer(380))}

{RegRegisterMethod(TCustomActionPopupMenu,'GetExpandBtnClass',TypeInfo(_T22),[TypeInfo(TCustomMenuExpandBtnClass)], pointer(416))}

{RegRegisterMethod(TCustomizeActionToolBar,'GetAddRemoveItemClass',TypeInfo(_T26),[TypeInfo(TCustomAddRemoveItemClass)], pointer(428))}

{RegRegisterMethod(TCustomizeActionToolBar,'GetSubMenuControlClass',TypeInfo(_T27),[
TypeInfo(TCustomActionBar),
TypeInfo(TActionClient),
TypeInfo(TCustomActionControlClass)], pointer(432))}

RegisterEvent(TypeInfo(TExitMenuEvent),[
TypeInfo(TCustomActionMenuBar),
TypeInfo(Boolean)]);

{RegisterEvent(TypeInfo(TGetPopupClassEvent),[
TypeInfo(TObject),
TypeInfo(TCustomPopupClass)]);}

RegisterEvent(TypeInfo(TMenuPopupEvent),[
TypeInfo(TObject),
TypeInfo(TCustomActionControl)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
