{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit MENUS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  Types,
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  SysUtils,
  Classes,
  Contnrs,
  Messages,
  Graphics,
  ImgList,
  ActnList,
  Menus;
function ConvertTMessageToVariant(var R : TMessage) : OleVariant;
function ConvertVariantToTMessage(const V : OleVariant) : TMessage;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
function ConvertTWMKeyToVariant(var R : TWMKey) : OleVariant;
function ConvertVariantToTWMKey(const V : OleVariant) : TWMKey;
function ConvertTWMMenuCharToVariant(var R : TWMMenuChar) : OleVariant;
function ConvertVariantToTWMMenuChar(const V : OleVariant) : TWMMenuChar;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TPoint__Wrapper = class(TDCRecordWrapper)
private
fR : TPoint;
public
function GetRecordPtr : pointer; override;
published
procedure setX(const val : Longint);
function getX : Longint;
property X : Longint read getX write setX;
procedure setY(const val : Longint);
function getY : Longint;
property Y : Longint read getY write setY;
end;
type __TWMKey__Wrapper = class(TDCRecordWrapper)
private
fR : TWMKey;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setCharCode(const val : Word);
function getCharCode : Word;
property CharCode : Word read getCharCode write setCharCode;
procedure setUnused(const val : Word);
function getUnused : Word;
property Unused : Word read getUnused write setUnused;
procedure setKeyData(const val : Longint);
function getKeyData : Longint;
property KeyData : Longint read getKeyData write setKeyData;
procedure setResult(const val : Longint);
function getResult : Longint;
property Result : Longint read getResult write setResult;
end;
type __TRect__Wrapper = class(TDCRecordWrapper)
private
fR : TRect;
public
function GetRecordPtr : pointer; override;
published
procedure setLeft(const val : Longint);
function getLeft : Longint;
property Left : Longint read getLeft write setLeft;
procedure setTop(const val : Longint);
function getTop : Longint;
property Top : Longint read getTop write setTop;
procedure setRight(const val : Longint);
function getRight : Longint;
property Right : Longint read getRight write setRight;
procedure setBottom(const val : Longint);
function getBottom : Longint;
property Bottom : Longint read getBottom write setBottom;
end;
type __TWMMenuChar__Wrapper = class(TDCRecordWrapper)
private
fR : TWMMenuChar;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setUser(const val : Char);
function getUser : Char;
property User : Char read getUser write setUser;
procedure setUnused(const val : Byte);
function getUnused : Byte;
property Unused : Byte read getUnused write setUnused;
procedure setMenuFlag(const val : Word);
function getMenuFlag : Word;
property MenuFlag : Word read getMenuFlag write setMenuFlag;
procedure setResult(const val : Longint);
function getResult : Longint;
property Result : Longint read getResult write setResult;
end;
type __TMessage__Wrapper = class(TDCRecordWrapper)
private
fR : TMessage;
public
function GetRecordPtr : pointer; override;
published
procedure setMsg(const val : Cardinal);
function getMsg : Cardinal;
property Msg : Cardinal read getMsg write setMsg;
procedure setWParam(const val : Longint);
function getWParam : Longint;
property WParam : Longint read getWParam write setWParam;
procedure setLParam(const val : Longint);
function getLParam : Longint;
property LParam : Longint read getLParam write setLParam;
procedure setResult(const val : Longint);
function getResult : Longint;
property Result : Longint read getResult write setResult;
procedure setWParamLo(const val : Word);
function getWParamLo : Word;
property WParamLo : Word read getWParamLo write setWParamLo;
procedure setWParamHi(const val : Word);
function getWParamHi : Word;
property WParamHi : Word read getWParamHi write setWParamHi;
procedure setLParamLo(const val : Word);
function getLParamLo : Word;
property LParamLo : Word read getLParamLo write setLParamLo;
procedure setLParamHi(const val : Word);
function getLParamHi : Word;
property LParamHi : Word read getLParamHi write setLParamHi;
procedure setResultLo(const val : Word);
function getResultLo : Word;
property ResultLo : Word read getResultLo write setResultLo;
procedure setResultHi(const val : Word);
function getResultHi : Word;
property ResultHi : Word read getResultHi write setResultHi;
end;
type __TMenuItem__ = class(TMenuItem);
type __TPopupList__ = class(TPopupList);
type
_T0 = function (p0 : Word;
p1 : TShiftState): TShortCut of object;

_T1 = procedure (p0 : TShortCut;
var p1 : Word;
var p2 : TShiftState) of object;

_T2 = function (p0 : TShortCut): string of object;

_T3 = function (p0 : string): TShortCut of object;

_T4 = function (const p0 : IDispatch): TShortCut of object;

_T5 = function (p0 : TComponent;
const p1 : string;
const p2 : Array of TMenuItem): TMainMenu of object;

_T6 = function (p0 : TComponent;
const p1 : string;
p2 : TPopupAlignment;
p3 : Boolean;
const p4 : Array of TMenuItem): TPopupMenu of object;

_T7 = function (const p0 : string;
p1 : THelpContext;
const p2 : string;
const p3 : Array of TMenuItem;
p4 : Boolean): TMenuItem of object;

{_T8 = function (const p0 : string;
p1 : TShortCut;
p2 : Boolean;
p3 : Boolean;
p4 : TNotifyEvent;
p5 : THelpContext;
const p6 : string): TMenuItem of object;}

_T9 = function : TMenuItem of object;

_T10 = procedure (p0 : TMenuItem;
p1 : TCanvas;
const p2 : IDispatch;
p3 : TOwnerDrawState) of object;

_T11 = function (const p0 : string): string of object;

_T12 = _T11;

_T13 = function (const p0 : string;
const p1 : string): Boolean of object;

_T14 = function : Boolean of object;

_T15 = procedure (p0 : TMainMenu) of object;

_T16 = _T15;

_T17 = procedure (p0 : HMENU;
const p1 : Array of Integer;
var p2 : Array of Longint) of object;

_T18 = procedure (var p0 : HAccel;
var p1 : Integer;
const p2 : Array of Integer) of object;

_T19 = procedure (p0 : HMENU) of object;

_T20 = procedure (p0 : TMenuItem;
p1 : Boolean) of object;

_T21 = function : HMENU of object;

_T22 = procedure (p0 : TObject;
p1 : TMenuItem;
p2 : Boolean) of object;

_T23 = _T9;

_T24 = function (p0 : Word): Boolean of object;

_T25 = function (p0 : HMENU): Boolean of object;

_T26 = function (p0 : Integer;
p1 : TFindItemKind): TMenuItem of object;

_T27 = function (p0 : Integer;
p1 : Boolean): THelpContext of object;

_T28 = _T14;

_T29 = function (const p0 : IDispatch): Boolean of object;

_T30 = procedure  of object;

_T31 = procedure (const p0 : IDispatch) of object;

_T32 = _T14;

_T33 = procedure (p0 : TObject;
p1 : Boolean) of object;

_T34 = procedure (p0 : TCanvas;
const p1 : IDispatch;
p2 : TOwnerDrawState;
p3 : Boolean) of object;

_T35 = procedure (p0 : TCanvas;
const p1 : IDispatch;
p2 : Boolean) of object;

{_T36 = function : TMenuActionLinkClass of object;}

_T37 = procedure (p0 : TCanvas;
var p1 : Integer;
var p2 : Integer) of object;

_T38 = procedure (p0 : Boolean) of object;

_T39 = _T30;

_T40 = procedure (p0 : Integer;
p1 : TMenuItem) of object;

_T41 = procedure (p0 : Integer) of object;

_T42 = _T30;

_T43 = _T30;

_T44 = function (p0 : string): TMenuItem of object;

_T45 = function (p0 : TMenuItem): Integer of object;

_T46 = _T14;

_T47 = function : TMenuItemEnumerator of object;

_T48 = function : TCustomImageList of object;

_T49 = function : TMenu of object;

_T50 = function : Integer of object;

_T51 = _T50;

_T52 = _T45;

_T53 = _T45;

_T54 = procedure (p0 : TMenuItem) of object;

_T55 = _T54;

_T56 = _T14;

_T57 = _T14;

_T58 = _T54;

_T59 = _T9;

_T60 = _T14;

_T61 = _T54;

_T62 = _T31;

_T63 = procedure (p0 : TPopupMenu) of object;

_T64 = _T63;

_T65 = procedure (p0 : TObject) of object;

_T66 = procedure (p0 : Integer;
p1 : Integer) of object;

function __TPoint__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPoint__Wrapper.setX(const val : Longint);
begin
TPoint(GetRecordPtr^).X := val;
end;
function __TPoint__Wrapper.getX : Longint;
begin
result := TPoint(GetRecordPtr^).X;
end;
procedure __TPoint__Wrapper.setY(const val : Longint);
begin
TPoint(GetRecordPtr^).Y := val;
end;
function __TPoint__Wrapper.getY : Longint;
begin
result := TPoint(GetRecordPtr^).Y;
end;
function __TWMKey__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWMKey__Wrapper.setMsg(const val : Cardinal);
begin
TWMKey(GetRecordPtr^).Msg := val;
end;
function __TWMKey__Wrapper.getMsg : Cardinal;
begin
result := TWMKey(GetRecordPtr^).Msg;
end;
procedure __TWMKey__Wrapper.setCharCode(const val : Word);
begin
TWMKey(GetRecordPtr^).CharCode := val;
end;
function __TWMKey__Wrapper.getCharCode : Word;
begin
result := TWMKey(GetRecordPtr^).CharCode;
end;
procedure __TWMKey__Wrapper.setUnused(const val : Word);
begin
TWMKey(GetRecordPtr^).Unused := val;
end;
function __TWMKey__Wrapper.getUnused : Word;
begin
result := TWMKey(GetRecordPtr^).Unused;
end;
procedure __TWMKey__Wrapper.setKeyData(const val : Longint);
begin
TWMKey(GetRecordPtr^).KeyData := val;
end;
function __TWMKey__Wrapper.getKeyData : Longint;
begin
result := TWMKey(GetRecordPtr^).KeyData;
end;
procedure __TWMKey__Wrapper.setResult(const val : Longint);
begin
TWMKey(GetRecordPtr^).Result := val;
end;
function __TWMKey__Wrapper.getResult : Longint;
begin
result := TWMKey(GetRecordPtr^).Result;
end;
function __TRect__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRect__Wrapper.setLeft(const val : Longint);
begin
TRect(GetRecordPtr^).Left := val;
end;
function __TRect__Wrapper.getLeft : Longint;
begin
result := TRect(GetRecordPtr^).Left;
end;
procedure __TRect__Wrapper.setTop(const val : Longint);
begin
TRect(GetRecordPtr^).Top := val;
end;
function __TRect__Wrapper.getTop : Longint;
begin
result := TRect(GetRecordPtr^).Top;
end;
procedure __TRect__Wrapper.setRight(const val : Longint);
begin
TRect(GetRecordPtr^).Right := val;
end;
function __TRect__Wrapper.getRight : Longint;
begin
result := TRect(GetRecordPtr^).Right;
end;
procedure __TRect__Wrapper.setBottom(const val : Longint);
begin
TRect(GetRecordPtr^).Bottom := val;
end;
function __TRect__Wrapper.getBottom : Longint;
begin
result := TRect(GetRecordPtr^).Bottom;
end;
function __TWMMenuChar__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TWMMenuChar__Wrapper.setMsg(const val : Cardinal);
begin
TWMMenuChar(GetRecordPtr^).Msg := val;
end;
function __TWMMenuChar__Wrapper.getMsg : Cardinal;
begin
result := TWMMenuChar(GetRecordPtr^).Msg;
end;
procedure __TWMMenuChar__Wrapper.setUser(const val : Char);
begin
TWMMenuChar(GetRecordPtr^).User := val;
end;
function __TWMMenuChar__Wrapper.getUser : Char;
begin
result := TWMMenuChar(GetRecordPtr^).User;
end;
procedure __TWMMenuChar__Wrapper.setUnused(const val : Byte);
begin
//TWMMenuChar(GetRecordPtr^).Unused := val;
end;
function __TWMMenuChar__Wrapper.getUnused : Byte;
begin
//result := TWMMenuChar(GetRecordPtr^).Unused;
end;
procedure __TWMMenuChar__Wrapper.setMenuFlag(const val : Word);
begin
TWMMenuChar(GetRecordPtr^).MenuFlag := val;
end;
function __TWMMenuChar__Wrapper.getMenuFlag : Word;
begin
result := TWMMenuChar(GetRecordPtr^).MenuFlag;
end;
procedure __TWMMenuChar__Wrapper.setResult(const val : Longint);
begin
TWMMenuChar(GetRecordPtr^).Result := val;
end;
function __TWMMenuChar__Wrapper.getResult : Longint;
begin
result := TWMMenuChar(GetRecordPtr^).Result;
end;
function __TMessage__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMessage__Wrapper.setMsg(const val : Cardinal);
begin
TMessage(GetRecordPtr^).Msg := val;
end;
function __TMessage__Wrapper.getMsg : Cardinal;
begin
result := TMessage(GetRecordPtr^).Msg;
end;
procedure __TMessage__Wrapper.setWParam(const val : Longint);
begin
TMessage(GetRecordPtr^).WParam := val;
end;
function __TMessage__Wrapper.getWParam : Longint;
begin
result := TMessage(GetRecordPtr^).WParam;
end;
procedure __TMessage__Wrapper.setLParam(const val : Longint);
begin
TMessage(GetRecordPtr^).LParam := val;
end;
function __TMessage__Wrapper.getLParam : Longint;
begin
result := TMessage(GetRecordPtr^).LParam;
end;
procedure __TMessage__Wrapper.setResult(const val : Longint);
begin
TMessage(GetRecordPtr^).Result := val;
end;
function __TMessage__Wrapper.getResult : Longint;
begin
result := TMessage(GetRecordPtr^).Result;
end;
procedure __TMessage__Wrapper.setWParamLo(const val : Word);
begin
TMessage(GetRecordPtr^).WParamLo := val;
end;
function __TMessage__Wrapper.getWParamLo : Word;
begin
result := TMessage(GetRecordPtr^).WParamLo;
end;
procedure __TMessage__Wrapper.setWParamHi(const val : Word);
begin
TMessage(GetRecordPtr^).WParamHi := val;
end;
function __TMessage__Wrapper.getWParamHi : Word;
begin
result := TMessage(GetRecordPtr^).WParamHi;
end;
procedure __TMessage__Wrapper.setLParamLo(const val : Word);
begin
TMessage(GetRecordPtr^).LParamLo := val;
end;
function __TMessage__Wrapper.getLParamLo : Word;
begin
result := TMessage(GetRecordPtr^).LParamLo;
end;
procedure __TMessage__Wrapper.setLParamHi(const val : Word);
begin
TMessage(GetRecordPtr^).LParamHi := val;
end;
function __TMessage__Wrapper.getLParamHi : Word;
begin
result := TMessage(GetRecordPtr^).LParamHi;
end;
procedure __TMessage__Wrapper.setResultLo(const val : Word);
begin
TMessage(GetRecordPtr^).ResultLo := val;
end;
function __TMessage__Wrapper.getResultLo : Word;
begin
result := TMessage(GetRecordPtr^).ResultLo;
end;
procedure __TMessage__Wrapper.setResultHi(const val : Word);
begin
TMessage(GetRecordPtr^).ResultHi := val;
end;
function __TMessage__Wrapper.getResultHi : Word;
begin
result := TMessage(GetRecordPtr^).ResultHi;
end;
function ____ShortCutFromMessage__Wrapper(const p0 : IDispatch): TShortCut;
var
__p0 : ^TWMKey;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := ShortCutFromMessage(__p0^);
end;

function ____NewSubMenu__Wrapper(const p0 : string;
p1 : THelpContext;
const p2 : string;
const p3 : Array of TMenuItem;
p4 : Boolean): TMenuItem;
begin
result := NewSubMenu(p0,p1,p2,p3,p4);
end;

procedure ____DrawMenuItem__Wrapper(p0 : TMenuItem;
p1 : TCanvas;
const p2 : IDispatch;
p3 : TOwnerDrawState);
var
__p2 : ^TRect;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
DrawMenuItem(p0,p1,__p2^,p3);
end;

function __TMenu__IsShortCut__Wrapper(__Instance : TMenu;
const p0 : IDispatch): Boolean;
var
__p0 : ^TWMKey;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := TMenu(__Instance).IsShortCut(__p0^);
end;

procedure __TMenu__ProcessMenuChar__Wrapper(__Instance : TMenu;
const p0 : IDispatch);
var
__p0 : ^TWMMenuChar;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
TMenu(__Instance).ProcessMenuChar(__p0^);
end;

procedure __TMenuItem__AdvancedDrawItem__Wrapper(__Instance : TMenuItem;
p0 : TCanvas;
const p1 : IDispatch;
p2 : TOwnerDrawState;
p3 : Boolean);
var
__p1 : ^TRect;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
__TMenuItem__(__Instance).AdvancedDrawItem(p0,__p1^,p2,p3);
end;

procedure __TMenuItem__DrawItem__Wrapper(__Instance : TMenuItem;
p0 : TCanvas;
const p1 : IDispatch;
p2 : Boolean);
var
__p1 : ^TRect;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
__TMenuItem__(__Instance).DrawItem(p0,__p1^,p2);
end;

procedure __TPopupList__WndProc__Wrapper(__Instance : TPopupList;
const p0 : IDispatch);
var
__p0 : ^TMessage;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__TPopupList__(__Instance).WndProc(__p0^);
end;


type __TMessage__Wrapper__ = class(__TMessage__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMessage__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMessageToVariant(var R : TMessage) : OleVariant;
var
__rw : __TMessage__Wrapper__;
begin
__rw := __TMessage__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMessage(const V : OleVariant) : TMessage;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMessage((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPoint__Wrapper__ = class(__TPoint__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPoint__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
var
__rw : __TPoint__Wrapper__;
begin
__rw := __TPoint__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPoint((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRect__Wrapper__ = class(__TRect__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRect__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
var
__rw : __TRect__Wrapper__;
begin
__rw := __TRect__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRect((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWMKey__Wrapper__ = class(__TWMKey__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWMKey__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWMKeyToVariant(var R : TWMKey) : OleVariant;
var
__rw : __TWMKey__Wrapper__;
begin
__rw := __TWMKey__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWMKey(const V : OleVariant) : TWMKey;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWMKey((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TWMMenuChar__Wrapper__ = class(__TWMMenuChar__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TWMMenuChar__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTWMMenuCharToVariant(var R : TWMMenuChar) : OleVariant;
var
__rw : __TWMMenuChar__Wrapper__;
begin
__rw := __TWMMenuChar__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTWMMenuChar(const V : OleVariant) : TWMMenuChar;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TWMMenuChar((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTMenu__Images(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TMenu(Instance).Images);
end;

procedure __DC__SetTMenu__Images(Instance : TObject; Params : PVariantArgList);
begin
TMenu(Instance).Images:=TCustomImageList(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTMenu__AutoHotkeys(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMenu(Instance).AutoHotkeys;
end;

procedure __DC__SetTMenu__AutoHotkeys(Instance : TObject; Params : PVariantArgList);
begin
TMenu(Instance).AutoHotkeys:=OleVariant(Params^[0]);
end;

function __DC__GetTMenu__AutoLineReduction(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMenu(Instance).AutoLineReduction;
end;

procedure __DC__SetTMenu__AutoLineReduction(Instance : TObject; Params : PVariantArgList);
begin
TMenu(Instance).AutoLineReduction:=OleVariant(Params^[0]);
end;

function __DC__GetTMenu__BiDiMode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMenu(Instance).BiDiMode;
end;

procedure __DC__SetTMenu__BiDiMode(Instance : TObject; Params : PVariantArgList);
begin
TMenu(Instance).BiDiMode:=OleVariant(Params^[0]);
end;

function __DC__GetTMenu__Handle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMenu(Instance).Handle;
end;

function __DC__GetTMenu__OwnerDraw(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMenu(Instance).OwnerDraw;
end;

procedure __DC__SetTMenu__OwnerDraw(Instance : TObject; Params : PVariantArgList);
begin
TMenu(Instance).OwnerDraw:=OleVariant(Params^[0]);
end;

function __DC__GetTMenu__ParentBiDiMode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMenu(Instance).ParentBiDiMode;
end;

procedure __DC__SetTMenu__ParentBiDiMode(Instance : TObject; Params : PVariantArgList);
begin
TMenu(Instance).ParentBiDiMode:=OleVariant(Params^[0]);
end;

function __DC__GetTMenu__WindowHandle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMenu(Instance).WindowHandle;
end;

procedure __DC__SetTMenu__WindowHandle(Instance : TObject; Params : PVariantArgList);
begin
TMenu(Instance).WindowHandle:=OleVariant(Params^[0]);
end;

function __DC__GetTMenuItem__Command(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMenuItem(Instance).Command;
end;

function __DC__GetTMenuItem__Handle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMenuItem(Instance).Handle;
end;

function __DC__GetTMenuItem__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMenuItem(Instance).Count;
end;

function __DC__GetTMenuItem__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TMenuItem(Instance).Items[OleVariant(Params^[0])]);
end;

function __DC__GetTMenuItem__MenuIndex(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMenuItem(Instance).MenuIndex;
end;

procedure __DC__SetTMenuItem__MenuIndex(Instance : TObject; Params : PVariantArgList);
begin
TMenuItem(Instance).MenuIndex:=OleVariant(Params^[0]);
end;

function __DC__GetTMenuItem__Parent(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TMenuItem(Instance).Parent);
end;

function __DC__GetTMenuItemEnumerator__Current(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TMenuItemEnumerator(Instance).Current);
end;

function __DC__GetTPopupList__Window(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TPopupList(Instance).Window;
end;

function __DC__GetTPopupMenu__PopupComponent(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TPopupMenu(Instance).PopupComponent);
end;

procedure __DC__SetTPopupMenu__PopupComponent(Instance : TObject; Params : PVariantArgList);
begin
TPopupMenu(Instance).PopupComponent:=TComponent(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTPopupMenu__PopupPoint(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TPoint__Wrapper;
begin
__wrapper := __TPoint__Wrapper.Create;
__wrapper.fR := TPopupMenu(Instance).PopupPoint;
result := IUnknown(__wrapper) as IDispatch;
end;

procedure __RegisterProps;
begin
RegisterProperty(TMenu,'Images',__DC__GetTMenu__Images,__DC__SetTMenu__Images);
RegisterProperty(TMenu,'AutoHotkeys',__DC__GetTMenu__AutoHotkeys,__DC__SetTMenu__AutoHotkeys);
RegisterProperty(TMenu,'AutoLineReduction',__DC__GetTMenu__AutoLineReduction,__DC__SetTMenu__AutoLineReduction);
RegisterProperty(TMenu,'BiDiMode',__DC__GetTMenu__BiDiMode,__DC__SetTMenu__BiDiMode);
RegisterProperty(TMenu,'Handle',__DC__GetTMenu__Handle,nil);
RegisterProperty(TMenu,'OwnerDraw',__DC__GetTMenu__OwnerDraw,__DC__SetTMenu__OwnerDraw);
RegisterProperty(TMenu,'ParentBiDiMode',__DC__GetTMenu__ParentBiDiMode,__DC__SetTMenu__ParentBiDiMode);
RegisterProperty(TMenu,'WindowHandle',__DC__GetTMenu__WindowHandle,__DC__SetTMenu__WindowHandle);
RegisterProperty(TMenuItem,'Command',__DC__GetTMenuItem__Command,nil);
RegisterProperty(TMenuItem,'Handle',__DC__GetTMenuItem__Handle,nil);
RegisterProperty(TMenuItem,'Count',__DC__GetTMenuItem__Count,nil);
RegisterIndexedProperty(TMenuItem,'Items',1,True,__DC__GetTMenuItem__Items,nil);
RegisterProperty(TMenuItem,'MenuIndex',__DC__GetTMenuItem__MenuIndex,__DC__SetTMenuItem__MenuIndex);
RegisterProperty(TMenuItem,'Parent',__DC__GetTMenuItem__Parent,nil);
RegisterProperty(TMenuItemEnumerator,'Current',__DC__GetTMenuItemEnumerator__Current,nil);
RegisterProperty(TPopupList,'Window',__DC__GetTPopupList__Window,nil);
RegisterProperty(TPopupMenu,'PopupComponent',__DC__GetTPopupMenu__PopupComponent,__DC__SetTPopupMenu__PopupComponent);
RegisterProperty(TPopupMenu,'PopupPoint',__DC__GetTPopupMenu__PopupPoint,nil);
end;

function __DC__GetMenus__PopupList(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(Menus.PopupList);
end;

procedure __DC__SetMenus__PopupList(Instance : TObject; Params : PVariantArgList);
begin
TObject(Menus.PopupList):=(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetMenus__ShortCutItems(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(Menus.ShortCutItems);
end;

procedure __DC__SetMenus__ShortCutItems(Instance : TObject; Params : PVariantArgList);
begin
TObject(Menus.ShortCutItems):=(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetMenus__ValidMenuHotkeys(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := Menus.ValidMenuHotkeys;
end;

procedure __DC__SetMenus__ValidMenuHotkeys(Instance : TObject; Params : PVariantArgList);
begin
Menus.ValidMenuHotkeys:=OleVariant(Params^[0]);
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('PopupList',__DC__GetMenus__PopupList,__DC__SetMenus__PopupList));
__RegisteredVars.Add(RegisterVar('ShortCutItems',__DC__GetMenus__ShortCutItems,__DC__SetMenus__ShortCutItems));
__RegisteredVars.Add(RegisterVar('ValidMenuHotkeys',__DC__GetMenus__ValidMenuHotkeys,__DC__SetMenus__ValidMenuHotkeys));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..21] of string = (
'mbNone'
,'mbBreak'
,'mbBarBreak'
,'maAutomatic'
,'maManual'
,'maParent'
,'fkCommand'
,'fkHandle'
,'fkShortCut'
,'paLeft'
,'paRight'
,'paCenter'
,'tbRightButton'
,'tbLeftButton'
,'maLeftToRight'
,'maRightToLeft'
,'maTopToBottom'
,'maBottomToTop'
,'maNone'
,'cHotkeyPrefix'
,'cLineCaption'
,'cDialogSuffix'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,mbNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,mbBreak));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,mbBarBreak));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,maAutomatic));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,maManual));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,maParent));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,fkCommand));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,fkHandle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,fkShortCut));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,paLeft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,paRight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,paCenter));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,tbRightButton));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,tbLeftButton));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,maLeftToRight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,maRightToLeft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,maTopToBottom));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,maBottomToTop));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,maNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,cHotkeyPrefix));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,cLineCaption));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,cDialogSuffix));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..8] of TClass = (
EMenuError,
TMainMenu,
TMenu,
TMenuActionLink,
TMenuItem,
TMenuItemEnumerator,
TMenuItemStack,
TPopupList,
TPopupMenu
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..13] of string = (
'ShortCut'
,'ShortCutToKey'
,'ShortCutToText'
,'TextToShortCut'
,'ShortCutFromMessage'
,'NewMenu'
,'NewPopupMenu'
,'NewSubMenu'
,'NewLine'
,'DrawMenuItem'
,'StripHotkey'
,'GetHotkey'
,'AnsiSameCaption'
,'IsAltGRPressed'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(Word),
TypeInfo(TShiftState),TypeInfo(TShortCut)],Addr(ShortCut),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(TShortCut),
TypeInfo(Word),
TypeInfo(TShiftState)],Addr(ShortCutToKey),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T2),[
TypeInfo(TShortCut),TypeInfo(string)],Addr(ShortCutToText),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T3),[
TypeInfo(string),TypeInfo(TShortCut)],Addr(TextToShortCut),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T4),[
TypeInfo(IDispatch),TypeInfo(TShortCut)],Addr(____ShortCutFromMessage__Wrapper),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T5),[
TypeInfo(TComponent),
TypeInfo(string),
ArrayInfo(TypeInfo(TMenuItem)),TypeInfo(TMainMenu)],Addr(NewMenu),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T6),[
TypeInfo(TComponent),
TypeInfo(string),
TypeInfo(TPopupAlignment),
TypeInfo(Boolean),
ArrayInfo(TypeInfo(TMenuItem)),TypeInfo(TPopupMenu)],Addr(NewPopupMenu),cRegister);

RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T7),[
TypeInfo(string),
TypeInfo(THelpContext),
TypeInfo(string),
ArrayInfo(TypeInfo(TMenuItem)),
TypeInfo(Boolean),TypeInfo(TMenuItem)],Addr(____NewSubMenu__Wrapper),cRegister);

RegisterProc(nil,MethodNames[8],mtProc,TypeInfo(_T9),[TypeInfo(TMenuItem)],Addr(NewLine),cRegister);

RegisterProc(nil,MethodNames[9],mtProc,TypeInfo(_T10),[
TypeInfo(TMenuItem),
TypeInfo(TCanvas),
TypeInfo(IDispatch),
TypeInfo(TOwnerDrawState)],Addr(____DrawMenuItem__Wrapper),cRegister);

RegisterProc(nil,MethodNames[10],mtProc,TypeInfo(_T11),[
TypeInfo(string),TypeInfo(string)],Addr(StripHotkey),cRegister);

RegisterProc(nil,MethodNames[11],mtProc,TypeInfo(_T12),[
TypeInfo(string),TypeInfo(string)],Addr(GetHotkey),cRegister);

RegisterProc(nil,MethodNames[12],mtProc,TypeInfo(_T13),[
TypeInfo(string),
TypeInfo(string),TypeInfo(Boolean)],Addr(AnsiSameCaption),cRegister);

RegisterProc(nil,MethodNames[13],mtProc,TypeInfo(_T14),[TypeInfo(Boolean)],Addr(IsAltGRPressed),cRegister);

RegRegisterMethod(TMainMenu,'Merge',TypeInfo(_T15),[
TypeInfo(TMainMenu)],Addr(TMainMenu.Merge));

RegRegisterMethod(TMainMenu,'Unmerge',TypeInfo(_T16),[
TypeInfo(TMainMenu)],Addr(TMainMenu.Unmerge));

RegRegisterMethod(TMainMenu,'PopulateOle2Menu',TypeInfo(_T17),[
TypeInfo(HMENU),
ArrayInfo(TypeInfo(Integer)),
ArrayInfo(TypeInfo(Longint))],Addr(TMainMenu.PopulateOle2Menu));

RegRegisterMethod(TMainMenu,'GetOle2AcceleratorTable',TypeInfo(_T18),[
TypeInfo(HAccel),
TypeInfo(Integer),
ArrayInfo(TypeInfo(Integer))],Addr(TMainMenu.GetOle2AcceleratorTable));

RegRegisterMethod(TMainMenu,'SetOle2MenuHandle',TypeInfo(_T19),[
TypeInfo(HMENU)],Addr(TMainMenu.SetOle2MenuHandle));

//RegRegisterMethod(TMenu,'DoChange',TypeInfo(_T20),[TypeInfo(TMenuItem),TypeInfo(Boolean)], pointer(48));
RegRegisterMethod(TMenu,'DoChange',TypeInfo(_T20),[TypeInfo(TMenuItem),TypeInfo(Boolean)],  getVMTProcAddr('TMenu','DoChange',48));


//RegRegisterMethod(TMenu,'GetHandle',TypeInfo(_T21),[TypeInfo(HMENU)], pointer(52));
RegRegisterMethod(TMenu,'GetHandle',TypeInfo(_T21),[TypeInfo(HMENU)],  getVMTProcAddr('TMenu','GetHandle',52));


//RegRegisterMethod(TMenu,'MenuChanged',TypeInfo(_T22),[TypeInfo(TObject),TypeInfo(TMenuItem),TypeInfo(Boolean)], pointer(56));
RegRegisterMethod(TMenu,'MenuChanged',TypeInfo(_T22),[TypeInfo(TObject),TypeInfo(TMenuItem),TypeInfo(Boolean)],  getVMTProcAddr('TMenu','MenuChanged',56));


RegRegisterMethod(TMenu,'CreateMenuItem',TypeInfo(_T23),[TypeInfo(TMenuItem)], pointer(MinVMTOffset - 16));

RegRegisterMethod(TMenu,'DispatchCommand',TypeInfo(_T24),[
TypeInfo(Word),TypeInfo(Boolean)],Addr(TMenu.DispatchCommand));

RegRegisterMethod(TMenu,'DispatchPopup',TypeInfo(_T25),[
TypeInfo(HMENU),TypeInfo(Boolean)],Addr(TMenu.DispatchPopup));

RegRegisterMethod(TMenu,'FindItem',TypeInfo(_T26),[
TypeInfo(Integer),
TypeInfo(TFindItemKind),TypeInfo(TMenuItem)],Addr(TMenu.FindItem));

RegRegisterMethod(TMenu,'GetHelpContext',TypeInfo(_T27),[
TypeInfo(Integer),
TypeInfo(Boolean),TypeInfo(THelpContext)],Addr(TMenu.GetHelpContext));

RegRegisterMethod(TMenu,'IsRightToLeft',TypeInfo(_T28),[TypeInfo(Boolean)],Addr(TMenu.IsRightToLeft));

RegRegisterMethod(TMenu,'IsShortCut',TypeInfo(_T29),[
TypeInfo(IDispatch),TypeInfo(Boolean)], pointer(MinVMTOffset - 17));

RegRegisterMethod(TMenu,'ParentBiDiModeChanged',TypeInfo(_T30),NoParams,Addr(TMenu.ParentBiDiModeChanged));

RegRegisterMethod(TMenu,'ProcessMenuChar',TypeInfo(_T31),[
TypeInfo(IDispatch)],Addr(__TMenu__ProcessMenuChar__Wrapper));

//RegRegisterMethod(TMenuActionLink,'IsAutoCheckLinked',TypeInfo(_T32),[TypeInfo(Boolean)], pointer(120));
RegRegisterMethod(TMenuActionLink,'IsAutoCheckLinked',TypeInfo(_T32),[TypeInfo(Boolean)],  getVMTProcAddr('TMenuActionLink','IsAutoCheckLinked',120));


RegRegisterMethod(TMenuItem,'ActionChange',TypeInfo(_T33),[
TypeInfo(TObject),
TypeInfo(Boolean)], pointer(MinVMTOffset - 16));

//RegRegisterMethod(TMenuItem,'AdvancedDrawItem',TypeInfo(_T34),[TypeInfo(TCanvas),TypeInfo(IDispatch),TypeInfo(TOwnerDrawState),TypeInfo(Boolean)], pointer(48));
RegRegisterMethod(TMenuItem,'AdvancedDrawItem',TypeInfo(_T34),[TypeInfo(TCanvas),TypeInfo(IDispatch),TypeInfo(TOwnerDrawState),TypeInfo(Boolean)],  getVMTProcAddr('TMenuItem','AdvancedDrawItem',48));


//RegRegisterMethod(TMenuItem,'DrawItem',TypeInfo(_T35),[TypeInfo(TCanvas),TypeInfo(IDispatch),TypeInfo(Boolean)], pointer(52));
RegRegisterMethod(TMenuItem,'DrawItem',TypeInfo(_T35),[TypeInfo(TCanvas),TypeInfo(IDispatch),TypeInfo(Boolean)],  getVMTProcAddr('TMenuItem','DrawItem',52));


//RegRegisterMethod(TMenuItem,'MeasureItem',TypeInfo(_T37),[TypeInfo(TCanvas),TypeInfo(Integer),TypeInfo(Integer)], pointer(56));
RegRegisterMethod(TMenuItem,'MeasureItem',TypeInfo(_T37),[TypeInfo(TCanvas),TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TMenuItem','MeasureItem',56));


//RegRegisterMethod(TMenuItem,'MenuChanged',TypeInfo(_T38),[TypeInfo(Boolean)], pointer(60));
RegRegisterMethod(TMenuItem,'MenuChanged',TypeInfo(_T38),[TypeInfo(Boolean)],  getVMTProcAddr('TMenuItem','MenuChanged',60));


//RegRegisterMethod(TMenuItem,'InitiateAction',TypeInfo(_T39),NoParams, pointer(64));
RegRegisterMethod(TMenuItem,'InitiateAction',TypeInfo(_T39),NoParams,  getVMTProcAddr('TMenuItem','InitiateAction',64));


RegRegisterMethod(TMenuItem,'Insert',TypeInfo(_T40),[
TypeInfo(Integer),
TypeInfo(TMenuItem)],Addr(TMenuItem.Insert));

RegRegisterMethod(TMenuItem,'Delete',TypeInfo(_T41),[
TypeInfo(Integer)],Addr(TMenuItem.Delete));

RegRegisterMethod(TMenuItem,'Clear',TypeInfo(_T42),NoParams,Addr(TMenuItem.Clear));

//RegRegisterMethod(TMenuItem,'Click',TypeInfo(_T43),NoParams, pointer(68));
RegRegisterMethod(TMenuItem,'Click',TypeInfo(_T43),NoParams,  getVMTProcAddr('TMenuItem','Click',68));


RegRegisterMethod(TMenuItem,'Find',TypeInfo(_T44),[
TypeInfo(string),TypeInfo(TMenuItem)],Addr(TMenuItem.Find));

RegRegisterMethod(TMenuItem,'IndexOf',TypeInfo(_T45),[
TypeInfo(TMenuItem),TypeInfo(Integer)],Addr(TMenuItem.IndexOf));

RegRegisterMethod(TMenuItem,'IsLine',TypeInfo(_T46),[TypeInfo(Boolean)],Addr(TMenuItem.IsLine));

RegRegisterMethod(TMenuItem,'GetEnumerator',TypeInfo(_T47),[TypeInfo(TMenuItemEnumerator)],Addr(TMenuItem.GetEnumerator));

RegRegisterMethod(TMenuItem,'GetImageList',TypeInfo(_T48),[TypeInfo(TCustomImageList)],Addr(TMenuItem.GetImageList));

RegRegisterMethod(TMenuItem,'GetParentMenu',TypeInfo(_T49),[TypeInfo(TMenu)],Addr(TMenuItem.GetParentMenu));

RegRegisterMethod(TMenuItem,'NewTopLine',TypeInfo(_T50),[TypeInfo(Integer)],Addr(TMenuItem.NewTopLine));

RegRegisterMethod(TMenuItem,'NewBottomLine',TypeInfo(_T51),[TypeInfo(Integer)],Addr(TMenuItem.NewBottomLine));

RegRegisterMethod(TMenuItem,'InsertNewLineBefore',TypeInfo(_T52),[
TypeInfo(TMenuItem),TypeInfo(Integer)],Addr(TMenuItem.InsertNewLineBefore));

RegRegisterMethod(TMenuItem,'InsertNewLineAfter',TypeInfo(_T53),[
TypeInfo(TMenuItem),TypeInfo(Integer)],Addr(TMenuItem.InsertNewLineAfter));

RegRegisterMethod(TMenuItem,'Add',TypeInfo(_T54),[
TypeInfo(TMenuItem)],Addr(TMenuItem.Add));

RegRegisterMethod(TMenuItem,'Remove',TypeInfo(_T55),[
TypeInfo(TMenuItem)],Addr(TMenuItem.Remove));

RegRegisterMethod(TMenuItem,'RethinkHotkeys',TypeInfo(_T56),[TypeInfo(Boolean)],Addr(TMenuItem.RethinkHotkeys));

RegRegisterMethod(TMenuItem,'RethinkLines',TypeInfo(_T57),[TypeInfo(Boolean)],Addr(TMenuItem.RethinkLines));

RegisterProc(TMenuItemEnumerator,'Create',mtConstructor,TypeInfo(_T58),[
TypeInfo(TMenuItem)],Addr(TMenuItemEnumerator.Create),cRegister);

RegRegisterMethod(TMenuItemEnumerator,'GetCurrent',TypeInfo(_T59),[TypeInfo(TMenuItem)],Addr(TMenuItemEnumerator.GetCurrent));

RegRegisterMethod(TMenuItemEnumerator,'MoveNext',TypeInfo(_T60),[TypeInfo(Boolean)],Addr(TMenuItemEnumerator.MoveNext));

RegRegisterMethod(TMenuItemStack,'ClearItem',TypeInfo(_T61),[
TypeInfo(TMenuItem)],Addr(TMenuItemStack.ClearItem));

//RegRegisterMethod(TPopupList,'WndProc',TypeInfo(_T62),[TypeInfo(IDispatch)], pointer(16));
RegRegisterMethod(TPopupList,'WndProc',TypeInfo(_T62),[TypeInfo(IDispatch)],  getVMTProcAddr('TPopupList','WndProc',16));


RegRegisterMethod(TPopupList,'Add',TypeInfo(_T63),[
TypeInfo(TPopupMenu)],Addr(TPopupList.Add));

RegRegisterMethod(TPopupList,'Remove',TypeInfo(_T64),[
TypeInfo(TPopupMenu)],Addr(TPopupList.Remove));

//RegRegisterMethod(TPopupMenu,'DoPopup',TypeInfo(_T65),[TypeInfo(TObject)], pointer(60));
RegRegisterMethod(TPopupMenu,'DoPopup',TypeInfo(_T65),[TypeInfo(TObject)],  getVMTProcAddr('TPopupMenu','DoPopup',60));


//RegRegisterMethod(TPopupMenu,'Popup',TypeInfo(_T66),[TypeInfo(Integer),TypeInfo(Integer)], pointer(64));
RegRegisterMethod(TPopupMenu,'Popup',TypeInfo(_T66),[TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TPopupMenu','Popup',64));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'NewItem',mtProc,TypeInfo(_T8),[
TypeInfo(string),
TypeInfo(TShortCut),
TypeInfo(Boolean),
TypeInfo(Boolean),
TypeInfo(TNotifyEvent),
TypeInfo(THelpContext),
TypeInfo(string),TypeInfo(TMenuItem)],Addr(NewItem),cRegister)}

{RegRegisterMethod(TMenuItem,'GetActionLinkClass',TypeInfo(_T36),[TypeInfo(TMenuActionLinkClass)], pointer(MinVMTOffset - 17))}

{RegisterEvent(TypeInfo(TAdvancedMenuDrawItemEvent),[
TypeInfo(TObject),
TypeInfo(TCanvas),
TypeInfo(IDispatch),
TypeInfo(TOwnerDrawState)]);}

RegisterEvent(TypeInfo(TMenuChangeEvent),[
TypeInfo(TObject),
TypeInfo(TMenuItem),
TypeInfo(Boolean)]);

{RegisterEvent(TypeInfo(TMenuDrawItemEvent),[
TypeInfo(TObject),
TypeInfo(TCanvas),
TypeInfo(IDispatch),
TypeInfo(Boolean)]);}

RegisterEvent(TypeInfo(TMenuMeasureItemEvent),[
TypeInfo(TObject),
TypeInfo(TCanvas),
TypeInfo(Integer),
TypeInfo(Integer)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
