{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit COMMDLG_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  Types,
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Messages,
  ShlObj,
  CommDlg;
function Convert_OFNOTIFYToVariant(var R : _OFNOTIFY) : OleVariant;
function ConvertVariantTo_OFNOTIFY(const V : OleVariant) : _OFNOTIFY;
function Convert_OFNOTIFYAToVariant(var R : _OFNOTIFYA) : OleVariant;
function ConvertVariantTo_OFNOTIFYA(const V : OleVariant) : _OFNOTIFYA;
function Convert_OFNOTIFYEXToVariant(var R : _OFNOTIFYEX) : OleVariant;
function ConvertVariantTo_OFNOTIFYEX(const V : OleVariant) : _OFNOTIFYEX;
function Convert_OFNOTIFYEXAToVariant(var R : _OFNOTIFYEXA) : OleVariant;
function ConvertVariantTo_OFNOTIFYEXA(const V : OleVariant) : _OFNOTIFYEXA;
function Convert_OFNOTIFYEXWToVariant(var R : _OFNOTIFYEXW) : OleVariant;
function ConvertVariantTo_OFNOTIFYEXW(const V : OleVariant) : _OFNOTIFYEXW;
function Convert_OFNOTIFYWToVariant(var R : _OFNOTIFYW) : OleVariant;
function ConvertVariantTo_OFNOTIFYW(const V : OleVariant) : _OFNOTIFYW;
function ConvertDEVNAMESToVariant(var R : DEVNAMES) : OleVariant;
function ConvertVariantToDEVNAMES(const V : OleVariant) : DEVNAMES;
function ConvertFINDREPLACEToVariant(var R : FINDREPLACE) : OleVariant;
function ConvertVariantToFINDREPLACE(const V : OleVariant) : FINDREPLACE;
function ConvertFINDREPLACEAToVariant(var R : FINDREPLACEA) : OleVariant;
function ConvertVariantToFINDREPLACEA(const V : OleVariant) : FINDREPLACEA;
function ConvertFINDREPLACEWToVariant(var R : FINDREPLACEW) : OleVariant;
function ConvertVariantToFINDREPLACEW(const V : OleVariant) : FINDREPLACEW;
function ConvertOFNOTIFYToVariant(var R : OFNOTIFY) : OleVariant;
function ConvertVariantToOFNOTIFY(const V : OleVariant) : OFNOTIFY;
function ConvertOFNOTIFYAToVariant(var R : OFNOTIFYA) : OleVariant;
function ConvertVariantToOFNOTIFYA(const V : OleVariant) : OFNOTIFYA;
function ConvertOFNOTIFYEXToVariant(var R : OFNOTIFYEX) : OleVariant;
function ConvertVariantToOFNOTIFYEX(const V : OleVariant) : OFNOTIFYEX;
function ConvertOFNOTIFYEXAToVariant(var R : OFNOTIFYEXA) : OleVariant;
function ConvertVariantToOFNOTIFYEXA(const V : OleVariant) : OFNOTIFYEXA;
function ConvertOFNOTIFYEXWToVariant(var R : OFNOTIFYEXW) : OleVariant;
function ConvertVariantToOFNOTIFYEXW(const V : OleVariant) : OFNOTIFYEXW;
function ConvertOFNOTIFYWToVariant(var R : OFNOTIFYW) : OleVariant;
function ConvertVariantToOFNOTIFYW(const V : OleVariant) : OFNOTIFYW;
function ConvertOPENFILENAMEToVariant(var R : OPENFILENAME) : OleVariant;
function ConvertVariantToOPENFILENAME(const V : OleVariant) : OPENFILENAME;
function ConvertOPENFILENAMEAToVariant(var R : OPENFILENAMEA) : OleVariant;
function ConvertVariantToOPENFILENAMEA(const V : OleVariant) : OPENFILENAMEA;
function ConvertOPENFILENAMEWToVariant(var R : OPENFILENAMEW) : OleVariant;
function ConvertVariantToOPENFILENAMEW(const V : OleVariant) : OPENFILENAMEW;
function ConverttagCHOOSECOLORToVariant(var R : tagCHOOSECOLOR) : OleVariant;
function ConvertVariantTotagCHOOSECOLOR(const V : OleVariant) : tagCHOOSECOLOR;
function ConverttagCHOOSECOLORAToVariant(var R : tagCHOOSECOLORA) : OleVariant;
function ConvertVariantTotagCHOOSECOLORA(const V : OleVariant) : tagCHOOSECOLORA;
function ConverttagCHOOSECOLORWToVariant(var R : tagCHOOSECOLORW) : OleVariant;
function ConvertVariantTotagCHOOSECOLORW(const V : OleVariant) : tagCHOOSECOLORW;
function ConverttagCHOOSEFONTToVariant(var R : tagCHOOSEFONT) : OleVariant;
function ConvertVariantTotagCHOOSEFONT(const V : OleVariant) : tagCHOOSEFONT;
function ConverttagCHOOSEFONTAToVariant(var R : tagCHOOSEFONTA) : OleVariant;
function ConvertVariantTotagCHOOSEFONTA(const V : OleVariant) : tagCHOOSEFONTA;
function ConverttagCHOOSEFONTWToVariant(var R : tagCHOOSEFONTW) : OleVariant;
function ConvertVariantTotagCHOOSEFONTW(const V : OleVariant) : tagCHOOSEFONTW;
function ConverttagDEVNAMESToVariant(var R : tagDEVNAMES) : OleVariant;
function ConvertVariantTotagDEVNAMES(const V : OleVariant) : tagDEVNAMES;
function ConverttagFINDREPLACEToVariant(var R : tagFINDREPLACE) : OleVariant;
function ConvertVariantTotagFINDREPLACE(const V : OleVariant) : tagFINDREPLACE;
function ConverttagFINDREPLACEAToVariant(var R : tagFINDREPLACEA) : OleVariant;
function ConvertVariantTotagFINDREPLACEA(const V : OleVariant) : tagFINDREPLACEA;
function ConverttagFINDREPLACEWToVariant(var R : tagFINDREPLACEW) : OleVariant;
function ConvertVariantTotagFINDREPLACEW(const V : OleVariant) : tagFINDREPLACEW;
function ConverttagOFNToVariant(var R : tagOFN) : OleVariant;
function ConvertVariantTotagOFN(const V : OleVariant) : tagOFN;
function ConverttagOFNAToVariant(var R : tagOFNA) : OleVariant;
function ConvertVariantTotagOFNA(const V : OleVariant) : tagOFNA;
function ConverttagOFNWToVariant(var R : tagOFNW) : OleVariant;
function ConvertVariantTotagOFNW(const V : OleVariant) : tagOFNW;
function ConverttagPDToVariant(var R : tagPD) : OleVariant;
function ConvertVariantTotagPD(const V : OleVariant) : tagPD;
function ConverttagPDAToVariant(var R : tagPDA) : OleVariant;
function ConvertVariantTotagPDA(const V : OleVariant) : tagPDA;
function ConverttagPDWToVariant(var R : tagPDW) : OleVariant;
function ConvertVariantTotagPDW(const V : OleVariant) : tagPDW;
function ConverttagPSDToVariant(var R : tagPSD) : OleVariant;
function ConvertVariantTotagPSD(const V : OleVariant) : tagPSD;
function ConverttagPSDAToVariant(var R : tagPSDA) : OleVariant;
function ConvertVariantTotagPSDA(const V : OleVariant) : tagPSDA;
function ConverttagPSDWToVariant(var R : tagPSDW) : OleVariant;
function ConvertVariantTotagPSDW(const V : OleVariant) : tagPSDW;
function ConvertTChooseColorToVariant(var R : TChooseColor) : OleVariant;
function ConvertVariantToTChooseColor(const V : OleVariant) : TChooseColor;
function ConvertTChooseColorAToVariant(var R : TChooseColorA) : OleVariant;
function ConvertVariantToTChooseColorA(const V : OleVariant) : TChooseColorA;
function ConvertTChooseColorWToVariant(var R : TChooseColorW) : OleVariant;
function ConvertVariantToTChooseColorW(const V : OleVariant) : TChooseColorW;
function ConvertTChooseFontToVariant(var R : TChooseFont) : OleVariant;
function ConvertVariantToTChooseFont(const V : OleVariant) : TChooseFont;
function ConvertTChooseFontAToVariant(var R : TChooseFontA) : OleVariant;
function ConvertVariantToTChooseFontA(const V : OleVariant) : TChooseFontA;
function ConvertTChooseFontWToVariant(var R : TChooseFontW) : OleVariant;
function ConvertVariantToTChooseFontW(const V : OleVariant) : TChooseFontW;
function ConvertTDevNamesToVariant(var R : TDevNames) : OleVariant;
function ConvertVariantToTDevNames(const V : OleVariant) : TDevNames;
function ConvertTFindReplaceToVariant(var R : TFindReplace) : OleVariant;
function ConvertVariantToTFindReplace(const V : OleVariant) : TFindReplace;
function ConvertTFindReplaceAToVariant(var R : TFindReplaceA) : OleVariant;
function ConvertVariantToTFindReplaceA(const V : OleVariant) : TFindReplaceA;
function ConvertTFindReplaceWToVariant(var R : TFindReplaceW) : OleVariant;
function ConvertVariantToTFindReplaceW(const V : OleVariant) : TFindReplaceW;
function ConvertTOFNotifyToVariant(var R : TOFNotify) : OleVariant;
function ConvertVariantToTOFNotify(const V : OleVariant) : TOFNotify;
function ConvertTOFNotifyAToVariant(var R : TOFNotifyA) : OleVariant;
function ConvertVariantToTOFNotifyA(const V : OleVariant) : TOFNotifyA;
function ConvertTOFNotifyExToVariant(var R : TOFNotifyEx) : OleVariant;
function ConvertVariantToTOFNotifyEx(const V : OleVariant) : TOFNotifyEx;
function ConvertTOFNotifyExAToVariant(var R : TOFNotifyExA) : OleVariant;
function ConvertVariantToTOFNotifyExA(const V : OleVariant) : TOFNotifyExA;
function ConvertTOFNotifyExWToVariant(var R : TOFNotifyExW) : OleVariant;
function ConvertVariantToTOFNotifyExW(const V : OleVariant) : TOFNotifyExW;
function ConvertTOFNotifyWToVariant(var R : TOFNotifyW) : OleVariant;
function ConvertVariantToTOFNotifyW(const V : OleVariant) : TOFNotifyW;
function ConvertTOpenFilenameToVariant(var R : TOpenFilename) : OleVariant;
function ConvertVariantToTOpenFilename(const V : OleVariant) : TOpenFilename;
function ConvertTOpenFilenameAToVariant(var R : TOpenFilenameA) : OleVariant;
function ConvertVariantToTOpenFilenameA(const V : OleVariant) : TOpenFilenameA;
function ConvertTOpenFilenameWToVariant(var R : TOpenFilenameW) : OleVariant;
function ConvertVariantToTOpenFilenameW(const V : OleVariant) : TOpenFilenameW;
function ConvertTPageSetupDlgToVariant(var R : TPageSetupDlg) : OleVariant;
function ConvertVariantToTPageSetupDlg(const V : OleVariant) : TPageSetupDlg;
function ConvertTPageSetupDlgAToVariant(var R : TPageSetupDlgA) : OleVariant;
function ConvertVariantToTPageSetupDlgA(const V : OleVariant) : TPageSetupDlgA;
function ConvertTPageSetupDlgWToVariant(var R : TPageSetupDlgW) : OleVariant;
function ConvertVariantToTPageSetupDlgW(const V : OleVariant) : TPageSetupDlgW;
function ConvertTPrintDlgToVariant(var R : TPrintDlg) : OleVariant;
function ConvertVariantToTPrintDlg(const V : OleVariant) : TPrintDlg;
function ConvertTPrintDlgAToVariant(var R : TPrintDlgA) : OleVariant;
function ConvertVariantToTPrintDlgA(const V : OleVariant) : TPrintDlgA;
function ConvertTPrintDlgWToVariant(var R : TPrintDlgW) : OleVariant;
function ConvertVariantToTPrintDlgW(const V : OleVariant) : TPrintDlgW;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type ___OFNOTIFY__Wrapper = class(TDCRecordWrapper)
private
fR : _OFNOTIFY;
public
function GetRecordPtr : pointer; override;
published
end;
type ___OFNOTIFYA__Wrapper = class(TDCRecordWrapper)
private
fR : _OFNOTIFYA;
public
function GetRecordPtr : pointer; override;
published
end;
type ___OFNOTIFYEX__Wrapper = class(TDCRecordWrapper)
private
fR : _OFNOTIFYEX;
public
function GetRecordPtr : pointer; override;
published
end;
type ___OFNOTIFYEXA__Wrapper = class(TDCRecordWrapper)
private
fR : _OFNOTIFYEXA;
public
function GetRecordPtr : pointer; override;
published
end;
type ___OFNOTIFYEXW__Wrapper = class(TDCRecordWrapper)
private
fR : _OFNOTIFYEXW;
public
function GetRecordPtr : pointer; override;
published
end;
type ___OFNOTIFYW__Wrapper = class(TDCRecordWrapper)
private
fR : _OFNOTIFYW;
public
function GetRecordPtr : pointer; override;
published
end;
type __DEVNAMES__Wrapper = class(TDCRecordWrapper)
private
fR : DEVNAMES;
public
function GetRecordPtr : pointer; override;
published
procedure setwDriverOffset(const val : Word);
function getwDriverOffset : Word;
property wDriverOffset : Word read getwDriverOffset write setwDriverOffset;
procedure setwDeviceOffset(const val : Word);
function getwDeviceOffset : Word;
property wDeviceOffset : Word read getwDeviceOffset write setwDeviceOffset;
procedure setwOutputOffset(const val : Word);
function getwOutputOffset : Word;
property wOutputOffset : Word read getwOutputOffset write setwOutputOffset;
procedure setwDefault(const val : Word);
function getwDefault : Word;
property wDefault : Word read getwDefault write setwDefault;
end;
type __FINDREPLACE__Wrapper = class(TDCRecordWrapper)
private
fR : FINDREPLACE;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setwFindWhatLen(const val : Word);
function getwFindWhatLen : Word;
property wFindWhatLen : Word read getwFindWhatLen write setwFindWhatLen;
procedure setwReplaceWithLen(const val : Word);
function getwReplaceWithLen : Word;
property wReplaceWithLen : Word read getwReplaceWithLen write setwReplaceWithLen;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
end;
type __FINDREPLACEA__Wrapper = class(TDCRecordWrapper)
private
fR : FINDREPLACEA;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setwFindWhatLen(const val : Word);
function getwFindWhatLen : Word;
property wFindWhatLen : Word read getwFindWhatLen write setwFindWhatLen;
procedure setwReplaceWithLen(const val : Word);
function getwReplaceWithLen : Word;
property wReplaceWithLen : Word read getwReplaceWithLen write setwReplaceWithLen;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
end;
type __FINDREPLACEW__Wrapper = class(TDCRecordWrapper)
private
fR : FINDREPLACEW;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setwFindWhatLen(const val : Word);
function getwFindWhatLen : Word;
property wFindWhatLen : Word read getwFindWhatLen write setwFindWhatLen;
procedure setwReplaceWithLen(const val : Word);
function getwReplaceWithLen : Word;
property wReplaceWithLen : Word read getwReplaceWithLen write setwReplaceWithLen;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
end;
type __OFNOTIFY__Wrapper = class(TDCRecordWrapper)
private
fR : OFNOTIFY;
public
function GetRecordPtr : pointer; override;
published
end;
type __OFNOTIFYA__Wrapper = class(TDCRecordWrapper)
private
fR : OFNOTIFYA;
public
function GetRecordPtr : pointer; override;
published
end;
type __OFNOTIFYEX__Wrapper = class(TDCRecordWrapper)
private
fR : OFNOTIFYEX;
public
function GetRecordPtr : pointer; override;
published
end;
type __OFNOTIFYEXA__Wrapper = class(TDCRecordWrapper)
private
fR : OFNOTIFYEXA;
public
function GetRecordPtr : pointer; override;
published
end;
type __OFNOTIFYEXW__Wrapper = class(TDCRecordWrapper)
private
fR : OFNOTIFYEXW;
public
function GetRecordPtr : pointer; override;
published
end;
type __OFNOTIFYW__Wrapper = class(TDCRecordWrapper)
private
fR : OFNOTIFYW;
public
function GetRecordPtr : pointer; override;
published
end;
type __OPENFILENAME__Wrapper = class(TDCRecordWrapper)
private
fR : OPENFILENAME;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setnMaxCustFilter(const val : DWORD);
function getnMaxCustFilter : DWORD;
property nMaxCustFilter : DWORD read getnMaxCustFilter write setnMaxCustFilter;
procedure setnFilterIndex(const val : DWORD);
function getnFilterIndex : DWORD;
property nFilterIndex : DWORD read getnFilterIndex write setnFilterIndex;
procedure setnMaxFile(const val : DWORD);
function getnMaxFile : DWORD;
property nMaxFile : DWORD read getnMaxFile write setnMaxFile;
procedure setnMaxFileTitle(const val : DWORD);
function getnMaxFileTitle : DWORD;
property nMaxFileTitle : DWORD read getnMaxFileTitle write setnMaxFileTitle;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setnFileOffset(const val : Word);
function getnFileOffset : Word;
property nFileOffset : Word read getnFileOffset write setnFileOffset;
procedure setnFileExtension(const val : Word);
function getnFileExtension : Word;
property nFileExtension : Word read getnFileExtension write setnFileExtension;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
procedure setFlagsEx(const val : DWORD);
function getFlagsEx : DWORD;
property FlagsEx : DWORD read getFlagsEx write setFlagsEx;
end;
type __OPENFILENAMEA__Wrapper = class(TDCRecordWrapper)
private
fR : OPENFILENAMEA;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setnMaxCustFilter(const val : DWORD);
function getnMaxCustFilter : DWORD;
property nMaxCustFilter : DWORD read getnMaxCustFilter write setnMaxCustFilter;
procedure setnFilterIndex(const val : DWORD);
function getnFilterIndex : DWORD;
property nFilterIndex : DWORD read getnFilterIndex write setnFilterIndex;
procedure setnMaxFile(const val : DWORD);
function getnMaxFile : DWORD;
property nMaxFile : DWORD read getnMaxFile write setnMaxFile;
procedure setnMaxFileTitle(const val : DWORD);
function getnMaxFileTitle : DWORD;
property nMaxFileTitle : DWORD read getnMaxFileTitle write setnMaxFileTitle;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setnFileOffset(const val : Word);
function getnFileOffset : Word;
property nFileOffset : Word read getnFileOffset write setnFileOffset;
procedure setnFileExtension(const val : Word);
function getnFileExtension : Word;
property nFileExtension : Word read getnFileExtension write setnFileExtension;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
procedure setFlagsEx(const val : DWORD);
function getFlagsEx : DWORD;
property FlagsEx : DWORD read getFlagsEx write setFlagsEx;
end;
type __OPENFILENAMEW__Wrapper = class(TDCRecordWrapper)
private
fR : OPENFILENAMEW;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setnMaxCustFilter(const val : DWORD);
function getnMaxCustFilter : DWORD;
property nMaxCustFilter : DWORD read getnMaxCustFilter write setnMaxCustFilter;
procedure setnFilterIndex(const val : DWORD);
function getnFilterIndex : DWORD;
property nFilterIndex : DWORD read getnFilterIndex write setnFilterIndex;
procedure setnMaxFile(const val : DWORD);
function getnMaxFile : DWORD;
property nMaxFile : DWORD read getnMaxFile write setnMaxFile;
procedure setnMaxFileTitle(const val : DWORD);
function getnMaxFileTitle : DWORD;
property nMaxFileTitle : DWORD read getnMaxFileTitle write setnMaxFileTitle;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setnFileOffset(const val : Word);
function getnFileOffset : Word;
property nFileOffset : Word read getnFileOffset write setnFileOffset;
procedure setnFileExtension(const val : Word);
function getnFileExtension : Word;
property nFileExtension : Word read getnFileExtension write setnFileExtension;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
procedure setFlagsEx(const val : DWORD);
function getFlagsEx : DWORD;
property FlagsEx : DWORD read getFlagsEx write setFlagsEx;
end;
type __tagCHOOSECOLOR__Wrapper = class(TDCRecordWrapper)
private
fR : tagCHOOSECOLOR;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure setrgbResult(const val : COLORREF);
function getrgbResult : COLORREF;
property rgbResult : COLORREF read getrgbResult write setrgbResult;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
end;
type __tagCHOOSECOLORA__Wrapper = class(TDCRecordWrapper)
private
fR : tagCHOOSECOLORA;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure setrgbResult(const val : COLORREF);
function getrgbResult : COLORREF;
property rgbResult : COLORREF read getrgbResult write setrgbResult;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
end;
type __tagCHOOSECOLORW__Wrapper = class(TDCRecordWrapper)
private
fR : tagCHOOSECOLORW;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure setrgbResult(const val : COLORREF);
function getrgbResult : COLORREF;
property rgbResult : COLORREF read getrgbResult write setrgbResult;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
end;
type __tagCHOOSEFONT__Wrapper = class(TDCRecordWrapper)
private
fR : tagCHOOSEFONT;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure setiPointSize(const val : Integer);
function getiPointSize : Integer;
property iPointSize : Integer read getiPointSize write setiPointSize;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setrgbColors(const val : COLORREF);
function getrgbColors : COLORREF;
property rgbColors : COLORREF read getrgbColors write setrgbColors;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setnFontType(const val : Word);
function getnFontType : Word;
property nFontType : Word read getnFontType write setnFontType;
procedure setwReserved(const val : Word);
function getwReserved : Word;
property wReserved : Word read getwReserved write setwReserved;
procedure setnSizeMin(const val : Integer);
function getnSizeMin : Integer;
property nSizeMin : Integer read getnSizeMin write setnSizeMin;
procedure setnSizeMax(const val : Integer);
function getnSizeMax : Integer;
property nSizeMax : Integer read getnSizeMax write setnSizeMax;
end;
type __tagCHOOSEFONTA__Wrapper = class(TDCRecordWrapper)
private
fR : tagCHOOSEFONTA;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure setiPointSize(const val : Integer);
function getiPointSize : Integer;
property iPointSize : Integer read getiPointSize write setiPointSize;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setrgbColors(const val : COLORREF);
function getrgbColors : COLORREF;
property rgbColors : COLORREF read getrgbColors write setrgbColors;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setnFontType(const val : Word);
function getnFontType : Word;
property nFontType : Word read getnFontType write setnFontType;
procedure setwReserved(const val : Word);
function getwReserved : Word;
property wReserved : Word read getwReserved write setwReserved;
procedure setnSizeMin(const val : Integer);
function getnSizeMin : Integer;
property nSizeMin : Integer read getnSizeMin write setnSizeMin;
procedure setnSizeMax(const val : Integer);
function getnSizeMax : Integer;
property nSizeMax : Integer read getnSizeMax write setnSizeMax;
end;
type __tagCHOOSEFONTW__Wrapper = class(TDCRecordWrapper)
private
fR : tagCHOOSEFONTW;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure setiPointSize(const val : Integer);
function getiPointSize : Integer;
property iPointSize : Integer read getiPointSize write setiPointSize;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setrgbColors(const val : COLORREF);
function getrgbColors : COLORREF;
property rgbColors : COLORREF read getrgbColors write setrgbColors;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setnFontType(const val : Word);
function getnFontType : Word;
property nFontType : Word read getnFontType write setnFontType;
procedure setwReserved(const val : Word);
function getwReserved : Word;
property wReserved : Word read getwReserved write setwReserved;
procedure setnSizeMin(const val : Integer);
function getnSizeMin : Integer;
property nSizeMin : Integer read getnSizeMin write setnSizeMin;
procedure setnSizeMax(const val : Integer);
function getnSizeMax : Integer;
property nSizeMax : Integer read getnSizeMax write setnSizeMax;
end;
type __tagDEVNAMES__Wrapper = class(TDCRecordWrapper)
private
fR : tagDEVNAMES;
public
function GetRecordPtr : pointer; override;
published
procedure setwDriverOffset(const val : Word);
function getwDriverOffset : Word;
property wDriverOffset : Word read getwDriverOffset write setwDriverOffset;
procedure setwDeviceOffset(const val : Word);
function getwDeviceOffset : Word;
property wDeviceOffset : Word read getwDeviceOffset write setwDeviceOffset;
procedure setwOutputOffset(const val : Word);
function getwOutputOffset : Word;
property wOutputOffset : Word read getwOutputOffset write setwOutputOffset;
procedure setwDefault(const val : Word);
function getwDefault : Word;
property wDefault : Word read getwDefault write setwDefault;
end;
type __tagFINDREPLACE__Wrapper = class(TDCRecordWrapper)
private
fR : tagFINDREPLACE;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setwFindWhatLen(const val : Word);
function getwFindWhatLen : Word;
property wFindWhatLen : Word read getwFindWhatLen write setwFindWhatLen;
procedure setwReplaceWithLen(const val : Word);
function getwReplaceWithLen : Word;
property wReplaceWithLen : Word read getwReplaceWithLen write setwReplaceWithLen;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
end;
type __tagFINDREPLACEA__Wrapper = class(TDCRecordWrapper)
private
fR : tagFINDREPLACEA;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setwFindWhatLen(const val : Word);
function getwFindWhatLen : Word;
property wFindWhatLen : Word read getwFindWhatLen write setwFindWhatLen;
procedure setwReplaceWithLen(const val : Word);
function getwReplaceWithLen : Word;
property wReplaceWithLen : Word read getwReplaceWithLen write setwReplaceWithLen;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
end;
type __tagFINDREPLACEW__Wrapper = class(TDCRecordWrapper)
private
fR : tagFINDREPLACEW;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setwFindWhatLen(const val : Word);
function getwFindWhatLen : Word;
property wFindWhatLen : Word read getwFindWhatLen write setwFindWhatLen;
procedure setwReplaceWithLen(const val : Word);
function getwReplaceWithLen : Word;
property wReplaceWithLen : Word read getwReplaceWithLen write setwReplaceWithLen;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
end;
type __tagOFN__Wrapper = class(TDCRecordWrapper)
private
fR : tagOFN;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setnMaxCustFilter(const val : DWORD);
function getnMaxCustFilter : DWORD;
property nMaxCustFilter : DWORD read getnMaxCustFilter write setnMaxCustFilter;
procedure setnFilterIndex(const val : DWORD);
function getnFilterIndex : DWORD;
property nFilterIndex : DWORD read getnFilterIndex write setnFilterIndex;
procedure setnMaxFile(const val : DWORD);
function getnMaxFile : DWORD;
property nMaxFile : DWORD read getnMaxFile write setnMaxFile;
procedure setnMaxFileTitle(const val : DWORD);
function getnMaxFileTitle : DWORD;
property nMaxFileTitle : DWORD read getnMaxFileTitle write setnMaxFileTitle;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setnFileOffset(const val : Word);
function getnFileOffset : Word;
property nFileOffset : Word read getnFileOffset write setnFileOffset;
procedure setnFileExtension(const val : Word);
function getnFileExtension : Word;
property nFileExtension : Word read getnFileExtension write setnFileExtension;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
procedure setFlagsEx(const val : DWORD);
function getFlagsEx : DWORD;
property FlagsEx : DWORD read getFlagsEx write setFlagsEx;
end;
type __tagOFNA__Wrapper = class(TDCRecordWrapper)
private
fR : tagOFNA;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setnMaxCustFilter(const val : DWORD);
function getnMaxCustFilter : DWORD;
property nMaxCustFilter : DWORD read getnMaxCustFilter write setnMaxCustFilter;
procedure setnFilterIndex(const val : DWORD);
function getnFilterIndex : DWORD;
property nFilterIndex : DWORD read getnFilterIndex write setnFilterIndex;
procedure setnMaxFile(const val : DWORD);
function getnMaxFile : DWORD;
property nMaxFile : DWORD read getnMaxFile write setnMaxFile;
procedure setnMaxFileTitle(const val : DWORD);
function getnMaxFileTitle : DWORD;
property nMaxFileTitle : DWORD read getnMaxFileTitle write setnMaxFileTitle;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setnFileOffset(const val : Word);
function getnFileOffset : Word;
property nFileOffset : Word read getnFileOffset write setnFileOffset;
procedure setnFileExtension(const val : Word);
function getnFileExtension : Word;
property nFileExtension : Word read getnFileExtension write setnFileExtension;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
procedure setFlagsEx(const val : DWORD);
function getFlagsEx : DWORD;
property FlagsEx : DWORD read getFlagsEx write setFlagsEx;
end;
type __tagOFNW__Wrapper = class(TDCRecordWrapper)
private
fR : tagOFNW;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setnMaxCustFilter(const val : DWORD);
function getnMaxCustFilter : DWORD;
property nMaxCustFilter : DWORD read getnMaxCustFilter write setnMaxCustFilter;
procedure setnFilterIndex(const val : DWORD);
function getnFilterIndex : DWORD;
property nFilterIndex : DWORD read getnFilterIndex write setnFilterIndex;
procedure setnMaxFile(const val : DWORD);
function getnMaxFile : DWORD;
property nMaxFile : DWORD read getnMaxFile write setnMaxFile;
procedure setnMaxFileTitle(const val : DWORD);
function getnMaxFileTitle : DWORD;
property nMaxFileTitle : DWORD read getnMaxFileTitle write setnMaxFileTitle;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setnFileOffset(const val : Word);
function getnFileOffset : Word;
property nFileOffset : Word read getnFileOffset write setnFileOffset;
procedure setnFileExtension(const val : Word);
function getnFileExtension : Word;
property nFileExtension : Word read getnFileExtension write setnFileExtension;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
procedure setFlagsEx(const val : DWORD);
function getFlagsEx : DWORD;
property FlagsEx : DWORD read getFlagsEx write setFlagsEx;
end;
type __tagPD__Wrapper = class(TDCRecordWrapper)
private
fR : tagPD;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethDevMode(const val : HGLOBAL);
function gethDevMode : HGLOBAL;
property hDevMode : HGLOBAL read gethDevMode write sethDevMode;
procedure sethDevNames(const val : HGLOBAL);
function gethDevNames : HGLOBAL;
property hDevNames : HGLOBAL read gethDevNames write sethDevNames;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setnFromPage(const val : Word);
function getnFromPage : Word;
property nFromPage : Word read getnFromPage write setnFromPage;
procedure setnToPage(const val : Word);
function getnToPage : Word;
property nToPage : Word read getnToPage write setnToPage;
procedure setnMinPage(const val : Word);
function getnMinPage : Word;
property nMinPage : Word read getnMinPage write setnMinPage;
procedure setnMaxPage(const val : Word);
function getnMaxPage : Word;
property nMaxPage : Word read getnMaxPage write setnMaxPage;
procedure setnCopies(const val : Word);
function getnCopies : Word;
property nCopies : Word read getnCopies write setnCopies;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
procedure sethPrintTemplate(const val : HGLOBAL);
function gethPrintTemplate : HGLOBAL;
property hPrintTemplate : HGLOBAL read gethPrintTemplate write sethPrintTemplate;
procedure sethSetupTemplate(const val : HGLOBAL);
function gethSetupTemplate : HGLOBAL;
property hSetupTemplate : HGLOBAL read gethSetupTemplate write sethSetupTemplate;
end;
type __tagPDA__Wrapper = class(TDCRecordWrapper)
private
fR : tagPDA;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethDevMode(const val : HGLOBAL);
function gethDevMode : HGLOBAL;
property hDevMode : HGLOBAL read gethDevMode write sethDevMode;
procedure sethDevNames(const val : HGLOBAL);
function gethDevNames : HGLOBAL;
property hDevNames : HGLOBAL read gethDevNames write sethDevNames;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setnFromPage(const val : Word);
function getnFromPage : Word;
property nFromPage : Word read getnFromPage write setnFromPage;
procedure setnToPage(const val : Word);
function getnToPage : Word;
property nToPage : Word read getnToPage write setnToPage;
procedure setnMinPage(const val : Word);
function getnMinPage : Word;
property nMinPage : Word read getnMinPage write setnMinPage;
procedure setnMaxPage(const val : Word);
function getnMaxPage : Word;
property nMaxPage : Word read getnMaxPage write setnMaxPage;
procedure setnCopies(const val : Word);
function getnCopies : Word;
property nCopies : Word read getnCopies write setnCopies;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
procedure sethPrintTemplate(const val : HGLOBAL);
function gethPrintTemplate : HGLOBAL;
property hPrintTemplate : HGLOBAL read gethPrintTemplate write sethPrintTemplate;
procedure sethSetupTemplate(const val : HGLOBAL);
function gethSetupTemplate : HGLOBAL;
property hSetupTemplate : HGLOBAL read gethSetupTemplate write sethSetupTemplate;
end;
type __tagPDW__Wrapper = class(TDCRecordWrapper)
private
fR : tagPDW;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethDevMode(const val : HGLOBAL);
function gethDevMode : HGLOBAL;
property hDevMode : HGLOBAL read gethDevMode write sethDevMode;
procedure sethDevNames(const val : HGLOBAL);
function gethDevNames : HGLOBAL;
property hDevNames : HGLOBAL read gethDevNames write sethDevNames;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setnFromPage(const val : Word);
function getnFromPage : Word;
property nFromPage : Word read getnFromPage write setnFromPage;
procedure setnToPage(const val : Word);
function getnToPage : Word;
property nToPage : Word read getnToPage write setnToPage;
procedure setnMinPage(const val : Word);
function getnMinPage : Word;
property nMinPage : Word read getnMinPage write setnMinPage;
procedure setnMaxPage(const val : Word);
function getnMaxPage : Word;
property nMaxPage : Word read getnMaxPage write setnMaxPage;
procedure setnCopies(const val : Word);
function getnCopies : Word;
property nCopies : Word read getnCopies write setnCopies;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
procedure sethPrintTemplate(const val : HGLOBAL);
function gethPrintTemplate : HGLOBAL;
property hPrintTemplate : HGLOBAL read gethPrintTemplate write sethPrintTemplate;
procedure sethSetupTemplate(const val : HGLOBAL);
function gethSetupTemplate : HGLOBAL;
property hSetupTemplate : HGLOBAL read gethSetupTemplate write sethSetupTemplate;
end;
type __tagPSD__Wrapper = class(TDCRecordWrapper)
private
fR : tagPSD;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethDevMode(const val : HGLOBAL);
function gethDevMode : HGLOBAL;
property hDevMode : HGLOBAL read gethDevMode write sethDevMode;
procedure sethDevNames(const val : HGLOBAL);
function gethDevNames : HGLOBAL;
property hDevNames : HGLOBAL read gethDevNames write sethDevNames;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
procedure sethPageSetupTemplate(const val : HGLOBAL);
function gethPageSetupTemplate : HGLOBAL;
property hPageSetupTemplate : HGLOBAL read gethPageSetupTemplate write sethPageSetupTemplate;
end;
type __tagPSDA__Wrapper = class(TDCRecordWrapper)
private
fR : tagPSDA;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethDevMode(const val : HGLOBAL);
function gethDevMode : HGLOBAL;
property hDevMode : HGLOBAL read gethDevMode write sethDevMode;
procedure sethDevNames(const val : HGLOBAL);
function gethDevNames : HGLOBAL;
property hDevNames : HGLOBAL read gethDevNames write sethDevNames;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
procedure sethPageSetupTemplate(const val : HGLOBAL);
function gethPageSetupTemplate : HGLOBAL;
property hPageSetupTemplate : HGLOBAL read gethPageSetupTemplate write sethPageSetupTemplate;
end;
type __tagPSDW__Wrapper = class(TDCRecordWrapper)
private
fR : tagPSDW;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethDevMode(const val : HGLOBAL);
function gethDevMode : HGLOBAL;
property hDevMode : HGLOBAL read gethDevMode write sethDevMode;
procedure sethDevNames(const val : HGLOBAL);
function gethDevNames : HGLOBAL;
property hDevNames : HGLOBAL read gethDevNames write sethDevNames;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
procedure sethPageSetupTemplate(const val : HGLOBAL);
function gethPageSetupTemplate : HGLOBAL;
property hPageSetupTemplate : HGLOBAL read gethPageSetupTemplate write sethPageSetupTemplate;
end;
type __TChooseColor__Wrapper = class(TDCRecordWrapper)
private
fR : TChooseColor;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure setrgbResult(const val : COLORREF);
function getrgbResult : COLORREF;
property rgbResult : COLORREF read getrgbResult write setrgbResult;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
end;
type __TChooseColorA__Wrapper = class(TDCRecordWrapper)
private
fR : TChooseColorA;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure setrgbResult(const val : COLORREF);
function getrgbResult : COLORREF;
property rgbResult : COLORREF read getrgbResult write setrgbResult;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
end;
type __TChooseColorW__Wrapper = class(TDCRecordWrapper)
private
fR : TChooseColorW;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure setrgbResult(const val : COLORREF);
function getrgbResult : COLORREF;
property rgbResult : COLORREF read getrgbResult write setrgbResult;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
end;
type __TChooseFont__Wrapper = class(TDCRecordWrapper)
private
fR : TChooseFont;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure setiPointSize(const val : Integer);
function getiPointSize : Integer;
property iPointSize : Integer read getiPointSize write setiPointSize;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setrgbColors(const val : COLORREF);
function getrgbColors : COLORREF;
property rgbColors : COLORREF read getrgbColors write setrgbColors;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setnFontType(const val : Word);
function getnFontType : Word;
property nFontType : Word read getnFontType write setnFontType;
procedure setwReserved(const val : Word);
function getwReserved : Word;
property wReserved : Word read getwReserved write setwReserved;
procedure setnSizeMin(const val : Integer);
function getnSizeMin : Integer;
property nSizeMin : Integer read getnSizeMin write setnSizeMin;
procedure setnSizeMax(const val : Integer);
function getnSizeMax : Integer;
property nSizeMax : Integer read getnSizeMax write setnSizeMax;
end;
type __TChooseFontA__Wrapper = class(TDCRecordWrapper)
private
fR : TChooseFontA;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure setiPointSize(const val : Integer);
function getiPointSize : Integer;
property iPointSize : Integer read getiPointSize write setiPointSize;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setrgbColors(const val : COLORREF);
function getrgbColors : COLORREF;
property rgbColors : COLORREF read getrgbColors write setrgbColors;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setnFontType(const val : Word);
function getnFontType : Word;
property nFontType : Word read getnFontType write setnFontType;
procedure setwReserved(const val : Word);
function getwReserved : Word;
property wReserved : Word read getwReserved write setwReserved;
procedure setnSizeMin(const val : Integer);
function getnSizeMin : Integer;
property nSizeMin : Integer read getnSizeMin write setnSizeMin;
procedure setnSizeMax(const val : Integer);
function getnSizeMax : Integer;
property nSizeMax : Integer read getnSizeMax write setnSizeMax;
end;
type __TChooseFontW__Wrapper = class(TDCRecordWrapper)
private
fR : TChooseFontW;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure setiPointSize(const val : Integer);
function getiPointSize : Integer;
property iPointSize : Integer read getiPointSize write setiPointSize;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setrgbColors(const val : COLORREF);
function getrgbColors : COLORREF;
property rgbColors : COLORREF read getrgbColors write setrgbColors;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setnFontType(const val : Word);
function getnFontType : Word;
property nFontType : Word read getnFontType write setnFontType;
procedure setwReserved(const val : Word);
function getwReserved : Word;
property wReserved : Word read getwReserved write setwReserved;
procedure setnSizeMin(const val : Integer);
function getnSizeMin : Integer;
property nSizeMin : Integer read getnSizeMin write setnSizeMin;
procedure setnSizeMax(const val : Integer);
function getnSizeMax : Integer;
property nSizeMax : Integer read getnSizeMax write setnSizeMax;
end;
type __TDevNames__Wrapper = class(TDCRecordWrapper)
private
fR : TDevNames;
public
function GetRecordPtr : pointer; override;
published
procedure setwDriverOffset(const val : Word);
function getwDriverOffset : Word;
property wDriverOffset : Word read getwDriverOffset write setwDriverOffset;
procedure setwDeviceOffset(const val : Word);
function getwDeviceOffset : Word;
property wDeviceOffset : Word read getwDeviceOffset write setwDeviceOffset;
procedure setwOutputOffset(const val : Word);
function getwOutputOffset : Word;
property wOutputOffset : Word read getwOutputOffset write setwOutputOffset;
procedure setwDefault(const val : Word);
function getwDefault : Word;
property wDefault : Word read getwDefault write setwDefault;
end;
type __TFindReplace__Wrapper = class(TDCRecordWrapper)
private
fR : TFindReplace;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setwFindWhatLen(const val : Word);
function getwFindWhatLen : Word;
property wFindWhatLen : Word read getwFindWhatLen write setwFindWhatLen;
procedure setwReplaceWithLen(const val : Word);
function getwReplaceWithLen : Word;
property wReplaceWithLen : Word read getwReplaceWithLen write setwReplaceWithLen;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
end;
type __TFindReplaceA__Wrapper = class(TDCRecordWrapper)
private
fR : TFindReplaceA;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setwFindWhatLen(const val : Word);
function getwFindWhatLen : Word;
property wFindWhatLen : Word read getwFindWhatLen write setwFindWhatLen;
procedure setwReplaceWithLen(const val : Word);
function getwReplaceWithLen : Word;
property wReplaceWithLen : Word read getwReplaceWithLen write setwReplaceWithLen;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
end;
type __TFindReplaceW__Wrapper = class(TDCRecordWrapper)
private
fR : TFindReplaceW;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setwFindWhatLen(const val : Word);
function getwFindWhatLen : Word;
property wFindWhatLen : Word read getwFindWhatLen write setwFindWhatLen;
procedure setwReplaceWithLen(const val : Word);
function getwReplaceWithLen : Word;
property wReplaceWithLen : Word read getwReplaceWithLen write setwReplaceWithLen;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
end;
type __TOFNotify__Wrapper = class(TDCRecordWrapper)
private
fR : TOFNotify;
public
function GetRecordPtr : pointer; override;
published
end;
type __TOFNotifyA__Wrapper = class(TDCRecordWrapper)
private
fR : TOFNotifyA;
public
function GetRecordPtr : pointer; override;
published
end;
type __TOFNotifyEx__Wrapper = class(TDCRecordWrapper)
private
fR : TOFNotifyEx;
public
function GetRecordPtr : pointer; override;
published
end;
type __TOFNotifyExA__Wrapper = class(TDCRecordWrapper)
private
fR : TOFNotifyExA;
public
function GetRecordPtr : pointer; override;
published
end;
type __TOFNotifyExW__Wrapper = class(TDCRecordWrapper)
private
fR : TOFNotifyExW;
public
function GetRecordPtr : pointer; override;
published
end;
type __TOFNotifyW__Wrapper = class(TDCRecordWrapper)
private
fR : TOFNotifyW;
public
function GetRecordPtr : pointer; override;
published
end;
type __TOpenFilename__Wrapper = class(TDCRecordWrapper)
private
fR : TOpenFilename;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setnMaxCustFilter(const val : DWORD);
function getnMaxCustFilter : DWORD;
property nMaxCustFilter : DWORD read getnMaxCustFilter write setnMaxCustFilter;
procedure setnFilterIndex(const val : DWORD);
function getnFilterIndex : DWORD;
property nFilterIndex : DWORD read getnFilterIndex write setnFilterIndex;
procedure setnMaxFile(const val : DWORD);
function getnMaxFile : DWORD;
property nMaxFile : DWORD read getnMaxFile write setnMaxFile;
procedure setnMaxFileTitle(const val : DWORD);
function getnMaxFileTitle : DWORD;
property nMaxFileTitle : DWORD read getnMaxFileTitle write setnMaxFileTitle;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setnFileOffset(const val : Word);
function getnFileOffset : Word;
property nFileOffset : Word read getnFileOffset write setnFileOffset;
procedure setnFileExtension(const val : Word);
function getnFileExtension : Word;
property nFileExtension : Word read getnFileExtension write setnFileExtension;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
procedure setFlagsEx(const val : DWORD);
function getFlagsEx : DWORD;
property FlagsEx : DWORD read getFlagsEx write setFlagsEx;
end;
type __TOpenFilenameA__Wrapper = class(TDCRecordWrapper)
private
fR : TOpenFilenameA;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setnMaxCustFilter(const val : DWORD);
function getnMaxCustFilter : DWORD;
property nMaxCustFilter : DWORD read getnMaxCustFilter write setnMaxCustFilter;
procedure setnFilterIndex(const val : DWORD);
function getnFilterIndex : DWORD;
property nFilterIndex : DWORD read getnFilterIndex write setnFilterIndex;
procedure setnMaxFile(const val : DWORD);
function getnMaxFile : DWORD;
property nMaxFile : DWORD read getnMaxFile write setnMaxFile;
procedure setnMaxFileTitle(const val : DWORD);
function getnMaxFileTitle : DWORD;
property nMaxFileTitle : DWORD read getnMaxFileTitle write setnMaxFileTitle;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setnFileOffset(const val : Word);
function getnFileOffset : Word;
property nFileOffset : Word read getnFileOffset write setnFileOffset;
procedure setnFileExtension(const val : Word);
function getnFileExtension : Word;
property nFileExtension : Word read getnFileExtension write setnFileExtension;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
procedure setFlagsEx(const val : DWORD);
function getFlagsEx : DWORD;
property FlagsEx : DWORD read getFlagsEx write setFlagsEx;
end;
type __TOpenFilenameW__Wrapper = class(TDCRecordWrapper)
private
fR : TOpenFilenameW;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setnMaxCustFilter(const val : DWORD);
function getnMaxCustFilter : DWORD;
property nMaxCustFilter : DWORD read getnMaxCustFilter write setnMaxCustFilter;
procedure setnFilterIndex(const val : DWORD);
function getnFilterIndex : DWORD;
property nFilterIndex : DWORD read getnFilterIndex write setnFilterIndex;
procedure setnMaxFile(const val : DWORD);
function getnMaxFile : DWORD;
property nMaxFile : DWORD read getnMaxFile write setnMaxFile;
procedure setnMaxFileTitle(const val : DWORD);
function getnMaxFileTitle : DWORD;
property nMaxFileTitle : DWORD read getnMaxFileTitle write setnMaxFileTitle;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setnFileOffset(const val : Word);
function getnFileOffset : Word;
property nFileOffset : Word read getnFileOffset write setnFileOffset;
procedure setnFileExtension(const val : Word);
function getnFileExtension : Word;
property nFileExtension : Word read getnFileExtension write setnFileExtension;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
procedure setdwReserved(const val : DWORD);
function getdwReserved : DWORD;
property dwReserved : DWORD read getdwReserved write setdwReserved;
procedure setFlagsEx(const val : DWORD);
function getFlagsEx : DWORD;
property FlagsEx : DWORD read getFlagsEx write setFlagsEx;
end;
type __TPageSetupDlg__Wrapper = class(TDCRecordWrapper)
private
fR : TPageSetupDlg;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethDevMode(const val : HGLOBAL);
function gethDevMode : HGLOBAL;
property hDevMode : HGLOBAL read gethDevMode write sethDevMode;
procedure sethDevNames(const val : HGLOBAL);
function gethDevNames : HGLOBAL;
property hDevNames : HGLOBAL read gethDevNames write sethDevNames;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
procedure sethPageSetupTemplate(const val : HGLOBAL);
function gethPageSetupTemplate : HGLOBAL;
property hPageSetupTemplate : HGLOBAL read gethPageSetupTemplate write sethPageSetupTemplate;
end;
type __TPageSetupDlgA__Wrapper = class(TDCRecordWrapper)
private
fR : TPageSetupDlgA;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethDevMode(const val : HGLOBAL);
function gethDevMode : HGLOBAL;
property hDevMode : HGLOBAL read gethDevMode write sethDevMode;
procedure sethDevNames(const val : HGLOBAL);
function gethDevNames : HGLOBAL;
property hDevNames : HGLOBAL read gethDevNames write sethDevNames;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
procedure sethPageSetupTemplate(const val : HGLOBAL);
function gethPageSetupTemplate : HGLOBAL;
property hPageSetupTemplate : HGLOBAL read gethPageSetupTemplate write sethPageSetupTemplate;
end;
type __TPageSetupDlgW__Wrapper = class(TDCRecordWrapper)
private
fR : TPageSetupDlgW;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethDevMode(const val : HGLOBAL);
function gethDevMode : HGLOBAL;
property hDevMode : HGLOBAL read gethDevMode write sethDevMode;
procedure sethDevNames(const val : HGLOBAL);
function gethDevNames : HGLOBAL;
property hDevNames : HGLOBAL read gethDevNames write sethDevNames;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
procedure sethPageSetupTemplate(const val : HGLOBAL);
function gethPageSetupTemplate : HGLOBAL;
property hPageSetupTemplate : HGLOBAL read gethPageSetupTemplate write sethPageSetupTemplate;
end;
type __TPrintDlg__Wrapper = class(TDCRecordWrapper)
private
fR : TPrintDlg;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethDevMode(const val : HGLOBAL);
function gethDevMode : HGLOBAL;
property hDevMode : HGLOBAL read gethDevMode write sethDevMode;
procedure sethDevNames(const val : HGLOBAL);
function gethDevNames : HGLOBAL;
property hDevNames : HGLOBAL read gethDevNames write sethDevNames;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setnFromPage(const val : Word);
function getnFromPage : Word;
property nFromPage : Word read getnFromPage write setnFromPage;
procedure setnToPage(const val : Word);
function getnToPage : Word;
property nToPage : Word read getnToPage write setnToPage;
procedure setnMinPage(const val : Word);
function getnMinPage : Word;
property nMinPage : Word read getnMinPage write setnMinPage;
procedure setnMaxPage(const val : Word);
function getnMaxPage : Word;
property nMaxPage : Word read getnMaxPage write setnMaxPage;
procedure setnCopies(const val : Word);
function getnCopies : Word;
property nCopies : Word read getnCopies write setnCopies;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
procedure sethPrintTemplate(const val : HGLOBAL);
function gethPrintTemplate : HGLOBAL;
property hPrintTemplate : HGLOBAL read gethPrintTemplate write sethPrintTemplate;
procedure sethSetupTemplate(const val : HGLOBAL);
function gethSetupTemplate : HGLOBAL;
property hSetupTemplate : HGLOBAL read gethSetupTemplate write sethSetupTemplate;
end;
type __TPrintDlgA__Wrapper = class(TDCRecordWrapper)
private
fR : TPrintDlgA;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethDevMode(const val : HGLOBAL);
function gethDevMode : HGLOBAL;
property hDevMode : HGLOBAL read gethDevMode write sethDevMode;
procedure sethDevNames(const val : HGLOBAL);
function gethDevNames : HGLOBAL;
property hDevNames : HGLOBAL read gethDevNames write sethDevNames;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setnFromPage(const val : Word);
function getnFromPage : Word;
property nFromPage : Word read getnFromPage write setnFromPage;
procedure setnToPage(const val : Word);
function getnToPage : Word;
property nToPage : Word read getnToPage write setnToPage;
procedure setnMinPage(const val : Word);
function getnMinPage : Word;
property nMinPage : Word read getnMinPage write setnMinPage;
procedure setnMaxPage(const val : Word);
function getnMaxPage : Word;
property nMaxPage : Word read getnMaxPage write setnMaxPage;
procedure setnCopies(const val : Word);
function getnCopies : Word;
property nCopies : Word read getnCopies write setnCopies;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
procedure sethPrintTemplate(const val : HGLOBAL);
function gethPrintTemplate : HGLOBAL;
property hPrintTemplate : HGLOBAL read gethPrintTemplate write sethPrintTemplate;
procedure sethSetupTemplate(const val : HGLOBAL);
function gethSetupTemplate : HGLOBAL;
property hSetupTemplate : HGLOBAL read gethSetupTemplate write sethSetupTemplate;
end;
type __TPrintDlgW__Wrapper = class(TDCRecordWrapper)
private
fR : TPrintDlgW;
public
function GetRecordPtr : pointer; override;
published
procedure setlStructSize(const val : DWORD);
function getlStructSize : DWORD;
property lStructSize : DWORD read getlStructSize write setlStructSize;
procedure sethDevMode(const val : HGLOBAL);
function gethDevMode : HGLOBAL;
property hDevMode : HGLOBAL read gethDevMode write sethDevMode;
procedure sethDevNames(const val : HGLOBAL);
function gethDevNames : HGLOBAL;
property hDevNames : HGLOBAL read gethDevNames write sethDevNames;
procedure setFlags(const val : DWORD);
function getFlags : DWORD;
property Flags : DWORD read getFlags write setFlags;
procedure setnFromPage(const val : Word);
function getnFromPage : Word;
property nFromPage : Word read getnFromPage write setnFromPage;
procedure setnToPage(const val : Word);
function getnToPage : Word;
property nToPage : Word read getnToPage write setnToPage;
procedure setnMinPage(const val : Word);
function getnMinPage : Word;
property nMinPage : Word read getnMinPage write setnMinPage;
procedure setnMaxPage(const val : Word);
function getnMaxPage : Word;
property nMaxPage : Word read getnMaxPage write setnMaxPage;
procedure setnCopies(const val : Word);
function getnCopies : Word;
property nCopies : Word read getnCopies write setnCopies;
procedure sethInstance(const val : HINST);
function gethInstance : HINST;
property hInstance : HINST read gethInstance write sethInstance;
procedure setlCustData(const val : LPARAM);
function getlCustData : LPARAM;
property lCustData : LPARAM read getlCustData write setlCustData;
procedure sethPrintTemplate(const val : HGLOBAL);
function gethPrintTemplate : HGLOBAL;
property hPrintTemplate : HGLOBAL read gethPrintTemplate write sethPrintTemplate;
procedure sethSetupTemplate(const val : HGLOBAL);
function gethSetupTemplate : HGLOBAL;
property hSetupTemplate : HGLOBAL read gethSetupTemplate write sethSetupTemplate;
end;
type
_T0 = function (const p0 : IDispatch): Bool of object;

_T1 = _T0;

_T2 = _T0;

_T3 = _T0;

_T4 = _T0;

_T5 = _T0;

{_T6 = function (p0 : PChar;
p1 : PChar;
p2 : Word): SmallInt of object;}

{_T7 = function (p0 : PAnsiChar;
p1 : PAnsiChar;
p2 : Word): SmallInt of object;}

{_T8 = function (p0 : PWideChar;
p1 : PWideChar;
p2 : Word): SmallInt of object;}

_T9 = _T0;

_T10 = _T0;

_T11 = _T0;

_T12 = function (const p0 : IDispatch): HWND of object;

_T13 = _T12;

_T14 = _T12;

_T15 = _T12;

_T16 = _T12;

_T17 = _T12;

_T18 = _T0;

_T19 = _T0;

_T20 = _T0;

_T21 = _T0;

_T22 = _T0;

_T23 = _T0;

_T24 = function : DWORD of object;

_T25 = _T0;

_T26 = _T0;

_T27 = _T0;

function ___OFNOTIFY__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function ___OFNOTIFYA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function ___OFNOTIFYEX__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function ___OFNOTIFYEXA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function ___OFNOTIFYEXW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function ___OFNOTIFYW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __DEVNAMES__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __DEVNAMES__Wrapper.setwDriverOffset(const val : Word);
begin
DEVNAMES(GetRecordPtr^).wDriverOffset := val;
end;
function __DEVNAMES__Wrapper.getwDriverOffset : Word;
begin
result := DEVNAMES(GetRecordPtr^).wDriverOffset;
end;
procedure __DEVNAMES__Wrapper.setwDeviceOffset(const val : Word);
begin
DEVNAMES(GetRecordPtr^).wDeviceOffset := val;
end;
function __DEVNAMES__Wrapper.getwDeviceOffset : Word;
begin
result := DEVNAMES(GetRecordPtr^).wDeviceOffset;
end;
procedure __DEVNAMES__Wrapper.setwOutputOffset(const val : Word);
begin
DEVNAMES(GetRecordPtr^).wOutputOffset := val;
end;
function __DEVNAMES__Wrapper.getwOutputOffset : Word;
begin
result := DEVNAMES(GetRecordPtr^).wOutputOffset;
end;
procedure __DEVNAMES__Wrapper.setwDefault(const val : Word);
begin
DEVNAMES(GetRecordPtr^).wDefault := val;
end;
function __DEVNAMES__Wrapper.getwDefault : Word;
begin
result := DEVNAMES(GetRecordPtr^).wDefault;
end;
function __FINDREPLACE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __FINDREPLACE__Wrapper.setlStructSize(const val : DWORD);
begin
FINDREPLACE(GetRecordPtr^).lStructSize := val;
end;
function __FINDREPLACE__Wrapper.getlStructSize : DWORD;
begin
result := FINDREPLACE(GetRecordPtr^).lStructSize;
end;
procedure __FINDREPLACE__Wrapper.sethInstance(const val : HINST);
begin
FINDREPLACE(GetRecordPtr^).hInstance := val;
end;
function __FINDREPLACE__Wrapper.gethInstance : HINST;
begin
result := FINDREPLACE(GetRecordPtr^).hInstance;
end;
procedure __FINDREPLACE__Wrapper.setFlags(const val : DWORD);
begin
FINDREPLACE(GetRecordPtr^).Flags := val;
end;
function __FINDREPLACE__Wrapper.getFlags : DWORD;
begin
result := FINDREPLACE(GetRecordPtr^).Flags;
end;
procedure __FINDREPLACE__Wrapper.setwFindWhatLen(const val : Word);
begin
FINDREPLACE(GetRecordPtr^).wFindWhatLen := val;
end;
function __FINDREPLACE__Wrapper.getwFindWhatLen : Word;
begin
result := FINDREPLACE(GetRecordPtr^).wFindWhatLen;
end;
procedure __FINDREPLACE__Wrapper.setwReplaceWithLen(const val : Word);
begin
FINDREPLACE(GetRecordPtr^).wReplaceWithLen := val;
end;
function __FINDREPLACE__Wrapper.getwReplaceWithLen : Word;
begin
result := FINDREPLACE(GetRecordPtr^).wReplaceWithLen;
end;
procedure __FINDREPLACE__Wrapper.setlCustData(const val : LPARAM);
begin
FINDREPLACE(GetRecordPtr^).lCustData := val;
end;
function __FINDREPLACE__Wrapper.getlCustData : LPARAM;
begin
result := FINDREPLACE(GetRecordPtr^).lCustData;
end;
function __FINDREPLACEA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __FINDREPLACEA__Wrapper.setlStructSize(const val : DWORD);
begin
FINDREPLACEA(GetRecordPtr^).lStructSize := val;
end;
function __FINDREPLACEA__Wrapper.getlStructSize : DWORD;
begin
result := FINDREPLACEA(GetRecordPtr^).lStructSize;
end;
procedure __FINDREPLACEA__Wrapper.sethInstance(const val : HINST);
begin
FINDREPLACEA(GetRecordPtr^).hInstance := val;
end;
function __FINDREPLACEA__Wrapper.gethInstance : HINST;
begin
result := FINDREPLACEA(GetRecordPtr^).hInstance;
end;
procedure __FINDREPLACEA__Wrapper.setFlags(const val : DWORD);
begin
FINDREPLACEA(GetRecordPtr^).Flags := val;
end;
function __FINDREPLACEA__Wrapper.getFlags : DWORD;
begin
result := FINDREPLACEA(GetRecordPtr^).Flags;
end;
procedure __FINDREPLACEA__Wrapper.setwFindWhatLen(const val : Word);
begin
FINDREPLACEA(GetRecordPtr^).wFindWhatLen := val;
end;
function __FINDREPLACEA__Wrapper.getwFindWhatLen : Word;
begin
result := FINDREPLACEA(GetRecordPtr^).wFindWhatLen;
end;
procedure __FINDREPLACEA__Wrapper.setwReplaceWithLen(const val : Word);
begin
FINDREPLACEA(GetRecordPtr^).wReplaceWithLen := val;
end;
function __FINDREPLACEA__Wrapper.getwReplaceWithLen : Word;
begin
result := FINDREPLACEA(GetRecordPtr^).wReplaceWithLen;
end;
procedure __FINDREPLACEA__Wrapper.setlCustData(const val : LPARAM);
begin
FINDREPLACEA(GetRecordPtr^).lCustData := val;
end;
function __FINDREPLACEA__Wrapper.getlCustData : LPARAM;
begin
result := FINDREPLACEA(GetRecordPtr^).lCustData;
end;
function __FINDREPLACEW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __FINDREPLACEW__Wrapper.setlStructSize(const val : DWORD);
begin
FINDREPLACEW(GetRecordPtr^).lStructSize := val;
end;
function __FINDREPLACEW__Wrapper.getlStructSize : DWORD;
begin
result := FINDREPLACEW(GetRecordPtr^).lStructSize;
end;
procedure __FINDREPLACEW__Wrapper.sethInstance(const val : HINST);
begin
FINDREPLACEW(GetRecordPtr^).hInstance := val;
end;
function __FINDREPLACEW__Wrapper.gethInstance : HINST;
begin
result := FINDREPLACEW(GetRecordPtr^).hInstance;
end;
procedure __FINDREPLACEW__Wrapper.setFlags(const val : DWORD);
begin
FINDREPLACEW(GetRecordPtr^).Flags := val;
end;
function __FINDREPLACEW__Wrapper.getFlags : DWORD;
begin
result := FINDREPLACEW(GetRecordPtr^).Flags;
end;
procedure __FINDREPLACEW__Wrapper.setwFindWhatLen(const val : Word);
begin
FINDREPLACEW(GetRecordPtr^).wFindWhatLen := val;
end;
function __FINDREPLACEW__Wrapper.getwFindWhatLen : Word;
begin
result := FINDREPLACEW(GetRecordPtr^).wFindWhatLen;
end;
procedure __FINDREPLACEW__Wrapper.setwReplaceWithLen(const val : Word);
begin
FINDREPLACEW(GetRecordPtr^).wReplaceWithLen := val;
end;
function __FINDREPLACEW__Wrapper.getwReplaceWithLen : Word;
begin
result := FINDREPLACEW(GetRecordPtr^).wReplaceWithLen;
end;
procedure __FINDREPLACEW__Wrapper.setlCustData(const val : LPARAM);
begin
FINDREPLACEW(GetRecordPtr^).lCustData := val;
end;
function __FINDREPLACEW__Wrapper.getlCustData : LPARAM;
begin
result := FINDREPLACEW(GetRecordPtr^).lCustData;
end;
function __OFNOTIFY__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __OFNOTIFYA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __OFNOTIFYEX__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __OFNOTIFYEXA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __OFNOTIFYEXW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __OFNOTIFYW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __OPENFILENAME__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __OPENFILENAME__Wrapper.setlStructSize(const val : DWORD);
begin
OPENFILENAME(GetRecordPtr^).lStructSize := val;
end;
function __OPENFILENAME__Wrapper.getlStructSize : DWORD;
begin
result := OPENFILENAME(GetRecordPtr^).lStructSize;
end;
procedure __OPENFILENAME__Wrapper.sethInstance(const val : HINST);
begin
OPENFILENAME(GetRecordPtr^).hInstance := val;
end;
function __OPENFILENAME__Wrapper.gethInstance : HINST;
begin
result := OPENFILENAME(GetRecordPtr^).hInstance;
end;
procedure __OPENFILENAME__Wrapper.setnMaxCustFilter(const val : DWORD);
begin
OPENFILENAME(GetRecordPtr^).nMaxCustFilter := val;
end;
function __OPENFILENAME__Wrapper.getnMaxCustFilter : DWORD;
begin
result := OPENFILENAME(GetRecordPtr^).nMaxCustFilter;
end;
procedure __OPENFILENAME__Wrapper.setnFilterIndex(const val : DWORD);
begin
OPENFILENAME(GetRecordPtr^).nFilterIndex := val;
end;
function __OPENFILENAME__Wrapper.getnFilterIndex : DWORD;
begin
result := OPENFILENAME(GetRecordPtr^).nFilterIndex;
end;
procedure __OPENFILENAME__Wrapper.setnMaxFile(const val : DWORD);
begin
OPENFILENAME(GetRecordPtr^).nMaxFile := val;
end;
function __OPENFILENAME__Wrapper.getnMaxFile : DWORD;
begin
result := OPENFILENAME(GetRecordPtr^).nMaxFile;
end;
procedure __OPENFILENAME__Wrapper.setnMaxFileTitle(const val : DWORD);
begin
OPENFILENAME(GetRecordPtr^).nMaxFileTitle := val;
end;
function __OPENFILENAME__Wrapper.getnMaxFileTitle : DWORD;
begin
result := OPENFILENAME(GetRecordPtr^).nMaxFileTitle;
end;
procedure __OPENFILENAME__Wrapper.setFlags(const val : DWORD);
begin
OPENFILENAME(GetRecordPtr^).Flags := val;
end;
function __OPENFILENAME__Wrapper.getFlags : DWORD;
begin
result := OPENFILENAME(GetRecordPtr^).Flags;
end;
procedure __OPENFILENAME__Wrapper.setnFileOffset(const val : Word);
begin
OPENFILENAME(GetRecordPtr^).nFileOffset := val;
end;
function __OPENFILENAME__Wrapper.getnFileOffset : Word;
begin
result := OPENFILENAME(GetRecordPtr^).nFileOffset;
end;
procedure __OPENFILENAME__Wrapper.setnFileExtension(const val : Word);
begin
OPENFILENAME(GetRecordPtr^).nFileExtension := val;
end;
function __OPENFILENAME__Wrapper.getnFileExtension : Word;
begin
result := OPENFILENAME(GetRecordPtr^).nFileExtension;
end;
procedure __OPENFILENAME__Wrapper.setlCustData(const val : LPARAM);
begin
OPENFILENAME(GetRecordPtr^).lCustData := val;
end;
function __OPENFILENAME__Wrapper.getlCustData : LPARAM;
begin
result := OPENFILENAME(GetRecordPtr^).lCustData;
end;
procedure __OPENFILENAME__Wrapper.setdwReserved(const val : DWORD);
begin
OPENFILENAME(GetRecordPtr^).dwReserved := val;
end;
function __OPENFILENAME__Wrapper.getdwReserved : DWORD;
begin
result := OPENFILENAME(GetRecordPtr^).dwReserved;
end;
procedure __OPENFILENAME__Wrapper.setFlagsEx(const val : DWORD);
begin
OPENFILENAME(GetRecordPtr^).FlagsEx := val;
end;
function __OPENFILENAME__Wrapper.getFlagsEx : DWORD;
begin
result := OPENFILENAME(GetRecordPtr^).FlagsEx;
end;
function __OPENFILENAMEA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __OPENFILENAMEA__Wrapper.setlStructSize(const val : DWORD);
begin
OPENFILENAMEA(GetRecordPtr^).lStructSize := val;
end;
function __OPENFILENAMEA__Wrapper.getlStructSize : DWORD;
begin
result := OPENFILENAMEA(GetRecordPtr^).lStructSize;
end;
procedure __OPENFILENAMEA__Wrapper.sethInstance(const val : HINST);
begin
OPENFILENAMEA(GetRecordPtr^).hInstance := val;
end;
function __OPENFILENAMEA__Wrapper.gethInstance : HINST;
begin
result := OPENFILENAMEA(GetRecordPtr^).hInstance;
end;
procedure __OPENFILENAMEA__Wrapper.setnMaxCustFilter(const val : DWORD);
begin
OPENFILENAMEA(GetRecordPtr^).nMaxCustFilter := val;
end;
function __OPENFILENAMEA__Wrapper.getnMaxCustFilter : DWORD;
begin
result := OPENFILENAMEA(GetRecordPtr^).nMaxCustFilter;
end;
procedure __OPENFILENAMEA__Wrapper.setnFilterIndex(const val : DWORD);
begin
OPENFILENAMEA(GetRecordPtr^).nFilterIndex := val;
end;
function __OPENFILENAMEA__Wrapper.getnFilterIndex : DWORD;
begin
result := OPENFILENAMEA(GetRecordPtr^).nFilterIndex;
end;
procedure __OPENFILENAMEA__Wrapper.setnMaxFile(const val : DWORD);
begin
OPENFILENAMEA(GetRecordPtr^).nMaxFile := val;
end;
function __OPENFILENAMEA__Wrapper.getnMaxFile : DWORD;
begin
result := OPENFILENAMEA(GetRecordPtr^).nMaxFile;
end;
procedure __OPENFILENAMEA__Wrapper.setnMaxFileTitle(const val : DWORD);
begin
OPENFILENAMEA(GetRecordPtr^).nMaxFileTitle := val;
end;
function __OPENFILENAMEA__Wrapper.getnMaxFileTitle : DWORD;
begin
result := OPENFILENAMEA(GetRecordPtr^).nMaxFileTitle;
end;
procedure __OPENFILENAMEA__Wrapper.setFlags(const val : DWORD);
begin
OPENFILENAMEA(GetRecordPtr^).Flags := val;
end;
function __OPENFILENAMEA__Wrapper.getFlags : DWORD;
begin
result := OPENFILENAMEA(GetRecordPtr^).Flags;
end;
procedure __OPENFILENAMEA__Wrapper.setnFileOffset(const val : Word);
begin
OPENFILENAMEA(GetRecordPtr^).nFileOffset := val;
end;
function __OPENFILENAMEA__Wrapper.getnFileOffset : Word;
begin
result := OPENFILENAMEA(GetRecordPtr^).nFileOffset;
end;
procedure __OPENFILENAMEA__Wrapper.setnFileExtension(const val : Word);
begin
OPENFILENAMEA(GetRecordPtr^).nFileExtension := val;
end;
function __OPENFILENAMEA__Wrapper.getnFileExtension : Word;
begin
result := OPENFILENAMEA(GetRecordPtr^).nFileExtension;
end;
procedure __OPENFILENAMEA__Wrapper.setlCustData(const val : LPARAM);
begin
OPENFILENAMEA(GetRecordPtr^).lCustData := val;
end;
function __OPENFILENAMEA__Wrapper.getlCustData : LPARAM;
begin
result := OPENFILENAMEA(GetRecordPtr^).lCustData;
end;
procedure __OPENFILENAMEA__Wrapper.setdwReserved(const val : DWORD);
begin
OPENFILENAMEA(GetRecordPtr^).dwReserved := val;
end;
function __OPENFILENAMEA__Wrapper.getdwReserved : DWORD;
begin
result := OPENFILENAMEA(GetRecordPtr^).dwReserved;
end;
procedure __OPENFILENAMEA__Wrapper.setFlagsEx(const val : DWORD);
begin
OPENFILENAMEA(GetRecordPtr^).FlagsEx := val;
end;
function __OPENFILENAMEA__Wrapper.getFlagsEx : DWORD;
begin
result := OPENFILENAMEA(GetRecordPtr^).FlagsEx;
end;
function __OPENFILENAMEW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __OPENFILENAMEW__Wrapper.setlStructSize(const val : DWORD);
begin
OPENFILENAMEW(GetRecordPtr^).lStructSize := val;
end;
function __OPENFILENAMEW__Wrapper.getlStructSize : DWORD;
begin
result := OPENFILENAMEW(GetRecordPtr^).lStructSize;
end;
procedure __OPENFILENAMEW__Wrapper.sethInstance(const val : HINST);
begin
OPENFILENAMEW(GetRecordPtr^).hInstance := val;
end;
function __OPENFILENAMEW__Wrapper.gethInstance : HINST;
begin
result := OPENFILENAMEW(GetRecordPtr^).hInstance;
end;
procedure __OPENFILENAMEW__Wrapper.setnMaxCustFilter(const val : DWORD);
begin
OPENFILENAMEW(GetRecordPtr^).nMaxCustFilter := val;
end;
function __OPENFILENAMEW__Wrapper.getnMaxCustFilter : DWORD;
begin
result := OPENFILENAMEW(GetRecordPtr^).nMaxCustFilter;
end;
procedure __OPENFILENAMEW__Wrapper.setnFilterIndex(const val : DWORD);
begin
OPENFILENAMEW(GetRecordPtr^).nFilterIndex := val;
end;
function __OPENFILENAMEW__Wrapper.getnFilterIndex : DWORD;
begin
result := OPENFILENAMEW(GetRecordPtr^).nFilterIndex;
end;
procedure __OPENFILENAMEW__Wrapper.setnMaxFile(const val : DWORD);
begin
OPENFILENAMEW(GetRecordPtr^).nMaxFile := val;
end;
function __OPENFILENAMEW__Wrapper.getnMaxFile : DWORD;
begin
result := OPENFILENAMEW(GetRecordPtr^).nMaxFile;
end;
procedure __OPENFILENAMEW__Wrapper.setnMaxFileTitle(const val : DWORD);
begin
OPENFILENAMEW(GetRecordPtr^).nMaxFileTitle := val;
end;
function __OPENFILENAMEW__Wrapper.getnMaxFileTitle : DWORD;
begin
result := OPENFILENAMEW(GetRecordPtr^).nMaxFileTitle;
end;
procedure __OPENFILENAMEW__Wrapper.setFlags(const val : DWORD);
begin
OPENFILENAMEW(GetRecordPtr^).Flags := val;
end;
function __OPENFILENAMEW__Wrapper.getFlags : DWORD;
begin
result := OPENFILENAMEW(GetRecordPtr^).Flags;
end;
procedure __OPENFILENAMEW__Wrapper.setnFileOffset(const val : Word);
begin
OPENFILENAMEW(GetRecordPtr^).nFileOffset := val;
end;
function __OPENFILENAMEW__Wrapper.getnFileOffset : Word;
begin
result := OPENFILENAMEW(GetRecordPtr^).nFileOffset;
end;
procedure __OPENFILENAMEW__Wrapper.setnFileExtension(const val : Word);
begin
OPENFILENAMEW(GetRecordPtr^).nFileExtension := val;
end;
function __OPENFILENAMEW__Wrapper.getnFileExtension : Word;
begin
result := OPENFILENAMEW(GetRecordPtr^).nFileExtension;
end;
procedure __OPENFILENAMEW__Wrapper.setlCustData(const val : LPARAM);
begin
OPENFILENAMEW(GetRecordPtr^).lCustData := val;
end;
function __OPENFILENAMEW__Wrapper.getlCustData : LPARAM;
begin
result := OPENFILENAMEW(GetRecordPtr^).lCustData;
end;
procedure __OPENFILENAMEW__Wrapper.setdwReserved(const val : DWORD);
begin
OPENFILENAMEW(GetRecordPtr^).dwReserved := val;
end;
function __OPENFILENAMEW__Wrapper.getdwReserved : DWORD;
begin
result := OPENFILENAMEW(GetRecordPtr^).dwReserved;
end;
procedure __OPENFILENAMEW__Wrapper.setFlagsEx(const val : DWORD);
begin
OPENFILENAMEW(GetRecordPtr^).FlagsEx := val;
end;
function __OPENFILENAMEW__Wrapper.getFlagsEx : DWORD;
begin
result := OPENFILENAMEW(GetRecordPtr^).FlagsEx;
end;
function __tagCHOOSECOLOR__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagCHOOSECOLOR__Wrapper.setlStructSize(const val : DWORD);
begin
tagCHOOSECOLOR(GetRecordPtr^).lStructSize := val;
end;
function __tagCHOOSECOLOR__Wrapper.getlStructSize : DWORD;
begin
result := tagCHOOSECOLOR(GetRecordPtr^).lStructSize;
end;
procedure __tagCHOOSECOLOR__Wrapper.setrgbResult(const val : COLORREF);
begin
tagCHOOSECOLOR(GetRecordPtr^).rgbResult := val;
end;
function __tagCHOOSECOLOR__Wrapper.getrgbResult : COLORREF;
begin
result := tagCHOOSECOLOR(GetRecordPtr^).rgbResult;
end;
procedure __tagCHOOSECOLOR__Wrapper.setFlags(const val : DWORD);
begin
tagCHOOSECOLOR(GetRecordPtr^).Flags := val;
end;
function __tagCHOOSECOLOR__Wrapper.getFlags : DWORD;
begin
result := tagCHOOSECOLOR(GetRecordPtr^).Flags;
end;
procedure __tagCHOOSECOLOR__Wrapper.setlCustData(const val : LPARAM);
begin
tagCHOOSECOLOR(GetRecordPtr^).lCustData := val;
end;
function __tagCHOOSECOLOR__Wrapper.getlCustData : LPARAM;
begin
result := tagCHOOSECOLOR(GetRecordPtr^).lCustData;
end;
function __tagCHOOSECOLORA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagCHOOSECOLORA__Wrapper.setlStructSize(const val : DWORD);
begin
tagCHOOSECOLORA(GetRecordPtr^).lStructSize := val;
end;
function __tagCHOOSECOLORA__Wrapper.getlStructSize : DWORD;
begin
result := tagCHOOSECOLORA(GetRecordPtr^).lStructSize;
end;
procedure __tagCHOOSECOLORA__Wrapper.setrgbResult(const val : COLORREF);
begin
tagCHOOSECOLORA(GetRecordPtr^).rgbResult := val;
end;
function __tagCHOOSECOLORA__Wrapper.getrgbResult : COLORREF;
begin
result := tagCHOOSECOLORA(GetRecordPtr^).rgbResult;
end;
procedure __tagCHOOSECOLORA__Wrapper.setFlags(const val : DWORD);
begin
tagCHOOSECOLORA(GetRecordPtr^).Flags := val;
end;
function __tagCHOOSECOLORA__Wrapper.getFlags : DWORD;
begin
result := tagCHOOSECOLORA(GetRecordPtr^).Flags;
end;
procedure __tagCHOOSECOLORA__Wrapper.setlCustData(const val : LPARAM);
begin
tagCHOOSECOLORA(GetRecordPtr^).lCustData := val;
end;
function __tagCHOOSECOLORA__Wrapper.getlCustData : LPARAM;
begin
result := tagCHOOSECOLORA(GetRecordPtr^).lCustData;
end;
function __tagCHOOSECOLORW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagCHOOSECOLORW__Wrapper.setlStructSize(const val : DWORD);
begin
tagCHOOSECOLORW(GetRecordPtr^).lStructSize := val;
end;
function __tagCHOOSECOLORW__Wrapper.getlStructSize : DWORD;
begin
result := tagCHOOSECOLORW(GetRecordPtr^).lStructSize;
end;
procedure __tagCHOOSECOLORW__Wrapper.setrgbResult(const val : COLORREF);
begin
tagCHOOSECOLORW(GetRecordPtr^).rgbResult := val;
end;
function __tagCHOOSECOLORW__Wrapper.getrgbResult : COLORREF;
begin
result := tagCHOOSECOLORW(GetRecordPtr^).rgbResult;
end;
procedure __tagCHOOSECOLORW__Wrapper.setFlags(const val : DWORD);
begin
tagCHOOSECOLORW(GetRecordPtr^).Flags := val;
end;
function __tagCHOOSECOLORW__Wrapper.getFlags : DWORD;
begin
result := tagCHOOSECOLORW(GetRecordPtr^).Flags;
end;
procedure __tagCHOOSECOLORW__Wrapper.setlCustData(const val : LPARAM);
begin
tagCHOOSECOLORW(GetRecordPtr^).lCustData := val;
end;
function __tagCHOOSECOLORW__Wrapper.getlCustData : LPARAM;
begin
result := tagCHOOSECOLORW(GetRecordPtr^).lCustData;
end;
function __tagCHOOSEFONT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagCHOOSEFONT__Wrapper.setlStructSize(const val : DWORD);
begin
tagCHOOSEFONT(GetRecordPtr^).lStructSize := val;
end;
function __tagCHOOSEFONT__Wrapper.getlStructSize : DWORD;
begin
result := tagCHOOSEFONT(GetRecordPtr^).lStructSize;
end;
procedure __tagCHOOSEFONT__Wrapper.setiPointSize(const val : Integer);
begin
tagCHOOSEFONT(GetRecordPtr^).iPointSize := val;
end;
function __tagCHOOSEFONT__Wrapper.getiPointSize : Integer;
begin
result := tagCHOOSEFONT(GetRecordPtr^).iPointSize;
end;
procedure __tagCHOOSEFONT__Wrapper.setFlags(const val : DWORD);
begin
tagCHOOSEFONT(GetRecordPtr^).Flags := val;
end;
function __tagCHOOSEFONT__Wrapper.getFlags : DWORD;
begin
result := tagCHOOSEFONT(GetRecordPtr^).Flags;
end;
procedure __tagCHOOSEFONT__Wrapper.setrgbColors(const val : COLORREF);
begin
tagCHOOSEFONT(GetRecordPtr^).rgbColors := val;
end;
function __tagCHOOSEFONT__Wrapper.getrgbColors : COLORREF;
begin
result := tagCHOOSEFONT(GetRecordPtr^).rgbColors;
end;
procedure __tagCHOOSEFONT__Wrapper.setlCustData(const val : LPARAM);
begin
tagCHOOSEFONT(GetRecordPtr^).lCustData := val;
end;
function __tagCHOOSEFONT__Wrapper.getlCustData : LPARAM;
begin
result := tagCHOOSEFONT(GetRecordPtr^).lCustData;
end;
procedure __tagCHOOSEFONT__Wrapper.sethInstance(const val : HINST);
begin
tagCHOOSEFONT(GetRecordPtr^).hInstance := val;
end;
function __tagCHOOSEFONT__Wrapper.gethInstance : HINST;
begin
result := tagCHOOSEFONT(GetRecordPtr^).hInstance;
end;
procedure __tagCHOOSEFONT__Wrapper.setnFontType(const val : Word);
begin
tagCHOOSEFONT(GetRecordPtr^).nFontType := val;
end;
function __tagCHOOSEFONT__Wrapper.getnFontType : Word;
begin
result := tagCHOOSEFONT(GetRecordPtr^).nFontType;
end;
procedure __tagCHOOSEFONT__Wrapper.setwReserved(const val : Word);
begin
tagCHOOSEFONT(GetRecordPtr^).wReserved := val;
end;
function __tagCHOOSEFONT__Wrapper.getwReserved : Word;
begin
result := tagCHOOSEFONT(GetRecordPtr^).wReserved;
end;
procedure __tagCHOOSEFONT__Wrapper.setnSizeMin(const val : Integer);
begin
tagCHOOSEFONT(GetRecordPtr^).nSizeMin := val;
end;
function __tagCHOOSEFONT__Wrapper.getnSizeMin : Integer;
begin
result := tagCHOOSEFONT(GetRecordPtr^).nSizeMin;
end;
procedure __tagCHOOSEFONT__Wrapper.setnSizeMax(const val : Integer);
begin
tagCHOOSEFONT(GetRecordPtr^).nSizeMax := val;
end;
function __tagCHOOSEFONT__Wrapper.getnSizeMax : Integer;
begin
result := tagCHOOSEFONT(GetRecordPtr^).nSizeMax;
end;
function __tagCHOOSEFONTA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagCHOOSEFONTA__Wrapper.setlStructSize(const val : DWORD);
begin
tagCHOOSEFONTA(GetRecordPtr^).lStructSize := val;
end;
function __tagCHOOSEFONTA__Wrapper.getlStructSize : DWORD;
begin
result := tagCHOOSEFONTA(GetRecordPtr^).lStructSize;
end;
procedure __tagCHOOSEFONTA__Wrapper.setiPointSize(const val : Integer);
begin
tagCHOOSEFONTA(GetRecordPtr^).iPointSize := val;
end;
function __tagCHOOSEFONTA__Wrapper.getiPointSize : Integer;
begin
result := tagCHOOSEFONTA(GetRecordPtr^).iPointSize;
end;
procedure __tagCHOOSEFONTA__Wrapper.setFlags(const val : DWORD);
begin
tagCHOOSEFONTA(GetRecordPtr^).Flags := val;
end;
function __tagCHOOSEFONTA__Wrapper.getFlags : DWORD;
begin
result := tagCHOOSEFONTA(GetRecordPtr^).Flags;
end;
procedure __tagCHOOSEFONTA__Wrapper.setrgbColors(const val : COLORREF);
begin
tagCHOOSEFONTA(GetRecordPtr^).rgbColors := val;
end;
function __tagCHOOSEFONTA__Wrapper.getrgbColors : COLORREF;
begin
result := tagCHOOSEFONTA(GetRecordPtr^).rgbColors;
end;
procedure __tagCHOOSEFONTA__Wrapper.setlCustData(const val : LPARAM);
begin
tagCHOOSEFONTA(GetRecordPtr^).lCustData := val;
end;
function __tagCHOOSEFONTA__Wrapper.getlCustData : LPARAM;
begin
result := tagCHOOSEFONTA(GetRecordPtr^).lCustData;
end;
procedure __tagCHOOSEFONTA__Wrapper.sethInstance(const val : HINST);
begin
tagCHOOSEFONTA(GetRecordPtr^).hInstance := val;
end;
function __tagCHOOSEFONTA__Wrapper.gethInstance : HINST;
begin
result := tagCHOOSEFONTA(GetRecordPtr^).hInstance;
end;
procedure __tagCHOOSEFONTA__Wrapper.setnFontType(const val : Word);
begin
tagCHOOSEFONTA(GetRecordPtr^).nFontType := val;
end;
function __tagCHOOSEFONTA__Wrapper.getnFontType : Word;
begin
result := tagCHOOSEFONTA(GetRecordPtr^).nFontType;
end;
procedure __tagCHOOSEFONTA__Wrapper.setwReserved(const val : Word);
begin
tagCHOOSEFONTA(GetRecordPtr^).wReserved := val;
end;
function __tagCHOOSEFONTA__Wrapper.getwReserved : Word;
begin
result := tagCHOOSEFONTA(GetRecordPtr^).wReserved;
end;
procedure __tagCHOOSEFONTA__Wrapper.setnSizeMin(const val : Integer);
begin
tagCHOOSEFONTA(GetRecordPtr^).nSizeMin := val;
end;
function __tagCHOOSEFONTA__Wrapper.getnSizeMin : Integer;
begin
result := tagCHOOSEFONTA(GetRecordPtr^).nSizeMin;
end;
procedure __tagCHOOSEFONTA__Wrapper.setnSizeMax(const val : Integer);
begin
tagCHOOSEFONTA(GetRecordPtr^).nSizeMax := val;
end;
function __tagCHOOSEFONTA__Wrapper.getnSizeMax : Integer;
begin
result := tagCHOOSEFONTA(GetRecordPtr^).nSizeMax;
end;
function __tagCHOOSEFONTW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagCHOOSEFONTW__Wrapper.setlStructSize(const val : DWORD);
begin
tagCHOOSEFONTW(GetRecordPtr^).lStructSize := val;
end;
function __tagCHOOSEFONTW__Wrapper.getlStructSize : DWORD;
begin
result := tagCHOOSEFONTW(GetRecordPtr^).lStructSize;
end;
procedure __tagCHOOSEFONTW__Wrapper.setiPointSize(const val : Integer);
begin
tagCHOOSEFONTW(GetRecordPtr^).iPointSize := val;
end;
function __tagCHOOSEFONTW__Wrapper.getiPointSize : Integer;
begin
result := tagCHOOSEFONTW(GetRecordPtr^).iPointSize;
end;
procedure __tagCHOOSEFONTW__Wrapper.setFlags(const val : DWORD);
begin
tagCHOOSEFONTW(GetRecordPtr^).Flags := val;
end;
function __tagCHOOSEFONTW__Wrapper.getFlags : DWORD;
begin
result := tagCHOOSEFONTW(GetRecordPtr^).Flags;
end;
procedure __tagCHOOSEFONTW__Wrapper.setrgbColors(const val : COLORREF);
begin
tagCHOOSEFONTW(GetRecordPtr^).rgbColors := val;
end;
function __tagCHOOSEFONTW__Wrapper.getrgbColors : COLORREF;
begin
result := tagCHOOSEFONTW(GetRecordPtr^).rgbColors;
end;
procedure __tagCHOOSEFONTW__Wrapper.setlCustData(const val : LPARAM);
begin
tagCHOOSEFONTW(GetRecordPtr^).lCustData := val;
end;
function __tagCHOOSEFONTW__Wrapper.getlCustData : LPARAM;
begin
result := tagCHOOSEFONTW(GetRecordPtr^).lCustData;
end;
procedure __tagCHOOSEFONTW__Wrapper.sethInstance(const val : HINST);
begin
tagCHOOSEFONTW(GetRecordPtr^).hInstance := val;
end;
function __tagCHOOSEFONTW__Wrapper.gethInstance : HINST;
begin
result := tagCHOOSEFONTW(GetRecordPtr^).hInstance;
end;
procedure __tagCHOOSEFONTW__Wrapper.setnFontType(const val : Word);
begin
tagCHOOSEFONTW(GetRecordPtr^).nFontType := val;
end;
function __tagCHOOSEFONTW__Wrapper.getnFontType : Word;
begin
result := tagCHOOSEFONTW(GetRecordPtr^).nFontType;
end;
procedure __tagCHOOSEFONTW__Wrapper.setwReserved(const val : Word);
begin
tagCHOOSEFONTW(GetRecordPtr^).wReserved := val;
end;
function __tagCHOOSEFONTW__Wrapper.getwReserved : Word;
begin
result := tagCHOOSEFONTW(GetRecordPtr^).wReserved;
end;
procedure __tagCHOOSEFONTW__Wrapper.setnSizeMin(const val : Integer);
begin
tagCHOOSEFONTW(GetRecordPtr^).nSizeMin := val;
end;
function __tagCHOOSEFONTW__Wrapper.getnSizeMin : Integer;
begin
result := tagCHOOSEFONTW(GetRecordPtr^).nSizeMin;
end;
procedure __tagCHOOSEFONTW__Wrapper.setnSizeMax(const val : Integer);
begin
tagCHOOSEFONTW(GetRecordPtr^).nSizeMax := val;
end;
function __tagCHOOSEFONTW__Wrapper.getnSizeMax : Integer;
begin
result := tagCHOOSEFONTW(GetRecordPtr^).nSizeMax;
end;
function __tagDEVNAMES__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagDEVNAMES__Wrapper.setwDriverOffset(const val : Word);
begin
tagDEVNAMES(GetRecordPtr^).wDriverOffset := val;
end;
function __tagDEVNAMES__Wrapper.getwDriverOffset : Word;
begin
result := tagDEVNAMES(GetRecordPtr^).wDriverOffset;
end;
procedure __tagDEVNAMES__Wrapper.setwDeviceOffset(const val : Word);
begin
tagDEVNAMES(GetRecordPtr^).wDeviceOffset := val;
end;
function __tagDEVNAMES__Wrapper.getwDeviceOffset : Word;
begin
result := tagDEVNAMES(GetRecordPtr^).wDeviceOffset;
end;
procedure __tagDEVNAMES__Wrapper.setwOutputOffset(const val : Word);
begin
tagDEVNAMES(GetRecordPtr^).wOutputOffset := val;
end;
function __tagDEVNAMES__Wrapper.getwOutputOffset : Word;
begin
result := tagDEVNAMES(GetRecordPtr^).wOutputOffset;
end;
procedure __tagDEVNAMES__Wrapper.setwDefault(const val : Word);
begin
tagDEVNAMES(GetRecordPtr^).wDefault := val;
end;
function __tagDEVNAMES__Wrapper.getwDefault : Word;
begin
result := tagDEVNAMES(GetRecordPtr^).wDefault;
end;
function __tagFINDREPLACE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagFINDREPLACE__Wrapper.setlStructSize(const val : DWORD);
begin
tagFINDREPLACE(GetRecordPtr^).lStructSize := val;
end;
function __tagFINDREPLACE__Wrapper.getlStructSize : DWORD;
begin
result := tagFINDREPLACE(GetRecordPtr^).lStructSize;
end;
procedure __tagFINDREPLACE__Wrapper.sethInstance(const val : HINST);
begin
tagFINDREPLACE(GetRecordPtr^).hInstance := val;
end;
function __tagFINDREPLACE__Wrapper.gethInstance : HINST;
begin
result := tagFINDREPLACE(GetRecordPtr^).hInstance;
end;
procedure __tagFINDREPLACE__Wrapper.setFlags(const val : DWORD);
begin
tagFINDREPLACE(GetRecordPtr^).Flags := val;
end;
function __tagFINDREPLACE__Wrapper.getFlags : DWORD;
begin
result := tagFINDREPLACE(GetRecordPtr^).Flags;
end;
procedure __tagFINDREPLACE__Wrapper.setwFindWhatLen(const val : Word);
begin
tagFINDREPLACE(GetRecordPtr^).wFindWhatLen := val;
end;
function __tagFINDREPLACE__Wrapper.getwFindWhatLen : Word;
begin
result := tagFINDREPLACE(GetRecordPtr^).wFindWhatLen;
end;
procedure __tagFINDREPLACE__Wrapper.setwReplaceWithLen(const val : Word);
begin
tagFINDREPLACE(GetRecordPtr^).wReplaceWithLen := val;
end;
function __tagFINDREPLACE__Wrapper.getwReplaceWithLen : Word;
begin
result := tagFINDREPLACE(GetRecordPtr^).wReplaceWithLen;
end;
procedure __tagFINDREPLACE__Wrapper.setlCustData(const val : LPARAM);
begin
tagFINDREPLACE(GetRecordPtr^).lCustData := val;
end;
function __tagFINDREPLACE__Wrapper.getlCustData : LPARAM;
begin
result := tagFINDREPLACE(GetRecordPtr^).lCustData;
end;
function __tagFINDREPLACEA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagFINDREPLACEA__Wrapper.setlStructSize(const val : DWORD);
begin
tagFINDREPLACEA(GetRecordPtr^).lStructSize := val;
end;
function __tagFINDREPLACEA__Wrapper.getlStructSize : DWORD;
begin
result := tagFINDREPLACEA(GetRecordPtr^).lStructSize;
end;
procedure __tagFINDREPLACEA__Wrapper.sethInstance(const val : HINST);
begin
tagFINDREPLACEA(GetRecordPtr^).hInstance := val;
end;
function __tagFINDREPLACEA__Wrapper.gethInstance : HINST;
begin
result := tagFINDREPLACEA(GetRecordPtr^).hInstance;
end;
procedure __tagFINDREPLACEA__Wrapper.setFlags(const val : DWORD);
begin
tagFINDREPLACEA(GetRecordPtr^).Flags := val;
end;
function __tagFINDREPLACEA__Wrapper.getFlags : DWORD;
begin
result := tagFINDREPLACEA(GetRecordPtr^).Flags;
end;
procedure __tagFINDREPLACEA__Wrapper.setwFindWhatLen(const val : Word);
begin
tagFINDREPLACEA(GetRecordPtr^).wFindWhatLen := val;
end;
function __tagFINDREPLACEA__Wrapper.getwFindWhatLen : Word;
begin
result := tagFINDREPLACEA(GetRecordPtr^).wFindWhatLen;
end;
procedure __tagFINDREPLACEA__Wrapper.setwReplaceWithLen(const val : Word);
begin
tagFINDREPLACEA(GetRecordPtr^).wReplaceWithLen := val;
end;
function __tagFINDREPLACEA__Wrapper.getwReplaceWithLen : Word;
begin
result := tagFINDREPLACEA(GetRecordPtr^).wReplaceWithLen;
end;
procedure __tagFINDREPLACEA__Wrapper.setlCustData(const val : LPARAM);
begin
tagFINDREPLACEA(GetRecordPtr^).lCustData := val;
end;
function __tagFINDREPLACEA__Wrapper.getlCustData : LPARAM;
begin
result := tagFINDREPLACEA(GetRecordPtr^).lCustData;
end;
function __tagFINDREPLACEW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagFINDREPLACEW__Wrapper.setlStructSize(const val : DWORD);
begin
tagFINDREPLACEW(GetRecordPtr^).lStructSize := val;
end;
function __tagFINDREPLACEW__Wrapper.getlStructSize : DWORD;
begin
result := tagFINDREPLACEW(GetRecordPtr^).lStructSize;
end;
procedure __tagFINDREPLACEW__Wrapper.sethInstance(const val : HINST);
begin
tagFINDREPLACEW(GetRecordPtr^).hInstance := val;
end;
function __tagFINDREPLACEW__Wrapper.gethInstance : HINST;
begin
result := tagFINDREPLACEW(GetRecordPtr^).hInstance;
end;
procedure __tagFINDREPLACEW__Wrapper.setFlags(const val : DWORD);
begin
tagFINDREPLACEW(GetRecordPtr^).Flags := val;
end;
function __tagFINDREPLACEW__Wrapper.getFlags : DWORD;
begin
result := tagFINDREPLACEW(GetRecordPtr^).Flags;
end;
procedure __tagFINDREPLACEW__Wrapper.setwFindWhatLen(const val : Word);
begin
tagFINDREPLACEW(GetRecordPtr^).wFindWhatLen := val;
end;
function __tagFINDREPLACEW__Wrapper.getwFindWhatLen : Word;
begin
result := tagFINDREPLACEW(GetRecordPtr^).wFindWhatLen;
end;
procedure __tagFINDREPLACEW__Wrapper.setwReplaceWithLen(const val : Word);
begin
tagFINDREPLACEW(GetRecordPtr^).wReplaceWithLen := val;
end;
function __tagFINDREPLACEW__Wrapper.getwReplaceWithLen : Word;
begin
result := tagFINDREPLACEW(GetRecordPtr^).wReplaceWithLen;
end;
procedure __tagFINDREPLACEW__Wrapper.setlCustData(const val : LPARAM);
begin
tagFINDREPLACEW(GetRecordPtr^).lCustData := val;
end;
function __tagFINDREPLACEW__Wrapper.getlCustData : LPARAM;
begin
result := tagFINDREPLACEW(GetRecordPtr^).lCustData;
end;
function __tagOFN__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagOFN__Wrapper.setlStructSize(const val : DWORD);
begin
tagOFN(GetRecordPtr^).lStructSize := val;
end;
function __tagOFN__Wrapper.getlStructSize : DWORD;
begin
result := tagOFN(GetRecordPtr^).lStructSize;
end;
procedure __tagOFN__Wrapper.sethInstance(const val : HINST);
begin
tagOFN(GetRecordPtr^).hInstance := val;
end;
function __tagOFN__Wrapper.gethInstance : HINST;
begin
result := tagOFN(GetRecordPtr^).hInstance;
end;
procedure __tagOFN__Wrapper.setnMaxCustFilter(const val : DWORD);
begin
tagOFN(GetRecordPtr^).nMaxCustFilter := val;
end;
function __tagOFN__Wrapper.getnMaxCustFilter : DWORD;
begin
result := tagOFN(GetRecordPtr^).nMaxCustFilter;
end;
procedure __tagOFN__Wrapper.setnFilterIndex(const val : DWORD);
begin
tagOFN(GetRecordPtr^).nFilterIndex := val;
end;
function __tagOFN__Wrapper.getnFilterIndex : DWORD;
begin
result := tagOFN(GetRecordPtr^).nFilterIndex;
end;
procedure __tagOFN__Wrapper.setnMaxFile(const val : DWORD);
begin
tagOFN(GetRecordPtr^).nMaxFile := val;
end;
function __tagOFN__Wrapper.getnMaxFile : DWORD;
begin
result := tagOFN(GetRecordPtr^).nMaxFile;
end;
procedure __tagOFN__Wrapper.setnMaxFileTitle(const val : DWORD);
begin
tagOFN(GetRecordPtr^).nMaxFileTitle := val;
end;
function __tagOFN__Wrapper.getnMaxFileTitle : DWORD;
begin
result := tagOFN(GetRecordPtr^).nMaxFileTitle;
end;
procedure __tagOFN__Wrapper.setFlags(const val : DWORD);
begin
tagOFN(GetRecordPtr^).Flags := val;
end;
function __tagOFN__Wrapper.getFlags : DWORD;
begin
result := tagOFN(GetRecordPtr^).Flags;
end;
procedure __tagOFN__Wrapper.setnFileOffset(const val : Word);
begin
tagOFN(GetRecordPtr^).nFileOffset := val;
end;
function __tagOFN__Wrapper.getnFileOffset : Word;
begin
result := tagOFN(GetRecordPtr^).nFileOffset;
end;
procedure __tagOFN__Wrapper.setnFileExtension(const val : Word);
begin
tagOFN(GetRecordPtr^).nFileExtension := val;
end;
function __tagOFN__Wrapper.getnFileExtension : Word;
begin
result := tagOFN(GetRecordPtr^).nFileExtension;
end;
procedure __tagOFN__Wrapper.setlCustData(const val : LPARAM);
begin
tagOFN(GetRecordPtr^).lCustData := val;
end;
function __tagOFN__Wrapper.getlCustData : LPARAM;
begin
result := tagOFN(GetRecordPtr^).lCustData;
end;
procedure __tagOFN__Wrapper.setdwReserved(const val : DWORD);
begin
tagOFN(GetRecordPtr^).dwReserved := val;
end;
function __tagOFN__Wrapper.getdwReserved : DWORD;
begin
result := tagOFN(GetRecordPtr^).dwReserved;
end;
procedure __tagOFN__Wrapper.setFlagsEx(const val : DWORD);
begin
tagOFN(GetRecordPtr^).FlagsEx := val;
end;
function __tagOFN__Wrapper.getFlagsEx : DWORD;
begin
result := tagOFN(GetRecordPtr^).FlagsEx;
end;
function __tagOFNA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagOFNA__Wrapper.setlStructSize(const val : DWORD);
begin
tagOFNA(GetRecordPtr^).lStructSize := val;
end;
function __tagOFNA__Wrapper.getlStructSize : DWORD;
begin
result := tagOFNA(GetRecordPtr^).lStructSize;
end;
procedure __tagOFNA__Wrapper.sethInstance(const val : HINST);
begin
tagOFNA(GetRecordPtr^).hInstance := val;
end;
function __tagOFNA__Wrapper.gethInstance : HINST;
begin
result := tagOFNA(GetRecordPtr^).hInstance;
end;
procedure __tagOFNA__Wrapper.setnMaxCustFilter(const val : DWORD);
begin
tagOFNA(GetRecordPtr^).nMaxCustFilter := val;
end;
function __tagOFNA__Wrapper.getnMaxCustFilter : DWORD;
begin
result := tagOFNA(GetRecordPtr^).nMaxCustFilter;
end;
procedure __tagOFNA__Wrapper.setnFilterIndex(const val : DWORD);
begin
tagOFNA(GetRecordPtr^).nFilterIndex := val;
end;
function __tagOFNA__Wrapper.getnFilterIndex : DWORD;
begin
result := tagOFNA(GetRecordPtr^).nFilterIndex;
end;
procedure __tagOFNA__Wrapper.setnMaxFile(const val : DWORD);
begin
tagOFNA(GetRecordPtr^).nMaxFile := val;
end;
function __tagOFNA__Wrapper.getnMaxFile : DWORD;
begin
result := tagOFNA(GetRecordPtr^).nMaxFile;
end;
procedure __tagOFNA__Wrapper.setnMaxFileTitle(const val : DWORD);
begin
tagOFNA(GetRecordPtr^).nMaxFileTitle := val;
end;
function __tagOFNA__Wrapper.getnMaxFileTitle : DWORD;
begin
result := tagOFNA(GetRecordPtr^).nMaxFileTitle;
end;
procedure __tagOFNA__Wrapper.setFlags(const val : DWORD);
begin
tagOFNA(GetRecordPtr^).Flags := val;
end;
function __tagOFNA__Wrapper.getFlags : DWORD;
begin
result := tagOFNA(GetRecordPtr^).Flags;
end;
procedure __tagOFNA__Wrapper.setnFileOffset(const val : Word);
begin
tagOFNA(GetRecordPtr^).nFileOffset := val;
end;
function __tagOFNA__Wrapper.getnFileOffset : Word;
begin
result := tagOFNA(GetRecordPtr^).nFileOffset;
end;
procedure __tagOFNA__Wrapper.setnFileExtension(const val : Word);
begin
tagOFNA(GetRecordPtr^).nFileExtension := val;
end;
function __tagOFNA__Wrapper.getnFileExtension : Word;
begin
result := tagOFNA(GetRecordPtr^).nFileExtension;
end;
procedure __tagOFNA__Wrapper.setlCustData(const val : LPARAM);
begin
tagOFNA(GetRecordPtr^).lCustData := val;
end;
function __tagOFNA__Wrapper.getlCustData : LPARAM;
begin
result := tagOFNA(GetRecordPtr^).lCustData;
end;
procedure __tagOFNA__Wrapper.setdwReserved(const val : DWORD);
begin
tagOFNA(GetRecordPtr^).dwReserved := val;
end;
function __tagOFNA__Wrapper.getdwReserved : DWORD;
begin
result := tagOFNA(GetRecordPtr^).dwReserved;
end;
procedure __tagOFNA__Wrapper.setFlagsEx(const val : DWORD);
begin
tagOFNA(GetRecordPtr^).FlagsEx := val;
end;
function __tagOFNA__Wrapper.getFlagsEx : DWORD;
begin
result := tagOFNA(GetRecordPtr^).FlagsEx;
end;
function __tagOFNW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagOFNW__Wrapper.setlStructSize(const val : DWORD);
begin
tagOFNW(GetRecordPtr^).lStructSize := val;
end;
function __tagOFNW__Wrapper.getlStructSize : DWORD;
begin
result := tagOFNW(GetRecordPtr^).lStructSize;
end;
procedure __tagOFNW__Wrapper.sethInstance(const val : HINST);
begin
tagOFNW(GetRecordPtr^).hInstance := val;
end;
function __tagOFNW__Wrapper.gethInstance : HINST;
begin
result := tagOFNW(GetRecordPtr^).hInstance;
end;
procedure __tagOFNW__Wrapper.setnMaxCustFilter(const val : DWORD);
begin
tagOFNW(GetRecordPtr^).nMaxCustFilter := val;
end;
function __tagOFNW__Wrapper.getnMaxCustFilter : DWORD;
begin
result := tagOFNW(GetRecordPtr^).nMaxCustFilter;
end;
procedure __tagOFNW__Wrapper.setnFilterIndex(const val : DWORD);
begin
tagOFNW(GetRecordPtr^).nFilterIndex := val;
end;
function __tagOFNW__Wrapper.getnFilterIndex : DWORD;
begin
result := tagOFNW(GetRecordPtr^).nFilterIndex;
end;
procedure __tagOFNW__Wrapper.setnMaxFile(const val : DWORD);
begin
tagOFNW(GetRecordPtr^).nMaxFile := val;
end;
function __tagOFNW__Wrapper.getnMaxFile : DWORD;
begin
result := tagOFNW(GetRecordPtr^).nMaxFile;
end;
procedure __tagOFNW__Wrapper.setnMaxFileTitle(const val : DWORD);
begin
tagOFNW(GetRecordPtr^).nMaxFileTitle := val;
end;
function __tagOFNW__Wrapper.getnMaxFileTitle : DWORD;
begin
result := tagOFNW(GetRecordPtr^).nMaxFileTitle;
end;
procedure __tagOFNW__Wrapper.setFlags(const val : DWORD);
begin
tagOFNW(GetRecordPtr^).Flags := val;
end;
function __tagOFNW__Wrapper.getFlags : DWORD;
begin
result := tagOFNW(GetRecordPtr^).Flags;
end;
procedure __tagOFNW__Wrapper.setnFileOffset(const val : Word);
begin
tagOFNW(GetRecordPtr^).nFileOffset := val;
end;
function __tagOFNW__Wrapper.getnFileOffset : Word;
begin
result := tagOFNW(GetRecordPtr^).nFileOffset;
end;
procedure __tagOFNW__Wrapper.setnFileExtension(const val : Word);
begin
tagOFNW(GetRecordPtr^).nFileExtension := val;
end;
function __tagOFNW__Wrapper.getnFileExtension : Word;
begin
result := tagOFNW(GetRecordPtr^).nFileExtension;
end;
procedure __tagOFNW__Wrapper.setlCustData(const val : LPARAM);
begin
tagOFNW(GetRecordPtr^).lCustData := val;
end;
function __tagOFNW__Wrapper.getlCustData : LPARAM;
begin
result := tagOFNW(GetRecordPtr^).lCustData;
end;
procedure __tagOFNW__Wrapper.setdwReserved(const val : DWORD);
begin
tagOFNW(GetRecordPtr^).dwReserved := val;
end;
function __tagOFNW__Wrapper.getdwReserved : DWORD;
begin
result := tagOFNW(GetRecordPtr^).dwReserved;
end;
procedure __tagOFNW__Wrapper.setFlagsEx(const val : DWORD);
begin
tagOFNW(GetRecordPtr^).FlagsEx := val;
end;
function __tagOFNW__Wrapper.getFlagsEx : DWORD;
begin
result := tagOFNW(GetRecordPtr^).FlagsEx;
end;
function __tagPD__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagPD__Wrapper.setlStructSize(const val : DWORD);
begin
tagPD(GetRecordPtr^).lStructSize := val;
end;
function __tagPD__Wrapper.getlStructSize : DWORD;
begin
result := tagPD(GetRecordPtr^).lStructSize;
end;
procedure __tagPD__Wrapper.sethDevMode(const val : HGLOBAL);
begin
tagPD(GetRecordPtr^).hDevMode := val;
end;
function __tagPD__Wrapper.gethDevMode : HGLOBAL;
begin
result := tagPD(GetRecordPtr^).hDevMode;
end;
procedure __tagPD__Wrapper.sethDevNames(const val : HGLOBAL);
begin
tagPD(GetRecordPtr^).hDevNames := val;
end;
function __tagPD__Wrapper.gethDevNames : HGLOBAL;
begin
result := tagPD(GetRecordPtr^).hDevNames;
end;
procedure __tagPD__Wrapper.setFlags(const val : DWORD);
begin
tagPD(GetRecordPtr^).Flags := val;
end;
function __tagPD__Wrapper.getFlags : DWORD;
begin
result := tagPD(GetRecordPtr^).Flags;
end;
procedure __tagPD__Wrapper.setnFromPage(const val : Word);
begin
tagPD(GetRecordPtr^).nFromPage := val;
end;
function __tagPD__Wrapper.getnFromPage : Word;
begin
result := tagPD(GetRecordPtr^).nFromPage;
end;
procedure __tagPD__Wrapper.setnToPage(const val : Word);
begin
tagPD(GetRecordPtr^).nToPage := val;
end;
function __tagPD__Wrapper.getnToPage : Word;
begin
result := tagPD(GetRecordPtr^).nToPage;
end;
procedure __tagPD__Wrapper.setnMinPage(const val : Word);
begin
tagPD(GetRecordPtr^).nMinPage := val;
end;
function __tagPD__Wrapper.getnMinPage : Word;
begin
result := tagPD(GetRecordPtr^).nMinPage;
end;
procedure __tagPD__Wrapper.setnMaxPage(const val : Word);
begin
tagPD(GetRecordPtr^).nMaxPage := val;
end;
function __tagPD__Wrapper.getnMaxPage : Word;
begin
result := tagPD(GetRecordPtr^).nMaxPage;
end;
procedure __tagPD__Wrapper.setnCopies(const val : Word);
begin
tagPD(GetRecordPtr^).nCopies := val;
end;
function __tagPD__Wrapper.getnCopies : Word;
begin
result := tagPD(GetRecordPtr^).nCopies;
end;
procedure __tagPD__Wrapper.sethInstance(const val : HINST);
begin
tagPD(GetRecordPtr^).hInstance := val;
end;
function __tagPD__Wrapper.gethInstance : HINST;
begin
result := tagPD(GetRecordPtr^).hInstance;
end;
procedure __tagPD__Wrapper.setlCustData(const val : LPARAM);
begin
tagPD(GetRecordPtr^).lCustData := val;
end;
function __tagPD__Wrapper.getlCustData : LPARAM;
begin
result := tagPD(GetRecordPtr^).lCustData;
end;
procedure __tagPD__Wrapper.sethPrintTemplate(const val : HGLOBAL);
begin
tagPD(GetRecordPtr^).hPrintTemplate := val;
end;
function __tagPD__Wrapper.gethPrintTemplate : HGLOBAL;
begin
result := tagPD(GetRecordPtr^).hPrintTemplate;
end;
procedure __tagPD__Wrapper.sethSetupTemplate(const val : HGLOBAL);
begin
tagPD(GetRecordPtr^).hSetupTemplate := val;
end;
function __tagPD__Wrapper.gethSetupTemplate : HGLOBAL;
begin
result := tagPD(GetRecordPtr^).hSetupTemplate;
end;
function __tagPDA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagPDA__Wrapper.setlStructSize(const val : DWORD);
begin
tagPDA(GetRecordPtr^).lStructSize := val;
end;
function __tagPDA__Wrapper.getlStructSize : DWORD;
begin
result := tagPDA(GetRecordPtr^).lStructSize;
end;
procedure __tagPDA__Wrapper.sethDevMode(const val : HGLOBAL);
begin
tagPDA(GetRecordPtr^).hDevMode := val;
end;
function __tagPDA__Wrapper.gethDevMode : HGLOBAL;
begin
result := tagPDA(GetRecordPtr^).hDevMode;
end;
procedure __tagPDA__Wrapper.sethDevNames(const val : HGLOBAL);
begin
tagPDA(GetRecordPtr^).hDevNames := val;
end;
function __tagPDA__Wrapper.gethDevNames : HGLOBAL;
begin
result := tagPDA(GetRecordPtr^).hDevNames;
end;
procedure __tagPDA__Wrapper.setFlags(const val : DWORD);
begin
tagPDA(GetRecordPtr^).Flags := val;
end;
function __tagPDA__Wrapper.getFlags : DWORD;
begin
result := tagPDA(GetRecordPtr^).Flags;
end;
procedure __tagPDA__Wrapper.setnFromPage(const val : Word);
begin
tagPDA(GetRecordPtr^).nFromPage := val;
end;
function __tagPDA__Wrapper.getnFromPage : Word;
begin
result := tagPDA(GetRecordPtr^).nFromPage;
end;
procedure __tagPDA__Wrapper.setnToPage(const val : Word);
begin
tagPDA(GetRecordPtr^).nToPage := val;
end;
function __tagPDA__Wrapper.getnToPage : Word;
begin
result := tagPDA(GetRecordPtr^).nToPage;
end;
procedure __tagPDA__Wrapper.setnMinPage(const val : Word);
begin
tagPDA(GetRecordPtr^).nMinPage := val;
end;
function __tagPDA__Wrapper.getnMinPage : Word;
begin
result := tagPDA(GetRecordPtr^).nMinPage;
end;
procedure __tagPDA__Wrapper.setnMaxPage(const val : Word);
begin
tagPDA(GetRecordPtr^).nMaxPage := val;
end;
function __tagPDA__Wrapper.getnMaxPage : Word;
begin
result := tagPDA(GetRecordPtr^).nMaxPage;
end;
procedure __tagPDA__Wrapper.setnCopies(const val : Word);
begin
tagPDA(GetRecordPtr^).nCopies := val;
end;
function __tagPDA__Wrapper.getnCopies : Word;
begin
result := tagPDA(GetRecordPtr^).nCopies;
end;
procedure __tagPDA__Wrapper.sethInstance(const val : HINST);
begin
tagPDA(GetRecordPtr^).hInstance := val;
end;
function __tagPDA__Wrapper.gethInstance : HINST;
begin
result := tagPDA(GetRecordPtr^).hInstance;
end;
procedure __tagPDA__Wrapper.setlCustData(const val : LPARAM);
begin
tagPDA(GetRecordPtr^).lCustData := val;
end;
function __tagPDA__Wrapper.getlCustData : LPARAM;
begin
result := tagPDA(GetRecordPtr^).lCustData;
end;
procedure __tagPDA__Wrapper.sethPrintTemplate(const val : HGLOBAL);
begin
tagPDA(GetRecordPtr^).hPrintTemplate := val;
end;
function __tagPDA__Wrapper.gethPrintTemplate : HGLOBAL;
begin
result := tagPDA(GetRecordPtr^).hPrintTemplate;
end;
procedure __tagPDA__Wrapper.sethSetupTemplate(const val : HGLOBAL);
begin
tagPDA(GetRecordPtr^).hSetupTemplate := val;
end;
function __tagPDA__Wrapper.gethSetupTemplate : HGLOBAL;
begin
result := tagPDA(GetRecordPtr^).hSetupTemplate;
end;
function __tagPDW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagPDW__Wrapper.setlStructSize(const val : DWORD);
begin
tagPDW(GetRecordPtr^).lStructSize := val;
end;
function __tagPDW__Wrapper.getlStructSize : DWORD;
begin
result := tagPDW(GetRecordPtr^).lStructSize;
end;
procedure __tagPDW__Wrapper.sethDevMode(const val : HGLOBAL);
begin
tagPDW(GetRecordPtr^).hDevMode := val;
end;
function __tagPDW__Wrapper.gethDevMode : HGLOBAL;
begin
result := tagPDW(GetRecordPtr^).hDevMode;
end;
procedure __tagPDW__Wrapper.sethDevNames(const val : HGLOBAL);
begin
tagPDW(GetRecordPtr^).hDevNames := val;
end;
function __tagPDW__Wrapper.gethDevNames : HGLOBAL;
begin
result := tagPDW(GetRecordPtr^).hDevNames;
end;
procedure __tagPDW__Wrapper.setFlags(const val : DWORD);
begin
tagPDW(GetRecordPtr^).Flags := val;
end;
function __tagPDW__Wrapper.getFlags : DWORD;
begin
result := tagPDW(GetRecordPtr^).Flags;
end;
procedure __tagPDW__Wrapper.setnFromPage(const val : Word);
begin
tagPDW(GetRecordPtr^).nFromPage := val;
end;
function __tagPDW__Wrapper.getnFromPage : Word;
begin
result := tagPDW(GetRecordPtr^).nFromPage;
end;
procedure __tagPDW__Wrapper.setnToPage(const val : Word);
begin
tagPDW(GetRecordPtr^).nToPage := val;
end;
function __tagPDW__Wrapper.getnToPage : Word;
begin
result := tagPDW(GetRecordPtr^).nToPage;
end;
procedure __tagPDW__Wrapper.setnMinPage(const val : Word);
begin
tagPDW(GetRecordPtr^).nMinPage := val;
end;
function __tagPDW__Wrapper.getnMinPage : Word;
begin
result := tagPDW(GetRecordPtr^).nMinPage;
end;
procedure __tagPDW__Wrapper.setnMaxPage(const val : Word);
begin
tagPDW(GetRecordPtr^).nMaxPage := val;
end;
function __tagPDW__Wrapper.getnMaxPage : Word;
begin
result := tagPDW(GetRecordPtr^).nMaxPage;
end;
procedure __tagPDW__Wrapper.setnCopies(const val : Word);
begin
tagPDW(GetRecordPtr^).nCopies := val;
end;
function __tagPDW__Wrapper.getnCopies : Word;
begin
result := tagPDW(GetRecordPtr^).nCopies;
end;
procedure __tagPDW__Wrapper.sethInstance(const val : HINST);
begin
tagPDW(GetRecordPtr^).hInstance := val;
end;
function __tagPDW__Wrapper.gethInstance : HINST;
begin
result := tagPDW(GetRecordPtr^).hInstance;
end;
procedure __tagPDW__Wrapper.setlCustData(const val : LPARAM);
begin
tagPDW(GetRecordPtr^).lCustData := val;
end;
function __tagPDW__Wrapper.getlCustData : LPARAM;
begin
result := tagPDW(GetRecordPtr^).lCustData;
end;
procedure __tagPDW__Wrapper.sethPrintTemplate(const val : HGLOBAL);
begin
tagPDW(GetRecordPtr^).hPrintTemplate := val;
end;
function __tagPDW__Wrapper.gethPrintTemplate : HGLOBAL;
begin
result := tagPDW(GetRecordPtr^).hPrintTemplate;
end;
procedure __tagPDW__Wrapper.sethSetupTemplate(const val : HGLOBAL);
begin
tagPDW(GetRecordPtr^).hSetupTemplate := val;
end;
function __tagPDW__Wrapper.gethSetupTemplate : HGLOBAL;
begin
result := tagPDW(GetRecordPtr^).hSetupTemplate;
end;
function __tagPSD__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagPSD__Wrapper.setlStructSize(const val : DWORD);
begin
tagPSD(GetRecordPtr^).lStructSize := val;
end;
function __tagPSD__Wrapper.getlStructSize : DWORD;
begin
result := tagPSD(GetRecordPtr^).lStructSize;
end;
procedure __tagPSD__Wrapper.sethDevMode(const val : HGLOBAL);
begin
tagPSD(GetRecordPtr^).hDevMode := val;
end;
function __tagPSD__Wrapper.gethDevMode : HGLOBAL;
begin
result := tagPSD(GetRecordPtr^).hDevMode;
end;
procedure __tagPSD__Wrapper.sethDevNames(const val : HGLOBAL);
begin
tagPSD(GetRecordPtr^).hDevNames := val;
end;
function __tagPSD__Wrapper.gethDevNames : HGLOBAL;
begin
result := tagPSD(GetRecordPtr^).hDevNames;
end;
procedure __tagPSD__Wrapper.setFlags(const val : DWORD);
begin
tagPSD(GetRecordPtr^).Flags := val;
end;
function __tagPSD__Wrapper.getFlags : DWORD;
begin
result := tagPSD(GetRecordPtr^).Flags;
end;
procedure __tagPSD__Wrapper.sethInstance(const val : HINST);
begin
tagPSD(GetRecordPtr^).hInstance := val;
end;
function __tagPSD__Wrapper.gethInstance : HINST;
begin
result := tagPSD(GetRecordPtr^).hInstance;
end;
procedure __tagPSD__Wrapper.setlCustData(const val : LPARAM);
begin
tagPSD(GetRecordPtr^).lCustData := val;
end;
function __tagPSD__Wrapper.getlCustData : LPARAM;
begin
result := tagPSD(GetRecordPtr^).lCustData;
end;
procedure __tagPSD__Wrapper.sethPageSetupTemplate(const val : HGLOBAL);
begin
tagPSD(GetRecordPtr^).hPageSetupTemplate := val;
end;
function __tagPSD__Wrapper.gethPageSetupTemplate : HGLOBAL;
begin
result := tagPSD(GetRecordPtr^).hPageSetupTemplate;
end;
function __tagPSDA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagPSDA__Wrapper.setlStructSize(const val : DWORD);
begin
tagPSDA(GetRecordPtr^).lStructSize := val;
end;
function __tagPSDA__Wrapper.getlStructSize : DWORD;
begin
result := tagPSDA(GetRecordPtr^).lStructSize;
end;
procedure __tagPSDA__Wrapper.sethDevMode(const val : HGLOBAL);
begin
tagPSDA(GetRecordPtr^).hDevMode := val;
end;
function __tagPSDA__Wrapper.gethDevMode : HGLOBAL;
begin
result := tagPSDA(GetRecordPtr^).hDevMode;
end;
procedure __tagPSDA__Wrapper.sethDevNames(const val : HGLOBAL);
begin
tagPSDA(GetRecordPtr^).hDevNames := val;
end;
function __tagPSDA__Wrapper.gethDevNames : HGLOBAL;
begin
result := tagPSDA(GetRecordPtr^).hDevNames;
end;
procedure __tagPSDA__Wrapper.setFlags(const val : DWORD);
begin
tagPSDA(GetRecordPtr^).Flags := val;
end;
function __tagPSDA__Wrapper.getFlags : DWORD;
begin
result := tagPSDA(GetRecordPtr^).Flags;
end;
procedure __tagPSDA__Wrapper.sethInstance(const val : HINST);
begin
tagPSDA(GetRecordPtr^).hInstance := val;
end;
function __tagPSDA__Wrapper.gethInstance : HINST;
begin
result := tagPSDA(GetRecordPtr^).hInstance;
end;
procedure __tagPSDA__Wrapper.setlCustData(const val : LPARAM);
begin
tagPSDA(GetRecordPtr^).lCustData := val;
end;
function __tagPSDA__Wrapper.getlCustData : LPARAM;
begin
result := tagPSDA(GetRecordPtr^).lCustData;
end;
procedure __tagPSDA__Wrapper.sethPageSetupTemplate(const val : HGLOBAL);
begin
tagPSDA(GetRecordPtr^).hPageSetupTemplate := val;
end;
function __tagPSDA__Wrapper.gethPageSetupTemplate : HGLOBAL;
begin
result := tagPSDA(GetRecordPtr^).hPageSetupTemplate;
end;
function __tagPSDW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __tagPSDW__Wrapper.setlStructSize(const val : DWORD);
begin
tagPSDW(GetRecordPtr^).lStructSize := val;
end;
function __tagPSDW__Wrapper.getlStructSize : DWORD;
begin
result := tagPSDW(GetRecordPtr^).lStructSize;
end;
procedure __tagPSDW__Wrapper.sethDevMode(const val : HGLOBAL);
begin
tagPSDW(GetRecordPtr^).hDevMode := val;
end;
function __tagPSDW__Wrapper.gethDevMode : HGLOBAL;
begin
result := tagPSDW(GetRecordPtr^).hDevMode;
end;
procedure __tagPSDW__Wrapper.sethDevNames(const val : HGLOBAL);
begin
tagPSDW(GetRecordPtr^).hDevNames := val;
end;
function __tagPSDW__Wrapper.gethDevNames : HGLOBAL;
begin
result := tagPSDW(GetRecordPtr^).hDevNames;
end;
procedure __tagPSDW__Wrapper.setFlags(const val : DWORD);
begin
tagPSDW(GetRecordPtr^).Flags := val;
end;
function __tagPSDW__Wrapper.getFlags : DWORD;
begin
result := tagPSDW(GetRecordPtr^).Flags;
end;
procedure __tagPSDW__Wrapper.sethInstance(const val : HINST);
begin
tagPSDW(GetRecordPtr^).hInstance := val;
end;
function __tagPSDW__Wrapper.gethInstance : HINST;
begin
result := tagPSDW(GetRecordPtr^).hInstance;
end;
procedure __tagPSDW__Wrapper.setlCustData(const val : LPARAM);
begin
tagPSDW(GetRecordPtr^).lCustData := val;
end;
function __tagPSDW__Wrapper.getlCustData : LPARAM;
begin
result := tagPSDW(GetRecordPtr^).lCustData;
end;
procedure __tagPSDW__Wrapper.sethPageSetupTemplate(const val : HGLOBAL);
begin
tagPSDW(GetRecordPtr^).hPageSetupTemplate := val;
end;
function __tagPSDW__Wrapper.gethPageSetupTemplate : HGLOBAL;
begin
result := tagPSDW(GetRecordPtr^).hPageSetupTemplate;
end;
function __TChooseColor__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TChooseColor__Wrapper.setlStructSize(const val : DWORD);
begin
TChooseColor(GetRecordPtr^).lStructSize := val;
end;
function __TChooseColor__Wrapper.getlStructSize : DWORD;
begin
result := TChooseColor(GetRecordPtr^).lStructSize;
end;
procedure __TChooseColor__Wrapper.setrgbResult(const val : COLORREF);
begin
TChooseColor(GetRecordPtr^).rgbResult := val;
end;
function __TChooseColor__Wrapper.getrgbResult : COLORREF;
begin
result := TChooseColor(GetRecordPtr^).rgbResult;
end;
procedure __TChooseColor__Wrapper.setFlags(const val : DWORD);
begin
TChooseColor(GetRecordPtr^).Flags := val;
end;
function __TChooseColor__Wrapper.getFlags : DWORD;
begin
result := TChooseColor(GetRecordPtr^).Flags;
end;
procedure __TChooseColor__Wrapper.setlCustData(const val : LPARAM);
begin
TChooseColor(GetRecordPtr^).lCustData := val;
end;
function __TChooseColor__Wrapper.getlCustData : LPARAM;
begin
result := TChooseColor(GetRecordPtr^).lCustData;
end;
function __TChooseColorA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TChooseColorA__Wrapper.setlStructSize(const val : DWORD);
begin
TChooseColorA(GetRecordPtr^).lStructSize := val;
end;
function __TChooseColorA__Wrapper.getlStructSize : DWORD;
begin
result := TChooseColorA(GetRecordPtr^).lStructSize;
end;
procedure __TChooseColorA__Wrapper.setrgbResult(const val : COLORREF);
begin
TChooseColorA(GetRecordPtr^).rgbResult := val;
end;
function __TChooseColorA__Wrapper.getrgbResult : COLORREF;
begin
result := TChooseColorA(GetRecordPtr^).rgbResult;
end;
procedure __TChooseColorA__Wrapper.setFlags(const val : DWORD);
begin
TChooseColorA(GetRecordPtr^).Flags := val;
end;
function __TChooseColorA__Wrapper.getFlags : DWORD;
begin
result := TChooseColorA(GetRecordPtr^).Flags;
end;
procedure __TChooseColorA__Wrapper.setlCustData(const val : LPARAM);
begin
TChooseColorA(GetRecordPtr^).lCustData := val;
end;
function __TChooseColorA__Wrapper.getlCustData : LPARAM;
begin
result := TChooseColorA(GetRecordPtr^).lCustData;
end;
function __TChooseColorW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TChooseColorW__Wrapper.setlStructSize(const val : DWORD);
begin
TChooseColorW(GetRecordPtr^).lStructSize := val;
end;
function __TChooseColorW__Wrapper.getlStructSize : DWORD;
begin
result := TChooseColorW(GetRecordPtr^).lStructSize;
end;
procedure __TChooseColorW__Wrapper.setrgbResult(const val : COLORREF);
begin
TChooseColorW(GetRecordPtr^).rgbResult := val;
end;
function __TChooseColorW__Wrapper.getrgbResult : COLORREF;
begin
result := TChooseColorW(GetRecordPtr^).rgbResult;
end;
procedure __TChooseColorW__Wrapper.setFlags(const val : DWORD);
begin
TChooseColorW(GetRecordPtr^).Flags := val;
end;
function __TChooseColorW__Wrapper.getFlags : DWORD;
begin
result := TChooseColorW(GetRecordPtr^).Flags;
end;
procedure __TChooseColorW__Wrapper.setlCustData(const val : LPARAM);
begin
TChooseColorW(GetRecordPtr^).lCustData := val;
end;
function __TChooseColorW__Wrapper.getlCustData : LPARAM;
begin
result := TChooseColorW(GetRecordPtr^).lCustData;
end;
function __TChooseFont__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TChooseFont__Wrapper.setlStructSize(const val : DWORD);
begin
TChooseFont(GetRecordPtr^).lStructSize := val;
end;
function __TChooseFont__Wrapper.getlStructSize : DWORD;
begin
result := TChooseFont(GetRecordPtr^).lStructSize;
end;
procedure __TChooseFont__Wrapper.setiPointSize(const val : Integer);
begin
TChooseFont(GetRecordPtr^).iPointSize := val;
end;
function __TChooseFont__Wrapper.getiPointSize : Integer;
begin
result := TChooseFont(GetRecordPtr^).iPointSize;
end;
procedure __TChooseFont__Wrapper.setFlags(const val : DWORD);
begin
TChooseFont(GetRecordPtr^).Flags := val;
end;
function __TChooseFont__Wrapper.getFlags : DWORD;
begin
result := TChooseFont(GetRecordPtr^).Flags;
end;
procedure __TChooseFont__Wrapper.setrgbColors(const val : COLORREF);
begin
TChooseFont(GetRecordPtr^).rgbColors := val;
end;
function __TChooseFont__Wrapper.getrgbColors : COLORREF;
begin
result := TChooseFont(GetRecordPtr^).rgbColors;
end;
procedure __TChooseFont__Wrapper.setlCustData(const val : LPARAM);
begin
TChooseFont(GetRecordPtr^).lCustData := val;
end;
function __TChooseFont__Wrapper.getlCustData : LPARAM;
begin
result := TChooseFont(GetRecordPtr^).lCustData;
end;
procedure __TChooseFont__Wrapper.sethInstance(const val : HINST);
begin
TChooseFont(GetRecordPtr^).hInstance := val;
end;
function __TChooseFont__Wrapper.gethInstance : HINST;
begin
result := TChooseFont(GetRecordPtr^).hInstance;
end;
procedure __TChooseFont__Wrapper.setnFontType(const val : Word);
begin
TChooseFont(GetRecordPtr^).nFontType := val;
end;
function __TChooseFont__Wrapper.getnFontType : Word;
begin
result := TChooseFont(GetRecordPtr^).nFontType;
end;
procedure __TChooseFont__Wrapper.setwReserved(const val : Word);
begin
TChooseFont(GetRecordPtr^).wReserved := val;
end;
function __TChooseFont__Wrapper.getwReserved : Word;
begin
result := TChooseFont(GetRecordPtr^).wReserved;
end;
procedure __TChooseFont__Wrapper.setnSizeMin(const val : Integer);
begin
TChooseFont(GetRecordPtr^).nSizeMin := val;
end;
function __TChooseFont__Wrapper.getnSizeMin : Integer;
begin
result := TChooseFont(GetRecordPtr^).nSizeMin;
end;
procedure __TChooseFont__Wrapper.setnSizeMax(const val : Integer);
begin
TChooseFont(GetRecordPtr^).nSizeMax := val;
end;
function __TChooseFont__Wrapper.getnSizeMax : Integer;
begin
result := TChooseFont(GetRecordPtr^).nSizeMax;
end;
function __TChooseFontA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TChooseFontA__Wrapper.setlStructSize(const val : DWORD);
begin
TChooseFontA(GetRecordPtr^).lStructSize := val;
end;
function __TChooseFontA__Wrapper.getlStructSize : DWORD;
begin
result := TChooseFontA(GetRecordPtr^).lStructSize;
end;
procedure __TChooseFontA__Wrapper.setiPointSize(const val : Integer);
begin
TChooseFontA(GetRecordPtr^).iPointSize := val;
end;
function __TChooseFontA__Wrapper.getiPointSize : Integer;
begin
result := TChooseFontA(GetRecordPtr^).iPointSize;
end;
procedure __TChooseFontA__Wrapper.setFlags(const val : DWORD);
begin
TChooseFontA(GetRecordPtr^).Flags := val;
end;
function __TChooseFontA__Wrapper.getFlags : DWORD;
begin
result := TChooseFontA(GetRecordPtr^).Flags;
end;
procedure __TChooseFontA__Wrapper.setrgbColors(const val : COLORREF);
begin
TChooseFontA(GetRecordPtr^).rgbColors := val;
end;
function __TChooseFontA__Wrapper.getrgbColors : COLORREF;
begin
result := TChooseFontA(GetRecordPtr^).rgbColors;
end;
procedure __TChooseFontA__Wrapper.setlCustData(const val : LPARAM);
begin
TChooseFontA(GetRecordPtr^).lCustData := val;
end;
function __TChooseFontA__Wrapper.getlCustData : LPARAM;
begin
result := TChooseFontA(GetRecordPtr^).lCustData;
end;
procedure __TChooseFontA__Wrapper.sethInstance(const val : HINST);
begin
TChooseFontA(GetRecordPtr^).hInstance := val;
end;
function __TChooseFontA__Wrapper.gethInstance : HINST;
begin
result := TChooseFontA(GetRecordPtr^).hInstance;
end;
procedure __TChooseFontA__Wrapper.setnFontType(const val : Word);
begin
TChooseFontA(GetRecordPtr^).nFontType := val;
end;
function __TChooseFontA__Wrapper.getnFontType : Word;
begin
result := TChooseFontA(GetRecordPtr^).nFontType;
end;
procedure __TChooseFontA__Wrapper.setwReserved(const val : Word);
begin
TChooseFontA(GetRecordPtr^).wReserved := val;
end;
function __TChooseFontA__Wrapper.getwReserved : Word;
begin
result := TChooseFontA(GetRecordPtr^).wReserved;
end;
procedure __TChooseFontA__Wrapper.setnSizeMin(const val : Integer);
begin
TChooseFontA(GetRecordPtr^).nSizeMin := val;
end;
function __TChooseFontA__Wrapper.getnSizeMin : Integer;
begin
result := TChooseFontA(GetRecordPtr^).nSizeMin;
end;
procedure __TChooseFontA__Wrapper.setnSizeMax(const val : Integer);
begin
TChooseFontA(GetRecordPtr^).nSizeMax := val;
end;
function __TChooseFontA__Wrapper.getnSizeMax : Integer;
begin
result := TChooseFontA(GetRecordPtr^).nSizeMax;
end;
function __TChooseFontW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TChooseFontW__Wrapper.setlStructSize(const val : DWORD);
begin
TChooseFontW(GetRecordPtr^).lStructSize := val;
end;
function __TChooseFontW__Wrapper.getlStructSize : DWORD;
begin
result := TChooseFontW(GetRecordPtr^).lStructSize;
end;
procedure __TChooseFontW__Wrapper.setiPointSize(const val : Integer);
begin
TChooseFontW(GetRecordPtr^).iPointSize := val;
end;
function __TChooseFontW__Wrapper.getiPointSize : Integer;
begin
result := TChooseFontW(GetRecordPtr^).iPointSize;
end;
procedure __TChooseFontW__Wrapper.setFlags(const val : DWORD);
begin
TChooseFontW(GetRecordPtr^).Flags := val;
end;
function __TChooseFontW__Wrapper.getFlags : DWORD;
begin
result := TChooseFontW(GetRecordPtr^).Flags;
end;
procedure __TChooseFontW__Wrapper.setrgbColors(const val : COLORREF);
begin
TChooseFontW(GetRecordPtr^).rgbColors := val;
end;
function __TChooseFontW__Wrapper.getrgbColors : COLORREF;
begin
result := TChooseFontW(GetRecordPtr^).rgbColors;
end;
procedure __TChooseFontW__Wrapper.setlCustData(const val : LPARAM);
begin
TChooseFontW(GetRecordPtr^).lCustData := val;
end;
function __TChooseFontW__Wrapper.getlCustData : LPARAM;
begin
result := TChooseFontW(GetRecordPtr^).lCustData;
end;
procedure __TChooseFontW__Wrapper.sethInstance(const val : HINST);
begin
TChooseFontW(GetRecordPtr^).hInstance := val;
end;
function __TChooseFontW__Wrapper.gethInstance : HINST;
begin
result := TChooseFontW(GetRecordPtr^).hInstance;
end;
procedure __TChooseFontW__Wrapper.setnFontType(const val : Word);
begin
TChooseFontW(GetRecordPtr^).nFontType := val;
end;
function __TChooseFontW__Wrapper.getnFontType : Word;
begin
result := TChooseFontW(GetRecordPtr^).nFontType;
end;
procedure __TChooseFontW__Wrapper.setwReserved(const val : Word);
begin
TChooseFontW(GetRecordPtr^).wReserved := val;
end;
function __TChooseFontW__Wrapper.getwReserved : Word;
begin
result := TChooseFontW(GetRecordPtr^).wReserved;
end;
procedure __TChooseFontW__Wrapper.setnSizeMin(const val : Integer);
begin
TChooseFontW(GetRecordPtr^).nSizeMin := val;
end;
function __TChooseFontW__Wrapper.getnSizeMin : Integer;
begin
result := TChooseFontW(GetRecordPtr^).nSizeMin;
end;
procedure __TChooseFontW__Wrapper.setnSizeMax(const val : Integer);
begin
TChooseFontW(GetRecordPtr^).nSizeMax := val;
end;
function __TChooseFontW__Wrapper.getnSizeMax : Integer;
begin
result := TChooseFontW(GetRecordPtr^).nSizeMax;
end;
function __TDevNames__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDevNames__Wrapper.setwDriverOffset(const val : Word);
begin
TDevNames(GetRecordPtr^).wDriverOffset := val;
end;
function __TDevNames__Wrapper.getwDriverOffset : Word;
begin
result := TDevNames(GetRecordPtr^).wDriverOffset;
end;
procedure __TDevNames__Wrapper.setwDeviceOffset(const val : Word);
begin
TDevNames(GetRecordPtr^).wDeviceOffset := val;
end;
function __TDevNames__Wrapper.getwDeviceOffset : Word;
begin
result := TDevNames(GetRecordPtr^).wDeviceOffset;
end;
procedure __TDevNames__Wrapper.setwOutputOffset(const val : Word);
begin
TDevNames(GetRecordPtr^).wOutputOffset := val;
end;
function __TDevNames__Wrapper.getwOutputOffset : Word;
begin
result := TDevNames(GetRecordPtr^).wOutputOffset;
end;
procedure __TDevNames__Wrapper.setwDefault(const val : Word);
begin
TDevNames(GetRecordPtr^).wDefault := val;
end;
function __TDevNames__Wrapper.getwDefault : Word;
begin
result := TDevNames(GetRecordPtr^).wDefault;
end;
function __TFindReplace__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TFindReplace__Wrapper.setlStructSize(const val : DWORD);
begin
TFindReplace(GetRecordPtr^).lStructSize := val;
end;
function __TFindReplace__Wrapper.getlStructSize : DWORD;
begin
result := TFindReplace(GetRecordPtr^).lStructSize;
end;
procedure __TFindReplace__Wrapper.sethInstance(const val : HINST);
begin
TFindReplace(GetRecordPtr^).hInstance := val;
end;
function __TFindReplace__Wrapper.gethInstance : HINST;
begin
result := TFindReplace(GetRecordPtr^).hInstance;
end;
procedure __TFindReplace__Wrapper.setFlags(const val : DWORD);
begin
TFindReplace(GetRecordPtr^).Flags := val;
end;
function __TFindReplace__Wrapper.getFlags : DWORD;
begin
result := TFindReplace(GetRecordPtr^).Flags;
end;
procedure __TFindReplace__Wrapper.setwFindWhatLen(const val : Word);
begin
TFindReplace(GetRecordPtr^).wFindWhatLen := val;
end;
function __TFindReplace__Wrapper.getwFindWhatLen : Word;
begin
result := TFindReplace(GetRecordPtr^).wFindWhatLen;
end;
procedure __TFindReplace__Wrapper.setwReplaceWithLen(const val : Word);
begin
TFindReplace(GetRecordPtr^).wReplaceWithLen := val;
end;
function __TFindReplace__Wrapper.getwReplaceWithLen : Word;
begin
result := TFindReplace(GetRecordPtr^).wReplaceWithLen;
end;
procedure __TFindReplace__Wrapper.setlCustData(const val : LPARAM);
begin
TFindReplace(GetRecordPtr^).lCustData := val;
end;
function __TFindReplace__Wrapper.getlCustData : LPARAM;
begin
result := TFindReplace(GetRecordPtr^).lCustData;
end;
function __TFindReplaceA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TFindReplaceA__Wrapper.setlStructSize(const val : DWORD);
begin
TFindReplaceA(GetRecordPtr^).lStructSize := val;
end;
function __TFindReplaceA__Wrapper.getlStructSize : DWORD;
begin
result := TFindReplaceA(GetRecordPtr^).lStructSize;
end;
procedure __TFindReplaceA__Wrapper.sethInstance(const val : HINST);
begin
TFindReplaceA(GetRecordPtr^).hInstance := val;
end;
function __TFindReplaceA__Wrapper.gethInstance : HINST;
begin
result := TFindReplaceA(GetRecordPtr^).hInstance;
end;
procedure __TFindReplaceA__Wrapper.setFlags(const val : DWORD);
begin
TFindReplaceA(GetRecordPtr^).Flags := val;
end;
function __TFindReplaceA__Wrapper.getFlags : DWORD;
begin
result := TFindReplaceA(GetRecordPtr^).Flags;
end;
procedure __TFindReplaceA__Wrapper.setwFindWhatLen(const val : Word);
begin
TFindReplaceA(GetRecordPtr^).wFindWhatLen := val;
end;
function __TFindReplaceA__Wrapper.getwFindWhatLen : Word;
begin
result := TFindReplaceA(GetRecordPtr^).wFindWhatLen;
end;
procedure __TFindReplaceA__Wrapper.setwReplaceWithLen(const val : Word);
begin
TFindReplaceA(GetRecordPtr^).wReplaceWithLen := val;
end;
function __TFindReplaceA__Wrapper.getwReplaceWithLen : Word;
begin
result := TFindReplaceA(GetRecordPtr^).wReplaceWithLen;
end;
procedure __TFindReplaceA__Wrapper.setlCustData(const val : LPARAM);
begin
TFindReplaceA(GetRecordPtr^).lCustData := val;
end;
function __TFindReplaceA__Wrapper.getlCustData : LPARAM;
begin
result := TFindReplaceA(GetRecordPtr^).lCustData;
end;
function __TFindReplaceW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TFindReplaceW__Wrapper.setlStructSize(const val : DWORD);
begin
TFindReplaceW(GetRecordPtr^).lStructSize := val;
end;
function __TFindReplaceW__Wrapper.getlStructSize : DWORD;
begin
result := TFindReplaceW(GetRecordPtr^).lStructSize;
end;
procedure __TFindReplaceW__Wrapper.sethInstance(const val : HINST);
begin
TFindReplaceW(GetRecordPtr^).hInstance := val;
end;
function __TFindReplaceW__Wrapper.gethInstance : HINST;
begin
result := TFindReplaceW(GetRecordPtr^).hInstance;
end;
procedure __TFindReplaceW__Wrapper.setFlags(const val : DWORD);
begin
TFindReplaceW(GetRecordPtr^).Flags := val;
end;
function __TFindReplaceW__Wrapper.getFlags : DWORD;
begin
result := TFindReplaceW(GetRecordPtr^).Flags;
end;
procedure __TFindReplaceW__Wrapper.setwFindWhatLen(const val : Word);
begin
TFindReplaceW(GetRecordPtr^).wFindWhatLen := val;
end;
function __TFindReplaceW__Wrapper.getwFindWhatLen : Word;
begin
result := TFindReplaceW(GetRecordPtr^).wFindWhatLen;
end;
procedure __TFindReplaceW__Wrapper.setwReplaceWithLen(const val : Word);
begin
TFindReplaceW(GetRecordPtr^).wReplaceWithLen := val;
end;
function __TFindReplaceW__Wrapper.getwReplaceWithLen : Word;
begin
result := TFindReplaceW(GetRecordPtr^).wReplaceWithLen;
end;
procedure __TFindReplaceW__Wrapper.setlCustData(const val : LPARAM);
begin
TFindReplaceW(GetRecordPtr^).lCustData := val;
end;
function __TFindReplaceW__Wrapper.getlCustData : LPARAM;
begin
result := TFindReplaceW(GetRecordPtr^).lCustData;
end;
function __TOFNotify__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TOFNotifyA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TOFNotifyEx__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TOFNotifyExA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TOFNotifyExW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TOFNotifyW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TOpenFilename__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TOpenFilename__Wrapper.setlStructSize(const val : DWORD);
begin
TOpenFilename(GetRecordPtr^).lStructSize := val;
end;
function __TOpenFilename__Wrapper.getlStructSize : DWORD;
begin
result := TOpenFilename(GetRecordPtr^).lStructSize;
end;
procedure __TOpenFilename__Wrapper.sethInstance(const val : HINST);
begin
TOpenFilename(GetRecordPtr^).hInstance := val;
end;
function __TOpenFilename__Wrapper.gethInstance : HINST;
begin
result := TOpenFilename(GetRecordPtr^).hInstance;
end;
procedure __TOpenFilename__Wrapper.setnMaxCustFilter(const val : DWORD);
begin
TOpenFilename(GetRecordPtr^).nMaxCustFilter := val;
end;
function __TOpenFilename__Wrapper.getnMaxCustFilter : DWORD;
begin
result := TOpenFilename(GetRecordPtr^).nMaxCustFilter;
end;
procedure __TOpenFilename__Wrapper.setnFilterIndex(const val : DWORD);
begin
TOpenFilename(GetRecordPtr^).nFilterIndex := val;
end;
function __TOpenFilename__Wrapper.getnFilterIndex : DWORD;
begin
result := TOpenFilename(GetRecordPtr^).nFilterIndex;
end;
procedure __TOpenFilename__Wrapper.setnMaxFile(const val : DWORD);
begin
TOpenFilename(GetRecordPtr^).nMaxFile := val;
end;
function __TOpenFilename__Wrapper.getnMaxFile : DWORD;
begin
result := TOpenFilename(GetRecordPtr^).nMaxFile;
end;
procedure __TOpenFilename__Wrapper.setnMaxFileTitle(const val : DWORD);
begin
TOpenFilename(GetRecordPtr^).nMaxFileTitle := val;
end;
function __TOpenFilename__Wrapper.getnMaxFileTitle : DWORD;
begin
result := TOpenFilename(GetRecordPtr^).nMaxFileTitle;
end;
procedure __TOpenFilename__Wrapper.setFlags(const val : DWORD);
begin
TOpenFilename(GetRecordPtr^).Flags := val;
end;
function __TOpenFilename__Wrapper.getFlags : DWORD;
begin
result := TOpenFilename(GetRecordPtr^).Flags;
end;
procedure __TOpenFilename__Wrapper.setnFileOffset(const val : Word);
begin
TOpenFilename(GetRecordPtr^).nFileOffset := val;
end;
function __TOpenFilename__Wrapper.getnFileOffset : Word;
begin
result := TOpenFilename(GetRecordPtr^).nFileOffset;
end;
procedure __TOpenFilename__Wrapper.setnFileExtension(const val : Word);
begin
TOpenFilename(GetRecordPtr^).nFileExtension := val;
end;
function __TOpenFilename__Wrapper.getnFileExtension : Word;
begin
result := TOpenFilename(GetRecordPtr^).nFileExtension;
end;
procedure __TOpenFilename__Wrapper.setlCustData(const val : LPARAM);
begin
TOpenFilename(GetRecordPtr^).lCustData := val;
end;
function __TOpenFilename__Wrapper.getlCustData : LPARAM;
begin
result := TOpenFilename(GetRecordPtr^).lCustData;
end;
procedure __TOpenFilename__Wrapper.setdwReserved(const val : DWORD);
begin
TOpenFilename(GetRecordPtr^).dwReserved := val;
end;
function __TOpenFilename__Wrapper.getdwReserved : DWORD;
begin
result := TOpenFilename(GetRecordPtr^).dwReserved;
end;
procedure __TOpenFilename__Wrapper.setFlagsEx(const val : DWORD);
begin
TOpenFilename(GetRecordPtr^).FlagsEx := val;
end;
function __TOpenFilename__Wrapper.getFlagsEx : DWORD;
begin
result := TOpenFilename(GetRecordPtr^).FlagsEx;
end;
function __TOpenFilenameA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TOpenFilenameA__Wrapper.setlStructSize(const val : DWORD);
begin
TOpenFilenameA(GetRecordPtr^).lStructSize := val;
end;
function __TOpenFilenameA__Wrapper.getlStructSize : DWORD;
begin
result := TOpenFilenameA(GetRecordPtr^).lStructSize;
end;
procedure __TOpenFilenameA__Wrapper.sethInstance(const val : HINST);
begin
TOpenFilenameA(GetRecordPtr^).hInstance := val;
end;
function __TOpenFilenameA__Wrapper.gethInstance : HINST;
begin
result := TOpenFilenameA(GetRecordPtr^).hInstance;
end;
procedure __TOpenFilenameA__Wrapper.setnMaxCustFilter(const val : DWORD);
begin
TOpenFilenameA(GetRecordPtr^).nMaxCustFilter := val;
end;
function __TOpenFilenameA__Wrapper.getnMaxCustFilter : DWORD;
begin
result := TOpenFilenameA(GetRecordPtr^).nMaxCustFilter;
end;
procedure __TOpenFilenameA__Wrapper.setnFilterIndex(const val : DWORD);
begin
TOpenFilenameA(GetRecordPtr^).nFilterIndex := val;
end;
function __TOpenFilenameA__Wrapper.getnFilterIndex : DWORD;
begin
result := TOpenFilenameA(GetRecordPtr^).nFilterIndex;
end;
procedure __TOpenFilenameA__Wrapper.setnMaxFile(const val : DWORD);
begin
TOpenFilenameA(GetRecordPtr^).nMaxFile := val;
end;
function __TOpenFilenameA__Wrapper.getnMaxFile : DWORD;
begin
result := TOpenFilenameA(GetRecordPtr^).nMaxFile;
end;
procedure __TOpenFilenameA__Wrapper.setnMaxFileTitle(const val : DWORD);
begin
TOpenFilenameA(GetRecordPtr^).nMaxFileTitle := val;
end;
function __TOpenFilenameA__Wrapper.getnMaxFileTitle : DWORD;
begin
result := TOpenFilenameA(GetRecordPtr^).nMaxFileTitle;
end;
procedure __TOpenFilenameA__Wrapper.setFlags(const val : DWORD);
begin
TOpenFilenameA(GetRecordPtr^).Flags := val;
end;
function __TOpenFilenameA__Wrapper.getFlags : DWORD;
begin
result := TOpenFilenameA(GetRecordPtr^).Flags;
end;
procedure __TOpenFilenameA__Wrapper.setnFileOffset(const val : Word);
begin
TOpenFilenameA(GetRecordPtr^).nFileOffset := val;
end;
function __TOpenFilenameA__Wrapper.getnFileOffset : Word;
begin
result := TOpenFilenameA(GetRecordPtr^).nFileOffset;
end;
procedure __TOpenFilenameA__Wrapper.setnFileExtension(const val : Word);
begin
TOpenFilenameA(GetRecordPtr^).nFileExtension := val;
end;
function __TOpenFilenameA__Wrapper.getnFileExtension : Word;
begin
result := TOpenFilenameA(GetRecordPtr^).nFileExtension;
end;
procedure __TOpenFilenameA__Wrapper.setlCustData(const val : LPARAM);
begin
TOpenFilenameA(GetRecordPtr^).lCustData := val;
end;
function __TOpenFilenameA__Wrapper.getlCustData : LPARAM;
begin
result := TOpenFilenameA(GetRecordPtr^).lCustData;
end;
procedure __TOpenFilenameA__Wrapper.setdwReserved(const val : DWORD);
begin
TOpenFilenameA(GetRecordPtr^).dwReserved := val;
end;
function __TOpenFilenameA__Wrapper.getdwReserved : DWORD;
begin
result := TOpenFilenameA(GetRecordPtr^).dwReserved;
end;
procedure __TOpenFilenameA__Wrapper.setFlagsEx(const val : DWORD);
begin
TOpenFilenameA(GetRecordPtr^).FlagsEx := val;
end;
function __TOpenFilenameA__Wrapper.getFlagsEx : DWORD;
begin
result := TOpenFilenameA(GetRecordPtr^).FlagsEx;
end;
function __TOpenFilenameW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TOpenFilenameW__Wrapper.setlStructSize(const val : DWORD);
begin
TOpenFilenameW(GetRecordPtr^).lStructSize := val;
end;
function __TOpenFilenameW__Wrapper.getlStructSize : DWORD;
begin
result := TOpenFilenameW(GetRecordPtr^).lStructSize;
end;
procedure __TOpenFilenameW__Wrapper.sethInstance(const val : HINST);
begin
TOpenFilenameW(GetRecordPtr^).hInstance := val;
end;
function __TOpenFilenameW__Wrapper.gethInstance : HINST;
begin
result := TOpenFilenameW(GetRecordPtr^).hInstance;
end;
procedure __TOpenFilenameW__Wrapper.setnMaxCustFilter(const val : DWORD);
begin
TOpenFilenameW(GetRecordPtr^).nMaxCustFilter := val;
end;
function __TOpenFilenameW__Wrapper.getnMaxCustFilter : DWORD;
begin
result := TOpenFilenameW(GetRecordPtr^).nMaxCustFilter;
end;
procedure __TOpenFilenameW__Wrapper.setnFilterIndex(const val : DWORD);
begin
TOpenFilenameW(GetRecordPtr^).nFilterIndex := val;
end;
function __TOpenFilenameW__Wrapper.getnFilterIndex : DWORD;
begin
result := TOpenFilenameW(GetRecordPtr^).nFilterIndex;
end;
procedure __TOpenFilenameW__Wrapper.setnMaxFile(const val : DWORD);
begin
TOpenFilenameW(GetRecordPtr^).nMaxFile := val;
end;
function __TOpenFilenameW__Wrapper.getnMaxFile : DWORD;
begin
result := TOpenFilenameW(GetRecordPtr^).nMaxFile;
end;
procedure __TOpenFilenameW__Wrapper.setnMaxFileTitle(const val : DWORD);
begin
TOpenFilenameW(GetRecordPtr^).nMaxFileTitle := val;
end;
function __TOpenFilenameW__Wrapper.getnMaxFileTitle : DWORD;
begin
result := TOpenFilenameW(GetRecordPtr^).nMaxFileTitle;
end;
procedure __TOpenFilenameW__Wrapper.setFlags(const val : DWORD);
begin
TOpenFilenameW(GetRecordPtr^).Flags := val;
end;
function __TOpenFilenameW__Wrapper.getFlags : DWORD;
begin
result := TOpenFilenameW(GetRecordPtr^).Flags;
end;
procedure __TOpenFilenameW__Wrapper.setnFileOffset(const val : Word);
begin
TOpenFilenameW(GetRecordPtr^).nFileOffset := val;
end;
function __TOpenFilenameW__Wrapper.getnFileOffset : Word;
begin
result := TOpenFilenameW(GetRecordPtr^).nFileOffset;
end;
procedure __TOpenFilenameW__Wrapper.setnFileExtension(const val : Word);
begin
TOpenFilenameW(GetRecordPtr^).nFileExtension := val;
end;
function __TOpenFilenameW__Wrapper.getnFileExtension : Word;
begin
result := TOpenFilenameW(GetRecordPtr^).nFileExtension;
end;
procedure __TOpenFilenameW__Wrapper.setlCustData(const val : LPARAM);
begin
TOpenFilenameW(GetRecordPtr^).lCustData := val;
end;
function __TOpenFilenameW__Wrapper.getlCustData : LPARAM;
begin
result := TOpenFilenameW(GetRecordPtr^).lCustData;
end;
procedure __TOpenFilenameW__Wrapper.setdwReserved(const val : DWORD);
begin
TOpenFilenameW(GetRecordPtr^).dwReserved := val;
end;
function __TOpenFilenameW__Wrapper.getdwReserved : DWORD;
begin
result := TOpenFilenameW(GetRecordPtr^).dwReserved;
end;
procedure __TOpenFilenameW__Wrapper.setFlagsEx(const val : DWORD);
begin
TOpenFilenameW(GetRecordPtr^).FlagsEx := val;
end;
function __TOpenFilenameW__Wrapper.getFlagsEx : DWORD;
begin
result := TOpenFilenameW(GetRecordPtr^).FlagsEx;
end;
function __TPageSetupDlg__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPageSetupDlg__Wrapper.setlStructSize(const val : DWORD);
begin
TPageSetupDlg(GetRecordPtr^).lStructSize := val;
end;
function __TPageSetupDlg__Wrapper.getlStructSize : DWORD;
begin
result := TPageSetupDlg(GetRecordPtr^).lStructSize;
end;
procedure __TPageSetupDlg__Wrapper.sethDevMode(const val : HGLOBAL);
begin
TPageSetupDlg(GetRecordPtr^).hDevMode := val;
end;
function __TPageSetupDlg__Wrapper.gethDevMode : HGLOBAL;
begin
result := TPageSetupDlg(GetRecordPtr^).hDevMode;
end;
procedure __TPageSetupDlg__Wrapper.sethDevNames(const val : HGLOBAL);
begin
TPageSetupDlg(GetRecordPtr^).hDevNames := val;
end;
function __TPageSetupDlg__Wrapper.gethDevNames : HGLOBAL;
begin
result := TPageSetupDlg(GetRecordPtr^).hDevNames;
end;
procedure __TPageSetupDlg__Wrapper.setFlags(const val : DWORD);
begin
TPageSetupDlg(GetRecordPtr^).Flags := val;
end;
function __TPageSetupDlg__Wrapper.getFlags : DWORD;
begin
result := TPageSetupDlg(GetRecordPtr^).Flags;
end;
procedure __TPageSetupDlg__Wrapper.sethInstance(const val : HINST);
begin
TPageSetupDlg(GetRecordPtr^).hInstance := val;
end;
function __TPageSetupDlg__Wrapper.gethInstance : HINST;
begin
result := TPageSetupDlg(GetRecordPtr^).hInstance;
end;
procedure __TPageSetupDlg__Wrapper.setlCustData(const val : LPARAM);
begin
TPageSetupDlg(GetRecordPtr^).lCustData := val;
end;
function __TPageSetupDlg__Wrapper.getlCustData : LPARAM;
begin
result := TPageSetupDlg(GetRecordPtr^).lCustData;
end;
procedure __TPageSetupDlg__Wrapper.sethPageSetupTemplate(const val : HGLOBAL);
begin
TPageSetupDlg(GetRecordPtr^).hPageSetupTemplate := val;
end;
function __TPageSetupDlg__Wrapper.gethPageSetupTemplate : HGLOBAL;
begin
result := TPageSetupDlg(GetRecordPtr^).hPageSetupTemplate;
end;
function __TPageSetupDlgA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPageSetupDlgA__Wrapper.setlStructSize(const val : DWORD);
begin
TPageSetupDlgA(GetRecordPtr^).lStructSize := val;
end;
function __TPageSetupDlgA__Wrapper.getlStructSize : DWORD;
begin
result := TPageSetupDlgA(GetRecordPtr^).lStructSize;
end;
procedure __TPageSetupDlgA__Wrapper.sethDevMode(const val : HGLOBAL);
begin
TPageSetupDlgA(GetRecordPtr^).hDevMode := val;
end;
function __TPageSetupDlgA__Wrapper.gethDevMode : HGLOBAL;
begin
result := TPageSetupDlgA(GetRecordPtr^).hDevMode;
end;
procedure __TPageSetupDlgA__Wrapper.sethDevNames(const val : HGLOBAL);
begin
TPageSetupDlgA(GetRecordPtr^).hDevNames := val;
end;
function __TPageSetupDlgA__Wrapper.gethDevNames : HGLOBAL;
begin
result := TPageSetupDlgA(GetRecordPtr^).hDevNames;
end;
procedure __TPageSetupDlgA__Wrapper.setFlags(const val : DWORD);
begin
TPageSetupDlgA(GetRecordPtr^).Flags := val;
end;
function __TPageSetupDlgA__Wrapper.getFlags : DWORD;
begin
result := TPageSetupDlgA(GetRecordPtr^).Flags;
end;
procedure __TPageSetupDlgA__Wrapper.sethInstance(const val : HINST);
begin
TPageSetupDlgA(GetRecordPtr^).hInstance := val;
end;
function __TPageSetupDlgA__Wrapper.gethInstance : HINST;
begin
result := TPageSetupDlgA(GetRecordPtr^).hInstance;
end;
procedure __TPageSetupDlgA__Wrapper.setlCustData(const val : LPARAM);
begin
TPageSetupDlgA(GetRecordPtr^).lCustData := val;
end;
function __TPageSetupDlgA__Wrapper.getlCustData : LPARAM;
begin
result := TPageSetupDlgA(GetRecordPtr^).lCustData;
end;
procedure __TPageSetupDlgA__Wrapper.sethPageSetupTemplate(const val : HGLOBAL);
begin
TPageSetupDlgA(GetRecordPtr^).hPageSetupTemplate := val;
end;
function __TPageSetupDlgA__Wrapper.gethPageSetupTemplate : HGLOBAL;
begin
result := TPageSetupDlgA(GetRecordPtr^).hPageSetupTemplate;
end;
function __TPageSetupDlgW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPageSetupDlgW__Wrapper.setlStructSize(const val : DWORD);
begin
TPageSetupDlgW(GetRecordPtr^).lStructSize := val;
end;
function __TPageSetupDlgW__Wrapper.getlStructSize : DWORD;
begin
result := TPageSetupDlgW(GetRecordPtr^).lStructSize;
end;
procedure __TPageSetupDlgW__Wrapper.sethDevMode(const val : HGLOBAL);
begin
TPageSetupDlgW(GetRecordPtr^).hDevMode := val;
end;
function __TPageSetupDlgW__Wrapper.gethDevMode : HGLOBAL;
begin
result := TPageSetupDlgW(GetRecordPtr^).hDevMode;
end;
procedure __TPageSetupDlgW__Wrapper.sethDevNames(const val : HGLOBAL);
begin
TPageSetupDlgW(GetRecordPtr^).hDevNames := val;
end;
function __TPageSetupDlgW__Wrapper.gethDevNames : HGLOBAL;
begin
result := TPageSetupDlgW(GetRecordPtr^).hDevNames;
end;
procedure __TPageSetupDlgW__Wrapper.setFlags(const val : DWORD);
begin
TPageSetupDlgW(GetRecordPtr^).Flags := val;
end;
function __TPageSetupDlgW__Wrapper.getFlags : DWORD;
begin
result := TPageSetupDlgW(GetRecordPtr^).Flags;
end;
procedure __TPageSetupDlgW__Wrapper.sethInstance(const val : HINST);
begin
TPageSetupDlgW(GetRecordPtr^).hInstance := val;
end;
function __TPageSetupDlgW__Wrapper.gethInstance : HINST;
begin
result := TPageSetupDlgW(GetRecordPtr^).hInstance;
end;
procedure __TPageSetupDlgW__Wrapper.setlCustData(const val : LPARAM);
begin
TPageSetupDlgW(GetRecordPtr^).lCustData := val;
end;
function __TPageSetupDlgW__Wrapper.getlCustData : LPARAM;
begin
result := TPageSetupDlgW(GetRecordPtr^).lCustData;
end;
procedure __TPageSetupDlgW__Wrapper.sethPageSetupTemplate(const val : HGLOBAL);
begin
TPageSetupDlgW(GetRecordPtr^).hPageSetupTemplate := val;
end;
function __TPageSetupDlgW__Wrapper.gethPageSetupTemplate : HGLOBAL;
begin
result := TPageSetupDlgW(GetRecordPtr^).hPageSetupTemplate;
end;
function __TPrintDlg__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPrintDlg__Wrapper.setlStructSize(const val : DWORD);
begin
TPrintDlg(GetRecordPtr^).lStructSize := val;
end;
function __TPrintDlg__Wrapper.getlStructSize : DWORD;
begin
result := TPrintDlg(GetRecordPtr^).lStructSize;
end;
procedure __TPrintDlg__Wrapper.sethDevMode(const val : HGLOBAL);
begin
TPrintDlg(GetRecordPtr^).hDevMode := val;
end;
function __TPrintDlg__Wrapper.gethDevMode : HGLOBAL;
begin
result := TPrintDlg(GetRecordPtr^).hDevMode;
end;
procedure __TPrintDlg__Wrapper.sethDevNames(const val : HGLOBAL);
begin
TPrintDlg(GetRecordPtr^).hDevNames := val;
end;
function __TPrintDlg__Wrapper.gethDevNames : HGLOBAL;
begin
result := TPrintDlg(GetRecordPtr^).hDevNames;
end;
procedure __TPrintDlg__Wrapper.setFlags(const val : DWORD);
begin
TPrintDlg(GetRecordPtr^).Flags := val;
end;
function __TPrintDlg__Wrapper.getFlags : DWORD;
begin
result := TPrintDlg(GetRecordPtr^).Flags;
end;
procedure __TPrintDlg__Wrapper.setnFromPage(const val : Word);
begin
TPrintDlg(GetRecordPtr^).nFromPage := val;
end;
function __TPrintDlg__Wrapper.getnFromPage : Word;
begin
result := TPrintDlg(GetRecordPtr^).nFromPage;
end;
procedure __TPrintDlg__Wrapper.setnToPage(const val : Word);
begin
TPrintDlg(GetRecordPtr^).nToPage := val;
end;
function __TPrintDlg__Wrapper.getnToPage : Word;
begin
result := TPrintDlg(GetRecordPtr^).nToPage;
end;
procedure __TPrintDlg__Wrapper.setnMinPage(const val : Word);
begin
TPrintDlg(GetRecordPtr^).nMinPage := val;
end;
function __TPrintDlg__Wrapper.getnMinPage : Word;
begin
result := TPrintDlg(GetRecordPtr^).nMinPage;
end;
procedure __TPrintDlg__Wrapper.setnMaxPage(const val : Word);
begin
TPrintDlg(GetRecordPtr^).nMaxPage := val;
end;
function __TPrintDlg__Wrapper.getnMaxPage : Word;
begin
result := TPrintDlg(GetRecordPtr^).nMaxPage;
end;
procedure __TPrintDlg__Wrapper.setnCopies(const val : Word);
begin
TPrintDlg(GetRecordPtr^).nCopies := val;
end;
function __TPrintDlg__Wrapper.getnCopies : Word;
begin
result := TPrintDlg(GetRecordPtr^).nCopies;
end;
procedure __TPrintDlg__Wrapper.sethInstance(const val : HINST);
begin
TPrintDlg(GetRecordPtr^).hInstance := val;
end;
function __TPrintDlg__Wrapper.gethInstance : HINST;
begin
result := TPrintDlg(GetRecordPtr^).hInstance;
end;
procedure __TPrintDlg__Wrapper.setlCustData(const val : LPARAM);
begin
TPrintDlg(GetRecordPtr^).lCustData := val;
end;
function __TPrintDlg__Wrapper.getlCustData : LPARAM;
begin
result := TPrintDlg(GetRecordPtr^).lCustData;
end;
procedure __TPrintDlg__Wrapper.sethPrintTemplate(const val : HGLOBAL);
begin
TPrintDlg(GetRecordPtr^).hPrintTemplate := val;
end;
function __TPrintDlg__Wrapper.gethPrintTemplate : HGLOBAL;
begin
result := TPrintDlg(GetRecordPtr^).hPrintTemplate;
end;
procedure __TPrintDlg__Wrapper.sethSetupTemplate(const val : HGLOBAL);
begin
TPrintDlg(GetRecordPtr^).hSetupTemplate := val;
end;
function __TPrintDlg__Wrapper.gethSetupTemplate : HGLOBAL;
begin
result := TPrintDlg(GetRecordPtr^).hSetupTemplate;
end;
function __TPrintDlgA__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPrintDlgA__Wrapper.setlStructSize(const val : DWORD);
begin
TPrintDlgA(GetRecordPtr^).lStructSize := val;
end;
function __TPrintDlgA__Wrapper.getlStructSize : DWORD;
begin
result := TPrintDlgA(GetRecordPtr^).lStructSize;
end;
procedure __TPrintDlgA__Wrapper.sethDevMode(const val : HGLOBAL);
begin
TPrintDlgA(GetRecordPtr^).hDevMode := val;
end;
function __TPrintDlgA__Wrapper.gethDevMode : HGLOBAL;
begin
result := TPrintDlgA(GetRecordPtr^).hDevMode;
end;
procedure __TPrintDlgA__Wrapper.sethDevNames(const val : HGLOBAL);
begin
TPrintDlgA(GetRecordPtr^).hDevNames := val;
end;
function __TPrintDlgA__Wrapper.gethDevNames : HGLOBAL;
begin
result := TPrintDlgA(GetRecordPtr^).hDevNames;
end;
procedure __TPrintDlgA__Wrapper.setFlags(const val : DWORD);
begin
TPrintDlgA(GetRecordPtr^).Flags := val;
end;
function __TPrintDlgA__Wrapper.getFlags : DWORD;
begin
result := TPrintDlgA(GetRecordPtr^).Flags;
end;
procedure __TPrintDlgA__Wrapper.setnFromPage(const val : Word);
begin
TPrintDlgA(GetRecordPtr^).nFromPage := val;
end;
function __TPrintDlgA__Wrapper.getnFromPage : Word;
begin
result := TPrintDlgA(GetRecordPtr^).nFromPage;
end;
procedure __TPrintDlgA__Wrapper.setnToPage(const val : Word);
begin
TPrintDlgA(GetRecordPtr^).nToPage := val;
end;
function __TPrintDlgA__Wrapper.getnToPage : Word;
begin
result := TPrintDlgA(GetRecordPtr^).nToPage;
end;
procedure __TPrintDlgA__Wrapper.setnMinPage(const val : Word);
begin
TPrintDlgA(GetRecordPtr^).nMinPage := val;
end;
function __TPrintDlgA__Wrapper.getnMinPage : Word;
begin
result := TPrintDlgA(GetRecordPtr^).nMinPage;
end;
procedure __TPrintDlgA__Wrapper.setnMaxPage(const val : Word);
begin
TPrintDlgA(GetRecordPtr^).nMaxPage := val;
end;
function __TPrintDlgA__Wrapper.getnMaxPage : Word;
begin
result := TPrintDlgA(GetRecordPtr^).nMaxPage;
end;
procedure __TPrintDlgA__Wrapper.setnCopies(const val : Word);
begin
TPrintDlgA(GetRecordPtr^).nCopies := val;
end;
function __TPrintDlgA__Wrapper.getnCopies : Word;
begin
result := TPrintDlgA(GetRecordPtr^).nCopies;
end;
procedure __TPrintDlgA__Wrapper.sethInstance(const val : HINST);
begin
TPrintDlgA(GetRecordPtr^).hInstance := val;
end;
function __TPrintDlgA__Wrapper.gethInstance : HINST;
begin
result := TPrintDlgA(GetRecordPtr^).hInstance;
end;
procedure __TPrintDlgA__Wrapper.setlCustData(const val : LPARAM);
begin
TPrintDlgA(GetRecordPtr^).lCustData := val;
end;
function __TPrintDlgA__Wrapper.getlCustData : LPARAM;
begin
result := TPrintDlgA(GetRecordPtr^).lCustData;
end;
procedure __TPrintDlgA__Wrapper.sethPrintTemplate(const val : HGLOBAL);
begin
TPrintDlgA(GetRecordPtr^).hPrintTemplate := val;
end;
function __TPrintDlgA__Wrapper.gethPrintTemplate : HGLOBAL;
begin
result := TPrintDlgA(GetRecordPtr^).hPrintTemplate;
end;
procedure __TPrintDlgA__Wrapper.sethSetupTemplate(const val : HGLOBAL);
begin
TPrintDlgA(GetRecordPtr^).hSetupTemplate := val;
end;
function __TPrintDlgA__Wrapper.gethSetupTemplate : HGLOBAL;
begin
result := TPrintDlgA(GetRecordPtr^).hSetupTemplate;
end;
function __TPrintDlgW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPrintDlgW__Wrapper.setlStructSize(const val : DWORD);
begin
TPrintDlgW(GetRecordPtr^).lStructSize := val;
end;
function __TPrintDlgW__Wrapper.getlStructSize : DWORD;
begin
result := TPrintDlgW(GetRecordPtr^).lStructSize;
end;
procedure __TPrintDlgW__Wrapper.sethDevMode(const val : HGLOBAL);
begin
TPrintDlgW(GetRecordPtr^).hDevMode := val;
end;
function __TPrintDlgW__Wrapper.gethDevMode : HGLOBAL;
begin
result := TPrintDlgW(GetRecordPtr^).hDevMode;
end;
procedure __TPrintDlgW__Wrapper.sethDevNames(const val : HGLOBAL);
begin
TPrintDlgW(GetRecordPtr^).hDevNames := val;
end;
function __TPrintDlgW__Wrapper.gethDevNames : HGLOBAL;
begin
result := TPrintDlgW(GetRecordPtr^).hDevNames;
end;
procedure __TPrintDlgW__Wrapper.setFlags(const val : DWORD);
begin
TPrintDlgW(GetRecordPtr^).Flags := val;
end;
function __TPrintDlgW__Wrapper.getFlags : DWORD;
begin
result := TPrintDlgW(GetRecordPtr^).Flags;
end;
procedure __TPrintDlgW__Wrapper.setnFromPage(const val : Word);
begin
TPrintDlgW(GetRecordPtr^).nFromPage := val;
end;
function __TPrintDlgW__Wrapper.getnFromPage : Word;
begin
result := TPrintDlgW(GetRecordPtr^).nFromPage;
end;
procedure __TPrintDlgW__Wrapper.setnToPage(const val : Word);
begin
TPrintDlgW(GetRecordPtr^).nToPage := val;
end;
function __TPrintDlgW__Wrapper.getnToPage : Word;
begin
result := TPrintDlgW(GetRecordPtr^).nToPage;
end;
procedure __TPrintDlgW__Wrapper.setnMinPage(const val : Word);
begin
TPrintDlgW(GetRecordPtr^).nMinPage := val;
end;
function __TPrintDlgW__Wrapper.getnMinPage : Word;
begin
result := TPrintDlgW(GetRecordPtr^).nMinPage;
end;
procedure __TPrintDlgW__Wrapper.setnMaxPage(const val : Word);
begin
TPrintDlgW(GetRecordPtr^).nMaxPage := val;
end;
function __TPrintDlgW__Wrapper.getnMaxPage : Word;
begin
result := TPrintDlgW(GetRecordPtr^).nMaxPage;
end;
procedure __TPrintDlgW__Wrapper.setnCopies(const val : Word);
begin
TPrintDlgW(GetRecordPtr^).nCopies := val;
end;
function __TPrintDlgW__Wrapper.getnCopies : Word;
begin
result := TPrintDlgW(GetRecordPtr^).nCopies;
end;
procedure __TPrintDlgW__Wrapper.sethInstance(const val : HINST);
begin
TPrintDlgW(GetRecordPtr^).hInstance := val;
end;
function __TPrintDlgW__Wrapper.gethInstance : HINST;
begin
result := TPrintDlgW(GetRecordPtr^).hInstance;
end;
procedure __TPrintDlgW__Wrapper.setlCustData(const val : LPARAM);
begin
TPrintDlgW(GetRecordPtr^).lCustData := val;
end;
function __TPrintDlgW__Wrapper.getlCustData : LPARAM;
begin
result := TPrintDlgW(GetRecordPtr^).lCustData;
end;
procedure __TPrintDlgW__Wrapper.sethPrintTemplate(const val : HGLOBAL);
begin
TPrintDlgW(GetRecordPtr^).hPrintTemplate := val;
end;
function __TPrintDlgW__Wrapper.gethPrintTemplate : HGLOBAL;
begin
result := TPrintDlgW(GetRecordPtr^).hPrintTemplate;
end;
procedure __TPrintDlgW__Wrapper.sethSetupTemplate(const val : HGLOBAL);
begin
TPrintDlgW(GetRecordPtr^).hSetupTemplate := val;
end;
function __TPrintDlgW__Wrapper.gethSetupTemplate : HGLOBAL;
begin
result := TPrintDlgW(GetRecordPtr^).hSetupTemplate;
end;
function __OFNOTIFY_ : IDispatch;
begin
  result := ___OFNOTIFY__Wrapper.Create;
end;
function __OFNOTIFYA_ : IDispatch;
begin
  result := ___OFNOTIFYA__Wrapper.Create;
end;
function __OFNOTIFYEX_ : IDispatch;
begin
  result := ___OFNOTIFYEX__Wrapper.Create;
end;
function __OFNOTIFYEXA_ : IDispatch;
begin
  result := ___OFNOTIFYEXA__Wrapper.Create;
end;
function __OFNOTIFYEXW_ : IDispatch;
begin
  result := ___OFNOTIFYEXW__Wrapper.Create;
end;
function __OFNOTIFYW_ : IDispatch;
begin
  result := ___OFNOTIFYW__Wrapper.Create;
end;
function _DEVNAMES_ : IDispatch;
begin
  result := __DEVNAMES__Wrapper.Create;
end;
function _FINDREPLACE_ : IDispatch;
begin
  result := __FINDREPLACE__Wrapper.Create;
end;
function _FINDREPLACEA_ : IDispatch;
begin
  result := __FINDREPLACEA__Wrapper.Create;
end;
function _FINDREPLACEW_ : IDispatch;
begin
  result := __FINDREPLACEW__Wrapper.Create;
end;
function _OFNOTIFY_ : IDispatch;
begin
  result := __OFNOTIFY__Wrapper.Create;
end;
function _OFNOTIFYA_ : IDispatch;
begin
  result := __OFNOTIFYA__Wrapper.Create;
end;
function _OFNOTIFYEX_ : IDispatch;
begin
  result := __OFNOTIFYEX__Wrapper.Create;
end;
function _OFNOTIFYEXA_ : IDispatch;
begin
  result := __OFNOTIFYEXA__Wrapper.Create;
end;
function _OFNOTIFYEXW_ : IDispatch;
begin
  result := __OFNOTIFYEXW__Wrapper.Create;
end;
function _OFNOTIFYW_ : IDispatch;
begin
  result := __OFNOTIFYW__Wrapper.Create;
end;
function _OPENFILENAME_ : IDispatch;
begin
  result := __OPENFILENAME__Wrapper.Create;
end;
function _OPENFILENAMEA_ : IDispatch;
begin
  result := __OPENFILENAMEA__Wrapper.Create;
end;
function _OPENFILENAMEW_ : IDispatch;
begin
  result := __OPENFILENAMEW__Wrapper.Create;
end;
function _tagCHOOSECOLOR_ : IDispatch;
begin
  result := __tagCHOOSECOLOR__Wrapper.Create;
end;
function _tagCHOOSECOLORA_ : IDispatch;
begin
  result := __tagCHOOSECOLORA__Wrapper.Create;
end;
function _tagCHOOSECOLORW_ : IDispatch;
begin
  result := __tagCHOOSECOLORW__Wrapper.Create;
end;
function _tagCHOOSEFONT_ : IDispatch;
begin
  result := __tagCHOOSEFONT__Wrapper.Create;
end;
function _tagCHOOSEFONTA_ : IDispatch;
begin
  result := __tagCHOOSEFONTA__Wrapper.Create;
end;
function _tagCHOOSEFONTW_ : IDispatch;
begin
  result := __tagCHOOSEFONTW__Wrapper.Create;
end;
function _tagDEVNAMES_ : IDispatch;
begin
  result := __tagDEVNAMES__Wrapper.Create;
end;
function _tagFINDREPLACE_ : IDispatch;
begin
  result := __tagFINDREPLACE__Wrapper.Create;
end;
function _tagFINDREPLACEA_ : IDispatch;
begin
  result := __tagFINDREPLACEA__Wrapper.Create;
end;
function _tagFINDREPLACEW_ : IDispatch;
begin
  result := __tagFINDREPLACEW__Wrapper.Create;
end;
function _tagOFN_ : IDispatch;
begin
  result := __tagOFN__Wrapper.Create;
end;
function _tagOFNA_ : IDispatch;
begin
  result := __tagOFNA__Wrapper.Create;
end;
function _tagOFNW_ : IDispatch;
begin
  result := __tagOFNW__Wrapper.Create;
end;
function _tagPD_ : IDispatch;
begin
  result := __tagPD__Wrapper.Create;
end;
function _tagPDA_ : IDispatch;
begin
  result := __tagPDA__Wrapper.Create;
end;
function _tagPDW_ : IDispatch;
begin
  result := __tagPDW__Wrapper.Create;
end;
function _tagPSD_ : IDispatch;
begin
  result := __tagPSD__Wrapper.Create;
end;
function _tagPSDA_ : IDispatch;
begin
  result := __tagPSDA__Wrapper.Create;
end;
function _tagPSDW_ : IDispatch;
begin
  result := __tagPSDW__Wrapper.Create;
end;
function _TChooseColor_ : IDispatch;
begin
  result := __TChooseColor__Wrapper.Create;
end;
function _TChooseColorA_ : IDispatch;
begin
  result := __TChooseColorA__Wrapper.Create;
end;
function _TChooseColorW_ : IDispatch;
begin
  result := __TChooseColorW__Wrapper.Create;
end;
function _TChooseFont_ : IDispatch;
begin
  result := __TChooseFont__Wrapper.Create;
end;
function _TChooseFontA_ : IDispatch;
begin
  result := __TChooseFontA__Wrapper.Create;
end;
function _TChooseFontW_ : IDispatch;
begin
  result := __TChooseFontW__Wrapper.Create;
end;
function _TDevNames_ : IDispatch;
begin
  result := __TDevNames__Wrapper.Create;
end;
function _TFindReplace_ : IDispatch;
begin
  result := __TFindReplace__Wrapper.Create;
end;
function _TFindReplaceA_ : IDispatch;
begin
  result := __TFindReplaceA__Wrapper.Create;
end;
function _TFindReplaceW_ : IDispatch;
begin
  result := __TFindReplaceW__Wrapper.Create;
end;
function _TOFNotify_ : IDispatch;
begin
  result := __TOFNotify__Wrapper.Create;
end;
function _TOFNotifyA_ : IDispatch;
begin
  result := __TOFNotifyA__Wrapper.Create;
end;
function _TOFNotifyEx_ : IDispatch;
begin
  result := __TOFNotifyEx__Wrapper.Create;
end;
function _TOFNotifyExA_ : IDispatch;
begin
  result := __TOFNotifyExA__Wrapper.Create;
end;
function _TOFNotifyExW_ : IDispatch;
begin
  result := __TOFNotifyExW__Wrapper.Create;
end;
function _TOFNotifyW_ : IDispatch;
begin
  result := __TOFNotifyW__Wrapper.Create;
end;
function _TOpenFilename_ : IDispatch;
begin
  result := __TOpenFilename__Wrapper.Create;
end;
function _TOpenFilenameA_ : IDispatch;
begin
  result := __TOpenFilenameA__Wrapper.Create;
end;
function _TOpenFilenameW_ : IDispatch;
begin
  result := __TOpenFilenameW__Wrapper.Create;
end;
function _TPageSetupDlg_ : IDispatch;
begin
  result := __TPageSetupDlg__Wrapper.Create;
end;
function _TPageSetupDlgA_ : IDispatch;
begin
  result := __TPageSetupDlgA__Wrapper.Create;
end;
function _TPageSetupDlgW_ : IDispatch;
begin
  result := __TPageSetupDlgW__Wrapper.Create;
end;
function _TPrintDlg_ : IDispatch;
begin
  result := __TPrintDlg__Wrapper.Create;
end;
function _TPrintDlgA_ : IDispatch;
begin
  result := __TPrintDlgA__Wrapper.Create;
end;
function _TPrintDlgW_ : IDispatch;
begin
  result := __TPrintDlgW__Wrapper.Create;
end;
function ____GetOpenFileName__Wrapper(const p0 : IDispatch): Bool;
var
__p0 : ^TOpenFilename;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := GetOpenFileName(__p0^);
end;

function ____GetOpenFileNameA__Wrapper(const p0 : IDispatch): Bool;
var
__p0 : ^TOpenFilenameA;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := GetOpenFileNameA(__p0^);
end;

function ____GetOpenFileNameW__Wrapper(const p0 : IDispatch): Bool;
var
__p0 : ^TOpenFilenameW;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := GetOpenFileNameW(__p0^);
end;

function ____GetSaveFileName__Wrapper(const p0 : IDispatch): Bool;
var
__p0 : ^TOpenFilename;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := GetSaveFileName(__p0^);
end;

function ____GetSaveFileNameA__Wrapper(const p0 : IDispatch): Bool;
var
__p0 : ^TOpenFilenameA;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := GetSaveFileNameA(__p0^);
end;

function ____GetSaveFileNameW__Wrapper(const p0 : IDispatch): Bool;
var
__p0 : ^TOpenFilenameW;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := GetSaveFileNameW(__p0^);
end;

function ____ChooseColor__Wrapper(const p0 : IDispatch): Bool;
var
__p0 : ^TChooseColor;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := ChooseColor(__p0^);
end;

function ____ChooseColorA__Wrapper(const p0 : IDispatch): Bool;
var
__p0 : ^TChooseColorA;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := ChooseColorA(__p0^);
end;

function ____ChooseColorW__Wrapper(const p0 : IDispatch): Bool;
var
__p0 : ^TChooseColorW;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := ChooseColorW(__p0^);
end;

function ____FindText__Wrapper(const p0 : IDispatch): HWND;
var
__p0 : ^TFindReplace;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := FindText(__p0^);
end;

function ____FindTextA__Wrapper(const p0 : IDispatch): HWND;
var
__p0 : ^TFindReplaceA;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := FindTextA(__p0^);
end;

function ____FindTextW__Wrapper(const p0 : IDispatch): HWND;
var
__p0 : ^TFindReplaceW;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := FindTextW(__p0^);
end;

function ____ReplaceText__Wrapper(const p0 : IDispatch): HWND;
var
__p0 : ^TFindReplace;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := ReplaceText(__p0^);
end;

function ____ReplaceTextA__Wrapper(const p0 : IDispatch): HWND;
var
__p0 : ^TFindReplaceA;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := ReplaceTextA(__p0^);
end;

function ____ReplaceTextW__Wrapper(const p0 : IDispatch): HWND;
var
__p0 : ^TFindReplaceW;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := ReplaceTextW(__p0^);
end;

function ____ChooseFont__Wrapper(const p0 : IDispatch): Bool;
var
__p0 : ^TChooseFont;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := ChooseFont(__p0^);
end;

function ____ChooseFontA__Wrapper(const p0 : IDispatch): Bool;
var
__p0 : ^TChooseFontA;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := ChooseFontA(__p0^);
end;

function ____ChooseFontW__Wrapper(const p0 : IDispatch): Bool;
var
__p0 : ^TChooseFontW;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := ChooseFontW(__p0^);
end;

function ____PrintDlg__Wrapper(const p0 : IDispatch): Bool;
var
__p0 : ^TPrintDlg;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := PrintDlg(__p0^);
end;

function ____PrintDlgA__Wrapper(const p0 : IDispatch): Bool;
var
__p0 : ^TPrintDlgA;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := PrintDlgA(__p0^);
end;

function ____PrintDlgW__Wrapper(const p0 : IDispatch): Bool;
var
__p0 : ^TPrintDlgW;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := PrintDlgW(__p0^);
end;

function ____PageSetupDlg__Wrapper(const p0 : IDispatch): Bool;
var
__p0 : ^TPageSetupDlg;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := PageSetupDlg(__p0^);
end;

function ____PageSetupDlgA__Wrapper(const p0 : IDispatch): Bool;
var
__p0 : ^TPageSetupDlgA;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := PageSetupDlgA(__p0^);
end;

function ____PageSetupDlgW__Wrapper(const p0 : IDispatch): Bool;
var
__p0 : ^TPageSetupDlgW;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := PageSetupDlgW(__p0^);
end;


type ___OFNOTIFY__Wrapper__ = class(___OFNOTIFY__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___OFNOTIFY__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_OFNOTIFYToVariant(var R : _OFNOTIFY) : OleVariant;
var
__rw : ___OFNOTIFY__Wrapper__;
begin
__rw := ___OFNOTIFY__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_OFNOTIFY(const V : OleVariant) : _OFNOTIFY;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _OFNOTIFY((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___OFNOTIFYA__Wrapper__ = class(___OFNOTIFYA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___OFNOTIFYA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_OFNOTIFYAToVariant(var R : _OFNOTIFYA) : OleVariant;
var
__rw : ___OFNOTIFYA__Wrapper__;
begin
__rw := ___OFNOTIFYA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_OFNOTIFYA(const V : OleVariant) : _OFNOTIFYA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _OFNOTIFYA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___OFNOTIFYEX__Wrapper__ = class(___OFNOTIFYEX__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___OFNOTIFYEX__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_OFNOTIFYEXToVariant(var R : _OFNOTIFYEX) : OleVariant;
var
__rw : ___OFNOTIFYEX__Wrapper__;
begin
__rw := ___OFNOTIFYEX__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_OFNOTIFYEX(const V : OleVariant) : _OFNOTIFYEX;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _OFNOTIFYEX((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___OFNOTIFYEXA__Wrapper__ = class(___OFNOTIFYEXA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___OFNOTIFYEXA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_OFNOTIFYEXAToVariant(var R : _OFNOTIFYEXA) : OleVariant;
var
__rw : ___OFNOTIFYEXA__Wrapper__;
begin
__rw := ___OFNOTIFYEXA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_OFNOTIFYEXA(const V : OleVariant) : _OFNOTIFYEXA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _OFNOTIFYEXA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___OFNOTIFYEXW__Wrapper__ = class(___OFNOTIFYEXW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___OFNOTIFYEXW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_OFNOTIFYEXWToVariant(var R : _OFNOTIFYEXW) : OleVariant;
var
__rw : ___OFNOTIFYEXW__Wrapper__;
begin
__rw := ___OFNOTIFYEXW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_OFNOTIFYEXW(const V : OleVariant) : _OFNOTIFYEXW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _OFNOTIFYEXW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type ___OFNOTIFYW__Wrapper__ = class(___OFNOTIFYW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___OFNOTIFYW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_OFNOTIFYWToVariant(var R : _OFNOTIFYW) : OleVariant;
var
__rw : ___OFNOTIFYW__Wrapper__;
begin
__rw := ___OFNOTIFYW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_OFNOTIFYW(const V : OleVariant) : _OFNOTIFYW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _OFNOTIFYW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DEVNAMES__Wrapper__ = class(__DEVNAMES__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DEVNAMES__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDEVNAMESToVariant(var R : DEVNAMES) : OleVariant;
var
__rw : __DEVNAMES__Wrapper__;
begin
__rw := __DEVNAMES__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDEVNAMES(const V : OleVariant) : DEVNAMES;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DEVNAMES((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __FINDREPLACE__Wrapper__ = class(__FINDREPLACE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __FINDREPLACE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertFINDREPLACEToVariant(var R : FINDREPLACE) : OleVariant;
var
__rw : __FINDREPLACE__Wrapper__;
begin
__rw := __FINDREPLACE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToFINDREPLACE(const V : OleVariant) : FINDREPLACE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := FINDREPLACE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __FINDREPLACEA__Wrapper__ = class(__FINDREPLACEA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __FINDREPLACEA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertFINDREPLACEAToVariant(var R : FINDREPLACEA) : OleVariant;
var
__rw : __FINDREPLACEA__Wrapper__;
begin
__rw := __FINDREPLACEA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToFINDREPLACEA(const V : OleVariant) : FINDREPLACEA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := FINDREPLACEA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __FINDREPLACEW__Wrapper__ = class(__FINDREPLACEW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __FINDREPLACEW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertFINDREPLACEWToVariant(var R : FINDREPLACEW) : OleVariant;
var
__rw : __FINDREPLACEW__Wrapper__;
begin
__rw := __FINDREPLACEW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToFINDREPLACEW(const V : OleVariant) : FINDREPLACEW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := FINDREPLACEW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __OFNOTIFY__Wrapper__ = class(__OFNOTIFY__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __OFNOTIFY__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertOFNOTIFYToVariant(var R : OFNOTIFY) : OleVariant;
var
__rw : __OFNOTIFY__Wrapper__;
begin
__rw := __OFNOTIFY__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToOFNOTIFY(const V : OleVariant) : OFNOTIFY;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := OFNOTIFY((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __OFNOTIFYA__Wrapper__ = class(__OFNOTIFYA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __OFNOTIFYA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertOFNOTIFYAToVariant(var R : OFNOTIFYA) : OleVariant;
var
__rw : __OFNOTIFYA__Wrapper__;
begin
__rw := __OFNOTIFYA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToOFNOTIFYA(const V : OleVariant) : OFNOTIFYA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := OFNOTIFYA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __OFNOTIFYEX__Wrapper__ = class(__OFNOTIFYEX__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __OFNOTIFYEX__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertOFNOTIFYEXToVariant(var R : OFNOTIFYEX) : OleVariant;
var
__rw : __OFNOTIFYEX__Wrapper__;
begin
__rw := __OFNOTIFYEX__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToOFNOTIFYEX(const V : OleVariant) : OFNOTIFYEX;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := OFNOTIFYEX((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __OFNOTIFYEXA__Wrapper__ = class(__OFNOTIFYEXA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __OFNOTIFYEXA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertOFNOTIFYEXAToVariant(var R : OFNOTIFYEXA) : OleVariant;
var
__rw : __OFNOTIFYEXA__Wrapper__;
begin
__rw := __OFNOTIFYEXA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToOFNOTIFYEXA(const V : OleVariant) : OFNOTIFYEXA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := OFNOTIFYEXA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __OFNOTIFYEXW__Wrapper__ = class(__OFNOTIFYEXW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __OFNOTIFYEXW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertOFNOTIFYEXWToVariant(var R : OFNOTIFYEXW) : OleVariant;
var
__rw : __OFNOTIFYEXW__Wrapper__;
begin
__rw := __OFNOTIFYEXW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToOFNOTIFYEXW(const V : OleVariant) : OFNOTIFYEXW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := OFNOTIFYEXW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __OFNOTIFYW__Wrapper__ = class(__OFNOTIFYW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __OFNOTIFYW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertOFNOTIFYWToVariant(var R : OFNOTIFYW) : OleVariant;
var
__rw : __OFNOTIFYW__Wrapper__;
begin
__rw := __OFNOTIFYW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToOFNOTIFYW(const V : OleVariant) : OFNOTIFYW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := OFNOTIFYW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __OPENFILENAME__Wrapper__ = class(__OPENFILENAME__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __OPENFILENAME__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertOPENFILENAMEToVariant(var R : OPENFILENAME) : OleVariant;
var
__rw : __OPENFILENAME__Wrapper__;
begin
__rw := __OPENFILENAME__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToOPENFILENAME(const V : OleVariant) : OPENFILENAME;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := OPENFILENAME((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __OPENFILENAMEA__Wrapper__ = class(__OPENFILENAMEA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __OPENFILENAMEA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertOPENFILENAMEAToVariant(var R : OPENFILENAMEA) : OleVariant;
var
__rw : __OPENFILENAMEA__Wrapper__;
begin
__rw := __OPENFILENAMEA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToOPENFILENAMEA(const V : OleVariant) : OPENFILENAMEA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := OPENFILENAMEA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __OPENFILENAMEW__Wrapper__ = class(__OPENFILENAMEW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __OPENFILENAMEW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertOPENFILENAMEWToVariant(var R : OPENFILENAMEW) : OleVariant;
var
__rw : __OPENFILENAMEW__Wrapper__;
begin
__rw := __OPENFILENAMEW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToOPENFILENAMEW(const V : OleVariant) : OPENFILENAMEW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := OPENFILENAMEW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagCHOOSECOLOR__Wrapper__ = class(__tagCHOOSECOLOR__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagCHOOSECOLOR__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagCHOOSECOLORToVariant(var R : tagCHOOSECOLOR) : OleVariant;
var
__rw : __tagCHOOSECOLOR__Wrapper__;
begin
__rw := __tagCHOOSECOLOR__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagCHOOSECOLOR(const V : OleVariant) : tagCHOOSECOLOR;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagCHOOSECOLOR((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagCHOOSECOLORA__Wrapper__ = class(__tagCHOOSECOLORA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagCHOOSECOLORA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagCHOOSECOLORAToVariant(var R : tagCHOOSECOLORA) : OleVariant;
var
__rw : __tagCHOOSECOLORA__Wrapper__;
begin
__rw := __tagCHOOSECOLORA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagCHOOSECOLORA(const V : OleVariant) : tagCHOOSECOLORA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagCHOOSECOLORA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagCHOOSECOLORW__Wrapper__ = class(__tagCHOOSECOLORW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagCHOOSECOLORW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagCHOOSECOLORWToVariant(var R : tagCHOOSECOLORW) : OleVariant;
var
__rw : __tagCHOOSECOLORW__Wrapper__;
begin
__rw := __tagCHOOSECOLORW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagCHOOSECOLORW(const V : OleVariant) : tagCHOOSECOLORW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagCHOOSECOLORW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagCHOOSEFONT__Wrapper__ = class(__tagCHOOSEFONT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagCHOOSEFONT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagCHOOSEFONTToVariant(var R : tagCHOOSEFONT) : OleVariant;
var
__rw : __tagCHOOSEFONT__Wrapper__;
begin
__rw := __tagCHOOSEFONT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagCHOOSEFONT(const V : OleVariant) : tagCHOOSEFONT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagCHOOSEFONT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagCHOOSEFONTA__Wrapper__ = class(__tagCHOOSEFONTA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagCHOOSEFONTA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagCHOOSEFONTAToVariant(var R : tagCHOOSEFONTA) : OleVariant;
var
__rw : __tagCHOOSEFONTA__Wrapper__;
begin
__rw := __tagCHOOSEFONTA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagCHOOSEFONTA(const V : OleVariant) : tagCHOOSEFONTA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagCHOOSEFONTA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagCHOOSEFONTW__Wrapper__ = class(__tagCHOOSEFONTW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagCHOOSEFONTW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagCHOOSEFONTWToVariant(var R : tagCHOOSEFONTW) : OleVariant;
var
__rw : __tagCHOOSEFONTW__Wrapper__;
begin
__rw := __tagCHOOSEFONTW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagCHOOSEFONTW(const V : OleVariant) : tagCHOOSEFONTW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagCHOOSEFONTW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagDEVNAMES__Wrapper__ = class(__tagDEVNAMES__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagDEVNAMES__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagDEVNAMESToVariant(var R : tagDEVNAMES) : OleVariant;
var
__rw : __tagDEVNAMES__Wrapper__;
begin
__rw := __tagDEVNAMES__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagDEVNAMES(const V : OleVariant) : tagDEVNAMES;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagDEVNAMES((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagFINDREPLACE__Wrapper__ = class(__tagFINDREPLACE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagFINDREPLACE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagFINDREPLACEToVariant(var R : tagFINDREPLACE) : OleVariant;
var
__rw : __tagFINDREPLACE__Wrapper__;
begin
__rw := __tagFINDREPLACE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagFINDREPLACE(const V : OleVariant) : tagFINDREPLACE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagFINDREPLACE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagFINDREPLACEA__Wrapper__ = class(__tagFINDREPLACEA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagFINDREPLACEA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagFINDREPLACEAToVariant(var R : tagFINDREPLACEA) : OleVariant;
var
__rw : __tagFINDREPLACEA__Wrapper__;
begin
__rw := __tagFINDREPLACEA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagFINDREPLACEA(const V : OleVariant) : tagFINDREPLACEA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagFINDREPLACEA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagFINDREPLACEW__Wrapper__ = class(__tagFINDREPLACEW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagFINDREPLACEW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagFINDREPLACEWToVariant(var R : tagFINDREPLACEW) : OleVariant;
var
__rw : __tagFINDREPLACEW__Wrapper__;
begin
__rw := __tagFINDREPLACEW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagFINDREPLACEW(const V : OleVariant) : tagFINDREPLACEW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagFINDREPLACEW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagOFN__Wrapper__ = class(__tagOFN__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagOFN__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagOFNToVariant(var R : tagOFN) : OleVariant;
var
__rw : __tagOFN__Wrapper__;
begin
__rw := __tagOFN__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagOFN(const V : OleVariant) : tagOFN;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagOFN((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagOFNA__Wrapper__ = class(__tagOFNA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagOFNA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagOFNAToVariant(var R : tagOFNA) : OleVariant;
var
__rw : __tagOFNA__Wrapper__;
begin
__rw := __tagOFNA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagOFNA(const V : OleVariant) : tagOFNA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagOFNA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagOFNW__Wrapper__ = class(__tagOFNW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagOFNW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagOFNWToVariant(var R : tagOFNW) : OleVariant;
var
__rw : __tagOFNW__Wrapper__;
begin
__rw := __tagOFNW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagOFNW(const V : OleVariant) : tagOFNW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagOFNW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagPD__Wrapper__ = class(__tagPD__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagPD__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagPDToVariant(var R : tagPD) : OleVariant;
var
__rw : __tagPD__Wrapper__;
begin
__rw := __tagPD__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagPD(const V : OleVariant) : tagPD;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagPD((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagPDA__Wrapper__ = class(__tagPDA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagPDA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagPDAToVariant(var R : tagPDA) : OleVariant;
var
__rw : __tagPDA__Wrapper__;
begin
__rw := __tagPDA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagPDA(const V : OleVariant) : tagPDA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagPDA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagPDW__Wrapper__ = class(__tagPDW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagPDW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagPDWToVariant(var R : tagPDW) : OleVariant;
var
__rw : __tagPDW__Wrapper__;
begin
__rw := __tagPDW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagPDW(const V : OleVariant) : tagPDW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagPDW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagPSD__Wrapper__ = class(__tagPSD__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagPSD__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagPSDToVariant(var R : tagPSD) : OleVariant;
var
__rw : __tagPSD__Wrapper__;
begin
__rw := __tagPSD__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagPSD(const V : OleVariant) : tagPSD;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagPSD((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagPSDA__Wrapper__ = class(__tagPSDA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagPSDA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagPSDAToVariant(var R : tagPSDA) : OleVariant;
var
__rw : __tagPSDA__Wrapper__;
begin
__rw := __tagPSDA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagPSDA(const V : OleVariant) : tagPSDA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagPSDA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __tagPSDW__Wrapper__ = class(__tagPSDW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __tagPSDW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConverttagPSDWToVariant(var R : tagPSDW) : OleVariant;
var
__rw : __tagPSDW__Wrapper__;
begin
__rw := __tagPSDW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTotagPSDW(const V : OleVariant) : tagPSDW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := tagPSDW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TChooseColor__Wrapper__ = class(__TChooseColor__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TChooseColor__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTChooseColorToVariant(var R : TChooseColor) : OleVariant;
var
__rw : __TChooseColor__Wrapper__;
begin
__rw := __TChooseColor__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTChooseColor(const V : OleVariant) : TChooseColor;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TChooseColor((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TChooseColorA__Wrapper__ = class(__TChooseColorA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TChooseColorA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTChooseColorAToVariant(var R : TChooseColorA) : OleVariant;
var
__rw : __TChooseColorA__Wrapper__;
begin
__rw := __TChooseColorA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTChooseColorA(const V : OleVariant) : TChooseColorA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TChooseColorA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TChooseColorW__Wrapper__ = class(__TChooseColorW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TChooseColorW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTChooseColorWToVariant(var R : TChooseColorW) : OleVariant;
var
__rw : __TChooseColorW__Wrapper__;
begin
__rw := __TChooseColorW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTChooseColorW(const V : OleVariant) : TChooseColorW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TChooseColorW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TChooseFont__Wrapper__ = class(__TChooseFont__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TChooseFont__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTChooseFontToVariant(var R : TChooseFont) : OleVariant;
var
__rw : __TChooseFont__Wrapper__;
begin
__rw := __TChooseFont__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTChooseFont(const V : OleVariant) : TChooseFont;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TChooseFont((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TChooseFontA__Wrapper__ = class(__TChooseFontA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TChooseFontA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTChooseFontAToVariant(var R : TChooseFontA) : OleVariant;
var
__rw : __TChooseFontA__Wrapper__;
begin
__rw := __TChooseFontA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTChooseFontA(const V : OleVariant) : TChooseFontA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TChooseFontA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TChooseFontW__Wrapper__ = class(__TChooseFontW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TChooseFontW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTChooseFontWToVariant(var R : TChooseFontW) : OleVariant;
var
__rw : __TChooseFontW__Wrapper__;
begin
__rw := __TChooseFontW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTChooseFontW(const V : OleVariant) : TChooseFontW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TChooseFontW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDevNames__Wrapper__ = class(__TDevNames__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDevNames__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDevNamesToVariant(var R : TDevNames) : OleVariant;
var
__rw : __TDevNames__Wrapper__;
begin
__rw := __TDevNames__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDevNames(const V : OleVariant) : TDevNames;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDevNames((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TFindReplace__Wrapper__ = class(__TFindReplace__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TFindReplace__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTFindReplaceToVariant(var R : TFindReplace) : OleVariant;
var
__rw : __TFindReplace__Wrapper__;
begin
__rw := __TFindReplace__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTFindReplace(const V : OleVariant) : TFindReplace;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TFindReplace((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TFindReplaceA__Wrapper__ = class(__TFindReplaceA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TFindReplaceA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTFindReplaceAToVariant(var R : TFindReplaceA) : OleVariant;
var
__rw : __TFindReplaceA__Wrapper__;
begin
__rw := __TFindReplaceA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTFindReplaceA(const V : OleVariant) : TFindReplaceA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TFindReplaceA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TFindReplaceW__Wrapper__ = class(__TFindReplaceW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TFindReplaceW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTFindReplaceWToVariant(var R : TFindReplaceW) : OleVariant;
var
__rw : __TFindReplaceW__Wrapper__;
begin
__rw := __TFindReplaceW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTFindReplaceW(const V : OleVariant) : TFindReplaceW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TFindReplaceW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TOFNotify__Wrapper__ = class(__TOFNotify__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TOFNotify__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTOFNotifyToVariant(var R : TOFNotify) : OleVariant;
var
__rw : __TOFNotify__Wrapper__;
begin
__rw := __TOFNotify__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTOFNotify(const V : OleVariant) : TOFNotify;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TOFNotify((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TOFNotifyA__Wrapper__ = class(__TOFNotifyA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TOFNotifyA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTOFNotifyAToVariant(var R : TOFNotifyA) : OleVariant;
var
__rw : __TOFNotifyA__Wrapper__;
begin
__rw := __TOFNotifyA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTOFNotifyA(const V : OleVariant) : TOFNotifyA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TOFNotifyA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TOFNotifyEx__Wrapper__ = class(__TOFNotifyEx__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TOFNotifyEx__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTOFNotifyExToVariant(var R : TOFNotifyEx) : OleVariant;
var
__rw : __TOFNotifyEx__Wrapper__;
begin
__rw := __TOFNotifyEx__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTOFNotifyEx(const V : OleVariant) : TOFNotifyEx;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TOFNotifyEx((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TOFNotifyExA__Wrapper__ = class(__TOFNotifyExA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TOFNotifyExA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTOFNotifyExAToVariant(var R : TOFNotifyExA) : OleVariant;
var
__rw : __TOFNotifyExA__Wrapper__;
begin
__rw := __TOFNotifyExA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTOFNotifyExA(const V : OleVariant) : TOFNotifyExA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TOFNotifyExA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TOFNotifyExW__Wrapper__ = class(__TOFNotifyExW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TOFNotifyExW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTOFNotifyExWToVariant(var R : TOFNotifyExW) : OleVariant;
var
__rw : __TOFNotifyExW__Wrapper__;
begin
__rw := __TOFNotifyExW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTOFNotifyExW(const V : OleVariant) : TOFNotifyExW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TOFNotifyExW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TOFNotifyW__Wrapper__ = class(__TOFNotifyW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TOFNotifyW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTOFNotifyWToVariant(var R : TOFNotifyW) : OleVariant;
var
__rw : __TOFNotifyW__Wrapper__;
begin
__rw := __TOFNotifyW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTOFNotifyW(const V : OleVariant) : TOFNotifyW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TOFNotifyW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TOpenFilename__Wrapper__ = class(__TOpenFilename__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TOpenFilename__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTOpenFilenameToVariant(var R : TOpenFilename) : OleVariant;
var
__rw : __TOpenFilename__Wrapper__;
begin
__rw := __TOpenFilename__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTOpenFilename(const V : OleVariant) : TOpenFilename;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TOpenFilename((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TOpenFilenameA__Wrapper__ = class(__TOpenFilenameA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TOpenFilenameA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTOpenFilenameAToVariant(var R : TOpenFilenameA) : OleVariant;
var
__rw : __TOpenFilenameA__Wrapper__;
begin
__rw := __TOpenFilenameA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTOpenFilenameA(const V : OleVariant) : TOpenFilenameA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TOpenFilenameA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TOpenFilenameW__Wrapper__ = class(__TOpenFilenameW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TOpenFilenameW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTOpenFilenameWToVariant(var R : TOpenFilenameW) : OleVariant;
var
__rw : __TOpenFilenameW__Wrapper__;
begin
__rw := __TOpenFilenameW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTOpenFilenameW(const V : OleVariant) : TOpenFilenameW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TOpenFilenameW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPageSetupDlg__Wrapper__ = class(__TPageSetupDlg__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPageSetupDlg__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPageSetupDlgToVariant(var R : TPageSetupDlg) : OleVariant;
var
__rw : __TPageSetupDlg__Wrapper__;
begin
__rw := __TPageSetupDlg__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPageSetupDlg(const V : OleVariant) : TPageSetupDlg;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPageSetupDlg((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPageSetupDlgA__Wrapper__ = class(__TPageSetupDlgA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPageSetupDlgA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPageSetupDlgAToVariant(var R : TPageSetupDlgA) : OleVariant;
var
__rw : __TPageSetupDlgA__Wrapper__;
begin
__rw := __TPageSetupDlgA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPageSetupDlgA(const V : OleVariant) : TPageSetupDlgA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPageSetupDlgA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPageSetupDlgW__Wrapper__ = class(__TPageSetupDlgW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPageSetupDlgW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPageSetupDlgWToVariant(var R : TPageSetupDlgW) : OleVariant;
var
__rw : __TPageSetupDlgW__Wrapper__;
begin
__rw := __TPageSetupDlgW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPageSetupDlgW(const V : OleVariant) : TPageSetupDlgW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPageSetupDlgW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPrintDlg__Wrapper__ = class(__TPrintDlg__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPrintDlg__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPrintDlgToVariant(var R : TPrintDlg) : OleVariant;
var
__rw : __TPrintDlg__Wrapper__;
begin
__rw := __TPrintDlg__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPrintDlg(const V : OleVariant) : TPrintDlg;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPrintDlg((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPrintDlgA__Wrapper__ = class(__TPrintDlgA__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPrintDlgA__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPrintDlgAToVariant(var R : TPrintDlgA) : OleVariant;
var
__rw : __TPrintDlgA__Wrapper__;
begin
__rw := __TPrintDlgA__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPrintDlgA(const V : OleVariant) : TPrintDlgA;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPrintDlgA((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPrintDlgW__Wrapper__ = class(__TPrintDlgW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPrintDlgW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPrintDlgWToVariant(var R : TPrintDlgW) : OleVariant;
var
__rw : __TPrintDlgW__Wrapper__;
begin
__rw := __TPrintDlgW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPrintDlgW(const V : OleVariant) : TPrintDlgW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPrintDlgW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..213] of string = (
'OFN_READONLY'
,'OFN_OVERWRITEPROMPT'
,'OFN_HIDEREADONLY'
,'OFN_NOCHANGEDIR'
,'OFN_SHOWHELP'
,'OFN_ENABLEHOOK'
,'OFN_ENABLETEMPLATE'
,'OFN_ENABLETEMPLATEHANDLE'
,'OFN_NOVALIDATE'
,'OFN_ALLOWMULTISELECT'
,'OFN_EXTENSIONDIFFERENT'
,'OFN_PATHMUSTEXIST'
,'OFN_FILEMUSTEXIST'
,'OFN_CREATEPROMPT'
,'OFN_SHAREAWARE'
,'OFN_NOREADONLYRETURN'
,'OFN_NOTESTFILECREATE'
,'OFN_NONETWORKBUTTON'
,'OFN_NOLONGNAMES'
,'OFN_EXPLORER'
,'OFN_NODEREFERENCELINKS'
,'OFN_LONGNAMES'
,'OFN_ENABLEINCLUDENOTIFY'
,'OFN_ENABLESIZING'
,'OFN_DONTADDTORECENT'
,'OFN_FORCESHOWHIDDEN'
,'OFN_EX_NOPLACESBAR'
,'OFN_SHAREFALLTHROUGH'
,'OFN_SHARENOWARN'
,'OFN_SHAREWARN'
,'CDN_FIRST'
,'CDN_LAST'
,'CDN_INITDONE'
,'CDN_SELCHANGE'
,'CDN_FOLDERCHANGE'
,'CDN_SHAREVIOLATION'
,'CDN_HELP'
,'CDN_FILEOK'
,'CDN_TYPECHANGE'
,'CDN_INCLUDEITEM'
,'CDM_FIRST'
,'CDM_LAST'
,'CDM_GETSPEC'
,'CDM_GETFILEPATH'
,'CDM_GETFOLDERPATH'
,'CDM_GETFOLDERIDLIST'
,'CDM_SETCONTROLTEXT'
,'CDM_HIDECONTROL'
,'CDM_SETDEFEXT'
,'CC_RGBINIT'
,'CC_FULLOPEN'
,'CC_PREVENTFULLOPEN'
,'CC_SHOWHELP'
,'CC_ENABLEHOOK'
,'CC_ENABLETEMPLATE'
,'CC_ENABLETEMPLATEHANDLE'
,'CC_SOLIDCOLOR'
,'CC_ANYCOLOR'
,'FR_DOWN'
,'FR_WHOLEWORD'
,'FR_MATCHCASE'
,'FR_FINDNEXT'
,'FR_REPLACE'
,'FR_REPLACEALL'
,'FR_DIALOGTERM'
,'FR_SHOWHELP'
,'FR_ENABLEHOOK'
,'FR_ENABLETEMPLATE'
,'FR_NOUPDOWN'
,'FR_NOMATCHCASE'
,'FR_NOWHOLEWORD'
,'FR_ENABLETEMPLATEHANDLE'
,'FR_HIDEUPDOWN'
,'FR_HIDEMATCHCASE'
,'FR_HIDEWHOLEWORD'
,'CF_SCREENFONTS'
,'CF_PRINTERFONTS'
,'CF_BOTH'
,'CF_SHOWHELP'
,'CF_ENABLEHOOK'
,'CF_ENABLETEMPLATE'
,'CF_ENABLETEMPLATEHANDLE'
,'CF_INITTOLOGFONTSTRUCT'
,'CF_USESTYLE'
,'CF_EFFECTS'
,'CF_APPLY'
,'CF_ANSIONLY'
,'CF_SCRIPTSONLY'
,'CF_NOVECTORFONTS'
,'CF_NOOEMFONTS'
,'CF_NOSIMULATIONS'
,'CF_LIMITSIZE'
,'CF_FIXEDPITCHONLY'
,'CF_WYSIWYG'
,'CF_FORCEFONTEXIST'
,'CF_SCALABLEONLY'
,'CF_TTONLY'
,'CF_NOFACESEL'
,'CF_NOSTYLESEL'
,'CF_NOSIZESEL'
,'CF_SELECTSCRIPT'
,'CF_NOSCRIPTSEL'
,'CF_NOVERTFONTS'
,'SIMULATED_FONTTYPE'
,'PRINTER_FONTTYPE'
,'SCREEN_FONTTYPE'
,'BOLD_FONTTYPE'
,'ITALIC_FONTTYPE'
,'REGULAR_FONTTYPE'
,'OPENTYPE_FONTTYPE'
,'TYPE1_FONTTYPE'
,'DSIG_FONTTYPE'
,'WM_CHOOSEFONT_GETLOGFONT'
,'WM_CHOOSEFONT_SETLOGFONT'
,'WM_CHOOSEFONT_SETFLAGS'
,'LBSELCHSTRING'
,'SHAREVISTRING'
,'FILEOKSTRING'
,'COLOROKSTRING'
,'SETRGBSTRING'
,'FINDMSGSTRING'
,'HELPMSGSTRING'
,'CD_LBSELNOITEMS'
,'CD_LBSELCHANGE'
,'CD_LBSELSUB'
,'CD_LBSELADD'
,'PD_ALLPAGES'
,'PD_SELECTION'
,'PD_PAGENUMS'
,'PD_NOSELECTION'
,'PD_NOPAGENUMS'
,'PD_COLLATE'
,'PD_PRINTTOFILE'
,'PD_PRINTSETUP'
,'PD_NOWARNING'
,'PD_RETURNDC'
,'PD_RETURNIC'
,'PD_RETURNDEFAULT'
,'PD_SHOWHELP'
,'PD_ENABLEPRINTHOOK'
,'PD_ENABLESETUPHOOK'
,'PD_ENABLEPRINTTEMPLATE'
,'PD_ENABLESETUPTEMPLATE'
,'PD_ENABLEPRINTTEMPLATEHANDLE'
,'PD_ENABLESETUPTEMPLATEHANDLE'
,'PD_USEDEVMODECOPIES'
,'PD_USEDEVMODECOPIESANDCOLLATE'
,'PD_DISABLEPRINTTOFILE'
,'PD_HIDEPRINTTOFILE'
,'PD_NONETWORKBUTTON'
,'DN_DEFAULTPRN'
,'WM_PSD_PAGESETUPDLG'
,'WM_PSD_FULLPAGERECT'
,'WM_PSD_MINMARGINRECT'
,'WM_PSD_MARGINRECT'
,'WM_PSD_GREEKTEXTRECT'
,'WM_PSD_ENVSTAMPRECT'
,'WM_PSD_YAFULLPAGERECT'
,'PSD_DEFAULTMINMARGINS'
,'PSD_INWININIINTLMEASURE'
,'PSD_MINMARGINS'
,'PSD_MARGINS'
,'PSD_INTHOUSANDTHSOFINCHES'
,'PSD_INHUNDREDTHSOFMILLIMETERS'
,'PSD_DISABLEMARGINS'
,'PSD_DISABLEPRINTER'
,'PSD_NOWARNING'
,'PSD_DISABLEORIENTATION'
,'PSD_RETURNDEFAULT'
,'PSD_DISABLEPAPER'
,'PSD_SHOWHELP'
,'PSD_ENABLEPAGESETUPHOOK'
,'PSD_ENABLEPAGESETUPTEMPLATE'
,'PSD_ENABLEPAGESETUPTEMPLATEHANDLE'
,'PSD_ENABLEPAGEPAINTHOOK'
,'PSD_DISABLEPAGEPAINTING'
,'PSD_NONETWORKBUTTON'
,'CDERR_DIALOGFAILURE'
,'CDERR_GENERALCODES'
,'CDERR_STRUCTSIZE'
,'CDERR_INITIALIZATION'
,'CDERR_NOTEMPLATE'
,'CDERR_NOHINSTANCE'
,'CDERR_LOADSTRFAILURE'
,'CDERR_FINDRESFAILURE'
,'CDERR_LOADRESFAILURE'
,'CDERR_LOCKRESFAILURE'
,'CDERR_MEMALLOCFAILURE'
,'CDERR_MEMLOCKFAILURE'
,'CDERR_NOHOOK'
,'CDERR_REGISTERMSGFAIL'
,'PDERR_PRINTERCODES'
,'PDERR_SETUPFAILURE'
,'PDERR_PARSEFAILURE'
,'PDERR_RETDEFFAILURE'
,'PDERR_LOADDRVFAILURE'
,'PDERR_GETDEVMODEFAIL'
,'PDERR_INITFAILURE'
,'PDERR_NODEVICES'
,'PDERR_NODEFAULTPRN'
,'PDERR_DNDMMISMATCH'
,'PDERR_CREATEICFAILURE'
,'PDERR_PRINTERNOTFOUND'
,'PDERR_DEFAULTDIFFERENT'
,'CFERR_CHOOSEFONTCODES'
,'CFERR_NOFONTS'
,'CFERR_MAXLESSTHANMIN'
,'FNERR_FILENAMECODES'
,'FNERR_SUBCLASSFAILURE'
,'FNERR_INVALIDFILENAME'
,'FNERR_BUFFERTOOSMALL'
,'FRERR_FINDREPLACECODES'
,'FRERR_BUFFERLENGTHZERO'
,'CCERR_CHOOSECOLORCODES'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,OFN_READONLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,OFN_OVERWRITEPROMPT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,OFN_HIDEREADONLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,OFN_NOCHANGEDIR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,OFN_SHOWHELP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,OFN_ENABLEHOOK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,OFN_ENABLETEMPLATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,OFN_ENABLETEMPLATEHANDLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,OFN_NOVALIDATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,OFN_ALLOWMULTISELECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,OFN_EXTENSIONDIFFERENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,OFN_PATHMUSTEXIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,OFN_FILEMUSTEXIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,OFN_CREATEPROMPT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,OFN_SHAREAWARE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,OFN_NOREADONLYRETURN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,OFN_NOTESTFILECREATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,OFN_NONETWORKBUTTON));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,OFN_NOLONGNAMES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,OFN_EXPLORER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,OFN_NODEREFERENCELINKS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,OFN_LONGNAMES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,OFN_ENABLEINCLUDENOTIFY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,OFN_ENABLESIZING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,OFN_DONTADDTORECENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,OFN_FORCESHOWHIDDEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,OFN_EX_NOPLACESBAR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,OFN_SHAREFALLTHROUGH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,OFN_SHARENOWARN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,OFN_SHAREWARN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,CDN_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,CDN_LAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,CDN_INITDONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,CDN_SELCHANGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,CDN_FOLDERCHANGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,CDN_SHAREVIOLATION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,CDN_HELP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,CDN_FILEOK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,CDN_TYPECHANGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,CDN_INCLUDEITEM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,CDM_FIRST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,CDM_LAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,CDM_GETSPEC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,CDM_GETFILEPATH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,CDM_GETFOLDERPATH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,CDM_GETFOLDERIDLIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,CDM_SETCONTROLTEXT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,CDM_HIDECONTROL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,CDM_SETDEFEXT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,CC_RGBINIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,CC_FULLOPEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,CC_PREVENTFULLOPEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,CC_SHOWHELP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,CC_ENABLEHOOK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,CC_ENABLETEMPLATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,CC_ENABLETEMPLATEHANDLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,CC_SOLIDCOLOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,CC_ANYCOLOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,FR_DOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,FR_WHOLEWORD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,FR_MATCHCASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,FR_FINDNEXT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,FR_REPLACE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,FR_REPLACEALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,FR_DIALOGTERM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[65] ,FR_SHOWHELP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[66] ,FR_ENABLEHOOK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[67] ,FR_ENABLETEMPLATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[68] ,FR_NOUPDOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[69] ,FR_NOMATCHCASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[70] ,FR_NOWHOLEWORD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[71] ,FR_ENABLETEMPLATEHANDLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[72] ,FR_HIDEUPDOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[73] ,FR_HIDEMATCHCASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[74] ,FR_HIDEWHOLEWORD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[75] ,CF_SCREENFONTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[76] ,CF_PRINTERFONTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[77] ,CF_BOTH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[78] ,CF_SHOWHELP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[79] ,CF_ENABLEHOOK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[80] ,CF_ENABLETEMPLATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[81] ,CF_ENABLETEMPLATEHANDLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[82] ,CF_INITTOLOGFONTSTRUCT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[83] ,CF_USESTYLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[84] ,CF_EFFECTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[85] ,CF_APPLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[86] ,CF_ANSIONLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[87] ,CF_SCRIPTSONLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[88] ,CF_NOVECTORFONTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[89] ,CF_NOOEMFONTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[90] ,CF_NOSIMULATIONS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[91] ,CF_LIMITSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[92] ,CF_FIXEDPITCHONLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[93] ,CF_WYSIWYG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[94] ,CF_FORCEFONTEXIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[95] ,CF_SCALABLEONLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[96] ,CF_TTONLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[97] ,CF_NOFACESEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[98] ,CF_NOSTYLESEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[99] ,CF_NOSIZESEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[100] ,CF_SELECTSCRIPT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[101] ,CF_NOSCRIPTSEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[102] ,CF_NOVERTFONTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[103] ,SIMULATED_FONTTYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[104] ,PRINTER_FONTTYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[105] ,SCREEN_FONTTYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[106] ,BOLD_FONTTYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[107] ,ITALIC_FONTTYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[108] ,REGULAR_FONTTYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[109] ,OPENTYPE_FONTTYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[110] ,TYPE1_FONTTYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[111] ,DSIG_FONTTYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[112] ,WM_CHOOSEFONT_GETLOGFONT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[113] ,WM_CHOOSEFONT_SETLOGFONT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[114] ,WM_CHOOSEFONT_SETFLAGS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[115] ,LBSELCHSTRING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[116] ,SHAREVISTRING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[117] ,FILEOKSTRING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[118] ,COLOROKSTRING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[119] ,SETRGBSTRING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[120] ,FINDMSGSTRING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[121] ,HELPMSGSTRING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[122] ,CD_LBSELNOITEMS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[123] ,CD_LBSELCHANGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[124] ,CD_LBSELSUB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[125] ,CD_LBSELADD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[126] ,PD_ALLPAGES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[127] ,PD_SELECTION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[128] ,PD_PAGENUMS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[129] ,PD_NOSELECTION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[130] ,PD_NOPAGENUMS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[131] ,PD_COLLATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[132] ,PD_PRINTTOFILE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[133] ,PD_PRINTSETUP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[134] ,PD_NOWARNING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[135] ,PD_RETURNDC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[136] ,PD_RETURNIC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[137] ,PD_RETURNDEFAULT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[138] ,PD_SHOWHELP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[139] ,PD_ENABLEPRINTHOOK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[140] ,PD_ENABLESETUPHOOK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[141] ,PD_ENABLEPRINTTEMPLATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[142] ,PD_ENABLESETUPTEMPLATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[143] ,PD_ENABLEPRINTTEMPLATEHANDLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[144] ,PD_ENABLESETUPTEMPLATEHANDLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[145] ,PD_USEDEVMODECOPIES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[146] ,PD_USEDEVMODECOPIESANDCOLLATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[147] ,PD_DISABLEPRINTTOFILE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[148] ,PD_HIDEPRINTTOFILE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[149] ,PD_NONETWORKBUTTON));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[150] ,DN_DEFAULTPRN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[151] ,WM_PSD_PAGESETUPDLG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[152] ,WM_PSD_FULLPAGERECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[153] ,WM_PSD_MINMARGINRECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[154] ,WM_PSD_MARGINRECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[155] ,WM_PSD_GREEKTEXTRECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[156] ,WM_PSD_ENVSTAMPRECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[157] ,WM_PSD_YAFULLPAGERECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[158] ,PSD_DEFAULTMINMARGINS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[159] ,PSD_INWININIINTLMEASURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[160] ,PSD_MINMARGINS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[161] ,PSD_MARGINS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[162] ,PSD_INTHOUSANDTHSOFINCHES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[163] ,PSD_INHUNDREDTHSOFMILLIMETERS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[164] ,PSD_DISABLEMARGINS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[165] ,PSD_DISABLEPRINTER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[166] ,PSD_NOWARNING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[167] ,PSD_DISABLEORIENTATION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[168] ,PSD_RETURNDEFAULT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[169] ,PSD_DISABLEPAPER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[170] ,PSD_SHOWHELP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[171] ,PSD_ENABLEPAGESETUPHOOK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[172] ,PSD_ENABLEPAGESETUPTEMPLATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[173] ,PSD_ENABLEPAGESETUPTEMPLATEHANDLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[174] ,PSD_ENABLEPAGEPAINTHOOK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[175] ,PSD_DISABLEPAGEPAINTING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[176] ,PSD_NONETWORKBUTTON));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[177] ,CDERR_DIALOGFAILURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[178] ,CDERR_GENERALCODES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[179] ,CDERR_STRUCTSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[180] ,CDERR_INITIALIZATION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[181] ,CDERR_NOTEMPLATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[182] ,CDERR_NOHINSTANCE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[183] ,CDERR_LOADSTRFAILURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[184] ,CDERR_FINDRESFAILURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[185] ,CDERR_LOADRESFAILURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[186] ,CDERR_LOCKRESFAILURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[187] ,CDERR_MEMALLOCFAILURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[188] ,CDERR_MEMLOCKFAILURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[189] ,CDERR_NOHOOK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[190] ,CDERR_REGISTERMSGFAIL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[191] ,PDERR_PRINTERCODES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[192] ,PDERR_SETUPFAILURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[193] ,PDERR_PARSEFAILURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[194] ,PDERR_RETDEFFAILURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[195] ,PDERR_LOADDRVFAILURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[196] ,PDERR_GETDEVMODEFAIL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[197] ,PDERR_INITFAILURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[198] ,PDERR_NODEVICES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[199] ,PDERR_NODEFAULTPRN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[200] ,PDERR_DNDMMISMATCH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[201] ,PDERR_CREATEICFAILURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[202] ,PDERR_PRINTERNOTFOUND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[203] ,PDERR_DEFAULTDIFFERENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[204] ,CFERR_CHOOSEFONTCODES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[205] ,CFERR_NOFONTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[206] ,CFERR_MAXLESSTHANMIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[207] ,FNERR_FILENAMECODES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[208] ,FNERR_SUBCLASSFAILURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[209] ,FNERR_INVALIDFILENAME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[210] ,FNERR_BUFFERTOOSMALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[211] ,FRERR_FINDREPLACECODES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[212] ,FRERR_BUFFERLENGTHZERO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[213] ,CCERR_CHOOSECOLORCODES));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..87] of string = (
'_OFNOTIFY'
,'_OFNOTIFYA'
,'_OFNOTIFYEX'
,'_OFNOTIFYEXA'
,'_OFNOTIFYEXW'
,'_OFNOTIFYW'
,'DEVNAMES'
,'FINDREPLACE'
,'FINDREPLACEA'
,'FINDREPLACEW'
,'OFNOTIFY'
,'OFNOTIFYA'
,'OFNOTIFYEX'
,'OFNOTIFYEXA'
,'OFNOTIFYEXW'
,'OFNOTIFYW'
,'OPENFILENAME'
,'OPENFILENAMEA'
,'OPENFILENAMEW'
,'tagCHOOSECOLOR'
,'tagCHOOSECOLORA'
,'tagCHOOSECOLORW'
,'tagCHOOSEFONT'
,'tagCHOOSEFONTA'
,'tagCHOOSEFONTW'
,'tagDEVNAMES'
,'tagFINDREPLACE'
,'tagFINDREPLACEA'
,'tagFINDREPLACEW'
,'tagOFN'
,'tagOFNA'
,'tagOFNW'
,'tagPD'
,'tagPDA'
,'tagPDW'
,'tagPSD'
,'tagPSDA'
,'tagPSDW'
,'TChooseColor'
,'TChooseColorA'
,'TChooseColorW'
,'TChooseFont'
,'TChooseFontA'
,'TChooseFontW'
,'TDevNames'
,'TFindReplace'
,'TFindReplaceA'
,'TFindReplaceW'
,'TOFNotify'
,'TOFNotifyA'
,'TOFNotifyEx'
,'TOFNotifyExA'
,'TOFNotifyExW'
,'TOFNotifyW'
,'TOpenFilename'
,'TOpenFilenameA'
,'TOpenFilenameW'
,'TPageSetupDlg'
,'TPageSetupDlgA'
,'TPageSetupDlgW'
,'TPrintDlg'
,'TPrintDlgA'
,'TPrintDlgW'
,'GetOpenFileName'
,'GetOpenFileNameA'
,'GetOpenFileNameW'
,'GetSaveFileName'
,'GetSaveFileNameA'
,'GetSaveFileNameW'
,'ChooseColor'
,'ChooseColorA'
,'ChooseColorW'
,'FindText'
,'FindTextA'
,'FindTextW'
,'ReplaceText'
,'ReplaceTextA'
,'ReplaceTextW'
,'ChooseFont'
,'ChooseFontA'
,'ChooseFontW'
,'PrintDlg'
,'PrintDlgA'
,'PrintDlgW'
,'CommDlgExtendedError'
,'PageSetupDlg'
,'PageSetupDlgA'
,'PageSetupDlgW'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(__OFNOTIFY_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(__OFNOTIFYA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(__OFNOTIFYEX_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(__OFNOTIFYEXA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(__OFNOTIFYEXW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[5],Addr(__OFNOTIFYW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[6],Addr(_DEVNAMES_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[7],Addr(_FINDREPLACE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[8],Addr(_FINDREPLACEA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[9],Addr(_FINDREPLACEW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[10],Addr(_OFNOTIFY_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[11],Addr(_OFNOTIFYA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[12],Addr(_OFNOTIFYEX_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[13],Addr(_OFNOTIFYEXA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[14],Addr(_OFNOTIFYEXW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[15],Addr(_OFNOTIFYW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[16],Addr(_OPENFILENAME_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[17],Addr(_OPENFILENAMEA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[18],Addr(_OPENFILENAMEW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[19],Addr(_tagCHOOSECOLOR_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[20],Addr(_tagCHOOSECOLORA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[21],Addr(_tagCHOOSECOLORW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[22],Addr(_tagCHOOSEFONT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[23],Addr(_tagCHOOSEFONTA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[24],Addr(_tagCHOOSEFONTW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[25],Addr(_tagDEVNAMES_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[26],Addr(_tagFINDREPLACE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[27],Addr(_tagFINDREPLACEA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[28],Addr(_tagFINDREPLACEW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[29],Addr(_tagOFN_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[30],Addr(_tagOFNA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[31],Addr(_tagOFNW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[32],Addr(_tagPD_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[33],Addr(_tagPDA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[34],Addr(_tagPDW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[35],Addr(_tagPSD_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[36],Addr(_tagPSDA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[37],Addr(_tagPSDW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[38],Addr(_TChooseColor_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[39],Addr(_TChooseColorA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[40],Addr(_TChooseColorW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[41],Addr(_TChooseFont_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[42],Addr(_TChooseFontA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[43],Addr(_TChooseFontW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[44],Addr(_TDevNames_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[45],Addr(_TFindReplace_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[46],Addr(_TFindReplaceA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[47],Addr(_TFindReplaceW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[48],Addr(_TOFNotify_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[49],Addr(_TOFNotifyA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[50],Addr(_TOFNotifyEx_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[51],Addr(_TOFNotifyExA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[52],Addr(_TOFNotifyExW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[53],Addr(_TOFNotifyW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[54],Addr(_TOpenFilename_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[55],Addr(_TOpenFilenameA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[56],Addr(_TOpenFilenameW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[57],Addr(_TPageSetupDlg_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[58],Addr(_TPageSetupDlgA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[59],Addr(_TPageSetupDlgW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[60],Addr(_TPrintDlg_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[61],Addr(_TPrintDlgA_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[62],Addr(_TPrintDlgW_)));
RegisterProc(nil,MethodNames[63],mtProc,TypeInfo(_T0),[
TypeInfo(IDispatch),TypeInfo(Bool)],Addr(____GetOpenFileName__Wrapper),cRegister);

RegisterProc(nil,MethodNames[64],mtProc,TypeInfo(_T1),[
TypeInfo(IDispatch),TypeInfo(Bool)],Addr(____GetOpenFileNameA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[65],mtProc,TypeInfo(_T2),[
TypeInfo(IDispatch),TypeInfo(Bool)],Addr(____GetOpenFileNameW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[66],mtProc,TypeInfo(_T3),[
TypeInfo(IDispatch),TypeInfo(Bool)],Addr(____GetSaveFileName__Wrapper),cRegister);

RegisterProc(nil,MethodNames[67],mtProc,TypeInfo(_T4),[
TypeInfo(IDispatch),TypeInfo(Bool)],Addr(____GetSaveFileNameA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[68],mtProc,TypeInfo(_T5),[
TypeInfo(IDispatch),TypeInfo(Bool)],Addr(____GetSaveFileNameW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[69],mtProc,TypeInfo(_T9),[
TypeInfo(IDispatch),TypeInfo(Bool)],Addr(____ChooseColor__Wrapper),cRegister);

RegisterProc(nil,MethodNames[70],mtProc,TypeInfo(_T10),[
TypeInfo(IDispatch),TypeInfo(Bool)],Addr(____ChooseColorA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[71],mtProc,TypeInfo(_T11),[
TypeInfo(IDispatch),TypeInfo(Bool)],Addr(____ChooseColorW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[72],mtProc,TypeInfo(_T12),[
TypeInfo(IDispatch),TypeInfo(HWND)],Addr(____FindText__Wrapper),cRegister);

RegisterProc(nil,MethodNames[73],mtProc,TypeInfo(_T13),[
TypeInfo(IDispatch),TypeInfo(HWND)],Addr(____FindTextA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[74],mtProc,TypeInfo(_T14),[
TypeInfo(IDispatch),TypeInfo(HWND)],Addr(____FindTextW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[75],mtProc,TypeInfo(_T15),[
TypeInfo(IDispatch),TypeInfo(HWND)],Addr(____ReplaceText__Wrapper),cRegister);

RegisterProc(nil,MethodNames[76],mtProc,TypeInfo(_T16),[
TypeInfo(IDispatch),TypeInfo(HWND)],Addr(____ReplaceTextA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[77],mtProc,TypeInfo(_T17),[
TypeInfo(IDispatch),TypeInfo(HWND)],Addr(____ReplaceTextW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[78],mtProc,TypeInfo(_T18),[
TypeInfo(IDispatch),TypeInfo(Bool)],Addr(____ChooseFont__Wrapper),cRegister);

RegisterProc(nil,MethodNames[79],mtProc,TypeInfo(_T19),[
TypeInfo(IDispatch),TypeInfo(Bool)],Addr(____ChooseFontA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[80],mtProc,TypeInfo(_T20),[
TypeInfo(IDispatch),TypeInfo(Bool)],Addr(____ChooseFontW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[81],mtProc,TypeInfo(_T21),[
TypeInfo(IDispatch),TypeInfo(Bool)],Addr(____PrintDlg__Wrapper),cRegister);

RegisterProc(nil,MethodNames[82],mtProc,TypeInfo(_T22),[
TypeInfo(IDispatch),TypeInfo(Bool)],Addr(____PrintDlgA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[83],mtProc,TypeInfo(_T23),[
TypeInfo(IDispatch),TypeInfo(Bool)],Addr(____PrintDlgW__Wrapper),cRegister);

RegisterProc(nil,MethodNames[84],mtProc,TypeInfo(_T24),[TypeInfo(DWORD)],Addr(CommDlgExtendedError),cStdCall);

RegisterProc(nil,MethodNames[85],mtProc,TypeInfo(_T25),[
TypeInfo(IDispatch),TypeInfo(Bool)],Addr(____PageSetupDlg__Wrapper),cRegister);

RegisterProc(nil,MethodNames[86],mtProc,TypeInfo(_T26),[
TypeInfo(IDispatch),TypeInfo(Bool)],Addr(____PageSetupDlgA__Wrapper),cRegister);

RegisterProc(nil,MethodNames[87],mtProc,TypeInfo(_T27),[
TypeInfo(IDispatch),TypeInfo(Bool)],Addr(____PageSetupDlgW__Wrapper),cRegister);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'GetFileTitle',mtProc,TypeInfo(_T6),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(Word),TypeInfo(SmallInt)],Addr(GetFileTitle),cStdCall)}

{RegisterProc(nil,'GetFileTitleA',mtProc,TypeInfo(_T7),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(Word),TypeInfo(SmallInt)],Addr(GetFileTitleA),cStdCall)}

{RegisterProc(nil,'GetFileTitleW',mtProc,TypeInfo(_T8),[
TypeInfoPWideChar,
TypeInfoPWideChar,
TypeInfo(Word),TypeInfo(SmallInt)],Addr(GetFileTitleW),cStdCall)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
