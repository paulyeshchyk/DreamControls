{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit BDEREG_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Report,
  RSCONSTS,
  LibHelp,
  Dialogs,
  dblookup,
  FileCtrl,
  SysUtils,
  Classes,
  DSDesign,
  Menus,
  DBTables,
  DB,
  DRIntf,
  DsnDbCst,
  DSAttrS,
  DSAttrA,
  DBReg,
  Dbxplor,
  bdeconst,
  GqeDelph,
  ColnEdit,
  TblDsgn,
  Dbedit,
  Ixedit,
  Updsqled,
  FldLinks,
  CNCOLEDT,
  DrTable,
  TreeIntf,
  DsnDb,
  BDEReg;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = function (const p0 : string): string of object;

_T1 = _T0;

_T2 = _T0;

_T3 = procedure  of object;

function __DC__GetTTableFieldLinkProperty__IndexBased(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TTableFieldLinkProperty(Instance).IndexBased;
end;

function __DC__GetTTableFieldLinkProperty__IndexDefs(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TTableFieldLinkProperty(Instance).IndexDefs);
end;

function __DC__GetTTableFieldLinkProperty__IndexFieldNames(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TTableFieldLinkProperty(Instance).IndexFieldNames;
end;

procedure __DC__SetTTableFieldLinkProperty__IndexFieldNames(Instance : TObject; Params : PVariantArgList);
begin
TTableFieldLinkProperty(Instance).IndexFieldNames:=OleVariant(Params^[0]);
end;

function __DC__GetTTableFieldLinkProperty__IndexName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TTableFieldLinkProperty(Instance).IndexName;
end;

procedure __DC__SetTTableFieldLinkProperty__IndexName(Instance : TObject; Params : PVariantArgList);
begin
TTableFieldLinkProperty(Instance).IndexName:=OleVariant(Params^[0]);
end;

function __DC__GetTTableFieldLinkProperty__MasterFields(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TTableFieldLinkProperty(Instance).MasterFields;
end;

procedure __DC__SetTTableFieldLinkProperty__MasterFields(Instance : TObject; Params : PVariantArgList);
begin
TTableFieldLinkProperty(Instance).MasterFields:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TTableFieldLinkProperty,'IndexBased',__DC__GetTTableFieldLinkProperty__IndexBased,nil);
RegisterProperty(TTableFieldLinkProperty,'IndexDefs',__DC__GetTTableFieldLinkProperty__IndexDefs,nil);
RegisterProperty(TTableFieldLinkProperty,'IndexFieldNames',__DC__GetTTableFieldLinkProperty__IndexFieldNames,__DC__SetTTableFieldLinkProperty__IndexFieldNames);
RegisterProperty(TTableFieldLinkProperty,'IndexName',__DC__GetTTableFieldLinkProperty__IndexName,__DC__SetTTableFieldLinkProperty__IndexName);
RegisterProperty(TTableFieldLinkProperty,'MasterFields',__DC__GetTTableFieldLinkProperty__MasterFields,__DC__SetTTableFieldLinkProperty__MasterFields);
end;

const __ConstNames0 : array[0..2] of string = (
'cDefaultSessionSprigName'
,'cImpliedSessionSprigPrefix'
,'cImpliedDatabaseSprigPrefix'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,cDefaultSessionSprigName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,cImpliedSessionSprigPrefix));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,cImpliedDatabaseSprigPrefix));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..13] of TClass = (
TBatchMoveSprig,
TBDEDataSetSprig,
TDatabaseSprig,
TDBDataSetSprig,
TDefaultSessionSprig,
TImpliedDatabaseSprig,
TImpliedSessionSprig,
TNestedTableSprig,
TQuerySprig,
TSessionSprig,
TStoredProcSprig,
TTableFieldLinkProperty,
TTableSprig,
TUpdateSQLSprig
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..3] of string = (
'SprigBDESessionName'
,'SprigBDEImpliedDatabaseName'
,'SprigBDEImpliedSessionName'
,'Register'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(string),TypeInfo(string)],Addr(SprigBDESessionName),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(string),TypeInfo(string)],Addr(SprigBDEImpliedDatabaseName),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T2),[
TypeInfo(string),TypeInfo(string)],Addr(SprigBDEImpliedSessionName),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T3),NoParams,Addr(Register),cRegister);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
