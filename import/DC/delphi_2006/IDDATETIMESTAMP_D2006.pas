{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDDATETIMESTAMP_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  Windows,
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdBaseComponent,
  SysConst,
  SysUtils,
  IdDateTimeStamp;
function ConvertTTimeStampToVariant(var R : TTimeStamp) : OleVariant;
function ConvertVariantToTTimeStamp(const V : OleVariant) : TTimeStamp;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TTimeStamp__Wrapper = class(TDCRecordWrapper)
private
fR : TTimeStamp;
public
function GetRecordPtr : pointer; override;
published
procedure setTime(const val : Integer);
function getTime : Integer;
property Time : Integer read getTime write setTime;
procedure setDate(const val : Integer);
function getDate : Integer;
property Date : Integer read getDate write setDate;
end;
type
_T0 = procedure (p0 : Cardinal) of object;

_T1 = _T0;

_T2 = _T0;

_T3 = _T0;

_T4 = _T0;

_T5 = _T0;

_T6 = procedure (p0 : TDateTime) of object;

_T7 = procedure (p0 : TIdDateTimeStamp) of object;

_T8 = procedure (const p0 : IDispatch) of object;

_T9 = _T0;

_T10 = _T0;

_T11 = function : string of object;

_T12 = _T11;

_T13 = _T11;

_T14 = _T11;

_T15 = function : TDateTime of object;

_T16 = function : IDispatch of object;

_T17 = _T11;

_T18 = function : Integer of object;

_T19 = _T18;

_T20 = _T18;

_T21 = _T18;

_T22 = _T11;

_T23 = _T11;

_T24 = _T18;

_T25 = _T18;

_T26 = function : Boolean of object;

_T27 = _T18;

_T28 = _T18;

_T29 = _T18;

_T30 = _T11;

_T31 = _T11;

_T32 = _T18;

_T33 = _T18;

_T34 = _T11;

_T35 = _T18;

_T36 = _T18;

_T37 = _T18;

_T38 = procedure (p0 : Word;
p1 : Word) of object;

_T39 = procedure (p0 : string) of object;

_T40 = _T39;

_T41 = _T6;

_T42 = _T8;

_T43 = procedure (p0 : Integer) of object;

_T44 = _T43;

_T45 = _T43;

_T46 = procedure (const p0 : Integer) of object;

_T47 = _T43;

_T48 = _T0;

_T49 = _T0;

_T50 = _T0;

_T51 = _T0;

_T52 = _T0;

_T53 = _T0;

_T54 = _T6;

_T55 = _T7;

_T56 = _T8;

_T57 = _T0;

_T58 = _T0;

_T59 = procedure  of object;

_T60 = _T59;

_T61 = _T59;

function __TTimeStamp__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTimeStamp__Wrapper.setTime(const val : Integer);
begin
TTimeStamp(GetRecordPtr^).Time := val;
end;
function __TTimeStamp__Wrapper.getTime : Integer;
begin
result := TTimeStamp(GetRecordPtr^).Time;
end;
procedure __TTimeStamp__Wrapper.setDate(const val : Integer);
begin
TTimeStamp(GetRecordPtr^).Date := val;
end;
function __TTimeStamp__Wrapper.getDate : Integer;
begin
result := TTimeStamp(GetRecordPtr^).Date;
end;
procedure __TIdDateTimeStamp__AddTTimeStamp__Wrapper(__Instance : TIdDateTimeStamp;
const p0 : IDispatch);
var
__p0 : ^TTimeStamp;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
TIdDateTimeStamp(__Instance).AddTTimeStamp(__p0^);
end;

function __TIdDateTimeStamp__GetAsTTimeStamp__Wrapper(__Instance : TIdDateTimeStamp): IDispatch;
var
__result : TTimeStamp;
__wrapper : __TTimeStamp__Wrapper;
begin
__result := TIdDateTimeStamp(__Instance).GetAsTTimeStamp;
__wrapper := __TTimeStamp__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

procedure __TIdDateTimeStamp__SetFromTTimeStamp__Wrapper(__Instance : TIdDateTimeStamp;
const p0 : IDispatch);
var
__p0 : ^TTimeStamp;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
TIdDateTimeStamp(__Instance).SetFromTTimeStamp(__p0^);
end;

procedure __TIdDateTimeStamp__SubtractTTimeStamp__Wrapper(__Instance : TIdDateTimeStamp;
const p0 : IDispatch);
var
__p0 : ^TTimeStamp;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
TIdDateTimeStamp(__Instance).SubtractTTimeStamp(__p0^);
end;


type __TTimeStamp__Wrapper__ = class(__TTimeStamp__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTimeStamp__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTimeStampToVariant(var R : TTimeStamp) : OleVariant;
var
__rw : __TTimeStamp__Wrapper__;
begin
__rw := __TTimeStamp__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTimeStamp(const V : OleVariant) : TTimeStamp;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTimeStamp((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTIdDateTimeStamp__AsISO8601Calendar(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).AsISO8601Calendar;
end;

function __DC__GetTIdDateTimeStamp__AsISO8601Ordinal(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).AsISO8601Ordinal;
end;

function __DC__GetTIdDateTimeStamp__AsISO8601Week(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).AsISO8601Week;
end;

function __DC__GetTIdDateTimeStamp__AsRFC822(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).AsRFC822;
end;

function __DC__GetTIdDateTimeStamp__AsTDateTime(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).AsTDateTime;
end;

function __DC__GetTIdDateTimeStamp__AsTTimeStamp(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TTimeStamp__Wrapper;
begin
__wrapper := __TTimeStamp__Wrapper.Create;
__wrapper.fR := TIdDateTimeStamp(Instance).AsTTimeStamp;
result := IUnknown(__wrapper) as IDispatch;
end;

function __DC__GetTIdDateTimeStamp__AsTimeOfDay(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).AsTimeOfDay;
end;

function __DC__GetTIdDateTimeStamp__BeatOfDay(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).BeatOfDay;
end;

function __DC__GetTIdDateTimeStamp__Day(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).Day;
end;

procedure __DC__SetTIdDateTimeStamp__Day(Instance : TObject; Params : PVariantArgList);
begin
TIdDateTimeStamp(Instance).Day:=OleVariant(Params^[0]);
end;

function __DC__GetTIdDateTimeStamp__DaysInYear(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).DaysInYear;
end;

function __DC__GetTIdDateTimeStamp__DayOfMonth(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).DayOfMonth;
end;

function __DC__GetTIdDateTimeStamp__DayOfWeek(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).DayOfWeek;
end;

function __DC__GetTIdDateTimeStamp__DayOfWeekName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).DayOfWeekName;
end;

function __DC__GetTIdDateTimeStamp__DayOfWeekShortName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).DayOfWeekShortName;
end;

function __DC__GetTIdDateTimeStamp__HourOf12Day(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).HourOf12Day;
end;

function __DC__GetTIdDateTimeStamp__HourOf24Day(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).HourOf24Day;
end;

function __DC__GetTIdDateTimeStamp__IsLeapYear(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).IsLeapYear;
end;

function __DC__GetTIdDateTimeStamp__IsMorning(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).IsMorning;
end;

function __DC__GetTIdDateTimeStamp__Millisecond(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).Millisecond;
end;

procedure __DC__SetTIdDateTimeStamp__Millisecond(Instance : TObject; Params : PVariantArgList);
begin
TIdDateTimeStamp(Instance).Millisecond:=OleVariant(Params^[0]);
end;

function __DC__GetTIdDateTimeStamp__MinuteOfDay(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).MinuteOfDay;
end;

function __DC__GetTIdDateTimeStamp__MinuteOfHour(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).MinuteOfHour;
end;

function __DC__GetTIdDateTimeStamp__MonthOfYear(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).MonthOfYear;
end;

function __DC__GetTIdDateTimeStamp__MonthName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).MonthName;
end;

function __DC__GetTIdDateTimeStamp__MonthShortName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).MonthShortName;
end;

function __DC__GetTIdDateTimeStamp__Second(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).Second;
end;

procedure __DC__SetTIdDateTimeStamp__Second(Instance : TObject; Params : PVariantArgList);
begin
TIdDateTimeStamp(Instance).Second:=OleVariant(Params^[0]);
end;

function __DC__GetTIdDateTimeStamp__SecondsInYear(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).SecondsInYear;
end;

function __DC__GetTIdDateTimeStamp__SecondOfMinute(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).SecondOfMinute;
end;

function __DC__GetTIdDateTimeStamp__TimeZone(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).TimeZone;
end;

procedure __DC__SetTIdDateTimeStamp__TimeZone(Instance : TObject; Params : PVariantArgList);
begin
TIdDateTimeStamp(Instance).TimeZone:=OleVariant(Params^[0]);
end;

function __DC__GetTIdDateTimeStamp__TimeZoneHour(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).TimeZoneHour;
end;

function __DC__GetTIdDateTimeStamp__TimeZoneMinutes(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).TimeZoneMinutes;
end;

function __DC__GetTIdDateTimeStamp__TimeZoneAsString(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).TimeZoneAsString;
end;

function __DC__GetTIdDateTimeStamp__Year(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).Year;
end;

procedure __DC__SetTIdDateTimeStamp__Year(Instance : TObject; Params : PVariantArgList);
begin
TIdDateTimeStamp(Instance).Year:=OleVariant(Params^[0]);
end;

function __DC__GetTIdDateTimeStamp__WeekOfYear(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdDateTimeStamp(Instance).WeekOfYear;
end;

procedure __RegisterProps;
begin
RegisterProperty(TIdDateTimeStamp,'AsISO8601Calendar',__DC__GetTIdDateTimeStamp__AsISO8601Calendar,nil);
RegisterProperty(TIdDateTimeStamp,'AsISO8601Ordinal',__DC__GetTIdDateTimeStamp__AsISO8601Ordinal,nil);
RegisterProperty(TIdDateTimeStamp,'AsISO8601Week',__DC__GetTIdDateTimeStamp__AsISO8601Week,nil);
RegisterProperty(TIdDateTimeStamp,'AsRFC822',__DC__GetTIdDateTimeStamp__AsRFC822,nil);
RegisterProperty(TIdDateTimeStamp,'AsTDateTime',__DC__GetTIdDateTimeStamp__AsTDateTime,nil);
RegisterProperty(TIdDateTimeStamp,'AsTTimeStamp',__DC__GetTIdDateTimeStamp__AsTTimeStamp,nil);
RegisterProperty(TIdDateTimeStamp,'AsTimeOfDay',__DC__GetTIdDateTimeStamp__AsTimeOfDay,nil);
RegisterProperty(TIdDateTimeStamp,'BeatOfDay',__DC__GetTIdDateTimeStamp__BeatOfDay,nil);
RegisterProperty(TIdDateTimeStamp,'Day',__DC__GetTIdDateTimeStamp__Day,__DC__SetTIdDateTimeStamp__Day);
RegisterProperty(TIdDateTimeStamp,'DaysInYear',__DC__GetTIdDateTimeStamp__DaysInYear,nil);
RegisterProperty(TIdDateTimeStamp,'DayOfMonth',__DC__GetTIdDateTimeStamp__DayOfMonth,nil);
RegisterProperty(TIdDateTimeStamp,'DayOfWeek',__DC__GetTIdDateTimeStamp__DayOfWeek,nil);
RegisterProperty(TIdDateTimeStamp,'DayOfWeekName',__DC__GetTIdDateTimeStamp__DayOfWeekName,nil);
RegisterProperty(TIdDateTimeStamp,'DayOfWeekShortName',__DC__GetTIdDateTimeStamp__DayOfWeekShortName,nil);
RegisterProperty(TIdDateTimeStamp,'HourOf12Day',__DC__GetTIdDateTimeStamp__HourOf12Day,nil);
RegisterProperty(TIdDateTimeStamp,'HourOf24Day',__DC__GetTIdDateTimeStamp__HourOf24Day,nil);
RegisterProperty(TIdDateTimeStamp,'IsLeapYear',__DC__GetTIdDateTimeStamp__IsLeapYear,nil);
RegisterProperty(TIdDateTimeStamp,'IsMorning',__DC__GetTIdDateTimeStamp__IsMorning,nil);
RegisterProperty(TIdDateTimeStamp,'Millisecond',__DC__GetTIdDateTimeStamp__Millisecond,__DC__SetTIdDateTimeStamp__Millisecond);
RegisterProperty(TIdDateTimeStamp,'MinuteOfDay',__DC__GetTIdDateTimeStamp__MinuteOfDay,nil);
RegisterProperty(TIdDateTimeStamp,'MinuteOfHour',__DC__GetTIdDateTimeStamp__MinuteOfHour,nil);
RegisterProperty(TIdDateTimeStamp,'MonthOfYear',__DC__GetTIdDateTimeStamp__MonthOfYear,nil);
RegisterProperty(TIdDateTimeStamp,'MonthName',__DC__GetTIdDateTimeStamp__MonthName,nil);
RegisterProperty(TIdDateTimeStamp,'MonthShortName',__DC__GetTIdDateTimeStamp__MonthShortName,nil);
RegisterProperty(TIdDateTimeStamp,'Second',__DC__GetTIdDateTimeStamp__Second,__DC__SetTIdDateTimeStamp__Second);
RegisterProperty(TIdDateTimeStamp,'SecondsInYear',__DC__GetTIdDateTimeStamp__SecondsInYear,nil);
RegisterProperty(TIdDateTimeStamp,'SecondOfMinute',__DC__GetTIdDateTimeStamp__SecondOfMinute,nil);
RegisterProperty(TIdDateTimeStamp,'TimeZone',__DC__GetTIdDateTimeStamp__TimeZone,__DC__SetTIdDateTimeStamp__TimeZone);
RegisterProperty(TIdDateTimeStamp,'TimeZoneHour',__DC__GetTIdDateTimeStamp__TimeZoneHour,nil);
RegisterProperty(TIdDateTimeStamp,'TimeZoneMinutes',__DC__GetTIdDateTimeStamp__TimeZoneMinutes,nil);
RegisterProperty(TIdDateTimeStamp,'TimeZoneAsString',__DC__GetTIdDateTimeStamp__TimeZoneAsString,nil);
RegisterProperty(TIdDateTimeStamp,'Year',__DC__GetTIdDateTimeStamp__Year,__DC__SetTIdDateTimeStamp__Year);
RegisterProperty(TIdDateTimeStamp,'WeekOfYear',__DC__GetTIdDateTimeStamp__WeekOfYear,nil);
end;

const __ConstNames0 : array[0..57] of string = (
'IdMilliSecondsInSecond'
,'IdSecondsInMinute'
,'IdMinutesInHour'
,'IdHoursInDay'
,'IdDaysInWeek'
,'IdDaysInYear'
,'IdDaysInLeapYear'
,'IdYearsInShortLeapYearCycle'
,'IdYearsInCentury'
,'IdDaysInCentury'
,'IdYearsInLeapYearCycle'
,'IdMonthsInYear'
,'IdBeatsInDay'
,'TZ_NZDT'
,'TZ_IDLE'
,'TZ_EADT'
,'TZ_GST'
,'TZ_JST'
,'TZ_CCT'
,'TZ_WAST'
,'TZ_ZP6'
,'TZ_ZP5'
,'TZ_ZP4'
,'TZ_BT'
,'TZ_EET'
,'TZ_CET'
,'TZ_GMT'
,'TZ_WAT'
,'TZ_AT'
,'TZ_ADT'
,'TZ_AST'
,'TZ_EST'
,'TZ_CST'
,'TZ_MST'
,'TZ_PST'
,'TZ_YST'
,'TZ_AHST'
,'TZ_NT'
,'TZ_IDLW'
,'TDaySun'
,'TDayMon'
,'TDayTue'
,'TDayWed'
,'TDayThu'
,'TDayFri'
,'TDaySat'
,'TMthJan'
,'TMthFeb'
,'TMthMar'
,'TMthApr'
,'TMthMay'
,'TMthJun'
,'TMthJul'
,'TMthAug'
,'TMthSep'
,'TMthOct'
,'TMthNov'
,'TMthDec'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,IdMilliSecondsInSecond));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,IdSecondsInMinute));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,IdMinutesInHour));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,IdHoursInDay));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,IdDaysInWeek));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,IdDaysInYear));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,IdDaysInLeapYear));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,IdYearsInShortLeapYearCycle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,IdYearsInCentury));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,IdDaysInCentury));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,IdYearsInLeapYearCycle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,IdMonthsInYear));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,IdBeatsInDay));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,TZ_NZDT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,TZ_IDLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,TZ_EADT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,TZ_GST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,TZ_JST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,TZ_CCT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,TZ_WAST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,TZ_ZP6));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,TZ_ZP5));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,TZ_ZP4));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,TZ_BT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,TZ_EET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,TZ_CET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,TZ_GMT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,TZ_WAT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,TZ_AT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,TZ_ADT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,TZ_AST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,TZ_EST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,TZ_CST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,TZ_MST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,TZ_PST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,TZ_YST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,TZ_AHST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,TZ_NT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,TZ_IDLW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,TDaySun));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,TDayMon));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,TDayTue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,TDayWed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,TDayThu));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,TDayFri));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,TDaySat));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,TMthJan));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,TMthFeb));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,TMthMar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,TMthApr));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,TMthMay));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,TMthJun));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,TMthJul));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,TMthAug));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,TMthSep));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,TMthOct));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,TMthNov));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,TMthDec));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..0] of TClass = (
TIdDateTimeStamp
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegRegisterMethod(TIdDateTimeStamp,'AddDays',TypeInfo(_T0),[
TypeInfo(Cardinal)],Addr(TIdDateTimeStamp.AddDays));

RegRegisterMethod(TIdDateTimeStamp,'AddHours',TypeInfo(_T1),[
TypeInfo(Cardinal)],Addr(TIdDateTimeStamp.AddHours));

RegRegisterMethod(TIdDateTimeStamp,'AddMilliseconds',TypeInfo(_T2),[
TypeInfo(Cardinal)],Addr(TIdDateTimeStamp.AddMilliseconds));

RegRegisterMethod(TIdDateTimeStamp,'AddMinutes',TypeInfo(_T3),[
TypeInfo(Cardinal)],Addr(TIdDateTimeStamp.AddMinutes));

RegRegisterMethod(TIdDateTimeStamp,'AddMonths',TypeInfo(_T4),[
TypeInfo(Cardinal)],Addr(TIdDateTimeStamp.AddMonths));

RegRegisterMethod(TIdDateTimeStamp,'AddSeconds',TypeInfo(_T5),[
TypeInfo(Cardinal)],Addr(TIdDateTimeStamp.AddSeconds));

RegRegisterMethod(TIdDateTimeStamp,'AddTDateTime',TypeInfo(_T6),[
TypeInfo(TDateTime)],Addr(TIdDateTimeStamp.AddTDateTime));

RegRegisterMethod(TIdDateTimeStamp,'AddTIdDateTimeStamp',TypeInfo(_T7),[
TypeInfo(TIdDateTimeStamp)],Addr(TIdDateTimeStamp.AddTIdDateTimeStamp));

RegRegisterMethod(TIdDateTimeStamp,'AddTTimeStamp',TypeInfo(_T8),[
TypeInfo(IDispatch)],Addr(__TIdDateTimeStamp__AddTTimeStamp__Wrapper));

RegRegisterMethod(TIdDateTimeStamp,'AddWeeks',TypeInfo(_T9),[
TypeInfo(Cardinal)],Addr(TIdDateTimeStamp.AddWeeks));

RegRegisterMethod(TIdDateTimeStamp,'AddYears',TypeInfo(_T10),[
TypeInfo(Cardinal)],Addr(TIdDateTimeStamp.AddYears));

RegRegisterMethod(TIdDateTimeStamp,'GetAsISO8601Calendar',TypeInfo(_T11),[TypeInfo(string)],Addr(TIdDateTimeStamp.GetAsISO8601Calendar));

RegRegisterMethod(TIdDateTimeStamp,'GetAsISO8601Ordinal',TypeInfo(_T12),[TypeInfo(string)],Addr(TIdDateTimeStamp.GetAsISO8601Ordinal));

RegRegisterMethod(TIdDateTimeStamp,'GetAsISO8601Week',TypeInfo(_T13),[TypeInfo(string)],Addr(TIdDateTimeStamp.GetAsISO8601Week));

RegRegisterMethod(TIdDateTimeStamp,'GetAsRFC822',TypeInfo(_T14),[TypeInfo(string)],Addr(TIdDateTimeStamp.GetAsRFC822));

RegRegisterMethod(TIdDateTimeStamp,'GetAsTDateTime',TypeInfo(_T15),[TypeInfo(TDateTime)],Addr(TIdDateTimeStamp.GetAsTDateTime));

RegRegisterMethod(TIdDateTimeStamp,'GetAsTTimeStamp',TypeInfo(_T16),[TypeInfo(IDispatch)],Addr(__TIdDateTimeStamp__GetAsTTimeStamp__Wrapper));

RegRegisterMethod(TIdDateTimeStamp,'GetAsTimeOfDay',TypeInfo(_T17),[TypeInfo(string)],Addr(TIdDateTimeStamp.GetAsTimeOfDay));

RegRegisterMethod(TIdDateTimeStamp,'GetBeatOfDay',TypeInfo(_T18),[TypeInfo(Integer)],Addr(TIdDateTimeStamp.GetBeatOfDay));

RegRegisterMethod(TIdDateTimeStamp,'GetDaysInYear',TypeInfo(_T19),[TypeInfo(Integer)],Addr(TIdDateTimeStamp.GetDaysInYear));

RegRegisterMethod(TIdDateTimeStamp,'GetDayOfMonth',TypeInfo(_T20),[TypeInfo(Integer)],Addr(TIdDateTimeStamp.GetDayOfMonth));

RegRegisterMethod(TIdDateTimeStamp,'GetDayOfWeek',TypeInfo(_T21),[TypeInfo(Integer)],Addr(TIdDateTimeStamp.GetDayOfWeek));

RegRegisterMethod(TIdDateTimeStamp,'GetDayOfWeekName',TypeInfo(_T22),[TypeInfo(string)],Addr(TIdDateTimeStamp.GetDayOfWeekName));

RegRegisterMethod(TIdDateTimeStamp,'GetDayOfWeekShortName',TypeInfo(_T23),[TypeInfo(string)],Addr(TIdDateTimeStamp.GetDayOfWeekShortName));

RegRegisterMethod(TIdDateTimeStamp,'GetHourOf12Day',TypeInfo(_T24),[TypeInfo(Integer)],Addr(TIdDateTimeStamp.GetHourOf12Day));

RegRegisterMethod(TIdDateTimeStamp,'GetHourOf24Day',TypeInfo(_T25),[TypeInfo(Integer)],Addr(TIdDateTimeStamp.GetHourOf24Day));

RegRegisterMethod(TIdDateTimeStamp,'GetIsMorning',TypeInfo(_T26),[TypeInfo(Boolean)],Addr(TIdDateTimeStamp.GetIsMorning));

RegRegisterMethod(TIdDateTimeStamp,'GetMinuteOfDay',TypeInfo(_T27),[TypeInfo(Integer)],Addr(TIdDateTimeStamp.GetMinuteOfDay));

RegRegisterMethod(TIdDateTimeStamp,'GetMinuteOfHour',TypeInfo(_T28),[TypeInfo(Integer)],Addr(TIdDateTimeStamp.GetMinuteOfHour));

RegRegisterMethod(TIdDateTimeStamp,'GetMonthOfYear',TypeInfo(_T29),[TypeInfo(Integer)],Addr(TIdDateTimeStamp.GetMonthOfYear));

RegRegisterMethod(TIdDateTimeStamp,'GetMonthName',TypeInfo(_T30),[TypeInfo(string)],Addr(TIdDateTimeStamp.GetMonthName));

RegRegisterMethod(TIdDateTimeStamp,'GetMonthShortName',TypeInfo(_T31),[TypeInfo(string)],Addr(TIdDateTimeStamp.GetMonthShortName));

RegRegisterMethod(TIdDateTimeStamp,'GetSecondsInYear',TypeInfo(_T32),[TypeInfo(Integer)],Addr(TIdDateTimeStamp.GetSecondsInYear));

RegRegisterMethod(TIdDateTimeStamp,'GetSecondOfMinute',TypeInfo(_T33),[TypeInfo(Integer)],Addr(TIdDateTimeStamp.GetSecondOfMinute));

RegRegisterMethod(TIdDateTimeStamp,'GetTimeZoneAsString',TypeInfo(_T34),[TypeInfo(string)],Addr(TIdDateTimeStamp.GetTimeZoneAsString));

RegRegisterMethod(TIdDateTimeStamp,'GetTimeZoneHour',TypeInfo(_T35),[TypeInfo(Integer)],Addr(TIdDateTimeStamp.GetTimeZoneHour));

RegRegisterMethod(TIdDateTimeStamp,'GetTimeZoneMinutes',TypeInfo(_T36),[TypeInfo(Integer)],Addr(TIdDateTimeStamp.GetTimeZoneMinutes));

RegRegisterMethod(TIdDateTimeStamp,'GetWeekOfYear',TypeInfo(_T37),[TypeInfo(Integer)],Addr(TIdDateTimeStamp.GetWeekOfYear));

RegRegisterMethod(TIdDateTimeStamp,'SetFromDOSDateTime',TypeInfo(_T38),[
TypeInfo(Word),
TypeInfo(Word)],Addr(TIdDateTimeStamp.SetFromDOSDateTime));

RegRegisterMethod(TIdDateTimeStamp,'SetFromISO8601',TypeInfo(_T39),[
TypeInfo(string)],Addr(TIdDateTimeStamp.SetFromISO8601));

RegRegisterMethod(TIdDateTimeStamp,'SetFromRFC822',TypeInfo(_T40),[
TypeInfo(string)],Addr(TIdDateTimeStamp.SetFromRFC822));

RegRegisterMethod(TIdDateTimeStamp,'SetFromTDateTime',TypeInfo(_T41),[
TypeInfo(TDateTime)],Addr(TIdDateTimeStamp.SetFromTDateTime));

RegRegisterMethod(TIdDateTimeStamp,'SetFromTTimeStamp',TypeInfo(_T42),[
TypeInfo(IDispatch)],Addr(__TIdDateTimeStamp__SetFromTTimeStamp__Wrapper));

RegRegisterMethod(TIdDateTimeStamp,'SetDay',TypeInfo(_T43),[
TypeInfo(Integer)],Addr(TIdDateTimeStamp.SetDay));

RegRegisterMethod(TIdDateTimeStamp,'SetMillisecond',TypeInfo(_T44),[
TypeInfo(Integer)],Addr(TIdDateTimeStamp.SetMillisecond));

RegRegisterMethod(TIdDateTimeStamp,'SetSecond',TypeInfo(_T45),[
TypeInfo(Integer)],Addr(TIdDateTimeStamp.SetSecond));

RegRegisterMethod(TIdDateTimeStamp,'SetTimeZone',TypeInfo(_T46),[
TypeInfo(Integer)],Addr(TIdDateTimeStamp.SetTimeZone));

RegRegisterMethod(TIdDateTimeStamp,'SetYear',TypeInfo(_T47),[
TypeInfo(Integer)],Addr(TIdDateTimeStamp.SetYear));

RegRegisterMethod(TIdDateTimeStamp,'SubtractDays',TypeInfo(_T48),[
TypeInfo(Cardinal)],Addr(TIdDateTimeStamp.SubtractDays));

RegRegisterMethod(TIdDateTimeStamp,'SubtractHours',TypeInfo(_T49),[
TypeInfo(Cardinal)],Addr(TIdDateTimeStamp.SubtractHours));

RegRegisterMethod(TIdDateTimeStamp,'SubtractMilliseconds',TypeInfo(_T50),[
TypeInfo(Cardinal)],Addr(TIdDateTimeStamp.SubtractMilliseconds));

RegRegisterMethod(TIdDateTimeStamp,'SubtractMinutes',TypeInfo(_T51),[
TypeInfo(Cardinal)],Addr(TIdDateTimeStamp.SubtractMinutes));

RegRegisterMethod(TIdDateTimeStamp,'SubtractMonths',TypeInfo(_T52),[
TypeInfo(Cardinal)],Addr(TIdDateTimeStamp.SubtractMonths));

RegRegisterMethod(TIdDateTimeStamp,'SubtractSeconds',TypeInfo(_T53),[
TypeInfo(Cardinal)],Addr(TIdDateTimeStamp.SubtractSeconds));

RegRegisterMethod(TIdDateTimeStamp,'SubtractTDateTime',TypeInfo(_T54),[
TypeInfo(TDateTime)],Addr(TIdDateTimeStamp.SubtractTDateTime));

RegRegisterMethod(TIdDateTimeStamp,'SubtractTIdDateTimeStamp',TypeInfo(_T55),[
TypeInfo(TIdDateTimeStamp)],Addr(TIdDateTimeStamp.SubtractTIdDateTimeStamp));

RegRegisterMethod(TIdDateTimeStamp,'SubtractTTimeStamp',TypeInfo(_T56),[
TypeInfo(IDispatch)],Addr(__TIdDateTimeStamp__SubtractTTimeStamp__Wrapper));

RegRegisterMethod(TIdDateTimeStamp,'SubtractWeeks',TypeInfo(_T57),[
TypeInfo(Cardinal)],Addr(TIdDateTimeStamp.SubtractWeeks));

RegRegisterMethod(TIdDateTimeStamp,'SubtractYears',TypeInfo(_T58),[
TypeInfo(Cardinal)],Addr(TIdDateTimeStamp.SubtractYears));

RegRegisterMethod(TIdDateTimeStamp,'Zero',TypeInfo(_T59),NoParams,Addr(TIdDateTimeStamp.Zero));

RegRegisterMethod(TIdDateTimeStamp,'ZeroDate',TypeInfo(_T60),NoParams,Addr(TIdDateTimeStamp.ZeroDate));

RegRegisterMethod(TIdDateTimeStamp,'ZeroTime',TypeInfo(_T61),NoParams,Addr(TIdDateTimeStamp.ZeroTime));

end;
initialization
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
