{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit SCRPTMGR_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  Messages,
  HTTPApp,
  WebComp,
  CompProd,
  SysUtils,
  DB,
  DBClient,
  PagItems,
  XMLBrokr,
  Contnrs,
  MidComp,
  ScrptMgr;
function ConvertTItemHolderToVariant(var R : TItemHolder) : OleVariant;
function ConvertVariantToTItemHolder(const V : OleVariant) : TItemHolder;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TItemHolder__Wrapper = class(TDCRecordWrapper)
private
fR : TItemHolder;
public
function GetRecordPtr : pointer; override;
published
procedure setFObject(const val : TScriptObject);
function getFObject : TScriptObject;
property FObject : TScriptObject read getFObject write setFObject;
end;
type
_T0 = procedure (p0 : TScriptManager) of object;

_T1 = function (const p0 : string;
const p1 : string): TFunction of object;

_T2 = function (const p0 : string): TFunction of object;

_T3 = function (const p0 : string;
const p1 : string): THTMLBlock of object;

_T4 = function (const p0 : string): THTMLBlock of object;

_T5 = function (const p0 : string): TIncludeFile of object;

_T6 = _T5;

_T7 = procedure (p0 : TObject;
const p1 : string;
const p2 : string) of object;

{_T8 = procedure (p0 : TAddScriptElementsEvent;
p1 : Pointer) of object;}

{_T9 = procedure (p0 : TAddScriptElementsEvent;
p1 : Pointer) of object;}

_T10 = function (const p0 : string;
const p1 : string): TScriptBlock of object;

_T11 = function (const p0 : string): TScriptBlock of object;

_T12 = procedure (p0 : TWebContentOptions) of object;

_T13 = procedure (p0 : TObject) of object;

_T14 = _T13;

_T15 = function (const p0 : string): TScriptObject of object;

_T16 = function (const p0 : string;
const p1 : string): TVar of object;

_T17 = function (const p0 : string): TVar of object;

_T18 = procedure (p0 : TXMLDocuments) of object;

_T19 = function (p0 : TXMLBroker): TXMLDocument of object;

_T20 = _T19;

_T21 = procedure (p0 : TXMLRowSets) of object;

_T22 = procedure (p0 : TXMLDocument) of object;

function __TItemHolder__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TItemHolder__Wrapper.setFObject(const val : TScriptObject);
begin
TItemHolder(GetRecordPtr^).FObject := val;
end;
function __TItemHolder__Wrapper.getFObject : TScriptObject;
begin
result := TItemHolder(GetRecordPtr^).FObject;
end;
function _TItemHolder_ : IDispatch;
begin
  result := __TItemHolder__Wrapper.Create;
end;

type __TItemHolder__Wrapper__ = class(__TItemHolder__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TItemHolder__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTItemHolderToVariant(var R : TItemHolder) : OleVariant;
var
__rw : __TItemHolder__Wrapper__;
begin
__rw := __TItemHolder__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTItemHolder(const V : OleVariant) : TItemHolder;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TItemHolder((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTFunctions__Objects(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TFunctions(Instance).Objects[OleVariant(Params^[0])]);
end;

function __DC__GetTHTMLBlocks__Objects(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(THTMLBlocks(Instance).Objects[OleVariant(Params^[0])]);
end;

function __DC__GetTIncludeFiles__Objects(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIncludeFiles(Instance).Objects[OleVariant(Params^[0])]);
end;

function __DC__GetTNameContentScriptObject__Name(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TNameContentScriptObject(Instance).Name;
end;

function __DC__GetTNameContentScriptObject__Content(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TNameContentScriptObject(Instance).Content;
end;

function __DC__GetTPassList__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TPassList(Instance).Items[OleVariant(Params^[0])]);
end;

function __DC__GetTScriptBlocks__Objects(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TScriptBlocks(Instance).Objects[OleVariant(Params^[0])]);
end;

function __DC__GetTScriptManager__PassList(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TScriptManager(Instance).PassList);
end;

function __DC__GetTScriptManager__Options(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TScriptManager(Instance).Options);
end;

function __DC__GetTScriptObjectContainer__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TScriptObjectContainer(Instance).Count;
end;

function __DC__GetTScriptObjectContainer__Objects(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TScriptObjectContainer(Instance).Objects[OleVariant(Params^[0])]);
end;

function __DC__GetTVars__Objects(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TVars(Instance).Objects[OleVariant(Params^[0])]);
end;

function __DC__GetTXMLDocuments__Objects(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TXMLDocuments(Instance).Objects[OleVariant(Params^[0])]);
end;

procedure __RegisterProps;
begin
RegisterIndexedProperty(TFunctions,'Objects',1,False,__DC__GetTFunctions__Objects,nil);
RegisterIndexedProperty(THTMLBlocks,'Objects',1,False,__DC__GetTHTMLBlocks__Objects,nil);
RegisterIndexedProperty(TIncludeFiles,'Objects',1,False,__DC__GetTIncludeFiles__Objects,nil);
RegisterProperty(TNameContentScriptObject,'Name',__DC__GetTNameContentScriptObject__Name,nil);
RegisterProperty(TNameContentScriptObject,'Content',__DC__GetTNameContentScriptObject__Content,nil);
RegisterIndexedProperty(TPassList,'Items',1,False,__DC__GetTPassList__Items,nil);
RegisterIndexedProperty(TScriptBlocks,'Objects',1,False,__DC__GetTScriptBlocks__Objects,nil);
RegisterProperty(TScriptManager,'PassList',__DC__GetTScriptManager__PassList,nil);
RegisterProperty(TScriptManager,'Options',__DC__GetTScriptManager__Options,nil);
RegisterProperty(TScriptObjectContainer,'Count',__DC__GetTScriptObjectContainer__Count,nil);
RegisterIndexedProperty(TScriptObjectContainer,'Objects',1,False,__DC__GetTScriptObjectContainer__Objects,nil);
RegisterIndexedProperty(TVars,'Objects',1,False,__DC__GetTVars__Objects,nil);
RegisterIndexedProperty(TXMLDocuments,'Objects',1,False,__DC__GetTXMLDocuments__Objects,nil);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..20] of TClass = (
TAddScriptElements,
TFunction,
TFunctions,
THTMLBlock,
THTMLBlocks,
TIncludeFile,
TIncludeFiles,
TNameContentScriptObject,
TPass,
TPassList,
TScriptBlock,
TScriptBlocks,
TScriptManager,
TScriptObject,
TScriptObjectContainer,
TVar,
TVars,
TXMLDocument,
TXMLDocuments,
TXMLRowSet,
TXMLRowSets
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'TItemHolder'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TItemHolder_)));
RegisterProc(TAddScriptElements,'Create',mtConstructor,TypeInfo(_T0),[
TypeInfo(TScriptManager)],Addr(TAddScriptElements.Create),cRegister);

RegRegisterMethod(TFunctions,'AddFunction',TypeInfo(_T1),[
TypeInfo(string),
TypeInfo(string),TypeInfo(TFunction)],Addr(TFunctions.AddFunction));

RegRegisterMethod(TFunctions,'FindFunctionName',TypeInfo(_T2),[
TypeInfo(string),TypeInfo(TFunction)],Addr(TFunctions.FindFunctionName));

RegRegisterMethod(THTMLBlocks,'AddBlock',TypeInfo(_T3),[
TypeInfo(string),
TypeInfo(string),TypeInfo(THTMLBlock)],Addr(THTMLBlocks.AddBlock));

RegRegisterMethod(THTMLBlocks,'FindBlockName',TypeInfo(_T4),[
TypeInfo(string),TypeInfo(THTMLBlock)],Addr(THTMLBlocks.FindBlockName));

RegRegisterMethod(TIncludeFiles,'AddFileName',TypeInfo(_T5),[
TypeInfo(string),TypeInfo(TIncludeFile)],Addr(TIncludeFiles.AddFileName));

RegRegisterMethod(TIncludeFiles,'FindFileName',TypeInfo(_T6),[
TypeInfo(string),TypeInfo(TIncludeFile)],Addr(TIncludeFiles.FindFileName));

RegisterProc(TNameContentScriptObject,'Create',mtConstructor,TypeInfo(_T7),[
TypeInfo(TObject),
TypeInfo(string),
TypeInfo(string)],Addr(TNameContentScriptObject.Create),cRegister);

RegRegisterMethod(TScriptBlocks,'AddBlock',TypeInfo(_T10),[
TypeInfo(string),
TypeInfo(string),TypeInfo(TScriptBlock)],Addr(TScriptBlocks.AddBlock));

RegRegisterMethod(TScriptBlocks,'FindBlockName',TypeInfo(_T11),[
TypeInfo(string),TypeInfo(TScriptBlock)],Addr(TScriptBlocks.FindBlockName));

RegisterProc(TScriptManager,'Create',mtConstructor,TypeInfo(_T12),[
TypeInfo(TWebContentOptions)],Addr(TScriptManager.Create),cRegister);

RegRegisterMethod(TScriptManager,'AddScriptComponents',TypeInfo(_T13),[
TypeInfo(TObject)],Addr(TScriptManager.AddScriptComponents));

RegisterProc(TScriptObject,'Create',mtConstructor,TypeInfo(_T14),[
TypeInfo(TObject)],Addr(TScriptObject.Create),cRegister);

RegRegisterMethod(TScriptObjectContainer,'FindNameObject',TypeInfo(_T15),[
TypeInfo(string),TypeInfo(TScriptObject)],Addr(TScriptObjectContainer.FindNameObject));

RegRegisterMethod(TVars,'AddVar',TypeInfo(_T16),[
TypeInfo(string),
TypeInfo(string),TypeInfo(TVar)],Addr(TVars.AddVar));

RegRegisterMethod(TVars,'FindVarName',TypeInfo(_T17),[
TypeInfo(string),TypeInfo(TVar)],Addr(TVars.FindVarName));

RegisterProc(TXMLDocument,'Create',mtConstructor,TypeInfo(_T18),[
TypeInfo(TXMLDocuments)],Addr(TXMLDocument.Create),cRegister);

RegRegisterMethod(TXMLDocuments,'AddXMLBroker',TypeInfo(_T19),[
TypeInfo(TXMLBroker),TypeInfo(TXMLDocument)],Addr(TXMLDocuments.AddXMLBroker));

RegRegisterMethod(TXMLDocuments,'FindXMLBroker',TypeInfo(_T20),[
TypeInfo(TXMLBroker),TypeInfo(TXMLDocument)],Addr(TXMLDocuments.FindXMLBroker));

RegisterProc(TXMLRowSet,'Create',mtConstructor,TypeInfo(_T21),[
TypeInfo(TXMLRowSets)],Addr(TXMLRowSet.Create),cRegister);

RegisterProc(TXMLRowSets,'Create',mtConstructor,TypeInfo(_T22),[
TypeInfo(TXMLDocument)],Addr(TXMLRowSets.Create),cRegister);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(TPass,'Create',mtConstructor,TypeInfo(_T8),[
TypeInfo(TAddScriptElementsEvent),
TypeInfoPointer],Addr(TPass.Create),cRegister)}

{RegRegisterMethod(TPassList,'Add',TypeInfo(_T9),[
TypeInfo(TAddScriptElementsEvent),
TypeInfoPointer],Addr(TPassList.Add))}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
