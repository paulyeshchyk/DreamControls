{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit LISTACTNS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  Controls,
  ActnList,
  ImgList,
  ListActns;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = function : Integer of object;

_T1 = function (p0 : Integer): String of object;

_T2 = procedure (p0 : Integer;
const p1 : String) of object;

{_T3 = function : TListControlItemClass of object;}

_T4 = function : Boolean of object;

_T5 = procedure (const p0 : Boolean) of object;

_T6 = _T4;

_T7 = procedure (p0 : TCustomImageList) of object;

_T8 = procedure (const p0 : Integer) of object;

_T9 = procedure (p0 : TListControlItem) of object;

_T10 = procedure (const p0 : String) of object;

_T11 = procedure (const p0 : Pointer) of object;

_T12 = procedure (const p0 : TImageIndex) of object;

_T13 = function (p0 : TListControlItem;
p1 : TListControlItem): Integer of object;

{_T14 = procedure (p0 : TPersistent;
p1 : TCollectionItemClass) of object;}

_T15 = function : TListControlItem of object;

_T16 = procedure  of object;

{_T17 = procedure (p0 : TListItemsCompare) of object;}

function __DC__GetTCustomListAction__Active(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomListAction(Instance).Active;
end;

procedure __DC__SetTCustomListAction__Active(Instance : TObject; Params : PVariantArgList);
begin
TCustomListAction(Instance).Active:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomListAction__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomListAction(Instance).Count;
end;

function __DC__GetTCustomListAction__ItemIndex(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomListAction(Instance).ItemIndex;
end;

procedure __DC__SetTCustomListAction__ItemIndex(Instance : TObject; Params : PVariantArgList);
begin
TCustomListAction(Instance).ItemIndex:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomListAction__Strings(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomListAction(Instance).Strings[OleVariant(Params^[0])];
end;

procedure __DC__SetTCustomListAction__Strings(Instance : TObject; Params : PVariantArgList);
begin
TCustomListAction(Instance).Strings[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomStaticListAction__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomStaticListAction(Instance).Count;
end;

function __DC__GetTCustomVirtualListAction__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomVirtualListAction(Instance).Count;
end;

function __DC__GetTListControlItem__Data(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TListControlItem(Instance).Data);
end;

procedure __DC__SetTListControlItem__Data(Instance : TObject; Params : PVariantArgList);
begin
TListControlItem(Instance).Data:=VarToPointer(OleVariant(Params^[0]));
end;

function __DC__GetTListControlItems__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TListControlItems(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TCustomListAction,'Active',__DC__GetTCustomListAction__Active,__DC__SetTCustomListAction__Active);
RegisterProperty(TCustomListAction,'Count',__DC__GetTCustomListAction__Count,nil);
RegisterProperty(TCustomListAction,'ItemIndex',__DC__GetTCustomListAction__ItemIndex,__DC__SetTCustomListAction__ItemIndex);
RegisterIndexedProperty(TCustomListAction,'Strings',1,True,__DC__GetTCustomListAction__Strings,__DC__SetTCustomListAction__Strings);
RegisterProperty(TCustomStaticListAction,'Count',__DC__GetTCustomStaticListAction__Count,nil);
RegisterProperty(TCustomVirtualListAction,'Count',__DC__GetTCustomVirtualListAction__Count,nil);
RegisterProperty(TListControlItem,'Data',__DC__GetTListControlItem__Data,__DC__SetTListControlItem__Data);
RegisterIndexedProperty(TListControlItems,'Items',1,True,__DC__GetTListControlItems__Items,nil);
end;

const __ConstNames0 : array[0..3] of string = (
'stNone'
,'stData'
,'stText'
,'stBoth'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,stNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,stData));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,stText));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,stBoth));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..8] of TClass = (
TCustomListAction,
TCustomStaticListAction,
TCustomVirtualListAction,
TListActionLink,
TListControlItem,
TListControlItems,
TStaticListAction,
TStaticListItems,
TVirtualListAction
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TCustomListAction,'GetCount',TypeInfo(_T0),[TypeInfo(Integer)], pointer(84));
RegRegisterMethod(TCustomListAction,'GetCount',TypeInfo(_T0),[TypeInfo(Integer)],  getVMTProcAddr('TCustomListAction','GetCount',84));


//RegRegisterMethod(TCustomListAction,'GetString',TypeInfo(_T1),[TypeInfo(Integer),TypeInfo(String)], pointer(88));
RegRegisterMethod(TCustomListAction,'GetString',TypeInfo(_T1),[TypeInfo(Integer),TypeInfo(String)],  getVMTProcAddr('TCustomListAction','GetString',88));


//RegRegisterMethod(TCustomListAction,'SetString',TypeInfo(_T2),[TypeInfo(Integer),TypeInfo(String)], pointer(92));
RegRegisterMethod(TCustomListAction,'SetString',TypeInfo(_T2),[TypeInfo(Integer),TypeInfo(String)],  getVMTProcAddr('TCustomListAction','SetString',92));


//RegRegisterMethod(TListActionLink,'IsActiveLinked',TypeInfo(_T4),[TypeInfo(Boolean)], pointer(148));
RegRegisterMethod(TListActionLink,'IsActiveLinked',TypeInfo(_T4),[TypeInfo(Boolean)],  getVMTProcAddr('TListActionLink','IsActiveLinked',148));


//RegRegisterMethod(TListActionLink,'SetActive',TypeInfo(_T5),[TypeInfo(Boolean)], pointer(152));
RegRegisterMethod(TListActionLink,'SetActive',TypeInfo(_T5),[TypeInfo(Boolean)],  getVMTProcAddr('TListActionLink','SetActive',152));


//RegRegisterMethod(TListActionLink,'IsImagesLinked',TypeInfo(_T6),[TypeInfo(Boolean)], pointer(156));
RegRegisterMethod(TListActionLink,'IsImagesLinked',TypeInfo(_T6),[TypeInfo(Boolean)],  getVMTProcAddr('TListActionLink','IsImagesLinked',156));


//RegRegisterMethod(TListActionLink,'SetImages',TypeInfo(_T7),[TypeInfo(TCustomImageList)], pointer(160));
RegRegisterMethod(TListActionLink,'SetImages',TypeInfo(_T7),[TypeInfo(TCustomImageList)],  getVMTProcAddr('TListActionLink','SetImages',160));


//RegRegisterMethod(TListActionLink,'SetItemIndex',TypeInfo(_T8),[TypeInfo(Integer)], pointer(164));
RegRegisterMethod(TListActionLink,'SetItemIndex',TypeInfo(_T8),[TypeInfo(Integer)],  getVMTProcAddr('TListActionLink','SetItemIndex',164));


//RegRegisterMethod(TListActionLink,'AddItem',TypeInfo(_T9),[TypeInfo(TListControlItem)], pointer(168));
RegRegisterMethod(TListActionLink,'AddItem',TypeInfo(_T9),[TypeInfo(TListControlItem)],  getVMTProcAddr('TListActionLink','AddItem',168));


//RegRegisterMethod(TListControlItem,'SetCaption',TypeInfo(_T10),[TypeInfo(String)], pointer(32));
RegRegisterMethod(TListControlItem,'SetCaption',TypeInfo(_T10),[TypeInfo(String)],  getVMTProcAddr('TListControlItem','SetCaption',32));


//RegRegisterMethod(TListControlItem,'SetData',TypeInfo(_T11),[TypeInfoPointer], pointer(36));
RegRegisterMethod(TListControlItem,'SetData',TypeInfo(_T11),[TypeInfoPointer],  getVMTProcAddr('TListControlItem','SetData',36));


//RegRegisterMethod(TListControlItem,'SetImageIndex',TypeInfo(_T12),[TypeInfo(TImageIndex)], pointer(40));
RegRegisterMethod(TListControlItem,'SetImageIndex',TypeInfo(_T12),[TypeInfo(TImageIndex)],  getVMTProcAddr('TListControlItem','SetImageIndex',40));


//RegRegisterMethod(TListControlItems,'CompareItems',TypeInfo(_T13),[TypeInfo(TListControlItem),TypeInfo(TListControlItem),TypeInfo(Integer)], pointer(40));
RegRegisterMethod(TListControlItems,'CompareItems',TypeInfo(_T13),[TypeInfo(TListControlItem),TypeInfo(TListControlItem),TypeInfo(Integer)],  getVMTProcAddr('TListControlItems','CompareItems',40));


RegRegisterMethod(TListControlItems,'Add',TypeInfo(_T15),[TypeInfo(TListControlItem)],Addr(TListControlItems.Add));

RegRegisterMethod(TListControlItems,'Sort',TypeInfo(_T16),NoParams,Addr(TListControlItems.Sort));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
{RegRegisterMethod(TCustomStaticListAction,'GetItemClass',TypeInfo(_T3),[TypeInfo(TListControlItemClass)], pointer(96))}

{RegisterProc(TListControlItems,'Create',mtConstructor,TypeInfo(_T14),[
TypeInfo(TPersistent),
TypeInfo(TCollectionItemClass)],Addr(TListControlItems.Create),cRegister)}

{RegRegisterMethod(TListControlItems,'CustomSort',TypeInfo(_T17),[
TypeInfo(TListItemsCompare)],Addr(TListControlItems.CustomSort))}

RegisterEvent(TypeInfo(TGetItemCountEvent),[
TypeInfo(TCustomListAction),
TypeInfo(Integer)]);

RegisterEvent(TypeInfo(TGetItemEvent),[
TypeInfo(TCustomListAction),
TypeInfo(Integer),
TypeInfo(TListControlItem)]);

RegisterEvent(TypeInfo(TGetVirtualItemEvent),[
TypeInfo(TCustomListAction),
TypeInfo(Integer),
TypeInfo(String),
TypeInfo(Integer),
TypeInfoPointer]);

RegisterEvent(TypeInfo(TItemSelectedEvent),[
TypeInfo(TCustomListAction),
TypeInfo(TControl)]);

RegisterEvent(TypeInfo(TListCompareEvent),[
TypeInfo(TListControlItems),
TypeInfo(TListControlItem),
TypeInfo(TListControlItem),TypeInfo(Integer)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
