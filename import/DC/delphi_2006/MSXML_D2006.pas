{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit MSXML_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  ActiveX,
  msxml;
function Convert_xml_errorToVariant(var R : _xml_error) : OleVariant;
function ConvertVariantTo_xml_error(const V : OleVariant) : _xml_error;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type ___xml_error__Wrapper = class(TDCRecordWrapper)
private
fR : _xml_error;
public
function GetRecordPtr : pointer; override;
published
procedure set_nLine(const val : SYSUINT);
function get_nLine : SYSUINT;
property _nLine : SYSUINT read get_nLine write set_nLine;
procedure set_pchBuf(const val : WideString);
function get_pchBuf : WideString;
property _pchBuf : WideString read get_pchBuf write set_pchBuf;
procedure set_cchBuf(const val : SYSUINT);
function get_cchBuf : SYSUINT;
property _cchBuf : SYSUINT read get_cchBuf write set_cchBuf;
procedure set_ich(const val : SYSUINT);
function get_ich : SYSUINT;
property _ich : SYSUINT read get_ich write set_ich;
procedure set_pszFound(const val : WideString);
function get_pszFound : WideString;
property _pszFound : WideString read get_pszFound write set_pszFound;
procedure set_pszExpected(const val : WideString);
function get_pszExpected : WideString;
property _pszExpected : WideString read get_pszExpected write set_pszExpected;
procedure set_reserved1(const val : LongWord);
function get_reserved1 : LongWord;
property _reserved1 : LongWord read get_reserved1 write set_reserved1;
procedure set_reserved2(const val : LongWord);
function get_reserved2 : LongWord;
property _reserved2 : LongWord read get_reserved2 write set_reserved2;
end;
function ___xml_error__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure ___xml_error__Wrapper.set_nLine(const val : SYSUINT);
begin
_xml_error(GetRecordPtr^)._nLine := val;
end;
function ___xml_error__Wrapper.get_nLine : SYSUINT;
begin
result := _xml_error(GetRecordPtr^)._nLine;
end;
procedure ___xml_error__Wrapper.set_pchBuf(const val : WideString);
begin
_xml_error(GetRecordPtr^)._pchBuf := val;
end;
function ___xml_error__Wrapper.get_pchBuf : WideString;
begin
result := _xml_error(GetRecordPtr^)._pchBuf;
end;
procedure ___xml_error__Wrapper.set_cchBuf(const val : SYSUINT);
begin
_xml_error(GetRecordPtr^)._cchBuf := val;
end;
function ___xml_error__Wrapper.get_cchBuf : SYSUINT;
begin
result := _xml_error(GetRecordPtr^)._cchBuf;
end;
procedure ___xml_error__Wrapper.set_ich(const val : SYSUINT);
begin
_xml_error(GetRecordPtr^)._ich := val;
end;
function ___xml_error__Wrapper.get_ich : SYSUINT;
begin
result := _xml_error(GetRecordPtr^)._ich;
end;
procedure ___xml_error__Wrapper.set_pszFound(const val : WideString);
begin
_xml_error(GetRecordPtr^)._pszFound := val;
end;
function ___xml_error__Wrapper.get_pszFound : WideString;
begin
result := _xml_error(GetRecordPtr^)._pszFound;
end;
procedure ___xml_error__Wrapper.set_pszExpected(const val : WideString);
begin
_xml_error(GetRecordPtr^)._pszExpected := val;
end;
function ___xml_error__Wrapper.get_pszExpected : WideString;
begin
result := _xml_error(GetRecordPtr^)._pszExpected;
end;
procedure ___xml_error__Wrapper.set_reserved1(const val : LongWord);
begin
_xml_error(GetRecordPtr^)._reserved1 := val;
end;
function ___xml_error__Wrapper.get_reserved1 : LongWord;
begin
result := _xml_error(GetRecordPtr^)._reserved1;
end;
procedure ___xml_error__Wrapper.set_reserved2(const val : LongWord);
begin
_xml_error(GetRecordPtr^)._reserved2 := val;
end;
function ___xml_error__Wrapper.get_reserved2 : LongWord;
begin
result := _xml_error(GetRecordPtr^)._reserved2;
end;
function __xml_error_ : IDispatch;
begin
  result := ___xml_error__Wrapper.Create;
end;

type ___xml_error__Wrapper__ = class(___xml_error__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function ___xml_error__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function Convert_xml_errorToVariant(var R : _xml_error) : OleVariant;
var
__rw : ___xml_error__Wrapper__;
begin
__rw := ___xml_error__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTo_xml_error(const V : OleVariant) : _xml_error;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := _xml_error((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..21] of string = (
'MSXMLMajorVersion'
,'MSXMLMinorVersion'
,'NODE_INVALID'
,'NODE_ELEMENT'
,'NODE_ATTRIBUTE'
,'NODE_TEXT'
,'NODE_CDATA_SECTION'
,'NODE_ENTITY_REFERENCE'
,'NODE_ENTITY'
,'NODE_PROCESSING_INSTRUCTION'
,'NODE_COMMENT'
,'NODE_DOCUMENT'
,'NODE_DOCUMENT_TYPE'
,'NODE_DOCUMENT_FRAGMENT'
,'NODE_NOTATION'
,'XMLELEMTYPE_ELEMENT'
,'XMLELEMTYPE_TEXT'
,'XMLELEMTYPE_COMMENT'
,'XMLELEMTYPE_DOCUMENT'
,'XMLELEMTYPE_DTD'
,'XMLELEMTYPE_PI'
,'XMLELEMTYPE_OTHER'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,MSXMLMajorVersion));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,MSXMLMinorVersion));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,NODE_INVALID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,NODE_ELEMENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,NODE_ATTRIBUTE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,NODE_TEXT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,NODE_CDATA_SECTION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,NODE_ENTITY_REFERENCE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,NODE_ENTITY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,NODE_PROCESSING_INSTRUCTION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,NODE_COMMENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,NODE_DOCUMENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,NODE_DOCUMENT_TYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,NODE_DOCUMENT_FRAGMENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,NODE_NOTATION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,XMLELEMTYPE_ELEMENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,XMLELEMTYPE_TEXT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,XMLELEMTYPE_COMMENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,XMLELEMTYPE_DOCUMENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,XMLELEMTYPE_DTD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,XMLELEMTYPE_PI));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,XMLELEMTYPE_OTHER));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..4] of TClass = (
CoDOMDocument,
CoDOMFreeThreadedDocument,
CoXMLDocument,
CoXMLDSOControl,
CoXMLHTTPRequest
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'_xml_error'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(__xml_error_)));
end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(CoDOMDocument,'Create',mtClassMethod,TypeInfo(_T0),[TypeInfo(IXMLDOMDocument)],Addr(CoDOMDocument.Create),cRegister)}

{RegisterProc(CoDOMDocument,'CreateRemote',mtClassMethod,TypeInfo(_T1),[
TypeInfo(string),TypeInfo(IXMLDOMDocument)],Addr(CoDOMDocument.CreateRemote),cRegister)}

{RegisterProc(CoDOMFreeThreadedDocument,'Create',mtClassMethod,TypeInfo(_T2),[TypeInfo(IXMLDOMDocument)],Addr(CoDOMFreeThreadedDocument.Create),cRegister)}

{RegisterProc(CoDOMFreeThreadedDocument,'CreateRemote',mtClassMethod,TypeInfo(_T3),[
TypeInfo(string),TypeInfo(IXMLDOMDocument)],Addr(CoDOMFreeThreadedDocument.CreateRemote),cRegister)}

{RegisterProc(CoXMLDocument,'Create',mtClassMethod,TypeInfo(_T4),[TypeInfo(IXMLDocument2)],Addr(CoXMLDocument.Create),cRegister)}

{RegisterProc(CoXMLDocument,'CreateRemote',mtClassMethod,TypeInfo(_T5),[
TypeInfo(string),TypeInfo(IXMLDocument2)],Addr(CoXMLDocument.CreateRemote),cRegister)}

{RegisterProc(CoXMLDSOControl,'Create',mtClassMethod,TypeInfo(_T6),[TypeInfo(IXMLDSOControl)],Addr(CoXMLDSOControl.Create),cRegister)}

{RegisterProc(CoXMLDSOControl,'CreateRemote',mtClassMethod,TypeInfo(_T7),[
TypeInfo(string),TypeInfo(IXMLDSOControl)],Addr(CoXMLDSOControl.CreateRemote),cRegister)}

{RegisterProc(CoXMLHTTPRequest,'Create',mtClassMethod,TypeInfo(_T8),[TypeInfo(IXMLHttpRequest)],Addr(CoXMLHTTPRequest.Create),cRegister)}

{RegisterProc(CoXMLHTTPRequest,'CreateRemote',mtClassMethod,TypeInfo(_T9),[
TypeInfo(string),TypeInfo(IXMLHttpRequest)],Addr(CoXMLHTTPRequest.CreateRemote),cRegister)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
