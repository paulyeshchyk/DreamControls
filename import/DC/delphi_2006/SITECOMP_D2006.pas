{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit SITECOMP_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  WebComp,
  HTTPApp,
  WebContnrs,
  HTTPProd,
  WebCntxt,
  SiteComp;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = function (p0 : TComponent): string of object;

_T1 = function (p0 : TComponent;
p1 : TQualifyOption): string of object;

_T2 = procedure (p0 : string) of object;

_T3 = procedure (p0 : TObject) of object;

_T4 = function : string of object;

_T5 = function : Integer of object;

_T6 = function (p0 : Integer): string of object;

_T7 = procedure  of object;

_T8 = function (p0 : Integer): TObject of object;

_T9 = _T5;

_T10 = _T3;

_T11 = _T3;

_T12 = procedure (p0 : TComponent) of object;

function __DC__GetTAbstractInetFileType__TypeID(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TAbstractInetFileType(Instance).TypeID;
end;

function __DC__GetTAbstractInetFileType__FileExtCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TAbstractInetFileType(Instance).FileExtCount;
end;

function __DC__GetTAbstractInetFileType__FileExt(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TAbstractInetFileType(Instance).FileExt[OleVariant(Params^[0])];
end;

function __DC__GetTNotifyList__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TNotifyList(Instance).Items[OleVariant(Params^[0])]);
end;

function __DC__GetTNotifyList__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TNotifyList(Instance).Count;
end;

function __DC__GetTScriptComponent__Obj(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TScriptComponent(Instance).Obj);
end;

procedure __RegisterProps;
begin
RegisterProperty(TAbstractInetFileType,'TypeID',__DC__GetTAbstractInetFileType__TypeID,nil);
RegisterProperty(TAbstractInetFileType,'FileExtCount',__DC__GetTAbstractInetFileType__FileExtCount,nil);
RegisterIndexedProperty(TAbstractInetFileType,'FileExt',1,False,__DC__GetTAbstractInetFileType__FileExt,nil);
RegisterIndexedProperty(TNotifyList,'Items',1,True,__DC__GetTNotifyList__Items,nil);
RegisterProperty(TNotifyList,'Count',__DC__GetTNotifyList__Count,nil);
RegisterProperty(TScriptComponent,'Obj',__DC__GetTScriptComponent__Obj,nil);
end;

const __ConstNames0 : array[0..28] of string = (
'dpPublished'
,'roExcludeID'
,'dcMultipleRecordView'
,'dcCurrentRecordView'
,'dcChangeCurrentRecordView'
,'htmliNone'
,'htmliTextInput'
,'htmliPasswordInput'
,'htmliSelect'
,'htmliSelectMultiple'
,'htmliRadio'
,'htmliCheckBox'
,'htmliTextArea'
,'htmliFile'
,'htmldText'
,'htmldImage'
,'htmldList'
,'htmldNone'
,'htmlvmInput'
,'htmlvmDisplay'
,'htmlvmToggleOnAccess'
,'htmlvmNone'
,'htmlaButton'
,'htmlaImage'
,'htmlaAnchor'
,'htmlaEventImages'
,'qaUseModulesVar'
,'qaNoModulesVar'
,'qaNoModuleName'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,dpPublished));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,roExcludeID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,dcMultipleRecordView));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,dcCurrentRecordView));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,dcChangeCurrentRecordView));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,htmliNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,htmliTextInput));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,htmliPasswordInput));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,htmliSelect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,htmliSelectMultiple));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,htmliRadio));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,htmliCheckBox));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,htmliTextArea));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,htmliFile));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,htmldText));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,htmldImage));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,htmldList));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,htmldNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,htmlvmInput));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,htmlvmDisplay));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,htmlvmToggleOnAccess));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,htmlvmNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,htmlaButton));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,htmlaImage));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,htmlaAnchor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,htmlaEventImages));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,qaUseModulesVar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,qaNoModulesVar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,qaNoModuleName));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..4] of TClass = (
TAbstractDesigntimeWarnings,
TAbstractInetFileType,
TNotifyList,
TScriptComponent,
TScriptObject
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..1] of string = (
'FullyQualifiedFieldName'
,'FullyQualifiedName'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(TComponent),TypeInfo(string)],Addr(FullyQualifiedFieldName),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(TComponent),
TypeInfo(TQualifyOption),TypeInfo(string)],Addr(FullyQualifiedName),cRegister);

//RegRegisterMethod(TAbstractDesigntimeWarnings,'AddString',TypeInfo(_T2),[TypeInfo(string)], pointer(0));
RegRegisterMethod(TAbstractDesigntimeWarnings,'AddString',TypeInfo(_T2),[TypeInfo(string)],  getVMTProcAddr('TAbstractDesigntimeWarnings','AddString',0));


//RegRegisterMethod(TAbstractDesigntimeWarnings,'AddObject',TypeInfo(_T3),[TypeInfo(TObject)], pointer(4));
RegRegisterMethod(TAbstractDesigntimeWarnings,'AddObject',TypeInfo(_T3),[TypeInfo(TObject)],  getVMTProcAddr('TAbstractDesigntimeWarnings','AddObject',4));


//RegRegisterMethod(TAbstractInetFileType,'GetTypeID',TypeInfo(_T4),[TypeInfo(string)], pointer(0));
RegRegisterMethod(TAbstractInetFileType,'GetTypeID',TypeInfo(_T4),[TypeInfo(string)],  getVMTProcAddr('TAbstractInetFileType','GetTypeID',0));


//RegRegisterMethod(TAbstractInetFileType,'GetExtCount',TypeInfo(_T5),[TypeInfo(Integer)], pointer(4));
RegRegisterMethod(TAbstractInetFileType,'GetExtCount',TypeInfo(_T5),[TypeInfo(Integer)],  getVMTProcAddr('TAbstractInetFileType','GetExtCount',4));


//RegRegisterMethod(TAbstractInetFileType,'GetFileExt',TypeInfo(_T6),[TypeInfo(Integer),TypeInfo(string)], pointer(8));
RegRegisterMethod(TAbstractInetFileType,'GetFileExt',TypeInfo(_T6),[TypeInfo(Integer),TypeInfo(string)],  getVMTProcAddr('TAbstractInetFileType','GetFileExt',8));


RegisterProc(TNotifyList,'Create',mtConstructor,TypeInfo(_T7),NoParams,Addr(TNotifyList.Create),cRegister);

RegRegisterMethod(TNotifyList,'GetItem',TypeInfo(_T8),[
TypeInfo(Integer),TypeInfo(TObject)],Addr(TNotifyList.GetItem));

RegRegisterMethod(TNotifyList,'GetCount',TypeInfo(_T9),[TypeInfo(Integer)],Addr(TNotifyList.GetCount));

RegRegisterMethod(TNotifyList,'AddNotify',TypeInfo(_T10),[
TypeInfo(TObject)],Addr(TNotifyList.AddNotify));

RegRegisterMethod(TNotifyList,'RemoveNotify',TypeInfo(_T11),[
TypeInfo(TObject)],Addr(TNotifyList.RemoveNotify));

RegisterProc(TScriptComponent,'Create',mtConstructor,TypeInfo(_T12),[
TypeInfo(TComponent)], pointer(0),cRegister);

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
