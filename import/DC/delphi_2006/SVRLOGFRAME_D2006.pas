{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit SVRLOGFRAME_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Registry,
  SysUtils,
  Classes,
  Controls,
  Forms,
  Dialogs,
  ActnList,
  Menus,
  ComCtrls,
  SvrLogDetailFrame,
  SvrLog,
  IniFiles,
  SvrLogFrame;
function ConvertTColumnInfoToVariant(var R : TColumnInfo) : OleVariant;
function ConvertVariantToTColumnInfo(const V : OleVariant) : TColumnInfo;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TColumnInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TColumnInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setVisible(const val : Boolean);
function getVisible : Boolean;
property Visible : Boolean read getVisible write setVisible;
procedure setWidth(const val : Integer);
function getWidth : Integer;
property Width : Integer read getWidth write setWidth;
procedure setColumnPosition(const val : Integer);
function getColumnPosition : Integer;
property ColumnPosition : Integer read getColumnPosition write setColumnPosition;
procedure setSubItemPosition(const val : Integer);
function getSubItemPosition : Integer;
property SubItemPosition : Integer read getSubItemPosition write setSubItemPosition;
procedure setCaption(const val : AnsiString);
function getCaption : AnsiString;
property Caption : AnsiString read getCaption write setCaption;
end;
type
_T0 = procedure (p0 : TObject) of object;

_T1 = _T0;

_T2 = _T0;

_T3 = _T0;

_T4 = procedure (p0 : TObject;
p1 : TListColumn) of object;

_T5 = procedure (p0 : TObject;
p1 : TListItem;
p2 : TListItem;
p3 : Integer;
var p4 : Integer) of object;

_T6 = procedure  of object;

_T7 = procedure (p0 : TTransactionLogEntry) of object;

_T8 = _T6;

_T9 = _T6;

_T10 = _T6;

_T11 = procedure (p0 : TLogDetailFrame) of object;

_T12 = _T6;

_T13 = _T6;

_T14 = procedure (p0 : TRegIniFile;
const p1 : string) of object;

_T15 = _T14;

{_T16 = procedure (var p0 : TLogColumnOrder) of object;}

{_T17 = procedure (var p0 : TLogColumnOrder) of object;}

function __TColumnInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TColumnInfo__Wrapper.setVisible(const val : Boolean);
begin
TColumnInfo(GetRecordPtr^).Visible := val;
end;
function __TColumnInfo__Wrapper.getVisible : Boolean;
begin
result := TColumnInfo(GetRecordPtr^).Visible;
end;
procedure __TColumnInfo__Wrapper.setWidth(const val : Integer);
begin
TColumnInfo(GetRecordPtr^).Width := val;
end;
function __TColumnInfo__Wrapper.getWidth : Integer;
begin
result := TColumnInfo(GetRecordPtr^).Width;
end;
procedure __TColumnInfo__Wrapper.setColumnPosition(const val : Integer);
begin
TColumnInfo(GetRecordPtr^).ColumnPosition := val;
end;
function __TColumnInfo__Wrapper.getColumnPosition : Integer;
begin
result := TColumnInfo(GetRecordPtr^).ColumnPosition;
end;
procedure __TColumnInfo__Wrapper.setSubItemPosition(const val : Integer);
begin
TColumnInfo(GetRecordPtr^).SubItemPosition := val;
end;
function __TColumnInfo__Wrapper.getSubItemPosition : Integer;
begin
result := TColumnInfo(GetRecordPtr^).SubItemPosition;
end;
procedure __TColumnInfo__Wrapper.setCaption(const val : AnsiString);
begin
TColumnInfo(GetRecordPtr^).Caption := val;
end;
function __TColumnInfo__Wrapper.getCaption : AnsiString;
begin
result := TColumnInfo(GetRecordPtr^).Caption;
end;
function _TColumnInfo_ : IDispatch;
begin
  result := __TColumnInfo__Wrapper.Create;
end;

type __TColumnInfo__Wrapper__ = class(__TColumnInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TColumnInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTColumnInfoToVariant(var R : TColumnInfo) : OleVariant;
var
__rw : __TColumnInfo__Wrapper__;
begin
__rw := __TColumnInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTColumnInfo(const V : OleVariant) : TColumnInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TColumnInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTLogFrame__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TLogFrame(Instance).Count;
end;

function __DC__GetTLogFrame__Index(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TLogFrame(Instance).Index;
end;

function __DC__GetTLogFrame__Current(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TLogFrame(Instance).Current);
end;

function __DC__GetTLogFrame__LogMax(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TLogFrame(Instance).LogMax;
end;

procedure __DC__SetTLogFrame__LogMax(Instance : TObject; Params : PVariantArgList);
begin
TLogFrame(Instance).LogMax:=OleVariant(Params^[0]);
end;

function __DC__GetTLogFrame__LogDelete(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TLogFrame(Instance).LogDelete;
end;

procedure __DC__SetTLogFrame__LogDelete(Instance : TObject; Params : PVariantArgList);
begin
TLogFrame(Instance).LogDelete:=OleVariant(Params^[0]);
end;

function __DC__GetTLogFrame__ColumnCaption(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TLogFrame(Instance).ColumnCaption[OleVariant(Params^[0])];
end;

function __DC__GetTLogFrame__ColumnWidth(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TLogFrame(Instance).ColumnWidth[OleVariant(Params^[0])];
end;

procedure __DC__SetTLogFrame__ColumnWidth(Instance : TObject; Params : PVariantArgList);
begin
TLogFrame(Instance).ColumnWidth[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTLogFrame__ColumnVisible(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TLogFrame(Instance).ColumnVisible[OleVariant(Params^[0])];
end;

procedure __DC__SetTLogFrame__ColumnVisible(Instance : TObject; Params : PVariantArgList);
begin
TLogFrame(Instance).ColumnVisible[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTLogFrame__ColumnPosition(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TLogFrame(Instance).ColumnPosition[OleVariant(Params^[0])];
end;

procedure __DC__SetTLogFrame__ColumnPosition(Instance : TObject; Params : PVariantArgList);
begin
TLogFrame(Instance).ColumnPosition[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTLogFrame__SubItemPosition(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TLogFrame(Instance).SubItemPosition[OleVariant(Params^[0])];
end;

procedure __DC__SetTLogFrame__SubItemPosition(Instance : TObject; Params : PVariantArgList);
begin
TLogFrame(Instance).SubItemPosition[OleVariant(Params^[1])]:=OleVariant(Params^[0]);
end;

function __DC__GetTLogFrame__Columns(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TLogFrame(Instance).Columns[OleVariant(Params^[0])]);
end;

function __DC__GetTLogFrame__ItemCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TLogFrame(Instance).ItemCount;
end;

procedure __RegisterProps;
begin
RegisterProperty(TLogFrame,'Count',__DC__GetTLogFrame__Count,nil);
RegisterProperty(TLogFrame,'Index',__DC__GetTLogFrame__Index,nil);
RegisterProperty(TLogFrame,'Current',__DC__GetTLogFrame__Current,nil);
RegisterProperty(TLogFrame,'LogMax',__DC__GetTLogFrame__LogMax,__DC__SetTLogFrame__LogMax);
RegisterProperty(TLogFrame,'LogDelete',__DC__GetTLogFrame__LogDelete,__DC__SetTLogFrame__LogDelete);
RegisterIndexedProperty(TLogFrame,'ColumnCaption',1,False,__DC__GetTLogFrame__ColumnCaption,nil);
RegisterIndexedProperty(TLogFrame,'ColumnWidth',1,False,__DC__GetTLogFrame__ColumnWidth,__DC__SetTLogFrame__ColumnWidth);
RegisterIndexedProperty(TLogFrame,'ColumnVisible',1,False,__DC__GetTLogFrame__ColumnVisible,__DC__SetTLogFrame__ColumnVisible);
RegisterIndexedProperty(TLogFrame,'ColumnPosition',1,False,__DC__GetTLogFrame__ColumnPosition,__DC__SetTLogFrame__ColumnPosition);
RegisterIndexedProperty(TLogFrame,'SubItemPosition',1,False,__DC__GetTLogFrame__SubItemPosition,__DC__SetTLogFrame__SubItemPosition);
RegisterIndexedProperty(TLogFrame,'Columns',1,False,__DC__GetTLogFrame__Columns,nil);
RegisterProperty(TLogFrame,'ItemCount',__DC__GetTLogFrame__ItemCount,nil);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..0] of TClass = (
TLogFrame
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'TColumnInfo'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TColumnInfo_)));
RegRegisterMethod(TLogFrame,'ClearActionExecute',TypeInfo(_T0),[
TypeInfo(TObject)],Addr(TLogFrame.ClearActionExecute));

RegRegisterMethod(TLogFrame,'ClearActionUpdate',TypeInfo(_T1),[
TypeInfo(TObject)],Addr(TLogFrame.ClearActionUpdate));

RegRegisterMethod(TLogFrame,'DetailActionExecute',TypeInfo(_T2),[
TypeInfo(TObject)],Addr(TLogFrame.DetailActionExecute));

RegRegisterMethod(TLogFrame,'lvLogDblClick',TypeInfo(_T3),[
TypeInfo(TObject)],Addr(TLogFrame.lvLogDblClick));

RegRegisterMethod(TLogFrame,'lvLogColumnClick',TypeInfo(_T4),[
TypeInfo(TObject),
TypeInfo(TListColumn)],Addr(TLogFrame.lvLogColumnClick));

RegRegisterMethod(TLogFrame,'lvLogCompare',TypeInfo(_T5),[
TypeInfo(TObject),
TypeInfo(TListItem),
TypeInfo(TListItem),
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TLogFrame.lvLogCompare));

RegRegisterMethod(TLogFrame,'SynchColumnInfo',TypeInfo(_T6),NoParams,Addr(TLogFrame.SynchColumnInfo));

RegRegisterMethod(TLogFrame,'Add',TypeInfo(_T7),[
TypeInfo(TTransactionLogEntry)],Addr(TLogFrame.Add));

RegRegisterMethod(TLogFrame,'Next',TypeInfo(_T8),NoParams,Addr(TLogFrame.Next));

RegRegisterMethod(TLogFrame,'Previous',TypeInfo(_T9),NoParams,Addr(TLogFrame.Previous));

RegRegisterMethod(TLogFrame,'Clear',TypeInfo(_T10),NoParams,Addr(TLogFrame.Clear));

RegRegisterMethod(TLogFrame,'ShowDetail',TypeInfo(_T11),[
TypeInfo(TLogDetailFrame)],Addr(TLogFrame.ShowDetail));

RegRegisterMethod(TLogFrame,'RefreshColumns',TypeInfo(_T12),NoParams,Addr(TLogFrame.RefreshColumns));

RegRegisterMethod(TLogFrame,'RefreshSubItems',TypeInfo(_T13),NoParams,Addr(TLogFrame.RefreshSubItems));

RegRegisterMethod(TLogFrame,'Save',TypeInfo(_T14),[
TypeInfo(TRegIniFile),
TypeInfo(string)],Addr(TLogFrame.Save));

RegRegisterMethod(TLogFrame,'Load',TypeInfo(_T15),[
TypeInfo(TRegIniFile),
TypeInfo(string)],Addr(TLogFrame.Load));

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegRegisterMethod(TLogFrame,'GetSubItemOrder',TypeInfo(_T16),[
TypeInfo(TLogColumnOrder)],Addr(TLogFrame.GetSubItemOrder))}

{RegRegisterMethod(TLogFrame,'GetColumnOrder',TypeInfo(_T17),[
TypeInfo(TLogColumnOrder)],Addr(TLogFrame.GetColumnOrder))}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
