{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDRAWFUNCTIONS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  IdException,
  IdStackConsts,
  IdGlobal,
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  IdStack,
  IdRawHeaders,
  IdRawFunctions;
function ConvertTIdEtherAddrToVariant(var R : TIdEtherAddr) : OleVariant;
function ConvertVariantToTIdEtherAddr(const V : OleVariant) : TIdEtherAddr;
function ConvertTIdInAddrToVariant(var R : TIdInAddr) : OleVariant;
function ConvertVariantToTIdInAddr(const V : OleVariant) : TIdInAddr;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TIdEtherAddr__Wrapper = class(TDCRecordWrapper)
private
fR : TIdEtherAddr;
public
function GetRecordPtr : pointer; override;
published
end;
type __TIdInAddr__Wrapper = class(TDCRecordWrapper)
private
fR : TIdInAddr;
public
function GetRecordPtr : pointer; override;
published
procedure setS_addr(const val : longword);
function getS_addr : longword;
property S_addr : longword read getS_addr write setS_addr;
end;
type
_T0 = function (p0 : Word;
p1 : Word;
p2 : Byte;
p3 : Byte;
p4 : Word;
const p5 : IDispatch;
const p6 : IDispatch;
const p7 : IDispatch;
const p8 : IDispatch;
const p9 : IDispatch;
p10 : Integer;
var p11): Boolean of object;

_T1 = function (p0 : Word;
p1 : Word;
p2 : Word;
p3 : Word;
p4 : Word;
p5 : Word;
const p6 : Word;
p7 : Integer;
var p8): Boolean of object;

_T2 = function (const p0 : IDispatch;
const p1 : IDispatch;
p2 : Word;
const p3 : Word;
p4 : Integer;
var p5): Boolean of object;

_T3 = function (p0 : Byte;
p1 : Byte;
p2 : Word;
p3 : Word;
const p4 : Word;
p5 : Integer;
var p6): Boolean of object;

_T4 = function (p0 : Byte;
p1 : Byte;
p2 : Word;
p3 : Word;
p4 : longword;
const p5 : longword;
p6 : Integer;
var p7): Boolean of object;

_T5 = function (p0 : Byte;
p1 : Byte;
const p2 : IDispatch;
p3 : Word;
p4 : Byte;
p5 : Word;
p6 : Word;
p7 : Byte;
p8 : Byte;
const p9 : IDispatch;
const p10 : IDispatch;
const p11 : IDispatch;
p12 : Integer;
var p13): Boolean of object;

_T6 = function (p0 : Byte;
p1 : Byte;
p2 : Word;
p3 : Byte;
p4 : Word;
p5 : Word;
p6 : Byte;
p7 : Byte;
const p8 : IDispatch;
const p9 : IDispatch;
const p10 : IDispatch;
p11 : Integer;
var p12): Boolean of object;

_T7 = function (p0 : Byte;
p1 : Byte;
p2 : Word;
p3 : Word;
p4 : TIdNetTime;
p5 : TIdNetTime;
p6 : TIdNetTime;
const p7 : TIdNetTime;
p8 : Integer;
var p9): Boolean of object;

_T8 = function (p0 : Byte;
p1 : Byte;
p2 : Word;
p3 : Byte;
p4 : Word;
p5 : Word;
p6 : Byte;
p7 : Byte;
const p8 : IDispatch;
const p9 : IDispatch;
const p10 : Integer;
const p11 : Integer;
var p12): Boolean of object;

_T9 = function (p0 : Byte;
p1 : Byte;
const p2 : IDispatch;
const p3 : Integer;
const p4 : Integer;
var p5): Boolean of object;

_T10 = function (p0 : Word;
p1 : Byte;
p2 : Word;
p3 : Word;
p4 : Byte;
p5 : Byte;
const p6 : IDispatch;
const p7 : IDispatch;
const p8 : IDispatch;
p9 : Integer;
var p10): Boolean of object;

_T11 = function (p0 : Byte;
p1 : Byte;
p2 : Word;
p3 : Word;
p4 : Word;
p5 : longword;
p6 : longword;
p7 : longword;
p8 : longword;
const p9 : longword;
p10 : Integer;
var p11): Boolean of object;

_T12 = function (p0 : Word;
p1 : Word;
p2 : longword;
p3 : longword;
p4 : Byte;
p5 : Word;
p6 : Word;
const p7 : Integer;
const p8 : Integer;
var p9): Boolean of object;

_T13 = function (p0 : Word;
p1 : Word;
const p2 : Word;
p3 : Integer;
var p4): Boolean of object;

function __TIdEtherAddr__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TIdInAddr__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIdInAddr__Wrapper.setS_addr(const val : longword);
begin
TIdInAddr(GetRecordPtr^).S_addr := val;
end;
function __TIdInAddr__Wrapper.getS_addr : longword;
begin
result := TIdInAddr(GetRecordPtr^).S_addr;
end;
function ____IdRawBuildArp__Wrapper(p0 : Word;
p1 : Word;
p2 : Byte;
p3 : Byte;
p4 : Word;
const p5 : IDispatch;
const p6 : IDispatch;
const p7 : IDispatch;
const p8 : IDispatch;
const p9 : IDispatch;
p10 : Integer;
var p11): Boolean;
var
__p5 : ^TIdEtherAddr;
__i5 : IDispatch;
__p6 : ^TIdInAddr;
__i6 : IDispatch;
__p7 : ^TIdEtherAddr;
__i7 : IDispatch;
__p8 : ^TIdInAddr;
__i8 : IDispatch;
__p9 : ^TIdInAddr;
__i9 : IDispatch;
begin
if p5 = nil then exit;
__p5 := (p5 as IDCRecordWrapper).GetRecordPtr;
if p6 = nil then exit;
__p6 := (p6 as IDCRecordWrapper).GetRecordPtr;
if p7 = nil then exit;
__p7 := (p7 as IDCRecordWrapper).GetRecordPtr;
if p8 = nil then exit;
__p8 := (p8 as IDCRecordWrapper).GetRecordPtr;
if p9 = nil then exit;
__p9 := (p9 as IDCRecordWrapper).GetRecordPtr;
result := IdRawBuildArp(p0,p1,p2,p3,p4,__p5^,__p6^,__p7^,__p8^,__p9^,p10,p11);
end;

function ____IdRawBuildEthernet__Wrapper(const p0 : IDispatch;
const p1 : IDispatch;
p2 : Word;
const p3 : Word;
p4 : Integer;
var p5): Boolean;
var
__p0 : ^TIdEtherAddr;
__i0 : IDispatch;
__p1 : ^TIdEtherAddr;
__i1 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := IdRawBuildEthernet(__p0^,__p1^,p2,p3,p4,p5);
end;

function ____IdRawBuildIcmpRedirect__Wrapper(p0 : Byte;
p1 : Byte;
const p2 : IDispatch;
p3 : Word;
p4 : Byte;
p5 : Word;
p6 : Word;
p7 : Byte;
p8 : Byte;
const p9 : IDispatch;
const p10 : IDispatch;
const p11 : IDispatch;
p12 : Integer;
var p13): Boolean;
var
__p2 : ^TIdInAddr;
__i2 : IDispatch;
__p9 : ^TIdInAddr;
__i9 : IDispatch;
__p10 : ^TIdInAddr;
__i10 : IDispatch;
__p11 : ^TIdInAddr;
__i11 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
if p9 = nil then exit;
__p9 := (p9 as IDCRecordWrapper).GetRecordPtr;
if p10 = nil then exit;
__p10 := (p10 as IDCRecordWrapper).GetRecordPtr;
if p11 = nil then exit;
__p11 := (p11 as IDCRecordWrapper).GetRecordPtr;
result := IdRawBuildIcmpRedirect(p0,p1,__p2^,p3,p4,p5,p6,p7,p8,__p9^,__p10^,__p11^,p12,p13);
end;

function ____IdRawBuildIcmpTimeExceed__Wrapper(p0 : Byte;
p1 : Byte;
p2 : Word;
p3 : Byte;
p4 : Word;
p5 : Word;
p6 : Byte;
p7 : Byte;
const p8 : IDispatch;
const p9 : IDispatch;
const p10 : IDispatch;
p11 : Integer;
var p12): Boolean;
var
__p8 : ^TIdInAddr;
__i8 : IDispatch;
__p9 : ^TIdInAddr;
__i9 : IDispatch;
__p10 : ^TIdInAddr;
__i10 : IDispatch;
begin
if p8 = nil then exit;
__p8 := (p8 as IDCRecordWrapper).GetRecordPtr;
if p9 = nil then exit;
__p9 := (p9 as IDCRecordWrapper).GetRecordPtr;
if p10 = nil then exit;
__p10 := (p10 as IDCRecordWrapper).GetRecordPtr;
result := IdRawBuildIcmpTimeExceed(p0,p1,p2,p3,p4,p5,p6,p7,__p8^,__p9^,__p10^,p11,p12);
end;

function ____IdRawBuildIcmpUnreach__Wrapper(p0 : Byte;
p1 : Byte;
p2 : Word;
p3 : Byte;
p4 : Word;
p5 : Word;
p6 : Byte;
p7 : Byte;
const p8 : IDispatch;
const p9 : IDispatch;
const p10 : Integer;
const p11 : Integer;
var p12): Boolean;
var
__p8 : ^TIdInAddr;
__i8 : IDispatch;
__p9 : ^TIdInAddr;
__i9 : IDispatch;
begin
if p8 = nil then exit;
__p8 := (p8 as IDCRecordWrapper).GetRecordPtr;
if p9 = nil then exit;
__p9 := (p9 as IDCRecordWrapper).GetRecordPtr;
result := IdRawBuildIcmpUnreach(p0,p1,p2,p3,p4,p5,p6,p7,__p8^,__p9^,p10,p11,p12);
end;

function ____IdRawBuildIgmp__Wrapper(p0 : Byte;
p1 : Byte;
const p2 : IDispatch;
const p3 : Integer;
const p4 : Integer;
var p5): Boolean;
var
__p2 : ^TIdInAddr;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := IdRawBuildIgmp(p0,p1,__p2^,p3,p4,p5);
end;

function ____IdRawBuildIp__Wrapper(p0 : Word;
p1 : Byte;
p2 : Word;
p3 : Word;
p4 : Byte;
p5 : Byte;
const p6 : IDispatch;
const p7 : IDispatch;
const p8 : IDispatch;
p9 : Integer;
var p10): Boolean;
var
__p6 : ^TIdInAddr;
__i6 : IDispatch;
__p7 : ^TIdInAddr;
__i7 : IDispatch;
__p8 : ^TIdInAddr;
__i8 : IDispatch;
begin
if p6 = nil then exit;
__p6 := (p6 as IDCRecordWrapper).GetRecordPtr;
if p7 = nil then exit;
__p7 := (p7 as IDCRecordWrapper).GetRecordPtr;
if p8 = nil then exit;
__p8 := (p8 as IDCRecordWrapper).GetRecordPtr;
result := IdRawBuildIp(p0,p1,p2,p3,p4,p5,__p6^,__p7^,__p8^,p9,p10);
end;


type __TIdEtherAddr__Wrapper__ = class(__TIdEtherAddr__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIdEtherAddr__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIdEtherAddrToVariant(var R : TIdEtherAddr) : OleVariant;
var
__rw : __TIdEtherAddr__Wrapper__;
begin
__rw := __TIdEtherAddr__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIdEtherAddr(const V : OleVariant) : TIdEtherAddr;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIdEtherAddr((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TIdInAddr__Wrapper__ = class(__TIdInAddr__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIdInAddr__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIdInAddrToVariant(var R : TIdInAddr) : OleVariant;
var
__rw : __TIdInAddr__Wrapper__;
begin
__rw := __TIdInAddr__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIdInAddr(const V : OleVariant) : TIdInAddr;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIdInAddr((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..13] of string = (
'IdRawBuildArp'
,'IdRawBuildDns'
,'IdRawBuildEthernet'
,'IdRawBuildIcmpEcho'
,'IdRawBuildIcmpMask'
,'IdRawBuildIcmpRedirect'
,'IdRawBuildIcmpTimeExceed'
,'IdRawBuildIcmpTimestamp'
,'IdRawBuildIcmpUnreach'
,'IdRawBuildIgmp'
,'IdRawBuildIp'
,'IdRawBuildRip'
,'IdRawBuildTcp'
,'IdRawBuildUdp'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Byte),
TypeInfo(Byte),
TypeInfo(Word),
TypeInfo(IDispatch),
TypeInfo(IDispatch),
TypeInfo(IDispatch),
TypeInfo(IDispatch),
TypeInfo(IDispatch),
TypeInfo(Integer),
TypeInfoUntyped,TypeInfo(Boolean)],Addr(____IdRawBuildArp__Wrapper),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Integer),
TypeInfoUntyped,TypeInfo(Boolean)],Addr(IdRawBuildDns),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T2),[
TypeInfo(IDispatch),
TypeInfo(IDispatch),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Integer),
TypeInfoUntyped,TypeInfo(Boolean)],Addr(____IdRawBuildEthernet__Wrapper),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T3),[
TypeInfo(Byte),
TypeInfo(Byte),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Integer),
TypeInfoUntyped,TypeInfo(Boolean)],Addr(IdRawBuildIcmpEcho),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T4),[
TypeInfo(Byte),
TypeInfo(Byte),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(longword),
TypeInfo(longword),
TypeInfo(Integer),
TypeInfoUntyped,TypeInfo(Boolean)],Addr(IdRawBuildIcmpMask),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T5),[
TypeInfo(Byte),
TypeInfo(Byte),
TypeInfo(IDispatch),
TypeInfo(Word),
TypeInfo(Byte),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Byte),
TypeInfo(Byte),
TypeInfo(IDispatch),
TypeInfo(IDispatch),
TypeInfo(IDispatch),
TypeInfo(Integer),
TypeInfoUntyped,TypeInfo(Boolean)],Addr(____IdRawBuildIcmpRedirect__Wrapper),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T6),[
TypeInfo(Byte),
TypeInfo(Byte),
TypeInfo(Word),
TypeInfo(Byte),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Byte),
TypeInfo(Byte),
TypeInfo(IDispatch),
TypeInfo(IDispatch),
TypeInfo(IDispatch),
TypeInfo(Integer),
TypeInfoUntyped,TypeInfo(Boolean)],Addr(____IdRawBuildIcmpTimeExceed__Wrapper),cRegister);

RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T7),[
TypeInfo(Byte),
TypeInfo(Byte),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(TIdNetTime),
TypeInfo(TIdNetTime),
TypeInfo(TIdNetTime),
TypeInfo(TIdNetTime),
TypeInfo(Integer),
TypeInfoUntyped,TypeInfo(Boolean)],Addr(IdRawBuildIcmpTimestamp),cRegister);

RegisterProc(nil,MethodNames[8],mtProc,TypeInfo(_T8),[
TypeInfo(Byte),
TypeInfo(Byte),
TypeInfo(Word),
TypeInfo(Byte),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Byte),
TypeInfo(Byte),
TypeInfo(IDispatch),
TypeInfo(IDispatch),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfoUntyped,TypeInfo(Boolean)],Addr(____IdRawBuildIcmpUnreach__Wrapper),cRegister);

RegisterProc(nil,MethodNames[9],mtProc,TypeInfo(_T9),[
TypeInfo(Byte),
TypeInfo(Byte),
TypeInfo(IDispatch),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfoUntyped,TypeInfo(Boolean)],Addr(____IdRawBuildIgmp__Wrapper),cRegister);

RegisterProc(nil,MethodNames[10],mtProc,TypeInfo(_T10),[
TypeInfo(Word),
TypeInfo(Byte),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Byte),
TypeInfo(Byte),
TypeInfo(IDispatch),
TypeInfo(IDispatch),
TypeInfo(IDispatch),
TypeInfo(Integer),
TypeInfoUntyped,TypeInfo(Boolean)],Addr(____IdRawBuildIp__Wrapper),cRegister);

RegisterProc(nil,MethodNames[11],mtProc,TypeInfo(_T11),[
TypeInfo(Byte),
TypeInfo(Byte),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(longword),
TypeInfo(longword),
TypeInfo(longword),
TypeInfo(longword),
TypeInfo(longword),
TypeInfo(Integer),
TypeInfoUntyped,TypeInfo(Boolean)],Addr(IdRawBuildRip),cRegister);

RegisterProc(nil,MethodNames[12],mtProc,TypeInfo(_T12),[
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(longword),
TypeInfo(longword),
TypeInfo(Byte),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfoUntyped,TypeInfo(Boolean)],Addr(IdRawBuildTcp),cRegister);

RegisterProc(nil,MethodNames[13],mtProc,TypeInfo(_T13),[
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Integer),
TypeInfoUntyped,TypeInfo(Boolean)],Addr(IdRawBuildUdp),cRegister);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
