{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit CTLPANEL_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  Messages,
  Types,
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  SysUtils,
  Classes,
  Graphics,
  Cpl,
  CtlPanel;
function ConvertTCPLInfoToVariant(var R : TCPLInfo) : OleVariant;
function ConvertVariantToTCPLInfo(const V : OleVariant) : TCPLInfo;
function ConvertTNewCPLInfoToVariant(var R : TNewCPLInfo) : OleVariant;
function ConvertVariantToTNewCPLInfo(const V : OleVariant) : TNewCPLInfo;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TCPLInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TCPLInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setidIcon(const val : Integer);
function getidIcon : Integer;
property idIcon : Integer read getidIcon write setidIcon;
procedure setidName(const val : Integer);
function getidName : Integer;
property idName : Integer read getidName write setidName;
procedure setidInfo(const val : Integer);
function getidInfo : Integer;
property idInfo : Integer read getidInfo write setidInfo;
procedure setlData(const val : Longint);
function getlData : Longint;
property lData : Longint read getlData write setlData;
end;
type __TNewCPLInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TNewCPLInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setdwSize(const val : DWORD);
function getdwSize : DWORD;
property dwSize : DWORD read getdwSize write setdwSize;
procedure setdwFlags(const val : DWORD);
function getdwFlags : DWORD;
property dwFlags : DWORD read getdwFlags write setdwFlags;
procedure setdwHelpContext(const val : DWORD);
function getdwHelpContext : DWORD;
property dwHelpContext : DWORD read getdwHelpContext write setdwHelpContext;
procedure setlData(const val : Longint);
function getlData : Longint;
property lData : Longint read getlData write setlData;
end;
type __TAppletModule__ = class(TAppletModule);
type
_T0 = function (p0 : THandle;
p1 : DWORD;
p2 : Longint;
p3 : Longint): Longint of object;

_T1 = procedure (p0 : TObject;
p1 : Exception) of object;

_T2 = procedure (var p0 : Boolean) of object;

_T3 = procedure (var p0 : Integer) of object;

_T4 = procedure  of object;

_T5 = _T4;

{_T6 = procedure (p0 : TComponentClass;
var p1) of object;}

_T7 = procedure (p0 : TObject) of object;

_T8 = _T4;

_T9 = _T4;

_T10 = procedure (p0 : Longint) of object;

_T11 = _T10;

_T12 = procedure (const p0 : IDispatch) of object;

_T13 = _T12;

_T14 = procedure (p0 : string) of object;

function __TCPLInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TCPLInfo__Wrapper.setidIcon(const val : Integer);
begin
TCPLInfo(GetRecordPtr^).idIcon := val;
end;
function __TCPLInfo__Wrapper.getidIcon : Integer;
begin
result := TCPLInfo(GetRecordPtr^).idIcon;
end;
procedure __TCPLInfo__Wrapper.setidName(const val : Integer);
begin
TCPLInfo(GetRecordPtr^).idName := val;
end;
function __TCPLInfo__Wrapper.getidName : Integer;
begin
result := TCPLInfo(GetRecordPtr^).idName;
end;
procedure __TCPLInfo__Wrapper.setidInfo(const val : Integer);
begin
TCPLInfo(GetRecordPtr^).idInfo := val;
end;
function __TCPLInfo__Wrapper.getidInfo : Integer;
begin
result := TCPLInfo(GetRecordPtr^).idInfo;
end;
procedure __TCPLInfo__Wrapper.setlData(const val : Longint);
begin
TCPLInfo(GetRecordPtr^).lData := val;
end;
function __TCPLInfo__Wrapper.getlData : Longint;
begin
result := TCPLInfo(GetRecordPtr^).lData;
end;
function __TNewCPLInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TNewCPLInfo__Wrapper.setdwSize(const val : DWORD);
begin
TNewCPLInfo(GetRecordPtr^).dwSize := val;
end;
function __TNewCPLInfo__Wrapper.getdwSize : DWORD;
begin
result := TNewCPLInfo(GetRecordPtr^).dwSize;
end;
procedure __TNewCPLInfo__Wrapper.setdwFlags(const val : DWORD);
begin
TNewCPLInfo(GetRecordPtr^).dwFlags := val;
end;
function __TNewCPLInfo__Wrapper.getdwFlags : DWORD;
begin
result := TNewCPLInfo(GetRecordPtr^).dwFlags;
end;
procedure __TNewCPLInfo__Wrapper.setdwHelpContext(const val : DWORD);
begin
TNewCPLInfo(GetRecordPtr^).dwHelpContext := val;
end;
function __TNewCPLInfo__Wrapper.getdwHelpContext : DWORD;
begin
result := TNewCPLInfo(GetRecordPtr^).dwHelpContext;
end;
procedure __TNewCPLInfo__Wrapper.setlData(const val : Longint);
begin
TNewCPLInfo(GetRecordPtr^).lData := val;
end;
function __TNewCPLInfo__Wrapper.getlData : Longint;
begin
result := TNewCPLInfo(GetRecordPtr^).lData;
end;
procedure __TAppletModule__DoInquire__Wrapper(__Instance : TAppletModule;
const p0 : IDispatch);
var
__p0 : ^TCPLInfo;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__TAppletModule__(__Instance).DoInquire(__p0^);
end;

procedure __TAppletModule__DoNewInquire__Wrapper(__Instance : TAppletModule;
const p0 : IDispatch);
var
__p0 : ^TNewCPLInfo;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__TAppletModule__(__Instance).DoNewInquire(__p0^);
end;


type __TCPLInfo__Wrapper__ = class(__TCPLInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TCPLInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTCPLInfoToVariant(var R : TCPLInfo) : OleVariant;
var
__rw : __TCPLInfo__Wrapper__;
begin
__rw := __TCPLInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTCPLInfo(const V : OleVariant) : TCPLInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TCPLInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TNewCPLInfo__Wrapper__ = class(__TNewCPLInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TNewCPLInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTNewCPLInfoToVariant(var R : TNewCPLInfo) : OleVariant;
var
__rw : __TNewCPLInfo__Wrapper__;
begin
__rw := __TNewCPLInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTNewCPLInfo(const V : OleVariant) : TNewCPLInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TNewCPLInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTAppletApplication__Modules(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TAppletApplication(Instance).Modules[OleVariant(Params^[0])]);
end;

procedure __DC__SetTAppletApplication__Modules(Instance : TObject; Params : PVariantArgList);
begin
TAppletApplication(Instance).Modules[OleVariant(Params^[1])]:=TAppletModule(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTAppletApplication__ModuleCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TAppletApplication(Instance).ModuleCount;
end;

procedure __DC__SetTAppletApplication__ModuleCount(Instance : TObject; Params : PVariantArgList);
begin
TAppletApplication(Instance).ModuleCount:=OleVariant(Params^[0]);
end;

function __DC__GetTAppletApplication__ControlPanelHandle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TAppletApplication(Instance).ControlPanelHandle;
end;

function __DC__GetTAppletModule__Data(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TAppletModule(Instance).Data;
end;

procedure __DC__SetTAppletModule__Data(Instance : TObject; Params : PVariantArgList);
begin
TAppletModule(Instance).Data:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterIndexedProperty(TAppletApplication,'Modules',1,False,__DC__GetTAppletApplication__Modules,__DC__SetTAppletApplication__Modules);
RegisterProperty(TAppletApplication,'ModuleCount',__DC__GetTAppletApplication__ModuleCount,__DC__SetTAppletApplication__ModuleCount);
RegisterProperty(TAppletApplication,'ControlPanelHandle',__DC__GetTAppletApplication__ControlPanelHandle,nil);
RegisterProperty(TAppletModule,'Data',__DC__GetTAppletModule__Data,__DC__SetTAppletModule__Data);
end;

function __DC__GetCtlPanel__Application(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(CtlPanel.Application);
end;

procedure __DC__SetCtlPanel__Application(Instance : TObject; Params : PVariantArgList);
begin
TObject(CtlPanel.Application):=(VarToObject(OleVariant(Params^[0])));
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('Application',__DC__GetCtlPanel__Application,__DC__SetCtlPanel__Application));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..2] of TClass = (
EAppletException,
TAppletApplication,
TAppletModule
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'CPlApplet'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(THandle),
TypeInfo(DWORD),
TypeInfo(Longint),
TypeInfo(Longint),TypeInfo(Longint)],Addr(CPlApplet),cStdCall);

RegRegisterMethod(TAppletApplication,'DoHandleException',TypeInfo(_T1),[
TypeInfo(TObject),
TypeInfo(Exception)], pointer(MinVMTOffset - 16));

RegRegisterMethod(TAppletApplication,'DoInit',TypeInfo(_T2),[
TypeInfo(Boolean)], pointer(MinVMTOffset - 17));

RegRegisterMethod(TAppletApplication,'DoCount',TypeInfo(_T3),[
TypeInfo(Integer)], pointer(MinVMTOffset - 18));

RegRegisterMethod(TAppletApplication,'DoExit',TypeInfo(_T4),NoParams, pointer(MinVMTOffset - 19));

RegRegisterMethod(TAppletApplication,'DoSetup',TypeInfo(_T5),NoParams, pointer(MinVMTOffset - 20));

RegRegisterMethod(TAppletApplication,'HandleException',TypeInfo(_T7),[
TypeInfo(TObject)],Addr(TAppletApplication.HandleException));

//RegRegisterMethod(TAppletApplication,'Initialize',TypeInfo(_T8),NoParams, pointer(52));
RegRegisterMethod(TAppletApplication,'Initialize',TypeInfo(_T8),NoParams,  getVMTProcAddr('TAppletApplication','Initialize',52));


//RegRegisterMethod(TAppletApplication,'Run',TypeInfo(_T9),NoParams, pointer(56));
RegRegisterMethod(TAppletApplication,'Run',TypeInfo(_T9),NoParams,  getVMTProcAddr('TAppletApplication','Run',56));


RegRegisterMethod(TAppletModule,'DoStop',TypeInfo(_T10),[
TypeInfo(Longint)], pointer(MinVMTOffset - 17));

RegRegisterMethod(TAppletModule,'DoActivate',TypeInfo(_T11),[
TypeInfo(Longint)], pointer(MinVMTOffset - 18));

RegRegisterMethod(TAppletModule,'DoInquire',TypeInfo(_T12),[
TypeInfo(IDispatch)], pointer(MinVMTOffset - 19));

RegRegisterMethod(TAppletModule,'DoNewInquire',TypeInfo(_T13),[
TypeInfo(IDispatch)], pointer(MinVMTOffset - 20));

RegRegisterMethod(TAppletModule,'DoStartWParms',TypeInfo(_T14),[
TypeInfo(string)], pointer(MinVMTOffset - 21));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegRegisterMethod(TAppletApplication,'CreateForm',TypeInfo(_T6),[
TypeInfo(TComponentClass),
TypeInfoUntyped], pointer(48))}

RegisterEvent(TypeInfo(TActivateEvent),[
TypeInfo(TObject),
TypeInfo(Longint)]);

RegisterEvent(TypeInfo(TCountEvent),[
TypeInfo(TObject),
TypeInfo(Integer)]);

RegisterEvent(TypeInfo(TInitEvent),[
TypeInfo(TObject),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TInquireEvent),[
TypeInfo(TObject),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer)]);

RegisterEvent(TypeInfo(TNewInquireEvent),[
TypeInfo(TObject),
TypeInfo(Integer),
TypeInfo(hIcon),
TypeInfo(string),
TypeInfo(string)]);

RegisterEvent(TypeInfo(TOnAppletExceptionEvent),[
TypeInfo(TObject),
TypeInfo(Exception)]);

RegisterEvent(TypeInfo(TStartWParmsEvent),[
TypeInfo(TObject),
TypeInfo(string)]);

RegisterEvent(TypeInfo(TStopEvent),[
TypeInfo(TObject),
TypeInfo(Longint)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
