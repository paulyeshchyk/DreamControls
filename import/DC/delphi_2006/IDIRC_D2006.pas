{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDIRC_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdAssignedNumbers,
  IdBaseComponent,
  IdComponent,
  IdTCPConnection,
  IdException,
  IdTCPClient,
  IdThread,
  IdStack,
  IdGlobal,
  IdIRC;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (p0 : Boolean) of object;

_T1 = function (p0 : String): Boolean of object;

_T2 = _T1;

_T3 = _T1;

{_T4 = function (p0 : PChar;
p1 : PChar): Boolean of object;}

_T5 = procedure (p0 : String) of object;

_T6 = procedure (p0 : String;
p1 : String) of object;

_T7 = _T6;

_T8 = _T6;

_T9 = procedure (p0 : String;
p1 : String;
p2 : String) of object;

_T10 = _T9;

_T11 = procedure (p0 : String;
const p1 : String) of object;

_T12 = _T11;

_T13 = _T9;

_T14 = _T5;

_T15 = procedure (p0 : String;
p1 : String;
const p2 : String) of object;

_T16 = _T5;

_T17 = _T6;

_T18 = _T5;

_T19 = procedure  of object;

_T20 = function : String of object;

_T21 = procedure (p0 : TIdIRC;
p1 : String) of object;

_T22 = _T5;

_T23 = _T5;

_T24 = _T6;

_T25 = _T19;

_T26 = _T19;

_T27 = _T5;

_T28 = _T5;

_T29 = _T5;

_T30 = _T5;

_T31 = _T5;

_T32 = _T5;

_T33 = _T5;

_T34 = procedure (p0 : TIdIRCChannelModes) of object;

_T35 = procedure (p0 : Integer) of object;

_T36 = _T5;

_T37 = function (p0 : String;
p1 : String): TIdIRCUser of object;

_T38 = procedure (p0 : TIdIRCUser) of object;

_T39 = _T1;

_T40 = function (p0 : String;
var p1 : Integer): Boolean of object;

_T41 = _T38;

_T42 = _T38;

_T43 = _T38;

_T44 = _T38;

_T45 = procedure (p0 : TIdIRCUser;
p1 : String) of object;

_T46 = _T38;

_T47 = _T38;

_T48 = _T38;

_T49 = _T38;

_T50 = procedure (p0 : TIdIRC) of object;

_T51 = function (p0 : String): TIdIRCChannel of object;

_T52 = _T5;

_T53 = _T40;

_T54 = _T51;

_T55 = _T45;

_T56 = _T38;

_T57 = _T19;

_T58 = _T50;

_T59 = _T19;

_T60 = procedure (p0 : TIdIRC;
p1 : String;
p2 : String) of object;

_T61 = _T5;

_T62 = _T50;

_T63 = _T37;

_T64 = _T38;

_T65 = function (p0 : String): String of object;

_T66 = _T40;

_T67 = function (p0 : String): TIdIRCUser of object;

_T68 = _T6;

_T69 = _T19;

procedure __TIdIRC__Join__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
TIdIRC(__Instance).Join(OleVariant(pargs^[0]));
end;
2:
begin
TIdIRC(__Instance).Join(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure __TIdIRC__Part__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
TIdIRC(__Instance).Part(OleVariant(pargs^[0]));
end;
2:
begin
TIdIRC(__Instance).Part(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure __TIdIRC__Mode__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
2:
begin
TIdIRC(__Instance).Mode(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
3:
begin
TIdIRC(__Instance).Mode(OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function __DC__GetTIdIRC__Away(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdIRC(Instance).Away;
end;

function __DC__GetTIdIRC__Notify(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdIRC(Instance).Notify);
end;

procedure __DC__SetTIdIRC__Notify(Instance : TObject; Params : PVariantArgList);
begin
TIdIRC(Instance).Notify:=TStringList(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIdIRC__State(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdIRC(Instance).State;
end;

function __DC__GetTIdIRC__Channels(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdIRC(Instance).Channels);
end;

function __DC__GetTIdIRC__Users(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdIRC(Instance).Users);
end;

function __DC__GetTIdIRC__IRCThread(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdIRC(Instance).IRCThread);
end;

function __DC__GetTIdIRCChannel__Name(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdIRCChannel(Instance).Name;
end;

function __DC__GetTIdIRCChannel__Topic(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdIRCChannel(Instance).Topic;
end;

procedure __DC__SetTIdIRCChannel__Topic(Instance : TObject; Params : PVariantArgList);
begin
TIdIRCChannel(Instance).Topic:=OleVariant(Params^[0]);
end;

function __DC__GetTIdIRCChannel__Mode(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TIdIRCChannelModes;
begin
tmp := TIdIRCChannel(Instance).Mode;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTIdIRCChannel__Mode(Instance : TObject; Params : PVariantArgList);
var
  tmp : TIdIRCChannelModes;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TIdIRCChannel(Instance).Mode:=tmp;
end;

function __DC__GetTIdIRCChannel__Limit(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdIRCChannel(Instance).Limit;
end;

procedure __DC__SetTIdIRCChannel__Limit(Instance : TObject; Params : PVariantArgList);
begin
TIdIRCChannel(Instance).Limit:=OleVariant(Params^[0]);
end;

function __DC__GetTIdIRCChannel__Key(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdIRCChannel(Instance).Key;
end;

procedure __DC__SetTIdIRCChannel__Key(Instance : TObject; Params : PVariantArgList);
begin
TIdIRCChannel(Instance).Key:=OleVariant(Params^[0]);
end;

function __DC__GetTIdIRCChannel__ModeChange(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdIRCChannel(Instance).ModeChange;
end;

function __DC__GetTIdIRCChannel__ModeString(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdIRCChannel(Instance).ModeString;
end;

function __DC__GetTIdIRCChannel__Names(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdIRCChannel(Instance).Names);
end;

function __DC__GetTIdIRCChannel__Bans(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdIRCChannel(Instance).Bans);
end;

function __DC__GetTIdIRCChannel__Active(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdIRCChannel(Instance).Active;
end;

procedure __DC__SetTIdIRCChannel__Active(Instance : TObject; Params : PVariantArgList);
begin
TIdIRCChannel(Instance).Active:=OleVariant(Params^[0]);
end;

function __DC__GetTIdIRCChannel__CloseType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdIRCChannel(Instance).CloseType;
end;

procedure __DC__SetTIdIRCChannel__CloseType(Instance : TObject; Params : PVariantArgList);
begin
TIdIRCChannel(Instance).CloseType:=OleVariant(Params^[0]);
end;

function __DC__GetTIdIRCChannel__Data(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdIRCChannel(Instance).Data);
end;

procedure __DC__SetTIdIRCChannel__Data(Instance : TObject; Params : PVariantArgList);
begin
TIdIRCChannel(Instance).Data:=TObject(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIdIRCChannels__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdIRCChannels(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __DC__SetTIdIRCChannels__Items(Instance : TObject; Params : PVariantArgList);
begin
TIdIRCChannels(Instance).Items[OleVariant(Params^[1])]:=TIdIRCChannel(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIdIRCUser__Nick(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdIRCUser(Instance).Nick;
end;

procedure __DC__SetTIdIRCUser__Nick(Instance : TObject; Params : PVariantArgList);
begin
TIdIRCUser(Instance).Nick:=OleVariant(Params^[0]);
end;

function __DC__GetTIdIRCUser__Address(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdIRCUser(Instance).Address;
end;

procedure __DC__SetTIdIRCUser__Address(Instance : TObject; Params : PVariantArgList);
begin
TIdIRCUser(Instance).Address:=OleVariant(Params^[0]);
end;

function __DC__GetTIdIRCUser__Data(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdIRCUser(Instance).Data);
end;

procedure __DC__SetTIdIRCUser__Data(Instance : TObject; Params : PVariantArgList);
begin
TIdIRCUser(Instance).Data:=TObject(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIdIRCUser__Reason(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdIRCUser(Instance).Reason;
end;

procedure __DC__SetTIdIRCUser__Reason(Instance : TObject; Params : PVariantArgList);
begin
TIdIRCUser(Instance).Reason:=OleVariant(Params^[0]);
end;

function __DC__GetTIdIRCUsers__Items(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdIRCUsers(Instance).Items[OleVariant(Params^[0])]);
end;

procedure __DC__SetTIdIRCUsers__Items(Instance : TObject; Params : PVariantArgList);
begin
TIdIRCUsers(Instance).Items[OleVariant(Params^[1])]:=TIdIRCUser(VarToObject(OleVariant(Params^[0])));
end;

procedure __RegisterProps;
begin
RegisterProperty(TIdIRC,'Away',__DC__GetTIdIRC__Away,nil);
RegisterProperty(TIdIRC,'Notify',__DC__GetTIdIRC__Notify,__DC__SetTIdIRC__Notify);
RegisterProperty(TIdIRC,'State',__DC__GetTIdIRC__State,nil);
RegisterProperty(TIdIRC,'Channels',__DC__GetTIdIRC__Channels,nil);
RegisterProperty(TIdIRC,'Users',__DC__GetTIdIRC__Users,nil);
RegisterProperty(TIdIRC,'IRCThread',__DC__GetTIdIRC__IRCThread,nil);
RegisterProperty(TIdIRCChannel,'Name',__DC__GetTIdIRCChannel__Name,nil);
RegisterProperty(TIdIRCChannel,'Topic',__DC__GetTIdIRCChannel__Topic,__DC__SetTIdIRCChannel__Topic);
RegisterProperty(TIdIRCChannel,'Mode',__DC__GetTIdIRCChannel__Mode,__DC__SetTIdIRCChannel__Mode);
RegisterProperty(TIdIRCChannel,'Limit',__DC__GetTIdIRCChannel__Limit,__DC__SetTIdIRCChannel__Limit);
RegisterProperty(TIdIRCChannel,'Key',__DC__GetTIdIRCChannel__Key,__DC__SetTIdIRCChannel__Key);
RegisterProperty(TIdIRCChannel,'ModeChange',__DC__GetTIdIRCChannel__ModeChange,nil);
RegisterProperty(TIdIRCChannel,'ModeString',__DC__GetTIdIRCChannel__ModeString,nil);
RegisterProperty(TIdIRCChannel,'Names',__DC__GetTIdIRCChannel__Names,nil);
RegisterProperty(TIdIRCChannel,'Bans',__DC__GetTIdIRCChannel__Bans,nil);
RegisterProperty(TIdIRCChannel,'Active',__DC__GetTIdIRCChannel__Active,__DC__SetTIdIRCChannel__Active);
RegisterProperty(TIdIRCChannel,'CloseType',__DC__GetTIdIRCChannel__CloseType,__DC__SetTIdIRCChannel__CloseType);
RegisterProperty(TIdIRCChannel,'Data',__DC__GetTIdIRCChannel__Data,__DC__SetTIdIRCChannel__Data);
RegisterIndexedProperty(TIdIRCChannels,'Items',1,False,__DC__GetTIdIRCChannels__Items,__DC__SetTIdIRCChannels__Items);
RegisterProperty(TIdIRCUser,'Nick',__DC__GetTIdIRCUser__Nick,__DC__SetTIdIRCUser__Nick);
RegisterProperty(TIdIRCUser,'Address',__DC__GetTIdIRCUser__Address,__DC__SetTIdIRCUser__Address);
RegisterProperty(TIdIRCUser,'Data',__DC__GetTIdIRCUser__Data,__DC__SetTIdIRCUser__Data);
RegisterProperty(TIdIRCUser,'Reason',__DC__GetTIdIRCUser__Reason,__DC__SetTIdIRCUser__Reason);
RegisterIndexedProperty(TIdIRCUsers,'Items',1,False,__DC__GetTIdIRCUsers__Items,__DC__SetTIdIRCUsers__Items);
end;

const __ConstNames0 : array[0..153] of string = (
'RPL_TRACELINK'
,'RPL_TRACECONNECTING'
,'RPL_TRACEHANDSHAKE'
,'RPL_TRACEUNKNOWN'
,'RPL_TRACEOPERATOR'
,'RPL_TRACEUSER'
,'RPL_TRACESERVER'
,'RPL_TRACENEWTYPE'
,'RPL_STATSLINKINFO'
,'RPL_STATSCOMMANDS'
,'RPL_STATSCLINE'
,'RPL_STATSNLINE'
,'RPL_STATSILINE'
,'RPL_STATSKLINE'
,'RPL_STATSYLINE'
,'RPL_ENDOFSTATS'
,'RPL_UMODEIS'
,'RPL_STATSLLINE'
,'RPL_STATSUPTIME'
,'RPL_STATSOLINE'
,'RPL_STATSHLINE'
,'RPL_LUSERCLIENT'
,'RPL_LUSEROP'
,'RPL_LUSERUNKNOWN'
,'RPL_LUSERCHANNELS'
,'RPL_LUSERME'
,'RPL_ADMINME'
,'RPL_ADMINLOC1'
,'RPL_ADMINLOC2'
,'RPL_ADMINEMAIL'
,'RPL_TRACELOG'
,'RPL_NONE'
,'RPL_AWAY'
,'RPL_USERHOST'
,'RPL_ISON'
,'RPL_UNAWAY'
,'RPL_NOWAWAY'
,'RPL_WHOISUSER'
,'RPL_WHOISSERVER'
,'RPL_WHOISOPERATOR'
,'RPL_WHOWASUSER'
,'RPL_ENDOFWHO'
,'RPL_WHOISIDLE'
,'RPL_ENDOFWHOIS'
,'RPL_WHOISCHANNELS'
,'RPL_LISTSTART'
,'RPL_LIST'
,'RPL_LISTEND'
,'RPL_CHANNELMODEIS'
,'RPL_NOTOPIC'
,'RPL_TOPIC'
,'RPL_INVITING'
,'RPL_SUMMONING'
,'RPL_VERSION'
,'RPL_WHOREPLY'
,'RPL_NAMREPLY'
,'RPL_LINKS'
,'RPL_ENDOFLINKS'
,'RPL_ENDOFNAMES'
,'RPL_BANLIST'
,'RPL_ENDOFBANLIST'
,'RPL_ENDOFWHOWAS'
,'RPL_INFO'
,'RPL_MOTD'
,'RPL_ENDOFINFO'
,'RPL_MOTDSTART'
,'RPL_ENDOFMOTD'
,'RPL_YOUREOPER'
,'RPL_REHASHING'
,'RPL_TIME'
,'RPL_USERSSTART'
,'RPL_USERS'
,'RPL_ENDOFUSERS'
,'RPL_NOUSERS'
,'ERR_NOSUCHNICK'
,'ERR_NOSUCHSERVER'
,'ERR_NOSUCHCHANNEL'
,'ERR_CANNOTSENDTOCHAN'
,'ERR_TOOMANYCHANNELS'
,'ERR_WASNOSUCHNICK'
,'ERR_TOOMANYTARGETS'
,'ERR_NOORIGIN'
,'ERR_NORECIPIENT'
,'ERR_NOTEXTTOSEND'
,'ERR_NOTOPLEVEL'
,'ERR_WILDTOPLEVEL'
,'ERR_UNKNOWNCOMMAND'
,'ERR_NOMOTD'
,'ERR_NOADMININFO'
,'ERR_FILEERROR'
,'ERR_NONICKNAMEGIVEN'
,'ERR_ERRONEUSNICKNAME'
,'ERR_NICKNAMEINUSE'
,'ERR_NICKCOLLISION'
,'ERR_USERNOTINCHANNEL'
,'ERR_NOTONCHANNEL'
,'ERR_USERONCHANNEL'
,'ERR_NOLOGIN'
,'ERR_SUMMONDISABLED'
,'ERR_USERSDISABLED'
,'ERR_NOTREGISTERED'
,'ERR_NEEDMOREPARAMS'
,'ERR_ALREADYREGISTRED'
,'ERR_NOPERMFORHOST'
,'ERR_PASSWDMISMATCH'
,'ERR_YOUREBANNEDCREEP'
,'ERR_KEYSET'
,'ERR_CHANNELISFULL'
,'ERR_UNKNOWNMODE'
,'ERR_INVITEONLYCHAN'
,'ERR_BANNEDFROMCHAN'
,'ERR_BADCHANNELKEY'
,'ERR_NOPRIVILEGES'
,'ERR_CHANOPRIVSNEEDED'
,'ERR_CANTKILLSERVER'
,'ERR_NOOPERHOST'
,'ERR_UMODEUNKNOWNFLAG'
,'ERR_USERSDONTMATCH'
,'ctNone'
,'ctAdd'
,'ctSubtract'
,'cmPrivate'
,'cmSecret'
,'cmInviteOnly'
,'cmOpsSetTopic'
,'cmNoExternalMessages'
,'cmModerated'
,'cmUserLimit'
,'cmKey'
,'ctReset'
,'ctPart'
,'ctKick'
,'cuMode'
,'cuTopic'
,'cuUser'
,'cuNames'
,'cuNick'
,'cuJoin'
,'cuPart'
,'cuKick'
,'cuQuit'
,'umInvisible'
,'umOperator'
,'umServerNotices'
,'umWallops'
,'csDisconnect'
,'csDisconnected'
,'csConnecting'
,'csLoggingOn'
,'csConnected'
,'utTopic'
,'utMode'
,'utNicks'
,'IdIrcMinTokenCount'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,RPL_TRACELINK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,RPL_TRACECONNECTING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,RPL_TRACEHANDSHAKE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,RPL_TRACEUNKNOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,RPL_TRACEOPERATOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,RPL_TRACEUSER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,RPL_TRACESERVER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,RPL_TRACENEWTYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,RPL_STATSLINKINFO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,RPL_STATSCOMMANDS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,RPL_STATSCLINE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,RPL_STATSNLINE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,RPL_STATSILINE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,RPL_STATSKLINE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,RPL_STATSYLINE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,RPL_ENDOFSTATS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,RPL_UMODEIS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,RPL_STATSLLINE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,RPL_STATSUPTIME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,RPL_STATSOLINE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,RPL_STATSHLINE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,RPL_LUSERCLIENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,RPL_LUSEROP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,RPL_LUSERUNKNOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,RPL_LUSERCHANNELS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,RPL_LUSERME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,RPL_ADMINME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,RPL_ADMINLOC1));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,RPL_ADMINLOC2));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,RPL_ADMINEMAIL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,RPL_TRACELOG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,RPL_NONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,RPL_AWAY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,RPL_USERHOST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,RPL_ISON));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,RPL_UNAWAY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,RPL_NOWAWAY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,RPL_WHOISUSER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,RPL_WHOISSERVER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,RPL_WHOISOPERATOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,RPL_WHOWASUSER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,RPL_ENDOFWHO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,RPL_WHOISIDLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,RPL_ENDOFWHOIS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,RPL_WHOISCHANNELS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,RPL_LISTSTART));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,RPL_LIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,RPL_LISTEND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,RPL_CHANNELMODEIS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,RPL_NOTOPIC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,RPL_TOPIC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,RPL_INVITING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,RPL_SUMMONING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,RPL_VERSION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,RPL_WHOREPLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,RPL_NAMREPLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,RPL_LINKS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,RPL_ENDOFLINKS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,RPL_ENDOFNAMES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,RPL_BANLIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,RPL_ENDOFBANLIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,RPL_ENDOFWHOWAS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,RPL_INFO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,RPL_MOTD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,RPL_ENDOFINFO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[65] ,RPL_MOTDSTART));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[66] ,RPL_ENDOFMOTD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[67] ,RPL_YOUREOPER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[68] ,RPL_REHASHING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[69] ,RPL_TIME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[70] ,RPL_USERSSTART));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[71] ,RPL_USERS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[72] ,RPL_ENDOFUSERS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[73] ,RPL_NOUSERS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[74] ,ERR_NOSUCHNICK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[75] ,ERR_NOSUCHSERVER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[76] ,ERR_NOSUCHCHANNEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[77] ,ERR_CANNOTSENDTOCHAN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[78] ,ERR_TOOMANYCHANNELS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[79] ,ERR_WASNOSUCHNICK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[80] ,ERR_TOOMANYTARGETS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[81] ,ERR_NOORIGIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[82] ,ERR_NORECIPIENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[83] ,ERR_NOTEXTTOSEND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[84] ,ERR_NOTOPLEVEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[85] ,ERR_WILDTOPLEVEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[86] ,ERR_UNKNOWNCOMMAND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[87] ,ERR_NOMOTD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[88] ,ERR_NOADMININFO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[89] ,ERR_FILEERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[90] ,ERR_NONICKNAMEGIVEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[91] ,ERR_ERRONEUSNICKNAME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[92] ,ERR_NICKNAMEINUSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[93] ,ERR_NICKCOLLISION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[94] ,ERR_USERNOTINCHANNEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[95] ,ERR_NOTONCHANNEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[96] ,ERR_USERONCHANNEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[97] ,ERR_NOLOGIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[98] ,ERR_SUMMONDISABLED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[99] ,ERR_USERSDISABLED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[100] ,ERR_NOTREGISTERED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[101] ,ERR_NEEDMOREPARAMS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[102] ,ERR_ALREADYREGISTRED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[103] ,ERR_NOPERMFORHOST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[104] ,ERR_PASSWDMISMATCH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[105] ,ERR_YOUREBANNEDCREEP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[106] ,ERR_KEYSET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[107] ,ERR_CHANNELISFULL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[108] ,ERR_UNKNOWNMODE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[109] ,ERR_INVITEONLYCHAN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[110] ,ERR_BANNEDFROMCHAN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[111] ,ERR_BADCHANNELKEY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[112] ,ERR_NOPRIVILEGES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[113] ,ERR_CHANOPRIVSNEEDED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[114] ,ERR_CANTKILLSERVER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[115] ,ERR_NOOPERHOST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[116] ,ERR_UMODEUNKNOWNFLAG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[117] ,ERR_USERSDONTMATCH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[118] ,ctNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[119] ,ctAdd));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[120] ,ctSubtract));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[121] ,cmPrivate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[122] ,cmSecret));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[123] ,cmInviteOnly));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[124] ,cmOpsSetTopic));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[125] ,cmNoExternalMessages));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[126] ,cmModerated));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[127] ,cmUserLimit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[128] ,cmKey));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[129] ,ctReset));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[130] ,ctPart));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[131] ,ctKick));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[132] ,cuMode));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[133] ,cuTopic));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[134] ,cuUser));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[135] ,cuNames));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[136] ,cuNick));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[137] ,cuJoin));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[138] ,cuPart));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[139] ,cuKick));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[140] ,cuQuit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[141] ,umInvisible));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[142] ,umOperator));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[143] ,umServerNotices));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[144] ,umWallops));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[145] ,csDisconnect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[146] ,csDisconnected));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[147] ,csConnecting));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[148] ,csLoggingOn));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[149] ,csConnected));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[150] ,utTopic));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[151] ,utMode));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[152] ,utNicks));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[153] ,IdIrcMinTokenCount));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..6] of TClass = (
TIdIRC,
TIdIRCChannel,
TIdIRCChannels,
TIdIRCReadThread,
TIdIRCReplies,
TIdIRCUser,
TIdIRCUsers
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegRegisterMethod(TIdIRC,'Disconnect',TypeInfo(_T0),[
TypeInfo(Boolean)],Addr(TIdIRC.Disconnect));

RegRegisterMethod(TIdIRC,'IsChannel',TypeInfo(_T1),[
TypeInfo(String),TypeInfo(Boolean)],Addr(TIdIRC.IsChannel));

RegRegisterMethod(TIdIRC,'IsOp',TypeInfo(_T2),[
TypeInfo(String),TypeInfo(Boolean)],Addr(TIdIRC.IsOp));

RegRegisterMethod(TIdIRC,'IsVoice',TypeInfo(_T3),[
TypeInfo(String),TypeInfo(Boolean)],Addr(TIdIRC.IsVoice));

RegRegisterMethod(TIdIRC,'Raw',TypeInfo(_T5),[
TypeInfo(String)],Addr(TIdIRC.Raw));

RegRegisterMethod(TIdIRC,'Say',TypeInfo(_T6),[
TypeInfo(String),
TypeInfo(String)],Addr(TIdIRC.Say));

RegRegisterMethod(TIdIRC,'Notice',TypeInfo(_T7),[
TypeInfo(String),
TypeInfo(String)],Addr(TIdIRC.Notice));

RegRegisterMethod(TIdIRC,'Action',TypeInfo(_T8),[
TypeInfo(String),
TypeInfo(String)],Addr(TIdIRC.Action));

RegRegisterMethod(TIdIRC,'CTCPQuery',TypeInfo(_T9),[
TypeInfo(String),
TypeInfo(String),
TypeInfo(String)],Addr(TIdIRC.CTCPQuery));

RegRegisterMethod(TIdIRC,'CTCPReply',TypeInfo(_T10),[
TypeInfo(String),
TypeInfo(String),
TypeInfo(String)],Addr(TIdIRC.CTCPReply));

RegisterProc(TIdIRC,'Join',mtScriptMethod,TypeInfo(_T11),[
TypeInfo(String),
TypeInfo(String)],Addr(__TIdIRC__Join__Wrapper),cRegister);

RegisterProc(TIdIRC,'Part',mtScriptMethod,TypeInfo(_T12),[
TypeInfo(String),
TypeInfo(String)],Addr(__TIdIRC__Part__Wrapper),cRegister);

RegRegisterMethod(TIdIRC,'Kick',TypeInfo(_T13),[
TypeInfo(String),
TypeInfo(String),
TypeInfo(String)],Addr(TIdIRC.Kick));

RegRegisterMethod(TIdIRC,'Quit',TypeInfo(_T14),[
TypeInfo(String)],Addr(TIdIRC.Quit));

RegisterProc(TIdIRC,'Mode',mtScriptMethod,TypeInfo(_T15),[
TypeInfo(String),
TypeInfo(String),
TypeInfo(String)],Addr(__TIdIRC__Mode__Wrapper),cRegister);

RegRegisterMethod(TIdIRC,'GetTopic',TypeInfo(_T16),[
TypeInfo(String)],Addr(TIdIRC.GetTopic));

RegRegisterMethod(TIdIRC,'SetTopic',TypeInfo(_T17),[
TypeInfo(String),
TypeInfo(String)],Addr(TIdIRC.SetTopic));

RegRegisterMethod(TIdIRC,'SetAwayMessage',TypeInfo(_T18),[
TypeInfo(String)],Addr(TIdIRC.SetAwayMessage));

RegRegisterMethod(TIdIRC,'ClearAwayMessage',TypeInfo(_T19),NoParams,Addr(TIdIRC.ClearAwayMessage));

RegRegisterMethod(TIdIRC,'GetModeString',TypeInfo(_T20),[TypeInfo(String)],Addr(TIdIRC.GetModeString));

RegisterProc(TIdIRCChannel,'Create',mtConstructor,TypeInfo(_T21),[
TypeInfo(TIdIRC),
TypeInfo(String)],Addr(TIdIRCChannel.Create),cRegister);

RegRegisterMethod(TIdIRCChannel,'Say',TypeInfo(_T22),[
TypeInfo(String)],Addr(TIdIRCChannel.Say));

RegRegisterMethod(TIdIRCChannel,'Part',TypeInfo(_T23),[
TypeInfo(String)],Addr(TIdIRCChannel.Part));

RegRegisterMethod(TIdIRCChannel,'Kick',TypeInfo(_T24),[
TypeInfo(String),
TypeInfo(String)],Addr(TIdIRCChannel.Kick));

RegRegisterMethod(TIdIRCChannel,'BeginMode',TypeInfo(_T25),NoParams,Addr(TIdIRCChannel.BeginMode));

RegRegisterMethod(TIdIRCChannel,'EndMode',TypeInfo(_T26),NoParams,Addr(TIdIRCChannel.EndMode));

RegRegisterMethod(TIdIRCChannel,'Op',TypeInfo(_T27),[
TypeInfo(String)],Addr(TIdIRCChannel.Op));

RegRegisterMethod(TIdIRCChannel,'Deop',TypeInfo(_T28),[
TypeInfo(String)],Addr(TIdIRCChannel.Deop));

RegRegisterMethod(TIdIRCChannel,'Voice',TypeInfo(_T29),[
TypeInfo(String)],Addr(TIdIRCChannel.Voice));

RegRegisterMethod(TIdIRCChannel,'Devoice',TypeInfo(_T30),[
TypeInfo(String)],Addr(TIdIRCChannel.Devoice));

RegRegisterMethod(TIdIRCChannel,'Ban',TypeInfo(_T31),[
TypeInfo(String)],Addr(TIdIRCChannel.Ban));

RegRegisterMethod(TIdIRCChannel,'Unban',TypeInfo(_T32),[
TypeInfo(String)],Addr(TIdIRCChannel.Unban));

RegRegisterMethod(TIdIRCChannel,'TopicChanged',TypeInfo(_T33),[
TypeInfo(String)],Addr(TIdIRCChannel.TopicChanged));

RegRegisterMethod(TIdIRCChannel,'ModeChanged',TypeInfo(_T34),[
TypeInfo(TIdIRCChannelModes)],Addr(TIdIRCChannel.ModeChanged));

RegRegisterMethod(TIdIRCChannel,'LimitChanged',TypeInfo(_T35),[
TypeInfo(Integer)],Addr(TIdIRCChannel.LimitChanged));

RegRegisterMethod(TIdIRCChannel,'KeyChanged',TypeInfo(_T36),[
TypeInfo(String)],Addr(TIdIRCChannel.KeyChanged));

RegRegisterMethod(TIdIRCChannel,'AddUser',TypeInfo(_T37),[
TypeInfo(String),
TypeInfo(String),TypeInfo(TIdIRCUser)],Addr(TIdIRCChannel.AddUser));

RegRegisterMethod(TIdIRCChannel,'RemoveUser',TypeInfo(_T38),[
TypeInfo(TIdIRCUser)],Addr(TIdIRCChannel.RemoveUser));

RegRegisterMethod(TIdIRCChannel,'HasUser',TypeInfo(_T39),[
TypeInfo(String),TypeInfo(Boolean)],Addr(TIdIRCChannel.HasUser));

RegRegisterMethod(TIdIRCChannel,'Find',TypeInfo(_T40),[
TypeInfo(String),
TypeInfo(Integer),TypeInfo(Boolean)],Addr(TIdIRCChannel.Find));

RegRegisterMethod(TIdIRCChannel,'GotOp',TypeInfo(_T41),[
TypeInfo(TIdIRCUser)],Addr(TIdIRCChannel.GotOp));

RegRegisterMethod(TIdIRCChannel,'GotDeop',TypeInfo(_T42),[
TypeInfo(TIdIRCUser)],Addr(TIdIRCChannel.GotDeop));

RegRegisterMethod(TIdIRCChannel,'GotVoice',TypeInfo(_T43),[
TypeInfo(TIdIRCUser)],Addr(TIdIRCChannel.GotVoice));

RegRegisterMethod(TIdIRCChannel,'GotDevoice',TypeInfo(_T44),[
TypeInfo(TIdIRCUser)],Addr(TIdIRCChannel.GotDevoice));

RegRegisterMethod(TIdIRCChannel,'ChangedNick',TypeInfo(_T45),[
TypeInfo(TIdIRCUser),
TypeInfo(String)],Addr(TIdIRCChannel.ChangedNick));

RegRegisterMethod(TIdIRCChannel,'Joined',TypeInfo(_T46),[
TypeInfo(TIdIRCUser)],Addr(TIdIRCChannel.Joined));

RegRegisterMethod(TIdIRCChannel,'Parted',TypeInfo(_T47),[
TypeInfo(TIdIRCUser)],Addr(TIdIRCChannel.Parted));

RegRegisterMethod(TIdIRCChannel,'Kicked',TypeInfo(_T48),[
TypeInfo(TIdIRCUser)],Addr(TIdIRCChannel.Kicked));

RegRegisterMethod(TIdIRCChannel,'Quit',TypeInfo(_T49),[
TypeInfo(TIdIRCUser)],Addr(TIdIRCChannel.Quit));

RegisterProc(TIdIRCChannels,'Create',mtConstructor,TypeInfo(_T50),[
TypeInfo(TIdIRC)],Addr(TIdIRCChannels.Create),cRegister);

RegRegisterMethod(TIdIRCChannels,'Add',TypeInfo(_T51),[
TypeInfo(String),TypeInfo(TIdIRCChannel)],Addr(TIdIRCChannels.Add));

RegRegisterMethod(TIdIRCChannels,'Remove',TypeInfo(_T52),[
TypeInfo(String)],Addr(TIdIRCChannels.Remove));

RegRegisterMethod(TIdIRCChannels,'Find',TypeInfo(_T53),[
TypeInfo(String),
TypeInfo(Integer),TypeInfo(Boolean)],Addr(TIdIRCChannels.Find));

RegRegisterMethod(TIdIRCChannels,'Get',TypeInfo(_T54),[
TypeInfo(String),TypeInfo(TIdIRCChannel)],Addr(TIdIRCChannels.Get));

RegRegisterMethod(TIdIRCChannels,'ChangedNick',TypeInfo(_T55),[
TypeInfo(TIdIRCUser),
TypeInfo(String)],Addr(TIdIRCChannels.ChangedNick));

RegRegisterMethod(TIdIRCChannels,'Quit',TypeInfo(_T56),[
TypeInfo(TIdIRCUser)],Addr(TIdIRCChannels.Quit));

//RegRegisterMethod(TIdIRCChannels,'Sort',TypeInfo(_T57),NoParams, pointer(40));
RegRegisterMethod(TIdIRCChannels,'Sort',TypeInfo(_T57),NoParams,  getVMTProcAddr('TIdIRCChannels','Sort',40));


RegisterProc(TIdIRCReadThread,'Create',mtConstructor,TypeInfo(_T58),[
TypeInfo(TIdIRC)],Addr(TIdIRCReadThread.Create),cRegister);

RegisterProc(TIdIRCReplies,'Create',mtConstructor,TypeInfo(_T59),NoParams,Addr(TIdIRCReplies.Create),cRegister);

RegisterProc(TIdIRCUser,'Create',mtConstructor,TypeInfo(_T60),[
TypeInfo(TIdIRC),
TypeInfo(String),
TypeInfo(String)],Addr(TIdIRCUser.Create),cRegister);

RegRegisterMethod(TIdIRCUser,'Say',TypeInfo(_T61),[
TypeInfo(String)],Addr(TIdIRCUser.Say));

RegisterProc(TIdIRCUsers,'Create',mtConstructor,TypeInfo(_T62),[
TypeInfo(TIdIRC)],Addr(TIdIRCUsers.Create),cRegister);

RegRegisterMethod(TIdIRCUsers,'Add',TypeInfo(_T63),[
TypeInfo(String),
TypeInfo(String),TypeInfo(TIdIRCUser)],Addr(TIdIRCUsers.Add));

RegRegisterMethod(TIdIRCUsers,'Remove',TypeInfo(_T64),[
TypeInfo(TIdIRCUser)],Addr(TIdIRCUsers.Remove));

RegRegisterMethod(TIdIRCUsers,'Address',TypeInfo(_T65),[
TypeInfo(String),TypeInfo(String)],Addr(TIdIRCUsers.Address));

RegRegisterMethod(TIdIRCUsers,'Find',TypeInfo(_T66),[
TypeInfo(String),
TypeInfo(Integer),TypeInfo(Boolean)],Addr(TIdIRCUsers.Find));

RegRegisterMethod(TIdIRCUsers,'Get',TypeInfo(_T67),[
TypeInfo(String),TypeInfo(TIdIRCUser)],Addr(TIdIRCUsers.Get));

RegRegisterMethod(TIdIRCUsers,'Nick',TypeInfo(_T68),[
TypeInfo(String),
TypeInfo(String)],Addr(TIdIRCUsers.Nick));

RegRegisterMethod(TIdIRCUsers,'Sort',TypeInfo(_T69),NoParams,Addr(TIdIRCUsers.Sort));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
{RegRegisterMethod(TIdIRC,'MatchHostmask',TypeInfo(_T4),[
TypeInfoPChar,
TypeInfoPChar,TypeInfo(Boolean)],Addr(TIdIRC.MatchHostmask))}

RegisterEvent(TypeInfo(TIdIRCOnAway),[
TypeInfo(TObject),
TypeInfo(TIdIRCUser)]);

RegisterEvent(TypeInfo(TIdIRCOnAwayChange),[
TypeInfo(TObject),
TypeInfo(String)]);

RegisterEvent(TypeInfo(TIdIRCOnBan),[
TypeInfo(TObject),
TypeInfo(TIdIRCUser),
TypeInfo(TIdIRCChannel),
TypeInfo(String)]);

RegisterEvent(TypeInfo(TIdIRCOnChannelMode),[
TypeInfo(TObject),
TypeInfo(TIdIRCUser),
TypeInfo(TIdIRCChannel),
TypeInfo(String),
TypeInfo(String)]);

RegisterEvent(TypeInfo(TIdIRCOnChannelModeChanged),[
TypeInfo(TObject),
TypeInfo(TIdIRCUser),
TypeInfo(TIdIRCChannel)]);

RegisterEvent(TypeInfo(TIdIRCOnChannelUpdate),[
TypeInfo(TObject),
TypeInfo(TIdIRCChannelUpdateType),
TypeInfo(TIdIRCUser),
TypeInfo(Integer)]);

RegisterEvent(TypeInfo(TIdIRCOnCTCPQuery),[
TypeInfo(TObject),
TypeInfo(TIdIRCUser),
TypeInfo(TIdIRCChannel),
TypeInfo(String),
TypeInfo(String),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TIdIRCOnCTCPReply),[
TypeInfo(TObject),
TypeInfo(TIdIRCUser),
TypeInfo(TIdIRCChannel),
TypeInfo(String),
TypeInfo(String)]);

RegisterEvent(TypeInfo(TIdIRCOnDCCAccept),[
TypeInfo(TObject),
TypeInfo(String),
TypeInfo(String),
TypeInfo(String),
TypeInfo(String)]);

RegisterEvent(TypeInfo(TIdIRCOnDCCChat),[
TypeInfo(TObject),
TypeInfo(String),
TypeInfo(String),
TypeInfo(String)]);

RegisterEvent(TypeInfo(TIdIRCOnDCCResume),[
TypeInfo(TObject),
TypeInfo(String),
TypeInfo(String),
TypeInfo(String),
TypeInfo(String)]);

RegisterEvent(TypeInfo(TIdIRCOnDCCSend),[
TypeInfo(TObject),
TypeInfo(String),
TypeInfo(String),
TypeInfo(String),
TypeInfo(String),
TypeInfo(String)]);

RegisterEvent(TypeInfo(TIdIRCOnError),[
TypeInfo(TObject),
TypeInfo(TIdIRCUser),
TypeInfo(String),
TypeInfo(String)]);

RegisterEvent(TypeInfo(TIdIRCOnInvite),[
TypeInfo(TObject),
TypeInfo(TIdIRCUser),
TypeInfo(String)]);

RegisterEvent(TypeInfo(TIdIRCOnInviting),[
TypeInfo(TObject),
TypeInfo(String),
TypeInfo(String)]);

RegisterEvent(TypeInfo(TIdIRCOnJoin),[
TypeInfo(TObject),
TypeInfo(TIdIRCUser),
TypeInfo(TIdIRCChannel)]);

RegisterEvent(TypeInfo(TIdIRCOnJoined),[
TypeInfo(TObject),
TypeInfo(TIdIRCChannel)]);

RegisterEvent(TypeInfo(TIdIRCOnKick),[
TypeInfo(TObject),
TypeInfo(TIdIRCUser),
TypeInfo(TIdIRCUser),
TypeInfo(TIdIRCChannel)]);

RegisterEvent(TypeInfo(TIdIRCOnKicked),[
TypeInfo(TObject),
TypeInfo(TIdIRCUser),
TypeInfo(TIdIRCChannel)]);

RegisterEvent(TypeInfo(TIdIRCOnKill),[
TypeInfo(TObject),
TypeInfo(TIdIRCUser),
TypeInfo(String),
TypeInfo(String)]);

RegisterEvent(TypeInfo(TIdIRCOnLinks),[
TypeInfo(TObject),
TypeInfo(String),
TypeInfo(String),
TypeInfo(String),
TypeInfo(String)]);

RegisterEvent(TypeInfo(TIdIRCOnList),[
TypeInfo(TObject),
TypeInfo(TStringList),
TypeInfo(Integer),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TIdIRCOnMessage),[
TypeInfo(TObject),
TypeInfo(TIdIRCUser),
TypeInfo(TIdIRCChannel),
TypeInfo(String)]);

RegisterEvent(TypeInfo(TIdIRCOnNames),[
TypeInfo(TObject),
TypeInfo(TIdIRCUsers),
TypeInfo(TIdIRCChannel)]);

RegisterEvent(TypeInfo(TIdIRCOnNickChange),[
TypeInfo(TObject),
TypeInfo(TIdIRCUser),
TypeInfo(String)]);

RegisterEvent(TypeInfo(TIdIRCOnNickChanged),[
TypeInfo(TObject),
TypeInfo(String)]);

RegisterEvent(TypeInfo(TIdIRCOnNicksInUse),[
TypeInfo(TObject),
TypeInfo(String)]);

RegisterEvent(TypeInfo(TIdIRCOnNoTopic),[
TypeInfo(TObject),
TypeInfo(TIdIRCChannel),
TypeInfo(String)]);

RegisterEvent(TypeInfo(TIdIRCOnOp),[
TypeInfo(TObject),
TypeInfo(TIdIRCUser),
TypeInfo(TIdIRCChannel),
TypeInfo(TIdIRCUser)]);

RegisterEvent(TypeInfo(TIdIRCOnPart),[
TypeInfo(TObject),
TypeInfo(TIdIRCUser),
TypeInfo(TIdIRCChannel)]);

RegisterEvent(TypeInfo(TIdIRCOnParted),[
TypeInfo(TObject),
TypeInfo(TIdIRCChannel)]);

RegisterEvent(TypeInfo(TIdIRCOnQuit),[
TypeInfo(TObject),
TypeInfo(TIdIRCUser)]);

RegisterEvent(TypeInfo(TIdIRCOnRaw),[
TypeInfo(TObject),
TypeInfo(TIdIRCUser),
TypeInfo(String),
TypeInfo(String),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TIdIRCOnSend),[
TypeInfo(TObject),
TypeInfo(String)]);

RegisterEvent(TypeInfo(TIdIRCOnSocketError),[
TypeInfo(TObject),
TypeInfo(String),
TypeInfo(String)]);

RegisterEvent(TypeInfo(TIdIRCOnSystem),[
TypeInfo(TObject),
TypeInfo(TIdIRCUser),
TypeInfo(Integer),
TypeInfo(String),
TypeInfo(String)]);

RegisterEvent(TypeInfo(TIdIRCOnTopic),[
TypeInfo(TObject),
TypeInfo(TIdIRCUser),
TypeInfo(TIdIRCChannel),
TypeInfo(String),
TypeInfo(String)]);

RegisterEvent(TypeInfo(TIdIRCOnUnknownCommand),[
TypeInfo(TObject),
TypeInfo(TIdIRCUser),
TypeInfo(String),
TypeInfo(String)]);

RegisterEvent(TypeInfo(TIdIRCOnUserMode),[
TypeInfo(TObject),
TypeInfo(String)]);

RegisterEvent(TypeInfo(TIdIRCOnWallops),[
TypeInfo(TObject),
TypeInfo(TIdIRCUser),
TypeInfo(String)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
