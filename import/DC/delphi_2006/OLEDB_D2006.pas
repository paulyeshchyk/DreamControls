{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit OLEDB_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  ActiveX,
  OleDB;
function ConvertBOIDToVariant(var R : BOID) : OleVariant;
function ConvertVariantToBOID(const V : OleVariant) : BOID;
function ConvertDB_NUMERICToVariant(var R : DB_NUMERIC) : OleVariant;
function ConvertVariantToDB_NUMERIC(const V : OleVariant) : DB_NUMERIC;
function ConvertDB_VARNUMERICToVariant(var R : DB_VARNUMERIC) : OleVariant;
function ConvertVariantToDB_VARNUMERIC(const V : OleVariant) : DB_VARNUMERIC;
function ConvertDBBINDEXTToVariant(var R : DBBINDEXT) : OleVariant;
function ConvertVariantToDBBINDEXT(const V : OleVariant) : DBBINDEXT;
function ConvertDBBINDINGToVariant(var R : DBBINDING) : OleVariant;
function ConvertVariantToDBBINDING(const V : OleVariant) : DBBINDING;
function ConvertDBCOLUMNDESCToVariant(var R : DBCOLUMNDESC) : OleVariant;
function ConvertVariantToDBCOLUMNDESC(const V : OleVariant) : DBCOLUMNDESC;
function ConvertDBCOLUMNINFOToVariant(var R : DBCOLUMNINFO) : OleVariant;
function ConvertVariantToDBCOLUMNINFO(const V : OleVariant) : DBCOLUMNINFO;
function ConvertDBDATEToVariant(var R : DBDATE) : OleVariant;
function ConvertVariantToDBDATE(const V : OleVariant) : DBDATE;
function ConvertDBFAILUREINFOToVariant(var R : DBFAILUREINFO) : OleVariant;
function ConvertVariantToDBFAILUREINFO(const V : OleVariant) : DBFAILUREINFO;
function ConvertDBFILETIMEToVariant(var R : DBFILETIME) : OleVariant;
function ConvertVariantToDBFILETIME(const V : OleVariant) : DBFILETIME;
function ConvertDBIDToVariant(var R : DBID) : OleVariant;
function ConvertVariantToDBID(const V : OleVariant) : DBID;
function ConvertDBIDGUIDToVariant(var R : DBIDGUID) : OleVariant;
function ConvertVariantToDBIDGUID(const V : OleVariant) : DBIDGUID;
function ConvertDBIDNAMEToVariant(var R : DBIDNAME) : OleVariant;
function ConvertVariantToDBIDNAME(const V : OleVariant) : DBIDNAME;
function ConvertDBINDEXCOLUMNDESCToVariant(var R : DBINDEXCOLUMNDESC) : OleVariant;
function ConvertVariantToDBINDEXCOLUMNDESC(const V : OleVariant) : DBINDEXCOLUMNDESC;
function ConvertDBLITERALINFOToVariant(var R : DBLITERALINFO) : OleVariant;
function ConvertVariantToDBLITERALINFO(const V : OleVariant) : DBLITERALINFO;
function ConvertDBOBJECTToVariant(var R : DBOBJECT) : OleVariant;
function ConvertVariantToDBOBJECT(const V : OleVariant) : DBOBJECT;
function ConvertDBPARAMBINDINFOToVariant(var R : DBPARAMBINDINFO) : OleVariant;
function ConvertVariantToDBPARAMBINDINFO(const V : OleVariant) : DBPARAMBINDINFO;
function ConvertDBPARAMINFOToVariant(var R : DBPARAMINFO) : OleVariant;
function ConvertVariantToDBPARAMINFO(const V : OleVariant) : DBPARAMINFO;
function ConvertDBPARAMSToVariant(var R : DBPARAMS) : OleVariant;
function ConvertVariantToDBPARAMS(const V : OleVariant) : DBPARAMS;
function ConvertDBPROPToVariant(var R : DBPROP) : OleVariant;
function ConvertVariantToDBPROP(const V : OleVariant) : DBPROP;
function ConvertDBPROPIDSETToVariant(var R : DBPROPIDSET) : OleVariant;
function ConvertVariantToDBPROPIDSET(const V : OleVariant) : DBPROPIDSET;
function ConvertDBPROPINFOToVariant(var R : DBPROPINFO) : OleVariant;
function ConvertVariantToDBPROPINFO(const V : OleVariant) : DBPROPINFO;
function ConvertDBPROPINFOSETToVariant(var R : DBPROPINFOSET) : OleVariant;
function ConvertVariantToDBPROPINFOSET(const V : OleVariant) : DBPROPINFOSET;
function ConvertDBPROPSETToVariant(var R : DBPROPSET) : OleVariant;
function ConvertVariantToDBPROPSET(const V : OleVariant) : DBPROPSET;
function ConvertDBTIMEToVariant(var R : DBTIME) : OleVariant;
function ConvertVariantToDBTIME(const V : OleVariant) : DBTIME;
function ConvertDBTIMESTAMPToVariant(var R : DBTIMESTAMP) : OleVariant;
function ConvertVariantToDBTIMESTAMP(const V : OleVariant) : DBTIMESTAMP;
function ConvertDBVECTORToVariant(var R : DBVECTOR) : OleVariant;
function ConvertVariantToDBVECTOR(const V : OleVariant) : DBVECTOR;
function ConvertERRORINFOToVariant(var R : ERRORINFO) : OleVariant;
function ConvertVariantToERRORINFO(const V : OleVariant) : ERRORINFO;
function ConvertEXPLICIT_ACCESS_WToVariant(var R : EXPLICIT_ACCESS_W) : OleVariant;
function ConvertVariantToEXPLICIT_ACCESS_W(const V : OleVariant) : EXPLICIT_ACCESS_W;
function ConvertMDAXISINFOToVariant(var R : MDAXISINFO) : OleVariant;
function ConvertVariantToMDAXISINFO(const V : OleVariant) : MDAXISINFO;
function ConvertSEC_OBJECTToVariant(var R : SEC_OBJECT) : OleVariant;
function ConvertVariantToSEC_OBJECT(const V : OleVariant) : SEC_OBJECT;
function ConvertSEC_OBJECT_ELEMENTToVariant(var R : SEC_OBJECT_ELEMENT) : OleVariant;
function ConvertVariantToSEC_OBJECT_ELEMENT(const V : OleVariant) : SEC_OBJECT_ELEMENT;
function ConvertTBoidToVariant(var R : TBoid) : OleVariant;
function ConvertVariantToTBoid(const V : OleVariant) : TBoid;
function ConvertTDBBindExtToVariant(var R : TDBBindExt) : OleVariant;
function ConvertVariantToTDBBindExt(const V : OleVariant) : TDBBindExt;
function ConvertTDBBindingToVariant(var R : TDBBinding) : OleVariant;
function ConvertVariantToTDBBinding(const V : OleVariant) : TDBBinding;
function ConvertTDBColumnDescToVariant(var R : TDBColumnDesc) : OleVariant;
function ConvertVariantToTDBColumnDesc(const V : OleVariant) : TDBColumnDesc;
function ConvertTDBColumnInfoToVariant(var R : TDBColumnInfo) : OleVariant;
function ConvertVariantToTDBColumnInfo(const V : OleVariant) : TDBColumnInfo;
function ConvertTDBDateToVariant(var R : TDBDate) : OleVariant;
function ConvertVariantToTDBDate(const V : OleVariant) : TDBDate;
function ConvertTDBFailureInfoToVariant(var R : TDBFailureInfo) : OleVariant;
function ConvertVariantToTDBFailureInfo(const V : OleVariant) : TDBFailureInfo;
function ConvertTDBFileTimeToVariant(var R : TDBFileTime) : OleVariant;
function ConvertVariantToTDBFileTime(const V : OleVariant) : TDBFileTime;
function ConvertTDBIDToVariant(var R : TDBID) : OleVariant;
function ConvertVariantToTDBID(const V : OleVariant) : TDBID;
function ConvertTDBIDGuidToVariant(var R : TDBIDGuid) : OleVariant;
function ConvertVariantToTDBIDGuid(const V : OleVariant) : TDBIDGuid;
function ConvertTDBIDNameToVariant(var R : TDBIDName) : OleVariant;
function ConvertVariantToTDBIDName(const V : OleVariant) : TDBIDName;
function ConvertTDBIndexColumnDescToVariant(var R : TDBIndexColumnDesc) : OleVariant;
function ConvertVariantToTDBIndexColumnDesc(const V : OleVariant) : TDBIndexColumnDesc;
function ConvertTDBLiteralInfoToVariant(var R : TDBLiteralInfo) : OleVariant;
function ConvertVariantToTDBLiteralInfo(const V : OleVariant) : TDBLiteralInfo;
function ConvertTDBNumericToVariant(var R : TDBNumeric) : OleVariant;
function ConvertVariantToTDBNumeric(const V : OleVariant) : TDBNumeric;
function ConvertTDBObjectToVariant(var R : TDBObject) : OleVariant;
function ConvertVariantToTDBObject(const V : OleVariant) : TDBObject;
function ConvertTDBParamBindInfoToVariant(var R : TDBParamBindInfo) : OleVariant;
function ConvertVariantToTDBParamBindInfo(const V : OleVariant) : TDBParamBindInfo;
function ConvertTDBParamInfoToVariant(var R : TDBParamInfo) : OleVariant;
function ConvertVariantToTDBParamInfo(const V : OleVariant) : TDBParamInfo;
function ConvertTDBParamsToVariant(var R : TDBParams) : OleVariant;
function ConvertVariantToTDBParams(const V : OleVariant) : TDBParams;
function ConvertTDBPropToVariant(var R : TDBProp) : OleVariant;
function ConvertVariantToTDBProp(const V : OleVariant) : TDBProp;
function ConvertTDBPropIDSetToVariant(var R : TDBPropIDSet) : OleVariant;
function ConvertVariantToTDBPropIDSet(const V : OleVariant) : TDBPropIDSet;
function ConvertTDBPropInfoToVariant(var R : TDBPropInfo) : OleVariant;
function ConvertVariantToTDBPropInfo(const V : OleVariant) : TDBPropInfo;
function ConvertTDBPropInfoSetToVariant(var R : TDBPropInfoSet) : OleVariant;
function ConvertVariantToTDBPropInfoSet(const V : OleVariant) : TDBPropInfoSet;
function ConvertTDBPropSetToVariant(var R : TDBPropSet) : OleVariant;
function ConvertVariantToTDBPropSet(const V : OleVariant) : TDBPropSet;
function ConvertTDBTimeToVariant(var R : TDBTime) : OleVariant;
function ConvertVariantToTDBTime(const V : OleVariant) : TDBTime;
function ConvertTDBTimeStampToVariant(var R : TDBTimeStamp) : OleVariant;
function ConvertVariantToTDBTimeStamp(const V : OleVariant) : TDBTimeStamp;
function ConvertTDBVarNumericToVariant(var R : TDBVarNumeric) : OleVariant;
function ConvertVariantToTDBVarNumeric(const V : OleVariant) : TDBVarNumeric;
function ConvertTDBVectorToVariant(var R : TDBVector) : OleVariant;
function ConvertVariantToTDBVector(const V : OleVariant) : TDBVector;
function ConvertTErrorInfoToVariant(var R : TErrorInfo) : OleVariant;
function ConvertVariantToTErrorInfo(const V : OleVariant) : TErrorInfo;
function ConvertTExplicitAccessWToVariant(var R : TExplicitAccessW) : OleVariant;
function ConvertVariantToTExplicitAccessW(const V : OleVariant) : TExplicitAccessW;
function ConvertTMDAxisInfoToVariant(var R : TMDAxisInfo) : OleVariant;
function ConvertVariantToTMDAxisInfo(const V : OleVariant) : TMDAxisInfo;
function ConvertTRUSTEE_WToVariant(var R : TRUSTEE_W) : OleVariant;
function ConvertVariantToTRUSTEE_W(const V : OleVariant) : TRUSTEE_W;
function ConvertTSecObjectToVariant(var R : TSecObject) : OleVariant;
function ConvertVariantToTSecObject(const V : OleVariant) : TSecObject;
function ConvertTSecObjectElementToVariant(var R : TSecObjectElement) : OleVariant;
function ConvertVariantToTSecObjectElement(const V : OleVariant) : TSecObjectElement;
function ConvertTXActOptToVariant(var R : TXActOpt) : OleVariant;
function ConvertVariantToTXActOpt(const V : OleVariant) : TXActOpt;
function ConvertTXactStatsToVariant(var R : TXactStats) : OleVariant;
function ConvertVariantToTXactStats(const V : OleVariant) : TXactStats;
function ConvertTXactTransInfoToVariant(var R : TXactTransInfo) : OleVariant;
function ConvertVariantToTXactTransInfo(const V : OleVariant) : TXactTransInfo;
function ConvertXACTOPTToVariant(var R : XACTOPT) : OleVariant;
function ConvertVariantToXACTOPT(const V : OleVariant) : XACTOPT;
function ConvertXACTSTATSToVariant(var R : XACTSTATS) : OleVariant;
function ConvertVariantToXACTSTATS(const V : OleVariant) : XACTSTATS;
function ConvertXACTTRANSINFOToVariant(var R : XACTTRANSINFO) : OleVariant;
function ConvertVariantToXACTTRANSINFO(const V : OleVariant) : XACTTRANSINFO;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __BOID__Wrapper = class(TDCRecordWrapper)
private
fR : BOID;
public
function GetRecordPtr : pointer; override;
published
end;
type __DB_NUMERIC__Wrapper = class(TDCRecordWrapper)
private
fR : DB_NUMERIC;
public
function GetRecordPtr : pointer; override;
published
procedure setprecision(const val : Byte);
function getprecision : Byte;
property precision : Byte read getprecision write setprecision;
procedure setscale(const val : Byte);
function getscale : Byte;
property scale : Byte read getscale write setscale;
procedure setsign(const val : Byte);
function getsign : Byte;
property sign : Byte read getsign write setsign;
end;
type __DB_VARNUMERIC__Wrapper = class(TDCRecordWrapper)
private
fR : DB_VARNUMERIC;
public
function GetRecordPtr : pointer; override;
published
procedure setprecision(const val : Byte);
function getprecision : Byte;
property precision : Byte read getprecision write setprecision;
procedure setscale(const val : SBYTE);
function getscale : SBYTE;
property scale : SBYTE read getscale write setscale;
procedure setsign(const val : Byte);
function getsign : Byte;
property sign : Byte read getsign write setsign;
end;
type __DBBINDEXT__Wrapper = class(TDCRecordWrapper)
private
fR : DBBINDEXT;
public
function GetRecordPtr : pointer; override;
published
procedure setulExtension(const val : UINT);
function getulExtension : UINT;
property ulExtension : UINT read getulExtension write setulExtension;
end;
type __DBBINDING__Wrapper = class(TDCRecordWrapper)
private
fR : DBBINDING;
public
function GetRecordPtr : pointer; override;
published
procedure setiOrdinal(const val : UINT);
function getiOrdinal : UINT;
property iOrdinal : UINT read getiOrdinal write setiOrdinal;
procedure setobValue(const val : UINT);
function getobValue : UINT;
property obValue : UINT read getobValue write setobValue;
procedure setobLength(const val : UINT);
function getobLength : UINT;
property obLength : UINT read getobLength write setobLength;
procedure setobStatus(const val : UINT);
function getobStatus : UINT;
property obStatus : UINT read getobStatus write setobStatus;
procedure setdwPart(const val : DBPART);
function getdwPart : DBPART;
property dwPart : DBPART read getdwPart write setdwPart;
procedure setdwMemOwner(const val : DBMEMOWNER);
function getdwMemOwner : DBMEMOWNER;
property dwMemOwner : DBMEMOWNER read getdwMemOwner write setdwMemOwner;
procedure seteParamIO(const val : DBPARAMIO);
function geteParamIO : DBPARAMIO;
property eParamIO : DBPARAMIO read geteParamIO write seteParamIO;
procedure setcbMaxLen(const val : UINT);
function getcbMaxLen : UINT;
property cbMaxLen : UINT read getcbMaxLen write setcbMaxLen;
procedure setdwFlags(const val : UINT);
function getdwFlags : UINT;
property dwFlags : UINT read getdwFlags write setdwFlags;
procedure setwType(const val : DBTYPE);
function getwType : DBTYPE;
property wType : DBTYPE read getwType write setwType;
procedure setbPrecision(const val : Byte);
function getbPrecision : Byte;
property bPrecision : Byte read getbPrecision write setbPrecision;
procedure setbScale(const val : Byte);
function getbScale : Byte;
property bScale : Byte read getbScale write setbScale;
end;
type __DBCOLUMNDESC__Wrapper = class(TDCRecordWrapper)
private
fR : DBCOLUMNDESC;
public
function GetRecordPtr : pointer; override;
published
procedure setcPropertySets(const val : UINT);
function getcPropertySets : UINT;
property cPropertySets : UINT read getcPropertySets write setcPropertySets;
procedure setulColumnSize(const val : UINT);
function getulColumnSize : UINT;
property ulColumnSize : UINT read getulColumnSize write setulColumnSize;
procedure setwType(const val : DBTYPE);
function getwType : DBTYPE;
property wType : DBTYPE read getwType write setwType;
procedure setbPrecision(const val : Byte);
function getbPrecision : Byte;
property bPrecision : Byte read getbPrecision write setbPrecision;
procedure setbScale(const val : Byte);
function getbScale : Byte;
property bScale : Byte read getbScale write setbScale;
end;
type __DBCOLUMNINFO__Wrapper = class(TDCRecordWrapper)
private
fR : DBCOLUMNINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setiOrdinal(const val : UINT);
function getiOrdinal : UINT;
property iOrdinal : UINT read getiOrdinal write setiOrdinal;
procedure setdwFlags(const val : DBCOLUMNFLAGS);
function getdwFlags : DBCOLUMNFLAGS;
property dwFlags : DBCOLUMNFLAGS read getdwFlags write setdwFlags;
procedure setulColumnSize(const val : UINT);
function getulColumnSize : UINT;
property ulColumnSize : UINT read getulColumnSize write setulColumnSize;
procedure setwType(const val : DBTYPE);
function getwType : DBTYPE;
property wType : DBTYPE read getwType write setwType;
procedure setbPrecision(const val : Byte);
function getbPrecision : Byte;
property bPrecision : Byte read getbPrecision write setbPrecision;
procedure setbScale(const val : Byte);
function getbScale : Byte;
property bScale : Byte read getbScale write setbScale;
end;
type __DBDATE__Wrapper = class(TDCRecordWrapper)
private
fR : DBDATE;
public
function GetRecordPtr : pointer; override;
published
procedure setyear(const val : SmallInt);
function getyear : SmallInt;
property year : SmallInt read getyear write setyear;
procedure setmonth(const val : Word);
function getmonth : Word;
property month : Word read getmonth write setmonth;
procedure setday(const val : Word);
function getday : Word;
property day : Word read getday write setday;
end;
type __DBFAILUREINFO__Wrapper = class(TDCRecordWrapper)
private
fR : DBFAILUREINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setHROW(const val : HROW);
function getHROW : HROW;
property HROW : HROW read getHROW write setHROW;
procedure setiColumn(const val : UINT);
function getiColumn : UINT;
property iColumn : UINT read getiColumn write setiColumn;
end;
type __DBFILETIME__Wrapper = class(TDCRecordWrapper)
private
fR : DBFILETIME;
public
function GetRecordPtr : pointer; override;
published
procedure setdwLowDateTime(const val : UINT);
function getdwLowDateTime : UINT;
property dwLowDateTime : UINT read getdwLowDateTime write setdwLowDateTime;
procedure setdwHighDateTime(const val : UINT);
function getdwHighDateTime : UINT;
property dwHighDateTime : UINT read getdwHighDateTime write setdwHighDateTime;
end;
type __DBID__Wrapper = class(TDCRecordWrapper)
private
fR : DBID;
public
function GetRecordPtr : pointer; override;
published
procedure seteKind(const val : DBKIND);
function geteKind : DBKIND;
property eKind : DBKIND read geteKind write seteKind;
end;
type __DBIDGUID__Wrapper = class(TDCRecordWrapper)
private
fR : DBIDGUID;
public
function GetRecordPtr : pointer; override;
published
end;
type __DBIDNAME__Wrapper = class(TDCRecordWrapper)
private
fR : DBIDNAME;
public
function GetRecordPtr : pointer; override;
published
procedure setulPropid(const val : UINT);
function getulPropid : UINT;
property ulPropid : UINT read getulPropid write setulPropid;
end;
type __DBINDEXCOLUMNDESC__Wrapper = class(TDCRecordWrapper)
private
fR : DBINDEXCOLUMNDESC;
public
function GetRecordPtr : pointer; override;
published
procedure seteIndexColOrder(const val : DBINDEX_COL_ORDER);
function geteIndexColOrder : DBINDEX_COL_ORDER;
property eIndexColOrder : DBINDEX_COL_ORDER read geteIndexColOrder write seteIndexColOrder;
end;
type __DBLITERALINFO__Wrapper = class(TDCRecordWrapper)
private
fR : DBLITERALINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setlt(const val : UINT);
function getlt : UINT;
property lt : UINT read getlt write setlt;
procedure setfSupported(const val : BOOL);
function getfSupported : BOOL;
property fSupported : BOOL read getfSupported write setfSupported;
procedure setcchMaxLen(const val : UINT);
function getcchMaxLen : UINT;
property cchMaxLen : UINT read getcchMaxLen write setcchMaxLen;
end;
type __DBOBJECT__Wrapper = class(TDCRecordWrapper)
private
fR : DBOBJECT;
public
function GetRecordPtr : pointer; override;
published
procedure setdwFlags(const val : UINT);
function getdwFlags : UINT;
property dwFlags : UINT read getdwFlags write setdwFlags;
end;
type __DBPARAMBINDINFO__Wrapper = class(TDCRecordWrapper)
private
fR : DBPARAMBINDINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setulParamSize(const val : UINT);
function getulParamSize : UINT;
property ulParamSize : UINT read getulParamSize write setulParamSize;
procedure setdwFlags(const val : DBPARAMFLAGS);
function getdwFlags : DBPARAMFLAGS;
property dwFlags : DBPARAMFLAGS read getdwFlags write setdwFlags;
procedure setbPrecision(const val : Byte);
function getbPrecision : Byte;
property bPrecision : Byte read getbPrecision write setbPrecision;
procedure setbScale(const val : Byte);
function getbScale : Byte;
property bScale : Byte read getbScale write setbScale;
end;
type __DBPARAMINFO__Wrapper = class(TDCRecordWrapper)
private
fR : DBPARAMINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setdwFlags(const val : DBPARAMFLAGS);
function getdwFlags : DBPARAMFLAGS;
property dwFlags : DBPARAMFLAGS read getdwFlags write setdwFlags;
procedure setiOrdinal(const val : UINT);
function getiOrdinal : UINT;
property iOrdinal : UINT read getiOrdinal write setiOrdinal;
procedure setulParamSize(const val : UINT);
function getulParamSize : UINT;
property ulParamSize : UINT read getulParamSize write setulParamSize;
procedure setwType(const val : DBTYPE);
function getwType : DBTYPE;
property wType : DBTYPE read getwType write setwType;
procedure setbPrecision(const val : Byte);
function getbPrecision : Byte;
property bPrecision : Byte read getbPrecision write setbPrecision;
procedure setbScale(const val : Byte);
function getbScale : Byte;
property bScale : Byte read getbScale write setbScale;
end;
type __DBPARAMS__Wrapper = class(TDCRecordWrapper)
private
fR : DBPARAMS;
public
function GetRecordPtr : pointer; override;
published
procedure setcParamSets(const val : UINT);
function getcParamSets : UINT;
property cParamSets : UINT read getcParamSets write setcParamSets;
procedure setHACCESSOR(const val : HACCESSOR);
function getHACCESSOR : HACCESSOR;
property HACCESSOR : HACCESSOR read getHACCESSOR write setHACCESSOR;
end;
type __DBPROP__Wrapper = class(TDCRecordWrapper)
private
fR : DBPROP;
public
function GetRecordPtr : pointer; override;
published
procedure setdwPropertyID(const val : DBPROPID);
function getdwPropertyID : DBPROPID;
property dwPropertyID : DBPROPID read getdwPropertyID write setdwPropertyID;
procedure setdwOptions(const val : DBPROPOPTIONS);
function getdwOptions : DBPROPOPTIONS;
property dwOptions : DBPROPOPTIONS read getdwOptions write setdwOptions;
procedure setdwStatus(const val : DBPROPSTATUS);
function getdwStatus : DBPROPSTATUS;
property dwStatus : DBPROPSTATUS read getdwStatus write setdwStatus;
procedure setvValue(const val : OleVariant);
function getvValue : OleVariant;
property vValue : OleVariant read getvValue write setvValue;
end;
type __DBPROPIDSET__Wrapper = class(TDCRecordWrapper)
private
fR : DBPROPIDSET;
public
function GetRecordPtr : pointer; override;
published
procedure setcPropertyIDs(const val : UINT);
function getcPropertyIDs : UINT;
property cPropertyIDs : UINT read getcPropertyIDs write setcPropertyIDs;
end;
type __DBPROPINFO__Wrapper = class(TDCRecordWrapper)
private
fR : DBPROPINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setdwPropertyID(const val : DBPROPID);
function getdwPropertyID : DBPROPID;
property dwPropertyID : DBPROPID read getdwPropertyID write setdwPropertyID;
procedure setdwFlags(const val : DBPROPFLAGS);
function getdwFlags : DBPROPFLAGS;
property dwFlags : DBPROPFLAGS read getdwFlags write setdwFlags;
procedure setvtType(const val : Word);
function getvtType : Word;
property vtType : Word read getvtType write setvtType;
procedure setvValues(const val : OleVariant);
function getvValues : OleVariant;
property vValues : OleVariant read getvValues write setvValues;
end;
type __DBPROPINFOSET__Wrapper = class(TDCRecordWrapper)
private
fR : DBPROPINFOSET;
public
function GetRecordPtr : pointer; override;
published
procedure setcPropertyInfos(const val : UINT);
function getcPropertyInfos : UINT;
property cPropertyInfos : UINT read getcPropertyInfos write setcPropertyInfos;
end;
type __DBPROPSET__Wrapper = class(TDCRecordWrapper)
private
fR : DBPROPSET;
public
function GetRecordPtr : pointer; override;
published
procedure setcProperties(const val : UINT);
function getcProperties : UINT;
property cProperties : UINT read getcProperties write setcProperties;
end;
type __DBTIME__Wrapper = class(TDCRecordWrapper)
private
fR : DBTIME;
public
function GetRecordPtr : pointer; override;
published
procedure sethour(const val : Word);
function gethour : Word;
property hour : Word read gethour write sethour;
procedure setminute(const val : Word);
function getminute : Word;
property minute : Word read getminute write setminute;
procedure setsecond(const val : Word);
function getsecond : Word;
property second : Word read getsecond write setsecond;
end;
type __DBTIMESTAMP__Wrapper = class(TDCRecordWrapper)
private
fR : DBTIMESTAMP;
public
function GetRecordPtr : pointer; override;
published
procedure setyear(const val : SmallInt);
function getyear : SmallInt;
property year : SmallInt read getyear write setyear;
procedure setmonth(const val : Word);
function getmonth : Word;
property month : Word read getmonth write setmonth;
procedure setday(const val : Word);
function getday : Word;
property day : Word read getday write setday;
procedure sethour(const val : Word);
function gethour : Word;
property hour : Word read gethour write sethour;
procedure setminute(const val : Word);
function getminute : Word;
property minute : Word read getminute write setminute;
procedure setsecond(const val : Word);
function getsecond : Word;
property second : Word read getsecond write setsecond;
procedure setfraction(const val : UINT);
function getfraction : UINT;
property fraction : UINT read getfraction write setfraction;
end;
type __DBVECTOR__Wrapper = class(TDCRecordWrapper)
private
fR : DBVECTOR;
public
function GetRecordPtr : pointer; override;
published
procedure setsize(const val : UINT);
function getsize : UINT;
property size : UINT read getsize write setsize;
end;
type __ERRORINFO__Wrapper = class(TDCRecordWrapper)
private
fR : ERRORINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setdwMinor(const val : UINT);
function getdwMinor : UINT;
property dwMinor : UINT read getdwMinor write setdwMinor;
procedure setdispid(const val : Integer);
function getdispid : Integer;
property dispid : Integer read getdispid write setdispid;
end;
type __EXPLICIT_ACCESS_W__Wrapper = class(TDCRecordWrapper)
private
fR : EXPLICIT_ACCESS_W;
public
function GetRecordPtr : pointer; override;
published
procedure setgrfAccessPermissions(const val : UINT);
function getgrfAccessPermissions : UINT;
property grfAccessPermissions : UINT read getgrfAccessPermissions write setgrfAccessPermissions;
procedure setgrfAccessMode(const val : ACCESS_MODE);
function getgrfAccessMode : ACCESS_MODE;
property grfAccessMode : ACCESS_MODE read getgrfAccessMode write setgrfAccessMode;
procedure setgrfInheritance(const val : UINT);
function getgrfInheritance : UINT;
property grfInheritance : UINT read getgrfInheritance write setgrfInheritance;
end;
type __MDAXISINFO__Wrapper = class(TDCRecordWrapper)
private
fR : MDAXISINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : UINT);
function getcbSize : UINT;
property cbSize : UINT read getcbSize write setcbSize;
procedure setiAxis(const val : UINT);
function getiAxis : UINT;
property iAxis : UINT read getiAxis write setiAxis;
procedure setcDimensions(const val : UINT);
function getcDimensions : UINT;
property cDimensions : UINT read getcDimensions write setcDimensions;
procedure setcCoordinates(const val : UINT);
function getcCoordinates : UINT;
property cCoordinates : UINT read getcCoordinates write setcCoordinates;
end;
type __SEC_OBJECT__Wrapper = class(TDCRecordWrapper)
private
fR : SEC_OBJECT;
public
function GetRecordPtr : pointer; override;
published
procedure setcObjects(const val : UINT);
function getcObjects : UINT;
property cObjects : UINT read getcObjects write setcObjects;
end;
type __SEC_OBJECT_ELEMENT__Wrapper = class(TDCRecordWrapper)
private
fR : SEC_OBJECT_ELEMENT;
public
function GetRecordPtr : pointer; override;
published
end;
type __TBoid__Wrapper = class(TDCRecordWrapper)
private
fR : TBoid;
public
function GetRecordPtr : pointer; override;
published
end;
type __TDBBindExt__Wrapper = class(TDCRecordWrapper)
private
fR : TDBBindExt;
public
function GetRecordPtr : pointer; override;
published
procedure setulExtension(const val : UINT);
function getulExtension : UINT;
property ulExtension : UINT read getulExtension write setulExtension;
end;
type __TDBBinding__Wrapper = class(TDCRecordWrapper)
private
fR : TDBBinding;
public
function GetRecordPtr : pointer; override;
published
procedure setiOrdinal(const val : UINT);
function getiOrdinal : UINT;
property iOrdinal : UINT read getiOrdinal write setiOrdinal;
procedure setobValue(const val : UINT);
function getobValue : UINT;
property obValue : UINT read getobValue write setobValue;
procedure setobLength(const val : UINT);
function getobLength : UINT;
property obLength : UINT read getobLength write setobLength;
procedure setobStatus(const val : UINT);
function getobStatus : UINT;
property obStatus : UINT read getobStatus write setobStatus;
procedure setdwPart(const val : DBPART);
function getdwPart : DBPART;
property dwPart : DBPART read getdwPart write setdwPart;
procedure setdwMemOwner(const val : DBMEMOWNER);
function getdwMemOwner : DBMEMOWNER;
property dwMemOwner : DBMEMOWNER read getdwMemOwner write setdwMemOwner;
procedure seteParamIO(const val : DBPARAMIO);
function geteParamIO : DBPARAMIO;
property eParamIO : DBPARAMIO read geteParamIO write seteParamIO;
procedure setcbMaxLen(const val : UINT);
function getcbMaxLen : UINT;
property cbMaxLen : UINT read getcbMaxLen write setcbMaxLen;
procedure setdwFlags(const val : UINT);
function getdwFlags : UINT;
property dwFlags : UINT read getdwFlags write setdwFlags;
procedure setwType(const val : DBTYPE);
function getwType : DBTYPE;
property wType : DBTYPE read getwType write setwType;
procedure setbPrecision(const val : Byte);
function getbPrecision : Byte;
property bPrecision : Byte read getbPrecision write setbPrecision;
procedure setbScale(const val : Byte);
function getbScale : Byte;
property bScale : Byte read getbScale write setbScale;
end;
type __TDBColumnDesc__Wrapper = class(TDCRecordWrapper)
private
fR : TDBColumnDesc;
public
function GetRecordPtr : pointer; override;
published
procedure setcPropertySets(const val : UINT);
function getcPropertySets : UINT;
property cPropertySets : UINT read getcPropertySets write setcPropertySets;
procedure setulColumnSize(const val : UINT);
function getulColumnSize : UINT;
property ulColumnSize : UINT read getulColumnSize write setulColumnSize;
procedure setwType(const val : DBTYPE);
function getwType : DBTYPE;
property wType : DBTYPE read getwType write setwType;
procedure setbPrecision(const val : Byte);
function getbPrecision : Byte;
property bPrecision : Byte read getbPrecision write setbPrecision;
procedure setbScale(const val : Byte);
function getbScale : Byte;
property bScale : Byte read getbScale write setbScale;
end;
type __TDBColumnInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TDBColumnInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setiOrdinal(const val : UINT);
function getiOrdinal : UINT;
property iOrdinal : UINT read getiOrdinal write setiOrdinal;
procedure setdwFlags(const val : DBCOLUMNFLAGS);
function getdwFlags : DBCOLUMNFLAGS;
property dwFlags : DBCOLUMNFLAGS read getdwFlags write setdwFlags;
procedure setulColumnSize(const val : UINT);
function getulColumnSize : UINT;
property ulColumnSize : UINT read getulColumnSize write setulColumnSize;
procedure setwType(const val : DBTYPE);
function getwType : DBTYPE;
property wType : DBTYPE read getwType write setwType;
procedure setbPrecision(const val : Byte);
function getbPrecision : Byte;
property bPrecision : Byte read getbPrecision write setbPrecision;
procedure setbScale(const val : Byte);
function getbScale : Byte;
property bScale : Byte read getbScale write setbScale;
end;
type __TDBDate__Wrapper = class(TDCRecordWrapper)
private
fR : TDBDate;
public
function GetRecordPtr : pointer; override;
published
procedure setyear(const val : SmallInt);
function getyear : SmallInt;
property year : SmallInt read getyear write setyear;
procedure setmonth(const val : Word);
function getmonth : Word;
property month : Word read getmonth write setmonth;
procedure setday(const val : Word);
function getday : Word;
property day : Word read getday write setday;
end;
type __TDBFailureInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TDBFailureInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setHROW(const val : HROW);
function getHROW : HROW;
property HROW : HROW read getHROW write setHROW;
procedure setiColumn(const val : UINT);
function getiColumn : UINT;
property iColumn : UINT read getiColumn write setiColumn;
end;
type __TDBFileTime__Wrapper = class(TDCRecordWrapper)
private
fR : TDBFileTime;
public
function GetRecordPtr : pointer; override;
published
procedure setdwLowDateTime(const val : UINT);
function getdwLowDateTime : UINT;
property dwLowDateTime : UINT read getdwLowDateTime write setdwLowDateTime;
procedure setdwHighDateTime(const val : UINT);
function getdwHighDateTime : UINT;
property dwHighDateTime : UINT read getdwHighDateTime write setdwHighDateTime;
end;
type __TDBID__Wrapper = class(TDCRecordWrapper)
private
fR : TDBID;
public
function GetRecordPtr : pointer; override;
published
procedure seteKind(const val : DBKIND);
function geteKind : DBKIND;
property eKind : DBKIND read geteKind write seteKind;
end;
type __TDBIDGuid__Wrapper = class(TDCRecordWrapper)
private
fR : TDBIDGuid;
public
function GetRecordPtr : pointer; override;
published
end;
type __TDBIDName__Wrapper = class(TDCRecordWrapper)
private
fR : TDBIDName;
public
function GetRecordPtr : pointer; override;
published
procedure setulPropid(const val : UINT);
function getulPropid : UINT;
property ulPropid : UINT read getulPropid write setulPropid;
end;
type __TDBIndexColumnDesc__Wrapper = class(TDCRecordWrapper)
private
fR : TDBIndexColumnDesc;
public
function GetRecordPtr : pointer; override;
published
procedure seteIndexColOrder(const val : DBINDEX_COL_ORDER);
function geteIndexColOrder : DBINDEX_COL_ORDER;
property eIndexColOrder : DBINDEX_COL_ORDER read geteIndexColOrder write seteIndexColOrder;
end;
type __TDBLiteralInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TDBLiteralInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setlt(const val : UINT);
function getlt : UINT;
property lt : UINT read getlt write setlt;
procedure setfSupported(const val : BOOL);
function getfSupported : BOOL;
property fSupported : BOOL read getfSupported write setfSupported;
procedure setcchMaxLen(const val : UINT);
function getcchMaxLen : UINT;
property cchMaxLen : UINT read getcchMaxLen write setcchMaxLen;
end;
type __TDBNumeric__Wrapper = class(TDCRecordWrapper)
private
fR : TDBNumeric;
public
function GetRecordPtr : pointer; override;
published
procedure setprecision(const val : Byte);
function getprecision : Byte;
property precision : Byte read getprecision write setprecision;
procedure setscale(const val : Byte);
function getscale : Byte;
property scale : Byte read getscale write setscale;
procedure setsign(const val : Byte);
function getsign : Byte;
property sign : Byte read getsign write setsign;
end;
type __TDBObject__Wrapper = class(TDCRecordWrapper)
private
fR : TDBObject;
public
function GetRecordPtr : pointer; override;
published
procedure setdwFlags(const val : UINT);
function getdwFlags : UINT;
property dwFlags : UINT read getdwFlags write setdwFlags;
end;
type __TDBParamBindInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TDBParamBindInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setulParamSize(const val : UINT);
function getulParamSize : UINT;
property ulParamSize : UINT read getulParamSize write setulParamSize;
procedure setdwFlags(const val : DBPARAMFLAGS);
function getdwFlags : DBPARAMFLAGS;
property dwFlags : DBPARAMFLAGS read getdwFlags write setdwFlags;
procedure setbPrecision(const val : Byte);
function getbPrecision : Byte;
property bPrecision : Byte read getbPrecision write setbPrecision;
procedure setbScale(const val : Byte);
function getbScale : Byte;
property bScale : Byte read getbScale write setbScale;
end;
type __TDBParamInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TDBParamInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setdwFlags(const val : DBPARAMFLAGS);
function getdwFlags : DBPARAMFLAGS;
property dwFlags : DBPARAMFLAGS read getdwFlags write setdwFlags;
procedure setiOrdinal(const val : UINT);
function getiOrdinal : UINT;
property iOrdinal : UINT read getiOrdinal write setiOrdinal;
procedure setulParamSize(const val : UINT);
function getulParamSize : UINT;
property ulParamSize : UINT read getulParamSize write setulParamSize;
procedure setwType(const val : DBTYPE);
function getwType : DBTYPE;
property wType : DBTYPE read getwType write setwType;
procedure setbPrecision(const val : Byte);
function getbPrecision : Byte;
property bPrecision : Byte read getbPrecision write setbPrecision;
procedure setbScale(const val : Byte);
function getbScale : Byte;
property bScale : Byte read getbScale write setbScale;
end;
type __TDBParams__Wrapper = class(TDCRecordWrapper)
private
fR : TDBParams;
public
function GetRecordPtr : pointer; override;
published
procedure setcParamSets(const val : UINT);
function getcParamSets : UINT;
property cParamSets : UINT read getcParamSets write setcParamSets;
procedure setHACCESSOR(const val : HACCESSOR);
function getHACCESSOR : HACCESSOR;
property HACCESSOR : HACCESSOR read getHACCESSOR write setHACCESSOR;
end;
type __TDBProp__Wrapper = class(TDCRecordWrapper)
private
fR : TDBProp;
public
function GetRecordPtr : pointer; override;
published
procedure setdwPropertyID(const val : DBPROPID);
function getdwPropertyID : DBPROPID;
property dwPropertyID : DBPROPID read getdwPropertyID write setdwPropertyID;
procedure setdwOptions(const val : DBPROPOPTIONS);
function getdwOptions : DBPROPOPTIONS;
property dwOptions : DBPROPOPTIONS read getdwOptions write setdwOptions;
procedure setdwStatus(const val : DBPROPSTATUS);
function getdwStatus : DBPROPSTATUS;
property dwStatus : DBPROPSTATUS read getdwStatus write setdwStatus;
procedure setvValue(const val : OleVariant);
function getvValue : OleVariant;
property vValue : OleVariant read getvValue write setvValue;
end;
type __TDBPropIDSet__Wrapper = class(TDCRecordWrapper)
private
fR : TDBPropIDSet;
public
function GetRecordPtr : pointer; override;
published
procedure setcPropertyIDs(const val : UINT);
function getcPropertyIDs : UINT;
property cPropertyIDs : UINT read getcPropertyIDs write setcPropertyIDs;
end;
type __TDBPropInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TDBPropInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setdwPropertyID(const val : DBPROPID);
function getdwPropertyID : DBPROPID;
property dwPropertyID : DBPROPID read getdwPropertyID write setdwPropertyID;
procedure setdwFlags(const val : DBPROPFLAGS);
function getdwFlags : DBPROPFLAGS;
property dwFlags : DBPROPFLAGS read getdwFlags write setdwFlags;
procedure setvtType(const val : Word);
function getvtType : Word;
property vtType : Word read getvtType write setvtType;
procedure setvValues(const val : OleVariant);
function getvValues : OleVariant;
property vValues : OleVariant read getvValues write setvValues;
end;
type __TDBPropInfoSet__Wrapper = class(TDCRecordWrapper)
private
fR : TDBPropInfoSet;
public
function GetRecordPtr : pointer; override;
published
procedure setcPropertyInfos(const val : UINT);
function getcPropertyInfos : UINT;
property cPropertyInfos : UINT read getcPropertyInfos write setcPropertyInfos;
end;
type __TDBPropSet__Wrapper = class(TDCRecordWrapper)
private
fR : TDBPropSet;
public
function GetRecordPtr : pointer; override;
published
procedure setcProperties(const val : UINT);
function getcProperties : UINT;
property cProperties : UINT read getcProperties write setcProperties;
end;
type __TDBTime__Wrapper = class(TDCRecordWrapper)
private
fR : TDBTime;
public
function GetRecordPtr : pointer; override;
published
procedure sethour(const val : Word);
function gethour : Word;
property hour : Word read gethour write sethour;
procedure setminute(const val : Word);
function getminute : Word;
property minute : Word read getminute write setminute;
procedure setsecond(const val : Word);
function getsecond : Word;
property second : Word read getsecond write setsecond;
end;
type __TDBTimeStamp__Wrapper = class(TDCRecordWrapper)
private
fR : TDBTimeStamp;
public
function GetRecordPtr : pointer; override;
published
procedure setyear(const val : SmallInt);
function getyear : SmallInt;
property year : SmallInt read getyear write setyear;
procedure setmonth(const val : Word);
function getmonth : Word;
property month : Word read getmonth write setmonth;
procedure setday(const val : Word);
function getday : Word;
property day : Word read getday write setday;
procedure sethour(const val : Word);
function gethour : Word;
property hour : Word read gethour write sethour;
procedure setminute(const val : Word);
function getminute : Word;
property minute : Word read getminute write setminute;
procedure setsecond(const val : Word);
function getsecond : Word;
property second : Word read getsecond write setsecond;
procedure setfraction(const val : UINT);
function getfraction : UINT;
property fraction : UINT read getfraction write setfraction;
end;
type __TDBVarNumeric__Wrapper = class(TDCRecordWrapper)
private
fR : TDBVarNumeric;
public
function GetRecordPtr : pointer; override;
published
procedure setprecision(const val : Byte);
function getprecision : Byte;
property precision : Byte read getprecision write setprecision;
procedure setscale(const val : SBYTE);
function getscale : SBYTE;
property scale : SBYTE read getscale write setscale;
procedure setsign(const val : Byte);
function getsign : Byte;
property sign : Byte read getsign write setsign;
end;
type __TDBVector__Wrapper = class(TDCRecordWrapper)
private
fR : TDBVector;
public
function GetRecordPtr : pointer; override;
published
procedure setsize(const val : UINT);
function getsize : UINT;
property size : UINT read getsize write setsize;
end;
type __TErrorInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TErrorInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setdwMinor(const val : UINT);
function getdwMinor : UINT;
property dwMinor : UINT read getdwMinor write setdwMinor;
procedure setdispid(const val : Integer);
function getdispid : Integer;
property dispid : Integer read getdispid write setdispid;
end;
type __TExplicitAccessW__Wrapper = class(TDCRecordWrapper)
private
fR : TExplicitAccessW;
public
function GetRecordPtr : pointer; override;
published
procedure setgrfAccessPermissions(const val : UINT);
function getgrfAccessPermissions : UINT;
property grfAccessPermissions : UINT read getgrfAccessPermissions write setgrfAccessPermissions;
procedure setgrfAccessMode(const val : ACCESS_MODE);
function getgrfAccessMode : ACCESS_MODE;
property grfAccessMode : ACCESS_MODE read getgrfAccessMode write setgrfAccessMode;
procedure setgrfInheritance(const val : UINT);
function getgrfInheritance : UINT;
property grfInheritance : UINT read getgrfInheritance write setgrfInheritance;
end;
type __TMDAxisInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TMDAxisInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setcbSize(const val : UINT);
function getcbSize : UINT;
property cbSize : UINT read getcbSize write setcbSize;
procedure setiAxis(const val : UINT);
function getiAxis : UINT;
property iAxis : UINT read getiAxis write setiAxis;
procedure setcDimensions(const val : UINT);
function getcDimensions : UINT;
property cDimensions : UINT read getcDimensions write setcDimensions;
procedure setcCoordinates(const val : UINT);
function getcCoordinates : UINT;
property cCoordinates : UINT read getcCoordinates write setcCoordinates;
end;
type __TRUSTEE_W__Wrapper = class(TDCRecordWrapper)
private
fR : TRUSTEE_W;
public
function GetRecordPtr : pointer; override;
published
procedure setMultipleTrusteeOperation(const val : MULTIPLE_TRUSTEE_OPERATION);
function getMultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION;
property MultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION read getMultipleTrusteeOperation write setMultipleTrusteeOperation;
procedure setTrusteeForm(const val : TRUSTEE_FORM);
function getTrusteeForm : TRUSTEE_FORM;
property TrusteeForm : TRUSTEE_FORM read getTrusteeForm write setTrusteeForm;
procedure setTrusteeType(const val : TRUSTEE_TYPE);
function getTrusteeType : TRUSTEE_TYPE;
property TrusteeType : TRUSTEE_TYPE read getTrusteeType write setTrusteeType;
end;
type __TSecObject__Wrapper = class(TDCRecordWrapper)
private
fR : TSecObject;
public
function GetRecordPtr : pointer; override;
published
procedure setcObjects(const val : UINT);
function getcObjects : UINT;
property cObjects : UINT read getcObjects write setcObjects;
end;
type __TSecObjectElement__Wrapper = class(TDCRecordWrapper)
private
fR : TSecObjectElement;
public
function GetRecordPtr : pointer; override;
published
end;
type __TXActOpt__Wrapper = class(TDCRecordWrapper)
private
fR : TXActOpt;
public
function GetRecordPtr : pointer; override;
published
procedure setulTimeout(const val : UINT);
function getulTimeout : UINT;
property ulTimeout : UINT read getulTimeout write setulTimeout;
end;
type __TXactStats__Wrapper = class(TDCRecordWrapper)
private
fR : TXactStats;
public
function GetRecordPtr : pointer; override;
published
procedure setcOpen(const val : UINT);
function getcOpen : UINT;
property cOpen : UINT read getcOpen write setcOpen;
procedure setcCommitting(const val : UINT);
function getcCommitting : UINT;
property cCommitting : UINT read getcCommitting write setcCommitting;
procedure setcCommitted(const val : UINT);
function getcCommitted : UINT;
property cCommitted : UINT read getcCommitted write setcCommitted;
procedure setcAborting(const val : UINT);
function getcAborting : UINT;
property cAborting : UINT read getcAborting write setcAborting;
procedure setcAborted(const val : UINT);
function getcAborted : UINT;
property cAborted : UINT read getcAborted write setcAborted;
procedure setcInDoubt(const val : UINT);
function getcInDoubt : UINT;
property cInDoubt : UINT read getcInDoubt write setcInDoubt;
procedure setcHeuristicDecision(const val : UINT);
function getcHeuristicDecision : UINT;
property cHeuristicDecision : UINT read getcHeuristicDecision write setcHeuristicDecision;
end;
type __TXactTransInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TXactTransInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setisoLevel(const val : Integer);
function getisoLevel : Integer;
property isoLevel : Integer read getisoLevel write setisoLevel;
procedure setisoFlags(const val : UINT);
function getisoFlags : UINT;
property isoFlags : UINT read getisoFlags write setisoFlags;
procedure setgrfTCSupported(const val : UINT);
function getgrfTCSupported : UINT;
property grfTCSupported : UINT read getgrfTCSupported write setgrfTCSupported;
procedure setgrfRMSupported(const val : UINT);
function getgrfRMSupported : UINT;
property grfRMSupported : UINT read getgrfRMSupported write setgrfRMSupported;
procedure setgrfTCSupportedRetaining(const val : UINT);
function getgrfTCSupportedRetaining : UINT;
property grfTCSupportedRetaining : UINT read getgrfTCSupportedRetaining write setgrfTCSupportedRetaining;
procedure setgrfRMSupportedRetaining(const val : UINT);
function getgrfRMSupportedRetaining : UINT;
property grfRMSupportedRetaining : UINT read getgrfRMSupportedRetaining write setgrfRMSupportedRetaining;
end;
type __XACTOPT__Wrapper = class(TDCRecordWrapper)
private
fR : XACTOPT;
public
function GetRecordPtr : pointer; override;
published
procedure setulTimeout(const val : UINT);
function getulTimeout : UINT;
property ulTimeout : UINT read getulTimeout write setulTimeout;
end;
type __XACTSTATS__Wrapper = class(TDCRecordWrapper)
private
fR : XACTSTATS;
public
function GetRecordPtr : pointer; override;
published
procedure setcOpen(const val : UINT);
function getcOpen : UINT;
property cOpen : UINT read getcOpen write setcOpen;
procedure setcCommitting(const val : UINT);
function getcCommitting : UINT;
property cCommitting : UINT read getcCommitting write setcCommitting;
procedure setcCommitted(const val : UINT);
function getcCommitted : UINT;
property cCommitted : UINT read getcCommitted write setcCommitted;
procedure setcAborting(const val : UINT);
function getcAborting : UINT;
property cAborting : UINT read getcAborting write setcAborting;
procedure setcAborted(const val : UINT);
function getcAborted : UINT;
property cAborted : UINT read getcAborted write setcAborted;
procedure setcInDoubt(const val : UINT);
function getcInDoubt : UINT;
property cInDoubt : UINT read getcInDoubt write setcInDoubt;
procedure setcHeuristicDecision(const val : UINT);
function getcHeuristicDecision : UINT;
property cHeuristicDecision : UINT read getcHeuristicDecision write setcHeuristicDecision;
end;
type __XACTTRANSINFO__Wrapper = class(TDCRecordWrapper)
private
fR : XACTTRANSINFO;
public
function GetRecordPtr : pointer; override;
published
procedure setisoLevel(const val : Integer);
function getisoLevel : Integer;
property isoLevel : Integer read getisoLevel write setisoLevel;
procedure setisoFlags(const val : UINT);
function getisoFlags : UINT;
property isoFlags : UINT read getisoFlags write setisoFlags;
procedure setgrfTCSupported(const val : UINT);
function getgrfTCSupported : UINT;
property grfTCSupported : UINT read getgrfTCSupported write setgrfTCSupported;
procedure setgrfRMSupported(const val : UINT);
function getgrfRMSupported : UINT;
property grfRMSupported : UINT read getgrfRMSupported write setgrfRMSupported;
procedure setgrfTCSupportedRetaining(const val : UINT);
function getgrfTCSupportedRetaining : UINT;
property grfTCSupportedRetaining : UINT read getgrfTCSupportedRetaining write setgrfTCSupportedRetaining;
procedure setgrfRMSupportedRetaining(const val : UINT);
function getgrfRMSupportedRetaining : UINT;
property grfRMSupportedRetaining : UINT read getgrfRMSupportedRetaining write setgrfRMSupportedRetaining;
end;
function __BOID__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __DB_NUMERIC__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __DB_NUMERIC__Wrapper.setprecision(const val : Byte);
begin
DB_NUMERIC(GetRecordPtr^).precision := val;
end;
function __DB_NUMERIC__Wrapper.getprecision : Byte;
begin
result := DB_NUMERIC(GetRecordPtr^).precision;
end;
procedure __DB_NUMERIC__Wrapper.setscale(const val : Byte);
begin
DB_NUMERIC(GetRecordPtr^).scale := val;
end;
function __DB_NUMERIC__Wrapper.getscale : Byte;
begin
result := DB_NUMERIC(GetRecordPtr^).scale;
end;
procedure __DB_NUMERIC__Wrapper.setsign(const val : Byte);
begin
DB_NUMERIC(GetRecordPtr^).sign := val;
end;
function __DB_NUMERIC__Wrapper.getsign : Byte;
begin
result := DB_NUMERIC(GetRecordPtr^).sign;
end;
function __DB_VARNUMERIC__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __DB_VARNUMERIC__Wrapper.setprecision(const val : Byte);
begin
DB_VARNUMERIC(GetRecordPtr^).precision := val;
end;
function __DB_VARNUMERIC__Wrapper.getprecision : Byte;
begin
result := DB_VARNUMERIC(GetRecordPtr^).precision;
end;
procedure __DB_VARNUMERIC__Wrapper.setscale(const val : SBYTE);
begin
DB_VARNUMERIC(GetRecordPtr^).scale := val;
end;
function __DB_VARNUMERIC__Wrapper.getscale : SBYTE;
begin
result := DB_VARNUMERIC(GetRecordPtr^).scale;
end;
procedure __DB_VARNUMERIC__Wrapper.setsign(const val : Byte);
begin
DB_VARNUMERIC(GetRecordPtr^).sign := val;
end;
function __DB_VARNUMERIC__Wrapper.getsign : Byte;
begin
result := DB_VARNUMERIC(GetRecordPtr^).sign;
end;
function __DBBINDEXT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __DBBINDEXT__Wrapper.setulExtension(const val : UINT);
begin
DBBINDEXT(GetRecordPtr^).ulExtension := val;
end;
function __DBBINDEXT__Wrapper.getulExtension : UINT;
begin
result := DBBINDEXT(GetRecordPtr^).ulExtension;
end;
function __DBBINDING__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __DBBINDING__Wrapper.setiOrdinal(const val : UINT);
begin
DBBINDING(GetRecordPtr^).iOrdinal := val;
end;
function __DBBINDING__Wrapper.getiOrdinal : UINT;
begin
result := DBBINDING(GetRecordPtr^).iOrdinal;
end;
procedure __DBBINDING__Wrapper.setobValue(const val : UINT);
begin
DBBINDING(GetRecordPtr^).obValue := val;
end;
function __DBBINDING__Wrapper.getobValue : UINT;
begin
result := DBBINDING(GetRecordPtr^).obValue;
end;
procedure __DBBINDING__Wrapper.setobLength(const val : UINT);
begin
DBBINDING(GetRecordPtr^).obLength := val;
end;
function __DBBINDING__Wrapper.getobLength : UINT;
begin
result := DBBINDING(GetRecordPtr^).obLength;
end;
procedure __DBBINDING__Wrapper.setobStatus(const val : UINT);
begin
DBBINDING(GetRecordPtr^).obStatus := val;
end;
function __DBBINDING__Wrapper.getobStatus : UINT;
begin
result := DBBINDING(GetRecordPtr^).obStatus;
end;
procedure __DBBINDING__Wrapper.setdwPart(const val : DBPART);
begin
DBBINDING(GetRecordPtr^).dwPart := val;
end;
function __DBBINDING__Wrapper.getdwPart : DBPART;
begin
result := DBBINDING(GetRecordPtr^).dwPart;
end;
procedure __DBBINDING__Wrapper.setdwMemOwner(const val : DBMEMOWNER);
begin
DBBINDING(GetRecordPtr^).dwMemOwner := val;
end;
function __DBBINDING__Wrapper.getdwMemOwner : DBMEMOWNER;
begin
result := DBBINDING(GetRecordPtr^).dwMemOwner;
end;
procedure __DBBINDING__Wrapper.seteParamIO(const val : DBPARAMIO);
begin
DBBINDING(GetRecordPtr^).eParamIO := val;
end;
function __DBBINDING__Wrapper.geteParamIO : DBPARAMIO;
begin
result := DBBINDING(GetRecordPtr^).eParamIO;
end;
procedure __DBBINDING__Wrapper.setcbMaxLen(const val : UINT);
begin
DBBINDING(GetRecordPtr^).cbMaxLen := val;
end;
function __DBBINDING__Wrapper.getcbMaxLen : UINT;
begin
result := DBBINDING(GetRecordPtr^).cbMaxLen;
end;
procedure __DBBINDING__Wrapper.setdwFlags(const val : UINT);
begin
DBBINDING(GetRecordPtr^).dwFlags := val;
end;
function __DBBINDING__Wrapper.getdwFlags : UINT;
begin
result := DBBINDING(GetRecordPtr^).dwFlags;
end;
procedure __DBBINDING__Wrapper.setwType(const val : DBTYPE);
begin
DBBINDING(GetRecordPtr^).wType := val;
end;
function __DBBINDING__Wrapper.getwType : DBTYPE;
begin
result := DBBINDING(GetRecordPtr^).wType;
end;
procedure __DBBINDING__Wrapper.setbPrecision(const val : Byte);
begin
DBBINDING(GetRecordPtr^).bPrecision := val;
end;
function __DBBINDING__Wrapper.getbPrecision : Byte;
begin
result := DBBINDING(GetRecordPtr^).bPrecision;
end;
procedure __DBBINDING__Wrapper.setbScale(const val : Byte);
begin
DBBINDING(GetRecordPtr^).bScale := val;
end;
function __DBBINDING__Wrapper.getbScale : Byte;
begin
result := DBBINDING(GetRecordPtr^).bScale;
end;
function __DBCOLUMNDESC__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __DBCOLUMNDESC__Wrapper.setcPropertySets(const val : UINT);
begin
DBCOLUMNDESC(GetRecordPtr^).cPropertySets := val;
end;
function __DBCOLUMNDESC__Wrapper.getcPropertySets : UINT;
begin
result := DBCOLUMNDESC(GetRecordPtr^).cPropertySets;
end;
procedure __DBCOLUMNDESC__Wrapper.setulColumnSize(const val : UINT);
begin
DBCOLUMNDESC(GetRecordPtr^).ulColumnSize := val;
end;
function __DBCOLUMNDESC__Wrapper.getulColumnSize : UINT;
begin
result := DBCOLUMNDESC(GetRecordPtr^).ulColumnSize;
end;
procedure __DBCOLUMNDESC__Wrapper.setwType(const val : DBTYPE);
begin
DBCOLUMNDESC(GetRecordPtr^).wType := val;
end;
function __DBCOLUMNDESC__Wrapper.getwType : DBTYPE;
begin
result := DBCOLUMNDESC(GetRecordPtr^).wType;
end;
procedure __DBCOLUMNDESC__Wrapper.setbPrecision(const val : Byte);
begin
DBCOLUMNDESC(GetRecordPtr^).bPrecision := val;
end;
function __DBCOLUMNDESC__Wrapper.getbPrecision : Byte;
begin
result := DBCOLUMNDESC(GetRecordPtr^).bPrecision;
end;
procedure __DBCOLUMNDESC__Wrapper.setbScale(const val : Byte);
begin
DBCOLUMNDESC(GetRecordPtr^).bScale := val;
end;
function __DBCOLUMNDESC__Wrapper.getbScale : Byte;
begin
result := DBCOLUMNDESC(GetRecordPtr^).bScale;
end;
function __DBCOLUMNINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __DBCOLUMNINFO__Wrapper.setiOrdinal(const val : UINT);
begin
DBCOLUMNINFO(GetRecordPtr^).iOrdinal := val;
end;
function __DBCOLUMNINFO__Wrapper.getiOrdinal : UINT;
begin
result := DBCOLUMNINFO(GetRecordPtr^).iOrdinal;
end;
procedure __DBCOLUMNINFO__Wrapper.setdwFlags(const val : DBCOLUMNFLAGS);
begin
DBCOLUMNINFO(GetRecordPtr^).dwFlags := val;
end;
function __DBCOLUMNINFO__Wrapper.getdwFlags : DBCOLUMNFLAGS;
begin
result := DBCOLUMNINFO(GetRecordPtr^).dwFlags;
end;
procedure __DBCOLUMNINFO__Wrapper.setulColumnSize(const val : UINT);
begin
DBCOLUMNINFO(GetRecordPtr^).ulColumnSize := val;
end;
function __DBCOLUMNINFO__Wrapper.getulColumnSize : UINT;
begin
result := DBCOLUMNINFO(GetRecordPtr^).ulColumnSize;
end;
procedure __DBCOLUMNINFO__Wrapper.setwType(const val : DBTYPE);
begin
DBCOLUMNINFO(GetRecordPtr^).wType := val;
end;
function __DBCOLUMNINFO__Wrapper.getwType : DBTYPE;
begin
result := DBCOLUMNINFO(GetRecordPtr^).wType;
end;
procedure __DBCOLUMNINFO__Wrapper.setbPrecision(const val : Byte);
begin
DBCOLUMNINFO(GetRecordPtr^).bPrecision := val;
end;
function __DBCOLUMNINFO__Wrapper.getbPrecision : Byte;
begin
result := DBCOLUMNINFO(GetRecordPtr^).bPrecision;
end;
procedure __DBCOLUMNINFO__Wrapper.setbScale(const val : Byte);
begin
DBCOLUMNINFO(GetRecordPtr^).bScale := val;
end;
function __DBCOLUMNINFO__Wrapper.getbScale : Byte;
begin
result := DBCOLUMNINFO(GetRecordPtr^).bScale;
end;
function __DBDATE__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __DBDATE__Wrapper.setyear(const val : SmallInt);
begin
DBDATE(GetRecordPtr^).year := val;
end;
function __DBDATE__Wrapper.getyear : SmallInt;
begin
result := DBDATE(GetRecordPtr^).year;
end;
procedure __DBDATE__Wrapper.setmonth(const val : Word);
begin
DBDATE(GetRecordPtr^).month := val;
end;
function __DBDATE__Wrapper.getmonth : Word;
begin
result := DBDATE(GetRecordPtr^).month;
end;
procedure __DBDATE__Wrapper.setday(const val : Word);
begin
DBDATE(GetRecordPtr^).day := val;
end;
function __DBDATE__Wrapper.getday : Word;
begin
result := DBDATE(GetRecordPtr^).day;
end;
function __DBFAILUREINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __DBFAILUREINFO__Wrapper.setHROW(const val : HROW);
begin
DBFAILUREINFO(GetRecordPtr^).HROW := val;
end;
function __DBFAILUREINFO__Wrapper.getHROW : HROW;
begin
result := DBFAILUREINFO(GetRecordPtr^).HROW;
end;
procedure __DBFAILUREINFO__Wrapper.setiColumn(const val : UINT);
begin
DBFAILUREINFO(GetRecordPtr^).iColumn := val;
end;
function __DBFAILUREINFO__Wrapper.getiColumn : UINT;
begin
result := DBFAILUREINFO(GetRecordPtr^).iColumn;
end;
function __DBFILETIME__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __DBFILETIME__Wrapper.setdwLowDateTime(const val : UINT);
begin
DBFILETIME(GetRecordPtr^).dwLowDateTime := val;
end;
function __DBFILETIME__Wrapper.getdwLowDateTime : UINT;
begin
result := DBFILETIME(GetRecordPtr^).dwLowDateTime;
end;
procedure __DBFILETIME__Wrapper.setdwHighDateTime(const val : UINT);
begin
DBFILETIME(GetRecordPtr^).dwHighDateTime := val;
end;
function __DBFILETIME__Wrapper.getdwHighDateTime : UINT;
begin
result := DBFILETIME(GetRecordPtr^).dwHighDateTime;
end;
function __DBID__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __DBID__Wrapper.seteKind(const val : DBKIND);
begin
DBID(GetRecordPtr^).eKind := val;
end;
function __DBID__Wrapper.geteKind : DBKIND;
begin
result := DBID(GetRecordPtr^).eKind;
end;
function __DBIDGUID__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __DBIDNAME__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __DBIDNAME__Wrapper.setulPropid(const val : UINT);
begin
DBIDNAME(GetRecordPtr^).ulPropid := val;
end;
function __DBIDNAME__Wrapper.getulPropid : UINT;
begin
result := DBIDNAME(GetRecordPtr^).ulPropid;
end;
function __DBINDEXCOLUMNDESC__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __DBINDEXCOLUMNDESC__Wrapper.seteIndexColOrder(const val : DBINDEX_COL_ORDER);
begin
DBINDEXCOLUMNDESC(GetRecordPtr^).eIndexColOrder := val;
end;
function __DBINDEXCOLUMNDESC__Wrapper.geteIndexColOrder : DBINDEX_COL_ORDER;
begin
result := DBINDEXCOLUMNDESC(GetRecordPtr^).eIndexColOrder;
end;
function __DBLITERALINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __DBLITERALINFO__Wrapper.setlt(const val : UINT);
begin
DBLITERALINFO(GetRecordPtr^).lt := val;
end;
function __DBLITERALINFO__Wrapper.getlt : UINT;
begin
result := DBLITERALINFO(GetRecordPtr^).lt;
end;
procedure __DBLITERALINFO__Wrapper.setfSupported(const val : BOOL);
begin
DBLITERALINFO(GetRecordPtr^).fSupported := val;
end;
function __DBLITERALINFO__Wrapper.getfSupported : BOOL;
begin
result := DBLITERALINFO(GetRecordPtr^).fSupported;
end;
procedure __DBLITERALINFO__Wrapper.setcchMaxLen(const val : UINT);
begin
DBLITERALINFO(GetRecordPtr^).cchMaxLen := val;
end;
function __DBLITERALINFO__Wrapper.getcchMaxLen : UINT;
begin
result := DBLITERALINFO(GetRecordPtr^).cchMaxLen;
end;
function __DBOBJECT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __DBOBJECT__Wrapper.setdwFlags(const val : UINT);
begin
DBOBJECT(GetRecordPtr^).dwFlags := val;
end;
function __DBOBJECT__Wrapper.getdwFlags : UINT;
begin
result := DBOBJECT(GetRecordPtr^).dwFlags;
end;
function __DBPARAMBINDINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __DBPARAMBINDINFO__Wrapper.setulParamSize(const val : UINT);
begin
DBPARAMBINDINFO(GetRecordPtr^).ulParamSize := val;
end;
function __DBPARAMBINDINFO__Wrapper.getulParamSize : UINT;
begin
result := DBPARAMBINDINFO(GetRecordPtr^).ulParamSize;
end;
procedure __DBPARAMBINDINFO__Wrapper.setdwFlags(const val : DBPARAMFLAGS);
begin
DBPARAMBINDINFO(GetRecordPtr^).dwFlags := val;
end;
function __DBPARAMBINDINFO__Wrapper.getdwFlags : DBPARAMFLAGS;
begin
result := DBPARAMBINDINFO(GetRecordPtr^).dwFlags;
end;
procedure __DBPARAMBINDINFO__Wrapper.setbPrecision(const val : Byte);
begin
DBPARAMBINDINFO(GetRecordPtr^).bPrecision := val;
end;
function __DBPARAMBINDINFO__Wrapper.getbPrecision : Byte;
begin
result := DBPARAMBINDINFO(GetRecordPtr^).bPrecision;
end;
procedure __DBPARAMBINDINFO__Wrapper.setbScale(const val : Byte);
begin
DBPARAMBINDINFO(GetRecordPtr^).bScale := val;
end;
function __DBPARAMBINDINFO__Wrapper.getbScale : Byte;
begin
result := DBPARAMBINDINFO(GetRecordPtr^).bScale;
end;
function __DBPARAMINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __DBPARAMINFO__Wrapper.setdwFlags(const val : DBPARAMFLAGS);
begin
DBPARAMINFO(GetRecordPtr^).dwFlags := val;
end;
function __DBPARAMINFO__Wrapper.getdwFlags : DBPARAMFLAGS;
begin
result := DBPARAMINFO(GetRecordPtr^).dwFlags;
end;
procedure __DBPARAMINFO__Wrapper.setiOrdinal(const val : UINT);
begin
DBPARAMINFO(GetRecordPtr^).iOrdinal := val;
end;
function __DBPARAMINFO__Wrapper.getiOrdinal : UINT;
begin
result := DBPARAMINFO(GetRecordPtr^).iOrdinal;
end;
procedure __DBPARAMINFO__Wrapper.setulParamSize(const val : UINT);
begin
DBPARAMINFO(GetRecordPtr^).ulParamSize := val;
end;
function __DBPARAMINFO__Wrapper.getulParamSize : UINT;
begin
result := DBPARAMINFO(GetRecordPtr^).ulParamSize;
end;
procedure __DBPARAMINFO__Wrapper.setwType(const val : DBTYPE);
begin
DBPARAMINFO(GetRecordPtr^).wType := val;
end;
function __DBPARAMINFO__Wrapper.getwType : DBTYPE;
begin
result := DBPARAMINFO(GetRecordPtr^).wType;
end;
procedure __DBPARAMINFO__Wrapper.setbPrecision(const val : Byte);
begin
DBPARAMINFO(GetRecordPtr^).bPrecision := val;
end;
function __DBPARAMINFO__Wrapper.getbPrecision : Byte;
begin
result := DBPARAMINFO(GetRecordPtr^).bPrecision;
end;
procedure __DBPARAMINFO__Wrapper.setbScale(const val : Byte);
begin
DBPARAMINFO(GetRecordPtr^).bScale := val;
end;
function __DBPARAMINFO__Wrapper.getbScale : Byte;
begin
result := DBPARAMINFO(GetRecordPtr^).bScale;
end;
function __DBPARAMS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __DBPARAMS__Wrapper.setcParamSets(const val : UINT);
begin
DBPARAMS(GetRecordPtr^).cParamSets := val;
end;
function __DBPARAMS__Wrapper.getcParamSets : UINT;
begin
result := DBPARAMS(GetRecordPtr^).cParamSets;
end;
procedure __DBPARAMS__Wrapper.setHACCESSOR(const val : HACCESSOR);
begin
DBPARAMS(GetRecordPtr^).HACCESSOR := val;
end;
function __DBPARAMS__Wrapper.getHACCESSOR : HACCESSOR;
begin
result := DBPARAMS(GetRecordPtr^).HACCESSOR;
end;
function __DBPROP__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __DBPROP__Wrapper.setdwPropertyID(const val : DBPROPID);
begin
DBPROP(GetRecordPtr^).dwPropertyID := val;
end;
function __DBPROP__Wrapper.getdwPropertyID : DBPROPID;
begin
result := DBPROP(GetRecordPtr^).dwPropertyID;
end;
procedure __DBPROP__Wrapper.setdwOptions(const val : DBPROPOPTIONS);
begin
DBPROP(GetRecordPtr^).dwOptions := val;
end;
function __DBPROP__Wrapper.getdwOptions : DBPROPOPTIONS;
begin
result := DBPROP(GetRecordPtr^).dwOptions;
end;
procedure __DBPROP__Wrapper.setdwStatus(const val : DBPROPSTATUS);
begin
DBPROP(GetRecordPtr^).dwStatus := val;
end;
function __DBPROP__Wrapper.getdwStatus : DBPROPSTATUS;
begin
result := DBPROP(GetRecordPtr^).dwStatus;
end;
procedure __DBPROP__Wrapper.setvValue(const val : OleVariant);
begin
DBPROP(GetRecordPtr^).vValue := val;
end;
function __DBPROP__Wrapper.getvValue : OleVariant;
begin
result := DBPROP(GetRecordPtr^).vValue;
end;
function __DBPROPIDSET__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __DBPROPIDSET__Wrapper.setcPropertyIDs(const val : UINT);
begin
DBPROPIDSET(GetRecordPtr^).cPropertyIDs := val;
end;
function __DBPROPIDSET__Wrapper.getcPropertyIDs : UINT;
begin
result := DBPROPIDSET(GetRecordPtr^).cPropertyIDs;
end;
function __DBPROPINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __DBPROPINFO__Wrapper.setdwPropertyID(const val : DBPROPID);
begin
DBPROPINFO(GetRecordPtr^).dwPropertyID := val;
end;
function __DBPROPINFO__Wrapper.getdwPropertyID : DBPROPID;
begin
result := DBPROPINFO(GetRecordPtr^).dwPropertyID;
end;
procedure __DBPROPINFO__Wrapper.setdwFlags(const val : DBPROPFLAGS);
begin
DBPROPINFO(GetRecordPtr^).dwFlags := val;
end;
function __DBPROPINFO__Wrapper.getdwFlags : DBPROPFLAGS;
begin
result := DBPROPINFO(GetRecordPtr^).dwFlags;
end;
procedure __DBPROPINFO__Wrapper.setvtType(const val : Word);
begin
DBPROPINFO(GetRecordPtr^).vtType := val;
end;
function __DBPROPINFO__Wrapper.getvtType : Word;
begin
result := DBPROPINFO(GetRecordPtr^).vtType;
end;
procedure __DBPROPINFO__Wrapper.setvValues(const val : OleVariant);
begin
DBPROPINFO(GetRecordPtr^).vValues := val;
end;
function __DBPROPINFO__Wrapper.getvValues : OleVariant;
begin
result := DBPROPINFO(GetRecordPtr^).vValues;
end;
function __DBPROPINFOSET__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __DBPROPINFOSET__Wrapper.setcPropertyInfos(const val : UINT);
begin
DBPROPINFOSET(GetRecordPtr^).cPropertyInfos := val;
end;
function __DBPROPINFOSET__Wrapper.getcPropertyInfos : UINT;
begin
result := DBPROPINFOSET(GetRecordPtr^).cPropertyInfos;
end;
function __DBPROPSET__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __DBPROPSET__Wrapper.setcProperties(const val : UINT);
begin
DBPROPSET(GetRecordPtr^).cProperties := val;
end;
function __DBPROPSET__Wrapper.getcProperties : UINT;
begin
result := DBPROPSET(GetRecordPtr^).cProperties;
end;
function __DBTIME__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __DBTIME__Wrapper.sethour(const val : Word);
begin
DBTIME(GetRecordPtr^).hour := val;
end;
function __DBTIME__Wrapper.gethour : Word;
begin
result := DBTIME(GetRecordPtr^).hour;
end;
procedure __DBTIME__Wrapper.setminute(const val : Word);
begin
DBTIME(GetRecordPtr^).minute := val;
end;
function __DBTIME__Wrapper.getminute : Word;
begin
result := DBTIME(GetRecordPtr^).minute;
end;
procedure __DBTIME__Wrapper.setsecond(const val : Word);
begin
DBTIME(GetRecordPtr^).second := val;
end;
function __DBTIME__Wrapper.getsecond : Word;
begin
result := DBTIME(GetRecordPtr^).second;
end;
function __DBTIMESTAMP__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __DBTIMESTAMP__Wrapper.setyear(const val : SmallInt);
begin
DBTIMESTAMP(GetRecordPtr^).year := val;
end;
function __DBTIMESTAMP__Wrapper.getyear : SmallInt;
begin
result := DBTIMESTAMP(GetRecordPtr^).year;
end;
procedure __DBTIMESTAMP__Wrapper.setmonth(const val : Word);
begin
DBTIMESTAMP(GetRecordPtr^).month := val;
end;
function __DBTIMESTAMP__Wrapper.getmonth : Word;
begin
result := DBTIMESTAMP(GetRecordPtr^).month;
end;
procedure __DBTIMESTAMP__Wrapper.setday(const val : Word);
begin
DBTIMESTAMP(GetRecordPtr^).day := val;
end;
function __DBTIMESTAMP__Wrapper.getday : Word;
begin
result := DBTIMESTAMP(GetRecordPtr^).day;
end;
procedure __DBTIMESTAMP__Wrapper.sethour(const val : Word);
begin
DBTIMESTAMP(GetRecordPtr^).hour := val;
end;
function __DBTIMESTAMP__Wrapper.gethour : Word;
begin
result := DBTIMESTAMP(GetRecordPtr^).hour;
end;
procedure __DBTIMESTAMP__Wrapper.setminute(const val : Word);
begin
DBTIMESTAMP(GetRecordPtr^).minute := val;
end;
function __DBTIMESTAMP__Wrapper.getminute : Word;
begin
result := DBTIMESTAMP(GetRecordPtr^).minute;
end;
procedure __DBTIMESTAMP__Wrapper.setsecond(const val : Word);
begin
DBTIMESTAMP(GetRecordPtr^).second := val;
end;
function __DBTIMESTAMP__Wrapper.getsecond : Word;
begin
result := DBTIMESTAMP(GetRecordPtr^).second;
end;
procedure __DBTIMESTAMP__Wrapper.setfraction(const val : UINT);
begin
DBTIMESTAMP(GetRecordPtr^).fraction := val;
end;
function __DBTIMESTAMP__Wrapper.getfraction : UINT;
begin
result := DBTIMESTAMP(GetRecordPtr^).fraction;
end;
function __DBVECTOR__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __DBVECTOR__Wrapper.setsize(const val : UINT);
begin
DBVECTOR(GetRecordPtr^).size := val;
end;
function __DBVECTOR__Wrapper.getsize : UINT;
begin
result := DBVECTOR(GetRecordPtr^).size;
end;
function __ERRORINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ERRORINFO__Wrapper.setdwMinor(const val : UINT);
begin
ERRORINFO(GetRecordPtr^).dwMinor := val;
end;
function __ERRORINFO__Wrapper.getdwMinor : UINT;
begin
result := ERRORINFO(GetRecordPtr^).dwMinor;
end;
procedure __ERRORINFO__Wrapper.setdispid(const val : Integer);
begin
ERRORINFO(GetRecordPtr^).dispid := val;
end;
function __ERRORINFO__Wrapper.getdispid : Integer;
begin
result := ERRORINFO(GetRecordPtr^).dispid;
end;
function __EXPLICIT_ACCESS_W__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __EXPLICIT_ACCESS_W__Wrapper.setgrfAccessPermissions(const val : UINT);
begin
EXPLICIT_ACCESS_W(GetRecordPtr^).grfAccessPermissions := val;
end;
function __EXPLICIT_ACCESS_W__Wrapper.getgrfAccessPermissions : UINT;
begin
result := EXPLICIT_ACCESS_W(GetRecordPtr^).grfAccessPermissions;
end;
procedure __EXPLICIT_ACCESS_W__Wrapper.setgrfAccessMode(const val : ACCESS_MODE);
begin
EXPLICIT_ACCESS_W(GetRecordPtr^).grfAccessMode := val;
end;
function __EXPLICIT_ACCESS_W__Wrapper.getgrfAccessMode : ACCESS_MODE;
begin
result := EXPLICIT_ACCESS_W(GetRecordPtr^).grfAccessMode;
end;
procedure __EXPLICIT_ACCESS_W__Wrapper.setgrfInheritance(const val : UINT);
begin
EXPLICIT_ACCESS_W(GetRecordPtr^).grfInheritance := val;
end;
function __EXPLICIT_ACCESS_W__Wrapper.getgrfInheritance : UINT;
begin
result := EXPLICIT_ACCESS_W(GetRecordPtr^).grfInheritance;
end;
function __MDAXISINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __MDAXISINFO__Wrapper.setcbSize(const val : UINT);
begin
MDAXISINFO(GetRecordPtr^).cbSize := val;
end;
function __MDAXISINFO__Wrapper.getcbSize : UINT;
begin
result := MDAXISINFO(GetRecordPtr^).cbSize;
end;
procedure __MDAXISINFO__Wrapper.setiAxis(const val : UINT);
begin
MDAXISINFO(GetRecordPtr^).iAxis := val;
end;
function __MDAXISINFO__Wrapper.getiAxis : UINT;
begin
result := MDAXISINFO(GetRecordPtr^).iAxis;
end;
procedure __MDAXISINFO__Wrapper.setcDimensions(const val : UINT);
begin
MDAXISINFO(GetRecordPtr^).cDimensions := val;
end;
function __MDAXISINFO__Wrapper.getcDimensions : UINT;
begin
result := MDAXISINFO(GetRecordPtr^).cDimensions;
end;
procedure __MDAXISINFO__Wrapper.setcCoordinates(const val : UINT);
begin
MDAXISINFO(GetRecordPtr^).cCoordinates := val;
end;
function __MDAXISINFO__Wrapper.getcCoordinates : UINT;
begin
result := MDAXISINFO(GetRecordPtr^).cCoordinates;
end;
function __SEC_OBJECT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __SEC_OBJECT__Wrapper.setcObjects(const val : UINT);
begin
SEC_OBJECT(GetRecordPtr^).cObjects := val;
end;
function __SEC_OBJECT__Wrapper.getcObjects : UINT;
begin
result := SEC_OBJECT(GetRecordPtr^).cObjects;
end;
function __SEC_OBJECT_ELEMENT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TBoid__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TDBBindExt__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDBBindExt__Wrapper.setulExtension(const val : UINT);
begin
TDBBindExt(GetRecordPtr^).ulExtension := val;
end;
function __TDBBindExt__Wrapper.getulExtension : UINT;
begin
result := TDBBindExt(GetRecordPtr^).ulExtension;
end;
function __TDBBinding__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDBBinding__Wrapper.setiOrdinal(const val : UINT);
begin
TDBBinding(GetRecordPtr^).iOrdinal := val;
end;
function __TDBBinding__Wrapper.getiOrdinal : UINT;
begin
result := TDBBinding(GetRecordPtr^).iOrdinal;
end;
procedure __TDBBinding__Wrapper.setobValue(const val : UINT);
begin
TDBBinding(GetRecordPtr^).obValue := val;
end;
function __TDBBinding__Wrapper.getobValue : UINT;
begin
result := TDBBinding(GetRecordPtr^).obValue;
end;
procedure __TDBBinding__Wrapper.setobLength(const val : UINT);
begin
TDBBinding(GetRecordPtr^).obLength := val;
end;
function __TDBBinding__Wrapper.getobLength : UINT;
begin
result := TDBBinding(GetRecordPtr^).obLength;
end;
procedure __TDBBinding__Wrapper.setobStatus(const val : UINT);
begin
TDBBinding(GetRecordPtr^).obStatus := val;
end;
function __TDBBinding__Wrapper.getobStatus : UINT;
begin
result := TDBBinding(GetRecordPtr^).obStatus;
end;
procedure __TDBBinding__Wrapper.setdwPart(const val : DBPART);
begin
TDBBinding(GetRecordPtr^).dwPart := val;
end;
function __TDBBinding__Wrapper.getdwPart : DBPART;
begin
result := TDBBinding(GetRecordPtr^).dwPart;
end;
procedure __TDBBinding__Wrapper.setdwMemOwner(const val : DBMEMOWNER);
begin
TDBBinding(GetRecordPtr^).dwMemOwner := val;
end;
function __TDBBinding__Wrapper.getdwMemOwner : DBMEMOWNER;
begin
result := TDBBinding(GetRecordPtr^).dwMemOwner;
end;
procedure __TDBBinding__Wrapper.seteParamIO(const val : DBPARAMIO);
begin
TDBBinding(GetRecordPtr^).eParamIO := val;
end;
function __TDBBinding__Wrapper.geteParamIO : DBPARAMIO;
begin
result := TDBBinding(GetRecordPtr^).eParamIO;
end;
procedure __TDBBinding__Wrapper.setcbMaxLen(const val : UINT);
begin
TDBBinding(GetRecordPtr^).cbMaxLen := val;
end;
function __TDBBinding__Wrapper.getcbMaxLen : UINT;
begin
result := TDBBinding(GetRecordPtr^).cbMaxLen;
end;
procedure __TDBBinding__Wrapper.setdwFlags(const val : UINT);
begin
TDBBinding(GetRecordPtr^).dwFlags := val;
end;
function __TDBBinding__Wrapper.getdwFlags : UINT;
begin
result := TDBBinding(GetRecordPtr^).dwFlags;
end;
procedure __TDBBinding__Wrapper.setwType(const val : DBTYPE);
begin
TDBBinding(GetRecordPtr^).wType := val;
end;
function __TDBBinding__Wrapper.getwType : DBTYPE;
begin
result := TDBBinding(GetRecordPtr^).wType;
end;
procedure __TDBBinding__Wrapper.setbPrecision(const val : Byte);
begin
TDBBinding(GetRecordPtr^).bPrecision := val;
end;
function __TDBBinding__Wrapper.getbPrecision : Byte;
begin
result := TDBBinding(GetRecordPtr^).bPrecision;
end;
procedure __TDBBinding__Wrapper.setbScale(const val : Byte);
begin
TDBBinding(GetRecordPtr^).bScale := val;
end;
function __TDBBinding__Wrapper.getbScale : Byte;
begin
result := TDBBinding(GetRecordPtr^).bScale;
end;
function __TDBColumnDesc__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDBColumnDesc__Wrapper.setcPropertySets(const val : UINT);
begin
TDBColumnDesc(GetRecordPtr^).cPropertySets := val;
end;
function __TDBColumnDesc__Wrapper.getcPropertySets : UINT;
begin
result := TDBColumnDesc(GetRecordPtr^).cPropertySets;
end;
procedure __TDBColumnDesc__Wrapper.setulColumnSize(const val : UINT);
begin
TDBColumnDesc(GetRecordPtr^).ulColumnSize := val;
end;
function __TDBColumnDesc__Wrapper.getulColumnSize : UINT;
begin
result := TDBColumnDesc(GetRecordPtr^).ulColumnSize;
end;
procedure __TDBColumnDesc__Wrapper.setwType(const val : DBTYPE);
begin
TDBColumnDesc(GetRecordPtr^).wType := val;
end;
function __TDBColumnDesc__Wrapper.getwType : DBTYPE;
begin
result := TDBColumnDesc(GetRecordPtr^).wType;
end;
procedure __TDBColumnDesc__Wrapper.setbPrecision(const val : Byte);
begin
TDBColumnDesc(GetRecordPtr^).bPrecision := val;
end;
function __TDBColumnDesc__Wrapper.getbPrecision : Byte;
begin
result := TDBColumnDesc(GetRecordPtr^).bPrecision;
end;
procedure __TDBColumnDesc__Wrapper.setbScale(const val : Byte);
begin
TDBColumnDesc(GetRecordPtr^).bScale := val;
end;
function __TDBColumnDesc__Wrapper.getbScale : Byte;
begin
result := TDBColumnDesc(GetRecordPtr^).bScale;
end;
function __TDBColumnInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDBColumnInfo__Wrapper.setiOrdinal(const val : UINT);
begin
TDBColumnInfo(GetRecordPtr^).iOrdinal := val;
end;
function __TDBColumnInfo__Wrapper.getiOrdinal : UINT;
begin
result := TDBColumnInfo(GetRecordPtr^).iOrdinal;
end;
procedure __TDBColumnInfo__Wrapper.setdwFlags(const val : DBCOLUMNFLAGS);
begin
TDBColumnInfo(GetRecordPtr^).dwFlags := val;
end;
function __TDBColumnInfo__Wrapper.getdwFlags : DBCOLUMNFLAGS;
begin
result := TDBColumnInfo(GetRecordPtr^).dwFlags;
end;
procedure __TDBColumnInfo__Wrapper.setulColumnSize(const val : UINT);
begin
TDBColumnInfo(GetRecordPtr^).ulColumnSize := val;
end;
function __TDBColumnInfo__Wrapper.getulColumnSize : UINT;
begin
result := TDBColumnInfo(GetRecordPtr^).ulColumnSize;
end;
procedure __TDBColumnInfo__Wrapper.setwType(const val : DBTYPE);
begin
TDBColumnInfo(GetRecordPtr^).wType := val;
end;
function __TDBColumnInfo__Wrapper.getwType : DBTYPE;
begin
result := TDBColumnInfo(GetRecordPtr^).wType;
end;
procedure __TDBColumnInfo__Wrapper.setbPrecision(const val : Byte);
begin
TDBColumnInfo(GetRecordPtr^).bPrecision := val;
end;
function __TDBColumnInfo__Wrapper.getbPrecision : Byte;
begin
result := TDBColumnInfo(GetRecordPtr^).bPrecision;
end;
procedure __TDBColumnInfo__Wrapper.setbScale(const val : Byte);
begin
TDBColumnInfo(GetRecordPtr^).bScale := val;
end;
function __TDBColumnInfo__Wrapper.getbScale : Byte;
begin
result := TDBColumnInfo(GetRecordPtr^).bScale;
end;
function __TDBDate__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDBDate__Wrapper.setyear(const val : SmallInt);
begin
TDBDate(GetRecordPtr^).year := val;
end;
function __TDBDate__Wrapper.getyear : SmallInt;
begin
result := TDBDate(GetRecordPtr^).year;
end;
procedure __TDBDate__Wrapper.setmonth(const val : Word);
begin
TDBDate(GetRecordPtr^).month := val;
end;
function __TDBDate__Wrapper.getmonth : Word;
begin
result := TDBDate(GetRecordPtr^).month;
end;
procedure __TDBDate__Wrapper.setday(const val : Word);
begin
TDBDate(GetRecordPtr^).day := val;
end;
function __TDBDate__Wrapper.getday : Word;
begin
result := TDBDate(GetRecordPtr^).day;
end;
function __TDBFailureInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDBFailureInfo__Wrapper.setHROW(const val : HROW);
begin
TDBFailureInfo(GetRecordPtr^).HROW := val;
end;
function __TDBFailureInfo__Wrapper.getHROW : HROW;
begin
result := TDBFailureInfo(GetRecordPtr^).HROW;
end;
procedure __TDBFailureInfo__Wrapper.setiColumn(const val : UINT);
begin
TDBFailureInfo(GetRecordPtr^).iColumn := val;
end;
function __TDBFailureInfo__Wrapper.getiColumn : UINT;
begin
result := TDBFailureInfo(GetRecordPtr^).iColumn;
end;
function __TDBFileTime__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDBFileTime__Wrapper.setdwLowDateTime(const val : UINT);
begin
TDBFileTime(GetRecordPtr^).dwLowDateTime := val;
end;
function __TDBFileTime__Wrapper.getdwLowDateTime : UINT;
begin
result := TDBFileTime(GetRecordPtr^).dwLowDateTime;
end;
procedure __TDBFileTime__Wrapper.setdwHighDateTime(const val : UINT);
begin
TDBFileTime(GetRecordPtr^).dwHighDateTime := val;
end;
function __TDBFileTime__Wrapper.getdwHighDateTime : UINT;
begin
result := TDBFileTime(GetRecordPtr^).dwHighDateTime;
end;
function __TDBID__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDBID__Wrapper.seteKind(const val : DBKIND);
begin
TDBID(GetRecordPtr^).eKind := val;
end;
function __TDBID__Wrapper.geteKind : DBKIND;
begin
result := TDBID(GetRecordPtr^).eKind;
end;
function __TDBIDGuid__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TDBIDName__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDBIDName__Wrapper.setulPropid(const val : UINT);
begin
TDBIDName(GetRecordPtr^).ulPropid := val;
end;
function __TDBIDName__Wrapper.getulPropid : UINT;
begin
result := TDBIDName(GetRecordPtr^).ulPropid;
end;
function __TDBIndexColumnDesc__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDBIndexColumnDesc__Wrapper.seteIndexColOrder(const val : DBINDEX_COL_ORDER);
begin
TDBIndexColumnDesc(GetRecordPtr^).eIndexColOrder := val;
end;
function __TDBIndexColumnDesc__Wrapper.geteIndexColOrder : DBINDEX_COL_ORDER;
begin
result := TDBIndexColumnDesc(GetRecordPtr^).eIndexColOrder;
end;
function __TDBLiteralInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDBLiteralInfo__Wrapper.setlt(const val : UINT);
begin
TDBLiteralInfo(GetRecordPtr^).lt := val;
end;
function __TDBLiteralInfo__Wrapper.getlt : UINT;
begin
result := TDBLiteralInfo(GetRecordPtr^).lt;
end;
procedure __TDBLiteralInfo__Wrapper.setfSupported(const val : BOOL);
begin
TDBLiteralInfo(GetRecordPtr^).fSupported := val;
end;
function __TDBLiteralInfo__Wrapper.getfSupported : BOOL;
begin
result := TDBLiteralInfo(GetRecordPtr^).fSupported;
end;
procedure __TDBLiteralInfo__Wrapper.setcchMaxLen(const val : UINT);
begin
TDBLiteralInfo(GetRecordPtr^).cchMaxLen := val;
end;
function __TDBLiteralInfo__Wrapper.getcchMaxLen : UINT;
begin
result := TDBLiteralInfo(GetRecordPtr^).cchMaxLen;
end;
function __TDBNumeric__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDBNumeric__Wrapper.setprecision(const val : Byte);
begin
TDBNumeric(GetRecordPtr^).precision := val;
end;
function __TDBNumeric__Wrapper.getprecision : Byte;
begin
result := TDBNumeric(GetRecordPtr^).precision;
end;
procedure __TDBNumeric__Wrapper.setscale(const val : Byte);
begin
TDBNumeric(GetRecordPtr^).scale := val;
end;
function __TDBNumeric__Wrapper.getscale : Byte;
begin
result := TDBNumeric(GetRecordPtr^).scale;
end;
procedure __TDBNumeric__Wrapper.setsign(const val : Byte);
begin
TDBNumeric(GetRecordPtr^).sign := val;
end;
function __TDBNumeric__Wrapper.getsign : Byte;
begin
result := TDBNumeric(GetRecordPtr^).sign;
end;
function __TDBObject__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDBObject__Wrapper.setdwFlags(const val : UINT);
begin
TDBObject(GetRecordPtr^).dwFlags := val;
end;
function __TDBObject__Wrapper.getdwFlags : UINT;
begin
result := TDBObject(GetRecordPtr^).dwFlags;
end;
function __TDBParamBindInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDBParamBindInfo__Wrapper.setulParamSize(const val : UINT);
begin
TDBParamBindInfo(GetRecordPtr^).ulParamSize := val;
end;
function __TDBParamBindInfo__Wrapper.getulParamSize : UINT;
begin
result := TDBParamBindInfo(GetRecordPtr^).ulParamSize;
end;
procedure __TDBParamBindInfo__Wrapper.setdwFlags(const val : DBPARAMFLAGS);
begin
TDBParamBindInfo(GetRecordPtr^).dwFlags := val;
end;
function __TDBParamBindInfo__Wrapper.getdwFlags : DBPARAMFLAGS;
begin
result := TDBParamBindInfo(GetRecordPtr^).dwFlags;
end;
procedure __TDBParamBindInfo__Wrapper.setbPrecision(const val : Byte);
begin
TDBParamBindInfo(GetRecordPtr^).bPrecision := val;
end;
function __TDBParamBindInfo__Wrapper.getbPrecision : Byte;
begin
result := TDBParamBindInfo(GetRecordPtr^).bPrecision;
end;
procedure __TDBParamBindInfo__Wrapper.setbScale(const val : Byte);
begin
TDBParamBindInfo(GetRecordPtr^).bScale := val;
end;
function __TDBParamBindInfo__Wrapper.getbScale : Byte;
begin
result := TDBParamBindInfo(GetRecordPtr^).bScale;
end;
function __TDBParamInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDBParamInfo__Wrapper.setdwFlags(const val : DBPARAMFLAGS);
begin
TDBParamInfo(GetRecordPtr^).dwFlags := val;
end;
function __TDBParamInfo__Wrapper.getdwFlags : DBPARAMFLAGS;
begin
result := TDBParamInfo(GetRecordPtr^).dwFlags;
end;
procedure __TDBParamInfo__Wrapper.setiOrdinal(const val : UINT);
begin
TDBParamInfo(GetRecordPtr^).iOrdinal := val;
end;
function __TDBParamInfo__Wrapper.getiOrdinal : UINT;
begin
result := TDBParamInfo(GetRecordPtr^).iOrdinal;
end;
procedure __TDBParamInfo__Wrapper.setulParamSize(const val : UINT);
begin
TDBParamInfo(GetRecordPtr^).ulParamSize := val;
end;
function __TDBParamInfo__Wrapper.getulParamSize : UINT;
begin
result := TDBParamInfo(GetRecordPtr^).ulParamSize;
end;
procedure __TDBParamInfo__Wrapper.setwType(const val : DBTYPE);
begin
TDBParamInfo(GetRecordPtr^).wType := val;
end;
function __TDBParamInfo__Wrapper.getwType : DBTYPE;
begin
result := TDBParamInfo(GetRecordPtr^).wType;
end;
procedure __TDBParamInfo__Wrapper.setbPrecision(const val : Byte);
begin
TDBParamInfo(GetRecordPtr^).bPrecision := val;
end;
function __TDBParamInfo__Wrapper.getbPrecision : Byte;
begin
result := TDBParamInfo(GetRecordPtr^).bPrecision;
end;
procedure __TDBParamInfo__Wrapper.setbScale(const val : Byte);
begin
TDBParamInfo(GetRecordPtr^).bScale := val;
end;
function __TDBParamInfo__Wrapper.getbScale : Byte;
begin
result := TDBParamInfo(GetRecordPtr^).bScale;
end;
function __TDBParams__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDBParams__Wrapper.setcParamSets(const val : UINT);
begin
TDBParams(GetRecordPtr^).cParamSets := val;
end;
function __TDBParams__Wrapper.getcParamSets : UINT;
begin
result := TDBParams(GetRecordPtr^).cParamSets;
end;
procedure __TDBParams__Wrapper.setHACCESSOR(const val : HACCESSOR);
begin
TDBParams(GetRecordPtr^).HACCESSOR := val;
end;
function __TDBParams__Wrapper.getHACCESSOR : HACCESSOR;
begin
result := TDBParams(GetRecordPtr^).HACCESSOR;
end;
function __TDBProp__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDBProp__Wrapper.setdwPropertyID(const val : DBPROPID);
begin
TDBProp(GetRecordPtr^).dwPropertyID := val;
end;
function __TDBProp__Wrapper.getdwPropertyID : DBPROPID;
begin
result := TDBProp(GetRecordPtr^).dwPropertyID;
end;
procedure __TDBProp__Wrapper.setdwOptions(const val : DBPROPOPTIONS);
begin
TDBProp(GetRecordPtr^).dwOptions := val;
end;
function __TDBProp__Wrapper.getdwOptions : DBPROPOPTIONS;
begin
result := TDBProp(GetRecordPtr^).dwOptions;
end;
procedure __TDBProp__Wrapper.setdwStatus(const val : DBPROPSTATUS);
begin
TDBProp(GetRecordPtr^).dwStatus := val;
end;
function __TDBProp__Wrapper.getdwStatus : DBPROPSTATUS;
begin
result := TDBProp(GetRecordPtr^).dwStatus;
end;
procedure __TDBProp__Wrapper.setvValue(const val : OleVariant);
begin
TDBProp(GetRecordPtr^).vValue := val;
end;
function __TDBProp__Wrapper.getvValue : OleVariant;
begin
result := TDBProp(GetRecordPtr^).vValue;
end;
function __TDBPropIDSet__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDBPropIDSet__Wrapper.setcPropertyIDs(const val : UINT);
begin
TDBPropIDSet(GetRecordPtr^).cPropertyIDs := val;
end;
function __TDBPropIDSet__Wrapper.getcPropertyIDs : UINT;
begin
result := TDBPropIDSet(GetRecordPtr^).cPropertyIDs;
end;
function __TDBPropInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDBPropInfo__Wrapper.setdwPropertyID(const val : DBPROPID);
begin
TDBPropInfo(GetRecordPtr^).dwPropertyID := val;
end;
function __TDBPropInfo__Wrapper.getdwPropertyID : DBPROPID;
begin
result := TDBPropInfo(GetRecordPtr^).dwPropertyID;
end;
procedure __TDBPropInfo__Wrapper.setdwFlags(const val : DBPROPFLAGS);
begin
TDBPropInfo(GetRecordPtr^).dwFlags := val;
end;
function __TDBPropInfo__Wrapper.getdwFlags : DBPROPFLAGS;
begin
result := TDBPropInfo(GetRecordPtr^).dwFlags;
end;
procedure __TDBPropInfo__Wrapper.setvtType(const val : Word);
begin
TDBPropInfo(GetRecordPtr^).vtType := val;
end;
function __TDBPropInfo__Wrapper.getvtType : Word;
begin
result := TDBPropInfo(GetRecordPtr^).vtType;
end;
procedure __TDBPropInfo__Wrapper.setvValues(const val : OleVariant);
begin
TDBPropInfo(GetRecordPtr^).vValues := val;
end;
function __TDBPropInfo__Wrapper.getvValues : OleVariant;
begin
result := TDBPropInfo(GetRecordPtr^).vValues;
end;
function __TDBPropInfoSet__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDBPropInfoSet__Wrapper.setcPropertyInfos(const val : UINT);
begin
TDBPropInfoSet(GetRecordPtr^).cPropertyInfos := val;
end;
function __TDBPropInfoSet__Wrapper.getcPropertyInfos : UINT;
begin
result := TDBPropInfoSet(GetRecordPtr^).cPropertyInfos;
end;
function __TDBPropSet__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDBPropSet__Wrapper.setcProperties(const val : UINT);
begin
TDBPropSet(GetRecordPtr^).cProperties := val;
end;
function __TDBPropSet__Wrapper.getcProperties : UINT;
begin
result := TDBPropSet(GetRecordPtr^).cProperties;
end;
function __TDBTime__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDBTime__Wrapper.sethour(const val : Word);
begin
TDBTime(GetRecordPtr^).hour := val;
end;
function __TDBTime__Wrapper.gethour : Word;
begin
result := TDBTime(GetRecordPtr^).hour;
end;
procedure __TDBTime__Wrapper.setminute(const val : Word);
begin
TDBTime(GetRecordPtr^).minute := val;
end;
function __TDBTime__Wrapper.getminute : Word;
begin
result := TDBTime(GetRecordPtr^).minute;
end;
procedure __TDBTime__Wrapper.setsecond(const val : Word);
begin
TDBTime(GetRecordPtr^).second := val;
end;
function __TDBTime__Wrapper.getsecond : Word;
begin
result := TDBTime(GetRecordPtr^).second;
end;
function __TDBTimeStamp__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDBTimeStamp__Wrapper.setyear(const val : SmallInt);
begin
TDBTimeStamp(GetRecordPtr^).year := val;
end;
function __TDBTimeStamp__Wrapper.getyear : SmallInt;
begin
result := TDBTimeStamp(GetRecordPtr^).year;
end;
procedure __TDBTimeStamp__Wrapper.setmonth(const val : Word);
begin
TDBTimeStamp(GetRecordPtr^).month := val;
end;
function __TDBTimeStamp__Wrapper.getmonth : Word;
begin
result := TDBTimeStamp(GetRecordPtr^).month;
end;
procedure __TDBTimeStamp__Wrapper.setday(const val : Word);
begin
TDBTimeStamp(GetRecordPtr^).day := val;
end;
function __TDBTimeStamp__Wrapper.getday : Word;
begin
result := TDBTimeStamp(GetRecordPtr^).day;
end;
procedure __TDBTimeStamp__Wrapper.sethour(const val : Word);
begin
TDBTimeStamp(GetRecordPtr^).hour := val;
end;
function __TDBTimeStamp__Wrapper.gethour : Word;
begin
result := TDBTimeStamp(GetRecordPtr^).hour;
end;
procedure __TDBTimeStamp__Wrapper.setminute(const val : Word);
begin
TDBTimeStamp(GetRecordPtr^).minute := val;
end;
function __TDBTimeStamp__Wrapper.getminute : Word;
begin
result := TDBTimeStamp(GetRecordPtr^).minute;
end;
procedure __TDBTimeStamp__Wrapper.setsecond(const val : Word);
begin
TDBTimeStamp(GetRecordPtr^).second := val;
end;
function __TDBTimeStamp__Wrapper.getsecond : Word;
begin
result := TDBTimeStamp(GetRecordPtr^).second;
end;
procedure __TDBTimeStamp__Wrapper.setfraction(const val : UINT);
begin
TDBTimeStamp(GetRecordPtr^).fraction := val;
end;
function __TDBTimeStamp__Wrapper.getfraction : UINT;
begin
result := TDBTimeStamp(GetRecordPtr^).fraction;
end;
function __TDBVarNumeric__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDBVarNumeric__Wrapper.setprecision(const val : Byte);
begin
TDBVarNumeric(GetRecordPtr^).precision := val;
end;
function __TDBVarNumeric__Wrapper.getprecision : Byte;
begin
result := TDBVarNumeric(GetRecordPtr^).precision;
end;
procedure __TDBVarNumeric__Wrapper.setscale(const val : SBYTE);
begin
TDBVarNumeric(GetRecordPtr^).scale := val;
end;
function __TDBVarNumeric__Wrapper.getscale : SBYTE;
begin
result := TDBVarNumeric(GetRecordPtr^).scale;
end;
procedure __TDBVarNumeric__Wrapper.setsign(const val : Byte);
begin
TDBVarNumeric(GetRecordPtr^).sign := val;
end;
function __TDBVarNumeric__Wrapper.getsign : Byte;
begin
result := TDBVarNumeric(GetRecordPtr^).sign;
end;
function __TDBVector__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TDBVector__Wrapper.setsize(const val : UINT);
begin
TDBVector(GetRecordPtr^).size := val;
end;
function __TDBVector__Wrapper.getsize : UINT;
begin
result := TDBVector(GetRecordPtr^).size;
end;
function __TErrorInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TErrorInfo__Wrapper.setdwMinor(const val : UINT);
begin
TErrorInfo(GetRecordPtr^).dwMinor := val;
end;
function __TErrorInfo__Wrapper.getdwMinor : UINT;
begin
result := TErrorInfo(GetRecordPtr^).dwMinor;
end;
procedure __TErrorInfo__Wrapper.setdispid(const val : Integer);
begin
TErrorInfo(GetRecordPtr^).dispid := val;
end;
function __TErrorInfo__Wrapper.getdispid : Integer;
begin
result := TErrorInfo(GetRecordPtr^).dispid;
end;
function __TExplicitAccessW__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TExplicitAccessW__Wrapper.setgrfAccessPermissions(const val : UINT);
begin
TExplicitAccessW(GetRecordPtr^).grfAccessPermissions := val;
end;
function __TExplicitAccessW__Wrapper.getgrfAccessPermissions : UINT;
begin
result := TExplicitAccessW(GetRecordPtr^).grfAccessPermissions;
end;
procedure __TExplicitAccessW__Wrapper.setgrfAccessMode(const val : ACCESS_MODE);
begin
TExplicitAccessW(GetRecordPtr^).grfAccessMode := val;
end;
function __TExplicitAccessW__Wrapper.getgrfAccessMode : ACCESS_MODE;
begin
result := TExplicitAccessW(GetRecordPtr^).grfAccessMode;
end;
procedure __TExplicitAccessW__Wrapper.setgrfInheritance(const val : UINT);
begin
TExplicitAccessW(GetRecordPtr^).grfInheritance := val;
end;
function __TExplicitAccessW__Wrapper.getgrfInheritance : UINT;
begin
result := TExplicitAccessW(GetRecordPtr^).grfInheritance;
end;
function __TMDAxisInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TMDAxisInfo__Wrapper.setcbSize(const val : UINT);
begin
TMDAxisInfo(GetRecordPtr^).cbSize := val;
end;
function __TMDAxisInfo__Wrapper.getcbSize : UINT;
begin
result := TMDAxisInfo(GetRecordPtr^).cbSize;
end;
procedure __TMDAxisInfo__Wrapper.setiAxis(const val : UINT);
begin
TMDAxisInfo(GetRecordPtr^).iAxis := val;
end;
function __TMDAxisInfo__Wrapper.getiAxis : UINT;
begin
result := TMDAxisInfo(GetRecordPtr^).iAxis;
end;
procedure __TMDAxisInfo__Wrapper.setcDimensions(const val : UINT);
begin
TMDAxisInfo(GetRecordPtr^).cDimensions := val;
end;
function __TMDAxisInfo__Wrapper.getcDimensions : UINT;
begin
result := TMDAxisInfo(GetRecordPtr^).cDimensions;
end;
procedure __TMDAxisInfo__Wrapper.setcCoordinates(const val : UINT);
begin
TMDAxisInfo(GetRecordPtr^).cCoordinates := val;
end;
function __TMDAxisInfo__Wrapper.getcCoordinates : UINT;
begin
result := TMDAxisInfo(GetRecordPtr^).cCoordinates;
end;
function __TRUSTEE_W__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRUSTEE_W__Wrapper.setMultipleTrusteeOperation(const val : MULTIPLE_TRUSTEE_OPERATION);
begin
TRUSTEE_W(GetRecordPtr^).MultipleTrusteeOperation := val;
end;
function __TRUSTEE_W__Wrapper.getMultipleTrusteeOperation : MULTIPLE_TRUSTEE_OPERATION;
begin
result := TRUSTEE_W(GetRecordPtr^).MultipleTrusteeOperation;
end;
procedure __TRUSTEE_W__Wrapper.setTrusteeForm(const val : TRUSTEE_FORM);
begin
TRUSTEE_W(GetRecordPtr^).TrusteeForm := val;
end;
function __TRUSTEE_W__Wrapper.getTrusteeForm : TRUSTEE_FORM;
begin
result := TRUSTEE_W(GetRecordPtr^).TrusteeForm;
end;
procedure __TRUSTEE_W__Wrapper.setTrusteeType(const val : TRUSTEE_TYPE);
begin
TRUSTEE_W(GetRecordPtr^).TrusteeType := val;
end;
function __TRUSTEE_W__Wrapper.getTrusteeType : TRUSTEE_TYPE;
begin
result := TRUSTEE_W(GetRecordPtr^).TrusteeType;
end;
function __TSecObject__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSecObject__Wrapper.setcObjects(const val : UINT);
begin
TSecObject(GetRecordPtr^).cObjects := val;
end;
function __TSecObject__Wrapper.getcObjects : UINT;
begin
result := TSecObject(GetRecordPtr^).cObjects;
end;
function __TSecObjectElement__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function __TXActOpt__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TXActOpt__Wrapper.setulTimeout(const val : UINT);
begin
TXActOpt(GetRecordPtr^).ulTimeout := val;
end;
function __TXActOpt__Wrapper.getulTimeout : UINT;
begin
result := TXActOpt(GetRecordPtr^).ulTimeout;
end;
function __TXactStats__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TXactStats__Wrapper.setcOpen(const val : UINT);
begin
TXactStats(GetRecordPtr^).cOpen := val;
end;
function __TXactStats__Wrapper.getcOpen : UINT;
begin
result := TXactStats(GetRecordPtr^).cOpen;
end;
procedure __TXactStats__Wrapper.setcCommitting(const val : UINT);
begin
TXactStats(GetRecordPtr^).cCommitting := val;
end;
function __TXactStats__Wrapper.getcCommitting : UINT;
begin
result := TXactStats(GetRecordPtr^).cCommitting;
end;
procedure __TXactStats__Wrapper.setcCommitted(const val : UINT);
begin
TXactStats(GetRecordPtr^).cCommitted := val;
end;
function __TXactStats__Wrapper.getcCommitted : UINT;
begin
result := TXactStats(GetRecordPtr^).cCommitted;
end;
procedure __TXactStats__Wrapper.setcAborting(const val : UINT);
begin
TXactStats(GetRecordPtr^).cAborting := val;
end;
function __TXactStats__Wrapper.getcAborting : UINT;
begin
result := TXactStats(GetRecordPtr^).cAborting;
end;
procedure __TXactStats__Wrapper.setcAborted(const val : UINT);
begin
TXactStats(GetRecordPtr^).cAborted := val;
end;
function __TXactStats__Wrapper.getcAborted : UINT;
begin
result := TXactStats(GetRecordPtr^).cAborted;
end;
procedure __TXactStats__Wrapper.setcInDoubt(const val : UINT);
begin
TXactStats(GetRecordPtr^).cInDoubt := val;
end;
function __TXactStats__Wrapper.getcInDoubt : UINT;
begin
result := TXactStats(GetRecordPtr^).cInDoubt;
end;
procedure __TXactStats__Wrapper.setcHeuristicDecision(const val : UINT);
begin
TXactStats(GetRecordPtr^).cHeuristicDecision := val;
end;
function __TXactStats__Wrapper.getcHeuristicDecision : UINT;
begin
result := TXactStats(GetRecordPtr^).cHeuristicDecision;
end;
function __TXactTransInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TXactTransInfo__Wrapper.setisoLevel(const val : Integer);
begin
TXactTransInfo(GetRecordPtr^).isoLevel := val;
end;
function __TXactTransInfo__Wrapper.getisoLevel : Integer;
begin
result := TXactTransInfo(GetRecordPtr^).isoLevel;
end;
procedure __TXactTransInfo__Wrapper.setisoFlags(const val : UINT);
begin
TXactTransInfo(GetRecordPtr^).isoFlags := val;
end;
function __TXactTransInfo__Wrapper.getisoFlags : UINT;
begin
result := TXactTransInfo(GetRecordPtr^).isoFlags;
end;
procedure __TXactTransInfo__Wrapper.setgrfTCSupported(const val : UINT);
begin
TXactTransInfo(GetRecordPtr^).grfTCSupported := val;
end;
function __TXactTransInfo__Wrapper.getgrfTCSupported : UINT;
begin
result := TXactTransInfo(GetRecordPtr^).grfTCSupported;
end;
procedure __TXactTransInfo__Wrapper.setgrfRMSupported(const val : UINT);
begin
TXactTransInfo(GetRecordPtr^).grfRMSupported := val;
end;
function __TXactTransInfo__Wrapper.getgrfRMSupported : UINT;
begin
result := TXactTransInfo(GetRecordPtr^).grfRMSupported;
end;
procedure __TXactTransInfo__Wrapper.setgrfTCSupportedRetaining(const val : UINT);
begin
TXactTransInfo(GetRecordPtr^).grfTCSupportedRetaining := val;
end;
function __TXactTransInfo__Wrapper.getgrfTCSupportedRetaining : UINT;
begin
result := TXactTransInfo(GetRecordPtr^).grfTCSupportedRetaining;
end;
procedure __TXactTransInfo__Wrapper.setgrfRMSupportedRetaining(const val : UINT);
begin
TXactTransInfo(GetRecordPtr^).grfRMSupportedRetaining := val;
end;
function __TXactTransInfo__Wrapper.getgrfRMSupportedRetaining : UINT;
begin
result := TXactTransInfo(GetRecordPtr^).grfRMSupportedRetaining;
end;
function __XACTOPT__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __XACTOPT__Wrapper.setulTimeout(const val : UINT);
begin
XACTOPT(GetRecordPtr^).ulTimeout := val;
end;
function __XACTOPT__Wrapper.getulTimeout : UINT;
begin
result := XACTOPT(GetRecordPtr^).ulTimeout;
end;
function __XACTSTATS__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __XACTSTATS__Wrapper.setcOpen(const val : UINT);
begin
XACTSTATS(GetRecordPtr^).cOpen := val;
end;
function __XACTSTATS__Wrapper.getcOpen : UINT;
begin
result := XACTSTATS(GetRecordPtr^).cOpen;
end;
procedure __XACTSTATS__Wrapper.setcCommitting(const val : UINT);
begin
XACTSTATS(GetRecordPtr^).cCommitting := val;
end;
function __XACTSTATS__Wrapper.getcCommitting : UINT;
begin
result := XACTSTATS(GetRecordPtr^).cCommitting;
end;
procedure __XACTSTATS__Wrapper.setcCommitted(const val : UINT);
begin
XACTSTATS(GetRecordPtr^).cCommitted := val;
end;
function __XACTSTATS__Wrapper.getcCommitted : UINT;
begin
result := XACTSTATS(GetRecordPtr^).cCommitted;
end;
procedure __XACTSTATS__Wrapper.setcAborting(const val : UINT);
begin
XACTSTATS(GetRecordPtr^).cAborting := val;
end;
function __XACTSTATS__Wrapper.getcAborting : UINT;
begin
result := XACTSTATS(GetRecordPtr^).cAborting;
end;
procedure __XACTSTATS__Wrapper.setcAborted(const val : UINT);
begin
XACTSTATS(GetRecordPtr^).cAborted := val;
end;
function __XACTSTATS__Wrapper.getcAborted : UINT;
begin
result := XACTSTATS(GetRecordPtr^).cAborted;
end;
procedure __XACTSTATS__Wrapper.setcInDoubt(const val : UINT);
begin
XACTSTATS(GetRecordPtr^).cInDoubt := val;
end;
function __XACTSTATS__Wrapper.getcInDoubt : UINT;
begin
result := XACTSTATS(GetRecordPtr^).cInDoubt;
end;
procedure __XACTSTATS__Wrapper.setcHeuristicDecision(const val : UINT);
begin
XACTSTATS(GetRecordPtr^).cHeuristicDecision := val;
end;
function __XACTSTATS__Wrapper.getcHeuristicDecision : UINT;
begin
result := XACTSTATS(GetRecordPtr^).cHeuristicDecision;
end;
function __XACTTRANSINFO__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __XACTTRANSINFO__Wrapper.setisoLevel(const val : Integer);
begin
XACTTRANSINFO(GetRecordPtr^).isoLevel := val;
end;
function __XACTTRANSINFO__Wrapper.getisoLevel : Integer;
begin
result := XACTTRANSINFO(GetRecordPtr^).isoLevel;
end;
procedure __XACTTRANSINFO__Wrapper.setisoFlags(const val : UINT);
begin
XACTTRANSINFO(GetRecordPtr^).isoFlags := val;
end;
function __XACTTRANSINFO__Wrapper.getisoFlags : UINT;
begin
result := XACTTRANSINFO(GetRecordPtr^).isoFlags;
end;
procedure __XACTTRANSINFO__Wrapper.setgrfTCSupported(const val : UINT);
begin
XACTTRANSINFO(GetRecordPtr^).grfTCSupported := val;
end;
function __XACTTRANSINFO__Wrapper.getgrfTCSupported : UINT;
begin
result := XACTTRANSINFO(GetRecordPtr^).grfTCSupported;
end;
procedure __XACTTRANSINFO__Wrapper.setgrfRMSupported(const val : UINT);
begin
XACTTRANSINFO(GetRecordPtr^).grfRMSupported := val;
end;
function __XACTTRANSINFO__Wrapper.getgrfRMSupported : UINT;
begin
result := XACTTRANSINFO(GetRecordPtr^).grfRMSupported;
end;
procedure __XACTTRANSINFO__Wrapper.setgrfTCSupportedRetaining(const val : UINT);
begin
XACTTRANSINFO(GetRecordPtr^).grfTCSupportedRetaining := val;
end;
function __XACTTRANSINFO__Wrapper.getgrfTCSupportedRetaining : UINT;
begin
result := XACTTRANSINFO(GetRecordPtr^).grfTCSupportedRetaining;
end;
procedure __XACTTRANSINFO__Wrapper.setgrfRMSupportedRetaining(const val : UINT);
begin
XACTTRANSINFO(GetRecordPtr^).grfRMSupportedRetaining := val;
end;
function __XACTTRANSINFO__Wrapper.getgrfRMSupportedRetaining : UINT;
begin
result := XACTTRANSINFO(GetRecordPtr^).grfRMSupportedRetaining;
end;
function _BOID_ : IDispatch;
begin
  result := __BOID__Wrapper.Create;
end;
function _DB_NUMERIC_ : IDispatch;
begin
  result := __DB_NUMERIC__Wrapper.Create;
end;
function _DB_VARNUMERIC_ : IDispatch;
begin
  result := __DB_VARNUMERIC__Wrapper.Create;
end;
function _DBBINDEXT_ : IDispatch;
begin
  result := __DBBINDEXT__Wrapper.Create;
end;
function _DBBINDING_ : IDispatch;
begin
  result := __DBBINDING__Wrapper.Create;
end;
function _DBCOLUMNDESC_ : IDispatch;
begin
  result := __DBCOLUMNDESC__Wrapper.Create;
end;
function _DBCOLUMNINFO_ : IDispatch;
begin
  result := __DBCOLUMNINFO__Wrapper.Create;
end;
function _DBDATE_ : IDispatch;
begin
  result := __DBDATE__Wrapper.Create;
end;
function _DBFAILUREINFO_ : IDispatch;
begin
  result := __DBFAILUREINFO__Wrapper.Create;
end;
function _DBFILETIME_ : IDispatch;
begin
  result := __DBFILETIME__Wrapper.Create;
end;
function _DBID_ : IDispatch;
begin
  result := __DBID__Wrapper.Create;
end;
function _DBIDGUID_ : IDispatch;
begin
  result := __DBIDGUID__Wrapper.Create;
end;
function _DBIDNAME_ : IDispatch;
begin
  result := __DBIDNAME__Wrapper.Create;
end;
function _DBINDEXCOLUMNDESC_ : IDispatch;
begin
  result := __DBINDEXCOLUMNDESC__Wrapper.Create;
end;
function _DBLITERALINFO_ : IDispatch;
begin
  result := __DBLITERALINFO__Wrapper.Create;
end;
function _DBOBJECT_ : IDispatch;
begin
  result := __DBOBJECT__Wrapper.Create;
end;
function _DBPARAMBINDINFO_ : IDispatch;
begin
  result := __DBPARAMBINDINFO__Wrapper.Create;
end;
function _DBPARAMINFO_ : IDispatch;
begin
  result := __DBPARAMINFO__Wrapper.Create;
end;
function _DBPARAMS_ : IDispatch;
begin
  result := __DBPARAMS__Wrapper.Create;
end;
function _DBPROP_ : IDispatch;
begin
  result := __DBPROP__Wrapper.Create;
end;
function _DBPROPIDSET_ : IDispatch;
begin
  result := __DBPROPIDSET__Wrapper.Create;
end;
function _DBPROPINFO_ : IDispatch;
begin
  result := __DBPROPINFO__Wrapper.Create;
end;
function _DBPROPINFOSET_ : IDispatch;
begin
  result := __DBPROPINFOSET__Wrapper.Create;
end;
function _DBPROPSET_ : IDispatch;
begin
  result := __DBPROPSET__Wrapper.Create;
end;
function _DBTIME_ : IDispatch;
begin
  result := __DBTIME__Wrapper.Create;
end;
function _DBTIMESTAMP_ : IDispatch;
begin
  result := __DBTIMESTAMP__Wrapper.Create;
end;
function _DBVECTOR_ : IDispatch;
begin
  result := __DBVECTOR__Wrapper.Create;
end;
function _ERRORINFO_ : IDispatch;
begin
  result := __ERRORINFO__Wrapper.Create;
end;
function _EXPLICIT_ACCESS_W_ : IDispatch;
begin
  result := __EXPLICIT_ACCESS_W__Wrapper.Create;
end;
function _MDAXISINFO_ : IDispatch;
begin
  result := __MDAXISINFO__Wrapper.Create;
end;
function _SEC_OBJECT_ : IDispatch;
begin
  result := __SEC_OBJECT__Wrapper.Create;
end;
function _SEC_OBJECT_ELEMENT_ : IDispatch;
begin
  result := __SEC_OBJECT_ELEMENT__Wrapper.Create;
end;
function _TBoid_ : IDispatch;
begin
  result := __TBoid__Wrapper.Create;
end;
function _TDBBindExt_ : IDispatch;
begin
  result := __TDBBindExt__Wrapper.Create;
end;
function _TDBBinding_ : IDispatch;
begin
  result := __TDBBinding__Wrapper.Create;
end;
function _TDBColumnDesc_ : IDispatch;
begin
  result := __TDBColumnDesc__Wrapper.Create;
end;
function _TDBColumnInfo_ : IDispatch;
begin
  result := __TDBColumnInfo__Wrapper.Create;
end;
function _TDBDate_ : IDispatch;
begin
  result := __TDBDate__Wrapper.Create;
end;
function _TDBFailureInfo_ : IDispatch;
begin
  result := __TDBFailureInfo__Wrapper.Create;
end;
function _TDBFileTime_ : IDispatch;
begin
  result := __TDBFileTime__Wrapper.Create;
end;
function _TDBID_ : IDispatch;
begin
  result := __TDBID__Wrapper.Create;
end;
function _TDBIDGuid_ : IDispatch;
begin
  result := __TDBIDGuid__Wrapper.Create;
end;
function _TDBIDName_ : IDispatch;
begin
  result := __TDBIDName__Wrapper.Create;
end;
function _TDBIndexColumnDesc_ : IDispatch;
begin
  result := __TDBIndexColumnDesc__Wrapper.Create;
end;
function _TDBLiteralInfo_ : IDispatch;
begin
  result := __TDBLiteralInfo__Wrapper.Create;
end;
function _TDBNumeric_ : IDispatch;
begin
  result := __TDBNumeric__Wrapper.Create;
end;
function _TDBObject_ : IDispatch;
begin
  result := __TDBObject__Wrapper.Create;
end;
function _TDBParamBindInfo_ : IDispatch;
begin
  result := __TDBParamBindInfo__Wrapper.Create;
end;
function _TDBParamInfo_ : IDispatch;
begin
  result := __TDBParamInfo__Wrapper.Create;
end;
function _TDBParams_ : IDispatch;
begin
  result := __TDBParams__Wrapper.Create;
end;
function _TDBProp_ : IDispatch;
begin
  result := __TDBProp__Wrapper.Create;
end;
function _TDBPropIDSet_ : IDispatch;
begin
  result := __TDBPropIDSet__Wrapper.Create;
end;
function _TDBPropInfo_ : IDispatch;
begin
  result := __TDBPropInfo__Wrapper.Create;
end;
function _TDBPropInfoSet_ : IDispatch;
begin
  result := __TDBPropInfoSet__Wrapper.Create;
end;
function _TDBPropSet_ : IDispatch;
begin
  result := __TDBPropSet__Wrapper.Create;
end;
function _TDBTime_ : IDispatch;
begin
  result := __TDBTime__Wrapper.Create;
end;
function _TDBTimeStamp_ : IDispatch;
begin
  result := __TDBTimeStamp__Wrapper.Create;
end;
function _TDBVarNumeric_ : IDispatch;
begin
  result := __TDBVarNumeric__Wrapper.Create;
end;
function _TDBVector_ : IDispatch;
begin
  result := __TDBVector__Wrapper.Create;
end;
function _TErrorInfo_ : IDispatch;
begin
  result := __TErrorInfo__Wrapper.Create;
end;
function _TExplicitAccessW_ : IDispatch;
begin
  result := __TExplicitAccessW__Wrapper.Create;
end;
function _TMDAxisInfo_ : IDispatch;
begin
  result := __TMDAxisInfo__Wrapper.Create;
end;
function _TRUSTEE_W_ : IDispatch;
begin
  result := __TRUSTEE_W__Wrapper.Create;
end;
function _TSecObject_ : IDispatch;
begin
  result := __TSecObject__Wrapper.Create;
end;
function _TSecObjectElement_ : IDispatch;
begin
  result := __TSecObjectElement__Wrapper.Create;
end;
function _TXActOpt_ : IDispatch;
begin
  result := __TXActOpt__Wrapper.Create;
end;
function _TXactStats_ : IDispatch;
begin
  result := __TXactStats__Wrapper.Create;
end;
function _TXactTransInfo_ : IDispatch;
begin
  result := __TXactTransInfo__Wrapper.Create;
end;
function _XACTOPT_ : IDispatch;
begin
  result := __XACTOPT__Wrapper.Create;
end;
function _XACTSTATS_ : IDispatch;
begin
  result := __XACTSTATS__Wrapper.Create;
end;
function _XACTTRANSINFO_ : IDispatch;
begin
  result := __XACTTRANSINFO__Wrapper.Create;
end;

type __BOID__Wrapper__ = class(__BOID__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __BOID__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertBOIDToVariant(var R : BOID) : OleVariant;
var
__rw : __BOID__Wrapper__;
begin
__rw := __BOID__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToBOID(const V : OleVariant) : BOID;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := BOID((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DB_NUMERIC__Wrapper__ = class(__DB_NUMERIC__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DB_NUMERIC__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDB_NUMERICToVariant(var R : DB_NUMERIC) : OleVariant;
var
__rw : __DB_NUMERIC__Wrapper__;
begin
__rw := __DB_NUMERIC__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDB_NUMERIC(const V : OleVariant) : DB_NUMERIC;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DB_NUMERIC((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DB_VARNUMERIC__Wrapper__ = class(__DB_VARNUMERIC__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DB_VARNUMERIC__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDB_VARNUMERICToVariant(var R : DB_VARNUMERIC) : OleVariant;
var
__rw : __DB_VARNUMERIC__Wrapper__;
begin
__rw := __DB_VARNUMERIC__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDB_VARNUMERIC(const V : OleVariant) : DB_VARNUMERIC;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DB_VARNUMERIC((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DBBINDEXT__Wrapper__ = class(__DBBINDEXT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DBBINDEXT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDBBINDEXTToVariant(var R : DBBINDEXT) : OleVariant;
var
__rw : __DBBINDEXT__Wrapper__;
begin
__rw := __DBBINDEXT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDBBINDEXT(const V : OleVariant) : DBBINDEXT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DBBINDEXT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DBBINDING__Wrapper__ = class(__DBBINDING__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DBBINDING__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDBBINDINGToVariant(var R : DBBINDING) : OleVariant;
var
__rw : __DBBINDING__Wrapper__;
begin
__rw := __DBBINDING__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDBBINDING(const V : OleVariant) : DBBINDING;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DBBINDING((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DBCOLUMNDESC__Wrapper__ = class(__DBCOLUMNDESC__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DBCOLUMNDESC__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDBCOLUMNDESCToVariant(var R : DBCOLUMNDESC) : OleVariant;
var
__rw : __DBCOLUMNDESC__Wrapper__;
begin
__rw := __DBCOLUMNDESC__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDBCOLUMNDESC(const V : OleVariant) : DBCOLUMNDESC;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DBCOLUMNDESC((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DBCOLUMNINFO__Wrapper__ = class(__DBCOLUMNINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DBCOLUMNINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDBCOLUMNINFOToVariant(var R : DBCOLUMNINFO) : OleVariant;
var
__rw : __DBCOLUMNINFO__Wrapper__;
begin
__rw := __DBCOLUMNINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDBCOLUMNINFO(const V : OleVariant) : DBCOLUMNINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DBCOLUMNINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DBDATE__Wrapper__ = class(__DBDATE__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DBDATE__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDBDATEToVariant(var R : DBDATE) : OleVariant;
var
__rw : __DBDATE__Wrapper__;
begin
__rw := __DBDATE__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDBDATE(const V : OleVariant) : DBDATE;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DBDATE((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DBFAILUREINFO__Wrapper__ = class(__DBFAILUREINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DBFAILUREINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDBFAILUREINFOToVariant(var R : DBFAILUREINFO) : OleVariant;
var
__rw : __DBFAILUREINFO__Wrapper__;
begin
__rw := __DBFAILUREINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDBFAILUREINFO(const V : OleVariant) : DBFAILUREINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DBFAILUREINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DBFILETIME__Wrapper__ = class(__DBFILETIME__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DBFILETIME__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDBFILETIMEToVariant(var R : DBFILETIME) : OleVariant;
var
__rw : __DBFILETIME__Wrapper__;
begin
__rw := __DBFILETIME__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDBFILETIME(const V : OleVariant) : DBFILETIME;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DBFILETIME((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DBID__Wrapper__ = class(__DBID__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DBID__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDBIDToVariant(var R : DBID) : OleVariant;
var
__rw : __DBID__Wrapper__;
begin
__rw := __DBID__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDBID(const V : OleVariant) : DBID;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DBID((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DBIDGUID__Wrapper__ = class(__DBIDGUID__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DBIDGUID__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDBIDGUIDToVariant(var R : DBIDGUID) : OleVariant;
var
__rw : __DBIDGUID__Wrapper__;
begin
__rw := __DBIDGUID__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDBIDGUID(const V : OleVariant) : DBIDGUID;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DBIDGUID((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DBIDNAME__Wrapper__ = class(__DBIDNAME__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DBIDNAME__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDBIDNAMEToVariant(var R : DBIDNAME) : OleVariant;
var
__rw : __DBIDNAME__Wrapper__;
begin
__rw := __DBIDNAME__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDBIDNAME(const V : OleVariant) : DBIDNAME;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DBIDNAME((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DBINDEXCOLUMNDESC__Wrapper__ = class(__DBINDEXCOLUMNDESC__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DBINDEXCOLUMNDESC__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDBINDEXCOLUMNDESCToVariant(var R : DBINDEXCOLUMNDESC) : OleVariant;
var
__rw : __DBINDEXCOLUMNDESC__Wrapper__;
begin
__rw := __DBINDEXCOLUMNDESC__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDBINDEXCOLUMNDESC(const V : OleVariant) : DBINDEXCOLUMNDESC;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DBINDEXCOLUMNDESC((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DBLITERALINFO__Wrapper__ = class(__DBLITERALINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DBLITERALINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDBLITERALINFOToVariant(var R : DBLITERALINFO) : OleVariant;
var
__rw : __DBLITERALINFO__Wrapper__;
begin
__rw := __DBLITERALINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDBLITERALINFO(const V : OleVariant) : DBLITERALINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DBLITERALINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DBOBJECT__Wrapper__ = class(__DBOBJECT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DBOBJECT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDBOBJECTToVariant(var R : DBOBJECT) : OleVariant;
var
__rw : __DBOBJECT__Wrapper__;
begin
__rw := __DBOBJECT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDBOBJECT(const V : OleVariant) : DBOBJECT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DBOBJECT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DBPARAMBINDINFO__Wrapper__ = class(__DBPARAMBINDINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DBPARAMBINDINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDBPARAMBINDINFOToVariant(var R : DBPARAMBINDINFO) : OleVariant;
var
__rw : __DBPARAMBINDINFO__Wrapper__;
begin
__rw := __DBPARAMBINDINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDBPARAMBINDINFO(const V : OleVariant) : DBPARAMBINDINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DBPARAMBINDINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DBPARAMINFO__Wrapper__ = class(__DBPARAMINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DBPARAMINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDBPARAMINFOToVariant(var R : DBPARAMINFO) : OleVariant;
var
__rw : __DBPARAMINFO__Wrapper__;
begin
__rw := __DBPARAMINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDBPARAMINFO(const V : OleVariant) : DBPARAMINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DBPARAMINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DBPARAMS__Wrapper__ = class(__DBPARAMS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DBPARAMS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDBPARAMSToVariant(var R : DBPARAMS) : OleVariant;
var
__rw : __DBPARAMS__Wrapper__;
begin
__rw := __DBPARAMS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDBPARAMS(const V : OleVariant) : DBPARAMS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DBPARAMS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DBPROP__Wrapper__ = class(__DBPROP__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DBPROP__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDBPROPToVariant(var R : DBPROP) : OleVariant;
var
__rw : __DBPROP__Wrapper__;
begin
__rw := __DBPROP__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDBPROP(const V : OleVariant) : DBPROP;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DBPROP((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DBPROPIDSET__Wrapper__ = class(__DBPROPIDSET__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DBPROPIDSET__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDBPROPIDSETToVariant(var R : DBPROPIDSET) : OleVariant;
var
__rw : __DBPROPIDSET__Wrapper__;
begin
__rw := __DBPROPIDSET__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDBPROPIDSET(const V : OleVariant) : DBPROPIDSET;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DBPROPIDSET((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DBPROPINFO__Wrapper__ = class(__DBPROPINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DBPROPINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDBPROPINFOToVariant(var R : DBPROPINFO) : OleVariant;
var
__rw : __DBPROPINFO__Wrapper__;
begin
__rw := __DBPROPINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDBPROPINFO(const V : OleVariant) : DBPROPINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DBPROPINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DBPROPINFOSET__Wrapper__ = class(__DBPROPINFOSET__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DBPROPINFOSET__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDBPROPINFOSETToVariant(var R : DBPROPINFOSET) : OleVariant;
var
__rw : __DBPROPINFOSET__Wrapper__;
begin
__rw := __DBPROPINFOSET__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDBPROPINFOSET(const V : OleVariant) : DBPROPINFOSET;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DBPROPINFOSET((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DBPROPSET__Wrapper__ = class(__DBPROPSET__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DBPROPSET__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDBPROPSETToVariant(var R : DBPROPSET) : OleVariant;
var
__rw : __DBPROPSET__Wrapper__;
begin
__rw := __DBPROPSET__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDBPROPSET(const V : OleVariant) : DBPROPSET;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DBPROPSET((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DBTIME__Wrapper__ = class(__DBTIME__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DBTIME__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDBTIMEToVariant(var R : DBTIME) : OleVariant;
var
__rw : __DBTIME__Wrapper__;
begin
__rw := __DBTIME__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDBTIME(const V : OleVariant) : DBTIME;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DBTIME((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DBTIMESTAMP__Wrapper__ = class(__DBTIMESTAMP__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DBTIMESTAMP__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDBTIMESTAMPToVariant(var R : DBTIMESTAMP) : OleVariant;
var
__rw : __DBTIMESTAMP__Wrapper__;
begin
__rw := __DBTIMESTAMP__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDBTIMESTAMP(const V : OleVariant) : DBTIMESTAMP;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DBTIMESTAMP((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __DBVECTOR__Wrapper__ = class(__DBVECTOR__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __DBVECTOR__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertDBVECTORToVariant(var R : DBVECTOR) : OleVariant;
var
__rw : __DBVECTOR__Wrapper__;
begin
__rw := __DBVECTOR__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToDBVECTOR(const V : OleVariant) : DBVECTOR;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := DBVECTOR((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ERRORINFO__Wrapper__ = class(__ERRORINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ERRORINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertERRORINFOToVariant(var R : ERRORINFO) : OleVariant;
var
__rw : __ERRORINFO__Wrapper__;
begin
__rw := __ERRORINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToERRORINFO(const V : OleVariant) : ERRORINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ERRORINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __EXPLICIT_ACCESS_W__Wrapper__ = class(__EXPLICIT_ACCESS_W__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __EXPLICIT_ACCESS_W__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertEXPLICIT_ACCESS_WToVariant(var R : EXPLICIT_ACCESS_W) : OleVariant;
var
__rw : __EXPLICIT_ACCESS_W__Wrapper__;
begin
__rw := __EXPLICIT_ACCESS_W__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToEXPLICIT_ACCESS_W(const V : OleVariant) : EXPLICIT_ACCESS_W;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := EXPLICIT_ACCESS_W((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __MDAXISINFO__Wrapper__ = class(__MDAXISINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __MDAXISINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertMDAXISINFOToVariant(var R : MDAXISINFO) : OleVariant;
var
__rw : __MDAXISINFO__Wrapper__;
begin
__rw := __MDAXISINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToMDAXISINFO(const V : OleVariant) : MDAXISINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := MDAXISINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SEC_OBJECT__Wrapper__ = class(__SEC_OBJECT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SEC_OBJECT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSEC_OBJECTToVariant(var R : SEC_OBJECT) : OleVariant;
var
__rw : __SEC_OBJECT__Wrapper__;
begin
__rw := __SEC_OBJECT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSEC_OBJECT(const V : OleVariant) : SEC_OBJECT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SEC_OBJECT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SEC_OBJECT_ELEMENT__Wrapper__ = class(__SEC_OBJECT_ELEMENT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SEC_OBJECT_ELEMENT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSEC_OBJECT_ELEMENTToVariant(var R : SEC_OBJECT_ELEMENT) : OleVariant;
var
__rw : __SEC_OBJECT_ELEMENT__Wrapper__;
begin
__rw := __SEC_OBJECT_ELEMENT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSEC_OBJECT_ELEMENT(const V : OleVariant) : SEC_OBJECT_ELEMENT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SEC_OBJECT_ELEMENT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TBoid__Wrapper__ = class(__TBoid__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TBoid__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTBoidToVariant(var R : TBoid) : OleVariant;
var
__rw : __TBoid__Wrapper__;
begin
__rw := __TBoid__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTBoid(const V : OleVariant) : TBoid;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TBoid((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDBBindExt__Wrapper__ = class(__TDBBindExt__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDBBindExt__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDBBindExtToVariant(var R : TDBBindExt) : OleVariant;
var
__rw : __TDBBindExt__Wrapper__;
begin
__rw := __TDBBindExt__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDBBindExt(const V : OleVariant) : TDBBindExt;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDBBindExt((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDBBinding__Wrapper__ = class(__TDBBinding__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDBBinding__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDBBindingToVariant(var R : TDBBinding) : OleVariant;
var
__rw : __TDBBinding__Wrapper__;
begin
__rw := __TDBBinding__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDBBinding(const V : OleVariant) : TDBBinding;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDBBinding((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDBColumnDesc__Wrapper__ = class(__TDBColumnDesc__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDBColumnDesc__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDBColumnDescToVariant(var R : TDBColumnDesc) : OleVariant;
var
__rw : __TDBColumnDesc__Wrapper__;
begin
__rw := __TDBColumnDesc__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDBColumnDesc(const V : OleVariant) : TDBColumnDesc;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDBColumnDesc((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDBColumnInfo__Wrapper__ = class(__TDBColumnInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDBColumnInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDBColumnInfoToVariant(var R : TDBColumnInfo) : OleVariant;
var
__rw : __TDBColumnInfo__Wrapper__;
begin
__rw := __TDBColumnInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDBColumnInfo(const V : OleVariant) : TDBColumnInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDBColumnInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDBDate__Wrapper__ = class(__TDBDate__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDBDate__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDBDateToVariant(var R : TDBDate) : OleVariant;
var
__rw : __TDBDate__Wrapper__;
begin
__rw := __TDBDate__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDBDate(const V : OleVariant) : TDBDate;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDBDate((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDBFailureInfo__Wrapper__ = class(__TDBFailureInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDBFailureInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDBFailureInfoToVariant(var R : TDBFailureInfo) : OleVariant;
var
__rw : __TDBFailureInfo__Wrapper__;
begin
__rw := __TDBFailureInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDBFailureInfo(const V : OleVariant) : TDBFailureInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDBFailureInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDBFileTime__Wrapper__ = class(__TDBFileTime__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDBFileTime__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDBFileTimeToVariant(var R : TDBFileTime) : OleVariant;
var
__rw : __TDBFileTime__Wrapper__;
begin
__rw := __TDBFileTime__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDBFileTime(const V : OleVariant) : TDBFileTime;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDBFileTime((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDBID__Wrapper__ = class(__TDBID__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDBID__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDBIDToVariant(var R : TDBID) : OleVariant;
var
__rw : __TDBID__Wrapper__;
begin
__rw := __TDBID__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDBID(const V : OleVariant) : TDBID;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDBID((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDBIDGuid__Wrapper__ = class(__TDBIDGuid__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDBIDGuid__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDBIDGuidToVariant(var R : TDBIDGuid) : OleVariant;
var
__rw : __TDBIDGuid__Wrapper__;
begin
__rw := __TDBIDGuid__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDBIDGuid(const V : OleVariant) : TDBIDGuid;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDBIDGuid((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDBIDName__Wrapper__ = class(__TDBIDName__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDBIDName__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDBIDNameToVariant(var R : TDBIDName) : OleVariant;
var
__rw : __TDBIDName__Wrapper__;
begin
__rw := __TDBIDName__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDBIDName(const V : OleVariant) : TDBIDName;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDBIDName((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDBIndexColumnDesc__Wrapper__ = class(__TDBIndexColumnDesc__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDBIndexColumnDesc__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDBIndexColumnDescToVariant(var R : TDBIndexColumnDesc) : OleVariant;
var
__rw : __TDBIndexColumnDesc__Wrapper__;
begin
__rw := __TDBIndexColumnDesc__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDBIndexColumnDesc(const V : OleVariant) : TDBIndexColumnDesc;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDBIndexColumnDesc((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDBLiteralInfo__Wrapper__ = class(__TDBLiteralInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDBLiteralInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDBLiteralInfoToVariant(var R : TDBLiteralInfo) : OleVariant;
var
__rw : __TDBLiteralInfo__Wrapper__;
begin
__rw := __TDBLiteralInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDBLiteralInfo(const V : OleVariant) : TDBLiteralInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDBLiteralInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDBNumeric__Wrapper__ = class(__TDBNumeric__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDBNumeric__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDBNumericToVariant(var R : TDBNumeric) : OleVariant;
var
__rw : __TDBNumeric__Wrapper__;
begin
__rw := __TDBNumeric__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDBNumeric(const V : OleVariant) : TDBNumeric;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDBNumeric((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDBObject__Wrapper__ = class(__TDBObject__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDBObject__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDBObjectToVariant(var R : TDBObject) : OleVariant;
var
__rw : __TDBObject__Wrapper__;
begin
__rw := __TDBObject__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDBObject(const V : OleVariant) : TDBObject;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDBObject((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDBParamBindInfo__Wrapper__ = class(__TDBParamBindInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDBParamBindInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDBParamBindInfoToVariant(var R : TDBParamBindInfo) : OleVariant;
var
__rw : __TDBParamBindInfo__Wrapper__;
begin
__rw := __TDBParamBindInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDBParamBindInfo(const V : OleVariant) : TDBParamBindInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDBParamBindInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDBParamInfo__Wrapper__ = class(__TDBParamInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDBParamInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDBParamInfoToVariant(var R : TDBParamInfo) : OleVariant;
var
__rw : __TDBParamInfo__Wrapper__;
begin
__rw := __TDBParamInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDBParamInfo(const V : OleVariant) : TDBParamInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDBParamInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDBParams__Wrapper__ = class(__TDBParams__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDBParams__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDBParamsToVariant(var R : TDBParams) : OleVariant;
var
__rw : __TDBParams__Wrapper__;
begin
__rw := __TDBParams__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDBParams(const V : OleVariant) : TDBParams;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDBParams((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDBProp__Wrapper__ = class(__TDBProp__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDBProp__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDBPropToVariant(var R : TDBProp) : OleVariant;
var
__rw : __TDBProp__Wrapper__;
begin
__rw := __TDBProp__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDBProp(const V : OleVariant) : TDBProp;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDBProp((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDBPropIDSet__Wrapper__ = class(__TDBPropIDSet__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDBPropIDSet__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDBPropIDSetToVariant(var R : TDBPropIDSet) : OleVariant;
var
__rw : __TDBPropIDSet__Wrapper__;
begin
__rw := __TDBPropIDSet__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDBPropIDSet(const V : OleVariant) : TDBPropIDSet;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDBPropIDSet((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDBPropInfo__Wrapper__ = class(__TDBPropInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDBPropInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDBPropInfoToVariant(var R : TDBPropInfo) : OleVariant;
var
__rw : __TDBPropInfo__Wrapper__;
begin
__rw := __TDBPropInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDBPropInfo(const V : OleVariant) : TDBPropInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDBPropInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDBPropInfoSet__Wrapper__ = class(__TDBPropInfoSet__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDBPropInfoSet__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDBPropInfoSetToVariant(var R : TDBPropInfoSet) : OleVariant;
var
__rw : __TDBPropInfoSet__Wrapper__;
begin
__rw := __TDBPropInfoSet__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDBPropInfoSet(const V : OleVariant) : TDBPropInfoSet;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDBPropInfoSet((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDBPropSet__Wrapper__ = class(__TDBPropSet__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDBPropSet__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDBPropSetToVariant(var R : TDBPropSet) : OleVariant;
var
__rw : __TDBPropSet__Wrapper__;
begin
__rw := __TDBPropSet__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDBPropSet(const V : OleVariant) : TDBPropSet;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDBPropSet((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDBTime__Wrapper__ = class(__TDBTime__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDBTime__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDBTimeToVariant(var R : TDBTime) : OleVariant;
var
__rw : __TDBTime__Wrapper__;
begin
__rw := __TDBTime__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDBTime(const V : OleVariant) : TDBTime;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDBTime((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDBTimeStamp__Wrapper__ = class(__TDBTimeStamp__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDBTimeStamp__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDBTimeStampToVariant(var R : TDBTimeStamp) : OleVariant;
var
__rw : __TDBTimeStamp__Wrapper__;
begin
__rw := __TDBTimeStamp__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDBTimeStamp(const V : OleVariant) : TDBTimeStamp;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDBTimeStamp((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDBVarNumeric__Wrapper__ = class(__TDBVarNumeric__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDBVarNumeric__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDBVarNumericToVariant(var R : TDBVarNumeric) : OleVariant;
var
__rw : __TDBVarNumeric__Wrapper__;
begin
__rw := __TDBVarNumeric__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDBVarNumeric(const V : OleVariant) : TDBVarNumeric;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDBVarNumeric((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TDBVector__Wrapper__ = class(__TDBVector__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TDBVector__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTDBVectorToVariant(var R : TDBVector) : OleVariant;
var
__rw : __TDBVector__Wrapper__;
begin
__rw := __TDBVector__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTDBVector(const V : OleVariant) : TDBVector;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TDBVector((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TErrorInfo__Wrapper__ = class(__TErrorInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TErrorInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTErrorInfoToVariant(var R : TErrorInfo) : OleVariant;
var
__rw : __TErrorInfo__Wrapper__;
begin
__rw := __TErrorInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTErrorInfo(const V : OleVariant) : TErrorInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TErrorInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TExplicitAccessW__Wrapper__ = class(__TExplicitAccessW__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TExplicitAccessW__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTExplicitAccessWToVariant(var R : TExplicitAccessW) : OleVariant;
var
__rw : __TExplicitAccessW__Wrapper__;
begin
__rw := __TExplicitAccessW__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTExplicitAccessW(const V : OleVariant) : TExplicitAccessW;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TExplicitAccessW((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TMDAxisInfo__Wrapper__ = class(__TMDAxisInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TMDAxisInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTMDAxisInfoToVariant(var R : TMDAxisInfo) : OleVariant;
var
__rw : __TMDAxisInfo__Wrapper__;
begin
__rw := __TMDAxisInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTMDAxisInfo(const V : OleVariant) : TMDAxisInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TMDAxisInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRUSTEE_W__Wrapper__ = class(__TRUSTEE_W__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRUSTEE_W__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRUSTEE_WToVariant(var R : TRUSTEE_W) : OleVariant;
var
__rw : __TRUSTEE_W__Wrapper__;
begin
__rw := __TRUSTEE_W__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRUSTEE_W(const V : OleVariant) : TRUSTEE_W;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRUSTEE_W((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSecObject__Wrapper__ = class(__TSecObject__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSecObject__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSecObjectToVariant(var R : TSecObject) : OleVariant;
var
__rw : __TSecObject__Wrapper__;
begin
__rw := __TSecObject__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSecObject(const V : OleVariant) : TSecObject;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSecObject((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSecObjectElement__Wrapper__ = class(__TSecObjectElement__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSecObjectElement__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSecObjectElementToVariant(var R : TSecObjectElement) : OleVariant;
var
__rw : __TSecObjectElement__Wrapper__;
begin
__rw := __TSecObjectElement__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSecObjectElement(const V : OleVariant) : TSecObjectElement;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSecObjectElement((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TXActOpt__Wrapper__ = class(__TXActOpt__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TXActOpt__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTXActOptToVariant(var R : TXActOpt) : OleVariant;
var
__rw : __TXActOpt__Wrapper__;
begin
__rw := __TXActOpt__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTXActOpt(const V : OleVariant) : TXActOpt;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TXActOpt((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TXactStats__Wrapper__ = class(__TXactStats__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TXactStats__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTXactStatsToVariant(var R : TXactStats) : OleVariant;
var
__rw : __TXactStats__Wrapper__;
begin
__rw := __TXactStats__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTXactStats(const V : OleVariant) : TXactStats;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TXactStats((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TXactTransInfo__Wrapper__ = class(__TXactTransInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TXactTransInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTXactTransInfoToVariant(var R : TXactTransInfo) : OleVariant;
var
__rw : __TXactTransInfo__Wrapper__;
begin
__rw := __TXactTransInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTXactTransInfo(const V : OleVariant) : TXactTransInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TXactTransInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __XACTOPT__Wrapper__ = class(__XACTOPT__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __XACTOPT__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertXACTOPTToVariant(var R : XACTOPT) : OleVariant;
var
__rw : __XACTOPT__Wrapper__;
begin
__rw := __XACTOPT__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToXACTOPT(const V : OleVariant) : XACTOPT;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := XACTOPT((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __XACTSTATS__Wrapper__ = class(__XACTSTATS__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __XACTSTATS__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertXACTSTATSToVariant(var R : XACTSTATS) : OleVariant;
var
__rw : __XACTSTATS__Wrapper__;
begin
__rw := __XACTSTATS__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToXACTSTATS(const V : OleVariant) : XACTSTATS;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := XACTSTATS((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __XACTTRANSINFO__Wrapper__ = class(__XACTTRANSINFO__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __XACTTRANSINFO__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertXACTTRANSINFOToVariant(var R : XACTTRANSINFO) : OleVariant;
var
__rw : __XACTTRANSINFO__Wrapper__;
begin
__rw := __XACTTRANSINFO__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToXACTTRANSINFO(const V : OleVariant) : XACTTRANSINFO;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := XACTTRANSINFO((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..346] of string = (
'DBPROPSET_COLUMNALL'
,'DBPROPSET_CONSTRAINTALL'
,'DBPROPSET_INDEXALL'
,'DBPROPSET_TABLEALL'
,'DBPROPSET_TRUSTEEALL'
,'MAXCOLS'
,'MAXBOUND'
,'OLEDBVER'
,'DB_INVALID_HACCESSOR'
,'DB_NULL_HROW'
,'DBWATCHREGION_NULL'
,'DB_NULL_HCHAPTER'
,'STD_BOOKMARKLENGTH'
,'DB_INVALIDCOLUMN'
,'DBPROPVAL_BMK_NUMERIC'
,'DBPROPVAL_BMK_KEY'
,'DBPROPVAL_CL_START'
,'DBPROPVAL_CL_END'
,'DBPROPVAL_CU_DML_STATEMENTS'
,'DBPROPVAL_CU_TABLE_DEFINITION'
,'DBPROPVAL_CU_INDEX_DEFINITION'
,'DBPROPVAL_CU_PRIVILEGE_DEFINITION'
,'DBPROPVAL_CD_NOTNULL'
,'DBPROPVAL_CB_NULL'
,'DBPROPVAL_CB_NON_NULL'
,'DBPROPVAL_FU_NOT_SUPPORTED'
,'DBPROPVAL_FU_COLUMN'
,'DBPROPVAL_FU_TABLE'
,'DBPROPVAL_FU_CATALOG'
,'DBPROPVAL_GB_NOT_SUPPORTED'
,'DBPROPVAL_GB_EQUALS_SELECT'
,'DBPROPVAL_GB_CONTAINS_SELECT'
,'DBPROPVAL_GB_NO_RELATION'
,'DBPROPVAL_HT_DIFFERENT_CATALOGS'
,'DBPROPVAL_HT_DIFFERENT_PROVIDERS'
,'DBPROPVAL_IC_UPPER'
,'DBPROPVAL_IC_LOWER'
,'DBPROPVAL_IC_SENSITIVE'
,'DBPROPVAL_IC_MIXED'
,'DBPROPVAL_LM_NONE'
,'DBPROPVAL_LM_READ'
,'DBPROPVAL_LM_INTENT'
,'DBPROPVAL_LM_RITE'
,'DBPROPVAL_NP_OKTODO'
,'DBPROPVAL_NP_ABOUTTODO'
,'DBPROPVAL_NP_SYNCHAFTER'
,'DBPROPVAL_NP_FAILEDTODO'
,'DBPROPVAL_NP_DIDEVENT'
,'DBPROPVAL_NC_END'
,'DBPROPVAL_NC_HIGH'
,'DBPROPVAL_NC_LOW'
,'DBPROPVAL_NC_START'
,'DBPROPVAL_OO_BLOB'
,'DBPROPVAL_OO_IPERSIST'
,'DBPROPVAL_CB_DELETE'
,'DBPROPVAL_CB_PRESERVE'
,'DBPROPVAL_SU_DML_STATEMENTS'
,'DBPROPVAL_SU_TABLE_DEFINITION'
,'DBPROPVAL_SU_INDEX_DEFINITION'
,'DBPROPVAL_SU_PRIVILEGE_DEFINITION'
,'DBPROPVAL_SQ_CORRELATEDSUBQUERIES'
,'DBPROPVAL_SQ_COMPARISON'
,'DBPROPVAL_SQ_EXISTS'
,'DBPROPVAL_SQ_IN'
,'DBPROPVAL_SQ_QUANTIFIED'
,'DBPROPVAL_SS_ISEQUENTIALSTREAM'
,'DBPROPVAL_SS_ISTREAM'
,'DBPROPVAL_SS_ISTORAGE'
,'DBPROPVAL_SS_ILOCKBYTES'
,'DBPROPVAL_TI_CHAOS'
,'DBPROPVAL_TI_READUNCOMMITTED'
,'DBPROPVAL_TI_BROWSE'
,'DBPROPVAL_TI_CURSORSTABILITY'
,'DBPROPVAL_TI_READCOMMITTED'
,'DBPROPVAL_TI_REPEATABLEREAD'
,'DBPROPVAL_TI_SERIALIZABLE'
,'DBPROPVAL_TI_ISOLATED'
,'DBPROPVAL_TR_COMMIT_DC'
,'DBPROPVAL_TR_COMMIT'
,'DBPROPVAL_TR_COMMIT_NO'
,'DBPROPVAL_TR_ABORT_DC'
,'DBPROPVAL_TR_ABORT'
,'DBPROPVAL_TR_ABORT_NO'
,'DBPROPVAL_TR_DONTCARE'
,'DBPROPVAL_TR_BOTH'
,'DBPROPVAL_TR_NONE'
,'DBPROPVAL_TR_OPTIMISTIC'
,'DBPROPVAL_RT_FREETHREAD'
,'DBPROPVAL_RT_APTMTTHREAD'
,'DBPROPVAL_RT_SINGLETHREAD'
,'DBPROPVAL_UP_CHANGE'
,'DBPROPVAL_UP_DELETE'
,'DBPROPVAL_UP_INSERT'
,'DBPROPVAL_SQL_NONE'
,'DBPROPVAL_SQL_ODBC_MINIMUM'
,'DBPROPVAL_SQL_ODBC_CORE'
,'DBPROPVAL_SQL_ODBC_EXTENDED'
,'DBPROPVAL_SQL_ANSI89_IEF'
,'DBPROPVAL_SQL_ANSI92_ENTRY'
,'DBPROPVAL_SQL_FIPS_TRANSITIONAL'
,'DBPROPVAL_SQL_ANSI92_INTERMEDIATE'
,'DBPROPVAL_SQL_ANSI92_FULL'
,'DBPROPVAL_SQL_ESCAPECLAUSES'
,'DBPROPVAL_IT_BTREE'
,'DBPROPVAL_IT_HASH'
,'DBPROPVAL_IT_CONTENT'
,'DBPROPVAL_IT_OTHER'
,'DBPROPVAL_IN_DISALLOWNULL'
,'DBPROPVAL_IN_IGNORENULL'
,'DBPROPVAL_IN_IGNOREANYNULL'
,'DBPROPVAL_TC_NONE'
,'DBPROPVAL_TC_DML'
,'DBPROPVAL_TC_DDL_COMMIT'
,'DBPROPVAL_TC_DDL_IGNORE'
,'DBPROPVAL_TC_ALL'
,'DBPROPVAL_OA_NOTSUPPORTED'
,'DBPROPVAL_OA_ATEXECUTE'
,'DBPROPVAL_OA_ATROWRELEASE'
,'DBPROPVAL_MR_NOTSUPPORTED'
,'DBPROPVAL_MR_SUPPORTED'
,'DBPROPVAL_MR_CONCURRENT'
,'DBPROPVAL_PT_GUID_NAME'
,'DBPROPVAL_PT_GUID_PROPID'
,'DBPROPVAL_PT_NAME'
,'DBPROPVAL_PT_GUID'
,'DBPROPVAL_PT_PROPID'
,'DBPROPVAL_PT_PGUID_NAME'
,'DBPROPVAL_PT_PGUID_PROPID'
,'DBPROPVAL_NT_SINGLEROW'
,'DBPROPVAL_NT_MULTIPLEROWS'
,'DBPROPVAL_ASYNCH_INITIALIZE'
,'DBPROPVAL_ASYNCH_SEQUENTIALPOPULATION'
,'DBPROPVAL_ASYNCH_RANDOMPOPULATION'
,'DBPROPVAL_OP_EQUAL'
,'DBPROPVAL_OP_RELATIVE'
,'DBPROPVAL_OP_STRING'
,'DBPROPVAL_CO_EQUALITY'
,'DBPROPVAL_CO_STRING'
,'DBPROPVAL_CO_CASESENSITIVE'
,'DBPROPVAL_CO_CASEINSENSITIVE'
,'DBPROPVAL_CO_CONTAINS'
,'DBPROPVAL_CO_BEGINSWITH'
,'DBPROPVAL_ASYNCH_BACKGROUNDPOPULATION'
,'DBPROPVAL_ASYNCH_PREPOPULATE'
,'DBPROPVAL_ASYNCH_POPULATEONDEMAND'
,'DBPROPVAL_LM_SINGLEROW'
,'DBPROPVAL_SQL_SUBMINIMUM'
,'DBPROPVAL_DST_TDP'
,'DBPROPVAL_DST_MDP'
,'DBPROPVAL_DST_TDPANDMDP'
,'MDPROPVAL_AU_UNSUPPORTED'
,'MDPROPVAL_AU_UNCHANGED'
,'MDPROPVAL_AU_UNKNOWN'
,'MDPROPVAL_MF_WITH_CALCMEMBERS'
,'MDPROPVAL_MF_WITH_NAMEDSETS'
,'MDPROPVAL_MF_CREATE_CALCMEMBERS'
,'MDPROPVAL_MF_CREATE_NAMEDSETS'
,'MDPROPVAL_MF_SCOPE_SESSION'
,'MDPROPVAL_MF_SCOPE_GLOBAL'
,'MDPROPVAL_MMF_COUSIN'
,'MDPROPVAL_MMF_PARALLELPERIOD'
,'MDPROPVAL_MMF_OPENINGPERIOD'
,'MDPROPVAL_MMF_CLOSINGPERIOD'
,'MDPROPVAL_MNF_MEDIAN'
,'MDPROPVAL_MNF_VAR'
,'MDPROPVAL_MNF_STDDEV'
,'MDPROPVAL_MNF_RANK'
,'MDPROPVAL_MNF_AGGREGATE'
,'MDPROPVAL_MNF_COVARIANCE'
,'MDPROPVAL_MNF_CORRELATION'
,'MDPROPVAL_MNF_LINREGSLOPE'
,'MDPROPVAL_MNF_LINREGVARIANCE'
,'MDPROPVAL_MNF_LINREG2'
,'MDPROPVAL_MNF_LINREGPOINT'
,'MDPROPVAL_MNF_DRILLDOWNLEVEL'
,'MDPROPVAL_MNF_DRILLDOWNMEMBERTOP'
,'MDPROPVAL_MNF_DRILLDOWNMEMBERBOTTOM'
,'MDPROPVAL_MNF_DRILLDOWNLEVELTOP'
,'MDPROPVAL_MNF_DRILLDOWNLEVELBOTTOM'
,'MDPROPVAL_MNF_DRILLUPMEMBER'
,'MDPROPVAL_MNF_DRILLUPLEVEL'
,'MDPROPVAL_MSF_TOPPERCENT'
,'MDPROPVAL_MSF_BOTTOMPERCENT'
,'MDPROPVAL_MSF_TOPSUM'
,'MDPROPVAL_MSF_BOTTOMSUM'
,'MDPROPVAL_MSF_PERIODSTODATE'
,'MDPROPVAL_MSF_LASTPERIODS'
,'MDPROPVAL_MSF_YTD'
,'MDPROPVAL_MSF_QTD'
,'MDPROPVAL_MSF_MTD'
,'MDPROPVAL_MSF_WTD'
,'MDPROPVAL_MSF_DRILLDOWNMEMBBER'
,'MDPROPVAL_MSF_DRILLDOWNLEVEL'
,'MDPROPVAL_MSF_DRILLDOWNMEMBERTOP'
,'MDPROPVAL_MSF_DRILLDOWNMEMBERBOTTOM'
,'MDPROPVAL_MSF_DRILLDOWNLEVELTOP'
,'MDPROPVAL_MSF_DRILLDOWNLEVELBOTTOM'
,'MDPROPVAL_MSF_DRILLUPMEMBER'
,'MDPROPVAL_MSF_DRILLUPLEVEL'
,'MDPROPVAL_MSF_TOGGLEDRILLSTATE'
,'MDPROPVAL_MD_SELF'
,'MDPROPVAL_MD_BEFORE'
,'MDPROPVAL_MD_AFTER'
,'MDPROPVAL_MSC_LESSTHAN'
,'MDPROPVAL_MSC_GREATERTHAN'
,'MDPROPVAL_MSC_LESSTHANEQUAL'
,'MDPROPVAL_MSC_GREATERTHANEQUAL'
,'MDPROPVAL_MC_SINGLECASE'
,'MDPROPVAL_MC_SEARCHEDCASE'
,'MDPROPVAL_MOQ_OUTERREFERENCE'
,'MDPROPVAL_MOQ_DATASOURCE_CUBE'
,'MDPROPVAL_MOQ_CATALOG_CUBE'
,'MDPROPVAL_MOQ_SCHEMA_CUBE'
,'MDPROPVAL_MOQ_CUBE_DIM'
,'MDPROPVAL_MOQ_DIM_HIER'
,'MDPROPVAL_MOQ_DIMHIER_LEVEL'
,'MDPROPVAL_MOQ_LEVEL_MEMBER'
,'MDPROPVAL_MOQ_MEMBER_MEMBER'
,'MDPROPVAL_FS_FULL_SUPPORT'
,'MDPROPVAL_FS_GENERATED_COLUMN'
,'MDPROPVAL_FS_GENERATED_DIMENSION'
,'MDPROPVAL_FS_NO_SUPPORT'
,'MDPROPVAL_NL_NAMEDLEVELS'
,'MDPROPVAL_NL_NUMBEREDLEVELS'
,'MDPROPVAL_MJC_SINGLECUBE'
,'MDPROPVAL_MJC_MULTICUBES'
,'MDPROPVAL_MJC_IMPLICITCUBE'
,'MDPROPVAL_RR_NORANGEROWSET'
,'MDPROPVAL_RR_READONLY'
,'MDPROPVAL_RR_UPDATE'
,'MDPROPVAL_MS_MULTIPLETUPLES'
,'MDPROPVAL_MS_SINGLETUPLE'
,'DBPROPVAL_AO_SEQUENTIAL'
,'DBPROPVAL_AO_SEQUENTIALSTORAGEOBJECTS'
,'DBPROPVAL_AO_RANDOM'
,'DBPROPVAL_BD_ROWSET'
,'DBPROPVAL_BD_INTRANSACTION'
,'DBPROPVAL_BD_XTRANSACTION'
,'DBPROPVAL_BD_REORGANIZATION'
,'BMK_DURABILITY_ROWSET'
,'BMK_DURABILITY_INTRANSACTION'
,'BMK_DURABILITY_XTRANSACTION'
,'BMK_DURABILITY_REORGANIZATION'
,'DBPROPVAL_BO_NOLOG'
,'DBPROPVAL_BO_NOINDEXUPDATE'
,'DBPROPVAL_BO_REFINTEGRITY'
,'DBPROPVAL_STGM_READ'
,'DBPROPVAL_STGM_WRITE'
,'DBPROPVAL_STGM_READWRITE'
,'DBPROPVAL_STGM_SHARE_DENY_NONE'
,'DBPROPVAL_STGM_SHARE_DENY_READ'
,'DBPROPVAL_STGM_SHARE_DENY_WRITE'
,'DBPROPVAL_STGM_SHARE_EXCLUSIVE'
,'DBPROPVAL_STGM_DIRECT'
,'DBPROPVAL_STGM_TRANSACTED'
,'DBPROPVAL_STGM_CREATE'
,'DBPROPVAL_STGM_CONVERT'
,'DBPROPVAL_STGM_FAILIFTHERE'
,'DBPROPVAL_STGM_PRIORITY'
,'DBPROPVAL_STGM_DELETEONRELEASE'
,'DBPROPVAL_GB_COLLATE'
,'DBPROPVAL_CS_UNINITIALIZED'
,'DBPROPVAL_CS_INITIALIZED'
,'DBPROPVAL_CS_COMMUNICATIONFAILURE'
,'DBPROPVAL_RD_RESETALL'
,'DBPROPVAL_OS_RESOURCEPOOLING'
,'DBPROPVAL_OS_TXNENLISTMENT'
,'DBPROPVAL_OS_CLIENTCURSOR'
,'DBPROPVAL_OS_ENABLEALL'
,'DBPROPVAL_BI_CROSSROWSET'
,'DB_IMP_LEVEL_ANONYMOUS'
,'DB_IMP_LEVEL_IDENTIFY'
,'DB_IMP_LEVEL_IMPERSONATE'
,'DB_IMP_LEVEL_DELEGATE'
,'DBPROMPT_PROMPT'
,'DBPROMPT_COMPLETE'
,'DBPROMPT_COMPLETEREQUIRED'
,'DBPROMPT_NOPROMPT'
,'DB_PROT_LEVEL_NONE'
,'DB_PROT_LEVEL_CONNECT'
,'DB_PROT_LEVEL_CALL'
,'DB_PROT_LEVEL_PKT'
,'DB_PROT_LEVEL_PKT_INTEGRITY'
,'DB_PROT_LEVEL_PKT_PRIVACY'
,'DB_MODE_READ'
,'DB_MODE_WRITE'
,'DB_MODE_READWRITE'
,'DB_MODE_SHARE_DENY_READ'
,'DB_MODE_SHARE_DENY_WRITE'
,'DB_MODE_SHARE_EXCLUSIVE'
,'DB_MODE_SHARE_DENY_NONE'
,'DBCOMPUTEMODE_COMPUTED'
,'DBCOMPUTEMODE_DYNAMIC'
,'DBCOMPUTEMODE_NOTCOMPUTED'
,'DBPROPVAL_DF_INITIALLY_DEFERRED'
,'DBPROPVAL_DF_INITIALLY_IMMEDIATE'
,'DBPROPVAL_DF_NOT_DEFERRABLE'
,'DBPARAMTYPE_INPUT'
,'DBPARAMTYPE_INPUTOUTPUT'
,'DBPARAMTYPE_OUTPUT'
,'DBPARAMTYPE_RETURNVALUE'
,'DB_PT_UNKNOWN'
,'DB_PT_PROCEDURE'
,'DB_PT_FUNCTION'
,'DB_REMOTE'
,'DB_LOCAL_SHARED'
,'DB_LOCAL_EXCLUSIVE'
,'DB_COLLATION_ASC'
,'DB_COLLATION_DESC'
,'DB_UNSEARCHABLE'
,'DB_LIKE_ONLY'
,'DB_ALL_EXCEPT_LIKE'
,'DB_SEARCHABLE'
,'MDTREEOP_CHILDREN'
,'MDTREEOP_SIBLINGS'
,'MDTREEOP_PARENT'
,'MDTREEOP_SELF'
,'MDTREEOP_DESCENDANTS'
,'MDTREEOP_ANCESTORS'
,'MD_DIMTYPE_UNKNOWN'
,'MD_DIMTYPE_TIME'
,'MD_DIMTYPE_MEASURE'
,'MD_DIMTYPE_OTHER'
,'MDLEVEL_TYPE_UNKNOWN'
,'MDLEVEL_TYPE_REGULAR'
,'MDLEVEL_TYPE_ALL'
,'MDLEVEL_TYPE_CALCULATED'
,'MDLEVEL_TYPE_TIME'
,'MDLEVEL_TYPE_RESERVED1'
,'MDLEVEL_TYPE_TIME_YEARS'
,'MDLEVEL_TYPE_TIME_HALF_YEAR'
,'MDLEVEL_TYPE_TIME_QUARTERS'
,'MDLEVEL_TYPE_TIME_MONTHS'
,'MDLEVEL_TYPE_TIME_WEEKS'
,'MDLEVEL_TYPE_TIME_DAYS'
,'MDLEVEL_TYPE_TIME_HOURS'
,'MDLEVEL_TYPE_TIME_MINUTES'
,'MDLEVEL_TYPE_TIME_SECONDS'
,'MDLEVEL_TYPE_TIME_UNDEFINED'
,'MDMEASURE_AGGR_UNKNOWN'
,'MDMEASURE_AGGR_SUM'
,'MDMEASURE_AGGR_COUNT'
,'MDMEASURE_AGGR_MIN'
,'MDMEASURE_AGGR_MAX'
,'MDMEASURE_AGGR_AVG'
,'MDMEASURE_AGGR_VAR'
,'MDMEASURE_AGGR_STD'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,DBPROPSET_COLUMNALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,DBPROPSET_CONSTRAINTALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,DBPROPSET_INDEXALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,DBPROPSET_TABLEALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,DBPROPSET_TRUSTEEALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,MAXCOLS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,MAXBOUND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,OLEDBVER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,DB_INVALID_HACCESSOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,DB_NULL_HROW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,Integer(DBWATCHREGION_NULL)));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,DB_NULL_HCHAPTER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,STD_BOOKMARKLENGTH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,DB_INVALIDCOLUMN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,DBPROPVAL_BMK_NUMERIC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,DBPROPVAL_BMK_KEY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,DBPROPVAL_CL_START));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,DBPROPVAL_CL_END));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,DBPROPVAL_CU_DML_STATEMENTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,DBPROPVAL_CU_TABLE_DEFINITION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,DBPROPVAL_CU_INDEX_DEFINITION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,DBPROPVAL_CU_PRIVILEGE_DEFINITION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,DBPROPVAL_CD_NOTNULL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,DBPROPVAL_CB_NULL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,DBPROPVAL_CB_NON_NULL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,DBPROPVAL_FU_NOT_SUPPORTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,DBPROPVAL_FU_COLUMN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,DBPROPVAL_FU_TABLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,DBPROPVAL_FU_CATALOG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,DBPROPVAL_GB_NOT_SUPPORTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,DBPROPVAL_GB_EQUALS_SELECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,DBPROPVAL_GB_CONTAINS_SELECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,DBPROPVAL_GB_NO_RELATION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,DBPROPVAL_HT_DIFFERENT_CATALOGS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,DBPROPVAL_HT_DIFFERENT_PROVIDERS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,DBPROPVAL_IC_UPPER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,DBPROPVAL_IC_LOWER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,DBPROPVAL_IC_SENSITIVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,DBPROPVAL_IC_MIXED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,DBPROPVAL_LM_NONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,DBPROPVAL_LM_READ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,DBPROPVAL_LM_INTENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,DBPROPVAL_LM_RITE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,DBPROPVAL_NP_OKTODO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,DBPROPVAL_NP_ABOUTTODO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,DBPROPVAL_NP_SYNCHAFTER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,DBPROPVAL_NP_FAILEDTODO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,DBPROPVAL_NP_DIDEVENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,DBPROPVAL_NC_END));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,DBPROPVAL_NC_HIGH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,DBPROPVAL_NC_LOW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,DBPROPVAL_NC_START));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,DBPROPVAL_OO_BLOB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,DBPROPVAL_OO_IPERSIST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,DBPROPVAL_CB_DELETE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,DBPROPVAL_CB_PRESERVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,DBPROPVAL_SU_DML_STATEMENTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,DBPROPVAL_SU_TABLE_DEFINITION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,DBPROPVAL_SU_INDEX_DEFINITION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,DBPROPVAL_SU_PRIVILEGE_DEFINITION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,DBPROPVAL_SQ_CORRELATEDSUBQUERIES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,DBPROPVAL_SQ_COMPARISON));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,DBPROPVAL_SQ_EXISTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,DBPROPVAL_SQ_IN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,DBPROPVAL_SQ_QUANTIFIED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[65] ,DBPROPVAL_SS_ISEQUENTIALSTREAM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[66] ,DBPROPVAL_SS_ISTREAM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[67] ,DBPROPVAL_SS_ISTORAGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[68] ,DBPROPVAL_SS_ILOCKBYTES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[69] ,DBPROPVAL_TI_CHAOS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[70] ,DBPROPVAL_TI_READUNCOMMITTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[71] ,DBPROPVAL_TI_BROWSE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[72] ,DBPROPVAL_TI_CURSORSTABILITY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[73] ,DBPROPVAL_TI_READCOMMITTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[74] ,DBPROPVAL_TI_REPEATABLEREAD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[75] ,DBPROPVAL_TI_SERIALIZABLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[76] ,DBPROPVAL_TI_ISOLATED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[77] ,DBPROPVAL_TR_COMMIT_DC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[78] ,DBPROPVAL_TR_COMMIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[79] ,DBPROPVAL_TR_COMMIT_NO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[80] ,DBPROPVAL_TR_ABORT_DC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[81] ,DBPROPVAL_TR_ABORT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[82] ,DBPROPVAL_TR_ABORT_NO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[83] ,DBPROPVAL_TR_DONTCARE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[84] ,DBPROPVAL_TR_BOTH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[85] ,DBPROPVAL_TR_NONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[86] ,DBPROPVAL_TR_OPTIMISTIC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[87] ,DBPROPVAL_RT_FREETHREAD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[88] ,DBPROPVAL_RT_APTMTTHREAD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[89] ,DBPROPVAL_RT_SINGLETHREAD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[90] ,DBPROPVAL_UP_CHANGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[91] ,DBPROPVAL_UP_DELETE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[92] ,DBPROPVAL_UP_INSERT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[93] ,DBPROPVAL_SQL_NONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[94] ,DBPROPVAL_SQL_ODBC_MINIMUM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[95] ,DBPROPVAL_SQL_ODBC_CORE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[96] ,DBPROPVAL_SQL_ODBC_EXTENDED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[97] ,DBPROPVAL_SQL_ANSI89_IEF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[98] ,DBPROPVAL_SQL_ANSI92_ENTRY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[99] ,DBPROPVAL_SQL_FIPS_TRANSITIONAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[100] ,DBPROPVAL_SQL_ANSI92_INTERMEDIATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[101] ,DBPROPVAL_SQL_ANSI92_FULL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[102] ,DBPROPVAL_SQL_ESCAPECLAUSES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[103] ,DBPROPVAL_IT_BTREE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[104] ,DBPROPVAL_IT_HASH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[105] ,DBPROPVAL_IT_CONTENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[106] ,DBPROPVAL_IT_OTHER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[107] ,DBPROPVAL_IN_DISALLOWNULL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[108] ,DBPROPVAL_IN_IGNORENULL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[109] ,DBPROPVAL_IN_IGNOREANYNULL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[110] ,DBPROPVAL_TC_NONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[111] ,DBPROPVAL_TC_DML));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[112] ,DBPROPVAL_TC_DDL_COMMIT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[113] ,DBPROPVAL_TC_DDL_IGNORE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[114] ,DBPROPVAL_TC_ALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[115] ,DBPROPVAL_OA_NOTSUPPORTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[116] ,DBPROPVAL_OA_ATEXECUTE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[117] ,DBPROPVAL_OA_ATROWRELEASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[118] ,DBPROPVAL_MR_NOTSUPPORTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[119] ,DBPROPVAL_MR_SUPPORTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[120] ,DBPROPVAL_MR_CONCURRENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[121] ,DBPROPVAL_PT_GUID_NAME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[122] ,DBPROPVAL_PT_GUID_PROPID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[123] ,DBPROPVAL_PT_NAME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[124] ,DBPROPVAL_PT_GUID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[125] ,DBPROPVAL_PT_PROPID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[126] ,DBPROPVAL_PT_PGUID_NAME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[127] ,DBPROPVAL_PT_PGUID_PROPID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[128] ,DBPROPVAL_NT_SINGLEROW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[129] ,DBPROPVAL_NT_MULTIPLEROWS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[130] ,DBPROPVAL_ASYNCH_INITIALIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[131] ,DBPROPVAL_ASYNCH_SEQUENTIALPOPULATION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[132] ,DBPROPVAL_ASYNCH_RANDOMPOPULATION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[133] ,DBPROPVAL_OP_EQUAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[134] ,DBPROPVAL_OP_RELATIVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[135] ,DBPROPVAL_OP_STRING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[136] ,DBPROPVAL_CO_EQUALITY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[137] ,DBPROPVAL_CO_STRING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[138] ,DBPROPVAL_CO_CASESENSITIVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[139] ,DBPROPVAL_CO_CASEINSENSITIVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[140] ,DBPROPVAL_CO_CONTAINS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[141] ,DBPROPVAL_CO_BEGINSWITH));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[142] ,DBPROPVAL_ASYNCH_BACKGROUNDPOPULATION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[143] ,DBPROPVAL_ASYNCH_PREPOPULATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[144] ,DBPROPVAL_ASYNCH_POPULATEONDEMAND));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[145] ,DBPROPVAL_LM_SINGLEROW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[146] ,DBPROPVAL_SQL_SUBMINIMUM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[147] ,DBPROPVAL_DST_TDP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[148] ,DBPROPVAL_DST_MDP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[149] ,DBPROPVAL_DST_TDPANDMDP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[150] ,MDPROPVAL_AU_UNSUPPORTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[151] ,MDPROPVAL_AU_UNCHANGED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[152] ,MDPROPVAL_AU_UNKNOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[153] ,MDPROPVAL_MF_WITH_CALCMEMBERS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[154] ,MDPROPVAL_MF_WITH_NAMEDSETS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[155] ,MDPROPVAL_MF_CREATE_CALCMEMBERS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[156] ,MDPROPVAL_MF_CREATE_NAMEDSETS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[157] ,MDPROPVAL_MF_SCOPE_SESSION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[158] ,MDPROPVAL_MF_SCOPE_GLOBAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[159] ,MDPROPVAL_MMF_COUSIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[160] ,MDPROPVAL_MMF_PARALLELPERIOD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[161] ,MDPROPVAL_MMF_OPENINGPERIOD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[162] ,MDPROPVAL_MMF_CLOSINGPERIOD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[163] ,MDPROPVAL_MNF_MEDIAN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[164] ,MDPROPVAL_MNF_VAR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[165] ,MDPROPVAL_MNF_STDDEV));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[166] ,MDPROPVAL_MNF_RANK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[167] ,MDPROPVAL_MNF_AGGREGATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[168] ,MDPROPVAL_MNF_COVARIANCE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[169] ,MDPROPVAL_MNF_CORRELATION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[170] ,MDPROPVAL_MNF_LINREGSLOPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[171] ,MDPROPVAL_MNF_LINREGVARIANCE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[172] ,MDPROPVAL_MNF_LINREG2));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[173] ,MDPROPVAL_MNF_LINREGPOINT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[174] ,MDPROPVAL_MNF_DRILLDOWNLEVEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[175] ,MDPROPVAL_MNF_DRILLDOWNMEMBERTOP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[176] ,MDPROPVAL_MNF_DRILLDOWNMEMBERBOTTOM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[177] ,MDPROPVAL_MNF_DRILLDOWNLEVELTOP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[178] ,MDPROPVAL_MNF_DRILLDOWNLEVELBOTTOM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[179] ,MDPROPVAL_MNF_DRILLUPMEMBER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[180] ,MDPROPVAL_MNF_DRILLUPLEVEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[181] ,MDPROPVAL_MSF_TOPPERCENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[182] ,MDPROPVAL_MSF_BOTTOMPERCENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[183] ,MDPROPVAL_MSF_TOPSUM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[184] ,MDPROPVAL_MSF_BOTTOMSUM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[185] ,MDPROPVAL_MSF_PERIODSTODATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[186] ,MDPROPVAL_MSF_LASTPERIODS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[187] ,MDPROPVAL_MSF_YTD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[188] ,MDPROPVAL_MSF_QTD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[189] ,MDPROPVAL_MSF_MTD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[190] ,MDPROPVAL_MSF_WTD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[191] ,MDPROPVAL_MSF_DRILLDOWNMEMBBER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[192] ,MDPROPVAL_MSF_DRILLDOWNLEVEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[193] ,MDPROPVAL_MSF_DRILLDOWNMEMBERTOP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[194] ,MDPROPVAL_MSF_DRILLDOWNMEMBERBOTTOM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[195] ,MDPROPVAL_MSF_DRILLDOWNLEVELTOP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[196] ,MDPROPVAL_MSF_DRILLDOWNLEVELBOTTOM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[197] ,MDPROPVAL_MSF_DRILLUPMEMBER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[198] ,MDPROPVAL_MSF_DRILLUPLEVEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[199] ,MDPROPVAL_MSF_TOGGLEDRILLSTATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[200] ,MDPROPVAL_MD_SELF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[201] ,MDPROPVAL_MD_BEFORE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[202] ,MDPROPVAL_MD_AFTER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[203] ,MDPROPVAL_MSC_LESSTHAN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[204] ,MDPROPVAL_MSC_GREATERTHAN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[205] ,MDPROPVAL_MSC_LESSTHANEQUAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[206] ,MDPROPVAL_MSC_GREATERTHANEQUAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[207] ,MDPROPVAL_MC_SINGLECASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[208] ,MDPROPVAL_MC_SEARCHEDCASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[209] ,MDPROPVAL_MOQ_OUTERREFERENCE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[210] ,MDPROPVAL_MOQ_DATASOURCE_CUBE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[211] ,MDPROPVAL_MOQ_CATALOG_CUBE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[212] ,MDPROPVAL_MOQ_SCHEMA_CUBE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[213] ,MDPROPVAL_MOQ_CUBE_DIM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[214] ,MDPROPVAL_MOQ_DIM_HIER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[215] ,MDPROPVAL_MOQ_DIMHIER_LEVEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[216] ,MDPROPVAL_MOQ_LEVEL_MEMBER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[217] ,MDPROPVAL_MOQ_MEMBER_MEMBER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[218] ,MDPROPVAL_FS_FULL_SUPPORT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[219] ,MDPROPVAL_FS_GENERATED_COLUMN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[220] ,MDPROPVAL_FS_GENERATED_DIMENSION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[221] ,MDPROPVAL_FS_NO_SUPPORT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[222] ,MDPROPVAL_NL_NAMEDLEVELS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[223] ,MDPROPVAL_NL_NUMBEREDLEVELS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[224] ,MDPROPVAL_MJC_SINGLECUBE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[225] ,MDPROPVAL_MJC_MULTICUBES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[226] ,MDPROPVAL_MJC_IMPLICITCUBE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[227] ,MDPROPVAL_RR_NORANGEROWSET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[228] ,MDPROPVAL_RR_READONLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[229] ,MDPROPVAL_RR_UPDATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[230] ,MDPROPVAL_MS_MULTIPLETUPLES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[231] ,MDPROPVAL_MS_SINGLETUPLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[232] ,DBPROPVAL_AO_SEQUENTIAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[233] ,DBPROPVAL_AO_SEQUENTIALSTORAGEOBJECTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[234] ,DBPROPVAL_AO_RANDOM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[235] ,DBPROPVAL_BD_ROWSET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[236] ,DBPROPVAL_BD_INTRANSACTION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[237] ,DBPROPVAL_BD_XTRANSACTION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[238] ,DBPROPVAL_BD_REORGANIZATION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[239] ,BMK_DURABILITY_ROWSET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[240] ,BMK_DURABILITY_INTRANSACTION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[241] ,BMK_DURABILITY_XTRANSACTION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[242] ,BMK_DURABILITY_REORGANIZATION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[243] ,DBPROPVAL_BO_NOLOG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[244] ,DBPROPVAL_BO_NOINDEXUPDATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[245] ,DBPROPVAL_BO_REFINTEGRITY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[246] ,DBPROPVAL_STGM_READ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[247] ,DBPROPVAL_STGM_WRITE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[248] ,DBPROPVAL_STGM_READWRITE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[249] ,DBPROPVAL_STGM_SHARE_DENY_NONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[250] ,DBPROPVAL_STGM_SHARE_DENY_READ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[251] ,DBPROPVAL_STGM_SHARE_DENY_WRITE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[252] ,DBPROPVAL_STGM_SHARE_EXCLUSIVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[253] ,DBPROPVAL_STGM_DIRECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[254] ,DBPROPVAL_STGM_TRANSACTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[255] ,DBPROPVAL_STGM_CREATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[256] ,DBPROPVAL_STGM_CONVERT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[257] ,DBPROPVAL_STGM_FAILIFTHERE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[258] ,DBPROPVAL_STGM_PRIORITY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[259] ,DBPROPVAL_STGM_DELETEONRELEASE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[260] ,DBPROPVAL_GB_COLLATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[261] ,DBPROPVAL_CS_UNINITIALIZED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[262] ,DBPROPVAL_CS_INITIALIZED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[263] ,DBPROPVAL_CS_COMMUNICATIONFAILURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[264] ,DBPROPVAL_RD_RESETALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[265] ,DBPROPVAL_OS_RESOURCEPOOLING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[266] ,DBPROPVAL_OS_TXNENLISTMENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[267] ,DBPROPVAL_OS_CLIENTCURSOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[268] ,DBPROPVAL_OS_ENABLEALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[269] ,DBPROPVAL_BI_CROSSROWSET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[270] ,DB_IMP_LEVEL_ANONYMOUS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[271] ,DB_IMP_LEVEL_IDENTIFY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[272] ,DB_IMP_LEVEL_IMPERSONATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[273] ,DB_IMP_LEVEL_DELEGATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[274] ,DBPROMPT_PROMPT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[275] ,DBPROMPT_COMPLETE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[276] ,DBPROMPT_COMPLETEREQUIRED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[277] ,DBPROMPT_NOPROMPT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[278] ,DB_PROT_LEVEL_NONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[279] ,DB_PROT_LEVEL_CONNECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[280] ,DB_PROT_LEVEL_CALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[281] ,DB_PROT_LEVEL_PKT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[282] ,DB_PROT_LEVEL_PKT_INTEGRITY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[283] ,DB_PROT_LEVEL_PKT_PRIVACY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[284] ,DB_MODE_READ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[285] ,DB_MODE_WRITE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[286] ,DB_MODE_READWRITE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[287] ,DB_MODE_SHARE_DENY_READ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[288] ,DB_MODE_SHARE_DENY_WRITE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[289] ,DB_MODE_SHARE_EXCLUSIVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[290] ,DB_MODE_SHARE_DENY_NONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[291] ,DBCOMPUTEMODE_COMPUTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[292] ,DBCOMPUTEMODE_DYNAMIC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[293] ,DBCOMPUTEMODE_NOTCOMPUTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[294] ,DBPROPVAL_DF_INITIALLY_DEFERRED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[295] ,DBPROPVAL_DF_INITIALLY_IMMEDIATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[296] ,DBPROPVAL_DF_NOT_DEFERRABLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[297] ,DBPARAMTYPE_INPUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[298] ,DBPARAMTYPE_INPUTOUTPUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[299] ,DBPARAMTYPE_OUTPUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[300] ,DBPARAMTYPE_RETURNVALUE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[301] ,DB_PT_UNKNOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[302] ,DB_PT_PROCEDURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[303] ,DB_PT_FUNCTION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[304] ,DB_REMOTE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[305] ,DB_LOCAL_SHARED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[306] ,DB_LOCAL_EXCLUSIVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[307] ,DB_COLLATION_ASC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[308] ,DB_COLLATION_DESC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[309] ,DB_UNSEARCHABLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[310] ,DB_LIKE_ONLY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[311] ,DB_ALL_EXCEPT_LIKE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[312] ,DB_SEARCHABLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[313] ,MDTREEOP_CHILDREN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[314] ,MDTREEOP_SIBLINGS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[315] ,MDTREEOP_PARENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[316] ,MDTREEOP_SELF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[317] ,MDTREEOP_DESCENDANTS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[318] ,MDTREEOP_ANCESTORS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[319] ,MD_DIMTYPE_UNKNOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[320] ,MD_DIMTYPE_TIME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[321] ,MD_DIMTYPE_MEASURE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[322] ,MD_DIMTYPE_OTHER));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[323] ,MDLEVEL_TYPE_UNKNOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[324] ,MDLEVEL_TYPE_REGULAR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[325] ,MDLEVEL_TYPE_ALL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[326] ,MDLEVEL_TYPE_CALCULATED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[327] ,MDLEVEL_TYPE_TIME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[328] ,MDLEVEL_TYPE_RESERVED1));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[329] ,MDLEVEL_TYPE_TIME_YEARS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[330] ,MDLEVEL_TYPE_TIME_HALF_YEAR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[331] ,MDLEVEL_TYPE_TIME_QUARTERS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[332] ,MDLEVEL_TYPE_TIME_MONTHS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[333] ,MDLEVEL_TYPE_TIME_WEEKS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[334] ,MDLEVEL_TYPE_TIME_DAYS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[335] ,MDLEVEL_TYPE_TIME_HOURS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[336] ,MDLEVEL_TYPE_TIME_MINUTES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[337] ,MDLEVEL_TYPE_TIME_SECONDS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[338] ,MDLEVEL_TYPE_TIME_UNDEFINED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[339] ,MDMEASURE_AGGR_UNKNOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[340] ,MDMEASURE_AGGR_SUM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[341] ,MDMEASURE_AGGR_COUNT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[342] ,MDMEASURE_AGGR_MIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[343] ,MDMEASURE_AGGR_MAX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[344] ,MDMEASURE_AGGR_AVG));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[345] ,MDMEASURE_AGGR_VAR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[346] ,MDMEASURE_AGGR_STD));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const __ConstNames1 : array[0..511] of string = (
'MDMEASURE_AGGR_CALCULATED'
,'MDPROP_MEMBER'
,'MDPROP_CELL'
,'MDMEMBER_TYPE_UNKNOWN'
,'MDMEMBER_TYPE_REGULAR'
,'MDMEMBER_TYPE_ALL'
,'MDMEMBER_TYPE_MEASURE'
,'MDMEMBER_TYPE_FORMULA'
,'MDMEMBER_TYPE_RESERVE1'
,'MDMEMBER_TYPE_RESERVE2'
,'MDMEMBER_TYPE_RESERVE3'
,'MDMEMBER_TYPE_RESERVE4'
,'MDDISPINFO_DRILLED_DOWN'
,'MDDISPINFO_PARENT_SAME_AS_PREV'
,'DB_COUNTUNAVAILABLE'
,'MDFF_BOLD'
,'MDFF_ITALIC'
,'MDFF_UNDERLINE'
,'MDFF_STRIKEOUT'
,'MDAXIS_COLUMNS'
,'MDAXIS_ROWS'
,'MDAXIS_PAGES'
,'MDAXIS_SECTIONS'
,'MDAXIS_CHAPTERS'
,'MDAXIS_SLICERS'
,'GENERATE_METHOD_EXACT'
,'GENERATE_METHOD_PREFIX'
,'GENERATE_METHOD_INFLECT'
,'PROPID_QUERY_RANKVECTOR'
,'PROPID_QUERY_RANK'
,'PROPID_QUERY_HITCOUNT'
,'PROPID_QUERY_ALL'
,'PROPID_STG_CONTENTS'
,'VECTOR_RANK_MIN'
,'VECTOR_RANK_MAX'
,'VECTOR_RANK_INNER'
,'VECTOR_RANK_DICE'
,'VECTOR_RANK_JACCARD'
,'DBSETFUNC_NONE'
,'DBSETFUNC_ALL'
,'DBSETFUNC_DISTINCT'
,'PROXIMITY_UNIT_WORD'
,'PROXIMITY_UNIT_SENTENCE'
,'PROXIMITY_UNIT_PARAGRAPH'
,'PROXIMITY_UNIT_CHAPTER'
,'CRESTRICTIONS_DBSCHEMA_ASSERTIONS'
,'CRESTRICTIONS_DBSCHEMA_CATALOGS'
,'CRESTRICTIONS_DBSCHEMA_CHARACTER_SETS'
,'CRESTRICTIONS_DBSCHEMA_COLLATIONS'
,'CRESTRICTIONS_DBSCHEMA_COLUMNS'
,'CRESTRICTIONS_DBSCHEMA_CHECK_CONSTRAINTS'
,'CRESTRICTIONS_DBSCHEMA_CONSTRAINT_COLUMN_USAGE'
,'CRESTRICTIONS_DBSCHEMA_CONSTRAINT_TABLE_USAGE'
,'CRESTRICTIONS_DBSCHEMA_KEY_COLUMN_USAGE'
,'CRESTRICTIONS_DBSCHEMA_REFERENTIAL_CONSTRAINTS'
,'CRESTRICTIONS_DBSCHEMA_TABLE_CONSTRAINTS'
,'CRESTRICTIONS_DBSCHEMA_COLUMN_DOMAIN_USAGE'
,'CRESTRICTIONS_DBSCHEMA_INDEXES'
,'CRESTRICTIONS_DBSCHEMA_OBJECT_ACTIONS'
,'CRESTRICTIONS_DBSCHEMA_OBJECTS'
,'CRESTRICTIONS_DBSCHEMA_COLUMN_PRIVILEGES'
,'CRESTRICTIONS_DBSCHEMA_TABLE_PRIVILEGES'
,'CRESTRICTIONS_DBSCHEMA_USAGE_PRIVILEGES'
,'CRESTRICTIONS_DBSCHEMA_PROCEDURES'
,'CRESTRICTIONS_DBSCHEMA_SCHEMATA'
,'CRESTRICTIONS_DBSCHEMA_SQL_LANGUAGES'
,'CRESTRICTIONS_DBSCHEMA_STATISTICS'
,'CRESTRICTIONS_DBSCHEMA_TABLES'
,'CRESTRICTIONS_DBSCHEMA_TRANSLATIONS'
,'CRESTRICTIONS_DBSCHEMA_PROVIDER_TYPES'
,'CRESTRICTIONS_DBSCHEMA_VIEWS'
,'CRESTRICTIONS_DBSCHEMA_VIEW_COLUMN_USAGE'
,'CRESTRICTIONS_DBSCHEMA_VIEW_TABLE_USAGE'
,'CRESTRICTIONS_DBSCHEMA_PROCEDURE_PARAMETERS'
,'CRESTRICTIONS_DBSCHEMA_FOREIGN_KEYS'
,'CRESTRICTIONS_DBSCHEMA_PRIMARY_KEYS'
,'CRESTRICTIONS_DBSCHEMA_PROCEDURE_COLUMNS'
,'CRESTRICTIONS_DBSCHEMA_TABLES_INFO'
,'CRESTRICTIONS_MDSCHEMA_CUBES'
,'CRESTRICTIONS_MDSCHEMA_DIMENSIONS'
,'CRESTRICTIONS_MDSCHEMA_HIERARCHIES'
,'CRESTRICTIONS_MDSCHEMA_LEVELS'
,'CRESTRICTIONS_MDSCHEMA_MEASURES'
,'CRESTRICTIONS_MDSCHEMA_PROPERTIES'
,'CRESTRICTIONS_MDSCHEMA_MEMBERS'
,'MAX_TRAN_DESC'
,'ISOLATIONLEVEL_UNSPECIFIED'
,'ISOLATIONLEVEL_CHAOS'
,'ISOLATIONLEVEL_READUNCOMMITTED'
,'ISOLATIONLEVEL_BROWSE'
,'ISOLATIONLEVEL_CURSORSTABILITY'
,'ISOLATIONLEVEL_READCOMMITTED'
,'ISOLATIONLEVEL_REPEATABLEREAD'
,'ISOLATIONLEVEL_SERIALIZABLE'
,'ISOLATIONLEVEL_ISOLATED'
,'ISOFLAG_RETAIN_COMMIT_DC'
,'ISOFLAG_RETAIN_COMMIT'
,'ISOFLAG_RETAIN_COMMIT_NO'
,'ISOFLAG_RETAIN_ABORT_DC'
,'ISOFLAG_RETAIN_ABORT'
,'ISOFLAG_RETAIN_ABORT_NO'
,'ISOFLAG_RETAIN_DONTCARE'
,'ISOFLAG_RETAIN_BOTH'
,'ISOFLAG_RETAIN_NONE'
,'ISOFLAG_OPTIMISTIC'
,'ISOFLAG_READONLY'
,'XACTTC_SYNC_PHASEONE'
,'XACTTC_SYNC_PHASETWO'
,'XACTTC_SYNC'
,'XACTTC_ASYNC_PHASEONE'
,'XACTTC_ASYNC'
,'XACTRM_OPTIMISTICLASTWINS'
,'XACTRM_NOREADONLYPREPARES'
,'XACTCONST_TIMEOUTINFINITE'
,'XACTHEURISTIC_ABORT'
,'XACTHEURISTIC_COMMIT'
,'XACTHEURISTIC_DAMAGE'
,'XACTHEURISTIC_DANGER'
,'XACTSTAT_NONE'
,'XACTSTAT_OPENNORMAL'
,'XACTSTAT_OPENREFUSED'
,'XACTSTAT_PREPARING'
,'XACTSTAT_PREPARED'
,'XACTSTAT_PREPARERETAINING'
,'XACTSTAT_PREPARERETAINED'
,'XACTSTAT_COMMITTING'
,'XACTSTAT_COMMITRETAINING'
,'XACTSTAT_ABORTING'
,'XACTSTAT_ABORTED'
,'XACTSTAT_COMMITTED'
,'XACTSTAT_HEURISTIC_ABORT'
,'XACTSTAT_HEURISTIC_COMMIT'
,'XACTSTAT_HEURISTIC_DAMAGE'
,'XACTSTAT_HEURISTIC_DANGER'
,'XACTSTAT_FORCED_ABORT'
,'XACTSTAT_FORCED_COMMIT'
,'XACTSTAT_INDOUBT'
,'XACTSTAT_CLOSED'
,'XACTSTAT_OPEN'
,'XACTSTAT_NOTPREPARED'
,'XACTSTAT_ALL'
,'XACT_E_FIRST'
,'XACT_E_LAST'
,'XACT_S_FIRST'
,'XACT_S_LAST'
,'XACT_E_ALREADYOTHERSINGLEPHASE'
,'XACT_E_CANTRETAIN'
,'XACT_E_COMMITFAILED'
,'XACT_E_COMMITPREVENTED'
,'XACT_E_HEURISTICABORT'
,'XACT_E_HEURISTICCOMMIT'
,'XACT_E_HEURISTICDAMAGE'
,'XACT_E_HEURISTICDANGER'
,'XACT_E_ISOLATIONLEVEL'
,'XACT_E_NOASYNC'
,'XACT_E_NOENLIST'
,'XACT_E_NOISORETAIN'
,'XACT_E_NORESOURCE'
,'XACT_E_NOTCURRENT'
,'XACT_E_NOTRANSACTION'
,'XACT_E_NOTSUPPORTED'
,'XACT_E_UNKNOWNRMGRID'
,'XACT_E_WRONGSTATE'
,'XACT_E_WRONGUOW'
,'XACT_E_XTIONEXISTS'
,'XACT_E_NOIMPORTOBJECT'
,'XACT_E_INVALIDCOOKIE'
,'XACT_E_INDOUBT'
,'XACT_E_NOTIMEOUT'
,'XACT_E_ALREADYINPROGRESS'
,'XACT_E_ABORTED'
,'XACT_E_LOGFULL'
,'XACT_E_TMNOTAVAILABLE'
,'XACT_E_CONNECTION_DOWN'
,'XACT_E_CONNECTION_DENIED'
,'XACT_E_REENLISTTIMEOUT'
,'XACT_S_ASYNC'
,'XACT_S_DEFECT'
,'XACT_S_READONLY'
,'XACT_S_SOMENORETAIN'
,'XACT_S_OKINFORM'
,'XACT_S_MADECHANGESCONTENT'
,'XACT_S_MADECHANGESINFORM'
,'XACT_S_ALLNORETAIN'
,'XACT_S_ABORTING'
,'XACT_S_SINGLEPHASE'
,'DBKIND_GUID_NAME'
,'DBKIND_GUID_PROPID'
,'DBKIND_NAME'
,'DBKIND_PGUID_NAME'
,'DBKIND_PGUID_PROPID'
,'DBKIND_PROPID'
,'DBKIND_GUID'
,'DBTYPE_EMPTY'
,'DBTYPE_NULL'
,'DBTYPE_I2'
,'DBTYPE_I4'
,'DBTYPE_R4'
,'DBTYPE_R8'
,'DBTYPE_CY'
,'DBTYPE_DATE'
,'DBTYPE_BSTR'
,'DBTYPE_IDISPATCH'
,'DBTYPE_ERROR'
,'DBTYPE_BOOL'
,'DBTYPE_VARIANT'
,'DBTYPE_IUNKNOWN'
,'DBTYPE_DECIMAL'
,'DBTYPE_UI1'
,'DBTYPE_ARRAY'
,'DBTYPE_BYREF'
,'DBTYPE_I1'
,'DBTYPE_UI2'
,'DBTYPE_UI4'
,'DBTYPE_I8'
,'DBTYPE_UI8'
,'DBTYPE_GUID'
,'DBTYPE_VECTOR'
,'DBTYPE_RESERVED'
,'DBTYPE_BYTES'
,'DBTYPE_STR'
,'DBTYPE_WSTR'
,'DBTYPE_NUMERIC'
,'DBTYPE_UDT'
,'DBTYPE_DBDATE'
,'DBTYPE_DBTIME'
,'DBTYPE_DBTIMESTAMP'
,'DBTYPE_HCHAPTER'
,'DBTYPE_FILETIME'
,'DBTYPE_DBFILETIME'
,'DBTYPE_PROPVARIANT'
,'DBTYPE_VARNUMERIC'
,'DBPART_INVALID'
,'DBPART_VALUE'
,'DBPART_LENGTH'
,'DBPART_STATUS'
,'DBPARAMIO_NOTPARAM'
,'DBPARAMIO_INPUT'
,'DBPARAMIO_OUTPUT'
,'DBBINDFLAG_HTML'
,'DBMEMOWNER_CLIENTOWNED'
,'DBMEMOWNER_PROVIDEROWNED'
,'DBSTATUS_S_OK'
,'DBSTATUS_E_BADACCESSOR'
,'DBSTATUS_E_CANTCONVERTVALUE'
,'DBSTATUS_S_ISNULL'
,'DBSTATUS_S_TRUNCATED'
,'DBSTATUS_E_SIGNMISMATCH'
,'DBSTATUS_E_DATAOVERFLOW'
,'DBSTATUS_E_CANTCREATE'
,'DBSTATUS_E_UNAVAILABLE'
,'DBSTATUS_E_PERMISSIONDENIED'
,'DBSTATUS_E_INTEGRITYVIOLATION'
,'DBSTATUS_E_SCHEMAVIOLATION'
,'DBSTATUS_E_BADSTATUS'
,'DBSTATUS_S_DEFAULT'
,'MDSTATUS_S_CELLEMPTY'
,'DBSTATUS_S_IGNORE'
,'DBROWSTATUS_S_OK'
,'DBROWSTATUS_S_MULTIPLECHANGES'
,'DBROWSTATUS_S_PENDINGCHANGES'
,'DBROWSTATUS_E_CANCELED'
,'DBROWSTATUS_E_CANTRELEASE'
,'DBROWSTATUS_E_CONCURRENCYVIOLATION'
,'DBROWSTATUS_E_DELETED'
,'DBROWSTATUS_E_PENDINGINSERT'
,'DBROWSTATUS_E_NEWLYINSERTED'
,'DBROWSTATUS_E_INTEGRITYVIOLATION'
,'DBROWSTATUS_E_INVALID'
,'DBROWSTATUS_E_MAXPENDCHANGESEXCEEDED'
,'DBROWSTATUS_E_OBJECTOPEN'
,'DBROWSTATUS_E_OUTOFMEMORY'
,'DBROWSTATUS_E_PERMISSIONDENIED'
,'DBROWSTATUS_E_LIMITREACHED'
,'DBROWSTATUS_E_SCHEMAVIOLATION'
,'DBROWSTATUS_E_FAIL'
,'DBROWSTATUS_S_NOCHANGE'
,'DBCOLUMNFLAGS_ISBOOKMARK'
,'DBCOLUMNFLAGS_MAYDEFER'
,'DBCOLUMNFLAGS_WRITE'
,'DBCOLUMNFLAGS_WRITEUNKNOWN'
,'DBCOLUMNFLAGS_ISFIXEDLENGTH'
,'DBCOLUMNFLAGS_ISNULLABLE'
,'DBCOLUMNFLAGS_MAYBENULL'
,'DBCOLUMNFLAGS_ISLONG'
,'DBCOLUMNFLAGS_ISROWID'
,'DBCOLUMNFLAGS_ISROWVER'
,'DBCOLUMNFLAGS_CACHEDEFERRED'
,'DBCOLUMNFLAGS_SCALEISNEGATIVE'
,'DBCOLUMNFLAGS_KEYCOLUMN'
,'DBCOLUMNFLAGS_ISCHAPTER'
,'DBBMK_INVALID'
,'DBBMK_FIRST'
,'DBBMK_LAST'
,'DBPROP_ABORTPRESERVE'
,'DBPROP_ACTIVESESSIONS'
,'DBPROP_APPENDONLY'
,'DBPROP_ASYNCTXNABORT'
,'DBPROP_ASYNCTXNCOMMIT'
,'DBPROP_AUTH_CACHE_AUTHINFO'
,'DBPROP_AUTH_ENCRYPT_PASSWORD'
,'DBPROP_AUTH_INTEGRATED'
,'DBPROP_AUTH_MASK_PASSWORD'
,'DBPROP_AUTH_PASSWORD'
,'DBPROP_AUTH_PERSIST_ENCRYPTED'
,'DBPROP_AUTH_PERSIST_SENSITIVE_AUTHINFO'
,'DBPROP_AUTH_USERID'
,'DBPROP_BLOCKINGSTORAGEOBJECTS'
,'DBPROP_BOOKMARKS'
,'DBPROP_BOOKMARKSKIPPED'
,'DBPROP_BOOKMARKTYPE'
,'DBPROP_BYREFACCESSORS'
,'DBPROP_CACHEDEFERRED'
,'DBPROP_CANFETCHBACKWARDS'
,'DBPROP_CANHOLDROWS'
,'DBPROP_CANSCROLLBACKWARDS'
,'DBPROP_CATALOGLOCATION'
,'DBPROP_CATALOGTERM'
,'DBPROP_CATALOGUSAGE'
,'DBPROP_CHANGEINSERTEDROWS'
,'DBPROP_COL_AUTOINCREMENT'
,'DBPROP_COL_DEFAULT'
,'DBPROP_COL_DESCRIPTION'
,'DBPROP_COL_FIXEDLENGTH'
,'DBPROP_COL_NULLABLE'
,'DBPROP_COL_PRIMARYKEY'
,'DBPROP_COL_UNIQUE'
,'DBPROP_COLUMNDEFINITION'
,'DBPROP_COLUMNRESTRICT'
,'DBPROP_COMMANDTIMEOUT'
,'DBPROP_COMMITPRESERVE'
,'DBPROP_CONCATNULLBEHAVIOR'
,'DBPROP_CURRENTCATALOG'
,'DBPROP_DATASOURCENAME'
,'DBPROP_DATASOURCEREADONLY'
,'DBPROP_DBMSNAME'
,'DBPROP_DBMSVER'
,'DBPROP_DEFERRED'
,'DBPROP_DELAYSTORAGEOBJECTS'
,'DBPROP_DSOTHREADMODEL'
,'DBPROP_GROUPBY'
,'DBPROP_HETEROGENEOUSTABLES'
,'DBPROP_IAccessor'
,'DBPROP_IColumnsInfo'
,'DBPROP_IColumnsRowset'
,'DBPROP_IConnectionPointContainer'
,'DBPROP_IConvertType'
,'DBPROP_IRowset'
,'DBPROP_IRowsetChange'
,'DBPROP_IRowsetIdentity'
,'DBPROP_IRowsetIndex'
,'DBPROP_IRowsetInfo'
,'DBPROP_IRowsetLocate'
,'DBPROP_IRowsetResynch'
,'DBPROP_IRowsetScroll'
,'DBPROP_IRowsetUpdate'
,'DBPROP_ISupportErrorInfo'
,'DBPROP_ILockBytes'
,'DBPROP_ISequentialStream'
,'DBPROP_IStorage'
,'DBPROP_IStream'
,'DBPROP_IDENTIFIERCASE'
,'DBPROP_IMMOBILEROWS'
,'DBPROP_INDEX_AUTOUPDATE'
,'DBPROP_INDEX_CLUSTERED'
,'DBPROP_INDEX_FILLFACTOR'
,'DBPROP_INDEX_INITIALSIZE'
,'DBPROP_INDEX_NULLCOLLATION'
,'DBPROP_INDEX_NULLS'
,'DBPROP_INDEX_PRIMARYKEY'
,'DBPROP_INDEX_SORTBOOKMARKS'
,'DBPROP_INDEX_TEMPINDEX'
,'DBPROP_INDEX_TYPE'
,'DBPROP_INDEX_UNIQUE'
,'DBPROP_INIT_DATASOURCE'
,'DBPROP_INIT_HWND'
,'DBPROP_INIT_IMPERSONATION_LEVEL'
,'DBPROP_INIT_LCID'
,'DBPROP_INIT_LOCATION'
,'DBPROP_INIT_MODE'
,'DBPROP_INIT_PROMPT'
,'DBPROP_INIT_PROTECTION_LEVEL'
,'DBPROP_INIT_PROVIDERSTRING'
,'DBPROP_INIT_TIMEOUT'
,'DBPROP_LITERALBOOKMARKS'
,'DBPROP_LITERALIDENTITY'
,'DBPROP_MARSHALLABLE'
,'DBPROP_MAXINDEXSIZE'
,'DBPROP_MAXOPENROWS'
,'DBPROP_MAXPENDINGROWS'
,'DBPROP_MAXROWS'
,'DBPROP_MAXROWSIZE'
,'DBPROP_MAXROWSIZEINCLUDESBLOB'
,'DBPROP_MAXTABLESINSELECT'
,'DBPROP_MAYWRITECOLUMN'
,'DBPROP_MEMORYUSAGE'
,'DBPROP_MULTIPLEPARAMSETS'
,'DBPROP_MULTIPLERESULTS'
,'DBPROP_MULTIPLESTORAGEOBJECTS'
,'DBPROP_MULTITABLEUPDATE'
,'DBPROP_NOTIFICATIONGRANULARITY'
,'DBPROP_NOTIFICATIONPHASES'
,'DBPROP_NOTIFYCOLUMNSET'
,'DBPROP_NOTIFYROWDELETE'
,'DBPROP_NOTIFYROWFIRSTCHANGE'
,'DBPROP_NOTIFYROWINSERT'
,'DBPROP_NOTIFYROWRESYNCH'
,'DBPROP_NOTIFYROWSETCHANGED'
,'DBPROP_NOTIFYROWSETRELEASE'
,'DBPROP_NOTIFYROWSETFETCHPOSITIONCHANGE'
,'DBPROP_NOTIFYROWUNDOCHANGE'
,'DBPROP_NOTIFYROWUNDODELETE'
,'DBPROP_NOTIFYROWUNDOINSERT'
,'DBPROP_NOTIFYROWUPDATE'
,'DBPROP_NULLCOLLATION'
,'DBPROP_OLEOBJECTS'
,'DBPROP_ORDERBYCOLUMNSINSELECT'
,'DBPROP_ORDEREDBOOKMARKS'
,'DBPROP_OTHERINSERT'
,'DBPROP_OTHERUPDATEDELETE'
,'DBPROP_OUTPUTPARAMETERAVAILABILITY'
,'DBPROP_OWNINSERT'
,'DBPROP_OWNUPDATEDELETE'
,'DBPROP_PERSISTENTIDTYPE'
,'DBPROP_PREPAREABORTBEHAVIOR'
,'DBPROP_PREPARECOMMITBEHAVIOR'
,'DBPROP_PROCEDURETERM'
,'DBPROP_PROVIDERNAME'
,'DBPROP_PROVIDERFILENAME'
,'DBPROP_PROVIDEROLEDBVER'
,'DBPROP_PROVIDERVER'
,'DBPROP_QUICKRESTART'
,'DBPROP_QUOTEDIDENTIFIERCASE'
,'DBPROP_REENTRANTEVENTS'
,'DBPROP_REMOVEDELETED'
,'DBPROP_REPORTMULTIPLECHANGES'
,'DBPROP_RETURNPENDINGINSERTS'
,'DBPROP_ROWRESTRICT'
,'DBPROP_ROWSETCONVERSIONSONCOMMAND'
,'DBPROP_ROWTHREADMODEL'
,'DBPROP_SCHEMATERM'
,'DBPROP_SCHEMAUSAGE'
,'DBPROP_SERVERCURSOR'
,'DBPROP_SESS_AUTOCOMMITISOLEVELS'
,'DBPROP_SQLSUPPORT'
,'DBPROP_STRONGIDENTITY'
,'DBPROP_STRUCTUREDSTORAGE'
,'DBPROP_SUBQUERIES'
,'DBPROP_SUPPORTEDTXNDDL'
,'DBPROP_SUPPORTEDTXNISOLEVELS'
,'DBPROP_SUPPORTEDTXNISORETAIN'
,'DBPROP_TABLETERM'
,'DBPROP_TBL_TEMPTABLE'
,'DBPROP_TRANSACTEDOBJECT'
,'DBPROP_UPDATABILITY'
,'DBPROP_USERNAME'
,'DBPROP_FILTEROPS'
,'DBPROP_FILTERCOMPAREOPS'
,'DBPROP_FINDCOMPAREOPS'
,'DBPROP_IChapteredRowset'
,'DBPROP_IDBAsynchStatus'
,'DBPROP_IRowsetFind'
,'DBPROP_IRowsetView'
,'DBPROP_IViewChapter'
,'DBPROP_IViewFilter'
,'DBPROP_IViewRowset'
,'DBPROP_IViewSort'
,'DBPROP_INIT_ASYNCH'
,'DBPROP_MAXOPENCHAPTERS'
,'DBPROP_MAXORSINFILTER'
,'DBPROP_MAXSORTCOLUMNS'
,'DBPROP_ROWSET_ASYNCH'
,'DBPROP_SORTONINDEX'
,'DBPROP_IMultipleResults'
,'DBPROP_DATASOURCE_TYPE'
,'MDPROP_AXES'
,'MDPROP_FLATTENING_SUPPORT'
,'MDPROP_MDX_JOINCUBES'
,'MDPROP_NAMED_LEVELS'
,'MDPROP_RANGEROWSET'
,'MDPROP_MDX_SLICER'
,'MDPROP_MDX_CUBEQUALIFICATION'
,'MDPROP_MDX_OUTERREFERENCE'
,'MDPROP_MDX_QUERYBYPROPERTY'
,'MDPROP_MDX_CASESUPPORT'
,'MDPROP_MDX_STRING_COMPOP'
,'MDPROP_MDX_DESCFLAGS'
,'MDPROP_MDX_SET_FUNCTIONS'
,'MDPROP_MDX_MEMBER_FUNCTIONS'
,'MDPROP_MDX_NUMERIC_FUNCTIONS'
,'MDPROP_MDX_FORMULAS'
,'MDPROP_MDX_AGGREGATECELL_UPDATE'
,'DBPROP_ACCESSORDER'
,'DBPROP_BOOKMARKINFO'
,'DBPROP_INIT_CATALOG'
,'DBPROP_ROW_BULKOPS'
,'DBPROP_PROVIDERFRIENDLYNAME'
,'DBPROP_LOCKMODE'
,'DBPROP_MULTIPLECONNECTIONS'
,'DBPROP_UNIQUEROWS'
,'DBPROP_SERVERDATAONINSERT'
,'DBPROP_STORAGEFLAGS'
,'DBPROP_CONNECTIONSTATUS'
,'DBPROP_ALTERCOLUMN'
,'DBPROP_COLUMNLCID'
,'DBPROP_RESETDATASOURCE'
,'DBPROP_INIT_OLEDBSERVICES'
,'DBPROP_IRowsetRefresh'
,'DBPROP_SERVERNAME'
,'DBPROP_IParentRowset'
,'DBPROP_HIDDENCOLUMNS'
,'DBPROP_PROVIDERMEMORY'
);
var __RegisteredConstsList1 : TList;
procedure __RegisterConsts1;
begin
__RegisteredConstsList1 := TList.Create;
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[0] ,MDMEASURE_AGGR_CALCULATED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[1] ,MDPROP_MEMBER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[2] ,MDPROP_CELL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[3] ,MDMEMBER_TYPE_UNKNOWN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[4] ,MDMEMBER_TYPE_REGULAR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[5] ,MDMEMBER_TYPE_ALL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[6] ,MDMEMBER_TYPE_MEASURE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[7] ,MDMEMBER_TYPE_FORMULA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[8] ,MDMEMBER_TYPE_RESERVE1));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[9] ,MDMEMBER_TYPE_RESERVE2));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[10] ,MDMEMBER_TYPE_RESERVE3));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[11] ,MDMEMBER_TYPE_RESERVE4));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[12] ,MDDISPINFO_DRILLED_DOWN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[13] ,MDDISPINFO_PARENT_SAME_AS_PREV));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[14] ,DB_COUNTUNAVAILABLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[15] ,MDFF_BOLD));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[16] ,MDFF_ITALIC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[17] ,MDFF_UNDERLINE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[18] ,MDFF_STRIKEOUT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[19] ,MDAXIS_COLUMNS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[20] ,MDAXIS_ROWS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[21] ,MDAXIS_PAGES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[22] ,MDAXIS_SECTIONS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[23] ,MDAXIS_CHAPTERS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[24] ,MDAXIS_SLICERS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[25] ,GENERATE_METHOD_EXACT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[26] ,GENERATE_METHOD_PREFIX));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[27] ,GENERATE_METHOD_INFLECT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[28] ,PROPID_QUERY_RANKVECTOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[29] ,PROPID_QUERY_RANK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[30] ,PROPID_QUERY_HITCOUNT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[31] ,PROPID_QUERY_ALL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[32] ,PROPID_STG_CONTENTS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[33] ,VECTOR_RANK_MIN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[34] ,VECTOR_RANK_MAX));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[35] ,VECTOR_RANK_INNER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[36] ,VECTOR_RANK_DICE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[37] ,VECTOR_RANK_JACCARD));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[38] ,DBSETFUNC_NONE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[39] ,DBSETFUNC_ALL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[40] ,DBSETFUNC_DISTINCT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[41] ,PROXIMITY_UNIT_WORD));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[42] ,PROXIMITY_UNIT_SENTENCE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[43] ,PROXIMITY_UNIT_PARAGRAPH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[44] ,PROXIMITY_UNIT_CHAPTER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[45] ,CRESTRICTIONS_DBSCHEMA_ASSERTIONS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[46] ,CRESTRICTIONS_DBSCHEMA_CATALOGS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[47] ,CRESTRICTIONS_DBSCHEMA_CHARACTER_SETS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[48] ,CRESTRICTIONS_DBSCHEMA_COLLATIONS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[49] ,CRESTRICTIONS_DBSCHEMA_COLUMNS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[50] ,CRESTRICTIONS_DBSCHEMA_CHECK_CONSTRAINTS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[51] ,CRESTRICTIONS_DBSCHEMA_CONSTRAINT_COLUMN_USAGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[52] ,CRESTRICTIONS_DBSCHEMA_CONSTRAINT_TABLE_USAGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[53] ,CRESTRICTIONS_DBSCHEMA_KEY_COLUMN_USAGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[54] ,CRESTRICTIONS_DBSCHEMA_REFERENTIAL_CONSTRAINTS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[55] ,CRESTRICTIONS_DBSCHEMA_TABLE_CONSTRAINTS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[56] ,CRESTRICTIONS_DBSCHEMA_COLUMN_DOMAIN_USAGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[57] ,CRESTRICTIONS_DBSCHEMA_INDEXES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[58] ,CRESTRICTIONS_DBSCHEMA_OBJECT_ACTIONS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[59] ,CRESTRICTIONS_DBSCHEMA_OBJECTS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[60] ,CRESTRICTIONS_DBSCHEMA_COLUMN_PRIVILEGES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[61] ,CRESTRICTIONS_DBSCHEMA_TABLE_PRIVILEGES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[62] ,CRESTRICTIONS_DBSCHEMA_USAGE_PRIVILEGES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[63] ,CRESTRICTIONS_DBSCHEMA_PROCEDURES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[64] ,CRESTRICTIONS_DBSCHEMA_SCHEMATA));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[65] ,CRESTRICTIONS_DBSCHEMA_SQL_LANGUAGES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[66] ,CRESTRICTIONS_DBSCHEMA_STATISTICS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[67] ,CRESTRICTIONS_DBSCHEMA_TABLES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[68] ,CRESTRICTIONS_DBSCHEMA_TRANSLATIONS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[69] ,CRESTRICTIONS_DBSCHEMA_PROVIDER_TYPES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[70] ,CRESTRICTIONS_DBSCHEMA_VIEWS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[71] ,CRESTRICTIONS_DBSCHEMA_VIEW_COLUMN_USAGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[72] ,CRESTRICTIONS_DBSCHEMA_VIEW_TABLE_USAGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[73] ,CRESTRICTIONS_DBSCHEMA_PROCEDURE_PARAMETERS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[74] ,CRESTRICTIONS_DBSCHEMA_FOREIGN_KEYS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[75] ,CRESTRICTIONS_DBSCHEMA_PRIMARY_KEYS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[76] ,CRESTRICTIONS_DBSCHEMA_PROCEDURE_COLUMNS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[77] ,CRESTRICTIONS_DBSCHEMA_TABLES_INFO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[78] ,CRESTRICTIONS_MDSCHEMA_CUBES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[79] ,CRESTRICTIONS_MDSCHEMA_DIMENSIONS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[80] ,CRESTRICTIONS_MDSCHEMA_HIERARCHIES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[81] ,CRESTRICTIONS_MDSCHEMA_LEVELS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[82] ,CRESTRICTIONS_MDSCHEMA_MEASURES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[83] ,CRESTRICTIONS_MDSCHEMA_PROPERTIES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[84] ,CRESTRICTIONS_MDSCHEMA_MEMBERS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[85] ,MAX_TRAN_DESC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[86] ,ISOLATIONLEVEL_UNSPECIFIED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[87] ,ISOLATIONLEVEL_CHAOS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[88] ,ISOLATIONLEVEL_READUNCOMMITTED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[89] ,ISOLATIONLEVEL_BROWSE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[90] ,ISOLATIONLEVEL_CURSORSTABILITY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[91] ,ISOLATIONLEVEL_READCOMMITTED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[92] ,ISOLATIONLEVEL_REPEATABLEREAD));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[93] ,ISOLATIONLEVEL_SERIALIZABLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[94] ,ISOLATIONLEVEL_ISOLATED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[95] ,ISOFLAG_RETAIN_COMMIT_DC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[96] ,ISOFLAG_RETAIN_COMMIT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[97] ,ISOFLAG_RETAIN_COMMIT_NO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[98] ,ISOFLAG_RETAIN_ABORT_DC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[99] ,ISOFLAG_RETAIN_ABORT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[100] ,ISOFLAG_RETAIN_ABORT_NO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[101] ,ISOFLAG_RETAIN_DONTCARE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[102] ,ISOFLAG_RETAIN_BOTH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[103] ,ISOFLAG_RETAIN_NONE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[104] ,ISOFLAG_OPTIMISTIC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[105] ,ISOFLAG_READONLY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[106] ,XACTTC_SYNC_PHASEONE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[107] ,XACTTC_SYNC_PHASETWO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[108] ,XACTTC_SYNC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[109] ,XACTTC_ASYNC_PHASEONE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[110] ,XACTTC_ASYNC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[111] ,XACTRM_OPTIMISTICLASTWINS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[112] ,XACTRM_NOREADONLYPREPARES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[113] ,XACTCONST_TIMEOUTINFINITE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[114] ,XACTHEURISTIC_ABORT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[115] ,XACTHEURISTIC_COMMIT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[116] ,XACTHEURISTIC_DAMAGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[117] ,XACTHEURISTIC_DANGER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[118] ,XACTSTAT_NONE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[119] ,XACTSTAT_OPENNORMAL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[120] ,XACTSTAT_OPENREFUSED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[121] ,XACTSTAT_PREPARING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[122] ,XACTSTAT_PREPARED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[123] ,XACTSTAT_PREPARERETAINING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[124] ,XACTSTAT_PREPARERETAINED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[125] ,XACTSTAT_COMMITTING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[126] ,XACTSTAT_COMMITRETAINING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[127] ,XACTSTAT_ABORTING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[128] ,XACTSTAT_ABORTED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[129] ,XACTSTAT_COMMITTED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[130] ,XACTSTAT_HEURISTIC_ABORT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[131] ,XACTSTAT_HEURISTIC_COMMIT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[132] ,XACTSTAT_HEURISTIC_DAMAGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[133] ,XACTSTAT_HEURISTIC_DANGER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[134] ,XACTSTAT_FORCED_ABORT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[135] ,XACTSTAT_FORCED_COMMIT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[136] ,XACTSTAT_INDOUBT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[137] ,XACTSTAT_CLOSED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[138] ,XACTSTAT_OPEN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[139] ,XACTSTAT_NOTPREPARED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[140] ,XACTSTAT_ALL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[141] ,XACT_E_FIRST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[142] ,XACT_E_LAST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[143] ,XACT_S_FIRST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[144] ,XACT_S_LAST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[145] ,XACT_E_ALREADYOTHERSINGLEPHASE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[146] ,XACT_E_CANTRETAIN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[147] ,XACT_E_COMMITFAILED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[148] ,XACT_E_COMMITPREVENTED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[149] ,XACT_E_HEURISTICABORT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[150] ,XACT_E_HEURISTICCOMMIT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[151] ,XACT_E_HEURISTICDAMAGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[152] ,XACT_E_HEURISTICDANGER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[153] ,XACT_E_ISOLATIONLEVEL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[154] ,XACT_E_NOASYNC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[155] ,XACT_E_NOENLIST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[156] ,XACT_E_NOISORETAIN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[157] ,XACT_E_NORESOURCE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[158] ,XACT_E_NOTCURRENT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[159] ,XACT_E_NOTRANSACTION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[160] ,XACT_E_NOTSUPPORTED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[161] ,XACT_E_UNKNOWNRMGRID));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[162] ,XACT_E_WRONGSTATE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[163] ,XACT_E_WRONGUOW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[164] ,XACT_E_XTIONEXISTS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[165] ,XACT_E_NOIMPORTOBJECT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[166] ,XACT_E_INVALIDCOOKIE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[167] ,XACT_E_INDOUBT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[168] ,XACT_E_NOTIMEOUT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[169] ,XACT_E_ALREADYINPROGRESS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[170] ,XACT_E_ABORTED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[171] ,XACT_E_LOGFULL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[172] ,XACT_E_TMNOTAVAILABLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[173] ,XACT_E_CONNECTION_DOWN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[174] ,XACT_E_CONNECTION_DENIED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[175] ,XACT_E_REENLISTTIMEOUT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[176] ,XACT_S_ASYNC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[177] ,XACT_S_DEFECT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[178] ,XACT_S_READONLY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[179] ,XACT_S_SOMENORETAIN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[180] ,XACT_S_OKINFORM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[181] ,XACT_S_MADECHANGESCONTENT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[182] ,XACT_S_MADECHANGESINFORM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[183] ,XACT_S_ALLNORETAIN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[184] ,XACT_S_ABORTING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[185] ,XACT_S_SINGLEPHASE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[186] ,DBKIND_GUID_NAME));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[187] ,DBKIND_GUID_PROPID));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[188] ,DBKIND_NAME));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[189] ,DBKIND_PGUID_NAME));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[190] ,DBKIND_PGUID_PROPID));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[191] ,DBKIND_PROPID));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[192] ,DBKIND_GUID));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[193] ,DBTYPE_EMPTY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[194] ,DBTYPE_NULL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[195] ,DBTYPE_I2));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[196] ,DBTYPE_I4));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[197] ,DBTYPE_R4));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[198] ,DBTYPE_R8));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[199] ,DBTYPE_CY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[200] ,DBTYPE_DATE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[201] ,DBTYPE_BSTR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[202] ,DBTYPE_IDISPATCH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[203] ,DBTYPE_ERROR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[204] ,DBTYPE_BOOL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[205] ,DBTYPE_VARIANT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[206] ,DBTYPE_IUNKNOWN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[207] ,DBTYPE_DECIMAL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[208] ,DBTYPE_UI1));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[209] ,DBTYPE_ARRAY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[210] ,DBTYPE_BYREF));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[211] ,DBTYPE_I1));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[212] ,DBTYPE_UI2));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[213] ,DBTYPE_UI4));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[214] ,DBTYPE_I8));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[215] ,DBTYPE_UI8));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[216] ,DBTYPE_GUID));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[217] ,DBTYPE_VECTOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[218] ,DBTYPE_RESERVED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[219] ,DBTYPE_BYTES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[220] ,DBTYPE_STR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[221] ,DBTYPE_WSTR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[222] ,DBTYPE_NUMERIC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[223] ,DBTYPE_UDT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[224] ,DBTYPE_DBDATE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[225] ,DBTYPE_DBTIME));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[226] ,DBTYPE_DBTIMESTAMP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[227] ,DBTYPE_HCHAPTER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[228] ,DBTYPE_FILETIME));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[229] ,DBTYPE_DBFILETIME));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[230] ,DBTYPE_PROPVARIANT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[231] ,DBTYPE_VARNUMERIC));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[232] ,DBPART_INVALID));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[233] ,DBPART_VALUE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[234] ,DBPART_LENGTH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[235] ,DBPART_STATUS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[236] ,DBPARAMIO_NOTPARAM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[237] ,DBPARAMIO_INPUT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[238] ,DBPARAMIO_OUTPUT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[239] ,DBBINDFLAG_HTML));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[240] ,DBMEMOWNER_CLIENTOWNED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[241] ,DBMEMOWNER_PROVIDEROWNED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[242] ,DBSTATUS_S_OK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[243] ,DBSTATUS_E_BADACCESSOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[244] ,DBSTATUS_E_CANTCONVERTVALUE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[245] ,DBSTATUS_S_ISNULL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[246] ,DBSTATUS_S_TRUNCATED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[247] ,DBSTATUS_E_SIGNMISMATCH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[248] ,DBSTATUS_E_DATAOVERFLOW));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[249] ,DBSTATUS_E_CANTCREATE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[250] ,DBSTATUS_E_UNAVAILABLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[251] ,DBSTATUS_E_PERMISSIONDENIED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[252] ,DBSTATUS_E_INTEGRITYVIOLATION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[253] ,DBSTATUS_E_SCHEMAVIOLATION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[254] ,DBSTATUS_E_BADSTATUS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[255] ,DBSTATUS_S_DEFAULT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[256] ,MDSTATUS_S_CELLEMPTY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[257] ,DBSTATUS_S_IGNORE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[258] ,DBROWSTATUS_S_OK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[259] ,DBROWSTATUS_S_MULTIPLECHANGES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[260] ,DBROWSTATUS_S_PENDINGCHANGES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[261] ,DBROWSTATUS_E_CANCELED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[262] ,DBROWSTATUS_E_CANTRELEASE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[263] ,DBROWSTATUS_E_CONCURRENCYVIOLATION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[264] ,DBROWSTATUS_E_DELETED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[265] ,DBROWSTATUS_E_PENDINGINSERT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[266] ,DBROWSTATUS_E_NEWLYINSERTED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[267] ,DBROWSTATUS_E_INTEGRITYVIOLATION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[268] ,DBROWSTATUS_E_INVALID));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[269] ,DBROWSTATUS_E_MAXPENDCHANGESEXCEEDED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[270] ,DBROWSTATUS_E_OBJECTOPEN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[271] ,DBROWSTATUS_E_OUTOFMEMORY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[272] ,DBROWSTATUS_E_PERMISSIONDENIED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[273] ,DBROWSTATUS_E_LIMITREACHED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[274] ,DBROWSTATUS_E_SCHEMAVIOLATION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[275] ,DBROWSTATUS_E_FAIL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[276] ,DBROWSTATUS_S_NOCHANGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[277] ,DBCOLUMNFLAGS_ISBOOKMARK));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[278] ,DBCOLUMNFLAGS_MAYDEFER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[279] ,DBCOLUMNFLAGS_WRITE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[280] ,DBCOLUMNFLAGS_WRITEUNKNOWN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[281] ,DBCOLUMNFLAGS_ISFIXEDLENGTH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[282] ,DBCOLUMNFLAGS_ISNULLABLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[283] ,DBCOLUMNFLAGS_MAYBENULL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[284] ,DBCOLUMNFLAGS_ISLONG));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[285] ,DBCOLUMNFLAGS_ISROWID));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[286] ,DBCOLUMNFLAGS_ISROWVER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[287] ,DBCOLUMNFLAGS_CACHEDEFERRED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[288] ,DBCOLUMNFLAGS_SCALEISNEGATIVE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[289] ,DBCOLUMNFLAGS_KEYCOLUMN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[290] ,DBCOLUMNFLAGS_ISCHAPTER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[291] ,DBBMK_INVALID));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[292] ,DBBMK_FIRST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[293] ,DBBMK_LAST));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[294] ,DBPROP_ABORTPRESERVE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[295] ,DBPROP_ACTIVESESSIONS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[296] ,DBPROP_APPENDONLY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[297] ,DBPROP_ASYNCTXNABORT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[298] ,DBPROP_ASYNCTXNCOMMIT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[299] ,DBPROP_AUTH_CACHE_AUTHINFO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[300] ,DBPROP_AUTH_ENCRYPT_PASSWORD));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[301] ,DBPROP_AUTH_INTEGRATED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[302] ,DBPROP_AUTH_MASK_PASSWORD));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[303] ,DBPROP_AUTH_PASSWORD));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[304] ,DBPROP_AUTH_PERSIST_ENCRYPTED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[305] ,DBPROP_AUTH_PERSIST_SENSITIVE_AUTHINFO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[306] ,DBPROP_AUTH_USERID));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[307] ,DBPROP_BLOCKINGSTORAGEOBJECTS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[308] ,DBPROP_BOOKMARKS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[309] ,DBPROP_BOOKMARKSKIPPED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[310] ,DBPROP_BOOKMARKTYPE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[311] ,DBPROP_BYREFACCESSORS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[312] ,DBPROP_CACHEDEFERRED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[313] ,DBPROP_CANFETCHBACKWARDS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[314] ,DBPROP_CANHOLDROWS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[315] ,DBPROP_CANSCROLLBACKWARDS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[316] ,DBPROP_CATALOGLOCATION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[317] ,DBPROP_CATALOGTERM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[318] ,DBPROP_CATALOGUSAGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[319] ,DBPROP_CHANGEINSERTEDROWS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[320] ,DBPROP_COL_AUTOINCREMENT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[321] ,DBPROP_COL_DEFAULT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[322] ,DBPROP_COL_DESCRIPTION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[323] ,DBPROP_COL_FIXEDLENGTH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[324] ,DBPROP_COL_NULLABLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[325] ,DBPROP_COL_PRIMARYKEY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[326] ,DBPROP_COL_UNIQUE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[327] ,DBPROP_COLUMNDEFINITION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[328] ,DBPROP_COLUMNRESTRICT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[329] ,DBPROP_COMMANDTIMEOUT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[330] ,DBPROP_COMMITPRESERVE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[331] ,DBPROP_CONCATNULLBEHAVIOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[332] ,DBPROP_CURRENTCATALOG));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[333] ,DBPROP_DATASOURCENAME));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[334] ,DBPROP_DATASOURCEREADONLY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[335] ,DBPROP_DBMSNAME));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[336] ,DBPROP_DBMSVER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[337] ,DBPROP_DEFERRED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[338] ,DBPROP_DELAYSTORAGEOBJECTS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[339] ,DBPROP_DSOTHREADMODEL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[340] ,DBPROP_GROUPBY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[341] ,DBPROP_HETEROGENEOUSTABLES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[342] ,DBPROP_IAccessor));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[343] ,DBPROP_IColumnsInfo));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[344] ,DBPROP_IColumnsRowset));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[345] ,DBPROP_IConnectionPointContainer));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[346] ,DBPROP_IConvertType));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[347] ,DBPROP_IRowset));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[348] ,DBPROP_IRowsetChange));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[349] ,DBPROP_IRowsetIdentity));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[350] ,DBPROP_IRowsetIndex));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[351] ,DBPROP_IRowsetInfo));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[352] ,DBPROP_IRowsetLocate));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[353] ,DBPROP_IRowsetResynch));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[354] ,DBPROP_IRowsetScroll));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[355] ,DBPROP_IRowsetUpdate));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[356] ,DBPROP_ISupportErrorInfo));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[357] ,DBPROP_ILockBytes));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[358] ,DBPROP_ISequentialStream));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[359] ,DBPROP_IStorage));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[360] ,DBPROP_IStream));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[361] ,DBPROP_IDENTIFIERCASE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[362] ,DBPROP_IMMOBILEROWS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[363] ,DBPROP_INDEX_AUTOUPDATE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[364] ,DBPROP_INDEX_CLUSTERED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[365] ,DBPROP_INDEX_FILLFACTOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[366] ,DBPROP_INDEX_INITIALSIZE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[367] ,DBPROP_INDEX_NULLCOLLATION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[368] ,DBPROP_INDEX_NULLS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[369] ,DBPROP_INDEX_PRIMARYKEY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[370] ,DBPROP_INDEX_SORTBOOKMARKS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[371] ,DBPROP_INDEX_TEMPINDEX));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[372] ,DBPROP_INDEX_TYPE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[373] ,DBPROP_INDEX_UNIQUE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[374] ,DBPROP_INIT_DATASOURCE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[375] ,DBPROP_INIT_HWND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[376] ,DBPROP_INIT_IMPERSONATION_LEVEL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[377] ,DBPROP_INIT_LCID));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[378] ,DBPROP_INIT_LOCATION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[379] ,DBPROP_INIT_MODE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[380] ,DBPROP_INIT_PROMPT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[381] ,DBPROP_INIT_PROTECTION_LEVEL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[382] ,DBPROP_INIT_PROVIDERSTRING));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[383] ,DBPROP_INIT_TIMEOUT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[384] ,DBPROP_LITERALBOOKMARKS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[385] ,DBPROP_LITERALIDENTITY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[386] ,DBPROP_MARSHALLABLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[387] ,DBPROP_MAXINDEXSIZE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[388] ,DBPROP_MAXOPENROWS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[389] ,DBPROP_MAXPENDINGROWS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[390] ,DBPROP_MAXROWS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[391] ,DBPROP_MAXROWSIZE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[392] ,DBPROP_MAXROWSIZEINCLUDESBLOB));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[393] ,DBPROP_MAXTABLESINSELECT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[394] ,DBPROP_MAYWRITECOLUMN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[395] ,DBPROP_MEMORYUSAGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[396] ,DBPROP_MULTIPLEPARAMSETS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[397] ,DBPROP_MULTIPLERESULTS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[398] ,DBPROP_MULTIPLESTORAGEOBJECTS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[399] ,DBPROP_MULTITABLEUPDATE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[400] ,DBPROP_NOTIFICATIONGRANULARITY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[401] ,DBPROP_NOTIFICATIONPHASES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[402] ,DBPROP_NOTIFYCOLUMNSET));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[403] ,DBPROP_NOTIFYROWDELETE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[404] ,DBPROP_NOTIFYROWFIRSTCHANGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[405] ,DBPROP_NOTIFYROWINSERT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[406] ,DBPROP_NOTIFYROWRESYNCH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[407] ,DBPROP_NOTIFYROWSETCHANGED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[408] ,DBPROP_NOTIFYROWSETRELEASE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[409] ,DBPROP_NOTIFYROWSETFETCHPOSITIONCHANGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[410] ,DBPROP_NOTIFYROWUNDOCHANGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[411] ,DBPROP_NOTIFYROWUNDODELETE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[412] ,DBPROP_NOTIFYROWUNDOINSERT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[413] ,DBPROP_NOTIFYROWUPDATE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[414] ,DBPROP_NULLCOLLATION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[415] ,DBPROP_OLEOBJECTS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[416] ,DBPROP_ORDERBYCOLUMNSINSELECT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[417] ,DBPROP_ORDEREDBOOKMARKS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[418] ,DBPROP_OTHERINSERT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[419] ,DBPROP_OTHERUPDATEDELETE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[420] ,DBPROP_OUTPUTPARAMETERAVAILABILITY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[421] ,DBPROP_OWNINSERT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[422] ,DBPROP_OWNUPDATEDELETE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[423] ,DBPROP_PERSISTENTIDTYPE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[424] ,DBPROP_PREPAREABORTBEHAVIOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[425] ,DBPROP_PREPARECOMMITBEHAVIOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[426] ,DBPROP_PROCEDURETERM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[427] ,DBPROP_PROVIDERNAME));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[428] ,DBPROP_PROVIDERFILENAME));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[429] ,DBPROP_PROVIDEROLEDBVER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[430] ,DBPROP_PROVIDERVER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[431] ,DBPROP_QUICKRESTART));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[432] ,DBPROP_QUOTEDIDENTIFIERCASE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[433] ,DBPROP_REENTRANTEVENTS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[434] ,DBPROP_REMOVEDELETED));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[435] ,DBPROP_REPORTMULTIPLECHANGES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[436] ,DBPROP_RETURNPENDINGINSERTS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[437] ,DBPROP_ROWRESTRICT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[438] ,DBPROP_ROWSETCONVERSIONSONCOMMAND));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[439] ,DBPROP_ROWTHREADMODEL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[440] ,DBPROP_SCHEMATERM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[441] ,DBPROP_SCHEMAUSAGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[442] ,DBPROP_SERVERCURSOR));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[443] ,DBPROP_SESS_AUTOCOMMITISOLEVELS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[444] ,DBPROP_SQLSUPPORT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[445] ,DBPROP_STRONGIDENTITY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[446] ,DBPROP_STRUCTUREDSTORAGE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[447] ,DBPROP_SUBQUERIES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[448] ,DBPROP_SUPPORTEDTXNDDL));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[449] ,DBPROP_SUPPORTEDTXNISOLEVELS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[450] ,DBPROP_SUPPORTEDTXNISORETAIN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[451] ,DBPROP_TABLETERM));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[452] ,DBPROP_TBL_TEMPTABLE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[453] ,DBPROP_TRANSACTEDOBJECT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[454] ,DBPROP_UPDATABILITY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[455] ,DBPROP_USERNAME));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[456] ,DBPROP_FILTEROPS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[457] ,DBPROP_FILTERCOMPAREOPS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[458] ,DBPROP_FINDCOMPAREOPS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[459] ,DBPROP_IChapteredRowset));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[460] ,DBPROP_IDBAsynchStatus));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[461] ,DBPROP_IRowsetFind));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[462] ,DBPROP_IRowsetView));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[463] ,DBPROP_IViewChapter));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[464] ,DBPROP_IViewFilter));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[465] ,DBPROP_IViewRowset));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[466] ,DBPROP_IViewSort));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[467] ,DBPROP_INIT_ASYNCH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[468] ,DBPROP_MAXOPENCHAPTERS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[469] ,DBPROP_MAXORSINFILTER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[470] ,DBPROP_MAXSORTCOLUMNS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[471] ,DBPROP_ROWSET_ASYNCH));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[472] ,DBPROP_SORTONINDEX));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[473] ,DBPROP_IMultipleResults));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[474] ,DBPROP_DATASOURCE_TYPE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[475] ,MDPROP_AXES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[476] ,MDPROP_FLATTENING_SUPPORT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[477] ,MDPROP_MDX_JOINCUBES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[478] ,MDPROP_NAMED_LEVELS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[479] ,MDPROP_RANGEROWSET));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[480] ,MDPROP_MDX_SLICER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[481] ,MDPROP_MDX_CUBEQUALIFICATION));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[482] ,MDPROP_MDX_OUTERREFERENCE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[483] ,MDPROP_MDX_QUERYBYPROPERTY));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[484] ,MDPROP_MDX_CASESUPPORT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[485] ,MDPROP_MDX_STRING_COMPOP));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[486] ,MDPROP_MDX_DESCFLAGS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[487] ,MDPROP_MDX_SET_FUNCTIONS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[488] ,MDPROP_MDX_MEMBER_FUNCTIONS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[489] ,MDPROP_MDX_NUMERIC_FUNCTIONS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[490] ,MDPROP_MDX_FORMULAS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[491] ,MDPROP_MDX_AGGREGATECELL_UPDATE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[492] ,DBPROP_ACCESSORDER));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[493] ,DBPROP_BOOKMARKINFO));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[494] ,DBPROP_INIT_CATALOG));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[495] ,DBPROP_ROW_BULKOPS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[496] ,DBPROP_PROVIDERFRIENDLYNAME));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[497] ,DBPROP_LOCKMODE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[498] ,DBPROP_MULTIPLECONNECTIONS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[499] ,DBPROP_UNIQUEROWS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[500] ,DBPROP_SERVERDATAONINSERT));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[501] ,DBPROP_STORAGEFLAGS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[502] ,DBPROP_CONNECTIONSTATUS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[503] ,DBPROP_ALTERCOLUMN));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[504] ,DBPROP_COLUMNLCID));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[505] ,DBPROP_RESETDATASOURCE));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[506] ,DBPROP_INIT_OLEDBSERVICES));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[507] ,DBPROP_IRowsetRefresh));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[508] ,DBPROP_SERVERNAME));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[509] ,DBPROP_IParentRowset));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[510] ,DBPROP_HIDDENCOLUMNS));
__RegisteredConstsList1.Add(RegisterConst(__ConstNames1[511] ,DBPROP_PROVIDERMEMORY));
end;

procedure __UnregisterConsts1;
var i : integer;
begin
__RegisteredConstsList1.Free
end;

const __ConstNames2 : array[0..511] of string = (
'DBPROP_CLIENTCURSOR'
,'DBPROP_TRUSTEE_USERNAME'
,'DBPROP_TRUSTEE_AUTHENTICATION'
,'DBPROP_TRUSTEE_NEWAUTHENTICATION'
,'DBPROP_ICommandCost'
,'DBPROP_ICommandTree'
,'DBPROP_ICommandValidate'
,'DBPROP_IDBSchemaCommand'
,'DBPROP_IProvideMoniker'
,'DBPROP_IQuery'
,'DBPROP_IReadData'
,'DBPROP_IRowsetAsynch'
,'DBPROP_IRowsetKeys'
,'DBPROP_IRowsetNewRowAfter'
,'DBPROP_IRowsetNextRowset'
,'DBPROP_IRowsetWatchAll'
,'DBPROP_IRowsetWatchNotify'
,'DBPROP_IRowsetWatchRegion'
,'DBPROP_IRowsetWithParameters'
,'DBPROP_IRowsetExactScroll'
,'DBOP_scalar_constant'
,'DBOP_DEFAULT'
,'DBOP_NULL'
,'DBOP_bookmark_name'
,'DBOP_catalog_name'
,'DBOP_column_name'
,'DBOP_schema_name'
,'DBOP_outall_name'
,'DBOP_qualifier_name'
,'DBOP_qualified_column_name'
,'DBOP_table_name'
,'DBOP_nested_table_name'
,'DBOP_nested_column_name'
,'DBOP_row'
,'DBOP_table'
,'DBOP_sort'
,'DBOP_distinct'
,'DBOP_distinct_order_preserving'
,'DBOP_alias'
,'DBOP_cross_join'
,'DBOP_union_join'
,'DBOP_inner_join'
,'DBOP_left_semi_join'
,'DBOP_right_semi_join'
,'DBOP_left_anti_semi_join'
,'DBOP_right_anti_semi_join'
,'DBOP_left_outer_join'
,'DBOP_right_outer_join'
,'DBOP_full_outer_join'
,'DBOP_natural_join'
,'DBOP_natural_left_outer_join'
,'DBOP_natural_right_outer_join'
,'DBOP_natural_full_outer_join'
,'DBOP_set_intersection'
,'DBOP_set_union'
,'DBOP_set_left_difference'
,'DBOP_set_right_difference'
,'DBOP_set_anti_difference'
,'DBOP_bag_intersection'
,'DBOP_bag_union'
,'DBOP_bag_left_difference'
,'DBOP_bag_right_difference'
,'DBOP_bag_anti_difference'
,'DBOP_division'
,'DBOP_relative_sampling'
,'DBOP_absolute_sampling'
,'DBOP_transitive_closure'
,'DBOP_recursive_union'
,'DBOP_aggregate'
,'DBOP_remote_table'
,'DBOP_select'
,'DBOP_order_preserving_select'
,'DBOP_project'
,'DBOP_project_order_preserving'
,'DBOP_top'
,'DBOP_top_percent'
,'DBOP_top_plus_ties'
,'DBOP_top_percent_plus_ties'
,'DBOP_rank'
,'DBOP_rank_ties_equally'
,'DBOP_rank_ties_equally_and_skip'
,'DBOP_navigate'
,'DBOP_nesting'
,'DBOP_unnesting'
,'DBOP_nested_apply'
,'DBOP_cross_tab'
,'DBOP_is_NULL'
,'DBOP_is_NOT_NULL'
,'DBOP_equal'
,'DBOP_not_equal'
,'DBOP_less'
,'DBOP_less_equal'
,'DBOP_greater'
,'DBOP_greater_equal'
,'DBOP_equal_all'
,'DBOP_not_equal_all'
,'DBOP_less_all'
,'DBOP_less_equal_all'
,'DBOP_greater_all'
,'DBOP_greater_equal_all'
,'DBOP_equal_any'
,'DBOP_not_equal_any'
,'DBOP_less_any'
,'DBOP_less_equal_any'
,'DBOP_greater_any'
,'DBOP_greater_equal_any'
,'DBOP_anybits'
,'DBOP_allbits'
,'DBOP_anybits_any'
,'DBOP_allbits_any'
,'DBOP_anybits_all'
,'DBOP_allbits_all'
,'DBOP_between'
,'DBOP_between_unordered'
,'DBOP_match'
,'DBOP_match_unique'
,'DBOP_match_partial'
,'DBOP_match_partial_unique'
,'DBOP_match_full'
,'DBOP_match_full_unique'
,'DBOP_scalar_parameter'
,'DBOP_scalar_function'
,'DBOP_plus'
,'DBOP_minus'
,'DBOP_times'
,'DBOP_over'
,'DBOP_div'
,'DBOP_modulo'
,'DBOP_power'
,'DBOP_like'
,'DBOP_sounds_like'
,'DBOP_like_any'
,'DBOP_like_all'
,'DBOP_is_INVALID'
,'DBOP_is_TRUE'
,'DBOP_is_FALSE'
,'DBOP_and'
,'DBOP_or'
,'DBOP_xor'
,'DBOP_equivalent'
,'DBOP_not'
,'DBOP_implies'
,'DBOP_overlaps'
,'DBOP_case_condition'
,'DBOP_case_value'
,'DBOP_nullif'
,'DBOP_cast'
,'DBOP_coalesce'
,'DBOP_position'
,'DBOP_extract'
,'DBOP_char_length'
,'DBOP_octet_length'
,'DBOP_bit_length'
,'DBOP_substring'
,'DBOP_upper'
,'DBOP_lower'
,'DBOP_trim'
,'DBOP_translate'
,'DBOP_convert'
,'DBOP_string_concat'
,'DBOP_current_date'
,'DBOP_current_time'
,'DBOP_current_timestamp'
,'DBOP_content_select'
,'DBOP_content'
,'DBOP_content_freetext'
,'DBOP_content_proximity'
,'DBOP_content_vector_or'
,'DBOP_delete'
,'DBOP_update'
,'DBOP_insert'
,'DBOP_min'
,'DBOP_max'
,'DBOP_count'
,'DBOP_sum'
,'DBOP_avg'
,'DBOP_any_sample'
,'DBOP_stddev'
,'DBOP_stddev_pop'
,'DBOP_var'
,'DBOP_var_pop'
,'DBOP_first'
,'DBOP_last'
,'DBOP_in'
,'DBOP_exists'
,'DBOP_unique'
,'DBOP_subset'
,'DBOP_proper_subset'
,'DBOP_superset'
,'DBOP_proper_superset'
,'DBOP_disjoint'
,'DBOP_pass_through'
,'DBOP_defined_by_GUID'
,'DBOP_text_command'
,'DBOP_SQL_select'
,'DBOP_prior_command_tree'
,'DBOP_add_columns'
,'DBOP_column_list_anchor'
,'DBOP_column_list_element'
,'DBOP_command_list_anchor'
,'DBOP_command_list_element'
,'DBOP_from_list_anchor'
,'DBOP_from_list_element'
,'DBOP_project_list_anchor'
,'DBOP_project_list_element'
,'DBOP_row_list_anchor'
,'DBOP_row_list_element'
,'DBOP_scalar_list_anchor'
,'DBOP_scalar_list_element'
,'DBOP_set_list_anchor'
,'DBOP_set_list_element'
,'DBOP_sort_list_anchor'
,'DBOP_sort_list_element'
,'DBOP_alter_character_set'
,'DBOP_alter_collation'
,'DBOP_alter_domain'
,'DBOP_alter_index'
,'DBOP_alter_procedure'
,'DBOP_alter_schema'
,'DBOP_alter_table'
,'DBOP_alter_trigger'
,'DBOP_alter_view'
,'DBOP_coldef_list_anchor'
,'DBOP_coldef_list_element'
,'DBOP_create_assertion'
,'DBOP_create_character_set'
,'DBOP_create_collation'
,'DBOP_create_domain'
,'DBOP_create_index'
,'DBOP_create_procedure'
,'DBOP_create_schema'
,'DBOP_create_synonym'
,'DBOP_create_table'
,'DBOP_create_temporary_table'
,'DBOP_create_translation'
,'DBOP_create_trigger'
,'DBOP_create_view'
,'DBOP_drop_assertion'
,'DBOP_drop_character_set'
,'DBOP_drop_collation'
,'DBOP_drop_domain'
,'DBOP_drop_index'
,'DBOP_drop_procedure'
,'DBOP_drop_schema'
,'DBOP_drop_synonym'
,'DBOP_drop_table'
,'DBOP_drop_translation'
,'DBOP_drop_trigger'
,'DBOP_drop_view'
,'DBOP_foreign_key'
,'DBOP_grant_privileges'
,'DBOP_index_list_anchor'
,'DBOP_index_list_element'
,'DBOP_primary_key'
,'DBOP_property_list_anchor'
,'DBOP_property_list_element'
,'DBOP_referenced_table'
,'DBOP_rename_object'
,'DBOP_revoke_privileges'
,'DBOP_schema_authorization'
,'DBOP_unique_key'
,'DBPARAMFLAGS_ISINPUT'
,'DBPARAMFLAGS_ISOUTPUT'
,'DBPARAMFLAGS_ISSIGNED'
,'DBPARAMFLAGS_ISNULLABLE'
,'DBPARAMFLAGS_ISLONG'
,'DBPARAMFLAGS_SCALEISNEGATIVE'
,'DBPROPFLAGS_NOTSUPPORTED'
,'DBPROPFLAGS_COLUMN'
,'DBPROPFLAGS_DATASOURCE'
,'DBPROPFLAGS_DATASOURCECREATE'
,'DBPROPFLAGS_DATASOURCEINFO'
,'DBPROPFLAGS_DBINIT'
,'DBPROPFLAGS_INDEX'
,'DBPROPFLAGS_ROWSET'
,'DBPROPFLAGS_TABLE'
,'DBPROPFLAGS_COLUMNOK'
,'DBPROPFLAGS_READ'
,'DBPROPFLAGS_WRITE'
,'DBPROPFLAGS_REQUIRED'
,'DBPROPFLAGS_SESSION'
,'DBPROPFLAGS_TRUSTEE'
,'DBPROPOPTIONS_REQUIRED'
,'DBPROPOPTIONS_SETIFCHEAP'
,'DBPROPOPTIONS_OPTIONAL'
,'DBPROPSTATUS_OK'
,'DBPROPSTATUS_NOTSUPPORTED'
,'DBPROPSTATUS_BADVALUE'
,'DBPROPSTATUS_BADOPTION'
,'DBPROPSTATUS_BADCOLUMN'
,'DBPROPSTATUS_NOTALLSETTABLE'
,'DBPROPSTATUS_NOTSETTABLE'
,'DBPROPSTATUS_NOTSET'
,'DBPROPSTATUS_CONFLICTING'
,'DBPROPSTATUS_NOTAVAILAVLE'
,'DBINDEX_COL_ORDER_ASC'
,'DBINDEX_COL_ORDER_DESC'
,'DBCOLUMNDESCFLAGS_TYPENAME'
,'DBCOLUMNDESCFLAGS_ITYPEINFO'
,'DBCOLUMNDESCFLAGS_PROPERTIES'
,'DBCOLUMNDESCFLAGS_CLSID'
,'DBCOLUMNDESCFLAGS_COLSIZE'
,'DBCOLUMNDESCFLAGS_DBCID'
,'DBCOLUMNDESCFLAGS_WTYPE'
,'DBCOLUMNDESCFLAGS_PRECISION'
,'DBCOLUMNDESCFLAGS_SCALE'
,'DBEVENTPHASE_OKTODO'
,'DBEVENTPHASE_ABOUTTODO'
,'DBEVENTPHASE_SYNCHAFTER'
,'DBEVENTPHASE_FAILEDTODO'
,'DBEVENTPHASE_DIDEVENT'
,'DBREASON_ROWSET_FETCHPOSITIONCHANGE'
,'DBREASON_ROWSET_RELEASE'
,'DBREASON_COLUMN_SET'
,'DBREASON_COLUMN_RECALCULATED'
,'DBREASON_ROW_ACTIVATE'
,'DBREASON_ROW_RELEASE'
,'DBREASON_ROW_DELETE'
,'DBREASON_ROW_FIRSTCHANGE'
,'DBREASON_ROW_INSERT'
,'DBREASON_ROW_RESYNCH'
,'DBREASON_ROW_UNDOCHANGE'
,'DBREASON_ROW_UNDOINSERT'
,'DBREASON_ROW_UNDODELETE'
,'DBREASON_ROW_UPDATE'
,'DBREASON_ROWSET_CHANGED'
,'DBREASON_ROWPOSITION_CHANGED'
,'DBREASON_ROWPOSITION_CHAPTERCHANGED'
,'DBREASON_ROWPOSITION_CLEARED'
,'DBREASON_ROW_ASYNCHINSERT'
,'DBREASON_ROWSET_ROWSADDED'
,'DBREASON_ROWSET_POPULATIONCOMPLETE'
,'DBREASON_ROWSET_POPULATIONSTOPPED'
,'DBCOMPAREOPS_LT'
,'DBCOMPAREOPS_LE'
,'DBCOMPAREOPS_EQ'
,'DBCOMPAREOPS_GE'
,'DBCOMPAREOPS_GT'
,'DBCOMPAREOPS_BEGINSWITH'
,'DBCOMPAREOPS_CONTAINS'
,'DBCOMPAREOPS_NE'
,'DBCOMPAREOPS_IGNORE'
,'DBCOMPAREOPS_CASESENSITIVE'
,'DBCOMPAREOPS_CASEINSENSITIVE'
,'DBCOMPAREOPS_NOTBEGINSWITH'
,'DBCOMPAREOPS_NOTCONTAINS'
,'DBASYNCHOP_OPEN'
,'DBASYNCHPHASE_INITIALIZATION'
,'DBASYNCHPHASE_POPULATION'
,'DBASYNCHPHASE_COMPLETE'
,'DBASYNCHPHASE_CANCELED'
,'DBSORT_ASCENDING'
,'DBSORT_DESCENDING'
,'DBACCESSOR_INVALID'
,'DBACCESSOR_PASSBYREF'
,'DBACCESSOR_ROWDATA'
,'DBACCESSOR_PARAMETERDATA'
,'DBACCESSOR_OPTIMIZED'
,'DBACCESSOR_INHERITED'
,'DBBINDSTATUS_OK'
,'DBBINDSTATUS_BADORDINAL'
,'DBBINDSTATUS_UNSUPPORTEDCONVERSION'
,'DBBINDSTATUS_BADBINDINFO'
,'DBBINDSTATUS_BADSTORAGEFLAGS'
,'DBBINDSTATUS_NOINTERFACE'
,'DBBINDSTATUS_MULTIPLESTORAGE'
,'DBCOMPARE_LT'
,'DBCOMPARE_EQ'
,'DBCOMPARE_GT'
,'DBCOMPARE_NE'
,'DBCOMPARE_NOTCOMPARABLE'
,'DBPOSITION_OK'
,'DBPOSITION_NOROW'
,'DBPOSITION_BOF'
,'DBPOSITION_EOF'
,'DBPENDINGSTATUS_NEW'
,'DBPENDINGSTATUS_CHANGED'
,'DBPENDINGSTATUS_DELETED'
,'DBPENDINGSTATUS_UNCHANGED'
,'DBPENDINGSTATUS_INVALIDROW'
,'DBSEEK_INVALID'
,'DBSEEK_FIRSTEQ'
,'DBSEEK_LASTEQ'
,'DBSEEK_GE'
,'DBSEEK_GT'
,'DBSEEK_LE'
,'DBSEEK_LT'
,'DBRANGE_INCLUSIVESTART'
,'DBRANGE_INCLUSIVEEND'
,'DBRANGE_EXCLUSIVESTART'
,'DBRANGE_EXCLUSIVEEND'
,'DBRANGE_EXCLUDENULLS'
,'DBRANGE_PREFIX'
,'DBRANGE_MATCH'
,'DBRANGE_MATCH_N_SHIFT'
,'DBRANGE_MATCH_N_MASK'
,'DBWATCHNOTIFY_ROWSCHANGED'
,'DBWATCHNOTIFY_QUERYDONE'
,'DBWATCHNOTIFY_QUERYREEXECUTED'
,'DBWATCHMODE_ALL'
,'DBWATCHMODE_EXTEND'
,'DBWATCHMODE_MOVE'
,'DBWATCHMODE_COUNT'
,'DBROWCHANGEKIND_INSERT'
,'DBROWCHANGEKIND_DELETE'
,'DBROWCHANGEKIND_UPDATE'
,'DBROWCHANGEKIND_COUNT'
,'DBCONVERTFLAGS_COLUMN'
,'DBCONVERTFLAGS_PARAMETER'
,'DBCONVERTFLAGS_ISLONG'
,'DBCONVERTFLAGS_ISFIXEDLENGTH'
,'DBCONVERTFLAGS_FROMVARIANT'
,'DBRESOURCE_INVALID'
,'DBRESOURCE_TOTAL'
,'DBRESOURCE_CPU'
,'DBRESOURCE_MEMORY'
,'DBRESOURCE_DISK'
,'DBRESOURCE_NETWORK'
,'DBRESOURCE_RESPONSE'
,'DBRESOURCE_ROWS'
,'DBRESOURCE_OTHER'
,'DBUNIT_INVALID'
,'DBUNIT_WEIGHT'
,'DBUNIT_PERCENT'
,'DBUNIT_MAXIMUM'
,'DBUNIT_MINIMUM'
,'DBUNIT_MICRO_SECOND'
,'DBUNIT_MILLI_SECOND'
,'DBUNIT_SECOND'
,'DBUNIT_MINUTE'
,'DBUNIT_HOUR'
,'DBUNIT_BYTE'
,'DBUNIT_KILO_BYTE'
,'DBUNIT_MEGA_BYTE'
,'DBUNIT_GIGA_BYTE'
,'DBUNIT_NUM_MSGS'
,'DBUNIT_NUM_LOCKS'
,'DBUNIT_NUM_ROWS'
,'DBUNIT_OTHER'
,'DBEXECLIMITS_ABORT'
,'DBEXECLIMITS_STOP'
,'DBEXECLIMITS_SUSPEND'
,'DBCOMMANDREUSE_NONE'
,'DBCOMMANDREUSE_PROPERTIES'
,'DBCOMMANDREUSE_PARAMETERS'
,'DBVALUEKIND_BYGUID'
,'DBVALUEKIND_COLDESC'
,'DBVALUEKIND_ID'
,'DBVALUEKIND_CONTENT'
,'DBVALUEKIND_CONTENTVECTOR'
,'DBVALUEKIND_GROUPINFO'
,'DBVALUEKIND_PARAMETER'
,'DBVALUEKIND_PROPERTY'
,'DBVALUEKIND_SETFUNC'
,'DBVALUEKIND_SORTINFO'
,'DBVALUEKIND_TEXT'
,'DBVALUEKIND_COMMAND'
,'DBVALUEKIND_MONIKER'
,'DBVALUEKIND_ROWSET'
,'DBVALUEKIND_LIKE'
,'DBVALUEKIND_CONTENTPROXIMITY'
,'DBVALUEKIND_IDISPATCH'
,'DBVALUEKIND_IUNKNOWN'
,'DBVALUEKIND_EMPTY'
,'DBVALUEKIND_NULL'
,'DBVALUEKIND_I2'
,'DBVALUEKIND_I4'
,'DBVALUEKIND_R4'
,'DBVALUEKIND_R8'
,'DBVALUEKIND_CY'
,'DBVALUEKIND_DATE'
,'DBVALUEKIND_BSTR'
,'DBVALUEKIND_ERROR'
,'DBVALUEKIND_BOOL'
,'DBVALUEKIND_VARIANT'
,'DBVALUEKIND_VECTOR'
,'DBVALUEKIND_ARRAY'
,'DBVALUEKIND_BYREF'
,'DBVALUEKIND_I1'
,'DBVALUEKIND_UI1'
,'DBVALUEKIND_UI2'
,'DBVALUEKIND_UI4'
,'DBVALUEKIND_I8'
,'DBVALUEKIND_UI8'
,'DBVALUEKIND_GUID'
,'DBVALUEKIND_BYTES'
,'DBVALUEKIND_STR'
,'DBVALUEKIND_WSTR'
,'DBVALUEKIND_NUMERIC'
,'DBVALUEKIND_DBDATE'
,'DBVALUEKIND_DBTIME'
,'DBVALUEKIND_DBTIMESTAMP'
,'DBSOURCETYPE_DATASOURCE'
,'DBSOURCETYPE_ENUMERATOR'
,'DBSOURCETYPE_DATASOURCE_TDP'
,'DBSOURCETYPE_DATASOURCE_MDP'
,'DBLITERAL_INVALID'
,'DBLITERAL_BINARY_LITERAL'
,'DBLITERAL_CATALOG_NAME'
,'DBLITERAL_CATALOG_SEPARATOR'
,'DBLITERAL_CHAR_LITERAL'
,'DBLITERAL_COLUMN_ALIAS'
,'DBLITERAL_COLUMN_NAME'
,'DBLITERAL_CORRELATION_NAME'
,'DBLITERAL_CURSOR_NAME'
,'DBLITERAL_ESCAPE_PERCENT'
,'DBLITERAL_ESCAPE_UNDERSCORE'
,'DBLITERAL_INDEX_NAME'
,'DBLITERAL_LIKE_PERCENT'
,'DBLITERAL_LIKE_UNDERSCORE'
,'DBLITERAL_PROCEDURE_NAME'
,'DBLITERAL_QUOTE'
);
var __RegisteredConstsList2 : TList;
procedure __RegisterConsts2;
begin
__RegisteredConstsList2 := TList.Create;
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[0] ,DBPROP_CLIENTCURSOR));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[1] ,DBPROP_TRUSTEE_USERNAME));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[2] ,DBPROP_TRUSTEE_AUTHENTICATION));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[3] ,DBPROP_TRUSTEE_NEWAUTHENTICATION));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[4] ,DBPROP_ICommandCost));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[5] ,DBPROP_ICommandTree));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[6] ,DBPROP_ICommandValidate));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[7] ,DBPROP_IDBSchemaCommand));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[8] ,DBPROP_IProvideMoniker));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[9] ,DBPROP_IQuery));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[10] ,DBPROP_IReadData));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[11] ,DBPROP_IRowsetAsynch));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[12] ,DBPROP_IRowsetKeys));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[13] ,DBPROP_IRowsetNewRowAfter));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[14] ,DBPROP_IRowsetNextRowset));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[15] ,DBPROP_IRowsetWatchAll));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[16] ,DBPROP_IRowsetWatchNotify));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[17] ,DBPROP_IRowsetWatchRegion));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[18] ,DBPROP_IRowsetWithParameters));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[19] ,DBPROP_IRowsetExactScroll));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[20] ,DBOP_scalar_constant));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[21] ,DBOP_DEFAULT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[22] ,DBOP_NULL));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[23] ,DBOP_bookmark_name));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[24] ,DBOP_catalog_name));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[25] ,DBOP_column_name));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[26] ,DBOP_schema_name));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[27] ,DBOP_outall_name));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[28] ,DBOP_qualifier_name));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[29] ,DBOP_qualified_column_name));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[30] ,DBOP_table_name));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[31] ,DBOP_nested_table_name));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[32] ,DBOP_nested_column_name));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[33] ,DBOP_row));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[34] ,DBOP_table));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[35] ,DBOP_sort));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[36] ,DBOP_distinct));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[37] ,DBOP_distinct_order_preserving));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[38] ,DBOP_alias));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[39] ,DBOP_cross_join));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[40] ,DBOP_union_join));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[41] ,DBOP_inner_join));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[42] ,DBOP_left_semi_join));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[43] ,DBOP_right_semi_join));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[44] ,DBOP_left_anti_semi_join));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[45] ,DBOP_right_anti_semi_join));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[46] ,DBOP_left_outer_join));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[47] ,DBOP_right_outer_join));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[48] ,DBOP_full_outer_join));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[49] ,DBOP_natural_join));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[50] ,DBOP_natural_left_outer_join));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[51] ,DBOP_natural_right_outer_join));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[52] ,DBOP_natural_full_outer_join));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[53] ,DBOP_set_intersection));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[54] ,DBOP_set_union));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[55] ,DBOP_set_left_difference));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[56] ,DBOP_set_right_difference));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[57] ,DBOP_set_anti_difference));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[58] ,DBOP_bag_intersection));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[59] ,DBOP_bag_union));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[60] ,DBOP_bag_left_difference));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[61] ,DBOP_bag_right_difference));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[62] ,DBOP_bag_anti_difference));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[63] ,DBOP_division));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[64] ,DBOP_relative_sampling));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[65] ,DBOP_absolute_sampling));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[66] ,DBOP_transitive_closure));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[67] ,DBOP_recursive_union));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[68] ,DBOP_aggregate));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[69] ,DBOP_remote_table));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[70] ,DBOP_select));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[71] ,DBOP_order_preserving_select));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[72] ,DBOP_project));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[73] ,DBOP_project_order_preserving));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[74] ,DBOP_top));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[75] ,DBOP_top_percent));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[76] ,DBOP_top_plus_ties));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[77] ,DBOP_top_percent_plus_ties));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[78] ,DBOP_rank));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[79] ,DBOP_rank_ties_equally));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[80] ,DBOP_rank_ties_equally_and_skip));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[81] ,DBOP_navigate));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[82] ,DBOP_nesting));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[83] ,DBOP_unnesting));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[84] ,DBOP_nested_apply));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[85] ,DBOP_cross_tab));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[86] ,DBOP_is_NULL));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[87] ,DBOP_is_NOT_NULL));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[88] ,DBOP_equal));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[89] ,DBOP_not_equal));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[90] ,DBOP_less));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[91] ,DBOP_less_equal));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[92] ,DBOP_greater));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[93] ,DBOP_greater_equal));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[94] ,DBOP_equal_all));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[95] ,DBOP_not_equal_all));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[96] ,DBOP_less_all));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[97] ,DBOP_less_equal_all));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[98] ,DBOP_greater_all));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[99] ,DBOP_greater_equal_all));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[100] ,DBOP_equal_any));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[101] ,DBOP_not_equal_any));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[102] ,DBOP_less_any));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[103] ,DBOP_less_equal_any));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[104] ,DBOP_greater_any));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[105] ,DBOP_greater_equal_any));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[106] ,DBOP_anybits));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[107] ,DBOP_allbits));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[108] ,DBOP_anybits_any));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[109] ,DBOP_allbits_any));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[110] ,DBOP_anybits_all));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[111] ,DBOP_allbits_all));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[112] ,DBOP_between));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[113] ,DBOP_between_unordered));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[114] ,DBOP_match));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[115] ,DBOP_match_unique));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[116] ,DBOP_match_partial));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[117] ,DBOP_match_partial_unique));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[118] ,DBOP_match_full));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[119] ,DBOP_match_full_unique));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[120] ,DBOP_scalar_parameter));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[121] ,DBOP_scalar_function));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[122] ,DBOP_plus));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[123] ,DBOP_minus));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[124] ,DBOP_times));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[125] ,DBOP_over));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[126] ,DBOP_div));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[127] ,DBOP_modulo));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[128] ,DBOP_power));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[129] ,DBOP_like));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[130] ,DBOP_sounds_like));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[131] ,DBOP_like_any));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[132] ,DBOP_like_all));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[133] ,DBOP_is_INVALID));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[134] ,DBOP_is_TRUE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[135] ,DBOP_is_FALSE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[136] ,DBOP_and));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[137] ,DBOP_or));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[138] ,DBOP_xor));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[139] ,DBOP_equivalent));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[140] ,DBOP_not));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[141] ,DBOP_implies));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[142] ,DBOP_overlaps));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[143] ,DBOP_case_condition));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[144] ,DBOP_case_value));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[145] ,DBOP_nullif));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[146] ,DBOP_cast));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[147] ,DBOP_coalesce));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[148] ,DBOP_position));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[149] ,DBOP_extract));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[150] ,DBOP_char_length));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[151] ,DBOP_octet_length));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[152] ,DBOP_bit_length));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[153] ,DBOP_substring));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[154] ,DBOP_upper));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[155] ,DBOP_lower));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[156] ,DBOP_trim));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[157] ,DBOP_translate));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[158] ,DBOP_convert));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[159] ,DBOP_string_concat));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[160] ,DBOP_current_date));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[161] ,DBOP_current_time));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[162] ,DBOP_current_timestamp));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[163] ,DBOP_content_select));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[164] ,DBOP_content));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[165] ,DBOP_content_freetext));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[166] ,DBOP_content_proximity));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[167] ,DBOP_content_vector_or));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[168] ,DBOP_delete));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[169] ,DBOP_update));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[170] ,DBOP_insert));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[171] ,DBOP_min));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[172] ,DBOP_max));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[173] ,DBOP_count));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[174] ,DBOP_sum));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[175] ,DBOP_avg));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[176] ,DBOP_any_sample));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[177] ,DBOP_stddev));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[178] ,DBOP_stddev_pop));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[179] ,DBOP_var));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[180] ,DBOP_var_pop));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[181] ,DBOP_first));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[182] ,DBOP_last));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[183] ,DBOP_in));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[184] ,DBOP_exists));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[185] ,DBOP_unique));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[186] ,DBOP_subset));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[187] ,DBOP_proper_subset));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[188] ,DBOP_superset));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[189] ,DBOP_proper_superset));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[190] ,DBOP_disjoint));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[191] ,DBOP_pass_through));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[192] ,DBOP_defined_by_GUID));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[193] ,DBOP_text_command));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[194] ,DBOP_SQL_select));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[195] ,DBOP_prior_command_tree));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[196] ,DBOP_add_columns));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[197] ,DBOP_column_list_anchor));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[198] ,DBOP_column_list_element));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[199] ,DBOP_command_list_anchor));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[200] ,DBOP_command_list_element));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[201] ,DBOP_from_list_anchor));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[202] ,DBOP_from_list_element));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[203] ,DBOP_project_list_anchor));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[204] ,DBOP_project_list_element));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[205] ,DBOP_row_list_anchor));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[206] ,DBOP_row_list_element));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[207] ,DBOP_scalar_list_anchor));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[208] ,DBOP_scalar_list_element));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[209] ,DBOP_set_list_anchor));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[210] ,DBOP_set_list_element));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[211] ,DBOP_sort_list_anchor));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[212] ,DBOP_sort_list_element));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[213] ,DBOP_alter_character_set));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[214] ,DBOP_alter_collation));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[215] ,DBOP_alter_domain));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[216] ,DBOP_alter_index));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[217] ,DBOP_alter_procedure));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[218] ,DBOP_alter_schema));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[219] ,DBOP_alter_table));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[220] ,DBOP_alter_trigger));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[221] ,DBOP_alter_view));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[222] ,DBOP_coldef_list_anchor));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[223] ,DBOP_coldef_list_element));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[224] ,DBOP_create_assertion));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[225] ,DBOP_create_character_set));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[226] ,DBOP_create_collation));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[227] ,DBOP_create_domain));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[228] ,DBOP_create_index));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[229] ,DBOP_create_procedure));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[230] ,DBOP_create_schema));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[231] ,DBOP_create_synonym));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[232] ,DBOP_create_table));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[233] ,DBOP_create_temporary_table));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[234] ,DBOP_create_translation));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[235] ,DBOP_create_trigger));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[236] ,DBOP_create_view));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[237] ,DBOP_drop_assertion));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[238] ,DBOP_drop_character_set));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[239] ,DBOP_drop_collation));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[240] ,DBOP_drop_domain));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[241] ,DBOP_drop_index));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[242] ,DBOP_drop_procedure));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[243] ,DBOP_drop_schema));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[244] ,DBOP_drop_synonym));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[245] ,DBOP_drop_table));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[246] ,DBOP_drop_translation));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[247] ,DBOP_drop_trigger));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[248] ,DBOP_drop_view));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[249] ,DBOP_foreign_key));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[250] ,DBOP_grant_privileges));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[251] ,DBOP_index_list_anchor));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[252] ,DBOP_index_list_element));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[253] ,DBOP_primary_key));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[254] ,DBOP_property_list_anchor));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[255] ,DBOP_property_list_element));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[256] ,DBOP_referenced_table));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[257] ,DBOP_rename_object));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[258] ,DBOP_revoke_privileges));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[259] ,DBOP_schema_authorization));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[260] ,DBOP_unique_key));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[261] ,DBPARAMFLAGS_ISINPUT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[262] ,DBPARAMFLAGS_ISOUTPUT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[263] ,DBPARAMFLAGS_ISSIGNED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[264] ,DBPARAMFLAGS_ISNULLABLE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[265] ,DBPARAMFLAGS_ISLONG));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[266] ,DBPARAMFLAGS_SCALEISNEGATIVE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[267] ,DBPROPFLAGS_NOTSUPPORTED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[268] ,DBPROPFLAGS_COLUMN));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[269] ,DBPROPFLAGS_DATASOURCE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[270] ,DBPROPFLAGS_DATASOURCECREATE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[271] ,DBPROPFLAGS_DATASOURCEINFO));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[272] ,DBPROPFLAGS_DBINIT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[273] ,DBPROPFLAGS_INDEX));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[274] ,DBPROPFLAGS_ROWSET));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[275] ,DBPROPFLAGS_TABLE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[276] ,DBPROPFLAGS_COLUMNOK));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[277] ,DBPROPFLAGS_READ));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[278] ,DBPROPFLAGS_WRITE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[279] ,DBPROPFLAGS_REQUIRED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[280] ,DBPROPFLAGS_SESSION));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[281] ,DBPROPFLAGS_TRUSTEE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[282] ,DBPROPOPTIONS_REQUIRED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[283] ,DBPROPOPTIONS_SETIFCHEAP));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[284] ,DBPROPOPTIONS_OPTIONAL));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[285] ,DBPROPSTATUS_OK));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[286] ,DBPROPSTATUS_NOTSUPPORTED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[287] ,DBPROPSTATUS_BADVALUE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[288] ,DBPROPSTATUS_BADOPTION));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[289] ,DBPROPSTATUS_BADCOLUMN));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[290] ,DBPROPSTATUS_NOTALLSETTABLE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[291] ,DBPROPSTATUS_NOTSETTABLE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[292] ,DBPROPSTATUS_NOTSET));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[293] ,DBPROPSTATUS_CONFLICTING));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[294] ,DBPROPSTATUS_NOTAVAILAVLE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[295] ,DBINDEX_COL_ORDER_ASC));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[296] ,DBINDEX_COL_ORDER_DESC));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[297] ,DBCOLUMNDESCFLAGS_TYPENAME));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[298] ,DBCOLUMNDESCFLAGS_ITYPEINFO));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[299] ,DBCOLUMNDESCFLAGS_PROPERTIES));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[300] ,DBCOLUMNDESCFLAGS_CLSID));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[301] ,DBCOLUMNDESCFLAGS_COLSIZE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[302] ,DBCOLUMNDESCFLAGS_DBCID));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[303] ,DBCOLUMNDESCFLAGS_WTYPE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[304] ,DBCOLUMNDESCFLAGS_PRECISION));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[305] ,DBCOLUMNDESCFLAGS_SCALE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[306] ,DBEVENTPHASE_OKTODO));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[307] ,DBEVENTPHASE_ABOUTTODO));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[308] ,DBEVENTPHASE_SYNCHAFTER));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[309] ,DBEVENTPHASE_FAILEDTODO));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[310] ,DBEVENTPHASE_DIDEVENT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[311] ,DBREASON_ROWSET_FETCHPOSITIONCHANGE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[312] ,DBREASON_ROWSET_RELEASE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[313] ,DBREASON_COLUMN_SET));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[314] ,DBREASON_COLUMN_RECALCULATED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[315] ,DBREASON_ROW_ACTIVATE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[316] ,DBREASON_ROW_RELEASE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[317] ,DBREASON_ROW_DELETE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[318] ,DBREASON_ROW_FIRSTCHANGE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[319] ,DBREASON_ROW_INSERT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[320] ,DBREASON_ROW_RESYNCH));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[321] ,DBREASON_ROW_UNDOCHANGE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[322] ,DBREASON_ROW_UNDOINSERT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[323] ,DBREASON_ROW_UNDODELETE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[324] ,DBREASON_ROW_UPDATE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[325] ,DBREASON_ROWSET_CHANGED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[326] ,DBREASON_ROWPOSITION_CHANGED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[327] ,DBREASON_ROWPOSITION_CHAPTERCHANGED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[328] ,DBREASON_ROWPOSITION_CLEARED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[329] ,DBREASON_ROW_ASYNCHINSERT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[330] ,DBREASON_ROWSET_ROWSADDED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[331] ,DBREASON_ROWSET_POPULATIONCOMPLETE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[332] ,DBREASON_ROWSET_POPULATIONSTOPPED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[333] ,DBCOMPAREOPS_LT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[334] ,DBCOMPAREOPS_LE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[335] ,DBCOMPAREOPS_EQ));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[336] ,DBCOMPAREOPS_GE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[337] ,DBCOMPAREOPS_GT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[338] ,DBCOMPAREOPS_BEGINSWITH));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[339] ,DBCOMPAREOPS_CONTAINS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[340] ,DBCOMPAREOPS_NE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[341] ,DBCOMPAREOPS_IGNORE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[342] ,DBCOMPAREOPS_CASESENSITIVE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[343] ,DBCOMPAREOPS_CASEINSENSITIVE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[344] ,DBCOMPAREOPS_NOTBEGINSWITH));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[345] ,DBCOMPAREOPS_NOTCONTAINS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[346] ,DBASYNCHOP_OPEN));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[347] ,DBASYNCHPHASE_INITIALIZATION));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[348] ,DBASYNCHPHASE_POPULATION));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[349] ,DBASYNCHPHASE_COMPLETE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[350] ,DBASYNCHPHASE_CANCELED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[351] ,DBSORT_ASCENDING));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[352] ,DBSORT_DESCENDING));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[353] ,DBACCESSOR_INVALID));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[354] ,DBACCESSOR_PASSBYREF));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[355] ,DBACCESSOR_ROWDATA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[356] ,DBACCESSOR_PARAMETERDATA));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[357] ,DBACCESSOR_OPTIMIZED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[358] ,DBACCESSOR_INHERITED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[359] ,DBBINDSTATUS_OK));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[360] ,DBBINDSTATUS_BADORDINAL));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[361] ,DBBINDSTATUS_UNSUPPORTEDCONVERSION));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[362] ,DBBINDSTATUS_BADBINDINFO));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[363] ,DBBINDSTATUS_BADSTORAGEFLAGS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[364] ,DBBINDSTATUS_NOINTERFACE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[365] ,DBBINDSTATUS_MULTIPLESTORAGE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[366] ,DBCOMPARE_LT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[367] ,DBCOMPARE_EQ));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[368] ,DBCOMPARE_GT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[369] ,DBCOMPARE_NE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[370] ,DBCOMPARE_NOTCOMPARABLE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[371] ,DBPOSITION_OK));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[372] ,DBPOSITION_NOROW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[373] ,DBPOSITION_BOF));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[374] ,DBPOSITION_EOF));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[375] ,DBPENDINGSTATUS_NEW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[376] ,DBPENDINGSTATUS_CHANGED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[377] ,DBPENDINGSTATUS_DELETED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[378] ,DBPENDINGSTATUS_UNCHANGED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[379] ,DBPENDINGSTATUS_INVALIDROW));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[380] ,DBSEEK_INVALID));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[381] ,DBSEEK_FIRSTEQ));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[382] ,DBSEEK_LASTEQ));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[383] ,DBSEEK_GE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[384] ,DBSEEK_GT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[385] ,DBSEEK_LE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[386] ,DBSEEK_LT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[387] ,DBRANGE_INCLUSIVESTART));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[388] ,DBRANGE_INCLUSIVEEND));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[389] ,DBRANGE_EXCLUSIVESTART));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[390] ,DBRANGE_EXCLUSIVEEND));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[391] ,DBRANGE_EXCLUDENULLS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[392] ,DBRANGE_PREFIX));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[393] ,DBRANGE_MATCH));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[394] ,DBRANGE_MATCH_N_SHIFT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[395] ,DBRANGE_MATCH_N_MASK));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[396] ,DBWATCHNOTIFY_ROWSCHANGED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[397] ,DBWATCHNOTIFY_QUERYDONE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[398] ,DBWATCHNOTIFY_QUERYREEXECUTED));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[399] ,DBWATCHMODE_ALL));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[400] ,DBWATCHMODE_EXTEND));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[401] ,DBWATCHMODE_MOVE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[402] ,DBWATCHMODE_COUNT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[403] ,DBROWCHANGEKIND_INSERT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[404] ,DBROWCHANGEKIND_DELETE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[405] ,DBROWCHANGEKIND_UPDATE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[406] ,DBROWCHANGEKIND_COUNT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[407] ,DBCONVERTFLAGS_COLUMN));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[408] ,DBCONVERTFLAGS_PARAMETER));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[409] ,DBCONVERTFLAGS_ISLONG));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[410] ,DBCONVERTFLAGS_ISFIXEDLENGTH));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[411] ,DBCONVERTFLAGS_FROMVARIANT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[412] ,DBRESOURCE_INVALID));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[413] ,DBRESOURCE_TOTAL));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[414] ,DBRESOURCE_CPU));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[415] ,DBRESOURCE_MEMORY));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[416] ,DBRESOURCE_DISK));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[417] ,DBRESOURCE_NETWORK));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[418] ,DBRESOURCE_RESPONSE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[419] ,DBRESOURCE_ROWS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[420] ,DBRESOURCE_OTHER));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[421] ,DBUNIT_INVALID));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[422] ,DBUNIT_WEIGHT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[423] ,DBUNIT_PERCENT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[424] ,DBUNIT_MAXIMUM));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[425] ,DBUNIT_MINIMUM));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[426] ,DBUNIT_MICRO_SECOND));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[427] ,DBUNIT_MILLI_SECOND));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[428] ,DBUNIT_SECOND));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[429] ,DBUNIT_MINUTE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[430] ,DBUNIT_HOUR));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[431] ,DBUNIT_BYTE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[432] ,DBUNIT_KILO_BYTE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[433] ,DBUNIT_MEGA_BYTE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[434] ,DBUNIT_GIGA_BYTE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[435] ,DBUNIT_NUM_MSGS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[436] ,DBUNIT_NUM_LOCKS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[437] ,DBUNIT_NUM_ROWS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[438] ,DBUNIT_OTHER));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[439] ,DBEXECLIMITS_ABORT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[440] ,DBEXECLIMITS_STOP));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[441] ,DBEXECLIMITS_SUSPEND));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[442] ,DBCOMMANDREUSE_NONE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[443] ,DBCOMMANDREUSE_PROPERTIES));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[444] ,DBCOMMANDREUSE_PARAMETERS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[445] ,DBVALUEKIND_BYGUID));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[446] ,DBVALUEKIND_COLDESC));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[447] ,DBVALUEKIND_ID));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[448] ,DBVALUEKIND_CONTENT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[449] ,DBVALUEKIND_CONTENTVECTOR));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[450] ,DBVALUEKIND_GROUPINFO));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[451] ,DBVALUEKIND_PARAMETER));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[452] ,DBVALUEKIND_PROPERTY));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[453] ,DBVALUEKIND_SETFUNC));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[454] ,DBVALUEKIND_SORTINFO));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[455] ,DBVALUEKIND_TEXT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[456] ,DBVALUEKIND_COMMAND));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[457] ,DBVALUEKIND_MONIKER));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[458] ,DBVALUEKIND_ROWSET));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[459] ,DBVALUEKIND_LIKE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[460] ,DBVALUEKIND_CONTENTPROXIMITY));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[461] ,DBVALUEKIND_IDISPATCH));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[462] ,DBVALUEKIND_IUNKNOWN));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[463] ,DBVALUEKIND_EMPTY));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[464] ,DBVALUEKIND_NULL));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[465] ,DBVALUEKIND_I2));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[466] ,DBVALUEKIND_I4));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[467] ,DBVALUEKIND_R4));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[468] ,DBVALUEKIND_R8));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[469] ,DBVALUEKIND_CY));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[470] ,DBVALUEKIND_DATE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[471] ,DBVALUEKIND_BSTR));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[472] ,DBVALUEKIND_ERROR));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[473] ,DBVALUEKIND_BOOL));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[474] ,DBVALUEKIND_VARIANT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[475] ,DBVALUEKIND_VECTOR));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[476] ,DBVALUEKIND_ARRAY));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[477] ,DBVALUEKIND_BYREF));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[478] ,DBVALUEKIND_I1));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[479] ,DBVALUEKIND_UI1));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[480] ,DBVALUEKIND_UI2));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[481] ,DBVALUEKIND_UI4));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[482] ,DBVALUEKIND_I8));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[483] ,DBVALUEKIND_UI8));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[484] ,DBVALUEKIND_GUID));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[485] ,DBVALUEKIND_BYTES));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[486] ,DBVALUEKIND_STR));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[487] ,DBVALUEKIND_WSTR));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[488] ,DBVALUEKIND_NUMERIC));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[489] ,DBVALUEKIND_DBDATE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[490] ,DBVALUEKIND_DBTIME));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[491] ,DBVALUEKIND_DBTIMESTAMP));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[492] ,DBSOURCETYPE_DATASOURCE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[493] ,DBSOURCETYPE_ENUMERATOR));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[494] ,DBSOURCETYPE_DATASOURCE_TDP));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[495] ,DBSOURCETYPE_DATASOURCE_MDP));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[496] ,DBLITERAL_INVALID));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[497] ,DBLITERAL_BINARY_LITERAL));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[498] ,DBLITERAL_CATALOG_NAME));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[499] ,DBLITERAL_CATALOG_SEPARATOR));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[500] ,DBLITERAL_CHAR_LITERAL));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[501] ,DBLITERAL_COLUMN_ALIAS));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[502] ,DBLITERAL_COLUMN_NAME));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[503] ,DBLITERAL_CORRELATION_NAME));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[504] ,DBLITERAL_CURSOR_NAME));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[505] ,DBLITERAL_ESCAPE_PERCENT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[506] ,DBLITERAL_ESCAPE_UNDERSCORE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[507] ,DBLITERAL_INDEX_NAME));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[508] ,DBLITERAL_LIKE_PERCENT));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[509] ,DBLITERAL_LIKE_UNDERSCORE));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[510] ,DBLITERAL_PROCEDURE_NAME));
__RegisteredConstsList2.Add(RegisterConst(__ConstNames2[511] ,DBLITERAL_QUOTE));
end;

procedure __UnregisterConsts2;
var i : integer;
begin
__RegisteredConstsList2.Free
end;

const __ConstNames3 : array[0..205] of string = (
'DBLITERAL_SCHEMA_NAME'
,'DBLITERAL_TABLE_NAME'
,'DBLITERAL_TEXT_COMMAND'
,'DBLITERAL_USER_NAME'
,'DBLITERAL_VIEW_NAME'
,'DBLITERAL_CUBE_NAME'
,'DBLITERAL_DIMENSION_NAME'
,'DBLITERAL_HIERARCHY_NAME'
,'DBLITERAL_LEVEL_NAME'
,'DBLITERAL_MEMBER_NAME'
,'DBLITERAL_PROPERTY_NAME'
,'DBLITERAL_SCHEMA_SEPARATOR'
,'DBLITERAL_QUOTE_SUFFIX'
,'PERM_EXCLUSIVE'
,'PERM_READDESIGN'
,'PERM_WRITEDESIGN'
,'PERM_WITHGRANT'
,'PERM_REFERENCE'
,'PERM_CREATE'
,'PERM_INSERT'
,'PERM_DELETE'
,'PERM_READCONTROL'
,'PERM_WRITEPERMISSIONS'
,'PERM_WRITEOWNER'
,'PERM_MAXIMUM_ALLOWED'
,'PERM_ALL'
,'PERM_EXECUTE'
,'PERM_READ'
,'PERM_UPDATE'
,'PERM_DROP'
,'NO_MULTIPLE_TRUSTEE'
,'TRUSTEE_IS_IMPERSONATE'
,'TRUSTEE_IS_SID'
,'TRUSTEE_IS_NAME'
,'TRUSTEE_BAD_FORM'
,'TRUSTEE_IS_UNKNOWN'
,'TRUSTEE_IS_USER'
,'TRUSTEE_IS_GROUP'
,'TRUSTEE_IS_DOMAIN'
,'TRUSTEE_IS_ALIAS'
,'TRUSTEE_IS_WELL_KNOWN_GROUP'
,'TRUSTEE_IS_DELETED'
,'TRUSTEE_IS_INVALID'
,'NOT_USED_ACCESS'
,'GRANT_ACCESS'
,'SET_ACCESS'
,'DENY_ACCESS'
,'REVOKE_ACCESS'
,'SET_AUDIT_SUCCESS'
,'SET_AUDIT_FAILURE'
,'DBPROMPTOPTIONS_NONE'
,'DBPROMPTOPTIONS_WIZARDSHEET'
,'DBPROMPTOPTIONS_PROPERTYSHEET'
,'DBPROMPTOPTIONS_BROWSEONLY'
,'DBPROMPTOPTIONS_DISABLE_PROVIDER_SELECTION'
,'FACILITY_WINDOWS'
,'FACILITY_ITF'
,'STATUS_SEVERITY_SUCCESS'
,'STATUS_SEVERITY_COERROR'
,'DB_E_BOGUS'
,'DB_E_BADACCESSORHANDLE'
,'DB_E_ROWLIMITEXCEEDED'
,'DB_E_READONLYACCESSOR'
,'DB_E_SCHEMAVIOLATION'
,'DB_E_BADROWHANDLE'
,'DB_E_OBJECTOPEN'
,'DB_E_BADCHAPTER'
,'DB_E_CANTCONVERTVALUE'
,'DB_E_BADBINDINFO'
,'DB_SEC_E_PERMISSIONDENIED'
,'DB_E_NOTAREFERENCECOLUMN'
,'DB_E_LIMITREJECTED'
,'DB_E_NOCOMMAND'
,'DB_E_COSTLIMIT'
,'DB_E_BADBOOKMARK'
,'DB_E_BADLOCKMODE'
,'DB_E_PARAMNOTOPTIONAL'
,'DB_E_BADCOLUMNID'
,'DB_E_BADRATIO'
,'DB_E_BADVALUES'
,'DB_E_ERRORSINCOMMAND'
,'DB_E_CANTCANCEL'
,'DB_E_DIALECTNOTSUPPORTED'
,'DB_E_DUPLICATEDATASOURCE'
,'DB_E_CANNOTRESTART'
,'DB_E_NOTFOUND'
,'DB_E_NEWLYINSERTED'
,'DB_E_CANNOTFREE'
,'DB_E_GOALREJECTED'
,'DB_E_UNSUPPORTEDCONVERSION'
,'DB_E_BADSTARTPOSITION'
,'DB_E_NOQUERY'
,'DB_E_NOTREENTRANT'
,'DB_E_ERRORSOCCURRED'
,'DB_E_NOAGGREGATION'
,'DB_E_DELETEDROW'
,'DB_E_CANTFETCHBACKWARDS'
,'DB_E_ROWSNOTRELEASED'
,'DB_E_BADSTORAGEFLAG'
,'DB_E_BADCOMPAREOP'
,'DB_E_BADSTATUSVALUE'
,'DB_E_CANTSCROLLBACKWARDS'
,'DB_E_BADREGIONHANDLE'
,'DB_E_NONCONTIGUOUSRANGE'
,'DB_E_INVALIDTRANSITION'
,'DB_E_NOTASUBREGION'
,'DB_E_MULTIPLESTATEMENTS'
,'DB_E_INTEGRITYVIOLATION'
,'DB_E_BADTYPENAME'
,'DB_E_ABORTLIMITREACHED'
,'DB_E_ROWSETINCOMMAND'
,'DB_E_CANTTRANSLATE'
,'DB_E_DUPLICATEINDEXID'
,'DB_E_NOINDEX'
,'DB_E_INDEXINUSE'
,'DB_E_NOTABLE'
,'DB_E_CONCURRENCYVIOLATION'
,'DB_E_BADCOPY'
,'DB_E_BADPRECISION'
,'DB_E_BADSCALE'
,'DB_E_BADTABLEID'
,'DB_E_BADID'
,'DB_E_BADTYPE'
,'DB_E_DUPLICATECOLUMNID'
,'DB_E_DUPLICATETABLEID'
,'DB_E_TABLEINUSE'
,'DB_E_NOLOCALE'
,'DB_E_BADRECORDNUM'
,'DB_E_BOOKMARKSKIPPED'
,'DB_E_BADPROPERTYVALUE'
,'DB_E_INVALID'
,'DB_E_BADACCESSORFLAGS'
,'DB_E_BADSTORAGEFLAGS'
,'DB_E_BYREFACCESSORNOTSUPPORTED'
,'DB_E_NULLACCESSORNOTSUPPORTED'
,'DB_E_NOTPREPARED'
,'DB_E_BADACCESSORTYPE'
,'DB_E_WRITEONLYACCESSOR'
,'DB_SEC_E_AUTH_FAILED'
,'DB_E_CANCELED'
,'DB_E_CHAPTERNOTRELEASED'
,'DB_E_BADSOURCEHANDLE'
,'DB_E_PARAMUNAVAILABLE'
,'DB_E_ALREADYINITIALIZED'
,'DB_E_NOTSUPPORTED'
,'DB_E_MAXPENDCHANGESEXCEEDED'
,'DB_E_BADORDINAL'
,'DB_E_PENDINGCHANGES'
,'DB_E_DATAOVERFLOW'
,'DB_E_BADHRESULT'
,'DB_E_BADLOOKUPID'
,'DB_E_BADDYNAMICERRORID'
,'DB_E_PENDINGINSERT'
,'DB_E_BADCONVERTFLAG'
,'DB_E_BADPARAMETERNAME'
,'DB_E_MULTIPLESTORAGE'
,'DB_E_CANTFILTER'
,'DB_E_CANTORDER'
,'MD_E_BADTUPLE'
,'MD_E_BADCOORDINATE'
,'MD_E_INVALIDAXIS'
,'MD_E_INVALIDCELLRANGE'
,'DB_E_NOCOLUMN'
,'DB_E_COMMANDNOTPERSISTED'
,'DB_E_DUPLICATEID'
,'DB_E_OBJECTCREATIONLIMITREACHED'
,'DB_E_BADINDEXID'
,'DB_E_BADINITSTRING'
,'DB_E_NOPROVIDERSREGISTERED'
,'DB_E_MISMATCHEDPROVIDER'
,'SEC_E_BADTRUSTEEID'
,'SEC_E_NOTRUSTEEID'
,'SEC_E_NOMEMBERSHIPSUPPORT'
,'SEC_E_INVALIDOBJECT'
,'SEC_E_NOOWNER'
,'SEC_E_INVALIDACCESSENTRYLIST'
,'SEC_E_INVALIDOWNER'
,'SEC_E_INVALIDACCESSENTRY'
,'SEC_E_PERMISSIONDENIED'
,'DB_S_ROWLIMITEXCEEDED'
,'DB_S_COLUMNTYPEMISMATCH'
,'DB_S_TYPEINFOOVERRIDDEN'
,'DB_S_BOOKMARKSKIPPED'
,'DB_S_NONEXTROWSET'
,'DB_S_ENDOFROWSET'
,'DB_S_COMMANDREEXECUTED'
,'DB_S_BUFFERFULL'
,'DB_S_NORESULT'
,'DB_S_CANTRELEASE'
,'DB_S_GOALCHANGED'
,'DB_S_UNWANTEDOPERATION'
,'DB_S_DIALECTIGNORED'
,'DB_S_UNWANTEDPHASE'
,'DB_S_UNWANTEDREASON'
,'DB_S_ASYNCHRONOUS'
,'DB_S_COLUMNSCHANGED'
,'DB_S_ERRORSRETURNED'
,'DB_S_BADROWHANDLE'
,'DB_S_DELETEDROW'
,'DB_S_TOOMANYCHANGES'
,'DB_S_STOPLIMITREACHED'
,'DB_S_LOCKUPGRADED'
,'DB_S_PROPERTIESCHANGED'
,'DB_S_ERRORSOCCURRED'
,'DB_S_PARAMUNAVAILABLE'
,'DB_S_MULTIPLECHANGES'
);
var __RegisteredConstsList3 : TList;
procedure __RegisterConsts3;
begin
__RegisteredConstsList3 := TList.Create;
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[0] ,DBLITERAL_SCHEMA_NAME));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[1] ,DBLITERAL_TABLE_NAME));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[2] ,DBLITERAL_TEXT_COMMAND));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[3] ,DBLITERAL_USER_NAME));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[4] ,DBLITERAL_VIEW_NAME));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[5] ,DBLITERAL_CUBE_NAME));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[6] ,DBLITERAL_DIMENSION_NAME));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[7] ,DBLITERAL_HIERARCHY_NAME));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[8] ,DBLITERAL_LEVEL_NAME));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[9] ,DBLITERAL_MEMBER_NAME));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[10] ,DBLITERAL_PROPERTY_NAME));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[11] ,DBLITERAL_SCHEMA_SEPARATOR));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[12] ,DBLITERAL_QUOTE_SUFFIX));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[13] ,PERM_EXCLUSIVE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[14] ,PERM_READDESIGN));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[15] ,PERM_WRITEDESIGN));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[16] ,PERM_WITHGRANT));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[17] ,PERM_REFERENCE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[18] ,PERM_CREATE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[19] ,PERM_INSERT));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[20] ,PERM_DELETE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[21] ,PERM_READCONTROL));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[22] ,PERM_WRITEPERMISSIONS));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[23] ,PERM_WRITEOWNER));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[24] ,PERM_MAXIMUM_ALLOWED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[25] ,PERM_ALL));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[26] ,PERM_EXECUTE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[27] ,PERM_READ));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[28] ,PERM_UPDATE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[29] ,PERM_DROP));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[30] ,NO_MULTIPLE_TRUSTEE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[31] ,TRUSTEE_IS_IMPERSONATE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[32] ,TRUSTEE_IS_SID));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[33] ,TRUSTEE_IS_NAME));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[34] ,TRUSTEE_BAD_FORM));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[35] ,TRUSTEE_IS_UNKNOWN));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[36] ,TRUSTEE_IS_USER));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[37] ,TRUSTEE_IS_GROUP));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[38] ,TRUSTEE_IS_DOMAIN));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[39] ,TRUSTEE_IS_ALIAS));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[40] ,TRUSTEE_IS_WELL_KNOWN_GROUP));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[41] ,TRUSTEE_IS_DELETED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[42] ,TRUSTEE_IS_INVALID));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[43] ,NOT_USED_ACCESS));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[44] ,GRANT_ACCESS));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[45] ,SET_ACCESS));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[46] ,DENY_ACCESS));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[47] ,REVOKE_ACCESS));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[48] ,SET_AUDIT_SUCCESS));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[49] ,SET_AUDIT_FAILURE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[50] ,DBPROMPTOPTIONS_NONE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[51] ,DBPROMPTOPTIONS_WIZARDSHEET));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[52] ,DBPROMPTOPTIONS_PROPERTYSHEET));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[53] ,DBPROMPTOPTIONS_BROWSEONLY));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[54] ,DBPROMPTOPTIONS_DISABLE_PROVIDER_SELECTION));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[55] ,FACILITY_WINDOWS));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[56] ,FACILITY_ITF));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[57] ,STATUS_SEVERITY_SUCCESS));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[58] ,STATUS_SEVERITY_COERROR));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[59] ,DB_E_BOGUS));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[60] ,DB_E_BADACCESSORHANDLE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[61] ,DB_E_ROWLIMITEXCEEDED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[62] ,DB_E_READONLYACCESSOR));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[63] ,DB_E_SCHEMAVIOLATION));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[64] ,DB_E_BADROWHANDLE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[65] ,DB_E_OBJECTOPEN));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[66] ,DB_E_BADCHAPTER));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[67] ,DB_E_CANTCONVERTVALUE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[68] ,DB_E_BADBINDINFO));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[69] ,DB_SEC_E_PERMISSIONDENIED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[70] ,DB_E_NOTAREFERENCECOLUMN));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[71] ,DB_E_LIMITREJECTED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[72] ,DB_E_NOCOMMAND));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[73] ,DB_E_COSTLIMIT));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[74] ,DB_E_BADBOOKMARK));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[75] ,DB_E_BADLOCKMODE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[76] ,DB_E_PARAMNOTOPTIONAL));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[77] ,DB_E_BADCOLUMNID));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[78] ,DB_E_BADRATIO));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[79] ,DB_E_BADVALUES));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[80] ,DB_E_ERRORSINCOMMAND));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[81] ,DB_E_CANTCANCEL));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[82] ,DB_E_DIALECTNOTSUPPORTED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[83] ,DB_E_DUPLICATEDATASOURCE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[84] ,DB_E_CANNOTRESTART));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[85] ,DB_E_NOTFOUND));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[86] ,DB_E_NEWLYINSERTED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[87] ,DB_E_CANNOTFREE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[88] ,DB_E_GOALREJECTED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[89] ,DB_E_UNSUPPORTEDCONVERSION));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[90] ,DB_E_BADSTARTPOSITION));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[91] ,DB_E_NOQUERY));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[92] ,DB_E_NOTREENTRANT));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[93] ,DB_E_ERRORSOCCURRED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[94] ,DB_E_NOAGGREGATION));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[95] ,DB_E_DELETEDROW));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[96] ,DB_E_CANTFETCHBACKWARDS));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[97] ,DB_E_ROWSNOTRELEASED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[98] ,DB_E_BADSTORAGEFLAG));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[99] ,DB_E_BADCOMPAREOP));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[100] ,DB_E_BADSTATUSVALUE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[101] ,DB_E_CANTSCROLLBACKWARDS));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[102] ,DB_E_BADREGIONHANDLE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[103] ,DB_E_NONCONTIGUOUSRANGE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[104] ,DB_E_INVALIDTRANSITION));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[105] ,DB_E_NOTASUBREGION));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[106] ,DB_E_MULTIPLESTATEMENTS));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[107] ,DB_E_INTEGRITYVIOLATION));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[108] ,DB_E_BADTYPENAME));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[109] ,DB_E_ABORTLIMITREACHED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[110] ,DB_E_ROWSETINCOMMAND));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[111] ,DB_E_CANTTRANSLATE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[112] ,DB_E_DUPLICATEINDEXID));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[113] ,DB_E_NOINDEX));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[114] ,DB_E_INDEXINUSE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[115] ,DB_E_NOTABLE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[116] ,DB_E_CONCURRENCYVIOLATION));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[117] ,DB_E_BADCOPY));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[118] ,DB_E_BADPRECISION));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[119] ,DB_E_BADSCALE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[120] ,DB_E_BADTABLEID));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[121] ,DB_E_BADID));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[122] ,DB_E_BADTYPE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[123] ,DB_E_DUPLICATECOLUMNID));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[124] ,DB_E_DUPLICATETABLEID));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[125] ,DB_E_TABLEINUSE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[126] ,DB_E_NOLOCALE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[127] ,DB_E_BADRECORDNUM));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[128] ,DB_E_BOOKMARKSKIPPED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[129] ,DB_E_BADPROPERTYVALUE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[130] ,DB_E_INVALID));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[131] ,DB_E_BADACCESSORFLAGS));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[132] ,DB_E_BADSTORAGEFLAGS));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[133] ,DB_E_BYREFACCESSORNOTSUPPORTED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[134] ,DB_E_NULLACCESSORNOTSUPPORTED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[135] ,DB_E_NOTPREPARED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[136] ,DB_E_BADACCESSORTYPE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[137] ,DB_E_WRITEONLYACCESSOR));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[138] ,DB_SEC_E_AUTH_FAILED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[139] ,DB_E_CANCELED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[140] ,DB_E_CHAPTERNOTRELEASED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[141] ,DB_E_BADSOURCEHANDLE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[142] ,DB_E_PARAMUNAVAILABLE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[143] ,DB_E_ALREADYINITIALIZED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[144] ,DB_E_NOTSUPPORTED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[145] ,DB_E_MAXPENDCHANGESEXCEEDED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[146] ,DB_E_BADORDINAL));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[147] ,DB_E_PENDINGCHANGES));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[148] ,DB_E_DATAOVERFLOW));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[149] ,DB_E_BADHRESULT));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[150] ,DB_E_BADLOOKUPID));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[151] ,DB_E_BADDYNAMICERRORID));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[152] ,DB_E_PENDINGINSERT));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[153] ,DB_E_BADCONVERTFLAG));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[154] ,DB_E_BADPARAMETERNAME));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[155] ,DB_E_MULTIPLESTORAGE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[156] ,DB_E_CANTFILTER));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[157] ,DB_E_CANTORDER));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[158] ,MD_E_BADTUPLE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[159] ,MD_E_BADCOORDINATE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[160] ,MD_E_INVALIDAXIS));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[161] ,MD_E_INVALIDCELLRANGE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[162] ,DB_E_NOCOLUMN));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[163] ,DB_E_COMMANDNOTPERSISTED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[164] ,DB_E_DUPLICATEID));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[165] ,DB_E_OBJECTCREATIONLIMITREACHED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[166] ,DB_E_BADINDEXID));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[167] ,DB_E_BADINITSTRING));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[168] ,DB_E_NOPROVIDERSREGISTERED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[169] ,DB_E_MISMATCHEDPROVIDER));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[170] ,SEC_E_BADTRUSTEEID));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[171] ,SEC_E_NOTRUSTEEID));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[172] ,SEC_E_NOMEMBERSHIPSUPPORT));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[173] ,SEC_E_INVALIDOBJECT));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[174] ,SEC_E_NOOWNER));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[175] ,SEC_E_INVALIDACCESSENTRYLIST));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[176] ,SEC_E_INVALIDOWNER));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[177] ,SEC_E_INVALIDACCESSENTRY));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[178] ,SEC_E_PERMISSIONDENIED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[179] ,DB_S_ROWLIMITEXCEEDED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[180] ,DB_S_COLUMNTYPEMISMATCH));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[181] ,DB_S_TYPEINFOOVERRIDDEN));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[182] ,DB_S_BOOKMARKSKIPPED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[183] ,DB_S_NONEXTROWSET));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[184] ,DB_S_ENDOFROWSET));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[185] ,DB_S_COMMANDREEXECUTED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[186] ,DB_S_BUFFERFULL));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[187] ,DB_S_NORESULT));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[188] ,DB_S_CANTRELEASE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[189] ,DB_S_GOALCHANGED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[190] ,DB_S_UNWANTEDOPERATION));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[191] ,DB_S_DIALECTIGNORED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[192] ,DB_S_UNWANTEDPHASE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[193] ,DB_S_UNWANTEDREASON));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[194] ,DB_S_ASYNCHRONOUS));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[195] ,DB_S_COLUMNSCHANGED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[196] ,DB_S_ERRORSRETURNED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[197] ,DB_S_BADROWHANDLE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[198] ,DB_S_DELETEDROW));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[199] ,DB_S_TOOMANYCHANGES));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[200] ,DB_S_STOPLIMITREACHED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[201] ,DB_S_LOCKUPGRADED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[202] ,DB_S_PROPERTIESCHANGED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[203] ,DB_S_ERRORSOCCURRED));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[204] ,DB_S_PARAMUNAVAILABLE));
__RegisteredConstsList3.Add(RegisterConst(__ConstNames3[205] ,DB_S_MULTIPLECHANGES));
end;

procedure __UnregisterConsts3;
var i : integer;
begin
__RegisteredConstsList3.Free
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..70] of string = (
'BOID'
,'DB_NUMERIC'
,'DB_VARNUMERIC'
,'DBBINDEXT'
,'DBBINDING'
,'DBCOLUMNDESC'
,'DBCOLUMNINFO'
,'DBDATE'
,'DBFAILUREINFO'
,'DBFILETIME'
,'DBID'
,'DBIDGUID'
,'DBIDNAME'
,'DBINDEXCOLUMNDESC'
,'DBLITERALINFO'
,'DBOBJECT'
,'DBPARAMBINDINFO'
,'DBPARAMINFO'
,'DBPARAMS'
,'DBPROP'
,'DBPROPIDSET'
,'DBPROPINFO'
,'DBPROPINFOSET'
,'DBPROPSET'
,'DBTIME'
,'DBTIMESTAMP'
,'DBVECTOR'
,'ERRORINFO'
,'EXPLICIT_ACCESS_W'
,'MDAXISINFO'
,'SEC_OBJECT'
,'SEC_OBJECT_ELEMENT'
,'TBoid'
,'TDBBindExt'
,'TDBBinding'
,'TDBColumnDesc'
,'TDBColumnInfo'
,'TDBDate'
,'TDBFailureInfo'
,'TDBFileTime'
,'TDBID'
,'TDBIDGuid'
,'TDBIDName'
,'TDBIndexColumnDesc'
,'TDBLiteralInfo'
,'TDBNumeric'
,'TDBObject'
,'TDBParamBindInfo'
,'TDBParamInfo'
,'TDBParams'
,'TDBProp'
,'TDBPropIDSet'
,'TDBPropInfo'
,'TDBPropInfoSet'
,'TDBPropSet'
,'TDBTime'
,'TDBTimeStamp'
,'TDBVarNumeric'
,'TDBVector'
,'TErrorInfo'
,'TExplicitAccessW'
,'TMDAxisInfo'
,'TRUSTEE_W'
,'TSecObject'
,'TSecObjectElement'
,'TXActOpt'
,'TXactStats'
,'TXactTransInfo'
,'XACTOPT'
,'XACTSTATS'
,'XACTTRANSINFO'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_BOID_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_DB_NUMERIC_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_DB_VARNUMERIC_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(_DBBINDEXT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(_DBBINDING_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[5],Addr(_DBCOLUMNDESC_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[6],Addr(_DBCOLUMNINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[7],Addr(_DBDATE_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[8],Addr(_DBFAILUREINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[9],Addr(_DBFILETIME_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[10],Addr(_DBID_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[11],Addr(_DBIDGUID_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[12],Addr(_DBIDNAME_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[13],Addr(_DBINDEXCOLUMNDESC_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[14],Addr(_DBLITERALINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[15],Addr(_DBOBJECT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[16],Addr(_DBPARAMBINDINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[17],Addr(_DBPARAMINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[18],Addr(_DBPARAMS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[19],Addr(_DBPROP_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[20],Addr(_DBPROPIDSET_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[21],Addr(_DBPROPINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[22],Addr(_DBPROPINFOSET_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[23],Addr(_DBPROPSET_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[24],Addr(_DBTIME_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[25],Addr(_DBTIMESTAMP_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[26],Addr(_DBVECTOR_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[27],Addr(_ERRORINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[28],Addr(_EXPLICIT_ACCESS_W_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[29],Addr(_MDAXISINFO_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[30],Addr(_SEC_OBJECT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[31],Addr(_SEC_OBJECT_ELEMENT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[32],Addr(_TBoid_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[33],Addr(_TDBBindExt_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[34],Addr(_TDBBinding_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[35],Addr(_TDBColumnDesc_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[36],Addr(_TDBColumnInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[37],Addr(_TDBDate_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[38],Addr(_TDBFailureInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[39],Addr(_TDBFileTime_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[40],Addr(_TDBID_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[41],Addr(_TDBIDGuid_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[42],Addr(_TDBIDName_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[43],Addr(_TDBIndexColumnDesc_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[44],Addr(_TDBLiteralInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[45],Addr(_TDBNumeric_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[46],Addr(_TDBObject_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[47],Addr(_TDBParamBindInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[48],Addr(_TDBParamInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[49],Addr(_TDBParams_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[50],Addr(_TDBProp_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[51],Addr(_TDBPropIDSet_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[52],Addr(_TDBPropInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[53],Addr(_TDBPropInfoSet_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[54],Addr(_TDBPropSet_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[55],Addr(_TDBTime_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[56],Addr(_TDBTimeStamp_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[57],Addr(_TDBVarNumeric_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[58],Addr(_TDBVector_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[59],Addr(_TErrorInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[60],Addr(_TExplicitAccessW_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[61],Addr(_TMDAxisInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[62],Addr(_TRUSTEE_W_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[63],Addr(_TSecObject_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[64],Addr(_TSecObjectElement_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[65],Addr(_TXActOpt_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[66],Addr(_TXactStats_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[67],Addr(_TXactTransInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[68],Addr(_XACTOPT_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[69],Addr(_XACTSTATS_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[70],Addr(_XACTTRANSINFO_)));
end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterConsts1;
__RegisterConsts2;
__RegisterConsts3;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterConsts1;
__UnregisterConsts2;
__UnregisterConsts3;
__UnregisterProcs;
end.
