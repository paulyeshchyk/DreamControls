{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit SYSUTILS_D2006;
interface
{$I dc.inc}
//{$D-,L-,Y-}
//{$HINTS OFF}
//{$WARNINGS OFF}
uses
  Types,
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  SysConst,
  SysUtils;
function ConvertInt64RecToVariant(var R : Int64Rec) : OleVariant;
function ConvertVariantToInt64Rec(const V : OleVariant) : Int64Rec;
function ConvertLongRecToVariant(var R : LongRec) : OleVariant;
function ConvertVariantToLongRec(const V : OleVariant) : LongRec;
function ConvertTExceptionRecordToVariant(var R : TExceptionRecord) : OleVariant;
function ConvertVariantToTExceptionRecord(const V : OleVariant) : TExceptionRecord;
function ConvertTFloatRecToVariant(var R : TFloatRec) : OleVariant;
function ConvertVariantToTFloatRec(const V : OleVariant) : TFloatRec;
function ConvertTFormatSettingsToVariant(var R : TFormatSettings) : OleVariant;
function ConvertVariantToTFormatSettings(const V : OleVariant) : TFormatSettings;
function ConvertTGUIDToVariant(var R : TGUID) : OleVariant;
function ConvertVariantToTGUID(const V : OleVariant) : TGUID;
function ConvertTLangRecToVariant(var R : TLangRec) : OleVariant;
function ConvertVariantToTLangRec(const V : OleVariant) : TLangRec;
function ConvertTSearchRecToVariant(var R : TSearchRec) : OleVariant;
function ConvertVariantToTSearchRec(const V : OleVariant) : TSearchRec;
function ConvertTSysLocaleToVariant(var R : TSysLocale) : OleVariant;
function ConvertVariantToTSysLocale(const V : OleVariant) : TSysLocale;
function ConvertTSystemTimeToVariant(var R : TSystemTime) : OleVariant;
function ConvertVariantToTSystemTime(const V : OleVariant) : TSystemTime;
function ConvertTThreadInfoToVariant(var R : TThreadInfo) : OleVariant;
function ConvertVariantToTThreadInfo(const V : OleVariant) : TThreadInfo;
function ConvertTTimeStampToVariant(var R : TTimeStamp) : OleVariant;
function ConvertVariantToTTimeStamp(const V : OleVariant) : TTimeStamp;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TSysLocale__Wrapper = class(TDCRecordWrapper)
private
fR : TSysLocale;
public
function GetRecordPtr : pointer; override;
published
procedure setDefaultLCID(const val : Integer);
function getDefaultLCID : Integer;
property DefaultLCID : Integer read getDefaultLCID write setDefaultLCID;
procedure setPriLangID(const val : Integer);
function getPriLangID : Integer;
property PriLangID : Integer read getPriLangID write setPriLangID;
procedure setSubLangID(const val : Integer);
function getSubLangID : Integer;
property SubLangID : Integer read getSubLangID write setSubLangID;
procedure setFarEast(const val : Boolean);
function getFarEast : Boolean;
property FarEast : Boolean read getFarEast write setFarEast;
procedure setMiddleEast(const val : Boolean);
function getMiddleEast : Boolean;
property MiddleEast : Boolean read getMiddleEast write setMiddleEast;
end;
type __Int64Rec__Wrapper = class(TDCRecordWrapper)
private
fR : Int64Rec;
public
function GetRecordPtr : pointer; override;
published
procedure setLo(const val : Cardinal);
function getLo : Cardinal;
property Lo : Cardinal read getLo write setLo;
procedure setHi(const val : Cardinal);
function getHi : Cardinal;
property Hi : Cardinal read getHi write setHi;
end;
type __LongRec__Wrapper = class(TDCRecordWrapper)
private
fR : LongRec;
public
function GetRecordPtr : pointer; override;
published
procedure setLo(const val : Word);
function getLo : Word;
property Lo : Word read getLo write setLo;
procedure setHi(const val : Word);
function getHi : Word;
property Hi : Word read getHi write setHi;
end;
type __TExceptionRecord__Wrapper = class(TDCRecordWrapper)
private
fR : TExceptionRecord;
public
function GetRecordPtr : pointer; override;
published
procedure setExceptionCode(const val : Cardinal);
function getExceptionCode : Cardinal;
property ExceptionCode : Cardinal read getExceptionCode write setExceptionCode;
procedure setExceptionFlags(const val : Cardinal);
function getExceptionFlags : Cardinal;
property ExceptionFlags : Cardinal read getExceptionFlags write setExceptionFlags;
procedure setNumberParameters(const val : Cardinal);
function getNumberParameters : Cardinal;
property NumberParameters : Cardinal read getNumberParameters write setNumberParameters;
end;
type __TFloatRec__Wrapper = class(TDCRecordWrapper)
private
fR : TFloatRec;
public
function GetRecordPtr : pointer; override;
published
procedure setExponent(const val : SmallInt);
function getExponent : SmallInt;
property Exponent : SmallInt read getExponent write setExponent;
procedure setNegative(const val : Boolean);
function getNegative : Boolean;
property Negative : Boolean read getNegative write setNegative;
end;
type __TFormatSettings__Wrapper = class(TDCRecordWrapper)
private
fR : TFormatSettings;
public
function GetRecordPtr : pointer; override;
published
procedure setCurrencyFormat(const val : Byte);
function getCurrencyFormat : Byte;
property CurrencyFormat : Byte read getCurrencyFormat write setCurrencyFormat;
procedure setNegCurrFormat(const val : Byte);
function getNegCurrFormat : Byte;
property NegCurrFormat : Byte read getNegCurrFormat write setNegCurrFormat;
procedure setThousandSeparator(const val : Char);
function getThousandSeparator : Char;
property ThousandSeparator : Char read getThousandSeparator write setThousandSeparator;
procedure setDecimalSeparator(const val : Char);
function getDecimalSeparator : Char;
property DecimalSeparator : Char read getDecimalSeparator write setDecimalSeparator;
procedure setCurrencyDecimals(const val : Byte);
function getCurrencyDecimals : Byte;
property CurrencyDecimals : Byte read getCurrencyDecimals write setCurrencyDecimals;
procedure setDateSeparator(const val : Char);
function getDateSeparator : Char;
property DateSeparator : Char read getDateSeparator write setDateSeparator;
procedure setTimeSeparator(const val : Char);
function getTimeSeparator : Char;
property TimeSeparator : Char read getTimeSeparator write setTimeSeparator;
procedure setListSeparator(const val : Char);
function getListSeparator : Char;
property ListSeparator : Char read getListSeparator write setListSeparator;
procedure setCurrencyString(const val : AnsiString);
function getCurrencyString : AnsiString;
property CurrencyString : AnsiString read getCurrencyString write setCurrencyString;
procedure setShortDateFormat(const val : AnsiString);
function getShortDateFormat : AnsiString;
property ShortDateFormat : AnsiString read getShortDateFormat write setShortDateFormat;
procedure setLongDateFormat(const val : AnsiString);
function getLongDateFormat : AnsiString;
property LongDateFormat : AnsiString read getLongDateFormat write setLongDateFormat;
procedure setTimeAMString(const val : AnsiString);
function getTimeAMString : AnsiString;
property TimeAMString : AnsiString read getTimeAMString write setTimeAMString;
procedure setTimePMString(const val : AnsiString);
function getTimePMString : AnsiString;
property TimePMString : AnsiString read getTimePMString write setTimePMString;
procedure setShortTimeFormat(const val : AnsiString);
function getShortTimeFormat : AnsiString;
property ShortTimeFormat : AnsiString read getShortTimeFormat write setShortTimeFormat;
procedure setLongTimeFormat(const val : AnsiString);
function getLongTimeFormat : AnsiString;
property LongTimeFormat : AnsiString read getLongTimeFormat write setLongTimeFormat;
procedure setTwoDigitYearCenturyWindow(const val : Word);
function getTwoDigitYearCenturyWindow : Word;
property TwoDigitYearCenturyWindow : Word read getTwoDigitYearCenturyWindow write setTwoDigitYearCenturyWindow;
end;
type __TLangRec__Wrapper = class(TDCRecordWrapper)
private
fR : TLangRec;
public
function GetRecordPtr : pointer; override;
published
procedure setFName(const val : AnsiString);
function getFName : AnsiString;
property FName : AnsiString read getFName write setFName;
procedure setFLCID(const val : LCID);
function getFLCID : LCID;
property FLCID : LCID read getFLCID write setFLCID;
procedure setFExt(const val : AnsiString);
function getFExt : AnsiString;
property FExt : AnsiString read getFExt write setFExt;
end;
type __TSearchRec__Wrapper = class(TDCRecordWrapper)
private
fR : TSearchRec;
public
function GetRecordPtr : pointer; override;
published
procedure setTime(const val : Integer);
function getTime : Integer;
property Time : Integer read getTime write setTime;
procedure setAttr(const val : Integer);
function getAttr : Integer;
property Attr : Integer read getAttr write setAttr;
procedure setExcludeAttr(const val : Integer);
function getExcludeAttr : Integer;
property ExcludeAttr : Integer read getExcludeAttr write setExcludeAttr;
procedure setFindHandle(const val : THandle);
function getFindHandle : THandle;
property FindHandle : THandle read getFindHandle write setFindHandle;
end;
type __TThreadInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TThreadInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setThreadID(const val : Cardinal);
function getThreadID : Cardinal;
property ThreadID : Cardinal read getThreadID write setThreadID;
procedure setActive(const val : Integer);
function getActive : Integer;
property Active : Integer read getActive write setActive;
procedure setRecursionCount(const val : Cardinal);
function getRecursionCount : Cardinal;
property RecursionCount : Cardinal read getRecursionCount write setRecursionCount;
end;
type __TTimeStamp__Wrapper = class(TDCRecordWrapper)
private
fR : TTimeStamp;
public
function GetRecordPtr : pointer; override;
published
procedure setTime(const val : Integer);
function getTime : Integer;
property Time : Integer read getTime write setTime;
procedure setDate(const val : Integer);
function getDate : Integer;
property Date : Integer read getDate write setDate;
end;
type __TSystemTime__Wrapper = class(TDCRecordWrapper)
private
fR : TSystemTime;
public
function GetRecordPtr : pointer; override;
published
procedure setwYear(const val : Word);
function getwYear : Word;
property wYear : Word read getwYear write setwYear;
procedure setwMonth(const val : Word);
function getwMonth : Word;
property wMonth : Word read getwMonth write setwMonth;
procedure setwDayOfWeek(const val : Word);
function getwDayOfWeek : Word;
property wDayOfWeek : Word read getwDayOfWeek write setwDayOfWeek;
procedure setwDay(const val : Word);
function getwDay : Word;
property wDay : Word read getwDay write setwDay;
procedure setwHour(const val : Word);
function getwHour : Word;
property wHour : Word read getwHour write setwHour;
procedure setwMinute(const val : Word);
function getwMinute : Word;
property wMinute : Word read getwMinute write setwMinute;
procedure setwSecond(const val : Word);
function getwSecond : Word;
property wSecond : Word read getwSecond write setwSecond;
procedure setwMilliseconds(const val : Word);
function getwMilliseconds : Word;
property wMilliseconds : Word read getwMilliseconds write setwMilliseconds;
end;
type __TGUID__Wrapper = class(TDCRecordWrapper)
private
fR : TGUID;
public
function GetRecordPtr : pointer; override;
published
procedure setD1(const val : LongWord);
function getD1 : LongWord;
property D1 : LongWord read getD1 write setD1;
procedure setD2(const val : Word);
function getD2 : Word;
property D2 : Word read getD2 write setD2;
procedure setD3(const val : Word);
function getD3 : Word;
property D3 : Word read getD3 write setD3;
end;
type
_T0 = function (p0 : Integer;
p1 : Integer): Boolean of object;

_T1 = function (const p0 : string): Cardinal of object;

_T2 = function : TLanguages of object;

{_T3 = procedure (p0 : TProcedure) of object;}

_T4 = function (const p0 : string): PString of object;

_T5 = procedure (p0 : PString) of object;

_T6 = procedure (var p0 : PString;
const p1 : string) of object;

_T7 = procedure (var p0 : string;
const p1 : string) of object;

_T8 = function (const p0 : string): string of object;

_T9 = _T8;

_T10 = function (const p0 : string;
const p1 : string): Integer of object;

_T11 = function (const p0 : string;
const p1 : string): Boolean of object;

_T12 = function (p0 : Pointer;
p1 : Pointer;
p2 : Integer): Boolean of object;

_T13 = _T10;

_T14 = _T11;

_T15 = _T8;

_T16 = _T8;

_T17 = _T10;

_T18 = _T11;

_T19 = _T10;

_T20 = _T11;

{_T21 = function (p0 : PChar;
p1 : PChar): Integer of object;}

{_T22 = function (p0 : PChar;
p1 : PChar): Integer of object;}

{_T23 = function (p0 : PChar;
p1 : PChar;
p2 : Cardinal): Integer of object;}

{_T24 = function (p0 : PChar;
p1 : PChar;
p2 : Cardinal): Integer of object;}

{_T25 = function (p0 : PChar): PChar of object;}

{_T26 = function (p0 : PChar): PChar of object;}

_T27 = function (const p0 : string): PChar of object;

{_T28 = function (p0 : PChar): PChar of object;}

_T29 = function (const p0 : WideString): WideString of object;

_T30 = _T29;

_T31 = function (const p0 : WideString;
const p1 : WideString): Integer of object;

_T32 = function (const p0 : WideString;
const p1 : WideString): Boolean of object;

_T33 = _T31;

_T34 = _T32;

_T35 = _T8;

_T36 = _T8;

_T37 = _T8;

_T38 = _T8;

_T39 = function (const p0 : string;
p1 : Char): string of object;

{_T40 = function (var p0 : PChar;
p1 : Char): string of object;}

_T41 = _T39;

_T42 = function (const p0 : string;
p1 : TTextLineBreakStyle): string of object;

_T43 = function (const p0 : string;
p1 : Boolean): Boolean of object;

_T44 = function (p0 : Integer): string of object;

_T45 = function (p0 : Integer;
p1 : Integer): string of object;

_T46 = function (const p0 : string): Integer of object;

_T47 = function (const p0 : string;
p1 : Integer): Integer of object;

_T48 = function (const p0 : string;
var p1 : Integer): Boolean of object;

{_T49 = function (const p0 : string): Int64 of object;}

{_T50 = function (const p0 : string;
const p1 : Int64): Int64 of object;}

{_T51 = function (const p0 : string;
out p1 : Int64): Boolean of object;}

_T52 = function (const p0 : string): Boolean of object;

_T53 = function (const p0 : string;
const p1 : Boolean): Boolean of object;

_T54 = function (const p0 : string;
var p1 : Boolean): Boolean of object;

_T55 = function (p0 : Boolean;
p1 : Boolean): string of object;

_T56 = _T44;

_T57 = function (p0 : Integer;
const p1 : Array of Const): string of object;

_T58 = function (const p0 : string;
p1 : LongWord): Integer of object;

_T59 = _T46;

_T60 = function (p0 : Integer;
var p1 : Integer;
p2 : LongWord): Integer of object;

_T61 = function (p0 : Integer;
const p1 : Integer;
p2 : LongWord): Integer of object;

_T62 = function (p0 : Integer;
p1 : Integer;
p2 : Integer): Integer of object;

_T63 = procedure (p0 : Integer) of object;

_T64 = _T46;

_T65 = _T52;

_T66 = _T52;

_T67 = function (p0 : string): Boolean of object;

_T68 = function (const p0 : string;
p1 : Integer;
const p2 : IDispatch): Integer of object;

_T69 = function (const p0 : IDispatch): Integer of object;

_T70 = procedure (const p0 : IDispatch) of object;

_T71 = function (p0 : Integer): Integer of object;

_T72 = _T47;

_T73 = _T46;

_T74 = _T47;

_T75 = _T52;

_T76 = _T43;

_T77 = _T52;

_T78 = _T11;

_T79 = _T52;

_T80 = function (const p0 : string;
const p1 : string): string of object;

_T81 = _T80;

_T82 = _T8;

_T83 = _T8;

_T84 = _T8;

_T85 = _T8;

_T86 = _T8;

_T87 = _T8;

_T88 = function (const p0 : string;
var p1 : TFilenameCaseMatch): string of object;

_T89 = _T8;

_T90 = _T80;

_T91 = _T8;

_T92 = _T80;

{_T93 = function (p0 : Byte): Int64 of object;}

{_T94 = function (p0 : Byte): Int64 of object;}

_T95 = function (p0 : Integer): TDateTime of object;

_T96 = function (p0 : TDateTime): Integer of object;

_T97 = function : string of object;

_T98 = _T52;

_T99 = _T52;

_T100 = _T52;

{_T101 = function (const p0 : PChar): Cardinal of object;}

{_T102 = function (const p0 : PChar): PChar of object;}

{_T103 = function (p0 : PChar;
const p1 : PChar;
p2 : Cardinal): PChar of object;}

{_T104 = function (p0 : PChar;
const p1 : PChar): PChar of object;}

{_T105 = function (p0 : PChar;
const p1 : PChar): PChar of object;}

{_T106 = function (p0 : PChar;
const p1 : PChar;
p2 : Cardinal): PChar of object;}

{_T107 = function (p0 : PChar;
const p1 : string): PChar of object;}

{_T108 = function (p0 : PChar;
const p1 : string;
p2 : Cardinal): PChar of object;}

{_T109 = function (p0 : PChar;
const p1 : PChar): PChar of object;}

{_T110 = function (p0 : PChar;
const p1 : PChar;
p2 : Cardinal): PChar of object;}

{_T111 = function (const p0 : PChar;
const p1 : PChar): Integer of object;}

{_T112 = function (const p0 : PChar;
const p1 : PChar): Integer of object;}

{_T113 = function (const p0 : PChar;
const p1 : PChar;
p2 : Cardinal): Integer of object;}

{_T114 = function (const p0 : PChar;
const p1 : PChar;
p2 : Cardinal): Integer of object;}

{_T115 = function (const p0 : PChar;
p1 : Char): PChar of object;}

{_T116 = function (const p0 : PChar;
p1 : Char): PChar of object;}

{_T117 = function (const p0 : PChar;
const p1 : PChar): PChar of object;}

{_T118 = function (p0 : PChar): PChar of object;}

{_T119 = function (p0 : PChar): PChar of object;}

{_T120 = function (const p0 : PChar): string of object;}

_T121 = function (p0 : Cardinal): PChar of object;

{_T122 = function (const p0 : PChar): Cardinal of object;}

{_T123 = function (const p0 : PChar): PChar of object;}

{_T124 = procedure (p0 : PChar) of object;}

_T125 = function (const p0 : string;
const p1 : Array of Const): string of object;

_T126 = procedure (var p0 : string;
const p1 : string;
const p2 : Array of Const) of object;

{_T127 = function (p0 : PChar;
p1 : PChar;
const p2 : Array of Const): PChar of object;}

{_T128 = function (p0 : PChar;
p1 : Cardinal;
p2 : PChar;
const p3 : Array of Const): PChar of object;}

_T129 = function (var p0;
p1 : Cardinal;
const p2 : Cardinal;
p3 : Cardinal;
const p4 : Array of Const): Cardinal of object;

_T130 = function (const p0 : WideString;
const p1 : Array of Const): WideString of object;

_T131 = procedure (var p0 : WideString;
const p1 : WideString;
const p2 : Array of Const) of object;

_T132 = _T129;

_T133 = function (p0 : Extended): string of object;

_T134 = function (p0 : Currency): string of object;

_T135 = function (const p0 : Extended): Currency of object;

_T136 = function (const p0 : Extended;
var p1 : Currency): Boolean of object;

_T137 = function (p0 : Extended;
p1 : TFloatFormat;
p2 : Integer;
p3 : Integer): string of object;

_T138 = function (p0 : Currency;
p1 : TFloatFormat;
p2 : Integer): string of object;

{_T139 = function (p0 : PChar;
const p1 : PChar;
p2 : TFloatValue;
p3 : TFloatFormat;
p4 : Integer;
p5 : Integer): Integer of object;}

_T140 = function (const p0 : string;
p1 : Extended): string of object;

_T141 = function (const p0 : string;
p1 : Currency): string of object;

{_T142 = function (p0 : PChar;
const p1 : PChar;
p2 : TFloatValue;
p3 : PChar): Integer of object;}

_T143 = function (const p0 : string): Extended of object;

_T144 = function (const p0 : string;
const p1 : Extended): Extended of object;

_T145 = function (const p0 : string;
var p1 : Extended): Boolean of object;

_T146 = function (const p0 : string): Currency of object;

_T147 = function (const p0 : string;
const p1 : Currency): Currency of object;

_T148 = function (const p0 : string;
var p1 : Currency): Boolean of object;

{_T149 = function (p0 : PChar;
var p1 : PChar;
p2 : TFloatValue): Boolean of object;}

_T150 = procedure (const p0 : IDispatch;
const p1 : IDispatch;
p2 : TFloatValue;
p3 : Integer;
p4 : Integer) of object;

_T151 = function (p0 : TDateTime): IDispatch of object;

_T152 = function (const p0 : IDispatch): TDateTime of object;

_T153 = function (p0 : Comp): IDispatch of object;

_T154 = function (const p0 : IDispatch): Comp of object;

_T155 = function (p0 : Word;
p1 : Word;
p2 : Word): TDateTime of object;

_T156 = function (p0 : Word;
p1 : Word;
p2 : Word;
p3 : Word): TDateTime of object;

_T157 = function (p0 : Word;
p1 : Word;
p2 : Word;
var p3 : TDateTime): Boolean of object;

_T158 = function (p0 : Word;
p1 : Word;
p2 : Word;
p3 : Word;
var p4 : TDateTime): Boolean of object;

_T159 = procedure (const p0 : TDateTime;
var p1 : Word;
var p2 : Word;
var p3 : Word) of object;

_T160 = function (const p0 : TDateTime;
var p1 : Word;
var p2 : Word;
var p3 : Word;
var p4 : Word): Boolean of object;

_T161 = procedure (const p0 : TDateTime;
var p1 : Word;
var p2 : Word;
var p3 : Word;
var p4 : Word) of object;

_T162 = procedure (const p0 : TDateTime;
const p1 : IDispatch) of object;

_T163 = _T152;

_T164 = function (const p0 : TDateTime): Word of object;

_T165 = function : TDateTime of object;

_T166 = _T165;

_T167 = _T165;

_T168 = _T165;

_T169 = function : Word of object;

_T170 = function (const p0 : TDateTime;
p1 : Integer): TDateTime of object;

_T172 = procedure (var p0 : TDateTime;
const p1 : TDateTime) of object;

_T173 = _T172;

_T174 = function (p0 : Word): Boolean of object;

_T175 = function (const p0 : TDateTime): string of object;

_T176 = _T175;

_T177 = _T175;

_T178 = function (const p0 : string): TDateTime of object;

_T179 = function (const p0 : string;
const p1 : TDateTime): TDateTime of object;

_T180 = function (const p0 : string;
var p1 : TDateTime): Boolean of object;

_T181 = _T178;

_T182 = _T179;

_T183 = _T180;

_T184 = _T178;

_T185 = _T179;

_T186 = _T180;

_T187 = function (const p0 : string;
p1 : TDateTime): string of object;

_T188 = procedure (var p0 : string;
const p1 : string;
p2 : TDateTime) of object;

_T189 = function (const p0 : Extended): TDateTime of object;

_T190 = function (const p0 : Extended;
var p1 : TDateTime): Boolean of object;

_T191 = _T44;

_T192 = function (p0 : Integer;
p1 : Integer;
const p2 : string): string of object;

_T193 = function (p0 : Integer;
p1 : Integer;
p2 : Char): Char of object;

_T194 = procedure  of object;

_T195 = procedure (p0 : Integer;
const p1 : IDispatch) of object;

_T196 = procedure (p0 : Cardinal) of object;

_T197 = function (p0 : HMODULE): string of object;

{_T198 = function (p0 : TObject;
p1 : Pointer;
p2 : PChar;
p3 : Integer): Integer of object;}

_T199 = procedure (p0 : TObject;
p1 : Pointer) of object;

_T200 = _T194;

_T201 = _T194;

_T202 = _T194;

_T203 = function (const p0 : string;
p1 : Integer): TMbcsByteType of object;

{_T204 = function (p0 : PChar;
p1 : Cardinal): TMbcsByteType of object;}

_T205 = _T47;

_T206 = _T47;

_T207 = _T47;

_T208 = _T47;

{_T209 = function (const p0 : PChar): Integer of object;}

{_T210 = function (const p0 : PChar): PChar of object;}

_T211 = _T47;

_T212 = _T47;

_T213 = function (const p0 : string;
p1 : Integer): Boolean of object;

_T214 = function (const p0 : string;
const p1 : string;
p2 : Integer): Boolean of object;

_T215 = _T8;

_T216 = _T8;

_T217 = _T8;

_T218 = _T8;

_T219 = _T10;

_T220 = _T10;

_T221 = _T11;

_T222 = _T8;

_T223 = _T8;

_T224 = _T10;

{_T225 = function (p0 : PChar;
p1 : PChar): PChar of object;}

{_T226 = function (p0 : PChar;
p1 : Char): PChar of object;}

{_T227 = function (p0 : PChar;
p1 : Char): PChar of object;}

_T228 = function (const p0 : string;
const p1 : string;
const p2 : string;
p3 : TReplaceFlags): string of object;

_T229 = function (const p0 : string;
const p1 : string;
const p2 : TSysCharSet;
p3 : Integer): string of object;

_T230 = function (const p0 : string;
const p1 : TSysCharSet;
p2 : Boolean): Boolean of object;

_T231 = procedure (var p0) of object;

_T233 = function (const p0 : IDispatch): HResult of object;

_T234 = function (const p0 : string): IDispatch of object;

_T235 = function (const p0 : IDispatch): string of object;

_T236 = function (const p0 : IDispatch;
const p1 : IDispatch): Boolean of object;

_T237 = function (const p0 : string): HMODULE of object;

_T238 = procedure (p0 : HMODULE) of object;

{_T239 = procedure (p0 : HMODULE;
p1 : Pointer;
var p2 : Integer;
p3 : TPackageInfoProc) of object;}

{_T240 = function (p0 : PChar): string of object;}

_T241 = _T238;

_T242 = _T238;

_T243 = _T194;

_T244 = _T194;

_T245 = function (p0 : BOOL): BOOL of object;

{_T246 = procedure (p0 : TTerminateProc) of object;}

_T247 = function : Boolean of object;

_T248 = function : LongWord of object;

_T249 = _T194;

_T250 = _T194;

_T251 = function (const p0 : string;
p1 : UINT): HMODULE of object;

_T252 = procedure (const p0 : string) of object;

_T253 = procedure (const p0 : string;
const p1 : Array of Const) of object;

_T254 = _T63;

_T255 = procedure (p0 : Integer;
const p1 : Array of Const) of object;

_T256 = procedure (const p0 : string;
p1 : Integer) of object;

_T257 = procedure (const p0 : string;
const p1 : Array of Const;
p2 : Integer) of object;

_T258 = procedure (p0 : Integer;
p1 : Integer) of object;

{_T259 = procedure (p0 : PResStringRec;
const p1 : Array of Const;
p2 : Integer) of object;}

_T260 = _T194;

_T261 = function (p0 : LCID): Integer of object;

_T262 = _T194;

_T263 = _T194;

_T264 = _T194;

_T265 = _T247;

_T266 = _T194;

_T267 = _T194;

_T268 = _T194;

_T269 = _T194;

_T270 = _T247;

_T271 = _T194;

{_T272 = procedure (var p0 : PThreadInfo) of object;}

{_T273 = procedure (var p0 : PThreadInfo) of object;}

{_T274 = procedure (var p0 : PThreadInfo) of object;}

function __TSysLocale__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSysLocale__Wrapper.setDefaultLCID(const val : Integer);
begin
TSysLocale(GetRecordPtr^).DefaultLCID := val;
end;
function __TSysLocale__Wrapper.getDefaultLCID : Integer;
begin
result := TSysLocale(GetRecordPtr^).DefaultLCID;
end;
procedure __TSysLocale__Wrapper.setPriLangID(const val : Integer);
begin
TSysLocale(GetRecordPtr^).PriLangID := val;
end;
function __TSysLocale__Wrapper.getPriLangID : Integer;
begin
result := TSysLocale(GetRecordPtr^).PriLangID;
end;
procedure __TSysLocale__Wrapper.setSubLangID(const val : Integer);
begin
TSysLocale(GetRecordPtr^).SubLangID := val;
end;
function __TSysLocale__Wrapper.getSubLangID : Integer;
begin
result := TSysLocale(GetRecordPtr^).SubLangID;
end;
procedure __TSysLocale__Wrapper.setFarEast(const val : Boolean);
begin
TSysLocale(GetRecordPtr^).FarEast := val;
end;
function __TSysLocale__Wrapper.getFarEast : Boolean;
begin
result := TSysLocale(GetRecordPtr^).FarEast;
end;
procedure __TSysLocale__Wrapper.setMiddleEast(const val : Boolean);
begin
TSysLocale(GetRecordPtr^).MiddleEast := val;
end;
function __TSysLocale__Wrapper.getMiddleEast : Boolean;
begin
result := TSysLocale(GetRecordPtr^).MiddleEast;
end;
function __Int64Rec__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __Int64Rec__Wrapper.setLo(const val : Cardinal);
begin
Int64Rec(GetRecordPtr^).Lo := val;
end;
function __Int64Rec__Wrapper.getLo : Cardinal;
begin
result := Int64Rec(GetRecordPtr^).Lo;
end;
procedure __Int64Rec__Wrapper.setHi(const val : Cardinal);
begin
Int64Rec(GetRecordPtr^).Hi := val;
end;
function __Int64Rec__Wrapper.getHi : Cardinal;
begin
result := Int64Rec(GetRecordPtr^).Hi;
end;
function __LongRec__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __LongRec__Wrapper.setLo(const val : Word);
begin
LongRec(GetRecordPtr^).Lo := val;
end;
function __LongRec__Wrapper.getLo : Word;
begin
result := LongRec(GetRecordPtr^).Lo;
end;
procedure __LongRec__Wrapper.setHi(const val : Word);
begin
LongRec(GetRecordPtr^).Hi := val;
end;
function __LongRec__Wrapper.getHi : Word;
begin
result := LongRec(GetRecordPtr^).Hi;
end;
function __TExceptionRecord__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TExceptionRecord__Wrapper.setExceptionCode(const val : Cardinal);
begin
TExceptionRecord(GetRecordPtr^).ExceptionCode := val;
end;
function __TExceptionRecord__Wrapper.getExceptionCode : Cardinal;
begin
result := TExceptionRecord(GetRecordPtr^).ExceptionCode;
end;
procedure __TExceptionRecord__Wrapper.setExceptionFlags(const val : Cardinal);
begin
TExceptionRecord(GetRecordPtr^).ExceptionFlags := val;
end;
function __TExceptionRecord__Wrapper.getExceptionFlags : Cardinal;
begin
result := TExceptionRecord(GetRecordPtr^).ExceptionFlags;
end;
procedure __TExceptionRecord__Wrapper.setNumberParameters(const val : Cardinal);
begin
TExceptionRecord(GetRecordPtr^).NumberParameters := val;
end;
function __TExceptionRecord__Wrapper.getNumberParameters : Cardinal;
begin
result := TExceptionRecord(GetRecordPtr^).NumberParameters;
end;
function __TFloatRec__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TFloatRec__Wrapper.setExponent(const val : SmallInt);
begin
TFloatRec(GetRecordPtr^).Exponent := val;
end;
function __TFloatRec__Wrapper.getExponent : SmallInt;
begin
result := TFloatRec(GetRecordPtr^).Exponent;
end;
procedure __TFloatRec__Wrapper.setNegative(const val : Boolean);
begin
TFloatRec(GetRecordPtr^).Negative := val;
end;
function __TFloatRec__Wrapper.getNegative : Boolean;
begin
result := TFloatRec(GetRecordPtr^).Negative;
end;
function __TFormatSettings__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TFormatSettings__Wrapper.setCurrencyFormat(const val : Byte);
begin
TFormatSettings(GetRecordPtr^).CurrencyFormat := val;
end;
function __TFormatSettings__Wrapper.getCurrencyFormat : Byte;
begin
result := TFormatSettings(GetRecordPtr^).CurrencyFormat;
end;
procedure __TFormatSettings__Wrapper.setNegCurrFormat(const val : Byte);
begin
TFormatSettings(GetRecordPtr^).NegCurrFormat := val;
end;
function __TFormatSettings__Wrapper.getNegCurrFormat : Byte;
begin
result := TFormatSettings(GetRecordPtr^).NegCurrFormat;
end;
procedure __TFormatSettings__Wrapper.setThousandSeparator(const val : Char);
begin
TFormatSettings(GetRecordPtr^).ThousandSeparator := val;
end;
function __TFormatSettings__Wrapper.getThousandSeparator : Char;
begin
result := TFormatSettings(GetRecordPtr^).ThousandSeparator;
end;
procedure __TFormatSettings__Wrapper.setDecimalSeparator(const val : Char);
begin
TFormatSettings(GetRecordPtr^).DecimalSeparator := val;
end;
function __TFormatSettings__Wrapper.getDecimalSeparator : Char;
begin
result := TFormatSettings(GetRecordPtr^).DecimalSeparator;
end;
procedure __TFormatSettings__Wrapper.setCurrencyDecimals(const val : Byte);
begin
TFormatSettings(GetRecordPtr^).CurrencyDecimals := val;
end;
function __TFormatSettings__Wrapper.getCurrencyDecimals : Byte;
begin
result := TFormatSettings(GetRecordPtr^).CurrencyDecimals;
end;
procedure __TFormatSettings__Wrapper.setDateSeparator(const val : Char);
begin
TFormatSettings(GetRecordPtr^).DateSeparator := val;
end;
function __TFormatSettings__Wrapper.getDateSeparator : Char;
begin
result := TFormatSettings(GetRecordPtr^).DateSeparator;
end;
procedure __TFormatSettings__Wrapper.setTimeSeparator(const val : Char);
begin
TFormatSettings(GetRecordPtr^).TimeSeparator := val;
end;
function __TFormatSettings__Wrapper.getTimeSeparator : Char;
begin
result := TFormatSettings(GetRecordPtr^).TimeSeparator;
end;
procedure __TFormatSettings__Wrapper.setListSeparator(const val : Char);
begin
TFormatSettings(GetRecordPtr^).ListSeparator := val;
end;
function __TFormatSettings__Wrapper.getListSeparator : Char;
begin
result := TFormatSettings(GetRecordPtr^).ListSeparator;
end;
procedure __TFormatSettings__Wrapper.setCurrencyString(const val : AnsiString);
begin
TFormatSettings(GetRecordPtr^).CurrencyString := val;
end;
function __TFormatSettings__Wrapper.getCurrencyString : AnsiString;
begin
result := TFormatSettings(GetRecordPtr^).CurrencyString;
end;
procedure __TFormatSettings__Wrapper.setShortDateFormat(const val : AnsiString);
begin
TFormatSettings(GetRecordPtr^).ShortDateFormat := val;
end;
function __TFormatSettings__Wrapper.getShortDateFormat : AnsiString;
begin
result := TFormatSettings(GetRecordPtr^).ShortDateFormat;
end;
procedure __TFormatSettings__Wrapper.setLongDateFormat(const val : AnsiString);
begin
TFormatSettings(GetRecordPtr^).LongDateFormat := val;
end;
function __TFormatSettings__Wrapper.getLongDateFormat : AnsiString;
begin
result := TFormatSettings(GetRecordPtr^).LongDateFormat;
end;
procedure __TFormatSettings__Wrapper.setTimeAMString(const val : AnsiString);
begin
TFormatSettings(GetRecordPtr^).TimeAMString := val;
end;
function __TFormatSettings__Wrapper.getTimeAMString : AnsiString;
begin
result := TFormatSettings(GetRecordPtr^).TimeAMString;
end;
procedure __TFormatSettings__Wrapper.setTimePMString(const val : AnsiString);
begin
TFormatSettings(GetRecordPtr^).TimePMString := val;
end;
function __TFormatSettings__Wrapper.getTimePMString : AnsiString;
begin
result := TFormatSettings(GetRecordPtr^).TimePMString;
end;
procedure __TFormatSettings__Wrapper.setShortTimeFormat(const val : AnsiString);
begin
TFormatSettings(GetRecordPtr^).ShortTimeFormat := val;
end;
function __TFormatSettings__Wrapper.getShortTimeFormat : AnsiString;
begin
result := TFormatSettings(GetRecordPtr^).ShortTimeFormat;
end;
procedure __TFormatSettings__Wrapper.setLongTimeFormat(const val : AnsiString);
begin
TFormatSettings(GetRecordPtr^).LongTimeFormat := val;
end;
function __TFormatSettings__Wrapper.getLongTimeFormat : AnsiString;
begin
result := TFormatSettings(GetRecordPtr^).LongTimeFormat;
end;
procedure __TFormatSettings__Wrapper.setTwoDigitYearCenturyWindow(const val : Word);
begin
TFormatSettings(GetRecordPtr^).TwoDigitYearCenturyWindow := val;
end;
function __TFormatSettings__Wrapper.getTwoDigitYearCenturyWindow : Word;
begin
result := TFormatSettings(GetRecordPtr^).TwoDigitYearCenturyWindow;
end;
function __TLangRec__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TLangRec__Wrapper.setFName(const val : AnsiString);
begin
TLangRec(GetRecordPtr^).FName := val;
end;
function __TLangRec__Wrapper.getFName : AnsiString;
begin
result := TLangRec(GetRecordPtr^).FName;
end;
procedure __TLangRec__Wrapper.setFLCID(const val : LCID);
begin
TLangRec(GetRecordPtr^).FLCID := val;
end;
function __TLangRec__Wrapper.getFLCID : LCID;
begin
result := TLangRec(GetRecordPtr^).FLCID;
end;
procedure __TLangRec__Wrapper.setFExt(const val : AnsiString);
begin
TLangRec(GetRecordPtr^).FExt := val;
end;
function __TLangRec__Wrapper.getFExt : AnsiString;
begin
result := TLangRec(GetRecordPtr^).FExt;
end;
function __TSearchRec__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSearchRec__Wrapper.setTime(const val : Integer);
begin
TSearchRec(GetRecordPtr^).Time := val;
end;
function __TSearchRec__Wrapper.getTime : Integer;
begin
result := TSearchRec(GetRecordPtr^).Time;
end;
procedure __TSearchRec__Wrapper.setAttr(const val : Integer);
begin
TSearchRec(GetRecordPtr^).Attr := val;
end;
function __TSearchRec__Wrapper.getAttr : Integer;
begin
result := TSearchRec(GetRecordPtr^).Attr;
end;
procedure __TSearchRec__Wrapper.setExcludeAttr(const val : Integer);
begin
TSearchRec(GetRecordPtr^).ExcludeAttr := val;
end;
function __TSearchRec__Wrapper.getExcludeAttr : Integer;
begin
result := TSearchRec(GetRecordPtr^).ExcludeAttr;
end;
procedure __TSearchRec__Wrapper.setFindHandle(const val : THandle);
begin
TSearchRec(GetRecordPtr^).FindHandle := val;
end;
function __TSearchRec__Wrapper.getFindHandle : THandle;
begin
result := TSearchRec(GetRecordPtr^).FindHandle;
end;
function __TThreadInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TThreadInfo__Wrapper.setThreadID(const val : Cardinal);
begin
TThreadInfo(GetRecordPtr^).ThreadID := val;
end;
function __TThreadInfo__Wrapper.getThreadID : Cardinal;
begin
result := TThreadInfo(GetRecordPtr^).ThreadID;
end;
procedure __TThreadInfo__Wrapper.setActive(const val : Integer);
begin
TThreadInfo(GetRecordPtr^).Active := val;
end;
function __TThreadInfo__Wrapper.getActive : Integer;
begin
result := TThreadInfo(GetRecordPtr^).Active;
end;
procedure __TThreadInfo__Wrapper.setRecursionCount(const val : Cardinal);
begin
TThreadInfo(GetRecordPtr^).RecursionCount := val;
end;
function __TThreadInfo__Wrapper.getRecursionCount : Cardinal;
begin
result := TThreadInfo(GetRecordPtr^).RecursionCount;
end;
function __TTimeStamp__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTimeStamp__Wrapper.setTime(const val : Integer);
begin
TTimeStamp(GetRecordPtr^).Time := val;
end;
function __TTimeStamp__Wrapper.getTime : Integer;
begin
result := TTimeStamp(GetRecordPtr^).Time;
end;
procedure __TTimeStamp__Wrapper.setDate(const val : Integer);
begin
TTimeStamp(GetRecordPtr^).Date := val;
end;
function __TTimeStamp__Wrapper.getDate : Integer;
begin
result := TTimeStamp(GetRecordPtr^).Date;
end;
function _Int64Rec_ : IDispatch;
begin
  result := __Int64Rec__Wrapper.Create;
end;
function _LongRec_ : IDispatch;
begin
  result := __LongRec__Wrapper.Create;
end;
function _TExceptionRecord_ : IDispatch;
begin
  result := __TExceptionRecord__Wrapper.Create;
end;
function _TFloatRec_ : IDispatch;
begin
  result := __TFloatRec__Wrapper.Create;
end;
function _TFormatSettings_ : IDispatch;
begin
  result := __TFormatSettings__Wrapper.Create;
end;
function _TLangRec_ : IDispatch;
begin
  result := __TLangRec__Wrapper.Create;
end;
function _TSearchRec_ : IDispatch;
begin
  result := __TSearchRec__Wrapper.Create;
end;
function _TSysLocale_ : IDispatch;
begin
  result := __TSysLocale__Wrapper.Create;
end;
function _TThreadInfo_ : IDispatch;
begin
  result := __TThreadInfo__Wrapper.Create;
end;
function _TTimeStamp_ : IDispatch;
begin
  result := __TTimeStamp__Wrapper.Create;
end;
function __TSystemTime__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TSystemTime__Wrapper.setwYear(const val : Word);
begin
TSystemTime(GetRecordPtr^).wYear := val;
end;
function __TSystemTime__Wrapper.getwYear : Word;
begin
result := TSystemTime(GetRecordPtr^).wYear;
end;
procedure __TSystemTime__Wrapper.setwMonth(const val : Word);
begin
TSystemTime(GetRecordPtr^).wMonth := val;
end;
function __TSystemTime__Wrapper.getwMonth : Word;
begin
result := TSystemTime(GetRecordPtr^).wMonth;
end;
procedure __TSystemTime__Wrapper.setwDayOfWeek(const val : Word);
begin
TSystemTime(GetRecordPtr^).wDayOfWeek := val;
end;
function __TSystemTime__Wrapper.getwDayOfWeek : Word;
begin
result := TSystemTime(GetRecordPtr^).wDayOfWeek;
end;
procedure __TSystemTime__Wrapper.setwDay(const val : Word);
begin
TSystemTime(GetRecordPtr^).wDay := val;
end;
function __TSystemTime__Wrapper.getwDay : Word;
begin
result := TSystemTime(GetRecordPtr^).wDay;
end;
procedure __TSystemTime__Wrapper.setwHour(const val : Word);
begin
TSystemTime(GetRecordPtr^).wHour := val;
end;
function __TSystemTime__Wrapper.getwHour : Word;
begin
result := TSystemTime(GetRecordPtr^).wHour;
end;
procedure __TSystemTime__Wrapper.setwMinute(const val : Word);
begin
TSystemTime(GetRecordPtr^).wMinute := val;
end;
function __TSystemTime__Wrapper.getwMinute : Word;
begin
result := TSystemTime(GetRecordPtr^).wMinute;
end;
procedure __TSystemTime__Wrapper.setwSecond(const val : Word);
begin
TSystemTime(GetRecordPtr^).wSecond := val;
end;
function __TSystemTime__Wrapper.getwSecond : Word;
begin
result := TSystemTime(GetRecordPtr^).wSecond;
end;
procedure __TSystemTime__Wrapper.setwMilliseconds(const val : Word);
begin
TSystemTime(GetRecordPtr^).wMilliseconds := val;
end;
function __TSystemTime__Wrapper.getwMilliseconds : Word;
begin
result := TSystemTime(GetRecordPtr^).wMilliseconds;
end;
function __TGUID__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TGUID__Wrapper.setD1(const val : LongWord);
begin
TGUID(GetRecordPtr^).D1 := val;
end;
function __TGUID__Wrapper.getD1 : LongWord;
begin
result := TGUID(GetRecordPtr^).D1;
end;
procedure __TGUID__Wrapper.setD2(const val : Word);
begin
TGUID(GetRecordPtr^).D2 := val;
end;
function __TGUID__Wrapper.getD2 : Word;
begin
result := TGUID(GetRecordPtr^).D2;
end;
procedure __TGUID__Wrapper.setD3(const val : Word);
begin
TGUID(GetRecordPtr^).D3 := val;
end;
function __TGUID__Wrapper.getD3 : Word;
begin
result := TGUID(GetRecordPtr^).D3;
end;
function ____CheckWin32Version__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := CheckWin32Version(OleVariant(pargs^[0]));
end;
2:
begin
result := CheckWin32Version(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function ____AdjustLineBreaks__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := AdjustLineBreaks(OleVariant(pargs^[0]));
end;
2:
begin
result := AdjustLineBreaks(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function ____IsValidIdent__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := IsValidIdent(OleVariant(pargs^[0]));
end;
2:
begin
result := IsValidIdent(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function ____BoolToStr__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := BoolToStr(OleVariant(pargs^[0]));
end;
2:
begin
result := BoolToStr(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function ____FindFirst__Wrapper(const p0 : string;
p1 : Integer;
const p2 : IDispatch): Integer;
var
__p2 : ^TSearchRec;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := FindFirst(p0,p1,__p2^);
end;

function ____FindNext__Wrapper(const p0 : IDispatch): Integer;
var
__p0 : ^TSearchRec;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := FindNext(__p0^);
end;

procedure ____FindClose__Wrapper(const p0 : IDispatch);
var
__p0 : ^TSearchRec;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
FindClose(__p0^);
end;

procedure ____FloatToDecimal__Wrapper(const p0 : IDispatch;
const p1 : IDispatch;
p2 : TFloatValue;
p3 : Integer;
p4 : Integer);
var
__p0 : ^TFloatRec;
__i0 : IDispatch;
__p1 : ^TFloatRec;
__i1 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
FloatToDecimal(__p0^,__p1^,p2,p3,p4);
end;

function ____DateTimeToTimeStamp__Wrapper(p0 : TDateTime): IDispatch;
var
__result : TTimeStamp;
__wrapper : __TTimeStamp__Wrapper;
begin
__result := DateTimeToTimeStamp(p0);
__wrapper := __TTimeStamp__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

function ____TimeStampToDateTime__Wrapper(const p0 : IDispatch): TDateTime;
var
__p0 : ^TTimeStamp;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := TimeStampToDateTime(__p0^);
end;

function ____MSecsToTimeStamp__Wrapper(p0 : Comp): IDispatch;
var
__result : TTimeStamp;
__wrapper : __TTimeStamp__Wrapper;
begin
__result := MSecsToTimeStamp(p0);
__wrapper := __TTimeStamp__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

function ____TimeStampToMSecs__Wrapper(const p0 : IDispatch): Comp;
var
__p0 : ^TTimeStamp;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := TimeStampToMSecs(__p0^);
end;

procedure ____DateTimeToSystemTime__Wrapper(const p0 : TDateTime;
const p1 : IDispatch);
var
__p1 : ^TSystemTime;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
DateTimeToSystemTime(p0,__p1^);
end;

function ____SystemTimeToDateTime__Wrapper(const p0 : IDispatch): TDateTime;
var
__p0 : ^TSystemTime;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := SystemTimeToDateTime(__p0^);
end;

function ____IncMonth__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := IncMonth(OleVariant(pargs^[0]));
end;
2:
begin
result := IncMonth(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure ____GetLocaleFormatSettings__Wrapper(p0 : Integer;
const p1 : IDispatch);
var
__p1 : ^TFormatSettings;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
GetLocaleFormatSettings(p0,__p1^);
end;

function ____CreateGUID__Wrapper(const p0 : IDispatch): HResult;
var
__p0 : ^TGUID;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := CreateGUID(__p0^);
end;

function ____StringToGUID__Wrapper(const p0 : string): IDispatch;
var
__result : TGUID;
__wrapper : __TGUID__Wrapper;
begin
__result := StringToGUID(p0);
__wrapper := __TGUID__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

function ____GUIDToString__Wrapper(const p0 : IDispatch): string;
var
__p0 : ^TGUID;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := GUIDToString(__p0^);
end;

function ____IsEqualGUID__Wrapper(const p0 : IDispatch;
const p1 : IDispatch): Boolean;
var
__p0 : ^TGUID;
__i0 : IDispatch;
__p1 : ^TGUID;
__i1 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := IsEqualGUID(__p0^,__p1^);
end;

function ____SafeLoadLibrary__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := SafeLoadLibrary(OleVariant(pargs^[0]));
end;
2:
begin
result := SafeLoadLibrary(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;


type __Int64Rec__Wrapper__ = class(__Int64Rec__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __Int64Rec__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertInt64RecToVariant(var R : Int64Rec) : OleVariant;
var
__rw : __Int64Rec__Wrapper__;
begin
__rw := __Int64Rec__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToInt64Rec(const V : OleVariant) : Int64Rec;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := Int64Rec((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __LongRec__Wrapper__ = class(__LongRec__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __LongRec__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertLongRecToVariant(var R : LongRec) : OleVariant;
var
__rw : __LongRec__Wrapper__;
begin
__rw := __LongRec__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToLongRec(const V : OleVariant) : LongRec;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := LongRec((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TExceptionRecord__Wrapper__ = class(__TExceptionRecord__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TExceptionRecord__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTExceptionRecordToVariant(var R : TExceptionRecord) : OleVariant;
var
__rw : __TExceptionRecord__Wrapper__;
begin
__rw := __TExceptionRecord__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTExceptionRecord(const V : OleVariant) : TExceptionRecord;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TExceptionRecord((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TFloatRec__Wrapper__ = class(__TFloatRec__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TFloatRec__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTFloatRecToVariant(var R : TFloatRec) : OleVariant;
var
__rw : __TFloatRec__Wrapper__;
begin
__rw := __TFloatRec__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTFloatRec(const V : OleVariant) : TFloatRec;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TFloatRec((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TFormatSettings__Wrapper__ = class(__TFormatSettings__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TFormatSettings__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTFormatSettingsToVariant(var R : TFormatSettings) : OleVariant;
var
__rw : __TFormatSettings__Wrapper__;
begin
__rw := __TFormatSettings__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTFormatSettings(const V : OleVariant) : TFormatSettings;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TFormatSettings((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TGUID__Wrapper__ = class(__TGUID__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TGUID__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTGUIDToVariant(var R : TGUID) : OleVariant;
var
__rw : __TGUID__Wrapper__;
begin
__rw := __TGUID__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTGUID(const V : OleVariant) : TGUID;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TGUID((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TLangRec__Wrapper__ = class(__TLangRec__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TLangRec__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTLangRecToVariant(var R : TLangRec) : OleVariant;
var
__rw : __TLangRec__Wrapper__;
begin
__rw := __TLangRec__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTLangRec(const V : OleVariant) : TLangRec;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TLangRec((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSearchRec__Wrapper__ = class(__TSearchRec__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSearchRec__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSearchRecToVariant(var R : TSearchRec) : OleVariant;
var
__rw : __TSearchRec__Wrapper__;
begin
__rw := __TSearchRec__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSearchRec(const V : OleVariant) : TSearchRec;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSearchRec((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSysLocale__Wrapper__ = class(__TSysLocale__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSysLocale__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSysLocaleToVariant(var R : TSysLocale) : OleVariant;
var
__rw : __TSysLocale__Wrapper__;
begin
__rw := __TSysLocale__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSysLocale(const V : OleVariant) : TSysLocale;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSysLocale((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TSystemTime__Wrapper__ = class(__TSystemTime__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TSystemTime__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTSystemTimeToVariant(var R : TSystemTime) : OleVariant;
var
__rw : __TSystemTime__Wrapper__;
begin
__rw := __TSystemTime__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTSystemTime(const V : OleVariant) : TSystemTime;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TSystemTime((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TThreadInfo__Wrapper__ = class(__TThreadInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TThreadInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTThreadInfoToVariant(var R : TThreadInfo) : OleVariant;
var
__rw : __TThreadInfo__Wrapper__;
begin
__rw := __TThreadInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTThreadInfo(const V : OleVariant) : TThreadInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TThreadInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTimeStamp__Wrapper__ = class(__TTimeStamp__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTimeStamp__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTimeStampToVariant(var R : TTimeStamp) : OleVariant;
var
__rw : __TTimeStamp__Wrapper__;
begin
__rw := __TTimeStamp__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTimeStamp(const V : OleVariant) : TTimeStamp;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTimeStamp((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetException__HelpContext(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := Exception(Instance).HelpContext;
end;

procedure __DC__SetException__HelpContext(Instance : TObject; Params : PVariantArgList);
begin
Exception(Instance).HelpContext:=OleVariant(Params^[0]);
end;

function __DC__GetException__Message(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := Exception(Instance).Message;
end;

procedure __DC__SetException__Message(Instance : TObject; Params : PVariantArgList);
begin
Exception(Instance).Message:=OleVariant(Params^[0]);
end;

function __DC__GetTLanguages__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TLanguages(Instance).Count;
end;

function __DC__GetTLanguages__Name(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TLanguages(Instance).Name[OleVariant(Params^[0])];
end;

function __DC__GetTLanguages__NameFromLocaleID(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TLanguages(Instance).NameFromLocaleID[OleVariant(Params^[0])];
end;

function __DC__GetTLanguages__NameFromLCID(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TLanguages(Instance).NameFromLCID[OleVariant(Params^[0])];
end;

function __DC__GetTLanguages__ID(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TLanguages(Instance).ID[OleVariant(Params^[0])];
end;

function __DC__GetTLanguages__LocaleID(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TLanguages(Instance).LocaleID[OleVariant(Params^[0])];
end;

function __DC__GetTLanguages__Ext(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TLanguages(Instance).Ext[OleVariant(Params^[0])];
end;

function __DC__GetTMultiReadExclusiveWriteSynchronizer__RevisionLevel(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TMultiReadExclusiveWriteSynchronizer(Instance).RevisionLevel;
end;

procedure __RegisterProps;
begin
RegisterProperty(Exception,'HelpContext',__DC__GetException__HelpContext,__DC__SetException__HelpContext);
RegisterProperty(Exception,'Message',__DC__GetException__Message,__DC__SetException__Message);
RegisterProperty(TLanguages,'Count',__DC__GetTLanguages__Count,nil);
RegisterIndexedProperty(TLanguages,'Name',1,False,__DC__GetTLanguages__Name,nil);
RegisterIndexedProperty(TLanguages,'NameFromLocaleID',1,False,__DC__GetTLanguages__NameFromLocaleID,nil);
RegisterIndexedProperty(TLanguages,'NameFromLCID',1,False,__DC__GetTLanguages__NameFromLCID,nil);
RegisterIndexedProperty(TLanguages,'ID',1,False,__DC__GetTLanguages__ID,nil);
RegisterIndexedProperty(TLanguages,'LocaleID',1,False,__DC__GetTLanguages__LocaleID,nil);
RegisterIndexedProperty(TLanguages,'Ext',1,False,__DC__GetTLanguages__Ext,nil);
RegisterProperty(TMultiReadExclusiveWriteSynchronizer,'RevisionLevel',__DC__GetTMultiReadExclusiveWriteSynchronizer__RevisionLevel,nil);
end;

function __DC__GetSysUtils__EmptyStr(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysUtils.EmptyStr;
end;

procedure __DC__SetSysUtils__EmptyStr(Instance : TObject; Params : PVariantArgList);
begin
SysUtils.EmptyStr:=OleVariant(Params^[0]);
end;

function __DC__GetSysUtils__NullStr(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(SysUtils.NullStr);
end;

procedure __DC__SetSysUtils__NullStr(Instance : TObject; Params : PVariantArgList);
begin
SysUtils.NullStr:=VarToPointer(OleVariant(Params^[0]));
end;

function __DC__GetSysUtils__EmptyWideStr(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysUtils.EmptyWideStr;
end;

procedure __DC__SetSysUtils__EmptyWideStr(Instance : TObject; Params : PVariantArgList);
begin
SysUtils.EmptyWideStr:=OleVariant(Params^[0]);
end;

function __DC__GetSysUtils__NullWideStr(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(SysUtils.NullWideStr);
end;

procedure __DC__SetSysUtils__NullWideStr(Instance : TObject; Params : PVariantArgList);
begin
SysUtils.NullWideStr:=VarToPointer(OleVariant(Params^[0]));
end;

function __DC__GetSysUtils__Win32Platform(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysUtils.Win32Platform;
end;

procedure __DC__SetSysUtils__Win32Platform(Instance : TObject; Params : PVariantArgList);
begin
//SysUtils.Win32Platform:=OleVariant(Params^[0]);
end;

function __DC__GetSysUtils__Win32MajorVersion(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysUtils.Win32MajorVersion;
end;

procedure __DC__SetSysUtils__Win32MajorVersion(Instance : TObject; Params : PVariantArgList);
begin
//SysUtils.Win32MajorVersion:=OleVariant(Params^[0]);
end;

function __DC__GetSysUtils__Win32MinorVersion(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysUtils.Win32MinorVersion;
end;

procedure __DC__SetSysUtils__Win32MinorVersion(Instance : TObject; Params : PVariantArgList);
begin
//SysUtils.Win32MinorVersion:=OleVariant(Params^[0]);
end;

function __DC__GetSysUtils__Win32BuildNumber(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysUtils.Win32BuildNumber;
end;

procedure __DC__SetSysUtils__Win32BuildNumber(Instance : TObject; Params : PVariantArgList);
begin
//SysUtils.Win32BuildNumber:=OleVariant(Params^[0]);
end;

function __DC__GetSysUtils__Win32CSDVersion(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysUtils.Win32CSDVersion;
end;

procedure __DC__SetSysUtils__Win32CSDVersion(Instance : TObject; Params : PVariantArgList);
begin
//SysUtils.Win32CSDVersion:=OleVariant(Params^[0]);
end;

function __DC__GetSysUtils__CurrencyString(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysUtils.FormatSettings.CurrencyString;
end;

procedure __DC__SetSysUtils__CurrencyString(Instance : TObject; Params : PVariantArgList);
begin
SysUtils.FormatSettings.CurrencyString:=OleVariant(Params^[0]);
end;

function __DC__GetSysUtils__CurrencyFormat(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysUtils.FormatSettings.CurrencyFormat;
end;

procedure __DC__SetSysUtils__CurrencyFormat(Instance : TObject; Params : PVariantArgList);
begin
SysUtils.FormatSettings.CurrencyFormat:=OleVariant(Params^[0]);
end;

function __DC__GetSysUtils__NegCurrFormat(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysUtils.FormatSettings.NegCurrFormat;
end;

procedure __DC__SetSysUtils__NegCurrFormat(Instance : TObject; Params : PVariantArgList);
begin
SysUtils.FormatSettings.NegCurrFormat:=OleVariant(Params^[0]);
end;

function __DC__GetSysUtils__ThousandSeparator(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysUtils.FormatSettings.ThousandSeparator;
end;

procedure __DC__SetSysUtils__ThousandSeparator(Instance : TObject; Params : PVariantArgList);
begin
SysUtils.FormatSettings.ThousandSeparator:=VarToChar(OleVariant(Params^[0]));
end;

function __DC__GetSysUtils__DecimalSeparator(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysUtils.FormatSettings.DecimalSeparator;
end;

procedure __DC__SetSysUtils__DecimalSeparator(Instance : TObject; Params : PVariantArgList);
begin
SysUtils.FormatSettings.DecimalSeparator:=VarToChar(OleVariant(Params^[0]));
end;

function __DC__GetSysUtils__CurrencyDecimals(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysUtils.FormatSettings.CurrencyDecimals;
end;

procedure __DC__SetSysUtils__CurrencyDecimals(Instance : TObject; Params : PVariantArgList);
begin
SysUtils.FormatSettings.CurrencyDecimals:=OleVariant(Params^[0]);
end;

function __DC__GetSysUtils__DateSeparator(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysUtils.FormatSettings.DateSeparator;
end;

procedure __DC__SetSysUtils__DateSeparator(Instance : TObject; Params : PVariantArgList);
begin
SysUtils.FormatSettings.DateSeparator:=VarToChar(OleVariant(Params^[0]));
end;

function __DC__GetSysUtils__ShortDateFormat(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysUtils.FormatSettings.ShortDateFormat;
end;

procedure __DC__SetSysUtils__ShortDateFormat(Instance : TObject; Params : PVariantArgList);
begin
SysUtils.FormatSettings.ShortDateFormat:=OleVariant(Params^[0]);
end;

function __DC__GetSysUtils__LongDateFormat(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysUtils.FormatSettings.LongDateFormat;
end;

procedure __DC__SetSysUtils__LongDateFormat(Instance : TObject; Params : PVariantArgList);
begin
SysUtils.FormatSettings.LongDateFormat:=OleVariant(Params^[0]);
end;

function __DC__GetSysUtils__TimeSeparator(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysUtils.FormatSettings.TimeSeparator;
end;

procedure __DC__SetSysUtils__TimeSeparator(Instance : TObject; Params : PVariantArgList);
begin
SysUtils.FormatSettings.TimeSeparator:=VarToChar(OleVariant(Params^[0]));
end;

function __DC__GetSysUtils__TimeAMString(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysUtils.FormatSettings.TimeAMString;
end;

procedure __DC__SetSysUtils__TimeAMString(Instance : TObject; Params : PVariantArgList);
begin
SysUtils.FormatSettings.TimeAMString:=OleVariant(Params^[0]);
end;

function __DC__GetSysUtils__TimePMString(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysUtils.FormatSettings.TimePMString;
end;

procedure __DC__SetSysUtils__TimePMString(Instance : TObject; Params : PVariantArgList);
begin
SysUtils.FormatSettings.TimePMString:=OleVariant(Params^[0]);
end;

function __DC__GetSysUtils__ShortTimeFormat(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysUtils.FormatSettings.ShortTimeFormat;
end;

procedure __DC__SetSysUtils__ShortTimeFormat(Instance : TObject; Params : PVariantArgList);
begin
SysUtils.FormatSettings.ShortTimeFormat:=OleVariant(Params^[0]);
end;

function __DC__GetSysUtils__LongTimeFormat(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysUtils.FormatSettings.LongTimeFormat;
end;

procedure __DC__SetSysUtils__LongTimeFormat(Instance : TObject; Params : PVariantArgList);
begin
SysUtils.FormatSettings.LongTimeFormat:=OleVariant(Params^[0]);
end;

function __DC__GetSysUtils__SysLocale(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TSysLocale__Wrapper;
begin
__wrapper := __TSysLocale__Wrapper.Create;
__wrapper.fR := SysUtils.SysLocale;
result := IUnknown(__wrapper) as IDispatch;
end;

function __DC__GetSysUtils__TwoDigitYearCenturyWindow(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysUtils.FormatSettings.TwoDigitYearCenturyWindow;
end;

procedure __DC__SetSysUtils__TwoDigitYearCenturyWindow(Instance : TObject; Params : PVariantArgList);
begin
SysUtils.FormatSettings.TwoDigitYearCenturyWindow:=OleVariant(Params^[0]);
end;

function __DC__GetSysUtils__ListSeparator(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysUtils.FormatSettings.ListSeparator;
end;

procedure __DC__SetSysUtils__ListSeparator(Instance : TObject; Params : PVariantArgList);
begin
SysUtils.FormatSettings.ListSeparator:=VarToChar(OleVariant(Params^[0]));
end;

function __DC__GetSysUtils__HexDisplayPrefix(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := SysUtils.HexDisplayPrefix;
end;

procedure __DC__SetSysUtils__HexDisplayPrefix(Instance : TObject; Params : PVariantArgList);
begin
SysUtils.HexDisplayPrefix:=OleVariant(Params^[0]);
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('EmptyStr',__DC__GetSysUtils__EmptyStr,__DC__SetSysUtils__EmptyStr));
__RegisteredVars.Add(RegisterVar('NullStr',__DC__GetSysUtils__NullStr,__DC__SetSysUtils__NullStr));
__RegisteredVars.Add(RegisterVar('EmptyWideStr',__DC__GetSysUtils__EmptyWideStr,__DC__SetSysUtils__EmptyWideStr));
__RegisteredVars.Add(RegisterVar('NullWideStr',__DC__GetSysUtils__NullWideStr,__DC__SetSysUtils__NullWideStr));
__RegisteredVars.Add(RegisterVar('Win32Platform',__DC__GetSysUtils__Win32Platform,__DC__SetSysUtils__Win32Platform));
__RegisteredVars.Add(RegisterVar('Win32MajorVersion',__DC__GetSysUtils__Win32MajorVersion,__DC__SetSysUtils__Win32MajorVersion));
__RegisteredVars.Add(RegisterVar('Win32MinorVersion',__DC__GetSysUtils__Win32MinorVersion,__DC__SetSysUtils__Win32MinorVersion));
__RegisteredVars.Add(RegisterVar('Win32BuildNumber',__DC__GetSysUtils__Win32BuildNumber,__DC__SetSysUtils__Win32BuildNumber));
__RegisteredVars.Add(RegisterVar('Win32CSDVersion',__DC__GetSysUtils__Win32CSDVersion,__DC__SetSysUtils__Win32CSDVersion));
__RegisteredVars.Add(RegisterVar('CurrencyString',__DC__GetSysUtils__CurrencyString,__DC__SetSysUtils__CurrencyString));
__RegisteredVars.Add(RegisterVar('CurrencyFormat',__DC__GetSysUtils__CurrencyFormat,__DC__SetSysUtils__CurrencyFormat));
__RegisteredVars.Add(RegisterVar('NegCurrFormat',__DC__GetSysUtils__NegCurrFormat,__DC__SetSysUtils__NegCurrFormat));
__RegisteredVars.Add(RegisterVar('ThousandSeparator',__DC__GetSysUtils__ThousandSeparator,__DC__SetSysUtils__ThousandSeparator));
__RegisteredVars.Add(RegisterVar('DecimalSeparator',__DC__GetSysUtils__DecimalSeparator,__DC__SetSysUtils__DecimalSeparator));
__RegisteredVars.Add(RegisterVar('CurrencyDecimals',__DC__GetSysUtils__CurrencyDecimals,__DC__SetSysUtils__CurrencyDecimals));
__RegisteredVars.Add(RegisterVar('DateSeparator',__DC__GetSysUtils__DateSeparator,__DC__SetSysUtils__DateSeparator));
__RegisteredVars.Add(RegisterVar('ShortDateFormat',__DC__GetSysUtils__ShortDateFormat,__DC__SetSysUtils__ShortDateFormat));
__RegisteredVars.Add(RegisterVar('LongDateFormat',__DC__GetSysUtils__LongDateFormat,__DC__SetSysUtils__LongDateFormat));
__RegisteredVars.Add(RegisterVar('TimeSeparator',__DC__GetSysUtils__TimeSeparator,__DC__SetSysUtils__TimeSeparator));
__RegisteredVars.Add(RegisterVar('TimeAMString',__DC__GetSysUtils__TimeAMString,__DC__SetSysUtils__TimeAMString));
__RegisteredVars.Add(RegisterVar('TimePMString',__DC__GetSysUtils__TimePMString,__DC__SetSysUtils__TimePMString));
__RegisteredVars.Add(RegisterVar('ShortTimeFormat',__DC__GetSysUtils__ShortTimeFormat,__DC__SetSysUtils__ShortTimeFormat));
__RegisteredVars.Add(RegisterVar('LongTimeFormat',__DC__GetSysUtils__LongTimeFormat,__DC__SetSysUtils__LongTimeFormat));
__RegisteredVars.Add(RegisterVar('SysLocale',__DC__GetSysUtils__SysLocale,nil));
__RegisteredVars.Add(RegisterVar('TwoDigitYearCenturyWindow',__DC__GetSysUtils__TwoDigitYearCenturyWindow,__DC__SetSysUtils__TwoDigitYearCenturyWindow));
__RegisteredVars.Add(RegisterVar('ListSeparator',__DC__GetSysUtils__ListSeparator,__DC__SetSysUtils__ListSeparator));
__RegisteredVars.Add(RegisterVar('HexDisplayPrefix',__DC__GetSysUtils__HexDisplayPrefix,__DC__SetSysUtils__HexDisplayPrefix));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..78] of string = (
'fmOpenRead'
,'fmOpenWrite'
,'fmOpenReadWrite'
,'fmShareCompat'
,'fmShareExclusive'
,'fmShareDenyWrite'
,'fmShareDenyRead'
,'fmShareDenyNone'
,'faReadOnly'
,'faHidden'
,'faSysFile'
,'faVolumeID'
,'faDirectory'
,'faArchive'
,'faSymLink'
,'faAnyFile'
,'HoursPerDay'
,'MinsPerHour'
,'SecsPerMin'
,'MSecsPerSec'
,'MinsPerDay'
,'SecsPerDay'
,'MSecsPerDay'
,'DateDelta'
,'UnixDateDelta'
,'fvExtended'
,'fvCurrency'
,'ffGeneral'
,'ffExponent'
,'ffFixed'
,'ffNumber'
,'ffCurrency'
,'mbSingleByte'
,'mbLeadByte'
,'mbTrailByte'
,'loInvariantLocale'
,'loUserLocale'
,'MaxEraCount'
,'PathDelim'
,'DriveDelim'
,'PathSep'
,'DefaultFalseBoolStr'
,'mkNone'
,'mkExactMatch'
,'mkSingleMatch'
,'mkAmbiguous'
,'MinCurrency'
,'MaxCurrency'
,'MinDateTime'
,'MaxDateTime'
,'rfReplaceAll'
,'rfIgnoreCase'
,'SwitchChars'
,'pfNeverBuild'
,'pfDesignOnly'
,'pfRunOnly'
,'pfIgnoreDupUnits'
,'pfModuleTypeMask'
,'pfExeModule'
,'pfPackageModule'
,'pfProducerMask'
,'pfV3Produced'
,'pfProducerUndefined'
,'pfBCB4Produced'
,'pfDelphi4Produced'
,'pfLibraryModule'
,'pfConsumerMask'
,'pfConsumerCompat'
,'pfConsumerDelphi'
,'pfConsumerBCB'
,'ufMainUnit'
,'ufPackageUnit'
,'ufWeakUnit'
,'ufOrgWeakUnit'
,'ufImplicitUnit'
,'ufWeakPackageUnit'
,'ntContainsUnit'
,'ntRequiresPackage'
,'ntDcpBpiName'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,fmOpenRead));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,fmOpenWrite));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,fmOpenReadWrite));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,fmShareCompat));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,fmShareExclusive));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,fmShareDenyWrite));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,fmShareDenyRead));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,fmShareDenyNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,faReadOnly));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,faHidden));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,faSysFile));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,faVolumeID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,faDirectory));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,faArchive));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,faSymLink));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,faAnyFile));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,HoursPerDay));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,MinsPerHour));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,SecsPerMin));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,MSecsPerSec));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,MinsPerDay));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,SecsPerDay));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,MSecsPerDay));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,DateDelta));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,UnixDateDelta));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,fvExtended));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,fvCurrency));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,ffGeneral));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,ffExponent));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,ffFixed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,ffNumber));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,ffCurrency));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,mbSingleByte));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,mbLeadByte));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,mbTrailByte));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,loInvariantLocale));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,loUserLocale));
//__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,FormatSettings.MaxEraCount));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,PathDelim));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,DriveDelim));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,PathSep));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,DefaultFalseBoolStr));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,mkNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,mkExactMatch));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,mkSingleMatch));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,mkAmbiguous));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,MinCurrency));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,MaxCurrency));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,MinDateTime));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,MaxDateTime));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,rfReplaceAll));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,rfIgnoreCase));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,VarFromSet(SwitchChars, sizeof(SwitchChars))));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,pfNeverBuild));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,pfDesignOnly));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,pfRunOnly));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,pfIgnoreDupUnits));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,pfModuleTypeMask));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,pfExeModule));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,pfPackageModule));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,pfProducerMask));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,pfV3Produced));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,pfProducerUndefined));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,pfBCB4Produced));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,pfDelphi4Produced));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[65] ,pfLibraryModule));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[66] ,pfConsumerMask));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[67] ,pfConsumerCompat));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[68] ,pfConsumerDelphi));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[69] ,pfConsumerBCB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[70] ,ufMainUnit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[71] ,ufPackageUnit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[72] ,ufWeakUnit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[73] ,ufOrgWeakUnit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[74] ,ufImplicitUnit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[75] ,ufWeakPackageUnit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[76] ,ntContainsUnit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[77] ,ntRequiresPackage));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[78] ,ntDcpBpiName));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..39] of TClass = (
EAbort,
EAbstractError,
EAccessViolation,
EAssertionFailed,
EControlC,
EConvertError,
EDivByZero,
EExternal,
EExternalException,
EHeapException,
EInOutError,
EIntError,
EIntfCastError,
EIntOverflow,
EInvalidCast,
EInvalidContainer,
EInvalidInsert,
EInvalidOp,
EInvalidPointer,
EMathError,
EOSError,
EOutOfMemory,
EOverflow,
EPackageError,
EPrivilege,
EPropReadOnly,
EPropWriteOnly,
ERangeError,
ESafecallException,
EStackOverflow,
EUnderflow,
EVariantError,
EWin32Error,
Exception,
EZeroDivide,
TLanguages,
TMREWSync,
TMultiReadExclusiveWriteSynchronizer,
TSimpleRWSync,
TThreadLocalCounter
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..207] of string = (
'Int64Rec'
,'LongRec'
,'TExceptionRecord'
,'TFloatRec'
,'TFormatSettings'
,'TLangRec'
,'TSearchRec'
,'TSysLocale'
,'TThreadInfo'
,'TTimeStamp'
,'CheckWin32Version'
,'GetFileVersion'
,'Languages'
,'NewStr'
,'DisposeStr'
,'AssignStr'
,'AppendStr'
,'UpperCase'
,'LowerCase'
,'CompareStr'
,'SameStr'
,'CompareMem'
,'CompareText'
,'SameText'
,'AnsiUpperCase'
,'AnsiLowerCase'
,'AnsiCompareStr'
,'AnsiSameStr'
,'AnsiCompareText'
,'AnsiSameText'
,'AnsiLastChar'
,'WideUpperCase'
,'WideLowerCase'
,'WideCompareStr'
,'WideSameStr'
,'WideCompareText'
,'WideSameText'
,'Trim'
,'TrimLeft'
,'TrimRight'
,'QuotedStr'
,'AnsiQuotedStr'
,'AnsiDequotedStr'
,'AdjustLineBreaks'
,'IsValidIdent'
,'IntToStr'
,'IntToHex'
,'StrToInt'
,'StrToIntDef'
,'TryStrToInt'
,'StrToBool'
,'StrToBoolDef'
,'TryStrToBool'
,'BoolToStr'
,'LoadStr'
,'FmtLoadStr'
,'FileOpen'
,'FileCreate'
,'FileRead'
,'FileWrite'
,'FileSeek'
,'FileClose'
,'FileAge'
,'FileExists'
,'DirectoryExists'
,'ForceDirectories'
,'FindFirst'
,'FindNext'
,'FindClose'
,'FileGetDate'
,'FileSetDate'
,'FileGetAttr'
,'FileSetAttr'
,'FileIsReadOnly'
,'FileSetReadOnly'
,'DeleteFile'
,'RenameFile'
,'IsAssembly'
,'ChangeFileExt'
,'ChangeFilePath'
,'ExtractFilePath'
,'ExtractFileDir'
,'ExtractFileDrive'
,'ExtractFileName'
,'ExtractFileExt'
,'ExpandFileName'
,'ExpandFileNameCase'
,'ExpandUNCFileName'
,'ExtractRelativePath'
,'ExtractShortPathName'
,'FileSearch'
,'FileDateToDateTime'
,'DateTimeToFileDate'
,'GetCurrentDir'
,'SetCurrentDir'
,'CreateDir'
,'RemoveDir'
,'StrAlloc'
,'Format'
,'FmtStr'
,'FormatBuf'
,'WideFormat'
,'WideFmtStr'
,'WideFormatBuf'
,'FloatToStr'
,'CurrToStr'
,'FloatToCurr'
,'TryFloatToCurr'
,'FloatToStrF'
,'CurrToStrF'
,'FormatFloat'
,'FormatCurr'
,'StrToFloat'
,'StrToFloatDef'
,'TryStrToFloat'
,'StrToCurr'
,'StrToCurrDef'
,'TryStrToCurr'
,'FloatToDecimal'
,'DateTimeToTimeStamp'
,'TimeStampToDateTime'
,'MSecsToTimeStamp'
,'TimeStampToMSecs'
,'EncodeDate'
,'EncodeTime'
,'TryEncodeDate'
,'TryEncodeTime'
,'DecodeDate'
,'DecodeDateFully'
,'DecodeTime'
,'DateTimeToSystemTime'
,'SystemTimeToDateTime'
,'DayOfWeek'
,'Date'
,'Time'
,'GetTime'
,'Now'
,'CurrentYear'
,'IncMonth'
,'ReplaceTime'
,'ReplaceDate'
,'IsLeapYear'
,'DateToStr'
,'TimeToStr'
,'DateTimeToStr'
,'StrToDate'
,'StrToDateDef'
,'TryStrToDate'
,'StrToTime'
,'StrToTimeDef'
,'TryStrToTime'
,'StrToDateTime'
,'StrToDateTimeDef'
,'TryStrToDateTime'
,'FormatDateTime'
,'DateTimeToString'
,'FloatToDateTime'
,'TryFloatToDateTime'
,'SysErrorMessage'
,'GetLocaleStr'
,'GetLocaleChar'
,'GetFormatSettings'
,'GetLocaleFormatSettings'
,'Sleep'
,'GetModuleName'
,'ShowException'
,'Abort'
,'OutOfMemoryError'
,'Beep'
,'ByteType'
,'ByteToCharLen'
,'CharToByteLen'
,'ByteToCharIndex'
,'CharToByteIndex'
,'CharLength'
,'NextCharIndex'
,'IsPathDelimiter'
,'IsDelimiter'
,'IncludeTrailingPathDelimiter'
,'IncludeTrailingBackslash'
,'ExcludeTrailingPathDelimiter'
,'ExcludeTrailingBackslash'
,'LastDelimiter'
,'AnsiCompareFileName'
,'SameFileName'
,'AnsiLowerCaseFileName'
,'AnsiUpperCaseFileName'
,'AnsiPos'
,'StringReplace'
,'WrapText'
,'FindCmdLineSwitch'
,'FreeAndNil'
,'CreateGUID'
,'StringToGUID'
,'GUIDToString'
,'IsEqualGUID'
,'LoadPackage'
,'UnloadPackage'
,'InitializePackage'
,'FinalizePackage'
,'RaiseLastOSError'
,'RaiseLastWin32Error'
,'Win32Check'
,'CallTerminateProcs'
,'GDAL'
,'RCS'
,'RPR'
,'SafeLoadLibrary'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_Int64Rec_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_LongRec_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_TExceptionRecord_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(_TFloatRec_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(_TFormatSettings_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[5],Addr(_TLangRec_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[6],Addr(_TSearchRec_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[7],Addr(_TSysLocale_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[8],Addr(_TThreadInfo_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[9],Addr(_TTimeStamp_)));
RegisterProc(nil,MethodNames[10],mtScriptProc,TypeInfo(_T0),[
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Boolean)],Addr(____CheckWin32Version__Wrapper),cRegister);

RegisterProc(nil,MethodNames[11],mtProc,TypeInfo(_T1),[
TypeInfo(string),TypeInfo(Cardinal)],Addr(GetFileVersion),cRegister);

RegisterProc(nil,MethodNames[12],mtProc,TypeInfo(_T2),[TypeInfo(TLanguages)],Addr(Languages),cRegister);

RegisterProc(nil,MethodNames[13],mtProc,TypeInfo(_T4),[
TypeInfo(string),TypeInfoPointer],Addr(NewStr),cRegister);

RegisterProc(nil,MethodNames[14],mtProc,TypeInfo(_T5),[
TypeInfoPointer],Addr(DisposeStr),cRegister);

RegisterProc(nil,MethodNames[15],mtProc,TypeInfo(_T6),[
TypeInfoPointer,
TypeInfo(string)],Addr(AssignStr),cRegister);

RegisterProc(nil,MethodNames[16],mtProc,TypeInfo(_T7),[
TypeInfo(string),
TypeInfo(string)],Addr(AppendStr),cRegister);

RegisterProc(nil,MethodNames[17],mtProc,TypeInfo(_T8),[
TypeInfo(string),TypeInfo(string)],Addr(UpperCase),cRegister);

RegisterProc(nil,MethodNames[18],mtProc,TypeInfo(_T9),[
TypeInfo(string),TypeInfo(string)],Addr(LowerCase),cRegister);

RegisterProc(nil,MethodNames[19],mtProc,TypeInfo(_T10),[
TypeInfo(string),
TypeInfo(string),TypeInfo(Integer)],Addr(CompareStr),cRegister);

RegisterProc(nil,MethodNames[20],mtProc,TypeInfo(_T11),[
TypeInfo(string),
TypeInfo(string),TypeInfo(Boolean)],Addr(SameStr),cRegister);

RegisterProc(nil,MethodNames[21],mtProc,TypeInfo(_T12),[
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(Integer),TypeInfo(Boolean)],Addr(CompareMem),cRegister);

RegisterProc(nil,MethodNames[22],mtProc,TypeInfo(_T13),[
TypeInfo(string),
TypeInfo(string),TypeInfo(Integer)],Addr(CompareText),cRegister);

RegisterProc(nil,MethodNames[23],mtProc,TypeInfo(_T14),[
TypeInfo(string),
TypeInfo(string),TypeInfo(Boolean)],Addr(SameText),cRegister);

RegisterProc(nil,MethodNames[24],mtProc,TypeInfo(_T15),[
TypeInfo(string),TypeInfo(string)],Addr(AnsiUpperCase),cRegister);

RegisterProc(nil,MethodNames[25],mtProc,TypeInfo(_T16),[
TypeInfo(string),TypeInfo(string)],Addr(AnsiLowerCase),cRegister);

RegisterProc(nil,MethodNames[26],mtProc,TypeInfo(_T17),[
TypeInfo(string),
TypeInfo(string),TypeInfo(Integer)],Addr(AnsiCompareStr),cRegister);

RegisterProc(nil,MethodNames[27],mtProc,TypeInfo(_T18),[
TypeInfo(string),
TypeInfo(string),TypeInfo(Boolean)],Addr(AnsiSameStr),cRegister);

RegisterProc(nil,MethodNames[28],mtProc,TypeInfo(_T19),[
TypeInfo(string),
TypeInfo(string),TypeInfo(Integer)],Addr(AnsiCompareText),cRegister);

RegisterProc(nil,MethodNames[29],mtProc,TypeInfo(_T20),[
TypeInfo(string),
TypeInfo(string),TypeInfo(Boolean)],Addr(AnsiSameText),cRegister);

RegisterProc(nil,MethodNames[30],mtProc,TypeInfo(_T27),[
TypeInfo(string),TypeInfoPChar],Addr(AnsiLastChar),cRegister);

RegisterProc(nil,MethodNames[31],mtProc,TypeInfo(_T29),[
TypeInfo(WideString),TypeInfo(WideString)],Addr(WideUpperCase),cRegister);

RegisterProc(nil,MethodNames[32],mtProc,TypeInfo(_T30),[
TypeInfo(WideString),TypeInfo(WideString)],Addr(WideLowerCase),cRegister);

RegisterProc(nil,MethodNames[33],mtProc,TypeInfo(_T31),[
TypeInfo(WideString),
TypeInfo(WideString),TypeInfo(Integer)],Addr(WideCompareStr),cRegister);

RegisterProc(nil,MethodNames[34],mtProc,TypeInfo(_T32),[
TypeInfo(WideString),
TypeInfo(WideString),TypeInfo(Boolean)],Addr(WideSameStr),cRegister);

RegisterProc(nil,MethodNames[35],mtProc,TypeInfo(_T33),[
TypeInfo(WideString),
TypeInfo(WideString),TypeInfo(Integer)],Addr(WideCompareText),cRegister);

RegisterProc(nil,MethodNames[36],mtProc,TypeInfo(_T34),[
TypeInfo(WideString),
TypeInfo(WideString),TypeInfo(Boolean)],Addr(WideSameText),cRegister);

RegisterProc(nil,MethodNames[37],mtProc,TypeInfo(_T35),[
TypeInfo(string),TypeInfo(string)],Addr(Trim),cRegister);

RegisterProc(nil,MethodNames[38],mtProc,TypeInfo(_T36),[
TypeInfo(string),TypeInfo(string)],Addr(TrimLeft),cRegister);

RegisterProc(nil,MethodNames[39],mtProc,TypeInfo(_T37),[
TypeInfo(string),TypeInfo(string)],Addr(TrimRight),cRegister);

RegisterProc(nil,MethodNames[40],mtProc,TypeInfo(_T38),[
TypeInfo(string),TypeInfo(string)],Addr(QuotedStr),cRegister);

RegisterProc(nil,MethodNames[41],mtProc,TypeInfo(_T39),[
TypeInfo(string),
TypeInfo(Char),TypeInfo(string)],Addr(AnsiQuotedStr),cRegister);

RegisterProc(nil,MethodNames[42],mtProc,TypeInfo(_T41),[
TypeInfo(string),
TypeInfo(Char),TypeInfo(string)],Addr(AnsiDequotedStr),cRegister);

RegisterProc(nil,MethodNames[43],mtScriptProc,TypeInfo(_T42),[
TypeInfo(string),
TypeInfo(TTextLineBreakStyle),TypeInfo(string)],Addr(____AdjustLineBreaks__Wrapper),cRegister);

RegisterProc(nil,MethodNames[44],mtScriptProc,TypeInfo(_T43),[
TypeInfo(string),
TypeInfo(Boolean),TypeInfo(Boolean)],Addr(____IsValidIdent__Wrapper),cRegister);

RegisterProc(nil,MethodNames[45],mtProc,TypeInfo(_T44),[
TypeInfo(Integer),TypeInfo(string)],Addr(IntToStr),cRegister);

RegisterProc(nil,MethodNames[46],mtProc,TypeInfo(_T45),[
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(string)],Addr(IntToHex),cRegister);

RegisterProc(nil,MethodNames[47],mtProc,TypeInfo(_T46),[
TypeInfo(string),TypeInfo(Integer)],Addr(StrToInt),cRegister);

RegisterProc(nil,MethodNames[48],mtProc,TypeInfo(_T47),[
TypeInfo(string),
TypeInfo(Integer),TypeInfo(Integer)],Addr(StrToIntDef),cRegister);

RegisterProc(nil,MethodNames[49],mtProc,TypeInfo(_T48),[
TypeInfo(string),
TypeInfo(Integer),TypeInfo(Boolean)],Addr(TryStrToInt),cRegister);

RegisterProc(nil,MethodNames[50],mtProc,TypeInfo(_T52),[
TypeInfo(string),TypeInfo(Boolean)],Addr(StrToBool),cRegister);

RegisterProc(nil,MethodNames[51],mtProc,TypeInfo(_T53),[
TypeInfo(string),
TypeInfo(Boolean),TypeInfo(Boolean)],Addr(StrToBoolDef),cRegister);

RegisterProc(nil,MethodNames[52],mtProc,TypeInfo(_T54),[
TypeInfo(string),
TypeInfo(Boolean),TypeInfo(Boolean)],Addr(TryStrToBool),cRegister);

RegisterProc(nil,MethodNames[53],mtScriptProc,TypeInfo(_T55),[
TypeInfo(Boolean),
TypeInfo(Boolean),TypeInfo(string)],Addr(____BoolToStr__Wrapper),cRegister);

RegisterProc(nil,MethodNames[54],mtProc,TypeInfo(_T56),[
TypeInfo(Integer),TypeInfo(string)],Addr(LoadStr),cRegister);

RegisterProc(nil,MethodNames[55],mtProc,TypeInfo(_T57),[
TypeInfo(Integer),
TypeInfoArrayOfConst,TypeInfo(string)],Addr(FmtLoadStr),cRegister);

RegisterProc(nil,MethodNames[56],mtProc,TypeInfo(_T58),[
TypeInfo(string),
TypeInfo(LongWord),TypeInfo(Integer)],Addr(FileOpen),cRegister);

RegisterProc(nil,MethodNames[57],mtProc,TypeInfo(_T59),[
TypeInfo(string),TypeInfo(Integer)],Addr(FileCreate),cRegister);

RegisterProc(nil,MethodNames[58],mtProc,TypeInfo(_T60),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(LongWord),TypeInfo(Integer)],Addr(FileRead),cRegister);

RegisterProc(nil,MethodNames[59],mtProc,TypeInfo(_T61),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(LongWord),TypeInfo(Integer)],Addr(FileWrite),cRegister);

RegisterProc(nil,MethodNames[60],mtProc,TypeInfo(_T62),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Integer)],Addr(FileSeek),cRegister);

RegisterProc(nil,MethodNames[61],mtProc,TypeInfo(_T63),[
TypeInfo(Integer)],Addr(FileClose),cRegister);

RegisterProc(nil,MethodNames[62],mtProc,TypeInfo(_T64),[
TypeInfo(string),TypeInfo(Integer)],Addr(FileAge),cRegister);

RegisterProc(nil,MethodNames[63],mtProc,TypeInfo(_T65),[
TypeInfo(string),TypeInfo(Boolean)],Addr(FileExists),cRegister);

RegisterProc(nil,MethodNames[64],mtProc,TypeInfo(_T66),[
TypeInfo(string),TypeInfo(Boolean)],Addr(DirectoryExists),cRegister);

RegisterProc(nil,MethodNames[65],mtProc,TypeInfo(_T67),[
TypeInfo(string),TypeInfo(Boolean)],Addr(ForceDirectories),cRegister);

RegisterProc(nil,MethodNames[66],mtProc,TypeInfo(_T68),[
TypeInfo(string),
TypeInfo(Integer),
TypeInfo(IDispatch),TypeInfo(Integer)],Addr(____FindFirst__Wrapper),cRegister);

RegisterProc(nil,MethodNames[67],mtProc,TypeInfo(_T69),[
TypeInfo(IDispatch),TypeInfo(Integer)],Addr(____FindNext__Wrapper),cRegister);

RegisterProc(nil,MethodNames[68],mtProc,TypeInfo(_T70),[
TypeInfo(IDispatch)],Addr(____FindClose__Wrapper),cRegister);

RegisterProc(nil,MethodNames[69],mtProc,TypeInfo(_T71),[
TypeInfo(Integer),TypeInfo(Integer)],Addr(FileGetDate),cRegister);

RegisterProc(nil,MethodNames[70],mtProc,TypeInfo(_T72),[
TypeInfo(string),
TypeInfo(Integer),TypeInfo(Integer)],Addr(FileSetDate),cRegister);

RegisterProc(nil,MethodNames[71],mtProc,TypeInfo(_T73),[
TypeInfo(string),TypeInfo(Integer)],Addr(FileGetAttr),cRegister);

RegisterProc(nil,MethodNames[72],mtProc,TypeInfo(_T74),[
TypeInfo(string),
TypeInfo(Integer),TypeInfo(Integer)],Addr(FileSetAttr),cRegister);

RegisterProc(nil,MethodNames[73],mtProc,TypeInfo(_T75),[
TypeInfo(string),TypeInfo(Boolean)],Addr(FileIsReadOnly),cRegister);

RegisterProc(nil,MethodNames[74],mtProc,TypeInfo(_T76),[
TypeInfo(string),
TypeInfo(Boolean),TypeInfo(Boolean)],Addr(FileSetReadOnly),cRegister);

RegisterProc(nil,MethodNames[75],mtProc,TypeInfo(_T77),[
TypeInfo(string),TypeInfo(Boolean)],Addr(DeleteFile),cRegister);

RegisterProc(nil,MethodNames[76],mtProc,TypeInfo(_T78),[
TypeInfo(string),
TypeInfo(string),TypeInfo(Boolean)],Addr(RenameFile),cRegister);

RegisterProc(nil,MethodNames[77],mtProc,TypeInfo(_T79),[
TypeInfo(string),TypeInfo(Boolean)],Addr(IsAssembly),cRegister);

RegisterProc(nil,MethodNames[78],mtProc,TypeInfo(_T80),[
TypeInfo(string),
TypeInfo(string),TypeInfo(string)],Addr(ChangeFileExt),cRegister);

RegisterProc(nil,MethodNames[79],mtProc,TypeInfo(_T81),[
TypeInfo(string),
TypeInfo(string),TypeInfo(string)],Addr(ChangeFilePath),cRegister);

RegisterProc(nil,MethodNames[80],mtProc,TypeInfo(_T82),[
TypeInfo(string),TypeInfo(string)],Addr(ExtractFilePath),cRegister);

RegisterProc(nil,MethodNames[81],mtProc,TypeInfo(_T83),[
TypeInfo(string),TypeInfo(string)],Addr(ExtractFileDir),cRegister);

RegisterProc(nil,MethodNames[82],mtProc,TypeInfo(_T84),[
TypeInfo(string),TypeInfo(string)],Addr(ExtractFileDrive),cRegister);

RegisterProc(nil,MethodNames[83],mtProc,TypeInfo(_T85),[
TypeInfo(string),TypeInfo(string)],Addr(ExtractFileName),cRegister);

RegisterProc(nil,MethodNames[84],mtProc,TypeInfo(_T86),[
TypeInfo(string),TypeInfo(string)],Addr(ExtractFileExt),cRegister);

RegisterProc(nil,MethodNames[85],mtProc,TypeInfo(_T87),[
TypeInfo(string),TypeInfo(string)],Addr(ExpandFileName),cRegister);

RegisterProc(nil,MethodNames[86],mtProc,TypeInfo(_T88),[
TypeInfo(string),
TypeInfo(TFilenameCaseMatch),TypeInfo(string)],Addr(ExpandFileNameCase),cRegister);

RegisterProc(nil,MethodNames[87],mtProc,TypeInfo(_T89),[
TypeInfo(string),TypeInfo(string)],Addr(ExpandUNCFileName),cRegister);

RegisterProc(nil,MethodNames[88],mtProc,TypeInfo(_T90),[
TypeInfo(string),
TypeInfo(string),TypeInfo(string)],Addr(ExtractRelativePath),cRegister);

RegisterProc(nil,MethodNames[89],mtProc,TypeInfo(_T91),[
TypeInfo(string),TypeInfo(string)],Addr(ExtractShortPathName),cRegister);

RegisterProc(nil,MethodNames[90],mtProc,TypeInfo(_T92),[
TypeInfo(string),
TypeInfo(string),TypeInfo(string)],Addr(FileSearch),cRegister);

RegisterProc(nil,MethodNames[91],mtProc,TypeInfo(_T95),[
TypeInfo(Integer),TypeInfo(TDateTime)],Addr(FileDateToDateTime),cRegister);

RegisterProc(nil,MethodNames[92],mtProc,TypeInfo(_T96),[
TypeInfo(TDateTime),TypeInfo(Integer)],Addr(DateTimeToFileDate),cRegister);

RegisterProc(nil,MethodNames[93],mtProc,TypeInfo(_T97),[TypeInfo(string)],Addr(GetCurrentDir),cRegister);

RegisterProc(nil,MethodNames[94],mtProc,TypeInfo(_T98),[
TypeInfo(string),TypeInfo(Boolean)],Addr(SetCurrentDir),cRegister);

RegisterProc(nil,MethodNames[95],mtProc,TypeInfo(_T99),[
TypeInfo(string),TypeInfo(Boolean)],Addr(CreateDir),cRegister);

RegisterProc(nil,MethodNames[96],mtProc,TypeInfo(_T100),[
TypeInfo(string),TypeInfo(Boolean)],Addr(RemoveDir),cRegister);

RegisterProc(nil,MethodNames[97],mtProc,TypeInfo(_T121),[
TypeInfo(Cardinal),TypeInfoPChar],Addr(StrAlloc),cRegister);

RegisterProc(nil,MethodNames[98],mtProc,TypeInfo(_T125),[
TypeInfo(string),
TypeInfoArrayOfConst,TypeInfo(string)],Addr(Format),cRegister);

RegisterProc(nil,MethodNames[99],mtProc,TypeInfo(_T126),[
TypeInfo(string),
TypeInfo(string),
TypeInfoArrayOfConst],Addr(FmtStr),cRegister);

RegisterProc(nil,MethodNames[100],mtProc,TypeInfo(_T129),[
TypeInfoUntyped,
TypeInfo(Cardinal),
TypeInfo(Cardinal),
TypeInfo(Cardinal),
TypeInfoArrayOfConst,TypeInfo(Cardinal)],Addr(FormatBuf),cRegister);

RegisterProc(nil,MethodNames[101],mtProc,TypeInfo(_T130),[
TypeInfo(WideString),
TypeInfoArrayOfConst,TypeInfo(WideString)],Addr(WideFormat),cRegister);

RegisterProc(nil,MethodNames[102],mtProc,TypeInfo(_T131),[
TypeInfo(WideString),
TypeInfo(WideString),
TypeInfoArrayOfConst],Addr(WideFmtStr),cRegister);

RegisterProc(nil,MethodNames[103],mtProc,TypeInfo(_T132),[
TypeInfoUntyped,
TypeInfo(Cardinal),
TypeInfo(Cardinal),
TypeInfo(Cardinal),
TypeInfoArrayOfConst,TypeInfo(Cardinal)],Addr(WideFormatBuf),cRegister);

RegisterProc(nil,MethodNames[104],mtProc,TypeInfo(_T133),[
TypeInfo(Extended),TypeInfo(string)],Addr(FloatToStr),cRegister);

RegisterProc(nil,MethodNames[105],mtProc,TypeInfo(_T134),[
TypeInfo(Currency),TypeInfo(string)],Addr(CurrToStr),cRegister);

RegisterProc(nil,MethodNames[106],mtProc,TypeInfo(_T135),[
TypeInfo(Extended),TypeInfo(Currency)],Addr(FloatToCurr),cRegister);

RegisterProc(nil,MethodNames[107],mtProc,TypeInfo(_T136),[
TypeInfo(Extended),
TypeInfo(Currency),TypeInfo(Boolean)],Addr(TryFloatToCurr),cRegister);

RegisterProc(nil,MethodNames[108],mtProc,TypeInfo(_T137),[
TypeInfo(Extended),
TypeInfo(TFloatFormat),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(string)],Addr(FloatToStrF),cRegister);

RegisterProc(nil,MethodNames[109],mtProc,TypeInfo(_T138),[
TypeInfo(Currency),
TypeInfo(TFloatFormat),
TypeInfo(Integer),TypeInfo(string)],Addr(CurrToStrF),cRegister);

RegisterProc(nil,MethodNames[110],mtProc,TypeInfo(_T140),[
TypeInfo(string),
TypeInfo(Extended),TypeInfo(string)],Addr(FormatFloat),cRegister);

RegisterProc(nil,MethodNames[111],mtProc,TypeInfo(_T141),[
TypeInfo(string),
TypeInfo(Currency),TypeInfo(string)],Addr(FormatCurr),cRegister);

RegisterProc(nil,MethodNames[112],mtProc,TypeInfo(_T143),[
TypeInfo(string),TypeInfo(Extended)],Addr(StrToFloat),cRegister);

RegisterProc(nil,MethodNames[113],mtProc,TypeInfo(_T144),[
TypeInfo(string),
TypeInfo(Extended),TypeInfo(Extended)],Addr(StrToFloatDef),cRegister);

RegisterProc(nil,MethodNames[114],mtProc,TypeInfo(_T145),[
TypeInfo(string),
TypeInfo(Extended),TypeInfo(Boolean)],Addr(TryStrToFloat),cRegister);

RegisterProc(nil,MethodNames[115],mtProc,TypeInfo(_T146),[
TypeInfo(string),TypeInfo(Currency)],Addr(StrToCurr),cRegister);

RegisterProc(nil,MethodNames[116],mtProc,TypeInfo(_T147),[
TypeInfo(string),
TypeInfo(Currency),TypeInfo(Currency)],Addr(StrToCurrDef),cRegister);

RegisterProc(nil,MethodNames[117],mtProc,TypeInfo(_T148),[
TypeInfo(string),
TypeInfo(Currency),TypeInfo(Boolean)],Addr(TryStrToCurr),cRegister);

RegisterProc(nil,MethodNames[118],mtProc,TypeInfo(_T150),[
TypeInfo(IDispatch),
TypeInfo(IDispatch),
TypeInfo(TFloatValue),
TypeInfo(Integer),
TypeInfo(Integer)],Addr(____FloatToDecimal__Wrapper),cRegister);

RegisterProc(nil,MethodNames[119],mtProc,TypeInfo(_T151),[
TypeInfo(TDateTime),TypeInfo(IDispatch)],Addr(____DateTimeToTimeStamp__Wrapper),cRegister);

RegisterProc(nil,MethodNames[120],mtProc,TypeInfo(_T152),[
TypeInfo(IDispatch),TypeInfo(TDateTime)],Addr(____TimeStampToDateTime__Wrapper),cRegister);

RegisterProc(nil,MethodNames[121],mtProc,TypeInfo(_T153),[
TypeInfo(Comp),TypeInfo(IDispatch)],Addr(____MSecsToTimeStamp__Wrapper),cRegister);

RegisterProc(nil,MethodNames[122],mtProc,TypeInfo(_T154),[
TypeInfo(IDispatch),TypeInfo(Comp)],Addr(____TimeStampToMSecs__Wrapper),cRegister);

RegisterProc(nil,MethodNames[123],mtProc,TypeInfo(_T155),[
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),TypeInfo(TDateTime)],Addr(EncodeDate),cRegister);

RegisterProc(nil,MethodNames[124],mtProc,TypeInfo(_T156),[
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),TypeInfo(TDateTime)],Addr(EncodeTime),cRegister);

RegisterProc(nil,MethodNames[125],mtProc,TypeInfo(_T157),[
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(TDateTime),TypeInfo(Boolean)],Addr(TryEncodeDate),cRegister);

RegisterProc(nil,MethodNames[126],mtProc,TypeInfo(_T158),[
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(TDateTime),TypeInfo(Boolean)],Addr(TryEncodeTime),cRegister);

RegisterProc(nil,MethodNames[127],mtProc,TypeInfo(_T159),[
TypeInfo(TDateTime),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word)],Addr(DecodeDate),cRegister);

RegisterProc(nil,MethodNames[128],mtProc,TypeInfo(_T160),[
TypeInfo(TDateTime),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),TypeInfo(Boolean)],Addr(DecodeDateFully),cRegister);

RegisterProc(nil,MethodNames[129],mtProc,TypeInfo(_T161),[
TypeInfo(TDateTime),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word)],Addr(DecodeTime),cRegister);

RegisterProc(nil,MethodNames[130],mtProc,TypeInfo(_T162),[
TypeInfo(TDateTime),
TypeInfo(IDispatch)],Addr(____DateTimeToSystemTime__Wrapper),cRegister);

RegisterProc(nil,MethodNames[131],mtProc,TypeInfo(_T163),[
TypeInfo(IDispatch),TypeInfo(TDateTime)],Addr(____SystemTimeToDateTime__Wrapper),cRegister);

RegisterProc(nil,MethodNames[132],mtProc,TypeInfo(_T164),[
TypeInfo(TDateTime),TypeInfo(Word)],Addr(DayOfWeek),cRegister);

RegisterProc(nil,MethodNames[133],mtProc,TypeInfo(_T165),[TypeInfo(TDateTime)],Addr(Date),cRegister);

RegisterProc(nil,MethodNames[134],mtProc,TypeInfo(_T166),[TypeInfo(TDateTime)],Addr(Time),cRegister);

RegisterProc(nil,MethodNames[135],mtProc,TypeInfo(_T167),[TypeInfo(TDateTime)],Addr(GetTime),cRegister);

RegisterProc(nil,MethodNames[136],mtProc,TypeInfo(_T168),[TypeInfo(TDateTime)],Addr(Now),cRegister);

RegisterProc(nil,MethodNames[137],mtProc,TypeInfo(_T169),[TypeInfo(Word)],Addr(CurrentYear),cRegister);

RegisterProc(nil,MethodNames[138],mtScriptProc,TypeInfo(_T170),[
TypeInfo(TDateTime),
TypeInfo(Integer),TypeInfo(TDateTime)],Addr(____IncMonth__Wrapper),cRegister);

RegisterProc(nil,MethodNames[139],mtProc,TypeInfo(_T172),[
TypeInfo(TDateTime),
TypeInfo(TDateTime)],Addr(ReplaceTime),cRegister);

RegisterProc(nil,MethodNames[140],mtProc,TypeInfo(_T173),[
TypeInfo(TDateTime),
TypeInfo(TDateTime)],Addr(ReplaceDate),cRegister);

RegisterProc(nil,MethodNames[141],mtProc,TypeInfo(_T174),[
TypeInfo(Word),TypeInfo(Boolean)],Addr(IsLeapYear),cRegister);

RegisterProc(nil,MethodNames[142],mtProc,TypeInfo(_T175),[
TypeInfo(TDateTime),TypeInfo(string)],Addr(DateToStr),cRegister);

RegisterProc(nil,MethodNames[143],mtProc,TypeInfo(_T176),[
TypeInfo(TDateTime),TypeInfo(string)],Addr(TimeToStr),cRegister);

RegisterProc(nil,MethodNames[144],mtProc,TypeInfo(_T177),[
TypeInfo(TDateTime),TypeInfo(string)],Addr(DateTimeToStr),cRegister);

RegisterProc(nil,MethodNames[145],mtProc,TypeInfo(_T178),[
TypeInfo(string),TypeInfo(TDateTime)],Addr(StrToDate),cRegister);

RegisterProc(nil,MethodNames[146],mtProc,TypeInfo(_T179),[
TypeInfo(string),
TypeInfo(TDateTime),TypeInfo(TDateTime)],Addr(StrToDateDef),cRegister);

RegisterProc(nil,MethodNames[147],mtProc,TypeInfo(_T180),[
TypeInfo(string),
TypeInfo(TDateTime),TypeInfo(Boolean)],Addr(TryStrToDate),cRegister);

RegisterProc(nil,MethodNames[148],mtProc,TypeInfo(_T181),[
TypeInfo(string),TypeInfo(TDateTime)],Addr(StrToTime),cRegister);

RegisterProc(nil,MethodNames[149],mtProc,TypeInfo(_T182),[
TypeInfo(string),
TypeInfo(TDateTime),TypeInfo(TDateTime)],Addr(StrToTimeDef),cRegister);

RegisterProc(nil,MethodNames[150],mtProc,TypeInfo(_T183),[
TypeInfo(string),
TypeInfo(TDateTime),TypeInfo(Boolean)],Addr(TryStrToTime),cRegister);

RegisterProc(nil,MethodNames[151],mtProc,TypeInfo(_T184),[
TypeInfo(string),TypeInfo(TDateTime)],Addr(StrToDateTime),cRegister);

RegisterProc(nil,MethodNames[152],mtProc,TypeInfo(_T185),[
TypeInfo(string),
TypeInfo(TDateTime),TypeInfo(TDateTime)],Addr(StrToDateTimeDef),cRegister);

RegisterProc(nil,MethodNames[153],mtProc,TypeInfo(_T186),[
TypeInfo(string),
TypeInfo(TDateTime),TypeInfo(Boolean)],Addr(TryStrToDateTime),cRegister);

RegisterProc(nil,MethodNames[154],mtProc,TypeInfo(_T187),[
TypeInfo(string),
TypeInfo(TDateTime),TypeInfo(string)],Addr(FormatDateTime),cRegister);

RegisterProc(nil,MethodNames[155],mtProc,TypeInfo(_T188),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(TDateTime)],Addr(DateTimeToString),cRegister);

RegisterProc(nil,MethodNames[156],mtProc,TypeInfo(_T189),[
TypeInfo(Extended),TypeInfo(TDateTime)],Addr(FloatToDateTime),cRegister);

RegisterProc(nil,MethodNames[157],mtProc,TypeInfo(_T190),[
TypeInfo(Extended),
TypeInfo(TDateTime),TypeInfo(Boolean)],Addr(TryFloatToDateTime),cRegister);

RegisterProc(nil,MethodNames[158],mtProc,TypeInfo(_T191),[
TypeInfo(Integer),TypeInfo(string)],Addr(SysErrorMessage),cRegister);

RegisterProc(nil,MethodNames[159],mtProc,TypeInfo(_T192),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(string),TypeInfo(string)],Addr(GetLocaleStr),cRegister);

RegisterProc(nil,MethodNames[160],mtProc,TypeInfo(_T193),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Char),TypeInfo(Char)],Addr(GetLocaleChar),cRegister);

RegisterProc(nil,MethodNames[161],mtProc,TypeInfo(_T194),NoParams,Addr(GetFormatSettings),cRegister);

RegisterProc(nil,MethodNames[162],mtProc,TypeInfo(_T195),[
TypeInfo(Integer),
TypeInfo(IDispatch)],Addr(____GetLocaleFormatSettings__Wrapper),cRegister);

RegisterProc(nil,MethodNames[163],mtProc,TypeInfo(_T196),[
TypeInfo(Cardinal)],Addr(Sleep),cStdCall);

RegisterProc(nil,MethodNames[164],mtProc,TypeInfo(_T197),[
TypeInfo(HMODULE),TypeInfo(string)],Addr(GetModuleName),cRegister);

RegisterProc(nil,MethodNames[165],mtProc,TypeInfo(_T199),[
TypeInfo(TObject),
TypeInfoPointer],Addr(ShowException),cRegister);

RegisterProc(nil,MethodNames[166],mtProc,TypeInfo(_T200),NoParams,Addr(Abort),cRegister);

RegisterProc(nil,MethodNames[167],mtProc,TypeInfo(_T201),NoParams,Addr(OutOfMemoryError),cRegister);

RegisterProc(nil,MethodNames[168],mtProc,TypeInfo(_T202),NoParams,Addr(Beep),cRegister);

RegisterProc(nil,MethodNames[169],mtProc,TypeInfo(_T203),[
TypeInfo(string),
TypeInfo(Integer),TypeInfo(TMbcsByteType)],Addr(ByteType),cRegister);

RegisterProc(nil,MethodNames[170],mtProc,TypeInfo(_T205),[
TypeInfo(string),
TypeInfo(Integer),TypeInfo(Integer)],Addr(ByteToCharLen),cRegister);

RegisterProc(nil,MethodNames[171],mtProc,TypeInfo(_T206),[
TypeInfo(string),
TypeInfo(Integer),TypeInfo(Integer)],Addr(CharToByteLen),cRegister);

RegisterProc(nil,MethodNames[172],mtProc,TypeInfo(_T207),[
TypeInfo(string),
TypeInfo(Integer),TypeInfo(Integer)],Addr(ByteToCharIndex),cRegister);

RegisterProc(nil,MethodNames[173],mtProc,TypeInfo(_T208),[
TypeInfo(string),
TypeInfo(Integer),TypeInfo(Integer)],Addr(CharToByteIndex),cRegister);

RegisterProc(nil,MethodNames[174],mtProc,TypeInfo(_T211),[
TypeInfo(string),
TypeInfo(Integer),TypeInfo(Integer)],Addr(CharLength),cRegister);

RegisterProc(nil,MethodNames[175],mtProc,TypeInfo(_T212),[
TypeInfo(string),
TypeInfo(Integer),TypeInfo(Integer)],Addr(NextCharIndex),cRegister);

RegisterProc(nil,MethodNames[176],mtProc,TypeInfo(_T213),[
TypeInfo(string),
TypeInfo(Integer),TypeInfo(Boolean)],Addr(IsPathDelimiter),cRegister);

RegisterProc(nil,MethodNames[177],mtProc,TypeInfo(_T214),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(Integer),TypeInfo(Boolean)],Addr(IsDelimiter),cRegister);

RegisterProc(nil,MethodNames[178],mtProc,TypeInfo(_T215),[
TypeInfo(string),TypeInfo(string)],Addr(IncludeTrailingPathDelimiter),cRegister);

RegisterProc(nil,MethodNames[179],mtProc,TypeInfo(_T216),[
TypeInfo(string),TypeInfo(string)],Addr(IncludeTrailingBackslash),cRegister);

RegisterProc(nil,MethodNames[180],mtProc,TypeInfo(_T217),[
TypeInfo(string),TypeInfo(string)],Addr(ExcludeTrailingPathDelimiter),cRegister);

RegisterProc(nil,MethodNames[181],mtProc,TypeInfo(_T218),[
TypeInfo(string),TypeInfo(string)],Addr(ExcludeTrailingBackslash),cRegister);

RegisterProc(nil,MethodNames[182],mtProc,TypeInfo(_T219),[
TypeInfo(string),
TypeInfo(string),TypeInfo(Integer)],Addr(LastDelimiter),cRegister);

RegisterProc(nil,MethodNames[183],mtProc,TypeInfo(_T220),[
TypeInfo(string),
TypeInfo(string),TypeInfo(Integer)],Addr(AnsiCompareFileName),cRegister);

RegisterProc(nil,MethodNames[184],mtProc,TypeInfo(_T221),[
TypeInfo(string),
TypeInfo(string),TypeInfo(Boolean)],Addr(SameFileName),cRegister);

RegisterProc(nil,MethodNames[185],mtProc,TypeInfo(_T222),[
TypeInfo(string),TypeInfo(string)],Addr(AnsiLowerCaseFileName),cRegister);

RegisterProc(nil,MethodNames[186],mtProc,TypeInfo(_T223),[
TypeInfo(string),TypeInfo(string)],Addr(AnsiUpperCaseFileName),cRegister);

RegisterProc(nil,MethodNames[187],mtProc,TypeInfo(_T224),[
TypeInfo(string),
TypeInfo(string),TypeInfo(Integer)],Addr(AnsiPos),cRegister);

RegisterProc(nil,MethodNames[188],mtProc,TypeInfo(_T228),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(string),
TypeInfo(TReplaceFlags),TypeInfo(string)],Addr(StringReplace),cRegister);

RegisterProc(nil,MethodNames[189],mtProc,TypeInfo(_T229),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(TSysCharSet),
TypeInfo(Integer),TypeInfo(string)],Addr(WrapText),cRegister);

RegisterProc(nil,MethodNames[190],mtProc,TypeInfo(_T230),[
TypeInfo(string),
TypeInfo(TSysCharSet),
TypeInfo(Boolean),TypeInfo(Boolean)],Addr(FindCmdLineSwitch),cRegister);

//RegisterProc(nil,MethodNames[191],mtProc,TypeInfo(_T231),[
//TypeInfoUntyped],Addr(FreeAndNil),cRegister);

RegisterProc(nil,MethodNames[191],mtProc,TypeInfo(_T231),[
TypeInfo(TObject)],Addr(FreeAndNil),cRegister);

RegisterProc(nil,MethodNames[192],mtProc,TypeInfo(_T233),[
TypeInfo(IDispatch),TypeInfo(HResult)],Addr(____CreateGUID__Wrapper),cRegister);

RegisterProc(nil,MethodNames[193],mtProc,TypeInfo(_T234),[
TypeInfo(string),TypeInfo(IDispatch)],Addr(____StringToGUID__Wrapper),cRegister);

RegisterProc(nil,MethodNames[194],mtProc,TypeInfo(_T235),[
TypeInfo(IDispatch),TypeInfo(string)],Addr(____GUIDToString__Wrapper),cRegister);

RegisterProc(nil,MethodNames[195],mtProc,TypeInfo(_T236),[
TypeInfo(IDispatch),
TypeInfo(IDispatch),TypeInfo(Boolean)],Addr(____IsEqualGUID__Wrapper),cRegister);

RegisterProc(nil,MethodNames[196],mtProc,TypeInfo(_T237),[
TypeInfo(string),TypeInfo(HMODULE)],Addr(LoadPackage),cRegister);

RegisterProc(nil,MethodNames[197],mtProc,TypeInfo(_T238),[
TypeInfo(HMODULE)],Addr(UnloadPackage),cRegister);

RegisterProc(nil,MethodNames[198],mtProc,TypeInfo(_T241),[
TypeInfo(HMODULE)],Addr(InitializePackage),cRegister);

RegisterProc(nil,MethodNames[199],mtProc,TypeInfo(_T242),[
TypeInfo(HMODULE)],Addr(FinalizePackage),cRegister);

RegisterProc(nil,MethodNames[200],mtProc,TypeInfo(_T243),NoParams,Addr(RaiseLastOSError),cRegister);

RegisterProc(nil,MethodNames[201],mtProc,TypeInfo(_T244),NoParams,Addr(RaiseLastWin32Error),cRegister);

RegisterProc(nil,MethodNames[202],mtProc,TypeInfo(_T245),[
TypeInfo(BOOL),TypeInfo(BOOL)],Addr(Win32Check),cRegister);

RegisterProc(nil,MethodNames[203],mtProc,TypeInfo(_T247),[TypeInfo(Boolean)],Addr(CallTerminateProcs),cRegister);

RegisterProc(nil,MethodNames[204],mtProc,TypeInfo(_T248),[TypeInfo(LongWord)],Addr(GDAL),cRegister);

RegisterProc(nil,MethodNames[205],mtProc,TypeInfo(_T249),NoParams,Addr(RCS),cRegister);

RegisterProc(nil,MethodNames[206],mtProc,TypeInfo(_T250),NoParams,Addr(RPR),cRegister);

RegisterProc(nil,MethodNames[207],mtScriptProc,TypeInfo(_T251),[
TypeInfo(string),
TypeInfo(UINT),TypeInfo(HMODULE)],Addr(____SafeLoadLibrary__Wrapper),cRegister);

RegisterProc(Exception,'Create',mtConstructor,TypeInfo(_T252),[
TypeInfo(string)],Addr(Exception.Create),cRegister);

RegisterProc(Exception,'CreateFmt',mtConstructor,TypeInfo(_T253),[
TypeInfo(string),
TypeInfoArrayOfConst],Addr(Exception.CreateFmt),cRegister);

RegisterProc(Exception,'CreateRes',mtConstructor,TypeInfo(_T254),[
TypeInfo(Integer)],Addr(Exception.CreateRes),cRegister);

RegisterProc(Exception,'CreateResFmt',mtConstructor,TypeInfo(_T255),[
TypeInfo(Integer),
TypeInfoArrayOfConst],Addr(Exception.CreateResFmt),cRegister);

RegisterProc(Exception,'CreateHelp',mtConstructor,TypeInfo(_T256),[
TypeInfo(string),
TypeInfo(Integer)],Addr(Exception.CreateHelp),cRegister);

RegisterProc(Exception,'CreateFmtHelp',mtConstructor,TypeInfo(_T257),[
TypeInfo(string),
TypeInfoArrayOfConst,
TypeInfo(Integer)],Addr(Exception.CreateFmtHelp),cRegister);

RegisterProc(Exception,'CreateResHelp',mtConstructor,TypeInfo(_T258),[
TypeInfo(Integer),
TypeInfo(Integer)],Addr(Exception.CreateResHelp),cRegister);

RegisterProc(TLanguages,'Create',mtConstructor,TypeInfo(_T260),NoParams,Addr(TLanguages.Create),cRegister);

RegRegisterMethod(TLanguages,'IndexOf',TypeInfo(_T261),[
TypeInfo(LCID),TypeInfo(Integer)],Addr(TLanguages.IndexOf));

RegisterProc(TMultiReadExclusiveWriteSynchronizer,'Create',mtConstructor,TypeInfo(_T262),NoParams,Addr(TMultiReadExclusiveWriteSynchronizer.Create),cRegister);

RegRegisterMethod(TMultiReadExclusiveWriteSynchronizer,'BeginRead',TypeInfo(_T263),NoParams,Addr(TMultiReadExclusiveWriteSynchronizer.BeginRead));

RegRegisterMethod(TMultiReadExclusiveWriteSynchronizer,'EndRead',TypeInfo(_T264),NoParams,Addr(TMultiReadExclusiveWriteSynchronizer.EndRead));

RegRegisterMethod(TMultiReadExclusiveWriteSynchronizer,'BeginWrite',TypeInfo(_T265),[TypeInfo(Boolean)],Addr(TMultiReadExclusiveWriteSynchronizer.BeginWrite));

RegRegisterMethod(TMultiReadExclusiveWriteSynchronizer,'EndWrite',TypeInfo(_T266),NoParams,Addr(TMultiReadExclusiveWriteSynchronizer.EndWrite));

RegisterProc(TSimpleRWSync,'Create',mtConstructor,TypeInfo(_T267),NoParams,Addr(TSimpleRWSync.Create),cRegister);

RegRegisterMethod(TSimpleRWSync,'BeginRead',TypeInfo(_T268),NoParams,Addr(TSimpleRWSync.BeginRead));

RegRegisterMethod(TSimpleRWSync,'EndRead',TypeInfo(_T269),NoParams,Addr(TSimpleRWSync.EndRead));

RegRegisterMethod(TSimpleRWSync,'BeginWrite',TypeInfo(_T270),[TypeInfo(Boolean)],Addr(TSimpleRWSync.BeginWrite));

RegRegisterMethod(TSimpleRWSync,'EndWrite',TypeInfo(_T271),NoParams,Addr(TSimpleRWSync.EndWrite));

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'AddExitProc',mtProc,TypeInfo(_T3),[
TypeInfo(TProcedure)],Addr(AddExitProc),cRegister)}

{RegisterProc(nil,'AnsiStrComp',mtProc,TypeInfo(_T21),[
TypeInfoPChar,
TypeInfoPChar,TypeInfo(Integer)],Addr(AnsiStrComp),cRegister)}

{RegisterProc(nil,'AnsiStrIComp',mtProc,TypeInfo(_T22),[
TypeInfoPChar,
TypeInfoPChar,TypeInfo(Integer)],Addr(AnsiStrIComp),cRegister)}

{RegisterProc(nil,'AnsiStrLComp',mtProc,TypeInfo(_T23),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(Cardinal),TypeInfo(Integer)],Addr(AnsiStrLComp),cRegister)}

{RegisterProc(nil,'AnsiStrLIComp',mtProc,TypeInfo(_T24),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(Cardinal),TypeInfo(Integer)],Addr(AnsiStrLIComp),cRegister)}

{RegisterProc(nil,'AnsiStrLower',mtProc,TypeInfo(_T25),[
TypeInfoPChar,TypeInfoPChar],Addr(AnsiStrLower),cRegister)}

{RegisterProc(nil,'AnsiStrUpper',mtProc,TypeInfo(_T26),[
TypeInfoPChar,TypeInfoPChar],Addr(AnsiStrUpper),cRegister)}

{RegisterProc(nil,'AnsiStrLastChar',mtProc,TypeInfo(_T28),[
TypeInfoPChar,TypeInfoPChar],Addr(AnsiStrLastChar),cRegister)}

{RegisterProc(nil,'AnsiExtractQuotedStr',mtProc,TypeInfo(_T40),[
TypeInfoPChar,
TypeInfo(Char),TypeInfo(string)],Addr(AnsiExtractQuotedStr),cRegister)}

{RegisterProc(nil,'StrToInt64',mtProc,TypeInfo(_T49),[
TypeInfo(string),TypeInfo(Int64)],Addr(StrToInt64),cRegister)}

{RegisterProc(nil,'StrToInt64Def',mtProc,TypeInfo(_T50),[
TypeInfo(string),
TypeInfo(Int64),TypeInfo(Int64)],Addr(StrToInt64Def),cRegister)}

{RegisterProc(nil,'TryStrToInt64',mtProc,TypeInfo(_T51),[
TypeInfo(string),
TypeInfo(Int64),TypeInfo(Boolean)],Addr(TryStrToInt64),cRegister)}

{RegisterProc(nil,'DiskFree',mtProc,TypeInfo(_T93),[
TypeInfo(Byte),TypeInfo(Int64)],Addr(DiskFree),cRegister)}

{RegisterProc(nil,'DiskSize',mtProc,TypeInfo(_T94),[
TypeInfo(Byte),TypeInfo(Int64)],Addr(DiskSize),cRegister)}

{RegisterProc(nil,'StrLen',mtProc,TypeInfo(_T101),[
TypeInfoPChar,TypeInfo(Cardinal)],Addr(StrLen),cRegister)}

{RegisterProc(nil,'StrEnd',mtProc,TypeInfo(_T102),[
TypeInfoPChar,TypeInfoPChar],Addr(StrEnd),cRegister)}

{RegisterProc(nil,'StrMove',mtProc,TypeInfo(_T103),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(Cardinal),TypeInfoPChar],Addr(StrMove),cRegister)}

{RegisterProc(nil,'StrCopy',mtProc,TypeInfo(_T104),[
TypeInfoPChar,
TypeInfoPChar,TypeInfoPChar],Addr(StrCopy),cRegister)}

{RegisterProc(nil,'StrECopy',mtProc,TypeInfo(_T105),[
TypeInfoPChar,
TypeInfoPChar,TypeInfoPChar],Addr(StrECopy),cRegister)}

{RegisterProc(nil,'StrLCopy',mtProc,TypeInfo(_T106),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(Cardinal),TypeInfoPChar],Addr(StrLCopy),cRegister)}

{RegisterProc(nil,'StrPCopy',mtProc,TypeInfo(_T107),[
TypeInfoPChar,
TypeInfo(string),TypeInfoPChar],Addr(StrPCopy),cRegister)}

{RegisterProc(nil,'StrPLCopy',mtProc,TypeInfo(_T108),[
TypeInfoPChar,
TypeInfo(string),
TypeInfo(Cardinal),TypeInfoPChar],Addr(StrPLCopy),cRegister)}

{RegisterProc(nil,'StrCat',mtProc,TypeInfo(_T109),[
TypeInfoPChar,
TypeInfoPChar,TypeInfoPChar],Addr(StrCat),cRegister)}

{RegisterProc(nil,'StrLCat',mtProc,TypeInfo(_T110),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(Cardinal),TypeInfoPChar],Addr(StrLCat),cRegister)}

{RegisterProc(nil,'StrComp',mtProc,TypeInfo(_T111),[
TypeInfoPChar,
TypeInfoPChar,TypeInfo(Integer)],Addr(StrComp),cRegister)}

{RegisterProc(nil,'StrIComp',mtProc,TypeInfo(_T112),[
TypeInfoPChar,
TypeInfoPChar,TypeInfo(Integer)],Addr(StrIComp),cRegister)}

{RegisterProc(nil,'StrLComp',mtProc,TypeInfo(_T113),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(Cardinal),TypeInfo(Integer)],Addr(StrLComp),cRegister)}

{RegisterProc(nil,'StrLIComp',mtProc,TypeInfo(_T114),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(Cardinal),TypeInfo(Integer)],Addr(StrLIComp),cRegister)}

{RegisterProc(nil,'StrScan',mtProc,TypeInfo(_T115),[
TypeInfoPChar,
TypeInfo(Char),TypeInfoPChar],Addr(StrScan),cRegister)}

{RegisterProc(nil,'StrRScan',mtProc,TypeInfo(_T116),[
TypeInfoPChar,
TypeInfo(Char),TypeInfoPChar],Addr(StrRScan),cRegister)}

{RegisterProc(nil,'StrPos',mtProc,TypeInfo(_T117),[
TypeInfoPChar,
TypeInfoPChar,TypeInfoPChar],Addr(StrPos),cRegister)}

{RegisterProc(nil,'StrUpper',mtProc,TypeInfo(_T118),[
TypeInfoPChar,TypeInfoPChar],Addr(StrUpper),cRegister)}

{RegisterProc(nil,'StrLower',mtProc,TypeInfo(_T119),[
TypeInfoPChar,TypeInfoPChar],Addr(StrLower),cRegister)}

{RegisterProc(nil,'StrPas',mtProc,TypeInfo(_T120),[
TypeInfoPChar,TypeInfo(string)],Addr(StrPas),cRegister)}

{RegisterProc(nil,'StrBufSize',mtProc,TypeInfo(_T122),[
TypeInfoPChar,TypeInfo(Cardinal)],Addr(StrBufSize),cRegister)}

{RegisterProc(nil,'StrNew',mtProc,TypeInfo(_T123),[
TypeInfoPChar,TypeInfoPChar],Addr(StrNew),cRegister)}

{RegisterProc(nil,'StrDispose',mtProc,TypeInfo(_T124),[
TypeInfoPChar],Addr(StrDispose),cRegister)}

{RegisterProc(nil,'StrFmt',mtProc,TypeInfo(_T127),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfoArrayOfConst,TypeInfoPChar],Addr(StrFmt),cRegister)}

{RegisterProc(nil,'StrLFmt',mtProc,TypeInfo(_T128),[
TypeInfoPChar,
TypeInfo(Cardinal),
TypeInfoPChar,
TypeInfoArrayOfConst,TypeInfoPChar],Addr(StrLFmt),cRegister)}

{RegisterProc(nil,'FloatToText',mtProc,TypeInfo(_T139),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(TFloatValue),
TypeInfo(TFloatFormat),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Integer)],Addr(FloatToText),cRegister)}

{RegisterProc(nil,'FloatToTextFmt',mtProc,TypeInfo(_T142),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(TFloatValue),
TypeInfoPChar,TypeInfo(Integer)],Addr(FloatToTextFmt),cRegister)}

{RegisterProc(nil,'TextToFloat',mtProc,TypeInfo(_T149),[
TypeInfoPChar,
TypeInfoPChar,
TypeInfo(TFloatValue),TypeInfo(Boolean)],Addr(TextToFloat),cRegister)}

{RegisterProc(nil,'ExceptionErrorMessage',mtProc,TypeInfo(_T198),[
TypeInfo(TObject),
TypeInfoPointer,
TypeInfoPChar,
TypeInfo(Integer),TypeInfo(Integer)],Addr(ExceptionErrorMessage),cRegister)}

{RegisterProc(nil,'StrByteType',mtProc,TypeInfo(_T204),[
TypeInfoPChar,
TypeInfo(Cardinal),TypeInfo(TMbcsByteType)],Addr(StrByteType),cRegister)}

{RegisterProc(nil,'StrCharLength',mtProc,TypeInfo(_T209),[
TypeInfoPChar,TypeInfo(Integer)],Addr(StrCharLength),cRegister)}

{RegisterProc(nil,'StrNextChar',mtProc,TypeInfo(_T210),[
TypeInfoPChar,TypeInfoPChar],Addr(StrNextChar),cRegister)}

{RegisterProc(nil,'AnsiStrPos',mtProc,TypeInfo(_T225),[
TypeInfoPChar,
TypeInfoPChar,TypeInfoPChar],Addr(AnsiStrPos),cRegister)}

{RegisterProc(nil,'AnsiStrRScan',mtProc,TypeInfo(_T226),[
TypeInfoPChar,
TypeInfo(Char),TypeInfoPChar],Addr(AnsiStrRScan),cRegister)}

{RegisterProc(nil,'AnsiStrScan',mtProc,TypeInfo(_T227),[
TypeInfoPChar,
TypeInfo(Char),TypeInfoPChar],Addr(AnsiStrScan),cRegister)}

{RegisterProc(nil,'GetPackageInfo',mtProc,TypeInfo(_T239),[
TypeInfo(HMODULE),
TypeInfoPointer,
TypeInfo(Integer),
TypeInfo(TPackageInfoProc)],Addr(GetPackageInfo),cRegister)}

{RegisterProc(nil,'GetPackageDescription',mtProc,TypeInfo(_T240),[
TypeInfoPChar,TypeInfo(string)],Addr(GetPackageDescription),cRegister)}

{RegisterProc(nil,'AddTerminateProc',mtProc,TypeInfo(_T246),[
TypeInfo(TTerminateProc)],Addr(AddTerminateProc),cRegister)}

{RegisterProc(Exception,'CreateResFmtHelp',mtConstructor,TypeInfo(_T259),[
TypeInfoPointer,
TypeInfoArrayOfConst,
TypeInfo(Integer)],Addr(Exception.CreateResFmtHelp),cRegister)}

{RegRegisterMethod(TThreadLocalCounter,'Open',TypeInfo(_T272),[
TypeInfoPointer],Addr(TThreadLocalCounter.Open))}

{RegRegisterMethod(TThreadLocalCounter,'Delete',TypeInfo(_T273),[
TypeInfoPointer],Addr(TThreadLocalCounter.Delete))}

{RegRegisterMethod(TThreadLocalCounter,'Close',TypeInfo(_T274),[
TypeInfoPointer],Addr(TThreadLocalCounter.Close))}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
