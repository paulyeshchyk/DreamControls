{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit PROVIDER_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  SysUtils,
  VarUtils,
  Variants,
  Classes,
  DBClient,
  DB,
  DSIntf,
  ActiveX,
  Midas,
  SqlTimSt,
  WideStrings,
  Provider;
function ConvertTPutFieldInfoToVariant(var R : TPutFieldInfo) : OleVariant;
function ConvertVariantToTPutFieldInfo(const V : OleVariant) : TPutFieldInfo;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TPutFieldInfo__Wrapper = class(TDCRecordWrapper)
private
fR : TPutFieldInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setFieldNo(const val : Integer);
function getFieldNo : Integer;
property FieldNo : Integer read getFieldNo write setFieldNo;
procedure setField(const val : TField);
function getField : TField;
property Field : TField read getField write setField;
procedure setDataSet(const val : TDataSet);
function getDataSet : TDataSet;
property DataSet : TDataSet read getDataSet write setDataSet;
procedure setSize(const val : Integer);
function getSize : Integer;
property Size : Integer read getSize write setSize;
procedure setIsDetail(const val : Boolean);
function getIsDetail : Boolean;
property IsDetail : Boolean read getIsDetail write setIsDetail;
procedure setOpened(const val : Boolean);
function getOpened : Boolean;
property Opened : Boolean read getOpened write setOpened;
procedure setLocalFieldIndex(const val : Integer);
function getLocalFieldIndex : Integer;
property LocalFieldIndex : Integer read getLocalFieldIndex write setLocalFieldIndex;
end;
type __TCustomProvider__ = class(TCustomProvider);
type __TDataPacketWriter__ = class(TDataPacketWriter);
type __TSQLResolver__ = class(TSQLResolver);
type
_T0 = function (p0 : TPersistent;
const p1 : string): TObject of object;

_T1 = function (p0 : TPersistent;
const p1 : string): WideString of object;

_T2 = function (p0 : TStrings): Variant of object;

_T3 = function (p0 : TWideStrings): Variant of object;

_T4 = procedure (p0 : string;
p1 : Integer) of object;

_T5 = function : TCustomResolver of object;

_T6 = procedure (p0 : TGetRecordOptions;
p1 : TProviderOptions;
var p2 : Integer;
var p3 : OleVariant) of object;

_T7 = procedure (p0 : TPacketDataSet;
p1 : Integer;
p2 : Integer;
const p3 : OleVariant) of object;

_T8 = procedure (var p0 : OleVariant) of object;

_T9 = procedure (p0 : TDataSet;
p1 : TCustomClientDataSet;
p2 : TUpdateKind;
var p3 : Boolean) of object;

_T10 = procedure (p0 : TDataSet;
p1 : TCustomClientDataSet;
p2 : TUpdateKind) of object;

_T11 = procedure (p0 : TDataSet;
p1 : TDataSet) of object;

_T12 = procedure (p0 : TDataSet;
p1 : TDataSet;
p2 : Boolean;
p3 : Boolean) of object;

_T13 = _T11;

_T14 = procedure (p0 : TPcktAttrArea;
const p1 : string;
const p2 : OleVariant;
p3 : Boolean) of object;

_T15 = procedure  of object;

_T16 = function (const p0 : OleVariant;
p1 : Integer;
out p2 : Integer;
var p3 : OleVariant): OleVariant of object;

_T17 = function (p0 : Integer;
out p1 : Integer;
p2 : Integer;
const p3 : WideString;
var p4 : OleVariant;
var p5 : OleVariant): OleVariant of object;

_T18 = function (const p0 : OleVariant;
p1 : Integer;
out p2 : Integer): OleVariant of object;

_T19 = function (p0 : Integer;
out p1 : Integer;
p2 : TGetRecordOptions;
const p3 : WideString;
var p4 : OleVariant): OleVariant of object;

_T20 = function (const p0 : OleVariant;
p1 : TFetchOptions): OleVariant of object;

_T21 = procedure (const p0 : WideString;
var p1 : OleVariant) of object;

_T22 = function (p0 : TParamTypes): OleVariant of object;

_T23 = _T8;

_T24 = _T8;

_T25 = _T8;

_T26 = procedure (const p0 : WideString;
var p1 : OleVariant;
var p2 : OleVariant) of object;

_T27 = _T8;

_T28 = _T8;

_T29 = _T8;

_T30 = procedure (p0 : Integer;
p1 : Integer;
const p2 : WideString;
var p3 : OleVariant;
var p4 : OleVariant) of object;

_T31 = _T8;

_T32 = _T8;

_T33 = _T18;

_T34 = function (p0 : Integer;
out p1 : Integer;
p2 : Integer): OleVariant of object;

_T35 = function (const p0 : OleVariant;
p1 : Integer;
var p2 : OleVariant): OleVariant of object;

_T36 = _T26;

_T37 = function (var p0 : OleVariant): OleVariant of object;

_T38 = function (p0 : OleVariant): OleVariant of object;

_T39 = function (p0 : TUpdateTree;
p1 : EUpdateError;
var p2 : Integer;
var p3 : Integer): Boolean of object;

_T40 = procedure (p0 : TUpdateTree) of object;

_T41 = procedure (p0 : TUpdateTree;
p1 : EUpdateError;
p2 : TResolverResponse) of object;

_T42 = _T15;

_T43 = _T15;

_T44 = _T40;

_T45 = _T40;

_T46 = _T40;

_T47 = _T40;

_T48 = procedure (p0 : TBaseProvider) of object;

_T49 = _T18;

_T50 = _T40;

_T51 = procedure (p0 : TUpdateTree;
p1 : TPacketDataSet) of object;

_T52 = _T40;

_T53 = _T40;

_T54 = function (p0 : TUpdateTree): Boolean of object;

_T55 = function (p0 : OleVariant;
p1 : TFetchOptions): OleVariant of object;

_T56 = procedure (const p0 : IDispatch) of object;

_T57 = procedure (p0 : TDataSet) of object;

_T58 = _T57;

_T59 = procedure (const p0 : TInfoArray) of object;

_T60 = procedure (p0 : TDataSet;
const p1 : TInfoArray) of object;

_T61 = procedure (p0 : TDataSet;
const p1 : TInfoArray;
p2 : Boolean) of object;

_T62 = function (p0 : TDataSet;
var p1 : TInfoArray;
p2 : Integer): Integer of object;

_T63 = procedure (p0 : TDataSet;
var p1 : Integer;
out p2 : OleVariant) of object;

_T64 = _T15;

_T65 = procedure (p0 : TDataSet;
var p1 : WideString) of object;

_T66 = procedure (p0 : TDataSet;
p1 : TList) of object;

_T67 = function (p0 : TUpdateTree;
p1 : TDataSet;
p2 : TDataSet;
p3 : TUpdateMode): TDataSet of object;

_T68 = function (p0 : TDataSet;
p1 : TDataSet;
p2 : TUpdateMode): Boolean of object;

_T69 = procedure (const p0 : WideString) of object;

_T70 = procedure (p0 : OleVariant) of object;

_T71 = procedure (p0 : TDataSetProvider) of object;

_T72 = procedure (p0 : TCustomProvider) of object;

_T73 = _T57;

_T74 = procedure (p0 : TPacketDataSet) of object;

_T75 = function : Boolean of object;

_T76 = _T75;

_T77 = procedure (p0 : Boolean) of object;

_T78 = function : TUpdateKind of object;

_T79 = function : TDataSetProvider of object;

_T80 = procedure (p0 : TUpdateTree;
p1 : TWideStrings;
p2 : TParams;
p3 : TUpdateMode;
p4 : string) of object;

_T81 = procedure (p0 : TUpdateTree;
p1 : TWideStrings;
p2 : TParams) of object;

_T82 = procedure (p0 : TUpdateTree;
p1 : TWideStrings;
p2 : TParams;
p3 : string) of object;

_T83 = _T82;

_T84 = procedure (p0 : TUpdateTree;
p1 : TWideStrings;
p2 : TParams;
p3 : string;
p4 : TUpdateMode) of object;

_T85 = function (p0 : TField): Boolean of object;

_T86 = function (p0 : TField;
p1 : TUpdateMode): Boolean of object;

_T87 = procedure (p0 : TUpdateTree;
p1 : TUpdateKind) of object;

_T88 = procedure (p0 : TWideStringList;
p1 : TParams) of object;

_T89 = procedure (p0 : TWideStringList;
p1 : TParams;
p2 : TDataSet) of object;

_T90 = _T71;

_T91 = procedure (p0 : TUpdateTree;
p1 : TCustomResolver) of object;

_T92 = _T15;

_T93 = _T75;

_T94 = _T57;

_T95 = _T74;

_T96 = procedure (p0 : EUpdateError;
p1 : TResolverResponse) of object;

_T97 = procedure (p0 : TFetchOptions) of object;

function __TPutFieldInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPutFieldInfo__Wrapper.setFieldNo(const val : Integer);
begin
TPutFieldInfo(GetRecordPtr^).FieldNo := val;
end;
function __TPutFieldInfo__Wrapper.getFieldNo : Integer;
begin
result := TPutFieldInfo(GetRecordPtr^).FieldNo;
end;
procedure __TPutFieldInfo__Wrapper.setField(const val : TField);
begin
TPutFieldInfo(GetRecordPtr^).Field := val;
end;
function __TPutFieldInfo__Wrapper.getField : TField;
begin
result := TPutFieldInfo(GetRecordPtr^).Field;
end;
procedure __TPutFieldInfo__Wrapper.setDataSet(const val : TDataSet);
begin
TPutFieldInfo(GetRecordPtr^).DataSet := val;
end;
function __TPutFieldInfo__Wrapper.getDataSet : TDataSet;
begin
result := TPutFieldInfo(GetRecordPtr^).DataSet;
end;
procedure __TPutFieldInfo__Wrapper.setSize(const val : Integer);
begin
TPutFieldInfo(GetRecordPtr^).Size := val;
end;
function __TPutFieldInfo__Wrapper.getSize : Integer;
begin
result := TPutFieldInfo(GetRecordPtr^).Size;
end;
procedure __TPutFieldInfo__Wrapper.setIsDetail(const val : Boolean);
begin
TPutFieldInfo(GetRecordPtr^).IsDetail := val;
end;
function __TPutFieldInfo__Wrapper.getIsDetail : Boolean;
begin
result := TPutFieldInfo(GetRecordPtr^).IsDetail;
end;
procedure __TPutFieldInfo__Wrapper.setOpened(const val : Boolean);
begin
TPutFieldInfo(GetRecordPtr^).Opened := val;
end;
function __TPutFieldInfo__Wrapper.getOpened : Boolean;
begin
result := TPutFieldInfo(GetRecordPtr^).Opened;
end;
procedure __TPutFieldInfo__Wrapper.setLocalFieldIndex(const val : Integer);
begin
TPutFieldInfo(GetRecordPtr^).LocalFieldIndex := val;
end;
function __TPutFieldInfo__Wrapper.getLocalFieldIndex : Integer;
begin
result := TPutFieldInfo(GetRecordPtr^).LocalFieldIndex;
end;
function _TPutFieldInfo_ : IDispatch;
begin
  result := __TPutFieldInfo__Wrapper.Create;
end;
function __TCustomProvider__InternalGetParams__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList) : OleVariant;
var
__s0 : TParamTypes;
begin
if cArgs > 0 then
VarToSet(__s0,OleVariant(pargs^[0]),SizeOf(TParamTypes));
case cArgs of
0:
begin
result := __TCustomProvider__(__Instance).InternalGetParams;
end;
1:
begin
result := __TCustomProvider__(__Instance).InternalGetParams(__s0);
end;
end
end;

procedure __TDataPacketWriter__AddColumn__Wrapper(__Instance : TDataPacketWriter;
const p0 : IDispatch);
var
__p0 : ^TPutFieldInfo;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__TDataPacketWriter__(__Instance).AddColumn(__p0^);
end;

procedure __TDataPacketWriter__WriteMetaData__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
2:
begin
__TDataPacketWriter__(__Instance).WriteMetaData(TDataSet(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
end;
3:
begin
__TDataPacketWriter__(__Instance).WriteMetaData(TDataSet(VarToObject(OleVariant(pargs^[2]))),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure __TPacketDataSet__InitAltRecBuffers__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
0:
begin
TPacketDataSet(__Instance).InitAltRecBuffers;
end;
1:
begin
TPacketDataSet(__Instance).InitAltRecBuffers(OleVariant(pargs^[0]));
end;
end
end;

procedure __TSQLResolver__GenSelectSQL__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
4:
begin
__TSQLResolver__(__Instance).GenSelectSQL(TUpdateTree(VarToObject(OleVariant(pargs^[3]))),TStrings(VarToObject(OleVariant(pargs^[2]))),TParams(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
end;
5:
begin
__TSQLResolver__(__Instance).GenSelectSQL(TUpdateTree(VarToObject(OleVariant(pargs^[4]))),TStrings(VarToObject(OleVariant(pargs^[3]))),TParams(VarToObject(OleVariant(pargs^[2]))),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;


type __TPutFieldInfo__Wrapper__ = class(__TPutFieldInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPutFieldInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPutFieldInfoToVariant(var R : TPutFieldInfo) : OleVariant;
var
__rw : __TPutFieldInfo__Wrapper__;
begin
__rw := __TPutFieldInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPutFieldInfo(const V : OleVariant) : TPutFieldInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPutFieldInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetEDSWriter__ErrorCode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := EDSWriter(Instance).ErrorCode;
end;

function __DC__GetTBaseProvider__Resolver(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TBaseProvider(Instance).Resolver);
end;

function __DC__GetTBaseProvider__Options(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TProviderOptions;
begin
tmp := TBaseProvider(Instance).Options;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTBaseProvider__Options(Instance : TObject; Params : PVariantArgList);
var
  tmp : TProviderOptions;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TBaseProvider(Instance).Options:=tmp;
end;

function __DC__GetTBaseProvider__UpdateMode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TBaseProvider(Instance).UpdateMode;
end;

procedure __DC__SetTBaseProvider__UpdateMode(Instance : TObject; Params : PVariantArgList);
begin
TBaseProvider(Instance).UpdateMode:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomProvider__Data(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomProvider(Instance).Data;
end;

function __DC__GetTCustomProvider__Exported(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomProvider(Instance).Exported;
end;

procedure __DC__SetTCustomProvider__Exported(Instance : TObject; Params : PVariantArgList);
begin
TCustomProvider(Instance).Exported:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomResolver__Provider(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomResolver(Instance).Provider);
end;

function __DC__GetTCustomResolver__UpdateTree(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomResolver(Instance).UpdateTree);
end;

function __DC__GetTDataPacketWriter__Constraints(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataPacketWriter(Instance).Constraints;
end;

procedure __DC__SetTDataPacketWriter__Constraints(Instance : TObject; Params : PVariantArgList);
begin
TDataPacketWriter(Instance).Constraints:=OleVariant(Params^[0]);
end;

function __DC__GetTDataPacketWriter__PacketOptions(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TGetRecordOptions;
begin
tmp := TDataPacketWriter(Instance).PacketOptions;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTDataPacketWriter__PacketOptions(Instance : TObject; Params : PVariantArgList);
var
  tmp : TGetRecordOptions;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TDataPacketWriter(Instance).PacketOptions:=tmp;
end;

function __DC__GetTDataPacketWriter__Options(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TProviderOptions;
begin
tmp := TDataPacketWriter(Instance).Options;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTDataPacketWriter__Options(Instance : TObject; Params : PVariantArgList);
var
  tmp : TProviderOptions;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TDataPacketWriter(Instance).Options:=tmp;
end;

function __DC__GetTDataSetProvider__ActiveUpdateException(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDataSetProvider(Instance).ActiveUpdateException);
end;

function __DC__GetTDataSetProvider__OwnerData(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDataSetProvider(Instance).OwnerData;
end;

procedure __DC__SetTDataSetProvider__OwnerData(Instance : TObject; Params : PVariantArgList);
begin
TDataSetProvider(Instance).OwnerData:=OleVariant(Params^[0]);
end;

function __DC__GetTDataSetProvider__Params(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDataSetProvider(Instance).Params);
end;

function __DC__GetTPacketDataSet__NewValuesModified(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TPacketDataSet(Instance).NewValuesModified;
end;

function __DC__GetTPacketDataSet__StreamMetaData(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TPacketDataSet(Instance).StreamMetaData;
end;

procedure __DC__SetTPacketDataSet__StreamMetaData(Instance : TObject; Params : PVariantArgList);
begin
TPacketDataSet(Instance).StreamMetaData:=OleVariant(Params^[0]);
end;

function __DC__GetTPacketDataSet__UseCurValues(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TPacketDataSet(Instance).UseCurValues;
end;

procedure __DC__SetTPacketDataSet__UseCurValues(Instance : TObject; Params : PVariantArgList);
begin
TPacketDataSet(Instance).UseCurValues:=OleVariant(Params^[0]);
end;

function __DC__GetTUpdateTree__Data(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := PointerToVariant(TUpdateTree(Instance).Data);
end;

procedure __DC__SetTUpdateTree__Data(Instance : TObject; Params : PVariantArgList);
begin
TUpdateTree(Instance).Data:=VarToPointer(OleVariant(Params^[0]));
end;

function __DC__GetTUpdateTree__Delta(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TUpdateTree(Instance).Delta);
end;

procedure __DC__SetTUpdateTree__Delta(Instance : TObject; Params : PVariantArgList);
begin
TUpdateTree(Instance).Delta:=TPacketDataSet(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTUpdateTree__DetailCount(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TUpdateTree(Instance).DetailCount;
end;

function __DC__GetTUpdateTree__Details(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TUpdateTree(Instance).Details[OleVariant(Params^[0])]);
end;

function __DC__GetTUpdateTree__ErrorDS(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TUpdateTree(Instance).ErrorDS);
end;

procedure __DC__SetTUpdateTree__ErrorDS(Instance : TObject; Params : PVariantArgList);
begin
TUpdateTree(Instance).ErrorDS:=TPacketDataSet(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTUpdateTree__HasErrors(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TUpdateTree(Instance).HasErrors;
end;

function __DC__GetTUpdateTree__IsNested(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TUpdateTree(Instance).IsNested;
end;

function __DC__GetTUpdateTree__Name(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TUpdateTree(Instance).Name;
end;

procedure __DC__SetTUpdateTree__Name(Instance : TObject; Params : PVariantArgList);
begin
TUpdateTree(Instance).Name:=OleVariant(Params^[0]);
end;

function __DC__GetTUpdateTree__Parent(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TUpdateTree(Instance).Parent);
end;

function __DC__GetTUpdateTree__Resolver(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TUpdateTree(Instance).Resolver);
end;

function __DC__GetTUpdateTree__Source(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TUpdateTree(Instance).Source);
end;

procedure __DC__SetTUpdateTree__Source(Instance : TObject; Params : PVariantArgList);
begin
TUpdateTree(Instance).Source:=TDataSet(VarToObject(OleVariant(Params^[0])));
end;

procedure __RegisterProps;
begin
RegisterProperty(EDSWriter,'ErrorCode',__DC__GetEDSWriter__ErrorCode,nil);
RegisterProperty(TBaseProvider,'Resolver',__DC__GetTBaseProvider__Resolver,nil);
RegisterProperty(TBaseProvider,'Options',__DC__GetTBaseProvider__Options,__DC__SetTBaseProvider__Options);
RegisterProperty(TBaseProvider,'UpdateMode',__DC__GetTBaseProvider__UpdateMode,__DC__SetTBaseProvider__UpdateMode);
RegisterProperty(TCustomProvider,'Data',__DC__GetTCustomProvider__Data,nil);
RegisterProperty(TCustomProvider,'Exported',__DC__GetTCustomProvider__Exported,__DC__SetTCustomProvider__Exported);
RegisterProperty(TCustomResolver,'Provider',__DC__GetTCustomResolver__Provider,nil);
RegisterProperty(TCustomResolver,'UpdateTree',__DC__GetTCustomResolver__UpdateTree,nil);
RegisterProperty(TDataPacketWriter,'Constraints',__DC__GetTDataPacketWriter__Constraints,__DC__SetTDataPacketWriter__Constraints);
RegisterProperty(TDataPacketWriter,'PacketOptions',__DC__GetTDataPacketWriter__PacketOptions,__DC__SetTDataPacketWriter__PacketOptions);
RegisterProperty(TDataPacketWriter,'Options',__DC__GetTDataPacketWriter__Options,__DC__SetTDataPacketWriter__Options);
RegisterProperty(TDataSetProvider,'ActiveUpdateException',__DC__GetTDataSetProvider__ActiveUpdateException,nil);
RegisterProperty(TDataSetProvider,'OwnerData',__DC__GetTDataSetProvider__OwnerData,__DC__SetTDataSetProvider__OwnerData);
RegisterProperty(TDataSetProvider,'Params',__DC__GetTDataSetProvider__Params,nil);
RegisterProperty(TPacketDataSet,'NewValuesModified',__DC__GetTPacketDataSet__NewValuesModified,nil);
RegisterProperty(TPacketDataSet,'StreamMetaData',__DC__GetTPacketDataSet__StreamMetaData,__DC__SetTPacketDataSet__StreamMetaData);
RegisterProperty(TPacketDataSet,'UseCurValues',__DC__GetTPacketDataSet__UseCurValues,__DC__SetTPacketDataSet__UseCurValues);
RegisterProperty(TUpdateTree,'Data',__DC__GetTUpdateTree__Data,__DC__SetTUpdateTree__Data);
RegisterProperty(TUpdateTree,'Delta',__DC__GetTUpdateTree__Delta,__DC__SetTUpdateTree__Delta);
RegisterProperty(TUpdateTree,'DetailCount',__DC__GetTUpdateTree__DetailCount,nil);
RegisterIndexedProperty(TUpdateTree,'Details',1,False,__DC__GetTUpdateTree__Details,nil);
RegisterProperty(TUpdateTree,'ErrorDS',__DC__GetTUpdateTree__ErrorDS,__DC__SetTUpdateTree__ErrorDS);
RegisterProperty(TUpdateTree,'HasErrors',__DC__GetTUpdateTree__HasErrors,nil);
RegisterProperty(TUpdateTree,'IsNested',__DC__GetTUpdateTree__IsNested,nil);
RegisterProperty(TUpdateTree,'Name',__DC__GetTUpdateTree__Name,__DC__SetTUpdateTree__Name);
RegisterProperty(TUpdateTree,'Parent',__DC__GetTUpdateTree__Parent,nil);
RegisterProperty(TUpdateTree,'Resolver',__DC__GetTUpdateTree__Resolver,nil);
RegisterProperty(TUpdateTree,'Source',__DC__GetTUpdateTree__Source,__DC__SetTUpdateTree__Source);
end;

function __DC__GetProvider__InformixLob(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := Provider.InformixLob;
end;

procedure __DC__SetProvider__InformixLob(Instance : TObject; Params : PVariantArgList);
begin
Provider.InformixLob:=OleVariant(Params^[0]);
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('InformixLob',__DC__GetProvider__InformixLob,__DC__SetProvider__InformixLob));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..28] of string = (
'grMetaData'
,'grReset'
,'grXML'
,'grXMLUTF8'
,'poFetchBlobsOnDemand'
,'poFetchDetailsOnDemand'
,'poIncFieldProps'
,'poCascadeDeletes'
,'poCascadeUpdates'
,'poReadOnly'
,'poAllowMultiRecordUpdates'
,'poDisableInserts'
,'poDisableEdits'
,'poDisableDeletes'
,'poNoReset'
,'poAutoRefresh'
,'poPropogateChanges'
,'poAllowCommandText'
,'poRetainServerOrder'
,'poUseQuoteChar'
,'ResetOption'
,'MetaDataOption'
,'XMLOption'
,'XMLUTF8Option'
,'rrSkip'
,'rrAbort'
,'rrMerge'
,'rrApply'
,'rrIgnore'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,grMetaData));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,grReset));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,grXML));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,grXMLUTF8));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,poFetchBlobsOnDemand));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,poFetchDetailsOnDemand));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,poIncFieldProps));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,poCascadeDeletes));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,poCascadeUpdates));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,poReadOnly));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,poAllowMultiRecordUpdates));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,poDisableInserts));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,poDisableEdits));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,poDisableDeletes));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,poNoReset));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,poAutoRefresh));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,poPropogateChanges));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,poAllowCommandText));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,poRetainServerOrder));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,poUseQuoteChar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,ResetOption));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,MetaDataOption));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,XMLOption));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,XMLUTF8Option));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,rrSkip));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,rrAbort));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,rrMerge));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,rrApply));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,rrIgnore));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..12] of TClass = (
EDSWriter,
TBaseProvider,
TCustomPacketWriter,
TCustomProvider,
TCustomResolver,
TDataPacketWriter,
TDataSetProvider,
TDataSetResolver,
TLocalAppServer,
TPacketDataSet,
TProvider,
TSQLResolver,
TUpdateTree
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..4] of string = (
'TPutFieldInfo'
,'GetObjectProperty'
,'GetStringProperty'
,'VarArrayFromStrings'
,'VarArrayFromWideStrings'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TPutFieldInfo_)));
RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T0),[
TypeInfo(TPersistent),
TypeInfo(string),TypeInfo(TObject)],Addr(GetObjectProperty),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T1),[
TypeInfo(TPersistent),
TypeInfo(string),TypeInfo(WideString)],Addr(GetStringProperty),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T2),[
TypeInfo(TStrings),TypeInfo(Variant)],Addr(VarArrayFromStrings),cRegister);

//RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T3),[
//TypeInfo(TWideStrings),TypeInfo(Variant)],Addr(VarArrayFromWideStrings),cRegister);

RegisterProc(EDSWriter,'Create',mtConstructor,TypeInfo(_T4),[
TypeInfo(string),
TypeInfo(Integer)],Addr(EDSWriter.Create),cRegister);

//RegRegisterMethod(TBaseProvider,'CreateResolver',TypeInfo(_T5),[TypeInfo(TCustomResolver)], pointer(132));
RegRegisterMethod(TBaseProvider,'CreateResolver',TypeInfo(_T5),[TypeInfo(TCustomResolver)],  getVMTProcAddr('TBaseProvider','CreateResolver',132));


//RegRegisterMethod(TBaseProvider,'CreateDataPacket',TypeInfo(_T6),[TypeInfo(TGetRecordOptions),TypeInfo(TProviderOptions),TypeInfo(Integer),TypeInfo(OleVariant)], pointer(136));
RegRegisterMethod(TBaseProvider,'CreateDataPacket',TypeInfo(_T6),[TypeInfo(TGetRecordOptions),TypeInfo(TProviderOptions),TypeInfo(Integer),TypeInfo(OleVariant)],  getVMTProcAddr('TBaseProvider','CreateDataPacket',136));


//RegRegisterMethod(TBaseProvider,'DoBeforeCommit',TypeInfo(_T7),[TypeInfo(TPacketDataSet),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(OleVariant)], pointer(140));
RegRegisterMethod(TBaseProvider,'DoBeforeCommit',TypeInfo(_T7),[TypeInfo(TPacketDataSet),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(OleVariant)],  getVMTProcAddr('TBaseProvider','DoBeforeCommit',140));


//RegRegisterMethod(TBaseProvider,'DoOnGetData',TypeInfo(_T8),[TypeInfo(OleVariant)], pointer(144));
RegRegisterMethod(TBaseProvider,'DoOnGetData',TypeInfo(_T8),[TypeInfo(OleVariant)],  getVMTProcAddr('TBaseProvider','DoOnGetData',144));


//RegRegisterMethod(TBaseProvider,'DoBeforeUpdateRecord',TypeInfo(_T9),[TypeInfo(TDataSet),TypeInfo(TCustomClientDataSet),TypeInfo(TUpdateKind),TypeInfo(Boolean)], pointer(148));
RegRegisterMethod(TBaseProvider,'DoBeforeUpdateRecord',TypeInfo(_T9),[TypeInfo(TDataSet),TypeInfo(TCustomClientDataSet),TypeInfo(TUpdateKind),TypeInfo(Boolean)],  getVMTProcAddr('TBaseProvider','DoBeforeUpdateRecord',148));


//RegRegisterMethod(TBaseProvider,'DoAfterUpdateRecord',TypeInfo(_T10),[TypeInfo(TDataSet),TypeInfo(TCustomClientDataSet),TypeInfo(TUpdateKind)], pointer(152));
RegRegisterMethod(TBaseProvider,'DoAfterUpdateRecord',TypeInfo(_T10),[TypeInfo(TDataSet),TypeInfo(TCustomClientDataSet),TypeInfo(TUpdateKind)],  getVMTProcAddr('TBaseProvider','DoAfterUpdateRecord',152));


//RegRegisterMethod(TBaseProvider,'LocateRecord',TypeInfo(_T11),[TypeInfo(TDataSet),TypeInfo(TDataSet)], pointer(156));
RegRegisterMethod(TBaseProvider,'LocateRecord',TypeInfo(_T11),[TypeInfo(TDataSet),TypeInfo(TDataSet)],  getVMTProcAddr('TBaseProvider','LocateRecord',156));


//RegRegisterMethod(TBaseProvider,'UpdateRecord',TypeInfo(_T12),[TypeInfo(TDataSet),TypeInfo(TDataSet),TypeInfo(Boolean),TypeInfo(Boolean)], pointer(160));
RegRegisterMethod(TBaseProvider,'UpdateRecord',TypeInfo(_T12),[TypeInfo(TDataSet),TypeInfo(TDataSet),TypeInfo(Boolean),TypeInfo(Boolean)],  getVMTProcAddr('TBaseProvider','UpdateRecord',160));


//RegRegisterMethod(TBaseProvider,'FetchDetails',TypeInfo(_T13),[TypeInfo(TDataSet),TypeInfo(TDataSet)], pointer(164));
RegRegisterMethod(TBaseProvider,'FetchDetails',TypeInfo(_T13),[TypeInfo(TDataSet),TypeInfo(TDataSet)],  getVMTProcAddr('TBaseProvider','FetchDetails',164));


//RegRegisterMethod(TCustomPacketWriter,'AddAttribute',TypeInfo(_T14),[TypeInfo(TPcktAttrArea),TypeInfo(string),TypeInfo(OleVariant),TypeInfo(Boolean)], pointer(0));
RegRegisterMethod(TCustomPacketWriter,'AddAttribute',TypeInfo(_T14),[TypeInfo(TPcktAttrArea),TypeInfo(string),TypeInfo(OleVariant),TypeInfo(Boolean)],  getVMTProcAddr('TCustomPacketWriter','AddAttribute',0));


RegisterProc(TCustomPacketWriter,'Create',mtConstructor,TypeInfo(_T15),NoParams, pointer(4),cRegister);

//RegRegisterMethod(TCustomProvider,'DoApplyUpdates',TypeInfo(_T16),[TypeInfo(OleVariant),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(OleVariant),TypeInfo(OleVariant)], pointer(48));
RegRegisterMethod(TCustomProvider,'DoApplyUpdates',TypeInfo(_T16),[TypeInfo(OleVariant),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(OleVariant),TypeInfo(OleVariant)],  getVMTProcAddr('TCustomProvider','DoApplyUpdates',48));


//RegRegisterMethod(TCustomProvider,'DoGetRecords',TypeInfo(_T17),[TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(WideString),TypeInfo(OleVariant),TypeInfo(OleVariant),TypeInfo(OleVariant)], pointer(52));
RegRegisterMethod(TCustomProvider,'DoGetRecords',TypeInfo(_T17),[TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(WideString),TypeInfo(OleVariant),TypeInfo(OleVariant),TypeInfo(OleVariant)],  getVMTProcAddr('TCustomProvider','DoGetRecords',52));


//RegRegisterMethod(TCustomProvider,'InternalApplyUpdates',TypeInfo(_T18),[TypeInfo(OleVariant),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(OleVariant)], pointer(56));
RegRegisterMethod(TCustomProvider,'InternalApplyUpdates',TypeInfo(_T18),[TypeInfo(OleVariant),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(OleVariant)],  getVMTProcAddr('TCustomProvider','InternalApplyUpdates',56));


//RegRegisterMethod(TCustomProvider,'InternalGetRecords',TypeInfo(_T19),[TypeInfo(Integer),TypeInfo(Integer),TypeInfo(TGetRecordOptions),TypeInfo(WideString),TypeInfo(OleVariant),TypeInfo(OleVariant)], pointer(60));
RegRegisterMethod(TCustomProvider,'InternalGetRecords',TypeInfo(_T19),[TypeInfo(Integer),TypeInfo(Integer),TypeInfo(TGetRecordOptions),TypeInfo(WideString),TypeInfo(OleVariant),TypeInfo(OleVariant)],  getVMTProcAddr('TCustomProvider','InternalGetRecords',60));


//RegRegisterMethod(TCustomProvider,'InternalRowRequest',TypeInfo(_T20),[TypeInfo(OleVariant),TypeInfo(TFetchOptions),TypeInfo(OleVariant)], pointer(64));
RegRegisterMethod(TCustomProvider,'InternalRowRequest',TypeInfo(_T20),[TypeInfo(OleVariant),TypeInfo(TFetchOptions),TypeInfo(OleVariant)],  getVMTProcAddr('TCustomProvider','InternalRowRequest',64));


//RegRegisterMethod(TCustomProvider,'InternalExecute',TypeInfo(_T21),[TypeInfo(WideString),TypeInfo(OleVariant)], pointer(68));
RegRegisterMethod(TCustomProvider,'InternalExecute',TypeInfo(_T21),[TypeInfo(WideString),TypeInfo(OleVariant)],  getVMTProcAddr('TCustomProvider','InternalExecute',68));


RegisterProc(TCustomProvider,'InternalGetParams',mtScriptMethod,TypeInfo(_T22),[
TypeInfo(TParamTypes),TypeInfo(OleVariant)],Addr(__TCustomProvider__InternalGetParams__Wrapper),cRegister);

//RegRegisterMethod(TCustomProvider,'DoAfterApplyUpdates',TypeInfo(_T23),[TypeInfo(OleVariant)], pointer(76));
RegRegisterMethod(TCustomProvider,'DoAfterApplyUpdates',TypeInfo(_T23),[TypeInfo(OleVariant)],  getVMTProcAddr('TCustomProvider','DoAfterApplyUpdates',76));


//RegRegisterMethod(TCustomProvider,'DoBeforeApplyUpdates',TypeInfo(_T24),[TypeInfo(OleVariant)], pointer(80));
RegRegisterMethod(TCustomProvider,'DoBeforeApplyUpdates',TypeInfo(_T24),[TypeInfo(OleVariant)],  getVMTProcAddr('TCustomProvider','DoBeforeApplyUpdates',80));


//RegRegisterMethod(TCustomProvider,'DoAfterExecute',TypeInfo(_T25),[TypeInfo(OleVariant)], pointer(84));
RegRegisterMethod(TCustomProvider,'DoAfterExecute',TypeInfo(_T25),[TypeInfo(OleVariant)],  getVMTProcAddr('TCustomProvider','DoAfterExecute',84));


//RegRegisterMethod(TCustomProvider,'DoBeforeExecute',TypeInfo(_T26),[TypeInfo(WideString),TypeInfo(OleVariant),TypeInfo(OleVariant)], pointer(88));
RegRegisterMethod(TCustomProvider,'DoBeforeExecute',TypeInfo(_T26),[TypeInfo(WideString),TypeInfo(OleVariant),TypeInfo(OleVariant)],  getVMTProcAddr('TCustomProvider','DoBeforeExecute',88));


//RegRegisterMethod(TCustomProvider,'DoAfterGetParams',TypeInfo(_T27),[TypeInfo(OleVariant)], pointer(92));
RegRegisterMethod(TCustomProvider,'DoAfterGetParams',TypeInfo(_T27),[TypeInfo(OleVariant)],  getVMTProcAddr('TCustomProvider','DoAfterGetParams',92));


//RegRegisterMethod(TCustomProvider,'DoBeforeGetParams',TypeInfo(_T28),[TypeInfo(OleVariant)], pointer(96));
RegRegisterMethod(TCustomProvider,'DoBeforeGetParams',TypeInfo(_T28),[TypeInfo(OleVariant)],  getVMTProcAddr('TCustomProvider','DoBeforeGetParams',96));


//RegRegisterMethod(TCustomProvider,'DoAfterGetRecords',TypeInfo(_T29),[TypeInfo(OleVariant)], pointer(100));
RegRegisterMethod(TCustomProvider,'DoAfterGetRecords',TypeInfo(_T29),[TypeInfo(OleVariant)],  getVMTProcAddr('TCustomProvider','DoAfterGetRecords',100));


//RegRegisterMethod(TCustomProvider,'DoBeforeGetRecords',TypeInfo(_T30),[TypeInfo(Integer),TypeInfo(Integer),TypeInfo(WideString),TypeInfo(OleVariant),TypeInfo(OleVariant)], pointer(104));
RegRegisterMethod(TCustomProvider,'DoBeforeGetRecords',TypeInfo(_T30),[TypeInfo(Integer),TypeInfo(Integer),TypeInfo(WideString),TypeInfo(OleVariant),TypeInfo(OleVariant)],  getVMTProcAddr('TCustomProvider','DoBeforeGetRecords',104));


//RegRegisterMethod(TCustomProvider,'DoAfterRowRequest',TypeInfo(_T31),[TypeInfo(OleVariant)], pointer(108));
RegRegisterMethod(TCustomProvider,'DoAfterRowRequest',TypeInfo(_T31),[TypeInfo(OleVariant)],  getVMTProcAddr('TCustomProvider','DoAfterRowRequest',108));


//RegRegisterMethod(TCustomProvider,'DoBeforeRowRequest',TypeInfo(_T32),[TypeInfo(OleVariant)], pointer(112));
RegRegisterMethod(TCustomProvider,'DoBeforeRowRequest',TypeInfo(_T32),[TypeInfo(OleVariant)],  getVMTProcAddr('TCustomProvider','DoBeforeRowRequest',112));


RegRegisterMethod(TCustomProvider,'ApplyUpdates',TypeInfo(_T33),[
TypeInfo(OleVariant),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(OleVariant)],Addr(TCustomProvider.ApplyUpdates));

RegRegisterMethod(TCustomProvider,'GetRecords',TypeInfo(_T34),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(OleVariant)],Addr(TCustomProvider.GetRecords));

//RegRegisterMethod(TCustomProvider,'RowRequest',TypeInfo(_T35),[TypeInfo(OleVariant),TypeInfo(Integer),TypeInfo(OleVariant),TypeInfo(OleVariant)], pointer(116));
RegRegisterMethod(TCustomProvider,'RowRequest',TypeInfo(_T35),[TypeInfo(OleVariant),TypeInfo(Integer),TypeInfo(OleVariant),TypeInfo(OleVariant)],  getVMTProcAddr('TCustomProvider','RowRequest',116));


//RegRegisterMethod(TCustomProvider,'Execute',TypeInfo(_T36),[TypeInfo(WideString),TypeInfo(OleVariant),TypeInfo(OleVariant)], pointer(120));
RegRegisterMethod(TCustomProvider,'Execute',TypeInfo(_T36),[TypeInfo(WideString),TypeInfo(OleVariant),TypeInfo(OleVariant)],  getVMTProcAddr('TCustomProvider','Execute',120));


//RegRegisterMethod(TCustomProvider,'GetParams',TypeInfo(_T37),[TypeInfo(OleVariant),TypeInfo(OleVariant)], pointer(124));
RegRegisterMethod(TCustomProvider,'GetParams',TypeInfo(_T37),[TypeInfo(OleVariant),TypeInfo(OleVariant)],  getVMTProcAddr('TCustomProvider','GetParams',124));


//RegRegisterMethod(TCustomProvider,'DataRequest',TypeInfo(_T38),[TypeInfo(OleVariant),TypeInfo(OleVariant)], pointer(128));
RegRegisterMethod(TCustomProvider,'DataRequest',TypeInfo(_T38),[TypeInfo(OleVariant),TypeInfo(OleVariant)],  getVMTProcAddr('TCustomProvider','DataRequest',128));


//RegRegisterMethod(TCustomResolver,'HandleUpdateError',TypeInfo(_T39),[TypeInfo(TUpdateTree),TypeInfo(EUpdateError),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Boolean)], pointer(48));
RegRegisterMethod(TCustomResolver,'HandleUpdateError',TypeInfo(_T39),[TypeInfo(TUpdateTree),TypeInfo(EUpdateError),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(Boolean)],  getVMTProcAddr('TCustomResolver','HandleUpdateError',48));


//RegRegisterMethod(TCustomResolver,'LogUpdateRecord',TypeInfo(_T40),[TypeInfo(TUpdateTree)], pointer(52));
RegRegisterMethod(TCustomResolver,'LogUpdateRecord',TypeInfo(_T40),[TypeInfo(TUpdateTree)],  getVMTProcAddr('TCustomResolver','LogUpdateRecord',52));


//RegRegisterMethod(TCustomResolver,'LogUpdateError',TypeInfo(_T41),[TypeInfo(TUpdateTree),TypeInfo(EUpdateError),TypeInfo(TResolverResponse)], pointer(56));
RegRegisterMethod(TCustomResolver,'LogUpdateError',TypeInfo(_T41),[TypeInfo(TUpdateTree),TypeInfo(EUpdateError),TypeInfo(TResolverResponse)],  getVMTProcAddr('TCustomResolver','LogUpdateError',56));


//RegRegisterMethod(TCustomResolver,'BeginUpdate',TypeInfo(_T42),NoParams, pointer(60));
RegRegisterMethod(TCustomResolver,'BeginUpdate',TypeInfo(_T42),NoParams,  getVMTProcAddr('TCustomResolver','BeginUpdate',60));


//RegRegisterMethod(TCustomResolver,'EndUpdate',TypeInfo(_T43),NoParams, pointer(64));
RegRegisterMethod(TCustomResolver,'EndUpdate',TypeInfo(_T43),NoParams,  getVMTProcAddr('TCustomResolver','EndUpdate',64));


//RegRegisterMethod(TCustomResolver,'DoUpdate',TypeInfo(_T44),[TypeInfo(TUpdateTree)], pointer(68));
RegRegisterMethod(TCustomResolver,'DoUpdate',TypeInfo(_T44),[TypeInfo(TUpdateTree)],  getVMTProcAddr('TCustomResolver','DoUpdate',68));


//RegRegisterMethod(TCustomResolver,'DoDelete',TypeInfo(_T45),[TypeInfo(TUpdateTree)], pointer(72));
RegRegisterMethod(TCustomResolver,'DoDelete',TypeInfo(_T45),[TypeInfo(TUpdateTree)],  getVMTProcAddr('TCustomResolver','DoDelete',72));


//RegRegisterMethod(TCustomResolver,'DoInsert',TypeInfo(_T46),[TypeInfo(TUpdateTree)], pointer(76));
RegRegisterMethod(TCustomResolver,'DoInsert',TypeInfo(_T46),[TypeInfo(TUpdateTree)],  getVMTProcAddr('TCustomResolver','DoInsert',76));


//RegRegisterMethod(TCustomResolver,'InitializeConflictBuffer',TypeInfo(_T47),[TypeInfo(TUpdateTree)], pointer(80));
RegRegisterMethod(TCustomResolver,'InitializeConflictBuffer',TypeInfo(_T47),[TypeInfo(TUpdateTree)],  getVMTProcAddr('TCustomResolver','InitializeConflictBuffer',80));


RegisterProc(TCustomResolver,'Create',mtConstructor,TypeInfo(_T48),[
TypeInfo(TBaseProvider)],Addr(TCustomResolver.Create),cRegister);

//RegRegisterMethod(TCustomResolver,'ApplyUpdates',TypeInfo(_T49),[TypeInfo(OleVariant),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(OleVariant)], pointer(84));
RegRegisterMethod(TCustomResolver,'ApplyUpdates',TypeInfo(_T49),[TypeInfo(OleVariant),TypeInfo(Integer),TypeInfo(Integer),TypeInfo(OleVariant)],  getVMTProcAddr('TCustomResolver','ApplyUpdates',84));


//RegRegisterMethod(TCustomResolver,'FreeTreeData',TypeInfo(_T50),[TypeInfo(TUpdateTree)], pointer(88));
RegRegisterMethod(TCustomResolver,'FreeTreeData',TypeInfo(_T50),[TypeInfo(TUpdateTree)],  getVMTProcAddr('TCustomResolver','FreeTreeData',88));


//RegRegisterMethod(TCustomResolver,'InitKeyFields',TypeInfo(_T51),[TypeInfo(TUpdateTree),TypeInfo(TPacketDataSet)], pointer(92));
RegRegisterMethod(TCustomResolver,'InitKeyFields',TypeInfo(_T51),[TypeInfo(TUpdateTree),TypeInfo(TPacketDataSet)],  getVMTProcAddr('TCustomResolver','InitKeyFields',92));


//RegRegisterMethod(TCustomResolver,'InitTreeData',TypeInfo(_T52),[TypeInfo(TUpdateTree)], pointer(96));
RegRegisterMethod(TCustomResolver,'InitTreeData',TypeInfo(_T52),[TypeInfo(TUpdateTree)],  getVMTProcAddr('TCustomResolver','InitTreeData',96));


//RegRegisterMethod(TCustomResolver,'InternalBeforeResolve',TypeInfo(_T53),[TypeInfo(TUpdateTree)], pointer(100));
RegRegisterMethod(TCustomResolver,'InternalBeforeResolve',TypeInfo(_T53),[TypeInfo(TUpdateTree)],  getVMTProcAddr('TCustomResolver','InternalBeforeResolve',100));


//RegRegisterMethod(TCustomResolver,'InternalUpdateRecord',TypeInfo(_T54),[TypeInfo(TUpdateTree),TypeInfo(Boolean)], pointer(104));
RegRegisterMethod(TCustomResolver,'InternalUpdateRecord',TypeInfo(_T54),[TypeInfo(TUpdateTree),TypeInfo(Boolean)],  getVMTProcAddr('TCustomResolver','InternalUpdateRecord',104));


//RegRegisterMethod(TCustomResolver,'RowRequest',TypeInfo(_T55),[TypeInfo(OleVariant),TypeInfo(TFetchOptions),TypeInfo(OleVariant)], pointer(108));
RegRegisterMethod(TCustomResolver,'RowRequest',TypeInfo(_T55),[TypeInfo(OleVariant),TypeInfo(TFetchOptions),TypeInfo(OleVariant)],  getVMTProcAddr('TCustomResolver','RowRequest',108));


//RegRegisterMethod(TDataPacketWriter,'AddColumn',TypeInfo(_T56),[TypeInfo(IDispatch)], pointer(8));
RegRegisterMethod(TDataPacketWriter,'AddColumn',TypeInfo(_T56),[TypeInfo(IDispatch)],  getVMTProcAddr('TDataPacketWriter','AddColumn',8));


//RegRegisterMethod(TDataPacketWriter,'AddConstraints',TypeInfo(_T57),[TypeInfo(TDataSet)], pointer(12));
RegRegisterMethod(TDataPacketWriter,'AddConstraints',TypeInfo(_T57),[TypeInfo(TDataSet)],  getVMTProcAddr('TDataPacketWriter','AddConstraints',12));


//RegRegisterMethod(TDataPacketWriter,'AddDataSetAttributes',TypeInfo(_T58),[TypeInfo(TDataSet)], pointer(16));
RegRegisterMethod(TDataPacketWriter,'AddDataSetAttributes',TypeInfo(_T58),[TypeInfo(TDataSet)],  getVMTProcAddr('TDataPacketWriter','AddDataSetAttributes',16));


//RegRegisterMethod(TDataPacketWriter,'AddFieldLinks',TypeInfo(_T59),[DynArrayInfo(TypeInfo(TInfoArray))], pointer(20));
RegRegisterMethod(TDataPacketWriter,'AddFieldLinks',TypeInfo(_T59),[DynArrayInfo(TypeInfo(TInfoArray))],  getVMTProcAddr('TDataPacketWriter','AddFieldLinks',20));


//RegRegisterMethod(TDataPacketWriter,'AddIndexDefs',TypeInfo(_T60),[TypeInfo(TDataSet),DynArrayInfo(TypeInfo(TInfoArray))], pointer(24));
RegRegisterMethod(TDataPacketWriter,'AddIndexDefs',TypeInfo(_T60),[TypeInfo(TDataSet),DynArrayInfo(TypeInfo(TInfoArray))],  getVMTProcAddr('TDataPacketWriter','AddIndexDefs',24));


RegisterProc(TDataPacketWriter,'WriteMetaData',mtScriptMethod,TypeInfo(_T61),[
TypeInfo(TDataSet),
DynArrayInfo(TypeInfo(TInfoArray)),
TypeInfo(Boolean)],Addr(__TDataPacketWriter__WriteMetaData__Wrapper),cRegister);

//RegRegisterMethod(TDataPacketWriter,'WriteDataSet',TypeInfo(_T62),[TypeInfo(TDataSet),DynArrayInfo(TypeInfo(TInfoArray)),TypeInfo(Integer),TypeInfo(Integer)], pointer(32));
RegRegisterMethod(TDataPacketWriter,'WriteDataSet',TypeInfo(_T62),[TypeInfo(TDataSet),DynArrayInfo(TypeInfo(TInfoArray)),TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TDataPacketWriter','WriteDataSet',32));


//RegRegisterMethod(TDataPacketWriter,'GetDataPacket',TypeInfo(_T63),[TypeInfo(TDataSet),TypeInfo(Integer),TypeInfo(OleVariant)], pointer(36));
RegRegisterMethod(TDataPacketWriter,'GetDataPacket',TypeInfo(_T63),[TypeInfo(TDataSet),TypeInfo(Integer),TypeInfo(OleVariant)],  getVMTProcAddr('TDataPacketWriter','GetDataPacket',36));


RegRegisterMethod(TDataPacketWriter,'Reset',TypeInfo(_T64),NoParams,Addr(TDataPacketWriter.Reset));

//RegRegisterMethod(TDataSetProvider,'DoGetTableName',TypeInfo(_T65),[TypeInfo(TDataSet),TypeInfo(WideString)], pointer(168));
RegRegisterMethod(TDataSetProvider,'DoGetTableName',TypeInfo(_T65),[TypeInfo(TDataSet),TypeInfo(WideString)],  getVMTProcAddr('TDataSetProvider','DoGetTableName',168));


//RegRegisterMethod(TDataSetProvider,'DoGetProviderAttributes',TypeInfo(_T66),[TypeInfo(TDataSet),TypeInfo(TList)], pointer(172));
RegRegisterMethod(TDataSetProvider,'DoGetProviderAttributes',TypeInfo(_T66),[TypeInfo(TDataSet),TypeInfo(TList)],  getVMTProcAddr('TDataSetProvider','DoGetProviderAttributes',172));


//RegRegisterMethod(TDataSetProvider,'GetDataSetFromDelta',TypeInfo(_T67),[TypeInfo(TUpdateTree),TypeInfo(TDataSet),TypeInfo(TDataSet),TypeInfo(TUpdateMode),TypeInfo(TDataSet)], pointer(176));
RegRegisterMethod(TDataSetProvider,'GetDataSetFromDelta',TypeInfo(_T67),[TypeInfo(TUpdateTree),TypeInfo(TDataSet),TypeInfo(TDataSet),TypeInfo(TUpdateMode),TypeInfo(TDataSet)],  getVMTProcAddr('TDataSetProvider','GetDataSetFromDelta',176));


//RegRegisterMethod(TDataSetProvider,'FindRecord',TypeInfo(_T68),[TypeInfo(TDataSet),TypeInfo(TDataSet),TypeInfo(TUpdateMode),TypeInfo(Boolean)], pointer(180));
RegRegisterMethod(TDataSetProvider,'FindRecord',TypeInfo(_T68),[TypeInfo(TDataSet),TypeInfo(TDataSet),TypeInfo(TUpdateMode),TypeInfo(Boolean)],  getVMTProcAddr('TDataSetProvider','FindRecord',180));


//RegRegisterMethod(TDataSetProvider,'SetCommandText',TypeInfo(_T69),[TypeInfo(WideString)], pointer(184));
RegRegisterMethod(TDataSetProvider,'SetCommandText',TypeInfo(_T69),[TypeInfo(WideString)],  getVMTProcAddr('TDataSetProvider','SetCommandText',184));


//RegRegisterMethod(TDataSetProvider,'SetParams',TypeInfo(_T70),[TypeInfo(OleVariant)], pointer(188));
RegRegisterMethod(TDataSetProvider,'SetParams',TypeInfo(_T70),[TypeInfo(OleVariant)],  getVMTProcAddr('TDataSetProvider','SetParams',188));


RegisterProc(TDataSetResolver,'Create',mtConstructor,TypeInfo(_T71),[
TypeInfo(TDataSetProvider)],Addr(TDataSetResolver.Create),cRegister);

RegisterProc(TLocalAppServer,'Create',mtConstructor,TypeInfo(_T72),[
TypeInfo(TCustomProvider)],Addr(TLocalAppServer.Create),cRegister);

RegRegisterMethod(TPacketDataSet,'AssignCurValues',TypeInfo(_T73),[
TypeInfo(TDataSet)],Addr(TPacketDataSet.AssignCurValues));

RegRegisterMethod(TPacketDataSet,'CreateFromDelta',TypeInfo(_T74),[
TypeInfo(TPacketDataSet)],Addr(TPacketDataSet.CreateFromDelta));

RegRegisterMethod(TPacketDataSet,'HasCurValues',TypeInfo(_T75),[TypeInfo(Boolean)],Addr(TPacketDataSet.HasCurValues));

RegRegisterMethod(TPacketDataSet,'HasMergeConflicts',TypeInfo(_T76),[TypeInfo(Boolean)],Addr(TPacketDataSet.HasMergeConflicts));

RegisterProc(TPacketDataSet,'InitAltRecBuffers',mtScriptMethod,TypeInfo(_T77),[
TypeInfo(Boolean)],Addr(__TPacketDataSet__InitAltRecBuffers__Wrapper),cRegister);

RegRegisterMethod(TPacketDataSet,'UpdateKind',TypeInfo(_T78),[TypeInfo(TUpdateKind)],Addr(TPacketDataSet.UpdateKind));

//RegRegisterMethod(TSQLResolver,'GetProvider',TypeInfo(_T79),[TypeInfo(TDataSetProvider)], pointer(112));
RegRegisterMethod(TSQLResolver,'GetProvider',TypeInfo(_T79),[TypeInfo(TDataSetProvider)],  getVMTProcAddr('TSQLResolver','GetProvider',112));


//RegRegisterMethod(TSQLResolver,'GenWhereSQL',TypeInfo(_T80),[TypeInfo(TUpdateTree),TypeInfo(TWideStrings),TypeInfo(TParams),TypeInfo(TUpdateMode),TypeInfo(string)], pointer(116));
RegRegisterMethod(TSQLResolver,'GenWhereSQL',TypeInfo(_T80),[TypeInfo(TUpdateTree),TypeInfo(TWideStrings),TypeInfo(TParams),TypeInfo(TUpdateMode),TypeInfo(string)],  getVMTProcAddr('TSQLResolver','GenWhereSQL',116));


//RegRegisterMethod(TSQLResolver,'GenInsertSQL',TypeInfo(_T81),[TypeInfo(TUpdateTree),TypeInfo(TWideStrings),TypeInfo(TParams)], pointer(120));
RegRegisterMethod(TSQLResolver,'GenInsertSQL',TypeInfo(_T81),[TypeInfo(TUpdateTree),TypeInfo(TWideStrings),TypeInfo(TParams)],  getVMTProcAddr('TSQLResolver','GenInsertSQL',120));


//RegRegisterMethod(TSQLResolver,'GenDeleteSQL',TypeInfo(_T82),[TypeInfo(TUpdateTree),TypeInfo(TWideStrings),TypeInfo(TParams),TypeInfo(string)], pointer(124));
RegRegisterMethod(TSQLResolver,'GenDeleteSQL',TypeInfo(_T82),[TypeInfo(TUpdateTree),TypeInfo(TWideStrings),TypeInfo(TParams),TypeInfo(string)],  getVMTProcAddr('TSQLResolver','GenDeleteSQL',124));


//RegRegisterMethod(TSQLResolver,'GenUpdateSQL',TypeInfo(_T83),[TypeInfo(TUpdateTree),TypeInfo(TWideStrings),TypeInfo(TParams),TypeInfo(string)], pointer(128));
RegRegisterMethod(TSQLResolver,'GenUpdateSQL',TypeInfo(_T83),[TypeInfo(TUpdateTree),TypeInfo(TWideStrings),TypeInfo(TParams),TypeInfo(string)],  getVMTProcAddr('TSQLResolver','GenUpdateSQL',128));


RegisterProc(TSQLResolver,'GenSelectSQL',mtScriptMethod,TypeInfo(_T84),[
TypeInfo(TUpdateTree),
TypeInfo(TWideStrings),
TypeInfo(TParams),
TypeInfo(string),
TypeInfo(TUpdateMode)],Addr(__TSQLResolver__GenSelectSQL__Wrapper),cRegister);

//RegRegisterMethod(TSQLResolver,'UseFieldInUpdate',TypeInfo(_T85),[TypeInfo(TField),TypeInfo(Boolean)], pointer(136));
RegRegisterMethod(TSQLResolver,'UseFieldInUpdate',TypeInfo(_T85),[TypeInfo(TField),TypeInfo(Boolean)],  getVMTProcAddr('TSQLResolver','UseFieldInUpdate',136));


//RegRegisterMethod(TSQLResolver,'UseFieldInWhere',TypeInfo(_T86),[TypeInfo(TField),TypeInfo(TUpdateMode),TypeInfo(Boolean)], pointer(140));
RegRegisterMethod(TSQLResolver,'UseFieldInWhere',TypeInfo(_T86),[TypeInfo(TField),TypeInfo(TUpdateMode),TypeInfo(Boolean)],  getVMTProcAddr('TSQLResolver','UseFieldInWhere',140));


//RegRegisterMethod(TSQLResolver,'InternalDoUpdate',TypeInfo(_T87),[TypeInfo(TUpdateTree),TypeInfo(TUpdateKind)], pointer(144));
RegRegisterMethod(TSQLResolver,'InternalDoUpdate',TypeInfo(_T87),[TypeInfo(TUpdateTree),TypeInfo(TUpdateKind)],  getVMTProcAddr('TSQLResolver','InternalDoUpdate',144));


//RegRegisterMethod(TSQLResolver,'DoExecSQL',TypeInfo(_T88),[TypeInfo(TWideStringList),TypeInfo(TParams)], pointer(148));
RegRegisterMethod(TSQLResolver,'DoExecSQL',TypeInfo(_T88),[TypeInfo(TWideStringList),TypeInfo(TParams)],  getVMTProcAddr('TSQLResolver','DoExecSQL',148));


//RegRegisterMethod(TSQLResolver,'DoGetValues',TypeInfo(_T89),[TypeInfo(TWideStringList),TypeInfo(TParams),TypeInfo(TDataSet)], pointer(152));
RegRegisterMethod(TSQLResolver,'DoGetValues',TypeInfo(_T89),[TypeInfo(TWideStringList),TypeInfo(TParams),TypeInfo(TDataSet)],  getVMTProcAddr('TSQLResolver','DoGetValues',152));


RegisterProc(TSQLResolver,'Create',mtConstructor,TypeInfo(_T90),[
TypeInfo(TDataSetProvider)],Addr(TSQLResolver.Create),cRegister);

RegisterProc(TUpdateTree,'Create',mtConstructor,TypeInfo(_T91),[
TypeInfo(TUpdateTree),
TypeInfo(TCustomResolver)],Addr(TUpdateTree.Create),cRegister);

//RegRegisterMethod(TUpdateTree,'Clear',TypeInfo(_T92),NoParams, pointer(0));
RegRegisterMethod(TUpdateTree,'Clear',TypeInfo(_T92),NoParams,  getVMTProcAddr('TUpdateTree','Clear',0));


//RegRegisterMethod(TUpdateTree,'DoUpdates',TypeInfo(_T93),[TypeInfo(Boolean)], pointer(4));
RegRegisterMethod(TUpdateTree,'DoUpdates',TypeInfo(_T93),[TypeInfo(Boolean)],  getVMTProcAddr('TUpdateTree','DoUpdates',4));


//RegRegisterMethod(TUpdateTree,'InitData',TypeInfo(_T94),[TypeInfo(TDataSet)], pointer(8));
RegRegisterMethod(TUpdateTree,'InitData',TypeInfo(_T94),[TypeInfo(TDataSet)],  getVMTProcAddr('TUpdateTree','InitData',8));


//RegRegisterMethod(TUpdateTree,'InitDelta',TypeInfo(_T95),[TypeInfo(TPacketDataSet)], pointer(12));
RegRegisterMethod(TUpdateTree,'InitDelta',TypeInfo(_T95),[TypeInfo(TPacketDataSet)],  getVMTProcAddr('TUpdateTree','InitDelta',12));


//RegRegisterMethod(TUpdateTree,'InitErrorPacket',TypeInfo(_T96),[TypeInfo(EUpdateError),TypeInfo(TResolverResponse)], pointer(20));
RegRegisterMethod(TUpdateTree,'InitErrorPacket',TypeInfo(_T96),[TypeInfo(EUpdateError),TypeInfo(TResolverResponse)],  getVMTProcAddr('TUpdateTree','InitErrorPacket',20));


//RegRegisterMethod(TUpdateTree,'RefreshData',TypeInfo(_T97),[TypeInfo(TFetchOptions)], pointer(24));
RegRegisterMethod(TUpdateTree,'RefreshData',TypeInfo(_T97),[TypeInfo(TFetchOptions)],  getVMTProcAddr('TUpdateTree','RefreshData',24));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
RegisterEvent(TypeInfo(TAfterUpdateRecordEvent),[
TypeInfo(TObject),
TypeInfo(TDataSet),
TypeInfo(TCustomClientDataSet),
TypeInfo(TUpdateKind)]);

RegisterEvent(TypeInfo(TBeforeCommitEvent),[
TypeInfo(TObject),
TypeInfo(TCustomClientDataSet),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(OleVariant)]);

RegisterEvent(TypeInfo(TBeforeUpdateRecordEvent),[
TypeInfo(TObject),
TypeInfo(TDataSet),
TypeInfo(TCustomClientDataSet),
TypeInfo(TUpdateKind),
TypeInfo(Boolean)]);

RegisterEvent(TypeInfo(TDataRequestEvent),[
TypeInfo(TObject),
TypeInfo(OleVariant),TypeInfo(OleVariant)]);

RegisterEvent(TypeInfo(TGetDSProps),[
TypeInfo(TObject),
TypeInfo(TDataSet),
TypeInfo(OleVariant)]);

RegisterEvent(TypeInfo(TGetParamsEvent),[
TypeInfo(TDataSet),
TypeInfo(TList)]);

RegisterEvent(TypeInfo(TGetTableNameEvent),[
TypeInfo(TObject),
TypeInfo(TDataSet),
TypeInfo(WideString)]);

RegisterEvent(TypeInfo(TOnValidate),[
TypeInfo(OleVariant)]);

RegisterEvent(TypeInfo(TProviderDataEvent),[
TypeInfo(TObject),
TypeInfo(TCustomClientDataSet)]);

{RegisterEvent(TypeInfo(TPutFieldProc),[
TypeInfoPointer]);}

RegisterEvent(TypeInfo(TResolverErrorEvent),[
TypeInfo(TObject),
TypeInfo(TCustomClientDataSet),
TypeInfo(EUpdateError),
TypeInfo(TUpdateKind),
TypeInfo(TResolverResponse)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
