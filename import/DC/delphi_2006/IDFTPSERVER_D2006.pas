{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDFTPSERVER_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  SysUtils,
  IdAssignedNumbers,
  IdException,
  IdFTPList,
  IdTCPServer,
  IdTCPConnection,
  IdUserAccounts,
  IdFTPCommon,
  IdThread,
  IdRFCReply,
  IdFTPServer;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (p0 : Boolean;
p1 : TIdTCPServerConnection) of object;

_T1 = procedure (p0 : TIdFTPOperation) of object;

_T2 = procedure (const p0 : string;
p1 : Integer) of object;

function __DC__GetTIdDataChannelThread__OKReply(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdDataChannelThread(Instance).OKReply);
end;

procedure __DC__SetTIdDataChannelThread__OKReply(Instance : TObject; Params : PVariantArgList);
begin
TIdDataChannelThread(Instance).OKReply:=TIdRFCReply(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIdDataChannelThread__ErrorReply(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdDataChannelThread(Instance).ErrorReply);
end;

procedure __DC__SetTIdDataChannelThread__ErrorReply(Instance : TObject; Params : PVariantArgList);
begin
TIdDataChannelThread(Instance).ErrorReply:=TIdRFCReply(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIdFTPServerThread__Authenticated(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdFTPServerThread(Instance).Authenticated;
end;

procedure __DC__SetTIdFTPServerThread__Authenticated(Instance : TObject; Params : PVariantArgList);
begin
TIdFTPServerThread(Instance).Authenticated:=OleVariant(Params^[0]);
end;

function __DC__GetTIdFTPServerThread__ALLOSize(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdFTPServerThread(Instance).ALLOSize;
end;

procedure __DC__SetTIdFTPServerThread__ALLOSize(Instance : TObject; Params : PVariantArgList);
begin
TIdFTPServerThread(Instance).ALLOSize:=OleVariant(Params^[0]);
end;

function __DC__GetTIdFTPServerThread__CurrentDir(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdFTPServerThread(Instance).CurrentDir;
end;

procedure __DC__SetTIdFTPServerThread__CurrentDir(Instance : TObject; Params : PVariantArgList);
begin
TIdFTPServerThread(Instance).CurrentDir:=OleVariant(Params^[0]);
end;

function __DC__GetTIdFTPServerThread__DataChannelThread(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdFTPServerThread(Instance).DataChannelThread);
end;

procedure __DC__SetTIdFTPServerThread__DataChannelThread(Instance : TObject; Params : PVariantArgList);
begin
TIdFTPServerThread(Instance).DataChannelThread:=TIdDataChannelThread(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIdFTPServerThread__DataType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdFTPServerThread(Instance).DataType;
end;

procedure __DC__SetTIdFTPServerThread__DataType(Instance : TObject; Params : PVariantArgList);
begin
TIdFTPServerThread(Instance).DataType:=OleVariant(Params^[0]);
end;

function __DC__GetTIdFTPServerThread__DataMode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdFTPServerThread(Instance).DataMode;
end;

procedure __DC__SetTIdFTPServerThread__DataMode(Instance : TObject; Params : PVariantArgList);
begin
TIdFTPServerThread(Instance).DataMode:=OleVariant(Params^[0]);
end;

function __DC__GetTIdFTPServerThread__DataPort(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdFTPServerThread(Instance).DataPort;
end;

function __DC__GetTIdFTPServerThread__DataStruct(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdFTPServerThread(Instance).DataStruct;
end;

procedure __DC__SetTIdFTPServerThread__DataStruct(Instance : TObject; Params : PVariantArgList);
begin
TIdFTPServerThread(Instance).DataStruct:=OleVariant(Params^[0]);
end;

function __DC__GetTIdFTPServerThread__HomeDir(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdFTPServerThread(Instance).HomeDir;
end;

procedure __DC__SetTIdFTPServerThread__HomeDir(Instance : TObject; Params : PVariantArgList);
begin
TIdFTPServerThread(Instance).HomeDir:=OleVariant(Params^[0]);
end;

function __DC__GetTIdFTPServerThread__Password(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdFTPServerThread(Instance).Password;
end;

procedure __DC__SetTIdFTPServerThread__Password(Instance : TObject; Params : PVariantArgList);
begin
TIdFTPServerThread(Instance).Password:=OleVariant(Params^[0]);
end;

function __DC__GetTIdFTPServerThread__PASV(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdFTPServerThread(Instance).PASV;
end;

procedure __DC__SetTIdFTPServerThread__PASV(Instance : TObject; Params : PVariantArgList);
begin
TIdFTPServerThread(Instance).PASV:=OleVariant(Params^[0]);
end;

function __DC__GetTIdFTPServerThread__RESTPos(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdFTPServerThread(Instance).RESTPos;
end;

procedure __DC__SetTIdFTPServerThread__RESTPos(Instance : TObject; Params : PVariantArgList);
begin
TIdFTPServerThread(Instance).RESTPos:=OleVariant(Params^[0]);
end;

function __DC__GetTIdFTPServerThread__Username(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdFTPServerThread(Instance).Username;
end;

procedure __DC__SetTIdFTPServerThread__Username(Instance : TObject; Params : PVariantArgList);
begin
TIdFTPServerThread(Instance).Username:=OleVariant(Params^[0]);
end;

function __DC__GetTIdFTPServerThread__UserType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdFTPServerThread(Instance).UserType;
end;

procedure __DC__SetTIdFTPServerThread__UserType(Instance : TObject; Params : PVariantArgList);
begin
TIdFTPServerThread(Instance).UserType:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TIdDataChannelThread,'OKReply',__DC__GetTIdDataChannelThread__OKReply,__DC__SetTIdDataChannelThread__OKReply);
RegisterProperty(TIdDataChannelThread,'ErrorReply',__DC__GetTIdDataChannelThread__ErrorReply,__DC__SetTIdDataChannelThread__ErrorReply);
RegisterProperty(TIdFTPServerThread,'Authenticated',__DC__GetTIdFTPServerThread__Authenticated,__DC__SetTIdFTPServerThread__Authenticated);
RegisterProperty(TIdFTPServerThread,'ALLOSize',__DC__GetTIdFTPServerThread__ALLOSize,__DC__SetTIdFTPServerThread__ALLOSize);
RegisterProperty(TIdFTPServerThread,'CurrentDir',__DC__GetTIdFTPServerThread__CurrentDir,__DC__SetTIdFTPServerThread__CurrentDir);
RegisterProperty(TIdFTPServerThread,'DataChannelThread',__DC__GetTIdFTPServerThread__DataChannelThread,__DC__SetTIdFTPServerThread__DataChannelThread);
RegisterProperty(TIdFTPServerThread,'DataType',__DC__GetTIdFTPServerThread__DataType,__DC__SetTIdFTPServerThread__DataType);
RegisterProperty(TIdFTPServerThread,'DataMode',__DC__GetTIdFTPServerThread__DataMode,__DC__SetTIdFTPServerThread__DataMode);
RegisterProperty(TIdFTPServerThread,'DataPort',__DC__GetTIdFTPServerThread__DataPort,nil);
RegisterProperty(TIdFTPServerThread,'DataStruct',__DC__GetTIdFTPServerThread__DataStruct,__DC__SetTIdFTPServerThread__DataStruct);
RegisterProperty(TIdFTPServerThread,'HomeDir',__DC__GetTIdFTPServerThread__HomeDir,__DC__SetTIdFTPServerThread__HomeDir);
RegisterProperty(TIdFTPServerThread,'Password',__DC__GetTIdFTPServerThread__Password,__DC__SetTIdFTPServerThread__Password);
RegisterProperty(TIdFTPServerThread,'PASV',__DC__GetTIdFTPServerThread__PASV,__DC__SetTIdFTPServerThread__PASV);
RegisterProperty(TIdFTPServerThread,'RESTPos',__DC__GetTIdFTPServerThread__RESTPos,__DC__SetTIdFTPServerThread__RESTPos);
RegisterProperty(TIdFTPServerThread,'Username',__DC__GetTIdFTPServerThread__Username,__DC__SetTIdFTPServerThread__Username);
RegisterProperty(TIdFTPServerThread,'UserType',__DC__GetTIdFTPServerThread__UserType,__DC__SetTIdFTPServerThread__UserType);
end;

const __ConstNames0 : array[0..10] of string = (
'utNone'
,'utAnonymousUser'
,'utNormalUser'
,'ftpsOther'
,'ftpsDOS'
,'ftpsUNIX'
,'ftpsVAX'
,'ftpRetr'
,'ftpStor'
,'Id_DEF_AllowAnon'
,'Id_DEF_SystemType'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,utNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,utAnonymousUser));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,utNormalUser));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,ftpsOther));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,ftpsDOS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,ftpsUNIX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,ftpsVAX));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,ftpRetr));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,ftpStor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,Id_DEF_AllowAnon));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,Id_DEF_SystemType));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..4] of TClass = (
EIdFTPServerException,
EIdFTPServerNoOnListDirectory,
TIdDataChannelThread,
TIdFTPServer,
TIdFTPServerThread
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegisterProc(TIdDataChannelThread,'Create',mtConstructor,TypeInfo(_T0),[
TypeInfo(Boolean),
TypeInfo(TIdTCPServerConnection)],Addr(TIdDataChannelThread.Create),cRegister);

RegRegisterMethod(TIdDataChannelThread,'StartThread',TypeInfo(_T1),[
TypeInfo(TIdFTPOperation)],Addr(TIdDataChannelThread.StartThread));

RegRegisterMethod(TIdDataChannelThread,'SetupDataChannel',TypeInfo(_T2),[
TypeInfo(string),
TypeInfo(Integer)],Addr(TIdDataChannelThread.SetupDataChannel));

end;
initialization
_mreg_0;
RegisterEvent(TypeInfo(TIdOnGetCustomListFormat),[
TypeInfo(TIdFTPServer),
TypeInfo(TIdFTPListItem),
TypeInfo(string)]);

RegisterEvent(TypeInfo(TOnAfterUserLoginEvent),[
TypeInfo(TIdFTPServerThread)]);

RegisterEvent(TypeInfo(TOnDirectoryEvent),[
TypeInfo(TIdFTPServerThread),
TypeInfo(string)]);

RegisterEvent(TypeInfo(TOnFileEvent),[
TypeInfo(TIdFTPServerThread),
TypeInfo(string)]);

{RegisterEvent(TypeInfo(TOnGetFileSizeEvent),[
TypeInfo(TIdFTPServerThread),
TypeInfo(string),
TypeInfo(Int64)]);}

RegisterEvent(TypeInfo(TOnListDirectoryEvent),[
TypeInfo(TIdFTPServerThread),
TypeInfo(string),
TypeInfo(TIdFTPListItems)]);

RegisterEvent(TypeInfo(TOnPASVEvent),[
TypeInfo(TIdFTPServerThread),
TypeInfo(string),
TypeInfo(Word)]);

RegisterEvent(TypeInfo(TOnRenameFileEvent),[
TypeInfo(TIdFTPServerThread),
TypeInfo(string),
TypeInfo(string)]);

RegisterEvent(TypeInfo(TOnRetrieveFileEvent),[
TypeInfo(TIdFTPServerThread),
TypeInfo(string),
TypeInfo(TStream)]);

RegisterEvent(TypeInfo(TOnStoreFileEvent),[
TypeInfo(TIdFTPServerThread),
TypeInfo(string),
TypeInfo(Boolean),
TypeInfo(TStream)]);

RegisterEvent(TypeInfo(TOnUserLoginEvent),[
TypeInfo(TIdFTPServerThread),
TypeInfo(string),
TypeInfo(string),
TypeInfo(Boolean)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
