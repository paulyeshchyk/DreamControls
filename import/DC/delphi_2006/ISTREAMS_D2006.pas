{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit ISTREAMS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  ActiveX,
  SysUtils,
  Classes,
  AxCtrls,
  ToolsAPI,
  IStreams;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (const p0 : string;
p1 : Word) of object;

_T1 = function : Longint of object;

_T2 = procedure (p0 : Longint) of object;

_T3 = procedure (p0 : TMemoryStream;
p1 : TStreamOwnership) of object;

_T4 = procedure (p0 : TStream;
p1 : TStreamOwnership) of object;

_T5 = _T1;

_T6 = _T2;

{_T7 = procedure (p0 : IStream) of object;}

_T8 = _T1;

_T9 = _T2;

function __DC__GetTIFileStream__FileStream(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIFileStream(Instance).FileStream);
end;

function __DC__GetTIMemoryStream__MemoryStream(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIMemoryStream(Instance).MemoryStream);
end;

procedure __RegisterProps;
begin
RegisterProperty(TIFileStream,'FileStream',__DC__GetTIFileStream__FileStream,nil);
RegisterProperty(TIMemoryStream,'MemoryStream',__DC__GetTIMemoryStream__MemoryStream,nil);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..3] of TClass = (
TIFileStream,
TIMemoryStream,
TIStreamAdapter,
TVirtualStream
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegisterProc(TIFileStream,'Create',mtConstructor,TypeInfo(_T0),[
TypeInfo(string),
TypeInfo(Word)],Addr(TIFileStream.Create),cRegister);

RegisterProc(TIFileStream,'GetModifyTime',mtMethod,TypeInfo(_T1),[TypeInfo(Longint)],Addr(TIFileStream.GetModifyTime),cStdCall);

RegisterProc(TIFileStream,'SetModifyTime',mtMethod,TypeInfo(_T2),[
TypeInfo(Longint)],Addr(TIFileStream.SetModifyTime),cStdCall);

RegisterProc(TIMemoryStream,'Create',mtConstructor,TypeInfo(_T3),[
TypeInfo(TMemoryStream),
TypeInfo(TStreamOwnership)],Addr(TIMemoryStream.Create),cRegister);

RegisterProc(TIStreamAdapter,'Create',mtConstructor,TypeInfo(_T4),[
TypeInfo(TStream),
TypeInfo(TStreamOwnership)],Addr(TIStreamAdapter.Create),cRegister);

//RegisterProc(TIStreamAdapter,'GetModifyTime',mtMethod,TypeInfo(_T5),[TypeInfo(Longint)], pointer(44),cStdCall);
RegisterProc(TIStreamAdapter,'GetModifyTime',mtMethod,TypeInfo(_T5),[TypeInfo(Longint)],  getVMTProcAddr('TIStreamAdapter','GetModifyTime',44),cStdCall);


//RegisterProc(TIStreamAdapter,'SetModifyTime',mtMethod,TypeInfo(_T6),[TypeInfo(Longint)], pointer(48),cStdCall);
RegisterProc(TIStreamAdapter,'SetModifyTime',mtMethod,TypeInfo(_T6),[TypeInfo(Longint)],  getVMTProcAddr('TIStreamAdapter','SetModifyTime',48),cStdCall);


RegRegisterMethod(TVirtualStream,'GetModifyTime',TypeInfo(_T8),[TypeInfo(Longint)],Addr(TVirtualStream.GetModifyTime));

RegRegisterMethod(TVirtualStream,'SetModifyTime',TypeInfo(_T9),[
TypeInfo(Longint)],Addr(TVirtualStream.SetModifyTime));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
{RegisterProc(TVirtualStream,'Create',mtConstructor,TypeInfo(_T7),[
TypeInfo(IStream)],Addr(TVirtualStream.Create),cRegister)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
