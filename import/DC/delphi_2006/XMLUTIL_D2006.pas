{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit XMLUTIL_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Classes,
  xmldom,
  xmlutil;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
{_T0 = function (p0 : IDOMNode;
p1 : string): IDOMNode of object;}

{_T1 = function (p0 : IDOMNode;
p1 : string;
var p2 : string): IDOMNode of object;}

{_T2 = function (p0 : IDOMNode;
p1 : IDOMNode): IDOMNode of object;}

{_T3 = function (p0 : IDOMNode;
p1 : string;
var p2 : string): IDOMNode of object;}

{_T4 = function (p0 : IDOMNode;
p1 : Integer;
p2 : TStrings): IDOMNode of object;}

{_T5 = procedure (p0 : IDOMNode;
p1 : string;
p2 : string) of object;}

_T6 = function (p0 : string;
p1 : string): string of object;

_T7 = function (p0 : string;
p1 : Boolean): string of object;

_T8 = function (const p0 : string;
p1 : string;
p2 : string;
p3 : Boolean): string of object;

_T9 = function (const p0 : string;
const p1 : string): string of object;

_T10 = _T9;

_T11 = _T9;

_T12 = _T9;

_T13 = _T9;

_T14 = function (p0 : string;
var p1 : Integer;
var p2 : string): string of object;

{_T15 = procedure (p0 : IDOMDocument;
p1 : string;
p2 : Boolean) of object;}

{_T16 = function (p0 : IDOMDocument): string of object;}

{_T17 = procedure (p0 : IDOMDocument;
p1 : string) of object;}

{_T18 = function (const p0 : string): IDOMDocument of object;}

{_T19 = function (const p0 : string): IDOMDocument of object;}

{_T20 = function (p0 : IDOMDocument): IDOMDocument of object;}

{_T21 = function (p0 : IDOMNode;
const p1 : string): string of object;}

_T22 = function (p0 : string;
const p1 : string): TStringList of object;

_T23 = function (p0 : string;
const p1 : string;
var p2 : string): string of object;

procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..38] of string = (
'SMissingSourceFile'
,'SOldVersion'
,'sFileSaveError'
,'sFileOpenError'
,'sXMLFileOpenError'
,'sXMLLoadError'
,'sLinePosError'
,'sReason'
,'sParseError'
,'mx_Root'
,'mx_Skeleton'
,'mx_TranslateEach'
,'mx_Translate'
,'mx_XmlSchema'
,'mx_CdsSkeleton'
,'mx_XmlSkeleton'
,'mx_XSLTransform'
,'mx_Version'
,'mx_CurrVersion'
,'mx_RootName'
,'mx_DataEncoding'
,'mx_Direction'
,'mx_ID'
,'mx_DEFAULT'
,'mx_VALUE'
,'mx_OPTIONS'
,'mx_MAPVALUES'
,'mx_BOOLFORMAT'
,'mx_OPTIONAL'
,'mx_DEST'
,'mx_FROM'
,'mx_DATETIMEFORMAT'
,'mx_DATEFORMAT'
,'mx_TIMEFORMAT'
,'mx_Datapacket'
,'mx_ROWDATA'
,'mx_ROW'
,'mx_RowState'
,'val_DateTimeDefault'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,SMissingSourceFile));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,SOldVersion));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,sFileSaveError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,sFileOpenError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,sXMLFileOpenError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,sXMLLoadError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,sLinePosError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,sReason));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,sParseError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,mx_Root));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,mx_Skeleton));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,mx_TranslateEach));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,mx_Translate));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,mx_XmlSchema));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,mx_CdsSkeleton));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,mx_XmlSkeleton));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,mx_XSLTransform));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,mx_Version));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,mx_CurrVersion));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,mx_RootName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,mx_DataEncoding));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,mx_Direction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,mx_ID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,mx_DEFAULT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,mx_VALUE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,mx_OPTIONS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,mx_MAPVALUES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,mx_BOOLFORMAT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,mx_OPTIONAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,mx_DEST));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,mx_FROM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,mx_DATETIMEFORMAT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,mx_DATEFORMAT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,mx_TIMEFORMAT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,mx_Datapacket));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,mx_ROWDATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,mx_ROW));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,mx_RowState));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,val_DateTimeDefault));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..0] of TClass = (
DomException
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..10] of string = (
'MapValues'
,'MakeValueMap'
,'MapDateTime'
,'XmlDateTimeToStr'
,'XmlTimeToStr'
,'StrToXmlDate'
,'StrToXmlDateTime'
,'StrToXmlTime'
,'getIndex_Attrs'
,'Split0'
,'Head'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T6),[
TypeInfo(string),
TypeInfo(string),TypeInfo(string)],Addr(MapValues),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T7),[
TypeInfo(string),
TypeInfo(Boolean),TypeInfo(string)],Addr(MakeValueMap),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T8),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(string),
TypeInfo(Boolean),TypeInfo(string)],Addr(MapDateTime),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T9),[
TypeInfo(string),
TypeInfo(string),TypeInfo(string)],Addr(XmlDateTimeToStr),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T10),[
TypeInfo(string),
TypeInfo(string),TypeInfo(string)],Addr(XmlTimeToStr),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T11),[
TypeInfo(string),
TypeInfo(string),TypeInfo(string)],Addr(StrToXmlDate),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T12),[
TypeInfo(string),
TypeInfo(string),TypeInfo(string)],Addr(StrToXmlDateTime),cRegister);

RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T13),[
TypeInfo(string),
TypeInfo(string),TypeInfo(string)],Addr(StrToXmlTime),cRegister);

RegisterProc(nil,MethodNames[8],mtProc,TypeInfo(_T14),[
TypeInfo(string),
TypeInfo(Integer),
TypeInfo(string),TypeInfo(string)],Addr(getIndex_Attrs),cRegister);

RegisterProc(nil,MethodNames[9],mtProc,TypeInfo(_T22),[
TypeInfo(string),
TypeInfo(string),TypeInfo(TStringList)],Addr(Split0),cRegister);

RegisterProc(nil,MethodNames[10],mtProc,TypeInfo(_T23),[
TypeInfo(string),
TypeInfo(string),
TypeInfo(string),TypeInfo(string)],Addr(Head),cRegister);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'SelectNode',mtProc,TypeInfo(_T0),[
TypeInfo(IDOMNode),
TypeInfo(string),TypeInfo(IDOMNode)],Addr(SelectNode),cRegister)}

{RegisterProc(nil,'SelectCreateNode',mtProc,TypeInfo(_T1),[
TypeInfo(IDOMNode),
TypeInfo(string),
TypeInfo(string),TypeInfo(IDOMNode)],Addr(SelectCreateNode),cRegister)}

{RegisterProc(nil,'SelectCreateSibling',mtProc,TypeInfo(_T2),[
TypeInfo(IDOMNode),
TypeInfo(IDOMNode),TypeInfo(IDOMNode)],Addr(SelectCreateSibling),cRegister)}

{RegisterProc(nil,'NextCreateElement',mtProc,TypeInfo(_T3),[
TypeInfo(IDOMNode),
TypeInfo(string),
TypeInfo(string),TypeInfo(IDOMNode)],Addr(NextCreateElement),cRegister)}

{RegisterProc(nil,'FindNode',mtProc,TypeInfo(_T4),[
TypeInfo(IDOMNode),
TypeInfo(Integer),
TypeInfo(TStrings),TypeInfo(IDOMNode)],Addr(FindNode),cRegister)}

{RegisterProc(nil,'PutValue',mtProc,TypeInfo(_T5),[
TypeInfo(IDOMNode),
TypeInfo(string),
TypeInfo(string)],Addr(PutValue),cRegister)}

{RegisterProc(nil,'SetEncoding',mtProc,TypeInfo(_T15),[
TypeInfo(IDOMDocument),
TypeInfo(string),
TypeInfo(Boolean)],Addr(SetEncoding),cRegister)}

{RegisterProc(nil,'GetEncoding',mtProc,TypeInfo(_T16),[
TypeInfo(IDOMDocument),TypeInfo(string)],Addr(GetEncoding),cRegister)}

{RegisterProc(nil,'SetStandalone',mtProc,TypeInfo(_T17),[
TypeInfo(IDOMDocument),
TypeInfo(string)],Addr(SetStandalone),cRegister)}

{RegisterProc(nil,'LoadDocFromFile',mtProc,TypeInfo(_T18),[
TypeInfo(string),TypeInfo(IDOMDocument)],Addr(LoadDocFromFile),cRegister)}

{RegisterProc(nil,'LoadDocFromString',mtProc,TypeInfo(_T19),[
TypeInfo(string),TypeInfo(IDOMDocument)],Addr(LoadDocFromString),cRegister)}

{RegisterProc(nil,'CloneDoc',mtProc,TypeInfo(_T20),[
TypeInfo(IDOMDocument),TypeInfo(IDOMDocument)],Addr(CloneDoc),cRegister)}

{RegisterProc(nil,'GetAttribute',mtProc,TypeInfo(_T21),[
TypeInfo(IDOMNode),
TypeInfo(string),TypeInfo(string)],Addr(GetAttribute),cRegister)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
