{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit ADOREG_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Classes,
  Forms,
  Controls,
  FldLinks,
  DsnDb,
  TreeIntf,
  DB,
  DsnDBCst,
  DBReg,
  ColnEdit,
  ADODB,
  WideStrings,
  ADOReg;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure  of object;

_T1 = _T0;

_T2 = function (p0 : Boolean): TADOConnection of object;

function __DC__GetTCommandTextProperty__CommandType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCommandTextProperty(Instance).CommandType;
end;

procedure __DC__SetTCommandTextProperty__CommandType(Instance : TObject; Params : PVariantArgList);
begin
TCommandTextProperty(Instance).CommandType:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TCommandTextProperty,'CommandType',__DC__GetTCommandTextProperty__CommandType,__DC__SetTCommandTextProperty__CommandType);
end;

const __ConstNames0 : array[0..0] of string = (
'cConnectionSprigPrefix'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,cConnectionSprigPrefix));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..20] of TClass = (
TADOCommandEditor,
TADOCommandSprig,
TADOConnectionEditor,
TADOConnectionSprig,
TADODataSetEditor,
TADODataSetFieldLinkProperty,
TADODataSetSprig,
TADOImpliedConnectionSprig,
TADOIndexNameProperty,
TADOQuerySprig,
TADOStoredProcSprig,
TADOTableFieldLinkProperty,
TADOTableSprig,
TCommandTextProperty,
TConnectionStringProperty,
TCustomADODataSetSprig,
TParametersProperty,
TProcedureNameProperty,
TProviderProperty,
TRDSConnectionSprig,
TTableNameProperty
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'Register'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),NoParams,Addr(Register),cRegister);

//RegRegisterMethod(TCommandTextProperty,'EditSQLText',TypeInfo(_T1),NoParams, pointer(84));
RegRegisterMethod(TCommandTextProperty,'EditSQLText',TypeInfo(_T1),NoParams,  getVMTProcAddr('TCommandTextProperty','EditSQLText',84));


RegRegisterMethod(TCommandTextProperty,'GetConnection',TypeInfo(_T2),[
TypeInfo(Boolean),TypeInfo(TADOConnection)],Addr(TCommandTextProperty.GetConnection));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
