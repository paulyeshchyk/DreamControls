{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit GRAPHUTIL_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  Types,
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Graphics,
  Classes,
  GraphUtil;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TPoint__Wrapper = class(TDCRecordWrapper)
private
fR : TPoint;
public
function GetRecordPtr : pointer; override;
published
procedure setX(const val : Longint);
function getX : Longint;
property X : Longint read getX write setX;
procedure setY(const val : Longint);
function getY : Longint;
property Y : Longint read getY write setY;
end;
type __TRect__Wrapper = class(TDCRecordWrapper)
private
fR : TRect;
public
function GetRecordPtr : pointer; override;
published
procedure setLeft(const val : Longint);
function getLeft : Longint;
property Left : Longint read getLeft write setLeft;
procedure setTop(const val : Longint);
function getTop : Longint;
property Top : Longint read getTop write setTop;
procedure setRight(const val : Longint);
function getRight : Longint;
property Right : Longint read getRight write setRight;
procedure setBottom(const val : Longint);
function getBottom : Longint;
property Bottom : Longint read getBottom write setBottom;
end;
type
_T0 = function (const p0 : TColor;
p1 : Integer): TColor of object;

_T1 = _T0;

_T2 = procedure (p0 : TCanvas;
const p1 : IDispatch;
p2 : Integer;
p3 : Boolean) of object;

_T3 = procedure (p0 : TCanvas;
p1 : TScrollDirection;
const p2 : IDispatch;
p3 : Integer) of object;

_T4 = _T3;

_T5 = procedure (p0 : TColorRef;
var p1 : Word;
var p2 : Word;
var p3 : Word) of object;

_T6 = function (p0 : Word;
p1 : Word;
p2 : Word): TColorRef of object;

_T7 = function (p0 : TColor;
p1 : Integer;
p2 : BOOL): TColor of object;

_T8 = procedure (const p0 : TCanvas;
const p1 : TColor;
const p2 : TColor;
const p3 : IDispatch;
const p4 : TGradientDirection) of object;

_T9 = procedure (const p0 : TBitmap;
const p1 : TBitmap;
const p2 : Double) of object;

_T10 = function (p0 : TColor): string of object;

_T11 = _T10;

_T12 = function (p0 : Integer): Integer of object;

_T13 = function (p0 : Integer): string of object;

_T14 = _T13;

_T15 = function (p0 : string): TColor of object;

_T16 = _T15;

_T17 = procedure (p0 : TColorArray;
p1 : Integer;
p2 : Integer;
p3 : TColorArraySortType;
p4 : Boolean) of object;

function __TPoint__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPoint__Wrapper.setX(const val : Longint);
begin
TPoint(GetRecordPtr^).X := val;
end;
function __TPoint__Wrapper.getX : Longint;
begin
result := TPoint(GetRecordPtr^).X;
end;
procedure __TPoint__Wrapper.setY(const val : Longint);
begin
TPoint(GetRecordPtr^).Y := val;
end;
function __TPoint__Wrapper.getY : Longint;
begin
result := TPoint(GetRecordPtr^).Y;
end;
function __TRect__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRect__Wrapper.setLeft(const val : Longint);
begin
TRect(GetRecordPtr^).Left := val;
end;
function __TRect__Wrapper.getLeft : Longint;
begin
result := TRect(GetRecordPtr^).Left;
end;
procedure __TRect__Wrapper.setTop(const val : Longint);
begin
TRect(GetRecordPtr^).Top := val;
end;
function __TRect__Wrapper.getTop : Longint;
begin
result := TRect(GetRecordPtr^).Top;
end;
procedure __TRect__Wrapper.setRight(const val : Longint);
begin
TRect(GetRecordPtr^).Right := val;
end;
function __TRect__Wrapper.getRight : Longint;
begin
result := TRect(GetRecordPtr^).Right;
end;
procedure __TRect__Wrapper.setBottom(const val : Longint);
begin
TRect(GetRecordPtr^).Bottom := val;
end;
function __TRect__Wrapper.getBottom : Longint;
begin
result := TRect(GetRecordPtr^).Bottom;
end;
function ____GetHighLightColor__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := GetHighLightColor(OleVariant(pargs^[0]));
end;
2:
begin
result := GetHighLightColor(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function ____GetShadowColor__Wrapper(cArgs : integer; pArgs : PArgList) : OleVariant;
begin
case cArgs of
1:
begin
result := GetShadowColor(OleVariant(pargs^[0]));
end;
2:
begin
result := GetShadowColor(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure ____DrawCheck__Wrapper(cArgs : integer; pArgs : PArgList);
var
__p1 : ^TPoint;
__i1 : IDispatch;
begin
__i1 := VarToInterface(OleVariant(pargs^[1]));
if __i1 = nil then exit;
__p1 := (__i1 as IDCRecordWrapper).GetRecordPtr;
case cArgs of
3:
begin
DrawCheck(TCanvas(VarToObject(OleVariant(pargs^[2]))),__p1^,OleVariant(pargs^[0]));
end;
4:
begin
DrawCheck(TCanvas(VarToObject(OleVariant(pargs^[3]))),__p1^,OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure ____DrawChevron__Wrapper(p0 : TCanvas;
p1 : TScrollDirection;
const p2 : IDispatch;
p3 : Integer);
var
__p2 : ^TPoint;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
DrawChevron(p0,p1,__p2^,p3);
end;

procedure ____DrawArrow__Wrapper(p0 : TCanvas;
p1 : TScrollDirection;
const p2 : IDispatch;
p3 : Integer);
var
__p2 : ^TPoint;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
DrawArrow(p0,p1,__p2^,p3);
end;

procedure ____GradientFillCanvas__Wrapper(const p0 : TCanvas;
const p1 : TColor;
const p2 : TColor;
const p3 : IDispatch;
const p4 : TGradientDirection);
var
__p3 : ^TRect;
__i3 : IDispatch;
begin
if p3 = nil then exit;
__p3 := (p3 as IDCRecordWrapper).GetRecordPtr;
GradientFillCanvas(p0,p1,p2,__p3^,p4);
end;

procedure ____SortColorArray__Wrapper(cArgs : integer; pArgs : PArgList);
begin
case cArgs of
4:
begin
SortColorArray(OleVariant(pargs^[3]),OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
5:
begin
SortColorArray(OleVariant(pargs^[4]),OleVariant(pargs^[3]),OleVariant(pargs^[2]),OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;


type __TPoint__Wrapper__ = class(__TPoint__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPoint__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
var
__rw : __TPoint__Wrapper__;
begin
__rw := __TPoint__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPoint((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRect__Wrapper__ = class(__TRect__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRect__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
var
__rw : __TRect__Wrapper__;
begin
__rw := __TRect__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRect((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..15] of string = (
'WebNamedColorsCount'
,'sdLeft'
,'sdRight'
,'sdUp'
,'sdDown'
,'atSolid'
,'atArrows'
,'gdHorizontal'
,'gdVertical'
,'stHue'
,'stSaturation'
,'stLuminance'
,'stRed'
,'stGreen'
,'stBlue'
,'stCombo'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,WebNamedColorsCount));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,sdLeft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,sdRight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,sdUp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,sdDown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,atSolid));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,atArrows));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,gdHorizontal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,gdVertical));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,stHue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,stSaturation));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,stLuminance));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,stRed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,stGreen));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,stBlue));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,stCombo));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..17] of string = (
'GetHighLightColor'
,'GetShadowColor'
,'DrawCheck'
,'DrawChevron'
,'DrawArrow'
,'ColorRGBToHLS'
,'ColorHLSToRGB'
,'ColorAdjustLuma'
,'GradientFillCanvas'
,'ScaleImage'
,'ColorToWebColorStr'
,'ColorToWebColorName'
,'WebColorToRGB'
,'RGBToWebColorStr'
,'RGBToWebColorName'
,'WebColorNameToColor'
,'WebColorStrToColor'
,'SortColorArray'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtScriptProc,TypeInfo(_T0),[
TypeInfo(TColor),
TypeInfo(Integer),TypeInfo(TColor)],Addr(____GetHighLightColor__Wrapper),cRegister);

RegisterProc(nil,MethodNames[1],mtScriptProc,TypeInfo(_T1),[
TypeInfo(TColor),
TypeInfo(Integer),TypeInfo(TColor)],Addr(____GetShadowColor__Wrapper),cRegister);

RegisterProc(nil,MethodNames[2],mtScriptProc,TypeInfo(_T2),[
TypeInfo(TCanvas),
TypeInfo(IDispatch),
TypeInfo(Integer),
TypeInfo(Boolean)],Addr(____DrawCheck__Wrapper),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T3),[
TypeInfo(TCanvas),
TypeInfo(TScrollDirection),
TypeInfo(IDispatch),
TypeInfo(Integer)],Addr(____DrawChevron__Wrapper),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T4),[
TypeInfo(TCanvas),
TypeInfo(TScrollDirection),
TypeInfo(IDispatch),
TypeInfo(Integer)],Addr(____DrawArrow__Wrapper),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T5),[
TypeInfo(TColorRef),
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word)],Addr(ColorRGBToHLS),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T6),[
TypeInfo(Word),
TypeInfo(Word),
TypeInfo(Word),TypeInfo(TColorRef)],Addr(ColorHLSToRGB),cRegister);

RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T7),[
TypeInfo(TColor),
TypeInfo(Integer),
TypeInfo(BOOL),TypeInfo(TColor)],Addr(ColorAdjustLuma),cRegister);

RegisterProc(nil,MethodNames[8],mtProc,TypeInfo(_T8),[
TypeInfo(TCanvas),
TypeInfo(TColor),
TypeInfo(TColor),
TypeInfo(IDispatch),
TypeInfo(TGradientDirection)],Addr(____GradientFillCanvas__Wrapper),cRegister);

RegisterProc(nil,MethodNames[9],mtProc,TypeInfo(_T9),[
TypeInfo(TBitmap),
TypeInfo(TBitmap),
TypeInfo(Double)],Addr(ScaleImage),cRegister);

RegisterProc(nil,MethodNames[10],mtProc,TypeInfo(_T10),[
TypeInfo(TColor),TypeInfo(string)],Addr(ColorToWebColorStr),cRegister);

RegisterProc(nil,MethodNames[11],mtProc,TypeInfo(_T11),[
TypeInfo(TColor),TypeInfo(string)],Addr(ColorToWebColorName),cRegister);

RegisterProc(nil,MethodNames[12],mtProc,TypeInfo(_T12),[
TypeInfo(Integer),TypeInfo(Integer)],Addr(WebColorToRGB),cRegister);

RegisterProc(nil,MethodNames[13],mtProc,TypeInfo(_T13),[
TypeInfo(Integer),TypeInfo(string)],Addr(RGBToWebColorStr),cRegister);

RegisterProc(nil,MethodNames[14],mtProc,TypeInfo(_T14),[
TypeInfo(Integer),TypeInfo(string)],Addr(RGBToWebColorName),cRegister);

RegisterProc(nil,MethodNames[15],mtProc,TypeInfo(_T15),[
TypeInfo(string),TypeInfo(TColor)],Addr(WebColorNameToColor),cRegister);

RegisterProc(nil,MethodNames[16],mtProc,TypeInfo(_T16),[
TypeInfo(string),TypeInfo(TColor)],Addr(WebColorStrToColor),cRegister);

RegisterProc(nil,MethodNames[17],mtScriptProc,TypeInfo(_T17),[
DynArrayInfo(TypeInfo(TColorArray)),
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(TColorArraySortType),
TypeInfo(Boolean)],Addr(____SortColorArray__Wrapper),cRegister);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
