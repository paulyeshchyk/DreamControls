{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit DBXPRESS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  DBCommonTypes,
  DBXpress;
function ConvertFLDDesc25ToVariant(var R : FLDDesc25) : OleVariant;
function ConvertVariantToFLDDesc25(const V : OleVariant) : FLDDesc25;
function ConvertFLDDesc30ToVariant(var R : FLDDesc30) : OleVariant;
function ConvertVariantToFLDDesc30(const V : OleVariant) : FLDDesc30;
function ConvertObjAttrDesc25ToVariant(var R : ObjAttrDesc25) : OleVariant;
function ConvertVariantToObjAttrDesc25(const V : OleVariant) : ObjAttrDesc25;
function ConvertObjAttrDesc30ToVariant(var R : ObjAttrDesc30) : OleVariant;
function ConvertVariantToObjAttrDesc30(const V : OleVariant) : ObjAttrDesc30;
function ConvertObjParentDesc25ToVariant(var R : ObjParentDesc25) : OleVariant;
function ConvertVariantToObjParentDesc25(const V : OleVariant) : ObjParentDesc25;
function ConvertObjParentDesc30ToVariant(var R : ObjParentDesc30) : OleVariant;
function ConvertVariantToObjParentDesc30(const V : OleVariant) : ObjParentDesc30;
function ConvertObjTypeDesc25ToVariant(var R : ObjTypeDesc25) : OleVariant;
function ConvertVariantToObjTypeDesc25(const V : OleVariant) : ObjTypeDesc25;
function ConvertObjTypeDesc30ToVariant(var R : ObjTypeDesc30) : OleVariant;
function ConvertVariantToObjTypeDesc30(const V : OleVariant) : ObjTypeDesc30;
function ConvertSQLFLDDesc25ToVariant(var R : SQLFLDDesc25) : OleVariant;
function ConvertVariantToSQLFLDDesc25(const V : OleVariant) : SQLFLDDesc25;
function ConvertSQLFLDDesc30ToVariant(var R : SQLFLDDesc30) : OleVariant;
function ConvertVariantToSQLFLDDesc30(const V : OleVariant) : SQLFLDDesc30;
function ConvertSQLObjAttrDesc25ToVariant(var R : SQLObjAttrDesc25) : OleVariant;
function ConvertVariantToSQLObjAttrDesc25(const V : OleVariant) : SQLObjAttrDesc25;
function ConvertSQLObjAttrDesc30ToVariant(var R : SQLObjAttrDesc30) : OleVariant;
function ConvertVariantToSQLObjAttrDesc30(const V : OleVariant) : SQLObjAttrDesc30;
function ConvertSQLObjTypeDesc25ToVariant(var R : SQLObjTypeDesc25) : OleVariant;
function ConvertVariantToSQLObjTypeDesc25(const V : OleVariant) : SQLObjTypeDesc25;
function ConvertSQLObjTypeDesc30ToVariant(var R : SQLObjTypeDesc30) : OleVariant;
function ConvertVariantToSQLObjTypeDesc30(const V : OleVariant) : SQLObjTypeDesc30;
function ConvertTTransactionDescToVariant(var R : TTransactionDesc) : OleVariant;
function ConvertVariantToTTransactionDesc(const V : OleVariant) : TTransactionDesc;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __FLDDesc25__Wrapper = class(TDCRecordWrapper)
private
fR : FLDDesc25;
public
function GetRecordPtr : pointer; override;
published
procedure setiFldNum(const val : Word);
function getiFldNum : Word;
property iFldNum : Word read getiFldNum write setiFldNum;
procedure setiFldType(const val : Word);
function getiFldType : Word;
property iFldType : Word read getiFldType write setiFldType;
procedure setiSubType(const val : Word);
function getiSubType : Word;
property iSubType : Word read getiSubType write setiSubType;
procedure setiUnits1(const val : SmallInt);
function getiUnits1 : SmallInt;
property iUnits1 : SmallInt read getiUnits1 write setiUnits1;
procedure setiUnits2(const val : SmallInt);
function getiUnits2 : SmallInt;
property iUnits2 : SmallInt read getiUnits2 write setiUnits2;
procedure setiOffset(const val : Word);
function getiOffset : Word;
property iOffset : Word read getiOffset write setiOffset;
procedure setiLen(const val : LongWord);
function getiLen : LongWord;
property iLen : LongWord read getiLen write setiLen;
procedure setiNullOffset(const val : Word);
function getiNullOffset : Word;
property iNullOffset : Word read getiNullOffset write setiNullOffset;
procedure setefldvVchk(const val : FLDVchk);
function getefldvVchk : FLDVchk;
property efldvVchk : FLDVchk read getefldvVchk write setefldvVchk;
procedure setefldrRights(const val : FLDRights);
function getefldrRights : FLDRights;
property efldrRights : FLDRights read getefldrRights write setefldrRights;
procedure setbCalcField(const val : WordBool);
function getbCalcField : WordBool;
property bCalcField : WordBool read getbCalcField write setbCalcField;
end;
type __FLDDesc30__Wrapper = class(TDCRecordWrapper)
private
fR : FLDDesc30;
public
function GetRecordPtr : pointer; override;
published
procedure setiFldNum(const val : Word);
function getiFldNum : Word;
property iFldNum : Word read getiFldNum write setiFldNum;
procedure setiFldType(const val : Word);
function getiFldType : Word;
property iFldType : Word read getiFldType write setiFldType;
procedure setiSubType(const val : Word);
function getiSubType : Word;
property iSubType : Word read getiSubType write setiSubType;
procedure setiUnits1(const val : SmallInt);
function getiUnits1 : SmallInt;
property iUnits1 : SmallInt read getiUnits1 write setiUnits1;
procedure setiUnits2(const val : SmallInt);
function getiUnits2 : SmallInt;
property iUnits2 : SmallInt read getiUnits2 write setiUnits2;
procedure setiOffset(const val : Word);
function getiOffset : Word;
property iOffset : Word read getiOffset write setiOffset;
procedure setiLen(const val : LongWord);
function getiLen : LongWord;
property iLen : LongWord read getiLen write setiLen;
procedure setiNullOffset(const val : Word);
function getiNullOffset : Word;
property iNullOffset : Word read getiNullOffset write setiNullOffset;
procedure setefldvVchk(const val : FLDVchk);
function getefldvVchk : FLDVchk;
property efldvVchk : FLDVchk read getefldvVchk write setefldvVchk;
procedure setefldrRights(const val : FLDRights);
function getefldrRights : FLDRights;
property efldrRights : FLDRights read getefldrRights write setefldrRights;
procedure setbCalcField(const val : WordBool);
function getbCalcField : WordBool;
property bCalcField : WordBool read getbCalcField write setbCalcField;
end;
type __ObjAttrDesc25__Wrapper = class(TDCRecordWrapper)
private
fR : ObjAttrDesc25;
public
function GetRecordPtr : pointer; override;
published
procedure setiFldNum(const val : Word);
function getiFldNum : Word;
property iFldNum : Word read getiFldNum write setiFldNum;
end;
type __ObjAttrDesc30__Wrapper = class(TDCRecordWrapper)
private
fR : ObjAttrDesc30;
public
function GetRecordPtr : pointer; override;
published
procedure setiFldNum(const val : Word);
function getiFldNum : Word;
property iFldNum : Word read getiFldNum write setiFldNum;
end;
type __ObjParentDesc25__Wrapper = class(TDCRecordWrapper)
private
fR : ObjParentDesc25;
public
function GetRecordPtr : pointer; override;
published
procedure setiFldNum(const val : Word);
function getiFldNum : Word;
property iFldNum : Word read getiFldNum write setiFldNum;
procedure setiParentFldNum(const val : Word);
function getiParentFldNum : Word;
property iParentFldNum : Word read getiParentFldNum write setiParentFldNum;
end;
type __ObjParentDesc30__Wrapper = class(TDCRecordWrapper)
private
fR : ObjParentDesc30;
public
function GetRecordPtr : pointer; override;
published
procedure setiFldNum(const val : Word);
function getiFldNum : Word;
property iFldNum : Word read getiFldNum write setiFldNum;
procedure setiParentFldNum(const val : Word);
function getiParentFldNum : Word;
property iParentFldNum : Word read getiParentFldNum write setiParentFldNum;
end;
type __ObjTypeDesc25__Wrapper = class(TDCRecordWrapper)
private
fR : ObjTypeDesc25;
public
function GetRecordPtr : pointer; override;
published
procedure setiFldNum(const val : Word);
function getiFldNum : Word;
property iFldNum : Word read getiFldNum write setiFldNum;
end;
type __ObjTypeDesc30__Wrapper = class(TDCRecordWrapper)
private
fR : ObjTypeDesc30;
public
function GetRecordPtr : pointer; override;
published
procedure setiFldNum(const val : Word);
function getiFldNum : Word;
property iFldNum : Word read getiFldNum write setiFldNum;
end;
type __SQLFLDDesc25__Wrapper = class(TDCRecordWrapper)
private
fR : SQLFLDDesc25;
public
function GetRecordPtr : pointer; override;
published
procedure setiFldNum(const val : Word);
function getiFldNum : Word;
property iFldNum : Word read getiFldNum write setiFldNum;
procedure setiFldType(const val : Word);
function getiFldType : Word;
property iFldType : Word read getiFldType write setiFldType;
procedure setiSubType(const val : Word);
function getiSubType : Word;
property iSubType : Word read getiSubType write setiSubType;
procedure setiUnits1(const val : SmallInt);
function getiUnits1 : SmallInt;
property iUnits1 : SmallInt read getiUnits1 write setiUnits1;
procedure setiUnits2(const val : SmallInt);
function getiUnits2 : SmallInt;
property iUnits2 : SmallInt read getiUnits2 write setiUnits2;
procedure setiOffset(const val : Word);
function getiOffset : Word;
property iOffset : Word read getiOffset write setiOffset;
procedure setiLen(const val : LongWord);
function getiLen : LongWord;
property iLen : LongWord read getiLen write setiLen;
procedure setiNullOffset(const val : Word);
function getiNullOffset : Word;
property iNullOffset : Word read getiNullOffset write setiNullOffset;
procedure setefldvVchk(const val : FLDVchk);
function getefldvVchk : FLDVchk;
property efldvVchk : FLDVchk read getefldvVchk write setefldvVchk;
procedure setefldrRights(const val : FLDRights);
function getefldrRights : FLDRights;
property efldrRights : FLDRights read getefldrRights write setefldrRights;
procedure setbCalcField(const val : WordBool);
function getbCalcField : WordBool;
property bCalcField : WordBool read getbCalcField write setbCalcField;
end;
type __SQLFLDDesc30__Wrapper = class(TDCRecordWrapper)
private
fR : SQLFLDDesc30;
public
function GetRecordPtr : pointer; override;
published
procedure setiFldNum(const val : Word);
function getiFldNum : Word;
property iFldNum : Word read getiFldNum write setiFldNum;
procedure setiFldType(const val : Word);
function getiFldType : Word;
property iFldType : Word read getiFldType write setiFldType;
procedure setiSubType(const val : Word);
function getiSubType : Word;
property iSubType : Word read getiSubType write setiSubType;
procedure setiUnits1(const val : SmallInt);
function getiUnits1 : SmallInt;
property iUnits1 : SmallInt read getiUnits1 write setiUnits1;
procedure setiUnits2(const val : SmallInt);
function getiUnits2 : SmallInt;
property iUnits2 : SmallInt read getiUnits2 write setiUnits2;
procedure setiOffset(const val : Word);
function getiOffset : Word;
property iOffset : Word read getiOffset write setiOffset;
procedure setiLen(const val : LongWord);
function getiLen : LongWord;
property iLen : LongWord read getiLen write setiLen;
procedure setiNullOffset(const val : Word);
function getiNullOffset : Word;
property iNullOffset : Word read getiNullOffset write setiNullOffset;
procedure setefldvVchk(const val : FLDVchk);
function getefldvVchk : FLDVchk;
property efldvVchk : FLDVchk read getefldvVchk write setefldvVchk;
procedure setefldrRights(const val : FLDRights);
function getefldrRights : FLDRights;
property efldrRights : FLDRights read getefldrRights write setefldrRights;
procedure setbCalcField(const val : WordBool);
function getbCalcField : WordBool;
property bCalcField : WordBool read getbCalcField write setbCalcField;
end;
type __SQLObjAttrDesc25__Wrapper = class(TDCRecordWrapper)
private
fR : SQLObjAttrDesc25;
public
function GetRecordPtr : pointer; override;
published
procedure setiFldNum(const val : Word);
function getiFldNum : Word;
property iFldNum : Word read getiFldNum write setiFldNum;
end;
type __SQLObjAttrDesc30__Wrapper = class(TDCRecordWrapper)
private
fR : SQLObjAttrDesc30;
public
function GetRecordPtr : pointer; override;
published
procedure setiFldNum(const val : Word);
function getiFldNum : Word;
property iFldNum : Word read getiFldNum write setiFldNum;
end;
type __SQLObjTypeDesc25__Wrapper = class(TDCRecordWrapper)
private
fR : SQLObjTypeDesc25;
public
function GetRecordPtr : pointer; override;
published
procedure setiFldNum(const val : Word);
function getiFldNum : Word;
property iFldNum : Word read getiFldNum write setiFldNum;
end;
type __SQLObjTypeDesc30__Wrapper = class(TDCRecordWrapper)
private
fR : SQLObjTypeDesc30;
public
function GetRecordPtr : pointer; override;
published
procedure setiFldNum(const val : Word);
function getiFldNum : Word;
property iFldNum : Word read getiFldNum write setiFldNum;
end;
type __TTransactionDesc__Wrapper = class(TDCRecordWrapper)
private
fR : TTransactionDesc;
public
function GetRecordPtr : pointer; override;
published
procedure setTransactionID(const val : LongWord);
function getTransactionID : LongWord;
property TransactionID : LongWord read getTransactionID write setTransactionID;
procedure setGlobalID(const val : LongWord);
function getGlobalID : LongWord;
property GlobalID : LongWord read getGlobalID write setGlobalID;
procedure setIsolationLevel(const val : TTransIsolationLevel);
function getIsolationLevel : TTransIsolationLevel;
property IsolationLevel : TTransIsolationLevel read getIsolationLevel write setIsolationLevel;
procedure setCustomIsolation(const val : LongWord);
function getCustomIsolation : LongWord;
property CustomIsolation : LongWord read getCustomIsolation write setCustomIsolation;
end;
function __FLDDesc25__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __FLDDesc25__Wrapper.setiFldNum(const val : Word);
begin
FLDDesc25(GetRecordPtr^).iFldNum := val;
end;
function __FLDDesc25__Wrapper.getiFldNum : Word;
begin
result := FLDDesc25(GetRecordPtr^).iFldNum;
end;
procedure __FLDDesc25__Wrapper.setiFldType(const val : Word);
begin
FLDDesc25(GetRecordPtr^).iFldType := val;
end;
function __FLDDesc25__Wrapper.getiFldType : Word;
begin
result := FLDDesc25(GetRecordPtr^).iFldType;
end;
procedure __FLDDesc25__Wrapper.setiSubType(const val : Word);
begin
FLDDesc25(GetRecordPtr^).iSubType := val;
end;
function __FLDDesc25__Wrapper.getiSubType : Word;
begin
result := FLDDesc25(GetRecordPtr^).iSubType;
end;
procedure __FLDDesc25__Wrapper.setiUnits1(const val : SmallInt);
begin
FLDDesc25(GetRecordPtr^).iUnits1 := val;
end;
function __FLDDesc25__Wrapper.getiUnits1 : SmallInt;
begin
result := FLDDesc25(GetRecordPtr^).iUnits1;
end;
procedure __FLDDesc25__Wrapper.setiUnits2(const val : SmallInt);
begin
FLDDesc25(GetRecordPtr^).iUnits2 := val;
end;
function __FLDDesc25__Wrapper.getiUnits2 : SmallInt;
begin
result := FLDDesc25(GetRecordPtr^).iUnits2;
end;
procedure __FLDDesc25__Wrapper.setiOffset(const val : Word);
begin
FLDDesc25(GetRecordPtr^).iOffset := val;
end;
function __FLDDesc25__Wrapper.getiOffset : Word;
begin
result := FLDDesc25(GetRecordPtr^).iOffset;
end;
procedure __FLDDesc25__Wrapper.setiLen(const val : LongWord);
begin
FLDDesc25(GetRecordPtr^).iLen := val;
end;
function __FLDDesc25__Wrapper.getiLen : LongWord;
begin
result := FLDDesc25(GetRecordPtr^).iLen;
end;
procedure __FLDDesc25__Wrapper.setiNullOffset(const val : Word);
begin
FLDDesc25(GetRecordPtr^).iNullOffset := val;
end;
function __FLDDesc25__Wrapper.getiNullOffset : Word;
begin
result := FLDDesc25(GetRecordPtr^).iNullOffset;
end;
procedure __FLDDesc25__Wrapper.setefldvVchk(const val : FLDVchk);
begin
FLDDesc25(GetRecordPtr^).efldvVchk := val;
end;
function __FLDDesc25__Wrapper.getefldvVchk : FLDVchk;
begin
result := FLDDesc25(GetRecordPtr^).efldvVchk;
end;
procedure __FLDDesc25__Wrapper.setefldrRights(const val : FLDRights);
begin
FLDDesc25(GetRecordPtr^).efldrRights := val;
end;
function __FLDDesc25__Wrapper.getefldrRights : FLDRights;
begin
result := FLDDesc25(GetRecordPtr^).efldrRights;
end;
procedure __FLDDesc25__Wrapper.setbCalcField(const val : WordBool);
begin
FLDDesc25(GetRecordPtr^).bCalcField := val;
end;
function __FLDDesc25__Wrapper.getbCalcField : WordBool;
begin
result := FLDDesc25(GetRecordPtr^).bCalcField;
end;
function __FLDDesc30__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __FLDDesc30__Wrapper.setiFldNum(const val : Word);
begin
FLDDesc30(GetRecordPtr^).iFldNum := val;
end;
function __FLDDesc30__Wrapper.getiFldNum : Word;
begin
result := FLDDesc30(GetRecordPtr^).iFldNum;
end;
procedure __FLDDesc30__Wrapper.setiFldType(const val : Word);
begin
FLDDesc30(GetRecordPtr^).iFldType := val;
end;
function __FLDDesc30__Wrapper.getiFldType : Word;
begin
result := FLDDesc30(GetRecordPtr^).iFldType;
end;
procedure __FLDDesc30__Wrapper.setiSubType(const val : Word);
begin
FLDDesc30(GetRecordPtr^).iSubType := val;
end;
function __FLDDesc30__Wrapper.getiSubType : Word;
begin
result := FLDDesc30(GetRecordPtr^).iSubType;
end;
procedure __FLDDesc30__Wrapper.setiUnits1(const val : SmallInt);
begin
FLDDesc30(GetRecordPtr^).iUnits1 := val;
end;
function __FLDDesc30__Wrapper.getiUnits1 : SmallInt;
begin
result := FLDDesc30(GetRecordPtr^).iUnits1;
end;
procedure __FLDDesc30__Wrapper.setiUnits2(const val : SmallInt);
begin
FLDDesc30(GetRecordPtr^).iUnits2 := val;
end;
function __FLDDesc30__Wrapper.getiUnits2 : SmallInt;
begin
result := FLDDesc30(GetRecordPtr^).iUnits2;
end;
procedure __FLDDesc30__Wrapper.setiOffset(const val : Word);
begin
FLDDesc30(GetRecordPtr^).iOffset := val;
end;
function __FLDDesc30__Wrapper.getiOffset : Word;
begin
result := FLDDesc30(GetRecordPtr^).iOffset;
end;
procedure __FLDDesc30__Wrapper.setiLen(const val : LongWord);
begin
FLDDesc30(GetRecordPtr^).iLen := val;
end;
function __FLDDesc30__Wrapper.getiLen : LongWord;
begin
result := FLDDesc30(GetRecordPtr^).iLen;
end;
procedure __FLDDesc30__Wrapper.setiNullOffset(const val : Word);
begin
FLDDesc30(GetRecordPtr^).iNullOffset := val;
end;
function __FLDDesc30__Wrapper.getiNullOffset : Word;
begin
result := FLDDesc30(GetRecordPtr^).iNullOffset;
end;
procedure __FLDDesc30__Wrapper.setefldvVchk(const val : FLDVchk);
begin
FLDDesc30(GetRecordPtr^).efldvVchk := val;
end;
function __FLDDesc30__Wrapper.getefldvVchk : FLDVchk;
begin
result := FLDDesc30(GetRecordPtr^).efldvVchk;
end;
procedure __FLDDesc30__Wrapper.setefldrRights(const val : FLDRights);
begin
FLDDesc30(GetRecordPtr^).efldrRights := val;
end;
function __FLDDesc30__Wrapper.getefldrRights : FLDRights;
begin
result := FLDDesc30(GetRecordPtr^).efldrRights;
end;
procedure __FLDDesc30__Wrapper.setbCalcField(const val : WordBool);
begin
FLDDesc30(GetRecordPtr^).bCalcField := val;
end;
function __FLDDesc30__Wrapper.getbCalcField : WordBool;
begin
result := FLDDesc30(GetRecordPtr^).bCalcField;
end;
function __ObjAttrDesc25__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ObjAttrDesc25__Wrapper.setiFldNum(const val : Word);
begin
ObjAttrDesc25(GetRecordPtr^).iFldNum := val;
end;
function __ObjAttrDesc25__Wrapper.getiFldNum : Word;
begin
result := ObjAttrDesc25(GetRecordPtr^).iFldNum;
end;
function __ObjAttrDesc30__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ObjAttrDesc30__Wrapper.setiFldNum(const val : Word);
begin
ObjAttrDesc30(GetRecordPtr^).iFldNum := val;
end;
function __ObjAttrDesc30__Wrapper.getiFldNum : Word;
begin
result := ObjAttrDesc30(GetRecordPtr^).iFldNum;
end;
function __ObjParentDesc25__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ObjParentDesc25__Wrapper.setiFldNum(const val : Word);
begin
ObjParentDesc25(GetRecordPtr^).iFldNum := val;
end;
function __ObjParentDesc25__Wrapper.getiFldNum : Word;
begin
result := ObjParentDesc25(GetRecordPtr^).iFldNum;
end;
procedure __ObjParentDesc25__Wrapper.setiParentFldNum(const val : Word);
begin
ObjParentDesc25(GetRecordPtr^).iParentFldNum := val;
end;
function __ObjParentDesc25__Wrapper.getiParentFldNum : Word;
begin
result := ObjParentDesc25(GetRecordPtr^).iParentFldNum;
end;
function __ObjParentDesc30__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ObjParentDesc30__Wrapper.setiFldNum(const val : Word);
begin
ObjParentDesc30(GetRecordPtr^).iFldNum := val;
end;
function __ObjParentDesc30__Wrapper.getiFldNum : Word;
begin
result := ObjParentDesc30(GetRecordPtr^).iFldNum;
end;
procedure __ObjParentDesc30__Wrapper.setiParentFldNum(const val : Word);
begin
ObjParentDesc30(GetRecordPtr^).iParentFldNum := val;
end;
function __ObjParentDesc30__Wrapper.getiParentFldNum : Word;
begin
result := ObjParentDesc30(GetRecordPtr^).iParentFldNum;
end;
function __ObjTypeDesc25__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ObjTypeDesc25__Wrapper.setiFldNum(const val : Word);
begin
ObjTypeDesc25(GetRecordPtr^).iFldNum := val;
end;
function __ObjTypeDesc25__Wrapper.getiFldNum : Word;
begin
result := ObjTypeDesc25(GetRecordPtr^).iFldNum;
end;
function __ObjTypeDesc30__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __ObjTypeDesc30__Wrapper.setiFldNum(const val : Word);
begin
ObjTypeDesc30(GetRecordPtr^).iFldNum := val;
end;
function __ObjTypeDesc30__Wrapper.getiFldNum : Word;
begin
result := ObjTypeDesc30(GetRecordPtr^).iFldNum;
end;
function __SQLFLDDesc25__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __SQLFLDDesc25__Wrapper.setiFldNum(const val : Word);
begin
SQLFLDDesc25(GetRecordPtr^).iFldNum := val;
end;
function __SQLFLDDesc25__Wrapper.getiFldNum : Word;
begin
result := SQLFLDDesc25(GetRecordPtr^).iFldNum;
end;
procedure __SQLFLDDesc25__Wrapper.setiFldType(const val : Word);
begin
SQLFLDDesc25(GetRecordPtr^).iFldType := val;
end;
function __SQLFLDDesc25__Wrapper.getiFldType : Word;
begin
result := SQLFLDDesc25(GetRecordPtr^).iFldType;
end;
procedure __SQLFLDDesc25__Wrapper.setiSubType(const val : Word);
begin
SQLFLDDesc25(GetRecordPtr^).iSubType := val;
end;
function __SQLFLDDesc25__Wrapper.getiSubType : Word;
begin
result := SQLFLDDesc25(GetRecordPtr^).iSubType;
end;
procedure __SQLFLDDesc25__Wrapper.setiUnits1(const val : SmallInt);
begin
SQLFLDDesc25(GetRecordPtr^).iUnits1 := val;
end;
function __SQLFLDDesc25__Wrapper.getiUnits1 : SmallInt;
begin
result := SQLFLDDesc25(GetRecordPtr^).iUnits1;
end;
procedure __SQLFLDDesc25__Wrapper.setiUnits2(const val : SmallInt);
begin
SQLFLDDesc25(GetRecordPtr^).iUnits2 := val;
end;
function __SQLFLDDesc25__Wrapper.getiUnits2 : SmallInt;
begin
result := SQLFLDDesc25(GetRecordPtr^).iUnits2;
end;
procedure __SQLFLDDesc25__Wrapper.setiOffset(const val : Word);
begin
SQLFLDDesc25(GetRecordPtr^).iOffset := val;
end;
function __SQLFLDDesc25__Wrapper.getiOffset : Word;
begin
result := SQLFLDDesc25(GetRecordPtr^).iOffset;
end;
procedure __SQLFLDDesc25__Wrapper.setiLen(const val : LongWord);
begin
SQLFLDDesc25(GetRecordPtr^).iLen := val;
end;
function __SQLFLDDesc25__Wrapper.getiLen : LongWord;
begin
result := SQLFLDDesc25(GetRecordPtr^).iLen;
end;
procedure __SQLFLDDesc25__Wrapper.setiNullOffset(const val : Word);
begin
SQLFLDDesc25(GetRecordPtr^).iNullOffset := val;
end;
function __SQLFLDDesc25__Wrapper.getiNullOffset : Word;
begin
result := SQLFLDDesc25(GetRecordPtr^).iNullOffset;
end;
procedure __SQLFLDDesc25__Wrapper.setefldvVchk(const val : FLDVchk);
begin
SQLFLDDesc25(GetRecordPtr^).efldvVchk := val;
end;
function __SQLFLDDesc25__Wrapper.getefldvVchk : FLDVchk;
begin
result := SQLFLDDesc25(GetRecordPtr^).efldvVchk;
end;
procedure __SQLFLDDesc25__Wrapper.setefldrRights(const val : FLDRights);
begin
SQLFLDDesc25(GetRecordPtr^).efldrRights := val;
end;
function __SQLFLDDesc25__Wrapper.getefldrRights : FLDRights;
begin
result := SQLFLDDesc25(GetRecordPtr^).efldrRights;
end;
procedure __SQLFLDDesc25__Wrapper.setbCalcField(const val : WordBool);
begin
SQLFLDDesc25(GetRecordPtr^).bCalcField := val;
end;
function __SQLFLDDesc25__Wrapper.getbCalcField : WordBool;
begin
result := SQLFLDDesc25(GetRecordPtr^).bCalcField;
end;
function __SQLFLDDesc30__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __SQLFLDDesc30__Wrapper.setiFldNum(const val : Word);
begin
SQLFLDDesc30(GetRecordPtr^).iFldNum := val;
end;
function __SQLFLDDesc30__Wrapper.getiFldNum : Word;
begin
result := SQLFLDDesc30(GetRecordPtr^).iFldNum;
end;
procedure __SQLFLDDesc30__Wrapper.setiFldType(const val : Word);
begin
SQLFLDDesc30(GetRecordPtr^).iFldType := val;
end;
function __SQLFLDDesc30__Wrapper.getiFldType : Word;
begin
result := SQLFLDDesc30(GetRecordPtr^).iFldType;
end;
procedure __SQLFLDDesc30__Wrapper.setiSubType(const val : Word);
begin
SQLFLDDesc30(GetRecordPtr^).iSubType := val;
end;
function __SQLFLDDesc30__Wrapper.getiSubType : Word;
begin
result := SQLFLDDesc30(GetRecordPtr^).iSubType;
end;
procedure __SQLFLDDesc30__Wrapper.setiUnits1(const val : SmallInt);
begin
SQLFLDDesc30(GetRecordPtr^).iUnits1 := val;
end;
function __SQLFLDDesc30__Wrapper.getiUnits1 : SmallInt;
begin
result := SQLFLDDesc30(GetRecordPtr^).iUnits1;
end;
procedure __SQLFLDDesc30__Wrapper.setiUnits2(const val : SmallInt);
begin
SQLFLDDesc30(GetRecordPtr^).iUnits2 := val;
end;
function __SQLFLDDesc30__Wrapper.getiUnits2 : SmallInt;
begin
result := SQLFLDDesc30(GetRecordPtr^).iUnits2;
end;
procedure __SQLFLDDesc30__Wrapper.setiOffset(const val : Word);
begin
SQLFLDDesc30(GetRecordPtr^).iOffset := val;
end;
function __SQLFLDDesc30__Wrapper.getiOffset : Word;
begin
result := SQLFLDDesc30(GetRecordPtr^).iOffset;
end;
procedure __SQLFLDDesc30__Wrapper.setiLen(const val : LongWord);
begin
SQLFLDDesc30(GetRecordPtr^).iLen := val;
end;
function __SQLFLDDesc30__Wrapper.getiLen : LongWord;
begin
result := SQLFLDDesc30(GetRecordPtr^).iLen;
end;
procedure __SQLFLDDesc30__Wrapper.setiNullOffset(const val : Word);
begin
SQLFLDDesc30(GetRecordPtr^).iNullOffset := val;
end;
function __SQLFLDDesc30__Wrapper.getiNullOffset : Word;
begin
result := SQLFLDDesc30(GetRecordPtr^).iNullOffset;
end;
procedure __SQLFLDDesc30__Wrapper.setefldvVchk(const val : FLDVchk);
begin
SQLFLDDesc30(GetRecordPtr^).efldvVchk := val;
end;
function __SQLFLDDesc30__Wrapper.getefldvVchk : FLDVchk;
begin
result := SQLFLDDesc30(GetRecordPtr^).efldvVchk;
end;
procedure __SQLFLDDesc30__Wrapper.setefldrRights(const val : FLDRights);
begin
SQLFLDDesc30(GetRecordPtr^).efldrRights := val;
end;
function __SQLFLDDesc30__Wrapper.getefldrRights : FLDRights;
begin
result := SQLFLDDesc30(GetRecordPtr^).efldrRights;
end;
procedure __SQLFLDDesc30__Wrapper.setbCalcField(const val : WordBool);
begin
SQLFLDDesc30(GetRecordPtr^).bCalcField := val;
end;
function __SQLFLDDesc30__Wrapper.getbCalcField : WordBool;
begin
result := SQLFLDDesc30(GetRecordPtr^).bCalcField;
end;
function __SQLObjAttrDesc25__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __SQLObjAttrDesc25__Wrapper.setiFldNum(const val : Word);
begin
SQLObjAttrDesc25(GetRecordPtr^).iFldNum := val;
end;
function __SQLObjAttrDesc25__Wrapper.getiFldNum : Word;
begin
result := SQLObjAttrDesc25(GetRecordPtr^).iFldNum;
end;
function __SQLObjAttrDesc30__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __SQLObjAttrDesc30__Wrapper.setiFldNum(const val : Word);
begin
SQLObjAttrDesc30(GetRecordPtr^).iFldNum := val;
end;
function __SQLObjAttrDesc30__Wrapper.getiFldNum : Word;
begin
result := SQLObjAttrDesc30(GetRecordPtr^).iFldNum;
end;
function __SQLObjTypeDesc25__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __SQLObjTypeDesc25__Wrapper.setiFldNum(const val : Word);
begin
SQLObjTypeDesc25(GetRecordPtr^).iFldNum := val;
end;
function __SQLObjTypeDesc25__Wrapper.getiFldNum : Word;
begin
result := SQLObjTypeDesc25(GetRecordPtr^).iFldNum;
end;
function __SQLObjTypeDesc30__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __SQLObjTypeDesc30__Wrapper.setiFldNum(const val : Word);
begin
SQLObjTypeDesc30(GetRecordPtr^).iFldNum := val;
end;
function __SQLObjTypeDesc30__Wrapper.getiFldNum : Word;
begin
result := SQLObjTypeDesc30(GetRecordPtr^).iFldNum;
end;
function __TTransactionDesc__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TTransactionDesc__Wrapper.setTransactionID(const val : LongWord);
begin
TTransactionDesc(GetRecordPtr^).TransactionID := val;
end;
function __TTransactionDesc__Wrapper.getTransactionID : LongWord;
begin
result := TTransactionDesc(GetRecordPtr^).TransactionID;
end;
procedure __TTransactionDesc__Wrapper.setGlobalID(const val : LongWord);
begin
TTransactionDesc(GetRecordPtr^).GlobalID := val;
end;
function __TTransactionDesc__Wrapper.getGlobalID : LongWord;
begin
result := TTransactionDesc(GetRecordPtr^).GlobalID;
end;
procedure __TTransactionDesc__Wrapper.setIsolationLevel(const val : TTransIsolationLevel);
begin
TTransactionDesc(GetRecordPtr^).IsolationLevel := val;
end;
function __TTransactionDesc__Wrapper.getIsolationLevel : TTransIsolationLevel;
begin
result := TTransactionDesc(GetRecordPtr^).IsolationLevel;
end;
procedure __TTransactionDesc__Wrapper.setCustomIsolation(const val : LongWord);
begin
TTransactionDesc(GetRecordPtr^).CustomIsolation := val;
end;
function __TTransactionDesc__Wrapper.getCustomIsolation : LongWord;
begin
result := TTransactionDesc(GetRecordPtr^).CustomIsolation;
end;
function _FLDDesc25_ : IDispatch;
begin
  result := __FLDDesc25__Wrapper.Create;
end;
function _FLDDesc30_ : IDispatch;
begin
  result := __FLDDesc30__Wrapper.Create;
end;
function _ObjAttrDesc25_ : IDispatch;
begin
  result := __ObjAttrDesc25__Wrapper.Create;
end;
function _ObjAttrDesc30_ : IDispatch;
begin
  result := __ObjAttrDesc30__Wrapper.Create;
end;
function _ObjParentDesc25_ : IDispatch;
begin
  result := __ObjParentDesc25__Wrapper.Create;
end;
function _ObjParentDesc30_ : IDispatch;
begin
  result := __ObjParentDesc30__Wrapper.Create;
end;
function _ObjTypeDesc25_ : IDispatch;
begin
  result := __ObjTypeDesc25__Wrapper.Create;
end;
function _ObjTypeDesc30_ : IDispatch;
begin
  result := __ObjTypeDesc30__Wrapper.Create;
end;
function _SQLFLDDesc25_ : IDispatch;
begin
  result := __SQLFLDDesc25__Wrapper.Create;
end;
function _SQLFLDDesc30_ : IDispatch;
begin
  result := __SQLFLDDesc30__Wrapper.Create;
end;
function _SQLObjAttrDesc25_ : IDispatch;
begin
  result := __SQLObjAttrDesc25__Wrapper.Create;
end;
function _SQLObjAttrDesc30_ : IDispatch;
begin
  result := __SQLObjAttrDesc30__Wrapper.Create;
end;
function _SQLObjTypeDesc25_ : IDispatch;
begin
  result := __SQLObjTypeDesc25__Wrapper.Create;
end;
function _SQLObjTypeDesc30_ : IDispatch;
begin
  result := __SQLObjTypeDesc30__Wrapper.Create;
end;
function _TTransactionDesc_ : IDispatch;
begin
  result := __TTransactionDesc__Wrapper.Create;
end;

type __FLDDesc25__Wrapper__ = class(__FLDDesc25__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __FLDDesc25__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertFLDDesc25ToVariant(var R : FLDDesc25) : OleVariant;
var
__rw : __FLDDesc25__Wrapper__;
begin
__rw := __FLDDesc25__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToFLDDesc25(const V : OleVariant) : FLDDesc25;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := FLDDesc25((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __FLDDesc30__Wrapper__ = class(__FLDDesc30__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __FLDDesc30__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertFLDDesc30ToVariant(var R : FLDDesc30) : OleVariant;
var
__rw : __FLDDesc30__Wrapper__;
begin
__rw := __FLDDesc30__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToFLDDesc30(const V : OleVariant) : FLDDesc30;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := FLDDesc30((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ObjAttrDesc25__Wrapper__ = class(__ObjAttrDesc25__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ObjAttrDesc25__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertObjAttrDesc25ToVariant(var R : ObjAttrDesc25) : OleVariant;
var
__rw : __ObjAttrDesc25__Wrapper__;
begin
__rw := __ObjAttrDesc25__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToObjAttrDesc25(const V : OleVariant) : ObjAttrDesc25;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ObjAttrDesc25((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ObjAttrDesc30__Wrapper__ = class(__ObjAttrDesc30__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ObjAttrDesc30__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertObjAttrDesc30ToVariant(var R : ObjAttrDesc30) : OleVariant;
var
__rw : __ObjAttrDesc30__Wrapper__;
begin
__rw := __ObjAttrDesc30__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToObjAttrDesc30(const V : OleVariant) : ObjAttrDesc30;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ObjAttrDesc30((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ObjParentDesc25__Wrapper__ = class(__ObjParentDesc25__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ObjParentDesc25__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertObjParentDesc25ToVariant(var R : ObjParentDesc25) : OleVariant;
var
__rw : __ObjParentDesc25__Wrapper__;
begin
__rw := __ObjParentDesc25__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToObjParentDesc25(const V : OleVariant) : ObjParentDesc25;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ObjParentDesc25((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ObjParentDesc30__Wrapper__ = class(__ObjParentDesc30__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ObjParentDesc30__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertObjParentDesc30ToVariant(var R : ObjParentDesc30) : OleVariant;
var
__rw : __ObjParentDesc30__Wrapper__;
begin
__rw := __ObjParentDesc30__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToObjParentDesc30(const V : OleVariant) : ObjParentDesc30;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ObjParentDesc30((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ObjTypeDesc25__Wrapper__ = class(__ObjTypeDesc25__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ObjTypeDesc25__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertObjTypeDesc25ToVariant(var R : ObjTypeDesc25) : OleVariant;
var
__rw : __ObjTypeDesc25__Wrapper__;
begin
__rw := __ObjTypeDesc25__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToObjTypeDesc25(const V : OleVariant) : ObjTypeDesc25;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ObjTypeDesc25((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __ObjTypeDesc30__Wrapper__ = class(__ObjTypeDesc30__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __ObjTypeDesc30__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertObjTypeDesc30ToVariant(var R : ObjTypeDesc30) : OleVariant;
var
__rw : __ObjTypeDesc30__Wrapper__;
begin
__rw := __ObjTypeDesc30__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToObjTypeDesc30(const V : OleVariant) : ObjTypeDesc30;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := ObjTypeDesc30((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SQLFLDDesc25__Wrapper__ = class(__SQLFLDDesc25__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SQLFLDDesc25__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSQLFLDDesc25ToVariant(var R : SQLFLDDesc25) : OleVariant;
var
__rw : __SQLFLDDesc25__Wrapper__;
begin
__rw := __SQLFLDDesc25__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSQLFLDDesc25(const V : OleVariant) : SQLFLDDesc25;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SQLFLDDesc25((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SQLFLDDesc30__Wrapper__ = class(__SQLFLDDesc30__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SQLFLDDesc30__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSQLFLDDesc30ToVariant(var R : SQLFLDDesc30) : OleVariant;
var
__rw : __SQLFLDDesc30__Wrapper__;
begin
__rw := __SQLFLDDesc30__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSQLFLDDesc30(const V : OleVariant) : SQLFLDDesc30;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SQLFLDDesc30((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SQLObjAttrDesc25__Wrapper__ = class(__SQLObjAttrDesc25__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SQLObjAttrDesc25__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSQLObjAttrDesc25ToVariant(var R : SQLObjAttrDesc25) : OleVariant;
var
__rw : __SQLObjAttrDesc25__Wrapper__;
begin
__rw := __SQLObjAttrDesc25__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSQLObjAttrDesc25(const V : OleVariant) : SQLObjAttrDesc25;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SQLObjAttrDesc25((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SQLObjAttrDesc30__Wrapper__ = class(__SQLObjAttrDesc30__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SQLObjAttrDesc30__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSQLObjAttrDesc30ToVariant(var R : SQLObjAttrDesc30) : OleVariant;
var
__rw : __SQLObjAttrDesc30__Wrapper__;
begin
__rw := __SQLObjAttrDesc30__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSQLObjAttrDesc30(const V : OleVariant) : SQLObjAttrDesc30;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SQLObjAttrDesc30((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SQLObjTypeDesc25__Wrapper__ = class(__SQLObjTypeDesc25__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SQLObjTypeDesc25__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSQLObjTypeDesc25ToVariant(var R : SQLObjTypeDesc25) : OleVariant;
var
__rw : __SQLObjTypeDesc25__Wrapper__;
begin
__rw := __SQLObjTypeDesc25__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSQLObjTypeDesc25(const V : OleVariant) : SQLObjTypeDesc25;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SQLObjTypeDesc25((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __SQLObjTypeDesc30__Wrapper__ = class(__SQLObjTypeDesc30__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __SQLObjTypeDesc30__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertSQLObjTypeDesc30ToVariant(var R : SQLObjTypeDesc30) : OleVariant;
var
__rw : __SQLObjTypeDesc30__Wrapper__;
begin
__rw := __SQLObjTypeDesc30__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToSQLObjTypeDesc30(const V : OleVariant) : SQLObjTypeDesc30;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := SQLObjTypeDesc30((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TTransactionDesc__Wrapper__ = class(__TTransactionDesc__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TTransactionDesc__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTTransactionDescToVariant(var R : TTransactionDesc) : OleVariant;
var
__rw : __TTransactionDesc__Wrapper__;
begin
__rw := __TTransactionDesc__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTTransactionDesc(const V : OleVariant) : TTransactionDesc;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TTransactionDesc((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

const __ConstNames0 : array[0..231] of string = (
'DBXDRIVERVERSION30'
,'DBXPRODUCTVERSION30'
,'MAXNAMELEN'
,'NAMEBUFLEN'
,'SQL_ERROR'
,'SQL_NULL_DATA'
,'DBXERR_NONE'
,'DBXERR_WARNING'
,'DBXERR_NOMEMORY'
,'DBXERR_INVALIDFLDTYPE'
,'DBXERR_INVALIDHNDL'
,'DBXERR_NOTSUPPORTED'
,'DBXERR_INVALIDTIME'
,'DBXERR_INVALIDXLATION'
,'DBXERR_OUTOFRANGE'
,'DBXERR_INVALIDPARAM'
,'DBXERR_EOF'
,'DBXERR_SQLPARAMNOTSET'
,'DBXERR_INVALIDUSRPASS'
,'DBXERR_INVALIDPRECISION'
,'DBXERR_INVALIDLEN'
,'DBXERR_INVALIDTXNISOLEVEL'
,'DBXERR_INVALIDTXNID'
,'DBXERR_DUPLICATETXNID'
,'DBXERR_DRIVERRESTRICTED'
,'DBXERR_LOCALTRANSACTIVE'
,'DBXERR_MULTIPLETRANSNOTENABLED'
,'DBXERR_CONNECTIONFAILED'
,'DBXERR_DRIVERINITFAILED'
,'DBXERR_OPTLOCKFAILED'
,'DBXERR_INVALIDREF'
,'DBXERR_NOTABLE'
,'DBXERR_MISSINGPARAMINSQL'
,'DBXERR_NOTIMPLEMENT'
,'DBXERR_DRIVERINCOMPATIBLE'
,'DBXERR_NODATA'
,'DBX_MAXSTATICERRORS'
,'DBXERR_SQLERROR'
,'trUNKNOWN'
,'trQPREPARE'
,'trQEXECUTE'
,'trERROR'
,'trSTMT'
,'trCONNECT'
,'trTRANSACT'
,'trBLOB'
,'trMISC'
,'trVENDOR'
,'trDATAIN'
,'trDATAOUT'
,'eSQLTable'
,'eSQLView'
,'eSQLSystemTable'
,'eSQLSynonym'
,'eSQLTempTable'
,'eSQLLocal'
,'eSQLProcedure'
,'eSQLFunction'
,'eSQLPackage'
,'eSQLSysProcedure'
,'eSQLRowId'
,'eSQLRowVersion'
,'eSQLAutoIncr'
,'eSQLDefault'
,'eSQLNonUnique'
,'eSQLUnique'
,'eSQLPrimaryKey'
,'fldUNKNOWN'
,'fldZSTRING'
,'fldDATE'
,'fldBLOB'
,'fldBOOL'
,'fldINT16'
,'fldINT32'
,'fldFLOAT'
,'fldBCD'
,'fldBYTES'
,'fldTIME'
,'fldTIMESTAMP'
,'fldUINT16'
,'fldUINT32'
,'fldFLOATIEEE'
,'fldVARBYTES'
,'fldLOCKINFO'
,'fldCURSOR'
,'fldINT64'
,'fldUINT64'
,'fldADT'
,'fldARRAY'
,'fldREF'
,'fldTABLE'
,'fldDATETIME'
,'fldFMTBCD'
,'fldWIDESTRING'
,'MAXLOGFLDTYPES'
,'fldstMONEY'
,'fldstMEMO'
,'fldstBINARY'
,'fldstFMTMEMO'
,'fldstOLEOBJ'
,'fldstGRAPHIC'
,'fldstDBSOLEOBJ'
,'fldstTYPEDBINARY'
,'fldstACCOLEOBJ'
,'fldstWIDEMEMO'
,'fldstHMEMO'
,'fldstHBINARY'
,'fldstBFILE'
,'fldstPASSWORD'
,'fldstFIXED'
,'fldstAUTOINC'
,'fldstADTNestedTable'
,'fldstADTDATE'
,'fldstORATIMESTAMP'
,'fldstORAINTERVAL'
,'eDrvBlobSize'
,'eDrvCallBack'
,'eDrvCallBackInfo'
,'eDrvRestrict'
,'eDrvVersion'
,'eDrvProductVersion'
,'eConnAutoCommit'
,'eConnBlockingMode'
,'eConnBlobSize'
,'eConnRoleName'
,'eConnWaitOnLocks'
,'eConnCommitRetain'
,'eConnTxnIsoLevel'
,'eConnNativeHandle'
,'eConnServerVersion'
,'eConnCallBack'
,'eConnHostName'
,'eConnDatabaseName'
,'eConnCallBackInfo'
,'eConnObjectMode'
,'eConnMaxActiveComm'
,'eConnServerCharSet'
,'eConnSqlDialect'
,'eConnRollbackRetain'
,'eConnObjectQuoteChar'
,'eConnConnectionName'
,'eConnOSAuthentication'
,'eConnSupportsTransaction'
,'eConnMultipleTransaction'
,'eConnServerPort'
,'eConnOnLine'
,'eConnTrimChar'
,'eConnQualifiedName'
,'eConnCatalogName'
,'eConnSchemaName'
,'eConnObjectName'
,'eConnQuotedObjectName'
,'eConnCustomInfo'
,'eConnTimeOut'
,'eConnConnectionString'
,'eConnTDSPacketSize'
,'eConnClientHostName'
,'eConnClientAppName'
,'eConnCompressed'
,'eConnEncrypted'
,'eConnPrepareSQL'
,'eConnDecimalSeparator'
,'eCommRowsetSize'
,'eCommBlobSize'
,'eCommBlockRead'
,'eCommBlockWrite'
,'eCommParamCount'
,'eCommNativeHandle'
,'eCommCursorName'
,'eCommStoredProc'
,'eCommSQLDialect'
,'eCommTransactionID'
,'eCommPackageName'
,'eCommTrimChar'
,'eCommQualifiedName'
,'eCommCatalogName'
,'eCommSchemaName'
,'eCommObjectName'
,'eCommQuotedObjectName'
,'eCommPrepareSQL'
,'eCommDecimalSeparator'
,'eCurObjectAttrName'
,'eCurObjectTypeName'
,'eCurParentFieldID'
,'eMetaCatalogName'
,'eMetaSchemaName'
,'eMetaDatabaseName'
,'eMetaDatabaseVersion'
,'eMetaTransactionIsoLevel'
,'eMetaSupportsTransaction'
,'eMetaMaxObjectNameLength'
,'eMetaMaxColumnsInTable'
,'eMetaMaxColumnsInSelect'
,'eMetaMaxRowSize'
,'eMetaMaxSQLLength'
,'eMetaObjectQuoteChar'
,'eMetaSQLEscapeChar'
,'eMetaProcSupportsCursor'
,'eMetaProcSupportsCursors'
,'eMetaSupportsTransactions'
,'eMetaPackageName'
,'eMetaDefaultSchemaName'
,'eObjTypeDatabase'
,'eObjTypeDataType'
,'eObjTypeTable'
,'eObjTypeView'
,'eObjTypeSynonym'
,'eObjTypeProcedure'
,'eObjTypeUser'
,'eObjTypeRole'
,'eObjTypeUDT'
,'eObjTypePackage'
,'xilREADCOMMITTED'
,'xilREPEATABLEREAD'
,'xilDIRTYREAD'
,'xilCUSTOM'
,'paramUNKNOWN'
,'paramIN'
,'paramOUT'
,'paramINOUT'
,'paramRET'
,'traceQPREPARE'
,'traceQEXECUTE'
,'traceERROR'
,'traceSTMT'
,'traceCONNECT'
,'traceTRANSACT'
,'traceBLOB'
,'traceMISC'
,'traceVENDOR'
,'traceDATAIN'
,'traceDATAOUT'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,DBXDRIVERVERSION30));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,DBXPRODUCTVERSION30));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,MAXNAMELEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,NAMEBUFLEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,SQL_ERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,SQL_NULL_DATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,DBXERR_NONE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,DBXERR_WARNING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,DBXERR_NOMEMORY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,DBXERR_INVALIDFLDTYPE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,DBXERR_INVALIDHNDL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,DBXERR_NOTSUPPORTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,DBXERR_INVALIDTIME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,DBXERR_INVALIDXLATION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,DBXERR_OUTOFRANGE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,DBXERR_INVALIDPARAM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,DBXERR_EOF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,DBXERR_SQLPARAMNOTSET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,DBXERR_INVALIDUSRPASS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,DBXERR_INVALIDPRECISION));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,DBXERR_INVALIDLEN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,DBXERR_INVALIDTXNISOLEVEL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,DBXERR_INVALIDTXNID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,DBXERR_DUPLICATETXNID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[24] ,DBXERR_DRIVERRESTRICTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[25] ,DBXERR_LOCALTRANSACTIVE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[26] ,DBXERR_MULTIPLETRANSNOTENABLED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[27] ,DBXERR_CONNECTIONFAILED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[28] ,DBXERR_DRIVERINITFAILED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[29] ,DBXERR_OPTLOCKFAILED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[30] ,DBXERR_INVALIDREF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[31] ,DBXERR_NOTABLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[32] ,DBXERR_MISSINGPARAMINSQL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[33] ,DBXERR_NOTIMPLEMENT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[34] ,DBXERR_DRIVERINCOMPATIBLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[35] ,DBXERR_NODATA));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[36] ,DBX_MAXSTATICERRORS));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[37] ,DBXERR_SQLERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[38] ,trUNKNOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[39] ,trQPREPARE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[40] ,trQEXECUTE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[41] ,trERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[42] ,trSTMT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[43] ,trCONNECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[44] ,trTRANSACT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[45] ,trBLOB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[46] ,trMISC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[47] ,trVENDOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[48] ,trDATAIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[49] ,trDATAOUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[50] ,eSQLTable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[51] ,eSQLView));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[52] ,eSQLSystemTable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[53] ,eSQLSynonym));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[54] ,eSQLTempTable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[55] ,eSQLLocal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[56] ,eSQLProcedure));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[57] ,eSQLFunction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[58] ,eSQLPackage));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[59] ,eSQLSysProcedure));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[60] ,eSQLRowId));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[61] ,eSQLRowVersion));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[62] ,eSQLAutoIncr));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[63] ,eSQLDefault));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[64] ,eSQLNonUnique));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[65] ,eSQLUnique));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[66] ,eSQLPrimaryKey));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[67] ,fldUNKNOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[68] ,fldZSTRING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[69] ,fldDATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[70] ,fldBLOB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[71] ,fldBOOL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[72] ,fldINT16));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[73] ,fldINT32));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[74] ,fldFLOAT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[75] ,fldBCD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[76] ,fldBYTES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[77] ,fldTIME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[78] ,fldTIMESTAMP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[79] ,fldUINT16));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[80] ,fldUINT32));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[81] ,fldFLOATIEEE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[82] ,fldVARBYTES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[83] ,fldLOCKINFO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[84] ,fldCURSOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[85] ,fldINT64));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[86] ,fldUINT64));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[87] ,fldADT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[88] ,fldARRAY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[89] ,fldREF));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[90] ,fldTABLE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[91] ,fldDATETIME));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[92] ,fldFMTBCD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[93] ,fldWIDESTRING));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[94] ,MAXLOGFLDTYPES));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[95] ,fldstMONEY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[96] ,fldstMEMO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[97] ,fldstBINARY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[98] ,fldstFMTMEMO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[99] ,fldstOLEOBJ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[100] ,fldstGRAPHIC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[101] ,fldstDBSOLEOBJ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[102] ,fldstTYPEDBINARY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[103] ,fldstACCOLEOBJ));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[104] ,fldstWIDEMEMO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[105] ,fldstHMEMO));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[106] ,fldstHBINARY));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[107] ,fldstBFILE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[108] ,fldstPASSWORD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[109] ,fldstFIXED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[110] ,fldstAUTOINC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[111] ,fldstADTNestedTable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[112] ,fldstADTDATE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[113] ,fldstORATIMESTAMP));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[114] ,fldstORAINTERVAL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[115] ,eDrvBlobSize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[116] ,eDrvCallBack));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[117] ,eDrvCallBackInfo));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[118] ,eDrvRestrict));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[119] ,eDrvVersion));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[120] ,eDrvProductVersion));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[121] ,eConnAutoCommit));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[122] ,eConnBlockingMode));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[123] ,eConnBlobSize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[124] ,eConnRoleName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[125] ,eConnWaitOnLocks));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[126] ,eConnCommitRetain));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[127] ,eConnTxnIsoLevel));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[128] ,eConnNativeHandle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[129] ,eConnServerVersion));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[130] ,eConnCallBack));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[131] ,eConnHostName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[132] ,eConnDatabaseName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[133] ,eConnCallBackInfo));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[134] ,eConnObjectMode));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[135] ,eConnMaxActiveComm));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[136] ,eConnServerCharSet));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[137] ,eConnSqlDialect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[138] ,eConnRollbackRetain));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[139] ,eConnObjectQuoteChar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[140] ,eConnConnectionName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[141] ,eConnOSAuthentication));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[142] ,eConnSupportsTransaction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[143] ,eConnMultipleTransaction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[144] ,eConnServerPort));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[145] ,eConnOnLine));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[146] ,eConnTrimChar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[147] ,eConnQualifiedName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[148] ,eConnCatalogName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[149] ,eConnSchemaName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[150] ,eConnObjectName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[151] ,eConnQuotedObjectName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[152] ,eConnCustomInfo));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[153] ,eConnTimeOut));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[154] ,eConnConnectionString));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[155] ,eConnTDSPacketSize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[156] ,eConnClientHostName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[157] ,eConnClientAppName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[158] ,eConnCompressed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[159] ,eConnEncrypted));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[160] ,eConnPrepareSQL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[161] ,eConnDecimalSeparator));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[162] ,eCommRowsetSize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[163] ,eCommBlobSize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[164] ,eCommBlockRead));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[165] ,eCommBlockWrite));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[166] ,eCommParamCount));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[167] ,eCommNativeHandle));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[168] ,eCommCursorName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[169] ,eCommStoredProc));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[170] ,eCommSQLDialect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[171] ,eCommTransactionID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[172] ,eCommPackageName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[173] ,eCommTrimChar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[174] ,eCommQualifiedName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[175] ,eCommCatalogName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[176] ,eCommSchemaName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[177] ,eCommObjectName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[178] ,eCommQuotedObjectName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[179] ,eCommPrepareSQL));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[180] ,eCommDecimalSeparator));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[181] ,eCurObjectAttrName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[182] ,eCurObjectTypeName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[183] ,eCurParentFieldID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[184] ,eMetaCatalogName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[185] ,eMetaSchemaName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[186] ,eMetaDatabaseName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[187] ,eMetaDatabaseVersion));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[188] ,eMetaTransactionIsoLevel));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[189] ,eMetaSupportsTransaction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[190] ,eMetaMaxObjectNameLength));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[191] ,eMetaMaxColumnsInTable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[192] ,eMetaMaxColumnsInSelect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[193] ,eMetaMaxRowSize));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[194] ,eMetaMaxSQLLength));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[195] ,eMetaObjectQuoteChar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[196] ,eMetaSQLEscapeChar));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[197] ,eMetaProcSupportsCursor));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[198] ,eMetaProcSupportsCursors));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[199] ,eMetaSupportsTransactions));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[200] ,eMetaPackageName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[201] ,eMetaDefaultSchemaName));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[202] ,eObjTypeDatabase));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[203] ,eObjTypeDataType));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[204] ,eObjTypeTable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[205] ,eObjTypeView));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[206] ,eObjTypeSynonym));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[207] ,eObjTypeProcedure));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[208] ,eObjTypeUser));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[209] ,eObjTypeRole));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[210] ,eObjTypeUDT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[211] ,eObjTypePackage));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[212] ,xilREADCOMMITTED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[213] ,xilREPEATABLEREAD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[214] ,xilDIRTYREAD));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[215] ,xilCUSTOM));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[216] ,paramUNKNOWN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[217] ,paramIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[218] ,paramOUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[219] ,paramINOUT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[220] ,paramRET));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[221] ,traceQPREPARE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[222] ,traceQEXECUTE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[223] ,traceERROR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[224] ,traceSTMT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[225] ,traceCONNECT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[226] ,traceTRANSACT));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[227] ,traceBLOB));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[228] ,traceMISC));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[229] ,traceVENDOR));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[230] ,traceDATAIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[231] ,traceDATAOUT));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..14] of string = (
'FLDDesc25'
,'FLDDesc30'
,'ObjAttrDesc25'
,'ObjAttrDesc30'
,'ObjParentDesc25'
,'ObjParentDesc30'
,'ObjTypeDesc25'
,'ObjTypeDesc30'
,'SQLFLDDesc25'
,'SQLFLDDesc30'
,'SQLObjAttrDesc25'
,'SQLObjAttrDesc30'
,'SQLObjTypeDesc25'
,'SQLObjTypeDesc30'
,'TTransactionDesc'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_FLDDesc25_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_FLDDesc30_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_ObjAttrDesc25_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[3],Addr(_ObjAttrDesc30_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[4],Addr(_ObjParentDesc25_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[5],Addr(_ObjParentDesc30_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[6],Addr(_ObjTypeDesc25_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[7],Addr(_ObjTypeDesc30_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[8],Addr(_SQLFLDDesc25_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[9],Addr(_SQLFLDDesc30_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[10],Addr(_SQLObjAttrDesc25_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[11],Addr(_SQLObjAttrDesc30_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[12],Addr(_SQLObjTypeDesc25_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[13],Addr(_SQLObjTypeDesc30_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[14],Addr(_TTransactionDesc_)));
end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
