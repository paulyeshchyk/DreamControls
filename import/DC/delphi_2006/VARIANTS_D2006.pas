{*******************************************************}
{                                                       }
{ Import unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

Unit Variants_d2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Types,
  SysUtils,
  system.variants;
function ConvertTGUIDToVariant(var R : TGUID) : OleVariant;
function ConvertVariantToTGUID(const V : OleVariant) : TGUID;
function ConvertTStringRefToVariant(var R : TStringRef) : OleVariant;
function ConvertVariantToTStringRef(const V : OleVariant) : TStringRef;
function ConvertTVarDataToVariant(var R : TVarData) : OleVariant;
function ConvertVariantToTVarData(const V : OleVariant) : TVarData;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TStringRef__Wrapper = class(TDCRecordWrapper)
private
fR : TStringRef;
public
function GetRecordPtr : pointer; override;
published
procedure setWide(const val : WideString);
function getWide : WideString;
property Wide : WideString read getWide write setWide;
procedure setUnicode(const val : PUnicodeString);
function getUnicode : PUnicodeString;
//property Unicode : PUnicodeString read getUnicode write setUnicode;
end;
type __TGUID__Wrapper = class(TDCRecordWrapper)
private
fR : TGUID;
public
function GetRecordPtr : pointer; override;
published
procedure setD1(const val : LongWord);
function getD1 : LongWord;
property D1 : LongWord read getD1 write setD1;
procedure setD2(const val : Word);
function getD2 : Word;
property D2 : Word read getD2 write setD2;
procedure setD3(const val : Word);
function getD3 : Word;
property D3 : Word read getD3 write setD3;
end;
type __TVarData__Wrapper = class(TDCRecordWrapper)
private
fR : TVarData;
public
function GetRecordPtr : pointer; override;
published
procedure setVType(const val : TVarType);
function getVType : TVarType;
property VType : TVarType read getVType write setVType;
procedure setReserved1(const val : Word);
function getReserved1 : Word;
property Reserved1 : Word read getReserved1 write setReserved1;
procedure setReserved2(const val : Word);
function getReserved2 : Word;
property Reserved2 : Word read getReserved2 write setReserved2;
procedure setReserved3(const val : Word);
function getReserved3 : Word;
property Reserved3 : Word read getReserved3 write setReserved3;
procedure setVSmallInt(const val : SmallInt);
function getVSmallInt : SmallInt;
property VSmallInt : SmallInt read getVSmallInt write setVSmallInt;
procedure setVInteger(const val : Integer);
function getVInteger : Integer;
property VInteger : Integer read getVInteger write setVInteger;
procedure setVSingle(const val : Single);
function getVSingle : Single;
property VSingle : Single read getVSingle write setVSingle;
procedure setVDouble(const val : Double);
function getVDouble : Double;
property VDouble : Double read getVDouble write setVDouble;
procedure setVCurrency(const val : Currency);
function getVCurrency : Currency;
property VCurrency : Currency read getVCurrency write setVCurrency;
procedure setVBoolean(const val : WordBool);
function getVBoolean : WordBool;
property VBoolean : WordBool read getVBoolean write setVBoolean;
procedure setVShortInt(const val : Shortint);
function getVShortInt : Shortint;
property VShortInt : Shortint read getVShortInt write setVShortInt;
procedure setVByte(const val : Byte);
function getVByte : Byte;
property VByte : Byte read getVByte write setVByte;
procedure setVWord(const val : Word);
function getVWord : Word;
property VWord : Word read getVWord write setVWord;
procedure setVLongWord(const val : LongWord);
function getVLongWord : LongWord;
property VLongWord : LongWord read getVLongWord write setVLongWord;
end;
type __TCustomVariantType__ = class(TCustomVariantType);
type
_T0 = function (const V : Variant): TVarType of object;

_T1 = function (const V : Variant;
AVarType : TVarType): Variant of object;

_T2 = function (const V : Variant;
AVarType : TVarType): Boolean of object;

_T3 = function (const V : Variant): Boolean of object;

_T4 = _T3;

_T5 = procedure (const V : Variant) of object;

_T6 = _T3;

_T7 = _T3;

_T8 = _T3;

_T9 = _T3;

_T10 = _T3;

_T11 = _T3;

_T12 = _T3;

_T13 = function (const V : Variant): string of object;

_T14 = function (const V : Variant;
const ADefault : string): string of object;

_T15 = function (const V : Variant): WideString of object;

_T16 = function (const V : Variant;
const ADefault : WideString): WideString of object;

_T17 = function (const V : Variant): TDateTime of object;

_T18 = function (const DateTime : TDateTime): Variant of object;

_T19 = function (const AValue : Variant;
const AMin : Variant;
const AMax : Variant): Boolean of object;

_T20 = function (const AValue : Variant;
const AMin : Variant;
const AMax : Variant): Variant of object;

_T21 = function (const A : Variant;
const B : Variant): Boolean of object;

_T22 = function (const A : Variant;
const B : Variant): TVariantRelationship of object;

_T23 = _T3;

_T24 = function (const V : Variant;
var AResult : HRESULT): Boolean of object;

_T25 = function (AResult : HRESULT): Variant of object;

_T26 = function (const V : Variant;
const IID : IDispatch;
var Intf): Boolean of object;

_T27 = procedure (var Dest : Variant;
const Source : Variant) of object;

_T28 = function (const A : Variant): Boolean of object;

_T29 = function (const Bounds : Array of Integer;
AVarType : TVarType): Variant of object;

_T30 = function (const Values : Array of Variant): Variant of object;

_T31 = function (const A : Variant): Variant of object;

_T32 = function (const AVarType : TVarType): Boolean of object;

_T33 = _T32;

_T34 = function (const A : Variant): Integer of object;

_T35 = function (const A : Variant;
Dim : Integer): Integer of object;

_T36 = _T35;

_T37 = function (const A : Variant): Pointer of object;

_T38 = procedure (const A : Variant) of object;

{_T39 = function (const A : Variant): PVarArray of object;}

_T40 = function (const A : Variant;
const Indices : Array of Integer): Variant of object;

_T41 = procedure (var A : Variant;
const Value : Variant;
const Indices : Array of Integer) of object;

_T42 = procedure (var V : Variant;
const DynArray : Pointer;
TypeInfo : Pointer) of object;

_T43 = procedure (var DynArray : Pointer;
const V : Variant;
TypeInfo : Pointer) of object;

_T44 = function : Variant of object;

_T45 = _T44;

_T46 = function : OleVariant of object;

_T47 = function (const AVarType : TVarType;
var CustomVariantType : TCustomVariantType): Boolean of object;

_T48 = procedure  of object;

_T49 = _T48;

_T50 = _T48;

_T51 = procedure (const ASourceType : TVarType;
const ADestType : TVarType) of object;

_T52 = _T51;

_T53 = _T48;

_T54 = procedure (AResult : HRESULT) of object;

_T55 = _T51;

_T56 = function (const AType : TVarType): string of object;

{_T57 = function (const V : Variant): PVarData of object;}

_T58 = procedure (const V : IDispatch) of object;

_T59 = procedure (const Dest : IDispatch;
const Source : IDispatch) of object;

_T60 = _T59;

_T61 = procedure (const Dest : IDispatch;
const Source : IDispatch;
AVarType : Integer) of object;

_T62 = _T61;

_T63 = _T58;

_T64 = function (const V : IDispatch): Integer of object;

_T66 = function (const V : IDispatch): UInt64 of object;

_T67 = function (const V : IDispatch): LongBool of object;

_T68 = function (const V : IDispatch): Extended of object;

_T69 = function (const V : IDispatch): Currency of object;

_T70 = procedure (var S;
const V : IDispatch) of object;

_T71 = procedure (var S : WideString;
const V : IDispatch) of object;

_T73 = procedure (var S : UnicodeString;
const V : IDispatch) of object;

_T76 = procedure (var DynArray : Pointer;
const V : IDispatch;
TypeInfo : Pointer) of object;

_T77 = procedure (const V : IDispatch;
const Value : Integer;
const Range : Shortint) of object;

_T79 = procedure (const V : IDispatch;
const Value : UInt64) of object;

_T80 = procedure (const V : IDispatch;
const Value : Boolean) of object;

_T81 = _T48;

_T82 = _T48;

_T83 = _T48;

_T84 = procedure (const V : IDispatch;
const Value : RawByteString) of object;

_T85 = procedure (const V : IDispatch;
const Value : ShortString) of object;

_T86 = procedure (const V : IDispatch;
const Value : WideString) of object;

_T87 = procedure (const V : IDispatch;
const Value : UnicodeString) of object;

_T88 = procedure (const V : IDispatch;
const Value : WideChar) of object;

_T91 = procedure (const V : IDispatch;
const DynArray : Pointer;
TypeInfo : Pointer) of object;

_T92 = _T84;

_T93 = _T85;

_T94 = _T87;

_T95 = _T59;

_T96 = _T77;

_T98 = _T79;

_T99 = procedure (const Left : IDispatch;
const Right : IDispatch) of object;

_T100 = _T99;

_T101 = _T99;

_T102 = _T99;

_T103 = _T99;

_T104 = _T99;

_T105 = _T99;

_T106 = _T99;

_T107 = _T99;

_T108 = _T99;

_T109 = _T99;

_T110 = function (const Left : IDispatch;
const Right : IDispatch): Boolean of object;

_T111 = _T110;

_T112 = _T110;

_T113 = _T110;

_T114 = _T110;

_T115 = _T110;

_T116 = procedure (const Dest : IDispatch) of object;

_T117 = _T116;

_T119 = _T58;

_T120 = procedure (const A : IDispatch;
HighBound : Integer) of object;

_T123 = function (U : PUnicodeString): PWideString of object;

{_T124 = function (CallDesc : PCallDesc;
Params : Pointer;
var Strings : TStringRefList;
OrderLTR : Boolean): TVarDataArray of object;}

{_T125 = procedure (CallDesc : PCallDesc;
const Args : TVarDataArray;
OrderLTR : Boolean) of object;}

_T126 = function (const IID : IDispatch;
var Obj): HRESULT of object;

_T127 = function (const V : IDispatch;
const Operator : TVarOp;
var RequiredVarType : TVarType): Boolean of object;

_T128 = _T127;

_T129 = function (const V : IDispatch;
var RequiredVarType : TVarType): Boolean of object;

_T131 = _T48;

_T132 = function (const V : IDispatch): Boolean of object;

_T133 = _T59;

_T134 = procedure (const Dest : IDispatch;
const Source : IDispatch;
const AVarType : TVarType) of object;

_T135 = _T59;

_T136 = _T58;

_T137 = procedure (const Dest : IDispatch;
const Source : IDispatch;
const Indirect : Boolean) of object;

_T138 = procedure (const Left : IDispatch;
const Right : IDispatch;
const Operator : TVarOp) of object;

_T139 = procedure (const Right : IDispatch;
const Operator : TVarOp) of object;

_T140 = function (const Left : IDispatch;
const Right : IDispatch;
const Operator : TVarOp): Boolean of object;

_T141 = procedure (const Left : IDispatch;
const Right : IDispatch;
var Relationship : TVarCompareResult) of object;

_T142 = function (const AText : string): string of object;

_T143 = function (const Dest : IDispatch;
const V : IDispatch;
const Name : string;
const Arguments : TVarDataArray): Boolean of object;

_T144 = function (const V : IDispatch;
const Name : string;
const Arguments : TVarDataArray): Boolean of object;

_T145 = function (const Dest : IDispatch;
const V : IDispatch;
const Name : string): Boolean of object;

_T146 = function (const V : IDispatch;
const Name : string;
const Value : IDispatch): Boolean of object;

function __TStringRef__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TStringRef__Wrapper.setWide(const val : WideString);
begin
TStringRef(GetRecordPtr^).Wide := val;
end;
function __TStringRef__Wrapper.getWide : WideString;
begin
result := TStringRef(GetRecordPtr^).Wide;
end;
procedure __TStringRef__Wrapper.setUnicode(const val : PUnicodeString);
begin
TStringRef(GetRecordPtr^).Unicode := val;
end;
function __TStringRef__Wrapper.getUnicode : PUnicodeString;
begin
result := TStringRef(GetRecordPtr^).Unicode;
end;
function _TStringRef_ : IDispatch;
begin
  result := __TStringRef__Wrapper.Create;
end;
function __TGUID__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TGUID__Wrapper.setD1(const val : LongWord);
begin
TGUID(GetRecordPtr^).D1 := val;
end;
function __TGUID__Wrapper.getD1 : LongWord;
begin
result := TGUID(GetRecordPtr^).D1;
end;
procedure __TGUID__Wrapper.setD2(const val : Word);
begin
TGUID(GetRecordPtr^).D2 := val;
end;
function __TGUID__Wrapper.getD2 : Word;
begin
result := TGUID(GetRecordPtr^).D2;
end;
procedure __TGUID__Wrapper.setD3(const val : Word);
begin
TGUID(GetRecordPtr^).D3 := val;
end;
function __TGUID__Wrapper.getD3 : Word;
begin
result := TGUID(GetRecordPtr^).D3;
end;
function __TVarData__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TVarData__Wrapper.setVType(const val : TVarType);
begin
TVarData(GetRecordPtr^).VType := val;
end;
function __TVarData__Wrapper.getVType : TVarType;
begin
result := TVarData(GetRecordPtr^).VType;
end;
procedure __TVarData__Wrapper.setReserved1(const val : Word);
begin
TVarData(GetRecordPtr^).Reserved1 := val;
end;
function __TVarData__Wrapper.getReserved1 : Word;
begin
result := TVarData(GetRecordPtr^).Reserved1;
end;
procedure __TVarData__Wrapper.setReserved2(const val : Word);
begin
TVarData(GetRecordPtr^).Reserved2 := val;
end;
function __TVarData__Wrapper.getReserved2 : Word;
begin
result := TVarData(GetRecordPtr^).Reserved2;
end;
procedure __TVarData__Wrapper.setReserved3(const val : Word);
begin
TVarData(GetRecordPtr^).Reserved3 := val;
end;
function __TVarData__Wrapper.getReserved3 : Word;
begin
result := TVarData(GetRecordPtr^).Reserved3;
end;
procedure __TVarData__Wrapper.setVSmallInt(const val : SmallInt);
begin
TVarData(GetRecordPtr^).VSmallInt := val;
end;
function __TVarData__Wrapper.getVSmallInt : SmallInt;
begin
result := TVarData(GetRecordPtr^).VSmallInt;
end;
procedure __TVarData__Wrapper.setVInteger(const val : Integer);
begin
TVarData(GetRecordPtr^).VInteger := val;
end;
function __TVarData__Wrapper.getVInteger : Integer;
begin
result := TVarData(GetRecordPtr^).VInteger;
end;
procedure __TVarData__Wrapper.setVSingle(const val : Single);
begin
TVarData(GetRecordPtr^).VSingle := val;
end;
function __TVarData__Wrapper.getVSingle : Single;
begin
result := TVarData(GetRecordPtr^).VSingle;
end;
procedure __TVarData__Wrapper.setVDouble(const val : Double);
begin
TVarData(GetRecordPtr^).VDouble := val;
end;
function __TVarData__Wrapper.getVDouble : Double;
begin
result := TVarData(GetRecordPtr^).VDouble;
end;
procedure __TVarData__Wrapper.setVCurrency(const val : Currency);
begin
TVarData(GetRecordPtr^).VCurrency := val;
end;
function __TVarData__Wrapper.getVCurrency : Currency;
begin
result := TVarData(GetRecordPtr^).VCurrency;
end;
procedure __TVarData__Wrapper.setVBoolean(const val : WordBool);
begin
TVarData(GetRecordPtr^).VBoolean := val;
end;
function __TVarData__Wrapper.getVBoolean : WordBool;
begin
result := TVarData(GetRecordPtr^).VBoolean;
end;
procedure __TVarData__Wrapper.setVShortInt(const val : Shortint);
begin
TVarData(GetRecordPtr^).VShortInt := val;
end;
function __TVarData__Wrapper.getVShortInt : Shortint;
begin
result := TVarData(GetRecordPtr^).VShortInt;
end;
procedure __TVarData__Wrapper.setVByte(const val : Byte);
begin
TVarData(GetRecordPtr^).VByte := val;
end;
function __TVarData__Wrapper.getVByte : Byte;
begin
result := TVarData(GetRecordPtr^).VByte;
end;
procedure __TVarData__Wrapper.setVWord(const val : Word);
begin
TVarData(GetRecordPtr^).VWord := val;
end;
function __TVarData__Wrapper.getVWord : Word;
begin
result := TVarData(GetRecordPtr^).VWord;
end;
procedure __TVarData__Wrapper.setVLongWord(const val : LongWord);
begin
TVarData(GetRecordPtr^).VLongWord := val;
end;
function __TVarData__Wrapper.getVLongWord : LongWord;
begin
result := TVarData(GetRecordPtr^).VLongWord;
end;
function ____VarSupports__Wrapper(const p0 : Variant;
const p1 : IDispatch;
var p2): Boolean;
var
__p1 : ^TGUID;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := VarSupports(p0,__p1^,p2);
end;


function __TCustomVariantType__QueryInterface__Wrapper(__Instance : TCustomVariantType;
const p0 : IDispatch;
var p1): HRESULT;
var
__p0 : ^TGUID;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := __TCustomVariantType__(__Instance).QueryInterface(__p0^,p1);
end;

function __TCustomVariantType__LeftPromotion__Wrapper(__Instance : TCustomVariantType;
const p0 : IDispatch;
const p1 : TVarOp;
var p2 : TVarType): Boolean;
var
__p0 : ^TVarData;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := __TCustomVariantType__(__Instance).LeftPromotion(__p0^,p1,p2);
end;

function __TCustomVariantType__RightPromotion__Wrapper(__Instance : TCustomVariantType;
const p0 : IDispatch;
const p1 : TVarOp;
var p2 : TVarType): Boolean;
var
__p0 : ^TVarData;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := __TCustomVariantType__(__Instance).RightPromotion(__p0^,p1,p2);
end;

function __TCustomVariantType__OlePromotion__Wrapper(__Instance : TCustomVariantType;
const p0 : IDispatch;
var p1 : TVarType): Boolean;
var
__p0 : ^TVarData;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := __TCustomVariantType__(__Instance).OlePromotion(__p0^,p1);
end;

function __TCustomVariantType__IsClear__Wrapper(__Instance : TCustomVariantType;
const p0 : IDispatch): Boolean;
var
__p0 : ^TVarData;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := TCustomVariantType(__Instance).IsClear(__p0^);
end;

procedure __TCustomVariantType__Cast__Wrapper(__Instance : TCustomVariantType;
const p0 : IDispatch;
const p1 : IDispatch);
var
__p0 : ^TVarData;
__i0 : IDispatch;
__p1 : ^TVarData;
__i1 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
TCustomVariantType(__Instance).Cast(__p0^,__p1^);
end;

procedure __TCustomVariantType__CastTo__Wrapper(__Instance : TCustomVariantType;
const p0 : IDispatch;
const p1 : IDispatch;
const p2 : TVarType);
var
__p0 : ^TVarData;
__i0 : IDispatch;
__p1 : ^TVarData;
__i1 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
TCustomVariantType(__Instance).CastTo(__p0^,__p1^,p2);
end;

procedure __TCustomVariantType__CastToOle__Wrapper(__Instance : TCustomVariantType;
const p0 : IDispatch;
const p1 : IDispatch);
var
__p0 : ^TVarData;
__i0 : IDispatch;
__p1 : ^TVarData;
__i1 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
TCustomVariantType(__Instance).CastToOle(__p0^,__p1^);
end;

procedure __TCustomVariantType__Clear__Wrapper(__Instance : TCustomVariantType;
const p0 : IDispatch);
var
__p0 : ^TVarData;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
TCustomVariantType(__Instance).Clear(__p0^);
end;

procedure __TCustomVariantType__Copy__Wrapper(__Instance : TCustomVariantType;
const p0 : IDispatch;
const p1 : IDispatch;
const p2 : Boolean);
var
__p0 : ^TVarData;
__i0 : IDispatch;
__p1 : ^TVarData;
__i1 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
TCustomVariantType(__Instance).Copy(__p0^,__p1^,p2);
end;

procedure __TCustomVariantType__BinaryOp__Wrapper(__Instance : TCustomVariantType;
const p0 : IDispatch;
const p1 : IDispatch;
const p2 : TVarOp);
var
__p0 : ^TVarData;
__i0 : IDispatch;
__p1 : ^TVarData;
__i1 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
TCustomVariantType(__Instance).BinaryOp(__p0^,__p1^,p2);
end;

procedure __TCustomVariantType__UnaryOp__Wrapper(__Instance : TCustomVariantType;
const p0 : IDispatch;
const p1 : TVarOp);
var
__p0 : ^TVarData;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
TCustomVariantType(__Instance).UnaryOp(__p0^,p1);
end;

function __TCustomVariantType__CompareOp__Wrapper(__Instance : TCustomVariantType;
const p0 : IDispatch;
const p1 : IDispatch;
const p2 : TVarOp): Boolean;
var
__p0 : ^TVarData;
__i0 : IDispatch;
__p1 : ^TVarData;
__i1 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := TCustomVariantType(__Instance).CompareOp(__p0^,__p1^,p2);
end;

procedure __TCustomVariantType__Compare__Wrapper(__Instance : TCustomVariantType;
const p0 : IDispatch;
const p1 : IDispatch;
var p2 : TVarCompareResult);
var
__p0 : ^TVarData;
__i0 : IDispatch;
__p1 : ^TVarData;
__i1 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
TCustomVariantType(__Instance).Compare(__p0^,__p1^,p2);
end;

function __TInvokeableVariantType__DoFunction__Wrapper(__Instance : TInvokeableVariantType;
const p0 : IDispatch;
const p1 : IDispatch;
const p2 : string;
const p3 : TVarDataArray): Boolean;
var
__p0 : ^TVarData;
__i0 : IDispatch;
__p1 : ^TVarData;
__i1 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := TInvokeableVariantType(__Instance).DoFunction(__p0^,__p1^,p2,p3);
end;

function __TInvokeableVariantType__DoProcedure__Wrapper(__Instance : TInvokeableVariantType;
const p0 : IDispatch;
const p1 : string;
const p2 : TVarDataArray): Boolean;
var
__p0 : ^TVarData;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := TInvokeableVariantType(__Instance).DoProcedure(__p0^,p1,p2);
end;

function __TInvokeableVariantType__GetProperty__Wrapper(__Instance : TInvokeableVariantType;
const p0 : IDispatch;
const p1 : IDispatch;
const p2 : string): Boolean;
var
__p0 : ^TVarData;
__i0 : IDispatch;
__p1 : ^TVarData;
__i1 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := TInvokeableVariantType(__Instance).GetProperty(__p0^,__p1^,p2);
end;

function __TInvokeableVariantType__SetProperty__Wrapper(__Instance : TInvokeableVariantType;
const p0 : IDispatch;
const p1 : string;
const p2 : IDispatch): Boolean;
var
__p0 : ^TVarData;
__i0 : IDispatch;
__p2 : ^TVarData;
__i2 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := TInvokeableVariantType(__Instance).SetProperty(__p0^,p1,__p2^);
end;


type __TGUID__Wrapper__ = class(__TGUID__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TGUID__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTGUIDToVariant(var R : TGUID) : OleVariant;
var
__rw : __TGUID__Wrapper__;
begin
__rw := __TGUID__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTGUID(const V : OleVariant) : TGUID;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TGUID((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TStringRef__Wrapper__ = class(__TStringRef__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TStringRef__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTStringRefToVariant(var R : TStringRef) : OleVariant;
var
__rw : __TStringRef__Wrapper__;
begin
__rw := __TStringRef__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTStringRef(const V : OleVariant) : TStringRef;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TStringRef((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TVarData__Wrapper__ = class(__TVarData__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TVarData__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTVarDataToVariant(var R : TVarData) : OleVariant;
var
__rw : __TVarData__Wrapper__;
begin
__rw := __TVarData__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTVarData(const V : OleVariant) : TVarData;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TVarData((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTCustomVariantType__VarType(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomVariantType(Instance).VarType;
end;

procedure __RegisterProps;
begin
RegisterProperty(TCustomVariantType,'VarType',__DC__GetTCustomVariantType__VarType,nil);
end;

function __DC__GetVariants__NullEqualityRule(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := system.Variants.NullEqualityRule;
end;

procedure __DC__SetVariants__NullEqualityRule(Instance : TObject; Params : PVariantArgList);
begin
system.Variants.NullEqualityRule:=OleVariant(Params^[0]);
end;

function __DC__GetVariants__NullMagnitudeRule(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := system.Variants.NullMagnitudeRule;
end;

procedure __DC__SetVariants__NullMagnitudeRule(Instance : TObject; Params : PVariantArgList);
begin
system.Variants.NullMagnitudeRule:=OleVariant(Params^[0]);
end;

function __DC__GetVariants__NullStrictConvert(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := system.Variants.NullStrictConvert;
end;

procedure __DC__SetVariants__NullStrictConvert(Instance : TObject; Params : PVariantArgList);
begin
system.Variants.NullStrictConvert:=OleVariant(Params^[0]);
end;

function __DC__GetVariants__NullAsStringValue(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := system.Variants.NullAsStringValue;
end;

procedure __DC__SetVariants__NullAsStringValue(Instance : TObject; Params : PVariantArgList);
begin
system.Variants.NullAsStringValue:=OleVariant(Params^[0]);
end;

function __DC__GetVariants__PackVarCreation(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := system.Variants.PackVarCreation;
end;

procedure __DC__SetVariants__PackVarCreation(Instance : TObject; Params : PVariantArgList);
begin
system.Variants.PackVarCreation:=OleVariant(Params^[0]);
end;

function __DC__GetVariants__BooleanToStringRule(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := system.Variants.BooleanToStringRule;
end;

procedure __DC__SetVariants__BooleanToStringRule(Instance : TObject; Params : PVariantArgList);
begin
system.Variants.BooleanToStringRule:=OleVariant(Params^[0]);
end;

function __DC__GetVariants__OleVariantInt64AsDouble(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := system.Variants.OleVariantInt64AsDouble;
end;

procedure __DC__SetVariants__OleVariantInt64AsDouble(Instance : TObject; Params : PVariantArgList);
begin
system.Variants.OleVariantInt64AsDouble:=OleVariant(Params^[0]);
end;

function __DC__GetVariants__DispatchUnsignedAsSigned(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := system.Variants.DispatchUnsignedAsSigned;
end;

procedure __DC__SetVariants__DispatchUnsignedAsSigned(Instance : TObject; Params : PVariantArgList);
begin
system.Variants.DispatchUnsignedAsSigned:=OleVariant(Params^[0]);
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('NullEqualityRule',__DC__GetVariants__NullEqualityRule,__DC__SetVariants__NullEqualityRule));
__RegisteredVars.Add(RegisterVar('NullMagnitudeRule',__DC__GetVariants__NullMagnitudeRule,__DC__SetVariants__NullMagnitudeRule));
__RegisteredVars.Add(RegisterVar('NullStrictConvert',__DC__GetVariants__NullStrictConvert,__DC__SetVariants__NullStrictConvert));
__RegisteredVars.Add(RegisterVar('NullAsStringValue',__DC__GetVariants__NullAsStringValue,__DC__SetVariants__NullAsStringValue));
__RegisteredVars.Add(RegisterVar('PackVarCreation',__DC__GetVariants__PackVarCreation,__DC__SetVariants__PackVarCreation));
__RegisteredVars.Add(RegisterVar('BooleanToStringRule',__DC__GetVariants__BooleanToStringRule,__DC__SetVariants__BooleanToStringRule));
__RegisteredVars.Add(RegisterVar('OleVariantInt64AsDouble',__DC__GetVariants__OleVariantInt64AsDouble,__DC__SetVariants__OleVariantInt64AsDouble));
__RegisteredVars.Add(RegisterVar('DispatchUnsignedAsSigned',__DC__GetVariants__DispatchUnsignedAsSigned,__DC__SetVariants__DispatchUnsignedAsSigned));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

const __ConstNames0 : array[0..13] of string = (
'vrEqual'
,'vrLessThan'
,'vrGreaterThan'
,'vrNotEqual'
,'crLessThan'
,'crEqual'
,'crGreaterThan'
,'ncrError'
,'ncrStrict'
,'ncrLoose'
,'bsrAsIs'
,'bsrLower'
,'bsrUpper'
,'MaxDispArgs'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,vrEqual));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,vrLessThan));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,vrGreaterThan));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,vrNotEqual));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,crLessThan));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,crEqual));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,crGreaterThan));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,ncrError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,ncrStrict));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,ncrLoose));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,bsrAsIs));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,bsrLower));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,bsrUpper));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,MaxDispArgs));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..16] of TClass = (
EVariantArrayCreateError,
EVariantArrayLockedError,
EVariantBadIndexError,
EVariantBadVarTypeError,
EVariantDispatchError,
EVariantInvalidArgError,
EVariantInvalidNullOpError,
EVariantInvalidOpError,
EVariantNotAnArrayError,
EVariantNotImplError,
EVariantOutOfMemoryError,
EVariantOverflowError,
EVariantRangeCheckError,
EVariantTypeCastError,
EVariantUnexpectedError,
TCustomVariantType,
TInvokeableVariantType
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..111] of string = (
'TStringRef'
,'VarType'
,'VarAsType'
,'VarIsType'
,'VarIsByRef'
,'VarIsEmpty'
,'VarCheckEmpty'
,'VarIsNull'
,'VarIsClear'
,'VarIsCustom'
,'VarIsOrdinal'
,'VarIsFloat'
,'VarIsNumeric'
,'VarIsStr'
,'VarToStr'
,'VarToStrDef'
,'VarToWideStr'
,'VarToWideStrDef'
,'VarToDateTime'
,'VarFromDateTime'
,'VarInRange'
,'VarEnsureRange'
,'VarSameValue'
,'VarCompareValue'
,'VarIsEmptyParam'
,'VarIsError'
,'VarAsError'
,'VarSupports'
,'VarCopyNoInd'
,'VarIsArray'
,'VarArrayCreate'
,'VarArrayOf'
,'VarArrayRef'
,'VarTypeIsValidArrayType'
,'VarTypeIsValidElementType'
,'VarArrayDimCount'
,'VarArrayLowBound'
,'VarArrayHighBound'
,'VarArrayLock'
,'VarArrayUnlock'
,'VarArrayGet'
,'VarArrayPut'
,'DynArrayToVariant'
,'DynArrayFromVariant'
,'Unassigned'
,'Null'
,'EmptyParam'
,'FindCustomVariantType'
,'VarCastError'
,'VarInvalidOp'
,'VarInvalidNullOp'
,'VarOverflowError'
,'VarRangeCheckError'
,'VarArrayCreateError'
,'VarResultCheck'
,'HandleConversionException'
,'VarTypeAsText'
,'_VarClear'
,'_VarCopy'
,'_VarCopyNoInd'
,'_VarCast'
,'_VarCastOle'
,'_VarClr'
,'_VarToInteger'
,'_VarToUInt64'
,'_VarToBool'
,'_VarToReal'
,'_VarToCurrency'
,'_VarToPStr'
,'_VarToWStr'
,'_VarToUStr'
,'_VarToDynArray'
,'_VarFromInt'
,'_VarFromUInt64'
,'_VarFromBool'
,'_VarFromReal'
,'_VarFromTDateTime'
,'_VarFromCurr'
,'_VarFromLStr'
,'_VarFromPStr'
,'_VarFromWStr'
,'_VarFromUStr'
,'_VarFromWChar'
,'_VarFromDynArray'
,'_OleVarFromLStr'
,'_OleVarFromPStr'
,'_OleVarFromUStr'
,'_OleVarFromVar'
,'_OleVarFromInt'
,'_OleVarFromUInt64'
,'_VarAdd'
,'_VarSub'
,'_VarMul'
,'_VarDiv'
,'_VarMod'
,'_VarAnd'
,'_VarOr'
,'_VarXor'
,'_VarShl'
,'_VarShr'
,'_VarRDiv'
,'_VarCmpEQ'
,'_VarCmpNE'
,'_VarCmpLT'
,'_VarCmpLE'
,'_VarCmpGT'
,'_VarCmpGE'
,'_VarNeg'
,'_VarNot'
,'_VarAddRef'
,'_VarArrayRedim'
,'FromUnicode'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TStringRef_)));
RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T0),[
TypeInfo(Variant),TypeInfo(TVarType)],Addr(VarType),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T1),[
TypeInfo(Variant),
TypeInfo(TVarType),TypeInfo(Variant)],Addr(VarAsType),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T2),[
TypeInfo(Variant),
TypeInfo(TVarType),TypeInfo(Boolean)],Addr(VarIsType),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T3),[
TypeInfo(Variant),TypeInfo(Boolean)],Addr(VarIsByRef),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T4),[
TypeInfo(Variant),TypeInfo(Boolean)],Addr(VarIsEmpty),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T5),[
TypeInfo(Variant)],Addr(VarCheckEmpty),cRegister);

RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T6),[
TypeInfo(Variant),TypeInfo(Boolean)],Addr(VarIsNull),cRegister);

RegisterProc(nil,MethodNames[8],mtProc,TypeInfo(_T7),[
TypeInfo(Variant),TypeInfo(Boolean)],Addr(VarIsClear),cRegister);

RegisterProc(nil,MethodNames[9],mtProc,TypeInfo(_T8),[
TypeInfo(Variant),TypeInfo(Boolean)],Addr(VarIsCustom),cRegister);

RegisterProc(nil,MethodNames[10],mtProc,TypeInfo(_T9),[
TypeInfo(Variant),TypeInfo(Boolean)],Addr(VarIsOrdinal),cRegister);

RegisterProc(nil,MethodNames[11],mtProc,TypeInfo(_T10),[
TypeInfo(Variant),TypeInfo(Boolean)],Addr(VarIsFloat),cRegister);

RegisterProc(nil,MethodNames[12],mtProc,TypeInfo(_T11),[
TypeInfo(Variant),TypeInfo(Boolean)],Addr(VarIsNumeric),cRegister);

RegisterProc(nil,MethodNames[13],mtProc,TypeInfo(_T12),[
TypeInfo(Variant),TypeInfo(Boolean)],Addr(VarIsStr),cRegister);

RegisterProc(nil,MethodNames[14],mtProc,TypeInfo(_T13),[
TypeInfo(Variant),TypeInfo(string)],Addr(VarToStr),cRegister);

RegisterProc(nil,MethodNames[15],mtProc,TypeInfo(_T14),[
TypeInfo(Variant),
TypeInfo(string),TypeInfo(string)],Addr(VarToStrDef),cRegister);

RegisterProc(nil,MethodNames[16],mtProc,TypeInfo(_T15),[
TypeInfo(Variant),TypeInfo(WideString)],Addr(VarToWideStr),cRegister);

RegisterProc(nil,MethodNames[17],mtProc,TypeInfo(_T16),[
TypeInfo(Variant),
TypeInfo(WideString),TypeInfo(WideString)],Addr(VarToWideStrDef),cRegister);

RegisterProc(nil,MethodNames[18],mtProc,TypeInfo(_T17),[
TypeInfo(Variant),TypeInfo(TDateTime)],Addr(VarToDateTime),cRegister);

RegisterProc(nil,MethodNames[19],mtProc,TypeInfo(_T18),[
TypeInfo(TDateTime),TypeInfo(Variant)],Addr(VarFromDateTime),cRegister);

RegisterProc(nil,MethodNames[20],mtProc,TypeInfo(_T19),[
TypeInfo(Variant),
TypeInfo(Variant),
TypeInfo(Variant),TypeInfo(Boolean)],Addr(VarInRange),cRegister);

RegisterProc(nil,MethodNames[21],mtProc,TypeInfo(_T20),[
TypeInfo(Variant),
TypeInfo(Variant),
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarEnsureRange),cRegister);

RegisterProc(nil,MethodNames[22],mtProc,TypeInfo(_T21),[
TypeInfo(Variant),
TypeInfo(Variant),TypeInfo(Boolean)],Addr(VarSameValue),cRegister);

RegisterProc(nil,MethodNames[23],mtProc,TypeInfo(_T22),[
TypeInfo(Variant),
TypeInfo(Variant),TypeInfo(TVariantRelationship)],Addr(VarCompareValue),cRegister);

RegisterProc(nil,MethodNames[24],mtProc,TypeInfo(_T23),[
TypeInfo(Variant),TypeInfo(Boolean)],Addr(VarIsEmptyParam),cRegister);

RegisterProc(nil,MethodNames[25],mtProc,TypeInfo(_T24),[
TypeInfo(Variant),
TypeInfo(HRESULT),TypeInfo(Boolean)],Addr(VarIsError),cRegister);

RegisterProc(nil,MethodNames[26],mtProc,TypeInfo(_T25),[
TypeInfo(HRESULT),TypeInfo(Variant)],Addr(VarAsError),cRegister);

RegisterProc(nil,MethodNames[27],mtProc,TypeInfo(_T26),[
TypeInfo(Variant),
TypeInfo(IDispatch),
TypeInfoUntyped,TypeInfo(Boolean)],Addr(____VarSupports__Wrapper),cRegister);

RegisterProc(nil,MethodNames[28],mtProc,TypeInfo(_T27),[
TypeInfo(Variant),
TypeInfo(Variant)],Addr(VarCopyNoInd),cRegister);

RegisterProc(nil,MethodNames[29],mtProc,TypeInfo(_T28),[
TypeInfo(Variant),TypeInfo(Boolean)],Addr(VarIsArray),cRegister);

RegisterProc(nil,MethodNames[30],mtProc,TypeInfo(_T29),[
ArrayInfo(TypeInfo(Integer)),
TypeInfo(TVarType),TypeInfo(Variant)],Addr(VarArrayCreate),cRegister);

RegisterProc(nil,MethodNames[31],mtProc,TypeInfo(_T30),[
ArrayInfo(TypeInfo(Variant)),TypeInfo(Variant)],Addr(VarArrayOf),cRegister);

RegisterProc(nil,MethodNames[32],mtProc,TypeInfo(_T31),[
TypeInfo(Variant),TypeInfo(Variant)],Addr(VarArrayRef),cRegister);

RegisterProc(nil,MethodNames[33],mtProc,TypeInfo(_T32),[
TypeInfo(TVarType),TypeInfo(Boolean)],Addr(VarTypeIsValidArrayType),cRegister);

RegisterProc(nil,MethodNames[34],mtProc,TypeInfo(_T33),[
TypeInfo(TVarType),TypeInfo(Boolean)],Addr(VarTypeIsValidElementType),cRegister);

RegisterProc(nil,MethodNames[35],mtProc,TypeInfo(_T34),[
TypeInfo(Variant),TypeInfo(Integer)],Addr(VarArrayDimCount),cRegister);

RegisterProc(nil,MethodNames[36],mtProc,TypeInfo(_T35),[
TypeInfo(Variant),
TypeInfo(Integer),TypeInfo(Integer)],Addr(VarArrayLowBound),cRegister);

RegisterProc(nil,MethodNames[37],mtProc,TypeInfo(_T36),[
TypeInfo(Variant),
TypeInfo(Integer),TypeInfo(Integer)],Addr(VarArrayHighBound),cRegister);

RegisterProc(nil,MethodNames[38],mtProc,TypeInfo(_T37),[
TypeInfo(Variant),TypeInfoPointer],Addr(VarArrayLock),cRegister);

RegisterProc(nil,MethodNames[39],mtProc,TypeInfo(_T38),[
TypeInfo(Variant)],Addr(VarArrayUnlock),cRegister);

RegisterProc(nil,MethodNames[40],mtProc,TypeInfo(_T40),[
TypeInfo(Variant),
ArrayInfo(TypeInfo(Integer)),TypeInfo(Variant)],Addr(VarArrayGet),cRegister);

RegisterProc(nil,MethodNames[41],mtProc,TypeInfo(_T41),[
TypeInfo(Variant),
TypeInfo(Variant),
ArrayInfo(TypeInfo(Integer))],Addr(VarArrayPut),cRegister);

RegisterProc(nil,MethodNames[42],mtProc,TypeInfo(_T42),[
TypeInfo(Variant),
TypeInfoPointer,
TypeInfoPointer],Addr(DynArrayToVariant),cRegister);

RegisterProc(nil,MethodNames[43],mtProc,TypeInfo(_T43),[
TypeInfoPointer,
TypeInfo(Variant),
TypeInfoPointer],Addr(DynArrayFromVariant),cRegister);

RegisterProc(nil,MethodNames[44],mtProc,TypeInfo(_T44),[TypeInfo(Variant)],Addr(Unassigned),cRegister);

RegisterProc(nil,MethodNames[45],mtProc,TypeInfo(_T45),[TypeInfo(Variant)],Addr(Null),cRegister);

RegisterProc(nil,MethodNames[46],mtProc,TypeInfo(_T46),[TypeInfo(OleVariant)],Addr(EmptyParam),cRegister);

RegisterProc(nil,MethodNames[47],mtProc,TypeInfo(_T47),[
TypeInfo(TVarType),
TypeInfo(TCustomVariantType),TypeInfo(Boolean)],Addr(FindCustomVariantType),cRegister);

RegisterProc(nil,MethodNames[48],mtProc,TypeInfo(_T48),NoParams,Addr(VarCastError),cRegister);

RegisterProc(nil,MethodNames[49],mtProc,TypeInfo(_T49),NoParams,Addr(VarInvalidOp),cRegister);

RegisterProc(nil,MethodNames[50],mtProc,TypeInfo(_T50),NoParams,Addr(VarInvalidNullOp),cRegister);

RegisterProc(nil,MethodNames[51],mtProc,TypeInfo(_T51),[
TypeInfo(TVarType),
TypeInfo(TVarType)],Addr(VarOverflowError),cRegister);

RegisterProc(nil,MethodNames[52],mtProc,TypeInfo(_T52),[
TypeInfo(TVarType),
TypeInfo(TVarType)],Addr(VarRangeCheckError),cRegister);

RegisterProc(nil,MethodNames[53],mtProc,TypeInfo(_T53),NoParams,Addr(VarArrayCreateError),cRegister);

RegisterProc(nil,MethodNames[54],mtProc,TypeInfo(_T54),[
TypeInfo(HRESULT)],Addr(VarResultCheck),cRegister);

RegisterProc(nil,MethodNames[55],mtProc,TypeInfo(_T55),[
TypeInfo(TVarType),
TypeInfo(TVarType)],Addr(HandleConversionException),cRegister);

RegisterProc(nil,MethodNames[56],mtProc,TypeInfo(_T56),[
TypeInfo(TVarType),TypeInfo(string)],Addr(VarTypeAsText),cRegister);

//RegisterProc(nil,MethodNames[75],mtProc,TypeInfo(_T81),NoParams,Addr(_VarFromReal),cRegister);

//RegisterProc(nil,MethodNames[76],mtProc,TypeInfo(_T82),NoParams,Addr(_VarFromTDateTime),cRegister);

//RegisterProc(nil,MethodNames[77],mtProc,TypeInfo(_T83),NoParams,Addr(_VarFromCurr),cRegister);

//RegisterProc(TCustomVariantType,'QueryInterface',mtMethod,TypeInfo(_T126),[TypeInfo(IDispatch),TypeInfoUntyped,TypeInfo(HRESULT)], pointer(0),cRegister);
RegisterProc(TCustomVariantType,'QueryInterface',mtMethod,TypeInfo(_T126),[TypeInfo(IDispatch),TypeInfoUntyped,TypeInfo(HRESULT)],  getVMTProcAddr('TCustomVariantType','QueryInterface',0),cRegister);


//RegRegisterMethod(TCustomVariantType,'LeftPromotion',TypeInfo(_T127),[TypeInfo(IDispatch),TypeInfo(TVarOp),TypeInfo(TVarType),TypeInfo(Boolean)], pointer(4));
RegRegisterMethod(TCustomVariantType,'LeftPromotion',TypeInfo(_T127),[TypeInfo(IDispatch),TypeInfo(TVarOp),TypeInfo(TVarType),TypeInfo(Boolean)],  getVMTProcAddr('TCustomVariantType','LeftPromotion',4));


//RegRegisterMethod(TCustomVariantType,'RightPromotion',TypeInfo(_T128),[TypeInfo(IDispatch),TypeInfo(TVarOp),TypeInfo(TVarType),TypeInfo(Boolean)], pointer(8));
RegRegisterMethod(TCustomVariantType,'RightPromotion',TypeInfo(_T128),[TypeInfo(IDispatch),TypeInfo(TVarOp),TypeInfo(TVarType),TypeInfo(Boolean)],  getVMTProcAddr('TCustomVariantType','RightPromotion',8));


//RegRegisterMethod(TCustomVariantType,'OlePromotion',TypeInfo(_T129),[TypeInfo(IDispatch),TypeInfo(TVarType),TypeInfo(Boolean)], pointer(12));
RegRegisterMethod(TCustomVariantType,'OlePromotion',TypeInfo(_T129),[TypeInfo(IDispatch),TypeInfo(TVarType),TypeInfo(Boolean)],  getVMTProcAddr('TCustomVariantType','OlePromotion',12));


RegisterProc(TCustomVariantType,'Create',mtConstructor,TypeInfo(_T131),NoParams,Addr(TCustomVariantType.Create),cRegister);

//RegRegisterMethod(TCustomVariantType,'IsClear',TypeInfo(_T132),[TypeInfo(IDispatch),TypeInfo(Boolean)], pointer(20));
RegRegisterMethod(TCustomVariantType,'IsClear',TypeInfo(_T132),[TypeInfo(IDispatch),TypeInfo(Boolean)],  getVMTProcAddr('TCustomVariantType','IsClear',20));


//RegRegisterMethod(TCustomVariantType,'Cast',TypeInfo(_T133),[TypeInfo(IDispatch),TypeInfo(IDispatch)], pointer(24));
RegRegisterMethod(TCustomVariantType,'Cast',TypeInfo(_T133),[TypeInfo(IDispatch),TypeInfo(IDispatch)],  getVMTProcAddr('TCustomVariantType','Cast',24));


//RegRegisterMethod(TCustomVariantType,'CastTo',TypeInfo(_T134),[TypeInfo(IDispatch),TypeInfo(IDispatch),TypeInfo(TVarType)], pointer(28));
RegRegisterMethod(TCustomVariantType,'CastTo',TypeInfo(_T134),[TypeInfo(IDispatch),TypeInfo(IDispatch),TypeInfo(TVarType)],  getVMTProcAddr('TCustomVariantType','CastTo',28));


//RegRegisterMethod(TCustomVariantType,'CastToOle',TypeInfo(_T135),[TypeInfo(IDispatch),TypeInfo(IDispatch)], pointer(32));
RegRegisterMethod(TCustomVariantType,'CastToOle',TypeInfo(_T135),[TypeInfo(IDispatch),TypeInfo(IDispatch)],  getVMTProcAddr('TCustomVariantType','CastToOle',32));


//RegRegisterMethod(TCustomVariantType,'Clear',TypeInfo(_T136),[TypeInfo(IDispatch)], pointer(36));
RegRegisterMethod(TCustomVariantType,'Clear',TypeInfo(_T136),[TypeInfo(IDispatch)],  getVMTProcAddr('TCustomVariantType','Clear',36));


//RegRegisterMethod(TCustomVariantType,'Copy',TypeInfo(_T137),[TypeInfo(IDispatch),TypeInfo(IDispatch),TypeInfo(Boolean)], pointer(40));
RegRegisterMethod(TCustomVariantType,'Copy',TypeInfo(_T137),[TypeInfo(IDispatch),TypeInfo(IDispatch),TypeInfo(Boolean)],  getVMTProcAddr('TCustomVariantType','Copy',40));


//RegRegisterMethod(TCustomVariantType,'BinaryOp',TypeInfo(_T138),[TypeInfo(IDispatch),TypeInfo(IDispatch),TypeInfo(TVarOp)], pointer(44));
RegRegisterMethod(TCustomVariantType,'BinaryOp',TypeInfo(_T138),[TypeInfo(IDispatch),TypeInfo(IDispatch),TypeInfo(TVarOp)],  getVMTProcAddr('TCustomVariantType','BinaryOp',44));


//RegRegisterMethod(TCustomVariantType,'UnaryOp',TypeInfo(_T139),[TypeInfo(IDispatch),TypeInfo(TVarOp)], pointer(48));
RegRegisterMethod(TCustomVariantType,'UnaryOp',TypeInfo(_T139),[TypeInfo(IDispatch),TypeInfo(TVarOp)],  getVMTProcAddr('TCustomVariantType','UnaryOp',48));


//RegRegisterMethod(TCustomVariantType,'CompareOp',TypeInfo(_T140),[TypeInfo(IDispatch),TypeInfo(IDispatch),TypeInfo(TVarOp),TypeInfo(Boolean)], pointer(52));
RegRegisterMethod(TCustomVariantType,'CompareOp',TypeInfo(_T140),[TypeInfo(IDispatch),TypeInfo(IDispatch),TypeInfo(TVarOp),TypeInfo(Boolean)],  getVMTProcAddr('TCustomVariantType','CompareOp',52));


//RegRegisterMethod(TCustomVariantType,'Compare',TypeInfo(_T141),[TypeInfo(IDispatch),TypeInfo(IDispatch),TypeInfo(TVarCompareResult)], pointer(56));
RegRegisterMethod(TCustomVariantType,'Compare',TypeInfo(_T141),[TypeInfo(IDispatch),TypeInfo(IDispatch),TypeInfo(TVarCompareResult)],  getVMTProcAddr('TCustomVariantType','Compare',56));


//RegRegisterMethod(TInvokeableVariantType,'FixupIdent',TypeInfo(_T142),[TypeInfo(string),TypeInfo(string)], pointer(60));
RegRegisterMethod(TInvokeableVariantType,'FixupIdent',TypeInfo(_T142),[TypeInfo(string),TypeInfo(string)],  getVMTProcAddr('TInvokeableVariantType','FixupIdent',60));


//RegRegisterMethod(TInvokeableVariantType,'DoFunction',TypeInfo(_T143),[TypeInfo(IDispatch),TypeInfo(IDispatch),TypeInfo(string),DynArrayInfo(TypeInfo(TVarDataArray)),TypeInfo(Boolean)], pointer(64));
RegRegisterMethod(TInvokeableVariantType,'DoFunction',TypeInfo(_T143),[TypeInfo(IDispatch),TypeInfo(IDispatch),TypeInfo(string),DynArrayInfo(TypeInfo(TVarDataArray)),TypeInfo(Boolean)],  getVMTProcAddr('TInvokeableVariantType','DoFunction',64));


//RegRegisterMethod(TInvokeableVariantType,'DoProcedure',TypeInfo(_T144),[TypeInfo(IDispatch),TypeInfo(string),DynArrayInfo(TypeInfo(TVarDataArray)),TypeInfo(Boolean)], pointer(68));
RegRegisterMethod(TInvokeableVariantType,'DoProcedure',TypeInfo(_T144),[TypeInfo(IDispatch),TypeInfo(string),DynArrayInfo(TypeInfo(TVarDataArray)),TypeInfo(Boolean)],  getVMTProcAddr('TInvokeableVariantType','DoProcedure',68));


//RegRegisterMethod(TInvokeableVariantType,'GetProperty',TypeInfo(_T145),[TypeInfo(IDispatch),TypeInfo(IDispatch),TypeInfo(string),TypeInfo(Boolean)], pointer(72));
RegRegisterMethod(TInvokeableVariantType,'GetProperty',TypeInfo(_T145),[TypeInfo(IDispatch),TypeInfo(IDispatch),TypeInfo(string),TypeInfo(Boolean)],  getVMTProcAddr('TInvokeableVariantType','GetProperty',72));


//RegRegisterMethod(TInvokeableVariantType,'SetProperty',TypeInfo(_T146),[TypeInfo(IDispatch),TypeInfo(string),TypeInfo(IDispatch),TypeInfo(Boolean)], pointer(76));
RegRegisterMethod(TInvokeableVariantType,'SetProperty',TypeInfo(_T146),[TypeInfo(IDispatch),TypeInfo(string),TypeInfo(IDispatch),TypeInfo(Boolean)],  getVMTProcAddr('TInvokeableVariantType','SetProperty',76));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'VarArrayAsPSafeArray',mtProc,TypeInfo(_T39),[
TypeInfo(Variant),TypeInfoPointer],Addr(VarArrayAsPSafeArray),cRegister)}

{RegisterProc(nil,'FindVarData',mtProc,TypeInfo(_T57),[
TypeInfo(Variant),TypeInfoPointer],Addr(FindVarData),cRegister)}

{RegisterProc(nil,'GetDispatchInvokeArgs',mtProc,TypeInfo(_T124),[
TypeInfoPointer,
TypeInfoPointer,
TypeInfo(TStringRefList),
TypeInfo(Boolean),TypeInfo(TVarDataArray)],Addr(GetDispatchInvokeArgs),cRegister)}

{RegisterProc(nil,'FinalizeDispatchInvokeArgs',mtProc,TypeInfo(_T125),[
TypeInfoPointer,
DynArrayInfo(TypeInfo(TVarDataArray)),
TypeInfo(Boolean)],Addr(FinalizeDispatchInvokeArgs),cRegister)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
