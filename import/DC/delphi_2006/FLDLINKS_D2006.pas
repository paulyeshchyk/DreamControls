{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit FLDLINKS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Windows,
  Messages,
  Classes,
  Graphics,
  Controls,
  Forms,
  StdCtrls,
  ExtCtrls,
  DB,
  Buttons,
  FldLinks;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = function (p0 : TDataSet;
p1 : TFieldLinkProperty): Boolean of object;

_T1 = procedure (p0 : TStrings) of object;

_T2 = function : Boolean of object;

_T3 = function : TIndexDefs of object;

_T4 = function : string of object;

_T5 = _T4;

_T6 = _T4;

_T7 = procedure (const p0 : string) of object;

_T8 = _T7;

_T9 = _T7;

_T10 = procedure (p0 : TDataSet) of object;

_T11 = _T1;

_T12 = procedure (p0 : TObject) of object;

_T13 = _T12;

_T14 = _T12;

_T15 = _T12;

_T16 = _T12;

_T17 = _T12;

_T18 = _T12;

_T19 = _T12;

_T20 = _T12;

_T21 = _T12;

_T22 = _T2;

function __DC__GetTFieldLinkProperty__IndexBased(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFieldLinkProperty(Instance).IndexBased;
end;

function __DC__GetTFieldLinkProperty__IndexDefs(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TFieldLinkProperty(Instance).IndexDefs);
end;

function __DC__GetTFieldLinkProperty__IndexFieldNames(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFieldLinkProperty(Instance).IndexFieldNames;
end;

procedure __DC__SetTFieldLinkProperty__IndexFieldNames(Instance : TObject; Params : PVariantArgList);
begin
TFieldLinkProperty(Instance).IndexFieldNames:=OleVariant(Params^[0]);
end;

function __DC__GetTFieldLinkProperty__IndexName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFieldLinkProperty(Instance).IndexName;
end;

procedure __DC__SetTFieldLinkProperty__IndexName(Instance : TObject; Params : PVariantArgList);
begin
TFieldLinkProperty(Instance).IndexName:=OleVariant(Params^[0]);
end;

function __DC__GetTFieldLinkProperty__MasterFields(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFieldLinkProperty(Instance).MasterFields;
end;

procedure __DC__SetTFieldLinkProperty__MasterFields(Instance : TObject; Params : PVariantArgList);
begin
TFieldLinkProperty(Instance).MasterFields:=OleVariant(Params^[0]);
end;

function __DC__GetTFieldLinkProperty__Changed(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TFieldLinkProperty(Instance).Changed;
end;

function __DC__GetTFieldLinkProperty__DataSet(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TFieldLinkProperty(Instance).DataSet);
end;

function __DC__GetTLinkFields__DataSet(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TLinkFields(Instance).DataSet);
end;

procedure __DC__SetTLinkFields__DataSet(Instance : TObject; Params : PVariantArgList);
begin
TLinkFields(Instance).DataSet:=TDataSet(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTLinkFields__DataSetProxy(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TLinkFields(Instance).DataSetProxy);
end;

procedure __DC__SetTLinkFields__DataSetProxy(Instance : TObject; Params : PVariantArgList);
begin
TLinkFields(Instance).DataSetProxy:=TFieldLinkProperty(VarToObject(OleVariant(Params^[0])));
end;

procedure __RegisterProps;
begin
RegisterProperty(TFieldLinkProperty,'IndexBased',__DC__GetTFieldLinkProperty__IndexBased,nil);
RegisterProperty(TFieldLinkProperty,'IndexDefs',__DC__GetTFieldLinkProperty__IndexDefs,nil);
RegisterProperty(TFieldLinkProperty,'IndexFieldNames',__DC__GetTFieldLinkProperty__IndexFieldNames,__DC__SetTFieldLinkProperty__IndexFieldNames);
RegisterProperty(TFieldLinkProperty,'IndexName',__DC__GetTFieldLinkProperty__IndexName,__DC__SetTFieldLinkProperty__IndexName);
RegisterProperty(TFieldLinkProperty,'MasterFields',__DC__GetTFieldLinkProperty__MasterFields,__DC__SetTFieldLinkProperty__MasterFields);
RegisterProperty(TFieldLinkProperty,'Changed',__DC__GetTFieldLinkProperty__Changed,nil);
RegisterProperty(TFieldLinkProperty,'DataSet',__DC__GetTFieldLinkProperty__DataSet,nil);
RegisterProperty(TLinkFields,'DataSet',__DC__GetTLinkFields__DataSet,__DC__SetTLinkFields__DataSet);
RegisterProperty(TLinkFields,'DataSetProxy',__DC__GetTLinkFields__DataSetProxy,__DC__SetTLinkFields__DataSetProxy);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..1] of TClass = (
TFieldLinkProperty,
TLinkFields
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'EditMasterFields'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(TDataSet),
TypeInfo(TFieldLinkProperty),TypeInfo(Boolean)],Addr(EditMasterFields),cRegister);

//RegRegisterMethod(TFieldLinkProperty,'GetFieldNamesForIndex',TypeInfo(_T1),[TypeInfo(TStrings)], pointer(72));
RegRegisterMethod(TFieldLinkProperty,'GetFieldNamesForIndex',TypeInfo(_T1),[TypeInfo(TStrings)],  getVMTProcAddr('TFieldLinkProperty','GetFieldNamesForIndex',72));


//RegRegisterMethod(TFieldLinkProperty,'GetIndexBased',TypeInfo(_T2),[TypeInfo(Boolean)], pointer(76));
RegRegisterMethod(TFieldLinkProperty,'GetIndexBased',TypeInfo(_T2),[TypeInfo(Boolean)],  getVMTProcAddr('TFieldLinkProperty','GetIndexBased',76));


//RegRegisterMethod(TFieldLinkProperty,'GetIndexDefs',TypeInfo(_T3),[TypeInfo(TIndexDefs)], pointer(80));
RegRegisterMethod(TFieldLinkProperty,'GetIndexDefs',TypeInfo(_T3),[TypeInfo(TIndexDefs)],  getVMTProcAddr('TFieldLinkProperty','GetIndexDefs',80));


//RegRegisterMethod(TFieldLinkProperty,'GetIndexFieldNames',TypeInfo(_T4),[TypeInfo(string)], pointer(84));
RegRegisterMethod(TFieldLinkProperty,'GetIndexFieldNames',TypeInfo(_T4),[TypeInfo(string)],  getVMTProcAddr('TFieldLinkProperty','GetIndexFieldNames',84));


//RegRegisterMethod(TFieldLinkProperty,'GetIndexName',TypeInfo(_T5),[TypeInfo(string)], pointer(88));
RegRegisterMethod(TFieldLinkProperty,'GetIndexName',TypeInfo(_T5),[TypeInfo(string)],  getVMTProcAddr('TFieldLinkProperty','GetIndexName',88));


//RegRegisterMethod(TFieldLinkProperty,'GetMasterFields',TypeInfo(_T6),[TypeInfo(string)], pointer(92));
RegRegisterMethod(TFieldLinkProperty,'GetMasterFields',TypeInfo(_T6),[TypeInfo(string)],  getVMTProcAddr('TFieldLinkProperty','GetMasterFields',92));


//RegRegisterMethod(TFieldLinkProperty,'SetIndexFieldNames',TypeInfo(_T7),[TypeInfo(string)], pointer(96));
RegRegisterMethod(TFieldLinkProperty,'SetIndexFieldNames',TypeInfo(_T7),[TypeInfo(string)],  getVMTProcAddr('TFieldLinkProperty','SetIndexFieldNames',96));


//RegRegisterMethod(TFieldLinkProperty,'SetIndexName',TypeInfo(_T8),[TypeInfo(string)], pointer(100));
RegRegisterMethod(TFieldLinkProperty,'SetIndexName',TypeInfo(_T8),[TypeInfo(string)],  getVMTProcAddr('TFieldLinkProperty','SetIndexName',100));


//RegRegisterMethod(TFieldLinkProperty,'SetMasterFields',TypeInfo(_T9),[TypeInfo(string)], pointer(104));
RegRegisterMethod(TFieldLinkProperty,'SetMasterFields',TypeInfo(_T9),[TypeInfo(string)],  getVMTProcAddr('TFieldLinkProperty','SetMasterFields',104));


RegisterProc(TFieldLinkProperty,'CreateWith',mtConstructor,TypeInfo(_T10),[
TypeInfo(TDataSet)], pointer(108),cRegister);

RegRegisterMethod(TFieldLinkProperty,'GetIndexNames',TypeInfo(_T11),[
TypeInfo(TStrings)],Addr(TFieldLinkProperty.GetIndexNames));

RegRegisterMethod(TLinkFields,'FormCreate',TypeInfo(_T12),[
TypeInfo(TObject)],Addr(TLinkFields.FormCreate));

RegRegisterMethod(TLinkFields,'BindingListClick',TypeInfo(_T13),[
TypeInfo(TObject)],Addr(TLinkFields.BindingListClick));

RegRegisterMethod(TLinkFields,'AddButtonClick',TypeInfo(_T14),[
TypeInfo(TObject)],Addr(TLinkFields.AddButtonClick));

RegRegisterMethod(TLinkFields,'DeleteButtonClick',TypeInfo(_T15),[
TypeInfo(TObject)],Addr(TLinkFields.DeleteButtonClick));

RegRegisterMethod(TLinkFields,'BindListClick',TypeInfo(_T16),[
TypeInfo(TObject)],Addr(TLinkFields.BindListClick));

RegRegisterMethod(TLinkFields,'ClearButtonClick',TypeInfo(_T17),[
TypeInfo(TObject)],Addr(TLinkFields.ClearButtonClick));

RegRegisterMethod(TLinkFields,'FormDestroy',TypeInfo(_T18),[
TypeInfo(TObject)],Addr(TLinkFields.FormDestroy));

RegRegisterMethod(TLinkFields,'BitBtn1Click',TypeInfo(_T19),[
TypeInfo(TObject)],Addr(TLinkFields.BitBtn1Click));

RegRegisterMethod(TLinkFields,'HelpClick',TypeInfo(_T20),[
TypeInfo(TObject)],Addr(TLinkFields.HelpClick));

RegRegisterMethod(TLinkFields,'IndexListChange',TypeInfo(_T21),[
TypeInfo(TObject)],Addr(TLinkFields.IndexListChange));

RegRegisterMethod(TLinkFields,'Edit',TypeInfo(_T22),[TypeInfo(Boolean)],Addr(TLinkFields.Edit));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
