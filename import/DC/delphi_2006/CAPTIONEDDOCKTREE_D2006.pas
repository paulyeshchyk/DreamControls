{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit CAPTIONEDDOCKTREE_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  Types,
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Controls,
  Graphics,
  Messages,
  SysUtils,
  CaptionedDockTree;
function ConvertTParentFormStateToVariant(var R : TParentFormState) : OleVariant;
function ConvertVariantToTParentFormState(const V : OleVariant) : TParentFormState;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TParentFormState__Wrapper = class(TDCRecordWrapper)
private
fR : TParentFormState;
public
function GetRecordPtr : pointer; override;
published
procedure setCaption(const val : AnsiString);
function getCaption : AnsiString;
property Caption : AnsiString read getCaption write setCaption;
procedure setStartColor(const val : TColor);
function getStartColor : TColor;
property StartColor : TColor read getStartColor write setStartColor;
procedure setEndColor(const val : TColor);
function getEndColor : TColor;
property EndColor : TColor read getEndColor write setEndColor;
procedure setFontColor(const val : TColor);
function getFontColor : TColor;
property FontColor : TColor read getFontColor write setFontColor;
procedure setFocused(const val : Boolean);
function getFocused : Boolean;
property Focused : Boolean read getFocused write setFocused;
procedure setIcon(const val : TIcon);
function getIcon : TIcon;
property Icon : TIcon read getIcon write setIcon;
end;
type __TRect__Wrapper = class(TDCRecordWrapper)
private
fR : TRect;
public
function GetRecordPtr : pointer; override;
published
procedure setLeft(const val : Longint);
function getLeft : Longint;
property Left : Longint read getLeft write setLeft;
procedure setTop(const val : Longint);
function getTop : Longint;
property Top : Longint read getTop write setTop;
procedure setRight(const val : Longint);
function getRight : Longint;
property Right : Longint read getRight write setRight;
procedure setBottom(const val : Longint);
function getBottom : Longint;
property Bottom : Longint read getBottom write setBottom;
end;
type __TPoint__Wrapper = class(TDCRecordWrapper)
private
fR : TPoint;
public
function GetRecordPtr : pointer; override;
published
procedure setX(const val : Longint);
function getX : Longint;
property X : Longint read getX write setX;
procedure setY(const val : Longint);
function getY : Longint;
property Y : Longint read getY write setY;
end;
type __TCaptionedDockTree__ = class(TCaptionedDockTree);
type
_T0 = function (const p0 : IDispatch): IDispatch of object;

_T1 = procedure (p0 : TWinControl;
p1 : TDockCaptionOrientation) of object;

_T2 = function (const p0 : TControl): IDispatch of object;

{_T3 = function : TDockCaptionDrawerClass of object;}

_T4 = procedure (const p0 : TCanvas;
const p1 : IDispatch;
const p2 : IDispatch) of object;

_T5 = function (const p0 : IDispatch;
const p1 : IDispatch): TDockCaptionHitTest of object;

_T6 = procedure (p0 : TDockCaptionOrientation) of object;

function __TParentFormState__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TParentFormState__Wrapper.setCaption(const val : AnsiString);
begin
TParentFormState(GetRecordPtr^).Caption := val;
end;
function __TParentFormState__Wrapper.getCaption : AnsiString;
begin
result := TParentFormState(GetRecordPtr^).Caption;
end;
procedure __TParentFormState__Wrapper.setStartColor(const val : TColor);
begin
TParentFormState(GetRecordPtr^).StartColor := val;
end;
function __TParentFormState__Wrapper.getStartColor : TColor;
begin
result := TParentFormState(GetRecordPtr^).StartColor;
end;
procedure __TParentFormState__Wrapper.setEndColor(const val : TColor);
begin
TParentFormState(GetRecordPtr^).EndColor := val;
end;
function __TParentFormState__Wrapper.getEndColor : TColor;
begin
result := TParentFormState(GetRecordPtr^).EndColor;
end;
procedure __TParentFormState__Wrapper.setFontColor(const val : TColor);
begin
TParentFormState(GetRecordPtr^).FontColor := val;
end;
function __TParentFormState__Wrapper.getFontColor : TColor;
begin
result := TParentFormState(GetRecordPtr^).FontColor;
end;
procedure __TParentFormState__Wrapper.setFocused(const val : Boolean);
begin
TParentFormState(GetRecordPtr^).Focused := val;
end;
function __TParentFormState__Wrapper.getFocused : Boolean;
begin
result := TParentFormState(GetRecordPtr^).Focused;
end;
procedure __TParentFormState__Wrapper.setIcon(const val : TIcon);
begin
TParentFormState(GetRecordPtr^).Icon := val;
end;
function __TParentFormState__Wrapper.getIcon : TIcon;
begin
result := TParentFormState(GetRecordPtr^).Icon;
end;
function _TParentFormState_ : IDispatch;
begin
  result := __TParentFormState__Wrapper.Create;
end;
function __TRect__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRect__Wrapper.setLeft(const val : Longint);
begin
TRect(GetRecordPtr^).Left := val;
end;
function __TRect__Wrapper.getLeft : Longint;
begin
result := TRect(GetRecordPtr^).Left;
end;
procedure __TRect__Wrapper.setTop(const val : Longint);
begin
TRect(GetRecordPtr^).Top := val;
end;
function __TRect__Wrapper.getTop : Longint;
begin
result := TRect(GetRecordPtr^).Top;
end;
procedure __TRect__Wrapper.setRight(const val : Longint);
begin
TRect(GetRecordPtr^).Right := val;
end;
function __TRect__Wrapper.getRight : Longint;
begin
result := TRect(GetRecordPtr^).Right;
end;
procedure __TRect__Wrapper.setBottom(const val : Longint);
begin
TRect(GetRecordPtr^).Bottom := val;
end;
function __TRect__Wrapper.getBottom : Longint;
begin
result := TRect(GetRecordPtr^).Bottom;
end;
function __TPoint__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TPoint__Wrapper.setX(const val : Longint);
begin
TPoint(GetRecordPtr^).X := val;
end;
function __TPoint__Wrapper.getX : Longint;
begin
result := TPoint(GetRecordPtr^).X;
end;
procedure __TPoint__Wrapper.setY(const val : Longint);
begin
TPoint(GetRecordPtr^).Y := val;
end;
function __TPoint__Wrapper.getY : Longint;
begin
result := TPoint(GetRecordPtr^).Y;
end;
function __TCaptionedDockTree__AdjustCaptionRect__Wrapper(__Instance : TCaptionedDockTree;
const p0 : IDispatch): IDispatch;
var
__result : TRect;
__wrapper : __TRect__Wrapper;
__p0 : ^TRect;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
__result := __TCaptionedDockTree__(__Instance).AdjustCaptionRect(__p0^);
__wrapper := __TRect__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

function __TCaptionedDockTree__GetParentFormState__Wrapper(__Instance : TCaptionedDockTree;
const p0 : TControl): IDispatch;
var
__result : TParentFormState;
__wrapper : __TParentFormState__Wrapper;
begin
__result := TCaptionedDockTree(__Instance).GetParentFormState(p0);
__wrapper := __TParentFormState__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;

procedure __TDockCaptionDrawer__DrawDockCaption__Wrapper(__Instance : TDockCaptionDrawer;
const p0 : TCanvas;
const p1 : IDispatch;
const p2 : IDispatch);
var
__p1 : ^TRect;
__i1 : IDispatch;
__p2 : ^TParentFormState;
__i2 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
TDockCaptionDrawer(__Instance).DrawDockCaption(p0,__p1^,__p2^);
end;

function __TDockCaptionDrawer__DockCaptionHitTest__Wrapper(__Instance : TDockCaptionDrawer;
const p0 : IDispatch;
const p1 : IDispatch): TDockCaptionHitTest;
var
__p0 : ^TRect;
__i0 : IDispatch;
__p1 : ^TPoint;
__i1 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := TDockCaptionDrawer(__Instance).DockCaptionHitTest(__p0^,__p1^);
end;


type __TParentFormState__Wrapper__ = class(__TParentFormState__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TParentFormState__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTParentFormStateToVariant(var R : TParentFormState) : OleVariant;
var
__rw : __TParentFormState__Wrapper__;
begin
__rw := __TParentFormState__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTParentFormState(const V : OleVariant) : TParentFormState;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TParentFormState((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TPoint__Wrapper__ = class(__TPoint__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TPoint__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTPointToVariant(var R : TPoint) : OleVariant;
var
__rw : __TPoint__Wrapper__;
begin
__rw := __TPoint__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTPoint(const V : OleVariant) : TPoint;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TPoint((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TRect__Wrapper__ = class(__TRect__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRect__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
var
__rw : __TRect__Wrapper__;
begin
__rw := __TRect__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRect((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTDockCaptionDrawer__DockCaptionPinButton(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDockCaptionDrawer(Instance).DockCaptionPinButton;
end;

procedure __DC__SetTDockCaptionDrawer__DockCaptionPinButton(Instance : TObject; Params : PVariantArgList);
begin
TDockCaptionDrawer(Instance).DockCaptionPinButton:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TDockCaptionDrawer,'DockCaptionPinButton',__DC__GetTDockCaptionDrawer__DockCaptionPinButton,__DC__SetTDockCaptionDrawer__DockCaptionPinButton);
end;

const __ConstNames0 : array[0..9] of string = (
'dcoHorizontal'
,'dcoVertical'
,'dcpbNone'
,'dcpbUp'
,'dcpbDown'
,'dchtNone'
,'dchtCaption'
,'dchtClose'
,'dchtPin'
,'dchtCustom'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,dcoHorizontal));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,dcoVertical));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,dcpbNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,dcpbUp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,dcpbDown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,dchtNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,dchtCaption));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,dchtClose));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,dchtPin));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,dchtCustom));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..1] of TClass = (
TCaptionedDockTree,
TDockCaptionDrawer
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'TParentFormState'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TParentFormState_)));
//RegRegisterMethod(TCaptionedDockTree,'AdjustCaptionRect',TypeInfo(_T0),[TypeInfo(IDispatch),TypeInfo(IDispatch)], pointer(76));
RegRegisterMethod(TCaptionedDockTree,'AdjustCaptionRect',TypeInfo(_T0),[TypeInfo(IDispatch),TypeInfo(IDispatch)],  getVMTProcAddr('TCaptionedDockTree','AdjustCaptionRect',76));


RegisterProc(TCaptionedDockTree,'Create',mtConstructor,TypeInfo(_T1),[
TypeInfo(TWinControl),
TypeInfo(TDockCaptionOrientation)],Addr(TCaptionedDockTree.Create),cRegister);

RegisterProc(TCaptionedDockTree,'GetParentFormState',mtClassMethod,TypeInfo(_T2),[
TypeInfo(TControl),TypeInfo(IDispatch)], pointer(80),cRegister);

//RegRegisterMethod(TDockCaptionDrawer,'DrawDockCaption',TypeInfo(_T4),[TypeInfo(TCanvas),TypeInfo(IDispatch),TypeInfo(IDispatch)], pointer(0));
RegRegisterMethod(TDockCaptionDrawer,'DrawDockCaption',TypeInfo(_T4),[TypeInfo(TCanvas),TypeInfo(IDispatch),TypeInfo(IDispatch)],  getVMTProcAddr('TDockCaptionDrawer','DrawDockCaption',0));


//RegRegisterMethod(TDockCaptionDrawer,'DockCaptionHitTest',TypeInfo(_T5),[TypeInfo(IDispatch),TypeInfo(IDispatch),TypeInfo(TDockCaptionHitTest)], pointer(4));
RegRegisterMethod(TDockCaptionDrawer,'DockCaptionHitTest',TypeInfo(_T5),[TypeInfo(IDispatch),TypeInfo(IDispatch),TypeInfo(TDockCaptionHitTest)],  getVMTProcAddr('TDockCaptionDrawer','DockCaptionHitTest',4));


RegisterProc(TDockCaptionDrawer,'Create',mtConstructor,TypeInfo(_T6),[
TypeInfo(TDockCaptionOrientation)], pointer(8),cRegister);

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(TCaptionedDockTree,'GetDockCaptionDrawer',mtClassMethod,TypeInfo(_T3),[TypeInfo(TDockCaptionDrawerClass)], pointer(84),cRegister)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
