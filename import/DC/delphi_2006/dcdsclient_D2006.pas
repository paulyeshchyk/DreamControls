{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit dcdsclient_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  SysUtils,
  dcRPC,
  dcDScript,
  dcDSLib,
  dcdsClient;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (p0 : TDSProject) of object;

_T1 = _T0;

_T2 = _T0;

_T3 = _T0;

_T4 = procedure (p0 : TDSProject;
p1 : Integer;
p2 : Integer) of object;

_T5 = _T0;

_T6 = procedure (p0 : TDSProject;
p1 : Exception;
p2 : Integer;
p3 : Integer) of object;

_T7 = function : Boolean of object;

_T8 = procedure  of object;

procedure __RegisterProps;
begin
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

procedure __RegisterClasses;
begin
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..8] of string = (
'AddDelphiProject'
,'CloseProject'
,'ConnectDebuggerToProject'
,'RemoveDelphiProject'
,'ProjectOnBreakPoint'
,'ProjectOnClose'
,'ProjectOnException'
,'Connect'
,'Disconnect'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[
TypeInfo(TDSProject)],Addr(AddDelphiProject),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(TDSProject)],Addr(CloseProject),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T2),[
TypeInfo(TDSProject)],Addr(ConnectDebuggerToProject),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T3),[
TypeInfo(TDSProject)],Addr(RemoveDelphiProject),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T4),[
TypeInfo(TDSProject),
TypeInfo(Integer),
TypeInfo(Integer)],Addr(ProjectOnBreakPoint),cRegister);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T5),[
TypeInfo(TDSProject)],Addr(ProjectOnClose),cRegister);

RegisterProc(nil,MethodNames[6],mtProc,TypeInfo(_T6),[
TypeInfo(TDSProject),
TypeInfo(Exception),
TypeInfo(Integer),
TypeInfo(Integer)],Addr(ProjectOnException),cRegister);

RegisterProc(nil,MethodNames[7],mtProc,TypeInfo(_T7),[TypeInfo(Boolean)],Addr(Connect),cRegister);

RegisterProc(nil,MethodNames[8],mtProc,TypeInfo(_T8),NoParams,Addr(Disconnect),cRegister);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
