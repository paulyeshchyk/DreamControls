{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDIDENT_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdAssignedNumbers,
  IdException,
  IdTCPClient,
  IdIdent;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (p0 : Word;
p1 : Word) of object;

function __DC__GetTIdIdent__Reply(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdIdent(Instance).Reply;
end;

function __DC__GetTIdIdent__ReplyCharset(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdIdent(Instance).ReplyCharset;
end;

function __DC__GetTIdIdent__ReplyOS(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdIdent(Instance).ReplyOS;
end;

function __DC__GetTIdIdent__ReplyOther(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdIdent(Instance).ReplyOther;
end;

function __DC__GetTIdIdent__ReplyUserName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdIdent(Instance).ReplyUserName;
end;

procedure __RegisterProps;
begin
RegisterProperty(TIdIdent,'Reply',__DC__GetTIdIdent__Reply,nil);
RegisterProperty(TIdIdent,'ReplyCharset',__DC__GetTIdIdent__ReplyCharset,nil);
RegisterProperty(TIdIdent,'ReplyOS',__DC__GetTIdIdent__ReplyOS,nil);
RegisterProperty(TIdIdent,'ReplyOther',__DC__GetTIdIdent__ReplyOther,nil);
RegisterProperty(TIdIdent,'ReplyUserName',__DC__GetTIdIdent__ReplyUserName,nil);
end;

const __ConstNames0 : array[0..0] of string = (
'IdIdentQryTimeout'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,IdIdentQryTimeout));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..7] of TClass = (
EIdIdentException,
EIdIdentHiddenUser,
EIdIdentInvalidPort,
EIdIdentNoUser,
EIdIdentQueryTimeOut,
EIdIdentReply,
EIdIdentUnknownError,
TIdIdent
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegRegisterMethod(TIdIdent,'Query',TypeInfo(_T0),[
TypeInfo(Word),
TypeInfo(Word)],Addr(TIdIdent.Query));

end;
initialization
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
