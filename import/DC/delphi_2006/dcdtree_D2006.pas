{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit dcdtree_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  Windows,
  Messages,
  SysUtils,
  Classes,
  Graphics,
  Controls,
  Forms,
  extctrls,
  dcdreamlib,
  ComCtrls,
  CommCtrl,
  dcconsts,
  imglist,
  dcDTree;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure  of object;

_T1 = procedure (p0 : TTreeNode) of object;

_T2 = _T1;

_T3 = _T0;

_T4 = function (p0 : TTreeNode): TDrawNodeStates of object;

_T5 = procedure (p0 : TTreeNode;
p1 : TDrawNodeState;
p2 : Boolean) of object;

_T6 = procedure (p0 : TTreeNode;
p1 : TDrawNodeStates) of object;

_T7 = _T0;

_T8 = function : Boolean of object;

_T9 = _T0;

_T10 = _T0;

_T11 = procedure (p0 : TTreeNodes) of object;

_T12 = _T1;

_T13 = _T0;

_T14 = _T0;

_T15 = _T0;

_T16 = _T0;

_T17 = function (p0 : TTreeNode): Boolean of object;

_T18 = _T0;

_T19 = procedure (p0 : TTreeNode;
p1 : Boolean) of object;

_T20 = function (p0 : Integer;
const p1 : string;
p2 : TNodeAttachMode): TListItem of object;

_T21 = procedure (p0 : TListItem;
p1 : TListItem) of object;

_T22 = procedure (p0 : TCustomListView) of object;

_T23 = function : TListItem of object;

_T24 = function (p0 : Integer): TListItem of object;

_T25 = function (const p0 : string): TListItem of object;

_T26 = function (p0 : Integer;
const p1 : string): TListItem of object;

_T27 = _T0;

_T28 = _T0;

_T29 = _T0;

_T30 = procedure (p0 : Integer) of object;

_T31 = function (p0 : TListItem): Integer of object;

_T32 = _T11;

_T33 = function (p0 : TTreeNode;
const p1 : string;
p2 : Pointer;
p3 : TNodeAttachMode): TTreeNode of object;

_T34 = function (p0 : Integer): TTreeNode of object;

_T35 = procedure (p0 : TCustomMSTreeView) of object;

_T36 = function (p0 : TTreeNode;
const p1 : string): TTreeNode of object;

_T37 = _T36;

_T38 = function (p0 : TTreeNode;
const p1 : string;
p2 : Pointer): TTreeNode of object;

_T39 = _T38;

_T40 = _T36;

_T41 = _T36;

_T42 = _T38;

_T43 = _T38;

_T44 = _T36;

_T45 = _T38;

_T46 = _T0;

_T47 = _T0;

_T48 = _T0;

_T49 = _T1;

_T50 = function : TTreeNode of object;

{_T51 = function (p0 : HTreeItem): TTreeNode of object;}

function __DC__GetTCustomDCDrawTreeView__CheckBoxes(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomDCDrawTreeView(Instance).CheckBoxes;
end;

procedure __DC__SetTCustomDCDrawTreeView__CheckBoxes(Instance : TObject; Params : PVariantArgList);
begin
TCustomDCDrawTreeView(Instance).CheckBoxes:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomDCDrawTreeView__AllowGrayed(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomDCDrawTreeView(Instance).AllowGrayed;
end;

procedure __DC__SetTCustomDCDrawTreeView__AllowGrayed(Instance : TObject; Params : PVariantArgList);
begin
TCustomDCDrawTreeView(Instance).AllowGrayed:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomDCDrawTreeView__AutoScroll(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomDCDrawTreeView(Instance).AutoScroll;
end;

procedure __DC__SetTCustomDCDrawTreeView__AutoScroll(Instance : TObject; Params : PVariantArgList);
begin
TCustomDCDrawTreeView(Instance).AutoScroll:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomDCDrawTreeView__ExpandOnDrag(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomDCDrawTreeView(Instance).ExpandOnDrag;
end;

procedure __DC__SetTCustomDCDrawTreeView__ExpandOnDrag(Instance : TObject; Params : PVariantArgList);
begin
TCustomDCDrawTreeView(Instance).ExpandOnDrag:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomDCDrawTreeView__DragExpandDelay(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomDCDrawTreeView(Instance).DragExpandDelay;
end;

procedure __DC__SetTCustomDCDrawTreeView__DragExpandDelay(Instance : TObject; Params : PVariantArgList);
begin
TCustomDCDrawTreeView(Instance).DragExpandDelay:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomDCDrawTreeView__StateImages(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomDCDrawTreeView(Instance).StateImages);
end;

procedure __DC__SetTCustomDCDrawTreeView__StateImages(Instance : TObject; Params : PVariantArgList);
begin
TCustomDCDrawTreeView(Instance).StateImages:=TCustomImageList(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomDCDrawTreeView__AllowChange(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomDCDrawTreeView(Instance).AllowChange;
end;

procedure __DC__SetTCustomDCDrawTreeView__AllowChange(Instance : TObject; Params : PVariantArgList);
begin
TCustomDCDrawTreeView(Instance).AllowChange:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomDrawListView__SelectDelay(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomDrawListView(Instance).SelectDelay;
end;

procedure __DC__SetTCustomDrawListView__SelectDelay(Instance : TObject; Params : PVariantArgList);
begin
TCustomDrawListView(Instance).SelectDelay:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomDrawListView__Regional(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomDrawListView(Instance).Regional;
end;

procedure __DC__SetTCustomDrawListView__Regional(Instance : TObject; Params : PVariantArgList);
begin
TCustomDrawListView(Instance).Regional:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomDrawListView__SelectedItems(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomDrawListView(Instance).SelectedItems);
end;

function __DC__GetTCustomDrawListView__CheckStyle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomDrawListView(Instance).CheckStyle;
end;

procedure __DC__SetTCustomDrawListView__CheckStyle(Instance : TObject; Params : PVariantArgList);
begin
TCustomDrawListView(Instance).CheckStyle:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomMSTreeView__MultiSelect(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomMSTreeView(Instance).MultiSelect;
end;

procedure __DC__SetTCustomMSTreeView__MultiSelect(Instance : TObject; Params : PVariantArgList);
begin
TCustomMSTreeView(Instance).MultiSelect:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomMSTreeView__DeselectOnButton(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomMSTreeView(Instance).DeselectOnButton;
end;

procedure __DC__SetTCustomMSTreeView__DeselectOnButton(Instance : TObject; Params : PVariantArgList);
begin
TCustomMSTreeView(Instance).DeselectOnButton:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomMSTreeView__ItemsSelected(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomMSTreeView(Instance).ItemsSelected);
end;

procedure __DC__SetTCustomMSTreeView__ItemsSelected(Instance : TObject; Params : PVariantArgList);
begin
TCustomMSTreeView(Instance).ItemsSelected:=Tlist(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomMSTreeView__SelectDelay(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomMSTreeView(Instance).SelectDelay;
end;

procedure __DC__SetTCustomMSTreeView__SelectDelay(Instance : TObject; Params : PVariantArgList);
begin
TCustomMSTreeView(Instance).SelectDelay:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomMSTreeView__AllowMultiDrag(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomMSTreeView(Instance).AllowMultiDrag;
end;

procedure __DC__SetTCustomMSTreeView__AllowMultiDrag(Instance : TObject; Params : PVariantArgList);
begin
TCustomMSTreeView(Instance).AllowMultiDrag:=OleVariant(Params^[0]);
end;

function __DC__GetTCustomMSTreeView__SelectOnlySiblings(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TCustomMSTreeView(Instance).SelectOnlySiblings;
end;

procedure __DC__SetTCustomMSTreeView__SelectOnlySiblings(Instance : TObject; Params : PVariantArgList);
begin
TCustomMSTreeView(Instance).SelectOnlySiblings:=OleVariant(Params^[0]);
end;

function __DC__GetTDrawListItems__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDrawListItems(Instance).Count;
end;

procedure __DC__SetTDrawListItems__Count(Instance : TObject; Params : PVariantArgList);
begin
TDrawListItems(Instance).Count:=OleVariant(Params^[0]);
end;

function __DC__GetTDrawListItems__Handle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDrawListItems(Instance).Handle;
end;

function __DC__GetTDrawListItems__Item(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDrawListItems(Instance).Item[OleVariant(Params^[0])]);
end;

procedure __DC__SetTDrawListItems__Item(Instance : TObject; Params : PVariantArgList);
begin
TDrawListItems(Instance).Item[OleVariant(Params^[1])]:=TListItem(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTDrawListItems__Owner(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDrawListItems(Instance).Owner);
end;

function __DC__GetTDrawTreeNodes__Count(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDrawTreeNodes(Instance).Count;
end;

function __DC__GetTDrawTreeNodes__Handle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TDrawTreeNodes(Instance).Handle;
end;

function __DC__GetTDrawTreeNodes__Item(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDrawTreeNodes(Instance).Item[OleVariant(Params^[0])]);
end;

function __DC__GetTDrawTreeNodes__Owner(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TDrawTreeNodes(Instance).Owner);
end;

procedure __RegisterProps;
begin
RegisterProperty(TCustomDCDrawTreeView,'CheckBoxes',__DC__GetTCustomDCDrawTreeView__CheckBoxes,__DC__SetTCustomDCDrawTreeView__CheckBoxes);
RegisterProperty(TCustomDCDrawTreeView,'AllowGrayed',__DC__GetTCustomDCDrawTreeView__AllowGrayed,__DC__SetTCustomDCDrawTreeView__AllowGrayed);
RegisterProperty(TCustomDCDrawTreeView,'AutoScroll',__DC__GetTCustomDCDrawTreeView__AutoScroll,__DC__SetTCustomDCDrawTreeView__AutoScroll);
RegisterProperty(TCustomDCDrawTreeView,'ExpandOnDrag',__DC__GetTCustomDCDrawTreeView__ExpandOnDrag,__DC__SetTCustomDCDrawTreeView__ExpandOnDrag);
RegisterProperty(TCustomDCDrawTreeView,'DragExpandDelay',__DC__GetTCustomDCDrawTreeView__DragExpandDelay,__DC__SetTCustomDCDrawTreeView__DragExpandDelay);
RegisterProperty(TCustomDCDrawTreeView,'StateImages',__DC__GetTCustomDCDrawTreeView__StateImages,__DC__SetTCustomDCDrawTreeView__StateImages);
RegisterProperty(TCustomDCDrawTreeView,'AllowChange',__DC__GetTCustomDCDrawTreeView__AllowChange,__DC__SetTCustomDCDrawTreeView__AllowChange);
RegisterProperty(TCustomDrawListView,'SelectDelay',__DC__GetTCustomDrawListView__SelectDelay,__DC__SetTCustomDrawListView__SelectDelay);
RegisterProperty(TCustomDrawListView,'Regional',__DC__GetTCustomDrawListView__Regional,__DC__SetTCustomDrawListView__Regional);
RegisterProperty(TCustomDrawListView,'SelectedItems',__DC__GetTCustomDrawListView__SelectedItems,nil);
RegisterProperty(TCustomDrawListView,'CheckStyle',__DC__GetTCustomDrawListView__CheckStyle,__DC__SetTCustomDrawListView__CheckStyle);
RegisterProperty(TCustomMSTreeView,'MultiSelect',__DC__GetTCustomMSTreeView__MultiSelect,__DC__SetTCustomMSTreeView__MultiSelect);
RegisterProperty(TCustomMSTreeView,'DeselectOnButton',__DC__GetTCustomMSTreeView__DeselectOnButton,__DC__SetTCustomMSTreeView__DeselectOnButton);
RegisterProperty(TCustomMSTreeView,'ItemsSelected',__DC__GetTCustomMSTreeView__ItemsSelected,__DC__SetTCustomMSTreeView__ItemsSelected);
RegisterProperty(TCustomMSTreeView,'SelectDelay',__DC__GetTCustomMSTreeView__SelectDelay,__DC__SetTCustomMSTreeView__SelectDelay);
RegisterProperty(TCustomMSTreeView,'AllowMultiDrag',__DC__GetTCustomMSTreeView__AllowMultiDrag,__DC__SetTCustomMSTreeView__AllowMultiDrag);
RegisterProperty(TCustomMSTreeView,'SelectOnlySiblings',__DC__GetTCustomMSTreeView__SelectOnlySiblings,__DC__SetTCustomMSTreeView__SelectOnlySiblings);
RegisterProperty(TDrawListItems,'Count',__DC__GetTDrawListItems__Count,__DC__SetTDrawListItems__Count);
RegisterProperty(TDrawListItems,'Handle',__DC__GetTDrawListItems__Handle,nil);
RegisterIndexedProperty(TDrawListItems,'Item',1,True,__DC__GetTDrawListItems__Item,__DC__SetTDrawListItems__Item);
RegisterProperty(TDrawListItems,'Owner',__DC__GetTDrawListItems__Owner,nil);
RegisterProperty(TDrawTreeNodes,'Count',__DC__GetTDrawTreeNodes__Count,nil);
RegisterProperty(TDrawTreeNodes,'Handle',__DC__GetTDrawTreeNodes__Handle,nil);
RegisterIndexedProperty(TDrawTreeNodes,'Item',1,True,__DC__GetTDrawTreeNodes__Item,nil);
RegisterProperty(TDrawTreeNodes,'Owner',__DC__GetTDrawTreeNodes__Owner,nil);
end;

const __ConstNames0 : array[0..23] of string = (
'TreeTimerID'
,'DragTimerID'
,'ScrollTimerID'
,'TSIMAGECHANGED'
,'TVS_HOTTRACK'
,'csUnchecked'
,'csChecked'
,'csGrayed'
,'csNone'
,'msCut'
,'msBold'
,'msDropHilited'
,'msFocused'
,'msSelected'
,'msExpanded'
,'sdLeft'
,'sdUp'
,'sdRight'
,'sdDown'
,'dtNone'
,'dtDown'
,'dtUp'
,'csFlat'
,'cs3D'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,TreeTimerID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,DragTimerID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,ScrollTimerID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,TSIMAGECHANGED));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,TVS_HOTTRACK));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,csUnchecked));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,csChecked));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,csGrayed));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,csNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,msCut));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,msBold));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,msDropHilited));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,msFocused));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,msSelected));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,msExpanded));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[15] ,sdLeft));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[16] ,sdUp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[17] ,sdRight));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[18] ,sdDown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[19] ,dtNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[20] ,dtDown));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[21] ,dtUp));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[22] ,csFlat));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[23] ,cs3D));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..8] of TClass = (
TCustomDCDrawTreeView,
TCustomDrawListView,
TCustomMSTreeView,
TDCDrawListView,
TDCDrawTreeView,
TDCMSTreeView,
TDrawListItems,
TDrawNode,
TDrawTreeNodes
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'Register'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),NoParams,Addr(Register),cRegister);

//RegRegisterMethod(TCustomDCDrawTreeView,'InitNode',TypeInfo(_T1),[TypeInfo(TTreeNode)], pointer(272));
RegRegisterMethod(TCustomDCDrawTreeView,'InitNode',TypeInfo(_T1),[TypeInfo(TTreeNode)],  getVMTProcAddr('TCustomDCDrawTreeView','InitNode',272));


//RegRegisterMethod(TCustomDCDrawTreeView,'ClickCheck',TypeInfo(_T2),[TypeInfo(TTreeNode)], pointer(276));
RegRegisterMethod(TCustomDCDrawTreeView,'ClickCheck',TypeInfo(_T2),[TypeInfo(TTreeNode)],  getVMTProcAddr('TCustomDCDrawTreeView','ClickCheck',276));


//RegRegisterMethod(TCustomDCDrawTreeView,'DoScroll',TypeInfo(_T3),NoParams, pointer(280));
RegRegisterMethod(TCustomDCDrawTreeView,'DoScroll',TypeInfo(_T3),NoParams,  getVMTProcAddr('TCustomDCDrawTreeView','DoScroll',280));


//RegRegisterMethod(TCustomDCDrawTreeView,'GetNodeState',TypeInfo(_T4),[TypeInfo(TTreeNode),TypeInfo(TDrawNodeStates)], pointer(284));
RegRegisterMethod(TCustomDCDrawTreeView,'GetNodeState',TypeInfo(_T4),[TypeInfo(TTreeNode),TypeInfo(TDrawNodeStates)],  getVMTProcAddr('TCustomDCDrawTreeView','GetNodeState',284));


//RegRegisterMethod(TCustomDCDrawTreeView,'SetNodeState',TypeInfo(_T5),[TypeInfo(TTreeNode),TypeInfo(TDrawNodeState),TypeInfo(Boolean)], pointer(288));
RegRegisterMethod(TCustomDCDrawTreeView,'SetNodeState',TypeInfo(_T5),[TypeInfo(TTreeNode),TypeInfo(TDrawNodeState),TypeInfo(Boolean)],  getVMTProcAddr('TCustomDCDrawTreeView','SetNodeState',288));


//RegRegisterMethod(TCustomDCDrawTreeView,'SetNodeStates',TypeInfo(_T6),[TypeInfo(TTreeNode),TypeInfo(TDrawNodeStates)], pointer(292));
RegRegisterMethod(TCustomDCDrawTreeView,'SetNodeStates',TypeInfo(_T6),[TypeInfo(TTreeNode),TypeInfo(TDrawNodeStates)],  getVMTProcAddr('TCustomDCDrawTreeView','SetNodeStates',292));


//RegRegisterMethod(TCustomDCDrawTreeView,'DestroyTimers',TypeInfo(_T7),NoParams, pointer(296));
RegRegisterMethod(TCustomDCDrawTreeView,'DestroyTimers',TypeInfo(_T7),NoParams,  getVMTProcAddr('TCustomDCDrawTreeView','DestroyTimers',296));


//RegRegisterMethod(TCustomDCDrawTreeView,'StoreDrawData',TypeInfo(_T8),[TypeInfo(Boolean)], pointer(300));
RegRegisterMethod(TCustomDCDrawTreeView,'StoreDrawData',TypeInfo(_T8),[TypeInfo(Boolean)],  getVMTProcAddr('TCustomDCDrawTreeView','StoreDrawData',300));


//RegRegisterMethod(TCustomDCDrawTreeView,'BeginUpdate',TypeInfo(_T9),NoParams, pointer(304));
RegRegisterMethod(TCustomDCDrawTreeView,'BeginUpdate',TypeInfo(_T9),NoParams,  getVMTProcAddr('TCustomDCDrawTreeView','BeginUpdate',304));


//RegRegisterMethod(TCustomDCDrawTreeView,'EndUpdate',TypeInfo(_T10),NoParams, pointer(308));
RegRegisterMethod(TCustomDCDrawTreeView,'EndUpdate',TypeInfo(_T10),NoParams,  getVMTProcAddr('TCustomDCDrawTreeView','EndUpdate',308));


RegRegisterMethod(TCustomDCDrawTreeView,'AssignNodes',TypeInfo(_T11),[
TypeInfo(TTreeNodes)],Addr(TCustomDCDrawTreeView.AssignNodes));

RegRegisterMethod(TCustomDCDrawTreeView,'MakeVisible',TypeInfo(_T12),[
TypeInfo(TTreeNode)],Addr(TCustomDCDrawTreeView.MakeVisible));

//RegRegisterMethod(TCustomDrawListView,'SelectionChanged',TypeInfo(_T13),NoParams, pointer(316));
RegRegisterMethod(TCustomDrawListView,'SelectionChanged',TypeInfo(_T13),NoParams,  getVMTProcAddr('TCustomDrawListView','SelectionChanged',316));


//RegRegisterMethod(TCustomMSTreeView,'SelectionChanged',TypeInfo(_T14),NoParams, pointer(312));
RegRegisterMethod(TCustomMSTreeView,'SelectionChanged',TypeInfo(_T14),NoParams,  getVMTProcAddr('TCustomMSTreeView','SelectionChanged',312));


RegRegisterMethod(TCustomMSTreeView,'SelectAllItems',TypeInfo(_T15),NoParams,Addr(TCustomMSTreeView.SelectAllItems));

RegRegisterMethod(TCustomMSTreeView,'DeselectAllItems',TypeInfo(_T16),NoParams,Addr(TCustomMSTreeView.DeselectAllItems));

RegRegisterMethod(TCustomMSTreeView,'ItemSelected',TypeInfo(_T17),[
TypeInfo(TTreeNode),TypeInfo(Boolean)],Addr(TCustomMSTreeView.ItemSelected));

//RegRegisterMethod(TCustomMSTreeView,'DeleteSelectedItems',TypeInfo(_T18),NoParams, pointer(316));
RegRegisterMethod(TCustomMSTreeView,'DeleteSelectedItems',TypeInfo(_T18),NoParams,  getVMTProcAddr('TCustomMSTreeView','DeleteSelectedItems',316));


RegRegisterMethod(TCustomMSTreeView,'SetItemSelected',TypeInfo(_T19),[
TypeInfo(TTreeNode),
TypeInfo(Boolean)],Addr(TCustomMSTreeView.SetItemSelected));

//RegRegisterMethod(TDrawListItems,'InternalAdd',TypeInfo(_T20),[TypeInfo(Integer),TypeInfo(string),TypeInfo(TNodeAttachMode),TypeInfo(TListItem)], pointer(12));
RegRegisterMethod(TDrawListItems,'InternalAdd',TypeInfo(_T20),[TypeInfo(Integer),TypeInfo(string),TypeInfo(TNodeAttachMode),TypeInfo(TListItem)],  getVMTProcAddr('TDrawListItems','InternalAdd',12));


//RegRegisterMethod(TDrawListItems,'AssignListItem',TypeInfo(_T21),[TypeInfo(TListItem),TypeInfo(TListItem)], pointer(16));
RegRegisterMethod(TDrawListItems,'AssignListItem',TypeInfo(_T21),[TypeInfo(TListItem),TypeInfo(TListItem)],  getVMTProcAddr('TDrawListItems','AssignListItem',16));


RegisterProc(TDrawListItems,'Create',mtConstructor,TypeInfo(_T22),[
TypeInfo(TCustomListView)], pointer(20),cRegister);

RegRegisterMethod(TDrawListItems,'Add',TypeInfo(_T23),[TypeInfo(TListItem)],Addr(TDrawListItems.Add));

RegRegisterMethod(TDrawListItems,'Insert',TypeInfo(_T24),[
TypeInfo(Integer),TypeInfo(TListItem)],Addr(TDrawListItems.Insert));

RegRegisterMethod(TDrawListItems,'AddCaption',TypeInfo(_T25),[
TypeInfo(string),TypeInfo(TListItem)],Addr(TDrawListItems.AddCaption));

RegRegisterMethod(TDrawListItems,'InsertCaption',TypeInfo(_T26),[
TypeInfo(Integer),
TypeInfo(string),TypeInfo(TListItem)],Addr(TDrawListItems.InsertCaption));

//RegRegisterMethod(TDrawListItems,'BeginUpdate',TypeInfo(_T27),NoParams, pointer(24));
RegRegisterMethod(TDrawListItems,'BeginUpdate',TypeInfo(_T27),NoParams,  getVMTProcAddr('TDrawListItems','BeginUpdate',24));


//RegRegisterMethod(TDrawListItems,'EndUpdate',TypeInfo(_T28),NoParams, pointer(28));
RegRegisterMethod(TDrawListItems,'EndUpdate',TypeInfo(_T28),NoParams,  getVMTProcAddr('TDrawListItems','EndUpdate',28));


//RegRegisterMethod(TDrawListItems,'Clear',TypeInfo(_T29),NoParams, pointer(32));
RegRegisterMethod(TDrawListItems,'Clear',TypeInfo(_T29),NoParams,  getVMTProcAddr('TDrawListItems','Clear',32));


//RegRegisterMethod(TDrawListItems,'Delete',TypeInfo(_T30),[TypeInfo(Integer)], pointer(36));
RegRegisterMethod(TDrawListItems,'Delete',TypeInfo(_T30),[TypeInfo(Integer)],  getVMTProcAddr('TDrawListItems','Delete',36));


RegRegisterMethod(TDrawListItems,'IndexOf',TypeInfo(_T31),[
TypeInfo(TListItem),TypeInfo(Integer)],Addr(TDrawListItems.IndexOf));

RegisterProc(TDrawNode,'Create',mtConstructor,TypeInfo(_T32),[
TypeInfo(TTreeNodes)],Addr(TDrawNode.Create),cRegister);

//RegRegisterMethod(TDrawTreeNodes,'InternalAdd',TypeInfo(_T33),[TypeInfo(TTreeNode),TypeInfo(string),TypeInfoPointer,TypeInfo(TNodeAttachMode),TypeInfo(TTreeNode)], pointer(12));
RegRegisterMethod(TDrawTreeNodes,'InternalAdd',TypeInfo(_T33),[TypeInfo(TTreeNode),TypeInfo(string),TypeInfoPointer,TypeInfo(TNodeAttachMode),TypeInfo(TTreeNode)],  getVMTProcAddr('TDrawTreeNodes','InternalAdd',12));


//RegRegisterMethod(TDrawTreeNodes,'GetNodeFromIndex',TypeInfo(_T34),[TypeInfo(Integer),TypeInfo(TTreeNode)], pointer(16));
RegRegisterMethod(TDrawTreeNodes,'GetNodeFromIndex',TypeInfo(_T34),[TypeInfo(Integer),TypeInfo(TTreeNode)],  getVMTProcAddr('TDrawTreeNodes','GetNodeFromIndex',16));


RegisterProc(TDrawTreeNodes,'Create',mtConstructor,TypeInfo(_T35),[
TypeInfo(TCustomMSTreeView)], pointer(20),cRegister);

RegRegisterMethod(TDrawTreeNodes,'AddChildFirst',TypeInfo(_T36),[
TypeInfo(TTreeNode),
TypeInfo(string),TypeInfo(TTreeNode)],Addr(TDrawTreeNodes.AddChildFirst));

RegRegisterMethod(TDrawTreeNodes,'AddChild',TypeInfo(_T37),[
TypeInfo(TTreeNode),
TypeInfo(string),TypeInfo(TTreeNode)],Addr(TDrawTreeNodes.AddChild));

RegRegisterMethod(TDrawTreeNodes,'AddChildObjectFirst',TypeInfo(_T38),[
TypeInfo(TTreeNode),
TypeInfo(string),
TypeInfoPointer,TypeInfo(TTreeNode)],Addr(TDrawTreeNodes.AddChildObjectFirst));

RegRegisterMethod(TDrawTreeNodes,'AddChildObject',TypeInfo(_T39),[
TypeInfo(TTreeNode),
TypeInfo(string),
TypeInfoPointer,TypeInfo(TTreeNode)],Addr(TDrawTreeNodes.AddChildObject));

RegRegisterMethod(TDrawTreeNodes,'AddFirst',TypeInfo(_T40),[
TypeInfo(TTreeNode),
TypeInfo(string),TypeInfo(TTreeNode)],Addr(TDrawTreeNodes.AddFirst));

RegRegisterMethod(TDrawTreeNodes,'Add',TypeInfo(_T41),[
TypeInfo(TTreeNode),
TypeInfo(string),TypeInfo(TTreeNode)],Addr(TDrawTreeNodes.Add));

RegRegisterMethod(TDrawTreeNodes,'AddObjectFirst',TypeInfo(_T42),[
TypeInfo(TTreeNode),
TypeInfo(string),
TypeInfoPointer,TypeInfo(TTreeNode)],Addr(TDrawTreeNodes.AddObjectFirst));

RegRegisterMethod(TDrawTreeNodes,'AddObject',TypeInfo(_T43),[
TypeInfo(TTreeNode),
TypeInfo(string),
TypeInfoPointer,TypeInfo(TTreeNode)],Addr(TDrawTreeNodes.AddObject));

RegRegisterMethod(TDrawTreeNodes,'Insert',TypeInfo(_T44),[
TypeInfo(TTreeNode),
TypeInfo(string),TypeInfo(TTreeNode)],Addr(TDrawTreeNodes.Insert));

RegRegisterMethod(TDrawTreeNodes,'InsertObject',TypeInfo(_T45),[
TypeInfo(TTreeNode),
TypeInfo(string),
TypeInfoPointer,TypeInfo(TTreeNode)],Addr(TDrawTreeNodes.InsertObject));

//RegRegisterMethod(TDrawTreeNodes,'BeginUpdate',TypeInfo(_T46),NoParams, pointer(24));
RegRegisterMethod(TDrawTreeNodes,'BeginUpdate',TypeInfo(_T46),NoParams,  getVMTProcAddr('TDrawTreeNodes','BeginUpdate',24));


//RegRegisterMethod(TDrawTreeNodes,'EndUpdate',TypeInfo(_T47),NoParams, pointer(28));
RegRegisterMethod(TDrawTreeNodes,'EndUpdate',TypeInfo(_T47),NoParams,  getVMTProcAddr('TDrawTreeNodes','EndUpdate',28));


//RegRegisterMethod(TDrawTreeNodes,'Clear',TypeInfo(_T48),NoParams, pointer(32));
RegRegisterMethod(TDrawTreeNodes,'Clear',TypeInfo(_T48),NoParams,  getVMTProcAddr('TDrawTreeNodes','Clear',32));


//RegRegisterMethod(TDrawTreeNodes,'Delete',TypeInfo(_T49),[TypeInfo(TTreeNode)], pointer(36));
RegRegisterMethod(TDrawTreeNodes,'Delete',TypeInfo(_T49),[TypeInfo(TTreeNode)],  getVMTProcAddr('TDrawTreeNodes','Delete',36));


RegRegisterMethod(TDrawTreeNodes,'GetFirstNode',TypeInfo(_T50),[TypeInfo(TTreeNode)],Addr(TDrawTreeNodes.GetFirstNode));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegRegisterMethod(TDrawTreeNodes,'GetNode',TypeInfo(_T51),[
TypeInfoPointer,TypeInfo(TTreeNode)],Addr(TDrawTreeNodes.GetNode))}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
