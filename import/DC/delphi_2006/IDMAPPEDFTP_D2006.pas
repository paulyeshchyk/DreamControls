{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDMAPPEDFTP_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdTCPServer,
  IdMappedPortTCP,
  IdAssignedNumbers,
  IdThread,
  IdTCPConnection,
  SysUtils,
  IdMappedFTP;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (p0 : TIdMappedFtpThread) of object;

_T1 = function : Boolean of object;

_T2 = procedure (const p0 : Boolean) of object;

_T3 = procedure  of object;

function __DC__GetTIdMappedFtpDataThread__MappedFtpThread(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdMappedFtpDataThread(Instance).MappedFtpThread);
end;

function __DC__GetTIdMappedFtpDataThread__Connection(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdMappedFtpDataThread(Instance).Connection);
end;

function __DC__GetTIdMappedFtpDataThread__OutboundClient(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdMappedFtpDataThread(Instance).OutboundClient);
end;

function __DC__GetTIdMappedFtpDataThread__NetData(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMappedFtpDataThread(Instance).NetData;
end;

procedure __DC__SetTIdMappedFtpDataThread__NetData(Instance : TObject; Params : PVariantArgList);
begin
TIdMappedFtpDataThread(Instance).NetData:=OleVariant(Params^[0]);
end;

function __DC__GetTIdMappedFtpThread__FtpCommand(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMappedFtpThread(Instance).FtpCommand;
end;

procedure __DC__SetTIdMappedFtpThread__FtpCommand(Instance : TObject; Params : PVariantArgList);
begin
TIdMappedFtpThread(Instance).FtpCommand:=OleVariant(Params^[0]);
end;

function __DC__GetTIdMappedFtpThread__FtpParams(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMappedFtpThread(Instance).FtpParams;
end;

procedure __DC__SetTIdMappedFtpThread__FtpParams(Instance : TObject; Params : PVariantArgList);
begin
TIdMappedFtpThread(Instance).FtpParams:=OleVariant(Params^[0]);
end;

function __DC__GetTIdMappedFtpThread__FtpCmdLine(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMappedFtpThread(Instance).FtpCmdLine;
end;

function __DC__GetTIdMappedFtpThread__Host(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMappedFtpThread(Instance).Host;
end;

procedure __DC__SetTIdMappedFtpThread__Host(Instance : TObject; Params : PVariantArgList);
begin
TIdMappedFtpThread(Instance).Host:=OleVariant(Params^[0]);
end;

function __DC__GetTIdMappedFtpThread__OutboundHost(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMappedFtpThread(Instance).OutboundHost;
end;

procedure __DC__SetTIdMappedFtpThread__OutboundHost(Instance : TObject; Params : PVariantArgList);
begin
TIdMappedFtpThread(Instance).OutboundHost:=OleVariant(Params^[0]);
end;

function __DC__GetTIdMappedFtpThread__Port(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMappedFtpThread(Instance).Port;
end;

procedure __DC__SetTIdMappedFtpThread__Port(Instance : TObject; Params : PVariantArgList);
begin
TIdMappedFtpThread(Instance).Port:=OleVariant(Params^[0]);
end;

function __DC__GetTIdMappedFtpThread__OutboundPort(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMappedFtpThread(Instance).OutboundPort;
end;

procedure __DC__SetTIdMappedFtpThread__OutboundPort(Instance : TObject; Params : PVariantArgList);
begin
TIdMappedFtpThread(Instance).OutboundPort:=OleVariant(Params^[0]);
end;

function __DC__GetTIdMappedFtpThread__DataChannelThread(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdMappedFtpThread(Instance).DataChannelThread);
end;

procedure __RegisterProps;
begin
RegisterProperty(TIdMappedFtpDataThread,'MappedFtpThread',__DC__GetTIdMappedFtpDataThread__MappedFtpThread,nil);
RegisterProperty(TIdMappedFtpDataThread,'Connection',__DC__GetTIdMappedFtpDataThread__Connection,nil);
RegisterProperty(TIdMappedFtpDataThread,'OutboundClient',__DC__GetTIdMappedFtpDataThread__OutboundClient,nil);
RegisterProperty(TIdMappedFtpDataThread,'NetData',__DC__GetTIdMappedFtpDataThread__NetData,__DC__SetTIdMappedFtpDataThread__NetData);
RegisterProperty(TIdMappedFtpThread,'FtpCommand',__DC__GetTIdMappedFtpThread__FtpCommand,__DC__SetTIdMappedFtpThread__FtpCommand);
RegisterProperty(TIdMappedFtpThread,'FtpParams',__DC__GetTIdMappedFtpThread__FtpParams,__DC__SetTIdMappedFtpThread__FtpParams);
RegisterProperty(TIdMappedFtpThread,'FtpCmdLine',__DC__GetTIdMappedFtpThread__FtpCmdLine,nil);
RegisterProperty(TIdMappedFtpThread,'Host',__DC__GetTIdMappedFtpThread__Host,__DC__SetTIdMappedFtpThread__Host);
RegisterProperty(TIdMappedFtpThread,'OutboundHost',__DC__GetTIdMappedFtpThread__OutboundHost,__DC__SetTIdMappedFtpThread__OutboundHost);
RegisterProperty(TIdMappedFtpThread,'Port',__DC__GetTIdMappedFtpThread__Port,__DC__SetTIdMappedFtpThread__Port);
RegisterProperty(TIdMappedFtpThread,'OutboundPort',__DC__GetTIdMappedFtpThread__OutboundPort,__DC__SetTIdMappedFtpThread__OutboundPort);
RegisterProperty(TIdMappedFtpThread,'DataChannelThread',__DC__GetTIdMappedFtpThread__DataChannelThread,nil);
end;

const __ConstNames0 : array[0..2] of string = (
'fdcmClient'
,'fdcmPort'
,'fdcmPasv'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,fdcmClient));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,fdcmPort));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,fdcmPasv));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..2] of TClass = (
TIdMappedFTP,
TIdMappedFtpDataThread,
TIdMappedFtpThread
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegisterProc(TIdMappedFtpDataThread,'Create',mtConstructor,TypeInfo(_T0),[
TypeInfo(TIdMappedFtpThread)],Addr(TIdMappedFtpDataThread.Create),cRegister);

//RegRegisterMethod(TIdMappedFtpThread,'ProcessFtpCommand',TypeInfo(_T1),[TypeInfo(Boolean)], pointer(64));
RegRegisterMethod(TIdMappedFtpThread,'ProcessFtpCommand',TypeInfo(_T1),[TypeInfo(Boolean)],  getVMTProcAddr('TIdMappedFtpThread','ProcessFtpCommand',64));


//RegRegisterMethod(TIdMappedFtpThread,'ProcessOutboundDc',TypeInfo(_T2),[TypeInfo(Boolean)], pointer(68));
RegRegisterMethod(TIdMappedFtpThread,'ProcessOutboundDc',TypeInfo(_T2),[TypeInfo(Boolean)],  getVMTProcAddr('TIdMappedFtpThread','ProcessOutboundDc',68));


//RegRegisterMethod(TIdMappedFtpThread,'ProcessDataCommand',TypeInfo(_T3),NoParams, pointer(72));
RegRegisterMethod(TIdMappedFtpThread,'ProcessDataCommand',TypeInfo(_T3),NoParams,  getVMTProcAddr('TIdMappedFtpThread','ProcessDataCommand',72));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
