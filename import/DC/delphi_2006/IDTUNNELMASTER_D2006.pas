{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDTUNNELMASTER_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  SysUtils,
  IdException,
  IdHashCRC,
  IdStack,
  IdCoder,
  IdResourceStrings,
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  SyncObjs,
  IdTCPServer,
  IdTCPClient,
  IdTunnelCommon,
  IdTunnelMaster;
function ConvertTIdHeaderToVariant(var R : TIdHeader) : OleVariant;
function ConvertVariantToTIdHeader(const V : OleVariant) : TIdHeader;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TIdHeader__Wrapper = class(TDCRecordWrapper)
private
fR : TIdHeader;
public
function GetRecordPtr : pointer; override;
published
procedure setCRC16(const val : Word);
function getCRC16 : Word;
property CRC16 : Word read getCRC16 write setCRC16;
procedure setMsgType(const val : Word);
function getMsgType : Word;
property MsgType : Word read getMsgType write setMsgType;
procedure setMsgLen(const val : Word);
function getMsgLen : Word;
property MsgLen : Word read getMsgLen write setMsgLen;
procedure setUserId(const val : Word);
function getUserId : Word;
property UserId : Word read getUserId write setUserId;
procedure setPort(const val : Word);
function getPort : Word;
property Port : Word read getPort write setPort;
end;
type __TIdTunnelMaster__ = class(TIdTunnelMaster);
type
_T0 = procedure (p0 : TIdTunnelMaster) of object;

_T1 = procedure (p0 : TIdPeerThread) of object;

_T2 = procedure (p0 : TIdPeerThread;
const p1 : IDispatch;
var p2 : String) of object;

_T3 = procedure (p0 : TIdPeerThread;
var p1 : String) of object;

_T4 = procedure (p0 : Integer;
p1 : Integer) of object;

_T5 = procedure (p0 : Integer;
var p1 : Integer) of object;

function __TIdHeader__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TIdHeader__Wrapper.setCRC16(const val : Word);
begin
TIdHeader(GetRecordPtr^).CRC16 := val;
end;
function __TIdHeader__Wrapper.getCRC16 : Word;
begin
result := TIdHeader(GetRecordPtr^).CRC16;
end;
procedure __TIdHeader__Wrapper.setMsgType(const val : Word);
begin
TIdHeader(GetRecordPtr^).MsgType := val;
end;
function __TIdHeader__Wrapper.getMsgType : Word;
begin
result := TIdHeader(GetRecordPtr^).MsgType;
end;
procedure __TIdHeader__Wrapper.setMsgLen(const val : Word);
begin
TIdHeader(GetRecordPtr^).MsgLen := val;
end;
function __TIdHeader__Wrapper.getMsgLen : Word;
begin
result := TIdHeader(GetRecordPtr^).MsgLen;
end;
procedure __TIdHeader__Wrapper.setUserId(const val : Word);
begin
TIdHeader(GetRecordPtr^).UserId := val;
end;
function __TIdHeader__Wrapper.getUserId : Word;
begin
result := TIdHeader(GetRecordPtr^).UserId;
end;
procedure __TIdHeader__Wrapper.setPort(const val : Word);
begin
TIdHeader(GetRecordPtr^).Port := val;
end;
function __TIdHeader__Wrapper.getPort : Word;
begin
result := TIdHeader(GetRecordPtr^).Port;
end;
procedure __TIdTunnelMaster__DoTransformSend__Wrapper(__Instance : TIdTunnelMaster;
p0 : TIdPeerThread;
const p1 : IDispatch;
var p2 : String);
var
__p1 : ^TIdHeader;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
__TIdTunnelMaster__(__Instance).DoTransformSend(p0,__p1^,p2);
end;


type __TIdHeader__Wrapper__ = class(__TIdHeader__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TIdHeader__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTIdHeaderToVariant(var R : TIdHeader) : OleVariant;
var
__rw : __TIdHeader__Wrapper__;
begin
__rw := __TIdHeader__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTIdHeader(const V : OleVariant) : TIdHeader;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TIdHeader((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTIdTunnelMaster__Active(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdTunnelMaster(Instance).Active;
end;

procedure __DC__SetTIdTunnelMaster__Active(Instance : TObject; Params : PVariantArgList);
begin
TIdTunnelMaster(Instance).Active:=OleVariant(Params^[0]);
end;

function __DC__GetTIdTunnelMaster__Logger(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdTunnelMaster(Instance).Logger);
end;

procedure __DC__SetTIdTunnelMaster__Logger(Instance : TObject; Params : PVariantArgList);
begin
TIdTunnelMaster(Instance).Logger:=TLogger(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIdTunnelMaster__NumSlaves(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdTunnelMaster(Instance).NumSlaves;
end;

function __DC__GetTIdTunnelMaster__NumServices(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdTunnelMaster(Instance).NumServices;
end;

procedure __RegisterProps;
begin
RegisterProperty(TIdTunnelMaster,'Active',__DC__GetTIdTunnelMaster__Active,__DC__SetTIdTunnelMaster__Active);
RegisterProperty(TIdTunnelMaster,'Logger',__DC__GetTIdTunnelMaster__Logger,__DC__SetTIdTunnelMaster__Logger);
RegisterProperty(TIdTunnelMaster,'NumSlaves',__DC__GetTIdTunnelMaster__NumSlaves,nil);
RegisterProperty(TIdTunnelMaster,'NumServices',__DC__GetTIdTunnelMaster__NumServices,nil);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..2] of TClass = (
MClientThread,
TIdTunnelMaster,
TSlaveData
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegisterProc(MClientThread,'Create',mtConstructor,TypeInfo(_T0),[
TypeInfo(TIdTunnelMaster)],Addr(MClientThread.Create),cRegister);

//RegRegisterMethod(TIdTunnelMaster,'DoTransformRead',TypeInfo(_T1),[TypeInfo(TIdPeerThread)], pointer(100));
RegRegisterMethod(TIdTunnelMaster,'DoTransformRead',TypeInfo(_T1),[TypeInfo(TIdPeerThread)],  getVMTProcAddr('TIdTunnelMaster','DoTransformRead',100));


//RegRegisterMethod(TIdTunnelMaster,'DoTransformSend',TypeInfo(_T2),[TypeInfo(TIdPeerThread),TypeInfo(IDispatch),TypeInfo(String)], pointer(104));
RegRegisterMethod(TIdTunnelMaster,'DoTransformSend',TypeInfo(_T2),[TypeInfo(TIdPeerThread),TypeInfo(IDispatch),TypeInfo(String)],  getVMTProcAddr('TIdTunnelMaster','DoTransformSend',104));


//RegRegisterMethod(TIdTunnelMaster,'DoInterpretMsg',TypeInfo(_T3),[TypeInfo(TIdPeerThread),TypeInfo(String)], pointer(108));
RegRegisterMethod(TIdTunnelMaster,'DoInterpretMsg',TypeInfo(_T3),[TypeInfo(TIdPeerThread),TypeInfo(String)],  getVMTProcAddr('TIdTunnelMaster','DoInterpretMsg',108));


RegRegisterMethod(TIdTunnelMaster,'SetStatistics',TypeInfo(_T4),[
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TIdTunnelMaster.SetStatistics));

RegRegisterMethod(TIdTunnelMaster,'GetStatistics',TypeInfo(_T5),[
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TIdTunnelMaster.GetStatistics));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
RegisterEvent(TypeInfo(TIdSendMsgEvent),[
TypeInfo(TIdPeerThread),
TypeInfo(String)]);

RegisterEvent(TypeInfo(TIdSendMsgEventC),[
TypeInfo(String)]);

{RegisterEvent(TypeInfo(TIdSendTrnEvent),[
TypeInfo(TIdPeerThread),
TypeInfo(IDispatch),
TypeInfo(String)]);}

{RegisterEvent(TypeInfo(TIdSendTrnEventC),[
TypeInfo(IDispatch),
TypeInfo(String)]);}

RegisterEvent(TypeInfo(TIdTunnelEventC),[
TypeInfo(TReceiver)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
