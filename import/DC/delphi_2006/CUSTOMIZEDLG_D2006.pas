{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit CUSTOMIZEDLG_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  Types,
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  Messages,
  SysUtils,
  Variants,
  Classes,
  Graphics,
  Controls,
  Forms,
  Dialogs,
  StdCtrls,
  ActnList,
  CheckLst,
  ComCtrls,
  Menus,
  ExtCtrls,
  ImgList,
  ActnMan,
  ActnCtrls,
  ActnMenus,
  Buttons,
  CustomizeDlg;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TRect__Wrapper = class(TDCRecordWrapper)
private
fR : TRect;
public
function GetRecordPtr : pointer; override;
published
procedure setLeft(const val : Longint);
function getLeft : Longint;
property Left : Longint read getLeft write setLeft;
procedure setTop(const val : Longint);
function getTop : Longint;
property Top : Longint read getTop write setTop;
procedure setRight(const val : Longint);
function getRight : Longint;
property Right : Longint read getRight write setRight;
procedure setBottom(const val : Longint);
function getBottom : Longint;
property Bottom : Longint read getBottom write setBottom;
end;
type
_T0 = procedure  of object;

_T1 = _T0;

_T2 = procedure (p0 : TObject) of object;

_T3 = procedure (p0 : TObject;
var p1 : TDragObject) of object;

_T4 = procedure (p0 : TWinControl;
p1 : Integer;
const p2 : IDispatch;
p3 : TOwnerDrawState) of object;

_T5 = procedure (p0 : TObject;
var p1 : TCloseAction) of object;

_T6 = _T2;

_T7 = _T3;

_T8 = _T2;

_T9 = procedure (p0 : TWinControl;
p1 : Integer;
var p2 : Integer) of object;

_T10 = _T2;

_T11 = _T2;

_T12 = _T2;

_T13 = _T2;

_T14 = _T2;

_T15 = _T2;

_T16 = _T2;

_T17 = _T2;

_T18 = _T2;

_T19 = _T2;

_T20 = _T2;

_T21 = _T2;

_T22 = procedure (p0 : TWinControl;
p1 : Integer;
var p2 : string) of object;

_T23 = _T2;

_T24 = _T2;

_T25 = _T2;

_T26 = _T2;

_T27 = _T2;

_T28 = _T3;

_T29 = _T2;

_T30 = _T0;

_T31 = _T0;

function __TRect__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TRect__Wrapper.setLeft(const val : Longint);
begin
TRect(GetRecordPtr^).Left := val;
end;
function __TRect__Wrapper.getLeft : Longint;
begin
result := TRect(GetRecordPtr^).Left;
end;
procedure __TRect__Wrapper.setTop(const val : Longint);
begin
TRect(GetRecordPtr^).Top := val;
end;
function __TRect__Wrapper.getTop : Longint;
begin
result := TRect(GetRecordPtr^).Top;
end;
procedure __TRect__Wrapper.setRight(const val : Longint);
begin
TRect(GetRecordPtr^).Right := val;
end;
function __TRect__Wrapper.getRight : Longint;
begin
result := TRect(GetRecordPtr^).Right;
end;
procedure __TRect__Wrapper.setBottom(const val : Longint);
begin
TRect(GetRecordPtr^).Bottom := val;
end;
function __TRect__Wrapper.getBottom : Longint;
begin
result := TRect(GetRecordPtr^).Bottom;
end;
procedure __TCustomizeFrm__ActionsListDrawItem__Wrapper(__Instance : TCustomizeFrm;
p0 : TWinControl;
p1 : Integer;
const p2 : IDispatch;
p3 : TOwnerDrawState);
var
__p2 : ^TRect;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
TCustomizeFrm(__Instance).ActionsListDrawItem(p0,p1,__p2^,p3);
end;


type __TRect__Wrapper__ = class(__TRect__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TRect__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTRectToVariant(var R : TRect) : OleVariant;
var
__rw : __TRect__Wrapper__;
begin
__rw := __TRect__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTRect(const V : OleVariant) : TRect;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TRect((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTCustomizeDlg__CustomizeForm(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomizeDlg(Instance).CustomizeForm);
end;

function __DC__GetTCustomizeFrm__ActionManager(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomizeFrm(Instance).ActionManager);
end;

procedure __DC__SetTCustomizeFrm__ActionManager(Instance : TObject; Params : PVariantArgList);
begin
TCustomizeFrm(Instance).ActionManager:=TCustomActionManager(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTCustomizeFrm__ActiveActionList(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TCustomizeFrm(Instance).ActiveActionList);
end;

procedure __DC__SetTCustomizeFrm__ActiveActionList(Instance : TObject; Params : PVariantArgList);
begin
TCustomizeFrm(Instance).ActiveActionList:=TCustomActionList(VarToObject(OleVariant(Params^[0])));
end;

procedure __RegisterProps;
begin
RegisterProperty(TCustomizeDlg,'CustomizeForm',__DC__GetTCustomizeDlg__CustomizeForm,nil);
RegisterProperty(TCustomizeFrm,'ActionManager',__DC__GetTCustomizeFrm__ActionManager,__DC__SetTCustomizeFrm__ActionManager);
RegisterProperty(TCustomizeFrm,'ActiveActionList',__DC__GetTCustomizeFrm__ActiveActionList,__DC__SetTCustomizeFrm__ActiveActionList);
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..1] of TClass = (
TCustomizeDlg,
TCustomizeFrm
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TCustomizeDlg,'SetupDlg',TypeInfo(_T0),NoParams, pointer(48));
RegRegisterMethod(TCustomizeDlg,'SetupDlg',TypeInfo(_T0),NoParams,  getVMTProcAddr('TCustomizeDlg','SetupDlg',48));


RegRegisterMethod(TCustomizeDlg,'Show',TypeInfo(_T1),NoParams,Addr(TCustomizeDlg.Show));

RegRegisterMethod(TCustomizeFrm,'CatListClick',TypeInfo(_T2),[
TypeInfo(TObject)],Addr(TCustomizeFrm.CatListClick));

RegRegisterMethod(TCustomizeFrm,'ActionsListStartDrag',TypeInfo(_T3),[
TypeInfo(TObject),
TypeInfo(TDragObject)],Addr(TCustomizeFrm.ActionsListStartDrag));

RegRegisterMethod(TCustomizeFrm,'ActionsListDrawItem',TypeInfo(_T4),[
TypeInfo(TWinControl),
TypeInfo(Integer),
TypeInfo(IDispatch),
TypeInfo(TOwnerDrawState)],Addr(__TCustomizeFrm__ActionsListDrawItem__Wrapper));

RegRegisterMethod(TCustomizeFrm,'FormClose',TypeInfo(_T5),[
TypeInfo(TObject),
TypeInfo(TCloseAction)],Addr(TCustomizeFrm.FormClose));

RegRegisterMethod(TCustomizeFrm,'CloseBtnClick',TypeInfo(_T6),[
TypeInfo(TObject)],Addr(TCustomizeFrm.CloseBtnClick));

RegRegisterMethod(TCustomizeFrm,'CatListStartDrag',TypeInfo(_T7),[
TypeInfo(TObject),
TypeInfo(TDragObject)],Addr(TCustomizeFrm.CatListStartDrag));

RegRegisterMethod(TCustomizeFrm,'ActionBarListClickCheck',TypeInfo(_T8),[
TypeInfo(TObject)],Addr(TCustomizeFrm.ActionBarListClickCheck));

RegRegisterMethod(TCustomizeFrm,'ActionsListMeasureItem',TypeInfo(_T9),[
TypeInfo(TWinControl),
TypeInfo(Integer),
TypeInfo(Integer)],Addr(TCustomizeFrm.ActionsListMeasureItem));

RegRegisterMethod(TCustomizeFrm,'FormCreate',TypeInfo(_T10),[
TypeInfo(TObject)],Addr(TCustomizeFrm.FormCreate));

RegRegisterMethod(TCustomizeFrm,'ActionsListClick',TypeInfo(_T11),[
TypeInfo(TObject)],Addr(TCustomizeFrm.ActionsListClick));

RegRegisterMethod(TCustomizeFrm,'MenuAnimationStylesChange',TypeInfo(_T12),[
TypeInfo(TObject)],Addr(TCustomizeFrm.MenuAnimationStylesChange));

RegRegisterMethod(TCustomizeFrm,'ResetActnUpdate',TypeInfo(_T13),[
TypeInfo(TObject)],Addr(TCustomizeFrm.ResetActnUpdate));

RegRegisterMethod(TCustomizeFrm,'ResetActnExecute',TypeInfo(_T14),[
TypeInfo(TObject)],Addr(TCustomizeFrm.ResetActnExecute));

RegRegisterMethod(TCustomizeFrm,'ResetUsageDataActnExecute',TypeInfo(_T15),[
TypeInfo(TObject)],Addr(TCustomizeFrm.ResetUsageDataActnExecute));

RegRegisterMethod(TCustomizeFrm,'RecentlyUsedActnExecute',TypeInfo(_T16),[
TypeInfo(TObject)],Addr(TCustomizeFrm.RecentlyUsedActnExecute));

RegRegisterMethod(TCustomizeFrm,'ShowHintsActnExecute',TypeInfo(_T17),[
TypeInfo(TObject)],Addr(TCustomizeFrm.ShowHintsActnExecute));

RegRegisterMethod(TCustomizeFrm,'ShowHintsActnUpdate',TypeInfo(_T18),[
TypeInfo(TObject)],Addr(TCustomizeFrm.ShowHintsActnUpdate));

RegRegisterMethod(TCustomizeFrm,'ShowShortCutsInTipsActnExecute',TypeInfo(_T19),[
TypeInfo(TObject)],Addr(TCustomizeFrm.ShowShortCutsInTipsActnExecute));

RegRegisterMethod(TCustomizeFrm,'RecentlyUsedActnUpdate',TypeInfo(_T20),[
TypeInfo(TObject)],Addr(TCustomizeFrm.RecentlyUsedActnUpdate));

RegRegisterMethod(TCustomizeFrm,'ActionBarListClick',TypeInfo(_T21),[
TypeInfo(TObject)],Addr(TCustomizeFrm.ActionBarListClick));

RegRegisterMethod(TCustomizeFrm,'ActionsListData',TypeInfo(_T22),[
TypeInfo(TWinControl),
TypeInfo(Integer),
TypeInfo(string)],Addr(TCustomizeFrm.ActionsListData));

RegRegisterMethod(TCustomizeFrm,'LargeIconsActnExecute',TypeInfo(_T23),[
TypeInfo(TObject)],Addr(TCustomizeFrm.LargeIconsActnExecute));

RegRegisterMethod(TCustomizeFrm,'ListComboSelect',TypeInfo(_T24),[
TypeInfo(TObject)],Addr(TCustomizeFrm.ListComboSelect));

RegRegisterMethod(TCustomizeFrm,'CaptionOptionsComboChange',TypeInfo(_T25),[
TypeInfo(TObject)],Addr(TCustomizeFrm.CaptionOptionsComboChange));

RegRegisterMethod(TCustomizeFrm,'FormResize',TypeInfo(_T26),[
TypeInfo(TObject)],Addr(TCustomizeFrm.FormResize));

RegRegisterMethod(TCustomizeFrm,'LargeIconsActnUpdate',TypeInfo(_T27),[
TypeInfo(TObject)],Addr(TCustomizeFrm.LargeIconsActnUpdate));

RegRegisterMethod(TCustomizeFrm,'SeparatorBtnStartDrag',TypeInfo(_T28),[
TypeInfo(TObject),
TypeInfo(TDragObject)],Addr(TCustomizeFrm.SeparatorBtnStartDrag));

RegRegisterMethod(TCustomizeFrm,'ApplyToAllActnUpdate',TypeInfo(_T29),[
TypeInfo(TObject)],Addr(TCustomizeFrm.ApplyToAllActnUpdate));

//RegRegisterMethod(TCustomizeFrm,'ClearCatList',TypeInfo(_T30),NoParams, pointer(260));
RegRegisterMethod(TCustomizeFrm,'ClearCatList',TypeInfo(_T30),NoParams,  getVMTProcAddr('TCustomizeFrm','ClearCatList',260));


//RegRegisterMethod(TCustomizeFrm,'UpdateDialog',TypeInfo(_T31),NoParams, pointer(264));
RegRegisterMethod(TCustomizeFrm,'UpdateDialog',TypeInfo(_T31),NoParams,  getVMTProcAddr('TCustomizeFrm','UpdateDialog',264));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
