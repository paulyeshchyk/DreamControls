{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit OPTOSOAPDOMCUSTOM_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  classes,
  dcscript,
  dcsystem,
  dcdreamlib,
  TypInfo,
  IntfInfo,
  InvokeRegistry,
  XMLDoc,
  XMLIntf,
  OPToSOAPDomCustom;
function ConvertTConverterEntryToVariant(var R : TConverterEntry) : OleVariant;
function ConvertVariantToTConverterEntry(const V : OleVariant) : TConverterEntry;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TConverterEntry__Wrapper = class(TDCRecordWrapper)
private
fR : TConverterEntry;
public
function GetRecordPtr : pointer; override;
published
end;
function __TConverterEntry__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
function _TConverterEntry_ : IDispatch;
begin
  result := __TConverterEntry__Wrapper.Create;
end;

type __TConverterEntry__Wrapper__ = class(__TConverterEntry__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TConverterEntry__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTConverterEntryToVariant(var R : TConverterEntry) : OleVariant;
var
__rw : __TConverterEntry__Wrapper__;
begin
__rw := __TConverterEntry__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTConverterEntry(const V : OleVariant) : TConverterEntry;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TConverterEntry((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
procedure __RegisterProps;
begin
end;

function __DC__GetOPToSOAPDomCustom__ConverterRegistry(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(OPToSOAPDomCustom.ConverterRegistry);
end;

procedure __DC__SetOPToSOAPDomCustom__ConverterRegistry(Instance : TObject; Params : PVariantArgList);
begin
TObject(OPToSOAPDomCustom.ConverterRegistry):=(VarToObject(OleVariant(Params^[0])));
end;

var __RegisteredVars : TList;
procedure __RegisterVars;
begin
__RegisteredVars := TList.Create;
__RegisteredVars.Add(RegisterVar('ConverterRegistry',__DC__GetOPToSOAPDomCustom__ConverterRegistry,__DC__SetOPToSOAPDomCustom__ConverterRegistry));
end;

procedure __UnregisterVars;
begin
__RegisteredVars.Free;
end;

procedure __RegisterConsts0;
begin
end;

procedure __UnregisterConsts0;
begin
end;

const ClassList : array[0..0] of TClass = (
TOPToSoapDomCustomRegistry
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'TConverterEntry'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TConverterEntry_)));
end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegRegisterMethod(TOPToSoapDomCustomRegistry,'RegisterCustomConverter',TypeInfo(_T0),[
TypeInfo(TClass),
TypeInfo(string),
TypeInfo(string),
TypeInfo(ICustomConvert)],Addr(TOPToSoapDomCustomRegistry.RegisterCustomConverter))}

{RegRegisterMethod(TOPToSoapDomCustomRegistry,'GetConverter',TypeInfo(_T1),[
TypeInfo(TClass),TypeInfo(ICustomConvert)],Addr(TOPToSoapDomCustomRegistry.GetConverter))}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
__RegisterVars;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnRegisterVars;
__UnregisterProcs;
end.
