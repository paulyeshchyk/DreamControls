{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDMAILBOX_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdBaseComponent,
  IdException,
  IdMessage,
  IdMessageCollection,
  SysUtils,
  IdMailBox;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure  of object;

function __DC__GetTIdMailBox__Attributes(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMailBox(Instance).Attributes;
end;

procedure __DC__SetTIdMailBox__Attributes(Instance : TObject; Params : PVariantArgList);
begin
TIdMailBox(Instance).Attributes:=OleVariant(Params^[0]);
end;

function __DC__GetTIdMailBox__ChangeableFlags(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TIdMessageFlagsSet;
begin
tmp := TIdMailBox(Instance).ChangeableFlags;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTIdMailBox__ChangeableFlags(Instance : TObject; Params : PVariantArgList);
var
  tmp : TIdMessageFlagsSet;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TIdMailBox(Instance).ChangeableFlags:=tmp;
end;

function __DC__GetTIdMailBox__FirstUnseenMsg(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMailBox(Instance).FirstUnseenMsg;
end;

procedure __DC__SetTIdMailBox__FirstUnseenMsg(Instance : TObject; Params : PVariantArgList);
begin
TIdMailBox(Instance).FirstUnseenMsg:=OleVariant(Params^[0]);
end;

function __DC__GetTIdMailBox__Flags(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
  tmp : TIdMessageFlagsSet;
begin
tmp := TIdMailBox(Instance).Flags;
result := VarFromSet(tmp, sizeof(tmp));
end;

procedure __DC__SetTIdMailBox__Flags(Instance : TObject; Params : PVariantArgList);
var
  tmp : TIdMessageFlagsSet;
begin
VarToSet(tmp, sizeof(tmp), Variant(Params^[0]));
TIdMailBox(Instance).Flags:=tmp;
end;

function __DC__GetTIdMailBox__Name(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMailBox(Instance).Name;
end;

procedure __DC__SetTIdMailBox__Name(Instance : TObject; Params : PVariantArgList);
begin
TIdMailBox(Instance).Name:=OleVariant(Params^[0]);
end;

function __DC__GetTIdMailBox__MessageList(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdMailBox(Instance).MessageList);
end;

procedure __DC__SetTIdMailBox__MessageList(Instance : TObject; Params : PVariantArgList);
begin
TIdMailBox(Instance).MessageList:=TIdMessageCollection(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIdMailBox__RecentMsgs(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMailBox(Instance).RecentMsgs;
end;

procedure __DC__SetTIdMailBox__RecentMsgs(Instance : TObject; Params : PVariantArgList);
begin
TIdMailBox(Instance).RecentMsgs:=OleVariant(Params^[0]);
end;

function __DC__GetTIdMailBox__State(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMailBox(Instance).State;
end;

procedure __DC__SetTIdMailBox__State(Instance : TObject; Params : PVariantArgList);
begin
TIdMailBox(Instance).State:=OleVariant(Params^[0]);
end;

function __DC__GetTIdMailBox__TotalMsgs(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMailBox(Instance).TotalMsgs;
end;

procedure __DC__SetTIdMailBox__TotalMsgs(Instance : TObject; Params : PVariantArgList);
begin
TIdMailBox(Instance).TotalMsgs:=OleVariant(Params^[0]);
end;

function __DC__GetTIdMailBox__UIDNext(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMailBox(Instance).UIDNext;
end;

procedure __DC__SetTIdMailBox__UIDNext(Instance : TObject; Params : PVariantArgList);
begin
TIdMailBox(Instance).UIDNext:=OleVariant(Params^[0]);
end;

function __DC__GetTIdMailBox__UIDValidity(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMailBox(Instance).UIDValidity;
end;

procedure __DC__SetTIdMailBox__UIDValidity(Instance : TObject; Params : PVariantArgList);
begin
TIdMailBox(Instance).UIDValidity:=OleVariant(Params^[0]);
end;

function __DC__GetTIdMailBox__UnseenMsgs(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdMailBox(Instance).UnseenMsgs;
end;

procedure __DC__SetTIdMailBox__UnseenMsgs(Instance : TObject; Params : PVariantArgList);
begin
TIdMailBox(Instance).UnseenMsgs:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TIdMailBox,'Attributes',__DC__GetTIdMailBox__Attributes,__DC__SetTIdMailBox__Attributes);
RegisterProperty(TIdMailBox,'ChangeableFlags',__DC__GetTIdMailBox__ChangeableFlags,__DC__SetTIdMailBox__ChangeableFlags);
RegisterProperty(TIdMailBox,'FirstUnseenMsg',__DC__GetTIdMailBox__FirstUnseenMsg,__DC__SetTIdMailBox__FirstUnseenMsg);
RegisterProperty(TIdMailBox,'Flags',__DC__GetTIdMailBox__Flags,__DC__SetTIdMailBox__Flags);
RegisterProperty(TIdMailBox,'Name',__DC__GetTIdMailBox__Name,__DC__SetTIdMailBox__Name);
RegisterProperty(TIdMailBox,'MessageList',__DC__GetTIdMailBox__MessageList,__DC__SetTIdMailBox__MessageList);
RegisterProperty(TIdMailBox,'RecentMsgs',__DC__GetTIdMailBox__RecentMsgs,__DC__SetTIdMailBox__RecentMsgs);
RegisterProperty(TIdMailBox,'State',__DC__GetTIdMailBox__State,__DC__SetTIdMailBox__State);
RegisterProperty(TIdMailBox,'TotalMsgs',__DC__GetTIdMailBox__TotalMsgs,__DC__SetTIdMailBox__TotalMsgs);
RegisterProperty(TIdMailBox,'UIDNext',__DC__GetTIdMailBox__UIDNext,__DC__SetTIdMailBox__UIDNext);
RegisterProperty(TIdMailBox,'UIDValidity',__DC__GetTIdMailBox__UIDValidity,__DC__SetTIdMailBox__UIDValidity);
RegisterProperty(TIdMailBox,'UnseenMsgs',__DC__GetTIdMailBox__UnseenMsgs,__DC__SetTIdMailBox__UnseenMsgs);
end;

const __ConstNames0 : array[0..5] of string = (
'msReadWrite'
,'msReadOnly'
,'maNoinferiors'
,'maNoselect'
,'maMarked'
,'maUnmarked'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,msReadWrite));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,msReadOnly));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,maNoinferiors));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,maNoselect));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,maMarked));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,maUnmarked));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..0] of TClass = (
TIdMailBox
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TIdMailBox,'Clear',TypeInfo(_T0),NoParams, pointer(48));
RegRegisterMethod(TIdMailBox,'Clear',TypeInfo(_T0),NoParams,  getVMTProcAddr('TIdMailBox','Clear',48));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
