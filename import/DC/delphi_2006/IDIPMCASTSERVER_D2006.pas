{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDIPMCASTSERVER_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdIPMCastBase,
  IdComponent,
  IdSocketHandle,
  IdIPMCastServer;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (const p0 : Boolean) of object;

_T1 = procedure (const p0 : Byte) of object;

_T2 = procedure (p0 : TIdSocketHandle;
const p1 : Byte) of object;

_T3 = procedure (p0 : string) of object;

_T4 = procedure (var p0;
const p1 : Integer) of object;

function __DC__GetTIdIPMCastServer__Binding(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdIPMCastServer(Instance).Binding);
end;

procedure __RegisterProps;
begin
RegisterProperty(TIdIPMCastServer,'Binding',__DC__GetTIdIPMCastServer__Binding,nil);
end;

const __ConstNames0 : array[0..0] of string = (
'DEF_IMP_TTL'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,DEF_IMP_TTL));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..0] of TClass = (
TIdIPMCastServer
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
//RegRegisterMethod(TIdIPMCastServer,'SetLoopback',TypeInfo(_T0),[TypeInfo(Boolean)], pointer(84));
RegRegisterMethod(TIdIPMCastServer,'SetLoopback',TypeInfo(_T0),[TypeInfo(Boolean)],  getVMTProcAddr('TIdIPMCastServer','SetLoopback',84));


//RegRegisterMethod(TIdIPMCastServer,'SetTTL',TypeInfo(_T1),[TypeInfo(Byte)], pointer(88));
RegRegisterMethod(TIdIPMCastServer,'SetTTL',TypeInfo(_T1),[TypeInfo(Byte)],  getVMTProcAddr('TIdIPMCastServer','SetTTL',88));


//RegRegisterMethod(TIdIPMCastServer,'SetTTLOption',TypeInfo(_T2),[TypeInfo(TIdSocketHandle),TypeInfo(Byte)], pointer(92));
RegRegisterMethod(TIdIPMCastServer,'SetTTLOption',TypeInfo(_T2),[TypeInfo(TIdSocketHandle),TypeInfo(Byte)],  getVMTProcAddr('TIdIPMCastServer','SetTTLOption',92));


RegRegisterMethod(TIdIPMCastServer,'Send',TypeInfo(_T3),[
TypeInfo(string)],Addr(TIdIPMCastServer.Send));

RegRegisterMethod(TIdIPMCastServer,'SendBuffer',TypeInfo(_T4),[
TypeInfoUntyped,
TypeInfo(Integer)],Addr(TIdIPMCastServer.SendBuffer));

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
