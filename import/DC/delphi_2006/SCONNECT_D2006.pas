{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit SCONNECT_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  VarUtils,
  Variants,
  Windows,
  Messages,
  Classes,
  SysUtils,
  TDMConnect,
  ScktComp,
  WinSock,
  WinInet,
  ComObj,
  TDSConnect;
function ConvertTGUIDToVariant(var R : TGUID) : OleVariant;
function ConvertVariantToTGUID(const V : OleVariant) : TGUID;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TGUID__Wrapper = class(TDCRecordWrapper)
private
fR : TGUID;
public
function GetRecordPtr : pointer; override;
published
procedure setD1(const val : LongWord);
function getD1 : LongWord;
property D1 : LongWord read getD1 write setD1;
procedure setD2(const val : Word);
function getD2 : Word;
property D2 : Word read getD2 write setD2;
procedure setD3(const val : Word);
function getD3 : Word;
property D3 : Word read getD3 write setD3;
end;
type __TCustomDataBlockInterpreter__ = class(TCustomDataBlockInterpreter);
type
_T0 = function : Boolean of object;

_T1 = procedure (p0 : TStringList) of object;

_T2 = procedure (p0 : TDataDispatch) of object;

_T3 = _T2;

_T4 = procedure (p0 : Integer) of object;

_T5 = function (p0 : Integer;
const p1 : IDispatch;
p2 : Pointer;
p3 : Integer;
p4 : Integer;
p5 : Pointer): HResult of object;

_T6 = function (p0 : Integer;
p1 : Integer;
const p2 : IDispatch;
p3 : Integer;
p4 : Word;
var p5 : Word;
p6 : Pointer;
p7 : Pointer;
p8 : Pointer): HResult of object;

_T7 = function : OleVariant of object;

_T8 = function (const p0 : IDispatch): OleVariant of object;

_T9 = function (const p0 : string): OleVariant of object;

_T10 = function (const p0 : OleVariant): Integer of object;

{_T11 = function (p0 : Integer): IDispatch of object;}

{_T12 = procedure (p0 : Integer;
const p1 : IDispatch) of object;}

_T13 = _T4;

_T14 = function (const p0 : IDispatch): Boolean of object;

_T15 = function (p0 : string): OleVariant of object;

{_T16 = procedure (const p0 : IDataBlock) of object;}

_T17 = procedure  of object;

{_T18 = function (p0 : Integer;
const p1 : IDataBlock): Boolean of object;}

{_T19 = procedure (p0 : ISendDataBlock;
p1 : string) of object;}

_T20 = procedure (p0 : TCustomDataBlockInterpreter;
p1 : Integer) of object;

_T21 = _T17;

_T22 = _T17;

_T23 = _T17;

{_T24 = function : ITransport of object;}

_T25 = procedure (p0 : Exception) of object;

_T26 = function : TCustomDataBlockInterpreter of object;

_T27 = _T7;

{_T28 = procedure (p0 : THandle;
p1 : ITransport) of object;}

function __TGUID__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TGUID__Wrapper.setD1(const val : LongWord);
begin
TGUID(GetRecordPtr^).D1 := val;
end;
function __TGUID__Wrapper.getD1 : LongWord;
begin
result := TGUID(GetRecordPtr^).D1;
end;
procedure __TGUID__Wrapper.setD2(const val : Word);
begin
TGUID(GetRecordPtr^).D2 := val;
end;
function __TGUID__Wrapper.getD2 : Word;
begin
result := TGUID(GetRecordPtr^).D2;
end;
procedure __TGUID__Wrapper.setD3(const val : Word);
begin
TGUID(GetRecordPtr^).D3 := val;
end;
function __TGUID__Wrapper.getD3 : Word;
begin
result := TGUID(GetRecordPtr^).D3;
end;
function __TCustomDataBlockInterpreter__CallGetIDsOfNames__Wrapper(__Instance : TCustomDataBlockInterpreter;
p0 : Integer;
const p1 : IDispatch;
p2 : Pointer;
p3 : Integer;
p4 : Integer;
p5 : Pointer): HResult;
var
__p1 : ^TGUID;
__i1 : IDispatch;
begin
if p1 = nil then exit;
__p1 := (p1 as IDCRecordWrapper).GetRecordPtr;
result := __TCustomDataBlockInterpreter__(__Instance).CallGetIDsOfNames(p0,__p1^,p2,p3,p4,p5);
end;

function __TCustomDataBlockInterpreter__CallInvoke__Wrapper(__Instance : TCustomDataBlockInterpreter;
p0 : Integer;
p1 : Integer;
const p2 : IDispatch;
p3 : Integer;
p4 : Word;
var p5 : Word;
p6 : Pointer;
p7 : Pointer;
p8 : Pointer): HResult;
var
__p2 : ^TGUID;
__i2 : IDispatch;
begin
if p2 = nil then exit;
__p2 := (p2 as IDCRecordWrapper).GetRecordPtr;
result := __TCustomDataBlockInterpreter__(__Instance).CallInvoke(p0,p1,__p2^,p3,p4,p5,p6,p7,p8);
end;

function __TCustomDataBlockInterpreter__InternalCreateObject__Wrapper(__Instance : TCustomDataBlockInterpreter;
const p0 : IDispatch): OleVariant;
var
__p0 : ^TGUID;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := __TCustomDataBlockInterpreter__(__Instance).InternalCreateObject(__p0^);
end;

function __TCustomDataBlockInterpreter__CanCreateObject__Wrapper(__Instance : TCustomDataBlockInterpreter;
const p0 : IDispatch): Boolean;
var
__p0 : ^TGUID;
__i0 : IDispatch;
begin
if p0 = nil then exit;
__p0 := (p0 as IDCRecordWrapper).GetRecordPtr;
result := __TCustomDataBlockInterpreter__(__Instance).CanCreateObject(__p0^);
end;


type __TGUID__Wrapper__ = class(__TGUID__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TGUID__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTGUIDToVariant(var R : TGUID) : OleVariant;
var
__rw : __TGUID__Wrapper__;
begin
__rw := __TGUID__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTGUID(const V : OleVariant) : TGUID;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TGUID((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTSocketTransport__Host(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSocketTransport(Instance).Host;
end;

procedure __DC__SetTSocketTransport__Host(Instance : TObject; Params : PVariantArgList);
begin
TSocketTransport(Instance).Host:=OleVariant(Params^[0]);
end;

function __DC__GetTSocketTransport__Address(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSocketTransport(Instance).Address;
end;

procedure __DC__SetTSocketTransport__Address(Instance : TObject; Params : PVariantArgList);
begin
TSocketTransport(Instance).Address:=OleVariant(Params^[0]);
end;

function __DC__GetTSocketTransport__Port(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSocketTransport(Instance).Port;
end;

procedure __DC__SetTSocketTransport__Port(Instance : TObject; Params : PVariantArgList);
begin
TSocketTransport(Instance).Port:=OleVariant(Params^[0]);
end;

function __DC__GetTSocketTransport__Socket(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TSocketTransport(Instance).Socket);
end;

procedure __DC__SetTSocketTransport__Socket(Instance : TObject; Params : PVariantArgList);
begin
TSocketTransport(Instance).Socket:=TCustomWinSocket(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTSocketTransport__InterceptGUID(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TSocketTransport(Instance).InterceptGUID;
end;

procedure __DC__SetTSocketTransport__InterceptGUID(Instance : TObject; Params : PVariantArgList);
begin
TSocketTransport(Instance).InterceptGUID:=OleVariant(Params^[0]);
end;

function __DC__GetTTransportThread__Semaphore(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TTransportThread(Instance).Semaphore;
end;

procedure __RegisterProps;
begin
RegisterProperty(TSocketTransport,'Host',__DC__GetTSocketTransport__Host,__DC__SetTSocketTransport__Host);
RegisterProperty(TSocketTransport,'Address',__DC__GetTSocketTransport__Address,__DC__SetTSocketTransport__Address);
RegisterProperty(TSocketTransport,'Port',__DC__GetTSocketTransport__Port,__DC__SetTSocketTransport__Port);
RegisterProperty(TSocketTransport,'Socket',__DC__GetTSocketTransport__Socket,__DC__SetTSocketTransport__Socket);
RegisterProperty(TSocketTransport,'InterceptGUID',__DC__GetTSocketTransport__InterceptGUID,__DC__SetTSocketTransport__InterceptGUID);
RegisterProperty(TTransportThread,'Semaphore',__DC__GetTTransportThread__Semaphore,nil);
end;

const __ConstNames0 : array[0..14] of string = (
'CallSig'
,'ResultSig'
,'asError'
,'asInvoke'
,'asGetID'
,'asCreateObject'
,'asFreeObject'
,'asGetServers'
,'asGetGUID'
,'asGetAppServers'
,'asSoapCommand'
,'asMask'
,'vfByRef'
,'vfVariant'
,'THREAD_SENDSTREAM'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,CallSig));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,ResultSig));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,asError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,asInvoke));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,asGetID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,asCreateObject));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,asFreeObject));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,asGetServers));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,asGetGUID));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,asGetAppServers));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,asSoapCommand));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,asMask));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,vfByRef));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,vfVariant));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,THREAD_SENDSTREAM));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..11] of TClass = (
EInterpreterError,
ESocketConnectionError,
TCustomDataBlockInterpreter,
TDataBlock,
TDataBlockInterpreter,
TDataDispatch,
TPacketInterceptFactory,
TSocketConnection,
TSocketTransport,
TStreamedConnection,
TTransportThread,
TWebConnection
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..1] of string = (
'LoadWinSock2'
,'GetPacketInterceptorList'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
RegisterProc(nil,MethodNames[0],mtProc,TypeInfo(_T0),[TypeInfo(Boolean)],Addr(LoadWinSock2),cRegister);

RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T1),[
TypeInfo(TStringList)],Addr(GetPacketInterceptorList),cRegister);

//RegRegisterMethod(TCustomDataBlockInterpreter,'AddDispatch',TypeInfo(_T2),[TypeInfo(TDataDispatch)], pointer(0));
RegRegisterMethod(TCustomDataBlockInterpreter,'AddDispatch',TypeInfo(_T2),[TypeInfo(TDataDispatch)],  getVMTProcAddr('TCustomDataBlockInterpreter','AddDispatch',0));


//RegRegisterMethod(TCustomDataBlockInterpreter,'RemoveDispatch',TypeInfo(_T3),[TypeInfo(TDataDispatch)], pointer(4));
RegRegisterMethod(TCustomDataBlockInterpreter,'RemoveDispatch',TypeInfo(_T3),[TypeInfo(TDataDispatch)],  getVMTProcAddr('TCustomDataBlockInterpreter','RemoveDispatch',4));


//RegRegisterMethod(TCustomDataBlockInterpreter,'CallFreeObject',TypeInfo(_T4),[TypeInfo(Integer)], pointer(8));
RegRegisterMethod(TCustomDataBlockInterpreter,'CallFreeObject',TypeInfo(_T4),[TypeInfo(Integer)],  getVMTProcAddr('TCustomDataBlockInterpreter','CallFreeObject',8));


RegisterProc(TCustomDataBlockInterpreter,'CallGetIDsOfNames',mtMethod,TypeInfo(_T5),[
TypeInfo(Integer),
TypeInfo(IDispatch),
TypeInfoPointer,
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfoPointer,TypeInfo(HResult)], pointer(12),cRegister);

RegisterProc(TCustomDataBlockInterpreter,'CallInvoke',mtMethod,TypeInfo(_T6),[
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfo(IDispatch),
TypeInfo(Integer),
TypeInfo(Word),
TypeInfo(Word),
TypeInfoPointer,
TypeInfoPointer,
TypeInfoPointer,TypeInfo(HResult)], pointer(16),cRegister);

//RegRegisterMethod(TCustomDataBlockInterpreter,'CallGetServerList',TypeInfo(_T7),[TypeInfo(OleVariant)], pointer(20));
RegRegisterMethod(TCustomDataBlockInterpreter,'CallGetServerList',TypeInfo(_T7),[TypeInfo(OleVariant)],  getVMTProcAddr('TCustomDataBlockInterpreter','CallGetServerList',20));


//RegRegisterMethod(TCustomDataBlockInterpreter,'InternalCreateObject',TypeInfo(_T8),[TypeInfo(IDispatch),TypeInfo(OleVariant)], pointer(24));
RegRegisterMethod(TCustomDataBlockInterpreter,'InternalCreateObject',TypeInfo(_T8),[TypeInfo(IDispatch),TypeInfo(OleVariant)],  getVMTProcAddr('TCustomDataBlockInterpreter','InternalCreateObject',24));


//RegRegisterMethod(TCustomDataBlockInterpreter,'CreateObject',TypeInfo(_T9),[TypeInfo(string),TypeInfo(OleVariant)], pointer(28));
RegRegisterMethod(TCustomDataBlockInterpreter,'CreateObject',TypeInfo(_T9),[TypeInfo(string),TypeInfo(OleVariant)],  getVMTProcAddr('TCustomDataBlockInterpreter','CreateObject',28));


//RegRegisterMethod(TCustomDataBlockInterpreter,'StoreObject',TypeInfo(_T10),[TypeInfo(OleVariant),TypeInfo(Integer)], pointer(32));
RegRegisterMethod(TCustomDataBlockInterpreter,'StoreObject',TypeInfo(_T10),[TypeInfo(OleVariant),TypeInfo(Integer)],  getVMTProcAddr('TCustomDataBlockInterpreter','StoreObject',32));


//RegRegisterMethod(TCustomDataBlockInterpreter,'ReleaseObject',TypeInfo(_T13),[TypeInfo(Integer)], pointer(44));
RegRegisterMethod(TCustomDataBlockInterpreter,'ReleaseObject',TypeInfo(_T13),[TypeInfo(Integer)],  getVMTProcAddr('TCustomDataBlockInterpreter','ReleaseObject',44));


//RegRegisterMethod(TCustomDataBlockInterpreter,'CanCreateObject',TypeInfo(_T14),[TypeInfo(IDispatch),TypeInfo(Boolean)], pointer(48));
RegRegisterMethod(TCustomDataBlockInterpreter,'CanCreateObject',TypeInfo(_T14),[TypeInfo(IDispatch),TypeInfo(Boolean)],  getVMTProcAddr('TCustomDataBlockInterpreter','CanCreateObject',48));


//RegRegisterMethod(TCustomDataBlockInterpreter,'CallCreateObject',TypeInfo(_T15),[TypeInfo(string),TypeInfo(OleVariant)], pointer(52));
RegRegisterMethod(TCustomDataBlockInterpreter,'CallCreateObject',TypeInfo(_T15),[TypeInfo(string),TypeInfo(OleVariant)],  getVMTProcAddr('TCustomDataBlockInterpreter','CallCreateObject',52));


RegisterProc(TDataBlock,'Create',mtConstructor,TypeInfo(_T17),NoParams,Addr(TDataBlock.Create),cRegister);

RegisterProc(TDataDispatch,'Create',mtConstructor,TypeInfo(_T20),[
TypeInfo(TCustomDataBlockInterpreter),
TypeInfo(Integer)],Addr(TDataDispatch.Create),cRegister);

RegisterProc(TSocketTransport,'Create',mtConstructor,TypeInfo(_T21),NoParams,Addr(TSocketTransport.Create),cRegister);

//RegRegisterMethod(TStreamedConnection,'InternalOpen',TypeInfo(_T22),NoParams, pointer(100));
RegRegisterMethod(TStreamedConnection,'InternalOpen',TypeInfo(_T22),NoParams,  getVMTProcAddr('TStreamedConnection','InternalOpen',100));


//RegRegisterMethod(TStreamedConnection,'InternalClose',TypeInfo(_T23),NoParams, pointer(104));
RegRegisterMethod(TStreamedConnection,'InternalClose',TypeInfo(_T23),NoParams,  getVMTProcAddr('TStreamedConnection','InternalClose',104));


//RegRegisterMethod(TStreamedConnection,'DoError',TypeInfo(_T25),[TypeInfo(Exception)], pointer(112));
RegRegisterMethod(TStreamedConnection,'DoError',TypeInfo(_T25),[TypeInfo(Exception)],  getVMTProcAddr('TStreamedConnection','DoError',112));


//RegRegisterMethod(TStreamedConnection,'GetInterpreter',TypeInfo(_T26),[TypeInfo(TCustomDataBlockInterpreter)], pointer(116));
RegRegisterMethod(TStreamedConnection,'GetInterpreter',TypeInfo(_T26),[TypeInfo(TCustomDataBlockInterpreter)],  getVMTProcAddr('TStreamedConnection','GetInterpreter',116));


//RegRegisterMethod(TStreamedConnection,'GetInterceptorList',TypeInfo(_T27),[TypeInfo(OleVariant)], pointer(120));
RegRegisterMethod(TStreamedConnection,'GetInterceptorList',TypeInfo(_T27),[TypeInfo(OleVariant)],  getVMTProcAddr('TStreamedConnection','GetInterceptorList',120));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegRegisterMethod(TCustomDataBlockInterpreter,'LockObject',TypeInfo(_T11),[
TypeInfo(Integer),TypeInfo(IDispatch)], pointer(36))}

{RegRegisterMethod(TCustomDataBlockInterpreter,'UnlockObject',TypeInfo(_T12),[
TypeInfo(Integer),
TypeInfo(IDispatch)], pointer(40))}

{RegRegisterMethod(TCustomDataBlockInterpreter,'InterpretData',TypeInfo(_T16),[
TypeInfo(IDataBlock)], pointer(56))}

{RegRegisterMethod(TDataBlockInterpreter,'DoCustomAction',TypeInfo(_T18),[
TypeInfo(Integer),
TypeInfo(IDataBlock),TypeInfo(Boolean)], pointer(60))}

{RegisterProc(TDataBlockInterpreter,'Create',mtConstructor,TypeInfo(_T19),[
TypeInfo(ISendDataBlock),
TypeInfo(string)],Addr(TDataBlockInterpreter.Create),cRegister)}

{RegRegisterMethod(TStreamedConnection,'CreateTransport',TypeInfo(_T24),[TypeInfo(ITransport)], pointer(108))}

{RegisterProc(TTransportThread,'Create',mtConstructor,TypeInfo(_T28),[
TypeInfo(THandle),
TypeInfo(ITransport)], pointer(8),cRegister)}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
