{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit SOAPHTTPTRANS_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  SysUtils,
  Classes,
  WebNode,
  WSDLNode,
  Types,
  IntfInfo,
  WSDLIntf,
  SOAPAttachIntf,
  WinSock,
  WinInet,
  SOAPHTTPTrans;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type
_T0 = procedure (const p0 : string;
p1 : Integer;
p2 : Integer) of object;

_T1 = procedure (const p0 : string;
const p1 : Array of Const;
p2 : Integer;
p3 : Integer) of object;

_T2 = function : THTTPReqResp of object;

_T3 = procedure  of object;

_T4 = procedure (p0 : Boolean;
p1 : Boolean) of object;

_T5 = procedure (p0 : Boolean) of object;

_T6 = function (const p0 : TStream): Integer of object;

_T7 = function : Integer of object;

_T8 = procedure (p0 : Integer;
p1 : TStream;
p2 : Boolean) of object;

_T9 = procedure (p0 : TStream) of object;

_T11 = procedure (const p0 : string;
p1 : TStream) of object;

procedure __THTTPReqResp__Check__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
1:
begin
THTTPReqResp(__Instance).Check(OleVariant(pargs^[0]));
end;
2:
begin
THTTPReqResp(__Instance).Check(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

procedure __THTTPReqResp__Receive__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
2:
begin
THTTPReqResp(__Instance).Receive(OleVariant(pargs^[1]),TStream(VarToObject(OleVariant(pargs^[0]))));
end;
3:
begin
THTTPReqResp(__Instance).Receive(OleVariant(pargs^[2]),TStream(VarToObject(OleVariant(pargs^[1]))),OleVariant(pargs^[0]));
end;
end
end;

function __DC__GetESOAPHTTPException__StatusCode(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := ESOAPHTTPException(Instance).StatusCode;
end;

procedure __DC__SetESOAPHTTPException__StatusCode(Instance : TObject; Params : PVariantArgList);
begin
ESOAPHTTPException(Instance).StatusCode:=OleVariant(Params^[0]);
end;

function __DC__GetTHTTPReqResp__URL(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := THTTPReqResp(Instance).URL;
end;

procedure __DC__SetTHTTPReqResp__URL(Instance : TObject; Params : PVariantArgList);
begin
THTTPReqResp(Instance).URL:=OleVariant(Params^[0]);
end;

function __DC__GetTHTTPReqResp__SOAPAction(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := THTTPReqResp(Instance).SOAPAction;
end;

procedure __DC__SetTHTTPReqResp__SOAPAction(Instance : TObject; Params : PVariantArgList);
begin
THTTPReqResp(Instance).SOAPAction:=OleVariant(Params^[0]);
end;

function __DC__GetTHTTPReqResp__ConnectTimeout(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := THTTPReqResp(Instance).ConnectTimeout;
end;

procedure __DC__SetTHTTPReqResp__ConnectTimeout(Instance : TObject; Params : PVariantArgList);
begin
THTTPReqResp(Instance).ConnectTimeout:=OleVariant(Params^[0]);
end;

function __DC__GetTHTTPReqResp__SendTimeout(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := THTTPReqResp(Instance).SendTimeout;
end;

procedure __DC__SetTHTTPReqResp__SendTimeout(Instance : TObject; Params : PVariantArgList);
begin
THTTPReqResp(Instance).SendTimeout:=OleVariant(Params^[0]);
end;

function __DC__GetTHTTPReqResp__ReceiveTimeout(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := THTTPReqResp(Instance).ReceiveTimeout;
end;

procedure __DC__SetTHTTPReqResp__ReceiveTimeout(Instance : TObject; Params : PVariantArgList);
begin
THTTPReqResp(Instance).ReceiveTimeout:=OleVariant(Params^[0]);
end;

function __DC__GetTHTTPReqResp__MaxSinglePostSize(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := THTTPReqResp(Instance).MaxSinglePostSize;
end;

procedure __DC__SetTHTTPReqResp__MaxSinglePostSize(Instance : TObject; Params : PVariantArgList);
begin
THTTPReqResp(Instance).MaxSinglePostSize:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(ESOAPHTTPException,'StatusCode',__DC__GetESOAPHTTPException__StatusCode,__DC__SetESOAPHTTPException__StatusCode);
RegisterProperty(THTTPReqResp,'URL',__DC__GetTHTTPReqResp__URL,__DC__SetTHTTPReqResp__URL);
RegisterProperty(THTTPReqResp,'SOAPAction',__DC__GetTHTTPReqResp__SOAPAction,__DC__SetTHTTPReqResp__SOAPAction);
RegisterProperty(THTTPReqResp,'ConnectTimeout',__DC__GetTHTTPReqResp__ConnectTimeout,__DC__SetTHTTPReqResp__ConnectTimeout);
RegisterProperty(THTTPReqResp,'SendTimeout',__DC__GetTHTTPReqResp__SendTimeout,__DC__SetTHTTPReqResp__SendTimeout);
RegisterProperty(THTTPReqResp,'ReceiveTimeout',__DC__GetTHTTPReqResp__ReceiveTimeout,__DC__SetTHTTPReqResp__ReceiveTimeout);
RegisterProperty(THTTPReqResp,'MaxSinglePostSize',__DC__GetTHTTPReqResp__MaxSinglePostSize,__DC__SetTHTTPReqResp__MaxSinglePostSize);
end;

const __ConstNames0 : array[0..3] of string = (
'soNoValueForEmptySOAPAction'
,'soIgnoreInvalidCerts'
,'soNoSOAPActionHeader'
,'soAutoCheckAccessPointViaUDDI'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,soNoValueForEmptySOAPAction));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,soIgnoreInvalidCerts));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,soNoSOAPActionHeader));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,soAutoCheckAccessPointViaUDDI));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..1] of TClass = (
ESOAPHTTPException,
THTTPReqResp
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
procedure _mreg_0;
begin
RegisterProc(ESOAPHTTPException,'Create',mtConstructor,TypeInfo(_T0),[
TypeInfo(string),
TypeInfo(Integer),
TypeInfo(Integer)],Addr(ESOAPHTTPException.Create),cRegister);

RegisterProc(ESOAPHTTPException,'CreateFmt',mtConstructor,TypeInfo(_T1),[
TypeInfo(string),
TypeInfoArrayOfConst,
TypeInfo(Integer),
TypeInfo(Integer)],Addr(ESOAPHTTPException.CreateFmt),cRegister);

RegRegisterMethod(THTTPReqResp,'GetHTTPReqResp',TypeInfo(_T2),[TypeInfo(THTTPReqResp)],Addr(THTTPReqResp.GetHTTPReqResp));

RegRegisterMethod(THTTPReqResp,'CheckContentType',TypeInfo(_T3),NoParams,Addr(THTTPReqResp.CheckContentType));

RegisterProc(THTTPReqResp,'Check',mtScriptMethod,TypeInfo(_T4),[
TypeInfo(Boolean),
TypeInfo(Boolean)],Addr(__THTTPReqResp__Check__Wrapper),cRegister);

RegRegisterMethod(THTTPReqResp,'Connect',TypeInfo(_T5),[
TypeInfo(Boolean)],Addr(THTTPReqResp.Connect));

//RegRegisterMethod(THTTPReqResp,'Send',TypeInfo(_T6),[TypeInfo(TStream),TypeInfo(Integer)], pointer(48));
RegRegisterMethod(THTTPReqResp,'Send',TypeInfo(_T6),[TypeInfo(TStream),TypeInfo(Integer)],  getVMTProcAddr('THTTPReqResp','Send',48));


//RegRegisterMethod(THTTPReqResp,'SendGet',TypeInfo(_T7),[TypeInfo(Integer)], pointer(52));
RegRegisterMethod(THTTPReqResp,'SendGet',TypeInfo(_T7),[TypeInfo(Integer)],  getVMTProcAddr('THTTPReqResp','SendGet',52));


RegisterProc(THTTPReqResp,'Receive',mtScriptMethod,TypeInfo(_T8),[
TypeInfo(Integer),
TypeInfo(TStream),
TypeInfo(Boolean)],Addr(__THTTPReqResp__Receive__Wrapper),cRegister);

//RegRegisterMethod(THTTPReqResp,'Get',TypeInfo(_T9),[TypeInfo(TStream)], pointer(60));
RegRegisterMethod(THTTPReqResp,'Get',TypeInfo(_T9),[TypeInfo(TStream)],  getVMTProcAddr('THTTPReqResp','Get',60));


//RegRegisterMethod(THTTPReqResp,'Execute',TypeInfo(_T11),[TypeInfo(string),TypeInfo(TStream)], pointer(64));
RegRegisterMethod(THTTPReqResp,'Execute',TypeInfo(_T11),[TypeInfo(string),TypeInfo(TStream)],  getVMTProcAddr('THTTPReqResp','Execute',64));


end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
_mreg_0;
RegisterEvent(TypeInfo(TBeforePostEvent),[
TypeInfo(THTTPReqResp),
TypeInfoPointer]);

RegisterEvent(TypeInfo(TPostingDataEvent),[
TypeInfo(Integer),
TypeInfo(Integer)]);

RegisterEvent(TypeInfo(TReceivingDataEvent),[
TypeInfo(Integer),
TypeInfo(Integer)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
end.
