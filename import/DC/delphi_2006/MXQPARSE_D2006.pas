{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit MXQPARSE_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  dcscript,
  dcsystem,
  dcdreamlib,
  Windows,
  SysUtils,
  Classes,
  Dialogs,
  DB,
  DBTables,
  DBCommon,
  BDE,
  MXQEDCOM,
  DBConsts,
  ActiveX,
  ComObj,
  MXCOMMON,
  Mxconsts,
  MXQPARSE;
function ConvertrecProjectorInfoToVariant(var R : recProjectorInfo) : OleVariant;
function ConvertVariantTorecProjectorInfo(const V : OleVariant) : recProjectorInfo;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __recProjectorInfo__Wrapper = class(TDCRecordWrapper)
private
fR : recProjectorInfo;
public
function GetRecordPtr : pointer; override;
published
procedure setFieldNo(const val : Integer);
function getFieldNo : Integer;
property FieldNo : Integer read getFieldNo write setFieldNo;
procedure setFieldType(const val : TFieldType);
function getFieldType : TFieldType;
property FieldType : TFieldType read getFieldType write setFieldType;
procedure setOutputName(const val : AnsiString);
function getOutputName : AnsiString;
property OutputName : AnsiString read getOutputName write setOutputName;
procedure setCompareName(const val : AnsiString);
function getCompareName : AnsiString;
property CompareName : AnsiString read getCompareName write setCompareName;
procedure setBaseName(const val : AnsiString);
function getBaseName : AnsiString;
property BaseName : AnsiString read getBaseName write setBaseName;
procedure setprojType(const val : TDimFlags);
function getprojType : TDimFlags;
property projType : TDimFlags read getprojType write setprojType;
end;
type
_T0 = function (p0 : TDimFlags): QNodeType of object;

_T1 = procedure (p0 : DBIResult) of object;

_T2 = function : String of object;

_T3 = function : TQueryError of object;

_T4 = function : Boolean of object;

_T5 = function (p0 : String;
p1 : TDimFlags;
p2 : Integer;
p3 : Boolean;
p4 : String): Integer of object;

_T6 = procedure (p0 : Integer) of object;

_T7 = procedure  of object;

_T8 = _T7;

_T9 = _T7;

_T10 = _T7;

_T11 = _T7;

_T12 = procedure (p0 : String) of object;

_T13 = procedure (p0 : String;
p1 : variant;
p2 : QNodeType) of object;

_T14 = _T2;

_T15 = _T12;

_T16 = _T7;

function __recProjectorInfo__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __recProjectorInfo__Wrapper.setFieldNo(const val : Integer);
begin
recProjectorInfo(GetRecordPtr^).FieldNo := val;
end;
function __recProjectorInfo__Wrapper.getFieldNo : Integer;
begin
result := recProjectorInfo(GetRecordPtr^).FieldNo;
end;
procedure __recProjectorInfo__Wrapper.setFieldType(const val : TFieldType);
begin
recProjectorInfo(GetRecordPtr^).FieldType := val;
end;
function __recProjectorInfo__Wrapper.getFieldType : TFieldType;
begin
result := recProjectorInfo(GetRecordPtr^).FieldType;
end;
procedure __recProjectorInfo__Wrapper.setOutputName(const val : AnsiString);
begin
recProjectorInfo(GetRecordPtr^).OutputName := val;
end;
function __recProjectorInfo__Wrapper.getOutputName : AnsiString;
begin
result := recProjectorInfo(GetRecordPtr^).OutputName;
end;
procedure __recProjectorInfo__Wrapper.setCompareName(const val : AnsiString);
begin
recProjectorInfo(GetRecordPtr^).CompareName := val;
end;
function __recProjectorInfo__Wrapper.getCompareName : AnsiString;
begin
result := recProjectorInfo(GetRecordPtr^).CompareName;
end;
procedure __recProjectorInfo__Wrapper.setBaseName(const val : AnsiString);
begin
recProjectorInfo(GetRecordPtr^).BaseName := val;
end;
function __recProjectorInfo__Wrapper.getBaseName : AnsiString;
begin
result := recProjectorInfo(GetRecordPtr^).BaseName;
end;
procedure __recProjectorInfo__Wrapper.setprojType(const val : TDimFlags);
begin
recProjectorInfo(GetRecordPtr^).projType := val;
end;
function __recProjectorInfo__Wrapper.getprojType : TDimFlags;
begin
result := recProjectorInfo(GetRecordPtr^).projType;
end;
function _recProjectorInfo_ : IDispatch;
begin
  result := __recProjectorInfo__Wrapper.Create;
end;

type __recProjectorInfo__Wrapper__ = class(__recProjectorInfo__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __recProjectorInfo__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertrecProjectorInfoToVariant(var R : recProjectorInfo) : OleVariant;
var
__rw : __recProjectorInfo__Wrapper__;
begin
__rw := __recProjectorInfo__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantTorecProjectorInfo(const V : OleVariant) : recProjectorInfo;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := recProjectorInfo((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTXtabQuery__canDelete(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXtabQuery(Instance).canDelete;
end;

procedure __DC__SetTXtabQuery__canDelete(Instance : TObject; Params : PVariantArgList);
begin
TXtabQuery(Instance).canDelete:=OleVariant(Params^[0]);
end;

function __DC__GetTXtabQuery__Projector(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __recProjectorInfo__Wrapper;
begin
__wrapper := __recProjectorInfo__Wrapper.Create;
__wrapper.fR := TXtabQuery(Instance).Projector[OleVariant(Params^[0])];
result := IUnknown(__wrapper) as IDispatch;
end;

function __DC__GetTXtabQuery__Aggregate(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __recProjectorInfo__Wrapper;
begin
__wrapper := __recProjectorInfo__Wrapper.Create;
__wrapper.fR := TXtabQuery(Instance).Aggregate[OleVariant(Params^[0])];
result := IUnknown(__wrapper) as IDispatch;
end;

function __DC__GetTXtabQuery__Dimension(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __recProjectorInfo__Wrapper;
begin
__wrapper := __recProjectorInfo__Wrapper.Create;
__wrapper.fR := TXtabQuery(Instance).Dimension[OleVariant(Params^[0])];
result := IUnknown(__wrapper) as IDispatch;
end;

function __DC__GetTXtabQuery__tableName(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXtabQuery(Instance).tableName[OleVariant(Params^[0])];
end;

function __DC__GetTXtabQuery__DBHandle(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TXtabQuery(Instance).DBHandle;
end;

procedure __DC__SetTXtabQuery__DBHandle(Instance : TObject; Params : PVariantArgList);
begin
TXtabQuery(Instance).DBHandle:=OleVariant(Params^[0]);
end;

procedure __RegisterProps;
begin
RegisterProperty(TXtabQuery,'canDelete',__DC__GetTXtabQuery__canDelete,__DC__SetTXtabQuery__canDelete);
RegisterIndexedProperty(TXtabQuery,'Projector',1,False,__DC__GetTXtabQuery__Projector,nil);
RegisterIndexedProperty(TXtabQuery,'Aggregate',1,False,__DC__GetTXtabQuery__Aggregate,nil);
RegisterIndexedProperty(TXtabQuery,'Dimension',1,False,__DC__GetTXtabQuery__Dimension,nil);
RegisterIndexedProperty(TXtabQuery,'tableName',1,False,__DC__GetTXtabQuery__tableName,nil);
RegisterProperty(TXtabQuery,'DBHandle',__DC__GetTXtabQuery__DBHandle,__DC__SetTXtabQuery__DBHandle);
end;

const __ConstNames0 : array[0..4] of string = (
'txNone'
,'txAddingSum'
,'txAddingDim'
,'txDeletingSum'
,'txDeletingDim'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,txNone));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,txAddingSum));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,txAddingDim));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,txDeletingSum));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,txDeletingDim));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..1] of TClass = (
EQParseException,
TXtabQuery
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..3] of string = (
'recProjectorInfo'
,'ptToQNode'
,'BDEcheck'
,'BDEDLLPath'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_recProjectorInfo_)));
RegisterProc(nil,MethodNames[1],mtProc,TypeInfo(_T0),[
TypeInfo(TDimFlags),TypeInfo(QNodeType)],Addr(ptToQNode),cRegister);

RegisterProc(nil,MethodNames[2],mtProc,TypeInfo(_T1),[
TypeInfo(DBIResult)],Addr(BDEcheck),cRegister);

RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T2),[TypeInfo(String)],Addr(BDEDLLPath),cRegister);

RegRegisterMethod(TXtabQuery,'IsLegal',TypeInfo(_T3),[TypeInfo(TQueryError)],Addr(TXtabQuery.IsLegal));

RegRegisterMethod(TXtabQuery,'AllDimensionsGrouped',TypeInfo(_T4),[TypeInfo(Boolean)],Addr(TXtabQuery.AllDimensionsGrouped));

RegRegisterMethod(TXtabQuery,'AddNewItem',TypeInfo(_T5),[
TypeInfo(String),
TypeInfo(TDimFlags),
TypeInfo(Integer),
TypeInfo(Boolean),
TypeInfo(String),TypeInfo(Integer)],Addr(TXtabQuery.AddNewItem));

RegRegisterMethod(TXtabQuery,'DeleteProjector',TypeInfo(_T6),[
TypeInfo(Integer)],Addr(TXtabQuery.DeleteProjector));

RegRegisterMethod(TXtabQuery,'FixUpGroupBys',TypeInfo(_T7),NoParams,Addr(TXtabQuery.FixUpGroupBys));

RegRegisterMethod(TXtabQuery,'DeleteGroupBys',TypeInfo(_T8),NoParams,Addr(TXtabQuery.DeleteGroupBys));

RegRegisterMethod(TXtabQuery,'DeleteDimensions',TypeInfo(_T9),NoParams,Addr(TXtabQuery.DeleteDimensions));

RegRegisterMethod(TXtabQuery,'DeleteSummaries',TypeInfo(_T10),NoParams,Addr(TXtabQuery.DeleteSummaries));

RegRegisterMethod(TXtabQuery,'DeleteProjectors',TypeInfo(_T11),NoParams,Addr(TXtabQuery.DeleteProjectors));

RegRegisterMethod(TXtabQuery,'AddWhereCondition',TypeInfo(_T12),[
TypeInfo(String)],Addr(TXtabQuery.AddWhereCondition));

RegRegisterMethod(TXtabQuery,'AddWhereOp',TypeInfo(_T13),[
TypeInfo(String),
TypeInfo(variant),
TypeInfo(QNodeType)],Addr(TXtabQuery.AddWhereOp));

RegRegisterMethod(TXtabQuery,'getDialectSQLString',TypeInfo(_T14),[TypeInfo(String)],Addr(TXtabQuery.getDialectSQLString));

RegRegisterMethod(TXtabQuery,'AddTable',TypeInfo(_T15),[
TypeInfo(String)],Addr(TXtabQuery.AddTable));

RegisterProc(TXtabQuery,'Create',mtConstructor,TypeInfo(_T16),NoParams,Addr(TXtabQuery.Create),cRegister);

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
