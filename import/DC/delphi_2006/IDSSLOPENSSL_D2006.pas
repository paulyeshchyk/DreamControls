{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDSSLOPENSSL_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses rtti, 
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdException,
  IdStackConsts,
  IdSocketHandle,
  IdSSLOpenSSLHeaders,
  IdComponent,
  IdIOHandler,
  IdGlobal,
  IdTCPServer,
  IdThread,
  IdTCPConnection,
  IdIntercept,
  SysUtils,
  IdIOHandlerSocket,
  IdServerIOHandler,
  IdSocks,
  IdSSLOpenSSL;
function ConvertTByteArrayToVariant(var R : TByteArray) : OleVariant;
function ConvertVariantToTByteArray(const V : OleVariant) : TByteArray;
function ConvertTEVP_MDToVariant(var R : TEVP_MD) : OleVariant;
function ConvertVariantToTEVP_MD(const V : OleVariant) : TEVP_MD;
function ConvertTULongToVariant(var R : TULong) : OleVariant;
function ConvertVariantToTULong(const V : OleVariant) : TULong;
implementation
  var vmtMethodList:TStringList; 
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TEVP_MD__Wrapper = class(TDCRecordWrapper)
private
fR : TEVP_MD;
public
function GetRecordPtr : pointer; override;
published
procedure setLength(const val : Integer);
function getLength : Integer;
property Length : Integer read getLength write setLength;
end;
type __TULong__Wrapper = class(TDCRecordWrapper)
private
fR : TULong;
public
function GetRecordPtr : pointer; override;
published
procedure setB1(const val : Byte);
function getB1 : Byte;
property B1 : Byte read getB1 write setB1;
procedure setB2(const val : Byte);
function getB2 : Byte;
property B2 : Byte read getB2 write setB2;
procedure setB3(const val : Byte);
function getB3 : Byte;
property B3 : Byte read getB3 write setB3;
procedure setB4(const val : Byte);
function getB4 : Byte;
property B4 : Byte read getB4 write setB4;
procedure setW1(const val : Word);
function getW1 : Word;
property W1 : Word read getW1 write setW1;
procedure setW2(const val : Word);
function getW2 : Word;
property W2 : Word read getW2 write setW2;
procedure setL1(const val : Longint);
function getL1 : Longint;
property L1 : Longint read getL1 write setL1;
procedure setC1(const val : Cardinal);
function getC1 : Cardinal;
property C1 : Cardinal read getC1 write setC1;
end;
type __TByteArray__Wrapper = class(TDCRecordWrapper)
private
fR : TByteArray;
public
function GetRecordPtr : pointer; override;
published
procedure setLength(const val : Integer);
function getLength : Integer;
property Length : Integer read getLength write setLength;
end;
type
_T0 = function (p0 : Integer;
p1 : Integer): Boolean of object;

_T1 = procedure (p0 : PSSL;
p1 : Integer;
p2 : Integer) of object;

{_T2 = function (p0 : PChar;
p1 : Integer;
p2 : Integer;
p3 : Pointer): Integer of object;}

_T3 = function (p0 : Integer;
p1 : PX509_STORE_CTX): Integer of object;

_T4 = procedure (p0 : String) of object;

_T5 = procedure (var p0 : String) of object;

_T6 = function (p0 : TIdX509): Boolean of object;

_T7 = procedure (p0 : TIdSSLSocket) of object;

_T8 = procedure  of object;

_T9 = function : Boolean of object;

_T10 = _T9;

_T11 = _T9;

_T12 = procedure (p0 : TIdSSLIOHandlerSocket) of object;

_T13 = _T4;

_T14 = _T5;

_T15 = _T6;

_T16 = function (var p0;
p1 : Integer): Integer of object;

_T17 = _T16;

_T18 = _T8;

_T19 = procedure (p0 : TObject) of object;

_T20 = procedure (const p0 : TIdStackSocketHandle;
p1 : TIdSSLContext) of object;

_T21 = _T20;

_T22 = _T16;

_T23 = _T16;

_T24 = function : IDispatch of object;

_T25 = function : String of object;

_T26 = _T4;

_T27 = procedure (p0 : PX509) of object;

_T28 = procedure (p0 : PX509_NAME) of object;

function __TEVP_MD__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TEVP_MD__Wrapper.setLength(const val : Integer);
begin
TEVP_MD(GetRecordPtr^).Length := val;
end;
function __TEVP_MD__Wrapper.getLength : Integer;
begin
result := TEVP_MD(GetRecordPtr^).Length;
end;
function __TULong__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TULong__Wrapper.setB1(const val : Byte);
begin
TULong(GetRecordPtr^).B1 := val;
end;
function __TULong__Wrapper.getB1 : Byte;
begin
result := TULong(GetRecordPtr^).B1;
end;
procedure __TULong__Wrapper.setB2(const val : Byte);
begin
TULong(GetRecordPtr^).B2 := val;
end;
function __TULong__Wrapper.getB2 : Byte;
begin
result := TULong(GetRecordPtr^).B2;
end;
procedure __TULong__Wrapper.setB3(const val : Byte);
begin
TULong(GetRecordPtr^).B3 := val;
end;
function __TULong__Wrapper.getB3 : Byte;
begin
result := TULong(GetRecordPtr^).B3;
end;
procedure __TULong__Wrapper.setB4(const val : Byte);
begin
TULong(GetRecordPtr^).B4 := val;
end;
function __TULong__Wrapper.getB4 : Byte;
begin
result := TULong(GetRecordPtr^).B4;
end;
procedure __TULong__Wrapper.setW1(const val : Word);
begin
TULong(GetRecordPtr^).W1 := val;
end;
function __TULong__Wrapper.getW1 : Word;
begin
result := TULong(GetRecordPtr^).W1;
end;
procedure __TULong__Wrapper.setW2(const val : Word);
begin
TULong(GetRecordPtr^).W2 := val;
end;
function __TULong__Wrapper.getW2 : Word;
begin
result := TULong(GetRecordPtr^).W2;
end;
procedure __TULong__Wrapper.setL1(const val : Longint);
begin
TULong(GetRecordPtr^).L1 := val;
end;
function __TULong__Wrapper.getL1 : Longint;
begin
result := TULong(GetRecordPtr^).L1;
end;
procedure __TULong__Wrapper.setC1(const val : Cardinal);
begin
TULong(GetRecordPtr^).C1 := val;
end;
function __TULong__Wrapper.getC1 : Cardinal;
begin
result := TULong(GetRecordPtr^).C1;
end;
function __TByteArray__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TByteArray__Wrapper.setLength(const val : Integer);
begin
TByteArray(GetRecordPtr^).Length := val;
end;
function __TByteArray__Wrapper.getLength : Integer;
begin
result := TByteArray(GetRecordPtr^).Length;
end;
function _TByteArray_ : IDispatch;
begin
  result := __TByteArray__Wrapper.Create;
end;
function _TEVP_MD_ : IDispatch;
begin
  result := __TEVP_MD__Wrapper.Create;
end;
function _TULong_ : IDispatch;
begin
  result := __TULong__Wrapper.Create;
end;
function __TIdSSLSocket__GetSessionID__Wrapper(__Instance : TIdSSLSocket): IDispatch;
var
__result : TByteArray;
__wrapper : __TByteArray__Wrapper;
begin
__result := TIdSSLSocket(__Instance).GetSessionID;
__wrapper := __TByteArray__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;


type __TByteArray__Wrapper__ = class(__TByteArray__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TByteArray__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTByteArrayToVariant(var R : TByteArray) : OleVariant;
var
__rw : __TByteArray__Wrapper__;
begin
__rw := __TByteArray__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTByteArray(const V : OleVariant) : TByteArray;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TByteArray((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TEVP_MD__Wrapper__ = class(__TEVP_MD__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TEVP_MD__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTEVP_MDToVariant(var R : TEVP_MD) : OleVariant;
var
__rw : __TEVP_MD__Wrapper__;
begin
__rw := __TEVP_MD__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTEVP_MD(const V : OleVariant) : TEVP_MD;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TEVP_MD((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;

type __TULong__Wrapper__ = class(__TULong__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TULong__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTULongToVariant(var R : TULong) : OleVariant;
var
__rw : __TULong__Wrapper__;
begin
__rw := __TULong__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTULong(const V : OleVariant) : TULong;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TULong((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTIdSSLContext__StatusInfoOn(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdSSLContext(Instance).StatusInfoOn;
end;

procedure __DC__SetTIdSSLContext__StatusInfoOn(Instance : TObject; Params : PVariantArgList);
begin
TIdSSLContext(Instance).StatusInfoOn:=OleVariant(Params^[0]);
end;

function __DC__GetTIdSSLContext__VerifyOn(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdSSLContext(Instance).VerifyOn;
end;

procedure __DC__SetTIdSSLContext__VerifyOn(Instance : TObject; Params : PVariantArgList);
begin
TIdSSLContext(Instance).VerifyOn:=OleVariant(Params^[0]);
end;

function __DC__GetTIdSSLIOHandlerSocket__SSLSocket(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdSSLIOHandlerSocket(Instance).SSLSocket);
end;

procedure __DC__SetTIdSSLIOHandlerSocket__SSLSocket(Instance : TObject; Params : PVariantArgList);
begin
TIdSSLIOHandlerSocket(Instance).SSLSocket:=TIdSSLSocket(VarToObject(OleVariant(Params^[0])));
end;

function __DC__GetTIdSSLIOHandlerSocket__PassThrough(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdSSLIOHandlerSocket(Instance).PassThrough;
end;

procedure __DC__SetTIdSSLIOHandlerSocket__PassThrough(Instance : TObject; Params : PVariantArgList);
begin
TIdSSLIOHandlerSocket(Instance).PassThrough:=OleVariant(Params^[0]);
end;

function __DC__GetTIdSSLSocket__PeerCert(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdSSLSocket(Instance).PeerCert);
end;

function __DC__GetTIdSSLSocket__Cipher(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdSSLSocket(Instance).Cipher);
end;

function __DC__GetTIdX509__Fingerprint(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TEVP_MD__Wrapper;
begin
__wrapper := __TEVP_MD__Wrapper.Create;
__wrapper.fR := TIdX509(Instance).Fingerprint;
result := IUnknown(__wrapper) as IDispatch;
end;

function __DC__GetTIdX509__FingerprintAsString(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdX509(Instance).FingerprintAsString;
end;

function __DC__GetTIdX509__Subject(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdX509(Instance).Subject);
end;

function __DC__GetTIdX509__Issuer(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := VarFromObject(TIdX509(Instance).Issuer);
end;

function __DC__GetTIdX509__notBefore(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdX509(Instance).notBefore;
end;

function __DC__GetTIdX509__notAfter(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdX509(Instance).notAfter;
end;

function __DC__GetTIdX509Name__Hash(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TULong__Wrapper;
begin
__wrapper := __TULong__Wrapper.Create;
__wrapper.fR := TIdX509Name(Instance).Hash;
result := IUnknown(__wrapper) as IDispatch;
end;

function __DC__GetTIdX509Name__HashAsString(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdX509Name(Instance).HashAsString;
end;

function __DC__GetTIdX509Name__OneLine(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdX509Name(Instance).OneLine;
end;

procedure __RegisterProps;
begin
RegisterProperty(TIdSSLContext,'StatusInfoOn',__DC__GetTIdSSLContext__StatusInfoOn,__DC__SetTIdSSLContext__StatusInfoOn);
RegisterProperty(TIdSSLContext,'VerifyOn',__DC__GetTIdSSLContext__VerifyOn,__DC__SetTIdSSLContext__VerifyOn);
RegisterProperty(TIdSSLIOHandlerSocket,'SSLSocket',__DC__GetTIdSSLIOHandlerSocket__SSLSocket,__DC__SetTIdSSLIOHandlerSocket__SSLSocket);
RegisterProperty(TIdSSLIOHandlerSocket,'PassThrough',__DC__GetTIdSSLIOHandlerSocket__PassThrough,__DC__SetTIdSSLIOHandlerSocket__PassThrough);
RegisterProperty(TIdSSLSocket,'PeerCert',__DC__GetTIdSSLSocket__PeerCert,nil);
RegisterProperty(TIdSSLSocket,'Cipher',__DC__GetTIdSSLSocket__Cipher,nil);
RegisterProperty(TIdX509,'Fingerprint',__DC__GetTIdX509__Fingerprint,nil);
RegisterProperty(TIdX509,'FingerprintAsString',__DC__GetTIdX509__FingerprintAsString,nil);
RegisterProperty(TIdX509,'Subject',__DC__GetTIdX509__Subject,nil);
RegisterProperty(TIdX509,'Issuer',__DC__GetTIdX509__Issuer,nil);
RegisterProperty(TIdX509,'notBefore',__DC__GetTIdX509__notBefore,nil);
RegisterProperty(TIdX509,'notAfter',__DC__GetTIdX509__notAfter,nil);
RegisterProperty(TIdX509Name,'Hash',__DC__GetTIdX509Name__Hash,nil);
RegisterProperty(TIdX509Name,'HashAsString',__DC__GetTIdX509Name__HashAsString,nil);
RegisterProperty(TIdX509Name,'OneLine',__DC__GetTIdX509Name__OneLine,nil);
end;

const __ConstNames0 : array[0..14] of string = (
'sslvSSLv2'
,'sslvSSLv23'
,'sslvSSLv3'
,'sslvTLSv1'
,'sslmUnassigned'
,'sslmClient'
,'sslmServer'
,'sslmBoth'
,'sslvrfPeer'
,'sslvrfFailIfNoPeerCert'
,'sslvrfClientOnce'
,'sslCtxClient'
,'sslCtxServer'
,'sslRead'
,'sslWrite'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,sslvSSLv2));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,sslvSSLv23));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,sslvSSLv3));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,sslvTLSv1));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,sslmUnassigned));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,sslmClient));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,sslmServer));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,sslmBoth));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,sslvrfPeer));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,sslvrfFailIfNoPeerCert));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,sslvrfClientOnce));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[11] ,sslCtxClient));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[12] ,sslCtxServer));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[13] ,sslRead));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[14] ,sslWrite));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..20] of TClass = (
EIdOpenSSLError,
EIdOpenSSLLoadError,
EIdOSSLAcceptError,
EIdOSSLConnectError,
EIdOSSLCouldNotLoadSSLLibrary,
EIdOSSLCreatingContextError,
EIdOSSLDataBindingError,
EIdOSSLGetMethodError,
EIdOSSLLoadingCertError,
EIdOSSLLoadingKeyError,
EIdOSSLLoadingRootCertError,
EIdOSSLModeNotSet,
EIdOSSLSettingCipherError,
TIdServerIOHandlerSSL,
TIdSSLCipher,
TIdSSLContext,
TIdSSLIOHandlerSocket,
TIdSSLOptions,
TIdSSLSocket,
TIdX509,
TIdX509Name
);
 function __getFullMethodName(sclassName, smethodName:String):String; 
 begin 
   result := format('%s.%s',[sClassName, sMethodName]) 
 end; 
procedure fillVMTProcs();
var
  ctx : TRttiContext;
  t:TRttiType;
  m:TRttiMethod;
  i:Integer;
begin
  ctx := TRttiContext.Create;
  try
    for i := 0 to length(classList) - 1 do
    begin
      t:=ctx.GetType(classList[i].ClassInfo);
      for m in t.GetMethods  do
      begin
        if m.DispatchKind = dkVtable then
        vmtMethodList.addObject(__getFullMethodName(classList[i].className,m.Name), pointer(m.VirtualIndex*4));
      end;
      t.free;
    end;
  finally
    ctx.free;
  end;
end;
function getVMTProcAddr(className, MethodName:String;oldAddr:Integer):Pointer;
var i:Integer;
begin
  i:=vmtMethodList.indexOf(__getFullMethodName(className,methodName));
  if i>-1 then 
    result:=pointer(vmtMethodList.Objects[i])
  else 
  result:=pointer(oldAddr);
end;  
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..5] of string = (
'TByteArray'
,'TEVP_MD'
,'TULong'
,'LogicalAnd'
,'InfoCallback'
,'VerifyCallback'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TByteArray_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[1],Addr(_TEVP_MD_)));
__RegisteredMethods.Add(RegisterRWProc(MethodNames[2],Addr(_TULong_)));
RegisterProc(nil,MethodNames[3],mtProc,TypeInfo(_T0),[
TypeInfo(Integer),
TypeInfo(Integer),TypeInfo(Boolean)],Addr(LogicalAnd),cRegister);

RegisterProc(nil,MethodNames[4],mtProc,TypeInfo(_T1),[
TypeInfoPointer,
TypeInfo(Integer),
TypeInfo(Integer)],Addr(InfoCallback),cCdecl);

RegisterProc(nil,MethodNames[5],mtProc,TypeInfo(_T3),[
TypeInfo(Integer),
TypeInfoPointer,TypeInfo(Integer)],Addr(VerifyCallback),cCdecl);

//RegRegisterMethod(TIdServerIOHandlerSSL,'DoStatusInfo',TypeInfo(_T4),[TypeInfo(String)], pointer(68));
RegRegisterMethod(TIdServerIOHandlerSSL,'DoStatusInfo',TypeInfo(_T4),[TypeInfo(String)],  getVMTProcAddr('TIdServerIOHandlerSSL','DoStatusInfo',68));


//RegRegisterMethod(TIdServerIOHandlerSSL,'DoGetPassword',TypeInfo(_T5),[TypeInfo(String)], pointer(72));
RegRegisterMethod(TIdServerIOHandlerSSL,'DoGetPassword',TypeInfo(_T5),[TypeInfo(String)],  getVMTProcAddr('TIdServerIOHandlerSSL','DoGetPassword',72));


//RegRegisterMethod(TIdServerIOHandlerSSL,'DoVerifyPeer',TypeInfo(_T6),[TypeInfo(TIdX509),TypeInfo(Boolean)], pointer(76));
RegRegisterMethod(TIdServerIOHandlerSSL,'DoVerifyPeer',TypeInfo(_T6),[TypeInfo(TIdX509),TypeInfo(Boolean)],  getVMTProcAddr('TIdServerIOHandlerSSL','DoVerifyPeer',76));


RegisterProc(TIdSSLCipher,'Create',mtConstructor,TypeInfo(_T7),[
TypeInfo(TIdSSLSocket)],Addr(TIdSSLCipher.Create),cRegister);

RegisterProc(TIdSSLContext,'Create',mtConstructor,TypeInfo(_T8),NoParams,Addr(TIdSSLContext.Create),cRegister);

RegRegisterMethod(TIdSSLContext,'LoadRootCert',TypeInfo(_T9),[TypeInfo(Boolean)],Addr(TIdSSLContext.LoadRootCert));

RegRegisterMethod(TIdSSLContext,'LoadCert',TypeInfo(_T10),[TypeInfo(Boolean)],Addr(TIdSSLContext.LoadCert));

RegRegisterMethod(TIdSSLContext,'LoadKey',TypeInfo(_T11),[TypeInfo(Boolean)],Addr(TIdSSLContext.LoadKey));

//RegRegisterMethod(TIdSSLIOHandlerSocket,'DoBeforeConnect',TypeInfo(_T12),[TypeInfo(TIdSSLIOHandlerSocket)], pointer(92));
RegRegisterMethod(TIdSSLIOHandlerSocket,'DoBeforeConnect',TypeInfo(_T12),[TypeInfo(TIdSSLIOHandlerSocket)],  getVMTProcAddr('TIdSSLIOHandlerSocket','DoBeforeConnect',92));


//RegRegisterMethod(TIdSSLIOHandlerSocket,'DoStatusInfo',TypeInfo(_T13),[TypeInfo(String)], pointer(96));
RegRegisterMethod(TIdSSLIOHandlerSocket,'DoStatusInfo',TypeInfo(_T13),[TypeInfo(String)],  getVMTProcAddr('TIdSSLIOHandlerSocket','DoStatusInfo',96));


//RegRegisterMethod(TIdSSLIOHandlerSocket,'DoGetPassword',TypeInfo(_T14),[TypeInfo(String)], pointer(100));
RegRegisterMethod(TIdSSLIOHandlerSocket,'DoGetPassword',TypeInfo(_T14),[TypeInfo(String)],  getVMTProcAddr('TIdSSLIOHandlerSocket','DoGetPassword',100));


//RegRegisterMethod(TIdSSLIOHandlerSocket,'DoVerifyPeer',TypeInfo(_T15),[TypeInfo(TIdX509),TypeInfo(Boolean)], pointer(104));
RegRegisterMethod(TIdSSLIOHandlerSocket,'DoVerifyPeer',TypeInfo(_T15),[TypeInfo(TIdX509),TypeInfo(Boolean)],  getVMTProcAddr('TIdSSLIOHandlerSocket','DoVerifyPeer',104));


//RegRegisterMethod(TIdSSLIOHandlerSocket,'RecvEnc',TypeInfo(_T16),[TypeInfoUntyped,TypeInfo(Integer),TypeInfo(Integer)], pointer(108));
RegRegisterMethod(TIdSSLIOHandlerSocket,'RecvEnc',TypeInfo(_T16),[TypeInfoUntyped,TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TIdSSLIOHandlerSocket','RecvEnc',108));


//RegRegisterMethod(TIdSSLIOHandlerSocket,'SendEnc',TypeInfo(_T17),[TypeInfoUntyped,TypeInfo(Integer),TypeInfo(Integer)], pointer(112));
RegRegisterMethod(TIdSSLIOHandlerSocket,'SendEnc',TypeInfo(_T17),[TypeInfoUntyped,TypeInfo(Integer),TypeInfo(Integer)],  getVMTProcAddr('TIdSSLIOHandlerSocket','SendEnc',112));


//RegRegisterMethod(TIdSSLIOHandlerSocket,'OpenEncodedConnection',TypeInfo(_T18),NoParams, pointer(116));
RegRegisterMethod(TIdSSLIOHandlerSocket,'OpenEncodedConnection',TypeInfo(_T18),NoParams,  getVMTProcAddr('TIdSSLIOHandlerSocket','OpenEncodedConnection',116));


RegisterProc(TIdSSLSocket,'Create',mtConstructor,TypeInfo(_T19),[
TypeInfo(TObject)],Addr(TIdSSLSocket.Create),cRegister);

RegRegisterMethod(TIdSSLSocket,'Accept',TypeInfo(_T20),[
TypeInfo(TIdStackSocketHandle),
TypeInfo(TIdSSLContext)],Addr(TIdSSLSocket.Accept));

RegRegisterMethod(TIdSSLSocket,'Connect',TypeInfo(_T21),[
TypeInfo(TIdStackSocketHandle),
TypeInfo(TIdSSLContext)],Addr(TIdSSLSocket.Connect));

RegRegisterMethod(TIdSSLSocket,'Send',TypeInfo(_T22),[
TypeInfoUntyped,
TypeInfo(Integer),TypeInfo(Integer)],Addr(TIdSSLSocket.Send));

RegRegisterMethod(TIdSSLSocket,'Recv',TypeInfo(_T23),[
TypeInfoUntyped,
TypeInfo(Integer),TypeInfo(Integer)],Addr(TIdSSLSocket.Recv));

RegRegisterMethod(TIdSSLSocket,'GetSessionID',TypeInfo(_T24),[TypeInfo(IDispatch)],Addr(__TIdSSLSocket__GetSessionID__Wrapper));

RegRegisterMethod(TIdSSLSocket,'GetSessionIDAsString',TypeInfo(_T25),[TypeInfo(String)],Addr(TIdSSLSocket.GetSessionIDAsString));

RegRegisterMethod(TIdSSLSocket,'SetCipherList',TypeInfo(_T26),[
TypeInfo(String)],Addr(TIdSSLSocket.SetCipherList));

RegisterProc(TIdX509,'Create',mtConstructor,TypeInfo(_T27),[
TypeInfoPointer], pointer(0),cRegister);

RegisterProc(TIdX509Name,'Create',mtConstructor,TypeInfo(_T28),[
TypeInfoPointer],Addr(TIdX509Name.Create),cRegister);

end;
initialization
 vmtMethodList:=TStringList.Create;
vmtMethodList.sorted:=true;
vmtMethodList.duplicates:=dupIgnore;
fillVMTProcs;
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterProc(nil,'PasswordCallback',mtProc,TypeInfo(_T2),[
TypeInfoPChar,
TypeInfo(Integer),
TypeInfo(Integer),
TypeInfoPointer,TypeInfo(Integer)],Addr(PasswordCallback),cCdecl)}

RegisterEvent(TypeInfo(TCallbackEvent),[
TypeInfo(String)]);

RegisterEvent(TypeInfo(TIOHandlerNotify),[
TypeInfo(TIdSSLIOHandlerSocket)]);

RegisterEvent(TypeInfo(TPasswordEvent),[
TypeInfo(String)]);

RegisterEvent(TypeInfo(TVerifyPeerEvent),[
TypeInfo(TIdX509),TypeInfo(Boolean)]);

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;
vmtMethodList.free

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
