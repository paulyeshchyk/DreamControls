{*******************************************************}
{                                                       }
{ Import  unit generated by UNITIMPORTER program         }
{                                                       }
{*******************************************************}

{} unit IDICMPCLIENT_D2006;
interface
{$I dc.inc}
{$D-,L-,Y-}
{$HINTS OFF}
{$WARNINGS OFF}
uses
  activex,
  dcscript,
  dcsystem,
  dcdreamlib,
  Classes,
  IdGlobal,
  IdRawBase,
  IdRawClient,
  IdStack,
  IdStackConsts,
  SysUtils,
  IdIcmpClient;
function ConvertTReplyStatusToVariant(var R : TReplyStatus) : OleVariant;
function ConvertVariantToTReplyStatus(const V : OleVariant) : TReplyStatus;
implementation
{$IFDEF D3}
{$ELSE}
uses ole2;
type
  OleVariant = Variant;
{$ENDIF}
type __TReplyStatus__Wrapper = class(TDCRecordWrapper)
private
fR : TReplyStatus;
public
function GetRecordPtr : pointer; override;
published
procedure setBytesReceived(const val : Integer);
function getBytesReceived : Integer;
property BytesReceived : Integer read getBytesReceived write setBytesReceived;
procedure setFromIpAddress(const val : AnsiString);
function getFromIpAddress : AnsiString;
property FromIpAddress : AnsiString read getFromIpAddress write setFromIpAddress;
procedure setMsgType(const val : Byte);
function getMsgType : Byte;
property MsgType : Byte read getMsgType write setMsgType;
procedure setSequenceId(const val : Word);
function getSequenceId : Word;
property SequenceId : Word read getSequenceId write setSequenceId;
procedure setMsRoundTripTime(const val : longword);
function getMsRoundTripTime : longword;
property MsRoundTripTime : longword read getMsRoundTripTime write setMsRoundTripTime;
procedure setTimeToLive(const val : Byte);
function getTimeToLive : Byte;
property TimeToLive : Byte read getTimeToLive write setTimeToLive;
procedure setReplyStatusType(const val : TReplyStatusTypes);
function getReplyStatusType : TReplyStatusTypes;
property ReplyStatusType : TReplyStatusTypes read getReplyStatusType write setReplyStatusType;
end;
type
_T0 = procedure (p0 : string;
p1 : Word) of object;

_T1 = function (p0 : Integer): IDispatch of object;

function __TReplyStatus__Wrapper.GetRecordPtr : pointer;
begin
result := @fR;
end;
procedure __TReplyStatus__Wrapper.setBytesReceived(const val : Integer);
begin
TReplyStatus(GetRecordPtr^).BytesReceived := val;
end;
function __TReplyStatus__Wrapper.getBytesReceived : Integer;
begin
result := TReplyStatus(GetRecordPtr^).BytesReceived;
end;
procedure __TReplyStatus__Wrapper.setFromIpAddress(const val : AnsiString);
begin
TReplyStatus(GetRecordPtr^).FromIpAddress := val;
end;
function __TReplyStatus__Wrapper.getFromIpAddress : AnsiString;
begin
result := TReplyStatus(GetRecordPtr^).FromIpAddress;
end;
procedure __TReplyStatus__Wrapper.setMsgType(const val : Byte);
begin
TReplyStatus(GetRecordPtr^).MsgType := val;
end;
function __TReplyStatus__Wrapper.getMsgType : Byte;
begin
result := TReplyStatus(GetRecordPtr^).MsgType;
end;
procedure __TReplyStatus__Wrapper.setSequenceId(const val : Word);
begin
TReplyStatus(GetRecordPtr^).SequenceId := val;
end;
function __TReplyStatus__Wrapper.getSequenceId : Word;
begin
result := TReplyStatus(GetRecordPtr^).SequenceId;
end;
procedure __TReplyStatus__Wrapper.setMsRoundTripTime(const val : longword);
begin
TReplyStatus(GetRecordPtr^).MsRoundTripTime := val;
end;
function __TReplyStatus__Wrapper.getMsRoundTripTime : longword;
begin
result := TReplyStatus(GetRecordPtr^).MsRoundTripTime;
end;
procedure __TReplyStatus__Wrapper.setTimeToLive(const val : Byte);
begin
TReplyStatus(GetRecordPtr^).TimeToLive := val;
end;
function __TReplyStatus__Wrapper.getTimeToLive : Byte;
begin
result := TReplyStatus(GetRecordPtr^).TimeToLive;
end;
procedure __TReplyStatus__Wrapper.setReplyStatusType(const val : TReplyStatusTypes);
begin
TReplyStatus(GetRecordPtr^).ReplyStatusType := val;
end;
function __TReplyStatus__Wrapper.getReplyStatusType : TReplyStatusTypes;
begin
result := TReplyStatus(GetRecordPtr^).ReplyStatusType;
end;
function _TReplyStatus_ : IDispatch;
begin
  result := __TReplyStatus__Wrapper.Create;
end;
procedure __TIdIcmpClient__Ping__Wrapper(__Instance : TObject; cArgs : integer; pArgs : PArgList);
begin
case cArgs of
0:
begin
TIdIcmpClient(__Instance).Ping;
end;
1:
begin
TIdIcmpClient(__Instance).Ping(OleVariant(pargs^[0]));
end;
2:
begin
TIdIcmpClient(__Instance).Ping(OleVariant(pargs^[1]),OleVariant(pargs^[0]));
end;
end
end;

function __TIdIcmpClient__Receive__Wrapper(__Instance : TIdIcmpClient;
p0 : Integer): IDispatch;
var
__result : TReplyStatus;
__wrapper : __TReplyStatus__Wrapper;
begin
__result := TIdIcmpClient(__Instance).Receive(p0);
__wrapper := __TReplyStatus__Wrapper.Create;
__wrapper.fR := __result;
result := IDispatch(__wrapper);
end;


type __TReplyStatus__Wrapper__ = class(__TReplyStatus__Wrapper)
private
fRPtr : pointer;
function GetRecordPtr : pointer; override;
end;
function __TReplyStatus__Wrapper__.GetRecordPtr : pointer;
begin
result := fRPtr;
end;
function ConvertTReplyStatusToVariant(var R : TReplyStatus) : OleVariant;
var
__rw : __TReplyStatus__Wrapper__;
begin
__rw := __TReplyStatus__Wrapper__.Create;
__rw.fRPtr := @R;
result := IDispatch(__rw);
end;
function ConvertVariantToTReplyStatus(const V : OleVariant) : TReplyStatus;
var
_idisp : IDispatch;
begin
_idisp := VarToInterface(v);
if _idisp = nil then exit;
result := TReplyStatus((_idisp as IDCRecordWrapper).GetRecordPtr^);
end;
function __DC__GetTIdIcmpClient__ReplyStatus(Instance : TObject; Params : PVariantArgList) : OleVariant;
var
__wrapper : __TReplyStatus__Wrapper;
begin
__wrapper := __TReplyStatus__Wrapper.Create;
__wrapper.fR := TIdIcmpClient(Instance).ReplyStatus;
result := IUnknown(__wrapper) as IDispatch;
end;

function __DC__GetTIdIcmpClient__ReplyData(Instance : TObject; Params : PVariantArgList) : OleVariant;
begin
result := TIdIcmpClient(Instance).ReplyData;
end;

procedure __RegisterProps;
begin
RegisterProperty(TIdIcmpClient,'ReplyStatus',__DC__GetTIdIcmpClient__ReplyStatus,nil);
RegisterProperty(TIdIcmpClient,'ReplyData',__DC__GetTIdIcmpClient__ReplyData,nil);
end;

const __ConstNames0 : array[0..10] of string = (
'DEF_PACKET_SIZE'
,'MAX_PACKET_SIZE'
,'ICMP_MIN'
,'iDEFAULTPACKETSIZE'
,'iDEFAULTREPLYBUFSIZE'
,'Id_TIDICMP_ReceiveTimeout'
,'rsEcho'
,'rsError'
,'rsTimeOut'
,'rsErrorUnreachable'
,'rsErrorTTLExceeded'
);
var __RegisteredConstsList0 : TList;
procedure __RegisterConsts0;
begin
__RegisteredConstsList0 := TList.Create;
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[0] ,DEF_PACKET_SIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[1] ,MAX_PACKET_SIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[2] ,ICMP_MIN));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[3] ,iDEFAULTPACKETSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[4] ,iDEFAULTREPLYBUFSIZE));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[5] ,Id_TIDICMP_ReceiveTimeout));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[6] ,rsEcho));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[7] ,rsError));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[8] ,rsTimeOut));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[9] ,rsErrorUnreachable));
__RegisteredConstsList0.Add(RegisterConst(__ConstNames0[10] ,rsErrorTTLExceeded));
end;

procedure __UnregisterConsts0;
var i : integer;
begin
__RegisteredConstsList0.Free
end;

const ClassList : array[0..0] of TClass = (
TIdIcmpClient
);
procedure __RegisterClasses;
begin
RegisterClassesInScript(ClassList);
end;

procedure __UnRegisterClasses;
begin
end;

var __RegisteredMethods : TList;
const MethodNames : array[0..0] of string = (
'TReplyStatus'
);

procedure __UnregisterProcs;
var i : integer;
begin
__RegisteredMethods.Free;
end;

procedure _mreg_0;
begin
__RegisteredMethods.Add(RegisterRWProc(MethodNames[0],Addr(_TReplyStatus_)));
RegisterProc(TIdIcmpClient,'Ping',mtScriptMethod,TypeInfo(_T0),[
TypeInfo(string),
TypeInfo(Word)],Addr(__TIdIcmpClient__Ping__Wrapper),cRegister);

RegRegisterMethod(TIdIcmpClient,'Receive',TypeInfo(_T1),[
TypeInfo(Integer),TypeInfo(IDispatch)],Addr(__TIdIcmpClient__Receive__Wrapper));

end;
initialization
__RegisteredMethods := TList.Create;
_mreg_0;
{RegisterEvent(TypeInfo(TOnReplyEvent),[
TypeInfo(TComponent),
TypeInfo(IDispatch)]);}

__RegisterClasses;
__RegisterConsts0;
__RegisterProps;

finalization
__UnRegisterClasses;
__UnregisterConsts0;
__UnregisterProcs;
end.
